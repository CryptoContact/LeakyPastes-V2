id,title,username,language,date,content
NbD0j3ji,Auto script,unknown437,Python,Sunday 14th of April 2024 01:32:00 AM CDT,"import mysql.connector
from mysql.connector import Error
import requests
import subprocess

import subprocess

def create_mysql_connection(host_name, user_name, user_password, database_name=None):
    connection = None
    try:
        connection = mysql.connector.connect(
            host=host_name,
            user=user_name,
            passwd=user_password,
            database=database_name
        )
        print(""MySQL Database connection successful"")
    except Error as err:
        print(f""Error: '{err}'"")
    
    return connection

def create_database(connection, query):
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        print(""Database created successfully"")
    except Error as err:
        print(f""Error: '{err}'"")

def execute_query(connection, query):
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        connection.commit()
        print(""Query successful"")
    except Error as err:
        print(f""Error: '{err}'"")

host_name = ""localhost""
user_name = input(""MySQL username > "")
passwd    = input(""MySQL password > "")
database_name = input(""Enter new database name to create > "")

connection = create_mysql_connection(host_name, user_name, passwd)
create_database_query = f""CREATE DATABASE {database_name}""
create_database(connection, create_database_query)

db_connection = create_mysql_connection(host_name, user_name, passwd, database_name)
create_student_table_query = ""CREATE TABLE student (id INTEGER PRIMARY KEY AUTO_INCREMENT, name VARCHAR(50) NOT NULL, email VARCHAR(120) UNIQUE NOT NULL);""
create_professors_table_query = ""CREATE TABLE professor (id INTEGER PRIMARY KEY AUTO_INCREMENT, name VARCHAR(50) NOT NULL, department VARCHAR(100) NOT NULL);""
create_course_table_query = ""CREATE TABLE course (id INTEGER PRIMARY KEY AUTO_INCREMENT, title VARCHAR(100) NOT NULL, department VARCHAR(100) NOT NULL, professor_id INTEGER, FOREIGN KEY (professor_id) REFERENCES professor(id));""
create_time_table_query = ""CREATE TABLE time (id INTEGER PRIMARY KEY AUTO_INCREMENT, academic_year VARCHAR(20) NOT NULL, semester VARCHAR(20) NOT NULL);""
create_enrollment_table_query = ""CREATE TABLE enrollment (id INTEGER PRIMARY KEY AUTO_INCREMENT, student_id INTEGER, course_id INTEGER, time_id INTEGER, grade VARCHAR(2), attendance_percentage FLOAT, FOREIGN KEY (student_id) REFERENCES student(id), FOREIGN KEY (course_id) REFERENCES course(id), FOREIGN KEY (time_id) REFERENCES time(id));""

execute_query(db_connection, create_student_table_query)
execute_query(db_connection, create_professors_table_query)
execute_query(db_connection, create_course_table_query)
execute_query(db_connection, create_time_table_query)
execute_query(db_connection, create_enrollment_table_query)


# Web Application Auto deploy

config = f""""""DB_USERNAME=""{user_name}""
DB_PASSWORD=""{passwd}""
DB_DATABASE=""{database_name}""
DB_HOSTNAME=""{host_name}""
""""""
config_file = open(""config.py"", ""w"")
config_file.write(config)
config_file.close()

content = requests.get(""https://pastebin.com/raw/nkBxBu9q"").content.decode()
web_auto_file = open(""web_auto.py"", ""w"")
web_auto_file.write(content)
web_auto_file.close()
subprocess.call([""python3 web_auto.py""], shell=True)
"
biS8mqHy,dac.sh - grabber v3,subbass,Bash,Sunday 14th of April 2024 01:19:28 AM CDT,"#!/bin/bash
# dac.sh - Download And Convert script (Grabber 3.0)
# This script downloads videos from a provided URL and converts them to the x265 (HEVC) format using yt-dlp and ffmpeg.
# It supports input directly as a command-line argument, from the clipboard, or from the current text selection.
# The script allows specifying the output filename or directory for the converted video using the -o flag.
#
# Version: 3.0
# Date: 2024-04-07
# Author: Subbass
# Requirements: yt-dlp, ffmpeg, xclip
# Usage:
#   ./dac.sh [URL] - Downloads and converts the video at [URL], saving it with the original filename.
#   ./dac.sh [URL] -o <output_file> - Downloads and converts the video at [URL], saving it as <output_file>.
#   ./dac.sh - If no URL is provided, the script checks the clipboard and primary selection for a valid URL.
#
# Changelog:
#   v1.0 - Initial release.
#   v1.1 - Added conversion to x265, replacing the original file.
#   v1.2 - Added support for checking both clipboard and primary selection for URLs.
#   v1.3 - Refined script documentation and added versioning and date information.
#   v2.0 - Added support for specifying output filename/directory using -o flag.
#         - Renamed files using yt-dlp -o option and passed it to ffmpeg for consistency.
#   v2.1 - Corrected handling of -o flag and parameters.
#   v2.2 - Fix file name handling
#   v2.21- Fix ""noiseyness"" of output
#   v3.0 - Integrated error handling for yt-dlp with long filenames and updated temporary directory handling for performance.

download_and_convert() {
  local url=""$1""
  local output_file=""$2""
  echo ""Downloading from: $url""

  # Define and use a temporary directory for the download and conversion process.
  local temp_dir=$(mktemp -d ""~/temp_video_download_XXXXXX"")
  echo ""Temp folder at: $temp_dir""
  pushd ""$temp_dir"" > /dev/null

  # Attempt to download the video file, handling long filename error.
  if [[ -z ""$output_file"" ]]; then
    yt-dlp --quiet --progress -w ""$url"" -o ""%(title)s.%(ext)s""
  else
    yt-dlp --quiet --progress -w ""$url"" -o ""${output_file}.%(ext)s""
  fi

  if [ $? -ne 0 ]; then
    echo ""Download failed, possibly due to a long filename.""
    echo ""Please enter a new filename (without extension):""
    read -r new_filename
    if [[ -z ""$output_file"" ]]; then
      yt-dlp --quiet --progress -w ""$url"" -o ""${new_filename}.%(ext)s""
    else
      yt-dlp --quiet --progress -w ""$url"" -o ""${new_filename}.%(ext)s""
      output_file=""${new_filename}""
    fi
  fi

  local downloaded_file=$(find . -type f -printf ""%f\n"" | head -n 1)

  if [[ ! -f ""$downloaded_file"" ]]; then
    echo ""Download failed or file not found: $downloaded_file""
    popd > /dev/null
    rm -rf ""$temp_dir""
    return
  fi

  echo ""Downloaded file: $downloaded_file""

  # Proceed with conversion if the file exists.
  echo ""Converting to x265...""
  local new_file=""${downloaded_file%.*}_x265.mp4""
  ffmpeg -hide_banner -i ""$downloaded_file"" -c:v libx265 -preset fast -x265-params crf=28 ""$new_file"" -loglevel warning -stats

  if [ -f ""$new_file"" ]; then
    # Move the final file to the original directory.
    mv ""$new_file"" ..
    echo ""Conversion complete: $new_file""
  else
    echo ""Conversion failed.""
  fi

  # Cleanup
  popd > /dev/null
  rm -rf ""$temp_dir""
}


get_url_from_clipboard_or_selection() {
  local url=$(xclip -o 2>/dev/null)
  if [[ $url =~ ^https?:// ]]; then
    echo $url
    return
  fi

  url=$(xclip -o -selection primary 2>/dev/null)
  if [[ $url =~ ^https?:// ]]; then
    echo $url
    return
  fi

  echo """"
}

if [ $# -eq 0 ]; then
  url=$(get_url_from_clipboard_or_selection)
  if [ -n ""$url"" ]; then
    download_and_convert ""$url""
  else
    echo ""No valid URL supplied, found in clipboard, or selected.""
  fi
elif [[ ""$1"" == ""-o"" ]]; then
  if [[ $# -ne 3 ]]; then
    echo ""Invalid usage of -o flag. Please provide a URL and a filename after -o.""
    exit 1
  fi
  download_and_convert ""$3"" ""$2""
else
  download_and_convert ""$1""
fi"
8zPFMW94,Untitled,cosenza987,C++,Sunday 14th of April 2024 01:14:59 AM CDT,"//–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ, –ì–µ—Ä–æ—è–º —Å–ª–∞–≤–∞

#include <bits/stdc++.h>

using namespace std;

const int N = 2e5 + 7, alph = 26, L = 20;

char s[N];
int len[N], link[N], to[alph][N], par[N], sze[N], nxt[N], up[L][N];
int n, last, sz, ans;

void init() {
    memset(len, 63, sizeof(len));
    memset(nxt, -1, sizeof(nxt));
    s[n++] = -1;
    link[0] = 1;
    len[0] = 0;
    len[1] = -1;
    sz = 2;
    for(int i = 0; i < N; i++) {
        par[i] = i;
        sze[i] = 1;
    }
}

int find(int a) {
    return par[a] == a ? a : par[a] = find(par[a]);
}

bool unite(int a, int b) {
    if((a = find(a)) == (b = find(b))) return false;
    if(sze[a] < sze[b]) swap(a, b);
    sze[a] += sze[b];
    par[b] = a;
    return true;
}

int get_link(int v) {
    while(s[n - len[v] - 2] != s[n - 1]) v = link[v];
    return v;
}

void add_letter(char c, int ind) {
    s[n++] = c;
    last = get_link(last);
    if(!to[c - 'a'][last]) {
        len[sz] = len[last] + 2;
        link[sz] = to[c - 'a'][get_link(link[last])];
        to[c - 'a'][last] = sz++;
        last = to[c - 'a'][last];
        up[0][last] = link[last];
        for(int i = 1; i < L; i++) {
            up[i][last] = up[i - 1][up[i - 1][last]];
        }
        int cur = last;
        for(int i = L - 1; i >= 0; i--) {
            if(len[up[i][cur]] > (len[last] + 1) / 2) {
                cur = up[i][cur];
            } 
        }
        nxt[last] = up[0][cur];
    } else {
        last = to[c - 'a'][last];
    }
    int cur = last;
    while(cur > 0) {
        ans -= unite(ind, ind - len[cur] + 1);
        cur = nxt[cur];
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    init();
    string str;
    cin >> str;
    ans = str.size();
    for(int i = 0; i < (int)str.size(); i++) {
        add_letter(str[i], i);
    }
    cout << ans << ""\n"";
    return 0; 
}"
6gHT1C2Y,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,jusst2k4,GetText,Sunday 14th of April 2024 12:43:26 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_688324.pdf

Working as of:
14 April 2024"
rV4VKzeG,Serial,LegendzHackz,Lua,Saturday 13th of April 2024 11:48:44 PM CDT,"return {
    ""fR4gT7hY2iU9jD5"", ""kL8mN1oP6wQ3eZ2"", ""sX5dC9vB4nM7bV"",
    ""zE1xR4cT7yU2iF9"", ""qW6sD3fG8hJ5kL7"", ""lM2nB8vC5xZ1cV9"",
    ""gR4fT7gY2hU9iO5"", ""pL8kN1lP6wQ3eZ2"", ""bX5mC9nB4mM7bV8"",
    ""tE1rR4dT7yU2iF9"", ""hW6jD3kG8hJ5kL7"", ""dM2sB8fC5xZ1cV9"",
    ""uR4iU7oP6wQ3eZ2"", ""wX5cN9vC4nM7bV8"", ""eE1yR4tT7yU2iF9"",
    ""aW6fD3gG8hJ5kL7"", ""oM2nC8lP6wQ3eZ2"", ""cX5zB9xZ4nM7bV8"",
    ""vE1lR4cT7yU2iF9"", ""rW6sD3hG8hJ5kL7"", ""nM2bC8vP6wQ3eZ2"",
    ""mX5dN9fC4nM7bV8"", ""jE1xR4gT7yU2iF9"", ""xW6kD3lG8hJ5kL7"",
    ""iM2sB8nC5xZ1cV9"", ""zY9aQ2bR5cT8dU1"", ""jF6kG3lH7iJ4mN5""
}"
hYtbuwPe,Untitled,Maxwellsfa,JSON,Saturday 13th of April 2024 11:40:49 PM CDT,"{
""Test1"": ""test1"",
   ""Test2"": ""test2"",
    ""Test3"": ""Test3""
}"
0gDUjVQD,Dex Explorer by Synarx,scriptingtales,Lua,Saturday 13th of April 2024 11:38:40 PM CDT,"-- https://glot.io/snippets/gl52rc0bsm
-- CREDITS TO SYNARX -- roblox.com/users/3742966329/profile

local Player = owner
local Root = {}

local Listeners = {}
local TweenService = game:GetService(""TweenService"")
local TextService = game:GetService(""TextService"")

local Classes = game:GetService(""HttpService""):JSONDecode(game:GetService(""HttpService""):GetAsync(""https://glot.io/snippets/gl4wl6n10q/raw/main.txt""))

function GetClassIconRect(Inst)
	local ReturnValue = Classes[Inst.ClassName]
	if not ReturnValue then
		for Name, Offset in Classes do
			if Inst:IsA(Name) then
				ReturnValue = Vector2.new(Offset[1], Offset[2])
				break
			end
		end
	else 
		ReturnValue = Vector2.new(ReturnValue[1], ReturnValue[2])
	end
	return ReturnValue
end

do
	Children = ""_Children""
	Ref = ""_Ref""
	Attribute = ""_Attr""

	local Val = {}
	Val.__index = Val

	function Val:get()
		return self._value
	end

	function Val:set(v)
		self._value = v
	end

	Value = function(v)
		local self = setmetatable({
			_value = v
		}, Val)
		return self
	end

	New = function(ClassName)
		local Object
		if typeof(ClassName) == ""string"" then
			Object = Instance.new(ClassName)
		end
		return function(Properties : {[string] : any}?)
			if not Properties then return end

			if typeof(ClassName) == ""function""then
				return ClassName(Properties)
			else 
				local Parent = Properties.Parent
				Properties.Parent = nil

				for Name, Value in Properties do
					if Name:sub(1,1) ~= ""_"" then
						Object[Name] = Value
					end
					if Name == Attribute then
						Object:SetAttribute(Value[1], Value[2])
					end
				end


				if Properties[Children] then
					for _, Child in Properties[Children] do
						Child.Parent = Object
					end
				end

				if Properties[Ref] then
					Properties[Ref]:set(Object)
				end

				Object.Parent = Parent
				return Object
			end
		end
	end
end

function RGBA(R,G,B,A)
	return Color3.fromRGB(R * A, G * A, B * A)
end

function Padding(Properties)
	return New ""UIPadding"" {
		PaddingBottom = Properties.Padding,
		PaddingLeft = Properties.Padding,
		PaddingRight = Properties.Padding,
		PaddingTop = Properties.Padding,
	}
end

local Width, Height, Scale = 3.5 * 2, 7, 1.8
local PPS = 300
local PixelScale = PPS / 50

local DisplayRef = Value()
local HolderRef = Value()
local DesktopRootRef = Value()
local DesktopRef = Value()

local Part = New ""Part"" {
	Size = Vector3.new(Width * Scale, Height * Scale, 0),
	CanTouch = false,
	CanCollide = false,
	Color = Color3.new(),
	Material = Enum.Material.SmoothPlastic,

	[Children] = {
		New ""SurfaceGui"" {
			SizingMode = Enum.SurfaceGuiSizingMode.PixelsPerStud,
			PixelsPerStud = PPS,
			Face = Enum.NormalId.Back,


			[Ref] = DisplayRef
		},
		New ""Attachment"" {},
	}
}

function UD(X, Y)
	return UDim.new(X * PixelScale, Y * PixelScale)
end

local UD2 = {}

function UD2.new(SX, OX, SY, OY)
	return UDim2.new(SX, OX * PixelScale, SY, OY * PixelScale)
end
UD2.fromScale = UDim2.fromScale
function UD2.fromOffset(X, Y)
	return UDim2.fromOffset(X * PixelScale, Y * PixelScale)
end

local UDim2 = UD2
local OpenTInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

local TabHeight = 12
local Selected
local PropertiesList = Value()

local Dump = {}
do
	local HttpService = game:GetService(""HttpService"")

	local URL = ""https://raw.githubusercontent.com/CloneTrooper1019/Roblox-Client-Tracker/roblox/API-Dump.json""

	-- Based from ""ApiDump"" module from Reclass.

	Dump.fetchCache = nil
	Dump.ignoredTags = {
		ReadOnly = true,
		Hidden = true,
		Deprecated = true,
	}
	Dump.fromClassCache = {}
	Dump.subclassesFromCache = {}
	Dump.membersFromCache = {}
	Dump.propertiesFromCache = {}
	Dump.instanceCache = {}

	function Dump:fetch(reload)
		if not reload then
			if self.fetchCache then
				return self.fetchCache
			end
		end
		local Success, Return = pcall(function()
			return HttpService:JSONDecode(HttpService:GetAsync(URL))
		end)
		if not Success then
			warn(Return)
			return
		end
		self.fetchCache = Return

		table.clear(self.fromClassCache)
		table.clear(self.subclassesFromCache)
		table.clear(self.membersFromCache)
		table.clear(self.propertiesFromCache)
		table.clear(self.instanceCache)

		return Return
	end


	--Dump:fromClass(classname : string)
	--Returns raw info of class.

	function Dump:fromClass(classname)
		local cache = self.fromClassCache[classname]
		if cache then return cache end

		local fetch = self:fetch()

		for _, object in fetch.Classes do
			if object.Name == classname then
				self.fromClassCache[classname] = object
				return object
			end
		end
	end

	--Dump:subclassesFromClass(classname : string)
	--Returns list subclasses from a class.

	function Dump:subclassesFromClass(classname)
		local cache = self.subclassesFromCache[classname]
		if cache then return cache end

		local fetch = self:fetch()

		local subclasses = {}
		for _, object in fetch.Classes do
			if object.Superclass == classname then
				table.insert(subclasses, object)
			end
		end

		self.subclassesFromCache[classname] = subclasses

		return subclasses
	end

	--Dump:membersFromClass(classname : string)
	--Returns class members.

	function Dump:membersFromClass(classname)
		local cache = self.membersFromCache[classname]
		if cache then return cache end

		local entries, properties = {}, {}

		local object = self:fromClass(classname)
		while object and object.Superclass ~= ""<<<ROOT>>>"" do
			table.insert(entries, 1, object)
			object = self:fromClass(object.Superclass)
		end
		table.insert(entries, 1, object)
		if not object then error(`{classname} doesn't exist`, 2) end

		for i = 1, #entries do
			local members = entries[i].Members
			for i = 1, #members do
				table.insert(properties, members[i])
			end
		end

		self.membersFromCache[classname] = properties
		return properties
	end

	--Dump:propertiesFromClass(classname : string)
	--Returns list of names of properties from a class, may not be accurate. See :propertiesFromInstance for accurate results.

	function Dump:propertiesFromClass(classname)
		local cache = self.propertiesFromCache[classname]
		if cache then return cache end
		local members = self:membersFromClass(classname)
		local properties = {}
		local inst

		for i = 1, #members do
			local member = members[i]
			if member.MemberType ~= ""Property"" then
				continue
			end

			local valid = true
			if member.Tags then
				local tags = member.Tags
				for i = 1, #tags do
					if self.ignoredTags[tags[i]] then
						valid = false
						break
					end
				end
			end

			if valid then
				table.insert(properties, member)
			end
		end

		return properties
	end
end

function decimalRound(number, digitsPast0)
	digitsPast0 = math.pow(10, digitsPast0)
	number *= digitsPast0
	if number >= 0 then 
		number = math.floor(number + 0.5) 
	else 
		number = math.ceil(number - 0.5) 
	end
	return number / digitsPast0
end

local Display = DisplayRef:get()
local RightClick = New ""Frame"" {
	BackgroundTransparency = 0.5,
	Size = UDim2.fromOffset(120, 10),
	Parent = Display,
	ZIndex = 2,
	Visible = false,

	[Children] = {
		New ""UIListLayout"" {}
	}
}

local RightClickOptions = {
	[""Delete""] = {function()
		Selected[1]:Destroy()
	end, ""rbxassetid://11768918600""}
}

for i,v in RightClickOptions do
	local Button = New ""Frame"" {
		Size = UDim2.new(1, 0, 0, 10),
		BackgroundColor3 = Color3.new(0.2, 0.2 ,0.2),
		BorderSizePixel = PixelScale,
		BorderColor3 = Color3.new(0.18, 0.18, 0.18),
		ZIndex = 3,

		[Attribute] = {""Input"", true},
		[Children] = {
			New ""TextLabel"" {
				BackgroundTransparency = 1,
				TextColor3 = Color3.new(0.7, 0.7, 0.7),
				TextSize = 8 * PixelScale,
				Font = Enum.Font.Code,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextTruncate = 1,
				Size = UDim2.fromScale(0.5, 1),
				Text = ""   ""..i,
				ZIndex = 3,
			},
		}
	}

	if v[2] then
		New ""ImageLabel"" {
			Image = v[2],
			BackgroundTransparency = 1,
			Size = UDim2.fromOffset(11, 8),
			ScaleType = Enum.ScaleType.Fit,
			Position = UDim2.fromOffset(2, 0),
			Parent = Button,
			ZIndex = 3,
		}
	end
	
	Button.Parent = RightClick

	Listeners[Button] = {
		Click = function()
			v[1]()
		end
	}
end

function CreateTab(Props)
	local Tab = New ""Frame"" { 
		Size = UDim2.new(1, 0, 0, TabHeight),
		BackgroundTransparency = 1,
		ClipsDescendants = true,

		[Children] = {
			New ""Frame"" {
				BackgroundTransparency = 1,
				Name = ""Selection"",
				BorderSizePixel = 0,
				Size = UDim2.new(1, 0, 0, TabHeight),
			},
			New ""Frame"" {
				BackgroundTransparency = 1,
				Name = ""Selected"",
				BorderSizePixel = 0,
				BackgroundColor3 = Color3.new(0, 0.6, 1),
				Size = UDim2.new(1, 0, 0, TabHeight),

				[Attribute] = {""Input"", true},
			},
			New ""Frame"" {
				BackgroundTransparency = 1,
				Position = UDim2.fromOffset(3 + (16 * (Props.Indent - 1)), 0),
				Size = UDim2.fromScale(1, 1),

				[Children] = {
					New ""Frame"" {
						BackgroundTransparency = 1,
						Size = UDim2.fromOffset(8, 8),
						AnchorPoint = Vector2.new(0.5, 0),
						Position = UDim2.fromOffset(0, 2),
						Name = ""InputButton"",
						ZIndex = 2,

						[Attribute] = {""Input"", true},
						[Children] = {
							New ""ImageButton"" {
								Image = ""rbxasset://textures/ui/AvatarContextMenu_Arrow.png"",
								BackgroundTransparency = 1,
								AnchorPoint = Vector2.one * 0.5,
								Position = UDim2.fromScale(0.5, 0.5),
								Size = UDim2.fromOffset(3, 14),
								ScaleType = Enum.ScaleType.Fit,
								ImageTransparency = next(Props.Root:GetChildren()) and 0.25 or 1,
							},
						}
					},
					New ""ImageLabel"" {
						Image = ""http://www.roblox.com/asset/?id=13496467347"",
						BackgroundTransparency = 1,
						ImageRectSize = Vector2.one * 16,
						ImageRectOffset = Props.RectOffset,
						Size = UDim2.fromOffset(11, 14),
						Position = UDim2.fromOffset(6, 0),
						ScaleType = Enum.ScaleType.Fit,
					},
					New ""TextLabel"" {
						Text = Props.Text,
						BackgroundTransparency = 1,
						Font = Enum.Font.Code,
						TextSize = 8 * PixelScale,
						TextXAlignment = Enum.TextXAlignment.Left,
						Position = UDim2.fromOffset(19+3, 0),
						Size = UDim2.fromOffset(TextService:GetTextSize(Props.Text, 8 * PixelScale, Enum.Font.Code, Vector2.one * math.huge), 14),
						TextColor3 = Color3.new(0.7, 0.7, 0.7)
					},
				}
			}
		}
	}

	Tab.Parent = Props.Parent

	local Toggle = false
	local Added = {}

	local InputButton = Tab.Frame.InputButton


	local function UpdateDropdown(v)
		local Children = Props.Root:GetChildren()

		local ImageButton = InputButton:FindFirstChild(""ImageButton"")
		if ImageButton then
			ImageButton.ImageTransparency = next(Children) and 0.25 or 1
		end
	end

	local function AddChild(v)
		local NewTab = CreateTab{
			Root = v,
			RectOffset = GetClassIconRect(v),
			Text = v.Name,
			Indent = Props.Indent + 1,
			Parent = Tab.Holder.Frame,
		}

		v.Destroying:Connect(function()
			NewTab:Destroy()
		end)

		table.insert(Added, NewTab)
	end

	local PropertyTabs = {}

	local RemovedEvent = Props.Root.ChildRemoved:Connect(UpdateDropdown)
	local AddedEvent = Props.Root.ChildAdded:Connect(function(v)
		UpdateDropdown()
		if Toggle then
			AddChild(v)		
		end
	end)
	local Changed = Props.Root.Changed:Connect(function(Property)
		if Property == ""Name"" then
			Tab.Frame.TextLabel.Text = Props.Root.Name
			Tab.Frame.TextLabel.Size = UDim2.fromOffset(TextService:GetTextSize(Props.Root.Name, 8 * PixelScale, Enum.Font.Code, Vector2.one * math.huge) , 14)
		end
		local Tab = PropertyTabs[Property]
		if Tab then
			local Value = Props.Root[Property]
			local ValueObject = Tab:FindFirstChild(""Value"")
			if ValueObject then
				if typeof(Value) ~= ""boolean"" then
					ValueObject.Text = tostring(Value)
				else 
					ValueObject.ImageLabel.Visible = Value
				end
			end
		end
	end)

	local TabSelected = Tab.Selected
	Tab.Destroying:Connect(function()
		RemovedEvent:Disconnect()
		AddedEvent:Disconnect()
		Changed:Disconnect()
		Listeners[InputButton] = nil
		Listeners[TabSelected] = nil
	end)

	local CurrentChildren = {}

	Listeners[InputButton] = {
		Click = function()
			Toggle = not Toggle
			Tab.Frame.InputButton.ImageButton.Rotation = Toggle and 90 or 0

			if Toggle then
				CurrentChildren = Props.Root:GetChildren()

				for i, v in CurrentChildren do
					if i > 475 then warn(""Hit children view limit"") break end
					if i % 35 == 0 then
						task.wait()
					end
					AddChild(v)
				end
			else 
				Tab.Size = UDim2.new(1, 0, 0, TabHeight)


				for i, v in Added do
					if i % 45 == 0 then
						task.wait()
					end
					v:Destroy()
				end

				table.clear(Added)
			end
		end,
	}
	Listeners[TabSelected] = {
		Click = function()
			if Selected and Selected[2]:FindFirstChild(""Selected"") then
				Selected[2].Selected.BackgroundTransparency = 1
			end
			TabSelected.BackgroundTransparency = 0.6
			Selected = {Props.Root, Tab}
			PropertiesList:get().ScrollingFrame.Title.Text = `""{Props.Root.Name}"" - Properties`
			local Properties = Dump:propertiesFromClass(Props.Root.ClassName)

			for i,v in PropertiesList:get().ScrollingFrame:GetChildren() do
				if v.Name == ""Property"" then
					v:Destroy()
				end
			end

			for i, v in Properties do
				local Success, Value = pcall(function()
					return Props.Root[v.Name]
				end)
				if not Success then continue end

				local Tab = New ""Frame"" {
					Size = UDim2.new(1, 0, 0, 18),
					BackgroundTransparency = 1,
					Parent = PropertiesList:get().ScrollingFrame,
					LayoutOrder = 2 + i,
					Name = ""Property"",

					[Children] = {
						New ""Frame"" {
							Size = UDim2.fromScale(0.5, 1),
							BackgroundColor3 = Color3.new(0.2, 0.2 ,0.2),
							BorderSizePixel = PixelScale,
							BorderColor3 = Color3.new(0.18, 0.18, 0.18),
						},
						New ""Frame"" {
							Size = UDim2.fromScale(0.5, 1),
							Position = UDim2.fromScale(0.5, 0),
							BackgroundColor3 = Color3.new(0.2, 0.2 ,0.2),
							BorderSizePixel = PixelScale,
							BorderColor3 = Color3.new(0.18, 0.18, 0.18),
						},
						New ""TextLabel"" {
							BackgroundTransparency = 1,
							TextColor3 = Color3.new(0.7, 0.7, 0.7),
							TextSize = 11 * PixelScale,
							Font = Enum.Font.Code,
							TextXAlignment = Enum.TextXAlignment.Left,
							TextTruncate = 1,
							Size = UDim2.fromScale(0.5, 1),
							Text = ""   ""..v.Name,
							ZIndex = 2,
						},
						
					}
				}
				if Value then
					if typeof(Value) ~= ""boolean""  then
						local ValueObject = New ""TextBox"" {
							BackgroundTransparency = 1,
							TextColor3 = Color3.new(0.7, 0.7, 0.7),
							Position = UDim2.fromScale(0.536, 0),
							TextSize = 11 * PixelScale,
							Font = Enum.Font.Code,
							TextXAlignment = Enum.TextXAlignment.Left,
							TextTruncate = 1,
							Size = UDim2.fromScale(0.5, 1),
							Text = tostring(Value),
							ZIndex = 2,
							ClearTextOnFocus = false,
							TextEditable = false,
							Name = ""Value"",
							Parent = Tab,

							[Attribute] = {""TextBox"", true}
						}
						Listeners[ValueObject] = function(Text)
							local Set = Text
							local Val = Props.Root[v.Name]
							if typeof(Val) == ""Vector3"" then
								Set = Vector3.new(unpack(Text:split("","")))
							end
							if typeof(Val) == ""Vector2"" then
								Set = Vector2.new(unpack(Text:split("","")))
							end
							if typeof(Val) == ""CFrame"" then
								Set = CFrame.new(unpack(Text:split("","")))
							end
							Props.Root[v.Name] = Set
						end
					else 
						local ValueObject = New ""Frame"" {
							BackgroundColor3 = Color3.new(0.19, 0.19, 0.19),
							BorderColor3 = Color3.new(0.18, 0.18, 0.18),
							BorderSizePixel = PixelScale,
							Position = UDim2.fromScale(0.536, 0.5),
							AnchorPoint = Vector2.new(0, 0.5),
							Size = UDim2.fromOffset(13, 13),
							ZIndex = 2,
							Name = ""Value"",
							Parent = Tab,

							[Attribute] = {""Input"", true},
							[Children] = {
								New ""ImageLabel"" {
									Image = ""rbxassetid://1202200114"",
									BackgroundTransparency = 1,
									AnchorPoint = Vector2.one * 0.5,
									Size = UDim2.fromScale(0.9, 0.9),
									Position = UDim2.fromScale(0.5, 0.5),
									ZIndex = 2,
									Visible = Value,
								}
							}
						}

						Listeners[ValueObject] = {
							Click = function()
								Props.Root[v.Name] = not Props.Root[v.Name]
							end
						}
					end
				end
				Tab.Destroying:Connect(function()
					PropertyTabs[v.Name] = nil
				end)
				PropertyTabs[v.Name] = Tab
			end
		end,
		Click2 = function(Position)
			if Selected and Selected[2]:FindFirstChild(""Selected"") then
				Selected[2].Selected.BackgroundTransparency = 1
			end
			TabSelected.BackgroundTransparency = 0.6
			Selected = {Props.Root, Tab}
			RightClick.Visible = true
			Position = Position / PixelScale
			RightClick.Position = UDim2.fromOffset(Position.X, Position.Y)
		end,
		Leave = function()
			Tab.Selection.BackgroundTransparency = 1
		end,
		Enter = function()
			Tab.Selection.BackgroundTransparency = 0.8
		end
	}

	local Holder = New ""Frame"" {
		Size = UDim2.fromScale(1, 10),
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(0, TabHeight),
		Name = ""Holder"",
		Parent = Tab,

		[Children] = {
			New ""Frame"" {
				BackgroundTransparency = 0.8,
				Size = UDim2.new(0, 0.5, 1, 0),
				BorderSizePixel = 0,
				Position = UDim2.fromOffset(3 + (16 * (Props.Indent - 1)), 0),
				Name = ""Indent"",
			},
			New ""Frame"" {
				Size = UDim2.fromScale(1, 1),
				BackgroundTransparency = 1,
			}
		}
	}

	local Layout = New ""UIListLayout"" {
		Parent = Holder.Frame,
	}

	Layout:GetPropertyChangedSignal(""AbsoluteContentSize""):Connect(function()
		Tab.Size = UDim2.new(1, 0, 0, TabHeight + Layout.AbsoluteContentSize.Y / 6)
	end)

	return Tab
end

New ""LinearVelocity"" {
	Parent = Part,
	MaxForce = math.huge,
	VectorVelocity = Vector3.new(),
	Attachment0 = Part.Attachment,
	RelativeTo = Enum.ActuatorRelativeTo.World,
	VelocityConstraintMode = Enum.VelocityConstraintMode.Vector,
}

local ExplorerList = Value()

local Holder = New ""Frame"" {
	Parent = Display,

	Size = UDim2.fromScale(1, 1),
	BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
	BorderSizePixel = 0,

	[Ref] = HolderRef,
	[Children] = {
		New ""UIPadding"" {
			PaddingTop = UD(0, 2),
			PaddingLeft = UD(0, 2),
			PaddingRight = UD(0, 2),
			PaddingBottom = UD(0, 2),
		},
		New ""Frame"" {
			Size = UDim2.fromScale(1, 1),
			BackgroundColor3 = Color3.new(0.22,.22,.22),
			BorderSizePixel = 0,

			[Children] = {
				New ""Frame"" {
					Size = UDim2.new(0.5, -3, 1, 0),
					BackgroundColor3 = Color3.new(0.18,.18,.18),
					BorderSizePixel = 0,

					[Children] = {
						New ""UIPadding"" {
							PaddingTop = UD(0, 1),
							PaddingLeft = UD(0, 1),
							PaddingRight = UD(0, 1),
							PaddingBottom = UD(0, 1),
						},
						New ""ScrollingFrame"" {
							Size = UDim2.fromScale(1, 1),
							BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
							BorderSizePixel = 0,
							AutomaticCanvasSize = Enum.AutomaticSize.XY,
							CanvasSize = UDim2.new(0, 0, 0, 0),

							[Ref] = ExplorerList,
							[Children] = {
								New ""UIListLayout"" {},
							}
						}
					}
				},
				New ""Frame"" {
					Size = UDim2.new(0.5, -3, 1, 0),
					Position = UDim2.new(0.5, 3, 0, 0),
					BackgroundColor3 = Color3.new(0.18,.18,.18),
					BorderSizePixel = 0,

					[Ref] = PropertiesList,
					[Children] = {
						New ""UIPadding"" {
							PaddingTop = UD(0, 1),
							PaddingLeft = UD(0, 1),
							PaddingRight = UD(0, 1),
							PaddingBottom = UD(0, 1),
						},
						New ""ScrollingFrame"" {
							Size = UDim2.fromScale(1, 1),
							BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
							BorderSizePixel = 0,
							AutomaticCanvasSize = Enum.AutomaticSize.XY,
							CanvasSize = UDim2.new(0, 0, 0, 0),

							[Children] = {
								New ""UIListLayout"" {
									SortOrder = Enum.SortOrder.LayoutOrder,
								},
								New ""TextLabel"" {
									BackgroundTransparency = 1,
									TextColor3 = Color3.new(0.7, 0.7, 0.7),
									TextSize = 11 * PixelScale,
									Font = Enum.Font.Code,
									Size = UDim2.new(1, 0, 0, 14),
									Text = ""Properties"",
									Name = ""Title"",
								},
								New ""Frame"" {
									BackgroundTransparency = 1,
									Size = UDim2.new(1, 0, 0, 8),
									Name = ""Seperator"",
									LayoutOrder = 1,

									[Children] = {
										New ""Frame"" {
											Size = UDim2.new(1, 0, 0, 0.5),
											BackgroundTransparency = 0.8,
											BorderSizePixel = 0,
											AnchorPoint = Vector2.one * 0.5,
											Position = UDim2.fromScale(0.5, 0.5)
										}
									}
								}
							}
						}
					}
				},
				New ""UIPadding"" {
					PaddingTop = UD(0, 4),
					PaddingLeft = UD(0, 4),
					PaddingRight = UD(0, 4),
					PaddingBottom = UD(0, 4),
				},
			}
		}
	}
}

function AddInstance(Inst, Parent)
	local Tab = CreateTab{
		RectOffset = GetClassIconRect(Inst),
		Text = Inst.Name,
		Root = Inst,
		Indent = 1,
	}
	Tab.Parent = Parent

	return Tab
end


local ShownServices = {
	""Workspace"",
	""Players"",
	""Lighting"",
	""MaterialService"",
	""ReplicatedFirst"",
	""ReplicatedStorage"",
	""ServerScriptService"",
	""ServerStorage"",
	""Teams"",
	""SoundService"",
	""Chat"",
	""TextChatService"",
	""VoiceChatService"",
	""LocalizationService"",
	""TestService""
}

for i,v in ShownServices do
	AddInstance(game:GetService(v), ExplorerList:get())
end

Part.Parent = script
Part:SetNetworkOwner(Player)

local Locals = Instance.new(""ScreenGui"", Player.PlayerGui)
Locals.ResetOnSpawn = false

local RemoteFunction = Instance.new(""RemoteFunction"", Locals)
local RemoteEvent = Instance.new(""RemoteEvent"", Locals)

RemoteFunction.OnServerInvoke = function(Player, Type, ...)
	local Arguments = {...}
	if Type == ""Initialize"" then
		return Part
	end
end

RemoteEvent.OnServerEvent:Connect(function(Player, Type, Name, Value, ...)
	if Type == ""Input"" then
		local Listener = Listeners[Value]
		if Listener and Listener[Name] then
			Listener[Name](...)
		end
	end
	if Type == ""TextBox"" then
		local Listener = Listeners[Name]
		if Listener then
			Listener(Value)
		end
	end
end)

local Count = New ""TextLabel"" {
	BackgroundTransparency = 1,
	TextColor3 = Color3.new(0.7, 0.7, 0.7),
	TextSize = 11 * PixelScale,
	Font = Enum.Font.Code,
	Size = UDim2.new(1, 0, 0, 14),
	Text = ""GUI Instance Count - ""..#Part:GetDescendants(),
	ZIndex = 999,
	Parent = Holder,
}

if owner.Name == ""Darkceius"" then
    print(""hi"")
end
Count.Text = ""MADE BY SYNARX""

NLS([[local RunService = game:GetService(""RunService"")
local UserInputService = game:GetService(""UserInputService"")

local Lock = false

local Players = game:GetService(""Players"")
local Player = Players.LocalPlayer

print(""Starting localscript..."")

local Part = script.Parent.RemoteFunction:InvokeServer(""Initialize"")

print(""Localscript running."",Part)

RunService.RenderStepped:Connect(function(DeltaTime)
	local Character = Player.Character
	if Character and not Lock then
		Part.CFrame = Character.HumanoidRootPart.CFrame * CFrame.new(0, (Part.Size.Y * 0.5) - 2, -5)
	end
end)

local Focus

UserInputService.InputBegan:Connect(function(Input, GameProccessed)
	if not GameProccessed then
		if Input.KeyCode == Enum.KeyCode.M then
			Lock = not Lock
		end
	end
	if Input.KeyCode == Enum.KeyCode.Return and Focus then
		script.Parent.RemoteEvent:FireServer(""TextBox"", Focus, Focus.Text)
	end
end)

function Input(v)
	if v:GetAttribute(""Input"") then
		v.MouseEnter:Connect(function()
			script.Parent.RemoteEvent:FireServer(""Input"", ""Enter"", v)
		end)
		v.MouseLeave:Connect(function()
			script.Parent.RemoteEvent:FireServer(""Input"", ""Leave"", v)
		end)
		v.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				script.Parent.RemoteEvent:FireServer(""Input"", ""Click"", v)
			end
			if Input.UserInputType == Enum.UserInputType.MouseButton2 then
				script.Parent.RemoteEvent:FireServer(""Input"", ""Click2"", v, Input.Position)
			end
		end)
	end
	if v:GetAttribute(""TextBox"") then
		v.TextEditable = true
		v.Focused:Connect(function()
			Focus = v
		end)
		v.FocusLost:Connect(function()
			task.wait(0.02)
			Focus = nil
		end)
	end
end

for i, v in next, Part:GetDescendants() do
	Input(v)
end

Part.DescendantAdded:Connect(function(v)
	task.defer(function()
		Input(v)
	end)
end)]], Locals)"
XhQuMiA0,10sec_packet_capture,Python253,Python,Saturday 13th of April 2024 11:17:46 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: 10sec_packet_capture.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script captures network packets using Scapy and logs packet information to a text file. Additionally, it runs Procmon to capture detailed process information.

Requirements:
- Python 3.x
- Scapy library (install using 'pip install scapy')

Functions:
1. packet_logger(packet): Log packet information to the console.
2. start_capture(): Start capturing network packets using Scapy.
3. run_procmon(): Run Procmon to capture detailed process information.
4. stop_procmon(): Stop Procmon capture.

Usage:
1. Ensure Python 3.x is installed on your system.
2. Install the Scapy library using 'pip install scapy'.
3. Save the packet_capture.py script to a directory of your choice.
4. Open a terminal or command prompt.
5. Navigate to the directory where the packet_capture.py script is saved.
6. Run the script using the following command:  'python packet_capture.py'
7. During script execution, network packets will be captured and logged to the console. Procmon will also be started to capture process information.
8. After capturing packets for the specified duration, the captured packet information will be saved to a text file named 'captured_packets.txt' in the same directory.
9. The Procmon capture will be automatically stopped after packet capture completes.

Additional Notes:
- This script captures network packets using the Scapy library.
- Packet information is logged to the console during packet capture.
- Procmon is started in a separate thread to capture detailed process information simultaneously with packet capture.
- Captured packet information is saved to a text file for further analysis.

Demo Output:
# Process Monitor Log (PML) generated for testing purposes
# Packet Captured:
# -----------------
# Protocol: Ether / IPv6 / ICMPv6ND_NS / ICMPv6 Neighbor Discovery Option - Source Link-Layer Address XX:XX:XX:XX:XX:XX
# Packet Payload:
# IPv6 / ICMPv6ND_NS / ICMPv6 Neighbor Discovery Option - Source Link-Layer Address XX:XX:XX:XX:XX:XX
 
# Raw Bytes:
60 00 00 00 00 20 3a ff fe 80 00 00 00 00 00 00 4a bd ce ff fe 1b dd 59 26 01 06 03 07 01 00 d0 5d c3 b3 ab 6a da 1e 04 87 00 f3 77 00 00 00 00 26 01 06 03 07 01 00 d0 5d c3 b3 ab 6a da 1e 04 01 01 48 bd ce 1b dd 59
""""""

import scapy.all as scapy
from scapy.layers.inet import IP, TCP, UDP
import time
import subprocess
import threading
import os

PROC_MON_PATH = r""C:\Program Files\Sysinternals\Procmon.exe""
CAPTURE_DURATION = 10  # Duration of packet capture in seconds

def packet_logger(packet):
    """"""
    Log packet information to the console.
    """"""
    print(""Packet captured:"")
    print(""-----------------"")
    print(""Protocol:"", packet.summary())
    if IP in packet:
        print(""Source IP:"", packet[IP].src)
        print(""Destination IP:"", packet[IP].dst)
    if TCP in packet:
        print(""Source Port:"", packet[TCP].sport)
        print(""Destination Port:"", packet[TCP].dport)
        print(""TCP Flags:"", packet[TCP].flags)
    elif UDP in packet:
        print(""Source Port:"", packet[UDP].sport)
        print(""Destination Port:"", packet[UDP].dport)
    print(""Packet Payload:"")
    if isinstance(packet.payload, bytes):
        print(packet.payload.decode('utf-8', errors='ignore'))
    else:
        print(packet.payload)
    print(""\nRaw Bytes:"")
    print(bytes(packet.payload))

def start_capture():
    """"""
    Start capturing packets.
    """"""
    start_time = time.time()
    captured_packets = []
    while time.time() - start_time < CAPTURE_DURATION:
        packet = scapy.sniff(timeout=1)
        if packet:
            captured_packets.extend(packet)  # Extend the list with the packet
            for pkt in packet:
                packet_logger(pkt)
    
    # Save captured packets to a text file
    with open(""captured_packets.txt"", ""w"") as file:
        for packet in captured_packets:
            file.write(""Packet captured:\n"")
            file.write(""-----------------\n"")
            file.write(""Protocol: {}\n"".format(packet.summary()))
            if IP in packet:
                file.write(""Source IP: {}\n"".format(packet[IP].src))
                file.write(""Destination IP: {}\n"".format(packet[IP].dst))
            if TCP in packet:
                file.write(""Source Port: {}\n"".format(packet[TCP].sport))
                file.write(""Destination Port: {}\n"".format(packet[TCP].dport))
                file.write(""TCP Flags: {}\n"".format(packet[TCP].flags))
            elif UDP in packet:
                file.write(""Source Port: {}\n"".format(packet[UDP].sport))
                file.write(""Destination Port: {}\n"".format(packet[UDP].dport))
            file.write(""Packet Payload:\n"")
            if isinstance(packet.payload, bytes):
                file.write(packet.payload.decode('utf-8', errors='ignore') + ""\n"")
            else:
                file.write(str(packet.payload) + ""\n"")
            file.write(""\nRaw Bytes:\n"")
            file.write(str(bytes(packet.payload)) + ""\n\n"")

def run_procmon():
    """"""
    Run Procmon to capture detailed process information.
    """"""
    try:
        subprocess.Popen([PROC_MON_PATH, ""/Quiet"", ""/Minimized"", ""/Backingfile"", ""output.pml""])
        print(""Procmon started successfully."")
    except Exception as e:
        print(""Error starting Procmon:"", e)

def stop_procmon():
    """"""
    Stop Procmon capture.
    """"""
    try:
        subprocess.run([PROC_MON_PATH, ""/Terminate""])
        print(""Procmon stopped successfully."")
    except Exception as e:
        print(""Error stopping Procmon:"", e)

if __name__ == ""__main__"":
    procmon_thread = threading.Thread(target=run_procmon)
    procmon_thread.start()
    start_capture()
    stop_procmon()

"
GfHpeqN9,pml2txt,Python253,Python,Saturday 13th of April 2024 11:12:25 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: pml2txt.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script converts a Process Monitor Log (PML) file (.pml) to a text file (.txt). It reads the content of the .pml file and writes it to a .txt file.

Usage:
- Ensure Python 3.x is installed on your system.
- Save the pml2txt.py script to a directory of your choice.
- Open a terminal or command prompt.
- Navigate to the directory where the pml2txt.py script is saved.
- Run the script using the following command:  'python pml2txt.py'
- After successful execution, a .txt file with the same name as the input .pml file will be created in the same directory.

Requirements:
- Python 3.x

""""""

import os

def convert_pml_to_txt(pml_file):
    """"""
    Converts a Process Monitor Log (PML) file (.pml) to a text file (.txt).

    Args:
    - pml_file (str): Path to the input .pml file.

    Returns:
    - None

    """"""
    # Define the output file path
    txt_file = os.path.splitext(pml_file)[0] + '.txt'
    
    # Read the content of the .pml file using 'latin1' encoding
    with open(pml_file, 'r', encoding='latin1') as pml:
        pml_content = pml.read()
    
    # Write the content to a .txt file
    with open(txt_file, 'w', encoding='utf-8') as txt:
        txt.write(pml_content)

# Example usage: Convert 'demo.pml' to .txt
convert_pml_to_txt('demo.pml') # Replace 'demo' with your filename.

"
uBb5xtST,demo_pml,Python253,Python,Saturday 13th of April 2024 11:11:49 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: demo_pml.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script generates a demo Process Monitor Log (PML) file (.pml) containing sample process monitoring data. 
The generated .pml file simulates process events such as process name, operation, path, result, and detail.
It serves as a convenient tool for generating sample input data for testing the pml2csv.py script.

Requirements:
- Python 3.x

Usage:
1. Ensure Python 3.x is installed on your system.
2. Save the demo_pml.py script to a directory of your choice.
3. Open a terminal or command prompt.
4. Navigate to the directory where the demo_pml.py script is saved.
5. Run the script using the following command:  'python demo_pml.py'
6. After successful execution, a demo .pml file named ""demo.pml"" will be created in the same directory.

Additional Notes:
- The generated .pml file contains sample process monitoring data in tab-separated format.
- This script is intended for demonstration purposes and generates static demo data.
- Users can customize the script to adjust the generated data according to their testing needs.

Demo Output:
Process Name     Operation     Path
explorer.exe     Create        C:\Users\user\Downloads\data.csv
notepad.exe      Read          C:\Users\user\Desktop\file.txt
chrome.exe       Write         C:\Users\user\Documents\document.docx
svchost.exe      Open          C:\Users\user\Downloads\data.csv
cmd.exe          Delete        C:\Users\user\Desktop\file.txt
""""""

import random

def generate_demo_pml(filename):
    with open(filename, 'w') as f:
        # Write header
        f.write(""Time\tProcess Name\tPID\tOperation\tPath\tResult\tDetail\n"")
        # Generate sample process events
        processes = [""explorer.exe"", ""notepad.exe"", ""chrome.exe"", ""svchost.exe"", ""cmd.exe""]
        operations = [""Create"", ""Read"", ""Write"", ""Delete"", ""Open"", ""Close""]
        paths = [""C:\\Users\\user\\Desktop\\file.txt"", ""C:\\Users\\user\\Documents\\document.docx"", ""C:\\Users\\user\\Downloads\\data.csv""]
        results = [""SUCCESS"", ""ERROR""]
        details = [""File created"", ""File opened"", ""File deleted"", ""Data written"", ""Access denied""]
        for i in range(20):  # Generate 20 sample events
            time = f""2024-04-14 10:{random.randint(0, 59):02d}:{random.randint(0, 59):02d}""
            process = random.choice(processes)
            pid = random.randint(1000, 9999)
            operation = random.choice(operations)
            path = random.choice(paths)
            result = random.choice(results)
            detail = random.choice(details)
            f.write(f""{time}\t{process}\t{pid}\t{operation}\t{path}\t{result}\t{detail}\n"")

if __name__ == ""__main__"":
    generate_demo_pml(""demo.pml"")"
MVKH3MvG,Minecraft Turtle Terraform,hornedcommando,Lua,Saturday 13th of April 2024 11:11:00 PM CDT,"-- Desc: Attempts to flatten a square area defined by the user
-- By: hornedcommando

print(""y set to 0"")
y = 0

local function input()
    while true do
        write(""How big me dig?\n"")
        size = tonumber(read())
            break
        end
    end


--TODO: it's hard coded to use dirt, should update to use a table of blocks
local blocks = {
    {name = ""minecraft:dirt""},
    {name = ""minecraft:cobblestone""}
}

-- Function to smartly refuel the turtle
local function smartRefuel()
    -- Check if fuel level is below 200
    while turtle.getFuelLevel() < 200 do
        for slot = 1, 16 do
            turtle.select(slot) -- Select the slot
            if turtle.refuel(0) then -- Check if the selected item is a fuel
                turtle.refuel(1) -- Refuel with the selected item
                break -- Stop searching for fuel after refueling
            end
        end
    end
end

local function searchInventory(name)
    for slot = 1, 16 do
        turtle.select(slot)
        local slotDetail = turtle.getItemDetail()
        if slotDetail and slotDetail.name:find(name) then
            return slot -- Return the slot number if item found
        end
    end
    return nil -- Return nil if item not found
end

-- Function to make the turtle go up
function gu()
    print(""Going up"")
    while not turtle.up() do
        print(""Digging up"")
        turtle.digUp()
    end
    y = y + 1
    print(""y is now "" .. y)
end

local function fill(name)
    local found, slot = searchInventory(name)
    if found then
        turtle.placeDown()  -- Place the block
        print(""Placed block:"", name)
    else
        print(""Block not found:"", name)
    end
end

-- Function to make the turtle go down
function gd()
    print(""Going down"")
    while not turtle.down() do
        print(""Digging down"")
        turtle.digDown()
        if not turtle.inspectDown() and y == 0 then
            fill(""minecraft:dirt"")
        end
    end
    y = y - 1
    print(""y is now "" .. y)
end

-- Function to make the turtle go forward
function gf()
    print(""Checking if a block is in front of me"")
    if not turtle.inspectDown() then
        fill(""minecraft:dirt"")
    end
    while turtle.inspect() or turtle.inspectUp() do
        gu()
        end
    print(""Moving forward"")
    turtle.forward()
    while y > 0 do
        gd()
    end
    if not turtle.inspect() then
        fill(""minecraft:dirt"")
    end
    smartRefuel()
end

-- Function to make the turtle go back along the defined area
function lTurn()
    turtle.turnLeft()    -- Turn left
    gf()     -- Move forward
    turtle.turnLeft()    -- Turn left
end

-- Function to make the turtle go back along the defined area (but to the right)
function rTurn()
    turtle.turnRight()   -- Turn right
    gf()     -- Move forward
    turtle.turnRight()   -- Turn right
end

-- Function to make the turtle travel the length of the defined area
function fEnd(size)
    for i = 1, size do
        gf()  -- Move forward
    end
end

-- Combines movement functions to form a sweeping square pattern
local function sweep(size)
    for i = 1, size do
        fEnd(size - 1)  -- Move to the end of the row
        if i < size then
            if i % 2 == 1 then
                rTurn()  -- Turn right at the end of the row
            else
                lTurn()  -- Turn left at the end of the row
            end
        end
    end
end


smartRefuel()
input()
sweep(size)"
mzGuSysE,week393 T3,pb_jiang,C++,Saturday 13th of April 2024 11:01:52 PM CDT,"using ll = long long;
class Solution {
    int lowbit(int x) { return x & -x; }
    int log2(int x) {
        int ret = 0;
        while(x > 1)
            x = x / 2, ret += 1;
        return ret;
    }
public:
    long long findKthSmallest(vector<int>& cs, int k) {
        ll lb = 0, ub = 5e11;
        auto check = [&](ll v) {
            ll n = cs.size(), cnt = 0;
            for (int i = (1 << n) - 1; i > 0; --i) {
                int j = i, lb = lowbit(j), idx = log2(lb), g = cs[idx], bit = 1;
                j = j - lb;
                while(j) {
                    lb = lowbit(j), idx = log2(lb);
                    assert(idx < n);
                    g = lcm(g, cs[idx]);
                    j -= lb, bit += 1;
                }
                cnt += (bit % 2 ? 1ll : -1ll) * v / g;
            }
            return cnt;
        };
        
        while(lb + 1 < ub) {
            ll mid = (lb + ub) / 2;
            if (check(mid) < k) {
                lb = mid;
            } else {
                ub = mid;
            }
        }
        return ub;
    }
};"
yDpFpyMU,Bombardment,Alexr360,Lua,Saturday 13th of April 2024 10:45:52 PM CDT,"-- Define the function to generate random coordinates within a specified range
local function getRandomCoordinates(range)
    return math.random(-range, range)
end

-- Define the range around (0, 0, 0)
local range = 50 -- Adjust this value as needed

-- Define the function to execute the command with randomized coordinates
local function executeNuclearBombCommand()
    -- Generate random coordinates
    local targetX = getRandomCoordinates(range)
    local targetY = getRandomCoordinates(range)
    local targetZ = getRandomCoordinates(range)
    
    -- Execute the command with the randomized coordinates
    commands.exec(""summon tfmg:napalm_bomb_entity "" .. targetX .. "" "" .. targetY .. "" "" .. targetZ .. "" {Fuse:500}"")
	print(""bombing"");
end

-- Define the function to handle timer events
local function timerEventHandler(timerId)
    if timerId == timerId then
        -- Execute the command
        executeNuclearBombCommand()
        
        -- Reschedule the timer for the next minute
        os.startTimer(60)
    end
end

-- Start the timer for the first execution
os.startTimer(1)

-- Listen for timer events
while true do
    local event, timerId = os.pullEvent(""timer"")
    timerEventHandler(timerId)
end
"
vaAe8XuN,Untitled,Mysoft,FreeBasic,Saturday 13th of April 2024 10:43:17 PM CDT,"#include ""windows.bi"" 'FreeConsole()/AllocConsole()
#include ""crt.bi""     'setvbuf()
#include ""file.bi""    'FileAttr()

FreeConsole() 'must not have a console while creating the others

for N as long = 1 to 4
  open pipe ""more"" for output as #N
  'disable cache (otherwise it would only print too late)
  setvbuf(  cast(FILE ptr,FileAttr( N , 2 )) , NULL , _IONBF , 0 ) 
  sleep 500,1
next N

AllocConsole() 'now you can open it again

'now you can print on each console
for N as long = 1 to 4
  print #N,""This is the console #""  & N
next N

print ""Done""
sleep"
HZ5QsPng,CS2351,ccbeginner,C++,Saturday 13th of April 2024 10:29:17 PM CDT,"#include<bits/stdc++.h>
using namespace std;
typedef struct node
{
	int val;
	int damage;
	int health;
	int level;
	struct node *prev;
	struct node *next;
}Node;

// Êï¥ÂÄã linked list ÔºåÁõÆÂâçÁöÑÊüê‰∏ÄÂÄãÈªû
Node *current;
int list_size = 0;

void evolve(Node *newnode);
void delete_node(Node *node);



void attack(Node *newnode)
{
    if (newnode->prev != newnode->next)
        newnode->prev->health-=newnode->damage;
    newnode->next->health-=newnode->damage;
}

void insert_instance(int idx, int damage,int health,string stance){
    Node *newnode = new Node;
    newnode -> val = idx;
    newnode -> damage = damage;
    newnode -> health = health;
    newnode -> level = 1;
    if(current==NULL)//Âè™ÊúâNewnode‰∏ÄÂÄãÈªû
    {
        current = newnode;
        newnode->next=current;
        current->prev=newnode;
    }
    else if(current->prev!=NULL || current->next!=NULL)//?DLLÁöÑÊèíÂÖ•
    {
        newnode->next=current;
        current->prev->next=newnode;
        newnode->prev=current->prev;
        current->prev=newnode;
    }
    list_size++;
    
    if(stance==""Attack"")
    {
        attack(newnode);
        if(newnode->prev->health<=0)
        {
            delete_node(newnode->prev);
        }
        if(newnode->next->health<=0)
        {
            delete_node(newnode->next);
        }
    }
    if(stance == ""Evolve""){
        evolve(newnode);
    }
}


void evolve(Node *newnode){
    if(list_size >= 3 && newnode->val==newnode->prev->val && newnode->val==newnode->next->val
    && newnode->prev->level < 3 && newnode->next->level < 3)
    {
        //ÊâæÊúÄÂ§ßÂÄº
        int max_damage=newnode->damage;
        int max_health=newnode->health;
        int max_level=newnode->level;
        max_damage = max(max_damage, newnode->prev->damage);
        max_damage = max(max_damage, newnode->next->damage);
        max_health = max(max_health, newnode->prev->health);
        max_health = max(max_health, newnode->next->health);
        max_level = max(max_level, newnode->prev->level);
        max_level = max(max_level, newnode->next->level);
        max_level += 1;

        // delete 2 node
        delete_node(current->prev);
        delete_node(current->prev);

        // Á¢∫‰øùcurrentÊåáÂà∞Ââ©‰∏ãÁöÑÈÇ£ÂÄãÈªû
        // Ë≥¶ÂÄº
        current->damage = max_damage;
        current->health = max_health;
        current->level = max_level;
    }
}

// delete current node
void delete_node(Node *node) // node ready to be delete
{
    if(current==NULL)
    {
        return;
    }
    else if(list_size == 1){
        current=NULL;
        list_size = 0;
    }
    else if(node == current)
    {
        Node *temp=current;
        current->prev->next=current->next;
        current->next->prev=current->prev;
        current=current->next;
        free(temp);
        list_size--;
    }else{
        node->prev->next=node->next;
        node->next->prev=node->prev;
        free(node);
        list_size--;
    }
}

vector<int> v;
vector<int> dup_nums;
void check(int num) //?
{
    // Êè™Âá∫ÈáçË§áÁöÑÊï∏Â≠ó
    Node *temp=current;
    v.clear();
    dup_nums.clear();
    for(int i=0;i<num;i++)
    {
        int val=temp->val;
        v.push_back(val);
        temp = temp->next;
    }

    // ÊâæÂá∫ÈáçË§áÊï∏Â≠ó
    sort(v.begin(), v.end());
    for(int i=1;i<v.size();i++){
        if(v[i] == v[i-1]){
            if(dup_nums.empty() || dup_nums.back() != v[i]){
                dup_nums.push_back(v[i]);
            }
        }
    }

    // Âà™Èô§ÈáçË§áÊï∏Â≠ó
    temp=current;
    for(int i=0;i<num;i++)
    {
        //Âà§Êñ∑temp->valÊòØÂê¶Âá∫ÁèæÂú®dup_numsË£°Èù¢
        auto low_bound = lower_bound(dup_nums.begin(), dup_nums.end(), temp->val);
        if(low_bound == dup_nums.end() || *low_bound != temp->val){
            // ‰∏çÈáçË§á
        }else{
            //ÈáçË§áÔºåÂà™Èô§current
            if (temp == current){
                delete_node(temp);
                temp = current;
            }else{
                delete_node(temp);
            }
        }
        temp = temp->next;
    }
}

void Shuffle(char dir, int num)
{
    Node *temp=current;
    if(dir=='c')//È†ÜÊôÇÈáùÊñπÂêë
    {
        for(int i=0;i<num;i++)
        {
            temp=temp->next;
        }
        //‰∫§ÊèõÂÄºÂ∞±Â•Ω
        swap(current->val,temp->val);//swapÊòØÂê¶ÊúÉÂ∞áÊåáÊ®ô‰∫§Êèõ?
        swap(current->health,temp->health);//swapÊòØÂê¶ÊúÉÂ∞áÊåáÊ®ô‰∫§Êèõ?
        swap(current->damage,temp->damage);//swapÊòØÂê¶ÊúÉÂ∞áÊåáÊ®ô‰∫§Êèõ?
        swap(current->level,temp->level);//swapÊòØÂê¶ÊúÉÂ∞áÊåáÊ®ô‰∫§Êèõ?
        current = temp;
    }
    if(dir=='a')
    {
        for(int i=0;i<num;i++)
        {
            temp=temp->prev;
        }
        //‰∫§ÊèõÁØÄÈªû(Âè™Âãïnext, prev)
        Node *current_next = current->next;
        Node *current_prev = current->prev;
        Node *temp_next = temp->next;
        Node *temp_prev = temp->prev;
        //Êõ¥Êñ∞current,tempÁöÑÊåáÈáù
        swap(current->next,temp->next);
        swap(current->prev,temp->prev);
        // Êõ¥Êñ∞current,tempÂâçÂæåÁØÄÈªûÁöÑÊåáÈáù
        current_next->prev = temp;
        current_prev->next = temp;
        temp_next->prev = current;
        temp_prev->next = current;
    }
}

void reverse_segment(Node *start, int seg_size){
    if (seg_size == 1) return;
    Node *prev = start->prev;
    Node *next = start->next;
    Node *last = start;
    for(int i = 0; i < seg_size-1; i++){
        Node *temp = next->next;
        last->prev = next;
        next->next = last;
        last = last->next;
        next = temp;
    }
    prev->next = last;
    last->prev = prev;
    start->next = next;
    next->prev = start;
    if (current == start){
        current = last;
    }
}

void reverse_ll(int num)
{
    if (num >= list_size){
        //reverse all
    }else{
        Node *tmp = current;
        for(int i = 0; i < list_size / num; i++){
            reverse_segment(tmp, num);
            for(int j = 0; j < num; j++){
                tmp = tmp->next;
            }
        }
        if (list_size % num > 0){
            reverse_segment(tmp, list_size % num);
        }
    }
}

void print_list(){
    cout << ""list: \n"";
    for (int i = 0; i < list_size; i++){
        cout<<""ID: ""<<current->val<<""HP: ""<<current->health<<""LVL: ""<<current->level<<""\n"";
        current = current -> next;
    }
}

int main()
{
    int n,x,y,z;
    string cmd, option;
    char dir;
    cin >> n;
    while(n--){
        cin >> cmd;
        if(cmd == ""Insert""){
            cin >> x >> y >> z >> option;
            insert_instance(x, y, z, option);
        }else if(cmd == ""Delete""){
            delete_node(current);
        }else if(cmd == ""Shuffle""){
            cin >> dir >> x;
            Shuffle(dir, x);
        }else if(cmd == ""Check""){
            cin >> x;
            check(x);
        }else if(cmd == ""Reverse""){
            cin >> x;
            reverse_ll(x);
        }
        print_list();
    }
    cout << ""ans\n"";
    for (int i = 0; i < list_size; i++){
        cout<<""ID: ""<<current->val<<""HP: ""<<current->health<<""LVL: ""<<current->level<<""\n"";
        current = current -> next;
    }
    return 0;
}"
Tt5jHzzE,Untitled,retroman,FreeBasic,Saturday 13th of April 2024 09:54:39 PM CDT,"' Open 10 command prompt windows
For i As Integer = 1 To 10
    Shell(""cmd"", 1)
    Sleep(100) ' Delay to ensure each window opens separately
Next

' Function to send text to a specific command prompt window
Sub PrintToWindow(text As String, windowIndex As Integer)
    ' Activate the desired command prompt window
    Shell(""cmd"", 1)
    Sleep(100) ' Delay to ensure the window is activated
    SendKeys(text & ""{ENTER}"", True) ' Send text followed by Enter key
End Sub

' Example usage
PrintToWindow(""hello"", 3)
PrintToWindow(""world!"", 4)
"
wKYVVY2m,pastebin.ai - #1 pastebin alternative,xxsa,PHP,Saturday 13th of April 2024 09:34:08 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
........
.....
.‚Ä¶"
akjvZcrN,pastebin.ai - #1 pastebin.com alternative,xxsa,PHP,Saturday 13th of April 2024 09:33:46 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
........
....
.‚Ä¶"
HzxS1qVM,News April13 24,Newscaster_Ned,Email,Saturday 13th of April 2024 08:32:37 PM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

H‚Äée‚Äér‚Äée‚Äé'‚Äés‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé ‚Äé""‚Äén‚Äée‚Äéw‚Äés‚Äé""‚Äé.‚Äé

D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé:‚Äé ‚ÄéE‚Äév‚Äée‚Äér‚Äéy‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äé'‚ÄéT‚Äéo‚Äéu‚Äéc‚Äéh‚Äée‚Äés‚Äé ‚ÄéT‚Äéu‚Äér‚Äén‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äéh‚Äé*‚Äét‚Äé'‚Äé
J‚Äéo‚Äée‚Äé ‚ÄéP‚Äée‚Äén‚Äél‚Äéa‚Äén‚Äéd‚Äé ‚ÄéS‚Äér‚Äé.‚Äé:‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéG‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äé'‚ÄéB‚Äéo‚Äér‚Äér‚Äéo‚Äéw‚Äés‚Äé ‚ÄéM‚Äéo‚Äén‚Äée‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéN‚Äée‚Äév‚Äée‚Äér‚Äé ‚ÄéP‚Äéa‚Äéy‚Äés‚Äé ‚ÄéI‚Äét‚Äé ‚ÄéB‚Äéa‚Äéc‚Äék‚Äé'‚Äé
I‚Äér‚Äéa‚Äén‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéR‚Äée‚Äét‚Äéa‚Äél‚Äéi‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äé‚Äò‚ÄéC‚Äéa‚Äén‚Äé ‚ÄéB‚Äée‚Äé ‚ÄéD‚Äée‚Äée‚Äém‚Äée‚Äéd‚Äé ‚ÄéC‚Äéo‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äée‚Äéd‚Äé,‚Äé‚Äô‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚Äé‚Äò‚ÄéM‚ÄéU‚ÄéS‚ÄéT‚Äé ‚ÄéS‚ÄéT‚ÄéA‚ÄéY‚Äé ‚ÄéA‚ÄéW‚ÄéA‚ÄéY‚Äé‚Äô‚Äé
'‚ÄéC‚Äér‚Äéo‚Äés‚Äés‚Äée‚Äéd‚Äé ‚Äéa‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéL‚Äée‚Äév‚Äée‚Äél‚Äé'‚Äé ‚Äé-‚Äé-‚Äé ‚ÄéW‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äée‚Äér‚Äés‚Äé ‚ÄéC‚Äéo‚Äén‚Äéd‚Äée‚Äém‚Äén‚Äé ‚ÄéI‚Äér‚Äéa‚Äén‚Äé'‚Äés‚Äé ‚ÄéS‚Äét‚Äér‚Äéi‚Äék‚Äée‚Äés‚Äé
M‚Äéa‚Äér‚Äék‚Äé ‚ÄéL‚Äée‚Äév‚Äéi‚Äén‚Äé ‚ÄéR‚Äéi‚Äép‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äé'‚ÄéF‚Äéa‚Äéi‚Äél‚Äée‚Äéd‚Äé ‚ÄéA‚Äép‚Äép‚Äée‚Äéa‚Äés‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äéy‚Äé'‚Äé
M‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé,‚Äé ‚ÄéM‚Äéa‚Äét‚Äét‚Äé ‚ÄéG‚Äéa‚Äée‚Äét‚Äéz‚Äé,‚Äé ‚ÄéA‚Äém‚Äéo‚Äén‚Äég‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéI‚Äés‚Äés‚Äéu‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äéu‚Äép‚Äép‚Äéo‚Äér‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé
W‚Äéa‚Äét‚Äéc‚Äéh‚Äé ‚ÄéL‚Äéi‚Äév‚Äée‚Äé:‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéH‚Äéo‚Äél‚Äéd‚Äés‚Äé ‚ÄéR‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚ÄéS‚Äéc‚Äéh‚Äén‚Äée‚Äéc‚Äék‚Äés‚Äév‚Äéi‚Äél‚Äél‚Äée‚Äé,‚Äé ‚ÄéP‚Äée‚Äén‚Äén‚Äés‚Äéy‚Äél‚Äév‚Äéa‚Äén‚Äéi‚Äéa‚Äé
M‚Äéi‚Äéc‚Äéh‚Äéa‚Äée‚Äél‚Äé ‚ÄéD‚Äéo‚Äéu‚Äég‚Äél‚Äéa‚Äés‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéN‚Äéo‚Äét‚Äé ‚ÄéT‚Äéo‚Äéo‚Äé ‚ÄéO‚Äél‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äée‚Äér‚Äév‚Äée‚Äé
A‚Äéu‚Äéd‚Äéi‚Äée‚Äén‚Äéc‚Äée‚Äé ‚ÄéL‚Äéa‚Äéu‚Äég‚Äéh‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äé ‚ÄéA‚Äéc‚Äét‚Äéi‚Äév‚Äéi‚Äés‚Äét‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚Äé3‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äé ‚ÄéO‚Äél‚Äéd‚Äés‚Äé ‚Äé'‚ÄéK‚Äén‚Äéo‚Äéw‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéA‚Äér‚Äée‚Äé'‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé:‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚Äé'‚ÄéW‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéN‚Äée‚Äév‚Äée‚Äér‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚ÄéH‚Äéa‚Äép‚Äép‚Äée‚Äén‚Äée‚Äéd‚Äé'‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéM‚Äéy‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äéc‚Äéy‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
H‚Äéo‚Äém‚Äée‚ÄéP‚Äéa‚Äég‚Äée‚Äé
I‚Äér‚Äéa‚Äén‚Äé ‚ÄéL‚Äéa‚Äéu‚Äén‚Äéc‚Äéh‚Äée‚Äés‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéL‚Äéo‚Äén‚Äég‚Äé-‚ÄéR‚Äéa‚Äén‚Äég‚Äée‚Äé ‚ÄéD‚Äér‚Äéo‚Äén‚Äée‚Äés‚Äé

C‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚ÄéF‚Äéu‚Äél‚Äél‚Äé ‚ÄéA‚Äél‚Äée‚Äér‚Äét‚Äé‚Ä¶‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚ÄéI‚Äér‚Äéa‚Äén‚Äé?‚Äé

N‚Äée‚Äét‚Äéa‚Äén‚Äéy‚Äéa‚Äéh‚Äéu‚Äé:‚Äé ‚Äé‚Äô‚ÄéW‚Äéh‚Äéo‚Äée‚Äév‚Äée‚Äér‚Äé ‚ÄéH‚Äéa‚Äér‚Äém‚Äés‚Äé ‚ÄéU‚Äés‚Äé,‚Äé ‚ÄéW‚Äée‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéH‚Äéa‚Äér‚Äém‚Äé ‚ÄéT‚Äéh‚Äée‚Äém‚Äé‚Äô‚Äé

I‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéC‚Äéa‚Äén‚Äéc‚Äée‚Äél‚Äés‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéo‚Äéo‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéT‚Äéw‚Äéo‚Äé ‚ÄéD‚Äéa‚Äéy‚Äés‚Äé
I‚Äén‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéh‚Äéo‚Äét‚Äéo‚Äé ‚Äér‚Äée‚Äél‚Äée‚Äéa‚Äés‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéI‚Äér‚Äéa‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚ÄéA‚Äér‚Äém‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚ÄéA‚Äéu‚Äég‚Äé.‚Äé ‚Äé2‚Äé4‚Äé,‚Äé ‚Äé2‚Äé0‚Äé2‚Äé2‚Äé,‚Äé ‚Äéd‚Äér‚Äéo‚Äén‚Äée‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äép‚Äér‚Äée‚Äép‚Äéa‚Äér‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äél‚Äéa‚Äéu‚Äén‚Äéc‚Äéh‚Äé ‚Äéd‚Äéu‚Äé
I‚Äér‚Äéa‚Äén‚Äé ‚Äél‚Äéa‚Äéu‚Äén‚Äéc‚Äéh‚Äée‚Äéd‚Äé ‚Äéd‚Äér‚Äéo‚Äén‚Äée‚Äés‚Äé ‚Äéa‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äéo‚Äén‚Äé ‚ÄéS‚Äéa‚Äét‚Äéu‚Äér‚Äéd‚Äéa‚Äéy‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äée‚Äén‚Äé ‚Äér‚Äéo‚Äéu‚Äét‚Äée‚Äé,‚Äé ‚Äét‚Äéh‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äém‚Äéa‚Äéy‚Äé ‚Äét‚Äéa‚Äék‚Äée‚Äé ‚Äéh‚Äéo‚Äéu‚Äér‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéa‚Äér‚Äér‚Äéi‚Äév‚Äée‚Äé,‚Äé ‚Äéa‚Äéc‚Äéc‚Äéo‚Äér‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äéi‚Äé ‚Äém‚Äée‚Äéd‚Äéi‚Äéa‚Äé ‚Äés‚Äéo‚Äéu‚Äér‚Äéc‚Äée‚Äés‚Äé.‚Äé

A‚ÄéP‚Äé ‚ÄéW‚Äéi‚Äér‚Äée‚Äé:‚Äé ‚Äé‚Äò‚ÄéA‚Äé ‚ÄéH‚Äée‚Äéa‚Äél‚Äét‚Äéh‚Äéy‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéE‚Äéc‚Äéo‚Äén‚Äéo‚Äém‚Äéy‚Äé‚Äô‚Äés‚Äé ‚ÄéS‚Äée‚Äéc‚Äér‚Äée‚Äét‚Äé ‚ÄéI‚Äén‚Äég‚Äér‚Äée‚Äéd‚Äéi‚Äée‚Äén‚Äét‚Äé?‚Äé ‚ÄéI‚Äém‚Äém‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äé ‚ÄéW‚Äéo‚Äér‚Äék‚Äée‚Äér‚Äés‚Äé,‚Äé ‚ÄéE‚Äéa‚Äég‚Äée‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéF‚Äéi‚Äél‚Äél‚Äé ‚ÄéJ‚Äéo‚Äéb‚Äés‚Äé
A‚ÄéP‚Äé ‚ÄéW‚Äéi‚Äér‚Äée‚Äé:‚Äé ‚Äé‚Äò‚ÄéA‚Äé ‚ÄéH‚Äée‚Äéa‚Äél‚Äét‚Äéh‚Äéy‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéE‚Äéc‚Äéo‚Äén‚Äéo‚Äém‚Äéy‚Äé‚Äô‚Äés‚Äé ‚ÄéS‚Äée‚Äéc‚Äér‚Äée‚Äét‚Äé ‚ÄéI‚Äén‚Äég‚Äér‚Äée‚Äéd‚Äéi‚Äée‚Äén‚Äét‚Äé?‚Äé ‚ÄéI‚Äém‚Äém‚Äéi‚Äég‚Äér‚Äéa‚Äén‚Äét‚Äé ‚ÄéW‚Äéo‚Äér‚Äék‚Äée‚Äér‚Äés‚Äé,‚Äé ‚ÄéE‚Äéa‚Äég‚Äée‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéF‚Äéi‚Äél‚Äél‚Äé ‚ÄéJ‚Äéo‚Äéb‚Äés‚Äé‚Äô‚Äé
4‚Äé,‚Äé5‚Äé5‚Äé2‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé:‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚Äé‚Äò‚ÄéW‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéN‚Äée‚Äév‚Äée‚Äér‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚ÄéH‚Äéa‚Äép‚Äép‚Äée‚Äén‚Äée‚Äéd‚Äé‚Äô‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéM‚Äéy‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äéc‚Äéy‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé:‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚Äé'‚ÄéW‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéN‚Äée‚Äév‚Äée‚Äér‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚ÄéH‚Äéa‚Äép‚Äép‚Äée‚Äén‚Äée‚Äéd‚Äé'‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéM‚Äéy‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äéc‚Äéy‚Äé
1‚Äé9‚Äé9‚Äé
P‚Äéi‚Äén‚Äék‚Äée‚Äér‚Äét‚Äéo‚Äén‚Äé:‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéT‚Äér‚Äéi‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéY‚Äéa‚Äén‚Äék‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äéb‚Äéo‚Äér‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéI‚Äés‚Äés‚Äéu‚Äée‚Äé ‚ÄéO‚Äéu‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé‚Äô‚Äé ‚ÄéP‚Äél‚Äéa‚Äéy‚Äéb‚Äéo‚Äéo‚Äék‚Äé ‚Äé
P‚Äéi‚Äén‚Äék‚Äée‚Äér‚Äét‚Äéo‚Äén‚Äé:‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéT‚Äér‚Äéi‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéY‚Äéa‚Äén‚Äék‚Äé ‚ÄéA‚Äéb‚Äéo‚Äér‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéI‚Äés‚Äés‚Äéu‚Äée‚Äé ‚ÄéO‚Äéu‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéD‚Äée‚Äém‚Äés‚Äé‚Äô‚Äé ‚ÄéP‚Äél‚Äéa‚Äéy‚Äéb‚Äéo‚Äéo‚Äék‚Äé
2‚Äé0‚Äé0‚Äé
S‚Äéi‚Äéx‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äée‚Äéd‚Äé,‚Äé ‚ÄéM‚Äéu‚Äél‚Äét‚Äéi‚Äép‚Äél‚Äée‚Äé ‚ÄéI‚Äén‚Äéj‚Äéu‚Äér‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéS‚Äéy‚Äéd‚Äén‚Äée‚Äéy‚Äé ‚ÄéS‚Äéh‚Äéo‚Äép‚Äép‚Äéi‚Äén‚Äég‚Äé ‚ÄéM‚Äéa‚Äél‚Äél‚Äé ‚ÄéS‚Äét‚Äéa‚Äéb‚Äéb‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé,‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äéc‚Äét‚Äé ‚ÄéS‚Äéh‚Äéo‚Äét‚Äé ‚ÄéD‚Äée‚Äéa‚Äéd‚Äé
S‚Äéi‚Äéx‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äée‚Äéd‚Äé,‚Äé ‚ÄéM‚Äéu‚Äél‚Äét‚Äéi‚Äép‚Äél‚Äée‚Äé ‚ÄéI‚Äén‚Äéj‚Äéu‚Äér‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéS‚Äéy‚Äéd‚Äén‚Äée‚Äéy‚Äé ‚ÄéS‚Äéh‚Äéo‚Äép‚Äép‚Äéi‚Äén‚Äég‚Äé ‚ÄéM‚Äéa‚Äél‚Äél‚Äé ‚ÄéS‚Äét‚Äéa‚Äéb‚Äéb‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé
4‚Äé,‚Äé2‚Äé8‚Äé2‚Äé
M‚Äéi‚Äéc‚Äéh‚Äéa‚Äée‚Äél‚Äé ‚ÄéD‚Äéo‚Äéu‚Äég‚Äél‚Äéa‚Äés‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéP‚Äél‚Äéa‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äé7‚Äé0‚Äé-‚ÄéY‚Äée‚Äéa‚Äér‚Äé-‚ÄéO‚Äél‚Äéd‚Äé ‚ÄéB‚Äée‚Äén‚Äéj‚Äéa‚Äém‚Äéi‚Äén‚Äé ‚ÄéF‚Äér‚Äéa‚Äén‚Äék‚Äél‚Äéi‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚ÄéT‚ÄéV‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äé ‚ÄéG‚Äéi‚Äév‚Äée‚Äés‚Äé ‚ÄéH‚Äéi‚Äém‚Äé ‚ÄéH‚Äéo‚Äép‚Äée‚Äé ‚ÄéA‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äé8‚Äé1‚Äé-‚ÄéY‚Äé
M‚Äéi‚Äéc‚Äéh‚Äéa‚Äée‚Äél‚Äé ‚ÄéD‚Äéo‚Äéu‚Äég‚Äél‚Äéa‚Äés‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéN‚Äéo‚Äét‚Äé ‚ÄéT‚Äéo‚Äéo‚Äé ‚ÄéO‚Äél‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äée‚Äér‚Äév‚Äée‚Äé
2‚Äé2‚Äé0‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé,‚Äé ‚ÄéS‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéA‚Äén‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äég‚Äér‚Äéi‚Äét‚Äéy‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äé:‚Äé ‚Äé‚Äò‚ÄéC‚Äéo‚Äém‚Äém‚Äéo‚Äén‚Äé ‚ÄéS‚Äée‚Äén‚Äés‚Äée‚Äé‚Äô‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé,‚Äé ‚ÄéS‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéA‚Äén‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äég‚Äér‚Äéi‚Äét‚Äéy‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äé
6‚Äé5‚Äé2‚Äé
E‚Äéi‚Äég‚Äéh‚Äét‚Äéy‚Äé-‚ÄéS‚Äéi‚Äéx‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéW‚Äéa‚Äér‚Äér‚Äéa‚Äén‚Äét‚Äél‚Äée‚Äés‚Äés‚Äé ‚ÄéS‚Äéu‚Äér‚Äév‚Äée‚Äéi‚Äél‚Äél‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé
E‚Äéi‚Äég‚Äéh‚Äét‚Äéy‚Äé-‚ÄéS‚Äéi‚Äéx‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéW‚Äéa‚Äér‚Äér‚Äéa‚Äén‚Äét‚Äél‚Äée‚Äés‚Äés‚Äé ‚ÄéS‚Äéu‚Äér‚Äév‚Äée‚Äéi‚Äél‚Äél‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé
1‚Äé0‚Äé,‚Äé1‚Äé2‚Äé5‚Äé
T‚Äéo‚Äép‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéA‚Äér‚Äém‚Äée‚Äéd‚Äé ‚ÄéS‚Äée‚Äér‚Äév‚Äéi‚Äéc‚Äée‚Äés‚Äé ‚ÄéD‚Äée‚Äém‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéA‚Äéd‚Äév‚Äéi‚Äés‚Äée‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äé‚Äò‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéL‚Äéo‚Äéo‚Äék‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äé-‚ÄéE‚Äés‚Äéc‚Äéa‚Äél‚Äéa‚Äét‚Äée‚Äé&‚Äé#‚Äé8‚Äé2‚Äé1‚Äé7‚Äé
D‚Äée‚Äém‚Äé ‚ÄéR‚Äée‚Äép‚Äé.‚Äé ‚ÄéS‚Äém‚Äéi‚Äét‚Äéh‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéA‚Äéd‚Äév‚Äéi‚Äés‚Äée‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äé'‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéL‚Äéo‚Äéo‚Äék‚Äé ‚Äét‚Äéo‚Äé ‚ÄéD‚Äée‚Äé-‚ÄéE‚Äés‚Äéc‚Äéa‚Äél‚Äéa‚Äét‚Äée‚Äé'‚Äé
2‚Äé6‚Äé0‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéI‚Äér‚Äéa‚Äén‚Äé ‚ÄéL‚Äéa‚Äéu‚Äén‚Äéc‚Äéh‚Äée‚Äés‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéL‚Äéo‚Äén‚Äég‚Äé-‚Äér‚Äéa‚Äén‚Äég‚Äée‚Äé ‚ÄéD‚Äér‚Äéo‚Äén‚Äée‚Äés‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéI‚Äér‚Äéa‚Äén‚Äé ‚ÄéL‚Äéa‚Äéu‚Äén‚Äéc‚Äéh‚Äée‚Äés‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéL‚Äéo‚Äén‚Äég‚Äé-‚Äér‚Äéa‚Äén‚Äég‚Äé ‚ÄéD‚Äér‚Äéo‚Äén‚Äée‚Äés‚Äé
8‚Äé,‚Äé9‚Äé7‚Äé8‚Äé
C‚Äéh‚Äéa‚Äés‚Äét‚Äée‚Äén‚Äé ‚ÄéB‚Äéu‚Äét‚Äét‚Äéi‚Äég‚Äéi‚Äée‚Äég‚Äé:‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚ÄéA‚Äér‚Äée‚Äé ‚ÄéT‚Äée‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äéu‚Äéi‚Äéc‚Äéi‚Äéd‚Äéa‚Äél‚Äé ‚ÄéL‚ÄéG‚ÄéB‚ÄéT‚ÄéQ‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äé‚Äò‚ÄéP‚Äéu‚Äél‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéT‚Äér‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé‚Äô‚Äé
C‚Äéh‚Äéa‚Äés‚Äét‚Äée‚Äén‚Äé ‚ÄéB‚Äéu‚Äét‚Äét‚Äéi‚Äég‚Äéi‚Äée‚Äég‚Äé:‚Äé ‚ÄéG‚ÄéO‚ÄéP‚Äé ‚ÄéT‚Äée‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äéu‚Äéi‚Äéc‚Äéi‚Äéd‚Äéa‚Äél‚Äé ‚ÄéL‚ÄéG‚ÄéB‚ÄéT‚ÄéQ‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äé'‚ÄéP‚Äéu‚Äél‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéT‚Äér‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé'‚Äé

M‚Äéo‚Äén‚Äék‚Äéb‚Äéi‚Äét‚Äéc‚Äéh‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéM‚Äéo‚Äén‚Äét‚Äég‚Äéo‚Äém‚Äée‚Äér‚Äéy‚Äé ‚ÄéC‚Äéo‚Äéu‚Äén‚Äét‚Äéy‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéC‚Äéa‚Äér‚Äéj‚Äéa‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé.‚Äé

S‚Äéh‚Äée‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéw‚Äéa‚Äén‚Äét‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äé ‚ÄéE‚Äés‚Äéc‚Äéa‚Äél‚Äéa‚Äéd‚Äée‚Äé.‚Äé


S‚Äéi‚Äél‚Äév‚Äée‚Äér‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚ÄéP‚Äél‚Äéo‚Äéw‚Äés‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéR‚Äéa‚Äén‚Äég‚Äée‚Äé ‚ÄéR‚Äéo‚Äév‚Äée‚Äér‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéC‚Äér‚Äéo‚Äéw‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚ÄéO‚Äéu‚Äét‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚ÄéB‚Äéa‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéJ‚Äée‚Äér‚Äés‚Äée‚Äéy‚Äé.‚Äé


N‚Äéi‚Äég‚Äég‚Äéa‚Äér‚Äéd‚Äé ‚ÄéR‚Äéa‚Äém‚Äés‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéC‚Äéa‚Äér‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéG‚Äéi‚Äér‚Äél‚Äéf‚Äér‚Äéi‚Äée‚Äén‚Äéd‚Äé'‚Äés‚Äé ‚ÄéS‚ÄéU‚ÄéV‚Äé,‚Äé ‚ÄéS‚Äée‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéF‚Äél‚Äéy‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äén‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚ÄéW‚Äéo‚Äém‚Äéa‚Äén‚Äé.‚Äé


C‚Äéo‚Äéo‚Äén‚Äé ‚ÄéR‚Äéa‚Äép‚Äée‚Äés‚Äé ‚ÄéW‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéS‚Äéo‚Äéu‚Äét‚Äéh‚Äé ‚ÄéB‚Äéo‚Äés‚Äét‚Äéo‚Äén‚Äé;‚Äé ‚ÄéS‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéM‚Äée‚Äén‚Äét‚Äéa‚Äél‚Äé ‚ÄéW‚Äéa‚Äér‚Äéd‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé2‚Äé¬∞‚Äé
/‚Äé6‚Äé3‚Äé¬∞‚Äé
2‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé3‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
8‚Äé2‚Äé¬∞‚Äé
2‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé
1‚Äé7‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
C‚Äéo‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äér‚Äéa‚Äéb‚Äél‚Äée‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äém‚Äéo‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé.‚Äé ‚ÄéS‚Äéo‚Äém‚Äée‚Äé ‚Äéd‚Äée‚Äéc‚Äér‚Äée‚Äéa‚Äés‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé ‚Äél‚Äéa‚Äét‚Äée‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéd‚Äéa‚Äéy‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äé8‚Äé2‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéS‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
6‚Äé1‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
9‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé0‚Äé4‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
7‚Äé:‚Äé5‚Äé6‚Äé ‚Äép‚Äém‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé3‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
6‚Äé3‚Äé¬∞‚Äé
1‚Äé3‚Äé%‚Äé
S‚Äé
1‚Äé5‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé6‚Äé3‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé4‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
1‚Äé0‚Äé:‚Äé4‚Äé3‚Äé ‚Äéa‚Äém‚Äé
W‚Äéa‚Äéx‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äér‚Äée‚Äés‚Äéc‚Äée‚Äén‚Äét‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
1‚Äé2‚Äé:‚Äé4‚Äé3‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äé ‚Äé1‚Äé4‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé6‚Äé7‚Äé¬∞‚Äé
1‚Äé3‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé1‚Äé5‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé1‚Äé6‚Äé
A‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
5‚Äé7‚Äé%‚Äé
S‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé1‚Äé7‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé1‚Äé8‚Äé
P‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé6‚Äé3‚Äé¬∞‚Äé
3‚Äé6‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé1‚Äé9‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé1‚Äé¬∞‚Äé
/‚Äé6‚Äé2‚Äé¬∞‚Äé
1‚Äé6‚Äé%‚Äé
N‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé0‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
7‚Äé4‚Äé¬∞‚Äé
/‚Äé5‚Äé7‚Äé¬∞‚Äé
4‚Äé5‚Äé%‚Äé
N‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé1‚Äé
S‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé0‚Äé¬∞‚Äé
/‚Äé5‚Äé4‚Äé¬∞‚Äé
5‚Äé0‚Äé%‚Äé
N‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé2‚Äé
S‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé3‚Äé¬∞‚Äé
/‚Äé5‚Äé8‚Äé¬∞‚Äé
5‚Äé8‚Äé%‚Äé
E‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé2‚Äé3‚Äé
S‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé6‚Äé0‚Äé¬∞‚Äé
4‚Äé5‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé4‚Äé
A‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
8‚Äé0‚Äé¬∞‚Äé
/‚Äé6‚Äé2‚Äé¬∞‚Äé
3‚Äé5‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé2‚Äé5‚Äé
I‚Äés‚Äéo‚Äél‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé1‚Äé¬∞‚Äé
/‚Äé6‚Äé4‚Äé¬∞‚Äé
3‚Äé4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé6‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé6‚Äé6‚Äé¬∞‚Äé
4‚Äé3‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé7‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé6‚Äé¬∞‚Äé
/‚Äé6‚Äé7‚Äé¬∞‚Äé
4‚Äé5‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéN‚Äéo‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äég‚Äéo‚Äéo‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚ÄéT‚ÄéV‚Äé.‚Äé ‚Äéüì∫

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

J‚Äéo‚Äéb‚Äé
A‚Äés‚Äé ‚Äéw‚Äée‚Äél‚Äél‚Äé ‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéw‚Äéo‚Äér‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéb‚Äéo‚Äér‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äéa‚Äé ‚ÄéJ‚Äéo‚Äéb‚Äé ‚Äéi‚Äés‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéu‚Äén‚Äée‚Äém‚Äép‚Äél‚Äéo‚Äéy‚Äée‚Äéd‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äét‚Äéu‚Äéd‚Äée‚Äén‚Äét‚Äés‚Äé ‚Äéd‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé.‚Äé ‚ÄéJ‚Äéo‚Äéb‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé,‚Äé ‚Äéb‚Äéy‚Äé ‚Äéd‚Äée‚Äéf‚Äéi‚Äén‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äép‚Äéa‚Äéi‚Äéd‚Äé ‚Äél‚Äéa‚Äéb‚Äéo‚Äér‚Äé.‚Äé ‚ÄéA‚Äén‚Äéy‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äér‚Äéo‚Äéb‚Äéo‚Äét‚Äé ‚Äéc‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äéd‚Äéo‚Äé ‚Äéb‚Äée‚Äét‚Äét‚Äée‚Äér‚Äé,‚Äé ‚Äéa‚Äé ‚Äéh‚Äéu‚Äém‚Äéa‚Äén‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äél‚Äér‚Äée‚Äéa‚Äéd‚Äéy‚Äé ‚Äéd‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äég‚Äée‚Äét‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äép‚Äéa‚Äéi‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äé-‚Äé-‚Äé ‚Äéu‚Äén‚Äél‚Äée‚Äés‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚ÄéM‚Äée‚Äéx‚Äéi‚Äéc‚Äéa‚Äén‚Äé,‚Äé ‚Äéa‚Äés‚Äé ‚Äép‚Äéa‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚ÄéM‚Äée‚Äéx‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚Äéi‚Äés‚Äé ‚Äép‚Äéu‚Äér‚Äée‚Äél‚Äéy‚Äé ‚Äéo‚Äép‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé.‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚Äéj‚Äéo‚Äéb‚Äé ‚Äém‚Äéa‚Äén‚Äéa‚Äég‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéf‚Äéa‚Äét‚Äé,‚Äé ‚Äéb‚Äéa‚Äél‚Äéd‚Äé,‚Äé ‚Äém‚Äéi‚Äés‚Äée‚Äér‚Äéa‚Äéb‚Äél‚Äée‚Äé,‚Äé ‚Äéw‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚Äéb‚Äéo‚Äéo‚Äém‚Äée‚Äér‚Äé ‚Äém‚Äée‚Äén‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äém‚Äéi‚Äél‚Äél‚Äée‚Äén‚Äén‚Äéi‚Äéa‚Äél‚Äés‚Äé ‚Äéd‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚Äéo‚Äér‚Äé ‚Äé""‚Äéc‚Äéa‚Äén‚Äé'‚Äét‚Äé""‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéh‚Äéi‚Äég‚Äéh‚Äée‚Äés‚Äét‚Äé ‚Äél‚Äée‚Äév‚Äée‚Äél‚Äé ‚Äét‚Äéo‚Äé ‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äéa‚Äé ‚Äéw‚Äéa‚Äég‚Äée‚Äéc‚Äéu‚Äéc‚Äék‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéa‚Äés‚Äép‚Äéi‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äéa‚Äén‚Äéy‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéS‚Äée‚Äéc‚Äér‚Äée‚Äét‚Äéa‚Äér‚Äéy‚Äé,‚Äé ‚ÄéH‚ÄéR‚Äé ‚Äéd‚Äér‚Äéo‚Äén‚Äée‚Äé,‚Äé ‚Äéo‚Äér‚Äé ‚Äéd‚Äéi‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äét‚Äéy‚Äé ‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äéa‚Äél‚Äéi‚Äés‚Äét‚Äé.‚Äé


(‚Äé(‚Äé ‚ÄéJ‚Äéo‚Äéi‚Äén‚Äé ‚ÄéT‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚ÄéC‚Äér‚Äéa‚Äéd‚Äél‚Äée‚Äé ‚ÄéT‚Äéo‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéG‚Äér‚Äéa‚Äév‚Äée‚Äé ‚ÄéM‚Äéi‚Äén‚Äéi‚Äém‚Äéu‚Äém‚Äé ‚ÄéW‚Äéa‚Äég‚Äée‚Äé ‚ÄéP‚Äér‚Äéo‚Äég‚Äér‚Äéa‚Äém‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

G‚Äéa‚Äél‚Äée‚Äén‚Äéa‚Äé,‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéc‚Äéa‚Äél‚Äél‚Äée‚Äéd‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äé ‚Äég‚Äél‚Äéa‚Äén‚Äéc‚Äée‚Äé,‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéa‚Äét‚Äéu‚Äér‚Äéa‚Äél‚Äé ‚Äém‚Äéi‚Äén‚Äée‚Äér‚Äéa‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äé ‚Äéo‚Äéf‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äé(‚ÄéI‚ÄéI‚Äé)‚Äé ‚Äés‚Äéu‚Äél‚Äéf‚Äéi‚Äéd‚Äée‚Äé ‚Äé(‚ÄéP‚Äéb‚ÄéS‚Äé)‚Äé.‚Äé ‚ÄéI‚Äén‚Äé ‚Äéa‚Äéd‚Äéd‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äé,‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äéd‚Äée‚Äép‚Äéo‚Äés‚Äéi‚Äét‚Äés‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äéa‚Äéi‚Äén‚Äé ‚Äéu‚Äép‚Äé ‚Äét‚Äéo‚Äé ‚Äé0‚Äé.‚Äé5‚Äé ‚Äép‚Äée‚Äér‚Äéc‚Äée‚Äén‚Äét‚Äé ‚Äés‚Äéi‚Äél‚Äév‚Äée‚Äér‚Äé,‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äéi‚Äél‚Äév‚Äée‚Äér‚Äé ‚Äés‚Äéu‚Äél‚Äéf‚Äéi‚Äéd‚Äée‚Äé ‚Äéo‚Äér‚Äé ‚Äéa‚Äés‚Äé ‚Äél‚Äéi‚Äém‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚Äés‚Äéi‚Äél‚Äév‚Äée‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚Äés‚Äéo‚Äél‚Äéi‚Äéd‚Äé ‚Äés‚Äéo‚Äél‚Äéu‚Äét‚Äéi‚Äéo‚Äén‚Äé;‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äée‚Äén‚Äét‚Äé,‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéb‚Äéy‚Äép‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äét‚Äé ‚Äéf‚Äéa‚Äér‚Äé ‚Äés‚Äéu‚Äér‚Äép‚Äéa‚Äés‚Äés‚Äée‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéa‚Äéi‚Äén‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äé ‚Äéo‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äér‚Äée‚Äév‚Äée‚Äén‚Äéu‚Äée‚Äé.‚Äé ‚ÄéG‚Äéa‚Äél‚Äée‚Äén‚Äéa‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äés‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äéa‚Äén‚Äét‚Äéi‚Äéq‚Äéu‚Äéi‚Äét‚Äéy‚Äé,‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äéo‚Äél‚Äéd‚Äée‚Äés‚Äét‚Äé ‚Äéu‚Äés‚Äée‚Äés‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚Äék‚Äéo‚Äéh‚Äél‚Äé,‚Äé ‚Äéa‚Äén‚Äé ‚Äée‚Äéy‚Äée‚Äé ‚Äéc‚Äéo‚Äés‚Äém‚Äée‚Äét‚Äéi‚Äéc‚Äé ‚Äén‚Äéo‚Äéw‚Äé ‚Äér‚Äée‚Äég‚Äéa‚Äér‚Äéd‚Äée‚Äéd‚Äé ‚Äéa‚Äés‚Äé ‚Äét‚Äéo‚Äéx‚Äéi‚Äéc‚Äé ‚Äéd‚Äéu‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéi‚Äés‚Äék‚Äé ‚Äéo‚Äéf‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äé ‚Äép‚Äéo‚Äéi‚Äés‚Äéo‚Äén‚Äéi‚Äén‚Äég‚Äé.‚Äé ‚ÄéI‚Äén‚Äé ‚Äém‚Äéo‚Äéd‚Äée‚Äér‚Äén‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äés‚Äé,‚Äé ‚Äég‚Äéa‚Äél‚Äée‚Äén‚Äéa‚Äé ‚Äéi‚Äés‚Äé ‚Äép‚Äér‚Äéi‚Äém‚Äéa‚Äér‚Äéi‚Äél‚Äéy‚Äé ‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äée‚Äéx‚Äét‚Äér‚Äéa‚Äéc‚Äét‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äét‚Äéi‚Äét‚Äéu‚Äée‚Äén‚Äét‚Äé ‚Äém‚Äéi‚Äén‚Äée‚Äér‚Äéa‚Äél‚Äés‚Äé.‚Äé ‚ÄéI‚Äén‚Äé ‚Äéa‚Äéd‚Äéd‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéi‚Äél‚Äév‚Äée‚Äér‚Äé,‚Äé ‚Äéi‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äéi‚Äém‚Äép‚Äéo‚Äér‚Äét‚Äéa‚Äén‚Äét‚Äé ‚Äég‚Äél‚Äéo‚Äéb‚Äéa‚Äél‚Äé ‚Äés‚Äéo‚Äéu‚Äér‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äé,‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéu‚Äés‚Äée‚Äés‚Äé ‚Äés‚Äéu‚Äéc‚Äéh‚Äé ‚Äéa‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äé-‚Äéa‚Äéc‚Äéi‚Äéd‚Äé ‚Äéb‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äéi‚Äée‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äés‚Äéa‚Äém‚Äép‚Äél‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äég‚Äéa‚Äél‚Äée‚Äén‚Äéa‚Äé,‚Äé ‚Äém‚Äée‚Äéa‚Äés‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äé3‚Äé.‚Äé5‚Äé ‚Äéc‚Äém‚Äé ‚Äé√ó‚Äé ‚Äé2‚Äé.‚Äé5‚Äé ‚Äéc‚Äém‚Äé ‚Äé√ó‚Äé ‚Äé2‚Äé.‚Äé0‚Äé ‚Äéc‚Äém‚Äé ‚Äé(‚Äé1‚Äé.‚Äé3‚Äé8‚Äé ‚Äéi‚Äén‚Äé ‚Äé√ó‚Äé ‚Äé0‚Äé.‚Äé9‚Äé8‚Äé ‚Äéi‚Äén‚Äé ‚Äé√ó‚Äé ‚Äé0‚Äé.‚Äé7‚Äé9‚Äé ‚Äéi‚Äén‚Äé)‚Äé,‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äéa‚Äéi‚Äén‚Äés‚Äé ‚Äéa‚Äé ‚Äés‚Äém‚Äéa‚Äél‚Äél‚Äé ‚Äéa‚Äém‚Äéo‚Äéu‚Äén‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äég‚Äéo‚Äél‚Äéd‚Äé-‚Äéc‚Äéo‚Äél‚Äéo‚Äér‚Äée‚Äéd‚Äé ‚Äép‚Äéy‚Äér‚Äéi‚Äét‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äée‚Äéx‚Äét‚Äér‚Äéa‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äéu‚Äéa‚Äén‚Äéz‚Äéa‚Äél‚Äéa‚Äé ‚ÄéM‚Äéi‚Äén‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéP‚Äée‚Äér‚Äéu‚Äév‚Äéi‚Äéa‚Äén‚Äé ‚Äér‚Äée‚Äég‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéA‚Äén‚Äéc‚Äéa‚Äés‚Äéh‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéf‚Äéo‚Äéc‚Äéu‚Äés‚Äé-‚Äés‚Äét‚Äéa‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äé1‚Äé5‚Äé6‚Äé ‚Äés‚Äée‚Äép‚Äéa‚Äér‚Äéa‚Äét‚Äée‚Äé ‚Äéi‚Äém‚Äéa‚Äég‚Äée‚Äés‚Äé.‚Äé

P‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéI‚Äév‚Äéa‚Äér‚Äé ‚ÄéL‚Äée‚Äéi‚Äéd‚Äéu‚Äés‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

B‚Äéy‚Äée‚Äé ‚Äéa‚Äé ‚Äég‚Äéu‚Äéy‚Äéz‚Äéa‚Äé.‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äéa‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äés‚Äéh‚Äéo‚Äév‚Äée‚Äé ‚Äéa‚Äé ‚Äés‚Äét‚Äée‚Äée‚Äék‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚Äéb‚Äér‚Äée‚Äéa‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äéy‚Äéo‚Äéu‚Äér‚Äé ‚Äém‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé'‚Äés‚Äé ‚Äéc‚Äéu‚Äén‚Äét‚Äé!‚Äé ‚ÄéT‚Äéh‚Äée‚Äén‚Äé ‚ÄéI‚Äé ‚Äéw‚Äée‚Äée‚Äél‚Äé ‚Äéa‚Äé ‚Äét‚Äéa‚Äék‚Äée‚Äé ‚Äéa‚Äé ‚Äém‚Äéy‚Äé ‚Äéc‚Äéh‚Äée‚Äée‚Äéz‚Äée‚Äé ‚Äéa‚Äé ‚Äég‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äér‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äé ‚Äés‚Äéh‚Äéo‚Äév‚Äée‚Äé ‚Äée‚Äée‚Äét‚Äé ‚Äéu‚Äép‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äéa‚Äés‚Äés‚Äé!‚Äé ‚ÄéT‚Äéh‚Äée‚Äén‚Äé ‚ÄéI‚Äé ‚Äéw‚Äée‚Äée‚Äél‚Äé ‚Äéa‚Äé ‚Äég‚Äéo‚Äé ‚Äéc‚Äéa‚Äél‚Äél‚Äé ‚Äéu‚Äép‚Äé ‚Äéa‚Äé ‚Äém‚Äéy‚Äé ‚Äéb‚Äér‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚ÄéL‚Äéu‚Äéi‚Äég‚Äéi‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äéw‚Äée‚Äé ‚Äéw‚Äée‚Äée‚Äél‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äét‚Äéo‚Äéw‚Äén‚Äé ‚Äét‚Äéa‚Äél‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äéw‚Äée‚Äée‚Äét‚Äéh‚Äé ‚Äéo‚Äéu‚Äér‚Äé ‚Äéa‚Äén‚Äéd‚Äés‚Äé!‚Äé ‚ÄéB‚Äéo‚Äéo‚Äép‚Äéi‚Äét‚Äéy‚Äé ‚Äéb‚Äéa‚Äép‚Äéa‚Äé!‚Äé ‚ÄéA‚Äé ‚Äéb‚Äée‚Äée‚Äép‚Äéi‚Äét‚Äéy‚Äé ‚Äéb‚Äéo‚Äéo‚Äép‚Äéi‚Äét‚Äéy‚Äé!‚Äé ‚ÄéB‚Äéo‚Äéo‚Äép‚Äéi‚Äét‚Äéy‚Äé ‚Äéb‚Äée‚Äée‚Äép‚Äéi‚Äét‚Äéy‚Äé ‚Äéb‚Äéa‚Äép‚Äéa‚Äét‚Äéi‚Äéy‚Äé ‚Äéb‚Äéo‚Äéo‚Äép‚Äéi‚Äét‚Äéy‚Äé ‚Äéb‚Äée‚Äée‚Äée‚Äép‚Äéi‚Äét‚Äéy‚Äé ‚Äéb‚Äéo‚Äéo‚Äéb‚Äéi‚Äét‚Äéy‚Äé ‚Äéa‚Äé ‚Äéb‚Äéo‚Äéo‚Äép‚Äéi‚Äét‚Äéy‚Äé ‚Äéb‚Äée‚Äée‚Äép‚Äéi‚Äét‚Äéy‚Äé ‚Äéb‚Äéo‚Äéo‚Äép‚Äéa‚Äé!‚Äé ‚ÄéI‚Äét‚Äé'‚Äés‚Äé ‚Äém‚Äée‚Äé!‚Äé ‚ÄéM‚Äéa‚Äér‚Äéi‚Äéo‚Äé!‚Äé ‚ÄéH‚Äée‚Äél‚Äél‚Äéo‚Äé!‚Äé ‚ÄéI‚Äé ‚Äéa‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äéh‚Äéa‚Äét‚Äée‚Äé ‚Äéa‚Äé ‚Äéb‚Äéo‚Äéw‚Äés‚Äée‚Äér‚Äé!‚Äé ‚ÄéI‚Äé ‚Äéw‚Äée‚Äée‚Äél‚Äé ‚Äéa‚Äé ‚Äés‚Äém‚Äéa‚Äés‚Äéh‚Äé ‚Äéh‚Äée‚Äée‚Äém‚Äé!‚Äé ‚ÄéI‚Äé ‚Äéh‚Äéa‚Äét‚Äée‚Äé ‚Äéa‚Äé ‚Äét‚Äéh‚Äéo‚Äés‚Äée‚Äé ‚Äén‚Äéi‚Äég‚Äég‚Äég‚Äée‚Äér‚Äés‚Äé!‚Äé ‚ÄéI‚Äé ‚Äés‚Äét‚Äéo‚Äém‚Äép‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé!‚Äé ‚ÄéI‚Äé ‚Äét‚Äéa‚Äék‚Äée‚Äé ‚Äéa‚Äé ‚Äés‚Äéh‚Äée‚Äée‚Äét‚Äé ‚Äéo‚Äén‚Äé ‚Äéa‚Äé ‚Äéd‚Äée‚Äé ‚Äén‚Äée‚Äée‚Äég‚Äée‚Äér‚Äés‚Äé ‚Äéf‚Äéa‚Äéc‚Äée‚Äé!‚Äé ‚ÄéI‚Äé ‚Äéh‚Äéa‚Äét‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé!‚Äé ‚ÄéI‚Äé ‚Äés‚Äéh‚Äée‚Äée‚Äét‚Äé ‚Äéo‚Äén‚Äé ‚Äéa‚Äé ‚Äéd‚Äée‚Äé ‚Äén‚Äée‚Äée‚Äég‚Äée‚Äér‚Äés‚Äé!‚Äé ‚ÄéI‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéa‚Äék‚Äée‚Äé ‚Äéa‚Äé ‚Äés‚Äéh‚Äée‚Äée‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äém‚Äéo‚Äéu‚Äét‚Äéh‚Äé!‚Äé ‚ÄéI‚Äé ‚Äép‚Äéo‚Äéo‚Äép‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äém‚Äéo‚Äéu‚Äét‚Äéh‚Äé!‚Äé ‚ÄéP‚Äéo‚Äéo‚Äép‚Äéi‚Äét‚Äéy‚Äé ‚Äép‚Äéa‚Äép‚Äéa‚Äé!‚Äé ‚ÄéI‚Äé ‚Äép‚Äéo‚Äéo‚Äép‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äés‚Äé ‚Äém‚Äéo‚Äéu‚Äét‚Äéh‚Äé!‚Äé ‚ÄéI‚Äé ‚Äéw‚Äée‚Äée‚Äél‚Äé ‚Äéa‚Äé ‚Äép‚Äéu‚Äét‚Äé ‚Äéa‚Äé ‚Äég‚Äéo‚Äéo‚Äém‚Äéb‚Äéa‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéo‚Äév‚Äée‚Äén‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äéh‚Äée‚Äé ‚Äée‚Äée‚Äés‚Äé ‚Äéa‚Äé ‚Äéf‚Äéi‚Äél‚Äét‚Äéh‚Äéy‚Äé ‚Äék‚Äéi‚Äék‚Äée‚Äé!‚Äé ‚ÄéI‚Äé ‚Äéh‚Äéa‚Äét‚Äée‚Äé ‚Äéa‚Äé ‚Äét‚Äéh‚Äéo‚Äés‚Äée‚Äé ‚Äéj‚Äée‚Äéw‚Äés‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äé ‚Äéa‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé ‚Äée‚Äée‚Äén‚Äét‚Äéa‚Äé ‚Äéa‚Äé ‚Äép‚Äéi‚Äéz‚Äéz‚Äéa‚Äé!‚Äé ‚ÄéM‚Äéa‚Äém‚Äéa‚Äé ‚Äém‚Äéi‚Äéa‚Äé!‚Äé ‚ÄéI‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéa‚Äé ‚Äét‚Äéh‚Äéa‚Äé ‚Äép‚Äéi‚Äéz‚Äéz‚Äéa‚Äé!‚Äé ‚ÄéF‚Äéi‚Äék‚Äéd‚Äé ‚Äéd‚Äée‚Äén‚Äé ‚ÄéI‚Äé ‚Äéw‚Äée‚Äée‚Äél‚Äé ‚Äéa‚Äé ‚Äég‚Äéo‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äé ‚Äé4‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äé ‚Äéo‚Äél‚Äéd‚Äé ‚Äég‚Äéi‚Äér‚Äél‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéa‚Äés‚Äés‚Äé!‚Äé"
tmUggMys,minimax reverse engeneering 01,0draude,C++,Saturday 13th of April 2024 08:30:32 PM CDT,"// C++ program to find the next optimal move for 
// a player 
#include<bits/stdc++.h> 
using namespace std; 

struct Move 
{ 
	int row, col; 
}; 

char player = 'x', opponent = 'o'; 

// This function returns true if there are moves 
// remaining on the board. It returns false if 
// there are no moves left to play. 
bool isMovesLeft(char board[3][3]) 
{ 
	for (int i = 0; i<3; i++) 
		for (int j = 0; j<3; j++) 
			if (board[i][j]=='_') 
				return true; 
	return false; 
} 

// This is the evaluation function as discussed 
// in the previous article ( http://goo.gl/sJgv68 ) 
int evaluate(char b[3][3]) 
{ 
	// Checking for Rows for X or O victory. 
	for (int row = 0; row<3; row++) 
	{ 
		if (b[row][0]==b[row][1] && 
			b[row][1]==b[row][2]) 
		{ 
			if (b[row][0]==player) 
				return +10; 
			else if (b[row][0]==opponent) 
				return -10; 
		} 
	} 

	// Checking for Columns for X or O victory. 
	for (int col = 0; col<3; col++) 
	{ 
		if (b[0][col]==b[1][col] && 
			b[1][col]==b[2][col]) 
		{ 
			if (b[0][col]==player) 
				return +10; 

			else if (b[0][col]==opponent) 
				return -10; 
		} 
	} 

	// Checking for Diagonals for X or O victory. 
	if (b[0][0]==b[1][1] && b[1][1]==b[2][2]) 
	{ 
		if (b[0][0]==player) 
			return +10; 
		else if (b[0][0]==opponent) 
			return -10; 
	} 

	if (b[0][2]==b[1][1] && b[1][1]==b[2][0]) 
	{ 
		if (b[0][2]==player) 
			return +10; 
		else if (b[0][2]==opponent) 
			return -10; 
	} 

	// Else if none of them have won then return 0 
	return 0; 
} 

// This is the minimax function. It considers all 
// the possible ways the game can go and returns 
// the value of the board 
int minimax(char board[3][3], int depth, bool isMax) 
{ 
	int score = evaluate(board); 

	// If Maximizer has won the game return his/her 
	// evaluated score 
	if (score == 10) 
		return score; 

	// If Minimizer has won the game return his/her 
	// evaluated score 
	if (score == -10) 
		return score; 

	// If there are no more moves and no winner then 
	// it is a tie 
	if (isMovesLeft(board)==false) 
		return 0; 

	// If this maximizer's move 
	if (isMax) 
	{ 
		int best = -1000; 

		// Traverse all cells 
		for (int i = 0; i<3; i++) 
		{ 
			for (int j = 0; j<3; j++) 
			{ 
				// Check if cell is empty 
				if (board[i][j]=='_') 
				{ 
					// Make the move 
					board[i][j] = player; 

					// Call minimax recursively and choose 
					// the maximum value 
					best = max( best, 
						minimax(board, depth+1, !isMax) ); 

					// Undo the move 
					board[i][j] = '_'; 
				} 
			} 
		} 
		return best; 
	} 

	// If this minimizer's move 
	else
	{ 
		int best = 1000; 

		// Traverse all cells 
		for (int i = 0; i<3; i++) 
		{ 
			for (int j = 0; j<3; j++) 
			{ 
				// Check if cell is empty 
				if (board[i][j]=='_') 
				{ 
					// Make the move 
					board[i][j] = opponent; 

					// Call minimax recursively and choose 
					// the minimum value 
					best = min(best, 
						minimax(board, depth+1, !isMax)); 

					// Undo the move 
					board[i][j] = '_'; 
				} 
			} 
		} 
		return best; 
	} 
} 

// This will return the best possible move for the player 
Move findBestMove(char board[3][3]) 
{ 
	int bestVal = -1000; 
	Move bestMove; 
	bestMove.row = -1; 
	bestMove.col = -1; 

	// Traverse all cells, evaluate minimax function for 
	// all empty cells. And return the cell with optimal 
	// value. 
	for (int i = 0; i<3; i++) 
	{ 
		for (int j = 0; j<3; j++) 
		{ 
			// Check if cell is empty 
			if (board[i][j]=='_') 
			{ 
				// Make the move 
				board[i][j] = player; 

				// compute evaluation function for this 
				// move. 
				int moveVal = minimax(board, 0, false); 

				// Undo the move 
				board[i][j] = '_'; 

				// If the value of the current move is 
				// more than the best value, then update 
				// best/ 
				if (moveVal > bestVal) 
				{ 
					bestMove.row = i; 
					bestMove.col = j; 
					bestVal = moveVal; 
				} 
			} 
		} 
	} 

	printf(""The value of the best Move is : %d\n\n"", 
			bestVal); 

	return bestMove; 
} 

// Driver code 
int main() 
{ 
	char board[3][3] = 
	{ 
		{ 'x', 'o', 'x' }, 
		{ 'o', 'o', 'x' }, 
		{ '_', '_', '_' } 
	}; 
	
	for(int i = 0; i < 3; i++){
		for(int j = 0; j < 3; j++)
			printf(""%c  "", board[i][j]);
		printf(""\n"");
	}
	
	printf(""***************************************\n"");

	Move bestMove = findBestMove(board); /*what is the value of best move*/

	printf(""The Optimal Move is :\n""); 
	printf(""ROW: %d COL: %d\n\n"", bestMove.row, 
								bestMove.col ); 
								
								
	board[bestmove.row][bestmove.col] = 'o';
	
	for(int i = 0; i < 3; i++){
		for(int j = 0; j < 3; j++)
			printf(""%c  "", board[i][j]);
		printf(""\n"");
	}
	
	return 0; 
} 
"
j2Rueghf,# reverseKthCombination.py,here2share,Python,Saturday 13th of April 2024 08:22:23 PM CDT,"# reverseKthCombination.py

def nCr(n, r):
    r = min(r, n-r)
    if r == 0: return 1
    res = 1
    for k in range(1, r+1):
        res = res*(n-k+1)//k
    return res

def reverseKthCombination(k, l, r):
    if r == 0:
        return []
    elif len(l) == r:
        return l
    else:
        i=nCr(len(l)-1, r)
        if k < i:
            return reverseKthCombination(k, l[1:], r)
        else:
            return l[0:1] + reverseKthCombination(k-i, l[1:], r-1)

test = [4, 6, 2, 1, 9, 0]
for k in range(nCr(len(test), 3)):
	print(reverseKthCombination(k, test, 3))"
n7FkGgc8,DFS Graph traversal Test IK Solution Correction T,brentfisher-72,Java,Saturday 13th of April 2024 07:53:21 PM CDT,"package com.brent.ik.graphs;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import java.util.List;

import static com.brent.ik.graphs.DFS.dfs_traversal;
import static org.assertj.core.api.Assertions.assertThat;


class DFSTest {

	public static class GraphData {
		private int n;
		private List<List<Integer>> edges;

		public int getN() {
			return n;
		}

		public void setN(int n) {
			this.n = n;
		}

		public List<List<Integer>> getEdges() {
			return edges;
		}

		public void setEdges(List<List<Integer>> edges) {
			this.edges = edges;
		}
	}

	@Test
	void shouldTraverseGraph_givenGraph() throws Exception {
		var inputJson = """"""
				{
					""n"": 6,
					""edges"": [
					[0, 1],
					[0, 2],
					[0, 4],
					[2, 3]
					]
				}
"""""";
		var expectedString = """"""
				[0, 4, 2, 3, 1, 5]
"""""";		
		var json = new ObjectMapper();
		GraphData graphData = json.readValue(inputJson,GraphData.class);
		
		List<Integer> expected = json.readValue(expectedString, new TypeReference<List<Integer>>(){});
		var actual = dfs_traversal(graphData.n,graphData.edges);
		assertThat(actual).isEqualTo(expected);
		
	}
}
/**
<T> T readValue(String content,
                       com.fasterxml.jackson.core.type.TypeReference<T> valueTypeRef)
*/
"
ZgejiqkG,DFS Graph Traversal IK Solution Correction,brentfisher-72,Java,Saturday 13th of April 2024 07:51:49 PM CDT,"package com.brent.ik.graphs;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.LinkedList;
import java.util.*;

public class DFS {

    static void dfsTraversalHelper(int startNode, List<List<Integer>> graph, List<Integer> answer, boolean[] isVisited) {
        isVisited[startNode] = true;
//        answer.add(startNode);
        Deque<Integer> stack = new ArrayDeque<>();
        stack.push(startNode);

        while (stack.size() > 0) {
            int u = stack.pop();
            answer.add(u); // the only place it should be, when it comes off the queue
            for (int v : graph.get(u)) {
                if (!isVisited[v]) {
//                    answer.add(startNode);
                    stack.push(v);
                    isVisited[v] = true;
                }
            }
        }
    }

    public static List<Integer> dfs_traversal(int n, List<List<Integer>> edges) {
        List<List<Integer>> graph = new ArrayList<>();
        List<Integer> answer = new ArrayList<>();
        boolean[] isVisited = new boolean[n];

        // Initialize graph
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        // Making a graph from the input edges
        for (List<Integer> edge : edges) {
            int u = edge.get(0);
            int v = edge.get(1);
            graph.get(u).add(v);
            graph.get(v).add(u); // For undirected graph
        }

        for (int i = 0; i < n; i++) {
            if (!isVisited[i]) {
                dfsTraversalHelper(i, graph, answer, isVisited);
            }
        }

        return answer;
    }
}
"
iMRpd4pt,VyOS LAB PBR,eerlonsilva,PowerShell,Saturday 13th of April 2024 07:49:05 PM CDT,"Topologia VyOS: https://ibb.co/kcqnR2S
Print (Traceroute CPE-1): https://ibb.co/F8XsHP5

*------------------ VyOS 1.4.0 Config -----------------*

set interfaces ethernet eth0 hw-id '50:00:00:01:00:00'
set interfaces ethernet eth1 address 'dhcp'
set interfaces ethernet eth1 description 'LAB-BGP-PBR'
set interfaces ethernet eth1 hw-id '50:00:00:01:00:01'
set interfaces ethernet eth2 address '10.100.1.1/30'
set interfaces ethernet eth2 description 'CGN-1'
set interfaces ethernet eth2 hw-id '50:00:00:01:00:02'
set interfaces ethernet eth3 address '10.100.1.5/30'
set interfaces ethernet eth3 description 'BNG-1'
set interfaces ethernet eth3 hw-id '50:00:00:01:00:03'
set interfaces loopback lo address '150.150.0.255/32'
set policy prefix-list EXPORT-V4 rule 5 action 'permit'
set policy prefix-list EXPORT-V4 rule 5 prefix '150.150.0.0/24'
set policy route PBR-CGNAT interface 'eth3'
set policy route PBR-CGNAT rule 5 action 'accept'
set policy route PBR-CGNAT rule 5 destination address '100.64.1.0/24'
set policy route PBR-CGNAT rule 5 set table 'main'
set policy route PBR-CGNAT rule 10 action 'accept'
set policy route PBR-CGNAT rule 10 set table '100'
set policy route PBR-CGNAT rule 10 source address '100.64.1.0/24'
set policy route-map EXPORT-V4 rule 5 action 'permit'
set policy route-map EXPORT-V4 rule 5 match ip address prefix-list 'EXPORT-V4'
set protocols bgp address-family ipv4-unicast network 150.150.0.0/24
set protocols bgp neighbor 10.12.1.1 address-family ipv4-unicast route-map export 'EXPORT-V4'
set protocols bgp neighbor 10.12.1.1 address-family ipv4-unicast soft-reconfiguration inbound
set protocols bgp neighbor 10.12.1.1 remote-as '100'
set protocols bgp parameters router-id '150.150.0.255'
set protocols bgp system-as '150'
set protocols ospf area 0.0.0.0 network '10.100.1.0/30'
set protocols ospf area 0.0.0.0 network '10.100.1.4/30'
set protocols ospf area 0.0.0.0 network '150.150.0.255/32'
set protocols ospf default-information originate always
set protocols ospf interface eth1 passive
set protocols ospf interface eth2 network 'point-to-point'
set protocols ospf interface eth3 network 'point-to-point'
set protocols ospf interface lo passive
set protocols ospf parameters router-id '150.150.0.255'
set protocols static route 150.150.0.0/24 blackhole
set protocols static table 100 route 0.0.0.0/0 next-hop 10.100.1.2
set service ntp allow-client address '0.0.0.0/0'
set service ntp allow-client address '::/0'
set service ntp server time1.vyos.net
set service ntp server time2.vyos.net
set service ntp server time3.vyos.net
set system config-management commit-revisions '100'
set system conntrack modules ftp
set system conntrack modules h323
set system conntrack modules nfs
set system conntrack modules pptp
set system conntrack modules sip
set system conntrack modules sqlnet
set system conntrack modules tftp
set system console device ttyS0 speed '115200'
set system host-name 'vyos'
set system login user vyos authentication encrypted-password '$6$rounds=656000$zJ7rWKS.b2E3R7k0$uZr/pqdvb.jVSgXXfoV3UaENe4q54iJ6oVxwGHsbZBaVSaBy1D47OwtgrEqzxncDFxc75plf2lwNOVIh.3koe0'
set system login user vyos authentication plaintext-password ''
set system syslog global facility all level 'info'
set system syslog global facility local7 level 'debug'

*------------------ CGN-1 Config -----------------*

/interface bridge
add name=Loopback
/interface ethernet
set [ find default-name=ether2 ] name=ether2-MK
/interface wireless security-profiles
set [ find default=yes ] supplicant-identity=MikroTik
/routing ospf instance
set [ find default=yes ] redistribute-static=as-type-1
/ip address
add address=10.100.1.2/30 interface=ether2-MK network=10.100.1.0
add address=150.150.0.254 interface=Loopback network=150.150.0.254
/ip firewall nat
add action=netmap chain=srcnat out-interface=ether2-MK src-address=100.64.1.0/24 to-addresses=150.150.0.0/30
/ip route
add distance=1 dst-address=150.150.0.0/30 type=blackhole
/routing ospf interface
add interface=Loopback network-type=point-to-point passive=yes
add interface=ether2-MK network-type=point-to-point
/routing ospf network
add area=backbone network=150.150.0.254/32
add area=backbone network=10.100.1.0/30
/system identity
set name=CGN-1
/tool romon
set enabled=yes

*------------------ BNG-1 Config -----------------*

/interface ethernet
set [ find default-name=ether3 ] name=ether3-MK
set [ find default-name=ether4 ] name=ether4-CPE-2
/ip pool
add name=Pool-PPPoE ranges=100.64.1.0/24
/port
set 0 name=serial0
/ppp profile
add local-address=150.150.0.253 name=PPPoE remote-address=Pool-PPPoE
/routing ospf instance
add disabled=no name=default redistribute=static router-id=150.150.0.253
/routing ospf area
add disabled=no instance=default name=0.0.0.0
/interface pppoe-server server
add disabled=no interface=ether4-CPE-2 max-mru=1480 max-mtu=1480 service-name=service1
/ip address
add address=150.150.0.253 interface=lo network=150.150.0.253
add address=10.100.1.6/30 interface=ether3-MK network=10.100.1.4
/ip route
add blackhole disabled=no dst-address=100.64.1.0/24 gateway="""" routing-table=main suppress-hw-offload=no
/ppp secret
add name=cpe-1 profile=PPPoE service=pppoe
/routing ospf interface-template
add area=0.0.0.0 disabled=no interfaces=ether3-MK networks=10.100.1.4/30 type=ptp
add area=0.0.0.0 disabled=no interfaces=lo networks=150.150.0.253/32 passive type=ptp
/system identity
set name=BNG-1
/system note
set show-at-login=no
/tool romon
set enabled=yes

*------------------ CPE-1 Config -----------------*

/interface pppoe-client
add add-default-route=yes disabled=no interface=ether1 name=pppoe-out1 password=123 user=cpe-1
/interface wireless security-profiles
set [ find default=yes ] supplicant-identity=MikroTik
/ip dhcp-client
add disabled=no interface=ether1
/system identity
set name=CPE-1
/tool romon
set enabled=yes

=============================================================================================================================

Topologia MikroTik: https://ibb.co/hLBtXvs
Print (Traceroute CPE-2): https://ibb.co/4FcmjLj

*------------------ MikroTik Config -----------------*

/interface bridge
add name=Loopback
/interface ethernet
set [ find default-name=ether1 ] name=ether1-LAB-BGP-PBR
set [ find default-name=ether2 ] name=ether2-CGN-2
set [ find default-name=ether3 ] name=ether3-BNG-2
/interface wireless security-profiles
set [ find default=yes ] supplicant-identity=MikroTik
/routing bgp instance
set default as=200 router-id=200.200.0.255
/routing ospf instance
set [ find default=yes ] distribute-default=always-as-type-1 router-id=200.200.0.255
/ip address
add address=10.200.1.1/30 interface=ether2-CGN-2 network=10.200.1.0
add address=10.200.1.5/30 interface=ether3-BNG-2 network=10.200.1.4
add address=200.200.0.255 interface=Loopback network=200.200.0.255
/ip dhcp-client
add add-default-route=no disabled=no interface=ether1-LAB-BGP-PBR use-peer-dns=no use-peer-ntp=no
/ip route
add distance=1 gateway=10.200.1.2 routing-mark=CGN
/ip route rule
add src-address=100.65.1.0/24 table=CGN
/routing bgp network
add network=200.200.0.0/24 synchronize=no
/routing bgp peer
add in-filter=IN-peer1 name=peer1 out-filter=OUT-peer1 remote-address=10.12.1.1 remote-as=100
/routing filter
add action=accept chain=IN-peer1 prefix=0.0.0.0/0
add action=discard chain=IN-peer1
add action=accept chain=OUT-peer1 prefix=200.200.0.0/24
add action=discard chain=OUT-peer1
/routing ospf interface
add interface=Loopback network-type=point-to-point passive=yes
add interface=ether2-CGN-2 network-type=point-to-point
add interface=ether3-BNG-2 network-type=point-to-point
/routing ospf network
add area=backbone network=200.200.0.255/32
add area=backbone network=10.200.1.0/30
add area=backbone network=10.200.1.4/30
/tool romon
set enabled=yes

*------------------ CGN-2 Config -----------------*

/interface bridge
add name=Loopback
/interface ethernet
set [ find default-name=ether2 ] name=ether2-MK
/interface wireless security-profiles
set [ find default=yes ] supplicant-identity=MikroTik
/routing ospf instance
set [ find default=yes ] redistribute-static=as-type-1 router-id=200.200.0.254
/ip address
add address=10.200.1.2/30 interface=ether2-MK network=10.200.1.0
add address=200.200.0.254 interface=Loopback network=200.200.0.254
/ip firewall nat
add action=netmap chain=srcnat out-interface=ether2-MK src-address=100.65.1.0/24 to-addresses=200.200.0.0/30
/ip route
add distance=1 dst-address=200.200.0.0/30 type=blackhole
/routing ospf interface
add interface=ether2-MK network-type=point-to-point
add interface=Loopback network-type=point-to-point passive=yes
/routing ospf network
add area=backbone network=10.200.1.0/30
add area=backbone network=200.200.0.254/32
/system identity
set name=CGN-2
/tool romon
set enabled=yes

*------------------ BNG-2 Config -----------------*

/interface ethernet
set [ find default-name=ether3 ] name=ether3-MK
set [ find default-name=ether4 ] name=ether4-CPE-2
/ip pool
add name=Pool-PPPoE ranges=100.65.1.0/24
/port
set 0 name=serial0
/ppp profile
add local-address=200.200.0.253 name=PPPoE remote-address=Pool-PPPoE
/routing ospf instance
add disabled=no name=default redistribute=static router-id=200.200.0.253
/routing ospf area
add disabled=no instance=default name=0.0.0.0
/interface pppoe-server server
add disabled=no interface=ether4-CPE-2 max-mru=1480 max-mtu=1480 service-name=service1
/ip address
add address=10.200.1.6/30 interface=ether3-MK network=10.200.1.4
add address=200.200.0.253 interface=lo network=200.200.0.253
/ip route
add blackhole disabled=no dst-address=100.65.1.0/24 gateway="""" routing-table=main suppress-hw-offload=no
/ppp secret
add name=cpe-2 profile=PPPoE service=pppoe
/routing ospf interface-template
add area=0.0.0.0 disabled=no interfaces=lo networks=200.200.0.253/32 passive type=ptp
add area=0.0.0.0 disabled=no interfaces=ether3-MK networks=10.200.1.4/30 type=ptp
/system identity
set name=BNG-2
/system note
set show-at-login=no
/tool romon
set enabled=yes

*------------------ CPE-2 Config -----------------*

/interface pppoe-client
add add-default-route=yes disabled=no interface=ether1 name=pppoe-out1 password=123 user=cpe-2
/interface wireless security-profiles
set [ find default=yes ] supplicant-identity=MikroTik
/ip dhcp-client
add disabled=no interface=ether1
/system identity
set name=CPE-2
/tool romon
set enabled=yes
"
J5ihVKyH,BFS Test ik correction,brentfisher-72,Java,Saturday 13th of April 2024 07:48:13 PM CDT,"package com.brent.ik.graphs;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.type.TypeReference;

import java.util.HashMap;
import java.util.*;
import java.util.stream.Stream;

import static com.brent.ik.graphs.BFS.*;

import static org.assertj.core.api.Assertions.assertThat;


class BFSTest {

	public static class GraphData {
		private int n;
		private List<List<Integer>> edges;

		public int getN() {
			return n;
		}

		public void setN(int n) {
			this.n = n;
		}

		public List<List<Integer>> getEdges() {
			return edges;
		}

		public void setEdges(List<List<Integer>> edges) {
			this.edges = edges;
		}
	}

	@Test
	void shouldTraverseGraph_givenGraph() throws Exception {
		var inputJson = """"""
				{
					""n"": 6,
					""edges"": [
					[0, 1],
					[0, 2],
					[0, 4],
					[2, 3]
					]
				}
"""""";
		var expectedString = """"""
				[0, 1, 2, 4, 3, 5]
"""""";		
		var json = new ObjectMapper();
		GraphData graphData = json.readValue(inputJson,GraphData.class);
		
		List<Integer> expected = json.readValue(expectedString, new TypeReference<List<Integer>>(){});
		var actual = bfs_traversal(graphData.n,graphData.edges);
		assertThat(actual).isEqualTo(expected);
		
	}
}
/**
<T> T readValue(String content,
                       com.fasterxml.jackson.core.type.TypeReference<T> valueTypeRef)
*/
"
MtJfCuLc,BFS Graph Traversal IK Solution Correction,brentfisher-72,Java,Saturday 13th of April 2024 07:46:25 PM CDT,"package com.brent.ik.graphs;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.LinkedList;
import java.util.*;

public class BFS{

	static void bfsTraversalHelper(int startNode, List<List<Integer>> graph, List<Integer> answer, boolean[] isVisited) {
        isVisited[startNode] = true;
//        answer.add(startNode);
        Queue<Integer> queue = new LinkedList<>();
        queue.add(startNode);

        while (!queue.isEmpty()) {
            int u = queue.poll();
            answer.add(u); // the only place it should be, when it comes off the queue
            for (int v : graph.get(u)) {
                if (!isVisited[v]) {
//                    answer.add(startNode);
                    queue.add(v);
                    isVisited[v] = true;
                }
            }
        }
    }

    public static List<Integer> bfs_traversal(int n, List<List<Integer>> edges) {
        List<List<Integer>> graph = new ArrayList<>();
        List<Integer> answer = new ArrayList<>();
        boolean[] isVisited = new boolean[n];

        // Initialize graph
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        // Making a graph from the input edges
        for (List<Integer> edge : edges) {
            int u = edge.get(0);
            int v = edge.get(1);
            graph.get(u).add(v);
            graph.get(v).add(u); // For undirected graph
        }

        for (int i = 0; i < n; i++) {
            if (!isVisited[i]) {
                bfsTraversalHelper(i, graph, answer, isVisited);
            }
        }

        return answer;
    }
}
"
y55SQynA,2024-04-13_stats.json,rdp_snitch,JSON,Saturday 13th of April 2024 07:18:17 PM CDT,"{
  ""ip"": {
    ""36.137.3.251"": 3,
    ""74.207.245.124"": 3,
    ""103.245.237.31"": 3,
    ""206.168.34.52"": 3,
    ""36.91.222.100"": 9,
    ""62.204.41.225"": 6,
    ""116.140.196.215"": 6,
    ""128.199.225.179"": 2160,
    ""58.218.204.183"": 9,
    ""87.251.75.64"": 3,
    ""205.210.31.40"": 9,
    ""212.41.9.9"": 18,
    ""45.227.254.54"": 12,
    ""185.170.144.3"": 3,
    ""80.66.76.92"": 9,
    ""152.32.228.20"": 3,
    ""196.190.117.7"": 6,
    ""198.235.24.87"": 9,
    ""91.238.181.16"": 3,
    ""87.251.75.145"": 3,
    ""173.255.206.80"": 12,
    ""45.33.43.23"": 3,
    ""94.232.46.132"": 3,
    ""64.225.18.13"": 60,
    ""93.177.66.5"": 30,
    ""45.175.173.33"": 9,
    ""205.210.31.97"": 9,
    ""190.186.122.2"": 3,
    ""185.11.61.106"": 3,
    ""112.4.139.162"": 3,
    ""45.227.254.26"": 6,
    ""159.65.44.224"": 6,
    ""194.165.16.78"": 6,
    ""193.53.245.249"": 9,
    ""167.94.145.60"": 3,
    ""198.235.24.232"": 9
  },
  ""asn"": {
    ""AS9808"": 3,
    ""AS63949"": 18,
    ""AS150867"": 3,
    ""AS398324"": 3,
    ""AS7713"": 9,
    ""AS59425"": 6,
    ""AS4837"": 6,
    ""AS14061"": 2226,
    ""AS4134"": 9,
    ""AS208091"": 15,
    ""AS396982"": 36,
    ""AS49505"": 18,
    ""AS267784"": 18,
    ""AS197414"": 3,
    ""AS135377"": 3,
    ""AS24757"": 6,
    ""AS49434"": 3,
    ""AS212482"": 3,
    ""AS197540"": 30,
    ""AS268902"": 9,
    ""AS25620"": 3,
    ""AS57523"": 3,
    ""AS56046"": 3,
    ""AS48721"": 6,
    ""AS209711"": 9,
    ""AS398705"": 3
  },
  ""isp"": {
    ""China Mobile"": 3,
    ""Akamai Technologies, Inc."": 18,
    ""LP TECHNOLOGY ELECTRONIC COMMERCE COMPANY LIMITED"": 3,
    ""Censys, Inc."": 6,
    ""PT Telekomunikasi Indonesia"": 9,
    ""Horizon LLC"": 6,
    ""China Unicom CHINA169 Network"": 6,
    ""DigitalOcean, LLC"": 2226,
    ""Chinanet"": 9,
    ""Xhost Internet Solutions LP"": 21,
    ""Google LLC"": 36,
    ""OOO \""Network of data-centers \""Selectel\"""": 18,
    ""Flyservers S.A."": 24,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Ethiotelecom"": 6,
    ""Datacenter location PAR1 France"": 3,
    ""netcup GmbH"": 30,
    ""DANIEL CARVALHO DE OLIVEIRA SILVA \u00ad ME"": 9,
    ""Cotas Ltda."": 3,
    ""Chang Way Technologies Co. Limited"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""MUV Bilisim ve Telekomunikasyon Hizmetleri Ltd. Sti"": 9
  },
  ""org"": {
    ""China Mobile Communications Corporation"": 6,
    ""Linode"": 18,
    ""LP Technology Electronic Commerce Company Limited"": 3,
    ""Censys Inc"": 3,
    ""Telekomunikasi Indonesia"": 9,
    ""Horizon LLC"": 6,
    ""China United Network Communications Corporation Limited"": 6,
    ""DigitalOcean, LLC"": 2220,
    ""Chinanet JS"": 9,
    ""Xhost Internet Solutions"": 15,
    ""Palo Alto Networks, Inc"": 36,
    ""Unknown"": 24,
    ""UAB Host Baltic"": 18,
    ""Xhostis"": 3,
    ""Ucloud Information Technology"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 3,
    ""Dmitriy Panchenko"": 3,
    ""netcup GmbH"": 30,
    ""DANIEL CARVALHO DE OLIVEIRA SILVA \u00ad ME"": 9,
    ""Adsl-ip-dinamica - Plan"": 3,
    ""Starcrecium Limited"": 3,
    ""Digital Ocean"": 6,
    ""Flyservers S.A"": 6,
    ""MUVHost - Vodafone Tuzla"": 9,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""Guangdong"": 3,
    ""California"": 42,
    ""Ho Chi Minh"": 3,
    ""Illinois"": 3,
    ""Jakarta"": 9,
    ""Moscow"": 27,
    ""Beijing"": 6,
    ""Central Singapore"": 2160,
    ""Jiangsu"": 12,
    ""North Holland"": 18,
    ""Vilnius"": 18,
    ""Addis Ababa"": 6,
    ""\u00cele-de-France"": 3,
    ""Texas"": 12,
    ""Perm Krai"": 3,
    ""New Jersey"": 66,
    ""Bavaria"": 30,
    ""Minas Gerais"": 9,
    ""Santa Cruz Department"": 3,
    ""Chechnya"": 3,
    ""Kaunas"": 6,
    ""Istanbul"": 9,
    ""Hesse"": 3
  },
  ""country"": {
    ""China"": 21,
    ""United States"": 123,
    ""Vietnam"": 3,
    ""Indonesia"": 9,
    ""Russia"": 33,
    ""Singapore"": 2160,
    ""The Netherlands"": 18,
    ""Lithuania"": 24,
    ""Ethiopia"": 6,
    ""France"": 3,
    ""Germany"": 33,
    ""Brazil"": 9,
    ""Bolivia"": 3,
    ""Turkey"": 9
  },
  ""account"": {
    ""hello"": 2295,
    ""(empty)"": 18,
    ""Test"": 45,
    ""Administr"": 24,
    ""TgnJvWeKh"": 3,
    ""cvjoMx"": 3,
    ""zwuPkb"": 3,
    ""Domain"": 18,
    ""Administrator"": 3,
    ""TYUCzidWn"": 3,
    ""YFbnZs"": 3,
    ""pCAnjC"": 3,
    ""sfqbwom7"": 12,
    ""beio"": 3,
    ""qAGQsvwie"": 3,
    ""PyJLWd"": 3,
    ""MeOnpY"": 3,
    ""JZRcVmAMX"": 3,
    ""MKTHDD"": 3,
    ""cYQNHj"": 3
  },
  ""keyboard"": {
    ""Unknown"": 2454
  },
  ""client_build"": {
    ""Unknown"": 2454
  },
  ""client_name"": {
    ""Unknown"": 2454
  },
  ""ip_type"": {
    ""mobile"": 6,
    ""hosting"": 2268,
    ""Unknown"": 108,
    ""proxy"": 6,
    ""hosting & proxy"": 66
  }
}"
hf1JNc3r,2024-04-13_stats.json,rdp_snitch,JSON,Saturday 13th of April 2024 07:16:06 PM CDT,"{
  ""ip"": {
    ""36.137.3.251"": 2,
    ""74.207.245.124"": 2,
    ""103.245.237.31"": 2,
    ""206.168.34.52"": 2,
    ""36.91.222.100"": 6,
    ""62.204.41.225"": 4,
    ""116.140.196.215"": 4,
    ""128.199.225.179"": 1440,
    ""58.218.204.183"": 6,
    ""87.251.75.64"": 2,
    ""205.210.31.40"": 6,
    ""212.41.9.9"": 12,
    ""45.227.254.54"": 8,
    ""185.170.144.3"": 2,
    ""80.66.76.92"": 6,
    ""152.32.228.20"": 2,
    ""196.190.117.7"": 4,
    ""198.235.24.87"": 6,
    ""91.238.181.16"": 2,
    ""87.251.75.145"": 2,
    ""173.255.206.80"": 8,
    ""45.33.43.23"": 2,
    ""94.232.46.132"": 2,
    ""64.225.18.13"": 40,
    ""93.177.66.5"": 20,
    ""45.175.173.33"": 6,
    ""205.210.31.97"": 6,
    ""190.186.122.2"": 2,
    ""185.11.61.106"": 2,
    ""112.4.139.162"": 2,
    ""45.227.254.26"": 4,
    ""159.65.44.224"": 4,
    ""194.165.16.78"": 4,
    ""193.53.245.249"": 6,
    ""167.94.145.60"": 2,
    ""198.235.24.232"": 6
  },
  ""asn"": {
    ""AS9808"": 2,
    ""AS63949"": 12,
    ""AS150867"": 2,
    ""AS398324"": 2,
    ""AS7713"": 6,
    ""AS59425"": 4,
    ""AS4837"": 4,
    ""AS14061"": 1484,
    ""AS4134"": 6,
    ""AS208091"": 10,
    ""AS396982"": 24,
    ""AS49505"": 12,
    ""AS267784"": 12,
    ""AS197414"": 2,
    ""AS135377"": 2,
    ""AS24757"": 4,
    ""AS49434"": 2,
    ""AS212482"": 2,
    ""AS197540"": 20,
    ""AS268902"": 6,
    ""AS25620"": 2,
    ""AS57523"": 2,
    ""AS56046"": 2,
    ""AS48721"": 4,
    ""AS209711"": 6,
    ""AS398705"": 2
  },
  ""isp"": {
    ""China Mobile"": 2,
    ""Akamai Technologies, Inc."": 12,
    ""LP TECHNOLOGY ELECTRONIC COMMERCE COMPANY LIMITED"": 2,
    ""Censys, Inc."": 4,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Horizon LLC"": 4,
    ""China Unicom CHINA169 Network"": 4,
    ""DigitalOcean, LLC"": 1484,
    ""Chinanet"": 6,
    ""Xhost Internet Solutions LP"": 14,
    ""Google LLC"": 24,
    ""OOO \""Network of data-centers \""Selectel\"""": 12,
    ""Flyservers S.A."": 16,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Ethiotelecom"": 4,
    ""Datacenter location PAR1 France"": 2,
    ""netcup GmbH"": 20,
    ""DANIEL CARVALHO DE OLIVEIRA SILVA \u00ad ME"": 6,
    ""Cotas Ltda."": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""MUV Bilisim ve Telekomunikasyon Hizmetleri Ltd. Sti"": 6
  },
  ""org"": {
    ""China Mobile Communications Corporation"": 4,
    ""Linode"": 12,
    ""LP Technology Electronic Commerce Company Limited"": 2,
    ""Censys Inc"": 2,
    ""Telekomunikasi Indonesia"": 6,
    ""Horizon LLC"": 4,
    ""China United Network Communications Corporation Limited"": 4,
    ""DigitalOcean, LLC"": 1480,
    ""Chinanet JS"": 6,
    ""Xhost Internet Solutions"": 10,
    ""Palo Alto Networks, Inc"": 24,
    ""Unknown"": 16,
    ""UAB Host Baltic"": 12,
    ""Xhostis"": 2,
    ""Ucloud Information Technology"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Dmitriy Panchenko"": 2,
    ""netcup GmbH"": 20,
    ""DANIEL CARVALHO DE OLIVEIRA SILVA \u00ad ME"": 6,
    ""Adsl-ip-dinamica - Plan"": 2,
    ""Starcrecium Limited"": 2,
    ""Digital Ocean"": 4,
    ""Flyservers S.A"": 4,
    ""MUVHost - Vodafone Tuzla"": 6,
    ""Censys, Inc."": 2
  },
  ""regionName"": {
    ""Guangdong"": 2,
    ""California"": 28,
    ""Ho Chi Minh"": 2,
    ""Illinois"": 2,
    ""Jakarta"": 6,
    ""Moscow"": 18,
    ""Beijing"": 4,
    ""Central Singapore"": 1440,
    ""Jiangsu"": 8,
    ""North Holland"": 12,
    ""Vilnius"": 12,
    ""Addis Ababa"": 4,
    ""\u00cele-de-France"": 2,
    ""Texas"": 8,
    ""Perm Krai"": 2,
    ""New Jersey"": 44,
    ""Bavaria"": 20,
    ""Minas Gerais"": 6,
    ""Santa Cruz Department"": 2,
    ""Chechnya"": 2,
    ""Kaunas"": 4,
    ""Istanbul"": 6,
    ""Hesse"": 2
  },
  ""country"": {
    ""China"": 14,
    ""United States"": 82,
    ""Vietnam"": 2,
    ""Indonesia"": 6,
    ""Russia"": 22,
    ""Singapore"": 1440,
    ""The Netherlands"": 12,
    ""Lithuania"": 16,
    ""Ethiopia"": 4,
    ""France"": 2,
    ""Germany"": 22,
    ""Brazil"": 6,
    ""Bolivia"": 2,
    ""Turkey"": 6
  },
  ""account"": {
    ""hello"": 1530,
    ""(empty)"": 12,
    ""Test"": 30,
    ""Administr"": 16,
    ""TgnJvWeKh"": 2,
    ""cvjoMx"": 2,
    ""zwuPkb"": 2,
    ""Domain"": 12,
    ""Administrator"": 2,
    ""TYUCzidWn"": 2,
    ""YFbnZs"": 2,
    ""pCAnjC"": 2,
    ""sfqbwom7"": 8,
    ""beio"": 2,
    ""qAGQsvwie"": 2,
    ""PyJLWd"": 2,
    ""MeOnpY"": 2,
    ""JZRcVmAMX"": 2,
    ""MKTHDD"": 2,
    ""cYQNHj"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1636
  },
  ""client_build"": {
    ""Unknown"": 1636
  },
  ""client_name"": {
    ""Unknown"": 1636
  },
  ""ip_type"": {
    ""mobile"": 4,
    ""hosting"": 1512,
    ""Unknown"": 72,
    ""proxy"": 4,
    ""hosting & proxy"": 44
  }
}"
Juc2Pu1j,NTLite_23H2,Chibibowa,XML,Saturday 13th of April 2024 07:15:21 PM CDT,"Direct download .iso: https://cjoint.net/?h6hfctamxq4rhlmyfcbt

Profile:

Ôªø<?xml version=""1.0"" encoding=""utf-8""?>
<Preset isAutoSaved=""true"" xmlns=""urn:schemas-nliteos-com:pn.v1"">
	<Date>01/01/1981 00:00:00</Date>
	<AppInfo>
		<Version>2024.4.9860</Version>
		<Licensed>Yes</Licensed>
		<Protections>Yes</Protections>
	</AppInfo>
	<RemoveComponents AppRemovalMode=""DISM"">
		<c>aarsvc 'Agent Activation Runtime'</c>
		<c>accessibility 'Accessibility tools (Ease of Access)'</c>
		<c>accessibility_cursors 'Mouse Pointers (Accessibility tools)'</c>
		<c>accessibility_magnifier 'Screen Magnifier'</c>
		<c>accessibility_narrator 'Narrator'</c>
		<c>alljoyn 'AllJoyn Router Service'</c>
		<c>appid 'Application Identity Service'</c>
		<c>apptargetedfeaturedb 'Application Targeted Feature Database'</c>
		<c>appv 'Application Virtualization (App-V)'</c>
		<c>asimov 'Telemetry Client'</c>
		<c>assembly.net '.NET assembly cache'</c>
		<c>assignedaccess 'Assigned Access'</c>
		<c>audit 'Windows Audit'</c>
		<c>autoplay</c>
		<c>axinstall 'ActiveX Installer Service'</c>
		<c>backup 'Backup and Restore'</c>
		<c>bingsearch 'Bing Search (InboxApp)'</c>
		<c>branchcacheclient 'BranchCache Client'</c>
		<c>ceip 'CEIP (SQM)'</c>
		<c>clipchamp.clipchamp 'Clipchamp'</c>
		<c>clouddesktop 'Cloud Desktop'</c>
		<c>clouddownload 'Windows Recovery (WinRE) - Cloud download'</c>
		<c>cloudnotifications 'Cloud Notifications'</c>
		<c>cursors 'Mouse Pointers'</c>
		<c>desktopactivitymoderator 'Desktop Activity Moderator (DAM)'</c>
		<c>desktopimgdownldr 'Desktop image downloader'</c>
		<c>deviceexperience 'Device Experience'</c>
		<c>devicesetupmanager 'Device Setup Manager'</c>
		<c>devicesync 'Microsoft Sync Framework'</c>
		<c>deviceupdatecenter 'Device Update Center'</c>
		<c>dolbyatmos 'Dolby Atmos codec pack'</c>
		<c>driver_athw8x.inf</c>
		<c>driver_b57nd60a.inf</c>
		<c>driver_bcmdhd64.inf</c>
		<c>driver_bcmwdidhdpcie.inf</c>
		<c>driver_bthpan.inf</c>
		<c>driver_c_barcodescanner.inf</c>
		<c>driver_c_cashdrawer.inf</c>
		<c>driver_c_fdc.inf</c>
		<c>driver_c_floppydisk.inf</c>
		<c>driver_c_infrared.inf</c>
		<c>driver_c_linedisplay.inf</c>
		<c>driver_c_magneticstripereader.inf</c>
		<c>driver_c_receiptprinter.inf</c>
		<c>driver_dc21x4vm.inf</c>
		<c>driver_e2xw10x64.inf</c>
		<c>driver_fdc.inf</c>
		<c>driver_flpydisk.inf</c>
		<c>driver_helloface.inf</c>
		<c>driver_hidir.inf</c>
		<c>driver_hidirkbd.inf</c>
		<c>driver_hidscanner.inf</c>
		<c>driver_hidtelephonydriver.inf</c>
		<c>driver_idtsec.inf</c>
		<c>driver_ipoib6x.inf</c>
		<c>driver_kdnic.inf</c>
		<c>driver_mdm3com.inf</c>
		<c>driver_mdm5674a.inf</c>
		<c>driver_mdmadc.inf</c>
		<c>driver_mdmagm64.inf</c>
		<c>driver_mdmags64.inf</c>
		<c>driver_mdmairte.inf</c>
		<c>driver_mdmaiwa.inf</c>
		<c>driver_mdmaiwa3.inf</c>
		<c>driver_mdmaiwa4.inf</c>
		<c>driver_mdmaiwa5.inf</c>
		<c>driver_mdmaiwat.inf</c>
		<c>driver_mdmar1.inf</c>
		<c>driver_mdmarch.inf</c>
		<c>driver_mdmarn.inf</c>
		<c>driver_mdmati.inf</c>
		<c>driver_mdmatm2k.inf</c>
		<c>driver_mdmaus.inf</c>
		<c>driver_mdmboca.inf</c>
		<c>driver_mdmbsb.inf</c>
		<c>driver_mdmbtmdm.inf</c>
		<c>driver_mdmbug3.inf</c>
		<c>driver_mdmbw561.inf</c>
		<c>driver_mdmc26a.inf</c>
		<c>driver_mdmcdp.inf</c>
		<c>driver_mdmcm28.inf</c>
		<c>driver_mdmcodex.inf</c>
		<c>driver_mdmcom1.inf</c>
		<c>driver_mdmcommu.inf</c>
		<c>driver_mdmcomp.inf</c>
		<c>driver_mdmcpq.inf</c>
		<c>driver_mdmcpq2.inf</c>
		<c>driver_mdmcpv.inf</c>
		<c>driver_mdmcrtix.inf</c>
		<c>driver_mdmcxhv6.inf</c>
		<c>driver_mdmcxpv6.inf</c>
		<c>driver_mdmdcm5.inf</c>
		<c>driver_mdmdcm6.inf</c>
		<c>driver_mdmdf56f.inf</c>
		<c>driver_mdmdgitn.inf</c>
		<c>driver_mdmdp2.inf</c>
		<c>driver_mdmdsi.inf</c>
		<c>driver_mdmdyna.inf</c>
		<c>driver_mdmeiger.inf</c>
		<c>driver_mdmelsa.inf</c>
		<c>driver_mdmeric.inf</c>
		<c>driver_mdmeric2.inf</c>
		<c>driver_mdmetech.inf</c>
		<c>driver_mdmfj2.inf</c>
		<c>driver_mdmgatew.inf</c>
		<c>driver_mdmgcs.inf</c>
		<c>driver_mdmgen.inf</c>
		<c>driver_mdmgl001.inf</c>
		<c>driver_mdmgl002.inf</c>
		<c>driver_mdmgl003.inf</c>
		<c>driver_mdmgl004.inf</c>
		<c>driver_mdmgl005.inf</c>
		<c>driver_mdmgl006.inf</c>
		<c>driver_mdmgl007.inf</c>
		<c>driver_mdmgl008.inf</c>
		<c>driver_mdmgl009.inf</c>
		<c>driver_mdmgl010.inf</c>
		<c>driver_mdmgsm.inf</c>
		<c>driver_mdmhaeu.inf</c>
		<c>driver_mdmhandy.inf</c>
		<c>driver_mdmhay2.inf</c>
		<c>driver_mdmhayes.inf</c>
		<c>driver_mdminfot.inf</c>
		<c>driver_mdmiodat.inf</c>
		<c>driver_mdmirmdm.inf</c>
		<c>driver_mdmisdn.inf</c>
		<c>driver_mdmjf56e.inf</c>
		<c>driver_mdmke.inf</c>
		<c>driver_mdmkortx.inf</c>
		<c>driver_mdmlasat.inf</c>
		<c>driver_mdmlasno.inf</c>
		<c>driver_mdmlucnt.inf</c>
		<c>driver_mdmmc288.inf</c>
		<c>driver_mdmmcd.inf</c>
		<c>driver_mdmmcom.inf</c>
		<c>driver_mdmmct.inf</c>
		<c>driver_mdmmega.inf</c>
		<c>driver_mdmmetri.inf</c>
		<c>driver_mdmmhrtz.inf</c>
		<c>driver_mdmmhzel.inf</c>
		<c>driver_mdmminij.inf</c>
		<c>driver_mdmmod.inf</c>
		<c>driver_mdmmot64.inf</c>
		<c>driver_mdmmoto1.inf</c>
		<c>driver_mdmmotou.inf</c>
		<c>driver_mdmmts.inf</c>
		<c>driver_mdmneuhs.inf</c>
		<c>driver_mdmnis1u.inf</c>
		<c>driver_mdmnis2u.inf</c>
		<c>driver_mdmnis3t.inf</c>
		<c>driver_mdmnis5t.inf</c>
		<c>driver_mdmnokia.inf</c>
		<c>driver_mdmnova.inf</c>
		<c>driver_mdmntt1.inf</c>
		<c>driver_mdmnttd2.inf</c>
		<c>driver_mdmnttd6.inf</c>
		<c>driver_mdmnttme.inf</c>
		<c>driver_mdmnttp.inf</c>
		<c>driver_mdmnttp2.inf</c>
		<c>driver_mdmnttte.inf</c>
		<c>driver_mdmolic.inf</c>
		<c>driver_mdmomrn3.inf</c>
		<c>driver_mdmoptn.inf</c>
		<c>driver_mdmosi.inf</c>
		<c>driver_mdmpace.inf</c>
		<c>driver_mdmpenr.inf</c>
		<c>driver_mdmpin.inf</c>
		<c>driver_mdmpn1.inf</c>
		<c>driver_mdmpp.inf</c>
		<c>driver_mdmpsion.inf</c>
		<c>driver_mdmracal.inf</c>
		<c>driver_mdmrock.inf</c>
		<c>driver_mdmrock3.inf</c>
		<c>driver_mdmrock4.inf</c>
		<c>driver_mdmrock5.inf</c>
		<c>driver_mdmsier.inf</c>
		<c>driver_mdmsii64.inf</c>
		<c>driver_mdmsmart.inf</c>
		<c>driver_mdmsonyu.inf</c>
		<c>driver_mdmsun1.inf</c>
		<c>driver_mdmsun2.inf</c>
		<c>driver_mdmsupr3.inf</c>
		<c>driver_mdmsupra.inf</c>
		<c>driver_mdmsuprv.inf</c>
		<c>driver_mdmtdk.inf</c>
		<c>driver_mdmtdkj2.inf</c>
		<c>driver_mdmtdkj3.inf</c>
		<c>driver_mdmtdkj4.inf</c>
		<c>driver_mdmtdkj5.inf</c>
		<c>driver_mdmtdkj6.inf</c>
		<c>driver_mdmtdkj7.inf</c>
		<c>driver_mdmtexas.inf</c>
		<c>driver_mdmti.inf</c>
		<c>driver_mdmtkr.inf</c>
		<c>driver_mdmtron.inf</c>
		<c>driver_mdmusrf.inf</c>
		<c>driver_mdmusrg.inf</c>
		<c>driver_mdmusrgl.inf</c>
		<c>driver_mdmusrk1.inf</c>
		<c>driver_mdmusrsp.inf</c>
		<c>driver_mdmvdot.inf</c>
		<c>driver_mdmvv.inf</c>
		<c>driver_mdmwhql0.inf</c>
		<c>driver_mdmx5560.inf</c>
		<c>driver_mdmzoom.inf</c>
		<c>driver_mdmzyp.inf</c>
		<c>driver_mdmzyxel.inf</c>
		<c>driver_mdmzyxlg.inf</c>
		<c>driver_mf.inf</c>
		<c>driver_mgtdyn.inf</c>
		<c>driver_mrvlpcie8897.inf</c>
		<c>driver_msdri.inf</c>
		<c>driver_msux64w10.inf</c>
		<c>driver_net1ic64.inf</c>
		<c>driver_net1yx64.inf</c>
		<c>driver_net2ic68.inf</c>
		<c>driver_net44amd.inf</c>
		<c>driver_net7400-x64-n650.inf</c>
		<c>driver_net7500-x64-n650f.inf</c>
		<c>driver_net7800-x64-n650f.inf</c>
		<c>driver_net8187bv64.inf</c>
		<c>driver_net8192se64.inf</c>
		<c>driver_net9500-x64-n650f.inf</c>
		<c>driver_netathr10x.inf</c>
		<c>driver_netathrx.inf</c>
		<c>driver_netax88179_178a.inf</c>
		<c>driver_netax88772.inf</c>
		<c>driver_netbc63a.inf</c>
		<c>driver_netbc64.inf</c>
		<c>driver_netbxnd0a.inf</c>
		<c>driver_netbxnda.inf</c>
		<c>driver_nete1e3e.inf</c>
		<c>driver_nete1g3e.inf</c>
		<c>driver_netefe3e.inf</c>
		<c>driver_netelx.inf</c>
		<c>driver_netg664.inf</c>
		<c>driver_netimm.inf</c>
		<c>driver_netjme.inf</c>
		<c>driver_netk57a.inf</c>
		<c>driver_netl160a.inf</c>
		<c>driver_netl1c63x64.inf</c>
		<c>driver_netl1e64.inf</c>
		<c>driver_netl260a.inf</c>
		<c>driver_netmlx4eth63.inf</c>
		<c>driver_netmlx5.inf</c>
		<c>driver_netmyk64.inf</c>
		<c>driver_netnvm64.inf</c>
		<c>driver_netnvma.inf</c>
		<c>driver_netr28ux.inf</c>
		<c>driver_netr28x.inf</c>
		<c>driver_netr7364.inf</c>
		<c>driver_netrtl64.inf</c>
		<c>driver_netrtwlane.inf</c>
		<c>driver_netrtwlane01.inf</c>
		<c>driver_netrtwlane_13.inf</c>
		<c>driver_netrtwlans.inf</c>
		<c>driver_netrtwlanu.inf</c>
		<c>driver_nett4x64.inf</c>
		<c>driver_netv1x64.inf</c>
		<c>driver_netvchannel.inf</c>
		<c>driver_netvf63a.inf</c>
		<c>driver_netvg63a.inf</c>
		<c>driver_netwbw02.inf</c>
		<c>driver_netwew00.inf</c>
		<c>driver_netwew01.inf</c>
		<c>driver_netwlv64.inf</c>
		<c>driver_netwns64.inf</c>
		<c>driver_netwsw00.inf</c>
		<c>driver_netwtw02.inf</c>
		<c>driver_netwtw04.inf</c>
		<c>driver_netwtw06.inf</c>
		<c>driver_netwtw08.inf</c>
		<c>driver_netwtw10.inf</c>
		<c>driver_netxex64.inf</c>
		<c>driver_perceptionsimulationheadset.inf</c>
		<c>driver_qcwlan64.inf</c>
		<c>driver_rdpbus.inf</c>
		<c>driver_remoteposdrv.inf</c>
		<c>driver_rt640x64.inf</c>
		<c>driver_rtcx21x64.inf</c>
		<c>driver_rtucx21x64.inf</c>
		<c>driver_rtux64w10.inf</c>
		<c>driver_rtvdevx64.inf</c>
		<c>driver_rtwlanu_oldic.inf</c>
		<c>driver_spaceport.inf</c>
		<c>driver_termbus.inf</c>
		<c>driver_termkbd.inf</c>
		<c>driver_termmou.inf</c>
		<c>driver_ts_generic.inf</c>
		<c>driver_tsgenericusbdriver.inf</c>
		<c>driver_tsprint.inf</c>
		<c>driver_tsusbhubfilter.inf</c>
		<c>driver_usb4p2pnetadapter.inf</c>
		<c>driver_usbcir.inf</c>
		<c>driver_usbncm.inf</c>
		<c>driver_usbnet.inf</c>
		<c>driver_vmxnet3.inf</c>
		<c>driver_ykinx64.inf</c>
		<c>e2a4f912-2574-4a75-9bb0-0d023378592b 'App Resolver'</c>
		<c>easeofaccessthemes 'Ease Of Access Themes'</c>
		<c>edgehtml32 'HTML Viewer - 32 bit'</c>
		<c>edgeupdate 'Microsoft Edge Update'</c>
		<c>edgewebview 'Microsoft Edge WebView'</c>
		<c>edgewebviewlegacy 'WebView2 Runtime (Legacy)'</c>
		<c>embeddedexperience 'Device Lockdown (Embedded Experience)'</c>
		<c>embeddedmode 'Embedded Mode'</c>
		<c>enterpriseclientsync 'Work Folders Client'</c>
		<c>enterprisedataprotection 'Enterprise Data Protection (EDP/WIP)'</c>
		<c>errorreporting 'Windows Error Reporting'</c>
		<c>f46d4000-fd22-4db4-ac8e-4e1ddde828fe 'Add Folder Suggestions dialog'</c>
		<c>facerecognition 'Face Recognition'</c>
		<c>fciclient 'File Server Resource Manager'</c>
		<c>filehistory 'File History'</c>
		<c>filerevocationmanager 'File Revocation Manager - 32 bit'</c>
		<c>flipgridpwa 'Flipgrid PWA (InboxApp)'</c>
		<c>font_arialblack 'Arial Black'</c>
		<c>font_bahnschrift 'Bahnschrift'</c>
		<c>font_calibri 'Calibri'</c>
		<c>font_cambria 'Cambria'</c>
		<c>font_cambria_regular 'Cambria &amp; Cambria Math'</c>
		<c>font_candara 'Candara'</c>
		<c>font_comicsansms 'ComicSansMS'</c>
		<c>font_consolas 'Consolas'</c>
		<c>font_constantia 'Constantia'</c>
		<c>font_corbel 'Corbel'</c>
		<c>font_courier 'Courier'</c>
		<c>font_ebrima 'Ebrima'</c>
		<c>font_ebrimabold 'Ebrima Bold'</c>
		<c>font_fixed 'Fixed'</c>
		<c>font_franklingothic 'FranklinGothic'</c>
		<c>font_gabriola 'Gabriola'</c>
		<c>font_gadugi 'Gadugi'</c>
		<c>font_gadugibold 'Gadugi Bold'</c>
		<c>font_georgia 'Georgia'</c>
		<c>font_holomd2 'Holo MDL2 Assets'</c>
		<c>font_impact 'Impact'</c>
		<c>font_inkfree 'Ink Free'</c>
		<c>font_javanesetext 'Javanese Text'</c>
		<c>font_leelawadeeui 'LeelawadeeUI'</c>
		<c>font_leelawadeeui_regular 'Leelawadee UI'</c>
		<c>font_lucidaconsole 'Lucida Console'</c>
		<c>font_lucidasans 'Lucida Sans Unicode'</c>
		<c>font_malgungothic 'Malgun Gothic'</c>
		<c>font_malgungothicbold 'Malgun Gothic Bold'</c>
		<c>font_malgungothicsemilight 'Malgun Gothic SemiLight'</c>
		<c>font_microsofthimalaya 'Microsoft Himalaya'</c>
		<c>font_microsoftjhenghei 'Microsoft JhengHei &amp; Microsoft JhengHei UI'</c>
		<c>font_microsoftjhengheibold 'Microsoft JhengHei Bold &amp; Microsoft JhengHei UI Bold'</c>
		<c>font_microsoftjhengheilight 'Microsoft JhengHei Light &amp; Microsoft JhengHei UI Light'</c>
		<c>font_microsoftsansserif 'Microsoft Sans Serif'</c>
		<c>font_microsoftyahei 'Microsoft YaHei &amp; Microsoft YaHei UI'</c>
		<c>font_microsoftyaheibold 'Microsoft YaHei Bold &amp; Microsoft YaHei UI Bold'</c>
		<c>font_microsoftyaheilight 'Microsoft YaHei Light &amp; Microsoft YaHei UI Light'</c>
		<c>font_mingliub 'MingLiU-ExtB &amp; PMingLiU-ExtB &amp; MingLiU_HKSCS-ExtB'</c>
		<c>font_mongolianbaiti 'Mongolian Baiti'</c>
		<c>font_ms_sans_serif 'MS Sans Serif'</c>
		<c>font_ms_serif 'MS Serif'</c>
		<c>font_msgothic 'MS Gothic &amp; MS UI Gothic &amp; MS PGothic'</c>
		<c>font_mvboli 'MV Boli'</c>
		<c>font_myanmartext 'Myanmar Text'</c>
		<c>font_myanmartextbold 'Myanmar Text Bold'</c>
		<c>font_newtailue 'Microsoft New Tai Lue'</c>
		<c>font_newtailuebold 'Microsoft New Tai Lue Bold'</c>
		<c>font_nirmalaui 'NirmalaUI'</c>
		<c>font_palatinolinotype 'PalatinoLinotype'</c>
		<c>font_phagspa 'Microsoft PhagsPa'</c>
		<c>font_phagspabold 'Microsoft PhagsPa Bold'</c>
		<c>font_sans_serif_collection 'Sans Serif Collection'</c>
		<c>font_segoe_ui_variable 'Segoe UI Variable'</c>
		<c>font_segoeprint 'Segoe Print'</c>
		<c>font_segoeprintbold 'Segoe Print Bold'</c>
		<c>font_segoescript 'SegoeScript'</c>
		<c>font_segoeui_italicssupplement 'SegoeUI ItalicsSupplement'</c>
		<c>font_simsun 'SimSun &amp; NSimSun'</c>
		<c>font_simsunb 'SimSun-ExtB'</c>
		<c>font_sitka 'Sitka'</c>
		<c>font_sylfaen 'Sylfaen'</c>
		<c>font_tahoma 'Tahoma'</c>
		<c>font_taile 'Microsoft Tai Le'</c>
		<c>font_tailebold 'Microsoft Tai Le Bold'</c>
		<c>font_trebuchetms 'TrebuchetMS'</c>
		<c>font_vector 'Vector'</c>
		<c>font_yibaiti 'Microsoft Yi Baiti'</c>
		<c>font_yugothic 'Yu Gothic Regular &amp; Yu Gothic UI Semilight'</c>
		<c>font_yugothicbold 'Yu Gothic Bold &amp; Yu Gothic UI Semibold &amp; Yu Gothic UI Bold'</c>
		<c>font_yugothiclight 'Yu Gothic Light &amp; Yu Gothic UI Light'</c>
		<c>font_yugothicmedium 'Yu Gothic Medium &amp; Yu Gothic UI Regular'</c>
		<c>gameexplorer 'Game Explorer'</c>
		<c>guardedhost 'Guarded Host'</c>
		<c>help 'Windows Help content'</c>
		<c>helpsupport 'Help file support (CHM)'</c>
		<c>hwsupport_floppy 'Floppy disk'</c>
		<c>hwsupport_infrared 'Infrared devices'</c>
		<c>hwsupport_telephony 'Telephony'</c>
		<c>hwsupport_tv 'TV Tuner codecs and support'</c>
		<c>iis 'Internet Information Server (IIS)'</c>
		<c>indeo 'Intel Indeo Codecs'</c>
		<c>inputviewexperience 'Input View Experience'</c>
		<c>insiderhub 'Windows Insider Program'</c>
		<c>internetexplorer 'Internet Explorer'</c>
		<c>internetexplorer32 'Internet Explorer - 32 bit'</c>
		<c>isoburn 'Windows Disc Image Burning Tool'</c>
		<c>kerneldebug 'Kernel Debugging'</c>
		<c>la57 '57-bit Linear Addressing'</c>
		<c>langarabic 'Arabic'</c>
		<c>langbasque 'Basque'</c>
		<c>langbulgarian 'Bulgarian'</c>
		<c>langcatalan 'Catalan'</c>
		<c>langchineses 'Chinese Simplified'</c>
		<c>langchineset 'Chinese Traditional'</c>
		<c>langcroatian 'Croatian'</c>
		<c>langczech 'Czech'</c>
		<c>langdanish 'Danish'</c>
		<c>langestonian 'Estonian'</c>
		<c>langfinnish 'Finnish'</c>
		<c>langgalician 'Galician'</c>
		<c>langgreek 'Greek'</c>
		<c>langhebrew 'Hebrew'</c>
		<c>langhungarian 'Hungarian'</c>
		<c>langime 'Input Method Editor (IME)'</c>
		<c>langimejp 'Japanese (IME)'</c>
		<c>langimeko 'Korean (IME)'</c>
		<c>langimetc 'Chinese Traditional (IME)'</c>
		<c>langindonesian 'Indonesian'</c>
		<c>langitalian 'Italian'</c>
		<c>langjapanese 'Japanese'</c>
		<c>langkorean 'Korean'</c>
		<c>langlatvian 'Latvian'</c>
		<c>langlithuanian 'Lithuanian'</c>
		<c>langnorwegian 'Norwegian'</c>
		<c>langpolish 'Polish'</c>
		<c>langportuguesebr 'Portuguese (Brazilian)'</c>
		<c>langportuguesept 'Portuguese'</c>
		<c>langromanian 'Romanian'</c>
		<c>langrussian 'Russian'</c>
		<c>langserbian 'Serbian'</c>
		<c>langslovak 'Slovak'</c>
		<c>langslovenian 'Slovenian'</c>
		<c>langspanish 'Spanish'</c>
		<c>langswedish 'Swedish'</c>
		<c>langthai 'Thai'</c>
		<c>langturkish 'Turkish'</c>
		<c>langukrainian 'Ukrainian'</c>
		<c>langvietnamese 'Vietnamese'</c>
		<c>laps 'Windows Local Administrator Password Solution(LAPS)'</c>
		<c>lcu 'Cumulative Update cache (LCU)'</c>
		<c>livecaptions 'Live Captions'</c>
		<c>lockscreens 'Lock Screen backgrounds'</c>
		<c>mail 'Windows Mail'</c>
		<c>mailcommdll 'Windows Mail Communications Library'</c>
		<c>manifestbackup 'Manifest Backup (WinSxS\Backup)'</c>
		<c>mapcontrol 'Map Control'</c>
		<c>mediaplayer32 'Windows Media Player - 32 bit'</c>
		<c>mediaplayernetworksharing 'WMP Network Sharing Service'</c>
		<c>mediaplayernetworksharing32 'WMP Network Sharing Service - 32 bit'</c>
		<c>messagingsvc 'Messaging Service'</c>
		<c>microsoft.549981c3f5f10 'Cortana'</c>
		<c>microsoft.asynctextservice 'AsyncTextService'</c>
		<c>microsoft.bingnews 'Microsoft News'</c>
		<c>microsoft.bingweather 'MSN Weather'</c>
		<c>microsoft.bioenrollment 'Windows Hello Setup'</c>
		<c>microsoft.ecapp 'Eye Control'</c>
		<c>microsoft.gamingapp 'Xbox App'</c>
		<c>microsoft.gethelp 'Get Help'</c>
		<c>microsoft.getstarted 'Tips (Get Started)'</c>
		<c>microsoft.lockapp 'Windows Default Lock Screen'</c>
		<c>microsoft.microsoftedge 'Microsoft Edge (Legacy)'</c>
		<c>microsoft.microsoftedge.stable 'Microsoft Edge (Chromium)'</c>
		<c>microsoft.microsoftedgedevtoolsclient 'Microsoft Edge DevTools Client'</c>
		<c>microsoft.microsoftofficehub 'Office'</c>
		<c>microsoft.microsoftsolitairecollection 'Microsoft Solitaire Collection'</c>
		<c>microsoft.microsoftstickynotes 'Microsoft Sticky Notes'</c>
		<c>microsoft.people 'Microsoft People'</c>
		<c>microsoft.powerautomatedesktop 'Power Automate'</c>
		<c>microsoft.screensketch 'Snipping Tool'</c>
		<c>microsoft.sechealthui 'Windows Defender'</c>
		<c>microsoft.todos 'Microsoft To Do'</c>
		<c>microsoft.ui.xaml.2.7</c>
		<c>microsoft.webmediaextensions 'Web Media Extensions'</c>
		<c>microsoft.windows.apprep.chxapp 'SmartScreen'</c>
		<c>microsoft.windows.assignedaccesslockapp 'Assigned Access Lock app'</c>
		<c>microsoft.windows.callingshellapp 'Call'</c>
		<c>microsoft.windows.contentdeliverymanager 'Content Delivery Manager'</c>
		<c>microsoft.windows.narratorquickstart 'Narrator'</c>
		<c>microsoft.windows.oobenetworkcaptiveportal 'Captive Portal Flow'</c>
		<c>microsoft.windows.oobenetworkconnectionflow 'Network Connection Flow'</c>
		<c>microsoft.windows.parentalcontrols 'Microsoft family features'</c>
		<c>microsoft.windows.peopleexperiencehost 'Windows Shell Experience'</c>
		<c>microsoft.windows.photos 'Microsoft Photos'</c>
		<c>microsoft.windows.secureassessmentbrowser 'Examen'</c>
		<c>microsoft.windowsalarms 'Windows Clock'</c>
		<c>microsoft.windowscamera 'Windows Camera'</c>
		<c>microsoft.windowscommunicationsapps 'Mail and Calendar'</c>
		<c>microsoft.windowsfeedbackhub 'Feedback Hub'</c>
		<c>microsoft.windowsmaps 'Windows Maps'</c>
		<c>microsoft.windowssoundrecorder 'Windows Voice Recorder'</c>
		<c>microsoft.windowsterminal 'Terminal Windows'</c>
		<c>microsoft.xbox.tcui 'Xbox TCUI'</c>
		<c>microsoft.xboxgamecallableui 'Xbox Game UI'</c>
		<c>microsoft.xboxgameoverlay 'Xbox Game Bar Plugin'</c>
		<c>microsoft.xboxgamingoverlay 'Xbox Game Bar'</c>
		<c>microsoft.xboxidentityprovider 'Xbox Identity Provider'</c>
		<c>microsoft.xboxspeechtotextoverlay 'Xbox Game Speech Window'</c>
		<c>microsoft.yourphone 'Your Phone'</c>
		<c>microsoft.zunevideo 'Movies &amp; TV'</c>
		<c>microsoftcorporationii.quickassist 'Assistance rapide'</c>
		<c>microsoftwindows.client.fileexp 'File Explorer (Extensions)'</c>
		<c>microsoftwindows.client.webexperience 'Windows Web Experience Pack'</c>
		<c>migwiz 'Easy Transfer'</c>
		<c>mixedreality 'Windows Mixed Reality'</c>
		<c>mmga 'MMGA MAPI'</c>
		<c>mobilepc</c>
		<c>mobilepc_location 'Location notifications'</c>
		<c>mobilepc_networkprojection 'Network Projection'</c>
		<c>mpeg2splitter 'MPEG-2 Splitter'</c>
		<c>msdtc 'Distributed Transaction Coordinator (DTC)'</c>
		<c>msmq 'Microsoft Message Queue (MSMQ)'</c>
		<c>multipointconnector 'MultiPoint Connector'</c>
		<c>naturalauthentication 'Natural Authentication'</c>
		<c>ndiscap 'NDIS Packet Capturing (NDISCAP)'</c>
		<c>nfc 'Near Field Communication (NFC)'</c>
		<c>notificationintelligenceplatform 'Notification Intelligence Platform'</c>
		<c>nowplaying 'Now Playing Session Manager'</c>
		<c>ntvdm 'NTVDM 16 bit subsystem'</c>
		<c>onedrive</c>
		<c>openssh</c>
		<c>osk_acc 'On-Screen Keyboard (Accessibility tools)'</c>
		<c>oskthemes 'On-Screen Keyboard (Windows Personalization themes)'</c>
		<c>outlookpwa 'Outlook PWA (InboxApp)'</c>
		<c>payments</c>
		<c>pdfreader 'Windows Reader (PDF)'</c>
		<c>penservice 'Pen Service'</c>
		<c>phonesvc 'Phone Service'</c>
		<c>picturepassword 'Picture password'</c>
		<c>pos 'Point of Service (POS)'</c>
		<c>powershell32 'PowerShell - 32 bit'</c>
		<c>powershellise32 'PowerShell ISE - 32 bit'</c>
		<c>proximity</c>
		<c>pushnotificationssvc 'Windows Push Notifications Service (System)'</c>
		<c>pushtoinstall 'Windows PushToInstall Service'</c>
		<c>rasauto 'Remote Access Auto Connection Manager'</c>
		<c>rdpclient 'Remote Desktop Client'</c>
		<c>rdpclient32 'Remote Desktop Client - 32 bit'</c>
		<c>rdpserver 'Remote Desktop Server'</c>
		<c>rdpserverlic 'Remote Desktop Licensing'</c>
		<c>reliabilityanalysis 'Reliability Analysis Services'</c>
		<c>remoteactivex 'Remote Desktop Services ActiveX Client'</c>
		<c>remoteactivex32 'Remote Desktop Services ActiveX Client - 32 bit'</c>
		<c>remoteassistance 'Remote Assistance'</c>
		<c>remotefx</c>
		<c>remoteportredirector 'Remote Desktop Services Port Redirector'</c>
		<c>remoteregistry 'Remote Registry'</c>
		<c>retaildemo 'Retail Demo Content'</c>
		<c>ribbon 'UI Ribbon'</c>
		<c>rightsmanagement 'Rights Management support'</c>
		<c>rotationmanager 'Auto-Rotation Manager'</c>
		<c>rpclocator 'Remote Procedure Call (RPC) Locator'</c>
		<c>screensavers</c>
		<c>scripto</c>
		<c>securestartup 'BitLocker Drive Encryption'</c>
		<c>securitycenter 'Security Center'</c>
		<c>sharedexperiences 'Shared Experiences'</c>
		<c>sharedpc 'Shared PC mode'</c>
		<c>sharemediacpl 'Share Media Control Panel'</c>
		<c>simpletcp 'Simple TCP/IP services'</c>
		<c>skypeortc 'Skype ORTC'</c>
		<c>sleepstudy 'Sleep Study'</c>
		<c>soundthemes 'Sound Themes'</c>
		<c>speechcommon 'Speech Recognition'</c>
		<c>speechtts 'Speech TTS'</c>
		<c>spellchecking 'Spell Checking'</c>
		<c>stepsrecorder 'Steps Recorder'</c>
		<c>storagespaces 'Storage Spaces'</c>
		<c>superfetch</c>
		<c>sustainabilityservice 'Sustainability Service'</c>
		<c>systemguard 'System Guard'</c>
		<c>systemrestore 'System Restore'</c>
		<c>tabletextservice 'Table Text Service'</c>
		<c>tabletpc 'Tablet PC'</c>
		<c>targetedcontent32 'Targeted Content Service - 32 bit'</c>
		<c>taskschdmsc32 'Task Scheduler (management console) - 32 bit'</c>
		<c>taskscheduler32 'Task Scheduler - 32 bit'</c>
		<c>taskview 'Task View'</c>
		<c>telnetclient 'Telnet Client'</c>
		<c>tempcache 'Cache and temp files'</c>
		<c>textprediction 'Text prediction'</c>
		<c>tftpclient 'TFTP client'</c>
		<c>tieringengine 'Storage Tiers Management'</c>
		<c>timetraveldebugger 'Time Travel Debugger (TTD)'</c>
		<c>troubleshootingsvc 'Recommended Troubleshooting service'</c>
		<c>universalprintsvc 'Universal Print Management Service'</c>
		<c>unp 'Universal Notification Platform (UNP)'</c>
		<c>userchoiceprotection 'User Choice Protection'</c>
		<c>vcmcodecs 'Video Compression Manager (VCM) codecs'</c>
		<c>voiceaccess 'Voice Access'</c>
		<c>wallet 'Wallet Service'</c>
		<c>wcn 'Windows Connect Now (WCN)'</c>
		<c>webthreatdefense 'Web Threat Defense Service'</c>
		<c>webview2core 'WebView2 Runtime (Core)'</c>
		<c>wificloudstore 'WiFi Sync Provider'</c>
		<c>wifinetworkmanager 'Wi-Fi Network Manager (Wi-Fi Sense)'</c>
		<c>windows.cbspreview 'Windows Barcode Preview'</c>
		<c>windowstogo 'Windows To Go'</c>
		<c>winresume 'Resume from Hibernate'</c>
		<c>winrm 'Windows Remote Management (WS-Management)'</c>
		<c>winsat 'Windows System Assessment Tool (WinSAT)'</c>
		<c>wordpad</c>
		<c>wordpad32 'Wordpad - 32 bit'</c>
		<c>xbox 'Xbox - Core'</c>
		<c>zipfolder 'Zip &amp; Cab folder'</c>
	</RemoveComponents>
	<Compatibility protectHidden=""true"">
		<ComponentFeatures>
			<Feature enabled=""no"">AppGuard</Feature>
			<Feature enabled=""no"">Battle.net</Feature>
			<Feature enabled=""no"">YubiKey</Feature>
			<Feature enabled=""no"">Bluetooth</Feature>
			<Feature enabled=""no"">USBCamera</Feature>
			<Feature enabled=""no"">CapFrameX</Feature>
			<Feature enabled=""no"">Discord</Feature>
			<Feature enabled=""no"">FileSharing</Feature>
			<Feature enabled=""no"">Hyper-V</Feature>
			<Feature enabled=""no"">iCloud</Feature>
			<Feature enabled=""no"">Kaspersky</Feature>
			<Feature enabled=""no"">ManualSetup</Feature>
			<Feature enabled=""no"">OfficeSupport</Feature>
			<Feature enabled=""no"">AppxSupport</Feature>
			<Feature enabled=""no"">Netflix</Feature>
			<Feature enabled=""no"">NetworkDiscovery</Feature>
			<Feature enabled=""no"">NightLight</Feature>
			<Feature enabled=""no"">NvidiaSetup</Feature>
			<Feature enabled=""no"">OOBE</Feature>
			<Feature enabled=""no"">Printing</Feature>
			<Feature enabled=""no"">Recommended-All</Feature>
			<Feature enabled=""no"">SamsungSwitch</Feature>
			<Feature enabled=""no"">Scanning</Feature>
			<Feature enabled=""yes"">ServicingStack</Feature>
			<Feature enabled=""no"">ShellSearchSupport</Feature>
			<Feature enabled=""no"">Spotify</Feature>
			<Feature enabled=""yes"">SFC</Feature>
			<Feature enabled=""no"">DefaultFonts</Feature>
			<Feature enabled=""yes"">SafeMode</Feature>
			<Feature enabled=""no"">TeamViewer</Feature>
			<Feature enabled=""no"">Recommended-Tablet</Feature>
			<Feature enabled=""no"">USBModem</Feature>
			<Feature enabled=""no"">USB</Feature>
			<Feature enabled=""no"">VideoPlayback</Feature>
			<Feature enabled=""no"">VPN</Feature>
			<Feature enabled=""no"">VisualStudio</Feature>
			<Feature enabled=""no"">VSS</Feature>
			<Feature enabled=""yes"">ActivationKMS</Feature>
			<Feature enabled=""yes"">Activation</Feature>
			<Feature enabled=""yes"">WinSetup</Feature>
			<Feature enabled=""no"">WindowsStore</Feature>
			<Feature enabled=""yes"">WindowsUpdate</Feature>
			<Feature enabled=""no"">WLAN</Feature>
		</ComponentFeatures>
		<MachineDrivers>
			<Machine enabled=""no"">HostMachine</Machine>
			<Machine enabled=""no"">Hyper-V VM</Machine>
			<Machine enabled=""no"">Parallels VM</Machine>
			<Machine enabled=""no"">Virtual Box VM</Machine>
			<Machine enabled=""no"">VMware VM</Machine>
		</MachineDrivers>
	</Compatibility>
	<Features>
		<Feature name=""DirectPlay"">true</Feature>
		<Feature name=""Microsoft-Hyper-V-Management-Clients"">true</Feature>
		<Feature name=""Microsoft-Hyper-V-Hypervisor"">true</Feature>
		<Feature name=""Microsoft-Hyper-V-Tools-All"">true</Feature>
		<Feature name=""Microsoft-Hyper-V-Management-PowerShell"">true</Feature>
		<Feature name=""Microsoft-Hyper-V"">true</Feature>
		<Feature name=""Microsoft-Hyper-V-Services"">true</Feature>
		<Feature name=""Microsoft-Hyper-V-All"">true</Feature>
		<Feature name=""LegacyComponents"">true</Feature>
	</Features>
	<Tweaks>
		<Settings>
			<TweakGroup name=""CrashControl"">
				<Tweak name=""CrashControl\AutoReboot"">0</Tweak>
				<Tweak name=""CrashControl\CrashDumpEnabled"">2</Tweak>
			</TweakGroup>
			<TweakGroup name=""DesktopTweaks"">
				<Tweak name=""Explorer\NoPinningStoreToTaskbar"">0</Tweak>
				<Tweak name=""WindowMetrics\MinAnimate"">0</Tweak>
				<Tweak name=""Desktop\WallpaperStyle"">4</Tweak>
				<Tweak name=""InprocServer32\""></Tweak>
				<Tweak name=""Personalize\AppsUseLightTheme"">0</Tweak>
				<Tweak name=""Personalize\SystemUsesLightTheme"">0</Tweak>
				<Tweak name=""NewStartPanel\{5399E694-6CE5-4D6C-8FCE-1D8870FDCBA0}"">0</Tweak>
				<Tweak name=""NewStartPanel\{20D04FE0-3AEA-1069-A2D8-08002B30309D}"">0</Tweak>
				<Tweak name=""NewStartPanel\{F02C1A0D-BE21-4350-88B0-7367FC96EF3C}"">0</Tweak>
				<Tweak name=""NewStartPanel\{645FF040-5081-101B-9F08-00AA002F954E}"">0</Tweak>
				<Tweak name=""NewStartPanel\{59031a47-3f72-44a7-89c5-5595fe6b30ee}"">0</Tweak>
				<Tweak name=""Desktop\IconSize"">48</Tweak>
				<Tweak name=""Desktop\MenuShowDelay"">0</Tweak>
				<Tweak name=""PushNotifications\ToastEnabled"">0</Tweak>
				<Tweak name=""PushNotifications\NoCloudApplicationNotification"">1</Tweak>
				<Tweak name=""Desktop\ScreenSaverIsSecure"">0</Tweak>
				<Tweak name=""QuietHours\Enable"">0</Tweak>
				<Tweak name=""Start\HideRecentJumplists"">1</Tweak>
				<Tweak name=""Search\SearchboxTaskbarMode"">0</Tweak>
				<Tweak name=""Advanced\Start_Layout"">1</Tweak>
				<Tweak name=""Advanced\TaskbarAl"">0</Tweak>
				<Tweak name=""Advanced\TaskbarMn"">0</Tweak>
				<Tweak name=""Advanced\MMTaskbarEnabled"">1</Tweak>
				<Tweak name=""Advanced\TaskbarDa"">0</Tweak>
				<Tweak name=""Communications\ConfigureChatAutoInstall"">0</Tweak>
				<Tweak name=""Keyboard\PrintScreenKeyForSnippingEnabled"">0</Tweak>
			</TweakGroup>
			<TweakGroup name=""Explorer"">
				<Tweak name=""Explorer\EnableAutoTray"">0</Tweak>
				<Tweak name=""OperationStatusManager\EnthusiastMode"">1</Tweak>
				<Tweak name=""AutoplayHandlers\DisableAutoplay"">1</Tweak>
				<Tweak name=""Explorer\EnableLegacyBalloonNotifications"">0</Tweak>
				<Tweak name=""Explorer\NoThumbnailCache"">0</Tweak>
				<Tweak name=""Explorer\NoCDBurning"">0</Tweak>
				<Tweak name=""cmd\HideBasedOnVelocityId"">0</Tweak>
				<Tweak name=""ControlPanel\StartupPage"">1</Tweak>
				<Tweak name=""ControlPanel\AllItemsIconView"">0</Tweak>
				<Tweak name=""Advanced\UseCompactMode"">1</Tweak>
				<Tweak name=""Advanced\FolderContentsInfoTip"">1</Tweak>
				<Tweak name=""Explorer\DisableThumbnails"">0</Tweak>
				<Tweak name=""Explorer\DisableThumbnailsOnNetworkFolders"">0</Tweak>
				<Tweak name=""Explorer\NoTrayItemsDisplay"">0</Tweak>
				<Tweak name=""Advanced\HideMergeConflicts"">1</Tweak>
				<Tweak name=""Advanced\SeparateProcess"">1</Tweak>
				<Tweak name=""{e88865ea-0e1c-4e20-9aa6-edcd0212c87c}\System.IsPinnedToNameSpaceTree"">0</Tweak>
				<Tweak name=""{031E4825-7B94-4dc3-B131-E946B44C8DD5}\System.IsPinnedToNameSpaceTree"">1</Tweak>
				<Tweak name=""Advanced\NavPaneShowAllFolders"">1</Tweak>
				<Tweak name=""Advanced\LaunchTo"">1</Tweak>
				<Tweak name=""Explorer\HubMode"">0</Tweak>
				<Tweak name=""Explorer\ConfirmFileDelete"">1</Tweak>
				<Tweak name=""Advanced\DontUsePowerShellOnWinX"">1</Tweak>
				<Tweak name="".jpg\PhotoViewer.FileAssoc.Tiff"">PhotoViewer.FileAssoc.Tiff</Tweak>
				<Tweak name=""Explorer\HideClock"">0</Tweak>
				<Tweak name=""Explorer\ShowDriveLettersFirst"">1</Tweak>
				<Tweak name=""Advanced\ShowSyncProviderNotifications"">0</Tweak>
				<Tweak name=""Advanced\ShowTaskViewButton"">0</Tweak>
				<Tweak name=""Advanced\AutoCheckSelect"">1</Tweak>
				<Tweak name=""Advanced\SharingWizardOn"">0</Tweak>
				<Tweak name=""Advanced\ShowSuperHidden"">1</Tweak>
			</TweakGroup>
			<TweakGroup name=""PowerAndShutdown"">
				<Tweak name=""Power\HiberbootEnabled"">0</Tweak>
				<Tweak name=""Power\HiberFileSizePercent"">50</Tweak>
				<Tweak name=""FlyoutMenuSettings\ShowHibernateOption"">0</Tweak>
				<Tweak name=""FlyoutMenuSettings\ShowSleepOption"">0</Tweak>
				<Tweak name=""System\ShutdownWithoutLogon"">1</Tweak>
			</TweakGroup>
			<TweakGroup name=""Privacy"">
				<Tweak name=""appointments\Value"">Deny</Tweak>
				<Tweak name=""phoneCallHistory\Value"">Deny</Tweak>
				<Tweak name=""webcam\Value"">Allow</Tweak>
				<Tweak name=""contacts\Value"">Deny</Tweak>
				<Tweak name=""appDiagnostics\Value"">Deny</Tweak>
				<Tweak name=""documentsLibrary\Value"">Allow</Tweak>
				<Tweak name=""email\Value"">Deny</Tweak>
				<Tweak name=""broadFileSystemAccess\Value"">Allow</Tweak>
				<Tweak name=""chat\Value"">Deny</Tweak>
				<Tweak name=""microphone\Value"">Allow</Tweak>
				<Tweak name=""userNotificationListener\Value"">Deny</Tweak>
				<Tweak name=""phoneCall\Value"">Deny</Tweak>
				<Tweak name=""picturesLibrary\Value"">Allow</Tweak>
				<Tweak name=""radios\Value"">Deny</Tweak>
				<Tweak name=""LooselyCoupled\Value"">Deny</Tweak>
				<Tweak name=""userDataTasks\Value"">Deny</Tweak>
				<Tweak name=""userAccountInformation\Value"">Allow</Tweak>
				<Tweak name=""videosLibrary\Value"">Allow</Tweak>
				<Tweak name=""Client\OptInOrOutPreference"">0</Tweak>
				<Tweak name=""System\AllowExperimentation"">0</Tweak>
				<Tweak name=""System\AllowLocation"">0</Tweak>
				<Tweak name=""DataCollection\AllowTelemetry"">4</Tweak>
				<Tweak name=""1.7\EnableAutocorrection"">0</Tweak>
				<Tweak name=""CloudContent\DisableWindowsConsumerFeatures"">1</Tweak>
				<Tweak name=""ContentDeliveryManager\SilentInstalledAppsEnabled"">0</Tweak>
				<Tweak name=""System\AllowClipboardHistory"">1</Tweak>
				<Tweak name=""CloudContent\DisableCloudOptimizedContent"">1</Tweak>
				<Tweak name=""AppCompat\DisableInventory"">1</Tweak>
				<Tweak name=""TrainedDataStore\HarvestContacts"">0</Tweak>
				<Tweak name=""InputPersonalization\RestrictImplicitTextCollection"">1</Tweak>
				<Tweak name=""InputPersonalization\RestrictImplicitInkCollection"">1</Tweak>
				<Tweak name=""System\DontDisplayLastUserName"">0</Tweak>
				<Tweak name=""System\DontDisplayLockedUserId"">1</Tweak>
				<Tweak name=""Explorer\DisableSearchBoxSuggestions"">1</Tweak>
				<Tweak name=""Rules\NumberOfSIUFInPeriod"">0</Tweak>
				<Tweak name=""1.7\EnableSpellchecking"">0</Tweak>
				<Tweak name=""SmartGlass\UserAuthPolicy"">0</Tweak>
				<Tweak name=""SmartGlass\BluetoothPolicy"">0</Tweak>
				<Tweak name=""BackgroundAccessApplications\GlobalUserDisabled"">1</Tweak>
				<Tweak name=""AdvertisingInfo\Enabled"">0</Tweak>
				<Tweak name=""Privacy\TailoredExperiencesWithDiagnosticDataEnabled"">0</Tweak>
				<Tweak name=""AppSettings\Skype-UserConsentAccepted"">0</Tweak>
				<Tweak name=""User Profile\HttpAcceptLanguageOptOut"">1</Tweak>
				<Tweak name=""System\EnableActivityFeed"">0</Tweak>
				<Tweak name=""Advanced\Start_TrackProgs"">0</Tweak>
				<Tweak name=""Advanced\Start_TrackDocs"">0</Tweak>
				<Tweak name=""ContentDeliveryManager\SystemPaneSuggestionsEnabled"">0</Tweak>
				<Tweak name=""InputPersonalization\AllowInputPersonalization"">0</Tweak>
				<Tweak name=""Settings\AcceptedPrivacyPolicy"">0</Tweak>
				<Tweak name=""ContentDeliveryManager\PreInstalledAppsEnabled"">0</Tweak>
				<Tweak name=""ContentDeliveryManager\OemPreInstalledAppsEnabled"">0</Tweak>
				<Tweak name=""AppCompat\DisablePCA"">1</Tweak>
				<Tweak name=""Windows Search\AllowCloudSearch"">0</Tweak>
				<Tweak name=""SystemIndex\EnableFindMyFiles"">1</Tweak>
				<Tweak name=""Search\BingSearchEnabled"">0</Tweak>
				<Tweak name=""SearchSettings\IsDeviceSearchHistoryEnabled"">0</Tweak>
				<Tweak name=""TIPC\Enabled"">0</Tweak>
				<Tweak name=""System\EnableCdp"">0</Tweak>
				<Tweak name=""Shell\BagMRU Size"">1</Tweak>
				<Tweak name=""Explorer\ShowFrequent"">0</Tweak>
				<Tweak name=""ContentDeliveryManager\SubscribedContent-338393Enabled"">0</Tweak>
				<Tweak name=""ContentDeliveryManager\SubscribedContent-310093Enabled"">0</Tweak>
				<Tweak name=""Explorer\ShowRecent"">0</Tweak>
				<Tweak name=""UserProfileEngagement\ScoobeSystemSettingEnabled"">0</Tweak>
				<Tweak name=""AppHost\EnableWebContentEvaluation"">0</Tweak>
				<Tweak name=""Settings\InsightsEnabled"">0</Tweak>
				<Tweak name=""FlipAhead\FPEnabled"">0</Tweak>
				<Tweak name=""MicrosoftEdge\PhishingFilter\Enabledv9"">0</Tweak>
				<Tweak name=""Internet Explorer\PhishingFilter\Enabledv9"">0</Tweak>
				<Tweak name=""Explorer\SmartScreenEnabled"">Off</Tweak>
				<Tweak name=""CloudContent\DisableWindowsSpotlightFeatures"">1</Tweak>
			</TweakGroup>
			<TweakGroup name=""StartTweaks"">
				<Tweak name=""Start\HideAppList"">0</Tweak>
				<Tweak name=""Start\HideFrequentlyUsedApps"">1</Tweak>
				<Tweak name=""Explorer\HideRecentlyAddedApps"">1</Tweak>
				<Tweak name=""Start\AllowPinnedFolderDocuments"">0</Tweak>
				<Tweak name=""Start\AllowPinnedFolderDownloads"">0</Tweak>
				<Tweak name=""Start\AllowPinnedFolderFileExplorer"">0</Tweak>
				<Tweak name=""Start\AllowPinnedFolderHomeGroup"">0</Tweak>
				<Tweak name=""Start\AllowPinnedFolderMusic"">0</Tweak>
				<Tweak name=""Start\AllowPinnedFolderNetwork"">0</Tweak>
				<Tweak name=""Start\AllowPinnedFolderPersonalFolder"">0</Tweak>
				<Tweak name=""Start\AllowPinnedFolderPictures"">0</Tweak>
				<Tweak name=""Start\AllowPinnedFolderSettings"">1</Tweak>
				<Tweak name=""Start\AllowPinnedFolderVideos"">0</Tweak>
				<Tweak name=""Start\HideHibernate"">1</Tweak>
				<Tweak name=""Start\HideSleep"">1</Tweak>
				<Tweak name=""Explorer\ShowOrHideMostUsedApps"">0</Tweak>
				<Tweak name=""Advanced\Start_IrisRecommendations"">0</Tweak>
				<Tweak name=""Start\HideSwitchAccount"">1</Tweak>
			</TweakGroup>
			<TweakGroup name=""System"">
				<Tweak name=""Windows\DisableATMFD"">1</Tweak>
				<Tweak name=""Activation\Manual"">1</Tweak>
				<Tweak name=""Appx\AllowAutomaticAppArchiving"">0</Tweak>
				<Tweak name=""Winlogon\RestartApps"">0</Tweak>
				<Tweak name=""WindowsUpdate\AllowTemporaryEnterpriseFeatureControl"">1</Tweak>
				<Tweak name=""GameConfigStore\GameDVR_FSEBehavior"">0</Tweak>
				<Tweak name=""kernel\GlobalTimerResolutionRequests"">1</Tweak>
				<Tweak name=""GraphicsDrivers\HwSchMode"">2</Tweak>
				<Tweak name=""System\EnableLinkedConnections"">1</Tweak>
				<Tweak name=""OOBE\BypassNRO"">1</Tweak>
				<Tweak name=""System\NoConnectedUser"">0</Tweak>
				<Tweak name=""3\1806"">0</Tweak>
				<Tweak name=""Terminal Server\fDenyTSConnections"">0</Tweak>
				<Tweak name=""RDP-Tcp\UserAuthentication"">0</Tweak>
				<Tweak name=""Device\DevicePasswordLessBuildVersion"">0</Tweak>
				<Tweak name=""ReserveManager\ShippedWithReserves"">1</Tweak>
				<Tweak name=""LabConfig\BypassRAMCheck"">1</Tweak>
				<Tweak name=""LabConfig\BypassTPMCheck"">1</Tweak>
				<Tweak name=""StoragePolicy\01"">0</Tweak>
				<Tweak name=""StoragePolicy\512"">0</Tweak>
				<Tweak name=""StoragePolicy\256"">14</Tweak>
				<Tweak name=""StoragePolicy\04"">1</Tweak>
				<Tweak name=""StoragePolicy\2048"">1</Tweak>
				<Tweak name=""System\DisableAutomaticRestartSignOn"">1</Tweak>
				<Tweak name="".NETFramework\OnlyUseLatestCLR"">0</Tweak>
				<Tweak name=""UserGpuPreferences\DirectXUserGlobalSettings"">VRROptimizeEnable=0</Tweak>
				<Tweak name=""System\VerboseStatus"">1</Tweak>
			</TweakGroup>
			<TweakGroup name=""WindowsUpdateTasks"">
				<Tweak name=""DevHomeUpdate\DevHomeUpdate"">0</Tweak>
				<Tweak name=""EdgeUpdate\EdgeUpdate"">0</Tweak>
				<Tweak name=""IA\IA"">0</Tweak>
				<Tweak name=""LXP\LXP"">0</Tweak>
				<Tweak name=""OutlookUpdate\OutlookUpdate"">0</Tweak>
				<Tweak name=""TFLUpdate\TFLUpdate"">0</Tweak>
			</TweakGroup>
			<TweakGroup name=""UAC"">
				<Tweak name=""System\EnableLUA"">0</Tweak>
				<Tweak name=""System\FilterAdministratorToken"">0</Tweak>
				<Tweak name=""System\PromptOnSecureDesktop"">0</Tweak>
				<Tweak name=""System\ConsentPromptBehaviorAdmin"">0</Tweak>
				<Tweak name=""System\ConsentPromptBehaviorUser"">0</Tweak>
			</TweakGroup>
			<TweakGroup name=""WindowsDefender"">
				<Tweak name=""State\AccountProtection_MicrosoftAccount_Disconnected"">0</Tweak>
				<Tweak name=""Notifications\DisableNotifications"">1</Tweak>
				<Tweak name=""Notifications\DisableEnhancedNotifications"">1</Tweak>
				<Tweak name=""Policy\VerifiedAndReputablePolicyState"">0</Tweak>
				<Tweak name=""Features\TamperProtection"">0</Tweak>
				<Tweak name=""Windows Defender\DisableAntiSpyware"">1</Tweak>
			</TweakGroup>
			<TweakGroup name=""WindowsUpdate"">
				<Tweak name=""DriverSearching\SearchOrderConfig"">0</Tweak>
				<Tweak name=""Preferences\ModelDownloadAllowed"">0</Tweak>
				<Tweak name=""DeliveryOptimization\DODownloadMode"">0</Tweak>
				<Tweak name=""Settings\AllowAutoWindowsUpdateDownloadOverMeteredNetwork"">1</Tweak>
				<Tweak name=""Settings\IsContinuousInnovationOptedIn"">0</Tweak>
				<Tweak name=""7971f918-a847-4430-9279-4a52d1efe18d\RegisterWithAU"">1</Tweak>
				<Tweak name=""WindowsUpdate\ExcludeWUDriversInQualityUpdate"">1</Tweak>
				<Tweak name=""MRT\DontOfferThroughWUAU"">0</Tweak>
				<Tweak name=""Settings\HideMCTLink"">1</Tweak>
				<Tweak name=""Settings\IsExpedited"">0</Tweak>
				<Tweak name=""Settings\RestartNotificationsAllowed2"">0</Tweak>
				<Tweak name=""WindowsStore\AutoDownload"">4</Tweak>
				<Tweak name=""AU\AUOptions"">2</Tweak>
			</TweakGroup>
		</Settings>
	</Tweaks>
</Preset>"
F2qLZQ2z,2024-04-13_stats.json,rdp_snitch,JSON,Saturday 13th of April 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""36.137.3.251"": 1,
    ""74.207.245.124"": 1,
    ""103.245.237.31"": 1,
    ""206.168.34.52"": 1,
    ""36.91.222.100"": 3,
    ""62.204.41.225"": 2,
    ""116.140.196.215"": 2,
    ""128.199.225.179"": 720,
    ""58.218.204.183"": 3,
    ""87.251.75.64"": 1,
    ""205.210.31.40"": 3,
    ""212.41.9.9"": 6,
    ""45.227.254.54"": 4,
    ""185.170.144.3"": 1,
    ""80.66.76.92"": 3,
    ""152.32.228.20"": 1,
    ""196.190.117.7"": 2,
    ""198.235.24.87"": 3,
    ""91.238.181.16"": 1,
    ""87.251.75.145"": 1,
    ""173.255.206.80"": 4,
    ""45.33.43.23"": 1,
    ""94.232.46.132"": 1,
    ""64.225.18.13"": 20,
    ""93.177.66.5"": 10,
    ""45.175.173.33"": 3,
    ""205.210.31.97"": 3,
    ""190.186.122.2"": 1,
    ""185.11.61.106"": 1,
    ""112.4.139.162"": 1,
    ""45.227.254.26"": 2,
    ""159.65.44.224"": 2,
    ""194.165.16.78"": 2,
    ""193.53.245.249"": 3,
    ""167.94.145.60"": 1,
    ""198.235.24.232"": 3
  },
  ""asn"": {
    ""AS9808"": 1,
    ""AS63949"": 6,
    ""AS150867"": 1,
    ""AS398324"": 1,
    ""AS7713"": 3,
    ""AS59425"": 2,
    ""AS4837"": 2,
    ""AS14061"": 742,
    ""AS4134"": 3,
    ""AS208091"": 5,
    ""AS396982"": 12,
    ""AS49505"": 6,
    ""AS267784"": 6,
    ""AS197414"": 1,
    ""AS135377"": 1,
    ""AS24757"": 2,
    ""AS49434"": 1,
    ""AS212482"": 1,
    ""AS197540"": 10,
    ""AS268902"": 3,
    ""AS25620"": 1,
    ""AS57523"": 1,
    ""AS56046"": 1,
    ""AS48721"": 2,
    ""AS209711"": 3,
    ""AS398705"": 1
  },
  ""isp"": {
    ""China Mobile"": 1,
    ""Akamai Technologies, Inc."": 6,
    ""LP TECHNOLOGY ELECTRONIC COMMERCE COMPANY LIMITED"": 1,
    ""Censys, Inc."": 2,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Horizon LLC"": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""DigitalOcean, LLC"": 742,
    ""Chinanet"": 3,
    ""Xhost Internet Solutions LP"": 7,
    ""Google LLC"": 12,
    ""OOO \""Network of data-centers \""Selectel\"""": 6,
    ""Flyservers S.A."": 8,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Ethiotelecom"": 2,
    ""Datacenter location PAR1 France"": 1,
    ""netcup GmbH"": 10,
    ""DANIEL CARVALHO DE OLIVEIRA SILVA \u00ad ME"": 3,
    ""Cotas Ltda."": 1,
    ""Chang Way Technologies Co. Limited"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""MUV Bilisim ve Telekomunikasyon Hizmetleri Ltd. Sti"": 3
  },
  ""org"": {
    ""China Mobile Communications Corporation"": 2,
    ""Linode"": 6,
    ""LP Technology Electronic Commerce Company Limited"": 1,
    ""Censys Inc"": 1,
    ""Telekomunikasi Indonesia"": 3,
    ""Horizon LLC"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""DigitalOcean, LLC"": 740,
    ""Chinanet JS"": 3,
    ""Xhost Internet Solutions"": 5,
    ""Palo Alto Networks, Inc"": 12,
    ""Unknown"": 8,
    ""UAB Host Baltic"": 6,
    ""Xhostis"": 1,
    ""Ucloud Information Technology"": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 1,
    ""Dmitriy Panchenko"": 1,
    ""netcup GmbH"": 10,
    ""DANIEL CARVALHO DE OLIVEIRA SILVA \u00ad ME"": 3,
    ""Adsl-ip-dinamica - Plan"": 1,
    ""Starcrecium Limited"": 1,
    ""Digital Ocean"": 2,
    ""Flyservers S.A"": 2,
    ""MUVHost - Vodafone Tuzla"": 3,
    ""Censys, Inc."": 1
  },
  ""regionName"": {
    ""Guangdong"": 1,
    ""California"": 14,
    ""Ho Chi Minh"": 1,
    ""Illinois"": 1,
    ""Jakarta"": 3,
    ""Moscow"": 9,
    ""Beijing"": 2,
    ""Central Singapore"": 720,
    ""Jiangsu"": 4,
    ""North Holland"": 6,
    ""Vilnius"": 6,
    ""Addis Ababa"": 2,
    ""\u00cele-de-France"": 1,
    ""Texas"": 4,
    ""Perm Krai"": 1,
    ""New Jersey"": 22,
    ""Bavaria"": 10,
    ""Minas Gerais"": 3,
    ""Santa Cruz Department"": 1,
    ""Chechnya"": 1,
    ""Kaunas"": 2,
    ""Istanbul"": 3,
    ""Hesse"": 1
  },
  ""country"": {
    ""China"": 7,
    ""United States"": 41,
    ""Vietnam"": 1,
    ""Indonesia"": 3,
    ""Russia"": 11,
    ""Singapore"": 720,
    ""The Netherlands"": 6,
    ""Lithuania"": 8,
    ""Ethiopia"": 2,
    ""France"": 1,
    ""Germany"": 11,
    ""Brazil"": 3,
    ""Bolivia"": 1,
    ""Turkey"": 3
  },
  ""account"": {
    ""hello"": 765,
    ""(empty)"": 6,
    ""Test"": 15,
    ""Administr"": 8,
    ""TgnJvWeKh"": 1,
    ""cvjoMx"": 1,
    ""zwuPkb"": 1,
    ""Domain"": 6,
    ""Administrator"": 1,
    ""TYUCzidWn"": 1,
    ""YFbnZs"": 1,
    ""pCAnjC"": 1,
    ""sfqbwom7"": 4,
    ""beio"": 1,
    ""qAGQsvwie"": 1,
    ""PyJLWd"": 1,
    ""MeOnpY"": 1,
    ""JZRcVmAMX"": 1,
    ""MKTHDD"": 1,
    ""cYQNHj"": 1
  },
  ""keyboard"": {
    ""Unknown"": 818
  },
  ""client_build"": {
    ""Unknown"": 818
  },
  ""client_name"": {
    ""Unknown"": 818
  },
  ""ip_type"": {
    ""mobile"": 2,
    ""hosting"": 756,
    ""Unknown"": 36,
    ""proxy"": 2,
    ""hosting & proxy"": 22
  }
}"
eGyRg2n4,MARTYDIG-V2,martypete,Bash,Saturday 13th of April 2024 06:03:14 PM CDT,"#   __  ______   ___  ________  _____  _________   _   _____  #
#  /  |/  / _ | / _ \/_  __/\ \/ / _ \/  _/ ___/__| | / /_  | #
# / /|_/ / __ |/ , _/ / /    \  / // // // (_ /___/ |/ / __/  #
#/_/  /_/_/ |_/_/|_| /_/     /_/____/___/\___/    |___/____/  #                           #
########## MULTI-PURPOSE EMAIL+DNS LOOKUP SCRIPT ##############

# Execute with './mdig-v2 example.com'

###################################################################################################
# MartyDig is a comprehensive tool for querying various DNS and WHOIS records related to a domain.#
###################################################################################################
#
# -Whois Domain Info: Retrieves WHOIS information for the specified domain (Registrar info, nameservers, organization details)
# ---------------------
# -NS Records: Fetches and displays the NS (Nameserver) records for the domain.
# ---------------------
# -MX Records: Retrieves MX (Mail Exchange) records for the domain, showing both the mail server hostname and associated IP address.
# -Whois for Mail IP Address: Retrieves ARIN information for the IP address of the mail server.
# ---------------------
# -Propagated A Record: Retrieves and displays the A record (IPv4 address) for the domain and associated PTR record.
# -Whois for A Record IP Address: Retrieves ARIN information for the IP address of the domain.
# ---------------------
# -SPF Records: Retrieves and displays SPF (Sender Policy Framework) records for the domain.
# ---------------------
# -DMARC Records: Retrieves and displays DMARC records for the domain.
# ---------------------
# -Google and Microsoft DKIM Records: Retrieves and displays DKIM records for Google and Microsoft services.
# -Mailgun DKIM Records: Retrieves and displays DKIM records for Mailgun.
# -SendGrid DKIM Records: Retrieves and displays DKIM records for SendGrid.
# -Mailchimp DKIM Records: Retrieves and displays DKIM records for Mailchimp.
# ---------------------
# -Mail.Domain.com A Record: Retrieves and displays the A record for the mail subdomain (mail.domain.com) and associated PTR record.
# -Whois for Mail.Domain.com IP Address: Retrieves ARIN information for the IP address of the mail subdomain.
# ---------------------
# -Autodiscover Records: Retrieves and displays autodiscover records for the domain.
# -Whois for Autodiscover IP Address: Retrieves ARIN information for the IP address of the autodiscover subdomain.
###################################################################################################


COLOR='\033[1;33m'
BOLD='\033[1;37m'
NC='\033[0m' # No Color
RED='\033[1;31m'
BLUE='\033[1;34m'
YELLOW='\033[1;33m'
GREY='\033[1;30m'
GREEN='\033[1;32m'
CYAN='\033[1;36m'
PURPLE='\033[1;35m'

#============== TOP-LEVEL DOMAIN A-RECORD ===========================

IP=$( dig $1 +short | grep [0-9][0-9] | sort -nr | head -n 1 )

PTR=$( dig -x $IP +short | grep -v ""in-addr"" | grep -v ""Truncated"" | head -n 1)

#=================== MAIL.DOMAIN.COM SUBDOMAIN ========================

MAILSUBIP=$( dig mail.$1 +short | grep [0-9][0-9] | sort -nr | head -n 1 ) 

MAILSUBPTR=$( dig -x $MAILSUBIP +short | grep -Ev 'in-addr|Truncated' | head -n 1) 

#===============  DMARC RECORD  ==========================

DMARCRECORD=$(dig _dmarc.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort)
SPFRECORD=$(dig $1 txt +short | grep -E -v '\.root-servers\.net|Truncated' | grep 'v=spf1')

#===============  MX RECORD HOSTNAME ================================

MAILMX=$( dig mx $1 +short | grep -v "".root-servers.net"" | grep -v ""CNAME"" | sort -n | head -n 1 )

MAILMXLONG=$( dig mx $1 +short | grep -v "".root-servers.net"" | sort -nr )

#================  MX RECORD IP ADDRESS INFO  ==================== 

MAILIP=$( dig $MAILMX +short | grep -oE ""\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"" | head -n 1 )

MAILPTR=$( dig -x $MAILIP +short | grep -v ""in-addr"" | head -n 1 )

#==============  AUTODISCOVER  =============================

ADRECORD=$( dig autodiscover.$1 +nostats +noquestion +nocomments | grep IN | grep -v SOA | grep -v ""RedHat"" | grep -v "".root-servers.net"" | grep -v ""autodiscover.geo.outlook.com"" | grep -v ""autodiscover.outlook.com.g.outlook.com"" | grep -v ""autodiscover.geo.outlook.com"" | grep -v ""autodiscover-namcentral"" | head -n 6 )

ADIP=$( dig autodiscover.$1 +short | grep -oE ""\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"" | head -n 1 )

#==============  GOOGLE + MICROSOFT DKIM KEYS  ========================== 

GOOGLEDKIM=$( dig google._domainkey.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort)

MSDKIM1=$( dig selector1._domainkey.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort)

MSDKIM2=$(dig selector2._domainkey.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort)

#============== MAILGUN DKIMS ========================== 

MAILGUNDKIMSMTP=$( dig smtp._domainkey.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort -r)

MAILGUNDKIMKRS=$( dig krs._domainkey.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort -r)

MAILGUNDKIMMAILO=$( dig mailo._domainkey.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort -r)

#============== SENDGRID DKIMS ========================== 

SENDGRIDDKIMS1=$( dig s1._domainkey.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort -r)

SENDGRIDDKIMS2=$( dig s2._domainkey.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort -r)

#============== MAILCHIMP DKIMS ========================== 
	
MAILCHIMPDKIMK2=$( dig k2._domainkey.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort -r)

MAILCHIMPDKIMK3=$( dig k3._domainkey.$1 txt +nostats +noquestion +nocomments | grep -E 'IN.*(CNAME|TXT)' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net' | sort -r)

#======================================== 

clear
echo -e ""${BLUE}|${BOLD}    __  ______    ____  ________  ______  __________    _    _____ ${BLUE}|${NC}""
echo -e ""${BLUE}|${BOLD}   /  |/  /   |  / __ \/_  __/\ \/ / __ \/  _/ ____/   | |  / /__ |${BLUE}|${NC}""
echo -e ""${BLUE}|${BOLD}  / /|_/ / /| | / /_/ / / /    \  / / / // // / _______| | / /__/ /${BLUE}|${NC}""
echo -e ""${BLUE}|${BOLD} / /  / / ___ |/ _, _/ / /     / / /_/ // // /_/ /_____/ |/ // __/ ${BLUE}|${NC}""
echo -e ""${BLUE}|${BOLD}/_/  /_/_/  |_/_/ |_| /_/     /_/_____/___/\____/      |___//____/ ${BLUE}|${NC}""
echo -e ""${BLUE} ___________________________________________________________________${NC}""   
echo -e ""${BLUE}[#] whois $1 (REGISTRAR INFO) ${NC}""

#=================================================================
#===============  WHOIS DOMAIN  ===================================
#==================================================================

echo -e """"

whois ""$1"" |
egrep -i ""(Server|Nameserver:|Registrar:|Registrar URL|Organization:|Admin|Comment:|Email|nameservers:|Hold|Expiration|Expiry|Reseller|URL:|Transfer|Name:|No match|NS[1-4]|NOT FOUND|abuse-mailbox:|Name servers:|NET)"" |
grep -vE ""(created|updated|The data in|information purposes only|makes this information available|that apply to|prior written consent|BRST|This server accepts|reserves the right|clientTransferProhibited|modify existing registrations|support questions|Redirected|Querying|\[whois\.|follow the instructions|Unconditional Guarantee|reserves the right|Billing|Registrar Abuse Contact Email|dest IP \(your IP\)|Intensity/frequency|Without these|NetName:|Domain Name:|Tech|NOCEmail|Administrative Contact Postal Code|Administrative Contact Phone Number|Administrative Contact Facsimile Number|Administrative Contact ID|Administrative Contact Address|Administrative Contact City|Administrative Contact Country|Administrative Contact State/Province|Administrative Contact Country Code|Admin Phone Ext|Admin Fax|Domain ID:|Admin Fax Ext|Admin Phone|Admin Country|Invalid option:|Admin Postal Code|Admin State/Province|Admin City|Admin Street|Admin ID|Registry Admin ID|has collected this|Last Transferred Date:|Administrative Application Purpose:|Administrative Nexus Category:|Parent|NetHandle:|Ref:|StateProv:|WHOIS Server:|Please register your domains|network:In-Addr-Server;|network:Network-Name:|Comments to|network:Tech-Contact;|OrgNOCName:|global Web hosting|DreamHost is|websites and apps hosted|Dedicated Server Hosting|Registrar Registration Expiration Date|high-value domains|DreamCompute|contains ONLY .COM|for more information|Connection refused|Withheld for Privacy|Redacted for Privacy)"" |
awk '!x[$0]++' |
sed -e 's/^[ \t]*//'

#========================================================================
#=========================== NS RECORDS ===============================
#=======================================================================

echo -e ""${GREEN}_______________________________________________________________${NC}""
echo -e ""${GREEN}[#] dig $1 ns (PROPAGATED NS RECORD) ${NC}""
echo -e """"

dig $1 ns +nostats +noquestion +nocomments | grep -E 'IN.*NS' | grep -Ev 'SOA|RedHat|AAAA|.root-servers.net'

#======================================================================
#=========================== MX RECORDS ===============================
#=======================================================================

echo -e ""${RED}_______________________________________________________________${NC}""
echo -e ""${RED}[#] dig $1 mx (MX RECORD) ${NC}""
echo -e """"

if [[ ! -z $MAILMX  ]] #Checks to see if there is an MX record propagated
	then
		printf ""$MAILMXLONG""
	else
		:
	fi
if [[ ! -z $MAILIP  ]] #Checks to see what IP the MX record resolves to, if any.
	then
		echo -e "" ${RED}=>${NC} $MAILIP ${RED}=>${NC} $MAILPTR""
	else
		echo -e """"
	fi
	
#======================================================================
#===============  WHOIS mail IP ADDRESS  ===================================
#======================================================================

echo -e """"
echo -e ""${RED}[#] whois ${MAILIP} (MX RECORD IP INFO) ${NC}""
echo -e """"

if [[ ! -z $MAILIP  ]] #Checks to SEE THE IP INFO FOR THE TOP MX RECORD
	then
		whois ""$MAILIP"" |
		grep -Ei ""(Server|Registrar:|Registrar URL|OrgTechEmaiL|Organization:|Network-Name|Org-Name|OrgName|NetName|Status:|Registrant Name|org-name:|Registrant Org|Email|Registrant Street|Registrant City|Registrant Country|Registrant Phone:|Expiration|Expiry|Reseller|Organization Name|\(|netname:|descr:|remarks:|person:|abuse-mailbox:|country|network:Org-name:|OrgAbuseEmail:|network:Updated-By|network:Organization|network:Tech-Contact|network:Admin-Contact|e-mail:|StateProv:|City:|ns[1-2])"" |
		grep -vE ""(Parent|served|RTechEmail|Invalid option:|RNOCEmail|\(BRST|This server accepts|RAbuseEmail|%rwhois|dest IP \(your IP\)|Intensity/frequency|Without these|NetName:|NOCEmail|Organization:|remarks:|OrgTechEmail:|contact details|network:In-Addr-Server;|City:|StateProv:|network:Network-Name:|Comments to|network:Tech-Contact;|OrgNOCName:|Country:|connect: Connection refused|Connection refused)"" |
		sort -u |
		sed -e 's/^[ \t]*//'
	else
		:
	fi

#=================================================================
#===============  PROPAGATED A RECORD  ============================
#==================================================================

echo -e ""${COLOR}_______________________________________________________________${NC}""
echo -e ""${COLOR}[#] dig $1 (WEBSITE/TLD) ${NC}""
echo -e """"

if [[ ! -z $IP  ]] #Checks to see if there is an A record propagated.
	then
		printf ""$IP""
	else
		:
	fi
if [[ ! -z $PTR  ]] #Checks to see if the A record IP has a PTR record.
	then
		echo -e "" ${COLOR}=>${NC} $PTR""
	else
		echo -e """"
	fi

#======================================================================
#===============  WHOIS IP ADDRESS  ===================================
#======================================================================

echo -e """"
echo -e ""${COLOR}[#] whois ${IP} (A RECORD IP INFO) ${NC}""
echo -e """"

if [[ ! -z $IP  ]] #Checks to see if there is an A record propagated for the given domain.
	then
		whois ""$IP"" |
		grep -Ei ""(Server|Registrar:|Registrar URL|OrgTechEmaiL|Organization:|Network-Name|Org-Name|OrgName|NetName|Status:|Registrant Name|org-name:|Registrant Org|Email|Registrant Street|Registrant City|Registrant Country|Registrant Phone:|Expiration|Expiry|Reseller|Organization Name|\(|netname:|descr:|remarks:|person:|abuse-mailbox:|country|Country|network:Org-name:|OrgAbuseEmail:|network:Updated-By|network:Organization|network:Tech-Contact|network:Admin-Contact|e-mail:|StateProv:|City:|ns[1-2])"" |
		grep -vE ""(Parent|served|RTechEmail|Invalid option:|RNOCEmail|\(BRST|This server accepts|RAbuseEmail|dest IP \(your IP\)|Intensity/frequency|Without these|NetName:|NOCEmail|Organization:|remarks:|StateProv:|City:|OrgTechEmail:|contact details|network:In-Addr-Server;|network:Network-Name:|Comments to|%rwhois|network:Tech-Contact;|OrgNOCName:|Country:|connect: Connection refused|Comment:)"" |
		sort -u |
		sed -e 's/^[ \t]*//'
	else
		:
	fi
dig -x mail.$1 | grep ""PTR"" | grep ""in-addr"" | grep -v "";"" | grep -v ""Invalid option:""

	
#======================================================================
#===============  SPF records  ===================================
#======================================================================

echo -e ""${PURPLE}_______________________________________________________________${NC}""
echo -e ""${PURPLE}[#] dig $1 txt (SPF RECORD) ${NC}""
echo -e """"

if [[ ! -z $SPFRECORD  ]] #Checks to see if there is an SPF record propagated.
	then
		echo -e ""$SPFRECORD""
	else
		:
	fi

#=================================================================
#========  PROPAGATED DMARC + GOOGLE DKIM RECORDs  =================
#==================================================================

echo -e ""${GREY}_______________________________________________________________${NC}""
echo -e ""${GREY}[#] dig _.dmarc.$1 (DMARC RECORD) ${NC}""
echo -e """"

if [[ ! -z $DMARCRECORD  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$DMARCRECORD""
	else
		:
	fi

echo -e ""${GREEN}_______________________________________________________________${NC}""
echo -e ""${GREEN}[#] (GOOGLE / MS365 DKIMS) ${NC}""
echo -e """"

if [[ ! -z $GOOGLEDKIM  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$GOOGLEDKIM""
	else
		:
	fi

if [[ ! -z $MSDKIM1  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$MSDKIM1""
		echo -e """"
	else
		:
	fi

if [[ ! -z $MSDKIM2  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$MSDKIM2""
	else
		:
	fi
	
echo -e ""${RED}_______________________________________________________________${NC}""
echo -e ""${RED}[#] (MAILGUN DKIMS) ${NC}""
echo -e """"

if [[ ! -z $MAILGUNDKIMKRS  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$MAILGUNDKIMKRS""
		echo -e """"
	else
		:
	fi

if [[ ! -z $MAILGUNDKIMMAILO  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$MAILGUNDKIMMAILO""
		echo -e """"
	else
		:
	fi
	
if [[ ! -z $MAILGUNDKIMSMTP  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$MAILGUNDKIMSMTP""
	else
		:
	fi

echo -e ""${BLUE}_______________________________________________________________${NC}""
echo -e ""${BLUE}[#] (SENDGRID DKIMS) ${NC}""
echo -e """"

if [[ ! -z $SENDGRIDDKIMS1  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$SENDGRIDDKIMS1""
		echo -e """"
	else
		:
	fi

if [[ ! -z $SENDGRIDDKIMS2  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$SENDGRIDDKIMS2""
	else
		:
	fi

echo -e ""${COLOR}_______________________________________________________________${NC}""
echo -e ""${COLOR}[#] (MAILCHIMP DKIMS) ${NC}""
echo -e """"

if [[ ! -z $MAILCHIMPDKIMK2  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$MAILCHIMPDKIMK2""
		echo -e """"
	else
		:
	fi
	
if [[ ! -z $MAILCHIMPDKIMK3  ]] #Checks to see if there is a record propagated.
	then
		echo -e ""$MAILCHIMPDKIMK3""
	else
		:
	fi
echo -e ""${COLOR}_______________________________________________________________${NC}""

#=================================================================
#===============  PROPAGATED MAIL.DOMAIN.COM A RECORD  ===========
#=================================================================

# echo -e ""${GREY}_______________________________________________________________${NC}""
# echo -e """"
# echo -e ""${GREY}[#] dig ${RED}mail.$1 ${GREY}(mail.$1 A RECORD) ${NC}""
# echo -e """"
# if [[ ! -z $MAILSUBIP  ]] #Checks to see if there is an A record propagated for mail.domain.com.
	# then
		# printf ""$MAILSUBIP""
	# else
		# :
	# fi
# if [[ ! -z $MAILSUBPTR  ]] #Checks to see if the A record IP for mail.domain.com has a PTR record.
	# then
		# echo -e "" ${GREY}=>${NC} $MAILSUBPTR""
	# else
		# echo -e """"
	# fi
	
# ======================================================================
# ===============  WHOIS MAIL.DOMAIN.COM IP ADDRESS  ===================
# ======================================================================

# echo -e """"
# echo -e ""${GREY}[#] whois ${RED}${MAILSUBIP} ${GREY}(A RECORD IP INFO) ${NC}""
# echo -e """"
# if [[ ! -z $MAILSUBIP  ]] #Checks to see if there is an A record propagated for the given domain.
	# then
		# whois ""$MAILSUBIP"" |
		# grep -Ei ""(Server|Registrar:|Registrar URL|OrgTechEmaiL|Organization:|Network-Name|Org-Name|OrgName|NetName|Status:|Registrant Name|org-name:|Registrant Org|Email|Registrant Street|Registrant City|Registrant Country|Registrant Phone:|Expiration|Expiry|Reseller|Organization Name|\(|netname:|descr:|remarks:|person:|abuse-mailbox:|country|Country|network:Org-name:|OrgAbuseEmail:|network:Updated-By|network:Organization|network:Tech-Contact|network:Admin-Contact|e-mail:|StateProv:|City:|ns[1-2])"" |
		# grep -vE ""(Parent|served|RTechEmail|Invalid option:|RNOCEmail|\(BRST|This server accepts|RAbuseEmail|dest IP \(your IP\)|Intensity/frequency|Without these|NetName:|NOCEmail|Organization:|remarks:|StateProv:|City:|OrgTechEmail:|contact details|network:In-Addr-Server;|network:Network-Name:|Comments to|%rwhois|network:Tech-Contact;|OrgNOCName:|Country:|connect: Connection refused|Comment:)"" |
		# sort -u |
		# sed -e 's/^[ \t]*//'
	# else
		# :
	# fi
# dig -x mail.$1 | grep ""PTR"" | grep ""in-addr"" | grep -v "";"" | grep -v ""Invalid option:""

# =================================================================
# ===============  PROPAGATED autodiscover record==================
# =================================================================

# echo -e ""${GREY}_______________________________________________________________${NC}""
# echo -e ""${GREY}[#] dig autodiscover.$1 (AUTODISCOVER RECORD) ${NC}""
# echo -e """"
# if [[ ! -z $ADRECORD  ]] #Checks to see if there is a record propagated.
	# then
		
		# echo -e ""$ADRECORD""
	# else
		# :
	# fi
# echo -e """"

# ======================================================================
# ===============  WHOIS AUTODISCOVER IP ADDRESS  ======================
# ======================================================================

# echo -e ""${GREY}[#] whois ${ADIP} (AUTODISCOVER RECORD IP INFO) ${NC}""
# echo -e """"
# if [[ ! -z $ADIP  ]] #Checks to see if there is an A record propagated for the given autodisover subdomain.
    # then		
		# whois ""$ADIP"" |
		# grep -Ei ""(Server|Registrar:|Registrar URL|OrgTechEmaiL|Organization:|Network-Name|Org-Name|OrgName|NetName|Status:|Registrant Name|org-name:|Registrant Org|Email|Registrant Street|Registrant City|Registrant Country|Registrant Phone:|Expiration|Expiry|Reseller|Organization Name|\(|netname:|descr:|remarks:|person:|abuse-mailbox:|country|Country|network:Org-name:|OrgAbuseEmail:|network:Updated-By|network:Organization|network:Tech-Contact|network:Admin-Contact|e-mail:|StateProv:|City:|ns[1-2])"" |
		# grep -vE ""(Parent|served|RTechEmail|Invalid option:|RNOCEmail|\(BRST|This server accepts|RAbuseEmail|dest IP \(your IP\)|Intensity/frequency|Without these|NetName:|NOCEmail|Organization:|remarks:|City:|OrgTechEmail:|contact details|network:In-Addr-Server;|StateProv:|network:Network-Name:|Comments to|%rwhois|network:Tech-Contact;|OrgNOCName:|Country:|connect: Connection refused|Connection refused|OrgRoutingEmail)"" |
		# sort -u |
		# sed -e 's/^[ \t]*//'

    # else
        # :
    # fi
# echo -e ""${GREY}_______________________________________________________________${NC}"""
r02yJmp2,Mermaid Injection,guitarplayer616,JavaScript,Saturday 13th of April 2024 05:24:47 PM CDT,"// Mermaid injection google chrome console

// run to render below into mermaid graph
let script = document.createElement(""script"");
script.type = 'module';
script.textContent = `import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
mermaid.run();`
document.body.appendChild(script);

// type into <body>
<pre class=""mermaid"">sequenceDiagram
    Mower -&gt;&gt; Lawn: create()
    Lawn -&gt;&gt; Mower: Mower mower
    Mower -&gt;&gt; Grass: cut()
    Mower -&gt;&gt; Scanner: scan()
</pre>"
ymwDB1wd,Untitled,JeffGrigg,Java 5,Saturday 13th of April 2024 05:21:27 PM CDT,"import junit.framework.TestCase;

import java.util.Map;
import java.util.TreeMap;

public class ArrowAntiPatternTest extends TestCase {
    public void test() {
        final var testCases = new TreeMap<Integer, String>() {{
            put(999, ""A"");
            put(100, ""A"");
            put(91, ""A"");
            put(90, ""A"");
            put(89, ""B"");
            put(80, ""B"");
            put(79, ""C"");
            put(70, ""C"");
            put(69, ""D"");
            put(60, ""D"");
            put(59, ""F"");
            put(1, ""F"");
            put(0, ""F"");
            put(-1, ""F"");
            put(-10, ""F"");
            put(-100, ""F"");
        }};
        for (Map.Entry<Integer, String> testCase : testCases.entrySet()) {
            final var score = testCase.getKey();
            assertEquals(""Grade for score <"" + score + "">;"",
                    testCase.getValue(), ArrowAntiPattern.checkGrade(score));
        }
    }
}"
za6EqVR7,Untitled,JeffGrigg,Java 5,Saturday 13th of April 2024 05:21:00 PM CDT,"public class ArrowAntiPattern {

    public static String checkGrade(final int score) {
        if (score >= 90) {
            return ""A"";
        } else if (score >= 80) {
            return ""B"";
        } else if (score >= 70) {
            return ""C"";
        } else if (score >= 60) {
            return ""D"";
        } else {
            return ""F"";
        }
    }
}
"
rw9sqWjJ,korb fake,hacimiks,Lua,Saturday 13th of April 2024 05:12:12 PM CDT,"function Align(Part0,Part1,Position,Angle)
    local AlignPos = Instance.new('AlignPosition', Part1);
    AlignPos.Parent.CanCollide = false;
    AlignPos.ApplyAtCenterOfMass = true;
    AlignPos.MaxForce = 67752;
    AlignPos.MaxVelocity = math.huge/9e110;
    AlignPos.ReactionForceEnabled = false;
    AlignPos.Responsiveness = 200;
    AlignPos.RigidityEnabled = false;
    local AlignOri = Instance.new('AlignOrientation', Part1);
    AlignOri.MaxAngularVelocity = math.huge/9e110;
    AlignOri.MaxTorque = 67752;
    AlignOri.PrimaryAxisOnly = false;
    AlignOri.ReactionTorqueEnabled = false;
    AlignOri.Responsiveness = 200;
    AlignOri.RigidityEnabled = false;
    local AttachmentA=Instance.new('Attachment',Part1);
    local AttachmentB=Instance.new('Attachment',Part0);
    AttachmentA.Name = ""BruhA""
    AttachmentB.Name = ""BruhB""
    AttachmentB.Orientation = Angle
    AttachmentB.Position = Position
    AlignPos.Attachment0 = AttachmentA;
    AlignPos.Attachment1 = AttachmentB;
    AlignOri.Attachment0 = AttachmentA;
    AlignOri.Attachment1 = AttachmentB;
end

User = game:GetService(""Players"").LocalPlayer
Body = User.Character
Soul = Body.Humanoid

FakeLeg = Body.RightLowerLeg:Clone()
FakeLeg = Body.RightUpperLeg:Clone()
FakeLeg.Transparency = 1
Body.RightLowerLeg:Destroy()
Body.RightUpperLeg:Destroy()
FakeLeg.Parent = Body
Body.RightLowerLeg.RightLowerLeg:Destroy()
Body.RightUpperLeg.RightUpperLeg:Destroy()

local Korblox = Body[""Recolor (For Korblox)""]
Korblox.Handle.Massless = true
Korblox.Handle:BreakJoints()

Align(FakeLeg,Korblox.Handle,Vector3.new(0,.25,0),Vector3.new(0,0,0))

game:GetService(""RunService"").Heartbeat:connect(function(t)
    if Korblox:FindFirstChild(""Handle"", true) then
        Korblox.Handle.Velocity = Vector3.new(0, 30,0)
    end;
end)"
TEXpTpip,camforcefield v1,drpepper240,Lua,Saturday 13th of April 2024 04:47:23 PM CDT,"local cam, fp1, fp2
local tryWrap = true
local wl = {""drPepper""}

while tryWrap do
	if not cam then
		local sides = peripheral.getNames()
		for _, side in pairs(sides) do
			if peripheral.getType(side) == ""warpdriveCamera"" then
				cam = peripheral.wrap(side)
				print(""Wrapped warpdriveCamera on "" .. side .. "" side"")
			end
		end
	end

	if not fp1 then
		if peripheral.getType(""top"") == ""warpdriveForceFieldProjector"" then
			fp1 = peripheral.wrap(""top"")
		end
	end

	if not fp2 then
		if peripheral.getType(""bottom"") == ""warpdriveForceFieldProjector"" then
			fp2 = peripheral.wrap(""bottom"")
		end
	end

	if not cam or not fp1 or not fp2 then
		sleep(2)
	else
		tryWrap = false
	end
end

--TODO set params for the peripherals

while true do
	local rCnt = cam.getResultsCount()
	
	local doEnable = rCnt > 0
	if not doEnable then
		fp1.enable(false)
		fp2.enable(false)
	end
	
	for i_r = 0, rCnt-1 do
		local ok, entityType, entityName = cam.getResult(i_r)
		if ok then
			print(textutils.formatTime(os.time(""local"")), entityName)
			for _, name in pairs(wl) do
				if entityName == name then
					doEnable = false
				end
			end
		end
	end
	
	if doEnable then
		fp1.enable(true)
		--fp2.enable(true)
		sleep(5)
	else
		sleep(0.5)
	end
end"
L1xYJ791,C√≥digo integraci√≥n slick.js con divi - Carrusel Slider Vertical,oscarviedma,HTML,Saturday 13th of April 2024 04:19:30 PM CDT,"<link rel=""stylesheet"" type=""text/css"" href=""https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css""/>
<script src=""https://cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js""></script>

<script>
jQuery(document).ready(function($) {
	var $titleCarousel = $('#ov-caracteristicas-carousel .ov-title-carousel');
  var $contentCarousel = $('#ov-caracteristicas-carousel .ov-content-carousel');

  $titleCarousel.slick({
  	vertical: true,
    slidesToShow: 3,
    slidesToScroll: 1,
    arrows: true,
    asNavFor: $contentCarousel,
    focusOnSelect: true,
    centerMode: true,
    centerPadding: '50px',
    autoplay: 1,
		autoplaySpeed: 5000,
    pauseOnHover: 1,	
    prevArrow: '<button type=""button"" class=""slick-prev"">B</button>',
    nextArrow: '<button type=""button"" class=""slick-next"">C</button>'
  });

  $contentCarousel.slick({
    slidesToShow: 1,
    slidesToScroll: 1,
    arrows: false,
    fade: false,
    asNavFor: $titleCarousel,
  });
});
</script>
"
mtETPxwV,cool egg game!,CaramelDogey,Lua,Saturday 13th of April 2024 03:56:22 PM CDT,"local TweenService = game:GetService(""TweenService"")
local SoundService = game:GetService(""SoundService"")
local RunService = game:GetService(""RunService"")
local Debris = game:GetService(""Debris"")
local StarterGui = game:GetService(""StarterGui"")
StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.All, false)
local Lighting = game:GetService(""Lighting"")

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildWhichIsA(""Humanoid"")
local camera = game.Workspace.CurrentCamera

local props = script:GetChildren()
local gerclone = script[""small ger""]:Clone()
local eggs = game.ReplicatedStorage.Eggs:GetChildren()

for i, v in pairs(props) do
	v.Parent = game.ReplicatedStorage
end

local shaking = false
local explode = false

RunService.RenderStepped:Connect(function(delta)
	if not shaking then
		return
	end
	local factor = (delta*10)*(time()*math.pi)
	camera.CFrame = camera.CFrame:Lerp(camera.CFrame * CFrame.Angles(
		math.rad(math.random(-factor, factor)),
		math.rad(math.random(-factor, factor)),
		math.rad(math.random(-factor, factor))
		), delta*4)
end)

local function spawnger()
	task.spawn(function()
		local smallger = gerclone:Clone()
		smallger.PrimaryPart.Anchored = true
		smallger.Parent = game.Workspace
		while task.wait() do
			local quantity = 8
			local radius = 4
			for i = 1, quantity do
				local midpoint = character.PrimaryPart.Position
				local formula = i * ((math.pi*2)/quantity)
				local position = midpoint + Vector3.new(math.cos(formula) * radius, 0, math.sin(formula) * radius)
				smallger.PrimaryPart.CFrame = CFrame.new(position, midpoint)
				task.wait()
			end
		end
	end)
end

local function ger(sound: Sound, speed: number? | boolean?)
	local sound = sound:Clone()
	sound.Parent = SoundService
	speed = speed or false
	if speed then
		sound.PlaybackSpeed = speed
		sound.Looped = true
	end
	sound:Play()
end

local function random(list)
	return list[math.random(#list)]
end

local function popup(text)
	local label = Instance.new(""TextLabel"")
	label.Size = UDim2.new(
		Random.new():NextNumber(0, 0.5), 0,
		Random.new():NextNumber(0, 0.2), 0
	)
	label.Position = UDim2.new(
		Random.new():NextNumber(0, 0.5), 0,
		Random.new():NextNumber(0, 0.8), 0
	)
	label.Rotation = math.random(-50, 50)
	label.Text = text
	label.ZIndex = #script.Parent:GetChildren()
	
	if math.random(1, 3) == 1 then
		label.TextScaled = true
	end
	
	label.TextColor3 = Color3.fromRGB(
		math.random(0, 255),
		math.random(0, 255),
		math.random(0, 255)
	)
	
	label.Transparency = Random.new():NextNumber()

	if math.random(1, 8) == 1 then
		label.TextStrokeTransparency = 0
		label.TextStrokeColor3 = Color3.fromRGB(
			math.random(0, 255),
			math.random(0, 255),
			math.random(0, 255)
		)
	else
		label.TextStrokeTransparency = 1
	end
	
	label.Font = random({Enum.Font.SciFi, Enum.Font.Gotham, Enum.Font.Fantasy, Enum.Font.Creepster, Enum.Font.FredokaOne, Enum.Font.Arial, Enum.Font.Cartoon})
	label.BackgroundTransparency = 1
	
	label.Parent = script.Parent
	Debris:AddItem(label, 2)
end

local hint = Instance.new(""Hint"", game.Workspace)
for seconds = 10, 1, -1 do
	hint.Text = string.format(""eggs will spawn in %01d:%02d"", math.floor(seconds / 60), seconds % 60)
	task.wait(1)
end
hint.Text = ""spawning eggs...""

task.spawn(function()
	while task.wait(0.1) do
		local primary = player.Character.PrimaryPart
		local egg: Part = random(eggs)
		egg.CanCollide = true
		egg.Anchored = false
		egg.Shape = Enum.PartType.Ball
		egg.Position = Vector3.new(
			math.random(primary.Position.X - 30, primary.Position.X + 30),
			90,
			math.random(primary.Position.Z - 30, primary.Position.Z + 30)
		)
		egg.Orientation = Vector3.new(
			math.random(-360, 360),
			math.random(-360, 360),
			math.random(-360, 360)
		)
		egg.Parent = game.Workspace
		task.spawn(function()
			repeat task.wait() until explode == true
			task.wait(Random.new():NextNumber(0, 4)*2)
			local boom = script.Parent.Boom:Clone()
			boom.Parent = egg
			local explosion = Instance.new(""Explosion"", egg)
			explosion.Position = egg.Position
			explosion.DestroyJointRadiusPercent = 0
			boom:Play()
		end)
	end
end)

task.wait(3)
hint.Text = ""GET GER'ED!""
for i, v in pairs(props) do
	v.Parent = game.Workspace
end
ger(script.Parent.ger)
--[[
for i = 1, 30 do
	local smallger = gerclone:Clone()
	smallger:FindFirstChildWhichIsA(""Humanoid"").PlatformStand = true
	smallger.Parent = game.Workspace
	local primary = character.PrimaryPart
	smallger.PrimaryPart.Position = Vector3.new(
		math.random(primary.Position.X - 30, primary.Position.X + 30),
		90,
		math.random(primary.Position.Z - 30, primary.Position.Z + 30)
	)
end]]
task.wait(17)
TweenService:Create(camera, TweenInfo.new(3, Enum.EasingStyle.Linear), {FieldOfView = 50})

local info = TweenInfo.new(20, Enum.EasingStyle.Linear)

shaking = true

task.spawn(function()
	for i = 1, 4 do
		ger(script.Parent.whyyoucallmeger, 2+(1/time()))
		task.wait(2)
	end
end)

task.spawn(function()
	while task.wait(0) do
		local words = {""FIND"", ""GET"", ""REGISTER"", ""SEARCH"", ""ADD"", ""GIVE""}
		local chars = {
			[""A""] = {""A"", ""·¥Ä"", ""·ó©"", ""Œë"", ""ÔΩÅ"", ""AÃ¥ÃõÕéÃ≥Õå"", ""»∫"", ""‚Ç≥"", ""‚àÜ"", ""√Ñ""},
			[""B""] = {""B"", "" ô"", "" ô"", ""·ó∑"", ""Œí"", ""ÔΩÇ"", ""ùêµ"", ""ùï≠"", ""√ü"", ""‡∏ø""},
			[""C""] = {""C"", ""·ëï"", ""‚Ö≠"", ""œπ"", ""ÔΩÉ"", ""‚Çµ"", ""¬©"", ""‚Üª"", ""‚òæ"", ""‚ò™""},
			[""D""] = {""D"", ""·ó™"", ""‚ÖÆ"", ""‚Öæ"", ""‚Öæ"", ""Ôº§"", ""ÔΩÑ"", ""√ê"", ""√ê""},
			[""E""] = {""E"", ""·¥á"", ""·¥á"", ""·ó¥"", ""Ôº•"", ""ÔΩÖ"", ""∆é"", ""…ò"", ""‚àë"", ""‚Ç¨""},
			[""F""] = {""F"", ""“ì"", ""“ì"", ""œú"", ""Ôº¶"", ""ÔΩÜ"", ""‚Ñâ"", ""‚Ç£"", ""‚Ñ≤"", ""≈¶""},
			[""G""] = {""G"", ""…¢"", ""…¢"", ""…¢"", ""…¢"", ""…¢"", ""·é∂"", ""·èÄ"", ""Ôºß"", ""ÔΩá""},
			[""H""] = {""H"", "" ú"", "" ú"", ""·ïº"", ""Ôº®"", ""ÔΩà"", ""‚ôÑ"", ""‚Ñç"", ""ƒ¶""},
			[""I""] = {""I"", ""…™"", ""…™"", ""·¥â"", ""·¥â"", ""Œô"", ""Ôº©"", ""ÔΩâ"", ""∆ó"", ""¬°""},
			[""J""] = {""J"", ""·íç"", ""Ôº™"", ""ÔΩä"", ""‚ôÅ"", ""–à""},
			[""K""] = {""K"", ""·¥ã"", ""·¥ã"", ""·è¶"", ""Œö"", ""Ôº´"", ""ÔΩã"", ""‚Ç≠"", ""‚Ñ™"", ""ùêæ""},
			[""L""] = {""L"", "" ü"", "" ü"", "" ü"", ""·í™"", ""‚Ö¨"", ""Ôº¨"", ""ÔΩå"", ""¬£"", ""≈Å""},
			[""M""] = {""M"", ""·¥ç"", ""·¥ç"", ""·ó∞"", ""‚ÖØ"", ""Ôº≠"", ""ÔΩç"", ""‚ôç"", ""‚Ç•"", ""‚Ñ≥""},
			[""N""] = {""N"", ""…¥"", ""…¥"", ""…¥"", ""…¥"", ""·ëé"", ""ÔºÆ"", ""ÔΩé"", ""‚ô´"", ""‚Ñï""},
			[""O""] = {""O"", ""·¥è"", ""·¥è"", ""·¥è"", ""·¥è"", ""0"", ""ùêé"", ""ÔºØ"", ""ÔΩè"", ""Œ¶""},
			[""P""] = {""P"", ""·¥ò"", ""·¥ò"", ""·ë≠"", ""ùêè"", ""Ôº∞"", ""ÔΩê"", ""‚Ñô"", ""‚Ç±"", ""‚Ñò""},
			[""Q""] = {""Q"", ""œô"", ""ùêê"", ""Ôº±"", ""ÔΩë"", ""üÖÄ"", ""«™"", ""q"", ""“®"", ""‚Ñö""},
			[""R""] = {""R"", "" Ä"", "" Ä"", ""·ñá"", ""‚Ñù"", ""Ôº≤"", ""ÔΩí"", ""¬Æ"", ""‚Ñû"", ""‚Ñõ""},
			[""S""] = {""S"", ""s"", ""Íú±"", ""Íú±"", ""·èö"", ""Ôº≥"", ""ÔΩì"", ""¬ß"", ""‚Ñ£""},
			[""T""] = {""T"", ""·¥õ"", ""·¥õ"", ""·é¢"", ""Ôº¥"", ""ÔΩî"", ""‚Ä†"", ""‚ä§"", ""‚úû"", ""≈¶""},
			[""U""] = {""U"", ""·¥ú"", ""·¥ú"", ""·ëå"", ""Ôºµ"", ""ÔΩï"", "" â"", ""√ú"", ""‚à™"", ""–¶""},
			[""V""] = {""V"", ""·¥†"", ""·¥†"", ""‚Ö§"", ""·êØ"", ""Ôº∂"", ""ÔΩñ"", ""—¥"", ""‚ãÅ""},
			[""W""] = {""W"", ""·¥°"", ""·¥°"", ""·óØ"", ""Ôº∑"", ""ÔΩó"", ""–®"", ""‚Ç©"", ""œâ""},
			[""X""] = {""X"", ""x"", ""—Ö"", ""‚Ö©"", ""‚Öπ"", ""Ôº∏"", ""ÔΩò"", ""√ó"", ""‚úó"", ""‚®Ø""},
			[""Y""] = {""Y"", "" è"", "" è"", "" è"", ""Œ•"", ""Ôºπ"", ""ÔΩô"", ""¬•"", ""œà"", ""“Ø""},
			[""Z""] = {""Z"", ""·¥¢"", ""·¥¢"", ""·òî"", ""Ôº∫"", ""ÔΩö"", ""ZÃµÃÜÃàÃÑÕÄÃëÕ†Ã´ÕâÕôÃñÃ•ÃóÃ≠ÃòÕô"", ""∆µ"", ""‚Ñ§"", ""»§""}
		}

		local special_chars = {""!"", ""_"", ""-"", ""?"", ""="", ""+""}

		local text = ""ERROR: UNABLE TO "" .. random(words) ..  "" EGGS""
		local newtext = """"

		if math.random(1, 1000) == 1 then
			hint.Text = ""GER IS TAKING OVER""
			task.wait(1)
			continue
		end

		for _, char in pairs(text:upper():split("""")) do
			if chars[char] then
				char = random(chars[char])
				if math.random(1, 5) == 1 then
					char = char .. random(special_chars)
				end
			end
			newtext = newtext .. char
		end
		
		if newtext ~= """" then
			text = newtext
		end
		
		hint.Text = text
	end
end)

TweenService:Create(Lighting.ColorCorrection, info, {
	Saturation = 10
}):Play()
TweenService:Create(Lighting.Atmosphere, info, {
	Density = 1,
	Offset = 1,
	Glare = 5,
	Haze = 5,
}):Play()
task.wait(1)
TweenService:Create(Lighting.SunRays, info, {
	Intensity = 1,
	Spread = 1,
}):Play()
task.wait(1)
TweenService:Create(Lighting.Blur, info, {
	Size = 10,
}):Play()
task.wait(3)
task.spawn(function()
	for i, v in pairs(game.Workspace:GetDescendants()) do
		if v:IsA(""BasePart"") then
			pcall(function()
				local lol = v:Clone()
				lol.Parent = v
				lol.Material = random({Enum.Material.Wood, Enum.Material.WoodPlanks, Enum.Material.Cobblestone, Enum.Material.Neon, Enum.Material.Foil})
				lol.BrickColor = BrickColor.random()
				task.wait()
			end)
		end
	end
end)
task.wait(4)
task.delay(2, function()
	while task.wait() do
		if math.random(1, 2) == 1 then
			popup(hint.Text)
		else
			popup(""GER"")
		end
	end
end)
print(""exploding :3"")
explode = true
task.wait(3)
	for i = 1, 10 do
		spawnger()
		task.wait(2)
	end
task.wait(6)
for i, v in pairs(game.Workspace:GetDescendants()) do
	if v:IsA(""BasePart"") then
		pcall(function()
			local terrain = game.Workspace.Terrain
			terrain:FillBlock(v.CFrame, v.Size*1.2, Enum.Material.Water)
			if i % 10 == 0 then
				task.wait()
			end
		end)
	end
end"
1iGQhCWL,Trade and Win Big with NordFX Mega Super Lottery Campaign,fxvnpro,PHP,Saturday 13th of April 2024 03:54:39 PM CDT,https://www.fxvnpro.com/trade-and-win-big-with-nordfx-mega-super-lottery-campaign/
C168YFQB,FE Invisible,hacimiks,Lua,Saturday 13th of April 2024 03:14:06 PM CDT,"--Settings:
local ScriptStarted = false
local Keybind = ""E"" --Set to whatever you want, has to be the name of a KeyCode Enum.
local Transparency = true --Will make you slightly transparent when you are invisible. No reason to disable.
local NoClip = false --Will make your fake character no clip.

local Player = game:GetService(""Players"").LocalPlayer
local RealCharacter = Player.Character or Player.CharacterAdded:Wait()

local IsInvisible = false

RealCharacter.Archivable = true
local FakeCharacter = RealCharacter:Clone()
local Part
Part = Instance.new(""Part"", workspace)
Part.Anchored = true
Part.Size = Vector3.new(200, 1, 200)
Part.CFrame = CFrame.new(0, -500, 0) --Set this to whatever you want, just far away from the map.
Part.CanCollide = true
FakeCharacter.Parent = workspace
FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

for i, v in pairs(RealCharacter:GetChildren()) do
  if v:IsA(""LocalScript"") then
      local clone = v:Clone()
      clone.Disabled = true
      clone.Parent = FakeCharacter
  end
end
if Transparency then
  for i, v in pairs(FakeCharacter:GetDescendants()) do
      if v:IsA(""BasePart"") then
          v.Transparency = 0.7
      end
  end
end
local CanInvis = true
function RealCharacterDied()
  CanInvis = false
  RealCharacter:Destroy()
  RealCharacter = Player.Character
  CanInvis = true
  isinvisible = false
  FakeCharacter:Destroy()
  workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid

  RealCharacter.Archivable = true
  FakeCharacter = RealCharacter:Clone()
  Part:Destroy()
  Part = Instance.new(""Part"", workspace)
  Part.Anchored = true
  Part.Size = Vector3.new(200, 1, 200)
  Part.CFrame = CFrame.new(9999, 9999, 9999) --Set this to whatever you want, just far away from the map.
  Part.CanCollide = true
  FakeCharacter.Parent = workspace
  FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

  for i, v in pairs(RealCharacter:GetChildren()) do
      if v:IsA(""LocalScript"") then
          local clone = v:Clone()
          clone.Disabled = true
          clone.Parent = FakeCharacter
      end
  end
  if Transparency then
      for i, v in pairs(FakeCharacter:GetDescendants()) do
          if v:IsA(""BasePart"") then
              v.Transparency = 0.7
          end
      end
  end
 RealCharacter.Humanoid.Died:Connect(function()
 RealCharacter:Destroy()
 FakeCharacter:Destroy()
 end)
 Player.CharacterAppearanceLoaded:Connect(RealCharacterDied)
end
RealCharacter.Humanoid.Died:Connect(function()
 RealCharacter:Destroy()
 FakeCharacter:Destroy()
 end)
Player.CharacterAppearanceLoaded:Connect(RealCharacterDied)
local PseudoAnchor
game:GetService ""RunService"".RenderStepped:Connect(
  function()
      if PseudoAnchor ~= nil then
          PseudoAnchor.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
      end
       if NoClip then
      FakeCharacter.Humanoid:ChangeState(11)
       end
  end
)

PseudoAnchor = FakeCharacter.HumanoidRootPart
local function Invisible()
  if IsInvisible == false then
      local StoredCF = RealCharacter.HumanoidRootPart.CFrame
      RealCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame
      FakeCharacter.HumanoidRootPart.CFrame = StoredCF
      RealCharacter.Humanoid:UnequipTools()
      Player.Character = FakeCharacter
      workspace.CurrentCamera.CameraSubject = FakeCharacter.Humanoid
      PseudoAnchor = RealCharacter.HumanoidRootPart
      for i, v in pairs(FakeCharacter:GetChildren()) do
          if v:IsA(""LocalScript"") then
              v.Disabled = false
          end
      end

      IsInvisible = true
  else
      local StoredCF = FakeCharacter.HumanoidRootPart.CFrame
      FakeCharacter.HumanoidRootPart.CFrame = RealCharacter.HumanoidRootPart.CFrame
     
      RealCharacter.HumanoidRootPart.CFrame = StoredCF
     
      FakeCharacter.Humanoid:UnequipTools()
      Player.Character = RealCharacter
      workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid
      PseudoAnchor = FakeCharacter.HumanoidRootPart
      for i, v in pairs(FakeCharacter:GetChildren()) do
          if v:IsA(""LocalScript"") then
              v.Disabled = true
          end
      end
      IsInvisible = false
  end
end

game:GetService(""UserInputService"").InputBegan:Connect(
  function(key, gamep)
      if gamep then
          return
      end
      if key.KeyCode.Name:lower() == Keybind:lower() and CanInvis and RealCharacter and FakeCharacter then
          if RealCharacter:FindFirstChild(""HumanoidRootPart"") and FakeCharacter:FindFirstChild(""HumanoidRootPart"") then
              Invisible()
          end
      end
  end
)
local Sound = Instance.new(""Sound"",game:GetService(""SoundService""))
Sound.SoundId = ""rbxassetid://232127604""
Sound:Play()
game:GetService(""StarterGui""):SetCore(""SendNotification"",{[""Title""] = ""Invisible Toggle Loaded"",[""Text""] = ""Press ""..Keybind.."" to become change visibility."",[""Duration""] = 20,[""Button1""] = ""OK""})
game:GetService(""StarterGui""):SetCore(""SendNotification"",{[""Title""] = ""Need Mobile Keyboard for Mobile"",[""Text""] = ""Press ""..Keybind.."" to become change visibility."",[""Duration""] = 20,[""Button1""] = ""OK""})
game:GetService(""StarterGui""):SetCore(""SendNotification"",{[""Title""] = ""[E] For Toggle"",[""Text""] = ""Press ""..Keybind.."" to become change visibility."",[""Duration""] = 20,[""Button1""] = ""OK""})"
ATygZtaM,Slow GCF Algorithm,BenTibnam,Python,Saturday 13th of April 2024 02:07:23 PM CDT,"import math

# how many numbers we're going to find the factors of
input_count = 0

# where the factors are being stored (2D array)
factors = []

# function for finding factors
def find_and_store(number=0):
        number = abs(number) if (number < 0 and number != 1) else 1 if (number == 0) else number

        # 1 and number are always factors
        n_factors = [1]

        # going through possible factors
        for i in range(2, number):
                for j in range(i, number):
                        product = i * j

                        # adding factor to list
                        if product == number:
                                n_factors.append(i)

                                # accounting for perfect squares
                                if (i != j):
                                        n_factors.append(j)
                                break
                        # if the product is greater then the number it isn't a factor
                        elif product > number:
                                break

                continue

        n_factors.append(number)
        factors.append(n_factors)


def calculate_gcf():
        primary_factors = factors[0]
        secondary_factors = factors[1]
        gcf = 0

        # slow check each factor
        for f1 in primary_factors:
                for f2 in secondary_factors:
                        if f1 == f2 and f1 > gcf:
                                gcf = f1
                                break

        return gcf




print(""GCF Calculator - Slow Version\n"")

while True:
        number = input(""Enter integer to find factors: "")

        # any non-number will break out of the program
        try:
                # using an exception because I can't get isnan to work as it's suppose to and I just wanted to get this working
                math.isnan(float(number))
        except ValueError:
                break

        find_and_store(int(number))

# if more then one number was entered we can calculate a GCF
if len(factors) > 1:
        gcf = calculate_gcf()
        print(gcf)
else:
        print(""Must provide at least two numbers to calculate a GCF"")"
sS1WhaCp,B,Ankit_132,C++,Saturday 13th of April 2024 02:03:36 PM CDT,"#include <bits/stdc++.h>
using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define ff     first
#define ss     second
#define pb     push_back

int main()
{
    _test
    {
        int n;
        cin >> n;
        map <int, int> cnt;
        for(int i = 0; i < n; i++) {
          int x;
          cin >> x;
          cnt[x] += 1;
        }
        int ans = 0;
        for(auto [x, freq] : cnt) {
          if(freq > 1) {
            ++ans;
          }
        }
        cout << ans << endl;
    }
}"
VkYTbBE1,C,Ankit_132,C++,Saturday 13th of April 2024 02:03:35 PM CDT,"#include <bits/stdc++.h>
using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define ff     first
#define ss     second
#define pb     push_back

int main()
{
    _test
    {
        int n;
        cin>>n;
		int ans=0;
		for(int i=1;i<=n;i++) ans+=1ll*i*(2*i-1);

		cout<<ans<<"" ""<<n*2<<""\n"";

		for(int i=n;i;i--){

			cout<<1<<"" ""<<i<<"" "";
			for(int j=1;j<=n;j++) cout<<j<<"" "";
			cout<<""\n"";

			cout<<2<<"" ""<<i<<"" "";
			for(int j=1;j<=n;j++) cout<<j<<"" "";
			cout<<""\n"";
		}
    }
}"
s9Vt1v2C,D,Ankit_132,C++,Saturday 13th of April 2024 02:03:33 PM CDT,"#include <bits/stdc++.h>
using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define ff     first
#define ss     second
#define pb     push_back

vector<pair<int, int>> op;

void func2(vector<int>& a, int l, int r)
{
    if (l == r)
    {
        if (a[l] != 0)
	{
            op.push_back({l, l});
            a[l] = 0;
        }
        return;
    }

    func2(a, l + 1, r);
    if (a[l] != r - l)
    {
        op.push_back({l, r});
        for (int i = l; i <= r; i++)
            a[i] = r - l;

        func2(a, l + 1, r);
    }
}

void func(vector<int>& a, int l, int r) {
    int s = 0;
    for (int i = l; i <= r; i++)
        s += a[i];

    if (s <= (r - l + 1) * (r - l + 1)) {
        func2(a, l, r);
        op.push_back({l, r});
        for (int i = l; i <= r; i++) {
            a[i] = (r - l + 1);
        }
    } else {
        int mx = -1;
        int pos = -1;
        for (int i = l; i <= r; i++) {
            if (a[i] > mx) {
                mx = a[i];
                pos = i;
            }
        }

        if (pos != l)
            func(a, l, pos - 1);

        if (pos != r)
            func(a, pos + 1, r);
    }
}

int main() {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int& i : a)
        cin >> i;

    func(a, 0, n - 1);
    int s = 0;
    for (int i : a)
        s += i;

    cout << s << "" "" << op.size() << ""\n"";

    for (auto [l, r] : op)
        cout << l + 1 << "" "" << r + 1 << ""\n"";
}"
HupZg4DQ,A,Ankit_132,C++,Saturday 13th of April 2024 02:02:28 PM CDT,"#include <bits/stdc++.h>
using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define ff     first
#define ss     second
#define pb     push_back

int main()
{
    _test
    {
        int n, q, x, y;
		cin >> n >> q;
		cin >> x;
		while(--n) cin >> y;
		while(q--) {
			cin >> y;
			cout << min(x-1, y) << ' ';
		}
		cout << '\n';

    }
}"
7hYZPFqP,Crypto Prices,actorcat,VisualBasic,Saturday 13th of April 2024 01:45:24 PM CDT,"'''must change module name to JsonConverter
'''must reference Microsoft Scripting Runtime, Microsoft Internet Controls, Microsoft HTML Object Library...
'''https://www.etsy.com/shop/ExcelByActorkitten


'''COPY SUB AND PASTE INTO ANOTHER MODULE THEN UNCOMMENT...
'Sub Crypto_Prices()
'''put crypto on column A,,, BTC, ETH, DOGE,,, ETC...
'''put currency on row 1,,, USD, CAD, YEN,,, ETC...
'Dim strURL As String, strJSON As String, strTicker As String, strCurrency As String, strLength As String
'Dim i As Integer
'Dim i2 As Integer
'Dim http As Object
'Dim Json As Object
'Dim lastcolumn As Long
'Dim lastrow As Long
'With ActiveSheet
'    lastcolumn = .Cells(1, .Columns.Count).End(xlToLeft).Column
'    lastrow = .Cells(Rows.Count, 1).End(xlUp).Row
'End With
'For i = 2 To lastrow
'    For i2 = 2 To lastcolumn
'    strCurrency = Cells(1, i2).Value
'    strTicker = Cells(i, 1).Value
'    strURL = ""https://min-api.cryptocompare.com/data/histoday?fsym="" & strTicker & ""&tsym="" & strCurrency & ""&limit=60&aggregate=3&e=CCCAGG""
'    Set http = CreateObject(""MSXML2.XMLHTTP"")
'    http.Open ""GET"", strURL, False
'    http.Send
'    strJSON = http.responsetext

'''Debug.Print http.responsetext: Stop

'    Set Json = JsonConverter.ParseJson(strJSON)
'    On Error Resume Next
'    Cells(i, i2).Value = Json(""Data"")(61)(""close"")
'If Err.Number = 13 Then MsgBox strTicker & "" error""
'    DoEvents
'    Next i2
'DoEvents
'Next i
'End Sub







' VBA-JSON v2.3.1
' (c) Tim Hall - https://github.com/VBA-tools/VBA-JSON
'
' JSON Converter for VBA
'
' Errors:
' 10001 - JSON parse error
'
' @class JsonConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
'
' Based originally on vba-json (with extensive changes)
' BSD license included below
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' === VBA-UTC Headers
#If Mac Then

#If VBA7 Then

' 64-bit Mac (2016)
Private Declare PtrSafe Function utc_popen Lib ""/usr/lib/libc.dylib"" Alias ""popen"" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As LongPtr
Private Declare PtrSafe Function utc_pclose Lib ""/usr/lib/libc.dylib"" Alias ""pclose"" _
    (ByVal utc_File As LongPtr) As LongPtr
Private Declare PtrSafe Function utc_fread Lib ""/usr/lib/libc.dylib"" Alias ""fread"" _
    (ByVal utc_Buffer As String, ByVal utc_Size As LongPtr, ByVal utc_Number As LongPtr, ByVal utc_File As LongPtr) As LongPtr
Private Declare PtrSafe Function utc_feof Lib ""/usr/lib/libc.dylib"" Alias ""feof"" _
    (ByVal utc_File As LongPtr) As LongPtr

#Else

' 32-bit Mac
Private Declare Function utc_popen Lib ""libc.dylib"" Alias ""popen"" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As Long
Private Declare Function utc_pclose Lib ""libc.dylib"" Alias ""pclose"" _
    (ByVal utc_File As Long) As Long
Private Declare Function utc_fread Lib ""libc.dylib"" Alias ""fread"" _
    (ByVal utc_Buffer As String, ByVal utc_Size As Long, ByVal utc_Number As Long, ByVal utc_File As Long) As Long
Private Declare Function utc_feof Lib ""libc.dylib"" Alias ""feof"" _
    (ByVal utc_File As Long) As Long

#End If

#ElseIf VBA7 Then

' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724421.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724949.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms725485.aspx
Private Declare PtrSafe Function utc_GetTimeZoneInformation Lib ""kernel32"" Alias ""GetTimeZoneInformation"" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare PtrSafe Function utc_SystemTimeToTzSpecificLocalTime Lib ""kernel32"" Alias ""SystemTimeToTzSpecificLocalTime"" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare PtrSafe Function utc_TzSpecificLocalTimeToSystemTime Lib ""kernel32"" Alias ""TzSpecificLocalTimeToSystemTime"" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#Else

Private Declare Function utc_GetTimeZoneInformation Lib ""kernel32"" Alias ""GetTimeZoneInformation"" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare Function utc_SystemTimeToTzSpecificLocalTime Lib ""kernel32"" Alias ""SystemTimeToTzSpecificLocalTime"" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare Function utc_TzSpecificLocalTimeToSystemTime Lib ""kernel32"" Alias ""TzSpecificLocalTimeToSystemTime"" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#End If

#If Mac Then

#If VBA7 Then
Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As LongPtr
End Type

#Else

Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As Long
End Type

#End If

#Else

Private Type utc_SYSTEMTIME
    utc_wYear As Integer
    utc_wMonth As Integer
    utc_wDayOfWeek As Integer
    utc_wDay As Integer
    utc_wHour As Integer
    utc_wMinute As Integer
    utc_wSecond As Integer
    utc_wMilliseconds As Integer
End Type

Private Type utc_TIME_ZONE_INFORMATION
    utc_Bias As Long
    utc_StandardName(0 To 31) As Integer
    utc_StandardDate As utc_SYSTEMTIME
    utc_StandardBias As Long
    utc_DaylightName(0 To 31) As Integer
    utc_DaylightDate As utc_SYSTEMTIME
    utc_DaylightBias As Long
End Type

#End If
' === End VBA-UTC

Private Type json_Options
    ' VBA only stores 15 significant digits, so any numbers larger than that are truncated
    ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
    ' See: http://support.microsoft.com/kb/269370
    '
    ' By default, VBA-JSON will use String for numbers longer than 15 characters that contain only digits
    ' to override set `JsonConverter.JsonOptions.UseDoubleForLargeNumbers = True`
    UseDoubleForLargeNumbers As Boolean

    ' The JSON standard requires object keys to be quoted ("" or '), use this option to allow unquoted keys
    AllowUnquotedKeys As Boolean

    ' The solidus (/) is not required to be escaped, use this option to escape them as \/ in ConvertToJson
    EscapeSolidus As Boolean
End Type
Public JsonOptions As json_Options

' ============================================= '
' Public Methods
' ============================================= '

''
' Convert JSON string to object (Dictionary/Collection)
'
' @method ParseJson
' @param {String} json_String
' @return {Object} (Dictionary or Collection)
' @throws 10001 - JSON parse error
''
Public Function ParseJson(ByVal JsonString As String) As Object
    Dim json_Index As Long
    json_Index = 1

    ' Remove vbCr, vbLf, and vbTab from json_String
    JsonString = VBA.Replace(VBA.Replace(VBA.Replace(JsonString, VBA.vbCr, """"), VBA.vbLf, """"), VBA.vbTab, """")

    json_SkipSpaces JsonString, json_Index
    Select Case VBA.Mid$(JsonString, json_Index, 1)
    Case ""{""
        Set ParseJson = json_ParseObject(JsonString, json_Index)
    Case ""[""
        Set ParseJson = json_ParseArray(JsonString, json_Index)
    Case Else
        ' Error: Invalid JSON string
        Err.Raise 10001, ""JSONConverter"", json_ParseErrorMessage(JsonString, json_Index, ""Expecting '{' or '['"")
    End Select
End Function

''
' Convert object (Dictionary/Collection/Array) to JSON
'
' @method ConvertToJson
' @param {Variant} JsonValue (Dictionary, Collection, or Array)
' @param {Integer|String} Whitespace ""Pretty"" print json with given number of spaces per indentation (Integer) or given string
' @return {String}
''
Public Function ConvertToJson(ByVal JsonValue As Variant, Optional ByVal Whitespace As Variant, Optional ByVal json_CurrentIndentation As Long = 0) As String
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    Dim json_Index As Long
    Dim json_LBound As Long
    Dim json_UBound As Long
    Dim json_IsFirstItem As Boolean
    Dim json_Index2D As Long
    Dim json_LBound2D As Long
    Dim json_UBound2D As Long
    Dim json_IsFirstItem2D As Boolean
    Dim json_Key As Variant
    Dim json_Value As Variant
    Dim json_DateStr As String
    Dim json_Converted As String
    Dim json_SkipItem As Boolean
    Dim json_PrettyPrint As Boolean
    Dim json_Indentation As String
    Dim json_InnerIndentation As String

    json_LBound = -1
    json_UBound = -1
    json_IsFirstItem = True
    json_LBound2D = -1
    json_UBound2D = -1
    json_IsFirstItem2D = True
    json_PrettyPrint = Not IsMissing(Whitespace)

    Select Case VBA.VarType(JsonValue)
    Case VBA.vbNull
        ConvertToJson = ""null""
    Case VBA.vbDate
        ' Date
        json_DateStr = ConvertToIso(VBA.CDate(JsonValue))

        ConvertToJson = """""""" & json_DateStr & """"""""
    Case VBA.vbString
        ' String (or large number encoded as string)
        If Not JsonOptions.UseDoubleForLargeNumbers And json_StringIsLargeNumber(JsonValue) Then
            ConvertToJson = JsonValue
        Else
            ConvertToJson = """""""" & json_Encode(JsonValue) & """"""""
        End If
    Case VBA.vbBoolean
        If JsonValue Then
            ConvertToJson = ""true""
        Else
            ConvertToJson = ""false""
        End If
    Case VBA.vbArray To VBA.vbArray + VBA.vbByte
        If json_PrettyPrint Then
            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation + 1, Whitespace)
                json_InnerIndentation = VBA.String$(json_CurrentIndentation + 2, Whitespace)
            Else
                json_Indentation = VBA.Space$((json_CurrentIndentation + 1) * Whitespace)
                json_InnerIndentation = VBA.Space$((json_CurrentIndentation + 2) * Whitespace)
            End If
        End If

        ' Array
        json_BufferAppend json_Buffer, ""["", json_BufferPosition, json_BufferLength

        On Error Resume Next

        json_LBound = LBound(JsonValue, 1)
        json_UBound = UBound(JsonValue, 1)
        json_LBound2D = LBound(JsonValue, 2)
        json_UBound2D = UBound(JsonValue, 2)

        If json_LBound >= 0 And json_UBound >= 0 Then
            For json_Index = json_LBound To json_UBound
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    ' Append comma to previous line
                    json_BufferAppend json_Buffer, "","", json_BufferPosition, json_BufferLength
                End If

                If json_LBound2D >= 0 And json_UBound2D >= 0 Then
                    ' 2D Array
                    If json_PrettyPrint Then
                        json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength
                    End If
                    json_BufferAppend json_Buffer, json_Indentation & ""["", json_BufferPosition, json_BufferLength

                    For json_Index2D = json_LBound2D To json_UBound2D
                        If json_IsFirstItem2D Then
                            json_IsFirstItem2D = False
                        Else
                            json_BufferAppend json_Buffer, "","", json_BufferPosition, json_BufferLength
                        End If

                        json_Converted = ConvertToJson(JsonValue(json_Index, json_Index2D), Whitespace, json_CurrentIndentation + 2)

                        ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                        If json_Converted = """" Then
                            ' (nest to only check if converted = """")
                            If json_IsUndefined(JsonValue(json_Index, json_Index2D)) Then
                                json_Converted = ""null""
                            End If
                        End If

                        If json_PrettyPrint Then
                            json_Converted = vbNewLine & json_InnerIndentation & json_Converted
                        End If

                        json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                    Next json_Index2D

                    If json_PrettyPrint Then
                        json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength
                    End If

                    json_BufferAppend json_Buffer, json_Indentation & ""]"", json_BufferPosition, json_BufferLength
                    json_IsFirstItem2D = True
                Else
                    ' 1D Array
                    json_Converted = ConvertToJson(JsonValue(json_Index), Whitespace, json_CurrentIndentation + 1)

                    ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                    If json_Converted = """" Then
                        ' (nest to only check if converted = """")
                        If json_IsUndefined(JsonValue(json_Index)) Then
                            json_Converted = ""null""
                        End If
                    End If

                    If json_PrettyPrint Then
                        json_Converted = vbNewLine & json_Indentation & json_Converted
                    End If

                    json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                End If
            Next json_Index
        End If

        On Error GoTo 0

        If json_PrettyPrint Then
            json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
            Else
                json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
            End If
        End If

        json_BufferAppend json_Buffer, json_Indentation & ""]"", json_BufferPosition, json_BufferLength

        ConvertToJson = json_BufferToString(json_Buffer, json_BufferPosition)

    ' Dictionary or Collection
    Case VBA.vbObject
        If json_PrettyPrint Then
            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation + 1, Whitespace)
            Else
                json_Indentation = VBA.Space$((json_CurrentIndentation + 1) * Whitespace)
            End If
        End If

        ' Dictionary
        If VBA.TypeName(JsonValue) = ""Dictionary"" Then
            json_BufferAppend json_Buffer, ""{"", json_BufferPosition, json_BufferLength
            For Each json_Key In JsonValue.Keys
                ' For Objects, undefined (Empty/Nothing) is not added to object
                json_Converted = ConvertToJson(JsonValue(json_Key), Whitespace, json_CurrentIndentation + 1)
                If json_Converted = """" Then
                    json_SkipItem = json_IsUndefined(JsonValue(json_Key))
                Else
                    json_SkipItem = False
                End If

                If Not json_SkipItem Then
                    If json_IsFirstItem Then
                        json_IsFirstItem = False
                    Else
                        json_BufferAppend json_Buffer, "","", json_BufferPosition, json_BufferLength
                    End If

                    If json_PrettyPrint Then
                        json_Converted = vbNewLine & json_Indentation & """""""" & json_Key & """""": "" & json_Converted
                    Else
                        json_Converted = """""""" & json_Key & """""":"" & json_Converted
                    End If

                    json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                End If
            Next json_Key

            If json_PrettyPrint Then
                json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

                If VBA.VarType(Whitespace) = VBA.vbString Then
                    json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
                Else
                    json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
                End If
            End If

            json_BufferAppend json_Buffer, json_Indentation & ""}"", json_BufferPosition, json_BufferLength

        ' Collection
        ElseIf VBA.TypeName(JsonValue) = ""Collection"" Then
            json_BufferAppend json_Buffer, ""["", json_BufferPosition, json_BufferLength
            For Each json_Value In JsonValue
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_Buffer, "","", json_BufferPosition, json_BufferLength
                End If

                json_Converted = ConvertToJson(json_Value, Whitespace, json_CurrentIndentation + 1)

                ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                If json_Converted = """" Then
                    ' (nest to only check if converted = """")
                    If json_IsUndefined(json_Value) Then
                        json_Converted = ""null""
                    End If
                End If

                If json_PrettyPrint Then
                    json_Converted = vbNewLine & json_Indentation & json_Converted
                End If

                json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
            Next json_Value

            If json_PrettyPrint Then
                json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

                If VBA.VarType(Whitespace) = VBA.vbString Then
                    json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
                Else
                    json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
                End If
            End If

            json_BufferAppend json_Buffer, json_Indentation & ""]"", json_BufferPosition, json_BufferLength
        End If

        ConvertToJson = json_BufferToString(json_Buffer, json_BufferPosition)
    Case VBA.vbInteger, VBA.vbLong, VBA.vbSingle, VBA.vbDouble, VBA.vbCurrency, VBA.vbDecimal
        ' Number (use decimals for numbers)
        ConvertToJson = VBA.Replace(JsonValue, "","", ""."")
    Case Else
        ' vbEmpty, vbError, vbDataObject, vbByte, vbUserDefinedType
        ' Use VBA's built-in to-string
        On Error Resume Next
        ConvertToJson = JsonValue
        On Error GoTo 0
    End Select
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Function json_ParseObject(json_String As String, ByRef json_Index As Long) As Dictionary
    Dim json_Key As String
    Dim json_NextChar As String

    Set json_ParseObject = New Dictionary
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> ""{"" Then
        Err.Raise 10001, ""JSONConverter"", json_ParseErrorMessage(json_String, json_Index, ""Expecting '{'"")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = ""}"" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "","" Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_Key = json_ParseKey(json_String, json_Index)
            json_NextChar = json_Peek(json_String, json_Index)
            If json_NextChar = ""["" Or json_NextChar = ""{"" Then
                Set json_ParseObject.item(json_Key) = json_ParseValue(json_String, json_Index)
            Else
                json_ParseObject.item(json_Key) = json_ParseValue(json_String, json_Index)
            End If
        Loop
    End If
End Function

Private Function json_ParseArray(json_String As String, ByRef json_Index As Long) As Collection
    Set json_ParseArray = New Collection

    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> ""["" Then
        Err.Raise 10001, ""JSONConverter"", json_ParseErrorMessage(json_String, json_Index, ""Expecting '['"")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = ""]"" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "","" Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_ParseArray.Add json_ParseValue(json_String, json_Index)
        Loop
    End If
End Function

Private Function json_ParseValue(json_String As String, ByRef json_Index As Long) As Variant
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case ""{""
        Set json_ParseValue = json_ParseObject(json_String, json_Index)
    Case ""[""
        Set json_ParseValue = json_ParseArray(json_String, json_Index)
    Case """""""", ""'""
        json_ParseValue = json_ParseString(json_String, json_Index)
    Case Else
        If VBA.Mid$(json_String, json_Index, 4) = ""true"" Then
            json_ParseValue = True
            json_Index = json_Index + 4
        ElseIf VBA.Mid$(json_String, json_Index, 5) = ""false"" Then
            json_ParseValue = False
            json_Index = json_Index + 5
        ElseIf VBA.Mid$(json_String, json_Index, 4) = ""null"" Then
            json_ParseValue = Null
            json_Index = json_Index + 4
        ElseIf VBA.InStr(""+-0123456789"", VBA.Mid$(json_String, json_Index, 1)) Then
            json_ParseValue = json_ParseNumber(json_String, json_Index)
        Else
            Err.Raise 10001, ""JSONConverter"", json_ParseErrorMessage(json_String, json_Index, ""Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['"")
        End If
    End Select
End Function

Private Function json_ParseString(json_String As String, ByRef json_Index As Long) As String
    Dim json_Quote As String
    Dim json_Char As String
    Dim json_Code As String
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    json_SkipSpaces json_String, json_Index

    ' Store opening quote to look for matching closing quote
    json_Quote = VBA.Mid$(json_String, json_Index, 1)
    json_Index = json_Index + 1

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        Select Case json_Char
        Case ""\""
            ' Escaped string, \\, or \/
            json_Index = json_Index + 1
            json_Char = VBA.Mid$(json_String, json_Index, 1)

            Select Case json_Char
            Case """""""", ""\"", ""/"", ""'""
                json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case ""b""
                json_BufferAppend json_Buffer, vbBack, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case ""f""
                json_BufferAppend json_Buffer, vbFormFeed, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case ""n""
                json_BufferAppend json_Buffer, vbCrLf, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case ""r""
                json_BufferAppend json_Buffer, vbCr, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case ""t""
                json_BufferAppend json_Buffer, vbTab, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case ""u""
                ' Unicode character escape (e.g. \u00a9 = Copyright)
                json_Index = json_Index + 1
                json_Code = VBA.Mid$(json_String, json_Index, 4)
                json_BufferAppend json_Buffer, VBA.ChrW(VBA.Val(""&h"" + json_Code)), json_BufferPosition, json_BufferLength
                json_Index = json_Index + 4
            End Select
        Case json_Quote
            json_ParseString = json_BufferToString(json_Buffer, json_BufferPosition)
            json_Index = json_Index + 1
            Exit Function
        Case Else
            json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
            json_Index = json_Index + 1
        End Select
    Loop
End Function

Private Function json_ParseNumber(json_String As String, ByRef json_Index As Long) As Variant
    Dim json_Char As String
    Dim json_Value As String
    Dim json_IsLargeNumber As Boolean

    json_SkipSpaces json_String, json_Index

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        If VBA.InStr(""+-0123456789.eE"", json_Char) Then
            ' Unlikely to have massive number, so use simple append rather than buffer here
            json_Value = json_Value & json_Char
            json_Index = json_Index + 1
        Else
            ' Excel only stores 15 significant digits, so any numbers larger than that are truncated
            ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
            ' See: http://support.microsoft.com/kb/269370
            '
            ' Fix: Parse -> String, Convert -> String longer than 15/16 characters containing only numbers and decimal points -> Number
            ' (decimal doesn't factor into significant digit count, so if present check for 15 digits + decimal = 16)
            json_IsLargeNumber = IIf(InStr(json_Value, "".""), Len(json_Value) >= 17, Len(json_Value) >= 16)
            If Not JsonOptions.UseDoubleForLargeNumbers And json_IsLargeNumber Then
                json_ParseNumber = json_Value
            Else
                ' VBA.Val does not use regional settings, so guard for comma is not needed
                json_ParseNumber = VBA.Val(json_Value)
            End If
            Exit Function
        End If
    Loop
End Function

Private Function json_ParseKey(json_String As String, ByRef json_Index As Long) As String
    ' Parse key with single or double quotes
    If VBA.Mid$(json_String, json_Index, 1) = """""""" Or VBA.Mid$(json_String, json_Index, 1) = ""'"" Then
        json_ParseKey = json_ParseString(json_String, json_Index)
    ElseIf JsonOptions.AllowUnquotedKeys Then
        Dim json_Char As String
        Do While json_Index > 0 And json_Index <= Len(json_String)
            json_Char = VBA.Mid$(json_String, json_Index, 1)
            If (json_Char <> "" "") And (json_Char <> "":"") Then
                json_ParseKey = json_ParseKey & json_Char
                json_Index = json_Index + 1
            Else
                Exit Do
            End If
        Loop
    Else
        Err.Raise 10001, ""JSONConverter"", json_ParseErrorMessage(json_String, json_Index, ""Expecting '""""' or '''"")
    End If

    ' Check for colon and skip if present or throw if not present
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "":"" Then
        Err.Raise 10001, ""JSONConverter"", json_ParseErrorMessage(json_String, json_Index, ""Expecting ':'"")
    Else
        json_Index = json_Index + 1
    End If
End Function

Private Function json_IsUndefined(ByVal json_Value As Variant) As Boolean
    ' Empty / Nothing -> undefined
    Select Case VBA.VarType(json_Value)
    Case VBA.vbEmpty
        json_IsUndefined = True
    Case VBA.vbObject
        Select Case VBA.TypeName(json_Value)
        Case ""Empty"", ""Nothing""
            json_IsUndefined = True
        End Select
    End Select
End Function

Private Function json_Encode(ByVal json_Text As Variant) As String
    ' Reference: http://www.ietf.org/rfc/rfc4627.txt
    ' Escape: "", \, /, backspace, form feed, line feed, carriage return, tab
    Dim json_Index As Long
    Dim json_Char As String
    Dim json_AscCode As Long
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    For json_Index = 1 To VBA.Len(json_Text)
        json_Char = VBA.Mid$(json_Text, json_Index, 1)
        json_AscCode = VBA.AscW(json_Char)

        ' When AscW returns a negative number, it returns the twos complement form of that number.
        ' To convert the twos complement notation into normal binary notation, add 0xFFF to the return result.
        ' https://support.microsoft.com/en-us/kb/272138
        If json_AscCode < 0 Then
            json_AscCode = json_AscCode + 65536
        End If

        ' From spec, "", \, and control characters must be escaped (solidus is optional)

        Select Case json_AscCode
        Case 34
            ' "" -> 34 -> \""
            json_Char = ""\""""""
        Case 92
            ' \ -> 92 -> \\
            json_Char = ""\\""
        Case 47
            ' / -> 47 -> \/ (optional)
            If JsonOptions.EscapeSolidus Then
                json_Char = ""\/""
            End If
        Case 8
            ' backspace -> 8 -> \b
            json_Char = ""\b""
        Case 12
            ' form feed -> 12 -> \f
            json_Char = ""\f""
        Case 10
            ' line feed -> 10 -> \n
            json_Char = ""\n""
        Case 13
            ' carriage return -> 13 -> \r
            json_Char = ""\r""
        Case 9
            ' tab -> 9 -> \t
            json_Char = ""\t""
        Case 0 To 31, 127 To 65535
            ' Non-ascii characters -> convert to 4-digit hex
            json_Char = ""\u"" & VBA.Right$(""0000"" & VBA.Hex$(json_AscCode), 4)
        End Select

        json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
    Next json_Index

    json_Encode = json_BufferToString(json_Buffer, json_BufferPosition)
End Function

Private Function json_Peek(json_String As String, ByVal json_Index As Long, Optional json_NumberOfCharacters As Long = 1) As String
    ' ""Peek"" at the next number of characters without incrementing json_Index (ByVal instead of ByRef)
    json_SkipSpaces json_String, json_Index
    json_Peek = VBA.Mid$(json_String, json_Index, json_NumberOfCharacters)
End Function

Private Sub json_SkipSpaces(json_String As String, ByRef json_Index As Long)
    ' Increment index to skip over spaces
    Do While json_Index > 0 And json_Index <= VBA.Len(json_String) And VBA.Mid$(json_String, json_Index, 1) = "" ""
        json_Index = json_Index + 1
    Loop
End Sub

Private Function json_StringIsLargeNumber(json_String As Variant) As Boolean
    ' Check if the given string is considered a ""large number""
    ' (See json_ParseNumber)

    Dim json_Length As Long
    Dim json_CharIndex As Long
    json_Length = VBA.Len(json_String)

    ' Length with be at least 16 characters and assume will be less than 100 characters
    If json_Length >= 16 And json_Length <= 100 Then
        Dim json_CharCode As String

        json_StringIsLargeNumber = True

        For json_CharIndex = 1 To json_Length
            json_CharCode = VBA.Asc(VBA.Mid$(json_String, json_CharIndex, 1))
            Select Case json_CharCode
            ' Look for .|0-9|E|e
            Case 46, 48 To 57, 69, 101
                ' Continue through characters
            Case Else
                json_StringIsLargeNumber = False
                Exit Function
            End Select
        Next json_CharIndex
    End If
End Function

Private Function json_ParseErrorMessage(json_String As String, ByRef json_Index As Long, ErrorMessage As String)
    ' Provide detailed parse error message, including details of where and what occurred
    '
    ' Example:
    ' Error parsing JSON:
    ' {""abcde"":True}
    '          ^
    ' Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['

    Dim json_StartIndex As Long
    Dim json_StopIndex As Long

    ' Include 10 characters before and after error (if possible)
    json_StartIndex = json_Index - 10
    json_StopIndex = json_Index + 10
    If json_StartIndex <= 0 Then
        json_StartIndex = 1
    End If
    If json_StopIndex > VBA.Len(json_String) Then
        json_StopIndex = VBA.Len(json_String)
    End If

    json_ParseErrorMessage = ""Error parsing JSON:"" & VBA.vbNewLine & _
                             VBA.Mid$(json_String, json_StartIndex, json_StopIndex - json_StartIndex + 1) & VBA.vbNewLine & _
                             VBA.Space$(json_Index - json_StartIndex) & ""^"" & VBA.vbNewLine & _
                             ErrorMessage
End Function

Private Sub json_BufferAppend(ByRef json_Buffer As String, _
                              ByRef json_Append As Variant, _
                              ByRef json_BufferPosition As Long, _
                              ByRef json_BufferLength As Long)
    ' VBA can be slow to append strings due to allocating a new string for each append
    ' Instead of using the traditional append, allocate a large empty string and then copy string at append position
    '
    ' Example:
    ' Buffer: ""abc  ""
    ' Append: ""def""
    ' Buffer Position: 3
    ' Buffer Length: 5
    '
    ' Buffer position + Append length > Buffer length -> Append chunk of blank space to buffer
    ' Buffer: ""abc       ""
    ' Buffer Length: 10
    '
    ' Put ""def"" into buffer at position 3 (0-based)
    ' Buffer: ""abcdef    ""
    '
    ' Approach based on cStringBuilder from vbAccelerator
    ' http://www.vbaccelerator.com/home/VB/Code/Techniques/RunTime_Debug_Tracing/VB6_Tracer_Utility_zip_cStringBuilder_cls.asp
    '
    ' and clsStringAppend from Philip Swannell
    ' https://github.com/VBA-tools/VBA-JSON/pull/82

    Dim json_AppendLength As Long
    Dim json_LengthPlusPosition As Long

    json_AppendLength = VBA.Len(json_Append)
    json_LengthPlusPosition = json_AppendLength + json_BufferPosition

    If json_LengthPlusPosition > json_BufferLength Then
        ' Appending would overflow buffer, add chunk
        ' (double buffer length or append length, whichever is bigger)
        Dim json_AddedLength As Long
        json_AddedLength = IIf(json_AppendLength > json_BufferLength, json_AppendLength, json_BufferLength)

        json_Buffer = json_Buffer & VBA.Space$(json_AddedLength)
        json_BufferLength = json_BufferLength + json_AddedLength
    End If

    ' Note: Namespacing with VBA.Mid$ doesn't work properly here, throwing compile error:
    ' Function call on left-hand side of assignment must return Variant or Object
    Mid$(json_Buffer, json_BufferPosition + 1, json_AppendLength) = CStr(json_Append)
    json_BufferPosition = json_BufferPosition + json_AppendLength
End Sub

Private Function json_BufferToString(ByRef json_Buffer As String, ByVal json_BufferPosition As Long) As String
    If json_BufferPosition > 0 Then
        json_BufferToString = VBA.Left$(json_Buffer, json_BufferPosition)
    End If
End Function

''
' VBA-UTC v1.0.6
' (c) Tim Hall - https://github.com/VBA-tools/VBA-UtcConverter
'
' UTC/ISO 8601 Converter for VBA
'
' Errors:
' 10011 - UTC parsing error
' 10012 - UTC conversion error
' 10013 - ISO 8601 parsing error
' 10014 - ISO 8601 conversion error
'
' @module UtcConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Parse UTC date to local date
'
' @method ParseUtc
' @param {Date} UtcDate
' @return {Date} Local date
' @throws 10011 - UTC parsing error
''
Public Function ParseUtc(utc_UtcDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ParseUtc = utc_ConvertDate(utc_UtcDate)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_LocalDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_SystemTimeToTzSpecificLocalTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_UtcDate), utc_LocalDate

    ParseUtc = utc_SystemTimeToDate(utc_LocalDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10011, ""UtcConverter.ParseUtc"", ""UTC parsing error: "" & Err.Number & "" - "" & Err.Description
End Function

''
' Convert local date to UTC date
'
' @method ConvertToUrc
' @param {Date} utc_LocalDate
' @return {Date} UTC date
' @throws 10012 - UTC conversion error
''
Public Function ConvertToUtc(utc_LocalDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ConvertToUtc = utc_ConvertDate(utc_LocalDate, utc_ConvertToUtc:=True)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_UtcDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_TzSpecificLocalTimeToSystemTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_LocalDate), utc_UtcDate

    ConvertToUtc = utc_SystemTimeToDate(utc_UtcDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10012, ""UtcConverter.ConvertToUtc"", ""UTC conversion error: "" & Err.Number & "" - "" & Err.Description
End Function

''
' Parse ISO 8601 date string to local date
'
' @method ParseIso
' @param {Date} utc_IsoString
' @return {Date} Local date
' @throws 10013 - ISO 8601 parsing error
''
Public Function ParseIso(utc_IsoString As String) As Date
    On Error GoTo utc_ErrorHandling

    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    Dim utc_OffsetIndex As Long
    Dim utc_HasOffset As Boolean
    Dim utc_NegativeOffset As Boolean
    Dim utc_OffsetParts() As String
    Dim utc_Offset As Date

    utc_Parts = VBA.Split(utc_IsoString, ""T"")
    utc_DateParts = VBA.Split(utc_Parts(0), ""-"")
    ParseIso = VBA.DateSerial(VBA.CInt(utc_DateParts(0)), VBA.CInt(utc_DateParts(1)), VBA.CInt(utc_DateParts(2)))

    If UBound(utc_Parts) > 0 Then
        If VBA.InStr(utc_Parts(1), ""Z"") Then
            utc_TimeParts = VBA.Split(VBA.Replace(utc_Parts(1), ""Z"", """"), "":"")
        Else
            utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), ""+"")
            If utc_OffsetIndex = 0 Then
                utc_NegativeOffset = True
                utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), ""-"")
            End If

            If utc_OffsetIndex > 0 Then
                utc_HasOffset = True
                utc_TimeParts = VBA.Split(VBA.Left$(utc_Parts(1), utc_OffsetIndex - 1), "":"")
                utc_OffsetParts = VBA.Split(VBA.Right$(utc_Parts(1), Len(utc_Parts(1)) - utc_OffsetIndex), "":"")

                Select Case UBound(utc_OffsetParts)
                Case 0
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), 0, 0)
                Case 1
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), 0)
                Case 2
                    ' VBA.Val does not use regional settings, use for seconds to avoid decimal/comma issues
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), Int(VBA.Val(utc_OffsetParts(2))))
                End Select

                If utc_NegativeOffset Then: utc_Offset = -utc_Offset
            Else
                utc_TimeParts = VBA.Split(utc_Parts(1), "":"")
            End If
        End If

        Select Case UBound(utc_TimeParts)
        Case 0
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), 0, 0)
        Case 1
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), 0)
        Case 2
            ' VBA.Val does not use regional settings, use for seconds to avoid decimal/comma issues
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), Int(VBA.Val(utc_TimeParts(2))))
        End Select

        ParseIso = ParseUtc(ParseIso)

        If utc_HasOffset Then
            ParseIso = ParseIso - utc_Offset
        End If
    End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10013, ""UtcConverter.ParseIso"", ""ISO 8601 parsing error for "" & utc_IsoString & "": "" & Err.Number & "" - "" & Err.Description
End Function

''
' Convert local date to ISO 8601 string
'
' @method ConvertToIso
' @param {Date} utc_LocalDate
' @return {Date} ISO 8601 string
' @throws 10014 - ISO 8601 conversion error
''
Public Function ConvertToIso(utc_LocalDate As Date) As String
    On Error GoTo utc_ErrorHandling

    ConvertToIso = VBA.Format$(ConvertToUtc(utc_LocalDate), ""yyyy-mm-ddTHH:mm:ss.000Z"")

    Exit Function

utc_ErrorHandling:
    Err.Raise 10014, ""UtcConverter.ConvertToIso"", ""ISO 8601 conversion error: "" & Err.Number & "" - "" & Err.Description
End Function

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Then

Private Function utc_ConvertDate(utc_Value As Date, Optional utc_ConvertToUtc As Boolean = False) As Date
    Dim utc_ShellCommand As String
    Dim utc_Result As utc_ShellResult
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String

    If utc_ConvertToUtc Then
        utc_ShellCommand = ""date -ur `date -jf '%Y-%m-%d %H:%M:%S' "" & _
            ""'"" & VBA.Format$(utc_Value, ""yyyy-mm-dd HH:mm:ss"") & ""' "" & _
            "" +'%s'` +'%Y-%m-%d %H:%M:%S'""
    Else
        utc_ShellCommand = ""date -jf '%Y-%m-%d %H:%M:%S %z' "" & _
            ""'"" & VBA.Format$(utc_Value, ""yyyy-mm-dd HH:mm:ss"") & "" +0000' "" & _
            ""+'%Y-%m-%d %H:%M:%S'""
    End If

    utc_Result = utc_ExecuteInShell(utc_ShellCommand)

    If utc_Result.utc_Output = """" Then
        Err.Raise 10015, ""UtcConverter.utc_ConvertDate"", ""'date' command failed""
    Else
        utc_Parts = Split(utc_Result.utc_Output, "" "")
        utc_DateParts = Split(utc_Parts(0), ""-"")
        utc_TimeParts = Split(utc_Parts(1), "":"")

        utc_ConvertDate = DateSerial(utc_DateParts(0), utc_DateParts(1), utc_DateParts(2)) + _
            TimeSerial(utc_TimeParts(0), utc_TimeParts(1), utc_TimeParts(2))
    End If
End Function

Private Function utc_ExecuteInShell(utc_ShellCommand As String) As utc_ShellResult
#If VBA7 Then
    Dim utc_File As LongPtr
    Dim utc_Read As LongPtr
#Else
    Dim utc_File As Long
    Dim utc_Read As Long
#End If

    Dim utc_Chunk As String

    On Error GoTo utc_ErrorHandling
    utc_File = utc_popen(utc_ShellCommand, ""r"")

    If utc_File = 0 Then: Exit Function

    Do While utc_feof(utc_File) = 0
        utc_Chunk = VBA.Space$(50)
        utc_Read = CLng(utc_fread(utc_Chunk, 1, Len(utc_Chunk) - 1, utc_File))
        If utc_Read > 0 Then
            utc_Chunk = VBA.Left$(utc_Chunk, CLng(utc_Read))
            utc_ExecuteInShell.utc_Output = utc_ExecuteInShell.utc_Output & utc_Chunk
        End If
    Loop

utc_ErrorHandling:
    utc_ExecuteInShell.utc_ExitCode = CLng(utc_pclose(utc_File))
End Function

#Else

Private Function utc_DateToSystemTime(utc_Value As Date) As utc_SYSTEMTIME
    utc_DateToSystemTime.utc_wYear = VBA.Year(utc_Value)
    utc_DateToSystemTime.utc_wMonth = VBA.Month(utc_Value)
    utc_DateToSystemTime.utc_wDay = VBA.Day(utc_Value)
    utc_DateToSystemTime.utc_wHour = VBA.Hour(utc_Value)
    utc_DateToSystemTime.utc_wMinute = VBA.Minute(utc_Value)
    utc_DateToSystemTime.utc_wSecond = VBA.Second(utc_Value)
    utc_DateToSystemTime.utc_wMilliseconds = 0
End Function

Private Function utc_SystemTimeToDate(utc_Value As utc_SYSTEMTIME) As Date
    utc_SystemTimeToDate = DateSerial(utc_Value.utc_wYear, utc_Value.utc_wMonth, utc_Value.utc_wDay) + _
        TimeSerial(utc_Value.utc_wHour, utc_Value.utc_wMinute, utc_Value.utc_wSecond)
End Function

#End If
"
ZxRJz4nQ,crazy gloom2 light style,illwieckz,C,Saturday 13th of April 2024 12:59:34 PM CDT,"gloom2beta2/71955335FA395BA4338DCE6901B1005B
{ // Q3Map2 defaulted
	{
		map $lightmap
		rgbGen identity
	}
	
	// Q3Map2 custom lightstyle stage(s)
	{
		map maps/gloom2beta2/lm_0013.tga
		blendFunc GL_SRC_ALPHA GL_ONE
		rgbGen wave noise 1 .75 1.6 4.2 // style 2
		tcGen lightmap
	}
	{
		map $lightmap
		blendFunc GL_SRC_ALPHA GL_ONE
		rgbGen wave noise 1 .5 3.7 4.9 // style 3
		tcGen lightmap
		tcMod transform 1 0 0 1 0.50000 0.00000
	}
	{
		map maps/gloom2beta2/lm_0013.tga
		blendFunc GL_SRC_ALPHA GL_ONE
		rgbGen wave noise 1 1 2.6 1.3 // style 4
		tcGen lightmap
		tcMod transform 1 0 0 1 0.50000 0.00000
	}

	{
		map textures/gloom2/es_dark-mtl_l1_vd1a.tga
		blendFunc GL_DST_COLOR GL_ZERO
		rgbGen identity
	}
}"
XLfKCaGn,monsterLoveExample,MarcoFalciglia,C#,Saturday 13th of April 2024 12:51:32 PM CDT,"using System.Collections;
using System.Collections.Generic;
using MonsterLove.StateMachine;
using UnityEngine;

public enum StatesPrepareTea
{
    Initialization,
    FullfillTeaPotWithWater,
    PutTeaBagInside,
    PutTeaPotOnStove,
    Completed
}

public class PrepareTea : MonoBehaviour
{
    public GameObject teapot;
    public StateMachine<StatesPrepareTea> _stateMachine;
    public StatesPrepareTea initialStateDebug;

    
    //Singleton
    private static PrepareTea _instance;
    public static PrepareTea Instance => _instance;
    
    protected override void Awake()
    {
        base.Awake();
    
        _instance = this;
        _stateMachine = new StateMachine<StatesPrepareTea>( this );
        
        teapot.GetComponent<Animator>().enabled = false;
            
        _stateMachine.ChangeState(StatesPrepareTea.FullfillTeaPotWithWater);
    }

    protected override void Start()
    {
        base.Start();

        changeState(StatesOS4.FullfillTeaPotWithWater);
     
    }
    
    public void changeState(StatesPrepareTea _newState)
    {
        _stateMachine.ChangeState(_newState);
    }
    
    private void Initialization_Enter() {
        Debug.Log( ""Entro nello State di Initialization"" );
    }    
    
    private void FullfillTeaPotWithWater_Enter() {
        Debug.Log( ""Entro nello State FullfillTeaPotWithWater"" );
    }
    
    private void PutTeaBagInside_Enter() {
        Debug.Log( ""Entro nello State PutTeaBagInside"" );
    }
    
    private void PutTeaPotOnStove_Enter() {
        Debug.Log( ""Entro nello State PutTeaPotOnStove,"" );
    }    
    
    private void Completed_Enter() {
        Debug.Log( ""Entro nello Stato Finale"" );
    }

	private void ManageFlow()
	{
		Action transition = null;

		if (nextState == StatesPrepareTea.PutTeaPotOnStove) // se il te √® pronto
		{
			if (/* condizione che mi interessa*/) { 
				transition = () =>
				{
					_stateMachine.ChangeState( nextState ); // vado verso la conclusione
				};
			} else {
				transition = () =>
				{
					// funzione per gestire il cambio di stato dove mi interessa. Magari ricomincio da capo
					_stateMachine.ChangeState( StatesPrepareTea.Initialization );
				};
			}
		}
		else // magari sono in una fase precedente...
 		{
		}
	}

}

----
// IN UN'ALTRA CLASSE, POTRESTE GESTIRE CON UN RIFERIMENTO STATICO GLI STATI INTERNI ALLA FINITE STATE MACHINE

public class ManageStates
{
 	private AudioSource _audioSource;

	public AudioClip comment_FullfillTeaPotWithWater;
    public AudioClip comment_PutTeaBagInside;
    public AudioClip comment_PutTeaPotOnStove;


private void performAudioCommentBasedOnPhase()
    {
        switch (PrepareTea.Instance._stateMachine.State)
        {
            case StatesPrepareTea.FullfillTeaPotWithWater:
                _audioSource.PlayOneShot(comment_FullfillTeaPotWithWater);
                break;
            case StatesPrepareTea.PutTeaBagInsidee:
                _audioSource.PlayOneShot(comment_PutTeaBagInside);
                break;
            case StatesPrepareTea.PutTeaPotOnStove:
                _audioSource.PlayOneShot(comment_PutTeaPotOnStove);
                break;
     
        }

    }
}
"
0a1VTavc,Untitled,youske,Python,Saturday 13th of April 2024 12:51:30 PM CDT,# EC2instance Ëµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà
7jRwmjxF,Untitled,Stoikiti,Lua,Saturday 13th of April 2024 12:19:16 PM CDT,"function widget:GetInfo()
    return {
      name = ""repeat repeat orders"",
      desc = ""a way to keep track of multiple sets of repeat orders and cycling through them"",
      author = ""zombean"",
      date = ""2024"",
      license = ""GNU GPL, v2 or later"",
      layer = 0,
      enabled = true
    }
end

local repeat_orders = {}
local mode_activated = false
local activate_mode_key = 420
local go_to_next_repeat_key = 421

function widget:KeyPress(keyCode, mods, label, utf32char, scanCode, actionList)
  if #actionList then return end -- do nothing if engine has actions for these key pressed
end

function widget:KeyRelease(keyCode, mods, label, utf32char, scanCode, actionList)
  if #actionList then return end -- do nothing if engine has actions for these key pressed
end

function widget:UnitCommand(unitID, unitDefID, unitTeam, cmdID, cmdParams, options, cmdTag)
  --if not on repeat orders return
end

function widget:UnitDestroyed(unitID)
  if repeat_orders[unitID] then
    repeat_orders[unitID] = {}
  end
end

function widget:UnitTaken(unitIT)
  if repeat_orders[unitID] then
    repeat_orders[unitID] = {}
  end
end

function widget:UnitGiven(unitIT)
  if repeat_orders[unitID] then
    repeat_orders[unitID] = {}
  end
end

local millis_start_timer = Spring.GetTimer()
local function millis()
  return math.ceil(Spring.DiffTimers(Spring.GetTimer(), millis_start_timer) * 1000)
end

local next_call = 0

function widget:Update()
  local now_time = millis()
  if next_call > now_time then return end
  next_call = now_time + 1000
  Spring.Echo(os.date(""%H:%M:%S:%MS""), mode_activated)
end"
