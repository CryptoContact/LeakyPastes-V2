id,title,username,language,date,content
pwJJ0DGG,2024-03-09_stats.json,rdp_snitch,JSON,Saturday 9th of March 2024 06:16:15 PM CDT,"{
  ""ip"": {
    ""194.165.16.73"": 6,
    ""36.91.222.100"": 6,
    ""62.204.41.123"": 4,
    ""45.33.87.154"": 2,
    ""87.251.75.145"": 8,
    ""173.239.214.226"": 2,
    ""45.227.254.48"": 8,
    ""212.70.149.146"": 4,
    ""205.210.31.100"": 6,
    ""185.170.144.3"": 4,
    ""45.94.222.14"": 2,
    ""87.251.75.120"": 4,
    ""198.235.24.204"": 6,
    ""46.19.139.234"": 2,
    ""157.245.228.22"": 8,
    ""45.79.94.71"": 2,
    ""45.227.254.55"": 4,
    ""141.98.81.148"": 4,
    ""216.250.252.131"": 2,
    ""152.32.158.69"": 2,
    ""81.19.135.2"": 6,
    ""154.221.22.25"": 8,
    ""205.210.31.99"": 6,
    ""87.251.75.64"": 2,
    ""167.248.133.33"": 2,
    ""103.165.114.4"": 2,
    ""170.64.181.65"": 270,
    ""213.109.202.232"": 6,
    ""182.61.19.81"": 2,
    ""120.240.145.8"": 2,
    ""106.246.227.18"": 4,
    ""198.235.24.195"": 6
  },
  ""asn"": {
    ""AS48721"": 6,
    ""AS7713"": 6,
    ""AS59425"": 4,
    ""AS63949"": 4,
    ""AS208091"": 14,
    ""AS62240"": 2,
    ""AS267784"": 12,
    ""AS204428"": 4,
    ""AS396982"": 24,
    ""AS197414"": 4,
    ""AS212477"": 2,
    ""AS51852"": 2,
    ""AS14061"": 278,
    ""AS209588"": 10,
    ""AS396073"": 2,
    ""AS135377"": 2,
    ""AS142403"": 8,
    ""AS398324"": 2,
    ""AS135872"": 2,
    ""AS208312"": 6,
    ""AS38365"": 2,
    ""AS56040"": 2,
    ""AS3786"": 4
  },
  ""isp"": {
    ""Flyservers S.A."": 28,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Horizon LLC"": 4,
    ""Akamai Technologies, Inc."": 4,
    ""Xhost Internet Solutions LP"": 18,
    ""LogicWeb Inc."": 2,
    ""SS-Net"": 4,
    ""Google LLC"": 24,
    ""RoyaleHosting BV"": 2,
    ""Private Layer INC"": 2,
    ""DigitalOcean, LLC"": 278,
    ""Majestic Hosting Solutions, LLC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Guangzhou Yisu Cloud Limited"": 8,
    ""Censys, Inc."": 2,
    ""Gtpl Kcbpl Broadband PVT LTD"": 2,
    ""Red Byte LLC"": 6,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 2,
    ""China Mobile communications corporation"": 2,
    ""LG DACOM Corporation"": 4
  },
  ""org"": {
    ""Flyservers S.A"": 10,
    ""Telekomunikasi Indonesia"": 6,
    ""Horizon LLC"": 4,
    ""Linode"": 4,
    ""Xhost Internet Solutions"": 14,
    ""NSQ-VENTURE"": 2,
    ""UAB Host Baltic"": 12,
    ""4Media Ltd"": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhostis"": 4,
    ""RoyaleHosting BV"": 2,
    ""Fast Serv Inc."": 2,
    ""DigitalOcean, LLC"": 278,
    ""Majestic Hosting Solutions, LLC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Alviva Holding Limited"": 6,
    ""Guangzhou Yisu Cloud Limited"": 8,
    ""Censys, Inc."": 2,
    ""Abhishek Cables Private Limited"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 2,
    ""China Mobile"": 2,
    ""Boranet"": 4
  },
  ""regionName"": {
    ""Kaunas"": 6,
    ""Jakarta"": 6,
    ""Moscow"": 10,
    ""New Jersey"": 4,
    ""North Holland"": 20,
    ""Vilnius"": 12,
    ""Plovdiv"": 4,
    ""California"": 34,
    ""Geneva"": 2,
    ""Drenthe"": 4,
    ""Texas"": 2,
    ""Maharashtra"": 2,
    ""Hesse"": 6,
    ""Eastern"": 8,
    ""Michigan"": 2,
    ""West Bengal"": 2,
    ""New South Wales"": 270,
    ""Beijing"": 2,
    ""Guangdong"": 2,
    ""Gyeonggi-do"": 4
  },
  ""country"": {
    ""Lithuania"": 18,
    ""Indonesia"": 6,
    ""Russia"": 10,
    ""United States"": 42,
    ""The Netherlands"": 24,
    ""Bulgaria"": 4,
    ""Switzerland"": 2,
    ""India"": 4,
    ""Germany"": 6,
    ""Hong Kong"": 8,
    ""Australia"": 270,
    ""China"": 4,
    ""South Korea"": 4
  },
  ""account"": {
    ""Administr"": 24,
    ""Test"": 30,
    ""(empty)"": 12,
    ""EKFIgcIgF"": 2,
    ""Ftgbeo"": 2,
    ""cuTgFR"": 2,
    ""hello"": 18,
    ""vahaZhies"": 2,
    ""ESqHRW"": 2,
    ""cmFauh"": 2,
    ""qufq2cji"": 8,
    ""beio"": 2,
    ""Administrator"": 92,
    ""Domain"": 12,
    ""CtBWdZGDi"": 2,
    ""pmJHrn"": 2,
    ""mVYINC"": 2,
    ""Whatuptime.com"": 90,
    ""Jakartakini123#"": 90,
    ""pqSJZfVwV"": 2,
    ""hSPsGJ"": 2,
    ""bgAnJy"": 2
  },
  ""keyboard"": {
    ""Unknown"": 402
  },
  ""client_build"": {
    ""Unknown"": 402
  },
  ""client_name"": {
    ""Unknown"": 402
  },
  ""ip_type"": {
    ""Unknown"": 80,
    ""hosting"": 308,
    ""proxy"": 4,
    ""hosting & proxy"": 8,
    ""mobile"": 2
  }
}"
nxDdaMgG,2024-03-09_stats.json,rdp_snitch,JSON,Saturday 9th of March 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.16.73"": 3,
    ""36.91.222.100"": 3,
    ""62.204.41.123"": 2,
    ""45.33.87.154"": 1,
    ""87.251.75.145"": 4,
    ""173.239.214.226"": 1,
    ""45.227.254.48"": 4,
    ""212.70.149.146"": 2,
    ""205.210.31.100"": 3,
    ""185.170.144.3"": 2,
    ""45.94.222.14"": 1,
    ""87.251.75.120"": 2,
    ""198.235.24.204"": 3,
    ""46.19.139.234"": 1,
    ""157.245.228.22"": 4,
    ""45.79.94.71"": 1,
    ""45.227.254.55"": 2,
    ""141.98.81.148"": 2,
    ""216.250.252.131"": 1,
    ""152.32.158.69"": 1,
    ""81.19.135.2"": 3,
    ""154.221.22.25"": 4,
    ""205.210.31.99"": 3,
    ""87.251.75.64"": 1,
    ""167.248.133.33"": 1,
    ""103.165.114.4"": 1,
    ""170.64.181.65"": 135,
    ""213.109.202.232"": 3,
    ""182.61.19.81"": 1,
    ""120.240.145.8"": 1,
    ""106.246.227.18"": 2,
    ""198.235.24.195"": 3
  },
  ""asn"": {
    ""AS48721"": 3,
    ""AS7713"": 3,
    ""AS59425"": 2,
    ""AS63949"": 2,
    ""AS208091"": 7,
    ""AS62240"": 1,
    ""AS267784"": 6,
    ""AS204428"": 2,
    ""AS396982"": 12,
    ""AS197414"": 2,
    ""AS212477"": 1,
    ""AS51852"": 1,
    ""AS14061"": 139,
    ""AS209588"": 5,
    ""AS396073"": 1,
    ""AS135377"": 1,
    ""AS142403"": 4,
    ""AS398324"": 1,
    ""AS135872"": 1,
    ""AS208312"": 3,
    ""AS38365"": 1,
    ""AS56040"": 1,
    ""AS3786"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 14,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Horizon LLC"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""Xhost Internet Solutions LP"": 9,
    ""LogicWeb Inc."": 1,
    ""SS-Net"": 2,
    ""Google LLC"": 12,
    ""RoyaleHosting BV"": 1,
    ""Private Layer INC"": 1,
    ""DigitalOcean, LLC"": 139,
    ""Majestic Hosting Solutions, LLC"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Guangzhou Yisu Cloud Limited"": 4,
    ""Censys, Inc."": 1,
    ""Gtpl Kcbpl Broadband PVT LTD"": 1,
    ""Red Byte LLC"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 1,
    ""China Mobile communications corporation"": 1,
    ""LG DACOM Corporation"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 5,
    ""Telekomunikasi Indonesia"": 3,
    ""Horizon LLC"": 2,
    ""Linode"": 2,
    ""Xhost Internet Solutions"": 7,
    ""NSQ-VENTURE"": 1,
    ""UAB Host Baltic"": 6,
    ""4Media Ltd"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhostis"": 2,
    ""RoyaleHosting BV"": 1,
    ""Fast Serv Inc."": 1,
    ""DigitalOcean, LLC"": 139,
    ""Majestic Hosting Solutions, LLC"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Alviva Holding Limited"": 3,
    ""Guangzhou Yisu Cloud Limited"": 4,
    ""Censys, Inc."": 1,
    ""Abhishek Cables Private Limited"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 1,
    ""China Mobile"": 1,
    ""Boranet"": 2
  },
  ""regionName"": {
    ""Kaunas"": 3,
    ""Jakarta"": 3,
    ""Moscow"": 5,
    ""New Jersey"": 2,
    ""North Holland"": 10,
    ""Vilnius"": 6,
    ""Plovdiv"": 2,
    ""California"": 17,
    ""Geneva"": 1,
    ""Drenthe"": 2,
    ""Texas"": 1,
    ""Maharashtra"": 1,
    ""Hesse"": 3,
    ""Eastern"": 4,
    ""Michigan"": 1,
    ""West Bengal"": 1,
    ""New South Wales"": 135,
    ""Beijing"": 1,
    ""Guangdong"": 1,
    ""Gyeonggi-do"": 2
  },
  ""country"": {
    ""Lithuania"": 9,
    ""Indonesia"": 3,
    ""Russia"": 5,
    ""United States"": 21,
    ""The Netherlands"": 12,
    ""Bulgaria"": 2,
    ""Switzerland"": 1,
    ""India"": 2,
    ""Germany"": 3,
    ""Hong Kong"": 4,
    ""Australia"": 135,
    ""China"": 2,
    ""South Korea"": 2
  },
  ""account"": {
    ""Administr"": 12,
    ""Test"": 15,
    ""(empty)"": 6,
    ""EKFIgcIgF"": 1,
    ""Ftgbeo"": 1,
    ""cuTgFR"": 1,
    ""hello"": 9,
    ""vahaZhies"": 1,
    ""ESqHRW"": 1,
    ""cmFauh"": 1,
    ""qufq2cji"": 4,
    ""beio"": 1,
    ""Administrator"": 46,
    ""Domain"": 6,
    ""CtBWdZGDi"": 1,
    ""pmJHrn"": 1,
    ""mVYINC"": 1,
    ""Whatuptime.com"": 45,
    ""Jakartakini123#"": 45,
    ""pqSJZfVwV"": 1,
    ""hSPsGJ"": 1,
    ""bgAnJy"": 1
  },
  ""keyboard"": {
    ""Unknown"": 201
  },
  ""client_build"": {
    ""Unknown"": 201
  },
  ""client_name"": {
    ""Unknown"": 201
  },
  ""ip_type"": {
    ""Unknown"": 40,
    ""hosting"": 154,
    ""proxy"": 2,
    ""hosting & proxy"": 4,
    ""mobile"": 1
  }
}"
74P8rm76,Untitled,TheStraying11,Lua,Saturday 9th of March 2024 06:02:22 PM CDT,"local chatbox = peripheral.find(""chatBox"")
local prefix = ""!""
local userinput = true
 
local vote = 0
local deathRollPlayers = {}
local deathRollValue = 0

local defaultOwners = {
	""1f6a10f6-b3e1-43f6-92f8-4bf562248aae"" --""TheStraying11""
}

local defaultAdmins = {
	""5c9ebaa4-1411-4d11-9aea-8d208a623b0a"", --""Sheela_B""
	""47fa42c9-8609-4132-beb2-697bf6867e13"" --""BigCountry509""
}

local owners = {}
local admins = {}

local withOpen(file, mode, fn, ...)
	local fh = fs.open(file, mode)
	local success, rval = pcall(fn, fh, ...)
	fh.close()
	return success, rval
end

if fs.exists('owners.json') then
	owners = withOpen('owners.json', 'r',
		function(fh)
			return textutils.unserializeJSON(fh.readAll())
		end
	)
else
	owners = defaultOwners
end

if fs.exists('admins.json') then
	admins = withOpen('admins.json', 'r',
		function(fh)
			return textutils.unserializeJSON(fh.readAll())
		end
	)
else
	admins = defaultAdmins
end

local function saveOwners()
	withOpen('owners.json', 'w', 
		function(fh)
			fh.write(textutils.serializeJSON(owners))
		end
	)
end

local function saveAdmins()
	withOpen('admins.json', 'w', 
		function(fh)
			fh.write(textutils.serializeJSON(owners))
		end
	)
end

saveOwners()
saveAdmins()

local function getUUID(username, trimmed)
	trimmed = trimmed or false

	local responseHandle = http.get('https://api.mojang.com/users/profiles/minecraft/'..username)
	
	if not responseHandle then return nil, 'Request Failed' end
	if responseHandle.getResponseCode ~= 200 then return nil, 'Invalid Request' end
	
	local response = textutils.unserializeJSON(responseHandle.readAll())
	if response.errorMessage then return nil, response.errorMessage end

	if trimmed then
		return response.id
	else
		local trimmedUUID = response.id
		return trimmedUUID:sub(1, 8)..'-'..trimmedUUID:sub(9, 12)..'-'..trimmedUUID:sub(13, 16)..'-'..trimmedUUID:sub(17, 20)..'-'..trimmedUUID:sub(21, #trimmed)
	end
end

local function split(s, delim)
    local delim = delim or "" ""
    local t = {}
    for k, _ in s:gmatch(""([^""..delim..""]+)"") do
        table.insert(t, k)
    end
    return t
end
 
function startswith(String, Start)
   return string.sub(String,1,string.len(Start))==Start
end
 
local function containsValue(a, b)  
    for _, i in pairs(a) do
        if i == b then
            return true
        end
    end
    return false
end
 
local function sendMsg(msg, uuid, isJson)
    local sec = string.char(167)
    local chatprefix = ""&9ChatBot&r""
 
 chatprefix = chatprefix:gsub(""&"", sec)
    msg = msg:gsub(""&"", sec)
    
    if isJson then
        chatbox.sendFormattedMessage(msg, chatprefix)
    elseif user then
        chatbox.sendMessageToPlayer(msg, uuid, chatprefix)
    else
        chatbox.sendMessage(msg, chatprefix)
    end
end
 
local function splice(tbl, first, last)
    return {table.unpack(tbl, first, last)}
end
 
local function doCommand(commands, user, uuid, prefix, cmdname, ...)
    local cmd = commands[cmdname]
    --check if user is allowed to use command
    
    local owner = false
 
    local admin = false
    
    local allowed = false
    
    if containsValue(owners, uuid) then
        owner = true
        admin = true
    elseif containsValue(admins, uuid) then
        admin = true
    end
    
    if cmd.permissionLevel == ""user"" then
        if userinput then
            allowed = true
        elseif admin then
            allowed = true
        else
            sendMsg(""&aSorry, user input is disabled"")
        end
    elseif cmd.permissionLevel == ""admin"" then
        if admin then
            allowed = true
        else
            sendMsg(""&aSorry, you must be a ChatBot administrator to use this command"", uuid)
        end
	elseif cmd.permissionLevel == ""owner"" then
		if owner then
			allowed = true
		else
			sendMsg(""&a Sorry, you must be the ChatBot owner to use this command"", uuid)
		end
    end 
    
    if allowed then
        local status, r = pcall(
            cmd.func, user, uuid, ...
        )
        
        if not status then
            sendMsg(""&aCommand Error"", uuid)
            print(r)
        end
    end
end
 
local descriptions = {}
 
local commands = {
    pronouns = {
        func = function(user, uuid)
            sendMsg(""MY PRONOUNS ARE SHE/THEY"")
        end,
        permissionLevel = ""owner""
    },
	addOwner = {
		func = function(user, uuid, target)
			table.insert(owners, getUUID(target))
			saveOwners()
		end,
		permissionLevel = ""owner""
	}
	addAdmin = {
		func = function(user, uuid, target)
			table.insert(admins, getUUID(target))
			saveAdmins()
		end,
		permissionLevel = ""owner""
	}
	restart = {
		func = function(user, uuid)
		end,
		permissionLevel = ""admin""
	}
    help = {
        func = function(user, uuid)
            sendMsg([[
              {
                ""text"": ""&3&lClick Here"",
                ""clickEvent"":
                  {
                    ""action"":""open_url"",
                    ""value"":""https://pastebin.com/4Pge1v6d""
                  }
              }
            ]], nil, true)
        end,
        permissionLevel = ""user""
    },
    math = {
        func = function(user, uuid, str)
            sendMsg(tostring(load ('return '..str)()))
        end,
        permissionLevel = ""owner""
    },
    ping = {
        func = function(user, uuid)
            sendMsg(""&aPong."")
        end,
        desc = ""&a{command}: replies with 'Pong.'"",
        permissionLevel = ""user""
    },
    roll = {
        func = function(user, uuid, min, max)
            min = min or 100
            if max == nil then
                max = min
                min = 0
            end
            math.randomseed(os.epoch(""utc""))
            local value = math.random(min, max)
            sendMsg(""&a""..tostring(value))

            return value
        end,
        desc = ""&a{command}: rolls a die, {command} max, {command} min max, or {command} (rolls 0, 100 by default)"",
        permissionLevel = ""user""
    },
    link = {
        func = function(user, uuid, url)
            sendMsg([[
              {
                ""text"": ""&b&n]]..url..[["",
                ""clickEvent"":
                  {
                    ""action"":""open_url"",
                    ""value"":""]]..url..[[""
                  }
              }
            ]], nil, true)
        end,
        desc = ""&a{command} url posts a clickable link to url in chat"",
        permissionLevel = ""user""
    },--[[
    deathroll = {
        func = function(user, uuid, subCommand, startingRoll)
            if #deathRollPlayers == 0 then
                if subCommand == ""start"" then
                    deathRollValue = -- can i access commands.roll.func here somehow?
                    -- start the deathroll
                else
                    sendMsg(""&athere's no deathroll in progress, use !deathroll start to start one"")
                end
            elseif #deathRollPlayers == 1 then
                if subCommand = ""join"" then
                    if deathRollPlayers[uuid] then
                        sendMsg(""&ayou can't join your own deathroll!"")
                    else
                        -- add uuid = {user = user, turn = false} to the deathroll
                    end
                elseif subCommand == ""start"" then
                    sendMsg(""&a""..deathRollPlayers)
                end
            end
        end,
        desc = ""&a{command}: roll to the death!, {command} start startingRoll, start a deathroll, you will roll first, {command} join, join the deathroll! only two players can play at once, {command}, continue the deathroll! only the player who's active turn it is can use this command"",
        permissionLevel = ""user""
    },]]
    flip = {
        func = function(user, uuid)
            local coin
            math.randomseed(os.epoch(""utc""))
            if math.random(1, 100) <= 50 then
                coin = ""&aHeads""
            else
                coin = ""&aTails"" 
            end
            sendMsg(coin)
        end,
        desc = ""&a{command}: flips a coin"",
        permissionLevel = ""user""
    },
    funny = {
        func = function(user, uuid, joke)
            local jokestxt = fs.open(""jokes.txt"", ""r"")
            local jokes = {}
            local i
            for i = 1, 1534, 1 do
                table.insert(jokes, jokestxt.readLine())
            end
            jokestxt.close()
            math.randomseed(os.epoch(""utc""))
            joke = joke or math.random(1, #jokes)
            sendMsg(""&aJoke Number ""..tostring(joke).."": ""..(jokes[tonumber(joke)] or ""Sorry, joke not found""))
        end,
        desc = ""&a{command}: replies with a joke, ({command} number gives specific joke [between 1 and 1534])"",
        permissionLevel = ""user""
    },
    toggleInput = {
        func = function(user, uuid)
            userinput =  (not userinput)
            if userinput then
                sendMsg(""&aUser Input Enabled"")
            else
                sendMsg(""&aUser Input Disabled"")
            end 
        end,
        permissionLevel = ""admin""
    }
}
 
while true do
    local event, user, msg, uuid = os.pullEvent(""chat"")
    local cmd = split(msg) -- ""!roll 1 100"" becomes {""!roll"", ""1"", ""100""}
 
    cmd = {
        cmd[1]:sub(1, 1), -- the first character of the ""!roll"" part from earlier
        cmd[1]:sub(2, #cmd[1]), -- the rest of the characters
        unpack(cmd, 2, #cmd), -- the rest of the original table (i.e {'1', '100'}, but unpacked)
    } --[[ i.e ""!roll 1 100"" will end up being
    {
        ""!"",
        ""roll"",
        ""1"",
        ""100""
    }
    ]]
    if cmd[1] ~= prefix then -- checking if the first element is the prefix
        cmd = {cmd[1]..cmd[2], unpack(cmd, 3, #cmd)} -- if not convert it back to a list of words to print out later
    end
 
    -- print the message as a list of words
    term.write(user.."": ["")
    for _, v in pairs(splice(cmd, 1, #cmd-1)) do
        term.write(""\""""..v..""\"""".."", "")
    end
    print(""\""""..cmd[#cmd]..""\""""..""]"")
 
 
    if cmd[1] == prefix  and commands[cmd[2]] ~= nil then -- check if the first part is the prefix, and then if a command exists (i.e is it of the form {""!"", ...})
        doCommand(commands, user, uuid, unpack(cmd)) -- send off the command name, and arguments to be run
    end
end"
Df7ycZF7,112.215.153.118-/sdcard/Premium/useragent.py.py,OBF-XIn,Python,Saturday 9th of March 2024 05:53:40 PM CDT,"# useragent
import random

class Useragent:
    def __init__(self) -> None:
        pass
        
    def useragent_api(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.dix = random.choice(['114.0.0.20.2','114.0.0.38.120','114.0.0.20.70','114.0.0.28.120','114.0.0.0.24','114.0.0.0.41'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540'])
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
            f'Instagram {self.dix} Android ({self.dvc}; {self.dpi_pxl} NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; mt6761; in_ID; 284459224)',
            f'Instagram {self.dix} Android ({self.dvc}; {self.dpi_pxl} MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; mt6761; 284459224)',
        ]))
        
    def useragent_ajax(self):
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        return(f'UCWEB/2.0 (Java; U; MIDP-2.0; en_US; {str(random.choice(self.micromax))}) U2/{random.randint(1,9)}.0.0 UCBrowser/{random.randint(1,9)}.{random.randint(1,9)}.0.{random.randint(30,999)} U2/1.0.0 Mobile UNTRUSTED/{random.randint(1,9)}.0')
        


"
ExksXWub,Untitled,dayrox12,Lua,Saturday 9th of March 2024 05:52:48 PM CDT,loadstring(game:HttpGet('https://rentry.co/qsqn9ni9/raw'))()
cx1UVfdy,LeetCode 1249 - Minimum Remove to Make Valid Parentheses - 53ms solution,nathanwailes,Python,Saturday 9th of March 2024 05:27:07 PM CDT,"class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        stack = []
        s = list(s)
        for i, c in enumerate(s):
            if c == '(':
                stack.append(i)
            elif c == ')':
                if stack:
                    stack.pop()
                else:
                    s[i] = ''
        while stack:
            s[stack.pop()] = ''
        return ''.join(s)
        "
ahZjUdKw,Untitled,JeffGrigg,Java 5,Saturday 9th of March 2024 05:25:14 PM CDT,"import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;

public class CustomerRowMapper implements RowMapper<Customer> {

    @Override
    public Customer mapRow(ResultSet rs, int rowNum) throws SQLException {

        Customer customer = new Customer();
        customer.setID(rs.getLong(""ID""));
        customer.setName(rs.getString(""NAME""));
        customer.setAge(rs.getInt(""AGE""));
        customer.setCreatedDate(rs.getTimestamp(""created_date"").toLocalDateTime());

        return customer;

    }
}


import org.springframework.jdbc.core.JdbcTemplate;

	@Autowired
    private JdbcTemplate jdbcTemplate;
	
	public Customer findByCustomerId(Long id) {

        String sql = ""SELECT * FROM CUSTOMER WHERE ID = ?"";

        return jdbcTemplate.queryForObject(sql, new Object[]{id}, new CustomerRowMapper());

    }"
2xZEn9Ub,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Saturday 9th of March 2024 05:20:47 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_496128.pdf

Working as of:
09 March 2024





















"
FK1G9f2N,background.js,Lizardd8,JavaScript,Saturday 9th of March 2024 05:16:31 PM CDT,"function openOptionsPage() {
  chrome.runtime.openOptionsPage();
}

chrome.action.onClicked.addListener(openOptionsPage);
"
pg1b2Rea,G2A.com Free Gift Card Guide Mar 2024 Updated,HastyBasher0,GetText,Saturday 9th of March 2024 05:13:21 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.

The people who sold me this method will comment on this post telling you not to use it and try to convince you it is a scam.
Mainly a guy named ""Frostyy32"" and ""EUGENE001""

This is not my pastebin account and im using a random inactive one to post this.
 
PDF guide here:
https://smallpdf.com/file#s=e45853d1-004b-4ae4-968e-c4f2afc13e32
 
Working as of:
09 March 2024"
dxRGgGyw,options.js,Lizardd8,JavaScript,Saturday 9th of March 2024 05:13:04 PM CDT,"document.getElementById('save').addEventListener('click', function() {
    let mode = document.getElementById('dropdown').value;
    let input1Value = document.getElementById('input1').value;
    let input2Value = document.getElementById('input2').value;

    let modeNum = mode.replace('mode', '');

    let junkKey = 'Junk' + modeNum; //reads and saves inputs dynamically based on shop IDs
    let goodKey = 'Good' + modeNum;

    let saveData = {};
    saveData[junkKey] = input1Value;
    saveData[goodKey] = input2Value;

    // Use chrome.storage.local.set with a callback
    chrome.storage.local.set(saveData, function() {
        if (chrome.runtime.lastError) {
            console.error('Error saving data:', chrome.runtime.lastError);
        } else {
            alert('Data saved');
        }
    });
});

function loadSavedData(mode) {
    let modeNum = mode.replace('mode', '');

    let junkKey = 'Junk' + modeNum;
    let goodKey = 'Good' + modeNum;
    let keys = [junkKey, goodKey];

    // Use chrome.storage.local.get with a callback
    chrome.storage.local.get(keys, function(results) {
        if (chrome.runtime.lastError) {
            console.error('Error loading data:', chrome.runtime.lastError);
        } else {
            document.getElementById('input1').value = results[junkKey] || ''; // empty string as fallback
            document.getElementById('input2').value = results[goodKey] || '';
        }
    });
}

document.getElementById('dropdown').addEventListener('change', function() {
    let mode = this.value;
    loadSavedData(mode);
});

// Initial load when the page is opened or refreshed
loadSavedData(document.getElementById('dropdown').value);
"
K80tTJXj,highlights.js,Lizardd8,JavaScript,Saturday 9th of March 2024 05:12:22 PM CDT,"const currentURL = window.location.href; 
console.log(currentURL);

const urlParams = new URLSearchParams(new URL(currentURL).search);
const objType = urlParams.get('obj_type');

function DetectItems(junkArray, goodArray) {
    let elementsLow = [];
    for (let value of junkArray) {
        elementsLow.push(...document.querySelectorAll('[data-name=""' + value + '""]'));
    }
    console.log(elementsLow);
    for (let elementLow of elementsLow) {
        elementLow.style.opacity = '0.25';
    }

    let elementsHigh = [];
    for (let value of goodArray) {
        elementsHigh.push(...document.querySelectorAll('[data-name=""' + value + '""]'));
    }
    console.log(elementsHigh);
    for (let elementHigh of elementsHigh) {
        elementHigh.style.border = ""5px solid #00FF40"";
    }
}

if (objType !== null) {
    const ShopID = parseInt(objType, 10);
    
    if (!isNaN(ShopID)) {                 
        console.log(ShopID);
        const junkKey = 'Junk' + ShopID;
        const goodKey = 'Good' + ShopID;

        // Use chrome.storage.local.get with a callback
        chrome.storage.local.get([junkKey, goodKey], function(data) {
            if (chrome.runtime.lastError) {
                console.error('Error retrieving data:', chrome.runtime.lastError);
            } else {
                const junkValue = data[junkKey] || """";
                const junkArray = junkValue.split(""\n"").map(item => item.trim());

                const goodValue = data[goodKey] || """";
                const goodArray = goodValue.split(""\n"").map(item => item.trim());
                
                DetectItems(junkArray, goodArray);
            }
        });
    } else {
        console.log('Invalid number');
    }
} else {
    console.log('obj_type parameter not found in the URL');
}
"
aENtRNeS,Godot 3D Real Time Rope Mesh Generator V.1 + UV1 Mapping,CirilXD,GDScript,Saturday 9th of March 2024 04:42:39 PM CDT,"@tool
extends MeshInstance3D

@export var iterations = 5
@export var dirty = false
@export var resolution = 10

var grapple_hook_position : Vector3 = Vector3.ZERO
var player_position : Vector3 = Vector3.ZERO

var vertex_array : PackedVector3Array = []
var uv1_array : PackedVector2Array = []
var index_array : PackedInt32Array = []
var normal_array : PackedVector3Array = []

var tangent_array : PackedVector3Array = []
var uv_array : PackedVector2Array = []

var points : PackedVector3Array = []
var points_old : PackedVector3Array = []

@export var point_count = 20

var rope_length : float = 0.0
var point_spacing : float = 0.0
@export var rope_width = .02
@export var uv_scale = .5

@export var isDrawing = false
@export var firstTime = true

@onready var temp_player = $tempPlayer
@onready var temp_hook = $tempHook

var texture_height_to_width = 0.5

var gravity_default = ProjectSettings.get_setting(""physics/3d/default_gravity"")

# Called when the node enters the scene tree for the first time.
func _ready():
	SetGrappleHookPosition(temp_hook.position)
	SetPlayerPosition(temp_player.position)
	PreparePoints()
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	SetPlayerPosition(temp_player.position)
#	SetGrappleHookPosition(temp_hook.position)
	
	if isDrawing || dirty:
		if firstTime:
			PreparePoints()
			firstTime = false
		UpdatePoints(delta)
		
		GenerateMesh()
		
		dirty = false

func SetGrappleHookPosition(val : Vector3):
	grapple_hook_position = val
	firstTime = true

func SetPlayerPosition(val : Vector3):
	player_position = val

func StartDrawing():
	isDrawing = true
	
func StopDrawing():
	isDrawing = false

func PreparePoints():
	points.clear()
	points_old.clear()
	
	for i in range(point_count):
		var t = i / (point_count - 1.0)
		
		points.append(lerp(player_position, grapple_hook_position, t))
		points_old.append(points[i])
		
	_UpdatePointSpacing()
	
func _UpdatePointSpacing():
	rope_length = (grapple_hook_position - player_position).length() 
	point_spacing = rope_length / (point_count - 1.0)

func UpdatePoints(delta):
	points[0] = player_position
	points[point_count-1] = grapple_hook_position

	_UpdatePointSpacing()

	for i in range(1, point_count - 1):
		var curr : Vector3 = points[i]
		points[i] = points[i] + (points[i] - points_old[i]) + (
			Vector3.DOWN * gravity_default * delta * delta)
		points_old[i] = curr
	
	for i in range(iterations):
		ConstraintConnections()
	
func ConstraintConnections():
	for i in range(point_count - 1):
		var centre : Vector3 = (points[i+1] + points[i]) / 2.0
		var offset : Vector3 = (points[i+1] - points[i])
		var length : float = offset.length()
		var dir : Vector3 = offset.normalized()
		
		var d = length - point_spacing
		
		if i != 0:
#			points[i] = centre + dir * d / 2.0
			points[i] += dir * d * 0.5
		
		if i + 1 != point_count - 1:
#			points[i+1] = centre - dir * d / 2.0
			points[i+1] -= dir * d * 0.5

func GenerateMesh():
	
	vertex_array.clear()
	uv1_array.clear()
	
	CalculateNormals()

	index_array.clear()
	
	var circumference = 2.0 * PI * rope_width
	var uv_segment_length = circumference * texture_height_to_width
	
	#segment / point
	for p in range(point_count):
		
		var center : Vector3 = points[p]
		
		var forward = tangent_array[p]
		var norm = normal_array[p]
		var bitangent = -norm.cross(forward).normalized()
		
		#UV1
		#V coordinate
#		var distance_from_end_point = (player_position - center).length()
		var distance_from_end_point = (grapple_hook_position - center).length()

		var uv1_v = distance_from_end_point / uv_segment_length
		
		#current resolution
		for c in range(resolution):
			var angle = (float(c) / resolution) * 2.0 * PI
			
			var xVal = sin(angle) * rope_width
			var yVal = cos(angle) * rope_width
			
			var point = (norm * yVal) + (bitangent * xVal) + center
			
			vertex_array.append(point)
			
			#U coordinate
			var maxAngle = 2.0 * PI
			
#			var t_u = (angle - 0.0) / (maxAngle - 0.0)
			var t_u = angle / maxAngle - 0.0
			
#			var uv1_u = lerp(0.0, 1.0, t_u) #This is therefore not necessary
			var uv1_u = t_u
			
			uv1_array.append(Vector2(uv1_u, uv1_v))
			
			if p < point_count - 1:
				var start_index = resolution * p
				#INT values
				index_array.append(start_index + c);
				index_array.append(start_index + c + resolution);
				index_array.append(start_index + ((c + 1) % resolution));
#				index_array.append(start_index + c + resolution);

				index_array.append(start_index + ((c + 1) % resolution));
				index_array.append(start_index + c + resolution);
				index_array.append(start_index + ((c + 1) % resolution) + resolution);
#				index_array.append(start_index + c + resolution);
		
#	if mesh.surface_get_arrays(0).size() != 0: print(mesh.surface_get_arrays(0)[5])
#	print(""<---BEFORE-------------------------"")
	mesh.clear_surfaces()
	
	mesh.surface_begin(Mesh.PRIMITIVE_TRIANGLES)

	var first_triangle : bool = true
	
	var current_iter = 0
	var max_iter = resolution * 2
	
#	print(index_array.size())
	for i in range(index_array.size() / 3):
		var i1 = index_array[3*i]
		var i2 = index_array[3*i+1]
		var i3 = index_array[3*i+2]
		
		var p1 = vertex_array[i1]
		var p2 = vertex_array[i2]
		var p3 = vertex_array[i3]
		
		var uv1 = uv1_array[i1]
		var uv2 = uv1_array[i2]
		var uv3 = uv1_array[i3]
		
		if current_iter == max_iter - 1:
#			uv1.x = ceil(uv1.x) 
#			uv3.x = ceil(uv3.x)
			uv1.x = 1
			uv3.x = 1
			
		elif current_iter == max_iter - 2:
#			uv3.x = ceil(uv3.x)
			uv3.x = 1
		
		var tangent = Plane(p1, p2, p3)
		var normal = tangent.normal
		
		#1. point
		mesh.surface_set_tangent(tangent)
		mesh.surface_set_normal(normal)
		
#		if first_triangle:
#			mesh.surface_set_uv(Vector2.ONE * uv_scale)
#			mesh.surface_set_uv2(Vector2.ONE * uv_scale)
#		else:
#			mesh.surface_set_uv(Vector2.DOWN * uv_scale)
#			mesh.surface_set_uv2(Vector2.DOWN * uv_scale)
			
		mesh.surface_set_uv(uv1 * uv_scale)	
#		mesh.surface_set_uv2((uv1 * uv_scale))
		
		
		
		mesh.surface_add_vertex(p1)
		
		#2. point
		mesh.surface_set_tangent(tangent)
		mesh.surface_set_normal(normal)
		
#		if first_triangle:
#			mesh.surface_set_uv(Vector2.RIGHT * uv_scale)
#			mesh.surface_set_uv2(Vector2.RIGHT * uv_scale)
#		else:
#			mesh.surface_set_uv(Vector2.RIGHT * uv_scale)
#			mesh.surface_set_uv2(Vector2.RIGHT * uv_scale)
			
		mesh.surface_set_uv(uv2 * uv_scale)	
#		mesh.surface_set_uv2(uv2 * uv_scale)	
		
		mesh.surface_add_vertex(p2)
		
		#3. point
		mesh.surface_set_tangent(tangent)
		mesh.surface_set_normal(normal)
		
#		if first_triangle:
#			mesh.surface_set_uv(Vector2.DOWN * uv_scale)
#			mesh.surface_set_uv2(Vector2.DOWN * uv_scale)
#		else:
#			mesh.surface_set_uv(Vector2.ZERO * uv_scale)
#			mesh.surface_set_uv2(Vector2.ZERO * uv_scale)

		mesh.surface_set_uv(uv3 * uv_scale)	
#		mesh.surface_set_uv2(uv3 * uv_scale)
		
		mesh.surface_add_vertex(p3)
		
		first_triangle = !first_triangle
		current_iter += 1
		if current_iter == max_iter: current_iter = 0
	# End drawing.
	mesh.surface_end()
#	print(mesh.surface_get_arrays(0)[5])
	

func CalculateNormals():
	normal_array.clear()
	tangent_array.clear()
	
	var helper
	
	for i in range(point_count):
		var tangent := Vector3(0,0,0)
		var normal := Vector3(0,0,0)
		
		var temp_helper_vector := Vector3(0,0,0)
		
		#first point
		if i == 0:
			tangent = (points[i+1] - points[i]).normalized()
		#last point
		elif i == point_count - 1:
			tangent = (points[i] - points[i-1]).normalized()
		#between
		else:
			tangent = (points[i+1] - points[i]).normalized() + (
				points[i] - points[i-1]).normalized()
			
		if i == 0:
			temp_helper_vector = -Vector3.FORWARD if (
				tangent.dot(Vector3.UP) > 0.5) else Vector3.UP
				
			normal = temp_helper_vector.cross(tangent).normalized()
			
		else:
			var tangent_prev = tangent_array[i-1]
			var normal_prev = normal_array[i-1]
			var bitangent = tangent_prev.cross(tangent)
			
			if bitangent.length() == 0:
				normal = normal_prev
			else:
				var bitangent_dir = bitangent.normalized()
				var theta = acos(tangent_prev.dot(tangent))

				var rotate_matrix = Basis(bitangent_dir, theta)
				normal = rotate_matrix * normal_prev

		tangent_array.append(tangent)
		normal_array.append(normal)
"
cwhvwnWA,Ideas...,silver2row,VHDL,Saturday 9th of March 2024 04:24:54 PM CDT,"-- FROM ALTERA and INTEL online...

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE WORK.filt_cmp.ALL;

ENTITY cmpl_sig IS
PORT (a, b, sel : IN STD_LOGIC;
    x, y, z : OUT STD_LOGIC);
END ENTITY cmpl_sig;

ARCHITECTURE logic OF cmpl_sig IS
BEGIN
    -- Simple Signal Assign...
    X <= (a AND NOT sel) OR (b AND sel);
    -- Cond. Signal Assign...
    Y <= A WHEN sel='0' ELSE
        B;
    -- Selected Signal Assignment
    Z <= a WHEN '0';
         B WHEN '1';
         '0' WHEN OTHERS;
END ARCHITECTURE logic;"
L0bZMjqd,Untitled,Senhit,C++,Saturday 9th of March 2024 04:16:46 PM CDT,"// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BruteforcePrivate {

    address public immutable HACKERS_ADDRESS;
    uint256 public constant MAX_BALANCE = 0.0001 ether;

    constructor(address hackersAddr) {
        HACKERS_ADDRESS = hackersAddr;
    }

    function isSolved() public view returns(bool) {
        return HACKERS_ADDRESS.balance < MAX_BALANCE;
    }
    

    function bruteForce() public view returns(uint) {
        // require(!isSolved(), ""Hacker's balance is already below 0.0001 ETH"");
        // address myAdress = 0x9f8f6A7b445d0C9dDC43e32A8be7cC63C798ba3C;
        
        uint default_answer = uint(bytes32(keccak256(abi.encodePacked(uint(0))))); // for nothing
        for (uint i = 0; i < 100001; i++) {
            bytes32 privateKey = keccak256(abi.encodePacked(i));
            uint pk = uint(privateKey);
            address generatedAddress = address(uint160(uint(keccak256(abi.encodePacked(i)))));
            if (generatedAddress == HACKERS_ADDRESS) {
                return pk;
                // Found matching address, perform withdrawal
                // address payable recipient = payable(msg.sender);
                // uint amountToWithdraw = HACKERS_ADDRESS.balance - MAX_BALANCE;
                // recipient.transfer(amountToWithdraw);
                // break;
            }
        }

        require(isSolved(), ""Failed to find private key"");
        return default_answer;
    }
}
"
Cysymtaf,Untitled,ubidefeo,Python,Saturday 9th of March 2024 04:13:19 PM CDT,"def generate_is_even(max_a):
  f = open('is_even.py', 'w')
  f.write('def is_even(a):\n')
  first_run = True
  for n in range(1, max_a):
    operator = 'if' if first_run else 'elif'
    first_run = False
    return_value = 'True' if n % 2 == 0 else 'False'
    comparison = f' a == {n}: return {return_value}'
    
    f.write(f'\t{operator}{comparison}\n')
  f.close()
  

generate_is_even(50)"
WyCAhbXi,Untitled,Senhit,C++,Saturday 9th of March 2024 04:07:41 PM CDT,"// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BruteforcePrivate {

    address public immutable HACKERS_ADDRESS;
    uint256 public constant MAX_BALANCE = 0.0001 ether;

    constructor(address hackersAddr) {
        HACKERS_ADDRESS = hackersAddr;
    }

    function isSolved() public view returns(bool) {
        return HACKERS_ADDRESS.balance < MAX_BALANCE;
    }

    function bruteForce() public view returns(uint) {
        // require(!isSolved(), ""Hacker's balance is already below 0.0001 ETH"");
        address myAdress = 0x9f8f6A7b445d0C9dDC43e32A8be7cC63C798ba3C;
        
        uint default_answer = uint(bytes32(keccak256(abi.encodePacked(uint(0))))); // for nothing
        for (uint i = 0; i < 100001; i++) {
            bytes32 privateKey = keccak256(abi.encodePacked(i));
            uint pk = uint(privateKey);
            address generatedAddress = address(uint160(uint256(privateKey)));
            if ((generatedAddress == HACKERS_ADDRESS) && (generatedAddress != myAdress)) {
                return pk;
                // Found matching address, perform withdrawal
                // address payable recipient = payable(msg.sender);
                // uint amountToWithdraw = HACKERS_ADDRESS.balance - MAX_BALANCE;
                // recipient.transfer(amountToWithdraw);
                // break;
            }
        }

        require(isSolved(), ""Failed to find private key"");
        return default_answer;
    }
}
"
WaV7Kuak,Vectors,Frun36,Python,Saturday 9th of March 2024 02:47:31 PM CDT,"import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

# Define x and y coordinates
x_coords = np.array([-30, -20, -10, 0, 10, 20])  # in mm
y_coords = np.arange(80, -81, -5)  # from -80 to 80 by 5 mm

# Plot the potential values with rectangles and vectors
plt.figure(figsize=(8, 6))

# Add rectangles
rectangles = [
    Rectangle((0, 25), 20, 20, edgecolor='none', facecolor='black'),   # Rectangle from y=25 to y=45 starting at x=0
    Rectangle((0, -45), 20, 20, edgecolor='none', facecolor='red')  # Rectangle from y=-25 to y=-45 starting at x=0
]

for rect in rectangles:
    plt.gca().add_patch(rect)

# Add legend
legend_handles = [
    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='red', markersize=10, label='Elektroda dodatnia'),
    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='black', markersize=10, label='Elektroda ujemna')
]
plt.legend(handles=legend_handles, loc='upper right')

# Define the points and vectors
points = [(-30, -60), (-30, -40), (-30, -20), (-30, 0), (-30, 20), (-30, 40), (-30, 60),
          (-20, -60), (-20, -40), (-20, -20), (-20, 0), (-20, 20), (-20, 40), (-20, 60),
          (10, -12.5), (10, -2.5), (10, 7.5)]
vectors = [(37, -2), (40, -38), (5, -62), (0, -74), (-20, -68), (-34, -38), (-28, -22),
           (31, -22), (45, -50), (57, -14), (9, -86), (-29, -80), (-52, -36), (-32, -20),
           (0, 0.14933 * 1000), (0, 0.148 * 1000), (0, 0.142 * 1000)]
vectors = [(vector[0] * 0.001, vector[1] * 0.001) for vector in vectors]

# Plot the vectors
for point, vector in zip(points, vectors):
    plt.quiver(*point, *vector, color='blue', scale=1, width=0.005)

# Set axis limits
plt.xlim(-60, 20)
plt.ylim(-80, 80)

plt.xlabel('Współrzędna X [mm]')
plt.ylabel('Współrzędna Y [mm]')
plt.title('Natężenie pola elektrycznego w wybranych punktach')
plt.grid(True)
plt.show()
"
JwGPw5tC,Lines,Frun36,Python,Saturday 9th of March 2024 02:46:07 PM CDT,"import numpy as np
import matplotlib.pyplot as plt

from matplotlib.patches import Rectangle


data = np.array([[1.53,	1.38,	1.21, float('-inf'), float('-inf'), float('-inf')],
                 [1.59,	1.43,	1.23, float('-inf'), float('-inf'), float('-inf')],
                 [1.69,	1.48,	1.26, float('-inf'), float('-inf'), float('-inf')],
                 [1.81,	1.54,	1.29, float('-inf'), float('-inf'), float('-inf')],
                 [1.92,	1.64,	1.32, float('-inf'), float('-inf'), float('-inf')],
                 [2.04,	1.73,	1.36, float('-inf'), float('-inf'), float('-inf')],
                 [2.17,	1.87,	1.44, float('-inf'), float('-inf'), float('-inf')],
                 [2.39,	2.06,	1.55, float('-inf'), float('-inf'), float('-inf')],
                 [2.58,	2.24,	1.72, float('-inf'), float('-inf'), float('-inf')],
                 [2.83,	2.49,	1.99, float('-inf'), float('-inf'), float('-inf')],
                 [3.1,	2.8,	2.35, float('-inf'), float('-inf'), float('-inf')],
                 [3.45,	3.19,	2.82, 0, 0, 0],
                 [3.79,	3.59,	3.30, 2.36, 2.36, 2.36],
                 [4.12,	4.0,	3.78, 3.27, 3.27, 3.27],
                 [4.48,	4.39,	3.88, 4.00, 4.00, 4.00],
                 [4.82,	4.76,	4.62, 4.71, 4.71, 4.71],
                 [5.19,	5.19,	5.28, 5.46, 5.46, 5.46],
                 [5.55,	5.68,	5.78, 6.2, 6.2, 6.2],
                 [5.89,	6.03,	6.33, 7.01333, 7.01333, 7.01333],
                 [6.21,	6.5,	6.76, 7.76, 7.76, 7.76],
                 [6.52,	6.57,	7.14, 8.5166, 8.5166, 8.5166],
                 [6.81,	7.17,	7.55, 10.15, 10.15, 10.15],
                 [7.11,	7.46,	7.92, float('-inf'), float('-inf'), float('-inf')],
                 [7.36,	7.7,	8.18, float('-inf'), float('-inf'), float('-inf')],
                 [7.55,	7.95,	8.4, float('-inf'), float('-inf'), float('-inf')],
                 [7.77,	8.13,	8.57, float('-inf'), float('-inf'), float('-inf')],
                 [7.94,	8.25,	8.63, float('-inf'), float('-inf'), float('-inf')],
                 [8.07,	8.34,	8.7, float('-inf'), float('-inf'), float('-inf')],
                 [8.08,	8.45,	8.76, float('-inf'), float('-inf'), float('-inf')],
                 [8.3,	8.32,	8.81, float('-inf'), float('-inf'), float('-inf')],
                 [8.34,	8.61,	8.86, float('-inf'), float('-inf'), float('-inf')],
                 [8.47,	8.63,	8.89, float('-inf'), float('-inf'), float('-inf')],
                 [8.52,	8.73,	8.9, float('-inf'), float('-inf'), float('-inf')]])


# Define x and y coordinates
x_coords = np.array([-30, -20, -10, 0, 10, 20])  # in mm
y_coords = np.arange(80, -81, -5)  # from -80 to 80 by 5 mm

# Create meshgrid for plotting
X, Y = np.meshgrid(x_coords, y_coords)

# Plot the potential values with contour lines
plt.figure(figsize=(8, 6))
# 'plasma' colormap for better visualization
contour = plt.contourf(X, Y, data, cmap='plasma')
plt.colorbar(label='Potencjał eletryczny [V]')
plt.xlabel('Współrzędna X [mm]')
plt.ylabel('Współrzędna Y [mm]')
plt.title('Potencjał poza kondensatorem płaskim')

# Add contour lines
contour_lines = plt.contour(X, Y, data, colors='k', linewidths=1)

# Display potential values at contour lines
plt.clabel(contour_lines, inline=True, fontsize=8, fmt='%1.2f')

# Add rectangles
rectangles = [
    Rectangle((0, 25), 20, 20, edgecolor='none', facecolor='black'),   # Rectangle from y=25 to y=45 starting at x=0
    Rectangle((0, -45), 20, 20, edgecolor='none', facecolor='red')  # Rectangle from y=-25 to y=-45 starting at x=0
]

for rect in rectangles:
    plt.gca().add_patch(rect)

# Add legend
legend_handles = [
    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='red', markersize=10, label='Elektroda dodatnia'),
    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='black', markersize=10, label='Elektroda ujemna')
]
plt.legend(handles=legend_handles, loc='upper right')

plt.grid(True)
plt.show()
"
uxn5xSSz,Untitled,Surgetin,Lua,Saturday 9th of March 2024 02:35:05 PM CDT,"--client oldal

local emojis = {}
local emojiTimers = {}
local activeImage = {}
local startTick = {}
local afkPlayers = {}


addEventHandler(""onClientMinimize"", root, function()
    local playerVehicle = getPedOccupiedVehicle(localPlayer)
    if playerVehicle and isElement(playerVehicle) then
        triggerServerEvent(""sendEmojiToServer"", localPlayer, afk_icon, true)
    end
end)


addEvent(""sendEmojiToClient"", true)
addEventHandler(""sendEmojiToClient"", root, function(filePath, vehicle, afk)
    afkPlayers[source] = afk 

    emojis[source] = { filePath, vehicle }
    
    if emojiTimers[source] and isTimer(emojiTimers[source]) then
        killTimer(emojiTimers[source])
    end 
    
    activeImage[source] = true
    startTick[source] = getTickCount()
    
    if not afk then
        emojiTimers[source] = setTimer(function(player)
            destroyEmoji(player)
        end, duration, 1, source)
    end
end)


addEventHandler(""onClientRestore"", root, function()
    for player, _ in pairs(afkPlayers) do
        afkPlayers[player] = false
        destroyEmoji(player)
    end
end)


function destroyEmoji(player)
    if emojis[player] then
        destroyElement(emojis[player][1])
        emojis[player] = nil
    end

    if emojiTimers[player] then
        killTimer(emojiTimers[player])
        emojiTimers[player] = nil
    end
    
    activeImage[player] = false
end


addEvent(""onClientMapStarting"", true)
addEventHandler(""onClientMapStarting"", root, function()	
    for player, timer in pairs(emojiTimers) do
        if isTimer(timer) then
            killTimer(timer)
			destroyEmoji(player)
        end
    end
end)


--sever oldal 

function sendEmojiToClient(filePath, vehicle, afk)
    triggerClientEvent(""sendEmojiToClient"", source, filePath, vehicle, afk)
end


function sendEmojiToServer(filePath, afk)
    local vehicle = getPedOccupiedVehicle(source)
    if vehicle and isElement(vehicle) then
        sendEmojiToClient(filePath, vehicle, afk)
    end
end
addEvent(""sendEmojiToServer"", true)
addEventHandler(""sendEmojiToServer"", root, sendEmojiToServer)"
TuKR0RTk,turtle_innstructions,Ruja404,Lua,Saturday 9th of March 2024 02:31:49 PM CDT,"local file = fs.open(""output.csv"", ""r"")
local lines = {}
local coordinates = {}
local ci = 0

function moveTurtle(direction)
	if direction == ""forward"" then
		moveForward()
	elseif direction == ""left"" then
		moveLeft()
	elseif direction == ""right"" then
		moveRight()
	elseif direction == ""backward"" then
		moveBack()
	end
end

function getDirection(position, x, y)
	if x > position.x then
        return ""forward""
    elseif x < position.x then
        return ""backward""
    end
    
    if y > position.y then
        return ""right""
    elseif y < position.y then
        return ""left""
    end
end

function createHole()
	turtle.digDown()
	turtle.down()
	turtle.digDown()

	turtle.up()
	
end

function moveLeft()
	turtle.turnLeft()
	turtle.forward()
	turtle.turnRight()
end

function moveRight()
	turtle.turnRight()
	turtle.forward()
	turtle.turnLeft()
end

function moveForward()
	turtle.forward()
end

function moveBack()
	turtle.back()
end

turtle.refuel()

while true do
    local line = file.readLine()
 
    if not line then break end
    local coordinate = {x = 0, y = 0}
    
    for coord, value in string.gmatch(line, ""(%w+)=(%w+)"") do
        coordinate[coord] = tonumber(value)
    end
    coordinates[ci] = coordinate
    ci = ci + 1
    
    lines[#lines + 1] = line
end
 
file.close()
 
local position = {x=0,y=0}
 
local file = fs.open(""turtle_instructions"", ""w"")
local debug = fs.open(""debug"", ""w"")

for i=0, #coordinates, 1 do

	if not coordinates[i+1] then break end
    local x = coordinates[i+1].x
    local y = coordinates[i+1].y
    
    position.x = coordinates[i].x
    position.y = coordinates[i].y 

	--initialize
	file.writeLine(""digging down"")
	file.writeLine(""coming back up"")
    file.writeLine("""")
	createHole()

	if (position.x + 1 == x or position.x - 1 == x) and position.y == y then
		file.write(""position: "" .. position.x .. "", "" .. position.y .. "" >>> "" .. getDirection(position, x, y))
        file.writeLine("""")

		moveTurtle(getDirection(position, x, y))
		createHole()
		moveTurtle(getDirection(position, x, y))
	elseif (position.y + 1 == y or position.y - 1 == y) and position.x == x then
		file.write(""position: "" .. position.x .. "", "" .. position.y .. "" >>> "" .. getDirection(position, x, y))
        file.writeLine("""")

		moveTurtle(getDirection(position, x, y))
		createHole()
		moveTurtle(getDirection(position, x, y))
	else
		local first = true
		local vector = {}
		vector.x = x - position.x
		vector.y = y - position.y
		
		file.writeLine(""current position: "" .. position.x .. "", "" .. position.y)
		file.writeLine(""transitioning to coordinates: "" .. x .. "", "" .. y)
		file.writeLine(""vector to that position: "" .. vector.x .. "", "" .. vector.y)
		file.writeLine("""")
		--move until on the same x coord
		while position.x ~= x do
			if vector.x > position.x then
				position.x = position.x + 1
				moveTurtle(""forward"")
				if not first then 
					moveTurtle(""forward"")
				end
			else
				position.x = position.x - 1
				moveTurtle(""backward"")
				if not first then 
					moveTurtle(""backward"")
				end
			end
			if first then
				first = false
			end
		end

		--move until on the same y coord
		while position.y ~= y do
			if vector.y > position.y then
				position.y = position.y + 1
				moveTurtle(""right"")
				if not first then 
					moveTurtle(""right"")
				end
			else
				position.y = position.y - 1
				moveTurtle(""left"")
				if not first then 
					moveTurtle(""left"")
				end
			end
			if first then
				first = false
			end
		end

		file.writeLine(""========Transitioning ended========"")
		file.writeLine("""")
	end
	
   
            
end
 
"
hZVh8p1Q,Untitled,uN1ckq,Lua,Saturday 9th of March 2024 02:24:36 PM CDT,"--
--#region Function definitions
--


--
-- Function process line.
-- @param l - length of line to dig
-- @param operate - function to operate over block: function()
-- @param oHandler - handler function for operate exceptions: function(reason:string)
-- @param mHandler - handler function for moving exceptions: function(reason:string)
local function operateLine(l, operate, oHandler, mHandler)
    for i = 1, l, 1 do
        if operate ~= nil then
            operate(oHandler)
        end

        local isMoved, reason = turtle.forward()
        if isDug == true then
            if mHandler ~= nil then
                mHandler(reason)
            else
                print(""No move exception handler found"")
            end
        end
    end
end

local function digItem(handler)
    local isDug, reason = turtle.dig(""left"")
    if isDug == true then
        if handler ~= nil then
            handler(reason)
        else
            print(""No dig exception handler found"")
        end
    end
end


--
-- Function digs line.
-- @param l - length of line to dig
-- @param dHandler - handler function for digging exceptions: function(reason:string)
-- @param mHandler - handler function for moving exceptions: function(reason:string)
local function digLine(l, dHandler, mHandler)
    operateLine(l, digItem)
end


--
-- Function rotates turtle for angle.
-- @param angle - degree to rotate turtle, positive for right, negative for left
local function rotate(angle)
    local rotationFunc = turtle.turnRight
    if angle < 0 then
        rotationFunc = turtle.turnLeft
    end
    for i = 1, math.abs(math.floor(angle / 90)), 1 do
        rotationFunc()
    end
end

--
-- Function to create slice of cable tunnel
-- @param h - height of tunnel
-- @param w - width of tunnel
local function makeSlice(h, w)
    local currentHeight = 1;

    while currentHeight <= h do
        currentHeight = currentHeight + 1
        digLine(w - 1)

        if currentHeight <= h then
            rotate(180)
            turtle.digUp(""left"")
            turtle.up()
        end
    end

    if currentHeight % 2 == 1 then
        print(""ODD HEIGHT"")
        rotate(180)
        operateLine(w - 1)
        -- rotate(-90)
    else
        print(""EVEN HEIGHT"")
        -- rotate(90)
    end


    print(""moving down for"", h)
    for i = 1, h, 1 do
        turtle.down()
    end
end


--
--#endregion Function definitions
--



--
-- STARTER
--
print(""-- Cable placer --"")

--
-- parsing arguments
--
local args = { ... }
print("" --> Canal for length"", args[1])
print("" --> With H/W"", args[2], ""/"", args[3])
local canalLength = tonumber(args[1])
local canalHeight = tonumber(args[2])
local canalWidth = tonumber(args[3])


-- print(""EQUIP PICKAXE"", turtle.equipLeft())
print("" --> Fuel: "", turtle.getFuelLevel())

turtle.dig(""left"")
turtle.forward()
turtle.turnRight()

for i = 1, canalLength, 1 do
    makeSlice(canalHeight, canalWidth)
end

-- print(""UNEQUIP PICKAXE"", turtle.equipLeft())
print("" --> Fuel lasts: "", turtle.getFuelLevel())
"
QpWZV7dS,Mr. Ramsay,onexiv,Python,Saturday 9th of March 2024 02:07:43 PM CDT,"class ChessGame:
    def __init__(self):
        self.board = self.initialize_board()
        self.current_player = 'White'
        self.kings = [ ['e1', 'White'], ['e8', 'Black'] ]

    def initialize_board(self):
        # Initialize an empty 8x8 chessboard with pieces in their starting positions
        board = [[None for _ in range(8)] for _ in range(8)]
        
        # Place white pieces
        board[0] = [['♖', 'R', 'Black'], ['♘', 'N', 'Black'], ['♗', 'B', 'Black'], ['♕', 'Q', 'Black'], ['♔', 'K', 'Black'], ['♗', 'B', 'Black'], ['♘', 'N', 'Black'], ['♖', 'R', 'Black']]
        board[1] = [['♙', 'P', 'Black'], ['♙', 'P', 'Black'], ['♙', 'P', 'Black'], ['♙', 'P', 'Black'], ['♙', 'P', 'Black'], ['♙', 'P', 'Black'], ['♙', 'P', 'Black'], ['♙', 'P', 'Black']]

        # Place black pieces
        board[7] = [['♜', 'r', 'White'], ['♞', 'n', 'White'], ['♝', 'b', 'White'], ['♛', 'q', 'White'], ['♚', 'k', 'White'], ['♝', 'b', 'White'], ['♞', 'n', 'White'], ['♜', 'r', 'White']]
        board[6] = [['♟', 'p', 'White'], ['♟', 'p', 'White'], ['♟', 'p', 'White'], ['♟', 'p', 'White'], ['♟', 'p', 'White'], ['♟', 'p', 'White'], ['♟', 'p', 'White'], ['♟', 'p', 'White']]

        return board

    def print_board(self):
        # Print the current state of the chessboard with positions revealed
        print(""  +------------------------ A +"")
        for row in range(8):
            row_display = f""{8 - row} | ""
            for col in range(8):
                if self.board[row][col] is not None:
                    piece_symbol = self.board[row][col][0]
                else:
                    piece_symbol = '.'
                row_display += f"" {piece_symbol} ""
            row_display += "" |""
            print(row_display)
        print(""  +------------------------ a +"")

    def capture_piece(self, row, col, moving_piece):
        # Remove the piece at the specified position from the board if it belongs to the opposing player
        if self.board[row][col] is not None:
            self.board[row][col] = None

    def move_piece(self, piece, start_row, start_col, end_row, end_col):
        # Move the piece from start position to end position
        if self.board[start_row][start_col][1] == piece:
            self.board[end_row][end_col] = self.board[start_row][start_col]
            self.board[start_row][start_col] = ['.', '.', '.']

    def convert_position(self, position):
        # Convert algebraic notation to array indices
        row = 8 - int(position[1])
        col = ord(position[0]) - ord('a')
        return row, col

    def is_valid_move(self, piece, start_row, start_col, end_row, end_col):
        # Check if the move is within the bounds of the board
        if not (0 <= start_row < 8 and 0 <= start_col < 8 and 0 <= end_row < 8 and 0 <= end_col < 8):
            return False
        
        # Check if there is a piece at the starting position
        if self.board[start_row][start_col] is None:
            return False

        # opponent_color = 'Black' if self.board[start_row][start_col][2] == 'White' else 'White'
        # if self.is_check(opponent_color):
        #     return False  # Move leads to opponent's king being in check
        # Check for obstruction in the path
        if piece in ['R', 'r', 'Q', 'q']:  # Rook or Queen
            if start_row == end_row:  # Horizontal move
                delta_col = 1 if end_col > start_col else -1
                for col in range(start_col + delta_col, end_col, delta_col):
                    if self.board[start_row][col] is None:
                        self.board[start_row][col] = ['.', '.', '.']
                    elif self.board[start_row][col][2] == self.board[start_row][start_col][2]:
                        return False  # Obstruction found
                    elif end_col != col and self.board[end_row][col][2] != self.board[start_row][start_col][2]:
                        return False  # Obstruction found
                    elif end_col == col and self.board[end_row][col][2] != self.board[start_row][start_col][2]:
                        return True  # Obstruction found
                return True
            elif start_col == end_col:  # Vertical move
                delta_row = 1 if end_row > start_row else -1
                for row in range(start_row + delta_row, end_row, delta_row):
                    if self.board[row][start_col] is None:
                        self.board[row][start_col] = ['.', '.', '.']
                    elif self.board[row][start_col][2] == self.board[start_row][start_col][2]:
                        return False  # Obstruction found
                    elif end_row != row and self.board[row][start_col][2] != self.board[start_row][start_col][2]:
                        return False  # Obstruction found
                    elif end_row == row and self.board[row][start_col][2] != self.board[start_row][start_col][2]:
                        return True  # Obstruction found
                return True

        if piece in ['B', 'b', 'Q', 'q']:  # Bishop or Queen
            delta_row = end_row - start_row
            delta_col = end_col - start_col
            if abs(delta_row) == abs(delta_col):  # Diagonal move
                row_step = 1 if start_row < end_row else -1
                col_step = 1 if start_col < end_col else -1
                row = (start_row + row_step) % 8
                col = (start_col + col_step) % 8
                check_row = row
                check_col = col
                while row != 7 and col != 7:
                    if self.board[row][col] is None:
                        self.board[row][col] = ['.', '.', '.']
                    elif self.board[row][col][1].lower() == 'k':
                        print(""Check!"")
                        return True
                    elif self.board[row][col][2] == self.board[start_row][start_col][2]:
                        row_step = 1 if start_row > end_row else -1
                        col_step = 1 if start_col > end_col else -1
                    row = abs(row + row_step) % 8
                    col = abs(col + col_step) % 8

                row_step = 1 if start_row < end_row else -1
                col_step = 1 if start_col < end_col else -1
                row = (start_row + row_step) % 8
                col = (start_col + col_step) % 8
                check_row = row
                check_col = col
                while row != end_row and col != end_col:
                    if self.board[row][col] is None:
                        self.board[row][col] = ['.', '.', '.']
                    elif self.board[row][col][2] == self.board[start_row][start_col][2]:
                        row_step = 1 if start_row > end_row else -1
                        col_step = 1 if start_col > end_col else -1
                    elif self.board[row][col][2] == self.board[start_row][start_col][2]:
                        return False  # Obstruction found
                    elif row == end_row and self.board[row][col][2] == self.board[start_row][start_col][2]:
                        return False  # Obstruction found
                    elif row != end_row and self.board[row][col][2] == self.board[start_row][start_col][2]:
                        return False  # Obstruction found
                    row = abs(row + row_step) % 8
                    col = abs(col + col_step) % 8
        # Check if there's a piece of the same color at the ending position
        if self.board[end_row][end_col] is not None and self.board[end_row][end_col][2] == self.board[start_row][start_col][2]:
            return False  # Obstruction found
        
        if piece == 'N' or piece == 'n':  # Knight
            # Check if the move is a valid knight move
            delta_row = abs(end_row - start_row)
            delta_col = abs(end_col - start_col)
            if (delta_row == 1 and delta_col == 2) or (delta_row == 2 and delta_col == 1):
                if self.board[end_row][end_col] is None:
                    self.board[end_row][end_col] = ['.','.','.']
                if self.board[end_row][end_col][2] == self.board[start_row][start_col][2]:
                    return False
                # Check if the move is a valid knight's move or teleportation
                if delta_row == 2 and delta_col == 1:
                    return True
                elif delta_row == 1 and delta_col == 2:
                    return True
                elif delta_row == 1 and delta_col >= 6:
                    return True
                elif delta_row >= 6 and delta_col == 1:
                    return True
                else:
                    return False

        # Check for piece-specific move validation
        if piece == 'P':  # Pawn
            # Pawn can move forward two squares from starting position
            if start_row == 1 and start_col == end_col and end_row - start_row == 2:
                return True
            if start_col == end_col and end_row - start_row == 1:
                return True
            # Pawn can capture diagonally
            if self.board[end_row][end_col] is not None and self.board[start_row][start_col][2] != self.board[end_row][end_col][2] and abs(start_col - end_col) == 1 and end_row - start_row == 1:
                return True
            return False
        elif piece == 'p':  # Pawn (for black)
            # Pawn can move forward two squares from starting position
            if start_row == 6 and start_col == end_col and start_row - end_row == 2:
                return True
            # Similar logic for black pawn
            if start_col == end_col and start_row - end_row == 1:
                return True
            if self.board[end_row][end_col] is not None and abs(start_col - end_col) == 1 and start_row - end_row == 1:
                return True
            return False
        elif piece == 'R' or piece == 'r':  # Rook
            # Rook moves horizontally or vertically
            return start_row == end_row or start_col == end_col
        elif piece == 'B' or piece == 'b':  # Bishop
            # Bishop moves diagonally
            return abs(end_row - start_row) == abs(end_col - start_col)
        elif piece == 'Q' or piece == 'q':  # Queen
            # Queen combines rook and bishop moves
            return (start_row == end_row or start_col == end_col) or (abs(end_row - start_row) == abs(end_col - start_col))
        elif piece == 'K' or piece == 'k':  # King
            # King moves one square in any direction
            str_temp = chr(end_col + ord('a')) + end_row
            if self.board[end_row][end_col][2] == 'White':
                self.kings[0][0] = str_temp
            elif self.board[end_row][end_col][2] == 'Black':
                self.kings[1][0] = str_temp
            return abs(end_row - start_row) <= 1 and abs(end_col - start_col) <= 1
        else:
            return False  # Default: invalid move
        # Check if there's a piece of the same color at the ending position
        if self.board[end_row][end_col] is not None and self.board[end_row][end_col][2] == self.board[start_row][start_col][2]:
            return False

        return True  # Move is valid

    def is_check(self, piece, start_row, start_col, kings_row, kings_col):
        # Check if the move is within the bounds of the board
        if not (0 <= start_row < 8 and 0 <= start_col < 8 and 0 <= end_row < 8 and 0 <= end_col < 8):
            return False
        
        # Check if there is a piece at the starting position
        if self.board[start_row][start_col] is None:
            return False

        # opponent_color = 'Black' if self.board[start_row][start_col][2] == 'White' else 'White'
        # if self.is_check(opponent_color):
        #     return False  # Move leads to opponent's king being in check
        # Check for obstruction in the path
        if piece in ['R', 'r', 'Q', 'q']:  # Rook or Queen
            if start_row == kings_row:  # Horizontal move
                for i in range(8):
                    if self.board[start_row][i] is None:
                        self.board[start_row][i] = ['.', '.', '.']
                    if self.board[start_row][i][2] != self.board[start_row][i][2] and self.board[start_row][i][1].lower() != 'k':
                        return False
                    if self.board[start_row][i][2] != self.board[start_row][i][2] and self.board[start_row][i][1].lower() == 'k':
                        return True
            elif start_col == kings_col:  # Vertical move
                for i in range(8):
                    if self.board[i][start_col] is None:
                        self.board[i][start_col] = ['.', '.', '.']
                    if self.board[i][start_col][2] != self.board[start_row][start_col][2] and self.board[i][start_col][1].lower() != 'k':
                        return False
                    if self.board[i][start_col][2] != self.board[start_row][start_col][2] and self.board[i][start_col][1].lower() == 'k':
                        return True

        if piece in ['B', 'b', 'Q', 'q']:  # Bishop or Queen
            for i in range(8):
                for j in range(8):
                    if j == i:
                        if self.board[i][j] is None:
                            self.board[i][j] = ['.', '.', '.']
                        if self.board[i][j][2] == self.board[start_row][start_col][2]:
                            break
                        if self.board[i][j][2] != self.board[start_row][start_col][2] and self.board[i][j][1].lower() != 'k':
                            break
                        if self.board[i][j][2] != self.board[start_row][start_col][2] and self.board[i][j][1].lower() == 'k':
                            return True

        if piece == 'N' or piece == 'n':  # Knight
            # Check if the move is a valid knight move
            for i in range(8):
                for j in range(8):
                    delta_row = abs(i - start_row)
                    delta_col = abs(j - start_col)
                    if (delta_row == 1 and delta_col == 2) or (delta_row == 2 and delta_col == 1):
                        if self.board[i][j] is None:
                            self.board[i][j] = ['.','.','.']
                        if self.board[i][j][2] != self.board[start_row][start_col][2] and self.board[i][j][1].lower() == 'k':
                            return True

if __name__ == ""__main__"":
    game = ChessGame()
    current_player = 'White'  # Start with white player
    while True:
        game.print_board()
        print(f""It's {'White' if current_player == 'White' else 'Black'}'s turn."")

        move = input(""Enter your move (e.g., 'N c2 to d4'): "")
        if move.lower() == 'exit':
            break

        move_parts = move.split()
        piece = move_parts[0]
        start_position = move_parts[1]
        end_position = move_parts[3]
        start_row, start_col = game.convert_position(start_position)
        end_row, end_col = game.convert_position(end_position)

        # Check if it's the player's piece
        if game.board[start_row][start_col] is None or game.board[start_row][start_col][2] != current_player:
            print(""Invalid Move! It's not your piece."")
            continue

        # if game.check_endgame_modes(current_player):
        if game.is_valid_move(piece, start_row, start_col, end_row, end_col):
            # game.check_endgame_modes(current_player)
            if game.is_check(piece, start_row, start_col, end_row, end_col):
                print(""Check!"")
            game.move_piece(piece, start_row, start_col, end_row, end_col)

            offset = 0
            if current_player != 'White':
                offset = 1
            king_row, king_col = game.convert_position(game.kings[offset][0])
            if game.is_check(piece, end_row, end_col, king_row, king_col):
            # if game.is_check(piece, end_row, end_col, king_row, king_col):
                print(""Check!"")
            
            # Switch player
            current_player = 'Black' if current_player == 'White' else 'White'
        else:
            print(""Invalid Move!"")
"
eRxKKdZM,Unlocking Free Money &#8211;  6 Ways to Earn on BC.GAME,livebetpro,PHP,Saturday 9th of March 2024 02:02:20 PM CDT,https://www.livebetpro.com/unlocking-free-money-6-ways-to-earn-on-bc-game/
vmAyzuV0,邀您一起看：主页设置,xiaomianao666,JavaScript,Saturday 9th of March 2024 01:23:13 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥主页设置@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInBhcmFtc1wiOlwie1xcXCJjbHNcXFwiOlxcXCJlbGVsaXN0ICBcXFwiLFxcXCJpZFxcXCI6XFxcIuaIkeeahOS4u+mhtSPkuLvpobXorr7nva5cXFwiLFxcXCJsb25nQ2xpY2tcXFwiOlt7XFxcImpzXFxcIjpcXFwiKFxcXFxuKGtleSwgalVybCwgaW5kZXgsIGlzR3JvdXApID0+IHtcXFxcbiAgICBldmFsKGZldGNoKGpVcmwpKTtcXFxcbiAgICBjb25zdCBMb2NhbGZpbGUgPSBIaWtlckhvbWUuZ2V0TG9jYWxmaWxlKCk7XFxcXG4gICAgY29uc3QgYm9va01hcmsgPSBIaWtlckhvbWUuZ2V0Qm9va21hcmtzTGlzdChMb2NhbGZpbGUuZ2V0SXRlbShcXFxcXFxcIkJvb2ttYXJrc0xpc3RcXFxcXFxcIikpO1xcXFxuICAgIGlmIChpc0dyb3VwKSB7XFxcXG4gICAgICAgIHZhciB0ZW0gPSBib29rTWFyay5nZXRfZ3JvdXAoa2V5LCBpbmRleCk7XFxcXG4gICAgICAgIHRlbS5zdGF0dXMgPSAhdGVtLnN0YXR1cztcXFxcbiAgICAgICAgYm9va01hcmsubW9kaWZ5X2dyb3VwKGtleSwgdGVtLCBpbmRleCk7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgdmFyIHRlbSA9IGJvb2tNYXJrLmdldChrZXkpO1xcXFxuICAgICAgICB0ZW0uc3RhdHVzID0gIXRlbS5zdGF0dXM7XFxcXG4gICAgICAgIGJvb2tNYXJrLm1vZGlmeShrZXksIHRlbSk7XFxcXG4gICAgfVxcXFxuICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG59XFxcXG4pKDExLFxcXFxcXFwiaGlrZXI6Ly9hc3NldHMvaG9tZS5qc1xcXFxcXFwiLHVuZGVmaW5lZCxmYWxzZSlcXFwiLFxcXCJ0aXRsZVxcXCI6XFxcIuWFsyDpl61cXFwifSx7XFxcImpzXFxcIjpcXFwiKFxcXFxuKGtleSwgalVybCwgZ3JvdXBOYW1lKSA9PiB7XFxcXG4gICAgZXZhbChmZXRjaChqVXJsKSk7XFxcXG4gICAgcmV0dXJuICQoKS54NWNLZXkoXFxcXFxcXCJtb2RpZnlAXFxcXFxcXCIgKyBrZXkgKyBcXFxcXFxcIkBcXFxcXFxcIiArIChncm91cE5hbWUgfHwgXFxcXFxcXCIjXFxcXFxcXFx1N2E3YVxcXFxcXFxcdTc2N2RcXFxcXFxcXHU3ZWM0I1xcXFxcXFwiKSk7XFxcXG59XFxcXG4pKDExLFxcXFxcXFwiaGlrZXI6Ly9hc3NldHMvaG9tZS5qc1xcXFxcXFwiLHVuZGVmaW5lZClcXFwiLFxcXCJ0aXRsZVxcXCI6XFxcIuS/riDmlLlcXFwifSx7XFxcImpzXFxcIjpcXFwiKFxcXFxuKGtleSwgalVybCwgbiwgaW5kZXgsIGlzR3JvdXApID0+IHtcXFxcbiAgICBldmFsKGZldGNoKGpVcmwpKTtcXFxcbiAgICBjb25maXJtKHt0aXRsZTogXFxcXFxcXCJcXFxcXFxcXHU2ZTI5XFxcXFxcXFx1OTlhOFxcXFxcXFxcdTYzZDBcXFxcXFxcXHU3OTNhXFxcXFxcXCIsIGNvbnRlbnQ6IFxcXFxcXFwiXFxcXFxcXFx1Nzg2ZVxcXFxcXFxcdThiYTRcXFxcXFxcXHU1MjIwXFxcXFxcXFx1OTY2NFxcXFxcXFxcdTMwMGNcXFxcXFxcIiArIG4gKyBcXFxcXFxcIlxcXFxcXFxcdTMwMGQ/XFxcXFxcXCIsIGNvbmZpcm06ICQudG9TdHJpbmcoKGtleSwgalVybCwgaW5kZXgsIGlzR3JvdXApID0+IHtcXFxcbiAgICAgICAgZXZhbChmZXRjaChqVXJsKSk7XFxcXG4gICAgICAgIGNvbnN0IExvY2FsZmlsZSA9IEhpa2VySG9tZS5nZXRMb2NhbGZpbGUoKTtcXFxcbiAgICAgICAgY29uc3QgYm9va01hcmsgPSBIaWtlckhvbWUuZ2V0Qm9va21hcmtzTGlzdChMb2NhbGZpbGUuZ2V0SXRlbShcXFxcXFxcIkJvb2ttYXJrc0xpc3RcXFxcXFxcIikpO1xcXFxuICAgICAgICBpZiAoaXNHcm91cCkge1xcXFxuICAgICAgICAgICAgYm9va01hcmsuZGVsX2dyb3VwKGtleSwgaW5kZXgpO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgYm9va01hcmsuZGVsKGtleSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL1xcXFxcXFxcdTVkZjJcXFxcXFxcXHU1MjIwXFxcXFxcXFx1OTY2NFxcXFxcXFwiO1xcXFxuICAgIH1cXFxcbiAgICAsIGtleSwgalVybCwgaW5kZXgsIGlzR3JvdXApfSk7XFxcXG4gICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxufVxcXFxuKSgxMSxcXFxcXFxcImhpa2VyOi8vYXNzZXRzL2hvbWUuanNcXFxcXFxcIixcXFxcXFxcIuS4u+mhteiuvue9rlxcXFxcXFwiLHVuZGVmaW5lZCxmYWxzZSlcXFwiLFxcXCJ0aXRsZVxcXCI6XFxcIuWIoCDpmaRcXFwifV19XCIsXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIuS4u+mhtfCfp7hcIixcInZlcnNpb25cIjowLFwidXJsXCI6XCJoaWtlcjovL2VtcHR5I25vUmVjb3JkSGlzdG9yeSM7Z2V0O1VURi04O3tVc2VyLUFnZW50QE1vemlsbGEvNS4wIChMaW51eO+8m++8myBBbmRyb2lkIDEx77yb77ybIE1pIDEwIFBybykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg4LjAuNDMyNC4xNTIgTW9iaWxlIFNhZmFyaS81MzcuMzZ9XCIsXCJjb2xfdHlwZVwiOlwiaWNvbl9zbWFsbF80XCIsXCJmaW5kX3J1bGVcIjpcImpzOmV2YWwoZmV0Y2goJ2hpa2VyOi8vYXNzZXRzL2hvbWUuanMnLHt9KSk7SGlrZXJIb21lLmxvYWQoJ3NldHVwcGFnZScpXCIsXCJncm91cFwiOlwi4pGg5o6o6I2QXCIsXCJ1YVwiOlwibW9iaWxlXCIsXCJwcmVSdWxlXCI6XCJcIixcInBhZ2VzXCI6XCJbXVwifSIsInBpY1VybCI6Imh0dHBzOi8vaW1nMTAuMzYwYnV5aW1nLmNvbS9kZGltZy9qZnMvdDEvMTkwMjQxLzM5LzE5NDYyLzQ0MjM5OS82MTIxMGFjMUU1MzYxYWE4MS9hY2Y1MmQ2NDk1Yjk4NjIwLnBuZyIsInRpdGxlIjoi5Li76aG16K6+572uIn0=
ZU5F5cEr,fixed state omv7,Noki,Bash,Saturday 9th of March 2024 01:12:34 PM CDT,"root@kablamo:~# cat /etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

UUID=2c8b69bd-1f52-4ddd-9765-1d3f3ab7a422               /       ext4    noatime,nodiratime,errors=remount-ro    0 1
UUID=13430de0-a9e1-4974-9251-911953a6de78 none            swap    sw              0       0
UUID=33B7-6BEA  /boot/efi       vfat    defaults        0       1
# >>> [openmediavault]
/dev/disk/by-uuid/9c535bde-4e53-451d-9f15-e514e68dafb6          /srv/dev-disk-by-uuid-9c535bde-4e53-451d-9f15-e514e68dafb6      ext4    defaults,nofail,user_xattr,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,acl 0 2
/dev/disk/by-uuid/29b1084b-a7f3-432d-99b9-1f71e9a2c383          /srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383      ext4    defaults,nofail,user_xattr,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,acl 0 2
/srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383/Media/               /export/Media   none    bind,nofail     0 0
# <<< [openmediavault]
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# sudo omv-showkey mntent
                        <mntent>
                                <uuid>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</uuid>
                                <fsname>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx|xxxx-xxxx|/dev/xxx</fsname>
                                <dir>/xxx/yyy/zzz</dir>
                                <type>none|ext2|ext3|ext4|xfs|jfs|iso9660|udf|...</type>
                                <opts></opts>
                                <freq>0</freq>
                                <passno>0|1|2</passno>
                                <hidden>0|1</hidden>
                        </mntent>
      <mntent>
        <uuid>5f0f24ed-0199-4c55-bb0b-54d0acb0f0f7</uuid>
        <fsname>/srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383/Media/</fsname>
        <dir>/export/Media</dir>
        <type>none</type>
        <opts>bind,nofail</opts>
        <freq>0</freq>
        <passno>0</passno>
        <hidden>0</hidden>
        <usagewarnthreshold>85</usagewarnthreshold>
        <comment/>
      </mntent>
      <mntent>
        <uuid>79684322-3eac-11ea-a974-63a080abab18</uuid>
        <fsname>/dev/disk/by-uuid/2c8b69bd-1f52-4ddd-9765-1d3f3ab7a422</fsname>
        <dir>/</dir>
        <type>ext4</type>
        <opts>noatime,nodiratime,errors=remount-ro</opts>
        <freq>0</freq>
        <passno>1</passno>
        <hidden>1</hidden>
      </mntent>
      <mntent>
        <uuid>0ae37dc4-f858-4ed3-81ac-c237a733d660</uuid>
        <fsname>/dev/disk/by-uuid/9c535bde-4e53-451d-9f15-e514e68dafb6</fsname>
        <dir>/srv/dev-disk-by-uuid-9c535bde-4e53-451d-9f15-e514e68dafb6</dir>
        <type>ext4</type>
        <opts>defaults,nofail,user_xattr,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,acl</opts>
        <freq>0</freq>
        <passno>2</passno>
        <hidden>0</hidden>
        <usagewarnthreshold>95</usagewarnthreshold>
        <comment>cctv</comment>
      </mntent>
      <mntent>
        <uuid>c63e6b60-8929-4eb5-9588-177d4b943ba7</uuid>
        <fsname>/dev/disk/by-uuid/29b1084b-a7f3-432d-99b9-1f71e9a2c383</fsname>
        <dir>/srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383</dir>
        <type>ext4</type>
        <opts>defaults,nofail,user_xattr,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,acl</opts>
        <freq>0</freq>
        <passno>2</passno>
        <hidden>0</hidden>
        <usagewarnthreshold>85</usagewarnthreshold>
        <comment/>
      </mntent>
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# sudo omv-showkey fstab
    <fstab>
      <!--
                        <mntent>
                                <uuid>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</uuid>
                                <fsname>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx|xxxx-xxxx|/dev/xxx</fsname>
                                <dir>/xxx/yyy/zzz</dir>
                                <type>none|ext2|ext3|ext4|xfs|jfs|iso9660|udf|...</type>
                                <opts></opts>
                                <freq>0</freq>
                                <passno>0|1|2</passno>
                                <hidden>0|1</hidden>
                        </mntent>
                        -->
      <mntent>
        <uuid>5f0f24ed-0199-4c55-bb0b-54d0acb0f0f7</uuid>
        <fsname>/srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383/Media/</fsname>
        <dir>/export/Media</dir>
        <type>none</type>
        <opts>bind,nofail</opts>
        <freq>0</freq>
        <passno>0</passno>
        <hidden>0</hidden>
        <usagewarnthreshold>85</usagewarnthreshold>
        <comment/>
      </mntent>
      <mntent>
        <uuid>79684322-3eac-11ea-a974-63a080abab18</uuid>
        <fsname>/dev/disk/by-uuid/2c8b69bd-1f52-4ddd-9765-1d3f3ab7a422</fsname>
        <dir>/</dir>
        <type>ext4</type>
        <opts>noatime,nodiratime,errors=remount-ro</opts>
        <freq>0</freq>
        <passno>1</passno>
        <hidden>1</hidden>
      </mntent>
      <mntent>
        <uuid>0ae37dc4-f858-4ed3-81ac-c237a733d660</uuid>
        <fsname>/dev/disk/by-uuid/9c535bde-4e53-451d-9f15-e514e68dafb6</fsname>
        <dir>/srv/dev-disk-by-uuid-9c535bde-4e53-451d-9f15-e514e68dafb6</dir>
        <type>ext4</type>
        <opts>defaults,nofail,user_xattr,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,acl</opts>
        <freq>0</freq>
        <passno>2</passno>
        <hidden>0</hidden>
        <usagewarnthreshold>95</usagewarnthreshold>
        <comment>cctv</comment>
      </mntent>
      <mntent>
        <uuid>c63e6b60-8929-4eb5-9588-177d4b943ba7</uuid>
        <fsname>/dev/disk/by-uuid/29b1084b-a7f3-432d-99b9-1f71e9a2c383</fsname>
        <dir>/srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383</dir>
        <type>ext4</type>
        <opts>defaults,nofail,user_xattr,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,acl</opts>
        <freq>0</freq>
        <passno>2</passno>
        <hidden>0</hidden>
        <usagewarnthreshold>85</usagewarnthreshold>
        <comment/>
      </mntent>
    </fstab>
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# blkid
/dev/sdd: UUID=""a126a76c-25ff-53a6-ae01-c7e848625a9a"" UUID_SUB=""e185aa0d-068a-1d08-ad90-ef6a119ec08f"" LABEL=""kablamo:1"" TYPE=""linux_raid_member""
/dev/md127: UUID=""9c535bde-4e53-451d-9f15-e514e68dafb6"" BLOCK_SIZE=""4096"" TYPE=""ext4""
/dev/sdb: UUID=""f89894f4-351c-f80c-5ee2-c9b8ea3df8ff"" UUID_SUB=""a1a7598c-6caf-d092-91af-2a08d1485200"" LABEL=""kablamo:1"" TYPE=""linux_raid_member""
/dev/sde: UUID=""a126a76c-25ff-53a6-ae01-c7e848625a9a"" UUID_SUB=""271dbb5e-2494-45e6-bcb1-773612c6fff6"" LABEL=""kablamo:1"" TYPE=""linux_raid_member""
/dev/sdc2: UUID=""2c8b69bd-1f52-4ddd-9765-1d3f3ab7a422"" BLOCK_SIZE=""4096"" TYPE=""ext4"" PARTUUID=""948417a9-f97b-457c-b72e-8051c171bb75""
/dev/sdc3: UUID=""13430de0-a9e1-4974-9251-911953a6de78"" TYPE=""swap"" PARTUUID=""ae29293b-6eba-4faf-bdbb-21ed142077b0""
/dev/sdc1: UUID=""33B7-6BEA"" BLOCK_SIZE=""512"" TYPE=""vfat"" PARTUUID=""8a90fd04-b851-404b-9fa7-4587aeec4da1""
/dev/sda: UUID=""f89894f4-351c-f80c-5ee2-c9b8ea3df8ff"" UUID_SUB=""1f23f5e2-1483-ec54-5a12-4b59fdacbe5d"" LABEL=""kablamo:1"" TYPE=""linux_raid_member""
/dev/md1: UUID=""29b1084b-a7f3-432d-99b9-1f71e9a2c383"" BLOCK_SIZE=""4096"" TYPE=""ext4""
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# mdadm --detail --scan
ARRAY /dev/md1 metadata=1.2 name=kablamo:1 UUID=f89894f4:351cf80c:5ee2c9b8:ea3df8ff
ARRAY /dev/md/kablamo:1 metadata=1.2 name=kablamo:1 UUID=a126a76c:25ff53a6:ae01c7e8:48625a9a
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# cat /etc/mdadm/mdadm.conf
# This file is auto-generated by openmediavault (https://www.openmediavault.org)
# WARNING: Do not edit this file, your changes will get lost.

# mdadm.conf
#
# Please refer to mdadm.conf(5) for information about this file.
#

# by default, scan all partitions (/proc/partitions) for MD superblocks.
# alternatively, specify devices to scan, using wildcards if desired.
# Note, if no DEVICE line is present, then ""DEVICE partitions"" is assumed.
# To avoid the auto-assembly of RAID devices a pattern that CAN'T match is
# used if no RAID devices are configured.
DEVICE partitions

# auto-create devices with Debian standard permissions
CREATE owner=root group=disk mode=0660 auto=yes

# automatically tag new arrays as belonging to the local system
HOMEHOST <system>
# instruct the monitoring daemon where to send mail alerts
MAILADDR noki010085@hotmail.com
MAILFROM root

# definitions of existing MD arrays
ARRAY /dev/md1 metadata=1.2 name=kablamo:1 UUID=f89894f4:351cf80c:5ee2c9b8:ea3df8ff
ARRAY /dev/md/kablamo:1 metadata=1.2 name=kablamo:1 UUID=a126a76c:25ff53a6:ae01c7e8:48625a9a
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# mdadm -E /dev/sd[a-z] | grep -E ""dev|UUID|Name|Update|Check""

/dev/sda:
     Array UUID : f89894f4:351cf80c:5ee2c9b8:ea3df8ff
           Name : kablamo:1  (local to host kablamo)
    Device UUID : 1f23f5e2:1483ec54:5a124b59:fdacbe5d
    Update Time : Sat Mar  9 19:09:23 2024
       Checksum : c0d4495 - correct
   Device Role : Active device 1
/dev/sdb:
     Array UUID : f89894f4:351cf80c:5ee2c9b8:ea3df8ff
           Name : kablamo:1  (local to host kablamo)
    Device UUID : a1a7598c:6cafd092:91af2a08:d1485200
    Update Time : Sat Mar  9 19:09:23 2024
       Checksum : 44c92e78 - correct
   Device Role : Active device 0
/dev/sdc:
/dev/sdd:
     Array UUID : a126a76c:25ff53a6:ae01c7e8:48625a9a
           Name : kablamo:1  (local to host kablamo)
    Device UUID : e185aa0d:068a1d08:ad90ef6a:119ec08f
    Update Time : Sat Mar  9 19:09:26 2024
       Checksum : 93794b80 - correct
   Device Role : Active device 1
/dev/sde:
     Array UUID : a126a76c:25ff53a6:ae01c7e8:48625a9a
           Name : kablamo:1  (local to host kablamo)
    Device UUID : 271dbb5e:249445e6:bcb17736:12c6fff6
    Update Time : Sat Mar  9 19:09:26 2024
       Checksum : f57935f4 - correct
   Device Role : Active device 0
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# cat /etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>

UUID=2c8b69bd-1f52-4ddd-9765-1d3f3ab7a422               /       ext4    noatime,nodiratime,errors=remount-ro    0 1
UUID=13430de0-a9e1-4974-9251-911953a6de78 none            swap    sw              0       0
UUID=33B7-6BEA  /boot/efi       vfat    defaults        0       1
# >>> [openmediavault]
/dev/disk/by-uuid/9c535bde-4e53-451d-9f15-e514e68dafb6          /srv/dev-disk-by-uuid-9c535bde-4e53-451d-9f15-e514e68dafb6      ext4    defaults,nofail,user_xattr,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,acl 0 2
/dev/disk/by-uuid/29b1084b-a7f3-432d-99b9-1f71e9a2c383          /srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383      ext4    defaults,nofail,user_xattr,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0,acl 0 2
/srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383/Media/               /export/Media   none    bind,nofail     0 0
# <<< [openmediavault]
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# findmnt --real
TARGET                                                       SOURCE                                 FSTYPE OPTIONS
/                                                            /dev/sdc2                              ext4   rw,noatime,nodiratime,errors=remount-ro
├─/boot/efi                                                  /dev/sdc1                              vfat   rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro
├─/srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383 /dev/md1                               ext4   rw,relatime,jqfmt=vfsv0,usrjquota=aquota.user,grpjquota=aquota.group
├─/var/folder2ram/var/log                                    /dev/sdc2[/var/log]                    ext4   rw,noatime,nodiratime,errors=remount-ro
├─/export/Media                                              /dev/md1[/Media]                       ext4   rw,relatime,jqfmt=vfsv0,usrjquota=aquota.user,grpjquota=aquota.group
├─/srv/dev-disk-by-uuid-9c535bde-4e53-451d-9f15-e514e68dafb6 /dev/md127                             ext4   rw,relatime,jqfmt=vfsv0,usrjquota=aquota.user,grpjquota=aquota.group
├─/var/folder2ram/var/tmp                                    /dev/sdc2[/var/tmp]                    ext4   rw,noatime,nodiratime,errors=remount-ro
├─/var/folder2ram/var/lib/openmediavault/rrd                 /dev/sdc2[/var/lib/openmediavault/rrd] ext4   rw,noatime,nodiratime,errors=remount-ro
├─/var/folder2ram/var/spool                                  /dev/sdc2[/var/spool]                  ext4   rw,noatime,nodiratime,errors=remount-ro
├─/var/folder2ram/var/lib/rrdcached                          /dev/sdc2[/var/lib/rrdcached]          ext4   rw,noatime,nodiratime,errors=remount-ro
├─/var/folder2ram/var/lib/monit                              /dev/sdc2[/var/lib/monit]              ext4   rw,noatime,nodiratime,errors=remount-ro
└─/var/folder2ram/var/cache/samba                            /dev/sdc2[/var/cache/samba]            ext4   rw,noatime,nodiratime,errors=remount-ro
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# lsblk -f
NAME    FSTYPE            FSVER LABEL     UUID                                 FSAVAIL FSUSE% MOUNTPOINTS
sda     linux_raid_member 1.2   kablamo:1 f89894f4-351c-f80c-5ee2-c9b8ea3df8ff                
└─md1   ext4              1.0             29b1084b-a7f3-432d-99b9-1f71e9a2c383    4.1T    43% /export/Media
                                                                                              /srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383
sdb     linux_raid_member 1.2   kablamo:1 f89894f4-351c-f80c-5ee2-c9b8ea3df8ff                
└─md1   ext4              1.0             29b1084b-a7f3-432d-99b9-1f71e9a2c383    4.1T    43% /export/Media
                                                                                              /srv/dev-disk-by-uuid-29b1084b-a7f3-432d-99b9-1f71e9a2c383
sdc                                                                                           
├─sdc1  vfat              FAT32           33B7-6BEA                             504.1M     1% /boot/efi
├─sdc2  ext4              1.0             2c8b69bd-1f52-4ddd-9765-1d3f3ab7a422   53.4G    13% /var/folder2ram/var/cache/samba
│                                                                                             /var/folder2ram/var/lib/monit
│                                                                                             /var/folder2ram/var/lib/rrdcached
│                                                                                             /var/folder2ram/var/spool
│                                                                                             /var/folder2ram/var/lib/openmediavault/rrd
│                                                                                             /var/folder2ram/var/tmp
│                                                                                             /var/folder2ram/var/log
│                                                                                             /
└─sdc3  swap              1               13430de0-a9e1-4974-9251-911953a6de78                [SWAP]
sdd     linux_raid_member 1.2   kablamo:1 a126a76c-25ff-53a6-ae01-c7e848625a9a                
└─md127 ext4              1.0             9c535bde-4e53-451d-9f15-e514e68dafb6  259.1G    86% /srv/dev-disk-by-uuid-9c535bde-4e53-451d-9f15-e514e68dafb6
sde     linux_raid_member 1.2   kablamo:1 a126a76c-25ff-53a6-ae01-c7e848625a9a                
└─md127 ext4              1.0             9c535bde-4e53-451d-9f15-e514e68dafb6  259.1G    86% /srv/dev-disk-by-uuid-9c535bde-4e53-451d-9f15-e514e68dafb6
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# 
root@kablamo:~# tree /dev/disk/
-bash: tree: command not found
root@kablamo:~# apt install tree
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following NEW packages will be installed:
  tree
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 52.5 kB of archives.
After this operation, 116 kB of additional disk space will be used.
Get:1 http://deb.debian.org/debian bookworm/main amd64 tree amd64 2.1.0-1 [52.5 kB]
Fetched 52.5 kB in 0s (338 kB/s)
Selecting previously unselected package tree.
(Reading database ... 53677 files and directories currently installed.)
Preparing to unpack .../tree_2.1.0-1_amd64.deb ...
Unpacking tree (2.1.0-1) ...
Setting up tree (2.1.0-1) ...
root@kablamo:~# tree /dev/disk/
/dev/disk/
├── by-diskseq
│   ├── 1 -> ../../sda
│   ├── 10 -> ../../loop0
│   ├── 11 -> ../../loop1
│   ├── 12 -> ../../loop2
│   ├── 13 -> ../../loop3
│   ├── 14 -> ../../loop4
│   ├── 15 -> ../../loop5
│   ├── 16 -> ../../loop6
│   ├── 17 -> ../../loop7
│   ├── 2 -> ../../sdb
│   ├── 3 -> ../../sdc
│   ├── 4 -> ../../sdd
│   └── 5 -> ../../sde
├── by-id
│   ├── ata-INTEL_SSDSA2M080G2GC_CVPO040500KH080JGN -> ../../sdc
│   ├── ata-INTEL_SSDSA2M080G2GC_CVPO040500KH080JGN-part1 -> ../../sdc1
│   ├── ata-INTEL_SSDSA2M080G2GC_CVPO040500KH080JGN-part2 -> ../../sdc2
│   ├── ata-INTEL_SSDSA2M080G2GC_CVPO040500KH080JGN-part3 -> ../../sdc3
│   ├── ata-Samsung_SSD_870_QVO_8TB_S5SSNF0W800548D -> ../../sda
│   ├── ata-Samsung_SSD_870_QVO_8TB_S5SSNF0W802000M -> ../../sdb
│   ├── ata-TOSHIBA_HDWT720_53D2S1N1S89H -> ../../sdd
│   ├── ata-TOSHIBA_HDWT720_53F2S093S89H -> ../../sde
│   ├── md-name-kablamo:1 -> ../../md127
│   ├── md-uuid-a126a76c:25ff53a6:ae01c7e8:48625a9a -> ../../md127
│   ├── md-uuid-f89894f4:351cf80c:5ee2c9b8:ea3df8ff -> ../../md1
│   ├── wwn-0x5000039c45607b53 -> ../../sdd
│   ├── wwn-0x5000039c45607d8c -> ../../sde
│   ├── wwn-0x5001517959419705 -> ../../sdc
│   ├── wwn-0x5001517959419705-part1 -> ../../sdc1
│   ├── wwn-0x5001517959419705-part2 -> ../../sdc2
│   ├── wwn-0x5001517959419705-part3 -> ../../sdc3
│   ├── wwn-0x5002538f43804f45 -> ../../sda
│   └── wwn-0x5002538f43808d6d -> ../../sdb
├── by-partuuid
│   ├── 8a90fd04-b851-404b-9fa7-4587aeec4da1 -> ../../sdc1
│   ├── 948417a9-f97b-457c-b72e-8051c171bb75 -> ../../sdc2
│   └── ae29293b-6eba-4faf-bdbb-21ed142077b0 -> ../../sdc3
├── by-path
│   ├── pci-0000:00:11.0-ata-1 -> ../../sdb
│   ├── pci-0000:00:11.0-ata-1.0 -> ../../sdb
│   ├── pci-0000:00:11.0-ata-2 -> ../../sda
│   ├── pci-0000:00:11.0-ata-2.0 -> ../../sda
│   ├── pci-0000:00:11.0-ata-3 -> ../../sdc
│   ├── pci-0000:00:11.0-ata-3.0 -> ../../sdc
│   ├── pci-0000:00:11.0-ata-3.0-part1 -> ../../sdc1
│   ├── pci-0000:00:11.0-ata-3.0-part2 -> ../../sdc2
│   ├── pci-0000:00:11.0-ata-3.0-part3 -> ../../sdc3
│   ├── pci-0000:00:11.0-ata-3-part1 -> ../../sdc1
│   ├── pci-0000:00:11.0-ata-3-part2 -> ../../sdc2
│   ├── pci-0000:00:11.0-ata-3-part3 -> ../../sdc3
│   ├── pci-0000:00:11.0-ata-4 -> ../../sdd
│   ├── pci-0000:00:11.0-ata-4.0 -> ../../sdd
│   ├── pci-0000:00:11.0-ata-5 -> ../../sde
│   └── pci-0000:00:11.0-ata-5.0 -> ../../sde
└── by-uuid
    ├── 13430de0-a9e1-4974-9251-911953a6de78 -> ../../sdc3
    ├── 29b1084b-a7f3-432d-99b9-1f71e9a2c383 -> ../../md1
    ├── 2c8b69bd-1f52-4ddd-9765-1d3f3ab7a422 -> ../../sdc2
    ├── 33B7-6BEA -> ../../sdc1
    └── 9c535bde-4e53-451d-9f15-e514e68dafb6 -> ../../md127

6 directories, 56 files
root@kablamo:~# 
"
P030dtD4,KlasaSamochod,cuniszkiewicz,C#,Saturday 9th of March 2024 01:07:38 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OOP_1N128L_Mech_2024
{
    internal class Samochod
    {
        public string marka;
        public string model;
        public string kolor;
        public int predkoscMaksymalna;
        public double pojemnoscSilnika;

        public void Info()
        {
            Console.WriteLine($""Samochód mark: {marka}, model: {model}"" +
                $"", prędkość maksymalna: {predkoscMaksymalna} km/h"");
        }

        public void UruchomSilnik()
        {
            Console.WriteLine(""Silnik został uruchomiony."");
        }
        public void WylaczSilnik()
        {
            Console.WriteLine(""Silnik został wyłączony."");
        }
        public void Jedz(string kierunek)
        {
            switch (kierunek)
            {
                case ""przod"":
                    Console.WriteLine(""Auto jedzie do przodu."");
                    break;
                case ""tyl"":
                    Console.WriteLine(""Auto jedzie do tyłu."");
                    break;
                case ""lewo"":
                    Console.WriteLine(""Auto jedzie w lewo."");
                    break;
                case ""prawo"":
                    Console.WriteLine(""Auto jedzie w prawo."");
                    break;
                default:
                    Console.WriteLine(""Auto ruszyło."");
                    break;
            }  
        }

    }
}
"
UAaEgA7z,KlasaProgram,cuniszkiewicz,C#,Saturday 9th of March 2024 01:06:58 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OOP_1N128L_Mech_2024
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Samochod samochod = new Samochod();

            samochod.marka = ""Fiat"";
            samochod.model = ""Tipo"";
            samochod.kolor = ""Czerwony"";
            samochod.predkoscMaksymalna = 170;
            samochod.pojemnoscSilnika = 1.4;

            samochod.Info();
            samochod.UruchomSilnik();
            samochod.Jedz(""przod""); 
            samochod.Jedz(""tyl"");
            samochod.Jedz(""stoj"");
            samochod.WylaczSilnik();
            Console.ReadKey();

        }
    }
}
"
biwqG0jB,Fast Mirror Check,BitHacker,Bash,Saturday 9th of March 2024 01:06:44 PM CDT,"#!/bin/bash

# Fetch the HTML list of Ubuntu mirrors and extract URLs of up-to-date mirrors
curl -s https://launchpad.net/ubuntu/+archivemirrors | grep -Po '(?<=href="")[^""]*' | grep -Po '(?<=http://)[^""]*' > mirrors.txt
grep -P -B8 ""statusUP"" mirrors.txt | grep -o -P ""(f|ht)tp://[^\""]*"" > filtered_mirrors.txt

# Read the list of mirrors
mapfile -t mirrors < mirrors.txt
total_mirrors=${#mirrors[@]}

# Array to hold speeds
declare -A speeds

echo ""Testing mirrors for speed...""

# Test each mirror with a 2-second timeout
for i in ""${!mirrors[@]}""; do
    # Calculate the sequence number
    seq_num=$((i+1))
    
    # Get the speed in bytes per second and convert to kilobytes per second
    speed_bps=$(curl --max-time 2 -r 0-102400 -s -w %{speed_download} -o /dev/null ""${mirrors[$i]}/ls-lR.gz"")
    speed_kbps=$(echo ""$speed_bps / 1024"" | bc)
    
    # Save the speed with the mirror URL
    speeds[""${mirrors[$i]}""]=$speed_kbps
    
    # Print the mirror and speed
    echo ""[$seq_num/$total_mirrors] ${mirrors[$i]} --> $speed_kbps KB/s""
done

# Sort mirrors by speed and get the top 5
echo ""Top 5 fastest mirrors:""
for mirror in ""${!speeds[@]}""; do
    echo ""$mirror ${speeds[$mirror]}""
done | sort -rn -k2 | head -5

# Ask user if they want to enable the fastest mirror in sources.list
read -p ""Do you want to enable the fastest mirror in sources.list? (y/n): "" choice

if [ ""$choice"" == ""y"" ]; then
    # Backup the original sources.list with sudo
    sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup

    # Get the fastest mirror URL
    fastest_mirror=$(echo ""${!speeds[@]}"" | sort -rn -k2 | head -1 | cut -d' ' -f1)

    # Replace the current mirror with the fastest mirror in sources.list with sudo
    sudo sed -i ""s|http://.*archive.ubuntu.com|${fastest_mirror}|g"" /etc/apt/sources.list

    echo ""Fastest mirror enabled in sources.list.""
else
    echo ""Fastest mirror not enabled in sources.list.""
fi
"
y5EhdGFb,Error at 2nd last LOC: cannot add `Polynomial<i32>` to `Polynomial<i32>`,BilakshanP,Rust,Saturday 9th of March 2024 12:44:32 PM CDT,"pub mod traits {
    //////////////// generated using following macro:
    //
    // #[macro_export]
    // macro_rules! bundle_traits {
    //     ( $trait_name:ident, $($traits:path),+ ) => {
    //         trait $trait_name: $($traits +)+ {}
    //         impl<T: $($traits +)+> $trait_name for T {}
    //     };
    //
    //     ( pub $trait_name:ident, $($traits:path),+ ) => {
    //         pub trait $trait_name: $($traits +)+ {}
    //         impl<T: $($traits +)+> $trait_name for T {}
    //     };
    // }
    //
    //////////////// used as:
    //
    // bundle_traits!(
    //     pub Numeric,
    //     Copy,
    //     Default,
    //     std::ops::Add<Output = Self>,
    //     std::ops::Sub<Output = Self>,
    //     std::ops::Mul<Output = Self>,
    //     std::ops::Div<Output = Self>,
    //     std::ops::Rem<Output = Self>,
    //     std::ops::Neg<Output = Self>,
    //     num::One,
    //     num::Zero,
    //     std::fmt::Debug
    // );
    // bundle_traits!(
    //     pub NumericExtended,
    //     Numeric,
    //     Ord,
    //     PartialEq,
    //     PartialOrd,
    //     std::ops::AddAssign,
    //     std::ops::SubAssign,
    //     std::ops::MulAssign,
    //     std::ops::DivAssign,
    //     std::ops::RemAssign,
    //     std::ops::ShlAssign<u32>,
    //     std::ops::ShrAssign<u32>,
    //     std::ops::BitAndAssign,
    //     std::ops::BitOrAssign,
    //     std::ops::BitXorAssign,
    //     std::ops::Not,
    //     std::ops::Shl<u32, Output = Self>,
    //     std::ops::Shr<u32, Output = Self>,
    //     std::ops::BitAnd<Output = Self>,
    //     std::ops::BitOr<Output = Self>,
    //     std::ops::BitXor<Output = Self>,
    //     num::traits::Pow<u32, Output = Self>,
    //     From<u8>
    // );
    //
    ///////////////// expand code using ""cargo expand""
    //
    //////////////// OUTPUT:

    pub trait Numeric:
        Copy
        + Default
        + std::ops::Add<Output = Self>
        + std::ops::Sub<Output = Self>
        + std::ops::Mul<Output = Self>
        + std::ops::Div<Output = Self>
        + std::ops::Rem<Output = Self>
        + std::ops::Neg<Output = Self>
        + num::One
        + num::Zero
        + std::fmt::Debug
    {
    }
    impl<
            T: Copy
                + Default
                + std::ops::Add<Output = Self>
                + std::ops::Sub<Output = Self>
                + std::ops::Mul<Output = Self>
                + std::ops::Div<Output = Self>
                + std::ops::Rem<Output = Self>
                + std::ops::Neg<Output = Self>
                + num::One
                + num::Zero
                + std::fmt::Debug,
        > Numeric for T
    {
    }
    pub trait NumericExtended:
        Numeric
        + Ord
        + PartialEq
        + PartialOrd
        + std::ops::AddAssign
        + std::ops::SubAssign
        + std::ops::MulAssign
        + std::ops::DivAssign
        + std::ops::RemAssign
        + std::ops::ShlAssign<u32>
        + std::ops::ShrAssign<u32>
        + std::ops::BitAndAssign
        + std::ops::BitOrAssign
        + std::ops::BitXorAssign
        + std::ops::Not
        + std::ops::Shl<u32, Output = Self>
        + std::ops::Shr<u32, Output = Self>
        + std::ops::BitAnd<Output = Self>
        + std::ops::BitOr<Output = Self>
        + std::ops::BitXor<Output = Self>
        + num::traits::Pow<u32, Output = Self>
        + From<u8>
    {
    }
    impl<
            T: Numeric
                + Ord
                + PartialEq
                + PartialOrd
                + std::ops::AddAssign
                + std::ops::SubAssign
                + std::ops::MulAssign
                + std::ops::DivAssign
                + std::ops::RemAssign
                + std::ops::ShlAssign<u32>
                + std::ops::ShrAssign<u32>
                + std::ops::BitAndAssign
                + std::ops::BitOrAssign
                + std::ops::BitXorAssign
                + std::ops::Not
                + std::ops::Shl<u32, Output = Self>
                + std::ops::Shr<u32, Output = Self>
                + std::ops::BitAnd<Output = Self>
                + std::ops::BitOr<Output = Self>
                + std::ops::BitXor<Output = Self>
                + num::traits::Pow<u32, Output = Self>
                + From<u8>,
        > NumericExtended for T
    {
    }
}

// use vectra::traits::{Numeric, NumericExtended};

use traits::{Numeric, NumericExtended};

#[derive(Clone, Debug)]
pub struct Polynomial<T: Numeric> {
    degree: usize,
    coefficients: Vec<T>,
}

impl<T: Numeric> Default for Polynomial<T> {
    fn default() -> Self {
        Self {
            degree: 0,
            coefficients: vec![T::zero(); 1],
        }
    }
}

impl<T: Numeric> Polynomial<T> {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn from_coefficients(coefficients: Vec<T>) -> Self {
        let degree: usize = coefficients.len() - 1;
        Self {
            degree,
            coefficients,
        }
    }

    pub fn degree(&self) -> usize {
        self.degree
    }

    pub fn coefficients(&self) -> &Vec<T> {
        &self.coefficients
    }

    pub fn get_degree(&self) -> usize {
        self.degree
    }

    pub fn get_coefficient(&self, degree: usize) -> T {
        if degree > self.degree {
            T::zero()
        } else {
            self.coefficients[degree]
        }
    }

    pub fn get_coefficients(&self) -> &Vec<T> {
        &self.coefficients
    }

    pub fn set_degree(&mut self, degree: usize) {
        if degree > self.degree {
            self.degree = degree;
            self.coefficients.resize(degree + 1, T::zero());
        }
    }

    pub fn set_coefficient(&mut self, degree: usize, coefficient: T) {
        self.set_degree(degree);
        self.coefficients[degree] = coefficient;
    }
}

impl<T: NumericExtended> Polynomial<T> {
    pub fn evaluate(&self, x: T) -> T {
        let mut result: T = T::zero();
        for (i, coefficient) in self.coefficients.iter().enumerate() {
            result = result + *coefficient * x.pow((self.degree - i) as u32);
        }
        result
    }
}

impl<T: std::ops::Add<Output = T> + Numeric> Polynomial<T> {
    pub fn add(&self, other: &Self) -> Self {
        let mut result: Polynomial<T> = Self::new();
        result.set_degree(self.degree.max(other.degree));

        for i in 0..=result.degree {
            result.set_coefficient(i, self.get_coefficient(i) + other.get_coefficient(i));
        }

        result
    }
}

impl<T: std::ops::Sub<Output = T> + Numeric> Polynomial<T> {
    pub fn sub(&self, other: &Self) -> Self {
        let mut result: Polynomial<T> = Self::new();
        result.set_degree(self.degree.max(other.degree));

        for i in 0..=result.degree {
            result.set_coefficient(i, self.get_coefficient(i) - other.get_coefficient(i));
        }

        result
    }
}

impl<T: std::ops::Mul<Output = T> + Numeric> Polynomial<T> {
    pub fn mul(&self, other: &Self) -> Self {
        let mut result: Polynomial<T> = Self::new();
        result.set_degree(self.degree * other.degree);

        for i in 0..=self.degree {
            for j in 0..=other.degree {
                result.set_coefficient(
                    i + j,
                    result.get_coefficient(i + j)
                        + self.get_coefficient(i) * other.get_coefficient(j),
                );
            }
        }

        result
    }
}

impl<T: std::fmt::Display + Numeric> Polynomial<T> {
    pub fn display(&self) {
        let mut formatted_string = String::new();

        for (i, coefficient) in self.coefficients.iter().enumerate() {
            if i == 0 {
                formatted_string.push_str(&format!(""{}"", coefficient));
            } else {
                formatted_string.push_str(&format!("" + {}x^{}"", coefficient, i));
            }
        }

        println!(""{}"", formatted_string);
    }
}

impl<T: std::fmt::Display + NumericExtended> std::fmt::Display for Polynomial<T> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let mut formatted_string = String::new();

        let mut is_first_term = true;

        for (degree, coefficient) in self.coefficients.iter().enumerate().rev() {
            if coefficient != &T::zero() {
                let mut coefficient = *coefficient;
                let is_neg = coefficient < T::zero();
                let sign = if is_neg {
                    coefficient = -coefficient;
                    ""- ""
                } else {
                    ""+ ""
                };

                if is_first_term {
                    if is_neg {
                        formatted_string.push_str(sign);
                    }
                    is_first_term = false;
                } else {
                    formatted_string.push(' ');
                    formatted_string.push_str(sign);
                }

                if degree == 0 {
                    formatted_string.push_str(&format!(""{}"", coefficient));
                } else if degree == 1 {
                    formatted_string.push_str(&format!(""{}x"", coefficient));
                } else {
                    formatted_string.push_str(&format!(""{}x^{}"", coefficient, degree));
                }
            }
        }

        write!(f, ""{}"", formatted_string)
    }
}

fn main() {
    let mut p1: Polynomial<i32> = Polynomial::new();
    let mut p2: Polynomial<i32> = Polynomial::new();

    p1.set_coefficient(2, 3);
    p1.set_coefficient(1, 2);
    p1.set_coefficient(0, 1);

    p2.set_coefficient(3, 4);
    p2.set_coefficient(2, 3);
    p2.set_coefficient(1, 2);
    p2.set_coefficient(0, 1);

    println!(""p1: {}"", p1);
    println!(""p2: {}"", p2);

    let p3 = p1.add(&p2);
    let p4 = p1.sub(&p2);
    let p5 = p1.mul(&p2);

    println!(""p1 + p2: {}"", p3);
    println!(""p1 - p2: {}"", p4);
    println!(""p1 * p2: {}"", p5);

    let a = p1 + p1; 	// cannot add `Polynomial<i32>` to `Polynomial<i32>`rustc Click for full compiler diagnostic
						// main.rs(350, 13): Polynomial<i32>
						// main.rs(350, 18): Polynomial<i32>
						// main.rs(150, 1): an implementation of `std::ops::Add` might be missing for `Polynomial<i32>`
						// arith.rs(76, 1): the trait `std::ops::Add` must be implemented
}
"
hWtrypb5,labyrinth generator debug,Ruja404,Lua,Saturday 9th of March 2024 12:36:43 PM CDT,"local logger = fs.open(""turtle_instructions"", ""w"")
local lines = {}
local coordinates = {}
local ci = 0
debug = fs.open(""debug"", ""w"")

function moveTurtle(direction)
	if direction == ""forward"" then
		moveForward()
	elseif direction == ""left"" then
		moveLeft()
	elseif direction == ""right"" then
		moveRight()
	elseif direction == ""backward"" then
		moveBack()
	end
end

function getDirection(position, x, y)
	if x > position.x then
        return ""forward""
    elseif x < position.x then
        return ""backward""
    end
    
    if y > position.y then
        return ""right""
    elseif y < position.y then
        return ""left""
    end
end

function createHole()
	logger.writeLine(""digging hole"")
	
end

function moveLeft()
	--turtle.turnLeft()
	--turtle.forward()
	--turtle.forward()
	--turtle.turnRight()
end

function moveRight()
	--turtle.turnRight()
	--turtle.forward()
	--turtle.forward()
	--turtle.turnLeft()
end

function moveForward()
	--turtle.forward()
	--turtle.forward()
end

function moveBack()
	--turtle.back()
	--turtle.back()
end

turtle.refuel()
--turtle.forward()

local file = fs.open(""output.csv"", ""r"")
while true do
    local line = file.readLine()
 
    if not line then break end
    local coordinate = {x = 0, y = 0}
    
    for coord, value in string.gmatch(line, ""(%w+)=(%w+)"") do
        coordinate[coord] = tonumber(value)
    end
    coordinates[ci] = coordinate
    ci = ci + 1
    
    lines[#lines + 1] = line
end
 

 
local position = {x=0,y=0}
 


for i=0, #coordinates, 1 do

	if not coordinates[i+1] then break end
    local x = coordinates[i+1].x
    local y = coordinates[i+1].y
    
    position.x = coordinates[i].x
    position.y = coordinates[i].y 

	--initialize
	createHole()

	if (position.x + 1 == x or position.x - 1 == x) and position.y == y then
		logger.writeLine(""2times position: "" .. position.x .. "", "" .. position.y .. "" >>> "" .. getDirection(position, x, y))

		--moveTurtle(getDirection(position, x, y))
		--createHole()
		--moveTurtle(getDirection(position, x, y))

	elseif (position.y + 1 == y or position.y - 1 == y) and position.x == x then
		logger.writeLine(""2times position: "" .. position.x .. "", "" .. position.y .. "" >>> "" .. getDirection(position, x, y))

		--moveTurtle(getDirection(position, x, y))
		--createHole()
		--moveTurtle(getDirection(position, x, y))

	else
		local first = true
		local moveAfterTransission = """"
		local vector = {}
		vector.x = x - position.x
		vector.y = y - position.y
		
		logger.writeLine(""current position: "" .. position.x .. "", "" .. position.y)
		logger.writeLine(""transitioning to coordinates: "" .. x .. "", "" .. y)
		logger.writeLine(""vector to that position: "" .. vector.x .. "", "" .. vector.y)
		logger.writeLine(""/////////////////////////"")
		--move until on the same x coord
		while position.x ~= x do
			if vector.x > position.x then
				position.x = position.x + 1

				if first then
					logger.writeLine(""moving once forward: "" .. position.x .. "", "" .. position.y)
					moveAfterTransission= ""forward""
					--moveTurtle(""forward"")
				else
					logger.writeLine(""2times moving forward: "" .. position.x .. "", "" .. position.y)
					--moveTurtle(""forward"")
					--moveTurtle(""forward"")
				end
				

			else
				position.x = position.x - 1

				if first then
					logger.writeLine(""moving once backward: "" .. position.x .. "", "" .. position.y)
					--moveAfterTransission= ""backward""
					--moveTurtle(""backward"")
				else

					logger.writeLine(""2times moving backward: "" .. position.x .. "", "" .. position.y)
					--moveTurtle(""backward"")
					--moveTurtle(""backward"")
				end

			end
			if first then
				first = false
			end
		end

		--move until on the same y coord
		while position.y ~= y do
			if vector.y > position.y then
				position.y = position.y + 1

				if first then
					logger.writeLine(""moving once right: "" .. position.x .. "", "" .. position.y)
					moveAfterTransission= ""right""
					--moveTurtle(""right"")
				else
					logger.writeLine(""2times moving right: "" .. position.x .. "", "" .. position.y)
					--moveTurtle(""right"")
					--moveTurtle(""right"")
				end
				

			else
				position.y = position.y - 1
				
				if first then
					logger.writeLine(""moving once left: "" .. position.x .. "", "" .. position.y)
					--moveAfterTransission= ""left""
					--moveTurtle(""left"")
				else
					logger.writeLine(""2times moving left: "" .. position.x .. "", "" .. position.y)
					--moveTurtle(""left"")
					--moveTurtle(""left"")
				end
				

			end
			if first then
				first = false
			end
		end

		createHole()
		logger.writeLine(""moving once after transmission "" .. moveAfterTransission .. "": "" .. position.x .. "", "" .. position.y)
		moveTurtle(moveAfterTransission)
		
		logger.writeLine(""========Transitioning ended========"")
		debug.writeLine(""current position: "" .. position.x .. "", "" .. position.y)
		debug.writeLine(""vector: "" .. vector.x .. "", "" .. vector.y)
		debug.writeLine(""current vertex should be: "" .. x .. "", "" .. y)
		logger.writeLine(""==================================="")
	end
	
   
            
end
logger.close()
"
8neCE3HX,Untitled,Rofyda_Elghadban1,C++,Saturday 9th of March 2024 11:52:13 AM CDT," #include <bits/stdc++.h> 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define sz(x) (int)(x.size())
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 /******************************************************************************/
 using namespace std;
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }
 /******************************************************************************/
 /*Monotonic Stack ""Next Greater Element"" Zero base*/
 vector<int>monotonic_stack(int n,vector<int>&v){
  int sz=v.size();
  vector<int>ans(sz);
  for(int i=0;i<ans.size();i++){
    ans[i]=-1;
  }
  stack<int>s;
  s.push(0);
  int i=1;
  while(i<v.size()){
    while(s.size()!=0&&v[s.top()]<v[i]){
      ans[s.top()]=i;
      s.pop();
    }
    s.push(i);
    i++;
  }
  return ans;
 }
 /******************************************************************************/
 /*Monotonic Stack ""Next Smaller Element"" Zero base*/
 vector<int>monotonic_stack(int n,vector<int>&v){
  int sz=v.size();
  vector<int>ans(sz);
  for(int i=0;i<ans.size();i++){
    ans[i]=-1;
  }
  stack<int>s;
  s.push(0);
  int i=1;
  while(i<v.size()){
    while(s.size()!=0&&v[s.top()]>v[i]){
      ans[s.top()]=i;
      s.pop();
    }
    s.push(i);
    i++;
  }
  return ans;
 }
 /******************************************************************************/
 /*Monotonic Stack ""Previous Smaller Element"" Zero base*/
 vector<int>monotonic_stack(int n,vector<int>&v){
  int sz=v.size();
  vector<int>ans(sz);
  for(int i=0;i<ans.size();i++){
    ans[i]=-1;
  }
  stack<int>s;
  s.push(v.size()-1);
  int i=v.size()-1;
  while(i>=1){
    while(s.size()!=0&&v[s.top()]>v[i]){
      ans[s.top()]=i;
      s.pop();
    }
    s.push(i);
    i--;
  }
  return ans;
 }
 /******************************************************************************/
 /*Monotonic Stack ""Previous Greater Element"" Zero base*/
 vector<int>monotonic_stack(int n,vector<int>&v){
  int sz=v.size();
  vector<int>ans(sz);
  for(int i=0;i<ans.size();i++){
    ans[i]=-1;
  }
  stack<int>s;
  s.push(v.size()-1);
  int i=v.size()-1;
  while(i>=1){
    while(s.size()!=0&&v[s.top()]<v[i]){
      ans[s.top()]=i;
      s.pop();
    }
    s.push(i);
    i--;
  }
  return ans;
 }
 /******************************************************************************/
 ll gcd(ll num1,ll num2){
  while(num2!=0){
    ll temp=num1;
    num1=num2;
    num2=temp%num1;
  }
  return num1;
 }
 /******************************************************************************/
 ll lcm(ll num1,ll num2){
  return(num1/gcd(num1,num2))*num2;
 }
 /******************************************************************************/
 bool prime(ll n){
  if(n<2){
    return false;
  }for(ll i=2;i<=n/i;i++){
    if(n%i==0){
      return false;
    }
  }
  return true;
 }
 /******************************************************************************/
 vector<int>factors(int n){
  vector<int>v;
  for(int i=1;i<=n/i;i++){
    if(n%i==0){
      v.push_back(i);
      if(i!=n/i){
        v.push_back(n/i);
      }
    }
  }
  return v;
 }
 /******************************************************************************/
 vector<int>prime_factors(int n){
  vector<int>v;
  for(int i=2;i<=n/i;i++){
    while(n%i==0){
      n/=i;
      v.push_back(i);
    }
  }
  if(n!=1){
    v.push_back(n);
  }
  return v;
 }
 /******************************************************************************/
 void binary(ll n){
  ll x=n;
  string s="""";
  while(n>0){
    if(n%2==0){
      s+=to_string(0);
    }else{
      s+=to_string(1);
    }
    n/=2; 
  }
  ll sum=0;
  for(int i=0;i<s.size();i++){
    sum+=s[i]-'0';
  }
  if(x%sum==0){
    cout<<""YES""<<endl;
  }else{
    cout<<""NO""<<endl;
  }
 }
 /******************************************************************************/
 /*Print num data type(__int 128)*/
 void print(__int 128 x){
  string num;
  while(x){
    num.push_back(x%10+'0');
    x/=10;
  }
  reverse(all(num));
  cout<<num<<""\n"";
 }
 /******************************************************************************/
 ll add(ll a,ll b,ll m){
  return ((a%m)+(b%m))%m;
 }
 /******************************************************************************/
 ll sub(ll a,ll b,ll m){
  return ((a%m)-(b%m)+m)%m;
 }
 /******************************************************************************/
 ll mul(ll a,ll b,ll m){
  return ((a%m)*(b%m))%m;
 }
 /******************************************************************************/
 /*MEX: is the smallest whole number that is not present in the array.*/
 int mex(int n,vector<int>&v){
  sort(v.begin(),v.end());
  int mex=0;
  for(int i=0;i<n;i++){
    if(v[i]==mex){
      mex++;
    }
  }
  return mex;
 }
 /******************************************************************************/
 /*Next_Permutation*/
 vector<vector<int>>nextpermutation(int n,vector<int>&v){
  ll size=1;
  for(int i=1;i<=n;i++){
    size*=i;
  }
  vector<vector<int>>ans(size);
  int counter=0;
  sort(v.begin(),v.end());
  do{
    for(int i=0;i<n;i++){
      ans[counter].push_back(v[i]);
    }
    counter++;
  }while(next_permutation(v.begin(),v.end()));
  return ans;
 }
 /******************************************************************************/
 /*Prev_Permutation*/
 vector<vector<int>>prevpermutation(int n,vector<int>&v){
  ll size=1;
  for(int i=1;i<=n;i++){
    size*=i;
  }
  vector<vector<int>>ans(size);
  int counter=0;
  sort(v.begin(),v.end());
  reverse(v.begin(),v.end());
  do{
    for(int i=0;i<n;i++){
      ans[counter].push_back(v[i]);
    }
    counter++;
  }while(prev_permutation(v.begin(),v.end()));
  return ans;
 }
 /******************************************************************************/
 /*Kadane max sum of contiguous subarray*/
 ll kadane_max_sum(int n,vector<int>&v){
  ll sum=0,ans=LLONG_MIN;
  for(int i=0;i<n;i++){
    sum+=v[i];
    ans=max(ans,sum);
    sum=max(sum,0ll);
  }
  return ans;
 } 
 /******************************************************************************/
 /*Kadane min sum of contiguous subarray*/
 ll kadane_min_sum(int n,vector<int>&v){
  ll sum=0,ans=LLONG_MAX;
  for(int i=0;i<n;i++){
    sum+=v[i];
    ans=min(ans,sum);
    sum=min(sum,0ll);
  }
  return ans;
 } 
 /******************************************************************************/
 /*Seive of eratosthenes*/
 bool composite[n+1];
 void sieve(){
  composite[0]=composite[1]=1;
  for(ll i=2;i<=n/i;i++){
    if(composite[i]!=1){
      for(int j=i*i;j<=n;j+=i){
        composite[j]=1;
      }
    }
  }
 }
 /******************************************************************************/
 /*n->number, x->power*/
 int bin_exp(int n,int x){
  int res=1;
  while(x>0){
    if(x%2==1){
      res*=x;
    }
    n*=n;
    x/=2;
  }
  return res;
 }
 /******************************************************************************/
 /* (n*n)->long long,int ""%m"" */
 int modular_exp(int n,int x,int m){
  int res=1;
  while(x>0){
    if(x%2==1){
      res=(res*n)%m;
    }
    n=(n%m*n%m)%m;
    x/=2;
  }
  return res;
 }
 /******************************************************************************/
 void solve(){

 }

 int main(){
  Rofyda_Elghadban(); 
  int t=1;  
  // cin>>t;
  while(t--){
    solve();
  }
  return 0;
 }"
A8tW5QU5,LeetCode 314 - Binary Tree Vertical Order Traversal - 2024.03.09 solution,nathanwailes,Python,Saturday 9th of March 2024 11:43:46 AM CDT,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        # handle the case where the input is empty
        if not root: return []

        # create some intermediate data structures / variables that will let us generate the answer
        level_order_traversal = []  # node and col_offset
        min_col_offset = 0
        max_col_offset = 0

        # populate the intermediate data structures / variables
        queue = [[root, 0]]
        while queue:
            current_node, col_offset = queue.pop(0)

            # update our intermediate data structures / variables
            level_order_traversal.append([current_node, col_offset])
            min_col_offset = min(min_col_offset, col_offset)
            max_col_offset = max(max_col_offset, col_offset)

            # add children to the queue
            if current_node.left:
                queue.append([current_node.left, col_offset - 1])
            if current_node.right:
                queue.append([current_node.right, col_offset + 1])

        # use the intermediate data structures/variables to generate the answer
        number_of_cols = max_col_offset - min_col_offset + 1
        output_list = [[] for _ in range(number_of_cols)]
        level_order_traversal.reverse()
        while level_order_traversal:
            current_node, offset = level_order_traversal.pop()
            column = offset - min_col_offset
            output_list[column].append(current_node.val)
        
        return output_list
"
LbheBxz3,Pastes.io - [Pastebin Alternative],xxsa,PHP,Saturday 9th of March 2024 11:39:58 AM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

More features example share pages QR CODEs - Embed options .. etc
Simple Ads by Google Adsense ( Few rather than Pastebin )
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Socialite (Facebook/Twitter/Google Social login)
Load files feature
Trending pastes page (day, week, month, year)
150+ different syntax languages
25+ Syntax Highlighting Skins for Ace Syntax Highlighter
Ace Editor / Code Mirror
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Report explicit pastes
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Load files feature
User management
User profile page
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature"
MqgUmFcw,Praktikum3,VoKILL,C++,Saturday 9th of March 2024 11:39:52 AM CDT,"// Задачи от практикума на трета група 
 
namespace Points {
    struct Point {
        int x = 0;
        int y = 0;
    };
 
    void printPoint(const Point point) {
        cout << ""X: "" << point.x << ""   Y: "" << point.y << endl;
    }
 
    double getDist(const Point &p1, const Point &p2) {
        int dx = p1.x - p2.x;
        int dy = p1.y - p2.y;
 
        return sqrt(dx * dx + dy * dy);
    }
 
    void readPoint(Point &point) {
        cout << ""Enter x:"";
        std::cin >> point.x;
        cout << ""Enter y:"";
        std::cin >> point.y;
    }
 
    int pointInQuadrant(const Point point) {
        if (point.y > 0) {
            if (point.x > 0)return 1;
            else return 2;
        } else {
            if (point.x > 0)return 4;
            else return 3;
        }
    }
}
namespace Figures {
    using namespace Points;
    struct Circle {
        Point center;
        double radius = 0;
    };
 
    void readCircle(Circle &circle) {
        cout << ""Enter the center of the Circle:\n"";
        readPoint(circle.center);
        cout << ""Enter the radius of the Circle:\n"";
        cin >> circle.radius;
    }
 
    bool isContained(const Circle circleToLookAt, const Circle circleToLookFor) {
        double dist = getDist(circleToLookAt.center, circleToLookFor.center);
        if (dist + circleToLookFor.radius <= circleToLookAt.radius) return true;
        else return false;
    }
 
    bool areCrossedCircles(const Circle circle1, const Circle circle2) {
        double dist = getDist(circle1.center, circle2.center);
        double radii = circle1.radius + circle2.radius;
 
        if (dist <= radii) return true;
        else return false;
    }
 
    bool isOnTheCircleBorder(const Circle circle, const Point point) {
        double dist = getDist(point, circle.center);
        if (dist == circle.radius)return true;
        else return false;
    }
 
}
namespace Vectors {
    struct Vector {
        int size = 0;
        int points[100]{};
    };
 
    void readVector(Vector &vector) {
        int n;
        cout << ""Enter Vector size: "";
        cin >> n;
        vector.size = n;
        for (int i = 0; i < n; ++i) {
            cout << ""Element "" << i << "":"";
            cin >> vector.points[i];
        }
    }
 
    void printVector(const Vector vector) {
        for (int i = 0; i < vector.size; ++i) {
            cout << vector.points[i] << "" "";
        }
        cout << endl;
    }
 
    int pointProduct(const Vector vector1, const Vector vector2) {
        if (vector1.size != vector2.size) {
            //error
            return -1;
        }
        int result = 0;
        for (int i = 0; i < vector1.size; ++i) {
            result += vector1.points[i] * vector2.points[i];
        }
        return result;
    }
}
namespace Segments {
    using namespace Points;
    struct Line {
        Point point1;
        Point point2;
        double dist = 0;
    };
 
 
    void printLine(const Line line) {
        cout << ""Line dist: "" << line.dist << endl;
        printPoint(line.point1);
        printPoint(line.point2);
    }
 
    void printLines(const Line *lines, unsigned int size) {
        for (int i = 0; i < size; ++i) {
            cout << ""Line "" << i + 1 << "":"" << endl;
            printLine(lines[i]);
            cout << endl;
        }
    }
 
    void readLine(Line &line) {
        cout << ""Enter first line point:"" << endl;
        readPoint(line.point1);
        cout << ""Enter second line point:"" << endl;
        readPoint(line.point2);
        line.dist = getDist(line.point1, line.point2);
    }
 
    void readLines(Line *lines, unsigned int size) {
        for (int i = 0; i < size; ++i) {
            readLine(*lines++);
        }
    }
 
 
    void sortLines(Line *const arr, unsigned int size) {
        for (int i = 0; i < size - 1; ++i) {
            for (int j = 0; j < size - i - 1; ++j) {
                if (arr[j].dist > arr[j + 1].dist) {
                    Line temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
}"
LGZFiuT5,Reactor Test,DreezySZN,Lua,Saturday 9th of March 2024 11:15:18 AM CDT,"-----BigReactor Control Installer
-----by jaranvil aka jared314
 
-----feel free to use and/or modify this code
-----------------------------------------------
 
 
--Run this program to install or update either reactor or turbine control programs.
 
 
-----------------PASTEBINs--------------------------
installer = ""p4zeq7Ma""
reactor_control_pastebin = ""RCPEHmxs""
turbine_control_pastebin = ""5B8h94V4""
 
reactor_startup = ""cZUH7y6k""
turbine_startup = ""h0jmye6t""
 
reactor_update_check = ""MkF2QQjH""
turbine_update_check = ""QP3qrzNu""
 
dev_installer = ""mCPQQ3Ge""
dev_reactor_control_pastebin = ""eYwBw9a3""
dev_turbine_control_pastebin = ""kJHeCx0Q""
---------------------------------------------
 
local reactor
local turbine
term.clear()
-------------------FORMATTING-------------------------------
 
function draw_text_term(x, y, text, text_color, bg_color)
  term.setTextColor(text_color)
  term.setBackgroundColor(bg_color)
  term.setCursorPos(x,y)
  write(text)
end
 
function draw_line_term(x, y, length, color)
    term.setBackgroundColor(color)
    term.setCursorPos(x,y)
    term.write(string.rep("" "", length))
end
 
function progress_bar_term(x, y, length, minVal, maxVal, bar_color, bg_color)
  draw_line_term(x, y, length, bg_color) --backgoround bar
  local barSize = math.floor((minVal/maxVal) * length) 
  draw_line_term(x, y, barSize, bar_color)  --progress so far
end
 
function menu_bars()
 
  draw_line_term(1, 1, 55, colors.blue)
  draw_text_term(10, 1, ""BigReactors Control Installer"", colors.white, colors.blue)
  
  draw_line_term(1, 19, 55, colors.blue)
  draw_text_term(10, 19, ""by jaranvil aka jared314"", colors.white, colors.blue)
end
 
--------------------------------------------------------------
 
 
 
function install(program, pastebin)
  term.clear()
  menu_bars()
 
  draw_text_term(1, 3, ""Installing ""..program..""..."", colors.yellow, colors.black)
  term.setCursorPos(1,5)
  term.setTextColor(colors.white)
  sleep(0.5)
 
  -----------------Install control program---------------
 
 
  --delete any old backups
  if fs.exists(program..""_old"") then
    fs.delete(program..""_old"")
  end
 
  --remove old configs
  if fs.exists(""config.txt"") then
    fs.delete(""config.txt"")
  end
 
  --backup current program
  if fs.exists(program) then
    fs.copy(program, program..""_old"")
    fs.delete(program)
  end
 
  --remove program and fetch new copy
  
  shell.run(""pastebin get ""..pastebin.."" ""..program)
 
  sleep(0.5)
 
  ------------------Install startup script-------------
 
  term.setCursorPos(1,8)
 
  --delete any old backups
  if fs.exists(""startup_old"") then
    fs.delete(""startup_old"")
  end
 
  --backup current program
  if fs.exists(""startup"") then
    fs.copy(""startup"", ""startup_old"")
    fs.delete(""startup"")
  end
  
 
  if program == ""reactor_control"" then
    shell.run(""pastebin get ""..reactor_startup.."" startup"")
  else if program == ""turbine_control"" then
    shell.run(""pastebin get ""..turbine_startup.."" startup"")
  end
  end
 
  if fs.exists(program) then
    draw_text_term(1, 11, ""Success!"", colors.lime, colors.black)
    draw_text_term(1, 12, ""Press Enter to reboot..."", colors.gray, colors.black)
    wait = read()
    shell.run(""reboot"")
  else
    draw_text_term(1, 11, ""Error installing file."", colors.red, colors.black)
    sleep(0.1)
    draw_text_term(1, 12, ""Restoring old file..."", colors.gray, colors.black)
    sleep(0.1)
    fs.copy(program..""_old"", program)
    fs.delete(program..""_old"")
 
    draw_text_term(1, 14, ""Press Enter to continue..."", colors.gray, colors.black)
    wait = read()
    start()
  end
end
 
-- peripheral searching thanks to /u/kla_sch
-- http://pastebin.com/gTEBHv3D

function reactorSearch()
   local names = peripheral.getNames()
   local i, name
   for i, name in pairs(names) do
      if peripheral.getType(name) == ""BigReactors-Reactor_2"" then
         return peripheral.wrap(name)
      else
         --return null
      end
   end
end
 
function turbineSearch()
   local names = peripheral.getNames()
   local i, name
   for i, name in pairs(names) do
      if peripheral.getType(name) == ""BigReactors-Turbine"" then
         return peripheral.wrap(name)
      else
         --return null
      end
   end
end
 
function selectProgram()
  term.clear()
  menu_bars()
  draw_text_term(1, 4, ""What would you like to install or update?"", colors.yellow, colors.black)
  draw_text_term(3, 6, ""1 - Reactor Control"", colors.white, colors.black)
  draw_text_term(3, 7, ""2 - Turbine Control"", colors.white, colors.black)
  draw_text_term(1, 9, ""Enter 1 or 2:"", colors.yellow, colors.black)
 
  term.setCursorPos(1,10)
  term.setTextColor(colors.white)
  input = read()
 
  if input == ""1"" then
    install(""reactor_control"", reactor_control_pastebin)
  else if input == ""2"" then
    install(""turbine_control"", turbine_control_pastebin)
  else if input == ""dev1"" then
    install(""reactor_control"", dev_reactor_control_pastebin)
  else if input == ""dev2"" then
    install(""turbine_control"", dev_turbine_control_pastebin)
  else
    draw_text_term(1, 12, ""please enter a '1' or '2'."", colors.red, colors.black)
    sleep(1)
    start()
  end
  end
  end
  end
end
 
function start()
  term.clear()
  menu_bars()
  
  if fs.exists(""config.txt"") then
  
    if fs.exists(""reactor_control"") then
      draw_text_term(2, 3, ""Current Program:"", colors.white, colors.black)
      draw_text_term(2, 4, ""Reactor Control"", colors.lime, colors.black)
      draw_text_term(1, 6, ""Do you want to update this program? (y/n)"", colors.white, colors.black)
      draw_text_term(1, 7, ""This will delete the current program and any saved settings"", colors.gray, colors.black)
      term.setCursorPos(1,9)
      term.setTextColor(colors.white)
      input = read()
      if input == ""y"" then
        install(""reactor_control"", reactor_control_pastebin)
      else if input == ""n"" then
        selectProgram()
      else
        draw_text_term(1, 10, ""please enter 'y' or 'n'."", colors.red, colors.black)
        sleep(1)
        start()
      end
      end
      
    else if fs.exists(""turbine_control"") then
      draw_text_term(2, 3, ""Current Program:"", colors.white, colors.black)
      draw_text_term(2, 4, ""Turbine Control"", colors.lime, colors.black)
      draw_text_term(1, 6, ""Do you want to update this program? (y/n)"", colors.white, colors.black)
      draw_text_term(1, 7, ""This will delete the current program and any saved settings"", colors.gray, colors.black)
      term.setCursorPos(1,9)
      term.setTextColor(colors.white)
      input = read()
      if input == ""y"" then
        install(""turbine_control"", turbine_control_pastebin)
      else if input == ""n"" then
        selectProgram()
      else
        draw_text_term(1, 10, ""please enter 'y' or 'n'."", colors.red, colors.black)
        sleep(1)
        start()
      end
      end
    
    end
    end
  end
  
  selectProgram()
 
 
end
 
start()"
DAqCS7mq,ExampleBanList,mrhello2227222,JSON,Saturday 9th of March 2024 11:14:10 AM CDT,"{
    ""2604997539"": ""TEST 1""
}
"
y2TGjLNM,Untitled,Frinco2021,JSON,Saturday 9th of March 2024 11:03:56 AM CDT,"{
  ""HosterName"": ""Raouf2015"",
  ""ServerName"": ""DzServer"",
  ""ClusterName"": ""Dzserver"",
 
  ""ServerDescription"":
  {
    ""MaxDinoLvl"": 300,
    ""Taming"": 25,
    ""Experience"": 6,
    ""Harvesting"": 6,
    ""Breeding"": 6,
    ""Stacks"": 1000,
    ""Other"":
    [
        ""Some feature specific to this very server""
    ]
  },
  ""ClusterDescription"":
  {
    ""MaxDinoLvl"": 300,
    ""Taming"": 25,
    ""Experience"": 6,
    ""Harvesting"": 6,
    ""Breeding"": 6,
    ""Stacks"": 1000,
    ""Other"":
    [
        ""Some extra feature of my cluster"",
        ""And another one""
    ]
  }
}
"
Cjq8xLz5,WorkingWithProperties,UrayFenn,C#,Saturday 9th of March 2024 10:56:45 AM CDT,"namespace WorkingWithProperties
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int positionX = 10;
            int positionY = 10;
            Renderer renderer = new Renderer();
            Player player = new Player(positionX, positionY);
            renderer.DrawUser(player);
        }
    }

    class Player
    {
        public Player(int positionX, int positionY)
        {
            PositionX = positionX;
            PositionY = positionY;
        }

        public int PositionX { get; private set; }
        public int PositionY { get; private set; }
    }

    class Renderer
    {
        public void DrawUser(Player player, char playerIcon = '@')
        {
            Console.SetCursorPosition(player.PositionX, player.PositionY);
            Console.WriteLine(playerIcon);
        }
    }
}"
jV98eycv,WorkingWithClasses,UrayFenn,C#,Saturday 9th of March 2024 10:37:18 AM CDT,"namespace WorkingWithClasses
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Player player = new Player(""Сеня"", 1, ""Админ"");
            player.ShowInfo();
        }
    }

    class Player
    {
        private string _name;
        private int _id;
        private string _role;

        public Player(string name, int id, string role)
        {
            _name = name;
            _id = id;
            _role = role;
        }

        public void ShowInfo()
        {
            Console.WriteLine($""Имя: {_name}\nID: {_id}\nРоль: {_role}"");
        }
    }
}"
UJDTZKKr,collecting mangoes,mantha_raghava,Java,Saturday 9th of March 2024 09:59:30 AM CDT,"import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int test = sc.nextInt();
        sc.nextLine(); 

        int z = 1;
        while (test-- > 0) {
            Stack<Integer> stack = new Stack<>();
            Stack<Integer> maxi = new Stack<>();
            System.out.println(""Case "" + z + "": "");
            int q = sc.nextInt();
            sc.nextLine(); 
            while (q-- > 0) {
                String s = sc.nextLine();
                String type[] = s.split("" "");

                if (type[0].equals(""A"")) {
                    stack.push(Integer.parseInt(type[1]));
                    if (maxi.isEmpty()) {
                        maxi.push(Integer.parseInt(type[1]));
                    } else {
                        if (maxi.peek() > Integer.parseInt(type[1])) {
                            maxi.push(maxi.peek());
                        } else {
                            maxi.push(Integer.parseInt(type[1]));
                        }
                    }
                } else if (type[0].equals(""R"")) {
                    if(!stack.isEmpty()){
                        stack.pop();
                        maxi.pop();
                    }
                    
                } else {
                    if(maxi.isEmpty()){
                        System.out.println(""Empty"");
                    }
                    else{
                        System.out.println(maxi.peek());
                    }
                    
                }
            }
            z++;
        }
    }
}"
kXTAi3A4,online.lua,vip-fran,Lua,Saturday 9th of March 2024 09:41:36 AM CDT,"memFrom, memTo, lib, num, lim, results, src, ok = 0, -1, nil, 0, 32, {}, nil, false function name(n) if lib ~= n then lib = n ranges = gg.getRangesList(lib) if #ranges == 0 then os.exit() else memFrom = ranges[1].start memTo = ranges[#ranges]['end'] end end end function hex2tbl(hex) ret = {} hex:gsub('%S%S', function (ch) ret[#ret + 1] = ch return '' end) return ret end function original(orig) tbl = hex2tbl(orig) len = #tbl if len == 0 then return end used = len if len > lim then used = lim end s = '' for i = 1, used do if i ~= 1 then s = s..';' end v = tbl[i] if v == '??' or v == '**' then v = '0~~0' end s = s..v..'r' end s = s..'::'..used gg.searchNumber(s, 1, false, gg.SIGN_EQUAL, memFrom, memTo) if len > used then for i = used + 1, len do v = tbl[i] if v == '??' or v == '**' then v = 256 else v = ('0x'..v) + 0 if v > 127 then v = v - 256 end end tbl[i] = v end end found = gg.getResultCount(); results = {} count = 0 checked = 0 while true do if checked >= found then break end all = gg.getResults(8) total = #all start = checked if checked + used > total then break end for i, v in ipairs(all) do v.address = v.address + of end gg.loadResults(all) while start < total do good = true of = all[1 + start].address - 1 if used < len then get = {} for i = lim + 1, len do get[i - lim] = {address = of + i, flags = 1, value = 0} end get = gg.getValues(get) for i = lim + 1, len do ch = tbl[i] if ch ~= 256 and get[i - lim].value ~= ch then good = false break end end end if good then count = count + 1 results[count] = of checked = checked + used else del = {} for i = 1, used do del[i] = all[i + start] end gg.removeResults(del) end start = start + used end end end function replaced(repl) num = num + 1 tbl = hex2tbl(repl) if src ~= nil then source = hex2tbl(src) for i, v in ipairs(tbl) do if v ~= '??' and v ~= '**' and v == source[i] then tbl[i] = '**' end end src = nil end cnt = #tbl set = {} s = 0 for _, addr in ipairs(results) do for i, v in ipairs(tbl) do if v ~= '??' and v ~= '**' then s = s + 1 set[s] = { ['address'] = addr + i,  ['value'] = v..'r', ['flags'] = 1,} end end end if s ~= 0 then gg.setValues(set) end ok = true end
function script()
a = gg.multiChoice({
'🔹Fantasma ON🔹',
'🔸Fantasma OFF🔸',
'🔹Cuerpos Blancos🔹',
'🔹Cielo Negro🔹',
'🔹Balas Rectas🔹',
'🔹Wallshot🔹',
'🔹Atravesar Piedras🔹',
'🔹Localizar Enemigos🔹',
'🔺Cerrar El Script🔺'
},nil,'✨Script Premium Vip Fran•Hacker™✨')
if a == nil then else
if a [1] then
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x226c918
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
end
if a [2] then
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x226c918
original('7F 45 4C 46 01 01 01 00')
replaced('F0 4F 2D E9 1C B0 8D E2')
gg.clearResults()
end
if a [3] then
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-444579820;2;2;0;130::21', gg.TYPE_DWORD)
gg.refineNumber('2', gg.TYPE_DWORD)
gg.getResults(gg.getResultsCount())
gg.editAll('0', gg.TYPE_DWORD)
gg.clearResults()
end
if a [4] then
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('0.99;0.57735025883;1e-6::13', gg.TYPE_FLOAT)
gg.refineNumber('1e-6', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-1', gg.TYPE_FLOAT)
gg.clearResults()
end
if a [5] then
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-7.1608877e24;1000;-1.30930378e25::9', gg.TYPE_FLOAT)
gg.refineNumber('1000', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('0', gg.TYPE_FLOAT)
gg.clearResults()
end
if a [6] then
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('0.00001;-1.30928164e25;-3.69511377e20::9', gg.TYPE_FLOAT)
gg.refineNumber('0.00001', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('1', gg.TYPE_FLOAT)
gg.clearResults()
end
if a [7] then
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-8388395.5;-8388393.5;-8388387.5::65', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-1', gg.TYPE_FLOAT)
gg.clearResults()
end
if a [8] then
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('-0.02980032004;1;0.48141112924::9', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber('0.09043131769;1;0.14753369987::9', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
end
if a [9] then
gg.setVisible(true)
os.exit()
end
end end
while true do
if gg.isVisible() then
gg.setVisible(false)
script()
end end"
ap7abjLV,hyprland env,bluebyt,INI file,Saturday 9th of March 2024 09:24:25 AM CDT,"SHLVL=1
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus
GDMSESSION=hyprland
ALACRITTY_LOG=/tmp/Alacritty-580554.log
COLORTERM=truecolor
PWD=/home/bluebyt
DESKTOP_SESSION=hyprland
DISPLAY=:0
MAIL=/var/spool/mail/bluebyt
GDM_LANG=en_US.UTF-8
GIO_LAUNCHED_DESKTOP_FILE_PID=580554
WINDOWID=104430730027680
SSH_AUTH_SOCK=/run/user/1000/gcr/ssh
SHELL=/usr/bin/fish
XDG_BACKEND=wayland
MOTD_SHOWN=pam
ALACRITTY_WINDOW_ID=104430730027680
LANG=en_US.UTF-8
USER=bluebyt
PATH=/home/bluebyt/.bin/:/usr/local/bin:/usr/bin:/home/bluebyt/.local/bin:/home/bluebyt/.local/bin/eww:/home/bluebyt/.local/bin/go/bin/:/home/bluebyt/.cargo/bin
HYPRLAND_CMD=Hyprland
HYPRLAND_INSTANCE_SIGNATURE=3e930a568a76a810dde6bcabcf737a81850e7153_1709997323
LOGNAME=bluebyt
GIO_LAUNCHED_DESKTOP_FILE=/home/bluebyt/.local/share/applications/Alacritty.desktop
STARSHIP_SHELL=fish
STARSHIP_SESSION_KEY=9615204904259994
WAYFIRE_SOCKET=/tmp/wayfire-wayland-1.socket
XCURSOR_SIZE=24
XDG_SEAT=seat0
WAYLAND_DISPLAY=wayland-1
TERM=alacritty
HOME=/home/bluebyt
XDG_SESSION_TYPE=wayland
XDG_SESSION_ID=22
MOZ_ENABLE_WAYLAND=1
_JAVA_AWT_WM_NONREPARENTING=1
XDG_DATA_DIRS=/home/bluebyt/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/
ALACRITTY_SOCKET=/run/user/1000/Alacritty-wayland-1-580554.sock
XDG_SESSION_CLASS=user
XDG_SESSION_DESKTOP=hyprland
XDG_CURRENT_DESKTOP=Hyprland
XDG_VTNR=2
USERNAME=bluebyt
XDG_RUNTIME_DIR=/run/user/1000"
zq9ZeCxr,Untitled,Gronos02,Python,Saturday 9th of March 2024 08:54:21 AM CDT,"    def is_sorted(array):
        for i in range(1, len(array)):
            # Check if element is not sorted
            if array[i] < array[i - 1]:
                return False
     
        return True
     
     
    def solve(array):
        changed = True
     
        while changed:
            changed = False
            if is_sorted(array):
                return ""YES""
     
            for i in range(1, len(array) - 1):
                if array[i - 1] < array[i] > array[i + 1]:
                    array[i], array[i + 1] = array[i + 1], array[i]
                    changed = True
     
        return ""NO""
     
     
    def main():
        number_of_sets = int(input())
     
        for i in range(number_of_sets):
            number_of_ints = int(input())  # NOT USED
     
            given_array = input()
            given_array = list(map(int, given_array.split()))
     
            print(solve(given_array))
     
     
    if __name__ == ""__main__"":
        main()"
4x1XGPy7,Epic Rowsplitter,DrGonzo94,Python,Saturday 9th of March 2024 08:54:20 AM CDT,"
# Den gamla rad-maker2200 hade inneboende problem. Den räknade fel på radserier som var delbara med 2200 (ett fel i div2200). 
# Det gick också inte att göra radserier som delades in i något annat än tre delar, för då kunde inte filerna skapas från rowslist. 
# Tog en del hjälp av ChatGPT för att uppdatera. Även andra saker är nya, som bättre itererade for-loops för att dela in raderna i listor (i dictionaries)
# och för att skriva listorna till filer
# Lägger också till div2200 i den här filen, som en funktion

def div2200(number1: int):

    partslist = []
    if number1 % 2200 == 0:
        parts = (number1 // 2200)
    else:
        parts = (number1 // 2200)+1
    partsize_base = number1 // parts
    partsize_rest = number1 % parts

    for i in range(parts):
        partslist.append(partsize_base)

    for i in range(partsize_rest):
        partslist[i] +=1
    
    return partslist


gamblingzfile = ""system.txt""


with open(gamblingzfile) as file:
    num_lines = 0
    for line in file:
        num_lines +=1
    file.seek(0, 0)

num_lines = num_lines-1

rowslist = div2200(num_lines)
parts = len(rowslist)

print(f""Systemet har {num_lines} rader. Det kommer att delas i {parts} delar, med dessa radantal:"")
for i in range(len(rowslist)):
    print(rowslist[i])


lines_lists = {}
for i in range(parts):
    lines_lists[f""lines_list{i}""] = []

# Gör en lines_list för varje part, lägger dem i dictionary

with open(gamblingzfile) as file:

    first_line = file.readline()
    
    for key in lines_lists:
        lines_lists[key].append(first_line)

    for i in range(parts):
        for _ in range(rowslist[i]):
            line = file.readline()
            lines_lists[f""lines_list{i}""].append(line)


    for i, (key, lines_list) in enumerate(lines_lists.items(), start=1):
        output_file = f""{i}{i}{i}{i}{i}{i}{i}.txt""
        with open(output_file, ""w"") as filew:
            for line in lines_list:
                filew.write(line)

# Har inte använt enumerate förut, och knappt dictonaries för att lagra listor, heller. Ville gärna ha 1111111.txt-formatet kvar, och då behövdes detta enligt ChatGPT. 
"
rwARBeTq,снм,nq1s788,C++,Saturday 9th of March 2024 08:44:08 AM CDT,"#include<iostream>
#include<algorithm>
#include<bitset>
#include<cmath>
#include<deque>
#include<iomanip>
#include <cassert>
#include<list>
#include<vector>
#include<map>
#include<string>
#include<complex>

using namespace std;

vector<int> t; //t[i] = i
vector<int> h; //высота дерева, h[i] = 1

int get(int x) {
    if (t[x] == x) {
        return x;
    }
    return t[x] = get(x);
}

void upd(int x, int y) {
    x = get(x);
    y = get(y);
    if (h[x] > h[y]) {
        swap(x, y);
    }
    t[x] = y;
    if (h[x] != h[y]) h[y]++;
}

int main() {
    
    return 0;
}"
cympQXvP,3,alexandaryordanov,JavaScript,Saturday 9th of March 2024 08:32:06 AM CDT,"function solve(base, increment) {
    let stone = 0;
    let marble = 0;
    let lapis = 0;
    let gold = 0;
    const steps = Math.ceil(base / 2)
    const finalHeight = Math.floor(steps * increment)
    for (let index = 1; index <= steps; index++) {
        if (index !== steps) {
            stone += ((base - 2) ** 2) * increment
        } 
        
        if (index % 5 === 0 && index !== steps) {
            lapis += (base * 4 - 4) * increment
        } else if (index === steps) {
            gold += (base ** 2) * increment
        } else {
            marble += (base * 4 - 4) * increment
        }
        base -= 2
    }
    console.log(`Stone required: ${Math.ceil(stone)}\nMarble required: ${Math.ceil(marble)}\nLapis Lazuli required: ${Math.ceil(lapis)}\nGold required: ${Math.ceil(gold)}\nFinal pyramid height: ${finalHeight}`);
}




solve(23, 0.5)"
yEdr8Rph,stm32 spi fifo bug,edensheiko,C,Saturday 9th of March 2024 08:23:53 AM CDT,"/* NOTICE: for transmit with DMA a bug fix was needed, please see file
	 *         core/src/stm32f7xx_it.c in function DMA2_Stream4_IRQHandler
	 *         at line ~ 370
 */

void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* BUG FIX --------------------------------------------------------------*/
  /* When using SPI with DMA in direct mode there is a known bug in
   * the hal library - The function HAL_SPI_Transmit_DMA enables fifo error
   * interrupts even when there is NO fifo and thus causing fifo error
   * interrupts to occur with NO fifo
   */
  if(hdma_spi5_tx.Init.FIFOMode != DMA_FIFOMODE_ENABLE)
  {
	  /* Disable fifo error interrupt, they shouldn't even be on... */
	  __HAL_DMA_DISABLE_IT(&hdma_spi5_tx, DMA_IT_FE);
  }

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}"
ugi5j8ZL,Untitled,cosenza987,C++,Saturday 9th of March 2024 08:15:58 AM CDT,"#include <bits/stdc++.h>

using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int t;
    cin >> t;
    for(int _ = 0; _ < t; _++) {
        int n, m, q;
        cin >> n >> m >> q;
        set<int> s;
        while(m--) {
            int x;
            cin >> x;
            s.insert(x);
        }
        vector<vector<int>> adj(n * n);
        int fl = 0, xr = 0, cnt = 0, id = 0;
        for(int i = 0; i < 2 * (n * n - n); i++) {
            if(s.find(i) == s.end()) {
                cnt++;
                id++;
                if(!xr and cnt == n - 1) {
                    xr ^= 1;
                    cnt = 0;
                    id -= n - 1;
                } else if(xr and cnt == n) {
                    xr ^= 1;
                    cnt = 0;
                    fl++;
                }
                continue;
            }
            if(!xr) {
                adj[id].push_back(id + 1);
                adj[id + 1].push_back(id);
                cnt++;
                id++;
                if(!xr and cnt == n - 1) {
                    xr ^= 1;
                    cnt = 0;
                    id -= n - 1;
                } else if(xr and cnt == n) {
                    xr ^= 1;
                    cnt = 0;
                    fl++;
                }
            } else {
                adj[id].push_back(id + n);
                adj[id + n].push_back(id);
                cnt++;
                id++;
                if(!xr and cnt == n - 1) {
                    xr ^= 1;
                    cnt = 0;
                    id -= n - 1;
                } else if(xr and cnt == n) {
                    xr ^= 1;
                    cnt = 0;
                    fl++;
                }
            }
        }
        vector<int> vis(n * n);
        int cur = 1;
        for(int i = 0; i < n * n; i++) {
            if(!vis[i]) {
                queue<int> q;
                q.push(i);
                vis[i] = cur;
                while(!q.empty()) {
                    int x = q.front(); q.pop();
                    for(auto e : adj[x]) {
                        if(!vis[e]) {
                            vis[e] = cur;
                            q.push(e);
                        }
                    }
                }
                cur++;
            }
        }
        for(int i = 0; i < q; i++) {
            int a, b;
            cin >> a >> b;
            cout << _ << ""."" << i << "" "" << (vis[a] == vis[b]) << ""\n"";
        }
        cout << ""\n"";
    }
    return 0;
}"
pJ0wkzqw,112.215.244.101-/sdcard/Premium/useragent.py.py,OBF-XIn,Python,Saturday 9th of March 2024 08:12:39 AM CDT,"# useragent
import random

class Useragent:
    def __init__(self) -> None:
        pass
        
    def useragent_api(self):
        self.huawei = ['POT-AL00a', 'POT-TL00a', 'POT-AL00a', 'POT-AL00a', 'POT-AL00a', 'POT-AL00a', 'Huawei Ascend', 'U9500', 'U9500', 'U9500', 'U9500', 'U9500', 'U8818', 'HUAWEI U8818', 'HUAWEI U8818', 'HUAWEI U8818', 'U8818', 'U8818', 'U8818', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'HUAWEI G6-L11', 'G620S-L01', 'C8817D', 'G620S-L03', 'G620S-L01', 'C8817D', 'G630-U251', 'G630-U251', 'G630-U251', 'G630-U251', 'G630-U251', 'G630-U251', 'G630-U251', 'G630-U251', 'G7-L01', 'HUAWEI G7-L01', 'Huawei G700', 'HUAWEI G700-U20', 'HUAWEI G700-T00', 'HUAWEI G700-U10', 'Huawei g700', 'HUAWEI G700-U00', 'HUAWEI G700-T00', 'HUAWEI G700-U20', 'HUAWEI G700-U10', 'HUAWEI G700-U00', 'HUAWEI G730-C00', 'HUAWEI G730-C00', 'HUAWEI G730-C00', 'HUAWEI MT1-U06', 'HUAWEI MT1-U06', 'HUAWEI MT2-L01', 'HUAWEI MT2-L01', 'HUAWEI MT2-C00', 'HUAWEI MT2-C00', 'MT2L03', 'MT2L03', 'HUAWEI Y360', 'HUAWEI MT7-L09', 'HUAWEI MT7-TL10', 'HUAWEI MT7-TL00', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9202L-1', 'U9202L-1', 'U9202L-1', 'U9202L-1', 'U9202L-1', 'U9202L-3', 'U9202L-1', 'U9202L-1', 'U9202L-4', 'U9202L-2', 'U9202L-1', 'U9202L-1', 'U9202L-1', 'U9202L-3', 'U9202L-2', 'HUAWEI P6 S-U06', 'HUAWEI P7-L10', 'Flow', 'H1711', 'HUAWEI Y221-U53', 'HUAWEI Y221-U22', 'HUAWEI Y221-U12', 'HUAWEI Y221-U03', 'HUAWEI Y221-U53', 'HUAWEI Y221-U22', 'Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'Bucare Y330-U05', 'Bucare Y330-U05', 'HUAWEI Y330-U05', 'HUAWEI Y330-U05', 'HUAWEI Y330-U05', 'HUAWEI Y330-U05', 'HUAWEI Y330-U05', 'Y530', 'HUAWEI Y530', 'HUAWEI Y530', 'HUAWEI Y530', 'HUAWEI Y530', 'HUAWEI Y530', 'HUAWEI Y530', 'Y550-L03', 'HUAWEI Y560-L01', 'HUAWEI Y541-U02', 'HUAWEI B199', 'HUAWEI B199', 'HUAWEI B199', 'HUAWEI B199', 'HUAWEI B199', 'Huawei Blaze', 'Huawei BLAZE', 'HUAWEI C199', 'HUAWEI C199', 'HUAWEI C199', 'HUAWEI C199', 'HUAWEI C199s', 'HUAWEI C199s', 'HW-HUAWEI C199s', 'EC6109V1', 'MTS-SP101', 'MTS-SP101', 'MTS-SP101', 'C8512', 'C8600', 'C8600', 'C8600', 'C8600', 'C8650', 'C8650', 'C8650', 'HUAWEI C8655', 'HUAWEI C8655', 'C8800', 'HW-HUAWEI_C8810', 'HUAWEI C8812', 'HUAWEI C8812', 'HUAWEI_C8812', 'HUAWEI C8812', 'HUAWEI C8812', 'HUAWEI C8812', 'HUAWEI C8812E', 'HUAWEI_C8812E', 'HUAWEI C8813', 'HUAWEI C8813', 'HUAWEI C8813', 'HUAWEI C8813', 'HUAWEI C8813', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813DQ', 'HUAWEI C8813DQ', 'HUAWEI C8813Q', 'HUAWEI C8813Q', 'HUAWEI C8813Q', 'HUAWEI C8813Q', 'HUAWEI C8815', 'HUAWEI C8815', 'HUAWEI C8816', 'HUAWEI C8816', 'HUAWEI C8816', 'HUAWEI C8816D', 'HUAWEI C8816D', 'HUAWEI C8816D', 'HUAWEI C8816D', 'HUAWEI C8816D', 'HUAWEI_C8816D', 'HUAWEI C8816D', 'HUAWEI C8816D', 'HUAWEI C8817E', 'HUAWEI C8817E', 'HUAWEI C8817E', 'HUAWEI C8817L', 'HUAWEI C8817L', 'HUAWEI C8817L', 'HUAWEI C8817L', 'HUAWEI C8817L', 'HUAWEI C8818', 'HUAWEI C8818', 'HUAWEI C8818', 'HUAWEI C8825D', 'HUAWEI C8825D', 'HUAWEI C8825D', 'HUAWEI-C8850', 'HUAWEI C8860E', 'HUAWEI C8860E', 'HUAWEI C8860E', 'C8860V', 'HUAWEI C8950D', 'HUAWEI C8950D', 'HUAWEI C8950D', 'HUAWEI C8950D', 'CM980', 'CM980', 'd-02K', 'd-02H', 'd-01J', 'U9510', 'U9510', 'HUAWEI D2', 'Huawei D2', 'HUAWEI D8950D', 'MediaPad 10 FHD', 'dtab01', 'EC6108V9-01', 'ART-AL00x', 'ART-AL00x', 'ART-AL00x', 'ART-TL00x', 'ART-AL00m', 'ART-AL00x', 'STK-AL00', 'STK-AL00', 'STK-AL00', 'STK-TL00', 'MED-TL00', 'MED-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-TL00', 'WKG-AN00', 'WKG-AN00', 'WKG-TN00', 'WKG-TN00', 'FRL-TN00', 'FRL-AN00a', 'FRL-AN00a', 'FRL-AN00a', 'FRL-AN00a', 'FRL-AN00a', 'FRL-TN00', 'FRL-AN00a', 'DVC-TN20', 'DVC-AN20', 'DVC-TN20', 'DVC-AN20', 'DVC-AN20', 'DVC-AN20', 'DVC-TN20', 'DVC-TN20', 'DVC-AN20', 'DVC-TN20', 'MLD-AL00', 'MLD-AL00', 'MGA-AL00', 'MGA-AL00', 'MGA-AL00', 'MGA-AL00', 'CTR-AL00', 'CTR-AL00', 'CTR-AL00', 'CTR-AL00', 'HUAWEI TAG-L01', 'HUAWEI TAG-L32', 'HUAWEI TAG-AL00', 'HUAWEI TAG-L21', 'HUAWEI TAG-L13', 'HUAWEI TAG-L03', 'NCE-TL10', 'NCE-AL10', 'NCE-AL00', 'NCE-TL10', 'NCE-AL00', 'NCE-AL10', 'DIG-TL10', 'DIG-AL00', 'DIG-AL00', 'DIG-AL00', 'DIG-AL00', 'SLA-TL10', 'SLA-AL00', 'SLA-TL10', 'SLA-TL10', 'TRT-AL00A', 'TRT-TL10A', 'FIG-AL10', 'FIG-TL10', 'FIG-AL00', 'FIG-TL00', 'FIG-AL10', 'LDN-TL20', 'LDN-AL20', 'LDN-AL10', 'LDN-TL00', 'LDN-TL20', 'FLA-AL10', 'FLA-AL10', 'FLA-AL10', 'ATU-AL10', 'DUB-AL00a', 'DUB-AL00a', 'DUB-AL00a', 'MRD-AL00', 'Huawei Enjoy 9s', 'Huawei Enjoy 9s', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'CM990', 'CM990', 'CM990', 'U8665', 'HUAWEI U8665', 'U8665', 'G735-L03', 'G735-L23', 'G735-L12', 'G735-L23', 'G735-L23', 'CHC-U03', 'CHC-U01', 'Huawei G500 pro', 'HUAWEI G510', 'HUAWEI G510', 'Huawei G510', 'Huawei G520', 'HUAWEI G520 T', 'HUAWEIG520L', 'HUAWEI G520T', 'Huawei G530', 'Huawei G600', 'Huawei G610 u20', 'Huawei G610', 'HUAWEI G610', 'HUAWEI G610 fa', 'HUAWEI G620', 'G621-TL00', 'G621-TL00M', 'G621-TL00', 'HUAWEI G628', 'HUAWEI G7', 'HUAWEI RIO-TL00', 'HUAWEI RIO-UL00', 'HUAWEI_G750', 'Huawei_g750', 'HUAWEI G750', 'HUAWEI G7500', 'HUAWEI G7500', 'HUAWEI G7500', 'HUAWEI G7500', 'HUAWEI G7500', 'Huawei G760', 'HUAWEI RIO-L01', 'HUAWEI VNS-AL00', 'HUAWEI VNS-TL00', 'HUAWEI MLA-TL00', 'HUAWEI MLA-TL00', 'HUAWEI G9 Youth', 'DIG-L21', 'DIG-L22', 'HUAWEI KII-L21', 'BLL-L22', 'BLL-L21', 'BLL-L21', 'HUAWEI NMO-L31', 'HUAWEI RIO-L03', 'H1611', 'H1611', 'H1621', 'H1621', 'HUAWEI H1621', 'H1623', 'H710VL', 'H715BL', 'H866C', 'H866C', 'H866C', 'H866C', 'H866C', 'Huawei-H867G', 'Huawei-H867G', 'Huawei-H867G', 'Huawei-H867G', 'HUAWEI H868C', 'HUAWEIH868C', 'HUAWEI H868C', 'HUAWEI H871G', 'HUAWEI H871G', 'HUAWEI H871G', 'HUAWEI H881C', 'HUAWEI H881C', 'HUAWEI H881C', 'HUAWEI H881C', 'HUAWEI_H881C', 'H882L', 'H882L', 'HUAWEI H891L', 'HUAWEI H892L', 'U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'HUAWEI U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'COL-L29', 'COL-AL10', 'COL-L29', 'HRY-LX1', 'HRY-LX1MEB', 'HRY-AL00', 'HRY-AL00a', 'HRY-LX1T', 'HUAWEI U9508', 'HUAWEI U9508', 'HUAWEI U9508', 'YAL-L21', 'LRA-AL00', 'LRA-AL00', 'LRA-AL00', 'LRA-AL00', 'YAL-AL10', 'YAL-AL10', 'YAL-AL10', 'YAL-AL10', 'YAL-L41', 'YAL-L41', 'HRY-AL00T', 'HRY-AL00Ta', 'HRY-AL00Ta', 'HRY-AL00Ta', 'HRY-AL00Ta', 'HRY-AL00T', 'HRY-AL00Ta', 'YAL-AL50', 'MAR-LX1H', 'MAR-LX1H', 'BMH-AN20', 'BMH-AN10', 'BMH-AN10', 'MXW-AN00', 'MXW-AN00', 'MXW-AN00', 'MXW-AN00', 'MXW-TN00', 'MXW-AN00', 'MXW-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN10', 'EBG-AN10', 'LRA-LX1', 'CDY-NX9A', 'CDY-AN95', 'CDY-AN90', 'HONOR H30-L01M', 'H30-U10', 'H30-T10', 'H30-T00', 'H30-C00', 'Hol-U19', 'Hol-U19', 'Hol-U19', 'HUAWEI G750-T01', 'HUAWEI G750-T01', 'HUAWEI G750-T01', 'SCL-AL00', 'SCL-TL00', 'SCL-TL00H', 'SCL-AL00', 'SCL-CL00', 'SCL-TL00H', 'SCL-AL00', 'SCL-AL00', 'CHM-U01', 'Honor 4c Pro', 'Honor 4c pro', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'Che1-CL20', 'Che2-UL00', 'Che2-TL00M', 'CHE2-TL00', 'CHE-TL00', 'Che1-CL10', 'Che2-TL00', 'CHE-TL00H', 'Che2-L11', 'CUN-AL00', 'CUN-TL00', 'CUN-TL00', 'NTH-AN00', 'NTH-NX9', 'NTH-AN00', 'NTN-L22', 'NTN-LX3', 'NTN-LX1', 'RNA-AN00', 'JLH-AN00', 'JLH-AN00', 'CAM-AL00', 'CAM-TL00', 'CAM-AL00', 'NEM-AL10', 'NEM-L51', 'NEM-UL10', 'NEM-L51', 'NEM-L22', 'KIW-L21', 'KIW-AL10', 'KIW-UL00', 'KIW-TL00', 'H60-L02', 'H60-L04', 'H60-L01', 'H60-L02', 'H60-L03', 'H60-L11', 'H60-L01', 'MYA-TL10', 'huawei mya-tl10', 'PE-UL00', 'PE-TL20', 'PE-UL00', 'PE-TL10', 'PE-UL00', 'PE-TL10', 'GIA-AN00', 'DLI-TL20', 'DLI-L22', 'DLI-L42', 'DIG-L21HN', 'JMM-L22', 'BLN-L21', 'BLN-L22', 'BLN-AL10', 'BLN-AL10', 'BLN-AL30', 'PLK-AL10', 'PLK-UL00', 'PLK-L01', 'PLK-AL10', 'PLK-TL01H', 'PLK-UL00', 'NEM-L21', 'FNE-AN00', 'FNE-AN00', 'FNE-NX9', 'AUM-AL20', 'AUM-L33', 'AUM-AL00', 'AUM-TL20', 'AUM-AL20', 'AUM-L29', 'AUM-L41', 'LND-AL30', 'LND-L29', '720x1358', 'ATH-AL00', 'ATH-CL00', 'ATH-TL00H)', 'ATH-UL00)', 'ATH-AL00', 'ATH-AL00', 'ATH-AL00', 'ATH-TL00H', 'DUA-L22', 'DUA-LX3', 'BND-AL10', 'BND-L21', 'FRD-L09', 'FRD-AL00', 'FRD-L19', 'PRA-AL00X', 'PRA-TL10', 'DUK-L09', 'VEN-L22', 'JAT-L29', 'JAT-LX3', 'JAT-LX1', 'JAT-L41', 'BKK-AL10', 'BKK-LX2', 'BKK-L21', 'BKK-LX2', 'KSA-LX9', 'KSA-LX9', 'JSN-L21', 'JSN-L22', 'JSN-AL00a', 'JSN-L23', 'ARE-AL00', 'ARE-L22HN', 'STF-L09', 'STF-L09S', 'STF-AL10', 'STF-AL10', 'STF-AL00', 'LLD-L31', 'LLD-AL10', 'MOA-LX9N', 'U', '720x1470', 'AKA-L29', 'LLD-AL20', 'LLD-AL30', 'LLD-AL20', 'LLD-AL20', 'DUA-LX9', 'HLK-AL00', 'HLK-AL00', 'HLK-AL00', 'HLK-AL00', 'HLK-AL00a', 'HLK-AL00', 'HLK-L42', 'HLK-AL10', 'HLK-L41', 'HLK-AL10', 'HLK-AL10', 'CAM-UL00', 'CAM-UL00', 'NTS-AL00', 'NTS-AL00', 'NTS-AL00', 'TNY-AL00', 'TNY-TL00', 'TNY-AL00', 'TNY-AL00', 'ELZ-AN10', 'ELZ-AN20', 'ANY-LX1', 'LGE-NX9', 'LGE-AN10', 'LGE-AN20', 'MGI-AN00', 'PGT-N19', 'RVL-AL09', 'RVL-AL09', 'RVL-AL09', 'EDI-AL10', 'VKY-TL00', 'VKY-TL00', 'VKY-TL00', 'VKY-TL00', 'VOG-AL00', 'VOG-AL00', 'VOG-AL00', 'VOG-AL00', 'VOG-AL00', 'ANA-AL00', 'ANA-AN00', 'ANA-AN00', 'ANA-AN00', 'ANA-AN00', 'ANA-AN00', 'ANA-AN00', 'ANA-AN00', 'ANA-NX9', 'JDN-W09', 'JDN-AL00', 'JDN-W09', 'AGR-W09HN', 'COR-L29', 'COR-AL10', 'KOZ-AL00', 'KOZ-AL00', 'KOZ-AL00', 'HJC-LX9', 'ASK-AL00x', 'ASK-AL00x', 'ASK-AL00x', 'ASK-AL00x', 'ASK-AL00x', 'ASK-AL00x', 'KSA-AL10', 'huawei ksa-al10', 'TNNH-AN00', 'TNNH-AN00', 'TNNH-AN00', 'OXP-AN00', 'OXP-AN00', 'OXP-AN00', 'OXP-AN00', 'OXP-AN00', 'OXP-AN00', 'OXP-AN00', 'CHM-TL00', 'CHM-UL00', 'HW-CHM-CL00', 'CHM-UL00', 'CHM-TL00H', 'CHM-UL00', 'CHM-TL00H', 'CHM-TL00', 'CHM-UL00', 'AKA-AL10', 'HJC-AN90', 'NEW-AN90', 'KOZ-AL40', 'KOZ-AL40', 'DUA-AL00', 'DUA-TL00', 'JAT-AL00', 'MOA-AL00', 'MOA-AL00', 'JDN2-AL00HN', 'JDN2-W09HN', 'AGS2-AL00HN', 'BKL-L09', 'BKL-AL20', 'BKL-AL00', 'PCT-TL10', 'PCT-AL10','PCT-AL10', 'ALA-AN70', 'KNT-AL10', 'KNT-AL20', 'KNT-AL20', 'KNT-UL10', 'KNT-TL10', 'DUK-AL20', 'DUK-AL20', 'DUK-AL20', 'JMM-AL00', 'JMM-AL10', 'JMM-TL10', 'JMM-AL00', 'BKL-L04', 'PCT-L29', 'OXF-AN00', 'OXF-AN00', 'OXF-AN00', 'OXF-AN00', 'OXF-AN00', 'OXF-AN00', 'OXF-AN00', 'OXF-AN10', 'OXF-AN10', 'TEL-AN00a', 'TEL-AN00a', 'TEL-AN00a', 'TEL-AN00a', 'TEL-AN00', 'TEL-AN00a', 'TEL-AN10', 'TEL-AN00a', 'TEL-AN00a', 'TEL-TN00', 'TEL-AN10', 'Honor X10 Lite', 'DNN-LX9', 'KKG-AN00', 'KKG-AN00', 'KKG-AN00', 'KKG-AN00', 'KKG-AN00', 'Honor X10 Max', 'Honor X10 Pro', 'KKG-AN70', 'TFY-AN00', 'ADT-AN00', 'ADT-AN00', 'DIO-AN00', 'VNA-LX2', 'VNE-LX2', 'VNE-LX1', 'VNE-LX3', 'CMA-LX1', 'CMA-LX2', 'RKY-LX1', 'RKY-LX2', 'RKY-LX3', 'TFY-LX2', 'TFY-LX1', 'TFY-LX3', 'VNE-N41', 'CRT-LX1', 'CRT-LX3', 'CRT-LX2', 'ANY-LX2', 'ANY-LX3', 'ANY-NX1', 'RMO-NX1', 'RMO-NX1', 'HUAWEI SCL-L01', 'HUAWEI SCL-L21', 'HUAWEI LYO-L21', 'LYO-L21', 'Y538', 'Y538', 'Ideos', 'Ideos', 'IDEOS S7', 'IDEOS S7 Slim', 'IDEOS S7 Slim', 'Huawei Ideos X1', 'IDEOS X1', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8510', 'rv:35.0', 'rv:13.0', 'U8510', 'Huawei U8510', 'Huawei IDEOS X3', 'Huawei U8510 X3', 'HUAWEI U8510', 'u8800', 'U8800', 'U8800', 'U8800', 'Huawei Ideos X5', 'U8800', 'U8800', 'U8800', 'U8800', 'U8800', 'U8800', 'U8800', 'U8800', 'Huawei IDEOS X8', 'JNY', 'HUAWEI_M2', 'HUAWEI-M391', 'M650', 'M650', 'M650', 'M660', 'M660', 'M660', 'M660', 'Android 2.3.6', 'HUAWEI-M835', 'HUAWEI-M835', 'HUAWEI-M835', 'HUAWEI-M835', 'HUAWEI-M835', 'Android 2.2.2', 'HUAWEI-M860', 'HUAWEI-M860', 'HUAWEI-M860', 'HUAWEI-M860', 'Huawei M865', 'USCCADR3305', 'USCCADR3305', 'M865', 'USCCADR3305', 'M865', 'M865', 'M865', 'M865', 'Android 2.3.6', 'M865C', 'M865C', 'M865C', 'M865C', 'USCCADR3310', 'USCCADR3310', 'USCCADR3310', 'M866', 'HUAWEI M866', 'USCCADR3310', 'M866', 'HUAWEI M866', 'M866', 'USCCADR3310', 'HUAWEI M868', 'HUAWEI M881', 'HUAWEI M881', 'M886', 'M886', 'M886', 'M886', 'M886', 'HUAWEI-M920', 'HUAWEI-M920', 'HUAWEI-M920', 'HUAWEI-M920', 'HUAWEI-M920', 'HUAWEI-M921', 'HUAWEI-M931', 'HUAWEI-M931', 'HUAWEI-M931', 'HUAWEI-M931', 'HUAWEI-M931', 'HUAWEI RIO-AL00', 'HUAWEI RIO-AL00', 'HUAWEI RIO-AL00', 'HUAWEI MLA-AL10', 'HUAWEI MLA-AL10', 'POT-AL10', 'POT-AL10', 'POT-AL10', 'POT-AL10', 'POT-AL10', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TYH601M', 'TYH601M', 'TYH601M', 'TYH601M', 'TYH601M', 'ALP-AL00', 'ALP-L29', 'ALP-AL00', 'ALP-AL00', 'ALP-AL00', 'ALP-AL00', 'RNE-L21', 'RNE-L01', 'RNE-L23', 'BLA-L29', 'BLA-L09', 'BLA-A09', 'BLA-AL00', 'HMA-L29', 'HMA-L09', 'HMA-AL00', 'HMA-AL00', 'HMA-AL00', 'HMA-AL00', 'HMA-L29', 'SNE-LX1', 'SNE-LX3', 'LYA-L29', 'LYA-L09', 'LYA-AL00', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'EVR-AN00', 'EVR-AL00', 'EVR-AN00', 'EVR-L29', 'EVR-AL00', 'EVR-AL00', 'EVR-N29', 'TAS-AL00', 'TAS-AL00', 'TAS-L29', 'TAS-AL00', 'TAS-AL00', 'TAS-AL00', 'TAS-AL00', 'TAS-AL00', 'TAS-AL00', 'TAS-AN00', 'TAS-AN00', 'TAS-AN00', 'TAS-AN00', 'TAS-AN00', 'SPN-AL00', 'SPN-AL00', 'SPN-AL00', 'SPN-AL00', 'SPN-AL00', 'SPN-AL00', 'LIO-L29', 'LIO-AN00', 'LIO-L29', 'LIO-AN00', 'LIO-AL00', 'LIO-AN00', 'LIO-AN00', 'LIO-AL00', 'LIO-N29', 'LIO-AN00P', 'LIO-AN00P', 'LIO-AN00P', 'LIO-AN00P', 'LIO-AN00P', 'LIO-AN00P', 'Mate30 RS', 'LIO-AN00P', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'OCE-AN10', 'OCE-AN10', 'OCE-AN10', 'OCE-AN10', 'OCE-AN10', 'NOH-AL10', 'NOH-NX9', 'NOH-AN00', 'NOH-AN00', 'NOH-AL10', 'NOH-AN01', 'NOH-AN00', 'NOH-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'Mate 40 RS', 'OCE-AN50', 'OCE-AN50', 'OCE-AL50', 'OCE-AN50', 'OCE-AN50', 'OCE-AN50', 'OCE-AL50', 'OCE-AN50', 'OCE-AN50', 'OCE-AN50', 'CET-AL00', 'CET-LX9', 'CET-AL00', 'HUAWEI Mate 50', 'CET-AL00', 'DCO-AL00', 'CET-AL60', 'CET-AL60', 'HUAWEI MATE 7', 'HUAWEI NXT-AL10', 'HUAWEI NXT-L29', 'MHA-L29', 'MHA-AL00', 'MHA-AL00', 'MHA-AL00', 'MHA-AL00', 'MHA-L09', 'BLL-L23', 'LON-L29', 'LON-AL00', 'LON-AL00-PD', 'LON-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-L29', 'HUAWEI CRR-UL00', 'HUAWEI CRR-L09', 'HUAWEI CRR-UL20', 'HUAWEI CRR-CL00', 'BND-L34', 'TAH-AN00', 'TET-AN00', 'TET-AN00', 'TET-AN10', 'TET-AN00', 'TET-AN00', 'TET-AN00', 'TET-AN00', 'TET-AN00', 'TET-AN00', 'TET-AN50', 'TET-AN50', 'TET-AN50', 'TET-AN50', 'TET-AN50', 'TAH-AN00m', 'TAH-AN00m', 'TAH-AN00m', 'TAH-AN00m', 'PAL-LX9', 'PAL-AL00', 'PAL-AL00', 'PAL-AL00', 'HUAWEI Mate30', 'DBY-W09', 'DBY-W09', 'DBY-W09', 'DBY-W09', 'DBY-W09', 'MON-AL19', 'MON-W19', 'GOT-AL09', 'GOT-AL09', 'GOT-AL09', 'GOT-W29', 'GOT-W29', 'AGS3-L09', 'HUAWEI MediaPad', 'HUAWEI MediaPad', '403HW', 'HUAWEI MediaPad', 'S8-306L', 'HUAWEI MediaPad', 'Huawei MediaPad', 'X1 7.0', 'Huawei MediaPad', 'S8-701w', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MON-AL19B', 'MON-AL19B', 'MON-AL19B', 'BTV-DL09', 'BTV-W09', 'BAH-W09', 'CPN-L09', 'CPN-AL00', 'CPN-W09', 'BAH-L09', 'BAH2-W19', 'JDN2-L09', 'BAH2-L09', 'BAH2-AL10', 'AGR-L09', 'KOB2-L03', 'T1-A21w', 'T1-A21L', 'T1-A23L', 'T1-701u', 'T1-701u', 'T1-823L', 'T1-823L', 'T1-821w', 'MediaPad T1 8.0', 'AGS-W09', 'AGS-L09', 'AGS-L03', 'BG2-U01', 'BG2-W09', 'KOB-L09', 'BZK-L00', 'KOB-W09', 'AGS2-L09', 'AGS2-W09', 'GEM-701L', 'GEM-703L', 'GEM-702L', 'Nexus 6P', 'Nexus 6P', 'HUAWEI CAN-L11', 'HUAWEI CAN-L12', 'HUAWEI CAN-L01', 'HUAWEI CAZ-AL10', '1080x1788', 'NCO-LX1', 'NCO-AL00', 'GLA-LX1', 'GLA-AL00', 'PIC-TL00', 'PIC-LX9', 'PIC-AL00', '704HW', 'BAC-L03', 'BAC-TL00', 'BAC-L01', 'BAC-TL00', 'BAC-AL00', 'BAC-L22', 'BAC-L21', 'BAC-AL00', 'BAC-L21', 'RNE-L22', 'HWI-AL00', 'HWI-AL00', 'HWI-AL00', 'HWI-TL00', 'HWI-AL00', 'PAR-LX1', 'PAR-AL00', 'PAR-LX9', 'PAR-AL00', 'ANE-AL00', 'INE-LX2', 'INE-LX2r', 'VCE-L22', 'VCE-TL00', 'VCE-AL00', 'VCE-AL00', 'VCE-AL00', 'MAR-AL00', 'MAR-AL00', 'MAR-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL10', 'SEA-AL10', 'SEA-AL10', 'SEA-AL10', 'SEA-AL10', 'GLK-AL00', 'GLK-TL00', 'GLK-TL00', 'GLK-LX1U', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'SPN-TL00', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AN00', 'WLZ-AN00', 'WLZ-AN00', 'WLZ-AN00', 'WLZ-AN00', 'WLZ-AN00', 'JNY-AL10', 'JNY-AL10', 'JNY-AL10', 'JNY-AL10', 'JNY-AL10', 'JEF-TN00', 'JEF-NX9', 'JEF-AN20', 'JEF-AN00', 'JEF-AN20', 'JEF-AN00', 'JER-AN20', 'JER-AN10', 'JER-TN10', 'JER-AN10', 'JER-AN10', 'JER-AN20', 'JER-AN10', 'CDL-AN50', 'CDY-NX9B', 'CDY-AN00', 'CDY-AN00', 'JNY-LX2', 'ANG-LX2', 'ANG-LX1', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AN00', 'BRQ-AN00', 'BRQ-AN00', 'BRQ-AN00', 'BRQ-AN00', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AN00', 'JSC-AN00', 'JSC-AN00', 'JSC-AN00', 'JSC-AN00', 'JSC-AN00', 'JSC-AN00', 'CHL-AL60', 'CHL-AL60', 'NEN-LX1', 'NEN-L22', 'NAM-LX9', 'RTE-AL00', 'RTE-AL00', 'RTE-AL00', 'RTE-AL00', 'RTE-AL00', 'RTE-AL00', 'RTE-AL00', 'JLN-LX1', 'JLN-LX3', '608HW', 'PRA-LX2', 'PRA-LX3', 'HUAWEI MLA-L11', 'DIG-L01', 'WAS-AL00', 'FIG-LX1', 'FIG-LX2', 'FIG-LX3', 'POT-LX1', 'POT-LX3', 'POT-LX2J', 'POT-LX1AF', 'POT-LX1T', 'PPA-LX2', 'PPA-LX1', 'P Smart S', 'STK-LX1', 'MZ-STK-LX1', 'VTR-L09', 'VTR-L29', 'VTR-AL00', 'WAS-LX1A', 'WAS-TL10', 'VKY-AL00', 'VKY-L09', 'VKY-L29', 'BAC-L23', 'HUAWEI P11', 'EML-L09', 'EML-L29', 'EML-AL00', 'EML-AL00', 'EML-L29', 'ANE-LX1', 'ANE-LX2', 'ANE-LX3', 'ANE-LX2J', 'CLT-L29', 'CLT-AL00', 'CLT-L09', 'CLT-L04', 'CLT-AL00', 'ELE-AL00', 'ELE-L09', 'ELE-AL00', 'ELE-L29', 'ELE-L04', 'ELE-AL00', 'MAR-LX1A', 'MAR-LX1M', 'MAR-LX1A', 'MAR-LX2', 'MAR-LX3A', 'MAR-LX1B', 'VOG-AL10', 'VOG-L29', 'VOG-L09', 'HUAWEI P30PRO', 'ANA-LX4', 'JNY-LX1', 'ART-L29', 'ART-L29N', 'ELS-NX9', 'ELS-AN00', 'ELS-AN00', 'ELS-AN00', 'ELS-AN10', 'ELS-AN10', 'ELS-N39', 'ELS-AN10', 'ABR-LX9', 'ABR-AL00', 'Huawei P50', 'ABR-AL00', 'BAL-L49', 'BAL-AL00', 'JAD-AL50', 'ABR-AL60', 'ABR-AL90', 'ABR-AL60', 'ABR-AL90', 'ABR-AL60', 'ABR-AL90', 'ABR-AL60', 'ABR-AL60', 'ABR-AL60', 'HUAWEI P6-U06', 'HUAWEI P6s', 'HUAWEI P7 mini', 'HUAWEI P7 mini', 'HUAWEI P7 mini', 'HUAWEI GRA-L09', 'HUAWEI GRA-UL00', 'ALE-L21', 'ALE-L23', 'ALE-L21', 'ALE-L21', 'PRA-LX1', 'PRA-LA1', 'HUAWEI P8max', 'HUAWEI GRA-UL10', 'HUAWEI-P8Lite', 'HUAWEI-P8Lite', 'EVA-L09', 'EVA-DL00', 'EVA-L19', 'EVA-AL00', 'EVA-AL10', 'HUAWEI VNS-L31', 'HUAWEI VNS-L21', 'HUAWEI VNS-L22', 'SLA-L22', 'SLA-L02', 'HUAWEI VNS-L52', 'HUAWEI VNS-L52', 'DIG-L03', 'DIG-L23', 'VIE-L29', 'VIE-L09', 'VIE-AL10', 'VIE-AL10', 'SM-A336B', 'SM-A536E', 'M2101K6R', 'SM-A307G', 'SM-A528B', 'LM-K200', '2201116SG', 'SM-A107M', 'CPH2239', 'SM-A205G', 'M2004J19C', 'M2102J20SG', 'SM-A336M', 'SM-A127M', 'SM-G975U', 'SM-A730F', 'SM-G950F', 'M2007J20CG', 'T671E', 'HUAWEI_Q201', 'Huawei S7', 'HUAWEI-S7', 'HUAWEI-S7', 'HUAWEI-S7', 'S8600', 'S8600', 'S8600', 'HUAWEI S9', 'HUAWEI ATH-UL01', 'HUAWEI ATH-UL06', 'KANT-360', 'KANT-360S', 'LEO-BX9', 'LEO-DLXXE', 'HUAWEI T1 7.0', 'B988', 'ZT-10013G', 'B988', 'B988', 'HUAWEI T8100', 'HUAWEI T8500', 'HUAWEI T8600', 'T8620', 'T8620', 'T8620', 'T8830Pro', 'T8830Pro', 'T8830Pro', 'HUAWEI T8833', 'HUAWEI T8833', 'HUAWEI T8833', 'HUAWEI T8950', 'HUAWEI T8950', 'HUAWEI T8950', 'HUAWEI T8950', 'HUAWEI T8950', 'HUAWEI T8951', 'HUAWEI T8951', 'HUAWEI T8951', 'HUAWEI_T8951', 'HUAWEI_T8951', 'HUAWEI T8951', 'HUAWEI T8951', 'T9200', 'T9200', 'T9200', 'HUAWEI-U20', 'HUAWEI U8120', 'U8180', 'U8180', 'U8180', 'MegaFon U8180', 'Kyivstar Terra', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8230', 'U8220/U8230', 'HuaweiU8300', 'U8350', 'U8350', 'GM FOX', 'U8350', 'Barcelona', 'U8350', 'U8350', 'U8350', 'U8350', 'U8350-51', 'U8350', 'U8350', 'U8350', 'U8350-51', 'Personal U8350', 'U8350', 'U8350', 'U8350', 'U8350', 'MF8503', 'ICE', 'MF8503', 'MF8503', 'HuaweiU8500', 'HuaweiU8510', 'S41HW', 'U8600', 'U8600', 'U8600', 'U8600', 'U8600', 'U8600', 'U8600', 'Huawei u8650', 'Huawei u8650', 'U8650', 'U8650-1', 'U8650', 'U8650', 'U8650', 'U8650-1', 'U8650-1', 'U8650', 'MTC 955', 'U8650', 'U8650', 'U8650-1', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'Prism', 'Prism', 'Prism', 'U8651T', 'Prism', 'U8651T', 'U8651T', 'Prism', 'U8652', 'Huawei-U8652', 'U8652', 'Huawei-U8652', 'Huawei-U8652', 'Huawei-U8652', 'Huawei-U8652', 'Android 2.3.5', 'U8655-51', 'U8655-1', 'U8655-1', 'U8655-1', 'MTC 965', 'U8655-1', 'U8655-1', 'U8655-1', 'U8655-1', 'U8655-1', 'U8655-1', 'U8655-1', 'U8655-1', 'Etisalat', 'U8655-1', 'U8655-1', 'U8655-51', 'U8655-1', 'U8660', 'SONIC', 'HUAWEI U8661', 'HUAWEI_U8661', 'HUAWEI U8661', 'HUAWEI U8661', 'HUAWEI U8661', 'HUAWEI U8661', 'Huawei-U8665', 'Huawei-U8665', 'Huawei-U8665', 'Huawei-U8665', 'Huawei-U8665', 'Huawei-U8665', 'Huawei-U8665', 'GT-19100', 'U8666-1', 'U8666-1', 'U8666-1', 'MTC Fit', 'U8666-1', 'U8666-1', 'U8666-1', 'U8666-1', 'U8666-1', 'U8666-51', 'U8666-1', 'U8666-51', 'U8666-51', 'U8666-51', 'U8666-51', 'U8666-1', 'U8666-1', 'U8666-1', 'U8666-1', 'U8666-1', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666N', 'HUAWEI U8666N', 'HUAWEI U8666N', 'HUAWEI U8666N', 'HUAWEI U8666N', 'U8667', 'U8667', 'U8667', 'U8667', 'U8667', 'U8667', 'U8667', 'U8667', 'T-MobilemyTouch', 'HUAWEI U8681', 'HUAWEI U8681', 'HUAWEI U8681', 'HUAWEI U8681', 'HUAWEI U8681', 'HUAWEI U8681', 'Prism II', 'Prism II', 'Prism II', 'Prism II', 'Huawei-U8687', 'Huawei-U8687', 'Huawei-U8687', 'Huawei-U8687', 'Huawei-U8687', 'Huawei-U8687', 'Ucell', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8815-51', 'U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'Galaxy S5', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'U8815N', 'U8815N', 'U8815N', 'U8815N', 'U8815N', 'U8815N', 'U8815N', 'U8815N', 'MTC Viva', 'HUAWEI U8816', 'U8816', 'MTC Viva', 'U8816', 'U8816', 'U8820', 'U8820', 'U8820', 'U8820', 'U8820', 'HUAWEI U8825D', 'HUAWEI U8825D', 'HUAWEI U8825D', 'HUAWEI U8825D', 'HUAWEI_U8825D', 'HUAWEI U8825D', 'HUAWEI U8825D', 'HUAWEI_U8825D', 'HUAWEI U8825D', 'HUAWEI U8825D', 'U8832D', 'U8836D', 'U8836D', 'U8836D', 'U8836D', 'U8836D', 'U8836D', 'U8836D', 'HUAWEI-U8850', 'U8860-51', 'HUAWEI_U8860', 'U8867Z', 'U8867Z', 'U8867Z', 'Huawei U8900', 'HUAWEI U8950', 'HUAWEI U8950D', 'Oppo F9D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8951', 'Huawei-U9000', 'HUAWEI-U9000', 'HUAWEI-U9000', 'HUAWEI-U9000', 'U9200E', 'U9200E', 'U9200E', 'U9200E', 'U9200E', 'U9200E', '201HW', '201HW', '201HW', '201HW', 'U9500E', 'HW-01E', 'HW-01E', 'HW-01E', 'HW-01E', 'HUAWEI U9510', 'Huawei/U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI_U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'GL07S', 'GL07S', 'GL07S', 'GL07S', 'GL07S', 'GL07S', 'UM840', 'UM840', 'UM840', 'KANT-359', 'KANT-369', 'HUAWEI WATCH', 'ARS-L22', 'ARS-TL00', 'ARS-AL00', 'ARS-L22', 'Huawei Y221', 'Huawei y221', 'Huawei Y3 2017', 'CRO-U00', 'CRO-L22', 'CAG-L02', 'CAG-L22', 'HUAWEI Y300C', 'HUAWEI Y300C', 'HUAWEI_Y300C', 'HUAWEI Y300C', 'HUAWEI Y300C', 'HUAWEI Y300C', 'HUAWEI Y300C', 'Huawei Y301A1', 'Huawei Y301A1', 'Huawei Y301A1', 'Huawei Y301A1', 'Huawei Y301A2', 'Huawei Y301A2', 'Huawei Y301A2', 'HuaweiY301A2', 'Huawei Y320', 'Huawei Y320', 'Huawei Y320', 'Huawei Y330', 'Huawei Y330', 'HUAWEI Y330-U01', 'HUAWEI Y336-U02', 'Huawei Y360', 'HUAWEI Y360', 'HUAWEI LUA-L21', 'HUAWEI LUA-U22', 'MYA-L22', 'MYA-L23', 'MYA-U29', 'DRA-L21', 'DRA-LX3', 'DRA-L01', 'U', 'AMN-LX9', 'AMN-LX2', 'AMN-LX3', 'HUAWEI AMN-LX9', 'AMN-LX1', 'DRA-LX5', 'DRA-LX5', 'DRA-LX5', 'DRA-LX5', 'CRO-L23', 'CRO-L03', 'CRO-L03', 'CAG-L03', 'CAG-L23', 'DRA-LX2', 'MYA-L13', 'HUAWEI Y511', 'Huawei Y520', 'HUAWEI Y520', 'HUAWEI Y536A1', 'HUAWEI Y550', 'HUAWEIY560', 'Huawei Y5C', 'HUAWEI CUN-L22', 'HUAWEI CUN-U29', 'HUAWEI CUN-L21', 'HUAWEI CUN-L01', 'DRA-LX9', 'DRA-LX9', 'DRA-LX9', 'HUAWEI SCL-U31', 'HUAWEI SCC-U21', 'MYA-L11', 'MYA-L41', 'ATU-L22', 'ATU-L21', 'MRD-LX3', 'MRD-LX1', 'MRD-LX1F', 'MRD-LX1N', 'MRD-LX3', 'ATU-L31', 'TIT-L01', 'HUAWEI TIT-L01', 'HUAWEI TIT-AL00', 'MRD-LX2', 'Kavak Y625-U03', 'Y635-L03', 'Y635-L01', 'HUAWEI Y635-L03', 'Y635-L02', 'Y635-L21', 'Y635-L21', 'CAM-L21', 'HUAWEI CAM-L21', 'CAM-L23', 'CAM-L03', 'MED-LX9', 'MED-LX9N', 'H1711z', 'TRT-LX3', 'TRT-LX1', 'LDN-L01', 'LDN-LX3', 'LDN-L01', 'DUB-LX3', 'DUB-LX1', 'LDN-L21', 'LDN-L21', 'LDN-L21', 'TRT-L21A', 'LDN-LX2', 'DUB-LX2', 'DUB-AL20', 'PPA-LX3', 'Peppa-L23B', 'ART-L28', 'AQM-LX1', 'AQM-LX1', 'FLA-LX3', 'FLA-LX2', 'FLA-LX1', 'FLA-AL20', 'FLA-TL10', 'JKM-LX1', 'JKM-LX2', 'JKM-AL00b', 'JKM-AL00a', 'JKM-LX3', 'STK-L21', 'STK-L22', 'STK-LX3', 'FRL-L23', 'FRL-L22', 'FRL-L22']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.dix = random.choice(['114.0.0.20.2','114.0.0.38.120','114.0.0.20.70','114.0.0.28.120','114.0.0.0.24','114.0.0.0.41'])
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
            f'Instagram {self.dix} Android ({self.dvc}; 235dpi; 1080x2280; HUAWEI MOBILITY LIMITED/Huawei; {str(random.choice(self.huawei))}; mt6761; in_ID; 164094530)',
            f'Instagram {self.dix} Android ({self.dvc}; 235dpi; 1080x2280; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; mt6761; in_ID; 164094530)',
        ]))
        
    def useragent_ajax(self):
        fbcrrr = random.choice(['Sprint','Verizon','AT&T','Three','vodaAU','3Austria','Telstra','TELIA','OPTUS','U.S.Cellular','TFW','OrangeFrance','TELEGRL'])
        dpi = ['133','320','515','160','640','240','120','800','480','225','768','216','1024']
        i_version = ['114.0.0.20.2','114.0.0.38.120','114.0.0.20.70','114.0.0.28.120','114.0.0.0.24','114.0.0.0.41']
        pxl_phone = ['623x1280','700x1245','800x1280','1080x2340','1320x2400','1242x2688']
        return(random.choice([
            f""Instagram {str(random.choice(i_version))} Android (23/{str(random.randint(9,12))}; {str(random.choice(dpi))}dpi; {str(random.choice(pxl_phone))}; vivo; vivo Xplay5S; PD1516A; qcom; ru; 99640911)"",
            f""Mozilla/5.0 (Linux; Android {str(random.randint(9,12))}; Redmi Note 6 Pro Build/OPM1.171019.011){str(random.randint(111111,199999))}.020; en-US) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(random.randint(73,99))}.0.{str(random.randint(3500,3999))}.{str(random.randint(75,150))} Mobile Safari/537.36"",
            f""Mozilla/5.0 (Linux; U; Android {str(random.randint(9,12))}; zh-cn; OPPO R9s Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/{str(random.randint(73,99))}.0.{str(random.randint(3500,3999))}.{str(random.randint(75,150))} UCBrowser/{str(random.randint(7,13))}.4.0.{str(random.randint(1300,1999))} Mobile Safari/537.36"",
            f""Dalvik/2.1.0 (Linux; U; Android {str(random.randint(6,13))}; AORO_A7 Build/QP1A.190711.020) [FBAN/MessengerForAndroid;FBAV/{str(random.randint(4,19))}.{str(random.randint(1,9))};FBLC/in_ID;FBBV/{str(random.randint(4,19))}.{str(random.randint(1,9))};FBCR/{fbcrrr};FBMF/Aoro;FBBD/Aoro;FBDV/AORO_A7;FBSV/{str(random.randint(6,13))}.0;FBCA/armeabi-v7a:armeabi;FBDM/""+""{density=4,width=1440,height=3080};FB_FW/353;]"",
            f""Dalvik/2.1.0 (Linux; U; Android {str(random.randint(6,20))}; Avvio_793 Build/KOT49H) [FBAN/Orca-Android;FBAV/3.0.1-release;FBLC/in_ID;FBBV/128764;FBCR/Tsel-PakaiSarung;FBMF/Avvio;FBBD/Avvio;FBDV/Avvio_793;FBSV/{str(random.randint(6,13))}.0;;FBCA/armeabi-v7a:armeabi;FBDM/""+""{density=2.75,width=1080,height=2110}] FBBK/1""
        ]))
        


"
