id,title,username,language,date,content
hH1C2vnx,Shoot for the Win,Osiris1002,Python,Monday 12th of February 2024 11:40:52 AM CDT,"targets = list(map(int, input().split()))
def shoot_target(index):
    if 0 <= index < len(targets) and targets[index] != -1:
        shot_value = targets[index]
        targets[index] = -1
        for i in range(len(targets)):
            if targets[i] > shot_value:
                targets[i] -= shot_value
            elif targets[i] != -1:
                targets[i] += shot_value

while True:
    command = input()
    if command == ""End"":
        break
    index = int(command)
    shoot_target(index)

shot_targets = [target for target in targets if target == -1]

print(f""Shot targets: {len(shot_targets)} -> {' '.join(map(str, targets))}"")"
EVLxKS5J,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Monday 12th of February 2024 11:38:56 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_539694.pdf
 
Working as of
12 February 2024"
FjPwABBn,Pet Simulator 99! [‚òÅÔ∏èUPD 5] AutoFarm Script,Project-WD,Lua,Monday 12th of February 2024 11:35:09 AM CDT,"-- üÜïUpdate (2024-02-12)
-- AUTO FARM | AUTO GIFTS | AUTO HATCH | AUTO RANK & MORE
-- Scriptüìù: Paste into your executor
loadstring(game:HttpGet(""https://raw.githubusercontent.com/REDzHUBz/PetSimulator99/main/redz9999.lua"" ))()"
UWrPFNuj,Computer Store,Osiris1002,Python,Monday 12th of February 2024 11:33:43 AM CDT,"def calculate_taxes(price):
    return price * 0.2
def calculate_discount(total_price_with_taxes):
    return total_price_with_taxes * 0.1

total_price_without_taxes = 0

while True:
    price = input()
    if price == ""special"" or price == ""regular"":
        customer_type = price
        break
    price = float(price)
    if price <= 0:
        print(""Invalid price!"")
        continue
    total_price_without_taxes += price

if total_price_without_taxes == 0:
    print(""Invalid order!"")
else:
    total_taxes = calculate_taxes(total_price_without_taxes)
    total_price_with_taxes = total_price_without_taxes + total_taxes
    if customer_type == ""special"":
        discount = calculate_discount(total_price_with_taxes)
        total_price_with_taxes -= discount
    print(""Congratulations you've just bought a new computer!"")
    print(f""Price without taxes: {total_price_without_taxes:.2f}$"")
    print(f""Taxes: {total_taxes:.2f}$"")
    print(""-----------"")
    print(f""Total price: {total_price_with_taxes:.2f}$"")"
TBNpkRaH,dasdawe,jamezaa1188,AutoIt,Monday 12th of February 2024 11:33:19 AM CDT,"A9C3ABC2-0997-0DDE-6512-27DA839FCD54
A9C3ABC2-0997-0DDE-65/2-27DA839FCD54"
DfXnvaS1,uiachievement,Lonely_Wanderer,Lua,Monday 12th of February 2024 11:06:31 AM CDT,"local UIAnim = require ""widgets/uianim""
local Text = require ""widgets/text""
local Widget = require ""widgets/widget""
local Image = require ""widgets/image""
local ImageButton = require ""widgets/imagebutton""
local AnimButton = require ""widgets/animbutton""
local HoverText = require ""widgets/hoverer""
local achievement_config = require(""Achievement.achievement_config"")
local achievement_ability_config = require(""Achievement.achievement_ability_config"")
local id2ability = achievement_ability_config.id2ability

local modname = KnownModIndex:GetModActualName(""New Achivement"")
local killAmountFinishAchievement = GetModConfigData(""killamount_can_finish_achievement"",modname)
local uiachievement = Class(Widget, function(self, owner)
	Widget._ctor(self, ""uiachievement"")
	self.owner = owner
	self.mainui = self:AddChild(Widget(""mainui""))
	self.mainui:SetScale(1.06, 1.06, 1)
	self.mainui.bg = self.mainui:AddChild(Image(""images/quagmire_recipebook.xml"", ""quagmire_recipe_menu_bg.tex""))
	self.mainui.bg:SetPosition(0, 20, 0)
	self.mainui.bg:MoveToFront()
	self.mainui.bg:ScaleToSize(1253, 783)
	self.mainui.bg:Hide()

	self.mainui.bg.allachiv = self.mainui.bg:AddChild(Widget(""allachiv""))
	self.mainui.bg.allachiv:SetPosition(0, 0, 0)
	self.mainui.bg.allachiv:Hide()

	self.mainui.bg.allcoin = self.mainui.bg:AddChild(Widget(""allcoin""))
	self.mainui.bg.allcoin:SetPosition(0, 0, 0)
	self.mainui.bg.allcoin:Hide()

	--ÂõæÈâ¥
	self.mainui.bg.allchart = self.mainui.bg:AddChild(Widget(""allchart""))
	self.mainui.bg.allchart:SetPosition(0, 0, 0)
	self.mainui.bg.allchart:Hide()
	--3‰∏™ÂàÜÁ±ª
	self.mainui.bg.title_1 = self.mainui.bg:AddChild(ImageButton(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex""))
	self.mainui.bg.title_1:SetPosition(-365, 420, 0)
	self.mainui.bg.title_1:SetNormalScale(1,1,1)
	self.mainui.bg.title_1:SetFocusScale(1,1,1)
	--ÊàêÂ∞±bt
	self.mainui.bg.title_1:SetOnClick(function()
		self.mainui.bg.title_1:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex"")
		self.mainui.bg.title_2:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
		self.mainui.bg.title_3:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
		--------------------------------
		if not self.mainui.bg.allachiv.shown then
			self.mainui.bg.allachiv:Show()
			self.mainui.bg:Show()
			self.mainui.infobutton:Show()
			self.mainui.itemclassification:Show()
			self.mainui.bg.allcoin:Hide()
			self.mainui.bg.allchart:Hide()

			self.mainui.infobutton.last:Show()
			self.mainui.infobutton.next:Show()

			self.mainui.infobutton.last2:Hide()
			self.mainui.infobutton.next2:Hide()
			self.mainui.infobutton.last3:Hide()
			self.mainui.infobutton.next3:Hide()
			self.mainui.infobutton.info:Hide()
			self.mainui.infobutton.desc:Hide()
		end
		self.maxnumpage = math.ceil(#self.listitem/14)
		if self.numpage == 1 then
			self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		else
			self.mainui.infobutton.last:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
		end
		if self.numpage >= self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end

	end)
	self.mainui.bg.title_1.lable = self.mainui.bg.title_1:AddChild(Text(NEWFONT_OUTLINE, 50, STRINGS.ALLACHIVUISTRING[1]))
	self.mainui.bg.title_1.lable:SetPosition(0, -5, 0)

	self.mainui.bg.title_2 = self.mainui.bg:AddChild(ImageButton(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex""))
	self.mainui.bg.title_2:SetPosition(0, 420, 0)
	self.mainui.bg.title_2:SetNormalScale(1,1,1)
	self.mainui.bg.title_2:SetFocusScale(1,1,1)
	--ËÉΩÂäõBT
	self.mainui.bg.title_2:SetOnClick(function()

		self.mainui.bg.title_1:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
		self.mainui.bg.title_2:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex"")
		self.mainui.bg.title_3:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")

		if not self.mainui.bg.allcoin.shown then
			if  TUNING.CHECKCOIN then
				self.mainui.bg.allcoin:Hide()
			else
				self.mainui.bg.allcoin:Show()
			end
			self.mainui.bg:Show()
			self.mainui.infobutton:Show()
				
			self.mainui.itemclassification:Hide()
				
			self.mainui.bg.allachiv:Hide()
			self.mainui.bg.allchart:Hide()
			self.mainui.infobutton.last:Hide()
			self.mainui.infobutton.next:Hide()
			self.mainui.infobutton.last3:Hide()
			self.mainui.infobutton.next3:Hide()
			self.mainui.infobutton.last2:Show()
			self.mainui.infobutton.next2:Show()
			self.mainui.infobutton.info:Hide()
			self.mainui.infobutton.desc:Hide()
		end
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")

		self.maxnumpage2 = math.ceil(#self.coinlist/28)
		if self.numpage2 == 1 then
			self.mainui.infobutton.last2:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		else
			self.mainui.infobutton.last2:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
		end
		if self.numpage2 >= self.maxnumpage2 then
			self.mainui.infobutton.next2:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next2:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		
	end)

	self.mainui.bg.title_2.lable = self.mainui.bg.title_2:AddChild(Text(NEWFONT_OUTLINE, 50, STRINGS.ALLACHIVUISTRING[2]))
	self.mainui.bg.title_2.lable:SetPosition(0, -5, 0)

	self.mainui.bg.title_3 = self.mainui.bg:AddChild(ImageButton(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex""))
	self.mainui.bg.title_3:SetPosition(365, 420, 0)
	self.mainui.bg.title_3:SetNormalScale(1,1,1)
	self.mainui.bg.title_3:SetFocusScale(1,1,1)
	--ÂõæÈâ¥BT
	self.mainui.bg.title_3:SetOnClick(function()
		self.mainui.bg.title_1:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
		self.mainui.bg.title_2:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
		self.mainui.bg.title_3:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex"")

		if not self.mainui.bg.allchart.shown then
			self.mainui.bg.allchart:Show()
			self.mainui.bg:Show()
			self.mainui.infobutton:Show()
				
			self.mainui.itemclassification:Hide()
			self.mainui.bg.allcoin:Hide()
			self.mainui.bg.allachiv:Hide()
			self.mainui.infobutton.last:Hide()
			self.mainui.infobutton.next:Hide()
			self.mainui.infobutton.last2:Hide()
			self.mainui.infobutton.next2:Hide()

			self.mainui.infobutton.last3:Show()
			self.mainui.infobutton.next3:Show()
			self.mainui.infobutton.info:Hide()
			self.mainui.infobutton.desc:Hide()
		end


	end)
	self.mainui.bg.title_3.lable = self.mainui.bg.title_3:AddChild(Text(NEWFONT_OUTLINE, 50, STRINGS.ALLACHIVUISTRING[3]))
	self.mainui.bg.title_3.lable:SetPosition(0, -5, 0)

	--Á∫ø
	self.mainui.bg.line = self.mainui.bg:AddChild(Image(""images/quagmire_recipebook.xml"", ""quagmire_recipe_line_long.tex""))
	self.mainui.bg.line:SetPosition(0, 325, 0)

	--ÊàêÂ∞±ÁÇπ ÊòæÁ§∫
	self.mainui.bg.coinamount = self.mainui.bg:AddChild(Text(NEWFONT_OUTLINE, 45,string.format(STRINGS.ACHIEVEMENT_POINT_AMOUNT, self.owner.currentcoinamount:value())))
	self.mainui.bg.coinamount:SetPosition(-180, 350, 0)
	--ÊùÄÊàÆÂÄº
	self.mainui.bg.killamount = self.mainui.bg:AddChild(Text(NEWFONT_OUTLINE, 45, string.format(STRINGS.ACHIEVEMENT_KILL_AMOUNT, self.owner.currentkillamount:value())))
	self.mainui.bg.killamount:SetPosition(180, 350, 0)

	self.mainbutton = self:AddChild(Widget(""mainbutton""))
	self.mainbutton:SetPosition(-850, 460, 0)
	self.mainbutton:SetScale(1,1,1)

	self.mainbutton.checkbuttonglow = self.mainbutton:AddChild(Image(""images/button/checkbuttonglow.xml"", ""checkbuttonglow.tex""))
    self.mainbutton.checkbuttonglow:SetClickable(false)
    self.mainbutton.checkbuttonglow:Hide()

--Â§öÂ∞ë‰ªªÂä°
    self.mainbutton.checkbutton = self.mainbutton:AddChild(ImageButton(""images/button/checkbutton.xml"", ""checkbutton.tex""))
    self.mainbutton.checkbutton:MoveToFront()
    self.mainbutton.checkbutton:SetHoverText(STRINGS.ACHIEVEMENT_VIEW)

	self.mainbutton.checkbutton:SetOnGainFocus(function() self.mainbutton.checkbuttonglow:Show() end)
	self.mainbutton.checkbutton:SetOnLoseFocus(function() self.mainbutton.checkbuttonglow:Hide() end)
	self.cooldown = true
	self.mainbutton.checkbutton:SetOnClick(function()
		if TheInput:IsKeyDown(KEY_ALT) and TheInput:IsKeyDown(KEY_SHIFT) then
			if self.cooldown then
				local allnumber = #self.achivlist - 1
				if  not TheInput:IsKeyDown(KEY_CTRL) then
					TheNet:Say(STRINGS.LMB ..string.format(STRINGS.ACHIEVEMENT_PROCESS,self.achivlist[#self.achivlist].current,allnumber), false)
				else
					if  TheInput:IsKeyDown(KEY_CTRL) then
						TheNet:Say(STRINGS.LMB .. string.format(STRINGS.ACHIEVEMENT_PROCESS ,self.achivlist[#self.achivlist].current,allnumber), true)
					end
				end
				self.cooldown = false
				self.owner:DoTaskInTime(3, function() self.cooldown = true end)
			end
		else
			if self.mainui.bg.allachiv.shown then
				self.mainui.bg.allachiv:Hide()
				self.mainui.bg:Hide()
				self.mainui.infobutton:Hide()
				self.mainui.itemclassification:Hide()
				--self.mainbutton.configact:Hide()
				self.mainbutton.configbg:Hide()
				self.mainbutton.configbigger:Hide()
				self.mainbutton.configsmaller:Hide()
				self.mainbutton.configremove:Hide()
				self.mainbutton.removeinfo:Hide()
				self.mainbutton.removeyes:Hide()
				self.mainbutton.removeno:Hide()
			else
				self.mainui.bg.allachiv:Show()
				self.mainui.bg:Show()
				self.mainui.infobutton:Show()
				self.mainui.itemclassification:Show()
				self.mainui.bg.allcoin:Hide()
				self.mainui.infobutton.last:Show()
				self.mainui.infobutton.next:Show()
				self.mainui.infobutton.last2:Hide()
				self.mainui.infobutton.next2:Hide()
				self.mainui.infobutton.last3:Hide()
				self.mainui.infobutton.next3:Hide()

				self.mainui.bg.title_1:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex"")
				self.mainui.bg.title_2:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
				self.mainui.bg.title_3:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")

				if TUNING.CHECKCOIN then
					--self.mainbutton.configact:Hide()
				else
					if self.mainbutton.configact.shown then
						self.mainbutton.configact:Show()
					else
						self.mainbutton.configact:SetTextures(""images/button/config_dact.xml"", ""config_dact.tex"")
						self.mainbutton.configact:Show()
					end
				end

			end
			self.maxnumpage = math.ceil(#self.listitem/14)
			if self.numpage == 1 then
				self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
			else
				self.mainui.infobutton.last:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
			end
			if self.numpage >= self.maxnumpage then
				self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
			else
				self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
			end
	    end
	end)

	self.mainbutton.coinbuttonglow = self.mainbutton:AddChild(Image(""images/button/coinbuttonglow.xml"", ""coinbuttonglow.tex""))
    self.mainbutton.coinbuttonglow:SetClickable(false)
    self.mainbutton.coinbuttonglow:Hide()
    self.mainbutton.coinbuttonglow:SetPosition(55, -2, 0)
    self.mainbutton.coinbuttonglow:SetScale(1,1,1)
--Â§öÂ∞ë ÁÇπ
    self.mainbutton.coinbutton = self.mainbutton:AddChild(ImageButton(""images/button/coinbutton.xml"", ""coinbutton.tex""))
    self.mainbutton.coinbutton:MoveToFront()
    self.mainbutton.coinbutton:SetPosition(55, -2, 0)
    self.mainbutton.coinbutton:SetScale(1,1,1)
    self.mainbutton.coinbutton:SetHoverText(STRINGS.ACHIEVEMENT_EXCHANGE_ABILITY)

	self.mainbutton.coinbutton:SetOnGainFocus(function() self.mainbutton.coinbuttonglow:Show() end)
	self.mainbutton.coinbutton:SetOnLoseFocus(function() self.mainbutton.coinbuttonglow:Hide() end)

	if TUNING.CHECKCOIN then
		self.mainbutton.coinbutton:Hide()
	end
	self.mainbutton.coinbutton:SetOnClick(function()
		if TheInput:IsKeyDown(KEY_ALT) and TheInput:IsKeyDown(KEY_SHIFT) then
			if self.cooldown then
				local emoji_link = "" ""
				local announce = 1
				if self.owner.currentcoinamount:value() < 20 then
					if TheInventory:CheckOwnership(""emoji_lightbulb"") then emoji_link = "":lightbulb:"" end
					announce = 1
				elseif self.owner.currentcoinamount:value() >= 20 and  self.owner.currentcoinamount:value() <= 50 then
					if TheInventory:CheckOwnership(""emoji_thumbsup"") then emoji_link = "":thumbsup:"" end
					announce = 2
				elseif self.owner.currentcoinamount:value() > 50 and  self.owner.currentcoinamount:value() < 90 then
					announce = 3
					if TheInventory:CheckOwnership(""emoji_flex"") then emoji_link = "":flex:"" end
				else 
					announce = 4
					if TheInventory:CheckOwnership(""emoji_fire"") then emoji_link = "":fire:"" end
				end
				TheNet:Say(STRINGS.LMB .. string.format(STRINGS.ACHIEVEMENT_ANNOUNCE_POINT[announce], self.owner.currentcoinamount:value())..emoji_link .. string.format(STRINGS.ACHIEVEMENT_KILL_AMOUNT, self.owner.currentkillamount:value()), false)
				self.cooldown = false
				self.owner:DoTaskInTime(3, function() self.cooldown = true end)
			end
		else
			if self.mainui.bg.allcoin.shown then
				self.mainui.bg.allcoin:Hide()
				self.mainui.bg:Hide()
				self.mainui.infobutton:Hide()
				self.mainui.itemclassification:Hide()
				--self.mainbutton.configact:Hide()

				self.mainbutton.configbg:Hide()
				self.mainbutton.configbigger:Hide()
				self.mainbutton.configsmaller:Hide()
				self.mainbutton.configremove:Hide()
				self.mainbutton.removeinfo:Hide()
				self.mainbutton.removeyes:Hide()
				self.mainbutton.removeno:Hide()
			else
				self.mainui.bg.allcoin:Show()
				self.mainui.bg:Show()
				self.mainui.infobutton:Show()
				
				self.mainui.itemclassification:Hide()
				
				self.mainui.bg.allachiv:Hide()
				self.mainui.infobutton.last:Hide()
				self.mainui.infobutton.next:Hide()

				self.mainui.infobutton.last2:Show()
				self.mainui.infobutton.next2:Show()

				self.mainui.infobutton.last3:Hide()
				self.mainui.infobutton.next3:Hide()

				self.mainui.bg.title_2:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_active.tex"")
				self.mainui.bg.title_1:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
				self.mainui.bg.title_3:SetTextures(""images/quagmire_recipebook.xml"", ""quagmire_recipe_tab_inactive.tex"")
				

				if TUNING.CHECKCOIN then
					--self.mainbutton.configact:Hide()
				else
					if self.mainbutton.configact.shown  then
						self.mainbutton.configact:Show()
					else
						self.mainbutton.configact:SetTextures(""images/button/config_dact.xml"", ""config_dact.tex"")
						self.mainbutton.configact:Show()
					end
				end
			end
			self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")

			self.maxnumpage2 = math.ceil(#self.coinlist/28)
			if self.numpage2 == 1 then
				self.mainui.infobutton.last2:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
			else
				self.mainui.infobutton.last2:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
			end

			if self.numpage2 >= self.maxnumpage2 then
				self.mainui.infobutton.next2:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
			else
				self.mainui.infobutton.next2:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
			end
		end
	end)

	self.mainbutton.configbg = self.mainbutton:AddChild(Image(""images/button/config_bg.xml"", ""config_bg.tex""))
	self.mainbutton.configbg:SetPosition(193, -5, 0)
	self.mainbutton.configbg:SetClickable(false)
	self.mainbutton.configbg:Hide()


	self.mainbutton.configact = self.mainbutton:AddChild(ImageButton(""images/button/config_dact.xml"", ""config_dact.tex""))
	self.mainbutton.configact:SetPosition(115, -5, 0)
	self.mainbutton.configact:SetNormalScale(1,1,1)
	self.mainbutton.configact:SetFocusScale(1.1,1.1,1)
	self.mainbutton.configact:SetHoverText(STRINGS.ACHIEVEMENT_OPTION)

	if TUNING.CHECKCOIN then
		--self.mainbutton.configact:Hide()
	end

	--self.mainbutton.configact:Hide()

	self.mainbutton.configact:SetOnClick(function()
		if self.mainbutton.configbg.shown then
			self.mainbutton.configact:SetTextures(""images/button/config_dact.xml"", ""config_dact.tex"")
			self.mainbutton.configbg:Hide()
			self.mainbutton.configbigger:Hide()
			self.mainbutton.configsmaller:Hide()
			self.mainbutton.configremove:Hide()
		else
			self.mainbutton.configact:SetTextures(""images/button/config_act.xml"", ""config_act.tex"")
			self.mainbutton.configbg:Show()
			self.mainbutton.configbigger:Show()
			self.mainbutton.configsmaller:Show()
			self.mainbutton.configremove:Show()
		end
		self.mainbutton.removeinfo:Hide()
		self.mainbutton.removeyes:Hide()
		self.mainbutton.removeno:Hide()
	end)

	self.size = 1.06
	self.mainbutton.configbigger = self.mainbutton:AddChild(ImageButton(""images/button/config_bigger.xml"", ""config_bigger.tex""))
	self.mainbutton.configbigger:SetPosition(167, -5, 0)
	self.mainbutton.configbigger:Hide()
	self.mainbutton.configbigger:SetNormalScale(1,1,1)
	self.mainbutton.configbigger:SetFocusScale(1.1,1.1,1)
	self.mainbutton.configbigger:SetHoverText(STRINGS.ACHIEVEMENT_ENLARGE)
	self.mainbutton.configbigger:SetOnClick(function()
		if not self.mainui.bg.allachiv.shown and not self.mainui.bg.allcoin.shown then
			self.mainui.bg.allachiv:Show()
			self.mainui.bg:Show()
			self.mainui.infobutton:Show()
		end
		self.size = self.size + .02
		self.mainui:SetScale(self.size, self.size, 1)
	end)

	self.mainbutton.configsmaller = self.mainbutton:AddChild(ImageButton(""images/button/config_smaller.xml"", ""config_smaller.tex""))
	self.mainbutton.configsmaller:SetPosition(219, -5, 0)
	self.mainbutton.configsmaller:Hide()
	self.mainbutton.configsmaller:SetNormalScale(1,1,1)
	self.mainbutton.configsmaller:SetFocusScale(1.1,1.1,1)
	self.mainbutton.configsmaller:SetHoverText(STRINGS.ACHIEVEMENT_SHRINK)
	self.mainbutton.configsmaller:SetOnClick(function()
		if not self.mainui.bg.allachiv.shown and not self.mainui.bg.allcoin.shown then
			self.mainui.bg.allachiv:Show()
			self.mainui.bg:Show()
			self.mainui.infobutton:Show()
		end
		if self.size > .02 then
			self.size = self.size - .02
		end
		self.mainui:SetScale(self.size, self.size, 1)
	end)
	self.mainbutton.removeinfo = self.mainbutton:AddChild(Image(""images/button/remove_info_cn.xml"", ""remove_info_cn.tex""))
	self.mainbutton.removeinfo:SetPosition(230, -180, 0)
	self.mainbutton.removeinfo:SetScale(.95,.95,1)
	
	self.mainbutton.removeinfo.title = self.mainbutton.removeinfo:AddChild(Text(NEWFONT_OUTLINE, 45, STRINGS.ALLACHIEVE_RESET_CONFIRM))
	self.mainbutton.removeinfo.title:SetPosition(-90, 110, 0)
	self.mainbutton.removeinfo.title:SetColour(1, 0, 0, 1)

	self.mainbutton.removeinfo.lable = self.mainbutton.removeinfo:AddChild(Text(NEWFONT_OUTLINE, 30, string.format(STRINGS.ALLACHIEVE_RESET,TUNING.RETRUN_POINT * 100)))
	self.mainbutton.removeinfo.lable:SetPosition(-80, 80, 0)
	self.mainbutton.removeinfo.lable:SetRegionSize(300,80)
	self.mainbutton.removeinfo:Hide()
	self.mainbutton.configremove = self.mainbutton:AddChild(ImageButton(""images/button/config_remove.xml"", ""config_remove.tex""))
	self.mainbutton.configremove:SetPosition(271, -5, 0)
	self.mainbutton.configremove:Hide()
	self.mainbutton.configremove:SetNormalScale(1,1,1)
	self.mainbutton.configremove:SetFocusScale(1.1,1.1,1)
	self.mainbutton.configremove:SetHoverText(STRINGS.ACHIEVEMENT_RESET)
	self.mainbutton.configremove:SetOnClick(function()
		self.mainbutton.removeinfo:Show()
		self.mainbutton.removeyes:Show()
		self.mainbutton.removeno:Show()
	end)

	self.mainbutton.removeyes = self.mainbutton:AddChild(ImageButton(""images/button/remove_yes.xml"", ""remove_yes.tex""))
	self.mainbutton.removeyes:SetPosition(17, -77, 0)
	self.mainbutton.removeyes:Hide()
	self.mainbutton.removeyes:SetNormalScale(1,1,1)
	self.mainbutton.removeyes:SetFocusScale(1.1,1.1,1)
	self.mainbutton.removeyes:SetOnClick(function()
		SendModRPCToServer(MOD_RPC[""DSTAchievement""][""removecoin""])
		self.owner:DoTaskInTime(.35, function()
			self:loadcoinlist()
			self:coinbuild()
		end)
		self.mainbutton.removeinfo:Hide()
		self.mainbutton.removeyes:Hide()
		self.mainbutton.removeno:Hide()

		self.mainui.bg.allcoin:Hide()
		self.mainui.bg:Hide()
		self.mainui.infobutton:Hide()
		self.mainui.itemclassification:Hide()
		self.mainui.bg.allachiv:Hide()

		--self.mainbutton.configact:Hide()
		self.mainbutton.configbg:Hide()
		self.mainbutton.configbigger:Hide()
		self.mainbutton.configsmaller:Hide()
		self.mainbutton.configremove:Hide()
	end)

	self.mainbutton.removeno = self.mainbutton:AddChild(ImageButton(""images/button/remove_no.xml"", ""remove_no.tex""))
	self.mainbutton.removeno:SetPosition(257, -77, 0)
	self.mainbutton.removeno:Hide()
	self.mainbutton.removeno:SetNormalScale(1,1,1)
	self.mainbutton.removeno:SetFocusScale(1.1,1.1,1)
	self.mainbutton.removeno:SetOnClick(function()
		self.mainbutton.removeinfo:Hide()
		self.mainbutton.removeyes:Hide()
		self.mainbutton.removeno:Hide()
	end)

	self.mainui.infobutton = self.mainui:AddChild(Widget(""infobutton""))
	self.mainui.infobutton:SetPosition(240, -30, 0)
	self.mainui.infobutton:Hide()

	self.mainui.infobutton.info = self.mainui.infobutton:AddChild(Image(""images/quagmire_recipebook.xml"", ""quagmire_recipe_menu_bg.tex""))
	self.mainui.infobutton.info:SetPosition(-240, 50, 0)
	self.mainui.bg:ScaleToSize(1253, 783)
	self.mainui.infobutton.info:Hide()

	self.mainui.infobutton.desc = self.mainui.infobutton:AddChild(Text(NEWFONT, 36, STRINGS.ALLACHIVINFODESC[1] ))
	self.mainui.infobutton.desc:SetColour(0, 0, 0, 1)
	self.mainui.infobutton.desc:SetPosition(-210, 10, 0)
	self.mainui.infobutton.desc:SetHAlign(ANCHOR_LEFT)
	self.mainui.infobutton.desc:SetRegionSize(960,680)
	self.mainui.infobutton.desc:Hide()
	

	self.mainui.infobutton.question = self.mainui.infobutton:AddChild(ImageButton(""images/button/infobutton.xml"", ""infobutton.tex""))
	self.mainui.infobutton.question:SetPosition(40, -370, 0)
	self.mainui.infobutton.question:SetOnClick(function()
		if self.mainui.infobutton.info.shown then
			self.mainui.infobutton.info:Hide()
			self.mainui.infobutton.desc:Hide()
		else
			self.mainui.infobutton.info:Show()
			self.mainui.infobutton.desc:Show()
		end
	end)

	self.mainui.infobutton.last = self.mainui.infobutton:AddChild(ImageButton(""images/button/last_dact.xml"", ""last_dact.tex""))
	self.mainui.infobutton.last:SetPosition(98, -370, 0)
	self.mainui.infobutton.last:SetOnClick(function()
		if self.numpage > 1 and self.mainui.bg.allachiv.shown then
			self.numpage = self.numpage - 1
			self:build()
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		if self.numpage == 1 then
			self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		end
	end)

	self.mainui.infobutton.last2 = self.mainui.infobutton:AddChild(ImageButton(""images/button/last_dact.xml"", ""last_dact.tex""))
	self.mainui.infobutton.last2:SetPosition(98, -370, 0)
	self.mainui.infobutton.last2:SetOnClick(function()
		if self.numpage2 > 1 and self.mainui.bg.allcoin.shown then
			self.numpage2 = self.numpage2 - 1 
			self:coinbuild()
			self.mainui.infobutton.next2:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		if self.numpage2 == 1 then
			self.mainui.infobutton.last2:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		end
	end)
	self.mainui.infobutton.next2 = self.mainui.infobutton:AddChild(ImageButton(""images/button/next_act.xml"", ""next_act.tex""))
	self.mainui.infobutton.next2:SetPosition(161, -370, 0)
	self.mainui.infobutton.next2:SetOnClick(function()

		if self.numpage2 < self.maxnumpage2 and self.mainui.bg.allcoin.shown then
			self.numpage2 = self.numpage2 + 1
			self:coinbuild()
			self.mainui.infobutton.last2:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
		end
		if self.numpage2 == self.maxnumpage2 then
			self.mainui.infobutton.next2:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		end
	end)

	--Á¨¨3
	self.mainui.infobutton.last3 = self.mainui.infobutton:AddChild(ImageButton(""images/button/last_dact.xml"", ""last_dact.tex""))
	self.mainui.infobutton.last3:SetPosition(98, -370, 0)
	
	self.mainui.infobutton.next3 = self.mainui.infobutton:AddChild(ImageButton(""images/button/next_act.xml"", ""next_act.tex""))
	self.mainui.infobutton.next3:SetPosition(161, -370, 0)
	
	self.mainui.infobutton.next3:SetOnClick(function()

	end)
	
	self.mainui.infobutton.next = self.mainui.infobutton:AddChild(ImageButton(""images/button/next_act.xml"", ""next_act.tex""))
	self.mainui.infobutton.next:SetPosition(161, -370, 0)
	self.mainui.infobutton.next:SetOnClick(function()

		if self.numpage < self.maxnumpage and self.mainui.bg.allachiv.shown then
			self.numpage = self.numpage + 1
			self:build()
			self.mainui.infobutton.last:SetTextures(""images/button/last_act.xml"", ""last_act.tex"")
		end
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		end
	end)
	
	
	
	
	-- My changes, second page of HELP about Abilities  -----------------------------------------
	
	self.mainui.infobutton.info2 = self.mainui.infobutton:AddChild(Image(""images/quagmire_recipebook.xml"", ""quagmire_recipe_menu_bg.tex""))
	self.mainui.infobutton.info2:SetPosition(-240, 50, 0)
	self.mainui.bg:ScaleToSize(1253, 783)
	self.mainui.infobutton.info2:Hide()
	
	self.mainui.infobutton.desc2 = self.mainui.infobutton:AddChild(Text(NEWFONT, 36, STRINGS.ALLACHIVINFODESC[2] ))
	self.mainui.infobutton.desc2:SetColour(0, 0, 0, 1)
	self.mainui.infobutton.desc2:SetPosition(-210, 10, 0)
	self.mainui.infobutton.desc2:SetHAlign(ANCHOR_LEFT)
	self.mainui.infobutton.desc2:SetRegionSize(960,680)
	self.mainui.infobutton.desc2:Hide()
	

	self.mainui.infobutton.question2 = self.mainui.infobutton:AddChild(ImageButton(""images/button/infobutton.xml"", ""infobutton.tex""))
	self.mainui.infobutton.question2:SetPosition(0, -370, 0)	
	self.mainui.infobutton.question2:SetOnClick(function()
		if self.mainui.infobutton.info2.shown then
			self.mainui.infobutton.info2:Hide()
			self.mainui.infobutton.desc2:Hide()
		else
			self.mainui.infobutton.info2:Show()
			self.mainui.infobutton.desc2:Show()
		end
	end)
	
	-- End of my changes --------------------------------------------------------------
	
	
	
	self.mainui.infobutton.close = self.mainui.infobutton:AddChild(ImageButton(""images/button/close.xml"", ""close.tex""))
	self.mainui.infobutton.close:SetPosition(220, -370, 0)
	self.mainui.infobutton.close:SetOnClick(function()
		self.mainui.bg.allachiv:Hide()
		self.mainui.bg.allcoin:Hide()
		self.mainui.bg:Hide()
		self.mainui.infobutton:Hide()
		self.mainui.itemclassification:Hide()

		--self.mainbutton.configact:Hide()
		self.mainbutton.configbg:Hide()
		self.mainbutton.configbigger:Hide()
		self.mainbutton.configsmaller:Hide()
		self.mainbutton.configremove:Hide()
		self.mainbutton.removeinfo:Hide()
		self.mainbutton.removeyes:Hide()
		self.mainbutton.removeno:Hide()
	end)

	--È°πÁõÆÂàÜÁ±ª 
	self.mainui.itemclassification = self.mainui:AddChild(Widget(""itemclassification""))
	self.mainui.itemclassification:SetPosition(-210, -30, 0)
	self.mainui.itemclassification:Hide()

	self.mainui.itemclassification.head = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_head_dact.xml"", ""item_head_dact.tex""))
	self.mainui.itemclassification.head:SetPosition(-220, -370, 0)
	self.mainui.itemclassification.head:SetOnGainFocus(function() self.mainui.itemclassification.head.item:SetSize(34) end)
	self.mainui.itemclassification.head:SetOnLoseFocus(function() self.mainui.itemclassification.head.item:SetSize(30) end)
	self.mainui.itemclassification.head.item = self.mainui.itemclassification.head:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[1],{0,0,0,1}))
	self.mainui.itemclassification.head.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.head.item:SetRegionSize(60,30)

	self.mainui.itemclassification.head:SetOnClick(function()
		self.numpage = 1
		self.item = 1
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_dact.xml"", ""item_head_dact.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid2 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid2:SetPosition(-160, -370, 0)
	self.mainui.itemclassification.mid2:SetOnGainFocus(function() self.mainui.itemclassification.mid2.item:SetSize(34) end)
	self.mainui.itemclassification.mid2:SetOnLoseFocus(function() self.mainui.itemclassification.mid2.item:SetSize(30) end)
	self.mainui.itemclassification.mid2.item = self.mainui.itemclassification.mid2:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[2],{0,0,0,1}))
	self.mainui.itemclassification.mid2.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid2.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid2:SetOnClick(function()
		self.numpage = 1
		self.item = 2
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid3 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid3:SetPosition(-100, -370, 0)
	self.mainui.itemclassification.mid3:SetOnGainFocus(function() self.mainui.itemclassification.mid3.item:SetSize(34) end)
	self.mainui.itemclassification.mid3:SetOnLoseFocus(function() self.mainui.itemclassification.mid3.item:SetSize(30) end)
	self.mainui.itemclassification.mid3.item = self.mainui.itemclassification.mid3:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[3],{0,0,0,1}))
	self.mainui.itemclassification.mid3.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid3.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid3:SetOnClick(function()
		self.numpage = 1
		self.item = 3
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid4 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid4:SetPosition(-40, -370, 0)
	self.mainui.itemclassification.mid4:SetOnGainFocus(function() self.mainui.itemclassification.mid4.item:SetSize(34) end)
	self.mainui.itemclassification.mid4:SetOnLoseFocus(function() self.mainui.itemclassification.mid4.item:SetSize(30) end)
	self.mainui.itemclassification.mid4.item = self.mainui.itemclassification.mid4:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[4],{0,0,0,1}))
	self.mainui.itemclassification.mid4.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid4.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid4:SetOnClick(function()
		self.numpage = 1
		self.item = 4
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid5 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid5:SetPosition(20, -370, 0)
	self.mainui.itemclassification.mid5:SetOnGainFocus(function() self.mainui.itemclassification.mid5.item:SetSize(34) end)
	self.mainui.itemclassification.mid5:SetOnLoseFocus(function() self.mainui.itemclassification.mid5.item:SetSize(30) end)
	self.mainui.itemclassification.mid5.item = self.mainui.itemclassification.mid5:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[5],{0,0,0,1}))
	self.mainui.itemclassification.mid5.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid5.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid5:SetOnClick(function()
		self.numpage = 1
		self.item = 5
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
		
	end)

	self.mainui.itemclassification.mid6 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid6:SetPosition(80, -370, 0)
	self.mainui.itemclassification.mid6:SetOnGainFocus(function() self.mainui.itemclassification.mid6.item:SetSize(34) end)
	self.mainui.itemclassification.mid6:SetOnLoseFocus(function() self.mainui.itemclassification.mid6.item:SetSize(30) end)
	self.mainui.itemclassification.mid6.item = self.mainui.itemclassification.mid6:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[6],{0,0,0,1}))
	self.mainui.itemclassification.mid6.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid6.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid6:SetOnClick(function()
		self.numpage = 1
		self.item = 6
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid7 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid7:SetPosition(140, -370, 0)
	self.mainui.itemclassification.mid7:SetOnGainFocus(function() self.mainui.itemclassification.mid7.item:SetSize(34) end)
	self.mainui.itemclassification.mid7:SetOnLoseFocus(function() self.mainui.itemclassification.mid7.item:SetSize(30) end)
	self.mainui.itemclassification.mid7.item = self.mainui.itemclassification.mid7:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[7],{0,0,0,1}))
	self.mainui.itemclassification.mid7.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid7.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid7:SetOnClick(function()
		self.numpage = 1
		self.item = 7
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")

	end)

	self.mainui.itemclassification.mid8 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid8:SetPosition(200, -370, 0)
	self.mainui.itemclassification.mid8:SetOnGainFocus(function() self.mainui.itemclassification.mid8.item:SetSize(34) end)
	self.mainui.itemclassification.mid8:SetOnLoseFocus(function() self.mainui.itemclassification.mid8.item:SetSize(30) end)
	self.mainui.itemclassification.mid8.item = self.mainui.itemclassification.mid8:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[8],{0,0,0,1}))
	self.mainui.itemclassification.mid8.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid8.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid8:SetOnClick(function()
		self.numpage = 1
		self.item = 8
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
	end)

	self.mainui.itemclassification.mid9 = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_mide_act.xml"", ""item_mide_act.tex""))
	self.mainui.itemclassification.mid9:SetPosition(260, -370, 0)
	self.mainui.itemclassification.mid9:SetOnGainFocus(function() self.mainui.itemclassification.mid9.item:SetSize(34) end)
	self.mainui.itemclassification.mid9:SetOnLoseFocus(function() self.mainui.itemclassification.mid9.item:SetSize(30) end)
	self.mainui.itemclassification.mid9.item = self.mainui.itemclassification.mid9:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[10],{0,0,0,1}))
	self.mainui.itemclassification.mid9.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.mid9.item:SetRegionSize(60,30)
	self.mainui.itemclassification.mid9:SetOnClick(function()
		self.numpage = 1
		self.item = 10
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_dact.xml"", ""item_mide_dact.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_act.xml"", ""item_tail_act.tex"")
		
	end)

	self.mainui.itemclassification.tail = self.mainui.itemclassification:AddChild(ImageButton(""images/button/item_tail_act.xml"", ""item_tail_act.tex""))
	self.mainui.itemclassification.tail:SetPosition(320, -370, 0)
	self.mainui.itemclassification.tail:SetOnGainFocus(function() self.mainui.itemclassification.tail.item:SetSize(34) end)
	self.mainui.itemclassification.tail:SetOnLoseFocus(function() self.mainui.itemclassification.tail.item:SetSize(30) end)
	self.mainui.itemclassification.tail.item = self.mainui.itemclassification.tail:AddChild(Text(NEWFONT, 30, STRINGS.ALLACHIVITEM[9],{0,0,0,1}))
	self.mainui.itemclassification.tail.item:SetHAlign(ANCHOR_MIDDLE)
	self.mainui.itemclassification.tail.item:SetRegionSize(60,30)
	self.mainui.itemclassification.tail:SetOnClick(function()
		self.numpage = 1
		self.item = 9
		self:build()
		self.mainui.infobutton.last:SetTextures(""images/button/last_dact.xml"", ""last_dact.tex"")
		self.maxnumpage =  math.ceil(#self.listitem/14)
		if self.numpage == self.maxnumpage then
			self.mainui.infobutton.next:SetTextures(""images/button/next_dact.xml"", ""next_dact.tex"")
		else
			self.mainui.infobutton.next:SetTextures(""images/button/next_act.xml"", ""next_act.tex"")
		end
		self.mainui.itemclassification.head:SetTextures(""images/button/item_head_act.xml"", ""item_head_act.tex"")
		self.mainui.itemclassification.mid2:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid3:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid4:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid5:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid6:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid7:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid8:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.mid9:SetTextures(""images/button/item_mide_act.xml"", ""item_mide_act.tex"")
		self.mainui.itemclassification.tail:SetTextures(""images/button/item_tail_dact.xml"", ""item_tail_dact.tex"")
	end)
	self.inst:DoTaskInTime(.2, function()
		self.numpage = 1
		self.numpage2 = 1
		self:loadlist()
		self:loadcoinlist()
		self.maxnumpage = math.ceil(#self.achivlist/14)
		self.maxnumpage2 = math.ceil(#self.coinlist/28)
		self.achivlistbg = {}
		self.mainui.bg.allachiv.achivlisttile = {}
		self.mainui.bg.allachiv.achivlisttiledsp = {}
		self.mainui.bg.allachiv.achivlistnumber = {}

		self.mainui.bg.allachiv.achivlisttiledone = {}

		self.item = 1
		self.listitem = {}

		self.coinlistbutton = {}

		self:build()
		self:coinbuild()
		self:StartUpdating()
	end)
end)

function uiachievement:OnUpdate(dt)
	self.mainui.bg.coinamount:SetString(string.format(STRINGS.ACHIEVEMENT_POINT_AMOUNT,self.owner.currentcoinamount:value()))
	self.mainui.bg.killamount:SetString(string.format(STRINGS.ACHIEVEMENT_KILL_AMOUNT,self.owner.currentkillamount:value()))
	self:loadlist()
	self.listitem = {}
	for a = 1, #self.achivlist do
		if self.item == 1 then
			table.insert(self.listitem, self.achivlist[a])
		else
			if self.achivlist[a].item == self.item  then 
				table.insert(self.listitem, self.achivlist[a])
			end
		end
	end
	for i = 1+14*(self.numpage-1), math.min(#self.listitem, 14*(1+self.numpage-1)) do
		local check = ""dact""
		--local check = ""act""
		if self.listitem[i].check == 1 then 
			check = ""act"" 
		end
		self.mainui.bg.allachiv.achivlisttile[i].image:SetTexture(""images/hud/achivbg_""..check.."".xml"", ""achivbg_""..check.."".tex"")

		if self.listitem[i].check == 1 then
			self.mainui.bg.allachiv.achivlisttile[i].desc:SetColour(217/255, 170/255, 83/255, 1)
			self.mainui.bg.allachiv.achivlisttile[i].nums:SetColour(217/255, 170/255, 83/255, 1)
			self.mainui.bg.allachiv.achivlisttiledone[i]:Show()
		else
			self.mainui.bg.allachiv.achivlisttile[i].desc:SetColour(0, 0, 0, 1)
			self.mainui.bg.allachiv.achivlisttile[i].nums:SetColour(39/255, 39/255, 39/255, 1)
			self.mainui.bg.allachiv.achivlisttiledone[i]:Hide()
		end
    	
    	
    	local __name = ""–ù–∞–∑–≤–∞–Ω–∏–µ: ""
    	local __desc = ""–û–ø–∏—Å–∞–Ω–∏–µ: ""
    	
    	if not STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name] then
			print(""error:========"",self.listitem[i].name)
		else
			__name = STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name].name
			__desc = string.format(STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name].desc,achievement_config.idconfig[self.listitem[i].name].need_amount)
		end
		
    	if achievement_config.idconfig[self.listitem[i].name] ~= nil and self.listitem[i].name ~= ""all"" then
			self.mainui.bg.allachiv.achivlisttile[i]:SetHoverText(__name..""\n""..STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.listitem[i].current..""/""..achievement_config.idconfig[self.listitem[i].name].need_amount..""\n""..__desc)
			self.mainui.bg.allachiv.achivlisttiledone[i]:SetHoverText(STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.listitem[i].current..""/""..achievement_config.idconfig[self.listitem[i].name].need_amount)
		else
			self.mainui.bg.allachiv.achivlisttile[i]:SetHoverText(__name..""\n""..STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.listitem[i].check..""/1""..""\n""..__desc)
			self.mainui.bg.allachiv.achivlisttiledone[i]:SetHoverText(STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.listitem[i].check..""/1"")
		end
		
    	if self.listitem[i].name == ""all"" then
    		self.mainui.bg.allachiv.achivlisttile[i]:SetHoverText(STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.achivlist[#self.achivlist].current..""/""..(#self.achivlist-1))
    		self.mainui.bg.allachiv.achivlisttiledone[i]:SetHoverText(STRINGS.ACHIEVEMENT_ACHIEVEMENT_FINISHED..self.achivlist[#self.achivlist].current..""/""..(#self.achivlist-1))
    	end
	end
end

function uiachievement:build()
	self.mainui.bg.allachiv:KillAllChildren()
	self.listitem = {}
	for a = 1, #self.achivlist do
		if self.item == 1 then
			table.insert(self.listitem, self.achivlist[a])
		else
			if self.achivlist[a].item == self.item  then 
				table.insert(self.listitem, self.achivlist[a])
			end
		end
	end

	local x = -313
	local y = 360
	for i = 1+14*(self.numpage-1), math.min(#self.listitem, 14*(1+self.numpage-1)) do
		if math.ceil(i/2) ~= i/2 then x = -265 else x = 265 end
		if math.ceil(i/2) ~= i/2 then y = y-97.3 end

		local check = ""dact""
    	if self.listitem[i].check == 1 then check = ""act"" end

		self.mainui.bg.allachiv.achivlisttile[i] = self.mainui.bg.allachiv:AddChild(ImageButton(""images/hud/achivbg_""..check.."".xml"", ""achivbg_""..check.."".tex""))
		self.mainui.bg.allachiv.achivlisttile[i]:SetFocusScale(1,1,1)
		self.mainui.bg.allachiv.achivlisttile[i]:SetPosition(x, y, 0)
		local achievement_name = self.listitem[i].name
		local achievement_desc = self.listitem[i].name
		if not STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name] then
			print(""error:========"",self.listitem[i].name)
		else
			achievement_name = STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name].name
			achievement_desc = STRINGS.ACHIEVEMENT_LIST[self.listitem[i].name].desc
		end
		self.mainui.bg.allachiv.achivlisttile[i].name = self.mainui.bg.allachiv.achivlisttile[i]:AddChild(Text(NEWFONT_OUTLINE, 40, achievement_name))
		self.mainui.bg.allachiv.achivlisttile[i].name:SetPosition(15, 25, 0)
		self.mainui.bg.allachiv.achivlisttile[i].name:SetHAlign(ANCHOR_LEFT)
		self.mainui.bg.allachiv.achivlisttile[i].name:SetRegionSize(320,40)

		self.mainui.bg.allachiv.achivlisttile[i].desc = self.mainui.bg.allachiv.achivlisttile[i]:AddChild(Text(NEWFONT, 28, string.format(achievement_desc,achievement_config.idconfig[self.listitem[i].name].need_amount)))
		self.mainui.bg.allachiv.achivlisttile[i].desc:SetPosition(15, -23, 0)
		self.mainui.bg.allachiv.achivlisttile[i].desc:SetHAlign(ANCHOR_LEFT)
		self.mainui.bg.allachiv.achivlisttile[i].desc:SetRegionSize(320,40)
		 
    	self.mainui.bg.allachiv.achivlisttile[i].nums = self.mainui.bg.allachiv.achivlisttile[i]:AddChild(Text(NEWFONT, 28, ""x ""..achievement_config.idconfig[self.listitem[i].name].point))
		self.mainui.bg.allachiv.achivlisttile[i].nums:SetPosition(320, -23, 0)
		self.mainui.bg.allachiv.achivlisttile[i].nums:SetHAlign(ANCHOR_LEFT)
		self.mainui.bg.allachiv.achivlisttile[i].nums:SetRegionSize(320,40)

		self.mainui.bg.allachiv.achivlisttile[i].numb = self.mainui.bg.allachiv.achivlisttile[i]:AddChild(Text(NEWFONT, 28, ""No:""..i))
		self.mainui.bg.allachiv.achivlisttile[i].numb:SetPosition(320, 33, 0)
		self.mainui.bg.allachiv.achivlisttile[i].numb:SetHAlign(ANCHOR_LEFT)
		self.mainui.bg.allachiv.achivlisttile[i].numb:SetRegionSize(320,40)
		self.mainui.bg.allachiv.achivlisttile[i].numb:SetColour(0/255, 166/255, 51/255, 1) --(41/255, 174/255, 10/255, 1)
		self.mainui.bg.allachiv.achivlisttile[i]:SetOnClick(function()
			if TheInput:IsKeyDown(KEY_ALT) and TheInput:IsKeyDown(KEY_SHIFT) then
				if self.cooldown then
					if achievement_config.idconfig[self.listitem[i].name] ~= nil  and self.listitem[i].name ~= ""all"" then
						TheNet:Say(string.format(STRINGS.SINGLE_ACHIVEMENT_PROCESS,achievement_name,self.listitem[i].current,achievement_config.idconfig[self.listitem[i].name].need_amount))
					end
					if self.listitem[i].name == ""all"" then
						TheNet:Say(string.format(STRINGS.SINGLE_ACHIVEMENT_PROCESS,achievement_name,self.achivlist[#self.achivlist].current,(#self.achivlist-1)))
					end

					self.cooldown = false
					self.owner:DoTaskInTime(3, function() self.cooldown = true end)
				end
			else
				if killAmountFinishAchievement == true and achievement_config.idconfig[self.listitem[i].name] ~= nil and self.listitem[i].name ~= ""all"" and self.listitem[i].check ~= 1  then
					SendModRPCToServer(MOD_RPC[""DSTAchievement""][""finishachievement""],self.listitem[i].name)
				end
			end
		end)
		if self.listitem[i].name == ""all"" then
			self.mainui.bg.allachiv.achivlisttile[i].numb:Hide()
		end

		if self.listitem[i].check == 1 then
			self.mainui.bg.allachiv.achivlisttile[i].desc:SetColour(217/255, 170/255, 83/255, 1)  --(124/255, 64/255, 8/255, 1)
			self.mainui.bg.allachiv.achivlisttile[i].nums:SetColour(217/255, 170/255, 83/255, 1)  --(124/255, 64/255, 8/255, 1)
		else
			self.mainui.bg.allachiv.achivlisttile[i].desc:SetColour(0, 0, 0, 1)  --(39/255, 39/255, 39/255, 1)
			self.mainui.bg.allachiv.achivlisttile[i].nums:SetColour(39/255, 39/255, 39/255, 1)  --(39/255, 39/255, 39/255, 1) 
		end
    	
    	self.mainui.bg.allachiv.achivlisttiledone[i] = self.mainui.bg.allachiv:AddChild(Image(""images/hud/achivbg_done.xml"", ""achivbg_done.tex""))
		self.mainui.bg.allachiv.achivlisttiledone[i]:SetPosition(x, y, 0)
		self.mainui.bg.allachiv.achivlisttiledone[i]:SetTint(1,1,1,0.95)
	
    	if self.mainui.bg.allachiv.achivlisttiledone[i].check == 1 then
			self.mainui.bg.allachiv.achivlisttiledone[i]:Show()
		else
			self.mainui.bg.allachiv.achivlisttiledone[i]:Hide()
		end
	end
end

function uiachievement:coinbuild()
	self.mainui.bg.allcoin:KillAllChildren()
	local x = -313
	local y = 260
	for i = 1+28*(self.numpage2-1), math.min(#self.coinlist, 28*(1+self.numpage2-1)) do
		if math.ceil(i/4) ~= math.ceil((i-1)/4) then x = -360 else x = x + 360*2/3 end
		y = 260-96*(math.ceil((i-28*(self.numpage2-1))/4)-1)
		self.coinlistbutton[i] = self.mainui.bg.allcoin:AddChild(ImageButton(""images/coin_cn/coin_cn1.xml"", ""coin_cn1.tex""))
		if  self.coinlist[i].name == ""speedup"" or self.coinlist[i].name == ""absorbup"" or 
			self.coinlist[i].name == ""damageup"" or self.coinlist[i].name == ""crit""  then
			self.coinlistbutton[i]:SetTextures(""images/coin_cn/coin_cn0.xml"", ""coin_cn0.tex"")
		end
		self.coinlistbutton[i]:SetPosition(x, y, 0)
    	self.coinlistbutton[i]:SetOnClick(function()
			
			if TheInput:IsKeyDown(KEY_ALT) and TheInput:IsKeyDown(KEY_SHIFT) then
				if self.cooldown then
					if i>=1 and i <=3 then
						TheNet:Say( string.format(STRINGS.HAS_ABILITY_PROCESS,STRINGS.ACHIVABILITYNAME[self.coinlist[i].name],self.coinlist[i].current,5))
					elseif i==4 then
						TheNet:Say( string.format(STRINGS.HAS_ABILITY_PROCESS,STRINGS.ACHIVABILITYNAME[self.coinlist[i].name],self.coinlist[i].current,20))
					else
						if self.coinlist[i].current ~= nil and  self.coinlist[i].current >=  1 then
							TheNet:Say(string.format(STRINGS.HAS_ABILITY,STRINGS.ACHIVABILITYNAME[self.coinlist[i].name]))
						else
							TheNet:Say(string.format(STRINGS.NO_ABILITY,STRINGS.ACHIVABILITYNAME[self.coinlist[i].name]))
						end
					end
					self.cooldown = false
					self.owner:DoTaskInTime(3, function() self.cooldown = true end)
				end
				return 
			end
    		SendModRPCToServer(MOD_RPC[""DSTAchievement""][self.coinlist[i].name])
    		self.owner:DoTaskInTime(.3, function()
    			self:loadcoinlist()
    			if i>=1 and i <=3 then
    				self.coinlistbutton[i]:SetHoverText(string.format(STRINGS.ACHIEVEMENT_HAS_AWARD,self.coinlist[i].current,5))
    			elseif i==4 then
    				self.coinlistbutton[i]:SetHoverText(string.format(STRINGS.ACHIEVEMENT_HAS_AWARD,self.coinlist[i].current,20))
    			else
    				if  self.coinlist[i].current ~= nil and  self.coinlist[i].current >=  1 then
    					self.coinlistbutton[i]:SetHoverText(STRINGS.ACHIEVEMENT_HAS_ABILITY)
    					self.coinlistbutton[i].done:Show()
    				else
    					self.coinlistbutton[i]:SetHoverText(string.format(STRINGS.ACHIEVEMENT_ABILITY_NEED, id2ability[self.coinlist[i].name].cost))
    					self.coinlistbutton[i].done:Hide()
    				end
    			end
			end)
		end)

		self.coinlistbutton[i].name = self.coinlistbutton[i]:AddChild(Text(NEWFONT, 40, STRINGS.ACHIVABILITYNAME[self.coinlist[i].name]))
		self.coinlistbutton[i].name:SetPosition(8, 10, 0)
		self.coinlistbutton[i].name:SetHAlign(ANCHOR_LEFT)
		self.coinlistbutton[i].name:SetRegionSize(200,60)
		self.coinlistbutton[i].name:SetColour(1,1,1,1)

		self.coinlistbutton[i].desc = self.coinlistbutton[i]:AddChild(Text(NEWFONT, 26, STRINGS.ACHIVABILITYDSPC[self.coinlist[i].name]))
		self.coinlistbutton[i].desc:SetPosition(8, -20, 0)
		self.coinlistbutton[i].desc:SetHAlign(ANCHOR_LEFT)
		self.coinlistbutton[i].desc:SetRegionSize(200,60)
		self.coinlistbutton[i].desc:SetColour(255/255,255/255,0/255,1)

		self.coinlistbutton[i].nums = self.coinlistbutton[i]:AddChild(Text(NEWFONT, 35,(""-""..id2ability[self.coinlist[i].name].cost)))
		self.coinlistbutton[i].nums:SetPosition(50, 8, 0)
		self.coinlistbutton[i].nums:SetHAlign(ANCHOR_RIGHT)
		self.coinlistbutton[i].nums:SetRegionSize(80,30)
		self.coinlistbutton[i].nums:SetColour(253/255, 253/255, 35/255, 1)--(237/255, 235/255, 16/255, 1)

		self.coinlistbutton[i].imge = self.coinlistbutton[i]:AddChild(Image(""images/coin_cn/coin_cn_start.xml"", ""coin_cn_start.tex""))
		self.coinlistbutton[i].imge:SetPosition(5, -5, 0)
    	self.coinlistbutton[i].imge:SetTint(1,1,1,0.95)

		self.coinlistbutton[i].chge = self.coinlistbutton[i]:AddChild(Image(""images/coin_cn/coin_cn_change.xml"", ""coin_cn_change.tex""))
		self.coinlistbutton[i].chge:SetPosition(0, 0, 0)
    	self.coinlistbutton[i].chge:SetTint(1,1,1,0.95)

    	if self.coinlist[i].canswitch then
			self.coinlistbutton[i].chge:Show()
		else
			self.coinlistbutton[i].chge:Hide()
		end

		self.coinlistbutton[i].done = self.coinlistbutton[i]:AddChild(Image(""images/coin_cn/coin_cn3.xml"", ""coin_cn3.tex""))
		self.coinlistbutton[i].done:SetPosition(0, 0, 0)
    	self.coinlistbutton[i].done:SetTint(1,1,1,0.95)

    	--line
    	self.coinlistbutton[i].line = self.coinlistbutton[i]:AddChild(Image(""images/coin_cn/coin_cn_line.xml"", ""coin_cn_line.tex""))
		self.coinlistbutton[i].line:SetPosition(0, 0, 0)
    	self.coinlistbutton[i].line:SetTint(1,1,1,0.95)
    	self.coinlistbutton[i].line:Hide()

    	if self.coinlist[i].name == ""speedup"" or self.coinlist[i].name == ""absorbup"" or 
			self.coinlist[i].name == ""damageup"" or self.coinlist[i].name == ""crit""  then
			self.coinlistbutton[i].done:Hide()
		else
			if  self.coinlist[i].current ~= nil and  self.coinlist[i].current >=  1 then
    			self.coinlistbutton[i].done:Show()
    		else
    			self.coinlistbutton[i].done:Hide()
    		end
		end

		self.coinlistbutton[i]:SetNormalScale(1,1,1)
		self.coinlistbutton[i]:SetFocusScale(1,1,1)

		self.coinlistbutton[i]:SetOnGainFocus(function() 
			self.coinlistbutton[i]:SetNormalScale(1,1,1)
			self.coinlistbutton[i].line:Show()

		end)
		self.coinlistbutton[i]:SetOnLoseFocus(function() 
			self.coinlistbutton[i]:SetFocusScale(1,1,1)
			self.coinlistbutton[i].line:Hide()
		end)
		if i>=1 and i <=3 then
    		self.coinlistbutton[i]:SetHoverText(string.format(STRINGS.ACHIEVEMENT_HAS_AWARD,self.coinlist[i].current,5))
    	elseif i==4 then
    		self.coinlistbutton[i]:SetHoverText(string.format(STRINGS.ACHIEVEMENT_HAS_AWARD,self.coinlist[i].current,20))
    	else
    		if  self.coinlist[i].current ~= nil and  self.coinlist[i].current ==  1 then
    			self.coinlistbutton[i]:SetHoverText(STRINGS.ACHIEVEMENT_HAS_ABILITY)
    		else
    			self.coinlistbutton[i]:SetHoverText(string.format(STRINGS.ACHIEVEMENT_ABILITY_NEED, id2ability[self.coinlist[i].name].cost))
    		end
    	end
	end
end

function uiachievement:loadlist()
	self.achivlist = {}
	for _,v in ipairs(achievement_config.config) do
		if v.catagory then
			table.insert(self.achivlist,#self.achivlist + 1,
			{
				name = v.id,
				check = self.owner[v.check]:value(),
				current = self.owner[v.current]:value(),
				item = v.catagory,
			})
		end
	end
	local achivvalue = 0
	for i=1, #self.achivlist do
		if self.achivlist[i].name ~= ""all"" then
			achivvalue = achivvalue + self.achivlist[i].check
		else
			self.achivlist[i].current = achivvalue
		end
	end
end

function uiachievement:loadcoinlist()
	self.coinlist = {}
	for _,v in ipairs(achievement_ability_config.ability_cost) do
		self.coinlist[#self.coinlist + 1] = 
		{
			name = v.ability,
			current = self.owner[""current"" .. v.ability]:value(),
			canswitch = v.canswitch,
		}
	end
end

return uiachievement
"
Ehhs2aAT,modinfo,Lonely_Wanderer,Lua,Monday 12th of February 2024 11:04:57 AM CDT,"ChooseTranslationTable = ChooseTranslationTable or function() end
name =""New Achivement""
description = ""Achievement (Reburn) Êõ¥Êñ∞ 2023.6.23""
author = ""ACLegend""
version = ""2.2.11""

forumthread = """"

api_version = 10

dst_compatible = true
dont_starve_compatible = false
reign_of_giants_compatible = false
all_clients_require_mod = true

icon_atlas = ""modicon.xml""
icon = ""modicon.tex""

server_filter_tags = {}


local MODINFO_NAME = {
    CAN_LEARN = {
        ""Can Learn Ability"",
        [""zh""] = ""ÊòØÂê¶ËÉΩÂ≠¶‰π†ËÉΩÂäõ"",
        [""en""] = ""Can Learn Ability"",
    },
    START_AWARD = {
        ""Give gifts at the start"",
        [""zh""] = ""ÂºÄÂ±ÄÊòØÂê¶ÈÄÅÁâ©ÂìÅ"",
        [""en""] = ""Give gifts at the start"",
    },
    BOSS_STRENGTHEN = {
        ""Boss strengthen"",
        [""zh""] = ""BOSSÂä†Âº∫"",
        [""en""] = ""Boss strengthen"",
    },
    RETRUN_POINT = {
        ""Rebate points for reset ability"",
        [""zh""] = ""ÈáçÁΩÆÊó∂ËøîÂõûÊàêÂ∞±ÁôæÂàÜÊØî"",
        [""en""] = ""return points percent"",
    },
    SHOW_TITLE = {
        ""Show title"",
        [""zh""] = ""ÊòæÁ§∫Áß∞Âè∑"",
        [""en""] = ""Show title"",
    },
    LANGUAGE = {
        ""Language"",
        [""zh""] = ""ËØ≠Ë®Ä"",
        [""en""] = ""Language"",
    },
    DIFFICULTY = {
        ""Difficulty"",
        [""zh""] = ""ÊàêÂ∞±ÂÆåÊàêÈöæÂ∫¶"",
        [""en""] = ""Difficulty"",
    },
    ABILITYIFFICULTY = {
        ""Ability Difficulty"",
        [""zh""] = ""ËÉΩÂäõÂ≠¶‰π†Ê∂àËÄóÁÇπÊï∞"",
        [""en""] = ""Ability Cost"",
    },
    MAX_DAMAGE = {
        ""Max Damage up"",
        [""zh""] = ""ÊèêÂçáÊîªÂáªÊúÄÂ§ßÂ≠¶‰π†Ê¨°Êï∞"",
        [""en""] = ""Max Damage up"",
    },
    MAX_SPEED = {
        ""Max Speed up"",
        [""zh""] = ""ÊèêÂçáÈÄüÂ∫¶ÊúÄÂ§ßÂ≠¶‰π†Ê¨°Êï∞"",
        [""en""] = ""Max Speed up"",
    },
    MAX_ABSORB = {
        ""Max Absorb up"",
        [""zh""] = ""ÊèêÂçáÈò≤Âæ°ÊúÄÂ§ßÂ≠¶‰π†Ê¨°Êï∞"",
        [""en""] = ""Max Absorb up"",
    },
    MAX_CRIT = {
        ""Max Crit up"",
        [""zh""] = ""ÊèêÂçáÊö¥ÂáªÊúÄÂ§ßÂ≠¶‰π†Ê¨°Êï∞"",
        [""en""] = ""Max Crit up"",
    },
    KILLAMOUNT_CAN_FINISH_ACHIEVEMENT = {
        ""kill amount can finish achievement"",
        [""zh""] = ""Ê∂àËÄóÊùÄÊàÆÂÄºÂèØ‰ª•ÂÆåÊàêÊàêÂ∞±"",
        [""en""] = ""Max Crit up"",
    },
    COST_KILL_AMOUNT = {
        ""kill amount can finish achievement"",
        [""zh""] = ""ÂÆåÊàê‰∏Ä‰∏™ÊàêÂ∞±Ê∂àËÄóÊùÄÊàÆÂÄºÊï∞Èáè"",
        [""en""] = ""finsh achievement cost kill amount"",
    },
    CAN_HIDE_HUD = 
    {
        ""hide the main panel by pressing the button N"",
        [""zh""] = ""ÊòØÂê¶ÂèØÊåâNÊòæÈöê‰∏ªÈù¢Êùø"",
        [""en""] = ""press N to show and hide the main panel"",
    },
}
configuration_options =
{
    {
        name = ""checkcoin"",
        label =  ChooseTranslationTable(MODINFO_NAME.CAN_LEARN),
        hover = ""Can learn ability"",
        options =   {
     
                        {description = ""YES"", data = false},
                        {description = ""NO"", data = true},

                    },
        default = false,
    },
    {
        name = ""checkstart"",
        label = ChooseTranslationTable(MODINFO_NAME.START_AWARD),
        hover = ""give gifts at the start"",
        options =   {
                        {description = ""YES"", data = true},
                        {description = ""NO"", data = false},
                    },
        default = true,
    },
    {
        name = ""bossstrengthen"",
        label = ChooseTranslationTable(MODINFO_NAME.BOSS_STRENGTHEN),
        hover = ""Boss strengthen"",
        options =   {
     
                        {description = ""YES"", data = true},
                        {description = ""NO"", data = false},

                    },
        default = false,
    },
    {
        name = ""returnpoint"",
        label = ChooseTranslationTable(MODINFO_NAME.RETRUN_POINT),
        hover = ""Rebate points for reset ability"",
        options =   {
     
                        {description = ""100%"", data = 1.0},
                        {description = ""95%"", data = 0.95},
                        {description = ""90%"", data = 0.9},
                        {description = ""85%"", data = 0.85},
                        {description = ""80%"", data = 0.8},
                        {description = ""75%"", data = 0.75},
                        {description = ""70%"", data = 0.70},
                        {description = ""65%"", data = 0.65},
                        {description = ""60%"", data = 0.60},
                        {description = ""50%"", data = 0.50},
                    },
        default = 0.85,
    },
    {
        name = ""showtitle"",
        label = ChooseTranslationTable(MODINFO_NAME.SHOW_TITLE),
        hover = ""show title"",
        options =   {
                        {description = ""SHOW"", data = true},
                        {description = ""HIDE"", data = false},
                    },
        default = true,
    },
    {
        name = ""language"",
        label = ChooseTranslationTable(MODINFO_NAME.LANGUAGE),
        hover = ""language"",
        options =   {
                        {description = ""ÁÆÄ‰Ωì‰∏≠Êñá"", data = ""zh""},
                        {description = ""English"", data = ""en""},
                    },
        default = ""zh"",
    },
    {
        name = ""coindifficulty"",
        label = ChooseTranslationTable(MODINFO_NAME.DIFFICULTY),
        hover = ""Difficulty"",
        options =   {
                        {description = ""EAZY"",hover = ""0.5 times"", data = 0.5},
                        {description = ""NORMAL"",hover = ""1 times"",data = 1},
                        {description = ""HARD"",hover = ""1.5 times"", data = 1.5},
                        {description = ""NIGHTMARE"",hover = ""2 times"", data = 2},
                    },
        default = 1,
    },
    {
        name = ""abilityifficulty"",
        label = ChooseTranslationTable(MODINFO_NAME.ABILITYIFFICULTY),
        hover = ""Ability learning consumption points multiplier"",
        options =   {
                        {description = ""ULTRA CHEAP"",hover = ""0.25 times"", data = 0.25},
                        {description = ""CHEAP"",hover = ""0.5 times"", data = 0.5},
                        {description = ""NORMAL"",hover = ""1 times"", data = 1},
                        {description = ""EXPENSIVE"",hover = ""1.5 times"", data = 1.5},
                        {description = ""VERY EXPENSIVE"",hover = ""2 times"", data = 2},
                    },
        default = 1,
    },
    {
        name = ""max_damageup"",
        label = ChooseTranslationTable(MODINFO_NAME.MAX_DAMAGE),
        hover = ""Maximum number of learning damageup"",
        options =   {
                        {description = ""5"",hover = ""5"", data = 5},
                        {description = ""10"",hover = ""10"", data = 10},
                        {description = ""15"",hover = ""15"", data = 15},
                        {description = ""20"",hover = ""20"", data = 20},
                        {description = ""25"",hover = ""25"", data = 25},
                        {description = ""30"",hover = ""30"", data = 30},
                        {description = ""35"",hover = ""35"", data = 35},
                        {description = ""40"",hover = ""40"", data = 40},
                    },
        default = 5,
    },
    {
        name = ""max_speedup"",
        label = ChooseTranslationTable(MODINFO_NAME.MAX_SPEED),
        hover = ""Maximum number of learning speedup"",
        options =   {
                        {description = ""5"",hover = ""5"", data = 5},
                        {description = ""10"",hover = ""10"", data = 10},
                        {description = ""15"",hover = ""15"", data = 15},
                        {description = ""20"",hover = ""20"", data = 20},
                        {description = ""25"",hover = ""25"", data = 25},
                        {description = ""30"",hover = ""30"", data = 30},
                        {description = ""35"",hover = ""35"", data = 35},
                        {description = ""40"",hover = ""40"", data = 40},
                    },
        default = 5,
    },
    {
        name = ""max_absorbup"",
        label = ChooseTranslationTable(MODINFO_NAME.MAX_ABSORB),
        hover = ""Maximum number of learning defenseup"",
        options =   {
                        {description = ""5"",hover = ""5"", data = 5},
                        {description = ""10"",hover = ""10"", data = 10},
                        {description = ""15"",hover = ""15"", data = 15},
                        {description = ""20"",hover = ""20"", data = 20},
                        {description = ""25"",hover = ""25"", data = 25},
                        {description = ""30"",hover = ""30"", data = 30},
                        {description = ""35"",hover = ""35"", data = 35},
                        {description = ""40"",hover = ""40"", data = 40},
                    },
        default = 5,
    },
    {
        name = ""max_crit"",
        label = ChooseTranslationTable(MODINFO_NAME.MAX_CRIT),
        hover = ""Maximum number of learning crit"",
        options =   {
                        {description = ""5"",hover = ""5"", data = 5},
                        {description = ""10"",hover = ""10"", data = 10},
                        {description = ""15"",hover = ""15"", data = 15},
                        {description = ""20"",hover = ""20"", data = 20},
                    },
        default = 20,
    },
    {
        name = ""killamount_can_finish_achievement"",
        label = ChooseTranslationTable(MODINFO_NAME.KILLAMOUNT_CAN_FINISH_ACHIEVEMENT),
        hover = ""killamount can finish achievement"",
        options =   {
     
            {description = ""YES"", data = true},
            {description = ""NO"", data = false},

        },
        default = true,
    },
    {
        name = ""cost_kill_amount"",
        label = ChooseTranslationTable(MODINFO_NAME.COST_KILL_AMOUNT),
        hover = ""finsh achievement cost"",
        options =   {
            {description = ""500"",hover = ""500"", data = 500},
            {description = ""800"",hover = ""800"", data = 800},
            {description = ""1000"",hover = ""1000"", data = 1000},
            {description = ""1500"",hover = ""1500"", data = 1500},
            {description = ""2000"",hover = ""2000"", data = 2000},
            {description = ""2500"",hover = ""2500"", data = 2500},
            {description = ""5000"",hover = ""5000"", data = 5000},
        },
        default = 1000,
    },
    {
        name = ""can_hide_hud"",
        label = ChooseTranslationTable(MODINFO_NAME.CAN_HIDE_HUD),
        hover = ""Is it possible to hide the main panel by pressing the button N"",
        options =   {
            {description = ""YES"", data = true},
            {description = ""NO"", data = false},
        },
        default = true,
    },
}
"
dmbAsFUQ,Untitled,sissou123,JavaScript,Monday 12th of February 2024 10:45:12 AM CDT,"ES6 Javascript: The Complete Developer's Guide
ES6 Javascript Development from scratch. Get practice with live examples and learn exactly where to apply ES6 features 
What you'll learn
Learn how to apply each feature of ES6 in practical situations
Understand the major features of ES6
Have total mastery of generators 
for more:https://www.clictune.com/jw5s
"
3mb25HBg,Untitled,sissou123,JavaScript,Monday 12th of February 2024 10:38:28 AM CDT,"JavaScript - The Complete Guide 2024 (Beginner + Advanced)
Modern JavaScript from the beginning - all the way up to JS expert level! THE must-have JavaScript resource in 2024. 
What you'll learn
Learn JavaScript from scratch and in great detail - from beginner to advanced
All core features and concepts you need to know in modern JavaScript development 
for more:https://www.clictune.com/jw5m
"
ybAznh0z,Untitled,sissou123,JavaScript,Monday 12th of February 2024 10:29:48 AM CDT,"Accelerated ES6 JavaScript Training
Learn and Use the Future of JavaScript - Today! 
What you'll learn
Understand and Use the new Features and Concepts introduced with ES6
Get an Overview over the Language Additions and Changes
Confidently apply the new Syntax, new APIs and other new Features in Web Applications 
for more:https://www.clictune.com/jw5b
"
hB4D9Cgh,Untitled,Nenogzar,Python,Monday 12th of February 2024 10:11:28 AM CDT,"# # –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ ""k"" –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
# def find_position(maze):
#     position = []
#     for row in range(len(maze)):
#         for el in maze[row]:
#             if el == 'k':
#                 position.append(row)
#                 position.append(maze[row].find('k'))
#                 return position
#
# # –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ (' ') –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
# def next_free_spot(maze):
#     free_spots = []
#
#     for row in range(len(maze)):
#         for el in range(len(maze[row])):
#             tmp = []
#             if maze[row][el] == ' ':
#                 tmp.append(row)
#                 tmp.append(el)
#                 free_spots.append(tmp)
#
#     return free_spots
#
# # –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø—ä—Ç—è –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
# def find_path(position, next_free, maze):
#     moves = 0
#
#     while next_free:
#         x1, x2 = next_free.pop(0)
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–ª—è–≤–æ
#         if position[0] == x1 and position[1] - x2 == 1:
#             position = [x1, x2]
#             moves += 1
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–¥—è—Å–Ω–æ
#         elif position[0] == x1 and x2 - position[1] == 1:
#             position = [x1, x2]
#             moves += 1
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–¥–æ–ª—É
#         elif x1 - position[0] == 1 and position[1] == x2:
#             position = [x1, x2]
#             moves += 1
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–≥–æ—Ä–µ
#         elif position[0] - x1 == 1 and position[1] == x2:
#             position = [x1, x2]
#             moves += 1
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∏–∑–ª–∏–∑–∞–Ω–µ –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
#     if position[0] == 0 or position[0] == (len(maze) - 1) or position[1] == 0 or position[1] == (len(maze) - 1):
#         return f'Kate got out in {moves + 1} moves'
#     # –°—ä–æ–±—â–µ–Ω–∏–µ, —á–µ Kate –Ω–µ –º–æ–∂–µ –¥–∞ –∏–∑–ª–µ–∑–µ –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
#     return 'Kate cannot get out'
#
# # –í—Ö–æ–¥ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è - –±—Ä–æ–π —Ä–µ–¥–æ–≤–µ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
# m_rows = int(input())
# maze = []
# moves = 0
# free_space = True
#
# # –í—Ö–æ–¥ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è - —Ä–µ–¥–æ–≤–µ –Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
# for row in range(m_rows):
#     maze.append(input())
#
# # –ò–∑–≤–∏–∫–≤–∞–Ω–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –∏ –∏–∑–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
# position = find_position(maze)
# next_free = next_free_spot(maze)
# movement = find_path(position, next_free, maze)
# print(movement)


"""""" 2 """"""

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ ""k"" –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def find_position(maze):
    position = []
    for row in range(len(maze)):
        for el in maze[row]:
            if el == 'k':
                position.append(row)
                position.append(maze[row].find('k'))
                return position

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ (' ') –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def next_free_spot(maze):
    free_spots = []

    for row in range(len(maze)):
        for el in range(len(maze[row])):
            tmp = []
            if maze[row][el] == ' ':
                tmp.append(row)
                tmp.append(el)
                free_spots.append(tmp)

    return free_spots

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø—ä—Ç—è –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏ –±—Ä–æ–π –≤—ä–∑–º–æ–∂–Ω–∏ –∏–∑—Ö–æ–¥–∏
def find_path(position, next_free, maze):
    total_moves = 0  # –û–±—â –±—Ä–æ–π –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è—Ç–∞
    total_exits = 0  # –û–±—â –±—Ä–æ–π –Ω–∞ –≤—ä–∑–º–æ–∂–Ω–∏—Ç–µ –∏–∑—Ö–æ–¥–∏
    longest_paths = []  # –°–ø–∏—Å—ä–∫ —Å –Ω–∞–π-–¥—ä–ª–≥–∏—Ç–µ –ø—ä—Ç–∏—â–∞

    while next_free:
        x, y = next_free.pop(0)
        moves = 0  # –ë—Ä–æ–π –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–ª—è–≤–æ
        if position[0] == x and position[1] - y == 1:
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–¥—è—Å–Ω–æ
        elif position[0] == x and y - position[1] == 1:
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–¥–æ–ª—É
        elif x - position[0] == 1 and position[1] == y:
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–≥–æ—Ä–µ
        elif position[0] - x == 1 and position[1] == y:
            moves += 1

        # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –±—Ä–æ—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
        total_moves += moves

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Ç–µ–∫—É—â–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –µ –∏–∑—Ö–æ–¥ –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        if position[0] == 0 or position[0] == (len(maze) - 1) or position[1] == 0 or position[1] == (len(maze[0]) - 1):
            total_exits += 1

            # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∏—è –ø—ä—Ç
            current_path = [(position[0], position[1])] + [(x, y) for x, y in next_free]
            longest_paths.append(current_path)

    if total_exits > 0:
        # –ò–∑–±–æ—Ä –Ω–∞ –Ω–∞–π-–¥—ä–ª–≥–∏—è –ø—ä—Ç
        longest_path = max(longest_paths, key=len)
        return f'""Kate got out in {total_moves +1} moves""'
    else:
        return 'Kate cannot get out'


# –í—Ö–æ–¥ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è - –±—Ä–æ–π —Ä–µ–¥–æ–≤–µ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
m_rows = int(input())
maze = []
moves = 0
free_space = True

# –í—Ö–æ–¥ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è - —Ä–µ–¥–æ–≤–µ –Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
for row in range(m_rows):
    maze.append(input())

# –ò–∑–≤–∏–∫–≤–∞–Ω–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –∏ –∏–∑–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
position = find_position(maze)
next_free = next_free_spot(maze)
movement = find_path(position, next_free, maze)
print(movement)
"
CzaeL4NA,Some roblox Vault Function to cure my depression,imtie,Lua,Monday 12th of February 2024 10:06:40 AM CDT,"---some local script function on pastebin because my PC is unavailable. It might not work, I haven't tested (wonder why)

----Services
Local TweenService = game:GetService(""TweenService"")
Local InputService = game:GetService(""UserInputService"")
----Debounces
Local VaultDB = false
----Instances
Local Player = game.Players.LocalPlayer
Local Char = Player.Character
Local Root,Head,Hum = Char.HumanoidRootPart,Char.Head,Char.Humanoid
----Tween
Local VaultTweenInf = TweenInfo.new(0.5, Enum.EasingStyle.Linear,Enum.EasingDirection.In)
Local VaultTween = TweenService:Create(Root,VaultTweenInf, {CFrame = Root.CFrame * CFrame.New(0,3,1) })
---- Function
Local function Vault()
    if VaultDB == false then
       VaultDB = true
        
        --- raycasting RAHHHHHHHH!!!
        local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {Char}
    local raycastOrigin = Root.CFrame.Position
    local raycastDirection = Root.CFrame.LookVector
    local raycastLength = 1
    
    local result = workspace:Raycast(raycastOrigin, raycastDirection * raycastLength, raycastParams)
        if result then
            -- Not a character or ToolHandle, no riding allowed!!!
            if result.Instance.Parent:FindFirstChild(""Humanoid"") == nil and result.Instance.Name ~=  ""Handle"" then
                local Part = result.Instance
               if Head.Position.Y > Part.Position.Y then
                Root.Anchored = true    
                VaultTween:Play()
                task.Wait(0.5)   
                Root.Anchored = false    
                    end
                    
             end
            
         end
        VaultDB = false
       end
    
    end

InputService.InputBegan:Connect(function(input, GameProcessed)
    if not GameProcessed then
       if input.Keycode == Enum.Keycode.Space then
	if Hum.FloorMaterial == Enum.Material.Air and Hum.Health > 0 then
                    Vault()
             end
                
       end
    end
end)
"
KUtma7FB,Sensore presenza a casa,energywave,YAML,Monday 12th of February 2024 09:56:10 AM CDT,"  # Presenza in casa di Henrik. Viene data priorit√† a qualunque sensore indichi una presenza in casa con tempo minimo di fuori casa di 5 minuti per evitare false uscite
  - binary_sensor:
      - name: ""Henrik a casa?""
        # state: ""{{ is_state('person.henrik_sozzi', 'home')}}""
        state: ""{{ is_state('device_tracker.hsphone', 'home') or is_state('device_tracker.tel_henrik', 'home') or is_state('device_tracker.tel_henrik_wifi', 'home') }}""
        delay_off:
          minutes: 5
        picture: ""/local/henrik{% if not(is_state('binary_sensor.henrik_at_home', 'on')) %}_off{% endif %}.jpg""
        device_class: presence
        unique_id: ""henrik_at_home""
        attributes:
          name: Henrik
"
nQ31xf3s,02. Santa's Gifts(77/100),Spocoman,Python,Monday 12th of February 2024 09:47:24 AM CDT,"n = int(input())

houses = input().split()

index = 0

for i in range(n):
    current_command = input().split()
    command = current_command[0]
    current_index = index

    if command in ('Forward', 'Back'):
        steps = int(current_command[1])
        current_index += steps if command == 'Forward' else -steps
        if 0 <= current_index < len(houses):
            houses.pop(current_index)
            index = current_index
    elif command == 'Gift':
        current_index = int(current_command[1])
        if 0 <= current_index < len(houses):
            houses.insert(current_index, current_command[2])
            index = current_index
    elif command == 'Swap':
        index1 = houses.index(current_command[1])
        index2 = houses.index(current_command[2])
        if 0 <= index1 < len(houses) and 0 <= index2 < len(houses) and index1 != index2:
            houses[index1], houses[index2] = houses[index2], houses[index1]

print(f'Position: {index}\n{"", "".join(houses)}')
"
dUfb2QVc,41-45,Adit_Firdaus,C,Monday 12th of February 2024 09:38:33 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100

typedef struct
{
    char id[4];
    char name[50];
    int assignment;
    int midExam;
    int finalExam;
} Student;

Student students[MAX_STUDENTS];

int studentCount = 0;

char *getGrade(float score)
{
    if (score >= 85)
    {
        return ""A"";
    }
    else if (score >= 80)
    {
        return ""A-"";
    }
    else if (score >= 75)
    {
        return ""B+"";
    }
    else if (score >= 70)
    {
        return ""B"";
    }
    else if (score >= 65)
    {
        return ""B-"";
    }
    else if (score >= 60)
    {
        return ""C+"";
    }
    else if (score >= 55)
    {
        return ""C"";
    }
    else if (score >= 45)
    {
        return ""D"";
    }
    else
    {
        return ""E"";
    }
}

float getFinalScore(int assignment, int midExam, int finalExam)
{
    return (0.3 * assignment) + (0.3 * midExam) + (0.4 * finalExam);
}

void addStudent()
{
    printf(""> Add student\n"");

    if (studentCount >= MAX_STUDENTS)
    {
        printf(""Maximum students reached\n"");
        return;
    }

    printf(""ID: "");
    scanf(""%s"", students[studentCount].id);
    printf(""Name: "");
    scanf("" %[^\n]s"", students[studentCount].name);
    printf(""Assignment: "");
    scanf(""%d"", &students[studentCount].assignment);
    printf(""Mid Exam: "");
    scanf(""%d"", &students[studentCount].midExam);
    printf(""Final Exam: "");
    scanf(""%d"", &students[studentCount].finalExam);

    studentCount++;
}

void displayStudentDetails()
{
    printf(""> Student details\n"");

    printf(""|%-5s|%-20s|%-10s|%-10s|%-10s|%-15s|%-10s|\n"", ""ID"", ""Name"", ""Assignment"", ""Mid Exam"", ""Final Exam"", ""Final Score"", ""Final Grade"");

    for (int i = 0; i < studentCount; i++)
    {
        float finalScore = getFinalScore(students[i].assignment, students[i].midExam, students[i].finalExam);
        char *finalGrade = getGrade(finalScore);

        printf(""|%-5s|%-20s|%-10d|%-10d|%-10d|%-15.2f|%-10s|\n"", students[i].id, students[i].name, students[i].assignment, students[i].midExam, students[i].finalExam, finalScore, finalGrade);
    }
}

void displayGradeAverage()
{
    printf(""> Grade average \n"");

    float assignmentTotal = 0;
    float midExamTotal = 0;
    float finalExamTotal = 0;

    for (int i = 0; i < studentCount; i++)
    {
        assignmentTotal += students[i].assignment;
        midExamTotal += students[i].midExam;
        finalExamTotal += students[i].finalExam;
    }

    float assignmentAverage = assignmentTotal / studentCount;
    float midExamAverage = midExamTotal / studentCount;
    float finalExamAverage = finalExamTotal / studentCount;
    float finalScoreAverage = (0.3 * assignmentAverage) + (0.3 * midExamAverage) + (0.4 * finalExamAverage);

    printf(""Assignment : %.2f\n"", assignmentAverage);
    printf(""Mid Exam : %.2f\n"", midExamAverage);
    printf(""Final Exam : %.2f\n"", finalExamAverage);
    printf(""Final Score: %.2f\n"", finalScoreAverage);
}

int main()
{
    int choice;

    while (1)
    {
        printf(""> Menu\n"");
        printf(""1. Add student\n"");
        printf(""2. Display student details\n"");
        printf(""3. Display grade average\n"");
        printf(""\n"");
        printf(""0. Exit\n"");
        printf(""\n"");
        printf(""Menu: "");
        scanf(""%d"", &choice);

        switch (choice)
        {
            case 1:
                addStudent();
                break;
            case 2:
                displayStudentDetails();
                break;
            case 3:
                displayGradeAverage();
                break;
            case 0:
                exit(0);
            default:
                printf(""Invalid choice\n"");
        }
    }

    return 0;
}"
eyndbpCb,trepezidal,anik11556,C++,Monday 12th of February 2024 09:36:15 AM CDT,"#include <bits/stdc++.h>
using namespace std;

// Function to integrate
double f(double x) {
    return x * x * x; // Example function x^2
}

// Trapezoidal rule function
double trapezoidal(double a, double b, int n) {
    double h = (b - a) / n; // Width of each trapezoid
    double sum = 0.5 * (f(a) + f(b)); // Sum of the first and last terms
    
    for (int i = 1; i < n; ++i) {
        double x = a + i * h; // Current x value
        sum = sum + f(x); // Add f(x_i)
    }
    
    return sum * h;
}

int main() {
    double a, b; // Integration limits
    int n; // Number of subdivisions
    
    // Input values
    cout << ""Enter lower limit of integration: "";
    cin >> a;
    cout << ""Enter upper limit of integration: "";
    cin >> b;
    cout << ""Enter the number of subdivisions: "";
    cin >> n;
    
    // Calculate integral using trapezoidal rule
    double integral = trapezoidal(a, b, n);
    
    // Output result
    cout << ""Approximate integral: "" << integral << endl;
    
    return 0;
}
"
wQ6jETqq,3.	Kate's Way Out,Nenogzar,Python,Monday 12th of February 2024 09:07:35 AM CDT,"# –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ ""k"" –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def find_position(maze):
    position = []
    for row in range(len(maze)):
        for el in maze[row]:
            if el == 'k':
                position.append(row)
                position.append(maze[row].find('k'))
                return position

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ (' ') –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def next_free_spot(maze):
    free_spots = []

    for row in range(len(maze)):
        for el in range(len(maze[row])):
            tmp = []
            if maze[row][el] == ' ':
                tmp.append(row)
                tmp.append(el)
                free_spots.append(tmp)

    return free_spots

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø—ä—Ç—è –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def find_path(position, next_free, maze):
    moves = 0

    while next_free:
        x1, x2 = next_free.pop(0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–ª—è–≤–æ
        if position[0] == x1 and position[1] - x2 == 1:
            position = [x1, x2]
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–¥—è—Å–Ω–æ
        elif position[0] == x1 and x2 - position[1] == 1:
            position = [x1, x2]
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–¥–æ–ª—É
        elif x1 - position[0] == 1 and position[1] == x2:
            position = [x1, x2]
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–≥–æ—Ä–µ
        elif position[0] - x1 == 1 and position[1] == x2:
            position = [x1, x2]
            moves += 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∏–∑–ª–∏–∑–∞–Ω–µ –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    if position[0] == 0 or position[0] == (len(maze) - 1) or position[1] == 0 or position[1] == (len(maze) - 1):
        return f'Kate got out in {moves + 1} moves'
    # –°—ä–æ–±—â–µ–Ω–∏–µ, —á–µ Kate –Ω–µ –º–æ–∂–µ –¥–∞ –∏–∑–ª–µ–∑–µ –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    return 'Kate cannot get out'

# –í—Ö–æ–¥ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è - –±—Ä–æ–π —Ä–µ–¥–æ–≤–µ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
m_rows = int(input())
maze = []
moves = 0
free_space = True

# –í—Ö–æ–¥ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è - —Ä–µ–¥–æ–≤–µ –Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
for row in range(m_rows):
    maze.append(input())

# –ò–∑–≤–∏–∫–≤–∞–Ω–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –∏ –∏–∑–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
position = find_position(maze)
next_free = next_free_spot(maze)
movement = find_path(position, next_free, maze)
print(movement)
"
JhrXvudi,49. Petricor {post de rol},elirosecodes,HTML,Monday 12th of February 2024 08:50:28 AM CDT,"<link href=""https://dl.dropboxusercontent.com/scl/fi/1uyywptpyamagbbty8nk3/ppetricor.css?rlkey=pkx547ro952zz6mcyp6v8pj7u&dl=0"" rel=""stylesheet""><link rel=""stylesheet"" href=""//icons.cappuccicons.com/cpf.css""><div class=""petricor""><div class=""ptrc-01""><div class=""ptrc-bg""></div></div><div class=""ptrc-1op""><i class=""cp cp-cloud-o""></i></div><div class=""ptrc-02""><div class=""ptrc-2tl""><div class=""ptrc-2tl1"">TITULO</div><div class=""ptrc-2tl2""><a href=""/""><i class=""cp cp-drop-o""></i></a></div></div><div class=""ptrc-2ds"">FRASE/SUBTITULO</div></div><div class=""ptrc-03""><div class=""ptrc-3tx"">
TU POST AQUI.
</div></div><div class=""ptrc-04""><div class=""ptrc-bgg""></div></div><div class=""ptrc-4bt""><p>TEXTO CORTO</p></div></div><a href=""https://elirosecodes.tumblr.com/""><div class=""gnomo"">elirose</div></a><style>:root{--ptr-bk:#fff; --ptr-tx:#000; --ptr-sb:#8C8C8C; --ptr-cl:#31644F; --ptr-img:url(https://i.imgur.com/hNFDC92.gif); --ptr-bg:url(https://i.imgur.com/ZHg2MK0.gif);}</style>"
WGmr6224,D√≠as entre fechas. Simple Python,JPablos,Python,Monday 12th of February 2024 08:34:49 AM CDT,"""""""
Los d√≠as transcurridos entre fechas
""""""
import time
from datetime import datetime, timedelta

timedelta(seconds=60)

start = time.time()

FH1 = '01-01-2024 00:00:00'  # Inicio de este a√±o
FH2 = '31-07-2024 00:00:00'  # Fecha aleatoria (¬øCu√°ntos d√≠as hasta esta fecha?)
fecha1 = datetime.strptime(FH1, '%d-%m-%Y %H:%M:%S')
fecha2 = datetime.strptime(FH2, '%d-%m-%Y %H:%M:%S')

res=(fecha2-fecha1)
print(res.days, ""d√≠as"")  # Solo los d√≠as transcurridos
print(res)               # Los d√≠as m√°s H:M:S

ahora = datetime.now()
print(""Hoy es:"", ahora)

res1=(ahora-fecha1)      # Los d√≠as que han transcurrido del a√±o actual
print(res1)              # Los d√≠as que han transcurrido del a√±o actual m√°s H:M:S
print(f""Han pasado {res1} desde {fecha1} hasta hoy"")

end = time.time()

print(f""El proceso dur√≥ {end - start} segundos"")
"
WBt68HX2,Charge icons,petar_bonov,HTML,Monday 12th of February 2024 08:23:00 AM CDT,"desktop:

<div data-spec=""battype-hl"">
    <i class=""head-icon icon-wired-charging""></i>45W
    <i class=""head-icon icon-wireless-charging""></i>25W
</div>

mobile:

<span data-spec=""battype-hl"">
    <i class=""head-icon icon-wired-charging""></i>45W
    <i class=""head-icon icon-wireless-charging""></i>25W
</span>"
xGY4Cvv9,Guessing game,sriyanto,Java,Monday 12th of February 2024 08:07:41 AM CDT,"import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GuessingGame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        int numberToGuess = random.nextInt(100) + 1; // Random number between 1 and 100
        int attempts = 0;
        boolean hasGuessedCorrectly = false;

        System.out.println(""Welcome to the Guessing Game!"");
        System.out.println(""I've picked a number between 1 and 100. Can you guess it?"");

        while (!hasGuessedCorrectly) {
            System.out.print(""Enter your guess: "");
            try {
                int guess = scanner.nextInt();
                attempts++;

                if (guess < 1 || guess > 100) {
                    throw new IllegalArgumentException(""Please enter a number between 1 and 100."");
                }

                if (guess == numberToGuess) {
                    hasGuessedCorrectly = true;
                    System.out.println(""Congratulations! You've guessed the number "" + numberToGuess + "" correctly."");
                    System.out.println(""It took you "" + attempts + "" attempts."");
                } else if (guess < numberToGuess) {
                    System.out.println(""Too low! Try again."");
                } else {
                    System.out.println(""Too high! Try again."");
                }
            } catch (InputMismatchException e) {
                System.out.println(""Invalid input. Please enter a valid number."");
                scanner.nextLine(); // Clear the input buffer
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
                scanner.nextLine(); // Clear the input buffer
            }
        }

        scanner.close();
    }
}
"
CjTUWgeb,Untitled,kofany,Python,Monday 12th of February 2024 08:06:25 AM CDT,"# -*- coding: utf-8 -*-
import weechat as w
import json

SCRIPT_NAME = ""translate""
SCRIPT_AUTHOR = ""Jerzy Dabrowski (kofany) <j@dabrowski.biz>""
SCRIPT_VERSION = ""1.0""
SCRIPT_LICENSE = ""GPL""
SCRIPT_DESC = ""Translates messages for specified channels and servers using Google Translate API.""

TRANSLATE_API_URL = ""https://translation.googleapis.com/language/translate/v2""
DETECT_API_URL = ""https://translation.googleapis.com/language/translate/v2/detect""

settings = {
    ""api_key"": """",
    ""translate_channels_in"": ""{}"",
    ""translate_channels_out"": ""{}"",
    ""no_translate_lang"": ""pl"",  # Default language not to translate
}

translated_texts = {}

def debug_print(buffer, message):
    w.prnt(buffer, ""DEBUG: "" + message)

def get_full_channel_name(channel, server):
    full_channel_name = ""{}@{}"".format(channel, server)
    debug_print("""", f""[Translate Debug] Full channel name generated: {full_channel_name} from Channel: {channel}, Server: {server}"")
    return full_channel_name

def api_request_cb(data, url, request, response):
    debug_print("""", f""[Translate Debug api_request_cb BEG] Current translated_texts content: {translated_texts}"")
    # Debugowanie danych wej≈õciowych
    debug_print("""", ""[Translate Debug] API request callback triggered."")
    debug_print("""", f""[Translate Debug] Input data: {data}"")
    debug_print("""", f""[Translate Debug] URL: {url}"")
    debug_print("""", f""[Translate Debug] Request: {request}"")
    debug_print("""", f""[Translate Debug] Response: {response}"")

    callback_data = json.loads(data)
    buffer = callback_data['buffer']
    action = callback_data['action']
    message_id = callback_data.get('message_id', '')
    text_to_translate = callback_data.get('text', '')  # Pobieramy tekst bezpo≈õrednio z danych callback

    debug_print("""", f""[Translate Debug] Action: {action}"")
    debug_print("""", f""[Translate Debug] Callback data: {callback_data}"")

    try:
        response_data = json.loads(response['output'])
        debug_print("""", ""[Translate Debug] Successfully parsed response data."")
    except Exception as e:
        debug_print(buffer, f""[Translate Debug] Error parsing response data: {e}"")
        return w.WEECHAT_RC_ERROR

    if action == 'detect_and_translate':
        if 'data' in response_data and 'detections' in response_data['data']:
            detected_lang = response_data['data']['detections'][0][0]['language']
            debug_print(buffer, f""[Translate Debug] Detected language: {detected_lang}"")
            target_lang = callback_data['target_lang']
            if detected_lang != target_lang:
                debug_print(buffer, ""[Translate Debug] Detected language differs from target. Initiating translation."")
                if text_to_translate:
                    # Wywo≈Çujemy funkcjƒô translate z tekstem bezpo≈õrednio
                    translate(buffer, detected_lang, target_lang, callback_data['api_key'], 'translate', message_id, text_to_translate)
                else:
                    debug_print(buffer, f""[Translate Debug] No text found for message ID: {message_id}. Skipping translation."")
            else:
                debug_print(buffer, ""[Translate Debug] Detected language is the same as target. No translation needed."")
        else:
            debug_print(buffer, ""Error in response: No detections found"")
    elif action == 'translate':
        if 'data' in response_data and 'translations' in response_data['data']:
            translated_text = response_data['data']['translations'][0]['translatedText']
            translated_texts[message_id] = translated_text  # Aktualizujemy s≈Çownik, je≈õli potrzebujemy zachowaƒá przet≈Çumaczony tekst
            debug_print(buffer, f""[Translate Debug] Translation completed: {translated_text}"")
        else:
            debug_print(buffer, ""Error in response: No translations found"")
    debug_print("""", f""[Translate Debug api_request_cb END] Current translated_texts content: {translated_texts}"")
    return w.WEECHAT_RC_OK

def translate(buffer, source_lang, target_lang, api_key, callback_action, message_id, text_to_translate):
    debug_print("""", f""[Translate Debug translate BEG] Current translated_texts content: {translated_texts}"")
    debug_print("""", ""[Translate Debug] Initiating translation process."")
    if text_to_translate:
        debug_print("""", f""[Translate Debug] Text to translate (ID: {message_id}): {text_to_translate}"")
    else:
        debug_print("""", f""[Translate Debug] No text found for message ID: {message_id}. Skipping translation."")
        return

    debug_print("""", f""[Translate Debug] Source language: {source_lang}, Target language: {target_lang}"")
    debug_print("""", f""[Translate Debug] API Key: {'Present' if api_key else 'Not Present'}"")

    post_data = json.dumps({'q': text_to_translate, 'source': source_lang, 'target': target_lang, 'format': 'text'})
    headers = ""Content-Type: application/json\nx-goog-api-key: "" + api_key
    options = {""postfields"": post_data, ""httpheader"": headers}
    callback_data = json.dumps({
        'buffer': buffer,
        'action': callback_action,
        'api_key': api_key,
        'target_lang': target_lang,
        'message_id': message_id
    })

    debug_print("""", ""[Translate Debug] Prepared request data for translation."")
    debug_print("""", f""[Translate Debug] Post data: {post_data}"")
    debug_print("""", f""[Translate Debug] Headers: {headers}"")
    debug_print("""", f""[Translate Debug] Callback data: {callback_data}"")

    w.hook_url(TRANSLATE_API_URL, options, 20000, ""api_request_cb"", callback_data)
    debug_print("""", ""[Translate Debug] Hook URL called for translation."")
    debug_print("""", f""[Translate Debug translate END] Current translated_texts content: {translated_texts}"")

def detect_language_and_translate(buffer, message_id, text, server, channel, target_lang, api_key):
    debug_print("""", f""[Translate Debug detect_language_and_translate BEG] Current translated_texts content: {translated_texts}"")
    debug_print("""", ""[Translate Debug] Starting language detection and translation process."")
    debug_print("""", f""[Translate Debug] Text to detect and translate: {text}"")
    debug_print("""", f""[Translate Debug] Target language: {target_lang}"")
    debug_print("""", f""[Translate Debug] API Key: {'Present' if api_key else 'Not Present'}"")
    # Zapisz tekst przed wywo≈Çaniem detekcji
    translated_texts[message_id] = text
    post_data = json.dumps({'q': text})
    headers = ""Content-Type: application/json\nx-goog-api-key: "" + api_key
    options = {""postfields"": post_data, ""httpheader"": headers}
    callback_data = json.dumps({
        'buffer': buffer,
        'message_id': message_id,
        'text': text,
        'server': server,
        'channel': channel,
        'target_lang': target_lang,
        'action': 'detect_and_translate',
        'api_key': api_key
    })
    debug_print("""", ""[Translate Debug] Prepared request data for language detection and translation."")
    debug_print("""", f""[Translate Debug] Post data: {post_data}"")
    debug_print("""", f""[Translate Debug] Headers: {headers}"")
    debug_print("""", f""[Translate Debug] Callback data: {callback_data}"")

    w.hook_url(DETECT_API_URL, options, 20000, ""api_request_cb"", callback_data)
    debug_print("""", ""[Translate Debug] Hook URL called for language detection and translation."")
    debug_print("""", f""[Translate Debug detect_language_and_translate END] Current translated_texts content: {translated_texts}"")

def translate_incoming_message_cb(data, modifier, modifier_data, string):
    debug_print("""", f""[Translate Debug translate_incoming_message_cb BEG] Current translated_texts content: {translated_texts}"")
    api_key = w.config_get_plugin(""api_key"")
    if not api_key:
        debug_print("""", ""[Translate Debug] API key is not set."")
        return string

    parsed_data = w.info_get_hashtable(""irc_message_parse"", {""message"": string})
    channel = parsed_data[""channel""]
    message = parsed_data[""text""]
    server = modifier_data
    message_id = str(hash(message))  # Unique ID for the message

    debug_print("""", f""[Translate Debug] Received message: {message}"")
    debug_print("""", f""[Translate Debug] Channel: {channel}, Server: {server}"")
    debug_print("""", f""[Translate Debug] Message ID: {message_id}"")

    full_channel_name = get_full_channel_name(channel, server)
    translate_channels_in = json.loads(w.config_get_plugin(""translate_channels_in""))

    debug_print("""", f""[Translate Debug] Full channel name: {full_channel_name}"")
    debug_print("""", f""[Translate Debug] Translate channels in: {translate_channels_in}"")

    if full_channel_name in translate_channels_in:
        target_lang = translate_channels_in[full_channel_name]
        debug_print("""", f""[Translate Debug] Target language for translation: {target_lang}"")
        translated_texts[message_id] = message  # Store original message for translation
        detect_language_and_translate("""", message_id, message, server, channel, target_lang, api_key)
    else:
        debug_print("""", ""[Translate Debug] Channel not in translate_channels_in list."")

    # Check if translated text is available and replace original message
    if message_id in translated_texts:
        translated_message = translated_texts.pop(message_id)
        debug_print("""", f""[Translate Debug] Translated message: {translated_message}"")
        return string.replace(message, translated_message)
    else:
        debug_print("""", ""[Translate Debug] Translated message not available yet."")
    debug_print("""", f""[Translate Debug translate_incoming_message_cb BEG] Current translated_texts content: {translated_texts}"")
    return string

def translate_command_cb(data, buffer, args):
    argv = args.split("" "")
    command = argv[0] if len(argv) > 0 else """"

    if command == ""list"":
        translate_channels_in = json.loads(w.config_get_plugin(""translate_channels_in""))
        translate_channels_out = json.loads(w.config_get_plugin(""translate_channels_out""))
        w.prnt(buffer, ""Channels for incoming translation:"")
        for channel, lang in translate_channels_in.items():
            w.prnt(buffer, ""  {} -> {}"".format(channel, lang))
        w.prnt(buffer, ""Channels for outgoing translation:"")
        for channel, lang in translate_channels_out.items():
            w.prnt(buffer, ""  {} -> {}"".format(channel, lang))
    elif command in [""addin"", ""addout""]:
        if len(argv) != 4:
            w.prnt(buffer, ""Usage: /translate addin|addout <server> <channel> <target_lang>"")
            return w.WEECHAT_RC_ERROR
        server_channel = get_full_channel_name(argv[2], argv[1])
        target_lang = argv[3]
        translate_channels = json.loads(w.config_get_plugin(""translate_channels_in"" if command == ""addin"" else ""translate_channels_out""))
        translate_channels[server_channel] = target_lang
        w.config_set_plugin(""translate_channels_in"" if command == ""addin"" else ""translate_channels_out"", json.dumps(translate_channels))
        w.prnt(buffer, ""{} added for {} translation to {}."".format(server_channel, ""incoming"" if command == ""addin"" else ""outgoing"", target_lang))
    elif command in [""delin"", ""delout""]:
        if len(argv) != 3:
            w.prnt(buffer, ""Usage: /translate delin|delout <server> <channel>"")
            return w.WEECHAT_RC_ERROR
        server_channel = get_full_channel_name(argv[2], argv[1])
        translate_channels = json.loads(w.config_get_plugin(""translate_channels_in"" if command == ""delin"" else ""translate_channels_out""))
        if server_channel in translate_channels:
            del translate_channels[server_channel]
            w.config_set_plugin(""translate_channels_in"" if command == ""delin"" else ""translate_channels_out"", json.dumps(translate_channels))
            w.prnt(buffer, ""{} removed from {} translation."".format(server_channel, ""incoming"" if command == ""delin"" else ""outgoing""))
        else:
            w.prnt(buffer, ""{} not found in {} translation settings."".format(server_channel, ""incoming"" if command == ""delin"" else ""outgoing""))

    elif command == ""code"":
        magenta = w.color(""magenta"")
        reset = w.color(""reset"")
        codes = [
            (""Azerbaijani"", ""az""), (""Hausa"", ""ha""), (""Malay"", ""ms""), (""Spanish"", ""es""),
            (""Bambara"", ""bm""), (""Hawaiian"", ""haw""), (""Malayalam"", ""ml""), (""Sundanese"", ""su""),
            (""Basque"", ""eu""), (""Hebrew"", ""he""), (""Maltese"", ""mt""), (""Swahili"", ""sw""),
            (""Belarusian"", ""be""), (""Hindi"", ""hi""), (""Maori"", ""mi""), (""Swedish"", ""sv""),
            (""Bengali"", ""bn""), (""Hmong"", ""hmn""), (""Marathi"", ""mr""), (""Tagalog"", ""tl""),
            (""Bhojpuri"", ""bho""), (""Hungarian"", ""hu""), (""Meiteilon"", ""mni""), (""Tajik"", ""tg""),
            (""Bosnian"", ""bs""), (""Icelandic"", ""is""), (""Mizo (lus)"", ""lus""), (""Tamil"", ""ta""),
            (""Bulgarian"", ""bg""), (""Igbo"", ""ig""), (""Mongolian"", ""mn""), (""Tatar"", ""tt""),
            (""Catalan"", ""ca""), (""Ilocano (ilo)"", ""ilo""), (""Myanmar (my)"", ""my""), (""Telugu"", ""te""),
            (""Cebuano"", ""ceb""), (""Indonesian"", ""id""), (""Nepali"", ""ne""), (""Thai"", ""th""),
            (""Chinese (Simpl)"", ""zh-CN""), (""Irish"", ""ga""), (""Norwegian"", ""no""), (""Tigrinya"", ""ti""),
            (""Chinese (Trad)"", ""zh-TW""), (""Italian"", ""it""), (""Nyanja (ny)"", ""ny""), (""Tsonga"", ""ts""),
            (""Corsican"", ""co""), (""Japanese"", ""ja""), (""Odia (or)"", ""or""), (""Turkish"", ""tr""),
            (""Croatian"", ""hr""), (""Javanese"", ""jv""), (""Oromo (om)"", ""om""), (""Turkmen"", ""tk""),
            (""Czech"", ""cs""), (""Kannada"", ""kn""), (""Pashto"", ""ps""), (""Twi (ak)"", ""ak""),
            (""Danish"", ""da""), (""Kazakh"", ""kk""), (""Persian"", ""fa""), (""Ukrainian"", ""uk""),
            (""Dhivehi"", ""dv""), (""Khmer"", ""km""), (""Polish"", ""pl""), (""Urdu"", ""ur""),
            (""Dogri (doi)"", ""doi""), (""Kinyarwanda"", ""rw""), (""Portuguese"", ""pt""), (""Uyghur"", ""ug""),
            (""Dutch"", ""nl""), (""Konkani (gom)"", ""gom""), (""Punjabi"", ""pa""), (""Uzbek"", ""uz""),
            (""English"", ""en""), (""Korean"", ""ko""), (""Quechua"", ""qu""), (""Vietnamese"", ""vi""),
            (""Esperanto"", ""eo""), (""Krio (kri)"", ""kri""), (""Romanian"", ""ro""), (""Welsh"", ""cy""),
            (""Estonian"", ""et""), (""Kurdish"", ""ku""), (""Russian"", ""ru""), (""Xhosa"", ""xh""),
            (""Ewe"", ""ee""), (""Kurdish (ckb)"", ""ckb""), (""Samoan"", ""sm""), (""Yiddish"", ""yi""),
            (""Filipino"", ""fil""), (""Kyrgyz"", ""ky""), (""Sanskrit"", ""sa""), (""Yoruba"", ""yo""),
            (""Finnish"", ""fi""), (""Lao"", ""lo""), (""Scots (gd)"", ""gd""), (""Zulu"", ""zu""),
            (""French"", ""fr""), (""Latin"", ""la""), (""Sepedi (nso)"", ""nso""),
            (""Frisian"", ""fy""), (""Latvian"", ""lv""), (""Serbian"", ""sr""),
        ]
        w.prnt("""", ""Available language codes:"")
        column_width = 20
        for i in range(0, len(codes), 4):
            line = """".join(f""{name.ljust(column_width - len(code))}{magenta}{code}{reset}    "" for name, code in codes[i:i+4])
            w.prnt(buffer, line)

    elif command == ""help"":
        w.prnt(buffer, ""/translate command usage:"")
        w.prnt(buffer, ""/translate list - Show all channels with translation settings"")
        w.prnt(buffer, ""/translate addin <server> <channel> <target_lang> - Add a channel to translate incoming messages"")
        w.prnt(buffer, ""/translate addout <server> <channel> <target_lang> - Add a channel to translate outgoing messages"")
        w.prnt(buffer, ""/translate delin <server> <channel> - Remove a channel from translating incoming messages"")
        w.prnt(buffer, ""/translate delout <server> <channel> - Remove a channel from translating outgoing messages"")
        w.prnt(buffer, ""/translate code - Show available language codes for translation"")
        w.prnt(buffer, ""/translate help - Show this help message"")

    else:
        w.prnt(buffer, ""Unknown command. Use /translate help for usage information."")

    return w.WEECHAT_RC_OK

if w.register(SCRIPT_NAME, SCRIPT_AUTHOR, SCRIPT_VERSION, SCRIPT_LICENSE, SCRIPT_DESC, """", """"):
    for option, default_value in settings.items():
        if not w.config_is_set_plugin(option):
            w.config_set_plugin(option, default_value)
    w.hook_modifier(""irc_in_privmsg"", ""translate_incoming_message_cb"", """")
    w.hook_command(""translate"", ""Manage translation settings"",
                   ""list | addin <server> <channel> <target_lang> | addout <server> <channel> <target_lang> | delin <server> <channel> | delout <server> <channel> | code | help"",
                   ""list: show all channels with translation settings\n""
                   ""addin: add a channel to translate incoming messages\n""
                   ""addout: add a channel to translate outgoing messages\n""
                   ""delin: remove a channel from translating incoming messages\n""
                   ""delout: remove a channel from translating outgoing messages\n""
                   ""code: show available language codes for translation\n""
                   ""help: show help information for the /translate command\n"",
                   ""list || addin %(irc_servers) %(irc_channels) || addout %(irc_servers) %(irc_channels) || delin %(irc_servers) %(irc_channels) || delout %(irc_servers) %(irc_channels) || code || help"",
                   ""translate_command_cb"", """")"
ZUEzv0Yz,methods,SenpaiZero,Java,Monday 12th of February 2024 07:41:24 AM CDT,"package labExer1B_;

public class plusClass {
	public void showNumberPlus10(int num)
	{
		System.out.println(num + "" plus 10 is "" + (num+10));
	}
	
	public void showNumberPlus100(int num)
	{
		System.out.println(num + "" plus 100 is "" + (num+100));
	}
	
	public void showNumberPlus1000(int num)
	{
		System.out.println(num + "" plus 1000 is "" + (num+1000));
	}
}
"
z8NpNZV2,main,SenpaiZero,Java,Monday 12th of February 2024 07:40:59 AM CDT,"package labExer1B_;

import java.util.Scanner;

public class runMain {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		
		System.out.print(""Enter an integer: "");
		int userInput = scanner.nextInt();
		plusClass plus = new plusClass();
		
		plus.showNumberPlus10(userInput);
		plus.showNumberPlus100(userInput);
		plus.showNumberPlus1000(userInput);
	}
}
"
UNEJY5r2,GraphFacetRender.cpp,ANevsky,C++,Monday 12th of February 2024 07:19:58 AM CDT,"			_coo_gl_arpointer* tri = triangles_pointer;
			_coo_gl_arpointer* norm = normals_pointer;
			float* vert = new float[tri_count * 3 * 6];


			for (unsigned i = 0; i < tri_count; ++i)
			{
				unsigned ipos = i * 9;
				std::copy(norm + ipos, norm + ipos + 3, vert + ipos * 2);
				std::copy(tri + ipos, tri + ipos + 3, vert + ipos * 2 + 3);

				std::copy(norm + ipos + 3, norm + ipos + 6, vert + ipos * 2 + 6);
				std::copy(tri + ipos + 3, tri + ipos + 6, vert + ipos * 2 + 9);

				std::copy(norm + ipos + 6, norm + ipos + 9, vert + ipos * 2 + 12);
				std::copy(tri + ipos + 6, tri + ipos + 9, vert + ipos * 2 + 15);
			}


			int facesCount, stride, * sharpInd;
			std::vector<float> points;
			StlRend srend;
			srend.create(tri_count, vert);
			srend.getMesh(90, facesCount, stride, points, sharpInd);
			glEnableClientState(GL_VERTEX_ARRAY);
			glEnableClientState(GL_NORMAL_ARRAY);
			glDisableClientState(GL_COLOR_ARRAY);
			glVertexPointer(3, GL_FLOAT, stride * sizeof(points[0]), points.data() + 3);
			glNormalPointer(GL_FLOAT, stride * sizeof(points[0]), points.data());

			glDrawArrays(GL_TRIANGLES, 0, facesCount * 3);"
BJ6nCwgG,Replacement script,3DCreator,Lua,Monday 12th of February 2024 07:05:38 AM CDT,"local chatservice = game:GetService(""Chat"")
local replicatedstorage = game:GetService(""ReplicatedStorage"")
local callevent = replicatedstorage:WaitForChild(""CallEvent"")
local twitterevent = replicatedstorage:WaitForChild(""TwitterEvent"")
local callfunctions = {}

callevent.OnServerEvent:Connect(function(player, target, type_)
	if type_ == ""Start"" then
		local player_ = game.Players:FindFirstChild(target)
		if not player_ then return end
		 callevent:FireClient(player_, player.Name, ""Incoming"")
	elseif type_ == ""Decline"" then
		local player_ = game.Players:FindFirstChild(target)
		callevent:FireClient(player_, player.Name, ""Decline"")
	elseif type_ == ""Accept"" then
		local player_ = game.Players:FindFirstChild(target)
		if callfunctions[player] then callfunctions[player]:Disconnect() end
		if callfunctions[player_] then callfunctions[player_]:Disconnect() end
		callfunctions[player] = player.Chatted:Connect(function(message)
			local phone = player_.Character:FindFirstChild(""iphonex"")
			if phone then
				chatservice:Chat(phone.Handle, message, Enum.ChatColor.Red)
			end
		end)
		
		callfunctions[player_] = player_.Chatted:Connect(function(message)
			local phone = player.Character:FindFirstChild(""iphonex"")
			if phone then
				chatservice:Chat(phone.Handle, message, Enum.ChatColor.Red)
			end
		end)
		callevent:FireClient(player_, player.Name, ""Accept"")
	elseif type_ == ""End"" then
		local player_ = game.Players:FindFirstChild(target)
		if callfunctions[player] then
			callfunctions[player]:Disconnect()
		end
		if callfunctions[player_] then
			callfunctions[player_]:Disconnect()
		end
		callevent:FireClient(player_, player.Name, ""End"")
	end
end)

twitterevent.OnServerEvent:Connect(function(player, message)
	twitterevent:FireAllClients(player.Name.."": ""..message)
end)"
PFWW246K,selection_sort,naren_paste,Python,Monday 12th of February 2024 07:02:29 AM CDT,"def selection_sort(arr):
    for i in range(1, len(arr)):
        v = arr[i]
        j = i
        while j >= 1 and arr[j-1] > v:
            arr[j] = arr[j-1]
            j -= 1
        arr[j] = v

# Example usage:
arr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]
selection_sort(arr)
print(arr)
"
vAHSrVF8,Untitled,Ilya_Bykonya,C++,Monday 12th of February 2024 06:58:44 AM CDT,"#include <iostream>
#include <random>
#include <chrono>

int main() {
    constexpr auto array_size = 10'000;
    int** array = new int*[array_size];
    for(int i = 0; i < array_size; ++i)
        array[i] = new int[array_size];

    const auto start = std::chrono::system_clock::now();
    for(int i = 0; i < array_size; ++i) {
        for(int j = 0; j < array_size; ++j) {
            array[j][i] = rand();
        }
    }
    const auto finish = std::chrono::system_clock::now();

    std::cout << std::chrono::duration_cast<std::chrono::milliseconds>(finish - start).count() << std::endl;
}
"
wetAz4Vm,Untitled,MrBlueTuxedoman,C++,Monday 12th of February 2024 06:53:18 AM CDT,"#include <iostream>
#include <queue>
#include <map>
#include <vector>
#include <algorithm>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#define int long long
#define $AzH_TxdmN$ ios_base::sync_with_stdio(0);cin.tie(nullptr);cout.tie(nullptr);

#define all(v) v.begin(),v.end()
#define ep(a,b) emplace_back(make_pair(a,b))
#define pii pair<int,int>
#define heap pii,vector<pii>,greater<pii>
using namespace std;
using namespace __gnu_pbds;

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>__indexed_set;
const int N = 1e6+9;
const int MOD = 1e9+7;
const int add = 50000;
int dist[N];
vector<pii>v[N];
map<int,int>cost;

int n,m,p;

void bfs(int node)
{
    priority_queue<heap>q;
    for (int i = 0; i < N; ++i)
    {
        dist[i] = MOD;
    }
    dist[node] = 0;
    q.push({0LL,node});
    while(!q.empty())
    {
        int w = q.top().first;
        int nod = q.top().second;
        //cerr<<""current node: ""<<nod<<""\tweight: ""<<w<<'\n';
        q.pop();
        for (auto i : v[nod])
        {
            if (dist[i.first] > dist[nod]+i.second+cost[i.first])
            {
                dist[i.first] = dist[nod]+i.second+cost[i.first];
                q.push({dist[i.first],i.first});
            }
        }
    }
}

void solve()
{
    cin>>n>>m>>p;
    for (int i = 0,x,y,z; i < m; ++i)
    {
        cin>>x>>y>>z;
        x += add;
        y += add;
        v[x].ep(y,z);
        v[y].ep(x,z);
    }
    for (int i = 0,x,y; i < p; ++i)
    {
        cin>>x>>y;
        x += add;
        cost[x] += y;
    }
    bfs(52077LL);
    if (dist[52024LL] > n)
    {
        cout<<""IOI\n"";
    }
    else
    {
        cout<<""NO KAMP\n"";
    }
    //cout<<""distances: ""<<dist[52077]<<""\n""<<dist[52025]<<'\n'<<dist[52024]<<'\n';
}

signed main()
{
    $AzH_TxdmN$
    int t = 1;
    //cin>>t;
    while(t--)
    {
        solve();
    }
}
/*
10 2 1
2077 2025 1
2025 2024 1
2024 9
*/"
rNC9HfGw,Untitled,sambacar,JSON,Monday 12th of February 2024 06:43:21 AM CDT,"{
    ""id"": ""1000036060"",
    ""order_number"": ""1000036060"",
    ""order_date"": ""2024-02-12T12:39:32"",
    ""status"": ""open"",
    ""customer"": {
        ""contact_name"": ""Petar Sambolek"",
        ""first_name"": ""Petar"",
        ""last_name"": ""Sambolek"",
        ""street"": ""Ulica Svete Ane 57"",
        ""postcode"": ""31000"",
        ""city"": ""Osijek"",
        ""phone"": ""0923051110"",
        ""e_mail"": ""sambolek.petar@gmail.com""
    },
    ""items"": [
        {
            ""position"": 1,
            ""product"": {
                ""ean_code"": ""5019487084484"",
                ""name"": ""Rio 60 Second Face Lift Plus""
            },
            ""quantity"": 1,
            ""price"": 152.7
        }
    ],
    ""payment"": {
        ""status"": ""pending"",
        ""method"": ""wire_transfer""
    },
    ""discount_amount"": ""0.0000""
}"
GCUb2tZm,gcd lcm,LEGEND2004,C++,Monday 12th of February 2024 06:41:52 AM CDT,"#include <bits/stdc++.h>
using namespace std;

#define int long long
#define fastio ios_base::sync_with_stdio(0); cin.tie(0)
const int N = 2e5 + 5;

int gcd(int a , int b){
    if(b == 0)  return a;
    return gcd(b , a % b);
}

int lcm(int a , int b){
    return a / gcd(a , b) * b;
}


signed main()
{
    fastio;

    int a , b;
    cin >> a >> b;
    cout << gcd(a , b) << ' ' << lcm(a , b) << '\n';
}
"
xcnJ9Kkb,Untitled,ERROR_CODE,Lua,Monday 12th of February 2024 06:38:32 AM CDT,"local LocalizationService = game:GetService(""LocalizationService"")

local Player = game.Players.

local Region, Country = pcall(function()
return LocalizationService:GetCountryRegionForPlayerAsync(Player)
end)
print(Country)"
qwNTiqZU,data838,TestGuy1,JSON,Monday 12th of February 2024 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '40460d56c185e095dcf2628345eb5c2421ff43be6d42a1f2305c0657586130f0ce0e33158ce7a6c5af21070821355b56953d9a2038cc86d7c163c342ab1a24f54b3d8573fbc5f84c3af9b92abb2740d89c07be4a0a9f4c6ca7ce2a9ba86615be1575d16fe6f059d870641fbcc715300c7b4a3bbb0d22f1d79b913d538a88c6dd',
  otherdata: [
    '34550d4990b89dcfacebdee4d7499395',
    '2d609f3925c7f1873cf8a8c4bec16a1b',
    'a2fcc5aa2c5889073153cebd8fea156e',
    '63f1bba326bb47846c896d9f37c16a3d',
    'b7bd2e5eb611f6725de692ed202ea15b',
    'e63ee9e1ce2cca2dbe7b1f5979119718',
    '4817055f8f170cfeed7f822e592e5407',
    '2582878f78f141be220348bbbfbc3972'
  ]
}"
uLS08a9i,Untitled,sambacar,JSON,Monday 12th of February 2024 05:56:03 AM CDT,"{
    ""id"": ""1000036059"",
    ""order_number"": ""1000036059"",
    ""order_date"": ""2024-02-12T10:33:42"",
    ""status"": ""open"",
    ""customer"": {
        ""contact_name"": ""Petar Sambolek"",
        ""first_name"": ""Petar"",
        ""last_name"": ""Sambolek"",
        ""street"": ""Ulica Svete Ane 57"",
        ""postcode"": ""31000"",
        ""city"": ""Osijek"",
        ""phone"": ""0923051110"",
        ""e_mail"": ""sambolek.petar@gmail.com""
    },
    ""items"": [
        {
            ""position"": 1,
            ""product"": {
                ""ean_code"": ""5019487084484"",
                ""name"": ""Rio 60 Second Face Lift Plus""
            },
            ""quantity"": 1,
            ""price"": 152.7
        }
    ],
    ""payment"": {
        ""status"": ""pending"",
        ""method"": ""wire_transfer""
    },
    ""discount_amount"": ""0.0000""
}"
riHum8HX,Forminator - CPF/CNJP mask + validate,adczk,PHP,Monday 12th of February 2024 05:31:02 AM CDT,"<?php

// CPF MASK
// Add this class to the CPF field on the form: cpf
add_action('wp_footer', 'wpmudev_custom_cpf_mask', 9999);
function wpmudev_custom_cpf_mask()
{
    global $post;
    if (is_a($post, 'WP_Post') && !has_shortcode($post->post_content, 'forminator_form')) {
        return;
    }
?>
    <script type=""text/javascript"">
        jQuery(document).ready(function($) {

            function handleCpfChange(event) {
                // Get only the numbers from the data input
                let data = event.target.value.replace(/\D/g, """");
                // Checking data length to define if it is cpf or cnpj
                if (data.length <= 11) {
                    // It's cpf
                    let cpf = """";
                    let parts = Math.ceil(data.length / 3);
                    for (let i = 0; i < parts; i++) {
                        if (i === 3) {
							cpf += `-${data.substr(i * 3)}`;

                            break;
                        }
				cpf += `${i !== 0 ? ""."" : """"}${data.substr(i * 3, 3)}`;

                    }
                    // Pass formatting for the data
                    data = cpf;
                }
                // Update state
                setcpfCnpjValue(data);
            };

            function setcpfCnpjValue(value) {
                // Set the value to the input
                cpf_field.val(value);
            }

            const cpf_field = $("".cpf input"");

            cpf_field.bind('focusout keyup ', function(event) {
                handleCpfChange(event);
            });

        });
    </script>
<?php

}


###################################

// CNJP MASK
// Add this class to the CNJP field on the form: cnjp
add_action('wp_footer', 'wpmudev_custom_cnpj_mask', 9999);
function wpmudev_custom_cnpj_mask()
{
    global $post;
    if (is_a($post, 'WP_Post') && !has_shortcode($post->post_content, 'forminator_form')) {
        return;
    }
?>
    <script type=""text/javascript"">
        jQuery(document).ready(function($) {

            function handleCnpjChange(event) {
                // Get only the numbers from the data input
                let data = event.target.value.replace(/\D/g, """");
                // Checking data length to define if it is cpf or cnpj
                if (data.length > 11) {
                    // It's cnpj
		        let cnpj = `${data.substr(0, 2)}.${data.substr(2,3)}.${data.substr(5,3)}/`;
		
                    if (data.length > 12)
				cnpj += `${data.substr(8, 4)}-${data.substr(12, 2)}`;

                    else
                        cnpj += data.substr(8);
                    // Pass formatting for the data
                    data = cnpj;
                } 
                // Update state
                setcpfCnpjValue(data);
            };

            function setcpfCnpjValue(value) {
                // Set the value to the input
                cpf_field.val(value);
            }

            const cpf_field = $("".cnpj input"");

            cpf_field.bind('focusout keyup ', function(event) {
                handleCnpjChange(event);
            });

        });
    </script>
<?php

}


#################################

// CNJP validation 
// replace number 123 with an ID of your form 
// replace input-1 with your CNJP field name
// set your custom message in $error_msg


add_filter( 'forminator_custom_form_submit_errors', 'cnjp_form_validation', 99, 3 );
function cnjp_form_validation( $submit_errors, $form_id, $field_data_array ) {
	
	
	$my_forms = array( 123 ); // IDs of forms to check; if more than one, separate by comma 
	$cnjp_field = 'input-1'; // CNJP field
	
	$error_msg = 'Invalid CNJP!'; // custom error message
	
	if ( in_array( $form_id, $my_forms ) ) {
		
		$cnjp = '';

		foreach( $field_data_array as $arr ) {
	
			if ( $arr['name'] == $cnjp_field ) $cnjp = $arr['value'];
			
		}
		
		// validation 
		
		if ( !cnjp_validate( $cnjp ) ) {
			$submit_errors[][$mail_field] = $error_msg;
		}
		
	
	}

	return $submit_errors;
}


function cnjp_validate( $cnjp ) {
   
   $b = array(6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2);
   $c = preg_replace('/[^\d]/', '', $cnpj);
   if(strlen($c) !== 14) 
        return false;

    if(preg_match('/0{14}/', $c))
        return false;

    for ($i = 0, $n = 0; $i < 12; $n += $c[$i] * $b[++$i]);
    if($c[12] != (((($n %= 11)) < 2) ? 0 : 11 - $n))
        return false;

    for ($i = 0, $n = 0; $i <= 12; $n += $c[$i] * $b[$i++]);
    if($c[13] != (((($n %= 11)) < 2) ? 0 : 11 - $n))
        return false;

    return true;
}


###################################

// CPF Validation 
// replace 123 with your form ID
// replace input-1 with your CPF field 
// set your error message in $error_msg

add_filter( 'forminator_custom_form_submit_errors', 'cpf_form_validation', 99, 3 );
function cpf_form_validation( $submit_errors, $form_id, $field_data_array ) {
	
	
	$my_forms = array( 123 ); // IDs of forms to check; if more than one, separate by comma 
	$cpf_field = 'input-1'; // CNJP field
	
	$error_msg = 'Invalid CPF!'; // custom error message
	
	if ( in_array( $form_id, $my_forms ) ) {
		
		$cpf = '';

		foreach( $field_data_array as $arr ) {
	
			if ( $arr['name'] == $cpf_field ) $cpf = $arr['value'];
			
		}
		
		// validation 
		
		if ( !cpf_validate( $cpf ) ) {
			$submit_errors[][$mail_field] = $error_msg;
		}
		
	
	}

	return $submit_errors;
}



function cpf_validate( $cpf ) {

	// Extracts only the numbers
	$cpf = preg_replace( '/[^0-9]/is', '', $cpf );

	// Checks if all digits were entered correctly
	if (strlen($cpf) != 11) {
		return false;
	}

	// Checks whether a sequence of repeated digits was entered. Ex: 111.111.111-11
	if (preg_match('/(\d)\1{10}/', $cpf)) {
		return false;
	}

	// Perform the calculation to validate the CPF
	for ($t = 9; $t < 11; $t++) {
		for ($d = 0, $c = 0; $c < $t; $c++) {
			$d += $cpf[$c] * (($t + 1) - $c);
		}
		$d = ((10 * $d) % 11) % 10;
		if ($cpf[$c] != $d) {
			return false;
		}
	}
	
	return true;
}

"
gymWHzws,–ù–∞–π-–¥—ä–ª–≥–∏—è—Ç –ø—ä—Ç,Nenogzar,Python,Monday 12th of February 2024 05:25:24 AM CDT,"
    total_moves = 0  # –û–±—â –±—Ä–æ–π –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è—Ç–∞
    total_exits = 0  # –û–±—â –±—Ä–æ–π –Ω–∞ –≤—ä–∑–º–æ–∂–Ω–∏—Ç–µ –∏–∑—Ö–æ–¥–∏
    longest_path = []  # –ù–∞–π-–¥—ä–ª–≥–∏—è—Ç –ø—ä—Ç

    while next_free:
        x, y = next_free.pop(0)
        moves = 0  # –ë—Ä–æ–π –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–ª—è–≤–æ
        if position[0] == x and position[1] - y == 1:
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–¥—è—Å–Ω–æ
        elif position[0] == x and y - position[1] == 1:
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–¥–æ–ª—É
        elif x - position[0] == 1 and position[1] == y:
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–≥–æ—Ä–µ
        elif position[0] - x == 1 and position[1] == y:
            moves += 1

        # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –±—Ä–æ—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è
        total_moves += moves

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Ç–µ–∫—É—â–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –µ –∏–∑—Ö–æ–¥ –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        if position[0] == 0 or position[0] == (len(maze) - 1) or position[1] == 0 or position[1] == (len(maze[0]) - 1):
            total_exits += 1

            # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∏—è –ø—ä—Ç, –∞–∫–æ –µ –ø–æ-–¥—ä–ª—ä–≥ –æ—Ç –ø—Ä–µ–¥–∏—à–Ω–∏—è
            if moves > len(longest_path):
                longest_path = [(position[0], position[1])] + [(x, y) for x, y in next_free]

"
seNfZsgN,Soccer Prediction Betting Tips 12022024,livebetpro,PHP,Monday 12th of February 2024 04:41:07 AM CDT,https://www.livebetpro.com/soccer-prediction-betting-tips-12022024/
YwjXiapr,3.	Kate's Way Out,Nenogzar,Python,Monday 12th of February 2024 04:40:54 AM CDT,"# –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ ""k"" –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def find_position(maze):
    position = []
    for row in range(len(maze)):
        for el in maze[row]:
            if el == 'k':
                position.append(row)
                position.append(maze[row].find('k'))
                return position

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ (' ') –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def next_free_spot(maze):
    free_spots = []

    for row in range(len(maze)):
        for el in range(len(maze[row])):
            tmp = []
            if maze[row][el] == ' ':
                tmp.append(row)
                tmp.append(el)
                free_spots.append(tmp)

    return free_spots

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –ø—ä—Ç—è –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def find_path(position, next_free, maze):
    moves = 0

    while next_free:
        x1, x2 = next_free.pop(0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–ª—è–≤–æ
        if position[0] == x1 and position[1] - x2 == 1:
            position = [x1, x2]
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–¥—è—Å–Ω–æ
        elif position[0] == x1 and x2 - position[1] == 1:
            position = [x1, x2]
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–¥–æ–ª—É
        elif x1 - position[0] == 1 and position[1] == x2:
            position = [x1, x2]
            moves += 1
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–≥–æ—Ä–µ
        elif position[0] - x1 == 1 and position[1] == x2:
            position = [x1, x2]
            moves += 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∏–∑–ª–∏–∑–∞–Ω–µ –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    if position[0] == 0 or position[0] == (len(maze) - 1) or position[1] == 0 or position[1] == len(maze[0]):
        return f'Kate got out in {moves + 1} moves'
    # –°—ä–æ–±—â–µ–Ω–∏–µ, —á–µ Kate –Ω–µ –º–æ–∂–µ –¥–∞ –∏–∑–ª–µ–∑–µ –æ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    return 'Kate cannot get out'

# –í—Ö–æ–¥ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è - –±—Ä–æ–π —Ä–µ–¥–æ–≤–µ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
m_rows = int(input())
maze = []
moves = 0
free_space = True

# –í—Ö–æ–¥ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è - —Ä–µ–¥–æ–≤–µ –Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
for row in range(m_rows):
    maze.append(input())

# –ò–∑–≤–∏–∫–≤–∞–Ω–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –∏ –∏–∑–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
position = find_position(maze)
next_free = next_free_spot(maze)
movement = find_path(position, next_free, maze)
print(movement)
"
BfHkK5p3,Untitled,ekzolot,C++,Monday 12th of February 2024 03:41:49 AM CDT,"#include <bits/stdc++.h>
#define int long long
using namespace std;
int str(vector<pair<int, int>>& cord, int stolb){
    int n=(int) cord.size();
    int l=-1;
    int r=n;
    while(r-l>1){
        int m=(l+r)/2;
        if (cord[m].first<=stolb){
            l=m;
        }else{
            r=m;
        }
    }
    return cord[l].second;
}
int new_str(vector<pair<int, int>>& cord, int stolb){
    int n=(int) cord.size();
    int l=-1;
    int r=n;
    while(r-l>1){
        int m=(l+r)/2;
        if (cord[m].first<stolb){
            l=m;
        }else{
            r=m;
        }
    }
    return cord[r].second;
}
void read(int x, int y, vector<pair<int, int>>& cord, int& left, int& right){
    cord.push_back({x, y});
    left=x;
    int a=x;
    int b=y;
    while(true){
        char p;
        cin>>p;
        if (p=='0'){
            right=a;
            break;
        }
        if (p=='+'){
            int q;
            cin>>q;
            b+=q;
            cord.push_back({a, b});
        }
        if (p=='-'){
            int q;
            cin>>q;
            a+=q;
            cord.push_back({a, b});
        }
    }
}
signed main(){
    int p;
    cin>>p;
    vector<pair<int, int>> cord1;
    vector<pair<int, int>> cord2;
    int x, y;
    cin>>x>>y;
    int left, right;
    pair<int, int> cur={x, y};
    vector<pair<int, int>> fish(p);
    for (int i=0; i<p; i++){
        cin>>fish[i].first>>fish[i].second;
    }
    read(x, y, cord1, left, right);
    read(x, y, cord2, left, right);
    int cnt=0;
    for (int i=0; i<p; i++){
        int stolb=fish[i].first;
        if (stolb<left || stolb>right){
            continue;
        }
        int str1=str(cord1, stolb);
        int str2=str(cord2, stolb);
        int str3=new_str(cord1, stolb);
        int str4=new_str(cord2, stolb);
        if (min(str1, min(str2, min(str3, str4)))<=fish[i].second && max(str1, max(str2, max(str3, str4)))>=fish[i].second){
            cnt++;
        }
    }
    cout<<cnt<<""\n"";
    return 0;
}"
AZZVdpFP,Untitled,smj007,Python,Monday 12th of February 2024 03:28:26 AM CDT,"class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        
        def bfs(q):

            fresh_count = 0
            max_l = 0

            while q:
                row, col, l = q.popleft()
                max_l = max(max_l, l)
                directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
                for (dr, dc) in directions:
                    r = row + dr
                    c = col + dc
                    if r in range(n) and c in range(m) and grid[r][c] == 1 and (r, c) not in visited:
                        q.append((r, c, l+1))
                        visited.add((r, c))
                        fresh_count += 1

            if fresh_count == num_fresh:
                return max_l
            else:
                return -1

                        
        # add all rotten oranges to queu 
        from collections import deque
        q = deque()
        visited = set()
        num_fresh = 0

        for r in range(n):
            for c in range(m):
                if grid[r][c] == 2:
                    q.append((r, c, 0))
                    visited.add((r, c))
                if grid[r][c] == 1:
                    num_fresh += 1

        return bfs(q)


"
i98acaJ0,Code Challenge 2,imronmboo,Java,Monday 12th of February 2024 03:21:43 AM CDT,"public class Main {
    // Method untuk menyimpan data pengguna dalam bentuk array
    public static String[] users() {
        String[] names = {""Dika"", ""Bejo"", ""Nabil"", ""Siregar"", ""Sumanto"", ""Bryan"", ""Elang"", ""Raja"", ""Jhoni""};
        return names;
    }

    // Method untuk mencetak jumlah data dalam array
    public static void printNumberOfUsers(String[] names) {
        System.out.println(""Jumlah data dalam array: "" + names.length);
    }

    // Method untuk mencetak data pertama dalam array
    public static void printFirstUserData(String[] names) {
        System.out.println(""Data untuk index yang pertama: "" + names[0]);
    }

    // Method untuk mencetak semua nama dalam array dengan format Nama: <nama>
    public static void printAllUsers(String[] names) {
        System.out.println(""Nama-nama dalam array:"");
        for (String name : names) {
            System.out.println(""Nama: "" + name);
        }
    }

    // Method untuk mencetak hanya pengguna yang nama awalnya ""S"" atau ""J""
    public static void printUsersWithSJ(String[] names) {
        System.out.println(""Pengguna dengan nama awal 'S' atau 'J':"");
        for (String name : names) {
            if (name.startsWith(""S"") || name.startsWith(""J"")) { // perlu simbol pemisah karena kita butuh data S dan J
                System.out.println(""Nama: "" + name);
            }
        }
    }

    public static void main(String[] args) {
        // Memanggil method users() untuk mendapatkan array data pengguna
        String[] userData = users();

        // Memanggil method untuk mencetak jumlah data dalam array
        printNumberOfUsers(userData);

        // Memanggil method untuk mencetak data pertama dalam array
        printFirstUserData(userData);

        // Memanggil method untuk mencetak semua nama dalam array
        printAllUsers(userData);

        // Memanggil method untuk mencetak hanya pengguna yang nama awalnya ""S"" atau ""J""
        printUsersWithSJ(userData);
    }
}


result code tersebut akan dicetak:
Jumlah data dalam array: 9
Data untuk index yang pertama: Dika
Nama-nama dalam array:
Nama: Dika
Nama: Bejo
Nama: Nabil
Nama: Siregar
Nama: Sumanto
Nama: Bryan
Nama: Elang
Nama: Raja
Nama: Jhoni
Pengguna dengan nama awal 'S' atau 'J':
Nama: Siregar
Nama: Sumanto
Nama: Jhoni
"
JtcX1dER,BadgeScript (STORY GAME OBBY),Sungmingamerpro13,CSS,Monday 12th of February 2024 03:15:33 AM CDT,"local BadgeID = 4234072313304229

local Debounce = false

script.Parent.Touched:Connect(function(hit)
	if hit.Parent:FindFirstChild(""Humanoid"") then
		
		if Debounce == false then
			
			Debounce = true
			
			local character = hit.Parent
			local player = game.Players:GetPlayerFromCharacter(character)

			game:GetService(""BadgeService""):AwardBadge(player.UserId, BadgeID)

			wait(5)

			player.Character:WaitForChild(""HumanoidRootPart"").CFrame = game.Workspace.ReturnPart.CFrame
			
			Debounce = false
		end
	end
end)
"
3NY4amp3,Untitled,ekzolot,C++,Monday 12th of February 2024 02:52:42 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int str(vector<pair<int, int>>& cord, int stolb){
    int n=(int) cord.size();
    int l=-1;
    int r=n;
    while(r-l>1){
        int m=(l+r)/2;
        if (cord[m].first<=stolb){
            l=m;
        }else{
            r=m;
        }
    }
    return cord[l].second;
}
int main(){
    int p;
    cin>>p;
    vector<pair<int, int>> cord1;
    vector<pair<int, int>> cord2;
    int x, y;
    cin>>x>>y;
    cord1.push_back({x, y});
    cord2.push_back({x, y});
    pair<int, int> cur={x, y};
    vector<pair<int, int>> fish(p);
    for (int i=0; i<p; i++){
        cin>>fish[i].first>>fish[i].second;
    }
    while(true){
        char p;
        cin>>p;
        if (p=='+'){
            int q;
            cin>>q;
            cur.second+=q;
            cord1.push_back(cur);
        }
        if (p=='-'){
            int q;
            cin>>q;
            cur.first+=q;
            cord1.push_back(cur);
        }
        if (p=='0'){
            break;
        }
    }
    cur={x, y};
    while(true){
        char p;
        cin>>p;
        if (p=='+'){
            int q;
            cin>>q;
            cur.second+=q;
            cord2.push_back(cur);
        }
        if (p=='-'){
            int q;
            cin>>q;
            cur.first+=q;
            cord2.push_back(cur);
        }
        if (p=='0'){
            break;
        }
    }
    int cnt=0;
    for (int i=0; i<p; i++){
        int stolb=fish[i].first;
        int str1=str(cord1, stolb);
        int str2=str(cord2, stolb);
        if (min(str1, str2)<=fish[i].second && max(str1, str2)>=fish[i].second){
            cnt++;
        }
    }
    cout<<cnt<<""\n"";
    return 0;
}"
JRqLMKMt,LoginController,tklisanic,Dart,Monday 12th of February 2024 02:40:05 AM CDT,"import 'dart:async';

import 'package:get/get.dart';
import 'package:mobile/app/services/oauth_client_service.dart';
import 'package:webview_flutter/webview_flutter.dart';

import '../../../routes/app_pages.dart';

class LoginController extends GetxController {
  final OAuthClientService oAuthClientService;

  String? initialUrl;

  Rxn<bool> loading = Rxn<bool>(true);

  Rxn<int> loadingPercentage = Rxn<int>(0);

  late WebViewController webViewController;

  LoginController(this.oAuthClientService);

  @override
  void onInit() {
    initialUrl =
        Uri.decodeFull(oAuthClientService.getAuthorizationUrl().toString());

    // Clear cookies first to logout and to force login from web browser
    WebViewCookieManager().clearCookies();

    webViewController = WebViewController();
    webViewController
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(
        NavigationDelegate(
          onProgress: onProgress,
          onPageStarted: onPageStarted,
          onPageFinished: onPageFinished,
          onWebResourceError: (WebResourceError error) {},
          onNavigationRequest: navigationDelegate,
        ),
      )
      ..loadRequest(Uri.parse(initialUrl!)).then((value) {});
  }

  FutureOr<NavigationDecision> navigationDelegate(
      NavigationRequest request) async {
    if (request.url.startsWith(OAuthClientService.redirectUrl.toString())) {
      var responseUrl = Uri.parse(request.url);

      if (responseUrl.queryParameters['code'] != null) {
        var client =
            await oAuthClientService.handleAuthorizationResponse(responseUrl);

        await oAuthClientService.saveCredentials(client.credentials);

        Get.offAllNamed(Routes.HOME);

        return NavigationDecision.prevent;
      }
    }

    return NavigationDecision.navigate;
  }

  void onPageStarted(String url) {
    loading.value = true;
    loadingPercentage.value = 0;
  }

  void onProgress(int progress) {
    loading.value = true;
    loadingPercentage.value = progress;
  }

  void onPageFinished(String url) {
    loading.value = false;
    loadingPercentage.value = 100;
  }
}
"
G2TWz9Lp,OAuthClientService,tklisanic,Dart,Monday 12th of February 2024 02:39:11 AM CDT,"import 'dart:async';

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:get/get.dart';
import 'package:oauth2/oauth2.dart' as oauth2;
import 'package:oauth2/oauth2.dart';

import '../routes/app_pages.dart';

class OAuthClientService extends GetxService {
  static const String redirectUrl =
      'http://10.0.2.2:9090' + '/'; // TODO: extract to a separate class

  static const String clientId =
      'onlyparking-api'; // TODO: extract to a separate class
  static const String clientSecret =
      'Eiad7Ujc7rz3rCDnKyuw7BYxaPHJk8lu'; // TODO: extract to a separate class

  static const String oauth2SecureStorageKey = 'oauth2Credentials';

  final authorizationEndpoint = Uri.parse(
      'http://10.0.2.2:9090/realms/onlyparking/protocol/openid-connect/auth'); // TODO: extract to a separate class
  final tokenEndpoint = Uri.parse(
      'http://10.0.2.2:9090/realms/onlyparking/protocol/openid-connect/token'); // TODO: extract to a separate class

  Credentials? credentials;

  late AuthorizationCodeGrant authorizationCodeGrant;

  final FlutterSecureStorage storage = const FlutterSecureStorage();

  initCredentials() async {
    credentials = await loadCredentials();
  }

  Future<Credentials?> loadCredentials() async {
    final credentialsJson = await storage.read(key: oauth2SecureStorageKey);

    var exists = credentialsJson == null ? false : true;

    return exists ? oauth2.Credentials.fromJson(credentialsJson) : null;
  }

  bool isSessionEmpty() {
    if (credentials == null) {
      return true;
    }

    return false;
  }

  getAuthorizationUrl() {
    authorizationCodeGrant = oauth2.AuthorizationCodeGrant(
        clientId, authorizationEndpoint, tokenEndpoint,
        secret: clientSecret);

    return authorizationCodeGrant
        .getAuthorizationUrl(Uri.parse(redirectUrl), scopes: ['openid']);
  }

  Future<bool> saveCredentials(Credentials? credentials) async {
    await storage.write(
        key: oauth2SecureStorageKey, value: credentials?.toJson());

    this.credentials = credentials;

    return true;
  }

  Future<oauth2.Client> handleAuthorizationResponse(Uri responseUrl) async {
    return await authorizationCodeGrant
        .handleAuthorizationResponse(responseUrl.queryParameters);
  }

  Future<Credentials?> refreshToken() async {
    var credentials = await loadCredentials();
    try {
      if (credentials!.canRefresh) {
        var refreshedCredentials = await credentials.refresh(
            identifier: clientId, secret: clientSecret);

        await saveCredentials(refreshedCredentials);

        return refreshedCredentials;
      } else {
        throw 'Could not refresh the Token!';
      }
    } catch (e) {
      // TODO: log error
      Get.offAndToNamed(Routes.LOGIN);
    }

    return null;
  }
}
"
ttHMMTrX,task3arrays,psychotrance,Java,Monday 12th of February 2024 02:31:40 AM CDT,"public class task3array {
    public static void main(String[] args) {
        /*
        –í—ã—á–∏—Å–ª–∏—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –º–∞—Å—Å–∏–≤ –ø–µ—Ä–≤—ã–µ 10 –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª.
        –ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ ‚Äì –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ,
        –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –ª–∏—à—å –Ω–∞ —Å–µ–±—è –∏ –Ω–∞ 1.
        1 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–º.
        –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
        */
        int[] array = new int[10];
        int arrayIndex = 0;

        int simpleNum = 2; //—á–∏—Å–ª–æ 2 –∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–µ
        array[arrayIndex] = simpleNum;
        System.out.printf(""array[%d] = %d \n"", arrayIndex, array[arrayIndex]);
        arrayIndex++;
        simpleNum++;

        simpleNum = 3; //—á–∏—Å–ª–æ 2 –∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–µ
        array[arrayIndex] = simpleNum;
        System.out.printf(""array[%d] = %d \n"", arrayIndex, array[arrayIndex]);
        arrayIndex++;
        simpleNum++;

        for (; arrayIndex < array.length; arrayIndex++) {

            for (; simpleNum <= 50; simpleNum++) {

                    if (simpleNum % 2 == 0) {
                        continue;
                    } else if (simpleNum % 3 == 0) {
                        continue;
                    } /*
                    else if (simpleNum % 5 == 0) {
                        continue;

                        –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è—é –¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ—á–∫—É
                        —á–∏—Å–ª–æ 5 –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –∏–∑ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
                        (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ –≤–Ω–µ—Å—Ç–∏ —á–∏—Å–ª–æ 5 –≤ –º–∞—Å—Å–∏–≤ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ
                        –≤—Ä—É—á–Ω—É—é, –¥–æ —Ü–∏–∫–ª–∞)
                        —Ö–æ—Ç—è –ø—Ä–æ—Å—Ç—ã–º –∏ —è–≤–ª—è–µ—Ç—Å—è
                        –Ω–æ
                        –¥–æ–±–∞–≤–∏–≤ —ç—Ç—É —Å—Ç—Ä–æ—á–∫—É
                        —è —É–±–∏—Ä–∞—é —á–∏—Å–ª–æ 25 –∏–∑ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
                        –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–º

                        —Ç–∞–∫ –∂–µ –Ω–µ –º–æ–≥—É —á–∏—Å–ª–æ 5 –≤–Ω–µ—Å—Ç–∏ –≤ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –¥–æ –º–∞—Å—Å–∏–≤–∞
                        —Ç–∞–∫ –∫–∞–∫ —Ç–æ–≥–¥–∞ –∏–∑ —Ä–∞—Å—Å—á—ë—Ç–∞ —á–∏—Å–µ–ª –ø—Ä–æ–ø–∞–¥—ë—Ç —á–∏—Å–ª–æ 4
                        –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–º –∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è
                        */

                     else {
                        array[arrayIndex] = simpleNum;
                        simpleNum++;
                        break;
                    }
            }
            System.out.printf(""array[%d] = %d \n"", arrayIndex, array[arrayIndex]);
        }
    }
}"
br7vDpE7,bash logger,Nom1fan,Bash,Monday 12th of February 2024 01:41:47 AM CDT,"#!/bin/bash

print_color() {
    local color=$1
    local message=$2
    local reset_color='\033[0m' # ANSI escape code to reset color
    echo -e ""${color}${message}${reset_color}""
}

info() {
    print_color ""\033[32m"" ""INFO: $*""
}

warn() {
    print_color ""\033[33m"" ""WARN: $*""
}

error() {
    print_color ""\033[31m"" ""ERROR: $*""
}"
AtF6S58a,ProfilePage,rifki_cs29,Dart,Monday 12th of February 2024 12:54:59 AM CDT,"import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_smmf_one/core/common/app_theme.dart';
import 'package:flutter_smmf_one/core/widgets/custom_app_bar.dart';
import 'package:flutter_smmf_one/core/widgets/custom_button.dart';
import 'package:flutter_smmf_one/core/widgets/gap/gap.dart';
import 'package:flutter_smmf_one/core/widgets/rotated_image.dart';
import 'package:flutter_smmf_one/data/datasources/db/database_helper.dart';
import 'package:flutter_smmf_one/presentation/controllers/home_controller.dart';
import 'package:get/get.dart';

final _homeController = Get.put(HomeController(), permanent: true);

class ProfilePage extends StatelessWidget {
  ProfilePage({super.key}) {
    _homeController.getLoggedInUser();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBar(
        titleText: 'Profile',
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.symmetric(
          horizontal: defaultMargin,
        ),
        child: Obx(() {
          final loggedInUser = _homeController.loggedInUser;
          if (loggedInUser[DatabaseHelper.columnID] != null) {
            _homeController.getLatestAttendance(
              loggedInUser[DatabaseHelper.columnID],
            );
          }

          final latestAttendance = _homeController.latestAttendance;

          return Column(
            children: [
              Gap(12.h),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  RotatedImage(
                    width: 150.w,
                    height: 150.h,
                    imagePath:
                        loggedInUser[DatabaseHelper.columnPhotoMasterPath] ??
                            '',
                    mirrorHorizontal: true,
                  ),
                ],
              ),
              Gap(20.h),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CustomButton.buttonRounded(
                    onTap: () => Get.toNamed(
                      '/edit-profile',
                      arguments: {
                        'phone': loggedInUser[DatabaseHelper.columnPhone] ?? '',
                        'isEdit':
                            loggedInUser[DatabaseHelper.columnProvinceName] !=
                                    null
                                ? true
                                : false,
                      },
                    ),
                    padding: EdgeInsets.symmetric(
                      horizontal: 16.w,
                      vertical: 8.h,
                    ),
                    text: 'Edit Profile',
                  ),
                  Gap(12.w),
                  CustomButton.buttonRounded(
                    onTap: () => Get.toNamed(
                      '/register-photo',
                      arguments: {
                        'isRegister': false,
                      },
                    ),
                    padding: EdgeInsets.symmetric(
                      horizontal: 16.w,
                      vertical: 8.h,
                    ),
                    text: 'Absence',
                  ),
                  Gap(12.w),
                  CustomButton.buttonRounded(
                    onTap: () => Get.toNamed(
                      '/attendance-list',
                      arguments: loggedInUser[DatabaseHelper.columnID],
                    ),
                    padding: EdgeInsets.symmetric(
                      horizontal: 16.w,
                      vertical: 8.h,
                    ),
                    text: 'Attendance',
                  ),
                ],
              ),
              Gap(24.h),
              Row(
                children: [
                  Icon(
                    Icons.phone,
                    color: colorRed,
                    size: 32.h,
                  ),
                  Gap(12.w),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Handphone',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                          fontStyle: FontStyle.italic,
                          fontWeight: semiBold,
                        ),
                      ),
                      Gap(4.h),
                      Text(
                        loggedInUser[DatabaseHelper.columnPhone] ?? '',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              Gap(6.h),
              Divider(
                thickness: 1.h,
                color: colorGrey,
              ),
              Gap(6.h),
              Row(
                children: [
                  Icon(
                    Icons.group,
                    color: colorRed,
                    size: 32.h,
                  ),
                  Gap(12.w),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'NIK',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                          fontStyle: FontStyle.italic,
                          fontWeight: semiBold,
                        ),
                      ),
                      Gap(4.h),
                      Text(
                        loggedInUser[DatabaseHelper.columnNik] ?? '',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              Gap(6.h),
              Divider(
                thickness: 1.h,
                color: colorGrey,
              ),
              Gap(6.h),
              Row(
                children: [
                  Icon(
                    Icons.email,
                    color: colorRed,
                    size: 32.h,
                  ),
                  Gap(12.w),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Email',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                          fontStyle: FontStyle.italic,
                          fontWeight: semiBold,
                        ),
                      ),
                      Gap(4.h),
                      Text(
                        loggedInUser[DatabaseHelper.columnEmail] ?? '',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              Gap(6.h),
              Divider(
                thickness: 1.h,
                color: colorGrey,
              ),
              Gap(6.h),
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Icon(
                    Icons.place,
                    color: colorRed,
                    size: 32.h,
                  ),
                  Gap(12.w),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Province',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                          fontStyle: FontStyle.italic,
                          fontWeight: semiBold,
                        ),
                      ),
                      Gap(4.h),
                      Text(
                        loggedInUser[DatabaseHelper.columnProvinceName] ?? '-',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                        ),
                      ),
                      Gap(8.h),
                      Text(
                        'City',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                          fontStyle: FontStyle.italic,
                          fontWeight: semiBold,
                        ),
                      ),
                      Gap(4.h),
                      Text(
                        loggedInUser[DatabaseHelper.columnCityName] ?? '-',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                        ),
                      ),
                      Gap(8.h),
                      Text(
                        'Sub District',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                          fontStyle: FontStyle.italic,
                          fontWeight: semiBold,
                        ),
                      ),
                      Gap(4.h),
                      Text(
                        loggedInUser[DatabaseHelper.columnSubDistrictName] ??
                            '-',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                        ),
                      ),
                      Gap(8.h),
                      Text(
                        'District',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                          fontStyle: FontStyle.italic,
                          fontWeight: semiBold,
                        ),
                      ),
                      Gap(4.h),
                      Text(
                        loggedInUser[DatabaseHelper.columnDistrictName] ?? '-',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                        ),
                      ),
                      Gap(8.h),
                      Text(
                        'Longitude',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                          fontStyle: FontStyle.italic,
                          fontWeight: semiBold,
                        ),
                      ),
                      Gap(4.h),
                      Text(
                        latestAttendance[DatabaseHelper.columnLongitude] ?? '-',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                        ),
                      ),
                      Gap(8.h),
                      Text(
                        'Latitude',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                          fontStyle: FontStyle.italic,
                          fontWeight: semiBold,
                        ),
                      ),
                      Gap(4.h),
                      Text(
                        latestAttendance[DatabaseHelper.columnLatitude] ?? '-',
                        style: blackTextStyle.copyWith(
                          fontSize: 12.sp,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ],
          );
        }),
      ),
    );
  }
}
"
r0NGwXTe,task2array,psychotrance,Java,Monday 12th of February 2024 12:42:00 AM CDT,"import java.util.Scanner;

public class task2array {
    public static void main(String[] args) {

        /*
        –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ int‚Äô–æ–≤ –∏–∑ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
        –ó–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
        –í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å—É–º–º—É –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.
        –ü—Ä–µ–¥—ã–¥—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª—è 0-–≥–æ (–Ω—É–ª–µ–≤–æ–≥–æ) —ç–ª–µ–º–µ–Ω—Ç–∞
        —Å—á–∏—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞.
        */

        Scanner in = new Scanner(System.in);

        int[] elements = new int[5];

        int res = 0;
        for (int arrNum = 0; arrNum < elements.length; arrNum++) {
            System.out.print(""Enter a num: "");
            elements[arrNum] = in.nextInt();
            System.out.printf(""Your num: %d \n"", elements[arrNum]);
        }

        in.close();

        for (int i = elements.length - 1; i >= 0; i--) {
            res = i == 0 ? elements[i] + elements[elements.length - 1] : elements[i] + elements[i-1];
            // –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ) —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è —Å —Ç–µ–Ω–∞—Ä–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
            // –æ—á–µ–Ω—å —É–¥–æ–±–Ω–∞—è —à—Ç—É–∫–∞, –∫–∞–∫ –æ–∫–∞–∑–∞–ª–æ—Å—å
            
            // –ï—Å–ª–∏ –≤–æ –≤—Ç–æ—Ä–æ–º –æ–ø–µ—Ä–∞–Ω–¥–µ —É–∫–∞–∑—ã–≤–∞—é i--
            // –¢–æ –Ω—É–∂–Ω—ã–π –º–Ω–µ i —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –µ—â–µ –Ω–∞ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            // –ò –≤ –∏—Ç–æ–≥–µ –∑–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª –æ—Ç —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã =(
            System.out.println(""Result: "" + res);
        }
    }
}
"
9rmRn4zb,Mad,Unknown_No_1,PHP,Monday 12th of February 2024 12:31:17 AM CDT,MadNaamToSunaHoga
