id,title,username,language,date,content
USXXNk2Z,Untitled,DraconiusNX,JavaScript,Friday 26th of April 2024 06:59:02 AM CDT,"const {Builder, By, Key, util} = require(""selenium-webdriver"");
async function registrationAutomation() {
    let driver = await new Builder().forBrowser(""firefox"").build();
    await driver.get(""https://demo.guru99.com/test/newtours/"");
    console.log(""Site Opened!"")
    await driver.sleep(2000);
    let elem = await driver.findElement(By.xpath(""/html/body/div[5]/iframe""))
    await driver.switchTo().frame(elem)
    console.log(""IFrame Found!"")
    await driver.sleep(2000);
    await driver.findElement(By.css(""#save > .mat-button-wrapper span"")).click()
    console.log(""Clicked on the Save button!"");
    await driver.sleep(2000);
    await driver.switchTo().defaultContent()
    await driver.sleep(1000);
    await driver.findElement(By.linkText(""REGISTER"")).click()
    await driver.sleep(1000);
    await driver.findElement(By.name(""firstName"")).sendKeys(""Ivo"")
    await driver.sleep(1000);
    await driver.findElement(By.name(""lastName"")).sendKeys(""Petrov"")
    await driver.sleep(1000);
    await driver.findElement(By.name(""phone"")).sendKeys(""0885711097"")
    await driver.sleep(1000);
    await driver.findElement(By.id(""userName"")).sendKeys(""ivo@rousse.eu"")
    await driver.sleep(1000);
    await driver.findElement(By.name(""city"")).click()
    await driver.sleep(1000);
    await driver.findElement(By.name(""city"")).sendKeys(""Ruse"")
    await driver.sleep(1000);
    await driver.findElement(By.name(""postalCode"")).click()
    await driver.sleep(1000);
    await driver.findElement(By.name(""postalCode"")).sendKeys(""7000"")
    await driver.sleep(1000);
    await driver.findElement(By.name(""country"")).click()
    {
      const dropdown = await driver.findElement(By.name(""country""))
      await dropdown.findElement(By.xpath(""//option[. = 'BULGARIA']"")).click()
    }
    await driver.sleep(1000);
    await driver.findElement(By.id(""email"")).click()
    await driver.sleep(1000);
    await driver.findElement(By.id(""email"")).sendKeys(""user"")
    await driver.sleep(1000);
    await driver.findElement(By.name(""password"")).sendKeys(""1234"")
    await driver.sleep(1000);
    await driver.findElement(By.name(""confirmPassword"")).sendKeys(""1234"")
    await driver.sleep(1000);
    await driver.findElement(By.name(""submit"")).click()
    let currentUrl = await driver.getCurrentUrl();
    let expectedUrl = ""https://demo.guru99.com/test/newtours/register_sucess.php"";
    if (currentUrl === expectedUrl) {
        console.log(""We are on the right page, so exit browser!"");
        await driver.sleep(2000);
        await driver.close();
    }
}
registrationAutomation();"
Js6eeaGX,AdoptMe,Silviya7,JavaScript,Friday 26th of April 2024 06:54:54 AM CDT,"function solve() {
    //TODO..

    const btnAdopt= document.getElementById('adopt-btn'); 
    const InputType=document.getElementById('type');
    const InputGender=document.getElementById('gender');
    const InputAge=document.getElementById('age');

    btnAdopt.addEventListener('click',(e)=>{
  
    e.preventDefault();
    if(!InputType.value || !InputGender.value || !InputAge.value){
      return;
    }
  //console.log('success');
  
     
   const ElementListAdotion=document.getElementById('adoption-info');
   const Elementadoptedlist=document.getElementById('adopted-list');
       
   const Elementp1= document.createElement('p');
   Elementp1.textContent=`Pet:${InputType.value}`;
   const Elementp2= document.createElement('p');
   Elementp2.textContent=`Gender:${InputGender.value}`;
   const Elementp3= document.createElement('p');
   Elementp3.textContent=`Age:${InputAge.value}`;

   const ArticleEl=document.createElement('article');
   ArticleEl.appendChild(Elementp1);
   ArticleEl.appendChild(Elementp2);
   ArticleEl.appendChild(Elementp3);

   //btns
   const EditBtn=document.createElement('button');
   EditBtn.classList.add('edit-btn');
   EditBtn.textContent='Edit';
   const DoneBtn=document.createElement('button');
   DoneBtn.classList.add('done-btn');
   DoneBtn.textContent='Done';

   const ButtonContainer=document.createElement('div');
   ButtonContainer.classList.add('buttons');
   ButtonContainer.appendChild(EditBtn);
   ButtonContainer.appendChild(DoneBtn);

   const LiElement= document.createElement('li');
   LiElement.appendChild(ArticleEl);
   LiElement.appendChild(ButtonContainer);
   ElementListAdotion.appendChild(LiElement);

    InputType.value='';
    InputGender.value='';
    InputAge.value='';

    EditBtn.addEventListener('click',()=>{
    let ListNodes=document.querySelectorAll('article p');
    let AllList= Array.from(ListNodes);

    InputType.value=AllList[0].textContent.substring(4);
    InputGender.value=AllList[1].textContent.substring(7);
    InputAge.value=AllList[2].textContent.substring(4);

    LiElement.remove();
     });

    DoneBtn.addEventListener('click',()=>{

    Elementadoptedlist.appendChild(LiElement);
    //DoneBtn.remove();
    //EditBtn.remove();

    ButtonContainer.remove();

    const BtnClear= document.createElement('button');
    BtnClear.classList.add('clear-btn');
    BtnClear.textContent='Clear';
    LiElement.appendChild(BtnClear);

    BtnClear.addEventListener('click',()=>{
    LiElement.remove();
      });

     });
    });
}"
SwWR8V8C,Untitled,Learning000001,C#,Friday 26th of April 2024 06:42:20 AM CDT,"//pseudo code!!!!!!!!

    private string projectLink = ""https://qqweb-b75ae-default-rtdb.firebaseio.com"";
    public string UserDataLink => $""{projectLink}/users/{userLocalId}/"";


    private void CollectPlayerData(Action<bool> _callBack)
    {
        StartCoroutine(WebRequests.Instance.Get(UserDataLink + ""/.json"", (_result) =>
        {
            Debug.Log(""Got data: ""+_result);
            _callBack?.Invoke(true);
        }, (_) => { _callBack?.Invoke(false); }));
    }"
eyF6E8TH,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 💰,ssss50w,GetText,Friday 26th of April 2024 06:32:48 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
  
Working as of:
26 April 2024"
rP15wFiW,Untitled,Learning000001,C#,Friday 26th of April 2024 06:32:37 AM CDT,"using System;
using System.Collections;
using UnityEngine;
using UnityEngine.Networking;

public class WebRequests : MonoBehaviour
{
    public const string JSON_EXTENSION = "".json"";

    public static WebRequests Instance;
    private string userIdToken;

    private void Awake()
    {
        if (Instance==null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    public void SetUserToken(string _token)
    {
        userIdToken = _token;
    }

    public void Get(string _uri, Action<string> _onSuccess=null, Action<string> _onError=null)
    {
        StartCoroutine(GetRoutine(_uri, _onSuccess, _onError));
    }

    public void Post(string _uri, string _jsonData, Action<string> _onSuccess=null, Action<string> _onError=null, bool _includeHeader = true)
    {
        StartCoroutine(PostRoutine(_uri, _jsonData, _onSuccess, _onError, _includeHeader));
    }

    public void Put(string _uri, string _jsonData, Action<string> _onSuccess=null, Action<string> _onError=null)
    {
        StartCoroutine(PutRoutine(_uri, _jsonData, _onSuccess, _onError));
    }

    public void Patch(string _uri, string _jsonData, Action<string> _onSuccess=null, Action<string> _onError=null)
    {
        StartCoroutine(PatchRoutine(_uri, _jsonData, _onSuccess, _onError));
    }

    public void Delete(string _uri, Action<string> _onSuccess=null, Action<string> _onError=null)
    {
        StartCoroutine(DeleteRoutine(_uri, _onSuccess, _onError));
    }

    private IEnumerator GetRoutine(string _uri, Action<string> _onSuccess, Action<string> _onError)
    {
        if (!string.IsNullOrEmpty(userIdToken))
        {
            _uri = $""{_uri}?auth={userIdToken}"";
        }

        using UnityWebRequest _webRequest = UnityWebRequest.Get(_uri);
        yield return _webRequest.SendWebRequest();

        if (_webRequest.result == UnityWebRequest.Result.Success)
        {
            _onSuccess?.Invoke(_webRequest.downloadHandler.text);
        }
        else
        {
            Debug.Log(_webRequest.error);
            _onError?.Invoke(_webRequest.error);
        }

        _webRequest.Dispose();
    }

    private IEnumerator PostRoutine(string _uri, string _jsonData, Action<string> _onSuccess, Action<string> _onError, bool _includeHeader = true)
    {
        if (!string.IsNullOrEmpty(userIdToken))
        {
            if (_includeHeader)
            {
                _uri = $""{_uri}?auth={userIdToken}"";
            }
        }

        using UnityWebRequest _webRequest = UnityWebRequest.Post(_uri, _jsonData);
        byte[] _jsonToSend = new System.Text.UTF8Encoding().GetBytes(_jsonData);
        _webRequest.uploadHandler = new UploadHandlerRaw(_jsonToSend);
        _webRequest.downloadHandler = new DownloadHandlerBuffer();
        _webRequest.SetRequestHeader(""Content-Type"", ""application/json"");

        yield return _webRequest.SendWebRequest();

        if (_webRequest.result == UnityWebRequest.Result.Success)
        {
            _onSuccess?.Invoke(_webRequest.downloadHandler.text);
        }
        else
        {
            Debug.Log(_uri);
            Debug.Log(_webRequest.error);
            _onError?.Invoke(_webRequest.error);
        }

        _webRequest.uploadHandler.Dispose();
        _webRequest.downloadHandler.Dispose();
        _webRequest.Dispose();
    }

    private IEnumerator PutRoutine(string _uri, string _jsonData, Action<string> _onSuccess, Action<string> _onError)
    {
        if (!string.IsNullOrEmpty(userIdToken))
        {
            _uri = $""{_uri}?auth={userIdToken}"";
        }

        using UnityWebRequest _webRequest = UnityWebRequest.Put(_uri, _jsonData);
        byte[] _jsonToSend = new System.Text.UTF8Encoding().GetBytes(_jsonData);
        _webRequest.uploadHandler = new UploadHandlerRaw(_jsonToSend);
        _webRequest.downloadHandler = new DownloadHandlerBuffer();

        yield return _webRequest.SendWebRequest();

        if (_webRequest.result == UnityWebRequest.Result.Success)
        {
            _onSuccess?.Invoke(_webRequest.downloadHandler.text);
        }
        else
        {
            Debug.Log(_webRequest.error);
            _onError?.Invoke(_webRequest.error);
        }

        _webRequest.uploadHandler.Dispose();
        _webRequest.downloadHandler.Dispose();
        _webRequest.Dispose();
    }

    private IEnumerator PatchRoutine(string _uri, string _jsonData, Action<string> _onSuccess, Action<string> _onError)
    {
        if (!string.IsNullOrEmpty(userIdToken))
        {
            _uri = $""{_uri}?auth={userIdToken}"";
        }

        using UnityWebRequest _webRequest = new UnityWebRequest(_uri, ""PATCH"");
        byte[] _jsonToSend = new System.Text.UTF8Encoding().GetBytes(_jsonData);
        _webRequest.uploadHandler = new UploadHandlerRaw(_jsonToSend);
        _webRequest.downloadHandler = new DownloadHandlerBuffer();


        yield return _webRequest.SendWebRequest();

        if (_webRequest.result == UnityWebRequest.Result.Success)
        {
            _onSuccess?.Invoke(_webRequest.downloadHandler.text);
        }
        else
        {
            Debug.Log(_webRequest.uri);
            Debug.Log(_jsonData);
            _onError?.Invoke(_webRequest.error);
        }

        _webRequest.uploadHandler.Dispose();
        _webRequest.downloadHandler.Dispose();
        _webRequest.Dispose();
    }
    
    private IEnumerator DeleteRoutine(string _uri, Action<string> _onSuccess, Action<string> _onError)
    {
        if (!string.IsNullOrEmpty(userIdToken))
        {
            _uri = $""{_uri}?auth={userIdToken}"";
        }

        using UnityWebRequest _webRequest = UnityWebRequest.Delete(_uri);
        _webRequest.downloadHandler = new DownloadHandlerBuffer();

        yield return _webRequest.SendWebRequest();

        if (_webRequest.result == UnityWebRequest.Result.Success)
        {
            _onSuccess?.Invoke(_webRequest.downloadHandler.text);
        }
        else
        {
            _onError?.Invoke(_webRequest.error);
        }

        _webRequest.downloadHandler.Dispose();
        _webRequest.Dispose();
    }
}
"
mCDQnRY5,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Friday 26th of April 2024 06:06:09 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_847870.pdf

Working as of:
26 April 2024"
amdiBUtp,data908,TestGuy1,JSON,Friday 26th of April 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'e49820f579ec9a80e517e147c698b3338a7180f84bba8b0dc237134e40f2fdcc2605a2e03e8da8f1e7598aeb4e3af905aa429805efaea4e6816dade6befac4b54c20d25d8c17540b5e9d702691497eeab4e2f4ba22b73363651583e03cd598eb540bd51143110052f3fdc386367ef5aac9c3709539a4a68f73f9bd3de8241626',
  otherdata: [
    'f61a4fb36c2da244c01bda216ab20d33',
    '01c1677c552fa64b8814aa3f74077e4b',
    '5512b9ab033e9519483c1536d20869f5',
    'acdc3d3159050cf450835ede9204e7ce',
    '0dee9085f0028eb5c550dbe34964c270',
    'dac11f46ebdbc39dc6a3b185e7342943',
    '3fe73686c146eae262b9e84d7dead3f6',
    '0abe7f83ca032302dc049afc23e0922a'
  ]
}"
6usv7m90,Untitled,Hero_Cheats,PHP,Friday 26th of April 2024 05:56:46 AM CDT,LabbaikYaAqsa
njyhbPs7,Azure Blob Storage/S3,firedigger,C#,Friday 26th of April 2024 05:22:27 AM CDT,"Upload to Blob storage
```
BlobClient versionBlobClient = GetBlobContainerClient().GetBlobClient(itemVersionBlobName);
versionBlobClient.Upload(itemBlobStream);
```

Upload to S3
```
await transferUtility.UploadAsync(new TransferUtilityUploadRequest
{
    BucketName = bucketName,
    Key = blobName,
    InputStream = stream
});
```

Download from Blob storage
```
itemWrapper.DownloadInfo = new Core.DownloadInfo
{
    Content = await S3StorageLibrary.Utilities.GetContent(transferUtility, bucketName, itemContentBlobName, Key),
    ContentLength = await S3StorageLibrary.Utilities.GetContentLength(S3Client, bucketName, itemContentBlobName, Key)
};
```
						
Download from S3						
```
string itemContentBlobName = Utilities.GetDriveItemContentBlobName(itemBlobName);
Azure.Storage.Blobs.BlobClient itemBlobContentClient =
    GetBlobContainerClient().GetBlobClient(itemContentBlobName);
if (itemBlobContentClient.Exists())
{
    var contentBlobDownload = itemBlobContentClient.Download().Value;
    itemWrapper.DownloadInfo = new Core.DownloadInfo
    {
        Content = contentBlobDownload.Content,
        ContentLength = contentBlobDownload.ContentLength
    };
}
```
Content is an object of type Stream"
X6dpw86L,platformer's main.cpp as of 2024-04-26,Kitomas,C++,Friday 26th of April 2024 04:58:29 AM CDT,"#include <globals.hpp>
#include <player.hpp>
#include <tile.hpp>

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

using namespace kit;



Player player;

#define SPCENTER_X 254
#define SPCENTER_Y 177
#define SPRANGE  250.0f //in pixels
#define SPMAXVOL 0.125f
#define SPMAXPAN 1.0f

f32 distanceToSpeaker(){
  shape::fpoint diff(player.pos.x - SPCENTER_X,  player.pos.y - SPCENTER_Y);
  return sqrtf(diff.x*diff.x + diff.y*diff.y);

}

f32 volumeFromDistance(f32 distance){
  f32 rangeInverse = SPRANGE - CLAMP(distance, 0, SPRANGE);
  f32 volume       = (rangeInverse/SPRANGE) * SPMAXVOL;
  return volume;

}

f32 panFromXDifference(shape::fpoint a, shape::fpoint b){
  f32 range = CLAMP(a.x-b.x, -SPRANGE, SPRANGE);
  f32 pan   = (range/SPRANGE) * SPMAXPAN;
  return pan;

}



#define T(_id_and_tileset) (u8)(_id_and_tileset) //lol
Tile pattern_mg[] = {
     //0       1       2       3       4       5       6       7       8       9       10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29      30      31
/* 0*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/* 1*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/* 2*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/* 3*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/* 4*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x01),T(0x01),T(0x01),T(0x01),T(0x01),T(0x01),T(0x01),T(0x01),T(0x01),
/* 5*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),
/* 6*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),
/* 7*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),
/* 8*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),
/* 9*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x21),T(0x00),T(0x22),T(0x00),T(0x00),T(0x00),T(0x00),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),T(0x02),
/*10*/ T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x05),T(0x01),T(0x01),T(0x01),T(0x01),T(0x01),T(0x01),T(0x01),T(0x01),T(0x01),
/*11*/ T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),T(0x04),
/*12*/ T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),
/*13*/ T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),
/*14*/ T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),
/*15*/ T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),
/*16*/ T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),
/*17*/ T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),T(0x14),
};

Tile pattern_fg[] = {
     //0       1       2       3       4       5       6       7       8       9       10      11      12      13      14      15      16      17      18      19      20      21      22      23      24      25      26      27      28      29      30      31
/* 0*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/* 1*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/* 2*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/* 3*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/* 4*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/* 5*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x06),T(0x00),T(0x00),T(0x06),T(0x00),T(0x00),T(0x06),T(0x00),T(0x00),
/* 6*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x16),T(0x00),T(0x00),T(0x16),T(0x00),T(0x00),T(0x16),T(0x00),T(0x00),
/* 7*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x16),T(0x00),T(0x00),T(0x16),T(0x00),T(0x00),T(0x16),T(0x00),T(0x00),
/* 8*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x16),T(0x00),T(0x00),T(0x16),T(0x00),T(0x00),T(0x16),T(0x00),T(0x00),
/* 9*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x21),T(0x00),T(0x00),T(0x22),T(0x00),T(0x26),T(0x00),T(0x00),T(0x26),T(0x00),T(0x00),T(0x26),T(0x00),T(0x00),
/*10*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/*11*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/*12*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/*13*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/*14*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/*15*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/*16*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
/*17*/ T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),T(0x00),
};
#undef T





bool fullscreen = false;


bool handleEvents(){
  bool run = true;


  WindowEvent e;
  while(pollWindowEvent(&e))
  switch(e.type){
    case WINEVENT_WIN_CLOSE: _we_w_close: run = false; break;

    case WINEVENT_KEY_DOWN: {
      if(e.key.repeat) break;
      switch(e.key.vkey){
        case VKEY_ESCAPE    : goto _we_w_close;
        case VKEY_F11       : gl_win->setFullscreen(fullscreen^=1); break;
        case VKEY_BSLASH    : player.confused^=1; break;
        case VKEY_FSLASH    : player.enforceMaxVel^=1; break;
        case VKEY_ENTER     : {
          player.pos = shape::fpoint(CANVSIZ_X/2,CANVSIZ_Y/2-80);
          player.vel = shape::fpoint(0,0);
        }break;
        case VKEY_LEFT : player.acc.x += -PLAYER_SPEED; break;
        case VKEY_RIGHT: player.acc.x +=  PLAYER_SPEED; break;
        case VKEY_UP   : {
          if(player.ticksInAir < 2  &&  !player.jumped){
            player.jumped = true;
            player.vel.y = -PLAYER_JUMP_STRENGTH;
            player.sfx_jumping->play();
          }
        } break;
      }
    } break;

    case WINEVENT_KEY_UP: {
      switch(e.key.vkey){
        case VKEY_LEFT : player.acc.x -= -PLAYER_SPEED; break;
        case VKEY_RIGHT: player.acc.x -=  PLAYER_SPEED; break;
        case VKEY_UP   : {
          if(player.jumped && player.vel.y<0)
            player.vel.y *= PLAYER_JUMP_CANCEL;
        } break;
      }
    } break;

  }


  return run;
}




#define DBG_TXT(_l, _fmt, ...) gl_textf(1,1+(_l)*9, _fmt, __VA_ARGS__)

int gameMain(int argc, char** argv){
  gl_snd->musicLoadModule(""dat/music/sine_half.mod"");
  gl_snd->musicSetUseNearest(false);
  gl_snd->musicSetVolumeForced(0.0f, 0.0f);
  gl_snd->musicSetCheckLoop(false); //this forces the module to loop
  gl_snd->musicStart();

  Scene scene;
  scene.bmp_bg = new Bitmap(""dat/img/0_bg_gradient_black-cyan.qoi"", gl_win);
  scene.pat_mg = pattern_mg;
  scene.pat_fg = pattern_fg;
  scene.stretch_bg = false;

  player.sfx_footstep = new SoundEffect(""dat/sfx/player_footstep.qoa"", .02f, 0.1);
  player.sfx_landing  = new SoundEffect(""dat/sfx/player_landing.qoa"",  .08f, 0.2);
  player.sfx_jumping  = new SoundEffect(""dat/sfx/player_jumping.qoa"",  .05f);

  Bitmap siren(""dat/img/siren0.qoi"", gl_win);


  player.pos.x = CANVSIZ_X/2;
  player.pos.y = CANVSIZ_Y/2 - 80;

  bool run = true;
  f64 timeStart = time::getUptime();
  while(run){
    gl_frameTimer->setTimer(0.25/60);


    if(!handleEvents()) break;


    player.vel.y += GRAVITY;
    player.update();


    if(     player.pos.x <          -PLAYER_HALF) player.pos.x = CANVSIZ_X+PLAYER_HALF;
    else if(player.pos.x > CANVSIZ_X+PLAYER_HALF) player.pos.x = -PLAYER_HALF;

    if(player.pos.y < -PLAYER_HALF){
      player.pos.y = CANVSIZ_Y/2;
      player.vel.y = fabsf(player.vel.y);

    } else if(player.pos.y > (CANVSIZ_Y/2 + 24 - PLAYER_HALF)){
      if(player.ticksInAir > 3) player.sfx_landing->play();
      player.pos.y  = CANVSIZ_Y/2 + 24 - PLAYER_HALF;
      player.vel.y  = 0.0f;
      player.ticksInAir = 0;
      player.jumped = false;

    } else if(player.pos.y < CANVSIZ_Y/2){
      ++player.ticksInAir;

    }


    //play footstep sound when feet touch ground
    if(player.queryFootstep()) player.sfx_footstep->play();


    //gl_win->clear(0x7f7f7f); //redundant, since drawBg fills the canvas anyway
    scene.drawBg();
    scene.drawTiles(false);
    gl_text->print(9*0, 9*17, ""(supposed to look like a siren)\n                            v"");
    siren.blit(24*9, 24*7, 1.0f, 0xff00ff);
    player.blit(PLAYER_SCALE, PLAYER_SCALE);
    scene.drawTiles(true);


    f32 speakerDistance = distanceToSpeaker(); //relative to player's center
    f32 newVolume = volumeFromDistance(speakerDistance);
    f32 newPan = panFromXDifference(player.pos, {SPCENTER_X, SPCENTER_Y});
    gl_snd->musicSetVolume(newVolume, newVolume);
    gl_snd->musicSetPan(newPan);


    DBG_TXT( 0, ""controls: arrow keys, f11, enter, '\\', '/' (esc to quit)"");
    DBG_TXT( 2, "".pos           = {%6.2f, %6.2f}"", player.pos.x, player.pos.y);
    DBG_TXT( 3, "".vel           = {%6.2f, %6.2f}"", player.vel.x, player.vel.y);
    DBG_TXT( 4, "".acc           = {%6.2f, %6.2f}"", player.acc.x, player.acc.y);
    DBG_TXT( 5, "".ticksInAir    = %u"", player.ticksInAir);
    DBG_TXT( 6, "".runningState  = %6.4f"", player.runningState);
    DBG_TXT( 7, "".facingRight   = %s"", (player.facingRight)?""true"":""false"");
    DBG_TXT( 8, "".enforceMaxVel = %s"", (player.enforceMaxVel)?""true"":""false"");
    DBG_TXT( 9, "".confused      = %s"", (player.confused)?""true"":""false"");
    DBG_TXT(10, "".jumped        = %s"", (player.jumped)?""true"":""false"");
    DBG_TXT(12, ""tick latency   = %.2fms"", (time::getUptime()-timeStart)*1000);
    DBG_TXT(13, ""speaker dist.  = %.1fpx"", speakerDistance);
    DBG_TXT(14, ""speaker volume = %.1f%%"", newVolume*100);
    DBG_TXT(15, ""speaker pan    =%4.0f%%"", newPan*100);

    gl_win->present();
    timeStart = time::getUptime();


    gl_frameTimer->wait();
  }



  NULLDELETE(player.sfx_footstep);
  NULLDELETE(player.sfx_jumping );
  NULLDELETE(player.sfx_landing );

  delete scene.bmp_bg;

  return 0;
}
"
UFEwsbV3,globals.hpp as of 2024-04-26,Kitomas,C++,Friday 26th of April 2024 04:57:30 AM CDT,"#ifndef _GLOBALS_HPP
#define _GLOBALS_HPP

#include <kit/all.hpp>
#include <kit/xmp_sfx.hpp>

/* notes:
always use a mutex when accessing soundengine, as it's used by >1 thread
player should be able to step up on a half tile as if they were stairs
scene states should be able to change tiles
text boxes should appear when close to certain objects
have thread that manages music and sfx
add in cutscene image slideshow things
be able to change scene after cutscene
use RLE when storing scene data
tweak ""visited_before"" to be a number that counts down deaths, instead of a bool
if ambient track fails to start, (while locked) stop a track to make space for it (use forced stop!)
have player animation frame override
*/


#define _getnumallocs printf(""line %i: %llu\n"",__LINE__,memory::getNumAllocations()-2);


#define WINDOW_TITLE ""platformer prototype""
#define CANVSIZ_X 768 //32 tiles wide (assuming tiles are 24x24)
#define CANVSIZ_Y 432 //18 tiles tall
#define TILESIZ_X 32
#define TILESIZ_Y 18
#define lengthof(_array, _type) (sizeof(_array)/sizeof(_type))
#define memset0( _array       ) kit::memory::set((_array), 0, sizeof(_array))
#define memset0s(_array, _size) kit::memory::set((_array), 0, (_size)       )
#define NULLDELETE(_ptr_to_thing) { delete _ptr_to_thing;  _ptr_to_thing = nullptr; }

//#define GRAVITY (0.0175f)
#define GRAVITY (0.0195f)
#define PLAYER_JUMP_STRENGTH (2.0f)
#define PLAYER_JUMP_CANCEL (0.33f) //multiplier of vel.y when canceling a jump while ascending
#define PLAYER_SPEED (0.020f)
#define PLAYER_SCALE (2.0f)
#define PLAYER_HALF ( (s32)((8*PLAYER_SCALE)/2) ) //half of the character's size, in pixels
#define PLAYER_NEUTRAL (0.1f) //'what +/- range should be considered neutral for vel/acc'
#define PLAYER_AIR_FRICTION (0.5f) //multiplier for acc.x when in mid-air
#define PLAYER_GND_FRICTION (1.0f) //multiplier of PLAYER_SPEED for on-ground deceleration
#define PLAYER_RUN_MUL (0.075f) //vel.x's multiplier when adding to runningState





//(gl_ as in [gl]obal, not open[gl])
extern kit::TimerSimple* gl_frameTimer;
extern kit::SoundEngine* gl_snd;
extern kit::MutexSimple* gl_snd_lock;
extern kit::Window*      gl_win;
extern kit::BitmapFont*  gl_text;
extern kit::FStr*        gl_fstr;
#define gl_textf(_x, _y, _fmt,           ...) \
    gl_text->print((_x), (_y), gl_fstr->fmt(_fmt, __VA_ARGS__), 0)
#define gl_textfs(_x, _y, _fmt, _maxLen, ...) \
    gl_text->print((_x), (_y), gl_fstr->fmt(_fmt, __VA_ARGS__), (_maxLen))
extern kit::Bitmap* gl_spritesheetPlayer;


struct Scene;

#define             gl_scenes_len 1
#define             gl_tilesets_len 1
extern kit::u16     gl_sceneCurrent; //id for currently active scene
extern Scene        gl_scenes[gl_scenes_len];
extern kit::Bitmap* gl_tilesets[gl_tilesets_len];
extern kit::Bitmap* gl_tileset_missing;





kit::f64 frand();
kit::f32 frandf();

kit::f64 frandRange(kit::f64 start, kit::f64 maxDeviation);





struct SoundEffect { //40B (not including the size of the AudioData class)
  kit::AudioData* sfx = nullptr;
  kit::f32       volL = 1.0f;
  kit::f32       volR = 1.0f;
  kit::f64  speedBase = 1.0 ;
  kit::f64 speedRange = 0.0 ;
  kit::f32        pan = 0.0f;
  kit::u32 _padding32;

  SoundEffect(const char* filePath, kit::f32 volume = 1.0f,
                                    kit::f64 _speedRange = 0.0)
  {
    sfx = new kit::AudioData(filePath, gl_snd);
    volL = volume,  volR = volume;
    speedRange = _speedRange;
  }

  ~SoundEffect(){ delete sfx; }

  kit::s32 play(){
    if(sfx != nullptr){
      gl_snd_lock->lock(true);

      if(speedRange < 0.0) speedRange = -speedRange;
      if(!speedRange) return gl_snd->sfxPlay(sfx, volL, volR, 1.0, pan);
      else return gl_snd->sfxPlay(sfx, volL, volR, frandRange(speedBase,speedRange), pan);

      gl_snd_lock->lock(false);

    } else {
      return -1;
    }
  }
};




#endif /* _GLOBALS_HPP */
"
sbHPMY6f,Test Insert,Rivoryx,C++,Friday 26th of April 2024 04:57:17 AM CDT,"    typedef int type_t;
    constexpr size_t SIZE = 4u;
    constexpr type_t VALUE = 5;
    constexpr std::initializer_list<type_t> LIST = { 1, 2, 3, 4 };
    constexpr size_t LIST_SIZE = LIST.size();    

void TestInsert() {
        {
            SimpleVector<type_t> v;

            assert(v.Insert(v.end(), -10) == v.end() - 1);
            assert(v.GetSize() == 1u);
            assert(v.GetCapacity() >= v.GetSize());
            assert(v[0] == -10);

            assert(v.Insert(v.end(), -11) == v.end() - 1);
            assert(v.GetSize() == 2u);
            assert(v.GetCapacity() >= v.GetSize());
            assert(v[0] == -10);
            assert(v[1] == -11);

            const size_t old_capacity = v.GetCapacity();
            v.Clear();
            assert(v.Insert(v.end(), -1) == v.end() - 1);
            assert(v[0] == -1);
            assert(v.GetSize() == 1u);
            assert(v.GetCapacity() == old_capacity);
        }
        {
            SimpleVector<type_t> v(SIZE);

            assert(v.Insert(v.end(), -10) == v.end() - 1);
            assert(v.GetSize() == SIZE + 1u);
            assert(v.GetCapacity() >= v.GetSize());
            assert(std::all_of(v.begin(), v.end() - 1u, [](const type_t& item) {
                return item == type_t{};
                }));
            assert(v[SIZE] == -10);

            assert(v.Insert(v.end(), -11) == v.end() - 1);
            assert(v.GetSize() == SIZE + 2u);
            assert(v.GetCapacity() >= v.GetSize());
            assert(std::all_of(v.begin(), v.end() - 2u, [](const type_t& item) {
                return item == type_t{};
                }));
            assert(v[SIZE] == -10);
            assert(v[SIZE + 1u] == -11);

            const size_t old_capacity = v.GetCapacity();
            v.Clear();
            assert(v.Insert(v.end(), -1) == v.end() - 1);
            assert(v[0] == -1);
            assert(v.GetSize() == 1u);
            assert(v.GetCapacity() == old_capacity);
        }
        {
            SimpleVector<type_t> v(SIZE, VALUE);

            assert(v.Insert(v.end(), -10) == v.end() - 1);
            assert(v.GetSize() == SIZE + 1u);
            assert(v.GetCapacity() >= v.GetSize());
            assert(std::all_of(v.begin(), v.end() - 1u, [](const type_t& item) {
                return item == VALUE;
                }));
            assert(v[SIZE] == -10);

            assert(v.Insert(v.end(), -11) == v.end() - 1);
            assert(v.GetSize() == SIZE + 2u);
            assert(v.GetCapacity() >= v.GetSize());
            assert(std::all_of(v.begin(), v.end() - 2u, [](const type_t& item) {
                return item == VALUE;
                }));
            assert(v[SIZE] == -10);
            assert(v[SIZE + 1u] == -11);

            const size_t old_capacity = v.GetCapacity();
            v.Clear();
            assert(v.Insert(v.end(), -1) == v.end() - 1);
            assert(v[0] == -1);
            assert(v.GetSize() == 1u);
            assert(v.GetCapacity() == old_capacity);
        }
        {
            SimpleVector<type_t> v(LIST);

            assert(v.Insert(v.end(), -10) == v.end() - 1);
            assert(v.GetSize() == LIST_SIZE + 1u);
            assert(v.GetCapacity() >= v.GetSize());
            auto iter = LIST.begin();
            assert(std::all_of(v.begin(), v.end() - 1u, [&iter](const type_t& item) {
                return item == *iter++;
                }));
            assert(v[LIST_SIZE] == -10);

            assert(v.Insert(v.end(), -11) == v.end() - 1);
            assert(v.GetSize() == LIST_SIZE + 2u);
            assert(v.GetCapacity() >= v.GetSize());
            iter = LIST.begin();
            assert(std::all_of(v.begin(), v.end() - 2u, [&iter](const type_t& item) {
                return item == *iter++;
                }));
            assert(v[LIST_SIZE] == -10);
            assert(v[LIST_SIZE + 1u] == -11);

            const size_t old_capacity = v.GetCapacity();
            v.Clear();
            assert(v.Insert(v.end(), -1) == v.end() - 1);
            assert(v[0] == -1);
            assert(v.GetSize() == 1u);
            assert(v.GetCapacity() == old_capacity);
        }
        {
            SimpleVector<type_t> v;
            for (size_t i = 15; i > 0; i--) {
                v.Insert(v.begin(), static_cast<type_t>(i));
            }
            for (size_t i = 0; i < 15; i++) {
                assert(v[i] == static_cast<type_t>(i + 1));
            }
        }
    }
"
dCXkR2W8,globals.cpp as of 2024-04-26,Kitomas,C++,Friday 26th of April 2024 04:56:40 AM CDT,"#include <globals.hpp>
#include <tile.hpp>

#include <stdio.h>
#include <stdlib.h>

using namespace kit;





TimerSimple* gl_frameTimer        = nullptr;
SoundEngine* gl_snd               = nullptr;
MutexSimple* gl_snd_lock          = nullptr;
Window*      gl_win               = nullptr;
BitmapFont*  gl_text              = nullptr;
FStr*        gl_fstr              = nullptr;
Bitmap*      gl_spritesheetPlayer = nullptr;


u16     gl_sceneCurrent = 0;
Scene   gl_scenes[gl_scenes_len];
Bitmap* gl_tilesets[gl_tilesets_len];
Bitmap* gl_tileset_missing = nullptr;




void handleInit(){
  gl_frameTimer = new TimerSimple;
  gl_frameTimer->setTimer(0.101);


  srand((u32)time::getTicks());


  gl_snd = new SoundEngine(128);
  gl_snd->streamStart();

  gl_snd_lock = new MutexSimple;



  gl_win = new Window(WINDOW_TITLE, CANVSIZ_X*2, CANVSIZ_Y*2,
                      WINFLAG_RESIZABLE | WINFLAG_HIDDEN,
                      WINPOS_CENTERED, WINPOS_CENTERED,
                      CANVSIZ_X, CANVSIZ_Y, false);

  gl_text = new BitmapFont(""dat/img/_font8x8.qoi"", gl_win);

  gl_fstr = new FStr(4096);

  //gl_textf(0, 0, ""loading"");
  //gl_win->present();
  //gl_win->setVisibility(true);



  gl_spritesheetPlayer = new Bitmap(""dat/img/spritesheet_player.qoi"", gl_win);



  //memset just in case, though i'm pretty sure this redundant
  memset0(gl_tilesets);

  char* fstr_ptr = gl_fstr->ptr();

  for(u32 i=0; i<gl_tilesets_len; ++i){
    gl_fstr->fmt(""dat/tilesets/tileset_%u.qoi"", i);

    if(!fileio::fileExists(fstr_ptr))
      throw (const char*)gl_fstr->fmt(""\""dat/tilesets/tileset_%u.qoi\"" doesn't exist"",i);

    gl_tilesets[i] = new Bitmap(fstr_ptr, gl_win);

  }



  gl_tileset_missing = new Bitmap(""dat/tilesets/tileset_missing.qoi"", gl_win);



  gl_frameTimer->wait(2000);

  gl_win->setVisibility(true);
  gl_win->setFocus(true);
}





void handleQuit(){
  if(gl_frameTimer) gl_frameTimer->setTimer(0.05);



  if(gl_snd){
    gl_snd->musicStop();
    gl_snd->sfxStopAll();
  }

  delete gl_snd_lock;



  delete gl_fstr;
  delete gl_text;
  delete gl_win;


  delete gl_spritesheetPlayer;


  for(u32 i=0; i<gl_tilesets_len; ++i) delete gl_tilesets[i];


  delete gl_tileset_missing;


  if(gl_frameTimer) gl_frameTimer->wait(2000);

  delete gl_frameTimer;
}





extern int gameMain(int argc, char** argv);



int main(int argc, char** argv){ try {
  handleInit();

  int result = gameMain(argc, argv);

  handleQuit();

  printf(""# OF CONTROLLED ALLOCATIONS = %llu\n"",memory::getNumAllocations()-6);

  return result;


} catch(const char* errorText){
#ifdef _DEBUG
  printf(""FATAL EXCEPTION OCCURRED!: \""%s\""\n"", errorText);
#else
  showMessageBox(errorText, ""FATAL EXCEPTION OCCURRED! COMPLAIN TO THE DEV! (lol)"", MSGBOX_ICN_ERROR);
#endif /* _DEBUG */

  return -1;


}}





f64 frand(){
  u32 value = (rand()<<15) | rand();
  return (f64)value/(KIT_U32_MAX>>2);
}



f32 frandf(){
  u32 value = (rand()<<15) | rand();
  return (f32)value/(KIT_U32_MAX>>2);
}




f64 frandRange(f64 start, f64 maxDeviation){
  return start + (frand()*2.0-1.0)*maxDeviation;
}
"
FjpVgLgz,tile.hpp as of 2024-04-26,Kitomas,C++,Friday 26th of April 2024 04:56:05 AM CDT,"#ifndef _TILE_HPP
#define _TILE_HPP

#include <globals.hpp>





union Tile {
  kit::u16 value;

  struct {
    kit::u16        id : 7; //id of what tile to use

    kit::u16   tileset : 1; //whether to use tileset a or b

    kit::u16 collide_a : 1; //'collide with top-left 12x12 section of tile?'
    kit::u16 collide_b : 1; //'collide with top-right 12x12 section of tile?'
    kit::u16 collide_c : 1; //'collide with bottom-left 12x12 section of tile?'
    kit::u16 collide_d : 1; //'collide with bottom-right 12x12 section of tile?'

    kit::u16      pass : 1; //allow passing through tile
    kit::u16  platform : 1; //allow falling through top side of tile conditionally

    kit::u16   _unused : 2;
  };

  Tile(               ) : value(             0) {}
  Tile(kit::u8 _lobyte) : value(0x0f00|_lobyte) {} //assumes full collision
  Tile(kit::u16 _value) : value(        _value) {}
  Tile(kit::s32 _value) : value(0xffff& _value) {}
};





struct Object;
struct Scene;

typedef void (*Object_TickCallback)(Object* obj_a, Scene* scene);

struct Object { //32B
  kit::u16                  type;
  kit::u16                    _0;
  kit::s16                     x;
  kit::s16                     y;
  Object_TickCallback funcUpdate;
  kit::u64                    _1;
};





//uncompressed scene data
struct Scene { //64B
  //pat is memory::alloc'd, bmp uses ""new"" instead
  kit::Bitmap* bmp_bg = nullptr; //bitmap for background layer
  Tile*        pat_mg = nullptr; //pattern for midground (collision) layer
  Tile*        pat_fg = nullptr; //pattern for foreground layer (skipped if nullptr)
  //(length of pat_<mg/fg> is [TILESIZ_X*TILESIZ_Y])

  //these two are memory::alloc'd too
  Object*  objs          = nullptr; //pointer to associated object array,
  Object*  objs_original = nullptr;  //and whatever its original state was
  kit::u16 objs_len      = 0;

  //associated edges can be manipulated by game states
  kit::u16   edge_n; //scene id for north edge
  kit::u16   edge_s; //scene id for south edge
  kit::u16   edge_w; //scene id for west edge
  kit::u16   edge_e; //scene id for east edge
  kit::u16 scene_id; //scene id for scene itself

  kit::u16     music = 0; //music id;  0 for no change, -1 (65535) to stop
  kit::u16 ambient_a = 0; //ambient track id a;  0 for no change, -1 to stop
  kit::u16 ambient_b = 0; //ambient track id b;  0 for no change, -1 to stop

  kit::u16     tileset_a = 0; //1st associated tileset
  kit::u16     tileset_b = 0; //2nd associated tileset
  kit::u8 visited_before = 0; //used to reset object (including npc) properties between deaths
  bool        stretch_bg = true; //'stretch the bg over the entire screen?' (repeats otherwise)


  void drawBg();

  void drawTiles(bool drawForeground = false); //draws midground if false
};





#endif /* _TILE_HPP */
"
v0LNmJz8,tile.cpp as of 2024-04-26,Kitomas,C++,Friday 26th of April 2024 04:55:29 AM CDT,"#include <tile.hpp>

using namespace kit;





void Scene::drawBg(){
  if(bmp_bg == nullptr) return;
  shape::point sizeBmp = bmp_bg->getSize();
  if(sizeBmp.x<1 || sizeBmp.y<1) return;


  if(stretch_bg){ //stretch entire background to entire canvas
    bmp_bg->blitRect();


  } else { //otherwise, repeat background bitmap in a tile pattern
    shape::rect dst; //destination rectangle
    dst.w = sizeBmp.x;
    dst.h = sizeBmp.y;

    shape::point sizeCanvas = gl_win->getCanvasSize();

    //increase x, then y until the entire canvas is drawn to
    for(dst.y = 0;  dst.y < sizeCanvas.y;  dst.y += dst.h)
    for(dst.x = 0;  dst.x < sizeCanvas.x;  dst.x += dst.w)
    {
      bmp_bg->blitRect(&dst, nullptr); //whole bitmap is used when src = nullptr
    }


  }

}





//note: if slowdown gets to a point where it's noticable,
 //implement a scene pattern cache
void Scene::drawTiles(bool drawForeground){
  Tile*              tiles = pat_mg;
  if(drawForeground) tiles = pat_fg;
  if(tiles == nullptr) return;

  if(tileset_a >= gl_tilesets_len  ||  tileset_b >= gl_tilesets_len)
    throw ""tileset index is out of bounds"";

  Bitmap* tileset[2];
  tileset[0] = gl_tilesets[tileset_a];
  tileset[1] = gl_tilesets[tileset_b];

  shape::rect src(0, 0, 24, 24); //determines section of tileset to copy from
  shape::rect dst(0, 0, 24, 24); //determines section of canvas to paste to

  shape::point sizeCanvas = gl_win->getCanvasSize();



  u32 tileindex = 0; //for accessing each tile independent of the 2 for loops

  //increase x, then y until the entire canvas is drawn to
  for(dst.y = 0;  dst.y < sizeCanvas.y;  dst.y += dst.h)
  for(dst.x = 0;  dst.x < sizeCanvas.x;  dst.x += dst.w)
  {
    Tile tile = tiles[tileindex++];
    if(!tile.id) continue; //tile 0 is always transparent, so it can be skipped
    src.x = ( tile.id    &0b1111) * src.w; //bits 0-3 are the tileset atlas' x
    src.y = ((tile.id>>4)& 0b111) * src.h; //bits 4-6 are the tileset atlas' y


    Bitmap* _tileset = tileset[tile.tileset]; //(tile.tileset is 1 bit in size)
    if(_tileset != nullptr){
      _tileset->blitRect(&dst, &src, 0xff00ff); //transparency color is magenta

    } else { //tileset doesn't exist; draw 'missing tileset' tile
      gl_tileset_missing->blitRect(&dst, nullptr); //transparency is not used

    }

  }

}
"
MrFKh8Cu,inventoryReader,Thujed,Lua,Friday 26th of April 2024 04:50:45 AM CDT,"--local hive = peripheral.find(""productivebees:advanced_spruce_beehive"")
for k, v in pairs(peripheral.getNames()) do
    print (k, v)
end
local hive = peripheral.wrap(""left"")
print(peripheral.getType(hive))
print(hive.size())
for slot, item in pairs(hive.list()) do
    print(slot, item)
end"
ZPgYHDzA,basis code school,MR_Rednax,Arduino,Friday 26th of April 2024 04:29:13 AM CDT,"#include <IRremote.h>
#include <ir_Lego_PF_BitStreamEncoder.h>
#include <LCD-I2C.h>
#include <AccelStepper.h>
#include <Wire.h>


#define blue_button 3
#define black_button 2
#define setpper_1 4
#define setpper_2 5
#define setpper_3 6
#define setpper_4 7
#define FULLSTEP 4
#define ir_input 9

IRrecv IrReceiver(ir_input);
LCD_I2C lcd(0x27, 16, 2);

AccelStepper stepper(FULLSTEP, 7, 5, 6, 4);

void setup(){
  //#======pin=setup=========#//
      pinMode(blue_button, INPUT);
      pinMode(black_button, INPUT);
      
  //#======LCD=setup=========#//
      lcd.begin();
      lcd.clear();    
      lcd.display();
      lcd.setCursor(0, 0);
      lcd.print(""starting"");
      lcd.backlight();

  //#======serial_begin======#//
      Serial.begin(9600);

  //#=======stepper==========#//
      stepper.setMaxSpeed(600);
      stepper.setSpeed(600); 
      stepper.setAcceleration(100.0);
      stepper.moveTo(500); 
      
  //#=====start=secuence=====#//
      delay(2000);
      lcd.clear();
      lcd.print(""done"");
      delay(700);
      lcd.clear();    
}

void loop(){
  if (stepper.distanceToGo() == 0)
      stepper.moveTo(-stepper.currentPosition());
  stepper.run();
}
"
zKa4XMua,hiveReader,Thujed,Lua,Friday 26th of April 2024 04:04:18 AM CDT,"    hive = peripheral.find(""blockReader"")
    -- print(hive.getBlockData()[""BeeList""])
    -- if (hive.getBlockData()[""BeeList""] ~= nil) then
    --     print(#hive.getBlockData()[""BeeList""][""Inhabitants""])
    --     bees = hive.getBlockData()[""BeeList""][""Inhabitants""]
    --     for k,v in pairs(bees) do
    --         print(k, v)
    --         for key, value in pairs(v) do
    --             print(key, value)
    --         end
    --         print(""--------------------------"")
    --         os.sleep(1)
    --     end

    --     for k, v in pairs (bees[1][""EntityData""][""FlowerPos""]) do 
    --         print(k, v)
    --         os.sleep(2)
    --     end
    -- else
    --     print(""There is no bees"")   
    -- end

    for k, v in pairs(hive.getBlockData()[""upgrades""][""Items""][1]) do   
        print(k, v)
        if (k == ""BeeList"") then
            for key, value in pairs(v) do   
                --print(key, value)
            end
        end
    end"
hWVgyybz,madness,tinn01,GetText,Friday 26th of April 2024 03:55:17 AM CDT,"S-1-5-21-1193083378-3124615022-3272316965-1002 - me
S-1-5-21-3376228327-3393953409-3088659502-1001 - wrth
S-1-5-21-312790058-2238280833-2623520544-1001 - monzy
S-1-5-21-2421265964-1654774801-359309628-1001 - maxie
S-1-5-21-4001088422-330832238-1786670410-1001 - nard
S-1-5-21-1426779621-2862502586-1152655714-1001 - drey
S-1-5-21-3725339251-518458708-1479864239-1001 - buri
S-1-5-21-951398591-3625519827-2362604967-1001 - shut
S-1-5-21-534232737-3628800841-1678487762-1001 - CIAO
S-1-5-21-3663575357-1787837651-2264640666-500 - alex
S-1-5-21-3689844833-4199936568-3196556006-1002 - abstract
S-1-5-21-1599232949-4051201699-3906511858-1001 - tej"
g0RYQ6c1,[SvodkaDZ] Config Excample Json File,BSNIKYT,JSON,Friday 26th of April 2024 03:49:14 AM CDT,"{
    ""TOKEN"": {
        ""M"": {
            ""MECH"": """",
            ""MECH2"": """"
        },
        ""T"": {
            ""TELEGRAM"": """"
        },
        ""OTHER"": {
            ""TELEGRAM_OSNOWA"": """",
            ""TELEGRAM_TWINK"": """"
        }
    },
    ""CONFIG"": {
        ""root"": {
            ""CMDAccess"": true,
            ""root_passord"": ""root""
        },
        ""debug"": true,
        ""download_all_images"": true,
        ""AutoMechAuth"": {
            ""enable"": true,
            ""from_config"": true,
            ""data"": [
                {
                    ""login"": ""LOGIN"",
                    ""password"": ""PASSWORD""
                },
                {
                    ""login"": ""HEZ"",
                    ""password"": ""LOLO""
                }
            ]
        },
        ""logs_discussion"": 0,
        ""callback_discord_url"": ""https://discord.com/api/webhooks/[REPLACE_HERE]""
    },
    ""ACCESS"": {
        ""ROLES"": {
            ""CREATOR"": [
                ""config"",
                ""token"",
                ""logs_discussion"",
                ""work_discussion"",
                ""access_users"",
                ""access_user_prems"",
                ""module_sending"",
                ""module_weather"",
                ""shutdown"",
                ""logs"",
                ""cmd""
            ],
            ""ADMINISTRATOR"": [
                ""logs_discussion"",
                ""work_discussion"",
                ""module_sending"",
                ""module_weather"",
                ""shutdown"",
                ""logs"",
                ""cmd""
            ],
            ""EDITOR"": [
                ""module_sending"",
                ""module_weather""
            ]
        },
        ""USERS"": {
            ""111111111"": ""CREATOR"",
            ""111111112"": ""CREATOR"",
            ""222222222"": ""ADMINISTRATOR"",
            ""333333333"": ""EDITOR""
        }
    },
    ""MODULES"": {
        ""GPIO"": {
            ""enable"": true
        },
        ""SENDING"": {
            ""enable"": true,
            ""discussions"": [
                -1002000000000
            ],
            ""sending_post"": {
                ""morning"": ""07:00:00"",
                ""evening"": ""18:40:00""
            }
        },
        ""WEATHER"": {
            ""weather_language"": ""RU"",
            ""city"": ""Moscow""
        },
        ""MECH"": {
            ""enable"": true
        },
        ""TASK"": {
            ""enable"": true,
            ""task"": [
                {
                    ""text"": ""\u041f\u043e\u0441\u043b\u0430\u0442\u044c \u043d\u0438\u043b\u0430"",
                    ""status"": ""\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e""
                }
            ]
        }
    }
}
"
XKT6KLPb,Untitled,Tarusov,C#,Friday 26th of April 2024 02:45:41 AM CDT,"int Method(IInterface obj) {
  return obj.Calc();
}

public struct S1 : IInterface {…}
public struct S2 : IInterface {…}

void Update() {
  Method(new S1());
  …
  Method(new S2());
}

interface IInterface {
  int Calc();
}"
b51Hjzd5,immediately invoked lambda expression,Alex_St,C++,Friday 26th of April 2024 02:41:12 AM CDT,"#include <algorithm>
#include <iostream>
#include <functional>
#include <map>
#include <unordered_map>
#include <numeric>
#include <set>
#include <string>
#include <vector>


using namespace std;


struct Person {
    string name;
    int age, income;
    bool is_male;
};


struct PreCalculatedInfo
{

    std::vector<int> age_set;
    std::vector<int> wealth_set;

    std::vector<int> wealth_precalculated;
    std::vector<int> age_precalculated;

    std::unordered_map<std::string_view, int> women_names;
    std::unordered_map<std::string_view, int> men_names;

    
    std::string popular_man_name;
    std::string popular_woman_name;
};


const PreCalculatedInfo Precalculate(std::vector<Person> people)
{
    PreCalculatedInfo result;

    int popular_woman_name_counter = 0;
    int popular_man_name_counter = 0;

    //запоминаем самых популярных людей мужского и женского пола
    for(const auto& it : people)
    {
        result.wealth_set.push_back(it.income);
        result.age_set.push_back(it.age);

        // (it.is_male) ? result.men_names[it.name]++ : result.women_names[it.name]++;
        if(it.is_male)
        {
            result.men_names[it.name]++;

            if(result.men_names[it.name] > popular_man_name_counter)
            {
                popular_man_name_counter++;
                result.popular_man_name = it.name;
            }
        }
        else
        {
            result.women_names[it.name]++;

            if(result.women_names[it.name] > popular_woman_name_counter)
            {
                popular_woman_name_counter++;
                result.popular_woman_name = it.name;
            }
        }
    }
    
    //упорядочиваем векторы по возрастанию для age и убыванию для wealth
    std::sort(result.age_set.begin(), result.age_set.end());
    std::sort(result.wealth_set.begin(), result.wealth_set.end(), [](const int& lhs, const int& rhs){return lhs >= rhs;});

    //вычисляем значения богатства для запроса WEALTH
    result.wealth_precalculated.reserve(result.wealth_set.size()+1);
    result.wealth_precalculated[0] = 0;
    size_t counter = 1;
    for(const auto& it : result.wealth_set)
    {
        result.wealth_precalculated[counter] = result.wealth_precalculated[counter-1] + it;
        counter++;
    }
    
    //вычисляем значения совершеннолетних для запроса AGE
    size_t max_age = result.age_set[result.age_set.size()-1];
    result.age_precalculated.reserve(max_age+1);
    for(size_t i = 0; i <= max_age; i++ )
    {
        auto adult_begin = lower_bound(result.age_set.begin(), result.age_set.end(), i);
        result.age_precalculated[i] = distance(adult_begin, result.age_set.end());
    }

    return result;
}


const vector<Person> ReadPeople(istream& input) {
    int count;
    input >> count;

    vector<Person> result(count);
    for (Person& p : result) {
        char gender;
        input >> p.name >> p.age >> p.income >> gender;
        p.is_male = gender == 'M';
    }

    return result;
}

int main() 
{
    
    //вызов через функцию
    //const PreCalculatedInfo pre_calc_info = Precalculate(ReadPeople(cin));
    
    const vector<Person> people = ReadPeople(cin);
    //вызов через лямбду
    const PreCalculatedInfo pre_calc_info = std::invoke([&people]{
            PreCalculatedInfo result;

            int popular_woman_name_counter = 0;
            int popular_man_name_counter = 0;

            //запоминаем самых популярных людей мужского и женского пола
            for(const auto& it : people)
            {
                result.wealth_set.push_back(it.income);
                result.age_set.push_back(it.age);

                // (it.is_male) ? result.men_names[it.name]++ : result.women_names[it.name]++;
                if(it.is_male)
                {
                    result.men_names[it.name]++;

                    if(result.men_names[it.name] > popular_man_name_counter)
                    {
                        popular_man_name_counter++;
                        result.popular_man_name = it.name;
                    }
                }
                else
                {
                    result.women_names[it.name]++;

                    if(result.women_names[it.name] > popular_woman_name_counter)
                    {
                        popular_woman_name_counter++;
                        result.popular_woman_name = it.name;
                    }
                }
            }
            
            //упорядочиваем векторы по возрастанию для age и убыванию для wealth
            std::sort(result.age_set.begin(), result.age_set.end());
            std::sort(result.wealth_set.begin(), result.wealth_set.end(), [](const int& lhs, const int& rhs){return lhs >= rhs;});

            //вычисляем значения богатства для запроса WEALTH
            result.wealth_precalculated.reserve(result.wealth_set.size()+1);
            result.wealth_precalculated[0] = 0;
            size_t counter = 1;
            for(const auto& it : result.wealth_set)
            {
                result.wealth_precalculated[counter] = result.wealth_precalculated[counter-1] + it;
                counter++;
            }
            
            //вычисляем значения совершеннолетних для запроса AGE
            size_t max_age = result.age_set[result.age_set.size()-1];
            result.age_precalculated.reserve(max_age+1);
            for(size_t i = 0; i <= max_age; i++ )
            {
                auto adult_begin = lower_bound(result.age_set.begin(), result.age_set.end(), i);
                result.age_precalculated[i] = distance(adult_begin, result.age_set.end());
            }

            return result;

    });
    
    for (string command; cin >> command;) 
    {
        if (command == ""AGE""s) 
        {
            int adult_age;
            cin >> adult_age;

            //auto adult_begin = lower_bound(pre_calc_info.age_set.begin(), pre_calc_info.age_set.end(), adult_age);

            cout << ""There are ""s << pre_calc_info.age_precalculated[adult_age] << "" adult people for maturity age ""s
                 << adult_age << '\n';
        } 
        else if (command == ""WEALTHY""s) 
        {
            int count;
            cin >> count;
            cout << ""Top-""s << count << "" people have total income ""s << pre_calc_info.wealth_precalculated[count] << '\n';
        } 
        else if (command == ""POPULAR_NAME""s) 
        {
            char gender;
            cin >> gender;

            if(gender == 'M' && pre_calc_info.men_names.size() == 0)
            {
                cout << ""No people of gender ""s << gender << '\n';
            }
            else if (gender == 'M' && pre_calc_info.men_names.size() > 0)
            {
                cout << ""Most popular name among people of gender ""s << gender << "" is ""s << pre_calc_info.popular_man_name << '\n';
            }
            else if(gender == 'W' && pre_calc_info.women_names.size() == 0)
            {
                cout << ""No people of gender ""s << gender << '\n';
            }
            else if(gender == 'W' && pre_calc_info.women_names.size() > 0)
            {
                cout << ""Most popular name among people of gender ""s << gender << "" is ""s << pre_calc_info.popular_woman_name << '\n';
            }
          
        }
    }
}"
ndFnMa9r,Untitled,blackalegator,JavaScript,Friday 26th of April 2024 01:22:17 AM CDT,"<iframe src=""https://tadawi.medinexus.net/searchbar""
        name=""iframe-medinexus""
        width=""100%""
        id=""iframe-medinexus""
        height=""0px""
        style=""transition: height 0.3s ease;""
        frameborder=""0""></iframe>

<script>
    const iframe = document.getElementById(""iframe-medinexus"");
    window.addEventListener('message', function (event) {
        const data = event.data;
        if (data.frameHeight) {
            iframe.style.height = data.frameHeight + 'px';
        }

    }, false);
</script>"
14gr8j9j,nrzZoom Storyline Object Zoom Call,nrzmalik,JavaScript,Friday 26th of April 2024 12:34:17 AM CDT,"// Comment: Replace ""Object_accessibility_name"" with the accessibility name of your object
nrzZoom(""Object_accessibility_name"");"
f6Y2xaWA,nrzZoom Storyline Object Zoom Library,nrzmalik,JavaScript,Friday 26th of April 2024 12:32:48 AM CDT,"function appendScripts() {
  const head = document.head;
  const scriptUrls = [
    'https://cdnjs.cloudflare.com/ajax/libs/jquery/4.0.0-beta/jquery.js',
    'https://cdn.jsdelivr.net/gh/nrzmalik/noraiz/nrzZoom.js'
  ];

  const loadScript = (url) => {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = url;
      script.onload = resolve;
      script.onerror = reject;
      head.appendChild(script);
    });
  };

  const loadAllScripts = async () => {
    for (const url of scriptUrls) {
      await loadScript(url);
    }
  };

  loadAllScripts();
}

appendScripts();
"
YRWV93Fp,ntp_install.lua,Mlntcandy,Lua,Friday 26th of April 2024 12:29:48 AM CDT,"-- self install script for ntp
local url = ""https://raw.githubusercontent.com/netaskmc/ntp-cc/main/ntp.lua""
local request = http.get(url)
local contents = request.readAll()
local ntp = loadstring(contents)
ntp(""install"", ""ntp"")"
yAqyDY13,Untitled,Hreesang,Pawn,Thursday 25th of April 2024 10:59:20 PM CDT,"main() {
    yield 1;
    wait_ms(3000);

    new List:strings1 = list_new();
    new List:strings2 = list_new();

    print(""Initializing..."");
    for (new i = 0; i < 5; i++) {
        new String:string1 = str_acquire(str_format(""[strings1] String %i"", i));
        list_add(strings1, string1);

        new String:string2 = str_acquire(str_format(""[strings2] String %i"", i));
        list_add_str_s(strings2, string2);
    }
    
    print(""Initialized! Getting the first index of both lists..."");
    
    new String:strings1At0 = String:list_get(strings1, 0);
    print_s(str_format(""strings1 at index 0: %S"", strings1At0));

    new String:strings2At0 = list_get_str_s(strings2, 0);
    print_s(str_format(""strings2 at index 0: %S"", strings2At0));

    print(""Done! Deleting strings..."");
    str_delete(strings1At0);
    str_delete(strings2At0);

    print(""Ok! Running asynchronous..."");
    yield 1;
    wait_ms(1000);

    print(""Checking strings status..."");
    strings1At0 = String:list_get(strings1, 0);
    print_s(str_format(""strings1 at index 0 is %s"", str_valid(strings1At0) ? ""VALID"" : ""INVALID""));

    strings2At0 = list_get_str_s(strings2, 0);
    print_s(str_format(""strings2 at index 0 is %s"", str_valid(strings2At0) ? ""VALID"" : ""INVALID""));
}

/* OUTPUT

[2024-04-26T10:51:17+0700] [Info] Initializing...
[2024-04-26T10:51:17+0700] [Info] Initialized! Getting the first index of both lists...
[2024-04-26T10:51:17+0700] [Info] strings1 at index 0: [strings1] String 0
[2024-04-26T10:51:17+0700] [Info] strings2 at index 0: [strings2] String 0
[2024-04-26T10:51:17+0700] [Info] Done! Deleting strings...
[2024-04-26T10:51:17+0700] [Info] Ok! Running asynchronous...
[2024-04-26T10:51:18+0700] [Info] Checking strings status...
[2024-04-26T10:51:18+0700] [Info] strings1 at index 0 is INVALID
[2024-04-26T10:51:18+0700] [Info] strings2 at index 0 is VALID

*/"
97QGbVqK,Morph mod Rich Fiend,Dsaqwed123,LScript,Thursday 25th of April 2024 10:09:56 PM CDT,"_G.Morph = ""Rich Fiend""
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=14) then if (Enum<=6) then if (Enum<=2) then if (Enum<=0) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif (Enum>1) then Stk[Inst[2]]=Env[Inst[3]];else Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=4) then if (Enum==3) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>5) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];end elseif (Enum<=10) then if (Enum<=8) then if (Enum>7) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==15) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else VIP=Inst[3];end elseif (Enum==9) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=12) then if (Enum>11) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif (Enum>13) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);end elseif (Enum<=22) then if (Enum<=18) then if (Enum<=16) then if (Enum==15) then Stk[Inst[2]]=Stk[Inst[3]];else local A=Inst[2];local Cls={};for Idx=1, #Lupvals do local List=Lupvals[Idx];for Idz=0, #List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end end end end elseif (Enum==17) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=20) then if (Enum==19) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]] * Stk[Inst[4]] ;end elseif (Enum==21) then Stk[Inst[2]]=Inst[3]~=0 ;else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=26) then if (Enum<=24) then if (Enum==23) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum>25) then local A=Inst[2];Stk[A](Stk[A + 1 ]);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=28) then if (Enum>27) then Stk[Inst[2]]=Inst[3];else do return;end end elseif (Enum==29) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=20) then if (Enum<=9) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=2) then local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);elseif (Enum==3) then Stk[Inst[2]]={};elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=6) then if (Enum==5) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=7) then if (Inst[2]<=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>8) then Upvalues[Inst[3]]=Stk[Inst[2]];else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=14) then if (Enum<=11) then if (Enum==10) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]=Inst[3]~=0 ;end elseif (Enum<=12) then if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>13) then Stk[Inst[2]]= #Stk[Inst[3]];else local A=Inst[2];Stk[A](Stk[A + 1 ]);end elseif (Enum<=17) then if (Enum<=15) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>16) then local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=18) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif (Enum>19) then Stk[Inst[2]]=Upvalues[Inst[3]];else local B=Stk[Inst[4]];if  not B then VIP=VIP + 1 ;else Stk[Inst[2]]=B;VIP=Inst[3];end end elseif (Enum<=31) then if (Enum<=25) then if (Enum<=22) then if (Enum==21) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else do return;end end elseif (Enum<=23) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Enum>24) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else Stk[Inst[2]]=Inst[3];end elseif (Enum<=28) then if (Enum<=26) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum==27) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==10) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=29) then local A=Inst[2];local T=Stk[A];local B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end elseif (Enum==30) then local A=Inst[2];do return Unpack(Stk,A,A + Inst[3] );end else VIP=Inst[3];end elseif (Enum<=36) then if (Enum<=33) then if (Enum>32) then do return Stk[Inst[2]];end else Stk[Inst[2]]();end elseif (Enum<=34) then Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];elseif (Enum>35) then local A=Inst[2];local T=Stk[A];for Idx=A + 1 ,Inst[3] do Insert(T,Stk[Idx]);end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=39) then if (Enum<=37) then local A=Inst[2];Stk[A]=Stk[A]();elseif (Enum>38) then local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));else local A=Inst[2];local Results={Stk[A](Stk[A + 1 ])};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=40) then Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Enum>41) then Stk[Inst[2]]=Env[Inst[3]];else for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);"
N9hbr4G4,Morph mod Delinquents,Dsaqwed123,LScript,Thursday 25th of April 2024 10:06:56 PM CDT,"_G.Morph = ""Delinquents""
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=14) then if (Enum<=6) then if (Enum<=2) then if (Enum<=0) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif (Enum>1) then Stk[Inst[2]]=Env[Inst[3]];else Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=4) then if (Enum==3) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>5) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];end elseif (Enum<=10) then if (Enum<=8) then if (Enum>7) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==15) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else VIP=Inst[3];end elseif (Enum==9) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=12) then if (Enum>11) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif (Enum>13) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);end elseif (Enum<=22) then if (Enum<=18) then if (Enum<=16) then if (Enum==15) then Stk[Inst[2]]=Stk[Inst[3]];else local A=Inst[2];local Cls={};for Idx=1, #Lupvals do local List=Lupvals[Idx];for Idz=0, #List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end end end end elseif (Enum==17) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=20) then if (Enum==19) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]] * Stk[Inst[4]] ;end elseif (Enum==21) then Stk[Inst[2]]=Inst[3]~=0 ;else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=26) then if (Enum<=24) then if (Enum==23) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum>25) then local A=Inst[2];Stk[A](Stk[A + 1 ]);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=28) then if (Enum>27) then Stk[Inst[2]]=Inst[3];else do return;end end elseif (Enum==29) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=20) then if (Enum<=9) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=2) then local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);elseif (Enum==3) then Stk[Inst[2]]={};elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=6) then if (Enum==5) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=7) then if (Inst[2]<=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>8) then Upvalues[Inst[3]]=Stk[Inst[2]];else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=14) then if (Enum<=11) then if (Enum==10) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]=Inst[3]~=0 ;end elseif (Enum<=12) then if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>13) then Stk[Inst[2]]= #Stk[Inst[3]];else local A=Inst[2];Stk[A](Stk[A + 1 ]);end elseif (Enum<=17) then if (Enum<=15) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>16) then local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=18) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif (Enum>19) then Stk[Inst[2]]=Upvalues[Inst[3]];else local B=Stk[Inst[4]];if  not B then VIP=VIP + 1 ;else Stk[Inst[2]]=B;VIP=Inst[3];end end elseif (Enum<=31) then if (Enum<=25) then if (Enum<=22) then if (Enum==21) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else do return;end end elseif (Enum<=23) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Enum>24) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else Stk[Inst[2]]=Inst[3];end elseif (Enum<=28) then if (Enum<=26) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum==27) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==10) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=29) then local A=Inst[2];local T=Stk[A];local B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end elseif (Enum==30) then local A=Inst[2];do return Unpack(Stk,A,A + Inst[3] );end else VIP=Inst[3];end elseif (Enum<=36) then if (Enum<=33) then if (Enum>32) then do return Stk[Inst[2]];end else Stk[Inst[2]]();end elseif (Enum<=34) then Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];elseif (Enum>35) then local A=Inst[2];local T=Stk[A];for Idx=A + 1 ,Inst[3] do Insert(T,Stk[Idx]);end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=39) then if (Enum<=37) then local A=Inst[2];Stk[A]=Stk[A]();elseif (Enum>38) then local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));else local A=Inst[2];local Results={Stk[A](Stk[A + 1 ])};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=40) then Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Enum>41) then Stk[Inst[2]]=Env[Inst[3]];else for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);"
73EWWm2A,Morph mod Jeff Attack,Dsaqwed123,LScript,Thursday 25th of April 2024 10:03:26 PM CDT,"_G.Morph = ""Jeff Attack""
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=14) then if (Enum<=6) then if (Enum<=2) then if (Enum<=0) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif (Enum>1) then Stk[Inst[2]]=Env[Inst[3]];else Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=4) then if (Enum==3) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>5) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];end elseif (Enum<=10) then if (Enum<=8) then if (Enum>7) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==15) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else VIP=Inst[3];end elseif (Enum==9) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=12) then if (Enum>11) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif (Enum>13) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);end elseif (Enum<=22) then if (Enum<=18) then if (Enum<=16) then if (Enum==15) then Stk[Inst[2]]=Stk[Inst[3]];else local A=Inst[2];local Cls={};for Idx=1, #Lupvals do local List=Lupvals[Idx];for Idz=0, #List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end end end end elseif (Enum==17) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=20) then if (Enum==19) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]] * Stk[Inst[4]] ;end elseif (Enum==21) then Stk[Inst[2]]=Inst[3]~=0 ;else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=26) then if (Enum<=24) then if (Enum==23) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum>25) then local A=Inst[2];Stk[A](Stk[A + 1 ]);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=28) then if (Enum>27) then Stk[Inst[2]]=Inst[3];else do return;end end elseif (Enum==29) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=20) then if (Enum<=9) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=2) then local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);elseif (Enum==3) then Stk[Inst[2]]={};elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=6) then if (Enum==5) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=7) then if (Inst[2]<=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>8) then Upvalues[Inst[3]]=Stk[Inst[2]];else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=14) then if (Enum<=11) then if (Enum==10) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]=Inst[3]~=0 ;end elseif (Enum<=12) then if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>13) then Stk[Inst[2]]= #Stk[Inst[3]];else local A=Inst[2];Stk[A](Stk[A + 1 ]);end elseif (Enum<=17) then if (Enum<=15) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>16) then local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=18) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif (Enum>19) then Stk[Inst[2]]=Upvalues[Inst[3]];else local B=Stk[Inst[4]];if  not B then VIP=VIP + 1 ;else Stk[Inst[2]]=B;VIP=Inst[3];end end elseif (Enum<=31) then if (Enum<=25) then if (Enum<=22) then if (Enum==21) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else do return;end end elseif (Enum<=23) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Enum>24) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else Stk[Inst[2]]=Inst[3];end elseif (Enum<=28) then if (Enum<=26) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum==27) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==10) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=29) then local A=Inst[2];local T=Stk[A];local B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end elseif (Enum==30) then local A=Inst[2];do return Unpack(Stk,A,A + Inst[3] );end else VIP=Inst[3];end elseif (Enum<=36) then if (Enum<=33) then if (Enum>32) then do return Stk[Inst[2]];end else Stk[Inst[2]]();end elseif (Enum<=34) then Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];elseif (Enum>35) then local A=Inst[2];local T=Stk[A];for Idx=A + 1 ,Inst[3] do Insert(T,Stk[Idx]);end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=39) then if (Enum<=37) then local A=Inst[2];Stk[A]=Stk[A]();elseif (Enum>38) then local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));else local A=Inst[2];local Results={Stk[A](Stk[A + 1 ])};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=40) then Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Enum>41) then Stk[Inst[2]]=Env[Inst[3]];else for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);"
c5t6NkxR,Morph mod Mysterious Mercs,Dsaqwed123,LScript,Thursday 25th of April 2024 09:51:33 PM CDT,"_G.Morph = ""Mysterious Mercs""
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=14) then if (Enum<=6) then if (Enum<=2) then if (Enum<=0) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif (Enum>1) then Stk[Inst[2]]=Env[Inst[3]];else Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=4) then if (Enum==3) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>5) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];end elseif (Enum<=10) then if (Enum<=8) then if (Enum>7) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==15) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else VIP=Inst[3];end elseif (Enum==9) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=12) then if (Enum>11) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif (Enum>13) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);end elseif (Enum<=22) then if (Enum<=18) then if (Enum<=16) then if (Enum==15) then Stk[Inst[2]]=Stk[Inst[3]];else local A=Inst[2];local Cls={};for Idx=1, #Lupvals do local List=Lupvals[Idx];for Idz=0, #List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end end end end elseif (Enum==17) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=20) then if (Enum==19) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]] * Stk[Inst[4]] ;end elseif (Enum==21) then Stk[Inst[2]]=Inst[3]~=0 ;else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=26) then if (Enum<=24) then if (Enum==23) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum>25) then local A=Inst[2];Stk[A](Stk[A + 1 ]);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=28) then if (Enum>27) then Stk[Inst[2]]=Inst[3];else do return;end end elseif (Enum==29) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=20) then if (Enum<=9) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=2) then local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);elseif (Enum==3) then Stk[Inst[2]]={};elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=6) then if (Enum==5) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=7) then if (Inst[2]<=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>8) then Upvalues[Inst[3]]=Stk[Inst[2]];else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=14) then if (Enum<=11) then if (Enum==10) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]=Inst[3]~=0 ;end elseif (Enum<=12) then if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>13) then Stk[Inst[2]]= #Stk[Inst[3]];else local A=Inst[2];Stk[A](Stk[A + 1 ]);end elseif (Enum<=17) then if (Enum<=15) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>16) then local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=18) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif (Enum>19) then Stk[Inst[2]]=Upvalues[Inst[3]];else local B=Stk[Inst[4]];if  not B then VIP=VIP + 1 ;else Stk[Inst[2]]=B;VIP=Inst[3];end end elseif (Enum<=31) then if (Enum<=25) then if (Enum<=22) then if (Enum==21) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else do return;end end elseif (Enum<=23) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Enum>24) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else Stk[Inst[2]]=Inst[3];end elseif (Enum<=28) then if (Enum<=26) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum==27) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==10) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=29) then local A=Inst[2];local T=Stk[A];local B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end elseif (Enum==30) then local A=Inst[2];do return Unpack(Stk,A,A + Inst[3] );end else VIP=Inst[3];end elseif (Enum<=36) then if (Enum<=33) then if (Enum>32) then do return Stk[Inst[2]];end else Stk[Inst[2]]();end elseif (Enum<=34) then Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];elseif (Enum>35) then local A=Inst[2];local T=Stk[A];for Idx=A + 1 ,Inst[3] do Insert(T,Stk[Idx]);end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=39) then if (Enum<=37) then local A=Inst[2];Stk[A]=Stk[A]();elseif (Enum>38) then local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));else local A=Inst[2];local Results={Stk[A](Stk[A + 1 ])};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=40) then Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Enum>41) then Stk[Inst[2]]=Env[Inst[3]];else for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);"
JFUXGHjp,util.lua,ambiguities,Lua,Thursday 25th of April 2024 09:40:51 PM CDT,"local function turn(direction, count)
  if direction ~= ""left"" and direction ~= ""right"" then
    error(""Invalid direction: "" .. direction)
  end

  local count = count or 1
  local success, msg = nil, nil

  for i = 1, count do
    if direction == ""left"" then
      success, msg = turtle.turnLeft()
    else
      success, msg = turtle.turnRight()
    end
    if not success then
      error(msg)
    end
  end
end

local function checkFull()
  for i = 1, 16 do
    if turtle.getItemSpace(i) > 0 then
      return false
    end
  end
  return true
end

local function dig(direction, returnFacing)
  while checkFull() do
    print(""Inventory full..."")
    local event, key, is_held = os.pullEvent(""key"")
  end

  if returnFacing == nil then
    returnFacing = true
  end

  local success, msg = nil, nil

  if direction == ""up"" then
    if turtle.detectUp() then
      success, msg = turtle.digUp()
    end
  elseif direction == ""down"" then
    if turtle.detectDown() then
      success, msg = turtle.digDown()
    end
  elseif direction == ""left"" then
    turtle.turnLeft()
    if turtle.detect() then
      success, msg = turtle.dig()
    end
    if returnFacing then
      turtle.turnRight()
    end
  elseif direction == ""right"" then
    turtle.turnRight()
    if turtle.detect() then
      success, msg = turtle.dig()
    end
    if returnFacing then
      turtle.turnLeft()
    end
  elseif turtle.detect() then
    success, msg = turtle.dig()
  end

  if not success and not msg == ""Nothing to dig here"" then
    error(msg)
  end
end

local function go(direction)
  local success, msg = nil, nil

  if direction == ""up"" then
    dig(""up"")
    success, msg = turtle.up()
  elseif direction == ""down"" then
    dig(""down"")
    success, msg = turtle.down()
  elseif direction == ""forward"" then
    dig()
    success, msg = turtle.forward()
  elseif direction == ""back"" then
    turn(""right"", 2)
    dig()
    success, msg = turtle.forward()
    turn(""right"", 2)
  elseif direction == ""left"" then
    turn(""left"")
    dig()
    success, msg = turtle.forward()
    turn(""right"")
  elseif direction == ""right"" then
    turn(""right"")
    dig()
    success, msg = turtle.forward()
    turn(""left"")
  else
    error(""Invalid direction: "" .. direction)
  end

  if not success then
    error(msg)
  end
end

return {
  turn = turn,
  dig = dig,
  go = go
}"
XLqjb5ED,3x4.lua,ambiguities,Lua,Thursday 25th of April 2024 09:38:59 PM CDT,"local util = require(""util"")

local distance = tonumber(arg[1]) or 10

if distance < 1 then
  error(""Invalid distance: "" .. distance)
else
  print(""Distance: "" .. distance)
end

for i = 1, distance do
  util.go(""up"")
  util.go(""up"")
  util.go(""up"")
  
  util.dig(""right"")
  util.dig(""left"", false)
  util.go(""down"")
  
  util.dig()
  util.turn(""right"", 2)
  util.dig()
  util.go(""down"")

  util.dig()
  util.turn(""left"", 2)
  util.dig()
  util.go(""down"")

  util.dig()
  util.turn(""right"")
  util.dig(""right"")
  
  if i < distance then
    util.go(""forward"")
  end
end
"
Z3yQYeEB,Morph mod Hue,Dsaqwed123,LScript,Thursday 25th of April 2024 09:21:15 PM CDT,"_G.Morph = ""Hue""
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=14) then if (Enum<=6) then if (Enum<=2) then if (Enum<=0) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif (Enum>1) then Stk[Inst[2]]=Env[Inst[3]];else Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=4) then if (Enum==3) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>5) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];end elseif (Enum<=10) then if (Enum<=8) then if (Enum>7) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==15) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else VIP=Inst[3];end elseif (Enum==9) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=12) then if (Enum>11) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif (Enum>13) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);end elseif (Enum<=22) then if (Enum<=18) then if (Enum<=16) then if (Enum==15) then Stk[Inst[2]]=Stk[Inst[3]];else local A=Inst[2];local Cls={};for Idx=1, #Lupvals do local List=Lupvals[Idx];for Idz=0, #List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end end end end elseif (Enum==17) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=20) then if (Enum==19) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]] * Stk[Inst[4]] ;end elseif (Enum==21) then Stk[Inst[2]]=Inst[3]~=0 ;else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=26) then if (Enum<=24) then if (Enum==23) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum>25) then local A=Inst[2];Stk[A](Stk[A + 1 ]);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=28) then if (Enum>27) then Stk[Inst[2]]=Inst[3];else do return;end end elseif (Enum==29) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCall(""LOL!"",GetFEnv(),...);
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=20) then if (Enum<=9) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=2) then local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);elseif (Enum==3) then Stk[Inst[2]]={};elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=6) then if (Enum==5) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=7) then if (Inst[2]<=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>8) then Upvalues[Inst[3]]=Stk[Inst[2]];else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=14) then if (Enum<=11) then if (Enum==10) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]=Inst[3]~=0 ;end elseif (Enum<=12) then if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>13) then Stk[Inst[2]]= #Stk[Inst[3]];else local A=Inst[2];Stk[A](Stk[A + 1 ]);end elseif (Enum<=17) then if (Enum<=15) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>16) then local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=18) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif (Enum>19) then Stk[Inst[2]]=Upvalues[Inst[3]];else local B=Stk[Inst[4]];if  not B then VIP=VIP + 1 ;else Stk[Inst[2]]=B;VIP=Inst[3];end end elseif (Enum<=31) then if (Enum<=25) then if (Enum<=22) then if (Enum==21) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else do return;end end elseif (Enum<=23) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Enum>24) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else Stk[Inst[2]]=Inst[3];end elseif (Enum<=28) then if (Enum<=26) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum==27) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==10) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=29) then local A=Inst[2];local T=Stk[A];local B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end elseif (Enum==30) then local A=Inst[2];do return Unpack(Stk,A,A + Inst[3] );end else VIP=Inst[3];end elseif (Enum<=36) then if (Enum<=33) then if (Enum>32) then do return Stk[Inst[2]];end else Stk[Inst[2]]();end elseif (Enum<=34) then Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];elseif (Enum>35) then local A=Inst[2];local T=Stk[A];for Idx=A + 1 ,Inst[3] do Insert(T,Stk[Idx]);end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=39) then if (Enum<=37) then local A=Inst[2];Stk[A]=Stk[A]();elseif (Enum>38) then local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));else local A=Inst[2];local Results={Stk[A](Stk[A + 1 ])};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=40) then Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Enum>41) then Stk[Inst[2]]=Env[Inst[3]];else for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);"
SSbEwfCH,Morph mod mikey,Dsaqwed123,LScript,Thursday 25th of April 2024 09:18:17 PM CDT,"_G.Morph = ""Mikey""
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=14) then if (Enum<=6) then if (Enum<=2) then if (Enum<=0) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif (Enum>1) then Stk[Inst[2]]=Env[Inst[3]];else Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=4) then if (Enum==3) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>5) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];end elseif (Enum<=10) then if (Enum<=8) then if (Enum>7) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==15) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else VIP=Inst[3];end elseif (Enum==9) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=12) then if (Enum>11) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif (Enum>13) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);end elseif (Enum<=22) then if (Enum<=18) then if (Enum<=16) then if (Enum==15) then Stk[Inst[2]]=Stk[Inst[3]];else local A=Inst[2];local Cls={};for Idx=1, #Lupvals do local List=Lupvals[Idx];for Idz=0, #List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end end end end elseif (Enum==17) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=20) then if (Enum==19) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]] * Stk[Inst[4]] ;end elseif (Enum==21) then Stk[Inst[2]]=Inst[3]~=0 ;else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=26) then if (Enum<=24) then if (Enum==23) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum>25) then local A=Inst[2];Stk[A](Stk[A + 1 ]);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=28) then if (Enum>27) then Stk[Inst[2]]=Inst[3];else do return;end end elseif (Enum==29) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=20) then if (Enum<=9) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=2) then local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);elseif (Enum==3) then Stk[Inst[2]]={};elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=6) then if (Enum==5) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=7) then if (Inst[2]<=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>8) then Upvalues[Inst[3]]=Stk[Inst[2]];else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=14) then if (Enum<=11) then if (Enum==10) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]=Inst[3]~=0 ;end elseif (Enum<=12) then if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>13) then Stk[Inst[2]]= #Stk[Inst[3]];else local A=Inst[2];Stk[A](Stk[A + 1 ]);end elseif (Enum<=17) then if (Enum<=15) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>16) then local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=18) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif (Enum>19) then Stk[Inst[2]]=Upvalues[Inst[3]];else local B=Stk[Inst[4]];if  not B then VIP=VIP + 1 ;else Stk[Inst[2]]=B;VIP=Inst[3];end end elseif (Enum<=31) then if (Enum<=25) then if (Enum<=22) then if (Enum==21) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else do return;end end elseif (Enum<=23) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Enum>24) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else Stk[Inst[2]]=Inst[3];end elseif (Enum<=28) then if (Enum<=26) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum==27) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==10) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=29) then local A=Inst[2];local T=Stk[A];local B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end elseif (Enum==30) then local A=Inst[2];do return Unpack(Stk,A,A + Inst[3] );end else VIP=Inst[3];end elseif (Enum<=36) then if (Enum<=33) then if (Enum>32) then do return Stk[Inst[2]];end else Stk[Inst[2]]();end elseif (Enum<=34) then Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];elseif (Enum>35) then local A=Inst[2];local T=Stk[A];for Idx=A + 1 ,Inst[3] do Insert(T,Stk[Idx]);end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=39) then if (Enum<=37) then local A=Inst[2];Stk[A]=Stk[A]();elseif (Enum>38) then local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));else local A=Inst[2];local Results={Stk[A](Stk[A + 1 ])};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=40) then Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Enum>41) then Stk[Inst[2]]=Env[Inst[3]];else for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);"
rqEzCzs6,Morph mod silent stranger,Dsaqwed123,LScript,Thursday 25th of April 2024 09:16:31 PM CDT,"_G.Morph = ""Silent Stranger""
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=14) then if (Enum<=6) then if (Enum<=2) then if (Enum<=0) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif (Enum>1) then Stk[Inst[2]]=Env[Inst[3]];else Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=4) then if (Enum==3) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>5) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];end elseif (Enum<=10) then if (Enum<=8) then if (Enum>7) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==15) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else VIP=Inst[3];end elseif (Enum==9) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=12) then if (Enum>11) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif (Enum>13) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);end elseif (Enum<=22) then if (Enum<=18) then if (Enum<=16) then if (Enum==15) then Stk[Inst[2]]=Stk[Inst[3]];else local A=Inst[2];local Cls={};for Idx=1, #Lupvals do local List=Lupvals[Idx];for Idz=0, #List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end end end end elseif (Enum==17) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=20) then if (Enum==19) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]] * Stk[Inst[4]] ;end elseif (Enum==21) then Stk[Inst[2]]=Inst[3]~=0 ;else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=26) then if (Enum<=24) then if (Enum==23) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum>25) then local A=Inst[2];Stk[A](Stk[A + 1 ]);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=28) then if (Enum>27) then Stk[Inst[2]]=Inst[3];else do return;end end elseif (Enum==29) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=20) then if (Enum<=9) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=2) then local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);elseif (Enum==3) then Stk[Inst[2]]={};elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=6) then if (Enum==5) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=7) then if (Inst[2]<=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>8) then Upvalues[Inst[3]]=Stk[Inst[2]];else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=14) then if (Enum<=11) then if (Enum==10) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]=Inst[3]~=0 ;end elseif (Enum<=12) then if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>13) then Stk[Inst[2]]= #Stk[Inst[3]];else local A=Inst[2];Stk[A](Stk[A + 1 ]);end elseif (Enum<=17) then if (Enum<=15) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>16) then local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=18) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif (Enum>19) then Stk[Inst[2]]=Upvalues[Inst[3]];else local B=Stk[Inst[4]];if  not B then VIP=VIP + 1 ;else Stk[Inst[2]]=B;VIP=Inst[3];end end elseif (Enum<=31) then if (Enum<=25) then if (Enum<=22) then if (Enum==21) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else do return;end end elseif (Enum<=23) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Enum>24) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else Stk[Inst[2]]=Inst[3];end elseif (Enum<=28) then if (Enum<=26) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum==27) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==10) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=29) then local A=Inst[2];local T=Stk[A];local B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end elseif (Enum==30) then local A=Inst[2];do return Unpack(Stk,A,A + Inst[3] );end else VIP=Inst[3];end elseif (Enum<=36) then if (Enum<=33) then if (Enum>32) then do return Stk[Inst[2]];end else Stk[Inst[2]]();end elseif (Enum<=34) then Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];elseif (Enum>35) then local A=Inst[2];local T=Stk[A];for Idx=A + 1 ,Inst[3] do Insert(T,Stk[Idx]);end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=39) then if (Enum<=37) then local A=Inst[2];Stk[A]=Stk[A]();elseif (Enum>38) then local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));else local A=Inst[2];local Results={Stk[A](Stk[A + 1 ])};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=40) then Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Enum>41) then Stk[Inst[2]]=Env[Inst[3]];else for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);"
jfzVqzaU,Morph mod Mob,Dsaqwed123,LScript,Thursday 25th of April 2024 09:13:16 PM CDT,"_G.Morph = ""Mob""
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=14) then if (Enum<=6) then if (Enum<=2) then if (Enum<=0) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif (Enum>1) then Stk[Inst[2]]=Env[Inst[3]];else Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=4) then if (Enum==3) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>5) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];end elseif (Enum<=10) then if (Enum<=8) then if (Enum>7) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==15) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else VIP=Inst[3];end elseif (Enum==9) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=12) then if (Enum>11) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif (Enum>13) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);end elseif (Enum<=22) then if (Enum<=18) then if (Enum<=16) then if (Enum==15) then Stk[Inst[2]]=Stk[Inst[3]];else local A=Inst[2];local Cls={};for Idx=1, #Lupvals do local List=Lupvals[Idx];for Idz=0, #List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end end end end elseif (Enum==17) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=20) then if (Enum==19) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]] * Stk[Inst[4]] ;end elseif (Enum==21) then Stk[Inst[2]]=Inst[3]~=0 ;else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=26) then if (Enum<=24) then if (Enum==23) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum>25) then local A=Inst[2];Stk[A](Stk[A + 1 ]);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=28) then if (Enum>27) then Stk[Inst[2]]=Inst[3];else do return;end end elseif (Enum==29) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=20) then if (Enum<=9) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=2) then local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);elseif (Enum==3) then Stk[Inst[2]]={};elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=6) then if (Enum==5) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=7) then if (Inst[2]<=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>8) then Upvalues[Inst[3]]=Stk[Inst[2]];else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=14) then if (Enum<=11) then if (Enum==10) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]=Inst[3]~=0 ;end elseif (Enum<=12) then if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>13) then Stk[Inst[2]]= #Stk[Inst[3]];else local A=Inst[2];Stk[A](Stk[A + 1 ]);end elseif (Enum<=17) then if (Enum<=15) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>16) then local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=18) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif (Enum>19) then Stk[Inst[2]]=Upvalues[Inst[3]];else local B=Stk[Inst[4]];if  not B then VIP=VIP + 1 ;else Stk[Inst[2]]=B;VIP=Inst[3];end end elseif (Enum<=31) then if (Enum<=25) then if (Enum<=22) then if (Enum==21) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else do return;end end elseif (Enum<=23) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Enum>24) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else Stk[Inst[2]]=Inst[3];end elseif (Enum<=28) then if (Enum<=26) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum==27) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==10) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=29) then local A=Inst[2];local T=Stk[A];local B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end elseif (Enum==30) then local A=Inst[2];do return Unpack(Stk,A,A + Inst[3] );end else VIP=Inst[3];end elseif (Enum<=36) then if (Enum<=33) then if (Enum>32) then do return Stk[Inst[2]];end else Stk[Inst[2]]();end elseif (Enum<=34) then Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];elseif (Enum>35) then local A=Inst[2];local T=Stk[A];for Idx=A + 1 ,Inst[3] do Insert(T,Stk[Idx]);end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=39) then if (Enum<=37) then local A=Inst[2];Stk[A]=Stk[A]();elseif (Enum>38) then local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));else local A=Inst[2];local Results={Stk[A](Stk[A + 1 ])};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=40) then Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Enum>41) then Stk[Inst[2]]=Env[Inst[3]];else for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);"
xQm8C62j,Untitled,retroman,FreeBasic,Thursday 25th of April 2024 08:58:16 PM CDT,"function IsInt(source as string, expr as string) as boolean
   for i as uinteger = 0 to len(source) step 1
      if source[i] = asc(""#"") then
         for j as uinteger = 0 to len(expr) step 1
            select case (expr[i]) 
               case asc(""0"") to asc(""9"")
                  return true
               case else
                  return false
            end select
         next
      end if
   next
end function"
MPQC4Fj6,Morph mod Vulcan,Dsaqwed123,LScript,Thursday 25th of April 2024 08:37:59 PM CDT,"_G.Morph = ""Vulcan""
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=14) then if (Enum<=6) then if (Enum<=2) then if (Enum<=0) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif (Enum>1) then Stk[Inst[2]]=Env[Inst[3]];else Stk[Inst[2]][Inst[3]]=Inst[4];end elseif (Enum<=4) then if (Enum==3) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>5) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];end elseif (Enum<=10) then if (Enum<=8) then if (Enum>7) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==15) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else VIP=Inst[3];end elseif (Enum==9) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=12) then if (Enum>11) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else Stk[Inst[2]]=Upvalues[Inst[3]];end elseif (Enum>13) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);end elseif (Enum<=22) then if (Enum<=18) then if (Enum<=16) then if (Enum==15) then Stk[Inst[2]]=Stk[Inst[3]];else local A=Inst[2];local Cls={};for Idx=1, #Lupvals do local List=Lupvals[Idx];for Idz=0, #List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2];if ((NStk==Stk) and (DIP>=A)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end end end end elseif (Enum==17) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=20) then if (Enum==19) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]] * Stk[Inst[4]] ;end elseif (Enum==21) then Stk[Inst[2]]=Inst[3]~=0 ;else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=26) then if (Enum<=24) then if (Enum==23) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum>25) then local A=Inst[2];Stk[A](Stk[A + 1 ]);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=28) then if (Enum>27) then Stk[Inst[2]]=Inst[3];else do return;end end elseif (Enum==29) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);
local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"".."",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return """";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return """";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select(""#"",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select(""#"",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=20) then if (Enum<=9) then if (Enum<=4) then if (Enum<=1) then if (Enum==0) then local A=Inst[2];local Results,Limit=_R(Stk[A](Stk[A + 1 ]));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end else local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Top));end elseif (Enum<=2) then local A=Inst[2];Stk[A]=Stk[A](Stk[A + 1 ]);elseif (Enum==3) then Stk[Inst[2]]={};elseif (Stk[Inst[2]]~=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=6) then if (Enum==5) then local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];else Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];end elseif (Enum<=7) then if (Inst[2]<=Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>8) then Upvalues[Inst[3]]=Stk[Inst[2]];else local A=Inst[2];local Results={Stk[A](Unpack(Stk,A + 1 ,Top))};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=14) then if (Enum<=11) then if (Enum==10) then Stk[Inst[2]]=Stk[Inst[3]];else Stk[Inst[2]]=Inst[3]~=0 ;end elseif (Enum<=12) then if Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>13) then Stk[Inst[2]]= #Stk[Inst[3]];else local A=Inst[2];Stk[A](Stk[A + 1 ]);end elseif (Enum<=17) then if (Enum<=15) then if (Stk[Inst[2]]~=Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum>16) then local A=Inst[2];local Results,Limit=_R(Stk[A](Unpack(Stk,A + 1 ,Inst[3])));Top=(Limit + A) -1 ;local Edx=0;for Idx=A,Top do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end elseif  not Stk[Inst[2]] then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum<=18) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif (Enum>19) then Stk[Inst[2]]=Upvalues[Inst[3]];else local B=Stk[Inst[4]];if  not B then VIP=VIP + 1 ;else Stk[Inst[2]]=B;VIP=Inst[3];end end elseif (Enum<=31) then if (Enum<=25) then if (Enum<=22) then if (Enum==21) then if (Stk[Inst[2]]==Inst[4]) then VIP=VIP + 1 ;else VIP=Inst[3];end else do return;end end elseif (Enum<=23) then local A=Inst[2];local C=Inst[4];local CB=A + 2 ;local Result={Stk[A](Stk[A + 1 ],Stk[CB])};for Idx=1,C do Stk[CB + Idx ]=Result[Idx];end local R=Result[1];if R then Stk[CB]=R;VIP=Inst[3];else VIP=VIP + 1 ;end elseif (Enum>24) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else Stk[Inst[2]]=Inst[3];end elseif (Enum<=28) then if (Enum<=26) then if (Stk[Inst[2]]==Stk[Inst[4]]) then VIP=VIP + 1 ;else VIP=Inst[3];end elseif (Enum==27) then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key];Val[1][Val[2]]=Value;end});for Idx=1,Inst[4] do VIP=VIP + 1 ;local Mvm=Instr[VIP];if (Mvm[1]==10) then Indexes[Idx-1 ]={Stk,Mvm[3]};else Indexes[Idx-1 ]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1 ]=Indexes;end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else local B=Inst[3];local K=Stk[B];for Idx=B + 1 ,Inst[4] do K=K   .. Stk[Idx] ;end Stk[Inst[2]]=K;end elseif (Enum<=29) then local A=Inst[2];local T=Stk[A];local B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx ];end elseif (Enum==30) then local A=Inst[2];do return Unpack(Stk,A,A + Inst[3] );end else VIP=Inst[3];end elseif (Enum<=36) then if (Enum<=33) then if (Enum>32) then do return Stk[Inst[2]];end else Stk[Inst[2]]();end elseif (Enum<=34) then Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];elseif (Enum>35) then local A=Inst[2];local T=Stk[A];for Idx=A + 1 ,Inst[3] do Insert(T,Stk[Idx]);end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif (Enum<=39) then if (Enum<=37) then local A=Inst[2];Stk[A]=Stk[A]();elseif (Enum>38) then local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));else local A=Inst[2];local Results={Stk[A](Stk[A + 1 ])};local Edx=0;for Idx=A,Inst[4] do Edx=Edx + 1 ;Stk[Idx]=Results[Edx];end end elseif (Enum<=40) then Stk[Inst[2]][Inst[3]]=Inst[4];elseif (Enum>41) then Stk[Inst[2]]=Env[Inst[3]];else for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or ""?"" ;error(""Script error at [""   .. line   .. ""]:""   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);"
KJr1jSv2,2024-04-25_stats.json,rdp_snitch,JSON,Thursday 25th of April 2024 07:18:20 PM CDT,"{
  ""ip"": {
    ""194.165.16.72"": 3,
    ""212.41.9.11"": 9,
    ""81.19.135.47"": 9,
    ""179.60.147.53"": 3,
    ""198.235.24.141"": 9,
    ""118.193.56.149"": 3,
    ""36.91.222.100"": 3,
    ""2.57.149.186"": 6,
    ""159.65.82.237"": 6,
    ""87.251.75.145"": 9,
    ""194.165.16.11"": 6,
    ""185.170.144.3"": 6,
    ""169.150.209.215"": 3,
    ""87.251.75.120"": 6,
    ""154.27.71.58"": 51,
    ""112.4.139.162"": 3,
    ""103.56.6.163"": 15,
    ""152.32.183.13"": 3,
    ""62.204.41.225"": 18,
    ""205.210.31.41"": 9,
    ""194.165.16.37"": 6,
    ""165.22.143.203"": 12,
    ""167.71.26.227"": 3,
    ""107.167.82.123"": 3,
    ""58.218.204.183"": 9,
    ""198.235.24.170"": 9,
    ""87.251.75.64"": 3,
    ""115.241.82.173"": 9,
    ""27.8.44.19"": 3,
    ""205.210.31.237"": 9
  },
  ""asn"": {
    ""AS48721"": 15,
    ""AS49505"": 9,
    ""AS209588"": 12,
    ""AS396982"": 36,
    ""AS135377"": 6,
    ""AS7713"": 3,
    ""AS208312"": 6,
    ""AS14061"": 21,
    ""AS208091"": 18,
    ""AS197414"": 6,
    ""AS212238"": 3,
    ""AS13886"": 51,
    ""AS56046"": 3,
    ""AS140599"": 15,
    ""AS59425"": 18,
    ""AS53755"": 3,
    ""AS4134"": 9,
    ""AS55836"": 9,
    ""AS4837"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 27,
    ""OOO \""Network of data-centers \""Selectel\"""": 9,
    ""Google LLC"": 36,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Red Byte LLC"": 6,
    ""DigitalOcean, LLC"": 21,
    ""Xhost Internet Solutions LP"": 24,
    ""Datacamp Limited"": 3,
    ""Cogent Communications"": 51,
    ""China Mobile Communications Corporation"": 3,
    ""Comfac Corporation"": 15,
    ""Horizon LLC"": 18,
    ""Input Output Flood LLC"": 3,
    ""Chinanet"": 9,
    ""Reliance Jio Infocomm Limited"": 9,
    ""China Unicom Chongqing Province Network"": 3
  },
  ""org"": {
    ""Flyservers S.A"": 15,
    ""Unknown"": 12,
    ""Alviva Holding Limited"": 9,
    ""Cloud Solutions S.A"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Telekomunikasi Indonesia"": 3,
    ""Chang Way Technologies Co. Limited"": 6,
    ""DigitalOcean, LLC"": 21,
    ""Xhost Internet Solutions"": 18,
    ""Xhostis"": 6,
    ""DataCamp Limited"": 3,
    ""Cloud South"": 51,
    ""China Mobile Communications Corporation"": 3,
    ""Comfac Corporation"": 15,
    ""Ucloud Information Technology"": 3,
    ""Horizon LLC"": 18,
    ""DemonVPS"": 3,
    ""Chinanet JS"": 9,
    ""Reliance Jio Infocomm Limited"": 9
  },
  ""regionName"": {
    ""Kaunas"": 15,
    ""Moscow"": 27,
    ""Hesse"": 12,
    ""Distrito Federal"": 3,
    ""California"": 48,
    ""Bangkok"": 3,
    ""Jakarta"": 3,
    ""Lesser Poland"": 6,
    ""England"": 6,
    ""North Holland"": 24,
    ""Florida"": 51,
    ""Jiangsu"": 12,
    ""Metro Manila"": 15,
    ""Virginia"": 3,
    ""New Jersey"": 3,
    ""Arizona"": 3,
    ""National Capital Territory of Delhi"": 9,
    ""Chongqing"": 3
  },
  ""country"": {
    ""Lithuania"": 15,
    ""Russia"": 27,
    ""Germany"": 12,
    ""Venezuela"": 3,
    ""United States"": 108,
    ""Thailand"": 3,
    ""Indonesia"": 3,
    ""Poland"": 6,
    ""United Kingdom"": 6,
    ""The Netherlands"": 24,
    ""China"": 15,
    ""Philippines"": 15,
    ""India"": 9
  },
  ""account"": {
    ""Administr"": 39,
    ""Domain"": 30,
    ""soaZlbefO"": 3,
    ""PXdhsm"": 3,
    ""fvMvAs"": 3,
    ""Administrator"": 6,
    ""Test"": 24,
    ""hello"": 93,
    ""(empty)"": 3,
    ""mnxykwVFy"": 3,
    ""nVXGee"": 3,
    ""VpEmxX"": 3,
    ""pdzoaul5"": 12,
    ""beio"": 3,
    ""DruWdNVCM"": 3,
    ""VEkAdS"": 3,
    ""TZNMIh"": 3,
    ""jCDDCxdEK"": 3,
    ""IlIzRc"": 3,
    ""DoDANP"": 3
  },
  ""keyboard"": {
    ""Unknown"": 246
  },
  ""client_build"": {
    ""Unknown"": 246
  },
  ""client_name"": {
    ""Unknown"": 246
  },
  ""ip_type"": {
    ""Unknown"": 147,
    ""hosting"": 60,
    ""hosting & proxy"": 18,
    ""mobile"": 12,
    ""proxy"": 9
  }
}"
rapPDXKp,2024-04-25_stats.json,rdp_snitch,JSON,Thursday 25th of April 2024 07:16:12 PM CDT,"{
  ""ip"": {
    ""194.165.16.72"": 2,
    ""212.41.9.11"": 6,
    ""81.19.135.47"": 6,
    ""179.60.147.53"": 2,
    ""198.235.24.141"": 6,
    ""118.193.56.149"": 2,
    ""36.91.222.100"": 2,
    ""2.57.149.186"": 4,
    ""159.65.82.237"": 4,
    ""87.251.75.145"": 6,
    ""194.165.16.11"": 4,
    ""185.170.144.3"": 4,
    ""169.150.209.215"": 2,
    ""87.251.75.120"": 4,
    ""154.27.71.58"": 34,
    ""112.4.139.162"": 2,
    ""103.56.6.163"": 10,
    ""152.32.183.13"": 2,
    ""62.204.41.225"": 12,
    ""205.210.31.41"": 6,
    ""194.165.16.37"": 4,
    ""165.22.143.203"": 8,
    ""167.71.26.227"": 2,
    ""107.167.82.123"": 2,
    ""58.218.204.183"": 6,
    ""198.235.24.170"": 6,
    ""87.251.75.64"": 2,
    ""115.241.82.173"": 6,
    ""27.8.44.19"": 2,
    ""205.210.31.237"": 6
  },
  ""asn"": {
    ""AS48721"": 10,
    ""AS49505"": 6,
    ""AS209588"": 8,
    ""AS396982"": 24,
    ""AS135377"": 4,
    ""AS7713"": 2,
    ""AS208312"": 4,
    ""AS14061"": 14,
    ""AS208091"": 12,
    ""AS197414"": 4,
    ""AS212238"": 2,
    ""AS13886"": 34,
    ""AS56046"": 2,
    ""AS140599"": 10,
    ""AS59425"": 12,
    ""AS53755"": 2,
    ""AS4134"": 6,
    ""AS55836"": 6,
    ""AS4837"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 18,
    ""OOO \""Network of data-centers \""Selectel\"""": 6,
    ""Google LLC"": 24,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Red Byte LLC"": 4,
    ""DigitalOcean, LLC"": 14,
    ""Xhost Internet Solutions LP"": 16,
    ""Datacamp Limited"": 2,
    ""Cogent Communications"": 34,
    ""China Mobile Communications Corporation"": 2,
    ""Comfac Corporation"": 10,
    ""Horizon LLC"": 12,
    ""Input Output Flood LLC"": 2,
    ""Chinanet"": 6,
    ""Reliance Jio Infocomm Limited"": 6,
    ""China Unicom Chongqing Province Network"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 10,
    ""Unknown"": 8,
    ""Alviva Holding Limited"": 6,
    ""Cloud Solutions S.A"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Chang Way Technologies Co. Limited"": 4,
    ""DigitalOcean, LLC"": 14,
    ""Xhost Internet Solutions"": 12,
    ""Xhostis"": 4,
    ""DataCamp Limited"": 2,
    ""Cloud South"": 34,
    ""China Mobile Communications Corporation"": 2,
    ""Comfac Corporation"": 10,
    ""Ucloud Information Technology"": 2,
    ""Horizon LLC"": 12,
    ""DemonVPS"": 2,
    ""Chinanet JS"": 6,
    ""Reliance Jio Infocomm Limited"": 6
  },
  ""regionName"": {
    ""Kaunas"": 10,
    ""Moscow"": 18,
    ""Hesse"": 8,
    ""Distrito Federal"": 2,
    ""California"": 32,
    ""Bangkok"": 2,
    ""Jakarta"": 2,
    ""Lesser Poland"": 4,
    ""England"": 4,
    ""North Holland"": 16,
    ""Florida"": 34,
    ""Jiangsu"": 8,
    ""Metro Manila"": 10,
    ""Virginia"": 2,
    ""New Jersey"": 2,
    ""Arizona"": 2,
    ""National Capital Territory of Delhi"": 6,
    ""Chongqing"": 2
  },
  ""country"": {
    ""Lithuania"": 10,
    ""Russia"": 18,
    ""Germany"": 8,
    ""Venezuela"": 2,
    ""United States"": 72,
    ""Thailand"": 2,
    ""Indonesia"": 2,
    ""Poland"": 4,
    ""United Kingdom"": 4,
    ""The Netherlands"": 16,
    ""China"": 10,
    ""Philippines"": 10,
    ""India"": 6
  },
  ""account"": {
    ""Administr"": 26,
    ""Domain"": 20,
    ""soaZlbefO"": 2,
    ""PXdhsm"": 2,
    ""fvMvAs"": 2,
    ""Administrator"": 4,
    ""Test"": 16,
    ""hello"": 62,
    ""(empty)"": 2,
    ""mnxykwVFy"": 2,
    ""nVXGee"": 2,
    ""VpEmxX"": 2,
    ""pdzoaul5"": 8,
    ""beio"": 2,
    ""DruWdNVCM"": 2,
    ""VEkAdS"": 2,
    ""TZNMIh"": 2,
    ""jCDDCxdEK"": 2,
    ""IlIzRc"": 2,
    ""DoDANP"": 2
  },
  ""keyboard"": {
    ""Unknown"": 164
  },
  ""client_build"": {
    ""Unknown"": 164
  },
  ""client_name"": {
    ""Unknown"": 164
  },
  ""ip_type"": {
    ""Unknown"": 98,
    ""hosting"": 40,
    ""hosting & proxy"": 12,
    ""mobile"": 8,
    ""proxy"": 6
  }
}"
vAk9ytbA,2024-04-25_stats.json,rdp_snitch,JSON,Thursday 25th of April 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""194.165.16.72"": 1,
    ""212.41.9.11"": 3,
    ""81.19.135.47"": 3,
    ""179.60.147.53"": 1,
    ""198.235.24.141"": 3,
    ""118.193.56.149"": 1,
    ""36.91.222.100"": 1,
    ""2.57.149.186"": 2,
    ""159.65.82.237"": 2,
    ""87.251.75.145"": 3,
    ""194.165.16.11"": 2,
    ""185.170.144.3"": 2,
    ""169.150.209.215"": 1,
    ""87.251.75.120"": 2,
    ""154.27.71.58"": 17,
    ""112.4.139.162"": 1,
    ""103.56.6.163"": 5,
    ""152.32.183.13"": 1,
    ""62.204.41.225"": 6,
    ""205.210.31.41"": 3,
    ""194.165.16.37"": 2,
    ""165.22.143.203"": 4,
    ""167.71.26.227"": 1,
    ""107.167.82.123"": 1,
    ""58.218.204.183"": 3,
    ""198.235.24.170"": 3,
    ""87.251.75.64"": 1,
    ""115.241.82.173"": 3,
    ""27.8.44.19"": 1,
    ""205.210.31.237"": 3
  },
  ""asn"": {
    ""AS48721"": 5,
    ""AS49505"": 3,
    ""AS209588"": 4,
    ""AS396982"": 12,
    ""AS135377"": 2,
    ""AS7713"": 1,
    ""AS208312"": 2,
    ""AS14061"": 7,
    ""AS208091"": 6,
    ""AS197414"": 2,
    ""AS212238"": 1,
    ""AS13886"": 17,
    ""AS56046"": 1,
    ""AS140599"": 5,
    ""AS59425"": 6,
    ""AS53755"": 1,
    ""AS4134"": 3,
    ""AS55836"": 3,
    ""AS4837"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 9,
    ""OOO \""Network of data-centers \""Selectel\"""": 3,
    ""Google LLC"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Red Byte LLC"": 2,
    ""DigitalOcean, LLC"": 7,
    ""Xhost Internet Solutions LP"": 8,
    ""Datacamp Limited"": 1,
    ""Cogent Communications"": 17,
    ""China Mobile Communications Corporation"": 1,
    ""Comfac Corporation"": 5,
    ""Horizon LLC"": 6,
    ""Input Output Flood LLC"": 1,
    ""Chinanet"": 3,
    ""Reliance Jio Infocomm Limited"": 3,
    ""China Unicom Chongqing Province Network"": 1
  },
  ""org"": {
    ""Flyservers S.A"": 5,
    ""Unknown"": 4,
    ""Alviva Holding Limited"": 3,
    ""Cloud Solutions S.A"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Telekomunikasi Indonesia"": 1,
    ""Chang Way Technologies Co. Limited"": 2,
    ""DigitalOcean, LLC"": 7,
    ""Xhost Internet Solutions"": 6,
    ""Xhostis"": 2,
    ""DataCamp Limited"": 1,
    ""Cloud South"": 17,
    ""China Mobile Communications Corporation"": 1,
    ""Comfac Corporation"": 5,
    ""Ucloud Information Technology"": 1,
    ""Horizon LLC"": 6,
    ""DemonVPS"": 1,
    ""Chinanet JS"": 3,
    ""Reliance Jio Infocomm Limited"": 3
  },
  ""regionName"": {
    ""Kaunas"": 5,
    ""Moscow"": 9,
    ""Hesse"": 4,
    ""Distrito Federal"": 1,
    ""California"": 16,
    ""Bangkok"": 1,
    ""Jakarta"": 1,
    ""Lesser Poland"": 2,
    ""England"": 2,
    ""North Holland"": 8,
    ""Florida"": 17,
    ""Jiangsu"": 4,
    ""Metro Manila"": 5,
    ""Virginia"": 1,
    ""New Jersey"": 1,
    ""Arizona"": 1,
    ""National Capital Territory of Delhi"": 3,
    ""Chongqing"": 1
  },
  ""country"": {
    ""Lithuania"": 5,
    ""Russia"": 9,
    ""Germany"": 4,
    ""Venezuela"": 1,
    ""United States"": 36,
    ""Thailand"": 1,
    ""Indonesia"": 1,
    ""Poland"": 2,
    ""United Kingdom"": 2,
    ""The Netherlands"": 8,
    ""China"": 5,
    ""Philippines"": 5,
    ""India"": 3
  },
  ""account"": {
    ""Administr"": 13,
    ""Domain"": 10,
    ""soaZlbefO"": 1,
    ""PXdhsm"": 1,
    ""fvMvAs"": 1,
    ""Administrator"": 2,
    ""Test"": 8,
    ""hello"": 31,
    ""(empty)"": 1,
    ""mnxykwVFy"": 1,
    ""nVXGee"": 1,
    ""VpEmxX"": 1,
    ""pdzoaul5"": 4,
    ""beio"": 1,
    ""DruWdNVCM"": 1,
    ""VEkAdS"": 1,
    ""TZNMIh"": 1,
    ""jCDDCxdEK"": 1,
    ""IlIzRc"": 1,
    ""DoDANP"": 1
  },
  ""keyboard"": {
    ""Unknown"": 82
  },
  ""client_build"": {
    ""Unknown"": 82
  },
  ""client_name"": {
    ""Unknown"": 82
  },
  ""ip_type"": {
    ""Unknown"": 49,
    ""hosting"": 20,
    ""hosting & proxy"": 6,
    ""mobile"": 4,
    ""proxy"": 3
  }
}"
gvVTLnp2,Weight Method - CS220,jig487,Java,Thursday 25th of April 2024 07:01:30 PM CDT,"/**
	 * Calculates the weight being carried by the person at row, col.
	 * 
	 * @param row The row position of the person.
	 * @param col The column position of the person.
	 * @return A double representing the amount of weight the person at row col is carrying.
	 */
	private static double weightOn(int row, int col) {
		if (row == 0 && col == 0) {
			//base case: we are at (0,0)
			return 0;
		} else if (col == 0) {
			//recursive case: left edge
			//(weight of the person above + the weight they are carrying) divide by 2
			return (weightOn(row-1, col) + weight) / 2;
		} else if (row == col) {
			//recursive case: right edge
			//(weight of the person above + the weight they are carrying) divide by 2
			return (weightOn(row-1, col-1) + weight) / 2;
		} else {
			//recursive case: somewhere in the middle
			//(weight of the people above + the weight they are carrying) divide by 2
			double leftNode = weightOn(row-1,col-1);
			double rightNode = weightOn(row-1,col);

			return (leftNode + rightNode + weight*2) / 2;
		}
	}

	/**
	 * Calculate the weight being carried by ther person at row, col.
	 * Uses memoization for optimization
	 * RETURNS: A 2d ragged array of weights, filled out for the given row and column
	 * 
	 * @param row The row position of the person.
	 * @param col The column position of the person.
	 * @return A double representing the amount of weight the person at row col is carrying.
	 */
	private static double[][] weightOnMemo(int row, int col, double[][] arr) {
		//initialize ragged array and fill with 0.0 if arr is empty
		if (arr.length == 0) {
			arr = new double[row+1][];
			for (int r = 0; r < arr.length; r++ ) {
				arr[r] = new double[r+1];
				for (int c = 0; c < r+1; c++) {
					arr[r][c] = 0.0;
				}
			}
		}
		
		//check if value already exists
		if (arr[row][col] != 0.0) {
			//value already exists
			return arr;
		}
		
		//	Do calculation and recursive method calls. 
		//Past here, we know the value for arr[row][col] does not exist so we need to calculate and insert it
		if (col == 0) {
			//left edge
			//check if value above exists
			double val = arr[row-1][col]; //(weightOn(row-1, col) + weight) / 2;
			if (val == 0 && row-1 > 0) {
				//if val is empty and we are not checking (0,0)
				arr = weightOnMemo(row-1, col, arr); //fill target index with weight value
				val = arr[row-1][col]; //update val with new weight
			}
			//fill value for current index
			arr[row][col] = (val+weight)/2;
			return arr;
			
		} else if (row == col) {
			//right edge
			//check if value above exists
			double val = arr[row-1][col-1]; //(weightOn(row-1, col-1) + weight) / 2;
			if (val == 0 && row-1 > 0) {
				//if val is empty and we are not checking (0,0)
				arr = weightOnMemo(row-1, col-1, arr); //fill target index with weight value
				val = arr[row-1][col-1]; //update val with new weight
			}
			//fill value for current index
			arr[row][col] = (val+weight)/2;
			return arr;
				
		} else {
			//middle: need both left and right weights above
			//At this point, we know we cannot check (0,0) directly from out position
			double left = arr[row-1][col-1];
			double right = arr[row-1][col];

			if (left == 0) {
				//if val is empty
				arr = weightOnMemo(row-1, col-1, arr); //fill target index with weight value
				left = arr[row-1][col-1]; //update val with new weight
			}

			if (right == 0) {
				//if val is empty
				arr = weightOnMemo(row-1, col, arr); //fill target index with weight value
				right = arr[row-1][col]; //update val with new weight
			}

			//fill value for current index
			arr[row][col] = (left+right+weight*2)/2;
			return arr;
		}
	}"
M0E4BFgq,configMod,Clifftop7,Lua,Thursday 25th of April 2024 05:11:40 PM CDT,"

local M = {}

local cTable = {}

cTable[""p_apoth""] = ""minecraft:chest_2""

cTable[""rs_chest""] = ""minecraft:chest_3""

cTable[""pool_chest""] = ""minecraft:chest_4""

cTable[""portal_chest""] = ""minecraft:chest_6""

cTable[""craft_chest""] = ""rftoolsutility:crafter3_0""

cTable[""rs_bridge""] = {""right"",""top""}

cTable[""r_apoth""] = ""redstoneIntegrator_1""

cTable[""rune_chest""] = ""minecraft:chest_5""

cTable[""craft_vac""] = {""redstoneIntegrator_3"", ""right""}

cTable[""portal_vac""] = {""redstoneIntegrator_2"", ""right""}

function M.GetConfigTable()
    return cTable
end

local fTable = {}

fTable[""botania:mana_glass""] = ""/chest_prog/poolCrafting/manaGlass.lua""

fTable[""botania:mana_powder""] = ""/chest_prog/poolCrafting/manaPowder.lua""

fTable[""botania:mana_diamond""] = ""/chest_prog/poolCrafting/manaDiamond.lua""

fTable[""botania:mana_quartz""] = ""/chest_prog/poolCrafting/manaQuartz.lua""

fTable[""botania:mana_string""] = ""/chest_prog/poolCrafting/manaString.lua""

fTable[""botania:mana_pearl""] = ""/chest_prog/poolCrafting/manaPearl.lua""

fTable[""botania:rune_earth""] = ""/chest_prog/runeCrafting/earthRune.lua""

fTable[""botania:rune_air""] = ""/chest_prog/runeCrafting/airRune.lua""

fTable[""botania:rune_fire""] = ""/chest_prog/runeCrafting/fireRune.lua""

fTable[""botania:rune_water""] = ""/chest_prog/runeCrafting/waterRune.lua""

fTable[""botania:rune_summer""] = ""/chest_prog/runeCrafting/summerRune.lua""

fTable[""botania:rune_spring""] = ""/chest_prog/runeCrafting/springRune.lua""

fTable[""botania:rune_autumn""] = ""/chest_prog/runeCrafting/autumnRune.lua""

fTable[""botania:rune_winter""] = ""/chest_prog/runeCrafting/winterRune.lua""

fTable[""botania:rune_lust""] = ""/chest_prog/runeCrafting/lustRune.lua""

fTable[""botania:rune_gluttony""] = ""/chest_prog/runeCrafting/gluttonyRune.lua""

fTable[""botania:rune_sloth""] = ""/chest_prog/runeCrafting/slothRune.lua""

fTable[""botania:rune_greed""] = ""/chest_prog/runeCrafting/greedRune.lua""

fTable[""botania:rune_envy""] = ""/chest_prog/runeCrafting/envyRune.lua""

fTable[""botania:rune_pride""] = ""/chest_prog/runeCrafting/prideRune.lua""

fTable[""botania:rune_wrath""] = ""/chest_prog/runeCrafting/wrathRune.lua""

fTable[""botania:dragonstone""] = ""/chest_prog/portalCrafting/dragonstone.lua""

fTable[""botania:pixie_dust""] = ""/chest_prog/portalCrafting/pixieDust.lua""

fTable[""botania:elementium_ingot""] = ""/chest_prog/portalCrafting/elementium.lua""

fTable[""botania:elf_glass""] = ""/chest_prog/portalCrafting/alfglass.lua""

function M.GetFunctionTable()
    return fTable
end

return M"
nUySV7xq,python - stupid calc,a1t0rmenta,Python,Thursday 25th of April 2024 04:58:03 PM CDT,"# STUPID CALC
creator_name = ""Aitor""
print(f""\nSTUPID CALC made by {creator_name}\n"")

print(""<1> ENHANCE"")
print(""<2> ADD"")
print(""<3> SUBSTRACT"")
print(""<4> MULTIPLY"")
print(""<5> DIVIDE"")

answer = input(""\nChoose option:\n"")


def input_numbers():
    print(""Introduce el primer valor:"")
    value1 = float(input())
    print(""Introduce el segundo valor:"")
    value2 = float(input())
    return (value1, value2)


if answer == ""1"":
    value1, value2 = input_numbers()
    result = value1 ** value2
    print(result)

if answer == ""2"":
    value1, value2 = input_numbers()
    print(value1 + value2)

"
Axz9Jwbx,Ordenar grupos alfabéticamente por SQL,EmilianoRoldanR,SQL,Thursday 25th of April 2024 04:56:06 PM CDT,"/*
Con esta consulta ordenamos la prioridad de los grupos de producto según su orden alfabético.
Es decir, AGUA prioridad 1, Burger prioridad 2. Pero es prioridad en pantalla. Es lo que se haría a mano desde SR pero si Tenes muchos grupos y tu intensión es ordenar alfabéticamente los grupos con esto lo haces
*/

WITH Prioridades AS (
    SELECT *, ROW_NUMBER() OVER (ORDER BY descripcion) AS nueva_prioridad
    FROM grupos
)
UPDATE Prioridades
SET prioridad = nueva_prioridad;"
91Hb0Jkb,fritz-getlog.sh,Parnas,Bash,Thursday 25th of April 2024 04:22:45 PM CDT,"#!/bin/bash

#
# This bash script downloads the current Fritz Box event log as JSON file and as TXT file.
#
# The login procedure was implemented according to
# https://avm.de/fileadmin/user_upload/Global/Service/Schnittstellen/AVM_Technical_Note_-_Session_ID.pdf
#
# The script was tested successfully on MacOS High Sierra 10.13.6 with Fritz!Box 6490 Cable (kdg)

USERNAME=xxxxxx
PASSWORD=yyyyyy

BASE_URL=http://fritz.box

CHALLENGE=$(curl -s ${BASE_URL}/login_sid.lua |grep -o -e ""<Challenge>.*</Challenge>"" |cut -d"">"" -f2 |cut -d""<"" -f1)

MD5=$(echo -n ${CHALLENGE}-${PASSWORD} |iconv -t UTF-16LE |md5sum |cut -c1-32)

RESPONSE=""${CHALLENGE}-${MD5}""

SID=$(curl -s -d ""response=${RESPONSE}&lp=overview&username=${USERNAME}"" -H ""Content-Type: application/x-www-form-urlencoded"" ${BASE_URL}/index.lua |grep '""sid"":' |head -1 |sed -e 's/.*""sid"":""\([^""]*\)"".*/\1/' )
echo ""SID=""$SID

TIMESTAMP=$(date +""%Y-%m-%d_%H-%M-%S"")

OUTPUT_FILE=log-${TIMESTAMP}
OUTPUT_FILE_JSON=${OUTPUT_FILE}.json
OUTPUT_FILE_TXT=${OUTPUT_FILE}.txt

curl -s -d ""xhr=1&lang=de&page=log&sid=${SID}"" -H ""Content-Type: application/x-www-form-urlencoded"" ${BASE_URL}/data.lua > ${OUTPUT_FILE_JSON}

cat ${OUTPUT_FILE_JSON} |jq  '.data.log[]| ""\(.[""date""]) \(.[""time""]) \(.[""group""]) \(.[""msg""])""' > ${OUTPUT_FILE_TXT}
# cat ${OUTPUT_FILE_TXT}

echo ""Prodotto file: ""${OUTPUT_FILE_TXT}
exit 0"
WCSXZKt6,Untitled,robeeeert,Java,Thursday 25th of April 2024 04:04:59 PM CDT,"
// Clase Nodo que representa los nodos individuales de la lista doblemente enlazada
class NodoDoble {
    private int numero;
    private Nodo siguiente;
    private Nodo anterior;

    // Constructor para crear un nuevo nodo con un número dado
    public NodoDoble(int numero) {
        this.numero = numero;
        this.siguiente = null;
        this.anterior = null;
    }

    // Métodos getter y setter para el número almacenado en el nodo
    public int getNumero() {
        return numero;
    }

    public void setNumero(int numero) {
        this.numero = numero;
    }

    // Métodos getter y setter para el nodo siguiente
    public Nodo getSiguiente() {
        return siguiente;
    }

    public void setSiguiente(Nodo siguiente) {
        this.siguiente = siguiente;
    }

    // Métodos getter y setter para el nodo anterior
    public Nodo getAnterior() {
        return anterior;
    }

    public void setAnterior(Nodo anterior) {
        this.anterior = anterior;
    }
}




class ListaDoble {
    private NodoDoble inicio;

    // Método para agregar un nuevo elemento al final de la lista
    public void agregar(int numero) {
        NodoDoble nuevoNodo = new NodoDoble(numero);
        if (inicio == null) {
            inicio = nuevoNodo;
        } else {
            NodoDoble tmp = inicio;
            while (tmp.getSiguiente() != null) {
                tmp = tmp.getSiguiente();
            }
            tmp.setSiguiente(nuevoNodo);
            nuevoNodo.setAnterior(tmp);
        }
    }

    // Método para mostrar los elementos de la lista en orden
    public void mostrar() {
        NodoDoble tmp = inicio;
        while (tmp != null) {
            System.out.print(tmp.getNumero() + "" "");
            tmp = tmp.getSiguiente();
        }
        System.out.println();
    }

    // Método para eliminar un nodo que contiene un número específico
    public void eliminar(int numero) {
        NodoDoble tmp = inicio;
        while (tmp != null) {
            if (tmp.getNumero() == numero) {
                if (tmp.getAnterior() != null) {
                    tmp.getAnterior().setSiguiente(tmp.getSiguiente());
                }
                if (tmp.getSiguiente() != null) {
                    tmp.getSiguiente().setAnterior(tmp.getAnterior());
                }
                if (tmp == inicio) {
                    inicio = tmp.getSiguiente();
                }
                return;
            }
            tmp = tmp.getSiguiente();
        }
        System.out.println(""El número "" + numero + "" no está en la lista"");
    }
}"
WUYpuRd5,Untitled,robeeeert,Java,Thursday 25th of April 2024 03:58:50 PM CDT,"// Clase Nodo que representa los nodos individuales de la lista enlazada
public class Nodo {

	private int numero; // El dato almacenado en el nodo
	private Nodo apuntador; // Referencia al siguiente nodo en la lista

	// Métodos getter y setter para el número almacenado en el nodo
	public int getNumero() {
		return numero;
	}

	public void setNumero(int numero) {
		this.numero = numero;
	}

	// Métodos getter y setter para el apuntador al siguiente nodo
	public Nodo getApuntador() {
		return apuntador;
	}

	public void setApuntador(Nodo apuntador) {
		this.apuntador = apuntador;
	}

}


// Clase Lista que representa la lista enlazada
public class ListaEnlazada {
	
	private Nodo inicio; // El primer nodo de la lista

	// Método para agregar un nuevo elemento al final de la lista
	public void agregar(int numero) {
		Nodo nodo = new Nodo(); // Creamos un nuevo nodo
		nodo.setNumero(numero); // Asignamos el número al nodo

		if (inicio == null) { // Si la lista está vacía
			inicio = nodo; // El nuevo nodo se convierte en el inicio de la lista
		} else {
			Nodo tmp = inicio; // Empezamos desde el inicio de la lista
			while (tmp.getApuntador() != null) { // Avanzamos hasta el último nodo
				tmp = tmp.getApuntador();
			}
			tmp.setApuntador(nodo); // Enlazamos el nuevo nodo al último nodo de la lista
		}
	}
	
	// Método para mostrar los elementos de la lista
	public void mostrar() {
		if (inicio == null) { // Si la lista está vacía
			System.out.println(""La lista está vacía"");
			return;
		}
		Nodo tmp = inicio; // Empezamos desde el inicio de la lista
		System.out.println(tmp.getNumero()); // Imprimimos el número del primer nodo
		while (tmp.getApuntador() != null) { // Mientras no lleguemos al final de la lista
			tmp = tmp.getApuntador(); // Avanzamos al siguiente nodo
			System.out.println(tmp.getNumero()); // Imprimimos el número del nodo actual
		}
	}

}"
bjbFvRwD,birchAutomation,OreSeur-,Lua,Thursday 25th of April 2024 03:46:50 PM CDT,"
turtle.down()"
