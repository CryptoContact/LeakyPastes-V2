id,title,username,language,date,content
Sz17bUfn,Kinsey theme: disable header widget area,artemsemkin,PHP,Wednesday 10th of January 2024 11:56:56 PM CDT,"<?php

// Temporarily disable header widgets
add_filter( 'is_active_sidebar', 'custom_filter_is_active_sidebar_header', 10, 2);
function custom_filter_is_active_sidebar_header( $is_active_sidebar, $index ) {
  if ( $index === 'header-sidebar' ) {
    return false;
  }

  return $is_active_sidebar;
}
"
Yn3zuzmK,Roblox - Ultimate FE GUI Exploit,TheNotePad_Scripter,Lua,Wednesday 10th of January 2024 11:11:54 PM CDT,"-- currently in the works, hang in there! --
-- leave a comment to help --"
JXz257aZ,Untitled,seld1,C#,Wednesday 10th of January 2024 10:09:41 PM CDT,"  CalculateCommand = ReactiveCommand.Create(() =>
           {
               try
               {
                   //Суммарная стоимость материалов
                   double materialSumm = 0;
                   try
                   {
                       materialSumm = Materials.Sum(x => double.Parse(x.Summ));
                   }
                   catch (Exception ex)
                   {
                       materialSumm = 0;
                   }

                   MaterialResult = materialSumm.ToString();

                   //Затраты на разработку проекта
                   double computeSumm = double.Parse(ComputerTimePrice) * double.Parse(ComputerTime);

                   //Суммарная зароботная плата
                   double paySumm = WorkerPays.Sum(x => double.Parse(x.OZP));

                   //Расчёт капитальных вложений на проектирование
                   CapitalResult = ((1+double.Parse(WD) * (1+double.Parse(WC))  + 0.6)*paySumm  + computeSumm + materialSumm).ToString();
               }
               catch (Exception ex)
               {
                   CapitalResult = ex.Message;
               }

               try
               {
                   //Расчёт затрат на оборудование
                   ResultOborud = (double.Parse(ComputerPrice) * 1 *  6 * Constants.WorkDaysOnYear /
                                   (Constants.WorkDaysOnYear * 8)).ToString();
                   
                   SummDeveloperResult = (double.Parse(CapitalResult) + double.Parse(ResultOborud)).ToString();

               }
               catch (Exception ex)
               {
                   ResultOborud = ex.Message;
                   SummDeveloperResult = ex.Message;
               }

               try
               {

                   
                   //Эксплуатационные затраиты
                   ExpluationResutl =  ( ((1 + double.Parse(WD)) * (1 + double.Parse(WC))) *
                                         WorkerPaysExplotations.Sum(x => double.Parse(x.OZP))).ToString();
                   ExpluationResutlAnalogue =  ( ((1 + double.Parse(WD)) * (1 + double.Parse(WC))) *
                                                 WorkerPaysExplotationsAnalogue.Sum(x => double.Parse(x.OZP))).ToString();
               }
               catch (Exception ex)
               {
                   ExpluationResutl = ex.Message.ToString();
                   
               }

               try
               {
                 double daysSumm =  WorkerPaysExplotations.Sum(x => double.Parse(x.Days));
                 double daysSummAanalogue =  WorkerPaysExplotationsAnalogue.Sum(x => double.Parse(x.Days));
                 //Эффективный фонд времени работы оборудования 
                 double F = Constants.WorkDaysOnYear * 8;
                 //tj – время работы j-гo вида оборудования, час; 
                 double time = daysSumm * 8;
                 double timeAnalogue = daysSummAanalogue * 8;
                 //Амортизационные рассходы
                 AmortizationResult =  ((double.Parse(ComputerPrice) * 0.2 * time) / F).ToString();
                 AmortizationResultAnalogue=((double.Parse(ComputerPrice) * 0.2 * timeAnalogue) / F).ToString();
               }
               catch (Exception ex)
               {
                   AmortizationResult = ex.Message;
                   AmortizationResultAnalogue = ex.Message;
               }

               try
               {
                   double daysSumm =  WorkerPaysExplotations.Sum(x => double.Parse(x.Days));
                   //tj – время работы j-гo вида оборудования, час; 
                   double time = daysSumm * 8;
                   EnergionResult = (time * double.Parse(CompWT) * double.Parse(EnergyPrice)).ToString();
                   
                   double daysSummAnalogue =  WorkerPaysExplotationsAnalogue.Sum(x => double.Parse(x.Days));
                   //tj – время работы j-гo вида оборудования, час; 
                   double timeAnalogue = daysSummAnalogue * 8;
                   EnergionResultAnalogue = (timeAnalogue * double.Parse(CompWT) * double.Parse(EnergyPrice)).ToString();

               }
               catch (Exception ex)
               {
                   EnergionResult = ex.Message;
                   EnergionResultAnalogue = ex.Message;
               }

               try
               { 
                   double daysSumm =  WorkerPaysExplotations.Sum(x => double.Parse(x.Days));
                   double time = daysSumm * 8;
                   //Эффективный фонд времени работы оборудования 
                   double F = Constants.WorkDaysOnYear * 8;

                   RemResult = (0.05 * double.Parse(ComputerPrice) * time / F).ToString();
                   
                   double daysSummAnalogue =  WorkerPaysExplotations.Sum(x => double.Parse(x.Days));
                   double timeAnalogue = daysSummAnalogue * 8;
                   //Эффективный фонд времени работы оборудования 
                  

                   RemResultAnalogue = (0.05 * double.Parse(ComputerPrice) * timeAnalogue / F).ToString();
               }
               catch (Exception ex)
               {
                   RemResult = ex.Message;
                   RemResultAnalogue = ex.Message;
               }

               try
               {
                   double paySumm = double.Parse(ExpluationResutl);
                   double materialSumm = Materials.Sum(x => double.Parse(x.Summ));
                   
                   double amortSumm = double.Parse(AmortizationResult);
                   double energion = double.Parse(EnergionResult);
                   double rem = double.Parse(RemResult);

                   double paySummAnalogue = double.Parse(ExpluationResutlAnalogue);
                  
                   
                   double amortSummAnlaogue = double.Parse(AmortizationResultAnalogue);
                   double energionAnalogue = double.Parse(EnergionResultAnalogue);
                   double remAnalogue = double.Parse(RemResultAnalogue);

                   NacladResult = ((paySumm + amortSumm + energion + rem + materialSumm) * 0.2).ToString();
                   NacladResultAnalogue = ((paySummAnalogue + amortSummAnlaogue + energionAnalogue + remAnalogue + materialSumm) * 0.2).ToString();
                   MainResult = (paySumm + amortSumm + energion + rem + materialSumm + double.Parse(NacladResult)).ToString();
                   MainResultAnalogue = (paySummAnalogue + amortSummAnlaogue + energionAnalogue + remAnalogue + materialSumm  + double.Parse(NacladResultAnalogue)).ToString();

               }
               catch (Exception ex)
               {
                   NacladResult = ex.Message;
               }
                

           });"
Gi88bC4J,AA Project v3,Zuhairy_Harry,C++,Wednesday 10th of January 2024 09:55:03 PM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <chrono>

using namespace std;
using namespace chrono;

struct Student {
    int  age, roomFloor;
    string id,name, state, department, fees;

};

// Function prototypes
void customSwap(Student& a, Student& b, int& swapCount);
int partition(vector<Student>& students, int low, int high, int& swapCount);
void quickSort(vector<Student>& students, int low, int high, int& swapCount);
void loadStudents(const string& filename, vector<Student>& students);
int binarySearch(const vector<Student>& students, int l, int r, int x);
int linearSearch(const vector<Student>& students, int x);
void displayStudents(const vector<Student>& students, int displayLimit);
void merge(vector<Student>& students, int low, int mid, int high, int& swapCount);
void mergeSort(vector<Student>& students, int low, int high, int& swapCount);
double calculateAverageAge(const vector<Student>& students);
int calculateTotalDept(const vector<Student>& students);
int calculateTotalState(const vector<Student>& students);


string trim(const string& str);

// Function implementations
string trim(const string& str) {
    size_t first = str.find_first_not_of("" \t\"""");
    if (first == string::npos) return """";
    size_t last = str.find_last_not_of("" \t\"""");
    return str.substr(first, (last - first + 1));
}


int partition(vector<Student>& students, int low, int high, int& swapCount) {
    string pivot = students[high].id;
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (students[j].id < pivot) {
            i++;
            customSwap(students[i], students[j], swapCount);
        }
    }
    customSwap(students[i + 1], students[high], swapCount);
    return i + 1;
}




/*
-----------------------------------------------------------------------------------
    QUICK SORT FUNCTION
-----------------------------------------------------------------------------------
*/
void quickSort(vector<Student>& students, int low, int high, int& swapCount) {
    if (low < high) {
        int pi = partition(students, low, high, swapCount);
        quickSort(students, low, pi - 1, swapCount);
        quickSort(students, pi + 1, high, swapCount);
    }
}




/*
-----------------------------------------------------------------------------------
    LOAD FILE FUNCTION
-----------------------------------------------------------------------------------
*/
void loadStudents(const string& filename, vector<Student>& students) {
    ifstream ip(filename);
    if (!ip.is_open()) {
        cerr << ""Error: File could not be opened"" << '\n';
        return;
    }

    string line;
    getline(ip, line); // Skip the header if present

    while (getline(ip, line)) {
        stringstream ss(line);
        Student tempStudent;
        string tempId, tempAge, tempRoomFloor;

        getline(ss, tempId, ',');
        getline(ss, tempStudent.name, ',');
        getline(ss, tempAge, ',');
        getline(ss, tempStudent.state, ',');
        getline(ss, tempStudent.department, ',');
        getline(ss, tempRoomFloor, ',');
        getline(ss, tempStudent.fees, '\n');
		
        tempStudent.id = trim(tempId);
        tempStudent.age = stoi(trim(tempAge));
        tempStudent.roomFloor = stoi(trim(tempRoomFloor));
        tempStudent.name = trim(tempStudent.name);
        tempStudent.state = trim(tempStudent.state);
        tempStudent.department = trim(tempStudent.department);
        tempStudent.fees = trim(tempStudent.fees);

        students.push_back(tempStudent); // Add the new student to the vector
    }

    ip.close();
}




/*
-----------------------------------------------------------------------------------
    MERGE FUNCTION
-----------------------------------------------------------------------------------
*/
void merge(vector<Student>& students, int low, int mid, int high, int& swapCount) {
    int n1 = mid - low + 1;
    int n2 = high - mid;

    vector<Student> left(n1), right(n2);

    for (int i = 0; i < n1; i++)
        left[i] = students[low + i];
    for (int j = 0; j < n2; j++)
        right[j] = students[mid + 1 + j];

    int i = 0, j = 0, k = low;

    while (i < n1 && j < n2) {
        if (left[i].id <= right[j].id) {
            students[k++] = left[i++];
        }
        else {
            students[k++] = right[j++];
            swapCount += n1 - i; // Counting swaps when elements are moved from left to right
        }
    }

    while (i < n1) {
        students[k++] = left[i++];
    }
    while (j < n2) {
        students[k++] = right[j++];
    }

}




/*
-----------------------------------------------------------------------------------
    MERGE SORT FUNCTION
-----------------------------------------------------------------------------------
*/
void mergeSort(vector<Student>& students, int low, int high, int& swapCount) {
    if (low < high) {
        int mid = low + (high - low) / 2;

        mergeSort(students, low, mid, swapCount);
        mergeSort(students, mid + 1, high, swapCount);

        merge(students, low, mid, high, swapCount);
    }

    //cout << ""Total Swaps = "" << swapCount << endl;
}




/*
-----------------------------------------------------------------------------------
    CALCULATE TOTAL STUDENT FROM DEPT FUNCTION
-----------------------------------------------------------------------------------
*/
int calculateTotalDept(const vector<Student>& students) {
    if (students.empty()) {
        return 0.0; // Return 0 if there are no students
    }

    int ftmkDept = 0;
    int ftkekDept = 0;
    int fpttDept = 0;
    for (const auto& student : students) {
        if (student.department == ""FTMK"") {
            ftmkDept++;
        }
        else if (student.department == ""FTKEK"") {
            ftkekDept++;
        }
        else if (student.department == ""FPTT"") {
            fpttDept++;
        }
    }

    cout << ""\nTotal student for FTMK department = "" << ftmkDept << endl;
    cout << ""Total student for FTKEK department = "" << ftkekDept << endl;
    cout << ""Total student for FPTT department = "" << fpttDept << ""\n"" << endl;

    return ftmkDept, ftkekDept, fpttDept;
}





/*
-----------------------------------------------------------------------------------
    CALCULATE TOTAL STUDENT FROM STATE FUNCTION
-----------------------------------------------------------------------------------
*/
int calculateTotalState(const vector<Student>& students) {
    if (students.empty()) {
        return 0.0; // Return 0 if there are no students
    }

    int JohorState = 0;
    int KedahState = 0;
    int MalaccaState = 0;
    int SelangorState = 0;
    int TerengganuState = 0;


    for (const auto& student : students) {
        if (student.state == ""Johor"") {
            JohorState++;
        }
        else if (student.state == ""Kedah"") {
            KedahState++;
        }
        else if (student.state == ""Malacca"") {
            MalaccaState++;
        }
        else if (student.state == ""Selangor"") {
            SelangorState++;
        }
        else if (student.state == ""Terengganu"") {
            TerengganuState++;
        }
    }

    cout << ""\nTotal student for Johor state = "" << JohorState << endl;
    cout << ""Total student for Kedah State = "" << KedahState << endl;
    cout << ""Total student for Malacca State = "" << MalaccaState << endl;
    cout << ""Total student for Selangor State = "" << SelangorState << endl;
    cout << ""Total student for Teregganu state = "" << TerengganuState << ""\n"" << endl;

    return JohorState, KedahState, MalaccaState, SelangorState, TerengganuState;
}









/*
-----------------------------------------------------------------------------------
    CALCULATE AVERAGE AGE FUNCTION
-----------------------------------------------------------------------------------
*/
double calculateAverageAge(const vector<Student>& students) {
    if (students.empty()) {
        return 0.0; // Return 0 if there are no students
    }

    int totalAge = 0;
    for (const auto& student : students) {
        totalAge += student.age;
    }

    return static_cast<double>(totalAge) / students.size();
}




/*
-----------------------------------------------------------------------------------
    BINARY SEARCH FUNCTION
-----------------------------------------------------------------------------------
*/
int binarySearch(const Student students[], int l, int r, const string& x) {
    if (r >= l) {
        int mid = l + (r - l) / 2;

        if (students[mid].id == x)
            return mid;

        if (students[mid].id > x)
            return binarySearch(students, l, mid - 1, x);

        return binarySearch(students, mid + 1, r, x);
    }

    return -1;
}




/*
-----------------------------------------------------------------------------------
    LINEAR SEARCH FUNCTION
-----------------------------------------------------------------------------------
*/
int linearSearch(const Student students[], int n, const string& x) {
    for (int i = 0; i < n; i++) {
        if (students[i].id == x) {
            return i;
        }
    }
    return -1;
}




/*
-----------------------------------------------------------------------------------
    SWAP FUNCTION
-----------------------------------------------------------------------------------
*/
void customSwap(Student& a, Student& b, int& swapCount) {
    swap(a, b);  // Swaps the entire Student objects
    swapCount++;
}




/*
-----------------------------------------------------------------------------------
    MERGE SWAP FUNCTION
-----------------------------------------------------------------------------------
*/
int binarySearch(const vector<Student>& students, int l, int r, const string& x) {
    while (l <= r) {
        int mid = l + (r - l) / 2;
        if (students[mid].id == x) {
            return mid;
        }
        else if (students[mid].id < x) {
            l = mid + 1;
        }
        else {
            r = mid - 1;
        }
    }
    return -1;
}




/*
-----------------------------------------------------------------------------------
    LINEAR SEARCH FUNCTION
-----------------------------------------------------------------------------------
*/
/*int linearSearch(const vector<Student>& students, int x) {
    for (int i = 0; i < students.size(); ++i) {
        if (students[i].id == x) {
            return i;
        }
    }
    return -1;
}*/

int linearSearch(const std::vector<Student>& students, const string& idToSearch) {
    for (size_t i = 0; i < students.size(); ++i) {
        if (students[i].id == idToSearch) {
            return i; // Return the index if ID is found
        }
    }
    return -1; // Return -1 if ID is not found
}




/*
-----------------------------------------------------------------------------------
    DISPLAY DATA FUNCTION
-----------------------------------------------------------------------------------
*/
void displayStudents(const vector<Student>& students, int displayLimit) {

    const int fieldWidth = 20;
    cout << ""---------------------------------------------------------------------------------------------------------"" << endl;
    cout << ""ID\t|Name\t\t\t|Age\t|State\t\t|Department\t|Room Floor\t|Fees\t\t|"" << endl;
    /*cout << ""ID"" << string(fieldWidth - 2, ' ') << ""|Name"" << string(fieldWidth - 4, ' ')
        << ""|Age"" << string(fieldWidth - 2, ' ') << ""|State"" << string(fieldWidth - 6, ' ')
        << ""|Department"" << string(fieldWidth - 10, ' ') << ""|Room Floor"" << string(fieldWidth - 10, ' ')
        << ""|Fees"" << string(fieldWidth - 1, ' ') << ""|"" << endl;*/
    cout << ""---------------------------------------------------------------------------------------------------------"" << endl;
    int count = 0;
    for (const auto& student : students) {

        if (count >= displayLimit) break;

        if (student.name.length() >= 15) {
            if (student.state.length() > 5) {
                if (student.fees.length() > 5) {
                    cout << student.id << ""\t|"" << student.name << ""\t|"" << student.age << ""\t|"" << student.state << ""\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t|"" << endl;
                }
                else {
                    cout << student.id << ""\t|"" << student.name << ""\t|"" << student.age << ""\t|"" << student.state << ""\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t\t|"" << endl;
                }

            }
            else {

                if (student.fees.length() > 5) {
                    cout << student.id << ""\t|"" << student.name << ""\t|"" << student.age << ""\t|"" << student.state << ""\t\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t|"" << endl;
                }
                else {
                    cout << student.id << ""\t|"" << student.name << ""\t|"" << student.age << ""\t|"" << student.state << ""\t\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t\t|"" << endl;
                }
            }
        }
        else {
            if (student.state.length() > 5) {

                if (student.fees.length() > 5) {
                    cout << student.id << ""\t|"" << student.name << ""\t\t|"" << student.age << ""\t|"" << student.state << ""\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t|"" << endl;
                }
                else {
                    cout << student.id << ""\t|"" << student.name << ""\t\t|"" << student.age << ""\t|"" << student.state << ""\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t\t|"" << endl;
                }
            }
            else {
                if (student.fees.length() > 5) {
                    cout << student.id << ""\t|"" << student.name << ""\t\t|"" << student.age << ""\t|"" << student.state << ""\t\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t|"" << endl;
                }
                else {
                    cout << student.id << ""\t|"" << student.name << ""\t\t|"" << student.age << ""\t|"" << student.state << ""\t\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t\t|"" << endl;
                }
            }
        }


        /* cout << student.id << string(fieldWidth - to_string(student.id).length(), ' ')
             << ""|"" << student.name << string(fieldWidth - student.name.length(), ' ')
             << ""|"" << student.age << string(fieldWidth - to_string(student.age).length(), ' ')
             << ""|"" << student.state << string(fieldWidth - student.state.length(), ' ')
             << ""|"" << student.department << string(fieldWidth - student.department.length(), ' ')
             << ""|"" << student.roomFloor << string(fieldWidth - to_string(student.roomFloor).length(), ' ')
             << ""|"" << student.fees << string(fieldWidth - student.fees.length(), ' ') << ""|"" << endl;*/

        count++;
    }
    cout << ""---------------------------------------------------------------------------------------------------------"" << endl;
}




/*
-----------------------------------------------------------------------------------
    MAIN FUNCTION
-----------------------------------------------------------------------------------
*/

int main() {
    vector<Student> students;
    loadStudents(""output3.csv"", students);
    int swapCount = 0;
    int numStudents = 0;

    int choice;
    do {
        cout << ""----------------------------------------------------------------------------------"" << endl;
        cout << ""SATRIA MANAGEMENT SYSTEM"" << endl;
        cout << ""1) Unsort Data"" << endl;
        cout << ""2) Sorting"" << endl;
        cout << ""3) Search"" << endl;
        cout << ""4) Additional Features"" << endl;
        cout << ""5) Exit"" << endl;
        cout << ""----------------------------------------------------------------------------------"" << endl;
        cout << ""\nEnter choice: "";
        cin >> choice;

        switch (choice) {
        case 1: {
            cout << ""Unsorted Data"" << endl;
            displayStudents(students, min(100, static_cast<int>(students.size())));
            main();
            break;
        }
        case 2: {
            int sortChoice = 0;
            string sortChoiceWord = """";
            do {
                cout << ""----------------------------------------------------------------------------------"" << endl;
                cout << ""Sorting Menu"" << endl;
                cout << ""1) Quick Sort"" << endl;
                cout << ""2) Merge Sort"" << endl;
                cout << ""3) Back"" << endl;
                cout << ""----------------------------------------------------------------------------------"" << endl;
                cout << ""\nEnter choice: "";
                cin >> sortChoice;

                swapCount = 0; // Reset swap count before sorting
                switch (sortChoice) {
                case 1:{
                    cout << ""\nStudents sorted using Quick Sort!"" << endl;
                    auto startquick = high_resolution_clock::now();
                    quickSort(students, 0, students.size() - 1, swapCount); // Pass swapCount here
                    displayStudents(students, min(100, static_cast<int>(students.size())));
                    auto stopquick = high_resolution_clock::now();
                    auto durationquick = duration_cast<milliseconds>(stopquick - startquick);
                    
                    cout << ""Total swaps: "" << swapCount << ""\n"" << endl;
                    cout << ""Total runtime: "" << (durationquick.count() * 0.001) << "" seconds"" << endl;
                    main();
                    break;}
                case 2:{
                	//sini
                    cout << ""\nStudents sorted using Merge Sort!"" << endl;
                    auto startmerge = high_resolution_clock::now();
                    mergeSort(students, 0, students.size() - 1, swapCount);
                    displayStudents(students, min(100, static_cast<int>(students.size())));
                    auto stopmerge = high_resolution_clock::now();
                    auto durationmerge = duration_cast<milliseconds>(stopmerge - startmerge);
                    
                    cout << ""Total swaps: "" << swapCount << ""\n"" << endl;
                    cout << ""Total runtime: "" << (durationmerge.count() * 0.001) << "" seconds"" << endl;
                    main();
                    break;}
                case 3:{
                	main();
					break;
				}
                default:
                    if (!cin.fail()) {
                        cout << ""Please input a valid number!"" << ""\n"" << endl;
                        sortChoiceWord = to_string(sortChoice);
                    }
                    else {
                        cin.clear();
                        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                        cout << ""Invalid input. Please enter an integer!"" << ""\n"" << endl;
                        sortChoiceWord = to_string(sortChoice);
                    }
                }

            } while ((sortChoiceWord != ""1"") && (sortChoiceWord != ""2"") && (sortChoiceWord != ""3""));


        }
        case 3: {
            int searchChoice = 0;
            string searchChoiceWord = """";
            do {
                cout << ""----------------------------------------------------------------------------------"" << endl;
                cout << ""Search Menu"" << endl;
                cout << ""1) Binary Search"" << endl;
                cout << ""2) Linear Search"" << endl;
                cout << ""3) Search Improvement"" << endl;
                cout << ""4) Back"" << endl;
                cout << ""----------------------------------------------------------------------------------"" << endl;
                cout << ""Enter choice: "";
                cin >> searchChoice;


                int index = -1;
                if (searchChoice == 1) {
                    cout << ""Enter ID to search: "";
                    string idToSearch[100];
                    for(int x=0;x<100;x++){
                    	cin >> idToSearch[x];
					}

                    // Make sure students are sorted before binary search
                    quickSort(students, 0, students.size() - 1, swapCount);
                    
                    //sini
                    auto startbinary = high_resolution_clock::now();
					for(int x=0;x<100;x++){
						index = binarySearch(students, 0, students.size() - 1, idToSearch[x]);
						if (index != -1) {
                        cout << ""\nStudent found."" << endl;
                        /*cout << ""ID: "" << students[index].id << '\n';
                        cout << ""Name: "" << students[index].name << '\n';
                        cout << ""Age: "" << students[index].age << '\n';
                        cout << ""Department: "" << students[index].department << ""\n"" << endl;*/
                        // ... Print other details ...
	                    }
	                    else {
	                        cout << ""\nStudent not found."" << endl;
	                    }
					}
					auto stopbinary = high_resolution_clock::now();
                    auto durationbinary = duration_cast<milliseconds>(stopbinary - startbinary);
                    
                    //cout << ""Total swaps: "" << swapCount << ""\n"" << endl;
                    cout << ""Total runtime: "" << (durationbinary.count() * 0.001) << "" seconds"" << endl;
                    //sini end
                    main();
                }
                else if (searchChoice == 2) {
                    cout << ""Enter ID to search: "";
                    string idToSearch[100];
                    for(int x=0; x < 100; x++){
                    	cin >> idToSearch[x];
					}
					
					auto startlinear = high_resolution_clock::now();
					for(int x=0;x<100;x++){
						index = linearSearch(students, idToSearch[x]);
						
						if (index != -1) {
                        cout << ""\nStudent found."" << endl;
                        /*cout << ""ID: "" << students[index].id << '\n';
                        cout << ""Name: "" << students[index].name << '\n';
                        cout << ""Age: "" << students[index].age << '\n';
                        cout << ""Department: "" << students[index].department << ""\n"" << endl;*/
                        // ... Print other details ...
	                    }
	                    else {
	                        cout << ""\nStudent not found."" << endl;
	                    }
					}
					
					auto stoplinear = high_resolution_clock::now();
                    auto durationlinear = duration_cast<milliseconds>(stoplinear - startlinear);
                    
                    //cout << ""Total swaps: "" << swapCount << ""\n"" << endl;
                    cout << ""Total runtime: "" << (durationlinear.count() * 0.001) << "" seconds"" << endl;
                    
                    main();
                }
                else if (searchChoice == 3) {
                	cout << ""Enter ID to search: "";
			        string idToSearch[100];
			        for (int x = 0; x < 100; x++) {
			            cin >> idToSearch[x];
			        }
			
			        auto start = high_resolution_clock::now();
			
			            // Binary Search
			            quickSort(students, 0, students.size() - 1, swapCount);
			            
			            cout << ""\nResults:\n"";
			            cout << ""-------------------------------------------------------------------------\n"";
			            cout << ""| ID         | Name\t\t\t| Age\t\t| Department\t|\n"";
			            cout << ""-------------------------------------------------------------------------\n"";
			            for (int x = 0; x < 100; x++) {
			                index = binarySearch(students, 0, students.size() - 1, idToSearch[x]);
			                cout << ""| "" << idToSearch[x] << "" | "";
			                if (index != -1) {
			                    //Student found
			                    if ((students[index].name.length() > 10) && (students[index].name.length() <= 15)){ 
								 cout << students[index].name << ""       \t| "" << students[index].age << "" \t\t| "" << students[index].department << "" \t\t|\n"";
                				} else if (students[index].name.length() > 15) {
                					cout << students[index].name << "" \t| "" << students[index].age << "" \t\t| "" << students[index].department << "" \t\t|\n"";
								} else {
                				 cout << students[index].name << "" \t\t\t| "" << students[index].age << "" \t\t| "" << students[index].department << "" \t\t|\n"";
								}
                	
                

			                } else {
			                    // Student not found
			                    cout << ""Not Found\t\t| Not Found\t| Not Found\t|\n"";
			                }
			                
			            }
			            cout << ""-------------------------------------------------------------------------"" << endl ;
			            cout << ""\n"";
                    main();
                }
                else if (searchChoice == 4) {
                    main();
                }
                else {
                    if (!cin.fail()) {
                        cout << ""Please input a valid number!"" << ""\n"" << endl;
                        searchChoiceWord = to_string(searchChoice);
                    }
                    else {
                        cin.clear();
                        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                        cout << ""Invalid input. Please enter an integer!"" << ""\n"" << endl;
                        searchChoiceWord = to_string(searchChoice);
                    }
                }
            } while ((searchChoiceWord != ""1"") && (searchChoiceWord != ""2"") && (searchChoiceWord != ""3""));


        }
        case 4: {
            int searchChoice = 0;
            string searchChoiceWord = """";

            do {
                cout << ""\n----------------------------------------------------------------------------------"" << endl;
                cout << ""Additional Features Menu"" << endl;
                cout << ""1) Calculate Age"" << endl;
                cout << ""2) Total Student"" << endl;
                cout << ""3) Back"" << endl;
                cout << ""----------------------------------------------------------------------------------"" << endl;
                cout << ""Enter choice: "";
                cin >> searchChoice;

                switch (searchChoice)
                {
                case 1: {
                    // Inside your main function, possibly at the end or wherever you find appropriate
                    double averageAge = calculateAverageAge(students);
                    cout << ""\nAverage age of students: "" << averageAge << ""\n"" << endl;
                    main();
                    break;
                }
                case 2: {
                    int totalChoice;
					cout << ""\nChoose total you want to show"" << endl;
					cout << ""1) Total by Department"" << endl;
					cout << ""2) Total by State"" << endl;
					cout << ""Enter choice: "";
					cin >> totalChoice;
					
					if (totalChoice == 1) {
					    calculateTotalDept(students);
					}
					else if (totalChoice == 2) {
					    calculateTotalState(students);
					}
					else {
					    cout << ""Invalid input!"" << endl;
					}
					
					main();
                    break;
                }
                case 3: {
                    main();
                }
                default:
                    if (!cin.fail()) {
                        cout << ""Please input a valid number!"" << ""\n"" << endl;
                        searchChoiceWord = to_string(searchChoice);
                    }
                    else {
                        cin.clear();
                        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                        cout << ""Invalid input. Please enter an integer!"" << ""\n"" << endl;
                        searchChoiceWord = to_string(searchChoice);
                    }
                }
            } while ((searchChoiceWord != ""1"") && (searchChoiceWord != ""2"") && (searchChoiceWord != ""3""));


        }
        case 5: {
        	exit(0);
            break;
        }
        default:
            if (!cin.fail()) {
                cout << ""Please input a valid number!"" << ""\n"" << endl;
                main();
            }
            else {
                cin.clear();
                cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                cout << ""Invalid input. Please enter an integer!"" << ""\n"" << endl;
                main();
            }

        }
    } while (choice == 1 || choice == 2);

}"
AhbDJHkr,turtle graphics L systems,Mangus875,Python,Wednesday 10th of January 2024 09:40:33 PM CDT,"import turtle
t = turtle.Turtle()

def Lsystem(axiom, rules, times=1):
	result = """";
	for i in range(times):
		for c in axiom:
			if c in rules:
				result += rules[c]
			else:
				result += c
		axiom = result
		result = """"
	return axiom

def cleanPath(path, keep):
	newPath = """"
	for c in path:
		if c in keep:
			newPath += c
	return newPath

def drawPath(path, rules):
	for c in path:
		if c in rules:
			rules[c][0](*rules[c][1:len(rules[c])])
	t.tracer(1)

def fd(len):
	t.pu()
	t.fd(len)
	t.pd()

def bk(len):
	t.pu()
	t.bk(len)
	t.pd()

def lt(a):
	t.speed(speed*5)
	t.lt(a)
	t.speed(speed)

def rt(a):
	t.speed(speed*5)
	t.rt(a)
	t.speed(speed)

ang = 90
segLen = 4
iters = 5
speed = 1
rate = 1
tilt = 0
thickness = 1

#t.ht()
t.tracer(rate)
t.width(thickness)
t.pu()
t.speed(0)
t.goto(0, 0)
t.pd()
t.speed(rate)
path = Lsystem(""AFB"", {
	'A': 'AFB+',
	'B': 'FB'
},iters)
rt(tilt)
#t.begin_fill() 
drawPath(path, {
	'F': [t.fd, segLen],
	'+': [rt, ang]
})
#t.end_fill()"
k2jDPX6w,Merge Sort Khai,Zuhairy_Harry,C++,Wednesday 10th of January 2024 07:32:50 PM CDT,"// Merge Sort
void merge(Book catalog[], int left, int middle, int right) {
    int n1 = middle - left + 1;
    int n2 = right - middle;

    // Create temporary arrays
    Book* leftArray = new Book[n1];
    Book* rightArray = new Book[n2];

    // Copy data to temporary arrays leftArray[] and rightArray[]
    for (int i = 0; i < n1; i++)
        leftArray[i] = catalog[left + i];
    for (int j = 0; j < n2; j++)
        rightArray[j] = catalog[middle + 1 + j];

    // Merge the temporary arrays back into catalog[left..right]
    int i = 0;
    int j = 0;
    int k = left;
    while (i < n1 && j < n2) {
        if (leftArray[i].bookID <= rightArray[j].bookID) {
            catalog[k] = leftArray[i];
            i++;
        }
        else {
            catalog[k] = rightArray[j];
            j++;
            // Increment the total swaps counter for Merge Sort
            totalSwapsMergeSort++;
        }
        k++;
    }

    // Copy the remaining elements of leftArray[], if there are any
    while (i < n1) {
        catalog[k] = leftArray[i];
        i++;
        k++;
    }

    // Copy the remaining elements of rightArray[], if there are any
    while (j < n2) {
        catalog[k] = rightArray[j];
        j++;
        k++;
    }

    // Release allocated memory for temporary arrays
    delete[] leftArray;
    delete[] rightArray;
}

// Merge Sort
void mergeSort(Book catalog[], int left, int right) {
    if (left < right) {
        // Same as (left + right) / 2, but avoids overflow for large left and right
        int middle = left + (right - left) / 2;

        // Sort first and second halves
        mergeSort(catalog, left, middle);
        mergeSort(catalog, middle + 1, right);

        // Merge the sorted halves
        merge(catalog, left, middle, right);
    }
}"
CZ6pLzgi,Home Builder,tarnovsky,Lua,Wednesday 10th of January 2024 07:27:26 PM CDT,"print (""Enter length"")
local input = read()
local length = input

print (""Enter width (right) "")
local input = read()
local width = input

print (""Enter number of block stacks "")
local input = read()
local stacks = input

local answer= ""y""
print (""floor y/n"")
local input = read()
local turn = false
local z = 0
local block = 1
if input == answer
then
    for x = 0,width,1
	do
        for y = 0,length,1
		do
			turtle.digDown()
			turtle.placeDown()
			z = z + 1
			if z == 64
			then
				block = block + 1
				if block == stacks + 1
				then
                    print (""Insert more blocks"")
					local input = read()
                    block = 1
				end
				turtle.select(block)
				z = 0
			end
			turtle.forward()
		end
		if turn == false
		then
            turtle.turnRight()
            turtle.forward()
            turtle.turnRight()
            turtle.forward()
            turn = true
		else
			turtle.turnLeft()
            turtle.forward()
            turtle.turnLeft()
            turtle.forward()
            turn = false
		end
	end
else
	print(""No floor"")
end"
8mquW5ad,Untitled,Rofyda_Elghadban1,C++,Wednesday 10th of January 2024 07:18:50 PM CDT," #include <bits/stdc++.h> 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define sz(x) (int)(x.size())
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */

 /***********************************************************************************/
 using namespace std;
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }
 ll partial[10000001]{},partial2[10000001]{};
 void solve(){
  ll n,m,q,counter=0;
  cin>>n>>m>>q;
  vector<ll>v(n),k,p;
  cin(v);
  while(m--){
    ll l,r,d;
    cin>>l>>r>>d;
    p.push_back(l);
    p.push_back(r);
    p.push_back(d);
  }
  map<ll,ll>mp;
  ll qq=q;
  while(q--){ 
    ll x,y;
    cin>>x>>y;
    k.push_back(x);
    k.push_back(y);
    partial2[x]+=1;
    partial2[y+1]-=1;
  }
  for(ll i=1;i<=qq;i++){
    partial2[i]+=partial2[i-1];
  }
  for(ll i=0;i<qq;i++){
    mp[i+1]=partial2[i+1];
  }
  for(ll i=0;i<p.size();i+=3){
    counter++;
    partial[p[i]]+=(p[i+2]*mp[counter]);
    partial[p[i+1]+1]-=(p[i+2]*mp[counter]);
  }
  for(ll i=1;i<=n;i++){
    partial[i]+=partial[i-1];
  }
  for(ll i=0;i<n;i++){
    v[i]+=partial[i+1];
  }
  cout(v);
  cout<<""\n"";
 }

 int main(){
  Rofyda_Elghadban(); 
  // int t;
  // cin>>t;
  // while(t--){
  //   solve();
  // }
  solve();
  return 0;
 }

"
76SBkK3A,2024-01-10_stats.json,rdp_snitch,JSON,Wednesday 10th of January 2024 06:18:14 PM CDT,"{
  ""ip"": {
    ""158.220.82.163"": 468,
    ""74.105.22.131"": 45,
    ""45.130.83.96"": 3,
    ""194.165.17.21"": 84,
    ""94.26.226.188"": 3,
    ""194.165.16.10"": 6,
    ""165.22.35.237"": 21,
    ""87.251.75.145"": 6,
    ""149.34.246.34"": 6,
    ""62.204.41.199"": 15,
    ""45.227.254.55"": 12,
    ""193.142.146.227"": 9,
    ""185.196.220.41"": 9,
    ""198.235.24.213"": 9,
    ""43.134.66.207"": 6,
    ""141.98.82.22"": 3,
    ""87.251.75.64"": 3,
    ""194.187.176.113"": 3,
    ""167.94.138.35"": 3,
    ""185.170.144.3"": 6,
    ""36.91.222.100"": 3,
    ""87.251.75.120"": 6,
    ""179.60.147.118"": 3,
    ""141.98.11.142"": 9,
    ""141.98.11.138"": 9,
    ""202.55.132.183"": 3,
    ""205.210.31.43"": 9,
    ""141.98.9.34"": 3,
    ""45.93.20.204"": 18,
    ""194.165.16.72"": 6,
    ""103.184.47.83"": 3,
    ""47.100.52.159"": 9,
    ""198.74.56.135"": 3,
    ""201.80.184.90"": 3,
    ""152.32.153.228"": 3,
    ""80.66.76.92"": 6,
    ""58.218.204.183"": 9,
    ""81.143.229.7"": 6,
    ""205.210.31.240"": 9,
    ""216.73.161.11"": 3,
    ""216.73.160.245"": 3,
    ""185.122.204.81"": 75,
    ""196.190.117.7"": 3,
    ""13.233.51.182"": 6,
    ""216.73.160.236"": 3,
    ""128.14.134.170"": 12,
    ""83.97.73.77"": 3,
    ""128.14.134.134"": 12,
    ""136.144.242.177"": 6,
    ""109.69.7.157"": 3,
    ""194.165.16.76"": 6,
    ""205.210.31.96"": 9,
    ""77.90.185.2"": 9,
    ""45.227.254.8"": 6,
    ""179.60.147.51"": 3,
    ""193.233.21.155"": 3
  },
  ""asn"": {
    ""AS51167"": 468,
    ""AS701"": 45,
    ""AS206092"": 12,
    ""AS48721"": 102,
    ""AS49505"": 3,
    ""AS14061"": 21,
    ""AS208091"": 21,
    ""AS212238"": 6,
    ""AS59425"": 15,
    ""AS267784"": 18,
    ""AS208046"": 18,
    ""AS396982"": 36,
    ""AS132203"": 6,
    ""AS209588"": 12,
    ""AS208843"": 3,
    ""AS398324"": 3,
    ""AS197414"": 6,
    ""AS7713"": 3,
    ""AS209605"": 18,
    ""AS63737"": 3,
    ""AS57523"": 93,
    ""AS146817"": 3,
    ""AS37963"": 9,
    ""AS63949"": 3,
    ""AS28573"": 3,
    ""AS135377"": 3,
    ""AS4134"": 9,
    ""AS2856"": 6,
    ""AS24757"": 3,
    ""AS16509"": 6,
    ""AS21859"": 24,
    ""AS208312"": 3,
    ""AS20857"": 6,
    ""AS21183"": 3,
    ""AS198465"": 9,
    ""AS56380"": 3
  },
  ""isp"": {
    ""Contabo GmbH"": 468,
    ""Verizon Business"": 45,
    ""Ipxo Limited"": 12,
    ""Flyservers S.A."": 132,
    ""OOO \""Network of data-centers \""Selectel\"""": 3,
    ""DigitalOcean, LLC"": 21,
    ""Xhost Internet Solutions LP"": 27,
    ""Datacamp Limited"": 6,
    ""Horizon LLC"": 15,
    ""ColocationX Ltd."": 18,
    ""Google LLC"": 36,
    ""Shenzhen Tencent Computer Systems Company Limited"": 6,
    ""Alpha Strike Labs GmbH"": 3,
    ""Censys, Inc."": 3,
    ""PT Telekomunikasi Indonesia"": 3,
    ""UAB Host Baltic"": 18,
    ""Vietserver Services Technology Company Limited"": 3,
    ""Chang Way Technologies Co. Limited"": 93,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""Addresses CNNIC"": 9,
    ""Akamai Technologies, Inc."": 3,
    ""Claro NXT Telecomunicacoes Ltda"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chinanet"": 9,
    ""BT Public Internet Service"": 6,
    ""Ethiotelecom"": 3,
    ""Amazon Technologies Inc."": 6,
    ""Zenlayer Inc"": 24,
    ""Red Byte LLC"": 3,
    ""TransIP BV"": 6,
    ""Vodafone Network"": 3,
    ""BtHoster LTD"": 9,
    ""''IT FRUIT'' S.R.L."": 3
  },
  ""org"": {
    ""Contabo GmbH"": 468,
    ""Verizon Business"": 45,
    ""External"": 3,
    ""Flyservers S.A"": 102,
    ""Unknown"": 39,
    ""DigitalOcean, LLC"": 21,
    ""Xhost Internet Solutions"": 21,
    ""Datacamp Limited"": 6,
    ""Horizon LLC"": 15,
    ""UAB Host Baltic"": 18,
    ""ColocationX Ltd"": 9,
    ""Makut Investments"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Tencent Cloud Computing"": 6,
    ""Vdsline"": 3,
    ""Alpha Strike Labs GmbH"": 3,
    ""Censys, Inc"": 3,
    ""Xhostis"": 6,
    ""Telekomunikasi Indonesia"": 3,
    ""Cloud Solutions S.A"": 6,
    ""VietServer Services technology company limited"": 3,
    ""Alviva Holding Limited"": 3,
    ""Starcrecium Limited"": 93,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""Aliyun Computing Co., LTD"": 9,
    ""Linode"": 3,
    ""NET Servi\u00e7os de Comunica\u00e7\u00e3o S.A."": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Chinanet JS"": 9,
    ""Bandito Networks"": 9,
    ""AWS EC2 (ap-south-1)"": 6,
    ""ZENLA"": 24,
    ""Red Byte LLC"": 3,
    ""BtHoster LTD"": 9,
    ""FOP Dmytro Nedilskyi"": 3
  },
  ""regionName"": {
    ""England"": 474,
    ""New Jersey"": 69,
    ""New York"": 12,
    ""Kaunas"": 120,
    ""Moscow"": 114,
    ""North Holland"": 45,
    ""Hesse"": 6,
    ""Vilnius"": 18,
    ""Virginia"": 9,
    ""California"": 60,
    ""North West"": 6,
    ""Provincia de Panama"": 3,
    ""Land Berlin"": 3,
    ""Michigan"": 3,
    ""Jakarta"": 6,
    ""Distrito Federal"": 6,
    ""Da Nang"": 3,
    ""Hubei"": 3,
    ""Shanghai"": 9,
    ""Minas Gerais"": 3,
    ""Jiangsu"": 9,
    ""Addis Ababa"": 3,
    ""Maharashtra"": 6,
    ""Tirana"": 3,
    ""Bavaria"": 9,
    ""Chi\u0219in\u0103u Municipality"": 3
  },
  ""country"": {
    ""United Kingdom"": 474,
    ""United States"": 153,
    ""Lithuania"": 138,
    ""Russia"": 114,
    ""The Netherlands"": 45,
    ""Germany"": 18,
    ""Singapore"": 6,
    ""Panama"": 3,
    ""Indonesia"": 6,
    ""Venezuela"": 6,
    ""Vietnam"": 3,
    ""China"": 21,
    ""Brazil"": 3,
    ""Ethiopia"": 3,
    ""India"": 6,
    ""Albania"": 3,
    ""Moldova"": 3
  },
  ""account"": {
    ""hello"": 603,
    ""142.93.8.59"": 132,
    ""(empty)"": 27,
    ""Test"": 54,
    ""Administr"": 63,
    ""Domain"": 57,
    ""QIlHOnwYS"": 3,
    ""hcexpu"": 3,
    ""IhxqqH"": 3,
    ""user"": 6,
    ""ViPQwTeCf"": 3,
    ""KkWTvN"": 3,
    ""meuLEy"": 3,
    ""Administrator"": 3,
    ""XZfgKQbXK"": 3,
    ""EcLgkM"": 3,
    ""BaTCgK"": 3,
    ""u5axy4rv"": 12,
    ""bwwawruv"": 12,
    ""okFyxxMTe"": 3,
    ""VrcRcl"": 3,
    ""iyhDzc"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1005
  },
  ""client_build"": {
    ""Unknown"": 1005
  },
  ""client_name"": {
    ""Unknown"": 1005
  },
  ""ip_type"": {
    ""hosting"": 573,
    ""Unknown"": 360,
    ""mobile & proxy"": 12,
    ""hosting & proxy"": 18,
    ""mobile"": 12,
    ""proxy"": 30
  }
}"
305YBWui,2024-01-10_stats.json,rdp_snitch,JSON,Wednesday 10th of January 2024 06:16:14 PM CDT,"{
  ""ip"": {
    ""158.220.82.163"": 312,
    ""74.105.22.131"": 30,
    ""45.130.83.96"": 2,
    ""194.165.17.21"": 56,
    ""94.26.226.188"": 2,
    ""194.165.16.10"": 4,
    ""165.22.35.237"": 14,
    ""87.251.75.145"": 4,
    ""149.34.246.34"": 4,
    ""62.204.41.199"": 10,
    ""45.227.254.55"": 8,
    ""193.142.146.227"": 6,
    ""185.196.220.41"": 6,
    ""198.235.24.213"": 6,
    ""43.134.66.207"": 4,
    ""141.98.82.22"": 2,
    ""87.251.75.64"": 2,
    ""194.187.176.113"": 2,
    ""167.94.138.35"": 2,
    ""185.170.144.3"": 4,
    ""36.91.222.100"": 2,
    ""87.251.75.120"": 4,
    ""179.60.147.118"": 2,
    ""141.98.11.142"": 6,
    ""141.98.11.138"": 6,
    ""202.55.132.183"": 2,
    ""205.210.31.43"": 6,
    ""141.98.9.34"": 2,
    ""45.93.20.204"": 12,
    ""194.165.16.72"": 4,
    ""103.184.47.83"": 2,
    ""47.100.52.159"": 6,
    ""198.74.56.135"": 2,
    ""201.80.184.90"": 2,
    ""152.32.153.228"": 2,
    ""80.66.76.92"": 4,
    ""58.218.204.183"": 6,
    ""81.143.229.7"": 4,
    ""205.210.31.240"": 6,
    ""216.73.161.11"": 2,
    ""216.73.160.245"": 2,
    ""185.122.204.81"": 50,
    ""196.190.117.7"": 2,
    ""13.233.51.182"": 4,
    ""216.73.160.236"": 2,
    ""128.14.134.170"": 8,
    ""83.97.73.77"": 2,
    ""128.14.134.134"": 8,
    ""136.144.242.177"": 4,
    ""109.69.7.157"": 2,
    ""194.165.16.76"": 4,
    ""205.210.31.96"": 6,
    ""77.90.185.2"": 6,
    ""45.227.254.8"": 4,
    ""179.60.147.51"": 2,
    ""193.233.21.155"": 2
  },
  ""asn"": {
    ""AS51167"": 312,
    ""AS701"": 30,
    ""AS206092"": 8,
    ""AS48721"": 68,
    ""AS49505"": 2,
    ""AS14061"": 14,
    ""AS208091"": 14,
    ""AS212238"": 4,
    ""AS59425"": 10,
    ""AS267784"": 12,
    ""AS208046"": 12,
    ""AS396982"": 24,
    ""AS132203"": 4,
    ""AS209588"": 8,
    ""AS208843"": 2,
    ""AS398324"": 2,
    ""AS197414"": 4,
    ""AS7713"": 2,
    ""AS209605"": 12,
    ""AS63737"": 2,
    ""AS57523"": 62,
    ""AS146817"": 2,
    ""AS37963"": 6,
    ""AS63949"": 2,
    ""AS28573"": 2,
    ""AS135377"": 2,
    ""AS4134"": 6,
    ""AS2856"": 4,
    ""AS24757"": 2,
    ""AS16509"": 4,
    ""AS21859"": 16,
    ""AS208312"": 2,
    ""AS20857"": 4,
    ""AS21183"": 2,
    ""AS198465"": 6,
    ""AS56380"": 2
  },
  ""isp"": {
    ""Contabo GmbH"": 312,
    ""Verizon Business"": 30,
    ""Ipxo Limited"": 8,
    ""Flyservers S.A."": 88,
    ""OOO \""Network of data-centers \""Selectel\"""": 2,
    ""DigitalOcean, LLC"": 14,
    ""Xhost Internet Solutions LP"": 18,
    ""Datacamp Limited"": 4,
    ""Horizon LLC"": 10,
    ""ColocationX Ltd."": 12,
    ""Google LLC"": 24,
    ""Shenzhen Tencent Computer Systems Company Limited"": 4,
    ""Alpha Strike Labs GmbH"": 2,
    ""Censys, Inc."": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""UAB Host Baltic"": 12,
    ""Vietserver Services Technology Company Limited"": 2,
    ""Chang Way Technologies Co. Limited"": 62,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""Addresses CNNIC"": 6,
    ""Akamai Technologies, Inc."": 2,
    ""Claro NXT Telecomunicacoes Ltda"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Chinanet"": 6,
    ""BT Public Internet Service"": 4,
    ""Ethiotelecom"": 2,
    ""Amazon Technologies Inc."": 4,
    ""Zenlayer Inc"": 16,
    ""Red Byte LLC"": 2,
    ""TransIP BV"": 4,
    ""Vodafone Network"": 2,
    ""BtHoster LTD"": 6,
    ""''IT FRUIT'' S.R.L."": 2
  },
  ""org"": {
    ""Contabo GmbH"": 312,
    ""Verizon Business"": 30,
    ""External"": 2,
    ""Flyservers S.A"": 68,
    ""Unknown"": 26,
    ""DigitalOcean, LLC"": 14,
    ""Xhost Internet Solutions"": 14,
    ""Datacamp Limited"": 4,
    ""Horizon LLC"": 10,
    ""UAB Host Baltic"": 12,
    ""ColocationX Ltd"": 6,
    ""Makut Investments"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Tencent Cloud Computing"": 4,
    ""Vdsline"": 2,
    ""Alpha Strike Labs GmbH"": 2,
    ""Censys, Inc"": 2,
    ""Xhostis"": 4,
    ""Telekomunikasi Indonesia"": 2,
    ""Cloud Solutions S.A"": 4,
    ""VietServer Services technology company limited"": 2,
    ""Alviva Holding Limited"": 2,
    ""Starcrecium Limited"": 62,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""Aliyun Computing Co., LTD"": 6,
    ""Linode"": 2,
    ""NET Servi\u00e7os de Comunica\u00e7\u00e3o S.A."": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Chinanet JS"": 6,
    ""Bandito Networks"": 6,
    ""AWS EC2 (ap-south-1)"": 4,
    ""ZENLA"": 16,
    ""Red Byte LLC"": 2,
    ""BtHoster LTD"": 6,
    ""FOP Dmytro Nedilskyi"": 2
  },
  ""regionName"": {
    ""England"": 316,
    ""New Jersey"": 46,
    ""New York"": 8,
    ""Kaunas"": 80,
    ""Moscow"": 76,
    ""North Holland"": 30,
    ""Hesse"": 4,
    ""Vilnius"": 12,
    ""Virginia"": 6,
    ""California"": 40,
    ""North West"": 4,
    ""Provincia de Panama"": 2,
    ""Land Berlin"": 2,
    ""Michigan"": 2,
    ""Jakarta"": 4,
    ""Distrito Federal"": 4,
    ""Da Nang"": 2,
    ""Hubei"": 2,
    ""Shanghai"": 6,
    ""Minas Gerais"": 2,
    ""Jiangsu"": 6,
    ""Addis Ababa"": 2,
    ""Maharashtra"": 4,
    ""Tirana"": 2,
    ""Bavaria"": 6,
    ""Chi\u0219in\u0103u Municipality"": 2
  },
  ""country"": {
    ""United Kingdom"": 316,
    ""United States"": 102,
    ""Lithuania"": 92,
    ""Russia"": 76,
    ""The Netherlands"": 30,
    ""Germany"": 12,
    ""Singapore"": 4,
    ""Panama"": 2,
    ""Indonesia"": 4,
    ""Venezuela"": 4,
    ""Vietnam"": 2,
    ""China"": 14,
    ""Brazil"": 2,
    ""Ethiopia"": 2,
    ""India"": 4,
    ""Albania"": 2,
    ""Moldova"": 2
  },
  ""account"": {
    ""hello"": 402,
    ""142.93.8.59"": 88,
    ""(empty)"": 18,
    ""Test"": 36,
    ""Administr"": 42,
    ""Domain"": 38,
    ""QIlHOnwYS"": 2,
    ""hcexpu"": 2,
    ""IhxqqH"": 2,
    ""user"": 4,
    ""ViPQwTeCf"": 2,
    ""KkWTvN"": 2,
    ""meuLEy"": 2,
    ""Administrator"": 2,
    ""XZfgKQbXK"": 2,
    ""EcLgkM"": 2,
    ""BaTCgK"": 2,
    ""u5axy4rv"": 8,
    ""bwwawruv"": 8,
    ""okFyxxMTe"": 2,
    ""VrcRcl"": 2,
    ""iyhDzc"": 2
  },
  ""keyboard"": {
    ""Unknown"": 670
  },
  ""client_build"": {
    ""Unknown"": 670
  },
  ""client_name"": {
    ""Unknown"": 670
  },
  ""ip_type"": {
    ""hosting"": 382,
    ""Unknown"": 240,
    ""mobile & proxy"": 8,
    ""hosting & proxy"": 12,
    ""mobile"": 8,
    ""proxy"": 20
  }
}"
Spp630LL,2024-01-10_stats.json,rdp_snitch,JSON,Wednesday 10th of January 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""158.220.82.163"": 156,
    ""74.105.22.131"": 15,
    ""45.130.83.96"": 1,
    ""194.165.17.21"": 28,
    ""94.26.226.188"": 1,
    ""194.165.16.10"": 2,
    ""165.22.35.237"": 7,
    ""87.251.75.145"": 2,
    ""149.34.246.34"": 2,
    ""62.204.41.199"": 5,
    ""45.227.254.55"": 4,
    ""193.142.146.227"": 3,
    ""185.196.220.41"": 3,
    ""198.235.24.213"": 3,
    ""43.134.66.207"": 2,
    ""141.98.82.22"": 1,
    ""87.251.75.64"": 1,
    ""194.187.176.113"": 1,
    ""167.94.138.35"": 1,
    ""185.170.144.3"": 2,
    ""36.91.222.100"": 1,
    ""87.251.75.120"": 2,
    ""179.60.147.118"": 1,
    ""141.98.11.142"": 3,
    ""141.98.11.138"": 3,
    ""202.55.132.183"": 1,
    ""205.210.31.43"": 3,
    ""141.98.9.34"": 1,
    ""45.93.20.204"": 6,
    ""194.165.16.72"": 2,
    ""103.184.47.83"": 1,
    ""47.100.52.159"": 3,
    ""198.74.56.135"": 1,
    ""201.80.184.90"": 1,
    ""152.32.153.228"": 1,
    ""80.66.76.92"": 2,
    ""58.218.204.183"": 3,
    ""81.143.229.7"": 2,
    ""205.210.31.240"": 3,
    ""216.73.161.11"": 1,
    ""216.73.160.245"": 1,
    ""185.122.204.81"": 25,
    ""196.190.117.7"": 1,
    ""13.233.51.182"": 2,
    ""216.73.160.236"": 1,
    ""128.14.134.170"": 4,
    ""83.97.73.77"": 1,
    ""128.14.134.134"": 4,
    ""136.144.242.177"": 2,
    ""109.69.7.157"": 1,
    ""194.165.16.76"": 2,
    ""205.210.31.96"": 3,
    ""77.90.185.2"": 3,
    ""45.227.254.8"": 2,
    ""179.60.147.51"": 1,
    ""193.233.21.155"": 1
  },
  ""asn"": {
    ""AS51167"": 156,
    ""AS701"": 15,
    ""AS206092"": 4,
    ""AS48721"": 34,
    ""AS49505"": 1,
    ""AS14061"": 7,
    ""AS208091"": 7,
    ""AS212238"": 2,
    ""AS59425"": 5,
    ""AS267784"": 6,
    ""AS208046"": 6,
    ""AS396982"": 12,
    ""AS132203"": 2,
    ""AS209588"": 4,
    ""AS208843"": 1,
    ""AS398324"": 1,
    ""AS197414"": 2,
    ""AS7713"": 1,
    ""AS209605"": 6,
    ""AS63737"": 1,
    ""AS57523"": 31,
    ""AS146817"": 1,
    ""AS37963"": 3,
    ""AS63949"": 1,
    ""AS28573"": 1,
    ""AS135377"": 1,
    ""AS4134"": 3,
    ""AS2856"": 2,
    ""AS24757"": 1,
    ""AS16509"": 2,
    ""AS21859"": 8,
    ""AS208312"": 1,
    ""AS20857"": 2,
    ""AS21183"": 1,
    ""AS198465"": 3,
    ""AS56380"": 1
  },
  ""isp"": {
    ""Contabo GmbH"": 156,
    ""Verizon Business"": 15,
    ""Ipxo Limited"": 4,
    ""Flyservers S.A."": 44,
    ""OOO \""Network of data-centers \""Selectel\"""": 1,
    ""DigitalOcean, LLC"": 7,
    ""Xhost Internet Solutions LP"": 9,
    ""Datacamp Limited"": 2,
    ""Horizon LLC"": 5,
    ""ColocationX Ltd."": 6,
    ""Google LLC"": 12,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Alpha Strike Labs GmbH"": 1,
    ""Censys, Inc."": 1,
    ""PT Telekomunikasi Indonesia"": 1,
    ""UAB Host Baltic"": 6,
    ""Vietserver Services Technology Company Limited"": 1,
    ""Chang Way Technologies Co. Limited"": 31,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""Addresses CNNIC"": 3,
    ""Akamai Technologies, Inc."": 1,
    ""Claro NXT Telecomunicacoes Ltda"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chinanet"": 3,
    ""BT Public Internet Service"": 2,
    ""Ethiotelecom"": 1,
    ""Amazon Technologies Inc."": 2,
    ""Zenlayer Inc"": 8,
    ""Red Byte LLC"": 1,
    ""TransIP BV"": 2,
    ""Vodafone Network"": 1,
    ""BtHoster LTD"": 3,
    ""''IT FRUIT'' S.R.L."": 1
  },
  ""org"": {
    ""Contabo GmbH"": 156,
    ""Verizon Business"": 15,
    ""External"": 1,
    ""Flyservers S.A"": 34,
    ""Unknown"": 13,
    ""DigitalOcean, LLC"": 7,
    ""Xhost Internet Solutions"": 7,
    ""Datacamp Limited"": 2,
    ""Horizon LLC"": 5,
    ""UAB Host Baltic"": 6,
    ""ColocationX Ltd"": 3,
    ""Makut Investments"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Tencent Cloud Computing"": 2,
    ""Vdsline"": 1,
    ""Alpha Strike Labs GmbH"": 1,
    ""Censys, Inc"": 1,
    ""Xhostis"": 2,
    ""Telekomunikasi Indonesia"": 1,
    ""Cloud Solutions S.A"": 2,
    ""VietServer Services technology company limited"": 1,
    ""Alviva Holding Limited"": 1,
    ""Starcrecium Limited"": 31,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""Aliyun Computing Co., LTD"": 3,
    ""Linode"": 1,
    ""NET Servi\u00e7os de Comunica\u00e7\u00e3o S.A."": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Chinanet JS"": 3,
    ""Bandito Networks"": 3,
    ""AWS EC2 (ap-south-1)"": 2,
    ""ZENLA"": 8,
    ""Red Byte LLC"": 1,
    ""BtHoster LTD"": 3,
    ""FOP Dmytro Nedilskyi"": 1
  },
  ""regionName"": {
    ""England"": 158,
    ""New Jersey"": 23,
    ""New York"": 4,
    ""Kaunas"": 40,
    ""Moscow"": 38,
    ""North Holland"": 15,
    ""Hesse"": 2,
    ""Vilnius"": 6,
    ""Virginia"": 3,
    ""California"": 20,
    ""North West"": 2,
    ""Provincia de Panama"": 1,
    ""Land Berlin"": 1,
    ""Michigan"": 1,
    ""Jakarta"": 2,
    ""Distrito Federal"": 2,
    ""Da Nang"": 1,
    ""Hubei"": 1,
    ""Shanghai"": 3,
    ""Minas Gerais"": 1,
    ""Jiangsu"": 3,
    ""Addis Ababa"": 1,
    ""Maharashtra"": 2,
    ""Tirana"": 1,
    ""Bavaria"": 3,
    ""Chi\u0219in\u0103u Municipality"": 1
  },
  ""country"": {
    ""United Kingdom"": 158,
    ""United States"": 51,
    ""Lithuania"": 46,
    ""Russia"": 38,
    ""The Netherlands"": 15,
    ""Germany"": 6,
    ""Singapore"": 2,
    ""Panama"": 1,
    ""Indonesia"": 2,
    ""Venezuela"": 2,
    ""Vietnam"": 1,
    ""China"": 7,
    ""Brazil"": 1,
    ""Ethiopia"": 1,
    ""India"": 2,
    ""Albania"": 1,
    ""Moldova"": 1
  },
  ""account"": {
    ""hello"": 201,
    ""142.93.8.59"": 44,
    ""(empty)"": 9,
    ""Test"": 18,
    ""Administr"": 21,
    ""Domain"": 19,
    ""QIlHOnwYS"": 1,
    ""hcexpu"": 1,
    ""IhxqqH"": 1,
    ""user"": 2,
    ""ViPQwTeCf"": 1,
    ""KkWTvN"": 1,
    ""meuLEy"": 1,
    ""Administrator"": 1,
    ""XZfgKQbXK"": 1,
    ""EcLgkM"": 1,
    ""BaTCgK"": 1,
    ""u5axy4rv"": 4,
    ""bwwawruv"": 4,
    ""okFyxxMTe"": 1,
    ""VrcRcl"": 1,
    ""iyhDzc"": 1
  },
  ""keyboard"": {
    ""Unknown"": 335
  },
  ""client_build"": {
    ""Unknown"": 335
  },
  ""client_name"": {
    ""Unknown"": 335
  },
  ""ip_type"": {
    ""hosting"": 191,
    ""Unknown"": 120,
    ""mobile & proxy"": 4,
    ""hosting & proxy"": 6,
    ""mobile"": 4,
    ""proxy"": 10
  }
}"
uNNJcuhF,Temporary - Blinking Face Animation Script,Xane_MM,Lua,Wednesday 10th of January 2024 05:31:23 PM CDT,"-- Animated Poppy face script
-- By Xane, written in 2023, updated in 2024
-- ============================
-- This script doesn't affect gameplay, only changing your character's face texture
-- to imitate Poppy's animated, blinking face. For this version of the blinking
-- script, please make your own composite (single images with eyes/mouth/face merged)
-- and submit them to Roblox. If the assets get approved, enter the open then closed
-- asset IDs in that order, and your character should blink.
local CompositeFace		= { ""rbxassetid://15934165923"", ""rbxassetid://15934174492"" }

if not game:IsLoaded() then game.Loaded:Wait() end

local Players			= game:GetService(""Players"")
local PlayerChar		= Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()
local PlayerHead		= PlayerChar:WaitForChild(""Head"")
local PlayerFace		= PlayerHead:WaitForChild(""face"")

-- Now that we have all of the references that we need, wait for a random
-- length then ""blink""; It's as simple as that!
local TimeUntilBlink	= 0.0
game:GetService(""RunService"").RenderStepped:Connect(function(_delta)
	TimeUntilBlink -= _delta

	if TimeUntilBlink <= 0.0 then
		TimeUntilBlink = 1.125 + math.random() * 1.5

		PlayerFace.Texture = CompositeFace[2]
		task.wait(0.0625)
		PlayerFace.Texture = CompositeFace[1]
	end
end)"
iRnBMGAN,p_sv,jacky_di,SQL,Wednesday 10th of January 2024 05:20:25 PM CDT,"WITH weekly_cohorts AS(
	SELECT 
		TIMESTAMP_TRUNC(timestamp, WEEK(MONDAY)) AS cohort_week
		, timestamp
		, player_id
		, device_type
	FROM installs
	WHERE timestamp BETWEEN '2021-07-01' AND '2021-07-31'
), retention AS(
	SELECT 
		wc.cohort_week
		, wc.device_type
		, COUNT(DISTINCT wc.player_id) AS users
		, COUNT(DISTINCT IF(va.date <= DATE_ADD(wc.timestamp, INTERVAL 1 DAY), va.player_id, NULL)) AS retention_1d
		, COUNT(DISTINCT IF(va.date > DATE_ADD(wc.timestamp, INTERVAL 1 DAY) and va.date <= DATE_ADD(wc.timestamp, INTERVAL 7 DAY), va.player_id, NULL)) AS retention_7d
		, COUNT(DISTINCT IF(va.date > DATE_ADD(wc.timestamp, INTERVAL 7 DAY) and va.date <= DATE_ADD(wc.timestamp, INTERVAL 14 DAY), va.player_id, NULL)) AS retention_14d
	FROM weekly_cohorts wc
	LEFT JOIN visits va ON wc.player_id = va.player_id 
	GROUP BY 
		wc.cohort_week
		, wc.device_type
)
SELECT 
	cohort_week
	, device_type
	, users
	, ROUND((retention_1d / users) * 100, 2) AS retention_rate_1d
	, ROUND((retention_7d / users) * 100, 2) AS retention_rate_7d
	, ROUND((retention_14d / users) * 100, 2) AS retention_rate_14d
FROM retention
ORDER BY 
	cohort_week
	, device_type;
"
seN9guws,Base de datos - Bermudez,Hatkat,MySQL,Wednesday 10th of January 2024 04:22:37 PM CDT,"CREATE DATABASE miInventarioZapateria;
USE miInventarioZapateria;

CREATE TABLE Color (
    IDColor SMALLINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    nombreColor VARCHAR(25) NOT NULL
);
CREATE TABLE Marca (
    IDMarca SMALLINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NombreMarca VARCHAR(25) NOT NULL,
    Descripcion VARCHAR(250)
);
CREATE TABLE Material (
    IDMaterial SMALLINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NombreMaterial VARCHAR(50) NOT NULL
);
CREATE TABLE Estilo (
    IDEstilo SMALLINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NombreEstilo VARCHAR(50) NOT NULL
);
CREATE TABLE Tipo (
    IDTipo SMALLINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NombreModelo VARCHAR(25) NOT NULL,
    MaterialID SMALLINT,
    EstiloID SMALLINT,
    FOREIGN KEY (MaterialID) REFERENCES Material(IDMaterial),
    FOREIGN KEY (EstiloID) REFERENCES Estilo(IDEstilo)
);
CREATE TABLE Zapato (
    IDZapato SMALLINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NumeroSerie VARCHAR(12) NOT NULL,
    FilaZapato CHAR NOT NULL,
    ColumnaZapato SMALLINT NOT NULL,
    PrecioZapato FLOAT NOT NULL,
    TallaZapato SMALLINT NOT NULL,
    CordonZapato BOOLEAN NOT NULL,
    MarcaID SMALLINT,
    ColorID SMALLINT,
    TipoID SMALLINT,
    FOREIGN KEY (MarcaID) REFERENCES Marca(IDMarca) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (TipoID) REFERENCES Tipo(IDTipo) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (ColorID) REFERENCES Color(IDColor) ON DELETE RESTRICT ON UPDATE CASCADE
);


INSERT INTO Material (IDMaterial, NombreMaterial) VALUES
    (DEFAULT, 'Cuero'),
    (DEFAULT, 'Piel Sintética'),
    (DEFAULT, 'Lona'),
    (DEFAULT, 'Sintético'),
    (DEFAULT, 'Textil');

INSERT INTO Estilo (IDEstilo, NombreEstilo) VALUES
    (DEFAULT, 'Clásico'),
    (DEFAULT, 'Moderno'),
    (DEFAULT, 'Retro');

INSERT INTO Tipo (IDTipo, NombreModelo, MaterialID, EstiloID) VALUES
    (DEFAULT, 'Zapatilla', 3, 1),
    (DEFAULT, 'Bota', 2, 2),
    (DEFAULT, 'Clásico', 5, 1),
    (DEFAULT, 'Mocasín', 1, 2),
    (DEFAULT, 'Navigo', 4, 2);

INSERT INTO Color (IDColor, nombreColor) VALUES
    (DEFAULT, 'Gris'),
    (DEFAULT, 'Amarillo'),
    (DEFAULT, 'Morado'),
    (DEFAULT, 'Rojo'),
    (DEFAULT, 'Rosa');

INSERT INTO Marca (NombreMarca, Descripcion)
VALUES ('Nike', 'Marca líder en calzado deportivo.'),
       ('Clarks', 'Conocida por su línea de zapatillas de moda y deportivas.'),
       ('Vans', 'Especializada en calzado deportivo y de estilo de vida.'),
       ('Adidas', 'Famosa por sus zapatos casuales y elegantes.'),
       ('Puma', 'Reconocida por sus zapatillas de skate y estilo urbano.');

INSERT INTO Zapato (NumeroSerie, FilaZapato, ColumnaZapato, PrecioZapato, TallaZapato, CordonZapato, MarcaID, ColorID, TipoID)
VALUES
    ('876530129534', 'B', 3, 35.75, 36, 1, 5, 4, 4),
    ('204931387962', 'D', 5, 20.50, 39, 0, 2, 2, 2),
    ('672104438741', 'A', 1, 60.00, 40, 1, 4, 3, 5),
    ('098372612345', 'C', 2, 25.75, 41, 0, 1, 5, 3),
    ('409856457820', 'D', 4, 50.25, 42, 1, 3, 4, 5),
    ('768291045678', 'A', 5, 40.00, 38, 0, 2, 5, 1),
    ('215849238765', 'B', 1, 15.25, 39, 1, 4, 3, 2),
    ('674031098765', 'C', 4, 45.75, 40, 0, 3, 1, 4),
    ('5A80CA314569', 'D', 3, 30.50, 41, 1, 1, 4, 5),
    ('4B63AC564738', 'A', 2, 55.50, 42, 0, 5, 3, 4),
    ('2C78AD987654', 'C', 4, 70.00, 38, 1, 1, 5, 3),
    ('1A93CA453678', 'B', 2, 45.75, 39, 0, 4, 2, 1),
    ('5D21DB012345', 'D', 3, 25.75, 40, 1, 3, 1, 5),
    ('4B05CA078901', 'A', 1, 10.25, 41, 0, 2, 4, 2),
    ('3A12AC034567', 'C', 5, 55.00, 36, 1, 5, 4, 3),
    ('2C86DB030256', 'B', 2, 30.50, 38, 0, 4, 3, 1),
    ('1D74CA096754', 'A', 4, 20.75, 39, 1, 1, 5, 2),
    ('5B30AC012345', 'D', 5, 40.25, 40, 0, 3, 1, 2),
    ('4A59DB078901', 'C', 1, 15.50, 41, 1, 2, 4, 5),
    ('3C28CA034567', 'B', 3, 65.75, 42, 0, 5, 3, 4),
    ('2A84DB030256', 'A', 4, 50.00, 38, 1, 4, 2, 4),
    ('1B36CA096754', 'C', 5, 35.75, 39, 0, 1, 5, 3),
    ('5D92AC012345', 'D', 3, 30.25, 40, 1, 3, 4, 2),
    ('4C57DB078901', 'B', 2, 10.50, 41, 0, 2, 4, 2),
    ('3A68CA034567', 'A', 1, 47.75, 36, 1, 5, 4, 4);

SELECT COUNT(*) FROM Zapato
JOIN Color ON Zapato.ColorID = Color.IDColor
WHERE Color.nombreColor = 'Rojo' AND Zapato.TallaZapato = 36;

SELECT Zapato.FilaZapato, Zapato.ColumnaZapato FROM Zapato
JOIN Tipo ON Zapato.TipoID = Tipo.IDTipo
WHERE Zapato.CordonZapato = 1 AND Tipo.NombreModelo = 'Mocasín' AND Zapato.PrecioZapato BETWEEN 25 AND 100;

SELECT MIN(PrecioZapato)
FROM Zapato
WHERE ColumnaZapato = 4;

SELECT PrecioZapato
FROM Zapato
JOIN Marca ON Zapato.MarcaID = Marca.IDMarca
WHERE Marca.NombreMarca = 'Puma' ORDER BY PrecioZapato ASC LIMIT 5;

SELECT COUNT(*)
FROM Zapato
JOIN Marca ON Zapato.MarcaID = Marca.IDMarca
WHERE Marca.NombreMarca IN ('Nike', 'Adidas', 'Puma');

SELECT Color.nombreColor, Tipo.NombreModelo, Zapato.FilaZapato, Zapato.ColumnaZapato FROM Zapato
JOIN Tipo ON Zapato.TipoID = Tipo.IDTipo
JOIN Color ON Zapato.ColorID = Color.IDColor
WHERE Tipo.NombreModelo LIKE 'N%';

SELECT Color.nombreColor, Tipo.NombreModelo, Zapato.FilaZapato, Zapato.ColumnaZapato FROM Zapato
JOIN Tipo ON Zapato.TipoID = Tipo.IDTipo
JOIN Color ON Zapato.ColorID = Color.IDColor
WHERE Tipo.NombreModelo LIKE '%a' AND Zapato.PrecioZapato BETWEEN 35 AND 65;

SELECT SUM(Zapato.PrecioZapato) FROM Zapato
JOIN Tipo ON Zapato.TipoID = Tipo.IDTipo
WHERE Zapato.FilaZapato = 'A' AND Tipo.NombreModelo = 'Bota';
"
R1m52ndN,# 512x512_rgb_gel_ctrl.py,here2share,Python,Wednesday 10th of January 2024 04:04:43 PM CDT,"# 512x512_rgb_gel_ctrl.py

import tkinter as tk
import random
from PIL import Image, ImageTk, ImageFilter

ww = 512
hh = 512

root = tk.Tk()
root.title(""512x512_image_generator"")
root.geometry(""%dx%d+%d+%d"" %(ww, hh, 10, 10))

canvas = tk.Canvas(root, width=ww, height=hh)
canvas.pack()

colors = []
t = [z for z in range(0, 256, 15)]
for r in t:
	for g in t:
		for b in t:
			colors += [(r, g, b, 255)]
Lc = len(colors)

def generate(event=None):
	for size in layers:
		interpolate(size)
	draw()

def interpolate(size):
	global idx
	img = Image.new(""RGBA"", (size, size))
	pixels = img.load()
	for y in range(size):
		for x in range(size):
			color = colors.pop(idx**3)
			idx = (idx + 1) % 7
			pixels[x, y] = color
			colors.append(color)
	img = img.resize((ww, hh))
	layers[size] = img

def draw(event=None):
	buffer = Image.new(""RGBA"", (ww, hh), (255, 255, 255, 255))
	for size, layer_image in layers.items():
		if size != 4:
			alpha = float(opacity_slider[size].get()) / 800.0
		else:
			alpha = 1	 
		buffer = Image.blend(buffer, layer_image, alpha)
		
	buffer = buffer.point(lambda x: x // 25 * 25)
	
	photo = ImageTk.PhotoImage(buffer)
	canvas.create_image(0, 0, anchor=tk.NW, image=photo)
	canvas.image = photo

opacity_label = tk.Toplevel(root)
opacity_title = tk.Label(opacity_label, text=""Press Spacebar To Randomize"")
opacity_title.pack()
opacity_slider = {}
layers = {}

idx = 0
size = 8
for i in (512, 512, 96):
	opacity_slider[size] = tk.Scale(opacity_label, from_=512, to=0, orient=tk.VERTICAL, label=size, command=draw)
	opacity_slider[size].pack(side=tk.LEFT, fill='both', expand=True)
	opacity_slider[size].set(i)
	interpolate(size)
	size *= 2

canvas.update()
t = opacity_label.winfo_width()
opacity_label.geometry(""%dx300+%d+%d"" %(t, 50, 50))
for t in (root, opacity_label):
	t.bind(""<space>"", generate)
opacity_label.wm_transient(root)

draw()
root.mainloop()"
YeGmgzNE,Serviço para Desmontar o Docker,HorselessName,Bash,Wednesday 10th of January 2024 03:30:43 PM CDT,"[Unit]
Description=Clean up Docker volumes and processes
DefaultDependencies=no
Before=shutdown.target reboot.target

[Service]
Type=oneshot
ExecStart=/bin/true
ExecStop=/bin/sh /var/lock/subsys/umountdocker stop
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target"
GQf4jJYN,Untitled,Nenogzar,Python,Wednesday 10th of January 2024 03:29:40 PM CDT,"
# symbols = {
#     ""a"": ""·-"", ""b"": ""-···"", ""c"": ""-·-·"", ""d"": ""-··"", ""e"": ""·"", ""f"": ""··-·"", ""g"": ""--·"", ""h"": ""····"", ""i"": ""··"",
#     ""j"": ""·---"", ""k"": ""-·-"", ""l"": ""·-··"", ""m"": ""--"", ""n"": ""-·"", ""o"": ""---"", ""p"": ""·--·"", ""q"": ""--·-"", ""r"": ""·-·"",
#     ""s"": ""···"", ""t"": ""-"", ""u"": ""··-"", ""v"": ""···-"", ""w"": ""·--"", ""x"": ""-··-"", ""y"": ""-·--"", ""z"": ""--··"",
#     ""0"": ""-----"", ""1"": ""·----"", ""2"": ""··---"", ""3"": ""···--"", ""4"": ""····-"",
#     ""5"": ""·····"", ""6"": ""-····"", ""7"": ""--···"", ""8"": ""---··"", ""9"": ""----·"",
#     ""."": ""·-·-·-"", "","": ""--··--"", ""?"": ""··--··"", """": ""·----·"", ""!"": ""-·-·--"",
#     ""/"": ""-··-·"", ""("": ""-·--·"", "")"": ""-·--·-"", ""§"": ""· ···"", "":"": ""---···"",
#     "";"": ""-·-·-·"", ""["": ""-···-"", "".."": ""-··-·"", ""-"": ""-····-"", ""_"": ""··-- ·-"",
#     ""$"": ""···-··-"", ""@"": ""·--·-·"", "" "": "".""
# }
#
# # Taking input from a user
# data = input(""Enter text: "").lower()
#
#
# length = len(data)
#
# # Convert to Morse code in list comprehension
# output = [symbols.get(data[i]) for i in range(length) if data[i] in symbols.keys()]
#
# print(' '.join(output))
#



#
MORSE_CODE_DICT = {
    ""·-"": ""a"", ""-···"": ""b"", ""-·-·"": ""c"", ""-··"": ""d"", ""·"": ""e"", ""··-·"": ""f"", ""--·"": ""g"", ""····"": ""h"",
    ""··"": ""i"", ""·---"": ""j"", ""-·-"": ""k"", ""·-··"": ""l"", ""--"": ""m"", ""-·"": ""n"", ""---"": ""o"", ""·--·"": ""p"",
    ""--·-"": ""q"", ""·-·"": ""r"", ""···"": ""s"", ""-"": ""t"", ""··-"": ""u"", ""···-"": ""v"", ""·--"": ""w"", ""-··-"": ""x"",
    ""-·--"": ""y"", ""--··"": ""z"", ""-----"": ""0"", ""·----"": ""1"", ""··---"": ""2"", ""···--"": ""3"", ""····-"": ""4"",
    ""·····"": ""5"", ""-····"": ""6"", ""--···"": ""7"", ""---··"": ""8"", ""----·"": ""9"", ""·-·-·-"": ""."", ""--··--"": "","",
    ""··--··"": ""?"", ""·----·"": """", ""-·-·--"": ""!"", ""-··-·"": ""/"", ""-·--·"": ""("", ""-·--·-"": "")"", ""· ···"": ""§"",
    ""---···"": "":"", ""-·-·-·"": "";"", ""-···-"": ""["", ""-··-·"": "".."", ""-····-"": ""-"", ""··-- ·-"": ""_"",
    ""···-··-"": ""$"", ""·--·-·"": ""@"", ""."": "" "",


}

def morse_to_text(morse):

    text = """"
    symbols = morse.split()

    for symbol in symbols:
        if symbol in MORSE_CODE_DICT:
            text += MORSE_CODE_DICT[symbol]
        else:
            print(""Невалиден символ на Морз: "" + symbol)
            return
    return text

morse = input(""Въведете текст на Морз, който искате да преведете: "")

text = morse_to_text(morse)

if text:
    print(""Преведеният текст е: "" + text)
"
KNM8jxcF,Untitled,Nenogzar,Python,Wednesday 10th of January 2024 03:15:17 PM CDT,"div = int(input())
bound = int(input())

for num in range(bound, div - 1, -1):
    if num % div == 0:
        break
print(num)"
YPV2G1B7,"Corrigir o Erro ""Fail to Umount /var/lib/docker/volumes""",HorselessName,Bash,Wednesday 10th of January 2024 03:13:42 PM CDT,"#!/bin/sh

case ""$1"" in
    start)
        # Comandos a serem executados no início do serviço (se necessário)
        echo ""Iniciando o serviço de limpeza do Docker...""
        ;;
    stop)
        echo ""Parando os processos do Docker...""
        pkill -f ""docker*""
        echo ""Desmontando volumes do Docker...""
        umount -lf /var/lib/docker/volumes
        echo ""Limpeza do Docker concluída.""
        ;;
    *)
        echo ""Uso: $0 {start|stop}""
        exit 1
        ;;
esac

exit 0
"
Yen3YpKh,host_summation.sh,Paraphraser,Bash,Wednesday 10th of January 2024 03:12:05 PM CDT,"#!/usr/bin/env bash

# the name of this script
SCRIPT=$(basename ""$0"")

# which kernel is running
UNIX=$(uname -s)

# vector on kernel
case ""${UNIX}"" in

	""Darwin"" )
		RAM_UNIT=""GB""
		RAM_SIZE=$(($(sysctl -n hw.memsize) / 1073741824))
		NCPU=$(sysctl -n hw.ncpu)
		MACHINE=$(sysctl -n machdep.cpu.brand_string)
		MODEL=$(sysctl -n hw.model)
		OSVER=$(sysctl -n kern.osproductversion)
		ARCH=$(uname -m)
		KVER=$(uname -r)
		echo ""${RAM_SIZE}${RAM_UNIT} ${MACHINE}, ${NCPU} ${ARCH} CPUs, running ${UNIX} ${KVER} (macOS ${OSVER}), model ${MODEL}""
		;;

	""Linux"" )
		if which vcgencmd >/dev/null ; then
			RAM_UNIT=""MB ""
			RAM_SIZE=$(vcgencmd get_config total_mem | cut -d ""="" -f 2)
			if [ $RAM_SIZE -ge 1024 ] ; then
				RAM_UNIT=""GB ""
				RAM_SIZE=$(($RAM_SIZE/1024))
			fi
		fi
		MODEL=""unknown platform""
		if [ -e ""/proc/device-tree/model"" ] ; then
			MODEL=$(tr -d '\0' < /proc/device-tree/model)
		else
			CANDIDATE=$(grep ""^model name"" /proc/cpuinfo | head -1 | cut -d "":"" -f 2)
			if [ -n ""$CANDIDATE"" ] ; then
				MODEL=${CANDIDATE## }
			fi
		fi
		if [ -e ""/etc/os-release"" ] ; then
			. /etc/os-release 
			if [ $(lscpu | grep -c ""CPU op-mode(s): *32-bit, 64-bit"") -gt 0 ] ; then
				RUN_MODE=""full 64-bit OS""
			else
				if [ ""$(uname -m)"" == ""aarch64"" ] ; then
					RUN_MODE=""32-bit OS with 64-bit kernel""
				else
					RUN_MODE=""32-bit OS with 32-bit kernel""
				fi
			fi
			echo ""${RAM_SIZE}${RAM_UNIT}${MODEL} running ${PRETTY_NAME} as ${RUN_MODE}""
		else
			echo ""Unable to identify - $(uname -a)""
		fi
		;;

	*)
		echo ""Kernel ${UNIX} is unknown to ${SCRIPT}""
		;;

esac
"
zJR0xA1A,Untitled,Nenogzar,Python,Wednesday 10th of January 2024 03:12:00 PM CDT,"number_divisor = int(input())
number_boundary = int(input())

target_number = next((number for number in range(number_boundary, 0, -1) if number % number_divisor == 0), 0)

print(target_number)"
68cPvy3d,Untitled,ValkyrieJanet,Linden Scripting,Wednesday 10th of January 2024 02:21:23 PM CDT,"
class VtFileWriter:
    def __init__(self, vertices, path, base_name, size):
        self.vertices = vertices
        self.path = path
        self.base_name = base_name
        self.size = size

    def write_files(self):
        coords = [v.co for v in self.vertices]
        triples = [coords[i:i + 3] for i in range(0, len(coords) - 1, 2)]
        all_lines = self.make_lines(triples)
        count = ceil(len(triples)/self.size)
        for file_number in range(count):
            start = file_number*self.size
            end = (file_number+1)*self.size
            lines = all_lines[start:end]
            file_name = self.base_name + str(file_number) + "".lsl""
            full_path = os.path.join(self.path, file_name)
            with open(full_path, ""w"") as file:
                self.write_one_file(lines, start, file)
                print(f""File was written to {full_path}\n"")

    @staticmethod
    def write_one_file(lines, start, file):
        comma = """"
        file.write(""list vectdata = [\n"")
        for line in lines:
            file.write(comma + line)
            comma = "",""
        file.write(""];\n"")
        file.write(""\n"")
        file.write(""default\n"")
        file.write(""{\n"")
        file.write(""  state_entry()\n"")
        file.write(""  {\n"")
        file.write(""    integer length = llGetListLength(vectdata);\n"")
        if start == 0:
            file.write(""    llLinksetDataReset();\n"")
        file.write(f""    integer outKey = {start};\n"")
        file.write(f""    integer inKey = 0;\n"")
        file.write(""    integer limit = inKey + length;\n"")
        file.write(""    for(; inKey < limit; ++outKey, ++inKey) {\n"")
        file.write('      llLinksetDataWrite(""datakey""+(string)outKey,  llList2String( vectdata , inKey) );\n')
        file.write(""    }\n"")
        file.write(""  }\n"")
        file.write(""}\n"")

    @staticmethod
    def make_lines(coordinate_triples):
        lines = []
        back_zero = coordinate_triples[0][0]
        for back, up, front in coordinate_triples:
            back_zeroed = back - back_zero
            roll = Vehicle(back, up, front).roll_degrees()
            output = f""<{back_zeroed.x:.3f}, {back_zeroed.y:.3f}, {back_zeroed.z:.3f}, {roll:.0f}>\n""
            lines.append(output)
        return lines"
xntWGN6Z,bus,VssA,C#,Wednesday 10th of January 2024 02:18:13 PM CDT,"using Optimizer.Domain.Bus;
using Optimizer.Domain.Bus.Entities;
using Optimizer.Domain.Bus.ValueObjects;
using Optimizer.Domain.Route;
using Optimizer.Domain.Route.ValueObjects;
using Optimizer.PathMaker.RouteMaker;
using Optimizer.PathMaker.Randomizer;
using System.Net.Http.Headers;
using Optimizer.Domain.Common.Entities;

/*var bus = Bus.Create(100, PlateNumber.Create(""asd""));
var busStation = BusStation.Create(""Station1"");
var arrivalTimes = new List<ArrivalTime> { ArrivalTime.Create(busStation, DateTime.UtcNow) };
var route = Route<Bus, BusId>.Create(bus, arrivalTimes);
bus.AddRoute(route);*/

internal class Program
{
    private static void Main(string[] args)
    {
        Random random = new Random();

        var bus = Bus.Create(random.Next(50, 100), PlateNumber.Create(""AB"" + random.Next(1000, 9999)));

        var station = BusStation.Create(""Station"" + random.Next(1, 10));

        List<ArrivalTime> arrivalTimes = new List<ArrivalTime>();

        for (int i = 0; i < 6; i++)
        {
            DateTime time = new DateTime(random.Next(2024,2024), random.Next(1,12), random.Next(1, 31), random.Next(0, 12), random.Next(0, 60), random.Next(0, 60));
            arrivalTimes.Add(ArrivalTime.Create(station, time));
        }

        var route = Route<Bus, BusId>.Create(bus, arrivalTimes);

        // Вывод сгенерированных данных
        Console.WriteLine(""Сгенерированный автобус Максимальное количество пассажиров - "" + bus.MaxPassengersCount + "", Номер - "" + bus.PlateNumber.Number);
        Console.WriteLine(""Сгенерированная остановка Название - "" + station.StationName);
        Console.WriteLine(""Времена прибытия:"");
        foreach (var time in route.ArrivalTimes)
        {
            Console.WriteLine(time.Time);
        }

    }   
}"
ABnMGqtK,Teleport Players,AlexGamerBLOX,Lua,Wednesday 10th of January 2024 01:49:42 PM CDT,"-- Teleport all players

local TPS = game:GetService(""TeleportService"")
local PlaceID = 15929560031

script.Parent.Touched:Connect(function(hit)
	if hit.Parent:FindFirstChild(""Humanoid"") then
		TPS:TeleportAsync(PlaceID, game.Players:GetChildren())
	end
end)"
kak2pF6C,Particle Streaks,marcusa3000,Lua,Wednesday 10th of January 2024 01:48:00 PM CDT,"{
	Tools = ordered() {
		pEmitter2_1 = pEmitter {
			ID = 8642,
			CtrlWZoom = false,
			Inputs = {
				RandomSeed = Input { Value = 9999, },
				Number = Input { Value = 4, },
				NumberVariance = Input { Value = 4, },
				Lifespan = Input { Value = 1000, },
				VelocityControls = Input { Value = 1, },
				Velocity = Input { Value = 3, },
				VelocityVariance = Input { Value = 0.2, },
				AngleVariance = Input { Value = 90, },
				RotationControls = Input { Value = 1, },
				RotationMode = Input { Value = 1, },
				AlwaysFaceCamera = Input { Value = 0, },
				Style = Input { Value = FuID { ""ParticleStyleBitmap"" }, },
				[""ParticleStyleLine.Fade""] = Input { Value = 0, },
				[""ParticleStyleBitmap.Gain""] = Input { Value = 1.5, },
				[""ParticleStyleBitmap.DropToolsHere""] = Input {
					SourceOp = ""Background_22"",
					Source = ""Output"",
				},
				[""SphereRgn.Size""] = Input { Value = 0, },
				[""SphereRgn.Translate.X""] = Input { Value = -2.30028602182159, },
				[""SphereRgn.Translate.Y""] = Input { Value = -0.010016694490818, },
				[""ParticleStyle.ColorControls""] = Input { Value = 1, },
				[""ParticleStyle.Red""] = Input { Value = 0.3, },
				[""ParticleStyle.Green""] = Input { Value = 0.3, },
				[""ParticleStyle.Blue""] = Input { Value = 0.7, },
				[""ParticleStyle.ColorVariance""] = Input { Value = 1, },
				[""ParticleStyle.RedLow""] = Input { Value = 0.05, },
				[""ParticleStyle.RedHigh""] = Input { Value = 0.25, },
				[""ParticleStyle.GreenHigh""] = Input { Value = 0.4, },
				[""ParticleStyle.BlueLow""] = Input { Value = -0.5, },
				[""ParticleStyle.BlueHigh""] = Input { Value = 0.05, },
				[""ParticleStyle.LockColorVariance""] = Input { Value = 0, },
				[""ParticleStyle.SizeControls""] = Input { Value = 1, },
				[""ParticleStyle.Size""] = Input { Value = 1, },
				[""ParticleStyle.SizeOverLife""] = Input {
					SourceOp = ""pEmitter2_1SizeOverLife"",
					Source = ""Value"",
				},
				[""ParticleStyle.BlurOverLife""] = Input {
					SourceOp = ""pEmitter2_1BlurOverLife2D"",
					Source = ""Value"",
				},
				[""LineRgn.Start.X""] = Input { Value = -0.635993379700788, },
				[""LineRgn.Start.Y""] = Input { Value = 0.777652803544695, },
				[""LineRgn.End.X""] = Input { Expression = ""LineRgn.Start.X"", },
				[""LineRgn.End.Y""] = Input {
					Value = -0.435,
					Expression = ""-LineRgn.Start.Y"",
				},
				[""RectRgn.Width""] = Input { Value = 0, },
				[""RectRgn.Height""] = Input { Value = 0, },
				[""RectRgn.Translate.X""] = Input { Value = -3.75640502888209, },
			},
			ViewInfo = OperatorInfo { Pos = { 1375, 1996.5 } },
		},
		pEmitter2_1SizeOverLife = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0.5, RH = { 0.333333333333333, 0.5 }, Flags = { Linear = true } },
					[1] = { 0.5, LH = { 0.666666666666667, 0.5 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		pEmitter2_1BlurOverLife2D = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0.5, RH = { 0.333333333333333, 0.5 }, Flags = { Linear = true } },
					[1] = { 0.5, LH = { 0.666666666666667, 0.5 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		pRender2_1 = pRender {
			Inputs = {
				_MotionBlurWarning = Input { Disabled = true, },
				Quality = Input { Value = 4, },
				GlobalOut = Input { Value = 118, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				Depth = Input { Value = 4, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				OutputMode = Input {
					Value = FuID { ""TwoD"" },
					Disabled = true,
				},
				PreGenerateFrames = Input { Value = 100, },
				[""MaterialID.MaterialID""] = Input { Value = 12, },
				[""ObjectID.ObjectID""] = Input { Value = 9, },
				Translation = Input { Value = 1, },
				[""Translate.Z""] = Input { Value = 1.406, },
				Input = Input {
					SourceOp = ""pEmitter2_1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1375, 2029.5 } },
		},
		Background_22 = Background {
			NameSet = true,
			Inputs = {
				GlobalOut = Input { Value = 118, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 2, },
				Depth = Input { Value = 1, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				TopLeftRed = Input { Value = 1, },
				TopLeftGreen = Input { Value = 1, },
				TopLeftBlue = Input { Value = 1, },
				TopRightRed = Input { Value = 1, },
				TopRightGreen = Input { Value = 1, },
				TopRightBlue = Input { Value = 1, },
				BottomLeftRed = Input { Value = 1, },
				BottomLeftGreen = Input { Value = 0.5, },
				BottomRightGreen = Input { Value = 0.5, },
				BottomRightBlue = Input { Value = 1, },
				Start = Input { Value = { 0.5, 0.5 }, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0] = { 1, 1, 1, 1 },
							[1] = { 0, 0, 0, 1 }
						}
					},
				},
				EffectMask = Input {
					SourceOp = ""Rectangle2"",
					Source = ""Mask"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 1375, 1930.5 } },
		},
		Merge13 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""pRender2_1"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""ColorCompressor1"",
					Source = ""Output"",
				},
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { 1375, 2128.5 } },
		},
		ColorCompressor1 = ofx.com.blackmagicdesign.resolvefx.ColorCompressor {
			Inputs = {
				Source = Input {
					SourceOp = ""HSLKeyer1"",
					Source = ""Output"",
				},
				mColorRed = Input { Value = 1, },
				mColorGreen = Input { Value = 1, },
				mColorBlue = Input { Value = 1, },
				hue = Input { Value = 1, },
				sat = Input { Value = 0, },
				lum = Input { Value = 0, },
				blendGroup = Input { Value = 0, },
				blendIn = Input { Value = 1, },
				blend = Input { Value = 0, },
				ignoreContentShape = Input { Value = 0, },
				legacyIsProcessRGBOnly = Input { Value = 0, },
				IsNoTemporalFramesReqd = Input { Value = 0, },
				refreshTrigger = Input { Value = 1, },
				resolvefxVersion = Input { Value = ""1.0"", },
			},
			ViewInfo = OperatorInfo { Pos = { 1265, 2128.5 } },
		},
		HSLKeyer1 = ofx.com.blackmagicdesign.resolvefx.OFXHSLKeyer {
			Inputs = {
				Source = Input {
					SourceOp = ""pRender2_1"",
					Source = ""Output"",
				},
				clickMode = Input { Value = FuID { ""ClickModeAdd"" }, },
				isInvert = Input { Value = 0, },
				resetPaths = Input { Value = 0, },
				optionsGroup = Input { Value = 1, },
				isUseH = Input { Value = 1, },
				isUseS = Input { Value = 1, },
				isUseL = Input { Value = 1, },
				serialisedHSLInteractionData = Input { Value = ""22 serialization::archive 18 0 1 1.047264412e-01 2.501745522e-01 5.000000000e-01 3.125047684e-02 0.000000000e+00 9.588992596e-02 9.999999776e-03 9.999999776e-03 4.499999881e-01 6.949388385e-01 2.500000037e-02 2.500000037e-02 1 0 1 1 1 0\n"", },
				serialisedTrapezoidParam = Input { Value = ""22 serialization::archive 18 0 1 1.000000000e+00 1.856055737e+00 1.000000000e+00 0 3 0 1 4 -2.000000000e+00 -1.874998093e+00 -9.993017912e-01 -8.742998838e-01 7.999877930e+00 7.999877930e+00 1 4 0.000000000e+00 1.999999955e-02 3.635596931e-01 4.035597146e-01 5.000000000e+01 2.499998665e+01 1 4 -2.500000596e-01 -1.500000507e-01 7.297553420e-01 8.297553658e-01 9.999999046e+00 9.999998093e+00 1\n"", },
				finesseGroup = Input { Value = 0, },
				finesseParamGroup = Input { Value = FuID { ""1"" }, },
				finesseGuidedPre = Input { Value = 0, },
				finesseGuidedPreSoft = Input { Value = 0.200000002980232, },
				finesseCleanBlack = Input { Value = 0, },
				finesseCleanWhite = Input { Value = 0, },
				finesseBlackClip = Input { Value = 0, },
				finesseWhiteClip = Input { Value = 100, },
				finesseBlurRadius = Input { Value = 0, },
				finesseIoRatio = Input { Value = 0, },
				Operation = Input { Value = FuID { ""OPERATION_CLOSING"" }, },
				finesseMorphShape = Input { Value = FuID { ""MorphShapeCircle"" }, },
				finesseMorphRadius = Input { Value = 0, },
				finesseMorphIters = Input { Value = 1, },
				finesseMorphRadiusFlt = Input { Value = 0, },
				finesseDenoise = Input { Value = 0, },
				finesseShadow = Input { Value = 1, },
				finesseMidtone = Input { Value = 1, },
				finesseHighlight = Input { Value = 1, },
				finesseGuidedPost = Input { Value = 0, },
				gMatteGroup = Input { Value = 0, },
				gMatteShape = Input { Value = FuID { ""GMatteShapeNone"" }, },
				gMatteSoft = Input { Value = 0.349999994039536, },
				gMatteIsInvert = Input { Value = 0, },
				gMatteCenterXY = Input { Value = { 0.5, 0.5 }, },
				gMatteWidth = Input { Value = 0.75, },
				gMatteHeight = Input { Value = 0.75, },
				gMatteRotation = Input { Value = 0, },
				outputGroup = Input { Value = 1, },
				outputMode = Input { Value = FuID { ""KeyerOutputModeComposite"" }, },
				legacyIsIgnoreInputAlpha = Input { Value = 0, },
				isLegacyFusionAlpha = Input { Value = 0, },
				blendGroup = Input { Value = 0, },
				blendIn = Input { Value = 1, },
				blend = Input { Value = 0, },
				ignoreContentShape = Input { Value = 0, },
				legacyIsProcessRGBOnly = Input { Value = 0, },
				IsNoTemporalFramesReqd = Input { Value = 0, },
				refreshTrigger = Input { Value = 1, },
				resolvefxVersion = Input { Value = ""1.2"", },
			},
			ViewInfo = OperatorInfo { Pos = { 1265, 2095.5 } },
		},
		Rectangle2 = RectangleMask {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				SoftEdge = Input { Value = 0.052, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				UseFrameFormatSettings = Input { Value = 1, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Width = Input { Value = 0.898, },
				Height = Input { Value = 160.274410774411, },
			},
			ViewInfo = OperatorInfo { Pos = { 1375, 1897.5 } },
		},
		SoftGlow1_1 = SoftGlow {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				ColorScale = Input { Value = 1, },
				RedScale = Input { Value = 1.307, },
				GreenScale = Input { Value = 1.055, },
				BlueScale = Input { Value = 1.244, },
				Input = Input {
					SourceOp = ""Merge13"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1375, 2194.5 } },
		},
		SoftGlow1_5 = SoftGlow {
			Inputs = {
				Blend = Input { Value = 0.35, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Gain = Input { Value = 1, },
				XGlowSize = Input { Value = 40, },
				ColorScale = Input { Value = 1, },
				RedScale = Input { Value = 1.307, },
				GreenScale = Input { Value = 1.559, },
				Input = Input {
					SourceOp = ""SoftGlow1_1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1375, 2227.5 } },
		},
		SoftGlow1_2 = SoftGlow {
			Inputs = {
				Blend = Input { Value = 0.969, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Gain = Input { Value = 1, },
				XGlowSize = Input { Value = 100, },
				ColorScale = Input { Value = 1, },
				GreenScale = Input { Value = 1.37, },
				BlueScale = Input { Value = 0.898, },
				Input = Input {
					SourceOp = ""SoftGlow1_5"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1375, 2260.5 } },
		}
	}
}"
Y4WytRQv,7. Hot Potato,Spocoman,C++,Wednesday 10th of January 2024 01:30:31 PM CDT,"#include <iostream>
#include <string>
#include <queue>
#include <sstream>

using namespace std;

int main() {
    string line, name;
    getline(cin, line);

    istringstream ss(line);

    queue<string> names;

    while (ss >> name) {
        names.push(name);
    }

    int n;
    cin >> n;

    while (names.size() != 1) {
        for (size_t i = 1; i < n; i++) {
            names.push(names.front());
            names.pop();
        }
        cout << ""Removed "" << names.front() << endl;
        names.pop();
    }

    cout << ""Last is "" << names.front() << endl;
    return 0;
}"
1MnPh8si,8 (номер слова),nq1s788,Python,Wednesday 10th of January 2024 01:22:51 PM CDT,"x = 'АПРСУ'
cnt = 0 #текущий номер
for a in x:
    for b in x:
        for c in x:
            for d in x:
                cnt += 1
                if a + b + c + d == 'УРПА':
                    print(cnt)"
FuP8yeUj,8 (номер первой нач на У),nq1s788,Python,Wednesday 10th of January 2024 01:21:36 PM CDT,"x = 'АПРСУ'
cnt = 0 #текущий номер
for a in x:
    for b in x:
        for c in x:
            for d in x:
                cnt += 1
                if a == 'У':
                    print(cnt)"
xUaRffd6,Bracket Balancing,aswanthk,Java,Wednesday 10th of January 2024 01:17:29 PM CDT,"import java.util.*;

public class BracketBalancing {
	// Java program for checking
	// balanced brackets

	// function to check if brackets are balanced
	static boolean areBracketsBalanced(String expr) {
		// Using ArrayDeque is faster than using Stack class
		Stack<Character> stack = new Stack<Character>();

		// Traversing the Expression
		for (int i = 0; i < expr.length(); i++) {
			char x = expr.charAt(i);

			if (x == '(' || x == '[' || x == '{') {
				// Push the element in the stack
				stack.push(x);
				continue;
			}

			// If current character is not opening
			// bracket, then it must be closing. So stack
			// cannot be empty at this point.
			if (stack.isEmpty())
				return false;
			char check;
			switch (x) {
			case ')':
				check = stack.pop();
				if (check == '{' || check == '[')
					return false;
				break;

			case '}':
				check = stack.pop();
				if (check == '(' || check == '[')
					return false;
				break;

			case ']':
				check = stack.pop();
				if (check == '(' || check == '{')
					return false;
				break;
			}
		}

		// Check Empty Stack
		return (stack.isEmpty());
	}

	// Driver code
	public static void main(String[] args) {
		String expr = ""([{])"";

		// Function call
		if (areBracketsBalanced(expr))
			System.out.println(""Balanced "");
		else
			System.out.println(""Not Balanced "");
	}
}"
X1CbJuCw,6. Supermarket,Spocoman,C++,Wednesday 10th of January 2024 01:05:48 PM CDT,"#include <iostream>
#include <string>
#include <queue>

using namespace std;

int main() {
    string line;
    getline(cin, line);

    queue<string> names;

    while (line != ""End"") {
        if (line == ""Paid"") {
            while (!names.empty()) {
                cout << names.front() << endl;
                names.pop();
            }
        }
        else {
            names.push(line);
        }
        getline(cin, line);
    }

    cout << names.size() << "" people remaining.\n"";
    return 0;
}"
UffLqtXn,Nigerian scammers [10-1-2/2024],bombaires,AIMMS,Wednesday 10th of January 2024 01:05:35 PM CDT,"<a href=""mailto:facebookinc1000@gmail.com"">facebookinc1000@gmail.com</a>
<a href=""mailto:f.ac.e.b.o.oki.n.c10.00@gmail.com"">f.ac.e.b.o.oki.n.c10.00@gmail.com</a>
<a href=""mailto:f.a.ce.b.o.oki.n.c10.0.0@gmail.com"">f.a.ce.b.o.oki.n.c10.0.0@gmail.com</a>
<a href=""mailto:f.a.c.e.b.oo.k.i.n.c.10.00@gmail.com"">f.a.c.e.b.oo.k.i.n.c.10.00@gmail.com</a>
<a href=""mailto:fa.c.e.b.oo.k.in.c1.00.0@gmail.com"">fa.c.e.b.oo.k.in.c1.00.0@gmail.com</a>
<a href=""mailto:face.bo.o.ki.nc10.0.0@gmail.com"">face.bo.o.ki.nc10.0.0@gmail.com</a>
<a href=""mailto:f.ac.e.b.oo.ki.n.c1.00.0@gmail.com"">f.ac.e.b.oo.ki.n.c1.00.0@gmail.com</a>
<a href=""mailto:f.ace.b.o.ok.i.n.c1.00.0@gmail.com"">f.ace.b.o.ok.i.n.c1.00.0@gmail.com</a>
<a href=""mailto:fac.e.bo.o.ki.nc.1000@gmail.com"">fac.e.bo.o.ki.nc.1000@gmail.com</a>
<a href=""mailto:f.a.c.e.b.o.o.kinc.1.000@gmail.com"">f.a.c.e.b.o.o.kinc.1.000@gmail.com</a>
<a href=""mailto:f.ac.e.b.o.o.k.in.c1.00.0@gmail.com"">f.ac.e.b.o.o.k.in.c1.00.0@gmail.com</a>
<a href=""mailto:f.ace.b.o.ok.in.c1.000@gmail.com"">f.ace.b.o.ok.in.c1.000@gmail.com</a>
<a href=""mailto:face.b.o.o.kinc10.00@gmail.com"">face.b.o.o.kinc10.00@gmail.com</a>
<a href=""mailto:fa.c.e.b.o.o.ki.nc10.0.0@gmail.com"">fa.c.e.b.o.o.ki.nc10.0.0@gmail.com</a>
<a href=""mailto:fa.cebo.okinc1000@gmail.com"">fa.cebo.okinc1000@gmail.com</a>
<a href=""mailto:f.acebookin.c1.0.00@gmail.com"">f.acebookin.c1.0.00@gmail.com</a>
<a href=""mailto:f.ac.e.bo.o.k.inc1.00.0@gmail.com"">f.ac.e.bo.o.k.inc1.00.0@gmail.com</a>
<a href=""mailto:fa.ce.bo.oki.n.c.10.0.0@gmail.com"">fa.ce.bo.oki.n.c.10.0.0@gmail.com</a>
<a href=""mailto:f.a.ceb.o.o.ki.nc.10.0.0@gmail.com"">f.a.ceb.o.o.ki.nc.10.0.0@gmail.com</a>
<a href=""mailto:f.a.ceb.oo.k.i.nc10.0.0@gmail.com"">f.a.ceb.oo.k.i.nc10.0.0@gmail.com</a>
<a href=""mailto:f.a.c.ebook.in.c100.0@gmail.com"">f.a.c.ebook.in.c100.0@gmail.com</a>
<a href=""mailto:fa.c.e.b.ook.i.n.c1.00.0@gmail.com"">fa.c.e.b.ook.i.n.c1.00.0@gmail.com</a>
<a href=""mailto:faceboo.k.i.nc.1.0.0.0@gmail.com"">faceboo.k.i.nc.1.0.0.0@gmail.com</a>
<a href=""mailto:f.ace.bo.ok.in.c10.00@gmail.com"">f.ace.bo.ok.in.c10.00@gmail.com</a>
<a href=""mailto:face.b.oo.kinc10.00@gmail.com"">face.b.oo.kinc10.00@gmail.com</a>
<a href=""mailto:fa.c.e.bo.okinc.10.0.0@gmail.com"">fa.c.e.bo.okinc.10.0.0@gmail.com</a>
<a href=""mailto:f.ac.e.boo.k.inc.1.0.00@gmail.com"">f.ac.e.boo.k.inc.1.0.00@gmail.com</a>
<a href=""mailto:f.a.ceb.o.ok.in.c.1000@gmail.com"">f.a.ceb.o.ok.in.c.1000@gmail.com</a>
<a href=""mailto:fa.cebo.okinc.1000@gmail.com"">fa.cebo.okinc.1000@gmail.com</a>
<a href=""mailto:fa.ce.bo.okinc1.0.00@gmail.com"">fa.ce.bo.okinc1.0.00@gmail.com</a>
<a href=""mailto:fa.ceb.ook.i.nc10.0.0@gmail.com"">fa.ceb.ook.i.nc10.0.0@gmail.com</a>
<a href=""mailto:f.acebo.o.ki.n.c1000@gmail.com"">f.acebo.o.ki.n.c1000@gmail.com</a>
<a href=""mailto:fac.ebook.i.nc.100.0@gmail.com"">fac.ebook.i.nc.100.0@gmail.com</a>
<a href=""mailto:f.a.c.eb.oo.ki.n.c1.0.00@gmail.com"">f.a.c.eb.oo.ki.n.c1.0.00@gmail.com</a>
<a href=""mailto:f.a.c.ebooki.nc.100.0@gmail.com"">f.a.c.ebooki.nc.100.0@gmail.com</a>
<a href=""mailto:f.aceb.ook.in.c1.0.0.0@gmail.com"">f.aceb.ook.in.c1.0.0.0@gmail.com</a>
<a href=""mailto:fa.ce.bo.ok.i.nc.1000@gmail.com"">fa.ce.bo.ok.i.nc.1000@gmail.com</a>
<a href=""mailto:fa.c.e.bo.o.k.inc.10.00@gmail.com"">fa.c.e.bo.o.k.inc.10.00@gmail.com</a>
<a href=""mailto:fac.e.book.inc10.00@gmail.com"">fac.e.book.inc10.00@gmail.com</a>
<a href=""mailto:fa.c.e.b.o.o.k.in.c1000@gmail.com"">fa.c.e.b.o.o.k.in.c1000@gmail.com</a>
<a href=""mailto:f.acebo.o.kin.c.1.0.0.0@gmail.com"">f.acebo.o.kin.c.1.0.0.0@gmail.com</a>
<a href=""mailto:f.a.c.e.boo.k.inc1.000@gmail.com"">f.a.c.e.boo.k.inc1.000@gmail.com</a>
<a href=""mailto:fa.c.eb.o.o.kinc100.0@gmail.com"">fa.c.eb.o.o.kinc100.0@gmail.com</a>
<a href=""mailto:faceb.o.okin.c1.000@gmail.com"">faceb.o.okin.c1.000@gmail.com</a>
<a href=""mailto:f.ac.e.bookinc.1.0.00@gmail.com"">f.ac.e.bookinc.1.0.00@gmail.com</a>
<a href=""mailto:f.aceb.o.oki.n.c.1.0.0.0@gmail.com"">f.aceb.o.oki.n.c.1.0.0.0@gmail.com</a>
<a href=""mailto:f.ac.eb.oo.k.inc100.0@gmail.com"">f.ac.eb.oo.k.inc100.0@gmail.com</a>
<a href=""mailto:f.ace.boo.ki.nc10.0.0@gmail.com"">f.ace.boo.ki.nc10.0.0@gmail.com</a>
<a href=""mailto:fa.c.e.boo.kin.c10.0.0@gmail.com"">fa.c.e.boo.kin.c10.0.0@gmail.com</a>
<a href=""mailto:f.a.ce.b.ook.in.c1.0.00@gmail.com"">f.a.ce.b.ook.in.c1.0.00@gmail.com</a>
<a href=""mailto:f.ace.b.ook.inc.1.0.0.0@gmail.com"">f.ace.b.ook.inc.1.0.0.0@gmail.com</a>
<a href=""mailto:facebo.o.k.i.nc10.0.0@gmail.com"">facebo.o.k.i.nc10.0.0@gmail.com</a>
<a href=""mailto:f.a.ce.b.ookin.c.1.000@gmail.com"">f.a.ce.b.ookin.c.1.000@gmail.com</a>
<a href=""mailto:f.a.ceb.oo.k.i.nc100.0@gmail.com"">f.a.ceb.oo.k.i.nc100.0@gmail.com</a>
<a href=""mailto:faceboo.kin.c1.00.0@gmail.com"">faceboo.kin.c1.00.0@gmail.com</a>
<a href=""mailto:fa.cebo.o.k.inc10.0.0@gmail.com"">fa.cebo.o.k.inc10.0.0@gmail.com</a>
<a href=""mailto:fa.c.ebo.ok.inc.1.0.00@gmail.com"">fa.c.ebo.ok.inc.1.0.00@gmail.com</a>
<a href=""mailto:f.a.c.e.book.i.nc.10.0.0@gmail.com"">f.a.c.e.book.i.nc.10.0.0@gmail.com</a>
<a href=""mailto:f.a.c.ebo.o.k.inc.10.00@gmail.com"">f.a.c.ebo.o.k.inc.10.00@gmail.com</a>
<a href=""mailto:f.a.ceboo.k.i.nc1.0.0.0@gmail.com"">f.a.ceboo.k.i.nc1.0.0.0@gmail.com</a>
<a href=""mailto:f.a.c.eboo.ki.n.c.1.000@gmail.com"">f.a.c.eboo.ki.n.c.1.000@gmail.com</a>
<a href=""mailto:f.a.cebo.o.k.in.c1.000@gmail.com"">f.a.cebo.o.k.in.c1.000@gmail.com</a>
<a href=""mailto:f.ace.b.ook.i.nc.10.00@gmail.com"">f.ace.b.ook.i.nc.10.00@gmail.com</a>
<a href=""mailto:fa.cebo.o.ki.n.c100.0@gmail.com"">fa.cebo.o.ki.n.c100.0@gmail.com</a>
<a href=""mailto:facebo.o.k.in.c.1.00.0@gmail.com"">facebo.o.k.in.c.1.00.0@gmail.com</a>
<a href=""mailto:fa.cebo.o.ki.n.c.1.00.0@gmail.com"">fa.cebo.o.ki.n.c.1.00.0@gmail.com</a>
<a href=""mailto:fa.ceboo.k.in.c.1.0.0.0@gmail.com"">fa.ceboo.k.in.c.1.0.0.0@gmail.com</a>
<a href=""mailto:fa.c.e.b.o.o.kinc100.0@gmail.com"">fa.c.e.b.o.o.kinc100.0@gmail.com</a>
<a href=""mailto:fac.e.b.o.ok.i.nc.10.0.0@gmail.com"">fac.e.b.o.ok.i.nc.10.0.0@gmail.com</a>
<a href=""mailto:f.a.c.ebooki.n.c10.0.0@gmail.com"">f.a.c.ebooki.n.c10.0.0@gmail.com</a>
<a href=""mailto:f.a.c.e.b.ook.i.nc.10.00@gmail.com"">f.a.c.e.b.ook.i.nc.10.00@gmail.com</a>
<a href=""mailto:f.a.ce.b.ook.inc1.00.0@gmail.com"">f.a.ce.b.ook.inc1.00.0@gmail.com</a>
<a href=""mailto:face.bo.o.k.i.nc.100.0@gmail.com"">face.bo.o.k.i.nc.100.0@gmail.com</a>
<a href=""mailto:fa.c.eb.ookinc.1.000@gmail.com"">fa.c.eb.ookinc.1.000@gmail.com</a>
<a href=""mailto:f.a.c.e.b.o.o.k.i.n.c.1.000@gmail.com"">f.a.c.e.b.o.o.k.i.n.c.1.000@gmail.com</a>
<a href=""mailto:f.aceb.o.o.kin.c1.000@gmail.com"">f.aceb.o.o.kin.c1.000@gmail.com</a>
<a href=""mailto:f.ac.ebookin.c.10.0.0@gmail.com"">f.ac.ebookin.c.10.0.0@gmail.com</a>
<a href=""mailto:f.ac.e.b.o.ok.in.c.1.0.0.0@gmail.com"">f.ac.e.b.o.ok.in.c.1.0.0.0@gmail.com</a>
<a href=""mailto:fa.c.eb.ooki.n.c.1000@gmail.com"">fa.c.eb.ooki.n.c.1000@gmail.com</a>
<a href=""mailto:f.ace.b.o.o.k.inc.10.00@gmail.com"">f.ace.b.o.o.k.inc.10.00@gmail.com</a>
<a href=""mailto:f.aceb.o.oki.nc10.0.0@gmail.com"">f.aceb.o.oki.nc10.0.0@gmail.com</a>
<a href=""mailto:fa.c.e.bo.o.k.i.nc.1.00.0@gmail.com"">fa.c.e.bo.o.k.i.nc.1.00.0@gmail.com</a>
<a href=""mailto:fa.c.eb.o.ok.i.n.c.1.0.0.0@gmail.com"">fa.c.eb.o.ok.i.n.c.1.0.0.0@gmail.com</a>
<a href=""mailto:faceb.oo.ki.n.c.100.0@gmail.com"">faceb.oo.ki.n.c.100.0@gmail.com</a>
<a href=""mailto:fa.c.e.b.o.okinc10.0.0@gmail.com"">fa.c.e.b.o.okinc10.0.0@gmail.com</a>
<a href=""mailto:f.ac.e.b.oo.ki.nc.1.0.00@gmail.com"">f.ac.e.b.oo.ki.nc.1.0.00@gmail.com</a>
<a href=""mailto:fa.cebo.okinc10.00@gmail.com"">fa.cebo.okinc10.00@gmail.com</a>
<a href=""mailto:face.b.o.ok.in.c100.0@gmail.com"">face.b.o.ok.in.c100.0@gmail.com</a>
<a href=""mailto:f.a.c.e.b.oo.ki.n.c1000@gmail.com"">f.a.c.e.b.oo.ki.n.c1000@gmail.com</a>
<a href=""mailto:fa.ce.b.ook.in.c10.0.0@gmail.com"">fa.ce.b.ook.in.c10.0.0@gmail.com</a>
<a href=""mailto:fac.e.b.o.ok.i.n.c.1000@gmail.com"">fac.e.b.o.ok.i.n.c.1000@gmail.com</a>
<a href=""mailto:fa.c.eb.ookin.c.1.0.0.0@gmail.com"">fa.c.eb.ookin.c.1.0.0.0@gmail.com</a>
<a href=""mailto:fa.c.eb.o.o.kin.c1000@gmail.com"">fa.c.eb.o.o.kin.c1000@gmail.com</a>
<a href=""mailto:f.acebo.o.k.in.c.10.00@gmail.com"">f.acebo.o.k.in.c.10.00@gmail.com</a>
<a href=""mailto:f.a.c.e.b.o.oki.nc.1.0.0.0@gmail.com"">f.a.c.e.b.o.oki.nc.1.0.0.0@gmail.com</a>
<a href=""mailto:fa.cebo.ok.inc1.0.0.0@gmail.com"">fa.cebo.ok.inc1.0.0.0@gmail.com</a>
<a href=""mailto:f.a.cebo.okin.c.10.00@gmail.com"">f.a.cebo.okin.c.10.00@gmail.com</a>
<a href=""mailto:fa.c.e.bookin.c.100.0@gmail.com"">fa.c.e.bookin.c.100.0@gmail.com</a>
<a href=""mailto:f.a.ce.b.oo.k.inc.1000@gmail.com"">f.a.ce.b.oo.k.inc.1000@gmail.com</a>
<a href=""mailto:f.aceb.ook.in.c.1.0.0.0@gmail.com"">f.aceb.ook.in.c.1.0.0.0@gmail.com</a>
<a href=""mailto:f.a.ce.boo.ki.nc1000@gmail.com"">f.a.ce.boo.ki.nc1000@gmail.com</a>
<a href=""mailto:f.a.ce.book.i.nc.1.0.0.0@gmail.com"">f.a.ce.book.i.nc.1.0.0.0@gmail.com</a>
<a href=""mailto:f.a.ce.book.i.nc.1.00.0@gmail.com"">f.a.ce.book.i.nc.1.00.0@gmail.com</a>
<a href=""mailto:f.a.c.ebo.okinc1.00.0@gmail.com"">f.a.c.ebo.okinc1.00.0@gmail.com</a>
<a href=""mailto:f.ace.book.i.nc1000@gmail.com"">f.ace.book.i.nc1000@gmail.com</a>
<a href=""mailto:faceb.o.o.ki.n.c.1.000@gmail.com"">faceb.o.o.ki.n.c.1.000@gmail.com</a>
<a href=""mailto:f.a.cebo.o.ki.n.c1000@gmail.com"">f.a.cebo.o.ki.n.c1000@gmail.com</a>
<a href=""mailto:fa.c.e.bo.ok.i.nc1000@gmail.com"">fa.c.e.bo.ok.i.nc1000@gmail.com</a>
<a href=""mailto:fac.ebo.okin.c.1.0.0.0@gmail.com"">fac.ebo.okin.c.1.0.0.0@gmail.com</a>
<a href=""mailto:faceboo.kinc.100.0@gmail.com"">faceboo.kinc.100.0@gmail.com</a>
<a href=""mailto:f.ac.eb.o.ok.in.c1.0.0.0@gmail.com"">f.ac.eb.o.ok.in.c1.0.0.0@gmail.com</a>
<a href=""mailto:f.ace.bo.ok.i.n.c.10.0.0@gmail.com"">f.ace.bo.ok.i.n.c.10.0.0@gmail.com</a>
<a href=""mailto:fac.eb.oo.k.i.n.c10.00@gmail.com"">fac.eb.oo.k.i.n.c10.00@gmail.com</a>
<a href=""mailto:f.ac.eb.o.o.ki.nc.100.0@gmail.com"">f.ac.eb.o.o.ki.nc.100.0@gmail.com</a>
<a href=""mailto:f.a.c.eboo.k.i.nc10.0.0@gmail.com"">f.a.c.eboo.k.i.nc10.0.0@gmail.com</a>
<a href=""mailto:f.a.cebooki.n.c100.0@gmail.com"">f.a.cebooki.n.c100.0@gmail.com</a>
<a href=""mailto:f.a.ce.b.ooki.nc.1000@gmail.com"">f.a.ce.b.ooki.nc.1000@gmail.com</a>
<a href=""mailto:fa.cebo.ok.i.n.c10.0.0@gmail.com"">fa.cebo.ok.i.n.c10.0.0@gmail.com</a>
<a href=""mailto:f.a.c.e.boo.k.inc.100.0@gmail.com"">f.a.c.e.boo.k.inc.100.0@gmail.com</a>
<a href=""mailto:face.bo.ok.i.n.c1.0.00@gmail.com"">face.bo.ok.i.n.c1.0.00@gmail.com</a>
<a href=""mailto:f.acebo.o.k.i.n.c1.000@gmail.com"">f.acebo.o.k.i.n.c1.000@gmail.com</a>
<a href=""mailto:f.a.ce.bo.o.kin.c1000@gmail.com"">f.a.ce.bo.o.kin.c1000@gmail.com</a>
<a href=""mailto:f.aceb.o.ok.i.nc10.0.0@gmail.com"">f.aceb.o.ok.i.nc10.0.0@gmail.com</a>
<a href=""mailto:fa.c.e.b.o.ok.i.nc1.000@gmail.com"">fa.c.e.b.o.ok.i.nc1.000@gmail.com</a>
<a href=""mailto:f.a.ce.bo.o.k.i.n.c.1.00.0@gmail.com"">f.a.ce.bo.o.k.i.n.c.1.00.0@gmail.com</a>
<a href=""mailto:f.a.c.e.b.o.o.k.i.n.c.1000@gmail.com"">f.a.c.e.b.o.o.k.i.n.c.1000@gmail.com</a>
<a href=""mailto:fa.c.e.b.o.ok.in.c.1.0.00@gmail.com"">fa.c.e.b.o.ok.in.c.1.0.00@gmail.com</a>
<a href=""mailto:f.aceb.ook.i.nc.1000@gmail.com"">f.aceb.ook.i.nc.1000@gmail.com</a>
<a href=""mailto:faceboo.kinc1.000@gmail.com"">faceboo.kinc1.000@gmail.com</a>
<a href=""mailto:face.b.ooki.n.c100.0@gmail.com"">face.b.ooki.n.c100.0@gmail.com</a>
<a href=""mailto:f.ace.bo.o.k.in.c.1.000@gmail.com"">f.ace.bo.o.k.in.c.1.000@gmail.com</a>
<a href=""mailto:f.a.cebook.i.nc1000@gmail.com"">f.a.cebook.i.nc1000@gmail.com</a>
<a href=""mailto:f.a.c.e.b.oo.ki.nc1000@gmail.com"">f.a.c.e.b.oo.ki.nc1000@gmail.com</a>
<a href=""mailto:facebooki.n.c.1.00.0@gmail.com"">facebooki.n.c.1.00.0@gmail.com</a>
<a href=""mailto:f.acebo.okin.c10.00@gmail.com"">f.acebo.okin.c10.00@gmail.com</a>
<a href=""mailto:fac.e.b.o.o.ki.nc100.0@gmail.com"">fac.e.b.o.o.ki.nc100.0@gmail.com</a>
<a href=""mailto:fa.c.e.b.ook.in.c1000@gmail.com"">fa.c.e.b.ook.in.c1000@gmail.com</a>
<a href=""mailto:f.ac.ebo.okin.c.1.0.00@gmail.com"">f.ac.ebo.okin.c.1.0.00@gmail.com</a>
<a href=""mailto:faceb.oo.kin.c1.000@gmail.com"">faceb.oo.kin.c1.000@gmail.com</a>
<a href=""mailto:face.b.o.ok.i.n.c10.0.0@gmail.com"">face.b.o.ok.i.n.c10.0.0@gmail.com</a>
<a href=""mailto:f.a.ceb.oo.ki.nc10.00@gmail.com"">f.a.ceb.oo.ki.nc10.00@gmail.com</a>
<a href=""mailto:f.aceb.o.ok.i.nc1.0.00@gmail.com"">f.aceb.o.ok.i.nc1.0.00@gmail.com</a>
<a href=""mailto:f.a.ce.b.oo.kin.c1.00.0@gmail.com"">f.a.ce.b.oo.kin.c1.00.0@gmail.com</a>
<a href=""mailto:fa.c.ebo.o.k.inc1.0.0.0@gmail.com"">fa.c.ebo.o.k.inc1.0.0.0@gmail.com</a>
<a href=""mailto:f.a.ce.boo.ki.nc.100.0@gmail.com"">f.a.ce.boo.ki.nc.100.0@gmail.com</a>
<a href=""mailto:face.book.i.nc1000@gmail.com"">face.book.i.nc1000@gmail.com</a>
<a href=""mailto:fac.ebo.o.k.in.c.100.0@gmail.com"">fac.ebo.o.k.in.c.100.0@gmail.com</a>
<a href=""mailto:fa.c.e.b.ookin.c.1000@gmail.com"">fa.c.e.b.ookin.c.1000@gmail.com</a>
<a href=""mailto:fa.ce.b.o.okin.c1.0.00@gmail.com"">fa.ce.b.o.okin.c1.0.00@gmail.com</a>
<a href=""mailto:facebooki.nc1.0.00@gmail.com"">facebooki.nc1.0.00@gmail.com</a>
<a href=""mailto:f.a.cebo.okinc10.0.0@gmail.com"">f.a.cebo.okinc10.0.0@gmail.com</a>
<a href=""mailto:fa.ce.bo.okin.c.1.0.00@gmail.com"">fa.ce.bo.okin.c.1.0.00@gmail.com</a>
<a href=""mailto:f.ace.book.i.nc1.00.0@gmail.com"">f.ace.book.i.nc1.00.0@gmail.com</a>
<a href=""mailto:f.a.ce.boo.k.inc1.0.0.0@gmail.com"">f.a.ce.boo.k.inc1.0.0.0@gmail.com</a>
<a href=""mailto:f.ac.ebo.o.kinc1.0.0.0@gmail.com"">f.ac.ebo.o.kinc1.0.0.0@gmail.com</a>
<a href=""mailto:f.ace.b.oo.ki.nc.1.0.0.0@gmail.com"">f.ace.b.oo.ki.nc.1.0.0.0@gmail.com</a>
<a href=""mailto:f.ac.e.boo.kin.c10.0.0@gmail.com"">f.ac.e.boo.kin.c10.0.0@gmail.com</a>
<a href=""mailto:f.acebook.inc1.0.0.0@gmail.com"">f.acebook.inc1.0.0.0@gmail.com</a>
<a href=""mailto:f.ace.book.in.c.1.0.0.0@gmail.com"">f.ace.book.in.c.1.0.0.0@gmail.com</a>
<a href=""mailto:fa.ceb.o.okinc.1.0.00@gmail.com"">fa.ceb.o.okinc.1.0.00@gmail.com</a>
<a href=""mailto:fac.e.b.o.o.k.i.n.c.10.00@gmail.com"">fac.e.b.o.o.k.i.n.c.10.00@gmail.com</a>
<a href=""mailto:fa.c.e.b.oo.k.i.nc1000@gmail.com"">fa.c.e.b.oo.k.i.nc1000@gmail.com</a>
<a href=""mailto:f.ac.e.b.o.ok.i.n.c1.00.0@gmail.com"">f.ac.e.b.o.ok.i.n.c1.00.0@gmail.com</a>
<a href=""mailto:fa.c.e.b.o.ok.i.n.c1.0.00@gmail.com"">fa.c.e.b.o.ok.i.n.c1.0.00@gmail.com</a>
<a href=""mailto:fac.e.booki.nc100.0@gmail.com"">fac.e.booki.nc100.0@gmail.com</a>
<a href=""mailto:facebo.o.k.in.c.1000@gmail.com"">facebo.o.k.in.c.1000@gmail.com</a>
<a href=""mailto:facebo.ok.i.nc.1000@gmail.com"">facebo.ok.i.nc.1000@gmail.com</a>
<a href=""mailto:fa.ce.bo.ok.inc.10.0.0@gmail.com"">fa.ce.bo.ok.inc.10.0.0@gmail.com</a>
<a href=""mailto:fa.ce.boo.k.i.nc.100.0@gmail.com"">fa.ce.boo.k.i.nc.100.0@gmail.com</a>
<a href=""mailto:fac.eb.ook.i.nc10.0.0@gmail.com"">fac.eb.ook.i.nc10.0.0@gmail.com</a>
<a href=""mailto:f.acebo.o.kinc.100.0@gmail.com"">f.acebo.o.kinc.100.0@gmail.com</a>
<a href=""mailto:fa.c.eboo.kinc.1.00.0@gmail.com"">fa.c.eboo.kinc.1.00.0@gmail.com</a>
<a href=""mailto:fa.ceb.oo.kinc1.000@gmail.com"">fa.ceb.oo.kinc1.000@gmail.com</a>
<a href=""mailto:fac.e.b.ook.i.n.c.1.0.0.0@gmail.com"">fac.e.b.ook.i.n.c.1.0.0.0@gmail.com</a>
<a href=""mailto:f.ac.e.b.ookin.c1000@gmail.com"">f.ac.e.b.ookin.c1000@gmail.com</a>
<a href=""mailto:f.ac.e.b.ookinc1.0.00@gmail.com"">f.ac.e.b.ookinc1.0.00@gmail.com</a>
<a href=""mailto:f.ace.b.oo.k.i.nc.100.0@gmail.com"">f.ace.b.oo.k.i.nc.100.0@gmail.com</a>
<a href=""mailto:fa.c.e.b.oo.kinc.1.000@gmail.com"">fa.c.e.b.oo.kinc.1.000@gmail.com</a>
<a href=""mailto:f.ac.e.bo.ok.in.c100.0@gmail.com"">f.ac.e.bo.ok.in.c100.0@gmail.com</a>
<a href=""mailto:faceb.oo.k.i.n.c1.000@gmail.com"">faceb.oo.k.i.n.c1.000@gmail.com</a>
<a href=""mailto:f.a.c.e.booki.n.c1000@gmail.com"">f.a.c.e.booki.n.c1000@gmail.com</a>
<a href=""mailto:fa.c.ebo.o.kinc1.0.0.0@gmail.com"">fa.c.ebo.o.kinc1.0.0.0@gmail.com</a>
<a href=""mailto:f.a.ceb.o.o.k.i.n.c1.00.0@gmail.com"">f.a.ceb.o.o.k.i.n.c1.00.0@gmail.com</a>
<a href=""mailto:f.ace.b.oo.k.i.n.c.1.000@gmail.com"">f.ace.b.oo.k.i.n.c.1.000@gmail.com</a>
<a href=""mailto:f.a.c.e.bo.okinc.10.00@gmail.com"">f.a.c.e.bo.okinc.10.00@gmail.com</a>
<a href=""mailto:f.a.c.e.b.ook.i.nc.1.0.00@gmail.com"">f.a.c.e.b.ook.i.nc.1.0.00@gmail.com</a>
<a href=""mailto:f.a.c.eb.o.okin.c.1.00.0@gmail.com"">f.a.c.eb.o.okin.c.1.00.0@gmail.com</a>
<a href=""mailto:fa.c.ebo.oki.n.c.1.0.0.0@gmail.com"">fa.c.ebo.oki.n.c.1.0.0.0@gmail.com</a>
<a href=""mailto:face.b.ooki.nc.1.0.00@gmail.com"">face.b.ooki.nc.1.0.00@gmail.com</a>
<a href=""mailto:faceb.o.o.k.i.nc10.0.0@gmail.com"">faceb.o.o.k.i.nc10.0.0@gmail.com</a>
<a href=""mailto:f.a.c.ebooki.nc.1.00.0@gmail.com"">f.a.c.ebooki.nc.1.00.0@gmail.com</a>
<a href=""mailto:f.a.c.e.b.oo.kinc1.0.0.0@gmail.com"">f.a.c.e.b.oo.kinc1.0.0.0@gmail.com</a>
<a href=""mailto:f.ac.e.bo.o.k.i.n.c.10.00@gmail.com"">f.ac.e.bo.o.k.i.n.c.10.00@gmail.com</a>
<a href=""mailto:f.ace.bo.o.kinc100.0@gmail.com"">f.ace.bo.o.kinc100.0@gmail.com</a>
<a href=""mailto:fac.e.b.o.okinc1000@gmail.com"">fac.e.b.o.okinc1000@gmail.com</a>
<a href=""mailto:fa.ce.b.o.ok.in.c.10.0.0@gmail.com"">fa.ce.b.o.ok.in.c.10.0.0@gmail.com</a>
<a href=""mailto:f.a.c.eboo.k.in.c1.0.0.0@gmail.com"">f.a.c.eboo.k.in.c1.0.0.0@gmail.com</a>
<a href=""mailto:f.ace.b.oo.kinc.1.000@gmail.com"">f.ace.b.oo.kinc.1.000@gmail.com</a>
<a href=""mailto:fac.eb.o.ok.inc10.0.0@gmail.com"">fac.eb.o.ok.inc10.0.0@gmail.com</a>
<a href=""mailto:faceboo.k.i.nc10.0.0@gmail.com"">faceboo.k.i.nc10.0.0@gmail.com</a>
<a href=""mailto:fa.c.e.b.oo.k.i.n.c1.000@gmail.com"">fa.c.e.b.oo.k.i.n.c1.000@gmail.com</a>
<a href=""mailto:facebookinc275@gmail.com"">facebookinc275@gmail.com</a>
<a href=""mailto:fac.eb.o.ok.inc2.7.5@gmail.com"">fac.eb.o.ok.inc2.7.5@gmail.com</a>
<a href=""mailto:f.acebook.inc2.7.5@gmail.com"">f.acebook.inc2.7.5@gmail.com</a>
<a href=""mailto:f.ac.e.b.oo.ki.nc2.75@gmail.com"">f.ac.e.b.oo.ki.nc2.75@gmail.com</a>
<a href=""mailto:f.ac.e.b.o.oki.n.c2.7.5@gmail.com"">f.ac.e.b.o.oki.n.c2.7.5@gmail.com</a>
<a href=""mailto:fa.c.e.b.oo.ki.n.c.275@gmail.com"">fa.c.e.b.oo.ki.n.c.275@gmail.com</a>
<a href=""mailto:fa.c.ebook.inc.2.7.5@gmail.com"">fa.c.ebook.inc.2.7.5@gmail.com</a>
<a href=""mailto:fa.ce.b.oo.k.inc2.75@gmail.com"">fa.ce.b.oo.k.inc2.75@gmail.com</a>
<a href=""mailto:f.acebo.ok.inc.2.75@gmail.com"">f.acebo.ok.inc.2.75@gmail.com</a>
<a href=""mailto:f.a.c.eboo.kinc27.5@gmail.com"">f.a.c.eboo.kinc27.5@gmail.com</a>
<a href=""mailto:fac.eboo.k.in.c.2.7.5@gmail.com"">fac.eboo.k.in.c.2.7.5@gmail.com</a>
<a href=""mailto:fa.ce.b.o.o.k.inc275@gmail.com"">fa.ce.b.o.o.k.inc275@gmail.com</a>
<a href=""mailto:f.acebo.o.k.inc27.5@gmail.com"">f.acebo.o.k.inc27.5@gmail.com</a>
<a href=""mailto:f.a.ce.b.o.o.k.i.nc.27.5@gmail.com"">f.a.ce.b.o.o.k.i.nc.27.5@gmail.com</a>
<a href=""mailto:face.book.in.c2.75@gmail.com"">face.book.in.c2.75@gmail.com</a>
<a href=""mailto:f.a.ce.b.oo.ki.nc2.7.5@gmail.com"">f.a.ce.b.oo.ki.nc2.7.5@gmail.com</a>
<a href=""mailto:f.a.c.e.b.o.okinc275@gmail.com"">f.a.c.e.b.o.okinc275@gmail.com</a>
<a href=""mailto:f.ace.boo.ki.n.c275@gmail.com"">f.ace.boo.ki.n.c275@gmail.com</a>
<a href=""mailto:fa.c.eb.oo.k.i.nc.27.5@gmail.com"">fa.c.eb.oo.k.i.nc.27.5@gmail.com</a>
<a href=""mailto:f.a.c.e.boo.kin.c2.7.5@gmail.com"">f.a.c.e.boo.kin.c2.7.5@gmail.com</a>
<a href=""mailto:face.b.o.o.k.i.nc27.5@gmail.com"">face.b.o.o.k.i.nc27.5@gmail.com</a>
<a href=""mailto:f.a.ce.book.inc2.75@gmail.com"">f.a.ce.book.inc2.75@gmail.com</a>
<a href=""mailto:fac.e.bookin.c2.7.5@gmail.com"">fac.e.bookin.c2.7.5@gmail.com</a>
<a href=""mailto:fa.c.ebo.o.k.i.n.c.27.5@gmail.com"">fa.c.ebo.o.k.i.n.c.27.5@gmail.com</a>
<a href=""mailto:fac.e.b.o.oki.n.c.2.75@gmail.com"">fac.e.b.o.oki.n.c.2.75@gmail.com</a>
<a href=""mailto:fac.eb.o.o.k.i.n.c.2.75@gmail.com"">fac.eb.o.o.k.i.n.c.2.75@gmail.com</a>
<a href=""mailto:faceboo.kin.c27.5@gmail.com"">faceboo.kin.c27.5@gmail.com</a>
<a href=""mailto:f.ac.eb.oo.kin.c.2.7.5@gmail.com"">f.ac.eb.oo.kin.c.2.7.5@gmail.com</a>
<a href=""mailto:fa.c.eb.o.okinc2.75@gmail.com"">fa.c.eb.o.okinc2.75@gmail.com</a>
<a href=""mailto:fa.ceb.o.o.kin.c27.5@gmail.com"">fa.ceb.o.o.kin.c27.5@gmail.com</a>
<a href=""mailto:f.a.ceb.o.oki.nc27.5@gmail.com"">f.a.ceb.o.oki.nc27.5@gmail.com</a>
<a href=""mailto:fa.c.eb.o.ok.i.nc27.5@gmail.com"">fa.c.eb.o.ok.i.nc27.5@gmail.com</a>
<a href=""mailto:f.a.ce.b.oo.ki.n.c27.5@gmail.com"">f.a.ce.b.oo.ki.n.c27.5@gmail.com</a>
<a href=""mailto:f.ac.e.b.o.okin.c2.75@gmail.com"">f.ac.e.b.o.okin.c2.75@gmail.com</a>
<a href=""mailto:f.ac.e.b.o.o.k.i.nc2.75@gmail.com"">f.ac.e.b.o.o.k.i.nc2.75@gmail.com</a>
<a href=""mailto:f.ac.eb.ooki.nc275@gmail.com"">f.ac.eb.ooki.nc275@gmail.com</a>
<a href=""mailto:fa.ce.bo.o.k.i.n.c2.7.5@gmail.com"">fa.ce.bo.o.k.i.n.c2.7.5@gmail.com</a>
<a href=""mailto:fa.ce.b.o.ok.i.nc2.75@gmail.com"">fa.ce.b.o.ok.i.nc2.75@gmail.com</a>
<a href=""mailto:f.ac.eb.o.okin.c2.75@gmail.com"">f.ac.eb.o.okin.c2.75@gmail.com</a>
<a href=""mailto:f.ac.eb.o.ok.i.n.c.2.75@gmail.com"">f.ac.eb.o.ok.i.n.c.2.75@gmail.com</a>
<a href=""mailto:fa.c.eb.o.oki.n.c.275@gmail.com"">fa.c.eb.o.oki.n.c.275@gmail.com</a>
<a href=""mailto:f.a.c.e.booki.nc.27.5@gmail.com"">f.a.c.e.booki.nc.27.5@gmail.com</a>
<a href=""mailto:f.ac.eb.ook.inc275@gmail.com"">f.ac.eb.ook.inc275@gmail.com</a>
<a href=""mailto:faceboo.ki.nc.2.7.5@gmail.com"">faceboo.ki.nc.2.7.5@gmail.com</a>
<a href=""mailto:f.a.ceb.o.o.k.inc.27.5@gmail.com"">f.a.ceb.o.o.k.inc.27.5@gmail.com</a>
<a href=""mailto:f.ace.booki.nc.275@gmail.com"">f.ace.booki.nc.275@gmail.com</a>
<a href=""mailto:faceb.ooki.nc2.7.5@gmail.com"">faceb.ooki.nc2.7.5@gmail.com</a>
<a href=""mailto:f.ace.bo.oki.n.c.2.7.5@gmail.com"">f.ace.bo.oki.n.c.2.7.5@gmail.com</a>
<a href=""mailto:f.ace.b.oo.k.in.c.2.75@gmail.com"">f.ace.b.oo.k.in.c.2.75@gmail.com</a>
<a href=""mailto:f.a.ceb.ook.i.nc2.7.5@gmail.com"">f.a.ceb.ook.i.nc2.7.5@gmail.com</a>
<a href=""mailto:fac.eb.o.o.k.i.n.c.275@gmail.com"">fac.eb.o.o.k.i.n.c.275@gmail.com</a>
<a href=""mailto:fa.c.ebo.ok.i.n.c27.5@gmail.com"">fa.c.ebo.ok.i.n.c27.5@gmail.com</a>
<a href=""mailto:fa.ceb.o.oki.n.c.2.7.5@gmail.com"">fa.ceb.o.oki.n.c.2.7.5@gmail.com</a>
<a href=""mailto:f.aceb.oo.kin.c.2.75@gmail.com"">f.aceb.oo.kin.c.2.75@gmail.com</a>
<a href=""mailto:facebo.ok.i.n.c.275@gmail.com"">facebo.ok.i.n.c.275@gmail.com</a>
<a href=""mailto:fa.c.ebo.o.kin.c.27.5@gmail.com"">fa.c.ebo.o.kin.c.27.5@gmail.com</a>
<a href=""mailto:f.ac.ebooki.nc.27.5@gmail.com"">f.ac.ebooki.nc.27.5@gmail.com</a>
<a href=""mailto:f.a.ce.book.in.c275@gmail.com"">f.a.ce.book.in.c275@gmail.com</a>
<a href=""mailto:f.a.c.ebo.ok.inc.275@gmail.com"">f.a.c.ebo.ok.inc.275@gmail.com</a>
<a href=""mailto:fa.ce.bo.okin.c.2.7.5@gmail.com"">fa.ce.bo.okin.c.2.7.5@gmail.com</a>
<a href=""mailto:fa.c.eboo.ki.n.c.27.5@gmail.com"">fa.c.eboo.ki.n.c.27.5@gmail.com</a>
<a href=""mailto:f.ace.b.ook.inc27.5@gmail.com"">f.ace.b.ook.inc27.5@gmail.com</a>
<a href=""mailto:f.ace.b.o.okin.c2.7.5@gmail.com"">f.ace.b.o.okin.c2.7.5@gmail.com</a>
<a href=""mailto:f.ac.eb.o.o.kinc.27.5@gmail.com"">f.ac.eb.o.o.kinc.27.5@gmail.com</a>
<a href=""mailto:fa.ce.b.oo.k.in.c2.7.5@gmail.com"">fa.ce.b.oo.k.in.c2.7.5@gmail.com</a>
<a href=""mailto:f.a.ceb.o.o.kin.c2.75@gmail.com"">f.a.ceb.o.o.kin.c2.75@gmail.com</a>
<a href=""mailto:fa.c.eb.ookinc2.75@gmail.com"">fa.c.eb.ookinc2.75@gmail.com</a>
<a href=""mailto:f.a.c.e.book.inc275@gmail.com"">f.a.c.e.book.inc275@gmail.com</a>
<a href=""mailto:face.b.o.o.kinc.275@gmail.com"">face.b.o.o.kinc.275@gmail.com</a>
<a href=""mailto:f.ace.b.o.o.k.i.n.c.27.5@gmail.com"">f.ace.b.o.o.k.i.n.c.27.5@gmail.com</a>
<a href=""mailto:fac.e.bo.o.k.in.c.275@gmail.com"">fac.e.bo.o.k.in.c.275@gmail.com</a>
<a href=""mailto:f.a.ceb.o.o.k.i.nc.27.5@gmail.com"">f.a.ceb.o.o.k.i.nc.27.5@gmail.com</a>
<a href=""mailto:f.a.c.eb.ook.i.n.c.2.75@gmail.com"">f.a.c.eb.ook.i.n.c.2.75@gmail.com</a>
<a href=""mailto:face.bo.ok.in.c275@gmail.com"">face.bo.ok.in.c275@gmail.com</a>
<a href=""mailto:face.b.o.o.k.inc.2.7.5@gmail.com"">face.b.o.o.k.inc.2.7.5@gmail.com</a>
<a href=""mailto:f.a.ceb.ook.in.c275@gmail.com"">f.a.ceb.ook.in.c275@gmail.com</a>
<a href=""mailto:f.ac.e.bo.ok.inc2.7.5@gmail.com"">f.ac.e.bo.ok.inc2.7.5@gmail.com</a>
<a href=""mailto:fa.c.e.b.o.oki.nc.2.75@gmail.com"">fa.c.e.b.o.oki.nc.2.75@gmail.com</a>
<a href=""mailto:f.ace.b.oo.ki.nc27.5@gmail.com"">f.ace.b.oo.ki.nc27.5@gmail.com</a>
<a href=""mailto:f.a.c.eb.o.o.kin.c.2.75@gmail.com"">f.a.c.eb.o.o.kin.c.2.75@gmail.com</a>
<a href=""mailto:f.ac.eb.o.okinc2.7.5@gmail.com"">f.ac.eb.o.okinc2.7.5@gmail.com</a>
<a href=""mailto:fa.c.ebo.o.k.i.nc.2.75@gmail.com"">fa.c.ebo.o.k.i.nc.2.75@gmail.com</a>
<a href=""mailto:f.a.ceb.oo.ki.nc275@gmail.com"">f.a.ceb.oo.ki.nc275@gmail.com</a>
<a href=""mailto:fa.c.e.bookinc2.75@gmail.com"">fa.c.e.bookinc2.75@gmail.com</a>
<a href=""mailto:fa.c.e.boo.ki.nc.27.5@gmail.com"">fa.c.e.boo.ki.nc.27.5@gmail.com</a>
<a href=""mailto:faceb.o.ok.i.nc27.5@gmail.com"">faceb.o.ok.i.nc27.5@gmail.com</a>
<a href=""mailto:fa.ce.b.o.okinc.2.75@gmail.com"">fa.ce.b.o.okinc.2.75@gmail.com</a>
<a href=""mailto:f.a.c.eb.oo.k.inc.27.5@gmail.com"">f.a.c.eb.oo.k.inc.27.5@gmail.com</a>
<a href=""mailto:fa.c.e.b.o.ok.inc27.5@gmail.com"">fa.c.e.b.o.ok.inc27.5@gmail.com</a>
<a href=""mailto:fac.e.boo.ki.n.c.27.5@gmail.com"">fac.e.boo.ki.n.c.27.5@gmail.com</a>
<a href=""mailto:faceboo.k.i.nc27.5@gmail.com"">faceboo.k.i.nc27.5@gmail.com</a>
<a href=""mailto:f.a.cebo.okinc.27.5@gmail.com"">f.a.cebo.okinc.27.5@gmail.com</a>
<a href=""mailto:fa.c.eb.ook.i.n.c.2.75@gmail.com"">fa.c.eb.ook.i.n.c.2.75@gmail.com</a>
<a href=""mailto:facebo.oki.n.c275@gmail.com"">facebo.oki.n.c275@gmail.com</a>
<a href=""mailto:fac.e.b.o.o.ki.nc2.7.5@gmail.com"">fac.e.b.o.o.ki.nc2.7.5@gmail.com</a>
<a href=""mailto:fa.ceb.ooki.n.c275@gmail.com"">fa.ceb.ooki.n.c275@gmail.com</a>
<a href=""mailto:fa.ce.b.oo.k.i.nc.27.5@gmail.com"">fa.ce.b.oo.k.i.nc.27.5@gmail.com</a>
<a href=""mailto:fac.e.boo.k.inc2.75@gmail.com"">fac.e.boo.k.inc2.75@gmail.com</a>
<a href=""mailto:f.a.ce.b.ookinc.2.7.5@gmail.com"">f.a.ce.b.ookinc.2.7.5@gmail.com</a>
<a href=""mailto:fac.e.b.o.o.kin.c.2.7.5@gmail.com"">fac.e.b.o.o.kin.c.2.7.5@gmail.com</a>
<a href=""mailto:f.a.ce.boo.kin.c.2.7.5@gmail.com"">f.a.ce.boo.kin.c.2.7.5@gmail.com</a>
<a href=""mailto:f.a.ceb.o.o.ki.nc.2.7.5@gmail.com"">f.a.ceb.o.o.ki.nc.2.7.5@gmail.com</a>
<a href=""mailto:fa.c.ebook.inc275@gmail.com"">fa.c.ebook.inc275@gmail.com</a>
<a href=""mailto:facebo.o.k.i.nc2.7.5@gmail.com"">facebo.o.k.i.nc2.7.5@gmail.com</a>
<a href=""mailto:f.ac.e.bo.o.k.inc.27.5@gmail.com"">f.ac.e.bo.o.k.inc.27.5@gmail.com</a>
<a href=""mailto:f.a.c.e.b.ooki.n.c.27.5@gmail.com"">f.a.c.e.b.ooki.n.c.27.5@gmail.com</a>
<a href=""mailto:facebooki.n.c2.75@gmail.com"">facebooki.n.c2.75@gmail.com</a>
<a href=""mailto:fa.ce.b.o.okin.c.2.7.5@gmail.com"">fa.ce.b.o.okin.c.2.7.5@gmail.com</a>
<a href=""mailto:f.a.ce.b.o.o.ki.n.c.275@gmail.com"">f.a.ce.b.o.o.ki.n.c.275@gmail.com</a>
<a href=""mailto:f.a.c.e.b.o.o.kin.c.275@gmail.com"">f.a.c.e.b.o.o.kin.c.275@gmail.com</a>
<a href=""mailto:f.a.c.ebo.o.k.inc.275@gmail.com"">f.a.c.ebo.o.k.inc.275@gmail.com</a>
<a href=""mailto:f.ace.b.o.o.ki.nc.2.75@gmail.com"">f.ace.b.o.o.ki.nc.2.75@gmail.com</a>
<a href=""mailto:fac.ebo.okinc27.5@gmail.com"">fac.ebo.okinc27.5@gmail.com</a>
<a href=""mailto:fa.ce.b.ook.i.nc.275@gmail.com"">fa.ce.b.ook.i.nc.275@gmail.com</a>
<a href=""mailto:f.ac.e.bo.ok.in.c.275@gmail.com"">f.ac.e.bo.ok.in.c.275@gmail.com</a>
<a href=""mailto:f.ac.ebookin.c2.75@gmail.com"">f.ac.ebookin.c2.75@gmail.com</a>
<a href=""mailto:fa.c.e.bo.o.k.i.n.c2.7.5@gmail.com"">fa.c.e.bo.o.k.i.n.c2.7.5@gmail.com</a>
<a href=""mailto:f.ac.eboo.k.inc.27.5@gmail.com"">f.ac.eboo.k.inc.27.5@gmail.com</a>
<a href=""mailto:fa.c.e.b.oo.ki.nc.275@gmail.com"">fa.c.e.b.oo.ki.nc.275@gmail.com</a>
<a href=""mailto:f.ac.e.b.ooki.nc2.75@gmail.com"">f.ac.e.b.ooki.nc2.75@gmail.com</a>
<a href=""mailto:f.ac.e.b.oo.ki.n.c2.7.5@gmail.com"">f.ac.e.b.oo.ki.n.c2.7.5@gmail.com</a>
<a href=""mailto:fa.c.eb.oo.ki.n.c.2.75@gmail.com"">fa.c.eb.oo.ki.n.c.2.75@gmail.com</a>
<a href=""mailto:f.a.ceb.ook.inc2.75@gmail.com"">f.a.ceb.ook.inc2.75@gmail.com</a>
<a href=""mailto:fa.c.ebo.oki.n.c.2.75@gmail.com"">fa.c.ebo.oki.n.c.2.75@gmail.com</a>
<a href=""mailto:f.a.cebook.i.n.c.275@gmail.com"">f.a.cebook.i.n.c.275@gmail.com</a>
<a href=""mailto:f.ace.b.ook.in.c.275@gmail.com"">f.ace.b.ook.in.c.275@gmail.com</a>
<a href=""mailto:fac.eb.o.o.kinc.275@gmail.com"">fac.eb.o.o.kinc.275@gmail.com</a>
<a href=""mailto:f.ace.bo.o.k.i.n.c2.7.5@gmail.com"">f.ace.bo.o.k.i.n.c2.7.5@gmail.com</a>
<a href=""mailto:fa.cebooki.nc275@gmail.com"">fa.cebooki.nc275@gmail.com</a>
<a href=""mailto:f.a.ce.b.o.o.kinc.2.75@gmail.com"">f.a.ce.b.o.o.kinc.2.75@gmail.com</a>
<a href=""mailto:fac.e.b.ook.in.c.27.5@gmail.com"">fac.e.b.ook.in.c.27.5@gmail.com</a>
<a href=""mailto:f.a.ce.b.o.o.k.i.nc2.7.5@gmail.com"">f.a.ce.b.o.o.k.i.nc2.7.5@gmail.com</a>
<a href=""mailto:f.ac.e.boo.ki.n.c.2.75@gmail.com"">f.ac.e.boo.ki.n.c.2.75@gmail.com</a>
<a href=""mailto:f.acebookin.c275@gmail.com"">f.acebookin.c275@gmail.com</a>
<a href=""mailto:fa.ce.b.o.oki.n.c.2.75@gmail.com"">fa.ce.b.o.oki.n.c.2.75@gmail.com</a>
<a href=""mailto:f.ace.b.ookin.c2.75@gmail.com"">f.ace.b.ookin.c2.75@gmail.com</a>
<a href=""mailto:f.ac.ebooki.n.c.27.5@gmail.com"">f.ac.ebooki.n.c.27.5@gmail.com</a>
<a href=""mailto:face.bo.o.ki.n.c.275@gmail.com"">face.bo.o.ki.n.c.275@gmail.com</a>
<a href=""mailto:f.a.c.e.b.ooki.n.c275@gmail.com"">f.a.c.e.b.ooki.n.c275@gmail.com</a>
<a href=""mailto:fa.ce.b.o.o.k.i.n.c2.7.5@gmail.com"">fa.ce.b.o.o.k.i.n.c2.7.5@gmail.com</a>
<a href=""mailto:f.a.cebo.o.k.inc.2.75@gmail.com"">f.a.cebo.o.k.inc.2.75@gmail.com</a>
<a href=""mailto:f.aceb.o.ok.inc275@gmail.com"">f.aceb.o.ok.inc275@gmail.com</a>
<a href=""mailto:face.book.i.nc.275@gmail.com"">face.book.i.nc.275@gmail.com</a>
<a href=""mailto:fa.cebooki.nc.2.7.5@gmail.com"">fa.cebooki.nc.2.7.5@gmail.com</a>
<a href=""mailto:f.aceb.oo.k.inc.2.7.5@gmail.com"">f.aceb.oo.k.inc.2.7.5@gmail.com</a>
<a href=""mailto:fa.ceb.ookin.c27.5@gmail.com"">fa.ceb.ookin.c27.5@gmail.com</a>
<a href=""mailto:f.ace.b.oo.k.inc.2.7.5@gmail.com"">f.ace.b.oo.k.inc.2.7.5@gmail.com</a>
<a href=""mailto:fa.ceb.o.okin.c275@gmail.com"">fa.ceb.o.okin.c275@gmail.com</a>
<a href=""mailto:fac.e.bo.o.k.inc.2.7.5@gmail.com"">fac.e.bo.o.k.inc.2.7.5@gmail.com</a>
<a href=""mailto:f.ac.eb.o.ok.in.c2.7.5@gmail.com"">f.ac.eb.o.ok.in.c2.7.5@gmail.com</a>
<a href=""mailto:f.ac.e.b.o.oki.nc2.7.5@gmail.com"">f.ac.e.b.o.oki.nc2.7.5@gmail.com</a>
<a href=""mailto:f.ac.eb.o.o.ki.nc275@gmail.com"">f.ac.eb.o.o.ki.nc275@gmail.com</a>
<a href=""mailto:f.ac.ebo.o.kinc.2.75@gmail.com"">f.ac.ebo.o.kinc.2.75@gmail.com</a>
<a href=""mailto:f.ac.e.b.ook.inc.275@gmail.com"">f.ac.e.b.ook.inc.275@gmail.com</a>
<a href=""mailto:fa.c.e.bookinc.27.5@gmail.com"">fa.c.e.bookinc.27.5@gmail.com</a>
<a href=""mailto:f.ace.bo.o.kinc2.75@gmail.com"">f.ace.bo.o.kinc2.75@gmail.com</a>
<a href=""mailto:f.a.ce.boo.k.inc27.5@gmail.com"">f.a.ce.boo.k.inc27.5@gmail.com</a>
<a href=""mailto:f.ace.bookin.c275@gmail.com"">f.ace.bookin.c275@gmail.com</a>
<a href=""mailto:f.a.c.e.b.o.o.ki.n.c2.7.5@gmail.com"">f.a.c.e.b.o.o.ki.n.c2.7.5@gmail.com</a>
<a href=""mailto:f.a.ce.b.oo.ki.n.c2.7.5@gmail.com"">f.a.ce.b.oo.ki.n.c2.7.5@gmail.com</a>
<a href=""mailto:f.ace.bo.o.ki.nc.2.75@gmail.com"">f.ace.bo.o.ki.nc.2.75@gmail.com</a>
<a href=""mailto:f.a.ceb.o.ok.inc275@gmail.com"">f.a.ceb.o.ok.inc275@gmail.com</a>
<a href=""mailto:f.ace.bo.ok.inc2.7.5@gmail.com"">f.ace.bo.ok.inc2.7.5@gmail.com</a>
<a href=""mailto:fa.ce.bookin.c.27.5@gmail.com"">fa.ce.bookin.c.27.5@gmail.com</a>
<a href=""mailto:facebook.in.c27.5@gmail.com"">facebook.in.c27.5@gmail.com</a>
<a href=""mailto:f.aceb.o.o.kinc2.75@gmail.com"">f.aceb.o.o.kinc2.75@gmail.com</a>
<a href=""mailto:fa.c.e.bookin.c.27.5@gmail.com"">fa.c.e.bookin.c.27.5@gmail.com</a>
<a href=""mailto:f.ac.eb.o.o.kin.c.27.5@gmail.com"">f.ac.eb.o.o.kin.c.27.5@gmail.com</a>
<a href=""mailto:f.aceb.o.o.ki.nc.2.75@gmail.com"">f.aceb.o.o.ki.nc.2.75@gmail.com</a>
<a href=""mailto:fa.c.ebo.ok.inc2.7.5@gmail.com"">fa.c.ebo.ok.inc2.7.5@gmail.com</a>
<a href=""mailto:f.a.cebo.o.kinc275@gmail.com"">f.a.cebo.o.kinc275@gmail.com</a>
<a href=""mailto:f.aceb.o.okin.c275@gmail.com"">f.aceb.o.okin.c275@gmail.com</a>
<a href=""mailto:f.a.c.ebook.i.nc275@gmail.com"">f.a.c.ebook.i.nc275@gmail.com</a>
<a href=""mailto:f.ace.boo.k.i.n.c27.5@gmail.com"">f.ace.boo.k.i.n.c27.5@gmail.com</a>
<a href=""mailto:facebo.okin.c.2.75@gmail.com"">facebo.okin.c.2.75@gmail.com</a>
<a href=""mailto:f.a.ce.bookin.c275@gmail.com"">f.a.ce.bookin.c275@gmail.com</a>
<a href=""mailto:face.booki.n.c2.75@gmail.com"">face.booki.n.c2.75@gmail.com</a>
<a href=""mailto:f.a.c.ebo.ok.i.nc.27.5@gmail.com"">f.a.c.ebo.ok.i.nc.27.5@gmail.com</a>
<a href=""mailto:facebo.o.kinc.275@gmail.com"">facebo.o.kinc.275@gmail.com</a>
<a href=""mailto:f.a.c.eb.oo.k.i.nc275@gmail.com"">f.a.c.eb.oo.k.i.nc275@gmail.com</a>
<a href=""mailto:f.ac.e.bo.oki.n.c.2.75@gmail.com"">f.ac.e.bo.oki.n.c.2.75@gmail.com</a>
<a href=""mailto:fa.ce.bo.o.ki.n.c.275@gmail.com"">fa.ce.bo.o.ki.n.c.275@gmail.com</a>
<a href=""mailto:fa.ceb.ook.in.c2.7.5@gmail.com"">fa.ceb.ook.in.c2.7.5@gmail.com</a>
<a href=""mailto:faceb.o.ok.inc275@gmail.com"">faceb.o.ok.inc275@gmail.com</a>
<a href=""mailto:fa.c.eb.o.oki.nc.275@gmail.com"">fa.c.eb.o.oki.nc.275@gmail.com</a>
<a href=""mailto:faceb.oo.k.i.nc275@gmail.com"">faceb.oo.k.i.nc275@gmail.com</a>
<a href=""mailto:f.a.ce.b.o.o.k.in.c.2.75@gmail.com"">f.a.ce.b.o.o.k.in.c.2.75@gmail.com</a>
<a href=""mailto:f.a.c.e.b.oo.k.i.n.c.2.75@gmail.com"">f.a.c.e.b.oo.k.i.n.c.2.75@gmail.com</a>
<a href=""mailto:fac.e.book.in.c2.7.5@gmail.com"">fac.e.book.in.c2.7.5@gmail.com</a>
<a href=""mailto:f.a.ce.boo.kinc275@gmail.com"">f.a.ce.boo.kinc275@gmail.com</a>
<a href=""mailto:f.ac.eb.ookin.c2.75@gmail.com"">f.ac.eb.ookin.c2.75@gmail.com</a>
<a href=""mailto:fa.c.e.bo.oki.nc2.75@gmail.com"">fa.c.e.bo.oki.nc2.75@gmail.com</a>
<a href=""mailto:f.acebo.o.k.i.n.c.2.7.5@gmail.com"">f.acebo.o.k.i.n.c.2.7.5@gmail.com</a>
<a href=""mailto:f.ace.boo.kin.c27.5@gmail.com"">f.ace.boo.kin.c27.5@gmail.com</a>
<a href=""mailto:fac.e.b.ookinc.275@gmail.com"">fac.e.b.ookinc.275@gmail.com</a>
<a href=""mailto:faceb.o.oki.n.c2.75@gmail.com"">faceb.o.oki.n.c2.75@gmail.com</a>
<a href=""mailto:f.ace.b.o.o.k.inc.2.7.5@gmail.com"">f.ace.b.o.o.k.inc.2.7.5@gmail.com</a>
<a href=""mailto:fa.cebo.okin.c275@gmail.com"">fa.cebo.okin.c275@gmail.com</a>
<a href=""mailto:f.a.ceb.o.o.k.i.nc27.5@gmail.com"">f.a.ceb.o.o.k.i.nc27.5@gmail.com</a>
<a href=""mailto:fa.ce.bookin.c.2.75@gmail.com"">fa.ce.bookin.c.2.75@gmail.com</a>
<a href=""mailto:f.aceb.o.ok.in.c.27.5@gmail.com"">f.aceb.o.ok.in.c.27.5@gmail.com</a>
<a href=""mailto:bxiekelsyrkdk@gmail.com"">bxiekelsyrkdk@gmail.com</a>
<a href=""mailto:b.x.i.ekel.s.yr.k.d.k@gmail.com"">b.x.i.ekel.s.yr.k.d.k@gmail.com</a>
<a href=""mailto:bxie.k.elsy.r.kdk@gmail.com"">bxie.k.elsy.r.kdk@gmail.com</a>
<a href=""mailto:bx.ie.k.el.s.y.rk.dk@gmail.com"">bx.ie.k.el.s.y.rk.dk@gmail.com</a>
<a href=""mailto:b.xiek.elsyr.kd.k@gmail.com"">b.xiek.elsyr.kd.k@gmail.com</a>
<a href=""mailto:b.x.i.e.k.e.l.syr.kd.k@gmail.com"">b.x.i.e.k.e.l.syr.kd.k@gmail.com</a>
<a href=""mailto:b.xiek.el.s.y.rk.dk@gmail.com"">b.xiek.el.s.y.rk.dk@gmail.com</a>
<a href=""mailto:bx.i.e.k.e.l.sy.rk.dk@gmail.com"">bx.i.e.k.e.l.sy.rk.dk@gmail.com</a>
<a href=""mailto:b.x.i.e.k.els.yr.kdk@gmail.com"">b.x.i.e.k.els.yr.kdk@gmail.com</a>
<a href=""mailto:bxiek.e.l.syrkdk@gmail.com"">bxiek.e.l.syrkdk@gmail.com</a>
<a href=""mailto:b.xi.eke.l.syrk.dk@gmail.com"">b.xi.eke.l.syrk.dk@gmail.com</a>
<a href=""mailto:b.x.ie.k.e.l.s.y.r.k.d.k@gmail.com"">b.x.ie.k.e.l.s.y.r.k.d.k@gmail.com</a>
<a href=""mailto:b.xie.k.e.ls.y.r.kdk@gmail.com"">b.xie.k.e.ls.y.r.kdk@gmail.com</a>
<a href=""mailto:b.xi.ek.e.l.syr.k.dk@gmail.com"">b.xi.ek.e.l.syr.k.dk@gmail.com</a>
<a href=""mailto:b.xi.e.k.elsy.r.k.d.k@gmail.com"">b.xi.e.k.elsy.r.k.d.k@gmail.com</a>
<a href=""mailto:bxi.ek.e.lsy.rk.d.k@gmail.com"">bxi.ek.e.lsy.rk.d.k@gmail.com</a>
<a href=""mailto:bx.iek.elsyr.k.dk@gmail.com"">bx.iek.elsyr.k.dk@gmail.com</a>
<a href=""mailto:bxi.eke.ls.y.rk.dk@gmail.com"">bxi.eke.ls.y.rk.dk@gmail.com</a>
<a href=""mailto:bxie.ke.l.s.yrkdk@gmail.com"">bxie.ke.l.s.yrkdk@gmail.com</a>
<a href=""mailto:bxi.eke.ls.yrk.d.k@gmail.com"">bxi.eke.ls.yrk.d.k@gmail.com</a>
<a href=""mailto:bx.ie.kel.s.yrkd.k@gmail.com"">bx.ie.kel.s.yrkd.k@gmail.com</a>
<a href=""mailto:b.x.i.e.ke.l.s.y.rkdk@gmail.com"">b.x.i.e.ke.l.s.y.rkdk@gmail.com</a>
<a href=""mailto:b.x.i.eke.ls.yrk.d.k@gmail.com"">b.x.i.eke.ls.yrk.d.k@gmail.com</a>
<a href=""mailto:bxieke.l.s.y.r.k.dk@gmail.com"">bxieke.l.s.y.r.k.dk@gmail.com</a>
<a href=""mailto:b.xi.e.k.els.y.r.k.dk@gmail.com"">b.xi.e.k.els.y.r.k.dk@gmail.com</a>
<a href=""mailto:bx.iek.e.l.s.y.r.kdk@gmail.com"">bx.iek.e.l.s.y.r.kdk@gmail.com</a>
<a href=""mailto:b.x.ieke.l.sy.r.k.d.k@gmail.com"">b.x.ieke.l.sy.r.k.d.k@gmail.com</a>
<a href=""mailto:b.x.i.ek.e.l.s.yrkdk@gmail.com"">b.x.i.ek.e.l.s.yrkdk@gmail.com</a>
<a href=""mailto:bxiekel.sy.rk.d.k@gmail.com"">bxiekel.sy.rk.d.k@gmail.com</a>
<a href=""mailto:b.x.iek.e.lsy.r.kdk@gmail.com"">b.x.iek.e.lsy.r.kdk@gmail.com</a>
<a href=""mailto:bxi.ek.el.syrkdk@gmail.com"">bxi.ek.el.syrkdk@gmail.com</a>
<a href=""mailto:bx.i.e.k.e.lsyrkdk@gmail.com"">bx.i.e.k.e.lsyrkdk@gmail.com</a>
<a href=""mailto:bx.ie.ke.lsy.rkdk@gmail.com"">bx.ie.ke.lsy.rkdk@gmail.com</a>
<a href=""mailto:b.x.ie.ke.l.s.yr.kdk@gmail.com"">b.x.ie.ke.l.s.yr.kdk@gmail.com</a>
<a href=""mailto:bxi.e.ke.ls.y.r.k.dk@gmail.com"">bxi.e.ke.ls.y.r.k.dk@gmail.com</a>
<a href=""mailto:b.xi.eke.ls.yrk.dk@gmail.com"">b.xi.eke.ls.yrk.dk@gmail.com</a>
<a href=""mailto:bx.i.ekelsy.r.k.d.k@gmail.com"">bx.i.ekelsy.r.k.d.k@gmail.com</a>
<a href=""mailto:b.xie.ke.l.syrkd.k@gmail.com"">b.xie.ke.l.syrkd.k@gmail.com</a>
<a href=""mailto:b.x.ie.k.elsy.rkd.k@gmail.com"">b.x.ie.k.elsy.rkd.k@gmail.com</a>
<a href=""mailto:bxieke.l.s.yrkd.k@gmail.com"">bxieke.l.s.yrkd.k@gmail.com</a>
<a href=""mailto:bxiek.e.l.sy.rk.dk@gmail.com"">bxiek.e.l.sy.rk.dk@gmail.com</a>
<a href=""mailto:bx.i.e.ke.l.sy.rkdk@gmail.com"">bx.i.e.ke.l.sy.rkdk@gmail.com</a>
<a href=""mailto:b.xi.e.kel.syrkdk@gmail.com"">b.xi.e.kel.syrkdk@gmail.com</a>
<a href=""mailto:bx.i.e.kel.s.yr.kdk@gmail.com"">bx.i.e.kel.s.yr.kdk@gmail.com</a>
<a href=""mailto:bx.i.e.ke.lsy.r.k.d.k@gmail.com"">bx.i.e.ke.lsy.r.k.d.k@gmail.com</a>
<a href=""mailto:b.x.i.e.k.e.ls.yr.kdk@gmail.com"">b.x.i.e.k.e.ls.yr.kdk@gmail.com</a>
<a href=""mailto:bx.i.e.k.elsyr.k.d.k@gmail.com"">bx.i.e.k.elsyr.k.d.k@gmail.com</a>
<a href=""mailto:b.x.ie.kel.s.y.r.kd.k@gmail.com"">b.x.ie.kel.s.y.r.kd.k@gmail.com</a>
<a href=""mailto:bx.i.e.ke.ls.y.rk.dk@gmail.com"">bx.i.e.ke.ls.y.rk.dk@gmail.com</a>
<a href=""mailto:b.x.i.e.ke.l.syr.k.d.k@gmail.com"">b.x.i.e.ke.l.syr.k.d.k@gmail.com</a>
<a href=""mailto:b.x.iek.e.lsyrk.dk@gmail.com"">b.x.iek.e.lsyrk.dk@gmail.com</a>
<a href=""mailto:b.xi.eke.l.s.yrk.d.k@gmail.com"">b.xi.eke.l.s.yrk.d.k@gmail.com</a>
<a href=""mailto:b.x.i.e.ke.ls.y.rk.d.k@gmail.com"">b.x.i.e.ke.ls.y.rk.d.k@gmail.com</a>
<a href=""mailto:b.x.iek.elsyrkdk@gmail.com"">b.x.iek.elsyrkdk@gmail.com</a>
<a href=""mailto:b.x.i.ek.e.l.syr.kd.k@gmail.com"">b.x.i.ek.e.l.syr.kd.k@gmail.com</a>
<a href=""mailto:b.xi.ek.e.l.sy.rkdk@gmail.com"">b.xi.ek.e.l.sy.rkdk@gmail.com</a>
<a href=""mailto:bx.i.ek.e.l.sy.rk.d.k@gmail.com"">bx.i.ek.e.l.sy.rk.d.k@gmail.com</a>
<a href=""mailto:b.x.ie.kel.s.yrk.d.k@gmail.com"">b.x.ie.kel.s.yrk.d.k@gmail.com</a>
<a href=""mailto:bx.ie.k.els.yrkdk@gmail.com"">bx.ie.k.els.yrkdk@gmail.com</a>
<a href=""mailto:bxiekel.sy.r.kd.k@gmail.com"">bxiekel.sy.r.kd.k@gmail.com</a>
<a href=""mailto:bx.i.e.k.e.ls.yrkd.k@gmail.com"">bx.i.e.k.e.ls.yrkd.k@gmail.com</a>
<a href=""mailto:b.x.i.e.k.e.l.sy.r.kdk@gmail.com"">b.x.i.e.k.e.l.sy.r.kdk@gmail.com</a>
<a href=""mailto:b.xiek.e.ls.yr.k.dk@gmail.com"">b.xiek.e.ls.yr.k.dk@gmail.com</a>
<a href=""mailto:bx.i.ek.e.ls.yr.kd.k@gmail.com"">bx.i.ek.e.ls.yr.kd.k@gmail.com</a>
<a href=""mailto:b.x.iekels.y.rkdk@gmail.com"">b.x.iekels.y.rkdk@gmail.com</a>
<a href=""mailto:b.xie.ke.lsy.rk.dk@gmail.com"">b.xie.ke.lsy.rk.dk@gmail.com</a>
<a href=""mailto:b.x.i.e.kels.y.r.kdk@gmail.com"">b.x.i.e.kels.y.r.kdk@gmail.com</a>
<a href=""mailto:b.xi.eke.ls.y.rk.d.k@gmail.com"">b.xi.eke.ls.y.rk.d.k@gmail.com</a>
<a href=""mailto:bxi.ek.e.ls.y.rk.dk@gmail.com"">bxi.ek.e.ls.y.rk.dk@gmail.com</a>
<a href=""mailto:b.xi.e.k.e.l.s.y.r.kdk@gmail.com"">b.xi.e.k.e.l.s.y.r.kdk@gmail.com</a>
<a href=""mailto:b.x.ieke.lsyr.k.dk@gmail.com"">b.x.ieke.lsyr.k.dk@gmail.com</a>
<a href=""mailto:b.xie.k.el.sy.rk.dk@gmail.com"">b.xie.k.el.sy.rk.dk@gmail.com</a>
<a href=""mailto:b.xi.e.k.e.lsyr.k.d.k@gmail.com"">b.xi.e.k.e.lsyr.k.d.k@gmail.com</a>
<a href=""mailto:bxi.ek.e.ls.yrkd.k@gmail.com"">bxi.ek.e.ls.yrkd.k@gmail.com</a>
<a href=""mailto:bxiekelsy.rkdk@gmail.com"">bxiekelsy.rkdk@gmail.com</a>
<a href=""mailto:b.xie.k.e.l.s.yrkd.k@gmail.com"">b.xie.k.e.l.s.yrkd.k@gmail.com</a>
<a href=""mailto:b.xi.eke.l.s.yr.kd.k@gmail.com"">b.xi.eke.l.s.yr.kd.k@gmail.com</a>
<a href=""mailto:b.x.i.ekelsyr.k.d.k@gmail.com"">b.x.i.ekelsyr.k.d.k@gmail.com</a>
<a href=""mailto:b.x.ieke.l.s.y.r.kd.k@gmail.com"">b.x.ieke.l.s.y.r.kd.k@gmail.com</a>
<a href=""mailto:bxiek.el.s.yr.k.dk@gmail.com"">bxiek.el.s.yr.k.dk@gmail.com</a>
<a href=""mailto:bx.i.e.k.e.l.sy.rkdk@gmail.com"">bx.i.e.k.e.l.sy.rkdk@gmail.com</a>
<a href=""mailto:bxi.ek.e.lsyr.kdk@gmail.com"">bxi.ek.e.lsyr.kdk@gmail.com</a>
<a href=""mailto:bx.i.ekelsyr.kd.k@gmail.com"">bx.i.ekelsyr.kd.k@gmail.com</a>
<a href=""mailto:b.xiek.el.s.y.r.k.d.k@gmail.com"">b.xiek.el.s.y.r.k.d.k@gmail.com</a>
<a href=""mailto:b.x.i.e.kel.sy.r.kdk@gmail.com"">b.x.i.e.kel.sy.r.kdk@gmail.com</a>
<a href=""mailto:b.xi.e.k.e.lsyr.kdk@gmail.com"">b.xi.e.k.e.lsyr.kdk@gmail.com</a>
<a href=""mailto:bxi.e.kel.s.y.rkdk@gmail.com"">bxi.e.kel.s.y.rkdk@gmail.com</a>
<a href=""mailto:b.x.i.e.k.e.ls.y.rkdk@gmail.com"">b.x.i.e.k.e.ls.y.rkdk@gmail.com</a>
<a href=""mailto:b.xi.e.k.el.s.yr.k.dk@gmail.com"">b.xi.e.k.el.s.yr.k.dk@gmail.com</a>
<a href=""mailto:b.xiekel.sy.r.kdk@gmail.com"">b.xiekel.sy.r.kdk@gmail.com</a>
<a href=""mailto:b.x.ieke.ls.yr.kd.k@gmail.com"">b.x.ieke.ls.yr.kd.k@gmail.com</a>
<a href=""mailto:b.x.ieke.l.s.yr.k.d.k@gmail.com"">b.x.ieke.l.s.yr.k.d.k@gmail.com</a>
<a href=""mailto:b.x.i.e.ke.l.s.yrk.d.k@gmail.com"">b.x.i.e.ke.l.s.yrk.d.k@gmail.com</a>
<a href=""mailto:b.x.i.eke.lsy.r.k.dk@gmail.com"">b.x.i.eke.lsy.r.k.dk@gmail.com</a>
<a href=""mailto:bx.i.ek.els.y.rkdk@gmail.com"">bx.i.ek.els.y.rkdk@gmail.com</a>
<a href=""mailto:b.x.i.ekel.s.yr.k.dk@gmail.com"">b.x.i.ekel.s.yr.k.dk@gmail.com</a>
<a href=""mailto:b.xi.eke.l.s.y.r.k.d.k@gmail.com"">b.xi.eke.l.s.y.r.k.d.k@gmail.com</a>
<a href=""mailto:b.x.i.e.kel.s.y.rkd.k@gmail.com"">b.x.i.e.kel.s.y.rkd.k@gmail.com</a>
<a href=""mailto:bx.ieke.ls.yrkdk@gmail.com"">bx.ieke.ls.yrkdk@gmail.com</a>
<a href=""mailto:b.x.iekel.syr.kdk@gmail.com"">b.x.iekel.syr.kdk@gmail.com</a>
<a href=""mailto:b.xiek.e.lsy.r.k.d.k@gmail.com"">b.xiek.e.lsy.r.k.d.k@gmail.com</a>
<a href=""mailto:b.xieke.ls.y.r.k.d.k@gmail.com"">b.xieke.ls.y.r.k.d.k@gmail.com</a>
<a href=""mailto:bxiek.elsyrkd.k@gmail.com"">bxiek.elsyrkd.k@gmail.com</a>
<a href=""mailto:bxi.e.k.e.l.s.y.r.k.d.k@gmail.com"">bxi.e.k.e.l.s.y.r.k.d.k@gmail.com</a>
<a href=""mailto:b.x.i.ekels.y.r.kd.k@gmail.com"">b.x.i.ekels.y.r.kd.k@gmail.com</a>
<a href=""mailto:b.xieke.lsyr.k.dk@gmail.com"">b.xieke.lsyr.k.dk@gmail.com</a>
<a href=""mailto:bxi.e.k.el.syrkdk@gmail.com"">bxi.e.k.el.syrkdk@gmail.com</a>
<a href=""mailto:bx.ieke.ls.y.r.kdk@gmail.com"">bx.ieke.ls.y.r.kdk@gmail.com</a>
<a href=""mailto:bx.i.e.kels.yrkdk@gmail.com"">bx.i.e.kels.yrkdk@gmail.com</a>
<a href=""mailto:b.x.i.e.kel.syr.kd.k@gmail.com"">b.x.i.e.kel.syr.kd.k@gmail.com</a>
<a href=""mailto:b.x.iek.e.l.sy.r.kd.k@gmail.com"">b.x.iek.e.l.sy.r.kd.k@gmail.com</a>
<a href=""mailto:bx.ie.kelsy.rkdk@gmail.com"">bx.ie.kelsy.rkdk@gmail.com</a>
<a href=""mailto:bxi.e.kels.y.rkdk@gmail.com"">bxi.e.kels.y.rkdk@gmail.com</a>
<a href=""mailto:bx.i.ekel.s.yr.kdk@gmail.com"">bx.i.ekel.s.yr.kdk@gmail.com</a>
<a href=""mailto:b.x.iekels.y.r.k.d.k@gmail.com"">b.x.iekels.y.r.k.d.k@gmail.com</a>
<a href=""mailto:bxie.kelsy.r.kdk@gmail.com"">bxie.kelsy.r.kdk@gmail.com</a>
<a href=""mailto:b.x.ie.kel.s.yrk.dk@gmail.com"">b.x.ie.kel.s.yrk.dk@gmail.com</a>
<a href=""mailto:bxi.ekels.y.r.k.dk@gmail.com"">bxi.ekels.y.r.k.dk@gmail.com</a>
<a href=""mailto:b.xi.e.k.el.syr.kd.k@gmail.com"">b.xi.e.k.el.syr.kd.k@gmail.com</a>
<a href=""mailto:bx.i.e.kelsyr.k.dk@gmail.com"">bx.i.e.kelsyr.k.dk@gmail.com</a>
<a href=""mailto:b.x.i.e.k.els.yrkdk@gmail.com"">b.x.i.e.k.els.yrkdk@gmail.com</a>
<a href=""mailto:bx.i.e.ke.lsyrk.dk@gmail.com"">bx.i.e.ke.lsyrk.dk@gmail.com</a>
<a href=""mailto:bxieke.ls.yr.kd.k@gmail.com"">bxieke.ls.yr.kd.k@gmail.com</a>
<a href=""mailto:b.x.i.e.k.e.lsyrkdk@gmail.com"">b.x.i.e.k.e.lsyrkdk@gmail.com</a>
<a href=""mailto:bx.i.ek.e.lsyrkd.k@gmail.com"">bx.i.ek.e.lsyrkd.k@gmail.com</a>
<a href=""mailto:b.x.ie.kel.s.yr.kd.k@gmail.com"">b.x.ie.kel.s.yr.kd.k@gmail.com</a>
<a href=""mailto:b.xi.e.k.elsyrk.dk@gmail.com"">b.xi.e.k.elsyrk.dk@gmail.com</a>
<a href=""mailto:b.xie.k.el.s.y.r.k.d.k@gmail.com"">b.xie.k.el.s.y.r.k.d.k@gmail.com</a>
<a href=""mailto:bxi.e.ke.l.sy.r.kdk@gmail.com"">bxi.e.ke.l.sy.r.kdk@gmail.com</a>
<a href=""mailto:bx.i.ek.el.syrkdk@gmail.com"">bx.i.ek.el.syrkdk@gmail.com</a>
<a href=""mailto:bxi.ek.e.lsy.r.k.d.k@gmail.com"">bxi.ek.e.lsy.r.k.d.k@gmail.com</a>
<a href=""mailto:bx.i.e.kels.y.r.kd.k@gmail.com"">bx.i.e.kels.y.r.kd.k@gmail.com</a>
<a href=""mailto:b.xiek.elsy.r.k.dk@gmail.com"">b.xiek.elsy.r.k.dk@gmail.com</a>
<a href=""mailto:bxi.e.ke.l.s.yr.kd.k@gmail.com"">bxi.e.ke.l.s.yr.kd.k@gmail.com</a>
<a href=""mailto:bx.i.e.k.e.l.s.y.r.kd.k@gmail.com"">bx.i.e.k.e.l.s.y.r.kd.k@gmail.com</a>
<a href=""mailto:b.x.i.ekelsyrk.dk@gmail.com"">b.x.i.ekelsyrk.dk@gmail.com</a>
<a href=""mailto:bxiek.elsy.rk.dk@gmail.com"">bxiek.elsy.rk.dk@gmail.com</a>
<a href=""mailto:b.x.iek.e.l.s.yr.kd.k@gmail.com"">b.x.iek.e.l.s.yr.kd.k@gmail.com</a>
<a href=""mailto:bxi.e.k.e.l.s.yr.kdk@gmail.com"">bxi.e.k.e.l.s.yr.kdk@gmail.com</a>
<a href=""mailto:bxi.e.k.e.l.s.y.rkdk@gmail.com"">bxi.e.k.e.l.s.y.rkdk@gmail.com</a>
<a href=""mailto:bx.iek.e.ls.y.r.k.d.k@gmail.com"">bx.iek.e.ls.y.r.k.d.k@gmail.com</a>
<a href=""mailto:bx.iek.els.y.r.k.dk@gmail.com"">bx.iek.els.y.r.k.dk@gmail.com</a>
<a href=""mailto:b.x.ie.kelsyr.kdk@gmail.com"">b.x.ie.kelsyr.kdk@gmail.com</a>
<a href=""mailto:bx.iek.e.l.sy.rk.dk@gmail.com"">bx.iek.e.l.sy.rk.dk@gmail.com</a>
<a href=""mailto:bx.iek.elsyrkdk@gmail.com"">bx.iek.elsyrkdk@gmail.com</a>
<a href=""mailto:bx.iek.e.l.s.yr.kdk@gmail.com"">bx.iek.e.l.s.yr.kdk@gmail.com</a>
<a href=""mailto:b.x.i.ek.e.l.syr.k.d.k@gmail.com"">b.x.i.ek.e.l.syr.k.d.k@gmail.com</a>
<a href=""mailto:b.xi.ekelsy.rkd.k@gmail.com"">b.xi.ekelsy.rkd.k@gmail.com</a>
<a href=""mailto:b.x.i.e.kel.syr.k.d.k@gmail.com"">b.x.i.e.kel.syr.k.d.k@gmail.com</a>
<a href=""mailto:b.x.iek.elsy.rk.dk@gmail.com"">b.x.iek.elsy.rk.dk@gmail.com</a>
<a href=""mailto:b.xie.k.els.yr.k.dk@gmail.com"">b.xie.k.els.yr.k.dk@gmail.com</a>
<a href=""mailto:b.x.i.e.k.e.ls.y.r.kd.k@gmail.com"">b.x.i.e.k.e.ls.y.r.kd.k@gmail.com</a>
<a href=""mailto:b.x.ie.k.el.s.y.r.k.d.k@gmail.com"">b.x.ie.k.el.s.y.r.k.d.k@gmail.com</a>
<a href=""mailto:bx.i.e.ke.l.syrkd.k@gmail.com"">bx.i.e.ke.l.syrkd.k@gmail.com</a>
<a href=""mailto:b.xiekelsyrk.dk@gmail.com"">b.xiekelsyrk.dk@gmail.com</a>
<a href=""mailto:b.x.iek.e.lsy.r.k.d.k@gmail.com"">b.x.iek.e.lsy.r.k.d.k@gmail.com</a>
<a href=""mailto:b.x.ie.ke.l.syrk.dk@gmail.com"">b.x.ie.ke.l.syrk.dk@gmail.com</a>
<a href=""mailto:b.x.iekelsy.r.kd.k@gmail.com"">b.x.iekelsy.r.kd.k@gmail.com</a>
<a href=""mailto:bxiek.el.syr.k.dk@gmail.com"">bxiek.el.syr.k.dk@gmail.com</a>
<a href=""mailto:bx.iek.e.ls.yrkd.k@gmail.com"">bx.iek.e.ls.yrkd.k@gmail.com</a>
<a href=""mailto:b.xieke.ls.yr.k.d.k@gmail.com"">b.xieke.ls.yr.k.d.k@gmail.com</a>
<a href=""mailto:b.xie.k.e.lsy.r.kd.k@gmail.com"">b.xie.k.e.lsy.r.kd.k@gmail.com</a>
<a href=""mailto:bxi.e.kel.s.y.r.k.d.k@gmail.com"">bxi.e.kel.s.y.r.k.d.k@gmail.com</a>
<a href=""mailto:b.xiekel.s.yrk.d.k@gmail.com"">b.xiekel.s.yrk.d.k@gmail.com</a>
<a href=""mailto:b.x.i.e.kel.syrkdk@gmail.com"">b.x.i.e.kel.syrkdk@gmail.com</a>
<a href=""mailto:b.x.ie.k.e.lsyrkd.k@gmail.com"">b.x.ie.k.e.lsyrkd.k@gmail.com</a>
<a href=""mailto:bx.i.e.ke.l.syr.kdk@gmail.com"">bx.i.e.ke.l.syr.kdk@gmail.com</a>
<a href=""mailto:b.xi.e.k.elsy.rkd.k@gmail.com"">b.xi.e.k.elsy.rkd.k@gmail.com</a>
<a href=""mailto:b.xi.ekels.y.r.k.d.k@gmail.com"">b.xi.ekels.y.r.k.d.k@gmail.com</a>
<a href=""mailto:bx.i.e.kel.syr.k.d.k@gmail.com"">bx.i.e.kel.syr.k.d.k@gmail.com</a>
<a href=""mailto:bxi.ek.elsyrkdk@gmail.com"">bxi.ek.elsyrkdk@gmail.com</a>
<a href=""mailto:bx.i.e.kel.sy.r.k.d.k@gmail.com"">bx.i.e.kel.sy.r.k.d.k@gmail.com</a>
<a href=""mailto:bx.iek.els.y.rkd.k@gmail.com"">bx.iek.els.y.rkd.k@gmail.com</a>
<a href=""mailto:b.xie.k.e.ls.yr.k.d.k@gmail.com"">b.xie.k.e.ls.yr.k.d.k@gmail.com</a>
<a href=""mailto:bxi.e.k.e.lsy.r.kd.k@gmail.com"">bxi.e.k.e.lsy.r.kd.k@gmail.com</a>
<a href=""mailto:bx.ie.k.el.s.y.rk.d.k@gmail.com"">bx.ie.k.el.s.y.rk.d.k@gmail.com</a>
<a href=""mailto:bx.i.ekel.sy.r.kd.k@gmail.com"">bx.i.ekel.sy.r.kd.k@gmail.com</a>
<a href=""mailto:b.xiek.e.l.syrk.d.k@gmail.com"">b.xiek.e.l.syrk.d.k@gmail.com</a>
<a href=""mailto:bxi.ekel.s.yrk.d.k@gmail.com"">bxi.ekel.s.yrk.d.k@gmail.com</a>
<a href=""mailto:b.xi.e.k.e.l.s.yrkd.k@gmail.com"">b.xi.e.k.e.l.s.yrkd.k@gmail.com</a>
<a href=""mailto:b.xi.ek.e.lsyrkdk@gmail.com"">b.xi.ek.e.lsyrkdk@gmail.com</a>
<a href=""mailto:b.x.iek.e.ls.yrkd.k@gmail.com"">b.x.iek.e.ls.yrkd.k@gmail.com</a>
<a href=""mailto:b.x.i.e.k.e.l.s.yr.k.d.k@gmail.com"">b.x.i.e.k.e.l.s.yr.k.d.k@gmail.com</a>
<a href=""mailto:bxi.ek.el.syrk.dk@gmail.com"">bxi.ek.el.syrk.dk@gmail.com</a>
<a href=""mailto:bxie.kel.s.yrkdk@gmail.com"">bxie.kel.s.yrkdk@gmail.com</a>
<a href=""mailto:bx.ie.ke.lsyrkdk@gmail.com"">bx.ie.ke.lsyrkdk@gmail.com</a>
<a href=""mailto:b.x.iek.e.ls.y.rkdk@gmail.com"">b.x.iek.e.ls.y.rkdk@gmail.com</a>
<a href=""mailto:b.xi.e.ke.l.syrkdk@gmail.com"">b.xi.e.ke.l.syrkdk@gmail.com</a>
<a href=""mailto:bx.ieke.l.sy.r.kd.k@gmail.com"">bx.ieke.l.sy.r.kd.k@gmail.com</a>
<a href=""mailto:bxi.ek.el.s.yr.kdk@gmail.com"">bxi.ek.el.s.yr.kdk@gmail.com</a>
<a href=""mailto:bxie.ke.lsy.r.kd.k@gmail.com"">bxie.ke.lsy.r.kd.k@gmail.com</a>
<a href=""mailto:b.xi.eke.lsy.r.kdk@gmail.com"">b.xi.eke.lsy.r.kdk@gmail.com</a>
<a href=""mailto:bxieke.l.s.y.rkd.k@gmail.com"">bxieke.l.s.y.rkd.k@gmail.com</a>
<a href=""mailto:b.xi.e.ke.ls.yr.kd.k@gmail.com"">b.xi.e.ke.ls.yr.kd.k@gmail.com</a>
<a href=""mailto:b.x.i.e.ke.l.syr.kd.k@gmail.com"">b.x.i.e.ke.l.syr.kd.k@gmail.com</a>
<a href=""mailto:bx.ie.kelsy.r.k.d.k@gmail.com"">bx.ie.kelsy.r.k.d.k@gmail.com</a>
<a href=""mailto:bxiek.e.l.sy.r.k.dk@gmail.com"">bxiek.e.l.sy.r.k.dk@gmail.com</a>
<a href=""mailto:bxie.ke.ls.y.rkdk@gmail.com"">bxie.ke.ls.y.rkdk@gmail.com</a>
<a href=""mailto:bxi.e.k.elsy.r.kdk@gmail.com"">bxi.e.k.elsy.r.kdk@gmail.com</a>
<a href=""mailto:b.x.ie.k.e.ls.yrk.d.k@gmail.com"">b.x.ie.k.e.ls.yrk.d.k@gmail.com</a>
<a href=""mailto:b.xiek.e.l.s.y.r.kdk@gmail.com"">b.xiek.e.l.s.y.r.kdk@gmail.com</a>"
zAGRVZY7,Untitled,ValkyrieJanet,Linden Scripting,Wednesday 10th of January 2024 01:05:29 PM CDT,"from math import atan2, degrees, ceil
from mathutils import Vector, Quaternion  # use in Blender if you like
 
"""""" from v_vector import Vector  # remove if you use mathutils
from v_quaternion import Quaternion  # remove if you use mathutils """"""
 
 
class Vehicle:
    """"""
    Vehicle class represents a vehicle solely in terms of its
    forward direction and upward direction, both normalized.
    Normal creation is by providing the vectors
    back - world position of rear
    up - world position of top of tail of vehicle
    front = world position of front of vehicle
 
    given an export from blender:
     u
    |\
    | \
    |  \
    b---f
 
    Theory of Operation:
 
    The private methods `_new_vehicle_without_yaw` and `_new_vehicle_without_pitch`
    return, well, a new vehicle, derived from the receiver, with yaw or pitch removed.
    Both these methods create a Quaternion with the appropriate rotation and apply it
    to the receiver's forward and upward to get the values for a new vehicle with
    yaw or pitch removed.
 
    The private method `_new_vehicle_with_roll_only` returns a vehicle
    with both yaw and pitch removed.
 
    The public method `roll_degrees` returns the desired roll angle, counterclockwise from vertical.
    `roll_degrees` uses the private method `roll_angle` which returns the arc-tangent
    of the receiver's upward.z and upward.y.
 
    `roll_degrees` returns 90 degrees minus the roll_angle of the vehicle with roll only,
    because that's the counterclockwise angle from vertical.
    (That is, it's adjusted to be what I think we want. We can adjust differently if need be.)
 
    Internally the sequence of operation is:
    1. Create the vehicle from input
    2. Ask it for roll_degrees, which will
    3. Transform the original to one without yaw
    4. Transform the yaw-less one to one also without pitch
    5. Ask that one for roll_angle
    6. Convert and return the desired angle in degrees
 
    This may seem odd. The idea is to have the Vehicle object be immutable:
    Once created, a Vehicle never changes. Instead, we get a new one that
    has been adjusted for no yaw or no pitch. This is thought by the people
    who think things to be a good way to design objects, so that they never change.
 
    Note:
        Because the vehicle is just represented by its forward and upward
        direction vectors, we can create a new one with desired forward and upward
        by Vehicle(zero_vector, upward, forward). The __init__ just works out to
        retain the provided upward and forward. Nifty, once you get over it.
 
    Note:
        For reasons that I cannot quite explain, the yaw removal uses the
        negative of the arc-tangent, and the pitch uses the positive.
        This is what it took to make it work. I cannot quite visualize why.
        (Later: I think it has to do with whether Y goes into the screen or out.)
 
    Note:
        I'm going to put the back, up, front members back into the class.
        I want them for better testing. JR: 2023-10-21
 
    Note:
        I'm going to extract methods to get the two desired quaternions, for two reasons:
        First, because I want to use them in my program that draws the pictures.
        Second, because the methods that create them have kind of a two-phase aspect,
        creating the quaternion and then applying it. Creating with a separate method
        will express that duality better. JR: 2023-10-21
    """"""
 
    def __init__(self, back, up, front):
        self.back = back
        self.up = up
        self.front = front
        self.forward = (front - back).normalized()
        self.upward = (up - back).normalized()
 
    def roll_degrees(self):
        angle = self._new_vehicle_with_roll_only()._roll_angle()
        angle_deg = 90 - degrees(angle)
        if angle_deg < 0:
            return 360 + angle_deg
        else:
            return angle_deg
 
    def _new_vehicle_without_yaw(self):
        remove_yaw = self._yaw_quaternion()
        new_forward = remove_yaw @ self.forward
        new_upward = remove_yaw @ self.upward
        return Vehicle(Vector((0, 0, 0)), new_upward, new_forward)
 
    def _yaw_quaternion(self):
        z_axis = Vector((0, 0, 1))
        rise = self.forward.y
        run = self.forward.x
        angle = atan2(rise, run)
        remove_yaw = Quaternion(z_axis, -angle)
        return remove_yaw
 
    def _new_vehicle_without_pitch(self):
        remove_pitch = self._pitch_quaternion()
        new_forward = remove_pitch @ self.forward
        new_upward = remove_pitch @ self.upward
        return Vehicle(Vector((0, 0, 0)), new_upward, new_forward)
 
    def _pitch_quaternion(self):
        """"""
        Only valid when applied to a vehicle whose yaw is already removed.
        I cannot explain this but I can demonstrate it. - JR
        :return:
        """"""
        y_axis = Vector((0, 1, 0))
        rise = self.forward.z
        run = self.forward.x
        angle = atan2(rise, run)
        remove_pitch = Quaternion(y_axis, angle)
        return remove_pitch
 
    def _new_vehicle_with_roll_only(self):
        """"""
        Note that the rotations have to be applied in order, one after the other.
        Computing both quaternions at the beginning will not work.
        """"""
        return self._new_vehicle_without_yaw()._new_vehicle_without_pitch()
 
    def _roll_angle(self):
        return atan2(self.upward.z, self.upward.y)
 
 
import bpy
import os
from bpy.types import Operator
from bpy.types import Panel
 
file_path1 = 'C:/Users/Terry/PycharmProjects/blenderPython/track.blend'
inner_path1 = 'Object'
object_name1 = 'track'
 
file_path2 = 'C:/Users/Terry/PycharmProjects/blenderPython/invtrack.blend'
inner_path2 = 'Object'
object_name2 = 'invtrack'
 
file_path3 = 'C:/Users/Terry/PycharmProjects/blenderPython/trackruler.blend'
inner_path3 = 'Object'
object_name3 = 'trackruler'
 
 
class RCG_OT_addtrack(Operator):
    """""" Add an object called Track from a specific file """"""
    bl_idname = ""rcg.addtrackobject""
    bl_label = ""Add normal track""
    bl_options = {""REGISTER"", ""UNDO""}
 
    @classmethod
    def poll(cls, context):
        return context.mode == ""OBJECT""
 
    def execute(self, context):
        bpy.ops.wm.append(
            filepath=os.path.join(file_path1, inner_path1, object_name1),
            directory=os.path.join(file_path1, inner_path1),
            filename=object_name1
        )
        track = bpy.data.objects[""track""]
        track.select_set(state=True, view_layer=bpy.context.view_layer)
        bpy.context.view_layer.objects.active = track
        return {'FINISHED'}
 
 
class RCG_OT_addinvtrack(Operator):
    """""" Add an object called InvTrack from a specific file """"""
    bl_idname = ""rcg.addinvtrackobject""
    bl_label = ""Add inverted track""
    bl_options = {""REGISTER"", ""UNDO""}
 
    @classmethod
    def poll(cls, context):
        return context.mode == ""OBJECT""
 
    def execute(self, context):
        bpy.ops.wm.append(
            filepath=os.path.join(file_path2, inner_path2, object_name2),
            directory=os.path.join(file_path2, inner_path2),
            filename=object_name2
        )
        invtrack = bpy.data.objects[""invtrack""]
        invtrack.select_set(state=True, view_layer=bpy.context.view_layer)
        bpy.context.view_layer.objects.active = invtrack
 
        return {'FINISHED'}
 
 
class RCG_OT_addruler(Operator):
    """""" Add an object called lineruler from a specific file """"""
    bl_idname = ""rcg.addruler""
    bl_label = ""Add Ruler""
    bl_options = {""REGISTER"", ""UNDO""}
 
    @classmethod
    def poll(cls, context):
        return context.mode == ""OBJECT""
 
    def execute(self, context):
        bpy.ops.wm.append(
            filepath=os.path.join(file_path3, inner_path3, object_name3),
            directory=os.path.join(file_path3, inner_path3),
            filename=object_name3
        )
        ruler = bpy.data.objects[""trackruler""]
        ruler.select_set(state=True, view_layer=bpy.context.view_layer)
        bpy.context.view_layer.objects.active = ruler
 
        return {'FINISHED'}
 
 
class RCG_OT_addarray(Operator):
    """""" Set the render properties """"""
    bl_idname = ""rcg.addarray""
    bl_label = ""Open ARRAY Modifier""
    bl_options = {""REGISTER"", ""UNDO""}
 
    @classmethod
    def poll(cls, context):
        return context.mode == ""OBJECT""
 
    def execute(self, context):
        bpy.ops.object.modifier_add(type='ARRAY')
        bpy.context.object.modifiers[""Array""].count = 20
        bpy.context.object.modifiers[""Array""].use_merge_vertices = True
        bpy.context.object.modifiers[""Array""].constant_offset_displace[0] = 1
        bpy.context.object.modifiers[""Array""].relative_offset_displace[1] = 0
        bpy.context.object.modifiers[""Array""].relative_offset_displace[2] = 0
        bpy.context.object.modifiers[""Array""].fit_type = 'FIXED_COUNT'
        return {'FINISHED'}
 
 
class RCG_OT_addbezcurve(Operator):
    """""" Set the render properties """"""
    bl_idname = ""rcg.addbezcurve""
    bl_label = ""Open BEZIER CURVE Modifier""
    bl_options = {""REGISTER"", ""UNDO""}
 
    @classmethod
    def poll(cls, context):
        return context.mode == ""OBJECT""
 
    def execute(self, context):
        bpy.ops.object.modifier_add(type='CURVE')
        bpy.ops.object.modifier_set_active(modifier=""Curve"")
        bpy.context.object.modifiers[""Curve""].object = bpy.data.objects[""BezierCurve""]
 
        return {'FINISHED'}
 
 
class RCG_OT_addnurbscurve(Operator):
    """""" Set the render properties """"""
    bl_idname = ""rcg.addnurbscurve""
    bl_label = ""Open NURBS CURVE Modifier""
    bl_options = {""REGISTER"", ""UNDO""}
 
    @classmethod
    def poll(cls, context):
        return context.mode == ""OBJECT""
 
    def execute(self, context):
        bpy.ops.object.modifier_add(type='CURVE')
        bpy.ops.object.modifier_set_active(modifier=""Curve"")
        bpy.context.object.modifiers[""Curve""].object = bpy.data.objects[""NurbsPath""]
 
        return {'FINISHED'}
 
 
class RCG_OT_apply(Operator):
    """""" Set the render properties """"""
    bl_idname = ""rcg.apply""
    bl_label = ""Apply All Modifiers""
    bl_options = {""REGISTER"", ""UNDO""}
 
    @classmethod
    def poll(cls, context):
        return context.mode == ""OBJECT""
 
    def execute(self, context):
        bpy.ops.object.modifier_apply(modifier=""Array"")
        bpy.ops.object.modifier_apply(modifier=""Curve"")
 
        return {'FINISHED'}
 
 
class RCG_OT_Exp_Banked_path(Operator):
    """""" Set the render properties """"""
    bl_idname = ""rcg.expbank""
    bl_label = ""Export Banked Path Script""
    bl_options = {""REGISTER"", ""UNDO""}
 
    @classmethod
    def poll(cls, context):
        return context.mode == ""OBJECT""
 
    def execute(self, context):
        # Put code here
        obj = bpy.context.object
 
        if obj is None or obj.type != ""MESH"":
            return
 
        # Output geometry
        obj_eval = obj.evaluated_get(bpy.context.view_layer.depsgraph)
        filepath = ""C:/Users/Terry/PycharmProjects/blenderPython/""
 
        verts = obj_eval.data.vertices
        triples = [verts[i:i + 3] for i in range(0, len(verts) - 1, 2)]
        size = 500
        basename = ""test_data""
        writer = VtFileWriter(verts, filepath, basename, size)
        writer.write_files()
 
        return {'FINISHED'}
 
 
class VtFileWriter:
    def __init__(self, vertices, path, base_name, size):
        self.vertices = vertices
        self.path = path
        self.base_name = base_name
        self.size = size

    def write_files(self):
        coords = [v.co for v in self.vertices]
        triples = [coords[i:i + 3] for i in range(0, len(coords) - 1, 2)]
        all_lines = self.make_lines(triples)
        count = ceil(len(triples)/self.size)
        for file_number in range(count):
            start = file_number*self.size
            end = (file_number+1)*self.size
            lines = all_lines[start:end]
            file_name = self.base_name + str(file_number) + "".lsl""
            full_path = os.path.join(self.path, file_name)
            with open(full_path, ""w"") as file:
                self.write_one_file(lines, start, file)
                print(f""File was written to {full_path}\n"")

    @staticmethod
    def write_one_file(lines, start, file):
        comma = """"
        file.write(""list vectdata = [\n"")
        for line in lines:
            file.write(comma + line)
            comma = "",""
        file.write(""];\n"")
        file.write(""\n"")
        file.write(""default\n"")
        file.write(""{\n"")
        file.write(""  state_entry()\n"")
        file.write(""  {\n"")
        file.write(""    integer length = llGetListLength(vectdata);\n"")
        if start == 0:
            file.write(""    llLinksetDataReset();\n"")
        file.write(f""    integer a = {start};\n"")
        file.write(""    integer b = a + length;\n"")
        file.write(""    for(; a < b; ++a) {\n"")
        file.write('      llLinksetDataWrite(""datakey""+(string)a,  llList2String( vectdata , a) );\n')
        file.write(""    }\n"")
        file.write(""  }\n"")
        file.write(""}\n"")

    @staticmethod
    def make_lines(coordinate_triples):
        lines = []
        back_zero = coordinate_triples[0][0]
        for back, up, front in coordinate_triples:
            back_zeroed = back - back_zero
            roll = Vehicle(back, up, front).roll_degrees()
            output = f""<{back_zeroed.x:.3f}, {back_zeroed.y:.3f}, {back_zeroed.z:.3f}, {roll:.0f}>\n""
            lines.append(output)
        return lines
 
class RCG_PT_sidebar(Panel):
    """"""Sidebar""""""
    bl_label = ""Roller Coaster Generator""
    bl_space_type = ""VIEW_3D""
    bl_region_type = ""UI""
    bl_category = ""RollerCoaster""
 
    def draw(self, context):
        col = self.layout.column(align=True)
        col.label(text=""Add a track curve"")
        col.operator(""curve.primitive_bezier_curve_add"", icon='CURVE_BEZCURVE', text=""Bezier Curve"")
        col.operator(""curve.primitive_nurbs_path_add"", icon='CURVE_PATH', text=""Path Curve"")
        col.label(text=""Add a track object"")
        col.operator(""rcg.addtrackobject"")
        col.operator(""rcg.addinvtrackobject"")
        col.label(text=""Add a track helper"")
        col.operator(""rcg.addruler"")
        col.label(text=""Add a modifier"")
        col.operator(""rcg.addarray"")
        col.operator(""rcg.addbezcurve"")
        col.operator(""rcg.addnurbscurve"")
        col.operator(""rcg.apply"")
        col.label(text=""Export Data"")
        col.operator(""rcg.expbank"")
 
 
classes = [
    RCG_OT_addtrack,
    RCG_OT_addinvtrack,
    RCG_OT_addruler,
    RCG_OT_addarray,
    RCG_OT_addbezcurve,
    RCG_OT_addnurbscurve,
    RCG_OT_apply,
    RCG_OT_Exp_Banked_path,
    RCG_PT_sidebar,
]
 
 
def register():
    for c in classes:
        bpy.utils.register_class(c)
 
 
def unregister():
    for c in classes:
        bpy.utils.unregister_class(c)
 
 
if __name__ == '__main__':
    register()"
xW8wB3Ua,IP Address Validation,aswanthk,Java,Wednesday 10th of January 2024 01:05:05 PM CDT,"// 127.23.54.112 (0-255)
public class IPAddress {
	public static String validateIP(String ip) {
		int temp=0, c=0;
		for(int i=0;i<=ip.length()-1;i++) {
			int n=ip.charAt(i)-48;
			if(!(ip.charAt(i)=='.' || (n>=0 && c<=255))) {
				return ""not valid"";
			}
			if(ip.charAt(0)=='.' || ip.charAt(ip.length()-1)=='.') {
				return ""not valid"";
			}
			if(ip.charAt(i)=='.') {
				if(!(temp>=0 && temp<=255)) {
					return ""not valid"";
				}
				temp=0; c++;
			}
			else {
				temp=temp*10+n;
			}
		}
		if(!(temp>=0 && temp<=255) || c!=3) {
			return ""not valid"";
		}
		return ""valid"";
	}
	public static void main(String[] args) {
		System.out.println(validateIP(""127.43.23.255""));
	}
}"
SGYYgxZ5,8 (строка по номеру),nq1s788,Python,Wednesday 10th of January 2024 01:02:07 PM CDT,"x = 'МСТФ'
cnt = 0 #текущий номер
for a in x:
    for b in x:
        for c in x:
            for d in x:
                cnt += 1
                if cnt == 138:
                    print(a + b + c + d)"
efnCDdv6,Largest Sub Sequence,aswanthk,Java,Wednesday 10th of January 2024 12:58:43 PM CDT,"import java.util.Scanner;

public class SubSequence {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.print(""Enter the no. of elements: "");
		int n = sc.nextInt();
		int[] nums = new int[n];
		System.out.println(""Enter number sequence"");
		for (int i = 0; i < n; i++) {
			nums[i] = sc.nextInt();
		}

		int[] res = subSequence(nums);
		if (res != null) {
			int start = res[0];
			int end = res[1];
			for (int i = start; i <= end; i++) {
				System.out.print(nums[i] + "" "");
			}
		}
		sc.close();
	}

	// 1 1 2 2 3 4 4 5 6 7
	public static int[] subSequence(int[] nums) {
		if (nums.length == 0) {
			return null;
		}
		int[] sub = new int[2];
		int count = 1, max = 1;
		for (int i = 0; i <= nums.length - 2; i++) {
			if ((nums[i] + 1) == nums[i + 1]) {

				count++;
				if (count > max) {
					if (count - max == 1) {
						sub[0] = i - max + 1;
					}
					max = count;
					sub[1] = i + 1;
				}
			} else {
				count = 1;
			}
		}
		return sub;
	}
}
"
uxMZ2xZx,utils.lua,LelouBil,Lua,Wednesday 10th of January 2024 12:52:16 PM CDT,"local utils = {}
function utils.write_centered(display,text)
    local lines_max, columns_max = display.getSize()
    local posx,posy = display.getCursorPos()
    local midscreen = columns_max / 2
    local midtext = string.len(text) / 2
    local offset = midscreen - midtext
    display.setCursorPos(offset + 1,posy)
    display.write(text)
end

local function utils.round(num,dp)
    local mult = 10^(dp or 0)
    return math.floor(num * mult + 0.5)/mult
end

local function utils.format_big_number(num)
   if num < 1000 then
       return tostring(num)
   elseif num < 1000000 then
       return tostring(round(num / 1000,2)) .. ""k""
   else
       return tostring(round(num / 1000000,2)) .. ""M""
   end
end

return utils"
nat7svV3,D,Ankit_132,C++,Wednesday 10th of January 2024 12:32:17 PM CDT,"
#include <bits/stdc++.h>

using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)

int main()
{
    _test
    {
        int n, x, z;
        cin>>n>>x>>z;

        vector<int> a(n);
        for(auto &e: a)
            cin>>e;

        if(z%x == 0)
        {
            cout<<z/x<<""\n"";
            continue;
        }

        int rem = x - z%x;

        vector<ll int> mmin1(x+1, 1e18);
        vector<ll int> mmin2(x+1, 1e18);
        mmin1[0] = 0;
        
        for(auto e: a)
        {
            for(int i=0; i<x; i++)
                mmin2[(i+e)%x] = min(mmin2[(i+e)%x], mmin1[i]+e);

            for(int i=0; i<x; i++)
                mmin1[i] = min(mmin1[i], mmin2[i]);

            fill(mmin2.begin(), mmin2.end(), 1e18);
        }

        if(mmin1[rem] == 1e18)
            cout<<""-1\n"";
        else
            cout<<(z+mmin1[rem])/x<<""\n"";
    }
}
"
625v927E,C,Ankit_132,C++,Wednesday 10th of January 2024 12:31:53 PM CDT,"
#include <bits/stdc++.h>

using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)

int main()
{
    _test
    {
        ll int n;
        cin>>n;
        
        ll int x = sqrtl(n);
        ll int rem = n - x*x;
        
        if(rem%2==1 && x%2==1)
            x--;
            
        cout<<(x+1)/2<<""\n"";
    }
}"
hLipe5mp,B,Ankit_132,C++,Wednesday 10th of January 2024 12:31:33 PM CDT,"
#include <bits/stdc++.h>

using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)

int main()
{
    _test
    {
        int n, m;
        cin>>n>>m;

        vector<int> a(n), b(m);

        for(auto &e: a)
            cin>>e;
        for(auto &e: b)
            cin>>e;

        int _max = 0;

        for(auto e: b)
            _max = max(_max, e);

        sort(a.end()-_max, a.end());

        for(auto e: a)
            cout<<e<<"" "";
        cout<<""\n"";
    }
}
"
9VXxBWTj,A,Ankit_132,C++,Wednesday 10th of January 2024 12:31:04 PM CDT,"
#include <bits/stdc++.h>

using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)

int main()
{
    _test
    {
        int n, x;
        string s;
        cin>>n>>x>>s;

        int rem = 0;
        int possible = 1;

        for(int i=0; i<n; i++)
        {
            if(s[i] == '0')
            {
                if(rem == 0)
                {
                    possible = 0;
                    break;
                }

                rem--;
            }
            else
                rem = x;
        }

        if(possible)        cout<<""YES\n"";
        else                cout<<""NO\n"";
    }
}
"
cqETvCD5,rematchtest.py,FranzVuttke,Python,Wednesday 10th of January 2024 12:17:09 PM CDT,"
import re

patt = r'[A-Z]{1,}[a-z]*[0-9]'
def check_patt(apatt, astring):
    print(""pattern: "",apatt)
    print(""string: "", astring)
    print(""is matching? "",True if re.match(apatt, astring) else False)
    
    ...
    
check_patt(patt, ""ROMANIITEDIMUMl10"")
"
V4JEVqXn,MAL_RANSOM_Mortis_Locker,JohnGalt14,YARA,Wednesday 10th of January 2024 12:11:44 PM CDT,"rule MAL_RANSOM_Mortis_Locker {
    meta:
        description = ""Detect Mortis Locker ransomware""
        author = ""@M4lcode""
        date = ""2024-1-10""
        hash1 = ""a5012e20342f4751360fd0d15ab013385cecd2a5f3e7a3e8503b1852d8499819""
        hash2 = ""b6a4331334a16af65c5e4193f45b17c874e3eff8dd8667fd7cb8c7a570e2a8b9""
        hash3 = ""c6df9cb7c26e0199106bdcd765d5b93436f373900b26f23dfc03b8b645c6913f""
        hash4 = ""dac667cfc7824fd45f511bba83ffbdb28fa69cdeff0909979de84064ca2e0283""
    strings:
        $s1 = ""\\MortisLocker.pdb"" ascii
        $s2 = {55 8B EC 6A FF 68 ?? ?? 42 00 64 A1 00 00 00 00 50 8? EC ??}
        $s3 = "".Mortis"" ascii
    condition:
        uint16(0) == 0x5A4D and 2 of them
        or all of them // in-memory detection
}"
sLaME1zn,5. Print Even Numbers,Spocoman,C++,Wednesday 10th of January 2024 12:06:47 PM CDT,"#include <iostream>
#include <sstream>
#include <string>
#include <queue>

using namespace std;

int main() {
    string line;
    getline(cin, line);

    istringstream ss(line);

    queue<int> numbers;

    int number;

    while (ss >> number) {
        if (number % 2 == 0) {
            numbers.push(number);
        }
    }

    while (!numbers.empty()) {
        if (numbers.size() == 1) { 
            cout << numbers.front() << endl;
        }
        else {
            cout << numbers.front() << "", "";
        }
        numbers.pop();    
    }
    
    return 0;
}"
VsZvaZCa,AA Project,Zuhairy_Harry,C++,Wednesday 10th of January 2024 11:54:45 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm>
#include <iomanip>

using namespace std;

struct Student {
    int id, age, roomFloor;
    string name, state, department, fees;

};

// Function prototypes
void customSwap(Student& a, Student& b, int& swapCount);
int partition(vector<Student>& students, int low, int high, int& swapCount);
void quickSort(vector<Student>& students, int low, int high, int& swapCount);
void loadStudents(const string& filename, vector<Student>& students);
int binarySearch(const vector<Student>& students, int l, int r, int x);
int linearSearch(const vector<Student>& students, int x);
void displayStudents(const vector<Student>& students, int displayLimit);
void merge(vector<Student>& students, int low, int mid, int high, int& swapCount);
void mergeSort(vector<Student>& students, int low, int high, int& swapCount);
double calculateAverageAge(const vector<Student>& students);
int calculateTotalDept(const vector<Student>& students);

string trim(const string& str);

// Function implementations
string trim(const string& str) {
    size_t first = str.find_first_not_of("" \t\"""");
    if (first == string::npos) return """";
    size_t last = str.find_last_not_of("" \t\"""");
    return str.substr(first, (last - first + 1));
}


int partition(vector<Student>& students, int low, int high, int& swapCount) {
    int pivot = students[high].id;
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (students[j].id < pivot) {
            i++;
            customSwap(students[i], students[j], swapCount);
        }
    }
    customSwap(students[i + 1], students[high], swapCount);
    return i + 1;
}




/*
-----------------------------------------------------------------------------------
    QUICK SORT FUNCTION
-----------------------------------------------------------------------------------
*/
void quickSort(vector<Student>& students, int low, int high, int& swapCount) {
    if (low < high) {
        int pi = partition(students, low, high, swapCount);
        quickSort(students, low, pi - 1, swapCount);
        quickSort(students, pi + 1, high, swapCount);
    }
}




/*
-----------------------------------------------------------------------------------
    LOAD FILE FUNCTION
-----------------------------------------------------------------------------------
*/
void loadStudents(const string& filename, vector<Student>& students) {
    ifstream ip(filename);
    if (!ip.is_open()) {
        cerr << ""Error: File could not be opened"" << '\n';
        return;
    }

    string line;
    getline(ip, line); // Skip the header if present

    while (getline(ip, line)) {
        stringstream ss(line);
        Student tempStudent;
        string tempId, tempAge, tempRoomFloor;

        getline(ss, tempId, ',');
        getline(ss, tempStudent.name, ',');
        getline(ss, tempAge, ',');
        getline(ss, tempStudent.state, ',');
        getline(ss, tempStudent.department, ',');
        getline(ss, tempRoomFloor, ',');
        getline(ss, tempStudent.fees, '\n');

        tempStudent.id = stoi(trim(tempId));
        tempStudent.age = stoi(trim(tempAge));
        tempStudent.roomFloor = stoi(trim(tempRoomFloor));
        tempStudent.name = trim(tempStudent.name);
        tempStudent.state = trim(tempStudent.state);
        tempStudent.department = trim(tempStudent.department);
        tempStudent.fees = trim(tempStudent.fees);

        students.push_back(tempStudent); // Add the new student to the vector
    }

    ip.close();
}




/*
-----------------------------------------------------------------------------------
    MERGE FUNCTION
-----------------------------------------------------------------------------------
*/
void merge(vector<Student>& students, int low, int mid, int high, int& swapCount) {
    int n1 = mid - low + 1;
    int n2 = high - mid;

    vector<Student> left(n1), right(n2);

    for (int i = 0; i < n1; i++)
        left[i] = students[low + i];
    for (int j = 0; j < n2; j++)
        right[j] = students[mid + 1 + j];

    int i = 0, j = 0, k = low;

    while (i < n1 && j < n2) {
        if (left[i].id <= right[j].id) {
            students[k++] = left[i++];
        }
        else {
            students[k++] = right[j++];
            swapCount += n1 - i; // Counting swaps when elements are moved from left to right
        }
    }

    while (i < n1) {
        students[k++] = left[i++];
    }
    while (j < n2) {
        students[k++] = right[j++];
    }

}




/*
-----------------------------------------------------------------------------------
    MERGE SORT FUNCTION
-----------------------------------------------------------------------------------
*/
void mergeSort(vector<Student>& students, int low, int high, int& swapCount) {
    if (low < high) {
        int mid = low + (high - low) / 2;

        mergeSort(students, low, mid, swapCount);
        mergeSort(students, mid + 1, high, swapCount);

        merge(students, low, mid, high, swapCount);
    }

    //cout << ""Total Swaps = "" << swapCount << endl;
}




/*
-----------------------------------------------------------------------------------
    CALCULATE TOTAL STUDENT FROM DEPT FUNCTION
-----------------------------------------------------------------------------------
*/
int calculateTotalDept(const vector<Student>& students) {
    if (students.empty()) {
        return 0.0; // Return 0 if there are no students
    }

    int ftmkDept = 0;
    int ftkekDept = 0;
    int fpttDept = 0;
    for (const auto& student : students) {
        if (student.department == ""FTMK"") {
            ftmkDept++;
        }
        else if (student.department == ""FTKEK"") {
            ftkekDept++;
        }
        else if (student.department == ""FPTT"") {
            fpttDept++;
        }
    }

    cout << ""\nTotal student for FTMK department = "" << ftmkDept << endl;
    cout << ""Total student for FTKEK department = "" << ftkekDept << endl;
    cout << ""Total student for FPTT department = "" << fpttDept << ""\n"" << endl;

    return ftmkDept, ftkekDept, fpttDept;
}




/*
-----------------------------------------------------------------------------------
    CALCULATE AVERAGE AGE FUNCTION
-----------------------------------------------------------------------------------
*/
double calculateAverageAge(const vector<Student>& students) {
    if (students.empty()) {
        return 0.0; // Return 0 if there are no students
    }

    int totalAge = 0;
    for (const auto& student : students) {
        totalAge += student.age;
    }

    return static_cast<double>(totalAge) / students.size();
}




/*
-----------------------------------------------------------------------------------
    BINARY SEARCH FUNCTION
-----------------------------------------------------------------------------------
*/
int binarySearch(const Student students[], int l, int r, int x) {
    if (r >= l) {
        int mid = l + (r - l) / 2;

        if (students[mid].id == x)
            return mid;

        if (students[mid].id > x)
            return binarySearch(students, l, mid - 1, x);

        return binarySearch(students, mid + 1, r, x);
    }

    return -1;
}




/*
-----------------------------------------------------------------------------------
    LINEAR SEARCH FUNCTION
-----------------------------------------------------------------------------------
*/
int linearSearch(const Student students[], int n, int x) {
    for (int i = 0; i < n; i++) {
        if (students[i].id == x) {
            return i;
        }
    }
    return -1;
}




/*
-----------------------------------------------------------------------------------
    SWAP FUNCTION
-----------------------------------------------------------------------------------
*/
void customSwap(Student& a, Student& b, int& swapCount) {
    swap(a, b);  // Swaps the entire Student objects
    swapCount++;
}




/*
-----------------------------------------------------------------------------------
    MERGE SWAP FUNCTION
-----------------------------------------------------------------------------------
*/
int binarySearch(const vector<Student>& students, int l, int r, int x) {
    while (l <= r) {
        int mid = l + (r - l) / 2;
        if (students[mid].id == x) {
            return mid;
        }
        else if (students[mid].id < x) {
            l = mid + 1;
        }
        else {
            r = mid - 1;
        }
    }
    return -1;
}




/*
-----------------------------------------------------------------------------------
    LINEAR SEARCH FUNCTION
-----------------------------------------------------------------------------------
*/
int linearSearch(const vector<Student>& students, int x) {
    for (int i = 0; i < students.size(); ++i) {
        if (students[i].id == x) {
            return i;
        }
    }
    return -1;
}




/*
-----------------------------------------------------------------------------------
    DISPLAY DATA FUNCTION
-----------------------------------------------------------------------------------
*/
void displayStudents(const vector<Student>& students, int displayLimit) {

    const int fieldWidth = 20;
    cout << ""---------------------------------------------------------------------------------------------------------"" << endl;
    cout << ""ID\t|Name\t\t\t|Age\t|State\t\t|Department\t|Room Floor\t|Fees\t\t|"" << endl;
    /*cout << ""ID"" << string(fieldWidth - 2, ' ') << ""|Name"" << string(fieldWidth - 4, ' ')
        << ""|Age"" << string(fieldWidth - 2, ' ') << ""|State"" << string(fieldWidth - 6, ' ')
        << ""|Department"" << string(fieldWidth - 10, ' ') << ""|Room Floor"" << string(fieldWidth - 10, ' ')
        << ""|Fees"" << string(fieldWidth - 1, ' ') << ""|"" << endl;*/
    cout << ""---------------------------------------------------------------------------------------------------------"" << endl;
    int count = 0;
    for (const auto& student : students) {

        if (count >= displayLimit) break;

        if (student.name.length() >= 15) {
            if (student.state.length() > 5) {
                if (student.fees.length() > 5) {
                    cout << student.id << ""\t|"" << student.name << ""\t|"" << student.age << ""\t|"" << student.state << ""\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t|"" << endl;
                }
                else {
                    cout << student.id << ""\t|"" << student.name << ""\t|"" << student.age << ""\t|"" << student.state << ""\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t\t|"" << endl;
                }

            }
            else {

                if (student.fees.length() > 5) {
                    cout << student.id << ""\t|"" << student.name << ""\t|"" << student.age << ""\t|"" << student.state << ""\t\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t|"" << endl;
                }
                else {
                    cout << student.id << ""\t|"" << student.name << ""\t|"" << student.age << ""\t|"" << student.state << ""\t\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t\t|"" << endl;
                }
            }
        }
        else {
            if (student.state.length() > 5) {

                if (student.fees.length() > 5) {
                    cout << student.id << ""\t|"" << student.name << ""\t\t|"" << student.age << ""\t|"" << student.state << ""\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t|"" << endl;
                }
                else {
                    cout << student.id << ""\t|"" << student.name << ""\t\t|"" << student.age << ""\t|"" << student.state << ""\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t\t|"" << endl;
                }
            }
            else {
                if (student.fees.length() > 5) {
                    cout << student.id << ""\t|"" << student.name << ""\t\t|"" << student.age << ""\t|"" << student.state << ""\t\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t|"" << endl;
                }
                else {
                    cout << student.id << ""\t|"" << student.name << ""\t\t|"" << student.age << ""\t|"" << student.state << ""\t\t|"" << student.department << ""\t\t|"";
                    cout << student.roomFloor << ""\t\t|"" << student.fees << ""\t\t|"" << endl;
                }
            }
        }


        /* cout << student.id << string(fieldWidth - to_string(student.id).length(), ' ')
             << ""|"" << student.name << string(fieldWidth - student.name.length(), ' ')
             << ""|"" << student.age << string(fieldWidth - to_string(student.age).length(), ' ')
             << ""|"" << student.state << string(fieldWidth - student.state.length(), ' ')
             << ""|"" << student.department << string(fieldWidth - student.department.length(), ' ')
             << ""|"" << student.roomFloor << string(fieldWidth - to_string(student.roomFloor).length(), ' ')
             << ""|"" << student.fees << string(fieldWidth - student.fees.length(), ' ') << ""|"" << endl;*/

        count++;
    }
    cout << ""---------------------------------------------------------------------------------------------------------"" << endl;
}




/*
-----------------------------------------------------------------------------------
    MAIN FUNCTION
-----------------------------------------------------------------------------------
*/

int main() {
    vector<Student> students;
    loadStudents(""output2.csv"", students);
    int swapCount = 0;
    int numStudents = 0;

    int choice;
    do {
        cout << ""----------------------------------------------------------------------------------"" << endl;
        cout << ""SATRIA MANAGEMENT SYSTEM"" << endl;
        cout << ""1) Unsort Data"" << endl;
        cout << ""2) Sorting"" << endl;
        cout << ""3) Search"" << endl;
        cout << ""4) Additional Features"" << endl;
        cout << ""5) Exit"" << endl;
        cout << ""----------------------------------------------------------------------------------"" << endl;
        cout << ""\nEnter choice: "";
        cin >> choice;

        switch (choice) {
        case 1: {
            cout << ""Unsorted Data"" << endl;
            displayStudents(students, min(100, static_cast<int>(students.size())));
            main();
            break;
        }
        case 2: {
            int sortChoice = 0;
            string sortChoiceWord = """";
            do {
                cout << ""----------------------------------------------------------------------------------"" << endl;
                cout << ""Sorting Menu"" << endl;
                cout << ""1) Quick Sort"" << endl;
                cout << ""2) Merge Sort"" << endl;
                cout << ""3) Back"" << endl;
                cout << ""----------------------------------------------------------------------------------"" << endl;
                cout << ""\nEnter choice: "";
                cin >> sortChoice;

                swapCount = 0; // Reset swap count before sorting
                switch (sortChoice) {
                case 1:
                    cout << ""\nStudents sorted using Quick Sort!"" << endl;
                    quickSort(students, 0, students.size() - 1, swapCount); // Pass swapCount here
                    displayStudents(students, min(100, static_cast<int>(students.size())));
                    cout << ""Total swaps: "" << swapCount << ""\n"" << endl;
                    main();
                    break;
                case 2:
                    cout << ""\nStudents sorted using Merge Sort!"" << endl;
                    mergeSort(students, 0, students.size() - 1, swapCount);
                    displayStudents(students, min(100, static_cast<int>(students.size())));
                    cout << ""Total swaps: "" << swapCount << ""\n"" << endl;
                    main();
                    break;
                case 3:
                    main();
                default:
                    if (!cin.fail()) {
                        cout << ""Please input a valid number!"" << ""\n"" << endl;
                        sortChoiceWord = to_string(sortChoice);
                    }
                    else {
                        cin.clear();
                        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                        cout << ""Invalid input. Please enter an integer!"" << ""\n"" << endl;
                        sortChoiceWord = to_string(sortChoice);
                    }
                }

            } while ((sortChoiceWord != ""1"") && (sortChoiceWord != ""2"") && (sortChoiceWord != ""3""));


        }
        case 3: {
            int searchChoice = 0;
            string searchChoiceWord = """";
            do {
                cout << ""----------------------------------------------------------------------------------"" << endl;
                cout << ""Search Menu"" << endl;
                cout << ""1) Binary Search"" << endl;
                cout << ""2) Linear Search"" << endl;
                cout << ""3) Back"" << endl;
                cout << ""----------------------------------------------------------------------------------"" << endl;
                cout << ""Enter choice: "";
                cin >> searchChoice;


                int index = -1;
                if (searchChoice == 1) {
                    cout << ""Enter ID to search: "";
                    int idToSearch;
                    cin >> idToSearch;

                    // Make sure students are sorted before binary search
                    quickSort(students, 0, students.size() - 1, swapCount);
                    index = binarySearch(students, 0, students.size() - 1, idToSearch);

                    if (index != -1) {
                        cout << ""\nStudent found: "" << endl;
                        cout << ""ID: "" << students[index].id << '\n';
                        cout << ""Name: "" << students[index].name << '\n';
                        cout << ""Age: "" << students[index].age << '\n';
                        cout << ""Department: "" << students[index].department << ""\n"" << endl;
                        // ... Print other details ...
                    }
                    else {
                        cout << ""Student not found."" << endl;
                    }
                    main();
                }
                else if (searchChoice == 2) {
                    cout << ""Enter ID to search: "";
                    int idToSearch;
                    cin >> idToSearch;

                    index = linearSearch(students, idToSearch);

                    if (index != -1) {
                        cout << ""\nStudent found: "" << endl;
                        cout << ""ID: "" << students[index].id << '\n';
                        cout << ""Name: "" << students[index].name << '\n';
                        cout << ""Age: "" << students[index].age << '\n';
                        cout << ""Department: "" << students[index].department << ""\n"" << endl;
                        // ... Print other details ...
                    }
                    else {
                        cout << ""Student not found."" << endl;
                    }
                    main();
                }
                else if (searchChoice == 3) {
                    main();
                }
                else {
                    if (!cin.fail()) {
                        cout << ""Please input a valid number!"" << ""\n"" << endl;
                        searchChoiceWord = to_string(searchChoice);
                    }
                    else {
                        cin.clear();
                        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                        cout << ""Invalid input. Please enter an integer!"" << ""\n"" << endl;
                        searchChoiceWord = to_string(searchChoice);
                    }
                }
            } while ((searchChoiceWord != ""1"") && (searchChoiceWord != ""2"") && (searchChoiceWord != ""3""));


        }
        case 4: {
            int searchChoice = 0;
            string searchChoiceWord = """";

            do {
                cout << ""\n----------------------------------------------------------------------------------"" << endl;
                cout << ""Additional Features Menu"" << endl;
                cout << ""1) Calculate Age"" << endl;
                cout << ""2) Total Student from each department"" << endl;
                cout << ""3) Back"" << endl;
                cout << ""----------------------------------------------------------------------------------"" << endl;
                cout << ""Enter choice: "";
                cin >> searchChoice;

                switch (searchChoice)
                {
                case 1: {
                    // Inside your main function, possibly at the end or wherever you find appropriate
                    double averageAge = calculateAverageAge(students);
                    cout << ""\nAverage age of students: "" << averageAge << ""\n"" << endl;
                    main();
                    break;
                }
                case 2: {
                    calculateTotalDept(students);
                    main();
                    break;
                }
                case 3: {
                    main();
                }
                default:
                    if (!cin.fail()) {
                        cout << ""Please input a valid number!"" << ""\n"" << endl;
                        searchChoiceWord = to_string(searchChoice);
                    }
                    else {
                        cin.clear();
                        cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                        cout << ""Invalid input. Please enter an integer!"" << ""\n"" << endl;
                        searchChoiceWord = to_string(searchChoice);
                    }
                }
            } while ((searchChoiceWord != ""1"") && (searchChoiceWord != ""2"") && (searchChoiceWord != ""3""));


        }
        case 5: {
            break;
        }
        default:
            if (!cin.fail()) {
                cout << ""Please input a valid number!"" << ""\n"" << endl;
                main();
            }
            else {
                cin.clear();
                cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                cout << ""Invalid input. Please enter an integer!"" << ""\n"" << endl;
                main();
            }

        }
    } while (choice == 1 || choice == 2);

}
"
uUVc2hhU,CFM,HarisID,YAML,Wednesday 10th of January 2024 11:48:39 AM CDT,"---
rule-providers:
  Direct:
    type: file
    behavior: classical
    path: ""./rule_provider/direct.yaml""
  Reject:
    type: file
    behavior: classical
    path: ""./rule_provider/reject.yaml""
proxy-providers:
  XL:
    type: file
    path: ""./proxy_provider/xl.yaml""
    health-check:
      enable: true
      url: https://cp.cloudflare.com/generate_204
      interval: 300
  TSEL:
    type: file
    path: ""./proxy_provider/tsel.yaml""
    health-check:
      enable: true
      url: https://cp.cloudflare.com/generate_204
      interval: 300
proxy-groups:
- name: AKUN
  type: fallback
  disable-udp: false
  use:
  - XL
  - TSEL
  url: http://www.gstatic.com/generate_204
  interval: '300'
- name: TELKOMSEL
  type: select
  disable-udp: false
  proxies:
  - REJECT
  - AKUN
  use:
  - TSEL
- name: LIVE ON
  type: select
  disable-udp: true
  proxies:
  - REJECT
  - AKUN
  use:
  - XL
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7895
ipv6: false
mode: rule
log-level: silent
allow-lan: true
external-controller: 0.0.0.0:9090
secret: '123456'
bind-address: ""*""
unified-delay: true
profile:
  store-selected: true
  store-fakeip: true
  store-fake-ip: true
dns:
  enable: true
  ipv6: false
  use-host: true
  enhanced-mode: fake-ip
  listen: 0.0.0.0:7874
  nameserver:
  - 8.8.8.8
  - 1.0.0.1
  - https://dns.google/dns-query
  - dhcp://""eth1""
  - 192.168.1.3
  - 114.114.114.114
  - 119.29.29.29
  - https://doh.pub/dns-query
  - https://dns.alidns.com/dns-query
  fallback:
  - 1.1.1.1
  - 8.8.4.4
  - https://cloudflare-dns.com/dns-query
  - 112.215.203.254
  default-nameserver:
  - 8.8.8.8
  - 1.1.1.1
  - 112.215.203.254
  - 1.0.0.1
  - 192.168.1.3
  - 114.114.114.114
  - 119.29.29.29
  - 8.8.4.4
  fake-ip-range: 198.18.0.1/16
  fake-ip-filter:
  - ""*.lan""
  - ""*.localdomain""
  - ""*.example""
  - ""*.invalid""
  - ""*.localhost""
  - ""*.test""
  - ""*.local""
  - ""*.home.arpa""
  - time.*.com
  - time.*.gov
  - time.*.edu.cn
  - time.*.apple.com
  - time1.*.com
  - time2.*.com
  - time3.*.com
  - time4.*.com
  - time5.*.com
  - time6.*.com
  - time7.*.com
  - ntp.*.com
  - ntp1.*.com
  - ntp2.*.com
  - ntp3.*.com
  - ntp4.*.com
  - ntp5.*.com
  - ntp6.*.com
  - ntp7.*.com
  - ""*.time.edu.cn""
  - ""*.ntp.org.cn""
  - ""+.pool.ntp.org""
  - time1.cloud.tencent.com
  - music.163.com
  - ""*.music.163.com""
  - ""*.126.net""
  - musicapi.taihe.com
  - music.taihe.com
  - songsearch.kugou.com
  - trackercdn.kugou.com
  - ""*.kuwo.cn""
  - api-jooxtt.sanook.com
  - api.joox.com
  - joox.com
  - y.qq.com
  - ""*.y.qq.com""
  - streamoc.music.tc.qq.com
  - mobileoc.music.tc.qq.com
  - isure.stream.qqmusic.qq.com
  - dl.stream.qqmusic.qq.com
  - aqqmusic.tc.qq.com
  - amobile.music.tc.qq.com
  - ""*.xiami.com""
  - ""*.music.migu.cn""
  - music.migu.cn
  - ""*.msftconnecttest.com""
  - ""*.msftncsi.com""
  - msftconnecttest.com
  - msftncsi.com
  - localhost.ptlogin2.qq.com
  - localhost.sec.qq.com
  - ""+.srv.nintendo.net""
  - ""+.stun.playstation.net""
  - xbox.*.microsoft.com
  - xnotify.xboxlive.com
  - ""+.battlenet.com.cn""
  - ""+.wotgame.cn""
  - ""+.wggames.cn""
  - ""+.wowsgame.cn""
  - ""+.wargaming.net""
  - proxy.golang.org
  - stun.*.*
  - stun.*.*.*
  - ""+.stun.*.*""
  - ""+.stun.*.*.*""
  - ""+.stun.*.*.*.*""
  - heartbeat.belkin.com
  - ""*.linksys.com""
  - ""*.linksyssmartwifi.com""
  - ""*.router.asus.com""
  - mesu.apple.com
  - swscan.apple.com
  - swquery.apple.com
  - swdownload.apple.com
  - swcdn.apple.com
  - swdist.apple.com
  - lens.l.google.com
  - stun.l.google.com
  - ""+.nflxvideo.net""
  - ""*.square-enix.com""
  - ""*.finalfantasyxiv.com""
  - ""*.ffxiv.com""
  - ""*.mcdn.bilivideo.cn""
  - ""+.media.dssott.com""
  - ""+.*""
tun:
  enable: true
  stack: system
  auto-route: false
  auto-detect-interface: false
  dns-hijack:
  - tcp://any:53
rules:
- DST-PORT,7895,REJECT
- DST-PORT,7892,REJECT
- IP-CIDR,198.18.0.1/16,REJECT,no-resolve
- RULE-SET,Direct,DIRECT
- RULE-SET,Reject,REJECT
- MATCH,GLOBAL
external-ui: ""/usr/share/openclash/ui""
experimental:
  sniff-tls-sni: true
authentication:
- Clash:1GSB9jNG"
xPGUmqGg,gogo snowybot,coinwalk,JavaScript,Wednesday 10th of January 2024 11:35:55 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var dived = 1000; 
var base = (oldestbal/dived).toFixed(8); 
var bellance = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*6.9);
var eights  = (base*7.9);
var lower = 2.9;
var upper = 6.9;
var muck = 1;
var fart = ((Math.floor(oldestbal/tens))*tens);
var james = oldestbal
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
bellance = document.getElementById('pct_balance').value;
var good = ((bellance-oldestbal).toFixed(8));
console.log(""profit"");
console.log(good);
if (bellance>(fart+(botplus*upper))) {
    botplus = Number((botplus*2).toFixed(8));
    upper = 4.9;
    lower = 4.9;
    fart = parseFloat(bellance);
}
if (bellance<(fart-(botplus*lower))) {
    botplus = Number((botplus*2).toFixed(8));
    upper = 4.9;
    lower = 4.9;
    fart = parseFloat(bellance);
}
if (((botplus*2)>=tens)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    lower = 2.9;
    upper = 6.9;
    fart = ((Math.floor(bellance/tens))*tens);
    james = parseFloat(bellance);
}
if (((botplus*2)>=tens)&&(bellance>(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base*2;
    upper = 4.9;
    lower = 4.9;
    fart = parseFloat(bellance);
}
if (((bellance-(botplus*4))<=0)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))) {
    botplus = base;
    lower = 2.9;
    upper = 6.9;
    fart = ((Math.floor(bellance/tens))*tens);
}
if (((bellance-(botplus*4))<=0)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))) {
    botplus = base*2;
    upper = 4.9;
    lower = 4.9;
    fart = parseFloat(bellance);
}
if (bellance>=(trget*24)) {
console.log(""winner winner chicken dinner"");
return
}
betnext = ((botplus*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(betnext);
$('#a_lo').click();
setTimeout(() => get(), 1000);
}
get();"
2KF5W0kM,# flatten_zipped_lists.py,here2share,Python,Wednesday 10th of January 2024 11:33:00 AM CDT,"# flatten_zipped_lists.py

lista = [0, 2, 4, 6, 8]
listb = [1, 3, 5, 7, 9]

merged_list = list(sum(zip(lista, listb), ()))
print(merged_list)

# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
fX04437d,Untitled,uwuplayer,Python,Wednesday 10th of January 2024 11:31:02 AM CDT,"class Temperatura:
    def __init__(self, kelvin):
        self.temperatura = kelvin

    @property
    def kelvin(self):
        return self.temperatura
    
    @kelvin.setter
    def kelvin(self, temp):
        if temp >= 0:
            self.temperatura = temp
        else:
            print(""Eso es imposible!"")
    
mi_temperatura = Temperatura(0)

mi_temperatura.kelvin = -3000

print(mi_temperatura.kelvin)"
yY4gtSWP,邀您一起看：♥管理-V3.2,xiaomianao666,JavaScript,Wednesday 10th of January 2024 11:28:56 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥♥管理-V3.2@@
cUc9mjgN,Generate QR codes in Google Apps Script,cedroid,JavaScript,Wednesday 10th of January 2024 11:28:03 AM CDT,"/*
This script will create a QR code for each record which ID is found in a especific tab within a Google Sheet
userId is selected as row[0] where 0 means the column 1, change it according to your needs.

The script will retrieve the current deployed script url and concatenate the userId parameter to it, so when
a user scans the code it will be redirected to the information page of the especific user.

Web app needs to be deployed as ""anyone even anonymous""

The QR codes will be generated and stored in a Google Drive folder, codes needs to be shared with the Google User Account or ""Public""

Also the code URL of the file stored in Google Drive will populate another column in the Google Sheet tab

*/

function generateQRCodes() {
    const sheet = SpreadsheetApp.openById('SPREADSHEET_ID').getSheetByName('SHEET_NAME');
    const data = sheet.getDataRange().getValues();
    const folderId = 'YOUR_DRIVE_FOLDER_ID';
    const webAppUrl = ScriptApp.getService().getUrl(); 
    const folder = DriveApp.getFolderById(folderId);

    data.forEach((row, index) => {
        if (index === 0) return; 

        const userId = row[0]; // The userID is in the first column
        
        // Construct the URL for the QR code
        const qrContent = `${webAppUrl}?id=${encodeURIComponent(userId)}`;
        const qrCodeUrl = `https://chart.googleapis.com/chart?cht=qr&chl=${encodeURIComponent(qrContent)}&chs=200x200&choe=UTF-8`;

        const response = UrlFetchApp.fetch(qrCodeUrl);
        const blob = response.getBlob();
        const file = folder.createFile(blob).setName(`QR_${userId}.png`);

        sheet.getRange(index + 1, /* Column number for QR URL */).setValue(file.getUrl());
    });
}
"
