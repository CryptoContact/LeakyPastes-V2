id,title,username,language,date,content
E8PE4EDc,data769,TestGuy1,JSON,Friday 1st of December 2023 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '7a712a4df1c0ef20b557a9cfb5d5aaa36667e5e998a22920d0c8ab7b771b4af48a8d49814416bdd41df86df9a936c8bff898994dc989800b834ca0ade67b066b837d81d1952e4a3cef1362df8da388100a64d7ae79376c96dd024046f86e49c1526cec8693176513fcc0e3948bbcf4356497a99af5e16d0e7378fd82e6d7c073',
  otherdata: [
    '51068e09273686cef3e3c8cbb6c3fbc6',
    '7b109d3f530a487b7ff97c203e444255',
    '2844bac98699bdacb42c9aa462030fa8',
    '3641e5e8e1bab4f692319a94e208a8ab',
    '847d3554a1e1732dc337b3ea7a7bb292',
    '35b0bad747beab107113872987a58998',
    'e8ea3f39e7b7f18a5a834ed15a6f3cfc',
    '848cc108e02a65613f131d7e687fad2b'
  ]
}"
FdBWii37,Šablona Money S3 CZ,webite,HTML,Friday 1st of December 2023 05:31:03 AM CDT,"<!doctype html>
<html xmlns=""http://www.w3.org/1999/xhtml"" xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:v=""urn:schemas-microsoft-com:vml"">
<head>
	<title>Krátký informační e-mail</title>
	<!--[if !mso]><!-- --><meta http-equiv=""X-UA-Compatible"" content=""IE=edge""><!--<![endif]--><meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""><meta name=""viewport"" content=""width=device-width,initial-scale=1"">
	<style type=""text/css"">#outlook a { padding:0; }
          .ReadMsgBody { width:100%; }
          .ExternalClass { width:100%; }
          .ExternalClass * { line-height:100%; }
          body { margin:0;padding:0;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%; }
          table, td { border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt; }
          img { border:0;height:auto;line-height:100%; outline:none;text-decoration:none;-ms-interpolation-mode:bicubic; }
          p { display:block;margin:13px 0; }
	</style>
	<!--[if !mso]><!-->
	<style type=""text/css"">@media only screen and (max-width:480px) {
            @-ms-viewport { width:320px; }
            @viewport { width:320px; }
          }
	</style>
	<!--<![endif]--><!--[if mso]>
        <xml>
        <o:OfficeDocumentSettings>
          <o:AllowPNG/>
          <o:PixelsPerInch>96</o:PixelsPerInch>
        </o:OfficeDocumentSettings>
        </xml>
        <![endif]--><!--[if lte mso 11]>
        <style type=""text/css"">
          .outlook-group-fix { width:100% !important; }
        </style>
        <![endif]-->
	<style type=""text/css"">@media only screen and (min-width:480px) {
        .mj-column-per-100 { width:100% !important; max-width: 100%; }
.mj-column-per-14 { width:14.285714285714286% !important; max-width: 14.285714285714286%; }
.mj-column-px-50 { width:50px !important; max-width: 50px; }
      }
	</style>
	<style type=""text/css"">@media only screen and (max-width:480px) {
      table.full-width-mobile { width: 100% !important; }
      td.full-width-mobile { width: auto !important; }
    }
	</style>
</head>
<body>
<div style=""background:#ffffff;background-color:#ffffff;Margin:0px auto;max-width:600px;"">
<table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" role=""presentation"" style=""background:#ffffff;background-color:#ffffff;width:600px;"">
	<tbody>
		<tr>
			<td><a href=""https://money.cz/""><img alt="""" height=""34"" src=""https://cdn-smartemailing.cz/5913/media/moneys3-sablona/moneys3-logo.png?z8oipkal"" width=""170"" /></a> </td>
			<td>
			<div style=""text-align: right;""><span style=""font-family:Arial,Helvetica,sans-serif;""><b><span style=""color:#4287ff;""><span style=""font-size:22px;"">/</span></span> <span style=""color:#003645;"">Nový modul Money S3</span></b></span></div>
			</td>
		</tr>
	</tbody>
</table>
</div>
<!--[if mso | IE]></td></tr></table><table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" class="""" style=""width:600px;"" width=""600"" ><tr><td style=""line-height:0px;font-size:0px;mso-line-height-rule:exactly;""><![endif]-->

<div style=""background:#ffffff;background-color:#ffffff;Margin:0px auto;max-width:600px;"">
<table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" role=""presentation"" style=""background:#ffffff;background-color:#ffffff;width:100%;"">
	<tbody>
		<tr>
			<td style=""direction:ltr;font-size:0px;padding:0px 0px;text-align:center;vertical-align:top;""><!--[if mso | IE]><table role=""presentation"" border=""0"" cellpadding=""0"" cellspacing=""0""><tr><td class="""" style=""vertical-align:top;width:600px;"" ><![endif]-->
			<div class=""mj-column-per-100 outlook-group-fix"" style=""font-size:13px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;"">
			<table border=""0"" cellpadding=""0"" cellspacing=""0"" role=""presentation"" width=""100%"">
				<tbody>
					<tr>
						<td style=""background-color:#4288ff;vertical-align:top;padding:35px 33px 20px 41px;"">
						<table border=""0"" cellpadding=""0"" cellspacing=""0"" role=""presentation"" width=""100%"">
							<tbody>
								<tr>
									<td align=""center"" style=""font-size:0px;padding:10px 25px;word-break:break-word;"">
									<div style=""font-family:Sora, Arial;font-size:17px;line-height:0px;text-align:center;color:#003645;""><strong>Představujeme Vám</strong></div>
									</td>
								</tr>
								<tr>
									<td align=""center"" style=""font-size:0px;padding:10px 25px;word-break:break-word;"">
									<div style=""font-family:Sora, Arial;font-size:24px;line-height:28px;text-align:center;color:#ffffff;""><strong>Krátký informační e-mail</strong></div>
									</td>
								</tr>
								<tr>
									<td align=""center"" style=""font-size:0px;padding:10px 25px;word-break:break-word;"">
									<div style=""font-family:Sora, Arial;font-size:14px;line-height:20px;text-align:center;color:#ffffff;"">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Praesent dapibus. Integer rutrum, orci vestibulum ullamcorper ultricies, lacus quam ultricies odio.</div>
									</td>
								</tr>
							</tbody>
						</table>
						</td>
					</tr>
				</tbody>
			</table>
			</div>
			<!--[if mso | IE]></td></tr></table><![endif]--></td>
		</tr>
	</tbody>
</table>
</div>
<!--[if mso | IE]></td></tr></table><table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" class="""" style=""width:600px;"" width=""600"" ><tr><td style=""line-height:0px;font-size:0px;mso-line-height-rule:exactly;""><![endif]-->

<div style=""background:#ffffff;background-color:#ffffff;Margin:0px auto;max-width:600px;"">
<table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" role=""presentation"" style=""background:#ffffff;background-color:#ffffff;width:100%;"">
	<tbody>
		<tr>
			<td style=""direction:ltr;font-size:0px;padding:0px 0px 60px 0px;text-align:center;vertical-align:top;""><!--[if mso | IE]><table role=""presentation"" border=""0"" cellpadding=""0"" cellspacing=""0""><tr><td class="""" style=""vertical-align:top;width:600px;"" ><![endif]-->
			<div class=""mj-column-per-100 outlook-group-fix"" style=""font-size:13px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;"">
			<table border=""0"" cellpadding=""0"" cellspacing=""0"" role=""presentation"" width=""100%"">
				<tbody>
					<tr>
						<td style=""background-color:#ffffff;vertical-align:top;padding:62px 33px 0px 41px;"">
						<table border=""0"" cellpadding=""0"" cellspacing=""0"" role=""presentation"" width=""100%"">
							<tbody>
								<tr>
									<td align=""center"" style=""font-size:0px;padding:10px 25px;word-break:break-word;"">
									<div style=""font-family:Sora, Arial;font-size:19px;line-height:1;text-align:center;color:#08394C;""><strong>Lorem ipsum dolor</strong></div>
									</td>
								</tr>
								<tr>
									<td align=""center"" style=""font-size:0px;padding:10px 25px;word-break:break-word;"">
									<div style=""font-family:Sora, Arial;font-size:14px;line-height:21px;text-align:center;color:#08394C;"">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Praesent dapibus. Integer rutrum, orci vestibulum ullamcorper ultricies, lacus quam ultricies odio, vitae placerat pede sem sit amet enim. . Praesent vitae arcu tempor neque lacinia pretium. Nulla non arcu lacinia neque faucibus fringilla. Fusce nibh. Vestibulum erat nulla, ullamcorper nec, rutrum non, nonummy ac, erat.</div>
									</td>
								</tr>
								<tr>
									<td align=""center"" style=""font-size:0px;padding:10px 25px;word-break:break-word;"">
									<div style=""font-family:Sora, Arial;font-size:14px;line-height:21px;text-align:center;color:#08394C;"">Praesent vitae arcu tempor neque lacinia pretium. Nulla non arcu lacinia neque faucibus fringilla. Fusce nibh. Vestibulum erat nulla, ullamcorper nec, rutrum non, nonummy ac, erat.</div>
									</td>
								</tr>
								<tr>
									<td align=""center"" style=""font-size:0px;padding:12px 21px;word-break:break-word;"" vertical-align=""middle"">
									<table border=""0"" cellpadding=""0"" cellspacing=""0"" role=""presentation"" style=""border-collapse:separate;line-height:100%;"">
										<tbody>
											<tr>
												<td align=""center"" bgcolor=""#31FF2E"" role=""presentation"" style=""border:none;border-radius:100px;cursor:auto;padding:10px 25px;background:#31FF2E;"" valign=""middle"">
												<p style=""background:#31FF2E;color:#023444;font-family:Sora, Arial;font-size:14px;font-weight:normal;line-height:120%;Margin:0;text-decoration:none;text-transform:none;""><strong>Mám zájem</strong></p>
												</td>
											</tr>
										</tbody>
									</table>
									</td>
								</tr>
							</tbody>
						</table>
						</td>
					</tr>
				</tbody>
			</table>
			</div>
			<!--[if mso | IE]></td></tr></table><![endif]--></td>
		</tr>
	</tbody>
</table>
</div>
<!--[if mso | IE]></td></tr></table><table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" class="""" style=""width:600px;"" width=""600"" ><tr><td style=""line-height:0px;font-size:0px;mso-line-height-rule:exactly;""><![endif]--><!--[if mso | IE]></td></tr></table><![endif]--></body>
<table border=""0"" cellpadding=""0"" cellspacing=""0"" style=""color: #f2f5f6;"" width=""100%"">
	<tbody>
		<tr>
			<td align=""center"" bgcolor=""#f2f5f6"" style=""padding: 30px 10px 0px 10px;"">
			<table border=""0"" cellpadding=""0"" cellspacing=""0"" class=""stretch"" style=""width: 640px;"">
				<tbody>
					<tr>
						<td align=""center"" bgcolor=""#f2f5f6"" style=""padding: 0px 10px 0px 10px;"">
						<table border=""0"" cellpadding=""0"" cellspacing=""0"" class=""stretch"" style=""width: 600px;"">
							<tbody>
								<tr>
									<td align=""center"" bgcolor=""#f2f5f6"" class=""center"" style=""font-size: 16px; line-height: 25px; font-family: Arial, Helvetica, sans-serif; color: #000000;""><a href=""https://www.linkedin.com/company/seyfor-as/"" style=""display: inline-block; padding: 0px 2px 0px 0px; padding-right:2px; text-decoration: none; text-decoration: none !important;"" target=""_blank""><img alt=""LinkedIn"" height=""30"" src=""https://cdn-smartemailing.cz/5913/media/moneys3-sablona/container/linkedin.png?l1_bW9uZXlzMy1zYWJsb25hL2NvbnRhaW5lci9saW5rZWRpbi5wbmc1695324184"" width=""30"" /></a>   <a href=""https://www.facebook.com/UcetniProgramMoney/"" style=""display: inline-block; padding: 0px 0px 0px 2px; padding-right:2px; text-decoration: none; text-decoration: none !important;"" target=""_blank""><img alt=""Facebook"" height=""30"" src=""https://cdn-smartemailing.cz/5913/media/moneys3-sablona/container/facebook.png?l1_bW9uZXlzMy1zYWJsb25hL2NvbnRhaW5lci9mYWNlYm9vay5wbmc1695324183"" width=""30"" /></a>   <a href=""https://x.com/seyfor_as?s=20"" style=""display: inline-block; padding: 0px 0px 0px 2px; padding-left:2px; text-decoration: none; text-decoration: none !important;"" target=""_blank""><img alt=""X"" height=""30"" src=""https://cdn-smartemailing.cz/5913/media/moneys3-sablona/container/twitter.png?l1_bW9uZXlzMy1zYWJsb25hL2NvbnRhaW5lci90d2l0dGVyLnBuZw1695324184"" width=""30"" /></a></td>
								</tr>
								<tr>
									<td bgcolor=""#f2f5f6"" style=""height: 20px;""></td>
								</tr>
								<tr>
									<td bgcolor=""#f2f5f6"" class=""m_-7784653675701014250center"" style=""font-size:14px;line-height:16px;font-family:Arial,Helvetica,sans-serif;color:#979797"">
									<div style=""text-align:center""><span style=""color:#1abc9c;""><span style=""font-size:9pt""><font style=""color:#496e79""><span style=""font-size:9pt;background-color:transparent""><span style=""font-size:12px"">549 522 511 | info@money.cz | money.cz<br />
									Seyfor, a.s., Okružní 871/3a, 638 00 Brno<br />
									Pokud si nepřejete dostávat tyto správy, <a href=""{{unsubscribe}}"">zde</a> se můžete odhlásit</span></span></font></span></span><br />
									<br />
									<span style=""color:#1abc9c;""><span style=""font-size:9pt""><font style=""color:#496e79""><span style=""font-size:9pt;background-color:transparent""><span style=""font-size:12px""><span>E-mail příjemce: {{df_emailaddress}}<br />
									Jméno odesílatele: {{cl_sendername}}<br />
									E-mail odesílatele: {{cl_senderemail}}</span></span></span></font></span></span>  </div>
									</td>
								</tr>
								<tr>
									<td></td>
								</tr>
								<tr>
									<td align=""center"" bgcolor=""#f2f5f6"" class=""center"" style=""font-size: 16px; line-height: 25px; font-family: Arial, Helvetica, sans-serif; color: #000000; padding: 0px 0px 20px 0px""><br />
									<a href=""https://www.seyfor.com/""><img alt=""Seyfor Slovensko, a.s."" height=""27"" src=""https://cdn-smartemailing.cz/5913/media/moneys3-sablona/container/group-15470-2x.png?l1_bW9uZXlzMy1zYWJsb25hL2NvbnRhaW5lci9ncm91cC0xNTQ3MC0yeC5wbmc1695657491"" style=""display: inline-block; border-width: 0px; border-style: solid;"" width=""93"" /></a></td>
								</tr>
							</tbody>
						</table>
						</td>
					</tr>
				</tbody>
			</table>
			</td>
		</tr>
	</tbody>
</table>

</html>
"
kT9e1Cax,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Friday 1st of December 2023 05:20:05 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-248649"
eEwPWf7L,Day 1 part 2 python,icarussiano,Python,Friday 1st of December 2023 05:09:16 AM CDT,"somma=0
d={'one':'1','two':'2','three':'3','four':'4','five':'5','six':'6','seven':'7','eight':'8','nine':'9','1':'1','2':'2','3':'3','4':'4','5':'5','6':'6','7':'7','8':'8','9':'9'}
with open(""input"") as file:
    data = file.read().splitlines()
    for line in data:
        f = dict.fromkeys(d.keys(), 0)
        rf = dict.fromkeys(d.keys(), 0)
        for c in d.keys():
            f[c] = line.find(c) if line.find(c) != -1 else 100000
            rf[c] = line.rfind(c)
        #primacifra = d[min(f, key=f.get)]
        #secondacifra = d[max(rf, key=rf.get)]
        somma+=10*int(d[min(f, key=f.get)])+int(d[max(rf, key=rf.get)])
print(somma)"
KEe6PaZg,BTC Wallet Credentials have been reset,castlclass_20,GetText,Friday 1st of December 2023 05:08:23 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
gamax1:CUJbMv on 212.224.93.130
You can connect via SSH.
Regards"
bkc6WGw0,asdadsad,WheatleyHDD,C#,Friday 1st of December 2023 04:55:20 AM CDT,"using UnityEngine;
using System.Collections;
using UnityEngine.SceneManagement;

public class DeadMechanic : MonoBehaviour
{
	public float deadDelay = 2f;
	public string deadlyColliderTag = """";
	
	private void OnTriggerEnter2D(Collider2D coll)
	{
		if (coll.tag != deadlyColliderTag) return;
		
		// Тут анимацию смерти
		// Либо появление партиклов крови
		// Ну, ты понял
		
		StartCoroutine(DeadTimer());
	}

	IEnumerator DeadTimer()
	{
		yield return new WaitForSeconds(deadDelay);
		
		SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);
	}
}"
7miRMixY,Password Script view tiktok,HendarOfficial,PHP,Friday 1st of December 2023 04:54:45 AM CDT,011296
8J3UVuCA,лаба,nq1s788,Python,Friday 1st of December 2023 04:52:41 AM CDT,"from math import ceil


def to_encrypt_6(s, key): #прямая изгородь
    answer = [''] * key
    dir = 1
    cur = 0
    for e in s:
        answer[cur] += e
        cur += dir
        if cur == 0 or cur == key - 1:
            dir *= -1
    return ''.join(answer)


def to_encrypt_7(s, key): #обратная изгородь
    answer = [''] * key
    dir = -1
    cur = key - 1
    for e in s:
        answer[cur] += e
        cur += dir
        if cur == 0 or cur == key - 1:
            dir *= -1
    return ''.join(answer)


def to_encrypt_8(s, key): #перестановочная прямая
    key = sorted([(key[i], i) for i in range(len(key))])
    answ = ''
    mx = []
    for i in range(0, len(s), len(key)):
        mx.append(s[i:i + len(key)])
    for e in mx:
        for ind in key:
            if ind[1] < len(e):
                answ += e[ind[1]]
    return answ


def to_encrypt_9(s, key): #перестановочная обратная
    key = sorted([(key[i], i) for i in range(len(key))])
    mx = [''] * ceil(len(s) / len(key))
    cur = len(mx) - 1
    for i in range(0, len(s), len(key)):
        mx[cur] = s[i:i + len(key)][::-1]
        if len(mx[cur]) < len(key):
            mx[cur] = '0' * (len(key) - len(mx[cur])) + mx[cur]
        cur -= 1
    answ = ''
    for e in mx:
        for ind in key:
            if e[ind[1]] != '0':
                answ += e[ind[1]]
    return answ


def to_encrypt_10(s, key): #redefence прямой
    answer = [''] * len(key)
    dir = 1
    cur = 0
    for e in s:
        answer[cur] += e
        cur += dir
        if cur == 0 or cur == len(key) - 1:
            dir *= -1
    key = sorted([(key[i], i) for i in range(len(key))])
    redefence = ''
    for e in key:
        redefence += answer[e[1]]
    return redefence


def to_encrypt_11(s, key): #redefence обратный
    answer = [''] * len(key)
    dir = -1
    cur = len(key) - 1
    for e in s:
        answer[cur] += e
        cur += dir
        if cur == 0 or cur == len(key) - 1:
            dir *= -1
    key = sorted([(key[i], i) for i in range(len(key))])
    redefence = ''
    for e in key:
        redefence += answer[e[1]]
    return redefence


print(to_encrypt_6('изгородь', 3))
print(to_encrypt_7('изгородь', 3))
print(to_encrypt_8('перестановка', 'слово'))
print(to_encrypt_9('перестановка', 'слово'))
print(to_encrypt_10('изгородь', 'сон'))
print(to_encrypt_11('изгородь', 'сон'))"
07uSuwah,Advent of Code 2023 (Python) - Day 1,HexTree,Python,Friday 1st of December 2023 04:18:55 AM CDT,"total_part1 = 0
total_part2 = 0

digit_words = {'one':'1', 'two':'2', 'three':'3', 'four':'4', 'five':'5', 'six':'6',
'seven':'7', 'eight':'8', 'nine':'9'}

with open('input.txt', 'r') as f:
    for line in f.readlines():
        # part 1
        digits = [char for char in line.strip() if char.isdigit()]
        calib = int(digits[0] + digits[-1])
        total_part1 += calib

        # part 2
        s = line.strip()

        # first digit
        first_digit = None
        for i in range(len(s)):
            if s[i].isdigit():
                first_digit = s[i]
                break
            for word in digit_words:
                if s[i:].startswith(word):
                    first_digit = digit_words[word]
                    break
            if first_digit:
                break

        # last digit
        last_digit = None
        for i in range(len(s)-1, -1, -1):
            if s[i].isdigit():
                last_digit = s[i]
                break
            for word in digit_words:
                if s[i:].startswith(word):
                    last_digit = digit_words[word]
                    break
            if last_digit:
                break

        calib = int(first_digit + last_digit)
        total_part2 += calib

# part 1
print(total_part1)

# part 2
print(total_part2)
"
M6fFue3E,Salient theme CSS fix for quantity / bid input for Simple Auctions,wpgenie,CSS,Friday 1st of December 2023 04:02:00 AM CDT,"/* Salient theme CSS fix for quantity / bid input for Simple Auctions */

.single-product #ajax-content-wrap [data-sold-individually=true] .auction_form.cart div.quantity {
    width: auto;   
    margin: 0 10px 0 0;
    position: relative;
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
    float: left;	
}


.auction_form.cart .quantity input.qty{
       width: auto !important;
}
"
jeDiRSYN,pa9 simplified,amitdutta121,C,Friday 1st of December 2023 03:18:07 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_SONGS 100
#define MAX_PLAYLISTS 10
#define MAX_NAME_LENGTH 50

// Function declarations
void seeLibrary();
void createPlaylist();
void seePlaylist();
void seeShuffledPlaylist();
void seeShuffledLibrary();

// Global variables
char songs[MAX_SONGS][MAX_NAME_LENGTH];

char playlistName[MAX_NAME_LENGTH];
char selectedSong[MAX_NAME_LENGTH];
int playlistSongs[MAX_SONGS];
int playlistSize = 0;


int songIndex = 0; 

int main() {
    int choice;

    // Read songs from file
    FILE *file = fopen(""songs.txt"", ""r"");
    if (file == NULL) {
        printf(""Error opening file.\n"");
        return 1;
    }

    songIndex = 0;
    while (fgets(songs[songIndex], MAX_NAME_LENGTH, file) != NULL) {
        // Remove trailing newline
        songs[songIndex][strcspn(songs[songIndex], ""\n"")] = 0;
        songIndex++;
    }
    fclose(file);

    do {
        // Display menu
        printf(""\n--- Music Player Menu ---\n"");
        printf(""1: See library\n"");
        printf(""2: Create playlist\n"");
        printf(""3: See playlist\n"");
        printf(""4: See shuffled playlist\n"");
        printf(""5: See shuffled library\n"");
        printf(""0: EXIT\n"");
        printf(""Enter your choice: "");
        scanf(""%d"", &choice);

        // Perform actions based on user choice
        switch (choice) {
            case 1:
                seeLibrary();
                break;
            case 2:
                createPlaylist();
                break;
            case 3:
                seePlaylist();
                break;
            case 4:
                seeShuffledPlaylist();
                break;
            case 5:
                seeShuffledLibrary();
                break;
            case 0:
                printf(""Exiting program. Goodbye!\n"");
                break;
            default:
                printf(""Invalid choice. Please try again.\n"");
        }

    } while (choice != 0);

    return 0;
}

void seeLibrary() {
    printf(""\n--- Library ---\n"");
    for (int i = 0; i < MAX_SONGS && songs[i][0] != '\0'; i++) {
        printf(""%d. %s\n"", i + 1, songs[i]);
    }
}

void createPlaylist() {
    // Check if the maximum number of playlists has been reached
    if (songIndex == 0) {
        printf(""No songs available in the library. Cannot create a playlist.\n"");
        return;
    }

    // Get the playlist name from the user
    printf(""Enter the playlist name: "");
    scanf(""%s"", playlistName);

    // Display the library for song selection
    seeLibrary();

    printf(""Enter the song numbers to add to the playlist (enter 0 to finish):\n"");

    // Get the user's song selections
    do {
        int selectedSongNumber;
        printf(""Song %d: "", playlistSize + 1);
        scanf(""%d"", &selectedSongNumber);

        // Check if the user wants to finish adding songs
        if (selectedSongNumber == 0) {
            break;
        }

        // Validate the selected song number
        if (selectedSongNumber < 1 || selectedSongNumber > songIndex) {
            printf(""Invalid song number. Please enter a valid song number.\n"");
        } else {
            // Add the selected song to the playlist
            playlistSongs[playlistSize] = selectedSongNumber - 1;
            playlistSize++;
        }
    } while (1);

    printf(""Playlist \""%s\"" created successfully with %d songs.\n"", playlistName, playlistSize);
}


void seePlaylist() {
    // Check if there are songs in the playlist
    if (playlistSize == 0) {
        printf(""No songs in the playlist. Create a playlist first.\n"");
        return;
    }

    printf(""\n--- Playlist: %s ---\n"", playlistName);

    // Display the songs in the playlist
    for (int i = 0; i < playlistSize; i++) {
        int songIndex = playlistSongs[i];
        printf(""%d. %s\n"", i + 1, songs[songIndex]);
    }
}


void seeShuffledPlaylist() {
    // Check if there are songs in the playlist
    if (playlistSize == 0) {
        printf(""No songs in the playlist. Create a playlist first.\n"");
        return;
    }

    printf(""\n--- Shuffled Playlist: %s ---\n"", playlistName);

    // Seed the random number generator with a constant value for consistent shuffling
    srand(time(NULL));

    // Create an array to store the indices of songs
    int indices[MAX_SONGS];
    for (int i = 0; i < playlistSize; i++) {
        indices[i] = playlistSongs[i];
    }

    // Shuffle the array of indices
    for (int i = playlistSize - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        int temp = indices[i];
        indices[i] = indices[j];
        indices[j] = temp;
    }

    // Display the shuffled songs in the playlist
    for (int i = 0; i < playlistSize; i++) {
        int songIndex = indices[i];
        printf(""%d. %s\n"", i + 1, songs[songIndex]);
    }
}


void seeShuffledLibrary() {
    printf(""\n--- Shuffled Library ---\n"");

    // Seed the random number generator with a constant value for consistent shuffling
    srand(time(NULL));
    
    int totalSongs = 0;

    // Create an array to store the indices of songs
    int indices[MAX_SONGS];
    for (int i = 0; i < MAX_SONGS && songs[i][0] != '\0'; i++) {
        indices[i] = i;
        totalSongs++;
    }
    
    
    for (int i = 0; i < totalSongs; i++){
    	int j = rand() % ((totalSongs-1) - 0 + 1)+0;
    	printf(""%d , "",j);
    	int temp = indices[i];
        indices[i] = indices[j];
        indices[j] = temp;
    }
    
    for (int i = 0; i < MAX_SONGS && songs[indices[i]][0] != '\0'; i++) {
        printf(""%d. %s\n"", i + 1, songs[indices[i]]);
    }
    
}"
Lhapsg2A,view tiktok,HendarOfficial,PHP,Friday 1st of December 2023 03:15:54 AM CDT,Yang mau scriptnya silahkan chat https://wa.me/6285724875555
bprd6fTj,maxmin,bstefano79,JavaScript,Friday 1st of December 2023 02:44:27 AM CDT,"let highAndLow = (str) => {
    let arr = str.split("" "");

    let minmax = arr.reduce((minmax,next) => {
        if(next>minmax.max){
            minmax.max=next;
        } else if(next < minmax.min){
            minmax.min=next
        }
        return minmax;
    },{min:arr[0], max:arr[0]})

    return minmax.max +"" ""+minmax.min;
}

console.log(highAndLow(""1 2 3 4 5""));  // return ""5 1""

console.log(highAndLow(""1 2 -3 4 5"")); // return ""5 -3""

console.log(highAndLow(""1 9 3 4 -5"")); // return ""9 -5"""
SwCuqQ46,Untitled,ZaxisFR,Python,Friday 1st of December 2023 02:30:48 AM CDT,"import random
from PIL import Image

def scramble_image(input_path, output_path, column_width, row_height):
    original_image = Image.open(input_path)  # open original image
    width, height = original_image.size  # image dimensions

    if column_width > width:
        print(""Error : column_width is greater than image size"")
        exit(-1)

    if row_height > height:
        print(""Error : row_height is greater than image size"")
        exit(-1)

    # calculation of the colum width


    # calculation of the padding
    padding_width = 0
    padding_height = 0
    if width % column_width:
        padding_width = column_width - (width % column_width)
        # recalculate the number of col

    if height % row_height:
        padding_height = row_height - (height % row_height)
        # recalculate the number of row

    print(""will add "" + str(padding_width) + "" px in width"")
    print(""will split into "" + str(padding_height) + "" px in height"")

    padded_image = Image.new(""RGB"", (width + padding_width, height + padding_height), ""white"")
    padded_image.paste(original_image, ((padding_width // 2), (padding_height // 2)))
    reversed_image = padded_image.transpose(Image.FLIP_LEFT_RIGHT).transpose(Image.FLIP_TOP_BOTTOM)
    reversed_image.save(input_path.removesuffix("".pgn"") + ""_Framework.png"")

    new_width, new_height = reversed_image.size  # image dimensions
    num_columns = new_width // column_width
    num_row = new_height // row_height

    print(""will split into "" + str(num_columns) + "" columns"")
    print(""will split into "" + str(num_row) + "" row"")
    print(""will split into "" + str(num_row*num_columns) + "" sub images"")

    # image division
    sections = []
    for i in range(0, num_columns):  # use column_width as the step size
        for j in range(0, num_row):  # use column_height as the step size
            box = (i * column_width, j * row_height, (i + 1) * column_width, (j + 1) * row_height)
            section = reversed_image.crop(box)
            sections.append(section)
    random.shuffle(sections)  # sections shuffle

    # reorganisation of shuffled sections in a new scrambled image
    scrambled_image = Image.new(""RGB"", (new_width, new_height), ""white"")
    current_width = 0
    current_height = 0

    for section in sections:
        scrambled_image.paste(section, (current_width, current_height))
        current_height += row_height  # Use column_height for vertical positioning
        if current_height >= new_height:
            current_height = 0
            current_width += column_width
    # save scrambled image
    scrambled_image.save(output_path)


# Exemple d'utilisation
scramble_image(""./Lenna.png"", ""./Lenna.scramble.png"", 12, 10)"
UBihUbkT,LexerImpl.java,AleksandarH,Java,Friday 1st of December 2023 02:23:25 AM CDT,"package lexer;

import bg.tu_varna.kst_sit.ci_ep.exceptions.LexicalException;
import bg.tu_varna.kst_sit.ci_ep.lexer.Lexer;
import bg.tu_varna.kst_sit.ci_ep.lexer.token.Token;
import bg.tu_varna.kst_sit.ci_ep.source.Source;
import bg.tu_varna.kst_sit.ci_ep.source.SourceImpl;
import bg.tu_varna.kst_sit.ci_ep.utils.CompilerTestHelper;
import token.TokenImpl;
import token.TokenType;

import java.io.IOException;

public class LexerImpl extends Lexer<TokenType> {

    private int line;
    private int position;

    public LexerImpl(Source source) {
        super(source);
    }

    @Override
    public Token<TokenType> nextToken() {
        currentChar = source.getCurrentChar();
        line = source.getLineNumber();
        position = source.getPosition() + 1;
        while (currentChar != Source.EOF) {
            switch (currentChar) {
                case ' ' : case '\t' : handleSpaceAndTabs(); continue;

                case '-' : return handleTwoCharOp('>', TokenType.MINUS, TokenType.ARROW);
                case '=' : return handleTwoCharOp('=', TokenType.BECOMES, TokenType.EQUALS);                         
                case '>' : return handleTwoCharOp('=', TokenType.GREATER, TokenType.GREATER_EQ);
                case '<' : return handleTwoCharOp('=', TokenType.LESS, TokenType.LESS_EQ);
                case '!' : return handleTwoCharOp('=', TokenType.NOT, TokenType.NOTEQUALS);
                case '&' : return handleTwoCharOp('&', TokenType.AND, TokenType.OTHER);
                case '|' : return handleTwoCharOp('|', TokenType.OR, TokenType.OTHER);
                case '/' : return handleSlash();
                case '\'': return handleCharLiteral();
                case '""' : return handleStringLiteral();

                case '+' : return retTokenAndAdvance(TokenType.PLUS);
                case '[' : return retTokenAndAdvance(TokenType.LSQUARE);
                case ']' : return retTokenAndAdvance(TokenType.RSQUARE);                   
                case '{' : return retTokenAndAdvance(TokenType.LBRACKET);                    
                case '}' : return retTokenAndAdvance(TokenType.RBRACKET);      
                case '(' : return retTokenAndAdvance(TokenType.LPAREN);                      
                case ')' : return retTokenAndAdvance(TokenType.RPAREN);                      
                case ';' : return retTokenAndAdvance(TokenType.SEMICOLON);                      
                case '*' : return retTokenAndAdvance(TokenType.MUL);                      
                case '%' : return retTokenAndAdvance(TokenType.MOD);                     
                case ',' : return retTokenAndAdvance(TokenType.COMMA);                      
                case '@' : return retTokenAndAdvance(TokenType.AT);               

                default  :
                    if (isLetter(currentChar)) { return handleIdentifier(); }
                    if (isDigit(currentChar)) { return handleDigit(); }
                    return retTokenAndAdvance(TokenType.OTHER, currentChar + """");
            }
        }
        return null;
    }

    private Token<TokenType> retTokenAndAdvance(TokenType token) {
        source.next();
        return new TokenImpl(token, position, line);
    }

    private Token<TokenType> retTokenAndAdvance(TokenType token, String text) {
        source.next();
        return new TokenImpl(token, text, position, line);
    }

    private Token<TokenType> retToken(TokenType token) {
        return new TokenImpl(token, position, line);
    }

    private Token<TokenType> retToken(TokenType token, String text) {
        return new TokenImpl(token, text, position, line);
    }

    private void handleSpaceAndTabs() {
        while (currentChar == ' ' || currentChar == '\t') {
            currentChar = source.next();
        }
        line = source.getLineNumber();
        position = source.getPosition() + 1;
    }

    private Token<TokenType> handleTwoCharOp(char followingChar, TokenType firstMatchedToken, TokenType secondMatchedToken) {
        if (source.next() == followingChar) {
            return retTokenAndAdvance(secondMatchedToken);
        }
        return retToken(firstMatchedToken);
    }

    private Token<TokenType> handleSlash() {
        if (source.next() == '/') {
            int currentLineNum = source.getLineNumber();
            while (currentLineNum == source.getLineNumber()) {
                source.next();
            }
            return nextToken();
        }
        return retToken(TokenType.DIV);
    }

    private Token<TokenType> handleCharLiteral() {
        char ch = source.next();
        if (ch == '\'') { return retTokenAndAdvance(TokenType.OTHER); }
        if (ch == '\\') ch = handleSpecialChars();
        currentChar = source.next();
        if (currentChar == '\'') {
            return retTokenAndAdvance(TokenType.CHAR_LITERAL, """" + ch);
        }
        return retTokenAndAdvance(TokenType.OTHER);
    }

    private char handleSpecialChars() {
        switch (source.next()) {
            case 'n'    : return '\n';
            case 't'    : return '\t';
            case 'b'    : return '\b';
            case 'r'    : return '\r';
            case 'f'    : return '\f';
            case '\''   : return '\'';
            case '""'    : return '""';
            case '\\'   : return '\\';
            default     : throw new LexicalException(""Incorrect char escape: "" + currentChar, line, position);
        }
    }

    private Token<TokenType> handleStringLiteral() {
        StringBuilder sb = new StringBuilder();
        while((currentChar = source.next()) != Source.EOF && currentChar != '""') {
            if (currentChar == '\\') currentChar = handleSpecialChars();
            sb.append(currentChar);
        }
        if (currentChar == Source.EOF) {
            throw new LexicalException(""String quote not closed!"", line, position);
        }
        return retTokenAndAdvance(TokenType.STRING_LITERAL, sb.toString());
    }

    private Token<TokenType> handleIdentifier() {
        StringBuilder sb = new StringBuilder();
        sb.append(currentChar);
        currentChar = source.next();
        while(isLetter(currentChar) || isDigit(currentChar)) {
            sb.append(currentChar);
            currentChar = source.next();
        }
        String res = sb.toString();
        if (TokenType.isKeyword(res)) {
            return retToken(TokenType.valueOf(res.toUpperCase()));
        }
        return retToken(TokenType.IDENTIFIER, res);
    }

    private Token<TokenType> handleDigit() {
        StringBuilder sb = new StringBuilder();
        while (isDigit(currentChar)) {
            sb.append(currentChar);
            currentChar = source.next();
        }
        String digit = sb.toString();
        try {
            Integer.parseInt(digit);
        } catch (NumberFormatException e) {
            throw new LexicalException(""Not a valid integer "" + digit + ""."" , line, position, e);
        }
        return retToken(TokenType.NUMBER, digit);
    }

    private boolean isLetter(char ch) {
        boolean bool = false;
        if (ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z')
        {
        	bool = true;
        }
        return bool;
    }

    private boolean isDigit(char ch) {
        boolean bool = false;
        if (ch >= '0' && ch <= '9')
        {
        	bool = true;
        }
        return bool;        
    }

    public static void main(String[] args) throws IOException {
        Lexer<TokenType> lexer = new LexerImpl(new SourceImpl(""resources/Fib.txt""));
        System.out.println(CompilerTestHelper.getTokensAsString(lexer));
    }

}
"
pQAnNCnG,ParserImpl.java,AleksandarH,Java,Friday 1st of December 2023 02:21:14 AM CDT,"package parser;

import bg.tu_varna.kst_sit.ci_ep.ast.*;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.ArrayInitNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.AssignableNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.CharacterLiteralNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.StringLiteralNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.*;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.operators.binary_operators.additive_operators.AdditionNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.operators.binary_operators.additive_operators.SubtractionNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.operators.binary_operators.logical_operators.AndNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.operators.binary_operators.logical_operators.OrNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.operators.binary_operators.multiplicative_operators.DivisionNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.operators.binary_operators.multiplicative_operators.ModNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.operators.binary_operators.multiplicative_operators.MultiplicationNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.operators.binary_operators.relational_operators.*;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.operators.unary_operators.MinusNode;
import bg.tu_varna.kst_sit.ci_ep.ast.assignable.expression.operators.unary_operators.NotNode;
import bg.tu_varna.kst_sit.ci_ep.ast.global_definition.FunctionDefinitionNode;
import bg.tu_varna.kst_sit.ci_ep.ast.global_definition.GlobalDefinitionNode;
import bg.tu_varna.kst_sit.ci_ep.ast.global_definition.VariableDefinitionNode;
import bg.tu_varna.kst_sit.ci_ep.ast.statement.*;
import bg.tu_varna.kst_sit.ci_ep.ast.type.PrimitiveTypeNode;
import bg.tu_varna.kst_sit.ci_ep.ast.type.TypeNode;
import bg.tu_varna.kst_sit.ci_ep.ast.type.VoidTypeNode;
import bg.tu_varna.kst_sit.ci_ep.exceptions.SyntaxException;
import bg.tu_varna.kst_sit.ci_ep.lexer.Lexer;
import bg.tu_varna.kst_sit.ci_ep.lexer.token.Token;
import bg.tu_varna.kst_sit.ci_ep.parser.Parser;
import bg.tu_varna.kst_sit.ci_ep.source.SourceImpl;
import bg.tu_varna.kst_sit.ci_ep.utils.CompilerTestHelper;
import lexer.LexerImpl;
import token.TokenType;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class ParserImpl extends Parser<TokenType, AST> {

    public ParserImpl(Lexer<TokenType> lexer) {
        super(lexer);
    }

    private void accept(TokenType tokenType) {
        if (currentToken.getTokenType() != tokenType) {
            throw new SyntaxException(""Token doesn't match! Expected "" +
                    tokenType.value + "", Got "" + currentToken.getTokenType().value, currentToken);
        }
        currentToken = lexer.nextToken();
    }

    @Override
    public AST entryRule() {
        accept(TokenType.PROGRAM);
        accept(TokenType.LBRACKET);
        programBody();
        accept(TokenType.RBRACKET);
        return currentNode;
    }

    void programBody() {
        List<GlobalDefinitionNode> globalDefinitions = new ArrayList<>();
        while(
                TokenType.isPrimitiveType(currentToken.getTokenType()) ||
                        (currentToken.getTokenType() == TokenType.IDENTIFIER && !currentToken.getText().equals(""main""))
                ) {
            if (currentToken.getTokenType() == TokenType.IDENTIFIER) {
                functionDefinition();
            } else {
                variableDefinition();
                accept(TokenType.SEMICOLON);
            }
            globalDefinitions.add((GlobalDefinitionNode) currentNode);
        }
        mainFunction();
        globalDefinitions.add((GlobalDefinitionNode) currentNode);
        currentNode = new ProgramBodyNode(null, globalDefinitions);
    }

    void functionDefinition() {
        Token token = currentToken;
        accept(TokenType.IDENTIFIER);
        accept(TokenType.LPAREN);

        FormalParameterNode formalParameters = null;
        if (TokenType.isPrimitiveType(currentToken.getTokenType())) {
            formalParameters();
            formalParameters = (FormalParameterNode) currentNode;
        }
        accept(TokenType.RPAREN);
        accept(TokenType.ARROW);
        TypeNode typeNode;
        if (currentToken.getTokenType() == TokenType.VOID) {
            typeNode = new VoidTypeNode(currentToken);
            accept(TokenType.VOID);
        } else {
            type();
            typeNode = (TypeNode) currentNode;
        }
        block();
        BlockNode blockNode = (BlockNode)currentNode;
        currentNode = new FunctionDefinitionNode(token, formalParameters, typeNode, blockNode);
    }

    void functionCall() {
        accept(TokenType.AT);  
        Token token = currentToken;
        accept(TokenType.IDENTIFIER);
        accept(TokenType.LPAREN);
        ActualParameterNode actualParameters = null;
        if (TokenType.isLiteralTerminal(currentToken.getTokenType())) {
            actualParameters();
            actualParameters = (ActualParameterNode) currentNode;
        }
        accept(TokenType.RPAREN);
        currentNode = new FunctionCall(token, actualParameters);
    }

    void type() {
        Token token = currentToken;
        boolean isArray = false;
        if (TokenType.isPrimitiveType(currentToken.getTokenType())) {
            accept(currentToken.getTokenType());
            if (currentToken.getTokenType() == TokenType.LSQUARE) {
                isArray = true;
                accept(TokenType.LSQUARE);
                accept(TokenType.RSQUARE);
            }
        } else {
            throw new SyntaxException(""Expected return type. Got "" + currentToken.getTokenType().value, currentToken);
        }
        currentNode = new PrimitiveTypeNode(token, isArray);
    }

    void formalParameters() {
        List<TypedVariableNode> formalParameters = new ArrayList<>();
        type();
        formalParameters.add(new TypedVariableNode(null, (TypeNode) currentNode, new VariableNode(currentToken, null)));
        accept(TokenType.IDENTIFIER);
        while (currentToken.getTokenType() == TokenType.COMMA) {
            accept(TokenType.COMMA);
            type();
            formalParameters.add(new TypedVariableNode(null, (TypeNode) currentNode, new VariableNode(currentToken, null)));
            accept(TokenType.IDENTIFIER);
    }
    currentNode = new FormalParameterNode(null, formalParameters);
}

    void actualParameters() {
        List<AssignableNode> params = new ArrayList<>();
        assignable();
        params.add((AssignableNode) currentNode);
        while(currentToken.getTokenType() == TokenType.COMMA) {
            accept(TokenType.COMMA);
            assignable();
            params.add((AssignableNode) currentNode);
        }
        currentNode = new ActualParameterNode(null, params);
    }

    void variableDefinition() {
        type();
        TypeNode type = (TypeNode)currentNode;
        assignment();
        currentNode = new VariableDefinitionNode(null, type, (AssignmentNode) currentNode);
    }

    void assignment() {
        variable();
        VariableNode variable = (VariableNode) currentNode;
        Token token = currentToken;
        accept(TokenType.BECOMES);
        if (TokenType.isPrimitiveType(currentToken.getTokenType())) {
            arrayInitialization();
        } else if (TokenType.CHAR_LITERAL == currentToken.getTokenType()) {
            characterLiteral();
        } else if (TokenType.STRING_LITERAL == currentToken.getTokenType()) {
            stringLiteral();
        } else {
            expression();
        }
        AssignableNode assignable = (AssignableNode) currentNode;
        currentNode = new AssignmentNode(token, variable, assignable);
    }

    void arrayInitialization() {
        Token token = currentToken;
        ExpressionNode expression = null;
        if (TokenType.isPrimitiveType(currentToken.getTokenType())) {
            accept(currentToken.getTokenType());
            accept(TokenType.LSQUARE);
            expression();
            expression = (ExpressionNode) currentNode;
            accept(TokenType.RSQUARE);
        } else {
            System.out.println(""Expected array initialization. Got "" + currentToken.getTokenType());
        }
        currentNode = new ArrayInitNode(token, expression);
    }

    void block() {
        List<Statement> statements = new ArrayList<>();
        accept(TokenType.LBRACKET);
        while (TokenType.isStatementTerminal(currentToken.getTokenType())) {
            statement();
            statements.add((Statement) currentNode);
        }
        accept(TokenType.RBRACKET);
        currentNode = new BlockNode(null, statements);
    }

    void expression() {
        simpleExpression();
        Token<TokenType> token = currentToken;
        ExpressionNode left = (ExpressionNode) currentNode;
        if (TokenType.isRelationalOperator(currentToken.getTokenType())) {
            ExpressionNode right;
            ExpressionNode relationalOperator = null;
            accept((currentToken.getTokenType()));
            simpleExpression();
            right = (ExpressionNode) currentNode;
            switch (token.getTokenType()) {
                case EQUALS:        relationalOperator = new EqualsNode(token, left, right); break;
                case NOTEQUALS:     relationalOperator = new NotEqualNode(token, left, right); break;
                case GREATER:       relationalOperator = new GreaterNode(token, left, right); break;
                case GREATER_EQ:    relationalOperator = new GreaterOrEqualNode(token, left, right); break;
                case LESS:          relationalOperator = new LessNode(token, left, right); break;
                case LESS_EQ:       relationalOperator = new LessOrEqualNode(token, left, right); break;
            }
            currentNode = relationalOperator;
        }
    }

    void simpleExpression() {
        signedTerm();
        ExpressionNode left = (ExpressionNode) currentNode;
        while (TokenType.isOperatorGroupOne(currentToken.getTokenType())) {
            Token<TokenType> token = currentToken;
           accept((currentToken.getTokenType()));
            signedTerm();
            ExpressionNode right = (ExpressionNode) currentNode;
            ExpressionNode additiveOperator = null;
            switch (token.getTokenType()) {
                case PLUS:  additiveOperator = new AdditionNode(token, left, right); break;
                case MINUS: additiveOperator = new SubtractionNode(token, left, right); break;
                case OR:    additiveOperator = new OrNode(token, left, right); break;
            }
            currentNode = left = additiveOperator;
        }
    }

   void signedTerm() {
        Token<TokenType> token = null;
        if (TokenType.isUnaryOperator(currentToken.getTokenType())) {
            token = currentToken;
            accept((currentToken.getTokenType()));
        }
        term();
        ExpressionNode operand = (ExpressionNode) currentNode;
        if (token != null) {
            switch (token.getTokenType()) {
                case NOT: operand = new NotNode(token, operand); break;
                case MINUS: operand = new MinusNode(token, operand); break;
            }
        }
        currentNode = operand;
    }

    void term() {
        factor();
        ExpressionNode left = (ExpressionNode) currentNode;
        while (TokenType.isOperatorGroupTwo(currentToken.getTokenType())) {
            Token<TokenType> token = currentToken;
            accept((currentToken.getTokenType()));
            factor();
            ExpressionNode right = (ExpressionNode) currentNode;
            ExpressionNode multiplicativeOperator = null;
            switch (token.getTokenType()) {
                case MUL: multiplicativeOperator = new MultiplicationNode(token, left, right); break;
                case DIV: multiplicativeOperator = new DivisionNode(token, left, right); break;
                case MOD: multiplicativeOperator = new ModNode(token, left, right); break;
                case AND: multiplicativeOperator = new AndNode(token, left, right); break;
            }
            currentNode = left = multiplicativeOperator;
        }
    }

    void factor() {
        switch(currentToken.getTokenType()) {
            case IDENTIFIER:    variable();
                                break;
            case NUMBER:        currentNode = new IntegerNode(currentToken);
                                accept(TokenType.NUMBER);
                                break;
            case TRUE:
            case FALSE:         currentNode = new BooleanNode(currentToken);
                                accept((currentToken.getTokenType()));
                                break;
            case LENGTH:        arrayLength();
                                break;
            case LPAREN:        accept(TokenType.LPAREN);
                                expression();
                                accept(TokenType.RPAREN);
                                break;
            case AT:            functionCall();
                                break;
            default:   throw new SyntaxException(""Expected factor. Got "" + currentToken.getTokenType().value, currentToken);
        }
    }

    void variable() {
        Token token = currentToken;
        accept(TokenType.IDENTIFIER);
        ExpressionNode expression = null;
        if (currentToken.getTokenType() == TokenType.LSQUARE) {
            accept(TokenType.LSQUARE);
            simpleExpression();
            expression = (ExpressionNode) currentNode;
            accept(TokenType.RSQUARE);
        }
        currentNode = new VariableNode(token, expression);
    }

    void mainFunction() {
        Token token = currentToken;
        accept(TokenType.IDENTIFIER);
        accept(TokenType.LPAREN);
        accept(TokenType.RPAREN);
        accept(TokenType.ARROW);
        TypeNode typeNode = new VoidTypeNode(currentToken);
        accept(TokenType.VOID);
        block();
        currentNode = new FunctionDefinitionNode(token, null, typeNode, (BlockNode) currentNode);
    }

    void statement() {
        if (TokenType.isCompoundStatementTerminal(currentToken.getTokenType())) {
            compoundStatement();
        } else {
            simpleStatement();
            accept(TokenType.SEMICOLON);
        }
    }

    void simpleStatement() {
        switch(currentToken.getTokenType()) {
            case INT:
            case CHAR:
            case BOOLEAN:       variableDefinition();
                                break;
            case IDENTIFIER:    assignment();
                                break;
            case AT:            functionCall();
                                break;
            case RETURN:        returnStatement();
                                break;
            case PRINT:         printStatement();
                                break;
            case READ:          readStatement();
                                break;
            default: throw new SyntaxException(""Expected simpleStatement. Got "" + currentToken.getTokenType().value, currentToken);
        }
    }

    void compoundStatement() {
        if (currentToken.getTokenType() == TokenType.IF) {
            ifStatement();
        } else {
            whileStatement();
        }
    }
    
    void ifStatement() {
	    Token token = currentToken;
	    accept(TokenType.IF);
	    accept(TokenType.LPAREN);
	    expression();
	    ExpressionNode expressionNode = (ExpressionNode) currentNode;
	    accept(TokenType.RPAREN);
	    block();
	    BlockNode ifStatement = (BlockNode) currentNode;
	    BlockNode elseStatement = null;
	    if (currentToken.getTokenType() == TokenType.ELSE) {
	        accept(TokenType.ELSE);
	        block();
	        elseStatement = (BlockNode) currentNode;
	    }
	    currentNode = new IfStatementNode(token, expressionNode, ifStatement, elseStatement);
	}

	void whileStatement() {
	    Token token = currentToken;
	    accept(TokenType.WHILE);
	    accept(TokenType.LPAREN);
	    expression();
	    ExpressionNode expressionNode = (ExpressionNode) currentNode;
	    accept(TokenType.RPAREN);
	    block();
	    BlockNode blockNode = (BlockNode) currentNode;
	    currentNode = new WhileStatementNode(token, expressionNode, blockNode);
	}
	
	void returnStatement() {
	    Token token = currentToken;
	    accept(TokenType.RETURN);
	    AssignableNode assignable = null;
	    if (TokenType.isLiteralTerminal(currentToken.getTokenType())) {
	        assignable();
	        assignable = (AssignableNode) currentNode;
	    }
	    currentNode = new ReturnStatementNode(token, assignable);
	}
	
	void printStatement() {
	    Token token = currentToken;
	    accept(TokenType.PRINT);
	    accept(TokenType.LPAREN);
	    actualParameters();
	    ActualParameterNode actualParameters = (ActualParameterNode) currentNode;
	    accept(TokenType.RPAREN);
	    currentNode = new PrintStatementNode(token, actualParameters);
	}
	
	void readStatement() {
	    Token token = currentToken;
	    List<VariableNode> variables = new ArrayList<>();
	    accept(TokenType.READ);
	    accept(TokenType.LPAREN);
	    while (currentToken.getTokenType() == TokenType.IDENTIFIER) {
	        variable();
	        variables.add((VariableNode) currentNode);
	    }
	    accept(TokenType.RPAREN);
	    currentNode = new ReadStatementNode(token, variables);
	}
	
	void assignable() {
	    if (TokenType.isFactorTerminal(currentToken.getTokenType())) {
	        expression();
	    } else if (TokenType.isPrimitiveType(currentToken.getTokenType())) {
	        arrayInitialization();
	    } else if (TokenType.CHAR_LITERAL == currentToken.getTokenType()) {
	        characterLiteral();
	    } else {
	        stringLiteral();
	    }
	}
	
	void characterLiteral() {
	    currentNode = new CharacterLiteralNode(currentToken);
	    accept(TokenType.CHAR_LITERAL);
	}
	
	void stringLiteral() {
	    currentNode = new StringLiteralNode(currentToken);
	    accept(TokenType.STRING_LITERAL);
	}
	
	void arrayLength() {
	    Token token = currentToken;
	    accept(TokenType.LENGTH);
	    accept(TokenType.LPAREN);
	    variable();
	    accept(TokenType.RPAREN);
	    currentNode = new ArrayLengthNode(token, (VariableNode) currentNode);
	}
	
	public static void main(String[] args) throws IOException {
	    Lexer<TokenType> lexer = new LexerImpl(new SourceImpl(""resources/Fib.txt""));
	    Parser<TokenType, AST> parser = new ParserImpl(lexer);
	    System.out.println(CompilerTestHelper.getASTasString(parser));
	}
}"
Nu97ek7R,GenericPopupContent,Pro_Unit,C#,Friday 1st of December 2023 02:13:55 AM CDT,"// Example:
// List<Type> items = GetAllSubclasses(typeof(ScriptableObject)).ToList();
// GenericPopupContent<Type>.Show(items, OnScriptableObjectSelected, type => type.Name);
// private void OnScriptableObjectSelected(Type selectedType)
// {
// 	_type = selectedType;
//	Repaint();
// }

using System;
using System.Collections.Generic;
using System.Linq;

using UnityEditor;

using UnityEngine;

namespace Game.EditorWindows
{
	public class GenericPopupContent<T> : PopupWindowContent
	{
		private string _searchFilter = """";
		private readonly List<T> _items;
		private readonly Action<T> _onSelectCallback;
		private readonly Func<T, string> _nameSelector;

		private Vector2 _scrollView;

		private GenericPopupContent(List<T> items, Action<T> onSelect, Func<T, string> nameSelector = default)
		{
			_nameSelector = nameSelector ?? (t => t.ToString());
			_items = items;
			_onSelectCallback = onSelect;
		}

		public static void Show(List<T> items, Action<T> onSelect, Func<T, string> nameSelector = default)
		{
			var content = new GenericPopupContent<T>(items, onSelect, nameSelector);

			PopupWindow.Show(new Rect(Event.current.mousePosition, Vector2.zero), content);
		}

		public override void OnGUI(Rect rect)
		{
			EditorGUILayout.Space();
			_searchFilter = EditorGUILayout.TextField(_searchFilter, (GUIStyle)""SearchTextField"");
			EditorGUILayout.Space();

			_scrollView = EditorGUILayout.BeginScrollView(_scrollView);

			IEnumerable<T> query = from item in _items
				let itemName = _nameSelector(item)
				where Contains(itemName)
				where GUILayout.Button(itemName)
				select item;

			foreach(T item in query)
			{
				_onSelectCallback?.Invoke(item);
				editorWindow.Close();
			}

			EditorGUILayout.EndScrollView();
		}

		private bool Contains(string itemName) => itemName.ToLower().Contains(_searchFilter.ToLower());
	}
}"
GcLYP9Dx,soft_rend.hpp,Kitomas,C++,Friday 1st of December 2023 02:13:32 AM CDT,"#ifndef _UTILS_SOFT_REND_HPP
#define _UTILS_SOFT_REND_HPP


#include ""fx16_8.hpp""

#include <vector>
#include <string>




#define UNKNOWN_COLOR (0x7F000000)
// = SDL_PIXELFORMAT_RGB888
union soft_color {
  Uint32 v;
  struct {
    Uint8 b;
    Uint8 g;
    Uint8 r;
    Uint8 _;
  };

  soft_color() : v(0) {}
  soft_color(Uint32 _v) : v(_v) {}
};


struct soft_tri {
  fx_vec3     norm;
  fx_vec3      mid;
  Uint32         a;
  Uint32         b;
  Uint32         c;
  soft_color color;

  soft_tri(){}
  soft_tri(Uint32 _a, Uint32 _b, Uint32 _c) : a(_a), b(_b), c(_c), color(0) {}
};



class soft_rend {
  bool _valid = false;

  SDL_Window*   _window = nullptr;
  SDL_Surface* _winsurf = nullptr;
  SDL_Surface*  _target = nullptr;

  SDL_Point _row_start[1080]; //includes scanline, and starting x
  SDL_Point _row_end[1080]; //only includes ending x (.y is unused)
  int _row_len = 0; //number of scanlines in draw queue

  //used for a simple form of screenspace occlusion culling
  int  _edge_start[1080];
  int  _edge_end[1080];
  bool _edge_filled[1080];
  bool _edges_completely_filled;

  SDL_Point _windowSize  = {-1,-1};
  SDL_Point _logicalSize = {-1,-1};

  Uint32      _windowID = 0;
  Uint32   _windowFlags = 0;
  int   _fullscreenMode = 0;
  int         _numLocks = 0;
  soft_color _drawColor = { .v = 0xff000000 };


  void _freeWindowSafely(){
    if(_window != nullptr){
      SDL_DestroyWindow(_window); //will free _winsurf automagically~
      _window = nullptr;
    }
  }

  void _freeTargetSafely(){
    if(_target != nullptr){
      SDL_FreeSurface(_target);
      _target = nullptr;
    }
  }

  void _interpolateTriangle(const soft_tri& tri, const std::vector<fx_vec3>& verts);


public:
  bool isValid(){ return _valid; }

  soft_rend(){}
  soft_rend(SDL_Point windowSize,
            Uint32 windowFlags = 0,
            SDL_Point logicalSize = {256,144});

  ~soft_rend(){
    _freeTargetSafely();
    _freeWindowSafely();
  }


  SDL_Window* getWindow(){ return _window; }
  SDL_Surface* getTarget(){ return _target; }

  SDL_Point getWindowSize(){ return _windowSize; }
  SDL_Point getLogicalSize(){ return _logicalSize; }
  SDL_Point getFullscreenSize();

  Uint32 getWindowID(){ return _windowID; }
  Uint32 getWindowFlags(){ return _windowFlags; }
  int getFullscreenMode(){ return _fullscreenMode; }


  void setWindowPosition(SDL_Point newPos);
  void setTitle(const std::string& newTitle);
  void setFullscreenMode(int mode); //0,1,2 = windowed, fullscreen, windowed borderless
  void setSize(SDL_Point windowSize = {-1,-1}, SDL_Point logicalSize = {-1,-1});
  void setLock(bool lockState);
  void setDrawColor(soft_color newColor={.v = 0}){ _drawColor = newColor; }


  void present();
  void clear(soft_color fillColor = { .v = UNKNOWN_COLOR });


  void drawTriangle(const soft_tri& tri, const std::vector<fx_vec3>& verts);
  void drawTriangles(const std::vector<soft_tri>& tris, const std::vector<fx_vec3>& verts);
};




#endif /* _UTILS_SOFT_REND_HPP */
"
1zK16X42,fx16_8.hpp,Kitomas,C++,Friday 1st of December 2023 02:12:31 AM CDT,"#ifndef _UTILS_FX16_8_HPP
#define _UTILS_FX16_8_HPP


#include <stdexcept>

#include <SDL2/SDL.h>




struct fx16_8; //forward declaration

extern const fx16_8 fx_epsilon; // = 1/256
extern const fx16_8 fx_1third;  // = 1/3
extern const fx16_8 fx_2thirds; // = 2/3
extern const fx16_8 fx_half;    // = 1/2

extern const fx16_8 fx_sqrt2; // = sqrt(2)

extern const fx16_8 fx_invpi; // = 1/pi
extern const fx16_8 fx_pi4;   // = pi/4
extern const fx16_8 fx_pi2;   // = pi/2
extern const fx16_8 fx_pi;    // = pi
extern const fx16_8 fx_2pi;   // = pi*2

extern const fx16_8 fx_pi_180;    // = pi/180
extern const fx16_8 fx_180_pi;    // = 180/pi
extern const fx16_8 fx_invpi_180; // = 1/(pi/180)
extern const fx16_8 fx_inv180_pi; // = 1/(180/pi)

extern const Sint16 _fx16_8_sin_table[1608]; //lookup table for sin, cos, tan





#define _FX_F32(_n) ( (int)(((_n)*256.0f)+0.5f) )
#define _FX_F64(_n) ( (int)(((_n)*256.0)+0.5) )

struct fx16_8 { //32-bit fixed point; 16-bits of integer, 8-bits of fraction
  Sint32 v = 0; //(highest 8-bits used for headroom between operations)

  int    i32() const { return v>>8;           }
  float  f32() const { return (float)v/256;   }
  double f64() const { return (double)v/256;  }


  fx16_8(){}
  fx16_8(const int&    n){ v = n<<8;       }
  fx16_8(const float&  n){ v = _FX_F32(n); }
  fx16_8(const double& n){ v = _FX_F64(n); }
  fx16_8(const fx16_8& n){ v = n.v;        }

  fx16_8& operator++(){ v += 256; return *this; }
  fx16_8& operator--(){ v -= 256; return *this; }

  fx16_8& operator=(const int&    n){ v = n<<8;       return *this; }
  fx16_8& operator=(const float&  n){ v = _FX_F32(n); return *this; }
  fx16_8& operator=(const double& n){ v = _FX_F64(n); return *this; }
  fx16_8& operator=(const fx16_8& n){ v = n.v;        return *this; }


  fx16_8& operator+=(const int&    n){ v += n<<8;       return *this; }
  fx16_8& operator+=(const float&  n){ v += _FX_F32(n); return *this; }
  fx16_8& operator+=(const double& n){ v += _FX_F64(n); return *this; }
  fx16_8& operator+=(const fx16_8& n){ v += n.v;        return *this; }

  fx16_8& operator-=(const int&    n){ v -= n<<8;       return *this; }
  fx16_8& operator-=(const float&  n){ v -= _FX_F32(n); return *this; }
  fx16_8& operator-=(const double& n){ v -= _FX_F64(n); return *this; }
  fx16_8& operator-=(const fx16_8& n){ v -= n.v;        return *this; }

  fx16_8& operator*=(const int&    n){ v = (v*(n<<8))>>8;     return *this; }
  fx16_8& operator*=(const float&  n){ v = (v*_FX_F32(n))>>8; return *this; }
  fx16_8& operator*=(const double& n){ v = (v*_FX_F64(n))>>8; return *this; }
  fx16_8& operator*=(const fx16_8& n){ v = (v*n.v)>>8;        return *this; }

  fx16_8& operator/=(const int&    n){ v = (v<<8)/(n<<8);     return *this; }
  fx16_8& operator/=(const float&  n){ v = (v<<8)/_FX_F32(n); return *this; }
  fx16_8& operator/=(const double& n){ v = (v<<8)/_FX_F64(n); return *this; }
  fx16_8& operator/=(const fx16_8& n){ v = (v<<8)/n.v;        return *this; }

  fx16_8& operator%=(const int&    n){ v = (v<<8)%(n<<8);     return *this; }
  fx16_8& operator%=(const float&  n){ v = (v<<8)%_FX_F32(n); return *this; }
  fx16_8& operator%=(const double& n){ v = (v<<8)%_FX_F64(n); return *this; }
  fx16_8& operator%=(const fx16_8& n){ v = (v<<8)%n.v;        return *this; }

  fx16_8& operator<<=(const int& n){ v <<= n; return *this; }
  fx16_8& operator>>=(const int& n){ v >>= n; return *this; }


  fx16_8 operator+(const int&    n) const { fx16_8 o; o.v = v+(n<<8);     return o; }
  fx16_8 operator+(const float&  n) const { fx16_8 o; o.v = v+_FX_F32(n); return o; }
  fx16_8 operator+(const double& n) const { fx16_8 o; o.v = v+_FX_F64(n); return o; }
  fx16_8 operator+(const fx16_8& n) const { fx16_8 o; o.v = v+n.v;        return o; }

  fx16_8 operator-(const int&    n) const { fx16_8 o; o.v = v-(n<<8);     return o; }
  fx16_8 operator-(const float&  n) const { fx16_8 o; o.v = v-_FX_F32(n); return o; }
  fx16_8 operator-(const double& n) const { fx16_8 o; o.v = v-_FX_F64(n); return o; }
  fx16_8 operator-(const fx16_8& n) const { fx16_8 o; o.v = v-n.v;        return o; }

  fx16_8 operator*(const int&    n) const { fx16_8 o; o.v = (v*(n<<8))>>8;     return o; }
  fx16_8 operator*(const float&  n) const { fx16_8 o; o.v = (v*_FX_F32(n))>>8; return o; }
  fx16_8 operator*(const double& n) const { fx16_8 o; o.v = (v*_FX_F64(n))>>8; return o; }
  fx16_8 operator*(const fx16_8& n) const { fx16_8 o; o.v = (v*n.v)>>8;        return o; }

  fx16_8 operator/(const int&    n) const { fx16_8 o; o.v = (v<<8)/(n<<8);     return o; }
  fx16_8 operator/(const float&  n) const { fx16_8 o; o.v = (v<<8)/_FX_F32(n); return o; }
  fx16_8 operator/(const double& n) const { fx16_8 o; o.v = (v<<8)/_FX_F64(n); return o; }
  fx16_8 operator/(const fx16_8& n) const { fx16_8 o; o.v = (v<<8)/n.v;        return o; }

  fx16_8 operator%(const int&    n) const { fx16_8 o; o.v = (v<<8)%(n<<8);     return o; }
  fx16_8 operator%(const float&  n) const { fx16_8 o; o.v = (v<<8)%_FX_F32(n); return o; }
  fx16_8 operator%(const double& n) const { fx16_8 o; o.v = (v<<8)%_FX_F64(n); return o; }
  fx16_8 operator%(const fx16_8& n) const { fx16_8 o; o.v = (v<<8)%n.v;        return o; }

  fx16_8 operator<<(const int& n) const { fx16_8 o; o.v = v<<n; return o; }
  fx16_8 operator>>(const int& n) const { fx16_8 o; o.v = v>>n; return o; }

  fx16_8 operator-() const { fx16_8 o; o.v = -v; return o; }


  bool operator==(const int&    n) const { return v == n<<8;       }
  bool operator==(const float&  n) const { return v == _FX_F32(n); }
  bool operator==(const double& n) const { return v == _FX_F64(n); }
  bool operator==(const fx16_8& n) const { return v == n.v;        }

  bool operator!=(const int&    n) const { return v != n<<8;       }
  bool operator!=(const float&  n) const { return v != _FX_F32(n); }
  bool operator!=(const double& n) const { return v != _FX_F64(n); }
  bool operator!=(const fx16_8& n) const { return v != n.v;        }

  bool operator<(const int&    n) const { return v < n<<8;       }
  bool operator<(const float&  n) const { return v < _FX_F32(n); }
  bool operator<(const double& n) const { return v < _FX_F64(n); }
  bool operator<(const fx16_8& n) const { return v < n.v;        }

  bool operator>(const int&    n) const { return v > n<<8;       }
  bool operator>(const float&  n) const { return v > _FX_F32(n); }
  bool operator>(const double& n) const { return v > _FX_F64(n); }
  bool operator>(const fx16_8& n) const { return v > n.v;        }

  bool operator<=(const int&    n) const { return v <= n<<8;       }
  bool operator<=(const float&  n) const { return v <= _FX_F32(n); }
  bool operator<=(const double& n) const { return v <= _FX_F64(n); }
  bool operator<=(const fx16_8& n) const { return v <= n.v;        }

  bool operator>=(const int&    n) const { return v >= n<<8;       }
  bool operator>=(const float&  n) const { return v >= _FX_F32(n); }
  bool operator>=(const double& n) const { return v >= _FX_F64(n); }
  bool operator>=(const fx16_8& n) const { return v >= n.v;        }


  fx16_8    abs() const { fx16_8 o; o.v = std::abs(v);        return o; }
  fx16_8  trunc() const { fx16_8 o; o.v = v&0xffffff00;       return o; }
  fx16_8  round() const { fx16_8 o; o.v = (v+128)&0xffffff00; return o; }
  int    iround() const { return (v+128)>>8; }

  fx16_8 sin() const {
    fx16_8 o; o.v = _fx16_8_sin_table[std::abs(v)%fx_2pi.v];
    return o;
  }
  fx16_8 cos() const {
    fx16_8 o; o.v = _fx16_8_sin_table[(std::abs(v)+fx_pi2.v)%fx_2pi.v];
    return o;
  }
  fx16_8 tan() const { return sin()/cos(); }


  //i'll come up with a more pure implementation of the following functions later

  fx16_8 asin() const {
    fx16_8 o; o.v = (std::asin((double)v/256)*256 + 0.5);
    return o;
  }

  fx16_8 acos() const {
    fx16_8 o; o.v = (std::acos((double)v/256)*256 + 0.5);
    return o;
  }

  fx16_8 atan() const {
    fx16_8 o; o.v = (std::atan((double)v/256)*256 + 0.5);
    return o;
  }

  fx16_8 sqrt() const {
    if(v < 0) throw std::domain_error(""Cannot compute square root of a negative number"");
    fx16_8 o; o.v = (std::sqrt((double)v/256)*256 + 0.5);
    return o;
  }
};




struct fx_vec2;
struct fx_vec3;



struct fx_vec2 {
  fx16_8 x;
  fx16_8 y;


  fx_vec2 operator+(const fx_vec2& n) const { fx_vec2 o; o.x = x+n.x, o.y = y+n.y; return o; }

  fx_vec2 operator-(const fx_vec2& n) const { fx_vec2 o; o.x = x-n.x, o.y = y-n.y; return o; }


  bool operator==(const fx_vec2& n){ return (x==n.x) && (y==n.y); }


  fx_vec2 trunc() const { fx_vec2 o; o.x = x.trunc(),  o.y = y.trunc(); return o; }
  fx_vec2 round() const { fx_vec2 o; o.x = x.round(),  o.y = y.round(); return o; }
};



struct fx_vec3 {
  fx16_8 x;
  fx16_8 y;
  fx16_8 z;

  fx_vec3() : x(0), y(0), z(0) {}
  fx_vec3(int _x, int _y, int _z) : x(_x), y(_y), z(_z) {}

  void rotateRad(fx16_8 roll, fx16_8 pitch, fx16_8 yaw);
  void rotateDeg(fx16_8 roll, fx16_8 pitch, fx16_8 yaw){
    rotateRad(roll/fx_invpi_180, pitch/fx_invpi_180, yaw/fx_invpi_180);
  }
};



static inline fx16_8 fx_vec2_cross(const fx_vec2& a,
                                   const fx_vec2& b,
                                   const fx_vec2& origin = {0,0})
{
  const fx_vec2 oa = a-origin;
  const fx_vec2 ob = b-origin;
  return (oa.x*ob.y)-(oa.y*ob.x);
}

//static inline fx_vec3 fx_vec2_3(const fx_vec2& v2){ return { .x = v2.x, .y = v2.y, .z = 0 }; }
static inline fx_vec2 fx_vec3_2(const fx_vec3& v3){ fx_vec2 o; o.x=v3.x, o.y=v3.y; return o; }




#endif /* _UTILS_FX16_8_HPP */
"
Gkf0bNK7,soft_rendTri.cpp,Kitomas,C++,Friday 1st of December 2023 02:09:52 AM CDT,"#include <utils/soft_rend.hpp>
//todo: do near and far clipping stuff for soft_rend
//note: don't clear filled edge buffer between calls to drawTriangles()
//note: scanlines of length 1 may or may not need to be trimmed after all
//note: switch iround back to i32 (truncation) if off-by-one errors start to occur
#define toi32 iround


//returns the middle part of x(y) = x0 + ((x1-x0)/(y1-y0)) * (y - y0)
static inline fx16_8 _getInterpConstant(fx_vec2& p0, fx_vec2& p1){
  fx16_8 divisor = p1.y-p0.y;
  if(divisor == 0) divisor = fx_epsilon; //prevents divide-by-zero
  return (p1.x-p0.x)/divisor;
}

#define _INTERP(_y, _p0, _con) ( (_p0).x + (_con) * ((_y)-(_p0.y)) )
#define _INTERP_AC(_y) _INTERP(_y, a, aci)
#define _INTERP_AB(_y) _INTERP(_y, a, abi)
#define _INTERP_BC(_y) _INTERP(_y, b, bci)




void soft_rend::_interpolateTriangle(const soft_tri& tri,
                                     const std::vector<fx_vec3>& verts)
{
  int numRows = _row_len = 0; //initialize number of rows to 0
  SDL_Point logicalSize = _logicalSize; //for screen boundary comparisons

  //z isn't needed here, so convert to vec2
   //(also align to pixel boundaries)
  fx_vec2 a = fx_vec3_2(verts.at(tri.a)).round();
  fx_vec2 b = fx_vec3_2(verts.at(tri.b)).round();
  fx_vec2 c = fx_vec3_2(verts.at(tri.c)).round();

  //sort points vertically, so that a & c are top and bottom respectively
  if(a.y > c.y) std::swap(a,c);
  if(a.y > b.y) std::swap(a,b);
  if(b.y > c.y) std::swap(b,c);

  //return early if triangle's points are completely off-screen horizontally
  if( (a.x < 0  &&  b.x < 0  &&  c.x < 0) ||
      (a.x>=logicalSize.x && b.x>=logicalSize.x && c.x>=logicalSize.x) )
  {
    return;
  }

  //return early if triangle's points are completely off-screen vertically
   //(points are sorted vertically, so only c.y and a.y need to be checked)
  if(c.y < 0  ||  a.y >= logicalSize.y) return;

  //'is point b on the left or right side of line ac (as it appears on-screen)?'
  bool isRightBend = fx_vec2_cross(a,b,c) > 0; //cross as in cross product

  //precalculate interpolation constants
  const fx16_8 aci = _getInterpConstant(a,c);
  const fx16_8 abi = _getInterpConstant(a,b);
  const fx16_8 bci = _getInterpConstant(b,c);


  //interpolate triangle edges
  if(a.y == c.y){ //triangle is a single scanline tall (just a horiz. line!)
    int a_x = a.x.toi32();
    int a_y = a.y.toi32();
    int c_x = c.x.toi32();
    if(!_edge_filled[a_y]){
      _row_start[numRows].x = SDL_min(a_x,c_x);
      _row_start[numRows].y = a_y;
      _row_end  [numRows].x = SDL_max(a_x,c_x);
      numRows = (_row_start[numRows].x < logicalSize.x) &&
                (_row_end  [numRows].x >= 0);
    }


  } else { //triangle is >1 scanline(s) tall
    SDL_Point* row_ac, *row_abc;
    if(isRightBend){ //line ac is edge start
      row_ac  = _row_start;
      row_abc = _row_end;
    } else { //line ac is edge end (so swap start and end)
      row_ac  = _row_end;
      row_abc = _row_start;
    }

    if(b.y > 0){ //(if b.y < 1, that means nothing from a to b would render)
      fx16_8 ab_max = SDL_min(b.y,logicalSize.y);
      for(fx16_8 yi=SDL_max(a.y,0); yi<ab_max; ++yi){
        int yi_i32 = yi.toi32();
        if(_edge_filled[yi_i32]) continue; //if no space is left on current scanline
        _row_start[numRows].y = yi_i32; //_row_start accessed directly for y
        //a -> c,  a -> b
        row_ac[numRows].x = _INTERP_AC(yi).toi32();
        row_abc[numRows].x = _INTERP_AB(yi).toi32();
        if(_row_start[numRows].x >= logicalSize.x) continue; //if start is past screen
        if(_row_end[numRows].x < 0) continue; //if end is before screen
        ++numRows; //only increment numRows if scanline is valid to draw on
      }
    }

    if(b.y < logicalSize.y){ //if b.y >= logicalSize.y, everything from b to c is hidden
      fx16_8 bc_max = SDL_min(c.y+1,logicalSize.y); //c.y+1 so the for-loop includes c.y
      for(fx16_8 yi=SDL_max(b.y,0); yi<bc_max; ++yi){
        int yi_i32 = yi.toi32();
        if(_edge_filled[yi_i32]) continue; //if no space is left on current scanline
        _row_start[numRows].y = yi_i32; //_row_start accessed directly for y
        //a -> c,  b -> c
        row_ac[numRows].x = _INTERP_AC(yi).toi32();
        row_abc[numRows].x   = _INTERP_BC(yi).toi32();
        if(_row_start[numRows].x >= logicalSize.x) continue; //if start is past screen
        if(_row_end[numRows].x < 0) continue; //if end is before screen
        ++numRows; //only increment numRows if scanline is valid to draw on
      }
    }
  }


  //(trimming the south-east edge should prevent overdraw)
   //trim south edge unless c.y is off-screen
  if(c.y < logicalSize.y) numRows = SDL_max(numRows-1, 1);

  //clip triangle width to target screen space, and trim east edge
  for(int row=0; row<numRows; ++row){
    _row_start[row].x = SDL_max(_row_start[row].x,   0);
    _row_end  [row].x = SDL_min(_row_end  [row].x-1, logicalSize.x-1);
  }

  _row_len = numRows;

}




void soft_rend::drawTriangle(const soft_tri& tri,
                             const std::vector<fx_vec3>& verts)
{
  _interpolateTriangle(tri,verts);

  int width   = _logicalSize.x;
  int numRows = _row_len;

  soft_color* pixels = (soft_color*)_target->pixels;
  soft_color drawColor = tri.color;
  if(drawColor.v == UNKNOWN_COLOR) drawColor = _drawColor;

  for(int row=0; row<numRows; ++row){
    if(_row_start[row].y<0) SDL_Log(""y<0"");
    if(_row_start[row].y>=_logicalSize.y) SDL_Log(""y>=w"");

    int y_position = _row_start[row].y*width;
    int start = _row_start[row].x + y_position;
    int end   = _row_end  [row].x + y_position;
    for(int i=start; i<=end; ++i) pixels[i].v = drawColor.v;
  }
}




void soft_rend::drawTriangles(const std::vector<soft_tri>& tris,
                              const std::vector<fx_vec3>& verts)
{
  int width = _logicalSize.x;
  soft_color* pixels = (soft_color*)_target->pixels;


  for(const soft_tri& tri : tris){
    _interpolateTriangle(tri,verts);

    int numRows = _row_len;

    soft_color drawColor = tri.color;
    if(drawColor.v == UNKNOWN_COLOR) drawColor = _drawColor;

    for(int row=0; row<numRows; ++row){
      int y_position = _row_start[row].y*width;
      int start = _row_start[row].x + y_position;
      int end   = _row_end  [row].x + y_position;
      for(int i=start; i<=end; ++i) pixels[i].v = drawColor.v;
    }
  }
}
"
15T8uWhr,soft_rend.cpp,Kitomas,C++,Friday 1st of December 2023 02:07:45 AM CDT,"#include <utils/soft_rend.hpp>




soft_rend::soft_rend(SDL_Point windowSize,
                     Uint32 windowFlags,
                     SDL_Point logicalSize)
{
  if(windowSize.x < 256) throw ""windowSize.x < 256"";
  if(windowSize.y < 144) throw ""windowSize.y < 144"";
  if(windowSize.x > 1920) throw ""windowSize.x > 1920"";
  if(windowSize.y > 1080) throw ""windowSize.y > 1080"";
  if(logicalSize.x<1 || logicalSize.y<1) logicalSize = {256,144};

  _window = SDL_CreateWindow(nullptr,
                             SDL_WINDOWPOS_UNDEFINED,
                             SDL_WINDOWPOS_UNDEFINED,
                             windowSize.x, windowSize.y,
                             windowFlags);

  if(_window == nullptr) throw SDL_GetError();


  _winsurf = SDL_GetWindowSurface(_window);
  if(_winsurf == nullptr){
    _freeWindowSafely();
    throw SDL_GetError();
  }

  if(_winsurf->format->format != SDL_PIXELFORMAT_RGB888){
    _freeWindowSafely();
    throw ""window surface format != SDL_PIXELFORMAT_RGB888"";
  }


  _target = SDL_CreateRGBSurfaceWithFormat(0, logicalSize.x,logicalSize.y, 32,
                                           SDL_PIXELFORMAT_RGB888);
  if(_target == nullptr){
    _freeWindowSafely();
    throw SDL_GetError();
  }


  _windowSize = windowSize;
  _logicalSize = logicalSize;
  _windowFlags = windowFlags;

  _windowID = SDL_GetWindowID(_window);
  if(!_windowID){
    _freeTargetSafely();
    _freeWindowSafely();
    throw SDL_GetError();
  }

  if(windowFlags&SDL_WINDOW_FULLSCREEN){
    _fullscreenMode = 1;
    if(windowFlags&SDL_WINDOW_FULLSCREEN_DESKTOP)
      _fullscreenMode = 2;
  }

  _valid = true;
  clear();
}




SDL_Point soft_rend::getFullscreenSize(){
  if(!_valid) throw ""invalid soft_rend object"";
  SDL_DisplayMode mode = {0};

  if(SDL_GetWindowDisplayMode(_window,&mode)) throw SDL_GetError();

  SDL_Point displaySize = { .x=mode.w, .y=mode.h };
  return displaySize;
}




void soft_rend::setWindowPosition(SDL_Point newPos){
  if(!_valid) throw ""invalid soft_rend object"";
  SDL_SetWindowPosition(_window, newPos.x,newPos.y);
}



void soft_rend::setTitle(const std::string& newTitle){
  if(!_valid) throw ""invalid soft_rend object"";
  SDL_SetWindowTitle(_window, newTitle.c_str());
  setSize(); //just in case
}



void soft_rend::setFullscreenMode(int mode){
  if(!_valid) throw ""invalid soft_rend object"";

  Uint32 flags;
  if(     mode == 0) flags = 0;
  else if(mode == 1) flags = SDL_WINDOW_FULLSCREEN;
  else if(mode == 2) flags = SDL_WINDOW_FULLSCREEN_DESKTOP; //windowed borderless
  else               throw ""invalid mode"";

  if(SDL_SetWindowFullscreen(_window,flags)) throw SDL_GetError();
  _fullscreenMode = mode;

  SDL_GetWindowSize(_window, &_windowSize.x, &_windowSize.y);
  setSize(); //just in case
}



void soft_rend::setSize(SDL_Point windowSize, SDL_Point logicalSize){
  if(!_valid) throw ""invalid soft_rend object"";
  if(windowSize.x<1 || windowSize.y<1) windowSize = _windowSize;
  if(logicalSize.x<1 || logicalSize.y<1) logicalSize = _logicalSize;

  SDL_SetWindowSize(_window, windowSize.x, windowSize.y);
  _winsurf = SDL_GetWindowSurface(_window);

  _freeTargetSafely();
  _target = SDL_CreateRGBSurfaceWithFormat(0,logicalSize.x,logicalSize.y,32,
                                           SDL_PIXELFORMAT_RGB888);
  if(_target == nullptr){
    _freeWindowSafely();
    _valid = false;
    throw SDL_GetError();
  }

  _windowSize = windowSize;
  _logicalSize = logicalSize;
}



void soft_rend::setLock(bool lockState){
  if(!_valid) throw ""invalid soft_rend object"";
  if(_target == nullptr) throw ""target surface = nullptr"";
  if(SDL_MUSTLOCK(_target)){
    if(lockState){
      SDL_LockSurface(_target);
      ++_numLocks;
    } else if(_numLocks > 0){
      SDL_UnlockSurface(_target);
      --_numLocks;
    }
  }
}




void soft_rend::present(){
  if(!_valid) throw ""invalid soft_rend object"";

  if(SDL_BlitScaled(_target,nullptr,_winsurf,nullptr)) throw SDL_GetError();
  if(SDL_UpdateWindowSurface(_window)) throw SDL_GetError();
}



void soft_rend::clear(soft_color fillColor){
  setLock(true);

  size_t width  = _logicalSize.x;
  size_t height = _logicalSize.y;
  size_t length = width * height;
  soft_color* pixels = (soft_color*)_target->pixels;
  if(fillColor.v == UNKNOWN_COLOR) fillColor = _drawColor;

  for(size_t p=0; p<length; ++p) pixels[p].v = fillColor.v;

  _edges_completely_filled = false;
  for(size_t row=0; row<height; ++row){
    _edge_start[row]  = width;
    _edge_end[row]    = -1;
    _edge_filled[row] = false;
  }

  setLock(false);
}
"
N4Tp9Rpe,fx16_8.cpp,Kitomas,C++,Friday 1st of December 2023 02:06:38 AM CDT,"#include <utils/fx16_8.hpp>


const fx16_8 fx_epsilon = 1.0/256; // = 1/256
const fx16_8 fx_1third  = 1.0/3;   // = 1/3
const fx16_8 fx_2thirds = 2.0/3;   // = 2/3
const fx16_8 fx_half    = 1.0/2;   // = 1/2

const fx16_8 fx_sqrt2 = 1.4142135624; // = sqrt(2)

const fx16_8 fx_invpi = 1.0/3.1415926536; // = 1/pi
const fx16_8 fx_pi4 = 0.7853981634; // = pi/4
const fx16_8 fx_pi2 = 1.5707963268; // = pi/2
const fx16_8 fx_pi  = 3.1415926536; // = pi
const fx16_8 fx_2pi = 6.2831853072; // = pi*2

const fx16_8 fx_pi_180 = 3.1415926536/180;   // = pi/180
const fx16_8 fx_180_pi = 180.0/3.1415926536; // = 180/pi
const fx16_8 fx_invpi_180 = 1.0/(3.1415926536/180);   // = 1/(pi/180)
const fx16_8 fx_inv180_pi = 1.0/(180.0/3.1415926536); // = 1/(180/pi)



const Sint16 _fx16_8_sin_table[1608] = { // pi2.v = 1608
   0x00000,  0x00001,  0x00002,  0x00003,  0x00004,  0x00005,  0x00006,  0x00007,
   0x00008,  0x00009,  0x0000A,  0x0000B,  0x0000C,  0x0000D,  0x0000E,  0x0000F,
   0x00010,  0x00011,  0x00012,  0x00013,  0x00014,  0x00015,  0x00016,  0x00017,
   0x00018,  0x00019,  0x0001A,  0x0001B,  0x0001C,  0x0001D,  0x0001E,  0x0001F,
   0x00020,  0x00021,  0x00022,  0x00023,  0x00024,  0x00025,  0x00026,  0x00027,
   0x00028,  0x00029,  0x0002A,  0x0002B,  0x0002C,  0x0002D,  0x0002E,  0x0002F,
   0x00030,  0x00031,  0x00032,  0x00033,  0x00034,  0x00035,  0x00036,  0x00037,
   0x00038,  0x00039,  0x0003A,  0x0003A,  0x0003B,  0x0003C,  0x0003D,  0x0003E,
   0x0003F,  0x00040,  0x00041,  0x00042,  0x00043,  0x00044,  0x00045,  0x00046,
   0x00047,  0x00048,  0x00049,  0x0004A,  0x0004B,  0x0004C,  0x0004D,  0x0004E,
   0x0004F,  0x00050,  0x00051,  0x00052,  0x00053,  0x00053,  0x00054,  0x00055,
   0x00056,  0x00057,  0x00058,  0x00059,  0x0005A,  0x0005B,  0x0005C,  0x0005D,
   0x0005E,  0x0005F,  0x00060,  0x00061,  0x00062,  0x00062,  0x00063,  0x00064,
   0x00065,  0x00066,  0x00067,  0x00068,  0x00069,  0x0006A,  0x0006B,  0x0006C,
   0x0006C,  0x0006D,  0x0006E,  0x0006F,  0x00070,  0x00071,  0x00072,  0x00073,
   0x00074,  0x00075,  0x00075,  0x00076,  0x00077,  0x00078,  0x00079,  0x0007A,
   0x0007B,  0x0007C,  0x0007D,  0x0007D,  0x0007E,  0x0007F,  0x00080,  0x00081,
   0x00082,  0x00083,  0x00083,  0x00084,  0x00085,  0x00086,  0x00087,  0x00088,
   0x00089,  0x00089,  0x0008A,  0x0008B,  0x0008C,  0x0008D,  0x0008E,  0x0008E,
   0x0008F,  0x00090,  0x00091,  0x00092,  0x00093,  0x00093,  0x00094,  0x00095,
   0x00096,  0x00097,  0x00097,  0x00098,  0x00099,  0x0009A,  0x0009B,  0x0009B,
   0x0009C,  0x0009D,  0x0009E,  0x0009F,  0x0009F,  0x000A0,  0x000A1,  0x000A2,
   0x000A3,  0x000A3,  0x000A4,  0x000A5,  0x000A6,  0x000A6,  0x000A7,  0x000A8,
   0x000A9,  0x000A9,  0x000AA,  0x000AB,  0x000AC,  0x000AC,  0x000AD,  0x000AE,
   0x000AF,  0x000AF,  0x000B0,  0x000B1,  0x000B1,  0x000B2,  0x000B3,  0x000B4,
   0x000B4,  0x000B5,  0x000B6,  0x000B6,  0x000B7,  0x000B8,  0x000B9,  0x000B9,
   0x000BA,  0x000BB,  0x000BB,  0x000BC,  0x000BD,  0x000BD,  0x000BE,  0x000BF,
   0x000BF,  0x000C0,  0x000C1,  0x000C1,  0x000C2,  0x000C3,  0x000C3,  0x000C4,
   0x000C5,  0x000C5,  0x000C6,  0x000C6,  0x000C7,  0x000C8,  0x000C8,  0x000C9,
   0x000CA,  0x000CA,  0x000CB,  0x000CB,  0x000CC,  0x000CD,  0x000CD,  0x000CE,
   0x000CE,  0x000CF,  0x000D0,  0x000D0,  0x000D1,  0x000D1,  0x000D2,  0x000D2,
   0x000D3,  0x000D4,  0x000D4,  0x000D5,  0x000D5,  0x000D6,  0x000D6,  0x000D7,
   0x000D7,  0x000D8,  0x000D9,  0x000D9,  0x000DA,  0x000DA,  0x000DB,  0x000DB,
   0x000DC,  0x000DC,  0x000DD,  0x000DD,  0x000DE,  0x000DE,  0x000DF,  0x000DF,
   0x000E0,  0x000E0,  0x000E1,  0x000E1,  0x000E2,  0x000E2,  0x000E3,  0x000E3,
   0x000E3,  0x000E4,  0x000E4,  0x000E5,  0x000E5,  0x000E6,  0x000E6,  0x000E7,
   0x000E7,  0x000E7,  0x000E8,  0x000E8,  0x000E9,  0x000E9,  0x000EA,  0x000EA,
   0x000EA,  0x000EB,  0x000EB,  0x000EC,  0x000EC,  0x000EC,  0x000ED,  0x000ED,
   0x000ED,  0x000EE,  0x000EE,  0x000EF,  0x000EF,  0x000EF,  0x000F0,  0x000F0,
   0x000F0,  0x000F1,  0x000F1,  0x000F1,  0x000F2,  0x000F2,  0x000F2,  0x000F3,
   0x000F3,  0x000F3,  0x000F4,  0x000F4,  0x000F4,  0x000F4,  0x000F5,  0x000F5,
   0x000F5,  0x000F6,  0x000F6,  0x000F6,  0x000F6,  0x000F7,  0x000F7,  0x000F7,
   0x000F8,  0x000F8,  0x000F8,  0x000F8,  0x000F9,  0x000F9,  0x000F9,  0x000F9,
   0x000F9,  0x000FA,  0x000FA,  0x000FA,  0x000FA,  0x000FB,  0x000FB,  0x000FB,
   0x000FB,  0x000FB,  0x000FC,  0x000FC,  0x000FC,  0x000FC,  0x000FC,  0x000FC,
   0x000FD,  0x000FD,  0x000FD,  0x000FD,  0x000FD,  0x000FD,  0x000FD,  0x000FE,
   0x000FE,  0x000FE,  0x000FE,  0x000FE,  0x000FE,  0x000FE,  0x000FE,  0x000FF,
   0x000FF,  0x000FF,  0x000FF,  0x000FF,  0x000FF,  0x000FF,  0x000FF,  0x000FF,
   0x000FF,  0x000FF,  0x000FF,  0x00100,  0x00100,  0x00100,  0x00100,  0x00100,
   0x00100,  0x00100,  0x00100,  0x00100,  0x00100,  0x00100,  0x00100,  0x00100,
   0x00100,  0x00100,  0x00100,  0x00100,  0x00100,  0x00100,  0x00100,  0x00100,
   0x00100,  0x00100,  0x00100,  0x00100,  0x00100,  0x00100,  0x00100,  0x00100,
   0x00100,  0x00100,  0x000FF,  0x000FF,  0x000FF,  0x000FF,  0x000FF,  0x000FF,
   0x000FF,  0x000FF,  0x000FF,  0x000FF,  0x000FF,  0x000FF,  0x000FE,  0x000FE,
   0x000FE,  0x000FE,  0x000FE,  0x000FE,  0x000FE,  0x000FE,  0x000FD,  0x000FD,
   0x000FD,  0x000FD,  0x000FD,  0x000FD,  0x000FD,  0x000FC,  0x000FC,  0x000FC,
   0x000FC,  0x000FC,  0x000FC,  0x000FB,  0x000FB,  0x000FB,  0x000FB,  0x000FB,
   0x000FA,  0x000FA,  0x000FA,  0x000FA,  0x000F9,  0x000F9,  0x000F9,  0x000F9,
   0x000F9,  0x000F8,  0x000F8,  0x000F8,  0x000F8,  0x000F7,  0x000F7,  0x000F7,
   0x000F6,  0x000F6,  0x000F6,  0x000F6,  0x000F5,  0x000F5,  0x000F5,  0x000F4,
   0x000F4,  0x000F4,  0x000F4,  0x000F3,  0x000F3,  0x000F3,  0x000F2,  0x000F2,
   0x000F2,  0x000F1,  0x000F1,  0x000F1,  0x000F0,  0x000F0,  0x000F0,  0x000EF,
   0x000EF,  0x000EF,  0x000EE,  0x000EE,  0x000ED,  0x000ED,  0x000ED,  0x000EC,
   0x000EC,  0x000EC,  0x000EB,  0x000EB,  0x000EA,  0x000EA,  0x000EA,  0x000E9,
   0x000E9,  0x000E8,  0x000E8,  0x000E7,  0x000E7,  0x000E7,  0x000E6,  0x000E6,
   0x000E5,  0x000E5,  0x000E4,  0x000E4,  0x000E3,  0x000E3,  0x000E3,  0x000E2,
   0x000E2,  0x000E1,  0x000E1,  0x000E0,  0x000E0,  0x000DF,  0x000DF,  0x000DE,
   0x000DE,  0x000DD,  0x000DD,  0x000DC,  0x000DC,  0x000DB,  0x000DB,  0x000DA,
   0x000DA,  0x000D9,  0x000D9,  0x000D8,  0x000D7,  0x000D7,  0x000D6,  0x000D6,
   0x000D5,  0x000D5,  0x000D4,  0x000D4,  0x000D3,  0x000D2,  0x000D2,  0x000D1,
   0x000D1,  0x000D0,  0x000D0,  0x000CF,  0x000CE,  0x000CE,  0x000CD,  0x000CD,
   0x000CC,  0x000CB,  0x000CB,  0x000CA,  0x000CA,  0x000C9,  0x000C8,  0x000C8,
   0x000C7,  0x000C6,  0x000C6,  0x000C5,  0x000C5,  0x000C4,  0x000C3,  0x000C3,
   0x000C2,  0x000C1,  0x000C1,  0x000C0,  0x000BF,  0x000BF,  0x000BE,  0x000BD,
   0x000BD,  0x000BC,  0x000BB,  0x000BB,  0x000BA,  0x000B9,  0x000B9,  0x000B8,
   0x000B7,  0x000B6,  0x000B6,  0x000B5,  0x000B4,  0x000B4,  0x000B3,  0x000B2,
   0x000B1,  0x000B1,  0x000B0,  0x000AF,  0x000AF,  0x000AE,  0x000AD,  0x000AC,
   0x000AC,  0x000AB,  0x000AA,  0x000A9,  0x000A9,  0x000A8,  0x000A7,  0x000A6,
   0x000A6,  0x000A5,  0x000A4,  0x000A3,  0x000A3,  0x000A2,  0x000A1,  0x000A0,
   0x0009F,  0x0009F,  0x0009E,  0x0009D,  0x0009C,  0x0009B,  0x0009B,  0x0009A,
   0x00099,  0x00098,  0x00097,  0x00097,  0x00096,  0x00095,  0x00094,  0x00093,
   0x00093,  0x00092,  0x00091,  0x00090,  0x0008F,  0x0008E,  0x0008E,  0x0008D,
   0x0008C,  0x0008B,  0x0008A,  0x00089,  0x00089,  0x00088,  0x00087,  0x00086,
   0x00085,  0x00084,  0x00083,  0x00083,  0x00082,  0x00081,  0x00080,  0x0007F,
   0x0007E,  0x0007D,  0x0007D,  0x0007C,  0x0007B,  0x0007A,  0x00079,  0x00078,
   0x00077,  0x00076,  0x00075,  0x00075,  0x00074,  0x00073,  0x00072,  0x00071,
   0x00070,  0x0006F,  0x0006E,  0x0006D,  0x0006C,  0x0006C,  0x0006B,  0x0006A,
   0x00069,  0x00068,  0x00067,  0x00066,  0x00065,  0x00064,  0x00063,  0x00062,
   0x00062,  0x00061,  0x00060,  0x0005F,  0x0005E,  0x0005D,  0x0005C,  0x0005B,
   0x0005A,  0x00059,  0x00058,  0x00057,  0x00056,  0x00055,  0x00054,  0x00053,
   0x00053,  0x00052,  0x00051,  0x00050,  0x0004F,  0x0004E,  0x0004D,  0x0004C,
   0x0004B,  0x0004A,  0x00049,  0x00048,  0x00047,  0x00046,  0x00045,  0x00044,
   0x00043,  0x00042,  0x00041,  0x00040,  0x0003F,  0x0003E,  0x0003D,  0x0003C,
   0x0003B,  0x0003A,  0x0003A,  0x00039,  0x00038,  0x00037,  0x00036,  0x00035,
   0x00034,  0x00033,  0x00032,  0x00031,  0x00030,  0x0002F,  0x0002E,  0x0002D,
   0x0002C,  0x0002B,  0x0002A,  0x00029,  0x00028,  0x00027,  0x00026,  0x00025,
   0x00024,  0x00023,  0x00022,  0x00021,  0x00020,  0x0001F,  0x0001E,  0x0001D,
   0x0001C,  0x0001B,  0x0001A,  0x00019,  0x00018,  0x00017,  0x00016,  0x00015,
   0x00014,  0x00013,  0x00012,  0x00011,  0x00010,  0x0000F,  0x0000E,  0x0000D,
   0x0000C,  0x0000B,  0x0000A,  0x00009,  0x00008,  0x00007,  0x00006,  0x00005,
   0x00004,  0x00003,  0x00002,  0x00001,  0x00000, -0x00001, -0x00002, -0x00003,
  -0x00004, -0x00005, -0x00006, -0x00007, -0x00008, -0x00009, -0x0000A, -0x0000B,
  -0x0000C, -0x0000D, -0x0000E, -0x0000F, -0x00010, -0x00011, -0x00012, -0x00013,
  -0x00014, -0x00015, -0x00016, -0x00017, -0x00018, -0x00019, -0x0001A, -0x0001B,
  -0x0001C, -0x0001D, -0x0001E, -0x0001F, -0x00020, -0x00021, -0x00022, -0x00023,
  -0x00024, -0x00025, -0x00026, -0x00027, -0x00028, -0x00029, -0x0002A, -0x0002B,
  -0x0002C, -0x0002D, -0x0002E, -0x0002F, -0x00030, -0x00031, -0x00032, -0x00033,
  -0x00034, -0x00035, -0x00036, -0x00037, -0x00038, -0x00039, -0x0003A, -0x0003A,
  -0x0003B, -0x0003C, -0x0003D, -0x0003E, -0x0003F, -0x00040, -0x00041, -0x00042,
  -0x00043, -0x00044, -0x00045, -0x00046, -0x00047, -0x00048, -0x00049, -0x0004A,
  -0x0004B, -0x0004C, -0x0004D, -0x0004E, -0x0004F, -0x00050, -0x00051, -0x00052,
  -0x00053, -0x00053, -0x00054, -0x00055, -0x00056, -0x00057, -0x00058, -0x00059,
  -0x0005A, -0x0005B, -0x0005C, -0x0005D, -0x0005E, -0x0005F, -0x00060, -0x00061,
  -0x00062, -0x00062, -0x00063, -0x00064, -0x00065, -0x00066, -0x00067, -0x00068,
  -0x00069, -0x0006A, -0x0006B, -0x0006C, -0x0006C, -0x0006D, -0x0006E, -0x0006F,
  -0x00070, -0x00071, -0x00072, -0x00073, -0x00074, -0x00075, -0x00075, -0x00076,
  -0x00077, -0x00078, -0x00079, -0x0007A, -0x0007B, -0x0007C, -0x0007D, -0x0007D,
  -0x0007E, -0x0007F, -0x00080, -0x00081, -0x00082, -0x00083, -0x00083, -0x00084,
  -0x00085, -0x00086, -0x00087, -0x00088, -0x00089, -0x00089, -0x0008A, -0x0008B,
  -0x0008C, -0x0008D, -0x0008E, -0x0008E, -0x0008F, -0x00090, -0x00091, -0x00092,
  -0x00093, -0x00093, -0x00094, -0x00095, -0x00096, -0x00097, -0x00097, -0x00098,
  -0x00099, -0x0009A, -0x0009B, -0x0009B, -0x0009C, -0x0009D, -0x0009E, -0x0009F,
  -0x0009F, -0x000A0, -0x000A1, -0x000A2, -0x000A3, -0x000A3, -0x000A4, -0x000A5,
  -0x000A6, -0x000A6, -0x000A7, -0x000A8, -0x000A9, -0x000A9, -0x000AA, -0x000AB,
  -0x000AC, -0x000AC, -0x000AD, -0x000AE, -0x000AF, -0x000AF, -0x000B0, -0x000B1,
  -0x000B1, -0x000B2, -0x000B3, -0x000B4, -0x000B4, -0x000B5, -0x000B6, -0x000B6,
  -0x000B7, -0x000B8, -0x000B9, -0x000B9, -0x000BA, -0x000BB, -0x000BB, -0x000BC,
  -0x000BD, -0x000BD, -0x000BE, -0x000BF, -0x000BF, -0x000C0, -0x000C1, -0x000C1,
  -0x000C2, -0x000C3, -0x000C3, -0x000C4, -0x000C5, -0x000C5, -0x000C6, -0x000C6,
  -0x000C7, -0x000C8, -0x000C8, -0x000C9, -0x000CA, -0x000CA, -0x000CB, -0x000CB,
  -0x000CC, -0x000CD, -0x000CD, -0x000CE, -0x000CE, -0x000CF, -0x000D0, -0x000D0,
  -0x000D1, -0x000D1, -0x000D2, -0x000D2, -0x000D3, -0x000D4, -0x000D4, -0x000D5,
  -0x000D5, -0x000D6, -0x000D6, -0x000D7, -0x000D7, -0x000D8, -0x000D9, -0x000D9,
  -0x000DA, -0x000DA, -0x000DB, -0x000DB, -0x000DC, -0x000DC, -0x000DD, -0x000DD,
  -0x000DE, -0x000DE, -0x000DF, -0x000DF, -0x000E0, -0x000E0, -0x000E1, -0x000E1,
  -0x000E2, -0x000E2, -0x000E3, -0x000E3, -0x000E3, -0x000E4, -0x000E4, -0x000E5,
  -0x000E5, -0x000E6, -0x000E6, -0x000E7, -0x000E7, -0x000E7, -0x000E8, -0x000E8,
  -0x000E9, -0x000E9, -0x000EA, -0x000EA, -0x000EA, -0x000EB, -0x000EB, -0x000EC,
  -0x000EC, -0x000EC, -0x000ED, -0x000ED, -0x000ED, -0x000EE, -0x000EE, -0x000EF,
  -0x000EF, -0x000EF, -0x000F0, -0x000F0, -0x000F0, -0x000F1, -0x000F1, -0x000F1,
  -0x000F2, -0x000F2, -0x000F2, -0x000F3, -0x000F3, -0x000F3, -0x000F4, -0x000F4,
  -0x000F4, -0x000F4, -0x000F5, -0x000F5, -0x000F5, -0x000F6, -0x000F6, -0x000F6,
  -0x000F6, -0x000F7, -0x000F7, -0x000F7, -0x000F8, -0x000F8, -0x000F8, -0x000F8,
  -0x000F9, -0x000F9, -0x000F9, -0x000F9, -0x000F9, -0x000FA, -0x000FA, -0x000FA,
  -0x000FA, -0x000FB, -0x000FB, -0x000FB, -0x000FB, -0x000FB, -0x000FC, -0x000FC,
  -0x000FC, -0x000FC, -0x000FC, -0x000FC, -0x000FD, -0x000FD, -0x000FD, -0x000FD,
  -0x000FD, -0x000FD, -0x000FD, -0x000FE, -0x000FE, -0x000FE, -0x000FE, -0x000FE,
  -0x000FE, -0x000FE, -0x000FE, -0x000FF, -0x000FF, -0x000FF, -0x000FF, -0x000FF,
  -0x000FF, -0x000FF, -0x000FF, -0x000FF, -0x000FF, -0x000FF, -0x000FF, -0x00100,
  -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x00100,
  -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x00100,
  -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x00100,
  -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x00100, -0x000FF, -0x000FF,
  -0x000FF, -0x000FF, -0x000FF, -0x000FF, -0x000FF, -0x000FF, -0x000FF, -0x000FF,
  -0x000FF, -0x000FF, -0x000FE, -0x000FE, -0x000FE, -0x000FE, -0x000FE, -0x000FE,
  -0x000FE, -0x000FE, -0x000FD, -0x000FD, -0x000FD, -0x000FD, -0x000FD, -0x000FD,
  -0x000FD, -0x000FC, -0x000FC, -0x000FC, -0x000FC, -0x000FC, -0x000FC, -0x000FB,
  -0x000FB, -0x000FB, -0x000FB, -0x000FB, -0x000FA, -0x000FA, -0x000FA, -0x000FA,
  -0x000F9, -0x000F9, -0x000F9, -0x000F9, -0x000F9, -0x000F8, -0x000F8, -0x000F8,
  -0x000F8, -0x000F7, -0x000F7, -0x000F7, -0x000F6, -0x000F6, -0x000F6, -0x000F6,
  -0x000F5, -0x000F5, -0x000F5, -0x000F4, -0x000F4, -0x000F4, -0x000F4, -0x000F3,
  -0x000F3, -0x000F3, -0x000F2, -0x000F2, -0x000F2, -0x000F1, -0x000F1, -0x000F1,
  -0x000F0, -0x000F0, -0x000F0, -0x000EF, -0x000EF, -0x000EF, -0x000EE, -0x000EE,
  -0x000ED, -0x000ED, -0x000ED, -0x000EC, -0x000EC, -0x000EC, -0x000EB, -0x000EB,
  -0x000EA, -0x000EA, -0x000EA, -0x000E9, -0x000E9, -0x000E8, -0x000E8, -0x000E7,
  -0x000E7, -0x000E7, -0x000E6, -0x000E6, -0x000E5, -0x000E5, -0x000E4, -0x000E4,
  -0x000E3, -0x000E3, -0x000E3, -0x000E2, -0x000E2, -0x000E1, -0x000E1, -0x000E0,
  -0x000E0, -0x000DF, -0x000DF, -0x000DE, -0x000DE, -0x000DD, -0x000DD, -0x000DC,
  -0x000DC, -0x000DB, -0x000DB, -0x000DA, -0x000DA, -0x000D9, -0x000D9, -0x000D8,
  -0x000D7, -0x000D7, -0x000D6, -0x000D6, -0x000D5, -0x000D5, -0x000D4, -0x000D4,
  -0x000D3, -0x000D2, -0x000D2, -0x000D1, -0x000D1, -0x000D0, -0x000D0, -0x000CF,
  -0x000CE, -0x000CE, -0x000CD, -0x000CD, -0x000CC, -0x000CB, -0x000CB, -0x000CA,
  -0x000CA, -0x000C9, -0x000C8, -0x000C8, -0x000C7, -0x000C6, -0x000C6, -0x000C5,
  -0x000C5, -0x000C4, -0x000C3, -0x000C3, -0x000C2, -0x000C1, -0x000C1, -0x000C0,
  -0x000BF, -0x000BF, -0x000BE, -0x000BD, -0x000BD, -0x000BC, -0x000BB, -0x000BB,
  -0x000BA, -0x000B9, -0x000B9, -0x000B8, -0x000B7, -0x000B6, -0x000B6, -0x000B5,
  -0x000B4, -0x000B4, -0x000B3, -0x000B2, -0x000B1, -0x000B1, -0x000B0, -0x000AF,
  -0x000AF, -0x000AE, -0x000AD, -0x000AC, -0x000AC, -0x000AB, -0x000AA, -0x000A9,
  -0x000A9, -0x000A8, -0x000A7, -0x000A6, -0x000A6, -0x000A5, -0x000A4, -0x000A3,
  -0x000A3, -0x000A2, -0x000A1, -0x000A0, -0x0009F, -0x0009F, -0x0009E, -0x0009D,
  -0x0009C, -0x0009B, -0x0009B, -0x0009A, -0x00099, -0x00098, -0x00097, -0x00097,
  -0x00096, -0x00095, -0x00094, -0x00093, -0x00093, -0x00092, -0x00091, -0x00090,
  -0x0008F, -0x0008E, -0x0008E, -0x0008D, -0x0008C, -0x0008B, -0x0008A, -0x00089,
  -0x00089, -0x00088, -0x00087, -0x00086, -0x00085, -0x00084, -0x00083, -0x00083,
  -0x00082, -0x00081, -0x00080, -0x0007F, -0x0007E, -0x0007D, -0x0007D, -0x0007C,
  -0x0007B, -0x0007A, -0x00079, -0x00078, -0x00077, -0x00076, -0x00075, -0x00075,
  -0x00074, -0x00073, -0x00072, -0x00071, -0x00070, -0x0006F, -0x0006E, -0x0006D,
  -0x0006C, -0x0006C, -0x0006B, -0x0006A, -0x00069, -0x00068, -0x00067, -0x00066,
  -0x00065, -0x00064, -0x00063, -0x00062, -0x00062, -0x00061, -0x00060, -0x0005F,
  -0x0005E, -0x0005D, -0x0005C, -0x0005B, -0x0005A, -0x00059, -0x00058, -0x00057,
  -0x00056, -0x00055, -0x00054, -0x00053, -0x00053, -0x00052, -0x00051, -0x00050,
  -0x0004F, -0x0004E, -0x0004D, -0x0004C, -0x0004B, -0x0004A, -0x00049, -0x00048,
  -0x00047, -0x00046, -0x00045, -0x00044, -0x00043, -0x00042, -0x00041, -0x00040,
  -0x0003F, -0x0003E, -0x0003D, -0x0003C, -0x0003B, -0x0003A, -0x0003A, -0x00039,
  -0x00038, -0x00037, -0x00036, -0x00035, -0x00034, -0x00033, -0x00032, -0x00031,
  -0x00030, -0x0002F, -0x0002E, -0x0002D, -0x0002C, -0x0002B, -0x0002A, -0x00029,
  -0x00028, -0x00027, -0x00026, -0x00025, -0x00024, -0x00023, -0x00022, -0x00021,
  -0x00020, -0x0001F, -0x0001E, -0x0001D, -0x0001C, -0x0001B, -0x0001A, -0x00019,
  -0x00018, -0x00017, -0x00016, -0x00015, -0x00014, -0x00013, -0x00012, -0x00011,
  -0x00010, -0x0000F, -0x0000E, -0x0000D, -0x0000C, -0x0000B, -0x0000A, -0x00009,
  -0x00008, -0x00007, -0x00006, -0x00005, -0x00004, -0x00003, -0x00002, -0x00001,
};




void fx_vec3::rotateRad(fx16_8 roll, fx16_8 pitch, fx16_8 yaw){
  fx16_8 cosRoll  = roll.cos();
  fx16_8 sinRoll  = roll.sin();
  fx16_8 cosPitch = pitch.cos();
  fx16_8 sinPitch = pitch.sin();
  fx16_8 cosYaw   = yaw.cos();
  fx16_8 sinYaw   = yaw.sin();


  fx16_8 newX =  x * (cosYaw * cosPitch) +
                 y * (cosYaw * sinPitch * sinRoll - sinYaw * cosRoll) +
                 z * (cosYaw * sinPitch * cosRoll + sinYaw * sinRoll);

  fx16_8 newY =  x * (sinYaw * cosPitch) +
                 y * (sinYaw * sinPitch * sinRoll + cosYaw * cosRoll) +
                 z * (sinYaw * sinPitch * cosRoll - cosYaw * sinRoll);

  fx16_8 newZ = -x * sinPitch +
                 y * cosPitch * sinRoll +
                 z * cosPitch * cosRoll;


  x = newX,  y = newY, z = newZ;
}
"
RhXErDfv,Untitled,BorisKotlyar,C#,Friday 1st of December 2023 02:03:37 AM CDT,"    public class MusicController
    {
        private FMOD.Studio.EventInstance _eventInstance;

        public MusicController()
        {
            if (PlayerPrefs.HasKey(""music_enabled""))
                return;

            Utils.Prefs.SetBool(""music_enabled"", true);
        }

        public void PlayMusic(string musicKey)
        {
            StopMusic();
            if (!Utils.Prefs.GetBool(""music_enabled""))
                return;

            _eventInstance = RuntimeManager.CreateInstance(musicKey);
            _eventInstance.start();
        }

        public void StopMusic()
        {
            if (!_eventInstance.Equals(default(FMOD.Studio.EventInstance)))
            {
                _eventInstance.stop(STOP_MODE.ALLOWFADEOUT);
                _eventInstance.release();
            }
        }
    }

// ------------------------------            
        public void Init(Transform parent)
        {
			var window = _uiService.Show<UISettingsWindow>();
            window.MusicToggle.Switch(Utils.Prefs.GetBool(""music_enabled""));
            window.MusicToggle.OnValueChanged.AddListener(on =>
            {
                Utils.Prefs.SetBool(""music_enabled"", on);
                if (on)
                    _musicController.PlayMusic(""event:/Music/MainMusic"");
                else
                    _musicController.StopMusic();
            });

            window.SoundToggle.Switch(Utils.Prefs.GetBool(""sound_enabled""));
            window.SoundToggle.OnValueChanged.AddListener(on => Utils.Prefs.SetBool(""sound_enabled"", on));

            window.CloseClickCommand.Subscribe(_ => Dispose()).AddTo(CompositeDisposable);
        }
"
f7vkRgj8,15.2.15,myloyo,C#,Friday 1st of December 2023 01:48:03 AM CDT,"using System;
using System.IO;
using System.Linq;

namespace myloyorrr
{
    class Program
    {
        struct Depositors
        {
            public string Surname, Name, SecName;
            public int Number, Amount, Year;
            public Depositors(string Surname, string Name, string SecName, int Number, int Amount, int Year)
            {
                this.Name = Name;
                this.Surname = Surname;
                this.SecName = SecName;
                this.Number = Number;
                this.Amount = Amount;
                this.Year = Year;
            }

        }
        static void Main()
        {
            using (StreamReader sr = new StreamReader(""C:/Настя/книит/in.txt""))
            {
                using (StreamWriter sw = new StreamWriter(""C:/Настя/книит/out.txt""))
                {
                    int n = int.Parse(sr.ReadLine());
                    Depositors[] array = new Depositors[n];
                    for (int i = 0; i < n; i++)
                    {
                        string[] text = sr.ReadLine().Split(' ');
                        array[i] = new Depositors(text[0], text[1], text[2], int.Parse(text[3]), int.Parse(text[4]), int.Parse(text[5]));
                    }
                    int year = int.Parse(sr.ReadLine());

                    var depos =
                        from x in array
                        where x.Year == year
                        orderby x.Amount
                        select x;
                    foreach (var x in depos)
                    {
                        
                        sw.WriteLine(""{0} {1} {2}, {3}, {4}, {5}"", x.Surname, x.Name, x.SecName, x.Number, x.Amount, x.Year);
                        

                    }
                }
            }

        }
    }
}
7
Мыльникова Анастасия Сергеевна 8 88888 2023
Уталиев Султан Едильбаевич 17 100000 2021
Стародубцев Иван Денисович 16 777777 2020
Алексеева Ксения Михайловна 13 55555 2023
Ложкова Александра Геннадьевна 9 99999 2023
Шилина Ангелина Артуровна 10 99999 2023
Певнева Валерия Александровна 11 90000 2023
2023"
hrFE0ae4,pa9,amitdutta121,C,Friday 1st of December 2023 01:27:15 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_SONGS 100
#define MAX_PLAYLISTS 10
#define MAX_NAME_LENGTH 50

// Function declarations
void seeLibrary();
void createPlaylist();
void seePlaylist();
void seeShuffledPlaylist();
void seeShuffledLibrary();

// Global variables
char songs[MAX_SONGS][MAX_NAME_LENGTH];
char playlists[MAX_PLAYLISTS][MAX_NAME_LENGTH];
char playlistSongs[MAX_PLAYLISTS][MAX_SONGS][MAX_NAME_LENGTH];
int playlistCount = 0;
int songIndex = 0; 

int main() {
    int choice;

    // Read songs from file
    FILE *file = fopen(""songs.txt"", ""r"");
    if (file == NULL) {
        printf(""Error opening file.\n"");
        return 1;
    }

    int songIndex = 0;
    while (fgets(songs[songIndex], MAX_NAME_LENGTH, file) != NULL) {
        // Remove trailing newline
        songs[songIndex][strcspn(songs[songIndex], ""\n"")] = 0;
        songIndex++;
    }
    fclose(file);

    do {
        // Display menu
        printf(""\n--- Music Player Menu ---\n"");
        printf(""1: See library\n"");
        printf(""2: Create playlist\n"");
        printf(""3: See playlist\n"");
        printf(""4: See shuffled playlist\n"");
        printf(""5: See shuffled library\n"");
        printf(""0: EXIT\n"");
        printf(""Enter your choice: "");
        scanf(""%d"", &choice);

        // Perform actions based on user choice
        switch (choice) {
            case 1:
                seeLibrary();
                break;
            case 2:
                createPlaylist();
                break;
            case 3:
                seePlaylist();
                break;
            case 4:
                seeShuffledPlaylist();
                break;
            case 5:
                seeShuffledLibrary();
                break;
            case 0:
                printf(""Exiting program. Goodbye!\n"");
                break;
            default:
                printf(""Invalid choice. Please try again.\n"");
        }

    } while (choice != 0);

    return 0;
}

void seeLibrary() {
    printf(""\n--- Library ---\n"");
    for (int i = 0; i < MAX_SONGS && songs[i][0] != '\0'; i++) {
        printf(""%d. %s\n"", i + 1, songs[i]);
    }
}

void createPlaylist() {
    if (playlistCount == MAX_PLAYLISTS) {
        printf(""Cannot create more playlists. Maximum limit reached.\n"");
        return;
    }

    printf(""Enter playlist name: "");
    scanf(""%s"", playlists[playlistCount]);

    int songIndex = 0;
    int songChoice;

    do {
        // Display library to choose songs
        seeLibrary();

        // Ask user for song choice
        printf(""Enter song index to add to the playlist (0 to stop): "");
        scanf(""%d"", &songChoice);

        if (songChoice >= 1 && songChoice <= MAX_SONGS) {
            strcpy(playlistSongs[playlistCount][songIndex], songs[songChoice - 1]);
            songIndex++;
        } else if (songChoice != 0) {
            printf(""Invalid song index. Please try again.\n"");
        }

    } while (songChoice != 0);

    playlistCount++;
}

void seePlaylist() {
    printf(""\n--- Playlists ---\n"");
    for (int i = 0; i < playlistCount; i++) {
        printf(""\n%s\n"", playlists[i]);
        for (int j = 0; j < MAX_SONGS && playlistSongs[i][j][0] != '\0'; j++) {
            printf(""%d. %s\n"", j + 1, playlistSongs[i][j]);
        }
    }
}


void seeShuffledPlaylist() {
    printf(""\n--- Shuffled Playlists ---\n"");

    // Seed the random number generator with a constant value for consistent shuffling
    srand(time(NULL));

    for (int playlistIndex = 0; playlistIndex < playlistCount; playlistIndex++) {
        printf(""\n%s\n"", playlists[playlistIndex]);

        int totalSongsInPlaylist = 0;
        int indices[MAX_SONGS];

        // Create an array to store the indices of songs in the current playlist
        for (int i = 0; i < MAX_SONGS && playlistSongs[playlistIndex][i][0] != '\0'; i++) {
            indices[i] = i;
            totalSongsInPlaylist++;
        }

        for (int i = 0; i < totalSongsInPlaylist; i++) {
            int j = rand() % (totalSongsInPlaylist - 1 + 1) + 0;
            printf(""%d , "", j);
            int temp = indices[i];
            indices[i] = indices[j];
            indices[j] = temp;
        }

        for (int i = 0; i < totalSongsInPlaylist; i++) {
            printf(""%d. %s\n"", i + 1, playlistSongs[playlistIndex][indices[i]]);
        }
    }
}

void seeShuffledLibrary() {
    printf(""\n--- Shuffled Library ---\n"");

    // Seed the random number generator with a constant value for consistent shuffling
    srand(time(NULL));
    
    int totalSongs = 0;

    // Create an array to store the indices of songs
    int indices[MAX_SONGS];
    for (int i = 0; i < MAX_SONGS && songs[i][0] != '\0'; i++) {
        indices[i] = i;
        totalSongs++;
    }
    
    
    for (int i = 0; i < totalSongs; i++){
    	int j = rand() % ((totalSongs-1) - 0 + 1)+0;
    	printf(""%d , "",j);
    	int temp = indices[i];
        indices[i] = indices[j];
        indices[j] = temp;
    }
    
    for (int i = 0; i < MAX_SONGS && songs[indices[i]][0] != '\0'; i++) {
        printf(""%d. %s\n"", i + 1, songs[indices[i]]);
    }
    
}"
cTFUYsNQ,Advent of code 2023 day 1,hhoppe,Python,Friday 1st of December 2023 01:20:54 AM CDT,"def day1(s, *, part2=False):
  values = {str(i): i for i in range(10)}
  if part2:
    strings = 'zero one two three four five six seven eight nine'.split()
    values |= {name: index for index, name in enumerate(strings)}
  pattern = f""({'|'.join(values)})""
  total = 0
  for line in s.splitlines():
    str0 = re.search(pattern, line).group(1)
    str1 = re.search(f'.*{pattern}', line).group(1)
    total += values[str0] * 10 + values[str1]
  return total"
QVa941rb,15.1.15,myloyo,C#,Friday 1st of December 2023 12:58:14 AM CDT,"using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace myloyorrr
{
    class Program
    {
        static void Main()
        {
            using (StreamReader sr = new StreamReader(""C:/Настя/книит/in.txt""))
            {
                using (StreamWriter sw = new StreamWriter(""C:/Настя/книит/out.txt""))
                {
                    int[] number = new int[90];
                    for (int i = 0; i < 90; i++)
                    {
                        number[i] = i + 10;
                    }
                    var dubNums =
                        from n in number
                        select n + 1;
                    foreach (var x in dubNums)
                    {
                        sw.WriteLine(x);
                    }
                }
            }

        }
    }
}
"
ifjAg0fd,Tworzenie nowego pola i wypelnianie QGIS,TomaszNycz,Python,Friday 1st of December 2023 12:40:34 AM CDT,"        # Utwórz nowe pole 'klucz_dzialki' w warstwie uzytki_a
        self.uzytki_a.startEditing()
        field_name_a = 'klucz_dzialki'
        field_index_a = self.uzytki_a.fields().indexFromName(field_name_a)

        # Dodaj nowe pole, jeśli nie istnieje
        if field_index_a == -1:
            field_a = QgsField(field_name_a, QVariant.String, ""varchar"",6)
            self.uzytki_a.addAttribute(field_a)

        # Iteruj przez funkcje i ustaw wartości w nowym polu
        for feature in self.uzytki_a.getFeatures():
            parcela = feature['parcel_int_num']
            kontur = feature['shape_nr']

            # Ustaw wartość nowego pola 'klucz_dzialki'
            feature['klucz_dzialki'] = f""{parcela}_{kontur}""

            # Zaktualizuj funkcję
            self.uzytki.updateFeature(feature)

        self.uzytki_a.commitChanges()
        iface.vectorLayerTools().stopEditing(self.uzytki_a,False) "
seQBybqX,Untitled,neunmalelf,Python,Friday 1st of December 2023 12:07:21 AM CDT,"def check_line(line, number_letters):
    for word in number_letters:
        if word in line:
            print(word)

# usage
line = ""one and three""
check_line(line, number_letters)"
88RZDmi6,AoC 2023 day 1,mosredna,JavaScript,Thursday 30th of November 2023 11:46:14 PM CDT,"const fs = require(""fs"")
const performance = require(""perf_hooks"").performance
const eol = require(""os"").EOL

let startTime = performance.now()
let part1 = (part2 = 0)
let input = fs.readFileSync(__dirname + ""/test.txt"", ""utf8"").split(eol)

input.map((item) => {
    part1 += getFirstAndLastNumbers(item)
    part2 += getFirstAndLastNumbers(replaceWordsWithNumbers(item))
})
function getFirstAndLastNumbers(inputString) {
    const numbers = inputString.match(/\d/g)

    const firstNumber = parseInt(numbers[0])
    const lastNumber = parseInt(numbers[numbers.length - 1])
    return parseInt(firstNumber + """" + lastNumber)
}
function replaceWordsWithNumbers(inputString) {
    const wordToNumber = {
        one: ""one1one"",
        two: ""two2two"",
        three: ""three3three"",
        four: ""four4four"",
        five: ""five5five"",
        six: ""six6six"",
        seven: ""seven7seven"",
        eight: ""eight8eight"",
        nine: ""nine9nine""
    }
    for (const num in wordToNumber) {
        inputString = inputString.replaceAll(num, wordToNumber[num])
    }
    return inputString
}
let time = performance.now() - startTime
console.log(`Part 1: ${part1}\nPart 2: ${part2}\nTimer: ${time} ms`)"
3JHFDWDg,sac holiday show v1,chang---,JavaScript,Thursday 30th of November 2023 11:15:34 PM CDT,"// to do :
// add attachment to make emails less ugly
// finish bugcheck
function gen() {

  var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(""Holiday Show Ticket Sales"");


  var dataRange = sheet.getDataRange();
  var data = dataRange.getValues();

  var dest = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(""Complete Sales"");

  for (var i = data.length - 1; i >= 1; i--) { 

    var name = data[i][0];
    var grade = data[i][1];
    var ticketConf = data[i][2];
    var email = data[i][3];
    var ticketNumber = data[i][4];

    if (email && typeof email === 'string' && email.trim() !== '') {

      sendEmail(name, email, ticketNumber);

      sheet.getRange(i + 1, 1, 1, sheet.getLastColumn()).moveTo(dest.getRange(dest.getLastRow() + 1, 1));

      sheet.deleteRow(i + 1);

    }
  }
}

function sendEmail(name, email, ticketNumber) {
  var subject = ""Ticket Confirmation"";
  var message = ""Dear "" + name + "",\n\nYour ticket number "" + ticketNumber + "" has been confirmed.\n\nReminder that the Holiday Show will be on December 22nd in the afternoon. Provide your code on entry to be granted access to the event.\n\nHappy Holidays,\nMGCI SAC"";

  try {

    MailApp.sendEmail({

      to: email.trim(), 
      subject: subject,
      body: message,

    });

    Logger.log(""Email sent to: "" + email);
  } catch (error) {

    Logger.log(""Error sending email: "" + error.toString());

  }
}
"
FsaX2atz,PXWhitelist,aaaaaaaaaaaaaaaaaaae,JSON,Thursday 30th of November 2023 11:14:51 PM CDT,"{
  ""Administrator"": [
    133631212,
    1204438264,
    5005357748,
    73209915,
    86185287,
    103548428,
    4728625701,
    337210318,
	92475165,
	1114993970,
    1543205908,
    237883808,
    126400201,
    850348009,
    2970226820,
    16442712
  ],
  ""Moderator"": [
    97341455,
    57653842,
	544207325,
    133631212,
    783011727,
	553272779,
    156910090,
	121466004
  ],
  ""VIPOnly"": [
    133631212,
    146783079,
	1092279860,
    558013575
  ]
}"
NrryC7gv,AdminSkinWhitelist,aaaaaaaaaaaaaaaaaaae,JSON,Thursday 30th of November 2023 11:11:42 PM CDT,"[
  1668783738,
  1204438264,
  218046716,
  1543205908,
  115596073,
  126400201,
  97341455,
  73209915,
  133631212,
  4728625701,
  225833041,
  237883808,
  850348009,
  57653842,
  103548428,
  337210318,
  1114993970,
  249800819,
  1600038239,
  16442712,
  767118615,
  2970226820,
  92475165
]"
1qQZ2WAd,GlobalWhitelist,aaaaaaaaaaaaaaaaaaae,JSON,Thursday 30th of November 2023 11:11:20 PM CDT,"[1668783738, 1204438264, 57653842, 237883808, 133631212, 73209915, 16442712, 2970226820, 4728625701, 1543205908, 850348009]"
0enV7B1n,StandWhitelist,aaaaaaaaaaaaaaaaaaae,JSON,Thursday 30th of November 2023 11:10:51 PM CDT,"{
  ""Stands"": {
    ""Curse"": [
      133631212,
      126400201,
      3089115061
    ],
    ""CosmicMarioStand"": [
      133631212,
      435213837,
      125844553,
      121513821,
      52815480,
      125844553,
      1668783738,
	  1204438264,
      509771406,
      850348009
    ],
    ""her_R"": [
      ""Ignore Universal Whitelist"",
      133631212,
	  237883808
    ],
    ""KingJack"": [
      ""Ignore Universal Whitelist"",
      133631212,
	  1204438264,
      417302890
    ],
    ""begmoon"": [
      133631212,
      417302890,
      57653842
    ],
    ""GlitchStand"": [
      237883808,
      133631212,
      1204438264,
      126400201,
	  57653842,
      73209915,
      3089115061,
      225833041,
      850348009,
      16442712,
      2970226820
    ],
    ""GoldenExperienceRequiemPrimeStand"": [
      ""Ignore Universal Whitelist"",
      237883808,
      218046716,
      133631212,
      4728625701,
      1668783738,
      126400201,
      850348009,
      1114993970,
      1600038239
    ],
    ""Boombox"": [
      126400201,
      1204438264,
      57653842,
      1668783738,
      133631212,
      850348009,
      225833041,
      2970226820,
      103548428,
      16442712
    ],
    ""dont"": [
      417302890,
      133631212
    ],
    ""NK"": [
	237883808,
	133631212
    ],
    ""Needlem0use"": [
      ""Ignore Universal Whitelist"",
	  1204438264,
      133631212
    ],
    ""BanHammer"": [
      ""Ignore Universal Whitelist"",
      73209915,
      133631212,
      1668783738,
      1204438264,
      16442712,
      2970226820,
      225833041,
      1600038239
    ],
    ""LEO"": [
      ""Ignore Universal Whitelist"",
      1204438264,
      2271993233,
      2312008136,
	  133631212,
      4728625701,
      237883808,
      1668783738,
      126400201,
      73209915,
      218046716,
      1600038239
    ],
    ""ShadowGuardiaStand"": [
      103548428,
      237883808,
      133631212
    ],
    ""SnupzerOni"": [
      237883808,
      1543205908,
	  458687881,
      850348009,
      1114993970,
      337210318,
	  133631212
    ],
    ""him"": [
      ""Ignore Universal Whitelist"",
      73209915,
	  237883808,
      133631212,
      1204438264,
      1668783738,
      16442712,
      2970226820
    ],
    ""Prey"": [
      ""Ignore Universal Whitelist"",
      1668783738,
      1600038239,
	  133631212,
      1204438264,
	  126400201
    ],
    ""Gojo"": [
      ""Ignore Universal Whitelist"",
      103548428,
      2970226820,
	  237883808,
	  337210318,
	  133631212,
	  1543205908,
      16442712,
      57653842,
      1114993970,
      850348009
    ],
    ""13StudioStand"": [
      ""Ignore Universal Whitelist"",
      103548428,
      237883808,
      133631212,
      1668783738,
      16442712,
      2970226820,
      86185287
    ],
    ""DarkPlatinum"": [
      ""Ignore Universal Whitelist"",
      237883808,
	  783011727,
	  850348009,
      1204438264,
      1114993970,
	  1543205908,
	  92475165,
      133631212,
	  1187451921,
      4728625701,
      103548428,
      126400201,
      337210318,
      16442712,
      2970226820
    ],
    ""SuperOni_R"": [
      ""Ignore Universal Whitelist"",
      237883808,
	  458687881,
      103548428,
      133631212,
      1204438264
    ]
  },
  ""BuffedHealth"": [
    90005,
    90006,
    9383005,
    133631212,
    20002,
    8782,
    8781,
    860,
    1003,
    74446233,
    1100111
  ]
}"
7KN28sxN,Menu Iptvs,jaguenk,JSON,Thursday 30th of November 2023 10:59:21 PM CDT,"{
""name"": ""IptVs"",
""author"": ""🅰️🅵1🅲🅸🅾️🅽🅰️🅳🅾️🆂"",
""image"": ""https://giffiles.alphacoders.com/211/211426.gif"",
""url"": ""https://pastebin.com/7KN28sxN"",
""telegram"": ""Lista_AF1CIONADOS"",
""info"":"""",
""groups"":
    [
        {
         ""name"": ""IPTV Latino 01"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://extremeplus.xyz:8080/get.php?username=miarea&password=VfVbMyh38f&type=m3u_plus"",
         ""info"":""500 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Europa 02"",
         ""image"": ""https://i.postimg.cc/Ls8C0MHW/tv-espa-a-new.png"",
         ""url"": ""http://pinkpanther.uk:8080/get.php?username=restreamwellfrank&password=2NhhmrhTDGaGxVyZX9wpKv4twh9EAZqa&type=m3u_plus"",
         ""info"":""150 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 03"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://play.steeltv.org:8080/get.php?username=LAtinoA100&password=Wy894ENVXXhhh56&type=m3u_plus"",
         ""info"":""300 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Europa 04"",
         ""image"": ""https://i.postimg.cc/Ls8C0MHW/tv-espa-a-new.png"",
         ""url"": ""http://pinkpanther.uk:8080/get.php?username=$latinotv$1015&password=$4859430302$&type=m3u_plus"",
         ""info"":""120 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 05"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://31.42.185.216:8000/get.php?username=LIRestream&password=C18FXWEJBF&type=m3u_plus"",
         ""info"":""200 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Europa 06"",
         ""image"": ""https://i.postimg.cc/Ls8C0MHW/tv-espa-a-new.png"",
         ""url"": ""http://relectro.xyz:8080/get.php?username=JoseWeib-TV&password=A5wjQDud0T&type=m3u_plus"",
         ""info"":""500 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 07"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://31.42.185.216:8000/get.php?username=StratusTV&password=3PXZ2K5ECT&type=m3u_plus"",
         ""info"":""100 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Europa 08"",
         ""image"": ""https://i.postimg.cc/Ls8C0MHW/tv-espa-a-new.png"",
         ""url"": ""http://flashprinttv.com:2086/get.php?username=gPAckvByDfYR&password=jXLwp4yFjGHS&type=m3u_plus"",
         ""info"":""100 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 09"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://31.42.185.216:8000/get.php?username=LocalRestreamIntercambio&password=GX3FMT14FH&type=m3u_plus"",
         ""info"":""200 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Europa 10"",
         ""image"": ""https://i.postimg.cc/Ls8C0MHW/tv-espa-a-new.png"",
         ""url"": ""https://raw.githubusercontent.com/yIsus-mEx/AF1CIONADOS/main/tv_channels_plus.m3u"",
         ""info"":""300 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 11"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://31.42.185.216:8000/get.php?username=StratusTV&password=3PXZ2K5ECT&type=m3u_plus"",
         ""info"":""500 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Europa 12"",
         ""image"": ""https://i.postimg.cc/Ls8C0MHW/tv-espa-a-new.png"",
        ""url"": ""http://pinkpanther.uk:8080/get.php?username=restreamwellfrank&password=2NhhmrhTDGaGxVyZX9wpKv4twh9EAZqa&type=m3u_plus"",
         ""info"":""150 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 13"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://xcm.budtv-ultra.com:25461/get.php?username=JW2WBsjv3sgQaDTHs&password=sjqvgRauPbjj&type=m3u_plus"",
         ""info"":""200 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 14"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
       	 ""url"": ""http://zona593ec.online:8080/get.php?username=Jhontv&password=Jhon20231@&type=m3u_plus"",
         ""info"":""100 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 15"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://mytitantv.com:8080/get.php?username=latin_entertainment&password=latin_entertainmentexchan&type=m3u"",
         ""info"":""500 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 16"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://spacetvplay.com:8080/get.php?username=skyperu2021&password=mNv2mbFe7e&type=m3u"",
         ""info"":""250 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 17"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://spacetvplay.com:8080/get.php?username=nubetvgt&password=HYFGE342htd4&type=m3u"",
         ""info"":""400 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 18"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://spacetvplay.com:8080/get.php?username=Granav803&password=S032PEWQQDxm&type=m3u"",
         ""info"":""400 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 19"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://xplatinmedia.com:8080/get.php?username=@JKDpros&password=2jLwS6gtxZ2a&type=m3u_plus"",
         ""info"":""100 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 20"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://xcm.budtv-ultra.com:25461/get.php?username=JW2WBJW2WBOndemand2023&password=d8rQEH2h4E&type=m3u"",
         ""info"": ""100 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 21"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://xcm.budtv-ultra.com:25461/get.php?username=JW2WBsjv3sgQaDTHs&password=sjqvgRauPbjj&type=m3u"",
         ""info"":""150 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 24/7"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://tv.iprotv.live:25461/get.php?username=247lamqnsiondelterror2&password=v60A6OP6Pvd&type=m3u_plus"",
         ""info"":""700 conex"",
         ""import"": false
        },
		{
         ""name"": ""IPTV Latino 24/7"",
         ""image"": ""https://i.postimg.cc/XJ5VhtB0/World-new.png"",
         ""url"": ""http://amepz.xyz:2052/get.php?username=dltbshakt67&password=74PPw2bhhAN3&type=m3u_plus&output=m3u8"",
         ""info"":""100 conex"",
         ""import"": false
        },
		{
         ""name"": ""Pluto TV"",
         ""image"": ""https://i.postimg.cc/d19c10Dk/pluto-tv-new.png"",
         ""url"": ""https://raw.githubusercontent.com/yIsus-mEx/AF1CIONADOS/main/PlutoTV"",
         ""info"":"""",
         ""import"": false
        },
		{
         ""name"": ""TDTChannels"",
         ""image"": ""https://i.postimg.cc/Tw5q5fjS/TDT-new.png"",
         ""url"": ""https://pastebin.com/UWXsWLF9"",
         ""info"":"""",
         ""import"": false
        }
    ]
}"
6UbeGcU3,WORKING SNAKE REAL 1.0,AlphaPenguino,Python,Thursday 30th of November 2023 10:29:05 PM CDT,"import turtle
import time
import random


delay = 0.1
game_Started = False

score = 0
hi_score = 100

wn = turtle.Screen()
wn.title(""The Ultimate Snek Game"")
wn.bgcolor(""Blue"")
wn.setup(width = 600, height = 600)
wn.tracer(0)

head = turtle.Turtle()
head.speed(0)
head.color(""pink"")
head.shape(""triangle"")
head.penup()
head.goto(0,0)
head.direction = ""stop""

segments = []

food = turtle.Turtle()
food.speed(0)
food.shape(""circle"")
food.color(""black"")
food.penup()
food.goto(0,100)

pen_text = turtle.Turtle()
pen_text.speed(0)
pen_text.shape(""square"")
pen_text.color(""white"")
pen_text.clear()
pen_text.penup()
pen_text.hideturtle()
pen_text.goto(0, 260)
pen_text.goto(0, 0)
pen_text.write(""Snake Game Original by Josh Mojica"", align=""center"", font=('Times New Roman', 25, ""bold""))
pen_text.goto(-80, -100)
pen_text.write(""Press space to Start"", align=""center"", font=('Times New Roman', 12, ""bold""))
pen_text.goto(80, -100)
pen_text.write(""Press X to Exit the game"", align=""center"", font=('Times New Roman', 12, ""bold""))
pen_text.goto(-100, -260)
pen_text.write(""Zunder Jacob A. Pacis"", align=""center"", font=('Times New Roman', 12, ""bold""))
moveset = [""w"", ""a"", ""s"", ""d""]

def moveUp():
    if head.direction != ""down"":
        head.direction = ""up""
def moveDown():
    if head.direction != ""up"":
        head.direction = ""down""
def moveRight():
    if head.direction != ""left"":
        head.direction = ""right""
def moveLeft():
    if head.direction != ""right"":
        head.direction = ""left""


def move():
    if head.direction == ""up"":
        head.sety(head.ycor() + 20)
        head.setheading(90)
    if head.direction == ""down"":
        head.sety(head.ycor() - 20)
        head.setheading(270)
    if head.direction == ""left"":
        head.setx(head.xcor() - 20)
        head.setheading(180)
    if head.direction == ""right"":
        head.setx(head.xcor() + 20)
        head.setheading(0)
def closeGame():
    turtle.bye()

def restartGame():
    wn.resetscreen
    pen_text.clear()
    turtle.clear()
    head.goto(0,0)
    food.setx(random.randint(-270, 270))
    food.sety(random.randint(-270, 270))
    pen_text.goto(0, 275)

    score = 0
    pen_text.goto(0, 260)
    pen_text.write(""Press Spacebar to Start"", align=""center"", font=(""Consolas"", 18, ""bold""))
    pen_text.goto(0,-260)
    pen_text.write(""Made by Prince Reinald S. Culaway"", align=""center"", font=(""Consolas"", 18, ""bold""))
    pen_text.goto(0,0)
    pen_text.write(""The Not So Ultimate Snake Game"", align=""center"", font=(""Consolas"", 18, ""bold""))
    head.hideturtle()
    food.hideturtle()

def placeFood():
    food.hideturtle()
    food.setx(random.randint(-270, 270))
    food.sety(random.randint(-270, 270))
    food.showturtle()

def gameOver(finscore,finalscore):
    for segment in segments:
        segment.goto(1000,1000)
    segments.clear()

    pen_text.clear()
    pen_text.goto(0, -100)
    pen_text.write(""Score: {} Hi-Score {}"".format(finscore,finalscore), align=""center"", font=(""Consolas"", 18, ""bold""))
    turtle.hideturtle()
    turtle.clear()
    turtle.goto(0,0)
    turtle.write(""GAME OVER"",align=""center"", font=(""Consolas"", 18, ""bold""))
    turtle.goto(0, -50)
    turtle.write(""Press R to restart"", align=""center"", font=(""Consolas"", 18, ""bold""))
    turtle.goto(0, -150)
    turtle.write(""Press X to close the game"", align=""center"", font=(""Consolas"", 18, ""bold""))

    head.goto(0, -100000)
    head.color(""white"")
    head.direction = ""stop""
    food.goto(0, -1000000)




def startGame():
    global game_Started, delay, score, hi_score
    if game_Started:
        return
    game_Started = True
    food.showturtle()
    head.showturtle()
    score = 0
    pen_text.clear()
    pen_text.goto(0,260)
    pen_text.write(""Score : {} Hi-Score : {}"".format(score,hi_score), align= ""center"", font=(""Consolas"", 18, ""bold""))

    while True:
        wn.update()
        if head.distance(food) < 20:
            score += 5
            placeFood()
            new_segment = turtle.Turtle()
            new_segment.speed(0)
            new_segment.shape(""circle"")
            new_segment.color(""black"")
            new_segment.penup()
            segments.append(new_segment)


            delay -= 0.001

            if score > hi_score:
                hi_score = score
            pen_text.clear()
            pen_text.write(""Score : {} Hi-Score : {}"".format(score, hi_score), align= ""center"", font=(""Consolas"", 18, ""bold""))

        for i in range(len(segments)-1, 0, -1):
            segments[i].setx(segments[i - 1].xcor())
            segments[i].sety(segments[i - 1].ycor())

        if len(segments) > 0:
            segments[0].goto(head.xcor(), head.ycor())

        if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
            game_Started = False
            gameOver(score, hi_score)
            time.sleep(1)

        move()
        time.sleep(delay)

wn.listen()
wn.onkeypress(moveUp, ""w"" )
wn.onkeypress(moveDown, ""s"")
wn.onkeypress(moveLeft, ""a"")
wn.onkeypress(moveRight, ""d"")
wn.onkeypress(startGame, ""space"")
wn.onkeypress(closeGame, ""x"")
wn.onkeypress(restartGame, ""r"")
wn.mainloop()"
q6HAB1Fw,أفضل طريقة لتحويل PDF إلى نص يقبل النسخ والتعديل,ghostman905,JavaScript,Thursday 30th of November 2023 10:28:43 PM CDT,"معظم البرامج والمواقع مبتنسخش 100% من النص . عشان كده الكتابة السريعة أفضل حل لتحويل PDF إلى وورد . التايبست هيحول 100% من النص مع الحفاظ على تنسيق الجداول والأشكال التلقائية .

https://worrdpro.blogspot.com/2022/04/Best-way-to-convert-pdf-into-editable-text.html"
dGHwbcKH,PXWhitelist,aaaaaaaaaaaaaaaaaaae,JSON,Thursday 30th of November 2023 10:23:45 PM CDT,"{
  ""Administrator"": [
    133631212,
    1204438264,
    5005357748,
    73209915,
    86185287,
    103548428,
    4728625701,
    337210318,
	92475165,
	1114993970,
    1543205908,
    237883808,
    126400201,
    850348009,
    2970226820,
    16442712
  ],
  ""Moderator"": [
    97341455,
    57653842,
	544207325,
    767118615,
    783011727,
	553272779,
    156910090,
	121466004
  ],
  ""VIPOnly"": [
    1464272229,
    146783079,
	133631212,
    558013575
  ]
}"
0t7j5Xqm,Siug CSS,Hatkat,CSS,Thursday 30th of November 2023 10:20:44 PM CDT,"*{
    font-family: Helvetica, sans-serif;
}
body{
    background-color: #b6b7bc;
    position: relative;
}
.contain{
    max-width: 960px;
    min-width: 990px;
    height: auto;
    border: 1px solid #496077;
    margin: 20px auto;
}
.cont-img{
    height: 150px;
    display: inline-block;
    width: 100%;
}
.cont-img > .banner{
    width: 100%;
    height: 100%;
}
.cont-header{
    background-color: #00539f;
    position: relative;
    top: -4px;
    padding: 10px;
    height: 94px;
}
.cont-header > h2:first-child{
    font-size: 22px;
    color: #fff;
    margin-bottom: 10px;
    margin-top: 5px;
    padding-left: 10px;
    text-transform: uppercase;
}
.cont-header > h2:nth-child(2){
    color: #fff;
    font-size: 0.5em;
    margin-left: 12px;
}
.cont-inicio-sesion{
    display: flex;
    justify-content: space-between;
}
.cont-inicio-sesion > h2:first-child{
    color: #fff;
    padding: 5px;
    font-size: 16px;
    padding-left: 12px;
}
.cont-inicio-sesion > h2:last-child{
    color: #fff;
    padding: 5px;
    font-size: 12px;
    font-weight: 400;
}
.cont-menu{
    background-color: #3a4f63;
    position: relative;
    top: -4px;
}
.cont-menu > .cont-listas{
    display: flex;
    justify-content: left;
    list-style: none;
    margin-left: 10px;
}
.cont-listas > .item-lista{
    padding: 5px 20px;
    color: #eee;
    background-color: #465c71;
    margin: 5px 0px;
    outline: 2px solid #4e667d;
}

.cont-form{
    height: auto;
    background-color: #fff;
}
.cont-form-header{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
.cont-form-header > img{
    margin: 5px 0px 1px 0px;
}
.cont-form-header > h2{
    font-size: 10px;
    color: #333;
}
.cont-form-header > a{
    color: #0d4ef3;
    text-decoration: none;
}

.cont-form-data{
    width: 395px;
    border-radius: 5px;
    margin: 25px auto 0px;
    color: #333;
    border: 1px solid #ddd;
}
.cont-form-data-header{
    background-color: #f5f5f5;
    border: 1px solid #ddd;
    font-size: 8px;
    font-weight: 400;
    text-align: center;
    padding: 10px 0px;
}
.cont-form-data-header > h2:last-child{
    color: #777;
}
.cont-input{
    display: flex;
    flex-direction: column;
    padding: 10px 0px;
}
.cont-input > input{
    border: 1px solid #bbb;
    background-color: #fff;
    color: #555;
    border-radius: 5px;
    padding: 8px;
    margin: 5px 15px;
    outline: none;
    font-size: 10px;
}
.cont-input-date{
    font-size: 8px;
    padding: 0px 20px;
    display: flex;
    align-content: center;
    justify-content: center;
}
.cont-input-date > h2{
    margin-right: 40px;
}
.cont-input-date > input{
    width: 50px;
    padding: 4px;
    margin-right: 10px;
    margin-left: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
}
.cont-boton-inicio{
    width: 100%;
    padding: 20px 10px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.boton-inicio{
    width: 100%;
    height: auto;
    border-radius: 4px;
    background-color: #ec407a;
    color: #fff;
    padding: 8px;
    border: none;
    outline: none;
    margin-bottom: 20px;
}
.cont-registro{
    font-size: 7px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-content: center;
}
.cont-registro > h2{
    text-align: center;
    color: #777;
}
.cont-registro > input{
    border: 1px solid #aaa;
    outline: none;
    color: #0d4ef3;
    background-color: #fff;
    border-radius: 4px;
    padding: 8px;
    width: 90%;
    margin: auto;
}
.cont-registro > a{
    color: #0d4ef3;
    font-size: 10px;
    padding: 10px 20px;
    margin-top: 2px;
    margin-bottom: 15px;
}
.cont-author{
    margin-top: 50px;
    padding-bottom: 100px;
    font-size: 10px;
    color: #aaa;
    text-align: center;
    font-weight: 200;
}

.cont-author > h2 a{
    color: #0d4ef3;
    text-decoration: none;
}

.cont-author > h2 a:visited{
    color: #0d4ef3;
}

.cont-footer > a{
    color: #0d4ef3;
    font-size: 10px;
    text-decoration: none;
}
.cont-footer > a:visited{
    color: #0d4ef3;
}
.boton-inicio{
    transition: box-shadow 1s;
}
.boton-inicio:hover{
    cursor: pointer;
    box-shadow: 0px 0px 10px #ec407a;
}

@media screen and (max-width:600px){
    .contain{
        margin: 25px auto;
    }
    .cont-menu > *{
        font-size: 14px;
    }
    html{
        width: 1080px;
    }
}"
Fu56cjdY,Siug HTML,Hatkat,HTML,Thursday 30th of November 2023 10:18:36 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <link rel=""stylesheet"" href=""estilo.css"">
    <link rel=""stylesheet"" href=""normalize.css"">
    <script src=""https://kit.fontawesome.com/96a894dc59.js"" crossorigin=""anonymous""></script>
    <title>SIUG</title>
</head>
<body>

    <div class=""contain"">

        <picture class=""cont-img"">
            <img src=""imagenes/fondo.png"" alt=""banner ug"" class=""banner"">
        </picture>

        <header class=""cont-header"">

            <h2>Sistema integrado de la Universidad de Guayaquil (SIUG) </h2>
            <h2> jueves, 30 de noviembre de 2023 </h2>

            <div class=""cont-inicio-sesion"">
                <h2> >>Ultimos accesos<< </h2>
                <h2>[ Iniciar sesion ]</h2>
            </div>

        </header>
        
        <div class=""cont-menu"">

            <ul class=""cont-listas"">
                <li class=""item-lista"">Página principal</li>
                <li class=""item-lista"">Academico</li>
                <li class=""item-lista"">Financiero</li>
                <li class=""item-lista"">Talento Humano</li>
                <li class=""item-lista"">Consultas Públicas</li>
                <li class=""item-lista"">Escenarios</li>
                <li class=""item-lista"">Ayuda</li>
                <li class=""item-lista"">Foro</li>
            </ul>
        </div>

        <div class=""cont-form"">

            <div class=""cont-form-header"">
                <img src=""imagenes/LogoMoodle.png"" alt=""logo - moodle"">
                <h2>CAMPUS VIRTUAL UG</h2>
                <a href=""https://campusvirtual.ug.edu.ec/"" target=""_blank"">campusvirtual.ug.edu.ec</a>
            </div>


            <div class=""cont-form-data"">
                <header class=""cont-form-data-header"">
                    <h2>Inicio de sesion del sistema SIUG</h2>
                    <h2>Digita tus Accesos</h2>
                </header>

                <div class=""cont-input"">
                    <input type=""text"" placeholder=""Cedula/Pasaporte"">
                    <input type=""password"" placeholder=""Password"">
                </div>

                <div class=""cont-input-date"">
                    <h2>Dia y Mes de Nacimiento: </h2>
                    <input type=""text"" class=""day"" placeholder=""dd"">
                    <span>/</span>
                    <input type=""text"" class=""mouth"" placeholder=""mm"">
                </div>

                <div class=""cont-boton-inicio"">
                    <input type=""button"" class=""boton-inicio boton"" value=""Iniciar Sesion"">
                </div>
                
                <div class=""cont-registro"">
                    <h2>No tienes cuenta Resgistrate ?</h2>
                    <input type=""button"" class=""boton-registro boton"" value=""Resgistro"">
                    <a>Recuperar clave?</a>
                </div>
            </div>

            <div class=""cont-author"">
                <h2>Creado por: HatKat</h2>
                <h2>@2023 <a href=""http://www.ug.edu.ec/"">Universidad de Guayaquil</a></h2>
            </div>

            <div class=""cont-footer"">
                <a href=""http://127.0.0.1:5500/index.html"">Configuraciones</a>
            </div>

        </div>

    </div>

</body>
</html>
"
cRn2RUdz,Wallpaper downloader in C,nitestryker,C,Thursday 30th of November 2023 09:05:26 PM CDT,"#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>

/*
 * wallpaper.c
 *
 * Usage gcc wallaper.c -o wallpaper 
 * run ./wallpaper 
 * Version: 1.0.3 - 
 *
 * Copyright (c) 2023 Nitestryker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
#define WALLPAPER_VERSION ""1.0.3""
#define AUTHOR_NAME ""Nitestryker""

// Color codes for the text
#define HEADER ""\033[95m""
#define OKBLUE ""\033[94m""
#define OKGREEN ""\033[92m""
#define WARNING ""\033[93m""
#define FAIL ""\033[91m""
#define ENDC ""\033[0m""
#define BOLD ""\033[1m""
#define UNDERLINE ""\033[4m""

#define MAX_INPUT_LENGTH 100

#ifdef _WIN32
#include <windows.h>
#include <Lmcons.h>
#else
#include <sys/stat.h>
#include <unistd.h>
#endif

bool directoryExists(const char *path) {
    struct stat statbuf;
    return (stat(path, &statbuf) == 0 && S_ISDIR(statbuf.st_mode));
}

void createDirectory(const char *path) {
#ifdef _WIN32
    CreateDirectory(path, NULL);
#else
    mkdir(path, 0700); // Read, write, execute permissions for the user
#endif
}

void getUserInput(char *input, int length) {
    printf(""Please enter your input: "");
    if (fgets(input, length, stdin) != NULL) {
        size_t len = strlen(input);
        if (len > 0 && input[len - 1] == '\n') {
            input[len - 1] = '\0';
        }
    } else {
        fprintf(stderr, ""Error reading input.\n"");
    }
}

static char picturesPath[256]; // Static variable to store the pictures path

int initializePicturesDirectory() {
#ifdef _WIN32
    char username[UNLEN + 1];
    DWORD username_len = UNLEN + 1;
    GetUserName(username, &username_len);
    snprintf(picturesPath, sizeof(picturesPath), ""C:\\Users\\%s\\Pictures"", username);
#else
    const char *homeDir = getenv(""HOME"");
    if (homeDir == NULL) {
        fprintf(stderr, ""Unable to find home directory.\n"");
        return 1;
    }
    snprintf(picturesPath, sizeof(picturesPath), ""%s/Pictures"", homeDir);
#endif

    if (!directoryExists(picturesPath)) {
        printf(""The Pictures directory does not exist. Creating one...\n"");
        createDirectory(picturesPath);
        if (!directoryExists(picturesPath)) {
            fprintf(stderr, ""Failed to create Pictures directory.\n"");
            return 1;
        }
        printf(""Pictures directory created successfully.\n"");
    } else {
        printf(OKBLUE ""Found Pictures directory: %s\n"" ENDC, picturesPath);
    }

    char downloadHistoryPath[256];
    snprintf(downloadHistoryPath, sizeof(downloadHistoryPath), ""%s/download_history.txt"", picturesPath);
    FILE *downloadHistoryFile = fopen(downloadHistoryPath, ""w"");
    if (downloadHistoryFile != NULL) {
        printf(""Download history file created successfully.\n"");
        fclose(downloadHistoryFile);
    } else {
        fprintf(stderr, ""Failed to create download history file.\n"");
        return 1;
    }

    return 0; // Success
}

void printAppInfo() {
    printf(OKGREEN ""Wallpaper v%s\n"" ENDC, WALLPAPER_VERSION);
    printf(HEADER ""Created by %s\n"" ENDC, AUTHOR_NAME);
}

void clearConsole() {
#ifdef _WIN32
    system(""cls"");
#else
    system(""clear"");
#endif
}

int initializeApp() {
    return initializePicturesDirectory();
}

void getUserPreferences(char *resolution, char *type, char *keyword, int *number, int *sleepDuration) {
    printf(""Enter desired wallpaper resolution in 1920x1080 format: "");
    getUserInput(resolution, MAX_INPUT_LENGTH);

    printf(""Enter your desired wallpaper type (keyword/random): "");
    getUserInput(type, MAX_INPUT_LENGTH);

    if (strcmp(type, ""keyword"") == 0) {
        printf(""Please enter your desired wallpaper keyword: "");
        getUserInput(keyword, MAX_INPUT_LENGTH);
    } else {
        strcpy(keyword, """");
    }

    char numberInput[MAX_INPUT_LENGTH];
    printf(""Enter the number of wallpapers you want to download: "");
    getUserInput(numberInput, MAX_INPUT_LENGTH);
    *number = atoi(numberInput);

    char sleepInput[MAX_INPUT_LENGTH];
    printf(""enter time to sleep between downloads in seconds: "");
    getUserInput(sleepInput, MAX_INPUT_LENGTH);
    *sleepDuration = atoi(sleepInput);
}

void downloadWallpaper(int *number, int sleepDuration, const char *type, const char *keyword, const char *path, const char *resolution) {
    char downloadHistoryPath[256];
    snprintf(downloadHistoryPath, sizeof(downloadHistoryPath), ""%s/download_history.txt"", path);
    FILE *downloadHistoryFile = fopen(downloadHistoryPath, ""a+"");

    if (downloadHistoryFile == NULL) {
        fprintf(stderr, ""Failed to open download history file.\n"");
        return;
    }

    char line[1024];
    int downloadedCount = 0;
    while (downloadedCount < *number) {
        char url[256];
        char imageName[256];
        char command[512];
        char hashCommand[512];
        char hashValue[128];

        // Generate URL based on type
        if (strcmp(type, ""keyword"") == 0) {
            snprintf(url, sizeof(url), ""https://source.unsplash.com/featured/%s/?%s"", resolution, keyword);
        } else {
            snprintf(url, sizeof(url), ""https://source.unsplash.com/random/%s"", resolution);
        }

        // Generate a unique name for the image
        snprintf(imageName, sizeof(imageName), ""%s/wallpaper_%d.jpg"", path, downloadedCount + 1);

        // Download the image using curl with -L to follow redirects (must have the -L flag)
        snprintf(command, sizeof(command), ""curl -L -o \""%s\"" \""%s\"""", imageName, url);
        int result = system(command);

        if (result != 0) {
            fprintf(stderr, ""Error occurred during downloading. Exit code: %d\n"", result);
            continue; // Skip further processing for this download
        }

        // Generate a unique identifier for the image (hash)
        snprintf(hashCommand, sizeof(hashCommand), ""md5sum \""%s\"" | cut -d ' ' -f 1"", imageName);
        FILE *hashPipe = popen(hashCommand, ""r"");
        if (hashPipe == NULL) {
            fprintf(stderr, ""Failed to compute hash for the image.\n"");
            remove(imageName); // Remove the downloaded image
            break;
        }
        fgets(hashValue, sizeof(hashValue), hashPipe);
        pclose(hashPipe);

        // Check if the hash is already in download history
        bool alreadyDownloaded = false;
        rewind(downloadHistoryFile);
        while (fgets(line, sizeof(line), downloadHistoryFile)) {
            if (strstr(line, hashValue) != NULL) {
                alreadyDownloaded = true;
                break;
            }
        }

        if (!alreadyDownloaded) {
            // Add the hash to download history
            fprintf(downloadHistoryFile, ""%s\n"", hashValue);
            fflush(downloadHistoryFile);

            printf(""Downloaded wallpaper %d/%d\n"", downloadedCount + 1, *number);
            downloadedCount++;

            // Sleep between downloads
            sleep(sleepDuration);
        } else {
            printf(""Skipping already downloaded image.\n"");
            remove(imageName); // Remove the duplicate image
        }
    }

    fclose(downloadHistoryFile);
}


void performWallpaperDownload(const char *resolution, const char *type, const char *keyword, int number, int sleepDuration) {
    time_t start = time(NULL);
    downloadWallpaper(&number, sleepDuration, type, keyword, picturesPath, resolution);
    time_t end = time(NULL);
    printf(""Time taken: %.2fs\n"", difftime(end, start));
}

int main() {
    printAppInfo();
    sleep(2);
    clearConsole();

    if (initializeApp() != 0) {
        fprintf(stderr, ""Failed to initialize application.\n"");
        return 1;
    }

    char resolution[MAX_INPUT_LENGTH];
    char type[MAX_INPUT_LENGTH];
    char keyword[MAX_INPUT_LENGTH];
    int number, sleepDuration;

    getUserPreferences(resolution, type, keyword, &number, &sleepDuration);
    performWallpaperDownload(resolution, type, keyword, number, sleepDuration);

    return 0;
}
"
KBU4GQRR,Ventriloquism,alexanderjt,VBScript,Thursday 30th of November 2023 07:49:50 PM CDT,"Dim userinput
userinput = inputbox(""Type words in the box"",""Ventriloquism"")
set sapi = wscript.createobject(""SAPI.Spvoice"")
Sapi.speak userinput"
RiY41w7W,Day 20 Connection,HarrJ,Java,Thursday 30th of November 2023 07:46:54 PM CDT,"package week3;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

public class Day20C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String fName, lName, jobTitle, gender;
        int age, deptID;
        
        System.out.print(""Enter first name: "");
        fName = sc.nextLine();
        System.out.print(""Enter last name: "");
        lName = sc.nextLine();
        System.out.print(""Enter Age: "");
        age = sc.nextInt();
        sc.nextLine();
        System.out.print(""Enter job title: "");
        jobTitle = sc.nextLine();
        System.out.print(""Enter Department ID: "");
        deptID = sc.nextInt();
        sc.nextLine();
        System.out.print(""Enter gender(M/F): "");
        gender = sc.nextLine();
        
        addNewRowTest(fName, lName, age, jobTitle, deptID, gender);
        
    }
    
    static void addNewRowTest(String fName, String lName, int age, String jobTitle, int deptID, String gender) {
        String connectionString = ""jdbc:mysql://localhost:3306/db_mng_b11"";
        String userName = ""mngb11"";
        String passWord = ""2023"";
        try {
            Connection conn = DriverManager.getConnection(connectionString, userName, passWord);  
            Statement stmt = conn.createStatement();
            String sqlQuery = ""INSERT INTO tbl_employee(fld_fname, fld_lname, fld_age""
                    + "", fld_position, fld_did, fld_gender)""
                    + "" VALUES ('"" + fName + ""','"" + lName + ""','"" + age + ""'""
                    + "",'"" + jobTitle + ""','"" + deptID + ""','"" + gender + ""');"";
            
            System.out.println(sqlQuery);
            int rowAffected = stmt.executeUpdate(sqlQuery);
            System.out.println(rowAffected + "" row(s) affected"");
            conn.close();
        }   catch (SQLException ex) {
            System.out.println(""error: "" + ex.toString());
        }
    }
}

//--- table query------------------
CREATE TABLE tbl_employee
(fld_fname VARCHAR(50)
, fld_lname VARCHAR(50)
, fld_age INT
, fld_position VARCHAR(50)
, fld_did INT
, fld_gender VARCHAR(1)
);

// --- EXECUTE UPDATE INSERT INTO ---------------------------
package week3;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Scanner;

public class Day20D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String fName = """", lName = """", jobTitle = """", gender = """";
        int age = 0, deptID = 0;
        boolean canContinue = true;
        
        try {
            System.out.print(""Enter first name: "");
            fName = sc.nextLine();
            System.out.print(""Enter last name: "");
            lName = sc.nextLine();
            System.out.print(""Enter Age: "");
            age = sc.nextInt();
            sc.nextLine();
            System.out.print(""Enter job title: "");
            jobTitle = sc.nextLine();
            System.out.print(""Enter Department ID: "");
            deptID = sc.nextInt();
            sc.nextLine();
            System.out.print(""Enter gender(M/F): "");
            gender = sc.nextLine();
        } catch (Exception e) {
            System.out.println(""One of user input is invalid"");
            canContinue = false;
        }
        if (canContinue) {
            int result = addNewRow(fName, lName, age, jobTitle, deptID, gender);
            System.out.println(result + "" row(s) affected"");
        }
    }
    
    static int addNewRow(String fName, String lName, int age, String jobTitle, int deptID, String gender) {
        String connectionString = ""jdbc:mysql://localhost:3306/db_mng_b11"";
        String userName = ""mngb11"";
        String passWord = ""2023"";
        int rowAffected = 0;
        try {
            Connection conn = DriverManager.getConnection(connectionString, userName, passWord);
            
            String sqlQuery = ""INSERT INTO tbl_employee ""
                    + ""(fld_fname, fld_lname, fld_age""
                    + "", fld_position, fld_did, fld_gender)""
                    + "" VALUES ( ?, ?, ?, ?, ?, ?);"";
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            stmt.setString(1, fName);
            stmt.setString(2, lName);
            stmt.setInt(3, age);
            stmt.setString(4, jobTitle);
            stmt.setInt(5, deptID);
            stmt.setString(6, gender);
            
//            System.out.println(sqlQuery); // nandito lang to pang test
            rowAffected = stmt.executeUpdate();
            conn.close();
        }   catch (SQLException ex) {
            System.out.println(""error: "" + ex.toString());
        }
        return rowAffected;
    }
}

// --- EXECUTE QUERY SELECT---------------------------
package week3;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class Day20E {
    public static void main(String[] args) {
        getAllRows();
    }
    
    static void getAllRows() {
        String connectionString = ""jdbc:mysql://localhost:3306/db_mng_b11"";
        String userName = ""mngb11"";
        String passWord = ""2023"";
        try {
            Connection conn = DriverManager.getConnection(connectionString, userName, passWord);
            
            String sqlQuery = ""SELECT * FROM tbl_employee;"";
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                System.out.print(rs.getString(1) + "" | "");
                System.out.print(rs.getString(2) + "" | "");
                System.out.println(rs.getString(3));
            }
            System.out.println(rs);
//            System.out.println(sqlQuery); // nandito lang to pang test

            conn.close();
        }   catch (SQLException ex) {
            System.out.println(""error: "" + ex.toString());
        }
    }
}
"
R2Y1rAQ0,Maximum sum increasing subsequence,jayati,C++,Thursday 30th of November 2023 07:16:21 PM CDT,"//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{
		

	public:
	int maxSumIS(int arr[], int n)  
	{  
	    // Your code goes here
	    vector<int> maxSum(n,0);
	    
	    for(int i=0;i<n;i++)
	    {
	        maxSum[i]=arr[i];
	        for(int j=0;j<i;j++)
	        {
	            if(arr[i]>arr[j] && maxSum[i]<maxSum[j]+arr[i])
	            {
	                maxSum[i]=maxSum[j]+arr[i];
	            }
	        }
	    }
	    return *max_element(maxSum.begin(),maxSum.end());
	}  
};

//{ Driver Code Starts.
int main() 
{
   	
   
   	int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;

        int a[n];

        for(int i = 0; i < n; i++)
        	cin >> a[i];

      

	    Solution ob;
	    cout << ob.maxSumIS(a, n) << ""\n"";
	     
    }
    return 0;
}


// } Driver Code Ends"
RZRNuzLg,snowy manual 10fold,coinwalk,JavaScript,Thursday 30th of November 2023 07:05:07 PM CDT,"var sturn = parseFloat(document.getElementById('pct_balance').value);
var kill = (sturn/240).toFixed(8);
var freakish = kill;
var taget = (kill*24000);
var dozer = (kill*10);
var soven = (kill*6.9);
var ovenbake = (kill*7.9);
var tobetnext = ((freakish*1).toFixed(8));
var goodly = sturn;
var james = 0;
 
function get(){
console.clear();
goodly = document.getElementById('pct_balance').value;
if ((goodly>(((Math.floor(goodly/dozer))*dozer)+soven))&&(goodly<(((Math.floor(goodly/dozer))*dozer)+ovenbake))&&(goodly!=james)){
    freakish = freakish*2;
    james = parseFloat(goodly);
}
if (((freakish*3)>=(sturn*0.1))&&(goodly<(((Math.floor(goodly/dozer))*dozer)+soven))){
    freakish = kill;
    james = 0;
}
if (((freakish*3)>=(goodly*0.1))&&(goodly<(((Math.floor(goodly/dozer))*dozer)+soven))){
    freakish = kill;
    james = 0;
}
if (goodly >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = (freakish*1).toFixed(8);
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
var good = ((goodly-sturn).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1000);
}
get()"
WP3kk3RK,build.sh,bekie,C++,Thursday 30th of November 2023 06:58:29 PM CDT,"#cd ./libWad
#make
#cd ..
#g++ -g -o myTesting ./wad_dump.cpp -lgtest -lgtest_main -lpthread -L ./libWad -lWad
sudo chmod 666 /dev/fuse
fusermount -u ./mountdir
g++ -D_FILE_OFFSET_BITS=64 -DFUSE_USE_VERSION=26 wadfs/FuseDaemon.cpp libWad/Wad.cpp -o daemon -lfuse

./daemon -s sample1_copy.wad ./mountdir/
"
FeSn3hze,Untitled,ashlyleh,JSON,Thursday 30th of November 2023 06:48:10 PM CDT,"{
  ""plant_blossoms.gif"": ""2 GP"",
  ""plant_firebush.gif"": ""2 GP"",
  ""plant_furrn.gif"": ""2 GP"",
  ""glass_roses.gif"": ""2 GP"",
  ""plant_rowzez.gif"": ""2 GP"",
  ""w_bush.gif"": ""2 GP"",
  ""boadaisy.gif"": ""3 GP"",
  ""dragonbud.gif"": ""3 GP"",
  ""plant_dunkydoos.gif"": ""3 GP"",
  ""dwarftree.gif"": ""3 GP"",
  ""plant_gardenias.gif"": ""3 GP"",
  ""toy_instantroses.gif"": ""3 GP"",
  ""orb_plant.gif"": ""3 GP"",
  ""pebeanjay.gif"": ""3 GP"",
  ""perfume_wallows.gif"": ""3 GP"",
  ""ga_rocktree.gif"": ""3 GP"",
  ""rubber_plant.gif"": ""3 GP"",
  ""gar_altadorfountain_flotsam.gif"": ""3 GP"",
  ""plant_zobamints.gif"": ""3 GP"",
  ""plant_blumbs.gif"": ""8 GP"",
  ""fu_gnome_moehog.gif"": ""8 GP"",
  ""plant_lazydels.gif"": ""8 GP"",
  ""ga_meepie.gif"": ""8 GP"",
  ""ga_pineappleplant.gif"": ""8 GP"",
  ""potting-bench.gif"": ""8 GP"",
  ""gar_moehog_gnome.gif"": ""15 GP"",
  ""fu_gnome_draik.gif"": ""15 GP"",
  ""ga_candyfloss.gif"": ""15 GP"",
  ""gar_rock1.gif"": ""15 GP"",
  ""fu_gnome_cybunny.gif"": ""15 GP"",
  ""fu_blu_butter.gif"": ""15 GP"",
  ""fu_jubjub_worm.gif"": ""15 GP"",
  ""gar_lupe_gnome3.gif"": ""15 GP"",
  ""gar_curious_nimmo.gif"": ""15 GP"",
  ""ga_wild_orchid.gif"": ""15 GP"",
  ""fu_jetsam_fish.gif"": ""15 GP"",
  ""gar_kikognome_fish.gif"": ""15 GP"",
  ""fu_grundo_spade.gif"": ""15 GP"",
  ""fu_gnome_kau.gif"": ""15 GP"",
  ""neogarden_gnomeacara.gif"": ""15 GP"",
  ""gar_yurble_fishing.gif"": ""15 GP"",
  ""ga_kolleeflower.gif"": ""15 GP"",
  ""ga_lightningfern.gif"": ""15 GP"",
  ""gar_lupe_gnome2.gif"": ""15 GP"",
  ""ga_statue_nimmo.gif"": ""15 GP"",
  ""ga_rosetree.gif"": ""15 GP"",
  ""fu_aisha_shroom.gif"": ""15 GP"",
  ""fu_bruce_shroom.gif"": ""15 GP"",
  ""gar_snoozing_hissi.gif"": ""15 GP"",
  ""fu_gnome_ixi.gif"": ""15 GP"",
  ""plant_sundaybush.gif"": ""15 GP"",
  ""ga_statue_flotsam.gif"": ""15 GP"",
  ""ga_swirly_pop.gif"": ""15 GP"",
  ""plant_treeweed.gif"": ""15 GP"",
  ""ga_birdhouse_yellow.gif"": ""15 GP"",
  ""ga_yelloweesatree.gif"": ""15 GP"",
  ""neogarden_gnomegrarrl.gif"": ""15 GP"",
  ""gar_kikognome_face.gif"": ""40 GP"",
  ""ga_gazebo.gif"": ""40 GP"",
  ""gar_hissi_gnome.gif"": ""40 GP"",
  ""gar_acahall.gif"": ""40 GP"",
  ""ga_neggmuncher.gif"": ""40 GP"",
  ""gar_gnome_yurble_orange.gif"": ""40 GP"",
  ""ga_pinkbonsaii.gif"": ""40 GP"",
  ""gar_gnome_peophin.gif"": ""40 GP"",
  ""gar_rainbow_flower.gif"": ""40 GP"",
  ""gar_rainbow_carrot.gif"": ""40 GP"",
  ""ga_roped_bridge.gif"": ""40 GP"",
  ""gar_pit_sand.gif"": ""40 GP"",
  ""ga_tongue_daisy.gif"": ""40 GP"",
  ""plant_snakebush.gif"": ""40 GP"",
  ""plant_songflowers.gif"": ""40 GP"",
  ""plant_badseed.gif"": ""200 GP"",
  ""ga_statue_blumaroo.gif"": ""200 GP"",
  ""ga_bonsaichia.gif"": ""200 GP"",
  ""ga_statue_chia.gif"": ""200 GP"",
  ""floating_cactus.gif"": ""200 GP"",
  ""gar_kikognome_flowers.gif"": ""200 GP"",
  ""fallfur.gif"": ""200 GP"",
  ""garden-bench.gif"": ""200 GP"",
  ""gar_meehall.gif"": ""200 GP"",
  ""ga_statue_quiggle.gif"": ""200 GP"",
  ""garden_rainbowflower.gif"": ""200 GP"",
  ""ga_regalbridge.gif"": ""200 GP"",
  ""ga_scarecrow_scorchio.gif"": ""200 GP"",
  ""ga_statue_shoyru.gif"": ""200 GP"",
  ""star_tree.gif"": ""200 GP"",
  ""ga_strangebulb.gif"": ""200 GP"",
  ""ga_bridge.gif"": ""200 GP"",
  ""ga_statue_techo.gif"": ""200 GP"",
  ""plant_tuskaninny.gif"": ""200 GP"",
  ""ga_twistingvines.gif"": ""200 GP"",
  ""ga_picket_fence.gif"": ""200 GP"",
  ""gar_green_kelp.gif"": ""1 GP"",
  ""vor_mossy_rock.gif"": ""1 GP"",
  ""gar_plushie_fungus.gif"": ""1 GP"",
  ""gar_spongy_algae.gif"": ""1 GP"",
  ""gar_crystal_kelp.gif"": ""1 GP"",
  ""gar_seagrass.gif"": ""1 GP"",
  ""gar_darigan_seaweed.gif"": ""1 GP"",
  ""gar_cinderblock_fungus.gif"": ""1 GP"",
  ""gar_void_plant.gif"": ""1 GP"",
  ""gar_cubical_fungus.gif"": ""1 GP"",
  ""gar_grey_fern.gif"": ""1 GP"",
  ""gar_prismatic_fern.gif"": ""1 GP"",
  ""gar_starry_fern.gif"": ""1 GP"",
  ""gar_brown_kelp.gif"": ""1 GP"",
  ""gar_cheery_plant.gif"": ""1 GP"",
  ""gar_red_kelp.gif"": ""1 GP"",
  ""garden_daffodil.gif"": ""1 GP"",
  ""garden_whitedaffodil.gif"": ""1 GP"",
  ""gar_pumpkin_kass.gif"": ""1 GP"",
  ""gar_pumpkin_pantdevil.gif"": ""1 GP"",
  ""gar_pumpkin_sloth.gif"": ""1 GP"",
  ""gar_pumpkin_meuka.gif"": ""1 GP"",
  ""gross_chewingdung.gif"": ""10 GP"",
  ""dung_02.gif"": ""10 GP"",
  ""dung_06.gif"": ""10 GP"",
  ""dung_08.gif"": ""10 GP"",
  ""dung_12.gif"": ""10 GP"",
  ""dung_07.gif"": ""10 GP"",
  ""food_cacake.gif"": ""10 GP"",
  ""dung_11.gif"": ""10 GP"",
  ""dung_10.gif"": ""10 GP"",
  ""jel_dung_whole.gif"": ""10 GP"",
  ""food_dung_pizza.gif"": ""10 GP"",
  ""dung_04.gif"": ""10 GP"",
  ""bd_scarab04.gif"": ""10 GP"",
  ""dung_01.gif"": ""10 GP"",
  ""bd_shield_dung.gif"": ""10 GP"",
  ""slush_dung.gif"": ""10 GP"",
  ""dung_03.gif"": ""10 GP"",
  ""dung_09.gif"": ""10 GP"",
  ""frozen_dung.gif"": ""10 GP"",
  ""boo_dung_how.gif"": ""10 GP"",
  ""med_booby_5.gif"": ""10 GP"",
  ""dung_rainbow.gif"": ""10 GP"",
  ""vor_bucket_sludge.gif"": ""5 GP"",
  ""blackmound.gif"": ""5 GP"",
  ""food_med_sludgepie.gif"": ""5 GP"",
  ""coff_blue_slush.gif"": ""5 GP"",
  ""neogarden_gnomekorbat.gif"": ""15 GP"",
  ""gar_bori_gnome4.gif"": ""15 GP"",
  ""gar_kikognome_dig.gif"": ""40 GP"",
  ""gar_bluhall.gif"": ""40 GP"",
  ""gar_gnome_poogle.gif"": ""40 GP"",
  ""gar_bori_gnome2.gif"": ""40 GP"",
  ""gar_pondrainbow.gif"": ""40 GP"",
  ""gar_gnome_yurble_green.gif"": ""40 GP"",
  ""gar_rainbow_bush.gif"": ""40 GP"",
  ""gar_rainbow_fruittree.gif"": ""200 GP"",
  ""fu_gnome_scorchio.gif"": ""1? GP"",
  ""fu_gnome_kiko.gif"": ""1? GP"",
  ""fu_gnome_wocky.gif"": ""1? GP"",
  ""heartfruit.gif"": ""1? GP"",
  ""ga_tonguetree.gif"": ""1? GP"",
  ""med_turm_pl2.gif"": ""1? GP"",
  ""fu_gnome_chia.gif"": ""1? GP"",
  ""med_turm_pl1.gif"": ""1? GP"",
  ""ga_plasticlenny.gif"": ""1? GP"",
  ""ga_birdhouse_purple.gif"": ""1? GP"",
  ""ga_cookietree.gif"": ""1? GP"",
  ""fu_gnome_techo.gif"": ""1? GP"",
  ""fu_gnome_kacheek.gif"": ""1? GP"",
  ""ga_chocicetree.gif"": ""1? GP"",
  ""ga_sandwichtree.gif"": ""1? GP"",
  ""ga_brocollitree.gif"": ""1? GP"",
  ""gar_fishing_meepit.gif"": ""1? GP"",
  ""ga_statue_grundo.gif"": ""1? GP"",
  ""ga_statue_usul.gif"": ""1? GP"",
  ""ga_gurplebush.gif"": ""1? GP"",
  ""ga_statue_eyrie.gif"": ""1? GP"",
  ""ga_birdhouse_white.gif"": ""1? GP"",
  ""plant_plurbybush.gif"": ""1? GP"",
  ""plant_chickadaisys.gif"": ""1? GP"",
  ""plant_bluebells.gif"": ""1? GP"",
  ""plant_glant.gif"": ""1? GP"",
  ""black_roses.gif"": ""1? GP"",
  ""plant_mordongos.gif"": ""1? GP"",
  ""plant_tactis.gif"": ""1? GP"",
  ""ga_bridge2.gif"": ""1? GP"",
  ""tami.gif"": ""1? GP"",
  ""plant_plantmelon.gif"": ""1? GP"",
  ""plant_olivebush.gif"": ""1? GP"",
  ""plant_bluesticks.gif"": ""1? GP"",
  ""feather_weed.gif"": ""1? GP"",
  ""large_thorn.gif"": ""1? GP"",
  ""yolkalia.gif"": ""1? GP"",
  ""plant_ringvine.gif"": ""1? GP"",
  ""plant_spinevine.gif"": ""1? GP"",
  ""toy_roseseeds.gif"": ""1? GP"",
  ""sponderolas.gif"": ""1? GP"",
  ""ga_cannon.gif"": ""1? GP"",
  ""plant_budseed.gif"": ""1? GP"",
  ""atrabud.gif"": ""1? GP"",
  ""snakerose.gif"": ""1? GP"",
  ""swab_bush.gif"": ""1? GP"",
  ""colorlillies.gif"": ""1? GP"",
  ""gar_xweetok_flower.gif"": ""15 GP"",
}"
5E5z0j25,Untitled,bekie,C++,Thursday 30th of November 2023 06:41:50 PM CDT,"#include <iostream>
#include ""../libWad/Wad.h""
#include <fuse.h>
#include <cstdlib>
#include <unistd.h>
#include <string>
#include <dirent.h>
#include <stdio.h>

#define FUSE_USE_VERSION 26

using namespace std;

// FUSE operations structure
static struct fuse_operations operations;
/*
// FUSE callback functions
static int getattr_callback(const char* path, struct stat* stbuf);
static int mknod_callback(const char* path, mode_t mode, dev_t dev);
static int mkdir_callback(const char* path, mode_t mode);
static int read_callback(const char* path, char* buf, size_t size, off_t offset, struct fuse_file_info* fi);
static int write_callback(const char* path, const char* buf, size_t size, off_t offset, struct fuse_file_info* fi);
*/
static int readdir_callback(const char* path, void* buf, fuse_fill_dir_t filler, off_t offset, struct fuse_file_info* fi);


int main(int argc, char* argv[]) {
    if (argc < 3) {
        cout << ""Not enough arguments."" << endl;
        exit(EXIT_SUCCESS);
    }

    string wadPath = argv[argc - 2];

    if (wadPath.at(0) != '/') {
        wadPath = string(get_current_dir_name()) + ""/"" + wadPath;
    }

    Wad* myWad = Wad::loadWad(wadPath); // Initialize the Wad instance

    argv[argc - 2] = argv[argc - 1];
    argc--;

    // Assign the callback functions to the FUSE operations structure
    /*
    operations.getattr = getattr_callback;
    operations.mknod = mknod_callback;
    operations.mkdir = mkdir_callback;
    operations.read = read_callback;
    operations.write = write_callback;
    */
    operations.readdir = readdir_callback;
    

    // Run the FUSE filesystem
    return fuse_main(argc, argv, &operations, myWad);
}

// FUSE callback functions implementation
/*
static int getattr_callback(const char* path, struct stat* stbuf) {
    // Implement the logic to retrieve file and directory attributes
    // ls -l or stat
    return 0;
}

static int mknod_callback(const char* path, mode_t mode, dev_t dev) {
    // Implement the logic to create a file
    // create file with nano or whatever
    return 0;
}

static int mkdir_callback(const char* path, mode_t mode) {
    // Implement the logic to create a directory
    // mkdir 
    return 0;
}

static int read_callback(const char* path, char* buf, size_t size, off_t offset, struct fuse_file_info* fi) {
    // Implement the logic to read from existing files
    // cat or nano
    return 0;
}

static int write_callback(const char* path, const char* buf, size_t size, off_t offset, struct fuse_file_info* fi) {
    // Implement the logic to write to new files
    // nano, echo, cat >file.txt
    return 0;
}
*/

static int readdir_callback(const char* path, void* buf, fuse_fill_dir_t filler, off_t offset, struct fuse_file_info* fi) {
    // Implement the logic to read from existing directories
    // ls, must display directory information
    if (strcmp(path, ""/"") != 0) {
        return -ENOENT;  // Return ""No such file or directory"" error
    }

    // Add some sample entries to the filler
    filler(buf, ""."", nullptr, 0);
    filler(buf, "".."", nullptr, 0);

    // Add more entries as needed, based on your Wad class
    filler(buf, ""file1"", nullptr, 0);
    filler(buf, ""dir1"", nullptr, 0);

    // ((Wad*)fuse_get_context()->private_data)->getContents()


    return 0;
}



//user commands possible: ls, cat filename, nano, cd, ls -al, cp (to another directory)"
2xhizqKk,KaldiRecognizer + ffmpeg,Gistrec,Python,Thursday 30th of November 2023 06:26:18 PM CDT,"import asyncio
import websockets
from pydub import AudioSegment
import io
from vosk import Model, KaldiRecognizer
import subprocess


desired_bitrate = ""1411k""
desired_samplerate = ""44100""


vosk_model = Model(""./model"")
recognizer = KaldiRecognizer(vosk_model, 44100)

recognizer.SetWords(True)  # Enable word-level timing information in the recognition results
recognizer.SetMaxAlternatives(10)  # Adjust the maximum number of alternatives


def save_audio_to_wav(audio_data, filename):
    # Convert WebM audio data to WAV
    audio_segment = AudioSegment.from_file(io.BytesIO(audio_data), format=""webm"")
    audio_segment.export(filename, format=""wav"")

    # Run ffmpeg command for downsampling and controlling bitrate
    ffmpeg_command = [
        ""ffmpeg"",
        ""-y"",  # Automatically overwrite files
        ""-i"", filename,
        ""-ar"", desired_samplerate, # Set the sample rate to 44100 Hz
        ""-b:a"", desired_bitrate,   # Set the bitrate
        filename.replace("".webm"", "".wav"")
    ]

    subprocess.run(ffmpeg_command)


async def audio_handler(websocket, path):
    print(""WebSocket connection established"")

    try:
        async for message in websocket:
            save_audio_to_wav(message, ""temp.webm"")  # Save WebM audio to a temporary WAV file
            recognizer.AcceptWaveform(open(""temp.wav"", ""rb"").read())

            result = recognizer.Result()
            print(""Result:"", result)


        # Get the final recognition result
        result = recognizer.FinalResult()
        print(""Final Result:"", result)


    except websockets.ConnectionClosed:
        print(""WebSocket connection closed"")


if __name__ == ""__main__"":
    start_server = websockets.serve(audio_handler, ""localhost"", 8765)

    asyncio.get_event_loop().run_until_complete(start_server)
    print(""WebSocket server started"")

    try:
        asyncio.get_event_loop().run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        print(""WebSocket server stopped"")"
