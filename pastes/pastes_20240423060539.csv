id,title,username,language,date,content
aSPrPhwR,–ü—Ä–∏–º–µ—Ä  —Ñ–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—á—Ç—ã c –ø–æ—Ç–≤–µ–∂–¥–µ–Ω–∏–µ–º,saloev,JavaScript,Tuesday 23rd of April 2024 12:44:23 AM CDT,"FeaturesToggle._support._features['mail_auth'] = {                    current_version: 2,                    supported_version_list: [0, 1, 2],                };
AuthAvailableList._setAvailableList(B.app.config.getActivePivotInfo(), [AUTH_AVAILABLE_LIST.phone_number, AUTH_AVAILABLE_LIST.mail])
PLAYER.set({    ...PLAYER.get(),    has_email: 1, email_mask: 'fe************1@gmail.com'});

addMockRequestList = (mock_list) => {   
   for (const mock_request of mock_list) { FakeServer.addMockedRequest(mock_request.method, mock_request); }              
   FakeServer.init({});
}

// –º–æ–∫–∞–µ–º —Å—Ç–∞—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ë–ï–ó –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 
addMockRequestList([{    
   // –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –∑–∞–º–æ–∫–∞—Ç—å    
  method: '/security/mail/change', // –ø—É—Ç—å –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞    
  
 // –∫–∞–∫–æ–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç (–ù–£–ñ–ù–û –ß–¢–û–ë–´ –û–ù –¢–û–ß–ù–û –°–û–í–ü–ê–î–ê–õ –° –û–¢–í–ï–¢–û–ú –û–¢ –ë–≠–ö–ï–ù–î–ê —Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä)  status=""ok"" - –ù–ï –ö–û–ü–ò–†–£–ï–ú 
 ""response"": {
        ""change_mail_story_info"": {
            ""change_mail_story_key"": ""keyexample"",
            ""scenario"": ""full_change_mail"",
            ""data"": {
                ""next_resend"": nowTime() + 60 * 2,
                ""code_available_attempts"": 3,
                ""expire_at"": nowTime() + 3000,
                ""stage"": ""entering_first_code""
            }
        }
    }
}]);

// –º–æ–∫–∞–µ–º –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç–∞—Ä–æ–π –ø–æ—á—Ç—ã
addMockRequestList([{    
   // –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –∑–∞–º–æ–∫–∞—Ç—å    
  method: '/security/mail/confirmOldByCodeOnFullChange', // –ø—É—Ç—å –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞    
  
 // –∫–∞–∫–æ–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç (–ù–£–ñ–ù–û –ß–¢–û–ë–´ –û–ù –¢–û–ß–ù–û –°–û–í–ü–ê–î–ê–õ –° –û–¢–í–ï–¢–û–ú –û–¢ –ë–≠–ö–ï–ù–î–ê —Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä)  status=""ok"" - –ù–ï –ö–û–ü–ò–†–£–ï–ú 
 ""response"": {}
}]);

// –º–æ–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—á—Ç—ã
addMockRequestList([{    
   // –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –∑–∞–º–æ–∫–∞—Ç—å    
  method: '/security/mail/setOnFullChange', // –ø—É—Ç—å –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞    
  
 // –∫–∞–∫–æ–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç (–ù–£–ñ–ù–û –ß–¢–û–ë–´ –û–ù –¢–û–ß–ù–û –°–û–í–ü–ê–î–ê–õ –° –û–¢–í–ï–¢–û–ú –û–¢ –ë–≠–ö–ï–ù–î–ê —Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä)  status=""ok"" - –ù–ï –ö–û–ü–ò–†–£–ï–ú 
 ""response"": {}
}]);

// –º–æ–∫–∞–µ–º –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–æ–≤–æ–π –ø–æ—á—Ç—ã
addMockRequestList([{    
   // –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –∑–∞–º–æ–∫–∞—Ç—å    
  method: '/security/mail/confirmNewByCodeOnFullChange', // –ø—É—Ç—å –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞    
  
 // –∫–∞–∫–æ–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç (–ù–£–ñ–ù–û –ß–¢–û–ë–´ –û–ù –¢–û–ß–ù–û –°–û–í–ü–ê–î–ê–õ –° –û–¢–í–ï–¢–û–ú –û–¢ –ë–≠–ö–ï–ù–î–ê —Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä)  status=""ok"" - –ù–ï –ö–û–ü–ò–†–£–ï–ú 
 ""response"": {}
}]);

// –ú–û–ö–ê–ï–ú –ó–ê–ü–†–û–° –ü–ï–†–ï–û–¢–ü–†–ê–í–ö–ò –ö–û–î–ê –ü–û–ß–¢–´
addMockRequestList([{    
   // –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –∑–∞–º–æ–∫–∞—Ç—å    
  method: '/security/mail/resendCode', // –ø—É—Ç—å –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ 
 
 // –∫–∞–∫–æ–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç (–ù–£–ñ–ù–û –ß–¢–û–ë–´ –û–ù –¢–û–ß–ù–û –°–û–í–ü–ê–î–ê–õ –° –û–¢–í–ï–¢–û–ú –û–¢ –ë–≠–ö–ï–ù–î–ê —Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä)
 response: {            
   mail_story_info: {                 
      mail_story_key: '',// –∫–ª—é—á
      mail_story_type: 'full_add',// –∫–∞–∫–æ–π —Å–ø—Ü–µ–Ω–∞—Ä–∏–π (–ø–æ–ª–Ω—ã–π/–Ω–µ–ø–æ–ª–Ω—ã–π)
      data: {
                ""next_resend"":  nowTime() + 60,// 60 —Å–µ–∫—É–Ω–¥,// —Ç—É—Ç –ø–∏—à–µ–º –∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥
                ""code_available_attempts"": 3,
                ""expire_at"": nowTime() + 60 * 20,// 20 –º–∏–Ω —Å–µ–∫—É–Ω–¥,
                ""stage"": ""entering_code""
    }
   }    
 }
}]);

"
FNTLiCvM,Contacts Entity Class,GeorgePashev_88,Java,Tuesday 23rd of April 2024 12:07:12 AM CDT,"public class Contacts {
    protected String Name, ID, Address, Email, Phone;
    public Contacts(){
        Name=""""; ID=""""; Address=""""; Email=""""; Phone = """";
    }
    public Contacts(String ID, String Name, String Address, String Email, String Phone){
        this.ID = ID; this.Name=Name; this.Address=Address;
        this.Email = Email; this.Phone = Phone;

    }
    public String getName(){
        return Name;
    }
    public String getID(){
        return ID;
    }
    public String getAddress(){
        return Address;
    }
    public String getEmail(){
        return Email;
    }

    public String getPhone(){ return Phone; }

}"
ZgV2XtUp,UpdateDelete Layout,GeorgePashev_88,XML,Tuesday 23rd of April 2024 12:05:35 AM CDT,"

<?xml version=""1.0"" encoding=""utf-8""?>
<LinearLayout
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    xmlns:android=""http://schemas.android.com/apk/res/android"">
    <EditText
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/editName""
        android:hint=""Enter Name""
        android:inputType=""textPersonName""></EditText>
    <EditText
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/editPhone""
        android:hint=""Enter Phone""
        android:inputType=""phone""></EditText>
    <EditText
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/editEmail""
        android:hint=""Enter E-mail""
        android:inputType=""textEmailAddress""></EditText>
    <EditText
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/editAddress""
        android:hint=""Enter Address""
        android:inputType=""textPostalAddress""></EditText>
    <Button
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/btnUpdate""
        android:text=""Update""
        ></Button>
    <Button
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/btnDelete""
        android:text=""Delete""
        ></Button>
    <Button
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/btnShowMap""
        android:text=""Show Address On Map""
        ></Button>
    <Button
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:id=""@+id/btnShowQr""
        android:text=""Show QR Code""
        ></Button>

</LinearLayout>"
PtPi5ALY,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,jusst2k4,GetText,Tuesday 23rd of April 2024 12:04:32 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_514509.pdf

Working as of:
23 April 2024"
khbYPf8N,MenosUno,XConquer,C#,Tuesday 23rd of April 2024 12:04:24 AM CDT," [NpcAttribute(NpcID.MenosUno)]
        public static void MenosUno(Client.GameClient client, ServerSockets.Packet stream, byte Option, string Input, uint id)
        {
            Dialog data = new Dialog(client, stream);
            switch (Option)
            {
                case 0:
                    {

                        data.Text(""Hola mmgvo a que parte del set le quieres meter -1?"");
                        data.Option(""Garment."", 2);
                        data.Option(""Mount~Armor."", 4);
                        data.Option(""Star~Tower."", 6);
                        data.Option(""Heaven~Fan."", 8);
                        data.Option(""Riding~Crop."", 10);
                        data.Option(""Gourd/Magic~Bottle."", 12);
                        data.Option(""a nada."", 255);
                        data.AddAvatar(10).FinalizeDialog();
                        break;
                    }
                case 73:
                    {
                        data.Text(""Are you sure you want to pay 1.000 CPs to add 1 blessed attribute to the LeftWeapon?"");
                        data.Option(""Yes."", 74);
                        data.Option(""No,~I~changed~my~mind."", 1);
                        data.Option(""I~need~to~think~it~over."", 255);
                        data.AddAvatar(10).FinalizeDialog();

                        break;
                    }
                case 74:
                    {
                        if (client.Equipment.FreeEquip(Role.Flags.ConquerItem.LeftWeaponAccessory))
                        {
                            data.Text(""You need to equip Wing, first."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                            break;
                        }
                        if (client.Player.ConquerPoints > 1000)
                        {
                            Game.MsgServer.MsgGameItem item;
                            if (client.Equipment.TryGetEquip(Role.Flags.ConquerItem.LeftWeaponAccessory, out item))
                            {
                                if (item.Bless > 0)
                                {
                                    data.Text(""You already have 1 blessed attribute in Wing."");
                                    data.Option(""I~see."", 255);
                                    data.AddAvatar(10).FinalizeDialog();
                                    break;
                                }
                                item.Bless = 1;
                                item.Mode = Role.Flags.ItemMode.Update;
                                item.Send(client, stream);

                                data.Text(""Congratulation! You've added 1 blessed attribute to the Wing."");
                                data.Option(""Thank you."", 255);
                                data.AddAvatar(10).FinalizeDialog();
                                client.Player.ConquerPoints -= 1000;
                                client.Status.ItemBless += 1;
                            }
                        }
                        else
                        {
                            data.Text(""You don`t have enough CPs to attach blessed attribute to the equipment."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                        }

                        break;
                    }
                case 70:
                    {
                        data.Text(""Are you sure you want to pay 1.000 CPs to add 1 blessed attribute to the RightWeapon?"");
                        data.Option(""Yes."", 71);
                        data.Option(""No,~I~changed~my~mind."", 1);
                        data.Option(""I~need~to~think~it~over."", 255);
                        data.AddAvatar(10).FinalizeDialog();

                        break;
                    }
                case 71:
                    {
                        if (client.Equipment.FreeEquip(Role.Flags.ConquerItem.RightWeaponAccessory))
                        {
                            data.Text(""You need to equip Wing, first."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                            break;
                        }
                        if (client.Player.ConquerPoints > 1000)
                        {
                            Game.MsgServer.MsgGameItem item;
                            if (client.Equipment.TryGetEquip(Role.Flags.ConquerItem.RightWeaponAccessory, out item))
                            {
                                if (item.Bless > 0)
                                {
                                    data.Text(""You already have 1 blessed attribute in Wing."");
                                    data.Option(""I~see."", 255);
                                    data.AddAvatar(10).FinalizeDialog();
                                    break;
                                }
                                item.Bless = 1;
                                item.Mode = Role.Flags.ItemMode.Update;
                                item.Send(client, stream);

                                data.Text(""Congratulation! You've added 1 blessed attribute to the Wing."");
                                data.Option(""Thank you."", 255);
                                data.AddAvatar(10).FinalizeDialog();
                                client.Player.ConquerPoints -= 1000;
                                client.Status.ItemBless += 1;
                            }
                        }
                        else
                        {
                            data.Text(""You don`t have enough CPs to attach blessed attribute to the equipment."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                        }

                        break;
                    }
                case 12:
                    {
                        data.Text(""Are you sure you want to pay 10.000 CPs to add 1 blessed attribute to the Gourd?"");
                        data.Option(""Yes."", 13);
                        data.Option(""No,~I~changed~my~mind."", 1);
                        data.Option(""I~need~to~think~it~over."", 255);
                        data.AddAvatar(10).FinalizeDialog();

                        break;
                    }
                case 13:
                    {
                        if (client.Equipment.FreeEquip(Role.Flags.ConquerItem.Bottle))
                        {
                            data.Text(""You need to equip Gourd, first."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                            break;
                        }
                        if (client.Player.ConquerPoints > 10000)
                        {
                            Game.MsgServer.MsgGameItem item;
                            if (client.Equipment.TryGetEquip(Role.Flags.ConquerItem.Bottle, out item))
                            {
                                if (item.Bless > 0)
                                {
                                    data.Text(""You already have 1 blessed attribute in Gourd."");
                                    data.Option(""I~see."", 255);
                                    data.AddAvatar(10).FinalizeDialog();
                                    break;
                                }
                                item.Bless = 1;
                                item.Mode = Role.Flags.ItemMode.Update;
                                item.Send(client, stream);

                                data.Text(""Congratulation! You've added 1 blessed attribute to the Gourd."");
                                data.Option(""Thank you."", 255);
                                data.AddAvatar(10).FinalizeDialog();
                                if (client.InTrade) return;
                                client.Player.ConquerPoints -= 10000;
                                client.Status.ItemBless += 1;
                            }
                        }
                        else
                        {
                            data.Text(""You don`t have enough CPs to attach blessed attribute to the equipment."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                        }

                        break;
                    }
                case 10:
                    {
                        data.Text(""Are you sure you want to pay 10.000 CPs to add 1 blessed attribute to the Riding Crop?"");
                        data.Option(""Yes."", 11);
                        data.Option(""No,~I~changed~my~mind."", 1);
                        data.Option(""I~need~to~think~it~over."", 255);
                        data.AddAvatar(10).FinalizeDialog();

                        break;
                    }
                case 11:
                    {
                        if (client.Equipment.FreeEquip(Role.Flags.ConquerItem.RidingCrop))
                        {
                            data.Text(""You need to equip Riding Crop, first."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                            break;
                        }
                        if (client.Player.ConquerPoints > 10000)
                        {
                            Game.MsgServer.MsgGameItem item;
                            if (client.Equipment.TryGetEquip(Role.Flags.ConquerItem.RidingCrop, out item))
                            {
                                if (item.Bless > 0)
                                {
                                    data.Text(""You already have 1 blessed attribute in Riding Crop."");
                                    data.Option(""I~see."", 255);
                                    data.AddAvatar(10).FinalizeDialog();
                                    break;
                                }
                                if (client.InTrade) return;
                                item.Bless = 1;
                                item.Mode = Role.Flags.ItemMode.Update;
                                item.Send(client, stream);

                                data.Text(""Congratulation! You've added 1 blessed attribute to the Riding Crop."");
                                data.Option(""Thank you."", 255);
                                data.AddAvatar(10).FinalizeDialog();
                                client.Player.ConquerPoints -= 10000;
                                client.Status.ItemBless += 1;
                            }
                        }
                        else
                        {
                            data.Text(""You don`t have enough CPs to attach blessed attribute to the equipment."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                        }

                        break;
                    }
                case 8:
                    {
                        data.Text(""Are you sure you want to pay 10.000 CPs to add 1 blessed attribute to the Heaven Fan?"");
                        data.Option(""Yes."", 9);
                        data.Option(""No,~I~changed~my~mind."", 1);
                        data.Option(""I~need~to~think~it~over."", 255);
                        data.AddAvatar(10).FinalizeDialog();

                        break;
                    }
                case 9:
                    {
                        if (client.Equipment.FreeEquip(Role.Flags.ConquerItem.Fan))
                        {
                            data.Text(""You need to equip Heaven Fan, first."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                            break;
                        }
                        if (client.Player.ConquerPoints > 10000)
                        {
                            Game.MsgServer.MsgGameItem item;
                            if (client.Equipment.TryGetEquip(Role.Flags.ConquerItem.Fan, out item))
                            {
                                if (item.Bless > 0)
                                {
                                    data.Text(""You already have 1 blessed attribute in Heaven Fan."");
                                    data.Option(""I~see."", 255);
                                    data.AddAvatar(10).FinalizeDialog();
                                    break;
                                }
                                if (client.InTrade) return;
                                item.Bless = 1;
                                item.Mode = Role.Flags.ItemMode.Update;
                                item.Send(client, stream);

                                data.Text(""Congratulation! You've added 1 blessed attribute to the Heaven Fan."");
                                data.Option(""Thank you."", 255);
                                data.AddAvatar(10).FinalizeDialog();
                                client.Player.ConquerPoints -= 10000;
                                client.Status.ItemBless += 1;
                            }
                        }
                        else
                        {
                            data.Text(""You don`t have enough CPs to attach blessed attribute to the equipment."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                        }

                        break;
                    }
                case 6:
                    {
                        data.Text(""Are you sure you want to pay 10.000 CPs to add 1 blessed attribute to the Star Tower?"");
                        data.Option(""Yes."", 7);
                        data.Option(""No,~I~changed~my~mind."", 1);
                        data.Option(""I~need~to~think~it~over."", 255);
                        data.AddAvatar(10).FinalizeDialog();

                        break;
                    }
                case 7:
                    {
                        if (client.Equipment.FreeEquip(Role.Flags.ConquerItem.Tower))
                        {
                            data.Text(""You need to equip Star Tower, first."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                            break;
                        }
                        if (client.Player.ConquerPoints > 10000)
                        {
                            Game.MsgServer.MsgGameItem item;
                            if (client.Equipment.TryGetEquip(Role.Flags.ConquerItem.Tower, out item))
                            {
                                if (item.Bless > 0)
                                {
                                    data.Text(""You already have 1 blessed attribute in Star Tower."");
                                    data.Option(""I~see."", 255);
                                    data.AddAvatar(10).FinalizeDialog();
                                    break;
                                }
                                item.Bless = 1;
                                item.Mode = Role.Flags.ItemMode.Update;
                                item.Send(client, stream);

                                data.Text(""Congratulation! You've added 1 blessed attribute to the Star Tower."");
                                data.Option(""Thank you."", 255);
                                data.AddAvatar(10).FinalizeDialog();
                                client.Player.ConquerPoints -= 10000;
                                client.Status.ItemBless += 1;
                            }
                        }
                        else
                        {
                            data.Text(""You don`t have enough CPs to attach blessed attribute to the equipment."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                        }

                        break;
                    }
                case 4:
                    {
                        data.Text(""Are you sure you want to pay 10.000 CPs to add 1 blessed attribute to the Mount Armor?"");
                        data.Option(""Yes."", 5);
                        data.Option(""No,~I~changed~my~mind."", 1);
                        data.Option(""I~need~to~think~it~over."", 255);
                        data.AddAvatar(10).FinalizeDialog();

                        break;
                    }
                case 5:
                    {
                        if (client.Equipment.FreeEquip(Role.Flags.ConquerItem.SteedMount))
                        {
                            data.Text(""You need to equip Mount Armor, first."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                            break;
                        }
                        if (client.Player.ConquerPoints > 10000)
                        {
                            Game.MsgServer.MsgGameItem item;
                            if (client.Equipment.TryGetEquip(Role.Flags.ConquerItem.SteedMount, out item))
                            {
                                if (item.Bless > 0)
                                {
                                    data.Text(""You already have 1 blessed attribute in Mount Armor."");
                                    data.Option(""I~see."", 255);
                                    data.AddAvatar(10).FinalizeDialog();
                                    break;
                                }
                                if (client.InTrade) return;
                                item.Bless = 1;
                                item.Mode = Role.Flags.ItemMode.Update;
                                item.Send(client, stream);

                                data.Text(""Congratulation! You've added 1 blessed attribute to the Mount Armor."");
                                data.Option(""Thank you."", 255);
                                data.AddAvatar(10).FinalizeDialog();
                                client.Player.ConquerPoints -= 10000;
                                client.Status.ItemBless += 1;
                            }
                        }
                        else
                        {
                            data.Text(""You don`t have enough CPs to attach blessed attribute to the equipment."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                        }

                        break;
                    }
                case 2:
                    {
                        data.Text(""Are you sure you want to pay 10.000 CPs to add 1 blessed attribute to the garment?"");
                        data.Option(""Yes."", 3);
                        data.Option(""No,~I~changed~my~mind."", 1);
                        data.Option(""I~need~to~think~it~over."", 255);
                        data.AddAvatar(10).FinalizeDialog();

                        break;
                    }
                case 3:
                    {
                        if (client.Equipment.FreeEquip(Role.Flags.ConquerItem.Garment))
                        {
                            data.Text(""You need to equip Garment, first."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                            break;
                        }
                        if (client.Player.ConquerPoints > 10000)
                        {
                            Game.MsgServer.MsgGameItem item;
                            if (client.Equipment.TryGetEquip(Role.Flags.ConquerItem.Garment, out item))
                            {
                                if (item.Bless > 0)
                                {
                                    data.Text(""You already have 1 blessed attribute in Garment."");
                                    data.Option(""I~see."", 255);
                                    data.AddAvatar(10).FinalizeDialog();
                                    break;
                                }
                                if (client.InTrade) return;
                                item.Bless = 1;
                                item.Mode = Role.Flags.ItemMode.Update;
                                item.Send(client, stream);

                                data.Text(""Congratulation! You've added 1 blessed attribute to the garment."");
                                data.Option(""Thank you."", 255);
                                data.AddAvatar(10).FinalizeDialog();
                                client.Player.ConquerPoints -= 10000;
                                client.Status.ItemBless += 1;
                            }
                        }
                        else
                        {
                            data.Text(""You don`t have enough CPs to attach blessed attribute to the equipment."");
                            data.Option(""Alright."", 255);
                            data.AddAvatar(10).FinalizeDialog();
                        }

                        break;
                    }

            }
        }"
L8Jzbnw9,List View Layout,GeorgePashev_88,XML,Tuesday 23rd of April 2024 12:03:51 AM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<LinearLayout
    xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""wrap_content""
    android:orientation=""horizontal""
    android:maxHeight=""30dp""
    >

    <TextView
        android:id=""@+id/listViewName""
        android:layout_width=""284dp""
        android:layout_height=""42dp""
        android:hint=""Name""></TextView>

    <TextView
        android:id=""@+id/listViewPhone""
        android:layout_width=""366dp""
        android:layout_height=""42dp""
        android:hint=""Phone""></TextView>
    <TextView
        android:layout_width=""3dp""
        android:layout_height=""3dp""
        android:id=""@+id/listViewID""
        android:visibility=""invisible""
        android:hint=""ID""></TextView>
    <TextView
        android:layout_width=""3dp""
        android:layout_height=""3dp""
        android:id=""@+id/listViewAddress""
        android:visibility=""invisible""
        android:hint=""Address""></TextView>
    <TextView
        android:layout_width=""3dp""
        android:layout_height=""3dp""
        android:id=""@+id/listViewEmail""
        android:visibility=""invisible""
        android:hint=""Email""></TextView>


</LinearLayout>"
jfBZnNRw,–ü—Ä–∏–º–µ—Ä  —Ñ–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—á—Ç—ã –±–µ–∑ –ø–æ—Ç–≤–µ–∂–¥–µ–Ω–∏—è,saloev,JavaScript,Monday 22nd of April 2024 11:35:21 PM CDT,"FeaturesToggle._support._features['mail_auth'] = {                    current_version: 2,                    supported_version_list: [0, 1, 2],                };
AuthAvailableList._setAvailableList(B.app.config.getActivePivotInfo(), [AUTH_AVAILABLE_LIST.phone_number, AUTH_AVAILABLE_LIST.mail])
PLAYER.set({    ...PLAYER.get(),    has_email: 1, email_mask: 'fe************1@gmail.com'});

addMockRequestList = (mock_list) => {   
   for (const mock_request of mock_list) { FakeServer.addMockedRequest(mock_request.method, mock_request); }              
   FakeServer.init({});
}

// –º–æ–∫–∞–µ–º —Å—Ç–∞—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ë–ï–ó –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 
addMockRequestList([{    
   // –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –∑–∞–º–æ–∫–∞—Ç—å    
  method: '/security/mail/change', // –ø—É—Ç—å –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞    
  
 // –∫–∞–∫–æ–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç (–ù–£–ñ–ù–û –ß–¢–û–ë–´ –û–ù –¢–û–ß–ù–û –°–û–í–ü–ê–î–ê–õ –° –û–¢–í–ï–¢–û–ú –û–¢ –ë–≠–ö–ï–ù–î–ê —Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä)  status=""ok"" - –ù–ï –ö–û–ü–ò–†–£–ï–ú 
 ""response"": {
        ""change_mail_story_info"": {
            ""change_mail_story_key"": ""keyexample"",
            ""scenario"": ""short_change_mail"",
            ""data"": {
                ""next_resend"": 1710153789,
                ""code_available_attempts"": 3,
                ""expire_at"": 1710156789,
                ""stage"": ""entering_first_code""
            }
        }
    }
}]);

// –º–æ–∫–∞–µ–º —Å—Ç–∞—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ë–ï–ó –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 
addMockRequestList([{    
   // –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –∑–∞–º–æ–∫–∞—Ç—å    
  method: '/security/mail/setOnShortChange', // –ø—É—Ç—å –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞    
  
 // –∫–∞–∫–æ–π –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç (–ù–£–ñ–ù–û –ß–¢–û–ë–´ –û–ù –¢–û–ß–ù–û –°–û–í–ü–ê–î–ê–õ –° –û–¢–í–ï–¢–û–ú –û–¢ –ë–≠–ö–ï–ù–î–ê —Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä)  status=""ok"" - –ù–ï –ö–û–ü–ò–†–£–ï–ú 
 ""response"": {}
}]);"
QPPiaU3H,Untitled,ma39isy,Oracle 8,Monday 22nd of April 2024 11:18:01 PM CDT,"SELECT
	A.*,
	to_char(A.BIRTHDATE, 'DD/MM/YYYY') AS BIRTHDATE
FROM
	(
	SELECT
		*
	FROM
		STUDENT S
	LEFT JOIN ADDITIONALSTUDENTDATA
			USING(STUDENTID)
	LEFT JOIN STUDYPROGRAM SP ON
		(DECODE(S.CLASSIFICATIONID, '64', '64', S.STUDYPROGRAMID)= SP.STUDYPROGRAMID)
	LEFT JOIN FACULTIES
			USING(FACULTYID)
	LEFT JOIN (
		SELECT
			F.STUDENTID,
			F.FAMILYNAME AS FATHER,
			I.FAMILYNAME AS MOTHER
		FROM
			STUDENTSFAMILY F
		FULL JOIN STUDENTSFAMILY I ON
			(F.STUDENTID = I.STUDENTID)
		WHERE
			F.RELATIONSHIP = 'FATHER'
			AND I.RELATIONSHIP = 'MOTHER')
			USING(STUDENTID)
	LEFT JOIN
(
		SELECT
			STUDENTID,
			VALUE AS CELLPHONE
		FROM
			account
		LEFT JOIN ADDITIONALINFO
				USING(INFOID)
		WHERE
			INFONAME = 'CELLPHONE')
			USING (STUDENTID)
	LEFT JOIN
(
		SELECT
			STUDENTID,
			VALUE AS ORIGINPHONE
		FROM
			account
		LEFT JOIN ADDITIONALINFO
				USING(INFOID)
		WHERE
			INFONAME = 'ORIGINPHONE')
			USING (STUDENTID)
	WHERE
		STUDENTID = '6706213100' ) A"
XZ8YGi5w,Untitled,ma39isy,Oracle 8,Monday 22nd of April 2024 11:15:29 PM CDT,"SELECT
	A.*,
	to_char(A.BIRTHDATESTUDENT, 'DD/MM/YYYY') AS BIRTHDATE,
	to_char(A.YUDISIUMDATE, 'DD/MM/YYYY') AS YUDISIUMDATE
FROM
	(
	SELECT
		*
	FROM
		MASTERDATA.STUDENT S
	LEFT JOIN MASTERDATA.ADDITIONALSTUDENTDATA
			USING(STUDENTID)
	LEFT JOIN MASTERDATA.STUDYPROGRAM SP ON
		(DECODE(S.CLASSIFICATIONID, '64', '64', S.STUDYPROGRAMID)= SP.STUDYPROGRAMID)
	LEFT JOIN MASTERDATA.FACULTIES
			USING(FACULTYID)
	JOIN GRADUATION_PARTICIPANTS
			USING (STUDENTID)
	WHERE
		STUDENTID = '1102190131') A"
Ww6Rpu1Q,Mekanism Reactor Control Functions,TwitchBlade,Lua,Monday 22nd of April 2024 11:11:35 PM CDT," {
    getLogicMode         [FUNCTION],
    getFuelNeeded        [FUNCTION],
    getEnvironmentalLoss [FUNCTION],
    getHeatedCoolant     [FUNCTION],
    getFuelFilledPercentage[FUNCTION],
    getWaste             [FUNCTION],
    getRedstoneMode      [FUNCTION],
    setLogicMode         [FUNCTION],
    getMaxPos            [FUNCTION],
    getActualBurnRate    [FUNCTION],
    isFormed             [FUNCTION],
    getHeatingRate       [FUNCTION],
    isForceDisabled      [FUNCTION],
    getHeatCapacity      [FUNCTION],
    getWasteCapacity     [FUNCTION],
    getBurnRate          [FUNCTION],
    getMinPos            [FUNCTION],
    getCoolantCapacity   [FUNCTION],
    getWasteNeeded       [FUNCTION],
    activate             [FUNCTION],
    getFuel              [FUNCTION],
    getFuelAssemblies    [FUNCTION],
    getCoolantFilledPercentage[FUNCTION],
    getCoolantNeeded     [FUNCTION],
    help                 [FUNCTION],
    getHeatedCoolantFilledPercentage[FUNCTION],
    getWidth             [FUNCTION],
    getHeatedCoolantNeeded[FUNCTION],
    getTemperature       [FUNCTION],
    setRedstoneMode      [FUNCTION],
    getLength            [FUNCTION],
    getHeatedCoolantCapacity[FUNCTION],
    getFuelSurfaceArea   [FUNCTION],
    getMaxBurnRate       [FUNCTION],
    getRedstoneLogicStatus[FUNCTION],
    getDamagePercent     [FUNCTION],
    scram                [FUNCTION],
    getHeight            [FUNCTION],
    setBurnRate          [FUNCTION],
    getBoilEfficiency    [FUNCTION],
    getWasteFilledPercentage[FUNCTION],
    getStatus            [FUNCTION],
    getFuelCapacity      [FUNCTION],
    getCoolant           [FUNCTION]
 }"
rpWWz83C,Untitled,ma39isy,PHP,Monday 22nd of April 2024 11:11:14 PM CDT,"public function GetFinalGPA($studentId, $fasttrack = """")
    {
        $where = """";
        if ($fasttrack !== '') {
            $where = "" AND STATUSFASTRACK='$fasttrack'"";
        } else {
            include ""db.config.php"";
            $studentDB = new DBStudent($academicConfig);
            if ($studentDB->IsExistStudent($studentId)) {
                $where = "" AND STATUSFASTRACK IS NULL"";
            }
        }

        //Indeks T tidak dihitung 13072016
        $query = "" select round(sum(MULTIPLYCREDITCONVERSION)/sum(CREDIT),2) as GPA from FINALGRADE where STUDENTID='$studentId' and (INDEXPOINT is not NULL AND INDEXPOINT<>'T') $where"";
        //$query = ""SELECT ROUND (SUM (MULTIPLYCREDITCONVERSION) / SUM (CREDIT),2) AS GPA FROM FINALGRADE WHERE STUDENTID = '"".$studentId.""' AND (INDEXPOINT IS NOT NULL OR INDEXPOINT <> 'T') AND PASS_STATUS = 'Y'"";
        //echo ""<br>$query"";
        $q = $this->ExecuteQuery($query);
        $r = $this->FetchArray($q);
        return (isset($r['GPA'])) ? floatval($r['GPA']) : 0;
    }"
13BKLBNQ,C√≥digo JavaScript Cat√°logo Productos WA GS OV - Corregido,oscarviedma,JavaScript,Monday 22nd of April 2024 09:39:13 PM CDT,"let carrito = [];
let carritoTotal = 0;
let productosFiltrados = []; 

const preloader = document.getElementById('preloader');
preloader.style.display = 'block';

let datosProductos = [];
const contenedorProductos = document.getElementById('contenedor-productos');
const mensajeNoEncontrado = document.getElementById('mensaje-no-encontrado'); 
contenedorProductos.style.opacity = '0';

function formatearPrecio(precio) {
  return precio.toLocaleString('en-US');
  // return precio.toLocaleString('es-ES', { style: 'currency', currency: 'EUR' });
  // return precio.toLocaleString('es-MX', { style: 'currency', currency: 'MXN' });
  // return precio.toLocaleString('es-CO', { style: 'currency', currency: 'COP' });
}

// REEMPLAZAR URL APPSCRIPT GOOGLE SHEETS
fetch('https://script.google.com/macros/s/AKfycbzxho78Qr07ADOpzdfF-acJxTztln4aZnQUoptrYHJcNNLMPS1Z_oIzrTfbQbC6Bwlc/exec') 
  .then(response => response.json())
  .then(data => {
    datosProductos = data;
    productosFiltrados = data; 
    renderizarProductos(productosFiltrados);
    preloader.style.display = 'none';
    contenedorProductos.style.opacity = '1';
    document.getElementById('contenedor-buscador').style.display = '';
    generarCategorias(data);
  })
  .catch(error => {
    console.error('Error al obtener el JSON:', error);
    preloader.style.display = 'none';
  });

function renderizarProductos(productos) {
  contenedorProductos.innerHTML = '';
  if (productos.length === 0) {
    mensajeNoEncontrado.style.display = 'block';
  } else {
    mensajeNoEncontrado.style.display = 'none';
    productos.forEach((producto, index) => {
      var productoDiv = document.createElement('div');
      productoDiv.className = 'producto';

      productoDiv.innerHTML = `
          <div class=""imagen"">
              <img src=""${producto.imagen}"" alt=""Imagen del producto"">
          </div>
          <div class=""info"">
              <h4 class=""titulo"">${producto.titulo}</h4>
              <h3 class=""precio"">$${formatearPrecio(producto.precio)} USD</h3>
              <div class=""metadatos"" id=""atributo${index}"">
                  ${producto.atributos && Object.keys(producto.atributos).length > 0 ?
                    Object.entries(producto.atributos).map(([nombreAtributo, valores]) => {
                      const nombreAtributoLowerCase = nombreAtributo.toLowerCase();
                      if (valores.filter(Boolean).length > 0) {
                        return `<div class=""meta"">
                                    <label for=""${nombreAtributoLowerCase}${index}"">${nombreAtributo}:</label>
                                    <select id=""${nombreAtributoLowerCase}${index}"">
                                        <option value="""" selected=""selected"" disabled=""disabled"">Seleccionar ${nombreAtributo}</option>
                                        ${valores.map(valor => `<option value=""${valor}"">${valor}</option>`).join('')}
                                    </select>
                                </div>`;
                      } else {
                        return ''; 
                      }
                    }).join('') : ''}
              </div>
              <button class=""agregar"" data-info='${JSON.stringify({ nombre: producto.titulo, precio: producto.precio, atributos: producto.atributos, index: index })}'>Agregar al carrito</button>
          </div>
      `;

      contenedorProductos.appendChild(productoDiv);
    });
  }

  inicializarFuncionalidad();
}

function generarCategorias(productos) {
  const categorias = new Set(['Todos']);
  productos.forEach(producto => {
    if (producto.categorias && producto.categorias.length > 0) {
      producto.categorias.forEach(categoria => {
        if (categoria) {
          categorias.add(categoria);
        }
      });
    }
  });

  const contenedorCategorias = document.getElementById('categorias-contenedor');
  contenedorCategorias.innerHTML = '';

  if (categorias.size === 1) {
    contenedorCategorias.style.display = 'none';
  } else {
    contenedorCategorias.style.display = '';
    categorias.forEach((categoria, index) => {
      let botonCategoria = document.createElement('button');
      botonCategoria.textContent = categoria;
      if (categoria === 'Todos') {
        botonCategoria.classList.add('active');
      }
      botonCategoria.onclick = () => filtrarPorCategoria(categoria, botonCategoria);
      contenedorCategorias.appendChild(botonCategoria);
    });
  }
}

document.getElementById('buscar-producto').addEventListener('input', function(e) {
  const busqueda = e.target.value.toLowerCase();
  productosFiltrados = datosProductos.filter(producto => producto.titulo.toLowerCase().includes(busqueda));
  renderizarProductos(productosFiltrados);
  document.getElementById('limpiar-busqueda').style.display = busqueda ? '' : 'none';
  reinicializarFuncionalidad();
});

document.getElementById('limpiar-busqueda').addEventListener('click', function() {
  document.getElementById('buscar-producto').value = '';
  this.style.display = 'none';
  productosFiltrados = datosProductos; 
  renderizarProductos(productosFiltrados); 
  reinicializarFuncionalidad();
});

function filtrarPorCategoria(categoriaSeleccionada, botonClickeado) {
  if (categoriaSeleccionada === 'Todos') {
    renderizarProductos(datosProductos);
  } else {
    const productosFiltrados = datosProductos.filter(producto => producto.categorias.includes(categoriaSeleccionada));
    renderizarProductos(productosFiltrados);
  }
  actualizarBotonActivo(botonClickeado);
  reinicializarFuncionalidad();
}

function actualizarBotonActivo(botonClickeado) {
  const botonesCategoria = document.querySelectorAll('#categorias-contenedor button');
  botonesCategoria.forEach(boton => {
    boton.classList.remove('active');
  });
  botonClickeado.classList.add('active');
}

function reinicializarFuncionalidad() {
  eliminarEventosAgregarAlCarrito();
  inicializarFuncionalidad();
}

function eliminarEventosAgregarAlCarrito() {
  const productos = document.querySelectorAll('.producto');
  productos.forEach(producto => {
    const agregarButton = producto.querySelector('.agregar');
    agregarButton.removeEventListener('click', agregarProductoAlCarrito);
  });
}

const carritoContainer = document.getElementById('carrito-container');
const carritoIcon = document.getElementById('carrito-icon');
const cerrarCarrito = document.getElementById('cerrar-carrito');
const carritoVacioMensaje = document.getElementById('carrito-vacio-mensaje');

carritoIcon.addEventListener('click', function () {
  const carritoVisible = carritoContainer.style.right === '0px';
  carritoContainer.style.right = carritoVisible ? '-350px' : '0px';

  if (carritoVisible) {
    carritoVacioMensaje.style.display = 'none';
  }
});

cerrarCarrito.addEventListener('click', function () {
  carritoContainer.style.right = '-350px';
});

function desplazarCarrito() {
  const anchoPantalla = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

  if (anchoPantalla > 768) {
    carritoContainer.style.right = '0px';
    carritoVacioMensaje.style.display = 'none';
  }
}

function inicializarFuncionalidad() {
  const productos = document.querySelectorAll('.producto');
  const carritoLista = document.getElementById('carrito-lista');
  const total = document.getElementById('total');
  const carritoContador = document.getElementById('carrito-contador');
  const carritoVacioMensaje = document.getElementById('carrito-vacio-mensaje');
  const vaciarCarritoButton = document.getElementById('vaciar-carrito');

  function mostrarMensajeCarritoVacio() {
    carritoVacioMensaje.style.display = carrito.length === 0 ? 'block' : 'none';
  }

  function agregarProductoAlCarrito(info) {
    const { nombre, precio, atributos, index } = JSON.parse(info || '{}');

    if (!validarAtributosSeleccionados(index)) {
      return;
    }

    let nombreConVariantes = `${nombre}`;
    for (const [nombreAtributo, valorSeleccionado] of Object.entries(atributos)) {
      const selectElement = document.getElementById(`${nombreAtributo.toLowerCase()}${index}`);
      const valorSeleccionado = selectElement ? selectElement.value : null;

      if (valorSeleccionado) {
        nombreConVariantes += ` - ${nombreAtributo}: ${valorSeleccionado}`;
      }
    }

    const producto = { nombre: nombreConVariantes, precio };
    carrito.push(producto);

    const listItem = document.createElement('li');
    listItem.textContent = `${nombreConVariantes} - $${formatearPrecio(producto.precio)}`;
    const eliminarButton = document.createElement('a');
    eliminarButton.innerHTML = '&amp;#xe051;';
    eliminarButton.classList.add('eliminar');
    eliminarButton.addEventListener('click', () => eliminarProductoDelCarrito(producto, listItem));
    listItem.appendChild(eliminarButton);
    carritoLista.appendChild(listItem);

    carritoTotal += precio;
    total.textContent = formatearPrecio(carritoTotal);
    carritoContador.textContent = carrito.length;
    desplazarCarrito();
    mostrarMensajeCarritoVacio();

    carritoIcon.classList.add('shaking');

    setTimeout(() => {
      carritoIcon.classList.remove('shaking');
    }, 500);
  }

  function eliminarProductoDelCarrito(producto, listItem) {
    const index = carrito.indexOf(producto);
    if (index !== -1) {
      carrito.splice(index, 1);
      carritoLista.removeChild(listItem);
      carritoTotal -= producto.precio;
      total.textContent = formatearPrecio(carritoTotal);
      carritoContador.textContent = carrito.length;
      mostrarMensajeCarritoVacio();
    }
  }

  productos.forEach((producto, index) => {
    const agregarButton = producto.querySelector('.agregar');
    const info = agregarButton.getAttribute('data-info');

    agregarButton.addEventListener('click', () => {
      agregarProductoAlCarrito(info);
    });
  });

  mostrarMensajeCarritoVacio();
}

document.addEventListener('DOMContentLoaded', (event) => {
  const enviarWhatsAppButton = document.getElementById('enviar-whatsapp');
  enviarWhatsAppButton.addEventListener('click', () => {
    const carritoTexto = carrito.map(producto => {
      return `${producto.nombre} - $${formatearPrecio(producto.precio)}`;
    }).join('\n'); 

    const mensajeWhatsApp = '*Mi Pedido:*\n' + carritoTexto + '\n*TOTAL: $' + formatearPrecio(carritoTotal) + '*';
    // REEMPLAZAR N√öMERO WHATSAPP
    const whatsappURL = `https://wa.me/529512345678?text=${encodeURIComponent(mensajeWhatsApp)}`; // REEMPLAZAR N√öMERO WHATSAPP
    window.open(whatsappURL, '_blank');
  });
});

function validarAtributosSeleccionados(index) {
  const selects = document.querySelectorAll(`#atributo${index} select`);
  for (const select of selects) {
    if (select.value === """") {
      alert(""Por favor, selecciona todas las opciones antes de agregar al carrito."");
      return false;
    }
  }
  return true;
}

// Mover #carrito-container y #carrito-icon dentro de #page-container
var pageContainer = document.getElementById('page-container');
pageContainer.appendChild(carritoContainer);
pageContainer.appendChild(carritoIcon);"
UMKfkm0A,/products/615420ad2e37d1321c6a56c8/expansions/617a866e56d44f24efae19e0/calculate,Vanciel,JSON,Monday 22nd of April 2024 09:18:05 PM CDT,"{""categoryId"":""612e3eee3e5a4b5225a18ccc"",""discountValue"":""15.00"",""promotionId"":""6189ba1603efa4570e89fd60"",""partnerId"":""60c73bf6f07275035b19d95a"",""criterias"":{""earthquakeZone"":""5"",""floodZone"":""2"",""constructionClass"":""PROPCCLS1"",""partner"":""PAR000000001"",""code"":""EQVET"",""tsi"":""100000000"",""tsiEncrypt"":""LLGZ8jeR1fbjqzFR1Qbs4WTbiviA3X0wEA=="",""up"":""""},""session"":{""customerId"":""6311880dbb2ed900014af608"",""group_customer"":{""id"":""65791cdf4d530f314d24b104"",""group_id"":""60823ea247f60209b8eb1ad6"",""customer_id"":""6311880dbb2ed900014af608"",""group"":{""id"":""60823ea247f60209b8eb1ad6"",""code"":""GRP00001"",""business_entity_id"":""BUSENTITY01"",""company_name"":""KBRU"",""business_type_id"":""BUSTYPEOTH"",""company_email"":""dian.bojezff@gmail.com"",""company_cp_name"":""dian kun"",""company_cp_mobile_no"":""08123456788"",""last_status_id"":1}}}}"
ihJin4dC,Untitled,alexander_bazhenov,YAML,Monday 22nd of April 2024 08:51:44 PM CDT,"---

rules:
  braces:
    max-spaces-inside: 1
    level: error
  brackets:
    max-spaces-inside: 1
    level: error
  colons:
    max-spaces-after: -1
    level: error
  commas:
    max-spaces-after: -1
    level: error
  comments: disable
  comments-indentation: disable
  document-start: enable
  empty-lines:
    max: 2
    level: error
  hyphens:
    level: error
  indentation: disable
  key-duplicates: enable
  line-length:
    max: 120
    level: error
  new-line-at-end-of-file: disable
  new-lines:
    type: unix
  trailing-spaces: enable
  truthy:
    allowed-values: ['true', 'false']
    check-keys: true"
U4mbqHT9,Untitled,alexander_bazhenov,JSON,Monday 22nd of April 2024 08:50:43 PM CDT,"{
  ""extends"": ""recommended"",
  ""rules"": {
    ""comments.ClassJavadoc"": ""off"",
    ""formatting.Indentation"": {
      ""spacesPerIndentLevel"": 4,
      ""severity"": ""info""
    },
    ""braces.ElseBlockBraces"": {
      ""enabled"": false
    },
    ""braces.ForStatementBraces"": {
      ""enabled"": false
    },
    ""braces.IfStatementBraces"": {
      ""enabled"": false
    },
    ""braces.WhileStatementBraces"": {
      ""enabled"": false
    },
    ""unused.UnusedVariable"": {
      ""ignoreVariableNames"": ""__""
    },
    ""size.NestedBlockDepth"": {
      ""maxNestedBlockDepth"": 5
    },
    ""size.ParameterCount"": {
      ""enabled"": false
    },
    ""naming.VariableName"": {
      ""enabled"": false
    },
    ""ConsecutiveBlankLines"": {
      ""enabled"": false
    },
    ""CatchException"": {
      ""enabled"": false
    },
    ""Instanceof"": {
      ""enabled"": false
    },
    ""ImplicitReturnStatement"": {
      ""enabled"": false
    },
    ""ImplicitClosureParameter"": {
      ""enabled"": false
    },
    ""convention.CompileStatic"": {
      ""enabled"": false
    },
    ""DuplicateStringLiteral"": {
      ""enabled"": false
    },
    ""DuplicateNumberLiteral"": {
      ""enabled"": false
    },
    ""UnnecessaryReturnKeyword"": ""info""
  }
}"
KHMunnZW,ola,ImAezzY,Lua,Monday 22nd of April 2024 07:39:56 PM CDT,tchau
zcmwjTYk,Untitled,s-sols,CSS,Monday 22nd of April 2024 07:34:01 PM CDT,"body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .vad-product-design-gallery {
	opacity: 1 !important;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .vad-product-design-gallery .vad-product-design-gallery__image:not(.flex-active-slide) {
	display: none !important;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .vad-product-design-gallery .vad-product-design-gallery__image:nth-of-type(1) {
	display: block !important;
	margin-bottom: 10px !important;
}

body.single-product .vad-product-design-gallery .vad-product-design-gallery__image {
	margin-bottom: 0px !important;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .vad-product-design-gallery .vad-product-design-gallery__image:nth-of-type(3) {
	display: block !important;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .vad-product-design-gallery .vad-product-design-gallery__image:nth-of-type(3) {
	margin-left: 1.3em;
	width: 30% !important;
	padding: 0 5px;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .vad-product-design-gallery .vad-product-design-gallery__image:nth-of-type(3) img {
	border: 2px solid #e44e16;
	border-radius: 8px;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .flex-viewport {
	height: auto;
	aspect-ratio: 1;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .flex-viewport .vad-product-design-gallery__wrapper {
	height: 100% !important;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .flex-viewport .vad-product-design-gallery__wrapper .vad-product-design-gallery__image {
	height: 100% !important;
}

body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .vad_product_gallery .flex-control-nav.flex-control-thumbs:has(.flex-active) .keep-visible:not(.flex-active) {
	display: none !important;
}

/*body.single-product:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .vad-product-design-gallery .flex-viewport .vad-product-design-gallery__image {
	display: block !important;
}*/
"
epZqV1QQ,2024-04-22_stats.json,rdp_snitch,JSON,Monday 22nd of April 2024 07:18:07 PM CDT,"{
  ""ip"": {
    ""36.137.176.244"": 54,
    ""58.218.204.183"": 9,
    ""180.93.172.84"": 3,
    ""198.235.24.166"": 9,
    ""87.251.75.64"": 3,
    ""87.251.75.145"": 6,
    ""98.176.6.199"": 3,
    ""185.170.144.3"": 6,
    ""103.166.184.11"": 3,
    ""194.165.16.76"": 6,
    ""123.58.207.151"": 3,
    ""194.165.16.73"": 9,
    ""123.56.20.194"": 6,
    ""45.227.254.9"": 9,
    ""196.190.117.7"": 3,
    ""13.231.185.95"": 6,
    ""198.235.24.194"": 9,
    ""203.137.68.45"": 6,
    ""36.91.222.100"": 3,
    ""62.204.41.225"": 18,
    ""167.94.138.33"": 3,
    ""116.140.196.215"": 3,
    ""106.246.227.18"": 6,
    ""185.73.125.86"": 3,
    ""198.235.24.159"": 9,
    ""71.6.186.12"": 3,
    ""112.4.139.162"": 3,
    ""134.255.252.189"": 6,
    ""212.41.9.11"": 9,
    ""194.165.16.37"": 6,
    ""198.235.24.212"": 9,
    ""45.227.254.26"": 6
  },
  ""asn"": {
    ""AS9808"": 54,
    ""AS4134"": 9,
    ""AS135944"": 3,
    ""AS396982"": 36,
    ""AS208091"": 12,
    ""AS22773"": 3,
    ""AS197414"": 6,
    ""AS135905"": 3,
    ""AS48721"": 21,
    ""AS135377"": 3,
    ""AS37963"": 6,
    ""AS267784"": 15,
    ""AS24757"": 3,
    ""AS16509"": 6,
    ""AS4694"": 6,
    ""AS7713"": 3,
    ""AS59425"": 18,
    ""AS398324"": 3,
    ""AS4837"": 3,
    ""AS3786"": 6,
    ""AS10439"": 3,
    ""AS56046"": 3,
    ""AS30823"": 6,
    ""AS49505"": 9
  },
  ""isp"": {
    ""China Mobile"": 54,
    ""Chinanet"": 9,
    ""SPT"": 3,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 18,
    ""Cox Communications Inc."": 3,
    ""CLOUDFLY"": 3,
    ""Flyservers S.A."": 36,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Hangzhou Alibaba Advertising Co"": 6,
    ""Ethiotelecom"": 3,
    ""Amazon Technologies Inc."": 6,
    ""IDC Frontier Inc."": 6,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Horizon LLC"": 18,
    ""Censys, Inc."": 3,
    ""China Unicom CHINA169 Network"": 3,
    ""LG DACOM Corporation"": 6,
    ""CariNet, Inc."": 3,
    ""China Mobile Communications Corporation"": 3,
    ""aurologic GmbH"": 6,
    ""OOO \""Network of data-centers \""Selectel\"""": 9
  },
  ""org"": {
    ""China Mobile Communications Corporation"": 57,
    ""Chinanet JS"": 9,
    ""Saigon Postel Corporation"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 9,
    ""Cox Communications"": 3,
    ""Xhostis"": 9,
    ""Cloudfly Corporation"": 3,
    ""Flyservers S.A"": 21,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Aliyun Computing Co., LTD"": 6,
    ""UAB Host Baltic"": 15,
    ""Unknown"": 12,
    ""AWS EC2 (ap-northeast-1)"": 6,
    ""IDCFNet"": 6,
    ""Telekomunikasi Indonesia"": 3,
    ""Horizon LLC"": 18,
    ""Censys, Inc"": 3,
    ""China United Network Communications Corporation Limited"": 3,
    ""Boranet"": 6,
    ""sysadmin@cari.net"": 3,
    ""ZAP-Hosting GmbH & Co. KG"": 6
  },
  ""regionName"": {
    ""Shanghai"": 54,
    ""Jiangsu"": 12,
    ""Ho Chi Minh"": 3,
    ""California"": 42,
    ""North Holland"": 18,
    ""Da Nang"": 3,
    ""Kaunas"": 21,
    ""England"": 3,
    ""Beijing"": 9,
    ""Vilnius"": 15,
    ""Addis Ababa"": 3,
    ""Tokyo"": 12,
    ""Jakarta"": 3,
    ""Moscow"": 27,
    ""Michigan"": 3,
    ""Seoul"": 6,
    ""Hesse"": 6
  },
  ""country"": {
    ""China"": 75,
    ""Vietnam"": 6,
    ""United States"": 45,
    ""The Netherlands"": 18,
    ""Lithuania"": 36,
    ""United Kingdom"": 3,
    ""Ethiopia"": 3,
    ""Japan"": 12,
    ""Indonesia"": 3,
    ""Russia"": 27,
    ""South Korea"": 6,
    ""Germany"": 6
  },
  ""account"": {
    ""hello"": 93,
    ""ObZmWurjL"": 3,
    ""MnKBFD"": 3,
    ""vclCgN"": 3,
    ""Administr"": 18,
    ""Test"": 48,
    ""Administrator"": 3,
    ""Domain"": 30,
    ""OzWBIUSPA"": 3,
    ""VBvDnf"": 3,
    ""SWELUH"": 3,
    ""(empty)"": 12,
    ""NMeJNvehC"": 3,
    ""ZALlIt"": 3,
    ""RxRmgy"": 3,
    ""rYNKPsHmI"": 3,
    ""KTMSxA"": 3,
    ""fHMolE"": 3
  },
  ""keyboard"": {
    ""Unknown"": 240
  },
  ""client_build"": {
    ""Unknown"": 240
  },
  ""client_name"": {
    ""Unknown"": 240
  },
  ""ip_type"": {
    ""mobile"": 63,
    ""proxy"": 9,
    ""hosting"": 69,
    ""Unknown"": 99
  }
}"
ZeafjFnV,2024-04-22_stats.json,rdp_snitch,JSON,Monday 22nd of April 2024 07:16:09 PM CDT,"{
  ""ip"": {
    ""36.137.176.244"": 36,
    ""58.218.204.183"": 6,
    ""180.93.172.84"": 2,
    ""198.235.24.166"": 6,
    ""87.251.75.64"": 2,
    ""87.251.75.145"": 4,
    ""98.176.6.199"": 2,
    ""185.170.144.3"": 4,
    ""103.166.184.11"": 2,
    ""194.165.16.76"": 4,
    ""123.58.207.151"": 2,
    ""194.165.16.73"": 6,
    ""123.56.20.194"": 4,
    ""45.227.254.9"": 6,
    ""196.190.117.7"": 2,
    ""13.231.185.95"": 4,
    ""198.235.24.194"": 6,
    ""203.137.68.45"": 4,
    ""36.91.222.100"": 2,
    ""62.204.41.225"": 12,
    ""167.94.138.33"": 2,
    ""116.140.196.215"": 2,
    ""106.246.227.18"": 4,
    ""185.73.125.86"": 2,
    ""198.235.24.159"": 6,
    ""71.6.186.12"": 2,
    ""112.4.139.162"": 2,
    ""134.255.252.189"": 4,
    ""212.41.9.11"": 6,
    ""194.165.16.37"": 4,
    ""198.235.24.212"": 6,
    ""45.227.254.26"": 4
  },
  ""asn"": {
    ""AS9808"": 36,
    ""AS4134"": 6,
    ""AS135944"": 2,
    ""AS396982"": 24,
    ""AS208091"": 8,
    ""AS22773"": 2,
    ""AS197414"": 4,
    ""AS135905"": 2,
    ""AS48721"": 14,
    ""AS135377"": 2,
    ""AS37963"": 4,
    ""AS267784"": 10,
    ""AS24757"": 2,
    ""AS16509"": 4,
    ""AS4694"": 4,
    ""AS7713"": 2,
    ""AS59425"": 12,
    ""AS398324"": 2,
    ""AS4837"": 2,
    ""AS3786"": 4,
    ""AS10439"": 2,
    ""AS56046"": 2,
    ""AS30823"": 4,
    ""AS49505"": 6
  },
  ""isp"": {
    ""China Mobile"": 36,
    ""Chinanet"": 6,
    ""SPT"": 2,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 12,
    ""Cox Communications Inc."": 2,
    ""CLOUDFLY"": 2,
    ""Flyservers S.A."": 24,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Hangzhou Alibaba Advertising Co"": 4,
    ""Ethiotelecom"": 2,
    ""Amazon Technologies Inc."": 4,
    ""IDC Frontier Inc."": 4,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Horizon LLC"": 12,
    ""Censys, Inc."": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""LG DACOM Corporation"": 4,
    ""CariNet, Inc."": 2,
    ""China Mobile Communications Corporation"": 2,
    ""aurologic GmbH"": 4,
    ""OOO \""Network of data-centers \""Selectel\"""": 6
  },
  ""org"": {
    ""China Mobile Communications Corporation"": 38,
    ""Chinanet JS"": 6,
    ""Saigon Postel Corporation"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 6,
    ""Cox Communications"": 2,
    ""Xhostis"": 6,
    ""Cloudfly Corporation"": 2,
    ""Flyservers S.A"": 14,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Aliyun Computing Co., LTD"": 4,
    ""UAB Host Baltic"": 10,
    ""Unknown"": 8,
    ""AWS EC2 (ap-northeast-1)"": 4,
    ""IDCFNet"": 4,
    ""Telekomunikasi Indonesia"": 2,
    ""Horizon LLC"": 12,
    ""Censys, Inc"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""Boranet"": 4,
    ""sysadmin@cari.net"": 2,
    ""ZAP-Hosting GmbH & Co. KG"": 4
  },
  ""regionName"": {
    ""Shanghai"": 36,
    ""Jiangsu"": 8,
    ""Ho Chi Minh"": 2,
    ""California"": 28,
    ""North Holland"": 12,
    ""Da Nang"": 2,
    ""Kaunas"": 14,
    ""England"": 2,
    ""Beijing"": 6,
    ""Vilnius"": 10,
    ""Addis Ababa"": 2,
    ""Tokyo"": 8,
    ""Jakarta"": 2,
    ""Moscow"": 18,
    ""Michigan"": 2,
    ""Seoul"": 4,
    ""Hesse"": 4
  },
  ""country"": {
    ""China"": 50,
    ""Vietnam"": 4,
    ""United States"": 30,
    ""The Netherlands"": 12,
    ""Lithuania"": 24,
    ""United Kingdom"": 2,
    ""Ethiopia"": 2,
    ""Japan"": 8,
    ""Indonesia"": 2,
    ""Russia"": 18,
    ""South Korea"": 4,
    ""Germany"": 4
  },
  ""account"": {
    ""hello"": 62,
    ""ObZmWurjL"": 2,
    ""MnKBFD"": 2,
    ""vclCgN"": 2,
    ""Administr"": 12,
    ""Test"": 32,
    ""Administrator"": 2,
    ""Domain"": 20,
    ""OzWBIUSPA"": 2,
    ""VBvDnf"": 2,
    ""SWELUH"": 2,
    ""(empty)"": 8,
    ""NMeJNvehC"": 2,
    ""ZALlIt"": 2,
    ""RxRmgy"": 2,
    ""rYNKPsHmI"": 2,
    ""KTMSxA"": 2,
    ""fHMolE"": 2
  },
  ""keyboard"": {
    ""Unknown"": 160
  },
  ""client_build"": {
    ""Unknown"": 160
  },
  ""client_name"": {
    ""Unknown"": 160
  },
  ""ip_type"": {
    ""mobile"": 42,
    ""proxy"": 6,
    ""hosting"": 46,
    ""Unknown"": 66
  }
}"
7FYCTVN1,2024-04-22_stats.json,rdp_snitch,JSON,Monday 22nd of April 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""36.137.176.244"": 18,
    ""58.218.204.183"": 3,
    ""180.93.172.84"": 1,
    ""198.235.24.166"": 3,
    ""87.251.75.64"": 1,
    ""87.251.75.145"": 2,
    ""98.176.6.199"": 1,
    ""185.170.144.3"": 2,
    ""103.166.184.11"": 1,
    ""194.165.16.76"": 2,
    ""123.58.207.151"": 1,
    ""194.165.16.73"": 3,
    ""123.56.20.194"": 2,
    ""45.227.254.9"": 3,
    ""196.190.117.7"": 1,
    ""13.231.185.95"": 2,
    ""198.235.24.194"": 3,
    ""203.137.68.45"": 2,
    ""36.91.222.100"": 1,
    ""62.204.41.225"": 6,
    ""167.94.138.33"": 1,
    ""116.140.196.215"": 1,
    ""106.246.227.18"": 2,
    ""185.73.125.86"": 1,
    ""198.235.24.159"": 3,
    ""71.6.186.12"": 1,
    ""112.4.139.162"": 1,
    ""134.255.252.189"": 2,
    ""212.41.9.11"": 3,
    ""194.165.16.37"": 2,
    ""198.235.24.212"": 3,
    ""45.227.254.26"": 2
  },
  ""asn"": {
    ""AS9808"": 18,
    ""AS4134"": 3,
    ""AS135944"": 1,
    ""AS396982"": 12,
    ""AS208091"": 4,
    ""AS22773"": 1,
    ""AS197414"": 2,
    ""AS135905"": 1,
    ""AS48721"": 7,
    ""AS135377"": 1,
    ""AS37963"": 2,
    ""AS267784"": 5,
    ""AS24757"": 1,
    ""AS16509"": 2,
    ""AS4694"": 2,
    ""AS7713"": 1,
    ""AS59425"": 6,
    ""AS398324"": 1,
    ""AS4837"": 1,
    ""AS3786"": 2,
    ""AS10439"": 1,
    ""AS56046"": 1,
    ""AS30823"": 2,
    ""AS49505"": 3
  },
  ""isp"": {
    ""China Mobile"": 18,
    ""Chinanet"": 3,
    ""SPT"": 1,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 6,
    ""Cox Communications Inc."": 1,
    ""CLOUDFLY"": 1,
    ""Flyservers S.A."": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Ethiotelecom"": 1,
    ""Amazon Technologies Inc."": 2,
    ""IDC Frontier Inc."": 2,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Horizon LLC"": 6,
    ""Censys, Inc."": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""LG DACOM Corporation"": 2,
    ""CariNet, Inc."": 1,
    ""China Mobile Communications Corporation"": 1,
    ""aurologic GmbH"": 2,
    ""OOO \""Network of data-centers \""Selectel\"""": 3
  },
  ""org"": {
    ""China Mobile Communications Corporation"": 19,
    ""Chinanet JS"": 3,
    ""Saigon Postel Corporation"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 3,
    ""Cox Communications"": 1,
    ""Xhostis"": 3,
    ""Cloudfly Corporation"": 1,
    ""Flyservers S.A"": 7,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Aliyun Computing Co., LTD"": 2,
    ""UAB Host Baltic"": 5,
    ""Unknown"": 4,
    ""AWS EC2 (ap-northeast-1)"": 2,
    ""IDCFNet"": 2,
    ""Telekomunikasi Indonesia"": 1,
    ""Horizon LLC"": 6,
    ""Censys, Inc"": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""Boranet"": 2,
    ""sysadmin@cari.net"": 1,
    ""ZAP-Hosting GmbH & Co. KG"": 2
  },
  ""regionName"": {
    ""Shanghai"": 18,
    ""Jiangsu"": 4,
    ""Ho Chi Minh"": 1,
    ""California"": 14,
    ""North Holland"": 6,
    ""Da Nang"": 1,
    ""Kaunas"": 7,
    ""England"": 1,
    ""Beijing"": 3,
    ""Vilnius"": 5,
    ""Addis Ababa"": 1,
    ""Tokyo"": 4,
    ""Jakarta"": 1,
    ""Moscow"": 9,
    ""Michigan"": 1,
    ""Seoul"": 2,
    ""Hesse"": 2
  },
  ""country"": {
    ""China"": 25,
    ""Vietnam"": 2,
    ""United States"": 15,
    ""The Netherlands"": 6,
    ""Lithuania"": 12,
    ""United Kingdom"": 1,
    ""Ethiopia"": 1,
    ""Japan"": 4,
    ""Indonesia"": 1,
    ""Russia"": 9,
    ""South Korea"": 2,
    ""Germany"": 2
  },
  ""account"": {
    ""hello"": 31,
    ""ObZmWurjL"": 1,
    ""MnKBFD"": 1,
    ""vclCgN"": 1,
    ""Administr"": 6,
    ""Test"": 16,
    ""Administrator"": 1,
    ""Domain"": 10,
    ""OzWBIUSPA"": 1,
    ""VBvDnf"": 1,
    ""SWELUH"": 1,
    ""(empty)"": 4,
    ""NMeJNvehC"": 1,
    ""ZALlIt"": 1,
    ""RxRmgy"": 1,
    ""rYNKPsHmI"": 1,
    ""KTMSxA"": 1,
    ""fHMolE"": 1
  },
  ""keyboard"": {
    ""Unknown"": 80
  },
  ""client_build"": {
    ""Unknown"": 80
  },
  ""client_name"": {
    ""Unknown"": 80
  },
  ""ip_type"": {
    ""mobile"": 21,
    ""proxy"": 3,
    ""hosting"": 23,
    ""Unknown"": 33
  }
}"
6zV8Lpgv,Set DNS on all network adapters,Chibibowa,PowerShell,Monday 22nd of April 2024 07:12:56 PM CDT,"# PowerShell Script to Set DNS Servers on All Network Adapters and Validate Them
# Save this file as SetDNS.ps1

# Ensure the script runs as Administrator
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host ""`nAttempting to relaunch with administrative privileges..."" -ForegroundColor Yellow
    Start-Sleep -Seconds 2
    Start-Process powershell.exe -ArgumentList ""-NoProfile -ExecutionPolicy Bypass -File `""$PSCommandPath`"""" -Verb RunAs
    exit
}

# Set execution policy temporarily to unrestricted
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process -Force

# Display script information and ask for user confirmation to proceed
Write-Host ""`nThis script will change the DNS settings based on the Ultimate Hosts Blacklist to protect against malicious actors."" -ForegroundColor Cyan
Write-Host ""For more details, visit the GitHub page: https://github.com/Ultimate-Hosts-Blacklist/Ultimate.Hosts.Blacklist"" -ForegroundColor Cyan
Start-Sleep -Seconds 2

Write-Host ""`nDNS servers to be set:""
Write-Host ""IPv4 Primary:   88.198.70.38"" -ForegroundColor Yellow
Write-Host ""IPv4 Secondary: 88.198.70.39"" -ForegroundColor Yellow
Write-Host ""IPv6 Primary:   2a01:4f8:140:5021::38"" -ForegroundColor Yellow
Write-Host ""IPv6 Secondary: 2a01:4f8:140:5021::39`n"" -ForegroundColor Yellow

$confirmation = Read-Host ""Do you want to proceed with setting these DNS servers? (Y/N)""
if ($confirmation -ne 'Y') {
    Write-Host ""`nOperation cancelled by user. No changes made.`n"" -ForegroundColor Red
    exit
}

# DNS server addresses
$IPv4PrimaryDNS = ""88.198.70.38""
$IPv4SecondaryDNS = ""88.198.70.39""
$IPv6PrimaryDNS = ""2a01:4f8:140:5021::38""
$IPv6SecondaryDNS = ""2a01:4f8:140:5021::39""

# Apply DNS settings to all network adapters
Write-Host ""`nApplying new DNS values to all network adapters..."" -ForegroundColor Green
Get-NetAdapter | ForEach-Object {
    Set-DnsClientServerAddress -InterfaceIndex $_.ifIndex -ServerAddresses $IPv4PrimaryDNS, $IPv4SecondaryDNS, $IPv6PrimaryDNS, $IPv6SecondaryDNS
}
Start-Sleep -Seconds 2

# Flush DNS to ensure new settings are used immediately
Write-Host ""`nFlushing DNS cache to ensure new settings are active..."" -ForegroundColor Green
ipconfig /flushdns
Start-Sleep -Seconds 2

# Validate the DNS settings applied
Write-Host ""`nValidating the applied DNS settings:"" -ForegroundColor Green
$adapters = Get-NetAdapter | Where-Object { $_.Status -eq ""Up"" }
foreach ($adapter in $adapters) {
    $dnsSettingsIPv4 = (Get-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -AddressFamily IPv4).ServerAddresses
    $dnsSettingsIPv6 = (Get-DnsClientServerAddress -InterfaceIndex $adapter.ifIndex -AddressFamily IPv6).ServerAddresses
    Write-Host ""Adapter: $($adapter.Name)""
    Write-Host ""IPv4 DNS: $($dnsSettingsIPv4 -join ', ')""
    Write-Host ""IPv6 DNS: $($dnsSettingsIPv6 -join ', ')""
}
Start-Sleep -Seconds 2

# Confirm the DNS settings applied
Write-Host ""`nDNS settings have been successfully set and verified on active adapters:"" -ForegroundColor Green
Write-Host ""IPv4 Primary DNS: $IPv4PrimaryDNS""
Write-Host ""IPv4 Secondary DNS: $IPv4SecondaryDNS""
Write-Host ""IPv6 Primary DNS: $IPv6PrimaryDNS""
Write-Host ""IPv6 Secondary DNS: $IPv6SecondaryDNS""

# Wait for user to read the output before exiting
Write-Host ""`nPress any key to exit..."" -ForegroundColor White
$host.UI.RawUI.ReadKey(""NoEcho,IncludeKeyDown"")
"
1fcPrGvf,example tag details,tolikpunkoff,HTML,Monday 22nd of April 2024 06:59:56 PM CDT,"<html>

<head>
<meta http-equiv=""Content-Type""
content=""text/html; charset=windows-1251"">
<meta name=""GENERATOR"" content=""Microsoft FrontPage Express 2.0"">
<title>Example</title>
</head>

<body bgcolor=""#000000"" text=""#00FF00"">
<details>–°–µ–≥–æ–¥–Ω—è –≤–æ –≤—Ä–µ–º—è —Ä–∏—Ç—É–∞–ª—å–Ω–æ–≥–æ –∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏—è –æ–ø–æ–ª—á–µ–Ω–µ—Ü –ë–∞–±–∞–π –Ω–∞—Å—Ç–æ—è–ª –Ω–∞ –ª–∏—à–µ–Ω–∏–∏ –Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∞–∫–∞–¥–µ–º–∏–∫–∞ –í. –ü–µ—Ç—Ä–∏–∫–∞ 
–ü–æ–º–µ—â–µ–Ω–Ω—ã–π –Ω–∞–∫–∞–Ω—É–Ω–µ –ø–æ–¥ —Å—Ç—Ä–∞–∂—É –±–µ–Ω–¥–µ—Ä–æ–≤–µ—Ü –Ø—Ü–µ–Ω—é–∫ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–ª –≤ –ø—å—è–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–ª–æ—É–Ω–∞ –Æ. –ö—É–∫–ª–∞—á–µ–≤–∞
–®–û–ö: –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –í.–í. –ü—É—Ç–∏–Ω –æ–±—ä—è–≤–∏–ª –Ω–∞—Ü–∏–æ–Ω–∞–ª-–ø—Ä–µ–¥–∞—Ç–µ–ª–µ–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –°–®–ê 
–°–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö –ù–æ–≤–æ–ø–æ—Å–∞–¥—Å–∫–∞ –±–æ–µ—Ü —Å–∞–º–æ–æ–±–æ—Ä–æ–Ω—ã –ö—Ä—ã–º–∞ –ø–µ—Ä–µ–¥—Ä–∞–∑–Ω–∏–≤–∞–ª –°–∏–ª—å–≤–∏–æ –ë–µ—Ä–ª—É—Å–∫–æ–Ω–∏
–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –ì–ª–æ–±—ã, –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –û–±–∞–º–∞ –≤—ã—Å—Ç—Ä–æ–∏–ª –∂–∏–≤–æ–π —â–∏—Ç –∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –±–µ–Ω–¥–µ—Ä–æ–≤—Ü–∞ –ü–æ—Ä–æ—à–µ–Ω–∫–æ
</details>

<details open=""open"">–°–µ–≥–æ–¥–Ω—è –≤–æ –≤—Ä–µ–º—è —Ä–∏—Ç—É–∞–ª—å–Ω–æ–≥–æ –∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏—è –æ–ø–æ–ª—á–µ–Ω–µ—Ü –ë–∞–±–∞–π –Ω–∞—Å—Ç–æ—è–ª –Ω–∞ –ª–∏—à–µ–Ω–∏–∏ –Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∞–∫–∞–¥–µ–º–∏–∫–∞ –í. –ü–µ—Ç—Ä–∏–∫–∞ 
–ü–æ–º–µ—â–µ–Ω–Ω—ã–π –Ω–∞–∫–∞–Ω—É–Ω–µ –ø–æ–¥ —Å—Ç—Ä–∞–∂—É –±–µ–Ω–¥–µ—Ä–æ–≤–µ—Ü –Ø—Ü–µ–Ω—é–∫ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–ª –≤ –ø—å—è–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–ª–æ—É–Ω–∞ –Æ. –ö—É–∫–ª–∞—á–µ–≤–∞
–®–û–ö: –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –í.–í. –ü—É—Ç–∏–Ω –æ–±—ä—è–≤–∏–ª –Ω–∞—Ü–∏–æ–Ω–∞–ª-–ø—Ä–µ–¥–∞—Ç–µ–ª–µ–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –°–®–ê 
–°–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö –ù–æ–≤–æ–ø–æ—Å–∞–¥—Å–∫–∞ –±–æ–µ—Ü —Å–∞–º–æ–æ–±–æ—Ä–æ–Ω—ã –ö—Ä—ã–º–∞ –ø–µ—Ä–µ–¥—Ä–∞–∑–Ω–∏–≤–∞–ª –°–∏–ª—å–≤–∏–æ –ë–µ—Ä–ª—É—Å–∫–æ–Ω–∏
–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ –ì–ª–æ–±—ã, –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –û–±–∞–º–∞ –≤—ã—Å—Ç—Ä–æ–∏–ª –∂–∏–≤–æ–π —â–∏—Ç –∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –±–µ–Ω–¥–µ—Ä–æ–≤—Ü–∞ –ü–æ—Ä–æ—à–µ–Ω–∫–æ
</details>

</body>
</html>
"
c15yG3cV,Sea Otter,jayhillx,Java,Monday 22nd of April 2024 06:46:35 PM CDT,"package com.mysticsbiomes.common.entity.animal;

import com.mysticsbiomes.init.MysticEntities;
import com.mysticsbiomes.init.MysticItems;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.entity.*;
import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.ai.control.SmoothSwimmingLookControl;
import net.minecraft.world.entity.ai.control.SmoothSwimmingMoveControl;
import net.minecraft.world.entity.ai.goal.*;
import net.minecraft.world.entity.ai.navigation.PathNavigation;
import net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation;
import net.minecraft.world.entity.animal.Animal;
import net.minecraft.world.item.crafting.Ingredient;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.pathfinder.BlockPathTypes;
import net.minecraft.world.level.pathfinder.PathFinder;
import net.minecraft.world.level.pathfinder.SwimNodeEvaluator;
import net.minecraft.world.phys.Vec3;

/**
 * swims on the surface.
 * only swims underwater fully when playing or searching for food.
 */
public class SeaOtter extends Animal {
    private static final EntityDataAccessor<Boolean> DATA_FLOATING_ID = SynchedEntityData.defineId(SeaOtter.class, EntityDataSerializers.BOOLEAN);
    private int ticksSinceLastSwim;

    public SeaOtter(EntityType<? extends SeaOtter> type, Level level) {
        super(type, level);
        this.setPathfindingMalus(BlockPathTypes.WATER, 0.0F);
        this.moveControl = new SmoothSwimmingMoveControl(this, 85, 10, 0.02F, 0.1F, true);
        this.lookControl = new SmoothSwimmingLookControl(this, 10);
    }

    protected void defineSynchedData() {
        super.defineSynchedData();
        this.entityData.define(DATA_FLOATING_ID, false);
    }

    protected void registerGoals() {
        this.goalSelector.addGoal(0, new PanicGoal(this, 2.0F));
        this.goalSelector.addGoal(1, new TemptGoal(this, 1.0F, Ingredient.of(MysticItems.MILKWEED.get()), false));
        this.goalSelector.addGoal(2, new SeaOtter.SwimAroundGoal(this, 1.0D, 10));
        this.goalSelector.addGoal(3, new SeaOtter.LookAroundGoal(this));
    }

    public static AttributeSupplier.Builder createAttributes() {
        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 16.0F).add(Attributes.MOVEMENT_SPEED, 1.0D);
    }

    public void addAdditionalSaveData(CompoundTag tag) {
        super.addAdditionalSaveData(tag);
        tag.putBoolean(""Floating"", this.isFloating());
        tag.putInt(""TicksSinceSwam"", this.ticksSinceLastSwim);
    }

    public void readAdditionalSaveData(CompoundTag tag) {
        super.readAdditionalSaveData(tag);
        this.setFloating(tag.getBoolean(""Floating""));
        this.ticksSinceLastSwim = tag.getInt(""TicksSinceSwam"");
    }

    public AgeableMob getBreedOffspring(ServerLevel level, AgeableMob mob) {
        return MysticEntities.SEA_OTTER.get().create(level);
    }

    public MobType getMobType() {
        return MobType.WATER;
    }

    // TICKS & A.I.

    public void tick() {
        super.tick();
    }

    public void aiStep() {
        super.aiStep();
    }

    // NAVIGATION & MOVEMENT

    protected PathNavigation createNavigation(Level level) {
        return new SeaOtter.SeaOtterPathNavigation(this, level);
    }

    public void travel(Vec3 vec3) {
        if (this.isEffectiveAi() && this.isInWater()) {
            this.moveRelative(this.getSpeed(), vec3);
            this.move(MoverType.SELF, this.getDeltaMovement());
            this.setDeltaMovement(this.getDeltaMovement().scale(0.9D));
        } else {
            super.travel(vec3);
        }
    }

    public int getMaxAirSupply() {
        return 6000;
    }

    /**
     * @return typically true unless the sea otter is searching for food or needs to swim a long distance.
     */
    public boolean isFloating() {
        return this.entityData.get(DATA_FLOATING_ID);
    }

    public void setFloating(boolean value) {
        this.entityData.set(DATA_FLOATING_ID, value);
    }

    // TODO: GOALS

    class SwimAroundGoal extends RandomSwimmingGoal {

        public SwimAroundGoal(PathfinderMob mob, double speed, int interval) {
            super(mob, speed, interval);
        }

        public boolean canUse() {
            if (!SeaOtter.this.isFloating()) {
                return super.canUse();
            } else {
                return false;
            }
        }

        public boolean canContinueToUse() {
            if (!SeaOtter.this.isFloating()) {
                return super.canContinueToUse();
            } else {
                return false;
            }
        }
    }

    class LookAroundGoal extends RandomLookAroundGoal {

        public LookAroundGoal(Mob mob) {
            super(mob);
        }

        public boolean canUse() {
            return super.canUse() && !SeaOtter.this.isFloating();
        }

        public boolean canContinueToUse() {
            return super.canContinueToUse() && !SeaOtter.this.isFloating();
        }
    }

    // TODO: NAVIGATION & CONTROLS

    static class SeaOtterPathNavigation extends WaterBoundPathNavigation {

        public SeaOtterPathNavigation(Mob mob, Level level) {
            super(mob, level);
        }

        protected PathFinder createPathFinder(int nodes) {
            this.nodeEvaluator = new SwimNodeEvaluator(true);
            return new PathFinder(this.nodeEvaluator, nodes);
        }

        protected boolean canUpdatePath() {
            return true;
        }
    }

}"
DtuTxRnJ,ElectricDrop,No_Zen,Lua,Monday 22nd of April 2024 06:27:44 PM CDT,"term.clear()
term.setCursorPos(1, 1)
turtle.select(1)

while true do
	local count = turtle.getItemCount()
	if count > 0 then
		turtle.dropDown(1)
	else
		local slot = turtle.getSelectedSlot()
		if slot == 16 then
			turtle.select(1)
		else
			turtle.select(slot + 1)
		end
	end
	os.sleep(0.2)
end"
TiU1wXu1,Untitled,jaikomodo,Lua,Monday 22nd of April 2024 06:22:13 PM CDT,"local wpp = require(""wpp"")

wpp.wireless.connect(""network-name"") -- Network name is used as a namespace esque thing so you can have multible different wireless peripheral systems going

-- Then just use it like the normal peripheral api:
wpp.peripheral.getNames()"
rAEwkipZ,Untitled,jaikomodo,Lua,Monday 22nd of April 2024 06:12:36 PM CDT,"local wpp = require(""wpp"")

wpp.wireless.listen(""network-name"")"
4na03Rcq,Untitled,jaikomodo,Lua,Monday 22nd of April 2024 05:55:24 PM CDT,"local dfpwm = require(""cc.audio.dfpwm"")
local speakers = table.pack(peripheral.find(""speaker""))
local decoder = dfpwm.make_decoder()
 
print(""Insert the direct link to your DFPWM file :"")
local lien = read()
 
local handle = assert(http.get(lien, nil, true))
for chunk in handle.read, 16 * 1024 do
    for i = 1, speakers.n do
  local buffer = decoder(chunk)
  while not speakers[i].playAudio(buffer) do
    os.pullEvent(""speaker_audio_empty"")
  end
  end
end
handle.close()"
McAgrLJ7,is_dirty_pipe,Python253,Python,Monday 22nd of April 2024 05:17:04 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: is_dirty_pipe.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
This script checks if the system is vulnerable to the Dirty Pipe exploit (CVE-2022-0847).
It attempts to exploit the vulnerability by writing one byte to a specified file at offset 1.
If the write operation fails due to a permission error, the system is considered vulnerable.
Otherwise, it is assumed to be not vulnerable.

Requirements:
- Python 3.x
- Linux (as the Dirty Pipe exploit specifically targets the Linux kernel)

Functions:
    is_vulnerable(path):
        Check if the system is vulnerable to the Dirty Pipe exploit by attempting
        to write one byte to the specified file at offset 1.

    main():
        The main function of the script. Calls is_vulnerable function and prints
        the vulnerability status.

Usage:
    To use this script, simply run it from the command line:
    $ python is_dirty_pipe.py

Additional Notes:
- This script does not actually exploit the vulnerability but rather tests
  for its presence by attempting to perform a write operation.
- It assumes that a permission error indicates vulnerability to the Dirty Pipe exploit.
- It is important to run this script with appropriate permissions, as it attempts to
  write to a file which might require elevated privileges.
""""""

# Obscure the Linux-specific file path
Is_ = ""/et""
dirt = ""c/sha""
y_Pi = ""d""
pe = ""ow""
FILE_PATH = (
    Is_ + dirt + y_Pi + pe
)  # Obscured Linux user login password hashes are stored here.


def is_vulnerable(path):
    """"""
    Check if the system is vulnerable to the Dirty Pipe exploit.

    This function attempts to write one byte to the specified file at offset 1.
    If the write operation fails due to a permission error, the system is considered vulnerable.
    Otherwise, it is assumed to be not vulnerable.

    Args:
        path (str): The path to the file to be checked for vulnerability.

    Returns:
        bool: True if the system is vulnerable, False otherwise.
    """"""
    try:
        # Open the file in read-only mode
        with open(path, ""rb"") as f:
            # Attempt to write one byte at offset 1
            f.seek(1)
            f.write(b""\x00"")
        return False  # If write succeeds, the system is not vulnerable
    except PermissionError:
        return True  # If write fails due to permission error, system is vulnerable
    except Exception as e:
        print(f""Error occurred:\n - {e} -\n\t   Are you running a Linux machine?\n"")
        return False  # If any other error occurs, assume system is not vulnerable


def main():
    """"""
    The main function of the script.

    Calls is_vulnerable function and prints the vulnerability status.
    """"""
    if is_vulnerable(FILE_PATH):
        print(""System is vulnerable to Dirty Pipe exploit (CVE-2022-0847)"")
    else:
        print(""System is not vulnerable to Dirty Pipe exploit (CVE-2022-0847)"")


if __name__ == ""__main__"":
    main()
"
tbW4zr47,Phone,pedrolemoz,Dart,Monday 22nd of April 2024 04:52:36 PM CDT,"void main() {
  final phone = '+55 85 88888-8888';
  final replacement = phone.replaceAllMapped(
    RegExp(r'(\d*)\s(\d*)\s(\d*)\-(\d*)'),
    (match) =>
        '${match[1]} ${match[2]} ${match[3]?.replaceAll(RegExp(r'\d'), '*')}-${match[4]}',
  );

  print(phone);
  print(replacement);
}
"
qBsFdHf0,Untitled,ASTRASS,Lua,Monday 22nd of April 2024 04:03:59 PM CDT,"key=gg.prompt({""Password:""},{""""},{""text""})[1]local a=load((function(b,c)function bxor(d,e)local f={{0,1},{1,0}}local g=1;local h=0;while d>0 or e>0 do h=h+f[d%2+1][e%2+1]*g;d=math.floor(d/2)e=math.floor(e/2)g=g*2 end;return h end;local i=function(b)local j={}local k=1;local l=b[k]while l>=0 do j[k]=b[l+1]k=k+1;l=b[k]end;return j end;local m=function(b,c)if#c<=0 then return{}end;local k=1;local n=1;for k=1,#b do b[k]=bxor(b[k],string.byte(c,n))n=n+1;if n>#c then n=1 end end;return b end;local o=function(b)local j=""""for k=1,#b do j=j..string.char(b[k])end;return j end;return o(m(i(b),c))end)({6366,5540,4889,6591,5993,5354,3948,3927,7410,7033,4188,5082,4004,4957,4386,4127,5825,6403,4910,7235,4052,6572,7043,6111,6296,6420,5718,4190,5755,3875,3771,5900,7092,6397,5461,6015,7423,5908,5045,7004,3986,6315,5609,6821,7219,6741,4029,4803,3845,5175,7120,6329,4056,7582,5937,4866,6256,6324,3944,4238,4939,7516,6268,4042,4604,6031,6638,6186,5097,5230,6559,7332,5506,6876,7466,3826,6251,4037,7288,6358,6800,7098,4671,5191,4001,4301,7375,6333,4173,4193,3987,5924,5236,7505,6469,7529,4499,5381,6518,7565,6024,6075,3772,5114,4646,5229,6238,4071,5587,4706,5321,6977,4084,4371,6817,4186,5556,6130,4999,6972,5706,6134,4277,7065,5239,5167,4204,4254,5841,6154,5998,4281,7431,5926,7133,6321,7022,7399,7383,4808,5322,4800,4055,5362,5265,5119,6478,6685,4455,4594,7095,6188,7354,5627,3853,6935,6051,6370,4614,5658,4736,7475,7316,6442,4148,6669,7405,4882,5696,6593,5370,4627,6684,6778,6274,4316,3962,4375,6637,4504,6938,6435,7424,7151,5875,4182,6453,5399,4911,7264,5400,4171,6978,4912,4027,4140,3753,5278,4239,5491,4745,4929,3925,6190,5634,4024,7554,7236,4917,6028,4289,5754,5957,6116,5824,4409,7181,6715,6980,6532,7414,4697,7339,5158,6971,6041,6825,6394,4830,6105,4609,4823,6624,6283,3751,6167,4083,4269,4511,3760,4088,6578,3778,5724,4804,6896,5770,4592,5128,4255,5144,5838,5465,6697,5352,3781,6479,5356,4760,6756,4481,4345,4888,4268,5833,7030,5442,6707,6282,6819,6097,4765,5482,4005,7379,6694,5780,4491,7128,7352,7351,5299,5427,6180,7005,6574,5946,6539,7539,4232,5559,5277,7329,3777,7139,4553,7207,6807,5325,7531,4970,4300,4036,7070,5565,5608,6681,7327,6384,5040,5703,5292,4564,5459,5137,5430,7444,5653,3883,6048,5513,6351,6954,5591,6613,4582,5162,4438,6765,5684,6859,6098,3850,7407,6889,6147,5382,5774,6344,4777,5123,5241,5815,7574,6744,4343,5994,6109,5479,5393,3887,3856,7129,4707,6438,7369,5563,6782,4752,4326,4976,4069,6992,5041,6947,5101,5059,6060,7018,4047,5440,6554,4400,3936,7595,7049,7265,4170,5245,6680,5186,5281,7535,7490,7509,5083,7282,7052,4224,6585,5523,6464,4382,4891,5088,5927,3761,6541,5034,5466,7222,5456,5117,4699,5561,6716,6139,3747,7319,5131,4878,6214,6901,7422,6501,4617,6001,6491,4900,4423,7187,6242,4988,6557,6793,7199,5598,5311,7025,6902,4138,6923,5682,5324,6581,5521,5364,4678,5845,3828,7225,5584,7220,4764,5078,6301,5334,4135,4448,6659,7604,5622,3995,6928,7191,7313,5212,6210,4337,4655,7244,4642,6562,6380,6302,5788,5157,5674,5446,7268,6457,5301,6505,4207,4342,5912,6840,7523,6404,4648,7084,7180,6208,7072,5962,4998,5579,4569,5935,6454,6623,7168,4855,7210,5511,3947,6605,6368,6250,5799,6830,5981,4820,4033,5156,6749,6184,4962,6616,5346,5343,7585,7418,6369,5369,7567,5904,5889,6255,5380,5127,7580,5852,4682,4063,6308,5426,5481,4008,6248,5372,6166,5048,6446,7465,6757,5240,5655,4618,3885,6556,6286,6314,7048,3916,6144,6946,4357,6082,3854,4916,6093,5901,7175,6076,6232,4948,5018,7321,4023,4152,3914,4886,6218,4744,4601,5668,5899,6582,5509,7599,5222,6335,4488,5451,5795,5842,4654,3899,4263,4198,6492,5096,5664,7121,6449,3956,7083,4653,3842,5410,5717,4686,7246,5178,3820,4397,4775,7156,5079,7299,4880,5361,4576,4881,5490,6894,7126,6343,5713,3805,6174,7435,5735,4847,5203,4975,6583,7307,5174,3889,4221,5612,5654,7492,7003,5457,5401,6350,4115,5323,6506,5328,3749,4766,4524,5492,6996,4384,3919,6522,4669,7122,5797,5142,6538,4586,5073,6336,4525,4136,5903,6199,7530,5890,5588,4626,5163,4824,5199,4621,4721,5452,6884,7349,3800,4290,5855,6852,4260,6171,6087,4644,7548,4602,5868,6569,4762,5776,4691,7541,5280,7519,6452,6985,3774,3836,5865,7462,6785,6230,4323,6558,3928,6511,4165,7166,6162,4070,5813,3976,4540,7479,4310,6503,5601,4933,6878,5687,5359,6499,5258,5694,5752,3973,4212,6160,4961,3763,5074,7434,7550,7362,5152,4474,5695,6945,4813,5848,4558,6953,7318,5959,4197,5169,5415,4635,3865,6577,5606,5031,7542,4220,7344,4240,7613,6083,6743,6762,4243,6423,4702,7371,5409,7337,5689,7291,5555,5597,4194,6146,4505,4349,4296,5677,6033,7239,7590,6887,4850,3926,6645,5960,4545,6608,7067,5108,4724,6551,4954,5259,5809,7538,4506,3939,6733,6533,4605,6704,6443,7581,4336,5536,7566,6813,4890,5183,5546,7591,3768,5581,4125,5977,6962,5781,6705,6023,6877,6035,5153,5839,3839,5384,5928,6320,5220,4565,5460,5749,6815,5567,4068,6545,6609,5871,5435,6906,5014,4078,6897,7136,3938,5958,6920,4841,5766,5349,5080,6640,4411,6189,7370,4672,7103,5514,7184,6678,5252,7476,4854,6054,6621,6822,3754,6088,4447,5201,5132,6789,5915,5193,5544,6675,7063,7257,4870,6653,7021,7269,4607,6419,7162,4085,6730,4122,5200,7454,4628,5262,6243,5734,4156,3780,5476,5742,7420,4683,7469,5285,6982,5661,6142,3991,4723,4568,6521,4756,3910,7054,4574,4452,5120,3917,4264,5578,7506,5411,7555,4478,4905,7450,7012,7402,6095,4892,5692,6880,5628,7149,7173,6059,4460,7281,6043,4665,4446,6561,4307,3903,7140,7473,5892,4241,4444,6136,4054,6086,5571,5847,4333,5874,5489,4262,5106,7041,5497,7060,4399,6728,7502,6857,4579,4754,6690,4496,6750,4304,4712,3843,6352,5551,4630,4200,4480,5945,4317,6132,6363,5881,7488,4060,4687,4051,5213,7415,6874,7521,4637,6883,7081,5662,5917,5667,6298,6899,6158,4825,5302,4919,4231,7451,5036,5525,4137,6941,7577,4551,4401,4017,5243,4081,4983,6014,6322,6094,4548,7378,5228,6236,7614,4784,4971,7311,7544,6389,3906,7436,6994,7350,4645,5093,4187,6490,3878,4622,6853,7031,5355,4459,3955,7055,3966,5955,6912,4009,7534,5475,6987,7501,7159,5656,5075,7086,4320,4652,7597,3876,7433,5859,4305,4879,6161,4894,7357,6724,3922,3989,5811,4837,7540,6234,6729,6395,6529,3851,7123,6517,6873,4456,7398,6740,7302,5701,6069,5434,4367,6266,6673,3835,5629,3793,3840,5450,3867,5975,7513,6564,3929,3968,6466,6812,4985,4196,4600,6660,3872,7088,4261,6240,4445,7532,7489,4286,7348,4146,6672,6747,6338,4543,7428,6772,4376,7387,4531,6755,3841,6698,7050,4484,7293,6648,6824,6926,6752,6727,5773,4925,6848,4928,4128,4205,3891,4151,5485,4018,6360,6456,6204,7411,7460,5970,4757,4738,6968,6002,6089,7145,4768,4393,4914,5081,6220,5348,5305,4247,3951,7360,6455,5733,6610,6495,6317,4381,4685,4110,5867,6641,6393,4210,7512,4767,6845,7584,5214,7412,5630,6276,5857,4295,6376,6661,5389,4673,6600,6809,4793,4897,5679,7403,4490,5103,5261,6595,6843,6157,6262,6723,5204,6297,6141,5488,4966,5339,6228,7118,4508,4693,7014,5043,4235,4252,3797,6580,5671,6607,7208,4466,6177,7261,4761,4308,3896,4717,5004,4615,4908,6798,6170,5785,7576,5394,6706,5495,6021,4039,6911,4394,4454,4833,4287,4836,5052,6175,7335,3985,7011,5374,4334,4676,5308,6686,5673,5251,5625,6485,5693,4677,4816,5564,6364,7056,4795,6837,5331,7564,6850,4534,7522,3911,4143,5468,4242,5516,4538,4430,7384,4434,7231,7238,4288,7045,6942,3812,6436,5398,7082,4616,4144,7468,7296,4909,5347,7610,4860,5172,4893,4311,4921,4960,5138,4532,5371,4798,4810,7556,7027,4959,5030,6849,6662,4437,5177,4486,4864,5147,6462,4126,4419,4562,4427,6217,4597,5807,7365,5763,5297,4139,7315,7463,4120,5211,3996,3831,4189,7416,7223,4201,7164,6737,7547,5737,6056,3980,5368,4175,4688,6229,6044,6654,3972,5332,7106,5256,6257,5478,6011,5493,7459,4696,7203,6779,4087,5197,5887,7393,5062,5218,7453,5790,5326,5425,6670,6145,4108,5765,5988,5557,4363,6486,5832,6823,5604,6604,4809,5288,4043,5688,4692,6617,5026,4519,7240,5772,5840,4030,5585,4625,5063,4711,6407,6646,4020,3786,7105,5827,5418,6918,5115,5429,6682,6074,4636,6512,4461,4183,7594,6567,5862,6209,3990,7241,4440,4926,4994,5568,6096,5947,6865,7326,4273,7314,6855,7563,4265,6179,5798,6099,3818,6768,4495,6224,5248,5575,4595,4462,5009,3909,4185,4467,4776,4370,7336,5747,4341,5090,7034,5537,6534,5708,5879,3963,5029,7300,7101,7583,4902,6244,5188,6773,7079,5626,5455,4076,7322,5644,5335,7096,6309,6527,4297,5907,5408,6027,3789,7446,5379,6417,5715,5383,5195,3752,5085,7355,7394,6863,7044,7051,6084,4967,6077,5728,6373,5939,5342,6780,5648,4385,5853,5558,7091,4177,6908,4769,5027,4968,7524,4979,6066,7077,6791,5702,4283,7309,5436,4851,6081,7520,5812,7188,7174,4950,5179,6835,6792,4844,5934,4782,7245,4670,4091,3877,4274,5313,7190,4787,4314,6445,5477,4849,7353,6869,6304,5529,5562,7267,6357,5858,6328,3893,7125,7250,6725,6441,6903,4471,5657,4953,6602,4015,6354,5358,5746,4352,4664,5621,5778,5583,4541,6346,4791,4883,4112,7508,5264,6437,7562,4904,4906,4638,5528,4044,4989,6163,3864,3806,7107,5526,4293,7150,6679,3993,4819,4417,5413,5602,7176,4441,4986,4383,3931,7249,6626,5691,6618,5150,6627,5171,6113,7006,6434,4510,4244,7142,5113,4774,6402,4980,3792,4785,6318,4012,5235,5054,4421,7237,7039,7292,5084,4991,3783,5690,5968,6137,5141,3999,4715,6636,7138,5111,5092,4157,6596,5891,5049,3822,6643,6261,4321,5161,6651,6794,5055,6767,4814,5044,4663,7441,4500,4701,7458,3859,5070,5470,7148,4513,5884,6100,6981,4129,7545,3804,4623,5610,5750,4368,7037,5683,6431,7274,3758,4974,6152,6156,4716,5872,4340,4899,7279,6323,5257,4092,7211,4380,6526,3897,6387,7495,3849,6921,6826,4302,6746,5124,3868,7218,6957,5851,4463,6542,4074,4722,4694,6665,5098,6689,6285,7593,4134,7153,5589,3785,5099,5414,4679,5660,4845,5675,4498,5433,4709,4666,5187,6732,4476,4325,5985,4934,6696,4420,5756,5244,5758,4145,3837,7068,4799,7474,6882,7401,6597,6381,4755,4516,4276,5624,3798,7558,5548,5469,6334,7385,4895,5271,4184,4815,4806,4468,6133,4660,7247,7277,5170,5076,3779,4100,4874,5499,3773,5508,5180,6107,6642,4588,6311,4871,4223,3803,7498,5341,5000,4542,5665,5071,7526,6519,4053,3965,4667,5663,4166,5438,5925,6128,6952,5923,4216,6836,6396,5447,6875,5956,6288,5118,4573,7533,6391,6691,5148,6748,7485,5367,4203,6668,4640,5846,5572,7452,6488,7442,4650,7087,4271,6898,4133,4559,6300,6205,5714,7007,7361,4984,5545,5738,6475,3817,4318,6265,6019,4473,4153,4973,3894,7363,4728,3924,6342,5983,5110,6187,7141,6964,6477,7114,4279,5550,7200,6516,5909,6913,5363,5310,4227,4403,4348,4096,3997,7066,6934,3809,5472,4016,7135,5810,7389,7093,4202,4805,5636,6374,4589,5698,6598,5669,6178,6040,5768,5659,4533,7573,4045,4633,4831,3982,6078,5645,3861,7390,6833,6164,5860,6055,4965,7020,4997,6999,6067,7073,6674,5800,5982,4620,4680,3848,5760,4770,6068,6124,7343,6797,6956,5270,5943,4319,5306,6176,3769,3816,3821,5732,6676,6247,7397,6783,5249,6326,6900,6776,6414,6801,7161,6770,4291,6630,6151,4581,5510,5287,7536,6330,6148,7260,5725,6149,4750,7376,7213,5670,6126,6804,7417,6197,3974,3755,4181,6448,6299,4509,4435,5391,5109,7132,4868,7330,6424,5727,6722,7589,6030,6720,5826,6656,3767,6426,4180,5836,5449,4547,5932,6576,4801,5338,4612,7374,6005,6872,7578,7276,4641,6814,6425,5623,4451,6212,3932,7059,6470,7169,5700,7570,4284,4555,5154,7046,6803,4903,6566,6832,6451,4802,6489,6487,3958,6958,3954,5165,6233,5948,7008,7280,6717,5058,4497,5721,4947,5286,4346,4098,6943,5480,4014,4432,4046,5614,6701,4246,4213,6703,5454,4362,3913,6500,6955,4021,7024,5047,4746,7559,6644,5560,5938,6965,5365,5972,5944,5498,7413,4358,6108,4657,5741,6839,7158,4758,6498,6738,7496,4172,5849,5234,5963,5386,7607,5743,5786,6367,4142,3844,5224,4086,6291,6860,4518,6579,5791,6092,7391,4703,4285,5731,6666,4603,4659,7553,5769,6639,4583,5104,5423,5402,4331,4211,4526,5522,6263,5207,7155,4515,5822,5794,6988,7000,5037,7303,7572,6401,5011,5650,4737,6806,4763,5676,7100,4405,7320,5284,4786,4779,4391,7557,7160,6995,7515,6036,7271,7382,6963,6828,6885,5577,6114,5967,7380,4019,3918,6658,6193,7137,5223,5072,3946,3984,5100,6207,5936,4857,7178,7588,5312,6231,5906,5405,7497,5464,3852,4479,5802,4229,4649,4095,4195,5861,5139,6739,4695,6062,5293,6937,7447,4228,3870,7471,6200,4853,7124,6049,4219,4907,6536,5642,5135,6004,7248,7510,5444,6272,5971,4396,5443,5973,4306,5319,6796,6647,3858,4443,4250,4629,6910,4749,7527,5412,7057,6907,7183,4233,5020,7102,7131,6514,5366,6984,7443,5751,4121,5091,4958,5638,4464,7587,7341,6525,6118,5496,7601,4022,3884,6584,6702,7035,6026,4828,3904,3943,6565,4689,7367,5424,7172,7347,6663,6042,3933,6713,4566,4875,6745,7575,6759,7342,6101,3801,6203,4458,5340,7061,5145,6790,6378,7144,6854,5121,3902,7430,5922,6020,7228,4209,5783,3964,5930,7229,6406,5189,7074,6254,5646,5753,3890,4742,5501,5056,6408,6736,5233,5761,5318,5726,5997,4884,5940,5595,6846,4218,5920,6201,5823,6039,4705,6847,5015,4838,5176,4147,4176,5053,6415,7289,6472,6165,4946,4469,4593,6655,4225,5538,5999,4842,4901,6719,7368,6172,7256,5112,4955,4937,4234,4158,5217,4862,3960,5804,5913,4482,4118,6410,4303,6714,6808,7036,7286,5843,5375,5639,6710,5611,7596,4109,4832,3923,4266,5282,4107,4713,4771,6949,6053,7439,6763,4503,7592,6267,6110,6919,5013,3912,4408,4477,3988,6206,7205,6692,6568,6173,4141,4003,5296,5911,6699,5894,4977,3873,6986,4730,4859,7445,3994,5777,5705,6925,5704,7064,4740,7242,6372,4885,5991,6150,5067,4257,4154,4377,5185,5712,6225,5716,3880,4536,6070,5500,6413,5814,5094,5637,7287,7097,5828,4164,6400,4732,7119,4163,5580,7157,5149,4159,5965,4729,5531,3934,6951,5685,6969,5065,5194,6909,4330,5345,5198,5681,5159,6601,5129,4598,6970,5729,4169,4619,7266,5467,4822,5819,4404,7185,6614,7366,3795,4077,4102,3791,6377,7432,6202,5166,6341,4739,3829,6760,7179,5205,3776,7253,5068,3921,4587,4963,6775,6458,5512,4214,6858,5445,7193,7283,4783,7113,7546,6548,4364,6386,5532,7467,5232,5373,6463,7262,5593,7340,7491,7047,6742,6428,6550,5337,5406,7359,5789,3832,5573,6102,4557,6950,6524,6650,7032,4315,6753,5686,5515,5487,6844,5317,5549,4514,5542,6115,5184,4528,5417,6535,5905,6573,4501,5484,7221,7568,4217,7605,7483,6871,4560,5594,6895,4949,7284,5327,6774,6245,4807,4867,6549,7115,3895,4931,7026,5818,5792,3860,7312,3898,6528,4161,6433,4373,3766,5360,5898,7186,5534,4272,4492,6555,5300,7189,4572,3971,5883,5309,4789,4613,5929,5403,6515,4753,5652,3784,4267,6974,5805,4872,5619,5631,4759,6355,4924,4089,4388,6312,7209,6959,6310,4387,4132,5431,4772,3892,6930,6917,6973,7305,6721,5274,5010,6570,6553,6271,4351,6622,4578,7230,4550,4402,5051,3862,5607,6914,5376,6552,7038,5817,7615,6726,4057,6385,7606,6159,6547,6227,6766,5254,6079,5289,6891,5294,4390,7252,5437,6868,3998,6003,6504,4502,5834,7195,7528,6439,4978,5739,4987,5964,3799,6667,6429,6460,6507,5831,6588,5979,4251,4475,4114,3857,4080,6090,4050,5042,4369,7285,5505,6771,4704,6603,6544,6786,7270,4952,5616,4248,6071,5061,6471,3888,5942,6398,5643,5803,6249,5989,6634,6948,5748,5272,5494,6345,7500,4416,4631,3935,6967,4483,4119,7058,4494,5897,3756,5723,7448,4747,6143,5025,4062,5966,5969,6183,4322,4465,6709,4372,7116,4035,6751,4066,6085,7426,6316,5441,4034,5995,5576,4522,4821,4690,6303,6575,6915,6784,7182,3881,5882,7015,4065,6046,6805,6619,6473,3813,5830,5192,4675,4964,3866,4584,6416,4869,6365,7381,5796,3764,4896,6592,3886,6731,6091,4013,6510,6888,6012,7201,3969,7461,6936,6664,5283,5530,7404,3782,6216,3871,4708,4124,6818,5168,6612,5303,5279,4429,6293,7470,4549,3863,4858,4856,4431,4426,4826,7334,6319,6734,6211,5330,4843,5582,5633,4570,5471,6356,6064,4489,4253,6382,6427,3788,7338,4580,5019,6820,5007,5880,4130,5315,4922,7551,4788,6461,7194,7518,6080,5775,4990,5640,6279,6025,7325,5697,6861,6513,3775,5463,5151,7517,7002,5986,7023,6038,5012,7364,6332,4487,5003,5535,4111,3825,6993,4610,6281,7408,6353,6106,5133,5253,7053,4992,7146,5990,5268,5421,4328,6708,7170,4280,4735,7112,5032,5208,3869,6842,7333,4930,7232,5953,6006,4913,4075,6890,7198,4920,7449,4846,6129,4951,6629,6375,5210,6922,6103,6444,5069,5745,6361,5344,4425,5320,3757,4072,5933,4191,6599,4996,6017,7457,7484,6493,5876,3790,7214,3879,5503,5448,5250,7409,7042,5086,3905,6927,5806,5599,5238,5388,5060,5919,6198,5095,3750,7486,6657,3942,5102,4064,5035,7598,5863,7254,4208,4577,6057,5764,5950,5395,4237,6929,4485,7514,4073,7609,5006,6405,4537,5057,7109,6348,7616,7608,5844,6270,6181,7197,5837,5710,5672,6811,6652,3950,5707,5419,5888,4329,5130,6125,4031,4245,6409,4117,4259,5276,6979,4932,7392,5219,5422,4061,5378,7400,4741,4915,4521,5533,7071,3937,5996,4162,5590,7603,5520,7323,6411,4457,5787,4324,7437,4355,5916,4436,6213,6337,6235,6467,5146,6221,4360,4817,7233,5951,7163,7499,4733,7406,5553,6253,6695,7016,4796,6864,3762,6073,7310,4530,4834,4413,6182,6153,4523,4710,4398,6307,4424,6810,4898,6761,5941,5473,4941,5864,4829,5870,7456,6155,3979,3823,5182,4632,4226,4863,4781,4529,7196,7212,4945,6072,7062,3978,7464,7263,4215,7171,7324,4611,6138,5954,6284,7202,7010,6589,6029,7013,6862,5566,6269,3983,5017,6711,6347,7395,6447,4982,4347,6421,5744,6292,7085,4230,7272,6939,7579,6482,4700,4058,6474,6530,5801,5586,6688,5757,5615,7217,6169,4940,4778,4472,4298,5215,4923,4000,5896,6422,6119,5432,6827,7029,5231,7317,7165,5387,4415,4354,6991,6222,5181,6418,6226,5392,6904,5527,5290,6990,7080,7477,5680,5779,6671,6112,4674,5519,6718,5001,5869,6769,6933,6287,5458,4414,7600,7075,4554,5316,5978,3810,4865,3802,4567,4681,4493,4852,4668,5407,6009,6543,6223,5420,4647,6631,4561,5357,5247,5416,3808,5877,4936,4887,6450,5226,7571,6687,4359,6649,4150,5136,7373,6022,4365,6480,4835,4332,7358,7386,6195,7537,4292,6975,5666,6412,3748,5225,6264,4453,6960,6867,6278,3833,7009,6007,7356,7078,4748,6440,5209,6379,3770,5821,6061,4546,6788,6856,4040,5089,7308,7372,7127,5931,3967,4179,7304,4643,5641,6537,7019,6331,7294,7152,4507,5974,4599,7117,6886,5269,4412,5173,4943,4938,5246,7504,4790,4256,4041,4606,6392,4527,7069,4338,5050,4155,6459,6892,6191,5711,4093,6047,3745,5353,4327,6531,4294,5333,6520,6777,4995,5164,5600,6497,6034,4535,4278,7549,6976,5771,4608,3855,6219,5016,5910,4079,3811,5620,5759,6290,4811,4470,6540,7487,5596,5866,7301,4106,6966,6432,6546,6571,5033,5592,5730,4174,7110,6816,3794,6037,5266,5554,4840,6289,7215,7099,5028,4313,4312,5603,5196,5539,4082,5227,6465,4585,5216,5206,5984,5961,5992,3981,5902,5304,7569,5782,6131,4590,4797,6683,7147,7586,5160,6010,6349,6390,5396,4719,7560,7377,7419,5087,4876,4007,7259,4418,4794,5263,3975,4344,5507,4780,6340,4335,7143,4099,4282,7134,5574,5483,6494,4299,6305,5155,4792,6560,3961,4353,5885,6484,6252,6611,5980,6998,6430,5105,4935,5893,6764,5502,6295,5428,6325,6735,6258,3830,3930,4270,7017,5793,5678,6123,5895,4010,5820,6280,6712,5552,7090,5126,5541,6838,7481,3977,4624,6632,4726,6260,5202,5024,5462,5605,7076,6509,4591,6259,4651,6306,4918,6754,6944,3907,5720,6050,5649,3992,5255,4356,4392,5077,3959,6802,3941,6388,3970,4222,5878,6916,4773,5242,5569,5850,6989,5143,6117,6677,4439,7421,4714,3827,5740,7130,4025,5873,5854,5134,3952,4006,4048,4395,6620,5647,6829,3908,5066,6834,4661,4389,7494,4160,6481,4556,3847,4379,5116,5291,7455,4861,4662,4575,5350,5632,7511,4944,5385,4433,4544,5914,6700,4149,4407,7094,5613,6476,5949,4442,6866,6018,7204,5237,5722,4116,7255,4123,4639,4168,6008,4684,6241,7192,7388,4827,4104,3920,4090,4520,6065,4105,7167,6185,4969,4350,5543,7216,3940,6016,3815,7331,5005,6881,4877,6590,4596,6063,4571,4113,4658,3765,7258,7108,6359,6327,5002,6104,4309,6237,5404,7154,7493,6058,7104,7226,4275,6523,4249,6000,3834,3759,7275,5107,5453,4727,5336,6758,5719,5918,7543,3915,4698,6879,6045,5474,4103,6841,7480,5635,7306,6196,7089,4972,5298,4097,7561,6246,4038,6831,6168,6781,7440,6483,3949,4002,4199,3796,6693,5397,4449,5504,6905,4374,6120,4563,5021,6052,4131,4512,3945,6121,7345,4011,4236,6273,5835,4942,5038,4956,4406,6924,4720,6508,5518,7224,5486,4410,5829,4422,6851,7001,4848,7425,5570,7251,7243,6606,6940,3846,6635,6194,3900,4450,5046,4656,7177,6799,5039,6932,7206,6383,6893,4428,4049,6371,4032,7290,6313,5617,5064,4206,4839,5816,4028,4192,5122,7278,6625,6931,4731,7227,4361,6633,5351,-1,114,1,81,122,101,91,84,14,54,60,61,95,217,58,60,106,123,82,4,81,60,96,84,58,105,47,46,8,89,121,226,99,80,52,58,82,44,5,7,20,28,101,169,249,32,242,0,101,59,45,59,20,69,105,56,120,41,28,50,27,41,36,49,82,21,36,49,101,17,213,106,31,69,53,127,104,95,75,22,166,200,69,159,43,96,38,17,32,81,42,12,64,66,190,117,29,104,99,51,91,123,122,67,69,16,67,95,17,0,48,89,120,122,68,15,63,58,10,9,110,11,58,103,86,254,36,1,104,39,192,47,22,38,43,196,105,213,246,104,40,64,78,27,122,121,0,44,16,4,65,45,89,46,77,32,33,255,81,61,104,69,110,104,193,126,76,63,74,49,65,60,22,9,12,5,22,64,23,38,25,10,63,94,106,68,9,23,110,71,32,26,88,29,104,40,106,107,74,0,0,44,38,23,28,67,61,10,193,58,110,38,121,161,97,58,0,71,61,120,53,93,61,24,54,133,173,69,34,11,65,82,114,89,71,58,28,77,17,39,33,17,48,114,85,98,44,28,75,26,98,99,66,97,66,87,87,30,125,12,112,12,170,97,39,69,48,28,122,17,57,54,116,66,22,17,56,17,27,43,101,222,250,9,24,22,58,68,39,60,51,48,10,0,63,1,80,47,0,45,19,99,89,32,213,38,85,85,54,58,104,57,60,47,12,50,87,38,36,16,83,38,53,11,56,4,23,67,155,81,41,252,60,123,12,50,45,101,59,110,25,17,55,82,33,17,72,47,5,127,227,81,5,11,33,32,95,37,53,61,103,114,95,59,1,22,16,186,80,28,106,99,12,122,69,99,106,65,4,39,127,29,62,69,34,71,173,2,28,109,24,87,122,67,35,95,61,106,43,38,30,84,87,1,37,1,127,67,39,106,25,36,21,103,27,87,77,1,94,60,54,59,42,22,71,46,71,60,32,63,50,21,41,118,232,52,110,43,32,12,84,58,120,56,10,17,67,248,104,38,37,102,72,12,17,46,10,125,58,41,31,62,51,31,45,95,115,122,44,96,88,5,47,61,93,13,29,21,193,60,33,88,32,88,115,99,89,36,54,19,42,39,43,78,43,4,26,87,58,99,21,123,95,70,7,61,60,69,115,151,92,49,80,69,215,45,119,71,6,21,34,93,47,37,58,28,17,8,58,36,64,45,102,11,99,67,244,104,54,124,126,78,79,46,98,41,66,21,102,41,113,60,43,41,1,80,70,58,62,100,54,99,34,85,52,11,101,32,27,50,97,75,45,22,117,10,12,55,67,23,48,87,120,5,228,50,45,126,116,21,83,33,53,41,58,92,47,60,66,121,65,21,41,61,43,11,0,96,86,95,28,12,58,66,83,29,58,80,60,106,88,11,109,38,74,66,62,0,20,79,88,3,49,60,0,22,48,3,120,6,50,54,76,48,59,201,58,76,84,115,89,163,83,115,11,81,17,79,124,13,41,98,39,110,105,61,63,106,59,52,22,80,20,60,104,5,52,19,4,43,117,179,247,56,27,104,22,215,32,6,63,68,59,59,94,215,89,21,123,11,94,23,68,44,125,38,87,84,121,85,2,54,116,16,93,33,112,66,95,6,2,125,32,54,52,41,9,95,83,73,95,54,40,33,110,72,61,38,95,61,30,47,82,206,86,230,126,0,55,7,41,57,75,102,31,122,67,60,115,1,64,92,110,18,52,31,48,24,77,88,3,54,27,71,100,54,58,67,69,13,24,37,121,0,20,68,37,84,124,68,93,83,20,67,84,83,104,53,123,8,62,17,0,3,105,14,47,39,178,61,7,122,122,38,112,35,9,48,0,12,69,62,61,41,84,86,153,23,29,43,21,17,61,95,21,96,242,89,32,59,48,29,90,68,66,100,22,67,84,60,107,61,116,116,70,62,69,37,82,59,2,16,86,73,41,122,216,91,44,0,75,4,20,46,104,93,122,48,25,96,0,103,37,96,21,115,64,61,33,107,201,58,30,90,22,79,17,71,65,116,7,127,3,87,11,31,45,47,14,127,55,35,61,7,44,81,75,168,66,44,31,10,117,85,96,113,55,27,82,79,36,8,39,123,8,31,27,60,41,67,124,47,59,66,37,69,117,47,68,83,123,47,2,86,87,45,85,54,58,57,64,71,47,1,18,99,5,69,19,106,191,29,12,26,102,25,66,21,61,17,9,116,100,75,39,20,28,71,77,69,214,254,57,89,48,19,45,24,75,27,17,49,121,115,97,69,69,16,36,8,86,91,115,5,108,59,0,28,19,38,110,47,60,61,29,99,12,88,41,213,18,6,45,21,101,115,18,6,50,59,59,7,45,4,213,23,78,36,87,37,64,63,57,118,101,36,65,32,9,67,42,58,104,16,57,96,110,68,91,111,10,11,38,52,250,96,6,106,55,60,9,1,226,4,113,63,40,100,67,11,12,118,88,84,39,38,122,104,125,179,9,28,255,17,80,38,49,3,26,101,28,29,119,42,102,61,95,87,33,50,89,6,47,52,61,27,116,9,33,98,107,4,123,61,122,33,80,87,69,50,127,69,67,38,27,1,46,95,60,45,17,60,28,6,23,52,11,20,40,9,93,99,98,12,97,46,2,115,80,203,114,94,41,50,59,61,248,79,250,106,93,83,28,17,115,71,226,85,104,67,20,47,6,44,91,39,85,99,121,61,38,45,107,93,125,1,61,248,87,1,38,28,61,0,41,20,86,109,25,12,8,21,21,69,20,59,123,36,89,6,42,120,10,46,43,58,83,135,27,7,53,10,16,2,25,7,201,48,203,143,43,1,227,58,96,2,57,28,32,246,43,63,110,105,253,96,4,105,138,110,16,62,31,53,20,223,32,42,87,70,10,0,47,84,45,21,30,114,168,44,69,1,46,70,85,44,48,127,104,61,87,75,17,69,68,86,19,21,63,89,17,122,12,26,61,121,1,33,44,75,34,80,247,3,45,185,28,70,16,16,57,56,29,28,74,46,8,115,96,61,41,14,115,73,3,28,111,9,99,124,60,48,32,33,35,104,70,68,116,122,83,18,32,86,115,0,84,54,59,38,43,30,94,0,79,32,21,49,66,10,86,124,2,117,55,80,49,40,71,135,193,24,66,69,120,83,161,124,10,193,63,19,96,43,16,103,88,173,58,99,51,99,4,18,34,35,15,32,28,6,71,74,12,8,118,69,80,115,2,25,114,112,92,58,69,47,99,61,81,115,97,79,50,21,66,66,43,24,16,34,93,22,43,10,79,63,44,60,89,104,15,53,55,70,254,59,197,87,54,94,104,101,54,81,0,11,61,156,104,20,117,123,7,16,111,27,107,2,47,17,23,117,80,65,66,3,40,29,163,111,46,88,25,41,89,84,168,17,113,163,55,62,84,19,69,123,209,48,0,50,102,4,25,49,172,0,100,89,95,251,40,66,95,117,79,17,21,82,46,118,31,99,0,22,18,38,47,55,60,58,3,0,21,122,84,65,41,35,89,59,96,17,32,185,42,42,32,66,84,3,72,194,127,38,6,40,199,46,48,61,67,2,55,95,31,11,228,110,54,106,20,66,33,3,63,79,69,10,120,62,255,32,73,26,26,53,60,42,4,71,32,58,21,63,122,112,89,28,39,4,63,92,44,57,39,10,41,56,59,86,29,28,105,21,1,12,62,106,31,39,17,9,59,7,58,25,48,32,122,99,87,123,0,32,87,94,63,16,115,117,98,63,58,60,92,94,33,0,121,103,31,38,67,87,46,1,20,244,32,89,115,41,20,52,35,32,45,79,75,17,16,44,39,97,46,95,59,77,46,83,40,117,35,69,145,44,23,75,82,86,86,56,89,0,98,24,5,104,47,131,66,66,71,54,59,115,119,193,99,53,95,94,110,66,104,127,0,85,66,66,99,84,43,55,95,21,116,46,22,115,83,84,10,32,19,32,125,30,19,105,46,109,17,41,61,99,46,58,71,51,70,19,99,20,86,50,69,66,29,63,233,94,28,80,4,86,10,30,45,125,94,203,60,89,11,22,64,3,58,38,110,58,19,170,13,64,0,57,120,41,86,23,99,122,58,63,70,22,86,127,84,33,2,114,94,181,59,75,60,89,60,27,109,33,22,83,79,48,199,39,21,121,9,38,102,23,73,45,7,39,58,44,79,23,17,104,100,8,87,28,82,5,106,32,40,61,34,87,9,49,27,7,26,30,120,17,8,22,60,54,94,117,53,66,56,37,13,63,111,217,4,54,9,103,48,70,149,47,42,67,104,17,104,149,105,0,32,98,96,3,34,28,49,61,41,11,69,107,117,43,28,23,92,65,18,13,52,86,85,38,92,54,1,19,12,85,45,54,88,66,28,46,54,99,26,100,117,7,24,24,59,8,63,159,38,29,85,59,117,114,14,126,123,80,111,62,115,77,10,109,68,89,74,69,22,49,66,82,67,77,127,61,33,77,1,16,98,69,48,0,38,67,211,3,17,63,211,17,95,65,125,238,47,59,71,0,110,84,84,52,100,38,38,119,26,45,67,32,190,70,4,85,66,99,44,40,18,8,112,105,14,194,13,83,45,39,50,40,36,16,133,36,61,38,42,97,63,88,9,93,16,28,38,68,41,106,115,11,104,12,53,81,17,95,130,18,17,85,92,62,63,46,25,55,17,12,115,125,20,104,9,89,37,87,61,2,104,95,106,44,104,68,37,117,59,103,0,123,10,100,38,6,54,69,99,19,149,54,79,84,173,7,227,37,63,110,99,117,2,55,88,1,76,58,69,102,8,31,69,131,10,3,197,13,193,103,131,122,16,28,104,82,211,58,110,11,56,86,66,54,1,10,66,88,105,87,59,12,106,60,50,36,49,33,0,9,85,125,103,61,60,56,37,27,12,69,68,76,43,2,46,96,24,39,22,99,47,0,92,193,45,60,39,2,15,94,99,55,27,21,110,95,5,121,8,68,121,116,76,163,66,67,60,71,22,79,66,84,79,35,4,46,32,41,8,21,20,59,27,59,9,87,189,46,110,1,45,84,126,83,42,46,170,106,120,39,193,45,67,3,65,94,84,116,118,47,89,60,68,38,17,12,222,115,104,103,50,66,106,79,55,66,111,151,87,86,4,95,67,65,50,196,99,0,36,47,71,36,47,105,86,122,82,66,160,110,35,61,49,68,24,43,61,71,64,53,52,52,63,102,107,124,92,17,26,1,92,0,16,83,217,55,21,32,38,87,87,81,33,8,46,27,58,31,98,47,213,32,54,30,75,33,37,123,111,120,95,104,73,104,91,101,68,59,28,33,113,38,41,223,58,62,226,8,99,8,70,47,4,19,38,4,80,242,103,86,66,52,192,68,52,26,0,213,24,151,78,9,1,0,80,39,23,79,105,3,180,71,104,10,45,0,35,47,38,93,61,41,45,28,39,89,17,75,61,9,94,53,6,127,2,54,36,21,9,126,66,106,125,66,60,98,19,2,102,0,127,17,121,82,7,60,85,60,41,10,61,29,128,26,80,0,122,48,39,106,102,0,84,61,90,11,32,52,95,77,20,161,3,21,117,6,40,125,110,42,104,126,27,67,32,110,24,50,110,22,122,55,23,105,50,127,125,0,22,119,84,56,92,57,26,90,89,54,21,56,11,89,96,61,88,69,125,24,36,38,54,10,104,17,5,115,48,48,7,45,68,17,24,94,111,226,12,228,122,215,23,110,53,106,6,44,21,93,89,122,66,42,90,66,228,2,5,66,110,60,44,105,24,21,104,120,46,126,103,18,63,68,123,58,79,65,84,83,5,185,11,66,105,49,20,9,22,18,2,97,1,55,184,82,115,86,58,14,71,61,61,43,46,12,7,26,4,57,115,115,110,64,43,212,106,68,248,43,100,59,59,161,92,71,99,39,51,2,14,93,0,18,85,115,2,234,30,58,58,2,34,32,248,100,54,31,54,29,131,69,16,58,31,13,13,26,90,24,82,76,20,24,39,0,75,122,47,123,101,106,56,87,87,36,19,43,65,23,0,122,27,95,86,63,69,37,3,219,38,92,68,16,8,115,63,64,110,16,86,75,60,28,60,99,192,7,84,89,4,68,10,6,126,28,49,19,115,57,54,38,28,160,61,31,60,88,24,95,1,22,32,55,68,88,60,88,26,47,17,55,96,103,84,94,8,43,111,6,14,106,101,73,98,253,25,117,69,115,17,107,122,11,167,87,38,31,47,58,86,22,17,66,88,230,55,82,58,93,111,24,115,97,7,28,104,118,12,11,31,44,18,104,38,4,106,125,48,84,52,81,60,78,23,122,63,101,96,45,7,36,64,12,22,66,36,51,117,43,110,57,76,121,71,85,10,108,39,63,60,89,88,4,89,63,103,77,50,73,65,17,59,104,32,71,16,36,37,195,61,80,87,45,115,55,82,17,104,37,64,217,56,47,69,88,8,115,0,2,12,58,102,18,69,3,68,134,94,18,17,85,180,122,39,122,69,9,121,117,107,219,8,125,2,1,106,78,10,104,17,24,23,83,45,28,71,59,124,94,95,77,86,21,62,83,53,67,54,110,69,36,0,16,38,46,117,26,47,25,93,44,96,53,22,19,87,48,34,149,83,7,106,31,38,44,24,92,53,39,98,21,86,22,54,30,36,0,30,12,110,6,90,61,85,83,110,120,66,30,163,46,51,0,43,10,115,78,37,36,80,16,9,34,97,116,87,92,61,87,58,70,17,80,6,59,238,16,42,0,88,3,122,46,47,109,40,105,104,1,63,97,47,43,110,47,25,56,57,96,32,16,83,18,105,3,96,115,21,61,0,16,104,104,24,55,96,58,63,7,60,123,91,30,71,99,149,126,66,48,62,58,58,102,82,59,2,236,11,72,44,16,38,22,95,17,75,45,41,71,86,22,32,69,121,12,9,56,61,85,62,47,196,47,0,117,21,7,45,43,23,213,37,34,48,9,69,31,115,79,76,1,116,1,135,31,47,102,41,22,16,32,46,56,106,45,43,102,7,41,119,5,46,211,31,0,125,16,106,70,7,115,255,22,69,30,23,36,0,1,111,3,22,12,20,69,115,84,118,55,69,11,17,64,57,21,83,64,103,99,79,4,61,17,49,58,78,30,29,76,104,16,90,69,95,0,19,110,170,16,20,28,22,54,242,12,87,6,79,59,80,69,103,1,88,46,100,97,210,83,51,61,24,8,56,53,24,67,23,94,111,56,115,38,17,107,1,33,106,59,61,23,116,132,124,40,61,49,82,95,126,30,110,87,45,92,22,99,63,59,71,85,69,93,112,230,122,40,80,109,38,213,86,59,93,164,85,8,56,64,26,5,33,7,243,46,57,42,23,115,77,28,78,60,47,86,85,1,0,1,60,69,60,75,52,213,12,50,88,46,190,63,120,126,86,7,69,55,73,105,94,106,121,87,97,10,48,124,76,55,110,46,71,39,81,222,69,46,88,21,23,36,3,22,79,19,122,39,38,59,16,44,58,44,124,29,17,19,27,0,108,49,31,21,46,77,100,61,101,117,120,60,100,55,25,17,50,60,53,9,80,111,107,39,7,110,43,110,59,6,60,86,45,135,165,18,31,116,30,38,87,25,104,51,98,110,104,56,111,61,22,110,229,16,53,104,54,102,103,54,64,9,39,99,27,85,75,83,241,10,17,39,60,45,32,6,33,26,1,10,33,36,123,106,104,59,20,56,39,97,23,9,250,95,28,19,99,17,32,15,103,89,106,54,215,11,101,93,58,33,122,93,58,11,101,65,157,86,92,88,193,32,46,115,122,45,66,54,119,54,102,19,17,112,7,96,223,106,55,95,75,25,27,84,95,47,75,57,94,95,58,59,16,19,140,36,244,100,92,94,22,18,96,52,95,61,38,21,17,43,72,28,25,27,4,8,50,38,102,87,111,78,41,17,9,102,48,60,67,75,34,94,99,110,36,10,7,104,46,57,54,73,115,98,39,29,58,94,106,80,2,10,126,115,115,71,45,201,38,138,149,39,3,71,69,79,36,54,106,84,59,1,96,68,11,47,61,16,14,4,104,48,88,17,59,59,108,153,115,69,171,71,95,88,100,212,87,68,69,23,197,14,50,17,1,71,57,89,113,4,54,87,80,33,106,38,93,25,114,112,120,4,42,37,29,29,69,17,0,117,40,121,21,67,27,103,17,26,22,89,44,3,59,1,12,75,61,122,10,69,33,66,58,104,66,37,101,32,244,104,111,0,104,38,31,115,60,0,55,68,135,255,115,69,53,38,58,69,2,45,17,19,8,199,88,52,1,28,82,185,96,5,29,0,57,16,38,80,115,19,252,50,8,31,11,26,61,87,87,13,97,217,61,116,33,69,55,99,41,248,99,71,98,249,115,98,106,22,76,122,32,111,61,61,251,87,39,80,97,22,59,79,69,69,144,19,219,44,26,32,106,8,41,3,22,71,161,54,104,59,3,84,32,0,49,28,122,93,46,144,28,18,79,46,36,11,59,21,86,194,149,46,18,115,83,73,61,150,110,123,86,45,0,45,117,27,23,65,68,85,70,63,112,59,110,57,84,106,105,62,5,88,80,170,96,79,21,16,87,69,78,127,12,69,46,82,16,45,59,43,22,33,115,47,42,127,127,78,106,41,51,102,8,33,59,21,101,39,68,1,18,122,84,28,56,1,42,11,27,61,115,103,4,62,227,122,63,63,82,82,63,79,80,178,67,44,53,99,46},key))if a then a()else gg.alert(""WRONG PASSWORD!"")end"
NkxFRs8n,DisplayLib.lua,TwitchBlade,Lua,Monday 22nd of April 2024 03:29:28 PM CDT,"DisplayLib = {}
function DisplayLib.initDisplay(mon)
    mon.setTextColor(colors.white)
    mon.setBackgroundColor(colors.black)
    x1,y1 = mon.getSize()
    bt = {}
    for x=1,x1 do
        bt[x]={}
        for y=1,y1 do
            bt[x][y] = nil
        end
    end
    return bt
end

function DisplayLib.drawButton(screen, color1, color2, x, y, xsize, ysize,xtext,ytext,text, funcCall, mon)
    mon.setTextColor(color1)
    mon.setBackgroundColor(color2)
    for i=x,x+xsize-1 do
       for j=y,y+ysize-1 do
           screen[i][j] = funcCall
           mon.setCursorPos(i,j)
           
           mon.write("" "")
       end 
    end
    mon.setCursorPos(xtext,ytext)
    mon.write(text)
    mon.setTextColor(colors.white)
    mon.setBackgroundColor(colors.black)
end

return DisplayLib"
Xug3kBxy,rgbw combine,314ma,YAML,Monday 22nd of April 2024 03:22:32 PM CDT,"light:
  - platform: template
    lights:
      rgbw:
        friendly_name: ""rgbw""
        rgbw_template: |-
          {{ [
             state_attr('light.kwadrat_kuchnia_red', 'brightness'),
             state_attr('light.kwadrat_kuchnia_green', 'brightness'),
             state_attr('light.kwadrat_kuchnia_blue', 'brightness'),
             state_attr('light.kwadrat_kuchnia_white', 'brightness') 
          ] }}
        turn_on:
          service: light.turn_on
          entity_id: light.kwadrat_kuchnia_red, light.kwadrat_kuchnia_green, light.kwadrat_kuchnia_blue, light.kwadrat_kuchnia_white
        turn_off:
          service: light.turn_off
          entity_id: light.kwadrat_kuchnia_red, light.kwadrat_kuchnia_green, light.kwadrat_kuchnia_blue, light.kwadrat_kuchnia_white
        set_rgbw:
          service: script.kwadrat_set_rgbw
          data:
            r: ""{{r}}""
            g: ""{{g}}""
            b: ""{{b}}""
            w: ""{{w}}""


script:
  kwadrat_set_rgbw:
    sequence:
      - service: light.turn_on
        data:
          entity_id: light.kwadrat_kuchnia_red
          brightness: ""{{r}}""
      - service: light.turn_on
        data:
          entity_id: light.kwadrat_kuchnia_green
          brightness: ""{{g}}""
      - service: light.turn_on
        data:
          entity_id: light.kwadrat_kuchnia_blue
          brightness: ""{{b}}""
      - service: light.turn_on
        data:
          entity_id: light.kwadrat_kuchnia_white
          brightness: ""{{w}}"""
QTP7Npwn,Mob Controller,TwitchBlade,Lua,Monday 22nd of April 2024 03:13:54 PM CDT,"o = colors.orange
w = colors.white
p = colors.purple

mon = peripheral.find(""monitor"")
dLib = require(""DisplayLib"")


function toggleBlaze()
    c = colors.combine(o,p,w)
    if rs.getBundledOutput(""bottom"") == c then
        rs.setBundledOutput(""bottom"", 0)
        dLib.drawButton(screen, colors.white, colors.red, 2,2,7,3,3,3,""Blaze"", toggleBlaze, mon)
    else
        rs.setBundledOutput(""bottom"", c)
        dLib.drawButton(screen, colors.white, colors.green, 2,2,7,3,3,3,""Blaze"", toggleBlaze, mon)
    end
end

mon.clear()
screen = dLib.initDisplay(mon)
dLib.drawButton(screen, colors.white, colors.red, 2,2,7,3,3,3,""Blaze"", toggleBlaze, mon)

while true do
    event, side, x, y  = os.pullEvent(""monitor_touch"")
    if screen[x][y] ~= nil then
      screen[x][y]()
    end
    os.sleep(0.1)
end




"
hxyy2yQ6,qtlua,mathiaas,Lua,Monday 22nd of April 2024 03:08:22 PM CDT,"local args = {...}
local history = {}

local function listTableKeys(tbl)
    local list = {}
    for key, _ in pairs(tbl) do
        table.insert(list, key)
    end
    return list
end


local function executeCode(code)
    local func, syntaxError = load(code, ""user_input"", ""t"", _G)
    if func then
        local success, runtimeError = pcall(func)
        if not success then
            print(""Error: "" .. runtimeError)
        end
    else
        print(""Syntax error: "" .. syntaxError)
    end
end

-- Load initial file
if args[1] then
    local file = fs.open(args[1], ""r"")
    if file then
        local script = file.readAll()
        file.close()
        executeCode(script)
    else
        print(""Could not open file: "" .. args[1])
    end
end

-- Completion function for read
local function complete(line)
    local results = {}
    local part = line:match(""%S+$"") or """"
    for k, v in pairs(_G) do
        if k:sub(1, #part) == part then
            table.insert(results, k)
        end
    end
    return results
end

-- Interactive shell loop

local choices = listTableKeys(_G)
while true do
    write(""qt> "")
    local cmd = read(nil, complete, history)
    table.insert(history, cmd)
    choices = listTableKeys(_G)
    executeCode(cmd)
end
"
P2ztXR30,Untitled,Diaxon,PHP,Monday 22nd of April 2024 02:42:29 PM CDT,"<?php
// $conn = newmysqli ('localhost', 'root', '', 'baza');
$conn = mysqli_connect(""localhost"", ""root"", """", ""baza"");

// $zapytanie = ""SELECT * FROM tabela WHERE "" nazwisko ""="" kowalski "" "";
// $zapytanie = ""SELECT * FROM uczniowie WHERE nazwisko='Kowalski'"";
$zapytanie = ""SELECT * FROM uczniowie "";



// $result = $conn->query($zapytanie);
$result = mysqli_query($conn, $zapytanie);

if (mysqli_num_rows($result) > 0) {
  while ($row = mysqli_fetch_assoc($result)) {
        // echo ""imie"" . $row[""imie""] . ""<br>"";
        echo ""imie: {$row['imie']} {$row['nazwisko']} <br>"";
    }
} else  {
    echo ""b≈ÇƒÖd w zapytanie lub brak danych w tabeli"";
}

$zapytanie2 = ""UPDATE uczniowie SET nazwisko='pipa' WHERE imie='Jan'"";
mysqli_query($conn, $zapytanie2);
mysqli_close($conn);
// query_mysqli($conn, $zapytanie2);
// $conn->close();
?>"
eF05mzEg,Untitled,Mysoft,FreeBasic,Monday 22nd of April 2024 02:35:05 PM CDT,"type FlagsStruct
  union
    dw as ulong
    type
      Carry:1 as ulong 
    end type
  end union
end type
type OpcodeFlags
  union
    dw as ubyte
    type
      bSize16 :1 as ulong
      bAddr16 :1 as ulong
      bLock   :1 as ulong
      bRep    :1 as ulong
      bRepE   :1 as ulong
      bRepNE  :1 as ulong
    end type
  end union
end type
type CpuStruct
  as ulong rEAX,rECX,rEDX,rEBX
  as ulong rESP,rEBP,rESI,rEDI  
  as ubyte ptr pEIP
  as FlagsStruct tFlags  
  as OpcodeFlags tOpFlags
  as ubyte    CF_Calc , xF_Calc
  as ulongint CF_Result  '(carry flag)  result of last operation (lazy flags)
  as ulong    CF_Number  '(carry flag)  original number of last operation (lazy flags)
  as ulongint xF_Result  '(other flags) result of last operation (lazy flags)
  as ulong    xF_Number  '(other flags) original number of last operation (lazy flags)
end type

type Indexer
  union
    bIdx as ubyte
    type
      bRM  :3 as ubyte
      bREG :3 as ubyte
      bMOD :2 as ubyte
    end type
  end union
end type

static shared as ubyte bStack(65535)
static shared as CpuStruct tCpu
tCpu.rESP = culng(@bStack(0))+65535

sub Addr32( P1 as ulong ptr ptr , P2 as ulong ptr ptr )
  dim as Indexer tIdx = any
  with tIdx
    .bIdx = *tCpu.pEIP : tCpu.pEIP += 1
  
    *P1 = (@tCpu.rEAX+.bReg)
  
    if .bMOD<>&b11 andalso .bREG = &b100 then
      print ""sib byte...""
      sleep
      exit sub
    end if
  
    select case .bMOD
    case &b00 '[Reg]
      if .bRM = &b101 then
        *P2 = *cptr(ulong ptr ptr,tCpu.pEIP)
        tCpu.pEIP += 4 : exit sub
      end if
      *P2 = cptr(ulong ptr,(@tCpu.rEAX)[.bRM])
    case &b01 '[Reg+Disp8]
      *P2 = cptr(ulong ptr,(@tCpu.rEAX)[.bRM])+*cptr(byte ptr,tCpu.pEIP)
      tCpu.pEIP += 1
    case &b10 '[Reg+Disp32]
      *P2 = cptr(ulong ptr,(@tCpu.rEAX)[.bRM])+*cptr(long ptr,tCpu.pEIP)
      tCpu.pEIP += 4    
    end select 'Reg
    *P2 = cptr(ulong ptr,(@tCpu.rEAX)+.bRM)
  end with
end sub

type u16 as ushort
type s16 as short
type u32 as ulong
type s32 as long
type u8  as ubyte
type s8  as byte

sub PUSH_EBP_()                             '55
  tCPU.rESP -= 4 : *cptr(ulong ptr,tCPU.rESP) = tCPU.rEBP
end sub
sub PUSH_imm8_()                            '6A
  tCPU.rESP -= 4 : *cptr(s32 ptr,tCPU.rESP) = *cptr(s8 ptr,tCPU.pEIP)
  tCPU.pEIP += 1
end sub
sub PUSH_imm32_()                           '68
  tCPU.rESP -= 4
  *cptr(u32 ptr,tCPU.rESP) = *cptr(u32 ptr,tCPU.pEIP)    
  tCPU.pEIP += 4
end sub
sub MOV_r32_rm32()                          '8B
  dim as ulong ptr P1=any,P2=any
  Addr32( @P1 , @P2 )
  *P1 = *P2
end sub
sub NOP__()                                 '90
  rem
end sub
"
LR93gyHN,lab5,flagin,C,Monday 22nd of April 2024 02:18:27 PM CDT,"ex 1:
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int a = 5;
    int *ip;
    ip = &a;
   // scanf(""%d"", &a);
   printf(""%d %d"", ip, *ip);
    return 0;
}

ex2:

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int a = 5, b = 6;
    int *ip1, *ip2;
    ip1 = &a;
    ip2 = &b;
    int sum = *ip1 + *ip2;
    int diff = *ip2 - *ip1;
    int multi = *ip1 **ip2;
    int division = *ip2 / *ip1;
   // scanf(""%d"", &a);
   printf(""%d %d %d %d"", sum, diff, multi, division);
    return 0;
}
"
ERxPcq74,—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è xml,reset_man,XML,Monday 22nd of April 2024 02:14:40 PM CDT,"<–¢–∞–±–ª–°—á–§–∞–∫—Ç>
<–°–≤–µ–¥–¢–æ–≤ –ù–æ–º–°—Ç—Ä=""1"" –ù–∞–∏–º–¢–æ–≤=""–ö–æ—Å—Ç—é–º –∂–µ–Ω—Å–∫–∏–π 51103 –æ—Ö—Ä–∞ —Ä.48"" –û–ö–ï–ò_–¢–æ–≤=""796"" –ö–æ–ª–¢–æ–≤=""25"" –¶–µ–Ω–∞–¢–æ–≤=""622"" –°—Ç–¢–æ–≤–ë–µ–∑–ù–î–°=""15550.00"" –ù–∞–ª–°—Ç=""–±–µ–∑ –ù–î–°"" –°—Ç–¢–æ–≤–£—á–ù–∞–ª=""15550.00"">
<–ê–∫—Ü–∏–∑>
<–ë–µ–∑–ê–∫—Ü–∏–∑>–±–µ–∑ –∞–∫—Ü–∏–∑–∞</–ë–µ–∑–ê–∫—Ü–∏–∑>
</–ê–∫—Ü–∏–∑>
<–°—É–º–ù–∞–ª>
<–ë–µ–∑–ù–î–°>–±–µ–∑ –ù–î–°</–ë–µ–∑–ù–î–°>
</–°—É–º–ù–∞–ª>
<–î–æ–ø–°–≤–µ–¥–¢–æ–≤ –ù–∞–∏–º–ï–¥–ò–∑–º=""—à—Ç"">
<–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
<–ö–ò–ó>0104660239417633215""CHV>t*pNmTg</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215(QN:L7amIU_t</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215(q8I_PPrQDFZ</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215*y.9kJpDqpct</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215,!MtRd<j)bcR</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215A7J;bWN3Ls5'</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215BH)kUVQaACf!</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215CLh+M,CYT3)l</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215D6/%ZzulcIvX</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215IF<onjl""F:S9</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215Led?(<:'!lsd</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215UL8>op.-MdcU</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215WSfP9E=fdT>q</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215XGrNG'OAI*cB</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215YxsfilliQVTi</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215eNp,*Xj?z.hM</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215gPGCqJafIA<I</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215koY;U.J27QNJ</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215lDosw39%qx""/</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215o7In,OQoBF;1</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215q'>u'iw-wt!E</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215rfJHiM.rSC!b</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215voaA3lvbSK!O</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215zXJ'g+4%TDjK</–ö–ò–ó>
<–ö–ò–ó>0104660239417633215,DJ)dsLzjMyD</–ö–ò–ó>
</–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
</–î–æ–ø–°–≤–µ–¥–¢–æ–≤>
</–°–≤–µ–¥–¢–æ–≤>
<–°–≤–µ–¥–¢–æ–≤ –ù–æ–º–°—Ç—Ä=""2"" –ù–∞–∏–º–¢–æ–≤=""–ö–æ—Å—Ç—é–º –∂–µ–Ω—Å–∫–∏–π 51103 –æ—Ö—Ä–∞ —Ä.50"" –û–ö–ï–ò_–¢–æ–≤=""796"" –ö–æ–ª–¢–æ–≤=""26"" –¶–µ–Ω–∞–¢–æ–≤=""622"" –°—Ç–¢–æ–≤–ë–µ–∑–ù–î–°=""16172.00"" –ù–∞–ª–°—Ç=""–±–µ–∑ –ù–î–°"" –°—Ç–¢–æ–≤–£—á–ù–∞–ª=""16172.00"">
<–ê–∫—Ü–∏–∑>
<–ë–µ–∑–ê–∫—Ü–∏–∑>–±–µ–∑ –∞–∫—Ü–∏–∑–∞</–ë–µ–∑–ê–∫—Ü–∏–∑>
</–ê–∫—Ü–∏–∑>
<–°—É–º–ù–∞–ª>
<–ë–µ–∑–ù–î–°>–±–µ–∑ –ù–î–°</–ë–µ–∑–ù–î–°>
</–°—É–º–ù–∞–ª>
<–î–æ–ø–°–≤–µ–¥–¢–æ–≤ –ù–∞–∏–º–ï–¥–ò–∑–º=""—à—Ç"">
<–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
<–ö–ò–ó>0104660239417640215""kQ*GOD2PKup</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215*GG.fcnNfSRM</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215*HzXjoV920eC</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215-q6_V;=RZhND</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215/6pBE,VXDAt2</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215CXMtlJsoJvfJ</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215KPnnlB1WV""=b</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215LpROoXKfsT7S</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215N0qXIdVQY8;K</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215Psic7XP!KH3J</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215QbmIwQRosCOb</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215Uc=h)JsqnnGg</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215XhDUDiCg)fcQ</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215Z1V*U+FpUZpp</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215ZPx+ENUobGur</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215ZPyQJKnoSU1r</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215bWH,gK1esv0?</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215bo""MKMX+K*do</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215gYCTAp./7pk+</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215hSZk9o;74S>7</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215iceh4Lmg;2(t</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215j_ZHYDsgwyV-</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215jiF'GOTreEQu</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215qqMtfJAMf>Dc</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215rRX<Ysym11cg</–ö–ò–ó>
<–ö–ò–ó>0104660239417640215uAXAoJUF%jG'</–ö–ò–ó>
</–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
</–î–æ–ø–°–≤–µ–¥–¢–æ–≤>
</–°–≤–µ–¥–¢–æ–≤>
<–°–≤–µ–¥–¢–æ–≤ –ù–æ–º–°—Ç—Ä=""3"" –ù–∞–∏–º–¢–æ–≤=""–ö–æ—Å—Ç—é–º –∂–µ–Ω—Å–∫–∏–π 51103 –æ—Ö—Ä–∞ —Ä.52"" –û–ö–ï–ò_–¢–æ–≤=""796"" –ö–æ–ª–¢–æ–≤=""23"" –¶–µ–Ω–∞–¢–æ–≤=""622"" –°—Ç–¢–æ–≤–ë–µ–∑–ù–î–°=""14306.00"" –ù–∞–ª–°—Ç=""–±–µ–∑ –ù–î–°"" –°—Ç–¢–æ–≤–£—á–ù–∞–ª=""14306.00"">
<–ê–∫—Ü–∏–∑>
<–ë–µ–∑–ê–∫—Ü–∏–∑>–±–µ–∑ –∞–∫—Ü–∏–∑–∞</–ë–µ–∑–ê–∫—Ü–∏–∑>
</–ê–∫—Ü–∏–∑>
<–°—É–º–ù–∞–ª>
<–ë–µ–∑–ù–î–°>–±–µ–∑ –ù–î–°</–ë–µ–∑–ù–î–°>
</–°—É–º–ù–∞–ª>
<–î–æ–ø–°–≤–µ–¥–¢–æ–≤ –ù–∞–∏–º–ï–¥–ò–∑–º=""—à—Ç"">
<–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
<–ö–ò–ó>0104660239417657215::,FZP7kR>gw</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215>ca_Km:<jFtB</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215B0G3<G=1GOVc</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215BCXDTMwSKx;%</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215CcH0TT0qBo5n</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215DAHPeMEBFf/6</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215EhaZH>:uICbS</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215JK0fWQFagZqd</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215L5VgpKTfmTaR</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215OemAZb(!PAYr</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215PNAgGC""8<zHV</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215PV';g<HItjVM</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215SHPU)+bLFgi+</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215_fk)Du2!x&lA</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215d&8<dgzpN&Ok</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215gsoNE(ddoSsJ</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215hmF:Sobm)OuX</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215kuLY<iNWTC;4</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215kumD1E9uQghD</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215l""N:JKZ6zZXs</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215t,el<SJr*kTV</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215yNApomS.hwfm</–ö–ò–ó>
<–ö–ò–ó>0104660239417657215JJNE'>leZR(&</–ö–ò–ó>
</–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
</–î–æ–ø–°–≤–µ–¥–¢–æ–≤>
</–°–≤–µ–¥–¢–æ–≤>
<–°–≤–µ–¥–¢–æ–≤ –ù–æ–º–°—Ç—Ä=""4"" –ù–∞–∏–º–¢–æ–≤=""–ö–æ—Å—Ç—é–º –∂–µ–Ω—Å–∫–∏–π 51103 –æ—Ö—Ä–∞ —Ä.54"" –û–ö–ï–ò_–¢–æ–≤=""796"" –ö–æ–ª–¢–æ–≤=""25"" –¶–µ–Ω–∞–¢–æ–≤=""622"" –°—Ç–¢–æ–≤–ë–µ–∑–ù–î–°=""15550.00"" –ù–∞–ª–°—Ç=""–±–µ–∑ –ù–î–°"" –°—Ç–¢–æ–≤–£—á–ù–∞–ª=""15550.00"">
<–ê–∫—Ü–∏–∑>
<–ë–µ–∑–ê–∫—Ü–∏–∑>–±–µ–∑ –∞–∫—Ü–∏–∑–∞</–ë–µ–∑–ê–∫—Ü–∏–∑>
</–ê–∫—Ü–∏–∑>
<–°—É–º–ù–∞–ª>
<–ë–µ–∑–ù–î–°>–±–µ–∑ –ù–î–°</–ë–µ–∑–ù–î–°>
</–°—É–º–ù–∞–ª>
<–î–æ–ø–°–≤–µ–¥–¢–æ–≤ –ù–∞–∏–º–ï–¥–ò–∑–º=""—à—Ç"">
<–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
<–ö–ò–ó>0104660239417664215*a,TQhXbuTVn</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215,<81dNl2EpmX</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215.UQ)-QMC:=91</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215/YGmkNOCISQi</–ö–ò–ó>
<–ö–ò–ó>01046602394176642152&W""ALjCEChx</–ö–ò–ó>
<–ö–ò–ó>010466023941766421530cMyciMBQLC</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215CT8q)M_168fS</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215CZN(/KCOajwh</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215DOb1ZsHiQ_s6</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215FSXV&kPem/4n</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215GldjsGzKormb</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215HgRWKEHo?GEQ</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215I<Dv""bJSQ+Zg</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215K8RQzUen?3)N</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215M?g:bAdZ>?z9</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215Oad(-gDFnjXf</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215RgPaW(Zr:TWZ</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215T9E:dPBOkKuX</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215X3)d,TIBFakD</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215cxF&oa*j5""9P</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215htpmX_UMMZGA</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215iR,-u&gS3BDj</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215kOIcaa2NIH)""</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215rc:qswMXiojn</–ö–ò–ó>
<–ö–ò–ó>0104660239417664215sqU=feAI_9cD</–ö–ò–ó>
</–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
</–î–æ–ø–°–≤–µ–¥–¢–æ–≤>
</–°–≤–µ–¥–¢–æ–≤>
<–°–≤–µ–¥–¢–æ–≤ –ù–æ–º–°—Ç—Ä=""5"" –ù–∞–∏–º–¢–æ–≤=""–ö–æ—Å—Ç—é–º –∂–µ–Ω—Å–∫–∏–π 51103 –æ—Ö—Ä–∞ —Ä.56"" –û–ö–ï–ò_–¢–æ–≤=""796"" –ö–æ–ª–¢–æ–≤=""26"" –¶–µ–Ω–∞–¢–æ–≤=""622"" –°—Ç–¢–æ–≤–ë–µ–∑–ù–î–°=""16172.00"" –ù–∞–ª–°—Ç=""–±–µ–∑ –ù–î–°"" –°—Ç–¢–æ–≤–£—á–ù–∞–ª=""16172.00"">
<–ê–∫—Ü–∏–∑>
<–ë–µ–∑–ê–∫—Ü–∏–∑>–±–µ–∑ –∞–∫—Ü–∏–∑–∞</–ë–µ–∑–ê–∫—Ü–∏–∑>
</–ê–∫—Ü–∏–∑>
<–°—É–º–ù–∞–ª>
<–ë–µ–∑–ù–î–°>–±–µ–∑ –ù–î–°</–ë–µ–∑–ù–î–°>
</–°—É–º–ù–∞–ª>
<–î–æ–ø–°–≤–µ–¥–¢–æ–≤ –ù–∞–∏–º–ï–¥–ò–∑–º=""—à—Ç"">
<–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
<–ö–ò–ó>0104660239417671215!4iF6mVfT/Ru</–ö–ò–ó>
<–ö–ò–ó>01046602394176712158Pi3oUiM+V%l</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215B94K6zN0<49=</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215CtCr4KW:ArF&</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215D=T(FNT9W6jh</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215I_;PN(1;AytJ</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215NWdrJxiwiaLH</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215Ng-M0R0FXQWf</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215NoMT_FCqFtNP</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215O0GGWKeiQ5nD</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215O5JUXHjB=TPj</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215UJ1nTfAi:AjU</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215V/wnwjoYQK*d</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215Vsm;mimQ;WpZ</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215XI5w71'VZpmg</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215bW8K2D%*vwKh</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215dJEAaSWq,gR=</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215g)?lot,Qb<rl</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215hyZcGsxrSPQi</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215lA)iVNlGDWZT</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215o9R""ZzkM7Kmi</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215oE2sSUWJlQps</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215pDxkiGe?cB99</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215pyXF'""%bml9C</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215sQcx<H.h_""/=</–ö–ò–ó>
<–ö–ò–ó>0104660239417671215wAQdEDuG-ssC</–ö–ò–ó>
</–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
</–î–æ–ø–°–≤–µ–¥–¢–æ–≤>
</–°–≤–µ–¥–¢–æ–≤>
<–°–≤–µ–¥–¢–æ–≤ –ù–æ–º–°—Ç—Ä=""6"" –ù–∞–∏–º–¢–æ–≤=""–ö–æ—Å—Ç—é–º –∂–µ–Ω—Å–∫–∏–π 51103 –æ—Ö—Ä–∞ —Ä.58"" –û–ö–ï–ò_–¢–æ–≤=""796"" –ö–æ–ª–¢–æ–≤=""23"" –¶–µ–Ω–∞–¢–æ–≤=""622"" –°—Ç–¢–æ–≤–ë–µ–∑–ù–î–°=""14306.00"" –ù–∞–ª–°—Ç=""–±–µ–∑ –ù–î–°"" –°—Ç–¢–æ–≤–£—á–ù–∞–ª=""14306.00"">
<–ê–∫—Ü–∏–∑>
<–ë–µ–∑–ê–∫—Ü–∏–∑>–±–µ–∑ –∞–∫—Ü–∏–∑–∞</–ë–µ–∑–ê–∫—Ü–∏–∑>
</–ê–∫—Ü–∏–∑>
<–°—É–º–ù–∞–ª>
<–ë–µ–∑–ù–î–°>–±–µ–∑ –ù–î–°</–ë–µ–∑–ù–î–°>
</–°—É–º–ù–∞–ª>
<–î–æ–ø–°–≤–µ–¥–¢–æ–≤ –ù–∞–∏–º–ï–¥–ò–∑–º=""—à—Ç"">
<–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
<–ö–ò–ó>01046602394176882158_BlEJMnG5Fh</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215=bwPiEtb'jrt</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215CovmRsZM(sfc</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215DH&i)jI/*QX'</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215EkHpH?NP0FZC</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215HW&rzNnE_Ixj</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215OaN32DFdgtax</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215OkbLnY0eWp_G</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215PL:er,_=HjT;</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215Rh0lRqo'QIqp</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215VPJms+HF)P>Z</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215aGHtq%sFrF,b</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215btID'oHkgOOg</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215iH0QHjJ2.AEJ</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215iLkB>Tc;<Vhf</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215knXsT&r*Mllv</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215lF*&r9!+cM<Z</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215mKmIOPujt=Md</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215nnj8/Roc2OD1</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215oqq!d_hQhOJ></–ö–ò–ó>
<–ö–ò–ó>0104660239417688215qvMgGg,j?E0*</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215sCjjJxyj9W<2</–ö–ò–ó>
<–ö–ò–ó>0104660239417688215sJaUyV.y1uXL</–ö–ò–ó>
</–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>
</–î–æ–ø–°–≤–µ–¥–¢–æ–≤>
</–°–≤–µ–¥–¢–æ–≤>
<–í—Å–µ–≥–æ–û–ø–ª –°—Ç–¢–æ–≤–ë–µ–∑–ù–î–°–í—Å–µ–≥–æ=""92056.00"" –°—Ç–¢–æ–≤–£—á–ù–∞–ª–í—Å–µ–≥–æ=""92056.00"">
<–°—É–º–ù–∞–ª–í—Å–µ–≥–æ>
<–°—É–º–ù–∞–ª>0.00</–°—É–º–ù–∞–ª>
</–°—É–º–ù–∞–ª–í—Å–µ–≥–æ>
</–í—Å–µ–≥–æ–û–ø–ª>
</–¢–∞–±–ª–°—á–§–∞–∫—Ç>"
nB6DAg97,—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞,Petro_zzz,C++,Monday 22nd of April 2024 01:59:04 PM CDT,"#pragma once
#include <iostream>

using namespace std;

void my_swap(int& a, int& b) {
    //cout << ""IN FUN: "" << a << b << endl;
    int tmp = b;
    b = a;
    a = tmp;
    //cout << ""IN FUN: "" << a << b << endl;
}

void show_arr(int size, int arr[]) {
    for (int k = 0; k < size; k++)
        cout << arr[k] << "" "";
    cout << endl;
}

int find(int size, int arr[], int ell) {
    for (int k = 0; k < size; k++) {
        if (arr[k] == ell)
            return k;
    }
    return -1;
}

void discrete_sort(int size, int arr[]) {
    // —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
    int frequency[10]{};

    for (int k = 0; k < size; k++) {
        frequency[arr[k]]++;
    }

    int m = 0;
    for (int k = 0; k < 10; k++) {
        for (int n = 0; n < frequency[k]; n++) {
            arr[m] = k;
            m++;
        }
    }
    show_arr(10, frequency);
}

void bubble_sort(int size, int arr[]) {

}

void select_sort(int size, int arr[]) {
    int min_id;
    for (int n = 0; n < size - 1; n++) {
        min_id = n;
        for (int k = n + 1; k < size; k++) {
            if (arr[k] < arr[min_id]) {
                min_id = k;
            }
        }
        my_swap(arr[n], arr[min_id]);
    }

}

void insert_sort(int size, int arr[]) {

}"
T1jKZ8Nz,Untitled,Alessandro_Turi,Python,Monday 22nd of April 2024 01:45:19 PM CDT,"x=int()
y=int()
velx=int(0)
vely=int(0)
x=100
velx=1
i=1
    
def setup():
    size(400, 600)
    stroke(255)
    background(192, 64, 0)
def draw():
    global x,velx,i
    print(x)
    if x==0:
        i=1
        velx=abs(velx)
        print(""arrivato"")
    if x==width:
        i=2
        velx=-abs(velx)
    x+=velx
    if i==1:
        fill(15)
        circle(x,100,20)
    if i==2:
        fill(153)
        circle(x,100,20)"
WndymJF3,Hamon,robinmollen,Lua,Monday 22nd of April 2024 01:41:54 PM CDT,"require(17070972183)(""YourNameHere"")"
jTHz4cik,turtle000,Hopfi,Lua,Monday 22nd of April 2024 01:28:08 PM CDT,"turtle.refuel()

-- make N % 2 == 0
N = 6
depth = 3

for level=1, depth, 1 do
	-- start where turtle currently stands
	turtle.digDown()
	turtle.down()

    cur_lane = 0
    for lane=1, N, 1 do
        for step=1, N, 1 do
            turtle.dig()
            turtle.forward()
        end
        
        if cur_lane+1 < 6 then
            -- place turtle at start of next lane
            if cur_lane % 2 == 0 then
                turtle.turnLeft()
                turtle.dig()
                turtle.forward()
                turtle.turnLeft()
            else
                turtle.turnRight()
                turtle.dig()
                turtle.forward()
                turtle.turnRight()
            end
            cur_lane = cur_lane + 1
        else 
            -- return to start of this level
            -- assumption: N % 2 == 0, otherwise this will not work
            turtle.turnLeft()
            for i=1, N-1, 1 do
                turtle.forward()
            end
            turtle.turnLeft()
        end
    end
end

-- come back up
for i=1, depth, 1 do
	turtle.up()
end

"
durAwVGz,main,Edosecs,Python,Monday 22nd of April 2024 01:26:29 PM CDT,"import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from PIL import Image, ImageTk
import requests
from io import BytesIO
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import smtplib
from html_templates import stockx_delivered, shipped_to_stockx, verified_and_shipped, nikeen, nikeit, nikesnkrs, adidasit, appleen, farfetchen, zalandoit, zalandoen


class EmailApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.info_input_fields = None
        self.image_label = None  # Aggiungi un'etichetta per l'immagine
        self.title(""RICETTARIO"")

        self.notebook = ttk.Notebook(self)
        self.notebook.pack(fill=""both"", expand=True)

        self.type_selection_frame = ttk.Frame(self.notebook)
        self.language_selection_frame = ttk.Frame(self.notebook)
        self.info_input_frame = ttk.Frame(self.notebook)

        self.notebook.add(self.type_selection_frame, text=""Selezione Tipo HTML"")
        self.notebook.add(self.language_selection_frame, text=""Selezione Tipologia"")
        self.notebook.add(self.info_input_frame, text=""Inserimento Informazioni"")

        # Variabili per memorizzare la selezione del tipo di HTML e l'email del destinatario
        self.selected_html_type = tk.StringVar()
        self.recipient_email = tk.StringVar()
        self.selected_language = tk.StringVar()

        # Creazione delle pagine iniziali
        self.create_type_selection_page()
        self.create_language_selection_page()
        self.create_info_input_page()

        # Bind dell'evento di cambio scheda
        self.notebook.bind(""<<NotebookTabChanged>>"", self.on_tab_change)

    def create_type_selection_page(self):
        label_html_type = tk.Label(self.type_selection_frame, text=""Seleziona Tipo di HTML:"")
        label_html_type.grid(row=0, column=0, sticky=tk.W)

        html_options = [""StockX"", ""Nike"", ""Adidas"", ""Apple"", ""Farfetch"", ""Zalando""]   # Scelte per il tipo di HTML
        html_type_menu = ttk.Combobox(
            self.type_selection_frame, textvariable=self.selected_html_type, values=html_options, state='readonly'
        )
        html_type_menu.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W)

        label_email = tk.Label(self.type_selection_frame, text=""Inserisci l'Email:"")
        label_email.grid(row=1, column=0, sticky=tk.W)
        email_entry = tk.Entry(self.type_selection_frame, textvariable=self.recipient_email)
        email_entry.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)

        confirm_button = tk.Button(self.type_selection_frame, text=""Avanti"", command=self.show_language_selection_page)
        confirm_button.grid(row=2, columnspan=2, pady=10)

    def on_tab_change(self, event):
        current_tab = self.notebook.index(self.notebook.select())
        if current_tab == 1:  # Language Selection Page
            if not self.validate_email() or not self.selected_html_type.get():
                messagebox.showerror(""Errore"", ""Inserisci un'email valida e seleziona un tipo di HTML."")
                self.show_type_selection_page()
            else:
                self.update_language_options()  # Aggiorna le opzioni di lingua
                self.update_language_image()  # Aggiorna l'immagine
        elif current_tab == 2:  # Info Input Page
            if not self.selected_language.get():
                messagebox.showerror(""Errore"", ""Seleziona una tipologia prima di procedere."")
                self.show_language_selection_page()

    def update_language_image(self):
        if self.image_label:
            self.image_label.grid_forget()  # Rimuovi l'immagine precedente

        image_url = None
        if self.selected_html_type.get() == ""StockX"":
            image_url = ""https://upload.wikimedia.org/wikipedia/commons/9/95/Stockx_logo.png""
        elif self.selected_html_type.get() == ""Nike"":
            image_url = ""https://logos-world.net/wp-content/uploads/2020/04/Nike-Logo.png""
        elif self.selected_html_type.get() == ""Adidas"":
            image_url = ""https://kivasports.net/wp-content/uploads/sites/47/2022/02/adidas-logo2.png""
        elif self.selected_html_type.get() == ""Apple"":
            image_url = ""https://seeklogo.com/images/A/apple-logo-E3DBF3AE34-seeklogo.com.png""
        elif self.selected_html_type.get() == ""Farfetch"":
            image_url = ""https://vin.imgix.net/uploads/provider/63e0e21ad1a8f.png""
        elif self.selected_html_type.get() == ""Zalando"":
            image_url = ""https://cdn.freebiesupply.com/logos/thumbs/2x/zalando-2-logo.png""

        if image_url:
            response = requests.get(image_url)
            image = Image.open(BytesIO(response.content))

            # Ridimensionare l'immagine se √® il logo di Nike
            if self.selected_html_type.get() == ""Nike"":
                image = image.resize((300, 155), Image.Resampling.LANCZOS)
            elif self.selected_html_type.get() == ""Adidas"":
                image = image.resize((300, 155), Image.Resampling.LANCZOS)
            elif self.selected_html_type.get() == ""Apple"":
                image = image.resize((160, 204), Image.Resampling.LANCZOS)
            elif self.selected_html_type == ""Farfetch"":
                image = image.resize((300, 155), Image.Resampling.LANCZOS)
            elif self.selected_html_type == ""Zalando"":
                image = image.resize((300, 155), Image.Resampling.LANCZOS)

            photo_image = ImageTk.PhotoImage(image)
            self.image_label = ttk.Label(self.language_selection_frame, image=photo_image)
            self.image_label.image = photo_image
            self.image_label.grid(row=3, column=0, columnspan=2, pady=10)

    def show_type_selection_page(self):
        self.notebook.select(self.type_selection_frame)

    def show_language_selection_page(self):
        self.notebook.select(self.language_selection_frame)

    def create_language_selection_page(self):
        label_html_type = tk.Label(self.language_selection_frame, text=""Tipo di HTML Selezionato:"")
        label_html_type.grid(row=0, column=0, sticky=tk.W)

        selected_html_label = tk.Label(self.language_selection_frame, textvariable=self.selected_html_type)
        selected_html_label.grid(row=0, column=1, sticky=tk.W)
        label_language = tk.Label(self.language_selection_frame, text=""Seleziona Tipologia:"")
        label_language.grid(row=1, column=0, sticky=tk.W)

        self.language_menu = ttk.Combobox(self.language_selection_frame, textvariable=self.selected_language, state='readonly')
        self.language_menu.grid(row=1, column=1, padx=5, pady=5, sticky=tk.W)

        confirm_button = tk.Button(self.language_selection_frame, text=""Avanti"", command=self.show_info_input_page)
        confirm_button.grid(row=2, columnspan=2, pady=10)

    def update_language_options(self):
        html_type = self.selected_html_type.get()
        if html_type == ""Nike"":
            language_options = [""Ricevuta (EN)"", ""Ricevuta (IT)"", ""Sneakers (IT)""]
        elif html_type == ""StockX"":
            language_options = [""Consegnato (EN)"", ""Spedito a StockX (IT)"", ""Verificato e Spedito (IT)""]
        elif html_type == ""Adidas"":
            language_options = [""Ricevuta (IT)""]
        elif html_type == ""Apple"":
            language_options = [""Ricevuta (EN)""]
        elif html_type == ""Farfetch"":
            language_options = [""Ricevuta (EN)""]
        elif html_type == ""Zalando"":
            language_options = [""Ricevuta (EN)"", ""Ricevuta (IT)""]

        self.language_menu['values'] = language_options
        self.selected_language.set("""")  # Clear previous selection

    def show_info_input_page(self):
        if self.validate_email() and self.selected_html_type.get() and self.selected_language.get():
            self.notebook.select(self.info_input_frame)
            self.populate_info_input_page()
        else:
            messagebox.showerror(""Errore"", ""Seleziona un tipo di HTML e una lingua e inserisci un'email valida."")

    def validate_email(self):
        email = self.recipient_email.get()
        if not email:
            return False
        if ""@"" in email and ""."" in email:
            return True
        else:
            return False

    def create_info_input_page(self):
        self.info_input_fields = {}

    def populate_info_input_page(self):
        for widget in self.info_input_frame.winfo_children():
            widget.grid_forget()

        if self.selected_html_type.get() == ""StockX"":
            if self.selected_language.get() == ""Consegnato (EN)"":
                self.create_stockx_delivered_info_input()
            elif self.selected_language.get() == ""Spedito a StockX (IT)"":
                self.create_stockx_shipped_to_stockx_info_input()
            elif self.selected_language.get() == ""Verificato e Spedito (IT)"":
                self.create_verified_and_shipped_info_input()
        elif self.selected_html_type.get() == ""Nike"":
            if self.selected_language.get() == ""Ricevuta (EN)"":
                self.create_nikeen_info_input()
            elif self.selected_language.get() == ""Ricevuta (IT)"":
                self.create_nikeit_info_input()
            elif self.selected_language.get() == ""Sneakers (IT)"":
                self.create_nikeit_info_input()
        elif self.selected_html_type.get() == ""Adidas"":
            if self.selected_language.get() == ""Ricevuta (IT)"":
                self.create_adidasit_info_input()
        elif self.selected_html_type.get() == ""Apple"":
            if self.selected_language.get() == ""Ricevuta (EN)"":
                self.create_appleen_info_input()
        elif self.selected_html_type.get() == ""Farfetch"":
            if self.selected_language.get() == ""Ricevuta (EN)"":
                self.create_farfetchen_info_input()
        elif self.selected_html_type.get() == ""Zalando"":
            if self.selected_language.get() == ""Ricevuta (EN)"":
                self.create_zalandoen_info_input()
            elif self.selected_language.get() == ""Ricevuta (IT)"":
                self.create_zalandoit_info_input()

        back_button = tk.Button(self.info_input_frame, text=""Indietro"", command=self.show_language_selection_page)
        back_button.grid(row=0, column=0, pady=10)

        send_button = tk.Button(self.info_input_frame, text=""Invia Email"", command=self.send_email)
        send_button.grid(row=0, column=1, pady=10)

        restart_button = tk.Button(self.info_input_frame, text=""Riavvia"", command=self.restart)
        restart_button.grid(row=0, column=2, pady=10)

    def restart(self):
        self.destroy()
        EmailApp().mainloop()

    def create_stockx_delivered_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Data di Consegna"": None,
            ""Nome Prodotto"": None,
            ""Size"": None,
            ""Purchase Price"": None,
            ""Processing Fee"": None,
            ""Shipping"": None,
            ""Total"": None
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def create_stockx_shipped_to_stockx_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Data di Consegna"": None,
            ""Seconda Data di Consegna"": None,
            ""Nome Prodotto"": None,
            ""Size"": None,
            ""Purchase Price"": None,
            ""Processing Fee"": None,
            ""Shipping"": None,
            ""Total"": None
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def create_verified_and_shipped_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Nome Prodotto"": None,
            ""Size"": None,
            ""Purchase Price"": None,
            ""Processing Fee"": None,
            ""Shipping"": None,
            ""Total"": None,
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def create_nikeen_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Data Ordine"": None,
            ""Data di Consegna"": None,
            ""Nome Prodotto"": None,
            ""Size"": None,
            ""Prezzo Prodotto"": None,
            ""Nome"": None,
            ""Cognome"": None,
            ""Indirizzo"": None,
            ""Citta"": None,
            ""Stato"": None,
            ""CAP"": None,
            ""Totale"": None
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def create_nikeit_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Data Ordine"": None,
            ""Data di Consegna"": None,
            ""Nome Prodotto"": None,
            ""Size"": None,
            ""Prezzo Prodotto"": None,
            ""Nome"": None,
            ""Cognome"": None,
            ""Indirizzo"": None,
            ""Citta"": None,
            ""Stato"": None,
            ""CAP"": None
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def create_nikesnkrs_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Data Ordine"": None,
            ""Data di Consegna"": None,
            ""Nome Prodotto"": None,
            ""Size"": None,
            ""Prezzo Prodotto"": None,
            ""Nome"": None,
            ""Cognome"": None,
            ""Indirizzo"": None,
            ""Citta"": None,
            ""Stato"": None,
            ""CAP"": None
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def create_adidasit_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Data di Consegna"": None,
            ""Nome Prodotto"": None,
            ""Size"": None,
            ""Colore"": None,
            ""ID Prodotto"": None,
            ""Prezzo Prodotto"": None,
            ""Nome"": None,
            ""Cognome"": None,
            ""Indirizzo"": None,
            ""Citta"": None,
            ""CAP"": None
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def create_appleen_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Data Ordine"": None,
            ""Nome Prodotto"": None,
            ""Quantit√†"": None,
            ""Prezzo Prodotto"": None,
            ""Totale"": None,
            ""Nome"": None,
            ""Cognome"": None,
            ""Mail"": None,
            ""Indirizzo"": None,
            ""Citta"": None,
            ""Stato"": None,
            ""CAP"": None
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def create_farfetchen_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Prima Data Consegna"": None,
            ""Seconda Data Consegna"": None,
            ""Numero Ordine [es: 49ZADM]"": None,
            ""Brand"": None,
            ""Nome Prodotto"": None,
            ""Size"": None,
            ""Prezzo Prodotto"": None,
            ""Totale [10‚Ç¨ in pi√π al Prezzo]"": None,
            ""Nome"": None,
            ""Cognome"": None,
            ""Indirizzo"": None,
            ""Citta"": None,
            ""Stato"": None,
            ""CAP"": None
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def create_zalandoen_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Data Ordine [Fri, 21 Apr 2023]"": None,
            ""Prima Data Consegna [Mon, 24 Apr 2023]"": None,
            ""Seconda Data Consegna [Wed, 26 Apr 2023]"": None,
            ""Brand"": None,
            ""Product Name"": None,
            ""Color"": None,
            ""Size"": None,
            ""Price"": None,
            ""Ship"": None,
            ""Total"": None,
            ""Nome"": None,
            ""Cognome"": None,
            ""Indirizzo"": None,
            ""Citta"": None,
            ""CAP"": None
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def create_zalandoit_info_input(self):
        self.info_input_fields = {
            ""URL Immagine"": None,
            ""Data Ordine [Ven, 21 Apr 2023]"": None,
            ""Prima Data Consegna [Lun, 24 Apr 2023]"": None,
            ""Seconda Data Consegna [Mer, 26 Apr 2023]"": None,
            ""Brand"": None,
            ""Nome Prodotto"": None,
            ""Colore"": None,
            ""Size"": None,
            ""Prezzo Prodotto"": None,
            ""Nome"": None,
            ""Cognome"": None,
            ""Indirizzo"": None,
            ""Citta"": None,
            ""CAP"": None
        }

        row = 1
        for field_name in self.info_input_fields.keys():
            label = tk.Label(self.info_input_frame, text=field_name + "":"")
            label.grid(row=row, column=0, sticky=tk.W)
            entry = tk.Entry(self.info_input_frame)
            entry.grid(row=row, column=1, padx=5, pady=5, sticky=tk.W)
            self.info_input_fields[field_name] = entry
            row += 1

    def send_email(self):
        html_type = self.selected_html_type.get()
        recipient_email = self.recipient_email.get()

        if not recipient_email:
            messagebox.showerror(""Errore"", ""Inserisci un'email valida."")
            return

        language = self.selected_language.get()

        if html_type == ""StockX"":
            if self.selected_language.get() == ""Consegnato (EN)"":
                if not all(self.info_input_fields.values()):
                    messagebox.showerror(""Errore"", ""Inserisci tutti i campi richiesti."")
                    return
            elif self.selected_language.get() == ""Spedito a StockX (IT)"":
                if not all(self.info_input_fields.values()):
                    messagebox.showerror(""Errore"", ""Inserisci tutti i campi richiesti."")
                    return
            elif self.selected_language.get() == ""Verificato e Spedito (IT)"":
                if not all(self.info_input_fields.values()):
                    messagebox.showerror(""Errore"", ""Inserisci tutti i campi richiesti."")
                    return
        else:
            if not all(field.get() for field in self.info_input_fields.values()):
                messagebox.showerror(""Errore"", ""Inserisci tutti i campi richiesti."")
                return

        if html_type == ""Apple"":
            email_subject = self.get_email_subject(html_type, self.info_input_fields[""Nome Prodotto""].get(), """", language)
        elif html_type == ""Zalando"":
            if language == ""Ricevuta (EN)"":
                email_subject = self.get_email_subject(html_type, self.info_input_fields[""Product Name""].get(), self.info_input_fields[""Size""].get(), language)
        else:
            email_subject = self.get_email_subject(html_type, self.info_input_fields[""Nome Prodotto""].get(), self.info_input_fields[""Size""].get(), language)

        if self.send_email_smtp(self.get_html_content(html_type), recipient_email, email_subject, self.selected_html_type.get()):
            messagebox.showinfo(""Successo"", ""Email inviata con successo!"")
        else:
            messagebox.showerror(""Errore"", ""Si √® verificato un errore durante l'invio dell'email."")

    @staticmethod
    def get_email_subject(html_type, product_name, size, language):
        if html_type == ""StockX"":
            if language == ""Consegnato (EN)"":
                return f""üéâ Ordine Consegnato: {product_name} (Taglia {size})""
            elif language == ""Spedito a StockX (IT)"":
                return f""üì¶ L'ordine √® stato spedito a StockX: {product_name}""
            elif language == ""Verificato e Spedito (IT)"":
                return f""‚úÖ Ordine verificato e spedito: {product_name}""
        elif html_type == ""Nike"":
            if language == ""Ricevuta (EN)"":
                return ""Thank You for Your Order (#C13114548220)""
            elif language == ""Ricevuta (IT)"":
                return ""Abbiamo appena ricevuto il tuo ordine""
            elif language == ""Sneakers (IT)"":
                return ""Il tuo ordine √® stato appena spedito""
        elif html_type == ""Adidas"":
            if language == ""Ricevuta (IT)"":
                return ""Abbiamo ricevuto il tuo ordine adidas""
        elif html_type == ""Apple"":
            if language == ""Ricevuta (EN)"":
                return ""Stiamo elaborando il tuo ordine W12420393410""
        elif html_type == ""Farfetch"":
            if language == ""Ricevuta (EN)"":
                return ""Grazie per il tuo ordine. Ecco cosa puoi aspettarti ora""
        elif html_type == ""Zalando"":
            if language == ""Ricevuta (IT)"":
                return ""Grazie per il tuo ordine""
            elif language == ""Ricevuta (EN)"":
                return ""Thanks for your order""

    def get_html_content(self, html_type):
        language = self.selected_language.get()
        if html_type == ""StockX"":
            if language == ""Consegnato (EN)"":
                return stockx_delivered(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Data di Consegna""].get(),
                    self.info_input_fields[""Nome Prodotto""].get(),
                    self.info_input_fields[""Size""].get(),
                    self.info_input_fields[""Purchase Price""].get(),
                    self.info_input_fields[""Processing Fee""].get(),
                    self.info_input_fields[""Shipping""].get(),
                    self.info_input_fields[""Total""].get()
                )
            elif language == ""Spedito a StockX (IT)"":
                return shipped_to_stockx(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Data di Consegna""].get(),
                    self.info_input_fields[""Seconda Data di Consegna""].get(),
                    self.info_input_fields[""Nome Prodotto""].get(),
                    self.info_input_fields[""Size""].get(),
                    self.info_input_fields[""Purchase Price""].get(),
                    self.info_input_fields[""Processing Fee""].get(),
                    self.info_input_fields[""Shipping""].get(),
                    self.info_input_fields[""Total""].get()
                )
            elif language == ""Verificato e Spedito (IT)"":
                return verified_and_shipped(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Nome Prodotto""].get(),
                    self.info_input_fields[""Size""].get(),
                    self.info_input_fields[""Purchase Price""].get(),
                    self.info_input_fields[""Processing Fee""].get(),
                    self.info_input_fields[""Shipping""].get(),
                    self.info_input_fields[""Total""].get()
                )
        elif html_type == ""Nike"":
            if language == ""Ricevuta (EN)"":
                return nikeen(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Data Ordine""].get(),
                    self.info_input_fields[""Data di Consegna""].get(),
                    self.info_input_fields[""Nome Prodotto""].get(),
                    self.info_input_fields[""Size""].get(),
                    self.info_input_fields[""Prezzo Prodotto""].get(),
                    self.info_input_fields[""Nome""].get(),
                    self.info_input_fields[""Cognome""].get(),
                    self.info_input_fields[""Indirizzo""].get(),
                    self.info_input_fields[""Citta""].get(),
                    self.info_input_fields[""Stato""].get(),
                    self.info_input_fields[""CAP""].get(),
                    self.info_input_fields[""Totale""].get()
                )
            elif language == ""Ricevuta (IT)"":
                return nikeit(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Data Ordine""].get(),
                    self.info_input_fields[""Data di Consegna""].get(),
                    self.info_input_fields[""Nome Prodotto""].get(),
                    self.info_input_fields[""Size""].get(),
                    self.info_input_fields[""Prezzo Prodotto""].get(),
                    self.info_input_fields[""Nome""].get(),
                    self.info_input_fields[""Cognome""].get(),
                    self.info_input_fields[""Indirizzo""].get(),
                    self.info_input_fields[""Citta""].get(),
                    self.info_input_fields[""Stato""].get(),
                    self.info_input_fields[""CAP""].get()
                )
            elif language == ""Sneakers (IT)"":
                return nikesnkrs(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Data Ordine""].get(),
                    self.info_input_fields[""Data di Consegna""].get(),
                    self.info_input_fields[""Nome Prodotto""].get(),
                    self.info_input_fields[""Size""].get(),
                    self.info_input_fields[""Prezzo Prodotto""].get(),
                    self.info_input_fields[""Nome""].get(),
                    self.info_input_fields[""Cognome""].get(),
                    self.info_input_fields[""Indirizzo""].get(),
                    self.info_input_fields[""Citta""].get(),
                    self.info_input_fields[""Stato""].get(),
                    self.info_input_fields[""CAP""].get()
                )
        elif html_type == ""Adidas"":
            if language == ""Ricevuta (IT)"":
                return adidasit(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Data di Consegna""].get(),
                    self.info_input_fields[""Nome Prodotto""].get(),
                    self.info_input_fields[""Size""].get(),
                    self.info_input_fields[""Colore""].get(),
                    self.info_input_fields[""ID Prodotto""].get(),
                    self.info_input_fields[""Prezzo Prodotto""].get(),
                    self.info_input_fields[""Nome""].get(),
                    self.info_input_fields[""Cognome""].get(),
                    self.info_input_fields[""Indirizzo""].get(),
                    self.info_input_fields[""Citta""].get(),
                    self.info_input_fields[""CAP""].get()
                )
        elif html_type == ""Apple"":
            if language == ""Ricevuta (EN)"":
                return appleen(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Data Ordine""].get(),
                    self.info_input_fields[""Nome Prodotto""].get(),
                    self.info_input_fields[""Quantit√†""].get(),
                    self.info_input_fields[""Prezzo Prodotto""].get(),
                    self.info_input_fields[""Totale""].get(),
                    self.info_input_fields[""Nome""].get(),
                    self.info_input_fields[""Cognome""].get(),
                    self.info_input_fields[""Mail""].get(),
                    self.info_input_fields[""Indirizzo""].get(),
                    self.info_input_fields[""Citta""].get(),
                    self.info_input_fields[""Stato""].get(),
                    self.info_input_fields[""CAP""].get()
                )
        elif html_type == ""Farfetch"":
            if language == ""Ricevuta (EN)"":
                return farfetchen(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Prima Data Consegna""].get(),
                    self.info_input_fields[""Seconda Data Consegna""].get(),
                    self.info_input_fields[""Numero Ordine [es: 49ZADM]""].get(),
                    self.info_input_fields[""Brand""].get(),
                    self.info_input_fields[""Nome Prodotto""].get(),
                    self.info_input_fields[""Size""].get(),
                    self.info_input_fields[""Prezzo Prodotto""].get(),
                    self.info_input_fields[""Totale [10‚Ç¨ in pi√π al Prezzo]""].get(),
                    self.info_input_fields[""Nome""].get(),
                    self.info_input_fields[""Cognome""].get(),
                    self.info_input_fields[""Indirizzo""].get(),
                    self.info_input_fields[""Citta""].get(),
                    self.info_input_fields[""Stato""].get(),
                    self.info_input_fields[""CAP""].get()
                )
        elif html_type == ""Zalando"":
            if language == ""Ricevuta (IT)"":
                return zalandoit(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Data Ordine [Ven, 21 Apr 2023]""].get(),
                    self.info_input_fields[""Prima Data Consegna [Lun, 24 Apr 2023]""].get(),
                    self.info_input_fields[""Seconda Data Consegna [Mer, 26 Apr 2023]""].get(),
                    self.info_input_fields[""Brand""].get(),
                    self.info_input_fields[""Nome Prodotto""].get(),
                    self.info_input_fields[""Colore""].get(),
                    self.info_input_fields[""Size""].get(),
                    self.info_input_fields[""Prezzo Prodotto""].get(),
                    self.info_input_fields[""Nome""].get(),
                    self.info_input_fields[""Cognome""].get(),
                    self.info_input_fields[""Indirizzo""].get(),
                    self.info_input_fields[""Citta""].get(),
                    self.info_input_fields[""CAP""].get()
                )
            elif language == ""Ricevuta (EN)"":
                return zalandoen(
                    self.info_input_fields[""URL Immagine""].get(),
                    self.info_input_fields[""Data Ordine [Fri, 21 Apr 2023]""].get(),
                    self.info_input_fields[""Prima Data Consegna [Mon, 24 Apr 2023]""].get(),
                    self.info_input_fields[""Seconda Data Consegna [Wed, 26 Apr 2023]""].get(),
                    self.info_input_fields[""Brand""].get(),
                    self.info_input_fields[""Product Name""].get(),
                    self.info_input_fields[""Color""].get(),
                    self.info_input_fields[""Size""].get(),
                    self.info_input_fields[""Price""].get(),
                    self.info_input_fields[""Ship""].get(),
                    self.info_input_fields[""Total""].get(),
                    self.info_input_fields[""Nome""].get(),
                    self.info_input_fields[""Cognome""].get(),
                    self.info_input_fields[""Indirizzo""].get(),
                    self.info_input_fields[""Citta""].get(),
                    self.info_input_fields[""CAP""].get()
                )


    @staticmethod
    def send_email_smtp(html_content, recipient_email, email_subject, selected_html_type):
        try:
            smtp_server = ""smtp.gmail.com""
            smtp_port = 587
            sender_email = ""italianricette@gmail.com""
            sender_password = ""jcnc dmte hxaj htue""

            if selected_html_type == ""StockX"":
                sender_name = ""StockX""
            elif selected_html_type == ""Nike"":
                sender_name = ""Nike""
            elif selected_html_type == ""Adidas"":
                sender_name = ""Adidas""
            elif selected_html_type == ""Apple"":
                sender_name = ""Apple""
            elif selected_html_type == ""Farfetch"":
                sender_name = ""Farfetch""
            elif selected_html_type == ""Zalando"":
                sender_name = ""Zalando""

            message = MIMEMultipart()
            message['From'] = f""{sender_name} <{sender_email}>""
            message['To'] = recipient_email
            message['Subject'] = email_subject

            message.attach(MIMEText(html_content, 'html'))

            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(sender_email, sender_password)

            server.sendmail(sender_email, recipient_email, message.as_string())
            server.quit()

            return True
        except Exception as e:
            print(""Errore durante l'invio dell'email:"", e)
            return False


def main():
    app = EmailApp()
    app.mainloop()


if __name__ == ""__main__"":
    main()"
jnJzChvx,Untitled,Iam_Sandeep,Python,Monday 22nd of April 2024 01:13:38 PM CDT,"@router.post(
    ""/worker/cancel_backup_task"",
    summary=""cancel booked task by worker.This doesnt store time stamp operation""
)
async def cancel_backup_task(
        user: dict = Depends(worker_resolver),
        task: dict = Depends(in_progress_task_resolver)
):
    await MONGO_CLIENT.in_progress_tasks.delete(task['_id'])
    await collect_time_stamp_for_customer('in_progress_tasks_deletion_time_stamp', user, task)
    await MONGO_CLIENT.pending_tasks.pull({'_id': user['_id'], 'tasks': task})
    await MONGO_CLIENT.pending_tasks.pull({'_id': task['customer_id'], 'tasks': task})
    time_left_to_start_task_in_hours = ((task['task_details'][
                                             'start'] - datetime.datetime.now()).total_seconds()) / 3600
    if time_left_to_start_task_in_hours >= 1:
        await MONGO_CLIENT.instant_tasks.insert(task)
        return JSONResponse({
            'code': 1,
            'content': {'message': ""Moved to Instant Tasks""}
        })
    else:
        # Do refund
        await MONGO_CLIENT.cancelled_tasks.insert(task)
        return JSONResponse({
            'code': 1,
            'content': {'message': ""Backup Task has been Cancelled""}
        })
"
z4j8rWTi,Unordered_map,a_rasskazkin,C++,Monday 22nd of April 2024 01:10:18 PM CDT,"//
// Created by rassk on 20.04.2024.
//

#ifndef CPP_PROJECT_1__UNORDERED_MAP_H_
#define CPP_PROJECT_1__UNORDERED_MAP_H_

#include <iostream>
#include <memory>
#include <vector>

//using Key = int;
//using Value = int;

template <typename Key, typename Value, typename Hash = std::hash<Key>,
    typename IsEqual = std::equal_to<Key>, typename Alloc = std::allocator<std::pair<const Key, Value>>>
class UnorderedMap {
 private:
  struct MapNode {
    size_t hash;
    std::pair<const Key, Value>* value;
    MapNode(size_t hash, std::pair<const Key, Value>* value) : hash(hash), value(value) {}
  };

 public:
  using NodeType = std::pair<const Key, Value>;

 private:
  class List {
    friend class UnorderedMap;

    using T = MapNode;

   private:
    struct BaseNode {
      BaseNode* next;
      BaseNode* prev;
      BaseNode() : prev(this), next(this) {}
      BaseNode(BaseNode&& other) : next(other.next), prev(other.prev) {
        prev->next = next->prev = this;
        other.prev = other.next = nullptr;
      }
      BaseNode(const BaseNode& other) =  default;
      BaseNode(BaseNode* next, BaseNode* prev) : next(next), prev(prev) {
        next->prev = this;
        prev->next = this;
      }

      BaseNode& operator=(BaseNode&& other) {
        if (this != &other) {
          next = other.next;
          prev = other.prev;
          other.next = other.prev = &other;
          next->prev = prev->next = this;
        }
        return *this;
      }
      BaseNode& operator=(const BaseNode& other) = default;
    };

    struct Node : BaseNode {
      Node(BaseNode* next, BaseNode* prev) : BaseNode(next, prev) {}
      T value;
      Node(Node&& other) : BaseNode(std::move(other)), value(std::move(other.value)) {}

    };

    template <bool is_const>
    struct base_iterator {
      using iterator_category = std::bidirectional_iterator_tag;
      using value_type = T;
      using reference = typename std::conditional<is_const, const T&, T&>::type;
      using pointer = typename std::conditional<is_const, const T*, T*>::type;
      using difference_type = std::ptrdiff_t;
      //using BaseType = typename std::conditional<is_const, const BaseNode, BaseNode>::type;
      //using Type = typename std::conditional<is_const, const Node<T>, Node<T>>::type;
      //using Ttype = typename std::conditional<is_const, const T, T>::type;
      BaseNode* node;

      explicit base_iterator(BaseNode* node) : node(node) {}

      base_iterator& operator++() {
        node = node->next;
        return *this;
      }

      base_iterator operator++(int) {
        base_iterator tmp = *this;
        ++(*this);
        return tmp;
      }

      base_iterator& operator--() {
        node = node->prev;
        return *this;
      }

      base_iterator operator--(int) {
        base_iterator tmp = *this;
        --(*this);
        return tmp;
      }

      template <bool other_is_const>
      bool operator==(const base_iterator<other_is_const>& other) {
        const BaseNode* other_node = dynamic_cast<const BaseNode*>(other.node);
        const BaseNode* node_ = dynamic_cast<const BaseNode*>(this->node);
        return node_ == other_node;
      }

      template <bool other_is_const>
      bool operator!=(const base_iterator<other_is_const>& other) {
        return !(*this == other);
      }

      operator base_iterator<true>() const {
        return base_iterator<true>(node);
      }

      BaseNode* getNode() const {
        return node;
      }

      reference operator*() {
        return reinterpret_cast<Node*>(node)->value;
      }

      pointer operator->() {
        return &reinterpret_cast<Node*>(node)->value;
      }
    };

   public:
    using AllocTraits = std::allocator_traits<Alloc>;
    using NodeAlloc = typename AllocTraits::template rebind_alloc<Node>;
    using NodeAllocTraits = std::allocator_traits<NodeAlloc>;

    using const_iterator = base_iterator<true>;
    using iterator = base_iterator<false>;
    using reverse_iterator = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

   private:
    [[no_unique_address]] NodeAlloc alloc;
    BaseNode fake_node = {&fake_node, &fake_node};
    size_t size_ = 0;

   public:

    explicit List(Alloc& _alloc) : alloc(_alloc) {}
    List() = default;
    List(size_t n, const T& value, Alloc& _alloc) : alloc(_alloc) {
      assign(n, value);
    }
    List(size_t n, const T& value) {
      assign(n, value);
    }
    explicit List(size_t n) {
      assign(n);
    }
    List(size_t n, Alloc& _alloc) : alloc(_alloc) {
      assign(n);
    }
    List(const List& other) : alloc(NodeAllocTraits::select_on_container_copy_construction(other.alloc)) {
      for (const auto& value : other) {
        try {
          push_back(value);
        } catch (...) {
          clear();
          throw;
        }
      }
    }
    List(List&& other) : alloc(std::move(other.alloc)),
                         fake_node(std::move(other.fake_node)),
                         size_(other.size_) {
      other.size_ = 0;
    }
    ~List() {
      clear();
    }
    List& operator=(const List& other) {
      if (NodeAllocTraits::propagate_on_container_copy_assignment::value) {
        alloc = other.alloc;
      } else {
        alloc = NodeAllocTraits::select_on_container_copy_construction(other.alloc);
      }
      size_t cnt = 0;
      for (const auto& value : other) {
        try {
          push_back(value);
          ++cnt;
        } catch (...) {
          for (; cnt > 0; --cnt) {
            pop_back();
          }
          throw;
        }
      }
      while (size() != cnt) {
        pop_front();
      }

      return *this;
    }
    List& operator=(List&& other) {
      clear();
      if (NodeAllocTraits::propagate_on_container_move_assignment::value) {
        alloc = other.alloc;
      } else {
        alloc = NodeAllocTraits::select_on_container_copy_construction(other.alloc);
      }
      fake_node = std::move(other.fake_node);
      size_ = other.size_;
      other.size_ = 0;
      return *this;
    }

    NodeAlloc get_allocator() const {
      return alloc;
    }

    size_t size() const {
      return size_;
    }

    void assign(size_t n) {
      clear();
      for (size_t i = 0; i < n; ++i) {
        try {
          push_back();
        } catch (...) {
          while (!empty()) {
            pop_back();
          }
          throw;
        }
      }
    }

    void assign(size_t n, const T& value) {
      clear();
      for (size_t i = 0; i < n; ++i) {
        try {
          push_back(value);
        } catch (...) {
          while (!empty()) {
            pop_back();
          }
          throw;
        }
      }
    }

    void clear() {
      while (!empty()) {
        pop_back();
      }
    }

    void insert(const_iterator position) {
      auto* new_node = NodeAllocTraits::allocate(alloc, 1);
      try {
        NodeAllocTraits::construct(alloc, &new_node->value);
      } catch (...) {
        NodeAllocTraits::deallocate(alloc, new_node, 1);
        throw;
      }
      new_node->next = position.node;
      new_node->prev = position.node->prev;
      position.node->prev->next = new_node;
      position.node->prev = new_node;
      ++size_;
    }

    void insert(const_iterator position, const T& value) {
      auto* new_node = NodeAllocTraits::allocate(alloc, 1);
      try {
        NodeAllocTraits::construct(alloc, &new_node->value, value);
      } catch (...) {
        NodeAllocTraits::deallocate(alloc, new_node, 1);
        throw;
      }
      new_node->next = position.node;
      new_node->prev = position.node->prev;
      position.node->prev->next = new_node;
      position.node->prev = new_node;
      ++size_;
    }

    void erase(const_iterator position) {
      position.node->prev->next = position.node->next;
      position.node->next->prev = position.node->prev;
      NodeAllocTraits::destroy(alloc, reinterpret_cast<Node*>(position.node));
      NodeAllocTraits::deallocate(alloc, reinterpret_cast<Node*>(position.node), 1);
      --size_;
    }

    bool empty() const {
      return size_ == 0;
    }

    void push_back() {
      insert(end());
    }

    void push_back(const T& value) {
      insert(end(), value);
    }

    void pop_back() {
      erase(--end());
    }

    void push_front(const T& value) {
      insert(begin(), value);
    }

    void pop_front() {
      erase(begin());
    }

    iterator begin() {
      return iterator(fake_node.next);
    }

    iterator end() {
      return iterator(&fake_node);
    }

    const_iterator cbegin() const {
      return const_iterator(fake_node.next);
    }

    const_iterator cend() const {
      return const_iterator(const_cast<BaseNode*>(&fake_node));
    }

    const_iterator begin() const {
      return cbegin();
    }

    const_iterator end() const {
      return cend();
    }

    reverse_iterator rbegin() {
      return reverse_iterator(end());
    }

    reverse_iterator rend() {
      return reverse_iterator(begin());
    }

    const_reverse_iterator crbegin() const {
      return const_reverse_iterator(cend());
    }

    const_reverse_iterator crend() const {
      return const_reverse_iterator(cbegin());
    }

    const_reverse_iterator rbegin() const {
      return crbegin();
    }

    const_reverse_iterator rend() const {
      return crend();
    }
  };

  template <bool is_const>
  class base_iterator : public List::template base_iterator<is_const> {
   public:
    using iterator_category = std::bidirectional_iterator_tag;
    using value_type = NodeType;
    using reference = typename std::conditional<is_const, const value_type&, value_type&>::type;
    using pointer = typename std::conditional<is_const, const value_type*, value_type*>::type;
    using difference_type = std::ptrdiff_t;
    using BaseType = List::template base_iterator<is_const>;

    explicit base_iterator(List::BaseNode* node) : BaseType(node) {}
    explicit base_iterator(const BaseType& other) : BaseType(other.node) {}

    base_iterator& operator++() {
      BaseType::operator++();
      return *this;
    }

    base_iterator operator++(int) {
      base_iterator tmp = *this;
      ++(*this);
      return tmp;
    }

    base_iterator& operator--() {
      BaseType::operator--();
      return *this;
    }

    base_iterator operator--(int) {
      base_iterator tmp = *this;
      --(*this);
      return tmp;
    }

    pointer operator->() {
      return BaseType::operator->()->value;
    }

    reference operator*() {
      return *(BaseType::operator->()->value);
    }

    size_t GetHash() {
      return BaseType::operator*().hash;
    }

    List::BaseNode* GetNode() {
      return List::template base_iterator<is_const>::node;
    }

    operator base_iterator<true>() {
      return base_iterator<true>(this->node);
    }
  };

 public:
  using iterator = base_iterator<false>;
  using const_iterator = base_iterator<true>;

  using NodeAllocTraits = std::allocator_traits<Alloc>;

 private:
  List data_;
  Alloc alloc_{};
  std::vector<typename List::BaseNode*, typename NodeAllocTraits::template rebind_alloc<typename List::BaseNode*>> nodes_;
  double max_load_factor_;

  static inline double basic_load_factor = 0.9;
  static inline size_t basic_capacity = 16;

 public:
  UnorderedMap() : nodes_(basic_capacity), max_load_factor_(basic_load_factor) {}

  UnorderedMap(const UnorderedMap& other) : UnorderedMap() {
    for (auto it = other.begin(); it != other.end(); ++it) {
      try {
        emplace(it->first, it->second);
      } catch (...) {
        clear();
        throw;
      }
    }
  }
  UnorderedMap(UnorderedMap&& other)
  : data_(std::move(other.data_)),
    alloc_(std::move(other.alloc_)),
    nodes_(std::move(other.nodes_)),
    max_load_factor_(other.max_load_factor_) {
    other.nodes_.assign(basic_capacity, nullptr);
    other.max_load_factor_ = basic_load_factor;
  }
  ~UnorderedMap() {
    clear();
  }

  UnorderedMap& operator=(const UnorderedMap& other) {
    if (this == &other) {
      return *this;
    }
    if (NodeAllocTraits::propagate_on_container_copy_assignment::value) {
      alloc_ = other.alloc_;
    } else {
      alloc_ = NodeAllocTraits::select_on_container_copy_construction(other.alloc_);
    }
    data_ = other.data_;
    max_load_factor_ = other.max_load_factor_;
    rehash(other.data_.size());
    return *this;
  }
  UnorderedMap& operator=(UnorderedMap&& other) {
    if (this == &other) {
      return *this;
    }
    if (NodeAllocTraits::propagate_on_container_copy_assignment::value) {
      alloc_ = other.alloc_;
    } else {
      alloc_ = NodeAllocTraits::select_on_container_copy_construction(other.alloc_);
    }
    data_ = std::move(other.data_);
    nodes_ = std::move(other.nodes_);
    max_load_factor_ = other.max_load_factor_;
    other.nodes_.assign(basic_capacity, nullptr);
    other.max_load_factor_ = basic_load_factor;
    return *this;
  }

  Value& operator[](const Key& key) {
    auto it = emplace(key, Value()).first;
    return it->second;
  }
  Value& operator[](Key&& key) {
    auto it = emplace(std::move(key), Value()).first;
    return it->second;
  }
  Value& at(const Key& key) {
    auto it = find(key);
    if (it == end()) {
      throw std::out_of_range(""Key not found"");
    }
    return it->second;
  }
  const Value& at(const Key& key) const {
    auto it = find(std::move(key));
    if (it == cend()) {
      throw std::out_of_range(""Key not found"");
    }
    return it->second;
  }

  iterator find(const Key& key) {
    size_t index = Hash()(key) % nodes_.size();
    if (nodes_[index] == nullptr) {
      return end();
    }
    auto it = iterator(nodes_[index]);
    for (; it != end() && it.GetHash() % nodes_.size() == index; ++it) {
      if (IsEqual()(it->first, key)) {
        return it;
      }
    }
    return end();
  }
  const_iterator find(const Key& key) const {
    size_t index = Hash()(key) % nodes_.size();
    if (nodes_[index] == nullptr) {
      return cend();
    }
    auto it = const_iterator(nodes_[index]);
    for (; it != cend() && it.GetHash() % nodes_.size() == index; ++it) {
      if (IsEqual()(it->first, key)) {
        return it;
      }
    }
    return cend();
  }

  void reserve(size_t count) {
    count = static_cast<size_t>(static_cast<double>(count) / max_load_factor_ + 1);
    if (count > data_.size()) {
      rehash(count);
    }
  }
  void rehash(size_t new_size) {
    nodes_.assign(new_size, nullptr);
    for (auto it = begin(); it != end();) {
      auto& now_node = nodes_[it.GetHash() % nodes_.size()];
      if (now_node == nullptr) {
        now_node = it.node;
        ++it;
      } else {
        auto now_it = it++;
        now_it.node->prev->next = now_it.node->next;
        now_it.node->next->prev = now_it.node->prev;

        now_node->prev->next = now_it.node;
        now_it.node->prev = now_node->prev;

        now_it.node->next = now_node;
        now_node->prev = now_it.node;
      }
    }
  }

  iterator begin() {
    return iterator(data_.begin());
  }
  iterator end() {
    return iterator(data_.end());
  }
  const_iterator begin() const {
    return cbegin();
  }
  const_iterator end() const {
    return cend();
  }
  const_iterator cbegin() const {
    return const_iterator(data_.cbegin());
  }
  const_iterator cend() const {
    return const_iterator(data_.cend());
  }

  double load_factor() const {
    return static_cast<double>(data_.size()) / static_cast<double>(nodes_.size());
  }
  std::pair<iterator, bool> insert(const NodeType& node) {
    return emplace(node);
  }
  template <typename SomeType>
  std::pair<iterator, bool> insert(SomeType&& node) {
    return emplace(std::move(node));
  }
  template <typename SomeIterator>
  void insert(SomeIterator first, SomeIterator last) {
    while (first != last) {
      emplace(*first++);
    }
  }

  void erase(const_iterator position) {
    auto it = find(position->first);
    if (it == position) {
      size_t now_ind = it.GetHash() % nodes_.size();
      ++it;
      if (it != end() && now_ind == it.GetHash() % nodes_.size()) {
        nodes_[now_ind] = it.GetNode();
      } else {
        nodes_[now_ind] = nullptr;
      }
    }
    data_.erase(position);
  }
  void erase(const_iterator first, const_iterator last) {
    while (first != last) {
      erase(first++);
    }
  }

  void clear() {
    data_.clear();
    nodes_.assign(basic_capacity, nullptr);
  }

  size_t size() const {
    return data_.size();
  }
  bool empty() const {
    return data_.empty();
  }

  template <typename... Args>
  std::pair<iterator, bool> emplace(Args&&... args) {
    NodeType* new_node = NodeAllocTraits::allocate(alloc_, 1);
    try {
      NodeAllocTraits::construct(alloc_, new_node, std::forward<Args>(args)...);
    } catch (...) {
      NodeAllocTraits::deallocate(alloc_, new_node, 1);
      throw;
    }
    size_t hash = Hash()(new_node->first);
    auto& now_node = nodes_[hash % nodes_.size()];
    auto answer = std::make_pair(end(), false);
    if (now_node == nullptr) {
      data_.push_back(MapNode(hash, new_node));
      nodes_[hash % nodes_.size()] = (--data_.end()).node;
      answer = std::make_pair(--end(), true);
    } else {
      auto it = iterator(now_node);
      bool break_out = false;
      for (; it != end() && it.GetHash() % nodes_.size() == hash % nodes_.size(); ++it) {
        if (IsEqual()(it->first, new_node->first)) {
          NodeAllocTraits::destroy(alloc_, new_node);
          NodeAllocTraits::deallocate(alloc_, new_node, 1);
          answer = {it, false};
          break_out = true;
          break;
        }
      }
      if (!break_out) {
        data_.insert(it, MapNode(hash, new_node));
        answer = {--it, true};
      }
    }

    if (load_factor() > max_load_factor_) {
      rehash(2 * nodes_.size());
    }

    return answer;
  }
};

#endif //CPP_PROJECT_1__UNORDERED_MAP_H_
"
S4D6w62y,C++ leetcode 331. Verify Preorder Serialization of a Binary Tree Chatgpt unlimited,LikeRampage,C++,Monday 22nd of April 2024 12:57:33 PM CDT,"#include <string>
#include <sstream>
#include <stack>

class Solution {
public:
    bool isValidSerialization(std::string preorder) {
        std::istringstream iss(preorder);
        std::string node;
        std::stack<std::string> stack;

        while (std::getline(iss, node, ',')) {
            while (node == ""#"" && !stack.empty() && stack.top() == ""#"") {
                stack.pop();
                if (stack.empty()) {
                    return false;
                }
                stack.pop();
            }
            stack.push(node);
        }

        return stack.size() == 1 && stack.top() == ""#"";
    }
};"
V2NTy1hL,Untitled,Alx09,C,Monday 22nd of April 2024 12:39:53 PM CDT,"<!DOCTYPE html>

<html lang=""en"" xmlns=""http://www.w3.org/1999/xhtml"">
<head>
    <meta charset=""utf-8"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css"">
    <script src=""https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.slim.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js""></script>
    <title>PORCHE</title>
    <style>
    </style>
</head>
<body>
    <nav class=""navbar navbar-expand-sm navbar"" style=""background-color: black""> 
        <!-- Brand/logo -->
        <a class=""navbar-brand"" href=""#"">
            <img src=""pngimg.com - porsche_logo_PNG7.png"" alt=""logo"" style=""width:40px;"">
        </a>

        <!-- Links -->
        <ul class=""navbar-nav"">
            <li class=""nav-item"">
                <a class=""nav-link"" href=""#"">Link 1</a>
            </li>
            <li class=""nav-item"">
                <a class=""nav-link"" href=""#"">Link 2</a>
            </li>
            <li class=""nav-item"">
                <a class=""nav-link"" href=""#"">Link 3</a>
            </li>
        </ul>
    </nav>
</body>
</html>"
w9Y7pTKA,TOP EXTERNALS OUT,vtrvsted,Lua,Monday 22nd of April 2024 12:06:25 PM CDT,"https://discord.gg/NezurAi (Free)
https://discord.gg/TGfM99TGrj (Free)
---------------------------------------
https://discord.gg/santoware (Paid)
https://discord.gg/s1lence (Paid)
https://discord.gg/external (Paid)
https://discord.gg/celexrblx (Paid and the best)
https://discord.gg/severe1 (Paid and 2nd best)"
EZXZe3GL,Untitled,dllbridge,C,Monday 22nd of April 2024 12:06:19 PM CDT,"


#include  <iostream> 
using namespace std;


char *psz = setlocale(LC_ALL, ""rus"");


//////////////////////////////////////////////////////////
class Cfigure 
{
	
	  public:
			
	  Cfigure()
	  {
			
	     cout << ""–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Cfigure \n"";		
	  }  		
			
	
     virtual
	  void draw()
	  {
			
		   cout << ""–†–∏—Å—É—é... \n"";	
	  }
	
}Cf;



//////////////////////////////////////////////////////////
class Ccircle : public Cfigure
{
	  public: 
			
			
	  Ccircle()
	  {
			
	     cout << ""–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Ccircle \n"";		
	  }  			
	
	  void draw()
	  {
			
		   cout << ""–∫—Ä—É–≥ \n"";	
	  }
	
} Cc;


//////////////////////////////////////////////////////////
class Csquare : public Cfigure
{
	  public: 
	
	  void draw()
	  {
			
		   cout << ""–∫–≤–∞–¥—Ä–∞—Ç \n"";	
	  }
	
} Csq;




//////////////////////////////////////////////////////////
class Ctriangle : public Cfigure
{
	  public: 
	
	  void draw()
	  {
			
		   cout << ""—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ \n"";	
	  }
	
} Ctr;



///////////////////////////////////////////////////////////
int main()
{
 //   setlocale(LC_ALL, ""rus"");	
	
	
//	cout << psz << endl;
	
	Cf .draw();
	Cc .draw();
	Csq.draw();
	Ctr.draw();
	
	Cfigure *pCarr[9] = {&Cf, &Cc, &Csq, &Ctr};
	
	for(int i = 0; i < 4; i++)
	{
	    
		pCarr[i] -> draw();	
	}
}




"
Tcf1Lx7Q,executors good out rn,vtrvsted,Lua,Monday 22nd of April 2024 12:06:10 PM CDT,"Windows:
https://discord.gg/arceus (free/paid)
https://discord.gg/deltaroblox (paid)
https://discord.gg/robloxexploits (free/paid)
https://discord.gg/getwave (free/paid)
https://discord.gg/wave (free)

Mobile:
https://discord.gg/arceus
https://discord.gg/deltaroblox
https://discord.com/invite/robloxexploits 
"
