id,title,username,language,date,content
1caieFxd,debug,ces-engine,C#,Monday 6th of May 2024 06:51:35 AM CDT,"public Vector3 contpoint;
public Vector3 normalized;
public Vector3 localCoords;
void OnCollisionEnter(Collision collision)
{
    // Получаем точку столкновения в глобальных координатах
    Vector3 collisionPoint = collision.contacts[0].point;
    contpoint = collisionPoint;//debug

    Vector3 collisionNormal = collision.contacts[0].normal;
    normalized = collisionPoint.normalized;//debug

    
    Debug.DrawRay(collision.contacts[0].point, collision.contacts[0].normal * .1f, Color.red, 15f);
    Ray ray = new Ray(collision.contacts[0].point, -collision.contacts[0].normal);
    if (Physics.Raycast(ray, out RaycastHit hit))
    {
        localCoords = transform.InverseTransformPoint(hit.textureCoord).normalized;
        Debug.Log(hit.textureCoord);
        Debug.Log($"" {hit.barycentricCoordinate}"");
        Debug.Log($""norm {localCoords.normalized}"");
        
    }
}"
GDeXpt6C,Spreadsheet,BimoSora,C++,Monday 6th of May 2024 06:49:46 AM CDT,"//String coba;

#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>

#define ON_Board_LED 2  //--> Defining an On Board LED, used for indicators when the process of connecting to a wifi router

const char* ssid = """"; //--> Your wifi name or SSID.
const char* password = """"; //--> Your wifi password.

//----------------------------------------Host & httpsPort
const char* host = ""script.google.com"";
const int httpsPort = 443;
//----------------------------------------
WiFiClientSecure client; //--> Create a WiFiClientSecure object.

// Ganti ID Spreadsheet
String GAS_ID = ""AKfycbz_PbiQezN1UkAdhRnjyCZVnuDepQnuoQmf5u0H_Bv_xY99SfL7-l5a35I_lkKCEDLA""; //--> spreadsheet script ID
// end

void setup() {
  Serial.begin(9600);

  WiFi.begin(ssid, password); //--> Connect to your WiFi router
  Serial.println("""");
    
  pinMode(ON_Board_LED,OUTPUT); //--> On Board LED port Direction output
  digitalWrite(ON_Board_LED, HIGH); //--> Turn off Led On Board

  //----------------------------------------Wait for connection
  Serial.print(""Connecting"");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(""."");
    //----------------------------------------Make the On Board Flashing LED on the process of connecting to the wifi router.
    digitalWrite(ON_Board_LED, LOW);
    delay(250);
    digitalWrite(ON_Board_LED, HIGH);
    delay(250);
    //----------------------------------------
  }
  //----------------------------------------
  digitalWrite(ON_Board_LED, HIGH); //--> Turn off the On Board LED when it is connected to the wifi router.
  Serial.println("""");
  Serial.print(""Successfully connected to : "");
  Serial.println(ssid);
  Serial.print(""IP address: "");
  Serial.println(WiFi.localIP());
  Serial.println();
  //----------------------------------------

  WiFi.setAutoReconnect(true);
  WiFi.persistent(true);

  client.setInsecure();
}

void loop() {
  tagId = 'halo';
  sendData(tagId);
}

// Subroutine for sending data to Google Sheets
void sendData(String tagId) {
  Serial.println(""=========="");
  Serial.print(""connecting to "");
  Serial.println(host);
  
  //----------------------------------------Connect to Google host
  if (!client.connect(host, httpsPort)) {
    Serial.println(""connection failed"");
    return;
  }
  //----------------------------------------

  //----------------------------------------Processing data and sending data
  String string_cardid =  String(tagId);
  String url = ""/macros/s/"" + GAS_ID + ""/exec?cardid="" + string_cardid;
  Serial.print(""requesting URL: "");
  Serial.println(url);

  client.print(String(""GET "") + url + "" HTTP/1.1\r\n"" +
         ""Host: "" + host + ""\r\n"" +
         ""User-Agent: BuildFailureDetectorESP8266\r\n"" +
         ""Connection: close\r\n\r\n"");

  Serial.println(""request sent"");
  //----------------------------------------

  //----------------------------------------Checking whether the data was sent successfully or not
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    if (line == ""\r"") {
      Serial.println(""headers received"");
      break;
    }
  }
  String line = client.readStringUntil('\n');
  if (line.startsWith(""{\""state\"":\""success\"""")) {
    Serial.println(""esp8266/Arduino CI successfull!"");
  } else {
    Serial.println(""esp8266/Arduino CI has failed"");
  }
  Serial.print(""reply was : "");
  Serial.println(line);
  Serial.println(""closing connection"");
  Serial.println(""=========="");
  Serial.println();
  //----------------------------------------
} 
//==============================================================================
"
wJVzvBTX,shader,ces-engine,C#,Monday 6th of May 2024 06:47:33 AM CDT,"            Shader ""Custom/DissolveOnCollision""
{
    Properties
    {
        _MainTex (""Texture"", 2D) = ""white"" {}
        _DissolveTex (""Dissolve Texture"", 2D) = ""white"" {} // Текстура растворения
        _EmissionTex (""Emission Texture"", 2D) = ""black"" {} // Текстура для эмиссии
        _CollisionPoint (""Collision Point"", Vector) = (0, 0, 0, 0)
        _DissolveRadius (""Dissolve Radius"", Range(0, 1)) = 0.1
        _CollisionColor (""Collision Color"", Color) = (1, 0, 0, 1) // Цвет для визуализации точки столкновения
        [HDR]_EmissionColor (""Emission Color"", Color) = (1, 1, 1, 1) // Цвет эмиссии
        _EmissionScale (""Emission Scale"", Vector) = (1, 1, 0, 0) // Масштаб текстуры эмиссии
        _EmissionOffset (""Emission Offset"", Vector) = (0, 0, 0, 0) // Смещение текстуры эмиссии
    }
    SubShader
    {
        Tags { ""RenderType""=""Opaque"" }
        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include ""UnityCG.cginc""

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            sampler2D _DissolveTex; 
            sampler2D _EmissionTex; 
            float4 _CollisionPoint;
            float _DissolveRadius;
            fixed4 _CollisionColor;
            fixed4 _EmissionColor;
            float2 _EmissionScale;
            float2 _EmissionOffset;


            v2f vert(appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            fixed4 frag(v2f i) : SV_Target
            {
               

                // Получаем значение из текстуры растворения
                float dissolveValue = tex2D(_DissolveTex, i.uv).r;

                // Вычисляем расстояние от текущей UV-координаты до точки столкновения
                float distanceToCollision = distance(i.uv, _CollisionPoint.xy);

                // Применяем степень растворения в зависимости от расстояния до точки столкновения и радиуса растворения
                dissolveValue *= smoothstep(_DissolveRadius, 0, distanceToCollision); 

                // Получаем основной цвет текстуры
                fixed4 baseColor = tex2D(_MainTex, i.uv);


                float2 emissionUV = (i.uv * _EmissionScale) + _EmissionOffset;
                fixed4 emissionColor = tex2D(_EmissionTex, emissionUV);

                // Применяем степень растворения к альфа-каналу основной текстуры
                baseColor.a *= 1 - dissolveValue; // Инвертируем значение растворения для альфа-канала

                // Применяем цвет для визуализации точки столкновения
                baseColor.rgb += _CollisionColor.rgb * dissolveValue;

                // Применяем эмиссию
                baseColor.rgb += emissionColor.rgb * dissolveValue * _EmissionColor.rgb;

                return baseColor;
            }
            ENDCG
        }
    }
}"
qecJSGzK,Untitled,dllbridge,C,Monday 6th of May 2024 06:44:40 AM CDT,"


#include   <stdio.h>

void foo(int *p);

///////////////////////////////////////////
int main()
{
	
	int n = 7;
	
	foo(&n);
	
	printf(""n = %d\n"", n);
}




void foo(int *p)
{
	*p = *p + 10;
	
}






















/*
#include   <stdio.h>

int    n;  // 32 бита = 4 Байта
double f;
///////////////////////////////////////////
 int main()
 {
		
	 printf(""%d\n"", sizeof(float) );	
		
		
 }
 
 /
 
 
 //  1 Байт = 8 бит
 
//  %00000000 = 0 
//  %00000001 = 1
//  %00000010 = 2 
//  %00000011 = 3   
//  %00000100 = 4
//  %00000101 = 5 
//  %00000110 = 6  
//  %00000111 = 7  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
	



/*
#include   <stdio.h>


///////////////////////////////////////////
 int main()
 {
		
     int  n           = 1026;
     int *p           =   &n;
     int &r23987_SONY =    n;
     
	 printf(""address n = %d\n"", &r23987_SONY);
	 printf(""address n = %d\n"", &n          );
	 printf(""address n = %d\n"", *p          );	      

 }
 
 
*/
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



/*
#include   <stdio.h>


///////////////////////////////////////////
 int main()
 {
		
     int  n = 26;
     int *p = &n;
     int &r =  n;
     
	 printf(""address n = %d\n"", &r);
	 printf(""address n = %d\n"", &n);     

 }

*/


"
xxsV4Vv3,MAX30100 Library rev_02,pleasedontcode,Arduino,Monday 6th of May 2024 06:36:40 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: MAX30100 Library
	- Source Code compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-06 11:34:30

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* grap the oximeter and send every 4 mseconds a read */
	/* out o the BLE channel */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <MAX30100_PulseOximeter.h>	//https://github.com/gabriel-milan/Arduino-MAX30100

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t max3000_MAX30100_INT_PIN_D4 = 4;

/***** DEFINITION OF I2C PINS *****/
const uint8_t max3000_MAX30100_I2C_PIN_SDA_D21 = 21;
const uint8_t max3000_MAX30100_I2C_PIN_SCL_D22 = 22;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
PulseOximeter pox;

void setup(void)
{
	// put your setup code here, to run once:
	pinMode(max3000_MAX30100_INT_PIN_D4, INPUT_PULLUP);

	// Initialize the PulseOximeter
	pox.begin();

	// Set up BLE channel for sending oximeter data every 4 milliseconds
}

void loop(void)
{
	// put your main code here, to run repeatedly:
	
	// Update the sensor readings every 4 milliseconds
	pox.update();
	
	// Retrieve heart rate and SpO2 values
	float heartRate = pox.getHeartRate();
	uint8_t spo2 = pox.getSpO2();

	// Send the data out to the BLE channel

	delay(4); // Delay for 4 milliseconds
}

/* END CODE */"
0yDNUm0f,MedkitScript (Changed System),Sungmingamerpro13,CSS,Monday 6th of May 2024 06:33:54 AM CDT,"local Tool = script.Parent
local number = 0

local player = game.Players.LocalPlayer
local BackpackFrame = player.PlayerGui:WaitForChild(""BackpackGui"").Frame
local ChangedText = BackpackFrame.ChangedText

Tool:WaitForChild(""stacks"").Changed:Connect(function(Value)
	ChangedText.Text = ""Changed: ""..Value
end)

ChangedText.Text = ""Changed: ""..Tool.stacks.Value

-- Create the Heal function
local function Heal(player)
	-- Check if the player is alive
	if player.Character and player.Character:FindFirstChild(""Humanoid"") and player.Character.Humanoid.Health > 0 then
		-- Create a selection box on the player
		local selectionBox = Instance.new(""SelectionBox"")
		selectionBox.Adornee = player.Character
		selectionBox.LineThickness = 0.1
		selectionBox.Parent = player.Character

		-- Wait for a short duration to show the selection box
		wait(3)

		-- Heal the player
		player.Character.Humanoid.Health = player.Character.Humanoid.MaxHealth

		-- Remove the selection box
		selectionBox:Destroy()
		Tool.stacks.Value -= 1
	end
end

-- Handle equipped event
Tool.Equipped:Connect(function(mouse)
	ChangedText.Visible = true
	
	-- Create a selection box for the local player
	local selectionBox = Instance.new(""SelectionBox"")
	selectionBox.Adornee = game.Players.LocalPlayer.Character
	selectionBox.LineThickness = 0.1
	selectionBox.Parent = game.Players.LocalPlayer.Character

	-- Wait for a short duration to show the selection box
	wait(1)

	-- Remove the selection box
	selectionBox:Destroy()
end)

Tool.Unequipped:Connect(function()
	ChangedText.Visible = false

end)

-- Handle mouse button click
Tool.Activated:Connect(function()
	-- Check if the player is healing themselves
	local humanoid = game.Players.LocalPlayer.Character:FindFirstChild(""Humanoid"")
	if humanoid and humanoid.Health >= number then
		Heal(game.Players.LocalPlayer)
		script.Parent.Handle.healed:Play()
	elseif humanoid and humanoid.Health >= humanoid.MaxHealth then
		Heal(game.Players.LocalPlayer)
		script.Parent.Handle.healed:Play()
		
	end
	
	while wait() do
		if Tool.stacks.Value == 0 then
			Tool:Destroy()
			ChangedText.Visible = false
			wait(1)
			break
		end
	end
end)
"
gP5xB0Q0,Heart Monitor rev_01,pleasedontcode,Arduino,Monday 6th of May 2024 06:33:14 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Heart Monitor
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-06 11:31:59

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* grap the oximeter and send every 4 mseconds a read */
	/* out o the BLE channel */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <MAX30100_PulseOximeter.h>	//https://github.com/gabriel-milan/Arduino-MAX30100

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t max3000_MAX30100_INT_PIN_D4 = 4;

/***** DEFINITION OF I2C PINS *****/
const uint8_t max3000_MAX30100_I2C_PIN_SDA_D21 = 21;
const uint8_t max3000_MAX30100_I2C_PIN_SCL_D22 = 22;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
PulseOximeter pox;

void setup(void)
{
	// put your setup code here, to run once:
	pinMode(max3000_MAX30100_INT_PIN_D4, INPUT_PULLUP);

	// Initialize the PulseOximeter
	pox.begin();

	// Set up BLE channel for sending oximeter data every 4 milliseconds
}

void loop(void)
{
	// put your main code here, to run repeatedly:
	
	// Update the sensor readings every 4 milliseconds
	pox.update();
	
	// Retrieve heart rate and SpO2 values
	float heartRate = pox.getHeartRate();
	uint8_t spo2 = pox.getSpO2();

	// Send the data out to the BLE channel

	delay(4); // Delay for 4 milliseconds
}

/* END CODE */"
1XvaUk3B,Untitled,inilim,JavaScript,Monday 6th of May 2024 06:30:00 AM CDT,"export async function asyncAjax(obj) {
    return await (function (){
        return new Promise((resolve) => {
        // 
            obj.success = obj.success || function (res) {
                resolve({
                    response: res,
                    code: 200,
                });
            };
            // 
            obj.error = obj.error || function (res) {
                resolve({
                    response: res.responseJSON,
                    code: res.status,
                });
            };

            $.ajax(obj);
        });
    })();
}"
J2PAvWZX,zad_4_odp_full_DLC_EXPANSION_GOTY_2024,pan7nikt,Bash,Monday 6th of May 2024 06:20:15 AM CDT,"#README
#!!!!!!!!!!!!!!!WIELOLINIJKOWE ECHO WKLEJAC NARAZ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#WSZYSTKO WYKONYWAC JAKO ROOT
#KOMENDY ZE SREDNIKAMI NA KONCU POWINNY BYC WRZUCANE NARAZ
#PRZED KAZDYM ZADANIEM JEST PODANA ILOSC WYMAGANYCH TERMINALI
#KAZDY TERMINAL MA PRZYPISANA CYFRE np. 1:
#Z REGULY TERMINAL 1 JEST DO LISTINGOW A TERMINAL 2 JEST ROBoCZY
#ZALECA SIE ROBIC KAZDY PODPUNKT W ODDZIELNYM TERMINALU (latwiej clearowac), A TERMINAL ROBOCZY (2) MIEC JEDEN DLA WSZYSTKICH


/////////////////////////////////////////////////////////////KONIEC LISTINGOW/////////////////////////////////////////////////////////////////////////////////////////////////////

4.1.1.4 Do czego służy klasyfikacja procesów na ograniczone procesorem i ograniczone wejściem wyjściem oraz na jakiej podstawie zweryfikowano, że proces jest ograniczony wejściem-wyjściem? 
#ILOSC TERMINALI:  2
    1:
    echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.4]-----------------------------------------------------------------------------\033[0m
	Pozwala określić w jakim stanie spedza większość czasu cyklu życia.
	Alternatywa Własna: 
	Klasyfikacja procesów pozwala określić w jakim stanie proces spędza większość 	czasu cyklu życia. Dzięki klasyfikacji procesów możemy dobrać odpowiednie 	ustawienia aby przyspieszyć szybkość wykonania zadania

	\033[0;32mOgraniczone procesorem\033[0m - spędzają wiekszość czasu w stanie wykonywanym.
	\033[0;32mOgranioczone wejsciem-wyjsicem\033[0m - spędzają większość czasu w stanie zablokowanym
    \033[0;32mStan zablokowany\033[0m - oczekuje na pozostałe zasoby systemowe oprócz stron pamięci

    \033[0;32m
    Żeby wiedzieć jak usprawnić realizację zadania/zadań przez proces. Dla procesów
    ograniczonych procesorem możemy zwiększyć przydział jednostek przetwarzających, a w
    procesach ograniczonych wejściem wyjściem można poprawić warunki realizacji operacji
    dyskowych.
    \033[0m

    Jeżeli proces zgłasza operacje dyskowe to możemy poprawić warunki realizacji operacji
    dyskowych.

    Nie każdą operację wejścia wyjścia można usprawnić, ale operacje dyskowe akurat można.

    \033[0;32mOperacje dyskowe wejścia wyjścia\033[0m to odczyt i zapis
    
    proces może przebywać w stanie \033[0;32mzablokowanym, wykonywanym i gotowym do wykonania\033[0m

    \033[0;32mReal\033[0m – całkowity czas istnienia procesu – czas cyklu życia procesu
    \033[0;32mRuntime\033[0m – czas przebywania procesu w stanie wykonywanym
    \033[0;32mswitches*avg delay\033[0m – czas przebywania procesu w stanie gotowym do wykonania
    \033[0;32mswitches\033[0m – przełączenia kontekstu, w których ten proces uczestniczył
    \033[0;32mavg delay\033[0m – średni czas oczekiwania na przydział jednostki przetwarzającej
    ""

 
 2:
 echo bfq > /sys/block/sda/queue/scheduler
 time perf sched record ionice -c 1 -n 0 stress -i 1 -t 240

 1:
 ps -o pid,etime,cputime,%cpu $(pidof stress -s)
 pmap -x $(pidof stress -s)
 pmap -X $(pidof stress -s) | grep --color -E ""stack|heap|$""

 echo -e ""\033[0;32mVSZ\033[0m - rozmiar stron\n \033[0;32mRSZ\033[0m - rozmiar ramek""
 ps -o pid,vsz,rsz $(pidof stress -s)

 2:
 #PO ZAKONCZENIU PROCESU W TERMINALU 1 (POCZEKAC 240s)
 perf sched latency -p | grep -e ""Task"" -e ""stress""
 echo -e ""Czas w stanie zablkowanym = real - runtime -(Switches * Avg delay
Czas w stanie zablokowanym w ms: 
\033[0;32m$(bc <<<'scale=2; <REAL> - <RUNTIME> - (<SWITCHES> * <AVG DELAY>)')\033[0m
Procent w czasie zablokowanym = Czas w stanie zablokowanym / real * 100%
Procent w stanie zablokowanym: 
\033[0;32m$(bc -l <<< 'scale = 2; <CZAS W STANIE ZABLOKOWANYM> / <REAL> *100')%\033[0m""

4.1.1.5 (brakujace). Sekretne pytanie brakujace z wikampa: Jak określić cykl życia procesu i czym jest wirtualny czas życia procesu? - wymagane zaprezentowania odpowiednich wartości w listingu
#ILOSC TERMINALI: 1
 1:
 echo -e ""
 \033[0;32m-------------------------------------------------------[4.1.1.5]-----------------------------------------------------------------------------\033[0m
 \033[0;32mCykl życia procesu\033[0m to całkowity czas przez jaki istniał proces (\033[0;32mreal\033[0m)
 \033[0;32mWirtualny czas życia procesu\033[0m to czas w jakim kod programu był wykonywany / czas realizacjizadania / czas w stanie wykonywanym (\033[0;32mruntime\033[0m)""
 
 echo bfq > /sys/block/sda/queue/scheduler
 time perf sched record ionice -c 1 -n 0 stress -i 1 -t 3
 perf sched latency -p | grep -e ""Task"" -e ""stress""

4.1.1.6 Co reprezentuje wartość %cpu dla procesu jednowątkowego? - dla jakiego procesu wartość %cpu może przekroczyć 100%?
#ILOSC TERMINALI: 2
	1:
	echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.6]-----------------------------------------------------------------------------\033[0m
cputime / etime * 100% -- procent cyklu życia w kotrym proces przebywał w stanie wykonywanym
Ta wartość reprezentuje czas przetwarzania podzielony przez czas życia procesu.
\033[0;32mstosunek wirtualnego czasu życia procesu do jego rzeczywistego czasu życia procesu \033[0m (runtime/real)

\033[0;32mMoze przekroczyc 100%\033[0m Dla procesu posiadającego wiele wątków, które większość czasu spedzaja w stanie wykonywanym
czyli
jeśli sumaryczny czas przetwarzania zadań przez wątki jest większy niż czas cyklu życia procesu.""

#WIELOWATKOWY
	2:
	sysbench --test=cpu --threads=2 --time=70 run
	1:
	ps -o pid,cmd,nlwp,%cpu,cputime,etime ""$(pidof sysbench)"" ;ps -o pid,spid,%cpu,cputime,etime -T ""$(pidof sysbench)"" | grep --color -E "" %CPU|$"" 

#JEDNOWATKOWY
    2:
	sysbench --test=cpu --threads=1 --time=70 run
    1:
    echo -e ""Dla procesu jednowatkowego \033[0;32mnie moze przekroczyc 100%\033[0m""
	ps -o pid,cmd,nlwp,%cpu,cputime,etime ""$(pidof sysbench)"" ;ps -o pid,spid,%cpu,cputime,etime -T ""$(pidof sysbench)"" | grep --color -E "" %CPU|$"" 
4.1.1.7 (1). Co reprezentuje wartość %mem dla procesu? - wymagane wykazanie w listingach wartości, na bazie których %mem jest wyliczany
#ILOSC TERMINALI: 2
	1:
	echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.7 (1)]-----------------------------------------------------------------------------\033[0m
    \033[0;32mJest to stosunek pamięci fizycznej ulotnej procesu do pamieci fizycznej ulotnej pamięci maszyny.\033[0m""

	2:
	stress -m 1 -t 60

	1:
    echo -e ""
    \033[0;32m%MEM\033[0m = RSZ / MEM total * 100%, gdzie
    \033[0;32mRSZ\033[0m - fizyczna pamiec ulotna procesu
    \033[0;32mtotal\033[0m - fizyczna pamiec ulotna maszyny""
    lsmem | grep --color -E ""Total online memory:|$""
	ps -o pid,%mem,rsz ""$(pidof stress -s)"" | grep --color -E "" %MEM|total|$"" ; free | grep --color -E ""total|$""


4.1.1.7 (2). Czy całość jego kodu i danych jest wczytywana z pliku programu ELF oraz plików bibliotek ELF do fizycznej pamięci ulotnej?  
- wymagane zaprezentowania odpowiednich wartości dla segmentu danych i tekstu w listingu z mapą pamięci procesu jednowątkowego.
#ILOSC TERMINALI: 2

    1:
	echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.7 (2)]-----------------------------------------------------------------------------\033[0m
\033[0;32mNie wszystkie\033[0m, część kodu i danych wczytywana jest z segmentów anonimowych.
\033[0;32mr-x\033[0m - zawiera text
Dane:
\033[0;32mrw-\033[0m - zawiera zmienna
\033[0;32mr--\033[0m - zawiera stala""
    2:
    echo bfq > /sys/block/sda/queue/scheduler
 	time perf sched record ionice -c 1 -n 0 stress -i 1 -t 240

    1:
    #POKAZUJESZ DOWOLNY SEGMENT (KOLOREM JEST PRZYKLADOWY ZAZNACZONY) TEKSTU LUB DANYCH I ZAZNACZASZ, ZE ""Kbytes"" JEST WIEKSZE OD ""RSS""
    pmap -x $(pidof stress -s)| grep --color -E ""Kbytes|RSS|r-x-- libc.so.6|$"";


4.1.1.10. Który z segmentów procesu zawiera stertę, a który stos? Czy segment sterty/stosu są anonimowe? - wymagane wskazanie segmentu sterty i stosu w mapie pamięci wybranego procesu.
#ILOSC TERMINALI: 2
	2:
 	echo bfq > /sys/block/sda/queue/scheduler
 	time perf sched record ionice -c 1 -n 0 stress -i 1 -t 240

	1:
    echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.10]-----------------------------------------------------------------------------\033[0m
[\033[0;32mstack\033[0m] - stos
[\033[0;32mheap\033[0m] - sterta
tak, \033[0;32moba sa anoniowe\033[0m""
pmap -X $(pidof stress -s)| grep --color -E ""stack|heap|$"";
	

4.1.1.12. Jaki rozmiar zajmują wszystkie strony procesu a jaki wszystkie przydzielone dla procesu ramki oraz kiedy strona jest ładowana do ramki?  - wymagane wskazanie odpowiednich wartości w listingach
#ILOSC TERMINALI: 2
	2:
 	echo bfq > /sys/block/sda/queue/scheduler
 	time perf sched record ionice -c 1 -n 0 stress -i 1 -t 240

	1:
    echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.12]-----------------------------------------------------------------------------\033[0m
\033[0;32mVSZ\033[0m - rozmiar stron [KiB]
\033[0;32mRSZ\033[0m - rozmiar ramek [KB]
\033[0;32mStrona jest ładowana do ramki\033[0m (czyli fizycznej strony pamięci) w momencie, gdy proces potrzebuje dostępu do danego obszaru pamięci wirtualnej, który nie jest obecnie obecny w pamięci fizycznej.\n
\033[0;32mnie każda\033[0m strona jest przechowywana w ramce tego procesu\n
gdy proces odwołuje się do strony pamięci której nie ma w żadnej z jego ramek \033[0;32mwystąpi błąd strony\033[0m
\033[0;32mkolejność odszukiwania strony\033[0m - poza zbiorem roboczym, błąd strony:
\033[0;32m1.\033[0m swap cache - jeśli znajdzie to błąd poboczny, aktualizacja zbioru roboczego, później tablicy
stron
\033[0;32m2.\033[0m przestrzeni wymiany swap
\033[0;32m3.\033[0m plik regularny tego programu lub biblioteki

Strona jest ładowana do ramki w momencie, gdy program próbuje uzyskać dostęp do tej strony.""

    ps -o pid,vsz,rsz $(pidof stress -s) | grep --color -E ""VSZ|RSZ|$""



4.1.1.20. Jeżeli plik zawierający program/bibliotekę ELF zostanie usunięty, to skąd system operacyjny będzie doczytywał potrzebne strony, jaki jest związek pomiędzy niezwolnionymi blokami systemu plików a stronami? - omówienie statystyk węzłów i bloków systemu plików, aby stwierdzić czy po usunięciu pliku zostały one zwolnione wraz z usuniętym wpisem katalogowym. 
#ILOSC TERMINALI: 2
	2:
	cp /usr/bin/stress /home/tytus/stress
	/home/tytus/stress -c 1

	1:
    echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.20]-----------------------------------------------------------------------------\033[0m
    Jeżeli plik zawierający program/bibliotekę ELF zostanie usunięty, to system operacyjny \033[0;32mbędzie doczytywał potrzebne strony Ze swap cache\033[0m
    jezeli nie ma potrzebnej strony w swapcache i strona nie jest wczytana do ramki to z swap.
    
    Zostanie usunięty jedynie wpis katalogowy - \033[0;32mnie zostaną zwolnione\033[0m żadne bloki ani węzeł związany z tym plikiem
    Bloki nie zostały zwolnione ponieważ proces korzysta ze wczytanych wczesniej stron programu/biblioteki.

    \033[0;32mBloki te blokuje\033[0m mechanizm pamięci wirtualnej, żeby móc doczytać

    Bloki i wezel \033[0;32mzostana zwolnione\033[0m, gdy wszystkie procesy korzystające z tego pliku zostaną zakończone

    Niezwolnione bloki systemu plików to dane przechowywane na dysku, podczas gdy strony w
    pamięci operacyjnej są ich buforowanymi wersjami w pamięci RAM, co umożliwia szybszy
    dostęp do tych danych podczas operacji odczytu i zapisu
    ""
	#TO MUSI BYC ZROBIONE W TRAKCIE TRWANIA PROCESU STRESS (UPEWNIC SIE, ZE DZIALA ^^^)
	stat -f /home/tytus | grep --color -E ""wolnych:|$"" 
	ls /home/tytus
	rm /home/tytus/stress -f
	stat -f /home/tytus | grep --color -E ""wolnych:|$"" 
	ls /home/tytus
	killall stress
    #TUTAJ BEDZIE WIECEJ WOLNYCH:
	stat -f /home/tytus | grep --color -E ""wolnych:|$"" 
4.1.1.21. Z jakiego obszaru pamięci ulotnej wybierane są niepuste ramki i jakie kryteria musi spełniać ramka wybrana przez algorytm wymiany? - analiza wyników free –w dotycząca różnicy w wartościach pomiędzy kolumną free i available w wierszu mem. 
#ILOSC TERMINALI: 1
	1:
	echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.21]-----------------------------------------------------------------------------\033[0m
	\033[0;32mBierze z swap cache\033[0m
	Algorytm wymiany bedzie wybierał przede wszystkim ramki ze stronami niekatywnymi, a w szczegolnosci zawierajace strony niezabrudzone i nieanonimowe.

	\033[0;32mMEM free\033[0m - rozmiar wolnej pamieci bez ramek
	\033[0;32mMEM available\033[0m - rozmiar wolnych ramek wraz z ramkami w swap cache ktore zawieraja strony niezabrudzone i nieanonimowe.

    \033[0;32mStrony nieaktywne\033[0m - nie były ostatnio używane 

    \033[0;32mStrony niezabrudzone\033[0m - ich zawartość nie zmieniło się od momentu wczytania ich do ramki

    \033[0;32mstrony nieanonimowe\033[0m - strony których zawartość została wczytana z pliku regularnego z programem lub biblioteka

    
    fakt że ramka z tą stroną należy do swap cache oznacza, ze \033[0;32mstrona jest nieaktywna\033[0m
    
    Ramki zawierające strony niezabrudzone i nieanonimowe mogą być natychmiastowo wykorzystane""

	free -w | grep --color -E ""free|available|$"" 

4.1.1.24. Jakie zasoby systemowe trzeba monitorować i jakie działania można podjąć aby procedura OOM nie była zastosowana? - wymagane zaprezentowanie odpowiednich wartości w listingach.
#ILOSC TERMINALI: 1
	1:
    echo -e ""
\033[0;32m-------------------------------------------------------[4.1.1.24]-----------------------------------------------------------------------------\033[0m

	Monitorowac \033[0;32mused\033[0m i \033[0;32mfree\033[0m z wiersza Swap (ilosc wolnych ramek w pamięci, zajętość przestrzeni wymiany swap)
    
    \033[0;32mW przypadku presji pamieci\033[0m (kiedy brakuje ramek) system stosuje:
    \033[0;32m1.\033[0m wymiatanie stron.
    \033[0;32m2.\033[0m redukcja zbioru roboczego procesu - odebranie części przydzielonych procesom ramek
    \033[0;32m3.\033[0m procedura OOM (Out of Memory) - wybierane są procesy, które zostaną natychmiast zakończone
    
    Możemy \033[0;32mpowiększyć przestrzeń wymiany\033[0m poprzez dodanie pliku wymiany lub możemy zakończyć procesy, które są nam już niepotrzebne""

	free -w | grep --color -E ""free|used|$"" 

/////////////////////////////////////////////////////////////KONIEC LISTINGOW/////////////////////////////////////////////////////////////////////////////////////////////////////
Z tego co widze to dodatkowe:

Bład poboczny wystepeuje gdy strona przechowyana jest w ramce(np. w swap cache) jednak nie wystepuje w zbiorze roboczym, wtedy wymagana jest aktualizacja tablicy stron

Bląd głowny wymaga zaladowania strony do ramki(np z programu, biblioteki lub sprowadzenia z przestrzeni wymiany swap).

Wyświetlanie informacji o bieżących priorytetach I/O dla procesów:
ionice -p <pid>

Zmiana algorytmu windy dla dysku:
echo bfq > /sys/block/sda/queue/scheduler

ionice -c 1 -n 0
-c 1 (Realtime) to klasa o najwyższym priorytecie I/O w systemie 
Priorytet 0 to najwyzszy priorytet dla ionice -c 1, zakres (0-7)

Algorytmy windy:
Algorytm BFQ dąży do uczciwego podziału zasobów dyskowych między procesy. Przydziela czas dostępu do dysku każdemu procesowi w proporcji do jego budżetu. Priorytet I/O: Procesy o wyższym priorytecie I/O mają większe szanse na otrzymanie większego budżetu
///////////////////////////////////////////////////////////////////////////////////////////////////////////////"
DmN8dc9t,🤑 G2A.com Free Gift Card Guide May 2024 FIX 💰,ssss50w,GetText,Monday 6th of May 2024 06:17:10 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
06 May 2024"
sPVxztNG,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Monday 6th of May 2024 06:11:24 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_258651.pdf

Working as of:
06 May 2024"
YA7DJ6s5,MedkitScript 2 (Quantity System),Sungmingamerpro13,CSS,Monday 6th of May 2024 06:05:54 AM CDT,"local Tool = script.Parent
local number = 0

local player = game.Players.LocalPlayer
local BackpackFrame = player.PlayerGui:WaitForChild(""BackpackGui"").Frame
local QuantityText = BackpackFrame.QuantityText

Tool.stacks:GetPropertyChangedSignal(""Value""):Connect(function()
	QuantityText.Text = ""Quantity: ""..Tool.stacks.Value
end)

QuantityText.Text = ""Quantity: ""..Tool.stacks.Value

-- Create the Heal function
local function Heal(player)
	-- Check if the player is alive
	if player.Character and player.Character:FindFirstChild(""Humanoid"") and player.Character.Humanoid.Health > 0 then
		-- Create a selection box on the player
		local selectionBox = Instance.new(""SelectionBox"")
		selectionBox.Adornee = player.Character
		selectionBox.LineThickness = 0.1
		selectionBox.Parent = player.Character

		-- Wait for a short duration to show the selection box
		wait(3)

		-- Heal the player
		player.Character.Humanoid.Health = player.Character.Humanoid.MaxHealth

		-- Remove the selection box
		selectionBox:Destroy()
		Tool.stacks.Value -= 1
	end
end

-- Handle equipped event
Tool.Equipped:Connect(function(mouse)
	QuantityText.Visible = true
	-- Create a selection box for the local player
	local selectionBox = Instance.new(""SelectionBox"")
	selectionBox.Adornee = game.Players.LocalPlayer.Character
	selectionBox.LineThickness = 0.1
	selectionBox.Parent = game.Players.LocalPlayer.Character

	-- Wait for a short duration to show the selection box
	wait(1)

	-- Remove the selection box
	selectionBox:Destroy()
end)

Tool.Unequipped:Connect(function()
	QuantityText.Visible = false
end)

-- Handle mouse button click
Tool.Activated:Connect(function()
	-- Check if the player is healing themselves
	local humanoid = game.Players.LocalPlayer.Character:FindFirstChild(""Humanoid"")
	if humanoid and humanoid.Health >= number then
		Heal(game.Players.LocalPlayer)
		script.Parent.Handle.healed:Play()
	elseif humanoid and humanoid.Health >= humanoid.MaxHealth then
		Heal(game.Players.LocalPlayer)
		script.Parent.Handle.healed:Play()
		
	end
	
	while wait() do
		if Tool.stacks.Value == 0 then
			Tool:Destroy()
			QuantityText.Visible = false
			wait(1)
			break
		end
	end
end)"
Jx5RqnZx,data918,TestGuy1,JSON,Monday 6th of May 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3bcbf3c15a5330cd2929fba815c08502f79c9e9ffa75068aed0a606bdf303fdfc314284aad689217df52947d1731975b6dd92a8944b655a03701235cd6047cfa42a195021d0e2253f6f334f92951f0fef74b734614873befcad382a7ec7cbe6621c37031bf748fd3422a5cb642656b9b1213297afdd7fc6ff6a31ca5e1d2160e',
  otherdata: [
    '3cef173a388db0f7faefd672a22a321d',
    '5665dc86ad62b5e4d3efba63aa605495',
    '89338668f1b5a1b356636a183ff7b87e',
    '49bf5865c60426a124dd4ca338dcc052',
    '7ac0aa0b081779f5cd59400f9efa26b6',
    'ef719fa572c8aeb5e7c46727c90bf564',
    'baf325364b6657f63f15d8475b3a5921',
    'dab1ef9875b1245e3d8d153010cba93b'
  ]
}"
uL0p25tG,Untitled,Rodunskiy,C#,Monday 6th of May 2024 05:49:45 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            const string OutputTextCommandOne = ""1"";
            const string OutputTextCommandTwo = ""2"";
            const string OutputRandomNumberCommand = ""3"";
            const string ClearTextCommand = ""4"";
            const string ExitProgramCommand = ""5"";

            Random random = new Random();
            int maxRandomNumber = 10;
            bool isWorking = true;

            while (isWorking)
            {
                Console.WriteLine($""{OutputTextCommandOne})Вывести первый текст.\n{OutputTextCommandTwo})Вывести второй текст.\n{OutputRandomNumberCommand})Сгерерировать число.\n{ClearTextCommand})Очистить консоль.\n{ExitProgramCommand})Выйти из программы."");

                switch (Console.ReadLine())
                {
                    case OutputTextCommandOne:
                        Console.WriteLine(""Hello World!"");
                        break;

                    case OutputTextCommandTwo:
                        Console.WriteLine(""HHHHEEEEELLLLOOOOO WWOOOOOOOOORLD!!!!!!!!!"");
                        break;

                    case OutputRandomNumberCommand:
                        int number = random.Next(maxRandomNumber);
                        Console.WriteLine(number);
                        break;

                    case ClearTextCommand:
                        Console.Clear();
                        break;

                    case ExitProgramCommand:
                        isWorking = false;
                    break;
                }
            }
        }
    }
}
"
9Gt1PqaM,Untitled,Rodunskiy,C#,Monday 6th of May 2024 05:42:33 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            const string OutputTextCommandOne = ""1"";
            const string OutputTextCommandTwo = ""2"";
            const string OutputRandomNumberCommand = ""3"";
            const string ClearTextCommand = ""4"";
            const string ExitProgramCommand = ""5"";

            Random random = new Random();
            int maxRandomNumber = 10;
            bool isWorking = true;

            while (isWorking)
            {
                Console.WriteLine($""{OutputTextCommandOne})Вывести первый текст.\n{OutputTextCommandTwo})Вывести второй текст.\n{OutputRandomNumberCommand})Сгерерировать число.\n{ClearTextCommand})Очистить консоль.\n{ExitProgramCommand})Выйти из программы."");

                switch (Console.ReadLine())
                {
                    case OutputTextCommandOne:
                        Console.WriteLine(""Hello World!"");
                        break;

                    case OutputTextCommandTwo:
                        Console.WriteLine(""HHHHEEEEELLLLOOOOO WWOOOOOOOOORLD!!!!!!!!!"");
                        break;

                    case OutputRandomNumberCommand:
                        int number = random.Next(maxRandomNumber);
                        break;

                    case ClearTextCommand:
                        Console.Clear();
                        break;

                    case ExitProgramCommand:
                        isWorking = false;
                    break;
                }
            }
        }
    }
}
"
Vb9MRHZ8,MedkitScript (Quantity System),Sungmingamerpro13,CSS,Monday 6th of May 2024 05:41:58 AM CDT,"local Tool = script.Parent
local number = 0

local player = game.Players.LocalPlayer
local QuantityText = player.PlayerGui:WaitForChild(""QuantityGui"").QuantityText

Tool.stacks:GetPropertyChangedSignal(""Value""):Connect(function()
	QuantityText.Text = ""Quantity: ""..Tool.stacks.Value
end)

QuantityText.Text = ""Quantity: ""..Tool.stacks.Value

-- Create the Heal function
local function Heal(player)
	-- Check if the player is alive
	if player.Character and player.Character:FindFirstChild(""Humanoid"") and player.Character.Humanoid.Health > 0 then
		-- Create a selection box on the player
		local selectionBox = Instance.new(""SelectionBox"")
		selectionBox.Adornee = player.Character
		selectionBox.LineThickness = 0.1
		selectionBox.Parent = player.Character

		-- Wait for a short duration to show the selection box
		wait(3)

		-- Heal the player
		player.Character.Humanoid.Health = player.Character.Humanoid.MaxHealth

		-- Remove the selection box
		selectionBox:Destroy()
		Tool.stacks.Value -= 1
	end
end

-- Handle equipped event
Tool.Equipped:Connect(function(mouse)
	QuantityText.Visible = true
	
	-- Create a selection box for the local player
	local selectionBox = Instance.new(""SelectionBox"")
	selectionBox.Adornee = game.Players.LocalPlayer.Character
	selectionBox.LineThickness = 0.1
	selectionBox.Parent = game.Players.LocalPlayer.Character

	-- Wait for a short duration to show the selection box
	wait(1)

	-- Remove the selection box
	selectionBox:Destroy()
end)

Tool.Unequipped:Connect(function()
	QuantityText.Visible = false
end)

-- Handle mouse button click
Tool.Activated:Connect(function()
	-- Check if the player is healing themselves
	local humanoid = game.Players.LocalPlayer.Character:FindFirstChild(""Humanoid"")
	if humanoid and humanoid.Health >= number then
		Heal(game.Players.LocalPlayer)
		script.Parent.Handle.healed:Play()
	elseif humanoid and humanoid.Health >= humanoid.MaxHealth then
		Heal(game.Players.LocalPlayer)
		script.Parent.Handle.healed:Play()
		
	end
	
	while wait() do
		if Tool.stacks.Value == 0 then
			Tool:Destroy()
			QuantityText.Visible = false
			wait(1)
			break
		end
	end
end)
"
3rzFf61V,Stack/Queue/Deque,prr133f,C++,Monday 6th of May 2024 05:39:21 AM CDT,"#pragma once

#include <iostream>

namespace structs {
template <class T> class Stack {
private:
  T *__arr;
  int __top;
  uint __size;

  bool __needEvacuation() { return __top + 2 == __size; }

  void __evacuate() {
    T *newArr = new T[__size * 2];
    std::copy(__arr, __arr + __size, newArr);
    __arr = std::move(newArr);
    __size *= 2;
    return;
  }

public:
  Stack(uint size = 2) : __size(size) {
    __top = -1;
    __arr = new T[__size];
  }

  ~Stack() { delete[] __arr; }

  bool IsEmpty() { return __top == -1; }

  void Push(T val) {
    if (__needEvacuation()) {
      __evacuate();
    }

    __arr[++__top] = val;
  }

  T Pop() {
    if (IsEmpty()) {
      std::cout << ""Stack is empty"" << std::endl;
      return -1;
    }

    return __arr[__top--];
  }
};

template <class T> class Queue {
private:
  T *__arr;
  int __top;
  uint __size;

  bool __needEvacuation() { return __top + 2 == __size; }

  void __evacuate() {
    T *newArr = new T[__size * 2];
    std::copy(__arr, __arr + __size, newArr);
    __arr = std::move(newArr);
    __size *= 2;
    return;
  }

public:
  Queue(uint size = 2) : __size(size) {
    __top = -1;
    __arr = new T[__size];
  }

  ~Queue() { delete[] __arr; }

  bool IsEmpty() { return __top == -1; }

  void Push(T val) {
    if (__needEvacuation()) {
      __evacuate();
    }

    __arr[++__top] = val;
  }

  T Pop() {
    if (IsEmpty()) {
      std::cout << ""Queue is empty"" << std::endl;
      return -1;
    }

    T elem = __arr[0];

    std::copy(__arr + 1, __arr + __size, __arr);
    --__size;
    --__top;

    return elem;
  }
};

template <class T> class Deque {
private:
  T *__arr;
  int __right;
  uint __size;

  bool __needEvacuation() { return __right + 2 == __size; }

  void __evacuate() {
    T *newArr = new T[__size * 2];
    std::copy(__arr, __arr + __size, newArr);
    __arr = std::move(newArr);
    __size *= 2;
    return;
  }

public:
  Deque(uint size = 2) : __size(size) {
    __right = -1;
    __arr = new T[size];
  }

  ~Deque() { delete[] __arr; }

  bool IsEmpty() { return __right == -1; }

  void PushLeft(T val) {
    if (__needEvacuation()) {
      __evacuate();
    }

    std::copy(__arr, __arr + __size, __arr + 1);
    __arr[0] = val;
    __right++;
  }

  void PushRight(T val) {
    if (__needEvacuation()) {
      __evacuate();
    }

    __arr[++__right] = val;
  }

  T PopLeft() {
    if (IsEmpty()) {
      std::cout << ""Deque is empty"" << std::endl;
      return -1;
    }

    T elem = __arr[0];
    std::copy(__arr + 1, __arr + __size, __arr);
    --__size;
    --__right;

    return elem;
  }

  T PopRight() {
    if (IsEmpty()) {
      std::cout << ""Deque is empty"" << std::endl;
      return -1;
    }

    return __arr[__right--];
  }
};
} // namespace structs"
z5XyEPud,Untitled,Rodunskiy,C#,Monday 6th of May 2024 05:32:36 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            int startValue = 5;
            int step = 7;
            int maxNumber = 103;

            for (int i = startValue; i <= maxNumber; i+=step)
            {
                Console.WriteLine(i);
                Console.ReadKey();
            }
        }
    }
}
"
zLeBF6mC,Tool with Stacks (Quantity System),Sungmingamerpro13,CSS,Monday 6th of May 2024 05:29:17 AM CDT,"local Tool = script.Parent

local player = game.Players.LocalPlayer
local QuantityText = player.PlayerGui:WaitForChild(""QuantityGui"").QuantityText

Tool:WaitForChild(""stacks"").Changed:Connect(function(value)
	QuantityText.Text = ""Quantity: ""..value
end)

QuantityText.Text = ""Quantity: ""..Tool.stacks.Value

Tool.Activated:Connect(function()
	Tool.stacks.Value -= 1

	if Tool.stacks.Value == 0 then
		Tool:Destroy()
		QuantityText.Visible = false
	end
end)

Tool.Equipped:Connect(function()
	QuantityText.Visible = true
end)

Tool.Unequipped:Connect(function()
	QuantityText.Visible = false
end)

"
h2W3QF87,Untitled,Rodunskiy,C#,Monday 6th of May 2024 05:24:25 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            const string OutputTextCommand = ""1"";
            const string OutputRandomNumberCommand = ""2"";
            const string ClearTextCommand = ""3"";
            const string ExitProgramCommand = ""4"";

            Random random = new Random();
            int maxRandomNumber = 10;
            bool isWorking = true;

            while (isWorking)
            {
                Console.WriteLine($""{OutputTextCommand})Вывести текст.\n{OutputRandomNumberCommand})Сгерерировать число.\n{ClearTextCommand})Очистить консоль.\n{ExitProgramCommand})Выйти из программы."");

                switch (Console.ReadLine())
                {
                    case OutputTextCommand:
                        Console.WriteLine(""Hello World!"");
                        break;

                    case OutputRandomNumberCommand:
                        int number = random.Next(maxRandomNumber);
                        break;

                    case ClearTextCommand:
                        Console.Clear();
                        break;

                    case ExitProgramCommand:
                        isWorking = false;
                    break;
                }
            }
        }
    }
}
"
kfLRyDyk,Untitled,Rodunskiy,C#,Monday 6th of May 2024 05:23:23 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();

            int maxValue = 10;
            int number = random.Next(maxValue);
            int dividerOne = 3;
            int dividerTwo = 5;
            int sumNumbers = 0;

            Console.WriteLine($""Сгенерированное число:{number}"");

            for (int i = 0; i <= number; i++) 
            {
                if(i % dividerOne == 0 || i % dividerTwo == 0)
                {
                    sumNumbers += i;
                }
            }

            Console.WriteLine(sumNumbers);
        }
    }
}
"
McwGLrxm,Untitled,Rodunskiy,C#,Monday 6th of May 2024 05:21:50 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            int startValue = 5;
            int step = 7;
            int maxNumber = 103;

            for (int i = startValue; i <= maxNumber; i+=step)
            {
                Console.WriteLine(startValue);
                startValue += step;
                Console.ReadKey();
            }
        }
    }
}
"
rFDXMwqE,Dynamic progrmaming: House Robber,ivandrofly,C#,Monday 6th of May 2024 05:06:00 AM CDT,"int Rob(int[] houses, int i)
{
    if (i >= houses.Length) return 0;
    return Math.Max(
        houses[i] + Rob(houses, i + 2), 
        Rob(houses, i + 1));
}

https://youtu.be/73r3KWiEvyk?list=PLot-Xpze53lcvx_tjrr_m2lgD2NsRHlNO"
3MCkhEwv,Untitled,Rodunskiy,C#,Monday 6th of May 2024 05:00:57 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            int number = 5;
            int step = 7;
            int maxNumber = 103;

            for (int i = 0; i <= maxNumber; i+=step)
            {
                Console.WriteLine(number);
                number += step;
                Console.ReadKey();
            }
        }
    }
}
"
S783Br0r,reqauest_db,Danila_lipatov,Python,Monday 6th of May 2024 04:49:42 AM CDT,"def get_last_change(table: str, executor=None) -> pd.DataFrame():       #TODO  add condition to check if table_audit exist
    if executor is None:
        executor: Executor = st.session_state['executor']
    # query = f""SELECT * FROM _defaults._global_audit ORDER BY STAMP DESC LIMIT 5""
    query_test = f""""""SELECT EXISTS (
    SELECT FROM 
        pg_tables
    WHERE 
        schemaname = '{schema}' AND 
        tablename  = '{table}_audit'
    );""""""
    if executor.execute(query_test)[0][0] == True:
        sql = SqlCreatorAlpha(table=f'{table}_audit', schema=schema)
        sql.select().order_by('STAMP', how='DESC').limit(5)
        # df = pd.read_sql(query, conn)
        df = executor.execute(sql).as_dataframe
        return df
"
f0zsFYLG,Untitled,Rodunskiy,C#,Monday 6th of May 2024 04:41:25 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            const string OutputTextCommand = ""1"";
            const string OutputRandomNumberCommand = ""2"";
            const string ClearTextCommand = ""3"";
            const string ExitProgramCommand = ""4"";

            Random rand = new Random();
            int maxRandomNumber = 10;
            bool isWorking = true;

            while (isWorking)
            {
                Console.WriteLine($""{OutputTextCommand})Вывести текст.\n{OutputRandomNumberCommand})Сгерерировать число.\n{ClearTextCommand})Очистить консоль.\n{ExitProgramCommand})Выйти из программы."");

                switch (Console.ReadLine())
                {
                    case OutputTextCommand:
                        Console.WriteLine(""Hello World!"");
                        break;

                    case OutputRandomNumberCommand:
                        int number = rand.Next(maxRandomNumber);
                        break;

                    case ClearTextCommand:
                        Console.Clear();
                        break;

                    case ExitProgramCommand:
                        isWorking = false;
                    break;
                }
            }
        }
    }
}
"
Dk8dDbEv,Untitled,Rodunskiy,C#,Monday 6th of May 2024 04:39:54 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            Random rand = new Random();

            int number = rand.Next(0, 100);
            int dividerOne = 3;
            int dividerTwo = 5;
            int sumNumbers = 0;

            Console.WriteLine($""Сгенерированное число:{number}"");

            for (int i = 0; i <= number; i++) 
            {
                if(i % dividerOne == 0 || i % dividerTwo == 0)
                {
                    sumNumbers += i;
                }
            }

            Console.WriteLine(sumNumbers);
        }
    }
}
"
bzWUyJKa,Untitled,Rodunskiy,C#,Monday 6th of May 2024 04:39:06 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            int number = 5;
            int upNumber = 7;
            int maxNumber = 103;

            for (int i = 0; number <= maxNumber; i++)
            {
                Console.WriteLine(number);
                number += upNumber;
                Console.ReadKey();
            }
        }
    }
}
"
5BtG4Exs,Untitled,mad24md,CSS,Monday 6th of May 2024 04:07:07 AM CDT,"/*BEGIN PS4 Controller Styling*/
.controller.ds4 {
  background: url(base.svgz);
  height: 598px;
  width: 806px;
  /*    margin-left: -403px;
        margin-top: -280px;*/
}

.ds4.disconnected {
  background: url(disconnected.svgz);
}

.ds4.disconnected div {
  display: none;
}

.ds4 .triggers {
  width: 588px;
  height: 90px;
  position: absolute;
  left: 109px;
}

.ds4 .trigger {
  width: 99px;
  height: 100%;
  background: url(triggers.svgz);
  opacity: 0;
}

.ds4 .trigger.left {
  float: left;
}

.ds4 .trigger.right {
  float: right;
  background-position-x: 99px;
}

.ds4 .bumper {
  width: 99px;
  height: 23px;
  background: url(bumper.svgz) no-repeat;
  opacity: 0;
}

.ds4 .bumpers {
  position: absolute;
  width: 588px;
  height: 23px;
  left: 109px;
  top: 94px;
}

.ds4 .bumper.pressed {
  opacity: 1;
}

.ds4 .bumper.left {
  /* -webkit-transform: rotateY(180deg); */
  /* transform: rotateY(180deg); */
  float: left;
}

.ds4 .bumper.right {
  float: right;
  transform: rotateY(180deg);
}

.ds4 .touchpad {
  width: 262px;
  height: 151px;
  position: absolute;
  left: 272px;
  top: 122px;
}

.ds4 .touchpad.pressed {
  background: url(touchpad.svgz) no-repeat center;
}

.ds4 .meta {
  width: 42px;
  height: 42px;
  position: absolute;
  left: 382px;
  bottom: 216px;
}

.ds4 .meta.pressed {
  background: url(meta.svgz) no-repeat center;
}

/*Not needed, but I like keeping them here for posterity*/
/*.ds4 .quadrant{
position: absolute;
background: url(player-n.svgz);
height: 17px;
width: 111px;
top: 140px;
left: 240px;
}
.ds4 .p0{
background-position: 0 -6px;
}
.ds4 .p1{
background-position: 0 -28px;
}
.ds4 .p2{
background-position: 0 -49px;
}
.ds4 .p3{
background-position: 0 -70px;
}*/
.ds4 .arrows {
  position: absolute;
  width: 352px;
  height: 46px;
  top: 142px;
  left: 227px;
}

.ds4 .back,
.ds4 .start {
  background: url(start.svgz);
  width: 28px;
  height: 46px;
  opacity: 0;
}

.ds4 .back.pressed,
.ds4 .start.pressed {
  /* background-position-y: -21px; */
  /* margin-top: 2px; */
  opacity: 1;
}

.ds4 .back {
  float: left;
  /* width: 28px; */
}

.ds4 .start {
  float: right;
  /* width: 28px; */
  background-position: 28px 0;
}

.ds4 .abxy {
  position: absolute;
  width: 170px;
  height: 171px;
  top: 159px;
  left: 567px;
}

.ds4 .button {
  position: absolute;
  width: 55px;
  height: 55px;
  background: url(face.svgz);
}

.ds4 .button.pressed {
  background-position-y: 55px;
  /* margin-top: 5px; */
}

.ds4 .a {
  background-position: 0 0;
  bottom: 0;
  left: 58px;
}

.ds4 .b {
  background-position: -57px 0;
  top: 58px;
  right: 0px;
}

.ds4 .x {
  background-position: -113px 0;
  top: 58px;
}

.ds4 .y {
  background-position: 55px 0;
  left: 58px;
}

.ds4 .sticks {
  position: absolute;
  width: 361px;
  height: 105px;
  top: 308px;
  left: 228px;
}

.ds4 .stick {
  position: absolute;
  background: url(sticks.svgz);
  height: 94px;
  width: 94px;
}

.ds4 .stick.pressed.left {
  background-position-x: -96px;
}

.ds4 .stick.pressed.right {
  background-position-x: -192px;
}

.ds4 .stick.left {
  top: 0;
  left: 0;
}

.ds4 .stick.right {
  top: calc(100% - 105px);
  left: calc(100% - 105px);
}

.ds4 .dpad {
  position: absolute;
  width: 125px;
  height: 126px;
  top: 181px;
  left: 92px;
}

.ds4 .face {
  background: url(dpad.svgz);
  position: absolute;
}

.ds4 .face.up,
.ds4 .face.down {
  width: 36px;
  height: 52px;
}

.ds4 .face.left,
.ds4 .face.right {
  width: 52px;
  height: 36px;
}

.ds4 .face.up {
  left: 44px;
  top: 0;
  background-position: -37px 0px;
}

.ds4 .face.down {
  left: 44px;
  bottom: 0;
  background-position: 0px 0;
}

.ds4 .face.left {
  top: 45px;
  left: 0;
  background-position: 104px 0;
}

.ds4 .face.right {
  top: 45px;
  right: 0px;
  background-position: 52px 0;
}

.ds4 .face.pressed {
  /* margin-top: 5px; */
  background-position-y: 52px;
}

.ds4.half {
  margin-top: -300px;
}

/*END PS4 Controller Styling*/"
gLjG9QQM,Untitled,Rodunskiy,C#,Monday 6th of May 2024 03:23:32 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            const string OutputTextCommand = ""1"";
            const string OutputRandomNumberCommand = ""2"";
            const string ClearTextCommand = ""3"";
            const string ExitProgramCommand = ""4"";

            Random rnd = new Random();
            bool isWorking = true;

            while (isWorking)
            {
                Console.WriteLine($""{OutputTextCommand})Вывести текст.\n{OutputRandomNumberCommand})Сгерерировать число.\n{ClearTextCommand})Очистить консоль.\n{ExitProgramCommand})Выйти из программы."");

                switch (Console.ReadLine())
                {
                    case OutputTextCommand:
                        Console.WriteLine(""Hello World!"");
                        break;

                    case OutputRandomNumberCommand:
                        int number = rnd.Next(10);
                        break;

                    case ClearTextCommand:
                        Console.Clear();
                        break;

                    case ExitProgramCommand:
                        isWorking = false;
                    break;
                }
            }
        }
    }
}
"
dgRKjXFu,Untitled,RenSafaray,Java,Monday 6th of May 2024 03:23:00 AM CDT,"import java.util.Scanner; // Импортируем класс Scanner для считывания данных с клавиатуры

public class Main { // Объявляем класс Main
    public static void main(String[] args) { // Объявляем главный метод main
        Scanner scanner = new Scanner(System.in); // Создаем объект класса Scanner для считывания данных с клавиатуры
        System.out.print(""Введите количество элементов: ""); // Выводим сообщение на экран с просьбой ввести количество элементов
        int n = scanner.nextInt(); // Считываем количество элементов с клавиатуры и сохраняем его в переменной n

        double[] a = new double[n]; // Создаем массив a размером n для хранения элементов
        double max = Double.MIN_VALUE; // Инициализируем переменную max минимальным значением типа double
        double min = Double.MAX_VALUE; // Инициализируем переменную min максимальным значением типа double
        double sum = 0; // Инициализируем переменную sum нулем для хранения суммы элементов

        for (int i = 0; i < n; i++) { // Начинаем цикл for для считывания элементов массива
            System.out.print(""Введите элемент a["" + i + ""]: ""); // Выводим сообщение на экран с просьбой ввести элемент массива
            a[i] = scanner.nextDouble(); // Считываем элемент массива с клавиатуры и сохраняем его в массиве a
            max = Math.max(max, a[i]); // Находим максимальное значение из max и текущего элемента массива
            min = Math.min(min, a[i]); // Находим минимальное значение из min и текущего элемента массива
            sum += a[i]; // Добавляем текущий элемент массива к сумме
        }

        double avg = sum / n; // Вычисляем среднее арифметическое элементов массива
        double result = Math.pow(max, 2) + Math.pow(min, 2) + Math.pow(avg, 2); // Вычисляем сумму квадратов максимального, минимального элементов и среднего арифметического всех элементов

        System.out.println(""Сумма квадратов максимального, минимального элементов и среднего арифметического всех элементов равна: "" + result); // Выводим результат на экран
    }
}"
bvtQZgHh,Untitled,RenSafaray,Java,Monday 6th of May 2024 03:20:55 AM CDT,"package com.example; // Объявляем, что этот класс принадлежит пакету com.example

public class DepositWithdrawMoney { // Объявляем публичный класс DepositWithdrawMoney

    // Метод для внесения денег на счет
    public static void deposit(BankAccount account, double amount) {
        account.deposit(amount); // Вызываем метод deposit у объекта класса BankAccount и передаем ему сумму для внесения
    }

    // Метод для снятия денег со счета
    public static void withdraw(BankAccount account, double amount) {
        account.withdraw(amount); // Вызываем метод withdraw у объекта класса BankAccount и передаем ему сумму для снятия
    }
}"
ChKqiLBg,Untitled,RenSafaray,Java,Monday 6th of May 2024 03:20:40 AM CDT,"package com.example;
import java.util.Hashtable;

public class CheckBalance {

    // Метод для получения баланса счета
    // Принимает в качестве параметров Hashtable с банковскими счетами и номер счета
    // Возвращает баланс счета, либо -1, если счет не найден
    public static double getBalance(Hashtable<String, BankAccount> accounts, String accountNumber) {

        // Получаем объект BankAccount из Hashtable по номеру счета
        BankAccount account = accounts.get(accountNumber);

        // Если объект BankAccount существует, возвращаем его баланс
        if (account != null) {
            return account.getBalance();
        }

        // Если объект BankAccount не найден, возвращаем -1
        return -1;
    }
}"
qNYDTeb5,Untitled,RenSafaray,Java,Monday 6th of May 2024 03:20:19 AM CDT,"package com.example; // Пакет, в котором находится класс BankAccount

import java.util.Random; // Импортируем класс Random для генерации уникального номера счета

public class BankAccount { // Объявляем класс BankAccount
    private static final int ACCOUNT_NUMBER_LENGTH = 10; // Общая длина номера счета

    private String accountNumber; // Номер счета
    private String fullName; // Полное имя владельца счета
    private String dateOfBirth; // Дата рождения владельца счета
    private String codeWord; // Кодовое слово владельца счета
    private double balance; // Баланс счета

    // Конструктор класса BankAccount
    public BankAccount(String fullName, String dateOfBirth, String codeWord) {
        this.fullName = fullName; // Устанавливаем полное имя владельца счета
        this.dateOfBirth = dateOfBirth; // Устанавливаем дату рождения владельца счета
        this.codeWord = codeWord; // Устанавливаем кодовое слово владельца счета
        this.balance = 0; // Устанавливаем начальный баланс счета равным 0

        // Генерируем уникальный номер счета
        Random random = new Random(); // Создаем объект класса Random
        StringBuilder accountNumberBuilder = new StringBuilder(); // Создаем объект класса StringBuilder для формирования номера счета
        for (int i = 0; i < ACCOUNT_NUMBER_LENGTH; i++) { // Цикл для формирования номера счета
            accountNumberBuilder.append(random.nextInt(10)); // Добавляем в номер счета случайную цифру от 0 до 9
        }
        this.accountNumber = accountNumberBuilder.toString(); // Устанавливаем номер счета
    }

    // Метод для получения номера счета
    public String getAccountNumber() {
        return accountNumber;
    }

    // Метод для получения полного имени владельца счета
    public String getFullName() {
        return fullName;
    }

    // Метод для получения даты рождения владельца счета
    public String getDateOfBirth() {
        return dateOfBirth;
    }

    // Метод для получения кодового слова владельца счета
    public String getCodeWord() {
        return codeWord;
    }

    // Метод для получения баланса счета
    public double getBalance() {
        return balance;
    }

    // Метод для внесения денег на счет
    public void deposit(double amount) {
        this.balance += amount; // Увеличиваем баланс счета на сумму amount
    }

    // Метод для снятия денег со счета
    public void withdraw(double amount) {
        if (amount <= this.balance) { // Проверяем, достаточно ли средств на счету для снятия суммы amount
            this.balance -= amount; // Уменьшаем баланс счета на сумму amount
        } else {
            System.out.println(""Недостаточно средств на счету.""); // Выводим сообщение об ошибке, если средств на счету недостаточно
        }
    }
}"
cS3Tz3YM,Untitled,RenSafaray,Java,Monday 6th of May 2024 03:19:55 AM CDT,"import com.example.BankAccount; // Импортируем класс BankAccount из пакета com.example
import com.example.CheckBalance; // Импортируем класс CheckBalance из пакета com.example
import com.example.DepositWithdrawMoney; // Импортируем класс DepositWithdrawMoney из пакета com.example

import java.util.Hashtable; // Импортируем класс Hashtable из пакета java.util для хранения банковских счетов
import java.util.Scanner; // Импортируем класс Scanner из пакета java.util для ввода данных с клавиатуры

public class Main { // Объявляем публичный класс Main
    public static void main(String[] args) { // Объявляем публичный статический метод main, точку входа в программу

        // Создаем объект класса Scanner для ввода данных с клавиатуры
        Scanner scanner = new Scanner(System.in);

        // Создаем объект класса Hashtable для хранения банковских счетов
        Hashtable<String, BankAccount> accounts = new Hashtable<>();

        // Запускаем бесконечный цикл для отображения меню и обработки выбора пользователя
        while (true) {

            // Выводим меню пропускной системы
            System.out.println(""\nМеню пропускной системы:"");
            System.out.println(""1. Создать банковский счёт"");
            System.out.println(""2. Проверить баланс"");
            System.out.println(""3. Внести/снять деньги со счёта"");
            System.out.println(""4. Выход"");

            // Просим пользователя выбрать пункт меню и считываем его выбор
            System.out.print(""Выберите пункт меню: "");
            int choice = scanner.nextInt();

            // Используем конструкцию switch-case для обработки выбора пользователя
            switch (choice) {

                // Создание банковского счета
                case 1:

                    // Считываем имя, дату рождения и кодовое слово
                    System.out.print(""Введите ФИО: "");
                    String fullName = scanner.next();
                    System.out.print(""Введите дату рождения: "");
                    String dateOfBirth = scanner.next();
                    System.out.print(""Введите кодовое слово: "");
                    String codeWord = scanner.next();

                    // Создаем объект класса BankAccount и добавляем его в Hashtable
                    BankAccount account = new BankAccount(fullName, dateOfBirth, codeWord);
                    accounts.put(account.getAccountNumber(), account);

                    // Выводим сообщение об успешном создании счета
                    System.out.println(""Банковский счёт создан. Номер счета: "" + account.getAccountNumber());
                    break;

                case 2:
                    System.out.print(""Введите номер счета: "");
                    String accountNumber = scanner.next();

                    double balance = CheckBalance.getBalance(accounts, accountNumber);

                    if (balance >= 0) {
                        System.out.println(""Баланс счета: "" + balance);
                    } else {
                        System.out.println(""Счет не найден."");
                    }
                    break;

                case 3:
                    System.out.print(""Введите номер счета: "");
                    String inputAccountNumber = scanner.next();

                    // Находим счет по номеру счета
                    BankAccount foundAccount = accounts.get(inputAccountNumber);

                    if (foundAccount != null) {
                        System.out.print(""Введите сумму для внесения/снятия (отрицательное значение для снятия): "");
                        double amount = scanner.nextDouble();

                        if (amount > 0) {
                            DepositWithdrawMoney.deposit(foundAccount, amount);
                            System.out.println(""Деньги успешно внесены на счет."");
                        } else {
                            DepositWithdrawMoney.withdraw(foundAccount, -amount);
                            System.out.println(""Деньги успешно сняты со счета."");
                        }
                    } else {
                        System.out.println(""Счет не найден."");
                    }
                    break;
            }
        }
    }
}"
q0srimvH,Untitled,Rodunskiy,C#,Monday 6th of May 2024 03:06:08 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            Random rnd = new Random();

            int number = rnd.Next(0, 100);
            int dividerOne = 3;
            int dividerTwo = 5;
            int sumNumbers = 0;

            Console.WriteLine($""Сгенерированное число:{number}"");

            for (int i = 0; i <= number; i++) 
            {
                if(i % dividerOne == 0 || i % dividerTwo == 0)
                {
                    sumNumbers += i;
                }
            }

            Console.WriteLine(sumNumbers);
        }
    }
}
"
rsrWUFHR,Untitled,Rodunskiy,C#,Monday 6th of May 2024 02:52:09 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            int number = 5;
            int upNumber = 7;
            int maxNumber = 103;

            while (number <= maxNumber)
            {
                Console.WriteLine(number);
                number += upNumber;
                Console.ReadKey();
            }
        }
    }
}
"
5ddrQJTL,Untitled,Rodunskiy,C#,Monday 6th of May 2024 02:47:57 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            string exitWord = ""exit"";
            string word;
            bool isExit = true;

            while (isExit)
            {
                Console.WriteLine($""Введите любое слово:\nЕсли хотите закончить ввод слов напишите exit {exitWord}"");
                word = Console.ReadLine();

                if (word == exitWord) 
                {
                    isExit = false;
                }
            }
        }
    }
}"
hgr4tPh2,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:47:23 AM CDT,"package com.example; // Указывает, что класс UtilitySoftware находится в пакете com.example

public class UtilitySoftware extends Application { // Определяет класс UtilitySoftware, который наследуется от класса Application
    private String utilityType; // Объявляет приватное поле utilityType типа String

    public UtilitySoftware(String name, String version, String developer, String utilityType) { // Определяет конструктор класса UtilitySoftware с параметрами name, version, developer и utilityType
        super(name, version, developer); // Вызывает конструктор суперкласса Application с параметрами name, version и developer
        this.utilityType = utilityType; // Присваивает значение параметра utilityType полю utilityType
    }

    public String getUtilityType() { // Определяет публичный метод getUtilityType, который возвращает значение поля utilityType
        return utilityType; // Возвращает значение поля utilityType
    }
}"
Be1102sh,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:47:03 AM CDT,"package com.example; // Указание, что класс Software находится в пакете com.example

public class Software { // Определение класса Software с публичным доступом
    private String name; // Объявление приватного поля name типа String
    private String version; // Объявление приватного поля version типа String

    public Software(String name, String version) { // Определение публичного конструктора класса Software
        this.name = name; // Присваивание значения аргумента name полю name
        this.version = version; // Присваивание значения аргумента version полю version
    }

    public String getName() { // Определение публичного метода getName() для получения имени программного обеспечения
        return name; // Возвращение значения поля name
    }

    public String getVersion() { // Определение публичного метода getVersion() для получения версии программного обеспечения
        return version; // Возвращение значения поля version
    }
}"
3mUia9nm,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:46:46 AM CDT,"package com.example; // Указывает, что класс ServerOperatingSystem находится в пакете com.example

public class ServerOperatingSystem extends OperatingSystem { // Определяет класс ServerOperatingSystem, который наследуется от класса OperatingSystem
    private boolean guiSupported; // Объявляет приватное поле guiSupported типа boolean

    public ServerOperatingSystem(String name, String version, String kernelType, boolean guiSupported) { // Определяет конструктор класса ServerOperatingSystem с параметрами name, version, kernelType и guiSupported
        super(name, version, kernelType); // Вызывает конструктор суперкласса OperatingSystem с параметрами name, version и kernelType
        this.guiSupported = guiSupported; // Присваивает значение параметра guiSupported полю guiSupported
    }

    public boolean isGuiSupported() { // Определяет публичный метод isGuiSupported, который возвращает значение поля guiSupported
        return guiSupported; // Возвращает значение поля guiSupported
    }
}"
SRc8Vhxd,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:46:25 AM CDT,"package com.example; // Указание, что класс PaidOperatingSystem находится в пакете com.example

public class PaidOperatingSystem extends OperatingSystem { // Определение класса PaidOperatingSystem, который наследуется от класса OperatingSystem
    private double price; // Объявление приватного поля price типа double

    public PaidOperatingSystem(String name, String version, String kernelType, double price) { // Определение публичного конструктора класса PaidOperatingSystem
        super(name, version, kernelType); // Вызов конструктора суперкласса OperatingSystem с аргументами name, version и kernelType
        this.price = price; // Присваивание значения аргумента price полю price
    }

    public double getPrice() { // Определение публичного метода getPrice() для получения цены операционной системы
        return price; // Возвращение значения поля price
    }
}"
nsP6T1uF,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:46:06 AM CDT,"package com.example; // Указание, что класс OperatingSystem находится в пакете com.example

public class OperatingSystem extends Software { // Определение класса OperatingSystem, который наследуется от класса Software
    private String kernelType; // Объявление приватного поля kernelType типа String

    public OperatingSystem(String name, String version, String kernelType) { // Определение публичного конструктора класса OperatingSystem
        super(name, version); // Вызов конструктора суперкласса Software с аргументами name и version
        this.kernelType = kernelType; // Присваивание значения аргумента kernelType полю kernelType
    }

    public String getKernelType() { // Определение публичного метода getKernelType() для получения типа ядра операционной системы
        return kernelType; // Возвращение значения поля kernelType
    }
}"
GcPhFRBY,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:45:41 AM CDT,"package com.example; // Указывает, что класс MobileOperatingSystem находится в пакете com.example

public class MobileOperatingSystem extends OperatingSystem { // Определяет публичный класс MobileOperatingSystem, который наследуется от класса OperatingSystem
    private String appStore; // Объявляет приватное поле appStore типа String

    public MobileOperatingSystem(String name, String version, String kernelType, String appStore) { // Определяет публичный конструктор класса MobileOperatingSystem с параметрами name, version, kernelType и appStore
        super(name, version, kernelType); // Вызывает конструктор суперкласса OperatingSystem с параметрами name, version и kernelType
        this.appStore = appStore; // Присваивает значение параметра appStore полю appStore
    }

    public String getAppStore() { // Определяет публичный метод getAppStore, который возвращает значение поля appStore
        return appStore; // Возвращает значение поля appStore
    }
}"
AQJ759sY,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:45:21 AM CDT,"package com.example; // Указание, что класс FreeOperatingSystem находится в пакете com.example

public class FreeOperatingSystem extends OperatingSystem { // Определение класса FreeOperatingSystem, который наследуется от класса OperatingSystem
    public FreeOperatingSystem(String name, String version, String kernelType) { // Определение публичного конструктора класса FreeOperatingSystem
        super(name, version, kernelType); // Вызов конструктора суперкласса OperatingSystem с аргументами name, version и kernelType
    }
}"
B23zg6Jn,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:45:06 AM CDT,"package com.example; // Указание, что класс Application находится в пакете com.example

public class Application extends Software { // Определение класса Application, который наследуется от класса Software
    private String developer; // Объявление приватного поля developer типа String

    public Application(String name, String version, String developer) { // Определение публичного конструктора класса Application
        super(name, version); // Вызов конструктора суперкласса Software с аргументами name и version
        this.developer = developer; // Присваивание значения аргумента developer полю developer
    }

    public String getDeveloper() { // Определение публичного метода getDeveloper() для получения разработчика приложения
        return developer; // Возвращение значения поля developer
    }
}"
cQDPszv6,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:43:46 AM CDT,"import com.example.Software; // Импорт класса Software из пакета com.example
import com.example.OperatingSystem; // Импорт класса OperatingSystem из пакета com.example
import com.example.FreeOperatingSystem; // Импорт класса FreeOperatingSystem из пакета com.example
import com.example.PaidOperatingSystem; // Импорт класса PaidOperatingSystem из пакета com.example
import com.example.Application; // Импорт класса Application из пакета com.example
import com.example.MobileOperatingSystem; // Импорт класса MobileOperatingSystem из пакета com.example
import com.example.ServerOperatingSystem; // Импорт класса ServerOperatingSystem из пакета com.example
import com.example.UtilitySoftware; // Импорт класса UtilitySoftware из пакета com.example

import java.util.ArrayList; // Импорт класса ArrayList из пакета java.util для работы со списками
import java.util.List; // Импорт интерфейса List из пакета java.util для работы со списками

public class Main { // Определение класса Main с публичным доступом
    public static void main(String[] args) { // Определение главного метода main, точка входа в программу
        // Создание экземпляров классов
        FreeOperatingSystem freeOS = new FreeOperatingSystem(""Ubuntu"", ""20.04"", ""Linux""); // Создание объекта freeOS класса FreeOperatingSystem
        PaidOperatingSystem paidOS = new PaidOperatingSystem(""Windows"", ""10"", ""NT"", 199.99); // Создание объекта paidOS класса PaidOperatingSystem
        Application application = new Application(""LibreOffice"", ""7.1.4"", ""The Document Foundation""); // Создание объекта application класса Application
        MobileOperatingSystem mobileOS = new MobileOperatingSystem(""Android"", ""11"", ""Linux"", ""Google Play""); // Создание объекта mobileOS класса MobileOperatingSystem
        ServerOperatingSystem serverOS = new ServerOperatingSystem(""Ubuntu Server"", ""20.04"", ""Linux"", false); // Создание объекта serverOS класса ServerOperatingSystem
        UtilitySoftware utilitySoftware = new UtilitySoftware(""CCleaner"", ""5.78"", ""Piriform"", ""Optimization""); // Создание объекта utilitySoftware класса UtilitySoftware

        // Создание списка объектов типа Software
        List<Software> softwareList = new ArrayList<>(); // Создание списка softwareList для хранения объектов типа Software
        softwareList.add(freeOS); // Добавление объекта freeOS в список softwareList
        softwareList.add(paidOS); // Добавление объекта paidOS в список softwareList
        softwareList.add(application); // Добавление объекта application в список softwareList
        softwareList.add(mobileOS); // Добавление объекта mobileOS в список softwareList
        softwareList.add(serverOS); // Добавление объекта serverOS в список softwareList
        softwareList.add(utilitySoftware); // Добавление объекта utilitySoftware в список softwareList

        // Демонстрация полиморфного поведения
        for (Software software : softwareList) { // Цикл for-each для перебора элементов списка softwareList
            System.out.println(""Name: "" + software.getName()); // Вывод на экран имени объекта
            System.out.println(""Version: "" + software.getVersion()); // Вывод на экран версии объекта
            System.out.println(""-------------------------------""); // Вывод разделительной линии

            // Пример проверки типа объекта и вызова специфичных методов
            if (software instanceof PaidOperatingSystem) { // Проверка, является ли объект экземпляром класса PaidOperatingSystem
                PaidOperatingSystem paidSoftware = (PaidOperatingSystem) software; // Приведение типа объекта к PaidOperatingSystem
                System.out.println(""Price: $"" + paidSoftware.getPrice()); // Вывод на экран цены объекта
            } else if (software instanceof MobileOperatingSystem) { // Проверка, является ли объект экземпляром класса MobileOperatingSystem
                MobileOperatingSystem mobileSoftware = (MobileOperatingSystem) software; // Приведение типа объекта к MobileOperatingSystem
                System.out.println(""App Store: "" + mobileSoftware.getAppStore()); // Вывод на экран названия магазина приложений
            } else if (software instanceof ServerOperatingSystem) {
                ServerOperatingSystem serverSoftware = (ServerOperatingSystem) software; // Приведение типа объекта к ServerOperatingSystem
                System.out.println(""GUI Supported: "" + serverSoftware.isGuiSupported()); // Вывод на экран информации о поддержке графического интерфейса
            } else if (software instanceof UtilitySoftware) { // Проверка, является ли объект экземпляром класса UtilitySoftware
                UtilitySoftware utility = (UtilitySoftware) software; // Приведение типа объекта к UtilitySoftware
                System.out.println(""Utility Type: "" + utility.getUtilityType()); // Вывод на экран типа утилитного программного обеспечения
            }
        }
    }
}"
bxszvNch,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:43:16 AM CDT,"package com.example; // Объявляет пакет, к которому относится этот класс

public class Fraction { // Объявляет публичный класс Fraction
    private int numerator; // Объявляет приватное целочисленное поле numerator (числитель)
    private int denominator; // Объявляет приватное целочисленное поле denominator (знаменатель)

    public Fraction(int numerator, int denominator) { // Объявляет публичный конструктор класса Fraction с двумя целочисленными параметрами
        this.numerator = numerator; // Присваивает значение параметра numerator полю numerator
        this.denominator = denominator; // Присваивает значение параметра denominator полю denominator
    }

    public int getNumerator() { // Объявляет публичный метод получения значения поля numerator
        return numerator; // Возвращает значение поля numerator
    }

    public int getDenominator() { // Объявляет публичный метод получения значения поля denominator
        return denominator; // Возвращает значение поля denominator
    }

    public void setNumerator(int numerator) { // Объявляет публичный метод установки значения поля numerator
        this.numerator = numerator; // Присваивает значение параметра numerator полю numerator
    }

    public void setDenominator(int denominator) { // Объявляет публичный метод установки значения поля denominator
        if (denominator != 0) { // Проверяет, что значение параметра denominator не равно нулю
            this.denominator = denominator; // Присваивает значение параметра denominator полю denominator
        }
    }

    public Fraction divide(Fraction other) { // Объявляет публичный метод деления текущей дроби на другую дробь other
        int newNumerator = this.numerator * other.denominator; // Вычисляет новый числитель
        int newDenominator = this.denominator * other.numerator; // Вычисляет новый знаменатель
        return new Fraction(newNumerator, newDenominator); // Возвращает новую дробь, созданную на основе новых числителя и знаменателя
    }

    @Override
    public String toString() { // Переопределяет публичный метод toString для преобразования объекта в строку
        return numerator + ""/"" + denominator; // Возвращает строку, содержащую числитель и знаменатель, разделенные косой чертой
    }
}"
YravuWKw,Untitled,RenSafaray,Java,Monday 6th of May 2024 02:42:06 AM CDT,"import com.example.Fraction; // Импортируем класс Fraction из пакета com.example
import java.util.Scanner; // Импортируем класс Scanner для считывания данных с клавиатуры

public class Main { // Объявляем класс Main
    public static void main(String[] args) { // Объявляем метод main, точку входа в программу
        Scanner scanner = new Scanner(System.in); // Создаем объект класса Scanner для считывания данных с клавиатуры

        System.out.println(""Введите первую дробь:""); // Выводим сообщение на экран
        System.out.print(""Числитель: ""); // Выводим сообщение на экран
        int numerator1 = scanner.nextInt(); // Считываем числитель первой дроби с клавиатуры и сохраняем в переменную numerator1
        System.out.print(""Знаменатель: ""); // Выводим сообщение на экран
        int denominator1 = scanner.nextInt(); // Считываем знаменатель первой дроби с клавиатуры и сохраняем в переменную denominator1

        System.out.println(""Введите вторую дробь:""); // Выводим сообщение на экран
        System.out.print(""Числитель: ""); // Выводим сообщение на экран
        int numerator2 = scanner.nextInt(); // Считываем числитель второй дроби с клавиатуры и сохраняем в переменную numerator2
        System.out.print(""Знаменатель: ""); // Выводим сообщение на экран
        int denominator2 = scanner.nextInt(); // Считываем знаменатель второй дроби с клавиатуры и сохраняем в переменную denominator2

        Fraction fraction1 = new Fraction(numerator1, denominator1); // Создаем объект класса Fraction для первой дроби и передаем в конструктор числитель и знаменатель
        Fraction fraction2 = new Fraction(numerator2, denominator2); // Создаем объект класса Fraction для второй дроби и передаем в конструктор числитель и знаменатель

        Fraction result = fraction1.divide(fraction2); // Вызываем метод divide у объекта fraction1 и передаем в него объект fraction2, результат сохраняем в переменную result

        System.out.println(""Результат деления: "" + result); // Выводим результат деления на экран
    }
}"
Y8FaxWzb,BDFD - IsValidImageLink,StaffVanish,Go,Monday 6th of May 2024 02:32:22 AM CDT,"$var[isValidImageLink;INPUT LINK]
$var[isValidLImageink;false]
$try $httpGet[$var[isValidImageLink]] $if[$and[$httpStatus==200!;$checkContains[$httpGetHeader[content-type];image/]==true]]$var[isValidImageLink;true]$endif $catch $var[isValidImageLink;false] $endtry $var[isValidImageLink]"
