id,title,username,language,date,content
kmCLga5S,–ª3—Å++cryptapi,istomina_sofia,C++,Tuesday 26th of March 2024 12:42:34 PM CDT,"#include <iostream>
#include <Windows.h>
#include <wincrypt.h>
#include <string>
#include <iomanip>
#include <iostream>

using namespace std;

int main()
{
    setlocale(LC_ALL, ""RUS"");

    string nameC;
    cout << ""–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: "";
    cin >> nameC;

    HCRYPTKEY hKey;
    HCRYPTPROV hProv;
    LPCSTR Container = nameC.c_str();


    if (CryptAcquireContextA(&hProv, Container, NULL, PROV_RSA_FULL, 0))
    {
        cout << ""–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "" << Container << "" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"" << endl;

    jump:

        if (CryptGetUserKey(hProv, AT_KEYEXCHANGE, &hKey))
        {
            cout << ""–ö–ª—é—á –∏–∑–≤–ª–µ—á–µ–Ω"" << endl;
            CryptDestroyKey(hKey);
        }

        else
        {
            if (CryptGenKey(hProv, CALG_RSA_KEYX, CRYPT_EXPORTABLE, &hKey))
            {
                cout << ""–ö–ª—é—á —Å–æ–∑–¥–∞–Ω"" << endl;
                CryptDestroyKey(hKey);
            }

            else
            {
                cerr << ""–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: "" << GetLastError();
                if (hKey) CryptDestroyKey(hKey);
            }
        }
    }

    else
    {
        if (CryptAcquireContextA(&hProv, Container, NULL, PROV_RSA_FULL, CRYPT_NEWKEYSET))
        {
            cout << ""–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "" << Container << "" –±—ã–ª —Å–æ–∑–¥–∞–Ω"" << endl;

            goto jump;
        }

        else
        {
            cerr << ""–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: "" << GetLastError();
        }
    }

    CryptReleaseContext(hProv, 0);
}"
Fd6HS4dw,MpShort [MoodPlay],AhmadXploit,Dart,Tuesday 26th of March 2024 12:33:10 PM CDT,"[
{
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691942620/Story/hamzah_j4glhq.webp"",
	""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691942620/Story/hamzah_j4glhq.webp"",
    ""videoUrl"": ""https://flutter.github.io/assets-for-api-docs/assets/videos/bee.mp4"",
    ""name"": ""The Lion of Allah: Hamza Ibn Abdul Mutalib (RA)"",
	""title"": ""Anonymous""
  },
  {
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691835269/Story/64d75aa254b70_uqppgk.png"",
	""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691835269/Story/64d75aa254b70_uqppgk.png"",
    ""videoUrl"": ""https://res.cloudinary.com/dybvjvrib/video/upload/v1711213503/MoodPlay/Black%20Pink/Snaptik.app_7199976110782729478_fus92k.mp4"",
    ""name"": ""Bilal the Great African Muslim"",
	""title"": ""Anonymous""
  },
{
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691859328/Story/al_fateh_siovvh.png"",
	""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691859328/Story/al_fateh_siovvh.png"",
    ""videoUrl"": ""https://res.cloudinary.com/dybvjvrib/video/upload/v1711213503/MoodPlay/Black%20Pink/Snaptik.app_7199976110782729478_fus92k.mp4"",
    ""name"": ""Muhammad al Fatih, The Conqueror of Constantinople"",
	""author"": ""Anonymous""
  },
{
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691862067/Story/khaleed_mmalxl.png"",
	""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691859328/Story/al_fateh_siovvh.png"",
    ""videoUrl"": ""https://res.cloudinary.com/dybvjvrib/video/upload/v1711213503/MoodPlay/Black%20Pink/Snaptik.app_7199976110782729478_fus92k.mp4"",
    ""name"": ""Sword of God: The story of Khalid Ibn Al-Walid"",
	""author"": ""Anonymous""
  },
{
	""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691916765/Story/Nabi_Nuh_ifxjze.png"",
	""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1691859328/Story/al_fateh_siovvh.png"",
    ""videoUrl"": ""https://res.cloudinary.com/dybvjvrib/video/upload/v1711213503/MoodPlay/Black%20Pink/Snaptik.app_7199976110782729478_fus92k.mp4"",
    ""name"": ""The Story of Abul Basyar (Prophet Noah)"",
	""author"": ""Anonymous""
  }
]"
Ca45Yxbv,–°–ü–†–ò–ù–¢ ‚Ññ 6 | –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º –∏ —É—Å–∫–æ—Ä—è–µ–º | –£—Ä–æ–∫ 9: –í–≥–ª—É–±—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞,chevengur,C++,Tuesday 26th of March 2024 12:27:43 PM CDT,"main.cpp

#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

struct days {
    int count; 
    float sum;
};

std::vector<float> ComputeAvgTemp(const std::vector<std::vector<float>>& measures) {

    if (measures.empty() || measures[0].empty()) {
        return {};
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä days –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã
    std::vector<days> aggregated(measures.size()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞

    for (const auto& day : measures) {
        for (size_t i = 0; i < day.size(); ++i) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
            if (day[i] > 0) {
                aggregated[i].sum += day[i];
                aggregated[i].count++;
            }
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    std::vector<float> averages(measures[0].size());

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã
    for (size_t i = 0; i < measures[0].size(); ++i) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
        averages[i] = (aggregated[i].count > 0) ? aggregated[i].sum / aggregated[i].count : 0;
    }


    return averages;
}

void Test() {
    // 4 –¥–Ω—è –ø–æ 3 –∏–∑–º–µ—Ä–µ–Ω–∏—è
    vector<vector<float>> v = {
        {0, -1, -1},
        {1, -2, -2},
        {2, 3, -3},
        {3, 4, -4}
    };

    // —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è 0-–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è (1+2+3) / 3 = 2 (–Ω–µ —É—á–∏—Ç—ã–≤–∞–º 0)
    // —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è 1-–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è (3+4) / 2 = 3.5 (–Ω–µ —É—á–∏—Ç—ã–≤–∞–º -1, -2)
    // —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è 2-–≥–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (–≤—Å–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã), –ø–æ—ç—Ç–æ–º—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0

    assert(ComputeAvgTemp(v) == vector<float>({ 2, 3.5f, 0 }));
}

int main() {
    Test();
    cout << ""Test passed successfully!"" << endl;
    return 0;
}

***************************************************************************************************************************************
log_duration.h

#pragma once

#include <chrono>
#include <iostream>

#define PROFILE_CONCAT_INTERNAL(X, Y) X##Y
#define PROFILE_CONCAT(X, Y) PROFILE_CONCAT_INTERNAL(X, Y)
#define UNIQUE_VAR_NAME_PROFILE PROFILE_CONCAT(profileGuard, __LINE__)
#define LOG_DURATION(x) LogDuration UNIQUE_VAR_NAME_PROFILE(x)

class LogDuration {
public:
    // –∑–∞–º–µ–Ω–∏–º –∏–º—è —Ç–∏–ø–∞ std::chrono::steady_clock
    // —Å –ø–æ–º–æ—â—å—é using –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    using Clock = std::chrono::steady_clock;

    LogDuration(const std::string& id) : id_(id) {
    }

    ~LogDuration() {
        using namespace std::chrono;
        using namespace std::literals;

        const auto end_time = Clock::now();
        const auto dur = end_time - start_time_;
        std::cerr << id_ << "": ""s << duration_cast<milliseconds>(dur).count() << "" ms""s << std::endl;
    }

private:
    const std::string id_;
    const Clock::time_point start_time_ = Clock::now();
};
"
P9mnhnEW,ü§ë G2A.com Free Gift Card Guide Mar 2024 FIX ü§ë,Roobet,GetText,Tuesday 26th of March 2024 12:26:08 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
 
Working as of:
26 March 2024
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 "
SuhHGRDF,ü§ë G2A.com Free Gift Card Guide Mar 2024 FIX ü§ë,ounnuo,GetText,Tuesday 26th of March 2024 12:25:27 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_311478.pdf

Working as of:
26 March 2024


















"
8w6Ni2U1,Update Broken,Alexr360,Lua,Tuesday 26th of March 2024 12:15:37 PM CDT,"-- List of programs to check for updates
local programs = {
    {name = ""Bastion"", pastebinCode = ""Czt0xUgp""},
    {name = ""RBastion"", pastebinCode = ""YLMd18xC""},
    {name = ""FBastion"", pastebinCode = ""8pF6ds3s""},
    {name = ""GPS"", pastebinCode = ""d8WLzv0U""},
    {name = ""Stripmine"", pastebinCode = ""BkFdvGdv""},
    {name = ""Update"", pastebinCode = ""8w6Ni2U1""},
    {name = ""Greeting"", pastebinCode = ""REfxrLkG""},
    {name = ""startup"", pastebinCode = ""u2ey5fkZ""},
    -- Add more programs as needed
}

-- Function to check for updates
local function checkForUpdates(program)
    -- Loop through the list of programs
    for i, program in ipairs(programs) do
      -- Check if the file already exists
      if not fs.exists(program.name) then
        -- Open a new file with the current program name
        local file = fs.open(program.name, ""w"")

        -- Write a message to the file
        file.write(""This is "" .. program.name .. "". The pastebin code is "" .. program.pastebinCode)

        -- Close the file
        file.close()
      end
    end
    print(""Files have been created."")
    
    print(""Checking for updates for "" .. program.name .. ""..."")
    local response = http.get(""https://pastebin.com/raw/"" .. program.pastebinCode)
    if response then
        local remoteVersion = response.readAll()
        response.close()
        local localVersion = fs.exists(program.name) and fs.open(program.name, ""r"").readAll() or nil
        if localVersion and localVersion ~= remoteVersion then
            print(""Updating "" .. program.name .. ""..."")
            local file = fs.open(program.name, ""w"")
            file.write(remoteVersion)
            file.close()
            print(program.name .. "" updated successfully."")
        else
            print(program.name .. "" is up to date."")
        end
    else
        print(""Failed to check for updates for "" .. program.name)
    end
end

-- Main function to check for updates for all programs
local function main()
    for _, program in ipairs(programs) do
        checkForUpdates(program)
    end
end

-- Run main function
main()"
kVn6s8hR,Untitled,dllbridge,C,Tuesday 26th of March 2024 12:15:33 PM CDT,"
#include   <stdio.h>
  




///////////////////////////////////////////////////
int main()                                       //
{
	
	int  n    =   4 ;
	int *p    =  &n ;

    printf("" n = %d  \n"",  n); 
    printf("" p = %d  \n"",  p);
    printf(""*p = %d  \n"", *p); 	
    printf(""&p = %d  \n"", &p);	 		
}




"
xWmgkTAs,Untitled,MeehoweCK,C++,Tuesday 26th of March 2024 12:14:39 PM CDT,"#include <iostream>

bool czyPierwsza(unsigned int liczba) {
	if (liczba < 2) {
		return false;
	}
	for (auto i{ 2 }; i * i <= liczba; ++i) {
		if (liczba % i == 0) {
			return false;
		}
	}
	return true;
}

int main() {
	unsigned int liczba;
	std::cout << ""Podaj liczbe naturalna: "";
	std::cin >> liczba;
	if (czyPierwsza(liczba)) {
		std::cout << liczba << "" jest liczba pierwsza.\n"";
	}
	else {
		std::cout << liczba << "" nie jest liczba pierwsza.\n"";
	}
	return 0;
}"
78dCMR1V,Divide and Conquer,nathanwailes,Python,Tuesday 26th of March 2024 12:13:10 PM CDT,"""""""
This algorithm divides the original problem into smaller sub-problems, solves the sub-problems recursively, and combines their solutions to get the solution to the original problem.
"""""""
VRmtpV7a,Sequences,bAngelov,JavaScript,Tuesday 26th of March 2024 12:09:13 PM CDT,"function solve(data) {
    data.map(element=>JSON.parse(element).sort((a,b)=>Number(b)-Number(a)).toString())
        .reduce((prev,element)=>{
            if (!prev.includes(element)){
                prev.push(element)
            }
            return prev
        },[])
        .map(element=>JSON.parse(`[${element}]`))
        .sort((a,b)=>a.length-b.length)
        .forEach(element=>console.log(`[${element.join(', ')}]`))
}"
yfNWUpmh,Backtracking,nathanwailes,Python,Tuesday 26th of March 2024 12:09:01 PM CDT,"""""""
Backtracking is a systematic way of trying out different sequences of decisions until we find one that ""works."" It's often used for solving problems related to constraints, such as puzzles (like Sudoku), combinatorial problems, and pathfinding in mazes.

A classic example of a problem solved using backtracking is the N-Queens puzzle. The challenge is to place N queens on an N√óN chessboard so that no two queens threaten each other. This means no two queens can be in the same row, column, or diagonal.

Here's a simple Python solution using backtracking. This solution focuses on placing one queen in each row, starting from the first row and moving downwards. If a valid position is found, the algorithm proceeds to the next row; if not, it backtracks.

The code below defines a chessboard as a 2D list, where '.' represents an empty square and 'Q' represents a queen. The solve_n_queens function tries to place queens on the board in a way that no two queens attack each other. The is_safe function checks if a queen can be placed at the specified row and column considering the current state of the board. The solve function attempts to place a queen in every row of a particular column before moving on to the next column, and it backtracks if no safe position is found.

For an n of 4, this will generate all the possible solutions where the queens don't attack each other.
""""""


def solve_n_queens(n):
    board = [['.' for _ in range(n)] for _ in range(n)]
    results = []
    
    def is_safe(row, col):
        # Check this row on left side
        for i in range(col):
            if board[row][i] == 'Q':
                return False
        
        # Check upper diagonal on left side
        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if board[i][j] == 'Q':
                return False
        
        # Check lower diagonal on left side
        for i, j in zip(range(row, n, 1), range(col, -1, -1)):
            if board[i][j] == 'Q':
                return False
        
        return True
    
    def solve(col):
        # If all queens are placed
        if col >= n:
            results.append([''.join(row) for row in board])
            return
        
        # Consider this column and try placing this queen in all rows one by one
        for i in range(n):
            if is_safe(i, col):
                board[i][col] = 'Q'
                solve(col + 1)  # Recur to place rest of the queens
                board[i][col] = '.'  # If no place is safe, remove queen and backtrack
                
    solve(0)
    return results

# Example usage
n = 4
for solution in solve_n_queens(n):
    for row in solution:
        print(row)
    print()"
5jk3G8e1,SDFBSENT,gadungw71,PHP,Tuesday 26th of March 2024 12:03:08 PM CDT,"‚Ä¢	https://github.com/Godzilla-x-Kong-2-2-2024-THAI
‚Ä¢	https://github.com/2-2024-Godzilla-x-Kong-2
‚Ä¢	https://github.com/2-Godzilla-x-Kong-2-2024-4K-1080P
‚Ä¢	https://github.com/2024-Tee-Yod
‚Ä¢	https://www.senscritique.com/liste/SUBTHAItm_2_2024_or/3803292
‚Ä¢	https://www.senscritique.com/liste/2_2024_FULL_HD/3803321
‚Ä¢	https://www.senscritique.com/liste/2_2024_HD_Thai_Sub/3803421
‚Ä¢	https://www.senscritique.com/liste/Tee_Yod_2024_4K_THAI/3803332
‚Ä¢	https://scribehow.com/page/_Godzilla_x_Kong_The_New_Empire__2_2024__HD_1080p__sCn1X4ggR2u5OYNieLlVZA
‚Ä¢	https://scribehow.com/page/TH__2__2024__Godzilla_x_Kong_The_New_Empire_M-THAI_HD__ajOBMbQuQX-ai5_q0I7ZTA
‚Ä¢	https://scribehow.com/page/__2__Godzilla_x_Kong_The_New_Empire____1080PX__THAI__U-gIi57mR0G_6Ohlr-y17w
‚Ä¢	https://scribehow.com/page/__Tee_Yod____1080PX__FHD__k6D9LBSXRLmDfKaqUALviQ
‚Ä¢	https://wandering.flarum.cloud/d/51454-puspita
‚Ä¢	https://hiuderyy.hashnode.dev/asdvsentet
‚Ä¢	https://www.onfeetnation.com/profiles/blogs/sintiabealla
‚Ä¢	https://medium.com/@deliaaniocktas/%E9%AD%94%E9%AC%BC%E5%89%8B%E6%98%9F-%E5%86%B0%E5%A4%A9%E5%87%8D%E5%9C%B0-%E5%AE%8C%E6%95%B4%E7%89%88-ghostbusters-frozen-empire-%E7%94%B5%E5%BD%B1%E5%AE%8C%E6%95%B4%E7%89%88%E5%AE%8C%E6%95%B4%E7%89%88-2024tw-912085ba04fa
‚Ä¢	https://open.firstory.me/story/clu8luji5079k01xobt6m104l
‚Ä¢	https://www.artstation.com/artwork/VJnqr5
‚Ä¢	https://forum.mush.com.br/topic/207882/ssantikeloja
‚Ä¢	https://rentry.co/gckmf49f
‚Ä¢	https://hackmd.io/@rerewilli6/B1A3n_x10
‚Ä¢	https://paste.ee/p/wKCaX
‚Ä¢	https://start.me/w/MK2p0R
‚Ä¢	https://telegra.ph/SADVFRBS-03-26
‚Ä¢	https://muckrack.com/onyek-wenag/bio
‚Ä¢	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/718465/Default.aspx
‚Ä¢	https://profile.hatena.ne.jp/EAFDREG/
‚Ä¢	https://www.fitlynk.com/1711472474F247777
"
RT0Wy2yi,Catalogue,Silviya7,JavaScript,Tuesday 26th of March 2024 11:56:01 AM CDT,"function Catalogue(input){

    let ArrInput={};
    for (const productdata of input) {
        
      let [product,price]=productdata.split(':');
      ArrInput[product.trim()]=price.trim();

       //let price1=Number(Arrin[1].trim());
       //let pr= Arrin[0].trim();
       // ArrInput[pr]=price1;
     
    }

    let result= Object.entries(ArrInput);
    result.sort((a,b) => a[0].localeCompare(b[0]));
    let Oldletter='';
    for (const [p,price] of result) {
        if(Oldletter !='' && p[0] !=Oldletter){
            console.log(p[0]);
            Oldletter=p[0];
        }
        else if(Oldletter==''){
        console.log(p[0].trim());
        Oldletter=p[0];
        }
        console.log(`  ${p}: ${price}`);
    }

}"
VTcfNhYA,vullaby and mandibuzz pvp Filter,name8888less,JavaScript,Tuesday 26th of March 2024 11:55:21 AM CDT,"javascript:$.getScript(""https://cdn.jsdelivr.net/gh/name8888less/sgpokemap-addons@main/vullaby-mandi-pvp-filter.js"", function(data, textStatus, jqxhr) {});
"
EhxSzwXL,jellyjar error - jellyfin_api_client modification,mariokartgod,Python,Tuesday 26th of March 2024 11:55:10 AM CDT,"# ORIGINAL SCRIPT

# server_url = os.environ['JELLYFIN_URL']
# server_username = os.environ['JELLYFIN_USERNAME']
# server_password = os.environ['JELLYFIN_PASSWORD']

# MODIFIED SCRIPT

os.environ['JELLYFIN_URL'] = 'http://localIPaddress:8096'
os.environ['JELLYFIN_USERNAME'] = 'binary'
os.environ['JELLYFIN_PASSWORD'] = 'mypassword'"
TGrkzXvX,G2A.com Free Gift Card Guide Mar 2024 FIX,HastyBasher0,GetText,Tuesday 26th of March 2024 11:52:59 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=cea149fd-ead1-4939-94cf-d10a8ce7936a
 
Working as of:
26 March 2024















































"
REfxrLkG,Welcome Screen,Alexr360,Lua,Tuesday 26th of March 2024 11:51:54 AM CDT,"-- Print a line of dashes for aesthetics
local function lineBreak()
    local width, height = term.getSize()
    for i = 1, width do
      io.write(""-"")
    end
    io.write(""\n"")
end
-- Function to clear the screen
local function clearScreen()
    term.clear()
    term.setCursorPos(1, 1)
end

clearScreen()
-- Print the welcome message
print(""Welcome to Monopoly OS by Monopoly Co."")
lineBreak()
print(""Current Time: "" .. textutils.formatTime(os.time(), true))
lineBreak()
print(""Select a program to run:"")
print(""1. Bastion"")
print(""2. GPS"")
print(""3. Update"")
print(""4. Other"")
lineBreak()

local choice = read()

if choice == ""1"" then
  shell.run(""Bastion"")
elseif choice == ""2"" then
  shell.run(""GPS"")
elseif choice == ""3"" then
  shell.run(""Update"")
end"
wSMNp8mA,jellyjar error - config/data/backups/USER output,mariokartgod,JSON,Tuesday 26th of March 2024 11:51:02 AM CDT,"{
    ""User"": ""binary"",
    ""Items"": []
}"
RAVBceBu,Update,Alexr360,Lua,Tuesday 26th of March 2024 11:46:37 AM CDT,"-- List of programs to check for updates
local programs = {
    {name = ""Bastion"", pastebinCode = ""YLMd18xC""},
    {name = ""GPS"", pastebinCode = ""d8WLzv0U""},
    {name = ""Update"", pastebinCode = ""RAVBceBu""},
    {name = ""startup"", pastebinCode = ""REfxrLkG""},
    -- Add more programs as needed
}

-- Function to check for updates
local function checkForUpdates(program)
    print(""Checking for updates for "" .. program.name .. ""..."")
    local response = http.get(""https://pastebin.com/raw/"" .. program.pastebinCode)
    if response then
        local remoteVersion = response.readAll()
        response.close()
        local localVersion = fs.exists(program.name) and fs.open(program.name, ""r"").readAll() or nil
        if localVersion and localVersion ~= remoteVersion then
            print(""Updating "" .. program.name .. ""..."")
            local file = fs.open(program.name, ""w"")
            file.write(remoteVersion)
            file.close()
            print(program.name .. "" updated successfully."")
        else
            print(program.name .. "" is up to date."")
        end
    else
        print(""Failed to check for updates for "" .. program.name)
    end
end

-- Main function to check for updates for all programs
local function main()
    for _, program in ipairs(programs) do
        checkForUpdates(program)
    end
end

-- Run main function
main()"
TYcGDrwc,Dynamic Programming,nathanwailes,Python,Tuesday 26th of March 2024 11:45:33 AM CDT,"""""""
Dynamic Programming (DP) is a method for solving complex problems by breaking them down into simpler subproblems. It is used when a problem has overlapping subproblems and optimal substructure, meaning the problem can be broken down into smaller, reusable problems, and the optimal solution can be constructed from the optimal solutions of its subproblems.

A classic example of DP is solving the Fibonacci sequence, where each number is the sum of the two preceding ones, starting from 0 and 1. That is:

fibonacci(0) = 0
fibonacci(1) = 1
fibonacci(n) = fibonacci(n-1) + fibonacci(n-2) for n > 1

With the dynamic programming approach below, instead of computing the Fibonacci sequence recursively and recalculating the same values multiple times, we store (or ""memoize"") previously calculated Fibonacci numbers in an array (fib_cache). This way, each Fibonacci number is calculated once, and subsequent requests for that number are answered in constant time. This method significantly reduces the time complexity from exponential in naive recursion to linear with DP.
""""""

def fibonacci(n):
    # Base cases
    if n <= 1:
        return n
    
    # Initialize cache
    fib_cache = [0] * (n + 1)
    fib_cache[1] = 1
    
    # Populate the cache iteratively
    for i in range(2, n + 1):
        fib_cache[i] = fib_cache[i-1] + fib_cache[i-2]
    
    return fib_cache[n]

# Example usage
print(fibonacci(10))  # Output: 55"
KCfWS95N,Shopping Cart,bAngelov,JavaScript,Tuesday 26th of March 2024 11:44:34 AM CDT,"function solve() {
    const shoppingCartElement = document.querySelector(""body > .shopping-cart"")
    const resultElement= document.querySelector("".shopping-cart textarea"")
    const checkOutElement = document.querySelector("".shopping-cart button.checkout"")
    let cart = []
    shoppingCartElement.addEventListener(""click"",handleCart)
    checkOutElement.addEventListener(""click"", handleCheckout)

    function handleCart(event){
        if (event.target.tagName !== ""BUTTON"") return
        const price = event.target.parentElement.parentElement.querySelector("".product-line-price"")
        const name = event.target.parentElement.parentElement.querySelector("".product-details .product-title"")
        cart.push({price:Number(price.textContent),type:name.textContent})
        resultElement.textContent += `Added ${name.textContent} for ${Number(price.textContent).toFixed(2)} to the cart.\n`
    }

    function handleCheckout(event){
        const products = Array.from(new Set(cart.reduce((prev,prod)=> {
            prev.push(prod.type)
            return prev
        },[]))).join("", "")
        const totalPrice =  cart.reduce((prev,{price,type})=> prev + price,0)
        resultElement.textContent += `You bought ${products} for ${totalPrice.toFixed(2)}.`
        Array.from(document.querySelectorAll(""button"")).forEach(element=>element.setAttribute(""disabled"",""disabled""))
        event.stopPropagation()
    }


}"
eRUxMLh8,Untitled,MeehoweCK,C++,Tuesday 26th of March 2024 11:43:02 AM CDT,"/*
Polecenie:
Napisz funkcjƒô unsigned int dzielniki(unsigned int n), kt√≥ra zwraca liczbƒô dzielnik√≥w naturalnych podanej liczby n
*/

#include <iostream>

unsigned int dzielniki(unsigned int n) {
	if (n == 0) {
		return 0;
	}
	if (n == 1) {
		return 1;
	}
	unsigned int wynik{2};
	for (auto i{ 2 }; i < n; ++i) {
		if (n % i == 0) {
			++wynik;
		}
	}
	return wynik;
}

bool czyPierwsza(unsigned int liczba) {
	if (dzielniki(liczba) == 2) {
		return true;
	}
	return false;
}

int main() {
	unsigned int liczba;
	std::cout << ""Podaj liczbe naturalna: "";
	std::cin >> liczba;
	std::cout << liczba << "" posiada "" << dzielniki(liczba) << "" dzielniki naturalne, wiec "";
	if (!czyPierwsza(liczba)) {
		std::cout << ""nie "";
	}
	std::cout << ""jest liczba pierwsza.\n"";
	return 0;
}"
B1qu06J1,Two pointers,nathanwailes,Python,Tuesday 26th of March 2024 11:38:55 AM CDT,"def two_sum_sorted(arr, target):
    # Initialize two pointers
    left = 0  # Starting from the beginning of the array
    right = len(arr) - 1  # Starting from the end of the array
    
    while left < right:
        current_sum = arr[left] + arr[right]
        
        if current_sum == target:
            return [left, right]  # Return the indices of the two numbers
        elif current_sum < target:
            left += 1  # Move the left pointer to the right
        else:
            right -= 1  # Move the right pointer to the left
            
    return []  # Return an empty list if no pair is found

# Example usage
arr = [2, 7, 11, 15]
target = 9
print(two_sum_sorted(arr, target))  # Output: [0, 1], because arr[0] + arr[1] = 2 + 7 = 9"
vrCdZTku,Sliding Window,nathanwailes,Python,Tuesday 26th of March 2024 11:37:00 AM CDT,"def max_sum_subarray(arr, k):
    # Edge case
    if len(arr) < k:
        return ""The array is too small for the window size""
    
    # Initialize the variables
    max_sum = window_sum = sum(arr[:k])
    window_start = 0
    
    # Slide the window, we don't need to slide if k is equal to the length of the array
    for window_end in range(k, len(arr)):
        # Add the next element (slide the window up by one)
        window_sum += arr[window_end] - arr[window_start]
        # Remove the element going out of the window
        window_start += 1
        # Update max_sum if needed
        max_sum = max(max_sum, window_sum)
    
    return max_sum

# Example usage
arr = [2, 3, 4, 1, 5]
k = 3
print(max_sum_subarray(arr, k))  # Output: 12, which is the sum of [3, 4, 5]"
eBQydkux,Untitled,ubidefeo,Python,Tuesday 26th of March 2024 11:34:13 AM CDT,"from machine import I2C, Pin
from mp_button import *
from i2c_lcd import *
from time import sleep
from machine import Timer

def azione_bottone(pin, azione):
  if azione == Button.PRESSED:
    print('posizione: ', posizione)
    if posizione <= 0 or posizione  >= 15:
      print('ci hai preso')
      
      schermo.color(0, 200, 0)
    else:
      print('sei lento')
      schermo.color(200, 0, 0)

connessione_i2c = I2C(0)
schermo = RGBDisplay(connessione_i2c)
bottone = Button(16, callback = azione_bottone)
timer_asterisco = Timer()

posizione = 0
tempo = 0
direzione = 1

schermo.color(200, 200, 200)

def azione_timer(timer):
  global posizione, direzione
  
  schermo.color(100, 100, 100)
  schermo.clear()
  if posizione < 0:
    posizione = 0
  if posizione > 15:
    posizione = 15
  schermo.move(posizione, 0)
  schermo.write('*')
  posizione += direzione
  if posizione > 15:
    direzione = -1
  if posizione < 0:
    direzione = 1
  

timer_asterisco.init(period = 500, mode = Timer.PERIODIC, callback = azione_timer)

while True:
  bottone.update()
  
  
"
8D5Bbi8B,Untitled,icarussiano,Python,Tuesday 26th of March 2024 11:07:52 AM CDT,"import html
import logging
import urllib.parse
from uuid import uuid4
import requests
import wolframalpha
from more_itertools import peekable
from telegram import InlineQueryResultArticle, InputTextMessageContent, Update, InlineQueryResultPhoto
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, InlineQueryHandler
from telegram.helpers import mention_html
import os
import vertexai
from vertexai.generative_models import GenerativeModel, Part

os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/home/Icarussiano/provagemini-417819.json'
#setup Gemini
project_id = ""provagemini-417819""
location = ""us-central1""
vertexai.init(project=project_id, location=location)
model = GenerativeModel(""gemini-1.0-pro"")

#setup logger
logging.basicConfig(
    format=""%(asctime)s - %(name)s - %(levelname)s - %(message)s"", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger(""httpx"").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TOKEN')
appid = os.getenv('API_key')
wolfram_client = wolframalpha.Client(appid)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Send a message when the command /start is issued.""""""
    user_id = update.effective_user.id
    name = update.effective_user.full_name
    menzione = mention_html(user_id, name)
    await update.message.reply_html(
        f""Ciao {menzione}! Sono un bot che ti aiuta a rispondere alle domande usando WolframAlpha. Scrivi /help per ""
        f""sapere come usarmi."")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Send a message when the command /help is issued.""""""
    help_text = ""Puoi usare i seguenti comandi:\n\n""
    help_text += ""/short <query>: Risponder√≤ usando l'API short answers di WolframAlpha\n""
    help_text += ""/img <query>: Risponder√≤ con l'immagine del risultato di WolframAlpha\n""
    help_text += (""/query <query>: Risponder√≤ in modo dettagliato, riportando tutte le informazioni testuali ""
                  ""disponibili\n"")
    help_text += ""\nPuoi anche usare il bot inline, scrivendo @simplewolframbot <query> ;""
    await update.message.reply_text(help_text)


async def simple_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Handle the /simple command. This is run when you type: /simple <query>""""""
    query = ' '.join(update.message.text.split()[1:])
    query_url = urllib.parse.quote_plus(query)
    short_url = f""http://api.wolframalpha.com/v1/result?appid={appid}&i={query_url}""
    res = requests.get(short_url).text
    await update.message.reply_text(res)


async def img(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Handle the /img command. This is run when you type: /img <query>""""""
    query = ' '.join(update.message.text.split()[1:])
    query_url = urllib.parse.quote_plus(query)
    photo_url = f""http://api.wolframalpha.com/v1/simple?appid={appid}&i={query_url}""
    res = requests.get(photo_url)
    with open('output.png', 'wb') as f:
        f.write(res.content)
    await update.message.reply_photo(open('output.png', 'rb'))


async def reply_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Handle the /query command. This is run when you type: /query <query>""""""
    query = ' '.join(update.message.text.split()[1:])
    res = wolfram_client.query(query)
    result_text = """"
    if peekable(res.results):
        for pod in res.results:
            for subpod in pod.subpods:
                result_text += f""{subpod.plaintext}\n""
    else:
        for pod in res.pods:
            result_text += f""\n{pod.title}\n""
            for subpod in pod.subpods:
                result_text += f""{subpod.plaintext}\n""
    if len(result_text) > 4096:
        result_text = result_text[:4096]
    await update.message.reply_text(result_text)


async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """"""Handle the inline query. This is run when you type: @simplewolframbot <query>""""""
    query = update.inline_query.query
    if not query:  # empty query should not be handled
        return
    elif ';' in query:
        query = query[:-1]
        query_url = urllib.parse.quote_plus(query)
        photo_url = f""http://api.wolframalpha.com/v1/simple?appid={appid}&i={query_url}""
        res = wolfram_client.query(query)
        result_text = """"
        if peekable(res.results):
            for pod in res.results:
                for subpod in pod.subpods:
                    if subpod.plaintext:
                        result_text += f""{html.escape(subpod.plaintext)}\n""
        else:
            for pod in res.pods:
                result_text += f""\n<b>{pod.title}</b>\n""
                length = len(f""\n<b>{pod.title}</b>\n"")
                for subpod in pod.subpods:
                    if subpod.plaintext:
                        result_text += f""{html.escape(subpod.plaintext)}\n""
                    else:
                        result_text = result_text[:-length]

        short_url = f""http://api.wolframalpha.com/v1/result?appid={appid}&i={query_url}""
        req = requests.get(short_url).text
        message = InputTextMessageContent(f""<b>{html.escape(query)}</b> \n{result_text}"", parse_mode=ParseMode.HTML)
        rapido = InputTextMessageContent(f""<b>{html.escape(query)}</b> \n{html.escape(req)}"", parse_mode=ParseMode.HTML)
        if len(message.message_text) > 4096:
            message = InputTextMessageContent(message.message_text[:4096], parse_mode=ParseMode.HTML)
        if len(rapido.message_text) > 4096:
            rapido = InputTextMessageContent(rapido.message_text[:4096], parse_mode=ParseMode.HTML)
        latex = f""Convert the following text in LaTex inline expression. Answer only with the LaTex code delimited by dollar sign. \nText: {query}={result_text}""
        responses = model.generate_content(latex, stream=True)
        latex_text = ''.join([response.text for response in responses])
        #latex_text = responses.text
        latex_text = latex_text.lstrip('$')
        latex_text = latex_text.rstrip('$')
        latex_text = f""${latex_text}$""

        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title=""Risposta rapida"",
                input_message_content=rapido,
            ),
            InlineQueryResultArticle(
                id=str(uuid4()),
                title=""Risposta testuale completa"",
                input_message_content=message,
            ),
            InlineQueryResultArticle(
                id=str(uuid4()),
                title=""LaTeX(sperimental)"",
                input_message_content=InputTextMessageContent(latex_text, parse_mode=ParseMode.HTML),
            ),
            InlineQueryResultPhoto(
                id=str(uuid4()),
                title=""Immagine"",
                photo_url=photo_url,
                thumbnail_url=photo_url,
            ),

        ]

        await update.inline_query.answer(results)


app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler(""query"", reply_query))
app.add_handler(CommandHandler(""start"", start))
app.add_handler(CommandHandler(""help"", help_command))
app.add_handler(CommandHandler(""img"", img))
app.add_handler(CommandHandler(""short"", simple_query))
app.add_handler(InlineQueryHandler(inline_query))
app.run_polling()"
0wF4Z3rc,Untitled,kopyl,Python,Tuesday 26th of March 2024 10:59:07 AM CDT,"with open(filepath, 'rb') as file:
  pdf_stream = io.BytesIO(file.read())
images = convert_from_bytes(pdf_stream.read())
paths = []
# Save images
for i, image in enumerate(images):
  image.save(f'page{i}.png', 'PNG')
  paths.append(f'page{i}.png')


# Load the document segmentation model
# docseg_model_name = 'DILHTWD/documentlayoutsegmentation_YOLOv8_ondoclaynet'
docseg_model = YOLO(""yolov8x-doclaynet-epoch64-imgsz640-initiallr1e-4-finallr1e-5.pt"")

# Process the images with the model
results = docseg_model(source=paths, save=True, show_labels=True, show_conf=True, show_boxes=True)"
X6K6uHAz,Untitled,DuboisP,C++,Tuesday 26th of March 2024 10:36:24 AM CDT,"
#include <Wire.h>
#include ""PCF8574.h""
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

#include <ESP8266WiFi.h>
#include <RotaryEncoder.h>
#include <Ticker.h>

#define PIN_A D5   //ky-040 clk pin, add 100nF/0.1uF capacitors between pin & ground!!!
#define PIN_B D6   //ky-040 dt  pin, add 100nF/0.1uF capacitors between pin & ground!!!
#define BUTTON D7  //ky-040 sw  pin, add 100nF/0.1uF capacitors between pin & ground!!!

RotaryEncoder encoder(PIN_A, PIN_B, BUTTON);

Ticker encoderRotary;
Ticker encoderButton;

#define i2c_Address 0x3c
#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels
#define OLED_RESET -1     //   QT-PY / XIAO

#define C1_HEIGHT 64
#define C1_WIDTH 128
static const unsigned char PROGMEM CAR1_bmp[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3b, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe2, 0x03, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xe7,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0x00, 0x1f,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xc1, 0xbf, 0xff, 0x3f,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xfc, 0x00, 0x01, 0xe0, 0x00, 0xe0, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xfc, 0x00, 0x00, 0xe0, 0x00, 0xf0, 0x6f, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xf8, 0x00, 0x00, 0xc0, 0x00, 0x78, 0x37, 0xfd, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xd0, 0x00, 0x01, 0xe0, 0x00, 0x3c, 0x1b, 0xff, 0x2f,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xd0, 0x00, 0x01, 0xe0, 0x00, 0x1e, 0x0f, 0xff, 0xe7,
                                                  0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0x00, 0x03, 0x90, 0x00, 0x1f, 0x3f, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xfe, 0xf8, 0x3f, 0xfe, 0x00, 0x00, 0x03, 0x90, 0x00, 0x0f, 0xff, 0xff, 0xfe,
                                                  0xff, 0xff, 0xff, 0xff, 0x60, 0xff, 0xf0, 0x00, 0x04, 0x03, 0x88, 0x00, 0x0f, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0x80, 0x00, 0x1f, 0x07, 0x08, 0x00, 0x7f, 0xff, 0xff, 0xdc,
                                                  0xff, 0xff, 0xff, 0xfa, 0x73, 0x18, 0x00, 0x00, 0x20, 0x87, 0x05, 0xf3, 0xff, 0xf3, 0xff, 0xbc,
                                                  0xff, 0xff, 0xff, 0xf0, 0x09, 0x80, 0x00, 0x00, 0x00, 0x47, 0x03, 0xff, 0xff, 0xc3, 0xfc, 0x0d,
                                                  0xff, 0xff, 0xff, 0xfe, 0xe0, 0x60, 0x00, 0x07, 0xf0, 0x6f, 0x07, 0xff, 0xff, 0xc3, 0xf8, 0x0f,
                                                  0xff, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0x00, 0x18, 0x0e, 0x07, 0xff, 0xfe, 0xe3, 0xf0, 0x0f,
                                                  0xff, 0xff, 0xff, 0xff, 0xc0, 0x1a, 0x00, 0x00, 0x00, 0x1e, 0x03, 0xcf, 0xf8, 0xc3, 0xf1, 0x07,
                                                  0xff, 0xff, 0xff, 0xff, 0x7f, 0x05, 0x80, 0x00, 0x03, 0xfe, 0x7b, 0xff, 0xff, 0xc3, 0xf3, 0x87,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xc3, 0xe1, 0xc7,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xe4, 0xc7,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xcc, 0xc7,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xcc, 0xe7,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xcf, 0xe7,
                                                  0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0x87, 0xef,
                                                  0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xfd, 0xdf, 0x86, 0xef,
                                                  0xfc, 0x40, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x04, 0xef,
                                                  0xfc, 0xfc, 0x7e, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0c, 0xef,
                                                  0xf8, 0xfe, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x0e, 0xef,
                                                  0xf9, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x0f, 0xcf,
                                                  0xff, 0xf3, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xfc, 0x78, 0x7f, 0xff, 0xff, 0x0b, 0x07, 0xdf,
                                                  0xe3, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0xfc, 0xbc, 0x7f, 0xff, 0xfc, 0x0a, 0x03, 0xdf,
                                                  0xd8, 0x7f, 0xff, 0xff, 0xff, 0xe7, 0x80, 0x7f, 0xfd, 0x7c, 0x3f, 0xff, 0xf0, 0x06, 0x07, 0x9f,
                                                  0x9f, 0x7f, 0xff, 0xff, 0xff, 0xc7, 0xfc, 0xff, 0xf8, 0x6e, 0x3f, 0xff, 0xe0, 0x04, 0x07, 0xbf,
                                                  0x83, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xf8, 0x66, 0x3f, 0xff, 0xc0, 0x3c, 0x02, 0x3f,
                                                  0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xe7, 0x3f, 0xff, 0xc0, 0x78, 0x00, 0x7f,
                                                  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xe3, 0x1f, 0xff, 0x01, 0xc0, 0x00, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf7, 0x7f, 0xff, 0x0e, 0x00, 0x00, 0xff,
                                                  0x77, 0xff, 0xf7, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xe7, 0x7f, 0x7f, 0xfe, 0x70, 0x07, 0xc3, 0xff,
                                                  0x7f, 0xff, 0xe7, 0xff, 0xfc, 0xf8, 0x7f, 0xff, 0xe6, 0x3f, 0x7f, 0xff, 0x80, 0x1f, 0xff, 0xff,
                                                  0x1f, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xe6, 0x3f, 0x7f, 0xfc, 0x00, 0xff, 0xff, 0xff,
                                                  0x87, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xc6, 0x67, 0x7f, 0xe0, 0x03, 0xff, 0xff, 0xff,
                                                  0x9b, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xc3, 0x67, 0x7f, 0x00, 0x1f, 0xff, 0xff, 0xff,
                                                  0xcd, 0xdf, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0x81, 0xe7, 0x78, 0x00, 0xff, 0xff, 0xff, 0xff,
                                                  0xc1, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xe6, 0x60, 0x03, 0xff, 0xff, 0xff, 0xff,
                                                  0xf8, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff,
                                                  0xfe, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x03, 0x3e, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff,
                                                  0x7f, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x02, 0x3e, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xfb, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x02, 0x3c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xef, 0xff, 0xf0, 0x03, 0x0f, 0xef, 0xff, 0xfe, 0x01, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xf3, 0xff, 0xff, 0x83, 0x07, 0xf7, 0xff, 0xfe, 0x01, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xf8, 0xcf, 0xff, 0xff, 0x80, 0xf3, 0xff, 0xfc, 0x00, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xe0, 0x01, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xf0, 0x00, 0x3f, 0xf7, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xfc, 0x00, 0x03, 0xdf, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xf0, 0x00, 0x1a, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0x00, 0x00, 0x00, 0x78, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define C2_HEIGHT 64
#define C2_WIDTH 128
static const unsigned char PROGMEM CAR2_bmp[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xf8, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xf7, 0x9e, 0x00, 0x00, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xd8, 0x0e, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xfe, 0xe0, 0x06, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xfb, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0x07, 0xc3, 0xe3, 0x00, 0x00, 0x00, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xfb, 0xfc, 0xa3, 0xf1, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xef, 0xff, 0x6f, 0xc1, 0x87, 0xff, 0xf8, 0x1f, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xfe, 0x1f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xff, 0x3f, 0x3f, 0xff, 0xff, 0xff,
                                                  0xff, 0xfd, 0xd7, 0xff, 0xff, 0xfd, 0xef, 0xff, 0xfb, 0xe1, 0xef, 0xe2, 0x7d, 0xff, 0xff, 0xff,
                                                  0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7c, 0x3d, 0xfd, 0xbf, 0xff, 0xff, 0xff,
                                                  0xff, 0xfd, 0xfd, 0xc0, 0x7f, 0xff, 0xff, 0x03, 0xfc, 0x2f, 0xff, 0x80, 0x7d, 0xdf, 0xff, 0xff,
                                                  0xff, 0xfd, 0x8f, 0xc3, 0x70, 0xff, 0xfe, 0x01, 0xfe, 0x43, 0xfb, 0xef, 0xbf, 0x7f, 0xff, 0xff,
                                                  0xff, 0xfc, 0x07, 0xc7, 0xff, 0xe1, 0xfc, 0x00, 0xff, 0x98, 0xff, 0xf1, 0xff, 0xfb, 0xff, 0xff,
                                                  0xff, 0xfd, 0x03, 0xc7, 0xff, 0xfc, 0x3c, 0x78, 0x7f, 0xc0, 0x3f, 0xff, 0xff, 0xf9, 0xff, 0xff,
                                                  0xff, 0xfc, 0x73, 0xc7, 0xff, 0xfd, 0x70, 0xfc, 0x7f, 0xf8, 0x0f, 0xff, 0xff, 0xfc, 0xff, 0xff,
                                                  0xff, 0xfc, 0x21, 0xe3, 0xff, 0xfd, 0xf9, 0x9e, 0x3f, 0xff, 0xf3, 0xff, 0xff, 0xfe, 0x7f, 0xff,
                                                  0xff, 0xfc, 0x21, 0xe3, 0x7f, 0xff, 0xf9, 0x1b, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xfe, 0xa0, 0xf1, 0xff, 0xff, 0xf3, 0x31, 0x1f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff,
                                                  0xff, 0xfe, 0xe4, 0xf1, 0xbf, 0xfb, 0xf3, 0x31, 0x1f, 0xf7, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xfe, 0x7c, 0x7b, 0xbf, 0xff, 0xf3, 0xb0, 0x9f, 0xef, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff,
                                                  0xff, 0xfe, 0x3c, 0x7b, 0xfd, 0xff, 0xf3, 0xf0, 0x8f, 0xff, 0xff, 0xff, 0xf7, 0xfc, 0xbf, 0xff,
                                                  0xff, 0xfc, 0x64, 0xb6, 0xff, 0xf5, 0xe2, 0xff, 0x8f, 0xdf, 0xf8, 0x0f, 0x50, 0x07, 0x7f, 0xff,
                                                  0xff, 0xfe, 0xe4, 0xfb, 0xf9, 0xfd, 0xe2, 0x7f, 0x8f, 0xff, 0xe0, 0x01, 0xf8, 0x07, 0xff, 0xff,
                                                  0xff, 0xfe, 0x80, 0xdf, 0xef, 0xf7, 0xf2, 0x78, 0x8f, 0xbf, 0xc0, 0x03, 0xf8, 0x07, 0x7f, 0xff,
                                                  0xff, 0xff, 0x10, 0xef, 0xff, 0xbf, 0xf2, 0xf0, 0x8f, 0xff, 0xc0, 0x03, 0xf8, 0x0f, 0x7f, 0xff,
                                                  0xff, 0xff, 0x18, 0xf3, 0xff, 0xfe, 0x73, 0xd0, 0x87, 0x7f, 0x80, 0x03, 0xf7, 0xff, 0x1f, 0xff,
                                                  0xff, 0xff, 0xb0, 0xff, 0x83, 0xff, 0xf3, 0x98, 0x8f, 0x7f, 0xfc, 0x03, 0xf7, 0xfe, 0x2f, 0xff,
                                                  0xff, 0xff, 0x80, 0x00, 0x3f, 0xc3, 0xf1, 0x19, 0x0f, 0xbf, 0xff, 0xff, 0xb6, 0x01, 0xdf, 0xff,
                                                  0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xc1, 0x99, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x7e, 0x7f, 0xff,
                                                  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xce, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x7f, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7c, 0x0f, 0x80, 0x00, 0x00, 0x0f, 0x1f, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x38, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define GT7_HEIGHT 64
#define GT7_WIDTH 128
static const unsigned char PROGMEM GT7_bmp[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x07, 0xf8, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x3f, 0xfc, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x7f, 0xf9, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0xff, 0xf9, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0xff, 0xf3, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x01, 0xff, 0xf3, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0x80, 0x01, 0xff, 0xe7, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0x80, 0x03, 0xff, 0xc7, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x1f, 0x80, 0x03, 0xff, 0xcf, 0xff, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x0f, 0x80, 0x07, 0xff, 0x8f, 0xff, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


#define fan_HEIGHT 64
#define fan_WIDTH 64
static const unsigned char PROGMEM FAN_bmp[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
                                                 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f,
                                                 0xfc, 0x87, 0xff, 0x80, 0x03, 0xff, 0xe1, 0x3f, 0xfc, 0x03, 0xfc, 0x01, 0x80, 0x7f, 0xc0, 0x3f,
                                                 0xf9, 0x33, 0xf0, 0x7f, 0xfe, 0x0f, 0xcc, 0x9f, 0xf9, 0x39, 0xe1, 0xf0, 0x1f, 0x87, 0x9c, 0x9f,
                                                 0xf9, 0x13, 0x87, 0x80, 0x0f, 0xe1, 0xc8, 0x9f, 0xf9, 0x83, 0x1f, 0x8f, 0xc7, 0xf8, 0xc1, 0x9f,
                                                 0xf9, 0xee, 0x3f, 0x9f, 0xf3, 0xfc, 0x77, 0x9f, 0xf9, 0xfc, 0x7f, 0x8f, 0xf3, 0xfe, 0x3f, 0x9f,
                                                 0xf9, 0xf8, 0xff, 0xc7, 0xf3, 0xf3, 0x1f, 0x9f, 0xf9, 0xf1, 0xff, 0xe7, 0xf3, 0xe1, 0x8f, 0x9f,
                                                 0xf9, 0xf3, 0x8f, 0xf3, 0xf3, 0xe0, 0xcf, 0x9f, 0xf9, 0xe7, 0x03, 0xf3, 0xf3, 0xcc, 0x67, 0x9f,
                                                 0xf9, 0xc6, 0x70, 0xf9, 0xf3, 0xce, 0x63, 0x9f, 0xf9, 0xcc, 0xfc, 0x39, 0xf3, 0x8f, 0x33, 0x9f,
                                                 0xf9, 0x88, 0xff, 0x19, 0xf3, 0x9f, 0x13, 0x9f, 0xf9, 0x99, 0xff, 0x89, 0xf7, 0x3f, 0x99, 0x9f,
                                                 0xf9, 0x99, 0xff, 0xc5, 0xe6, 0x3f, 0x99, 0x9f, 0xf9, 0x33, 0xff, 0xe0, 0x04, 0x7f, 0x9d, 0x9f,
                                                 0xf9, 0x33, 0xff, 0xf0, 0x00, 0xff, 0x9c, 0x9f, 0xf9, 0x32, 0x03, 0xe3, 0xc1, 0xff, 0x3c, 0x9f,
                                                 0xf9, 0x30, 0x00, 0x4f, 0xf3, 0xfc, 0x3c, 0x9f, 0xf9, 0x39, 0xfc, 0x0f, 0xf1, 0xf8, 0xfc, 0x9f,
                                                 0xf9, 0x3f, 0xff, 0x9f, 0xf9, 0xc1, 0xfc, 0x9f, 0xf9, 0x7f, 0xfc, 0x1f, 0xf8, 0x07, 0xfe, 0x9f,
                                                 0xf9, 0x7f, 0xe0, 0x1f, 0xf8, 0x3f, 0xfe, 0x9f, 0xf9, 0x3f, 0x83, 0x9f, 0xf9, 0xff, 0xfc, 0x9f,
                                                 0xf9, 0x3f, 0x1f, 0x8f, 0xf0, 0x3f, 0x9c, 0x9f, 0xf9, 0x3c, 0x3f, 0xcf, 0xf2, 0x00, 0x0c, 0x9f,
                                                 0xf9, 0x3c, 0xff, 0x83, 0xc7, 0xc0, 0x4c, 0x9f, 0xf9, 0x39, 0xff, 0x00, 0x0f, 0xff, 0xcc, 0x9f,
                                                 0xf9, 0xb9, 0xfe, 0x20, 0x07, 0xff, 0xcc, 0x9f, 0xf9, 0x99, 0xfc, 0x67, 0xa3, 0xff, 0x99, 0x9f,
                                                 0xf9, 0x99, 0xfc, 0xef, 0x91, 0xff, 0x99, 0x9f, 0xf9, 0xc8, 0xf9, 0xcf, 0x98, 0xff, 0x11, 0x9f,
                                                 0xf9, 0xcc, 0xf1, 0xcf, 0x9c, 0x3f, 0x33, 0x9f, 0xf9, 0xc6, 0x73, 0xcf, 0x9f, 0x0e, 0x63, 0x9f,
                                                 0xf9, 0xe6, 0x33, 0xcf, 0xcf, 0xc0, 0xe7, 0x9f, 0xf9, 0xf3, 0x07, 0xcf, 0xcf, 0xf1, 0xcf, 0x9f,
                                                 0xf9, 0xf1, 0x87, 0xcf, 0xe7, 0xff, 0x8f, 0x9f, 0xf9, 0xf8, 0xcf, 0xcf, 0xe3, 0xff, 0x1f, 0x9f,
                                                 0xf9, 0xfc, 0x7f, 0xcf, 0xf1, 0xfe, 0x3f, 0x9f, 0xf9, 0xee, 0x3f, 0xcf, 0xf9, 0xfc, 0x77, 0x9f,
                                                 0xf9, 0x83, 0x1f, 0xe3, 0xf1, 0xf8, 0xc1, 0x9f, 0xf9, 0x13, 0x87, 0xf0, 0x01, 0xe1, 0xc8, 0x9f,
                                                 0xf9, 0x39, 0xe1, 0xf8, 0x0f, 0x87, 0x9c, 0x9f, 0xf9, 0x33, 0xf0, 0x7f, 0xfe, 0x0f, 0xcc, 0x9f,
                                                 0xfc, 0x03, 0xfe, 0x01, 0x80, 0x3f, 0xc0, 0x3f, 0xfc, 0x87, 0xff, 0x80, 0x01, 0xff, 0xe1, 0x3f,
                                                 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
                                                 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };


#define HS_HEIGHT 64
#define HS_WIDTH 64
static const unsigned char PROGMEM HSEAT_bmp[] = { 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                   0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xf7, 0xf7, 0xff,
                                                   0xff, 0xe0, 0x00, 0x7f, 0xf3, 0xf3, 0xf3, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xe1, 0xf1, 0xf1, 0xff,
                                                   0xff, 0xf0, 0x00, 0x3f, 0xe0, 0xf0, 0xf0, 0x7f, 0xff, 0xf0, 0x00, 0x3f, 0xe0, 0x60, 0x70, 0x3f,
                                                   0xff, 0xf8, 0x00, 0x3f, 0xe1, 0xe0, 0xf0, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xe1, 0xe0, 0xe0, 0xff,
                                                   0xff, 0xfc, 0x00, 0x1f, 0xf9, 0xf8, 0xfc, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xf9, 0xf8, 0xfc, 0xff,
                                                   0xff, 0xfc, 0x00, 0x1f, 0xf9, 0xf9, 0xf8, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xf1, 0xf9, 0xf9, 0xff,
                                                   0xff, 0xfe, 0x00, 0x00, 0x02, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01,
                                                   0xff, 0xff, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
                                                   0xff, 0xff, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x48, 0x00, 0x00,
                                                   0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x48, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x01,
                                                   0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x20, 0x00, 0x00, 0x03,
                                                   0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07,
                                                   0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x01, 0x20, 0x00, 0x00, 0x0f,
                                                   0xff, 0xff, 0xff, 0xff, 0x1f, 0x9f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x9f, 0x8f, 0xff,
                                                   0xff, 0xff, 0xff, 0xff, 0x9f, 0x8f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xcf, 0xc7, 0xff,
                                                   0xff, 0xff, 0xff, 0xff, 0xcf, 0xcf, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define lmr_HEIGHT 64
#define lmr_WIDTH 64
static const unsigned char PROGMEM LUMIERES_bmp[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x80, 0x40, 0x00, 0x00,
                                                      0x00, 0x00, 0x03, 0x01, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x80, 0x80, 0x00, 0x00,
                                                      0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
                                                      0x00, 0x01, 0x00, 0x70, 0x0e, 0x00, 0x80, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x03, 0x03, 0x80, 0x00,
                                                      0x00, 0x00, 0x71, 0x80, 0x01, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0xc8, 0x00, 0x00,
                                                      0x00, 0x00, 0x02, 0x03, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0a, 0x58, 0x20, 0x00, 0x00,
                                                      0x00, 0x00, 0x04, 0x14, 0x28, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x11, 0xc8, 0x30, 0x00, 0x00,
                                                      0x00, 0x00, 0x08, 0x16, 0x28, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x74, 0x26, 0x10, 0x00, 0x00,
                                                      0x00, 0x0f, 0xc8, 0x40, 0x02, 0x13, 0xf0, 0x00, 0x00, 0x00, 0x08, 0x64, 0x26, 0x10, 0x00, 0x00,
                                                      0x00, 0x00, 0x0c, 0x14, 0x28, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x13, 0xc8, 0x30, 0x00, 0x00,
                                                      0x00, 0x00, 0x04, 0x30, 0x0c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x06, 0x1e, 0x78, 0x60, 0x00, 0x00,
                                                      0x00, 0x00, 0x02, 0x03, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0xcc, 0x00, 0x00,
                                                      0x00, 0x00, 0x61, 0x80, 0x01, 0x86, 0x00, 0x00, 0x00, 0x01, 0xc0, 0xc0, 0x03, 0x01, 0x80, 0x00,
                                                      0x00, 0x01, 0x00, 0x60, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


#define sftr_HEIGHT 64
#define sftr_WIDTH 64
static const unsigned char PROGMEM shifter_bmp[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xe3, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x9f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xf1, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x8f, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc3, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xe0, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xcf, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xe7, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xfe, 0x7f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfe, 0x7f, 0xff, 0xff,
                                                     0xff, 0xff, 0xfc, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff,
                                                     0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xc7, 0xff, 0xff,
                                                     0xff, 0xff, 0xc7, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xe7, 0xff, 0xff,
                                                     0xff, 0xff, 0x80, 0x00, 0x03, 0x61, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x03, 0x20, 0xff, 0xff,
                                                     0xff, 0xfe, 0x3f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff,
                                                     0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff,
                                                     0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

#define S_HEIGHT 32
#define S_WIDTH 32
static const unsigned char PROGMEM SEAT_bmp[] = { 0x38, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0,
                                                  0x44, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0,
                                                  0x48, 0x0, 0x0, 0x0, 0x38, 0x0, 0x0, 0x0,
                                                  0x10, 0x0, 0x0, 0x0, 0x3C, 0x0, 0x0, 0x0,
                                                  0x42, 0x0, 0x0, 0x0, 0x42, 0x0, 0x0, 0x0,
                                                  0x42, 0x0, 0x0, 0x0, 0x42, 0x0, 0x0, 0x0,
                                                  0x43, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0,
                                                  0x41, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0,
                                                  0x41, 0x80, 0x0, 0x0, 0x40, 0x80, 0x0, 0x0,
                                                  0x40, 0x80, 0x0, 0x0, 0x40, 0x80, 0x0, 0x0,
                                                  0x40, 0xC0, 0x0, 0x0, 0x40, 0x40, 0x0, 0x0,
                                                  0x60, 0x40, 0x0, 0x0, 0x20, 0x40, 0x7F, 0x0,
                                                  0x27, 0x7F, 0xC1, 0x80, 0x3D, 0xC0, 0x0, 0xC0,
                                                  0x28, 0xF8, 0x0, 0x60, 0x2D, 0x88, 0x0, 0x20,
                                                  0x37, 0x0, 0x0, 0x60, 0x1C, 0x0, 0x0, 0x40,
                                                  0xF, 0xFF, 0xFF, 0xC0, 0x15, 0x55, 0x55, 0x40 };


Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
PCF8574 PCF(0x20);

const unsigned long TSec = 1000;
unsigned long Temps_ms;
unsigned long Num_jour;
unsigned long Num_heur;
unsigned long Num_min;

unsigned long currentMillis;  // initialis√© d√®s l'entr√©e dans loop()
unsigned long previousMillis = 0;

const long interval1 = 5000;

int16_t position = 0;
int16_t position1 = 0;
int16_t position2 = 0;

int menu1 = 0;
int menu2 = 0;
int fanM1 = 1;
int htsM1 = 1;
int lumM1 = 1;
int sftrM1 = 1;

int HSlvl = 0;

const char* FAN_HEAT_Status[] = { """", ""OFF"", ""LOW"", ""HI"" };  // les tableaux commencent √† l'indice z√©ro. position est vide afin de ne pas modifier le code
// String FAN_HEAT_Status{4] = {"""", ""OFF"", ""LOW"", ""HI""};                // autre possibilit√© de d√©claration
const char* LIGHT_Status[] = { """", ""OFF"", ""ON"" };
const char* MODE_Status[] = { """", ""PADDLES"", ""SHIFTER"" };
const char* POSITION_Status[] = { ""BACK"", ""OFF"", ""LOW"", ""HI"" };  // celui commence r√©ellement √† z√©ro


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup() {

  WiFi.persistent(false);  //disable saving wifi config into SDK flash area
  WiFi.forceSleepBegin();  //disable AP & station by calling ""WiFi.mode(WIFI_OFF)"" & put modem to sleep

  Wire.begin();

  PCF.begin();
  PCF.selectAll();

  encoder.begin();                                 //set encoders pins as input & enable built-in pullup resistors
  encoderRotary.attach_ms(5, encoderISR);          //call encoderISR()       every 10 milliseconds/0.010 seconds
  encoderButton.attach_ms(600, encoderButtonISR);  //call encoderButtonISR() every 500 milliseconds/0.500 seconds

  for (int i = 0; i < 3; i++) {
    Oled(initVariant());
    display.begin(i2c_Address, true);
    display.clearDisplay();
    display.setTextColor(SH110X_WHITE);
    display.setTextSize(1);
    display.display();
  }
  delay(1000);

  for (int i = -32; i < 618; i += 8) {

    if (i > -32 && i < 138) {
      Oled(0);
      display.clearDisplay();
      display.drawBitmap(i, 22, SEAT_bmp, S_WIDTH, S_HEIGHT, SH110X_WHITE);
      display.display();
    }
    if (i > 122 && i < 298) {
      Oled(1);
      display.clearDisplay();
      display.drawBitmap(i - 160, 22, SEAT_bmp, S_WIDTH, S_HEIGHT, SH110X_WHITE);
      display.display();
    }
    if (i > 282 && i < 458) {
      Oled(2);
      display.clearDisplay();
      display.drawBitmap(i - 320, 22, SEAT_bmp, S_WIDTH, S_HEIGHT, SH110X_WHITE);
      display.display();
    }
    if (i > 442) {
      Oled(3);
      display.clearDisplay();
      display.drawBitmap(i - 480, 22, SEAT_bmp, S_WIDTH, S_HEIGHT, SH110X_WHITE);
      display.display();
    }
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop() {

  currentMillis = millis();
  if ((currentMillis - previousMillis >= interval1) && (menu2 >= 1)) {
    menu1 = 0;
    menu2 = 0;
    position2 = 0;
    //Menu();
    // loop();
  }

  if (menu2 == 0 && position2 == 0) {

    Temps_ms = millis();  // 2^32 secondes = 49.71 jours
    Num_min = (Temps_ms / (TSec * 60)) % 60;
    Num_heur = (Temps_ms / (TSec * 3600)) % 60;
    Num_jour = (Temps_ms / (TSec * 86400));

    PosEnc();

    Oled(0);
    display.clearDisplay();
    display.drawBitmap(0, 0, GT7_bmp, GT7_WIDTH, GT7_HEIGHT, SH110X_WHITE);
    display.display();

    Oled(1);
    display.clearDisplay();
    //display.drawBitmap(0, 0, CAR1_bmp, C1_WIDTH, C1_HEIGHT, SH110X_WHITE);
    display.drawBitmap(0, 0, CAR1_bmp, C1_WIDTH, C1_HEIGHT, SH110X_BLACK, SH110X_WHITE);
    display.display();

    Oled(2);
    display.clearDisplay();
    display.setCursor(5, 16);
    display.print(""FAN"");
    display.setCursor(60, 16);
    display.print(FAN_HEAT_Status[fanM1]);  // utiisatio du tableau indic√© √† la place des switch case

    display.setCursor(5, 28);
    display.print(""HEAT"");
    display.setCursor(60, 28);
    display.print(FAN_HEAT_Status[htsM1]);

    display.setCursor(5, 40);
    display.print(""LIGHTS"");
    display.setCursor(60, 40);
    display.print(LIGHT_Status[lumM1]);

    display.setCursor(5, 52);
    display.print(""MODE"");
    display.setCursor(60, 52);
    display.print(MODE_Status[sftrM1]);

    display.display();

    Oled(3);
    TimerSinceStart();
  } else {

    switch (menu1) {
      case 0: Menu(); break;
      case 1: FanCtrl(); break;
      case 2: HeatSeat(); break;
      case 3: LumCtrl(); break;
      case 4: ShftrP(); break;
    }

    //---------------------------------------
    Oled(0);
    display.clearDisplay();
    display.setTextColor(SH110X_WHITE);
    display.setCursor(68, 0);
    display.print(""FAN Ctrl"");

    if (fanM1 >= 2) {
      display.drawBitmap(0, 0, FAN_bmp, fan_WIDTH, fan_HEIGHT, SH110X_WHITE);
    } else {
      display.drawBitmap(0, 0, FAN_bmp, fan_WIDTH, fan_HEIGHT, SH110X_BLACK, SH110X_WHITE);
    }

    if (menu2 == 1) {
      display.setCursor(68, 33);
      display.print(""-------"");
    }

    if (menu1 == 1) {
      display.setCursor(68, 38);
      display.print(""set to:"");

      display.setCursor(68, 50);
      display.print(POSITION_Status[position2]);
    }

    display.setCursor(80, 20);
    display.print(FAN_HEAT_Status[fanM1]);

    display.display();

    //---------------------------------------
    Oled(1);
    display.clearDisplay();
    display.setTextColor(SH110X_WHITE);
    display.setCursor(68, 0);
    display.print("" Heat Seat"");

    if (htsM1 >= 2) {
      display.drawBitmap(0, 0, HSEAT_bmp, HS_WIDTH, HS_HEIGHT, SH110X_WHITE);
    } else {
      display.drawBitmap(0, 0, HSEAT_bmp, HS_WIDTH, HS_HEIGHT, SH110X_BLACK, SH110X_WHITE);
    }

    if (menu2 == 2) {
      display.setCursor(68, 33);
      display.print(""-------"");
    }

    if (menu1 == 2) {
      display.setCursor(68, 38);
      display.print(""set to:"");

      display.setCursor(68, 50);
      display.print(POSITION_Status[position2]);
    }

    display.setCursor(80, 20);
    display.print(FAN_HEAT_Status[htsM1]);

    display.display();

    //---------------------------------------
    Oled(2);
    display.clearDisplay();
    display.setTextColor(SH110X_WHITE);
    display.setCursor(68, 0);
    display.print("" LIGHTS"");

    if (lumM1 == 2) {
      display.drawBitmap(0, 0, LUMIERES_bmp, lmr_WIDTH, lmr_HEIGHT, SH110X_BLACK, SH110X_WHITE);
    } else {
      display.drawBitmap(0, 0, LUMIERES_bmp, lmr_WIDTH, lmr_HEIGHT, SH110X_WHITE);
    }

    if (menu2 == 3) {
      display.setCursor(68, 33);
      display.print(""-------"");
    }

    if (menu1 == 3) {
      display.setCursor(68, 38);
      display.print(""set to:"");

      display.setCursor(68, 50);

      switch (position2) {  // tableau suppl√©mentaire √† utiliser
        case 0: display.print(""BACK""); break;
        case 1: display.print(""OFF""); break;
        case 2: display.print(""ON""); break;
      }
    }

    display.setCursor(80, 20);
    display.print(LIGHT_Status[lumM1]);

    display.display();

    //---------------------------------------
    Oled(3);
    display.clearDisplay();
    display.setTextColor(SH110X_WHITE);
    display.setCursor(68, 0);
    display.print("" MODE"");

    if (sftrM1 >= 2) {
      display.drawBitmap(0, 0, shifter_bmp, sftr_WIDTH, sftr_HEIGHT, SH110X_WHITE);
    } else {
      display.drawBitmap(0, 0, shifter_bmp, sftr_WIDTH, sftr_HEIGHT, SH110X_BLACK, SH110X_WHITE);
    }

    if (menu2 == 4) {
      display.setCursor(68, 33);
      display.print(""-------"");
    }

    if (menu1 == 4) {
      display.setCursor(68, 38);
      display.print(""set to:"");
      display.setCursor(68, 50);
      display.print(MODE_Status[position2]);
    }

    display.setCursor(70, 20);
    display.print(MODE_Status[sftrM1]);
    display.display();
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Oled(uint8_t bus) {         // Select I2C BUS
  Wire.beginTransmission(0x70);  // Oled address
  Wire.write(1 << bus);          // send byte to select bus
  Wire.endTransmission();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void encoderISR() {
  encoder.readAB();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void encoderButtonISR() {
  encoder.readPushButton();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PosEnc() {
  position = encoder.getPosition();
  if (position / 2 < position1) {
    position2++;
    position1 = position / 2;             // code redondant. appell√© dans les 2 cas, peut √™tre √† la fin des 2 if{}  ?
    previousMillis = currentMillis;       // code redondant
  }
  if (position / 2 > position1) {
    position2--;
    position1 = position / 2;             // code redondant
    previousMillis = currentMillis;       // code redondant
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Menu() {

  PosEnc();

  if (position2 < 1) {
    position2 = 4;
  }
  if (position2 > 4) {
    position2 = 1;
  }

  menu2 = position1;              // dans le code d'origine, menu2 prend toujours la valeur de position1. inutile de paser par un swicth case
  if (encoder.getPushButton()) {  // inutile de v√©rifier si un booleen est √©gal √† un booleen
    menu1 = 1;                    // menu1 prend toujours la valeur de menu2 / position2
    position2 = 0;                // position2 est toujours r√©initialis√© √† 0
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FanCtrl() {

  PosEnc();

  position2 = (position2 < 0) ? 3 : position2 % 4;  // op√©rateur ternaire et fonction modulo

  if (encoder.getPushButton()) {
    if (position2 == 0) {
      menu1 = 0;
      menu2 = 0;
      // position2 = 0;    // pas besoin de le mettre √† 0, il l'est d√©j√†
    } else {
      fanM1 = position2;
    }
  }

  switch (fanM1) {
    case 1:
      PCF.write(4, HIGH);
      PCF.write(5, HIGH);
      break;  // fan OFF
    case 2:
      PCF.write(4, LOW);
      PCF.write(5, HIGH);
      break;  // fan LOW
    case 3:
      PCF.write(4, LOW);
      PCF.write(5, LOW);
      break;  // fan HIGH
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void HeatSeat() {

  PosEnc();

  position2 = (position2 < 0) ? 3 : position2 % 4;  // op√©rateur ternaire et fonction modulo

  if (encoder.getPushButton()) {
    if (position2 == 0) {
      menu1 = 0;
      menu2 = 0;
    } else {
      htsM1 = position2;
    }
  }

  switch (htsM1) {
    case 1:  // siege chauffant OFF
      PCF.write(0, HIGH);
      PCF.write(1, HIGH);
      PCF.write(2, HIGH);
      PCF.write(3, HIGH);
      HSlvl = 0;
      break;
    case 2:                // siege chauffant LOW
      PCF.write(0, LOW);   // +12v GREEN WIRE
      PCF.write(1, LOW);   // +12v GREEN WIRE
      PCF.write(2, HIGH);  // GRAY WIRE NO GROUND ON PIN
      PCF.write(3, HIGH);  // GRAY WIRE NO GROUND ON PIN
      HSlvl = 1;
      break;
    case 3:                // siege chauffant HIGH
      PCF.write(0, HIGH);  // ground GREEN WIRE
      PCF.write(1, HIGH);  // ground GREEN WIRE
      PCF.write(2, LOW);   // +12v GRAY WIRE
      PCF.write(3, LOW);   // +12v GRAY WIRE
      HSlvl = 2;
      break;
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LumCtrl() {

  PosEnc();

  position2 = (position2 < 0) ? 2 : position2 % 3;  // op√©rateur ternaire et fonction modulo

  if (encoder.getPushButton()) {
    if (position2 == 0) {
      menu1 = 0;
      menu2 = 0;
    } else {
      lumM1 = position2;
      PCF.write(0, HIGH);
    }
  }

  switch (lumM1) {
    case 1:  // lumieres 1
      PCF.write(6, HIGH);
      break;
    case 2:  //lumieres 2
      PCF.write(6, LOW);
      break;
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ShftrP() {

  PosEnc();

  position2 = (position2 < 0) ? 2 : position2 % 3;  // op√©rateur ternaire et fonction modulo

  if (encoder.getPushButton()) {
    if (position2 == 0) {
      menu1 = 0;
      menu2 = 0;
    } else {
      sftrM1 = position2;
    }
  }

  switch (sftrM1) {
    case 1:  // lumieres 1
      PCF.write(7, HIGH);
      break;
    case 2:  //lumieres 2
      PCF.write(7, LOW);
      break;
  }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TimerSinceStart() {

  char buffer[32];
  int n = sprintf(buffer, ""%2d    %02d %02d"", Num_jour, Num_heur, Num_min);  // voir documentation C++ sprintf printf  https://cplusplus.com/reference/cstdio/printf/

  display.clearDisplay();
  display.setCursor(18, 16);
  display.print(""Jr    Hr Mn"");
  display.setCursor(18, 28);  // positionnement √† v√©rifier
  display.print(buffer);
  display.display();

  /*
  if (Num_jour < 10) {
    display.print("" "");
  }
  display.print(Num_jour);
  display.print(""    "");
  if (Num_heur < 10) {
    display.print(""0"");
  }
  display.print(Num_heur);
  display.print("":"");
  if (Num_min < 10) {
    display.print(""0"");
  }
  display.print(Num_min);

  display.display();
  */
}"
0r8LrD6D,Method_5_6,Cnvmendoza,C#,Tuesday 26th of March 2024 10:32:47 AM CDT,"public static int CalculateSumOfCubes()
{
    Console.Write(""Input Number of Inputs: "");
    int number_of_inputs = Convert.ToInt32(Console.ReadLine());
    int sum = 0;
    for (int i = 0; i < number_of_inputs; i++)
    {
        Console.Write(""Input Number: "");
        int input = Convert.ToInt32(Console.ReadLine());
        sum += input * input * input;
    }
    return sum;
}

public static double CalculateAverage()
{
    Console.Write(""Input Number of Inputs: "");
    int number_of_inputs = Convert.ToInt32(Console.ReadLine());
    double average = 0;
    int sum = 0;
    for (int i = 0; i < number_of_inputs; i++)
    {
        Console.Write(""Input Number: "");
        int input = Convert.ToInt32(Console.ReadLine());
        sum += input;
    }
    average = sum / number_of_inputs;
    return average;
}"
Atqecsin,Emoji Detector,Osiris1002,Python,Tuesday 26th of March 2024 10:19:51 AM CDT,"import re

text = input()

digits = [int(digit) for digit in re.findall(r""\d"", text)]
cool_threshold = 1
for digit in digits:
    cool_threshold *= digit

print(f""Cool threshold: {cool_threshold}"")

emojis = re.findall(r""((:{2}|\*{2})([A-Z][a-z]{2,})\2)"", text)
cool_emojis = []

for emoji in emojis:
    emoji_name = emoji[2]
    emoji_coolness = sum(ord(char) for char in emoji_name)
    if emoji_coolness >= cool_threshold:
        cool_emojis.append(emoji_name)
print(f""{len(emojis)} emojis found in the text. The cool ones are:"")
for emoji in emojis:
    if emoji[2] in cool_emojis:
        print(emoji[0])"
VCvHqts8,Untitled,ubidefeo,Python,Tuesday 26th of March 2024 09:40:10 AM CDT,"from machine import Timer
timer_asterisco = Timer()

contatore = 0

def azione_timer(tiramisu):
  global contatore
  contatore += 1
  # print('timer chiamato da ', timer_object)
  print('timer!')
  if contatore > 10:
    print('stop al timer')
    tiramisu.deinit()
    

def donare_bustina(a_chi):
  print('ho donato a', a_chi)

timer_asterisco.init(period = 1000, mode = Timer.PERIODIC, callback = azione_timer)
"
HHmAqJqW,l16 BricksScript,coding_giants,C#,Tuesday 26th of March 2024 09:30:21 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BricksScript : MonoBehaviour
{
    //A private variable that can be specified in the inspector
    //The amount of life of our brick
    
    public int life = 1;


    //Every time she comes into contact with something
    private void OnCollisionEnter(Collision collision)
    {
        //If it has a Ball tag
        if(collision.gameObject.tag == ""Ball"")
        {
            //we are removing one life
            life--;
            BrickColor();
            //If lives are equal to or less than 0
            if (life <= 0)
            {
                GameManager.instance.bricks.Remove(this.gameObject);
                GameManager.instance.UpdateUI();
                Destroy(gameObject); //destroy object
            }
        }
    }

    public void SetBrick(int life)
    {
        this.life = life;
        if (life <= 0) Destroy(gameObject);
        BrickColor();
    }

    void BrickColor()
    { 
        Renderer renderer = GetComponent<Renderer>();
        Color[] colors = { Color.white, Color.blue, Color.red, Color.green };
        int colorIndex = Mathf.Clamp(life - 1, 0, colors.Length-1);
        renderer.material.color = colors[colorIndex];
    }
}
"
1s280cdT,zbx_services,rmonakhov,JSON,Tuesday 26th of March 2024 08:59:06 AM CDT,"[
	{
		""serviceid"": ""3"",
		""name"": ""mail1.example.com"",
		""description"": ""–ü–æ—á—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"",
		""parents"": [
			{
				""serviceid"": ""2""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""5"",
		""name"": ""Load balancing"",
		""description"": ""–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"",
		""parents"": [
			{
				""serviceid"": ""1""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""6"",
		""name"": ""ADFS"",
		""description"": ""–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"",
		""parents"": [
			{
				""serviceid"": ""1""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""7"",
		""name"": ""Monitoring"",
		""description"": ""–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"",
		""parents"": [
			{
				""serviceid"": ""1""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""4"",
		""name"": ""Active directory"",
		""description"": ""–°–ª—É–∂–±—ã –¥–æ–º–µ–Ω–∞"",
		""parents"": [
			{
				""serviceid"": ""1""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""2"",
		""name"": ""Mail"",
		""description"": ""–ü–æ—á—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"",
		""parents"": [
			{
				""serviceid"": ""1""
			}
		],
		""problem_tags"": []
	},
	{
		""serviceid"": ""8"",
		""name"": ""App"",
		""description"": """",
		""parents"": [
			{
				""serviceid"": ""4""
			}
		],
		""problem_tags"": [
			{
				""tag"": ""service"",
				""value"": ""ad""
			},
			{
				""tag"": ""sli"",
				""value"": ""app""
			}
		]
	},
	{
		""serviceid"": ""9"",
		""name"": ""DB"",
		""description"": """",
		""parents"": [
			{
				""serviceid"": ""4""
			}
		],
		""problem_tags"": [
			{
				""tag"": ""service"",
				""value"": ""ad""
			},
			{
				""tag"": ""sli"",
				""value"": ""db""
			}
		]
	},
	{
		""serviceid"": ""1"",
		""name"": ""Pilot"",
		""description"": ""–ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å"",
		""parents"": [],
		""problem_tags"": []
	}
]"
FGuH56Eb,Untitled,connor44566,Lua,Tuesday 26th of March 2024 08:50:13 AM CDT,"shell.run(""/rom/programs/http/pastebin.lua"",""get 03yRmzVv flex.lua"")
shell.run(""/rom/programs/http/pastebin.lua"",""get eFJsmAqS receive.lua"")
shell.run(""/rom/programs/http/pastebin.lua"",""get dQJFnnAF dig.lua"")
shell.run(""/rom/programs/http/pastebin.lua"",""get JPmDYdYm quarry.lua"")
shell.run(""/rom/programs/http/pastebin.lua"",""get Ndgnay68 stairs.lua"")
"
2Mkbid8J,Untitled,arch239,SQL,Tuesday 26th of March 2024 08:33:52 AM CDT,"WITH next as (
  SELECT
        user_id,
        start,
        end,
        COALESCE(DATETIME(LAG(end) over (partition by user_id order by start), '15 days') < start, 0) as step
    FROM
        t
),

num as (
  SELECT
      user_id,
      start,
      end,
      sum(step) over (partition by user_id order by start) + 1 as sub_sequence_num
  FROM
      next
)

SELECT
    user_id,
    start,
    end,
    sub_sequence_num,
    dense_rank() over (partition by user_id, sub_sequence_num order by start) as sub_num_in_seq
FROM
    num
ORDER BY
    user_id,
    start"
rcmvBFfy,Untitled,ubidefeo,Python,Tuesday 26th of March 2024 08:26:52 AM CDT,"from machine import I2C, Pin
from mp_button import *
from i2c_lcd import *
from time import sleep

def azione_bottone(pin, azione):
  if azione == Button.PRESSED:
    if posizione == 15 or posizione == 0:
      print('ci hai preso')
    else:
      print('sei lento')

connessione_i2c = I2C(0)
schermo = RGBDisplay(connessione_i2c)
bottone = Button(16, callback = azione_bottone)

posizione = 0
tempo = 0
direzione = 1

schermo.color(200, 200, 200)

while True:
  bottone.update()
  schermo.clear()
  # schermo.write(str(contatore))
  schermo.move(posizione, 0)
  schermo.write('*')
  posizione += direzione
  
  if posizione > 14:
    direzione = -1
  if posizione < 1:
    direzione = 1
  # sleep(0.5)
  
"
Ab7fAUXi,Untitled,Roman9234,Python,Tuesday 26th of March 2024 08:12:29 AM CDT,"colors = [""–∂–µ–ª—Ç—ã–π"", ""—Å–∏–Ω–∏–π"", ""–∫—Ä–∞—Å–Ω—ã–π"", ""–∑–µ–ª–µ–Ω—ã–π"", ""–æ—Ä–∞–Ω–∂–µ–≤—ã–π"", ""–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π""]"
WYUexAhV,112.215.172.241-/sdcard/Premium/useragent_ig.py.py,OBF-XIn,Python,Tuesday 26th of March 2024 08:06:39 AM CDT,"# useragent
import random

class Useragent:
    def __init__(self) -> None:
        pass
        
    def useragent_api(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.dix = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Instagram 61.0.0.19.86 Android ({self.dvc}; 604dpi; 1080x2283; INFINIX MOBILITY LIMITED/Infinix; {str(random.choice(self.infinix))}; qcom; in_ID; 242168925)',
            f'Instagram 61.0.0.19.86 Android ({self.dvc}; 604dpi; 1080x2283; NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; qcom; in_ID; 242168925)',
            f'Instagram 61.0.0.19.86 Android ({self.dvc}; 604dpi; 1080x2283; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; in_ID; 242168925)',
            f'Instagram 61.0.0.19.86 Android ({self.dvc}; 604dpi; 1080x2283; ONEPLUS MOBILITY LIMITED/One; {str(random.choice(self.onpls))}; qcom; in_ID; 242168925)',
            f'Instagram 61.0.0.19.86 Android ({self.dvc}; 604dpi; 1080x2283; OPPO MOBILITY LIMITED/Oppo; {str(random.choice(self.oppo))}; {self.opp}; qcom; in_ID; 242168925)',
            f'Instagram 61.0.0.19.86 Android ({self.dvc}; 604dpi; 1080x2283; VIVO MOBILITY LIMITED/Vivo; {str(random.choice(self.vivo))}; qcom; in_ID; 242168925)',
           ])
       )
        
    def useragent_ajax(self):
        self.chrome = str(random.randint(114,124))
        return(random.choice([
            f'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{self.chrome}.0.0.0 Safari/537.36',
            f'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{self.chrome}.0.0.0 Safari/537.36'
            ])
        )
        


"
kHX1ip8T,LoginRequiredMixin,horozov86,Python,Tuesday 26th of March 2024 08:04:09 AM CDT,"–ò–º–∞–º —Å–ª–µ–¥–Ω–∏—Ç–µ –∏–∑–∏—Å–∫–≤–∞–Ω–∏—è –∑–∞ –º–æ—è –ø—Ä–æ–µ–∫—Ç: ‚Ä¢	The application must have a public part (A part of the website, which is accessible by everyone - un/authenticated users and admins).
‚Ä¢	The application must have a private part (accessible only by authenticated users and admins).
‚Ä¢	The application must have a customized admin site (accessible only by admins):
o	Add at least 5 custom options (in total) to the admin interface (e.g., filters, list display, ordering, etc.).
‚Ä¢	Unauthenticated users (public part) have only 'get' permissions, e.g., landing page, details, about page, and login/ register 'post' permissions.
‚Ä¢	Authenticated users (private part) have full CRUD for all their created content.
‚Ä¢	Admins - at least 2 groups of admins:
o	One must have permission to do full CRUD functionalities (superusers); 
o	The other/s have permission to do limited CRUD functionalities (staff).
o	User roles could be manageable from the admin site.
o	Make sure the role management is secure and error-safe.
 –ü—Ä–∞–≤–∏–ª–Ω–æ –ª–∏ —Ä–∞–∑–±–∏—Ä–∞–º, —á–µ —Ç–∞–∑–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç –º–æ–∂–µ –¥–∞ —Å–µ –ø–æ—Å—Ç–∏–≥–Ω–µ –∫–∞—Ç–æ: 1. –í —Ç–µ–º–ø–ª–µ–π—Ç–∞ —Å navigation bar-a –Ω–∞–ø—Ä–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∞ if else request.user.is_authenticated. 2. –°—ä–∑–¥–∞–¥–µ–º –ì—Ä—É–ø–∏ –≤ admin-a –∏ —Å—ä–æ–±—Ä–∞–∑–Ω–æ —Ö—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ç–∞ –Ω–∞ –≥—Ä—É–ø–∞—Ç–∞ –¥–∞ —Å–µ –¥–æ–±—è—Ç –∫—ä–º –Ω–µ–π –∫–æ–π user –∫–∞–∫–≤–∏ –ø—Ä–∞–≤–∞ —â–µ –∏–º–∞?
ChatGPT
–î–∞, –ø—Ä–∞–≤–∏–ª–Ω–æ —Å—Ç–µ —Ä–∞–∑–±—Ä–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –ø—É–±–ª–∏—á–Ω–∞—Ç–∞ –∏ —á–∞—Å—Ç–Ω–∞—Ç–∞ —á–∞—Å—Ç–∏ –Ω–∞ —É–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–µ–Ω –ø–∞–Ω–µ–ª.

–ó–∞ –ø—É–±–ª–∏—á–Ω–∞—Ç–∞ —á–∞—Å—Ç –Ω–∞ —É–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ, –º–æ–∂–µ—Ç–µ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ request.user.is_authenticated –≤ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∏—è –±–∞—Ä, –∑–∞ –¥–∞ –ø–æ–∫–∞–∂–µ—Ç–µ —Ä–∞–∑–ª–∏—á–Ω–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ, –∫–æ–∏—Ç–æ —Å–∞ –≤–ª–µ–∑–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞, –∏ –Ω–∞ —Ç–µ–∑–∏, –∫–æ–∏—Ç–æ –Ω–µ —Å–∞.

–ó–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ —Ä–æ–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ç–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ –≥—Ä—É–ø–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—è –ø–∞–Ω–µ–ª –Ω–∞ Django. –°—ä–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–∏, –∫–æ–∏—Ç–æ –¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞—Ç —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ –Ω–∏–≤–∞ –Ω–∞ –¥–æ—Å—Ç—ä–ø –∏–ª–∏ —Ä–æ–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ —Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä ""–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏"", ""–ü–µ—Ä—Å–æ–Ω–∞–ª"" –∏ —Ç.–Ω. –°–ª–µ–¥ —Ç–æ–≤–∞ –ø—Ä–∏—Å–≤–æ–µ—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ –∫—ä–º —Ç–µ–∑–∏ –≥—Ä—É–ø–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—è –ø–∞–Ω–µ–ª –∏ –∑–∞–¥–∞–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞ –≤—Å—è–∫–∞ –≥—Ä—É–ø–∞ —Å–ø–æ—Ä–µ–¥ –∏–∑–∏—Å–∫–≤–∞–Ω–∏—è—Ç–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤–∏.

–ó–∞ –¥–∞ —Å–µ —É–ø—Ä–∞–≤–ª—è–≤–∞—Ç —Ä–æ–ª–∏—Ç–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—è –ø–∞–Ω–µ–ª, –º–æ–∂–µ—Ç–µ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ –º–æ–¥—É–ª–∞ Group –∏ Permission –Ω–∞ Django, –∫–æ–∏—Ç–æ –≤–∏ –ø–æ–∑–≤–æ–ª—è–≤–∞—Ç –¥–∞ —Å—ä–∑–¥–∞–¥–µ—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–≤–∞—Ç–µ –≥—Ä—É–ø–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ç–∞ –∑–∞ —Ç–µ–∑–∏ –≥—Ä—É–ø–∏.

–ü—Ä–∏–º–µ—Ä–Ω–æ, –º–æ–∂–µ –¥–∞ –∏–º–∞—Ç–µ —Å–ª–µ–¥–Ω–∏—Ç–µ –≥—Ä—É–ø–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:

–ì—Ä—É–ø–∞ ""–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏"": –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ –≤ —Ç–∞–∑–∏ –≥—Ä—É–ø–∞ –∏–º–∞—Ç –ø—ä–ª–Ω–∏ –ø—Ä–∞–≤–∞ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ, –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ –ø—ä–ª–µ–Ω –¥–æ—Å—Ç—ä–ø –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—è –ø–∞–Ω–µ–ª.
–ì—Ä—É–ø–∞ ""–ü–µ—Ä—Å–æ–Ω–∞–ª"": –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ –≤ —Ç–∞–∑–∏ –≥—Ä—É–ø–∞ –∏–º–∞—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—ä–ø –∏ –º–æ–≥–∞—Ç –¥–∞ –∏–∑–≤—ä—Ä—à–≤–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—è, –∫–∞—Ç–æ —Å—ä–∑–¥–∞–≤–∞—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—Ç –∏–ª–∏ –∏–∑—Ç—Ä–∏–≤–∞—Ç —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ, –Ω–æ –Ω–µ –º–æ–≥–∞—Ç –¥–∞ –ø—Ä–∞–≤—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏ –ø—Ä–æ–º–µ–Ω–∏ –≤ —Å–∞–º–æ—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
–¢–µ–∑–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ —Ä–æ–ª–∏ –º–æ–≥–∞—Ç –¥–∞ –±—ä–¥–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–∏ –∏ —É–ø—Ä–∞–≤–ª—è–≤–∞–Ω–∏ –¥–∏–Ω–∞–º–∏—á–Ω–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏—Ç–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞, –∫–∞—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—è –ø–∞–Ω–µ–ª –Ω–∞ Django.

User
–º–æ—è—Ç base.html –µ {% load static %}
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <link rel=""stylesheet"" href=""{% static 'style/style.css' %}"">
    <link rel=""stylesheet"" href=""{% static 'style/login_user.css' %}"">
    <link rel=""stylesheet"" href=""{% static 'style/register_user.css' %}"">

    <link rel=""icon"" href=""{% static 'images/favicon.png' %}"" type=""image/x-icon"">
    <title>My Holiday</title>
</head>
<body>
<div id=""box"">
    <header>
        <!-- Navigation Bar -->
        <h1>
            <a class=""index-navigation"" href=""{% url 'index' %}""><span>My Holiday</span></a>
        </h1>
        <nav>
            <a href=""{% url 'travelogue_view' %}"">Travelogue</a>
            <a href=""{% url 'create_place' %}"">Add Place</a>
            {% if request.user.is_authenticated %}
                <a href=""{% url 'details profile' pk=request.user.pk %}"">Profile</a>
                <a href=""{% url 'logout user' %}"">Logout</a>
            {% else %}
                <a href=""{% url 'login user' %}"">Login</a>
                <a href=""{% url 'register user' %}"">Register</a>
            {% endif %}
        </nav>
    </header>

    {% block main_content %}
    {% endblock %}

    <footer>&copy;Django project My Holiday. All rights reserved.</footer>
</div>
</body>
</html> –Ω–æ –Ω–µ —Å—ä–º —Å–∏–≥—É—Ä–µ–Ω –¥–∞–ª–∏ –µ –ø—Ä–∞–≤–∏–ª–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–∞–Ω –æ—Ç –≥–ª–µ–¥–Ω–∞ —Ç–æ—á–∫–∞ –Ω–∞ public –∏ private part.
ChatGPT
–°—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ –Ω–∞ –≤–∞—à–∏—è —à–∞–±–ª–æ–Ω base.html –∏–∑–≥–ª–µ–∂–¥–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞ –∑–∞ —É–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ–µ—Ç–æ –∏–º–∞ –∫–∞–∫—Ç–æ –ø—É–±–ª–∏—á–Ω–∞, —Ç–∞–∫–∞ –∏ —á–∞—Å—Ç–Ω–∞ —á–∞—Å—Ç. –ï—Ç–æ –Ω—è–∫–æ–∏ –∞—Å–ø–µ–∫—Ç–∏, –∫–æ–∏—Ç–æ –º–æ–∂–µ—Ç–µ –¥–∞ —Ä–∞–∑–≥–ª–µ–¥–∞—Ç–µ, –∑–∞ –¥–∞ —É–≤–µ—Ä–∏—Ç–µ, —á–µ —à–∞–±–ª–æ–Ω—ä—Ç –µ –ø–æ–¥—Ö–æ–¥—è—â –∑–∞ –≤–∞—à–∏—Ç–µ –Ω—É–∂–¥–∏:

–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ—Ç–æ –º–µ–Ω—é: –í–∞—à–µ—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ –º–µ–Ω—é –∏–∑–≥–ª–µ–∂–¥–∞ –¥–æ–±—Ä–µ. –¢–æ –≤–∫–ª—é—á–≤–∞ –≤—Ä—ä–∑–∫–∏ –∫—ä–º —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∏ –Ω–∞ –≤–∞—à–∏—è —É–µ–± —Å–∞–π—Ç, –∫–∞—Ç–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, –ø—Ä–µ–¥–ª–∞–≥–∞ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ –≤—Ö–æ–¥, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∏–∑—Ö–æ–¥ –∏ –ø—Ä–æ—Ñ–∏–ª.

–ë–ª–æ–∫–æ–≤–µ –∑–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ: –í–∞—à–∏—Ç–µ –±–ª–æ–∫–æ–≤–µ –∑–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ —Å–µ –≤–ø–∏—Å–≤–∞—Ç –ø–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ—Ç–æ –º–µ–Ω—é. –¢–µ —Å–µ —Ä–∞–∑—à–∏—Ä—è–≤–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –æ—Ç —Ç–æ–≤–∞ –∫–∞–∫–≤–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ —â–µ –±—ä–¥–µ –≤–∫–ª—é—á–µ–Ω–æ –≤—ä–≤ –≤—Å—è–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∫–æ–µ—Ç–æ –µ –¥–æ–±—Ä–µ –æ—Ä–≥–∞–Ω–∏–∑–∏—Ä–∞–Ω–æ.

–§—É—Ç—ä—Ä: –í–∞—à–µ—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ –º–µ–Ω—é –∑–∞–≤—ä—Ä—à–≤–∞ —Å —Ñ—É—Ç—ä—Ä, –∫–æ–π—Ç–æ –≤–∫–ª—é—á–≤–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏ –ø—Ä–∞–≤–∞ –∏ –µ–≤–µ–Ω—Ç—É–∞–ª–Ω–æ –¥—Ä—É–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—è—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –±—ä–¥–µ –Ω–∞–ª–∏—á–Ω–∞ –Ω–∞ –≤—Å–∏—á–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∏.

–°—Ç–∞—Ç–∏—á–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ: –ó–∞–±–µ–ª—è–∑–≤–∞–º, —á–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ {% static %} —Ç–µ–≥–æ–≤–µ—Ç–µ –∑–∞ –≤–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ –∫–∞—Ç–æ CSS –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ–µ—Ç–æ –µ –ø—Ä–∞–≤–∏–ª–Ω–æ—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–∏ –≤ Django.

–í –æ–±—â–∏ –ª–∏–Ω–∏–∏, –≤–∞—à–µ—Ç–æ –±–∞–∑–æ–≤–æ HTML –∏–∑–≥–ª–µ–∂–¥–∞ –¥–æ–±—Ä–µ –æ—Ä–≥–∞–Ω–∏–∑–∏—Ä–∞–Ω–æ –∏ –ø–æ–¥—Ö–æ–¥—è—â–æ –∑–∞ —É–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—É–±–ª–∏—á–Ω–∞ –∏ —á–∞—Å—Ç–Ω–∞ —á–∞—Å—Ç. –ê–∫–æ –∏–º–∞—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ –∏–∑–∏—Å–∫–≤–∞–Ω–∏—è –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∏, –∫–æ–∏—Ç–æ –±–∏—Ö—Ç–µ –∏—Å–∫–∞–ª–∏ –¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ, –º–æ–∂–µ –¥–∞ –≥–∏ –≤–∫–ª—é—á–∏—Ç–µ –≤—ä–≤ –≤–∞—à–∏—è –±–∞–∑–æ–≤ —à–∞–±–ª–æ–Ω –≤ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ç–µ—Ö–Ω–∏—Ç–µ –Ω—É–∂–¥–∏.

User
–ó–∞–±–µ–ª—è–∑–∞—Ö –∫–æ–≥–∞—Ç–æ —Ç–µ—Å—Ç–≤–∞—Ö, —á–µ –¥–æ—Ä–∏ –∫–æ–≥–∞—Ç–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –Ω–µ –µ login –º–æ–∂–µ –¥–∞ –∏–∑–≤—ä—Ä—à–∏ Add place, –∫–æ–µ—Ç–æ –Ω–µ –µ –ª–æ–≥–∏—á–Ω–æ –¥–∞ —Å—Ç–∞–≤–∞.
ChatGPT
–ê–∫–æ –∂–µ–ª–∞–µ—Ç–µ –¥–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ –¥–æ—Å—Ç—ä–ø–∞ –¥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –º–µ—Å—Ç–∞ —Å–∞–º–æ –∑–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ü–∏—Ä–∞–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏, –º–æ–∂–µ—Ç–µ –¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç –≤ –∏–∑–≥–ª–µ–¥–∞ —Å–∏ –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º—è—Å—Ç–æ (PlaceCreateView). –ï—Ç–æ –∫–∞–∫ –º–æ–∂–µ –¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç–µ —Ç–æ–≤–∞:

python
Copy code
from django.contrib.auth.mixins import LoginRequiredMixin

class PlaceCreateView(LoginRequiredMixin, views.CreateView):
    # –û—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç–∏ –Ω–∞ –∏–∑–≥–ª–µ–¥–∞...

    # –§—É–Ω–∫—Ü–∏—è—Ç–∞ form_valid —Å–µ –∏–∑–≤–∏–∫–≤–∞, –∫–æ–≥–∞—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∞ –µ –≤–∞–ª–∏–¥–Ω–∞
    def form_valid(self, form):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        if self.request.user.is_authenticated:
            # –ó–∞–ø–∏—Å –Ω–∞ –º—è—Å—Ç–æ—Ç–æ —Å —Ç–µ–∫—É—â–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ü–∏—Ä–∞–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
            place = form.save(commit=False)
            place.user = self.request.user
            place.save()
            return super().form_valid(form)
        else:
            # –í—Ä—ä—â–∞–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∞, –∞–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –∞—É—Ç–µ–Ω—Ç–∏—Ü–∏—Ä–∞–Ω
            return HttpResponseForbidden(""You must be logged in to add a place."")
–¢–æ–≤–∞ –¥–æ–±–∞–≤—è LoginRequiredMixin –∫—ä–º –≤–∞—à–∏—è PlaceCreateView, –∫–æ–µ—Ç–æ –∏–∑–∏—Å–∫–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –¥–∞ –µ –≤–ª–µ–∑–Ω–∞–ª, –ø—Ä–µ–¥–∏ –¥–∞ –º–æ–∂–µ –¥–∞ –∏–º–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –∏–∑–≥–ª–µ–¥–∞. –í —Å–ª—É—á–∞–π, —á–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –∞—É—Ç–µ–Ω—Ç–∏—Ü–∏—Ä–∞–Ω, –∏–∑–≥–ª–µ–¥—ä—Ç —â–µ –≤—ä—Ä–Ω–µ 403 –∑–∞–±—Ä–∞–Ω–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä. –¢–æ–≤–∞ –æ—Å–∏–≥—É—Ä—è–≤–∞, —á–µ —Å–∞–º–æ –∞—É—Ç–µ–Ω—Ç–∏—Ü–∏—Ä–∞–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –º–æ–≥–∞—Ç –¥–∞ –¥–æ–±–∞–≤—è—Ç –º–µ—Å—Ç–∞.

User
–ú–æ–µ—Ç–æ view –µ class PlaceCreateView(views.CreateView):
    form_class = PlaceCreateForm
    model = Place

    # fields = ['name', 'location', 'description', 'category', 'rating', 'image_url']
    template_name = 'destination/place_form.html'
    success_url = reverse_lazy('travelogue_view')



    def form_valid(self, form):
        place = form.save(commit=False)
        place.user = self.request.user
        place.save()
        return super().form_valid(form)
ChatGPT
–ó–∞ –¥–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ –¥–æ—Å—Ç—ä–ø–∞ –¥–æ –∏–∑–≥—Ä–∞–∂–¥–∞–Ω–µ—Ç–æ –Ω–∞ –º–µ—Å—Ç–∞ —Å–∞–º–æ –Ω–∞ –≤—Ö–æ–¥ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ, –≤–∏ —Ç—Ä—è–±–≤–∞ –º–µ—Ö–∞–Ω–∏–∑—ä–º –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∞—Ç–∞ –Ω–∞ –¥–æ—Å—Ç—ä–ø. –ï–¥–∏–Ω –Ω–∞—á–∏–Ω –¥–∞ –≥–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç–µ –µ —á—Ä–µ–∑ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ LoginRequiredMixin, –∫–æ–π—Ç–æ —Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—è –æ—Ç Django, –∑–∞ –¥–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞—Ç–µ, —á–µ —Å–∞–º–æ –≤—Ö–æ–¥–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –∏–º–∞—Ç –¥–æ—Å—Ç—ä–ø –¥–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–µ—Å—Ç–∞.

–ï—Ç–æ –∫–∞–∫ –º–æ–∂–µ—Ç–µ –¥–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ –≤–∞—à–∏—è –∫–æ–¥:

python
Copy code
from django.contrib.auth.mixins import LoginRequiredMixin

class PlaceCreateView(LoginRequiredMixin, views.CreateView):
    form_class = PlaceCreateForm
    model = Place
    template_name = 'destination/place_form.html'
    success_url = reverse_lazy('travelogue_view')

    def form_valid(self, form):
        place = form.save(commit=False)
        place.user = self.request.user
        place.save()
        return super().form_valid(form)
–ö–æ–≥–∞—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ LoginRequiredMixin, –∞–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –≤–ª—è–∑—ä–ª –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞ –∏ —Å–µ –æ–ø–∏—Ç–∞ –¥–∞ –¥–æ—Å—Ç—ä–ø–∏ —Ç–æ–∑–∏ –∏–∑–≥–ª–µ–¥, —Ç–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —â–µ –±—ä–¥–µ –ø—Ä–µ–Ω–∞—Å–æ—á–µ–Ω –∫—ä–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞ –≤—Ö–æ–¥.

–°–µ–≥–∞, —Å–∞–º–æ –≤—Ö–æ–¥–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ —â–µ –∏–º–∞—Ç –¥–æ—Å—Ç—ä–ø –¥–æ –∏–∑–≥—Ä–∞–∂–¥–∞–Ω–µ—Ç–æ –Ω–∞ –º–µ—Å—Ç–∞.

User
–º–æ–≥–∞ –ª–∏ –¥–∞ –≥–æ –Ω–∞–ø—Ä–∞–≤—è –∏ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ loginrequired
ChatGPT
–î–∞, –º–æ–∂–µ—Ç–µ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ login_required –∑–∞ –¥–∞ –ø–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ —Å—ä—â–∏—è –µ—Ñ–µ–∫—Ç. –ï—Ç–æ –∫–∞–∫ –±–∏—Ö—Ç–µ –≥–æ –Ω–∞–ø—Ä–∞–≤–∏–ª–∏:

python
Copy code
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator

@method_decorator(login_required, name='dispatch')
class PlaceCreateView(views.CreateView):
    form_class = PlaceCreateForm
    model = Place
    template_name = 'destination/place_form.html'
    success_url = reverse_lazy('travelogue_view')

    def form_valid(self, form):
        place = form.save(commit=False)
        place.user = self.request.user
        place.save()
        return super().form_valid(form)
–¢–æ–∑–∏ –∫–æ–¥ –ø–æ—Å—Ç–∏–≥–∞ —Å—ä—â–∏—è —Ä–µ–∑—É–ª—Ç–∞—Ç –∫–∞—Ç–æ –ø—Ä–µ–¥–∏—à–Ω–∏—è –ø—Ä–∏–º–µ—Ä, –∫–∞—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ login_required –≤—ä—Ä—Ö—É –º–µ—Ç–æ–¥–∞ dispatch() –Ω–∞ –∫–ª–∞—Å–∞. –¢–æ–≤–∞ —â–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞, —á–µ –∏–∑–≥–ª–µ–¥—ä—Ç —â–µ –±—ä–¥–µ –¥–æ—Å—Ç—ä–ø–µ–Ω —Å–∞–º–æ –∑–∞ –≤—Ö–æ–¥–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏.

User
–í –º–æ—è Application –∏–º–∞–º –±—É—Ç–æ–Ω TRAVELOGUE, –∫–æ–π—Ç–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–∞ –≤—Å–∏—á–∫–∏ –¥–æ–±–∞–≤–µ–Ω–∏ –º–µ—Å—Ç—Ä–∞ (places) –æ—Ç –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏. –í—Å—è–∫–æ –µ–¥–Ω–æ —Ç–∞–∫–æ–≤–∞ –º—è—Å—Ç–æ –∏–º–∞ —Å—ä–æ—Ç–≤–µ—Ç–Ω–æ –±—É—Ç–æ–Ω Edit –∏ Delete. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–º, —á–µ –∑–∞ –¥–∞ —Å–µ –±—ä–¥–∞—Ç Edit –∏ Delete —Ç–µ–∑–∏ –º–µ—Å—Ç–∞ –æ—Ç –Ω–µ authenticated user —Å—ä—â–æ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –Ω–∞—Å–ª–µ–¥ LoginRequiredMixin –æ—Ç view-—Ç–æ –∑–∞ Edit place –∏ –∑–∞ Delete place?
ChatGPT
–î–∞, –∑–∞ –¥–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ –¥–æ—Å—Ç—ä–ø–∞ –¥–æ –±—É—Ç–æ–Ω–∏—Ç–µ ""Edit"" –∏ ""Delete"" –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –º–µ—Å—Ç–∞—Ç–∞ —Å–∞–º–æ –¥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ü–∏—Ä–∞–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏, –µ –¥–æ–±—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–∞ –Ω–∞—Å–ª–µ–¥–∏—Ç–µ –≤–∞—à–∏—è –∏–∑–≥–ª–µ–¥ –æ—Ç LoginRequiredMixin. –¢–æ–≤–∞ —â–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞, —á–µ —Å–∞–º–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ, –∫–æ–∏—Ç–æ —Å–∞ –≤–ª–µ–∑–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞, —â–µ –∏–º–∞—Ç –¥–æ—Å—Ç—ä–ø –¥–æ —Ç–µ–∑–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∏.

–ï—Ç–æ –∫–∞–∫ –º–æ–∂–µ—Ç–µ –¥–∞ –≥–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç–µ:

python
Copy code
from django.contrib.auth.mixins import LoginRequiredMixin

class PlaceUpdateView(LoginRequiredMixin, views.UpdateView):
    # –≤–∞—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏–∫–∞ –∑–∞ –∏–∑–≥–ª–µ–¥–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º—è—Å—Ç–æ

class PlaceDeleteView(LoginRequiredMixin, views.DeleteView):
    # –≤–∞—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏–∫–∞ –∑–∞ –∏–∑–≥–ª–µ–¥–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –º—è—Å—Ç–æ
–ö–∞—Ç–æ –Ω–∞—Å–ª–µ–¥–∏—Ç–µ LoginRequiredMixin, –≤–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞—Ç–µ, —á–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ —Ç—Ä—è–±–≤–∞ –¥–∞ –≤–ª—è–∑–∞—Ç –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞, –ø—Ä–µ–¥–∏ –¥–∞ –º–æ–≥–∞—Ç –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—Ç —Ç–µ–∑–∏ –∏–∑–≥–ª–µ–¥–∏. –¢–æ–≤–∞ –æ—Å–∏–≥—É—Ä—è–≤–∞ –ø–æ–≤–µ—Ä–∏—Ç–µ–ª–Ω–æ—Å—Ç –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç –Ω–∞ –≤–∞—à–µ—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

User
–ö–∞–∫ –º–æ–≥–∞ –¥–∞ –Ω–∞–ø—Ä–∞–≤—è –ª–æ–≥–∏–∫–∞—Ç–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç, –∫–æ–π—Ç–æ –≤ –º–æ–º–µ–Ω—Ç–∞ –µ log in –¥–∞ –Ω–µ –º–æ–∂–µ –¥–∞ Edit –∏ Delete —á—É–∂–¥–∏ –º–µ—Å—Ç–∞, –Ω–∞ –¥—Ä—É–≥–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏, –∞ —Å–∞–º–æ —Å–≤–æ–µ—Ç–æ?
ChatGPT
–ó–∞ –¥–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ—Ç–æ –∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–µ—Å—Ç–∞ —Å–∞–º–æ –¥–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ, –∫–æ–∏—Ç–æ —Å–∞ —Å—ä–∑–¥–∞–ª–∏ —Å—ä–æ—Ç–≤–µ—Ç–Ω–æ—Ç–æ –º—è—Å—Ç–æ, –º–æ–∂–µ—Ç–µ –¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ä–≤ –≤–∞—à–∏—Ç–µ –∏–∑–≥–ª–µ–¥–∏ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ.

–ü—Ä–∏ –∏–∑–≥–ª–µ–¥–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ (PlaceUpdateView) –∏ –∏–∑–≥–ª–µ–¥–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ (PlaceDeleteView) —Ç—Ä—è–±–≤–∞ –¥–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç–µ –¥–∞–ª–∏ —Ç–µ–∫—É—â–∏—è—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å—ä–≤–ø–∞–¥–∞ —Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, –∫–æ–π—Ç–æ –µ —Å—ä–∑–¥–∞–ª –º—è—Å—Ç–æ—Ç–æ, –∫–æ–µ—Ç–æ —Å–µ –æ–ø–∏—Ç–≤–∞—Ç–µ –¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞—Ç–µ –∏–ª–∏ –∏–∑—Ç—Ä–∏–µ—Ç–µ.

–ï—Ç–æ –∫–∞–∫ –º–æ–∂–µ—Ç–µ –¥–∞ –≥–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç–µ:

python
Copy code
from django.contrib.auth.mixins import LoginRequiredMixin
from django.http import Http404

class PlaceUpdateView(LoginRequiredMixin, views.UpdateView):
    # –≤–∞—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏–∫–∞ –∑–∞ –∏–∑–≥–ª–µ–¥–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º—è—Å—Ç–æ

    def get_object(self, queryset=None):
        # –ü–æ–ª—É—á–∞–≤–∞–º–µ –º—è—Å—Ç–æ—Ç–æ, –∫–æ–µ—Ç–æ —Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞
        place = super().get_object(queryset=queryset)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ —Å—ä–∑–¥–∞–ª —Ç–æ–≤–∞ –º—è—Å—Ç–æ
        if place.user != self.request.user:
            raise Http404(""You are not allowed to edit this place."")

        return place

class PlaceDeleteView(LoginRequiredMixin, views.DeleteView):
    # –≤–∞—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏–∫–∞ –∑–∞ –∏–∑–≥–ª–µ–¥–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –º—è—Å—Ç–æ

    def get_object(self, queryset=None):
        # –ü–æ–ª—É—á–∞–≤–∞–º–µ –º—è—Å—Ç–æ—Ç–æ, –∫–æ–µ—Ç–æ —Å–µ –∏–∑—Ç—Ä–∏–≤–∞
        place = super().get_object(queryset=queryset)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ —Å—ä–∑–¥–∞–ª —Ç–æ–≤–∞ –º—è—Å—Ç–æ
        if place.user != self.request.user:
            raise Http404(""You are not allowed to delete this place."")

        return place
–¢–∞–∑–∏ –ª–æ–≥–∏–∫–∞ —â–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞, —á–µ —Å–∞–º–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç, –∫–æ–π—Ç–æ –µ —Å—ä–∑–¥–∞–ª –¥–∞–¥–µ–Ω–æ –º—è—Å—Ç–æ, —â–µ –∏–º–∞ –ø—Ä–∞–≤–æ –¥–∞ –≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞ –∏–ª–∏ –∏–∑—Ç—Ä–∏–≤–∞, –∞ –≤—Å–µ–∫–∏ –¥—Ä—É–≥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –Ω—è–º–∞ –¥–∞ –º–æ–∂–µ –¥–∞ –≥–æ –Ω–∞–ø—Ä–∞–≤–∏."
n8RE9SKj,generator1.yaml,G0nz0uk,YAML,Tuesday 26th of March 2024 08:01:16 AM CDT,"
---
auths:
  cisco_v2:
    version: 2
    community: public
  aruba_v2:
    version: 2
    community: public
  extreme_v2:
    version: 2
    community: public

modules:
  # Default IF-MIB interfaces table with ifIndex.
  if_mib:
    walk: [sysName, sysUpTime, interfaces, ifXTable]
    lookups:
      - source_indexes: [ifIndex]
        lookup: ifAlias
      - source_indexes: [ifIndex]
        # Uis OID to avoid conflict with PaloAlto PAN-COMMON-MIB.
        lookup: 1.3.6.1.2.1.2.2.1.2 # ifDescr
      - source_indexes: [ifIndex]
        # Use OID to avoid conflict with Netscaler NS-ROOT-MIB.
        lookup: 1.3.6.1.2.1.31.1.1.1.1 # ifName
    overrides:
      ifAlias:
        ignore: true # Lookup metric
      ifDescr:
        ignore: true # Lookup metric
      ifName:
        ignore: true # Lookup metric
      ifType:
        type: EnumAsInfo"
Q2ZKcNdy,Vendor Registration Date,palsushobhan,PHP,Tuesday 26th of March 2024 07:56:29 AM CDT,"add_shortcode( 'vendor_registration_date', 'vendor_registration_date_shortcode' );

function vendor_registration_date_shortcode( $attr ) {
   global $post;
   $store_id = '';
   if ( isset( $attr['id'] ) && ! empty( $attr['id'] ) ) {
       $store_id = absint( $attr['id'] );
   }
   if ( wcfm_is_store_page() ) {
       $wcfm_store_url = get_option( 'wcfm_store_url', 'store' );
       $store_name = apply_filters( 'wcfmmp_store_query_var', get_query_var( $wcfm_store_url ) );
       $store_id = 0;
       if ( ! empty( $store_name ) ) {
           $store_user = get_user_by( 'slug', $store_name );
           $store_id = $store_user->ID;
       }
   }
   if ( is_product() ) {
       $store_id = $post->post_author;
   }
   if( !$store_id ) return;
   $register_on = abs( get_user_meta( $store_id, 'wcfm_register_on', true ) );
   $today = strtotime( ""now"" );
   $diff = abs( $today - $register_on );
   $years = floor( $diff / (365 * 24 * 60 * 60) );
   $months = floor( ($diff - $years * 365 * 24 * 60 * 60) / (30 * 24 * 60 * 60) );
   $days = floor( ($diff - $years * 365 * 24 * 60 * 60 - $months * 30 * 24 * 60 * 60) / (24 * 60 * 60) );
   $total_duration = '';
   if ( $years || $months || $days ) {
       if ( $years )
           $total_duration .= sprintf( _n( '%s year ', '%s years ', $years ), $years );
       if ( $months )
           $total_duration .= sprintf( _n( '%s month ', '%s months ', $months ), $months );
       if ( $days )
           $total_duration .= sprintf( _n( '%s day ', '%s days ', $days ), $days );
       return sprintf( 'Joined %sago', $total_duration );
   }
   return 'Joined Today';
}"
nN2VdJVu,snowybot,coinwalk,JavaScript,Tuesday 26th of March 2024 07:34:42 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var qwidy = 30000; //this is your divide for basebet;
var raft = (qwidy/10);
var monkey = (Number((olsenest/qwidy).toFixed(8)));
var bolux = (monkey);
var tens = (monkey*10);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var feeble = parseFloat(((Math.floor(olsenest/tens))*tens));
var olsen = 0;
var olfer = 0;
var awesome = parseFloat(feeble);
var belance = olsenest;
var nobby = olsenest;

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


async function go(){  
await sleep(1000);
belance = document.getElementById('pct_balance').value;
var dog = ((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
feeble = ((Math.floor(belance/tens))*tens);
if ((belance>(feeble+sevens))&&(belance<(feeble+eights))&&(belance!=olsen)&&(belance!=olfer)&&(belance>nobby)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
    nobby = parseFloat(belance);
}
if ((belance>(feeble+sevens))&&(belance<(feeble+eights))&&(belance!=olsen)&&(belance!=olfer)&&(belance<nobby)){
    bolux = bolux*2;
    olfer = parseFloat(belance);
    nobby = parseFloat(belance);
}
if (((belance/raft)<=bolux)&&(belance<(feeble+sevens))){
    bolux = (monkey);
    olsen = 0;
    olfer = 0;
    nobby = parseFloat(belance);
}
if (belance/raft)<=(monkey*3)){
olsenest = parseFloat(belance);
monkey = (Number((olsenest/qwidy).toFixed(8)));
bolux = (monkey);
tens = (monkey*10);
sevens = (monkey*6.9);
eights = (monkey*7.9);
feeble = ((Math.floor(belance/tens))*tens);
olsen = 0;
olfer = 0;
nobby = parseFloat(belance);
awesome = parseFloat(feeble);
}
if (belance>=(awesome+(tens*4))){
olsenest = parseFloat(belance);
monkey = (Number((olsenest/qwidy).toFixed(8)));
bolux = (monkey);
tens = (monkey*10);
sevens = (monkey*6.9);
eights = (monkey*7.9);
feeble = ((Math.floor(belance/tens))*tens);
olsen = 0;
olfer = 0;
nobby = parseFloat(belance);
awesome = parseFloat(feeble);
}
if (belance>=144000){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
await go(); 
}


go();"
DsEd7deE,snowybot,coinwalk,JavaScript,Tuesday 26th of March 2024 07:33:07 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var qwidy = 30000; //this is your divide for basebet;
var raft = (qwidy/10);
var monkey = (Number((olsenest/qwidy).toFixed(8)));
var bolux = (monkey);
var tens = (monkey*10);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var feeble = parseFloat(((Math.floor(olsenest/tens))*tens));
var olsen = 0;
var olfer = 0;
var awesome = parseFloat(feeble);
var belance = olsenest;
var nobby = olsenest;

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


async function go(){  
await sleep(1000);
belance = document.getElementById('pct_balance').value;
var dog = ((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
feeble = ((Math.floor(belance/tens))*tens);
if ((belance>(feeble+sevens))&&(belance<(feeble+eights))&&(belance!=olsen)&&(belance!=olfer)&&(belance>nobby)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
    nobby = parseFloat(belance);
}
if ((belance>(feeble+sevens))&&(belance<(feeble+eights))&&(belance!=olsen)&&(belance!=olfer)&&(belance<nobby)){
    bolux = bolux*2;
    olfer = parseFloat(belance);
    nobby = parseFloat(belance);
}
if (((belance/raft)<=bolux)&&(belance<(feeble+sevens))){
    bolux = (monkey);
    olsen = 0;
    olfer = 0;
    nobby = parseFloat(belance);
}
if (belance/raft)<=(monkey*3)){
olsenest = parseFloat(belance);
monkey = (Number((olsenest/qwidy).toFixed(8)));
bolux = (monkey);
tens = (monkey*10);
sevens = (monkey*6.9);
eights = (monkey*7.9);
feeble = ((Math.floor(belance/tens))*tens);
olsen = 0;
olfer = 0;
fart = 4;
nobby = parseFloat(belance);
awesome = parseFloat(feeble);
}
if (belance>=(awesome+(tens*4))){
olsenest = parseFloat(belance);
monkey = (Number((olsenest/qwidy).toFixed(8)));
bolux = (monkey);
tens = (monkey*10);
sevens = (monkey*6.9);
eights = (monkey*7.9);
feeble = ((Math.floor(belance/tens))*tens);
olsen = 0;
olfer = 0;
fart = 4;
nobby = parseFloat(belance);
awesome = parseFloat(feeble);
}
if (belance>=144000){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
await go(); 
}


go();"
GyLKqLa0,redroute,Archer2o2x,Lua,Tuesday 26th of March 2024 07:31:41 AM CDT,"local function route(route, value, side)

    local isRednetOn = rednet.isOpen()

    local message = textutils.serialise( { route = route, value = value } )

    if not isRednetOn then
        if side == nil then
            peripheral.find(""modem"", rednet.open)
        else
            if not peripheral.isPresent(side) then
                return
            end
            rednet.open(side)
        end
    end

    rednet.broadcast(message, ""Red Router v1.0"")

end

return { route = route }"
pWWvEVPf,defaults,Archer2o2x,Lua,Tuesday 26th of March 2024 07:30:20 AM CDT,"return {
    ProjectileDrag = 0.99, -- Drag per tick
    ProjectileGravity = 0.05, -- Gravity per Tick

    ArtilleryCharges = 8, -- How many charges to propel the payload?
    ArtilleryBarrelLength = 31, -- How long is the barrel?
    ArtilleryDefaultDirection = {x=0, y=0, z=1}, -- What is the default orientation of the barrel in global space?
    ArtilleryDefaultAimSpeed = 4,
    ArtilleryDefaultPosition = {x=0, y=0, z=0}, -- Defaults the position so I don't have to build a gps beacon to test this
    ArtilleryMountOffset = {x=0, y=0, z=-8},

    ProgramFireSide = ""Fire"", -- The side used to fire the cannon
    ProgramResetSide = ""Reset"", -- The side used to reset the cannon for reloading
    ProgramVerticalSide = ""Vert"", -- The side used to aim the cannon vertically
    ProgramVerticalReverseSide = ""ReverseVert"", -- The side used to reverse the direction of aim vertically
    ProgramHorizontalSide = ""Hori"", -- The side used to aim the cannon horizontally
    ProgramHorizontalReverseSide = ""ReverseHori"", -- The side used to reverse the direction of aim horizontally
    ProgramReloadSide = ""Reload"", -- The side used to reload the artillery after firing
    ProgramCoordinateMode = ""Global""  -- The coordinate space to be used
}
"
nkWsHcS5,vec,Archer2o2x,Lua,Tuesday 26th of March 2024 07:28:19 AM CDT,"-- A library which provides vectors
-- Helps to track blocks in relation to each other

local function vec(x, y, z)

    return {

        x = x,
        y = y,
        z = z

    }

end

local function add(a, b)

    return vec(a.x + b.x, a.y + b.y, a.z + b.z)

end

local function sub(a, b)

    return vec(a.x - b.x, a.y - b.y, a.z - b.z)

end

local function mult(vector, factor)

    return vec(vector.x * factor, vector.y * factor, vector.z * factor)

end

local function div(vector, factor)

    return vec(vector.x / factor, vector.y / factor, vector.z / factor)

end

local function magnitude(input)
    
    return math.sqrt(input.x ^ 2 + input.y ^ 2 + input.z ^ 2)

end

local function manhattan(input)

    return math.abs(input.x) + math.abs(input.y) + math.abs(input.z)

end

local function left(input)

    return vec(-input.z, input.y, input.x)

end

local function right(input)

    return vec(input.z, input.y, -input.x)
    
end

local function reverse(input)

    return vec(-input.x, input.y, -input.z)

end

local function distanceEuclidean(a, b)

    return magnitude(sub(a, b))

end

local function distanceManhattan(a, b)

    return manhattan(sub(a, b))

end

local function equals(a, b)

    print(a.x, a.y, a.z, b.x, b.y, b.z)

    return a.x == b.x and a.y == b.y and a.z == b.z

end

return {

    vec = vec,

    zero = vec(0, 0, 0),
    one = vec(1, 1, 1),

    left = vec(1, 0, 0),
    right = vec(-1, 0, 0),
    up = vec(0, 1, 0),
    down = vec(0, -1, 0),
    forward = vec(0, 0, 1),
    back = vec(0, 0, -1),

    add = add,
    sub = sub,
    mult = mult,
    div = div,

    magnitude = magnitude,
    manhattan = manhattan,

    turnLeft = left,
    turnRight = right,
    turnAround = reverse,

    distanceEuclidean = distanceEuclidean,
    distanceManhattan = distanceManhattan,
    
    equals = equals

}"
2t1Tv39x,Untitled,Alekss94,C#,Tuesday 26th of March 2024 07:27:59 AM CDT,"1x Lua error in aura 'ImprovedTalentLoadouts Loadout': Trigger 1
WeakAuras Version: 5.12.5
Aura Version: 1.0.0
ImprovedTalentLoadouts/API.lua:18: attempt to index field 'charDB' (a nil value)
[string ""@ImprovedTalentLoadouts/API.lua""]:18: in function `GetCurrentLoadout'
[string ""return function(states, event)""]:3: in function <[string ""return function(states, event)""]:1>
[string ""=[C]""]: in function `xpcall'
[string ""@WeakAuras/GenericTrigger.lua""]:635: in function <WeakAuras/GenericTrigger.lua:620>
[string ""@WeakAuras/GenericTrigger.lua""]:1052: in function `ScanWithFakeEvent'
[string ""@WeakAuras/GenericTrigger.lua""]:1395: in function `LoadDisplays'
[string ""@WeakAuras/WeakAuras.lua""]:1997: in function `LoadDisplays'
[string ""@WeakAuras/WeakAuras.lua""]:1781: in function <WeakAuras/WeakAuras.lua:1621>
[string ""@WeakAuras/WeakAuras.lua""]:1974: in function `Resume'
[string ""@WeakAuras/WeakAuras.lua""]:1252: in function <WeakAuras/WeakAuras.lua:1211>

Locals:
self = <table> {
 GetExportStringForCurrentTree = <function> defined @ImprovedTalentLoadouts/API.lua:25
 EnumerateSpecLoadouts = <function> defined @ImprovedTalentLoadouts/API.lua:4
 GetCurrentLoadout = <function> defined @ImprovedTalentLoadouts/API.lua:17
}
(*temporary) = nil
(*temporary) = nil
(*temporary) = nil
(*temporary) = ""attempt to index field 'charDB' (a nil value)""
TalentLoadouts = <table> {
 CheckForVersionUpdates = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:275
 CreateSpecButtons = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:2802
 DeleteAllLoadouts = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1746
 UpdateSpecButtons = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:2881
 ImportCategory = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:900
 UpdateSpecID = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:285
 UpdateCurrentExportString = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:774
 OnLoadoutFail = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:761
 OnUnknownLoadoutSuccess = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:731
 UpdateActionBar = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:300
 InitializeDropdown = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:2766
 UpdateMacros = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:2910
 RenameLoadout = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1304
 ImportClassLoadout = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1462
 UpdateWithString = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1211
 AddSubCategoriesToImportDropdown = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1751
 AddSubCategoriesToCreateDropdown = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1774
 LoadLoadoutByName = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:790
 InitializeTalentLoadout = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:395
 UpdateActionBars = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1545
 InitializeButtons = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:2842
 ImportSpecLoadout = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1420
 InitializeHooks = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:2715
 DeleteLoadout = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1253
 OnLoadoutSuccess = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:697
 CheckDBIntegrity = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:226
 RenameCategory = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1016
 LoadActionBar = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:1601
 UpdateDropdownText = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:2686
 Print = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:2906
 UpdateCategoryIterator = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:324
 UpdateDataObj = <function> defined @ImprovedTalentLoadouts/ImprovedTalentLoadouts.lua:505
 InitializeTalentLoadouts = "
hWQyu1U9,"FSB!!!!! –°–ü–†–ò–ù–¢ ‚Ññ 6 | –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º –∏ —É—Å–∫–æ—Ä—è–µ–º | –£—Ä–æ–∫ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—ë –ª–∏ —É—Å–∫–æ—Ä–∏–ª–∏",miscln,C++,Tuesday 26th of March 2024 07:15:46 AM CDT,"https://www.police.uk/tua/tell-us-about/ath/possible-terrorist-activity/report-possible-terrorist-activity2/report-possible-terrorist-activity/Complete?subid=321387d2-b8eb-418c-8038-42db6cc83c35
Quickly exit this site by pressing the Escape key
Leave this site
Cookies
Your cookie preferences have been saved. You can update your cookie settings at any time on the cookies page.

Close
Skip to main content

Skip to main navigation

Skip to form
puk-logo
Search this website
Search
Search

Contact us	
Services and information	
Support	
Policing in the UK	
Performance	
Your area
 Tell us about possible terrorist activity
Report possible terrorist activity
Complete
Thank you
We‚Äôll review your report and get back to you if necessary.

Your receipt code is below. Please keep it in case you need to contact us about this report again.

ATH-3898-24-15000-000

For security reasons we haven't emailed your report to you. To download a copy, please use the button below.

 Download a copy

More on this topic
Terrorism in the UK
Footer navigation
Police.uk
Contact us
Find a police force
Feedback about this website
Cookies
Terms and conditions
Privacy
Accessibility
About the Open Government Licence
Information and services
Online services
Careers and volunteering
Crime prevention advice
Data downloads and API
Support
Partners
NPCC
APCC
Ask the police
Ministry of Justice - Victim and Witness Information Service
Victim Support
Language
Cymraeg
¬© Copyright 2024. All content rights reserved.

All data is available under the Open Government Licence v3.0 unless otherwise stated.



log_duration.h

#pragma once

#include <chrono>
#include <iostream>

#define PROFILE_CONCAT_INTERNAL(X, Y) X##Y
#define PROFILE_CONCAT(X, Y) PROFILE_CONCAT_INTERNAL(X, Y)
#define UNIQUE_VAR_NAME_PROFILE PROFILE_CONCAT(profileGuard, __LINE__)
#define LOG_DURATION(x) LogDuration UNIQUE_VAR_NAME_PROFILE(x)

class LogDuration {
public:
    // –∑–∞–º–µ–Ω–∏–º –∏–º—è —Ç–∏–ø–∞ std::chrono::steady_clock
    // —Å –ø–æ–º–æ—â—å—é using –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    using Clock = std::chrono::steady_clock;

    LogDuration(const std::string& id) : id_(id) {
    }

    ~LogDuration() {
        using namespace std::chrono;
        using namespace std::literals;

        const auto end_time = Clock::now();
        const auto dur = end_time - start_time_;
        std::cerr << id_ << "": ""s << duration_cast<milliseconds>(dur).count() << "" ms""s << std::endl;
    }

private:
    const std::string id_;
    const Clock::time_point start_time_ = Clock::now();
};

***************************************************************************************************************************************
main.cpp

#include <chrono>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <algorithm>
#include ""log_duration.h""

using namespace std;

vector<int> ReverseVector(const std::vector<int>& source_vector) {
    std::vector<int> res(source_vector.size());
    std::reverse_copy(source_vector.begin(), source_vector.end(), res.begin());
    return res;
}

int CountPops(const vector<int>& source_vector, int begin, int end) {
    int res = 0;

    for (int i = begin; i < end; ++i) {
        if (source_vector[i]) {
            ++res;
        }
    }

    return res;
}

void AppendRandom(vector<int>& v, int n) {
    v.reserve(n);
    for (int i = 0; i < n; ++i) {
        // –ø–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ rand.
        // —Å –ø–æ–º–æ—â—å—é (rand() % 2) –ø–æ–ª—É—á–∏–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0..1.
        // –≤ C++ –∏–º–µ—é—Ç—Å—è –±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª,
        // –Ω–æ –≤ –¥–∞–Ω–Ω–æ–º —É—Ä–æ–∫–µ –Ω–µ –±—É–¥–µ–º –∏—Ö –∫–∞—Å–∞—Ç—å—Å—è
        v.push_back(rand() % 2);
    }
}

void Operate() {
    {
        LOG_DURATION(""Total"");

        vector<int> random_bits;

        // –æ–ø–µ—Ä–∞—Ü–∏—è << –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª —ç—Ç–æ —Å–¥–≤–∏–≥ –≤—Å–µ—Ö –±–∏—Ç –≤ –¥–≤–æ–∏—á–Ω–æ–π
        // –∑–∞–ø–∏—Å–∏ —á–∏—Å–ª–∞. –ó–∞–ø–∏—à–µ–º —Å –µ—ë –ø–æ–º–æ—â—å—é —á–∏—Å–ª–æ 2 –≤ —Å—Ç–µ–ø–µ–Ω–∏ 17 (131072)
        static const int N = 1 << 17;

        // –∑–∞–ø–æ–ª–Ω–∏–º –≤–µ–∫—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ 0 –∏ 1
        {
            LOG_DURATION(""Append random"");
            AppendRandom(random_bits, N);
        }

        vector<int> reversed_bits;
        // –ø–µ—Ä–µ–≤–µ—Ä–Ω—ë–º –≤–µ–∫—Ç–æ—Ä –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä—ë–¥
        {
            LOG_DURATION(""Reverse"");
            reversed_bits = ReverseVector(random_bits);
        }

        {
            LOG_DURATION(""Counting"");
            for (int i = 1, step = 1; i <= N; i += step, step *= 2) {
                double rate = CountPops(reversed_bits, 0, i) * 100. / i;
                cout << ""After ""s << i << "" bits we found ""s << rate << ""% pops""s << endl;
            }
        }
    }
}

int main() {
    Operate();
}"
jDJSTuhs,–û–û–ü_0_–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ !!!!!! FSB,miscln,Python,Tuesday 26th of March 2024 07:15:23 AM CDT,"https://www.police.uk/tua/tell-us-about/ath/possible-terrorist-activity/report-possible-terrorist-activity2/report-possible-terrorist-activity/Complete?subid=321387d2-b8eb-418c-8038-42db6cc83c35
Quickly exit this site by pressing the Escape key
Leave this site
Cookies
Your cookie preferences have been saved. You can update your cookie settings at any time on the cookies page.

Close
Skip to main content

Skip to main navigation

Skip to form
puk-logo
Search this website
Search
Search

Contact us	
Services and information	
Support	
Policing in the UK	
Performance	
Your area
 Tell us about possible terrorist activity
Report possible terrorist activity
Complete
Thank you
We‚Äôll review your report and get back to you if necessary.

Your receipt code is below. Please keep it in case you need to contact us about this report again.

ATH-3898-24-15000-000

For security reasons we haven't emailed your report to you. To download a copy, please use the button below.

 Download a copy

More on this topic
Terrorism in the UK
Footer navigation
Police.uk
Contact us
Find a police force
Feedback about this website
Cookies
Terms and conditions
Privacy
Accessibility
About the Open Government Licence
Information and services
Online services
Careers and volunteering
Crime prevention advice
Data downloads and API
Support
Partners
NPCC
APCC
Ask the police
Ministry of Justice - Victim and Witness Information Service
Victim Support
Language
Cymraeg
¬© Copyright 2024. All content rights reserved.

All data is available under the Open Government Licence v3.0 unless otherwise stated.




from random import choice, choices

nucleobase = ""AGCT""

start_codon = ""ATG""
stop_codon = (""TAG"", ""TAA"", ""TGA"")

def isPotentialGene(DNA: str):
    # –¥–ª–∏–Ω–∞ –∫—Ä–∞—Ç–Ω–∞ 3
    if (len(DNA) % 3) != 0:
        return False
    # –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–¥–æ–Ω–∞ –Ω–∞—á–∞–ª–∞
    if not DNA.startswith(start_codon):
        return False
    # –Ω–µ –∏–º–µ–µ—Ç –∫–æ–¥–æ–Ω–æ–≤ –∫–æ–Ω—Ü–∞ –≤–Ω—É—Ç—Ä–∏
    for i in range(len(DNA) - 3):
        if i % 3 == 0:
            if DNA[i:i+3] in stop_codon:
                return False
    # –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–æ–¥–æ–Ω–æ–º –∫–æ–Ω—Ü–∞
    if DNA.endswith(stop_codon[0]):
        return True
    if DNA.endswith(stop_codon[1]):
        return True
    if DNA.endswith(stop_codon[2]):
        return True
    return False


# 0
def generateCodon(triplets: int):
    if triplets <= 0:
        raise ValueError(""the minimum number of triplets is 1"")
    codons = """"
    while triplets > 0:
        if (codon := """".join(choices(nucleobase, k=3))) not in stop_codon:
            codons += codon
            triplets -= 1
    return codons

def generateDNA(length: int):
    if length <= 6 or length % 3 != 0:
        raise ValueError(""the length of the DNA must be greater than six and a multiple of six"")
    return start_codon + generateCodon(int((length - 6) / 3)) + choice(stop_codon)

# 1
def isValidDNA(st: str):
    return set(st).issubset(nucleobase)

# 2
def complementWC(DNA: str):
    return ''.join([{'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}[base] for base in DNA])

# 3
def palindromeWC(DNA: str):
    return DNA == complementWC(DNA)[::-1]

# 4
def isShift(s: str, t: str):
    return len(s) == len(t) and t in s + s

# 5
def find_PotentialGene(DNA: str, length: int):
    potential_genes = []
    for i in range(len(DNA)):
        if DNA[i:i+3] == start_codon:
            for j in range(i+3, len(DNA), 3):
                if DNA[j:j+3] in stop_codon:
                    gene = DNA[i:j+3]
                    if len(gene) >= length and len(gene) % 3 == 0:
                        potential_genes.append(gene)
                    break
    if not potential_genes:
        return None
    return potential_genes

# 6
def caesar_cipher(text: str, ROT: int, decipher=False):
    if ROT < 0:
        raise ValueError(""the number of shifts must be greater than or equal to zero"")
    encrypted_text = """"
    if decipher:
        ROT = -ROT
    for char in text:
        if char.isalpha():
            shifted = ord(char) + ROT
            if char.islower():
                if shifted > ord(""z""):
                    shifted -= 26
                elif shifted < ord(""a""):
                    shifted += 26
            elif char.isupper():
                if shifted > ord(""Z""):
                    shifted -= 26
                elif shifted < ord(""A""):
                    shifted += 26
            encrypted_text += chr(shifted)
        else:
            encrypted_text += char
    if not encrypted_text:
        return None
    return encrypted_text"
Bj4RPLSU,23401,boyan1324,Python,Tuesday 26th of March 2024 07:12:48 AM CDT,"# 135-619-161-138-741-136-90-147-243-932-439-432-787-122-272
my_list = list(map(int, input().split(""-"")))
print(my_list)
my_list.pop()
print(my_list)
print(my_list[2:0:-1])
print(my_list[7:9 + 1])
for i in my_list:
    if i % 10 == 3:
        my_list.insert(5, i)
print(my_list)
print(my_list[7:3:-1])
my_list.sort()
print(my_list)
my_list[7], my_list[3] = my_list[3], my_list[7]
print(my_list)
my_list.insert(0, min(my_list))
print(my_list)
my_list.append(max(my_list))
print(my_list)
my_list.insert(6, my_list.count(615))
print(my_list)
print("" "".join(str(x) for x in my_list))
"
