id,title,username,language,date,content
Xj9DeqfC,lenyador_wifi.lua,Harton,Lua,Saturday 22nd of July 2023 06:41:37 AM CDT,"local ORCHESTATOR = 2
local PROTOCOL = ""fabricas""
local STOP_SIGNAL = ""stop""
local CONTINUE_SIGNAL = ""continue""
local CONFIRMATION_FREQUENCY = 1
local FILE_NAME = ""state""
local MODEM_POS = ""left""

local function writeSignal(signal)
    if signal == STOP_SIGNAL then
        local file = fs.open(FILE_NAME, ""w"")
        file.write(signal)
        file.close()
    elseif fs.exists(FILE_NAME) then
        fs.delete(FILE_NAME)
    end
end

local function isStopped()
    if not fs.exists(FILE_NAME) then
        return false
    end
    local file = fs.open(FILE_NAME, ""r"")
    local signal = file.readAll()
    file.close()
    return signal == STOP_SIGNAL
end

local function isSappling(info)
    return info and info.tags[""minecraft:saplings""]
end

local function isLog(info)
    return info and info.tags[""minecraft:logs""]
end

local function isLeaves(info)
    return info and info.tags[""minecraft:leaves""]
end

local function isTree(info)
    return isSappling(info) or isLog(info) or isLeaves(info)
end

local function isDirt(info)
    return info and info.name == ""minecraft:dirt""
end

local function isBarrel(info)
    return info and info.name == ""minecraft:barrel""
end

local function isBoneMeal(info)
    return info and info.name == ""minecraft:bone_meal""
end

local function selectSappling()
    for i=1, 16 do
        local detail = turtle.getItemDetail(i, true)
        if isSappling(detail) then
            turtle.select(i)
            return true
        end
    end
    return false
end

local function selectBoneMeal()
    for i=1, 16 do
        local detail = turtle.getItemDetail(i)
        if isBoneMeal(detail) then
            turtle.select(i)
            return true
        end
    end
    return false
end

local function up()
    if not turtle.detectUp() then
        return turtle.up()
    end
    local _, info = turtle.inspectUp()
    if not isTree(info) then
        return false
    end
    return turtle.digUp() and turtle.up()
end

local function down()
    if not turtle.detectDown() then
        return turtle.down()
    end
    local _, info = turtle.inspectDown()
    if not isTree(info) then
        return false
    end
    return turtle.digDown() and turtle.down()
end

local function cutTree()
    while true do
        local climb = false
        for i=1, 4 do
            local det, info = turtle.inspect()
            if det and isTree(info) then
               turtle.dig()
               climb = true
            end
            turtle.suck()
            turtle.turnLeft()
        end
        if not climb then
            return
        end
        if not up() then
            return
        end
    end
end

local function goDown()
    while true do
        local det, info = turtle.inspect()
        if det and isDirt(info) then
            return
        end
        down()
    end
end

local function collapse()
    for i=1, 15 do
        local current = turtle.getItemDetail(i, true)
        for j=i+1, 16 do
            local compare = turtle.getItemDetail(j)
            if current and compare and current.name == compare.name then
                turtle.select(j)
                turtle.transferTo(i)
                if current.count + compare.count >= current.maxCount then
                    break
                end
            end
        end
    end
    turtle.select(1)
end

local function refuel()
    for i=1, 16 do
        local detail = turtle.getItemDetail(i, true)
        if detail then
            if isSappling(detail) then
                if detail.count > 32 then
                    turtle.select(i)
                    turtle.refuel(detail.count - 32)
                end
            elseif not isLog(detail) then
                turtle.select(i)
                turtle.refuel()
            end
        end
    end
    turtle.select(1)
    print(""Fuel: "" .. turtle.getFuelLevel())
end

local function drop()
    collapse()
    while turtle.suckDown() do sleep(0.1) end
    refuel()
    for i=1, 16 do
        local detail = turtle.getItemDetail(i, true)
        if detail and not isSappling(detail) and not isBoneMeal(detail) then
            turtle.select(i)
            turtle.dropDown()
        end
    end
    turtle.select(1)
end

local function start()
    collapse()
    refuel()
    cutTree()
    goDown()
end

local function peek()
    up()
    local found = false
    for i=1, 4 do
        local det, info = turtle.inspect()
        if not det or isSappling(info) then
            if not det then
                selectSappling()
                turtle.place()
            end

            while selectBoneMeal() do
                turtle.place()
                sleep(0.5)
                det, info = turtle.inspect()
                if det and isLog(info) then
                    found = true
                    break
                end
                sleep(0.5)
            end
        else
            found = true
        end
        turtle.turnLeft()
    end
    if not found then
        down()
    end
    return found
end

local function waitForStop(seconds)
    local id, signal = rednet.receive(PROTOCOL, seconds)
    if id == ORCHESTATOR and signal == STOP_SIGNAL then
        print(""Stop signal received!"")
        while not rednet.send(id, STOP_SIGNAL, PROTOCOL) do
            sleep(CONFIRMATION_FREQUENCY)
        end
        writeSignal(STOP_SIGNAL)
        print(""Stopped by orchestator: "" .. ORCHESTATOR)
        return true
    end
    return false
end

local function waitForContinue()
    while true do
        local id, signal = rednet.receive(PROTOCOL)
        if id == ORCHESTATOR and signal == CONTINUE_SIGNAL then
            print(""Continue signal received!"")
            while not rednet.send(id, CONTINUE_SIGNAL, PROTOCOL) do
                sleep(1)
            end
            writeSignal(CONTINUE_SIGNAL)
            print(""Resuming tasks..."")
            return
        end
    end
end

local function wait(seconds)
    turtle.suckUp()
    turtle.suckDown()
    if waitForStop(seconds) then
        waitForContinue()
    end
end

local function restart()
    rednet.open(MODEM_POS)

    local det, info = turtle.inspect()
    if det and isDirt(info) then
        return
    end

    det, info = turtle.inspectDown()
    if det and isBarrel(info) then
        drop()
        up()
        return
    end

    while up() do
        sleep(0.1)
    end

    while down() do
        local _, info = turtle.inspect()
        if isDirt(info) then
            break
        end
        for i=1, 4 do
            turtle.dig()
            turtle.turnLeft()
        end
    end
end

local function main(peekTime)
    restart()
    
    if isStopped() then
        waitForContinue()
    end

    local time = -peekTime
    while true do
        if os.clock() - time > peekTime then
            while peek() do
                start()
                down()
                drop()
                up()
            end
            time = os.clock()
        else
            wait(1)
        end
    end
end

local tArgs = { ... }
local peekTime = tArgs[1] and tonumber(tArgs[1]) or 180
main(peekTime)

"
wbXvHtGL,deliveryman,ZJSSON,Lua,Saturday 22nd of July 2023 06:28:40 AM CDT,"local c=peripheral.find('chatBox')
local m=peripheral.find('meBridge')

local PREFIX=""inventoryManager_""

local masters={}
masters['XiaoGeNintendo']='0'

function split(str,key)
    print(str.."" ""..key)
    local tb={}
    local count=0
    local tmp=""""
    for i=1,#str do
        print(i..""asd""..string.sub(str,i,i))
        if string.sub(str,i,i)==key then
            print(""NO""..tmp)
            tb[count]=tmp
            count=count+1
            tmp=""""
        else
            print(tmp)
            tmp=tmp..string.sub(str,i,i)
        end
    end

    if tmp~="""" then
        tb[count]=tmp
        count=count+1
    end

    return count,tb
end

function parseChat()
    local event, username, message, uuid, isHidden = os.pullEvent(""chat"")
    print(username..message..uuid)
    if string.sub(message,1,1)~=""!"" then
        print(""Not req"")
        return
    end

    if masters[username]==nil then
        print(""Not ok"")
        c.sendMessageToPlayer(""You are not registered in the delivery server!"",username,""Deliveryman"")
        return
    end

    local count,items=split(message,"" "")

    print(count)
    c.sendMessageToPlayer(""Item List:"",username,""Deliveryman"")
    for i=1,count,2 do
        print("">>""..i)
        c.sendMessageToPlayer(items[i]..""*""..items[i+1],username,""Deliveryman"")
    end

    local im=peripheral.find(masters[username])
end


while true do 
    parseChat()
end"
YyKqgh05,data641,TestGuy1,JSON,Saturday 22nd of July 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3d5f333937a326d059840e726150ddc27b4ca4deaa43276ab6239fa7f3ea75fc43da65012ba961b8d0aca8f5445199f8e130c27d27dd78602f567100d59c9066c032eabf508d9638b5b077e28807ecc7e3cd7af412e5d14a9a1203a6719007e0cf14b10d4fb018d93609c6bfa93b83945fdddd76bbe019b7405ced717496cd73',
  otherdata: [
    '1e21cd201f09a9777aac0d96a9cfda02',
    '7d7e83b6d60dbb500d91e541cbb37820',
    '644e7ab7a9c0f53db8e5af5f17a38683',
    '39d67d4f11a8fa26d79195f03b8f13c6',
    '7af5ae2a21eca8627d8288df0fb85368',
    '7d78566d715ea06f259cfcc31b47baf4',
    'a375253c25f017ffd6648298e9352673',
    '7fdd3c6e2fb2a48e28919b040c0f19e4'
  ]
}"
DY69XavW,Joke chess bot,ghostkiller967,C#,Saturday 22nd of July 2023 05:42:01 AM CDT,"using ChessChallenge.API;
using System;
using System.Collections.Generic;
using System.Diagnostics;

public class MyBot : IChessBot
{
    public Move Think(Board board, Timer timer)
    {
        int time = (int)Math.Round((DateTime.UtcNow - Process.GetCurrentProcess().StartTime.ToUniversalTime()).TotalSeconds);
        Console.WriteLine(time);
        string expression = $""(5*7*9*13*14*5*9*3*9*4*4 * {time} + (12*10*10*10+3*10*10+4*10+5)) % (10*10*10+1)"";
        Console.WriteLine(""Input Expression: "" + expression);

        // Tokenization and AST generation
        Lexer lexer = new Lexer(expression);
        Token token;
        do
        {
            token = lexer.GetNextToken();
            Console.WriteLine($""Token: {token.Type}, Value: {token.Value}"");
        } while (token.Type != TokenType.EOF);

        Parser parser = new Parser(new Lexer(expression));
        ASTNode root = parser.Parse();
        Console.WriteLine(""\nAST:"");
        PrintAST(root);

        // Transpile to Brainfuck
        string brainfuckCode = BrainfuckTranspiler.Transpile(expression);
        Console.WriteLine(""\nBrainfuck Code:"");
        Console.WriteLine(brainfuckCode);

        // Interpret brainfuck code
        BrainfuckInterpreter interpreter = new BrainfuckInterpreter();
        interpreter.Interpret(brainfuckCode);
        string output = interpreter.GetOutput();
        Move[] legalMoves = board.GetLegalMoves();
        return legalMoves[(int)(output[0] / 1000f * legalMoves.Length)];
    }

    public static void PrintAST(ASTNode node, int indent = 0)
    {
        string indentation = new string(' ', indent * 2);
        Console.WriteLine($""{indentation}{node.Type}({node.Value})"");

        if (node.Left != null)
            PrintAST(node.Left, indent + 1);

        if (node.Right != null)
            PrintAST(node.Right, indent + 1);
    }
}

public class BrainfuckInterpreter
{
    private int dataPointer;
    private int instructionPointer;
    private byte[] memory;
    private List<char> outputBuffer;

    public BrainfuckInterpreter()
    {
        memory = new byte[30000];
        dataPointer = 0;
        instructionPointer = 0;
        outputBuffer = new List<char>();
    }

    public void Interpret(string code)
    {
        while (instructionPointer < code.Length)
        {
            char currentChar = code[instructionPointer];

            switch (currentChar)
            {
                case '>':
                    dataPointer++;
                    break;

                case '<':
                    dataPointer--;
                    break;

                case '+':
                    memory[dataPointer]++;
                    break;

                case '-':
                    memory[dataPointer]--;
                    break;

                case '.':
                    outputBuffer.Add((char)memory[dataPointer]);
                    break;

                case ',':
                    // You can implement input handling here if needed.
                    break;

                case '[':
                    if (memory[dataPointer] == 0)
                    {
                        int loopDepth = 1;
                        while (loopDepth > 0)
                        {
                            instructionPointer++;
                            if (code[instructionPointer] == '[')
                                loopDepth++;
                            else if (code[instructionPointer] == ']')
                                loopDepth--;
                        }
                    }
                    break;

                case ']':
                    if (memory[dataPointer] != 0)
                    {
                        int loopDepth = 1;
                        while (loopDepth > 0)
                        {
                            instructionPointer--;
                            if (code[instructionPointer] == ']')
                                loopDepth++;
                            else if (code[instructionPointer] == '[')
                                loopDepth--;
                        }
                    }
                    break;

                default:
                    // Ignore any non-Brainfuck characters.
                    break;
            }

            instructionPointer++;
        }
    }

    public string GetOutput()
    {
        return new string(outputBuffer.ToArray());
    }
}

public class Token
{
    public TokenType Type { get; }
    public string Value { get; }

    public Token(TokenType type, string value)
    {
        Type = type;
        Value = value;
    }
}

public enum TokenType
{
    Number,
    Add,
    Subtract,
    Multiply,
    Divide,
    Modulo,
    OpenParen,
    CloseParen,
    EOF
}

public class Lexer
{
    private readonly string input;
    private int position;

    public Lexer(string input)
    {
        this.input = input;
        position = 0;
    }

    private char CurrentChar => position < input.Length ? input[position] : '\0';

    private void MoveNext()
    {
        position++;
    }

    private void SkipWhitespace()
    {
        while (char.IsWhiteSpace(CurrentChar))
        {
            MoveNext();
        }
    }

    private bool IsDigit(char c)
    {
        return char.IsDigit(c);
    }

    private bool IsOperator(char c)
    {
        return c == '+' || c == '-' || c == '*' || c == '/' || c == '%';
    }

    public Token GetNextToken()
    {
        while (CurrentChar != '\0')
        {
            if (char.IsWhiteSpace(CurrentChar))
            {
                SkipWhitespace();
                continue;
            }

            if (IsDigit(CurrentChar))
            {
                string number = """";
                while (IsDigit(CurrentChar))
                {
                    number += CurrentChar;
                    MoveNext();
                }

                return new Token(TokenType.Number, number);
            }

            if (IsOperator(CurrentChar))
            {
                TokenType type;
                switch (CurrentChar)
                {
                    case '+': type = TokenType.Add; break;
                    case '-': type = TokenType.Subtract; break;
                    case '*': type = TokenType.Multiply; break;
                    case '/': type = TokenType.Divide; break;
                    case '%': type = TokenType.Modulo; break;
                    default: throw new Exception(""Invalid operator."");
                }
                string op = CurrentChar.ToString();
                MoveNext();
                return new Token(type, op);
            }

            if (CurrentChar == '(')
            {
                MoveNext();
                return new Token(TokenType.OpenParen, ""("");
            }

            if (CurrentChar == ')')
            {
                MoveNext();
                return new Token(TokenType.CloseParen, "")"");
            }

            throw new Exception(""Invalid character."");
        }

        return new Token(TokenType.EOF, """");
    }
}

public class ASTNode
{
    public TokenType Type { get; }
    public string Value { get; }
    public ASTNode Left { get; set; }
    public ASTNode Right { get; set; }

    public ASTNode(TokenType type, string value)
    {
        Type = type;
        Value = value;
        Left = null;
        Right = null;
    }
}

public class Parser
{
    private readonly Lexer lexer;
    private Token currentToken;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
        currentToken = lexer.GetNextToken();
    }

    private void Eat(TokenType type)
    {
        if (currentToken.Type == type)
        {
            currentToken = lexer.GetNextToken();
        }
        else
        {
            throw new Exception($""Expected {type}, but got {currentToken.Type}."");
        }
    }

    private ASTNode Factor()
    {
        Token token = currentToken;
        if (token.Type == TokenType.Number)
        {
            Eat(TokenType.Number);
            return new ASTNode(TokenType.Number, token.Value);
        }
        else if (token.Type == TokenType.OpenParen)
        {
            Eat(TokenType.OpenParen);
            ASTNode node = Expr();
            Eat(TokenType.CloseParen);
            return node;
        }

        throw new Exception(""Invalid expression."");
    }

    private ASTNode Term()
    {
        ASTNode node = Factor();

        while (currentToken.Type == TokenType.Multiply || currentToken.Type == TokenType.Divide || currentToken.Type == TokenType.Modulo)
        {
            Token token = currentToken;
            if (token.Type == TokenType.Multiply)
            {
                Eat(TokenType.Multiply);
                node = new ASTNode(TokenType.Multiply, token.Value) { Left = node, Right = Factor() };
            }
            else if (token.Type == TokenType.Divide)
            {
                Eat(TokenType.Divide);
                node = new ASTNode(TokenType.Divide, token.Value) { Left = node, Right = Factor() };
            }
            else if (token.Type == TokenType.Modulo)
            {
                Eat(TokenType.Modulo);
                node = new ASTNode(TokenType.Modulo, token.Value) { Left = node, Right = Factor() };
            }
        }

        return node;
    }

    private ASTNode Expr()
    {
        ASTNode node = Term();

        while (currentToken.Type == TokenType.Add || currentToken.Type == TokenType.Subtract)
        {
            Token token = currentToken;
            if (token.Type == TokenType.Add)
            {
                Eat(TokenType.Add);
                node = new ASTNode(TokenType.Add, token.Value) { Left = node, Right = Term() };
            }
            else if (token.Type == TokenType.Subtract)
            {
                Eat(TokenType.Subtract);
                node = new ASTNode(TokenType.Subtract, token.Value) { Left = node, Right = Term() };
            }
        }

        return node;
    }

    public ASTNode Parse()
    {
        return Expr();
    }
}

public class BrainfuckTranspiler
{
    public static string Transpile(string input)
    {
        Lexer lexer = new Lexer(input);
        Parser parser = new Parser(lexer);
        ASTNode root = parser.Parse();
        return GenerateBrainfuckCode(root) + ""."";
    }

    private static string GenerateBrainfuckCode(ASTNode node)
    {
        if (node.Type == TokenType.Number)
        {
            int value = int.Parse(node.Value);
            return new string('+', value);
        }

        string leftCode = GenerateBrainfuckCode(node.Left);
        string rightCode = GenerateBrainfuckCode(node.Right);

        switch (node.Type)
        {
            case TokenType.Add:
                return leftCode + "">"" + rightCode + ""[-<+>]<"";
            case TokenType.Subtract:
                return leftCode + "">"" + rightCode + ""[-<->]<"";
            case TokenType.Multiply:
                return leftCode + "">"" + rightCode + ""<[>[->+>+<<]>[-<+>]<<-]>[-]>>[-<<<+>>>]<<<"";
            case TokenType.Divide:
                return leftCode + "">>>>"" + rightCode + ""<<<<[->+>>+>-[<-]<[<<[->>>+<<<]>>>>+<<-<]<<]>[-]>[-]>[-]>[-]>[-<<<<<+>>>>>]<<<<<"";
            case TokenType.Modulo:
                return leftCode + "">>>>"" + rightCode + ""<<<<[->+>>+>-[<-]<[<<[->>>+<<<]>>>>+<<-<]<<]>>[-]>[-]>[-]><<<<[-<+>]<"";
            default:
                throw new Exception(""Invalid node type."");
        }
    }
}"
EtNWPY11,Untitled,VladislavKovalskyi,Python,Saturday 22nd of July 2023 05:34:20 AM CDT,"import os
""""""
Завдання:
Вам потрібно написати програму, яка буде:
    • Додавати людину в БД
    • Видаляти людину з БД за її номером
    • Виводити список всіх людей в БД з їх номером
    • Редагувати інформацію про людину за її номером
    • Редагувати інформацію про людину за прізвищем
    • Виводити суму всіх балансів
    • Виводити людину, у якої найдовше прізвище

Вимоги:
    Словник має мати такі ключі: name, surname, balance
    Обов'язкове використання list, dict
""""""

users: list = []
number = 0

while True:
    print(
        ""Меню:\n""
        ""1. Додати людину\n""
        ""2. Видалити людину за номером\n""
        ""3. Вивести всіх людей\n""
        ""4. Редагувати інформацію про людину за номером \n""
        ""5. Редагувати інформацію про людину за прізвищем\n""
        ""6. Вивести мілліонера\n""
        ""7. Вивести людину з найдовшим прізвищем\n""
    )
    command = int(input(""Введіть номер команди: ""))
    os.system(""cls"")
    if command == 1:
        name = input(""Введіть ім'я: "")
        surname = input(""Введіть прізвище: "")
        balance = float(input(""Введіть баланс: ""))
        users.append({""name"": name, ""surname"": surname, ""balance"": balance})
        print(f""Ви успішно додали {len(users)}(-у) людину"")
        number += 1
    elif command == 2:
        num = int(input(""Введіть номер людини""))
        users.pop(num)
    elif command == 3:
        print(""Список всіх людей:"")
        for i, user in enumerate(users, 1):
            print(f""#{i} - Ім'я: {user['name']}\tПрізвище: {user['surname']}\tБаланс: {user['balance']}"")


    
    
    "
dL98gcUT,DEFLECT Script,A_GUES,Lua,Saturday 22nd of July 2023 05:19:55 AM CDT,"getgenv().Toggle = true
getgenv().BallDirection = Vector3.new(999999, 999999, 999999)

local plr = game.Players.LocalPlayer
local ball = nil

local function getBall()
    while true do 
        game:GetService(""RunService"").Stepped:Wait()
        if workspace:FindFirstChild(""Ball"") ~= nil then
            ball = workspace.Ball
            break
        end
    end
end

task.spawn(getBall)

while getgenv().Toggle do 
    game:GetService(""RunService"").Stepped:Wait()
    if (ball and ball:FindFirstChild(""Main"") and plr.Character ~= nil) then
        local distance = (ball.Main.Position - plr.Character.HumanoidRootPart.Position).Magnitude
        plr.Character.HumanoidRootPart.CFrame = CFrame.lookAt(plr.Character.HumanoidRootPart.Position, Vector3.new(ball.Main.Position.X, plr.Character.HumanoidRootPart.Position.Y, ball.Main.Position.Z))
        if (distance <= 17.8) then
            plr.Character:WaitForChild(""Deflection"").Remote:FireServer(""Deflect"", getgenv().BallDirection)
        end
    end
end
"
ui4ztHFy,Basic Shield System for ZScript,LadyFuzztail,C#,Saturday 22nd of July 2023 05:09:46 AM CDT,"class URPlayer : DoomPlayer
{
	int shieldMax;
	double shieldRechargeRate;
	int shieldRechargeDelay;
	int	armorBase;
	int armorMax;
	int nanitePool;
	property spMax : shieldMax;
	property spRate : shieldRechargeRate;
	property spDelay : shieldRechargeDelay;
	property apBase : armorBase;
	property apMax : armorMax;
	property npMax : nanitePool;
	
	Default
	{
		URPlayer.spMax 		25;
		URPlayer.spRate		15.;
		URPlayer.spDelay	140;
		URPlayer.apBase		10;
		URPlayer.apMax		200;
		URPlayer.npMax		200;
	}
}

class ProtoPossPawn : URPlayer
{
	Default
	{
		Health					75;
		Player.MaxHealth 		75;
		Player.DisplayName 		""Odysseus"";
		URPlayer.spMax 			50;
		URPlayer.spRate			25.;
		URPlayer.spDelay		140;
		URPlayer.apBase			15;
		URPlayer.apMax			150;
		URPlayer.npMax			150;
	}
}

class CommandoPawn : URPlayer
{
	Default
	{
		Health					100;
		Player.MaxHealth		100;
		Player.DisplayName		""Isabel"";
		URPlayer.spMax			25;
		URPlayer.spRate			15.;
		URPlayer.spDelay		140;
		URPlayer.apBase			20;
		URPlayer.apMax			200;
		URPlayer.npMax			100;
	}
}

class ShieldHandler : EventHandler
{
	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.thing.player && !e.thing.FindInventory(""ShieldControl""))
			e.thing.GiveInventory(""ShieldControl"",1);
	}
}

class ShieldControl : Inventory
{
	int shieldRegenCD;
	double shieldRegenTics;
	URPlayer plr;
	
	Default
	{
		Inventory.MaxAmount		1;
		+Inventory.Undroppable
		+Inventory.Untossable
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		plr = URPlayer(owner);
		if (!owner)
			return;
		shieldRegenCD = 0;
		shieldRegenTics = 0.;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if (!owner || owner.player.health <= 0)
			return;
		if (owner is ""URPlayer"")
		{
			ShieldRegen();
		}
	}
	
	void ShieldRegen()
	{
		if ( shieldRegenCD > 0 ) {
			--shieldRegenCD;
		} else {
			if (plr)
			{
				if (owner.CountInv(""ShieldPoints"") < plr.shieldMax) {
					shieldRegenTics += (plr.shieldRechargeRate * 0.01 * plr.shieldMax);
				} else {
					shieldRegenTics = 0.0;
				}
				while ( shieldRegenTics > 35.0 && owner.CountInv(""ShieldPoints"") < plr.shieldMax )
				{
					owner.GiveInventory(""ShieldPoints"",1);
					shieldRegenTics -= 35.0;
				}
			}
		}
	}
	
	override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		int currSP;
		int blockedDamage;
		
		if (passive && damage > 0) {
			currSP = owner.CountInv(""ShieldPoints"");
			if (damage <= currSP) {
				blockedDamage = damage;
				newdamage = 0;
			} else {
				blockedDamage = currSP;
				newdamage = damage - currSP;
			}
			shieldRegenCD = plr.shieldRechargeDelay;
			owner.TakeInventory(""ShieldPoints"",blockedDamage);
		}
	}
}

class ShieldPoints : Inventory
{
	Default
	{
		Inventory.MaxAmount		9999;
		+Inventory.Undroppable
		+Inventory.Untossable
		+Inventory.KeepDepleted
	}
}"
zpida05Y,Untitled,LadyFuzztail,C#,Saturday 22nd of July 2023 04:36:48 AM CDT,"class URPlayer : DoomPlayer
{
	int shieldMax;
	double shieldRechargeRate;
	int shieldRechargeDelay;
	int	armorBase;
	int armorMax;
	int nanitePool;
	property spMax : shieldMax;
	property spRate : shieldRechargeRate;
	property spDelay : shieldRechargeDelay;
	property apBase : armorBase;
	property apMax : armorMax;
	property npMax : nanitePool;
	
	Default
	{
		URPlayer.spMax 		25;
		URPlayer.spRate		15.;
		URPlayer.spDelay	140;
		URPlayer.apBase		10;
		URPlayer.apMax		200;
		URPlayer.npMax		200;
	}
}

class ProtoPossPawn : URPlayer
{
	Default
	{
		Health					75;
		Player.MaxHealth 		75;
		Player.DisplayName 		""Odysseus"";
		URPlayer.spMax 			50;
		URPlayer.spRate			39.6825;
		URPlayer.spDelay		84;
		URPlayer.apBase			15;
		URPlayer.apMax			150;
		URPlayer.npMax			150;
	}
}

class CommandoPawn : URPlayer
{
	Default
	{
		Health					100;
		Player.MaxHealth		100;
		Player.DisplayName		""Isabel"";
		URPlayer.spMax			25;
		URPlayer.spRate			25.;
		URPlayer.spDelay		140;
		URPlayer.apBase			20;
		URPlayer.apMax			200;
		URPlayer.npMax			100;
	}
}

class ShieldHandler : EventHandler
{
	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.thing.player && !e.thing.FindInventory(""ShieldControl""))
			e.thing.GiveInventory(""ShieldControl"",1);
	}
	
	override void WorldThingDamaged(WorldEvent e)
	{
		if (!e.thing.FindInventory(""ShieldControl""))
			return;
		
		let shield = ShieldControl(e.thing.FindInventory(""ShieldControl""));
		if (!shield)
			return;
		URPlayer plr = URPlayer(e.thing);
		if (!plr)
			return;
		shield.shieldRegenCD = plr.shieldRechargeDelay;
	}
}

class ShieldControl : Inventory
{
	int shieldRegenCD;
	double shieldRegenTics;
	
	Default
	{
		Inventory.MaxAmount		1;
		+Inventory.Undroppable
		+Inventory.Untossable
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		if (!owner)
			return;
		shieldRegenCD = 0;
		shieldRegenTics = 0.;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if (!owner || owner.player.health <= 0)
			return;
		if (owner is ""URPlayer"")
		{
			ShieldRegen();
		}
	}
	
	void ShieldRegen()
	{
		if ( shieldRegenCD > 0 ) {
			--shieldRegenCD;
		} else {
			URPlayer plr = URPlayer(owner);
			if (plr)
			{
				shieldRegenTics += (plr.shieldRechargeRate * 0.01 * plr.shieldMax);
				while ( shieldRegenTics > 35.0 && owner.CountInv(""ShieldPoints"") < plr.shieldMax )
				{
					owner.GiveInventory(""ShieldPoints"",1);
					shieldRegenTics -= 35.0;
				}
			}
		}
	}
	
	override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		int currSP;
		int blockedDamage;
		
		if (passive && damage > 0) {
			currSP = CountInv(""ShieldPoints"");
			if (damage <= currSP) {
				blockedDamage = damage;
				newdamage = 0;
				TakeInventory(""ShieldPoints"",blockedDamage);
			} else {
				blockedDamage = currSP;
				newdamage = damage - currSP;
				TakeInventory(""ShieldPoints"",blockedDamage);
			}
		}
	}
}

class ShieldPoints : Inventory
{
	Default
	{
		Inventory.MaxAmount		9999;
		+Inventory.Undroppable
		+Inventory.Untossable
		+Inventory.KeepDepleted
	}
}"
gggr0X4X,Untitled,Josif_tepe,C++,Saturday 22nd of July 2023 04:27:59 AM CDT,"#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <set>
using namespace std;

/*
 da se napise programa koja ke gi sobere cifrite na eden broj
 rekurzivno
 **/
int dp[1005];
int fib(int n) {
    if(n <= 2) {
        return 1;
    }
    if(dp[n] != -1) {
        return dp[n];
    }
    return dp[n] = fib(n - 1) + fib(n - 2);
}
int main() {
    ios::sync_with_stdio(false);
    memset(dp, -1, sizeof dp);
    cout << fib(5) << endl;
    return 0;
}
// fib(5) = fib(4) + [fib(3)] = 3 + 2 = 5
// fib(4) = fib(3) + fib(2) = 2 + 1 = 3
// fib(3) = fib(2) + fib(1) = 2
// fib(2) = 1
// fib(1) = 1
// fib(2) = 1
// fib(3) = 2
"
LJ2PJhrv,Untitled,35657,C++,Saturday 22nd of July 2023 04:22:52 AM CDT,"#include <iostream>
using namespace std;

int power(int a, int n) {
    if (n == 0) {
        return 1;
    }
    return a * power(a, n - 1);
}

int main() {
    setlocale(LC_ALL, ""ru"");
    int a, n;
    cout << ""Введите число: "";
    cin >> a;
    cout << ""Введите степень: "";
    cin >> n;
    cout << power(a, n);
}"
xQk2kFT9,Untitled,Josif_tepe,C++,Saturday 22nd of July 2023 03:56:41 AM CDT,"#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <set>
using namespace std;
using namespace std;

const long long mod=1e9+7;

int main() {
    ios::sync_with_stdio(false);
    int n, k;
    cin >> n >> k;
    vector<pair<int, int>> v(n);
    
    for(int i = 0; i < n; i++) {
        cin >> v[i].second >> v[i].first;
    }
    
    sort(v.begin(), v.end());
    
    multiset<int> ms;
    
    for(int i = 0; i < k; i++) {
        ms.insert(0);
    }
    int result = 0;
    for(int i = 0; i < n; i++) {
        int S = v[i].second;
        int E = v[i].first;
        multiset<int>::iterator it = ms.upper_bound(S);
        if(it != ms.begin()) {
            it--;
            ms.erase(it);
            ms.insert(E + 1);
            result++;
        }
        
    }
    cout << result << endl;
  
    return 0;
}
"
BEuLgBap,get_data_ultrasonic.ino,basyair7,Arduino,Saturday 22nd of July 2023 03:22:19 AM CDT,"// buat fungsi program untuk sensor ultrasonic 
 long sensorUltrasonic() { 
   // proses pemancaran suara ultrasonic 
   digitalWrite(pinTrig, LOW); 
   delayMicroseconds(80); 
   digitalWrite(pinTrig, LOW); 
   digitalWrite(pinTrig, HIGH); 
   delayMicroseconds(80); 
   delayMicroseconds(80); 
  
   // proses penerimaan suara ultrasonic 
   long durasi = pulseIn(pinEcho, HIGH); 
   long jarak = (durasi / 2) / 2.91; // mengubah durasi menjadi panjang jarak (cm) 
  
   return jarak; 
 }"
C88nPcdn,Struc Data to and from EEPROM,Rhavecilla,C++,Saturday 22nd of July 2023 02:42:20 AM CDT,"/*  PROGRAM ID: 5-ChannelsPowerControl.ino
 *  PROGRAMMER: Rolando Avecilla 
 *  DATE      : 
 *  DONE      : 
 *  OBJECTIVE : 
 *  TARGET    : Teensy 3.6
 *  NOTE      : 
 *
 */


//===============================================================//
// Load libraries.                                               //
//===============================================================//
#include <EEPROM.h>


//===============================================================//
// Global variables and constant.                                //
//===============================================================//

// Define struct
struct structData {
  int intVar;
  float floatVar;
  bool boolVar;
};

void setup() {
  Serial.begin(115200);
  
  // Define and then initialize struct instance.
  structData forSAving;
  forSAving.intVar = 42;
  forSAving.floatVar = 3.14;
  forSAving.boolVar = true;

  // Save the struct to EEPROM.
  saveToEEPROM(forSAving);

  delay(3000);

  // Retrieve the struct from EEPROM.
  structData forRetrieving;
  retrieveFromEEPROM(forRetrieving);  

  Serial.println(forRetrieving.intVar);
  Serial.println(forRetrieving.floatVar);
  Serial.println(forRetrieving.boolVar);

  Serial.println(""Setup ends."");
}

void loop() {
  // do nothing.
}

// Function to store data in EEPROM.
void saveToEEPROM(const structData& data) {
  // Calculate the starting EEPROM address for your data.
  int address = 0;

  // Write the data to EEPROM byte by byte.
  byte* pData = (byte*)&data;
  for (unsigned int i = 0; i < sizeof(data); i++) {
    EEPROM.write(address + i, pData[i]);
    delay(100);
  }
}

// Function to retrieve the struct from EEPROM.
void retrieveFromEEPROM(structData& data) {
  // Calculate the starting EEPROM address for your data.
  int address = 0;

  // Read the data from EEPROM byte by byte.
  byte* pData = (byte*)&data;
  for (unsigned int i = 0; i < sizeof(data); i++) {
    pData[i] = EEPROM.read(address + i);
  }
}

"
USCE4kR0,Untitled,35657,C++,Saturday 22nd of July 2023 02:31:28 AM CDT,"#include <iostream>

using namespace std;

int Fact(int N) {
    if (N < 1) { // факториал это произведение натуральных чисел от 1 до N (если N < 1 возвращаем 0)
        return 0;
    }
    else if (N == 1) {  // условие выхода из рекурсии, обязательно!
        return 1;
    }
    else {
        return N * Fact(N - 1); //функция вызывает саму себя, но с меньшим параметром
    }
}


//N!= 1 * 2 * 3 * ... * N

//N!= N * (N - 1)!

//1!= 1;



int main() {
    setlocale(LC_ALL, ""ru"");

    cout << Fact(3) << endl;
}
"
7cwJYBmx,How to make a balance command in aoi.js,Dreamer_1314,JavaScript,Saturday 22nd of July 2023 02:24:06 AM CDT,"Variables Required :
Coins = 25000
Bank = 0

For non command handler user :
bot.command({
  name: ""balance"",
  aliases: [
    ""bal"",
    ""Balance"",
    ""Bal""
  ],
  code: `
  $title[$username's Balance]
  $description[$getGlobalUserVar[Coins;$authorID] Coins
$getGlobalUserVar[Bank;$authorID] Bank]
  $color[00ff6c]
  $footer[Requested By $userTag[$authorID]]
  $addTimestamp
  `
)}

for command handler users :
module.exports = ({
  name: ""balance"",
  aliases: [
    ""bal"",
    ""Balance"",
    ""Bal""
  ],
  code: `
  $title[$username's Balance]
  $description[$getGlobalUserVar[Dream Coins;$authorID] Dream Coins
$getGlobalUserVar[Bank;$authorID] Bank]
  $color[00ff6c]
  $footer[Requested By $userTag[$authorID]]
  $addTimestamp
  `
)}"
5XYdqy3U,Untitled,35657,C++,Saturday 22nd of July 2023 02:10:34 AM CDT,"#include <iostream>

using namespace std;

template <typename T>
void bubble_sort(T array[], int size) {
    for (int k = 0; k < size; k++) {
        for (int j = 0; j < size - 1; j++) {
            if (array[j] > array[j + 1]) {
                T temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}


template <typename T>
void display(T array[], int size) {
    for (int i = 0; i < size; i++) {
        cout << array[i] << "" "";
    }
    cout << endl;
}


int main() {
    setlocale(LC_ALL, ""ru"");

    int array[]{ 1, 3, 7, -4, -2, 4 };
    int size = 6;
    cout << ""Original int Array : "";
    display(array, size);
    bubble_sort(array, size);
    cout << ""Sorted   int Array : "";
    display(array, size);


    double doublearray[]{ 3.5, 2.5, 3.7, 1.0, 3.3 };
    size = 5;
    cout << ""Original double Array : "";
    display(doublearray, size);
    bubble_sort(doublearray, size);
    cout << ""Sorted double Array : "";
    display(doublearray, size);
}
"
jHC6NHCf,ski trip,fingli,Python,Saturday 22nd of July 2023 02:08:24 AM CDT,"days = int(input())
pom = input()
eval = input()

nights = days - 1
room_for_one = 18
apartment = 25
president_apartment = 35

if days < 10:
    if pom == ""apartment"":
        apartment = apartment - (apartment * 0.30)
    elif pom == ""president apartment"":
        president_apartment = president_apartment - (president_apartment * 0.10)
elif 10 <= days <= 15:
    if pom == ""apartment"":
        apartment = apartment - (apartment * 0.35)
    elif pom == ""president apartment"":
        president_apartment = president_apartment - (president_apartment * 0.15)
elif days > 15:
    if pom == ""apartment"":
        apartment = apartment - (apartment * 0.50)
    elif pom == ""president apartment"":
        president_apartment = president_apartment - (president_apartment * 0.20)

if eval == ""positive"":
    room_for_one = room_for_one + (room_for_one * 0.25)
    apartment = apartment + (apartment * 0.25)
    president_apartment = president_apartment + (president_apartment * 0.25)
elif eval == ""negative"":
    room_for_one = room_for_one - (room_for_one * 0.10)
    apartment = apartment - (apartment * 0.10)
    president_apartment = president_apartment - (president_apartment * 0.10)

if pom == ""room for one person"":
    print(f""{nights * room_for_one:.2f}"")
elif pom == ""apartment"":
    print(f""{nights * apartment:.2f}"")
elif pom == ""president apartment"":
    print(f""{nights * president_apartment:.2f}"")
"
fZHfUc9V,Untitled,35657,C++,Saturday 22nd of July 2023 01:22:58 AM CDT,"#include <string>
#include <iostream>

using namespace std;


// Человек
class Person {
public:

    Person(string name, string gender, int age) : name_(name), gender_(gender), age_(age) {}

    void SetName(string name) {
        name_ = name;
    }

    void SetGender(string gender) {
        gender_ = gender;
    }

    void SetAge(int age) {
        age_ = age;
    }

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

    virtual void Speak() {
        cout << ""Привет!"" << endl;
    }

    string name_;
    string gender_;
    int age_;
};


class Wolf {

public:

    Wolf(int weight, int height, string colour) : weight_(weight), height_(height), colour_(colour) {}

    void SetWeight(int weight) {
        weight_ = weight;
    }

    int GetWeight() {
        return weight_;
    }

    void SetHeight(int height) {
        height_ = height;
    }

    int GetHeight() {
        return height_;
    }

    void SetColour(string colour) {
        colour_ = colour;
    }

    string GetColour() {
        return colour_;
    }

private:
    int weight_;
    int height_;
    string colour_;
};


class Warewolf : public Person, public Wolf {
public:

    Warewolf(string name, string gender, int age, int weight, int height, string colour) : Person(name, gender, age), Wolf(weight, height, colour) {}

    void Speak() override {
        cout << ""У-у-у-у-у-у!"" << endl;
    }
};


int main() {
    setlocale(LC_ALL, ""ru"");

    Warewolf wf(""John"", ""man"", 20, 100, 50, ""Gray"");

    wf.SetName(""John"");
    wf.SetColour(""Gray"");
    cout << wf.GetName() << "" "" << wf.GetColour() << endl;
    wf.Speak();
}"
WGW2fMUH,邀您一起看：封神第一部,xiaomianao666,JavaScript,Saturday 22nd of July 2023 01:04:34 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥封神第一部@@
vu6LRF1c,Nigerian scammers [22-7-1/2023],bombaires,HTML,Saturday 22nd of July 2023 12:45:24 AM CDT,"<a href=""mailto:pj283415@gmail.com"">pj283415@gmail.com</a>
<a href=""mailto:pj283415+1388@gmail.com"">pj283415+1388@gmail.com</a>
<a href=""mailto:pj283415+23553@gmail.com"">pj283415+23553@gmail.com</a>
<a href=""mailto:pj283415+5100@gmail.com"">pj283415+5100@gmail.com</a>
<a href=""mailto:pj283415+28749@gmail.com"">pj283415+28749@gmail.com</a>
<a href=""mailto:pj283415+10560@gmail.com"">pj283415+10560@gmail.com</a>
<a href=""mailto:pj283415+9236@gmail.com"">pj283415+9236@gmail.com</a>
<a href=""mailto:pj283415+7193@gmail.com"">pj283415+7193@gmail.com</a>
<a href=""mailto:pj283415+11559@gmail.com"">pj283415+11559@gmail.com</a>
<a href=""mailto:pj283415+23364@gmail.com"">pj283415+23364@gmail.com</a>
<a href=""mailto:pj283415+23394@gmail.com"">pj283415+23394@gmail.com</a>
<a href=""mailto:pj283415+11756@gmail.com"">pj283415+11756@gmail.com</a>
<a href=""mailto:pj283415+20485@gmail.com"">pj283415+20485@gmail.com</a>
<a href=""mailto:pj283415+32193@gmail.com"">pj283415+32193@gmail.com</a>
<a href=""mailto:pj283415+31669@gmail.com"">pj283415+31669@gmail.com</a>
<a href=""mailto:pj283415+26862@gmail.com"">pj283415+26862@gmail.com</a>
<a href=""mailto:pj283415+5596@gmail.com"">pj283415+5596@gmail.com</a>
<a href=""mailto:pj283415+21524@gmail.com"">pj283415+21524@gmail.com</a>
<a href=""mailto:pj283415+11400@gmail.com"">pj283415+11400@gmail.com</a>
<a href=""mailto:pj283415+6172@gmail.com"">pj283415+6172@gmail.com</a>
<a href=""mailto:pj283415+26050@gmail.com"">pj283415+26050@gmail.com</a>
<a href=""mailto:pj283415+32187@gmail.com"">pj283415+32187@gmail.com</a>
<a href=""mailto:pj283415+27939@gmail.com"">pj283415+27939@gmail.com</a>
<a href=""mailto:pj283415+4192@gmail.com"">pj283415+4192@gmail.com</a>
<a href=""mailto:pj283415+30837@gmail.com"">pj283415+30837@gmail.com</a>
<a href=""mailto:pj283415+18353@gmail.com"">pj283415+18353@gmail.com</a>
<a href=""mailto:pj283415+13913@gmail.com"">pj283415+13913@gmail.com</a>
<a href=""mailto:pj283415+31697@gmail.com"">pj283415+31697@gmail.com</a>
<a href=""mailto:pj283415+22047@gmail.com"">pj283415+22047@gmail.com</a>
<a href=""mailto:pj283415+17007@gmail.com"">pj283415+17007@gmail.com</a>
<a href=""mailto:pj283415+30933@gmail.com"">pj283415+30933@gmail.com</a>
<a href=""mailto:pj283415+10481@gmail.com"">pj283415+10481@gmail.com</a>
<a href=""mailto:pj283415+14518@gmail.com"">pj283415+14518@gmail.com</a>
<a href=""mailto:pj283415+12053@gmail.com"">pj283415+12053@gmail.com</a>
<a href=""mailto:pj283415+23646@gmail.com"">pj283415+23646@gmail.com</a>
<a href=""mailto:pj283415+14653@gmail.com"">pj283415+14653@gmail.com</a>
<a href=""mailto:pj283415+1647@gmail.com"">pj283415+1647@gmail.com</a>
<a href=""mailto:pj283415+5077@gmail.com"">pj283415+5077@gmail.com</a>
<a href=""mailto:pj283415+5430@gmail.com"">pj283415+5430@gmail.com</a>
<a href=""mailto:pj283415+22678@gmail.com"">pj283415+22678@gmail.com</a>
<a href=""mailto:pj283415+24415@gmail.com"">pj283415+24415@gmail.com</a>
<a href=""mailto:pj283415+17514@gmail.com"">pj283415+17514@gmail.com</a>
<a href=""mailto:pj283415+30834@gmail.com"">pj283415+30834@gmail.com</a>
<a href=""mailto:pj283415+8886@gmail.com"">pj283415+8886@gmail.com</a>
<a href=""mailto:pj283415+18311@gmail.com"">pj283415+18311@gmail.com</a>
<a href=""mailto:pj283415+23143@gmail.com"">pj283415+23143@gmail.com</a>
<a href=""mailto:pj283415+4181@gmail.com"">pj283415+4181@gmail.com</a>
<a href=""mailto:pj283415+30069@gmail.com"">pj283415+30069@gmail.com</a>
<a href=""mailto:pj283415+17036@gmail.com"">pj283415+17036@gmail.com</a>
<a href=""mailto:pj283415+29592@gmail.com"">pj283415+29592@gmail.com</a>
<a href=""mailto:pj283415+12632@gmail.com"">pj283415+12632@gmail.com</a>
<a href=""mailto:pj283415+25040@gmail.com"">pj283415+25040@gmail.com</a>
<a href=""mailto:pj283415+15136@gmail.com"">pj283415+15136@gmail.com</a>
<a href=""mailto:pj283415+872@gmail.com"">pj283415+872@gmail.com</a>
<a href=""mailto:pj283415+17313@gmail.com"">pj283415+17313@gmail.com</a>
<a href=""mailto:pj283415+22935@gmail.com"">pj283415+22935@gmail.com</a>
<a href=""mailto:pj283415+21040@gmail.com"">pj283415+21040@gmail.com</a>
<a href=""mailto:pj283415+13229@gmail.com"">pj283415+13229@gmail.com</a>
<a href=""mailto:pj283415+4981@gmail.com"">pj283415+4981@gmail.com</a>
<a href=""mailto:pj283415+28983@gmail.com"">pj283415+28983@gmail.com</a>
<a href=""mailto:pj283415+30019@gmail.com"">pj283415+30019@gmail.com</a>
<a href=""mailto:pj283415+15593@gmail.com"">pj283415+15593@gmail.com</a>
<a href=""mailto:pj283415+17389@gmail.com"">pj283415+17389@gmail.com</a>
<a href=""mailto:pj283415+23510@gmail.com"">pj283415+23510@gmail.com</a>
<a href=""mailto:pj283415+811@gmail.com"">pj283415+811@gmail.com</a>
<a href=""mailto:pj283415+26519@gmail.com"">pj283415+26519@gmail.com</a>
<a href=""mailto:pj283415+21635@gmail.com"">pj283415+21635@gmail.com</a>
<a href=""mailto:pj283415+13988@gmail.com"">pj283415+13988@gmail.com</a>
<a href=""mailto:pj283415+2778@gmail.com"">pj283415+2778@gmail.com</a>
<a href=""mailto:pj283415+15525@gmail.com"">pj283415+15525@gmail.com</a>
<a href=""mailto:pj283415+4764@gmail.com"">pj283415+4764@gmail.com</a>
<a href=""mailto:pj283415+18022@gmail.com"">pj283415+18022@gmail.com</a>
<a href=""mailto:pj283415+6777@gmail.com"">pj283415+6777@gmail.com</a>
<a href=""mailto:pj283415+10450@gmail.com"">pj283415+10450@gmail.com</a>
<a href=""mailto:pj283415+19073@gmail.com"">pj283415+19073@gmail.com</a>
<a href=""mailto:pj283415+22821@gmail.com"">pj283415+22821@gmail.com</a>
<a href=""mailto:pj283415+8275@gmail.com"">pj283415+8275@gmail.com</a>
<a href=""mailto:pj283415+7484@gmail.com"">pj283415+7484@gmail.com</a>
<a href=""mailto:pj283415+12360@gmail.com"">pj283415+12360@gmail.com</a>
<a href=""mailto:pj283415+8422@gmail.com"">pj283415+8422@gmail.com</a>
<a href=""mailto:pj283415+29191@gmail.com"">pj283415+29191@gmail.com</a>
<a href=""mailto:pj283415+13448@gmail.com"">pj283415+13448@gmail.com</a>
<a href=""mailto:pj283415+1772@gmail.com"">pj283415+1772@gmail.com</a>
<a href=""mailto:pj283415+1435@gmail.com"">pj283415+1435@gmail.com</a>
<a href=""mailto:pj283415+4@gmail.com"">pj283415+4@gmail.com</a>
<a href=""mailto:pj283415+28830@gmail.com"">pj283415+28830@gmail.com</a>
<a href=""mailto:pj283415+32646@gmail.com"">pj283415+32646@gmail.com</a>
<a href=""mailto:pj283415+11719@gmail.com"">pj283415+11719@gmail.com</a>
<a href=""mailto:pj283415+7211@gmail.com"">pj283415+7211@gmail.com</a>
<a href=""mailto:pj283415+18738@gmail.com"">pj283415+18738@gmail.com</a>
<a href=""mailto:pj283415+24808@gmail.com"">pj283415+24808@gmail.com</a>
<a href=""mailto:pj283415+16217@gmail.com"">pj283415+16217@gmail.com</a>
<a href=""mailto:pj283415+4198@gmail.com"">pj283415+4198@gmail.com</a>
<a href=""mailto:pj283415+18462@gmail.com"">pj283415+18462@gmail.com</a>
<a href=""mailto:pj283415+24775@gmail.com"">pj283415+24775@gmail.com</a>
<a href=""mailto:pj283415+4557@gmail.com"">pj283415+4557@gmail.com</a>
<a href=""mailto:pj283415+21600@gmail.com"">pj283415+21600@gmail.com</a>
<a href=""mailto:pj283415+8899@gmail.com"">pj283415+8899@gmail.com</a>
<a href=""mailto:pj283415+15203@gmail.com"">pj283415+15203@gmail.com</a>
<a href=""mailto:pj283415+4021@gmail.com"">pj283415+4021@gmail.com</a>
<a href=""mailto:pj283415+24806@gmail.com"">pj283415+24806@gmail.com</a>

<a href=""mailto:clovesavingsbank@gmail.com"">clovesavingsbank@gmail.com</a>
<a href=""mailto:clovesavingsbank+26342@gmail.com"">clovesavingsbank+26342@gmail.com</a>
<a href=""mailto:clovesavingsbank+9331@gmail.com"">clovesavingsbank+9331@gmail.com</a>
<a href=""mailto:clovesavingsbank+21055@gmail.com"">clovesavingsbank+21055@gmail.com</a>
<a href=""mailto:clovesavingsbank+24582@gmail.com"">clovesavingsbank+24582@gmail.com</a>
<a href=""mailto:clovesavingsbank+3080@gmail.com"">clovesavingsbank+3080@gmail.com</a>
<a href=""mailto:clovesavingsbank+13245@gmail.com"">clovesavingsbank+13245@gmail.com</a>
<a href=""mailto:clovesavingsbank+6332@gmail.com"">clovesavingsbank+6332@gmail.com</a>
<a href=""mailto:clovesavingsbank+25599@gmail.com"">clovesavingsbank+25599@gmail.com</a>
<a href=""mailto:clovesavingsbank+14881@gmail.com"">clovesavingsbank+14881@gmail.com</a>
<a href=""mailto:clovesavingsbank+2399@gmail.com"">clovesavingsbank+2399@gmail.com</a>
<a href=""mailto:clovesavingsbank+22165@gmail.com"">clovesavingsbank+22165@gmail.com</a>
<a href=""mailto:clovesavingsbank+3719@gmail.com"">clovesavingsbank+3719@gmail.com</a>
<a href=""mailto:clovesavingsbank+11756@gmail.com"">clovesavingsbank+11756@gmail.com</a>
<a href=""mailto:clovesavingsbank+5261@gmail.com"">clovesavingsbank+5261@gmail.com</a>
<a href=""mailto:clovesavingsbank+362@gmail.com"">clovesavingsbank+362@gmail.com</a>
<a href=""mailto:clovesavingsbank+25778@gmail.com"">clovesavingsbank+25778@gmail.com</a>
<a href=""mailto:clovesavingsbank+20068@gmail.com"">clovesavingsbank+20068@gmail.com</a>
<a href=""mailto:clovesavingsbank+21182@gmail.com"">clovesavingsbank+21182@gmail.com</a>
<a href=""mailto:clovesavingsbank+9532@gmail.com"">clovesavingsbank+9532@gmail.com</a>
<a href=""mailto:clovesavingsbank+12944@gmail.com"">clovesavingsbank+12944@gmail.com</a>
<a href=""mailto:clovesavingsbank+25690@gmail.com"">clovesavingsbank+25690@gmail.com</a>
<a href=""mailto:clovesavingsbank+31045@gmail.com"">clovesavingsbank+31045@gmail.com</a>
<a href=""mailto:clovesavingsbank+23183@gmail.com"">clovesavingsbank+23183@gmail.com</a>
<a href=""mailto:clovesavingsbank+5520@gmail.com"">clovesavingsbank+5520@gmail.com</a>
<a href=""mailto:clovesavingsbank+31624@gmail.com"">clovesavingsbank+31624@gmail.com</a>
<a href=""mailto:clovesavingsbank+22783@gmail.com"">clovesavingsbank+22783@gmail.com</a>
<a href=""mailto:clovesavingsbank+31295@gmail.com"">clovesavingsbank+31295@gmail.com</a>
<a href=""mailto:clovesavingsbank+3860@gmail.com"">clovesavingsbank+3860@gmail.com</a>
<a href=""mailto:clovesavingsbank+1195@gmail.com"">clovesavingsbank+1195@gmail.com</a>
<a href=""mailto:clovesavingsbank+6634@gmail.com"">clovesavingsbank+6634@gmail.com</a>
<a href=""mailto:clovesavingsbank+1969@gmail.com"">clovesavingsbank+1969@gmail.com</a>
<a href=""mailto:clovesavingsbank+13581@gmail.com"">clovesavingsbank+13581@gmail.com</a>
<a href=""mailto:clovesavingsbank+17605@gmail.com"">clovesavingsbank+17605@gmail.com</a>
<a href=""mailto:clovesavingsbank+2001@gmail.com"">clovesavingsbank+2001@gmail.com</a>
<a href=""mailto:clovesavingsbank+14247@gmail.com"">clovesavingsbank+14247@gmail.com</a>
<a href=""mailto:clovesavingsbank+16849@gmail.com"">clovesavingsbank+16849@gmail.com</a>
<a href=""mailto:clovesavingsbank+13372@gmail.com"">clovesavingsbank+13372@gmail.com</a>
<a href=""mailto:clovesavingsbank+12117@gmail.com"">clovesavingsbank+12117@gmail.com</a>
<a href=""mailto:clovesavingsbank+8222@gmail.com"">clovesavingsbank+8222@gmail.com</a>
<a href=""mailto:clovesavingsbank+30138@gmail.com"">clovesavingsbank+30138@gmail.com</a>
<a href=""mailto:clovesavingsbank+12994@gmail.com"">clovesavingsbank+12994@gmail.com</a>
<a href=""mailto:clovesavingsbank+2001@gmail.com"">clovesavingsbank+2001@gmail.com</a>
<a href=""mailto:clovesavingsbank+1097@gmail.com"">clovesavingsbank+1097@gmail.com</a>
<a href=""mailto:clovesavingsbank+29091@gmail.com"">clovesavingsbank+29091@gmail.com</a>
<a href=""mailto:clovesavingsbank+31311@gmail.com"">clovesavingsbank+31311@gmail.com</a>
<a href=""mailto:clovesavingsbank+2963@gmail.com"">clovesavingsbank+2963@gmail.com</a>
<a href=""mailto:clovesavingsbank+17725@gmail.com"">clovesavingsbank+17725@gmail.com</a>
<a href=""mailto:clovesavingsbank+155@gmail.com"">clovesavingsbank+155@gmail.com</a>
<a href=""mailto:clovesavingsbank+2656@gmail.com"">clovesavingsbank+2656@gmail.com</a>
<a href=""mailto:clovesavingsbank+31265@gmail.com"">clovesavingsbank+31265@gmail.com</a>
<a href=""mailto:clovesavingsbank+13993@gmail.com"">clovesavingsbank+13993@gmail.com</a>
<a href=""mailto:clovesavingsbank+242@gmail.com"">clovesavingsbank+242@gmail.com</a>
<a href=""mailto:clovesavingsbank+22715@gmail.com"">clovesavingsbank+22715@gmail.com</a>
<a href=""mailto:clovesavingsbank+10438@gmail.com"">clovesavingsbank+10438@gmail.com</a>
<a href=""mailto:clovesavingsbank+32671@gmail.com"">clovesavingsbank+32671@gmail.com</a>
<a href=""mailto:clovesavingsbank+23992@gmail.com"">clovesavingsbank+23992@gmail.com</a>
<a href=""mailto:clovesavingsbank+32432@gmail.com"">clovesavingsbank+32432@gmail.com</a>
<a href=""mailto:clovesavingsbank+7596@gmail.com"">clovesavingsbank+7596@gmail.com</a>
<a href=""mailto:clovesavingsbank+32603@gmail.com"">clovesavingsbank+32603@gmail.com</a>
<a href=""mailto:clovesavingsbank+9922@gmail.com"">clovesavingsbank+9922@gmail.com</a>
<a href=""mailto:clovesavingsbank+24612@gmail.com"">clovesavingsbank+24612@gmail.com</a>
<a href=""mailto:clovesavingsbank+28730@gmail.com"">clovesavingsbank+28730@gmail.com</a>
<a href=""mailto:clovesavingsbank+7355@gmail.com"">clovesavingsbank+7355@gmail.com</a>
<a href=""mailto:clovesavingsbank+25172@gmail.com"">clovesavingsbank+25172@gmail.com</a>
<a href=""mailto:clovesavingsbank+3417@gmail.com"">clovesavingsbank+3417@gmail.com</a>
<a href=""mailto:clovesavingsbank+29932@gmail.com"">clovesavingsbank+29932@gmail.com</a>
<a href=""mailto:clovesavingsbank+19647@gmail.com"">clovesavingsbank+19647@gmail.com</a>
<a href=""mailto:clovesavingsbank+21643@gmail.com"">clovesavingsbank+21643@gmail.com</a>
<a href=""mailto:clovesavingsbank+10384@gmail.com"">clovesavingsbank+10384@gmail.com</a>
<a href=""mailto:clovesavingsbank+20284@gmail.com"">clovesavingsbank+20284@gmail.com</a>
<a href=""mailto:clovesavingsbank+28140@gmail.com"">clovesavingsbank+28140@gmail.com</a>
<a href=""mailto:clovesavingsbank+7905@gmail.com"">clovesavingsbank+7905@gmail.com</a>
<a href=""mailto:clovesavingsbank+3342@gmail.com"">clovesavingsbank+3342@gmail.com</a>
<a href=""mailto:clovesavingsbank+8700@gmail.com"">clovesavingsbank+8700@gmail.com</a>
<a href=""mailto:clovesavingsbank+32068@gmail.com"">clovesavingsbank+32068@gmail.com</a>
<a href=""mailto:clovesavingsbank+25850@gmail.com"">clovesavingsbank+25850@gmail.com</a>
<a href=""mailto:clovesavingsbank+16483@gmail.com"">clovesavingsbank+16483@gmail.com</a>
<a href=""mailto:clovesavingsbank+2078@gmail.com"">clovesavingsbank+2078@gmail.com</a>
<a href=""mailto:clovesavingsbank+25211@gmail.com"">clovesavingsbank+25211@gmail.com</a>
<a href=""mailto:clovesavingsbank+23416@gmail.com"">clovesavingsbank+23416@gmail.com</a>
<a href=""mailto:clovesavingsbank+1574@gmail.com"">clovesavingsbank+1574@gmail.com</a>
<a href=""mailto:clovesavingsbank+2252@gmail.com"">clovesavingsbank+2252@gmail.com</a>
<a href=""mailto:clovesavingsbank+1958@gmail.com"">clovesavingsbank+1958@gmail.com</a>
<a href=""mailto:clovesavingsbank+11552@gmail.com"">clovesavingsbank+11552@gmail.com</a>
<a href=""mailto:clovesavingsbank+17596@gmail.com"">clovesavingsbank+17596@gmail.com</a>
<a href=""mailto:clovesavingsbank+7347@gmail.com"">clovesavingsbank+7347@gmail.com</a>
<a href=""mailto:clovesavingsbank+3021@gmail.com"">clovesavingsbank+3021@gmail.com</a>
<a href=""mailto:clovesavingsbank+6952@gmail.com"">clovesavingsbank+6952@gmail.com</a>
<a href=""mailto:clovesavingsbank+17557@gmail.com"">clovesavingsbank+17557@gmail.com</a>
<a href=""mailto:clovesavingsbank+823@gmail.com"">clovesavingsbank+823@gmail.com</a>
<a href=""mailto:clovesavingsbank+20630@gmail.com"">clovesavingsbank+20630@gmail.com</a>
<a href=""mailto:clovesavingsbank+16178@gmail.com"">clovesavingsbank+16178@gmail.com</a>
<a href=""mailto:clovesavingsbank+14628@gmail.com"">clovesavingsbank+14628@gmail.com</a>
<a href=""mailto:clovesavingsbank+30802@gmail.com"">clovesavingsbank+30802@gmail.com</a>
<a href=""mailto:clovesavingsbank+26610@gmail.com"">clovesavingsbank+26610@gmail.com</a>
<a href=""mailto:clovesavingsbank+2880@gmail.com"">clovesavingsbank+2880@gmail.com</a>
<a href=""mailto:clovesavingsbank+20860@gmail.com"">clovesavingsbank+20860@gmail.com</a>
<a href=""mailto:clovesavingsbank+531@gmail.com"">clovesavingsbank+531@gmail.com</a>
<a href=""mailto:clovesavingsbank+4694@gmail.com"">clovesavingsbank+4694@gmail.com</a>
<a href=""mailto:clovesavingsbank+16123@gmail.com"">clovesavingsbank+16123@gmail.com</a>
<a href=""mailto:elizabeths100@gmail.com"">elizabeths100@gmail.com</a>
<a href=""mailto:elizabeths100+9207@gmail.com"">elizabeths100+9207@gmail.com</a>
<a href=""mailto:elizabeths100+12724@gmail.com"">elizabeths100+12724@gmail.com</a>
<a href=""mailto:elizabeths100+7217@gmail.com"">elizabeths100+7217@gmail.com</a>
<a href=""mailto:elizabeths100+22012@gmail.com"">elizabeths100+22012@gmail.com</a>
<a href=""mailto:elizabeths100+31888@gmail.com"">elizabeths100+31888@gmail.com</a>
<a href=""mailto:elizabeths100+9324@gmail.com"">elizabeths100+9324@gmail.com</a>
<a href=""mailto:elizabeths100+12545@gmail.com"">elizabeths100+12545@gmail.com</a>
<a href=""mailto:elizabeths100+13314@gmail.com"">elizabeths100+13314@gmail.com</a>
<a href=""mailto:elizabeths100+6243@gmail.com"">elizabeths100+6243@gmail.com</a>
<a href=""mailto:elizabeths100+15006@gmail.com"">elizabeths100+15006@gmail.com</a>
<a href=""mailto:elizabeths100+25475@gmail.com"">elizabeths100+25475@gmail.com</a>
<a href=""mailto:elizabeths100+14712@gmail.com"">elizabeths100+14712@gmail.com</a>
<a href=""mailto:elizabeths100+8229@gmail.com"">elizabeths100+8229@gmail.com</a>
<a href=""mailto:elizabeths100+13102@gmail.com"">elizabeths100+13102@gmail.com</a>
<a href=""mailto:elizabeths100+20098@gmail.com"">elizabeths100+20098@gmail.com</a>
<a href=""mailto:elizabeths100+23937@gmail.com"">elizabeths100+23937@gmail.com</a>
<a href=""mailto:elizabeths100+19010@gmail.com"">elizabeths100+19010@gmail.com</a>
<a href=""mailto:elizabeths100+27615@gmail.com"">elizabeths100+27615@gmail.com</a>
<a href=""mailto:elizabeths100+17048@gmail.com"">elizabeths100+17048@gmail.com</a>
<a href=""mailto:elizabeths100+24023@gmail.com"">elizabeths100+24023@gmail.com</a>
<a href=""mailto:elizabeths100+7635@gmail.com"">elizabeths100+7635@gmail.com</a>
<a href=""mailto:elizabeths100+18080@gmail.com"">elizabeths100+18080@gmail.com</a>
<a href=""mailto:elizabeths100+22060@gmail.com"">elizabeths100+22060@gmail.com</a>
<a href=""mailto:elizabeths100+27999@gmail.com"">elizabeths100+27999@gmail.com</a>
<a href=""mailto:elizabeths100+17818@gmail.com"">elizabeths100+17818@gmail.com</a>
<a href=""mailto:elizabeths100+16617@gmail.com"">elizabeths100+16617@gmail.com</a>
<a href=""mailto:elizabeths100+23153@gmail.com"">elizabeths100+23153@gmail.com</a>
<a href=""mailto:elizabeths100+26454@gmail.com"">elizabeths100+26454@gmail.com</a>
<a href=""mailto:elizabeths100+26927@gmail.com"">elizabeths100+26927@gmail.com</a>
<a href=""mailto:elizabeths100+3849@gmail.com"">elizabeths100+3849@gmail.com</a>
<a href=""mailto:elizabeths100+32421@gmail.com"">elizabeths100+32421@gmail.com</a>
<a href=""mailto:elizabeths100+10616@gmail.com"">elizabeths100+10616@gmail.com</a>
<a href=""mailto:elizabeths100+8508@gmail.com"">elizabeths100+8508@gmail.com</a>
<a href=""mailto:elizabeths100+9547@gmail.com"">elizabeths100+9547@gmail.com</a>
<a href=""mailto:elizabeths100+22403@gmail.com"">elizabeths100+22403@gmail.com</a>
<a href=""mailto:elizabeths100+21602@gmail.com"">elizabeths100+21602@gmail.com</a>
<a href=""mailto:elizabeths100+32128@gmail.com"">elizabeths100+32128@gmail.com</a>
<a href=""mailto:elizabeths100+21420@gmail.com"">elizabeths100+21420@gmail.com</a>
<a href=""mailto:elizabeths100+32253@gmail.com"">elizabeths100+32253@gmail.com</a>
<a href=""mailto:elizabeths100+5576@gmail.com"">elizabeths100+5576@gmail.com</a>
<a href=""mailto:elizabeths100+31029@gmail.com"">elizabeths100+31029@gmail.com</a>
<a href=""mailto:elizabeths100+11437@gmail.com"">elizabeths100+11437@gmail.com</a>
<a href=""mailto:elizabeths100+10501@gmail.com"">elizabeths100+10501@gmail.com</a>
<a href=""mailto:elizabeths100+22917@gmail.com"">elizabeths100+22917@gmail.com</a>
<a href=""mailto:elizabeths100+2112@gmail.com"">elizabeths100+2112@gmail.com</a>
<a href=""mailto:elizabeths100+25828@gmail.com"">elizabeths100+25828@gmail.com</a>
<a href=""mailto:elizabeths100+8785@gmail.com"">elizabeths100+8785@gmail.com</a>
<a href=""mailto:elizabeths100+4552@gmail.com"">elizabeths100+4552@gmail.com</a>
<a href=""mailto:elizabeths100+25024@gmail.com"">elizabeths100+25024@gmail.com</a>
<a href=""mailto:elizabeths100+29730@gmail.com"">elizabeths100+29730@gmail.com</a>
<a href=""mailto:elizabeths100+30810@gmail.com"">elizabeths100+30810@gmail.com</a>
<a href=""mailto:elizabeths100+9104@gmail.com"">elizabeths100+9104@gmail.com</a>
<a href=""mailto:elizabeths100+15167@gmail.com"">elizabeths100+15167@gmail.com</a>
<a href=""mailto:elizabeths100+16326@gmail.com"">elizabeths100+16326@gmail.com</a>
<a href=""mailto:elizabeths100+22631@gmail.com"">elizabeths100+22631@gmail.com</a>
<a href=""mailto:elizabeths100+16181@gmail.com"">elizabeths100+16181@gmail.com</a>
<a href=""mailto:elizabeths100+19673@gmail.com"">elizabeths100+19673@gmail.com</a>
<a href=""mailto:elizabeths100+21892@gmail.com"">elizabeths100+21892@gmail.com</a>
<a href=""mailto:elizabeths100+1505@gmail.com"">elizabeths100+1505@gmail.com</a>
<a href=""mailto:elizabeths100+28344@gmail.com"">elizabeths100+28344@gmail.com</a>
<a href=""mailto:elizabeths100+16300@gmail.com"">elizabeths100+16300@gmail.com</a>
<a href=""mailto:elizabeths100+18802@gmail.com"">elizabeths100+18802@gmail.com</a>
<a href=""mailto:elizabeths100+28275@gmail.com"">elizabeths100+28275@gmail.com</a>
<a href=""mailto:elizabeths100+5444@gmail.com"">elizabeths100+5444@gmail.com</a>
<a href=""mailto:elizabeths100+25409@gmail.com"">elizabeths100+25409@gmail.com</a>
<a href=""mailto:elizabeths100+14537@gmail.com"">elizabeths100+14537@gmail.com</a>
<a href=""mailto:elizabeths100+29551@gmail.com"">elizabeths100+29551@gmail.com</a>
<a href=""mailto:elizabeths100+29791@gmail.com"">elizabeths100+29791@gmail.com</a>
<a href=""mailto:elizabeths100+28218@gmail.com"">elizabeths100+28218@gmail.com</a>
<a href=""mailto:elizabeths100+16466@gmail.com"">elizabeths100+16466@gmail.com</a>
<a href=""mailto:elizabeths100+18986@gmail.com"">elizabeths100+18986@gmail.com</a>
<a href=""mailto:elizabeths100+23353@gmail.com"">elizabeths100+23353@gmail.com</a>
<a href=""mailto:elizabeths100+21647@gmail.com"">elizabeths100+21647@gmail.com</a>
<a href=""mailto:elizabeths100+10915@gmail.com"">elizabeths100+10915@gmail.com</a>
<a href=""mailto:elizabeths100+12836@gmail.com"">elizabeths100+12836@gmail.com</a>
<a href=""mailto:elizabeths100+17001@gmail.com"">elizabeths100+17001@gmail.com</a>
<a href=""mailto:elizabeths100+32757@gmail.com"">elizabeths100+32757@gmail.com</a>
<a href=""mailto:elizabeths100+32498@gmail.com"">elizabeths100+32498@gmail.com</a>
<a href=""mailto:elizabeths100+29477@gmail.com"">elizabeths100+29477@gmail.com</a>
<a href=""mailto:elizabeths100+16691@gmail.com"">elizabeths100+16691@gmail.com</a>
<a href=""mailto:elizabeths100+714@gmail.com"">elizabeths100+714@gmail.com</a>
<a href=""mailto:elizabeths100+32732@gmail.com"">elizabeths100+32732@gmail.com</a>
<a href=""mailto:elizabeths100+28135@gmail.com"">elizabeths100+28135@gmail.com</a>
<a href=""mailto:elizabeths100+19054@gmail.com"">elizabeths100+19054@gmail.com</a>
<a href=""mailto:elizabeths100+13682@gmail.com"">elizabeths100+13682@gmail.com</a>
<a href=""mailto:elizabeths100+6615@gmail.com"">elizabeths100+6615@gmail.com</a>
<a href=""mailto:elizabeths100+30999@gmail.com"">elizabeths100+30999@gmail.com</a>
<a href=""mailto:elizabeths100+4478@gmail.com"">elizabeths100+4478@gmail.com</a>
<a href=""mailto:elizabeths100+13107@gmail.com"">elizabeths100+13107@gmail.com</a>
<a href=""mailto:elizabeths100+381@gmail.com"">elizabeths100+381@gmail.com</a>
<a href=""mailto:elizabeths100+22244@gmail.com"">elizabeths100+22244@gmail.com</a>
<a href=""mailto:elizabeths100+7826@gmail.com"">elizabeths100+7826@gmail.com</a>
<a href=""mailto:elizabeths100+25627@gmail.com"">elizabeths100+25627@gmail.com</a>
<a href=""mailto:elizabeths100+14634@gmail.com"">elizabeths100+14634@gmail.com</a>
<a href=""mailto:elizabeths100+29604@gmail.com"">elizabeths100+29604@gmail.com</a>
<a href=""mailto:elizabeths100+31872@gmail.com"">elizabeths100+31872@gmail.com</a>
<a href=""mailto:elizabeths100+28217@gmail.com"">elizabeths100+28217@gmail.com</a>
<a href=""mailto:elizabeths100+2186@gmail.com"">elizabeths100+2186@gmail.com</a>
<a href=""mailto:elizabeths100+6092@gmail.com"">elizabeths100+6092@gmail.com</a>
<a href=""mailto:elizabeths100+22110@gmail.com"">elizabeths100+22110@gmail.com</a>
<a href=""mailto:shonubifolashodun7@gmail.com"">shonubifolashodun7@gmail.com</a>
<a href=""mailto:shonubifolashodun7+32137@gmail.com"">shonubifolashodun7+32137@gmail.com</a>
<a href=""mailto:shonubifolashodun7+29087@gmail.com"">shonubifolashodun7+29087@gmail.com</a>
<a href=""mailto:shonubifolashodun7+28861@gmail.com"">shonubifolashodun7+28861@gmail.com</a>
<a href=""mailto:shonubifolashodun7+10112@gmail.com"">shonubifolashodun7+10112@gmail.com</a>
<a href=""mailto:shonubifolashodun7+32298@gmail.com"">shonubifolashodun7+32298@gmail.com</a>
<a href=""mailto:shonubifolashodun7+24641@gmail.com"">shonubifolashodun7+24641@gmail.com</a>
<a href=""mailto:shonubifolashodun7+19404@gmail.com"">shonubifolashodun7+19404@gmail.com</a>
<a href=""mailto:shonubifolashodun7+15666@gmail.com"">shonubifolashodun7+15666@gmail.com</a>
<a href=""mailto:shonubifolashodun7+26504@gmail.com"">shonubifolashodun7+26504@gmail.com</a>
<a href=""mailto:shonubifolashodun7+13896@gmail.com"">shonubifolashodun7+13896@gmail.com</a>
<a href=""mailto:shonubifolashodun7+22942@gmail.com"">shonubifolashodun7+22942@gmail.com</a>
<a href=""mailto:shonubifolashodun7+7090@gmail.com"">shonubifolashodun7+7090@gmail.com</a>
<a href=""mailto:shonubifolashodun7+1948@gmail.com"">shonubifolashodun7+1948@gmail.com</a>
<a href=""mailto:shonubifolashodun7+31586@gmail.com"">shonubifolashodun7+31586@gmail.com</a>
<a href=""mailto:shonubifolashodun7+10960@gmail.com"">shonubifolashodun7+10960@gmail.com</a>
<a href=""mailto:shonubifolashodun7+658@gmail.com"">shonubifolashodun7+658@gmail.com</a>
<a href=""mailto:shonubifolashodun7+24705@gmail.com"">shonubifolashodun7+24705@gmail.com</a>
<a href=""mailto:shonubifolashodun7+10995@gmail.com"">shonubifolashodun7+10995@gmail.com</a>
<a href=""mailto:shonubifolashodun7+21306@gmail.com"">shonubifolashodun7+21306@gmail.com</a>
<a href=""mailto:shonubifolashodun7+31054@gmail.com"">shonubifolashodun7+31054@gmail.com</a>
<a href=""mailto:shonubifolashodun7+24302@gmail.com"">shonubifolashodun7+24302@gmail.com</a>
<a href=""mailto:shonubifolashodun7+17846@gmail.com"">shonubifolashodun7+17846@gmail.com</a>
<a href=""mailto:shonubifolashodun7+8928@gmail.com"">shonubifolashodun7+8928@gmail.com</a>
<a href=""mailto:shonubifolashodun7+1331@gmail.com"">shonubifolashodun7+1331@gmail.com</a>
<a href=""mailto:shonubifolashodun7+29049@gmail.com"">shonubifolashodun7+29049@gmail.com</a>
<a href=""mailto:shonubifolashodun7+26132@gmail.com"">shonubifolashodun7+26132@gmail.com</a>
<a href=""mailto:shonubifolashodun7+14212@gmail.com"">shonubifolashodun7+14212@gmail.com</a>
<a href=""mailto:shonubifolashodun7+22020@gmail.com"">shonubifolashodun7+22020@gmail.com</a>
<a href=""mailto:shonubifolashodun7+9394@gmail.com"">shonubifolashodun7+9394@gmail.com</a>
<a href=""mailto:shonubifolashodun7+7976@gmail.com"">shonubifolashodun7+7976@gmail.com</a>
<a href=""mailto:shonubifolashodun7+14760@gmail.com"">shonubifolashodun7+14760@gmail.com</a>
<a href=""mailto:shonubifolashodun7+12922@gmail.com"">shonubifolashodun7+12922@gmail.com</a>
<a href=""mailto:shonubifolashodun7+11028@gmail.com"">shonubifolashodun7+11028@gmail.com</a>
<a href=""mailto:shonubifolashodun7+13826@gmail.com"">shonubifolashodun7+13826@gmail.com</a>
<a href=""mailto:shonubifolashodun7+19544@gmail.com"">shonubifolashodun7+19544@gmail.com</a>
<a href=""mailto:shonubifolashodun7+24982@gmail.com"">shonubifolashodun7+24982@gmail.com</a>
<a href=""mailto:shonubifolashodun7+26534@gmail.com"">shonubifolashodun7+26534@gmail.com</a>
<a href=""mailto:shonubifolashodun7+11842@gmail.com"">shonubifolashodun7+11842@gmail.com</a>
<a href=""mailto:shonubifolashodun7+27412@gmail.com"">shonubifolashodun7+27412@gmail.com</a>
<a href=""mailto:shonubifolashodun7+23745@gmail.com"">shonubifolashodun7+23745@gmail.com</a>
<a href=""mailto:shonubifolashodun7+223@gmail.com"">shonubifolashodun7+223@gmail.com</a>
<a href=""mailto:shonubifolashodun7+18008@gmail.com"">shonubifolashodun7+18008@gmail.com</a>
<a href=""mailto:shonubifolashodun7+5432@gmail.com"">shonubifolashodun7+5432@gmail.com</a>
<a href=""mailto:shonubifolashodun7+16259@gmail.com"">shonubifolashodun7+16259@gmail.com</a>
<a href=""mailto:shonubifolashodun7+21898@gmail.com"">shonubifolashodun7+21898@gmail.com</a>
<a href=""mailto:shonubifolashodun7+940@gmail.com"">shonubifolashodun7+940@gmail.com</a>
<a href=""mailto:shonubifolashodun7+5252@gmail.com"">shonubifolashodun7+5252@gmail.com</a>
<a href=""mailto:shonubifolashodun7+8360@gmail.com"">shonubifolashodun7+8360@gmail.com</a>
<a href=""mailto:shonubifolashodun7+8746@gmail.com"">shonubifolashodun7+8746@gmail.com</a>
<a href=""mailto:shonubifolashodun7+23888@gmail.com"">shonubifolashodun7+23888@gmail.com</a>
<a href=""mailto:shonubifolashodun7+29572@gmail.com"">shonubifolashodun7+29572@gmail.com</a>
<a href=""mailto:shonubifolashodun7+14879@gmail.com"">shonubifolashodun7+14879@gmail.com</a>
<a href=""mailto:shonubifolashodun7+2344@gmail.com"">shonubifolashodun7+2344@gmail.com</a>
<a href=""mailto:shonubifolashodun7+21804@gmail.com"">shonubifolashodun7+21804@gmail.com</a>
<a href=""mailto:shonubifolashodun7+8447@gmail.com"">shonubifolashodun7+8447@gmail.com</a>
<a href=""mailto:shonubifolashodun7+9776@gmail.com"">shonubifolashodun7+9776@gmail.com</a>
<a href=""mailto:shonubifolashodun7+4450@gmail.com"">shonubifolashodun7+4450@gmail.com</a>
<a href=""mailto:shonubifolashodun7+29709@gmail.com"">shonubifolashodun7+29709@gmail.com</a>
<a href=""mailto:shonubifolashodun7+10681@gmail.com"">shonubifolashodun7+10681@gmail.com</a>
<a href=""mailto:shonubifolashodun7+24833@gmail.com"">shonubifolashodun7+24833@gmail.com</a>
<a href=""mailto:shonubifolashodun7+13298@gmail.com"">shonubifolashodun7+13298@gmail.com</a>
<a href=""mailto:shonubifolashodun7+31054@gmail.com"">shonubifolashodun7+31054@gmail.com</a>
<a href=""mailto:shonubifolashodun7+9721@gmail.com"">shonubifolashodun7+9721@gmail.com</a>
<a href=""mailto:shonubifolashodun7+31772@gmail.com"">shonubifolashodun7+31772@gmail.com</a>
<a href=""mailto:shonubifolashodun7+23900@gmail.com"">shonubifolashodun7+23900@gmail.com</a>
<a href=""mailto:shonubifolashodun7+11943@gmail.com"">shonubifolashodun7+11943@gmail.com</a>
<a href=""mailto:shonubifolashodun7+15831@gmail.com"">shonubifolashodun7+15831@gmail.com</a>
<a href=""mailto:shonubifolashodun7+4113@gmail.com"">shonubifolashodun7+4113@gmail.com</a>
<a href=""mailto:shonubifolashodun7+14989@gmail.com"">shonubifolashodun7+14989@gmail.com</a>
<a href=""mailto:shonubifolashodun7+22910@gmail.com"">shonubifolashodun7+22910@gmail.com</a>
<a href=""mailto:shonubifolashodun7+21198@gmail.com"">shonubifolashodun7+21198@gmail.com</a>
<a href=""mailto:shonubifolashodun7+17346@gmail.com"">shonubifolashodun7+17346@gmail.com</a>
<a href=""mailto:shonubifolashodun7+29243@gmail.com"">shonubifolashodun7+29243@gmail.com</a>
<a href=""mailto:shonubifolashodun7+11759@gmail.com"">shonubifolashodun7+11759@gmail.com</a>
<a href=""mailto:shonubifolashodun7+20355@gmail.com"">shonubifolashodun7+20355@gmail.com</a>
<a href=""mailto:shonubifolashodun7+17991@gmail.com"">shonubifolashodun7+17991@gmail.com</a>
<a href=""mailto:shonubifolashodun7+13110@gmail.com"">shonubifolashodun7+13110@gmail.com</a>
<a href=""mailto:shonubifolashodun7+5756@gmail.com"">shonubifolashodun7+5756@gmail.com</a>
<a href=""mailto:shonubifolashodun7+29566@gmail.com"">shonubifolashodun7+29566@gmail.com</a>
<a href=""mailto:shonubifolashodun7+30942@gmail.com"">shonubifolashodun7+30942@gmail.com</a>
<a href=""mailto:shonubifolashodun7+6529@gmail.com"">shonubifolashodun7+6529@gmail.com</a>
<a href=""mailto:shonubifolashodun7+9630@gmail.com"">shonubifolashodun7+9630@gmail.com</a>
<a href=""mailto:shonubifolashodun7+30091@gmail.com"">shonubifolashodun7+30091@gmail.com</a>
<a href=""mailto:shonubifolashodun7+17399@gmail.com"">shonubifolashodun7+17399@gmail.com</a>
<a href=""mailto:shonubifolashodun7+22642@gmail.com"">shonubifolashodun7+22642@gmail.com</a>
<a href=""mailto:shonubifolashodun7+12781@gmail.com"">shonubifolashodun7+12781@gmail.com</a>
<a href=""mailto:shonubifolashodun7+19154@gmail.com"">shonubifolashodun7+19154@gmail.com</a>
<a href=""mailto:shonubifolashodun7+20688@gmail.com"">shonubifolashodun7+20688@gmail.com</a>
<a href=""mailto:shonubifolashodun7+32457@gmail.com"">shonubifolashodun7+32457@gmail.com</a>
<a href=""mailto:shonubifolashodun7+28657@gmail.com"">shonubifolashodun7+28657@gmail.com</a>
<a href=""mailto:shonubifolashodun7+19049@gmail.com"">shonubifolashodun7+19049@gmail.com</a>
<a href=""mailto:shonubifolashodun7+13555@gmail.com"">shonubifolashodun7+13555@gmail.com</a>
<a href=""mailto:shonubifolashodun7+3667@gmail.com"">shonubifolashodun7+3667@gmail.com</a>
<a href=""mailto:shonubifolashodun7+29676@gmail.com"">shonubifolashodun7+29676@gmail.com</a>
<a href=""mailto:shonubifolashodun7+11052@gmail.com"">shonubifolashodun7+11052@gmail.com</a>
<a href=""mailto:shonubifolashodun7+16656@gmail.com"">shonubifolashodun7+16656@gmail.com</a>
<a href=""mailto:shonubifolashodun7+188@gmail.com"">shonubifolashodun7+188@gmail.com</a>
<a href=""mailto:shonubifolashodun7+24813@gmail.com"">shonubifolashodun7+24813@gmail.com</a>
<a href=""mailto:shonubifolashodun7+399@gmail.com"">shonubifolashodun7+399@gmail.com</a>
<a href=""mailto:shonubifolashodun7+29451@gmail.com"">shonubifolashodun7+29451@gmail.com</a>"
Z9JHuyGG,coral_you_walls,arz-themes,JSON,Saturday 22nd of July 2023 12:41:24 AM CDT,"[
	{
		""name"": ""Coral 01"",
		""author"": ""Arzjo Design"",
		""url"": ""https://i.imgur.com/usGeLG3.png"",
		""downloadable"": false
	},
	{
		""name"": ""Coral 02"",
		""author"": ""Arzjo Design"",
		""url"": ""https://i.imgur.com/646J4WL.png"",
		""downloadable"": false
	},
	{
		""name"": ""Coral 03"",
		""author"": ""Arzjo Design"",
		""url"": ""https://i.imgur.com/kKFQTWm.png"",
		""downloadable"": false
	},
	{
		""name"": ""Waves 01"",
		""author"": ""Arzjo Design"",
		""url"": ""https://i.imgur.com/xmb96tC.png"",
		""downloadable"": false
	},
	{
		""name"": ""Waves 02"",
		""author"": ""Arzjo Design"",
		""url"": ""https://i.imgur.com/eqAp0MY.png"",
		""downloadable"": false
	},
	{
		""name"": ""Waves 03"",
		""author"": ""Arzjo Design"",
		""url"": ""https://i.imgur.com/cg6gy8t.png"",
		""downloadable"": false
	}
]"
siyeYVB1,How to Choco Taco,A_GUES,JavaScript,Saturday 22nd of July 2023 12:19:50 AM CDT,https://pastebin.com/WrE7EipM
qjcvxhGc,Untitled,35657,C++,Saturday 22nd of July 2023 12:02:43 AM CDT,"#include <set>
#include <string>
#include <iostream>
#include <vector>

using namespace std;


class Transport {
public:
    Transport(int speed, int weight, int payload) : speed_(speed), weight_(weight), payload_(payload) {}

    int GetSpeed() {
        return speed_;
    }

    int GetWeight() {
        return weight_;
    }

    int GetPayload() {
        return payload_;
    }

    virtual void move() = 0;

private:
    int speed_; //скорость (максимальная) (км/ч)
    int weight_; //масса (собственная) (тонн)
    int payload_; // грузоподъемность (тонн)
};

class Plane : public Transport {
public:
    Plane(int speed, int weight, int payload, int max_height) : Transport(speed, weight, payload), max_height_(max_height) {}

    int GetHeight() {
        return max_height_;
    }

    void move() override {
        cout << ""Лечу"" << endl;
    }

private:
    int max_height_; // максимальная высота (метров)
};

class Car : public Transport {
public:
    Car(int speed, int weight, int payload, string transmition) : Transport(speed, weight, payload), transmition_(transmition) {}

    string GetTransmition() {
        return transmition_;
    }

    void move() override {
        cout << ""Еду"" << endl;
    }

private:
    string transmition_; // коробка передач (automatic, manual)
};


class Ship : public Transport {
public:
    Ship(int speed, int weight, int payload, int displacement) : Transport(speed, weight, payload), displacement_(displacement) {}

    int GetDisplacement() {
        return displacement_;
    }

    void move() override {
        cout << ""Плыву"" << endl;
    }

private:
    int displacement_; // водоизмещение (тонн)
};


int main() {
    setlocale(LC_ALL, ""ru"");

    Plane pl(800, 200, 30, 10000);
    Car cr(200, 2, 1, ""manual"");
    Ship sh(30, 100, 50, 50);

    vector<Transport*> transport;

    transport.push_back(&pl);
    transport.push_back(&cr);
    transport.push_back(&sh);

    for (auto a : transport) {
        cout << ""скорость: "" << a->GetSpeed() << "" км/ч "" << "", масса "" << a->GetWeight() << "" тонн "" << "", грузоподъемность "" << a->GetPayload() << ""  "";
        a->move();
        cout << endl;
    }
  
}"
WrE7EipM,How to Choco Taco,A_GUES,Python,Saturday 22nd of July 2023 12:02:34 AM CDT,"No relevant search results found.

Creating Choco Tacos at home involves several steps:

1. **Waffle Cone Preparation**: You have the option to purchase pre-made waffle cones or create them at home using a waffle cone maker. If you opt for the latter, remember to shape them into a taco form while they're still warm and flexible.

2. **Ice Cream Preparation**: You can utilize store-bought vanilla ice cream or make your own. If you choose store-bought, allow it to soften slightly for easier handling. Scoop the ice cream into the center of the taco-shaped waffle cone, ensuring it fills all the edges completely.

3. **Freezing the Ice Cream Filled Cones**: Arrange the filled cones on a cookie sheet or a plate and place them in the freezer. Freeze for approximately an hour or until they become firm.

4. **Chocolate Coating Preparation**: Melt chocolate chips with a small amount of coconut oil. This mixture will be used to coat the ice cream filled cones.

5. **Coating the Cones with Chocolate**: Once the ice cream filled cones are firm, remove them from the freezer one by one and spoon the melted chocolate over the top and partially down the sides, covering any exposed ice cream.

6. **Adding the Peanuts**: Sprinkle chopped peanuts over the melted chocolate before it solidifies.

7. **Freeze Again**: Return the Choco Tacos to the freezer until the chocolate sets.

8. **Serving**: Once the chocolate is set, the Choco Tacos are ready to be served. They can be stored in an airtight container in the freezer for up to 3 months.

Remember, if anything begins to melt during the Choco Taco creation process, simply return the ice cream and/or Choco Tacos to the freezer to firm up again. Enjoy your homemade Choco Tacos!"
k4hgDzt5,Untitled,35657,C++,Saturday 22nd of July 2023 12:01:39 AM CDT,"#include <set>
#include <string>
#include <iostream>
#include <vector>

using namespace std;


class Transport {
public:
    Transport(int speed, int weight, int payload) : speed_(speed), weight_(weight), payload_(payload) {}

    int GetSpeed() {
        return speed_;
    }

    int GetWeight() {
        return weight_;
    }

    int GetPayload() {
        return payload_;
    }

    virtual void move() = 0;

private:
    int speed_; //скорость (максимальная) (км/ч)
    int weight_; //масса (собственная) (тонн)
    int payload_; // грузоподъемность (тонн)
};

class Plane : public Transport {
public:
    Plane(int speed, int weight, int payload, int max_height) : Transport(speed, weight, payload), max_height_(max_height) {}

    int GetHeight() {
        return max_height_;
    }

    void move() {
        cout << ""Лечу"" << endl;
    }

private:
    int max_height_; // максимальная высота (метров)
};

class Car : public Transport {
public:
    Car(int speed, int weight, int payload, string transmition) : Transport(speed, weight, payload), transmition_(transmition) {}

    string GetTransmition() {
        return transmition_;
    }

    void move() {
        cout << ""Еду"" << endl;
    }

private:
    string transmition_; // коробка передач (automatic, manual)
};


class Ship : public Transport {
public:
    Ship(int speed, int weight, int payload, int displacement) : Transport(speed, weight, payload), displacement_(displacement) {}

    int GetDisplacement() {
        return displacement_;
    }

    void move() {
        cout << ""Плыву"" << endl;
    }

private:
    int displacement_; // водоизмещение (тонн)
};


int main() {
    setlocale(LC_ALL, ""ru"");

    Plane pl(800, 200, 30, 10000);
    Car cr(200, 2, 1, ""manual"");
    Ship sh(30, 100, 50, 50);

    vector<Transport*> transport;

    transport.push_back(&pl);
    transport.push_back(&cr);
    transport.push_back(&sh);

    for (auto a : transport) {
        cout << ""скорость: "" << a->GetSpeed() << "" км/ч "" << "", масса "" << a->GetWeight() << "" тонн "" << "", грузоподъемность "" << a->GetPayload() << ""  "";
        a->move();
        cout << endl;
    }
  
}"
w0Kd9Tbe,Untitled,Forceisthop,Python,Friday 21st of July 2023 11:38:01 PM CDT,"# Python3 program to find
# palindromic string
from collections import defaultdict

def getCount(N, s):

	# Stores frequency array
	# and its count
	mp = defaultdict(lambda: 0)

	# Total number of pairs
	ans = 0

	for i in range(N):

		# Initializing array of size 26
		# to store count of character
		a = [0] * 26

		# Counting occurrence of each
		# character of current string
		for j in range(len(s[i])):
			a[ord(s[i][j]) - ord('a')] += 1

		# Convert each count to parity(0 or 1)
		# on the basis of its frequency
		for j in range(26):
			a[j] = a[j] % 2

		# Adding to answer
		ans += mp[tuple(a)]

		# Frequency of single character
		# can be possibly changed,
		# so change its parity
		for j in range(26):
			changedCount = a[:]
			if (a[j] == 0):
				changedCount[j] = 1
			else:
				changedCount[j] = 0
			ans += mp[tuple(changedCount)]

		mp[tuple(a)] += 1

	return ans

# Driver code
if __name__ == '__main__':
	
	N = 4
	A = [ ""ball"", ""all"", ""call"", ""bal"" ]

	print(getCount(N, A))

# This code is contributed by Shivam Singh"
yfYRkcRw,# tk_solidgrays_at16_ani.py,here2share,Python,Friday 21st of July 2023 11:00:28 PM CDT,"# tk_solidgrays_at16_ani.py

from tkinter import *
from PIL import Image, ImageTk, ImageFilter, ImageDraw
import copy
 
ww = 256 
hh = 256 
cx, cy = ww//2, hh//2
 
def rgb2hex(r,g,b):
    return '#%02X%02X%02X'%(r,g,b)
 
rgb = range(0, 256, 10)
colors = [rgb2hex(z, z, z) for z in rgb]
 
img = Image.new('RGB', (ww, hh), (0, 0, 0))
draw = {}
draw[0] = ImageDraw.Draw(img)
blur_radius = 0.03 * min(img.size)
 
def display(new_img):
    tkimg = ImageTk.PhotoImage(new_img)
    canvas.create_image((cx, cy), image=tkimg)
    canvas.update()
 
root = Tk()
root.title(""tk_solidgrays_at16_ani"")
root.geometry(""%dx%d+10+10""%(ww,hh))
canvas = Canvas(root, width=ww, height=hh, bg='white')
canvas.pack(side=LEFT, fill=BOTH, expand=True)
 
sz = 16
span = ww//sz
c = 0
xy = range(0, sz*span, sz)
        
sharpening_masks = []

while 1:
    for y in xy:
        c = (c + 2) % 11
        for x in xy:
            color = colors.pop(c)
            colors.append(color)
            draw[0].rectangle((x, y, x+sz, y+sz), fill=color, outline=color)
            c = (c + 3) % 11

    draw['target'] = img.filter(ImageFilter.GaussianBlur(radius=blur_radius))

    # Apply a lambda function to round the RGB values to the nearest multiple of 30
    draw['target'] = draw['target'].point(lambda p: round(p / 30) * 30)

    display(draw['target'])

'''
	if draw['target'] not in sharpening_masks[:1]:
        sharpening_masks += [draw['target']]
    else:
        break

print(len(sharpening_masks))
'''
"
XDCa6kDs,Untitled,LadyFuzztail,C#,Friday 21st of July 2023 10:51:55 PM CDT,"class URPlayer : DoomPlayer
{
	int shieldMax;
	double shieldRechargeRate;
	int shieldRechargeDelay;
	int	armorBase;
	int armorMax;
	int nanitePool;
	property spMax : shieldMax;
	property spRate : shieldRechargeRate;
	property spDelay : shieldRechargeDelay;
	property apBase : armorBase;
	property apMax : armorMax;
	property npMax : nanitePool;
	
	Default
	{
		URPlayer.spMax 		25;
		URPlayer.spRate		7.5;
		URPlayer.spDelay	140;
		URPlayer.apBase		10;
		URPlayer.apMax		200;
		URPlayer.npMax		200;
	}
}

class ProtoPossPawn : URPlayer
{
	Default
	{
		Health					75;
		Player.MaxHealth 		75;
		Player.DisplayName 		""Odysseus"";
		URPlayer.spMax 			50;
		URPlayer.apBase			15;
		URPlayer.apMax			150;
		URPlayer.npMax			150;
	}
}

class CommandoPawn : URPlayer
{
	Default
	{
		Health					100;
		Player.MaxHealth		100;
		Player.DisplayName		""Isabel"";
		URPlayer.spMax			25;
		URPlayer.apBase			20;
		URPlayer.apMax			200;
		URPlayer.npMax			100;
	}
}

class ShieldHandler : EventHandler
{
	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.thing.player && !e.thing.FindInventory(""ShieldControl""))
			e.thing.GiveInventory(""ShieldControl"",1);
	}
}

class ShieldControl : Inventory
{
	int shieldRegenCD;
	double shieldRegenTics;
	
	Default
	{
		Inventory.MaxAmount		1;
		+Inventory.Undroppable
		+Inventory.Untossable
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		if (!owner)
			return;
		shieldRegenCD = 0;
		shieldRegenTics = 0.;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if (!owner || owner.player.health <= 0)
			return;
		if (owner is ""URPlayer"")
		{
			if ( shieldRegenCD > 0 )
			{
				--shieldRegenCD;
			} else {
				shieldRegenTics += (owner.spRate * 0.01 * owner.spMax);
				while ( shieldRegenTics > 1.0 && owner.CountInv(""ShieldPoints"") < owner.spMax )
				{
					owner.GiveInventory(""ShieldPoints"",1);
					shieldRegenTics -= 1.0;
				}
			}
		}
	}
}

class ShieldPoints : Inventory
{
	Default
	{
		Inventory.MaxAmount		9999;
		+Inventory.Undroppable
		+Inventory.Untossable
		+Inventory.KeepDepleted
	}
}"
gEkA8F5u,Day 26 query methods,HarrJ,Java,Friday 21st of July 2023 10:42:04 PM CDT,"package projectSamples;
import java.sql.*;

public class Day26Emp {
    public int addNewEmployee(String fName, String lName, String dept
        ,String phone, String sex, double salary, String bday){
        int rowsAffected = 0;
        String address = ""jdbc:mysql://localhost:3306/db_mng_b2"";
        String userName = ""root"";
        String passWord = """";
        String sqlQuery = ""INSERT INTO tbl_employee "" +
                ""(fld_fname ,fld_lname ,fld_work_dept""
                + "",fld_phone ,fld_sex ,fld_salary ,fld_birthday)"" +
                ""VALUES (? ,? ,? ,? ,? ,? ,?)"";
    
        try {
            Connection conn = DriverManager.getConnection(
                    address,userName,passWord);
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            
            stmt.setString(1, fName);
            stmt.setString(2, lName);
            stmt.setString(3, dept);
            stmt.setString(4, phone);
            stmt.setString(5, sex);
            stmt.setDouble(6, salary);
            stmt.setString(7, bday);
            
            rowsAffected = stmt.executeUpdate();
            
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    
        return rowsAffected;
    }
    
    public void getRows() {
        String address = ""jdbc:mysql://localhost:3306/db_mng_b2"";
        String userName = ""root"";
        String passWord = """";
        String sqlQuery = ""SELECT fld_enum""
                + "", fld_fname, fld_lname""
                + "", fld_work_dept, fld_phone""
                + "", fld_sex, fld_salary, fld_birthday""
                + "" FROM tbl_employee"";
        try {
            Connection conn = DriverManager.getConnection(
                    address,userName,passWord);
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                System.out.println(String.format(
                    ""%-3d | %-18s | %-18s | %-3s | %-18s | %1s | %9.4f | %-10s""
                    ,rs.getInt(1)
                    ,rs.getString(2)
                    ,rs.getString(3)
                    ,rs.getString(4)
                    ,rs.getString(5)
                    ,rs.getString(6)
                    ,rs.getDouble(7)
                    ,rs.getString(8)
                ));
            }
            
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void getRows(String searchDept) {
        //method override, select where by fld_work_dept
        String address = ""jdbc:mysql://localhost:3306/db_mng_b2"";
        String userName = ""root"";
        String passWord = """";
        String sqlQuery = ""SELECT fld_enum""
                + "", fld_fname, fld_lname""
                + "", fld_work_dept, fld_phone""
                + "", fld_sex, fld_salary, fld_birthday""
                + "" FROM tbl_employee""
                + "" WHERE fld_work_dept = ?"";
        try {
            Connection conn = DriverManager.getConnection(
                    address,userName,passWord);
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            
            stmt.setString(1, searchDept);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                System.out.println(String.format(
                    ""%-3d | %-18s | %-18s | %-3s | %-18s | %1s | %9.4f | %-10s""
                    ,rs.getInt(1)
                    ,rs.getString(2)
                    ,rs.getString(3)
                    ,rs.getString(4)
                    ,rs.getString(5)
                    ,rs.getString(6)
                    ,rs.getDouble(7)
                    ,rs.getString(8)
                ));
            }
            
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
    public void getRows(String searchParam, String searchField) {
        //method override, select where by fld_work_dept
        String fieldName = ""fld_fname"";
        switch (searchField) {
            case ""1"":
                fieldName = ""fld_fname"";
                break;
            case ""2"":
                fieldName = ""fld_lname"";
                break;
            case ""3"":
                fieldName = ""fld_work_dept"";
                break;
            case ""4"":
                fieldName = ""fld_sex"";
                break;
        }
        searchParam = ""%"" + searchParam + ""%"";
        
        String address = ""jdbc:mysql://localhost:3306/db_mng_b2"";
        String userName = ""root"";
        String passWord = """";
        String sqlQuery = ""SELECT fld_enum""
                + "", fld_fname, fld_lname""
                + "", fld_work_dept, fld_phone""
                + "", fld_sex, fld_salary, fld_birthday""
                + "" FROM tbl_employee""
                + "" WHERE "" + fieldName +"" LIKE ?"";
        try {
            Connection conn = DriverManager.getConnection(
                    address,userName,passWord);
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            
            stmt.setString(1, searchParam);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                System.out.println(String.format(
                    ""%-3d | %-18s | %-18s | %-3s | %-18s | %1s | %9.4f | %-10s""
                    ,rs.getInt(1)
                    ,rs.getString(2)
                    ,rs.getString(3)
                    ,rs.getString(4)
                    ,rs.getString(5)
                    ,rs.getString(6)
                    ,rs.getDouble(7)
                    ,rs.getString(8)
                ));
            }
            
            conn.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}"
4MhrTjgR,Day 26 SELECT,HarrJ,Java,Friday 21st of July 2023 10:41:21 PM CDT,"package projectSamples;
import java.util.Scanner;

public class Day26EmpB {
    //para sa select at select where
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Day26Emp callQuery = new Day26Emp();
        String opt = """";
        String searchParam = """";
        
        callQuery.getRows();
        
        System.out.println(""Do you want to search a row?"");
        System.out.println(""1 - by first name"");
        System.out.println(""2 - by last name"");
        System.out.println(""3 - by department"");
        System.out.println(""4 - by gender"");
        System.out.print(""Enter Choice: "");
        opt = sc.nextLine();
        System.out.println("""");
        
        switch (opt) {
            case ""1"":
                System.out.print(""Enter First Name: "");
                searchParam = sc.nextLine();
                callQuery.getRows(searchParam,""1"");
                break;
            case ""2"":
                System.out.print(""Enter Last Name: "");
                searchParam = sc.nextLine();
                callQuery.getRows(searchParam,""2"");
                break;
            case ""3"": 
                System.out.print(""Enter Department ID: "");
                searchParam = sc.nextLine();
                callQuery.getRows(searchParam);
                break;
                
            case ""4"":
                System.out.print(""Enter Gender: "");
                searchParam = sc.nextLine();
                callQuery.getRows(searchParam,""4"");
                break;
            default:
                System.out.println(""Option not found. Please try again."");
        }
    }
}
"
2V2yMSrt,Untitled,35657,C++,Friday 21st of July 2023 10:35:01 PM CDT,"#include <set>
#include <string>
#include <iostream>
#include <vector>

using namespace std;

// Служащий
class Employer {
public:

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

    virtual void Print() {
        cout << ""Я служащий"" << endl;
    }

    void SetName(string name) {
        name_ = name;
    }

    void SetAge(int age) {
        age_ = age;
    }

    void SetGender(string gender) {
        gender_ = gender;
    }

protected:
    string name_;
    int age_;
    string gender_;
};

class President : public Employer {
public:
    void Print() {
        cout << ""Я президент "" << endl;
    }
};

class Manager : public Employer {
public:
    void Print() {
        cout << ""Я менеджер"" << endl;
    }
};

class Worker : public Employer {
public:
    void Print() {
        cout << ""Я рабочий"" << endl;
    }
};

int main() {
    setlocale(LC_ALL, ""ru"");

    President pr;
    Manager mn;
    Worker wk;

    vector<Employer*> employers;

    employers.push_back(&pr);
    employers.push_back(&mn);
    employers.push_back(&wk);


    for (auto a : employers) {
        a->Print();
    }

}"
qSNwuK60,邀您一起看：AlienGPT https://chat.waixingyun.cn/#/home,xiaomianao666,JavaScript,Friday 21st of July 2023 10:16:01 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥AlienGPT https://chat.waixingyun.cn/#/home@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIlg1XCIsXCJwYXRoXCI6XCJ4NVwiLFwicnVsZVwiOlwianM6XFxudmFyIGQgPSBbXTtcXG5sZXQgdXJsID0gYmFzZTY0RGVjb2RlKGdldFBhcmFtKFxcXCJ1XFxcIikpO1xcbmxldCBqcyA9ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICB0cnkge1xcbiAgICAgICAgaWYgKGRvY3VtZW50LnRpdGxlICYmIGRvY3VtZW50LnRpdGxlLmxlbmd0aCkge1xcbiAgICAgICAgICAgIGxldCByID0gJCQkKCkubGF6eVJ1bGUoKHQpID0+IHtcXG4gICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKHQpO1xcbiAgICAgICAgICAgIH0sIGRvY3VtZW50LnRpdGxlICsgXFxcIiBcXFwiICsgbG9jYXRpb24uaHJlZik7XFxuICAgICAgICAgICAgZnlfYnJpZGdlX2FwcC5wYXJzZUxhenlSdWxlKHIpO1xcbiAgICAgICAgfVxcbiAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICBmeV9icmlkZ2VfYXBwLmxvZyhlLnRvU3RyaW5nKCkpO1xcbiAgICB9XFxufSk7XFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCJcXFwiLFxcbiAgICB1cmw6IHVybCxcXG4gICAgY29sX3R5cGU6IFxcXCJ4NV93ZWJ2aWV3X3NpbmdsZVxcXCIsXFxuICAgIGRlc2M6IFxcXCJmbG9hdCYmMTAwJVxcXCIsXFxuICAgIHBpY191cmw6IFxcXCJcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAganM6IGpzLFxcbiAgICAgICAgLy9mbG9hdFZpZGVvOiB0cnVlLFxcbiAgICAgICAgY2FuQmFjazogdHJ1ZSxcXG4gICAgICAgIGJsb2NrUnVsZXM6IFtcXFwiLmdpZlxcXCIsIFxcXCIvYWQvXFxcIiwgXFxcImdvb2dsZVxcXCIsIFxcXCIvc2gvdG8vXFxcIiwgXFxcIi5HSUZcXFwiXVxcbiAgICB9XFxufSk7XFxuc2V0UmVzdWx0KGQpO1wifV0sXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIkdQVOWkp+WFqFwiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImhpa2VyOi8vcGFnZS94NT9ydWxlPUdQVOWkp+WFqCZ1PWFIUjBjSE02THk5amFHRjBMbmRoYVhocGJtZDVkVzR1WTI0dlwiLFwiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcImZpbmRfcnVsZVwiOlwianM6XFxudmFyIGQgPSBbXTtcXG5sZXQgdXJsID0gYmFzZTY0RGVjb2RlKGdldFBhcmFtKFxcXCJ1XFxcIikpO1xcbmxldCBqcyA9ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICB0cnkge1xcbiAgICAgICAgaWYgKGRvY3VtZW50LnRpdGxlICYmIGRvY3VtZW50LnRpdGxlLmxlbmd0aCkge1xcbiAgICAgICAgICAgIGxldCByID0gJCQkKCkubGF6eVJ1bGUoKHQpID0+IHtcXG4gICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKHQpO1xcbiAgICAgICAgICAgIH0sIGRvY3VtZW50LnRpdGxlICsgXFxcIiBcXFwiICsgbG9jYXRpb24uaHJlZik7XFxuICAgICAgICAgICAgZnlfYnJpZGdlX2FwcC5wYXJzZUxhenlSdWxlKHIpO1xcbiAgICAgICAgfVxcbiAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICBmeV9icmlkZ2VfYXBwLmxvZyhlLnRvU3RyaW5nKCkpO1xcbiAgICB9XFxufSk7XFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCJcXFwiLFxcbiAgICB1cmw6IHVybCxcXG4gICAgY29sX3R5cGU6IFxcXCJ4NV93ZWJ2aWV3X3NpbmdsZVxcXCIsXFxuICAgIGRlc2M6IFxcXCJmbG9hdCYmMTAwJVxcXCIsXFxuICAgIHBpY191cmw6IFxcXCJcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAganM6IGpzLFxcbiAgICAgICAgLy9mbG9hdFZpZGVvOiB0cnVlLFxcbiAgICAgICAgY2FuQmFjazogdHJ1ZSxcXG4gICAgICAgIGJsb2NrUnVsZXM6IFtcXFwiLmdpZlxcXCIsIFxcXCIvYWQvXFxcIiwgXFxcImdvb2dsZVxcXCIsIFxcXCIvc2gvdG8vXFxcIiwgXFxcIi5HSUZcXFwiXVxcbiAgICB9XFxufSk7XFxuc2V0UmVzdWx0KGQpO1wiLFwiZ3JvdXBcIjpcIuWFtuWug1wiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwiXCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIlg1XFxcIixcXFwicGF0aFxcXCI6XFxcIng1XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxudmFyIGQgPSBbXTtcXFxcbmxldCB1cmwgPSBiYXNlNjREZWNvZGUoZ2V0UGFyYW0oXFxcXFxcXCJ1XFxcXFxcXCIpKTtcXFxcbmxldCBqcyA9ICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgIHRyeSB7XFxcXG4gICAgICAgIGlmIChkb2N1bWVudC50aXRsZSAmJiBkb2N1bWVudC50aXRsZS5sZW5ndGgpIHtcXFxcbiAgICAgICAgICAgIGxldCByID0gJCQkKCkubGF6eVJ1bGUoKHQpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUodCk7XFxcXG4gICAgICAgICAgICB9LCBkb2N1bWVudC50aXRsZSArIFxcXFxcXFwiIFxcXFxcXFwiICsgbG9jYXRpb24uaHJlZik7XFxcXG4gICAgICAgICAgICBmeV9icmlkZ2VfYXBwLnBhcnNlTGF6eVJ1bGUocik7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgIGZ5X2JyaWRnZV9hcHAubG9nKGUudG9TdHJpbmcoKSk7XFxcXG4gICAgfVxcXFxufSk7XFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgIHVybDogdXJsLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcIng1X3dlYnZpZXdfc2luZ2xlXFxcXFxcXCIsXFxcXG4gICAgZGVzYzogXFxcXFxcXCJmbG9hdCYmMTAwJVxcXFxcXFwiLFxcXFxuICAgIHBpY191cmw6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAganM6IGpzLFxcXFxuICAgICAgICAvL2Zsb2F0VmlkZW86IHRydWUsXFxcXG4gICAgICAgIGNhbkJhY2s6IHRydWUsXFxcXG4gICAgICAgIGJsb2NrUnVsZXM6IFtcXFxcXFxcIi5naWZcXFxcXFxcIiwgXFxcXFxcXCIvYWQvXFxcXFxcXCIsIFxcXFxcXFwiZ29vZ2xlXFxcXFxcXCIsIFxcXFxcXFwiL3NoL3RvL1xcXFxcXFwiLCBcXFxcXFxcIi5HSUZcXFxcXFxcIl1cXFxcbiAgICB9XFxcXG59KTtcXFxcbnNldFJlc3VsdChkKTtcXFwifV1cIixcInByb3h5XCI6XCJcIn0iLCJ0aXRsZSI6IkFsaWVuR1BUIGh0dHBzOi8vY2hhdC53YWl4aW5neXVuLmNuLyMvaG9tZSJ9
nv0UEUHe,Untitled,35657,C++,Friday 21st of July 2023 09:57:26 PM CDT,"#include <set>
#include <string>
#include <iostream>
#include <vector>

using namespace std;


// Человек
class Person {
public:
    Person(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

private:
    string name_;
    int age_;
    string gender_;
};




// Рабочий.Владеет несколькими специальностями
class Worker : public Person {
public:
    Worker(string name, int age, string gender) : Person(name, age, gender) {};

    void AddSpeciality(string speciality) {
        specialities_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialities_.count(speciality);
    }

    virtual string Work() {
        return ""Я работаю"";
    }

private:
    set<string> specialities_;
};

class Painter : public Worker {
public:
    Painter(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я крашу"";
    }
};

class Driver : public Worker {
public:
    Driver(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я везу"";
    }
};

class Builder : public Worker {
public:
    Builder(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я строю"";
    }
};

int main() {
    setlocale(LC_ALL, ""ru"");

    Painter pn(""Света"", 25, ""woman"");
    Driver dr(""Игорь"", 33, ""man"");
    Builder bd(""Женя"", 23, ""man"");

    vector<Worker*> workers;

    workers.push_back(&pn);
    workers.push_back(&dr);
    workers.push_back(&bd);

    for (auto a : workers) {
        cout << a->GetName() << "" "" << a->GetAge() << "" "" << a->GetGender() << "" "" << a->Work() << endl; // теперь все работает как надо
    }
}"
DUQyQYY1,Sorting Segments,danielvitor23,C++,Friday 21st of July 2023 09:22:32 PM CDT,"#include <bits/stdc++.h>
#define fi first
#define se second
using namespace std;
 
using i64 = long long;
 
const int INF = 0x3f3f3f3f;
 
template<class T>
class SegmentTree {
    struct Node {
        T val;
        Node(T x) : val(x) {}
        Node () : val(INF) {}
    };
    int N;
    std::vector<T> a;
    std::vector<Node> tr;
    Node neutral;
    inline Node join(const Node &a, const Node &b) {
        return Node(min(a.val, b.val));
    }
    void build(int node, int l, int r) {
        if (l == r) {
            tr[node] = Node(a[l]);
            return;
        }
        int mid = l+(r-l)/2, lc = (node << 1);
        build(lc, l, mid);
        build(lc+1, mid+1, r);
        tr[node] = join(tr[lc], tr[lc+1]);
    }
    Node query(int node, int l, int r, int ql, int qr) {
        if (r < l or qr < l or r < ql) return neutral;
        if (ql <= l and r <= qr) return tr[node];
        int mid = l+(r-l)/2, lc = (node << 1);
        return join(query(lc, l, mid, ql, qr), 
                    query(lc+1, mid+1, r, ql, qr));
    }
public:
    template<class MyIterator>
    SegmentTree (MyIterator begin, MyIterator end) {
        N = end-begin-1;
        tr.assign(4*N, 0);
        a = std::vector<T>(begin, end);
        build(1, 1, N);
    }
    SegmentTree (int n) : N(n) {
        tr.assign(4*N, 0);
        a.assign(N+1, 0);
    }
    T query(int l, int r) {
        return query(1, 1, N, l+1, r+1).val;
    }
};
 
vector<int> sort_cyclic_shifts(const string& s) {
  int n = s.size();
  const int alphabet = 256;
 
    vector<int> p(n), c(n), cnt(max(alphabet, n), 0);
    for (int i = 0; i < n; i++)
        cnt[s[i]]++;
    for (int i = 1; i < alphabet; i++)
        cnt[i] += cnt[i-1];
    for (int i = 0; i < n; i++)
        p[--cnt[s[i]]] = i;
    c[p[0]] = 0;
    int classes = 1;
    for (int i = 1; i < n; i++) {
        if (s[p[i]] != s[p[i-1]])
            classes++;
        c[p[i]] = classes - 1;
    }
 
    vector<int> pn(n), cn(n);
    for (int h = 0; (1 << h) < n; ++h) {
        for (int i = 0; i < n; i++) {
            pn[i] = p[i] - (1 << h);
            if (pn[i] < 0)
                pn[i] += n;
        }
        fill(cnt.begin(), cnt.begin() + classes, 0);
        for (int i = 0; i < n; i++)
            cnt[c[pn[i]]]++;
        for (int i = 1; i < classes; i++)
            cnt[i] += cnt[i-1];
        for (int i = n-1; i >= 0; i--)
            p[--cnt[c[pn[i]]]] = pn[i];
        cn[p[0]] = 0;
        classes = 1;
        for (int i = 1; i < n; i++) {
            pair<int, int> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};
            pair<int, int> prev = {c[p[i-1]], c[(p[i-1] + (1 << h)) % n]};
            if (cur != prev)
                ++classes;
            cn[p[i]] = classes - 1;
        }
        c.swap(cn);
    }
    return p;
}
 
vector<int> suffix_array_construction(string s) {
  s += ""$"";
  vector<int> sorted_shifts = sort_cyclic_shifts(s);
  sorted_shifts.erase(sorted_shifts.begin());
  return sorted_shifts;
}
 
vector<int> lcp_construction(string const& s, vector<int> const& p) {
  int n = s.size();
  vector<int> rank(n, 0);
  for (int i = 0; i < n; i++)
      rank[p[i]] = i;
 
  int k = 0;
  vector<int> lcp(n-1, 0);
  for (int i = 0; i < n; i++) {
      if (rank[i] == n - 1) {
          k = 0;
          continue;
      }
      int j = p[rank[i] + 1];
      while (i + k < n && j + k < n && s[i+k] == s[j+k])
          k++;
      lcp[rank[i]] = k;
      if (k)
          k--;
  }
  return lcp;
}
 
int n;
 
int main() {
  cin.tie(0)->sync_with_stdio(0);
 
  string s; cin >> s;

  n = s.size();

  if (n == 1) {
    int m; cin >> m;
    while (m--) {
      int l, r; cin >> l >> r;
      cout << l << ' ' << r << '\n';
    }

    return 0;
  }
 
  vector<int> SA = suffix_array_construction(s);
  vector<int> lcp = lcp_construction(s, SA);
 
  lcp.insert(lcp.begin(), 0);
  SegmentTree<int> ST(lcp.begin(), lcp.end());
  
  vector<pair<int, int>> v;
 
  int m; cin >> m;
  while (m--) {
    int l, r; cin >> l >> r, --l, --r;
    v.push_back({l, r});
  }
 
  vector<int> rank(n, 0);
  for (int i = 0; i < n; ++i) {
    rank[SA[i]] = i;
  }

  sort(v.begin(), v.end(), [&](pair<int, int> a, pair<int, int> b) {
    int sza = a.se - a.fi + 1, szb = b.se - b.fi + 1;

    int k = rank[a.fi] == rank[b.fi]
      ? min(sza, szb)
      : (rank[a.fi] < rank[b.fi]
        ? ST.query(rank[a.fi], rank[b.fi] - 1)
        : ST.query(rank[b.fi], rank[a.fi] - 1));

    k = min({ k, sza, szb });

    if (k == sza and k == szb)
      return a < b;
    if (k == sza or k == szb)
      return k == sza;
 
    char ca = s[a.fi + k], cb = s[b.fi + k];
 
    return ca < cb;
  });
 
  for (auto [a, b] : v) {
    cout << 1+a << "" "" << 1+b << '\n';
  }
}"
1UTsnmLS,Untitled,35657,C++,Friday 21st of July 2023 09:18:29 PM CDT,"#include <set>
#include <string>
#include <iostream>

using namespace std;
class Pet {
public:

    Pet(string name, int age, string  color) : name_(name), age_(age), color_(color) {};

    string GetName() const {
        return name_;
    }


    int GetAge() const {
        return age_;
    }


    string GetColor() const {
        return color_;
    }



private:
    string name_;
    int age_;
    string color_;
};

class Dog : public Pet {
public:
    Dog(string name, int age, string color) : Pet(name, age, color) {};

    void AddFood(string food) {
        food_.insert(food);
    }
    bool CanEat(string food) const {
        return food_.count(food);
    }

    void SetMove(string move) {
        move_.insert(move);
    }

    bool CanMove(string move)const {
        return move_.count(move);
    }

    void ShowMove() {
        for (auto a : move_) {
            cout << a << "" "";
        }
        cout << endl;
     }

    void ShowEat() {
        for (auto a : food_) {
            cout << a << "" "";
        }
        cout << endl;
    }


private:
    set<string> food_;
    set<string> move_;
};


int main() {
    setlocale(LC_ALL, ""ru"");

    Dog my_dog(""Dingo"", 4, ""black"");
    my_dog.AddFood(""meat"");
    my_dog.SetMove(""run"");
    cout << ""my favourite dog is "" << my_dog.GetName() << "" "" << ""it is"" << "" "" << my_dog.GetAge() << "" years old"" << endl;
    cout << ""Yur dog can eat meat? "" << endl;
    cout << boolalpha << my_dog.CanEat(""meat"") << endl;
    cout << my_dog.GetName() << "" "" << ""like"" << "" "" << my_dog.CanMove(""run"") << endl;


    my_dog.AddFood(""milk"");
    my_dog.AddFood(""chiken"");

    my_dog.ShowEat();
}"
ciiUaG4g,Day 26 INSERT INTO query via java,HarrJ,Java,Friday 21st of July 2023 08:53:47 PM CDT,"package projectSamples;
import java.util.Scanner;

public class Day26EmpA {
    //para sa insert
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Day26Emp callQuery = new Day26Emp();
        String fName, lName, dept, phone, sex, bday;
        double salary;
        int rowsAffected = 0;
        
        System.out.println(""***Add new employee***"");
        //nilagay sa try catch para pag may maling input, di tutuloy
        try {
            System.out.print(""First Name: "");
            fName = sc.nextLine();
            System.out.print(""Last Name: "");
            lName = sc.nextLine();
            System.out.print(""Dept(ADG/XVN/RTG): "");
            dept = sc.nextLine();
            System.out.print(""Phone: "");
            phone = sc.nextLine();
            System.out.print(""Sex: "");
            sex = sc.nextLine();
            System.out.print(""Salary: "");
            salary = sc.nextDouble();
            sc.nextLine();
            System.out.print(""Birthday(YYYY-MM-DD): "");
            bday = sc.nextLine();

            rowsAffected = callQuery.addNewEmployee(fName, lName, dept, phone, sex, salary, bday);
        } catch (Exception e) {
            
        }
        if (rowsAffected == 1) {
            System.out.println(""New Employee Recorded"");
        } else {
            System.out.println(""Record Failed"");
        }
    }
}"
ScX1x8Jz,Cart Controller,backlight0815,PHP,Friday 21st of July 2023 08:51:11 PM CDT,"public function checkout(Request $request)
    {

        // Get the authenticated user ID
        $userId = Auth::id();
        $cartItems = Cart::where('user_id', $userId)->get();

        // Get the total amount from the form submission
        $totalAmount = $request->input('total_amount');

            // Get the cart items for the authenticated user

        $cartItems = Cart::where('user_id', $userId)->get();

          // Check if there are any cart items
    if (!$cartItems) {
        // Handle the case when there are no cart items
        // You may redirect back with an error message or perform other actions
        return redirect()->back()->with('error', 'Your cart is empty.');
    }

        // Step 1: Create an order
        $order = new orders();
        $order->user_id = $userId;
        $order->total_amount = $totalAmount;
        $order->save();

 // Step 2: Create order items
 foreach ($cartItems as $cartItem) {
    $orderItem = new order_items();
    $orderItem->product_id = $cartItem->product_id;
    $orderItem->order_id = $order->id;
    $orderItem->user_id = $userId;
    $orderItem->quantity = $cartItem->quantity;
    $orderItem->save();

       // Deduct product_stock for the ordered product
       $product = Product::find($cartItem->product_id);
       if ($product) {
           $product->product_stock -= $cartItem->quantity;
           $product->save();
       }
}

        // Step 3: Store the transaction (payment receipt)
        $transaction = new transactions();
        $transaction->order_id = $order->id;
        $transaction->user_id = $userId;

        $image = $request->file('receipt');
        $imageName = $image->getClientOriginalName();
        $image->move(public_path('upload/payment_proof/'),$imageName);

        $transaction->payment_proof = $imageName;

        // Image upload logic


// if ($request->hasFile('receipt')) {
//     $image = $request->file('receipt');
//     $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
//     Image::make($image)->resize(430, 327)->save('upload/payment_proof/' . $name_gen);
//     $save_url = 'upload/payment_proof/' . $name_gen;
//     $transaction->payment_proof = $save_url;
// }
        // Handle the receipt file upload and store its path in the 'payment_proof' field.
        // Example: $transaction->payment_proof = $request->file('receipt')->store('receipts');

          // Image upload logic

        $transaction->save();







        // Clear the cart or perform any other required actions.
 // Clear the cart items
 Cart::where('user_id', $userId)->delete();
        // Redirect to a success page after successful checkout
        $notification = array(
            'message' => 'Make payment successfully',
            'alert-type' => 'success'
        );

        // Proceed with any other necessary steps

        return redirect()->back()->with($notification);
    }"
rZcff8zz,Dropzone Configuration and Form,backlight0815,PHP,Friday 21st of July 2023 08:49:56 PM CDT,"<form action=""{{ route('checkout') }}"" method=""post"" class=""dropzone"" id=""receiptDropzone"" enctype=""multipart/form-data"">
    @csrf
    @if($hasProducts)

    @foreach($cartItem as $item)
    <input type=""hidden"" name=""product_names[]"" value=""{{ $item->product->product_name }}"">
    <input type=""hidden"" name=""product_prices[]"" value=""{{ $item->product->product_price }}"">
    <input type=""hidden"" id=""hidden_quantity_{{ $item->id }}"" name=""quantities[]"" value=""{{ $item->quantity }}"">
    <input type=""hidden"" id=""subtotal_{{ $item->id }}"" name=""subtotals[]"" value=""{{ $item->subtotal }}"">
    <input type=""hidden"" name=""total_amount"" value=""{{ $total }}""> <!-- Assuming $total holds the total amount value -->

    @foreach($cartItem as $item)
        <input type=""hidden"" name=""cart_items[]"" value=""{{ json_encode(['product_id' => $item->product->id, 'quantity' => $item->quantity]) }}"">
    @endforeach

@endforeach
@endif

<div class=""fallback"">
    <input name=""receipt"" type=""file"" accept=""image/jpeg,image/png,application/pdf"">
</div>
<div class=""dz-message needsclick"">
    <div class=""mb-3"">
        <i class=""display-4 text-muted ri-upload-cloud-2-line""></i>
    </div>
    <h4>Please upload your receipts.</h4>
</div>
<input type=""hidden"" name=""total_amount"" id=""totalAmountInput"">


<div class=""text-center mt-4"">
    <button type=""submit"" id=""checkout"" name=""checkout_button"" class=""btn btn-warning btn-rounded waves-effect waves-light"">Proceed to Checkout</button>
</div>
</form>



// <!-- Dropzone configuration -->
Dropzone.autoDiscover = false;
    const myDropzone = new Dropzone(""#receiptDropzone"", {

        autoProcessQueue: false, // Disable auto-upload
        maxFiles: 1, // Allow only one file to be uploaded
        addRemoveLinks: true,
        renameFile: function(file) {
                var dt = new Date();
                var time = dt.getTime();
               return time+file.name;
            },

        // Other Dropzone options if needed
        init: function () {
            const submitButton = document.querySelector(""#checkout"");
            const form = this; // ""this"" refers to the dropzone instance

            submitButton.addEventListener(""click"", function (event) {
                event.preventDefault();
                event.stopPropagation();
                form.processQueue(); // Process the queue manually

                // Listen for the success event when all files are uploaded
                form.on(""success"", function (file, response) {
                    // Assuming the response contains the notification data
                    const notification = response.notification;
                    if (notification && notification.message) {
                        // Display the notification message using your preferred method
                        alert(notification.message);
                    }

                    // Redirect after successful checkout
                    window.location.href = ""{{ route('success.checkout') }}""; // Replace with your success page route
                });
            });


        // Listen to the addedfile event to handle file upload and saving
        this.on(""addedfile"", function (file) {
                    // Make sure to remove any previously uploaded file
                    if (this.files.length > 1) {
                        this.removeFile(this.files[0]);
                    }

                    // Trigger the form submission when the user adds a file
                    form.processQueue();
                });




        },
    });

"
vbGKTivc,Untitled,AndreyMpr,JavaScript,Friday 21st of July 2023 08:44:54 PM CDT,"<!DOCTYPE html>
<html>
<head>
    <title>鉄筋コンクリートマンション建設費シミュレーション</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }
        form input[type=""number""] {
            max-width: 90%;
        }
        .container {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        form {
            width: 800px;
            margin: 01px;
            border: 1px solid #ccc;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            background-color: #fff;
            padding: 20px;
        }
        .input-section, .output-section {
            display: inline-block;
            vertical-align: top;
        }
        .input-section {
            position: center;
            margin-right: 35px;
            margin-left: 10px;
            
        }
        .output-section {
            margin-left: 0px;
        }
        label {
            display: contents;
            font-weight: bold;
            color: #333;
        }
        input {
            display: block;
            width: 95%;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
        }
        .input-section {
            max-width: 60%;
        }
        .button-container {
            display:flex;
            max-width: 90%;
        }
        
         button{
          margin-top :10px ;
          border-radius :5px ;
          border:none ;
          cursor:pointer
         }
         
         #calculate-btn{
          flex-grow :2 ;
          margin-right :5px ;
          background-color :#eb6321 ;
          color:#fff ;
          padding :10px
         }
         
         #reset-btn{
          flex-grow :1 ;
          background-color :#333 ;
          color:#fff ;
          padding :10px
         }
         
         button:hover{
          transform :scale(0.95);
          transition :all .3s ease
         }

        #long-text {
          position: fixed;
        }
        .output {
          font-size: 1.5em;
          color: #eb6321;
         }

        .hidden {
          display: none;
         }

        .land-inputs {
          display: flex;
          margin-right: 20px;
          gap: 5px;
          
         }

        .land-inputs > div {
            
          flex: 1;
          
         }


    </style>
</head>
<body>
    <div class=""container"">
        <form>
            <div class=""input-section"">
                <div class=""land-inputs"">
                    <div>
                        <label for=""tsubo"">土地（坪）:</label><br>
                        <input type=""number"" id=""tsubo"" name=""tsubo"" min=""1"" max=""9999"">
                    </div>
                    <div>
                        <label for=""x"">土地（㎡）:</label><br>
                        <input type=""number"" id=""x"" name=""x"" min=""1"" max=""9999"">
                    </div>
                </div>
                

                <label for=""y"">建ぺい率（%）:</label><br>
                <input type=""number"" id=""y"" name=""y""><br>
                <label for=""z"">容積率（%）:</label><br>
                <input type=""number"" id=""z"" name=""z""><br><br>
                <div class=""button-container"">
                    <button id=""calculate-btn"" type=""button"" onclick=""checkInput(event)"">計算する</button>
                    <button id=""reset-btn"" type=""button"" onclick=""reset(event)"">リセット</button>

                </div>
                <br>
                <br>
                <div id=""long-text"">※「ペリ辛」や「容積率」に所有地が所在する自治体にお問い合わせ下さい。</div>
                <br>
                <div id=""long-text"" style=""margin-top: 5px;"">　　所有地が東京都やさいたま市に所所在する場合は<a href=""https://www2.wagmap.jp/tokyo_tokeizu/Portal""> こちら</a>で調べる事が可能です。</div>
                <br>
                <br>
                <div>※ 未入力の場合は建ぺい率 50%、容積率 200%で計算します。</div>
                <div style=""display:flex;"">
                    <a href=""#03"" style=""color: #0062c4 ;""><svg xmlns=""http://www.w3.org/2000/svg"" height=""1.1em""; viewBox=""0 0 512 512""><!--! Font Awesome Free 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><style>svg{fill:#0062c4}</style><path d=""M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm169.8-90.7c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V250.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H222.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z""/></svg>「建ぺい率」「容積率」とは？</a>
                </div>
            </div>
  
            <div class=""output-section"">
              <label for=""f"">建築面積:</label>
              <span id=""f"" class=""output""></span><span class=""hidden output"">㎡</span><br>
              <br>

              <label for=""g"">延べ床面積:</label>
              <span id=""g"" class=""output""></span><span class=""hidden output"">㎡</span><br>
              <br>

              <label for=""h"">階数:</label>
              <span id=""h"" class=""output""></span><span class=""hidden output"">階建て</span><br>
              <br>

              <label for=""j"">建設費:</label>
              <span id=""j"" class=""output""></span><br>
              
            </div>
            
  
        </form>
    </div>

    <script>
        document.getElementById(""tsubo"").addEventListener(""input"", function() {
            if (this.value) {
                document.getElementById(""x"").disabled = true;
            } else {
                document.getElementById(""x"").disabled = false;
            }
        });

        document.getElementById(""x"").addEventListener(""input"", function() {
            if (this.value) {
                document.getElementById(""tsubo"").disabled = true;
            } else {
                document.getElementById(""tsubo"").disabled = false;
            }
        });

        function checkInput(event) {
            event.preventDefault();
            let y = document.getElementById(""y"").value;
            let z = document.getElementById(""z"").value;
            if (y === """") {
                document.getElementById(""y"").value = 50;
            }
            if (z === """") {
                document.getElementById(""z"").value = 200;
            }
            calculate();
            
          }
  
          function calculate() {
            let tsubo = document.getElementById(""tsubo"").value;
            let x = document.getElementById(""x"").value;
            if (tsubo) {
                x = tsubo * 3.30579;
            }
            let y = document.getElementById(""y"").value;
            let z = document.getElementById(""z"").value;
  
            if (isNaN(x) || isNaN(y) || isNaN(z) || x < 1 || x > 9999 || y < 1 || y > 9999 || z < 1 || z > 9999) {
                alert(""入力値が無効です。1から9999の数値を入力してください。"");
                return;
            }
            

            //document.getElementById(""f"").textContent = x * (y / 100);
            
            document.getElementById(""f"").textContent = Math.ceil(x * (y / 100) * 100) / 100;

            
            //document.getElementById(""g"").textContent = x * (z / 100);
            
            document.getElementById(""g"").textContent = Math.ceil(x * (z / 100) * 100) / 100;

            
            //document.getElementById(""h"").textContent = (x * (z / 100)) / (x * (y / 100));
            
            //Rounding up number of floors. The one commented out before is the original. The one after is rounding up.
            
            document.getElementById(""h"").textContent = Math.ceil((x * (z / 100)) / (x * (y / 100)));

            document.querySelector('form').addEventListener('submit', function(event) {
            event.preventDefault();
            });


  
            //let constructionCost = (x * (z / 100))*0.3025*120;
            
            let constructionCost = Math.ceil((x * (z / 100))*0.3025*120);

            if (constructionCost >= 10000) {
                let oku = Math.floor(constructionCost / 10000);
                let man = constructionCost % 10000;
                document.getElementById(""j"").textContent = oku + ""億"" + man + ""万円"";
            } else {
                document.getElementById(""j"").textContent = constructionCost + ""万円"";
            }
                // Remove the hidden class from the strings
                document.querySelectorAll('.hidden').forEach(el => el.classList.remove('hidden'));
        }
  
        function reset(event) {
          event.preventDefault();
          document.getElementById(""x"").value = """";
          document.getElementById(""y"").value = """";
          document.getElementById(""z"").value = """";
          document.getElementById(""f"").textContent = """";
          document.getElementById(""g"").textContent = """";
          document.getElementById(""h"").textContent = """";
          document.getElementById(""j"").textContent = """";
  
              // Add the hidden class back to the strings
          document.querySelectorAll('.hidden').forEach(el => el.classList.add('hidden'));
        }
        
      </script>
  
  </body>
  </html>
    </script>
</body>
</html>
"
CBtr2eXQ,2023-07-21_stats.json,rdp_snitch,JSON,Friday 21st of July 2023 07:18:09 PM CDT,"{
  ""ip"": {
    ""85.14.32.53"": 11292,
    ""198.235.24.52"": 9,
    ""34.125.145.132"": 3,
    ""87.251.75.145"": 12,
    ""58.218.204.51"": 12,
    ""209.146.28.26"": 3,
    ""137.184.166.42"": 3,
    ""104.200.20.152"": 6,
    ""185.73.124.50"": 6,
    ""164.92.158.134"": 3,
    ""45.79.108.4"": 18,
    ""80.66.76.193"": 3,
    ""39.108.174.140"": 48,
    ""139.99.69.92"": 3,
    ""62.204.41.134"": 12,
    ""139.162.30.215"": 6,
    ""31.43.185.32"": 24,
    ""146.70.187.100"": 9,
    ""185.170.144.3"": 6,
    ""87.251.75.120"": 3,
    ""139.162.6.28"": 3,
    ""167.172.76.60"": 3,
    ""54.255.59.73"": 60,
    ""213.6.148.83"": 3,
    ""45.79.65.243"": 36,
    ""60.250.29.35"": 45,
    ""45.119.81.119"": 3,
    ""45.140.17.16"": 18,
    ""47.102.201.13"": 9,
    ""106.116.169.71"": 3,
    ""157.7.91.25"": 27,
    ""185.156.72.37"": 6,
    ""62.122.184.168"": 12,
    ""62.122.184.166"": 12,
    ""87.251.75.64"": 3,
    ""205.210.31.45"": 9,
    ""87.251.64.110"": 6,
    ""51.75.160.42"": 6,
    ""37.32.4.138"": 3,
    ""139.162.2.233"": 3,
    ""167.94.145.59"": 3,
    ""205.210.31.75"": 9,
    ""193.169.255.152"": 6
  },
  ""asn"": {
    ""AS34376"": 11292,
    ""AS396982"": 30,
    ""AS208091"": 27,
    ""AS4134"": 15,
    ""AS135607"": 3,
    ""AS14061"": 9,
    ""AS63949"": 72,
    ""AS37963"": 57,
    ""AS16276"": 9,
    ""AS59425"": 12,
    ""AS211736"": 24,
    ""AS9009"": 9,
    ""AS48080"": 12,
    ""AS16509"": 60,
    ""AS12975"": 3,
    ""AS3462"": 45,
    ""AS131386"": 3,
    ""AS198953"": 18,
    ""AS7506"": 27,
    ""AS61432"": 6,
    ""AS57523"": 24,
    ""AS202468"": 3,
    ""AS398705"": 3,
    ""AS198810"": 6
  },
  ""isp"": {
    ""Telecom Group"": 11292,
    ""Google LLC"": 30,
    ""XHOST-INTERNET-SOLUTIONS"": 27,
    ""Chinanet"": 15,
    ""Cogent Communications"": 3,
    ""DigitalOcean, LLC"": 9,
    ""Akamai Technologies, Inc."": 60,
    ""Hangzhou Alibaba Advertising Co"": 48,
    ""OVH SAS"": 9,
    ""Horizon LLC"": 12,
    ""LINODE"": 12,
    ""FOP Dmytro Nedilskyi"": 24,
    ""M247 Europe SRL"": 9,
    ""Dmitriy Panchenko"": 12,
    ""Amazon Technologies Inc."": 60,
    ""Palestine Telecommunications Company"": 3,
    ""Chunghwa Telecom Co., Ltd."": 45,
    ""Long Van System Solution"": 3,
    ""Proton66 OOO"": 18,
    ""Addresses CNNIC"": 9,
    ""GMO Internet, Inc"": 27,
    ""TOV VAIZ PARTNER"": 6,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 3,
    ""Censys, Inc."": 3,
    ""Agata Grabowska trading as FUFO Studio"": 6
  },
  ""org"": {
    ""TelecomGroup"": 11292,
    ""Palo Alto Networks, Inc"": 27,
    ""Google Cloud (us-west4)"": 3,
    ""Xhost Internet Solutions"": 27,
    ""Chinanet JS"": 12,
    ""IPS, Inc"": 3,
    ""DigitalOcean, LLC"": 9,
    ""Linode"": 60,
    ""Xhostis"": 12,
    ""Aliyun Computing Co., LTD"": 57,
    ""OVH Singapore PTE. LTD"": 3,
    ""Horizon LLC"": 12,
    ""Linode, LLC"": 12,
    ""FOP Dmytro Nedilskyi"": 24,
    ""M247 Ltd Miami"": 9,
    ""AWS EC2 (ap-southeast-1)"": 60,
    ""Palestine Telecommunications Company"": 3,
    ""Chunghwa Telecom Co. Ltd."": 45,
    ""Unknown"": 3,
    ""Proton66 LLC"": 18,
    ""Chinanet HE"": 3,
    ""GMO Internet, Inc."": 27,
    ""TOV VAIZ PARTNER"": 6,
    ""Chang Way Technologies Co. Limited"": 24,
    ""OVH Ltd"": 6,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 3,
    ""Censys, Inc."": 3,
    ""FUFO Studio"": 6
  },
  ""regionName"": {
    ""Blagoevgrad"": 11292,
    ""California"": 81,
    ""Nevada"": 3,
    ""North Holland"": 27,
    ""Jiangsu"": 12,
    ""Metro Manila"": 3,
    ""Ontario"": 3,
    ""Texas"": 6,
    ""England"": 9,
    ""Guangdong"": 48,
    ""Central Singapore"": 66,
    ""Moscow"": 66,
    ""North West"": 9,
    ""Kyiv City"": 30,
    ""Florida"": 9,
    ""South West"": 3,
    ""Rafah"": 3,
    ""Taipei City"": 45,
    ""Ho Chi Minh"": 3,
    ""Shanghai"": 9,
    ""Hebei"": 3,
    ""Tokyo"": 27,
    ""Tehran"": 3,
    ""Hesse"": 3,
    ""Mazovia"": 6
  },
  ""country"": {
    ""Bulgaria"": 11292,
    ""United States"": 99,
    ""Netherlands"": 27,
    ""China"": 72,
    ""Philippines"": 3,
    ""Canada"": 3,
    ""United Kingdom"": 9,
    ""Singapore"": 78,
    ""Russia"": 66,
    ""Ukraine"": 30,
    ""Palestine"": 3,
    ""Taiwan"": 45,
    ""Vietnam"": 3,
    ""Japan"": 27,
    ""Iran"": 3,
    ""Germany"": 3,
    ""Poland"": 6
  },
  ""account"": {
    ""hello"": 11586,
    ""jGKMMqkVU"": 3,
    ""WBTymX"": 3,
    ""HVooSy"": 3,
    ""Administr"": 63,
    ""beio"": 3,
    ""Almaz"": 3,
    ""Test"": 12,
    ""Domain"": 69,
    ""(empty)"": 6,
    ""HcnsfSfrw"": 3,
    ""BEwCsg"": 3,
    ""arUmzz"": 3,
    ""bKVuUpDcB"": 3,
    ""LKvUtm"": 3,
    ""RSirQl"": 3
  },
  ""keyboard"": {
    ""Unknown"": 11769
  },
  ""client_build"": {
    ""Unknown"": 11769
  },
  ""client_name"": {
    ""Unknown"": 11769
  },
  ""ip_type"": {
    ""Unknown"": 11478,
    ""hosting"": 255,
    ""proxy"": 12,
    ""hosting & proxy"": 24
  }
}"
esT3Bh33,VFX and Hitbox (Psychic Battlegrounds),SaviorTonitruum,Lua,Friday 21st of July 2023 07:17:05 PM CDT,"local hitbox = Instance.new(“Part”, char)
hitbox.Size = Vector3.one * 10
hitbox.Anchored = true
hitbox.CanCollide = false
hitbox.Transparency = 0.5
hitbox.CFrame = char.HumanoidRootPart.CFrame

hitbox.Touched:Connect(function(hit)
if hit.Parent:FindFirstChild(“Humanoid”) then
if hit.Name == “HumanoidRootPart” then
if hit.Parent.Name ~= char.Name then
local ehumanoid = hit:FindFirstChild(“Humanoid”)
ehumanoid:TakeDamage(20)
end
end
end
end)

wait(0.35)
hitbox:Destroy()"
V9SgxGCC,2023-07-21_stats.json,rdp_snitch,JSON,Friday 21st of July 2023 07:16:08 PM CDT,"{
  ""ip"": {
    ""85.14.32.53"": 7528,
    ""198.235.24.52"": 6,
    ""34.125.145.132"": 2,
    ""87.251.75.145"": 8,
    ""58.218.204.51"": 8,
    ""209.146.28.26"": 2,
    ""137.184.166.42"": 2,
    ""104.200.20.152"": 4,
    ""185.73.124.50"": 4,
    ""164.92.158.134"": 2,
    ""45.79.108.4"": 12,
    ""80.66.76.193"": 2,
    ""39.108.174.140"": 32,
    ""139.99.69.92"": 2,
    ""62.204.41.134"": 8,
    ""139.162.30.215"": 4,
    ""31.43.185.32"": 16,
    ""146.70.187.100"": 6,
    ""185.170.144.3"": 4,
    ""87.251.75.120"": 2,
    ""139.162.6.28"": 2,
    ""167.172.76.60"": 2,
    ""54.255.59.73"": 40,
    ""213.6.148.83"": 2,
    ""45.79.65.243"": 24,
    ""60.250.29.35"": 30,
    ""45.119.81.119"": 2,
    ""45.140.17.16"": 12,
    ""47.102.201.13"": 6,
    ""106.116.169.71"": 2,
    ""157.7.91.25"": 18,
    ""185.156.72.37"": 4,
    ""62.122.184.168"": 8,
    ""62.122.184.166"": 8,
    ""87.251.75.64"": 2,
    ""205.210.31.45"": 6,
    ""87.251.64.110"": 4,
    ""51.75.160.42"": 4,
    ""37.32.4.138"": 2,
    ""139.162.2.233"": 2,
    ""167.94.145.59"": 2,
    ""205.210.31.75"": 6,
    ""193.169.255.152"": 4
  },
  ""asn"": {
    ""AS34376"": 7528,
    ""AS396982"": 20,
    ""AS208091"": 18,
    ""AS4134"": 10,
    ""AS135607"": 2,
    ""AS14061"": 6,
    ""AS63949"": 48,
    ""AS37963"": 38,
    ""AS16276"": 6,
    ""AS59425"": 8,
    ""AS211736"": 16,
    ""AS9009"": 6,
    ""AS48080"": 8,
    ""AS16509"": 40,
    ""AS12975"": 2,
    ""AS3462"": 30,
    ""AS131386"": 2,
    ""AS198953"": 12,
    ""AS7506"": 18,
    ""AS61432"": 4,
    ""AS57523"": 16,
    ""AS202468"": 2,
    ""AS398705"": 2,
    ""AS198810"": 4
  },
  ""isp"": {
    ""Telecom Group"": 7528,
    ""Google LLC"": 20,
    ""XHOST-INTERNET-SOLUTIONS"": 18,
    ""Chinanet"": 10,
    ""Cogent Communications"": 2,
    ""DigitalOcean, LLC"": 6,
    ""Akamai Technologies, Inc."": 40,
    ""Hangzhou Alibaba Advertising Co"": 32,
    ""OVH SAS"": 6,
    ""Horizon LLC"": 8,
    ""LINODE"": 8,
    ""FOP Dmytro Nedilskyi"": 16,
    ""M247 Europe SRL"": 6,
    ""Dmitriy Panchenko"": 8,
    ""Amazon Technologies Inc."": 40,
    ""Palestine Telecommunications Company"": 2,
    ""Chunghwa Telecom Co., Ltd."": 30,
    ""Long Van System Solution"": 2,
    ""Proton66 OOO"": 12,
    ""Addresses CNNIC"": 6,
    ""GMO Internet, Inc"": 18,
    ""TOV VAIZ PARTNER"": 4,
    ""Chang Way Technologies Co. Limited"": 16,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""Censys, Inc."": 2,
    ""Agata Grabowska trading as FUFO Studio"": 4
  },
  ""org"": {
    ""TelecomGroup"": 7528,
    ""Palo Alto Networks, Inc"": 18,
    ""Google Cloud (us-west4)"": 2,
    ""Xhost Internet Solutions"": 18,
    ""Chinanet JS"": 8,
    ""IPS, Inc"": 2,
    ""DigitalOcean, LLC"": 6,
    ""Linode"": 40,
    ""Xhostis"": 8,
    ""Aliyun Computing Co., LTD"": 38,
    ""OVH Singapore PTE. LTD"": 2,
    ""Horizon LLC"": 8,
    ""Linode, LLC"": 8,
    ""FOP Dmytro Nedilskyi"": 16,
    ""M247 Ltd Miami"": 6,
    ""AWS EC2 (ap-southeast-1)"": 40,
    ""Palestine Telecommunications Company"": 2,
    ""Chunghwa Telecom Co. Ltd."": 30,
    ""Unknown"": 2,
    ""Proton66 LLC"": 12,
    ""Chinanet HE"": 2,
    ""GMO Internet, Inc."": 18,
    ""TOV VAIZ PARTNER"": 4,
    ""Chang Way Technologies Co. Limited"": 16,
    ""OVH Ltd"": 4,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""Censys, Inc."": 2,
    ""FUFO Studio"": 4
  },
  ""regionName"": {
    ""Blagoevgrad"": 7528,
    ""California"": 54,
    ""Nevada"": 2,
    ""North Holland"": 18,
    ""Jiangsu"": 8,
    ""Metro Manila"": 2,
    ""Ontario"": 2,
    ""Texas"": 4,
    ""England"": 6,
    ""Guangdong"": 32,
    ""Central Singapore"": 44,
    ""Moscow"": 44,
    ""North West"": 6,
    ""Kyiv City"": 20,
    ""Florida"": 6,
    ""South West"": 2,
    ""Rafah"": 2,
    ""Taipei City"": 30,
    ""Ho Chi Minh"": 2,
    ""Shanghai"": 6,
    ""Hebei"": 2,
    ""Tokyo"": 18,
    ""Tehran"": 2,
    ""Hesse"": 2,
    ""Mazovia"": 4
  },
  ""country"": {
    ""Bulgaria"": 7528,
    ""United States"": 66,
    ""Netherlands"": 18,
    ""China"": 48,
    ""Philippines"": 2,
    ""Canada"": 2,
    ""United Kingdom"": 6,
    ""Singapore"": 52,
    ""Russia"": 44,
    ""Ukraine"": 20,
    ""Palestine"": 2,
    ""Taiwan"": 30,
    ""Vietnam"": 2,
    ""Japan"": 18,
    ""Iran"": 2,
    ""Germany"": 2,
    ""Poland"": 4
  },
  ""account"": {
    ""hello"": 7724,
    ""jGKMMqkVU"": 2,
    ""WBTymX"": 2,
    ""HVooSy"": 2,
    ""Administr"": 42,
    ""beio"": 2,
    ""Almaz"": 2,
    ""Test"": 8,
    ""Domain"": 46,
    ""(empty)"": 4,
    ""HcnsfSfrw"": 2,
    ""BEwCsg"": 2,
    ""arUmzz"": 2,
    ""bKVuUpDcB"": 2,
    ""LKvUtm"": 2,
    ""RSirQl"": 2
  },
  ""keyboard"": {
    ""Unknown"": 7846
  },
  ""client_build"": {
    ""Unknown"": 7846
  },
  ""client_name"": {
    ""Unknown"": 7846
  },
  ""ip_type"": {
    ""Unknown"": 7652,
    ""hosting"": 170,
    ""proxy"": 8,
    ""hosting & proxy"": 16
  }
}"
ef3jnDxa,2023-07-21_stats.json,rdp_snitch,JSON,Friday 21st of July 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""85.14.32.53"": 3764,
    ""198.235.24.52"": 3,
    ""34.125.145.132"": 1,
    ""87.251.75.145"": 4,
    ""58.218.204.51"": 4,
    ""209.146.28.26"": 1,
    ""137.184.166.42"": 1,
    ""104.200.20.152"": 2,
    ""185.73.124.50"": 2,
    ""164.92.158.134"": 1,
    ""45.79.108.4"": 6,
    ""80.66.76.193"": 1,
    ""39.108.174.140"": 16,
    ""139.99.69.92"": 1,
    ""62.204.41.134"": 4,
    ""139.162.30.215"": 2,
    ""31.43.185.32"": 8,
    ""146.70.187.100"": 3,
    ""185.170.144.3"": 2,
    ""87.251.75.120"": 1,
    ""139.162.6.28"": 1,
    ""167.172.76.60"": 1,
    ""54.255.59.73"": 20,
    ""213.6.148.83"": 1,
    ""45.79.65.243"": 12,
    ""60.250.29.35"": 15,
    ""45.119.81.119"": 1,
    ""45.140.17.16"": 6,
    ""47.102.201.13"": 3,
    ""106.116.169.71"": 1,
    ""157.7.91.25"": 9,
    ""185.156.72.37"": 2,
    ""62.122.184.168"": 4,
    ""62.122.184.166"": 4,
    ""87.251.75.64"": 1,
    ""205.210.31.45"": 3,
    ""87.251.64.110"": 2,
    ""51.75.160.42"": 2,
    ""37.32.4.138"": 1,
    ""139.162.2.233"": 1,
    ""167.94.145.59"": 1,
    ""205.210.31.75"": 3,
    ""193.169.255.152"": 2
  },
  ""asn"": {
    ""AS34376"": 3764,
    ""AS396982"": 10,
    ""AS208091"": 9,
    ""AS4134"": 5,
    ""AS135607"": 1,
    ""AS14061"": 3,
    ""AS63949"": 24,
    ""AS37963"": 19,
    ""AS16276"": 3,
    ""AS59425"": 4,
    ""AS211736"": 8,
    ""AS9009"": 3,
    ""AS48080"": 4,
    ""AS16509"": 20,
    ""AS12975"": 1,
    ""AS3462"": 15,
    ""AS131386"": 1,
    ""AS198953"": 6,
    ""AS7506"": 9,
    ""AS61432"": 2,
    ""AS57523"": 8,
    ""AS202468"": 1,
    ""AS398705"": 1,
    ""AS198810"": 2
  },
  ""isp"": {
    ""Telecom Group"": 3764,
    ""Google LLC"": 10,
    ""XHOST-INTERNET-SOLUTIONS"": 9,
    ""Chinanet"": 5,
    ""Cogent Communications"": 1,
    ""DigitalOcean, LLC"": 3,
    ""Akamai Technologies, Inc."": 20,
    ""Hangzhou Alibaba Advertising Co"": 16,
    ""OVH SAS"": 3,
    ""Horizon LLC"": 4,
    ""LINODE"": 4,
    ""FOP Dmytro Nedilskyi"": 8,
    ""M247 Europe SRL"": 3,
    ""Dmitriy Panchenko"": 4,
    ""Amazon Technologies Inc."": 20,
    ""Palestine Telecommunications Company"": 1,
    ""Chunghwa Telecom Co., Ltd."": 15,
    ""Long Van System Solution"": 1,
    ""Proton66 OOO"": 6,
    ""Addresses CNNIC"": 3,
    ""GMO Internet, Inc"": 9,
    ""TOV VAIZ PARTNER"": 2,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 1,
    ""Censys, Inc."": 1,
    ""Agata Grabowska trading as FUFO Studio"": 2
  },
  ""org"": {
    ""TelecomGroup"": 3764,
    ""Palo Alto Networks, Inc"": 9,
    ""Google Cloud (us-west4)"": 1,
    ""Xhost Internet Solutions"": 9,
    ""Chinanet JS"": 4,
    ""IPS, Inc"": 1,
    ""DigitalOcean, LLC"": 3,
    ""Linode"": 20,
    ""Xhostis"": 4,
    ""Aliyun Computing Co., LTD"": 19,
    ""OVH Singapore PTE. LTD"": 1,
    ""Horizon LLC"": 4,
    ""Linode, LLC"": 4,
    ""FOP Dmytro Nedilskyi"": 8,
    ""M247 Ltd Miami"": 3,
    ""AWS EC2 (ap-southeast-1)"": 20,
    ""Palestine Telecommunications Company"": 1,
    ""Chunghwa Telecom Co. Ltd."": 15,
    ""Unknown"": 1,
    ""Proton66 LLC"": 6,
    ""Chinanet HE"": 1,
    ""GMO Internet, Inc."": 9,
    ""TOV VAIZ PARTNER"": 2,
    ""Chang Way Technologies Co. Limited"": 8,
    ""OVH Ltd"": 2,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 1,
    ""Censys, Inc."": 1,
    ""FUFO Studio"": 2
  },
  ""regionName"": {
    ""Blagoevgrad"": 3764,
    ""California"": 27,
    ""Nevada"": 1,
    ""North Holland"": 9,
    ""Jiangsu"": 4,
    ""Metro Manila"": 1,
    ""Ontario"": 1,
    ""Texas"": 2,
    ""England"": 3,
    ""Guangdong"": 16,
    ""Central Singapore"": 22,
    ""Moscow"": 22,
    ""North West"": 3,
    ""Kyiv City"": 10,
    ""Florida"": 3,
    ""South West"": 1,
    ""Rafah"": 1,
    ""Taipei City"": 15,
    ""Ho Chi Minh"": 1,
    ""Shanghai"": 3,
    ""Hebei"": 1,
    ""Tokyo"": 9,
    ""Tehran"": 1,
    ""Hesse"": 1,
    ""Mazovia"": 2
  },
  ""country"": {
    ""Bulgaria"": 3764,
    ""United States"": 33,
    ""Netherlands"": 9,
    ""China"": 24,
    ""Philippines"": 1,
    ""Canada"": 1,
    ""United Kingdom"": 3,
    ""Singapore"": 26,
    ""Russia"": 22,
    ""Ukraine"": 10,
    ""Palestine"": 1,
    ""Taiwan"": 15,
    ""Vietnam"": 1,
    ""Japan"": 9,
    ""Iran"": 1,
    ""Germany"": 1,
    ""Poland"": 2
  },
  ""account"": {
    ""hello"": 3862,
    ""jGKMMqkVU"": 1,
    ""WBTymX"": 1,
    ""HVooSy"": 1,
    ""Administr"": 21,
    ""beio"": 1,
    ""Almaz"": 1,
    ""Test"": 4,
    ""Domain"": 23,
    ""(empty)"": 2,
    ""HcnsfSfrw"": 1,
    ""BEwCsg"": 1,
    ""arUmzz"": 1,
    ""bKVuUpDcB"": 1,
    ""LKvUtm"": 1,
    ""RSirQl"": 1
  },
  ""keyboard"": {
    ""Unknown"": 3923
  },
  ""client_build"": {
    ""Unknown"": 3923
  },
  ""client_name"": {
    ""Unknown"": 3923
  },
  ""ip_type"": {
    ""Unknown"": 3826,
    ""hosting"": 85,
    ""proxy"": 4,
    ""hosting & proxy"": 8
  }
}"
029VTcd0,MC:OC poopbot,copperTones,Lua,Friday 21st of July 2023 07:10:30 PM CDT,"local event = require(""event"")
local component = require(""component"")
local ic = component.inventory_controller
local robot = component.robot
local craft = component.crafting.craft

function dupe_saplings()
    robot.select(13)
    if robot.count() == 0 then
        print(""Out of cutters, please insert"")
        event.pull(""inventory_changed"", 13)
    end
    robot.transferTo(1, 1)
    robot.select(14)
    local n = robot.count()
    if n < 17 then
        print(""Need more saplings (recovery NYI)"")
        event.pull(""inventory_changed"", 14)
    elseif n > 17 then
        robot.transferTo(15, n - 17)
    end
    robot.transferTo(2)
    craft(51)
    robot.drop(1)
    os.sleep(45)
    robot.select(15)
    robot.suck(1)
    robot.transferTo(14, 17)
end

function make_sewage()
    local b = math.floor(robot.count(4) / 3)
    b = math.min(b, 16)
    robot.select(8)
    local s = robot.count()
    if s < b then
        b = s
    elseif s > 40 then
        -- too frustrated with weird quirks
        --make_pellet(math.floor((s-16) / 9))
    end
    robot.transferTo(5, b)
    robot.select(4)
    robot.transferTo(1, b)
    robot.transferTo(2, b)
    robot.transferTo(3, b)
    robot.select(15)
    craft()
    robot.drop(0)
    os.sleep(b*3 + 5)
end

function make_pellet(n)
    robot.select(8)
    for _,i in ipairs({1,2,3,5,6,7,9,10,11}) do
        robot.transferTo(i, n)
    end
    robot.select(12)
    craft()
end

while 1 do
    dupe_saplings()
    
    -- get pulp
    robot.turn(false)
    robot.turn(false)
    ic.dropIntoSlot(3, 1)
    robot.select(4)
    ic.suckFromSlot(3, 2)
    robot.select(8)
    ic.suckFromSlot(3, 3)--, ??)
    robot.turn(false)
    robot.turn(false)
    
    make_sewage()
    
    -- transfer drops
    robot.select(15)
    robot.suck(0)
    robot.drop(3)
end"
eJTEGdE2,random project tbh sample,PeaPattern,Lua,Friday 21st of July 2023 07:03:17 PM CDT,"--== Services ==--

local Players = game:GetService(""Players"")
local RStorage = game:GetService(""ReplicatedStorage"")
local ServerStorage = game:GetService(""ServerStorage"")

--== Variables ==--

local Remotes = RStorage.Remotes
local Ores = require(ServerStorage.Ores)

--== Functions ==--

local isOre = function(ore)
	for _,v in next, RStorage.Ores:GetChildren() do
		if v.Name == ore.Name then
			return true
		end
	end
end

--== Leaderstats ==--

Players.PlayerAdded:Connect(function(Player)
	local Leaderstats = Instance.new(""Folder"")
	Leaderstats.Parent = Player
	Leaderstats.Name = ""leaderstats""
	
	local moneyMouth = Instance.new(""IntValue"")
	moneyMouth.Parent = Leaderstats
	moneyMouth.Name = ""🤑""
end)

--== Remote Handlers ==--

local canMine = true
Remotes.MineBlock.OnServerEvent:Connect(function(LocalPlayer, Block)
	if canMine then
		canMine = false
		local Decals = {}
		for _,v in next, RStorage.Broken:GetChildren() do
			local Decal = v:Clone()
			Decal.Parent = Block
			Decals[#Decals + 1] = Decal
		end
		local Ore = RStorage.Ores[Block.Name]:Clone()
		Ore.Parent = LocalPlayer.Backpack
		task.wait(0.5)
		for _,v in next, Decals do
			v:Destroy()
		end
		canMine = true
	end
end)

local canSell = true
Remotes.SellOres.OnServerEvent:Connect(function(LocalPlayer)
	if canSell then
		canSell = false
		local oreTools = {}
		for _,v in next, LocalPlayer.Backpack:GetChildren() do
			if v:IsA(""Tool"") and isOre(v) then
				oreTools[#oreTools + 1] = v
			end
		end
		for _,v in next, LocalPlayer.Character:GetChildren() do
			if v:IsA(""Tool"") and isOre(v) then
				oreTools[#oreTools + 1] = v
			end
		end
		for _,v in next, oreTools do
			local Price = Ores[v.Name]
			LocalPlayer.leaderstats[""🤑""].Value += Price
			v:Destroy()
		end
		task.wait(1)
		canSell = true
	end
end)"
0yGngiD8,metaadminsample,PeaPattern,Lua,Friday 21st of July 2023 07:01:47 PM CDT,"local Config = require(script.Parent)
local Players = game:GetService(""Players"")
local DatastoreService = game:GetService(""DataStoreService"")
local Datastore = DatastoreService:GetDataStore(""MetaAdmin"")

local Commands = {}
local function addCommand(Names, RequiredArgs, Callback)
	Commands[#Commands + 1] = {
		Names = Names,
		RequiredArgs = RequiredArgs,
		Callback = Callback
	}
end

local function getCommand(commandName)
	local lowerCommandName = commandName:lower()
	for _, command in ipairs(Commands) do
		for _, name in ipairs(command.Names) do
			if name:lower() == lowerCommandName then
				return command
			end
		end
	end
end

local function getPlayer(LocalPlayer, String)
	local lowercase = String:lower()
	local others = Players:GetPlayers()
	table.remove(others, table.find(others, LocalPlayer))
	if table.find(Config.ChatIndicators[""you""], lowercase) then
		return {LocalPlayer}
	end
	if table.find(Config.ChatIndicators[""others""], lowercase) then
		return others
	end
	if table.find(Config.ChatIndicators[""all""], lowercase) then
		return Players:GetPlayers()
	end
	if table.find(Config.ChatIndicators[""random""], lowercase) then
		local playerList = Players:GetPlayers()
		return playerList[math.random(#playerList)]
	end
	if table.find(Config.ChatIndicators[""nearest""], lowercase) then
		if not LocalPlayer or not LocalPlayer.Character or not LocalPlayer.Character.PrimaryPart then return end
		local nearest = {nil, nil}
		local root = LocalPlayer.Character.PrimaryPart
		for _,v in next, others do
			if v and v.Character and v.Character.PrimaryPart then
				local targetroot = v.Character.PrimaryPart
				local distance = (root.Position - targetroot.Position).Magnitude
				if not nearest[2] or distance < nearest[2] then
					nearest = {v, distance}
				end
			end
		end
		return {nearest[1]}
	end
	for _,Target in next, Players:GetPlayers() do
		if string.find(Target.Name:lower(), lowercase) or string.find(Target.DisplayName:lower(), lowercase) then
			print(""Found target by name."")
			return {Target}
		end
	end
	return false
end

Players.PlayerAdded:Connect(function(Player)
	Player.Chatted:Connect(function(Message)
		if table.find(Config.Whitelist, Player.UserId) then
			local Args = Message:split(Config.Seperator)
			if Config.Seperator == Config.Prefix then
				table.remove(Args, 1)
				Args[1] = Config.Prefix .. Args[1]
			end
			local Command = Args[1]
			local foundCommand = getCommand(Command:sub(Config.Prefix:len() + 1))
			if foundCommand then
				table.remove(Args, 1)
				if #Args >= foundCommand.RequiredArgs then
					foundCommand.Callback(Player, Message:sub(Config.Prefix:len() + Command:len() + 1), Args)
				end
			end
		end
	end)
end)

addCommand({""prefix"", ""pre""}, 1, function(Player, Message, Args)
	local Prefix = Args[1]
	if Prefix == """" then return end
	Config.Prefix = Prefix
end)

addCommand({""seperator"", ""sep""}, 1, function(Player, Message, Args)
	local Seperator = Args[1]
	if Seperator == """" then return end
	Config.Seperator = Seperator
end)

addCommand({""speed"", ""sp"", ""walkspeed"", ""ws""}, 1, function(Player, Message, Args)
	local Targets
	local Speed
	if #Args == 1 then
		Targets = {Player}
		Speed = tonumber(Args[1])
	elseif #Args >= 2 then
		Targets = getPlayer(Player, Args[1])
		Speed = tonumber(Args[2])
	end
	if Targets and Speed then
		for _,Target in next, Targets do
			local Humanoid = Target and Target.Character and Target.Character:FindFirstChild(""Humanoid"")
			if Humanoid then
				Humanoid.WalkSpeed = Speed
			end
		end
	end
end)

addCommand({""jumppower"", ""jp"", ""jumpheight"", ""jh""}, 1, function(Player, Message, Args)
	local Targets
	local JumpPower
	if #Args == 1 then
		Targets = {Player}
		JumpPower = tonumber(Args[1])
	elseif #Args >= 2 then
		Targets = getPlayer(Player, Args[1])
		JumpPower = tonumber(Args[2])
	end
	if Targets and JumpPower then
		for _,Target in next, Targets do
			local Humanoid = Target and Target.Character and Target.Character:FindFirstChild(""Humanoid"")
			if Humanoid then
				Humanoid.JumpPower = JumpPower
			end
		end
	end
end)

addCommand({""kick""}, 1, function(Player, Message, Args)
	local tString = Args[1]
	local Targets = getPlayer(Player, tString)
	if Targets then
		local Reason = ""unknown""
		if #Args >= 2 then
			Reason = Message:sub(tString:len() + 2)
		end
		for _,Target in next, Targets do
			Target:Kick(Reason)
		end
	end
end)

addCommand({""ban""}, 1, function(Player, Message, Args)
	local tString = Args[1]
	local Targets = getPlayer(Player,tString)
	if Targets then
		local Reason = ""unknown""
		if #Args >= 2 then
			Reason = Message:sub(tString:len() + 2)
		end
		for _,Target in next, Targets do
			if table.find(Config.Whitelist, Target.UserId) then return end
			Datastore:SetAsync(Target.UserId, {
				[""Banned""] = {
					true,
					Reason
				}
			})
			Target:Kick(Reason)
		end
	end
end)

addCommand({""unban""}, 1, function(Player, Message, Args)
	local targetId = tonumber(Args[1])
	if targetId then
		local s,f = pcall(function()
			Datastore:GetAsync(targetId)
		end)
		if s then
			Datastore:SetAsync(targetId, {
				[""Banned""] = {
					false,
					""""
				}
			})
		end
	end
end)

addCommand({""respawn"", ""re""}, 0, function(Player, Message, Args)
	if #Args >= 1 then
		local tString = Args[1]
		local Targets = getPlayer(Player,tString)
		for _,Target in next, Targets do
			Target:LoadCharacter()
		end
	else
		Player:LoadCharacter()
	end
end)

addCommand({""kill""}, 0, function(Player, Message, Args)
	if #Args >= 1 then
		local tString = Args[1]
		local Targets = getPlayer(Player,tString)
		for _,Target in next, Targets do
			if Target and Target.Character then
				Target.Character:BreakJoints()
			end
		end
	else
		if Player and Player.Character then
			Player.Character:BreakJoints()
		end
	end
end)

addCommand({""explode""}, 0, function(Player, Message, Args)
	if #Args >= 1 then
		local tString = Args[1]
		local Targets = getPlayer(Player,tString)
		for _,Target in next, Targets do
			if Target and Target.Character and Target.Character.PrimaryPart then
				local Explosion = Instance.new(""Explosion"")
				Explosion.Parent = Target.Character.PrimaryPart
				Explosion.DestroyJointRadiusPercent = 1
				Explosion.Position = Target.Character.PrimaryPart.Position
			end
		end
	else
		if Player and Player.Character and Player.Character.PrimaryPart then
			local Explosion = Instance.new(""Explosion"")
			Explosion.Parent = Player.Character.PrimaryPart
			Explosion.DestroyJointRadiusPercent = 1
			Explosion.Position = Player.Character.PrimaryPart.Position
		end
	end
end)
"
6v34i3bw,Untitled,Ahlushko,JSON,Friday 21st of July 2023 06:41:28 PM CDT,"{
    ""requests"": [
        {
            ""id"": 1689982743186,
            ""created_at"": ""2023-7-22 2:39"",
            ""post"": true,
            ""url"": ""https://staging.arbostar.com/app/estimates/save"",
            ""obj"": {
                ""estimate_brand_id"": ""120"",
                ""clean_up"": 1,
                ""disposal_brush"": 1,
                ""disposal_wood"": 1,
                ""emails"": [
                    ""31qrqar@gmail.com.com""
                ],
                ""tax_include"": false,
                ""tax_by_location"": false,
                ""tmp_client"": true,
                ""street"": ""1 Canada's Wonderland Drive"",
                ""city"": ""Vaughan"",
                ""zip"": ""L6A 1S6"",
                ""country"": ""Canada"",
                ""state"": ""Ontario"",
                ""lat"": 43.8415367,
                ""lon"": -79.540674,
                ""tmp_lead_id"": 1689982684731,
                ""total_services"": 7327.6,
                ""clear_total_services"": 7327.6,
                ""total_company_cost"": 2353,
                ""total_with_tax"": 7305.6,
                ""tax_amount"": 594.4867500000001,
                ""total_without_tax"": 21.699765271030078,
                ""ttl_estimate"": 7822.08675,
                ""pos"": 6,
                ""service_type_ids"": {
                    ""0"": 311,
                    ""1"": 7,
                    ""2"": 79,
                    ""3"": 152,
                    ""4"": 220,
                    ""5"": 26
                },
                ""estimate_crew_notes"": ""crew notes"",
                ""lead_tags"": [
                    ""Tag""
                ],
                ""discount"": {
                    ""discount_comment"": """",
                    ""discount_amount"": 100,
                    ""discount_percents"": ""0""
                },
                ""lead_id"": false,
                ""client_id"": 3181,
                ""provided"": ""meeting"",
                ""estimate_planned_total_for_services"": 7327.6,
                ""estimate_planned_company_cost"": 2353,
                ""estimate_planned_crews_cost"": 2015,
                ""estimate_planned_equipments_cost"": 208,
                ""estimate_planned_extra_expenses"": 0,
                ""estimate_planned_overheads_cost"": 65,
                ""estimate_hst_disabled"": 0,
                ""tax_rate"": 1.0825,
                ""tax_value"": 8.25,
                ""tax_name"": ""Eight point twenty five"",
                ""estimate_review_number"": 1,
                ""optional"": {
                    ""0"": ""0"",
                    ""1"": ""0"",
                    ""2"": ""0"",
                    ""3"": ""1"",
                    ""4"": ""0"",
                    ""5"": ""0"",
                    ""6"": ""0"",
                    ""7"": ""0""
                },
                ""service_status"": {
                    ""0"": 0,
                    ""1"": 0,
                    ""2"": ""0"",
                    ""3"": ""0"",
                    ""4"": 0,
                    ""5"": 0,
                    ""6"": 0,
                    ""7"": 0
                },
                ""non_taxable"": {
                    ""0"": ""0"",
                    ""1"": ""0"",
                    ""2"": ""1"",
                    ""4"": ""0"",
                    ""5"": ""0"",
                    ""6"": ""0"",
                    ""7"": ""0""
                },
                ""service_description"": {
                    ""0"": ""Test Product 1 DY"",
                    ""1"": ""Planting of the ...tree (50-60 mm) of the calliper. The price is including the cost of material, delivery, and labor. Be advised there is no warranty on the material unless it was arranged previously.\n\nLOCATION OF THE TREE"",
                    ""2"": ""Tree with school test"",
                    ""3"": ""vfg "",
                    ""4"": 1,
                    ""5"": """",
                    ""6"": ""selling of Apple tree"",
                    ""7"": ""selling of Apple tree""
                },
                ""service_disposal_time"": {
                    ""0"": 0,
                    ""1"": 0,
                    ""5"": 0
                },
                ""service_overhead_rate"": {
                    ""0"": ""5"",
                    ""1"": ""5"",
                    ""5"": ""5""
                },
                ""service_markup_rate"": {
                    ""0"": 5,
                    ""1"": 20
                },
                ""service_crew"": {
                    ""0"": [
                        4,
                        4
                    ],
                    ""1"": [
                        6,
                        7
                    ]
                },
                ""service_price"": {
                    ""0"": 80,
                    ""1"": ""2823.6"",
                    ""2"": ""22"",
                    ""3"": 4402,
                    ""4"": ""852"",
                    ""5"": 0,
                    ""6"": ""1775"",
                    ""7"": ""1775""
                },
                ""class"": {
                    ""1"": 49,
                    ""2"": 48
                },
                ""service_time"": {
                    ""1"": 6
                },
                ""service_travel_time"": {
                    ""1"": 7
                },
                ""service_vehicle"": {
                    ""1"": [
                        ""4""
                    ]
                },
                ""vehicle_option"": {
                    ""1"": [
                        [
                            ""small""
                        ]
                    ]
                },
                ""service_trailer"": {
                    ""1"": [
                        ""2""
                    ]
                },
                ""trailer_option"": {
                    ""1"": [
                        [
                            ""Vermeer""
                        ]
                    ]
                },
                ""tools_option"": {
                    ""1"": {
                        ""8"": [
                            [
                                ""Miniloader""
                            ]
                        ],
                        ""9"": [
                            [
                                ""XL Saw""
                            ]
                        ],
                        ""10"": [
                            [
                                ""Crowbar""
                            ]
                        ]
                    }
                },
                ""product_cost"": {
                    ""2"": ""22"",
                    ""4"": ""12"",
                    ""6"": ""25"",
                    ""7"": ""25""
                },
                ""quantity"": {
                    ""2"": 1,
                    ""3"": 71,
                    ""4"": 71,
                    ""6"": 71,
                    ""7"": 71
                },
                ""bundles_services"": {
                    ""4"": 3,
                    ""5"": 3,
                    ""6"": 3,
                    ""7"": 3
                },
                ""estimate_planned_profit"": 4874.6,
                ""estimate_planned_profit_percents"": ""207.17"",
                ""estimate_planned_tax"": 594.4867500000001,
                ""estimate_planned_total"": 7822.08675,
                ""estimates_service"": {
                    ""0"": {
                        ""service_id"": 311,
                        ""service_name"": ""DY Product 1 2"",
                        ""service_description"": ""Test Product 1 DY"",
                        ""service_markup"": 5,
                        ""service_priority"": 0,
                        ""service_parent_id"": null,
                        ""service_attachments"": [
                            {
                                ""transport"": {
                                    ""vehicles"": {
                                        ""tool_id"": 0,
                                        ""option"": """"
                                    },
                                    ""trailers"": {
                                        ""tool_id"": 0,
                                        ""option"": """"
                                    }
                                },
                                ""tool"": []
                            }
                        ],
                        ""service_integration_id"": null,
                        ""is_product"": 0,
                        ""cost"": 80,
                        ""is_bundle"": 0,
                        ""is_view_in_pdf"": 0,
                        ""service_last_integration_time_log"": ""2023-07-07 11:25:59"",
                        ""service_last_integration_sync_result"": 1,
                        ""service_category_id"": 1,
                        ""service_class_id"": null,
                        ""service_is_favourite"": 1,
                        ""service_favourite_icon"": ""first-letters"",
                        ""service_is_collapsed"": 1,
                        ""service_default_crews"": ""[\""<div style=\\\""border:1px solid #990000;padding-left:20px;margin:0 0 10px 0;\\\"">\\n\\n<h4>A PHP Error was encountered<\\/h4>\\n\\n<p>Severity: Notice<\\/p>\\n<p>Message:  Array to string conversion<\\/p>\\n<p>Filename: services\\/edit_modal.php<\\/p>\\n<p>Line Number:"",
                        ""non_taxable"": ""0"",
                        ""optional"": ""0"",
                        ""accounting_code"": """",
                        ""service_qb_id"": null,
                        ""service_last_qb_time_log"": null,
                        ""service_last_qb_sync_result"": null,
                        ""service_favourite_icon_priority"": 0,
                        ""service_class_name"": """",
                        ""favouriteShortcut"": ""DY"",
                        ""service_status"": 0,
                        ""tempId"": 1689982685815,
                        ""service"": {
                            ""optional"": ""0"",
                            ""service_status"": ""0"",
                            ""is_bundle"": 0,
                            ""is_product"": 0,
                            ""service_name"": ""DY Product 1 2"",
                            ""service_markup"": 5
                        },
                        ""position"": 0,
                        ""noTax"": false,
                        ""service_overhead_rate"": ""5"",
                        ""service_price"": 80,
                        ""expense"": 0,
                        ""total"": 0,
                        ""expenses"": null,
                        ""equipments"": [
                            {
                                ""equipment_attach_tool"": [
                                    ""8"",
                                    ""9"",
                                    ""10"",
                                    ""20""
                                ],
                                ""equipment_tools_option"": {
                                    ""8"": [],
                                    ""9"": [],
                                    ""10"": [],
                                    ""20"": []
                                },
                                ""equipment_item_option"": [],
                                ""equipment_attach_option"": [],
                                ""vehicle"": {
                                    ""options"": []
                                },
                                ""trailer"": {
                                    ""options"": []
                                }
                            }
                        ],
                        ""serviceimages"": [],
                        ""crews"": [
                            {
                                ""crew_id"": 4,
                                ""crew_name"": ""TEC"",
                                ""crew_full_name"": ""Technician"",
                                ""crew_rate"": 110
                            },
                            {
                                ""crew_id"": 4,
                                ""crew_name"": ""TEC"",
                                ""crew_full_name"": ""Technician"",
                                ""crew_rate"": 110
                            }
                        ],
                        ""serviceIndex"": 0,
                        ""menuPopup"": false,
                        ""manHrs"": 0,
                        ""hrs"": 0,
                        ""total_crew"": 0,
                        ""mhr_old"": 0,
                        ""total_equipment"": 0,
                        ""company_cost"": 0,
                        ""updated"": true,
                        ""service_markup_rate"": 5,
                        ""crew"": [
                            {
                                ""crew_id"": 4,
                                ""crew_name"": ""TEC"",
                                ""crew_full_name"": ""Technician"",
                                ""crew_rate"": 110
                            },
                            {
                                ""crew_id"": 4,
                                ""crew_name"": ""TEC"",
                                ""crew_full_name"": ""Technician"",
                                ""crew_rate"": 110
                            }
                        ],
                        ""service_access"": ""undefined""
                    },
                    ""1"": {
                        ""service_id"": 7,
                        ""service_name"": ""Planting Service"",
                        ""service_description"": ""Planting of the ...tree (50-60 mm) of the calliper. The price is including the cost of material, delivery, and labor. Be advised there is no warranty on the material unless it was arranged previously.\n\nLOCATION OF THE TREE"",
                        ""service_markup"": 20,
                        ""service_priority"": 1,
                        ""service_parent_id"": null,
                        ""service_attachments"": [
                            {
                                ""transport"": {
                                    ""vehicles"": {
                                        ""tool_id"": 0,
                                        ""option"": """"
                                    },
                                    ""trailers"": {
                                        ""tool_id"": 0,
                                        ""option"": """"
                                    }
                                },
                                ""tool"": []
                            }
                        ],
                        ""service_integration_id"": null,
                        ""is_product"": 0,
                        ""cost"": 0,
                        ""is_bundle"": 0,
                        ""is_view_in_pdf"": 0,
                        ""service_last_integration_time_log"": ""2023-07-03 07:40:15"",
                        ""service_last_integration_sync_result"": 1,
                        ""service_category_id"": 1,
                        ""service_class_id"": null,
                        ""service_is_favourite"": 1,
                        ""service_favourite_icon"": ""planting-service"",
                        ""service_is_collapsed"": 1,
                        ""service_default_crews"": null,
                        ""non_taxable"": ""0"",
                        ""optional"": ""0"",
                        ""accounting_code"": """",
                        ""service_qb_id"": null,
                        ""service_last_qb_time_log"": null,
                        ""service_last_qb_sync_result"": null,
                        ""service_favourite_icon_priority"": 16,
                        ""service_class_name"": """",
                        ""favouriteShortcut"": ""PL"",
                        ""service_status"": 0,
                        ""tempId"": 1689982687915,
                        ""service"": {
                            ""optional"": ""0"",
                            ""service_status"": ""0"",
                            ""is_bundle"": 0,
                            ""is_product"": 0,
                            ""service_name"": ""Planting Service"",
                            ""service_markup"": 20
                        },
                        ""position"": 1,
                        ""noTax"": false,
                        ""service_overhead_rate"": ""5"",
                        ""service_price"": ""2823.6"",
                        ""expense"": 0,
                        ""total"": 2823.6,
                        ""expenses"": null,
                        ""equipments"": [
                            {
                                ""equipment_attach_tool"": [
                                    ""8"",
                                    ""9"",
                                    ""10"",
                                    ""20""
                                ],
                                ""equipment_tools_option"": {
                                    ""8"": [
                                        ""Miniloader""
                                    ],
                                    ""9"": [
                                        ""XL Saw""
                                    ],
                                    ""10"": [
                                        ""Crowbar""
                                    ],
                                    ""20"": []
                                },
                                ""equipment_item_id"": ""4"",
                                ""equipment_item_option"": [
                                    ""small""
                                ],
                                ""equipment_attach_id"": ""2"",
                                ""equipment_attach_option"": [
                                    ""Vermeer""
                                ],
                                ""vehicle"": {
                                    ""_id"": ""4"",
                                    ""options"": [
                                        ""small""
                                    ]
                                },
                                ""trailer"": {
                                    ""_id"": ""2"",
                                    ""options"": [
                                        ""Vermeer""
                                    ]
                                }
                            }
                        ],
                        ""serviceimages"": [],
                        ""crews"": [
                            {
                                ""crew_id"": 6,
                                ""crew_name"": ""CL2"",
                                ""crew_full_name"": ""Arborist Climber"",
                                ""crew_rate"": 75
                            },
                            {
                                ""crew_id"": 7,
                                ""crew_name"": ""CL3"",
                                ""crew_full_name"": ""Arborist Climber"",
                                ""crew_rate"": 80
                            }
                        ],
                        ""serviceIndex"": 1,
                        ""menuPopup"": false,
                        ""manHrs"": 26,
                        ""hrs"": 13,
                        ""total_crew"": 155,
                        ""mhr_old"": 2353,
                        ""total_equipment"": 16,
                        ""company_cost"": 2353,
                        ""updated"": true,
                        ""service_time"": 6,
                        ""service_travel_time"": 7,
                        ""mhr"": 108.6,
                        ""travel_focus"": false,
                        ""travel_lock"": true,
                        ""service_price_old"": ""2823.6"",
                        ""class"": {
                            ""id"": 49,
                            ""text"": ""Test GG 2 Class""
                        },
                        ""service_markup_rate"": 20,
                        ""crew"": [
                            {
                                ""crew_id"": 6,
                                ""crew_name"": ""CL2"",
                                ""crew_full_name"": ""Arborist Climber"",
                                ""crew_rate"": 75
                            },
                            {
                                ""crew_id"": 7,
                                ""crew_name"": ""CL3"",
                                ""crew_full_name"": ""Arborist Climber"",
                                ""crew_rate"": 80
                            }
                        ],
                        ""service_access"": ""undefined""
                    },
                    ""2"": {
                        ""service_id"": 278,
                        ""service_name"": ""Tree school 2"",
                        ""service_description"": ""Tree with school test"",
                        ""service_markup"": 0,
                        ""service_priority"": 3,
                        ""service_status"": ""0"",
                        ""service_parent_id"": null,
                        ""service_attachments"": null,
                        ""service_integration_id"": null,
                        ""is_product"": 1,
                        ""cost"": ""22"",
                        ""is_bundle"": 0,
                        ""is_view_in_pdf"": 0,
                        ""service_last_integration_time_log"": ""2023-06-29 18:50:29"",
                        ""service_last_integration_sync_result"": 1,
                        ""service_category_id"": 1,
                        ""service_class_id"": null,
                        ""service_is_favourite"": 0,
                        ""service_favourite_icon"": null,
                        ""service_is_collapsed"": 0,
                        ""service_default_crews"": null,
                        ""non_taxable"": ""1"",
                        ""optional"": ""0"",
                        ""accounting_code"": """",
                        ""service_qb_id"": null,
                        ""service_last_qb_time_log"": null,
                        ""service_last_qb_sync_result"": null,
                        ""service_favourite_icon_priority"": 0,
                        ""is_tree_inventory"": false,
                        ""selected"": false,
                        ""tempId"": 1689982712769,
                        ""service"": {
                            ""optional"": ""0"",
                            ""service_status"": ""0"",
                            ""is_bundle"": 0,
                            ""is_product"": 1,
                            ""service_name"": ""Tree school 2"",
                            ""service_markup"": 0
                        },
                        ""position"": 2,
                        ""serviceimages"": [],
                        ""noTax"": true,
                        ""quantity"": 1,
                        ""service_price"": ""22"",
                        ""serviceIndex"": 2,
                        ""class"": {
                            ""id"": 48,
                            ""text"": ""Test GG Class""
                        },
                        ""updated"": true,
                        ""menuPopup"": false,
                        ""service_markup_rate"": 0,
                        ""equipments"": null,
                        ""service_access"": ""undefined""
                    },
                    ""3"": {
                        ""service_id"": 102,
                        ""service_name"": ""test bundle usa qwerty"",
                        ""service_description"": ""vfg "",
                        ""service_markup"": 0,
                        ""service_priority"": 4,
                        ""service_status"": ""0"",
                        ""service_parent_id"": null,
                        ""service_attachments"": null,
                        ""service_integration_id"": null,
                        ""is_product"": 0,
                        ""cost"": 62,
                        ""is_bundle"": 1,
                        ""is_view_in_pdf"": false,
                        ""service_last_integration_time_log"": ""2022-07-18 19:56:18"",
                        ""service_last_integration_sync_result"": 1,
                        ""service_category_id"": null,
                        ""service_class_id"": null,
                        ""service_is_favourite"": 0,
                        ""service_favourite_icon"": null,
                        ""service_is_collapsed"": 1,
                        ""service_default_crews"": null,
                        ""non_taxable"": ""0"",
                        ""optional"": ""1"",
                        ""accounting_code"": """",
                        ""service_qb_id"": null,
                        ""service_last_qb_time_log"": null,
                        ""service_last_qb_sync_result"": null,
                        ""service_favourite_icon_priority"": 0,
                        ""bundle_records"": [
                            {
                                ""bundle_service_id"": 407,
                                ""bundle_id"": 102,
                                ""service_id"": 79,
                                ""qty"": 1,
                                ""service_name"": ""Bereza1 2"",
                                ""service_description"": 1,
                                ""service_markup"": 0,
                                ""service_priority"": 27,
                                ""service_status"": 1,
                                ""service_parent_id"": null,
                                ""service_attachments"": [],
                                ""service_integration_id"": null,
                                ""is_product"": 1,
                                ""cost"": 12,
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2023-06-30 07:26:42"",
                                ""service_last_integration_sync_result"": 1,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 0,
                                ""service_favourite_icon"": null,
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": 0,
                                ""optional"": 0,
                                ""accounting_code"": """",
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 0
                            },
                            {
                                ""bundle_service_id"": 408,
                                ""bundle_id"": 102,
                                ""service_id"": 152,
                                ""qty"": 1,
                                ""service_name"": ""orange"",
                                ""service_description"": """",
                                ""service_markup"": 0,
                                ""service_priority"": 60,
                                ""service_status"": 1,
                                ""service_parent_id"": null,
                                ""service_attachments"": [],
                                ""service_integration_id"": null,
                                ""is_product"": 0,
                                ""cost"": 0,
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2023-06-30 07:26:43"",
                                ""service_last_integration_sync_result"": 1,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 0,
                                ""service_favourite_icon"": null,
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": 0,
                                ""optional"": 0,
                                ""accounting_code"": """",
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 0
                            },
                            {
                                ""bundle_service_id"": 409,
                                ""bundle_id"": 102,
                                ""service_id"": 220,
                                ""qty"": 1,
                                ""service_name"": ""Apple tree"",
                                ""service_description"": ""selling of Apple tree"",
                                ""service_markup"": 0,
                                ""service_priority"": 34,
                                ""service_status"": 1,
                                ""service_parent_id"": null,
                                ""service_attachments"": [],
                                ""service_integration_id"": null,
                                ""is_product"": 1,
                                ""cost"": 25,
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2023-07-03 13:48:36"",
                                ""service_last_integration_sync_result"": 2,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 1,
                                ""service_favourite_icon"": ""first-letters"",
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": 0,
                                ""optional"": 0,
                                ""accounting_code"": """",
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 13
                            },
                            {
                                ""bundle_service_id"": 410,
                                ""bundle_id"": 102,
                                ""service_id"": 26,
                                ""qty"": 1,
                                ""service_name"": ""Apple tree"",
                                ""service_description"": ""selling of Apple tree"",
                                ""service_markup"": 0,
                                ""service_priority"": 35,
                                ""service_status"": 1,
                                ""service_parent_id"": null,
                                ""service_attachments"": [],
                                ""service_integration_id"": null,
                                ""is_product"": 1,
                                ""cost"": 25,
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2021-10-19 14:28:34"",
                                ""service_last_integration_sync_result"": 1,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 1,
                                ""service_favourite_icon"": ""first-letters"",
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": 0,
                                ""optional"": 0,
                                ""accounting_code"": """",
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 10
                            }
                        ],
                        ""selected"": false,
                        ""tempId"": 1689982721302,
                        ""isOptional"": ""Opt. selected"",
                        ""service"": {
                            ""optional"": ""1"",
                            ""service_status"": ""0"",
                            ""is_bundle"": 1,
                            ""is_product"": 0,
                            ""service_name"": ""test bundle usa qwerty"",
                            ""service_markup"": 0
                        },
                        ""items"": [
                            {
                                ""service_id"": 79,
                                ""service_name"": ""Bereza1 2"",
                                ""service_description"": 1,
                                ""service_markup"": 0,
                                ""service_priority"": 2,
                                ""service_status"": 0,
                                ""service_parent_id"": null,
                                ""service_attachments"": null,
                                ""service_integration_id"": null,
                                ""is_product"": 1,
                                ""cost"": ""12"",
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2023-06-30 07:26:42"",
                                ""service_last_integration_sync_result"": 1,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 0,
                                ""service_favourite_icon"": null,
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": ""0"",
                                ""optional"": ""0"",
                                ""accounting_code"": """",
                                ""service_qb_id"": null,
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 0,
                                ""is_tree_inventory"": false,
                                ""selected"": false,
                                ""bundles_services"": 4,
                                ""service"": {
                                    ""is_bundle"": 0,
                                    ""is_product"": 1,
                                    ""service_name"": ""Bereza1 2""
                                },
                                ""updated"": true,
                                ""position"": 4,
                                ""quantity"": 71,
                                ""noTax"": false,
                                ""service_price"": ""852"",
                                ""parentIndex"": 3,
                                ""serviceIndex"": 0,
                                ""menuPopup"": false,
                                ""equipments"": null,
                                ""service_markup_rate"": 0,
                                ""pre_uploaded_files"": [],
                                ""service_access"": ""undefined""
                            },
                            {
                                ""service_id"": 152,
                                ""service_name"": ""orange"",
                                ""service_description"": """",
                                ""service_markup"": 0,
                                ""service_priority"": 3,
                                ""service_status"": 0,
                                ""service_parent_id"": null,
                                ""service_attachments"": [],
                                ""service_integration_id"": null,
                                ""is_product"": 0,
                                ""cost"": 0,
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2023-06-30 07:26:43"",
                                ""service_last_integration_sync_result"": 1,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 0,
                                ""service_favourite_icon"": null,
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": ""0"",
                                ""optional"": ""0"",
                                ""accounting_code"": """",
                                ""service_qb_id"": null,
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 0,
                                ""is_tree_inventory"": false,
                                ""bundles_services"": 4,
                                ""service"": {
                                    ""is_bundle"": 0,
                                    ""is_product"": 0,
                                    ""service_name"": ""orange""
                                },
                                ""updated"": true,
                                ""position"": 5,
                                ""noTax"": false,
                                ""service_overhead_rate"": ""5"",
                                ""service_price"": 0,
                                ""expense"": 0,
                                ""total"": 0,
                                ""expenses"": null,
                                ""equipments"": null,
                                ""crews"": [],
                                ""parentIndex"": 3,
                                ""serviceIndex"": 1,
                                ""menuPopup"": false,
                                ""manHrs"": 0,
                                ""hrs"": 0,
                                ""total_crew"": 0,
                                ""mhr_old"": 0,
                                ""total_equipment"": 0,
                                ""company_cost"": 0,
                                ""service_markup_rate"": 0,
                                ""pre_uploaded_files"": [],
                                ""crew"": null,
                                ""service_access"": ""undefined""
                            },
                            {
                                ""service_id"": 220,
                                ""service_name"": ""Apple tree"",
                                ""service_description"": ""selling of Apple tree"",
                                ""service_markup"": 0,
                                ""service_priority"": 4,
                                ""service_status"": 0,
                                ""service_parent_id"": null,
                                ""service_attachments"": null,
                                ""service_integration_id"": null,
                                ""is_product"": 1,
                                ""cost"": ""25"",
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2023-07-03 13:48:36"",
                                ""service_last_integration_sync_result"": 2,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 1,
                                ""service_favourite_icon"": ""first-letters"",
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": ""0"",
                                ""optional"": ""0"",
                                ""accounting_code"": """",
                                ""service_qb_id"": null,
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 13,
                                ""is_tree_inventory"": false,
                                ""selected"": false,
                                ""bundles_services"": 4,
                                ""service"": {
                                    ""is_bundle"": 0,
                                    ""is_product"": 1,
                                    ""service_name"": ""Apple tree""
                                },
                                ""updated"": true,
                                ""position"": 6,
                                ""quantity"": 71,
                                ""noTax"": false,
                                ""service_price"": ""1775"",
                                ""parentIndex"": 3,
                                ""serviceIndex"": 2,
                                ""menuPopup"": false,
                                ""equipments"": null,
                                ""service_markup_rate"": 0,
                                ""pre_uploaded_files"": [],
                                ""service_access"": ""undefined""
                            },
                            {
                                ""service_id"": 26,
                                ""service_name"": ""Apple tree"",
                                ""service_description"": ""selling of Apple tree"",
                                ""service_markup"": 0,
                                ""service_priority"": 5,
                                ""service_status"": 0,
                                ""service_parent_id"": null,
                                ""service_attachments"": null,
                                ""service_integration_id"": null,
                                ""is_product"": 1,
                                ""cost"": ""25"",
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2021-10-19 14:28:34"",
                                ""service_last_integration_sync_result"": 1,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 1,
                                ""service_favourite_icon"": ""first-letters"",
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": ""0"",
                                ""optional"": ""0"",
                                ""accounting_code"": """",
                                ""service_qb_id"": null,
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 10,
                                ""is_tree_inventory"": false,
                                ""selected"": false,
                                ""bundles_services"": 4,
                                ""service"": {
                                    ""is_bundle"": 0,
                                    ""is_product"": 1,
                                    ""service_name"": ""Apple tree""
                                },
                                ""updated"": true,
                                ""position"": 7,
                                ""quantity"": 71,
                                ""noTax"": false,
                                ""service_price"": ""1775"",
                                ""parentIndex"": 3,
                                ""serviceIndex"": 3,
                                ""menuPopup"": false,
                                ""equipments"": null,
                                ""service_markup_rate"": 0,
                                ""pre_uploaded_files"": [],
                                ""service_access"": ""undefined""
                            }
                        ],
                        ""quantity"": 71,
                        ""service_price"": 4402,
                        ""position"": 3,
                        ""bundle_id"": 102,
                        ""serviceIndex"": 3,
                        ""menuPopup"": false,
                        ""service_markup_rate"": 0,
                        ""equipments"": null,
                        ""bundles_services"": [
                            {
                                ""service_id"": 79,
                                ""service_name"": ""Bereza1 2"",
                                ""service_description"": 1,
                                ""service_markup"": 0,
                                ""service_priority"": 2,
                                ""service_status"": 0,
                                ""service_parent_id"": null,
                                ""service_attachments"": null,
                                ""service_integration_id"": null,
                                ""is_product"": 1,
                                ""cost"": ""12"",
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2023-06-30 07:26:42"",
                                ""service_last_integration_sync_result"": 1,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 0,
                                ""service_favourite_icon"": null,
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": ""0"",
                                ""optional"": ""0"",
                                ""accounting_code"": """",
                                ""service_qb_id"": null,
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 0,
                                ""is_tree_inventory"": false,
                                ""selected"": false,
                                ""bundles_services"": 4,
                                ""service"": {
                                    ""is_bundle"": 0,
                                    ""is_product"": 1,
                                    ""service_name"": ""Bereza1 2""
                                },
                                ""updated"": true,
                                ""position"": 4,
                                ""quantity"": 71,
                                ""noTax"": false,
                                ""service_price"": ""852"",
                                ""parentIndex"": 3,
                                ""serviceIndex"": 0,
                                ""menuPopup"": false,
                                ""equipments"": null,
                                ""service_markup_rate"": 0,
                                ""pre_uploaded_files"": [],
                                ""service_access"": ""undefined""
                            },
                            {
                                ""service_id"": 152,
                                ""service_name"": ""orange"",
                                ""service_description"": """",
                                ""service_markup"": 0,
                                ""service_priority"": 3,
                                ""service_status"": 0,
                                ""service_parent_id"": null,
                                ""service_attachments"": [],
                                ""service_integration_id"": null,
                                ""is_product"": 0,
                                ""cost"": 0,
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2023-06-30 07:26:43"",
                                ""service_last_integration_sync_result"": 1,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 0,
                                ""service_favourite_icon"": null,
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": ""0"",
                                ""optional"": ""0"",
                                ""accounting_code"": """",
                                ""service_qb_id"": null,
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 0,
                                ""is_tree_inventory"": false,
                                ""bundles_services"": 4,
                                ""service"": {
                                    ""is_bundle"": 0,
                                    ""is_product"": 0,
                                    ""service_name"": ""orange""
                                },
                                ""updated"": true,
                                ""position"": 5,
                                ""noTax"": false,
                                ""service_overhead_rate"": ""5"",
                                ""service_price"": 0,
                                ""expense"": 0,
                                ""total"": 0,
                                ""expenses"": null,
                                ""equipments"": null,
                                ""crews"": [],
                                ""parentIndex"": 3,
                                ""serviceIndex"": 1,
                                ""menuPopup"": false,
                                ""manHrs"": 0,
                                ""hrs"": 0,
                                ""total_crew"": 0,
                                ""mhr_old"": 0,
                                ""total_equipment"": 0,
                                ""company_cost"": 0,
                                ""service_markup_rate"": 0,
                                ""pre_uploaded_files"": [],
                                ""crew"": null,
                                ""service_access"": ""undefined""
                            },
                            {
                                ""service_id"": 220,
                                ""service_name"": ""Apple tree"",
                                ""service_description"": ""selling of Apple tree"",
                                ""service_markup"": 0,
                                ""service_priority"": 4,
                                ""service_status"": 0,
                                ""service_parent_id"": null,
                                ""service_attachments"": null,
                                ""service_integration_id"": null,
                                ""is_product"": 1,
                                ""cost"": ""25"",
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2023-07-03 13:48:36"",
                                ""service_last_integration_sync_result"": 2,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 1,
                                ""service_favourite_icon"": ""first-letters"",
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": ""0"",
                                ""optional"": ""0"",
                                ""accounting_code"": """",
                                ""service_qb_id"": null,
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 13,
                                ""is_tree_inventory"": false,
                                ""selected"": false,
                                ""bundles_services"": 4,
                                ""service"": {
                                    ""is_bundle"": 0,
                                    ""is_product"": 1,
                                    ""service_name"": ""Apple tree""
                                },
                                ""updated"": true,
                                ""position"": 6,
                                ""quantity"": 71,
                                ""noTax"": false,
                                ""service_price"": ""1775"",
                                ""parentIndex"": 3,
                                ""serviceIndex"": 2,
                                ""menuPopup"": false,
                                ""equipments"": null,
                                ""service_markup_rate"": 0,
                                ""pre_uploaded_files"": [],
                                ""service_access"": ""undefined""
                            },
                            {
                                ""service_id"": 26,
                                ""service_name"": ""Apple tree"",
                                ""service_description"": ""selling of Apple tree"",
                                ""service_markup"": 0,
                                ""service_priority"": 5,
                                ""service_status"": 0,
                                ""service_parent_id"": null,
                                ""service_attachments"": null,
                                ""service_integration_id"": null,
                                ""is_product"": 1,
                                ""cost"": ""25"",
                                ""is_bundle"": 0,
                                ""is_view_in_pdf"": 0,
                                ""service_last_integration_time_log"": ""2021-10-19 14:28:34"",
                                ""service_last_integration_sync_result"": 1,
                                ""service_category_id"": 1,
                                ""service_class_id"": null,
                                ""service_is_favourite"": 1,
                                ""service_favourite_icon"": ""first-letters"",
                                ""service_is_collapsed"": 1,
                                ""service_default_crews"": null,
                                ""non_taxable"": ""0"",
                                ""optional"": ""0"",
                                ""accounting_code"": """",
                                ""service_qb_id"": null,
                                ""service_last_qb_time_log"": null,
                                ""service_last_qb_sync_result"": null,
                                ""service_favourite_icon_priority"": 10,
                                ""is_tree_inventory"": false,
                                ""selected"": false,
                                ""bundles_services"": 4,
                                ""service"": {
                                    ""is_bundle"": 0,
                                    ""is_product"": 1,
                                    ""service_name"": ""Apple tree""
                                },
                                ""updated"": true,
                                ""position"": 7,
                                ""quantity"": 71,
                                ""noTax"": false,
                                ""service_price"": ""1775"",
                                ""parentIndex"": 3,
                                ""serviceIndex"": 3,
                                ""menuPopup"": false,
                                ""equipments"": null,
                                ""service_markup_rate"": 0,
                                ""pre_uploaded_files"": [],
                                ""service_access"": ""undefined""
                            }
                        ],
                        ""service_access"": ""undefined""
                    }
                },
                ""estimate_tax_name"": ""Eight point twenty five"",
                ""estimate_tax_value"": 8.25,
                ""estimate_tax_rate"": 1.0825,
                ""estimate_pdf_files"": []
            }
        }
    ],
    ""gmt"": ""+0300""
}"
E0AMyAM2,DB Handler (Psychic Battlegrounds),SaviorTonitruum,Lua,Friday 21st of July 2023 06:28:11 PM CDT,"-- Variables

local uis = game:GetService(“UserInputService”)
local remote = script.Parent:WaitForChild(“ThunderclapEvent”)

-- Settings

local db = false
local dbtime = 25

-- DB Handler

uis.InputBegan:Connect(function(input, istyping)
if istyping then return end
if input.Keycode == Enum.Keycode.1 then
if db == false then
db = true

-- Character Stuff

local char = script.Parent.Parent
local humanoid = char:FindFirstChild(“Humanoid”)
local prevws = humanoid.WalkSpeed
humanoid.WalkSpeed = 0

local anim = humanoid.Animator:LoadAnimation(script.Thunderclap)
anim:Play()

anim:GetMarkerReachedSignal(“Dash”):Connect(function(parameter)
print(parameter)
remote:FireServer(“Dash”)
wait(0.5)
humanoid.WalkSpeed = prevws
end)

-- DB Handler

wait(dbtime)
db = false
end
end
end)"
XBMEWQTC,Untitled,phantam,JSON,Friday 21st of July 2023 06:16:07 PM CDT,"{
  ""id"": ""text_to_image_graph"",
  ""nodes"": {
    ""main_model_loader"": {
      ""id"": ""main_model_loader"",
      ""is_intermediate"": false,
      ""type"": ""main_model_loader"",
      ""model"": {
        ""model_name"": ""realisticVisionV40_v40VAE"",
        ""base_model"": ""sd-1""
      }
    },
    ""clip_skip"": {
      ""id"": ""clip_skip"",
      ""is_intermediate"": false,
      ""type"": ""clip_skip"",
      ""clip"": null,
      ""skipped_layers"": 0
    },
    ""positive_conditioning"": {
      ""id"": ""positive_conditioning"",
      ""is_intermediate"": false,
      ""type"": ""compel"",
      ""prompt"": """",
      ""clip"": null
    },
    ""negative_conditioning"": {
      ""id"": ""negative_conditioning"",
      ""is_intermediate"": false,
      ""type"": ""compel"",
      ""prompt"": ""nude, naked"",
      ""clip"": null
    },
    ""noise"": {
      ""id"": ""noise"",
      ""is_intermediate"": false,
      ""type"": ""noise"",
      ""seed"": 403860960,
      ""width"": 512,
      ""height"": 768,
      ""use_cpu"": true
    },
    ""text_to_latents"": {
      ""id"": ""text_to_latents"",
      ""is_intermediate"": false,
      ""type"": ""t2l"",
      ""positive_conditioning"": null,
      ""negative_conditioning"": null,
      ""noise"": null,
      ""steps"": 30,
      ""cfg_scale"": 3.5,
      ""scheduler"": ""euler_a"",
      ""unet"": null,
      ""control"": null
    },
    ""latents_to_image"": {
      ""id"": ""latents_to_image"",
      ""is_intermediate"": false,
      ""type"": ""l2i"",
      ""latents"": null,
      ""vae"": null,
      ""tiled"": false,
      ""fp32"": false,
      ""metadata"": null
    },
    ""lora_loader_more_details"": {
      ""id"": ""lora_loader_more_details"",
      ""is_intermediate"": true,
      ""type"": ""lora_loader"",
      ""lora"": {
        ""model_name"": ""more_details"",
        ""base_model"": ""sd-1""
      },
      ""weight"": 0.66,
      ""unet"": null,
      ""clip"": null
    },
    ""lora_loader_polyhedron_skinny_all"": {
      ""id"": ""lora_loader_polyhedron_skinny_all"",
      ""is_intermediate"": true,
      ""type"": ""lora_loader"",
      ""lora"": {
        ""model_name"": ""polyhedron_skinny_all"",
        ""base_model"": ""sd-1""
      },
      ""weight"": 0.92,
      ""unet"": null,
      ""clip"": null
    },
    ""dynamic_prompt"": {
      ""id"": ""dynamic_prompt"",
      ""is_intermediate"": true,
      ""type"": ""dynamic_prompt"",
      ""prompt"": ""RAW portrait of a beautiful woman, looking at the viewer, highly detail, detailed skin, beautiful smile, outdoors, white shirt, latina"",
      ""max_prompts"": 100,
      ""combinatorial"": true
    },
    ""iterate"": {
      ""id"": ""iterate"",
      ""is_intermediate"": true,
      ""type"": ""iterate"",
      ""collection"": [],
      ""index"": 0
    }
  },
  ""edges"": [
    {
      ""source"": {
        ""node_id"": ""main_model_loader"",
        ""field"": ""clip""
      },
      ""destination"": {
        ""node_id"": ""clip_skip"",
        ""field"": ""clip""
      }
    },
    {
      ""source"": {
        ""node_id"": ""positive_conditioning"",
        ""field"": ""conditioning""
      },
      ""destination"": {
        ""node_id"": ""text_to_latents"",
        ""field"": ""positive_conditioning""
      }
    },
    {
      ""source"": {
        ""node_id"": ""negative_conditioning"",
        ""field"": ""conditioning""
      },
      ""destination"": {
        ""node_id"": ""text_to_latents"",
        ""field"": ""negative_conditioning""
      }
    },
    {
      ""source"": {
        ""node_id"": ""text_to_latents"",
        ""field"": ""latents""
      },
      ""destination"": {
        ""node_id"": ""latents_to_image"",
        ""field"": ""latents""
      }
    },
    {
      ""source"": {
        ""node_id"": ""noise"",
        ""field"": ""noise""
      },
      ""destination"": {
        ""node_id"": ""text_to_latents"",
        ""field"": ""noise""
      }
    },
    {
      ""source"": {
        ""node_id"": ""main_model_loader"",
        ""field"": ""unet""
      },
      ""destination"": {
        ""node_id"": ""lora_loader_more_details"",
        ""field"": ""unet""
      }
    },
    {
      ""source"": {
        ""node_id"": ""clip_skip"",
        ""field"": ""clip""
      },
      ""destination"": {
        ""node_id"": ""lora_loader_more_details"",
        ""field"": ""clip""
      }
    },
    {
      ""source"": {
        ""node_id"": ""lora_loader_more_details"",
        ""field"": ""unet""
      },
      ""destination"": {
        ""node_id"": ""lora_loader_polyhedron_skinny_all"",
        ""field"": ""unet""
      }
    },
    {
      ""source"": {
        ""node_id"": ""lora_loader_more_details"",
        ""field"": ""clip""
      },
      ""destination"": {
        ""node_id"": ""lora_loader_polyhedron_skinny_all"",
        ""field"": ""clip""
      }
    },
    {
      ""source"": {
        ""node_id"": ""lora_loader_polyhedron_skinny_all"",
        ""field"": ""unet""
      },
      ""destination"": {
        ""node_id"": ""text_to_latents"",
        ""field"": ""unet""
      }
    },
    {
      ""source"": {
        ""node_id"": ""lora_loader_polyhedron_skinny_all"",
        ""field"": ""clip""
      },
      ""destination"": {
        ""node_id"": ""positive_conditioning"",
        ""field"": ""clip""
      }
    },
    {
      ""source"": {
        ""node_id"": ""lora_loader_polyhedron_skinny_all"",
        ""field"": ""clip""
      },
      ""destination"": {
        ""node_id"": ""negative_conditioning"",
        ""field"": ""clip""
      }
    },
    {
      ""source"": {
        ""node_id"": ""main_model_loader"",
        ""field"": ""vae""
      },
      ""destination"": {
        ""node_id"": ""latents_to_image"",
        ""field"": ""vae""
      }
    },
    {
      ""source"": {
        ""node_id"": ""dynamic_prompt"",
        ""field"": ""prompt_collection""
      },
      ""destination"": {
        ""node_id"": ""iterate"",
        ""field"": ""collection""
      }
    },
    {
      ""source"": {
        ""node_id"": ""iterate"",
        ""field"": ""item""
      },
      ""destination"": {
        ""node_id"": ""positive_conditioning"",
        ""field"": ""prompt""
      }
    }
  ]
}"
GLqNysc4,catcast,urgoz,Python,Friday 21st of July 2023 04:49:50 PM CDT,"import re
from streamlink.plugin import Plugin, pluginmatcher
from streamlink.stream import HLSStream
from streamlink.plugin.api import useragents

@pluginmatcher(re.compile(r'https?://catcast.tv/player/(?P<id>\d+)'))

class Catcast(Plugin):
    api_url = ""https://api.catcast.tv/api/channels/{id}/getcurrentprogram""      
    def _get_streams(self):
        channel_id = self.match.group(""id"")
        headers = {""User-Agent"": useragents.CHROME}
        body = self.session.http.get(self.api_url.format(id=channel_id), headers=headers).text
        mrl = None
        match = re.search(r'full_mobile_url"":""(.*?)\""', body)
        if match:
            mrl = match.group(1).replace('\/','/')
        if mrl:
            yield ""live"", HLSStream(self.session, mrl)

__plugin__ = Catcast"
