id,title,username,language,date,content
8mHj44mt,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Wednesday 14th of February 2024 11:39:39 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_278786.pdf
 
Working as of
15 February 2024"
i9hLBF5K,Mad,Unknown_No_1,PHP,Wednesday 14th of February 2024 11:14:53 PM CDT,FeelThePowerOfALI
feGTddxj,트위치 팔로우 일수 확인 (Updated),Boreum,JavaScript,Wednesday 14th of February 2024 10:03:51 PM CDT,"/* 
 *
var userName = '$(twitch $(user) ""{{displayName}}"")';
var streamerName = '$(twitch $(channel) ""{{displayName}}"")';
var followAge = `$(urlfetch https://commands.garretcharp.com/twitch/followage/$(channel)/$(user)))`;
 *
 */

splitedData = followAge.split(""for"");

if (splitedData.length > 1) {
	followTime = splitedData[1].replace(/ year/g, ""년"").replace(/ month/g, ""개월"").replace(/ day/g, ""일"").replace(/ hour/g, ""시간"").replace(/ minute/g, ""분"").replace(/ second/g, ""초"").replace(/s/g, """").replace(/,/g, """").replace(/\./g, """");
	userName + "" 님은 "" + streamerName + "" 님을 "" + followTime + ""동안 팔로우하셨습니다."";
} else {
	userName + "" 님은 "" + streamerName + "" 님을 팔로우하지 않았습니다."";
}"
DBq2K7C0,Nigerian scammers [14-2-5/2024],bombaires,AIMMS,Wednesday 14th of February 2024 09:30:58 PM CDT,"<a href=""mailto:conlinstony66666@hotmail.com"">conlinstony66666@hotmail.com</a>
<a href=""mailto:federalreserve900@zohomail.com"">federalreserve900@zohomail.com</a>
<a href=""mailto:nyreporting.forms@ny.frb.org"">nyreporting.forms@ny.frb.org</a>
<a href=""mailto:wwwinfounitedstates@gmail.com"">wwwinfounitedstates@gmail.com</a>
<a href=""mailto:wwwin.foun.i.te.ds.t.a.tes@gmail.com"">wwwin.foun.i.te.ds.t.a.tes@gmail.com</a>
<a href=""mailto:ww.w.inf.o.u.nite.d.stat.es@gmail.com"">ww.w.inf.o.u.nite.d.stat.es@gmail.com</a>
<a href=""mailto:wwwinfo.u.n.it.ed.s.t.at.e.s@gmail.com"">wwwinfo.u.n.it.ed.s.t.at.e.s@gmail.com</a>
<a href=""mailto:w.w.wi.nfou.n.it.e.dsta.t.es@gmail.com"">w.w.wi.nfou.n.it.e.dsta.t.es@gmail.com</a>
<a href=""mailto:w.wwi.n.fou.n.it.e.dstat.e.s@gmail.com"">w.wwi.n.fou.n.it.e.dstat.e.s@gmail.com</a>
<a href=""mailto:ww.win.fou.n.i.te.d.st.at.es@gmail.com"">ww.win.fou.n.i.te.d.st.at.es@gmail.com</a>
<a href=""mailto:ww.wi.nfounit.eds.tat.e.s@gmail.com"">ww.wi.nfounit.eds.tat.e.s@gmail.com</a>
<a href=""mailto:wwwin.f.ou.nit.e.d.s.t.a.t.e.s@gmail.com"">wwwin.f.ou.nit.e.d.s.t.a.t.e.s@gmail.com</a>
<a href=""mailto:ww.w.in.f.o.un.i.t.e.d.sta.t.es@gmail.com"">ww.w.in.f.o.un.i.t.e.d.sta.t.es@gmail.com</a>
<a href=""mailto:w.w.w.infou.n.i.te.dst.a.tes@gmail.com"">w.w.w.infou.n.i.te.dst.a.tes@gmail.com</a>
<a href=""mailto:w.wwin.f.ounit.e.ds.ta.te.s@gmail.com"">w.wwin.f.ounit.e.ds.ta.te.s@gmail.com</a>
<a href=""mailto:wwwi.nfou.nited.s.t.at.e.s@gmail.com"">wwwi.nfou.nited.s.t.at.e.s@gmail.com</a>
<a href=""mailto:ww.win.f.oun.i.te.d.state.s@gmail.com"">ww.win.f.oun.i.te.d.state.s@gmail.com</a>
<a href=""mailto:w.wwi.n.fo.uni.te.ds.t.a.te.s@gmail.com"">w.wwi.n.fo.uni.te.ds.t.a.te.s@gmail.com</a>
<a href=""mailto:wwwin.fo.u.ni.te.dst.ate.s@gmail.com"">wwwin.fo.u.ni.te.dst.ate.s@gmail.com</a>
<a href=""mailto:w.wwi.n.f.ou.n.i.ted.s.tates@gmail.com"">w.wwi.n.f.ou.n.i.ted.s.tates@gmail.com</a>
<a href=""mailto:w.w.w.i.n.f.ou.nite.d.s.ta.t.e.s@gmail.com"">w.w.w.i.n.f.ou.nite.d.s.ta.t.e.s@gmail.com</a>
<a href=""mailto:w.wwi.n.f.ou.n.i.te.d.st.a.te.s@gmail.com"">w.wwi.n.f.ou.n.i.te.d.st.a.te.s@gmail.com</a>
<a href=""mailto:www.in.f.ou.nitedstate.s@gmail.com"">www.in.f.ou.nitedstate.s@gmail.com</a>
<a href=""mailto:w.ww.in.fo.u.n.ite.ds.ta.tes@gmail.com"">w.ww.in.fo.u.n.ite.ds.ta.tes@gmail.com</a>
<a href=""mailto:w.ww.i.n.f.o.unit.ed.st.a.tes@gmail.com"">w.ww.i.n.f.o.unit.ed.st.a.tes@gmail.com</a>
<a href=""mailto:ww.wi.n.f.o.u.n.iteds.t.a.t.es@gmail.com"">ww.wi.n.f.o.u.n.iteds.t.a.t.es@gmail.com</a>
<a href=""mailto:w.w.w.inf.o.un.it.e.d.st.a.t.es@gmail.com"">w.w.w.inf.o.un.it.e.d.st.a.t.es@gmail.com</a>
<a href=""mailto:w.w.w.i.n.fou.n.i.t.e.d.st.a.t.e.s@gmail.com"">w.w.w.i.n.fou.n.i.t.e.d.st.a.t.e.s@gmail.com</a>
<a href=""mailto:ww.winfo.u.ni.t.e.dstates@gmail.com"">ww.winfo.u.ni.t.e.dstates@gmail.com</a>
<a href=""mailto:w.ww.i.nfo.u.nit.e.ds.tates@gmail.com"">w.ww.i.nfo.u.nit.e.ds.tates@gmail.com</a>
<a href=""mailto:ww.wi.n.fou.n.i.t.edst.a.t.e.s@gmail.com"">ww.wi.n.fou.n.i.t.edst.a.t.e.s@gmail.com</a>
<a href=""mailto:w.wwi.nf.oun.it.e.d.s.t.ate.s@gmail.com"">w.wwi.nf.oun.it.e.d.s.t.ate.s@gmail.com</a>
<a href=""mailto:w.w.w.in.foun.it.e.ds.ta.te.s@gmail.com"">w.w.w.in.foun.it.e.ds.ta.te.s@gmail.com</a>
<a href=""mailto:ww.w.infou.n.i.t.edst.a.te.s@gmail.com"">ww.w.infou.n.i.t.edst.a.te.s@gmail.com</a>
<a href=""mailto:w.w.winfo.unit.e.ds.ta.t.es@gmail.com"">w.w.winfo.unit.e.ds.ta.t.es@gmail.com</a>
<a href=""mailto:ww.w.infounited.sta.tes@gmail.com"">ww.w.infounited.sta.tes@gmail.com</a>
<a href=""mailto:ww.w.i.nfou.n.it.e.ds.t.at.e.s@gmail.com"">ww.w.i.nfou.n.it.e.ds.t.at.e.s@gmail.com</a>
<a href=""mailto:w.ww.infoun.it.e.d.s.tat.e.s@gmail.com"">w.ww.infoun.it.e.d.s.tat.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.n.f.oun.i.t.eds.tat.es@gmail.com"">w.ww.i.n.f.oun.i.t.eds.tat.es@gmail.com</a>
<a href=""mailto:w.w.w.infou.nit.ed.sta.t.es@gmail.com"">w.w.w.infou.nit.ed.sta.t.es@gmail.com</a>
<a href=""mailto:ww.winfo.u.nit.e.ds.t.ates@gmail.com"">ww.winfo.u.nit.e.ds.t.ates@gmail.com</a>
<a href=""mailto:wwwin.founi.ted.s.t.at.e.s@gmail.com"">wwwin.founi.ted.s.t.at.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.nf.ou.n.i.t.edsta.t.e.s@gmail.com"">w.ww.i.nf.ou.n.i.t.edsta.t.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.n.f.o.u.n.i.ted.stat.e.s@gmail.com"">w.ww.i.n.f.o.u.n.i.ted.stat.e.s@gmail.com</a>
<a href=""mailto:wwwin.foun.i.te.dsta.tes@gmail.com"">wwwin.foun.i.te.dsta.tes@gmail.com</a>
<a href=""mailto:ww.wi.n.f.o.u.nit.e.dst.ate.s@gmail.com"">ww.wi.n.f.o.u.nit.e.dst.ate.s@gmail.com</a>
<a href=""mailto:w.wwi.n.foun.i.t.eds.t.at.e.s@gmail.com"">w.wwi.n.foun.i.t.eds.t.at.e.s@gmail.com</a>
<a href=""mailto:w.ww.inf.o.u.n.itedsta.t.es@gmail.com"">w.ww.inf.o.u.n.itedsta.t.es@gmail.com</a>
<a href=""mailto:www.i.n.fo.u.nit.e.d.sta.t.e.s@gmail.com"">www.i.n.fo.u.nit.e.d.sta.t.e.s@gmail.com</a>
<a href=""mailto:www.info.uni.t.ed.s.tat.es@gmail.com"">www.info.uni.t.ed.s.tat.es@gmail.com</a>
<a href=""mailto:www.infoun.itedst.at.e.s@gmail.com"">www.infoun.itedst.at.e.s@gmail.com</a>
<a href=""mailto:w.w.w.info.un.i.t.ed.st.at.e.s@gmail.com"">w.w.w.info.un.i.t.ed.st.at.e.s@gmail.com</a>
<a href=""mailto:w.w.win.fo.unitedsta.te.s@gmail.com"">w.w.win.fo.unitedsta.te.s@gmail.com</a>
<a href=""mailto:w.wwi.nf.o.u.nite.dstates@gmail.com"">w.wwi.nf.o.u.nite.dstates@gmail.com</a>
<a href=""mailto:w.w.w.inf.o.un.it.e.dstates@gmail.com"">w.w.w.inf.o.un.it.e.dstates@gmail.com</a>
<a href=""mailto:w.w.wi.nf.o.u.n.i.t.e.ds.ta.t.e.s@gmail.com"">w.w.wi.nf.o.u.n.i.t.e.ds.ta.t.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.n.f.o.u.n.i.ted.sta.t.es@gmail.com"">w.ww.i.n.f.o.u.n.i.ted.sta.t.es@gmail.com</a>
<a href=""mailto:w.wwinfou.n.ite.dstates@gmail.com"">w.wwinfou.n.ite.dstates@gmail.com</a>
<a href=""mailto:wwwi.nf.o.u.ni.t.e.d.s.tates@gmail.com"">wwwi.nf.o.u.ni.t.e.d.s.tates@gmail.com</a>
<a href=""mailto:w.w.wi.nf.ou.n.ited.st.ate.s@gmail.com"">w.w.wi.nf.ou.n.ited.st.ate.s@gmail.com</a>
<a href=""mailto:w.wwin.founi.t.ed.sta.t.es@gmail.com"">w.wwin.founi.t.ed.sta.t.es@gmail.com</a>
<a href=""mailto:w.ww.i.n.fou.n.it.e.d.st.a.te.s@gmail.com"">w.ww.i.n.fou.n.it.e.d.st.a.te.s@gmail.com</a>
<a href=""mailto:w.wwi.n.f.oun.i.t.e.d.s.tates@gmail.com"">w.wwi.n.f.oun.i.t.e.d.s.tates@gmail.com</a>
<a href=""mailto:ww.w.i.nfo.unite.d.st.at.e.s@gmail.com"">ww.w.i.nfo.unite.d.st.at.e.s@gmail.com</a>
<a href=""mailto:ww.win.fo.un.ite.dst.a.tes@gmail.com"">ww.win.fo.un.ite.dst.a.tes@gmail.com</a>
<a href=""mailto:w.w.w.info.u.n.i.teds.tat.es@gmail.com"">w.w.w.info.u.n.i.teds.tat.es@gmail.com</a>
<a href=""mailto:w.w.wi.nfo.u.nite.d.s.t.a.t.e.s@gmail.com"">w.w.wi.nfo.u.nite.d.s.t.a.t.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.n.f.o.uniteds.ta.tes@gmail.com"">w.ww.i.n.f.o.uniteds.ta.tes@gmail.com</a>
<a href=""mailto:w.ww.i.n.f.o.u.nit.ed.states@gmail.com"">w.ww.i.n.f.o.u.nit.ed.states@gmail.com</a>
<a href=""mailto:wwwi.n.founi.te.ds.t.a.tes@gmail.com"">wwwi.n.founi.te.ds.t.a.tes@gmail.com</a>
<a href=""mailto:ww.w.i.n.foun.it.e.dst.ate.s@gmail.com"">ww.w.i.n.foun.it.e.dst.ate.s@gmail.com</a>
<a href=""mailto:ww.w.i.n.f.ou.nite.ds.tates@gmail.com"">ww.w.i.n.f.ou.nite.ds.tates@gmail.com</a>
<a href=""mailto:wwwi.n.fou.ni.te.ds.t.a.t.e.s@gmail.com"">wwwi.n.fou.ni.te.ds.t.a.t.e.s@gmail.com</a>
<a href=""mailto:w.w.wi.n.foun.ited.s.tates@gmail.com"">w.w.wi.n.foun.ited.s.tates@gmail.com</a>
<a href=""mailto:ww.w.in.fou.ni.t.e.d.s.tat.es@gmail.com"">ww.w.in.fou.ni.t.e.d.s.tat.es@gmail.com</a>
<a href=""mailto:ww.winf.ou.n.ited.s.tate.s@gmail.com"">ww.winf.ou.n.ited.s.tate.s@gmail.com</a>
<a href=""mailto:w.ww.inf.oun.i.te.d.s.t.a.t.e.s@gmail.com"">w.ww.inf.oun.i.te.d.s.t.a.t.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.nf.ouni.te.d.s.t.at.es@gmail.com"">w.ww.i.nf.ouni.te.d.s.t.at.es@gmail.com</a>
<a href=""mailto:www.in.fo.uni.t.e.dst.a.tes@gmail.com"">www.in.fo.uni.t.e.dst.a.tes@gmail.com</a>
<a href=""mailto:w.wwi.n.f.oun.i.t.e.ds.ta.t.e.s@gmail.com"">w.wwi.n.f.oun.i.t.e.ds.ta.t.e.s@gmail.com</a>
<a href=""mailto:www.inf.o.uni.t.e.dstate.s@gmail.com"">www.inf.o.uni.t.e.dstate.s@gmail.com</a>
<a href=""mailto:ww.winf.oun.iteds.tates@gmail.com"">ww.winf.oun.iteds.tates@gmail.com</a>
<a href=""mailto:w.w.w.info.u.ni.t.e.d.s.t.at.es@gmail.com"">w.w.w.info.u.ni.t.e.d.s.t.at.es@gmail.com</a>
<a href=""mailto:w.w.wi.n.founiteds.t.at.e.s@gmail.com"">w.w.wi.n.founiteds.t.at.e.s@gmail.com</a>
<a href=""mailto:ww.w.info.un.i.t.ed.st.a.tes@gmail.com"">ww.w.info.un.i.t.ed.st.a.tes@gmail.com</a>
<a href=""mailto:w.w.wi.n.f.o.u.n.it.ed.st.a.t.es@gmail.com"">w.w.wi.n.f.o.u.n.it.ed.st.a.t.es@gmail.com</a>
<a href=""mailto:w.w.winf.ou.nit.e.d.stat.e.s@gmail.com"">w.w.winf.ou.nit.e.d.stat.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.n.fo.u.n.ite.d.s.t.a.t.e.s@gmail.com"">w.ww.i.n.fo.u.n.ite.d.s.t.a.t.e.s@gmail.com</a>
<a href=""mailto:w.wwinf.o.unite.d.s.tate.s@gmail.com"">w.wwinf.o.unite.d.s.tate.s@gmail.com</a>
<a href=""mailto:w.w.win.f.ou.nit.e.d.s.t.ate.s@gmail.com"">w.w.win.f.ou.nit.e.d.s.t.ate.s@gmail.com</a>
<a href=""mailto:wwwin.fo.u.ni.t.e.ds.tat.e.s@gmail.com"">wwwin.fo.u.ni.t.e.ds.tat.e.s@gmail.com</a>
<a href=""mailto:w.ww.info.u.n.ite.dst.a.t.es@gmail.com"">w.ww.info.u.n.ite.dst.a.t.es@gmail.com</a>
<a href=""mailto:ww.wi.nfoun.it.ed.st.at.es@gmail.com"">ww.wi.nfoun.it.ed.st.at.es@gmail.com</a>
<a href=""mailto:ww.win.foun.it.e.ds.t.a.t.es@gmail.com"">ww.win.foun.it.e.ds.t.a.t.es@gmail.com</a>
<a href=""mailto:w.ww.i.n.fo.u.nite.ds.tat.e.s@gmail.com"">w.ww.i.n.fo.u.nite.ds.tat.e.s@gmail.com</a>
<a href=""mailto:wwwin.f.o.u.nit.eds.tat.e.s@gmail.com"">wwwin.f.o.u.nit.eds.tat.e.s@gmail.com</a>
<a href=""mailto:www.in.f.ou.ni.tedsta.tes@gmail.com"">www.in.f.ou.ni.tedsta.tes@gmail.com</a>
<a href=""mailto:ww.wi.nfo.u.ni.te.dstat.e.s@gmail.com"">ww.wi.nfo.u.ni.te.dstat.e.s@gmail.com</a>
<a href=""mailto:w.w.win.fo.un.i.te.d.states@gmail.com"">w.w.win.fo.un.i.te.d.states@gmail.com</a>
<a href=""mailto:w.w.w.i.nf.ou.nited.s.ta.t.e.s@gmail.com"">w.w.w.i.nf.ou.nited.s.ta.t.e.s@gmail.com</a>
<a href=""mailto:ww.w.in.f.o.u.n.i.t.e.dstat.e.s@gmail.com"">ww.w.in.f.o.u.n.i.t.e.dstat.e.s@gmail.com</a>
<a href=""mailto:ww.winfouni.te.d.stat.es@gmail.com"">ww.winfouni.te.d.stat.es@gmail.com</a>
<a href=""mailto:ww.wi.n.f.o.un.it.ed.st.ates@gmail.com"">ww.wi.n.f.o.un.it.ed.st.ates@gmail.com</a>
<a href=""mailto:ww.wi.nf.oun.i.t.ed.s.t.a.tes@gmail.com"">ww.wi.nf.oun.i.t.ed.s.t.a.tes@gmail.com</a>
<a href=""mailto:wwwi.nfou.nite.d.stat.e.s@gmail.com"">wwwi.nfou.nite.d.stat.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.nfoun.it.e.d.st.at.es@gmail.com"">w.ww.i.nfoun.it.e.d.st.at.es@gmail.com</a>
<a href=""mailto:ww.wi.nfo.un.it.e.d.sta.t.es@gmail.com"">ww.wi.nfo.un.it.e.d.sta.t.es@gmail.com</a>
<a href=""mailto:wwwinfo.u.n.it.e.d.st.at.e.s@gmail.com"">wwwinfo.u.n.it.e.d.st.at.e.s@gmail.com</a>
<a href=""mailto:ww.winfouni.teds.tat.e.s@gmail.com"">ww.winfouni.teds.tat.e.s@gmail.com</a>
<a href=""mailto:wwwi.nf.o.u.ni.ted.st.a.tes@gmail.com"">wwwi.nf.o.u.ni.ted.st.a.tes@gmail.com</a>
<a href=""mailto:www.i.n.f.ou.ni.te.d.s.t.at.es@gmail.com"">www.i.n.f.ou.ni.te.d.s.t.at.es@gmail.com</a>
<a href=""mailto:w.ww.i.n.foun.it.e.dstate.s@gmail.com"">w.ww.i.n.foun.it.e.dstate.s@gmail.com</a>
<a href=""mailto:ww.win.fou.ni.teds.t.ate.s@gmail.com"">ww.win.fou.ni.teds.t.ate.s@gmail.com</a>
<a href=""mailto:w.wwin.fo.u.n.i.te.d.st.a.tes@gmail.com"">w.wwin.fo.u.n.i.te.d.st.a.tes@gmail.com</a>
<a href=""mailto:w.wwin.f.ou.n.i.te.ds.ta.te.s@gmail.com"">w.wwin.f.ou.n.i.te.ds.ta.te.s@gmail.com</a>
<a href=""mailto:w.ww.infou.n.i.t.e.d.sta.t.es@gmail.com"">w.ww.infou.n.i.t.e.d.sta.t.es@gmail.com</a>
<a href=""mailto:w.ww.infou.n.it.e.d.states@gmail.com"">w.ww.infou.n.it.e.d.states@gmail.com</a>
<a href=""mailto:w.w.w.in.f.o.u.ni.te.d.st.a.te.s@gmail.com"">w.w.w.in.f.o.u.ni.te.d.st.a.te.s@gmail.com</a>
<a href=""mailto:w.w.winf.oun.ited.s.ta.t.es@gmail.com"">w.w.winf.oun.ited.s.ta.t.es@gmail.com</a>
<a href=""mailto:www.i.n.fo.u.n.iteds.ta.t.es@gmail.com"">www.i.n.fo.u.n.iteds.ta.t.es@gmail.com</a>
<a href=""mailto:w.wwi.nf.ou.n.ited.st.a.te.s@gmail.com"">w.wwi.nf.ou.n.ited.st.a.te.s@gmail.com</a>
<a href=""mailto:w.ww.inf.o.un.it.e.ds.tat.e.s@gmail.com"">w.ww.inf.o.un.it.e.ds.tat.e.s@gmail.com</a>
<a href=""mailto:wwwin.founit.ed.stat.e.s@gmail.com"">wwwin.founit.ed.stat.e.s@gmail.com</a>
<a href=""mailto:www.in.fo.unitedst.a.te.s@gmail.com"">www.in.fo.unitedst.a.te.s@gmail.com</a>
<a href=""mailto:w.ww.infou.n.i.t.e.d.sta.te.s@gmail.com"">w.ww.infou.n.i.t.e.d.sta.te.s@gmail.com</a>
<a href=""mailto:w.w.w.inf.o.u.n.i.t.e.d.st.ate.s@gmail.com"">w.w.w.inf.o.u.n.i.t.e.d.st.ate.s@gmail.com</a>
<a href=""mailto:ww.wi.n.f.ouni.te.d.st.a.t.e.s@gmail.com"">ww.wi.n.f.ouni.te.d.st.a.t.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.n.f.o.un.iteds.t.a.t.es@gmail.com"">w.ww.i.n.f.o.un.iteds.t.a.t.es@gmail.com</a>
<a href=""mailto:w.wwi.n.fo.u.nite.ds.tat.es@gmail.com"">w.wwi.n.fo.u.nite.ds.tat.es@gmail.com</a>
<a href=""mailto:www.i.n.founit.edsta.tes@gmail.com"">www.i.n.founit.edsta.tes@gmail.com</a>
<a href=""mailto:w.wwinf.o.un.i.teds.ta.t.es@gmail.com"">w.wwinf.o.un.i.teds.ta.t.es@gmail.com</a>
<a href=""mailto:ww.winf.o.unit.e.ds.ta.te.s@gmail.com"">ww.winf.o.unit.e.ds.ta.te.s@gmail.com</a>
<a href=""mailto:ww.wi.n.fo.unite.dst.at.e.s@gmail.com"">ww.wi.n.fo.unite.dst.at.e.s@gmail.com</a>
<a href=""mailto:ww.wi.n.fo.un.i.teds.ta.t.e.s@gmail.com"">ww.wi.n.fo.un.i.teds.ta.t.e.s@gmail.com</a>
<a href=""mailto:www.inf.oun.itedst.a.t.es@gmail.com"">www.inf.oun.itedst.a.t.es@gmail.com</a>
<a href=""mailto:www.i.n.fou.nit.e.ds.t.ates@gmail.com"">www.i.n.fou.nit.e.ds.t.ates@gmail.com</a>
<a href=""mailto:wwwi.n.f.o.u.nite.d.s.tat.es@gmail.com"">wwwi.n.f.o.u.nite.d.s.tat.es@gmail.com</a>
<a href=""mailto:ww.win.fo.u.ni.t.e.dst.at.e.s@gmail.com"">ww.win.fo.u.ni.t.e.dst.at.e.s@gmail.com</a>
<a href=""mailto:w.w.w.i.nf.ouni.ted.st.a.t.e.s@gmail.com"">w.w.w.i.nf.ouni.ted.st.a.t.e.s@gmail.com</a>
<a href=""mailto:wwwi.n.f.ou.nit.ed.states@gmail.com"">wwwi.n.f.ou.nit.ed.states@gmail.com</a>
<a href=""mailto:wwwi.nfou.n.i.te.d.s.t.at.e.s@gmail.com"">wwwi.nfou.n.i.te.d.s.t.at.e.s@gmail.com</a>
<a href=""mailto:ww.wi.nfo.u.ni.ted.s.t.at.es@gmail.com"">ww.wi.nfo.u.ni.ted.s.t.at.es@gmail.com</a>
<a href=""mailto:w.ww.i.nfou.n.it.edstat.e.s@gmail.com"">w.ww.i.nfou.n.it.edstat.e.s@gmail.com</a>
<a href=""mailto:ww.w.info.u.n.ite.d.s.t.at.e.s@gmail.com"">ww.w.info.u.n.ite.d.s.t.at.e.s@gmail.com</a>
<a href=""mailto:w.w.win.fo.u.n.i.t.e.ds.ta.tes@gmail.com"">w.w.win.fo.u.n.i.t.e.ds.ta.tes@gmail.com</a>
<a href=""mailto:w.wwinfo.un.it.eds.tat.es@gmail.com"">w.wwinfo.un.it.eds.tat.es@gmail.com</a>
<a href=""mailto:w.wwi.nf.oun.i.te.dst.at.es@gmail.com"">w.wwi.nf.oun.i.te.dst.at.es@gmail.com</a>
<a href=""mailto:w.w.winfoun.i.ted.sta.t.e.s@gmail.com"">w.w.winfoun.i.ted.sta.t.e.s@gmail.com</a>
<a href=""mailto:w.ww.in.f.o.uniteds.t.at.e.s@gmail.com"">w.ww.in.f.o.uniteds.t.at.e.s@gmail.com</a>
<a href=""mailto:wwwi.n.foun.it.e.d.st.a.t.e.s@gmail.com"">wwwi.n.foun.it.e.d.st.a.t.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.nfoun.i.te.ds.tates@gmail.com"">w.ww.i.nfoun.i.te.ds.tates@gmail.com</a>
<a href=""mailto:w.ww.i.nfo.u.n.i.t.e.d.stat.es@gmail.com"">w.ww.i.nfo.u.n.i.t.e.d.stat.es@gmail.com</a>
<a href=""mailto:ww.winf.ou.ni.t.e.d.st.ate.s@gmail.com"">ww.winf.ou.ni.t.e.d.st.ate.s@gmail.com</a>
<a href=""mailto:wwwin.fo.u.ni.t.e.dst.a.te.s@gmail.com"">wwwin.fo.u.ni.t.e.dst.a.te.s@gmail.com</a>
<a href=""mailto:www.inf.ouni.te.d.s.t.a.t.e.s@gmail.com"">www.inf.ouni.te.d.s.t.a.t.e.s@gmail.com</a>
<a href=""mailto:w.ww.i.nfoun.i.t.e.d.s.ta.t.es@gmail.com"">w.ww.i.nfoun.i.t.e.d.s.ta.t.es@gmail.com</a>
<a href=""mailto:ww.wi.n.fou.n.i.ted.st.ate.s@gmail.com"">ww.wi.n.fou.n.i.ted.st.ate.s@gmail.com</a>
<a href=""mailto:w.w.w.info.u.n.it.e.dst.a.te.s@gmail.com"">w.w.w.info.u.n.it.e.dst.a.te.s@gmail.com</a>
<a href=""mailto:wwwinfo.u.n.iteds.ta.t.es@gmail.com"">wwwinfo.u.n.iteds.ta.t.es@gmail.com</a>
<a href=""mailto:w.wwin.f.oun.iteds.t.a.te.s@gmail.com"">w.wwin.f.oun.iteds.t.a.te.s@gmail.com</a>
<a href=""mailto:w.wwin.f.ounit.e.ds.t.ate.s@gmail.com"">w.wwin.f.ounit.e.ds.t.ate.s@gmail.com</a>
<a href=""mailto:wwwi.n.f.ouni.t.eds.ta.tes@gmail.com"">wwwi.n.f.ouni.t.eds.ta.tes@gmail.com</a>
<a href=""mailto:wwwi.n.f.ou.n.it.eds.t.at.es@gmail.com"">wwwi.n.f.ou.n.it.eds.t.at.es@gmail.com</a>
<a href=""mailto:w.wwin.f.oun.it.e.d.s.tates@gmail.com"">w.wwin.f.oun.it.e.d.s.tates@gmail.com</a>
<a href=""mailto:ww.w.info.u.ni.t.edst.at.es@gmail.com"">ww.w.info.u.ni.t.edst.at.es@gmail.com</a>
<a href=""mailto:ww.wi.n.f.o.uni.teds.t.a.te.s@gmail.com"">ww.wi.n.f.o.uni.teds.t.a.te.s@gmail.com</a>
<a href=""mailto:w.ww.i.nf.ou.nitedst.at.e.s@gmail.com"">w.ww.i.nf.ou.nitedst.at.e.s@gmail.com</a>
<a href=""mailto:ww.win.f.ounitedsta.te.s@gmail.com"">ww.win.f.ounitedsta.te.s@gmail.com</a>
<a href=""mailto:wwwi.n.fo.u.ni.t.e.dstat.es@gmail.com"">wwwi.n.fo.u.ni.t.e.dstat.es@gmail.com</a>
<a href=""mailto:w.wwi.n.foun.i.te.ds.ta.tes@gmail.com"">w.wwi.n.foun.i.te.ds.ta.tes@gmail.com</a>
<a href=""mailto:ww.w.i.nfou.niteds.t.a.t.es@gmail.com"">ww.w.i.nfou.niteds.t.a.t.es@gmail.com</a>
<a href=""mailto:ww.wi.nf.ou.nit.e.d.st.ates@gmail.com"">ww.wi.nf.ou.nit.e.d.st.ates@gmail.com</a>
<a href=""mailto:w.w.winf.o.u.n.i.t.eds.tates@gmail.com"">w.w.winf.o.u.n.i.t.eds.tates@gmail.com</a>
<a href=""mailto:w.w.w.i.n.f.o.u.n.it.edstate.s@gmail.com"">w.w.w.i.n.f.o.u.n.it.edstate.s@gmail.com</a>
<a href=""mailto:w.w.wi.nf.o.un.ited.s.t.at.es@gmail.com"">w.w.wi.nf.o.un.ited.s.t.at.es@gmail.com</a>
<a href=""mailto:w.w.w.in.f.o.unit.ed.s.t.at.es@gmail.com"">w.w.w.in.f.o.unit.ed.s.t.at.es@gmail.com</a>
<a href=""mailto:w.wwi.n.fou.nit.e.d.stat.e.s@gmail.com"">w.wwi.n.fou.nit.e.d.stat.e.s@gmail.com</a>
<a href=""mailto:w.w.wi.nf.oun.it.ed.s.tat.e.s@gmail.com"">w.w.wi.nf.oun.it.ed.s.tat.e.s@gmail.com</a>
<a href=""mailto:w.wwinf.ounit.edst.a.t.es@gmail.com"">w.wwinf.ounit.edst.a.t.es@gmail.com</a>
<a href=""mailto:w.w.wi.nf.o.u.niteds.tat.e.s@gmail.com"">w.w.wi.nf.o.u.niteds.tat.e.s@gmail.com</a>
<a href=""mailto:w.w.wi.nf.o.un.i.ted.st.a.t.es@gmail.com"">w.w.wi.nf.o.un.i.ted.st.a.t.es@gmail.com</a>
<a href=""mailto:w.wwinf.ou.ni.t.e.d.s.t.a.te.s@gmail.com"">w.wwinf.ou.ni.t.e.d.s.t.a.te.s@gmail.com</a>
<a href=""mailto:w.wwi.n.fou.n.i.t.eds.t.a.te.s@gmail.com"">w.wwi.n.fou.n.i.t.eds.t.a.te.s@gmail.com</a>
<a href=""mailto:wwwinfou.n.it.ed.stat.e.s@gmail.com"">wwwinfou.n.it.ed.stat.e.s@gmail.com</a>
<a href=""mailto:ww.w.in.fou.n.it.e.d.s.t.at.e.s@gmail.com"">ww.w.in.fou.n.it.e.d.s.t.at.e.s@gmail.com</a>
<a href=""mailto:w.ww.infou.n.i.tedst.ate.s@gmail.com"">w.ww.infou.n.i.tedst.ate.s@gmail.com</a>
<a href=""mailto:w.ww.i.n.fou.ni.ted.state.s@gmail.com"">w.ww.i.n.fou.ni.ted.state.s@gmail.com</a>
<a href=""mailto:w.wwin.f.ou.n.i.teds.tat.e.s@gmail.com"">w.wwin.f.ou.n.i.teds.tat.e.s@gmail.com</a>
<a href=""mailto:www.in.fou.ni.t.edsta.t.es@gmail.com"">www.in.fou.ni.t.edsta.t.es@gmail.com</a>
<a href=""mailto:w.w.w.i.n.f.ou.n.it.edst.ate.s@gmail.com"">w.w.w.i.n.f.ou.n.it.edst.ate.s@gmail.com</a>
<a href=""mailto:w.wwin.fo.uni.t.ed.s.t.a.t.es@gmail.com"">w.wwin.fo.uni.t.ed.s.t.a.t.es@gmail.com</a>
<a href=""mailto:wwwin.f.o.un.i.tedstat.es@gmail.com"">wwwin.f.o.un.i.tedstat.es@gmail.com</a>
<a href=""mailto:wwwinf.o.un.i.ted.s.t.ate.s@gmail.com"">wwwinf.o.un.i.ted.s.t.ate.s@gmail.com</a>
<a href=""mailto:w.wwi.nfounit.e.d.state.s@gmail.com"">w.wwi.nfounit.e.d.state.s@gmail.com</a>
<a href=""mailto:www.i.n.f.ou.n.i.t.e.d.st.a.te.s@gmail.com"">www.i.n.f.ou.n.i.t.e.d.st.a.te.s@gmail.com</a>
<a href=""mailto:ww.w.in.fo.u.nite.dst.a.tes@gmail.com"">ww.w.in.fo.u.nite.dst.a.tes@gmail.com</a>
<a href=""mailto:w.wwin.f.ou.ni.te.ds.tates@gmail.com"">w.wwin.f.ou.ni.te.ds.tates@gmail.com</a>
<a href=""mailto:w.wwi.n.f.ouni.t.edst.ate.s@gmail.com"">w.wwi.n.f.ouni.t.edst.ate.s@gmail.com</a>
<a href=""mailto:wwwi.nfo.uni.t.ed.s.ta.te.s@gmail.com"">wwwi.nfo.uni.t.ed.s.ta.te.s@gmail.com</a>
<a href=""mailto:ww.win.fo.u.ni.ted.st.at.e.s@gmail.com"">ww.win.fo.u.ni.ted.st.at.e.s@gmail.com</a>
<a href=""mailto:w.ww.info.u.n.i.te.d.s.t.ates@gmail.com"">w.ww.info.u.n.i.te.d.s.t.ates@gmail.com</a>
<a href=""mailto:w.w.w.infoun.it.ed.stat.e.s@gmail.com"">w.w.w.infoun.it.ed.stat.e.s@gmail.com</a>
<a href=""mailto:w.w.w.i.n.f.oun.i.t.edst.ates@gmail.com"">w.w.w.i.n.f.oun.i.t.edst.ates@gmail.com</a>
<a href=""mailto:w.w.win.foun.i.teds.t.a.tes@gmail.com"">w.w.win.foun.i.teds.t.a.tes@gmail.com</a>
<a href=""mailto:infounitedstates@gmail.com"">infounitedstates@gmail.com</a>
<a href=""mailto:i.nfoun.i.t.e.ds.ta.tes@gmail.com"">i.nfoun.i.t.e.ds.ta.tes@gmail.com</a>
<a href=""mailto:i.n.foun.it.eds.t.ates@gmail.com"">i.n.foun.it.eds.t.ates@gmail.com</a>
<a href=""mailto:i.n.f.o.un.i.ted.s.ta.t.e.s@gmail.com"">i.n.f.o.un.i.ted.s.ta.t.e.s@gmail.com</a>
<a href=""mailto:i.nfo.u.ni.t.e.d.stat.es@gmail.com"">i.nfo.u.ni.t.e.d.stat.es@gmail.com</a>
<a href=""mailto:in.f.o.u.n.i.teds.t.at.es@gmail.com"">in.f.o.u.n.i.teds.t.at.es@gmail.com</a>
<a href=""mailto:in.f.oun.it.e.ds.t.a.te.s@gmail.com"">in.f.oun.it.e.ds.t.a.te.s@gmail.com</a>
<a href=""mailto:in.f.o.u.nitedstat.e.s@gmail.com"">in.f.o.u.nitedstat.e.s@gmail.com</a>
<a href=""mailto:i.nf.ouni.t.e.ds.t.ates@gmail.com"">i.nf.ouni.t.e.ds.t.ates@gmail.com</a>
<a href=""mailto:i.nfoun.i.t.ed.stat.es@gmail.com"">i.nfoun.i.t.ed.stat.es@gmail.com</a>
<a href=""mailto:i.n.fo.u.n.ite.dsta.t.e.s@gmail.com"">i.n.fo.u.n.ite.dsta.t.e.s@gmail.com</a>
<a href=""mailto:info.u.n.i.t.e.d.s.tat.e.s@gmail.com"">info.u.n.i.t.e.d.s.tat.e.s@gmail.com</a>
<a href=""mailto:in.f.ounit.e.dst.a.tes@gmail.com"">in.f.ounit.e.dst.a.tes@gmail.com</a>
<a href=""mailto:in.f.o.un.i.teds.t.ate.s@gmail.com"">in.f.o.un.i.teds.t.ate.s@gmail.com</a>
<a href=""mailto:i.nfounit.edst.a.t.e.s@gmail.com"">i.nfounit.edst.a.t.e.s@gmail.com</a>
<a href=""mailto:i.nfou.n.i.t.edsta.t.e.s@gmail.com"">i.nfou.n.i.t.edsta.t.e.s@gmail.com</a>
<a href=""mailto:i.n.fou.n.it.eds.t.ates@gmail.com"">i.n.fou.n.it.eds.t.ates@gmail.com</a>
<a href=""mailto:in.f.ou.n.it.ed.s.t.a.te.s@gmail.com"">in.f.ou.n.it.ed.s.t.a.te.s@gmail.com</a>
<a href=""mailto:in.fou.nited.s.t.ates@gmail.com"">in.fou.nited.s.t.ates@gmail.com</a>
<a href=""mailto:i.nf.o.u.n.ited.s.tat.e.s@gmail.com"">i.nf.o.u.n.ited.s.tat.e.s@gmail.com</a>
<a href=""mailto:in.fo.uni.te.ds.t.a.te.s@gmail.com"">in.fo.uni.te.ds.t.a.te.s@gmail.com</a>
<a href=""mailto:in.f.ou.nite.d.s.t.ates@gmail.com"">in.f.ou.nite.d.s.t.ates@gmail.com</a>
<a href=""mailto:i.n.fo.uni.t.eds.t.at.e.s@gmail.com"">i.n.fo.uni.t.eds.t.at.e.s@gmail.com</a>
<a href=""mailto:i.n.f.o.u.n.i.t.ed.s.ta.t.es@gmail.com"">i.n.f.o.u.n.i.t.ed.s.ta.t.es@gmail.com</a>
<a href=""mailto:i.nfo.un.i.ted.sta.te.s@gmail.com"">i.nfo.un.i.ted.sta.te.s@gmail.com</a>
<a href=""mailto:inf.oun.i.ted.state.s@gmail.com"">inf.oun.i.ted.state.s@gmail.com</a>
<a href=""mailto:i.n.fo.u.n.iteds.t.ate.s@gmail.com"">i.n.fo.u.n.iteds.t.ate.s@gmail.com</a>
<a href=""mailto:inf.o.un.ite.ds.t.a.tes@gmail.com"">inf.o.un.ite.ds.t.a.tes@gmail.com</a>
<a href=""mailto:info.u.nit.e.d.s.t.a.tes@gmail.com"">info.u.nit.e.d.s.t.a.tes@gmail.com</a>
<a href=""mailto:in.f.oun.i.t.e.d.s.t.ates@gmail.com"">in.f.oun.i.t.e.d.s.t.ates@gmail.com</a>
<a href=""mailto:in.foun.it.ed.s.t.ates@gmail.com"">in.foun.it.ed.s.t.ates@gmail.com</a>
<a href=""mailto:i.nf.o.uni.t.e.dst.a.te.s@gmail.com"">i.nf.o.uni.t.e.dst.a.te.s@gmail.com</a>
<a href=""mailto:info.u.n.i.te.dsta.te.s@gmail.com"">info.u.n.i.te.dsta.te.s@gmail.com</a>
<a href=""mailto:i.nfou.ni.t.eds.t.ates@gmail.com"">i.nfou.ni.t.eds.t.ates@gmail.com</a>
<a href=""mailto:i.nf.o.u.n.i.t.e.d.state.s@gmail.com"">i.nf.o.u.n.i.t.e.d.state.s@gmail.com</a>
<a href=""mailto:i.n.f.o.u.nited.s.t.a.t.es@gmail.com"">i.n.f.o.u.nited.s.t.a.t.es@gmail.com</a>
<a href=""mailto:info.unite.d.s.t.a.t.e.s@gmail.com"">info.unite.d.s.t.a.t.e.s@gmail.com</a>
<a href=""mailto:i.n.f.o.u.n.i.te.d.st.a.te.s@gmail.com"">i.n.f.o.u.n.i.te.d.st.a.te.s@gmail.com</a>
<a href=""mailto:infou.nit.e.d.st.at.e.s@gmail.com"">infou.nit.e.d.st.at.e.s@gmail.com</a>
<a href=""mailto:i.n.f.ou.nit.e.ds.t.ates@gmail.com"">i.n.f.ou.nit.e.ds.t.ates@gmail.com</a>
<a href=""mailto:infoun.i.ted.stat.es@gmail.com"">infoun.i.ted.stat.es@gmail.com</a>
<a href=""mailto:i.nf.o.un.i.t.edst.a.t.es@gmail.com"">i.nf.o.un.i.t.edst.a.t.es@gmail.com</a>
<a href=""mailto:i.nf.ou.nite.d.st.at.e.s@gmail.com"">i.nf.ou.nite.d.st.at.e.s@gmail.com</a>
<a href=""mailto:i.nf.o.u.n.i.t.ed.s.ta.t.es@gmail.com"">i.nf.o.u.n.i.t.ed.s.ta.t.es@gmail.com</a>
<a href=""mailto:i.nfou.ni.t.eds.tat.es@gmail.com"">i.nfou.ni.t.eds.tat.es@gmail.com</a>
<a href=""mailto:i.n.f.ou.nite.d.st.a.t.e.s@gmail.com"">i.n.f.ou.nite.d.st.a.t.e.s@gmail.com</a>
<a href=""mailto:i.n.f.o.u.n.ited.st.ates@gmail.com"">i.n.f.o.u.n.ited.st.ates@gmail.com</a>
<a href=""mailto:infou.ni.t.ed.state.s@gmail.com"">infou.ni.t.ed.state.s@gmail.com</a>
<a href=""mailto:i.n.f.o.u.ni.t.ed.st.ate.s@gmail.com"">i.n.f.o.u.ni.t.ed.st.ate.s@gmail.com</a>
<a href=""mailto:in.f.ou.nite.d.state.s@gmail.com"">in.f.ou.nite.d.state.s@gmail.com</a>
<a href=""mailto:i.nfo.un.i.t.eds.t.ate.s@gmail.com"">i.nfo.un.i.t.eds.t.ate.s@gmail.com</a>
<a href=""mailto:i.nfo.u.nit.e.ds.tate.s@gmail.com"">i.nfo.u.nit.e.ds.tate.s@gmail.com</a>
<a href=""mailto:in.f.oun.i.t.ed.s.t.a.t.e.s@gmail.com"">in.f.oun.i.t.ed.s.t.a.t.e.s@gmail.com</a>
<a href=""mailto:inf.o.u.nited.state.s@gmail.com"">inf.o.u.nited.state.s@gmail.com</a>
<a href=""mailto:i.nf.ouni.te.d.st.a.tes@gmail.com"">i.nf.ouni.te.d.st.a.tes@gmail.com</a>
<a href=""mailto:i.nfo.u.n.iteds.t.ate.s@gmail.com"">i.nfo.u.n.iteds.t.ate.s@gmail.com</a>
<a href=""mailto:in.f.o.unit.e.d.st.at.e.s@gmail.com"">in.f.o.unit.e.d.st.at.e.s@gmail.com</a>
<a href=""mailto:in.foun.it.ed.st.a.te.s@gmail.com"">in.foun.it.ed.st.a.te.s@gmail.com</a>
<a href=""mailto:i.nfou.n.i.ted.s.ta.tes@gmail.com"">i.nfou.n.i.ted.s.ta.tes@gmail.com</a>
<a href=""mailto:in.fo.u.n.i.t.e.ds.tates@gmail.com"">in.fo.u.n.i.t.e.ds.tates@gmail.com</a>
<a href=""mailto:i.n.f.oun.i.t.ed.st.a.tes@gmail.com"">i.n.f.oun.i.t.ed.st.a.tes@gmail.com</a>
<a href=""mailto:i.nfounite.d.stat.es@gmail.com"">i.nfounite.d.stat.es@gmail.com</a>
<a href=""mailto:i.nfoun.ited.st.ate.s@gmail.com"">i.nfoun.ited.st.ate.s@gmail.com</a>
<a href=""mailto:in.f.ou.n.ited.st.a.t.e.s@gmail.com"">in.f.ou.n.ited.st.a.t.e.s@gmail.com</a>
<a href=""mailto:in.fo.u.n.it.edst.at.e.s@gmail.com"">in.fo.u.n.it.edst.at.e.s@gmail.com</a>
<a href=""mailto:i.nfou.n.it.edstat.e.s@gmail.com"">i.nfou.n.it.edstat.e.s@gmail.com</a>
<a href=""mailto:i.nf.ou.n.ite.ds.ta.t.e.s@gmail.com"">i.nf.ou.n.ite.ds.ta.t.e.s@gmail.com</a>
<a href=""mailto:i.nfoun.i.ted.s.t.ate.s@gmail.com"">i.nfoun.i.ted.s.t.ate.s@gmail.com</a>
<a href=""mailto:info.u.ni.t.e.ds.ta.te.s@gmail.com"">info.u.ni.t.e.ds.ta.te.s@gmail.com</a>
<a href=""mailto:info.u.nite.dstat.es@gmail.com"">info.u.nite.dstat.es@gmail.com</a>
<a href=""mailto:i.n.f.ouni.t.edstate.s@gmail.com"">i.n.f.ouni.t.edstate.s@gmail.com</a>
<a href=""mailto:infouniteds.tates@gmail.com"">infouniteds.tates@gmail.com</a>
<a href=""mailto:i.n.fo.u.nit.ed.s.tat.es@gmail.com"">i.n.fo.u.nit.ed.s.tat.es@gmail.com</a>
<a href=""mailto:inf.ou.n.ite.d.s.ta.tes@gmail.com"">inf.ou.n.ite.d.s.ta.tes@gmail.com</a>
<a href=""mailto:i.n.f.o.u.nit.e.d.st.a.te.s@gmail.com"">i.n.f.o.u.nit.e.d.st.a.te.s@gmail.com</a>
<a href=""mailto:i.nfo.u.n.ited.s.ta.te.s@gmail.com"">i.nfo.u.n.ited.s.ta.te.s@gmail.com</a>
<a href=""mailto:i.nf.oun.i.t.e.ds.t.at.es@gmail.com"">i.nf.oun.i.t.e.ds.t.at.es@gmail.com</a>
<a href=""mailto:inf.ou.ni.ted.s.ta.t.es@gmail.com"">inf.ou.ni.ted.s.ta.t.es@gmail.com</a>
<a href=""mailto:i.nf.oun.i.te.dsta.tes@gmail.com"">i.nf.oun.i.te.dsta.tes@gmail.com</a>
<a href=""mailto:in.f.o.un.i.t.e.dstat.es@gmail.com"">in.f.o.un.i.t.e.dstat.es@gmail.com</a>
<a href=""mailto:i.nf.o.uni.t.e.d.st.a.te.s@gmail.com"">i.nf.o.uni.t.e.d.st.a.te.s@gmail.com</a>
<a href=""mailto:i.n.fou.n.i.t.e.dst.a.t.e.s@gmail.com"">i.n.fou.n.i.t.e.dst.a.t.e.s@gmail.com</a>
<a href=""mailto:i.nf.ouni.te.d.stat.e.s@gmail.com"">i.nf.ouni.te.d.stat.e.s@gmail.com</a>
<a href=""mailto:in.f.ou.n.i.t.e.dst.ates@gmail.com"">in.f.ou.n.i.t.e.dst.ates@gmail.com</a>
<a href=""mailto:in.f.o.unite.d.s.tat.es@gmail.com"">in.f.o.unite.d.s.tat.es@gmail.com</a>
<a href=""mailto:i.n.fou.nit.e.d.sta.te.s@gmail.com"">i.n.fou.nit.e.d.sta.te.s@gmail.com</a>
<a href=""mailto:in.f.ou.n.i.te.dst.a.tes@gmail.com"">in.f.ou.n.i.te.dst.a.tes@gmail.com</a>
<a href=""mailto:in.f.o.unit.e.dstates@gmail.com"">in.f.o.unit.e.dstates@gmail.com</a>
<a href=""mailto:infounit.e.d.sta.te.s@gmail.com"">infounit.e.d.sta.te.s@gmail.com</a>
<a href=""mailto:i.n.fou.ni.te.d.s.tate.s@gmail.com"">i.n.fou.ni.te.d.s.tate.s@gmail.com</a>
<a href=""mailto:i.nfouni.te.ds.t.at.e.s@gmail.com"">i.nfouni.te.ds.t.at.e.s@gmail.com</a>
<a href=""mailto:infou.n.i.ted.st.at.e.s@gmail.com"">infou.n.i.ted.st.at.e.s@gmail.com</a>
<a href=""mailto:i.n.f.o.uni.te.dst.a.tes@gmail.com"">i.n.f.o.uni.te.dst.a.tes@gmail.com</a>
<a href=""mailto:inf.ou.n.i.te.d.s.ta.te.s@gmail.com"">inf.ou.n.i.te.d.s.ta.te.s@gmail.com</a>
<a href=""mailto:in.f.o.u.n.i.t.eds.t.a.t.e.s@gmail.com"">in.f.o.u.n.i.t.eds.t.a.t.e.s@gmail.com</a>
<a href=""mailto:inf.ou.niteds.tat.e.s@gmail.com"">inf.ou.niteds.tat.e.s@gmail.com</a>
<a href=""mailto:in.fo.un.i.te.ds.t.ate.s@gmail.com"">in.fo.un.i.te.ds.t.ate.s@gmail.com</a>
<a href=""mailto:i.nfo.u.n.it.e.d.st.at.es@gmail.com"">i.nfo.u.n.it.e.d.st.at.es@gmail.com</a>
<a href=""mailto:in.foun.it.ed.s.ta.t.e.s@gmail.com"">in.foun.it.ed.s.ta.t.e.s@gmail.com</a>
<a href=""mailto:infouni.te.d.s.t.ate.s@gmail.com"">infouni.te.d.s.t.ate.s@gmail.com</a>
<a href=""mailto:in.fo.un.i.t.e.d.st.a.t.e.s@gmail.com"">in.fo.un.i.t.e.d.st.a.t.e.s@gmail.com</a>
<a href=""mailto:inf.ou.nitedsta.tes@gmail.com"">inf.ou.nitedsta.tes@gmail.com</a>
<a href=""mailto:infouni.t.ed.st.a.t.es@gmail.com"">infouni.t.ed.st.a.t.es@gmail.com</a>
<a href=""mailto:inf.o.u.nited.st.a.tes@gmail.com"">inf.o.u.nited.st.a.tes@gmail.com</a>
<a href=""mailto:i.nfo.u.nit.e.d.s.t.a.t.e.s@gmail.com"">i.nfo.u.nit.e.d.s.t.a.t.e.s@gmail.com</a>
<a href=""mailto:in.fo.unite.d.sta.te.s@gmail.com"">in.fo.unite.d.sta.te.s@gmail.com</a>
<a href=""mailto:in.f.ouni.t.e.d.s.t.a.tes@gmail.com"">in.f.ouni.t.e.d.s.t.a.tes@gmail.com</a>
<a href=""mailto:i.n.f.ouni.t.e.ds.ta.tes@gmail.com"">i.n.f.ouni.t.e.ds.ta.tes@gmail.com</a>
<a href=""mailto:i.n.f.o.u.n.i.t.e.dstat.es@gmail.com"">i.n.f.o.u.n.i.t.e.dstat.es@gmail.com</a>
<a href=""mailto:i.nf.ouni.te.dst.a.tes@gmail.com"">i.nf.ouni.te.dst.a.tes@gmail.com</a>
<a href=""mailto:inf.o.u.n.ite.dsta.te.s@gmail.com"">inf.o.u.n.ite.dsta.te.s@gmail.com</a>
<a href=""mailto:i.nfou.n.i.te.ds.t.a.t.es@gmail.com"">i.nfou.n.i.te.ds.t.a.t.es@gmail.com</a>
<a href=""mailto:in.f.o.un.itedst.at.e.s@gmail.com"">in.f.o.un.itedst.at.e.s@gmail.com</a>
<a href=""mailto:info.un.i.teds.t.at.e.s@gmail.com"">info.un.i.teds.t.at.e.s@gmail.com</a>
<a href=""mailto:i.n.fou.n.itedsta.t.e.s@gmail.com"">i.n.fou.n.itedsta.t.e.s@gmail.com</a>
<a href=""mailto:i.nfou.ni.t.e.ds.ta.t.es@gmail.com"">i.nfou.ni.t.e.ds.ta.t.es@gmail.com</a>
<a href=""mailto:in.f.oun.i.te.dstat.es@gmail.com"">in.f.oun.i.te.dstat.es@gmail.com</a>
<a href=""mailto:i.n.fo.u.n.i.t.ed.s.t.a.te.s@gmail.com"">i.n.fo.u.n.i.t.ed.s.t.a.te.s@gmail.com</a>
<a href=""mailto:i.n.f.o.un.i.t.e.ds.t.at.es@gmail.com"">i.n.f.o.un.i.t.e.ds.t.at.es@gmail.com</a>
<a href=""mailto:inf.o.un.iteds.tate.s@gmail.com"">inf.o.un.iteds.tate.s@gmail.com</a>
<a href=""mailto:i.n.fou.nite.dst.a.tes@gmail.com"">i.n.fou.nite.dst.a.tes@gmail.com</a>
<a href=""mailto:i.nf.o.u.ni.teds.tat.es@gmail.com"">i.nf.o.u.ni.teds.tat.es@gmail.com</a>
<a href=""mailto:info.u.n.ited.sta.t.es@gmail.com"">info.u.n.ited.sta.t.es@gmail.com</a>
<a href=""mailto:in.foun.i.ted.s.ta.t.e.s@gmail.com"">in.foun.i.ted.s.ta.t.e.s@gmail.com</a>
<a href=""mailto:in.fou.n.i.t.e.d.st.a.t.es@gmail.com"">in.fou.n.i.t.e.d.st.a.t.es@gmail.com</a>
<a href=""mailto:inf.ou.nite.d.stat.es@gmail.com"">inf.ou.nite.d.stat.es@gmail.com</a>
<a href=""mailto:i.nfou.n.i.ted.st.a.t.e.s@gmail.com"">i.nfou.n.i.ted.st.a.t.e.s@gmail.com</a>
<a href=""mailto:in.fo.uni.t.e.ds.tates@gmail.com"">in.fo.uni.t.e.ds.tates@gmail.com</a>
<a href=""mailto:i.n.foun.i.t.edst.a.tes@gmail.com"">i.n.foun.i.t.edst.a.tes@gmail.com</a>
<a href=""mailto:infounite.d.sta.t.es@gmail.com"">infounite.d.sta.t.es@gmail.com</a>
<a href=""mailto:i.nfo.un.it.ed.s.t.a.te.s@gmail.com"">i.nfo.un.it.ed.s.t.a.te.s@gmail.com</a>
<a href=""mailto:in.fo.u.n.i.te.d.s.tat.es@gmail.com"">in.fo.u.n.i.te.d.s.tat.es@gmail.com</a>
<a href=""mailto:i.nf.o.un.it.ed.s.t.ates@gmail.com"">i.nf.o.un.it.ed.s.t.ates@gmail.com</a>
<a href=""mailto:i.n.f.o.un.it.e.d.sta.t.e.s@gmail.com"">i.n.f.o.un.it.e.d.sta.t.e.s@gmail.com</a>
<a href=""mailto:i.n.fo.u.nited.s.tat.e.s@gmail.com"">i.n.fo.u.nited.s.tat.e.s@gmail.com</a>
<a href=""mailto:infounited.state.s@gmail.com"">infounited.state.s@gmail.com</a>
<a href=""mailto:in.fo.un.i.t.ed.st.a.tes@gmail.com"">in.fo.un.i.t.ed.st.a.tes@gmail.com</a>
<a href=""mailto:inf.o.u.ni.ted.sta.t.e.s@gmail.com"">inf.o.u.ni.ted.sta.t.e.s@gmail.com</a>
<a href=""mailto:i.n.fou.n.ite.d.s.tate.s@gmail.com"">i.n.fou.n.ite.d.s.tate.s@gmail.com</a>
<a href=""mailto:i.nfo.un.i.te.dsta.tes@gmail.com"">i.nfo.un.i.te.dsta.tes@gmail.com</a>
<a href=""mailto:i.n.fou.nite.d.st.at.es@gmail.com"">i.n.fou.nite.d.st.at.es@gmail.com</a>
<a href=""mailto:inf.o.un.ite.d.s.t.at.es@gmail.com"">inf.o.un.ite.d.s.t.at.es@gmail.com</a>
<a href=""mailto:in.foun.it.ed.s.t.a.te.s@gmail.com"">in.foun.it.ed.s.t.a.te.s@gmail.com</a>
<a href=""mailto:i.n.f.o.unit.eds.t.a.t.es@gmail.com"">i.n.f.o.unit.eds.t.a.t.es@gmail.com</a>
<a href=""mailto:in.fou.ni.t.edsta.t.e.s@gmail.com"">in.fou.ni.t.edsta.t.e.s@gmail.com</a>
<a href=""mailto:in.f.o.uni.te.dst.a.t.es@gmail.com"">in.f.o.uni.te.dst.a.t.es@gmail.com</a>
<a href=""mailto:i.n.fou.n.it.edsta.te.s@gmail.com"">i.n.fou.n.it.edsta.te.s@gmail.com</a>
<a href=""mailto:info.unit.ed.stat.es@gmail.com"">info.unit.ed.stat.es@gmail.com</a>
<a href=""mailto:in.f.o.u.ni.t.edsta.tes@gmail.com"">in.f.o.u.ni.t.edsta.tes@gmail.com</a>
<a href=""mailto:i.n.fo.unite.ds.t.ates@gmail.com"">i.n.fo.unite.ds.t.ates@gmail.com</a>
<a href=""mailto:in.f.o.uni.t.e.dst.at.es@gmail.com"">in.f.o.uni.t.e.dst.at.es@gmail.com</a>
<a href=""mailto:i.nf.o.u.ni.teds.t.at.es@gmail.com"">i.nf.o.u.ni.teds.t.at.es@gmail.com</a>
<a href=""mailto:inf.ou.nit.ed.s.t.a.te.s@gmail.com"">inf.ou.nit.ed.s.t.a.te.s@gmail.com</a>
<a href=""mailto:in.founit.ed.st.a.t.e.s@gmail.com"">in.founit.ed.st.a.t.e.s@gmail.com</a>
<a href=""mailto:i.nf.ou.n.ited.st.ate.s@gmail.com"">i.nf.ou.n.ited.st.ate.s@gmail.com</a>
<a href=""mailto:i.nfou.ni.te.dstat.es@gmail.com"">i.nfou.ni.te.dstat.es@gmail.com</a>
<a href=""mailto:info.u.n.it.ed.stat.es@gmail.com"">info.u.n.it.ed.stat.es@gmail.com</a>
<a href=""mailto:i.nfo.u.ni.t.ed.s.t.at.es@gmail.com"">i.nfo.u.ni.t.ed.s.t.at.es@gmail.com</a>
<a href=""mailto:i.n.fo.unit.e.d.s.t.at.e.s@gmail.com"">i.n.fo.unit.e.d.s.t.at.e.s@gmail.com</a>
<a href=""mailto:i.n.fou.n.i.tedstates@gmail.com"">i.n.fou.n.i.tedstates@gmail.com</a>
<a href=""mailto:i.n.f.ouni.te.d.s.t.ates@gmail.com"">i.n.f.ouni.te.d.s.t.ates@gmail.com</a>
<a href=""mailto:i.nfou.nite.d.s.t.a.te.s@gmail.com"">i.nfou.nite.d.s.t.a.te.s@gmail.com</a>
<a href=""mailto:in.f.o.u.n.i.tedstate.s@gmail.com"">in.f.o.u.n.i.tedstate.s@gmail.com</a>
<a href=""mailto:i.n.f.o.u.ni.t.e.ds.t.a.tes@gmail.com"">i.n.f.o.u.ni.t.e.ds.t.a.tes@gmail.com</a>
<a href=""mailto:i.n.foun.i.t.e.ds.tates@gmail.com"">i.n.foun.i.t.e.ds.tates@gmail.com</a>
<a href=""mailto:i.n.f.o.u.nited.s.ta.t.e.s@gmail.com"">i.n.f.o.u.nited.s.ta.t.e.s@gmail.com</a>
<a href=""mailto:inf.o.unit.e.d.sta.t.es@gmail.com"">inf.o.unit.e.d.sta.t.es@gmail.com</a>
<a href=""mailto:i.nf.o.uni.t.e.dsta.te.s@gmail.com"">i.nf.o.uni.t.e.dsta.te.s@gmail.com</a>
<a href=""mailto:i.nf.oun.it.e.dstates@gmail.com"">i.nf.oun.it.e.dstates@gmail.com</a>
<a href=""mailto:i.nf.o.un.i.te.dst.ates@gmail.com"">i.nf.o.un.i.te.dst.ates@gmail.com</a>
<a href=""mailto:in.fou.n.ited.st.at.es@gmail.com"">in.fou.n.ited.st.at.es@gmail.com</a>
<a href=""mailto:in.fou.ni.t.e.ds.ta.tes@gmail.com"">in.fou.ni.t.e.ds.ta.tes@gmail.com</a>
<a href=""mailto:in.f.o.un.ite.d.st.ates@gmail.com"">in.f.o.un.ite.d.st.ates@gmail.com</a>
<a href=""mailto:in.founit.eds.t.a.t.es@gmail.com"">in.founit.eds.t.a.t.es@gmail.com</a>
<a href=""mailto:i.n.fo.uni.te.d.s.t.at.es@gmail.com"">i.n.fo.uni.te.d.s.t.at.es@gmail.com</a>
<a href=""mailto:i.nf.oun.i.tedsta.t.es@gmail.com"">i.nf.oun.i.tedsta.t.es@gmail.com</a>
<a href=""mailto:i.n.f.o.u.n.it.e.d.st.a.t.es@gmail.com"">i.n.f.o.u.n.it.e.d.st.a.t.es@gmail.com</a>
<a href=""mailto:i.nfo.un.i.te.ds.t.at.e.s@gmail.com"">i.nfo.un.i.te.ds.t.at.e.s@gmail.com</a>
<a href=""mailto:i.nfo.un.it.e.dst.at.e.s@gmail.com"">i.nfo.un.it.e.dst.at.e.s@gmail.com</a>
<a href=""mailto:i.n.fo.u.n.i.tedst.at.e.s@gmail.com"">i.n.fo.u.n.i.tedst.at.e.s@gmail.com</a>
<a href=""mailto:in.fo.u.ni.t.eds.t.a.t.es@gmail.com"">in.fo.u.ni.t.eds.t.a.t.es@gmail.com</a>
<a href=""mailto:infou.n.i.tedstat.e.s@gmail.com"">infou.n.i.tedstat.e.s@gmail.com</a>
<a href=""mailto:i.n.f.ounite.dsta.t.e.s@gmail.com"">i.n.f.ounite.dsta.t.e.s@gmail.com</a>
<a href=""mailto:inf.ou.nited.s.ta.tes@gmail.com"">inf.ou.nited.s.ta.tes@gmail.com</a>
<a href=""mailto:info.u.nit.ed.sta.te.s@gmail.com"">info.u.nit.ed.sta.te.s@gmail.com</a>
<a href=""mailto:i.n.f.oun.ited.st.a.t.es@gmail.com"">i.n.f.oun.ited.st.a.t.es@gmail.com</a>
<a href=""mailto:info.u.nite.dst.a.tes@gmail.com"">info.u.nite.dst.a.tes@gmail.com</a>
<a href=""mailto:inf.ou.nited.s.t.a.tes@gmail.com"">inf.ou.nited.s.t.a.tes@gmail.com</a>
<a href=""mailto:info.u.n.i.t.e.d.st.ates@gmail.com"">info.u.n.i.t.e.d.st.ates@gmail.com</a>
<a href=""mailto:i.nfo.u.n.it.edst.a.t.e.s@gmail.com"">i.nfo.u.n.it.edst.a.t.e.s@gmail.com</a>
<a href=""mailto:in.founi.te.d.st.ates@gmail.com"">in.founi.te.d.st.ates@gmail.com</a>
<a href=""mailto:i.n.founi.ted.s.t.a.tes@gmail.com"">i.n.founi.ted.s.t.a.tes@gmail.com</a>
<a href=""mailto:in.foun.i.t.e.ds.t.a.t.es@gmail.com"">in.foun.i.t.e.ds.t.a.t.es@gmail.com</a>
<a href=""mailto:i.n.f.oun.i.t.e.d.sta.tes@gmail.com"">i.n.f.oun.i.t.e.d.sta.tes@gmail.com</a>
<a href=""mailto:i.nfounit.ed.st.a.t.es@gmail.com"">i.nfounit.ed.st.a.t.es@gmail.com</a>
<a href=""mailto:i.nf.oun.i.t.e.dst.a.te.s@gmail.com"">i.nf.oun.i.t.e.dst.a.te.s@gmail.com</a>
<a href=""mailto:in.f.ou.n.i.teds.t.at.e.s@gmail.com"">in.f.ou.n.i.teds.t.at.e.s@gmail.com</a>
<a href=""mailto:infou.ni.tedst.a.tes@gmail.com"">infou.ni.tedst.a.tes@gmail.com</a>
<a href=""mailto:info.u.n.i.teds.t.ates@gmail.com"">info.u.n.i.teds.t.ates@gmail.com</a>
<a href=""mailto:i.nf.o.u.nit.edst.at.e.s@gmail.com"">i.nf.o.u.nit.edst.at.e.s@gmail.com</a>
<a href=""mailto:inf.ou.nited.s.ta.t.e.s@gmail.com"">inf.ou.nited.s.ta.t.e.s@gmail.com</a>"
L4fGYubB,Text formatter for MediaWiki XML dump,FaceDeer,Python,Wednesday 14th of February 2024 07:25:41 PM CDT,"import xml.etree.ElementTree as ET
import os
import re
import pypandoc

redirect = re.compile(""#redirect"", re.I)
disambig = re.compile(""{{Disambig}}"", re.I)

def extract_pages(xml_file):
    # Parse the XML file
    tree = ET.parse(xml_file)
    root = tree.getroot()

    total_count = 1

    # Iterate over each <page> tag in the <mediawiki> tag
    for page in root.findall('.//page'):
        # Extract the text inside the <title> tag
        title = page.find('title').text

        if "":"" in title:
            continue

        # Find the <revision> tag and then find the <text> tag within it
        revision = page.find('revision')
        if revision is not None:
            text = revision.find('text').text

            if len(text) < 100:
                #print(text)
                continue

            if redirect.match(text):
                continue
            if disambig.match(text):
                #print(text)
                continue

            # Replace any characters in the title that are invalid in file names
            valid_title = """".join(c for c in title if c.isalnum() or c in (' ',)).rstrip()

            # Check if a file with the same name already exists
            counter = 1
            original_title = valid_title
            while os.path.isfile(f'Masseffect/{valid_title}.txt'):
                valid_title = f""{original_title}_{counter}""
                counter += 1

            print(str(total_count) + "": "" + valid_title)
            total_count = total_count + 1

            #if total_count > 10:
                #return

            # Assuming 'wiki_text' contains your Mediawiki markdown
            try:
                plain_text = pypandoc.convert_text(text, 'plain', format='mediawiki', extra_args=['--wrap=preserve'])
                plain_text = re.sub('(\r?\n){2,}', '\n', plain_text)
            except:
                print(""pandoc threw an exception processing "" + valid_title)
                plain_text = text
                valid_title = valid_title + ""_md""
            
            # Write the text to a .txt file named after the title
            with open(f'Masseffect/{valid_title}.txt', 'w', encoding='utf-8') as f:
                f.write(plain_text)

# Call the function with the path to your XML file
# Note: to simplify the code I edited the <manifest> tag in this document to remove the namespace from the tag, you'll need to do that to make this work.
extract_pages('masseffect_pages_current.xml')
"
hhTiFB0t,Hidden,Ctxz,CSS,Wednesday 14th of February 2024 06:59:12 PM CDT,".video-easter-egg-blocker,
.video-easter-egg-overlay{
	width: 0% important;
	height: 0% !important;
	position: unset !important;
	display: none !important;
}"
N8GHP7Ey,Raspagem Globo (Janela),MizunoBrasil,Python,Wednesday 14th of February 2024 06:53:24 PM CDT,"import tkinter as tk
import webbrowser
import requests
from bs4 import BeautifulSoup
import re
from datetime import datetime

def extrair_informacao(url):
    # Faz uma solicitação HTTP para a URL fornecida
    response = requests.get(url)
    
    # Verifica se a solicitação foi bem-sucedida
    if response.status_code == 200:
        # Cria um objeto BeautifulSoup para fazer o parsing do conteúdo HTML
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # Extrai o título da página
        title = soup.title.string
        
        # Extrai a primeira frase de texto da página
        first_paragraph = soup.find('p').text.strip()
        
        # Extrai o texto da seção content-head__subtitle
        subtitle = soup.find(class_='content-head__subtitle').text.strip()
        
        # Retorna as informações extraídas
        return title, first_paragraph, subtitle
    else:
        print(""Falha ao fazer a solicitação HTTP."")
        return None, None, None

def abrir_url():
    url = url_entry.get()
    webbrowser.open_new(url)

def extrair_e_mostrar_informacoes():
    url = url_entry.get()
    title, first_paragraph, subtitle = extrair_informacao(url)
    
    if title and first_paragraph and subtitle:
        info_text.config(text=f""Título da página: {title}\n\n""
                               f""Primeira frase de texto: {first_paragraph}\n\n""
                               f""Texto da seção content-head__subtitle: {subtitle}"")
    else:
        info_text.config(text=""Não foi possível extrair informações da página."")

# Criar a janela
root = tk.Tk()
root.title(""Extrair Informações da Página"")
root.geometry(""600x400"")

# Criar um rótulo para o campo de URL
url_label = tk.Label(root, text=""URL:"")
url_label.pack(pady=10)

# Criar um campo de entrada para a URL
url_entry = tk.Entry(root, width=50)
url_entry.pack()

# Criar um botão para abrir a URL no navegador
open_button = tk.Button(root, text=""Abrir URL"", command=abrir_url)
open_button.pack(pady=5)

# Criar um botão para extrair e mostrar informações
extract_button = tk.Button(root, text=""Extrair e Mostrar Informações"", command=extrair_e_mostrar_informacoes)
extract_button.pack(pady=5)

# Criar um rótulo para mostrar as informações extraídas
info_text = tk.Label(root, text="""", wraplength=580, justify=""left"")
info_text.pack(pady=10)

# Executar a janela
root.mainloop()
"
38bPbGCS,2024-02-14_stats.json,rdp_snitch,JSON,Wednesday 14th of February 2024 06:17:58 PM CDT,"{
  ""ip"": {
    ""98.159.37.156"": 3,
    ""167.248.133.37"": 3,
    ""139.59.185.252"": 3,
    ""94.247.172.115"": 6,
    ""118.123.105.93"": 6,
    ""36.133.127.240"": 9,
    ""62.204.41.107"": 18,
    ""198.235.24.211"": 9,
    ""87.251.75.145"": 6,
    ""87.251.75.64"": 3,
    ""14.194.5.2"": 9,
    ""180.93.172.224"": 3,
    ""45.135.201.151"": 6,
    ""46.19.143.42"": 3,
    ""185.170.144.3"": 6,
    ""212.70.149.142"": 18,
    ""45.79.93.238"": 3,
    ""196.190.117.7"": 6,
    ""87.251.75.120"": 6,
    ""2.57.122.86"": 9,
    ""205.210.31.89"": 9,
    ""185.196.220.41"": 9,
    ""161.97.141.176"": 3,
    ""193.142.146.227"": 9,
    ""8.213.194.120"": 3,
    ""111.230.81.178"": 12,
    ""109.107.161.22"": 3,
    ""45.131.195.177"": 3,
    ""66.131.250.237"": 3,
    ""167.94.138.35"": 3,
    ""101.36.114.209"": 3,
    ""36.139.61.15"": 3,
    ""46.19.139.234"": 3,
    ""94.232.41.30"": 6,
    ""205.210.31.51"": 9,
    ""71.6.134.230"": 30,
    ""43.158.217.205"": 3,
    ""192.3.159.135"": 6,
    ""190.85.232.116"": 3,
    ""123.56.20.194"": 3,
    ""185.180.140.5"": 3,
    ""167.94.146.59"": 3,
    ""61.91.43.232"": 3,
    ""120.240.145.8"": 3,
    ""41.65.239.202"": 3,
    ""198.235.24.111"": 9
  },
  ""asn"": {
    ""AS62240"": 6,
    ""AS398324"": 6,
    ""AS14061"": 3,
    ""AS42708"": 6,
    ""AS38283"": 6,
    ""AS9808"": 9,
    ""AS59425"": 18,
    ""AS396982"": 36,
    ""AS208091"": 21,
    ""AS45820"": 9,
    ""AS135944"": 3,
    ""AS44486"": 6,
    ""AS51852"": 6,
    ""AS197414"": 6,
    ""AS204428"": 18,
    ""AS63949"": 3,
    ""AS24757"": 6,
    ""AS47890"": 9,
    ""AS208046"": 18,
    ""AS51167"": 3,
    ""AS45102"": 3,
    ""AS45090"": 12,
    ""AS216334"": 3,
    ""AS5769"": 3,
    ""AS135377"": 3,
    ""AS56041"": 3,
    ""AS10439"": 30,
    ""AS132203"": 3,
    ""AS36352"": 6,
    ""AS14080"": 3,
    ""AS37963"": 3,
    ""AS211680"": 3,
    ""AS398705"": 3,
    ""AS7470"": 3,
    ""AS56040"": 3,
    ""AS36992"": 3
  },
  ""isp"": {
    ""LogicWeb Inc."": 3,
    ""Censys, Inc."": 9,
    ""DIGITALOCEAN"": 3,
    ""GleSYS Internet Services AB"": 6,
    ""CHINANET SiChuan Telecom Internet Data Center"": 6,
    ""China Mobile"": 9,
    ""Horizon LLC"": 18,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 27,
    ""Tata Tele Services GSM"": 9,
    ""SPT"": 3,
    ""LIVINGBOTS"": 6,
    ""Private Layer INC"": 6,
    ""SS-Net"": 18,
    ""Akamai Technologies, Inc."": 3,
    ""Ethiotelecom"": 6,
    ""Unmanaged LTD"": 9,
    ""ColocationX Ltd."": 18,
    ""Contabo GmbH"": 3,
    ""Alibaba (US) Technology Co., Ltd."": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 15,
    ""New Hosting Technologies LLC"": 3,
    ""VPN"": 3,
    ""Le Groupe Videotron Ltee"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""CariNet, Inc."": 30,
    ""HostPapa"": 6,
    ""Telmex Colombia S.A."": 3,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""NSEC - Sistemas Informaticos, S.A."": 3,
    ""True Internet Corporation CO. Ltd."": 3,
    ""China Mobile communications corporation"": 3,
    ""Etisalat Misr"": 3
  },
  ""org"": {
    ""Dedicated Servers"": 3,
    ""Censys, Inc."": 6,
    ""DigitalOcean, LLC"": 3,
    ""Unknown"": 18,
    ""Chinanet SC"": 6,
    ""China Mobile Communications Corporation"": 12,
    ""Horizon LLC"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 15,
    ""Tata Teleservices Limited -GSM Division"": 9,
    ""Saigon Postel Corporation"": 3,
    ""Client1096"": 3,
    ""Xhostis"": 6,
    ""4Media Ltd"": 18,
    ""Linode"": 3,
    ""Pptechnology Limited"": 9,
    ""Makut Investments"": 9,
    ""Contabo GmbH"": 3,
    ""ColocationX Ltd"": 9,
    ""Alibaba.com Singapore E-Commerce Private Limited"": 3,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 12,
    ""New Hosting Technologies LLC"": 3,
    ""VPN-Consumer-US"": 3,
    ""Videotron Ltee"": 3,
    ""Censys, Inc"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Fast Serv Inc."": 3,
    ""Dmitriy Panchenko"": 6,
    ""CariNet, Inc."": 30,
    ""Tencent Cloud Computing"": 3,
    ""RackNerd LLC"": 6,
    ""Telmex Colombia S.A"": 3,
    ""Aliyun Computing Co., LTD"": 3,
    ""ICG"": 3,
    ""True Internet Corporation CO. LTD"": 3,
    ""China Mobile"": 3,
    ""Nile Online"": 3
  },
  ""regionName"": {
    ""California"": 42,
    ""Michigan"": 6,
    ""England"": 12,
    ""Halland County"": 6,
    ""Sichuan"": 6,
    ""Shandong"": 9,
    ""Moscow"": 21,
    ""North Holland"": 30,
    ""Uttar Pradesh"": 9,
    ""Hanoi"": 3,
    ""Bremen"": 6,
    ""Zurich"": 3,
    ""Plovdiv"": 18,
    ""Addis Ababa"": 6,
    ""Virginia"": 9,
    ""North Rhine-Westphalia"": 3,
    ""Bangkok"": 6,
    ""Guangdong"": 15,
    ""New Jersey"": 3,
    ""Quebec"": 3,
    ""Seoul"": 3,
    ""Zhejiang"": 3,
    ""Bern"": 3,
    ""Perm Krai"": 6,
    ""Nevada"": 30,
    ""Maharashtra"": 3,
    ""Texas"": 9,
    ""Bogota D.C."": 3,
    ""Beijing"": 3,
    ""Hesse"": 3,
    ""Cairo Governorate"": 3
  },
  ""country"": {
    ""United States"": 99,
    ""United Kingdom"": 12,
    ""Sweden"": 6,
    ""China"": 36,
    ""Russia"": 27,
    ""The Netherlands"": 30,
    ""India"": 12,
    ""Vietnam"": 3,
    ""Germany"": 12,
    ""Switzerland"": 6,
    ""Bulgaria"": 18,
    ""Ethiopia"": 6,
    ""Thailand"": 6,
    ""Canada"": 3,
    ""South Korea"": 3,
    ""Colombia"": 3,
    ""Egypt"": 3
  },
  ""account"": {
    ""(empty)"": 27,
    ""hello"": 84,
    ""nmap"": 9,
    ""Test"": 24,
    ""hSNXSIvlp"": 3,
    ""GyaPXi"": 3,
    ""rFvrBL"": 3,
    ""Administr"": 42,
    ""xzRvvbADS"": 3,
    ""RMULdp"": 3,
    ""AHhMYF"": 3,
    ""Domain"": 24,
    ""Administrator"": 3,
    ""gRMxlXrYK"": 3,
    ""yVkUiC"": 3,
    ""cnXWiC"": 3,
    ""eltons"": 15,
    ""administr"": 15,
    ""pamn"": 3,
    ""2f48amar"": 3,
    ""YAsEhfEpY"": 3,
    ""njiWAr"": 3,
    ""EOZqmI"": 3
  },
  ""keyboard"": {
    ""Unknown"": 285
  },
  ""client_build"": {
    ""Unknown"": 285
  },
  ""client_name"": {
    ""Unknown"": 285
  },
  ""ip_type"": {
    ""hosting & proxy"": 15,
    ""Unknown"": 144,
    ""hosting"": 90,
    ""proxy"": 9,
    ""mobile"": 27
  }
}"
gnrhRWvv,2024-02-14_stats.json,rdp_snitch,JSON,Wednesday 14th of February 2024 06:16:09 PM CDT,"{
  ""ip"": {
    ""98.159.37.156"": 2,
    ""167.248.133.37"": 2,
    ""139.59.185.252"": 2,
    ""94.247.172.115"": 4,
    ""118.123.105.93"": 4,
    ""36.133.127.240"": 6,
    ""62.204.41.107"": 12,
    ""198.235.24.211"": 6,
    ""87.251.75.145"": 4,
    ""87.251.75.64"": 2,
    ""14.194.5.2"": 6,
    ""180.93.172.224"": 2,
    ""45.135.201.151"": 4,
    ""46.19.143.42"": 2,
    ""185.170.144.3"": 4,
    ""212.70.149.142"": 12,
    ""45.79.93.238"": 2,
    ""196.190.117.7"": 4,
    ""87.251.75.120"": 4,
    ""2.57.122.86"": 6,
    ""205.210.31.89"": 6,
    ""185.196.220.41"": 6,
    ""161.97.141.176"": 2,
    ""193.142.146.227"": 6,
    ""8.213.194.120"": 2,
    ""111.230.81.178"": 8,
    ""109.107.161.22"": 2,
    ""45.131.195.177"": 2,
    ""66.131.250.237"": 2,
    ""167.94.138.35"": 2,
    ""101.36.114.209"": 2,
    ""36.139.61.15"": 2,
    ""46.19.139.234"": 2,
    ""94.232.41.30"": 4,
    ""205.210.31.51"": 6,
    ""71.6.134.230"": 20,
    ""43.158.217.205"": 2,
    ""192.3.159.135"": 4,
    ""190.85.232.116"": 2,
    ""123.56.20.194"": 2,
    ""185.180.140.5"": 2,
    ""167.94.146.59"": 2,
    ""61.91.43.232"": 2,
    ""120.240.145.8"": 2,
    ""41.65.239.202"": 2,
    ""198.235.24.111"": 6
  },
  ""asn"": {
    ""AS62240"": 4,
    ""AS398324"": 4,
    ""AS14061"": 2,
    ""AS42708"": 4,
    ""AS38283"": 4,
    ""AS9808"": 6,
    ""AS59425"": 12,
    ""AS396982"": 24,
    ""AS208091"": 14,
    ""AS45820"": 6,
    ""AS135944"": 2,
    ""AS44486"": 4,
    ""AS51852"": 4,
    ""AS197414"": 4,
    ""AS204428"": 12,
    ""AS63949"": 2,
    ""AS24757"": 4,
    ""AS47890"": 6,
    ""AS208046"": 12,
    ""AS51167"": 2,
    ""AS45102"": 2,
    ""AS45090"": 8,
    ""AS216334"": 2,
    ""AS5769"": 2,
    ""AS135377"": 2,
    ""AS56041"": 2,
    ""AS10439"": 20,
    ""AS132203"": 2,
    ""AS36352"": 4,
    ""AS14080"": 2,
    ""AS37963"": 2,
    ""AS211680"": 2,
    ""AS398705"": 2,
    ""AS7470"": 2,
    ""AS56040"": 2,
    ""AS36992"": 2
  },
  ""isp"": {
    ""LogicWeb Inc."": 2,
    ""Censys, Inc."": 6,
    ""DIGITALOCEAN"": 2,
    ""GleSYS Internet Services AB"": 4,
    ""CHINANET SiChuan Telecom Internet Data Center"": 4,
    ""China Mobile"": 6,
    ""Horizon LLC"": 12,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 18,
    ""Tata Tele Services GSM"": 6,
    ""SPT"": 2,
    ""LIVINGBOTS"": 4,
    ""Private Layer INC"": 4,
    ""SS-Net"": 12,
    ""Akamai Technologies, Inc."": 2,
    ""Ethiotelecom"": 4,
    ""Unmanaged LTD"": 6,
    ""ColocationX Ltd."": 12,
    ""Contabo GmbH"": 2,
    ""Alibaba (US) Technology Co., Ltd."": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 10,
    ""New Hosting Technologies LLC"": 2,
    ""VPN"": 2,
    ""Le Groupe Videotron Ltee"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""CariNet, Inc."": 20,
    ""HostPapa"": 4,
    ""Telmex Colombia S.A."": 2,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""NSEC - Sistemas Informaticos, S.A."": 2,
    ""True Internet Corporation CO. Ltd."": 2,
    ""China Mobile communications corporation"": 2,
    ""Etisalat Misr"": 2
  },
  ""org"": {
    ""Dedicated Servers"": 2,
    ""Censys, Inc."": 4,
    ""DigitalOcean, LLC"": 2,
    ""Unknown"": 12,
    ""Chinanet SC"": 4,
    ""China Mobile Communications Corporation"": 8,
    ""Horizon LLC"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 10,
    ""Tata Teleservices Limited -GSM Division"": 6,
    ""Saigon Postel Corporation"": 2,
    ""Client1096"": 2,
    ""Xhostis"": 4,
    ""4Media Ltd"": 12,
    ""Linode"": 2,
    ""Pptechnology Limited"": 6,
    ""Makut Investments"": 6,
    ""Contabo GmbH"": 2,
    ""ColocationX Ltd"": 6,
    ""Alibaba.com Singapore E-Commerce Private Limited"": 2,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 8,
    ""New Hosting Technologies LLC"": 2,
    ""VPN-Consumer-US"": 2,
    ""Videotron Ltee"": 2,
    ""Censys, Inc"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Fast Serv Inc."": 2,
    ""Dmitriy Panchenko"": 4,
    ""CariNet, Inc."": 20,
    ""Tencent Cloud Computing"": 2,
    ""RackNerd LLC"": 4,
    ""Telmex Colombia S.A"": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""ICG"": 2,
    ""True Internet Corporation CO. LTD"": 2,
    ""China Mobile"": 2,
    ""Nile Online"": 2
  },
  ""regionName"": {
    ""California"": 28,
    ""Michigan"": 4,
    ""England"": 8,
    ""Halland County"": 4,
    ""Sichuan"": 4,
    ""Shandong"": 6,
    ""Moscow"": 14,
    ""North Holland"": 20,
    ""Uttar Pradesh"": 6,
    ""Hanoi"": 2,
    ""Bremen"": 4,
    ""Zurich"": 2,
    ""Plovdiv"": 12,
    ""Addis Ababa"": 4,
    ""Virginia"": 6,
    ""North Rhine-Westphalia"": 2,
    ""Bangkok"": 4,
    ""Guangdong"": 10,
    ""New Jersey"": 2,
    ""Quebec"": 2,
    ""Seoul"": 2,
    ""Zhejiang"": 2,
    ""Bern"": 2,
    ""Perm Krai"": 4,
    ""Nevada"": 20,
    ""Maharashtra"": 2,
    ""Texas"": 6,
    ""Bogota D.C."": 2,
    ""Beijing"": 2,
    ""Hesse"": 2,
    ""Cairo Governorate"": 2
  },
  ""country"": {
    ""United States"": 66,
    ""United Kingdom"": 8,
    ""Sweden"": 4,
    ""China"": 24,
    ""Russia"": 18,
    ""The Netherlands"": 20,
    ""India"": 8,
    ""Vietnam"": 2,
    ""Germany"": 8,
    ""Switzerland"": 4,
    ""Bulgaria"": 12,
    ""Ethiopia"": 4,
    ""Thailand"": 4,
    ""Canada"": 2,
    ""South Korea"": 2,
    ""Colombia"": 2,
    ""Egypt"": 2
  },
  ""account"": {
    ""(empty)"": 18,
    ""hello"": 56,
    ""nmap"": 6,
    ""Test"": 16,
    ""hSNXSIvlp"": 2,
    ""GyaPXi"": 2,
    ""rFvrBL"": 2,
    ""Administr"": 28,
    ""xzRvvbADS"": 2,
    ""RMULdp"": 2,
    ""AHhMYF"": 2,
    ""Domain"": 16,
    ""Administrator"": 2,
    ""gRMxlXrYK"": 2,
    ""yVkUiC"": 2,
    ""cnXWiC"": 2,
    ""eltons"": 10,
    ""administr"": 10,
    ""pamn"": 2,
    ""2f48amar"": 2,
    ""YAsEhfEpY"": 2,
    ""njiWAr"": 2,
    ""EOZqmI"": 2
  },
  ""keyboard"": {
    ""Unknown"": 190
  },
  ""client_build"": {
    ""Unknown"": 190
  },
  ""client_name"": {
    ""Unknown"": 190
  },
  ""ip_type"": {
    ""hosting & proxy"": 10,
    ""Unknown"": 96,
    ""hosting"": 60,
    ""proxy"": 6,
    ""mobile"": 18
  }
}"
NTEq9WqM,2024-02-14_stats.json,rdp_snitch,JSON,Wednesday 14th of February 2024 06:15:08 PM CDT,"{
  ""ip"": {
    ""98.159.37.156"": 1,
    ""167.248.133.37"": 1,
    ""139.59.185.252"": 1,
    ""94.247.172.115"": 2,
    ""118.123.105.93"": 2,
    ""36.133.127.240"": 3,
    ""62.204.41.107"": 6,
    ""198.235.24.211"": 3,
    ""87.251.75.145"": 2,
    ""87.251.75.64"": 1,
    ""14.194.5.2"": 3,
    ""180.93.172.224"": 1,
    ""45.135.201.151"": 2,
    ""46.19.143.42"": 1,
    ""185.170.144.3"": 2,
    ""212.70.149.142"": 6,
    ""45.79.93.238"": 1,
    ""196.190.117.7"": 2,
    ""87.251.75.120"": 2,
    ""2.57.122.86"": 3,
    ""205.210.31.89"": 3,
    ""185.196.220.41"": 3,
    ""161.97.141.176"": 1,
    ""193.142.146.227"": 3,
    ""8.213.194.120"": 1,
    ""111.230.81.178"": 4,
    ""109.107.161.22"": 1,
    ""45.131.195.177"": 1,
    ""66.131.250.237"": 1,
    ""167.94.138.35"": 1,
    ""101.36.114.209"": 1,
    ""36.139.61.15"": 1,
    ""46.19.139.234"": 1,
    ""94.232.41.30"": 2,
    ""205.210.31.51"": 3,
    ""71.6.134.230"": 10,
    ""43.158.217.205"": 1,
    ""192.3.159.135"": 2,
    ""190.85.232.116"": 1,
    ""123.56.20.194"": 1,
    ""185.180.140.5"": 1,
    ""167.94.146.59"": 1,
    ""61.91.43.232"": 1,
    ""120.240.145.8"": 1,
    ""41.65.239.202"": 1,
    ""198.235.24.111"": 3
  },
  ""asn"": {
    ""AS62240"": 2,
    ""AS398324"": 2,
    ""AS14061"": 1,
    ""AS42708"": 2,
    ""AS38283"": 2,
    ""AS9808"": 3,
    ""AS59425"": 6,
    ""AS396982"": 12,
    ""AS208091"": 7,
    ""AS45820"": 3,
    ""AS135944"": 1,
    ""AS44486"": 2,
    ""AS51852"": 2,
    ""AS197414"": 2,
    ""AS204428"": 6,
    ""AS63949"": 1,
    ""AS24757"": 2,
    ""AS47890"": 3,
    ""AS208046"": 6,
    ""AS51167"": 1,
    ""AS45102"": 1,
    ""AS45090"": 4,
    ""AS216334"": 1,
    ""AS5769"": 1,
    ""AS135377"": 1,
    ""AS56041"": 1,
    ""AS10439"": 10,
    ""AS132203"": 1,
    ""AS36352"": 2,
    ""AS14080"": 1,
    ""AS37963"": 1,
    ""AS211680"": 1,
    ""AS398705"": 1,
    ""AS7470"": 1,
    ""AS56040"": 1,
    ""AS36992"": 1
  },
  ""isp"": {
    ""LogicWeb Inc."": 1,
    ""Censys, Inc."": 3,
    ""DIGITALOCEAN"": 1,
    ""GleSYS Internet Services AB"": 2,
    ""CHINANET SiChuan Telecom Internet Data Center"": 2,
    ""China Mobile"": 3,
    ""Horizon LLC"": 6,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 9,
    ""Tata Tele Services GSM"": 3,
    ""SPT"": 1,
    ""LIVINGBOTS"": 2,
    ""Private Layer INC"": 2,
    ""SS-Net"": 6,
    ""Akamai Technologies, Inc."": 1,
    ""Ethiotelecom"": 2,
    ""Unmanaged LTD"": 3,
    ""ColocationX Ltd."": 6,
    ""Contabo GmbH"": 1,
    ""Alibaba (US) Technology Co., Ltd."": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 5,
    ""New Hosting Technologies LLC"": 1,
    ""VPN"": 1,
    ""Le Groupe Videotron Ltee"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""CariNet, Inc."": 10,
    ""HostPapa"": 2,
    ""Telmex Colombia S.A."": 1,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""NSEC - Sistemas Informaticos, S.A."": 1,
    ""True Internet Corporation CO. Ltd."": 1,
    ""China Mobile communications corporation"": 1,
    ""Etisalat Misr"": 1
  },
  ""org"": {
    ""Dedicated Servers"": 1,
    ""Censys, Inc."": 2,
    ""DigitalOcean, LLC"": 1,
    ""Unknown"": 6,
    ""Chinanet SC"": 2,
    ""China Mobile Communications Corporation"": 4,
    ""Horizon LLC"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 5,
    ""Tata Teleservices Limited -GSM Division"": 3,
    ""Saigon Postel Corporation"": 1,
    ""Client1096"": 1,
    ""Xhostis"": 2,
    ""4Media Ltd"": 6,
    ""Linode"": 1,
    ""Pptechnology Limited"": 3,
    ""Makut Investments"": 3,
    ""Contabo GmbH"": 1,
    ""ColocationX Ltd"": 3,
    ""Alibaba.com Singapore E-Commerce Private Limited"": 1,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 4,
    ""New Hosting Technologies LLC"": 1,
    ""VPN-Consumer-US"": 1,
    ""Videotron Ltee"": 1,
    ""Censys, Inc"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Fast Serv Inc."": 1,
    ""Dmitriy Panchenko"": 2,
    ""CariNet, Inc."": 10,
    ""Tencent Cloud Computing"": 1,
    ""RackNerd LLC"": 2,
    ""Telmex Colombia S.A"": 1,
    ""Aliyun Computing Co., LTD"": 1,
    ""ICG"": 1,
    ""True Internet Corporation CO. LTD"": 1,
    ""China Mobile"": 1,
    ""Nile Online"": 1
  },
  ""regionName"": {
    ""California"": 14,
    ""Michigan"": 2,
    ""England"": 4,
    ""Halland County"": 2,
    ""Sichuan"": 2,
    ""Shandong"": 3,
    ""Moscow"": 7,
    ""North Holland"": 10,
    ""Uttar Pradesh"": 3,
    ""Hanoi"": 1,
    ""Bremen"": 2,
    ""Zurich"": 1,
    ""Plovdiv"": 6,
    ""Addis Ababa"": 2,
    ""Virginia"": 3,
    ""North Rhine-Westphalia"": 1,
    ""Bangkok"": 2,
    ""Guangdong"": 5,
    ""New Jersey"": 1,
    ""Quebec"": 1,
    ""Seoul"": 1,
    ""Zhejiang"": 1,
    ""Bern"": 1,
    ""Perm Krai"": 2,
    ""Nevada"": 10,
    ""Maharashtra"": 1,
    ""Texas"": 3,
    ""Bogota D.C."": 1,
    ""Beijing"": 1,
    ""Hesse"": 1,
    ""Cairo Governorate"": 1
  },
  ""country"": {
    ""United States"": 33,
    ""United Kingdom"": 4,
    ""Sweden"": 2,
    ""China"": 12,
    ""Russia"": 9,
    ""The Netherlands"": 10,
    ""India"": 4,
    ""Vietnam"": 1,
    ""Germany"": 4,
    ""Switzerland"": 2,
    ""Bulgaria"": 6,
    ""Ethiopia"": 2,
    ""Thailand"": 2,
    ""Canada"": 1,
    ""South Korea"": 1,
    ""Colombia"": 1,
    ""Egypt"": 1
  },
  ""account"": {
    ""(empty)"": 9,
    ""hello"": 28,
    ""nmap"": 3,
    ""Test"": 8,
    ""hSNXSIvlp"": 1,
    ""GyaPXi"": 1,
    ""rFvrBL"": 1,
    ""Administr"": 14,
    ""xzRvvbADS"": 1,
    ""RMULdp"": 1,
    ""AHhMYF"": 1,
    ""Domain"": 8,
    ""Administrator"": 1,
    ""gRMxlXrYK"": 1,
    ""yVkUiC"": 1,
    ""cnXWiC"": 1,
    ""eltons"": 5,
    ""administr"": 5,
    ""pamn"": 1,
    ""2f48amar"": 1,
    ""YAsEhfEpY"": 1,
    ""njiWAr"": 1,
    ""EOZqmI"": 1
  },
  ""keyboard"": {
    ""Unknown"": 95
  },
  ""client_build"": {
    ""Unknown"": 95
  },
  ""client_name"": {
    ""Unknown"": 95
  },
  ""ip_type"": {
    ""hosting & proxy"": 5,
    ""Unknown"": 48,
    ""hosting"": 30,
    ""proxy"": 3,
    ""mobile"": 9
  }
}"
TUH8FA7k,java-007-code-review-app-6,kmprograms,Java,Wednesday 14th of February 2024 05:53:28 PM CDT,"import java.util.Random;

public class App6 {

    // Zadanie 13
    // Wylosuj trzy liczby zmiennoprzecinkowe z przedziału [3.5, 5.6] i sprawdź, czy mogą one
    // być długościami boków dowolnego trójkąta. Czy te liczby mogą stanowić boki trójkąta
    // prostokątnego? Jeżeli liczby tworzą boki jakiegokolwiek trójkąta wyznacz jego pole i obwód.

    // [ 3.5, 5.6 ] -> mnozy sie przedzial przez 10 -> [ 35, 56 ] -> Losuje sie liczbe z przedzialu calkowitoliczbowego
    // -> Potem dzieli sie przez to przez co sie pomnozylo czyliu u nas przez 10

    static double randDbl(double min, double max, int precision) {
        return 0;
    }

    static double getRandomNumberFromSpecificRange(double a, double b) {
        return new Random().nextDouble(a, b + 0.01);
    }

    static boolean isTriangle(double a, double b, double c) {
        validSides(a, b, c);
        return a + b > c && a + c > b && b + c > a;
    }

    static boolean isRectangularTriangle(double a, double b, double c) {
        var a2 = a * a;
        var b2 = b * b;
        var c2 = c * c;

        return isTriangle(a, b, c) && (a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2);
    }

    static double getPerimeter(double a, double b, double c) {
        if (isTriangle(a, b, c)) {
            throw new IllegalStateException(""Given arguments don't create triangle"");
        }

        return a + b + c;
    }

    static double getArea(double a, double b, double c, double per) {
        if (isTriangle(a, b, c)) {
            throw new IllegalStateException(""Given arguments don't create triangle"");
        }

        return a == b && b == c ? (a * a * Math.sqrt(3)) / 4 : Math.sqrt(per * (per - a) * (per - b) * (per - c));

    }

    static double getArea(double a, double b) {
        return (a * b) / 2;
    }

    static void validSides(double a, double b, double c) {
        if (a <= 0 || b <= 0 || c <= 0) {
            throw new IllegalArgumentException(""Incorrect values sides"");
        }
    }

    static void displayInfo(double a, double b, double c) {
        System.out.printf(""Obwód t wynosi %.2f%n"", getPerimeter(a, b, c));
        System.out.printf(""Pole t = %.2f"", getArea(a, b, c, getPerimeter(a, b, c)));

        if (isRectangularTriangle(a, b, c)) {
            System.out.println(""TAK, trojkat prostokatny istnieje"");
            System.out.printf(""Obwód wynosi %.2f"", getPerimeter(a, b, c));
            System.out.printf(""Pole wynosi %.2f"", getArea(a, b));
        }
    }

    public static void main(String[] args) {
        var a = getRandomNumberFromSpecificRange(3.5, 5.6);
        var b = getRandomNumberFromSpecificRange(3.5, 5.6);
        var c = getRandomNumberFromSpecificRange(3.5, 5.6);
        displayInfo(a, b, c);

        // randDbl(3.45, 5.678, 3);
    }
}
"
S8KZ78Gp,java-007-code-review-app-5,kmprograms,Java,Wednesday 14th of February 2024 05:52:52 PM CDT,"import java.util.Random;

public class App5 {
    // Zadanie 12
    // Wylosuj trzy liczby całkowite z przedziału [-20, 20] i sprawdź, czy średnia arytmetyczna
    // liczby największej oraz liczby najmniejszej jest większa od liczby środkowej.

    static int getRandomNumberFromSpecificRange(int a, int b) {
        return new Random().nextInt(a, b + 1);
    }

    static double getAvg(int a, int b, int amountNumber) {
        if (amountNumber <= 0) {
            throw new IllegalArgumentException(""Argument value amount number must be greater than zero"");
        }
        return (double) (a + b) / amountNumber;
    }

    static int getMaxValue(int n1, int n2, int n3) {
        return Math.max(n1, Math.max(n2, n3));
    }

    static int getMinValue(int n1, int n2, int n3) {
        return Math.min(n1, Math.min(n2, n3));
    }

    static int calcMidValue(int n1, int n2, int n3, int max, int min) {
        return n1 + n2 + n3 - min - max;
    }

    public static void main(String[] args) {
        var a = getRandomNumberFromSpecificRange(-20, 20);
        var b = getRandomNumberFromSpecificRange(-20, 20);
        var c = getRandomNumberFromSpecificRange(-20, 20);

        var min = getMinValue(a, b, c);
        var max = getMaxValue(a, b, c);
        var avg = getAvg(min, max, 2);
        var mid = calcMidValue(a, b, c, max, min);

        System.out.println(avg > mid ? ""TAK"" : ""NIE"");
    }
}
"
VYb7EdsN,java-007-code-review-app-4,kmprograms,Java,Wednesday 14th of February 2024 05:52:26 PM CDT,"import java.util.Random;
import java.util.Scanner;

public class App4 {
    // Zadanie 11
    // Pobierz od użytkownika dwie liczby całkowite i sprawdź, czy ich średnia arytmetyczna jest
    // większa od liczby całkowitej wylosowanej z przedziału [-10, 10].

    static int getInt(String message) {
        if (message.isEmpty()) {
            throw new IllegalArgumentException(""Lack message"");
        }

        System.out.println(message);
        return new Scanner(System.in).nextInt();
    }

    static double getAvg(int a, int b, int amountNumber) {
        if (amountNumber <= 0) {
            throw new IllegalArgumentException(""Argument value amount number must be greater than zero"");
        }
        return (double) (a + b) / amountNumber;
    }

    static int getRandomNumberFromSpecificRange(int a, int b) {
        return new Random().nextInt(a, b + 1);
    }

    public static void main(String[] args) {
        var a = getInt(""Podaj liczbe"");
        var b = getInt(""Podaj liczbe"");
        var avg = getAvg(a, b, 2);
        var rndNumber = getRandomNumberFromSpecificRange(-10, 10);
        System.out.println(avg > rndNumber ? ""TAK"" : ""NIE"");
    }
}
"
wTqUdAaR,java-007-code-review-app-3,kmprograms,Java,Wednesday 14th of February 2024 05:51:55 PM CDT,"import java.util.Random;
import java.util.Scanner;

public class App3 {
    // Zadanie 10
    // Wylosuj do zmiennej a liczbę z przedziału <1,20>. Pobieraj od użytkownika dwie liczby,
    // dopóki ich średnia arytmetyczna nie będzie różniła się od wartości zmiennej a o mniej
    // niż 2.

    static int getRandomNumberFromSpecificRange(int a, int b) {
        return new Random().nextInt(a, b + 1);
    }

    static int getInt(String message) {
        if (message.isEmpty()) {
            throw new IllegalArgumentException(""Lack message"");
        }

        var sc = new Scanner(System.in);
        System.out.println(message);
        return sc.nextInt();
    }

    static double getAvg(int x, int y) {
        return (x + y) / 2.0;
    }

    /*static boolean checkIsAvgIsSmallerAboutTwoFromRandomVariable(double avg, int a) {
        return Math.abs(avg - a) >= valueSmallerNumber;
    }*/

    static boolean haveAvgWithGreaterDiff(int n1, int n2, int n, double diff) {
        return Math.abs((n1 + n2) / 2.0 - n) <= diff;
    }

    static void getNumberFromUser(int randNum) {
        var n1 = 0;
        var n2 = 0;
        do {
            n1 = getInt(""Podaj pierwsza liczbe"");
            n2 = getInt(""Podaj druga liczbe"");
        } while (!haveAvgWithGreaterDiff(n1, n2, randNum, 2));

        System.out.println(n1);
        System.out.println(n2);
    }

    public static void main(String[] args) {
        var a = getRandomNumberFromSpecificRange(1, 20);
        System.out.println(a);
        getNumberFromUser(a);
    }
}
"
U6LeGea4,java-007-code-review-app-2,kmprograms,Java,Wednesday 14th of February 2024 05:51:12 PM CDT,"import java.util.Random;

public class App2 {

    // Zadanie 9
    // Wylosuj trzy liczby z przedziału odpowiednio <0, 10>, <-13, 23>, <34, 87>. Oblicz
    // średnią arytmetyczną wyznaczonych liczb i wypisz tą liczbę spośród losowanych
    // wcześniej, która ma wartość najbliżej obliczonej średniej.

    static int randInt(int a, int b) {
        return new Random().nextInt(a, b + 1);
    }

    static double getAvg(int a, int b, int c) {
        return (a + b + c) / 3.0;
    }

    static int getNearestToAvg(int a, int b, int c) {
        var avg = getAvg(a, b, c);
        var diffA = Math.abs(a - avg);
        var diffB = Math.abs(b - avg);
        var diffC = Math.abs(c - avg);
        var minDiff = Math.min(diffA, Math.min(diffB, diffC));

        if (diffA == minDiff) {
            return a;
        }

        if (diffB == minDiff) {
            return b;
        }

        return c;
    }

    static void displayNumberFromRange(double diff1, int p1, double diff2, int p2, double diff3, int p3) {
        if (diff1 < diff2 && diff1 < diff3) {
            System.out.println(p1);
        } else if (diff2 < diff3) {
            System.out.println(p2);
        } else {
            System.out.println(p3);
        }
    }

    static double getDiffFromParticularRangeAndAvg(double avg, int rangeNumber) {
        return Math.abs(avg - rangeNumber);
    }

    public static void main(String[] args) {
        var p1 = randInt(0, 10);
        var p2 = randInt(-13, 23);
        var p3 = randInt(34, 87);
        System.out.println(p1);
        System.out.println(p2);
        System.out.println(p3);
        System.out.println(getNearestToAvg(p1, p2, p3));
        /*var avg = getAvg(p1, p2, p3, 3);
        var diff1 = getDiffFromParticularRangeAndAvg(avg, p1);
        var diff2 = getDiffFromParticularRangeAndAvg(avg, p2);
        var diff3 = getDiffFromParticularRangeAndAvg(avg, p3);

        displayNumberFromRange(diff1, p1, diff2, p2, diff3, p3);*/
    }
}
"
GSPdNLrr,java-007-code-review-app-1,kmprograms,Java,Wednesday 14th of February 2024 05:50:38 PM CDT,"import java.util.Scanner;

public class App1 {

    // Zadanie 8
    // Pobieraj od użytkownika liczby typu int do zmiennych a i b dopóki a nie będzie
    // mniejsze od b. Następnie wyznacz iloczyn tych liczb z przedziału <a,b>, których
    // cyfra jedności jest liczbą pierwszą.

    static int getInt(String message) {
        if (message == null || message.isEmpty()) {
            throw new IllegalArgumentException(""Lack message"");
        }
        System.out.println(message);
        return new Scanner(System.in).nextInt();
    }

    static int getUnityDigit(int a) {
        return a % 10;
    }


    static boolean checkIsPrime(int number) {
        if (number < 0) {
            throw new IllegalArgumentException(""Prime numbers must be greater than 1"");
        }

        if (number <= 1) {
            return false;
        }

        var divideNumber = (int) Math.sqrt(number);
        var i = 2;

        while (i <= divideNumber) {
            if (number % i == 0) {
                return false;
            }

            i++;
        }

        return true;
    }

    static long specifyMultiplicationFromRange(int a, int b, String message) {
        if (message.isEmpty()) {
            throw new IllegalArgumentException(""Lack message"");
        }

        var multiplication = 1L;
        while (a < b) {
            for (int i = a; i <= b; i++) {
                var unityDigit = getUnityDigit(i);
                if (checkIsPrime(unityDigit)) {
                    multiplication *= i;
                }
            }

            a = getInt(message);
            b = getInt(message);
        }

        return multiplication;
    }

    static boolean isPrimeDigit(int d) {
        return d == 2 || d == 3 || d == 5 || d == 7;
    }

    static int calcProduct() {
        var a = 0;
        var b = 0;
        do {
            a = getInt(""Podaj liczbe a:"");
            b = getInt(""Podaj liczbe b:"");
        } while (a >= b);

        var product = 1;
        for (int i = a; i <= b; i++) {
            if (isPrimeDigit(getUnityDigit(i))) {
                product *= i;
            }
        }
        return product;
    }

    public static void main(String[] args) {
        /*var a = getInt(""Podaj liczbe"");
        var b = getInt(""Podaj liczbe"");
        var multiplication = specifyMultiplicationFromRange(a, b, ""Podaj liczbe"");
        System.out.printf(""Iloczyn wynosi: %d"", multiplication);*/
        System.out.println(calcProduct());
    }
}
"
sPBX0Kmk,eshop,goyslee,JavaScript,Wednesday 14th of February 2024 05:38:03 PM CDT,"
//BACKEND
//server.js
const express = require('express');
const passport = require('passport');
const session = require('express-session');
const flash = require('connect-flash');
const pool = require('./config/dbConfig');
const swaggerUi = require('swagger-ui-express');
const YAML = require('js-yaml'); 
const fs = require('fs');
const cors = require('cors');
const authRoutes = require('./routes/authRoutes');
const userRoutes = require('./routes/userRoutes');
const productRoutes = require('./routes/productRoutes');
const cartRoutes = require('./routes/cartRoutes');
const checkoutRoutes = require('./routes/checkoutRoutes');
const orderRoutes = require('./routes/orderRoutes');
const authController = require('./controllers/authController');
const pgSession = require('connect-pg-simple')(session);
const path = require('path');


if (process.env.NODE_ENV === 'development') {
  require('dotenv').config({ debug: true })
}



const app = express();



const port = process.env.PORT;
const swaggerDocument = YAML.load(fs.readFileSync('./swagger.yaml', 'utf8'));

app.use(function (req, res, next) {
  const origin = req.headers.origin; 

  console.log('Request Origin:', origin); // Debugging: Log the request's origin

  // List of allowed origins
  const allowedOrigins = [
    'https://e-shop-frontend-8ylf.onrender.com',
    'https://e-shop-backend-plfz.onrender.com',
    'https://merchant-ui-api.stripe.com/elements/wallet-config',
    `${process.env.REACT_APP_FRONTEND_URL}`,
    `${process.env.REACT_APP_BACKEND_URL}`
  ];

  if (allowedOrigins.includes(origin)) { 
    console.log('Origin allowed:', origin); // Debugging: Confirm origin is allowed
    res.header(""Access-Control-Allow-Origin"", origin);
    res.header(""Access-Control-Allow-Methods"", ""GET,HEAD,OPTIONS,POST,PUT,DELETE"");
    res.header(""Access-Control-Allow-Headers"", ""Origin, X-Requested-With, Content-Type, Accept, Authorization"");
    res.header(""Access-Control-Allow-Credentials"", true);
  } else {
    console.log('Origin not allowed:', origin); // Debugging: Log if origin is not allowed
  }
  next();
});


console.log(`${process.env.REACT_APP_FRONTEND_URL}`,
    `${process.env.REACT_APP_BACKEND_URL}`,
    `${process.env.LOCALHOST}`,
    `${process.env.REACT_APP_FRONTEND_URL}:${process.env.REACT_APP_LOCAL_PORT}`,
    `${process.env.REACT_APP_BACKEND_URL}:${process.env.REACT_APP_LOCAL_PORT}`)

app.use(session({
    store: new pgSession({
        pool : pool,                // Connection pool
        tableName: 'session',      // Use this table to store sessions
        conString: process.env.DATABASE_URL
    }),
    secret: process.env.SECRET,
    resave: false,
    saveUninitialized: false,
    cookie: {
    maxAge: 30 * 24 * 60 * 60 * 1000,
    secure: true,
    sameSite: 'None',
    domain: `${process.env.REACT_APP_BACKEND_URL}`
  } // 30 days
}));

app.use(flash());
app.use(passport.initialize());
app.use(passport.session());
app.use(express.json({ limit: '10mb' }));
app.use(express.static(path.join(__dirname, 'dist')));
app.use(express.static(path.join(__dirname, 'public')));

app.use((req, res, next) => {
  next();
});

app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));
authController.initializePassport(passport);

app.use(authRoutes);
app.use(userRoutes);
app.use(productRoutes);
app.use(cartRoutes);
app.use(checkoutRoutes);
app.use(orderRoutes);

app.get('/', (req, res) => {
  res.send('Hello, this is the E-commerce API!');
});

app.get('/check-auth', (req, res) => {
    if (req.isAuthenticated()) {
        res.json({ isAuthenticated: true, user: { name: req.user.name } });
    } else {
        res.json({ isAuthenticated: false });
    }
});

app.get('/auth/google', passport.authenticate('google', { scope: ['profile', 'email'] }));
app.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/login' }), (req, res) => {
  if (req.user && req.user.address) {
    res.redirect(`${process.env.REACT_APP_FRONTEND_URL}/products`);
  } else {
    res.redirect(`${process.env.REACT_APP_FRONTEND_URL}/profilecompletion/${req.user.userid}`);
  }
});

app.get('/profilecompletion', (req, res) => {
  const html = `
    <!DOCTYPE html>
    <html>
      <head>
        <title>Profile Completion</title>
        <!-- Add your head content here -->
      </head>
      <body>
        <div id=""root""></div>
        <!-- Include your client-side scripts here -->
        <!-- <script src=""/server-bundle.js""></script> -->
        <!-- <script src=""/client-bundle.js""></script> -->
        <script>
          // JavaScript code to render the ProfileCompletion component on the client-side
          // This code should be included in your client-side scripts
          // Example:
           const rootElement = document.getElementById('root');
           ReactDOM.render(<ProfileCompletion />, rootElement);
        </script>
      </body>
    </html>
  `;

  res.status(200).send(html);
});

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.post('/update-user-details', (req, res) => {
  const { userid, address, phonenumber } = req.body;
  
  // Update user details in the database
  pool.query(
    'UPDATE Users SET address = $1, phonenumber = $2 WHERE userid = $3',
    [address, phonenumber, userid],
    (error, results) => {
      if (error) {
        res.status(500).send('Error updating user details');
      } else {
        res.status(200).send('User details updated successfully');
      }
    }
  );
});



// Facebook OAuth routes
// app.get('/auth/facebook', passport.authenticate('facebook'));
// app.get('/auth/facebook/callback', passport.authenticate('facebook', { failureRedirect: '/login' }), (req, res) => {
//     res.redirect('/'); // Redirect after successful authentication
// });

app.listen(port, () => {
  console.log(`Server is running on ${port}`);
});

// config\dbConfig.js
require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_DATABASE,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
  connectionString: process.env.DATABASE_URL
});

module.exports = pool;


// controllers/authController.js
const jwt = require('jsonwebtoken');
const secretKey = process.env.JWT_SECRET;
const LocalStrategy = require('passport-local').Strategy;
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const bcrypt = require('bcrypt');
const pool = require('../config/dbConfig');

const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;
const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;

const initializePassport = (passport) => {
    passport.use(new LocalStrategy(
        { usernameField: 'email' },
        async (email, password, done) => {
            try {
                const res = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
                if (res.rows.length === 0) {
                    return done(null, false, { message: 'Incorrect email.' });
                }

                const user = res.rows[0];
                console.log('The user is in localstrtaegy:', user.userid)
                const match = await bcrypt.compare(password, user.password);

                if (match) {
                    return done (null, { ...user, userid: user.userid, email: user.email, username: user.name  });
                } else {
                    return done(null, false, { message: 'Incorrect password.' });
                }
            } catch (err) {
                return done(err);
            }
        }
    ));

    passport.use(new GoogleStrategy({
    clientID: GOOGLE_CLIENT_ID,
    clientSecret: GOOGLE_CLIENT_SECRET,
    callbackURL: '/auth/google/callback'
  },
  async (accessToken, refreshToken, profile, done) => {
    try {
      const email = profile.emails[0].value;
      let userResult = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
      let user = userResult.rows[0];

      if (!user) {
        // User does not exist, create a new user
        const newUserResult = await pool.query(
          'INSERT INTO users (name, email, refresh_token, phonenumber, address) VALUES ($1, $2, $3, $4, $5) RETURNING *',
          [profile.displayName, email, refreshToken, null, null]
        );
        user = newUserResult.rows[0];
      }

      // Include userid in the user object
      if (user) {
  
        return done(null, { ...user, userid: user.userid, email: user.email, username: user.name });
        
      } else {
        return done(null, false, { message: 'Unable to retrieve user id.' });
      }
    } catch (error) {
      return done(error);
    }
    
  }
));


   passport.serializeUser((user, done) => {
  done(null, user.userid);
});

passport.deserializeUser((userid, done) => {
  pool.query('SELECT * FROM users WHERE userid = $1', [userid], (err, results) => {
    if (err) {
      return done(err);
    }
    done(null, results.rows[0]);
  });
});

};

const login = (passport) => (req, res, next) => {
    if (req.isAuthenticated()) {
        return res.status(400).send('You are already logged in.');
    }

    passport.authenticate('local', (err, user, info) => {
        if (err) {
            return next(err);
        }
        if (!user) {
            return res.status(401).send('Authentication failed');
        }
        req.login(user, (loginErr) => {
            if (loginErr) {
                return next(loginErr);
            }
            return res.status(200).json({ message: 'Authentication successful', user: { name: user.name, email: user.email, userid: user.userid } });
        });
    })(req, res, next);
};

const logout = (req, res, next) => {
    if (!req.isAuthenticated()) {
        return res.status(400).send('No user to log out.');
    }

    // Destroy the session on the server-side
    req.session.destroy((err) => { 
        if (err) { 
            return res.status(500).json({ message: 'Logout failed' });
        } 

        // Remove the session record from the database
        pool.query('DELETE FROM session WHERE sid = $1', [req.sessionID], (err, result) => {
            if (err) {
                console.error('Error deleting session from database:', err);
                // You might want to handle this error differently in production
            }
            res.status(200).json({ message: 'Logged out successfully' });
        });
    });
};


const authenticateToken = (req, res, next) => {
  const token = req.header('Authorization');

  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  jwt.verify(token, secretKey, (err, user) => {
    if (err) {
      return res.status(403).json({ message: 'Invalid token' });
    }

    req.user = user; // Set the authenticated user in the request object
    next();
  });
};


const logoutPage = (req, res) => {
    res.send('logout page');
};

module.exports = {
    initializePassport,
    login,
    logout,
    logoutPage,
    authenticateToken
};

// controllers\cartController.js
const pool = require('../config/dbConfig');

const showCart = async (req, res) => {
    const userid = req.user.userid;

    try {
        // Check if the user has a cart
        const cartRes = await pool.query('SELECT * FROM carts WHERE userid = $1', [userid]);
        if (cartRes.rows.length === 0) {
            return res.status(404).send('Cart not found');
        }
        const cartId = cartRes.rows[0].cartid;

        // Fetch the items in the user's cart along with image_url and include productid
        const cartItemsQuery = await pool.query(`
            SELECT p.productid, p.name, ci.quantity, p.price, p.image_url, (ci.quantity * p.price) as itemTotalPrice
            FROM cartitems ci
            JOIN Products p ON ci.productid = p.productid
            WHERE ci.cartid = $1
        `, [cartId]);

        const cartItems = cartItemsQuery.rows;
        const cartTotalPrice = cartItems.reduce((total, item) => total + item.itemTotalPrice, 0);

        res.json({ cartItems, cartTotalPrice });
    } catch (err) {
        res.status(500).send(err.message);
    }
};


const addItemToCart = async (req, res) => {
    const userid = req.user.userid;
    const { productid, quantity } = req.body;
    const parsedQuantity = parseInt(quantity, 10);

    if (isNaN(parsedQuantity) || parsedQuantity < 1) {
        return res.status(400).send('Invalid quantity');
    }

    try {
        const product = await pool.query('SELECT stockquantity, price FROM Products WHERE productid = $1', [productid]);
        if (product.rows.length === 0 || product.rows[0].stockquantity < parsedQuantity) {
            return res.status(400).send('Insufficient stock');
        }

        let cartRes = await pool.query('SELECT * FROM carts WHERE userid = $1', [userid]);
        let cartId;
        if (cartRes.rows.length === 0) {
            const newCart = await pool.query('INSERT INTO carts (userid, totalprice) VALUES ($1, 0) RETURNING cartid', [userid]);
            cartId = newCart.rows[0].cartid;
        } else {
            cartId = cartRes.rows[0].cartid;
        }

        const existingItem = await pool.query('SELECT * FROM cartitems WHERE cartid = $1 AND productid = $2', [cartId, productid]);

        if (existingItem.rows.length > 0) {
            // Update the item quantity in the cart
            return await updateCartItem(req, res);
        } else {
            // Add new item to the cart
            await pool.query('UPDATE products SET stockquantity = stockquantity - $1 WHERE productid = $2', [parsedQuantity, productid]);

            const itemPrice = product.rows[0].price;
            const itemTotalPrice = itemPrice * parsedQuantity;

            await pool.query('INSERT INTO cartitems (cartid, productid, quantity) VALUES ($1, $2, $3)', [cartId, productid, parsedQuantity]);

            // Update cart total price
            const cartItems = await pool.query('SELECT productid, quantity FROM cartitems WHERE cartid = $1', [cartId]);
            let cartTotalPrice = 0;

            for (const item of cartItems.rows) {
                const productPrice = await pool.query('SELECT price FROM Products WHERE productid = $1', [item.productid]);
                if (productPrice.rows.length > 0) {
                    const itemPrice = parseFloat(productPrice.rows[0].price);
                    const itemQuantity = parseInt(item.quantity, 10) || 0;
                    const itemTotalPrice = itemPrice * itemQuantity;
                    cartTotalPrice += itemTotalPrice;
                }
            }

            await pool.query('UPDATE carts SET totalprice = $1 WHERE cartid = $2', [cartTotalPrice, cartId]);

            res.status(201).send('Item added to cart');
        }
    } catch (err) {
        res.status(500).send(err.message);
    }
};


const updateCartItem = async (req, res) => {
    const userid = req.user.userid;
    const { productid, quantity } = req.body;
    const updatedQuantity = parseInt(quantity, 10);

    if (isNaN(updatedQuantity) || updatedQuantity < 1) {
        return res.status(400).send('Invalid quantity');
    }

    try {
        const userCart = await pool.query('SELECT cartid FROM carts WHERE userid = $1', [userid]);
        if (userCart.rows.length === 0) {
            return res.status(404).send('User cart not found');
        }

        const { cartid: userCartId } = userCart.rows[0];
        const current = await pool.query('SELECT quantity FROM cartitems WHERE productid = $1 AND cartid = $2', [productid, userCartId]);

        if (current.rows.length === 0) {
            return res.status(404).send('Item not found in cart');
        }

        const { quantity: currentQuantity } = current.rows[0];

        if (updatedQuantity > currentQuantity) {
            const product = await pool.query('SELECT stockquantity FROM Products WHERE productid = $1', [productid]);
            if (product.rows.length === 0 || product.rows[0].stockquantity < (updatedQuantity - currentQuantity)) {
                return res.status(400).send('Insufficient stock');
            }

            await pool.query('UPDATE products SET stockquantity = stockquantity - $1 WHERE productid = $2', [updatedQuantity - currentQuantity, productid]);
        } else if (updatedQuantity < currentQuantity) {
            await pool.query('UPDATE products SET stockquantity = stockquantity + $1 WHERE productid = $2', [currentQuantity - updatedQuantity, productid]);
        }

        await pool.query('UPDATE cartitems SET quantity = $1 WHERE productid = $2 AND cartid = $3', [updatedQuantity, productid, userCartId]);

        res.status(200).send('Cart item updated');
    } catch (err) {
        res.status(500).send(err.message);
    }
};

const deleteCartItem = async (req, res) => {
    const userid = req.user.userid;
    const { itemId } = req.params;

    try {
        const cartRes = await pool.query('SELECT cartid FROM carts WHERE userid = $1', [userid]);
        if (cartRes.rows.length === 0) {
            return res.status(404).send('Cart not found');
        }

        const cartId = cartRes.rows[0].cartid;
        const item = await pool.query('SELECT quantity, productid FROM cartitems WHERE cartitemid = $1', [itemId]);

        if (item.rows.length === 0) {
            return res.status(404).send('Item not found in cart');
        }

        const parsedQuantity = parseInt(item.rows[0].quantity, 10);
        await pool.query('UPDATE products SET stockquantity = stockquantity + $1 WHERE productid = $2', [parsedQuantity, item.rows[0].productid]);
        await pool.query('DELETE FROM cartitems WHERE cartitemid = $1', [itemId]);

        res.status(204).send();
    } catch (err) {
        res.status(500).send(err.message);
    }
};

const getCartItemQuantity = async (req, res) => {
    const userid = req.user.userid;
    const { productid } = req.params;

    try {
        const cartRes = await pool.query('SELECT cartid FROM carts WHERE userid = $1', [userid]);
        if (cartRes.rows.length === 0) {
            return res.status(404).send('Cart not found');
        }
        const cartId = cartRes.rows[0].cartid;

        const itemRes = await pool.query('SELECT quantity FROM cartitems WHERE cartid = $1 AND productid = $2', [cartId, productid]);
        if (itemRes.rows.length === 0) {
            return res.status(404).send('Item not found in cart');
        }

        const quantity = itemRes.rows[0].quantity;
        res.json({ productid, quantity });
    } catch (err) {
        res.status(500).send(err.message);
    }
};

const deleteAllOfItem = async (req, res) => {
    const userid = req.user.userid;
    const { productId } = req.params;

    try {
        const cartRes = await pool.query('SELECT cartid FROM carts WHERE userid = $1', [userid]);
        if (cartRes.rows.length === 0) {
            return res.status(404).send('Cart not found');
        }

        const cartId = cartRes.rows[0].cartid;
        const item = await pool.query('SELECT quantity FROM cartitems WHERE cartid = $1 AND productid = $2', [cartId, productId]);

        if (item.rows.length === 0) {
            return res.status(404).send('Item not found in cart');
        }

        const quantityToRemove = parseInt(item.rows[0].quantity, 10);
        await pool.query('UPDATE products SET stockquantity = stockquantity + $1 WHERE productid = $2', [quantityToRemove, productId]);
        await pool.query('DELETE FROM cartitems WHERE cartid = $1 AND productid = $2', [cartId, productId]);

        res.status(204).send();
    } catch (err) {
        res.status(500).send(err.message);
    }
};

module.exports = {
    addItemToCart,
    updateCartItem,
    deleteCartItem,
    showCart,
    getCartItemQuantity,
    deleteAllOfItem
};

// controllers\checkoutController.js
const pool = require('../config/dbConfig');
const stripe = require('stripe')(process.env.REACT_APP_STRIPE_SECRET_KEY);

const checkout = async (req, res) => {
  const {userid, email} = req.user;
  const { paymentMethodId, amount, username } = req.body;

  try {
    // Retrieve the user's cart
    const cartUserQuery = await pool.query('SELECT userid FROM carts WHERE userid = $1', [userid]);
    if (cartUserQuery.rows.length === 0 || parseInt(cartUserQuery.rows[0].userid) !== parseInt(userid)) {
      return res.status(403).send(""Not authorized to view other users' carts"");
    }

    const cartQuery = await pool.query('SELECT * FROM carts WHERE userid = $1', [userid]);
    if (cartQuery.rows.length === 0) {
      return res.status(400).send('Invalid cart');
    }
    const cartId = cartQuery.rows[0].cartid;

    // Create a PaymentIntent using Stripe
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(amount * 100), // Convert amount to cents
      currency: 'gbp',
      payment_method: paymentMethodId,
      confirm: true,
      return_url: `${process.env.REACT_APP_BACKEND_URL}`,
      automatic_payment_methods: {
        enabled: true,
      },
      receipt_email: email,
       description: `Order for user ${userid}`,
    });

    // Create an order in the database
    const userQuery = await pool.query('SELECT address FROM users WHERE userid = $1', [userid]);
    const shippingAddress = userQuery.rows[0].address;

    const orderQuery = await pool.query('INSERT INTO orders (userid, orderdate, totalprice, shippingaddress) VALUES ($1, NOW(), $2, $3) RETURNING *', [userid, amount, shippingAddress]);
    const orderId = orderQuery.rows[0].orderid;

    // Add order details
    const cartItemsQuery = await pool.query('SELECT productid, quantity FROM cartitems WHERE cartid = $1', [cartId]);
    for (const item of cartItemsQuery.rows) {
      const itemTotalPrice = item.quantity * (await getProductPrice(item.productid));
      await pool.query('INSERT INTO orderdetails (orderid, productid, quantity, price) VALUES ($1, $2, $3, $4)', [orderId, item.productid, item.quantity, itemTotalPrice]);
    }

    // Clear the cart
    await pool.query('DELETE FROM cartitems WHERE cartid = $1', [cartId]);
    await pool.query('UPDATE carts SET totalprice = 0 WHERE cartid = $1', [cartId]);

    res.status(201).json({
      success: true,
      orderId: orderId,
      paymentIntentId: paymentIntent.id,
      clientSecret: paymentIntent.client_secret.toString()  // Corrected to use client_secret
    });
     } catch (err) {
    res.status(500).send(err.message);
  }
};

async function getProductPrice(productid) {
  const productQuery = await pool.query('SELECT price FROM products WHERE productid = $1', [productid]);
  if (productQuery.rows.length > 0) {
    return productQuery.rows[0].price;
  } else {
    throw new Error('Product not found');
  }
}

function getUKDateTime() {
  const options = { timeZone: 'Europe/London', hour12: false };
  return new Date().toLocaleString('en-UK', options);
}

module.exports = {
  checkout
};

// controllers\orderController.js
const pool = require('../config/dbConfig');

async function getItemTotalPrice(productId, quantity) {
    const productQuery = await pool.query('SELECT price FROM products WHERE productid = $1', [productId]);
    if (productQuery.rows.length > 0) {
        const productPrice = productQuery.rows[0].price;
        return productPrice * quantity;
    }
    return 0;
}

const getAllOrders = async (req, res) => {
    const userid = req.user.userid;
    try {
        const ordersQuery = await pool.query('SELECT * FROM orders WHERE userid = $1', [userid]);

        const ordersWithDetails = await Promise.all(
            ordersQuery.rows.map(async (order) => {
                const orderDetailsQuery = await pool.query('SELECT * FROM orderdetails WHERE orderid = $1', [order.orderid]);
                const orderDetails = orderDetailsQuery.rows.map(async (detail) => {
                    const productQuery = await pool.query('SELECT * FROM products WHERE productid = $1', [detail.productid]);
                    return {
                        ...detail,
                        product: productQuery.rows[0]
                    };
                });

                return {
                    ...order,
                    orderdetails: await Promise.all(orderDetails)
                };
            })
        );

        res.json(ordersWithDetails);
    } catch (err) {
        res.status(500).send(err.message);
    }
};


const getOrderById = async (req, res) => {
    const userid = req.user.userid;
    const orderId = req.params.orderId;
    try {
        const orderQuery = await pool.query('SELECT * FROM orders WHERE orderid = $1 AND userid = $2', [orderId, userid]);
        if (orderQuery.rows.length === 0) {
            return res.status(404).send('Order not found');
        }
        res.json(orderQuery.rows[0]);
    } catch (err) {
        res.status(500).send(err.message);
    }
};

const createOrder = async (req, res) => {
    const userid = req.user.userid;
    const { totalprice, shippingaddress, orderdetails } = req.body;
    try {
        const newOrderQuery = await pool.query('INSERT INTO orders (userid, orderdate, totalprice, shippingaddress) VALUES ($1, NOW(), $2, $3) RETURNING *', [userid, totalprice, shippingaddress]);
        const newOrderId = newOrderQuery.rows[0].orderid;
        for (const item of orderdetails) {
            const itemTotalPrice = await getItemTotalPrice(item.productid, item.quantity);
            await pool.query('INSERT INTO orderdetails (orderid, productid, quantity, price) VALUES ($1, $2, $3, $4)', [newOrderId, item.productid, item.quantity, itemTotalPrice]);
        }
        res.status(201).json(newOrderId);
    } catch (err) {
        res.status(500).send(err.message);
    }
};

const updateOrderDetails = async (req, res) => {
    const userid = req.user.userid;
    const orderId = req.params.orderId;
    const orderDetailId = req.params.orderDetailId;
    const quantity = parseFloat(req.body.quantity);

    if (isNaN(quantity)) {
        return res.status(400).send('Invalid quantity');
    }

    try {
        const orderDetailQuery = await pool.query(
            'SELECT quantity, price, productid FROM orderdetails WHERE orderid = $1 AND orderdetailid = $2',
            [orderId, orderDetailId]
        );

        if (orderDetailQuery.rows.length === 0) {
            return res.status(404).send('Order detail not found');
        }

        const { quantity: currentQuantity, price, productid } = orderDetailQuery.rows[0];
        const newQuantity = currentQuantity + quantity;
        const itemTotalPrice = price * Math.abs(quantity);

        if (newQuantity < 0) {
            return res.status(400).send('Quantity cannot be negative');
        }

        const newPrice = (price * newQuantity) / currentQuantity;

        await pool.query(
            'UPDATE orderdetails SET quantity = $1, price = $2 WHERE orderid = $3 AND orderdetailid = $4',
            [newQuantity, newPrice, orderId, orderDetailId]
        );

        await pool.query(
            'UPDATE products SET stockquantity = stockquantity - $1 WHERE productid = $2',
            [quantity, productid]
        );

        await pool.query(
            'UPDATE orders SET totalprice = totalprice + $1 WHERE orderid = $2 AND userid = $3 RETURNING *',
            [itemTotalPrice, orderId, userid]
        );

        res.status(204).send();
    } catch (err) {
        res.status(500).send(err.message);
    }
};

const deleteOrder = async (req, res) => {
    const userid = req.user.userid;
    const orderId = req.params.orderId;
    try {
        const deleteOrderQuery = await pool.query('DELETE FROM orders WHERE orderid = $1 AND userid = $2', [orderId, userid]);
        if (deleteOrderQuery.rows.length === 0) {
            return res.status(404).send('Order not found');
        }
        res.status(204).send();
    } catch (err) {
        res.status(500).send(err.message);
    }
};

module.exports = {
    getAllOrders,
    getOrderById,
    createOrder,
    updateOrderDetails,
    deleteOrder
};

// controllers\productController.js 
const pool = require('../config/dbConfig');

const addProduct = async (req, res) => {
  const { name, description, price, stockquantity, category } = req.body;
  try {
    const newProduct = await pool.query(
      'INSERT INTO products (name, description, price, stockquantity, category) VALUES ($1, $2, $3, $4, $5) RETURNING *',
      [name, description, price, stockquantity, category]
    );
    res.status(201).json(newProduct.rows[0]);
  } catch (err) {
    res.status(500).send(err.message);
  }
};

const getAllProducts = async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM products');
    res.json(result.rows);
  } catch (err) {
    res.status(500).send(err.message);
  }
};

const getProductById = async (req, res) => {
  const { productid } = req.params;
  try {
    const result = await pool.query('SELECT * FROM products WHERE productid = $1', [productid]);
    if (result.rows.length > 0) {
      res.json(result.rows[0]);
    } else {
      res.status(404).send('Product not found');
    }
  } catch (err) {
    res.status(500).send(err.message);
  }
};

const updateProduct = async (req, res) => {
  const { productid } = req.params;
  const { name, description, price, stockquantity, category } = req.body;
  try {
    const result = await pool.query(
      'UPDATE products SET name = $1, description = $2, price = $3, stockquantity = $4, category = $5 WHERE productid = $6 RETURNING *',
      [name, description, price, stockquantity, category, productid]
    );
    if (result.rows.length > 0) {
      res.json(result.rows[0]);
    } else {
      res.status(404).send('Product not found');
    }
  } catch (err) {
    res.status(500).send(err.message);
  }
};



const deleteProduct = async (req, res) => {
  const { productid } = req.params;
  try {
    const result = await pool.query('DELETE FROM products WHERE productid = $1 RETURNING *', [productid]);
    if (result.rows.length > 0) {
      res.send('Product deleted successfully');
    } else {
      res.status(404).send('Product not found');
    }
  } catch (err) {
    res.status(500).send(err.message);
  }
};

module.exports = {
  addProduct,
  getAllProducts,
  getProductById,
  updateProduct,
  deleteProduct
};


//controllers\userController.js
const Joi = require('joi');
const bcrypt = require('bcrypt');
const pool = require('../config/dbConfig'); // Adjusted path
const isAuthenticated = require('../middleware/isAuthenticated');

const userSchema = Joi.object({
  name: Joi.string().alphanum().min(3).max(30).required(),
  email: Joi.string().email().required(),
  password: Joi.string().min(5).required(),
  address: Joi.string().required(),
  phonenumber: Joi.string().pattern(new RegExp('^[0-9+\\-\\s]+$')).required()
});

const register = async (req, res) => {
  const { error, value } = userSchema.validate(req.body);
  if (error) {
    return res.status(400).send(error.details[0].message);
  }

  try {
    const { name, email, password, address, phonenumber } = value;
    const existingUser = await pool.query(""SELECT * FROM users WHERE email = $1"", [email]);
    if (existingUser.rows.length > 0) {
      return res.status(400).send(""User already exists."");
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = await pool.query(
      ""INSERT INTO users (name, email, password, address, phonenumber) VALUES ($1, $2, $3, $4, $5) RETURNING *"", 
      [name, email, hashedPassword, address, phonenumber]
    );

    const userid = newUser.rows[0].userid;

    await pool.query(
      ""INSERT INTO carts (userid, totalprice) VALUES ($1, 0)"",
      [userid]
    );

    res.status(201).send(""User registered successfully and cart created"");
  } catch (err) {
    console.error(err.message);
    res.status(500).send(""Server error"");
  }
};

const getUserById = async (req, res) => {
  const userid  = req.user.userid;
  try {
    // Check if req.user exists and if the userid matches the requested userid
    if (!req.params || parseInt(req.user.userid) !== parseInt(userid)) {
      return res.status(403).send(""Not authorized to view other users' accounts"");
    }
    const result = await pool.query('SELECT name, email, address, phonenumber, userid FROM users WHERE userid = $1', [userid]);
    if (result.rows.length > 0) {
      res.json(result.rows[0]);
    } else {
      res.status(404).send('User not found');
    }
  } catch (err) {
    console.error('Error in getUserById:', err.message);
    res.status(500).send('Internal Server Error: ' + err.message);
  }
};


const updateUser = async (req, res) => {
  const userid  = req.user.userid;
  const { name, email, password, address, phonenumber } = req.body;

  if (!userid) {
    return res.status(401).send(""User not authenticated"");
  }

  try {
    if (!req.params || parseInt(req.user.userid) !== parseInt(userid)) {
      return res.status(403).send(""Not authorized to change other users' accounts"");
    }

    let hashedPassword;
    if (password) {
      const salt = await bcrypt.genSalt(10);
      hashedPassword = await bcrypt.hash(password, salt);
    } else {
      // Fetch current password if not changing
      const currentUser = await pool.query('SELECT password FROM users WHERE userid = $1', [userid]);
      hashedPassword = currentUser.rows[0].password;
    }

    const result = await pool.query(
      'UPDATE users SET name = $1, email = $2, password = $3, address = $4, phonenumber = $5 WHERE userid = $6 RETURNING *',
      [name, email, hashedPassword, address, phonenumber, parseInt(userid)]
    );

    if (result.rows.length > 0) {
      res.json(result.rows[0]);
    } else {
      res.status(404).send('User not found');
    }
  } catch (err) {
    console.error('Error in updateUser:', err.message);
    res.status(500).send('Internal Server Error');
  }
};


async function getUserCurrentPassword(userid) {
  // Function to get the current password from the database
  const result = await pool.query('SELECT password FROM users WHERE userid = $1', [userid]);
  return result.rows[0].password;
}

const deleteUser = async (req, res) => {
  const { userid } = req.params;
  try {
    if (!req.user || parseInt(req.user.userid) !== parseInt(userid)) {
      return res.status(403).send(""Not authorized to delete other users' accounts"");
    }
    await pool.query('DELETE FROM users WHERE userid = $1', [userid]);
    res.status(204).send();
  } catch (err) {
    res.status(500).send(err.message);
  }
};

const checkAuth = (req, res) => {
  if (req.isAuthenticated()) {
    // Assuming req.user contains user details after authentication
    res.json({ isAuthenticated: true, user: req.user });
  } else {
    res.json({ isAuthenticated: false });
  }
};

module.exports = {
  register,
  getUserById,
  updateUser,
  deleteUser,
  checkAuth
};

// isAuthenticated.js
const isAuthenticated = (req, res, next) => {
    if (req.isAuthenticated()) {
        console.log('Authenticated? ', req.isAuthenticated())  
        return next();
    }
    // If the user is not authenticated, you can redirect or send an appropriate response
    res.status(401).send('User not authenticated');
};

module.exports = isAuthenticated;

const express = require('express');
const router = express.Router();
const passport = require('passport');
const authController = require('../controllers/authController');
const isAuthenticated = require('../middleware/isAuthenticated');
const isAuthorised = require('../middleware/isAuthorised');

router.post('/login', authController.login(passport));
router.post('/logout', isAuthenticated, authController.logout);
router.get('/logoutPage', authController.logoutPage);

module.exports = router;

// routes\cartRoutes.js
const express = require('express');
const router = express.Router();
const cartController = require('../controllers/cartController');
const isAuthenticated = require('../middleware/isAuthenticated');
const isAuthorised = require('../middleware/isAuthorised');

router.post('/cart/add',isAuthenticated, cartController.addItemToCart);
router.put('/cart/:itemId',isAuthenticated, cartController.updateCartItem);
router.delete('/cart/:itemId',isAuthenticated, cartController.deleteCartItem);
router.delete('/cart/removeAll/:productId',isAuthenticated, cartController.deleteAllOfItem);
router.get('/cart',isAuthenticated, cartController.showCart);
router.get('/cart/quantity/:productid',isAuthenticated, cartController.getCartItemQuantity);


module.exports = router;

// routes\cartRoutes.js
const express = require('express');
const router = express.Router();
const cartController = require('../controllers/cartController');
const isAuthenticated = require('../middleware/isAuthenticated');
const isAuthorised = require('../middleware/isAuthorised');

router.post('/cart/add',isAuthenticated, cartController.addItemToCart);
router.put('/cart/:itemId',isAuthenticated, cartController.updateCartItem);
router.delete('/cart/:itemId',isAuthenticated, cartController.deleteCartItem);
router.delete('/cart/removeAll/:productId',isAuthenticated, cartController.deleteAllOfItem);
router.get('/cart',isAuthenticated, cartController.showCart);
router.get('/cart/quantity/:productid',isAuthenticated, cartController.getCartItemQuantity);


module.exports = router;

//routes\orderRoutes.js
const express = require('express');
const router = express.Router();
const orderController = require('../controllers/orderController');
const isAuthenticated = require('../middleware/isAuthenticated');
const isAuthorised = require('../middleware/isAuthorised');

router.get('/orders',isAuthenticated, orderController.getAllOrders);
router.get('/orders/:orderId',isAuthenticated, orderController.getOrderById);
router.post('/orders',isAuthenticated, orderController.createOrder);
router.put('/orders/:orderId/orderdetails/:orderDetailId',isAuthenticated, orderController.updateOrderDetails);
router.delete('/orders/:orderId',isAuthenticated, orderController.deleteOrder);

module.exports = router;

// routes\productRoutes.js
const express = require('express');
const router = express.Router();
const productController = require('../controllers/productController');
const isAuthorised = require('../middleware/isAuthorised'); 
const isAuthenticated = require('../middleware/isAuthenticated');

router.post('/products',isAuthenticated, productController.addProduct);
router.get('/products', productController.getAllProducts);
router.get('/products/:productid', productController.getProductById);
router.put('/products/:productid',isAuthenticated, productController.updateProduct);
router.delete('/products/:productid',isAuthenticated, productController.deleteProduct);

module.exports = router;

// routes\userRoutes.js 
const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');
const isAuthenticated = require('../middleware/isAuthenticated');
const isAuthorised = require('../middleware/isAuthorised');


router.post('/register', userController.register);
router.get('/users/:userid',isAuthenticated,  userController.getUserById);
router.get('/users/user-profile/:userid',isAuthenticated, userController.getUserById);
router.put('/users/:userid',isAuthenticated, userController.updateUser);
router.delete('/users/:userid',isAuthenticated, userController.deleteUser);
router.get('/check-auth',isAuthenticated, userController.checkAuth);

module.exports = router;



const express = require('express');
const router = express.Router();
const passport = require('passport');
const authController = require('../controllers/authController');
const isAuthenticated = require('../middleware/isAuthenticated');
const isAuthorised = require('../middleware/isAuthorised');

router.post('/login', authController.login(passport));
router.post('/logout', isAuthenticated, authController.logout);
router.get('/logoutPage', authController.logoutPage);

module.exports = router;


//controllers\userController.js
const Joi = require('joi');
const bcrypt = require('bcrypt');
const pool = require('../config/dbConfig'); // Adjusted path
const isAuthenticated = require('../middleware/isAuthenticated');

const userSchema = Joi.object({
  name: Joi.string().alphanum().min(3).max(30).required(),
  email: Joi.string().email().required(),
  password: Joi.string().min(5).required(),
  address: Joi.string().required(),
  phonenumber: Joi.string().pattern(new RegExp('^[0-9+\\-\\s]+$')).required()
});

const register = async (req, res) => {
  const { error, value } = userSchema.validate(req.body);
  if (error) {
    return res.status(400).send(error.details[0].message);
  }

  try {
    const { name, email, password, address, phonenumber } = value;
    const existingUser = await pool.query(""SELECT * FROM users WHERE email = $1"", [email]);
    if (existingUser.rows.length > 0) {
      return res.status(400).send(""User already exists."");
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = await pool.query(
      ""INSERT INTO users (name, email, password, address, phonenumber) VALUES ($1, $2, $3, $4, $5) RETURNING *"", 
      [name, email, hashedPassword, address, phonenumber]
    );

    const userid = newUser.rows[0].userid;

    await pool.query(
      ""INSERT INTO carts (userid, totalprice) VALUES ($1, 0)"",
      [userid]
    );

    res.status(201).send(""User registered successfully and cart created"");
  } catch (err) {
    console.error(err.message);
    res.status(500).send(""Server error"");
  }
};

const getUserById = async (req, res) => {
  const userid  = req.user.userid;
  try {
    // Check if req.user exists and if the userid matches the requested userid
    if (!req.params || parseInt(req.user.userid) !== parseInt(userid)) {
      return res.status(403).send(""Not authorized to view other users' accounts"");
    }
    const result = await pool.query('SELECT name, email, address, phonenumber, userid FROM users WHERE userid = $1', [userid]);
    if (result.rows.length > 0) {
      res.json(result.rows[0]);
    } else {
      res.status(404).send('User not found');
    }
  } catch (err) {
    console.error('Error in getUserById:', err.message);
    res.status(500).send('Internal Server Error: ' + err.message);
  }
};


const updateUser = async (req, res) => {
  const userid  = req.user.userid;
  const { name, email, password, address, phonenumber } = req.body;

  if (!userid) {
    return res.status(401).send(""User not authenticated"");
  }

  try {
    if (!req.params || parseInt(req.user.userid) !== parseInt(userid)) {
      return res.status(403).send(""Not authorized to change other users' accounts"");
    }

    let hashedPassword;
    if (password) {
      const salt = await bcrypt.genSalt(10);
      hashedPassword = await bcrypt.hash(password, salt);
    } else {
      // Fetch current password if not changing
      const currentUser = await pool.query('SELECT password FROM users WHERE userid = $1', [userid]);
      hashedPassword = currentUser.rows[0].password;
    }

    const result = await pool.query(
      'UPDATE users SET name = $1, email = $2, password = $3, address = $4, phonenumber = $5 WHERE userid = $6 RETURNING *',
      [name, email, hashedPassword, address, phonenumber, parseInt(userid)]
    );

    if (result.rows.length > 0) {
      res.json(result.rows[0]);
    } else {
      res.status(404).send('User not found');
    }
  } catch (err) {
    console.error('Error in updateUser:', err.message);
    res.status(500).send('Internal Server Error');
  }
};


async function getUserCurrentPassword(userid) {
  // Function to get the current password from the database
  const result = await pool.query('SELECT password FROM users WHERE userid = $1', [userid]);
  return result.rows[0].password;
}

const deleteUser = async (req, res) => {
  const { userid } = req.params;
  try {
    if (!req.user || parseInt(req.user.userid) !== parseInt(userid)) {
      return res.status(403).send(""Not authorized to delete other users' accounts"");
    }
    await pool.query('DELETE FROM users WHERE userid = $1', [userid]);
    res.status(204).send();
  } catch (err) {
    res.status(500).send(err.message);
  }
};

const checkAuth = (req, res) => {
  if (req.isAuthenticated()) {
    // Assuming req.user contains user details after authentication
    res.json({ isAuthenticated: true, user: req.user });
  } else {
    res.json({ isAuthenticated: false });
  }
};

module.exports = {
  register,
  getUserById,
  updateUser,
  deleteUser,
  checkAuth
};
// routes\userRoutes.js 
const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');
const isAuthenticated = require('../middleware/isAuthenticated');
const isAuthorised = require('../middleware/isAuthorised');


router.post('/register', userController.register);
router.get('/users/:userid',isAuthenticated,  userController.getUserById);
router.get('/users/user-profile/:userid',isAuthenticated, userController.getUserById);
router.put('/users/:userid',isAuthenticated, userController.updateUser);
router.delete('/users/:userid',isAuthenticated, userController.deleteUser);
router.get('/check-auth',isAuthenticated, userController.checkAuth);

module.exports = router;
// AuthCheck.js
import { useEffect } from 'react';
import { checkAuth } from '../../services/authServices';

const AuthCheck = () => {
  useEffect(() => {
    checkAuth();
  }, []);

  return null; // This component doesn't render anything
};

export default AuthCheck;

//FRONTEND
//auth folder:
// AuthCheck.js
import { useEffect } from 'react';
import { checkAuth } from '../../services/authServices';

const AuthCheck = () => {
  useEffect(() => {
    checkAuth();
  }, []);

  return null; // This component doesn't render anything
};

export default AuthCheck;


// LoginPage.js
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { login } from '../../services/authServices';
import { loginSuccess } from '../../store/actions/authActions';
import axios from 'axios';
import './LoginPage.css'

const LoginPage = () => {
  const [credentials, setCredentials] = useState({ email: '', password: '' });
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const isAuthenticated = useSelector(state => state.auth.isAuthenticated);

  useEffect(() => {
    const getGoogleLoginToken = () => {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get('token');
    };

  const handleGoogleLogin = async () => {
  const googleLoginToken = getGoogleLoginToken();
  if (googleLoginToken) {
    try {
      const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/auth/google/callback?token=${googleLoginToken}`);
      const { name, userid, email } = response.data.user;
      dispatch(loginSuccess(name, userid, email));
      navigate('/products');
    } catch (error) {
      console.error('Error handling Google login:', error);
    }
  }
};

    if (isAuthenticated) {
      navigate('/products');
    } else {
      handleGoogleLogin();
    }
  }, [isAuthenticated, navigate, dispatch]);


  const handleChange = (e) => {
    setCredentials({ ...credentials, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    login(credentials); // Using the authService's login function
  };

  return (
    <div className=""login-container"">
      <h2>Login</h2>
      <form onSubmit={handleSubmit} className=""login-form"">
        <input
          type=""email""
          name=""email""
          value={credentials.email}
          onChange={handleChange}
          placeholder=""Email""
          required
        />
        <input
          type=""password""
          name=""password""
          value={credentials.password}
          onChange={handleChange}
          placeholder=""Password""
          required
        />
        <button type=""submit"">Login</button>
      </form>
      <div className=""google-login-button"">
        <a href={`${process.env.REACT_APP_BACKEND_URL}/auth/google`}>
          <span>Login with Google</span>
        </a>
      </div>
      <p>
        Don't have an account? <a href=""/register"">Register</a>
      </p>
    </div>
  );
};

export default LoginPage;

// LogoutPage.js
import React from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './LogoutPage.css';

const LogoutPage = ({ onLogout }) => {
  const navigate = useNavigate();

 const handleLogout = async () => {
    try {
        const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/logout`, {}, { withCredentials: true });
        if (response.status === 200) {
            onLogout();
          navigate('/login');
          console.log('Successfully logged out!')
        } else {
            console.error('Logout failed:', response.data.message);
        }
    } catch (error) {
        console.error('Logout error:', error.response.data.message);
    }
};


  return (
  <div className=""logout-container"">
    <h2>Are you sure you want to logout?</h2>
    <button onClick={handleLogout} className=""logout-button"">Logout</button>
  </div>
);
};

export default LogoutPage;

// LogoutPage.js
import React from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './LogoutPage.css';

const LogoutPage = ({ onLogout }) => {
  const navigate = useNavigate();

 const handleLogout = async () => {
    try {
        const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/logout`, {}, { withCredentials: true });
        if (response.status === 200) {
            onLogout();
          navigate('/login');
          console.log('Successfully logged out!')
        } else {
            console.error('Logout failed:', response.data.message);
        }
    } catch (error) {
        console.error('Logout error:', error.response.data.message);
    }
};


  return (
  <div className=""logout-container"">
    <h2>Are you sure you want to logout?</h2>
    <button onClick={handleLogout} className=""logout-button"">Logout</button>
  </div>
);
};

export default LogoutPage;

import axios from 'axios';

// Set the default base URL for your API
axios.defaults.baseURL = `${process.env.REACT_APP_BACKEND_URL}`;

// Function to set the authentication token in the Axios header
const setAuthToken = (token) => {
  if (token) {
    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  } else {
    delete axios.defaults.headers.common['Authorization'];
  }
};

export default setAuthToken;

//cart folder:

// Cart.js
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchCartItems, removeAllFromCart, updateCartItemQuantity } from '../../store/actions/cartActions';
import CartQuantityButton from './CartQuantityButton';
import { useNavigate } from 'react-router-dom';
import AuthCheck from '../auth/AuthCheck';
import './Cart.css';

const Cart = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { isAuthenticated } = useSelector(state => state.auth);
  const { cartItems, loading, error } = useSelector(state => state.cart);

  // Fetch cart items on authentication change
  useEffect(() => {
    if (isAuthenticated) {
      dispatch(fetchCartItems());
    }
  }, [isAuthenticated, dispatch]);

  // Handle remove all for a single product
  const handleRemoveAll = productId => {
    const isConfirmed = window.confirm(""Are you sure you want to remove all of these items?"");
    if (isConfirmed) {
      dispatch(removeAllFromCart(productId));
    }
  };

  // Handle quantity change for a single product
  const handleQuantityChange = (productId, newQuantity) => {
    dispatch(updateCartItemQuantity(productId, newQuantity));
  };

  // Render and display cart items
  const renderCartItems = () => cartItems.map(item => (
    <li key={item.productid} className=""cart-item-card"">
      <img src={item.image_url} alt={item.name} className=""cart-item-image"" />
      <div className=""cart-item-details"">
        <span className=""cart-item-name"">{item.name}</span>
        <span className=""cart-item-price""> - <b>£{item.price}</b> </span>
        <div className=""cart-item-buttons""> 
          <CartQuantityButton
              productid={item.productid}
              initialQuantity={item.quantity}
              onQuantityChange={handleQuantityChange}
          />
          <button 
              className=""remove-all-button""
              onClick={() => handleRemoveAll(item.productid)}
          >
              Remove All
          </button>
      </div>
      </div>
    </li>
  ));

  // Rendering logic based on states
  if (!isAuthenticated) {
    return <div><AuthCheck /><p>Please log in to view your cart.</p></div>;
  }

  if (loading) {
    return <div>Loading...</div>;
  }
  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div className=""cart-container"">
      <h2 className=""cart-header"">Your Cart</h2>
      {cartItems.length === 0 ? (
        <p>Your cart is empty</p>
      ) : (
        <>
          <ul className=""cart-item-list"">{renderCartItems()}</ul>
          <div class=""button-container""> 
          <button onClick={() => navigate('/checkout')} className=""proceed-to-checkout"">
            Proceed to Checkout
          </button>
        </div>
        </>
      )}
    </div>
  );
};

export default Cart;

//view\src\components\cart\CartQuantityButton.js
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import axios from 'axios';
import { useSelector } from 'react-redux';
import './CartQuantityButton.css';

const CartQuantityButton = ({ productid }) => {
  const { userid, isAuthenticated } = useSelector(state => {
    console.log('Redux State in Cart:', state); // Add this line
    return state.auth;
  });
  const [quantity, setQuantity] = useState(0);
  const numericUserId = Number(userid)
    
  console.log('UserID in CartQuantityButton:', numericUserId);


  useEffect(() => {
    const fetchCartQuantity = async () => {
      try {
        const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/cart/quantity/${productid}`, {
          withCredentials: true
        });
        setQuantity(response.data.quantity);
      } catch (error) {
        console.error('Error fetching cart quantity:', error);
      }
       // Check if userid is a number
    if (isNaN(userid)) {
      console.error('UserID is not a valid number:', userid);
      // Handle the case where userid is not valid
      // This might include returning null, showing an error, or using a default value
      return null;
    }
    };

    fetchCartQuantity();
  }, [productid, userid, isAuthenticated]);

  const updateCart = async (newQuantity) => {
    console.log(`Updating cart for product ID: ${productid} with quantity: ${newQuantity}`);
    if (!productid) {
      console.error(""Product ID is undefined"");
      return;
    }
    
    try {
      await axios.put(`${process.env.REACT_APP_BACKEND_URL}/cart/${productid}`, {
        userid,
        productid,
        quantity: newQuantity
      }, {
        withCredentials: true
      });
    } catch (error) {
      console.error('Error updating cart:', error);
    }
  };

  const addToCart = async (newQuantity) => {
    try {
      await axios.post(`${process.env.REACT_APP_BACKEND_URL}/cart/add`, {
        userid,
        productid,
        quantity: newQuantity
      }, {
        withCredentials: true
      });
    } catch (error) {
      console.error('Error adding to cart:', error);
    }
  };

  const deleteFromCart = async () => {
    try {
      await axios.delete(`${process.env.REACT_APP_BACKEND_URL}/cart/${productid}`, {
        withCredentials: true
      });
    } catch (error) {
      console.error('Error deleting from cart:', error);
    }
  };

  const increment = () => {
    if (isAuthenticated) { // Authentication Check
      const newQuantity = quantity + 1;
      setQuantity(newQuantity);
      if (quantity === 0) {
        addToCart(newQuantity);
      } else {
        updateCart(newQuantity);
      }
    } else {
      alert(""You must log in to place items in the cart!"");
    }
  };

  const decrement = () => {
    if (isAuthenticated) {  // Authentication Check
      if (quantity > 1) {
        const newQuantity = quantity - 1;
        setQuantity(newQuantity);
        updateCart(newQuantity);
      } else if (quantity === 1) {
        deleteFromCart();
        setQuantity(0);
      }
    } else {
      alert(""You must log in to remove items from the cart!"");
    }
  };

  return (
    <div className=""cart-quantity-button"">
      <button onClick={decrement} >-</button>
      <span>{quantity}</span>
      <button onClick={increment} >+</button>
    </div>
  );
};

CartQuantityButton.propTypes = {
  userid: PropTypes.number, // If userid can be null/undefined, don't use isRequired
  productid: PropTypes.number.isRequired,
};


export default CartQuantityButton;

//Checkout folder:
// Checkout.js
import React, { useMemo, useState } from 'react';
import axios from 'axios';
import { useSelector } from 'react-redux';
import { loadStripe } from '@stripe/stripe-js';
import { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import OrderHistory from '../orders/OrderHistory';
import './Checkout.css'

const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);

const CheckoutForm = () => {
  const stripe = useStripe();
  const elements = useElements();
  const { userid } = useSelector(state => state.auth);
  const { cartItems } = useSelector(state => state.cart);
  const [paymentSuccessful, setPaymentSuccessful] = useState(false);

  const totalAmount = useMemo(() => {
    return cartItems.reduce((total, item) => total + item.quantity * parseFloat(item.price), 0);
  }, [cartItems]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    const cardElement = elements.getElement(CardElement);
    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: 'card',
      card: cardElement,
    });

    if (error) {
      console.log('[error]', error);
    } else {
     try {
        const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/${userid}/checkout`, {
          paymentMethodId: paymentMethod.id,
          amount: totalAmount
          
        },{withCredentials: true});

     const { clientSecret } = response.data;
       if (clientSecret) { // Check if clientSecret exists before using it
         const result = await stripe.confirmCardPayment(clientSecret.toString());

         if (result.error) {
           console.error('Payment confirmation error', result.error);
         } else {
           setPaymentSuccessful(true); // Set the flag to true on successful payment
         }
       } else {
         console.error('Client secret is missing in the server response');
       }
      } catch (error) {
        console.error('Error processing payment', error);
      }
    }
  };

  if (paymentSuccessful) {
    return <OrderHistory />; // Render OrderHistory component on successful payment
  }


  return (
    <div className=""checkout-container"">
      <div className=""checkout-section cart-summary"">
        <h3>Cart Summary</h3>
        {cartItems.map(item => (
          <div key={item.productid} className=""cart-item"">
            <img src={item.image_url} alt={item.name} className=""cart-item-image"" />
            <div className=""cart-item-details"">
              <span className=""cart-item-name"">{item.name}</span>
              <span className=""cart-item-price"">  - <b>£{item.price}</b>  ({item.quantity})</span>
            </div>
          </div>
        ))}
        <p className=""total-amount"">Total: £{totalAmount.toFixed(2)}</p>
      </div>

      <div className=""checkout-section payment-details"">
        <form onSubmit={handleSubmit} className=""checkout-form"">
          <h2>Payment Details</h2>
          <CardElement />
          <button type=""submit"" disabled={!stripe} className=""pay-button"">
            Pay £{totalAmount.toFixed(2)}
          </button>
        </form>
      </div>
    </div>
  );
};

const Checkout = () => {
  return (
    <Elements stripe={stripePromise}>
      <CheckoutForm />
    </Elements>
  );
};

export default Checkout;


//layout folder

// Checkout.js
import React, { useMemo, useState } from 'react';
import axios from 'axios';
import { useSelector } from 'react-redux';
import { loadStripe } from '@stripe/stripe-js';
import { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import OrderHistory from '../orders/OrderHistory';
import './Checkout.css'

const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);

const CheckoutForm = () => {
  const stripe = useStripe();
  const elements = useElements();
  const { userid } = useSelector(state => state.auth);
  const { cartItems } = useSelector(state => state.cart);
  const [paymentSuccessful, setPaymentSuccessful] = useState(false);

  const totalAmount = useMemo(() => {
    return cartItems.reduce((total, item) => total + item.quantity * parseFloat(item.price), 0);
  }, [cartItems]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    const cardElement = elements.getElement(CardElement);
    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: 'card',
      card: cardElement,
    });

    if (error) {
      console.log('[error]', error);
    } else {
     try {
        const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/${userid}/checkout`, {
          paymentMethodId: paymentMethod.id,
          amount: totalAmount
          
        },{withCredentials: true});

     const { clientSecret } = response.data;
       if (clientSecret) { // Check if clientSecret exists before using it
         const result = await stripe.confirmCardPayment(clientSecret.toString());

         if (result.error) {
           console.error('Payment confirmation error', result.error);
         } else {
           setPaymentSuccessful(true); // Set the flag to true on successful payment
         }
       } else {
         console.error('Client secret is missing in the server response');
       }
      } catch (error) {
        console.error('Error processing payment', error);
      }
    }
  };

  if (paymentSuccessful) {
    return <OrderHistory />; // Render OrderHistory component on successful payment
  }


  return (
    <div className=""checkout-container"">
      <div className=""checkout-section cart-summary"">
        <h3>Cart Summary</h3>
        {cartItems.map(item => (
          <div key={item.productid} className=""cart-item"">
            <img src={item.image_url} alt={item.name} className=""cart-item-image"" />
            <div className=""cart-item-details"">
              <span className=""cart-item-name"">{item.name}</span>
              <span className=""cart-item-price"">  - <b>£{item.price}</b>  ({item.quantity})</span>
            </div>
          </div>
        ))}
        <p className=""total-amount"">Total: £{totalAmount.toFixed(2)}</p>
      </div>

      <div className=""checkout-section payment-details"">
        <form onSubmit={handleSubmit} className=""checkout-form"">
          <h2>Payment Details</h2>
          <CardElement />
          <button type=""submit"" disabled={!stripe} className=""pay-button"">
            Pay £{totalAmount.toFixed(2)}
          </button>
        </form>
      </div>
    </div>
  );
};

const Checkout = () => {
  return (
    <Elements stripe={stripePromise}>
      <CheckoutForm />
    </Elements>
  );
};

export default Checkout;

//orders folder

// Checkout.js
import React, { useMemo, useState } from 'react';
import axios from 'axios';
import { useSelector } from 'react-redux';
import { loadStripe } from '@stripe/stripe-js';
import { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import OrderHistory from '../orders/OrderHistory';
import './Checkout.css'

const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);

const CheckoutForm = () => {
  const stripe = useStripe();
  const elements = useElements();
  const { userid } = useSelector(state => state.auth);
  const { cartItems } = useSelector(state => state.cart);
  const [paymentSuccessful, setPaymentSuccessful] = useState(false);

  const totalAmount = useMemo(() => {
    return cartItems.reduce((total, item) => total + item.quantity * parseFloat(item.price), 0);
  }, [cartItems]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    const cardElement = elements.getElement(CardElement);
    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: 'card',
      card: cardElement,
    });

    if (error) {
      console.log('[error]', error);
    } else {
     try {
        const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/${userid}/checkout`, {
          paymentMethodId: paymentMethod.id,
          amount: totalAmount
          
        },{withCredentials: true});

     const { clientSecret } = response.data;
       if (clientSecret) { // Check if clientSecret exists before using it
         const result = await stripe.confirmCardPayment(clientSecret.toString());

         if (result.error) {
           console.error('Payment confirmation error', result.error);
         } else {
           setPaymentSuccessful(true); // Set the flag to true on successful payment
         }
       } else {
         console.error('Client secret is missing in the server response');
       }
      } catch (error) {
        console.error('Error processing payment', error);
      }
    }
  };

  if (paymentSuccessful) {
    return <OrderHistory />; // Render OrderHistory component on successful payment
  }


  return (
    <div className=""checkout-container"">
      <div className=""checkout-section cart-summary"">
        <h3>Cart Summary</h3>
        {cartItems.map(item => (
          <div key={item.productid} className=""cart-item"">
            <img src={item.image_url} alt={item.name} className=""cart-item-image"" />
            <div className=""cart-item-details"">
              <span className=""cart-item-name"">{item.name}</span>
              <span className=""cart-item-price"">  - <b>£{item.price}</b>  ({item.quantity})</span>
            </div>
          </div>
        ))}
        <p className=""total-amount"">Total: £{totalAmount.toFixed(2)}</p>
      </div>

      <div className=""checkout-section payment-details"">
        <form onSubmit={handleSubmit} className=""checkout-form"">
          <h2>Payment Details</h2>
          <CardElement />
          <button type=""submit"" disabled={!stripe} className=""pay-button"">
            Pay £{totalAmount.toFixed(2)}
          </button>
        </form>
      </div>
    </div>
  );
};

const Checkout = () => {
  return (
    <Elements stripe={stripePromise}>
      <CheckoutForm />
    </Elements>
  );
};

export default Checkout;

//products folder:

// Checkout.js
import React, { useMemo, useState } from 'react';
import axios from 'axios';
import { useSelector } from 'react-redux';
import { loadStripe } from '@stripe/stripe-js';
import { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import OrderHistory from '../orders/OrderHistory';
import './Checkout.css'

const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLIC_KEY);

const CheckoutForm = () => {
  const stripe = useStripe();
  const elements = useElements();
  const { userid } = useSelector(state => state.auth);
  const { cartItems } = useSelector(state => state.cart);
  const [paymentSuccessful, setPaymentSuccessful] = useState(false);

  const totalAmount = useMemo(() => {
    return cartItems.reduce((total, item) => total + item.quantity * parseFloat(item.price), 0);
  }, [cartItems]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    const cardElement = elements.getElement(CardElement);
    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: 'card',
      card: cardElement,
    });

    if (error) {
      console.log('[error]', error);
    } else {
     try {
        const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/${userid}/checkout`, {
          paymentMethodId: paymentMethod.id,
          amount: totalAmount
          
        },{withCredentials: true});

     const { clientSecret } = response.data;
       if (clientSecret) { // Check if clientSecret exists before using it
         const result = await stripe.confirmCardPayment(clientSecret.toString());

         if (result.error) {
           console.error('Payment confirmation error', result.error);
         } else {
           setPaymentSuccessful(true); // Set the flag to true on successful payment
         }
       } else {
         console.error('Client secret is missing in the server response');
       }
      } catch (error) {
        console.error('Error processing payment', error);
      }
    }
  };

  if (paymentSuccessful) {
    return <OrderHistory />; // Render OrderHistory component on successful payment
  }


  return (
    <div className=""checkout-container"">
      <div className=""checkout-section cart-summary"">
        <h3>Cart Summary</h3>
        {cartItems.map(item => (
          <div key={item.productid} className=""cart-item"">
            <img src={item.image_url} alt={item.name} className=""cart-item-image"" />
            <div className=""cart-item-details"">
              <span className=""cart-item-name"">{item.name}</span>
              <span className=""cart-item-price"">  - <b>£{item.price}</b>  ({item.quantity})</span>
            </div>
          </div>
        ))}
        <p className=""total-amount"">Total: £{totalAmount.toFixed(2)}</p>
      </div>

      <div className=""checkout-section payment-details"">
        <form onSubmit={handleSubmit} className=""checkout-form"">
          <h2>Payment Details</h2>
          <CardElement />
          <button type=""submit"" disabled={!stripe} className=""pay-button"">
            Pay £{totalAmount.toFixed(2)}
          </button>
        </form>
      </div>
    </div>
  );
};

const Checkout = () => {
  return (
    <Elements stripe={stripePromise}>
      <CheckoutForm />
    </Elements>
  );
};

export default Checkout;


//view\src\components\products\ProductDetailsPage.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useSelector } from 'react-redux';
import { useParams } from 'react-router-dom';

import CartQuantityButton from '../cart/CartQuantityButton';
import './ProductDetailsPage.css';

const ProductDetailsPage = () => {
  const { userid, isAuthenticated } = useSelector(state => {
    console.log('Redux State in Cart:', state); // Add this line
    return state.auth;
  });
  const [product, setProduct] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  const { productid } = useParams();
  const numericProductId = Number(productid);
  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/products/${productid}`);
        if (response && response.data) {
          setProduct(response.data);
        }
        setIsLoading(false);
      } catch (err) {
        setError(err.message);
        setIsLoading(false);
      }
    };

    fetchProduct();
  }, [productid, isAuthenticated, userid]);

  if (isLoading) {
    return <div className=""loading"">Loading product details...</div>;
  }

  if (error) {
    return <div className=""error"">Error: {error}</div>;
  }

  if (!product) {
    return <div className=""error"">Product not found</div>;
  }

  return (
    <div className=""product-details-container"">
      <h2>{product.name}</h2>
      <p>{product.description}</p>
      <p className=""price"">Price: ${product.price}</p>
      {product.image_url && <img src={product.image_url} alt={product.name} className=""product-image"" />}
      {/* CartQuantityButton component */}
      <div className=""cart-button-wrapper"">
        <CartQuantityButton userid={userid} productid={numericProductId} />
      </div>
    </div>
  );
}

export default ProductDetailsPage;

//view\src\components\products\ProductsList.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import Product from './ProductDetails';
import './ProductList.css';

export default function ProductList() {
   const { userid, isAuthenticated } = useSelector(state => {
    console.log('Redux State in Cart:', state); // Add this line
    return state.auth;
  });
  const [products, setProducts] = useState([]);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setIsLoading(true);
        const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/products`);
        setProducts(response.data);
        setIsLoading(false);
      } catch (err) {
        setError(err.message);
        setIsLoading(false);
      }
    };

    fetchProducts();
  }, [userid, isAuthenticated]);

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div>
       <h1 className=""product-header"">Welcome to E-shop!</h1>
      <p>You can browse our products here. We hope you will enjoy shopping with us today!</p>
    <div className=""product-list"">
     
      {products.length > 0 ? (
        products.map(product => (
          <Link to={`/product/${product.productid}`} key={product.productid}>
            <Product product={product} />
          </Link>
        ))
      ) : (
        <div>No products found</div>
      )}
      </div>
      </div>
  );
}

//users folder:

import React from 'react';
import ProfileCompletion from './ProfileCompletion'; // Adjust the import path

const ParentComponent = () => {
  const handleProfileComplete = () => {
    console.log(""Profile completed"");
    // Redirect or perform other actions
  };

  // Assuming 'user' is available here
  const user = { username: 'exampleUser' };

  return (
    <ProfileCompletion user={user} onProfileComplete={handleProfileComplete} />
  );
};

export default ParentComponent;

//view\src\components\auth\ProfileCompletion.js
import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';

const ProfileCompletion = () => {
  const navigate = useNavigate();
  const { userid } = useParams();
  const [details, setDetails] = useState({
    username: '',
    phonenumber: '',
    address: ''
  });

  useEffect(() => {
    // Fetch user data based on userid and set it in the state
    const fetchUserData = async () => {
      try {
        const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/users/${userid}`);
        setDetails({
          username: response.data.name, // Update this based on your actual user object structure
          phonenumber: '',
          address: ''
        });
      } catch (error) {
        console.error('Error fetching user data:', error);
      }
    };

    if (userid) {
      fetchUserData();
    }
  }, [userid]);

  const handleChange = (e) => {
    setDetails({ ...details, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const userUpdateData = {
      ...details,
      userid: userid
    };
    try {
      await axios.post(`${process.env.REACT_APP_BACKEND_URL}/update-user-details`, userUpdateData);
      navigate('/products');
    } catch (error) {
      console.error('Error updating user details:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type=""text""
        name=""username""
        value={details.username}
        onChange={handleChange}
        placeholder=""Username""
      />
      <input
        type=""text""
        name=""phonenumber""
        value={details.phonenumber}
        onChange={handleChange}
        placeholder=""Phone Number""
      />
      <input
        type=""text""
        name=""address""
        value={details.address}
        onChange={handleChange}
        placeholder=""Address""
      />
      <button type=""submit"">Complete Profile</button>
    </form>
  );
};

export default ProfileCompletion;

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useSelector } from 'react-redux';
import ProfileCompletion from './ProfileCompletion';
import UserProfileEdit from './UserProfileEdit'; 
import './UserProfile.css'; // Add this line to both components


const UserProfile = () => {
  const navigate = useNavigate();
  const { userid, isAuthenticated, email, username } = useSelector(state => {
    console.log('Redux State in Cart:', state);
    return state.auth;
  });

  const [userDetails, setUserDetails] = useState(null);
  const [editMode, setEditMode] = useState(false); // State to control edit mode

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/users/user-profile/${userid}`, {
        withCredentials: true});
        setUserDetails(response.data);
      } catch (error) {
        console.error('Error fetching user data:', error);
      }
    };

    if (userid) {
      fetchUserData();
    }
  }, [userid, isAuthenticated, email, username]);

  const toggleEditMode = () => {
    setEditMode(!editMode);
  };

  const handleProfileComplete = () => {
    console.log(""Profile completed"");
    navigate('/products');
  };

  const handleUserDetailsUpdate = (updatedDetails) => {
  setUserDetails(updatedDetails);
};

   return (
    <div className=""user-profile-container"">
  <h1>User Profile</h1>
  {editMode ? (
    <UserProfileEdit 
      userDetails={userDetails}
      onEditComplete={toggleEditMode}
      onUserDetailsUpdate={handleUserDetailsUpdate} 
      userid={userid} 
    />
  ) : userDetails && userDetails.phonenumber ? (
    <div className=""user-profile-card"">
      <div className=""user-profile-field"">
        <label>Name:</label>
        <p>{userDetails.name}</p>
      </div>
      <div className=""user-profile-field"">
        <label>Email:</label>
        <p>{userDetails.email}</p>
      </div>
      <div className=""user-profile-field"">
        <label>Address:</label>
        <p>{userDetails.address}</p>
      </div>
      <div className=""user-profile-field"">
        <label>Phone Number:</label>
        <p>{userDetails.phonenumber}</p>
      </div>
      <button onClick={toggleEditMode} className=""edit-profile-btn"">Edit Profile</button>
    </div>
  ) : (
    <ProfileCompletion onProfileComplete={handleProfileComplete} />
  )}
</div>

  );
};

export default UserProfile;

//view\src\components\users\UserProfileEdit.js
import React, { useState } from 'react';
import axios from 'axios';
import './UserProfile.css'; // Add this line to both components


const UserProfileEdit = ({ userDetails, onEditComplete, userid, onUserDetailsUpdate }) => {
  const [formData, setFormData] = useState({
    name: userDetails.name,
    email: userDetails.email,
    address: userDetails.address,
    phonenumber: userDetails.phonenumber
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

 // In UserProfileEdit component

const handleSubmit = async (e) => {
  e.preventDefault();
  try {
    const response = await axios.put(`${process.env.REACT_APP_BACKEND_URL}/users/${userid}`, formData, {withCredentials: true});
    if (response.data) {
      onUserDetailsUpdate(response.data); // Update the parent component's state
      onEditComplete(); // Switch back to view mode
    }
  } catch (error) {
    console.error('Error updating user data:', error);
  }
};

   return (
   <form onSubmit={handleSubmit} className=""user-profile-edit"">
  <div className=""user-profile-field"">
    <label>Name:</label>
    <input type=""text"" name=""name"" value={formData.name} onChange={handleChange} />
  </div>
  <div className=""user-profile-field"">
    <label>Email:</label>
    <input type=""email"" name=""email"" value={formData.email} onChange={handleChange} />
  </div>
  <div className=""user-profile-field"">
    <label>Address:</label>
    <input type=""text"" name=""address"" value={formData.address} onChange={handleChange} />
  </div>
  <div className=""user-profile-field"">
    <label>Phone Number:</label>
    <input type=""text"" name=""phonenumber"" value={formData.phonenumber} onChange={handleChange} />
  </div>
  <button type=""submit"" className=""update-profile-btn"">Update</button>
</form>

  );
};

export default UserProfileEdit;

//hooks folder:
//useAppNavigate.js
import { useNavigate } from 'react-router-dom';

const useAppNavigate = () => {
  const navigate = useNavigate();
  return navigate;
};

export default useAppNavigate;

//services folder:
// services/authServices.js
import axios from 'axios';
import { store } from '../store/store';
import { loginSuccess, logout } from '../store/actions/authActions';
import { fetchCartItems } from '../store/actions/cartActions'; // Import the action


const login = async (credentials) => {
  try {
    const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/login`, credentials, { withCredentials: true });
    const { name, userid, email } = response.data.user;
    if (name && userid !== undefined) {
      console.log(store.dispatch(loginSuccess(name, userid, email)))
      store.dispatch(loginSuccess(name, userid, email), );
      store.dispatch(fetchCartItems()); // Fetch cart items after successful login
    } else {
      console.error('Login failed: User ID is missing in the response');
    }
  } catch (error) {
    console.error('Login error:', error);
  }
};


const checkAuth = async () => {
  try {
    const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/check-auth`, { withCredentials: true });
    const userData = response.data.user;
    if (response.data.isAuthenticated && userData && userData.email !== undefined) {
      store.dispatch(loginSuccess(userData.name, userData.userid, userData.email));
      store.dispatch(fetchCartItems());
    } else {
      store.dispatch(logout());
    }
  } catch (error) {
    console.error('Error checking authentication:', error);
  }
};

export { login, checkAuth };

//store/actions folder:(redux store)
//view\src\store\actions\authActions.js
export const loginSuccess = (username, userid, email) => {
  return {
    type: 'LOGIN_SUCCESS',
    payload: { username, userid, email }
  };
};

export const setAuth = (isAuthenticated, username, userid, email, userNeedsProfileCompletion) => {
  return {
    type: 'SET_AUTH',
    payload: { isAuthenticated, username, userid, email, userNeedsProfileCompletion }
  };
};


export const logout = () => ({ type: 'LOGOUT' });
export const registerSuccess = (username) => ({ type: 'REGISTER_SUCCESS', payload: username });

//view\src\store\actions\cartActions.js
import axios from 'axios';

export const FETCH_CART_BEGIN = 'FETCH_CART_BEGIN';
export const FETCH_CART_SUCCESS = 'FETCH_CART_SUCCESS';
export const FETCH_CART_FAILURE = 'FETCH_CART_FAILURE';
export const UPDATE_CART_ITEM = 'UPDATE_CART_ITEM';
export const DELETE_CART_ITEM = 'DELETE_CART_ITEM';
export const ADD_TO_CART = 'ADD_TO_CART';
export const REMOVE_FROM_CART = 'REMOVE_FROM_CART';

export const fetchCartBegin = () => ({
  type: FETCH_CART_BEGIN
});

export const fetchCartSuccess = cartItems => ({
  type: FETCH_CART_SUCCESS,
  payload: { cartItems }
});

export const fetchCartFailure = error => ({
  type: FETCH_CART_FAILURE,
  payload: { error }
});

export const updateCartItem = (productId, newQuantity) => ({
  type: UPDATE_CART_ITEM,
  payload: { productId, newQuantity }
});

export const deleteCartItem = productId => ({
  type: DELETE_CART_ITEM,
  payload: { productId }
});

export const fetchCartItems = () => {
  return dispatch => {
    dispatch(fetchCartBegin());
    return axios.get(`${process.env.REACT_APP_BACKEND_URL}/cart`, { withCredentials: true })
      .then(response => dispatch(fetchCartSuccess(response.data.cartItems)))
      .catch(error => dispatch(fetchCartFailure(error)));
  };
};

export const removeAllFromCart = productId => {
  return async dispatch => {
    try {
      await axios.delete(`${process.env.REACT_APP_BACKEND_URL}/cart/removeAll/${productId}`, { withCredentials: true });
      dispatch(deleteCartItem(productId));
    } catch (error) {
      console.error('Error removing items:', error);
    }
  };
};

export const updateCartItemQuantity = (productId, newQuantity) => {
  return async dispatch => {
    try {
      await axios.put(`${process.env.REACT_APP_BACKEND_URL}/cart/${productId}`, { quantity: newQuantity }, { withCredentials: true });
      dispatch(updateCartItem(productId, newQuantity));
    } catch (error) {
      console.error('Error updating cart item:', error);
    }
  };
};


export const addToCart = (productId, quantity) => {
  return async dispatch => {
    try {
      await axios.post(`${process.env.REACT_APP_BACKEND_URL}/cart/add`, { productid: productId, quantity }, { withCredentials: true });
      dispatch({
        type: ADD_TO_CART,
        payload: { productId, quantity }
      });
    } catch (error) {
      console.error('Error adding to cart:', error);
    }
  };
};

export const removeFromCart = productId => {
  return async dispatch => {
    try {
      await axios.delete(`${process.env.REACT_APP_BACKEND_URL}/cart/${productId}`, { withCredentials: true });
      dispatch({
        type: REMOVE_FROM_CART,
        payload: { productId }
      });
    } catch (error) {
      console.error('Error removing from cart:', error);
    }
  };
};

//view\src\store\actions\userActions.js
export const REGISTER_REQUEST = 'REGISTER_REQUEST';
export const REGISTER_SUCCESS = 'REGISTER_SUCCESS';
export const REGISTER_FAILURE = 'REGISTER_FAILURE';

// Action Creators
export const registerRequest = () => ({ type: REGISTER_REQUEST });
export const registerSuccess = (username) => ({ type: REGISTER_SUCCESS, payload: username });
export const registerFailure = (error) => ({ type: REGISTER_FAILURE, payload: error });


// src/reducers/authReducer.js
const initialState = {
  isAuthenticated: false,
  userid: null,
  username: '',
  email: '',
  userNeedsProfileCompletion: false
};

export default function authReducer(state = initialState, action) {
  console.log('Dispatched Action:', action);

  switch (action.type) {
    case 'LOGIN_SUCCESS':
      console.log('LOGIN_SUCCESS payload:', action.payload);
      return {
        ...state,
        isAuthenticated: true,
        userid: action.payload.userid,
        username: action.payload.username,
        email: action.payload.email
      };
    case 'SET_AUTH':
      return {
        ...state,
        isAuthenticated: action.payload.isAuthenticated,
        userid: action.payload.userid,
        username: action.payload.username,
        email: action.payload.email,
        userNeedsProfileCompletion: action.payload.userNeedsProfileCompletion
      };
    case 'LOGOUT':
      return initialState;
    default:
      return state;
  }
}

//reducers folder:
//view\src\store\reducers\cartReducer.js
import {
  FETCH_CART_BEGIN,
  FETCH_CART_SUCCESS,
  FETCH_CART_FAILURE,
  UPDATE_CART_ITEM,
    DELETE_CART_ITEM,
    ADD_TO_CART,
    REMOVE_FROM_CART
} from '../actions/cartActions';

const initialCartState  = {
  cartItems: [],
  loading: false,
  error: null
};

export const cartReducer = (state = initialCartState , action) => {
  switch (action.type) {
    case FETCH_CART_BEGIN:
      return {
        ...state,
        loading: true,
        error: null
      };
    case FETCH_CART_SUCCESS:
      return {
        ...state,
        loading: false,
        cartItems: action.payload.cartItems
      };
    case FETCH_CART_FAILURE:
      return {
        ...state,
        loading: false,
        error: action.payload.error,
        cartItems: []
      };
    case UPDATE_CART_ITEM:
      return {
        ...state,
        cartItems: state.cartItems.map(item =>
          item.productid === action.payload.productId
            ? { ...item, quantity: action.payload.newQuantity }
            : item
        )
      };
    case DELETE_CART_ITEM:
      return {
        ...state,
        cartItems: state.cartItems.filter(item => item.productid !== action.payload.productId)
          };
        case ADD_TO_CART:
      return {
        ...state,
        cartItems: state.cartItems.map(item =>
          item.productid === action.payload.productId
            ? { ...item, quantity: item.quantity + action.payload.quantity }
            : item
        )
      };
    case REMOVE_FROM_CART:
      return {
        ...state,
        cartItems: state.cartItems.filter(item => item.productid !== action.payload.productId)
      };
    case 'LOGOUT':
      return initialCartState;
    default:
      return state;
  }
};

export default cartReducer;

//view\src\store\reducers\rootReducer.js
import { combineReducers } from 'redux';
import authReducer from './authReducer';
import cartReducer from './cartReducer';
import userReducer from './userReducer';

export default combineReducers({
  auth: authReducer,
  cart: cartReducer,
  user: userReducer
});

// src/reducers/userReducer.js
const initialState = {
  isLoggedIn: false,
  userid: null,
  email: ''
};

const userReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'LOGIN':
      return {
        ...state,
        isLoggedIn: true,
        userid: action.payload.userid,
        email: action.payload.email
      };
    case 'LOGOUT':
      return {
        ...state,
        isLoggedIn: false,
        userid: null
      };
    default:
      return state;
  }
};

export default userReducer;

//store folder:
//view\src\store\store.js
import { createStore, applyMiddleware, compose } from 'redux';
import {thunk} from 'redux-thunk'; // Corrected import for thunk
import rootReducer from './reducers/rootReducer';
import { persistStore, persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage'; // defaults to localStorage for web

const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;

// Persist configuration
const persistConfig = {
  key: 'root',
  storage,
};

// Create a persisted reducer
const persistedReducer = persistReducer(persistConfig, rootReducer);

// Create store with persisted reducer
const store = createStore(
  persistedReducer,
  composeEnhancers(applyMiddleware(thunk))
);

// Create persistor
const persistor = persistStore(store);

export { store, persistor };

//FRONTEND root folder:
// App.js
import React, { useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { Provider, useSelector, useDispatch } from 'react-redux';
import { store } from './store/store';
import axios from 'axios';

import LoginPage from './components/auth/LoginPage';
import LogoutPage from './components/auth/LogoutPage';
import RegisterPage from './components/auth/RegisterPage';
import ProfileCompletion from './components/users/ProfileCompletion';
import UserProfile from './components/users/UserProfile';
import ProductsList from './components/products/ProductsList';
import ProductDetailsPage from './components/products/ProductDetailsPage';
import Cart from './components/cart/Cart';
import Checkout from './components/checkout/Checkout';
import OrderHistory from './components/orders/OrderHistory';
import Header from './components/layout/Header';


import { loginSuccess, logout } from './store/actions/authActions';

const App = () => {
  const dispatch = useDispatch();
  const { isAuthenticated, username } = useSelector(state => state.auth);

  useEffect(() => {
    const checkUserAuthentication = async () => {
      try {
        const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/check-auth`, { withCredentials: true })
        if(response.data.isAuthenticated) {
          dispatch(loginSuccess(response.data.user.name, response.data.user.userid));
        } else {
          dispatch(logout());
        }
      } catch (error) {
        console.error('Error checking authentication:', error);
      }
    };

    checkUserAuthentication();
  }, [dispatch]);

 

  const setAuthToken = (token) => {
    if (token) {
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
    
    } else {
      delete axios.defaults.headers.common['Authorization'];
    }
  };

  const handleLogin = (user) => {
    setAuthToken(user.token);
    dispatch(loginSuccess(user.name, user.userid, user.email));
  };

  const handleLogout = () => {
    setAuthToken(null);
    dispatch(logout());
  };

const url = `${process.env.REACT_APP_BACKEND_URL}/products`;
console.log(""Request URL:"", url);



  return (
    <Provider store={store}>
      <Router>
        <Header isAuthenticated={isAuthenticated} username={username} />
        <Routes>
          <Route path=""/"" element={<ProductsList />} />
          <Route path=""/login"" element={<LoginPage onLogin={handleLogin} />} />
          <Route path=""/logout"" element={<LogoutPage onLogout={handleLogout} />} />
          <Route path=""/register"" element={<RegisterPage />} />
          <Route path=""/products"" element={<ProductsList />} />
          <Route path=""/product/:productid"" element={<ProductDetailsPage />} />
          <Route path=""/cart"" element={<Cart />} />
          <Route path=""/checkout"" element={<Checkout />} />
          <Route path=""/order-history"" element={<OrderHistory />} />
          <Route path=""/user-profile"" element={<UserProfile />} />
          <Route path=""/user-profile/:userid"" element={<UserProfile />} />
          <Route path=""/profilecompletion/:userid"" element={<ProfileCompletion />} />
        </Routes>
      </Router>
    </Provider>
  );
}

export default App;

import React from 'react';
import { createRoot } from 'react-dom/client';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { store, persistor } from './store/store'; // Adjust path as necessary
import App from './App';

const container = document.getElementById('root');
const root = createRoot(container);

root.render(
  <Provider store={store}>
    <PersistGate loading={null} persistor={persistor}>
      <App />
    </PersistGate>
  </Provider>
);



//.env file
DB_USER=postgres
DB_PASSWORD=falloutX11
DB_HOST=localhost
DB_PORT=5432
DB_DATABASE=ecommerce
SECRET=r2smw2u2
JWT_SECRET=r2smw2u2
REFRESH_TOKEN_SECRET=r2smw2u2
GOOGLE_CLIENT_ID=445920566732-otsajr3r7i3uv7vk9r1vtub7fmtri0f7.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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
LOCALHOST=http://localhost:3000
CHATGPT_API_VSCODE=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
REACT_APP_STRIPE_SECRET_KEY=sk_test_51Ao5lVAsQsqu4WY6X8Y5NFKELLsdLY5s48FGfJqhtb1v1UTs1ROQZaWgRbYyaxMOJtGaudNMCCdCHlghYxavBWJL00T2jBMSd3
REACT_APP_STRIPE_PUBLIC_KEY=pk_test_51Ao5lVAsQsqu4WY6xWkHFFPUGiyiWKb5Ap9boxONCD33jRN4vuYkdoXo4XQP2FMZuq85y7UUTQbXrpAwtW4Y3Hhr00isSg2ra1
REACT_APP_BACKEND_URL=https://e-shop-backend-plfz.onrender.com
REACT_APP_FRONTEND_URL=https://e-shop-frontend-8ylf.onrender.com

# REACT_APP_SUPABASE_URL=https://dgxfyraurqoackwkaxoe.supabase.co
# REACT_APP_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRneGZ5cmF1cnFvYWNrd2theG9lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDc1ODk2NzcsImV4cCI6MjAyMzE2NTY3N30.BqxexaEdGGO2DLP2hfBHeNVBPH8vcVbOUt8rcnZdgok


"
M0Gvb938,BBC_BASIC_TEMPLATE,lovejoy777,ZXBasic,Wednesday 14th of February 2024 05:15:22 PM CDT,"   10 REM ******************************
   20 REM *        AGON LIGHT 2        *
   30 REM *     BBC BASIC TEMPLATE     *
   40 REM *      BBC BASIC MODE 0      *
   50 REM *    C/W RESET ORIG SCREEN   *
   60 REM *      BY STEVE LOVEJOY      *
   70 REM ******************************
   80 :
   90 REM MAIN SETUP.
  100 CLEAR : REM clear memory.
  110 :
  120 PROC_LOAD_VARS             : REM CALL LOAD_VARS.
  130 PROC_GET_ORIGINALS         : REM CALL GET_ORIGINALS.
  140 PROC_INITIALIZE_SCREEN     : REM CALL INIT_SCREEN.
  150 PROC_MAIN_LOOP             : REM CALL MAIN_LOOP.
  160 :
 1000 DEF PROC_MAIN_LOOP         : REM ** MAIN LOOP **
 1010 COLOUR COL_YELLOW%         : REM CHANGE text colour.
 1020 PRINT TAB(24,20)""HELLO WORLD!""    : REM PRINT at (x,y).
 1030 PRINT TAB(22,22)""PRESS X TO EXIT"" : REM PRINT at (x,y).
 1040 A%=INKEY(0)                : REM GET keyboard input.
 1050 IF A%=120 OR A%=88 THEN PROC_CHECK_EXIT : REM press X to exit.
 1060 PROC_MAIN_LOOP             : REM loop back to start of MAIN_LOOP.
 3000 ENDPROC : REM END PROC_MAIN_LOOP.
 3010 :
 4000 DEF PROC_GET_ORIGINALS     : REM ** GET_ORIGINALS **
 4010 OM% = FN_GETBYTE_VDP(&27)  : REM GET original Screen Mode.
 4020 VDU 23,230,255,255,255,255,255,255,255,255 : REM CREATE new filled char with original colours.
 4030 PRINT TAB(0,0);CHR$(230);  : REM PRINT new char top left.
 4040 OTFC% = POINT(4,1015)      : REM GET original text fg colour.
 4050 VDU 127                    : REM DELETE new char to get bg colour.
 4060 OTBC% = POINT(4,1015)      : REM GET original text bg colour.
 4070 ENDPROC : REM END PROC_GET_ORIGINALS.
 4080 :
 5500 DEF PROC_INITIALIZE_SCREEN : REM ** INITIALIZE_SCREEN **
 5510 MODE 0                     : REM SETS new screen mode.
 5520 CLS                        : REM clear text screen.
 5530 CLG                        : REM clear graphics screen.
 5540 PROC_HIDE_CURSOR
 5550 ENDPROC : REM END PROC_INITIALIZE_SCREEN.
 5560 :
 6000 DEF PROC_HIDE_CURSOR       : REM ** HIDE_CURSOR **
 6010 VDU 23,1,0;0;0;0;
 6020 ENDPROC
 6030 :
 6040 DEF PROC_SHOW_CURSOR       : REM ** SHOW_CURSOR **
 6050 VDU 23,1,1;0;0;0;
 6060 ENDPROC
 6070 :
 8000 DEF PROC_LOAD_VARS : REM ** LOAD_VARS **
 8010 REM NAME colours, add 128 for background.
 8020 COL_BLACK% = 0
 8030 COL_RED% = 1
 8040 COL_GREEN% = 2
 8050 COL_YELLOW% = 3
 8060 COL_BLUE% = 4
 8070 COL_MAGENTA% = 5
 8080 COL_CYAN% = 6
 8090 COL_WHITE% = 7
 8100 COL_INTRED% = 9
 8110 COL_INTGREEN% = 10
 8120 COL_INTYELLOW% = 11
 8130 COL_INTBLUE% = 12
 8140 COL_INTMAGENTA% = 13
 8150 COL_INTCYAN% = 14
 8160 COL_INTWHITE% = 15
 8500 ENDPROC : REM END LOAD_VARS.
 8510 :
 8600 DEF PROC_CHECK_EXIT : REM ** CHECK EXIT **
 8610 PRINT TAB(19,24);""Quit? Press Y to confirm""
 8620 Y$=GET$
 8630 IF Y$=""y"" OR Y$= ""Y"" THEN PROC_RESET_ORIGINALS
 8640 ENDPROC : REM END PROC_CHECK_EXIT
 8650 :
 9000 DEF PROC_RESET_ORIGINALS : REM ** RESET_ORIGINALS **
 9010 VDU 20               : REM reset logical colours to default colours. 
 9020 MODE OM%             : REM SET original screen mode.
 9030 COLOUR OTFC%         : REM SET original text fg colour.
 9040 COLOUR OTBC% + 128   : REM SET original text bg colour.
 9050 PROC_SHOW_CURSOR     : REM reset cursor.
 9060 CLS                  : REM clear screen to SET original colours.
 9070 P.""GOODBYE!""         : REM print to screen to test restore function.
 9080 END                  : REM END program.
 9090 REM ENDPROC : REM END RESET_ORIGINALS
 9100 :
 9500 REM GET sysvar function for original screen mode.
 9510 DEF FN_GETBYTE_VDP(V%): A% = &A0: L%=V%: = USR(&FFF4)
"
vDRWdkhp,Машкоф читай,MaximGGoose,Go,Wednesday 14th of February 2024 05:00:44 PM CDT,"func compare(s string) string {
	s = strings.Replace(s, ""-"", """")
	slice := strings.Fields(s)

	...
}"
G2UFvbD9,[TDS] EXEMPLO SWITCH,hercioneto,PHP,Wednesday 14th of February 2024 04:44:47 PM CDT,"#include <stdio.h>

int main (void ){

int mes=1;

while (mes !=0) {

printf (""Digite o mês desejado: "");

scanf(""%d"", &mes);

switch ( mes )  {

  case 1 :    
  printf (""Janeiro\n"");

   break;

  case 2 :

  printf (""Fevereiro\n"");

break;

 case 3 :

 printf (""Março\n"");

 break;

  case 4 :   
  printf (""Abril\n"");

  break;

  case 5 :  
  printf (""Maio\n"");

break;

 case 6 :

printf (""Junho\n"");

 break;

 case 7 :

printf (""Julho\n"");

 break;
 
 case 8 :

printf (""Agosto\n"");

 break;
 
 case 9 :

printf (""Setembro\n"");

 break;
 
 case 10 :

printf (""Outubro\n"");

 break;
 
 case 11 :

printf (""Novembro\n"");

 break;
 
 case 12 :

printf (""Dezembro\n"");

 break;
 
 case 0 :
 
 break;
 
 default: printf (""Mês inválido.\n"");
}
}
printf (""FIM\n"");
  return 0;

}"
V3GBPHbf,js-discord-003-01-3-zad-23-app-2,kmprograms,JavaScript,Wednesday 14th of February 2024 04:41:39 PM CDT,"/*
    Wylosuj liczbę całkowitą z przedziału [10, 99] i oblicz sumę jej cyfr jedności oraz dziesiątek.
    Sprawdź, czy otrzymana suma jest liczbą parzystą.
*/

const randInt = (a, b) => {
    if (a > b) {
        throw new Error('Range is not correct')
    }
    return Math.floor(Math.random() * (b - a + 1)) + a;
}

// ALGORYTM wyznaczania cyfry z liczby

// 123
// J -> (123   // 1) % 10 -> (123 // 10 ** 0) % 10
// D -> (123  // 10) % 10 -> (123 // 10 ** 1) % 10
// S -> (123 // 100) % 10 -> (123 // 10 ** 2) % 10
// CYFRA = (ABS(LICZBA) // 10 ** POZYCJA) % 10

const getDigit = (n, pos) => {
    if (pos < 0) {
        throw new Error('Position is out of range')
    }
    const nn = Math.abs(n)
    return Math.floor(Math.abs(nn) / 10 ** pos) % 10
}

// const sumUnitsAndTensDigits = (n) => getDigit(n, 0) + getDigit(n, 1);
const sumUnitsAndTensDigits = (n, pos1 = 0, pos2 = 1) => getDigit(n, pos1) + getDigit(n, pos2);

// Algorytm na sumowanie cyfr w liczbie

// 123

// s = 0, n = 123

// Krok 1
// s = s + n % 10  s <- 3
// n = n // 10

// Krok 2
// s = 3, n = 12
// s = s + n % 10  s <- 3 + 2
// n = n // 10

// Krok 3
// s = 5, n = 1
// s = s + n % 10 s <- 5 + 1
// n = n // 10

// Teraz w n jest 0 i to konczy algorytm

const sumDigits = (n) => {
    let s = 0;
    let nn = Math.abs(n);

    while (nn > 0) {
        // s = s + nn % 10
        s += nn % 10
        nn = Math.floor(nn / 10)
    }

    return s;
}

const isEven = (x) => x % 2 === 0;
const isDividedBy = (x, div) => div !== 0 && x % div === 0

const main = () => {
    const x = randInt(10, 99);
    console.log(x)
    const s = sumUnitsAndTensDigits(x)
    console.log(s)
    console.log(isEven(s))

    const s2 = sumUnitsAndTensDigits(x, 1, 2)
    console.log(s2)
    console.log(isDividedBy(s2, 2))

    console.log(isEven(sumDigits(123)))
    console.log(isDividedBy(sumDigits(-123), 2))
}
main()
"
pMAV7zyq,Untitled,a_chn,Java,Wednesday 14th of February 2024 04:34:07 PM CDT,"// Question 2
import java.io.*;
import java.util.*;
 
public class a {
 
    private static boolean[][] visited;
    private static ArrayList<HashSet<Integer>> bootsAccessible;
 
    private static class Boot {
        private int s;
        private int d;
 
        public Boot(int s, int d) {
            this.s = s;
            this.d = d;
        }
    }
 
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(""snowboots.in""));
        PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(""snowboots.out"")));
        StringTokenizer st = new StringTokenizer(br.readLine());
 
        int n = Integer.parseInt(st.nextToken());
        int b = Integer.parseInt(st.nextToken());
 
        int[] path = new int[n];
        st = new StringTokenizer(br.readLine());
 
        for(int i = 0; i < n; i++) {
            path[i] = Integer.parseInt(st.nextToken());
        }
 
        Boot[] boots = new Boot[b];
        
        for(int i = 0; i < b; i++) {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            int d = Integer.parseInt(st.nextToken());
            boots[i] = new Boot(s, d);
        }
 
        br.close();
 
        bootsAccessible = new ArrayList<HashSet<Integer>>();
 
        for(int i = 0; i < n; i++) {
            bootsAccessible.add(new HashSet<Integer>());
            for(int j = 0; j < b; j++) {
                if(boots[j].s >= path[i]) {
                    bootsAccessible.get(i).add(j);
                }
            }
        }
 
        visited = new boolean[n][b];
 
        floodfill(0, 0, boots, n);
 
        int minBoots = 0;
 
        for(int i = 0; i < b; i++) {
            if(visited[n-1][i]) {
                minBoots = i;
                break;
            }
        }
 
        pw.print(minBoots);
        pw.close();
    }
 
    public static void floodfill(int tileInd, int bootInd, Boot[] boots, int n) {
        if(tileInd >= n || bootInd >= boots.length || visited[tileInd][bootInd]) {
            return;
        }
        visited[tileInd][bootInd] = true;
        for(int i = 1; i <= boots[bootInd].d; i++) {
            if(tileInd + i < n && bootsAccessible.get(tileInd + i).contains(bootInd)) {
                floodfill(tileInd + i, bootInd, boots, n);
            }
        }
        for(int i = bootInd + 1; i < boots.length; ++i) {
            if(bootsAccessible.get(tileInd).contains(i)) {
                floodfill(tileInd, i, boots, n);
            }
        }
    }
 
}"
nmMUNVZS,js-discord-003-01-3-zad-23-app-1,kmprograms,JavaScript,Wednesday 14th of February 2024 04:20:33 PM CDT,"/*
    Wylosuj liczbę całkowitą z przedziału [10, 99] i oblicz sumę jej cyfr jedności oraz dziesiątek.
    Sprawdź, czy otrzymana suma jest liczbą parzystą.
*/

const randInt = (a, b) => {
    if (a > b) {
        throw new Error('Range is not correct')
    }
    return Math.floor(Math.random() * (b - a + 1)) + a;
}

// ALGORYTM wyznaczania cyfry z liczby

// 123
// J -> (123   // 1) % 10 -> (123 // 10 ** 0) % 10
// D -> (123  // 10) % 10 -> (123 // 10 ** 1) % 10
// S -> (123 // 100) % 10 -> (123 // 10 ** 2) % 10
// CYFRA = (ABS(LICZBA) // 10 ** POZYCJA) % 10

const getDigit = (n, pos) => {
    if (pos < 0) {
        throw new Error('Position is out of range')
    }
    const nn = Math.abs(n)
    return Math.floor(Math.abs(nn) / 10 ** pos) % 10
}

// const sumUnitsAndTensDigits = (n) => getDigit(n, 0) + getDigit(n, 1);
const sumUnitsAndTensDigits = (n, pos1 = 0, pos2 = 1) => getDigit(n, pos1) + getDigit(n, pos2);

const isEven = (x) => x % 2 === 0;
const isDividedBy = (x, div) => div !== 0 && x % div === 0

const main = () => {
    const x = randInt(10, 99);
    console.log(x)
    const s = sumUnitsAndTensDigits(x)
    console.log(s)
    console.log(isEven(s))

    const s2 = sumUnitsAndTensDigits(x, 1, 2)
    console.log(s2)
    console.log(isDividedBy(s2, 2))
}
main()
"
nN3xzDyi,Untitled,zachadi,JSON,Wednesday 14th of February 2024 03:52:49 PM CDT,"{  ""DataList"":[
    {
""soon"":true,
""place"":""CASAblanca"",
""date"":""01 JAV"",
""lien"":""https://www2.guichet.com/concerts-festivals/soiree-layali-mohibine"",
""SOLDOUT"":false

},
 {
""soon"":true,
""place"":""RABAT"",
""date"":""01 JAV"",
""lien"":""https://www2.guichet.com/concerts-festivals/soiree-layali-mohibine"",
""SOLDOUT"":false

},
 {
""soon"":true,
""place"":""Fes"",
""date"":""01 JAV"",
""lien"":""https://www2.guichet.com/concerts-festivals/soiree-layali-mohibine"",
""SOLDOUT"":false

},
{
""soon"":true,
""place"":""tanger"",
""date"":""01 JAV"",
""lien"":""https://www2.guichet.com/concerts-festivals/soiree-layali-mohibine"",
""SOLDOUT"":false

},
{
""soon"":true,
""place"":""Marrakech"",
""date"":""01 JAV"",
""lien"":""https://www2.guichet.com/concerts-festivals/soiree-layali-mohibine"",
""SOLDOUT"":false

},
{
""soon"":true,
""place"":""Agadir"",
""date"":""11 mars"",
""lien"":""https://www2.guichet.com/concerts-festivals/soiree-layali-mohibine"",
""SOLDOUT"":false

}

]
}"
WSTrYjmH,fdaf,Pearlfromsu,C#,Wednesday 14th of February 2024 02:53:26 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClassLibrary1
{
    public class OwnQueue<T>
    {
        private T[] mass;
        int _count = 0, _capacity = 4;
        int _head = 0, _tail = 0;
        public int Count
        {
            get
            {
                return _count;
            }
            set
            {
                if (value > _capacity)
                {
                    while(_capacity < value)
                        _capacity *= 2;
                    T[] newArr = new T[_capacity];
                    int j = 0;
                    if (_head <= _tail)
                        for (int i = _head; i <= _tail; i++)
                            newArr[j++] = mass[i];
                    if (_head > _tail)
                    {
                        for (int i = _head; i < _capacity; i++)
                            newArr[j++] = mass[i];
                        for (int i = 0; i <= _tail; i++)
                            newArr[j++] = mass[i];
                    }
                    mass = newArr;
                    _head = 0;
                    _tail = _count - 1;
                }
                _count = value;
            }
        }
        public void Enqueue(T elem)
        {
            this.Count++;
            if(_head + 1 >= _capacity)
            {
                
            }
        }
        
        public OwnQueue()
        {
            this._count = 0;
            this._capacity = 4;
            
        }
    }
}
"
gGPScWxU,js-discord-002-01-2-zad-13-app-2,kmprograms,JavaScript,Wednesday 14th of February 2024 02:50:21 PM CDT,"/*
    Wylosuj trzy liczby zmiennoprzecinkowe z przedziału [3.5, 5.6] i sprawdź, czy mogą one
    być długościami boków dowolnego trójkąta. Czy te liczby mogą stanowić boki trójkąta
    prostokątnego? Jeżeli liczby tworzą boki jakiegokolwiek trójkąta wyznacz jego pole i obwód.
*/

// Losowanie liczby calkowitej
// [3, 9] -> odejmujesz 3 od koncow przedzialu i masz [0, 6] + 3 -> przedzial [0, 6] przedstaw
// w postaci przedzialu [0, 1] czyli po tym przeksztalceniu mamy:
// [0, 1] * 6 + 3

// [a, b] --> [0, 1] * (b - a + 1) + a

/*let a = 3;
let b = 9;
let x = Math.floor(Math.random() * (b - a + 1)) + a;  // [0, 1)
// 3.4 - po Math.floor masz 3
// 7.4 - po Math.floor masz 7
// 7.99999 - po Math.floor masz 7
// 0 - po Math.floor masz 0
// [0, 1) * 7 -> [0, 7)
// Math.floor([0, 7)) -> 0, 1, 2, 3, 4, 5, 6 czyli daje nam [0, 6]
console.log(x)

[4.5, 7.8] -> mnozysz razy 10 i masz [45, 78] -> losujesz wartosc z przedzialu liczb calkowitych -> dzielisz przez 10
[5.23, 6.5] -> przez 100 -> [523, 650] -> ...
*/


const randInt = (a, b) => {
    if (a > b) {
        throw new Error('Range is not correct')
    }
    return Math.floor(Math.random() * (b - a + 1)) + a;
}

// [5.23, 6.5] -> mnozysz przez 100 wiec 10 ** 2 wiec precision to bedzie 2
const randFloat = (a, b, precision) => {
    const v = 10 ** precision;
    const aInt = a * v;
    const bInt = b * v;
    return randInt(aInt, bInt) / v;
}

const Triangle = (x, y, z) => {

    if (!_isTriangle()) {
        throw new Error('Cannot buiild a triangle');
    }

    function _isTriangle() {
        return x > 0 && y > 0 && z > 0 && x + y > z && x + z > y && z + y > x;
    }

    const isRectangularTriangle = () => {
        const [x2, y2, z2] = [x * x, y * y, z * z];
        return x2 + y2 === z2 || x2 + z2 === y2 || z2 + y2 === x2;
    }

    const calcPerimeter = () => {
        return x + y + z;
    }

    const calcArea = () => {
        const p = calcPerimeter(x, y, z) / 2;
        return (p * (p - x) * (p - y) * (p - z)) ** 0.5;
    }

    return {
        isRectangularTriangle,
        calcPerimeter,
        calcArea
    }

    /*return {
        isRect: isRectangularTriangle(),
        perimeter: calcPerimeter(),
        area: calcArea()
    }*/
}

function Triangle2(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;

    if (!this._isTriangle()) {
        throw new Error('Cannot buiild a triangle');
    }
}

Triangle2.prototype._isTriangle = function () {
    return this.x > 0 && this.y > 0 && this.z > 0 && this.x + this.y > this.z && this.x + this.z > this.y && this.z + this.y > this.x;
}

Triangle2.prototype.isRectangularTriangle = function () {
    const [x2, y2, z2] = [this.x * this.x, this.y * this.y, this.z * this.z];
    return x2 + y2 === z2 || x2 + z2 === y2 || z2 + y2 === x2;
}

Triangle2.prototype.calcPerimeter = function () {
    return this.x + this.y + this.z;
}

Triangle2.prototype.calcArea = function () {
    const p = this.calcPerimeter(this.x, this.y, this.z) / 2;
    return (p * (p - this.x) * (p - this.y) * (p - this.z)) ** 0.5;
}


const main = () => {
    try {
        const MIN = 3.5
        const MAX = 5.6
        // const [a, b, c] = [randFloat(MIN, MAX, 1), randFloat(MIN, MAX, 1), randFloat(MIN, MAX, 1)];
        const [a, b, c] = [3, 4, 5];

        // Kiedy zwracasz referencje do funkcji
        /*const t = Triangle(a, b, c);
        t.x = 11;
        t.y = 12;
        t.z = 13;
        console.log(t.isRectangularTriangle())
        console.log(t.calcArea())
        console.log(t.calcPerimeter())*/

        // Kiedy zwracamy od razu wyliczone wartosci
        /*const t = Triangle(a, b, c);
        console.log(t.isRect)
        console.log(t.area)
        console.log(t.perimeter)*/

        /*const t2 = new Triangle2(3, 4, 5)
        console.error(t2.isRectangularTriangle())
        console.error(t2.calcArea())
        console.error(t2.calcPerimeter())

        t2.x = 11;
        t2.y = 12;
        t2.z = 13;
        console.error(t2.isRectangularTriangle())
        console.error(t2.calcArea())
        console.error(t2.calcPerimeter())*/

    } catch (err) {
        console.error(err.message);
    }
}
main()


"
64XTY3qU,js-discord-002-01-2-zad-13-app-1,kmprograms,JavaScript,Wednesday 14th of February 2024 02:49:45 PM CDT,"/*
    Wylosuj trzy liczby zmiennoprzecinkowe z przedziału [3.5, 5.6] i sprawdź, czy mogą one
    być długościami boków dowolnego trójkąta. Czy te liczby mogą stanowić boki trójkąta
    prostokątnego? Jeżeli liczby tworzą boki jakiegokolwiek trójkąta wyznacz jego pole i obwód.
*/

// Losowanie liczby calkowitej
// [3, 9] -> odejmujesz 3 od koncow przedzialu i masz [0, 6] + 3 -> przedzial [0, 6] przedstaw
// w postaci przedzialu [0, 1] czyli po tym przeksztalceniu mamy:
// [0, 1] * 6 + 3

// [a, b] --> [0, 1] * (b - a + 1) + a

/*let a = 3;
let b = 9;
let x = Math.floor(Math.random() * (b - a + 1)) + a;  // [0, 1)
// 3.4 - po Math.floor masz 3
// 7.4 - po Math.floor masz 7
// 7.99999 - po Math.floor masz 7
// 0 - po Math.floor masz 0
// [0, 1) * 7 -> [0, 7)
// Math.floor([0, 7)) -> 0, 1, 2, 3, 4, 5, 6 czyli daje nam [0, 6]
console.log(x)

[4.5, 7.8] -> mnozysz razy 10 i masz [45, 78] -> losujesz wartosc z przedzialu liczb calkowitych -> dzielisz przez 10
[5.23, 6.5] -> przez 100 -> [523, 650] -> ...
*/


const randInt = (a, b) => {
    if (a > b) {
        throw new Error('Range is not correct')
    }
    return Math.floor(Math.random() * (b - a + 1)) + a;
}

// [5.23, 6.5] -> mnozysz przez 100 wiec 10 ** 2 wiec precision to bedzie 2
const randFloat = (a, b, precision) => {
    const v = 10 ** precision;
    const aInt = a * v;
    const bInt = b * v;
    return randInt(aInt, bInt) / v;
}

function isTriangle(x, y, z) {
    return x > 0 && y > 0 && z > 0 && x + y > z && x + z > y && z + y > x;
}

const isRectangularTriangle = (x, y, z) => {
    if (!isTriangle(x, y, z)) {
        return false;
    }
    const [x2, y2, z2] = [x * x, y * y, z * z];
    return x2 + y2 === z2 || x2 + z2 === y2 || z2 + y2 === x2;
}

const calcPerimeter = (x, y, z) => {
    if (!isTriangle(x, y, z)) {
        throw new Error('Not a triangle')
    }
    return x + y + z;
}

const calcArea = (x, y, z) => {
    if (!isTriangle(x, y, z)) {
        throw new Error('Not a triangle')
    }
    const p = calcPerimeter(x, y, z) / 2;
    return (p * ( p - x) * (p - y) * (p - z)) ** 0.5;
}



const main = () => {

    const MIN = 3.5
    const MAX = 5.6

    /*const a = randFloat(MIN, MAX, 1);
    const b = randFloat(MIN, MAX, 1);
    const c = randFloat(MIN, MAX, 1);*/

    const [a, b, c] = [randFloat(MIN, MAX, 1), randFloat(MIN, MAX, 1), randFloat(MIN, MAX, 1)];

    // const [a, b, c] = [3, 4, 5];
    console.log(a, b, c);
    console.log(isTriangle(a, b, c));
    console.log(isRectangularTriangle(a, b, c));
    console.log(calcPerimeter(a, b, c))
    console.log(calcArea(a, b, c))
}
main()


"
Aucvdf48,Smart Health - smart walking stick,zhexo,Arduino,Wednesday 14th of February 2024 02:41:39 PM CDT,"/*****************************************/
#include <ArduinoHttpClient.h>
#include <WiFi101.h>
#include ""arduino_secrets.h""
///////please enter your sensitive data in the Secret tab/arduino_secrets.h
/////// WiFi Settings ///////
char ssid[] = SECRET_SSID;
char pass[] = SECRET_PASS;

const char serverAddress[] = ""dweet.io"";  // server address
int port = 80;

WiFiClient wifi;
HttpClient client = HttpClient(wifi, serverAddress, port);
int status = WL_IDLE_STATUS;

void setup()
{ 
  pinMode(2,INPUT);
  digitalWrite(2, HIGH);
  Serial.begin(9600);
  while(!Serial);
  while ( status != WL_CONNECTED) {
    Serial.print(""Attempting to connect to Network named: "");
    Serial.println(ssid);                   // print the network name (SSID);

    // Connect to WPA/WPA2 network:
    status = WiFi.begin(ssid, pass);
  } 
  
} 
/******************************************/
void loop() 
{  
  int digitalVal = digitalRead(2);
  Serial.print(digitalVal);
  Serial.println();
  
/********** POST to dweet.io ***/
  // assemble the path for the POST message:
  String dweetName = ""a9787746-3516-41ac-9c12-e64bfd1efbe0"";
  String path = ""/dweet/for/"" + dweetName;
  String contentType = ""application/json"";

  // assemble the body of the POST message:
  String postData = ""{\""sensorValue\"":\""""; 
  postData += digitalVal;
  postData += ""\""}"";

  Serial.println(""making POST request"");

  // send the POST request
  client.post(path, contentType, postData);

 Serial.println(""Wait one minute \n"");
  delay(60000);
  
}
/**********************************************/
"
Cd1dkX2P,MergeBabe,Shamba,C,Wednesday 14th of February 2024 02:32:41 PM CDT,"#include <stdio.h>
#include <stdlib.h>

//defining structure of a node
struct linkedlist
{
	int data;
	struct linkedlist *next;
};

//defining 'node' as the alias name for 'struct linkedlist'
typedef struct linkedlist node; 


//function to create nodes
void create(node *current, node *prev)
{
	int item;
	printf(""Enter a number (enter -999 to end): "");
	scanf(""%d"",&item);	
	if(item==-999)
	{
		free(current);
		prev->next=NULL;
		return;
	}	
	else
	{	//creating the next node
		current->data=item;
		current->next=(node *)malloc(sizeof(node));
		prev=current;
		create(current->next,prev); //recursion occurs
	}
}

node* createSingleNode(int item) {
    node* temp = (node*)malloc(sizeof(node));

    temp -> data = item;
    temp -> next = NULL;
}

void display(node *current)
{
	if(current->next!=NULL)
	{
		
		if(current->next->next==NULL)
			printf(""%d-->"",current->data);
		else
			printf(""%d-->"",current->data);
		display(current->next);
	} 
	else
	printf(""%d \n"",current->data);
	return;
}

void Merge(node* head1, node* head2, node* mergedList, node* prev) {
    if(head1 == NULL && head2 == NULL) {
        free(mergedList);
        prev -> next = NULL;
        return;
    }
    if(head1 == NULL) {
        mergedList -> data = head2 -> data;
        mergedList -> next = (node *)malloc(sizeof(node));
        prev = mergedList;

        Merge(head1, head2 -> next, mergedList -> next, prev);
        return;
    }
    else if(head2 == NULL) {
        mergedList -> data = head1 -> data;
        mergedList -> next = (node *)malloc(sizeof(node));
        prev = mergedList;

        Merge(head1 -> next, head2, mergedList -> next, prev);
        return;
    }

    if(head1 -> data < head2 -> data) {
        mergedList -> data = head1 -> data;
        mergedList -> next = (node *)malloc(sizeof(node));
        prev = mergedList;

        Merge(head1 -> next, head2, mergedList -> next, prev);
        return;
    }
    else if(head2 -> data < head1 -> data) {
        mergedList -> data = head2 -> data;
        mergedList -> next = (node *)malloc(sizeof(node));
        prev = mergedList;

        Merge(head1, head2 -> next, mergedList -> next, prev);
        return;
    }
}

void main() {
    node *head, *head1, *head2;
	node *prev=NULL;
	head=(node *)malloc(sizeof(node));
	head1=(node *) malloc(sizeof(node));
	head2=(node *) malloc(sizeof(node));
	printf(""Enter the data to be inserted in the first linked list: \n"");
	create(head1,prev);
	printf(""Enter the data to be inserted in the second linked list: \n"");
	create(head2,prev); 
    printf(""The first array:	"");
	display(head1);
	printf(""The second array:	"");
	display(head2);
    node* mergedList = (node *) malloc(sizeof(node));
    prev = NULL;
    Merge(head1, head2, mergedList, prev);
    printf(""The merged array:   "");
    display(mergedList);
}"
6EkWm3aH,Untitled,Nenogzar,Python,Wednesday 14th of February 2024 02:14:16 PM CDT,"message = input().split()

words, numbers = [], []
for word in message:
    num, let = """", """"
    for symbol in word:
        if symbol.isdigit():
            num += symbol
        else:
            let += symbol
    numbers.append(int(num))
    if len(let) != 1:
        let = f""{let[-1]}{let[1:-1]}{let[0]}""
    words.append(let)

for n, w in zip(numbers, words):
    print(f""{chr(n)}{w}"", end="" "")"
stgzDBhs,Robot place,Takeshi_13,Lua,Wednesday 14th of February 2024 02:13:07 PM CDT,"local sides = require ""sides""
local robot = require ""robot""
local component = require ""component""
local active_slot = 1
size=robot.inventorySize()
local function Text()
    os.execute(""cls"")
    print(""┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"")
    print(""┃                                                ┃"")
    print(""┃                                                ┃"")
    print(""┃                                                ┃"")
    print(""┃                                                ┃"")
    print(""┃            Программа запущена.                 ┃"")
    print(""┃            Версия кода: 1.2.1                  ┃"")
    print(""┃                                                ┃"")
    print(""┃                                                ┃"")
    print(""┃                                                ┃"")
    print(""┃                                                ┃"")
    print(""┃                                                ┃"")
    print(""┗━━━━━[Takeshi]━━━━━━━━━━━━━━━━━━━[Takizawa]━━━━━┛"")
end 
 
Text()
 
 
 
while true do
o = robot.detect()
if o == true then robot.turnLeft() end
if o == false then robot.forward() end
robot.select(active_slot)
robot.placeDown()
end
"
Ee9pn5my,Untitled,Nenogzar,Python,Wednesday 14th of February 2024 02:12:37 PM CDT,"message = input().split()

words = []
for word in message:
    num, let = """", """"
    for symbol in word:
        if symbol.isdigit():
            num += symbol
        else:
            let += symbol
    if len(let) != 1:
        let = f""{let[-1]}{let[1:-1]}{let[0]}""
    words.append(f""{chr(int(num))}{let}"")

print(*words, end=' ')"
iGGDYe2H,# b_inv.py,here2share,Python,Wednesday 14th of February 2024 01:46:00 PM CDT,"# b_inv.py

inv = {
    ""Gold"": 200,
    ""Silver"": 1500,
    ""Ruby"": 3,
    ""Diamond"": 16,
}

loot = {
    ""Gold"": 10,
    ""Silver"": 80,
    ""Diamond"": 2,
    ""Emerald"": 4,
    ""Sapphire"": 2,
    ""Topaz"": 1
}

new_inv = {k: inv.get(k, 0) + loot.get(k, 0) for k in set(inv) | set(loot)}

print(new_inv)"
7fRCzVJ4,25 до корня,nq1s788,Python,Wednesday 14th of February 2024 01:42:30 PM CDT,"from math import sqrt, floor
for n in range(174457, 174506): #174457, 174506
    d = []
    for x in range(2, floor(sqrt(n) + 1)): #до корня включительно, не включительно ceil(sqrt(n))
        if n % x == 0:
            d.append(x)
    if len(d) == 1:
        print(d[0], n // d[0])"
5BsyTJAK,311_1402,Petro_zzz,C++,Wednesday 14th of February 2024 12:32:29 PM CDT,"#include <iostream>

using namespace std;

void show_menu();
void converter_rub2usd();
void converter_usd2rub();

void children() {
	int k = 0;
	//cout << ""Enter "";
	//cin >> k;
	while(k < 10) {
		cout << k << "" "";
		k++;
	}
	cout << endl;
}

void bill() {
	int summ = 0;
	int price;
	int n = 0;
	
	while (n < 4) {
		cout << ""Enter "" << n << "" product "";
		cin >> price;
		summ += price;
		n++;
	}
	cout << ""TOTAL: "" << summ << endl;
}

const double price_usd_rub = 91.51;

void converter_rub2usd() {
	double rub, usd;
	cout << ""Enter numbers of rub for covert to usd: "";
	cin >> rub;

	usd = rub / price_usd_rub;
	cout << ""You can take "" << usd << "" usd"" << endl;
}

void converter_usd2rub() {
	double rub, usd;
	cout << ""Enter numbers of usd for covert to rub: "";
	cin >> usd;

	rub = usd * price_usd_rub;
	cout << ""You can take "" << rub << "" rub"" << endl;
}

void show_menu() {
	cout << endl;
	cout << ""     Converter Money    "" << endl;
	cout << endl;
		
	cout << "" 1. Convert rub to usd."" << endl;
	cout << "" 2. Convert usd to rub."" << endl;
	cout << "" 0. Exit."" << endl;
	int mode = 1;
	while (mode > 0) {
		cin >> mode;
		if (mode == 1) {
			converter_rub2usd();
		}
		if (mode == 2) {
			converter_usd2rub();
		}
		cout << ""Enter 0 for exit"" << endl;
	}
	cout << endl;
}

int main() {
	//children();
	//bill();
	//converter_money();
	show_menu();
	system(""pause"");
	return 0;
}"
31LBcz3J,BFS,nq1s788,Python,Wednesday 14th of February 2024 12:26:24 PM CDT,"from queue import Queue
n, m = map(int, input().split()) #n - кол-во вершин, m - кол-во ребер
g = [[] for i in range(n)]
for i in range(m):
    x, y = map(int, input().split())
    x -= 1
    y -= 1
    g[x].append(y)
    g[y].append(x)
used = [-1] * n
used[0] = 0
q = Queue()
q.put(0)
while not q.empty():
    h = q.get() #h - текущая вершина
    for e in g[h]:
        if used[e] == -1:
            used[e] = used[h] + 1
            q.put(e)
end = int(input())
print(used[end - 1], used)"
UQvjpTrq,D,Ankit_132,C++,Wednesday 14th of February 2024 12:25:29 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	
	while(t--){
	    int n;
	    cin>>n;
	    
	    vector<long long int> a(n);
	    for(auto &e: a)
	        cin>>e;
	        
	    long long int val = 0;
	    
	    for(auto e: a)
	        val ^= e;
	    
	    for(int b=60, chk=0; b>0; b--){
	        int cnt = 0;
	        
	        for(int i=0; i<n; i++)
	            cnt += (((1ll<<b)&a[i])>0);
	            
	        if(cnt%2==0 && cnt>0)
	            chk = 1;
	            
	        if(chk)     val |= (1ll<<b);
	    }
	    
	    cout<<val<<""\n"";
	}
}"
MiVHSSGG,C,Ankit_132,C++,Wednesday 14th of February 2024 12:24:57 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
    int t;
    cin>>t;
    
    vector<int> isPrime(1000001, 1);
    
    for(int i=2; i<=1000000; i++){
        if(!isPrime[i])     continue;
        
        for(int j=2*i; j<=1000000; j+=i)
            isPrime[j] = 0;
    }
    
    while(t--){
        int n;
        cin>>n;
        
        if(n == 1){
            cout<<1<<""\n"";
            continue;
        }
        else if(n==2){
            cout<<2<<"" ""<<2<<""\n"";
            continue;
        }
        else if(n==3){
            cout<<1<<"" ""<<2<<"" ""<<2<<""\n"";
            continue;
        }
        
        cout<<1<<"" "";
        
        int done = 1;
        
        if(n%2 == 0){
            done += 3;
            cout<<4<<"" ""<<4<<"" ""<<4<<"" "";
        }
        
        for(int i=2; done<n; i++){
            if(isPrime[i]){
                done+=2;
                cout<<i<<"" ""<<i<<"" "";
            }
        }
        
        cout<<""\n"";
    }
}"
MLJLhAP8,B,Ankit_132,C++,Wednesday 14th of February 2024 12:24:25 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
    int t;
    cin>>t;
    
    while(t--){
        int n;
        cin>>n;
        
        vector<int> a(n);
        for(auto &e: a)
            cin>>e;
        
        if(n==2 && a[1]<a[0])
            cout<<""NO\n"";
        else if(n==3 && (a[1]<min(a[0], a[2]) || a[1]>max(a[0], a[2])))
            cout<<""NO\n"";
        else
            cout<<""YES\n"";
    }
}"
DA4gncbj,A,Ankit_132,C++,Wednesday 14th of February 2024 12:23:53 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	
	while(t--){
	    int n;
	    string a, b;
	    cin>>n>>a>>b;
	    
	    for(int i=0; i<n; i++)
	    {
	        int cnt = 0;
	        
	        while(a[i] != b[i]){
	            cnt++;
	            a[i] += 3;
	            
	            if(a[i] > 'Z')
	                a[i] = 'A' + (a[i]-'Z'-1);
	        }
	        
	        cout<<cnt<<"" "";
	    }
	    
	    cout<<""\n"";
	}
}"
3PTCPWF3,Convert Windows AD Time to Regular Dates Bash,savsanta,Bash,Wednesday 14th of February 2024 12:18:47 PM CDT,"#!/bin/bash

adPwdLastSetNT=$(dscl ""/Active Directory/DOMAINNAME/"" -read /Users/USERNAME pwdLastSet | awk '{print $NF}')

adPwdLastSetHuman=$(date -j -f ""%s"" ""$((($adPwdLastSetNT/10000000)-11644473600))"" ""+%x %X"")

echo $adPwdLastSetHuman"
Nk9eCRV4,"СПРИНТ № 5 | Стек, очередь, дек | Урок 2: Стек 3/3",chevengur,C++,Wednesday 14th of February 2024 12:17:47 PM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <numeric>
#include <utility>

using namespace std;

template <typename It>
void PrintRange(It range_begin, It range_end) {
    for (auto it = range_begin; it != range_end; ++it) {
        cout << *it << "" ""s;
    }
    cout << endl;
}


template <typename Type>
class SortedSack {
public:
    void Push(const Type& element) {
        if (elements_.empty()) {
            elements_.push_back(element);
            return;
        }
        auto end = elements_.back();
        if (element < elements_.back()) {
            elements_.push_back(element);
        }
        else {
            elements_.pop_back();
            Push(element);
            elements_.push_back(end);
        }
    }
    void Pop() {
        elements_.pop_back();
    }
    const Type& Peek() const {
        return elements_.back();
    }
    Type& Peek() {
        return elements_.back();
    }
    void Print() const {
        PrintRange(elements_.begin(), elements_.end());
    }
    uint64_t Size() const {
        return elements_.size();
    }
    bool IsEmpty() const {
        return elements_.empty();
    }
private:
    vector<Type> elements_;
};

int main() {
    setlocale(0, """");
    SortedSack<int> sack;
    vector<int> values(5);
    // заполняем вектор для тестирования нашего класса
    iota(values.begin(), values.end(), 1);
    // перемешиваем значения
    random_device rd;
    mt19937 g(rd());
    shuffle(values.begin(), values.end(), g);

    // заполняем класс и проверяем, что сортировка сохраняется после каждой вставки
    for (int i = 0; i < 5; ++i) {
        cout << ""Вставляемый элемент = ""s << values[i] << endl;
        sack.Push(values[i]);
        sack.Print();
    }
}"
zSrpf9p6,Treasure Hunt,Osiris1002,Python,Wednesday 14th of February 2024 12:16:51 PM CDT,"treasure_chest = input().split(""|"")
command_data = input()

while command_data != 'Yohoho!':
    command, *data = [int(x) if x.isdigit() else x for x in command_data.split()]

    if command == ""Loot"":
        for item in data:
            if item not in treasure_chest:
                treasure_chest.insert(0, item)
    elif command == ""Drop"":
        index = data[0]
        if index in range(len(treasure_chest)):
            item = treasure_chest.pop(index)
            treasure_chest.append(item)


    elif command == ""Steal"":
        index = -data[0]
        stolen_items = treasure_chest[index:]
        treasure_chest = treasure_chest[:index]
        print(', '.join(stolen_items))

    command_data = input()

if treasure_chest:
    avr_treasure = sum(len(x) for x in treasure_chest) / len(treasure_chest)
    print(f'Average treasure gain: {avr_treasure:.2f} pirate credits.')

else:
    print('Failed treasure hunt.')"
YnE4ijyK,Untitled,wintttr,C#,Wednesday 14th of February 2024 12:05:34 PM CDT,"namespace Labirint
{
    class Program
    {
        const int N = 11;

        static void PrintLab(char[,] lab)
        {
            for(int x = 0; x < N; x++)
            {
                for (int y = 0; y < N; y++)
                {
                    Console.Write(lab[x, y]);
                }
                Console.WriteLine();
            }

            Console.WriteLine();
        }

        static void Go(char[,] lab, int x, int y)
        {
            if (lab[x, y] == ' ')
            {
                lab[x, y] = '+';

                if (x == 0 || x == (N - 1) || y == 0 || y == (N - 1))
                {
                    PrintLab(lab);
                }
                else
                {
                    Go(lab, x + 1, y);
                    Go(lab, x, y + 1);
                    Go(lab, x - 1, y);
                    Go(lab, x, y - 1);
                }

                lab[x, y] = ' ';
            }
        }

        static void Main(string[] args)
        {
            char[,] labirint = new char[N, N];

            for(int i = 0; i < N; i++)
            {
                string s = Console.ReadLine();

                if(s.Length == N && s.All(c => c == ' ' || c == 'M'))
                {
                    for(int j = 0; j < N; j++)
                    {
                        labirint[i, j] = s[j];
                    }
                }
                else
                {
                    Console.WriteLine(""Што-та пашло нитак"");
                    Environment.Exit(0);
                }
            }

            Console.WriteLine();
            Go(labirint, N / 2, N / 2);
        }
    }
}"
ixKz2Q6J,MergeMethod,Shamba,C,Wednesday 14th of February 2024 11:53:20 AM CDT,"#include<stdio.h>
#include<stdlib.h>

struct node {
    int key;
    struct node* next;
};

struct node* createNode(int key) {
    struct node* Node = (struct node*) malloc(sizeof(struct node));

    Node -> key = key;
    Node -> next = NULL;

    return Node;
}

struct node* Merge(struct node* ListA, struct node* ListB) {
    struct node* resHead;
    struct node* resIterator;

    struct node* iteratorA = ListA;
    struct node* iteratorB = ListB;

    int isHeadAssigned = 0;

    while(1) {
        // Check which element at the pointer of each sublist is minimum
        // Move the lesser element to the result list and shift that list's pointer to the next element
        if(iteratorA -> key < iteratorB -> key) {
            struct node* tempTerm = createNode(iteratorA -> key);

            if(!isHeadAssigned) {
                resHead = tempTerm;
                resIterator = tempTerm;
                isHeadAssigned = 1;
            }
            else {
                resIterator -> next = tempTerm;
                resIterator = tempTerm;
            }

            // Change pointer of the list whose element is already added to the merge list
            iteratorA = iteratorA -> next;
        }
        else {
            struct node* tempTerm = createNode(iteratorB -> key);

            if(!isHeadAssigned) {
                resHead = tempTerm;
                resIterator = tempTerm;
                isHeadAssigned = 1;
            }
            else {
                resIterator -> next = tempTerm;
                resIterator = tempTerm;
            }

            iteratorB = iteratorB -> next;
        }

        // If the iteration of a sublist is over
        // Copy the rest of the elements from the other sublist to the merged list
        if(iteratorA == NULL) {
            while(iteratorB != NULL) {
                struct node* tempTerm = createNode(iteratorB -> key);
                resIterator -> next = tempTerm;
                resIterator = tempTerm;
                iteratorB = iteratorB -> next;
            }

            break;
        }
        else if(iteratorB == NULL) {
            while(iteratorA != NULL) {
                struct node* tempTerm = createNode(iteratorA -> key);
                resIterator -> next = tempTerm;
                resIterator = tempTerm;
                iteratorA = iteratorA -> next;
            }

            break;
        }
    }

    return resHead;
}

void displayList(struct node* Node) {
    while(1) {
        printf(""%d"", Node -> key);

        if(Node -> next == NULL) {
            break;
        }

        printf(""->"");
        Node = Node -> next;
    }
}

int main() {

    // List 1
    struct node* HeadA;
    struct node* iterator;

    struct node* tempTerm = createNode(1);
    HeadA = tempTerm;
    iterator = tempTerm;
    tempTerm = createNode(5);
    iterator -> next = tempTerm;
    iterator = tempTerm;   
    tempTerm = createNode(10);
    iterator -> next = tempTerm;
    iterator = tempTerm;  
    tempTerm = createNode(12);
    iterator -> next = tempTerm;

    // List 2
    struct node* HeadB;

    tempTerm = createNode(6);
    HeadB = tempTerm;
    tempTerm = createNode(9);
    HeadB -> next = tempTerm;

    // display 2 lists
    printf(""List 1 : "");
    displayList(HeadA);
    printf(""\nList 2 : "");
    displayList(HeadB);

    // Merge
    struct node* MergedList = Merge(HeadA, HeadB);
    printf(""\nMerged List: "");
    displayList(MergedList);

    return 0;
}"
0QbiXs6h,Untitled,EnGold,Kotlin,Wednesday 14th of February 2024 11:51:13 AM CDT,"@Composable
fun ContentList(modifier: Modifier) {
    //List of Users
    val list = listOf(
        ProfileData(""Person"", """", null, null, null, null),
        ProfileData(""Person 2"", """", null, null, null, null),
        ProfileData(""Person 3"", """", null, null, null, null),
        ProfileData(""Person 4"", """", null, null, null, null),
        ProfileData(""Person 5"", """", null, null, null, null),
    )
    //current user
    var current by remember {
        mutableIntStateOf(0)
    }
    //animate state
    var animState by remember { mutableStateOf(ProfileAnim.Enter) }

    //animate
    val transition = updateTransition(animState, label = ""offset"")
    val offset by transition.animateIntOffset(transitionSpec = {
        when {
            ProfileAnim.Down isTransitioningTo ProfileAnim.Default ->
                tween(durationMillis = 200)

            ProfileAnim.Up isTransitioningTo ProfileAnim.Default ->
                tween(durationMillis = 200)
            else ->
                tween(durationMillis = 500)
        }
    }, label = ""offset"") { state ->
        when (state) {
            ProfileAnim.Default -> IntOffset(-1500, 0)
            ProfileAnim.Enter -> IntOffset(0, 0)
            ProfileAnim.Down -> IntOffset(0, 2000)
            ProfileAnim.Up -> IntOffset(0, -2000)
        }
    }
    //is animation running
    val isAnimationEnded = transition.isRunning
    Log.d(""LOGG"", animState.name)

    LaunchedEffect(isAnimationEnded) {
        if ((animState == ProfileAnim.Up || animState == ProfileAnim.Down ) && !isAnimationEnded) {
            animState = ProfileAnim.Default
        }
        if(animState == ProfileAnim.Default && !isAnimationEnded){
            current++
            animState = ProfileAnim.Enter
        }
    }
    //checking direction of gesture
    var dragDirection by remember { mutableFloatStateOf(0f) }
    Box(modifier = modifier
        .background(color = Color.Gray)
        .pointerInput(Unit) {
            detectVerticalDragGestures(onVerticalDrag = { _, dragAmount ->
                dragDirection = dragAmount
            }, onDragEnd = {
                if (dragDirection < 0) {
                    animState = ProfileAnim.Up
                } else if (dragDirection > 0) {
                    animState = ProfileAnim.Down
                }
            })
        }
        .background(Color.Blue)
    ) {
        Box(modifier = Modifier
            .fillMaxSize()
            .offset {
                offset
            }, contentAlignment = Alignment.Center) {
            UserProfile(profileData = list[current])
        }
    }
}

enum class ProfileAnim {
    Default,
    Enter,
    Up,
    Down
}"
6pQJf6Hu,Exoline,nobodyscriptsrblx,Lua,Wednesday 14th of February 2024 11:35:58 AM CDT,"{""test"" = 1234}"
qzRWU732,GetReferencedCells,Ivanatom,C++,Wednesday 14th of February 2024 10:54:35 AM CDT,"void TestCellReferences() {
    auto sheet = CreateSheet();
/*    sheet->SetCell(""A1""_pos, ""1"");
   sheet->SetCell(""A2""_pos, ""=A1"");
   sheet->SetCell(""B2""_pos, ""=A1"");

    ASSERT(sheet->GetCell(""A1""_pos)->GetReferencedCells().empty());
    ASSERT_EQUAL(sheet->GetCell(""A2""_pos)->GetReferencedCells(), std::vector{""A1""_pos});
    ASSERT_EQUAL(sheet->GetCell(""B2""_pos)->GetReferencedCells(), std::vector{""A1""_pos});
*/
    // Ссылка на пустую ячейку
    sheet->SetCell(""B2""_pos, ""=B1"");
    auto a = sheet->GetCell(""B1""_pos);
    sheet->GetCell(""B1""_pos)->GetReferencedCells(); //здесь программа вылетает
    ASSERT(sheet->GetCell(""B1""_pos)->GetReferencedCells().empty());
    ASSERT_EQUAL(sheet->GetCell(""B2""_pos)->GetReferencedCells(), std::vector{""B1""_pos});

    sheet->SetCell(""A2""_pos, """");
    ASSERT(sheet->GetCell(""A1""_pos)->GetReferencedCells().empty());
    ASSERT(sheet->GetCell(""A2""_pos)->GetReferencedCells().empty());

    // Ссылка на ячейку за пределами таблицы
    sheet->SetCell(""B1""_pos, ""=C3"");
    ASSERT_EQUAL(sheet->GetCell(""B1""_pos)->GetReferencedCells(), std::vector{""C3""_pos});
}




CellInterface* Sheet::GetCell(Position pos) {
    if (pos.IsValid()) {

        if (pos.row < int(std::size(cells_)) && pos.col < int(std::size(cells_[pos.row]))) {

            if(cells_[pos.row][pos.col] == nullptr){
                return nullptr;
            }
            std::string str = cells_[pos.row][pos.col].get()->GetText();

            if (str == """") {
                return nullptr; //здесь вывод настоящей функции в случае, указанном выше

            } else {
                return cells_[pos.row][pos.col].get();
            }

        } else {
            return nullptr;
        }

    } else {
        throw InvalidPositionException(""invalid cell position. getcell"");
    }
}

////////////GetReferencedCells////////

std::vector<Position> Cell::FormulaImpl::GetReferencedCells() const {
    if (formula_ptr_ == nullptr){
        return std::vector<Position>{};
    }
    return formula_ptr_->GetReferencedCells();
}


std::vector<Position> Cell::Impl::GetReferencedCells() const {
    return std::vector<Position>{};
}

std::vector<Position> Cell::GetReferencedCells() const {
    if (impl_ == nullptr){
        return std::vector<Position>{};
    }
    return impl_->GetReferencedCells();
}

    std::vector<Position> GetReferencedCells() const override {
        std::vector<Position> cells;
        if(ast_.GetCells().empty()){
            return cells;
        }
        for (const auto& cell : ast_.GetCells()) {

            if (cell.IsValid()) {
                bool repeat = std::find(cells.begin(), cells.end(), cell) != cells.end();
                if(!repeat){
                   cells.push_back(cell);
                }
            }
        }
        return cells;
    }"
4kMLLGPT,Nigerian scammers [14-2-3/2024],bombaires,AIMMS,Wednesday 14th of February 2024 10:50:45 AM CDT,"<a href=""mailto:associatedchamber@gmail.com"">associatedchamber@gmail.com</a>
<a href=""mailto:as.sociat.edcha.m.be.r@gmail.com"">as.sociat.edcha.m.be.r@gmail.com</a>
<a href=""mailto:as.so.cia.ted.c.h.amb.e.r@gmail.com"">as.so.cia.ted.c.h.amb.e.r@gmail.com</a>
<a href=""mailto:as.s.oci.at.edch.am.be.r@gmail.com"">as.s.oci.at.edch.am.be.r@gmail.com</a>
<a href=""mailto:associ.atedc.h.amb.er@gmail.com"">associ.atedc.h.amb.er@gmail.com</a>
<a href=""mailto:a.s.s.oc.i.ated.c.hambe.r@gmail.com"">a.s.s.oc.i.ated.c.hambe.r@gmail.com</a>
<a href=""mailto:as.so.c.ia.t.edch.am.b.e.r@gmail.com"">as.so.c.ia.t.edch.am.b.e.r@gmail.com</a>
<a href=""mailto:a.s.s.o.c.i.atedcham.b.e.r@gmail.com"">a.s.s.o.c.i.atedcham.b.e.r@gmail.com</a>
<a href=""mailto:a.s.sociat.ed.c.h.amber@gmail.com"">a.s.sociat.ed.c.h.amber@gmail.com</a>
<a href=""mailto:ass.oc.i.ate.d.c.h.amb.er@gmail.com"">ass.oc.i.ate.d.c.h.amb.er@gmail.com</a>
<a href=""mailto:as.s.o.c.i.ated.c.ha.m.be.r@gmail.com"">as.s.o.c.i.ated.c.ha.m.be.r@gmail.com</a>
<a href=""mailto:associatedc.h.a.m.be.r@gmail.com"">associatedc.h.a.m.be.r@gmail.com</a>
<a href=""mailto:asso.c.ia.t.e.dc.ha.m.be.r@gmail.com"">asso.c.ia.t.e.dc.ha.m.be.r@gmail.com</a>
<a href=""mailto:a.ss.oci.atedc.ham.ber@gmail.com"">a.ss.oci.atedc.ham.ber@gmail.com</a>
<a href=""mailto:a.ssociat.e.dc.h.a.mbe.r@gmail.com"">a.ssociat.e.dc.h.a.mbe.r@gmail.com</a>
<a href=""mailto:a.s.so.c.iate.dc.h.a.mber@gmail.com"">a.s.so.c.iate.dc.h.a.mber@gmail.com</a>
<a href=""mailto:a.s.s.ocia.t.edch.a.mber@gmail.com"">a.s.s.ocia.t.edch.a.mber@gmail.com</a>
<a href=""mailto:a.ss.o.c.i.a.ted.ch.a.mb.e.r@gmail.com"">a.ss.o.c.i.a.ted.ch.a.mb.e.r@gmail.com</a>
<a href=""mailto:as.s.o.c.ia.t.ed.ch.amb.er@gmail.com"">as.s.o.c.ia.t.ed.ch.amb.er@gmail.com</a>
<a href=""mailto:a.s.s.o.ciated.ch.amb.e.r@gmail.com"">a.s.s.o.ciated.ch.amb.e.r@gmail.com</a>
<a href=""mailto:as.soc.iatedch.am.b.e.r@gmail.com"">as.soc.iatedch.am.b.e.r@gmail.com</a>
<a href=""mailto:as.s.o.ci.a.t.ed.c.h.am.ber@gmail.com"">as.s.o.ci.a.t.ed.c.h.am.ber@gmail.com</a>
<a href=""mailto:as.soci.at.e.dcha.mb.e.r@gmail.com"">as.soci.at.e.dcha.mb.e.r@gmail.com</a>
<a href=""mailto:a.ssocia.t.ed.cham.be.r@gmail.com"">a.ssocia.t.ed.cham.be.r@gmail.com</a>
<a href=""mailto:a.ss.o.c.ia.te.d.c.ha.m.ber@gmail.com"">a.ss.o.c.ia.te.d.c.ha.m.ber@gmail.com</a>
<a href=""mailto:as.s.oc.ia.ted.ch.a.mb.e.r@gmail.com"">as.s.oc.ia.ted.ch.a.mb.e.r@gmail.com</a>
<a href=""mailto:assoc.ia.t.edc.h.am.ber@gmail.com"">assoc.ia.t.edc.h.am.ber@gmail.com</a>
<a href=""mailto:a.ss.o.cia.t.ed.cha.m.b.er@gmail.com"">a.ss.o.cia.t.ed.cha.m.b.er@gmail.com</a>
<a href=""mailto:a.s.s.o.c.i.ate.dch.amb.er@gmail.com"">a.s.s.o.c.i.ate.dch.amb.er@gmail.com</a>
<a href=""mailto:a.s.s.o.c.iat.e.dchamber@gmail.com"">a.s.s.o.c.iat.e.dchamber@gmail.com</a>
<a href=""mailto:a.sso.ci.a.ted.cham.b.er@gmail.com"">a.sso.ci.a.ted.cham.b.er@gmail.com</a>
<a href=""mailto:as.s.o.c.i.a.ted.c.hamb.e.r@gmail.com"">as.s.o.c.i.a.ted.c.hamb.e.r@gmail.com</a>
<a href=""mailto:asso.c.ia.t.e.d.c.ha.m.ber@gmail.com"">asso.c.ia.t.e.d.c.ha.m.ber@gmail.com</a>
<a href=""mailto:a.sso.ci.a.ted.c.ham.b.er@gmail.com"">a.sso.ci.a.ted.c.ham.b.er@gmail.com</a>
<a href=""mailto:assoc.iatedc.ha.mbe.r@gmail.com"">assoc.iatedc.ha.mbe.r@gmail.com</a>
<a href=""mailto:a.s.s.oc.iate.dc.ha.m.b.er@gmail.com"">a.s.s.oc.iate.dc.ha.m.b.er@gmail.com</a>
<a href=""mailto:a.s.so.c.i.a.t.e.dch.a.mb.e.r@gmail.com"">a.s.so.c.i.a.t.e.dch.a.mb.e.r@gmail.com</a>
<a href=""mailto:a.s.so.c.iat.ed.ch.a.mb.er@gmail.com"">a.s.so.c.iat.ed.ch.a.mb.er@gmail.com</a>
<a href=""mailto:as.soc.ia.t.e.dc.h.amber@gmail.com"">as.soc.ia.t.e.dc.h.amber@gmail.com</a>
<a href=""mailto:as.s.o.c.iat.ed.cha.m.b.e.r@gmail.com"">as.s.o.c.iat.ed.cha.m.b.e.r@gmail.com</a>
<a href=""mailto:a.ss.oci.a.te.d.c.h.amb.er@gmail.com"">a.ss.oci.a.te.d.c.h.amb.er@gmail.com</a>
<a href=""mailto:associate.dch.ambe.r@gmail.com"">associate.dch.ambe.r@gmail.com</a>
<a href=""mailto:a.s.so.ci.atedcha.mbe.r@gmail.com"">a.s.so.ci.atedcha.mbe.r@gmail.com</a>
<a href=""mailto:as.s.ocia.te.dch.ambe.r@gmail.com"">as.s.ocia.te.dch.ambe.r@gmail.com</a>
<a href=""mailto:a.sso.ci.a.t.e.d.cha.mb.e.r@gmail.com"">a.sso.ci.a.t.e.d.cha.mb.e.r@gmail.com</a>
<a href=""mailto:as.so.c.i.at.ed.ch.am.b.er@gmail.com"">as.so.c.i.at.ed.ch.am.b.er@gmail.com</a>
<a href=""mailto:a.ss.ociat.edc.ha.m.ber@gmail.com"">a.ss.ociat.edc.ha.m.ber@gmail.com</a>
<a href=""mailto:assoc.iate.d.ch.a.m.b.er@gmail.com"">assoc.iate.d.ch.a.m.b.er@gmail.com</a>
<a href=""mailto:a.s.s.o.cia.t.edcham.b.e.r@gmail.com"">a.s.s.o.cia.t.edcham.b.e.r@gmail.com</a>
<a href=""mailto:a.s.so.ciat.edc.ha.mb.er@gmail.com"">a.s.so.ciat.edc.ha.mb.er@gmail.com</a>
<a href=""mailto:ass.ocia.t.edch.amb.e.r@gmail.com"">ass.ocia.t.edch.amb.e.r@gmail.com</a>
<a href=""mailto:as.s.o.c.i.a.ted.cham.b.e.r@gmail.com"">as.s.o.c.i.a.ted.cham.b.e.r@gmail.com</a>
<a href=""mailto:asso.c.i.a.t.ed.ch.amber@gmail.com"">asso.c.i.a.t.ed.ch.amber@gmail.com</a>
<a href=""mailto:asso.ci.ate.d.ch.a.mb.e.r@gmail.com"">asso.ci.ate.d.ch.a.mb.e.r@gmail.com</a>
<a href=""mailto:a.ss.o.ci.a.ted.ch.am.ber@gmail.com"">a.ss.o.ci.a.ted.ch.am.ber@gmail.com</a>
<a href=""mailto:associ.at.edc.h.a.m.b.e.r@gmail.com"">associ.at.edc.h.a.m.b.e.r@gmail.com</a>
<a href=""mailto:as.soc.i.a.t.e.d.c.ham.be.r@gmail.com"">as.soc.i.a.t.e.d.c.ham.be.r@gmail.com</a>
<a href=""mailto:as.soc.ia.te.dch.ambe.r@gmail.com"">as.soc.ia.te.dch.ambe.r@gmail.com</a>
<a href=""mailto:a.s.s.oci.a.t.edc.hambe.r@gmail.com"">a.s.s.oci.a.t.edc.hambe.r@gmail.com</a>
<a href=""mailto:asso.ci.a.t.edc.ha.mb.e.r@gmail.com"">asso.ci.a.t.edc.ha.mb.e.r@gmail.com</a>
<a href=""mailto:asso.c.iat.e.d.cha.mbe.r@gmail.com"">asso.c.iat.e.d.cha.mbe.r@gmail.com</a>
<a href=""mailto:a.ss.o.c.iat.ed.ch.am.be.r@gmail.com"">a.ss.o.c.iat.ed.ch.am.be.r@gmail.com</a>
<a href=""mailto:a.sso.c.i.a.tedcham.b.er@gmail.com"">a.sso.c.i.a.tedcham.b.er@gmail.com</a>
<a href=""mailto:a.ss.o.cia.t.e.d.ch.a.m.b.er@gmail.com"">a.ss.o.cia.t.e.d.ch.a.m.b.er@gmail.com</a>
<a href=""mailto:a.ss.oc.iat.edcha.mb.e.r@gmail.com"">a.ss.oc.iat.edcha.mb.e.r@gmail.com</a>
<a href=""mailto:ass.oc.i.a.te.dc.h.a.mber@gmail.com"">ass.oc.i.a.te.dc.h.a.mber@gmail.com</a>
<a href=""mailto:a.ss.o.c.i.a.tedch.a.mb.e.r@gmail.com"">a.ss.o.c.i.a.tedch.a.mb.e.r@gmail.com</a>
<a href=""mailto:ass.o.ci.a.t.ed.cham.ber@gmail.com"">ass.o.ci.a.t.ed.cham.ber@gmail.com</a>
<a href=""mailto:ass.oc.ia.te.d.ch.a.mbe.r@gmail.com"">ass.oc.ia.te.d.ch.a.mbe.r@gmail.com</a>
<a href=""mailto:a.ss.o.cia.ted.c.ha.m.b.er@gmail.com"">a.ss.o.cia.ted.c.ha.m.b.er@gmail.com</a>
<a href=""mailto:a.ss.ociat.ed.c.h.ambe.r@gmail.com"">a.ss.ociat.ed.c.h.ambe.r@gmail.com</a>
<a href=""mailto:a.ss.o.ci.a.t.e.dchamber@gmail.com"">a.ss.o.ci.a.t.e.dchamber@gmail.com</a>
<a href=""mailto:a.ssoc.i.at.e.d.c.h.am.b.er@gmail.com"">a.ssoc.i.at.e.d.c.h.am.b.er@gmail.com</a>
<a href=""mailto:ass.o.ciated.ch.am.be.r@gmail.com"">ass.o.ciated.ch.am.be.r@gmail.com</a>
<a href=""mailto:a.s.so.c.iat.edcha.m.b.e.r@gmail.com"">a.s.so.c.iat.edcha.m.b.e.r@gmail.com</a>
<a href=""mailto:a.s.soc.i.a.ted.c.h.amber@gmail.com"">a.s.soc.i.a.ted.c.h.amber@gmail.com</a>
<a href=""mailto:ass.oc.i.at.e.d.c.ham.ber@gmail.com"">ass.oc.i.at.e.d.c.ham.ber@gmail.com</a>
<a href=""mailto:a.ss.ociate.dc.h.a.m.b.er@gmail.com"">a.ss.ociate.dc.h.a.m.b.er@gmail.com</a>
<a href=""mailto:a.sso.c.i.a.te.d.c.h.amber@gmail.com"">a.sso.c.i.a.te.d.c.h.amber@gmail.com</a>
<a href=""mailto:as.s.ocia.t.e.d.c.h.a.m.b.er@gmail.com"">as.s.ocia.t.e.d.c.h.a.m.b.er@gmail.com</a>
<a href=""mailto:a.s.so.c.ia.t.e.dch.a.m.ber@gmail.com"">a.s.so.c.ia.t.e.dch.a.m.ber@gmail.com</a>
<a href=""mailto:a.s.s.oci.a.t.ed.cha.mber@gmail.com"">a.s.s.oci.a.t.ed.cha.mber@gmail.com</a>
<a href=""mailto:a.s.so.ci.a.t.ed.c.ha.mber@gmail.com"">a.s.so.ci.a.t.ed.c.ha.mber@gmail.com</a>
<a href=""mailto:as.soci.a.te.dc.h.am.b.er@gmail.com"">as.soci.a.te.dc.h.am.b.er@gmail.com</a>
<a href=""mailto:a.s.soc.i.ate.d.c.ha.m.b.e.r@gmail.com"">a.s.soc.i.ate.d.c.ha.m.b.e.r@gmail.com</a>
<a href=""mailto:a.s.so.c.i.ate.d.c.ha.m.b.e.r@gmail.com"">a.s.so.c.i.ate.d.c.ha.m.b.e.r@gmail.com</a>
<a href=""mailto:a.s.soc.ia.t.e.d.c.h.a.mbe.r@gmail.com"">a.s.soc.ia.t.e.d.c.h.a.mbe.r@gmail.com</a>
<a href=""mailto:as.s.oc.ia.te.d.c.ha.m.be.r@gmail.com"">as.s.oc.ia.te.d.c.ha.m.be.r@gmail.com</a>
<a href=""mailto:a.ssoci.a.ted.c.ha.m.b.e.r@gmail.com"">a.ssoci.a.ted.c.ha.m.b.e.r@gmail.com</a>
<a href=""mailto:a.s.so.ci.at.edch.am.b.er@gmail.com"">a.s.so.ci.at.edch.am.b.er@gmail.com</a>
<a href=""mailto:as.s.ocia.tedchamb.e.r@gmail.com"">as.s.ocia.tedchamb.e.r@gmail.com</a>
<a href=""mailto:as.s.o.ci.a.tedc.h.am.b.e.r@gmail.com"">as.s.o.ci.a.tedc.h.am.b.e.r@gmail.com</a>
<a href=""mailto:ass.oci.a.te.dc.h.am.b.e.r@gmail.com"">ass.oci.a.te.dc.h.am.b.e.r@gmail.com</a>
<a href=""mailto:ass.oci.a.te.d.ch.ambe.r@gmail.com"">ass.oci.a.te.d.ch.ambe.r@gmail.com</a>
<a href=""mailto:a.s.so.c.i.ate.d.ch.am.be.r@gmail.com"">a.s.so.c.i.ate.d.ch.am.be.r@gmail.com</a>
<a href=""mailto:a.sso.c.i.a.t.ed.cha.mb.e.r@gmail.com"">a.sso.c.i.a.t.ed.cha.mb.e.r@gmail.com</a>
<a href=""mailto:as.so.c.ia.te.dc.h.amb.e.r@gmail.com"">as.so.c.ia.te.dc.h.amb.e.r@gmail.com</a>
<a href=""mailto:a.ss.o.c.iat.edc.h.a.m.ber@gmail.com"">a.ss.o.c.iat.edc.h.a.m.ber@gmail.com</a>
<a href=""mailto:as.soc.iat.e.dch.am.ber@gmail.com"">as.soc.iat.e.dch.am.ber@gmail.com</a>
<a href=""mailto:as.soc.i.ated.c.ha.mber@gmail.com"">as.soc.i.ated.c.ha.mber@gmail.com</a>
<a href=""mailto:a.ss.o.ciat.edc.ha.m.ber@gmail.com"">a.ss.o.ciat.edc.ha.m.ber@gmail.com</a>
<a href=""mailto:a.ss.o.c.i.at.ed.cham.ber@gmail.com"">a.ss.o.c.i.at.ed.cham.ber@gmail.com</a>
<a href=""mailto:ass.ocia.te.dc.hamber@gmail.com"">ass.ocia.te.dc.hamber@gmail.com</a>
<a href=""mailto:as.s.o.c.i.a.te.d.ch.a.mb.e.r@gmail.com"">as.s.o.c.i.a.te.d.ch.a.mb.e.r@gmail.com</a>
<a href=""mailto:as.s.oc.ia.t.ed.cha.mb.e.r@gmail.com"">as.s.oc.ia.t.ed.cha.mb.e.r@gmail.com</a>
<a href=""mailto:as.s.o.ci.at.ed.ch.amb.er@gmail.com"">as.s.o.ci.at.ed.ch.amb.er@gmail.com</a>
<a href=""mailto:as.so.c.ia.t.edc.h.amb.e.r@gmail.com"">as.so.c.ia.t.edc.h.amb.e.r@gmail.com</a>
<a href=""mailto:ass.o.ci.at.edcha.mb.e.r@gmail.com"">ass.o.ci.at.edcha.mb.e.r@gmail.com</a>
<a href=""mailto:a.ssoc.i.a.tedc.h.amb.e.r@gmail.com"">a.ssoc.i.a.tedc.h.amb.e.r@gmail.com</a>
<a href=""mailto:a.ss.oci.ated.c.ha.mb.e.r@gmail.com"">a.ss.oci.ated.c.ha.mb.e.r@gmail.com</a>
<a href=""mailto:a.ss.o.c.i.a.te.dcha.mbe.r@gmail.com"">a.ss.o.c.i.a.te.dcha.mbe.r@gmail.com</a>
<a href=""mailto:as.s.o.c.ia.te.dc.h.am.b.e.r@gmail.com"">as.s.o.c.ia.te.dc.h.am.b.e.r@gmail.com</a>
<a href=""mailto:as.soc.iat.ed.cha.m.be.r@gmail.com"">as.soc.iat.ed.cha.m.be.r@gmail.com</a>
<a href=""mailto:as.soc.ia.t.e.d.c.ham.be.r@gmail.com"">as.soc.ia.t.e.d.c.ham.be.r@gmail.com</a>
<a href=""mailto:a.s.s.oc.i.a.te.d.ch.ambe.r@gmail.com"">a.s.s.oc.i.a.te.d.ch.ambe.r@gmail.com</a>
<a href=""mailto:a.s.so.c.ia.t.e.dch.a.m.b.e.r@gmail.com"">a.s.so.c.ia.t.e.dch.a.m.b.e.r@gmail.com</a>
<a href=""mailto:a.ssociat.edch.am.ber@gmail.com"">a.ssociat.edch.am.ber@gmail.com</a>
<a href=""mailto:a.sso.ciat.e.dch.ambe.r@gmail.com"">a.sso.ciat.e.dch.ambe.r@gmail.com</a>
<a href=""mailto:ass.o.ci.ate.d.ch.a.mbe.r@gmail.com"">ass.o.ci.ate.d.ch.a.mbe.r@gmail.com</a>
<a href=""mailto:a.ssocia.te.d.c.ham.ber@gmail.com"">a.ssocia.te.d.c.ham.ber@gmail.com</a>
<a href=""mailto:as.s.o.c.iat.e.dch.am.be.r@gmail.com"">as.s.o.c.iat.e.dch.am.be.r@gmail.com</a>
<a href=""mailto:asso.c.i.a.t.edc.h.ambe.r@gmail.com"">asso.c.i.a.t.edc.h.ambe.r@gmail.com</a>
<a href=""mailto:as.s.oc.i.at.ed.cha.m.b.er@gmail.com"">as.s.oc.i.at.ed.cha.m.b.er@gmail.com</a>
<a href=""mailto:a.ssoc.i.at.edc.ha.m.be.r@gmail.com"">a.ssoc.i.at.edc.ha.m.be.r@gmail.com</a>
<a href=""mailto:a.sso.c.i.a.te.d.c.h.a.mbe.r@gmail.com"">a.sso.c.i.a.te.d.c.h.a.mbe.r@gmail.com</a>
<a href=""mailto:ass.ocia.t.e.d.cha.mbe.r@gmail.com"">ass.ocia.t.e.d.cha.mbe.r@gmail.com</a>
<a href=""mailto:a.s.soc.ia.t.ed.c.hamber@gmail.com"">a.s.soc.ia.t.ed.c.hamber@gmail.com</a>
<a href=""mailto:a.s.s.o.ciat.e.d.c.h.a.m.ber@gmail.com"">a.s.s.o.ciat.e.d.c.h.a.m.ber@gmail.com</a>
<a href=""mailto:a.ssociat.e.d.cha.mb.e.r@gmail.com"">a.ssociat.e.d.cha.mb.e.r@gmail.com</a>
<a href=""mailto:ass.ociatedcha.m.b.e.r@gmail.com"">ass.ociatedcha.m.b.e.r@gmail.com</a>
<a href=""mailto:a.s.s.o.ci.ated.cha.m.b.er@gmail.com"">a.s.s.o.ci.ated.cha.m.b.er@gmail.com</a>
<a href=""mailto:a.s.s.ociat.e.d.ch.am.b.e.r@gmail.com"">a.s.s.ociat.e.d.ch.am.b.e.r@gmail.com</a>
<a href=""mailto:asso.c.iate.dc.h.a.mbe.r@gmail.com"">asso.c.iate.dc.h.a.mbe.r@gmail.com</a>
<a href=""mailto:as.s.oc.iatedc.ha.mb.er@gmail.com"">as.s.oc.iatedc.ha.mb.er@gmail.com</a>
<a href=""mailto:a.s.s.oc.i.at.e.dc.ham.ber@gmail.com"">a.s.s.oc.i.at.e.dc.ham.ber@gmail.com</a>
<a href=""mailto:a.sso.c.i.at.e.d.ch.am.b.er@gmail.com"">a.sso.c.i.at.e.d.ch.am.b.er@gmail.com</a>
<a href=""mailto:ass.oc.iated.chamber@gmail.com"">ass.oc.iated.chamber@gmail.com</a>
<a href=""mailto:a.ss.ociat.e.dc.ham.ber@gmail.com"">a.ss.ociat.e.dc.ham.ber@gmail.com</a>
<a href=""mailto:asso.c.i.at.ed.chamber@gmail.com"">asso.c.i.at.ed.chamber@gmail.com</a>
<a href=""mailto:a.s.soc.i.a.t.ed.c.h.a.m.b.er@gmail.com"">a.s.soc.i.a.t.ed.c.h.a.m.b.er@gmail.com</a>
<a href=""mailto:a.ssoc.ia.te.d.c.ha.m.b.er@gmail.com"">a.ssoc.ia.te.d.c.ha.m.b.er@gmail.com</a>
<a href=""mailto:a.s.so.ci.at.e.dc.h.ambe.r@gmail.com"">a.s.so.ci.at.e.dc.h.ambe.r@gmail.com</a>
<a href=""mailto:ass.o.c.ia.t.ed.ch.a.mber@gmail.com"">ass.o.c.ia.t.ed.ch.a.mber@gmail.com</a>
<a href=""mailto:as.s.o.c.i.a.t.edch.amb.e.r@gmail.com"">as.s.o.c.i.a.t.edch.amb.e.r@gmail.com</a>
<a href=""mailto:assoc.i.at.edc.hambe.r@gmail.com"">assoc.i.at.edc.hambe.r@gmail.com</a>
<a href=""mailto:ass.oci.at.e.dc.hamb.er@gmail.com"">ass.oci.at.e.dc.hamb.er@gmail.com</a>
<a href=""mailto:a.s.s.oc.ia.t.edc.h.am.b.e.r@gmail.com"">a.s.s.oc.ia.t.edc.h.am.b.e.r@gmail.com</a>
<a href=""mailto:a.s.so.ci.a.te.d.ch.a.m.b.er@gmail.com"">a.s.so.ci.a.te.d.ch.a.m.b.er@gmail.com</a>
<a href=""mailto:associa.t.e.d.cha.mbe.r@gmail.com"">associa.t.e.d.cha.mbe.r@gmail.com</a>
<a href=""mailto:a.s.s.o.c.ia.t.e.d.cha.m.b.e.r@gmail.com"">a.s.s.o.c.ia.t.e.d.cha.m.b.e.r@gmail.com</a>
<a href=""mailto:a.ss.ociatedc.ha.m.b.er@gmail.com"">a.ss.ociatedc.ha.m.b.er@gmail.com</a>
<a href=""mailto:a.ss.o.ci.a.t.e.dcha.m.b.e.r@gmail.com"">a.ss.o.ci.a.t.e.dcha.m.b.e.r@gmail.com</a>
<a href=""mailto:a.sso.c.iat.edcham.b.er@gmail.com"">a.sso.c.iat.edcham.b.er@gmail.com</a>
<a href=""mailto:a.s.s.o.ciat.e.dch.am.ber@gmail.com"">a.s.s.o.ciat.e.dch.am.ber@gmail.com</a>
<a href=""mailto:a.s.s.ocia.t.ed.c.ha.mbe.r@gmail.com"">a.s.s.ocia.t.ed.c.ha.mbe.r@gmail.com</a>
<a href=""mailto:as.s.oc.i.at.e.d.ch.am.b.er@gmail.com"">as.s.oc.i.at.e.d.ch.am.b.er@gmail.com</a>
<a href=""mailto:asso.c.i.ate.dch.a.mb.e.r@gmail.com"">asso.c.i.ate.dch.a.mb.e.r@gmail.com</a>
<a href=""mailto:a.ss.o.c.ia.t.e.d.ch.a.mber@gmail.com"">a.ss.o.c.ia.t.e.d.ch.a.mber@gmail.com</a>
<a href=""mailto:a.ss.o.ci.at.edc.h.am.be.r@gmail.com"">a.ss.o.ci.at.edc.h.am.be.r@gmail.com</a>
<a href=""mailto:assoc.i.at.e.dchamb.e.r@gmail.com"">assoc.i.at.e.dchamb.e.r@gmail.com</a>
<a href=""mailto:a.ss.oc.iat.edc.hamber@gmail.com"">a.ss.oc.iat.edc.hamber@gmail.com</a>
<a href=""mailto:ass.oc.i.ate.dc.ham.ber@gmail.com"">ass.oc.i.ate.dc.ham.ber@gmail.com</a>
<a href=""mailto:a.ssoc.ia.t.e.d.chamber@gmail.com"">a.ssoc.ia.t.e.d.chamber@gmail.com</a>
<a href=""mailto:a.s.s.o.c.ia.tedc.ham.b.er@gmail.com"">a.s.s.o.c.ia.tedc.ham.b.er@gmail.com</a>
<a href=""mailto:ass.oc.i.a.te.d.c.h.a.m.b.er@gmail.com"">ass.oc.i.a.te.d.c.h.a.m.b.er@gmail.com</a>
<a href=""mailto:a.s.so.cia.t.edc.ham.ber@gmail.com"">a.s.so.cia.t.edc.ham.ber@gmail.com</a>
<a href=""mailto:ass.o.c.iat.e.d.cha.mb.e.r@gmail.com"">ass.o.c.iat.e.d.cha.mb.e.r@gmail.com</a>
<a href=""mailto:ass.oci.atedch.amb.e.r@gmail.com"">ass.oci.atedch.amb.e.r@gmail.com</a>
<a href=""mailto:a.ss.ociate.d.c.h.ambe.r@gmail.com"">a.ss.ociate.d.c.h.ambe.r@gmail.com</a>
<a href=""mailto:assoc.ia.t.e.dch.a.m.ber@gmail.com"">assoc.ia.t.e.dch.a.m.ber@gmail.com</a>
<a href=""mailto:ass.o.c.ia.te.dc.h.am.be.r@gmail.com"">ass.o.c.ia.te.dc.h.am.be.r@gmail.com</a>
<a href=""mailto:a.s.s.oc.i.at.ed.c.ha.mber@gmail.com"">a.s.s.oc.i.at.ed.c.ha.mber@gmail.com</a>
<a href=""mailto:a.ssoc.iated.c.h.a.mber@gmail.com"">a.ssoc.iated.c.h.a.mber@gmail.com</a>
<a href=""mailto:a.s.s.o.ciatedch.a.m.be.r@gmail.com"">a.s.s.o.ciatedch.a.m.be.r@gmail.com</a>
<a href=""mailto:as.s.o.cia.t.e.dc.ham.b.er@gmail.com"">as.s.o.cia.t.e.dc.ham.b.er@gmail.com</a>
<a href=""mailto:a.ss.oc.i.ated.ch.ambe.r@gmail.com"">a.ss.oc.i.ated.ch.ambe.r@gmail.com</a>
<a href=""mailto:a.ssoc.ia.ted.c.h.a.mb.er@gmail.com"">a.ssoc.ia.ted.c.h.a.mb.er@gmail.com</a>
<a href=""mailto:as.s.oc.iat.ed.c.ha.mb.e.r@gmail.com"">as.s.oc.iat.ed.c.ha.mb.e.r@gmail.com</a>
<a href=""mailto:a.sso.ciat.ed.c.h.am.b.e.r@gmail.com"">a.sso.ciat.ed.c.h.am.b.e.r@gmail.com</a>
<a href=""mailto:ass.o.c.ia.tedc.ha.mbe.r@gmail.com"">ass.o.c.ia.tedc.ha.mbe.r@gmail.com</a>
<a href=""mailto:as.s.o.c.i.a.t.e.d.ch.a.m.ber@gmail.com"">as.s.o.c.i.a.t.e.d.ch.a.m.ber@gmail.com</a>
<a href=""mailto:a.ss.o.c.i.at.e.dc.ham.ber@gmail.com"">a.ss.o.c.i.at.e.dc.ham.ber@gmail.com</a>
<a href=""mailto:ass.o.cia.tedc.h.amb.e.r@gmail.com"">ass.o.cia.tedc.h.amb.e.r@gmail.com</a>
<a href=""mailto:as.so.c.i.a.te.dc.h.a.mber@gmail.com"">as.so.c.i.a.te.dc.h.a.mber@gmail.com</a>
<a href=""mailto:a.s.soc.ia.ted.c.ha.mber@gmail.com"">a.s.soc.ia.ted.c.ha.mber@gmail.com</a>
<a href=""mailto:a.s.s.o.c.ia.tedch.amb.er@gmail.com"">a.s.s.o.c.ia.tedch.amb.er@gmail.com</a>
<a href=""mailto:a.s.soc.ia.t.e.d.cha.m.be.r@gmail.com"">a.s.soc.ia.t.e.d.cha.m.be.r@gmail.com</a>
<a href=""mailto:as.s.o.ci.a.t.e.dch.am.be.r@gmail.com"">as.s.o.ci.a.t.e.dch.am.be.r@gmail.com</a>
<a href=""mailto:associa.ted.c.h.a.m.b.er@gmail.com"">associa.ted.c.h.a.m.b.er@gmail.com</a>
<a href=""mailto:a.s.s.o.cia.te.dc.hamb.er@gmail.com"">a.s.s.o.cia.te.dc.hamb.er@gmail.com</a>
<a href=""mailto:a.s.s.o.c.i.a.t.ed.c.h.a.mb.er@gmail.com"">a.s.s.o.c.i.a.t.ed.c.h.a.mb.er@gmail.com</a>
<a href=""mailto:associa.te.dch.a.mber@gmail.com"">associa.te.dch.a.mber@gmail.com</a>
<a href=""mailto:a.ss.oc.ia.ted.c.ham.b.er@gmail.com"">a.ss.oc.ia.ted.c.ham.b.er@gmail.com</a>
<a href=""mailto:a.s.so.c.ia.te.d.ch.am.b.er@gmail.com"">a.s.so.c.ia.te.d.ch.am.b.er@gmail.com</a>
<a href=""mailto:as.so.ci.a.t.e.dcha.mber@gmail.com"">as.so.ci.a.t.e.dcha.mber@gmail.com</a>
<a href=""mailto:as.s.o.ci.a.t.edch.amber@gmail.com"">as.s.o.ci.a.t.edch.amber@gmail.com</a>
<a href=""mailto:a.ss.o.c.ia.t.edch.am.b.er@gmail.com"">a.ss.o.c.ia.t.edch.am.b.er@gmail.com</a>
<a href=""mailto:a.ss.o.cia.t.ed.ch.a.mber@gmail.com"">a.ss.o.cia.t.ed.ch.a.mber@gmail.com</a>
<a href=""mailto:as.so.c.ia.t.e.dc.ha.m.b.er@gmail.com"">as.so.c.ia.t.e.dc.ha.m.b.er@gmail.com</a>
<a href=""mailto:ass.o.cia.t.edc.ha.mb.er@gmail.com"">ass.o.cia.t.edc.ha.mb.er@gmail.com</a>
<a href=""mailto:a.ss.oci.a.t.ed.ch.a.mb.e.r@gmail.com"">a.ss.oci.a.t.ed.ch.a.mb.e.r@gmail.com</a>
<a href=""mailto:govbogghana1@gmail.com"">govbogghana1@gmail.com</a>
<a href=""mailto:go.vb.o.g.gha.na1@gmail.com"">go.vb.o.g.gha.na1@gmail.com</a>
<a href=""mailto:g.ov.bogg.ha.n.a1@gmail.com"">g.ov.bogg.ha.n.a1@gmail.com</a>
<a href=""mailto:g.o.v.b.ogg.ha.n.a1@gmail.com"">g.o.v.b.ogg.ha.n.a1@gmail.com</a>
<a href=""mailto:go.vbo.g.gh.a.n.a.1@gmail.com"">go.vbo.g.gh.a.n.a.1@gmail.com</a>
<a href=""mailto:go.vb.oggh.ana.1@gmail.com"">go.vb.oggh.ana.1@gmail.com</a>
<a href=""mailto:g.o.vbogg.ha.n.a1@gmail.com"">g.o.vbogg.ha.n.a1@gmail.com</a>
<a href=""mailto:g.o.vbo.g.gh.a.na.1@gmail.com"">g.o.vbo.g.gh.a.na.1@gmail.com</a>
<a href=""mailto:gov.bogg.ha.na1@gmail.com"">gov.bogg.ha.na1@gmail.com</a>
<a href=""mailto:g.ov.bo.g.g.h.a.na.1@gmail.com"">g.ov.bo.g.g.h.a.na.1@gmail.com</a>
<a href=""mailto:g.ovb.og.gha.na.1@gmail.com"">g.ovb.og.gha.na.1@gmail.com</a>
<a href=""mailto:go.vbog.g.h.a.na1@gmail.com"">go.vbog.g.h.a.na1@gmail.com</a>
<a href=""mailto:go.v.b.o.g.gh.ana.1@gmail.com"">go.v.b.o.g.gh.ana.1@gmail.com</a>
<a href=""mailto:g.ovbo.g.ghan.a1@gmail.com"">g.ovbo.g.ghan.a1@gmail.com</a>
<a href=""mailto:g.o.v.b.og.ghan.a1@gmail.com"">g.o.v.b.og.ghan.a1@gmail.com</a>
<a href=""mailto:g.o.v.b.og.gha.n.a.1@gmail.com"">g.o.v.b.og.gha.n.a.1@gmail.com</a>
<a href=""mailto:go.vb.o.gg.ha.na.1@gmail.com"">go.vb.o.gg.ha.na.1@gmail.com</a>
<a href=""mailto:gov.b.o.ggh.an.a.1@gmail.com"">gov.b.o.ggh.an.a.1@gmail.com</a>
<a href=""mailto:g.o.vb.ogg.han.a.1@gmail.com"">g.o.vb.ogg.han.a.1@gmail.com</a>
<a href=""mailto:g.ov.bog.g.h.ana.1@gmail.com"">g.ov.bog.g.h.ana.1@gmail.com</a>
<a href=""mailto:g.ov.bo.g.g.h.an.a.1@gmail.com"">g.ov.bo.g.g.h.an.a.1@gmail.com</a>
<a href=""mailto:g.ovb.ogg.hana.1@gmail.com"">g.ovb.ogg.hana.1@gmail.com</a>
<a href=""mailto:go.vb.o.gg.h.a.n.a.1@gmail.com"">go.vb.o.gg.h.a.n.a.1@gmail.com</a>
<a href=""mailto:g.ov.boggha.na.1@gmail.com"">g.ov.boggha.na.1@gmail.com</a>
<a href=""mailto:go.v.b.og.ghana1@gmail.com"">go.v.b.og.ghana1@gmail.com</a>
<a href=""mailto:g.ov.bo.g.gha.n.a1@gmail.com"">g.ov.bo.g.gha.n.a1@gmail.com</a>
<a href=""mailto:govbog.g.ha.na.1@gmail.com"">govbog.g.ha.na.1@gmail.com</a>
<a href=""mailto:g.ov.b.og.g.h.ana1@gmail.com"">g.ov.b.og.g.h.ana1@gmail.com</a>
<a href=""mailto:g.ov.bog.ghan.a1@gmail.com"">g.ov.bog.ghan.a1@gmail.com</a>
<a href=""mailto:g.ov.boggh.ana.1@gmail.com"">g.ov.boggh.ana.1@gmail.com</a>
<a href=""mailto:govb.og.gh.an.a1@gmail.com"">govb.og.gh.an.a1@gmail.com</a>
<a href=""mailto:go.v.b.o.g.gh.an.a1@gmail.com"">go.v.b.o.g.gh.an.a1@gmail.com</a>
<a href=""mailto:g.ovbo.gg.han.a1@gmail.com"">g.ovbo.gg.han.a1@gmail.com</a>
<a href=""mailto:g.o.v.bo.g.gh.ana1@gmail.com"">g.o.v.bo.g.gh.ana1@gmail.com</a>
<a href=""mailto:g.ovbo.g.gh.ana.1@gmail.com"">g.ovbo.g.gh.ana.1@gmail.com</a>
<a href=""mailto:go.vbogg.hana.1@gmail.com"">go.vbogg.hana.1@gmail.com</a>
<a href=""mailto:g.o.vbo.gghana.1@gmail.com"">g.o.vbo.gghana.1@gmail.com</a>
<a href=""mailto:g.o.v.bo.gg.han.a1@gmail.com"">g.o.v.bo.gg.han.a1@gmail.com</a>
<a href=""mailto:go.v.b.o.gg.h.ana1@gmail.com"">go.v.b.o.gg.h.ana1@gmail.com</a>
<a href=""mailto:g.ovbogg.h.a.na.1@gmail.com"">g.ovbogg.h.a.na.1@gmail.com</a>
<a href=""mailto:go.vb.o.ggha.na.1@gmail.com"">go.vb.o.ggha.na.1@gmail.com</a>
<a href=""mailto:g.o.vbo.g.gh.a.na1@gmail.com"">g.o.vbo.g.gh.a.na1@gmail.com</a>
<a href=""mailto:g.o.v.bogg.h.ana.1@gmail.com"">g.o.v.bogg.h.ana.1@gmail.com</a>
<a href=""mailto:go.v.b.og.g.h.a.na1@gmail.com"">go.v.b.og.g.h.a.na1@gmail.com</a>
<a href=""mailto:g.ovb.og.gh.a.n.a1@gmail.com"">g.ovb.og.gh.a.n.a1@gmail.com</a>
<a href=""mailto:go.vb.oggh.ana1@gmail.com"">go.vb.oggh.ana1@gmail.com</a>
<a href=""mailto:gov.bo.gg.h.ana.1@gmail.com"">gov.bo.gg.h.ana.1@gmail.com</a>
<a href=""mailto:go.vbog.gh.ana.1@gmail.com"">go.vbog.gh.ana.1@gmail.com</a>
<a href=""mailto:g.o.v.b.o.g.g.ha.na1@gmail.com"">g.o.v.b.o.g.g.ha.na1@gmail.com</a>
<a href=""mailto:govb.ogg.h.a.n.a1@gmail.com"">govb.ogg.h.a.n.a1@gmail.com</a>
<a href=""mailto:go.vb.og.g.h.a.na1@gmail.com"">go.vb.og.g.h.a.na1@gmail.com</a>
<a href=""mailto:g.ovbo.g.g.h.an.a.1@gmail.com"">g.ovbo.g.g.h.an.a.1@gmail.com</a>
<a href=""mailto:g.ovb.og.g.h.ana.1@gmail.com"">g.ovb.og.g.h.ana.1@gmail.com</a>
<a href=""mailto:g.o.v.bo.g.gh.ana.1@gmail.com"">g.o.v.bo.g.gh.ana.1@gmail.com</a>
<a href=""mailto:go.v.bo.ggh.a.n.a.1@gmail.com"">go.v.bo.ggh.a.n.a.1@gmail.com</a>
<a href=""mailto:g.o.v.boggh.a.na.1@gmail.com"">g.o.v.boggh.a.na.1@gmail.com</a>
<a href=""mailto:go.v.b.o.g.ghana.1@gmail.com"">go.v.b.o.g.ghana.1@gmail.com</a>
<a href=""mailto:g.ovb.o.g.g.ha.na1@gmail.com"">g.ovb.o.g.g.ha.na1@gmail.com</a>
<a href=""mailto:g.ovbo.g.g.han.a.1@gmail.com"">g.ovbo.g.g.han.a.1@gmail.com</a>
<a href=""mailto:gov.bog.g.h.an.a1@gmail.com"">gov.bog.g.h.an.a1@gmail.com</a>
<a href=""mailto:go.vbo.ggha.na.1@gmail.com"">go.vbo.ggha.na.1@gmail.com</a>
<a href=""mailto:go.vb.og.g.h.an.a1@gmail.com"">go.vb.og.g.h.an.a1@gmail.com</a>
<a href=""mailto:go.v.bo.g.gh.ana.1@gmail.com"">go.v.bo.g.gh.ana.1@gmail.com</a>
<a href=""mailto:govbo.g.ghan.a.1@gmail.com"">govbo.g.ghan.a.1@gmail.com</a>
<a href=""mailto:go.vbo.ggh.ana.1@gmail.com"">go.vbo.ggh.ana.1@gmail.com</a>
<a href=""mailto:g.o.v.bo.g.g.hana.1@gmail.com"">g.o.v.bo.g.g.hana.1@gmail.com</a>
<a href=""mailto:g.o.vb.o.g.gh.a.na1@gmail.com"">g.o.vb.o.g.gh.a.na1@gmail.com</a>
<a href=""mailto:g.ov.bo.g.gh.a.na.1@gmail.com"">g.ov.bo.g.gh.a.na.1@gmail.com</a>
<a href=""mailto:g.ov.b.o.g.gha.n.a1@gmail.com"">g.ov.b.o.g.gha.n.a1@gmail.com</a>
<a href=""mailto:go.vbo.gg.h.a.n.a1@gmail.com"">go.vbo.gg.h.a.n.a1@gmail.com</a>
<a href=""mailto:go.vb.ogg.h.a.n.a.1@gmail.com"">go.vb.ogg.h.a.n.a.1@gmail.com</a>
<a href=""mailto:g.ov.bog.ghana.1@gmail.com"">g.ov.bog.ghana.1@gmail.com</a>
<a href=""mailto:govboggh.a.na1@gmail.com"">govboggh.a.na1@gmail.com</a>
<a href=""mailto:g.o.vb.oggh.a.na1@gmail.com"">g.o.vb.oggh.a.na1@gmail.com</a>
<a href=""mailto:g.o.vbog.gh.a.na.1@gmail.com"">g.o.vbog.gh.a.na.1@gmail.com</a>
<a href=""mailto:gov.b.og.g.hana.1@gmail.com"">gov.b.og.g.hana.1@gmail.com</a>
<a href=""mailto:g.o.v.bo.ggh.a.na1@gmail.com"">g.o.v.bo.ggh.a.na1@gmail.com</a>
<a href=""mailto:g.o.v.b.ogg.hana1@gmail.com"">g.o.v.b.ogg.hana1@gmail.com</a>
<a href=""mailto:go.v.bo.g.ghan.a.1@gmail.com"">go.v.bo.g.ghan.a.1@gmail.com</a>
<a href=""mailto:govb.ogg.ha.n.a.1@gmail.com"">govb.ogg.ha.n.a.1@gmail.com</a>
<a href=""mailto:go.vb.og.g.h.a.n.a.1@gmail.com"">go.vb.og.g.h.a.n.a.1@gmail.com</a>
<a href=""mailto:g.o.v.b.ogg.h.a.na1@gmail.com"">g.o.v.b.ogg.h.a.na1@gmail.com</a>
<a href=""mailto:go.v.bog.gh.an.a.1@gmail.com"">go.v.bog.gh.an.a.1@gmail.com</a>
<a href=""mailto:g.o.vb.og.g.h.an.a.1@gmail.com"">g.o.vb.og.g.h.an.a.1@gmail.com</a>
<a href=""mailto:gov.b.ogg.han.a1@gmail.com"">gov.b.ogg.han.a1@gmail.com</a>
<a href=""mailto:go.vbogghana1@gmail.com"">go.vbogghana1@gmail.com</a>
<a href=""mailto:gov.b.oggha.n.a1@gmail.com"">gov.b.oggha.n.a1@gmail.com</a>
<a href=""mailto:g.ov.bo.ggh.ana.1@gmail.com"">g.ov.bo.ggh.ana.1@gmail.com</a>
<a href=""mailto:g.ovbo.ggh.a.na.1@gmail.com"">g.ovbo.ggh.a.na.1@gmail.com</a>
<a href=""mailto:g.o.vbo.gg.h.an.a.1@gmail.com"">g.o.vbo.gg.h.an.a.1@gmail.com</a>
<a href=""mailto:go.vbo.g.ghana1@gmail.com"">go.vbo.g.ghana1@gmail.com</a>
<a href=""mailto:g.ov.b.o.ggha.n.a1@gmail.com"">g.ov.b.o.ggha.n.a1@gmail.com</a>
<a href=""mailto:govb.ogg.h.a.n.a.1@gmail.com"">govb.ogg.h.a.n.a.1@gmail.com</a>
<a href=""mailto:go.v.bog.gha.na1@gmail.com"">go.v.bog.gha.na1@gmail.com</a>
<a href=""mailto:g.ovb.og.g.h.a.na1@gmail.com"">g.ovb.og.g.h.a.na1@gmail.com</a>
<a href=""mailto:gov.b.og.gh.ana1@gmail.com"">gov.b.og.gh.ana1@gmail.com</a>
<a href=""mailto:g.o.v.b.og.g.h.ana.1@gmail.com"">g.o.v.b.og.g.h.ana.1@gmail.com</a>
<a href=""mailto:g.ovbo.gg.hana1@gmail.com"">g.ovbo.gg.hana1@gmail.com</a>
<a href=""mailto:g.ovbogg.ha.na.1@gmail.com"">g.ovbogg.ha.na.1@gmail.com</a>
<a href=""mailto:go.vbo.gg.han.a1@gmail.com"">go.vbo.gg.han.a1@gmail.com</a>
<a href=""mailto:gov.bogg.hana1@gmail.com"">gov.bogg.hana1@gmail.com</a>
<a href=""mailto:govb.o.g.g.ha.na1@gmail.com"">govb.o.g.g.ha.na1@gmail.com</a>
<a href=""mailto:g.o.vb.o.g.ghana.1@gmail.com"">g.o.vb.o.g.ghana.1@gmail.com</a>
<a href=""mailto:go.v.bo.ggha.na1@gmail.com"">go.v.bo.ggha.na1@gmail.com</a>
<a href=""mailto:govbo.ggha.na.1@gmail.com"">govbo.ggha.na.1@gmail.com</a>
<a href=""mailto:g.o.vbo.g.gh.ana.1@gmail.com"">g.o.vbo.g.gh.ana.1@gmail.com</a>
<a href=""mailto:g.ovb.ogghan.a.1@gmail.com"">g.ovb.ogghan.a.1@gmail.com</a>
<a href=""mailto:gov.b.o.ggha.na1@gmail.com"">gov.b.o.ggha.na1@gmail.com</a>
<a href=""mailto:g.ov.bogg.hana.1@gmail.com"">g.ov.bogg.hana.1@gmail.com</a>
<a href=""mailto:go.vbog.gh.a.na1@gmail.com"">go.vbog.gh.a.na1@gmail.com</a>
<a href=""mailto:g.o.vb.og.ghana.1@gmail.com"">g.o.vb.og.ghana.1@gmail.com</a>
<a href=""mailto:g.o.v.bo.g.ghan.a1@gmail.com"">g.o.v.bo.g.ghan.a1@gmail.com</a>
<a href=""mailto:g.o.v.b.o.ggh.a.na.1@gmail.com"">g.o.v.b.o.ggh.a.na.1@gmail.com</a>
<a href=""mailto:go.vbogghan.a1@gmail.com"">go.vbogghan.a1@gmail.com</a>
<a href=""mailto:gov.b.oggh.an.a.1@gmail.com"">gov.b.oggh.an.a.1@gmail.com</a>
<a href=""mailto:g.ov.b.o.gghan.a.1@gmail.com"">g.ov.b.o.gghan.a.1@gmail.com</a>
<a href=""mailto:g.ov.bog.g.ha.n.a.1@gmail.com"">g.ov.bog.g.ha.n.a.1@gmail.com</a>
<a href=""mailto:go.vbo.g.g.h.a.n.a1@gmail.com"">go.vbo.g.g.h.a.n.a1@gmail.com</a>
<a href=""mailto:g.o.vbog.gh.an.a1@gmail.com"">g.o.vbog.gh.an.a1@gmail.com</a>
<a href=""mailto:go.v.bo.gg.han.a.1@gmail.com"">go.v.bo.gg.han.a.1@gmail.com</a>
<a href=""mailto:g.ovb.og.gh.ana1@gmail.com"">g.ovb.og.gh.ana1@gmail.com</a>
<a href=""mailto:g.ovboggha.n.a.1@gmail.com"">g.ovboggha.n.a.1@gmail.com</a>
<a href=""mailto:g.ov.bo.g.g.hana.1@gmail.com"">g.ov.bo.g.g.hana.1@gmail.com</a>
<a href=""mailto:go.vbo.g.g.hana.1@gmail.com"">go.vbo.g.g.hana.1@gmail.com</a>
<a href=""mailto:g.o.vb.o.ggha.n.a1@gmail.com"">g.o.vb.o.ggha.n.a1@gmail.com</a>
<a href=""mailto:g.ovb.o.g.g.h.a.n.a.1@gmail.com"">g.ovb.o.g.g.h.a.n.a.1@gmail.com</a>
<a href=""mailto:g.ovbo.g.ghan.a.1@gmail.com"">g.ovbo.g.ghan.a.1@gmail.com</a>
<a href=""mailto:govb.og.gha.n.a.1@gmail.com"">govb.og.gha.n.a.1@gmail.com</a>
<a href=""mailto:g.o.v.boggha.na.1@gmail.com"">g.o.v.boggha.na.1@gmail.com</a>
<a href=""mailto:go.v.bog.g.h.a.na.1@gmail.com"">go.v.bog.g.h.a.na.1@gmail.com</a>
<a href=""mailto:gov.b.og.ghana1@gmail.com"">gov.b.og.ghana1@gmail.com</a>
<a href=""mailto:go.vb.o.ggh.an.a.1@gmail.com"">go.vb.o.ggh.an.a.1@gmail.com</a>
<a href=""mailto:g.ovb.o.gg.h.a.na.1@gmail.com"">g.ovb.o.gg.h.a.na.1@gmail.com</a>
<a href=""mailto:g.ovb.og.gh.a.na1@gmail.com"">g.ovb.og.gh.a.na1@gmail.com</a>
<a href=""mailto:govbogg.ha.n.a1@gmail.com"">govbogg.ha.n.a1@gmail.com</a>
<a href=""mailto:govbogg.hana1@gmail.com"">govbogg.hana1@gmail.com</a>
<a href=""mailto:govbo.gg.h.a.n.a1@gmail.com"">govbo.gg.h.a.n.a1@gmail.com</a>
<a href=""mailto:go.v.bo.g.gh.ana1@gmail.com"">go.v.bo.g.gh.ana1@gmail.com</a>
<a href=""mailto:gov.b.ogg.hana.1@gmail.com"">gov.b.ogg.hana.1@gmail.com</a>
<a href=""mailto:g.o.v.b.oggh.an.a.1@gmail.com"">g.o.v.b.oggh.an.a.1@gmail.com</a>
<a href=""mailto:g.o.v.b.o.ggh.an.a1@gmail.com"">g.o.v.b.o.ggh.an.a1@gmail.com</a>
<a href=""mailto:g.ov.b.o.g.g.ha.n.a1@gmail.com"">g.ov.b.o.g.g.ha.n.a1@gmail.com</a>
<a href=""mailto:g.ovb.o.g.g.h.an.a.1@gmail.com"">g.ovb.o.g.g.h.an.a.1@gmail.com</a>
<a href=""mailto:g.o.vb.o.g.g.ha.n.a.1@gmail.com"">g.o.vb.o.g.g.ha.n.a.1@gmail.com</a>
<a href=""mailto:g.ov.b.oggha.n.a.1@gmail.com"">g.ov.b.oggha.n.a.1@gmail.com</a>
<a href=""mailto:gov.bog.ghan.a.1@gmail.com"">gov.bog.ghan.a.1@gmail.com</a>
<a href=""mailto:govbogghana.1@gmail.com"">govbogghana.1@gmail.com</a>
<a href=""mailto:govb.o.g.gh.a.na1@gmail.com"">govb.o.g.gh.a.na1@gmail.com</a>
<a href=""mailto:g.ovbogg.h.a.n.a1@gmail.com"">g.ovbogg.h.a.n.a1@gmail.com</a>
<a href=""mailto:go.vbogg.h.a.n.a1@gmail.com"">go.vbogg.h.a.n.a1@gmail.com</a>
<a href=""mailto:g.o.vboggha.n.a1@gmail.com"">g.o.vboggha.n.a1@gmail.com</a>
<a href=""mailto:go.vb.o.g.gh.a.n.a.1@gmail.com"">go.vb.o.g.gh.a.n.a.1@gmail.com</a>
<a href=""mailto:gov.bo.ggh.a.n.a.1@gmail.com"">gov.bo.ggh.a.n.a.1@gmail.com</a>
<a href=""mailto:go.vbog.gh.an.a1@gmail.com"">go.vbog.gh.an.a1@gmail.com</a>
<a href=""mailto:gov.bog.gha.na1@gmail.com"">gov.bog.gha.na1@gmail.com</a>
<a href=""mailto:g.o.v.b.o.g.gha.na1@gmail.com"">g.o.v.b.o.g.gha.na1@gmail.com</a>
<a href=""mailto:g.o.vb.og.gh.an.a.1@gmail.com"">g.o.vb.og.gh.an.a.1@gmail.com</a>
<a href=""mailto:gov.bogg.h.an.a1@gmail.com"">gov.bogg.h.an.a1@gmail.com</a>
<a href=""mailto:g.o.vbo.ggh.a.n.a1@gmail.com"">g.o.vbo.ggh.a.n.a1@gmail.com</a>
<a href=""mailto:g.ovb.o.g.ghan.a1@gmail.com"">g.ovb.o.g.ghan.a1@gmail.com</a>
<a href=""mailto:gov.bo.g.gh.an.a.1@gmail.com"">gov.bo.g.gh.an.a.1@gmail.com</a>
<a href=""mailto:gov.b.og.g.h.an.a1@gmail.com"">gov.b.og.g.h.an.a1@gmail.com</a>
<a href=""mailto:g.o.vbog.ghan.a.1@gmail.com"">g.o.vbog.ghan.a.1@gmail.com</a>
<a href=""mailto:g.ov.bog.g.hana1@gmail.com"">g.ov.bog.g.hana1@gmail.com</a>
<a href=""mailto:g.o.v.b.o.g.ghan.a1@gmail.com"">g.o.v.b.o.g.ghan.a1@gmail.com</a>
<a href=""mailto:g.o.v.b.ogghan.a.1@gmail.com"">g.o.v.b.ogghan.a.1@gmail.com</a>
<a href=""mailto:go.vbog.gh.a.n.a.1@gmail.com"">go.vbog.gh.a.n.a.1@gmail.com</a>
<a href=""mailto:gov.bo.g.g.h.an.a.1@gmail.com"">gov.bo.g.g.h.an.a.1@gmail.com</a>
<a href=""mailto:govb.oggha.n.a1@gmail.com"">govb.oggha.n.a1@gmail.com</a>
<a href=""mailto:g.o.v.b.o.gg.hana1@gmail.com"">g.o.v.b.o.gg.hana1@gmail.com</a>
<a href=""mailto:go.v.boggh.a.na.1@gmail.com"">go.v.boggh.a.na.1@gmail.com</a>
<a href=""mailto:govbo.ggh.ana1@gmail.com"">govbo.ggh.ana1@gmail.com</a>
<a href=""mailto:gov.bog.gh.an.a1@gmail.com"">gov.bog.gh.an.a1@gmail.com</a>
<a href=""mailto:g.o.vb.o.gg.h.ana1@gmail.com"">g.o.vb.o.gg.h.ana1@gmail.com</a>
<a href=""mailto:govb.og.gh.a.na1@gmail.com"">govb.og.gh.a.na1@gmail.com</a>
<a href=""mailto:g.o.vboggh.ana.1@gmail.com"">g.o.vboggh.ana.1@gmail.com</a>
<a href=""mailto:go.vb.o.g.ghana.1@gmail.com"">go.vb.o.g.ghana.1@gmail.com</a>
<a href=""mailto:g.o.vbo.g.g.h.a.n.a.1@gmail.com"">g.o.vbo.g.g.h.a.n.a.1@gmail.com</a>
<a href=""mailto:g.ovb.o.g.g.h.an.a1@gmail.com"">g.ovb.o.g.g.h.an.a1@gmail.com</a>
<a href=""mailto:g.ovboggh.a.na.1@gmail.com"">g.ovboggh.a.na.1@gmail.com</a>
<a href=""mailto:g.o.v.b.og.ghan.a.1@gmail.com"">g.o.v.b.og.ghan.a.1@gmail.com</a>
<a href=""mailto:g.ovb.oggha.na.1@gmail.com"">g.ovb.oggha.na.1@gmail.com</a>
<a href=""mailto:go.vboggha.na.1@gmail.com"">go.vboggha.na.1@gmail.com</a>
<a href=""mailto:g.o.vb.ogg.h.ana.1@gmail.com"">g.o.vb.ogg.h.ana.1@gmail.com</a>
<a href=""mailto:g.ovbo.gg.h.a.n.a1@gmail.com"">g.ovbo.gg.h.a.n.a1@gmail.com</a>
<a href=""mailto:g.ovb.og.gha.n.a1@gmail.com"">g.ovb.og.gha.n.a1@gmail.com</a>
<a href=""mailto:gov.bo.g.g.h.a.n.a.1@gmail.com"">gov.bo.g.g.h.a.n.a.1@gmail.com</a>
<a href=""mailto:g.ov.b.og.g.ha.na1@gmail.com"">g.ov.b.og.g.ha.na1@gmail.com</a>
<a href=""mailto:g.ovbog.ghan.a1@gmail.com"">g.ovbog.ghan.a1@gmail.com</a>
<a href=""mailto:g.ov.b.o.g.gh.ana.1@gmail.com"">g.ov.b.o.g.gh.ana.1@gmail.com</a>
<a href=""mailto:g.ovbo.g.gh.a.na1@gmail.com"">g.ovbo.g.gh.a.na1@gmail.com</a>
<a href=""mailto:g.ov.b.og.g.h.a.na1@gmail.com"">g.ov.b.og.g.h.a.na1@gmail.com</a>
<a href=""mailto:go.v.b.o.gghan.a1@gmail.com"">go.v.b.o.gghan.a1@gmail.com</a>
<a href=""mailto:gov.bog.g.ha.n.a.1@gmail.com"">gov.bog.g.ha.n.a.1@gmail.com</a>
<a href=""mailto:govbo.g.gha.n.a.1@gmail.com"">govbo.g.gha.n.a.1@gmail.com</a>
<a href=""mailto:go.vb.o.g.g.ha.n.a.1@gmail.com"">go.vb.o.g.g.ha.n.a.1@gmail.com</a>
<a href=""mailto:go.vbog.g.ha.na.1@gmail.com"">go.vbog.g.ha.na.1@gmail.com</a>
<a href=""mailto:g.o.v.b.og.gh.an.a1@gmail.com"">g.o.v.b.og.gh.an.a1@gmail.com</a>
<a href=""mailto:govb.o.ggha.na.1@gmail.com"">govb.o.ggha.na.1@gmail.com</a>
<a href=""mailto:g.ov.b.oggh.a.n.a.1@gmail.com"">g.ov.b.oggh.a.n.a.1@gmail.com</a>
<a href=""mailto:gov.b.og.gh.an.a.1@gmail.com"">gov.b.og.gh.an.a.1@gmail.com</a>
<a href=""mailto:westernunion22291@yahoo.com"">westernunion22291@yahoo.com</a>
<a href=""mailto:bankof0009@gmail.com"">bankof0009@gmail.com</a>
<a href=""mailto:ban.ko.f0.009@gmail.com"">ban.ko.f0.009@gmail.com</a>
<a href=""mailto:ban.kof.00.09@gmail.com"">ban.kof.00.09@gmail.com</a>
<a href=""mailto:ba.n.k.o.f.0.0.0.9@gmail.com"">ba.n.k.o.f.0.0.0.9@gmail.com</a>
<a href=""mailto:ba.n.kof00.0.9@gmail.com"">ba.n.kof00.0.9@gmail.com</a>
<a href=""mailto:ba.nk.of00.0.9@gmail.com"">ba.nk.of00.0.9@gmail.com</a>
<a href=""mailto:ba.nk.of0.0.09@gmail.com"">ba.nk.of0.0.09@gmail.com</a>
<a href=""mailto:bankof.0.0.09@gmail.com"">bankof.0.0.09@gmail.com</a>
<a href=""mailto:ban.ko.f.00.09@gmail.com"">ban.ko.f.00.09@gmail.com</a>
<a href=""mailto:ban.k.of.0.0.09@gmail.com"">ban.k.of.0.0.09@gmail.com</a>
<a href=""mailto:b.a.nk.o.f.000.9@gmail.com"">b.a.nk.o.f.000.9@gmail.com</a>
<a href=""mailto:b.a.n.k.of00.09@gmail.com"">b.a.n.k.of00.09@gmail.com</a>
<a href=""mailto:b.a.n.k.of0.0.09@gmail.com"">b.a.n.k.of0.0.09@gmail.com</a>
<a href=""mailto:b.a.n.k.o.f00.09@gmail.com"">b.a.n.k.o.f00.09@gmail.com</a>
<a href=""mailto:b.ankof00.09@gmail.com"">b.ankof00.09@gmail.com</a>
<a href=""mailto:b.a.nkof.0.0.0.9@gmail.com"">b.a.nkof.0.0.0.9@gmail.com</a>
<a href=""mailto:ba.nk.of.0.0.09@gmail.com"">ba.nk.of.0.0.09@gmail.com</a>
<a href=""mailto:b.an.ko.f00.0.9@gmail.com"">b.an.ko.f00.0.9@gmail.com</a>
<a href=""mailto:b.ank.o.f0.0.09@gmail.com"">b.ank.o.f0.0.09@gmail.com</a>
<a href=""mailto:ba.n.k.of.00.09@gmail.com"">ba.n.k.of.00.09@gmail.com</a>
<a href=""mailto:b.ank.of0.0.0.9@gmail.com"">b.ank.of0.0.0.9@gmail.com</a>
<a href=""mailto:b.ank.o.f00.09@gmail.com"">b.ank.o.f00.09@gmail.com</a>
<a href=""mailto:b.a.nk.o.f000.9@gmail.com"">b.a.nk.o.f000.9@gmail.com</a>
<a href=""mailto:b.a.nk.of.0.00.9@gmail.com"">b.a.nk.of.0.00.9@gmail.com</a>
<a href=""mailto:banko.f.0.00.9@gmail.com"">banko.f.0.00.9@gmail.com</a>
<a href=""mailto:b.a.nk.of.0009@gmail.com"">b.a.nk.of.0009@gmail.com</a>
<a href=""mailto:ba.n.kof.0.00.9@gmail.com"">ba.n.kof.0.00.9@gmail.com</a>
<a href=""mailto:b.a.n.ko.f.0.009@gmail.com"">b.a.n.ko.f.0.009@gmail.com</a>
<a href=""mailto:ba.nk.of.0009@gmail.com"">ba.nk.of.0009@gmail.com</a>
<a href=""mailto:ba.n.ko.f0009@gmail.com"">ba.n.ko.f0009@gmail.com</a>
<a href=""mailto:ba.n.k.of0.00.9@gmail.com"">ba.n.k.of0.00.9@gmail.com</a>
<a href=""mailto:b.an.ko.f.00.0.9@gmail.com"">b.an.ko.f.00.0.9@gmail.com</a>
<a href=""mailto:b.ank.o.f.0.00.9@gmail.com"">b.ank.o.f.0.00.9@gmail.com</a>
<a href=""mailto:b.anko.f00.0.9@gmail.com"">b.anko.f00.0.9@gmail.com</a>
<a href=""mailto:bank.of.0.009@gmail.com"">bank.of.0.009@gmail.com</a>
<a href=""mailto:b.an.ko.f0.00.9@gmail.com"">b.an.ko.f0.00.9@gmail.com</a>
<a href=""mailto:ba.nkof0.00.9@gmail.com"">ba.nkof0.00.9@gmail.com</a>
<a href=""mailto:ba.n.ko.f0.00.9@gmail.com"">ba.n.ko.f0.00.9@gmail.com</a>
<a href=""mailto:ba.n.k.of00.09@gmail.com"">ba.n.k.of00.09@gmail.com</a>
<a href=""mailto:b.a.nko.f000.9@gmail.com"">b.a.nko.f000.9@gmail.com</a>
<a href=""mailto:b.an.ko.f0.009@gmail.com"">b.an.ko.f0.009@gmail.com</a>
<a href=""mailto:ba.n.k.o.f00.09@gmail.com"">ba.n.k.o.f00.09@gmail.com</a>
<a href=""mailto:ban.kof00.0.9@gmail.com"">ban.kof00.0.9@gmail.com</a>
<a href=""mailto:ban.kof.0.00.9@gmail.com"">ban.kof.0.00.9@gmail.com</a>
<a href=""mailto:b.ank.of.0.0.09@gmail.com"">b.ank.of.0.0.09@gmail.com</a>
<a href=""mailto:ban.k.o.f0009@gmail.com"">ban.k.o.f0009@gmail.com</a>
<a href=""mailto:b.anko.f.000.9@gmail.com"">b.anko.f.000.9@gmail.com</a>
<a href=""mailto:ba.nko.f.00.09@gmail.com"">ba.nko.f.00.09@gmail.com</a>
<a href=""mailto:b.ankof.0.00.9@gmail.com"">b.ankof.0.00.9@gmail.com</a>
<a href=""mailto:b.ank.of00.0.9@gmail.com"">b.ank.of00.0.9@gmail.com</a>
<a href=""mailto:b.a.n.k.of0.00.9@gmail.com"">b.a.n.k.of0.00.9@gmail.com</a>
<a href=""mailto:ba.n.k.of.000.9@gmail.com"">ba.n.k.of.000.9@gmail.com</a>
<a href=""mailto:b.an.kof00.09@gmail.com"">b.an.kof00.09@gmail.com</a>
<a href=""mailto:b.a.n.k.of0.009@gmail.com"">b.a.n.k.of0.009@gmail.com</a>
<a href=""mailto:b.a.n.ko.f00.0.9@gmail.com"">b.a.n.ko.f00.0.9@gmail.com</a>
<a href=""mailto:ba.nkof000.9@gmail.com"">ba.nkof000.9@gmail.com</a>
<a href=""mailto:b.a.nk.of00.09@gmail.com"">b.a.nk.of00.09@gmail.com</a>
<a href=""mailto:b.a.n.kof.0.0.09@gmail.com"">b.a.n.kof.0.0.09@gmail.com</a>
<a href=""mailto:ban.k.o.f0.0.0.9@gmail.com"">ban.k.o.f0.0.0.9@gmail.com</a>
<a href=""mailto:banko.f0.009@gmail.com"">banko.f0.009@gmail.com</a>
<a href=""mailto:ba.nkof.00.09@gmail.com"">ba.nkof.00.09@gmail.com</a>
<a href=""mailto:ban.kof0.00.9@gmail.com"">ban.kof0.00.9@gmail.com</a>
<a href=""mailto:banko.f00.09@gmail.com"">banko.f00.09@gmail.com</a>
<a href=""mailto:b.a.n.kof.0009@gmail.com"">b.a.n.kof.0009@gmail.com</a>
<a href=""mailto:ba.nk.o.f00.09@gmail.com"">ba.nk.o.f00.09@gmail.com</a>
<a href=""mailto:ban.k.of00.09@gmail.com"">ban.k.of00.09@gmail.com</a>
<a href=""mailto:bank.of0.0.09@gmail.com"">bank.of0.0.09@gmail.com</a>
<a href=""mailto:b.a.n.k.o.f.00.0.9@gmail.com"">b.a.n.k.o.f.00.0.9@gmail.com</a>
<a href=""mailto:b.an.k.o.f.00.09@gmail.com"">b.an.k.o.f.00.09@gmail.com</a>
<a href=""mailto:banko.f0.00.9@gmail.com"">banko.f0.00.9@gmail.com</a>
<a href=""mailto:b.anko.f.00.0.9@gmail.com"">b.anko.f.00.0.9@gmail.com</a>
<a href=""mailto:ba.nkof0009@gmail.com"">ba.nkof0009@gmail.com</a>
<a href=""mailto:b.an.ko.f0.0.0.9@gmail.com"">b.an.ko.f0.0.0.9@gmail.com</a>
<a href=""mailto:b.a.nk.o.f0.00.9@gmail.com"">b.a.nk.o.f0.00.9@gmail.com</a>
<a href=""mailto:b.a.nko.f0.0.0.9@gmail.com"">b.a.nko.f0.0.0.9@gmail.com</a>
<a href=""mailto:bankof0.009@gmail.com"">bankof0.009@gmail.com</a>
<a href=""mailto:b.ankof.0.0.0.9@gmail.com"">b.ankof.0.0.0.9@gmail.com</a>
<a href=""mailto:b.an.k.o.f.000.9@gmail.com"">b.an.k.o.f.000.9@gmail.com</a>
<a href=""mailto:ban.k.o.f000.9@gmail.com"">ban.k.o.f000.9@gmail.com</a>
<a href=""mailto:b.a.n.k.o.f.0.0.0.9@gmail.com"">b.a.n.k.o.f.0.0.0.9@gmail.com</a>
<a href=""mailto:b.a.n.ko.f.0.0.0.9@gmail.com"">b.a.n.ko.f.0.0.0.9@gmail.com</a>
<a href=""mailto:ba.n.ko.f.0.00.9@gmail.com"">ba.n.ko.f.0.00.9@gmail.com</a>
<a href=""mailto:ba.n.ko.f.0.0.0.9@gmail.com"">ba.n.ko.f.0.0.0.9@gmail.com</a>
<a href=""mailto:ba.nkof.0.0.09@gmail.com"">ba.nkof.0.0.09@gmail.com</a>
<a href=""mailto:bank.o.f0.009@gmail.com"">bank.o.f0.009@gmail.com</a>
<a href=""mailto:b.ank.o.f.00.09@gmail.com"">b.ank.o.f.00.09@gmail.com</a>
<a href=""mailto:b.a.n.k.o.f0.009@gmail.com"">b.a.n.k.o.f0.009@gmail.com</a>
<a href=""mailto:bank.o.f000.9@gmail.com"">bank.o.f000.9@gmail.com</a>
<a href=""mailto:b.a.nko.f.000.9@gmail.com"">b.a.nko.f.000.9@gmail.com</a>
<a href=""mailto:ba.nkof.0.0.0.9@gmail.com"">ba.nkof.0.0.0.9@gmail.com</a>
<a href=""mailto:ba.nk.o.f0.009@gmail.com"">ba.nk.o.f0.009@gmail.com</a>
<a href=""mailto:b.a.n.k.o.f0.00.9@gmail.com"">b.a.n.k.o.f0.00.9@gmail.com</a>
<a href=""mailto:bank.o.f.00.09@gmail.com"">bank.o.f.00.09@gmail.com</a>
<a href=""mailto:b.an.k.o.f000.9@gmail.com"">b.an.k.o.f000.9@gmail.com</a>
<a href=""mailto:bank.of0.009@gmail.com"">bank.of0.009@gmail.com</a>
<a href=""mailto:b.ank.o.f.00.0.9@gmail.com"">b.ank.o.f.00.0.9@gmail.com</a>
<a href=""mailto:bankof.00.09@gmail.com"">bankof.00.09@gmail.com</a>
<a href=""mailto:ba.n.k.of.0.0.09@gmail.com"">ba.n.k.of.0.0.09@gmail.com</a>
<a href=""mailto:ba.n.k.of0.0.09@gmail.com"">ba.n.k.of0.0.09@gmail.com</a>
<a href=""mailto:b.ankof.000.9@gmail.com"">b.ankof.000.9@gmail.com</a>
<a href=""mailto:b.an.kof00.0.9@gmail.com"">b.an.kof00.0.9@gmail.com</a>
<a href=""mailto:b.a.n.ko.f.00.09@gmail.com"">b.a.n.ko.f.00.09@gmail.com</a>
<a href=""mailto:b.a.nkof000.9@gmail.com"">b.a.nkof000.9@gmail.com</a>
<a href=""mailto:b.ank.of.0.009@gmail.com"">b.ank.of.0.009@gmail.com</a>
<a href=""mailto:ba.n.ko.f.000.9@gmail.com"">ba.n.ko.f.000.9@gmail.com</a>
<a href=""mailto:ban.ko.f.00.0.9@gmail.com"">ban.ko.f.00.0.9@gmail.com</a>
<a href=""mailto:ba.nko.f.0.00.9@gmail.com"">ba.nko.f.0.00.9@gmail.com</a>
<a href=""mailto:b.an.ko.f00.09@gmail.com"">b.an.ko.f00.09@gmail.com</a>
<a href=""mailto:ban.ko.f0009@gmail.com"">ban.ko.f0009@gmail.com</a>
<a href=""mailto:b.a.nk.of0.009@gmail.com"">b.a.nk.of0.009@gmail.com</a>
<a href=""mailto:b.ankof0.009@gmail.com"">b.ankof0.009@gmail.com</a>
<a href=""mailto:ban.ko.f.0.0.0.9@gmail.com"">ban.ko.f.0.0.0.9@gmail.com</a>
<a href=""mailto:b.an.k.of.0.00.9@gmail.com"">b.an.k.of.0.00.9@gmail.com</a>
<a href=""mailto:banko.f.00.09@gmail.com"">banko.f.00.09@gmail.com</a>
<a href=""mailto:b.ank.o.f.0.009@gmail.com"">b.ank.o.f.0.009@gmail.com</a>
<a href=""mailto:b.a.n.k.o.f000.9@gmail.com"">b.a.n.k.o.f000.9@gmail.com</a>
<a href=""mailto:b.ank.of000.9@gmail.com"">b.ank.of000.9@gmail.com</a>
<a href=""mailto:ba.n.k.of0009@gmail.com"">ba.n.k.of0009@gmail.com</a>
<a href=""mailto:b.a.n.k.of.0.0.09@gmail.com"">b.a.n.k.of.0.0.09@gmail.com</a>
<a href=""mailto:b.a.nkof.00.09@gmail.com"">b.a.nkof.00.09@gmail.com</a>
<a href=""mailto:bank.o.f0.0.0.9@gmail.com"">bank.o.f0.0.0.9@gmail.com</a>
<a href=""mailto:ba.n.k.o.f.00.0.9@gmail.com"">ba.n.k.o.f.00.0.9@gmail.com</a>
<a href=""mailto:b.ank.of.00.0.9@gmail.com"">b.ank.of.00.0.9@gmail.com</a>
<a href=""mailto:b.a.nk.of0009@gmail.com"">b.a.nk.of0009@gmail.com</a>
<a href=""mailto:ban.kof.000.9@gmail.com"">ban.kof.000.9@gmail.com</a>
<a href=""mailto:b.a.nk.of.00.09@gmail.com"">b.a.nk.of.00.09@gmail.com</a>
<a href=""mailto:banko.f0009@gmail.com"">banko.f0009@gmail.com</a>
<a href=""mailto:b.a.n.kof.0.009@gmail.com"">b.a.n.kof.0.009@gmail.com</a>
<a href=""mailto:b.a.nk.o.f.00.09@gmail.com"">b.a.nk.o.f.00.09@gmail.com</a>
<a href=""mailto:ba.n.kof00.09@gmail.com"">ba.n.kof00.09@gmail.com</a>
<a href=""mailto:ba.nko.f0.0.09@gmail.com"">ba.nko.f0.0.09@gmail.com</a>
<a href=""mailto:ba.n.ko.f.00.09@gmail.com"">ba.n.ko.f.00.09@gmail.com</a>
<a href=""mailto:b.a.nkof.00.0.9@gmail.com"">b.a.nkof.00.0.9@gmail.com</a>
<a href=""mailto:bank.of.00.0.9@gmail.com"">bank.of.00.0.9@gmail.com</a>
<a href=""mailto:banko.f0.0.09@gmail.com"">banko.f0.0.09@gmail.com</a>
<a href=""mailto:ban.k.of.0.00.9@gmail.com"">ban.k.of.0.00.9@gmail.com</a>
<a href=""mailto:b.a.n.k.of.0.009@gmail.com"">b.a.n.k.of.0.009@gmail.com</a>
<a href=""mailto:b.an.k.of0.009@gmail.com"">b.an.k.of0.009@gmail.com</a>
<a href=""mailto:ba.n.ko.f000.9@gmail.com"">ba.n.ko.f000.9@gmail.com</a>
<a href=""mailto:b.ank.o.f.0.0.0.9@gmail.com"">b.ank.o.f.0.0.0.9@gmail.com</a>
<a href=""mailto:b.ank.of00.09@gmail.com"">b.ank.of00.09@gmail.com</a>
<a href=""mailto:b.a.nk.of000.9@gmail.com"">b.a.nk.of000.9@gmail.com</a>
<a href=""mailto:ban.k.o.f.000.9@gmail.com"">ban.k.o.f.000.9@gmail.com</a>
<a href=""mailto:ban.k.of.0009@gmail.com"">ban.k.of.0009@gmail.com</a>
<a href=""mailto:ban.k.of00.0.9@gmail.com"">ban.k.of00.0.9@gmail.com</a>
<a href=""mailto:ba.nko.f00.0.9@gmail.com"">ba.nko.f00.0.9@gmail.com</a>
<a href=""mailto:b.a.nkof.0.009@gmail.com"">b.a.nkof.0.009@gmail.com</a>
<a href=""mailto:bank.of.0.0.09@gmail.com"">bank.of.0.0.09@gmail.com</a>
<a href=""mailto:b.a.nko.f.0.0.0.9@gmail.com"">b.a.nko.f.0.0.0.9@gmail.com</a>
<a href=""mailto:ba.nk.o.f.0009@gmail.com"">ba.nk.o.f.0009@gmail.com</a>
<a href=""mailto:b.an.k.o.f0.009@gmail.com"">b.an.k.o.f0.009@gmail.com</a>
<a href=""mailto:b.a.nko.f0.00.9@gmail.com"">b.a.nko.f0.00.9@gmail.com</a>
<a href=""mailto:ba.nkof.00.0.9@gmail.com"">ba.nkof.00.0.9@gmail.com</a>
<a href=""mailto:ban.k.of.00.09@gmail.com"">ban.k.of.00.09@gmail.com</a>
<a href=""mailto:bank.o.f.0.00.9@gmail.com"">bank.o.f.0.00.9@gmail.com</a>
<a href=""mailto:ba.nko.f.000.9@gmail.com"">ba.nko.f.000.9@gmail.com</a>
<a href=""mailto:ba.n.k.o.f0.00.9@gmail.com"">ba.n.k.o.f0.00.9@gmail.com</a>
<a href=""mailto:ban.k.o.f.0.00.9@gmail.com"">ban.k.o.f.0.00.9@gmail.com</a>
<a href=""mailto:b.an.k.of.00.09@gmail.com"">b.an.k.of.00.09@gmail.com</a>
<a href=""mailto:b.an.k.o.f00.09@gmail.com"">b.an.k.o.f00.09@gmail.com</a>
<a href=""mailto:b.a.nk.of.0.0.09@gmail.com"">b.a.nk.of.0.0.09@gmail.com</a>
<a href=""mailto:b.a.nk.of0.0.0.9@gmail.com"">b.a.nk.of0.0.0.9@gmail.com</a>
<a href=""mailto:ba.n.ko.f.0.0.09@gmail.com"">ba.n.ko.f.0.0.09@gmail.com</a>
<a href=""mailto:b.a.n.ko.f.0.00.9@gmail.com"">b.a.n.ko.f.0.00.9@gmail.com</a>
<a href=""mailto:b.ank.o.f.0.0.09@gmail.com"">b.ank.o.f.0.0.09@gmail.com</a>
<a href=""mailto:ba.n.k.o.f.000.9@gmail.com"">ba.n.k.o.f.000.9@gmail.com</a>
<a href=""mailto:b.an.kof0.009@gmail.com"">b.an.kof0.009@gmail.com</a>
<a href=""mailto:bank.of00.09@gmail.com"">bank.of00.09@gmail.com</a>
<a href=""mailto:b.anko.f.0.00.9@gmail.com"">b.anko.f.0.00.9@gmail.com</a>
<a href=""mailto:b.a.n.ko.f.0.0.09@gmail.com"">b.a.n.ko.f.0.0.09@gmail.com</a>
<a href=""mailto:b.an.k.of000.9@gmail.com"">b.an.k.of000.9@gmail.com</a>
<a href=""mailto:ba.nk.of.00.0.9@gmail.com"">ba.nk.of.00.0.9@gmail.com</a>
<a href=""mailto:ban.k.o.f.00.09@gmail.com"">ban.k.o.f.00.09@gmail.com</a>
<a href=""mailto:ba.nkof00.09@gmail.com"">ba.nkof00.09@gmail.com</a>
<a href=""mailto:b.ankof000.9@gmail.com"">b.ankof000.9@gmail.com</a>
<a href=""mailto:b.anko.f000.9@gmail.com"">b.anko.f000.9@gmail.com</a>
<a href=""mailto:bank.o.f.0009@gmail.com"">bank.o.f.0009@gmail.com</a>
<a href=""mailto:b.a.n.kof0.0.09@gmail.com"">b.a.n.kof0.0.09@gmail.com</a>
<a href=""mailto:b.a.nkof.000.9@gmail.com"">b.a.nkof.000.9@gmail.com</a>
<a href=""mailto:b.a.nk.o.f.00.0.9@gmail.com"">b.a.nk.o.f.00.0.9@gmail.com</a>
<a href=""mailto:ban.k.of0.0.09@gmail.com"">ban.k.of0.0.09@gmail.com</a>
<a href=""mailto:b.ankof.00.09@gmail.com"">b.ankof.00.09@gmail.com</a>
<a href=""mailto:bankof0.00.9@gmail.com"">bankof0.00.9@gmail.com</a>
<a href=""mailto:b.a.n.k.o.f00.0.9@gmail.com"">b.a.n.k.o.f00.0.9@gmail.com</a>
<a href=""mailto:ba.n.k.of.0.009@gmail.com"">ba.n.k.of.0.009@gmail.com</a>
<a href=""mailto:b.ank.of0.00.9@gmail.com"">b.ank.of0.00.9@gmail.com</a>
<a href=""mailto:b.anko.f0.00.9@gmail.com"">b.anko.f0.00.9@gmail.com</a>
<a href=""mailto:b.a.n.ko.f.000.9@gmail.com"">b.a.n.ko.f.000.9@gmail.com</a>
<a href=""mailto:b.a.nk.o.f0009@gmail.com"">b.a.nk.o.f0009@gmail.com</a>
<a href=""mailto:b.an.kof.00.09@gmail.com"">b.an.kof.00.09@gmail.com</a>
<a href=""mailto:ba.n.kof.00.09@gmail.com"">ba.n.kof.00.09@gmail.com</a>
<a href=""mailto:ban.k.o.f0.009@gmail.com"">ban.k.o.f0.009@gmail.com</a>
<a href=""mailto:b.a.nk.o.f.0.00.9@gmail.com"">b.a.nk.o.f.0.00.9@gmail.com</a>
<a href=""mailto:ban.kof0009@gmail.com"">ban.kof0009@gmail.com</a>
<a href=""mailto:bank.o.f0.0.09@gmail.com"">bank.o.f0.0.09@gmail.com</a>
<a href=""mailto:ban.k.o.f.0.0.09@gmail.com"">ban.k.o.f.0.0.09@gmail.com</a>
<a href=""mailto:ba.n.kof.0.009@gmail.com"">ba.n.kof.0.009@gmail.com</a>
<a href=""mailto:b.ank.of.000.9@gmail.com"">b.ank.of.000.9@gmail.com</a>
<a href=""mailto:ba.n.ko.f00.09@gmail.com"">ba.n.ko.f00.09@gmail.com</a>
<a href=""mailto:bank.of.0009@gmail.com"">bank.of.0009@gmail.com</a>
<a href=""mailto:ba.nk.o.f0009@gmail.com"">ba.nk.o.f0009@gmail.com</a>
<a href=""mailto:govbogghana@gmail.com"">govbogghana@gmail.com</a>
<a href=""mailto:g.ovbog.gh.an.a@gmail.com"">g.ovbog.gh.an.a@gmail.com</a>
<a href=""mailto:govb.o.g.ghan.a@gmail.com"">govb.o.g.ghan.a@gmail.com</a>
<a href=""mailto:g.ovbo.gghana@gmail.com"">g.ovbo.gghana@gmail.com</a>
<a href=""mailto:g.ovb.ogg.hana@gmail.com"">g.ovb.ogg.hana@gmail.com</a>
<a href=""mailto:g.ovb.o.ggh.a.n.a@gmail.com"">g.ovb.o.ggh.a.n.a@gmail.com</a>
<a href=""mailto:govbo.g.ghana@gmail.com"">govbo.g.ghana@gmail.com</a>
<a href=""mailto:g.ov.b.og.ghan.a@gmail.com"">g.ov.b.og.ghan.a@gmail.com</a>
<a href=""mailto:g.o.v.bogghana@gmail.com"">g.o.v.bogghana@gmail.com</a>
<a href=""mailto:go.vbo.gg.hana@gmail.com"">go.vbo.gg.hana@gmail.com</a>
<a href=""mailto:g.o.vbogghan.a@gmail.com"">g.o.vbogghan.a@gmail.com</a>
<a href=""mailto:g.ovbog.g.h.a.na@gmail.com"">g.ovbog.g.h.a.na@gmail.com</a>
<a href=""mailto:g.o.v.bo.gg.h.an.a@gmail.com"">g.o.v.bo.gg.h.an.a@gmail.com</a>
<a href=""mailto:g.ovb.ogghana@gmail.com"">g.ovb.ogghana@gmail.com</a>
<a href=""mailto:g.o.v.bo.g.gh.a.n.a@gmail.com"">g.o.v.bo.g.gh.a.n.a@gmail.com</a>
<a href=""mailto:govb.ogg.hana@gmail.com"">govb.ogg.hana@gmail.com</a>
<a href=""mailto:gov.bog.g.h.a.n.a@gmail.com"">gov.bog.g.h.a.n.a@gmail.com</a>
<a href=""mailto:go.v.b.o.gg.h.a.n.a@gmail.com"">go.v.b.o.gg.h.a.n.a@gmail.com</a>
<a href=""mailto:gov.boggh.ana@gmail.com"">gov.boggh.ana@gmail.com</a>
<a href=""mailto:g.ov.b.o.ggh.ana@gmail.com"">g.ov.b.o.ggh.ana@gmail.com</a>
<a href=""mailto:g.ov.b.o.g.g.han.a@gmail.com"">g.ov.b.o.g.g.han.a@gmail.com</a>
<a href=""mailto:go.v.bogg.h.a.na@gmail.com"">go.v.bogg.h.a.na@gmail.com</a>
<a href=""mailto:g.o.vb.oggh.a.na@gmail.com"">g.o.vb.oggh.a.na@gmail.com</a>
<a href=""mailto:gov.b.ogg.h.a.na@gmail.com"">gov.b.ogg.h.a.na@gmail.com</a>
<a href=""mailto:g.o.v.bogg.h.a.na@gmail.com"">g.o.v.bogg.h.a.na@gmail.com</a>
<a href=""mailto:g.ov.b.o.gg.h.an.a@gmail.com"">g.ov.b.o.gg.h.an.a@gmail.com</a>
<a href=""mailto:govb.ogghan.a@gmail.com"">govb.ogghan.a@gmail.com</a>
<a href=""mailto:govb.og.g.hana@gmail.com"">govb.og.g.hana@gmail.com</a>
<a href=""mailto:govb.o.g.g.hana@gmail.com"">govb.o.g.g.hana@gmail.com</a>
<a href=""mailto:govb.og.g.h.ana@gmail.com"">govb.og.g.h.ana@gmail.com</a>
<a href=""mailto:gov.b.oggha.n.a@gmail.com"">gov.b.oggha.n.a@gmail.com</a>
<a href=""mailto:g.ovb.og.gh.ana@gmail.com"">g.ovb.og.gh.ana@gmail.com</a>
<a href=""mailto:g.ovb.o.gg.hana@gmail.com"">g.ovb.o.gg.hana@gmail.com</a>
<a href=""mailto:g.ov.b.ogg.ha.n.a@gmail.com"">g.ov.b.ogg.ha.n.a@gmail.com</a>
<a href=""mailto:go.v.bo.g.gh.ana@gmail.com"">go.v.bo.g.gh.ana@gmail.com</a>
<a href=""mailto:g.o.v.bog.gh.a.na@gmail.com"">g.o.v.bog.gh.a.na@gmail.com</a>
<a href=""mailto:govbogg.ha.n.a@gmail.com"">govbogg.ha.n.a@gmail.com</a>
<a href=""mailto:g.ovb.og.gha.n.a@gmail.com"">g.ovb.og.gha.n.a@gmail.com</a>
<a href=""mailto:g.o.vbo.g.g.h.ana@gmail.com"">g.o.vbo.g.g.h.ana@gmail.com</a>
<a href=""mailto:g.o.vboggha.n.a@gmail.com"">g.o.vboggha.n.a@gmail.com</a>
<a href=""mailto:go.v.bo.g.gh.a.na@gmail.com"">go.v.bo.g.gh.a.na@gmail.com</a>
<a href=""mailto:go.vb.o.ggh.a.na@gmail.com"">go.vb.o.ggh.a.na@gmail.com</a>
<a href=""mailto:go.v.b.o.g.gh.a.n.a@gmail.com"">go.v.b.o.g.gh.a.n.a@gmail.com</a>
<a href=""mailto:g.o.v.bo.gg.h.a.n.a@gmail.com"">g.o.v.bo.gg.h.a.n.a@gmail.com</a>
<a href=""mailto:go.vb.ogg.han.a@gmail.com"">go.vb.ogg.han.a@gmail.com</a>
<a href=""mailto:g.ov.b.o.ggh.a.na@gmail.com"">g.ov.b.o.ggh.a.na@gmail.com</a>
<a href=""mailto:govb.o.gghan.a@gmail.com"">govb.o.gghan.a@gmail.com</a>
<a href=""mailto:go.vbo.ggha.na@gmail.com"">go.vbo.ggha.na@gmail.com</a>
<a href=""mailto:g.ov.bog.g.h.ana@gmail.com"">g.ov.bog.g.h.ana@gmail.com</a>
<a href=""mailto:g.o.vb.og.gha.n.a@gmail.com"">g.o.vb.og.gha.n.a@gmail.com</a>
<a href=""mailto:g.ovb.og.g.han.a@gmail.com"">g.ovb.og.g.han.a@gmail.com</a>
<a href=""mailto:g.o.v.bo.gg.ha.na@gmail.com"">g.o.v.bo.gg.ha.na@gmail.com</a>
<a href=""mailto:govbog.gh.a.n.a@gmail.com"">govbog.gh.a.n.a@gmail.com</a>
<a href=""mailto:g.o.vbog.g.hana@gmail.com"">g.o.vbog.g.hana@gmail.com</a>
<a href=""mailto:g.ovbo.ggh.a.n.a@gmail.com"">g.ovbo.ggh.a.n.a@gmail.com</a>
<a href=""mailto:go.vbo.g.g.h.a.n.a@gmail.com"">go.vbo.g.g.h.a.n.a@gmail.com</a>
<a href=""mailto:go.v.b.og.g.h.a.na@gmail.com"">go.v.b.og.g.h.a.na@gmail.com</a>
<a href=""mailto:go.v.bogghana@gmail.com"">go.v.bogghana@gmail.com</a>
<a href=""mailto:go.vbo.g.gha.n.a@gmail.com"">go.vbo.g.gha.n.a@gmail.com</a>
<a href=""mailto:go.vbo.g.g.h.ana@gmail.com"">go.vbo.g.g.h.ana@gmail.com</a>
<a href=""mailto:go.vb.ogg.h.ana@gmail.com"">go.vb.ogg.h.ana@gmail.com</a>
<a href=""mailto:g.ovbo.g.gh.an.a@gmail.com"">g.ovbo.g.gh.an.a@gmail.com</a>
<a href=""mailto:g.o.v.b.o.gg.ha.na@gmail.com"">g.o.v.b.o.gg.ha.na@gmail.com</a>
<a href=""mailto:g.ovbog.g.ha.na@gmail.com"">g.ovbog.g.ha.na@gmail.com</a>
<a href=""mailto:g.o.v.bog.g.han.a@gmail.com"">g.o.v.bog.g.han.a@gmail.com</a>
<a href=""mailto:gov.b.o.gghana@gmail.com"">gov.b.o.gghana@gmail.com</a>
<a href=""mailto:go.vbog.ghana@gmail.com"">go.vbog.ghana@gmail.com</a>
<a href=""mailto:govbog.g.h.an.a@gmail.com"">govbog.g.h.an.a@gmail.com</a>
<a href=""mailto:g.ov.bo.g.gh.a.n.a@gmail.com"">g.ov.bo.g.gh.a.n.a@gmail.com</a>
<a href=""mailto:govbo.g.g.h.an.a@gmail.com"">govbo.g.g.h.an.a@gmail.com</a>
<a href=""mailto:go.vbo.gg.h.an.a@gmail.com"">go.vbo.gg.h.an.a@gmail.com</a>
<a href=""mailto:go.vbog.g.hana@gmail.com"">go.vbog.g.hana@gmail.com</a>
<a href=""mailto:govb.og.ghan.a@gmail.com"">govb.og.ghan.a@gmail.com</a>
<a href=""mailto:go.vbog.g.han.a@gmail.com"">go.vbog.g.han.a@gmail.com</a>
<a href=""mailto:govbo.ggh.a.na@gmail.com"">govbo.ggh.a.na@gmail.com</a>
<a href=""mailto:go.vbogg.ha.na@gmail.com"">go.vbogg.ha.na@gmail.com</a>
<a href=""mailto:gov.b.ogghan.a@gmail.com"">gov.b.ogghan.a@gmail.com</a>
<a href=""mailto:g.ov.bo.ggh.an.a@gmail.com"">g.ov.bo.ggh.an.a@gmail.com</a>
<a href=""mailto:gov.bog.ghana@gmail.com"">gov.bog.ghana@gmail.com</a>
<a href=""mailto:govbogghan.a@gmail.com"">govbogghan.a@gmail.com</a>
<a href=""mailto:go.v.b.ogg.ha.na@gmail.com"">go.v.b.ogg.ha.na@gmail.com</a>
<a href=""mailto:govb.ogg.h.a.n.a@gmail.com"">govb.ogg.h.a.n.a@gmail.com</a>
<a href=""mailto:go.vb.ogghan.a@gmail.com"">go.vb.ogghan.a@gmail.com</a>
<a href=""mailto:go.vb.ogg.ha.na@gmail.com"">go.vb.ogg.ha.na@gmail.com</a>
<a href=""mailto:go.v.bog.g.h.ana@gmail.com"">go.v.bog.g.h.ana@gmail.com</a>
<a href=""mailto:gov.b.og.ghana@gmail.com"">gov.b.og.ghana@gmail.com</a>
<a href=""mailto:go.v.boggh.a.n.a@gmail.com"">go.v.boggh.a.n.a@gmail.com</a>
<a href=""mailto:go.v.boggh.ana@gmail.com"">go.v.boggh.ana@gmail.com</a>
<a href=""mailto:g.ovb.o.ggha.n.a@gmail.com"">g.ovb.o.ggha.n.a@gmail.com</a>
<a href=""mailto:g.ov.boggha.na@gmail.com"">g.ov.boggha.na@gmail.com</a>
<a href=""mailto:g.o.vboggh.an.a@gmail.com"">g.o.vboggh.an.a@gmail.com</a>
<a href=""mailto:g.o.v.b.o.g.g.hana@gmail.com"">g.o.v.b.o.g.g.hana@gmail.com</a>
<a href=""mailto:g.o.vbo.gg.han.a@gmail.com"">g.o.vbo.gg.han.a@gmail.com</a>
<a href=""mailto:g.ovbo.ggh.an.a@gmail.com"">g.ovbo.ggh.an.a@gmail.com</a>
<a href=""mailto:g.ov.b.og.gh.a.n.a@gmail.com"">g.ov.b.og.gh.a.n.a@gmail.com</a>
<a href=""mailto:gov.bo.g.g.ha.n.a@gmail.com"">gov.bo.g.g.ha.n.a@gmail.com</a>
<a href=""mailto:g.o.vboggh.ana@gmail.com"">g.o.vboggh.ana@gmail.com</a>
<a href=""mailto:g.ov.b.o.gg.han.a@gmail.com"">g.ov.b.o.gg.han.a@gmail.com</a>
<a href=""mailto:gov.b.o.g.gh.an.a@gmail.com"">gov.b.o.g.gh.an.a@gmail.com</a>
<a href=""mailto:g.ovb.oggha.na@gmail.com"">g.ovb.oggha.na@gmail.com</a>
<a href=""mailto:g.o.vbo.ggh.ana@gmail.com"">g.o.vbo.ggh.ana@gmail.com</a>
<a href=""mailto:g.ov.bog.g.hana@gmail.com"">g.ov.bog.g.hana@gmail.com</a>
<a href=""mailto:g.ovb.og.gh.a.n.a@gmail.com"">g.ovb.og.gh.a.n.a@gmail.com</a>
<a href=""mailto:go.v.bo.ggha.na@gmail.com"">go.v.bo.ggha.na@gmail.com</a>
<a href=""mailto:go.vb.og.g.h.a.n.a@gmail.com"">go.vb.og.g.h.a.n.a@gmail.com</a>
<a href=""mailto:govbo.g.g.ha.n.a@gmail.com"">govbo.g.g.ha.n.a@gmail.com</a>
<a href=""mailto:gov.bo.g.gh.a.n.a@gmail.com"">gov.bo.g.gh.a.n.a@gmail.com</a>
<a href=""mailto:g.ovb.o.g.ghana@gmail.com"">g.ovb.o.g.ghana@gmail.com</a>
<a href=""mailto:g.ovb.og.g.ha.n.a@gmail.com"">g.ovb.og.g.ha.n.a@gmail.com</a>
<a href=""mailto:go.v.b.og.g.hana@gmail.com"">go.v.b.og.g.hana@gmail.com</a>
<a href=""mailto:gov.b.og.gha.na@gmail.com"">gov.b.og.gha.na@gmail.com</a>
<a href=""mailto:g.o.vb.ogg.h.a.n.a@gmail.com"">g.o.vb.ogg.h.a.n.a@gmail.com</a>
<a href=""mailto:go.vb.o.ggha.n.a@gmail.com"">go.vb.o.ggha.n.a@gmail.com</a>
<a href=""mailto:govbogg.hana@gmail.com"">govbogg.hana@gmail.com</a>
<a href=""mailto:g.o.v.boggh.a.n.a@gmail.com"">g.o.v.boggh.a.n.a@gmail.com</a>
<a href=""mailto:govbog.ghana@gmail.com"">govbog.ghana@gmail.com</a>
<a href=""mailto:go.vb.ogg.h.a.na@gmail.com"">go.vb.ogg.h.a.na@gmail.com</a>
<a href=""mailto:go.v.b.o.g.g.han.a@gmail.com"">go.v.b.o.g.g.han.a@gmail.com</a>
<a href=""mailto:govb.o.ggha.na@gmail.com"">govb.o.ggha.na@gmail.com</a>
<a href=""mailto:gov.b.og.gh.an.a@gmail.com"">gov.b.og.gh.an.a@gmail.com</a>
<a href=""mailto:g.ovbogg.ha.na@gmail.com"">g.ovbogg.ha.na@gmail.com</a>
<a href=""mailto:govb.o.g.g.h.ana@gmail.com"">govb.o.g.g.h.ana@gmail.com</a>
<a href=""mailto:g.o.vbogg.h.a.n.a@gmail.com"">g.o.vbogg.h.a.n.a@gmail.com</a>
<a href=""mailto:g.ov.bo.g.g.ha.na@gmail.com"">g.ov.bo.g.g.ha.na@gmail.com</a>
<a href=""mailto:gov.bo.g.gha.na@gmail.com"">gov.bo.g.gha.na@gmail.com</a>
<a href=""mailto:go.v.b.oggha.n.a@gmail.com"">go.v.b.oggha.n.a@gmail.com</a>
<a href=""mailto:g.o.vbogg.h.an.a@gmail.com"">g.o.vbogg.h.an.a@gmail.com</a>
<a href=""mailto:g.ov.b.o.g.gh.an.a@gmail.com"">g.ov.b.o.g.gh.an.a@gmail.com</a>
<a href=""mailto:govb.og.gh.a.n.a@gmail.com"">govb.og.gh.a.n.a@gmail.com</a>
<a href=""mailto:govbo.gg.h.a.n.a@gmail.com"">govbo.gg.h.a.n.a@gmail.com</a>
<a href=""mailto:govb.og.gh.ana@gmail.com"">govb.og.gh.ana@gmail.com</a>
<a href=""mailto:govbo.g.ghan.a@gmail.com"">govbo.g.ghan.a@gmail.com</a>
<a href=""mailto:g.ov.b.og.g.h.ana@gmail.com"">g.ov.b.og.g.h.ana@gmail.com</a>
<a href=""mailto:go.vbo.g.gh.a.na@gmail.com"">go.vbo.g.gh.a.na@gmail.com</a>
<a href=""mailto:g.ov.b.ogg.h.ana@gmail.com"">g.ov.b.ogg.h.ana@gmail.com</a>
<a href=""mailto:govbo.gg.hana@gmail.com"">govbo.gg.hana@gmail.com</a>
<a href=""mailto:g.ovb.og.ghan.a@gmail.com"">g.ovb.og.ghan.a@gmail.com</a>
<a href=""mailto:g.o.vb.o.gghana@gmail.com"">g.o.vb.o.gghana@gmail.com</a>
<a href=""mailto:gov.bo.gg.han.a@gmail.com"">gov.bo.gg.han.a@gmail.com</a>
<a href=""mailto:g.o.vb.o.g.gh.a.n.a@gmail.com"">g.o.vb.o.g.gh.a.n.a@gmail.com</a>
<a href=""mailto:gov.bog.g.h.an.a@gmail.com"">gov.bog.g.h.an.a@gmail.com</a>
<a href=""mailto:gov.bo.g.g.hana@gmail.com"">gov.bo.g.g.hana@gmail.com</a>
<a href=""mailto:g.o.vb.o.ggh.a.na@gmail.com"">g.o.vb.o.ggh.a.na@gmail.com</a>
<a href=""mailto:go.vbo.g.g.ha.n.a@gmail.com"">go.vbo.g.g.ha.n.a@gmail.com</a>
<a href=""mailto:g.ov.bog.g.han.a@gmail.com"">g.ov.bog.g.han.a@gmail.com</a>
<a href=""mailto:go.v.b.og.ghana@gmail.com"">go.v.b.og.ghana@gmail.com</a>
<a href=""mailto:g.o.vbo.g.g.han.a@gmail.com"">g.o.vbo.g.g.han.a@gmail.com</a>
<a href=""mailto:g.o.v.bo.g.gha.n.a@gmail.com"">g.o.v.bo.g.gha.n.a@gmail.com</a>
<a href=""mailto:g.o.v.bo.g.ghan.a@gmail.com"">g.o.v.bo.g.ghan.a@gmail.com</a>
<a href=""mailto:go.vb.o.gg.ha.n.a@gmail.com"">go.vb.o.gg.ha.n.a@gmail.com</a>
<a href=""mailto:govb.o.g.gh.a.na@gmail.com"">govb.o.g.gh.a.na@gmail.com</a>
<a href=""mailto:govbogg.ha.na@gmail.com"">govbogg.ha.na@gmail.com</a>
<a href=""mailto:g.o.vbo.g.ghana@gmail.com"">g.o.vbo.g.ghana@gmail.com</a>
<a href=""mailto:g.o.vbo.gg.h.a.n.a@gmail.com"">g.o.vbo.gg.h.a.n.a@gmail.com</a>
<a href=""mailto:g.ov.bog.gh.a.n.a@gmail.com"">g.ov.bog.gh.a.n.a@gmail.com</a>
<a href=""mailto:g.ov.bog.g.h.an.a@gmail.com"">g.ov.bog.g.h.an.a@gmail.com</a>
<a href=""mailto:go.vbog.gh.a.na@gmail.com"">go.vbog.gh.a.na@gmail.com</a>
<a href=""mailto:gov.bog.g.h.a.na@gmail.com"">gov.bog.g.h.a.na@gmail.com</a>
<a href=""mailto:g.o.vbo.gg.h.a.na@gmail.com"">g.o.vbo.gg.h.a.na@gmail.com</a>
<a href=""mailto:govb.og.g.ha.na@gmail.com"">govb.og.g.ha.na@gmail.com</a>
<a href=""mailto:govb.o.g.g.h.a.n.a@gmail.com"">govb.o.g.g.h.a.n.a@gmail.com</a>
<a href=""mailto:g.ovbog.ghana@gmail.com"">g.ovbog.ghana@gmail.com</a>
<a href=""mailto:go.v.b.o.gghan.a@gmail.com"">go.v.b.o.gghan.a@gmail.com</a>
<a href=""mailto:g.ov.boggh.an.a@gmail.com"">g.ov.boggh.an.a@gmail.com</a>
<a href=""mailto:go.v.b.o.g.ghana@gmail.com"">go.v.b.o.g.ghana@gmail.com</a>
<a href=""mailto:govb.og.gha.na@gmail.com"">govb.og.gha.na@gmail.com</a>
<a href=""mailto:gov.b.og.g.ha.na@gmail.com"">gov.b.og.g.ha.na@gmail.com</a>
<a href=""mailto:g.o.v.bo.g.g.h.an.a@gmail.com"">g.o.v.bo.g.g.h.an.a@gmail.com</a>
<a href=""mailto:govbog.g.h.a.na@gmail.com"">govbog.g.h.a.na@gmail.com</a>
<a href=""mailto:govb.o.gghana@gmail.com"">govb.o.gghana@gmail.com</a>
<a href=""mailto:go.vb.og.g.h.a.na@gmail.com"">go.vb.og.g.h.a.na@gmail.com</a>
<a href=""mailto:go.vbo.gghana@gmail.com"">go.vbo.gghana@gmail.com</a>
<a href=""mailto:go.v.bog.gh.a.na@gmail.com"">go.v.bog.gh.a.na@gmail.com</a>
<a href=""mailto:govbog.ghan.a@gmail.com"">govbog.ghan.a@gmail.com</a>
<a href=""mailto:gov.bog.gha.n.a@gmail.com"">gov.bog.gha.n.a@gmail.com</a>
<a href=""mailto:gov.bo.gg.h.ana@gmail.com"">gov.bo.gg.h.ana@gmail.com</a>
<a href=""mailto:g.o.v.boggha.n.a@gmail.com"">g.o.v.boggha.n.a@gmail.com</a>
<a href=""mailto:go.v.b.ogg.h.a.n.a@gmail.com"">go.v.b.ogg.h.a.n.a@gmail.com</a>
<a href=""mailto:g.o.v.b.o.g.gh.ana@gmail.com"">g.o.v.b.o.g.gh.ana@gmail.com</a>
<a href=""mailto:go.v.bo.g.g.hana@gmail.com"">go.v.bo.g.g.hana@gmail.com</a>
<a href=""mailto:g.ov.bo.gg.ha.n.a@gmail.com"">g.ov.bo.gg.ha.n.a@gmail.com</a>
<a href=""mailto:g.o.vb.o.g.gh.a.na@gmail.com"">g.o.vb.o.g.gh.a.na@gmail.com</a>
<a href=""mailto:govb.o.ggh.an.a@gmail.com"">govb.o.ggh.an.a@gmail.com</a>
<a href=""mailto:govb.og.g.h.a.na@gmail.com"">govb.og.g.h.a.na@gmail.com</a>
<a href=""mailto:g.o.vb.ogg.h.ana@gmail.com"">g.o.vb.ogg.h.ana@gmail.com</a>
<a href=""mailto:gov.bog.g.ha.n.a@gmail.com"">gov.bog.g.ha.n.a@gmail.com</a>
<a href=""mailto:gov.b.o.gg.hana@gmail.com"">gov.b.o.gg.hana@gmail.com</a>
<a href=""mailto:g.o.v.bo.gghan.a@gmail.com"">g.o.v.bo.gghan.a@gmail.com</a>
<a href=""mailto:go.v.boggh.a.na@gmail.com"">go.v.boggh.a.na@gmail.com</a>
<a href=""mailto:g.o.v.bog.g.h.ana@gmail.com"">g.o.v.bog.g.h.ana@gmail.com</a>
<a href=""mailto:g.o.v.bogghan.a@gmail.com"">g.o.v.bogghan.a@gmail.com</a>
<a href=""mailto:g.o.v.b.ogg.h.a.na@gmail.com"">g.o.v.b.ogg.h.a.na@gmail.com</a>
<a href=""mailto:g.o.v.bo.g.gh.an.a@gmail.com"">g.o.v.bo.g.gh.an.a@gmail.com</a>
<a href=""mailto:g.o.v.b.og.gh.a.n.a@gmail.com"">g.o.v.b.og.gh.a.n.a@gmail.com</a>
<a href=""mailto:gov.bo.ggha.n.a@gmail.com"">gov.bo.ggha.n.a@gmail.com</a>
<a href=""mailto:g.ov.bog.g.ha.na@gmail.com"">g.ov.bog.g.ha.na@gmail.com</a>
<a href=""mailto:govbogghana@gmail.com"">govbogghana@gmail.com</a>
<a href=""mailto:g.ov.bogg.h.a.n.a@gmail.com"">g.ov.bogg.h.a.n.a@gmail.com</a>
<a href=""mailto:g.o.v.bog.g.ha.n.a@gmail.com"">g.o.v.bog.g.ha.n.a@gmail.com</a>
<a href=""mailto:g.ov.bo.ggh.ana@gmail.com"">g.ov.bo.ggh.ana@gmail.com</a>
<a href=""mailto:g.o.v.b.oggha.n.a@gmail.com"">g.o.v.b.oggha.n.a@gmail.com</a>
<a href=""mailto:gcbbankplcghana@gmail.com"">gcbbankplcghana@gmail.com</a>
<a href=""mailto:gcb.ban.k.pl.cgh.a.n.a@gmail.com"">gcb.ban.k.pl.cgh.a.n.a@gmail.com</a>
<a href=""mailto:g.cb.ba.nk.p.l.cgh.a.n.a@gmail.com"">g.cb.ba.nk.p.l.cgh.a.n.a@gmail.com</a>
<a href=""mailto:g.c.bba.n.k.plc.gha.na@gmail.com"">g.c.bba.n.k.plc.gha.na@gmail.com</a>
<a href=""mailto:g.c.bban.k.pl.c.gh.an.a@gmail.com"">g.c.bban.k.pl.c.gh.an.a@gmail.com</a>
<a href=""mailto:g.c.bban.kp.l.cgha.na@gmail.com"">g.c.bban.kp.l.cgha.na@gmail.com</a>
<a href=""mailto:g.c.b.b.ankplc.gh.a.na@gmail.com"">g.c.b.b.ankplc.gh.a.na@gmail.com</a>
<a href=""mailto:gcb.ba.n.kpl.c.g.h.a.na@gmail.com"">gcb.ba.n.kpl.c.g.h.a.na@gmail.com</a>
<a href=""mailto:g.c.b.b.a.nk.p.l.cghan.a@gmail.com"">g.c.b.b.a.nk.p.l.cghan.a@gmail.com</a>
<a href=""mailto:gcbban.kplc.ghan.a@gmail.com"">gcbban.kplc.ghan.a@gmail.com</a>
<a href=""mailto:g.c.bba.nkp.l.cg.h.ana@gmail.com"">g.c.bba.nkp.l.cg.h.ana@gmail.com</a>
<a href=""mailto:g.cb.ba.nkplcgh.ana@gmail.com"">g.cb.ba.nkplcgh.ana@gmail.com</a>
<a href=""mailto:gc.b.ban.k.p.lc.ghan.a@gmail.com"">gc.b.ban.k.p.lc.ghan.a@gmail.com</a>
<a href=""mailto:gc.b.b.a.n.kp.l.c.g.h.a.n.a@gmail.com"">gc.b.b.a.n.kp.l.c.g.h.a.n.a@gmail.com</a>
<a href=""mailto:gcb.b.ank.pl.c.g.h.ana@gmail.com"">gcb.b.ank.pl.c.g.h.ana@gmail.com</a>
<a href=""mailto:g.cb.b.ankplc.g.han.a@gmail.com"">g.cb.b.ankplc.g.han.a@gmail.com</a>
<a href=""mailto:g.c.bban.k.pl.cg.han.a@gmail.com"">g.c.bban.k.pl.cg.han.a@gmail.com</a>
<a href=""mailto:gc.bba.nk.plcgh.an.a@gmail.com"">gc.bba.nk.plcgh.an.a@gmail.com</a>
<a href=""mailto:gcb.ban.k.p.lcg.h.an.a@gmail.com"">gcb.ban.k.p.lcg.h.an.a@gmail.com</a>
<a href=""mailto:g.cbban.kplc.gh.a.n.a@gmail.com"">g.cbban.kplc.gh.a.n.a@gmail.com</a>
<a href=""mailto:gc.b.b.an.kp.l.cg.h.a.na@gmail.com"">gc.b.b.an.kp.l.cg.h.a.na@gmail.com</a>
<a href=""mailto:gc.b.ban.k.pl.cg.h.a.na@gmail.com"">gc.b.ban.k.pl.cg.h.a.na@gmail.com</a>
<a href=""mailto:g.cbb.a.nkpl.cgha.na@gmail.com"">g.cbb.a.nkpl.cgha.na@gmail.com</a>
<a href=""mailto:gc.bb.ankp.lc.gh.a.n.a@gmail.com"">gc.bb.ankp.lc.gh.a.n.a@gmail.com</a>
<a href=""mailto:g.cbb.an.k.pl.cgh.a.na@gmail.com"">g.cbb.an.k.pl.cgh.a.na@gmail.com</a>
<a href=""mailto:gc.bba.nk.p.l.c.g.han.a@gmail.com"">gc.bba.nk.p.l.c.g.han.a@gmail.com</a>
<a href=""mailto:gcb.b.a.n.kpl.c.ghana@gmail.com"">gcb.b.a.n.kpl.c.ghana@gmail.com</a>
<a href=""mailto:gcb.b.a.n.k.p.lc.gha.na@gmail.com"">gcb.b.a.n.k.p.lc.gha.na@gmail.com</a>
<a href=""mailto:gc.b.b.ankplc.g.han.a@gmail.com"">gc.b.b.ankplc.g.han.a@gmail.com</a>
<a href=""mailto:gcb.b.a.nk.p.l.c.ghan.a@gmail.com"">gcb.b.a.nk.p.l.c.ghan.a@gmail.com</a>
<a href=""mailto:g.cb.b.an.kp.lcg.ha.na@gmail.com"">g.cb.b.an.kp.lcg.ha.na@gmail.com</a>
<a href=""mailto:gc.b.b.ank.p.lcghan.a@gmail.com"">gc.b.b.ank.p.lcghan.a@gmail.com</a>
<a href=""mailto:g.cbban.k.p.l.c.gha.na@gmail.com"">g.cbban.k.p.l.c.gha.na@gmail.com</a>
<a href=""mailto:g.c.b.ba.nk.pl.c.g.h.an.a@gmail.com"">g.c.b.ba.nk.pl.c.g.h.an.a@gmail.com</a>
<a href=""mailto:gc.b.bank.pl.cg.h.a.na@gmail.com"">gc.b.bank.pl.cg.h.a.na@gmail.com</a>
<a href=""mailto:g.c.bb.a.n.k.pl.cghan.a@gmail.com"">g.c.bb.a.n.k.pl.cghan.a@gmail.com</a>
<a href=""mailto:gcbb.an.k.plcg.h.a.na@gmail.com"">gcbb.an.k.plcg.h.a.na@gmail.com</a>
<a href=""mailto:gcbba.nk.p.l.c.g.hana@gmail.com"">gcbba.nk.p.l.c.g.hana@gmail.com</a>
<a href=""mailto:g.cbb.a.nk.p.lc.ghana@gmail.com"">g.cbb.a.nk.p.lc.ghana@gmail.com</a>
<a href=""mailto:gcbbankpl.cgha.n.a@gmail.com"">gcbbankpl.cgha.n.a@gmail.com</a>
<a href=""mailto:gcb.ba.n.k.plc.gh.a.na@gmail.com"">gcb.ba.n.k.plc.gh.a.na@gmail.com</a>
<a href=""mailto:g.c.b.bank.plcg.h.a.na@gmail.com"">g.c.b.bank.plcg.h.a.na@gmail.com</a>
<a href=""mailto:gcb.ban.k.pl.cg.h.a.na@gmail.com"">gcb.ban.k.pl.cg.h.a.na@gmail.com</a>
<a href=""mailto:gc.b.b.an.kpl.c.g.ha.n.a@gmail.com"">gc.b.b.an.kpl.c.g.ha.n.a@gmail.com</a>
<a href=""mailto:gcbban.kp.l.cg.ha.n.a@gmail.com"">gcbban.kp.l.cg.ha.n.a@gmail.com</a>
<a href=""mailto:g.c.bba.n.k.p.lcgha.n.a@gmail.com"">g.c.bba.n.k.p.lcgha.n.a@gmail.com</a>
<a href=""mailto:gc.bba.nkpl.c.g.hana@gmail.com"">gc.bba.nkpl.c.g.hana@gmail.com</a>
<a href=""mailto:gc.bb.a.nk.p.lc.gh.ana@gmail.com"">gc.bb.a.nk.p.lc.gh.ana@gmail.com</a>
<a href=""mailto:g.cb.b.an.k.p.l.c.gh.a.n.a@gmail.com"">g.cb.b.an.k.p.l.c.gh.a.n.a@gmail.com</a>
<a href=""mailto:g.c.b.ban.k.plc.g.hana@gmail.com"">g.c.b.ban.k.plc.g.hana@gmail.com</a>
<a href=""mailto:gcb.b.a.nk.p.l.c.g.h.ana@gmail.com"">gcb.b.a.nk.p.l.c.g.h.ana@gmail.com</a>
<a href=""mailto:gcb.b.ankpl.cgh.an.a@gmail.com"">gcb.b.ankpl.cgh.an.a@gmail.com</a>
<a href=""mailto:gc.b.b.a.n.kplc.g.ha.n.a@gmail.com"">gc.b.b.a.n.kplc.g.ha.n.a@gmail.com</a>
<a href=""mailto:g.c.b.ba.n.kp.lcg.h.ana@gmail.com"">g.c.b.ba.n.kp.lcg.h.ana@gmail.com</a>
<a href=""mailto:g.c.b.b.a.n.kplc.g.han.a@gmail.com"">g.c.b.b.a.n.kplc.g.han.a@gmail.com</a>
<a href=""mailto:g.cbba.nkp.l.cg.h.an.a@gmail.com"">g.cbba.nkp.l.cg.h.an.a@gmail.com</a>
<a href=""mailto:gc.bb.a.nk.plcghan.a@gmail.com"">gc.bb.a.nk.plcghan.a@gmail.com</a>
<a href=""mailto:g.c.b.b.a.nkp.lc.g.h.a.na@gmail.com"">g.c.b.b.a.nkp.lc.g.h.a.na@gmail.com</a>
<a href=""mailto:g.c.bb.an.kplc.g.h.a.na@gmail.com"">g.c.bb.an.kplc.g.h.a.na@gmail.com</a>
<a href=""mailto:g.c.b.b.an.kp.lc.g.h.an.a@gmail.com"">g.c.b.b.an.kp.lc.g.h.an.a@gmail.com</a>
<a href=""mailto:g.c.b.ba.n.k.p.l.cgha.na@gmail.com"">g.c.b.ba.n.k.p.l.cgha.na@gmail.com</a>
<a href=""mailto:g.c.b.bank.p.l.c.gh.an.a@gmail.com"">g.c.b.bank.p.l.c.gh.an.a@gmail.com</a>
<a href=""mailto:gcb.ba.n.k.p.l.cgh.an.a@gmail.com"">gcb.ba.n.k.p.l.cgh.an.a@gmail.com</a>
<a href=""mailto:g.cbb.an.k.p.l.c.g.ha.na@gmail.com"">g.cbb.an.k.p.l.c.g.ha.na@gmail.com</a>
<a href=""mailto:gcbb.a.nkpl.cgh.an.a@gmail.com"">gcbb.a.nkpl.cgh.an.a@gmail.com</a>
<a href=""mailto:g.c.b.b.an.kplc.ghana@gmail.com"">g.c.b.b.an.kplc.ghana@gmail.com</a>
<a href=""mailto:gcbbank.p.l.c.gha.n.a@gmail.com"">gcbbank.p.l.c.gha.n.a@gmail.com</a>
<a href=""mailto:gcb.bank.pl.cghan.a@gmail.com"">gcb.bank.pl.cghan.a@gmail.com</a>
<a href=""mailto:g.cb.bank.pl.c.g.h.a.n.a@gmail.com"">g.cb.bank.pl.c.g.h.a.n.a@gmail.com</a>
<a href=""mailto:g.c.bban.k.p.lcgh.a.n.a@gmail.com"">g.c.bban.k.p.lcgh.a.n.a@gmail.com</a>
<a href=""mailto:gc.bba.nk.pl.cghan.a@gmail.com"">gc.bba.nk.pl.cghan.a@gmail.com</a>
<a href=""mailto:gc.bb.a.n.kplc.gh.a.n.a@gmail.com"">gc.bb.a.n.kplc.gh.a.n.a@gmail.com</a>
<a href=""mailto:gcb.ban.k.p.l.c.gha.na@gmail.com"">gcb.ban.k.p.l.c.gha.na@gmail.com</a>
<a href=""mailto:g.cbb.ank.pl.c.gha.n.a@gmail.com"">g.cbb.ank.pl.c.gha.n.a@gmail.com</a>
<a href=""mailto:g.c.b.bankpl.c.g.h.a.na@gmail.com"">g.c.b.bankpl.c.g.h.a.na@gmail.com</a>
<a href=""mailto:gc.b.ba.nk.pl.cgha.n.a@gmail.com"">gc.b.ba.nk.pl.cgha.n.a@gmail.com</a>
<a href=""mailto:g.cb.b.a.nkplc.g.hana@gmail.com"">g.cb.b.a.nkplc.g.hana@gmail.com</a>
<a href=""mailto:g.c.b.ba.n.kpl.cghan.a@gmail.com"">g.c.b.ba.n.kpl.cghan.a@gmail.com</a>
<a href=""mailto:g.cb.b.a.n.kplcg.han.a@gmail.com"">g.cb.b.a.n.kplcg.han.a@gmail.com</a>
<a href=""mailto:g.cbba.nkpl.c.g.h.ana@gmail.com"">g.cbba.nkpl.c.g.h.ana@gmail.com</a>
<a href=""mailto:g.cb.ba.n.kplcg.h.an.a@gmail.com"">g.cb.ba.n.kplcg.h.an.a@gmail.com</a>
<a href=""mailto:gcb.ban.k.p.lc.g.h.an.a@gmail.com"">gcb.ban.k.p.lc.g.h.an.a@gmail.com</a>
<a href=""mailto:g.cb.b.ankplcgha.n.a@gmail.com"">g.cb.b.ankplcgha.n.a@gmail.com</a>
<a href=""mailto:g.cbb.ankplcghana@gmail.com"">g.cbb.ankplcghana@gmail.com</a>
<a href=""mailto:g.cbban.k.p.lc.gh.a.na@gmail.com"">g.cbban.k.p.lc.gh.a.na@gmail.com</a>
<a href=""mailto:g.cb.ba.n.k.p.lcg.h.a.na@gmail.com"">g.cb.ba.n.k.p.lcg.h.a.na@gmail.com</a>
<a href=""mailto:g.cbb.a.nkp.l.c.gh.a.n.a@gmail.com"">g.cbb.a.nkp.l.c.gh.a.n.a@gmail.com</a>
<a href=""mailto:g.cbb.a.n.kplcgh.a.na@gmail.com"">g.cbb.a.n.kplcgh.a.na@gmail.com</a>
<a href=""mailto:gc.bb.an.k.plcg.h.an.a@gmail.com"">gc.bb.an.k.plcg.h.an.a@gmail.com</a>
<a href=""mailto:gc.b.ba.nkp.l.cghan.a@gmail.com"">gc.b.ba.nkp.l.cghan.a@gmail.com</a>
<a href=""mailto:gc.bbank.pl.cgh.a.na@gmail.com"">gc.bbank.pl.cgh.a.na@gmail.com</a>
<a href=""mailto:g.c.bbankplcgha.na@gmail.com"">g.c.bbankplcgha.na@gmail.com</a>
<a href=""mailto:g.c.bb.an.k.p.l.cg.hana@gmail.com"">g.c.bb.an.k.p.l.cg.hana@gmail.com</a>
<a href=""mailto:g.cbbank.p.lc.gh.an.a@gmail.com"">g.cbbank.p.lc.gh.an.a@gmail.com</a>
<a href=""mailto:gc.bbankp.lcgh.a.na@gmail.com"">gc.bbankp.lcgh.a.na@gmail.com</a>
<a href=""mailto:g.c.bbankp.lcghana@gmail.com"">g.c.bbankp.lcghana@gmail.com</a>
<a href=""mailto:g.cb.b.a.nk.p.l.cg.ha.n.a@gmail.com"">g.cb.b.a.nk.p.l.cg.ha.n.a@gmail.com</a>
<a href=""mailto:g.c.b.bankplcg.ha.na@gmail.com"">g.c.b.bankplcg.ha.na@gmail.com</a>
<a href=""mailto:g.cb.b.a.n.kplcg.ha.n.a@gmail.com"">g.cb.b.a.n.kplcg.ha.n.a@gmail.com</a>
<a href=""mailto:g.cb.bank.pl.c.g.h.a.na@gmail.com"">g.cb.bank.pl.c.g.h.a.na@gmail.com</a>
<a href=""mailto:gcb.b.ank.plc.g.hana@gmail.com"">gcb.b.ank.plc.g.hana@gmail.com</a>
<a href=""mailto:g.c.b.b.ank.p.l.cg.han.a@gmail.com"">g.c.b.b.ank.p.l.cg.han.a@gmail.com</a>
<a href=""mailto:g.cbb.a.nk.p.lcg.ha.na@gmail.com"">g.cbb.a.nk.p.lcg.ha.na@gmail.com</a>
<a href=""mailto:g.cbba.n.k.pl.c.g.h.ana@gmail.com"">g.cbba.n.k.pl.c.g.h.ana@gmail.com</a>
<a href=""mailto:gcbb.a.n.k.p.lcgh.ana@gmail.com"">gcbb.a.n.k.p.lcgh.ana@gmail.com</a>
<a href=""mailto:gcbb.ank.plcg.ha.n.a@gmail.com"">gcbb.ank.plcg.ha.n.a@gmail.com</a>
<a href=""mailto:gc.b.ba.n.kp.lcg.ha.na@gmail.com"">gc.b.ba.n.kp.lcg.ha.na@gmail.com</a>
<a href=""mailto:gcb.ba.n.k.plc.g.h.ana@gmail.com"">gcb.ba.n.k.plc.g.h.ana@gmail.com</a>
<a href=""mailto:g.cbba.nkp.lcg.h.a.n.a@gmail.com"">g.cbba.nkp.lcg.h.a.n.a@gmail.com</a>
<a href=""mailto:g.c.b.ba.nkpl.c.g.h.ana@gmail.com"">g.c.b.ba.nkpl.c.g.h.ana@gmail.com</a>
<a href=""mailto:gcbb.ankpl.c.g.ha.n.a@gmail.com"">gcbb.ankpl.c.g.ha.n.a@gmail.com</a>
<a href=""mailto:g.c.bb.a.nk.pl.c.g.h.ana@gmail.com"">g.c.bb.a.nk.pl.c.g.h.ana@gmail.com</a>
<a href=""mailto:g.c.b.b.a.n.k.p.l.c.ghana@gmail.com"">g.c.b.b.a.n.k.p.l.c.ghana@gmail.com</a>
<a href=""mailto:g.cb.ban.kp.lcg.h.a.n.a@gmail.com"">g.cb.ban.kp.lcg.h.a.n.a@gmail.com</a>
<a href=""mailto:gc.b.ban.k.pl.cg.h.ana@gmail.com"">gc.b.ban.k.pl.cg.h.ana@gmail.com</a>
<a href=""mailto:gc.b.b.a.nk.p.l.cgh.a.na@gmail.com"">gc.b.b.a.nk.p.l.cgh.a.na@gmail.com</a>
<a href=""mailto:gcbban.kplc.g.han.a@gmail.com"">gcbban.kplc.g.han.a@gmail.com</a>
<a href=""mailto:gcbba.n.k.pl.c.ghan.a@gmail.com"">gcbba.n.k.pl.c.ghan.a@gmail.com</a>
<a href=""mailto:gcbbankp.l.cgh.a.na@gmail.com"">gcbbankp.l.cgh.a.na@gmail.com</a>
<a href=""mailto:g.cbb.ankpl.c.g.h.ana@gmail.com"">g.cbb.ankpl.c.g.h.ana@gmail.com</a>
<a href=""mailto:g.cbban.k.pl.cg.h.a.na@gmail.com"">g.cbban.k.pl.cg.h.a.na@gmail.com</a>
<a href=""mailto:gcbb.an.kp.l.c.ghana@gmail.com"">gcbb.an.kp.l.c.ghana@gmail.com</a>
<a href=""mailto:g.c.bbankp.l.c.g.h.a.na@gmail.com"">g.c.bbankp.l.c.g.h.a.na@gmail.com</a>
<a href=""mailto:g.c.b.ba.n.kplcghan.a@gmail.com"">g.c.b.ba.n.kplcghan.a@gmail.com</a>
<a href=""mailto:gcbba.nk.plc.g.h.a.na@gmail.com"">gcbba.nk.plc.g.h.a.na@gmail.com</a>
<a href=""mailto:gcb.ba.n.kpl.c.gha.n.a@gmail.com"">gcb.ba.n.kpl.c.gha.n.a@gmail.com</a>
<a href=""mailto:g.c.bbankplc.g.ha.na@gmail.com"">g.c.bbankplc.g.ha.na@gmail.com</a>
<a href=""mailto:gc.bba.nk.p.l.c.g.ha.n.a@gmail.com"">gc.bba.nk.p.l.c.g.ha.n.a@gmail.com</a>
<a href=""mailto:g.c.b.ba.n.k.p.l.cg.h.ana@gmail.com"">g.c.b.ba.n.k.p.l.cg.h.ana@gmail.com</a>
<a href=""mailto:gc.b.b.an.kp.lcg.ha.na@gmail.com"">gc.b.b.an.kp.lcg.ha.na@gmail.com</a>
<a href=""mailto:gcb.b.a.nkp.lcgha.na@gmail.com"">gcb.b.a.nkp.lcgha.na@gmail.com</a>
<a href=""mailto:g.cb.ba.nk.p.l.c.gha.na@gmail.com"">g.cb.ba.nk.p.l.c.gha.na@gmail.com</a>
<a href=""mailto:g.c.bbankp.l.cghana@gmail.com"">g.c.bbankp.l.cghana@gmail.com</a>
<a href=""mailto:gcbban.k.plcg.han.a@gmail.com"">gcbban.k.plcg.han.a@gmail.com</a>
<a href=""mailto:gcbb.a.n.kpl.c.g.ha.na@gmail.com"">gcbb.a.n.kpl.c.g.ha.na@gmail.com</a>
<a href=""mailto:gcb.b.a.n.k.plcgh.a.na@gmail.com"">gcb.b.a.n.k.plcgh.a.na@gmail.com</a>
<a href=""mailto:g.cb.b.ank.plc.gh.a.n.a@gmail.com"">g.cb.b.ank.plc.gh.a.n.a@gmail.com</a>
<a href=""mailto:g.cbb.ank.pl.cg.h.ana@gmail.com"">g.cbb.ank.pl.cg.h.ana@gmail.com</a>
<a href=""mailto:gcb.b.an.k.p.lcgh.an.a@gmail.com"">gcb.b.an.k.p.lcgh.an.a@gmail.com</a>
<a href=""mailto:g.c.bba.n.kplc.gha.na@gmail.com"">g.c.bba.n.kplc.gha.na@gmail.com</a>
<a href=""mailto:g.c.b.b.an.kp.lc.ghan.a@gmail.com"">g.c.b.b.an.kp.lc.ghan.a@gmail.com</a>
<a href=""mailto:g.cb.b.a.nk.p.lcgh.a.na@gmail.com"">g.cb.b.a.nk.p.lcgh.a.na@gmail.com</a>
<a href=""mailto:gc.b.b.ank.p.l.c.gh.ana@gmail.com"">gc.b.b.ank.p.l.c.gh.ana@gmail.com</a>
<a href=""mailto:gcb.b.ankplcgha.na@gmail.com"">gcb.b.ankplcgha.na@gmail.com</a>
<a href=""mailto:g.c.bba.nk.plcghan.a@gmail.com"">g.c.bba.nk.plcghan.a@gmail.com</a>
<a href=""mailto:gcbba.nkplc.g.h.an.a@gmail.com"">gcbba.nkplc.g.h.an.a@gmail.com</a>
<a href=""mailto:gcbb.a.n.k.p.lcg.h.an.a@gmail.com"">gcbb.a.n.k.p.lcg.h.an.a@gmail.com</a>
<a href=""mailto:gc.bba.n.kpl.cg.han.a@gmail.com"">gc.bba.n.kpl.cg.han.a@gmail.com</a>
<a href=""mailto:g.cb.ba.nkp.lc.gha.n.a@gmail.com"">g.cb.ba.nkp.lc.gha.n.a@gmail.com</a>
<a href=""mailto:g.c.bban.k.p.l.c.ghana@gmail.com"">g.c.bban.k.p.l.c.ghana@gmail.com</a>
<a href=""mailto:g.c.b.ban.kpl.c.g.ha.n.a@gmail.com"">g.c.b.ban.kpl.c.g.ha.n.a@gmail.com</a>
<a href=""mailto:gc.bb.a.nk.p.l.c.g.hana@gmail.com"">gc.bb.a.nk.p.l.c.g.hana@gmail.com</a>
<a href=""mailto:g.cb.bankplcgh.ana@gmail.com"">g.cb.bankplcgh.ana@gmail.com</a>
<a href=""mailto:gcbb.a.n.k.pl.cghan.a@gmail.com"">gcbb.a.n.k.pl.cghan.a@gmail.com</a>
<a href=""mailto:gcbb.a.nk.plcgh.a.na@gmail.com"">gcbb.a.nk.plcgh.a.na@gmail.com</a>
<a href=""mailto:gcbba.nk.pl.c.g.hana@gmail.com"">gcbba.nk.pl.c.g.hana@gmail.com</a>
<a href=""mailto:g.c.b.b.a.n.k.p.lcg.ha.n.a@gmail.com"">g.c.b.b.a.n.k.p.lcg.ha.n.a@gmail.com</a>
<a href=""mailto:g.cbba.n.k.p.lc.g.han.a@gmail.com"">g.cbba.n.k.p.lc.g.han.a@gmail.com</a>
<a href=""mailto:g.cbb.ankp.l.cgh.a.n.a@gmail.com"">g.cbb.ankp.l.cgh.a.n.a@gmail.com</a>
<a href=""mailto:g.cbban.kp.lc.g.ha.na@gmail.com"">g.cbban.kp.lc.g.ha.na@gmail.com</a>
<a href=""mailto:gc.b.b.ankplcgha.n.a@gmail.com"">gc.b.b.ankplcgha.n.a@gmail.com</a>
<a href=""mailto:gc.b.ba.nk.plcgh.ana@gmail.com"">gc.b.ba.nk.plcgh.ana@gmail.com</a>
<a href=""mailto:g.cbba.nk.p.lcgh.ana@gmail.com"">g.cbba.nk.p.lcgh.ana@gmail.com</a>
<a href=""mailto:g.cb.ban.k.p.l.c.gh.ana@gmail.com"">g.cb.ban.k.p.l.c.gh.ana@gmail.com</a>
<a href=""mailto:gc.bba.n.k.p.lc.g.hana@gmail.com"">gc.bba.n.k.p.lc.g.hana@gmail.com</a>
<a href=""mailto:g.cbban.k.p.lc.g.hana@gmail.com"">g.cbban.k.p.lc.g.hana@gmail.com</a>
<a href=""mailto:gcb.ba.n.k.p.l.cgh.a.n.a@gmail.com"">gcb.ba.n.k.p.l.cgh.a.n.a@gmail.com</a>
<a href=""mailto:gcb.ba.nkplc.gha.na@gmail.com"">gcb.ba.nkplc.gha.na@gmail.com</a>
<a href=""mailto:g.cb.b.an.k.p.l.c.g.h.a.n.a@gmail.com"">g.cb.b.an.k.p.l.c.g.h.a.n.a@gmail.com</a>
<a href=""mailto:gcbban.k.p.l.c.g.hana@gmail.com"">gcbban.k.p.l.c.g.hana@gmail.com</a>
<a href=""mailto:g.cb.b.a.nk.p.lc.g.h.an.a@gmail.com"">g.cb.b.a.nk.p.lc.g.h.an.a@gmail.com</a>
<a href=""mailto:gcbba.n.kplc.gh.a.n.a@gmail.com"">gcbba.n.kplc.gh.a.n.a@gmail.com</a>
<a href=""mailto:gcb.b.ank.pl.cg.hana@gmail.com"">gcb.b.ank.pl.cg.hana@gmail.com</a>
<a href=""mailto:g.c.bb.ank.p.l.cg.han.a@gmail.com"">g.c.bb.ank.p.l.cg.han.a@gmail.com</a>
<a href=""mailto:g.c.bb.a.n.k.plc.g.ha.na@gmail.com"">g.c.bb.a.n.k.plc.g.ha.na@gmail.com</a>
<a href=""mailto:gcbban.kplc.g.h.a.na@gmail.com"">gcbban.kplc.g.h.a.na@gmail.com</a>
<a href=""mailto:g.cb.b.a.nk.p.lc.g.ha.na@gmail.com"">g.cb.b.a.nk.p.lc.g.ha.na@gmail.com</a>
<a href=""mailto:g.c.b.ban.k.plcg.ha.na@gmail.com"">g.c.b.ban.k.plcg.ha.na@gmail.com</a>
<a href=""mailto:g.cb.b.ank.p.l.c.ghana@gmail.com"">g.cb.b.ank.p.l.c.ghana@gmail.com</a>
<a href=""mailto:g.c.b.ba.n.kplc.ghan.a@gmail.com"">g.c.b.ba.n.kplc.ghan.a@gmail.com</a>
<a href=""mailto:g.c.b.b.an.k.p.lcghana@gmail.com"">g.c.b.b.an.k.p.lcghana@gmail.com</a>
<a href=""mailto:gc.bban.kp.l.c.gh.a.n.a@gmail.com"">gc.bban.kp.l.c.gh.a.n.a@gmail.com</a>
<a href=""mailto:g.c.b.b.an.kplcgha.n.a@gmail.com"">g.c.b.b.an.kplcgha.n.a@gmail.com</a>
<a href=""mailto:gc.b.ba.nk.plc.g.han.a@gmail.com"">gc.b.ba.nk.plc.g.han.a@gmail.com</a>
<a href=""mailto:gcbb.ankp.l.c.g.hana@gmail.com"">gcbb.ankp.l.c.g.hana@gmail.com</a>
<a href=""mailto:g.cb.b.a.n.k.plc.ghana@gmail.com"">g.cb.b.a.n.k.plc.ghana@gmail.com</a>
<a href=""mailto:g.c.bb.a.nk.p.lc.gh.a.na@gmail.com"">g.c.bb.a.nk.p.lc.gh.a.na@gmail.com</a>
<a href=""mailto:gc.b.ba.n.k.pl.c.g.ha.n.a@gmail.com"">gc.b.ba.n.k.pl.c.g.ha.n.a@gmail.com</a>
<a href=""mailto:g.c.b.b.ank.plcg.ha.na@gmail.com"">g.c.b.b.ank.plcg.ha.na@gmail.com</a>
<a href=""mailto:g.cb.b.an.k.p.lc.ghana@gmail.com"">g.cb.b.an.k.p.lc.ghana@gmail.com</a>
<a href=""mailto:g.cbban.kplc.gha.na@gmail.com"">g.cbban.kplc.gha.na@gmail.com</a>
<a href=""mailto:gc.b.bankplc.g.han.a@gmail.com"">gc.b.bankplc.g.han.a@gmail.com</a>
<a href=""mailto:gcbba.n.kpl.cg.ha.na@gmail.com"">gcbba.n.kpl.cg.ha.na@gmail.com</a>
<a href=""mailto:g.cbb.an.kplcgh.a.na@gmail.com"">g.cbb.an.kplcgh.a.na@gmail.com</a>
<a href=""mailto:g.c.bb.a.nkp.l.c.g.han.a@gmail.com"">g.c.bb.a.nkp.l.c.g.han.a@gmail.com</a>
<a href=""mailto:gcbb.a.n.kpl.cg.h.ana@gmail.com"">gcbb.a.n.kpl.cg.h.ana@gmail.com</a>
<a href=""mailto:gcbb.ank.pl.cghana@gmail.com"">gcbb.ank.pl.cghana@gmail.com</a>
<a href=""mailto:gc.b.ba.nkplcg.ha.n.a@gmail.com"">gc.b.ba.nkplcg.ha.n.a@gmail.com</a>
<a href=""mailto:g.cbban.k.plcg.han.a@gmail.com"">g.cbban.k.plcg.han.a@gmail.com</a>
<a href=""mailto:g.cb.b.a.nk.pl.c.gh.an.a@gmail.com"">g.cb.b.a.nk.pl.c.gh.an.a@gmail.com</a>
<a href=""mailto:gcbb.a.nkp.l.c.gh.ana@gmail.com"">gcbb.a.nkp.l.c.gh.ana@gmail.com</a>
"
3ZJquQ8i,Nigerian scammers [14-2-2/2024],bombaires,AIMMS,Wednesday 14th of February 2024 10:23:06 AM CDT,"<a href=""mailto:ericmooreapexdiplomaticcourier@gmail.com"">ericmooreapexdiplomaticcourier@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+21010@gmail.com"">ericmooreapexdiplomaticcourier+21010@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+28640@gmail.com"">ericmooreapexdiplomaticcourier+28640@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+24105@gmail.com"">ericmooreapexdiplomaticcourier+24105@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+1679@gmail.com"">ericmooreapexdiplomaticcourier+1679@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+18305@gmail.com"">ericmooreapexdiplomaticcourier+18305@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+22996@gmail.com"">ericmooreapexdiplomaticcourier+22996@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+19455@gmail.com"">ericmooreapexdiplomaticcourier+19455@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+28826@gmail.com"">ericmooreapexdiplomaticcourier+28826@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+29147@gmail.com"">ericmooreapexdiplomaticcourier+29147@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+13156@gmail.com"">ericmooreapexdiplomaticcourier+13156@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+4913@gmail.com"">ericmooreapexdiplomaticcourier+4913@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+7371@gmail.com"">ericmooreapexdiplomaticcourier+7371@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+7257@gmail.com"">ericmooreapexdiplomaticcourier+7257@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+8207@gmail.com"">ericmooreapexdiplomaticcourier+8207@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+15636@gmail.com"">ericmooreapexdiplomaticcourier+15636@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+27169@gmail.com"">ericmooreapexdiplomaticcourier+27169@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+23810@gmail.com"">ericmooreapexdiplomaticcourier+23810@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+26889@gmail.com"">ericmooreapexdiplomaticcourier+26889@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+9575@gmail.com"">ericmooreapexdiplomaticcourier+9575@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+10623@gmail.com"">ericmooreapexdiplomaticcourier+10623@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+4801@gmail.com"">ericmooreapexdiplomaticcourier+4801@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+32010@gmail.com"">ericmooreapexdiplomaticcourier+32010@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+14764@gmail.com"">ericmooreapexdiplomaticcourier+14764@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+18480@gmail.com"">ericmooreapexdiplomaticcourier+18480@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+23831@gmail.com"">ericmooreapexdiplomaticcourier+23831@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+8165@gmail.com"">ericmooreapexdiplomaticcourier+8165@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+17177@gmail.com"">ericmooreapexdiplomaticcourier+17177@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+7349@gmail.com"">ericmooreapexdiplomaticcourier+7349@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+20038@gmail.com"">ericmooreapexdiplomaticcourier+20038@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+27080@gmail.com"">ericmooreapexdiplomaticcourier+27080@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+17135@gmail.com"">ericmooreapexdiplomaticcourier+17135@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+28868@gmail.com"">ericmooreapexdiplomaticcourier+28868@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+27330@gmail.com"">ericmooreapexdiplomaticcourier+27330@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+12999@gmail.com"">ericmooreapexdiplomaticcourier+12999@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+1236@gmail.com"">ericmooreapexdiplomaticcourier+1236@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+25376@gmail.com"">ericmooreapexdiplomaticcourier+25376@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+2650@gmail.com"">ericmooreapexdiplomaticcourier+2650@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+21754@gmail.com"">ericmooreapexdiplomaticcourier+21754@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+27826@gmail.com"">ericmooreapexdiplomaticcourier+27826@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+13881@gmail.com"">ericmooreapexdiplomaticcourier+13881@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+23364@gmail.com"">ericmooreapexdiplomaticcourier+23364@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+26166@gmail.com"">ericmooreapexdiplomaticcourier+26166@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+11508@gmail.com"">ericmooreapexdiplomaticcourier+11508@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+5984@gmail.com"">ericmooreapexdiplomaticcourier+5984@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+28557@gmail.com"">ericmooreapexdiplomaticcourier+28557@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+16413@gmail.com"">ericmooreapexdiplomaticcourier+16413@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+7666@gmail.com"">ericmooreapexdiplomaticcourier+7666@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+23043@gmail.com"">ericmooreapexdiplomaticcourier+23043@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+8869@gmail.com"">ericmooreapexdiplomaticcourier+8869@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+21142@gmail.com"">ericmooreapexdiplomaticcourier+21142@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+820@gmail.com"">ericmooreapexdiplomaticcourier+820@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+14599@gmail.com"">ericmooreapexdiplomaticcourier+14599@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+2417@gmail.com"">ericmooreapexdiplomaticcourier+2417@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+31965@gmail.com"">ericmooreapexdiplomaticcourier+31965@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+31646@gmail.com"">ericmooreapexdiplomaticcourier+31646@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+6248@gmail.com"">ericmooreapexdiplomaticcourier+6248@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+136@gmail.com"">ericmooreapexdiplomaticcourier+136@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+26171@gmail.com"">ericmooreapexdiplomaticcourier+26171@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+2271@gmail.com"">ericmooreapexdiplomaticcourier+2271@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+21903@gmail.com"">ericmooreapexdiplomaticcourier+21903@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+19374@gmail.com"">ericmooreapexdiplomaticcourier+19374@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+19413@gmail.com"">ericmooreapexdiplomaticcourier+19413@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+25964@gmail.com"">ericmooreapexdiplomaticcourier+25964@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+1048@gmail.com"">ericmooreapexdiplomaticcourier+1048@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+9467@gmail.com"">ericmooreapexdiplomaticcourier+9467@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+27098@gmail.com"">ericmooreapexdiplomaticcourier+27098@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+25380@gmail.com"">ericmooreapexdiplomaticcourier+25380@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+379@gmail.com"">ericmooreapexdiplomaticcourier+379@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+8973@gmail.com"">ericmooreapexdiplomaticcourier+8973@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+17352@gmail.com"">ericmooreapexdiplomaticcourier+17352@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+25943@gmail.com"">ericmooreapexdiplomaticcourier+25943@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+16536@gmail.com"">ericmooreapexdiplomaticcourier+16536@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+32414@gmail.com"">ericmooreapexdiplomaticcourier+32414@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+30555@gmail.com"">ericmooreapexdiplomaticcourier+30555@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+18272@gmail.com"">ericmooreapexdiplomaticcourier+18272@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+23193@gmail.com"">ericmooreapexdiplomaticcourier+23193@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+30675@gmail.com"">ericmooreapexdiplomaticcourier+30675@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+25740@gmail.com"">ericmooreapexdiplomaticcourier+25740@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+20628@gmail.com"">ericmooreapexdiplomaticcourier+20628@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+28535@gmail.com"">ericmooreapexdiplomaticcourier+28535@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+15782@gmail.com"">ericmooreapexdiplomaticcourier+15782@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+11453@gmail.com"">ericmooreapexdiplomaticcourier+11453@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+15083@gmail.com"">ericmooreapexdiplomaticcourier+15083@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+24218@gmail.com"">ericmooreapexdiplomaticcourier+24218@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+25221@gmail.com"">ericmooreapexdiplomaticcourier+25221@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+2804@gmail.com"">ericmooreapexdiplomaticcourier+2804@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+15739@gmail.com"">ericmooreapexdiplomaticcourier+15739@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+19132@gmail.com"">ericmooreapexdiplomaticcourier+19132@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+12708@gmail.com"">ericmooreapexdiplomaticcourier+12708@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+25287@gmail.com"">ericmooreapexdiplomaticcourier+25287@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+17215@gmail.com"">ericmooreapexdiplomaticcourier+17215@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+28377@gmail.com"">ericmooreapexdiplomaticcourier+28377@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+22881@gmail.com"">ericmooreapexdiplomaticcourier+22881@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+8712@gmail.com"">ericmooreapexdiplomaticcourier+8712@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+30441@gmail.com"">ericmooreapexdiplomaticcourier+30441@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+30678@gmail.com"">ericmooreapexdiplomaticcourier+30678@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+15924@gmail.com"">ericmooreapexdiplomaticcourier+15924@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+31147@gmail.com"">ericmooreapexdiplomaticcourier+31147@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+3362@gmail.com"">ericmooreapexdiplomaticcourier+3362@gmail.com</a>
<a href=""mailto:ericmooreapexdiplomaticcourier+5421@gmail.com"">ericmooreapexdiplomaticcourier+5421@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu@gmail.com"">anayojohnsonnwachukwu@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+18894@gmail.com"">anayojohnsonnwachukwu+18894@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+15794@gmail.com"">anayojohnsonnwachukwu+15794@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+10608@gmail.com"">anayojohnsonnwachukwu+10608@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+764@gmail.com"">anayojohnsonnwachukwu+764@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+16924@gmail.com"">anayojohnsonnwachukwu+16924@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+11543@gmail.com"">anayojohnsonnwachukwu+11543@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+27319@gmail.com"">anayojohnsonnwachukwu+27319@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+2207@gmail.com"">anayojohnsonnwachukwu+2207@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+16689@gmail.com"">anayojohnsonnwachukwu+16689@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+10187@gmail.com"">anayojohnsonnwachukwu+10187@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+4872@gmail.com"">anayojohnsonnwachukwu+4872@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+10290@gmail.com"">anayojohnsonnwachukwu+10290@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+10696@gmail.com"">anayojohnsonnwachukwu+10696@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+30909@gmail.com"">anayojohnsonnwachukwu+30909@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+27982@gmail.com"">anayojohnsonnwachukwu+27982@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+26116@gmail.com"">anayojohnsonnwachukwu+26116@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+8681@gmail.com"">anayojohnsonnwachukwu+8681@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+7322@gmail.com"">anayojohnsonnwachukwu+7322@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+23794@gmail.com"">anayojohnsonnwachukwu+23794@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+22444@gmail.com"">anayojohnsonnwachukwu+22444@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+9202@gmail.com"">anayojohnsonnwachukwu+9202@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+25693@gmail.com"">anayojohnsonnwachukwu+25693@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+13457@gmail.com"">anayojohnsonnwachukwu+13457@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+4377@gmail.com"">anayojohnsonnwachukwu+4377@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+761@gmail.com"">anayojohnsonnwachukwu+761@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+1033@gmail.com"">anayojohnsonnwachukwu+1033@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+30558@gmail.com"">anayojohnsonnwachukwu+30558@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+31661@gmail.com"">anayojohnsonnwachukwu+31661@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+20299@gmail.com"">anayojohnsonnwachukwu+20299@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+7224@gmail.com"">anayojohnsonnwachukwu+7224@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+15091@gmail.com"">anayojohnsonnwachukwu+15091@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+29973@gmail.com"">anayojohnsonnwachukwu+29973@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+24082@gmail.com"">anayojohnsonnwachukwu+24082@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+22881@gmail.com"">anayojohnsonnwachukwu+22881@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+1380@gmail.com"">anayojohnsonnwachukwu+1380@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+348@gmail.com"">anayojohnsonnwachukwu+348@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+22790@gmail.com"">anayojohnsonnwachukwu+22790@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+17503@gmail.com"">anayojohnsonnwachukwu+17503@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+26483@gmail.com"">anayojohnsonnwachukwu+26483@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+28254@gmail.com"">anayojohnsonnwachukwu+28254@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+20177@gmail.com"">anayojohnsonnwachukwu+20177@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+6510@gmail.com"">anayojohnsonnwachukwu+6510@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+1244@gmail.com"">anayojohnsonnwachukwu+1244@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+28989@gmail.com"">anayojohnsonnwachukwu+28989@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+16270@gmail.com"">anayojohnsonnwachukwu+16270@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+25818@gmail.com"">anayojohnsonnwachukwu+25818@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+8259@gmail.com"">anayojohnsonnwachukwu+8259@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+25462@gmail.com"">anayojohnsonnwachukwu+25462@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+30836@gmail.com"">anayojohnsonnwachukwu+30836@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+8864@gmail.com"">anayojohnsonnwachukwu+8864@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+3569@gmail.com"">anayojohnsonnwachukwu+3569@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+32638@gmail.com"">anayojohnsonnwachukwu+32638@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+31967@gmail.com"">anayojohnsonnwachukwu+31967@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+12052@gmail.com"">anayojohnsonnwachukwu+12052@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+22029@gmail.com"">anayojohnsonnwachukwu+22029@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+27959@gmail.com"">anayojohnsonnwachukwu+27959@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+22672@gmail.com"">anayojohnsonnwachukwu+22672@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+19591@gmail.com"">anayojohnsonnwachukwu+19591@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+19912@gmail.com"">anayojohnsonnwachukwu+19912@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+10928@gmail.com"">anayojohnsonnwachukwu+10928@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+4814@gmail.com"">anayojohnsonnwachukwu+4814@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+27381@gmail.com"">anayojohnsonnwachukwu+27381@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+19214@gmail.com"">anayojohnsonnwachukwu+19214@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+16853@gmail.com"">anayojohnsonnwachukwu+16853@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+3701@gmail.com"">anayojohnsonnwachukwu+3701@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+31423@gmail.com"">anayojohnsonnwachukwu+31423@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+18021@gmail.com"">anayojohnsonnwachukwu+18021@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+32728@gmail.com"">anayojohnsonnwachukwu+32728@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+26062@gmail.com"">anayojohnsonnwachukwu+26062@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+9945@gmail.com"">anayojohnsonnwachukwu+9945@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+18466@gmail.com"">anayojohnsonnwachukwu+18466@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+20376@gmail.com"">anayojohnsonnwachukwu+20376@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+20281@gmail.com"">anayojohnsonnwachukwu+20281@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+27221@gmail.com"">anayojohnsonnwachukwu+27221@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+29327@gmail.com"">anayojohnsonnwachukwu+29327@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+20951@gmail.com"">anayojohnsonnwachukwu+20951@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+32459@gmail.com"">anayojohnsonnwachukwu+32459@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+3827@gmail.com"">anayojohnsonnwachukwu+3827@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+3174@gmail.com"">anayojohnsonnwachukwu+3174@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+23051@gmail.com"">anayojohnsonnwachukwu+23051@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+3199@gmail.com"">anayojohnsonnwachukwu+3199@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+18557@gmail.com"">anayojohnsonnwachukwu+18557@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+21958@gmail.com"">anayojohnsonnwachukwu+21958@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+2882@gmail.com"">anayojohnsonnwachukwu+2882@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+5673@gmail.com"">anayojohnsonnwachukwu+5673@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+6522@gmail.com"">anayojohnsonnwachukwu+6522@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+2573@gmail.com"">anayojohnsonnwachukwu+2573@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+18102@gmail.com"">anayojohnsonnwachukwu+18102@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+22622@gmail.com"">anayojohnsonnwachukwu+22622@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+13591@gmail.com"">anayojohnsonnwachukwu+13591@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+3066@gmail.com"">anayojohnsonnwachukwu+3066@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+29652@gmail.com"">anayojohnsonnwachukwu+29652@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+13985@gmail.com"">anayojohnsonnwachukwu+13985@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+21004@gmail.com"">anayojohnsonnwachukwu+21004@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+18282@gmail.com"">anayojohnsonnwachukwu+18282@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+10089@gmail.com"">anayojohnsonnwachukwu+10089@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+4909@gmail.com"">anayojohnsonnwachukwu+4909@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+20898@gmail.com"">anayojohnsonnwachukwu+20898@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+28455@gmail.com"">anayojohnsonnwachukwu+28455@gmail.com</a>
<a href=""mailto:anayojohnsonnwachukwu+17592@gmail.com"">anayojohnsonnwachukwu+17592@gmail.com</a>"
