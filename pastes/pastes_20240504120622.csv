id,title,username,language,date,content
451n1Tu8,Formidable Forms Addons,nilovelez,Bash,Saturday 4th of May 2024 07:00:35 AM CDT,"# INSTRUCTIONS:
#
# locate the block that corresponds to your language
# for each language there are six commands that start with ""wp i18n"" and end with ""--no-purge""
# open Local terminan by clicking on ""Open site shell""
# copy the first command, paste in terminal an press enter
# it shoud say ""Success: Created 21 files.""
# repeat with the five remaining commands, one per line


# Spanish
wp i18n make-json wp-content/languages/plugins/formidable-es_ES.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-es_ES.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-es_ES.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-es_ES.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-es_ES.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-es_ES.po wp-content/plugins/formidable-views/languages/ --no-purge


# French
wp i18n make-json wp-content/languages/plugins/formidable-fr_FR.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-fr_FR.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-fr_FR.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-fr_FR.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-fr_FR.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-fr_FR.po wp-content/plugins/formidable-views/languages/ --no-purge


# Italian
wp i18n make-json wp-content/languages/plugins/formidable-it_IT.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-it_IT.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-it_IT.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-it_IT.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-it_IT.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-it_IT.po wp-content/plugins/formidable-views/languages/ --no-purge


# Japanese
wp i18n make-json wp-content/languages/plugins/formidable-ja_JP.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-ja_JP.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-ja_JP.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-ja_JP.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-ja_JP.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-ja_JP.po wp-content/plugins/formidable-views/languages/ --no-purge


# Portuguese (BR)
wp i18n make-json wp-content/languages/plugins/formidable-pt_BR.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-pt_BR.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-pt_BR.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-pt_BR.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-pt_BR.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-pt_BR.po wp-content/plugins/formidable-views/languages/ --no-purge


# German
wp i18n make-json wp-content/languages/plugins/formidable-de_DE.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-de_DE.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-de_DE.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-de_DE.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-de_DE.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-de_DE.po wp-content/plugins/formidable-views/languages/ --no-purge"
80MAYSZa,Leaflet with geocoder,hctorres02,HTML,Saturday 4th of May 2024 06:53:56 AM CDT,"<div class=""row"">
    <div class=""col-md-12"">
        <div class=""form-field-default"">
            <label>Localização:</label>
            <div id=""location-map"" style=""background:#fff;border:none;height:440px;width:100%;box-sizing:border-box""></div>
            <input type=""hidden"" name=""endereco_latlng"" value="""">
        </div>
        <div class=""clear""></div>
    </div>
</div>
<div class=""row"">
    <div class=""col-md-3"">
        <div class=""form-field-default"">
            <label>CEP</label>
            <input class=""maskcep"" type=""text"" name=""endereco_cep"" placeholder=""CEP"" value="""">
        </div>
    </div>
    <div class=""col-md-7 col-xs-9"">
        <div class=""form-field-default"">
            <label>Rua</label>
            <input type=""text"" name=""endereco_rua"" placeholder=""Rua"" value="""">
        </div>
    </div>
    <div class=""col-md-2 col-xs-3"">
        <div class=""form-field-default"">
            <label>Nº</label>
            <input type=""text"" name=""endereco_numero"" placeholder=""Nº"" value="""">
        </div>
    </div>
</div>
<div class=""row"">
    <div class=""col-md-12"">
        <div class=""form-field-default"">
            <label>Bairro</label>
            <input type=""text"" name=""endereco_bairro"" placeholder=""Bairro"" value="""">
        </div>
    </div>
</div>
<link rel=""stylesheet"" href=""https://unpkg.com/leaflet@1.0.3/dist/leaflet.css"" />
<link rel=""stylesheet"" href=""https://unpkg.com/esri-leaflet-geocoder@3.1.3/dist/esri-leaflet-geocoder.css"">
<script src=""https://unpkg.com/leaflet@1.0.3/dist/leaflet.js""></script>
<script src=""https://unpkg.com/esri-leaflet@3.0.8/dist/esri-leaflet.js""></script>
<script src=""https://unpkg.com/esri-leaflet-geocoder@3.1.3/dist/esri-leaflet-geocoder.js""></script>
<script>
    function showMap() {
      setTimeout(function() {
        const targetId = ""location-map"";
        const $map = $('#' + targetId);
        const $latlng = $(""[name='endereco_latlng']"");
        const $nome = $(""[name='nome']"");
        const latlng = JSON.parse($latlng.val());
        const origin = L.marker(latlng);
        const apikey = ""ARCGIS_API_KEY"";
        if ($map.data('already-mounted')) {
          return;
        }
        $map.attr('data-already-mounted', true)
        const map = L.map(targetId, {
          maxZoom: 16,
          minZoom: 12,
          zoomControl: false
        });
        const geocodeService = L.esri.Geocoding.geocodeService({
          apikey
        });
        const providers = [
          L.esri.Geocoding.arcgisOnlineProvider({
            apikey,
            countries: ['BRA'],
          })
        ];
        map.setView(origin.getLatLng(), 16).on(""click"", handleClick);
        origin.addTo(map);
        L.tileLayer(""https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"", {
          attribution: ""Map data &copy;  < a href = \""https://openstreetmap.org\"">OpenStreetMap < /a>"",
        }).addTo(map);
        L.control.zoom({
          position: 'bottomright'
        }).addTo(map);
        L.esri.Geocoding.geosearch({
          providers,
          expanded: true,
          useMapBounds: false,
          collapseAfterResult: false,
          placeholder: 'Pesquisar',
        }).addTo(map).on(""results"", handleClick);
    
        function handleClick(e) {
          geocodeService.reverse().latlng(e.latlng).run(function(error, result) {
            if (Boolean(error) == false) {
              $(""[name='endereco_cep']"").val(result.address.Postal).trigger(""change"");
            }
            map.setView(e.latlng, 16);
            origin.setLatLng(e.latlng);
            $latlng.val(JSON.stringify(Object.values(e.latlng)));
          });
        }
      }, 100);
    }
</script>
"
S39F2W19,🤑 G2A.com Free Gift Card Guide May 2024 FIX 💰,ssss50w,GetText,Saturday 4th of May 2024 06:43:08 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
04 May 2024"
7cWEPDMf,Untitled,Niftl,C++,Saturday 4th of May 2024 06:27:21 AM CDT,"#include <GL/glut.h>
#include <stdlib.h>
#include <time.h>
#include <stdio.h>

int WINDOW_WIDTH = 800;
int WINDOW_HEIGHT = 600;
int numVertices = 5; // Initial number of vertices for the polygon
int pointX = 400;    // Initial x-coordinate of the point
int pointY = 300;    // Initial y-coordinate of the point
typedef struct {
    int x, y;
} Point;
Point *polygonVertices = NULL; // Dynamic array for storing polygon vertices

// Function to generate initial polygon vertices
void initPolygonVertices() {
    polygonVertices = realloc(polygonVertices, numVertices * sizeof(Point));
    for (int i = 0; i < numVertices; ++i) {
        polygonVertices[i].x = rand() % WINDOW_WIDTH;
        polygonVertices[i].y = rand() % WINDOW_HEIGHT;
    }
}

// Function to draw a polygon
void drawPolygon() {
    glColor3f(0.0, 0.5, 0.8); // Set color for the polygon (light blue)
    glBegin(GL_POLYGON);
    for (int i = 0; i < numVertices; ++i) {
        glVertex2f(polygonVertices[i].x, polygonVertices[i].y);
    }
    glEnd();
}

// Function to draw a point
void drawPoint() {
    glColor3f(1.0, 0.0, 0.0); // Set color for the point (red)
    glPointSize(5); // Set point size for better visibility
    glBegin(GL_POINTS);
    glVertex2f(pointX, pointY);
    glEnd();
}

// Check if point is inside polygon using ray-casting algorithm
int isPointInsidePolygon(int x, int y) {
    int inside = 0;
    int n = numVertices;
    for (int i = 0, j = n - 1; i < n; j = i++) {
        int intersect = ((polygonVertices[i].y > y) != (polygonVertices[j].y > y)) &&
                        (x < (polygonVertices[j].x - polygonVertices[i].x) * (y - polygonVertices[i].y) / (polygonVertices[j].y - polygonVertices[i].y) + polygonVertices[i].x);
        if (intersect) {
            inside = !inside;
        }
    }
    return inside;
}

// Function to handle window drawing
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    
    // Draw the polygon
    drawPolygon();
    
    // Draw the point
    drawPoint();

    // Check if point is inside polygon and print the result
    if (isPointInsidePolygon(pointX, pointY)) {
        printf(""The point is inside the polygon.\n"");
    } else {
        printf(""The point is outside the polygon.\n"");
    }
    
    glFlush();
}

// Function to handle window resizing
void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, w, 0, h);
    glMatrixMode(GL_MODELVIEW);
    WINDOW_WIDTH = w;
    WINDOW_HEIGHT = h;
}

// Function to handle keyboard input
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case '+':
            numVertices++;
            if (numVertices > 2) {
                initPolygonVertices(); // Regenerate polygon vertices
                glutPostRedisplay(); // Redraw window
            }
            break;
        case '-':
            if (numVertices > 3) {
                numVertices--;
                initPolygonVertices(); // Regenerate polygon vertices
                glutPostRedisplay(); // Redraw window
            }
            break;
        default:
            break;
    }
}

// Function to handle mouse input (move the point)
void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        pointX = x;
        pointY = WINDOW_HEIGHT - y; // Invert y-coordinate to match OpenGL convention
        glutPostRedisplay(); // Redraw window
    }
}

int main(int argc, char** argv) {
    srand(time(NULL)); // Seed random number generator
    initPolygonVertices(); // Initialize polygon vertices

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    glutCreateWindow(""Polygon and Point in C"");

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);

    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);

    glClearColor(1.0, 1.0, 1.0, 1.0); // Set background color to white

    glutMainLoop();

    return 0;
}
"
bUZPrU0N,Untitled,Niftl,C++,Saturday 4th of May 2024 06:21:05 AM CDT,"#include <GL/glut.h>
#include <stdlib.h>
#include <time.h>
#include <vector>

int WINDOW_WIDTH = 800;
int WINDOW_HEIGHT = 600;
int numVertices = 5; // Initial number of vertices for the polygon
int pointX = 400;    // Initial x-coordinate of the point
int pointY = 300;    // Initial y-coordinate of the point
std::vector<std::pair<int, int>> polygonVertices; // Store polygon vertices

// Function to generate initial polygon vertices
void initPolygonVertices() {
    polygonVertices.clear();
    for (int i = 0; i < numVertices; ++i) {
        polygonVertices.push_back({rand() % WINDOW_WIDTH, rand() % WINDOW_HEIGHT});
    }
}

// Function to draw a polygon
void drawPolygon() {
    glColor3f(0.0, 0.5, 0.8); // Set color for the polygon (light blue)
    glBegin(GL_POLYGON);
    for (auto &vertex : polygonVertices) {
        glVertex2f(vertex.first, vertex.second);
    }
    glEnd();
}

// Function to draw a point
void drawPoint() {
    glColor3f(1.0, 0.0, 0.0); // Set color for the point (red)
    glPointSize(5); // Set point size for better visibility
    glBegin(GL_POINTS);
    glVertex2f(pointX, pointY);
    glEnd();
}

// Function to handle window drawing
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    
    // Draw the polygon
    drawPolygon();
    
    // Draw the point
    drawPoint();
    
    glFlush();
}

// Function to handle window resizing
void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, w, 0, h);
    glMatrixMode(GL_MODELVIEW);
    WINDOW_WIDTH = w;
    WINDOW_HEIGHT = h;
}

// Function to handle keyboard input
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case '+':
            numVertices++;
            if (numVertices > 2) {
                initPolygonVertices(); // Regenerate polygon vertices
                glutPostRedisplay(); // Redraw window
            }
            break;
        case '-':
            if (numVertices > 3) { // Ensure at least 3 vertices
                numVertices--;
                initPolygonVertices(); // Regenerate polygon vertices
                glutPostRedisplay(); // Redraw window
            }
            break;
        default:
            break;
    }
}

// Function to handle mouse input (move the point)
void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        pointX = x;
        pointY = WINDOW_HEIGHT - y; // Invert y-coordinate to match OpenGL convention
        glutPostRedisplay(); // Redraw window
    }
}

int main(int argc, char** argv) {
    srand(time(NULL)); // Seed random number generator
    initPolygonVertices(); // Initialize polygon vertices

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    glutCreateWindow(""Polygon and Point"");
    
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    
    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);
    
    glClearColor(1.0, 1.0, 1.0, 1.0); // Set background color to white
    
    glutMainLoop();
    
    return 0;
}
"
xWGYxUW4,Untitled,_KAGATUN_,C#,Saturday 4th of May 2024 06:20:14 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace FindingPerpetrator
{
    internal class Program
    {
        static void Main(string[] args)
        {
            List<Criminal> criminals = new List<Criminal>
            {
                new Criminal (""Иванов"", ""Иван"", ""Иванович"", ""Армянин"", ""175"", ""70"", true),
                new Criminal (""Петров"", ""Николай"", ""Владимирович"", ""Украинец"", ""165"", ""73"", false),
                new Criminal (""Сергеев"", ""Илья"", ""Петрович"", ""Русский"", ""186"", ""90"", true),
                new Criminal (""Соколовский"", ""Иван"", ""Константинович"", ""Русский"", ""180"", ""94"", true),
                new Criminal (""Абрамов"", ""Александр"", ""Валентинович"", ""Русский"", ""177"", ""70"", true),
                new Criminal (""Воробьев"", ""Александр"", ""Сергеевич"", ""Украинец"", ""165"", ""65"", false),
                new Criminal (""Корешков"", ""Валерий"", ""Степанович"", ""Украинец"", ""171"", ""113"", true),
                new Criminal (""Чечеков"", ""Артем"", ""Александрович"", ""Русский"", ""198"", ""153"", true),
                new Criminal (""Крикунов"", ""Михаил"", ""Евгеньевич"", ""Русский"", ""180"", ""85"", true),
                new Criminal (""Зайцев"", ""Юрий"", ""Антонович"", ""Армянин"", ""176"", ""83"", true),
            };

            for (int i = 0; i < criminals.Count; i++)
            {
                criminals[i].ShowInfo();
            }

            SearchEngine searchEngine = new SearchEngine(criminals);
            searchEngine.SearchByParameter();
        }
    }

    class Criminal
    {
        public Criminal(string surname, string name, string patronymic, string nationality, string height, string weight, bool inCustody)
        {
            Surname = surname;
            Name = name;
            Patronymic = patronymic;
            Nationality = nationality;
            Height = height;
            Weight = weight;
            InCustody = inCustody;
        }

        public string Surname { get; private set; }
        public string Name { get; private set; }
        public string Patronymic { get; private set; }
        public string Nationality { get; private set; }
        public string Height { get; private set; }
        public string Weight { get; private set; }
        public bool InCustody { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""Фамилия: {Surname}, Имя: {Name}, Отчество: {Patronymic}, Национальность: {Nationality}, "" +
                $""Рост: {Height}см, Вес: {Weight}кг, Статус: {GetStatus()}"");
        }

        public string GetStatus()
        {
            return InCustody ? ""В заключении"" : ""На свободе"";
        }
    }

    class SearchEngine
    {
        private List<Criminal> _criminals;

        public SearchEngine(List<Criminal> criminal)
        {
            _criminals = criminal;
        }

        public void SearchByParameter()
        {
            Console.WriteLine(""\nВведите рост преступника"");
            string userInputHeight = Console.ReadLine();

            Console.WriteLine(""\nВведите вес преступника"");
            string userInputWeight = Console.ReadLine();

            Console.WriteLine(""\nВведите национальность преступника"");
            string userInputNationality = Console.ReadLine();

            var wantedCriminals = _criminals.Where(criminal => criminal.Height == userInputHeight
                                                  && criminal.Weight == userInputWeight
                                                  && criminal.Nationality.ToLower() == userInputNationality.ToLower()
                                                  && !criminal.InCustody).ToList();
            if (wantedCriminals.Any())
            {
                foreach (var criminal in wantedCriminals)
                {
                    Console.WriteLine(""\nНайден:\n"");
                    criminal.ShowInfo();
                }
            }
            else
            {
                Console.WriteLine(""Не найден преступник с требуемыми параметрами"");
            }
        }
    }
}
"
AptVApQs,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Saturday 4th of May 2024 06:10:24 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_760030.pdf

Working as of:
04 May 2024"
TbSRiqv2,data916,TestGuy1,JSON,Saturday 4th of May 2024 06:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '63593955b63489f867f85a1e944fbe5c429a6e8ac96ddfe57288661ef881264abbf84af064ef9552892e5b7490c95afc446f2b34e7cd4fbe46377d461d7e5c43e122b226c87315747531a46d55d5d413d284eb961dc6b265fe0aa11380ef3c808b4abe7e44fb624e4fef5df1550ec139bfbd0efce30af90baaee993f7b759b6f',
  otherdata: [
    'f148715c09f3435b523442ca0422d923',
    'a5baa033a05b013dd9c842263063ef01',
    '50bc0b0f8fc7b448329c3b83c300db28',
    '1b7bb9e21e9056a245230266c7ba05de',
    '0c0dd493888eeb5165123e976344e9ba',
    '22122c105ba423114b47554dd134c18f',
    '4e0db11f533eb63baf6bf1efa487c0af',
    'b6a5079da6ffea4683f3799d8585a45f'
  ]
}"
GNGebALF,shuffle random merge,homer512,Python,Saturday 4th of May 2024 05:55:50 AM CDT,"#!/usr/bin/env python3


import collections
import random


def merge_random(left, right):
    choices = [0] * len(left) + [1] * len(right)
    random.shuffle(choices)
    readpositions = [iter(left), iter(right)]
    return [next(readpositions[choice]) for choice in choices]


def make_shuffle():
    sequence = [1, 2, 3, 4]
    # Step 1: Directly shuffle blocks that fit into memory
    blocks = [sequence[:2], sequence[2:]]
    for block in blocks:
        random.shuffle(block)
    # Step 2: Pairwise shuffle blocks. For more blocks, repeat
    merged_block = merge_random(*blocks)
    return merged_block


def main():
    counter = collections.Counter(
            tuple(make_shuffle()) for _ in range(1_000_000))
    for value, key in sorted((value, key) for key, value in counter.items()):
        print(value, key)


if __name__ == '__main__':
    main()
"
UUHScwB9,modified_A,maxim_shlyahtin,C++,Saturday 4th of May 2024 05:36:34 AM CDT,"#include <iostream>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <limits>

// граф - ориентированный
struct Vertex {
    bool visited = false;
    int neighbors_num;
};

std::vector<char> greedy_alg(std::map<char, std::vector<std::pair<char, double>>>& graph, char start, char end) {
    std::vector<char> path = {start};
    std::map<char, Vertex> vertices;
    double inf = std::numeric_limits<double>::max();
    double minWeight = inf;
    char current = start;
    vertices[start].visited = true;
    vertices[start].neighbors_num = graph[current].size();
    while (current != end) {
        if (!vertices[current].visited) {
            vertices[current].neighbors_num = graph[current].size();
            vertices[current].visited = true;
        }
        if (vertices[current].neighbors_num == 0) {
            path.pop_back();
            current = path[path.size() - 1];
        }
        char next;
        for (const auto& vert : graph[current]) {
            if (graph[vert.first].size() == 0 && vert.first != end) {
                vertices[current].neighbors_num--;
                continue;
            }
            else if (graph[vert.first].size() == 0 && vert.first == end) {
                path.push_back(end);
                return path;
            }
            if (vert.second < minWeight && graph[vert.first].size() > 0) {
                minWeight = vert.second;
                next = vert.first;
            }
        }
        path.push_back(next);
        minWeight = inf;
        current = next;
        
    }
    return path;
}

int main() {
    std::map<char, std::vector<std::pair<char, double>>> graph;
    char start, end;
    std::cin >> start >> end;
    char from, to;
    double weight;

    while (std::cin >> from >> to >> weight) {
        graph[from].insert(graph[from].end(), { std::make_pair(to, weight) });
    }
    std::vector<char> res = greedy_alg(graph, start, end);
    for (const auto& it : res) {
        std::cout << it;
    }
    std::cout << '\n';
    return 0;
}
"
vVMQ4ct0,Untitled,_KAGATUN_,C#,Saturday 4th of May 2024 04:56:25 AM CDT,"//У вас есть автосервис, в который приезжают люди, чтобы починить свои автомобили.
//У вашего автосервиса есть баланс денег и склад деталей.
//Когда приезжает автомобиль, у него сразу ясна его поломка, и эта поломка отображается у вас в консоли вместе с ценой за починку(цена за починку складывается из цены детали + цена за работу).
//Поломка всегда чинится заменой детали, но количество деталей ограничено тем, что находится на вашем складе деталей.
//Если у вас нет нужной детали на складе, то вы можете отказать клиенту, и в этом случае вам придется выплатить штраф.
//Если вы замените не ту деталь, то вам придется возместить ущерб клиенту.
//За каждую удачную починку вы получаете выплату за ремонт, которая указана в чек-листе починки.
//Класс Деталь не может содержать значение “количество”. Деталь всего одна, за количество отвечает тот, кто хранит детали.
//При необходимости можно создать дополнительный класс для конкретной детали и работе с количеством.

using System;
using System.Collections.Generic;

namespace CarService
{
    class Program
    {
        static void Main(string[] args)
        {
            DetailCreator detailCreator = new DetailCreator();

            CarCreator createCars = new CarCreator(detailCreator);

            Warehouse warehouse = new Warehouse(detailCreator);
            warehouse.FillDetails();

            CarService carService = new CarService(createCars.ReturnQueue(), warehouse);

            carService.Work();
        }
    }

    public class Utilities
    {
        private static Random s_random = new Random();

        public static int GetRandomNumber(int min, int max)
        {
            return s_random.Next(min, max + 1);
        }
    }

    class Car
    {
        private List<Detail> _details = new List<Detail>();

        public Car(List<Detail> details)
        {
            _details = details;
            MakeDefectiveDetails();
        }

        public bool HaveBrokenDetail()
        {
            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].IsBroken == true)
                {
                    return true;
                }
            }

            return false;
        }

        public void ShowDetails()
        {
            Console.WriteLine(""Все детали автомобиля:\n"");

            if (_details.Count > 0)
            {
                for (int i = 0; i < _details.Count; i++)
                {
                    _details[i].ShowInfo();
                }
            }
        }

        public void ShowBrokenDetails()
        {
            bool isProperly = true;

            Console.WriteLine(""Неисправные детали автомобиля:\n"");

            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].IsBroken == true)
                {
                    _details[i].ShowInfo();

                    isProperly = false;
                }
            }

            if (isProperly == true)
            {
                Console.WriteLine(""Все детали отремонтированны"");
            }
        }

        public bool TryGetDetail(string detailType, out Detail detail)
        {
            detail = null;

            foreach (Detail selectedDetail in _details)
            {
                if (detailType == selectedDetail.Type && selectedDetail.IsBroken == true)
                {
                    detail = selectedDetail;
                    return true;
                }
            }

            return false;
        }

        public List<Detail> ReturnDetails()
        {
            return new List<Detail>(_details);
        }

        public void ReplaceDetail(Detail newDetail)
        {
            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].Type == newDetail.Type)
                {
                    _details[i] = newDetail;

                    return;
                }
            }
        }

        private void MakeDefectiveDetails()
        {
            int maxNumberDetails = 5;
            int numberDefectiveParts = Utilities.GetRandomNumber(1, maxNumberDetails);

            for (int i = 0; i < numberDefectiveParts; i++)
            {
                int randomIndexDetail = Utilities.GetRandomNumber(1, _details.Count);
                _details[randomIndexDetail - 1].MakeDefective();
            }
        }
    }

    class CarCreator
    {
        private Queue<Car> _cars = new Queue<Car>();

        private DetailCreator _detailCreator;

        public CarCreator(DetailCreator detailCreator)
        {
            _detailCreator = detailCreator;
            FillQueue();
        }

        public Queue<Car> ReturnQueue()
        {
            return new Queue<Car>(_cars);
        }

        private void FillQueue()
        {
            int maxNumberInQueue = 7;
            int randomNumberInQueue = Utilities.GetRandomNumber(1, maxNumberInQueue);

            for (int i = 0; i < randomNumberInQueue; i++)
            {
                _cars.Enqueue(CreateForQueue());
            }
        }

        private Car CreateForQueue()
        {
            List<Detail> details = new List<Detail>();

            for (int j = 0; j < _detailCreator.DetailsCount; j++)
            {
                details.Add(_detailCreator.ReturnListAll()[j].Clone());
            }

            return new Car(details);
        }
    }

    class Detail
    {
        public Detail(int price, string type, bool isBroken)
        {
            Price = price;
            Type = type;
            IsBroken = isBroken;
        }

        public int Price { get; private set; }
        public string Type { get; private set; }
        public bool IsBroken { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""Деталь {Type}, стоимость {Price}, состояние {GetStatus()}"");
        }

        public void MakeDefective()
        {
            IsBroken = true;
        }

        public string GetStatus()
        {
            return IsBroken ? ""Неисправно"" : ""Исправно"";
        }

        public Detail Clone()
        {
            return new Detail(Price, Type, IsBroken);
        }
    }

    class DetailCreator
    {
        private List<Detail> _details;

        public DetailCreator()
        {
            _details = new List<Detail>
            {
                new Detail (3000, ""Масляный насос"", false),
                new Detail (1500, ""Клапаны"", false),
                new Detail (1500, ""Ремень"", false),
                new Detail (1000, ""Маховик"", false),
                new Detail (2000, ""Водяной насос"", false),
                new Detail (2200, ""Блок цилиндров"", false),
                new Detail (4000, ""Масляный фильтр"", false),
                new Detail (2800, ""Воздушный фильтр"", false),
                new Detail (5000, ""Генератор"", false),
                new Detail (500, ""Стартер"", false),
            };
        }

        public int DetailsCount => _details.Count;

        public List<Detail> ReturnListAll()
        {
            return new List<Detail>(_details);
        }
    }

    class Warehouse
    {
        private DetailCreator _detailCreator;

        private List<Detail> _details = new List<Detail>();

        public Warehouse(DetailCreator detailCreator)
        {
            _detailCreator = detailCreator;
        }

        public int DetailsCount => _details.Count;

        public void RemoveDetail(string detailType)
        {
            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].Type == detailType)
                {
                    _details.RemoveAt(i);
                    break;
                }
            }
        }

        public Detail GetDetailByIndex(int index)
        {
            return _details[index];
        }

        public void ShowAssortment()
        {
            Console.WriteLine(""\nДетали на складе:\n"");

            for (int i = 0; i < _details.Count; i++)
            {
                Console.Write($""№ {i + 1} "");
                _details[i].ShowInfo();
            }
        }

        public void FillDetails()
        {
            int capacity = 15;
            int minNumber = 0;
            int maxNumber = _detailCreator.DetailsCount;

            for (int i = 0; i < capacity; i++)
            {
                int randomNumber = Utilities.GetRandomNumber(minNumber, maxNumber - 1);

                _details.Add(_detailCreator.ReturnListAll()[randomNumber]);
            }
        }
    }

    class CarService
    {
        private Warehouse _warehouse;

        private Queue<Car> _cars;

        private int _fine = 1000;
        private int _fineSkipping = 300;
        private int _income = 0;

        public CarService(Queue<Car> cars, Warehouse warehouse)
        {
            _cars = cars;
            _warehouse = warehouse;
        }

        public void Work()
        {
            while (_cars.Count > 0)
            {
                Car car = _cars.Dequeue();

                RepairCar(car);
            }

            Console.WriteLine(""В очереди больше нет машин на ремонт.\nПрограмма завершена"");
        }

        private void RepairCar(Car car)
        {
            const string CommandComplete = ""S"";

            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine($""\nКапитал автосервиса: {_income}\n"");

                car.ShowDetails();
                Console.WriteLine();

                _warehouse.ShowAssortment();
                Console.WriteLine();

                car.ShowBrokenDetails();

                Console.WriteLine($""\nВведите {CommandComplete} чтобы завершить обслуживание текущего автомобиля"");
                Console.WriteLine(""Введите номер детали со склада для починки автомобиля:\n"");

                string userInput = Console.ReadLine();

                CompleteCarMaintenance(car, userInput, CommandComplete, isWork);
                
                if (int.TryParse(userInput, out int number))
                {
                    if (number > 0 && number <= _warehouse.DetailsCount)
                    {
                        Detail warehouseDetail = _warehouse.GetDetailByIndex(number - 1);

                        if (car.TryGetDetail(warehouseDetail.Type, out Detail detail))
                        {
                            MakeProfit(detail.Price);

                            car.ReplaceDetail(warehouseDetail);

                            _warehouse.RemoveDetail(detail.Type);
                        }
                        else
                        {
                            _warehouse.RemoveDetail(warehouseDetail.Type);
                            PayForMistake();
                        }
                    }
                    else
                    {
                        Console.WriteLine(""\nНет детали под таким номером\n"");
                    }
                }
                else if(isWork == false)
                {
                    Console.WriteLine(""Неверный ввод команды"");
                }
            }
        }

        private void CompleteCarMaintenance(Car car, string userInput, string commandComplete, bool isWork)
        {
            if (userInput == commandComplete && car.HaveBrokenDetail())
            {
                PayBrokenDetailFine(car.ReturnDetails());
                isWork = false;
            }
            else if (userInput == commandComplete)
            {
                Console.WriteLine(""Обслуживание текущего автомобиля завершено"");
                isWork = false;
            }
        }

        private void PayForMistake()
        {
            _income -= _fine;

            Console.WriteLine($""Получен штраф {_fine} за замену исправной детали, вы утратили исправную деталь со склада\n"");
        }

        private void PayBrokenDetailFine(List<Detail> details)
        {
            int sum = 0;
            int numberDetail = 0;

            for (int i = 0; i < details.Count; i++)
            {
                if (details[i].IsBroken == true)
                {
                    _income -= _fineSkipping;
                    numberDetail++;
                    sum += _fineSkipping;
                }
            }

            Console.WriteLine($""Получен штраф {sum} за {numberDetail} непочиненные детали\n"");
        }

        private void MakeProfit(int price)
        {
            int difference = 100;
            int extraChargePercent = 30;
            int priceWork = (price * extraChargePercent) / difference;
            _income += price + priceWork;

            Console.WriteLine($""Получена прибыль {price}. Наценка за ремонт {extraChargePercent}% от детали {priceWork}"");
        }
    }
}

"
hNwR0xRW,FastLED Control rev_09,pleasedontcode,Arduino,Saturday 4th of May 2024 04:35:44 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: FastLED Control
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-04 09:30:50

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* output d5  number of led 20  ws2812B RGB  use */
	/* random color  fade in and out in 10 seconds */
/****** SYSTEM REQUIREMENT 2 *****/
	/* output d5  ws2812B  number of LED 20  each LED */
	/* random color  use 256 colors  each LED random */
	/* brightness from 0 to 255  each LED fading in and */
	/* out random speed */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <FastLED.h>  // https://github.com/FastLED/FastLED

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void randomFadeInOut(void);
void randomFadingLEDs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t LED_PIN_D5 = 5;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
bool LED_PIN_D5_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
float LED_PIN_D5_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
#define NUM_LEDS 20
#define DATA_PIN 5
#define BRIGHTNESS 50

CRGB leds[NUM_LEDS];
FastLED_NeoPixel_Variant strip(leds, NUM_LEDS);

void setup(void)
{
    // put your setup code here, to run once:
    pinMode(LED_PIN_D5, OUTPUT);

    strip.begin(FastLED.addLeds<WS2812B, DATA_PIN, RGB>(leds, NUM_LEDS));
    strip.setBrightness(BRIGHTNESS);
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    randomFadeInOut(); // System Requirement 1
    randomFadingLEDs(); // System Requirement 2
    updateOutputs(); // Refresh output data
}

void updateOutputs(void)
{
    digitalWrite(LED_PIN_D5, LED_PIN_D5_rawData);
}

void randomFadeInOut(void)
{
    // Random color fade in and out in 10 seconds for LED connected to D5
    // Implement the code for System Requirement 1 here
    for (int i = 0; i < 256; i++) {
        uint8_t brightness = i;
        leds[0] = CHSV(random8(), 255, brightness);
        FastLED.show();
        delay(40);
    }
    for (int i = 255; i >= 0; i--) {
        uint8_t brightness = i;
        leds[0] = CHSV(random8(), 255, brightness);
        FastLED.show();
        delay(40);
    }
}

void randomFadingLEDs(void)
{
    // Random color, brightness, and fading in and out for each LED connected to D5
    // Implement the code for System Requirement 2 here
    for (int i = 0; i < NUM_LEDS; i++) {
        uint8_t brightness = random8();
        leds[i] = CHSV(random8(), 255, brightness);
    }
    FastLED.show();
    delay(random(100, 1000));
}
"
CNEcTp3n,RGB LED Fader rev_08,pleasedontcode,Arduino,Saturday 4th of May 2024 04:19:16 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: RGB LED Fader
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-04 09:18:13

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* output d5  number of led 20  ws2812B RGB  use */
	/* random color  fade in and out in 10 seconds */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <FastLED.h>	//https://github.com/FastLED/FastLED

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t LEDBoard_LEDRGB_Red_PIN_D5	= 5; // Output pin for WS2812B RGB LED strip
#define NUM_LEDS 20 // Number of LEDs in the strip

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool	LEDBoard_LEDRGB_Red_PIN_D5_rawData = 0;

// Define LED strip parameters
#define DATA_PIN 6
#define LED_TYPE WS2812B
#define COLOR_ORDER GRB

CRGB leds[NUM_LEDS];

void setup(void)
{
	// put your setup code here, to run once:

	FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS);
	pinMode(LEDBoard_LEDRGB_Red_PIN_D5, OUTPUT);

}

void loop(void)
{
	// put your main code here, to run repeatedly:

	// Random color fade in and out in 10 seconds
	uint8_t brightness = beatsin8(60, 0, 255);
	uint8_t hue = beatsin8(40, 0, 255);
	fill_solid(leds, NUM_LEDS, CHSV(hue, 255, brightness));
	FastLED.show();
	delay(100); // Adjust the delay time for fade effect

}

void updateOutputs()
{
	digitalWrite(LEDBoard_LEDRGB_Red_PIN_D5, LEDBoard_LEDRGB_Red_PIN_D5_rawData);
}
"
adZSDQRd,10 moves rule Petre,max2201111,Python,Saturday 4th of May 2024 04:15:44 AM CDT,"import chess
import ast

def simplify_fen_string(fen):
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4])  # Retaining position, turn, castling rights, and en passant
    return simplified_fen

def ten_moves_rule(board):
    """"""Custom rule to evaluate a draw condition based on the last ten moves.""""""
    history = list(board.move_stack)
    if len(history) < 10:
        return False
    for move in history[-10:]:
        if board.is_capture(move):
            return False
    
    print(""H"")    
    return True

def evaluate_board(board, depth):
    if board.is_checkmate():
        return -1000 + depth if board.turn == chess.WHITE else 1000 - depth
    elif board.is_stalemate() or board.is_insufficient_material() or ten_moves_rule(board):
        return 0
    return 0

def minimax(board, depth, alpha, beta, maximizing_player, depth2, depths, position_count, memo):
    position_count[0] += 1
    if position_count[0] % 1000000 == 0:
        print(f""Explored {position_count[0]} positions."")

    key = (board.fen(), maximizing_player, depth, alpha, beta)
    if key in memo:
        return memo[key]

    if depth == 0 or board.is_game_over():
        eval = evaluate_board(board, depth2)
        memo[key] = (None, eval)
        return None, eval

    best_move = None
    if maximizing_player:
        max_eval = float('-inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, False, depth2 + 1, depths, position_count, memo)
            board.pop()
            if eval > max_eval:
                max_eval = eval
                best_move = move
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, max_eval)

        if depth2 not in depths:
            depths.append(depth2)
            print(f""Depth of recursion: {depth2}"")

        return best_move, max_eval
    else:
        min_eval = float('inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, True, depth2 + 1, depths, position_count, memo)
            board.pop()
            if eval < min_eval:
                min_eval = eval
                best_move = move
            beta = min(beta, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, min_eval)

        if depth2 not in depths:
            depths.append(depth2)
            print(f""Depth of recursion: {depth2}"")

        return best_move, min_eval

# Initialization and main execution logic
start_fen = ""8/4Q1K1/8/8/3k4/8/2q5/8 w - - 0 1""

start_fen = ""8/4Q1K1/8/8/3k4/8/2q5/8 w - - 0 1""


board = chess.Board(start_fen)
depths = []
position_count = [0]
memo = {}

best_move, best_score = minimax(board, 52, float('-inf'), float('inf'), True, 0, depths, position_count, memo)
if best_move:
    move_san = board.san(best_move)
    print(f""The best move from position {start_fen} is {move_san} with a score of {best_score}."")
else:
    print(""No move found, or the game is over. Score: "", best_score)"
6cmpPSZp,Untitled,moroccanrabbit97,SQL,Saturday 4th of May 2024 03:49:36 AM CDT,"--prikazati sljedece podatke: id, ime i preime djelatnika, id odjela, placu djelatnika
-- razliku place djelatnika u odnosu na prosjecnu placu odjela kojem pripada
-- razliku place djelatnika u odnosu na prosjecnu placu radnog mjesta kojem pripada

with
agr_dpt as
(select department_id, round(avg (salary), 2) as prosj_pl_dpt
from employees
group by department_id), --ono po cemu grupiramo ide i u SELECT

agr_job as
(select job_id, round(avg (salary), 2) as prosj_pl_job
from employees
group by job_id)
select e.employee_id, e.first_name, e.last_name, e.department_id, e.salary, ad.prosj_pl_dpt, e.salary - ad.prosj_pl_dpt as razlika_dpt
e.salary -aj.prosj_pl_job as razlika.job e.job_id
from employees e join agr_dpt ad on e.department_id = ad.department_id
    join agr_job aj on e.job_id = aj.job_id
order by 1;"
bpRQ1WLa,Temperature Control rev_01,pleasedontcode,Arduino,Saturday 4th of May 2024 03:29:15 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Temperature Control
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-04 08:22:30

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Turn light on off */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <DS18B20.h>
#include <MCP23017.h>

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t Test_DS18B20_DQ_PIN_D2 = 2;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
DS18B20 ds(Test_DS18B20_DQ_PIN_D2);
MCP23017 ioExpander;

void setup(void)
{
	// Initialize MCP23017
	ioExpander.begin();

	// Set pin modes for MCP23017
	ioExpander.pinMode(8, INPUT_PULLUP); // Replace pin numbers as required
	ioExpander.pinMode(9, INPUT_PULLUP);
	ioExpander.pinMode(0, OUTPUT);
	ioExpander.pinMode(1, OUTPUT);

	// Set initial digital outputs
	ioExpander.digitalWrite(0, LOW);
	ioExpander.digitalWrite(1, LOW);
}

void loop(void)
{
	// Check input pin value and update output pins on the MCP23017
	ioExpander.digitalWrite(0, !ds.getTempC());  // Placeholder logic - change as needed
	ioExpander.digitalWrite(1, ds.getTempC());   // Placeholder logic - change as needed
}

/* END CODE */"
BTn0yQMs,Untitled,ekzolot,C++,Saturday 4th of May 2024 03:07:49 AM CDT,"//A
#include <bits/stdc++.h>
using namespace std;
struct Note{
    int l;
    int r;
    int ans;
    int d=0;
};
void build(vector<Note>& tree, vector<int>& a, int L, int R, int i){
    tree[i].l=L;
    tree[i].r=R;
    if (R-L==1){
        tree[i].ans=a[L];
        return;
    }
    int M=(R+L)/2;
    build(tree, a, L, M, 2*i+1);
    build(tree, a, M, R, 2*i+2);
    tree[i].ans=max(tree[2*i+1].ans, tree[2*i+2].ans);
}
void push(vector<Note>& tree, int i){
    tree[2*i+1].d+=tree[i].d;
    tree[2*i+2].d+=tree[i].d;
    tree[i].d=0;
}
void change(vector<Note>& tree, int i, int x, int L, int R){
    if (tree[i].l>=R || tree[i].r<=L){
        return;
    }
    if(tree[i].l>=L && tree[i].r<=R){
        tree[i].d+=x;
        return;
    }
    push(tree, i);
    change(tree, 2*i+1, x, L, R);
    change(tree, 2*i+2, x, L, R);
    tree[i].ans=max(tree[2*i+1].ans+tree[2*i+1].d, tree[2*i+2].ans+tree[2*i+2].d);
}
int answer(vector<Note>& tree, int i, int L, int R){
    if (tree[i].l>=R || tree[i].r<=L){
        return -1;
    }
    if(tree[i].l>=L && tree[i].r<=R){
        return tree[i].ans+tree[i].d;
    }
    push(tree, i);
    int m1=answer(tree, 2*i+1, L, R);
    int m2=answer(tree, 2*i+2, L, R);
    tree[i].ans=max(tree[2*i+1].ans+tree[2*i+1].d, tree[2*i+2].ans+tree[2*i+2].d);
    return max(m1, m2);
}
int main(){
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    vector<Note> tree(4*n);
    build(tree, a, 0, n, 0);
    int M;
    cin>>M;
    for (int i=0; i<M; i++){
        char x;
        cin>>x;
        if (x=='a'){
            int L, R, add;
            cin>>L>>R>>add;
            L--;
            change(tree, 0, add, L, R);
        }else{
            int L, R;
            cin>>L>>R;
            L--;
            cout<<answer(tree, 0, L, R)<<"" "";
        }
    }
    return 0;
}


//B
#include <bits/stdc++.h>
#define int long long
using namespace std;
struct Note{
    int pref;
    int suf;
    int ans;
};
void build(vector<Note>& tree, vector<int>& a, int v, int l, int r){
    if (r-l==1){
        if (a[l]==0){
            tree[v].pref=1;
            tree[v].suf=1;
            tree[v].ans=1;
        }else{
            tree[v].pref=0;
            tree[v].suf=0;
            tree[v].ans=0;
        }
        return;
    }
    int m=(l+r)/2;
    build(tree, a, 2*v+1, l, m);
    build(tree, a, 2*v+2, m, r);
    tree[v].ans=tree[2*v+1].suf+tree[2*v+2].pref;
    tree[v].ans=max(tree[v].ans, tree[2*v+1].ans);
    tree[v].ans=max(tree[v].ans, tree[2*v+2].ans);
    if (tree[2*v+2].ans==r-m){
        tree[v].suf=tree[2*v+1].suf+r-m;
    }else{
        tree[v].suf=tree[2*v+2].suf;
    }
    if (tree[2*v+1].ans==m-l) {
        tree[v].pref = m - l + tree[2 * v + 2].pref;
    }else{
        tree[v].pref=tree[2*v+1].pref;
    }
}
void change(vector<Note>& tree, vector<int>& a, int v, int l, int r, int pos, int x){
    if (r-l==1){
        if (x==0){
            tree[v].pref=1;
            tree[v].suf=1;
            tree[v].ans=1;
        }else{
            tree[v].pref=0;
            tree[v].suf=0;
            tree[v].ans=0;
        }
        return;
    }
    int m=(r+l)/2;
    if (pos<m){
        change(tree, a, 2*v+1, l, m, pos, x);
    }else{
        change(tree, a, 2*v+2, m,r, pos, x);
    }
    tree[v].ans=tree[2*v+1].suf+tree[2*v+2].pref;
    tree[v].ans=max(tree[v].ans, tree[2*v+1].ans);
    tree[v].ans=max(tree[v].ans, tree[2*v+2].ans);
    if (tree[2*v+2].ans==r-m){
        tree[v].suf=tree[2*v+1].suf+r-m;
    }else{
        tree[v].suf=tree[2*v+2].suf;
    }
    if (tree[2*v+1].ans==m-l) {
        tree[v].pref = m - l + tree[2 * v + 2].pref;
    }else{
        tree[v].pref=tree[2*v+1].pref;
    }
}
int ans(vector<Note>& tree, vector<int>& a, int v, int l, int r, int L, int R){
    if (L>=r || R<=l){
        return 0;
    }
    if (L<=l && R>=r){
        //cout<<l<<"" ""<<r<<"" ""<<L<<"" ""<<R<<"" ""<<tree[v].ans<<""\n"";
        return tree[v].ans;
    }
    int m=(r+l)/2;
    if (L<=m && R<=m){
        return ans(tree, a, 2*v+1, l, m, L, R);
    }
    if (L>=m && R>=m){
        return ans(tree, a, 2*v+2, m, r, L, R);
    }
    //cout<<l<<"" ""<<r<<"" ""<<L<<"" ""<<R<<"" ""<<min(m-L, tree[2*v+1].suf)+min(R-m, tree[2*v+2].pref)<<""\n"";
    int y=min(m-L, tree[2*v+1].suf)+min(R-m, tree[2*v+2].pref);
    y=max(y, ans(tree, a, 2*v+1, l, m, L, R));
    y=max(y, ans(tree, a, 2*v+2, m, r, L, R));
    return y;
}
signed main(){
    int N;
    cin>>N;
    if (N<10000){
        vector<int> q(N);
        for (int i=0; i<N; i++){
            cin>>q[i];
        }
        int m;
        cin>>m;
        while(m--){
            char type;
            cin>>type;
            if (type=='+'){
                int L, R, d;
                cin>>L>>R>>d;
                L--;
                for (int i=L; i<R; i++){
                    q[i]+=d;
                }
            }else{
                int L, R;
                cin>>L>>R;
                L--;
                int ans=0;
                int cnt=0;
                for (int i=L; i<R-1; i++){
                    if (q[i+1]-q[i]!=1){
                        cnt=0;
                    }else{
                        cnt++;
                    }
                    ans=max(ans, cnt);
                }
                cout<<ans+1<<""\n"";
            }
        }
        return 0;
    }
    vector<int> b(N);
    for (int i=0; i<N; i++) {
        cin>>b[i];
    }
    int n=N-1;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        a[i]=b[i+1]-b[i]-1;
    }
    vector<Note> tree(4*n);
    build(tree, a, 0, 0, n);
    int m;
    cin>>m;
    while(m--){
        char type;
        cin>>type;
        if (type=='+'){
            int L, R, d;
            cin>>L>>R>>d;
            L--;
            if (L-1>=0 && L-1<n){
                a[L-1]+=d;
                change(tree, a, 0, 0, n, L-1, a[L-1]);
            }
            if (R-1<n && R-1>=0){
                a[R-1]-=d;
                change(tree, a, 0, 0, n, R-1, a[R-1]);
            }
        }
        else{
            int L, R;
            cin>>L>>R;
            L--;
            if (L==n || L==R-1){
                cout<<1<<""\n"";
                continue;
            }
            cout<<ans(tree, a, 0, 0, n, L, R-1)+1<<""\n"";
        }
    }
    return 0;
}


//C
#include <bits/stdc++.h>
#define int long long
using namespace std;
struct Note{
    vector<int> v;
    int l;
    int r;
    int d=0;
};
vector<int> binary_rep(int x){
    vector<int> ans;
    while(x>0){
        ans.push_back(x%2);
        x/=2;
    }
    while(ans.size()<40){
        ans.push_back(0);
    }
    reverse(ans.begin(), ans.end());
    return ans;
}
void unite(vector<int>& vert, vector<int>& left, vector<int>& right){
    for (int i=0; i<40; i++){
        vert[i]=left[i]+right[i];
    }
}
void build(vector<Note>& tree, int idx, int L, int R, vector<vector<int>>& a){
    (tree[idx].v).resize(40);
    tree[idx].l=L;
    tree[idx].r=R;
    if (R-L==1){
        tree[idx].v=a[L];
        return;
    }
    int M=(L+R)/2;
    build(tree, 2*idx+1, L, M, a);
    build(tree, 2*idx+2, M, R, a);
    unite(tree[idx].v, tree[2*idx+1].v, tree[2*idx+2].v);
}
void push(vector<Note>& tree, int idx){
    tree[2*idx+1].d=tree[idx].d^tree[2*idx+1].d;
    tree[2*idx+2].d=tree[idx].d^tree[2*idx+2].d;
    tree[idx].d=0;
}
vector<int> counting_vector(vector<int>& ans, int x, int k){
    vector<int> cnt(40);
    for (int i=0; i<40; i++){
        if (!((x>>(39-i))&1)){
            cnt[i]=ans[i];
        }else{
            cnt[i]=k-ans[i];
        }
    }
    return cnt;
}
void change(vector<Note>& tree, int idx, int L, int R, int x){
    if (tree[idx].l>=R || tree[idx].r<=L){
        return;
    }
    if (L<=tree[idx].l && R>=tree[idx].r){
        tree[idx].d=tree[idx].d^x;
        return;
    }
    push(tree, idx);
    change(tree, 2*idx+1, L, R, x);
    change(tree, 2*idx+2, L, R, x);
    int len1=tree[2*idx+1].r-tree[2*idx+1].l;
    int len2=tree[2*idx+2].r-tree[2*idx+2].l;
    vector<int> y1=counting_vector(tree[2*idx+1].v, tree[2*idx+1].d, len1);
    vector<int> y2=counting_vector(tree[2*idx+2].v, tree[2*idx+2].d, len2);
    unite(tree[idx].v, y1, y2);
}
int counting(vector<int>& ans, int x, int k){
    int cnt=0;
    for (int i=0; i<40; i++){
        if (!((x>>(39-i))&1)){
            cnt+=ans[i]*(1<<(39-i));
        }else{
            cnt+=(1<<(39-i))*(k-ans[i]);
        }
    }
    return cnt;
}
int answer(vector<Note>& tree, int idx, int L, int R){
    if (L>=tree[idx].r || R<=tree[idx].l){
        return 0;
    }
    if (L<=tree[idx].l && R>=tree[idx].r){
        int len=tree[idx].r-tree[idx].l;
        return counting(tree[idx].v, tree[idx].d, len);
    }
    push(tree, idx);
    int len1=tree[2*idx+1].r-tree[2*idx+1].l;
    int len2=tree[2*idx+2].r-tree[2*idx+2].l;
    vector<int> y1=counting_vector(tree[2*idx+1].v, tree[2*idx+1].d, len1);
    vector<int> y2=counting_vector(tree[2*idx+2].v, tree[2*idx+2].d, len2);
    unite(tree[idx].v, y1, y2);
    return answer(tree, 2*idx+1, L, R)+answer(tree, 2*idx+2, L, R);
}
signed main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin>>n;
    vector<vector<int>> a(n);
    for (int i=0; i<n; i++){
        int q;
        cin>>q;
        a[i]=binary_rep(q);
    }
    int m;
    cin>>m;
    vector<Note> tree(4*n);
    build(tree, 0, 0, n, a);
    while(m--){
        int t;
        cin>>t;
        if (t==1){
            int L, R;
            cin>>L>>R;
            L--;
            cout<<answer(tree, 0, L, R)<<""\n"";
        }
        else{
            int L, R, x;
            cin>>L>>R>>x;
            L--;
            change(tree, 0, L, R, x);
        }
    }
    return 0;
}
"
UmWcBtV0,Untitled,ekzolot,C++,Saturday 4th of May 2024 03:05:46 AM CDT,"//A
#include <bits/stdc++.h>
using namespace std;
void build(vector<pair<int, int>>& tree, int idx, int l, int r, vector<int>& a){
    if (r-l==1){
        tree[idx]={a[l], l};
        return;
    }
    int m=(l+r)/2;
    build(tree, 2*idx+1, l, m, a);
    build(tree, 2*idx+2, m, r, a);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
void change(vector<pair<int, int>>& tree, int l, int r, int idx, int i, int x){
    if (i<l || i>=r){
        return;
    }
    if (r-l==1){
        tree[idx]={x, i};
        return;
    }
    int m=(l+r)/2;
    change(tree, l, m, 2*idx+1, i, x);
    change(tree, m, r, 2*idx+2, i, x);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
pair<int, int> ans(vector<pair<int, int>>& tree, int idx, int l, int r, int L, int R){
    if (R<=l || L>=r){
        return {-1, -1};
    }
    if (l>=L && r<=R){
        return tree[idx];
    }
    int m=(l+r)/2;
    return max(ans(tree, 2*idx+1, l, m, L, R), ans(tree, 2*idx+2, m, r, L, R));
}
int main(){
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    int k;
    cin>>k;
    vector<pair<int, int>> tree(4*n);
    build(tree, 0, 0, n, a);
    while(k--){
        int l, r;
        cin>>l>>r;
        l--;
        cout<<ans(tree, 0, 0, n, l, r).first<<"" ""<<ans(tree, 0, 0, n, l, r).second+1<<""\n"";
    }
    return 0;
}

//B
#include <bits/stdc++.h>
using namespace std;
void build(vector<pair<int, int>>& tree, int idx, int l, int r, vector<int>& a){
    if (r-l==1){
        tree[idx]={a[l], l};
        return;
    }
    int m=(l+r)/2;
    build(tree, 2*idx+1, l, m, a);
    build(tree, 2*idx+2, m, r, a);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
void change(vector<pair<int, int>>& tree, int l, int r, int idx, int i, int x){
    if (i<l || i>=r){
        return;
    }
    if (r-l==1){
        tree[idx]={x, i};
        return;
    }
    int m=(l+r)/2;
    change(tree, l, m, 2*idx+1, i, x);
    change(tree, m, r, 2*idx+2, i, x);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
pair<int, int> ans(vector<pair<int, int>>& tree, int idx, int l, int r, int L, int R){
    if (R<=l || L>=r){
        return {-1, -1};
    }
    if (l>=L && r<=R){
        return tree[idx];
    }
    int m=(l+r)/2;
    return max(ans(tree, 2*idx+1, l, m, L, R), ans(tree, 2*idx+2, m, r, L, R));
}
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    int k;
    cin>>k;
    vector<pair<int, int>> tree(4*n);
    build(tree, 0, 0, n, a);
    while(k--){
        int l, r;
        cin>>l>>r;
        l--;
        cout<<ans(tree, 0, 0, n, l, r).second+1<<""\n"";
    }
    return 0;
}

//C
#include <bits/stdc++.h>
using namespace std;
struct Note{
    int pref;
    int suf;
    int ans;
};
void build(vector<Note>& tree, vector<int>& a, int v, int l, int r){
    if (r-l==1){
        if (a[l]==0){
            tree[v].pref=1;
            tree[v].suf=1;
            tree[v].ans=1;
        }else{
            tree[v].pref=0;
            tree[v].suf=0;
            tree[v].ans=0;
        }
        return;
    }
    int m=(l+r)/2;
    build(tree, a, 2*v+1, l, m);
    build(tree, a, 2*v+2, m, r);
    tree[v].ans=tree[2*v+1].suf+tree[2*v+2].pref;
    tree[v].ans=max(tree[v].ans, tree[2*v+1].ans);
    tree[v].ans=max(tree[v].ans, tree[2*v+2].ans);
    if (tree[2*v+2].ans==r-m){
        tree[v].suf=tree[2*v+1].suf+r-m;
    }else{
        tree[v].suf=tree[2*v+2].suf;
    }
    if (tree[2*v+1].ans==m-l) {
        tree[v].pref = m - l + tree[2 * v + 2].pref;
    }else{
        tree[v].pref=tree[2*v+1].pref;
    }
}
void change(vector<Note>& tree, vector<int>& a, int v, int l, int r, int pos, int x){
    if (r-l==1){
        if (x==0){
            tree[v].pref=1;
            tree[v].suf=1;
            tree[v].ans=1;
        }else{
            tree[v].pref=0;
            tree[v].suf=0;
            tree[v].ans=0;
        }
        return;
    }
    int m=(r+l)/2;
    if (pos<m){
        change(tree, a, 2*v+1, l, m, pos, x);
    }else{
        change(tree, a, 2*v+2, m,r, pos, x);
    }
    tree[v].ans=tree[2*v+1].suf+tree[2*v+2].pref;
    tree[v].ans=max(tree[v].ans, tree[2*v+1].ans);
    tree[v].ans=max(tree[v].ans, tree[2*v+2].ans);
    if (tree[2*v+2].ans==r-m){
        tree[v].suf=tree[2*v+1].suf+r-m;
    }else{
        tree[v].suf=tree[2*v+2].suf;
    }
    if (tree[2*v+1].ans==m-l) {
        tree[v].pref = m - l + tree[2 * v + 2].pref;
    }else{
        tree[v].pref=tree[2*v+1].pref;
    }
}
int ans(vector<Note>& tree, vector<int>& a, int v, int l, int r, int L, int R){
    if (L>=r || R<=l){
        return 0;
    }
    if (L<=l && R>=r){
        //cout<<l<<"" ""<<r<<"" ""<<L<<"" ""<<R<<"" ""<<tree[v].ans<<""\n"";
        return tree[v].ans;
    }
    int m=(r+l)/2;
    if (L<m && R<m){
        return ans(tree, a, 2*v+1, l, m, L, R);
    }
    if (L>=m && R>=m){
        return ans(tree, a, 2*v+2, m, r, L, R);
    }
    //cout<<l<<"" ""<<r<<"" ""<<L<<"" ""<<R<<"" ""<<min(m-L, tree[2*v+1].suf)+min(R-m, tree[2*v+2].pref)<<""\n"";
    int y=min(m-L, tree[2*v+1].suf)+min(R-m, tree[2*v+2].pref);
    y=max(y, ans(tree, a, 2*v+1, l, m, L, R));
    y=max(y, ans(tree, a, 2*v+2, m, r, L, R));
    return y;
}
int main(){
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    vector<Note> tree(4*n);
    build(tree, a, 0, 0, n);
    int m;
    cin>>m;
    for (int j=0; j<m; j++){
        string s;
        cin>>s;
        if (s==""UPDATE""){
            int i, x;
            cin>>i>>x;
            i--;
            a[i]=x;
            change(tree, a, 0, 0, n, i, x);
        }else{
            int l, r;
            cin>>l>>r;
            l--;
            cout<<ans(tree, a, 0, 0, n, l, r)<<""\n"";
        }
    }
}

//D
#include <iostream>
#include <vector>
#include <string>
#define int long long
using namespace std;
void build(vector<int>& tree, vector<int>& a, int v, int l, int r){
    if (r-l==1){
        tree[v]=a[l];
        return;
    }
    int m=(r+l)/2;
    build(tree, a, 2*v+1, l, m);
    build(tree, a, 2*v+2, m, r);
    tree[v]=tree[2*v+1]+tree[2*v+2];
    return;
}
void change(vector<int>& tree, vector<int>&  a, int v, int l, int r, int pos, int x){
    if (r-l==1){
        tree[v] = x;
        return;
    }
    int m=(r+l)/2;
    if (pos<m){
        change(tree, a, 2*v+1, l, m, pos, x);
    }else{
        change(tree, a, 2*v+2, m, r, pos, x);
    }
    tree[v]=tree[2*v+1]+tree[2*v+2];
    return;
}
int sum(vector<int>& tree, vector<int>& a, int v, int l, int r, int L, int R){
    if (L>=r || R<=l){
        return 0;
    }
    if (L<=l && R>=r){
        return tree[v];
    }
    int m=(r+l)/2;
    int ans=sum(tree, a, 2*v+1, l, m, L, R)+sum(tree, a, 2*v+2, m, r, L, R);
    return ans;
}
signed main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
        if (a[i]==0){
            a[i]=1;
        }else{
            a[i]=0;
        }
    }
    vector<int> tree(4*n);
    build(tree, a, 0, 0, n);
    int m;
    cin>>m;
    for (int i=0; i<m; i++){
        char x;
        cin>>x;
        if (x=='u') {
            int p, q;
            cin >> p >> q;
            p--;
            if (q==0){
                a[p]=1;
            }else{
                a[p]=0;
            }
            change(tree, a, 0, 0, n, p, a[p]);
        }else{
            int p, q, k;
            cin>>p>>q>>k;
            p--;
            int l=p;
            int r=q+1;
            while(r-l>1){
                int m=(r+l)/2;
                if (sum(tree, a, 0, 0, n, p, m)<k){
                    l=m;
                }else{
                    r=m;
                }
            }
            if (r==q+1){
                cout<<""-1""<<""\n"";
            }else{
                cout<<r<<""\n"";
            }
        }
    }
}


//F
#include <bits/stdc++.h>
#define int long long
using namespace std;
struct Note{
    int l;
    int r;
    int ans;
    int d=0;
};
void build(vector<Note>& tree, vector<int>& a, int L, int R, int i){
    tree[i].l=L;
    tree[i].r=R;
    if (R-L==1){
        tree[i].ans=a[L];
        return;
    }
    int M=(R+L)/2;
    build(tree, a, L, M, 2*i+1);
    build(tree, a, M, R, 2*i+2);
    tree[i].ans=max(tree[2*i+1].ans, tree[2*i+2].ans);
}
void push(vector<Note>& tree, int i){
    tree[2*i+1].d+=tree[i].d;
    tree[2*i+2].d+=tree[i].d;
    tree[i].d=0;
}
void change(vector<Note>& tree, int i, int x, int L, int R){
    if (tree[i].l>=R || tree[i].r<=L){
        return;
    }
    if(tree[i].l>=L && tree[i].r<=R){
        tree[i].d+=x;
        return;
    }
    push(tree, i);
    change(tree, 2*i+1, x, L, R);
    change(tree, 2*i+2, x, L, R);
    tree[i].ans=max(tree[2*i+1].ans+tree[2*i+1].d, tree[2*i+2].ans+tree[2*i+2].d);
}
int answer(vector<Note>& tree, int i, int L, int R){
    if (tree[i].l>=R || tree[i].r<=L){
        return -1;
    }
    if(tree[i].l>=L && tree[i].r<=R){
        return tree[i].ans+tree[i].d;
    }
    push(tree, i);
    int m1=answer(tree, 2*i+1, L, R);
    int m2=answer(tree, 2*i+2, L, R);
    tree[i].ans=max(tree[2*i+1].ans+tree[2*i+1].d, tree[2*i+2].ans+tree[2*i+2].d);
    return max(m1, m2);
}
signed main(){
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    vector<Note> tree(4*n);
    build(tree, a, 0, n, 0);
    int M;
    cin>>M;
    for (int i=0; i<M; i++){
        char x;
        cin>>x;
        if (x=='a'){
            int L, R, add;
            cin>>L>>R>>add;
            L--;
            change(tree, 0, add, L, R);
        }else{
            int i;
            cin>>i;
            i--;
            cout<<answer(tree, 0, i, i+1)<<""\n"";
        }
    }
    return 0;
}

//H
#include <bits/stdc++.h>
using namespace std;
const int N = 1000000;
string a;
struct Node {
    int open;
    int closed;
};
Node t[4*N];
#define left  2 * v + 1
#define right  2 * v + 2
Node merge(Node l, Node r) {
    Node res;
    res.open = r.open;
    res.closed = l.closed;
    if (l.open >= r.closed) {
        res.open += l.open - r.closed;
    }
    else {
        res.closed += r.closed - l.open;
    }
    return res;
}
void build(int v, int l, int r) {
    if (r - l == 1) {
        if (a[l] == '(') {
            t[v] = Node { 1, 0 };
        }
        else {
            t[v] =  Node{ 0,1 };
        }
    }
    else {
        int m = (r + l) / 2;
        build(left, l, m);
        build(right, m, r);
        t[v] = merge(t[left], t[right]);
    }
}

Node result(int v, int l, int r, int ql, int qr) {
    if (l >= ql && r <= qr) {
        return t[v];
    } else if (r <= ql || l >= qr) {
        return Node{0, 0};
    } else {
        int m = (r + l) / 2;
        Node p = result(left, l, m, ql, qr);
        Node q = result(right, m, r, ql, qr);
        return merge(p, q);

    }
}
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> a;
    int k;
    cin >> k;
    int n = a.size();
    build(0, 0, n);
    for (int i = 0; i < k; ++i) {
        int l; int r;
        cin >> l >> r;
        l--;
        auto x = result(0, 0, n, l, r);
        cout << (r - l) - (x.open + x.closed) << '\n';
    }
}


//G
#include <bits/stdc++.h>
using namespace std;
void build(vector<int>& tree, int idx, int l, int r, vector<int>& a){
    if (r-l==1){
        tree[idx]=a[l];
        return;
    }
    int m=(l+r)/2;
    build(tree, 2*idx+1, l, m, a);
    build(tree, 2*idx+2, m, r, a);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
void change(vector<int>& tree, int idx, int l, int r, int i, int x){
    if (l>i || r<=i){
        return;
    }
    if (r-l==1){
        tree[idx]=x;
        return;
    }
    int m=(l+r)/2;
    change(tree, 2*idx+1, l, m, i, x);
    change(tree, 2*idx+2, m, r, i, x);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
int maximum(vector<int>& tree, int idx, int l, int r, int L, int R){
    if (l>=R || r<=L){
        return -1;
    }
    if (l>=L && r<=R){
        return tree[idx];
    }
    int m=(l+r)/2;
    return max(maximum(tree, 2*idx+1, l, m, L, R), maximum(tree, 2*idx+2, m, r, L, R));
}
int ans(vector<int>& tree, int idx, int l, int r, int L, int R, int x){
    if (r-l==1){
        if (l>=L && l<R && tree[idx]>=x){
            return l;
        }
        return -2;
    }
    int m=(l+r)/2;
    int t=-2;
    if (!(l>=R || r<=L)){
        if (tree[2*idx+1]>=x){
            t=ans(tree, 2*idx+1, l, m, L, R, x);
        }
    }
    if (t!=-2){
        return t;
    }
    return ans(tree, 2*idx+2, m, r, L, R, x);
}
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n, m;
    cin>>n>>m;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    vector<int> tree(4*n);
    build(tree, 0, 0, n, a);
    while(m--){
        int t, i, x;
        cin>>t>>i>>x;
        i--;
        if (t==0){
            change(tree, 0, 0, n, i, x);
            a[i]=x;
        }else{
            cout<<ans(tree, 0, 0, n, i, n, x)+1<<""\n"";
        }
    }
}
"
L5XteLSn,MD5.Cracker,Tark_Wight,C++,Saturday 4th of May 2024 02:17:04 AM CDT,"#include<iostream>
#include <string>
#include <tchar.h>

static const char* firstHashString = ""qwertyuioplkjhgfdaszxcvbnmkjhgfdsaqwertyuikjh"" \
""gbvfdsazxdcvgbhnjikmjhbgfvcdsazxdcfrewqikolkjnhgfqwertyuioplkjh"" \
""gfdaszxcvbnmkjhgfdsaqwertyuikjhgbvfdsazxdcvgbhnjikmjhbgfvcdsa"" \
""zxdcfrewqikolkjnhgfq123"";

static const char* secondHashString = ""qaswderftgyhujikolpmnbvcxzasxdcfvgbhnjmkijuy"" \
""gtfdeswaqscfvgyjqaswderftgyhujikolpmnbvcxzasxdcfvgbhnjmkijuyg"" \
""tfdeswaqscfvgyjqaswderftgyhujikolpmnbvcxzasxdcfvgbhnjmkijuygt"" \
""tfdeswaqscfvgyjqwertyuikja2"";


int good() {
  int ficha;
  std::cout<<""Good, nice programme!"";
  std::cin>>ficha;

  return 0;
}

int bed() {
  int ficha;
  for(int i=0; i<1000; i++) {
	std::cout<<""Evil, evil code!"";
  }

  std::cin>>ficha;
  return 0;
}

int _tmain(int argc, _TCHAR* argv[]) {
  std::string firstString=firstHashString;  
  std::string secondString=secondHashString;

  firstString.erase(0,56);
  firstString.erase(128,8);
  secondString.erase(0,64);

  if (firstString==secondString) {
	return good();
  } else {
	return bed();
  }

  return 0;
}"
fqP2Vpfj,2000 example products data - SQL,rezamalik15,MySQL,Saturday 4th of May 2024 02:16:51 AM CDT,"CREATE TABLE product (
	id INT(10),
	name VARCHAR(200),
	brand VARCHAR(100),
	price DOUBLE(10,2),
	stock INT(10)
);

INSERT INTO products (id, name, brand, price, stock) 
VALUES
(9119,'Intelligent Metal Mouse','Asus','445373.00',435),
(2083,'Sleek Bronze Sausages','Unilever','443311.00',306),
(3498,'Elegant Soft Tuna','ZTE','685402.00',124),
(3256,'Licensed Bronze Chips','Gucci','581346.00',223),
(9319,'Elegant Rubber Shirt','Intel','438976.00',993),
(6484,'Practical Wooden Chair','Sharp','855026.00',207),
(5200,'Handmade Plastic Car','Motorola','864418.00',138),
(3862,'Fantastic Soft Chicken','Logitech','856128.00',705),
(6394,'Oriental Steel Pizza','Sharp','450527.00',697),
(7949,'Tasty Plastic Shoes','Microsoft','569773.00',686),
(4231,'Luxurious Wooden Cheese','Adobe','554890.00',603),
(7836,'Incredible Granite Chips','Samsung','663965.00',386),
(3848,'Small Soft Keyboard','Toshiba','638145.00',706),
(6021,'Luxurious Cotton Ball','FedEx','787590.00',729),
(1266,'Oriental Wooden Ball','Kawasaki','170488.00',994),
(2390,'Gorgeous Plastic Cheese','IBM','686041.00',467),
(8135,'Refined Wooden Keyboard','Crocs','81357.00',784),
(1354,'Elegant Cotton Fish','Nvidia','52513.00',393),
(5331,'Modern Plastic Fish','Vans','849949.00',858),
(8828,'Modern Cotton Ball','Logitech','363799.00',726),
(4800,'Modern Cotton Ball','Alienware','62354.00',611),
(1614,'Intelligent Steel Cheese','ZTE','79947.00',681),
(8765,'Ergonomic Steel Keyboard','Nvidia','958267.00',665),
(3790,'Bespoke Fresh Pizza','Porsche','214681.00',909),
(9418,'Modern Frozen Shirt','Aisan','503288.00',994),
(8463,'Elegant Concrete Mouse','Ferarri','654960.00',537),
(2003,'Fantastic Steel Chair','Uber','871477.00',496),
(4599,'Licensed Cotton Hat','Microsoft','337925.00',898),
(1615,'Licensed Cotton Pants','AMD','674415.00',815),
(1286,'Refined Metal Pizza','Lamborghini','708737.00',146),
(4618,'Awesome Cotton Pizza','Robot','24721.00',356),
(8321,'Tasty Fresh Salad','Audi','778122.00',846),
(8602,'Small Granite Table','Toshiba','290028.00',860),
(9579,'Refined Frozen Cheese','Intel','183395.00',534),
(7912,'Oriental Bronze Sausages','Toyota','404584.00',935),
(6689,'Bespoke Concrete Bike','Suzuki','763390.00',244),
(5231,'Elegant Plastic Pizza','Philips','953647.00',267),
(8202,'Bespoke Steel Ball','Xiaomi','381393.00',601),
(1213,'Handmade Granite Mouse','HTC','834280.00',164),
(2197,'Elegant Concrete Chips','Sharp','534023.00',865),
(9180,'Refined Bronze Chicken','Disney','267052.00',504),
(4678,'Awesome Steel Salad','Crocs','159050.00',749),
(9302,'Elegant Steel Chips','Robot','752864.00',951),
(3560,'Tasty Bronze Pants','Disney','815105.00',818),
(3265,'Intelligent Fresh Bacon','Xiaomi','105856.00',789),
(7351,'Tasty Fresh Ball','Alienware','434930.00',286),
(4589,'Ergonomic Granite Computer','Aisan','152986.00',199),
(1779,'Ergonomic Frozen Chair','Xiaomi','211809.00',423),
(3162,'Handmade Metal Fish','Kawasaki','722124.00',973),
(3534,'Refined Concrete Car','Mitsubishi','180776.00',531),
(1872,'Modern Rubber Pants','Huawei','903534.00',785),
(5281,'Licensed Plastic Keyboard','3M','711513.00',549),
(4717,'Generic Fresh Tuna','Pepsodent','422060.00',585),
(9344,'Intelligent Bronze Car','Lenovo','485800.00',189),
(6099,'Gorgeous Bronze Mouse','Uber','90635.00',447),
(6365,'Awesome Plastic Gloves','Motorola','762065.00',593),
(4785,'Electronic Granite Chips','Huawei','577522.00',676),
(8878,'Oriental Rubber Fish','ZTE','179805.00',790),
(8923,'Incredible Plastic Soap','Samsung','353780.00',227),
(3459,'Incredible Rubber Chicken','Nike','157764.00',622),
(9556,'Tasty Plastic Bacon','Suzuki','811431.00',849),
(3522,'Tasty Fresh Bike','Sony','527467.00',976),
(6579,'Handcrafted Granite Bacon','IBM','817460.00',622),
(5107,'Awesome Metal Fish','Aisan','497952.00',940),
(7249,'Modern Metal Keyboard','Mercedes','545023.00',603),
(2764,'Refined Steel Table','HTC','984388.00',204),
(7350,'Incredible Granite Salad','Audi','660624.00',796),
(7653,'Modern Steel Chips','Chanel','838424.00',136),
(2030,'Recycled Bronze Ball','HBO','695322.00',330),
(4453,'Tasty Metal Soap','Amazon','686414.00',642),
(9726,'Small Rubber Chips','Gucci','896943.00',351),
(2936,'Tasty Fresh Chips','Microsoft','353926.00',614),
(6754,'Practical Wooden Salad','Lenovo','325837.00',783),
(2926,'Unbranded Concrete Soap','Apple','501015.00',222),
(7486,'Refined Fresh Gloves','Adobe','357658.00',790),
(1220,'Licensed Metal Bike','Nokia','111439.00',391),
(9616,'Elegant Steel Mouse','Disney','248094.00',286),
(1700,'Electronic Steel Soap','Chanel','371277.00',915),
(2234,'Ergonomic Concrete Chips','Toyota','117013.00',226),
(6331,'Luxurious Frozen Cheese','Mitsubishi','120906.00',303),
(3887,'Licensed Steel Ball','Toyota','786222.00',519),
(9844,'Refined Fresh Pants','Huawei','706220.00',384),
(2377,'Elegant Rubber Mouse','Suzuki','985647.00',761),
(1064,'Awesome Plastic Bacon','Pepsodent','919633.00',255),
(2732,'Fantastic Fresh Keyboard','Philips','658076.00',253),
(5420,'Sleek Rubber Mouse','Pepsodent','461781.00',105),
(7398,'Generic Steel Hat','Huawei','15554.00',234),
(7437,'Awesome Metal Chips','ZTE','709521.00',387),
(2812,'Fantastic Wooden Chair','Asus','524053.00',173),
(7299,'Elegant Cotton Car','Pepsodent','154347.00',949),
(2263,'Awesome Wooden Fish','Lamborghini','620494.00',229),
(6071,'Small Concrete Mouse','Mitsubishi','257871.00',633),
(4595,'Electronic Frozen Chips','Lenovo','909673.00',218),
(2121,'Sleek Soft Ball','ZTE','357524.00',702),
(2565,'Sleek Concrete Fish','Philips','748569.00',182),
(7428,'Incredible Fresh Keyboard','Unilever','552163.00',897),
(3837,'Elegant Steel Soap','Polytron','618032.00',339),
(3224,'Recycled Soft Pizza','Robot','918888.00',762),
(4008,'Luxurious Cotton Salad','Unilever','251901.00',627),
(6012,'Incredible Metal Table','Samsung','847926.00',383),
(5094,'Gorgeous Bronze Bacon','Ferarri','51393.00',336),
(4808,'Intelligent Bronze Shoes','Kawasaki','102199.00',887),
(6125,'Licensed Granite Ball','Alienware','95579.00',985),
(3613,'Awesome Wooden Car','Philips','170499.00',177),
(9324,'Gorgeous Cotton Mouse','Mitsubishi','731194.00',448),
(5335,'Recycled Wooden Chicken','Lamborghini','640700.00',795),
(1785,'Practical Rubber Gloves','Motorola','192584.00',878),
(4775,'Luxurious Metal Computer','Uber','90707.00',363),
(5334,'Modern Wooden Hat','Audi','712946.00',779),
(1733,'Practical Wooden Table','Nike','485039.00',726),
(6721,'Unbranded Fresh Pizza','Amazon','585111.00',998),
(6243,'Handmade Cotton Pizza','Uniqlo','517470.00',855),
(7303,'Generic Steel Shirt','HTC','147004.00',361),
(7609,'Generic Concrete Bike','Mercedes','404643.00',847),
(8518,'Modern Plastic Chicken','HTC','787316.00',401),
(5055,'Tasty Wooden Pizza','Acer','844431.00',782),
(5648,'Modern Steel Pants','Crocs','870830.00',259),
(1592,'Modern Granite Chips','Hyundai','207750.00',648),
(7297,'Practical Concrete Towels','Sharp','535211.00',744),
(6216,'Electronic Cotton Car','Logitech','819718.00',173),
(7218,'Oriental Fresh Chips','Nvidia','250815.00',695),
(2998,'Intelligent Concrete Pizza','HTC','576204.00',775),
(9219,'Sleek Cotton Computer','Ferarri','336203.00',656),
(6540,'Rustic Bronze Sausages','Nintendo','175161.00',999),
(2056,'Electronic Metal Mouse','Suzuki','867121.00',577),
(2514,'Rustic Steel Ball','Ferarri','711994.00',997),
(6309,'Recycled Steel Bike','HTC','385268.00',886),
(8306,'Intelligent Concrete Mouse','Polytron','122004.00',683),
(6451,'Elegant Cotton Ball','3M','391574.00',252),
(2783,'Electronic Cotton Shoes','Aisan','133050.00',474),
(3278,'Awesome Rubber Pizza','Mitsubishi','783267.00',809),
(8732,'Awesome Bronze Cheese','Mitsubishi','786897.00',344),
(9963,'Gorgeous Steel Car','Yamaha','683936.00',477),
(8163,'Generic Plastic Ball','Robot','146468.00',682),
(5044,'Gorgeous Steel Hat','Nvidia','308802.00',359),
(8907,'Bespoke Plastic Fish','Robot','128914.00',114),
(1130,'Luxurious Wooden Car','Mercedes','953696.00',217),
(1620,'Unbranded Bronze Fish','Nintendo','995091.00',617),
(2545,'Rustic Metal Fish','Uber','772986.00',361),
(1732,'Sleek Granite Bike','Pepsodent','374299.00',526),
(4673,'Handmade Cotton Computer','Samsung','710535.00',241),
(8960,'Intelligent Soft Car','Nokia','452353.00',348),
(7399,'Generic Soft Car','Motorola','973753.00',299),
(1080,'Practical Plastic Chicken','Amazon','281547.00',308),
(9294,'Generic Wooden Hat','Audi','53848.00',445),
(6810,'Intelligent Metal Ball','Asus','669506.00',515),
(9741,'Electronic Metal Keyboard','Intel','704919.00',841),
(3680,'Gorgeous Bronze Car','Nokia','519876.00',476),
(8696,'Incredible Plastic Towels','Microsoft','74276.00',236),
(6678,'Electronic Cotton Pizza','Aisan','742451.00',434),
(3491,'Refined Steel Car','Ferarri','950124.00',781),
(8487,'Small Concrete Salad','Crocs','620863.00',889),
(2700,'Luxurious Plastic Table','Uniqlo','846302.00',130),
(3921,'Awesome Bronze Keyboard','Amazon','569247.00',855),
(2628,'Oriental Cotton Sausages','Sony','222680.00',373),
(4919,'Fantastic Wooden Fish','Nvidia','826842.00',731),
(2030,'Modern Plastic Bacon','Asus','532256.00',203),
(3064,'Electronic Metal Chips','Uber','614219.00',991),
(6526,'Tasty Steel Hat','Audi','499780.00',327),
(7121,'Incredible Plastic Table','HBO','832908.00',225),
(3059,'Sleek Metal Computer','Lamborghini','663049.00',469),
(6194,'Gorgeous Metal Sausages','Intel','748894.00',541),
(4275,'Generic Wooden Tuna','Adobe','813562.00',933),
(8098,'Handmade Metal Soap','Gucci','445556.00',611),
(4678,'Awesome Bronze Mouse','Porsche','768451.00',838),
(8264,'Modern Soft Shoes','Tesla','929102.00',379),
(2923,'Elegant Plastic Hat','Motorola','42855.00',725),
(3766,'Awesome Rubber Sausages','Hyundai','659615.00',416),
(8405,'Sleek Bronze Bacon','Ferarri','398220.00',357),
(9467,'Handmade Fresh Car','Rolex','601867.00',252),
(2869,'Awesome Soft Bike','Philips','737671.00',849),
(7632,'Incredible Soft Bike','Robot','832945.00',355),
(2533,'Licensed Fresh Table','Amazon','619413.00',828),
(6574,'Unbranded Bronze Table','3M','625589.00',188),
(8339,'Electronic Steel Pants','Uber','227558.00',815),
(6945,'Bespoke Metal Fish','Rolex','872475.00',482),
(3734,'Modern Steel Ball','Adidas','318418.00',949),
(4038,'Electronic Wooden Pizza','Motorola','985818.00',492),
(1078,'Ergonomic Rubber Pants','Intel','613937.00',351),
(6791,'Refined Soft Car','3M','154418.00',230),
(9558,'Handcrafted Granite Gloves','Xiaomi','711224.00',329),
(2265,'Gorgeous Frozen Bike','AMD','598146.00',143),
(9928,'Luxurious Frozen Ball','AMD','519970.00',235),
(8891,'Generic Plastic Pizza','Huawei','896348.00',774),
(9456,'Handmade Granite Tuna','Mercedes','649732.00',714),
(7468,'Sleek Bronze Shirt','Crocs','288530.00',423),
(9626,'Gorgeous Frozen Chair','Lamborghini','472877.00',374),
(5942,'Unbranded Frozen Chicken','Intel','804541.00',665),
(3213,'Electronic Metal Gloves','Adobe','555689.00',788),
(8611,'Modern Cotton Sausages','Philips','291024.00',406),
(8025,'Sleek Wooden Soap','Philips','717730.00',227),
(9195,'Fantastic Steel Fish','Porsche','969982.00',566),
(6584,'Handcrafted Metal Mouse','Motorola','929280.00',835),
(1675,'Incredible Bronze Chair','Disney','52496.00',912),
(4589,'Luxurious Steel Towels','Uber','635952.00',311),
(1691,'Sleek Cotton Chicken','Polytron','208071.00',981),
(2296,'Handcrafted Rubber Shoes','Yamaha','92609.00',318),
(6384,'Incredible Frozen Chicken','Apple','422835.00',818),
(7889,'Licensed Plastic Bacon','Unilever','91025.00',453),
(9506,'Electronic Soft Fish','HTC','580788.00',811),
(3203,'Oriental Rubber Mouse','Amazon','623348.00',176),
(7753,'Tasty Steel Car','Unilever','430741.00',549),
(3263,'Intelligent Rubber Ball','Mercedes','959687.00',686),
(5730,'Incredible Bronze Tuna','Toyota','785487.00',954),
(8863,'Recycled Rubber Shirt','Asus','928720.00',817),
(4774,'Awesome Soft Tuna','Crocs','161022.00',770),
(4190,'Recycled Concrete Fish','Chanel','484835.00',771),
(8094,'Electronic Cotton Mouse','Philips','265777.00',199),
(1584,'Modern Frozen Salad','Nintendo','125417.00',325),
(3600,'Unbranded Soft Gloves','Toshiba','720501.00',400),
(5970,'Practical Bronze Ball','Toshiba','556925.00',391),
(7100,'Oriental Plastic Hat','Mercedes','495560.00',377),
(8827,'Ergonomic Metal Keyboard','Rolex','602449.00',283),
(5448,'Handcrafted Concrete Towels','AMD','862765.00',567),
(6849,'Luxurious Plastic Sausages','Logitech','943259.00',665),
(2511,'Bespoke Fresh Gloves','Toyota','929788.00',870),
(7371,'Intelligent Wooden Chips','Adobe','458582.00',370),
(5824,'Modern Cotton Computer','Chanel','731544.00',580),
(1178,'Handmade Cotton Table','Sharp','780695.00',424),
(5683,'Recycled Cotton Salad','Pepsodent','816704.00',315),
(7420,'Gorgeous Concrete Car','Adobe','720847.00',552),
(1973,'Incredible Cotton Pizza','Audi','314382.00',613),
(9107,'Fantastic Fresh Chicken','Alienware','993260.00',220),
(9427,'Intelligent Rubber Car','Rolex','484752.00',706),
(2323,'Awesome Frozen Bacon','Hyundai','148438.00',955),
(8704,'Electronic Bronze Chair','HTC','474915.00',215),
(7541,'Licensed Rubber Gloves','Porsche','887170.00',754),
(2542,'Gorgeous Metal Soap','Kawasaki','277383.00',815),
(8100,'Gorgeous Plastic Bacon','Sharp','725884.00',247),
(9659,'Elegant Metal Bacon','Yamaha','939260.00',985),
(1029,'Luxurious Bronze Chips','Xiaomi','856865.00',129),
(7447,'Small Bronze Shoes','Yamaha','35905.00',963),
(1698,'Awesome Metal Shirt','Philips','329927.00',725),
(8765,'Oriental Fresh Chicken','Porsche','933964.00',267),
(6858,'Awesome Cotton Bike','Adobe','460061.00',555),
(6814,'Handcrafted Rubber Car','HTC','562664.00',839),
(2665,'Unbranded Granite Table','Rolex','297698.00',274),
(6824,'Handmade Plastic Shoes','Unilever','796756.00',198),
(9914,'Rustic Wooden Gloves','Huawei','123109.00',403),
(4781,'Bespoke Frozen Towels','Toyota','187172.00',929),
(6146,'Handmade Cotton Gloves','Suzuki','890339.00',140),
(3042,'Rustic Cotton Cheese','Mercedes','652246.00',398),
(2445,'Fantastic Cotton Hat','Mitsubishi','591722.00',847),
(4238,'Incredible Metal Chicken','Alienware','730573.00',683),
(9474,'Sleek Bronze Car','3M','233538.00',435),
(9398,'Incredible Concrete Mouse','Uber','365793.00',538),
(3974,'Tasty Rubber Shoes','Motorola','891530.00',108),
(5614,'Rustic Frozen Bike','FedEx','519630.00',517),
(6281,'Tasty Concrete Towels','Pepsodent','90893.00',469),
(9323,'Intelligent Metal Hat','Apple','772854.00',177),
(8531,'Recycled Plastic Sausages','Nintendo','631122.00',215),
(1583,'Bespoke Soft Ball','Acer','67759.00',928),
(4579,'Handcrafted Wooden Salad','Tesla','931549.00',855),
(2979,'Gorgeous Frozen Car','Pepsodent','317047.00',674),
(5394,'Bespoke Concrete Car','Huawei','936277.00',872),
(3292,'Incredible Plastic Bacon','Huawei','892031.00',663),
(5137,'Fantastic Granite Cheese','Nvidia','690179.00',573),
(6398,'Unbranded Frozen Gloves','Chanel','224772.00',775),
(7417,'Fantastic Metal Ball','Adobe','508504.00',987),
(6576,'Sleek Metal Shirt','Intel','71749.00',522),
(9516,'Fantastic Concrete Chicken','Nokia','89718.00',754),
(9265,'Refined Frozen Tuna','Sharp','183565.00',782),
(7432,'Handmade Concrete Pants','Robot','217804.00',859),
(7668,'Electronic Concrete Fish','Rolex','686929.00',651),
(9246,'Rustic Fresh Bacon','Toshiba','492083.00',960),
(7519,'Intelligent Plastic Mouse','Suzuki','601394.00',871),
(6363,'Handmade Steel Chicken','Suzuki','834012.00',167),
(9939,'Licensed Concrete Chair','Kawasaki','29027.00',153),
(7618,'Fantastic Fresh Ball','Uber','694570.00',677),
(3017,'Recycled Fresh Mouse','Aisan','297318.00',575),
(7769,'Licensed Wooden Pants','Xiaomi','963206.00',199),
(8690,'Handmade Bronze Cheese','Alienware','143019.00',185),
(4678,'Small Rubber Pizza','Audi','798504.00',162),
(9374,'Practical Fresh Gloves','Pepsodent','18831.00',245),
(1845,'Modern Bronze Cheese','Polytron','788172.00',244),
(3623,'Unbranded Granite Table','Polytron','69812.00',912),
(3487,'Awesome Frozen Sausages','Aisan','217617.00',205),
(2401,'Luxurious Plastic Bike','Ferarri','62000.00',642),
(6501,'Licensed Steel Shoes','Audi','843721.00',707),
(8525,'Refined Rubber Shirt','Chanel','31744.00',367),
(7020,'Awesome Concrete Hat','IBM','799581.00',890),
(9810,'Handcrafted Wooden Chair','Nintendo','448402.00',983),
(3325,'Licensed Bronze Keyboard','Suzuki','373802.00',952),
(9548,'Refined Wooden Computer','Ferarri','322037.00',463),
(5686,'Sleek Plastic Cheese','Hyundai','335009.00',637),
(3287,'Ergonomic Concrete Towels','Yamaha','892468.00',488),
(5678,'Incredible Rubber Car','Microsoft','772623.00',844),
(6650,'Gorgeous Wooden Gloves','Chanel','773380.00',769),
(2495,'Rustic Cotton Chair','Xiaomi','757373.00',729),
(1438,'Awesome Wooden Towels','IBM','509434.00',870),
(1014,'Generic Wooden Mouse','Amazon','461745.00',754),
(7095,'Elegant Soft Pizza','Acer','584085.00',835),
(6151,'Intelligent Wooden Pizza','Samsung','837655.00',924),
(5405,'Practical Steel Shirt','Asus','577211.00',183),
(2791,'Refined Rubber Keyboard','Hyundai','793730.00',388),
(8749,'Recycled Granite Fish','Motorola','382882.00',635),
(9618,'Licensed Bronze Tuna','Porsche','746862.00',756),
(3872,'Ergonomic Frozen Chips','Sony','891157.00',974),
(7206,'Practical Rubber Ball','Logitech','962877.00',427),
(7052,'Modern Steel Chips','Acer','287397.00',235),
(5954,'Ergonomic Rubber Chips','Uniqlo','958423.00',382),
(9741,'Recycled Frozen Gloves','Vans','134734.00',377),
(8097,'Sleek Metal Car','Mercedes','331453.00',604),
(7794,'Fantastic Concrete Shirt','AMD','812652.00',805),
(7413,'Sleek Frozen Chips','Microsoft','927778.00',801),
(8737,'Fantastic Rubber Hat','Hyundai','685415.00',514),
(9679,'Small Rubber Pizza','Kawasaki','278944.00',579),
(4237,'Incredible Concrete Ball','Lamborghini','952102.00',466),
(7767,'Bespoke Soft Towels','Huawei','458385.00',192),
(4207,'Rustic Frozen Keyboard','IBM','631456.00',299),
(3878,'Rustic Wooden Shirt','Toshiba','500077.00',983),
(1568,'Intelligent Rubber Mouse','Uniqlo','29739.00',406),
(6776,'Generic Concrete Bacon','IBM','881867.00',655),
(7484,'Electronic Granite Fish','IBM','583928.00',962),
(5095,'Luxurious Metal Hat','Disney','394993.00',631),
(4567,'Fantastic Concrete Cheese','FedEx','761846.00',390),
(8780,'Rustic Soft Computer','Nokia','825940.00',815),
(1746,'Small Concrete Car','Nvidia','518108.00',326),
(8217,'Tasty Granite Pants','Motorola','993459.00',738),
(9204,'Tasty Metal Shirt','Suzuki','728534.00',132),
(7116,'Rustic Plastic Bacon','AMD','47964.00',850),
(2619,'Handmade Concrete Gloves','Porsche','987008.00',739),
(1391,'Elegant Concrete Table','3M','973215.00',399),
(5719,'Incredible Frozen Tuna','Toshiba','407216.00',509),
(4967,'Gorgeous Metal Computer','Amazon','439802.00',919),
(6108,'Awesome Rubber Pants','HBO','504015.00',131),
(5374,'Modern Metal Pants','Polytron','311570.00',477),
(6944,'Oriental Cotton Sausages','HBO','355807.00',158),
(7233,'Refined Wooden Computer','Tesla','228332.00',560),
(3983,'Electronic Rubber Fish','HTC','333094.00',395),
(3691,'Recycled Concrete Gloves','Motorola','400520.00',800),
(1081,'Gorgeous Rubber Car','FedEx','36874.00',258),
(8171,'Bespoke Bronze Chair','Yamaha','681334.00',723),
(3428,'Practical Metal Chair','HBO','901122.00',271),
(9248,'Rustic Fresh Chips','Lamborghini','456213.00',714),
(4213,'Rustic Soft Mouse','Toyota','729777.00',607),
(2913,'Handmade Plastic Chips','Mitsubishi','225475.00',948),
(5026,'Intelligent Bronze Cheese','Uniqlo','600706.00',861),
(4518,'Refined Fresh Tuna','Unilever','53020.00',628),
(9693,'Recycled Cotton Bike','Nvidia','236217.00',945),
(3545,'Unbranded Cotton Bacon','3M','556093.00',754),
(5463,'Refined Soft Chicken','3M','161902.00',120),
(8368,'Luxurious Fresh Soap','Audi','255632.00',453),
(1232,'Awesome Soft Sausages','Chanel','327934.00',192),
(6720,'Handcrafted Cotton Hat','Adidas','929441.00',423),
(1644,'Fantastic Fresh Shirt','Porsche','395699.00',566),
(5803,'Tasty Bronze Computer','Microsoft','258864.00',556),
(6269,'Practical Plastic Fish','Adobe','186438.00',724),
(9646,'Sleek Concrete Keyboard','Aisan','210756.00',361),
(5232,'Intelligent Cotton Salad','Kawasaki','362162.00',482),
(1679,'Sleek Rubber Computer','Mercedes','429336.00',669),
(8715,'Unbranded Rubber Towels','HTC','648189.00',595),
(8448,'Practical Bronze Shirt','3M','228837.00',553),
(9036,'Modern Bronze Bike','Polytron','300217.00',875),
(1405,'Modern Steel Hat','Microsoft','972098.00',765),
(8807,'Incredible Frozen Ball','Sharp','802422.00',915),
(8104,'Electronic Concrete Sausages','Porsche','549681.00',194),
(3049,'Unbranded Metal Chicken','Adidas','979417.00',661),
(5634,'Oriental Fresh Fish','Audi','99525.00',890),
(8330,'Licensed Granite Ball','Mercedes','807908.00',433),
(5542,'Sleek Wooden Chair','Vans','756593.00',157),
(9578,'Recycled Plastic Sausages','Yamaha','717192.00',759),
(5766,'Licensed Rubber Sausages','Polytron','761425.00',470),
(5134,'Awesome Plastic Table','Lamborghini','159788.00',739),
(8527,'Ergonomic Fresh Salad','Crocs','602232.00',289),
(8076,'Handcrafted Concrete Shoes','Gucci','25320.00',673),
(7780,'Rustic Wooden Shirt','Asus','18991.00',905),
(1178,'Recycled Granite Salad','Nokia','177526.00',464),
(6665,'Tasty Plastic Shoes','Nvidia','597165.00',766),
(9781,'Recycled Granite Car','Uber','476538.00',451),
(3626,'Tasty Granite Computer','Kawasaki','153285.00',907),
(7732,'Awesome Wooden Pizza','Uber','277286.00',349),
(5732,'Modern Concrete Keyboard','Nvidia','728249.00',261),
(2960,'Small Concrete Shirt','Xiaomi','346767.00',193),
(1477,'Practical Bronze Sausages','Crocs','594253.00',463),
(5155,'Tasty Metal Chair','FedEx','433946.00',328),
(6736,'Incredible Concrete Shirt','Adidas','353307.00',983),
(2352,'Fantastic Concrete Towels','Porsche','821498.00',491),
(6480,'Electronic Soft Car','Audi','52752.00',797),
(3684,'Small Metal Tuna','Nokia','274199.00',991),
(4806,'Fantastic Rubber Keyboard','Ferarri','925879.00',460),
(8934,'Tasty Plastic Chips','Porsche','148612.00',443),
(6555,'Generic Soft Pizza','Apple','589358.00',932),
(1550,'Small Fresh Hat','Porsche','282510.00',956),
(6734,'Generic Soft Chair','Crocs','210207.00',779),
(8922,'Unbranded Fresh Car','Sharp','876860.00',962),
(5405,'Awesome Rubber Salad','Huawei','99437.00',330),
(4788,'Bespoke Metal Chicken','Samsung','780691.00',312),
(3187,'Incredible Metal Chair','Philips','665177.00',633),
(9930,'Small Cotton Table','Gucci','317406.00',420),
(4121,'Small Metal Salad','Mercedes','81389.00',540),
(8940,'Rustic Cotton Bacon','Adidas','38638.00',153),
(2117,'Luxurious Frozen Bike','Audi','733831.00',309),
(3142,'Rustic Granite Bacon','Intel','173845.00',350),
(8013,'Rustic Granite Shirt','Apple','676534.00',461),
(7720,'Bespoke Frozen Chair','Pepsodent','773665.00',316),
(2354,'Rustic Granite Sausages','Tesla','877015.00',235),
(6546,'Practical Cotton Hat','HTC','656655.00',279),
(6607,'Rustic Rubber Chicken','3M','95406.00',647),
(8683,'Ergonomic Rubber Shirt','Hyundai','242862.00',790),
(9153,'Intelligent Fresh Gloves','Mercedes','393034.00',433),
(3081,'Bespoke Concrete Pants','AMD','369624.00',528),
(6579,'Incredible Metal Chips','Uber','680845.00',951),
(8861,'Incredible Concrete Shirt','Amazon','365016.00',386),
(5772,'Rustic Plastic Sausages','Acer','675949.00',106),
(8719,'Luxurious Metal Bike','AMD','664614.00',762),
(9834,'Rustic Plastic Gloves','Unilever','375728.00',401),
(6610,'Recycled Metal Chicken','FedEx','928185.00',483),
(6396,'Elegant Wooden Fish','Huawei','498311.00',810),
(4880,'Oriental Concrete Fish','ZTE','862026.00',698),
(6212,'Awesome Fresh Pants','HTC','867519.00',274),
(2500,'Rustic Cotton Bike','Kawasaki','778058.00',899),
(4034,'Licensed Fresh Ball','Nintendo','117232.00',236),
(4181,'Electronic Rubber Pants','Samsung','745074.00',822),
(7508,'Rustic Soft Shoes','ZTE','926969.00',718),
(7087,'Electronic Concrete Salad','Yamaha','523824.00',459),
(9177,'Tasty Rubber Soap','Apple','693039.00',511),
(2089,'Unbranded Wooden Pizza','Pepsodent','73832.00',374),
(9627,'Bespoke Granite Pants','Toyota','674946.00',838),
(6247,'Electronic Fresh Ball','Huawei','321496.00',138),
(8403,'Sleek Rubber Chicken','Xiaomi','38804.00',550),
(2686,'Luxurious Wooden Towels','Suzuki','300617.00',418),
(8102,'Incredible Concrete Pizza','HBO','433582.00',633),
(1144,'Bespoke Steel Fish','Nintendo','824945.00',758),
(1266,'Small Cotton Pizza','Uber','907144.00',203),
(2812,'Bespoke Granite Table','Kawasaki','646634.00',134),
(8367,'Electronic Frozen Bike','Kawasaki','99444.00',468),
(6644,'Tasty Steel Pizza','Mitsubishi','453703.00',449),
(9591,'Elegant Concrete Hat','Aisan','722970.00',263),
(9290,'Recycled Granite Pants','Ferarri','554995.00',359),
(9456,'Incredible Soft Pizza','FedEx','890645.00',945),
(8217,'Incredible Metal Soap','Gucci','158333.00',335),
(1868,'Handcrafted Fresh Bacon','ZTE','635813.00',635),
(3669,'Elegant Cotton Hat','Yamaha','274138.00',334),
(1716,'Ergonomic Fresh Bacon','Crocs','92152.00',355),
(7568,'Unbranded Rubber Fish','Sony','51198.00',307),
(8565,'Oriental Granite Car','Nintendo','367394.00',568),
(4636,'Recycled Frozen Computer','FedEx','757977.00',154),
(1204,'Luxurious Metal Shirt','Kawasaki','141850.00',802),
(9894,'Oriental Plastic Salad','Vans','788933.00',929),
(3185,'Luxurious Soft Hat','Nike','637313.00',725),
(9777,'Tasty Plastic Hat','Hyundai','352661.00',382),
(4255,'Refined Steel Chips','HBO','215832.00',764),
(6873,'Sleek Concrete Hat','Alienware','296816.00',581),
(9987,'Generic Wooden Ball','Adobe','89449.00',723),
(3344,'Intelligent Soft Hat','Apple','984450.00',972),
(2889,'Generic Soft Towels','Vans','317479.00',733),
(4768,'Ergonomic Bronze Hat','Nintendo','74228.00',596),
(6516,'Sleek Fresh Shirt','Philips','485677.00',457),
(5568,'Electronic Soft Towels','Samsung','960553.00',983),
(6465,'Refined Cotton Car','Samsung','871140.00',576),
(5081,'Elegant Fresh Pants','IBM','195268.00',726),
(4664,'Rustic Granite Computer','Nokia','716471.00',519),
(9611,'Handmade Rubber Tuna','Acer','654646.00',762),
(7485,'Modern Bronze Towels','Lenovo','161160.00',186),
(7996,'Bespoke Soft Soap','Philips','155357.00',607),
(2920,'Recycled Bronze Tuna','Vans','619927.00',795),
(4335,'Rustic Steel Gloves','Nokia','273901.00',844),
(3242,'Modern Granite Pizza','Nike','284404.00',326),
(6513,'Luxurious Cotton Car','Pepsodent','578228.00',885),
(8365,'Unbranded Rubber Fish','Tesla','516530.00',967),
(6713,'Electronic Steel Sausages','Toshiba','903872.00',903),
(6344,'Unbranded Plastic Shoes','Uber','769924.00',393),
(2544,'Bespoke Frozen Towels','Mitsubishi','717436.00',367),
(3141,'Ergonomic Steel Shirt','Mercedes','325923.00',748),
(8473,'Awesome Granite Pizza','Acer','158061.00',375),
(4302,'Handmade Steel Table','Intel','914094.00',794),
(1996,'Modern Plastic Chicken','Uber','840054.00',410),
(1450,'Fantastic Metal Cheese','Robot','103558.00',313),
(3611,'Awesome Plastic Ball','Sony','323731.00',482),
(2118,'Luxurious Soft Car','Robot','837647.00',582),
(1347,'Recycled Fresh Tuna','Apple','118125.00',220),
(1959,'Intelligent Soft Tuna','Vans','409482.00',777),
(3221,'Elegant Bronze Bike','HTC','265366.00',972),
(3833,'Oriental Granite Keyboard','Alienware','638293.00',166),
(2915,'Fantastic Soft Shoes','Chanel','816152.00',745),
(1811,'Intelligent Metal Towels','HTC','667902.00',146),
(4232,'Handmade Soft Bike','Toshiba','402570.00',981),
(8597,'Gorgeous Fresh Hat','Aisan','985867.00',621),
(2151,'Handmade Cotton Tuna','Mercedes','808217.00',344),
(1332,'Oriental Concrete Shoes','Mitsubishi','967681.00',437),
(7235,'Ergonomic Plastic Mouse','Hyundai','311377.00',319),
(1019,'Gorgeous Soft Chips','Pepsodent','785087.00',208),
(5813,'Intelligent Cotton Chicken','Vans','399776.00',735),
(5293,'Handcrafted Plastic Towels','FedEx','481640.00',773),
(7572,'Rustic Cotton Bacon','Alienware','358712.00',953),
(8202,'Tasty Steel Shoes','Intel','903746.00',426),
(2921,'Fantastic Frozen Towels','Uniqlo','101042.00',429),
(6162,'Ergonomic Frozen Chips','ZTE','921026.00',151),
(2415,'Handmade Wooden Shirt','Samsung','691005.00',166),
(5282,'Modern Cotton Ball','Nvidia','807400.00',101),
(9241,'Fantastic Bronze Hat','3M','558144.00',159),
(2136,'Awesome Steel Ball','AMD','524930.00',370),
(4462,'Incredible Bronze Fish','Porsche','76642.00',476),
(9195,'Awesome Soft Cheese','Toshiba','14083.00',767),
(4281,'Handcrafted Metal Chair','Polytron','632483.00',749),
(7738,'Bespoke Soft Mouse','Logitech','461765.00',337),
(3302,'Handcrafted Fresh Pizza','Uniqlo','799884.00',652),
(3243,'Licensed Cotton Table','Intel','273188.00',360),
(9659,'Awesome Granite Bacon','ZTE','426248.00',853),
(5646,'Refined Rubber Chicken','Amazon','486342.00',373),
(2239,'Elegant Concrete Computer','Logitech','692881.00',649),
(3216,'Tasty Soft Computer','Kawasaki','994676.00',830),
(8215,'Tasty Fresh Mouse','Unilever','294541.00',851),
(8754,'Intelligent Fresh Computer','Nintendo','872900.00',203),
(8638,'Electronic Fresh Car','AMD','317220.00',763),
(1356,'Sleek Steel Shoes','Asus','63630.00',875),
(3112,'Practical Fresh Car','Suzuki','433382.00',594),
(9592,'Electronic Frozen Gloves','Huawei','493932.00',148),
(4021,'Handmade Concrete Fish','Nokia','847770.00',241),
(3637,'Elegant Fresh Gloves','Hyundai','841601.00',689),
(9644,'Ergonomic Metal Soap','Mitsubishi','828636.00',517),
(9661,'Awesome Steel Keyboard','Logitech','793095.00',407),
(3120,'Practical Steel Bike','Huawei','117221.00',681),
(8175,'Fantastic Wooden Hat','Uniqlo','723744.00',334),
(9151,'Bespoke Bronze Tuna','Gucci','180502.00',407),
(9099,'Licensed Wooden Sausages','Lenovo','783819.00',214),
(3020,'Refined Fresh Bacon','FedEx','810413.00',367),
(6088,'Small Wooden Pants','Alienware','727780.00',931),
(1068,'Recycled Wooden Gloves','Huawei','438104.00',527),
(3315,'Generic Fresh Towels','Suzuki','165097.00',855),
(1216,'Oriental Fresh Car','Nintendo','468957.00',912),
(2104,'Incredible Soft Table','Unilever','351580.00',703),
(9653,'Sleek Rubber Chair','Chanel','955045.00',487),
(5651,'Awesome Steel Gloves','Motorola','188302.00',814),
(3261,'Refined Fresh Shoes','Microsoft','480727.00',905),
(5789,'Recycled Fresh Towels','Rolex','327983.00',953),
(5446,'Sleek Rubber Pants','Sony','367586.00',543),
(3869,'Handmade Wooden Gloves','Vans','107373.00',581),
(6078,'Unbranded Cotton Pizza','Sharp','826801.00',809),
(5508,'Gorgeous Steel Chicken','Samsung','413075.00',759),
(1142,'Intelligent Steel Hat','3M','70048.00',289),
(3631,'Electronic Metal Bacon','Crocs','156419.00',708),
(6752,'Rustic Steel Fish','Nokia','977360.00',112),
(7616,'Electronic Frozen Cheese','Unilever','928827.00',870),
(7652,'Handmade Fresh Shoes','FedEx','550558.00',314),
(9757,'Oriental Bronze Ball','Gucci','260949.00',928),
(5939,'Sleek Soft Hat','Logitech','706867.00',947),
(1853,'Handcrafted Rubber Keyboard','Polytron','777617.00',741),
(1779,'Incredible Wooden Gloves','Robot','746505.00',993),
(7409,'Tasty Bronze Pizza','Uber','90526.00',811),
(7204,'Handcrafted Wooden Bike','Uber','383381.00',572),
(2620,'Incredible Wooden Computer','Yamaha','632708.00',315),
(5605,'Electronic Rubber Salad','Rolex','887230.00',242),
(4695,'Intelligent Rubber Pants','Xiaomi','680526.00',695),
(3157,'Practical Granite Tuna','Uber','924176.00',384),
(3909,'Awesome Soft Chair','Microsoft','944954.00',203),
(6441,'Handmade Frozen Table','Huawei','125217.00',453),
(3611,'Incredible Wooden Towels','Lamborghini','142097.00',791),
(6961,'Electronic Rubber Shoes','Sony','754339.00',395),
(8421,'Luxurious Wooden Computer','Uber','159551.00',109),
(2390,'Modern Steel Pants','Asus','300637.00',123),
(9485,'Bespoke Soft Ball','Gucci','818374.00',890),
(9052,'Handcrafted Wooden Fish','Uber','841353.00',373),
(9514,'Electronic Cotton Hat','Apple','819474.00',295),
(9622,'Intelligent Soft Gloves','HBO','764088.00',591),
(2257,'Elegant Granite Soap','Uniqlo','844573.00',240),
(8351,'Luxurious Rubber Table','3M','500214.00',623),
(3781,'Intelligent Rubber Computer','Disney','706891.00',168),
(5095,'Practical Bronze Chicken','Mercedes','863278.00',927),
(5580,'Sleek Plastic Bacon','Audi','494573.00',826),
(1672,'Oriental Rubber Ball','Philips','176850.00',987),
(8429,'Fantastic Frozen Bacon','ZTE','68785.00',726),
(6565,'Modern Frozen Salad','Sony','823008.00',989),
(6511,'Refined Plastic Ball','Acer','481982.00',625),
(7144,'Practical Concrete Table','Ferarri','379816.00',913),
(5984,'Recycled Plastic Soap','Toshiba','862591.00',841),
(3046,'Recycled Wooden Mouse','Vans','367766.00',854),
(8722,'Small Fresh Gloves','Uber','870254.00',817),
(4161,'Modern Wooden Mouse','Adidas','563477.00',457),
(9465,'Intelligent Concrete Shoes','Lamborghini','358812.00',302),
(7892,'Handcrafted Cotton Chair','Alienware','149172.00',527),
(8590,'Fantastic Bronze Mouse','Disney','760147.00',634),
(1575,'Elegant Fresh Fish','Robot','425754.00',855),
(7405,'Electronic Wooden Bike','Amazon','523290.00',460),
(2860,'Sleek Soft Shirt','Toshiba','929041.00',421),
(6790,'Incredible Cotton Soap','AMD','228949.00',732),
(9098,'Intelligent Cotton Shoes','Chanel','421446.00',676),
(2670,'Sleek Bronze Gloves','Sharp','904045.00',863),
(5367,'Generic Metal Chips','Aisan','989480.00',370),
(6421,'Practical Bronze Pants','Hyundai','761868.00',963),
(2348,'Electronic Concrete Cheese','Unilever','330126.00',970),
(7568,'Tasty Fresh Towels','Logitech','292601.00',662),
(8582,'Handmade Cotton Bike','3M','654035.00',488),
(5641,'Fantastic Metal Bacon','Crocs','448446.00',371),
(4489,'Handcrafted Granite Pants','Acer','843747.00',135),
(4553,'Incredible Metal Cheese','Philips','525894.00',365),
(2487,'Incredible Concrete Car','Amazon','161696.00',256),
(8406,'Awesome Concrete Keyboard','Adidas','377379.00',364),
(7555,'Oriental Concrete Tuna','Unilever','380572.00',844),
(8471,'Oriental Cotton Towels','ZTE','220172.00',544),
(7247,'Incredible Fresh Computer','Intel','996013.00',368),
(7611,'Handcrafted Wooden Bacon','Aisan','275111.00',481),
(8262,'Incredible Rubber Chicken','Ferarri','96619.00',349),
(7502,'Recycled Bronze Cheese','Suzuki','334107.00',574),
(8685,'Fantastic Bronze Chicken','Pepsodent','77003.00',911),
(8514,'Fantastic Plastic Towels','Lenovo','783449.00',152),
(2149,'Fantastic Cotton Fish','Uniqlo','93402.00',622),
(8452,'Handcrafted Frozen Pizza','Polytron','124428.00',678),
(9905,'Awesome Fresh Ball','Kawasaki','691132.00',875),
(4646,'Oriental Plastic Hat','Nvidia','588539.00',840),
(6659,'Small Plastic Tuna','Ferarri','284296.00',649),
(6986,'Rustic Concrete Chips','Disney','277034.00',357),
(4095,'Practical Plastic Chicken','Polytron','122979.00',416),
(2330,'Bespoke Cotton Ball','Sony','863494.00',989),
(9729,'Luxurious Metal Pizza','3M','39277.00',135),
(4218,'Tasty Steel Towels','Toshiba','445259.00',163),
(7092,'Ergonomic Bronze Hat','Lamborghini','279061.00',811),
(4003,'Practical Rubber Computer','ZTE','169502.00',320),
(8826,'Rustic Soft Chips','Gucci','666863.00',193),
(5598,'Refined Granite Soap','Samsung','934972.00',537),
(5642,'Refined Bronze Shoes','Mercedes','644607.00',733),
(6731,'Sleek Plastic Salad','Sharp','873349.00',318),
(6641,'Recycled Wooden Chair','Sony','875562.00',493),
(6843,'Modern Bronze Salad','Asus','383689.00',972),
(8150,'Rustic Steel Tuna','Uber','371783.00',843),
(3441,'Unbranded Wooden Soap','Polytron','593408.00',394),
(1449,'Practical Fresh Table','Apple','214519.00',184),
(1040,'Handmade Steel Shirt','Acer','338947.00',845),
(2384,'Incredible Plastic Shirt','Mitsubishi','91531.00',940),
(2904,'Refined Soft Cheese','Pepsodent','133416.00',598),
(3402,'Elegant Bronze Pants','Rolex','336081.00',357),
(2072,'Fantastic Metal Bacon','Unilever','64070.00',109),
(2010,'Licensed Wooden Pants','Uber','374125.00',720),
(8416,'Handmade Cotton Hat','Amazon','847354.00',593),
(5204,'Intelligent Granite Keyboard','Uber','710103.00',807),
(1078,'Generic Wooden Mouse','Samsung','202175.00',487),
(3721,'Small Concrete Chips','Aisan','865086.00',843),
(6082,'Generic Cotton Keyboard','Porsche','980212.00',785),
(3562,'Refined Soft Chair','Acer','394628.00',943),
(8892,'Unbranded Cotton Cheese','Mitsubishi','640652.00',667),
(3140,'Luxurious Granite Salad','Lamborghini','321321.00',787),
(3923,'Fantastic Bronze Soap','Lamborghini','92570.00',819),
(8467,'Handmade Frozen Chair','Robot','317321.00',510),
(5165,'Small Concrete Pizza','Kawasaki','254762.00',125),
(3531,'Bespoke Granite Cheese','Logitech','659205.00',209),
(3680,'Licensed Plastic Table','Vans','97238.00',693),
(1926,'Elegant Metal Shoes','Aisan','417704.00',737),
(9979,'Generic Concrete Keyboard','Nvidia','651045.00',560),
(3317,'Handcrafted Concrete Chair','Polytron','361553.00',161),
(6963,'Fantastic Wooden Table','Amazon','887733.00',988),
(3909,'Awesome Frozen Pizza','IBM','999109.00',506),
(6173,'Modern Soft Salad','Uniqlo','870783.00',165),
(3634,'Recycled Bronze Mouse','Nintendo','39886.00',908),
(6013,'Oriental Frozen Ball','Gucci','857439.00',626),
(3863,'Ergonomic Rubber Hat','ZTE','102122.00',919),
(2354,'Incredible Soft Tuna','HTC','86618.00',666),
(8174,'Bespoke Cotton Pizza','3M','248547.00',590),
(3365,'Electronic Frozen Soap','Xiaomi','233603.00',487),
(8108,'Handmade Metal Keyboard','Asus','337004.00',381),
(6680,'Ergonomic Cotton Mouse','Adobe','847180.00',161),
(8382,'Ergonomic Rubber Bacon','Mitsubishi','729475.00',330),
(6462,'Practical Soft Soap','Hyundai','625815.00',101),
(6322,'Sleek Plastic Hat','Polytron','963417.00',321),
(7546,'Bespoke Soft Pants','Adobe','364971.00',610),
(7759,'Incredible Soft Chips','Intel','747079.00',224),
(1459,'Gorgeous Soft Shirt','Toyota','40907.00',837),
(9892,'Awesome Cotton Gloves','Lamborghini','604232.00',631),
(8192,'Ergonomic Plastic Cheese','Gucci','111201.00',304),
(9612,'Intelligent Granite Soap','Samsung','381705.00',148),
(3066,'Small Steel Hat','Unilever','693648.00',847),
(5821,'Intelligent Frozen Shoes','Crocs','980822.00',333),
(1903,'Oriental Fresh Chips','Rolex','857567.00',663),
(5821,'Oriental Bronze Chips','Kawasaki','746604.00',742),
(9484,'Electronic Concrete Pizza','Uber','487655.00',790),
(1652,'Sleek Bronze Table','Mitsubishi','210361.00',388),
(7569,'Generic Rubber Hat','Robot','874415.00',915),
(2974,'Gorgeous Cotton Gloves','IBM','987735.00',494),
(8236,'Incredible Concrete Hat','Logitech','745178.00',187),
(1046,'Ergonomic Soft Mouse','Xiaomi','286512.00',181),
(7769,'Fantastic Cotton Chips','Motorola','606307.00',340),
(7819,'Oriental Cotton Computer','Nintendo','365803.00',829),
(3566,'Sleek Cotton Cheese','Kawasaki','431472.00',181),
(9629,'Generic Frozen Chicken','Sharp','572125.00',129),
(1723,'Recycled Granite Bike','Nintendo','740618.00',253),
(2880,'Generic Steel Table','Lamborghini','429886.00',150),
(9450,'Ergonomic Granite Car','Chanel','502689.00',473),
(8564,'Fantastic Plastic Cheese','Audi','27138.00',802),
(6927,'Gorgeous Fresh Shoes','Amazon','539965.00',160),
(4512,'Luxurious Granite Salad','Samsung','597339.00',737),
(4302,'Fantastic Wooden Chair','Suzuki','512625.00',720),
(2962,'Incredible Steel Table','Toyota','317350.00',674),
(2654,'Handmade Rubber Ball','ZTE','672824.00',207),
(7830,'Oriental Rubber Computer','Mercedes','81278.00',598),
(4543,'Recycled Soft Chair','Microsoft','27936.00',558),
(9799,'Handmade Granite Ball','ZTE','898641.00',800),
(3269,'Ergonomic Steel Keyboard','Gucci','801306.00',665),
(2297,'Intelligent Fresh Shirt','Huawei','890648.00',664),
(4765,'Electronic Metal Ball','Philips','365866.00',254),
(9768,'Elegant Granite Towels','Yamaha','103989.00',135),
(1978,'Handmade Frozen Keyboard','IBM','800760.00',881),
(6150,'Incredible Fresh Shirt','Logitech','295602.00',559),
(7512,'Electronic Soft Bike','Nokia','623442.00',247),
(4088,'Handmade Metal Bacon','Gucci','156594.00',185),
(6563,'Practical Soft Mouse','Nintendo','673584.00',148),
(5453,'Luxurious Steel Ball','Adidas','109343.00',935),
(7646,'Generic Fresh Gloves','Crocs','627554.00',178),
(3654,'Sleek Frozen Chicken','Crocs','864624.00',771),
(5594,'Sleek Granite Soap','IBM','476264.00',194),
(5752,'Licensed Wooden Chips','Crocs','443923.00',701),
(3504,'Small Concrete Keyboard','Asus','457303.00',154),
(2567,'Oriental Wooden Pizza','Aisan','576316.00',891),
(8584,'Handmade Soft Car','Amazon','901113.00',826),
(9908,'Tasty Bronze Bike','Ferarri','804313.00',994),
(8455,'Ergonomic Steel Table','Nokia','225924.00',445),
(1322,'Tasty Concrete Chicken','Uniqlo','655706.00',730),
(2507,'Small Rubber Pizza','Aisan','466302.00',448),
(1956,'Handmade Soft Pants','Microsoft','461673.00',845),
(3485,'Handmade Granite Soap','HTC','206570.00',723),
(4714,'Small Concrete Chips','Porsche','89917.00',374),
(5179,'Awesome Concrete Car','Porsche','459673.00',817),
(6590,'Incredible Rubber Chair','Acer','552685.00',482),
(6874,'Sleek Concrete Gloves','Uber','448122.00',599),
(7623,'Ergonomic Bronze Tuna','Lamborghini','179663.00',287),
(1056,'Refined Fresh Tuna','Alienware','607429.00',344),
(4685,'Bespoke Metal Car','Microsoft','525409.00',220),
(6432,'Refined Fresh Car','Amazon','596127.00',176),
(5943,'Oriental Steel Car','Tesla','689888.00',127),
(7758,'Bespoke Plastic Salad','Alienware','182580.00',926),
(9104,'Generic Wooden Computer','Audi','798045.00',208),
(9818,'Handmade Metal Towels','Polytron','267898.00',813),
(9910,'Small Bronze Cheese','Unilever','657549.00',568),
(4506,'Handmade Plastic Hat','Adidas','71394.00',884),
(6527,'Licensed Bronze Car','Apple','949595.00',820),
(8686,'Ergonomic Cotton Gloves','Alienware','903383.00',607),
(6390,'Unbranded Rubber Car','FedEx','555539.00',770),
(4170,'Sleek Cotton Towels','Toyota','409663.00',788),
(2725,'Tasty Bronze Ball','Motorola','294512.00',159),
(5090,'Electronic Wooden Chicken','Apple','24700.00',498),
(9787,'Handcrafted Bronze Gloves','Pepsodent','595646.00',555),
(4035,'Awesome Wooden Ball','Lamborghini','80865.00',212),
(1986,'Recycled Concrete Shoes','Nvidia','977944.00',706),
(3878,'Elegant Metal Pizza','Vans','960196.00',423),
(6097,'Handcrafted Fresh Bike','Lenovo','572047.00',256),
(1289,'Small Steel Hat','HBO','854048.00',119),
(4029,'Practical Plastic Computer','Acer','539743.00',986),
(5624,'Rustic Metal Shirt','Vans','579408.00',668),
(8811,'Ergonomic Fresh Computer','Xiaomi','469286.00',333),
(3987,'Rustic Cotton Tuna','Toshiba','719721.00',957),
(8252,'Awesome Steel Shirt','Apple','563993.00',514),
(9312,'Recycled Steel Ball','Hyundai','212195.00',619),
(6479,'Generic Plastic Computer','IBM','462055.00',660),
(3078,'Modern Steel Pizza','Adidas','624285.00',407),
(9420,'Electronic Rubber Mouse','Adidas','934304.00',621),
(7890,'Handcrafted Frozen Hat','Audi','176463.00',702),
(6738,'Unbranded Metal Chips','FedEx','172625.00',576),
(8123,'Incredible Rubber Chips','Rolex','794171.00',954),
(1443,'Luxurious Frozen Car','Huawei','640965.00',651),
(4619,'Ergonomic Cotton Cheese','ZTE','837632.00',994),
(9925,'Modern Frozen Mouse','Aisan','991999.00',565),
(5806,'Handmade Soft Bike','Ferarri','540458.00',208),
(9898,'Elegant Plastic Pizza','Mercedes','989014.00',383),
(6070,'Gorgeous Rubber Pants','Apple','703041.00',558),
(6254,'Electronic Fresh Towels','AMD','392156.00',391),
(7161,'Ergonomic Fresh Chair','Asus','474255.00',343),
(5317,'Handmade Steel Chicken','Intel','448026.00',467),
(4025,'Ergonomic Steel Car','Toshiba','384086.00',954),
(6660,'Ergonomic Plastic Mouse','Motorola','690108.00',980),
(3813,'Ergonomic Granite Sausages','Philips','124804.00',388),
(8766,'Ergonomic Steel Chips','Xiaomi','758244.00',551),
(3116,'Incredible Cotton Bike','Nvidia','781917.00',863),
(8798,'Practical Plastic Pants','Uniqlo','454862.00',884),
(5664,'Unbranded Granite Bacon','Asus','822623.00',786),
(9937,'Sleek Cotton Shirt','ZTE','773672.00',991),
(2271,'Small Soft Computer','Uber','80593.00',364),
(2500,'Generic Frozen Computer','Vans','574693.00',916),
(5721,'Practical Rubber Towels','Microsoft','260649.00',614),
(5501,'Intelligent Wooden Mouse','Aisan','679668.00',881),
(3852,'Electronic Frozen Towels','Uber','314867.00',632),
(8671,'Practical Soft Hat','Acer','804838.00',870),
(5515,'Refined Bronze Shoes','IBM','466613.00',211),
(8383,'Licensed Metal Mouse','Nintendo','523591.00',953),
(9513,'Practical Cotton Keyboard','Microsoft','74701.00',838),
(8720,'Gorgeous Bronze Ball','Uniqlo','868588.00',620),
(4646,'Incredible Bronze Fish','Mercedes','301989.00',741),
(4971,'Luxurious Rubber Soap','Disney','134506.00',407),
(1294,'Unbranded Metal Salad','Unilever','838319.00',987),
(2452,'Gorgeous Fresh Chair','Yamaha','322223.00',704),
(7435,'Electronic Concrete Gloves','Pepsodent','686462.00',389),
(3443,'Small Plastic Chair','Motorola','638559.00',557),
(9516,'Handmade Metal Computer','Porsche','701927.00',611),
(5787,'Oriental Granite Cheese','Lenovo','113918.00',195),
(2063,'Unbranded Concrete Keyboard','3M','538081.00',325),
(4838,'Practical Plastic Towels','Uniqlo','612732.00',200),
(7034,'Elegant Plastic Hat','Ferarri','528661.00',965),
(4196,'Tasty Bronze Ball','Toshiba','536986.00',538),
(2316,'Small Cotton Cheese','Xiaomi','157083.00',906),
(5785,'Unbranded Soft Computer','Intel','874635.00',793),
(7698,'Small Steel Hat','Kawasaki','888927.00',228),
(7844,'Electronic Frozen Bike','Adidas','29541.00',988),
(1459,'Handmade Plastic Keyboard','Rolex','303389.00',439),
(9297,'Fantastic Frozen Soap','FedEx','348916.00',535),
(8238,'Bespoke Wooden Chicken','Nike','713502.00',399),
(2726,'Practical Soft Towels','Acer','53654.00',679),
(2334,'Generic Soft Pants','Philips','841164.00',668),
(2342,'Awesome Metal Hat','Adidas','225547.00',676),
(2192,'Small Plastic Salad','Samsung','667943.00',129),
(8831,'Electronic Concrete Car','Apple','517959.00',227),
(6092,'Sleek Steel Sausages','Nike','650567.00',927),
(6081,'Electronic Wooden Shoes','Lamborghini','669896.00',691),
(1051,'Bespoke Plastic Pants','Amazon','277104.00',934),
(2438,'Oriental Metal Gloves','Yamaha','617030.00',106),
(2975,'Luxurious Fresh Hat','Adidas','255056.00',613),
(4513,'Fantastic Concrete Pizza','Audi','116683.00',167),
(4677,'Handmade Rubber Towels','FedEx','777914.00',884),
(7563,'Generic Cotton Chair','Aisan','306592.00',326),
(2825,'Luxurious Frozen Cheese','Logitech','630870.00',208),
(3010,'Gorgeous Soft Bike','Microsoft','806229.00',391),
(4753,'Luxurious Bronze Salad','Logitech','132262.00',634),
(2293,'Awesome Rubber Ball','Audi','239186.00',409),
(5930,'Rustic Frozen Hat','IBM','913328.00',967),
(5145,'Small Cotton Towels','Unilever','272559.00',453),
(4445,'Incredible Cotton Chicken','Toyota','54723.00',516),
(5034,'Licensed Granite Gloves','Porsche','373468.00',291),
(3230,'Tasty Soft Bike','Nike','665411.00',472),
(2619,'Modern Cotton Car','Adidas','992941.00',421),
(5871,'Intelligent Wooden Chair','Alienware','240182.00',784),
(1342,'Unbranded Plastic Sausages','Logitech','527179.00',835),
(2852,'Fantastic Concrete Soap','Unilever','41290.00',188),
(2283,'Electronic Fresh Gloves','Tesla','756030.00',581),
(1813,'Gorgeous Concrete Ball','Intel','451733.00',307),
(3577,'Elegant Rubber Bacon','HBO','171717.00',153),
(8572,'Gorgeous Frozen Sausages','Polytron','549055.00',747),
(4159,'Intelligent Wooden Chicken','Robot','375679.00',275),
(7084,'Sleek Plastic Bike','Nvidia','17735.00',531),
(3530,'Generic Steel Car','Nike','131845.00',579),
(3860,'Elegant Cotton Pizza','Disney','786345.00',764),
(5828,'Modern Wooden Computer','Nokia','882154.00',599),
(6009,'Gorgeous Soft Mouse','Huawei','50385.00',137),
(2880,'Fantastic Steel Ball','Yamaha','663420.00',531),
(9373,'Gorgeous Metal Bike','Gucci','252877.00',310),
(2830,'Tasty Wooden Bacon','Lamborghini','586306.00',308),
(5626,'Rustic Rubber Towels','Alienware','285460.00',804),
(1195,'Ergonomic Steel Pants','ZTE','281459.00',857),
(8780,'Ergonomic Soft Car','Vans','437014.00',623),
(9175,'Handcrafted Bronze Bacon','Microsoft','369154.00',713),
(1243,'Elegant Frozen Computer','Nintendo','462676.00',319),
(1582,'Small Plastic Towels','Microsoft','337750.00',287),
(1202,'Rustic Frozen Tuna','Aisan','16578.00',339),
(8383,'Ergonomic Plastic Car','Sharp','718213.00',789),
(4495,'Recycled Granite Bacon','Robot','913222.00',622),
(8394,'Licensed Granite Car','Porsche','840262.00',671),
(4969,'Intelligent Fresh Chicken','Logitech','782563.00',613),
(8656,'Intelligent Frozen Bike','Huawei','116687.00',898),
(5500,'Tasty Fresh Hat','Aisan','795993.00',801),
(4207,'Awesome Bronze Chair','Vans','866865.00',902),
(2472,'Modern Metal Tuna','Nintendo','439460.00',217),
(8491,'Intelligent Concrete Chair','Ferarri','736021.00',478),
(8978,'Luxurious Metal Table','Uber','612620.00',582),
(1908,'Incredible Concrete Cheese','FedEx','737972.00',953),
(5488,'Elegant Bronze Bacon','ZTE','449703.00',666),
(6197,'Recycled Bronze Bacon','Xiaomi','408438.00',215),
(2985,'Intelligent Wooden Computer','Uniqlo','152396.00',614),
(3479,'Luxurious Granite Fish','Philips','130535.00',391),
(7948,'Handcrafted Steel Table','Nvidia','605443.00',401),
(1956,'Recycled Granite Chips','FedEx','105745.00',519),
(6471,'Licensed Bronze Salad','Toyota','672562.00',646),
(1043,'Refined Frozen Table','Polytron','817891.00',441),
(2312,'Ergonomic Bronze Cheese','Uniqlo','516827.00',726),
(6148,'Refined Bronze Shirt','Polytron','359502.00',698),
(6316,'Tasty Metal Salad','Crocs','445626.00',902),
(8113,'Recycled Frozen Soap','Adobe','279219.00',284),
(5681,'Electronic Steel Chicken','Gucci','739711.00',663),
(3512,'Sleek Rubber Salad','Alienware','678642.00',377),
(2558,'Rustic Granite Gloves','AMD','244399.00',888),
(3338,'Practical Frozen Bacon','Uniqlo','923201.00',232),
(4602,'Practical Bronze Gloves','Microsoft','273799.00',876),
(5436,'Luxurious Metal Chair','Xiaomi','299088.00',929),
(2657,'Licensed Wooden Bike','Uber','458564.00',165),
(1947,'Recycled Metal Ball','Nokia','853729.00',906),
(8848,'Intelligent Plastic Chicken','Apple','361190.00',689),
(6462,'Luxurious Soft Ball','Sharp','851881.00',407),
(8114,'Incredible Concrete Fish','Chanel','852166.00',136),
(9152,'Luxurious Steel Car','Rolex','48856.00',471),
(1261,'Awesome Concrete Pizza','Tesla','227153.00',536),
(8843,'Modern Rubber Tuna','AMD','324112.00',185),
(3083,'Sleek Soft Cheese','Asus','981190.00',775),
(8376,'Bespoke Concrete Soap','Asus','229891.00',213),
(9257,'Unbranded Cotton Salad','Pepsodent','352015.00',898),
(3508,'Generic Steel Soap','Kawasaki','305543.00',140),
(5336,'Elegant Fresh Gloves','Porsche','216437.00',781),
(8597,'Handcrafted Fresh Pizza','Porsche','738065.00',789),
(3350,'Handcrafted Rubber Soap','IBM','791991.00',708),
(2582,'Electronic Rubber Tuna','FedEx','459429.00',871),
(4537,'Elegant Bronze Bacon','Asus','123013.00',390),
(3916,'Sleek Granite Chips','Alienware','151194.00',382),
(6634,'Incredible Metal Hat','Amazon','666746.00',450),
(7660,'Bespoke Plastic Table','Polytron','273650.00',282),
(2280,'Bespoke Fresh Chicken','ZTE','460990.00',895),
(3626,'Generic Frozen Gloves','Ferarri','933007.00',627),
(6708,'Sleek Rubber Salad','Alienware','204603.00',275),
(2824,'Practical Soft Hat','Pepsodent','338085.00',368),
(7854,'Tasty Concrete Bike','Unilever','834258.00',708),
(6697,'Intelligent Concrete Ball','Suzuki','456180.00',927),
(2845,'Licensed Wooden Pizza','Porsche','446420.00',647),
(7205,'Sleek Bronze Pants','Xiaomi','599410.00',267),
(1179,'Ergonomic Metal Ball','IBM','933573.00',537),
(8624,'Bespoke Plastic Sausages','Unilever','930979.00',368),
(8597,'Recycled Concrete Table','Amazon','748373.00',591),
(5263,'Gorgeous Cotton Pizza','FedEx','556180.00',974),
(6027,'Sleek Bronze Ball','Alienware','692735.00',559),
(5757,'Handmade Granite Shoes','Microsoft','171317.00',465),
(5607,'Unbranded Rubber Computer','Intel','886833.00',198),
(2573,'Generic Cotton Mouse','Mercedes','231004.00',301),
(8205,'Modern Concrete Pizza','Aisan','430016.00',836),
(3876,'Oriental Metal Shirt','Uber','951844.00',858),
(9980,'Fantastic Concrete Tuna','Lamborghini','147118.00',479),
(5591,'Ergonomic Soft Computer','Gucci','458311.00',936),
(6998,'Small Soft Mouse','Xiaomi','724784.00',648),
(2854,'Electronic Soft Car','Rolex','497159.00',363),
(3957,'Ergonomic Plastic Bacon','Toshiba','136082.00',748),
(9454,'Generic Plastic Shirt','Audi','389459.00',808),
(7871,'Tasty Plastic Shirt','Philips','868156.00',721),
(3334,'Rustic Rubber Chicken','Unilever','166849.00',595),
(8630,'Refined Cotton Shirt','Hyundai','78444.00',950),
(7032,'Unbranded Metal Bacon','Ferarri','844374.00',342),
(5944,'Gorgeous Fresh Computer','Intel','64426.00',565),
(8218,'Tasty Concrete Car','HBO','331021.00',873),
(3796,'Handcrafted Metal Shoes','Yamaha','29060.00',690),
(7485,'Ergonomic Wooden Pizza','HBO','46224.00',937),
(4809,'Licensed Metal Chips','Rolex','642639.00',627),
(1736,'Small Concrete Keyboard','AMD','216601.00',856),
(4070,'Handmade Wooden Gloves','Suzuki','96524.00',430),
(1911,'Handmade Rubber Hat','Acer','901178.00',280),
(8227,'Recycled Steel Gloves','Alienware','129240.00',374),
(2654,'Generic Plastic Chair','Vans','398132.00',763),
(4876,'Rustic Plastic Table','Lamborghini','649940.00',884),
(2320,'Recycled Bronze Pizza','HBO','585262.00',771),
(3884,'Electronic Soft Cheese','Asus','485058.00',222),
(3991,'Bespoke Metal Keyboard','FedEx','250436.00',522),
(1545,'Handcrafted Soft Chicken','Gucci','748297.00',398),
(9348,'Generic Soft Towels','FedEx','366693.00',667),
(1718,'Gorgeous Steel Bike','ZTE','360835.00',509),
(5489,'Recycled Rubber Pants','Nvidia','288288.00',255),
(1885,'Refined Plastic Cheese','Uber','977091.00',993),
(7048,'Awesome Granite Computer','Crocs','545049.00',484),
(8150,'Unbranded Metal Hat','FedEx','491431.00',885),
(9889,'Handcrafted Concrete Pizza','Chanel','835444.00',511),
(1158,'Small Fresh Hat','HTC','391745.00',484),
(2526,'Licensed Granite Shirt','Sony','805037.00',115),
(5351,'Gorgeous Metal Shirt','Adidas','732427.00',723),
(4321,'Ergonomic Soft Pants','ZTE','547382.00',795),
(5732,'Generic Bronze Shoes','Mitsubishi','605713.00',420),
(4156,'Practical Metal Chips','Disney','236132.00',778),
(1307,'Bespoke Cotton Shoes','Asus','836938.00',197),
(3182,'Refined Bronze Fish','Kawasaki','188855.00',834),
(8772,'Handmade Granite Shirt','Hyundai','714266.00',986),
(2752,'Handcrafted Plastic Pants','Nvidia','758017.00',820),
(2378,'Licensed Granite Bacon','Aisan','450847.00',150),
(5637,'Fantastic Soft Chair','Asus','949632.00',484),
(2158,'Gorgeous Steel Keyboard','Microsoft','573349.00',107),
(6202,'Awesome Metal Soap','Asus','369374.00',791),
(3714,'Sleek Wooden Pants','HBO','322930.00',394),
(9963,'Licensed Frozen Soap','3M','553435.00',535),
(2863,'Licensed Cotton Fish','Polytron','658415.00',291),
(3891,'Oriental Steel Towels','Unilever','472509.00',737),
(8140,'Intelligent Wooden Tuna','Motorola','779226.00',936),
(3719,'Fantastic Frozen Sausages','Nokia','188725.00',237),
(3560,'Incredible Fresh Ball','Kawasaki','269864.00',489),
(8900,'Incredible Fresh Tuna','Crocs','848289.00',202),
(1619,'Generic Metal Fish','AMD','646441.00',107),
(6655,'Unbranded Wooden Table','Acer','267193.00',796),
(4193,'Handcrafted Fresh Hat','IBM','645928.00',729),
(9965,'Handmade Rubber Towels','Hyundai','966636.00',353),
(5953,'Oriental Wooden Cheese','Adidas','179505.00',228),
(1426,'Modern Bronze Towels','Porsche','902028.00',908),
(3893,'Licensed Frozen Hat','Microsoft','167478.00',329),
(9485,'Oriental Plastic Towels','Toyota','252034.00',925),
(7500,'Fantastic Plastic Chips','Polytron','93127.00',518),
(8360,'Intelligent Concrete Car','Mercedes','839264.00',694),
(2409,'Handmade Bronze Pants','Sony','111789.00',755),
(1881,'Ergonomic Concrete Ball','Uniqlo','649029.00',604),
(1233,'Recycled Soft Chicken','Microsoft','362907.00',720),
(9927,'Fantastic Granite Chicken','Adobe','955430.00',557),
(9082,'Modern Steel Towels','Amazon','415875.00',674),
(2926,'Unbranded Granite Keyboard','Uniqlo','15228.00',975),
(2011,'Intelligent Concrete Sausages','Amazon','571013.00',242),
(2012,'Incredible Cotton Chicken','Porsche','585557.00',910),
(5402,'Fantastic Frozen Tuna','Crocs','971143.00',459),
(5402,'Rustic Wooden Chips','Tesla','691266.00',611),
(2111,'Luxurious Bronze Chair','Apple','42342.00',275),
(6334,'Oriental Rubber Chicken','Rolex','131871.00',940),
(1865,'Modern Cotton Computer','ZTE','175064.00',901),
(2078,'Ergonomic Metal Ball','Amazon','346941.00',929),
(1247,'Practical Concrete Chair','IBM','96813.00',983),
(2221,'Small Plastic Cheese','Aisan','950998.00',251),
(1086,'Sleek Frozen Keyboard','Tesla','479561.00',151),
(2405,'Rustic Concrete Chicken','Nintendo','494060.00',953),
(6879,'Fantastic Metal Bacon','Uniqlo','644943.00',207),
(4975,'Luxurious Frozen Cheese','Alienware','245819.00',831),
(1005,'Intelligent Soft Gloves','Hyundai','832873.00',758),
(4353,'Electronic Steel Bacon','Yamaha','709867.00',737),
(9367,'Tasty Metal Pants','Porsche','54718.00',307),
(9552,'Luxurious Plastic Pants','ZTE','499376.00',801),
(4496,'Handcrafted Plastic Shirt','Intel','124093.00',894),
(5571,'Fantastic Bronze Chips','Tesla','359187.00',801),
(2168,'Generic Concrete Cheese','Toyota','494705.00',722),
(3383,'Tasty Cotton Keyboard','FedEx','83906.00',183),
(7418,'Bespoke Granite Chair','IBM','465002.00',506),
(3721,'Fantastic Frozen Keyboard','Tesla','18878.00',105),
(5149,'Tasty Soft Soap','Alienware','722472.00',532),
(3551,'Bespoke Frozen Chair','Samsung','219061.00',396),
(4576,'Tasty Cotton Chair','Nintendo','927405.00',577),
(6814,'Unbranded Concrete Bike','Vans','988936.00',666),
(7864,'Small Steel Soap','Vans','729718.00',175),
(2422,'Luxurious Plastic Pants','Gucci','50574.00',867),
(2847,'Electronic Plastic Mouse','Xiaomi','115411.00',829),
(5186,'Handmade Plastic Chair','Sony','608319.00',343),
(2838,'Sleek Frozen Bacon','IBM','861812.00',264),
(9007,'Unbranded Soft Chips','Logitech','915268.00',251),
(1380,'Rustic Steel Gloves','ZTE','350029.00',250),
(1456,'Licensed Bronze Ball','Pepsodent','774016.00',845),
(3342,'Electronic Metal Chair','Pepsodent','60567.00',725),
(7149,'Licensed Granite Towels','Gucci','508568.00',622),
(3128,'Generic Bronze Tuna','Lamborghini','506772.00',513),
(7658,'Sleek Soft Soap','Porsche','423682.00',759),
(4431,'Oriental Cotton Towels','Crocs','892237.00',717),
(4764,'Intelligent Cotton Bike','Sharp','869803.00',910),
(7626,'Luxurious Cotton Computer','Toyota','589555.00',547),
(6664,'Intelligent Soft Salad','Toshiba','158117.00',488),
(7275,'Small Frozen Mouse','Pepsodent','70553.00',308),
(8557,'Awesome Cotton Sausages','Toyota','76534.00',129),
(2254,'Recycled Steel Bike','Alienware','498143.00',670),
(6361,'Small Fresh Hat','Kawasaki','648805.00',621),
(9947,'Small Wooden Gloves','Sony','561597.00',910),
(7746,'Electronic Concrete Towels','Lenovo','425575.00',259),
(5546,'Elegant Concrete Cheese','Robot','296659.00',236),
(7443,'Fantastic Rubber Mouse','Audi','206425.00',696),
(5509,'Recycled Wooden Bacon','Lamborghini','470536.00',304),
(5958,'Tasty Cotton Towels','Ferarri','968017.00',229),
(6784,'Oriental Granite Soap','Chanel','35314.00',646),
(6794,'Licensed Metal Salad','Ferarri','534885.00',762),
(4204,'Elegant Steel Bike','FedEx','296484.00',897),
(4651,'Recycled Metal Keyboard','Xiaomi','851728.00',323),
(7886,'Fantastic Bronze Sausages','Toshiba','780263.00',363),
(1099,'Generic Plastic Pizza','Crocs','429385.00',972),
(6770,'Sleek Fresh Salad','Sony','538683.00',152),
(7957,'Licensed Plastic Chips','Asus','99606.00',101),
(1933,'Luxurious Concrete Computer','Huawei','375838.00',238),
(6572,'Small Plastic Hat','Intel','55055.00',744),
(6932,'Refined Cotton Cheese','FedEx','196975.00',214),
(7365,'Gorgeous Cotton Shirt','Acer','608679.00',235),
(3170,'Ergonomic Granite Gloves','Aisan','121465.00',304),
(1973,'Handcrafted Wooden Bike','Nike','914492.00',540),
(6000,'Incredible Frozen Ball','Acer','408958.00',940),
(3022,'Rustic Soft Towels','Tesla','747331.00',148),
(5605,'Tasty Granite Chicken','Tesla','362978.00',670),
(8507,'Small Fresh Car','Chanel','833531.00',678),
(3800,'Recycled Concrete Fish','Huawei','636202.00',534),
(6134,'Luxurious Plastic Pants','Unilever','890984.00',110),
(4498,'Oriental Soft Car','Nintendo','319063.00',120),
(3677,'Electronic Bronze Mouse','Nike','477051.00',900),
(1505,'Incredible Metal Cheese','Acer','212277.00',168),
(5096,'Licensed Granite Pizza','Adidas','153869.00',409),
(5781,'Rustic Frozen Salad','Hyundai','912856.00',375),
(2170,'Sleek Bronze Soap','Samsung','649455.00',731),
(1923,'Bespoke Cotton Shoes','Pepsodent','147539.00',994),
(9170,'Generic Soft Gloves','Polytron','594377.00',717),
(2436,'Ergonomic Metal Mouse','Philips','787647.00',435),
(1278,'Unbranded Fresh Pants','Porsche','70707.00',533),
(7891,'Bespoke Steel Hat','Chanel','174652.00',370),
(4536,'Fantastic Rubber Towels','Nvidia','473769.00',849),
(7534,'Incredible Cotton Computer','Nokia','793101.00',396),
(1695,'Luxurious Concrete Gloves','Apple','364572.00',368),
(6223,'Refined Fresh Pizza','Unilever','262875.00',450),
(5171,'Licensed Frozen Mouse','HBO','820666.00',792),
(7521,'Ergonomic Plastic Chips','Lamborghini','171925.00',759),
(1812,'Ergonomic Bronze Chicken','Nike','308269.00',483),
(6025,'Oriental Wooden Pants','HBO','253982.00',458),
(8642,'Small Bronze Pizza','Lamborghini','443642.00',375),
(2535,'Unbranded Soft Shoes','Nvidia','970387.00',839),
(6315,'Oriental Rubber Tuna','Philips','986374.00',366),
(5043,'Handmade Cotton Shoes','Chanel','20020.00',667),
(4821,'Bespoke Rubber Ball','Samsung','493748.00',990),
(7663,'Electronic Bronze Fish','Motorola','513458.00',668),
(9750,'Electronic Steel Gloves','Hyundai','678086.00',419),
(6771,'Handmade Soft Chicken','Acer','987354.00',107),
(5744,'Intelligent Metal Hat','Audi','957323.00',182),
(6987,'Recycled Rubber Shirt','Nvidia','956226.00',398),
(3745,'Recycled Fresh Table','Toyota','975404.00',121),
(6657,'Oriental Steel Cheese','FedEx','551433.00',590),
(4802,'Luxurious Fresh Chips','Kawasaki','320240.00',314),
(2011,'Electronic Frozen Ball','Chanel','756247.00',128),
(9345,'Tasty Soft Chicken','Sony','309535.00',970),
(9545,'Handmade Bronze Pants','Asus','44758.00',939),
(1813,'Modern Wooden Towels','Mitsubishi','132381.00',379),
(9031,'Sleek Concrete Hat','Unilever','469263.00',313),
(9893,'Bespoke Soft Chips','Unilever','102196.00',645),
(4313,'Unbranded Frozen Cheese','Suzuki','978890.00',428),
(9277,'Tasty Wooden Salad','Yamaha','15597.00',133),
(2364,'Small Concrete Ball','Nokia','491977.00',527),
(8605,'Awesome Steel Bike','Apple','459362.00',923),
(1738,'Incredible Granite Towels','Toyota','639129.00',157),
(9378,'Handmade Wooden Hat','Philips','66049.00',775),
(8324,'Unbranded Steel Cheese','Gucci','25943.00',239),
(5890,'Elegant Steel Tuna','Sharp','157106.00',710),
(6525,'Unbranded Fresh Mouse','Ferarri','40395.00',352),
(8536,'Oriental Soft Chair','Chanel','86309.00',388),
(9537,'Generic Plastic Fish','3M','83369.00',889),
(9368,'Intelligent Rubber Cheese','Mitsubishi','472598.00',560),
(2873,'Elegant Granite Fish','Crocs','583180.00',747),
(6252,'Ergonomic Wooden Bacon','Samsung','136226.00',787),
(4839,'Generic Bronze Fish','IBM','592446.00',973),
(7408,'Electronic Cotton Salad','Huawei','784789.00',344),
(7137,'Tasty Rubber Table','Logitech','493322.00',164),
(8203,'Fantastic Soft Towels','3M','621896.00',244),
(5656,'Rustic Concrete Keyboard','Nike','916175.00',400),
(4988,'Licensed Fresh Chair','Pepsodent','781705.00',138),
(7701,'Handcrafted Metal Tuna','Adidas','511814.00',841),
(2727,'Ergonomic Rubber Bike','IBM','997020.00',809),
(8355,'Oriental Frozen Ball','Tesla','982021.00',977),
(1724,'Elegant Metal Fish','Sharp','961685.00',471),
(1476,'Oriental Rubber Car','FedEx','497905.00',307),
(5612,'Luxurious Frozen Bacon','Gucci','999043.00',503),
(1264,'Awesome Soft Car','Sharp','750624.00',814),
(2470,'Refined Cotton Tuna','Logitech','436384.00',155),
(9651,'Oriental Plastic Mouse','Sharp','605096.00',132),
(1387,'Small Granite Chicken','IBM','968143.00',632),
(2117,'Rustic Soft Computer','Disney','561873.00',788),
(4356,'Handmade Rubber Keyboard','HBO','808470.00',225),
(7100,'Luxurious Steel Chips','Motorola','837624.00',912),
(5302,'Electronic Plastic Bike','Porsche','708466.00',560),
(4585,'Sleek Plastic Hat','Amazon','510466.00',157),
(6939,'Unbranded Concrete Shirt','Suzuki','939745.00',962),
(3142,'Sleek Steel Car','Toshiba','785892.00',504),
(6393,'Intelligent Rubber Keyboard','Tesla','723448.00',287),
(4225,'Elegant Fresh Gloves','Chanel','154009.00',756),
(5751,'Rustic Granite Bacon','Apple','304683.00',200),
(7101,'Handcrafted Soft Fish','Acer','605697.00',331),
(8984,'Refined Soft Pants','Nike','701583.00',504),
(4947,'Intelligent Cotton Chair','Disney','513512.00',774),
(2363,'Small Rubber Ball','Aisan','181408.00',913),
(5912,'Rustic Frozen Shirt','Mitsubishi','366300.00',830),
(8147,'Gorgeous Plastic Chips','Acer','25183.00',776),
(1371,'Oriental Fresh Hat','Philips','369433.00',145),
(7500,'Generic Soft Table','Adidas','374376.00',277),
(8065,'Tasty Cotton Bacon','Apple','721843.00',578),
(3192,'Incredible Concrete Computer','Ferarri','619408.00',711),
(5149,'Fantastic Cotton Pizza','Mercedes','560586.00',837),
(9171,'Gorgeous Bronze Bike','Asus','731145.00',777),
(8293,'Rustic Granite Chair','Uber','760044.00',659),
(1314,'Unbranded Plastic Fish','Unilever','958386.00',929),
(1531,'Licensed Steel Chips','Nvidia','77563.00',883),
(6302,'Unbranded Frozen Bacon','Robot','20732.00',809),
(9019,'Incredible Cotton Chair','Suzuki','338049.00',281),
(9357,'Licensed Cotton Keyboard','Disney','465059.00',762),
(4489,'Rustic Fresh Tuna','Huawei','850375.00',368),
(4963,'Practical Fresh Keyboard','Chanel','698571.00',558),
(5327,'Awesome Plastic Chair','Audi','698119.00',174),
(8032,'Electronic Plastic Fish','FedEx','423084.00',504),
(1653,'Sleek Metal Bacon','Disney','116654.00',957),
(2613,'Modern Steel Bike','FedEx','482987.00',291),
(1448,'Luxurious Bronze Tuna','Porsche','861516.00',590),
(5101,'Practical Fresh Pizza','Aisan','734566.00',783),
(3130,'Intelligent Fresh Gloves','Uber','845970.00',690),
(4912,'Unbranded Bronze Sausages','Yamaha','632807.00',108),
(4770,'Incredible Plastic Bike','Vans','836009.00',208),
(3997,'Fantastic Steel Tuna','Porsche','170466.00',449),
(6164,'Handcrafted Rubber Mouse','Motorola','430642.00',318),
(7311,'Oriental Metal Shoes','Unilever','79366.00',209),
(2204,'Elegant Cotton Pants','AMD','682881.00',564),
(9664,'Elegant Wooden Table','Amazon','652147.00',840),
(2919,'Electronic Frozen Tuna','Rolex','698927.00',119),
(9446,'Fantastic Fresh Bike','Nike','708817.00',689),
(8631,'Modern Metal Hat','Kawasaki','303804.00',645),
(4647,'Electronic Soft Pizza','Philips','788920.00',717),
(3379,'Awesome Cotton Mouse','Adobe','494259.00',241),
(8518,'Electronic Wooden Soap','Asus','585394.00',699),
(3174,'Sleek Fresh Pants','Alienware','432372.00',137),
(2916,'Generic Rubber Salad','Lamborghini','884225.00',265),
(5418,'Bespoke Steel Hat','Xiaomi','208563.00',672),
(5498,'Practical Rubber Car','Pepsodent','433306.00',909),
(6314,'Ergonomic Concrete Chips','Porsche','262544.00',555),
(4950,'Rustic Fresh Cheese','Mercedes','685222.00',757),
(5470,'Intelligent Plastic Chicken','Amazon','863766.00',375),
(4403,'Tasty Fresh Chips','Rolex','242818.00',486),
(5079,'Intelligent Rubber Cheese','Acer','151304.00',647),
(9868,'Oriental Granite Towels','Nokia','653955.00',712),
(3237,'Small Wooden Cheese','Gucci','230677.00',547),
(5254,'Intelligent Fresh Tuna','Yamaha','158720.00',186),
(3744,'Luxurious Granite Bacon','Lenovo','203142.00',949),
(1163,'Refined Bronze Table','Lenovo','590035.00',427),
(5191,'Gorgeous Concrete Towels','Rolex','607014.00',173),
(2888,'Oriental Steel Soap','Kawasaki','627265.00',128),
(1689,'Licensed Plastic Table','Samsung','567011.00',811),
(6056,'Awesome Steel Shoes','Mercedes','691041.00',243),
(2862,'Practical Concrete Fish','Suzuki','893414.00',975),
(1944,'Refined Cotton Tuna','Lamborghini','956764.00',612),
(4191,'Small Soft Cheese','Adobe','641329.00',577),
(9334,'Luxurious Steel Shoes','Vans','511054.00',666),
(6005,'Licensed Soft Shoes','Huawei','111058.00',183),
(9907,'Awesome Bronze Shoes','Nvidia','276548.00',701),
(8445,'Rustic Wooden Computer','3M','532028.00',101),
(8010,'Ergonomic Plastic Soap','Mitsubishi','333460.00',101),
(6841,'Electronic Rubber Keyboard','Polytron','738683.00',200),
(6770,'Licensed Granite Soap','Alienware','370713.00',537),
(2046,'Recycled Granite Computer','Amazon','716832.00',278),
(2436,'Unbranded Wooden Chips','Asus','43179.00',682),
(6684,'Modern Bronze Table','Philips','504316.00',434),
(4797,'Licensed Concrete Hat','Kawasaki','946467.00',863),
(1444,'Unbranded Bronze Gloves','Chanel','782933.00',857),
(1136,'Bespoke Concrete Salad','Asus','964354.00',438),
(4114,'Practical Fresh Chair','Robot','998838.00',703),
(4602,'Licensed Cotton Salad','Unilever','249103.00',404),
(1599,'Awesome Concrete Mouse','Chanel','725499.00',777),
(3435,'Intelligent Fresh Chips','Sharp','467880.00',168),
(2898,'Recycled Cotton Car','Disney','133961.00',806),
(1158,'Tasty Bronze Pizza','Acer','167100.00',528),
(9363,'Rustic Rubber Pants','Vans','398055.00',315),
(7002,'Modern Steel Hat','Uber','97025.00',925),
(5605,'Small Soft Soap','Aisan','564701.00',306),
(3901,'Modern Steel Mouse','Mitsubishi','623315.00',344),
(5253,'Intelligent Metal Pants','IBM','599612.00',469),
(9385,'Elegant Fresh Towels','Robot','356756.00',305),
(8242,'Modern Metal Bacon','Porsche','126856.00',951),
(6677,'Unbranded Bronze Keyboard','Chanel','825050.00',575),
(6976,'Unbranded Plastic Table','Yamaha','993577.00',956),
(5250,'Luxurious Fresh Pants','Nvidia','673518.00',308),
(6241,'Gorgeous Rubber Fish','Microsoft','423555.00',384),
(7557,'Bespoke Metal Hat','Gucci','435431.00',223),
(4027,'Intelligent Soft Cheese','Intel','545767.00',928),
(8443,'Handmade Concrete Soap','Uber','408963.00',880),
(2017,'Handmade Cotton Mouse','Vans','705563.00',595),
(3728,'Licensed Rubber Soap','Mercedes','53626.00',719),
(7626,'Handmade Cotton Fish','Lamborghini','526700.00',571),
(9172,'Awesome Fresh Tuna','Lenovo','134848.00',646),
(3596,'Small Concrete Car','Uber','15532.00',119),
(5724,'Handmade Fresh Pizza','Rolex','133465.00',249),
(5018,'Bespoke Cotton Ball','Porsche','467948.00',388),
(6853,'Tasty Cotton Car','Nvidia','962653.00',568),
(3013,'Practical Frozen Cheese','Sony','538680.00',279),
(8906,'Rustic Steel Gloves','Logitech','971482.00',282),
(8861,'Small Concrete Gloves','Nintendo','900780.00',954),
(6696,'Small Metal Car','Disney','397312.00',186),
(2733,'Generic Frozen Towels','Logitech','263686.00',842),
(6472,'Rustic Cotton Gloves','Nokia','829448.00',705),
(1771,'Generic Frozen Bacon','Uber','681009.00',245),
(7397,'Refined Wooden Towels','Ferarri','423994.00',272),
(2339,'Generic Steel Bike','Samsung','296831.00',903),
(3242,'Sleek Cotton Towels','HTC','341887.00',499),
(5970,'Unbranded Concrete Cheese','Porsche','911241.00',723),
(4873,'Awesome Frozen Fish','HBO','297876.00',455),
(9406,'Awesome Soft Table','Uber','883916.00',299),
(8552,'Sleek Cotton Shoes','Disney','724489.00',950),
(3164,'Tasty Wooden Chips','Asus','848292.00',881),
(5919,'Elegant Concrete Table','Mercedes','419643.00',428),
(3937,'Refined Soft Soap','Robot','747254.00',922),
(7499,'Sleek Steel Gloves','Toyota','664381.00',818),
(7276,'Unbranded Fresh Cheese','3M','931908.00',166),
(6419,'Unbranded Rubber Shoes','Mercedes','20795.00',846),
(3732,'Gorgeous Metal Pizza','Tesla','644075.00',638),
(7312,'Licensed Frozen Bike','Microsoft','841707.00',745),
(5208,'Oriental Steel Bike','Vans','159172.00',179),
(4971,'Gorgeous Soft Bike','Robot','956730.00',553),
(6777,'Ergonomic Steel Car','Uniqlo','119053.00',125),
(5907,'Luxurious Bronze Computer','Amazon','348445.00',577),
(8200,'Small Fresh Keyboard','Chanel','14597.00',832),
(7482,'Handcrafted Soft Computer','Vans','52987.00',883),
(9911,'Incredible Cotton Computer','Asus','799868.00',994),
(6447,'Recycled Concrete Shirt','Intel','43100.00',722),
(8770,'Rustic Bronze Ball','Adidas','216322.00',184),
(9153,'Elegant Bronze Chair','Lenovo','999744.00',931),
(6153,'Handcrafted Granite Keyboard','Disney','708694.00',584),
(4303,'Licensed Cotton Hat','Nintendo','189001.00',135),
(3810,'Gorgeous Concrete Gloves','Motorola','589770.00',601),
(6595,'Recycled Fresh Computer','Tesla','96327.00',540),
(7191,'Small Frozen Shoes','Unilever','841779.00',168),
(6943,'Gorgeous Rubber Bike','Xiaomi','931878.00',369),
(5874,'Recycled Wooden Soap','Toyota','860330.00',246),
(8018,'Fantastic Steel Tuna','Uniqlo','454467.00',374),
(3687,'Bespoke Rubber Table','Kawasaki','510050.00',275),
(8805,'Practical Metal Salad','Chanel','672327.00',644),
(5085,'Awesome Steel Tuna','Adidas','223375.00',930),
(6658,'Electronic Rubber Shoes','Adobe','24053.00',779),
(2257,'Unbranded Wooden Pants','Mitsubishi','697674.00',495),
(7941,'Small Frozen Shoes','AMD','118097.00',604),
(4870,'Unbranded Bronze Chips','Toyota','117393.00',993),
(1602,'Intelligent Wooden Chair','Apple','780424.00',114),
(8276,'Generic Soft Fish','Mitsubishi','472845.00',927),
(1559,'Fantastic Soft Table','AMD','622291.00',857),
(8042,'Incredible Wooden Cheese','Samsung','313106.00',506),
(9200,'Handmade Steel Computer','IBM','656760.00',921),
(9118,'Modern Fresh Hat','IBM','863097.00',450),
(5055,'Bespoke Steel Hat','Rolex','70965.00',244),
(5370,'Bespoke Cotton Chair','Lamborghini','745735.00',635),
(2596,'Licensed Fresh Mouse','Vans','438433.00',640),
(2664,'Recycled Soft Chicken','Adidas','920788.00',687),
(3065,'Sleek Plastic Pants','Yamaha','764747.00',564),
(7015,'Practical Frozen Ball','ZTE','240252.00',996),
(2209,'Sleek Soft Chair','Adobe','12598.00',518),
(8959,'Luxurious Concrete Computer','Polytron','860782.00',390),
(3183,'Awesome Rubber Bacon','Polytron','762964.00',380),
(9485,'Tasty Steel Towels','Pepsodent','164816.00',231),
(9255,'Luxurious Frozen Soap','HBO','42063.00',829),
(8368,'Fantastic Bronze Hat','Sony','485075.00',770),
(8166,'Incredible Plastic Cheese','Vans','281657.00',812),
(6591,'Rustic Frozen Shoes','Uniqlo','504528.00',319),
(7954,'Sleek Metal Towels','Vans','787692.00',320),
(1360,'Generic Granite Chicken','Nokia','648016.00',189),
(9555,'Awesome Cotton Fish','Crocs','497777.00',672),
(1165,'Luxurious Cotton Cheese','Toyota','324631.00',882),
(2336,'Small Soft Pants','Nintendo','42616.00',272),
(8002,'Gorgeous Metal Chair','Ferarri','921408.00',652),
(8331,'Recycled Concrete Tuna','HBO','944510.00',496),
(7821,'Oriental Fresh Fish','Crocs','262078.00',481),
(6961,'Intelligent Steel Salad','Nike','967749.00',619),
(9291,'Fantastic Wooden Gloves','IBM','338665.00',165),
(1691,'Incredible Rubber Tuna','Hyundai','569687.00',334),
(7982,'Sleek Concrete Pants','Adobe','190535.00',566),
(9064,'Modern Fresh Salad','Vans','249708.00',599),
(9608,'Luxurious Cotton Hat','Rolex','497435.00',911),
(8498,'Intelligent Steel Car','Lenovo','86462.00',535),
(6356,'Handmade Concrete Pants','Unilever','703135.00',750),
(4604,'Intelligent Bronze Gloves','Amazon','569150.00',759),
(3539,'Licensed Plastic Cheese','HTC','854986.00',535),
(8267,'Rustic Metal Salad','Hyundai','840657.00',286),
(5642,'Awesome Soft Towels','Xiaomi','933859.00',562),
(9126,'Fantastic Frozen Car','Aisan','264119.00',938),
(8205,'Fantastic Fresh Fish','Nike','879314.00',489),
(9578,'Intelligent Fresh Pants','Samsung','475284.00',201),
(5856,'Ergonomic Metal Chicken','Ferarri','129808.00',223),
(4982,'Bespoke Cotton Ball','Microsoft','703295.00',475),
(9233,'Oriental Metal Bacon','Mercedes','476287.00',565),
(6343,'Incredible Wooden Fish','Huawei','721596.00',576),
(4175,'Recycled Wooden Chair','Ferarri','934795.00',994),
(5066,'Intelligent Fresh Ball','Nike','260630.00',690),
(4278,'Intelligent Concrete Mouse','Pepsodent','896656.00',548),
(7998,'Bespoke Wooden Computer','Toshiba','272786.00',786),
(3031,'Handmade Plastic Chicken','Gucci','943370.00',491),
(1372,'Rustic Wooden Fish','Lenovo','794125.00',808),
(9774,'Tasty Steel Computer','Nokia','928631.00',358),
(3375,'Handmade Rubber Towels','Uber','775599.00',849),
(8667,'Ergonomic Metal Ball','Kawasaki','695378.00',421),
(7166,'Electronic Bronze Fish','Huawei','606216.00',275),
(1239,'Tasty Soft Shirt','Suzuki','778510.00',275),
(3069,'Small Fresh Cheese','HTC','519918.00',717),
(8560,'Elegant Fresh Computer','Nike','161824.00',861),
(8507,'Luxurious Fresh Bike','Uber','287557.00',507),
(5875,'Intelligent Metal Computer','IBM','968166.00',829),
(4699,'Electronic Frozen Tuna','Hyundai','799076.00',803),
(5305,'Handcrafted Plastic Chicken','Toyota','556861.00',884),
(8987,'Bespoke Wooden Table','Uber','752527.00',288),
(2299,'Luxurious Granite Keyboard','Nike','893909.00',351),
(4872,'Small Frozen Pizza','Acer','973788.00',757),
(7392,'Refined Cotton Cheese','Mitsubishi','800290.00',199),
(3090,'Sleek Steel Mouse','Motorola','984536.00',492),
(5046,'Small Fresh Salad','Rolex','409881.00',973),
(2194,'Modern Rubber Chicken','Disney','986427.00',951),
(1885,'Ergonomic Cotton Fish','FedEx','714767.00',424),
(7996,'Practical Cotton Soap','Toyota','752494.00',780),
(5296,'Unbranded Fresh Cheese','Rolex','865795.00',734),
(4578,'Generic Granite Tuna','Hyundai','786438.00',996),
(4437,'Sleek Cotton Shoes','IBM','880648.00',687),
(3607,'Sleek Rubber Computer','Acer','668807.00',587),
(2166,'Bespoke Frozen Car','Xiaomi','302702.00',439),
(1417,'Practical Metal Chicken','Acer','201438.00',709),
(7015,'Fantastic Steel Towels','HBO','663461.00',725),
(4656,'Refined Metal Computer','Robot','936141.00',401),
(2503,'Electronic Soft Keyboard','Adobe','224038.00',879),
(7346,'Practical Metal Computer','Vans','679708.00',445),
(6316,'Modern Fresh Tuna','Xiaomi','753994.00',804),
(6717,'Modern Plastic Chicken','Acer','871371.00',307),
(5885,'Fantastic Concrete Keyboard','Nike','201697.00',751),
(5317,'Practical Bronze Table','Huawei','311994.00',433),
(6646,'Oriental Plastic Shirt','Gucci','450389.00',738),
(3557,'Handmade Fresh Mouse','IBM','106143.00',732),
(1193,'Generic Bronze Ball','Alienware','656606.00',275),
(5593,'Handmade Cotton Pants','Mercedes','705752.00',175),
(9859,'Oriental Wooden Table','Toyota','752577.00',937),
(3638,'Tasty Wooden Tuna','Polytron','833119.00',853),
(8360,'Bespoke Rubber Fish','Hyundai','283945.00',649),
(7561,'Incredible Frozen Tuna','Crocs','442033.00',114),
(3933,'Handcrafted Metal Mouse','Samsung','468612.00',809),
(3489,'Refined Soft Cheese','Logitech','221542.00',776),
(8506,'Sleek Rubber Bike','Asus','585013.00',343),
(2466,'Gorgeous Rubber Cheese','Kawasaki','42994.00',254),
(9085,'Handcrafted Plastic Pants','Acer','984284.00',676),
(1901,'Practical Bronze Car','Asus','623100.00',502),
(9013,'Bespoke Concrete Ball','FedEx','284637.00',395),
(8410,'Incredible Granite Pizza','Audi','709753.00',177),
(3392,'Refined Plastic Cheese','Mitsubishi','310420.00',255),
(4573,'Unbranded Bronze Pants','Ferarri','86072.00',511),
(5315,'Generic Rubber Table','Yamaha','829971.00',118),
(9307,'Handmade Steel Gloves','HTC','961466.00',738),
(2747,'Rustic Fresh Bike','Porsche','390125.00',475),
(6089,'Refined Rubber Mouse','ZTE','114257.00',850),
(2258,'Modern Frozen Soap','Audi','921021.00',258),
(3625,'Gorgeous Metal Shirt','HBO','533801.00',296),
(2382,'Intelligent Rubber Cheese','Uber','461470.00',991),
(2500,'Ergonomic Steel Computer','Yamaha','978311.00',604),
(9287,'Intelligent Granite Cheese','Philips','447063.00',409),
(8682,'Tasty Wooden Mouse','Amazon','262715.00',562),
(1502,'Luxurious Soft Gloves','HBO','598311.00',633),
(4225,'Intelligent Cotton Cheese','Intel','176292.00',200),
(4544,'Sleek Frozen Gloves','Crocs','109334.00',223),
(8454,'Bespoke Concrete Tuna','Aisan','119028.00',600),
(4271,'Bespoke Metal Ball','Samsung','401337.00',171),
(4107,'Modern Bronze Shoes','Philips','795205.00',711),
(2480,'Awesome Rubber Hat','Crocs','864031.00',867),
(5641,'Tasty Bronze Keyboard','Motorola','10878.00',564),
(8710,'Oriental Rubber Mouse','Disney','948118.00',987),
(5286,'Gorgeous Soft Bacon','Suzuki','512349.00',690),
(3666,'Elegant Steel Hat','Motorola','258890.00',217),
(9855,'Ergonomic Wooden Ball','Philips','778939.00',734),
(5926,'Luxurious Concrete Keyboard','Xiaomi','180650.00',735),
(9697,'Awesome Frozen Shirt','Rolex','321869.00',394),
(9739,'Awesome Plastic Mouse','Logitech','963351.00',346),
(1888,'Awesome Bronze Shirt','Nvidia','664722.00',997),
(2716,'Fantastic Frozen Keyboard','Nokia','313479.00',341),
(1442,'Handcrafted Rubber Pants','Nvidia','630843.00',572),
(7561,'Unbranded Plastic Soap','Lenovo','84404.00',405),
(5882,'Ergonomic Granite Chicken','Uber','472925.00',470),
(5404,'Incredible Metal Hat','Huawei','744629.00',832),
(6274,'Electronic Soft Chips','Toshiba','362930.00',896),
(7976,'Luxurious Cotton Chicken','Huawei','411014.00',525),
(4869,'Fantastic Granite Chicken','Adidas','267576.00',110),
(7293,'Modern Fresh Chicken','Xiaomi','852511.00',939),
(9539,'Sleek Granite Shoes','Kawasaki','629952.00',556),
(9479,'Modern Steel Ball','Audi','173368.00',635),
(6717,'Incredible Soft Fish','Adobe','85093.00',844),
(3328,'Fantastic Granite Car','Ferarri','438584.00',454),
(1592,'Tasty Plastic Towels','Chanel','773573.00',591),
(3693,'Licensed Frozen Pizza','Lamborghini','634689.00',741),
(6871,'Gorgeous Metal Chips','Acer','980897.00',171),
(1925,'Refined Granite Soap','Crocs','575988.00',232),
(4206,'Handmade Concrete Sausages','3M','31330.00',856),
(2980,'Small Wooden Tuna','Uniqlo','538781.00',602),
(4668,'Gorgeous Soft Mouse','Philips','237361.00',630),
(1192,'Unbranded Bronze Table','Tesla','58879.00',481),
(7918,'Ergonomic Bronze Table','Huawei','502391.00',388),
(6746,'Bespoke Rubber Computer','Microsoft','591383.00',337),
(8509,'Fantastic Steel Cheese','HTC','879054.00',915),
(4420,'Ergonomic Soft Sausages','Amazon','413213.00',784),
(7418,'Handmade Frozen Keyboard','Hyundai','83504.00',801),
(3568,'Handmade Granite Bacon','Yamaha','720969.00',110),
(2870,'Licensed Plastic Shirt','Huawei','308597.00',657),
(6308,'Generic Granite Fish','Apple','452801.00',288),
(8252,'Elegant Plastic Chips','Motorola','555431.00',966),
(8371,'Incredible Fresh Computer','Suzuki','867035.00',186),
(9384,'Bespoke Fresh Tuna','Xiaomi','184203.00',837),
(8956,'Unbranded Steel Salad','Vans','707618.00',973),
(9895,'Sleek Fresh Chair','Chanel','763026.00',355),
(1168,'Licensed Wooden Shoes','Microsoft','281338.00',100),
(5507,'Practical Cotton Salad','Audi','660553.00',397),
(3097,'Elegant Fresh Fish','Apple','385920.00',499),
(7378,'Handcrafted Soft Mouse','Toshiba','442527.00',481),
(5171,'Intelligent Fresh Bike','Disney','18367.00',145),
(6267,'Handmade Metal Towels','Porsche','449875.00',219),
(1526,'Awesome Rubber Soap','Motorola','867843.00',932),
(8163,'Unbranded Rubber Gloves','IBM','190085.00',776),
(7429,'Electronic Plastic Hat','Sharp','984813.00',461),
(5660,'Refined Concrete Bacon','Nvidia','536590.00',741),
(1031,'Licensed Plastic Chair','Disney','757582.00',857),
(4265,'Bespoke Concrete Table','Aisan','744341.00',624),
(6974,'Intelligent Concrete Chips','3M','106090.00',370),
(4630,'Electronic Bronze Sausages','Philips','110247.00',526),
(3273,'Licensed Steel Mouse','IBM','203308.00',458),
(2526,'Small Bronze Shirt','ZTE','575115.00',600),
(1484,'Handcrafted Rubber Sausages','Mercedes','883649.00',225),
(3665,'Practical Cotton Table','Apple','957614.00',262),
(9562,'Electronic Fresh Cheese','Uniqlo','191043.00',732),
(8999,'Bespoke Concrete Car','Gucci','99429.00',730),
(2303,'Incredible Wooden Bacon','Huawei','592332.00',526),
(6160,'Small Steel Soap','Nvidia','924558.00',608),
(9512,'Gorgeous Rubber Table','Sony','637605.00',738),
(1123,'Unbranded Cotton Mouse','Porsche','109776.00',320),
(3573,'Rustic Soft Chips','Toshiba','511300.00',201),
(9709,'Generic Concrete Mouse','Acer','975276.00',364),
(1744,'Practical Rubber Fish','Uber','883640.00',818),
(8540,'Rustic Cotton Car','Acer','131604.00',894),
(2422,'Incredible Cotton Bike','IBM','595669.00',677),
(4348,'Bespoke Wooden Computer','Sharp','575452.00',718),
(4606,'Oriental Steel Bacon','Disney','593069.00',530),
(9981,'Sleek Granite Keyboard','Motorola','57648.00',348),
(7478,'Practical Metal Pants','Samsung','550293.00',760),
(9860,'Handmade Frozen Chicken','Microsoft','682351.00',828),
(9687,'Tasty Wooden Tuna','FedEx','896146.00',770),
(2679,'Awesome Metal Towels','HBO','668537.00',967),
(8723,'Licensed Granite Chicken','Nike','324010.00',532),
(5558,'Luxurious Concrete Table','Mitsubishi','708010.00',679),
(5371,'Handcrafted Bronze Computer','Vans','78660.00',129),
(6599,'Small Bronze Table','Huawei','54436.00',918),
(5910,'Incredible Metal Fish','Chanel','361770.00',762),
(4147,'Bespoke Fresh Gloves','AMD','838210.00',383),
(6907,'Luxurious Concrete Computer','FedEx','125242.00',241),
(1597,'Intelligent Frozen Pants','Lenovo','452246.00',112),
(9472,'Gorgeous Cotton Fish','Uber','189479.00',320),
(3518,'Gorgeous Concrete Cheese','Chanel','511992.00',802),
(6677,'Luxurious Wooden Keyboard','Xiaomi','167209.00',295),
(3465,'Sleek Rubber Bike','Gucci','612191.00',737),
(8907,'Unbranded Granite Table','Toyota','933839.00',114),
(6776,'Rustic Cotton Computer','Unilever','267803.00',896),
(2226,'Refined Soft Gloves','Lamborghini','604740.00',366),
(7516,'Gorgeous Rubber Chicken','Nike','69112.00',691),
(3934,'Small Fresh Sausages','Xiaomi','29631.00',873),
(6843,'Licensed Metal Towels','Nokia','532143.00',291),
(3441,'Refined Wooden Sausages','HBO','185001.00',217),
(3040,'Rustic Rubber Car','Pepsodent','214787.00',621),
(4268,'Oriental Rubber Table','Pepsodent','798454.00',900),
(2499,'Incredible Granite Shoes','Logitech','313041.00',569),
(6603,'Sleek Concrete Shoes','Xiaomi','610347.00',950),
(8446,'Gorgeous Plastic Cheese','Apple','523843.00',913),
(7361,'Awesome Plastic Chips','Polytron','494239.00',778),
(5397,'Fantastic Granite Shirt','Pepsodent','912340.00',312),
(8402,'Licensed Rubber Car','Crocs','424272.00',984),
(9274,'Ergonomic Bronze Sausages','Rolex','592899.00',318),
(6867,'Oriental Granite Towels','Chanel','317886.00',583),
(9016,'Fantastic Wooden Bike','Vans','78691.00',507),
(5858,'Refined Steel Salad','Toyota','772410.00',509),
(1771,'Sleek Granite Gloves','Huawei','20346.00',926),
(9713,'Gorgeous Plastic Table','3M','326118.00',300),
(9436,'Handmade Granite Soap','Samsung','399086.00',622),
(2050,'Ergonomic Plastic Bike','Polytron','578453.00',595),
(7951,'Recycled Metal Table','FedEx','182434.00',467),
(5793,'Recycled Rubber Gloves','Toyota','749701.00',241),
(8833,'Practical Rubber Pants','ZTE','75039.00',337),
(8093,'Modern Cotton Shoes','ZTE','659695.00',490),
(8935,'Small Metal Bacon','Intel','402606.00',392),
(1285,'Luxurious Granite Chicken','Sharp','977404.00',489),
(6085,'Small Fresh Sausages','Nvidia','415646.00',987),
(6261,'Electronic Soft Tuna','HTC','784251.00',387),
(9326,'Modern Wooden Pizza','Chanel','499393.00',445),
(7992,'Awesome Metal Chicken','IBM','820764.00',369),
(1561,'Licensed Bronze Towels','Vans','202858.00',514),
(1703,'Handcrafted Metal Bike','IBM','979989.00',762),
(9730,'Recycled Wooden Table','Apple','614171.00',243),
(6738,'Gorgeous Bronze Bike','ZTE','339480.00',429),
(5803,'Awesome Concrete Towels','Chanel','387387.00',131),
(1292,'Bespoke Rubber Fish','HTC','693086.00',252),
(4189,'Ergonomic Granite Ball','HTC','585116.00',704),
(7784,'Generic Fresh Soap','3M','92869.00',319),
(1361,'Awesome Metal Soap','Nintendo','853024.00',668),
(1189,'Handcrafted Frozen Pizza','Ferarri','516710.00',583),
(9681,'Tasty Plastic Cheese','FedEx','861908.00',387),
(7196,'Small Rubber Salad','Uber','866676.00',947),
(1913,'Incredible Steel Soap','Intel','69877.00',414),
(6045,'Awesome Fresh Bike','Microsoft','787717.00',291),
(1567,'Recycled Metal Bacon','Mercedes','428991.00',773),
(8958,'Licensed Concrete Chair','Toshiba','685113.00',747),
(7728,'Intelligent Concrete Table','Suzuki','307651.00',160),
(8223,'Practical Soft Fish','Yamaha','441804.00',649),
(9929,'Elegant Soft Keyboard','Lamborghini','538430.00',283),
(5218,'Bespoke Rubber Car','Nike','802761.00',283),
(4139,'Licensed Soft Bacon','Ferarri','908684.00',951),
(8824,'Oriental Bronze Car','Robot','174583.00',295),
(1017,'Luxurious Concrete Cheese','Mitsubishi','929619.00',951),
(9946,'Handmade Fresh Bacon','Sharp','515118.00',376),
(7309,'Elegant Rubber Table','Toshiba','526705.00',482),
(9494,'Generic Steel Salad','Rolex','57788.00',455),
(6026,'Handcrafted Cotton Bacon','Uber','797820.00',660),
(1777,'Modern Granite Chicken','Tesla','587244.00',856),
(7134,'Bespoke Fresh Sausages','Xiaomi','263003.00',715),
(5940,'Ergonomic Metal Fish','Toyota','970957.00',251),
(5205,'Intelligent Plastic Tuna','Tesla','543402.00',866),
(1901,'Handcrafted Metal Tuna','HBO','887025.00',603),
(7667,'Elegant Wooden Chips','Tesla','266080.00',321),
(9086,'Small Metal Towels','Nike','20491.00',735),
(7879,'Electronic Wooden Shirt','Xiaomi','529046.00',153),
(5479,'Ergonomic Wooden Bacon','Logitech','404838.00',911),
(7808,'Fantastic Plastic Cheese','Intel','697289.00',117),
(3981,'Modern Metal Bacon','Polytron','860549.00',720),
(5737,'Generic Wooden Pants','Lamborghini','819317.00',339),
(3668,'Rustic Frozen Pizza','Aisan','597078.00',268),
(8745,'Gorgeous Cotton Towels','Samsung','601768.00',412),
(4133,'Unbranded Cotton Salad','Toyota','189834.00',599),
(2202,'Luxurious Soft Bacon','Nvidia','498978.00',601),
(1855,'Incredible Plastic Table','Uber','429078.00',123),
(1306,'Tasty Rubber Towels','Huawei','906561.00',175),
(9791,'Gorgeous Cotton Fish','Robot','546399.00',853),
(3375,'Generic Metal Bike','Audi','801684.00',809),
(5135,'Gorgeous Rubber Bike','3M','208539.00',121),
(2917,'Elegant Steel Pizza','Mitsubishi','917213.00',922),
(7003,'Fantastic Cotton Soap','Sharp','321224.00',543),
(3719,'Rustic Steel Hat','Aisan','732367.00',672),
(5516,'Oriental Cotton Ball','Amazon','979889.00',319),
(1056,'Unbranded Steel Salad','Uber','16418.00',210),
(7074,'Licensed Granite Computer','Acer','226249.00',630),
(4923,'Handmade Metal Bacon','Robot','858956.00',694),
(9771,'Intelligent Metal Computer','Crocs','561220.00',579),
(6032,'Fantastic Rubber Bike','Alienware','414153.00',156),
(5156,'Sleek Metal Cheese','Alienware','388889.00',832),
(6828,'Oriental Soft Chicken','Sony','512272.00',394),
(1856,'Small Plastic Towels','Xiaomi','920049.00',740),
(6182,'Handcrafted Cotton Salad','Sony','457748.00',286),
(8815,'Awesome Cotton Fish','Amazon','226293.00',167),
(9232,'Unbranded Bronze Gloves','Nintendo','150550.00',847),
(7606,'Elegant Granite Shoes','Gucci','522007.00',790),
(2398,'Handcrafted Granite Soap','Gucci','795295.00',606),
(1862,'Elegant Concrete Mouse','Xiaomi','872505.00',323),
(9279,'Rustic Frozen Keyboard','Nvidia','483690.00',547),
(5970,'Tasty Wooden Fish','Xiaomi','271150.00',657),
(9073,'Intelligent Plastic Ball','Robot','333317.00',679),
(2352,'Oriental Plastic Bike','Nike','622963.00',803),
(2175,'Luxurious Frozen Shirt','Apple','292479.00',197),
(1291,'Licensed Concrete Hat','Polytron','313798.00',380),
(1136,'Handcrafted Soft Fish','Nintendo','49069.00',204),
(7530,'Handcrafted Rubber Chips','Pepsodent','682838.00',329),
(1222,'Awesome Soft Shirt','Lamborghini','945643.00',689),
(1502,'Electronic Steel Sausages','HTC','826747.00',386),
(1915,'Practical Metal Chair','Rolex','25870.00',164),
(5463,'Unbranded Concrete Chair','Rolex','492977.00',755),
(9847,'Handcrafted Steel Cheese','Unilever','985953.00',324),
(7777,'Electronic Concrete Cheese','Amazon','590472.00',851),
(3463,'Recycled Metal Keyboard','Mercedes','91589.00',992),
(3361,'Oriental Soft Ball','Uniqlo','191556.00',926),
(5592,'Rustic Cotton Fish','Uniqlo','164606.00',217),
(5624,'Handmade Granite Fish','Rolex','74184.00',463),
(2889,'Elegant Granite Chicken','Adobe','981026.00',982),
(6452,'Unbranded Steel Keyboard','Sony','952988.00',959),
(9886,'Incredible Fresh Sausages','Yamaha','188196.00',460),
(9027,'Incredible Soft Gloves','Adidas','981892.00',333),
(5752,'Intelligent Wooden Sausages','FedEx','407060.00',573),
(8532,'Tasty Rubber Shoes','ZTE','105552.00',289),
(3965,'Tasty Steel Bacon','Uniqlo','300272.00',178),
(2828,'Tasty Cotton Gloves','ZTE','979466.00',311),
(2231,'Oriental Soft Mouse','Lenovo','893190.00',616),
(5819,'Recycled Steel Soap','Philips','75756.00',827),
(5003,'Intelligent Granite Chicken','Adobe','435471.00',209),
(8465,'Refined Steel Chair','IBM','28301.00',357),
(4800,'Modern Granite Shoes','Toyota','144758.00',187),
(7362,'Generic Wooden Chair','Ferarri','379373.00',128),
(9595,'Elegant Fresh Hat','ZTE','645177.00',500),
(8930,'Ergonomic Concrete Computer','Yamaha','935346.00',143),
(4350,'Small Granite Shoes','IBM','532544.00',628),
(8428,'Gorgeous Wooden Fish','Robot','838723.00',210),
(7053,'Generic Frozen Towels','Microsoft','804574.00',518),
(2232,'Ergonomic Plastic Mouse','Ferarri','630890.00',465),
(2316,'Rustic Concrete Car','Nvidia','796870.00',959),
(6160,'Luxurious Cotton Salad','Adobe','259524.00',855),
(4759,'Sleek Frozen Ball','Intel','873706.00',446),
(2276,'Generic Frozen Car','Alienware','501499.00',316),
(9547,'Practical Metal Chair','FedEx','120907.00',336),
(3888,'Handcrafted Fresh Pants','Amazon','593540.00',142),
(8173,'Bespoke Steel Bike','Pepsodent','24946.00',403),
(3176,'Rustic Plastic Fish','Sony','140985.00',397),
(5440,'Recycled Fresh Computer','Lamborghini','160961.00',300),
(7215,'Intelligent Frozen Chips','Hyundai','100372.00',793),
(6961,'Handcrafted Granite Computer','Gucci','871239.00',722),
(8552,'Sleek Rubber Tuna','Vans','247339.00',244),
(8933,'Recycled Metal Gloves','Suzuki','210403.00',522),
(8016,'Elegant Wooden Sausages','Acer','54092.00',820),
(8818,'Refined Plastic Bike','Nvidia','137575.00',769),
(6206,'Handcrafted Plastic Mouse','Crocs','429978.00',901),
(4035,'Handmade Frozen Car','Logitech','302060.00',279),
(8532,'Licensed Granite Pants','Disney','174557.00',239),
(4206,'Rustic Fresh Computer','Toshiba','705568.00',386),
(1409,'Licensed Concrete Keyboard','Yamaha','710765.00',296),
(7410,'Unbranded Frozen Keyboard','Unilever','326145.00',579),
(7664,'Luxurious Steel Pants','HBO','697420.00',690),
(5241,'Elegant Cotton Fish','Lamborghini','793952.00',821),
(6693,'Recycled Plastic Shoes','Hyundai','84306.00',273),
(8581,'Incredible Plastic Pizza','Chanel','857278.00',760),
(9266,'Handcrafted Bronze Ball','Chanel','830488.00',245),
(7617,'Sleek Concrete Fish','Vans','185075.00',582),
(5326,'Small Concrete Chips','Acer','578663.00',977),
(4902,'Handcrafted Wooden Pants','Rolex','525541.00',246),
(3570,'Gorgeous Cotton Cheese','ZTE','128266.00',873),
(5483,'Awesome Wooden Keyboard','Yamaha','614616.00',842),
(5957,'Sleek Soft Ball','Vans','339312.00',764),
(4210,'Fantastic Granite Chips','Ferarri','602486.00',505),
(8325,'Tasty Cotton Shoes','Vans','816683.00',876),
(7773,'Generic Cotton Sausages','Nike','66042.00',475),
(8081,'Bespoke Frozen Chicken','Nvidia','752883.00',746),
(7074,'Intelligent Granite Bike','Chanel','601323.00',524),
(7234,'Licensed Plastic Car','Adidas','812529.00',812),
(3841,'Tasty Bronze Cheese','Sony','367099.00',612),
(1176,'Luxurious Metal Chips','Toshiba','539049.00',759),
(6225,'Incredible Granite Shirt','Lamborghini','335449.00',935),
(8233,'Handcrafted Steel Hat','Porsche','400678.00',784),
(1932,'Generic Soft Salad','Philips','464459.00',736),
(1018,'Luxurious Granite Pizza','Nokia','475512.00',874),
(5278,'Tasty Bronze Bike','Asus','671248.00',943),
(9600,'Small Fresh Table','Intel','393130.00',539),
(3670,'Oriental Soft Chips','Alienware','247227.00',424),
(6483,'Elegant Rubber Bike','Robot','390817.00',968),
(6801,'Oriental Frozen Table','Polytron','718126.00',321),
(2314,'Tasty Soft Shoes','Robot','204639.00',311),
(1030,'Intelligent Steel Gloves','Lamborghini','169694.00',380),
(2827,'Ergonomic Frozen Bacon','Sharp','163291.00',280),
(6806,'Intelligent Soft Ball','Microsoft','886447.00',210),
(8835,'Gorgeous Rubber Chicken','Sharp','377672.00',586),
(2462,'Incredible Plastic Sausages','Uniqlo','95593.00',178),
(4024,'Unbranded Frozen Shoes','3M','620820.00',446),
(5655,'Unbranded Bronze Hat','Sharp','543492.00',834),
(9298,'Luxurious Wooden Fish','HBO','114496.00',898),
(2606,'Elegant Soft Gloves','HBO','315450.00',371),
(1759,'Awesome Granite Sausages','Vans','426813.00',299),
(7227,'Electronic Metal Cheese','Mitsubishi','973820.00',677),
(8405,'Fantastic Fresh Hat','Mitsubishi','647482.00',441),
(4792,'Licensed Plastic Cheese','Logitech','991350.00',543),
(1292,'Practical Fresh Mouse','Amazon','365785.00',221),
(3850,'Modern Frozen Fish','Sony','333257.00',906),
(7713,'Licensed Fresh Chair','Kawasaki','723455.00',243),
(6984,'Ergonomic Metal Hat','Vans','946067.00',754),
(7755,'Electronic Rubber Computer','Uber','647899.00',423),
(1934,'Rustic Cotton Car','Gucci','363058.00',860),
(8484,'Awesome Soft Hat','Kawasaki','882366.00',157),
(7649,'Handcrafted Bronze Keyboard','Gucci','653634.00',825),
(8213,'Fantastic Frozen Keyboard','Amazon','263474.00',612),
(6182,'Tasty Concrete Salad','Mercedes','743579.00',689),
(3365,'Electronic Granite Salad','Alienware','965802.00',327),
(2173,'Generic Cotton Computer','Philips','247399.00',799),
(9378,'Handmade Concrete Mouse','Audi','840213.00',470),
(9149,'Small Fresh Bacon','Vans','973345.00',117),
(1872,'Ergonomic Plastic Pants','Mercedes','334875.00',310),
(8295,'Recycled Concrete Pants','Motorola','760191.00',671),
(4723,'Unbranded Cotton Shirt','Toshiba','926173.00',724),
(8796,'Gorgeous Frozen Fish','Vans','891214.00',808),
(6908,'Fantastic Plastic Computer','Motorola','30890.00',839),
(8501,'Awesome Steel Chicken','3M','181137.00',709),
(8476,'Awesome Rubber Keyboard','Sharp','475795.00',859),
(7132,'Sleek Soft Bike','Vans','46339.00',320),
(4812,'Refined Granite Fish','Ferarri','484862.00',596),
(8051,'Licensed Cotton Shirt','Chanel','149142.00',568),
(4601,'Unbranded Frozen Chicken','Rolex','328196.00',401),
(9247,'Generic Cotton Shoes','Vans','806666.00',667),
(7244,'Small Metal Sausages','Yamaha','191827.00',981),
(5009,'Sleek Concrete Pants','HBO','100029.00',442),
(2992,'Bespoke Bronze Chicken','Ferarri','779835.00',189),
(9327,'Ergonomic Concrete Hat','Vans','300467.00',534),
(6032,'Handmade Metal Bike','Disney','204176.00',584),
(4223,'Refined Fresh Shirt','Asus','754869.00',972),
(6012,'Luxurious Rubber Chips','AMD','242695.00',901),
(1505,'Licensed Rubber Tuna','Chanel','722451.00',332),
(4374,'Electronic Frozen Pizza','Huawei','692465.00',283),
(2924,'Ergonomic Granite Hat','Amazon','657381.00',273),
(2779,'Modern Wooden Towels','Chanel','31097.00',650),
(1336,'Generic Cotton Pizza','Motorola','408358.00',366),
(8917,'Bespoke Plastic Chair','Audi','327455.00',147),
(9993,'Rustic Frozen Cheese','HBO','627832.00',155),
(1344,'Licensed Bronze Shirt','FedEx','351653.00',490),
(3332,'Handcrafted Rubber Towels','Logitech','672831.00',258),
(6739,'Bespoke Soft Pants','Disney','666695.00',129),
(4463,'Incredible Metal Table','Logitech','161473.00',373),
(1946,'Modern Soft Tuna','Vans','183059.00',589),
(9814,'Intelligent Rubber Hat','3M','215073.00',621),
(3792,'Elegant Soft Cheese','Suzuki','449344.00',986),
(6641,'Handcrafted Cotton Shirt','Sony','874848.00',275),
(9935,'Electronic Plastic Tuna','Amazon','524033.00',850),
(2159,'Rustic Granite Ball','Unilever','397266.00',735),
(3159,'Small Soft Cheese','Tesla','447081.00',542),
(2509,'Rustic Plastic Gloves','Ferarri','699607.00',370),
(2785,'Awesome Cotton Pizza','Disney','830872.00',496),
(5065,'Rustic Granite Pants','Robot','921983.00',659),
(4548,'Recycled Concrete Sausages','Gucci','383224.00',625),
(7961,'Generic Concrete Shirt','Nike','625039.00',862),
(5807,'Fantastic Wooden Shoes','Xiaomi','524276.00',266),
(9181,'Sleek Metal Fish','Ferarri','325260.00',318),
(3774,'Licensed Granite Shirt','IBM','259575.00',252),
(8426,'Gorgeous Wooden Cheese','Adobe','555687.00',840),
(7811,'Elegant Steel Chicken','HTC','608108.00',495),
(8969,'Recycled Plastic Shoes','Crocs','228136.00',394),
(8904,'Electronic Granite Shoes','Nike','913218.00',613),
(8046,'Oriental Cotton Gloves','Alienware','753267.00',665),
(7559,'Ergonomic Plastic Car','Pepsodent','810681.00',837),
(2267,'Bespoke Plastic Salad','Polytron','251089.00',592),
(9178,'Tasty Plastic Chicken','Huawei','502462.00',591),
(6671,'Awesome Steel Gloves','Audi','78166.00',850),
(4963,'Incredible Fresh Tuna','Huawei','784553.00',314),
(2007,'Oriental Concrete Mouse','Tesla','968827.00',105),
(1284,'Practical Bronze Keyboard','Nike','743099.00',297),
(7999,'Luxurious Bronze Shoes','Mercedes','342272.00',864),
(2820,'Refined Fresh Computer','Nvidia','956308.00',960),
(9646,'Ergonomic Steel Tuna','Toyota','666278.00',278),
(2333,'Rustic Rubber Car','Vans','131683.00',281),
(1121,'Tasty Metal Chips','FedEx','732673.00',326),
(6502,'Gorgeous Plastic Pants','Uber','133387.00',394),
(3508,'Oriental Plastic Pizza','Nike','584039.00',865),
(2022,'Generic Bronze Soap','Microsoft','345877.00',690),
(3019,'Oriental Metal Bacon','Adidas','985175.00',801),
(7367,'Luxurious Cotton Bacon','Nintendo','980346.00',283),
(1734,'Rustic Granite Cheese','ZTE','128727.00',321),
(5110,'Small Wooden Table','Intel','459209.00',248),
(8784,'Bespoke Wooden Ball','Huawei','366842.00',472),
(7149,'Tasty Bronze Pizza','Uniqlo','575289.00',390),
(4331,'Electronic Fresh Towels','IBM','619992.00',959),
(1793,'Ergonomic Frozen Soap','Sony','456504.00',467),
(5977,'Modern Bronze Table','Nvidia','82602.00',435),
(2218,'Sleek Concrete Salad','FedEx','825532.00',643),
(4779,'Ergonomic Frozen Car','Suzuki','474283.00',492),
(9249,'Licensed Bronze Cheese','Alienware','849259.00',685),
(9033,'Refined Granite Ball','Motorola','134248.00',386),
(7250,'Oriental Frozen Shirt','Alienware','383975.00',216),
(4721,'Luxurious Soft Pizza','Nvidia','824003.00',335),
(4749,'Rustic Concrete Pants','Uber','289371.00',853),
(8871,'Tasty Frozen Hat','Audi','435655.00',965),
(5585,'Fantastic Concrete Hat','Vans','55985.00',841),
(4436,'Tasty Wooden Chair','Amazon','555002.00',679),
(3372,'Generic Steel Towels','Crocs','339169.00',848),
(9202,'Modern Steel Cheese','Nike','467523.00',240),
(1041,'Licensed Soft Bike','Polytron','56139.00',221),
(4761,'Recycled Soft Mouse','Disney','182206.00',406),
(5700,'Ergonomic Metal Shirt','Adobe','236690.00',491),
(8882,'Gorgeous Concrete Towels','Suzuki','157057.00',263),
(1458,'Handmade Fresh Computer','Unilever','840709.00',328),
(3168,'Practical Frozen Hat','Gucci','977648.00',925),
(3977,'Elegant Soft Mouse','Vans','972788.00',751),
(6183,'Sleek Rubber Chips','Logitech','637223.00',942),
(6598,'Bespoke Steel Pizza','Pepsodent','915306.00',393),
(6002,'Fantastic Fresh Car','Uniqlo','143021.00',280),
(7948,'Electronic Frozen Tuna','Nvidia','210257.00',709),
(2947,'Generic Rubber Pants','Alienware','898825.00',546),
(8189,'Ergonomic Steel Chips','Huawei','583820.00',279),
(1903,'Oriental Bronze Table','Kawasaki','988914.00',847),
(4021,'Electronic Metal Sausages','Gucci','777576.00',145),
(7219,'Gorgeous Cotton Ball','Aisan','667629.00',454),
(9043,'Rustic Metal Chair','Apple','898492.00',885),
(7683,'Fantastic Plastic Computer','Polytron','763008.00',311),
(2800,'Luxurious Rubber Chips','Ferarri','141272.00',940),
(3156,'Licensed Metal Keyboard','Apple','438450.00',979),
(3534,'Practical Fresh Salad','HBO','153693.00',227),
(1380,'Tasty Steel Chips','AMD','890968.00',954),
(4307,'Ergonomic Metal Shoes','Pepsodent','716611.00',404),
(9447,'Luxurious Granite Gloves','Acer','427654.00',748),
(6357,'Small Soft Salad','Toyota','933940.00',225),
(4125,'Intelligent Fresh Towels','Asus','657875.00',678),
(6912,'Elegant Bronze Gloves','Adobe','730528.00',270),
(9208,'Tasty Wooden Salad','Logitech','773776.00',681),
(8309,'Generic Concrete Bacon','Lenovo','352469.00',980),
(5844,'Licensed Cotton Shirt','Unilever','591735.00',414),
(8576,'Gorgeous Concrete Tuna','Lamborghini','533836.00',415),
(7671,'Practical Wooden Mouse','AMD','225227.00',912),
(7599,'Generic Frozen Ball','Aisan','41998.00',807),
(7315,'Luxurious Bronze Ball','Nokia','781836.00',864),
(4556,'Handcrafted Soft Shirt','Audi','76022.00',994),
(5163,'Recycled Plastic Chair','Logitech','976957.00',310),
(2607,'Sleek Steel Mouse','Unilever','991514.00',160),
(3495,'Licensed Fresh Salad','Tesla','159276.00',775),
(1703,'Unbranded Cotton Tuna','Asus','871310.00',525),
(4565,'Handcrafted Granite Ball','Lenovo','26541.00',154),
(3221,'Small Bronze Keyboard','Unilever','221507.00',182),
(6536,'Oriental Steel Chicken','Vans','851031.00',789),
(5708,'Tasty Concrete Bike','Apple','887851.00',812),
(5570,'Oriental Steel Hat','Intel','742831.00',312),
(7105,'Licensed Granite Chair','Vans','179101.00',757),
(5321,'Electronic Rubber Towels','Nike','756233.00',995),
(5157,'Rustic Wooden Pants','Nvidia','924302.00',116),
(9281,'Small Fresh Computer','Adobe','264354.00',316),
(9852,'Practical Fresh Chips','Crocs','725695.00',396),
(5575,'Handmade Fresh Bacon','Uber','823665.00',515),
(1024,'Handmade Metal Computer','Nvidia','372081.00',734),
(1082,'Ergonomic Concrete Chair','Logitech','231860.00',896),
(5227,'Electronic Soft Gloves','Alienware','635681.00',314),
(6984,'Rustic Steel Keyboard','Porsche','52786.00',541),
(9499,'Incredible Fresh Car','Yamaha','705015.00',451),
(2585,'Bespoke Rubber Bacon','Uber','752176.00',808),
(5493,'Recycled Steel Towels','Nintendo','927442.00',713),
(3207,'Modern Concrete Shoes','Logitech','735480.00',311),
(2256,'Modern Steel Gloves','Hyundai','373757.00',829),
(9921,'Practical Concrete Gloves','Disney','109209.00',737),
(8491,'Tasty Frozen Computer','Mercedes','191474.00',343),
(3989,'Elegant Fresh Soap','Chanel','111795.00',919),
(4724,'Electronic Fresh Car','Chanel','791932.00',421),
(1753,'Modern Wooden Shoes','Aisan','454134.00',648),
(6028,'Handcrafted Granite Pizza','IBM','580528.00',908),
(3105,'Gorgeous Cotton Tuna','Chanel','846704.00',265),
(6552,'Gorgeous Soft Ball','Gucci','455514.00',962),
(1058,'Intelligent Plastic Shoes','Yamaha','663558.00',171),
(3514,'Refined Soft Gloves','Vans','675857.00',396),
(8174,'Oriental Cotton Shirt','Chanel','203745.00',481),
(3853,'Gorgeous Frozen Mouse','Nintendo','660683.00',290),
(3026,'Luxurious Concrete Chips','Gucci','542034.00',924),
(6485,'Intelligent Steel Shoes','ZTE','904428.00',904),
(8374,'Refined Plastic Keyboard','Microsoft','449748.00',148),
(5105,'Fantastic Rubber Tuna','Lenovo','647646.00',935),
(5951,'Incredible Bronze Hat','Amazon','933257.00',709),
(9425,'Luxurious Cotton Chips','Polytron','594977.00',321),
(2969,'Ergonomic Rubber Keyboard','Lamborghini','333437.00',996),
(4632,'Recycled Soft Car','FedEx','847538.00',463),
(7167,'Elegant Concrete Shoes','Uber','464581.00',868),
(2452,'Recycled Soft Chicken','Microsoft','748125.00',953),
(3735,'Gorgeous Granite Bacon','Mitsubishi','110186.00',631),
(1901,'Licensed Wooden Sausages','AMD','388620.00',237),
(9712,'Licensed Concrete Tuna','Adidas','312135.00',529),
(8068,'Fantastic Wooden Car','Suzuki','651299.00',927),
(6413,'Elegant Wooden Mouse','Nvidia','398618.00',710),
(9596,'Refined Steel Cheese','Nike','282846.00',442),
(8462,'Small Soft Chicken','Chanel','323904.00',573),
(9766,'Unbranded Concrete Bike','Robot','597822.00',450),
(7663,'Licensed Concrete Shirt','HTC','158965.00',147),
(7840,'Rustic Bronze Table','Huawei','202251.00',849),
(8659,'Bespoke Frozen Cheese','Unilever','695331.00',351),
(3702,'Oriental Concrete Bacon','Acer','241891.00',590),
(8580,'Bespoke Rubber Ball','HBO','52342.00',402),
(9796,'Bespoke Concrete Pizza','Vans','202815.00',581),
(8937,'Handcrafted Plastic Tuna','Nike','565584.00',630),
(5145,'Handmade Rubber Soap','Vans','879073.00',876),
(6648,'Recycled Concrete Salad','Huawei','460469.00',467),
(4843,'Modern Plastic Computer','Nike','423685.00',168),
(5379,'Elegant Plastic Keyboard','Disney','18074.00',295),
(8487,'Recycled Soft Fish','Nintendo','958969.00',102),
(3225,'Awesome Fresh Pants','Lenovo','865613.00',691),
(1376,'Ergonomic Concrete Bike','Crocs','319180.00',588),
(4435,'Elegant Soft Shirt','Crocs','959850.00',527),
(1326,'Unbranded Frozen Gloves','Asus','342946.00',376),
(5878,'Bespoke Wooden Fish','FedEx','840605.00',880),
(6690,'Unbranded Concrete Pizza','Intel','780490.00',893),
(5335,'Sleek Plastic Pizza','Hyundai','457984.00',300),
(5953,'Rustic Concrete Towels','Chanel','890159.00',472),
(1943,'Awesome Concrete Shirt','Motorola','897902.00',913),
(5167,'Sleek Bronze Ball','IBM','844624.00',993),
(3508,'Handmade Metal Ball','Intel','445739.00',970),
(4667,'Tasty Cotton Bike','Pepsodent','739466.00',293),
(5665,'Small Steel Mouse','Asus','101483.00',467),
(3088,'Oriental Soft Soap','Adidas','696949.00',839),
(6986,'Electronic Soft Computer','3M','513208.00',128),
(2611,'Luxurious Frozen Shirt','Lamborghini','699747.00',945),
(6384,'Awesome Steel Pants','Nokia','494223.00',646),
(3341,'Incredible Concrete Ball','Xiaomi','486861.00',766),
(6169,'Elegant Cotton Salad','Pepsodent','104896.00',500),
(1716,'Fantastic Fresh Mouse','Suzuki','377745.00',233),
(3721,'Sleek Wooden Bike','Adobe','61359.00',161),
(3404,'Awesome Metal Table','Uniqlo','63637.00',850),
(5557,'Luxurious Rubber Pizza','Vans','171698.00',990),
(4279,'Bespoke Bronze Mouse','HTC','460458.00',457),
(6508,'Ergonomic Wooden Keyboard','Yamaha','244607.00',636),
(5398,'Intelligent Bronze Pants','FedEx','591000.00',526),
(1122,'Ergonomic Plastic Chair','HBO','359568.00',306),
(6920,'Elegant Granite Tuna','Intel','343013.00',562),
(4807,'Sleek Soft Car','HTC','706920.00',293),
(8529,'Elegant Bronze Hat','Vans','183077.00',329),
(8398,'Awesome Concrete Pizza','Pepsodent','968047.00',579),
(5660,'Small Wooden Ball','Mitsubishi','743259.00',352),
(4825,'Modern Bronze Pants','Huawei','172655.00',850),
(8776,'Recycled Frozen Salad','Xiaomi','831247.00',902),
(2304,'Luxurious Plastic Shoes','ZTE','271077.00',711),
(9321,'Modern Plastic Car','Huawei','305116.00',779),
(1171,'Tasty Bronze Shoes','Disney','347403.00',133),
(9371,'Gorgeous Wooden Chicken','Nintendo','830574.00',657),
(4257,'Gorgeous Bronze Computer','Ferarri','587230.00',398),
(5183,'Sleek Steel Keyboard','Chanel','475884.00',360),
(8958,'Awesome Fresh Salad','Logitech','615199.00',954),
(6279,'Awesome Frozen Shirt','Crocs','964077.00',956),
(2427,'Sleek Fresh Tuna','Lenovo','433559.00',232),
(2583,'Luxurious Granite Chair','ZTE','28021.00',778),
(3023,'Elegant Cotton Soap','Sharp','113625.00',935),
(2286,'Refined Frozen Soap','Sharp','271498.00',932),
(3556,'Intelligent Bronze Sausages','Huawei','506083.00',248),
(9040,'Refined Frozen Bacon','FedEx','938878.00',886),
(1481,'Practical Rubber Table','Audi','761906.00',941),
(6843,'Unbranded Bronze Pants','Alienware','133305.00',990),
(5251,'Elegant Concrete Hat','HBO','356744.00',297),
(3659,'Generic Granite Car','Nintendo','763495.00',492),
(3484,'Luxurious Steel Gloves','Lamborghini','802254.00',803),
(6697,'Handcrafted Granite Chicken','IBM','740424.00',147),
(4882,'Elegant Concrete Pants','Nintendo','415841.00',108),
(6385,'Gorgeous Fresh Hat','Suzuki','500044.00',286),
(4459,'Small Plastic Chips','Alienware','828174.00',495),
(3399,'Small Concrete Fish','Nokia','53566.00',131),
(7178,'Oriental Metal Bike','Samsung','76567.00',269),
(7989,'Incredible Fresh Fish','Nike','710081.00',645),
(7751,'Practical Plastic Computer','Aisan','435658.00',810),
(7063,'Sleek Steel Car','Hyundai','636450.00',562),
(4212,'Recycled Steel Towels','Yamaha','655866.00',545),
(7731,'Refined Steel Table','Suzuki','260561.00',223),
(6228,'Sleek Cotton Bike','Logitech','863677.00',651),
(5437,'Handmade Fresh Shoes','FedEx','806190.00',181),
(4650,'Small Granite Table','Lenovo','586036.00',280),
(8701,'Refined Wooden Cheese','Polytron','728056.00',963),
(4373,'Awesome Granite Mouse','Vans','643102.00',359),
(3055,'Electronic Wooden Gloves','Motorola','40171.00',170),
(7329,'Tasty Fresh Gloves','Ferarri','524304.00',949),
(3818,'Gorgeous Granite Chicken','Chanel','391847.00',238),
(3944,'Bespoke Plastic Car','Unilever','70814.00',905),
(8139,'Electronic Wooden Salad','Apple','613603.00',676),
(6066,'Fantastic Steel Car','Acer','380807.00',500),
(5425,'Incredible Steel Shoes','Robot','397894.00',561),
(3131,'Intelligent Steel Hat','Lenovo','168264.00',886),
(1271,'Sleek Steel Towels','Ferarri','159743.00',403),
(6248,'Incredible Wooden Cheese','ZTE','338301.00',928),
(7859,'Electronic Bronze Mouse','Vans','595429.00',400),
(6182,'Rustic Cotton Fish','Philips','294984.00',503),
(7972,'Handmade Granite Bike','AMD','469314.00',932),
(8271,'Modern Rubber Computer','Pepsodent','906340.00',388),
(2467,'Sleek Steel Bacon','Robot','42220.00',936),
(8510,'Gorgeous Plastic Shirt','Ferarri','754024.00',322),
(4282,'Ergonomic Wooden Salad','Lamborghini','353516.00',299),
(4980,'Recycled Steel Car','Uber','637573.00',520),
(4395,'Rustic Bronze Fish','Sharp','833790.00',661),
(5606,'Elegant Frozen Shirt','Suzuki','719394.00',701),
(9927,'Generic Bronze Sausages','Lenovo','693921.00',774),
(6470,'Intelligent Bronze Towels','Nintendo','896208.00',331),
(6922,'Generic Soft Bacon','Sharp','352060.00',198),
(8227,'Practical Metal Pizza','Alienware','422361.00',977),
(1991,'Small Granite Computer','Porsche','556977.00',815),
(7669,'Bespoke Rubber Gloves','Rolex','65396.00',978),
(9198,'Awesome Frozen Bacon','Toshiba','429108.00',518),
(1632,'Incredible Plastic Towels','Porsche','716104.00',345),
(5303,'Electronic Granite Pants','Yamaha','926722.00',373),
(9547,'Elegant Metal Chicken','Uniqlo','712089.00',176),
(6151,'Licensed Cotton Pizza','Robot','467777.00',152),
(4720,'Bespoke Soft Salad','Tesla','702068.00',114),
(6262,'Electronic Metal Chips','Uber','292997.00',593),
(5145,'Tasty Wooden Towels','Amazon','946432.00',913),
(2611,'Gorgeous Bronze Sausages','Microsoft','644563.00',701),
(9038,'Sleek Fresh Hat','Nintendo','827407.00',364),
(2598,'Electronic Bronze Bike','Ferarri','262902.00',612),
(2395,'Practical Wooden Soap','Acer','112630.00',335),
(4581,'Recycled Fresh Shirt','AMD','225014.00',835),
(6563,'Handcrafted Plastic Sausages','Lamborghini','893142.00',803);
"
ugqPCyzK,CorrectCode,Anonim_999,C#,Saturday 4th of May 2024 01:13:47 AM CDT,"using System;

namespace Ticket13
{
    public class Teleradio
    {
        public enum TVPack { Эконом, Мини, Универсал }

        public static int AbonentPayment(TVPack chanelNums, bool subscription, bool pensioner)
        {
            double payment = (subscription) ? 300 : 0;

            switch (chanelNums)
            {
                case TVPack.Эконом:
                    payment += 100;
                    break;
                case TVPack.Мини:
                    payment -= 200;
                    break;
                case TVPack.Универсал:
                    payment += 500;
                    break;
                default:
                    break;
            }

            if (pensioner)
                payment *= 0.9;
            if (payment < 0)
                payment = 0;
            return (int)Math.Round(payment);
        }
    }
}
"
bC8Y28TU,UnitTest,Anonim_999,C#,Saturday 4th of May 2024 01:12:58 AM CDT,"using Microsoft.VisualStudio.TestTools.UnitTesting;
using Ticket13;

namespace AbonentPaymentTest
{
    [TestClass]
    public class UnitTest1
    {
        #region EconomTest

        [TestMethod]
        public void TestEconomSubscriptionNotPensioner() // Эконом + подписка
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Эконом;
            bool subscription = true;
            bool pensioner = false;
            int expectedPayment = 400; // 300 (subscription) + 100 (Econom) = 400

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);
            
            Assert.AreEqual(expectedPayment, actualPayment);
        }

        [TestMethod]
        public void TestEconomSubscriptionPensioner() // Эконом + подписка + пенсионер
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Эконом;
            bool subscription = true;
            bool pensioner = true;
            int expectedPayment = 360; // 300 (subscription) + 100 (Econom) = 400, 400 * 0.9 = 360

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }

        [TestMethod]
        public void TestEconomNoSubscriptionNotPensioner() // Эконом
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Эконом;
            bool subscription = false;
            bool pensioner = false;
            int expectedPayment = 100; // 0 + 100 (Econom) = 100

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }

        [TestMethod]
        public void TestEconomNoSubscriptionPensioner() // Эконом + пенсионер
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Эконом;
            bool subscription = false;
            bool pensioner = true;
            int expectedPayment = 90; // 0 + 100 (Econom) = 100, 100 * 0.9 = 90

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }
        #endregion

        #region MiniTest
        [TestMethod]
        public void TestMiniSubscriptionPensioner() // мини + подписка + пенсионер
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Мини;
            bool subscription = true;
            bool pensioner = true;
            int expectedPayment = 90; // 300 (subscription) - 200 (Mini) = 100, 100 * 0.9 = 90

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }

        [TestMethod]
        public void TestMiniNoSubscriptionPensioner() // мини + пенсионер
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Мини;
            bool subscription = false;
            bool pensioner = true;
            int expectedPayment = 0; // 0 (subscription) - 200 (Mini) = 0, 0 * 0.9 = 0

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }

        [TestMethod]
        public void TestMiniSubscriptionNotPensioner() // мини + подписка
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Мини;
            bool subscription = true;
            bool pensioner = false;
            int expectedPayment = 100; // 300 (subscription) - 200 (Mini) = 100

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }

        [TestMethod]
        public void TestMiniNoSubscriptionNotPensioner() // мини
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Мини;
            bool subscription = false;
            bool pensioner = false;
            int expectedPayment = 0; // 0 (subscription) - 200 (Mini) = 0

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }
        #endregion

        #region UniversalTest
        [TestMethod]
        public void TestUniversalSubscriptionPensioner() // Универсал + подписка + пенсионер
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Универсал;
            bool subscription = true;
            bool pensioner = true;
            int expectedPayment = 720; // 300 (subscription) + 500 (Universal) = 800, 800 * 0.9 = 720

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }

        [TestMethod]
        public void TestUniversalSubscriptionNotPensioner() // Универсал + подписка
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Универсал;
            bool subscription = true;
            bool pensioner = false;
            int expectedPayment = 800; // 300 (subscription) + 500 (Universal) = 800

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }

        [TestMethod]
        public void TestUniversalNoSubscriptionPensioner() // Универсал + пенсионер
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Универсал;
            bool subscription = false;
            bool pensioner = true;
            int expectedPayment = 450; // 0 + 500 (Universal) = 500, 500 * 0.9 = 450

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }

        [TestMethod]
        public void TestUniversalNoSubscriptionNotPensioner() // Универсал
        {
            Teleradio.TVPack selectedPack = Teleradio.TVPack.Универсал;
            bool subscription = false;
            bool pensioner = false;
            int expectedPayment = 500; // 0 + 500 (Universal) = 500

            int actualPayment = Teleradio.AbonentPayment(selectedPack, subscription, pensioner);

            Assert.AreEqual(expectedPayment, actualPayment);
        }

        #endregion
    }
}"
cUeMNDuU,RSA.Cracker,Tark_Wight,C++,Saturday 4th of May 2024 12:34:58 AM CDT,"#include <iostream>
#include <string>
#include <vector>

long long ModularExponentiation(long long base, long long exponent, long long modulus) {
    long long result = 1;
    while (exponent > 0) {
        if (exponent % 2 == 1) {
            result = (result * base) % modulus;
        }
        base = (base * base) % modulus;
        exponent /= 2;
    }
    return result;
}

int EulerTotientFunction(int number) {
    int result = number;
    if (number % 2 == 0) {
        while (number % 2 == 0) {
            number /= 2;
        }
        result /= 2;
    }
    int i = 3;
    while (i * i <= number) {
        if (number % i == 0) {
            while (number % i == 0) {
                number /= i;
            }
            result /= i;
            result *= (i - 1);
        }
        i += 2;
    }
    if (number > 1) {
        result /= number;
        result *= (number - 1);
    }
    return result;
}

std::pair<int, int> GeneratePrivateKey() {
    int privateKey = 0, modulus;
    int publicKey;
    std::cout << ""Enter the public key: "";
    std::cin >> publicKey >> modulus;
    for (int i = 1; i < modulus; ++i) {
        if ((i * publicKey) % EulerTotientFunction(modulus) == 1) {
            privateKey = i;
            std::cout << ""Private key: "" << privateKey << "" "" << modulus << std::endl;
            break;
        }
    }

    return { privateKey, modulus };
}

void DecodeMessage() {
    std::vector<int> encryptedCode;
    int number;
    std::cout << ""Enter the encrypted numbers: "";
    while (std::cin >> number) {
        encryptedCode.push_back(number);
        if (std::cin.peek() == '\n')
            break;
    }

    auto [privateKey, modulus] = GeneratePrivateKey();

    std::string decryptedString;
    decryptedString += char(96 + ModularExponentiation(encryptedCode[0], privateKey, modulus));
    for (size_t i = 1; i < encryptedCode.size(); ++i) {
        int currentDecoded = ModularExponentiation(encryptedCode[i], privateKey, modulus);
        int difference = currentDecoded - encryptedCode[i - 1];
        if (difference < 0) difference += modulus;
        decryptedString += char(96 + difference);
    }
    std::cout << ""Decrypted string: "" << decryptedString << std::endl;
}

void EncodeMessage() {
    std::string message;
    std::cout << ""Enter your message (no spaces): "";
    std::cin >> message;
    int publicKey, modulus;
    std::cout << ""Enter the public key: "";
    std::cin >> publicKey >> modulus;

    int lastEncodedValue = ModularExponentiation(message[0] - 96, publicKey, modulus);
    std::string encryptedString = std::to_string(lastEncodedValue) + "" "";
    for (size_t i = 1; i < message.length(); ++i) {
        lastEncodedValue = ModularExponentiation(message[i] - 96 + lastEncodedValue, publicKey, modulus);
        encryptedString += std::to_string(lastEncodedValue) + "" "";
    }
    std::cout << ""Encrypted string: "" << encryptedString << std::endl;
}

int main() {
    std::cout << ""1) Decode\n2) Encode\n"";
    int choice;
    std::cin >> choice;
    if (choice == 1) {
        DecodeMessage();
    } else {
        EncodeMessage();
    }
    return 0;
}
"
Fe2pHyfJ,Bouncing Cat Window (Autohotkey),Mangus875,Autohotkey,Friday 3rd of May 2024 11:37:36 PM CDT,"CoordMode ""Mouse"", ""Screen""
CoordMode ""ToolTip"", ""Screen""
#R::Reload
SetWinDelay 0

MyGui := Gui(, """")
MyGui.Opt(""ToolWindow -Sysmenu +AlwaysOnTop"")
MyGui.SetFont ""s36 w700""
MyGui.BackColor := ""dddddd""
MyGui.Add(""Text"", ""x4 y-24"", "".!."")
MyGui.SetFont ""s16 w400""
MyGui.Add(""Text"", ""w12 xp+16 yp+41"", ""^"")
WinSetStyle(""0x800000"", MyGui)
MyGui.Show(""w50 h40 Center NoActivate"")

OnMessage(0x201, WM_MouseDown)
; OnMessage(0x202, WM_MouseUp)
lastX := 0
lastY := 0
dx := 0
dy := 0
falling := false
grabbed := false
enableMove := true

WM_MouseDown(wParam, lParam, msg, window) {
  global grabbed
  
  if (window != MyGui.Hwnd) {
    return
  }
  
  grabbed := true
  MouseGetPos &mouseX, &mouseY
  lastX := mouseX
  lastY := mouseY
}

~LButton Up::MouseUp
MouseUp() {
  global grabbed
  if grabbed {
    grabbed := false
    fall
  }
}

acc := 1.0
vel := 0.0
pos := 0.0
fall() {
	global vel
	global acc
	global pos
  global falling
  offset := 82
  
  falling := true
  
	WinGetPos ,&startPos,,, MyGui
	pos := startPos
  
	while (abs(vel) > 0.5 or (A_ScreenHeight - abs(pos+offset) > 2)) {
    if grabbed {
      break
    }
		Sleep 1
		vel += acc
		pos += vel
		
		WinGetPos &xpos,,,, MyGui
		if (pos+offset > A_ScreenHeight) {
			WinMove xpos, A_ScreenHeight-offset,,, MyGui
			vel := -0.8*abs(vel)
		} else
		WinMove xpos, pos,,, MyGui
	}	
	WinGetPos &endpos,,,, MyGui
  if (!grabbed) {
    WinMove endPos, A_ScreenHeight-offset,,, MyGui
  }
	vel := 0
	pos := 0
  SetTimer () => falling := false, -50
}

sleep 100
fall()

while true {
  global dx
  global dy
  global lastX
  global lastY
  global grabbed
  
  
  WinGetPos &winx, &winy,,, MyGui
  MouseGetPos &x, &y
  dx := x-lastX
  dy := y-lastY
  lastX := x
  lastY := y
  
  if (!falling && grabbed && enableMove) {
    WinMove winx+dx, winy+dy,,, MyGui
  }
  
  sleep 0
}"
TSjdZNg4,PngData,Eliont,Python,Friday 3rd of May 2024 11:16:55 PM CDT,"import os
from PIL import Image
import time
import codecs

input_folder = 'E:\\SD'

prompts = []
for path, subdirs, files in os.walk(input_folder):
  for name in files:
    filename = os.path.join(path, name)
    print (filename)
    if filename.endswith('.png'):
      # Open the image file with PIL.Image.File
      try:
        im = Image.open(filename)
      except:
        continue
      
      if 'parameters' in im.info:
        metadata_str = str(im.info['parameters'].split('Negative prompt')[0])

        # print (metadata_str)
        # time.sleep(1)
                
        if len(metadata_str.split(',')) > 1 and metadata_str not in prompts:
          prompts.append(metadata_str)
            
          with codecs.open(""prompts.txt"", ""a"", encoding='utf-8') as myfile:
            myfile.write(metadata_str.replace('_',' '))
            myfile.write(""\n"")

      im.close()"
GaaTziWn,Horror Clock by TheLoneCatt,HaoDZ,Lua,Friday 3rd of May 2024 09:21:46 PM CDT,"local STRINGS = GLOBAL.STRINGS
local UPGRADETYPES = GLOBAL.UPGRADETYPES
local GetString = GLOBAL.GetString

UPGRADETYPES.POCKETWATCH_WEAPON = ""pocketwatch_weapon""

TUNING.POCKETWATCH_WEAPON_HORROR_PLANAR_DAMAGE = GetModConfigData(""clock_planar_dmg"") or 15

STRINGS.CHARACTERS.GENERIC.ANNOUNCE_HORRORCLOCK = ""I think it liked that.""
STRINGS.CHARACTERS.WANDA.ANNOUNCE_HORRORCLOCK = ""What could go wrong?""

STRINGS.CHARACTERS.GENERIC.ANNOUNCE_HORRORCLOCK_FUEL = ""It hungers for something else.""
STRINGS.CHARACTERS.WANDA.ANNOUNCE_HORRORCLOCK_FUEL = ""Oh botheration, that won't do anymore...""

local Fueled = require(""components/fueled"")

local OldTakeFuelItem = Fueled.TakeFuelItem
function Fueled:TakeFuelItem(item, ...)
	if self.inst.MakeHorrorClock and not self.inst:HasTag(""horrorclock"") and item.prefab == ""horrorfuel"" then
		local owner = self.inst.components.inventoryitem and self.inst.components.inventoryitem:GetGrandOwner()
		
		self.inst:MakeHorrorClock()
		if owner and owner.components.talker then
			owner.components.talker:Say(GetString(owner, ""ANNOUNCE_HORRORCLOCK""))
		end
	end
	
	return OldTakeFuelItem(self, item, ...)
end

local OldCanAcceptFuelItem = Fueled.CanAcceptFuelItem
function Fueled:CanAcceptFuelItem(item, ...)
	if self.inst:HasTag(""horrorclock"") and item.prefab ~= ""horrorfuel"" then
		local owner = self.inst.components.inventoryitem and self.inst.components.inventoryitem:GetGrandOwner()
		
		if owner and owner.components.talker then
			owner:DoTaskInTime(0, function() owner.components.talker:Say(GetString(owner, ""ANNOUNCE_HORRORCLOCK_FUEL"")) end)
		end
		
		return false
	end
	
	return OldCanAcceptFuelItem(self, item, ...)
end

local function MakeHorrorClock(inst)
	if inst.components.planardamage == nil then
		inst:AddComponent(""planardamage"")
	end
	inst.components.planardamage:SetBaseDamage(TUNING.POCKETWATCH_WEAPON_HORROR_PLANAR_DAMAGE)
	
	inst:AddTag(""horrorclock"")
	inst:AddTag(""magiciantool"")
end

local OldOnSave
local function OnSave(inst, data, ...)
	if OldOnSave then
		OldOnSave(inst, data, ...)
	end
	data.horrorclock = inst:HasTag(""horrorclock"")
end

local OldOnLoad
local function OnLoad(inst, data, ...)
	if OldOnLoad then
		OldOnLoad(inst, data, ...)
	end
	if data and data.horrorclock then
		inst:MakeHorrorClock()
	end
end

AddPrefabPostInit(""pocketwatch_weapon"", function(inst)
	if not GLOBAL.TheWorld.ismastersim then
		return
	end
	
	inst.MakeHorrorClock = MakeHorrorClock
	
	if not OldOnSave then
		OldOnSave = inst.OnSave
	end
	inst.OnSave = OnSave
	
	if not OldOnLoad then
		OldOnLoad = inst.OnLoad
	end
	inst.OnLoad = OnLoad
end)"
feS5aUWe,Pastebin.ai - #1 pastebin alternative,xxsa,PHP,Friday 3rd of May 2024 09:16:34 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..............
........................
"
8gmwGwHm,synapse crashes after switching to postgresql,RingtailedFox,Python,Friday 3rd of May 2024 09:07:03 PM CDT,"Error during initialisation:
     Traceback (most recent call last):
       File ""/home/user/synapse/env/lib/python3.11/site-packages/synapse/app/homeserver.py"", line 359, in setup
         hs.setup()
       File ""/home/user/synapse/env/lib/python3.11/site-packages/synapse/server.py"", line 348, in setup
         self.datastores = Databases(self.DATASTORE_CLASS, self)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       File ""/home/user/synapse/env/lib/python3.11/site-packages/synapse/storage/databases/__init__.py"", line 72, in __init__
         with make_conn(database_config, engine, ""startup"") as db_conn:
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       File ""/home/user/synapse/env/lib/python3.11/site-packages/synapse/storage/database.py"", line 165, in make_conn
         native_db_conn = engine.module.connect(**db_params)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       File ""/home/user/synapse/env/lib/python3.11/site-packages/psycopg2/__init__.py"", line 122, in connect
         conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     psycopg2.OperationalError: connection to server on socket ""/var/run/postgresql/.s.PGSQL.5432"" failed: FATAL:  Peer authentication failed for user ""synapse_user""
 
 
 There may be more information in the logs.
**********************************************************************************
synapse.app.homeserver(homeserver.yaml) failed to start (exit code: 1). Check the Synapse logfile, or run synctl with --no-daemonize.
"
FtBkKsPK,how to pack delta ?,glokyfull,Motorola 68000 HiSoft Dev,Friday 3rd of May 2024 08:55:13 PM CDT,";note, pas besoin de 2048 puis de 512 element elle se deduise de la table de 8192 element qui va prendre 16k une fois depacké
; les valeurs de sinus peuvent etre une vue et non un tableau physique simplement en ajoutant de 4 en 4 puis de 16 en 16
; au lieu de 1 en 1 l'indice du tableau



    dc.w 8192  ; nombre d'element depack
	dc.w 0
	dc.w 248

	dc.b	  0,241,0,241,240,0,15,0,15,0,240,15,0,240,240,240
	dc.b	  240,255,0,255,15,240,255,14,30,14,0,239,15,255,255,14
	dc.b	  14,14,14,14,14,255,14,224,254,14,255,224,239,254,255,255
	dc.b	  239,239,255,239,254,254,255,239,254,224,208,238,255,238,255,239
	dc.b	  239,239,238,13,255,238,255,208,238,254,239,254,239,239,238,255
	dc.b	  238,254,254,239,254,239,238,255,238,255,238,254,254,254,224,223
	dc.b	  254,254,254,254,254,255,238,13,13,14,254,254,255,254,224,238
	dc.b	  14,224,239,239,255,224,238,14,255,254,14,254,15,239,240,208
	dc.b	  255,224,254,14,240,224,224,224,224,255,255,255,14,15,255,240
	dc.b	  224,14,14,30,15,255,15,15,240,225,224,15,240,255,0,255
	dc.b	  15,0,255,0,240,240,240,15,15,30,31,15,0,15,0,240
	dc.b	  0,15,0,241,240,0,15,0,30,16,15,31,0,31,0,0
	dc.b	  0,0,15,16,31,0,0,31,31,16,0,0,1,241,0,1
	dc.b	  241,0,0,16,0,1,0,1,0,1,241,31,16,31,17,241
	dc.b	  1,241,31,17,241,31,17,0,1,0,16,16,1,0,16,16

	dc.b	  1,1,0,16,16,1,1,0,17,242,241,16,1,1,1,0
	dc.b	  17,0,16,16,1,16,1,1,1,1,1,1,0,17,242,0
	dc.b	  16,16,16,16,16,16,2,241,16,1,16,1,1,16,1,1
	dc.b	  1,1,1,1,1,1,0,47,17,0,17,0,17,0,16,17
	dc.b	  242,0,16,2,241,16,16,1,16,1,16,1,1,1,1,0
	dc.b	  17,1,242,0,16,16,16,16,1,16,1,1,1,1,0,17
	dc.b	  242,242,242,241,16,1,1,0,47,16,16,16,16,1,31,47
	dc.b	  17,0,16,16,1,16,0,17,0,16,16,1,31,17,0,16
	dc.b	  16,1,1,1,242,241,16,1,0,17,241,16,1,0,16,16
	dc.b	  1,0,16,16,31,17,0,16,1,1,0,1,31,17,0,1
	dc.b	  1,0,1,31,17,241,31,17,241,31,17,241,31,17,241,31
	dc.b	  16,16,0,16,1,0,16,0,16,1,0,1,1,241,1,241
	dc.b	  1,0,0,16,31,16,1,0,1,241,31,16,0,16,0,31
	dc.b	  16,31,16,0,16,0,1,241,1,241,241,1,241,241,1,240
	dc.b	  16,0,1,241,0,0,0,16,241,0,1,241,241,15,16,1
	dc.b	  240,31,1,15,16,0,0,0,0,1,240,1,240,31,1,241

	dc.b	  240,31,1,240,31,0,1,240,0,15,16,15,31,31,1,240
	dc.b	  0,241,15,31,0,0,0,241,240,0,15,31,0,0,15,1
	dc.b	  225,15,31,15,31,31,241,241,255,31,31,241,240,0,240,0
	dc.b	  241,225,15,0,240,0,240,0,240,15,31,241,255,31,15,31
	dc.b	  241,255,31,15,0,15,241,240,241,225,240,240,15,0,240,15
	dc.b	  0,240,240,15,15,30,31,241,255,0,240,15,15,15,30,31
	dc.b	  240,15,0,240,240,240,15,15,0,240,240,240,15,15,15,0
	dc.b	  240,240,240,15,15,15,0,255,30,31,240,15,15,15,0,255
	dc.b	  30,31,240,15,241,255,15,0,240,240,15,241,224,0,255,0
	dc.b	  240,240,15,15,15,0,255,30,31,241,225,225,240,240,240,15
	dc.b	  241,255,0,240,15,241,255,0,240,15,241,255,30,31,241,255
	dc.b	  0,240,15,0,240,240,15,0,240,15,15,30,31,15,0,15
	dc.b	  15,0,241,225,240,241,255,0,15,30,31,15,30,16,255,31
	dc.b	  0,240,0,240,15,31,241,240,241,240,15,0,15,31,241,240
	dc.b	  0,240,0,240,30,31,31,15,31,0,241,240,0,241,240,15
	dc.b	  31,0,0,240,31,241,15,0,0,15,31,0,0,15,1,240

	dc.b	  0,241,241,240,0,0,241,241,240,0,0,15,16,240,31,0
	dc.b	  0,0,0,241,15,31,31,1,240,0,31,0,0,0,241,0
	dc.b	  0,241,0,15,16,241,0,241,0,15,16,0,241,0,0,0
	dc.b	  0,0,31,0,1,241,241,241,241,0,241,0,0,1,240,31
	dc.b	  31,16,241,0,1,240,1,241,15,16,0,31,1,241,15,16
	dc.b	  31,0,16,241,0,0,31,31,16,0,0,31,16,0,0,1
	dc.b	  241,0,0,1,241,0,0,31,16,241,31,1,15,16,31,31
	dc.b	  16,0,31,16,0,0,16,0,0,1,0,0,1,241,0,31
	dc.b	  31,16,31,31,16,1,241,0,0,31,16,1,241,15,47,1
	dc.b	  0,0,31,16,31,1,0,1,241,0,0,16,0,1,241,0
	dc.b	  31,16,0,1,0,0,31,16,1,241,0,31,31,17,241,241
	dc.b	  1,241,0,0,16,0,0,16,0,31,16,1,241,0,0,16
	dc.b	  0,1,0,0,31,16,31,31,17,241,241,1,241,0,0,16
	dc.b	  0,1,0,0,31,16,31,31,47,1,241,31,1,0,1,15
	dc.b	  47,1,0,0,31,17,240,16,0,31,16,1,241,0,31,16
	dc.b	  0,16,241,31,16,0,1,0,0,31,16,31,16,0,1,0

	dc.b	  0,16,0,1,15,47,1,0,1,241,0,31,16,0,16,0
	dc.b	  0,16,0,31,16,1,241,0,1,15,47,1,0,0,16,0
	dc.b	  1,0,0,31,16,31,16,0,1,0,0,31,17,240,16,0
	dc.b	  31,16,1,241,0,31,16,0,16,241,31,16,0,1,15,47
	dc.b	  1,0,1,15,17,241,15,47,31,16,31,16,0,1,0,0
	dc.b	  16,0,1,241,1,241,241,31,31,16,31,16,0,1,0,0
	dc.b	  16,0,1,241,0,31,16,0,16,0,0,16,0,1,241,1
	dc.b	  241,241,31,31,16,1,241,0,31,16,0,1,0,0,31,16
	dc.b	  1,241,0,0,16,0,1,241,0,1,15,16,31,16,0,1
	dc.b	  15,47,1,241,0,31,16,0,1,241,0,31,31,16,31,31
	dc.b	  16,1,241,0,0,1,0,0,0,16,0,0,31,16,0,31
	dc.b	  31,16,31,1,15,17,240,31,16,0,1,241,0,0,1,241
	dc.b	  0,0,0,31,16,0,0,31,31,16,0,1,240,16,15,16
	dc.b	  31,1,241,15,16,0,31,1,241,0,241,0,1,240,31,31
	dc.b	  16,241,0,0,1,240,1,241,241,241,241,0,15,16,0,0
	dc.b	  0,0,1,240,0,31,0,1,240,1,240,31,0,1,240,0

	dc.b	  1,240,0,0,15,16,0,241,15,31,31,1,240,0,0,0
	dc.b	  15,16,240,31,0,0,0,241,241,240,0,0,241,241,240,0
	dc.b	  241,15,0,0,15,31,0,0,15,1,255,16,240,0,15,31
	dc.b	  0,241,240,0,241,240,15,31,15,31,30,16,240,0,240,0
	dc.b	  241,255,31,0,15,0,241,240,241,255,31,0,240,0,240,15
	dc.b	  31,240,30,31,15,30,31,0,15,241,240,241,225,240,15,15
	dc.b	  0,15,15,30,31,15,0,240,15,0,240,240,15,0,240,15
	dc.b	  241,255,30,31,241,255,0,240,15,241,255,0,240,15,241,255
	dc.b	  0,240,240,241,225,225,255,30,31,240,15,15,15,0,240,240
	dc.b	  15,240,0,225,255,0,240,240,15,15,241,255,0,255,30,31
	dc.b	  240,15,15,15,0,255,30,31,240,15,15,15,0,240,240,240
	dc.b	  15,15,15,0,240,240,240,15,15,0,240,240,240,15,0,255
	dc.b	  30,31,15,15,0,240,15,241,255,30,31,15,0,240,240,15
	dc.b	  0,240,15,0,240,241,225,240,241,255,0,15,15,31,241,255
	dc.b	  31,15,31,241,255,31,0,240,0,240,0,240,15,1,225,240
	dc.b	  0,240,0,241,255,31,31,241,241,255,31,31,15,31,1,225

	dc.b	  15,0,0,15,31,0,0,241,240,0,0,15,31,1,240,0
	dc.b	  241,15,31,31,0,31,0,0,241,0,15,16,241,15,16,241
	dc.b	  241,15,16,241,0,241,0,0,0,0,0,31,1,15,16,241
	dc.b	  0,31,1,241,241,0,1,240,16,0,0,1,241,0,0,16
	dc.b	  241,1,241,241,1,241,241,1,241,0,0,16,0,31,16,31
	dc.b	  16,0,16,0,31,17,241,0,1,0,31,16,16,0,1,1
	dc.b	  241,1,241,1,0,1,0,16,0,16,1,0,16,0,16,31
	dc.b	  17,241,31,17,241,31,17,241,31,17,241,31,17,0,1,1
	dc.b	  0,1,31,17,0,1,1,0,16,1,31,16,16,16,1,0
	dc.b	  16,16,1,0,17,241,16,1,0,17,242,241,1,1,0,16
	dc.b	  16,1,31,17,0,16,16,1,16,0,17,0,16,16,1,31
	dc.b	  47,17,0,16,16,16,31,32,1,1,0,17,242,242,242,241
	dc.b	  16,1,1,1,1,0,17,0,16,16,16,16,2,241,1,16
	dc.b	  1,1,1,1,0,17,0,17,0,16,17,242,0,16,2,241
	dc.b	  16,16,1,16,1,16,1,31,32,1,1,1,1,1,1,1
	dc.b	  1,0,17,1,0,17,0,17,242,0,16,16,16,16,16,16

	dc.b	  2,241,16,1,1,1,1,1,1,0,17,0,16,16,1,16
	dc.b	  1,1,1,0,17,242,241,16,1,1,0,16,16,1,1,0
	dc.b	  16,16,1,0,16,16,1,0,1,31,17,241,31,17,241,1
	dc.b	  241,31,16,31,17,241,0,1,0,1,0,0,16,0,1,241
	dc.b	  0,1,241,0,0,0,31,31,16,0,15,16,31,0,0,0
	dc.b	  0,15,16,15,31,0,30,16,15,0,0,241,240,15,0,0
	dc.b	  240,15,0,15,15,30,31,15,0,240,240,240,15,240,15,15
	dc.b	  240,15,240,255,0,225,224,255,15,15,255,14,30,14,0,224
	dc.b	  255,255,14,15,255,255,240,224,224,224,224,254,14,240,239,240
	dc.b	  208,255,239,14,254,14,255,254,14,224,239,255,239,224,238,14
	dc.b	  224,238,255,254,254,254,13,13,14,239,254,254,254,254,254,255
	dc.b	  208,238,254,254,254,239,254,239,254,239,238,255,238,254,254,239
	dc.b	  254,239,239,238,255,238,254,224,223,254,239,253,14,239,239,239
	dc.b	  239,254,239,254,224,208,238,255,239,254,254,255,239,255,239,239
	dc.b	  255,254,255,224,239,254,14,240,238,15,254,14,14,14,14,14
	dc.b	  15,255,255,15,224,14,14,30,15,240,255,15,240,15,240,240

	dc.b	  240,240,240,15,0,240,15,0,15,0,0,241,240,1,240,0
	dc.b	  0,31,0,31,16,0,1,0,1,0,16,1,0,16,16,16
	dc.b	  16,17,0,17,1,16,17,2,242,2,0,33,1,17,17,2
	dc.b	  2,2,2,2,2,17,2,32,18,2,17,32,33,18,17,17
	dc.b	  33,33,17,33,18,18,17,33,18,32,48,34,17,34,17,33
	dc.b	  33,33,34,3,17,34,17,48,34,18,33,18,33,33,34,17
	dc.b	  34,18,18,33,18,33,34,17,34,17,34,18,18,18,32,49
	dc.b	  18,18,18,18,18,17,34,3,3,2,18,18,17,18,32,34
	dc.b	  2,32,33,33,17,32,34,2,17,18,2,18,1,33,16,48
	dc.b	  17,32,18,2,16,32,32,32,32,17,17,17,2,1,17,16
	dc.b	  32,2,2,242,1,17,1,1,16,47,32,1,16,17,0,17
	dc.b	  1,0,17,0,16,16,16,1,1,242,241,1,0,1,0,16
	dc.b	  0,1,0,31,16,0,1,0,242,240,1,241,0,241,0,0
	dc.b	  0,0,1,240,241,0,0,241,241,240,0,0,15,31,0,15
	dc.b	  31,0,0,240,0,15,0,15,0,15,31,241,240,241,255,31
	dc.b	  15,31,241,255,31,241,255,0,15,0,240,240,15,0,240,240

	dc.b	  15,15,0,240,240,15,15,0,255,30,31,240,15,15,15,0
	dc.b	  255,0,240,240,15,240,15,15,15,15,15,15,0,255,30,0
	dc.b	  240,240,240,240,240,240,14,31,240,15,240,15,15,240,15,15
	dc.b	  15,15,15,15,15,15,0,225,255,0,255,0,255,0,240,255
	dc.b	  30,0,240,14,31,240,240,15,240,15,240,15,15,15,15,0
	dc.b	  255,15,30,0,240,240,240,240,15,240,15,15,15,15,0,255
	dc.b	  30,30,30,31,240,15,15,0,225,240,240,240,240,15,241,225
	dc.b	  255,0,240,240,15,240,0,255,0,240,240,15,241,255,0,240
	dc.b	  240,15,15,15,30,31,240,15,0,255,31,240,15,0,240,240
	dc.b	  15,0,240,240,241,255,0,240,15,15,0,15,241,255,0,15
	dc.b	  15,0,15,241,255,31,241,255,31,241,255,31,241,255,31,241
	dc.b	  240,240,0,240,15,0,240,0,240,15,0,15,15,31,15,31
	dc.b	  15,0,0,240,241,240,15,0,15,31,241,240,0,240,0,241
	dc.b	  240,241,240,0,240,0,15,31,15,31,31,15,31,31,15,16
	dc.b	  240,0,15,31,0,0,0,240,31,0,15,31,31,1,240,15
	dc.b	  16,241,15,1,240,0,0,0,0,15,16,15,16,241,15,31

	dc.b	  16,241,15,16,241,0,15,16,0,1,240,1,241,241,15,16
	dc.b	  0,31,1,241,0,0,0,31,16,0,1,241,0,0,1,15
	dc.b	  47,1,241,1,241,241,31,31,17,241,241,31,16,0,16,0
	dc.b	  31,47,1,0,16,0,16,0,16,1,241,31,17,241,1,241
	dc.b	  31,17,241,1,0,1,31,16,31,47,16,16,1,0,16,1
	dc.b	  0,16,16,1,1,242,241,31,17,0,16,1,1,1,242,241
	dc.b	  16,1,0,16,16,16,1,1,0,16,16,16,1,1,1,0
	dc.b	  16,16,16,1,1,1,0,17,242,241,16,1,1,1,0,17
	dc.b	  242,241,16,1,31,17,1,0,16,16,1,31,32,0,17,0
	dc.b	  16,16,1,1,1,0,17,242,241,31,47,47,16,16,16,1
	dc.b	  31,17,0,16,1,31,17,0,16,1,31,17,242,241,31,17
	dc.b	  0,16,1,0,16,16,1,0,16,1,1,242,241,1,0,1
	dc.b	  1,0,31,47,16,31,17,0,1,242,241,1,242,240,17,241
	dc.b	  0,16,0,16,1,241,31,16,31,16,1,0,1,241,31,16
	dc.b	  0,16,0,16,242,241,241,1,241,0,31,16,0,31,16,1
	dc.b	  241,0,0,16,241,31,1,0,0,1,241,0,0,1,15,16

	dc.b	  0,31,31,16,0,0,31,31,16,0,0,1,240,16,241,0
	dc.b	  0,0,0,31,1,241,241,15,16,0,241,0,0,0,31,0
	dc.b	  0,31,0,1,240,31,0,31,0,1,240,0,31,0,0,0
	dc.b	  0,0,241,0,15,31,31,31,31,0,31,0,0,15,16,241
	dc.b	  241,240,31,0,15,16,15,31,1,240,0,241,15,31,1,240
	dc.b	  241,0,240,31,0,0,241,241,240,0,0,241,240,0,0,15
	dc.b	  31,0,0,15,31,0,0,241,240,31,241,15,1,240,241,241
	dc.b	  240,0,241,240,0,0,240,0,0,15,0,0,15,31,0,241
	dc.b	  241,240,241,241,240,15,31,0,0,241,240,15,31,1,225,15
	dc.b	  0,0,241,240,241,15,0,15,31,0,0,240,0,15,31,0
	dc.b	  241,240,0,15,0,0,241,240,15,31,0,241,241,255,31,31
	dc.b	  15,31,0,0,240,0,0,240,0,241,240,15,31,0,0,240
	dc.b	  0,15,0,0,241,240,241,241,255,31,31,15,31,0,0,240
	dc.b	  0,15,0,0,241,240,241,241,225,15,31,241,15,0,15,1
	dc.b	  225,15,0,0,241,255,16,240,0,241,240,15,31,0,241,240
	dc.b	  0,240,31,241,240,0,15,0,0,241,240,241,240,0,15,0

	dc.b	  0,240,0,15,1,225,15,0,15,31,0,241,240,0,240,0
	dc.b	  0,240,0,241,240,15,31,0,15,1,225,15,0,0,240,0
	dc.b	  15,0,0,241,240,241,240,0,15,0,0,241,255,16,240,0
	dc.b	  241,240,15,31,0,241,240,0,240,31,241,240,0,15,1,225
	dc.b	  15,0,15,1,255,31,1,225,241,240,241,240,0,15,0,0
	dc.b	  240,0,15,31,15,31,31,241,241,240,241,240,0,15,0,0
	dc.b	  240,0,15,31,0,241,240,0,240,0,0,240,0,15,31,15
	dc.b	  31,31,241,241,240,15,31,0,241,240,0,15,0,0,241,240
	dc.b	  15,31,0,0,240,0,15,31,0,15,1,240,241,240,0,15
	dc.b	  1,225,15,31,0,241,240,0,15,31,0,241,241,240,241,241
	dc.b	  240,15,31,0,0,15,0,0,0,240,0,0,241,240,0,241
	dc.b	  241,240,241,15,1,255,16,241,240,0,15,31,0,0,15,31
	dc.b	  0,0,0,241,240,0,0,241,241,240,0,15,16,240,1,240
	dc.b	  241,15,31,1,240,0,241,15,31,0,31,0,15,16,241,241
	dc.b	  240,31,0,0,15,16,15,31,31,31,31,0,1,240,0,0
	dc.b	  0,0,15,16,0,241,0,15,16,15,16,241,0,15,16,0

	dc.b	  15,16,0,0,1,240,0,31,1,241,241,15,16,0,0,0
	dc.b	  1,240,16,241,0,0,0,31,31,16,0,0,31,31,16,0
	dc.b	  31,1,0,0,1,241,0,0,1,15,17,240,16,0,1,241
	dc.b	  0,31,16,0,31,16,1,241,1,241,242,240,16,0,16,0
	dc.b	  31,17,241,0,1,0,31,16,31,17,241,0,16,0,16,1
	dc.b	  241,16,242,241,1,242,241,0,1,31,16,31,47,16,1,1
	dc.b	  0,1,1,242,241,1,0,16,1,0,16,16,1,0,16,1
	dc.b	  31,17,242,241,31,17,0,16,1,31,17,0,16,1,31,17
	dc.b	  0,16,16,31,47,47,17,242,241,16,1,1,1,0,16,16
	dc.b	  1,16,0,47,17,0,16,16,1,1,31,17,0,17,242,241
	dc.b	  16,1,1,1,0,17,242,241,16,1,1,1,0,16,16,16
	dc.b	  1,1,1,0,16,16,16,1,1,0,16,16,16,1,0,17
	dc.b	  242,241,1,1,0,16,1,31,17,242,241,1,0,16,16,1
	dc.b	  0,16,1,0,16,31,47,16,31,17,0,1,1,241,31,17
	dc.b	  241,1,241,31,17,241,0,16,0,16,0,16,1,15,47,16
	dc.b	  0,16,0,31,17,241,241,31,31,17,241,241,1,241,15,47

	dc.b	  1,0,0,1,241,0,0,31,16,0,0,1,241,15,16,0
	dc.b	  31,1,241,241,0,241,0,0,31,0,1,240,31,1,240,31
	dc.b	  31,1,240,31,0,31,0,0,0,0,0,241,15,1,240,31
	dc.b	  0,241,15,31,31,0,15,16,240,0,0,15,31,0,0,240
	dc.b	  31,15,31,31,15,31,31,15,31,0,0,240,0,241,240,241
	dc.b	  240,0,240,0,241,255,31,0,15,0,241,240,240,0,15,15
	dc.b	  31,15,31,15,0,15,0,240,0,240,15,0,240,0,240,241
	dc.b	  255,31,241,255,31,241,255,31,241,255,31,241,255,0,15,15
	dc.b	  0,15,241,255,0,15,15,0,240,15,241,240,240,240,15,0
	dc.b	  240,240,15,0,255,31,240,15,0,255,30,31,15,15,0,240
	dc.b	  240,15,241,255,0,240,240,15,240,0,255,0,240,240,15,241
	dc.b	  225,255,0,240,240,240,241,224,15,15,0,255,30,30,30,31
	dc.b	  240,15,15,15,15,0,255,0,240,240,240,240,14,31,15,240
	dc.b	  15,15,15,15,0,255,0,255,0,240,255,30,0,240,14,31
	dc.b	  240,240,15,240,15,240,15,241,224,15,15,15,15,15,15,15
	dc.b	  15,0,255,15,0,255,0,255,30,0,240,240,240,240,240,240

	dc.b	  14,31,240,15,15,15,15,15,15,0,255,0,240,240,15,240
	dc.b	  15,15,15,0,255,30,31,240,15,15,0,240,240,15,15,0
	dc.b	  240,240,15,0,240,240,15,0,15,241,255,31,241,255,31,15
	dc.b	  31,241,240,241,255,31,0,15,0,15,0,0,240,0,15,31
	dc.b	  0,15,31,0,0,0,241,241,240,0,1,240,241,0,0,0
	dc.b	  0,1,240,1,241,0,242,240,1,0,0,31,16,1,0,0
	dc.b	  16,1,0,1,1,242,241,1,0,16,16,16,1,16,1,1
	dc.b	  16,1,16,17,0,47,32,17,1,1,17,2,242,2,0,32
	dc.b	  17,17,2,1,17,17,16,32,32,32,32,18,2,16,33,16
	dc.b	  48,17,33,2,18,2,17,18,2,32,33,17,33,32,34,2
	dc.b	  32,34,17,18,18,18,3,3,2,33,18,18,18,18,18,17
	dc.b	  48,34,18,18,18,33,18,33,18,33,34,17,34,18,18,33
	dc.b	  18,33,33,34,17,34,18,32,49,18,33,19,2,33,33,33
	dc.b	  33,18,33,18,32,48,34,17,33,18,18,17,33,17,33,33
	dc.b	  17,18,17,32,33,18,2,16,34,1,18,2,2,2,2,2
	dc.b	  1,17,17,1,32,2,2,242,1,16,17,1,16,1,16,16

	dc.b	  16,16,16,1,0,16,1,0,1,0,0,31,16,15,16,0

;fin
;
;
;
; mem lib   THIS VERSION WORK, the return

;

;; exemple d'utilisation
;	move.l #buffer,d0
;	move.l #8*65536,d1 taille totale du buffer aligné sur 64k
;	jsr getmem1
;	lea -16*4(a0),a0
;	nop
;	nop
;	nop
;	nop
;	illegal
; format de memoire
;toto			; le label toto est la pour verifier l'algo
;	ds.b 65536	
;buffer	ds.l 65536*2    8*64k				; buffer sera aligné sur 64k donc un peu avant
;fin											; et apres un peu de memoire libre entre fin buffer et label fin

getmem1:

; d0 = adresse segment 64k non aligné
; d1 = nombre de segment a la suite*64k
; retour: a0 = liste d'adresse
; (a0)+ = 32k buffer
; (a0)+ = 16k buffer
; (a0)+ = 8k buffer
; (a0)+ = 4k buffer
; (a0)+ = 2k
; (a0)+ = 1k
; (a0)+ = 512
; (a0)+ = 256
; (a0)+ = 128
; (a0)+ = 64 octet
; 
; a0: 64 octet = 16 adresses

	; metre le buffer start dans d4

	moveq.w #1,d5
	swap d5
	move.l d0,d4
	sub.l d5,d4		; start memoire basse
	move.l d0,d3
	clr.w d3		;  debut multiple de 64k  fin memoire basse
	; d3 = start segment
	
	
	move.l d4,d7
	sub.l d3,d7		; d7 = taille en bas
				; d4 = start bas
	
	add.l d1,d3		; d3+ 4*64k = adresse start haut


	
	lea ptrMem,a0
	moveq #0,d6
	move.w #$8000,d6
	move.w #$0004,d5
.loop
	move.w d6,d1
	and.w d7,d1

	; bit 15 a 0 ? 
	tst.w d1
	beq.s .before			; was beq
	move.l d3,(a0)+
	add.l d6,d3
	
	bra.s .suite
.before
	move.l d4,(a0)+
	add.l d6,d4
.suite
	lsr #1,d6
	;tst.w d6
	cmp.w d5,d6
	bne.s .loop			; ici ca s'arrete a un buffer de 16 octet
	
	lea ptrMem,a0
	move.l _tabadrptr(a0),a1
	
	move.w #11,d0
.loop2
	move.l (a0)+,(a1)+
	dbf d0,.loop2
	lea -12*4(a1),a0
						; a0 = adresse ou y'a 12 adresse et 4 long de 32k a 16 octet
						; a0 depend du buffer passé en parametre on peut donc 
						; appeler plusieur fois getMem1
						
	rts
	

; depack periodictable
; a0 = packed data
; a1 = unpacked data
depackdelta2
	lea extnibble,a2

	move.w (a0)+,d0		; nombre d'element de la table finale
	move.w (a0)+,d1		; tab[0]
	move.w (a0)+,d2		; delta[0]=tab[1]-tab[0]
	move.w d0,d3
	subq #2,d3	    ; nombre de delta de delta: delta2[0]=delta[1]-delta[0]
	lsr #1,d3
.ok
	subq #1,d3
	;bset #0,d3			; si paire = nb impair d'element on set a +1
						; si impair  nb pair d'lement on ne change rien
	move.w d1,(a1)+		; tab[0]
	
.loop
	add d2,d1			; tab[0]+delta[0]=tab[1]
	move.w d1,(a1)+
	
	move.b (a0)+,d4		 lire 2 valeur
	move.w d4,d5
	and.w #$F0,d4
	lsr #4,d4
	move.b (a2,d4.w),d4
	ext.w d4
	add d4,d2			: delta2[0]=delta[1]-delta[0]  d2= delta[1]=tab[2]-tab[1]
	
	add d2,d1
	move.w d1,(a1)+
	and.w #$F,d5
	move.b (a2,d5.w),d5
	ext.w d5
	add d5,d2

	dbf d3,.loop
	add d2,d1
	move.w d1,(a1)+
	rts
extnibble	dc.b 0,1,2,3,4,5,6,7,$F8,$f9,$fa,$fb,$fc,$fd,$fe,$ff
	even
	BSS
	
ptrMem		ds.l 16  		; dans ram apres l'appel de getmem1 adresses contenant les bloc memoire utilisable comme on veut

			rsreset
_32kptr	rs.l 1
_16kptr rs.l 1
_8kptr	rs.l 1
_4kptr	rs.l 1
_2kptr	rs.l 1
_1kptr	rs.l 1
_512ptr	rs.l 1
_256ptr	rs.l 1
_128ptr	rs.l 1
_tabadrptr  rs.l 1
_32ptr  rs.l 1
_16ptr  rs.l 1
_4long	rs.l 4

"
dm0Yh5f7,Infinite Test Build,HaoDZ,Lua,Friday 3rd of May 2024 08:48:34 PM CDT,"local function DeltaLock(inst, comp, subfn, flrfn)
    local oldfn = inst.components[comp][subfn]
    inst.components[comp][subfn] = function(first, secnd, ...)
        oldfn(first, type(secnd) == ""number"" and math.max(secnd, flrfn()) or secnd, ...)
    end
end


GLOBAL.InitInfinite = function(inst)
    if not inst then return end
    inst:AddTag(""infiniteforged"")
    local components = inst.components

    -- armors fix
    if components.armor then
        components.armor.indestructible = true
    end

    -- tools and weapons fix
    local finiteuses = components.finiteuses
    if finiteuses then
        DeltaLock(
            inst,
            ""finiteuses"",
            ""SetUses"",
            function() return finiteuses.current end
        )
    end
    if components.weapon then
        components.weapon.attackwear = 0
    end

    -- fueled equipments fix
    local fueled = components.fueled
    if fueled then
        DeltaLock(
            inst,
            ""fueled"",
            ""DoDelta"",
            function() return 0 end
        )
    end
end


AddPrefabPostInitAny(function(inst)
    if inst:HasTag(""infiniteforged"") then
        GLOBAL.InitInfinite(inst)
    end
end)"
VXFbDSpi,aStairway,NortWind,Lua,Friday 3rd of May 2024 07:37:41 PM CDT,"--{program=""aStairway"",version=""1.00"",date=""2024-05-03""}
-- Pastebin ""VXFbDSpi""
---------------------------------------
-- Turtle-automated stairway digger.
-- based on aTreeFarm by Kaikaku
-- v1.04b"", date=""2018-01-07
-- Pastebin Qn008fPa
---------------------------------------

---------------------------------------
---- PARAMETERS ----------------------- 
---------------------------------------
local cVer      =""1.00""
local cMaxFuel  = 20000
local cSleep    = 1             -- os.sleep value used to pace operation

---------------------------------------
-- BASIC FUNCTIONS FOR TURTLE CONTROL -
---------------------------------------

-- calling with no parameter moves one block forward
local function safeForward(n)
  if n == nil 
  then
    turtle.suck()
    while not turtle.forward() do os.sleep(cSleep) end  
  else 
    for i = 1, n do
      turtle.suck()
      while not turtle.forward() do os.sleep(cSleep) end    
    end
  end
end

local function safeDig()     -- digs forward
  turtle.suck()
  os.sleep(cSleep)
  turtle.dig() 
end

local function safeDigDown()
  turtle.suckDown()          -- might be a sapling or stick 
  os.sleep(cSleep) 
  turtle.digDown()           -- might not be anything to dig
end

local function safeDigUp()
  turtle.suckUp()            -- remove drek on top
  os.sleep(cSleep) 
  turtle.digUp()             -- might not be anything to dig
end

---------------------------------------
---- functions ------------------------
---------------------------------------
-- wait for enter to be pressed
local function waitEnter()
  write(""Press enter to start:"")
  read() 
end

-- check fuel in turtle, attempt to replenish if low
local function checkRefuel()  
  if turtle.getFuelLevel() < cMaxFuel * 0.8
  then
	  print(""Fuel level is low, ""..turtle.getFuelLevel()..""."")
	  craftFuel()  
  else
    print(""Fuel level ok, ""..turtle.getFuelLevel()..""."")
  end
end

---------------------------------------
-- dig a 3 wide row
---------------------------------------
local function digRow()
     -- assume facing stairway direction at start
    turtle.turnRight()
    for i = 1, 2 do
        turtle.dig()
        turtle.forward()
    end
    turtle.turnRight()
    turtle.turnRight()
    for i = 1, 2 do
        turtle.forward()
    end
    turtle.turnRight()
end

---------------------------------------
-- dig a 3 wide 4 high slice
---------------------------------------
local function digSlice()
    -- assume facing bottom left of slice
    turtle.dig()
    turtle.forward()
    turtle.digDown()
    if turtle.inspectDown()  -- might be bedrock, so stop
    then
        return false;        -- can't dig, all done
    end
    turtle.down()
    for i = 1, 4 do
        if i > 1 
        then 
            turtle.digUp()
            turtle.up() 
        end
        digRow()
    end
    for i = 1, 3 do
        turtle.down()
    end
    return true              -- slice dug
end

---------------------------------------
---- main -----------------------------
---------------------------------------
term.clear() 
term.setCursorPos(1,1)
if turtle.getFuelLevel() < cMinFuel
then
	  print(""Fuel level ""..turtle.getFuelLevel().."" is too low."") 
    print(""Use command \""refuel all\"" with 3 stacks of planks."")     -- need to add fuel
    return
end

print(""+-------------------------------------+"")
print(""| aStairway ""..cVer.."", by NortWind        |"")
print(""+-------------------------------------+"")
print(""| Digging a stairway:                 |"")
print(""|   Mining turtle sits facing the     |"")
print(""|   first step into the ground        |"")
print(""+-------------------------------------+"")
waitEnter()  
while digSlice()
do
  os.sleep(cSleep)
end

"
Wz57tP9h,LookAtComponent2D,Nancok,GDScript,Friday 3rd of May 2024 07:26:33 PM CDT,"extends ComponentNode
class_name Node2DComponentLookAtPoint

@export var enabled:bool = true:
	set(val):
		enabled = val
		set_physics_process(enabled)

@export_range(0,1) var turnFactor:float = 0.8

@export var defaultRotation:Vector2 = Vector2.RIGHT

## Keep in mind that as the body rotates, the point does as well.
## Use global_position to ignore this.
var point:Vector2

func _is_node_valid_parent(node:Node)->bool:
	return node is Node2D
	
func _parent_update():
	if targetNode is Node2D:
		enabled = enabled
	else:
		enabled = false

#New funcs
func _physics_process(_delta: float) -> void:
	var targetAngle:float = point.angle() - defaultRotation.angle()
	targetNode.rotation = lerp_angle(targetNode.rotation, targetAngle, turnFactor)
	
"
cdHurbNt,2024-05-03_stats.json,rdp_snitch,JSON,Friday 3rd of May 2024 07:17:56 PM CDT,"{
  ""ip"": {
    ""193.23.127.60"": 9,
    ""58.218.204.183"": 9,
    ""185.161.248.121"": 24,
    ""187.190.60.112"": 3,
    ""198.235.24.233"": 9,
    ""87.251.75.145"": 3,
    ""45.227.254.26"": 6,
    ""123.56.20.194"": 15,
    ""194.165.16.37"": 18,
    ""137.184.3.0"": 6,
    ""167.248.133.113"": 3,
    ""185.170.144.3"": 6,
    ""194.165.16.76"": 6,
    ""64.124.50.139"": 6,
    ""88.214.25.19"": 6,
    ""205.210.31.196"": 9,
    ""71.6.167.142"": 3,
    ""118.193.56.149"": 3,
    ""195.181.174.229"": 3,
    ""36.91.222.100"": 6,
    ""167.94.146.62"": 3,
    ""92.53.65.200"": 3,
    ""104.234.181.59"": 18,
    ""116.140.196.215"": 3,
    ""188.166.218.68"": 3,
    ""112.4.139.162"": 3,
    ""84.201.2.2"": 12,
    ""198.235.24.59"": 9,
    ""209.145.58.218"": 6,
    ""87.251.75.64"": 3,
    ""142.4.218.114"": 3,
    ""81.19.135.47"": 9,
    ""213.32.39.42"": 3,
    ""103.232.53.123"": 9,
    ""162.142.125.10"": 3,
    ""45.227.254.8"": 6,
    ""205.210.31.224"": 9
  },
  ""asn"": {
    ""AS30823"": 9,
    ""AS4134"": 9,
    ""AS49202"": 24,
    ""AS22884"": 3,
    ""AS396982"": 36,
    ""AS208091"": 6,
    ""AS267784"": 12,
    ""AS37963"": 15,
    ""AS48721"": 24,
    ""AS14061"": 9,
    ""AS398324"": 6,
    ""AS197414"": 6,
    ""AS6461"": 6,
    ""AS29551"": 6,
    ""AS10439"": 3,
    ""AS135377"": 3,
    ""AS60068"": 3,
    ""AS7713"": 6,
    ""AS398705"": 3,
    ""AS49505"": 3,
    ""AS136359"": 18,
    ""AS4837"": 3,
    ""AS56046"": 3,
    ""AS44066"": 12,
    ""AS40021"": 6,
    ""AS16276"": 6,
    ""AS209588"": 9,
    ""AS63737"": 9
  },
  ""isp"": {
    ""aurologic GmbH"": 9,
    ""Chinanet"": 9,
    ""Kisara LLC"": 24,
    ""Total Play Telecomunicaciones SA De CV"": 3,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 12,
    ""Flyservers S.A."": 45,
    ""Hangzhou Alibaba Advertising Co"": 15,
    ""DigitalOcean, LLC"": 9,
    ""Censys, Inc."": 9,
    ""Zayo Bandwidth"": 6,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""CariNet, Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""DataCamp Limited"": 3,
    ""PT Telekomunikasi Indonesia"": 6,
    ""OOO \""Network of data-centers \""Selectel\"""": 3,
    ""Hansin It Services Pvt. Ltd."": 18,
    ""China Unicom CHINA169 Network"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""www.accelerated.de"": 12,
    ""Nubes, LLC"": 6,
    ""OVH SAS"": 6,
    ""VIETSERVER"": 9
  },
  ""org"": {
    ""ZAP-Hosting Holding GmbH"": 9,
    ""Chinanet JS"": 9,
    ""Kisara LLC"": 24,
    ""Total Play Telecomunicaciones SA De CV"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 6,
    ""UAB Host Baltic"": 12,
    ""Aliyun Computing Co., LTD"": 15,
    ""Flyservers S.A"": 24,
    ""DigitalOcean, LLC"": 6,
    ""Censys, Inc."": 6,
    ""Xhostis"": 6,
    ""Microsoft Corporation"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""CariNet, Inc."": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""CDN77 - Frankfurt POP"": 3,
    ""Telekomunikasi Indonesia"": 6,
    ""Selectel Ltd."": 3,
    ""IPXO"": 18,
    ""China United Network Communications Corporation Limited"": 3,
    ""Digitalocean"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""diva-e Datacenters GmbH"": 12,
    ""Contabo Inc"": 6,
    ""OVH Hosting, Inc."": 3,
    ""Alviva Holding Limited"": 9,
    ""ONYPHE"": 3,
    ""VietServer Services technology company limited"": 9,
    ""Censys Inc"": 3
  },
  ""regionName"": {
    ""Hesse"": 42,
    ""Jiangsu"": 12,
    ""Moscow"": 27,
    ""Hidalgo"": 3,
    ""California"": 45,
    ""North Holland"": 12,
    ""Vilnius"": 12,
    ""Beijing"": 18,
    ""Kaunas"": 24,
    ""Michigan"": 6,
    ""Virginia"": 6,
    ""Bangkok"": 3,
    ""Jakarta"": 6,
    ""National Capital Territory of Delhi"": 18,
    ""South West"": 3,
    ""Missouri"": 6,
    ""Quebec"": 3,
    ""Hauts-de-France"": 3,
    ""Hanoi"": 9
  },
  ""country"": {
    ""Germany"": 42,
    ""China"": 30,
    ""Russia"": 27,
    ""Mexico"": 3,
    ""United States"": 63,
    ""The Netherlands"": 12,
    ""Lithuania"": 36,
    ""Thailand"": 3,
    ""Indonesia"": 6,
    ""India"": 18,
    ""Singapore"": 3,
    ""Canada"": 3,
    ""France"": 3,
    ""Vietnam"": 9
  },
  ""account"": {
    ""hello"": 69,
    ""Test"": 81,
    ""VtCSeEr"": 3,
    ""TaeNFPgiI"": 3,
    ""HweYxf"": 3,
    ""wjocWn"": 3,
    ""Administr"": 18,
    ""(empty)"": 18,
    ""AlHuaBfSN"": 3,
    ""JViLPs"": 3,
    ""dAUpIC"": 3,
    ""root"": 3,
    ""Administrator"": 9,
    ""Domain"": 21,
    ""VBOQXSarS"": 3,
    ""VsocaK"": 3,
    ""scCkDh"": 3,
    ""NjzYPkULm"": 3,
    ""JMGxJh"": 3,
    ""vnyQsW"": 3
  },
  ""keyboard"": {
    ""Unknown"": 258
  },
  ""client_build"": {
    ""Unknown"": 258
  },
  ""client_name"": {
    ""Unknown"": 258
  },
  ""ip_type"": {
    ""Unknown"": 150,
    ""proxy"": 9,
    ""hosting"": 93,
    ""hosting & proxy"": 3,
    ""mobile"": 3
  }
}"
MKA1C9uX,2024-05-03_stats.json,rdp_snitch,JSON,Friday 3rd of May 2024 07:16:04 PM CDT,"{
  ""ip"": {
    ""193.23.127.60"": 6,
    ""58.218.204.183"": 6,
    ""185.161.248.121"": 16,
    ""187.190.60.112"": 2,
    ""198.235.24.233"": 6,
    ""87.251.75.145"": 2,
    ""45.227.254.26"": 4,
    ""123.56.20.194"": 10,
    ""194.165.16.37"": 12,
    ""137.184.3.0"": 4,
    ""167.248.133.113"": 2,
    ""185.170.144.3"": 4,
    ""194.165.16.76"": 4,
    ""64.124.50.139"": 4,
    ""88.214.25.19"": 4,
    ""205.210.31.196"": 6,
    ""71.6.167.142"": 2,
    ""118.193.56.149"": 2,
    ""195.181.174.229"": 2,
    ""36.91.222.100"": 4,
    ""167.94.146.62"": 2,
    ""92.53.65.200"": 2,
    ""104.234.181.59"": 12,
    ""116.140.196.215"": 2,
    ""188.166.218.68"": 2,
    ""112.4.139.162"": 2,
    ""84.201.2.2"": 8,
    ""198.235.24.59"": 6,
    ""209.145.58.218"": 4,
    ""87.251.75.64"": 2,
    ""142.4.218.114"": 2,
    ""81.19.135.47"": 6,
    ""213.32.39.42"": 2,
    ""103.232.53.123"": 6,
    ""162.142.125.10"": 2,
    ""45.227.254.8"": 4,
    ""205.210.31.224"": 6
  },
  ""asn"": {
    ""AS30823"": 6,
    ""AS4134"": 6,
    ""AS49202"": 16,
    ""AS22884"": 2,
    ""AS396982"": 24,
    ""AS208091"": 4,
    ""AS267784"": 8,
    ""AS37963"": 10,
    ""AS48721"": 16,
    ""AS14061"": 6,
    ""AS398324"": 4,
    ""AS197414"": 4,
    ""AS6461"": 4,
    ""AS29551"": 4,
    ""AS10439"": 2,
    ""AS135377"": 2,
    ""AS60068"": 2,
    ""AS7713"": 4,
    ""AS398705"": 2,
    ""AS49505"": 2,
    ""AS136359"": 12,
    ""AS4837"": 2,
    ""AS56046"": 2,
    ""AS44066"": 8,
    ""AS40021"": 4,
    ""AS16276"": 4,
    ""AS209588"": 6,
    ""AS63737"": 6
  },
  ""isp"": {
    ""aurologic GmbH"": 6,
    ""Chinanet"": 6,
    ""Kisara LLC"": 16,
    ""Total Play Telecomunicaciones SA De CV"": 2,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 8,
    ""Flyservers S.A."": 30,
    ""Hangzhou Alibaba Advertising Co"": 10,
    ""DigitalOcean, LLC"": 6,
    ""Censys, Inc."": 6,
    ""Zayo Bandwidth"": 4,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""CariNet, Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""DataCamp Limited"": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""OOO \""Network of data-centers \""Selectel\"""": 2,
    ""Hansin It Services Pvt. Ltd."": 12,
    ""China Unicom CHINA169 Network"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""www.accelerated.de"": 8,
    ""Nubes, LLC"": 4,
    ""OVH SAS"": 4,
    ""VIETSERVER"": 6
  },
  ""org"": {
    ""ZAP-Hosting Holding GmbH"": 6,
    ""Chinanet JS"": 6,
    ""Kisara LLC"": 16,
    ""Total Play Telecomunicaciones SA De CV"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 4,
    ""UAB Host Baltic"": 8,
    ""Aliyun Computing Co., LTD"": 10,
    ""Flyservers S.A"": 16,
    ""DigitalOcean, LLC"": 4,
    ""Censys, Inc."": 4,
    ""Xhostis"": 4,
    ""Microsoft Corporation"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""CariNet, Inc."": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""CDN77 - Frankfurt POP"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Selectel Ltd."": 2,
    ""IPXO"": 12,
    ""China United Network Communications Corporation Limited"": 2,
    ""Digitalocean"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""diva-e Datacenters GmbH"": 8,
    ""Contabo Inc"": 4,
    ""OVH Hosting, Inc."": 2,
    ""Alviva Holding Limited"": 6,
    ""ONYPHE"": 2,
    ""VietServer Services technology company limited"": 6,
    ""Censys Inc"": 2
  },
  ""regionName"": {
    ""Hesse"": 28,
    ""Jiangsu"": 8,
    ""Moscow"": 18,
    ""Hidalgo"": 2,
    ""California"": 30,
    ""North Holland"": 8,
    ""Vilnius"": 8,
    ""Beijing"": 12,
    ""Kaunas"": 16,
    ""Michigan"": 4,
    ""Virginia"": 4,
    ""Bangkok"": 2,
    ""Jakarta"": 4,
    ""National Capital Territory of Delhi"": 12,
    ""South West"": 2,
    ""Missouri"": 4,
    ""Quebec"": 2,
    ""Hauts-de-France"": 2,
    ""Hanoi"": 6
  },
  ""country"": {
    ""Germany"": 28,
    ""China"": 20,
    ""Russia"": 18,
    ""Mexico"": 2,
    ""United States"": 42,
    ""The Netherlands"": 8,
    ""Lithuania"": 24,
    ""Thailand"": 2,
    ""Indonesia"": 4,
    ""India"": 12,
    ""Singapore"": 2,
    ""Canada"": 2,
    ""France"": 2,
    ""Vietnam"": 6
  },
  ""account"": {
    ""hello"": 46,
    ""Test"": 54,
    ""VtCSeEr"": 2,
    ""TaeNFPgiI"": 2,
    ""HweYxf"": 2,
    ""wjocWn"": 2,
    ""Administr"": 12,
    ""(empty)"": 12,
    ""AlHuaBfSN"": 2,
    ""JViLPs"": 2,
    ""dAUpIC"": 2,
    ""root"": 2,
    ""Administrator"": 6,
    ""Domain"": 14,
    ""VBOQXSarS"": 2,
    ""VsocaK"": 2,
    ""scCkDh"": 2,
    ""NjzYPkULm"": 2,
    ""JMGxJh"": 2,
    ""vnyQsW"": 2
  },
  ""keyboard"": {
    ""Unknown"": 172
  },
  ""client_build"": {
    ""Unknown"": 172
  },
  ""client_name"": {
    ""Unknown"": 172
  },
  ""ip_type"": {
    ""Unknown"": 100,
    ""proxy"": 6,
    ""hosting"": 62,
    ""hosting & proxy"": 2,
    ""mobile"": 2
  }
}"
j95pJQ7F,2024-05-03_stats.json,rdp_snitch,JSON,Friday 3rd of May 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""193.23.127.60"": 3,
    ""58.218.204.183"": 3,
    ""185.161.248.121"": 8,
    ""187.190.60.112"": 1,
    ""198.235.24.233"": 3,
    ""87.251.75.145"": 1,
    ""45.227.254.26"": 2,
    ""123.56.20.194"": 5,
    ""194.165.16.37"": 6,
    ""137.184.3.0"": 2,
    ""167.248.133.113"": 1,
    ""185.170.144.3"": 2,
    ""194.165.16.76"": 2,
    ""64.124.50.139"": 2,
    ""88.214.25.19"": 2,
    ""205.210.31.196"": 3,
    ""71.6.167.142"": 1,
    ""118.193.56.149"": 1,
    ""195.181.174.229"": 1,
    ""36.91.222.100"": 2,
    ""167.94.146.62"": 1,
    ""92.53.65.200"": 1,
    ""104.234.181.59"": 6,
    ""116.140.196.215"": 1,
    ""188.166.218.68"": 1,
    ""112.4.139.162"": 1,
    ""84.201.2.2"": 4,
    ""198.235.24.59"": 3,
    ""209.145.58.218"": 2,
    ""87.251.75.64"": 1,
    ""142.4.218.114"": 1,
    ""81.19.135.47"": 3,
    ""213.32.39.42"": 1,
    ""103.232.53.123"": 3,
    ""162.142.125.10"": 1,
    ""45.227.254.8"": 2,
    ""205.210.31.224"": 3
  },
  ""asn"": {
    ""AS30823"": 3,
    ""AS4134"": 3,
    ""AS49202"": 8,
    ""AS22884"": 1,
    ""AS396982"": 12,
    ""AS208091"": 2,
    ""AS267784"": 4,
    ""AS37963"": 5,
    ""AS48721"": 8,
    ""AS14061"": 3,
    ""AS398324"": 2,
    ""AS197414"": 2,
    ""AS6461"": 2,
    ""AS29551"": 2,
    ""AS10439"": 1,
    ""AS135377"": 1,
    ""AS60068"": 1,
    ""AS7713"": 2,
    ""AS398705"": 1,
    ""AS49505"": 1,
    ""AS136359"": 6,
    ""AS4837"": 1,
    ""AS56046"": 1,
    ""AS44066"": 4,
    ""AS40021"": 2,
    ""AS16276"": 2,
    ""AS209588"": 3,
    ""AS63737"": 3
  },
  ""isp"": {
    ""aurologic GmbH"": 3,
    ""Chinanet"": 3,
    ""Kisara LLC"": 8,
    ""Total Play Telecomunicaciones SA De CV"": 1,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 4,
    ""Flyservers S.A."": 15,
    ""Hangzhou Alibaba Advertising Co"": 5,
    ""DigitalOcean, LLC"": 3,
    ""Censys, Inc."": 3,
    ""Zayo Bandwidth"": 2,
    ""NOC EMAIL: noc@one-host.net"": 2,
    ""CariNet, Inc."": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""DataCamp Limited"": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""OOO \""Network of data-centers \""Selectel\"""": 1,
    ""Hansin It Services Pvt. Ltd."": 6,
    ""China Unicom CHINA169 Network"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""www.accelerated.de"": 4,
    ""Nubes, LLC"": 2,
    ""OVH SAS"": 2,
    ""VIETSERVER"": 3
  },
  ""org"": {
    ""ZAP-Hosting Holding GmbH"": 3,
    ""Chinanet JS"": 3,
    ""Kisara LLC"": 8,
    ""Total Play Telecomunicaciones SA De CV"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 2,
    ""UAB Host Baltic"": 4,
    ""Aliyun Computing Co., LTD"": 5,
    ""Flyservers S.A"": 8,
    ""DigitalOcean, LLC"": 2,
    ""Censys, Inc."": 2,
    ""Xhostis"": 2,
    ""Microsoft Corporation"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""CariNet, Inc."": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""CDN77 - Frankfurt POP"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Selectel Ltd."": 1,
    ""IPXO"": 6,
    ""China United Network Communications Corporation Limited"": 1,
    ""Digitalocean"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""diva-e Datacenters GmbH"": 4,
    ""Contabo Inc"": 2,
    ""OVH Hosting, Inc."": 1,
    ""Alviva Holding Limited"": 3,
    ""ONYPHE"": 1,
    ""VietServer Services technology company limited"": 3,
    ""Censys Inc"": 1
  },
  ""regionName"": {
    ""Hesse"": 14,
    ""Jiangsu"": 4,
    ""Moscow"": 9,
    ""Hidalgo"": 1,
    ""California"": 15,
    ""North Holland"": 4,
    ""Vilnius"": 4,
    ""Beijing"": 6,
    ""Kaunas"": 8,
    ""Michigan"": 2,
    ""Virginia"": 2,
    ""Bangkok"": 1,
    ""Jakarta"": 2,
    ""National Capital Territory of Delhi"": 6,
    ""South West"": 1,
    ""Missouri"": 2,
    ""Quebec"": 1,
    ""Hauts-de-France"": 1,
    ""Hanoi"": 3
  },
  ""country"": {
    ""Germany"": 14,
    ""China"": 10,
    ""Russia"": 9,
    ""Mexico"": 1,
    ""United States"": 21,
    ""The Netherlands"": 4,
    ""Lithuania"": 12,
    ""Thailand"": 1,
    ""Indonesia"": 2,
    ""India"": 6,
    ""Singapore"": 1,
    ""Canada"": 1,
    ""France"": 1,
    ""Vietnam"": 3
  },
  ""account"": {
    ""hello"": 23,
    ""Test"": 27,
    ""VtCSeEr"": 1,
    ""TaeNFPgiI"": 1,
    ""HweYxf"": 1,
    ""wjocWn"": 1,
    ""Administr"": 6,
    ""(empty)"": 6,
    ""AlHuaBfSN"": 1,
    ""JViLPs"": 1,
    ""dAUpIC"": 1,
    ""root"": 1,
    ""Administrator"": 3,
    ""Domain"": 7,
    ""VBOQXSarS"": 1,
    ""VsocaK"": 1,
    ""scCkDh"": 1,
    ""NjzYPkULm"": 1,
    ""JMGxJh"": 1,
    ""vnyQsW"": 1
  },
  ""keyboard"": {
    ""Unknown"": 86
  },
  ""client_build"": {
    ""Unknown"": 86
  },
  ""client_name"": {
    ""Unknown"": 86
  },
  ""ip_type"": {
    ""Unknown"": 50,
    ""proxy"": 3,
    ""hosting"": 31,
    ""hosting & proxy"": 1,
    ""mobile"": 1
  }
}"
c53Ytbkt,Escalada Online,chuchenko,JSON,Friday 3rd of May 2024 06:58:31 PM CDT,"[
    {
        ""nombre"": ""coto"",
        ""instagram"": """",
        ""facebook"": """",
        ""tiktok"": """",
        ""web"": ""https://www.cotodigital3.com.ar/sitios/cdigi/"",
        ""dias"": ""lunes, martes, miercoles, jueves, viernes, sabado, domingo"",
        ""horarioApertura1"": 8,
        ""horarioCierre1"": 21,
        ""horarioApertura2"": 0,
        ""horarioCierre2"": 0,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6174,
        ""telefono"": ""42483271"",
        ""whatsapp"": false,
        ""tarjetaCredito"": true,
        ""tarjetaDebito"": true,
        ""mercadoPago"": true,
        ""cuentaDni"": false,
        ""logo"": ""https://upload.wikimedia.org/wikipedia/commons/a/a5/Logo_Supermercado_Coto.svg"",
        ""categoria"": ""supermercado""
    },
    {
        ""nombre"": ""la nueva mocona"",
        ""instagram"": """",
        ""facebook"": """",
        ""tiktok"": """",
        ""web"": """",
        ""dias"": ""lunes, martes, miercoles, jueves, viernes, sabado"",
        ""horarioApertura1"": 8,
        ""horarioCierre1"": 19,
        ""horarioApertura2"": 0,
        ""horarioCierre2"": 0,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6099,
        ""telefono"": ""42423710"",
        ""whatsapp"": false,
        ""tarjetaCredito"": true,
        ""tarjetaDebito"": true,
        ""mercadoPago"": true,
        ""cuentaDni"": false,
        ""logo"": """",
        ""categoria"": ""cafeteria""
    },
    {
        ""nombre"": ""rugge-mar"",
        ""instagram"": ""https://www.instagram.com/ruggemar/"",
        ""facebook"": ""https://m.facebook.com/RuggeMar"",
        ""tiktok"": """",
        ""web"": """",
        ""dias"": ""martes, miercoles, jueves, viernes, sabado"",
        ""horarioApertura1"": 7,
        ""horarioCierre1"": 14,
        ""horarioApertura2"": 16,
        ""horarioCierre2"": 20,
        ""direccionCalle"": ""coronel beltran"",
        ""direccionAltura"": 8,
        ""telefono"": ""1150507779"",
        ""whatsapp"": true,
        ""tarjetaCredito"": false,
        ""tarjetaDebito"": true,
        ""mercadoPago"": true,
        ""cuentaDni"": false,
        ""logo"": ""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSx1ajIE0bQ3Tyg0_Pnm5oMR0BLTxp1Y4xiUEp2xEf-yg&s"",
        ""categoria"": ""pescaderia""
    },
    {
        ""nombre"": ""negro el 8"",
        ""instagram"": """",
        ""facebook"": """",
        ""tiktok"": """",
        ""web"": """",
        ""dias"": ""desconocido"",
        ""horarioApertura1"": 0,
        ""horarioCierre1"": 0,
        ""horarioApertura2"": 0,
        ""horarioCierre2"": 0,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6113,
        ""telefono"": """",
        ""whatsapp"": false,
        ""tarjetaCredito"": false,
        ""tarjetaDebito"": false,
        ""mercadoPago"": false,
        ""cuentaDni"": false,
        ""logo"": """",
        ""categoria"": ""agencia de loteria""
    },
    {
        ""nombre"": ""diet store"",
        ""instagram"": ""https://www.instagram.com/diet_store/?hl=es-la"",
        ""facebook"": ""https://m.facebook.com/people/DIET-STORE/100054517266867/"",
        ""tiktok"": """",
        ""web"": """",
        ""dias"": ""lunes, martes, miercoles, jueves, viernes, sabado"",
        ""horarioApertura1"": 10,
        ""horarioCierre1"": 14,
        ""horarioApertura2"": 17,
        ""horarioCierre2"": 20,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6115,
        ""telefono"": ""1137738315"",
        ""whatsapp"": true,
        ""tarjetaCredito"": true,
        ""tarjetaDebito"": true,
        ""mercadoPago"": true,
        ""cuentaDni"": false,
        ""logo"": """",
        ""categoria"": ""almacen""
    },
    {
        ""nombre"": ""eduardo gandolfo"",
        ""instagram"": ""https://www.instagram.com/gandolfopropiedades/?hl=es"",
        ""facebook"": """",
        ""tiktok"": """",
        ""web"": ""https://m.eduardogandolfo.com/"",
        ""dias"": ""lunes, martes, miercoles, jueves, viernes"",
        ""horarioApertura1"": 10,
        ""horarioCierre1"": 17,
        ""horarioApertura2"": 0,
        ""horarioCierre2"": 0,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6117,
        ""telefono"": ""1132671834"",
        ""whatsapp"": true,
        ""tarjetaCredito"": false,
        ""tarjetaDebito"": false,
        ""mercadoPago"": false,
        ""cuentaDni"": false,
        ""logo"": ""https://static.tokkobroker.com/tfw_images/487_Eduardo%20Gandolfo%20Negocios%20Inmobiliarios/logo.png"",
        ""categoria"": ""inmobiliaria""
    },
    {
        ""nombre"": ""correo argentino"",
        ""instagram"": """",
        ""facebook"": """",
        ""tiktok"": """",
        ""web"": ""https://www.correoargentino.com.ar/"",
        ""dias"": ""lunes, martes, miercoles, jueves, viernes"",
        ""horarioApertura1"": 11,
        ""horarioCierre1"": 18,
        ""horarioApertura2"": 0,
        ""horarioCierre2"": 0,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6133,
        ""telefono"": ""42024575"",
        ""whatsapp"": false,
        ""tarjetaCredito"": false,
        ""tarjetaDebito"": false,
        ""mercadoPago"": false,
        ""cuentaDni"": false,
        ""logo"": ""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTSiH3aeOHswt55mo-QXjMjaHGvNuyno3DecvJBBJBJMw&s"",
        ""categoria"": ""correo""
    },
    {
        ""nombre"": ""?"",
        ""instagram"": """",
        ""facebook"": """",
        ""tiktok"": """",
        ""web"": """",
        ""dias"": ""desconocido"",
        ""horarioApertura1"": 0,
        ""horarioCierre1"": 0,
        ""horarioApertura2"": 0,
        ""horarioCierre2"": 0,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6165,
        ""telefono"": """",
        ""whatsapp"": false,
        ""tarjetaCredito"": false,
        ""tarjetaDebito"": false,
        ""mercadoPago"": true,
        ""cuentaDni"": false,
        ""logo"": """",
        ""categoria"": ""kiosco""
    },
    {
        ""nombre"": ""griddo"",
        ""instagram"": ""https://www.instagram.com/grido.rem.escalada/?hl=es"",
        ""facebook"": """",
        ""tiktok"": """",
        ""web"": ""https://argentina.gridohelado.com/locales/"",
        ""dias"": ""lunes, martes, miercoles, jueves, viernes, sabado, domingo"",
        ""horarioApertura1"": 10,
        ""horarioCierre1"": 24,
        ""horarioApertura2"": 0,
        ""horarioCierre2"": 1,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6167,
        ""telefono"": ""1169977197"",
        ""whatsapp"": true,
        ""tarjetaCredito"": true,
        ""tarjetaDebito"": true,
        ""mercadoPago"": true,
        ""cuentaDni"": false,
        ""logo"": ""https://infonegocios.info/content/images/2022/07/20/11912/conversions/logo-grido-1800x453-medium-size.jpg"",
        ""categoria"": ""heladeria""
    },
    {
        ""nombre"": ""vet company"",
        ""instagram"": ""https://www.instagram.com/vetcompanyarg/?hl=es-la"",
        ""facebook"": """",
        ""tiktok"": """",
        ""web"": """",
        ""dias"": ""lunes, martes, miercoles, jueves, viernes, sabado"",
        ""horarioApertura1"": 10,
        ""horarioCierre1"": 20,
        ""horarioApertura2"": 0,
        ""horarioCierre2"": 0,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6185,
        ""telefono"": ""42489111"",
        ""whatsapp"": false,
        ""tarjetaCredito"": true,
        ""tarjetaDebito"": true,
        ""mercadoPago"": true,
        ""cuentaDni"": false,
        ""logo"": ""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSEAgDw-6Co7eosRbAfZr6xkNoYrZ0pTyOWSgEegIp4fg&s"",
        ""categoria"": ""petshop, veterinaria""
    },
    {
        ""nombre"": ""la primavera"",
        ""instagram"": ""https://www.instagram.com/ferreterialaprimavera/?hl=es-la"",
        ""facebook"": ""https://www.facebook.com/ferreterialaprimaveraa/"",
        ""tiktok"": """",
        ""web"": """",
        ""dias"": ""lunes, martes, miercoles, jueves, viernes, sabado, domingo"",
        ""horarioApertura1"": 8,
        ""horarioCierre1"": 19,
        ""horarioApertura2"": 0,
        ""horarioCierre2"": 0,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6187,
        ""telefono"": ""42026483"",
        ""whatsapp"": false,
        ""tarjetaCredito"": true,
        ""tarjetaDebito"": true,
        ""mercadoPago"": true,
        ""cuentaDni"": false,
        ""logo"": ""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS2ladzu1a4FE24Tt37umz3kPfVyLajOLIogzxYYqYemQ&s"",
        ""categoria"": ""ferreteria""
    },
    {
        ""nombre"": ""la flor de gerli"",
        ""instagram"": """",
        ""facebook"": """",
        ""tiktok"": """",
        ""web"": """",
        ""dias"": ""lunes, martes, miercoles, jueves, viernes, sabado, domingo"",
        ""horarioApertura1"": 8,
        ""horarioCierre1"": 22,
        ""horarioApertura2"": 0,
        ""horarioCierre2"": 0,
        ""direccionCalle"": ""av. hipolito yrigoyen"",
        ""direccionAltura"": 6199,
        ""telefono"": ""1131618875"",
        ""whatsapp"": true,
        ""tarjetaCredito"": true,
        ""tarjetaDebito"": true,
        ""mercadoPago"": true,
        ""cuentaDni"": false,
        ""logo"": ""https://images.rappi.com.ar/restaurants_logo/huuh-1688217187171.png"",
        ""categoria"": ""panaderia, pizzeria""
    }
]"
pS3CNDhY,sentencepiece_tokenizer_trainer,Python253,Python,Friday 3rd of May 2024 06:39:19 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: sentencepiece_tokenizer_trainer.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script trains a SentencePiece tokenizer model based on provided or user-selected text data.
It offers options to use sample text data provided within the script or to select a custom text file.
The trained model is saved with the prefix 'tokenizer', and vocabulary files are generated accordingly.

Requirements:

    - Python 3.x
    - sentencepiece library
    - tkinter

Functions:

    - use_sample_text(): Generates sample text data and saves it to a file.
    - use_custom_text(): Allows the user to choose a custom text file using a file dialog.
    - main(): Provides options to choose sample or custom text, trains the model & generates vocabulary files.

Usage:

    1. Run the script using Python 3.x interpreter.
    2. Choose an option to use sample text data or select a custom text file.
    3. The script will train a SentencePiece tokenizer model based on the chosen text data.
    4. Tokenization model and vocabulary files will be generated with the prefix 'tokenizer'.

Additional Notes:

    - The SentencePiece tokenizer model is trained with adjusted parameters such as vocabulary size and character coverage.
    - It's recommended to use diverse text sources for training to capture a wide range of linguistic nuances.
    - Ensure that the sentencepiece library is installed in the Python environment before running the script.
    - This script provides a convenient way to train a tokenizer model for text preprocessing tasks.
""""""

import os
import sentencepiece as spm
from tkinter import Tk, filedialog

def use_sample_text():
    # Sample text data
    text_data = """"""
    Welcome to the sample text corpus! This corpus is designed to showcase the capabilities of the tokenizer model. It consists of several sentences carefully crafted to cover a wide range of linguistic patterns and vocabulary.
    In this corpus, you'll find sentences of varying lengths and complexities. Some sentences are short and simple, while others are longer and more intricate. This diversity helps the tokenizer model learn to handle different types of text inputs effectively.
    The purpose of this sample text is to provide a starting point for training the tokenizer model. However, it's essential to note that real-world text data will vary significantly from this example. Therefore, it's highly recommended to replace this sample text with your own data for more accurate and relevant model training.
    When replacing this sample text with your own data, consider using a diverse set of text sources. Include text from different domains, genres, and languages to ensure that the tokenizer model captures a wide range of linguistic nuances.
    Remember, the quality of the tokenizer model depends largely on the quality and diversity of the training data. So, take your time to gather and curate a comprehensive dataset that reflects the text inputs your model will encounter in real-world applications.
    Thank you for using this sample text corpus. We wish you the best of luck in training your tokenizer model!
    """"""
    with open(""text_data.txt"", ""w"", encoding=""utf-8"") as f:
        f.write(text_data)

    return ""text_data.txt""

# Function to open the file explorer to select a custom text file to use
def use_custom_text():
    root = Tk()
    root.withdraw()
    file_path = filedialog.askopenfilename(filetypes=[(""Text files"", ""*.txt"")])
    return file_path

def main():
    print(""Menu Options:\n"")
    print(""1. Use sample text data"")
    print(""2. Choose a custom text file"")
    choice = input(""\nEnter your choice (1 or 2): "")

    if choice == ""1"":
        print(""\n\t\tTraining with sample data...\n"")
        text_file_path = use_sample_text()
    elif choice == ""2"":
        print(""\n\t\tTraining with custom data...\n"")
        text_file_path = use_custom_text()
    else:
        print(""\n\t\tInvalid choice. Please enter '1' or '2'.\n"")
        return

    if not text_file_path:
        print(""\n\t\tNo text file selected. Exiting...\n"")
        return

    # Train SentencePiece model with adjusted parameters
    spm.SentencePieceTrainer.train(
        input=text_file_path,      # Use the selected text data file as input
        model_prefix=""tokenizer"",  # Set the prefix for model and vocabulary files
        vocab_size=189,            # Edit the vocabulary size to accommodate all required characters
        character_coverage=0.9995, # Keep the character coverage as specified
        num_threads=16,            # Use 16 threads for training
    )

    # Load the trained model
    tokenizer = spm.SentencePieceProcessor()
    tokenizer.load(""tokenizer.model"")

    # Print the vocabulary size
    print(
        f""\n\t\tTRAINING COMPLETE!\n\t\t--------------------------------------\n\t\tVocabulary size: {tokenizer.vocab_size()}""
    )

    # Generate vocabulary file
    with open(""vocab.txt"", ""w"", encoding=""utf-8"") as vocab_file:
        for vocab_id in range(tokenizer.vocab_size()):
            vocab_file.write(f""{vocab_id:>30} {tokenizer.id_to_piece(vocab_id)}"")

    print(""\t\t--------------------------------------\n\t\tFiles Created:\n"")
    print(f""\t\t- tokenizer.model\n\t\tPath: {os.path.abspath('tokenizer.model')}\n"")
    print(f""\t\t- tokenizer.vocab\n\t\tPath: {os.path.abspath('tokenizer.vocab')}\n"")
    print(
        f""\t\t- vocab.txt\n\t\tPath: {os.path.abspath('vocab.txt')}\n\t\t--------------------------------------""
    )
    print(
        ""\t\tExiting program...\tGoodBye!\n\t\t--------------------------------------""
    )

if __name__ == ""__main__"":
    main()

"
dTuD5CMv,Pastebin.ai - #1 pastebin alternative,xxsa,PHP,Friday 3rd of May 2024 06:34:11 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..............
......................."
KiTTbX77,How to autoplay in html,Xnuvers007,HTML,Friday 3rd of May 2024 06:11:51 PM CDT,"Ada 4 caranya untuk bisa audio autoplay

1. <audio autoplay>
  <source src=""nama-file-audio.mp3"" type=""audio/mpeg"">
  Peramban Anda tidak mendukung elemen audio.
</audio>

2. <embed src=""nama-file-audio.mp3"" autostart=""true"" loop=""true"" hidden=""true"">


3. <iframe src=""nama-file-audio.mp3"" allow=""autoplay"" style=""display:none;""></iframe>

4. <audio autoplay src=""nama-file.mp3"">
</audio>"
J0hUpxjn,sparql_wikidata_label_query,Python253,Python,Friday 3rd of May 2024 05:38:10 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: sparql_wikidata_label_query.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script retrieves labels from Wikidata using SPARQL query and presents them in a tabular format.

Requirements:
- Python 3.x
- requests library (install via `pip install requests`)
- tabulate library (install via `pip install tabulate`)

Functions:
- None

Usage:
1. Run the script using Python 3.x interpreter.
2. The script will retrieve labels for the item Q100924304 from Wikidata.
3. It will print the labels in a tabular format.

Additional Notes:
- The script uses SPARQL query to retrieve data from Wikidata, so an internet connection is required.
- It relies on the requests library to make HTTP requests to the Wikidata Query Service endpoint.
- The tabulate library is used to format the output in a tabular form for better readability.
- It's recommended to run the script in an environment with Python 3.x installed along with the required dependencies.
""""""

import requests
from tabulate import tabulate

# SPARQL query to retrieve the labels using the property ""transliteration or transcription (P2440)""
query = """"""
SELECT DISTINCT ?label
WHERE {
  wd:Q100924304 p:P2440 ?statement.
  ?statement ps:P2440 ?label.
  BIND(LANG(?label) AS ?lang)
}
""""""

response = requests.get(
    ""https://query.wikidata.org/sparql"",
    params={""query"": query, ""format"": ""json""},
    headers={""Accept"": ""application/sparql-results+json""},
)

response_json = response.json()
results = response_json[""results""][""bindings""]

# Concatenate label data properly
labels = ["""".join(result[""label""][""value""].split()) for result in results]

# Print all retrieved labels
print(tabulate([(label,) for label in labels], headers=[""Label""]))

"
GQMqaaJJ,outline_mrmak,BojanNovakovic,Kotlin,Friday 3rd of May 2024 05:10:08 PM CDT,"package ui.commonUi

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.basicMarquee
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.padding
import androidx.compose.material.IconButton
import androidx.compose.material.OutlinedTextField
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.bojan.moveset.MR
import dev.icerock.moko.resources.compose.colorResource
import dev.icerock.moko.resources.compose.painterResource
import dev.icerock.moko.resources.compose.stringResource

@OptIn(ExperimentalFoundationApi::class)
@Composable
fun MovesetOutlineTextField(
    value: String,
    onValueChange: (String) -> Unit,
    onClear: () -> Unit,
    modifier: Modifier = Modifier,
    enabled: Boolean = true,
    label: String? = null,
    placeholder: String? = null,
    errorText: String? = null
) {
    Column {
        OutlinedTextField(
            value = value,
            onValueChange = onValueChange,
            singleLine = true,
            label = { label?.let { Text(it) } },
            enabled = enabled,
            readOnly = !enabled,
            placeholder = { placeholder?.let { Text(it) } },
            modifier = modifier,
            textStyle = TextStyle(color = colorResource(MR.colors.font_on_surface_color)),
            trailingIcon = {
                if (enabled) {
                    val trailingIconEnabled = value.isNotEmpty() && enabled
                    InputCloseIcon(onClick = onClear, trailingIconEnabled)
                }
            },
            isError = !errorText.isNullOrEmpty()
        )
         val errorString = errorText ?: """"

        Text(
            text = errorString,
            style = TextStyle(color = colorResource(MR.colors.alert_text_on_surface_color)),
            fontSize = 14.sp,
            maxLines = 1,
            modifier = Modifier.basicMarquee(delayMillis = 0, initialDelayMillis = 1200)
        )

    }
}

@Composable
private fun InputCloseIcon(onClick: () -> Unit, enabled: Boolean) {
    val resource = if (enabled) MR.colors.secondary_button_content_color else MR.colors.disabled_element_tint
    IconButton(onClick = onClick, enabled = enabled) {
        Image(
            painter = painterResource(MR.images.close_image),
            contentDescription = stringResource(MR.strings.close),
            colorFilter = ColorFilter.tint(colorResource(resource))
        )
    }
}

@Composable
fun NoItemsText() {
    Text(stringResource(MR.strings.no_items), textAlign = TextAlign.Center, modifier = Modifier.padding(16.dp))
}"
mwCWeAEY,S.T.U.P.I.D.,nauseant,Lua,Friday 3rd of May 2024 04:03:27 PM CDT,"function updateProgram(pastebinCode, programFile, isLua)
    local response = http.get(""https://pastebin.com/raw/"" .. pastebinCode)
    if isLua == ""lua"" then
        programFile = programFile .. "".lua""
    end
    if response then
      local programCode = response.readAll()
      response.close()
      local file = fs.open(programFile, ""w"")
      file.write(programCode)
      file.close()
      print(""Program updated successfully!"")
    else
      print(""Failed to update program."")
    end
  end
  
  -- Main program
  local args = {...}
  local isLua = args[3]
  local programToUpdate = args[1]
  local pastebinCode = args[2]
  
  print(""Note: to update a program ending in .lua please add the extra argument 'lua' when using this program"")
  print(""otherwise there will be a new program NOT ending in .lua"")
  os.sleep(1)
  print(""Example: update example.lua AbCd1234 lua"")
  os.sleep(2)
  print(""Updating "" .. programToUpdate .. ""..."")
  
  updateProgram(pastebinCode, programToUpdate, isLua)"
7L8ev7pe,tabulate_wikidata_demo,Python253,Python,Friday 3rd of May 2024 03:30:19 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: tabulate_wikidata_demo.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script demonstrates how to query the Wikidata endpoint for a given item ID and display the labels in tabular form using the tabulate library.

Requirements:
- Python 3.x
- requests library: to send HTTP requests to the Wikidata endpoint
- tabulate library: to format data into a table
- types-tabulate: library stubs for static type checking with tabulate

Functions:
1. query_wikidata_and_display_table(item_id='Q100924304'):
    Queries the Wikidata endpoint for the specified item ID (default: Q100924304).
    Retrieves the labels in various languages associated with the item and displays them in tabular form.
    Also adds an additional label ""Jeoi"" in English to demonstrate tabulate formatting.

Usage:
1. Ensure that Python 3.x is installed on your system.
2. Install the required libraries using pip:
    ```
    pip install requests tabulate types-tabulate
    ```
3. Run the script using the following command:
    ```
    python tabulate_wikidata_demo.py
    ```

Additional Notes:
- This script makes use of the Wikidata Query Service (https://query.wikidata.org/) to fetch data.
- The item ID used for demonstration purposes is ""Jeoi"" (Q100924304), which represents a Chinese given name.
- The tabulate library is employed to format the retrieved data into a table for better visualization.
- Demo messages are printed throughout the script to indicate the progress and execution steps.

Expected Output Data:
The script will display a table containing the labels associated with the item ""Jeoi"" in various languages, along with an additional label ""Jeoi"" in English.
""""""

import requests
from tabulate import tabulate

# Function to print divider lines
def line():
    print(""-"" * 60)


def print_demo(message):
    """"""Prints a message with DEMO prefix.""""""
    line()
    print(""\n[DEMO] "" + message)
    # line()
    print()


def query_wikidata_and_display_table(item_id=""Q100924304""):
    """"""Queries the Wikidata endpoint for a given item ID and displays the result in tabular form.""""""
    print_demo(""Starting the demo script..."")
    print_demo(""Demo: Wikidata"")
    print_demo(f""Querying Wikidata endpoint for item ID: ({item_id})"")
    print_demo(""Displaying table..."")
    query = f""""""
    SELECT
      (lang(?label) AS ?lang)
       ?label
    {{
       wd:{item_id}  rdfs:label ?label .
    }}
    """"""
    response = requests.get(
        ""https://query.wikidata.org/sparql"",
        params={""query"": query},
        headers={""Accept"": ""application/sparql-results+json""},
    )
    if response.status_code != 200:
        print_demo(f""Failed to query Wikidata. Status code: {response.status_code}"")
        return

    response_json = response.json()
    if ""results"" not in response_json or ""bindings"" not in response_json[""results""]:
        print_demo(""Failed to parse Wikidata response."")
        return

    results = response_json[""results""][""bindings""]

    # Extracting labels and languages from the response
    table_data = [
        (result[""lang""][""value""], result[""label""][""value""]) for result in results
    ]

    # Adding the Chinese given name 'Jeoi' as a label in Spanish
    for lang in [""es""]:
        table_data.append((lang, ""Jeoi""))

    print(tabulate(table_data, headers=[""Language"", ""Label""]))


if __name__ == ""__main__"":
    query_wikidata_and_display_table()
    line()
    print(""Demo script completed!"")
    line()

"
iQrruQ1g,Código Aula 4,Ultizin,C++,Friday 3rd of May 2024 03:28:21 PM CDT,"void setup() {
  
    pinMode(11, OUTPUT);
    Serial.begin(9600);
  
}

void loop() {
  
   for (int i = 0; i <= 255; i++) {
       analogWrite(11, i);
       Serial.println(i, DEC);
       delay(100);
     
	}

   for (int i = 255; i >= 0; i--) {
       analogWrite(11, i);
       Serial.println(i, DEC);
       delay(100);
     
   	}
}
"
TJvJ0LkV,AI Generated Class 01,MeckeOfficial,Python,Friday 3rd of May 2024 03:14:38 PM CDT,"'''Certainly! I'll do my best to assist you with your query.

To start, it sounds like you're looking to create a class called path with four private attributes: identifier, length, source, and destination. You'd also like to create a second class called node with a single attribute called destinations, which is a list of integers referring to other nodes.

Additionally, you'd like to randomly generate a list of nodes and paths, and then find the shortest path between two specified nodes using the destination attribute. Is that correct?

If so, here's some sample code to get you started:'''


import random

class path:
    def __init__(self, identifier, length, source, destination):
        self.identifier = identifier
        self.length = length
        self.source = source
        self.destination = destination

    def __repr__(self):
        return f""Path({self.identifier}, {self.length}, {self.source}, {self.destination})""

class node:
    def __init__(self, destinations):
        self.destinations = destinations

    def __repr__(self):
        return f""Node({self.destinations})""

# Generate a list of nodes
nodes = [node([1, 2, 3, 4]) for _ in range(10)]

# Generate a list of paths
paths = []
for node in nodes:
    path = path(random.randint(1, 10), node.destinations.index(random.choice(node.destinations)))
    paths.append(path)

# Find the shortest path between two nodes
def find_shortest_path(node1, node2):
    shortest_path = None
    total_length = 0
    for path in paths:
        if path.destination == node1 and path.source == node2:
            total_length += path.length
            if shortest_path is None or total_length < shortest_path.length:
                shortest_path = path
    return shortest_path

# Example usage
print(find_shortest_path(nodes[0], nodes[4]))

'''
This code generates a list of nodes and paths, and then finds the shortest path between two specified nodes using the destination attribute. The find_shortest_path function takes two nodes as input and returns the shortest path between them, using the length attribute to determine the distance between nodes.

I hope this helps! Let me know if you have any questions or if you'd like to see any modifications to the code.'''"
cPFCiTF6,HWM - parse castle buildings,goodwin64,JavaScript,Friday 3rd of May 2024 03:05:17 PM CDT,"const names = [...$$('#all_buildings_list .castle_build_div_outside .castle_build_name_inside')].map(
  (el) => el.innerText
);

const levelsForGold = [...$$('#all_buildings_list .castle_build_div_outside')]
  .map((el) =>
    el.querySelector(
      '.castle_cost .castle_cost_line:not(:has( img[src*=""diamonds""] )) .castle_amount_icon:has(img[src*=""attr_level""])'
    )
  )
  .map((el) => el?.innerText || '')
  .map((str) => str.replaceAll(',', ''))
  .map(Number);

const levelsForDiamonds = [...$$('#all_buildings_list .castle_build_div_outside')]
  .map((el) =>
    el.querySelector(
      '.castle_cost .castle_cost_line:has( img[src*=""diamonds""] ) .castle_amount_icon:has(img[src*=""attr_level""])'
    )
  )
  .map((el) => el?.innerText || '')
  .map((str) => str.replaceAll(',', ''))
  .map(Number);

const costsGold = [...$$('#all_buildings_list .castle_build_div_outside')]
  .map((el) => el.querySelector('.castle_cost .castle_amount_icon:has(img[src*=""gold""])'))
  .map((el) => el?.innerText || '')
  .map((str) => str.replaceAll(',', ''))
  .map(Number);

const costsOre = [...$$('#all_buildings_list .castle_build_div_outside')]
  .map((el) => el.querySelector('.castle_cost .castle_amount_icon:has(img[src*=""ore""])'))
  .map((el) => el?.innerText || '')
  .map((str) => str.replaceAll(',', ''))
  .map(Number);

const costsWood = [...$$('#all_buildings_list .castle_build_div_outside')]
  .map((el) => el.querySelector('.castle_cost .castle_amount_icon:has(img[src*=""wood""])'))
  .map((el) => el?.innerText || '')
  .map((str) => str.replaceAll(',', ''))
  .map(Number);

const costsMercury = [...$$('#all_buildings_list .castle_build_div_outside')]
  .map((el) => el.querySelector('.castle_cost .castle_amount_icon:has(img[src*=""mercury""])'))
  .map((el) => el?.innerText || '')
  .map((str) => str.replaceAll(',', ''))
  .map(Number);

const costsSulfur = [...$$('#all_buildings_list .castle_build_div_outside')]
  .map((el) => el.querySelector('.castle_cost .castle_amount_icon:has(img[src*=""sulfur""])'))
  .map((el) => el?.innerText || '')
  .map((str) => str.replaceAll(',', ''))
  .map(Number);

const costsCrystals = [...$$('#all_buildings_list .castle_build_div_outside')]
  .map((el) => el.querySelector('.castle_cost .castle_amount_icon:has(img[src*=""crystals""])'))
  .map((el) => el?.innerText || '')
  .map((str) => str.replaceAll(',', ''))
  .map(Number);

const costsGems = [...$$('#all_buildings_list .castle_build_div_outside')]
  .map((el) => el.querySelector('.castle_cost .castle_amount_icon:has(img[src*=""gems""])'))
  .map((el) => el?.innerText || '')
  .map((str) => str.replaceAll(',', ''))
  .map(Number);

const costsDiamonds = [...$$('#all_buildings_list .castle_build_div_outside')]
  .map((el) => el.querySelector('.castle_cost .castle_amount_icon:has(img[src*=""diamonds""])'))
  .map((el) => el?.innerText || '')
  .map((str) => str.replaceAll(',', ''))
  .map(Number);

const buildings = names.map((name, i) => {
  const result = {
    name,
    purchaseForGoldAndResources: {
      priceGold: costsGold[i],
      minRequiredLevelForGold: levelsForGold[i],
    },
    race: 'KNIGHT',
  };

  if (costsWood[i] || costsOre[i] || costsMercury[i] || costsSulfur[i] || costsCrystals[i] || costsGems[i]) {
    result.purchaseForGoldAndResources.priceResources = {};
    if (costsWood[i]) result.purchaseForGoldAndResources.priceResources.WOOD = costsWood[i];
    if (costsOre[i]) result.purchaseForGoldAndResources.priceResources.ORE = costsOre[i];
    if (costsMercury[i]) result.purchaseForGoldAndResources.priceResources.MERCURY = costsMercury[i];
    if (costsSulfur[i]) result.purchaseForGoldAndResources.priceResources.SULFUR = costsSulfur[i];
    if (costsCrystals[i]) result.purchaseForGoldAndResources.priceResources.CRYSTAL = costsCrystals[i];
    if (costsGems[i]) result.purchaseForGoldAndResources.priceResources.GEMS = costsGems[i];
  }

  if (costsDiamonds[i]) {
    result.purchaseForDiamonds = {
      priceDiamonds: costsDiamonds[i],
      minRequiredLevelForDiamonds: levelsForDiamonds[i],
    };
  }

  return result;
});"
Hw8qCs4R,Untitled,Mahmoud20013011,Lua,Friday 3rd of May 2024 02:52:54 PM CDT,"
function main()
harith = gg.prompt({
    [2] = ""🚘✏️اكتب رقم السيارة الي بدك تجيبها✏️🚘 =[0;151]"",
    [3] = ""╚🏡رجوع🏡╝"",
    
    }, {

    [2] = ""0"",
   [3] = false,

   
    }, {

    [2] = ""number"",
    [3]  = ""checkbox"",


    
    },nil,""⚒مطور السكربت Mamo_mahmoud🛠"")
    if harith == nil then
    gg.toast(""⚒مطور السكربت Mamo_mahmoud🛠"") else
     if harith[3] then HOME() end
    if harith[2] == ""0"" then a3() end
   if harith[2] == ""1"" then C1() end
  if harith[2] == ""2"" then C2() end
    if harith[2] == ""3"" then C3() end
    if harith[2] == ""4"" then C4() end
    if harith[2] == ""5"" then C5() end
    if harith[2] == ""6"" then C6() end
   if harith[2] == ""7"" then C7() end
  if harith[2] == ""8"" then C8() end
    if harith[2] == ""9"" then C9() end
    if harith[2] == ""10"" then C10() end
    if harith[2] == ""11"" then C11() end
    if harith[2] == ""12"" then C12() end
   if harith[2] == ""13"" then C13() end
  if harith[2] == ""14"" then C14() end
    if harith[2] == ""15"" then C15() end
    if harith[2] == ""16"" then C16() end
    if harith[2] == ""17"" then C17() end
    if harith[2] == ""18"" then C18() end
    if harith[2] == ""19"" then C19() end
  if harith[2] == ""20"" then C20() end
    if harith[2] == ""21"" then C21() end
    if harith[2] == ""22"" then C22() end
    if harith[2] == ""23"" then C23() end
    if harith[2] == ""24"" then C24() end
 if harith[2] == ""25"" then C25() end
  if harith[2] == ""26"" then C26() end
    if harith[2] == ""27"" then C27() end
    if harith[2] == ""28"" then C28() end
    if harith[2] == ""29"" then C29() end
    if harith[2] == ""30"" then C30() end
    if harith[2] == ""31"" then C31() end
  if harith[2] == ""32"" then C32() end
    if harith[2] == ""33"" then C33() end
    if harith[2] == ""34"" then C34() end
    if harith[2] == ""35"" then C35() end
    if harith[2] == ""36"" then C36() end
   if harith[2] == ""37"" then C37() end
  if harith[2] == ""38"" then C38() end
    if harith[2] == ""39"" then C39() end
    if harith[2] == ""40"" then C40() end
    if harith[2] == ""41"" then C41() end
    if harith[2] == ""42"" then C42() end
  if harith[2] == ""43"" then C43() end
    if harith[2] == ""44"" then C44() end
    if harith[2] == ""45"" then C45() end
    if harith[2] == ""46"" then C46() end
    if harith[2] == ""47"" then C47() end
 if harith[2] == ""48"" then C48() end
  if harith[2] == ""49"" then C49() end
    if harith[2] == ""50"" then C50() end
    if harith[2] == ""51"" then C51() end
    if harith[2] == ""52"" then C52() end
    if harith[2] == ""53"" then C53() end
    if harith[2] == ""54"" then C54() end
  if harith[2] == ""55"" then C55() end
    if harith[2] == ""56"" then C56() end
    if harith[2] == ""57"" then C57() end
    if harith[2] == ""58"" then C58() end
    if harith[2] == ""59"" then C59() end
   if harith[2] == ""60"" then C60() end
  if harith[2] == ""61"" then C61() end
    if harith[2] == ""62"" then C62() end
    if harith[2] == ""63"" then C63() end
    if harith[2] == ""64"" then C64() end
    if harith[2] == ""65"" then C65() end
    if harith[2] == ""66"" then C66() end
  if harith[2] == ""67"" then C67() end
    if harith[2] == ""68"" then C68() end
    if harith[2] == ""69"" then C69() end
    if harith[2] == ""70"" then C70() end
    if harith[2] == ""71"" then C71() end
 if harith[2] == ""72"" then C72() end
  if harith[2] == ""73"" then C73() end
    if harith[2] == ""74"" then C74() end
    if harith[2] == ""75"" then C75() end
    if harith[2] == ""76"" then C76() end
    if harith[2] == ""77"" then C77() end
    if harith[2] == ""78"" then C78() end
  if harith[2] == ""79"" then C79() end
    if harith[2] == ""80"" then C80() end
    if harith[2] == ""81"" then C81() end
    if harith[2] == ""82"" then C82() end
    if harith[2] == ""83"" then C83() end
   if harith[2] == ""84"" then C84() end
  if harith[2] == ""85"" then C85() end
    if harith[2] == ""86"" then C86() end
    if harith[2] == ""87""  then C87() end
    if harith[2] == ""88"" then C88() end
    if harith[2] == ""89"" then C89() end
    if harith[2] == ""90"" then C90() end
  if harith[2] == ""91"" then C91() end
    if harith[2] == ""92"" then C92() end
    if harith[2] == ""93"" then C93() end
    if harith[2] == ""94"" then C94() end
    if harith[2] == ""95"" then C95() end
     if harith[2] == ""96"" then C96() end
  if harith[2] == ""97"" then C97() end
    if harith[2] == ""98"" then C98() end
    if harith[2] == ""99"" then C99() end
    if harith[2] == ""100"" then C100() end
    if harith[2] == ""101"" then C101() end
    if harith[2] == ""102"" then C102() end
  if harith[2] == ""103"" then C103() end
    if harith[2] == ""104"" then C104() end
    if harith[2] == ""105"" then C105() end
    if harith[2] == ""106"" then C106() end
    if harith[2] == ""107"" then C107() end
   if harith[2] == ""108"" then C108() end
  if harith[2] == ""109"" then C109() end
    if harith[2] == ""110"" then C110() end
    if harith[2] == ""111"" then C111() end
    if harith[2] == ""112"" then C112() end
    if harith[2] == ""113"" then C113() end
    if harith[2] == ""114"" then C114() end
  if harith[2] == ""115"" then C115() end
    if harith[2] == ""116"" then C116() end
    if harith[2] == ""117"" then C117() end
    if harith[2] == ""118"" then C118() end
    if harith[2] == ""119"" then C119() end
     if harith[2] == ""120"" then C120() end
  if harith[2] == ""121"" then C121() end
    if harith[2] == ""122"" then C122() end
    if harith[2] == ""123"" then C123() end
    if harith[2] == ""124"" then C124() end
    if harith[2] == ""125"" then C125() end
    if harith[2] == ""126"" then C126() end
  if harith[2] == ""127"" then C127() end
    if harith[2] == ""128"" then C128() end
    if harith[2] == ""129"" then C129() end
    if harith[2] == ""130"" then C130() end
    if harith[2] == ""131"" then C131() end
   if harith[2] == ""132"" then C132() end
  if harith[2] == ""133"" then C133() end
    if harith[2] == ""134"" then C134() end
    if harith[2] == ""135"" then C135() end
    if harith[2] == ""136"" then C136() end
    if harith[2] == ""137"" then C137() end
    if harith[2] == ""138"" then C138() end
  if harith[2] == ""139"" then C139() end
    if harith[2] == ""140"" then C140() end
    if harith[2] == ""141"" then C141() end
    if harith[2] == ""142"" then C142() end
    if harith[2] == ""143"" then C143() end
     if harith[2] == ""144"" then C144() end
  if harith[2] == ""145"" then C145() end
    if harith[2] == ""146"" then C146() end
    if harith[2] == ""147"" then C147() end
    if harith[2] == ""148"" then C148() end
    if harith[2] == ""149"" then C149() end
    if harith[2] == ""150"" then C150() end
  if harith[2] == ""151"" then C151() end
    end
    Qjctx=-1
    end  
    function a3()
if revert ~= nil then gg.setValues(revert) end
end



function C1()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,89)
gg.toast(""🚘تم التفعيل🚘"")
end

function C2()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,307)
gg.toast(""🚘تم التفعيل🚘"")
end

function C3()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,306)
gg.toast(""🚘تم التفعيل🚘"")
end

function C4()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,19)
gg.toast(""🚘تم التفعيل🚘"")
end

function C5()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,83)
gg.toast(""🚘تم التفعيل🚘"")
end

function C6()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,153)
gg.toast(""🚘تم التفعيل🚘"")
end
function C7()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,256)
gg.toast(""🚘تم التفعيل🚘"")
end
function C8()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,258)
gg.toast(""🚘تم التفعيل🚘"")
end
function C9()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,55)
gg.toast(""🚘تم التفعيل🚘"")
end

function C10()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,33)
gg.toast(""🚘تم التفعيل🚘"")
end

function C11()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,72)
gg.toast(""🚘تم التفعيل🚘"")
end
function C12()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,119)
gg.toast(""🚘تم التفعيل🚘"")
end
function C13()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,116)
gg.toast(""🚘تم التفعيل🚘"")
end
function C14()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,2)
gg.toast(""🚘تم التفعيل🚘"")
end
function C15()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,35)
gg.toast(""🚘تم التفعيل🚘"")
end
function C16()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,81)
gg.toast(""🚘تم التفعيل🚘"")
end
function C17()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,355)
gg.toast(""🚘تم التفعيل🚘"")
end
function C18()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,390)
gg.toast(""🚘تم التفعيل🚘"")
end
function C19()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,344)
gg.toast(""🚘تم التفعيل🚘"")
end
function C20()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,85)
gg.toast(""🚘تم التفعيل🚘"")
end
function C21()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,57)
gg.toast(""🚘تم التفعيل🚘"")
end
function C22()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,385)
gg.toast(""🚘تم التفعيل🚘"")
end
function C23()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,406)
gg.toast(""🚘تم التفعيل🚘"")
end

function C24()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,352)
gg.toast(""🚘تم التفعيل🚘"")
end

function C25()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,71)
gg.toast(""🚘تم التفعيل🚘"")
end
function C26()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,20)
gg.toast(""🚘تم التفعيل🚘"")
end
function C27()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,102)
gg.toast(""🚘تم التفعيل🚘"")
end

function C28()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,1)
gg.toast(""🚘تم التفعيل🚘"")
end
function C29()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,262)
gg.toast(""🚘تم التفعيل🚘"")
end
function C30()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,118)
gg.toast(""🚘تم التفعيل🚘"")
end
function C31()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,0)
gg.toast(""🚘تم التفعيل🚘"")
end
function C32()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,67)
gg.toast(""🚘تم التفعيل🚘"")
end
function C33()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,338)
gg.toast(""🚘تم التفعيل🚘"")
end
function C34()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,264)
gg.toast(""🚘تم التفعيل🚘"")
end
function C35()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,130)
gg.toast(""🚘تم التفعيل🚘"")
end
function C36()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,129)
gg.toast(""🚘تم التفعيل🚘"")
end
function C37()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,326)
gg.toast(""🚘تم التفعيل🚘"")
end
function C38()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,327)
gg.toast(""🚘تم التفعيل🚘"")
end
function C39()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,328)
gg.toast(""🚘تم التفعيل🚘"")
end
function C40()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,329)
gg.toast(""🚘تم التفعيل🚘"")
end
function C41()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,73)
gg.toast(""🚘تم التفعيل🚘"")
end
function C42()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,274)
gg.toast(""🚘تم التفعيل🚘"")
end
function C43()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,41)
gg.toast(""🚘تم التفعيل🚘"")
end
function C44()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,32)
gg.toast(""🚘تم التفعيل🚘"")
end
function C45()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,136)
gg.toast(""🚘تم التفعيل🚘"")
end
function C46()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,311)
gg.toast(""🚘تم التفعيل🚘"")
end
function C47()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,313)
gg.toast(""🚘تم التفعيل🚘"")
end
function C48()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,374)
gg.toast(""🚘تم التفعيل🚘"")
end
function C49()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,384)
gg.toast(""🚘تم التفعيل🚘"")
end
function C50()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,377)
gg.toast(""🚘تم التفعيل🚘"")
end
function C51()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,389)
gg.toast(""🚘تم التفعيل🚘"")
end
function C52()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,84)
gg.toast(""🚘تم التفعيل🚘"")
end
function C53()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,96)
gg.toast(""🚘تم التفعيل🚘"")
end
function C54()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,133)
gg.toast(""🚘تم التفعيل🚘"")
end
function C55()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,69)
gg.toast(""🚘تم التفعيل🚘"")
end
function C56()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,6)
gg.toast(""🚘تم التفعيل🚘"")
end
function C57()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,87)
gg.toast(""🚘تم التفعيل🚘"")
end
function C58()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,48)
gg.toast(""🚘تم التفعيل🚘"")
end
function C59()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,86)
gg.toast(""🚘تم التفعيل🚘"")
end
function C60()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,325)
gg.toast(""🚘تم التفعيل🚘"")
end
function C61()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""342"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C62()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""17"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C63()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""296"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C64()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""375"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C65()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""297"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C66()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""305"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C67()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""320"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C68()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""391"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C69()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""388"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C70()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""308"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C71()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""137"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C72()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""18"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C73()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""9"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C74()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""49"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C75()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""288"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C76()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""4"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C77()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""8"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C78()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""98"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end

function C79()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""23"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C80()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""373"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C81()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""343"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C82()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""275"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C83()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""134"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C84()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""360"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C85()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""5"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C86()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""295"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C87()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""279"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C88()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""21"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C89()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""53"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C90()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""3"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C91()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""40"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C92()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""337"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C93()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""272"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C94()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""135"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C95()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""259"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C96()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""25"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C97()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""36"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C98()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""278"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C99()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,289)
gg.toast(""🚘تم التفعيل🚘"")
end
function C100()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,291)
gg.toast(""🚘تم التفعيل🚘"")
end
function C101()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,88)
gg.toast(""🚘تم التفعيل🚘"")
end
function C102()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,34)
gg.toast(""🚘تم التفعيل🚘"")
end
function C103()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,265)
gg.toast(""🚘تم التفعيل🚘"")
end
function C104()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,312)
gg.toast(""🚘تم التفعيل🚘"")
end
function C103()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,304)
gg.toast(""🚘تم التفعيل🚘"")
end
function C104()
function setvalue(address,flags,value) local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value gg.setValues(tt) end 
-------------------------------CHEATERS_OP----------------------------------------------------------------------------------------------

gg.setVisible(false)
so=gg.getRangesList('libil2cpp.so')[1].start
py=0x5A68EF4
setvalue(so+py,4,112)
gg.toast(""🚘تم التفعيل🚘"")
end
function C105()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""368"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C106()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""369"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C107()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""257"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C108()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""7"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C109()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""280"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C110()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""101"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C111()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""309"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C112()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""336"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C113()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""339"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C114()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""260"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C115()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""276"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C116()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""261"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C117()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""340"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C118()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""294"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C119()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""97"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C120()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""263"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C121()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""273"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C122()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""24"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C123()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""64"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C124()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""358"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C125()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""321"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C126()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""20"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C127()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""392"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C128()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""310"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C129()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""277"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C130()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""16"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C131()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""370"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C132()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""293"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C33()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""66"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C134()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""292"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C135()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""322"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C136()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""361"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C137()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""353"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C138()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""323"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C139()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""324"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C140()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""356"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C141()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""65"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C142()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""354"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C143()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""68"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C144()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""345"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C145()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""39"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C146()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""376"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C147()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""50"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C148()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""341"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C149()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""357"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end
function C150()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""386"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")

end
function C151()
gg.setRanges(gg.REGION_CODE_APP)

gg.clearResults()
gg.searchNumber(""232830643;89;-2139062144:501"", gg.TYPE_DWORD, false, gg.SIGN_EQUAL, 0, -1, 0)
revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
gg.editAll(""387"", gg.TYPE_DWORD)
gg.alert(""🚗هسا روح يمين ارجع يسار اشتريها🚗"")
end


   while(true)
do
  if gg.isVisible(true) then
    Qjctx=1
    gg.setVisible(false) 
  end 
  gg.clearResults()
  if Qjctx==1 then   main() end
end   
"
6t5az9VA,ServerError: received 500 HTTP response,basedcount_bot,Python,Friday 3rd of May 2024 02:46:47 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 123, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 322, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status](response)
asyncprawcore.exceptions.ServerError: received 500 HTTP response
"
dBZrij0x,annoy_the_vectors,Python253,Python,Friday 3rd of May 2024 02:43:33 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: annoy_the_vectors.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script demonstrates the usage of the Annoy library for vector search.

Vector search is a common task in machine learning and information retrieval, where the goal is to find similar vectors in a large dataset efficiently.
Annoy is a library designed for approximate nearest neighbor search, which can be useful for tasks such as recommendation systems, clustering, and data exploration.

Functions:

1. Generating Random Vectors:
   - It generates a specified number of random vectors, each representing a point in a high-dimensional space.
     These vectors serve as the dataset for the nearest neighbor search.

2. Combining and Shuffling Vectors:
   - It combines the generated vectors with additional ""needle"" vectors, which act as query points for the nearest neighbor search.
   - After combining, it shuffles the vectors to ensure randomness and remove any ordering bias.

3. Creating Annoy Index:
   - It creates an Annoy index, a data structure optimized for efficient nearest neighbor search in high-dimensional spaces.
   - Annoy indexes are built using a configurable number of trees, which partition the vector space to speed up the search process.

4. Adding Vectors to the Index:
   - It adds the generated vectors to the Annoy index, enabling fast lookup of nearest neighbors for any given query vector.

5. Building the Index:
   - It builds the Annoy index, which involves finalizing the data structure and making it ready for search operations.

6. Executing Query and Retrieving Nearest Neighbors:
   - It executes a query using a sample vector and retrieves the nearest neighbors from the Annoy index.
   - The nearest neighbors are returned along with their indices and distances from the query vector.

Requirements:
- Python 3.x: The script is written in Python 3 and requires a compatible interpreter.
- NumPy: NumPy is used for generating random vectors and handling numerical operations efficiently.
- Annoy: Annoy library is required for creating and using the Annoy index for nearest neighbor search.

Usage:
1. Ensure you have Python 3.x installed on your system.

2. Install NumPy and Annoy libraries using pip:
   pip install numpy annoy
   
3. Run the script using Python 3.x interpreter.

Expected Output Example:
- The script provides detailed output during the execution, including the number of vectors generated, the process of creating the Annoy index, and the results of the nearest neighbor search.

    Generating 3000000 vectors...
    Combining and shuffling vectors...
    Number of generated vectors: 3000000
    Creating Annoy index...
    Adding 3000000 vectors to the index...
    Building the index...
    Executing the query...
    Query Vector: [0.5 0.5 0.5]
    Nearest Neighbors Indices:
        - [2744143, 2798537, 1748512, 2073859, 1004853, 1099524, 1132982, 1368920, 797050, 892618]
    Nearest Neighbors Distances:
        - [0.00034156814217567444, 0.0008897104999050498, 0.0009991193655878305, 0.0010703052394092083, 0.001080756657756865, 0.001241203281097114, 0.0013004967477172613, 0.001486903172917664, 0.0015034251846373081, 0.0015795603394508362]

    Nearest Neighbors:
    - Neighbor: [0.4998232  0.49986833 0.49973908] Distance: 0.00034156814217567444
    - Neighbor: [0.5008271  0.50022185 0.4997585 ] Distance: 0.0008897104999050498
    - Neighbor: [0.5008262  0.4999582  0.49943972] Distance: 0.0009991193655878305
    - Neighbor: [0.49939016 0.49921262 0.49960798] Distance: 0.0010703052394092083
    - Neighbor: [0.5006552  0.49915966 0.5001806 ] Distance: 0.001080756657756865
    - Neighbor: [0.50122076 0.4999057  0.50020355] Distance: 0.001241203281097114
    - Neighbor: [0.4987392  0.49969807 0.4998973 ] Distance: 0.0013004967477172613
    - Neighbor: [0.5011176  0.49953958 0.49913403] Distance: 0.001486903172917664
    - Neighbor: [0.4997517  0.5014215  0.49957818] Distance: 0.0015034251846373081
    - Neighbor: [0.5008414  0.50001013 0.49866322] Distance: 0.0015795603394508362

Note:
- By running this script, users can gain insights into how Annoy can be utilized for efficient vector search tasks and understand its potential applications in real-world scenarios.
""""""

import numpy as np
from annoy import AnnoyIndex

# Step 1: Creating Vectors
num_vectors_total = 3000000
num_needles = 10000

num_vectors_per_set = (num_vectors_total - num_needles) // 3

print(f""Generating {num_vectors_total} vectors..."")
v1 = np.random.normal(loc=[1, 0, 0], scale=[0.01, 0.01, 0.01], size=(num_vectors_per_set, 3)).astype(np.float32)
v2 = np.random.normal(loc=[0, 1, 0], scale=[0.01, 0.01, 0.01], size=(num_vectors_per_set, 3)).astype(np.float32)
v3 = np.random.normal(loc=[0, 0, 1], scale=[0.01, 0.01, 0.01], size=(num_vectors_per_set, 3)).astype(np.float32)
needles = np.random.normal(loc=[0.5, 0.5, 0.5], scale=[0.01, 0.01, 0.01], size=(num_needles, 3)).astype(np.float32)

# Check if the total number of vectors is correct
while (len(v1) + len(v2) + len(v3) + len(needles)) != num_vectors_total:
    diff = num_vectors_total - (len(v1) + len(v2) + len(v3) + len(needles))
    if diff > 0:
        needles = np.concatenate((needles, np.random.normal(loc=[0.5, 0.5, 0.5], scale=[0.01, 0.01, 0.01], size=(diff, 3)).astype(np.float32)))
    else:
        needles = needles[:diff]

# Step 2: Combining and Shuffling Vectors
print(""Combining and shuffling vectors..."")
data = np.concatenate((v1, v2, v3, needles))
np.random.shuffle(data)

# Ensure the correct number of vectors is generated
print(""Number of generated vectors:"", len(data))  # Debug print statement
assert len(data) == num_vectors_total, f""Error: Number of vectors ({len(data)}) does not match expected ({num_vectors_total})""

# Step 3: Creating Annoy Index
print(""Creating Annoy index..."")
num_dimensions = 3
num_trees = 100
annoy_index = AnnoyIndex(num_dimensions, metric='euclidean')

# Adding vectors to the index
print(f""Adding {len(data)} vectors to the index..."")
for i, vector in enumerate(data):
    annoy_index.add_item(i, vector)

# Building the index
print(""Building the index..."")
annoy_index.build(num_trees)

# Step 4: Executing the Query
print(""Executing the query..."")
query = np.array([0.5, 0.5, 0.5]).astype(np.float32)
num_neighbors = 10
neighbors, distances = annoy_index.get_nns_by_vector(query, num_neighbors, include_distances=True)

# Debugging: Print intermediate values
print(""Query Vector:"", query)
print(""Nearest Neighbors Indices:"", neighbors)
print(""Nearest Neighbors Distances:"", distances)

# Step 5: Printing the Result
print(""\nNearest Neighbors:"")
for neighbor, distance in zip(neighbors, distances):
    print(""Neighbor:"", data[neighbor], ""Distance:"", distance)

"
ru847dbZ,JOWAPA 4 FINAL CONFIRMATION,JOWAPA,6502 ACME Cross Assembler,Friday 3rd of May 2024 02:36:58 PM CDT,"This is the final confirmation that JOWAPA 4 will never ever happen 

my final goodbye"
