id,title,username,language,date,content
UTUeuK4u,Untitled,AkselRus,C,Tuesday 9th of January 2024 06:03:40 AM CDT,"short Size; // Размер пакета
ubyte Encrypted; // Зашифрован ли пакет
ubyte PackageNum; // Номер пакета
short ID; // ID Пакета

// eCTrCryptKeyAck - подтверждение ключа шифрования.
if (ID == 1103){ // Key
    short mKey0[9];
    short mDummy0;
    short mKey1[9];
    uchar mDummy1;
    short mKey2[9];
    short mKey3[9];
    uchar mIdx;
    short mKey4[9];
    short mDummy2;
    short mKey5[9];
    short mKey6[9];
    short mDummy3;
    short mKey7[9];
    uchar mDummy4;
    short mKey8[9];
    short mKey9[9];
    short mDummy5;
    uchar mDummy6;
    ushort mSvrNo;
    ulong mUnique;
}

// eCTrContentsAck - Подтверждение контента (возможно, какие-то игровые события или ресурсы).
if (ID == 2012){ // TblParmSvrOp Game Server
    struct {
        byte mIsSetup;
        float mOpValue1;
        float mOpValue2;
        float mOpValue3;
        float mOpValue4;
        float mOpValue5;
        float mOpValue6;
        float mOpValue7;
        float mOpValue8;
        float mOpValue9;
        float mOpValue10;
        float mOpValue11;
        float mOpValue12;
        float mOpValue13;
        float mOpValue14;
        float mOpValue15;
        float mOpValue16;
        float mOpValue17;
        float mOpValue18;
        float mOpValue19;
        float mOpValue20;
        float mOpValue21;
        float mOpValue22;
        float mOpValue23;
        float mOpValue24;
        float mOpValue25;
        float mOpValue26;
        float mOpValue27;
        float mOpValue28;
        float mOpValue29;
        float mOpValue30;
    } SvrOp[100]<optimize=false>;
    ulong mContentsSeq;
}

// eCTrPersonalShopItemInfoAck - Подтверждение информации о предметах в личном магазине.
if (ID == 2017){
    unsigned short Count;
    struct {
        unsigned short hz;
        unsigned short hz;
    } HZ[Count]<optimize=false>;
}

// eCTrAnnounceAck2 - Второе подтверждение отправки объявления.
if (ID == 2068){
    uint mMsgGroupNo;
    uint mMsgNo;
}


// eCTrCertifyUserReq - запрос на сертификацию или аутентификацию пользователя.
if (ID == 3100){
    uchar mDummy1[1];
    uchar mDummy2[3];
    char mUserPswd3[21];
    ulong mDummy3[2];
    uchar mDummy4[4];
    char mUserId1[21];
    uchar mDummy5[2];
    char mUserPswd1[21];
    uchar mPswdIdx;
    uchar mDummy6[5];
    char mUserId2[21];
    char mUserPswd2[21];
    char mUserId4[21];
    uchar mDummy7[1];
    char mUserId0[21];
    char mUserId6[21];
    uchar mDummy8[3];
    uchar mDummy9[3];
    char mUserId7[21];
    char mUserId8[21];
    uchar mDummy10[7];
    float mDummy11[2];
    uchar mIdIdx;
    uchar mDummy12[3];
    char mUserPswd0[21];
    uchar mDummy13[7];
    uchar mDummy14[1];
    char mUserId5[21];
    uchar mDummy15[4];
    char mUserPswd4[21];
    uchar mDummy16[1];
    char mUserId3[21];
    char mUserPswd5[21];
    uchar mDummy17[8];
    int CVersionmVersion;
    char mUserPswd6[21];
    uchar mDummy18[5];
    ulong mRscLng;
    uchar mRscKey[500];
    char mOtpPswd[9];
    ulong mAdminVer_ClientVersion;
    int mIsPCB;
    char mTicket[2049];
    char mPublisherUserId[21]; // 36
    int mIsWebLogin;
}

// eCTrCertifyUserAck - подтверждение сертификации пользователя.
if (ID == 3101){ 
ulong mUserNo;
int mKey;
uchar mCnt;
    struct {
        uchar mIsValid;
        ushort mField_mSvrNo;
        char mWorldNm[101];
        uchar mSvrState;
        ubyte mIp[4];
        ushort mPort;
        int mServerType;
        int mIsChaosBattle;
    } Server[mCnt]<optimize=false>;
}

// eCTrARSAuthReq - запрос на аутентификацию через ARS.
if (ID == 3120){
    ulong mUserNo;
    char mUserID[20];
    ushort mSvrNo;
}

// eCTrARSAuthAck - подтверждение аутентификации через ARS.
if (ID == 3121){ // disc
    int EARSAuthState_mState;
}

// 5100 eCTrLoginUserReq - запрос на вход пользователя.
if (ID == 5100){
    ulong mUserNo;
    int mKey;
    uint CVersion_mVersion;
    char mUserPswd[21];
    int mNonCltChk[3];
}

// 5101 eCTrLoginUserAck - подтверждение входа пользователя.
if (ID == 5101){
    uchar mAuth;
    struct CPcSimple mPc[3];
    struct CPublicEquip mPcEquip[3];
    struct _SYSTEMTIME mCurTm;
    ulong mLeftChatTick;
    struct _SYSTEMTIME mEndBoard;
    int mPcStr[3];
    int mPcInt[3];
    int mPcDex[3];
    int mPcChaotic[3];
    struct C3D mPcPos[3];
    ulong mLimitPlayTime[2];
    byte mIsSpecificServer;
    
    struct CPcSimple {
        int mFlag;
        int mPcNo;
        enum EPcClass mClass;
        uchar mSex;
        uchar mHead;
        uchar mFace;
        uchar mBody;
        ulong mGuildNo;
        int mGuildMarkSec;
        enum EGuildGrade mGuildGrade;
        char mGuildNickNm[17];
        ubyte mIsAtkTower; //bool mIsAtkTower;
        ushort mDfnsBenefitLv;
        int mDiscipleNo;
        enum EDiscipleMemberType mDiscipleType;
        int mHp;
        int mMp;
        short mStomach;
        uchar mStomachStatus;
        byte hz1;
        int hz2;
        int64 mExp; //long64 mExp;
        ushort mLevel;
        //byte hz123;
        char mPcNm[15];
        byte mChaosBattleSide;
        ushort mFieldSvrNo;
        ulong mFieldSvrPcNo;
        ushort mFieldSvrSeq;
        uchar mEmblemOfHonorSeq;
        ubyte hz3;
        
        ushort mOldLevel;
        uchar mNationalFlagNo;
        uchar mEmblemOfHonorEffectSeq;
        uchar mTeamRankEffectSeq;
        
        ubyte hz4;
        ubyte hz5;
        ubyte hz6;
        short hzLevel;
        
        enum EUTGWMatchGroup mMatchGroup;
        
        int64 mLevelupCoinExp; //long64 mLevelupCoinExp;
        int hzzzz;
        //byte sadasdsa;
        int mLastReceiptSection;
        int asdasd;
        short hzz;
    };
    
    enum EPcClass {
        ePcClassFighter=0,
        ePcClassDragoon=1,
        ePcClassWizard=2,
        ePcClassAssassin=3,
        ePcClassSummoner=4,
        ePcClassCnt=5
    };
    
    enum EGuildGrade {
        eGgMaster=0,
        eGgSubMaster=1,
        eGgNormalLv2=2,
        eGgNormalLv1=3,
        eGgNormalLv0=4,
        eGgCnt=5
    };
    
    enum EDiscipleMemberType {
        eDMTNone=0,
        eDMTMaster=1,
        eDMTDisciple=2,
        eDMTWait=3,
        eDMTCnt=4
    };
    
    enum EChaosBattleSide {
        eChaosBattleSideOffense=0,
        eChaosBattleSideDefense=1,
        eChaosBattleSideCnt=2
    };
    
    enum EUTGWMatchGroup {
        eUTGWMatchGroupTheOcean=0,
        eUTGWMatchGroupTheSun=1,
        eUTGWMatchGroupCnt=2
    };
    
    struct CPublicEquip {
        struct CPublicEquipPair _mList[20];
    };
    
    struct CPublicEquipPair {
        int64 mSerialNo; //ulong64 mSerialNo;
        int mItemNo;
        enum EItemBindType mItemBindType;
    };
    
    enum EItemBindType {
        eItemBindNone=0,
        eItemBindDisplay=1,
        eItemBindHide=2,
        eItemBindCnt=3
    };
    
    struct C3D {
        float mX;
        float mY;
        float mZ;
    };
}





// eCTrLoginCompleteAck - подтверждение успешного завершения входа.
if (ID == 5102){
}

// eCTrEnteredPcAck - подтверждение входа игрока (PC - Player Character) в игровое поле или зону.
if (ID == 5103){
    unsigned short hz;
    unsigned short hz;
    unsigned byte AliveOrDead;
    unsigned byte hz;
    unsigned short mAttackRate;
    unsigned short MoveRate;
    unsigned short hz;
    unsigned int hz;
    unsigned int hz;
    unsigned byte hz;
    unsigned byte hz;
    unsigned byte hz;
    unsigned byte hz;
    unsigned int SerialNum;
    unsigned byte mClass;
    unsigned byte mSex;
    unsigned byte mHead;
    unsigned byte mFace;
    unsigned int hz;
    unsigned int ID_1;
    unsigned int ID_2;
    unsigned int ID_3;
    float PosX;
    float PosY;
    float PosZ;
    float mDir;
    unsigned int mPkCnt;
    unsigned int mChaotic;
    unsigned int mChaoticStatus;
    char mNm[16];
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int Weapon;
    unsigned int Shield;
    unsigned int Armor;
    unsigned int Ring1;
    unsigned int Ring2;
    unsigned int Amulet;
    unsigned int Boot;
    unsigned int Glove;
    unsigned int Cap;
    unsigned int Belt;
    unsigned int Cloak;
    unsigned int ExpertnessMaterial;
    unsigned int SoulMaterial;
    unsigned int DefenceMaterial;
    unsigned int AttackMaterial;
    unsigned int LifeMaterial;
    unsigned int EventAMaterial;
    unsigned int EventBMaterial;
    unsigned int EventCMaterial;
    unsigned int Servant;
    unsigned int hz;
    unsigned short LVL;
    unsigned short NumServer;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned short hz;
}

// eCTrExistedPcAck - подтверждение присутствия игрока на игровом поле.
if (ID == 5107){
    unsigned short hz;
    unsigned short hz;
    unsigned short hz;
    unsigned byte AliveOrDead;
    unsigned byte hz;
    unsigned short AttackRate;
    unsigned short MoveRate;
    unsigned short hz;
    unsigned short hz;
    unsigned int hz;
    unsigned byte hz;
    unsigned byte hz;
    unsigned byte hz;
    unsigned byte hz;
    unsigned byte hz;
    unsigned byte hz;
    unsigned int SerialNum;
    unsigned byte Class;
    unsigned byte Gender;
    unsigned byte Head;
    unsigned byte Face;
    unsigned int hz;
    unsigned int ID_1;
    unsigned int ID_2;
    unsigned int ID_3;
    float PosX;
    float PosY;
    float PosZ;
    float mDir;
    unsigned int PkCnt;
    unsigned int Reputation;
    unsigned int ChaoticStatus;
    char Name[16];
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int Weapon;
    unsigned int Shield;
    unsigned int Armor;
    unsigned int Ring1;
    unsigned int Ring2;
    unsigned int Amulet;
    unsigned int Boot;
    unsigned int Glove;
    unsigned int Cap;
    unsigned int Belt;
    unsigned int Cloak;
    unsigned int ExpertnessMaterial;
    unsigned int SoulMaterial;
    unsigned int DefenceMaterial;
    unsigned int AttackMaterial;
    unsigned int LifeMaterial;
    unsigned int EventAMaterial;
    unsigned int EventBMaterial;
    unsigned int EventCMaterial;
    unsigned int Servant;
    unsigned int hz;
    unsigned short LVL;
    unsigned short NumServer;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;     
}

// eCTrExistedMonAck - подтверждение присутствия монстра на игровом поле.
if (ID == 5108){
    unsigned short Count;
    struct {
        unsigned short hz;
        unsigned short AttackRate;
        unsigned short MoveRate;
        unsigned short hz;
        float PosX;
        float PosY;
        float PosZ;
        unsigned int SerialNum;
        unsigned int hz;
        float PosX;
        float PosY;
        float PosZ;
        unsigned int ID_1;
        unsigned int ID_2;
        unsigned int ID_3;
        unsigned short Reputation;
        unsigned short LVL;
        unsigned short HP;
        char Name[16];
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
        unsigned short hz;
    } NPC[Count]<optimize=false>;
}

// eCTrExistedMapGateAck - подтверждение присутствия ворот или портала на карте.
if (ID == 5112){
    ushort mCnt;
    struct CPublicCastleGate mPublic[mCnt]; // default: [45]
    
    struct CPublicCastleGate {
        int mFlag;
        int mUnique;
        int mHp;
        ulong mClientID;
        int mMonID;
        struct C3D mPosCur;
        float mDir;
        enum ETerritory mTerritory;
    };
    
    enum ETerritory {
        eTerritoryGuinea=0,
        eTerritoryFurie=1,
        eTerritoryByron=2,
        eTerritoryRoden=3,
        eTerritoryBlackland=4,
        eTerritoryTheSealedLandOfMeteos=5,
        eTerritoryAccra=6,
        eTerritoryBattleFieldOfWill=7,
        eTerritoryBattleFieldOfSpirit=8,
        eTerritoryBattleFieldOfCalm=9,
        eTerritoryBattleFieldOfWisdom=10,
        eTerritoryGuildBattle=11,
        eTerritoryShrineOfIllumina=12,
        eTerritoryBattleFieldOfCourage=13,
        eTerritoryIslandSky=14,
        eTerritoryArena=15,
        eTerritoryCnt=16
    };
    
    enum EPlace {
        ePlaceNo=0,
        ePlaceTrainingCave=1,
        ePlaceGuineaTown=2,
        ePlaceGuineaDock=3,
        ePlaceValleyDarkPriests=4,
        ePlaceSerpentBeach=5,
        ePlaceElvenRuin=6,
        ePlaceWindmillHoldenFamily=7,
        ePlaceTraningCave1=8,
        ePlaceAshburnTown=9,
        ePlaceAshburnPort=10,
        ePlaceWindmillPlain=11,
        ePlaceFurieCastle=12,
        ePlaceNoUse1=13,
        ePlaceFastnessOfKnolls=14,
        ePlaceGremlinsWood=15,
        ePlaceLandOfTheDead=16,
        ePlaceTowerOfFlame=17,
        ePlaceSpidersForest=18,
        ePlaceDarkCave=19,
        ePlaceMermanGround=20,
        ePlaceOrcCamp=21,
        ePlaceLargonRiver=22,
        ePlaceDarkCave1=23,
        ePlaceDarkCave2=24,
        ePlaceDarkCave3=25,
        ePlaceDarkCave4=26,
        ePlaceStrangeDungeon=27,
        ePlaceDarkCave5=28,
        ePlaceDarkCave6=29,
        ePlaceItemShopAshburnTown=30,
        ePlaceWeaponShopAshburnTown=31,
        ePlaceTowerOfFlame1=32,
        ePlaceTowerOfFlame2=33,
        ePlaceTowerOfFlame3=34,
        ePlaceTowerOfFlame4=35,
        ePlaceTowerOfFlame5=36,
        ePlaceTowerOfFlame6=37,
        ePlaceTowerOfFlame7=38,
        ePlaceBlacklandTown=39,
        ePlaceBlacklandCastle=40,
        ePlaceElfTemple=41,
        ePlaceSanctuaryOfChaos=42,
        ePlaceSanctuaryOfOrder=43,
        ePlaceSwampOfBlackDragon=44,
        ePlaceVillageOfStraggler=45,
        ePlaceKingTomb=46,
        ePlaceDismissedPort=47,
        ePlaceRaceCourse=48,
        ePlaceKoboldCamp=49,
        ePlaceHarpiNest=50,
        ePlaceSwampBlackDragon1=51,
        ePlaceSwampBlackDragon2=52,
        ePlaceSwampBlackDragon3=53,
        ePlaceSwampBlackDragon4=54,
        ePlaceSwampBlackDragon5=55,
        ePlaceSwampBlackDragon6=56,
        ePlaceSwampBlackDragon7=57,
        ePlaceUndeadDungeon=58,
        ePlaceUndeadDungeon1=59,
        ePlaceUndeadDungeon2=60,
        ePlaceUndeadDungeon3=61,
        ePlaceUndeadDungeon4=62,
        ePlaceUndeadDungeon5=63,
        ePlaceUndeadDungeon6=64,
        ePlaceUndeadDungeon7=65,
        ePlaceKingTomb1=66,
        ePlaceKingTomb2=67,
        ePlaceKingTomb3=68,
        ePlaceKingTomb4=69,
        ePlaceKingTomb5=70,
        ePlacePvpZoneAtFurie=71,
        ePlacePvpZoneAtBlackland=72,
        ePlaceByronTown=73,
        ePlaceByronCastle=74,
        ePlacePitsOfGiantBeetle=75,
        ePlaceAegirUnderwaterCave=76,
        ePlaceAncientRuinOfKhnartuu=77,
        ePlaceHillOfFairies=78,
        ePlaceStoneHammer=79,
        ePlaceTolanBay=80,
        ePlaceAltarOfHaast=81,
        ePlaceDracoFarm=82,
        ePlacePvpZoneAtByron=83,
        ePlacePitsOfGiantBeetle1=84,
        ePlacePitsOfGiantBeetle2=85,
        ePlacePitsOfGiantBeetle3=86,
        ePlacePitsOfGiantBeetle4=87,
        ePlacePitsOfGiantBeetle5=88,
        ePlaceAegirUnderwaterCave1=89,
        ePlaceAegirUnderwaterCave2=90,
        ePlaceAegirUnderwaterCave3=91,
        ePlaceAegirUnderwaterCave4=92,
        ePlaceAegirUnderwaterCave5=93,
        ePlaceRodenTown=94,
        ePlaceRodenCastle=95,
        ePlaceGuildAgit1=96,
        ePlaceGuildAgit2=97,
        ePlaceGuildAgit3=98,
        ePlaceBanquetHallSmall1=99,
        ePlaceBanquetHallSmall2=100,
        ePlaceBanquetHallSmall3=101,
        ePlaceBanquetHallLarge1=102,
        ePlaceBanquetHallLarge2=103,
        ePlaceBanquetHallLarge3=104,
        ePlaceTeamBattleArena0=105,
        ePlaceTeamBattleArena30=106,
        ePlaceTeamBattleArena45Over=107,
        ePlaceRockOfSeal=108,
        ePlaceHellGate=109,
        ePlaceTeamBattleArenaOp=110,
        ePlaceTellares=111,
        ePlaceRodenPrimeCastlePortal=112,
        ePlaceVellainTerrace=113,
        ePlaceRedValley=114,
        ePlaceErtesCave=115,
        ePlaceZaratanBasin=116,
        ePlaceLakeOfTime=117,
        ePlaceRefugeOfGiants=118,
        ePlaceMazeOfMinotaur=119,
        ePlaceRodenTownCampsite=120,
        ePlaceErtesCaveOutside=121,
        ePlaceErtesCaveInside=122,
        ePlaceAncientStairs1=123,
        ePlaceAncientStairs2=124,
        ePlaceAncientStairs3=125,
        ePlaceTownOfDumper=126,
        ePlaceExile=127,
        ePlaceConsultRoom=128,
        ePlaceTeamBattleArenaWide0=129,
        ePlaceTeamBattleArenaWide30=130,
        ePlaceTeamBattleArenaWide45Over=131,
        ePlaceEventPrimeCrewCombat=132,
        ePlaceEventHonorCrewCombat=133,
        ePlaceEventSpritCrewCombat=134,
        ePlaceEntranceToMeteosLair=135,
        ePlaceTheOutsideCamp=136,
        ePlaceMeteosLair=137,
        ePlaceSanctuaryOfMeteos=138,
        ePlaceTeamBattleArena54Over=139,
        ePlaceChampionCombat=140,
        ePlaceTowerCrewCombat=141,
        ePlaceAccra=142,
        ePlaceAccraTown=143,
        ePlaceAltarOfRitual=144,
        ePlacePrimitiveForest=145,
        ePlaceShoreOfSettler=146,
        ePlaceDimensionDoor=147,
        ePlaceForestOfDimension=148,
        ePlaceShoreOfSerpents=149,
        ePlaceValeforForest=150,
        ePlaceEnteranceOfValefor=151,
        ePlaceFoliageOfWildness=152,
        ePlaceBattleFieldOfWill=153,
        ePlaceBattleFieldOfWillAttackCamp=154,
        ePlaceBattleFieldOfWillDefenseCamp=155,
        ePlaceBattleFieldOfSprit=156,
        ePlaceBattleFieldOfSpritAttackCamp=157,
        ePlaceBattleFieldOfSpritDefenseCamp=158,
        ePlaceBattleFieldOfCalm=159,
        ePlaceBattleFieldOfCalmAttackCamp=160,
        ePlaceBattleFieldOfCalmDefenseCamp=161,
        ePlaceBattleFieldOfWisdom=162,
        ePlaceBattleFieldOfWisdomAttackCamp=163,
        ePlaceBattleFieldOfWisdomDefenseCamp=164,
        ePlaceEnteranceOfValefor2=165,
        ePlaceValefor=166,
        ePlaceSealedCave=167,
        ePlaceCaveOfPrimordialPirates1=168,
        ePlaceCaveOfPrimordialPirates2=169,
        ePlaceTowerOfMeteos=170,
        ePlaceRoomOfLand=171,
        ePlaceRoomOfAir=172,
        ePlaceRoomOfOcean=173,
        ePlaceRoomOfSun=174,
        ePlaceTowerOfMeteosTheTopFloor=175,
        ePlaceHighClassGuildHouse=176,
        ePlaceLairGuildHouse=177,
        ePlaceEpicGuildHouse=178,
        ePlaceHighestSplendorGuildHouse=179,
        ePlace1thGuildBattleField=180,
        ePlace1thTheColosseum=181,
        ePlace1thTheColosseumBattleZone=182,
        ePlace2thGuildBattleField=183,
        ePlace2thTheColosseum=184,
        ePlace2thTheColosseumBattleZone=185,
        ePlace3thGuildBattleField=186,
        ePlace3thTheColosseum=187,
        ePlace3thTheColosseumBattleZone=188,
        ePlace4thGuildBattleField=189,
        ePlace4thTheColosseum=190,
        ePlace4thTheColosseumBattleZone=191,
        ePlace5thGuildBattleField=192,
        ePlace5thTheColosseum=193,
        ePlace5thTheColosseumBattleZone=194,
        ePlace6thGuildBattleField=195,
        ePlace6thTheColosseum=196,
        ePlace6thTheColosseumBattleZone=197,
        ePlace7thGuildBattleField=198,
        ePlace7thTheColosseum=199,
        ePlace7thTheColosseumBattleZone=200,
        ePlace8thGuildBattleField=201,
        ePlace8thTheColosseum=202,
        ePlace8thTheColosseumBattleZone=203,
        ePlace9thGuildBattleField=204,
        ePlace9thTheColosseum=205,
        ePlace9thTheColosseumBattleZone=206,
        ePlace10thGuildBattleField=207,
        ePlace10thTheColosseum=208,
        ePlace10thTheColosseumBattleZone=209,
        ePlace11thGuildBattleField=210,
        ePlace11thTheColosseum=211,
        ePlace11thTheColosseumBattleZone=212,
        ePlace12thGuildBattleField=213,
        ePlace12thTheColosseum=214,
        ePlace12thTheColosseumBattleZone=215,
        ePlace13thGuildBattleField=216,
        ePlace13thTheColosseum=217,
        ePlace13thTheColosseumBattleZone=218,
        ePlace14thGuildBattleField=219,
        ePlace14thTheColosseum=220,
        ePlace14thTheColosseumBattleZone=221,
        ePlaceBattleFieldOfWillSafetyDefenseCamp=222,
        ePlaceBattleFieldOfSpritSafetyDefenseCamp=223,
        ePlaceBattleFieldOfCalmSafetyDefenseCamp=224,
        ePlaceBattleFieldOfWisdomSafetyDefenseCamp=225,
        ePlaceShrineOfIllumina=226,
        ePlaceCampOfIllumina=227,
        ePlaceSpoiledSwamp=228,
        ePlaceNestOfDragram=229,
        ePlaceMutantRockArea=230,
        ePlaceCaveOfConfusion=231,
        ePlaceBaphometScaleBridge=232,
        ePlaceNestOfBaphomet=233,
        ePlaceRockCanyonBase=234,
        ePlaceWindmillVillage=235,
        ePlaceShadowVillage=236,
        ePlaceGuineaPort=237,
        ePlaceGuineaNorthSeaside=238,
        ePlaceGuineaEastSeaside=239,
        ePlaceGuineaSouthSeaside=240,
        ePlaceCityOfAncientElf=241,
        ePlaceNorthRestrictionOfEuvgenh=242,
        ePlaceEastRestrictionOfEuvgenh=243,
        ePlaceSouthRestrictionOfEuvgenh=244,
        ePlaceVestigeOfAncientElf=245,
        ePlaceWindmillFarm=246,
        ePlaceRockCanyonLakeside=247,
        ePlaceHistoricSiteOfFullMoon=248,
        ePlaceCityOfForlornFullMoon=249,
        ePlaceForgottenGrove=250,
        ePlaceForgottenStatus=251,
        ePlaceForgottenPlateau=252,
        ePlaceAttackAreaOfRecluse=253,
        ePlaceForgottenBridge=254,
        ePlaceGloomyOutpost=255,
        ePlaceLerkaFollowProtectiveWall=256,
        ePlaceLerkaFollowStagingArea=257,
        ePlaceAltarOfLerka=258,
        ePlaceCliffOfFullMoon=259,
        ePlaceFullMoonEntrance=260,
        ePlaceBattleFieldOfCourage=261,
        ePlaceBattleFieldOfCourageAttackCamp=262,
        ePlaceBattleFieldOfCourageDefenseCamp=263,
        ePlaceBattleFieldOfCourageSafetyDefenseCamp=264,
        ePlaceLoopCrewCombat=265,
        ePlace1thMonsterMatch=266,
        ePlace2thMonsterMatch=267,
        ePlace3thMonsterMatch=268,
        ePlace4thMonsterMatch=269,
        ePlace5thMonsterMatch=270,
        ePlace6thMonsterMatch=271,
        ePlace7thMonsterMatch=272,
        ePlace8thMonsterMatch=273,
        ePlaceReconstructionOfCity=274,
        ePlacePvpZoneAtAveliyon=275,
        ePlaceEtelriumCastle=276,
        ePlaceImprintPlaceOfCrown=277,
        ePlaceEtelriumHideout=278,
        ePlaceEtelriumBridge=279,
        ePlaceSongforestOfAngel=280,
        ePlaceForestOfMagic=281,
        ePlaceForestOfBrilliance=282,
        ePlaceSanctuaryOfUpiter=283,
        ePlaceDrgonnestOfCorps=284,
        ePlaceTraceOfPlague=285,
        ePlaceDeadbodyRuin=286,
        ePlaceAltarOfBaalbek=287,
        ePlaceProhibitedJungle=288,
        ePlaceSilentWasteland=289,
        ePlaceSkysongGrassland=290,
        ePlaceWildCanyon=291,
        ePlaceIslandSky=292,
        ePlaceIslandSkyGate=293,
        ePlaceUpiterDungeonGate=294,
        ePlaceBaalbekDungeonGate=295,
        ePlaceUpiterDungeon1=296,
        ePlaceBaalbekDungeon1=297,
        ePlaceUpiterDungeon2=298,
        ePlaceBaalbekDungeon2=299,
        ePlaceLairOfMeteos=300,
        ePlaceHorizonOfFullMoon=301,
        ePlaceLakeOfFullMoon=302,
        ePlace70LevelsOfDungeon=303,
        ePlace80LevelsOfDungeon=304,
        ePlaceFortOfAbelruth=305,
        ePlaceTrialOfTheSoul=306,
        ePlaceFortOfAbelruthGate=307,
        ePlace1stBossBattle=308,
        ePlace2ndBossBattle=309,
        ePlace3rdBossBattle=310,
        ePlace4thBossBattle=311,
        ePlace5thBossBattle=312,
        ePlace6thBossBattle=313,
        ePlace1stFierceBattle=314,
        ePlace2ndFierceBattle=315,
        ePlace3rdFierceBattle=316,
        ePlace4thFierceBattle=317,
        ePlace5thFierceBattle=318,
        ePlace6thFierceBattle=319,
        ePlaceExteriorOfDarkPriestTemple=320,
        ePlaceInteriorOfDarkPriestTemple=321,
        ePlaceEntranceOfDarkPriestTemple=322,
        ePlaceCnt=323
    };
    
}

// eCTrExistedMapStowerAck - подтверждение присутствия башни или структуры на карте.
if (ID == 55113){
    unsigned short Count;
    struct{
        unsigned short hz;
        unsigned short hz;
        unsigned int hz;
        unsigned int hz;
        unsigned int ID_1;
        float PosX;
        float PosY;
        float PosZ;
        float mDir;
        unsigned int hz;
        unsigned int hz;
    } NPC[Count]<optimize=false>;  
}

// eCTrExistedMapStowerAck - подтверждение присутствия башни или структуры на карте.
if (ID == 5113){
    ushort mCnt;
    struct CPublicCastleStower mPublic[mCnt]; // default: [45]
    
    struct CPublicCastleStower {
        int mUnique;
        int mHp;
        ulong mClientID;
        int mMonID;
        struct C3D mPosCur;
        float mDir;
        enum ETerritory mTerritory;
        enum EPlace mPlace;
    };
}

// eCTrChoosePcReq - запрос на выбор игрока.
if (ID == 5116){
    ulong mPcNo;
    }

// eCTrChoosePcAck - подтверждение выбора игрока.
// НАДО ФИКСИТЬ!!!
if (ID == 5117){
    int mUnique;;
    int mMapNo;
    struct C3D mPos;
    struct CPcDetail5117 mPc;
    struct CPublicInven5117 mPcInven;
    
    struct CPcDetail5117 {
        short mDDv;
        short mMDv;
        short mRDv;
        short mDPv;
        short mMPv;
        short mRPv;
        short mHit;
        short mMinD;
        short mMaxD;
        short mAttackRate;
        short mMoveRate;
        struct C3D5117 mHomePos;
        ulong mPkCnt;
        short mChaotic;
        enum EChaoticStatus mChaoticStatus;
        int mLetterLimit;
        short mVolitionOfHonor;
        int mHonorPoint;
        int64 mChaosPoint;
    };
    
    enum EChaoticStatus {
        eChaoticStatusChaotic3=0,
        eChaoticStatusChaotic2=1,
        eChaoticStatusChaotic1=2,
        eChaoticStatusNormal=3,
        eChaoticStatusLow1=4,
        eChaoticStatusLow2=5,
        eChaoticStatusLow3=6,
        eChaoticStatusCnt=7
    };
    
    struct CPublicInven5117 {
        ushort mCnt;
        struct CGoods5117 mList[240];
    };
    
    struct CGoods5117 {
        uchar mFlag;
        int64 mSerialNo;
        int mItemID;
        ulong mStack;
        ulong mEndTick;
        uchar mStatus;
        ushort mUseCount;
        ulong mEatTime;
        int mApplyAbnItemID;
        ulong mApplyAbnItemEndTick;
        ulong mOwner;
        int mTermOfEffectivity;
        uchar mItemBindType;
        uchar mRestoreCnt;
        uchar mHoleCount;
    };
}

// eCTrInfoExpAck - подтверждение информации об опыте.
if (ID == 5139){
    ushort mLevel;
    uint64 mExp;
    uint64 mExpAim;
}

// eCTrInfoAbilityAck - подтверждение информации о способностях.
if (ID == 5145){
    struct AbInfo mInfo;

    struct AbInfo {
        short mDDv;
        short mMDv;
        short mRDv;
        short mDPv;
        short mMPv;
        short mRPv;
        short mDDD;
        short mDHIT;
        short mRDD;
        short mRHIT;
        short mMDD;
        short mMHIT;
        short mStr;
        short mDex;
        short mInt;
        short mCriticalHit;
        short mMaxHp;
        short mMaxMp;
    };
}

// eCTrInfoHpMpAck - подтверждение информации о здоровье и мане.
if (ID == 5146){
    uint mHp;
    uint mMp;
}

// eCTrInfoSpeedAck - подтверждение информации о скорости.
if (ID == 5147){
    ushort mAttackRate;
    ushort mMoveRate;
    uint mWho_SerialNum;
}

// eCTrInfoWeightAck - подтверждение информации о текущем весе инвентаря.
if (ID == 5149){
    uint mMaxWeight;
    uint mWeight;
    uchar mWeightStatus;
}

// eCTrAbnormalAck - подтверждение аномального состояния (например, отравления или оглушения).
if (ID == 5160){
    unsigned int SerialNum;
    unsigned int BuffId;
    signed int EndTick;
    float PosX;
    float PosY;
    float PosZ;
}

// eCTrInfoStomachAck - подтверждение информации о содержимом желудка персонажа (может быть связано с механикой питания).
if (ID == 5173){
    unsigned int Stomach;
    unsigned byte StomachStatus;
}

// eCTrTransformAck - подтверждение трансформации персонажа.
if (ID == 5179){
    unsigned int SerialNum;
    unsigned int ID_3;
}

// eCTrStoreReq - запрос на взаимодействие с магазином или хранилищем.
if (ID == 5181){

}

// eCTrDoMoveReq - запрос на выполнение движения.
if (ID == 5188){
    struct C3D mPos;
    float mDir;
    ulong mAction;
    uchar mFlag;
}

// eCTrDoMoveAck - подтверждение выполнения движения.
if (ID == 5189){
    uint mWho_SerialNum;
    struct C3D mPos;
    short mMoveRate;
    uchar mFlag;
    float mDir;
    ulong mAction;
}

// eCTrDoMoveToAck - подтверждение движения к определенной точке.
if (ID == 5190){
    unsigned int SerialNum;
    float PosX;
    float PosY;
    float PosZ;
    float PointPosX;
    float PointPosY;
    float PointPosZ;
    unsigned byte flag;
    float Velocity;
}

// eCTrCastleStowerAck - подтверждение состояния стены или башни замка.
// НЕ РАБОТАЕТ. ХЗ
if (ID == 5202){
    int mWho;
    uchar mCnt;
    struct SInfo mInfo[mCnt]; // default: [52]
}

// eCTrCastleOccupyerAck - подтверждение информации о завоевателях замка.
if (ID == 5204){
    //unsigned byte hz;
    uchar mCnt;
    struct SInfo mInfo[mCnt]; // default: [52]
}

// eCTrGossipAck - подтверждение слуха или разговора NPC.
if (ID == 5212){
    int mFromNo;
    char mFromNm[15];
    char mToNm[15];
    char mDialog[101];
}



// eCTrLetterListAck - подтверждение списка писем.
if (ID == 5307){
    //unsigned short hz;
    ushort mCnt;
    struct CLetter mLetter[mCnt]; // default: [80]
    
    struct CLetter {
        int64 mSerialNo; // мб int
        char mTitle[31];
        char mFromPcNm[15];
        char mToPcNm[15];
    };
    
}

// eCTrStopMoveAck - подтверждение остановки движения.
if (ID == 5326){
    uint mWho_SerialNum;
    struct C3D mPos;
    ubyte mFlag;
}

// eCTrSiegeGambleBroadcastStateAck - подтверждение трансляции состояния азартной игры в осаде.
// ХЗ!
if (ID == 5339){
    uchar mIsOpen;
    struct SInfo mInfo[16];
}

// eCTrQuestStateAllAck - подтверждение всех состояний заданий.
// По идее должен брать данные из TblPcQuest, но на корее не работает. Ниже закомменчена структура из филда.
if (ID == 5460){
    ushort hz;
    ushort hz;
    ushort hz;
    ushort hz;
    ushort hz;
    
    //ushort mCnt;
    //struct SInfo mList[mCnt]; // default: [400]
}


// eCTrCharReformItemListAck - подтверждение списка предметов для переделки персонажа.
if (ID == 5522){
    struct CInfo mInfo[3];
    struct CInfo {
        ulong mPcNo;
        int64 mNmSerialNo;
        int64 mStyleSerialNo;
        int mNmItemNo;
    };
    
}

// eCTrPcGoldItemEffectStatusAck - подтверждение статуса эффекта золотого предмета для ПК.
if (ID == 5537){
    struct {
        unsigned int hz;
    } HZ[81]<optimize=false>;
}

// eCTrGoldItemInfoListAck - подтверждение списка информации о золотом предмете.
if (ID == 5559){
    ushort mCnt;
    struct SGoldItemInfo mItem[mCnt]; // default: [100]
    
    struct SGoldItemInfo {
        uchar mFlag;
        char mNm[41];
        uchar mGoldItemCate;
        int hz1; //
        ubyte hz2; //
        int mGoldNo;
        int hz3; //
        short mOrderNo;
        short hz4; //
        int mCount;
        short mGoldItemCateId;
        short hz5; //
        int mItemNo;
        int mOrgPrice;
        int mPrice;
        int mTermOfValidity;
        int mHourOfPractical;
        enum EItemStatus mItemStatus;
        enum EItemBindType mItemBindType;
    };
    
    enum EItemStatus {
        eItemStatusCurse=0,
        eItemStatusNormal=1,
        eItemStatusBless=2,
        eItemStatusRandom=3,
        eItemStatusCnt=4
    };
    
}

// eCTrGoldItemBestListAck - подтверждение списка лучших золотых предметов.
if (ID == 5560){
    ushort mCnt;
    int mItem[mCnt]; // default [10] 
}

// eCTrGoldItemNewListAck - подтверждение списка новых золотых предметов.
if (ID == 5561){
    ushort mCnt;
    int mItem[mCnt]; // default: [10]
}

// eCTrGoldItemRecmdListAck - подтверждение списка рекомендованных золотых предметов.
if (ID == 5562){
    ushort mCnt;
    int mItem[mCnt]; // default: [10]
}

// eCTrGoldItemCateIdListAck - подтверждение списка идентификаторов категорий золотых предметов.
if (ID == 5563){
    ushort mCnt;
    struct ShopCatList mItem[mCnt]; // default [10]
    
    struct ShopCatList {
        short CategoryID;
        char CategoryName[61];
    };
}

// eCTrGoldItemPackageListAck - подтверждение списка пакетов золотых предметов.
if (ID == 5564){

}

// eCTrGoldItemNoticeListAck - подтверждение списка уведомлений о золотом предмете.
if (ID == 5566){
    ulong mSz;
    uchar mCnt;
    struct SInfo mInfo[mCnt]; // default: [30]
}

// eCTrGoldItemGetGoldAmtAck - подтверждение получения суммы золота за предмет.
// Количество рублей на счету
if (ID == 5574){
    int mGoldAmt;
}

// eCTrSetItemActivationAck - подтверждение активации предмета.
if (ID == 5614){
    unsigned int hz;
}

// eCTrGiftBoxExistAck - подтверждение наличия подарочного бокса.
if (ID == 5624){
    unsigned int hz;
}

// eCTrPcInvenQSlotInfoAck - подтверждение информации о слоте инвентаря персонажа.
if (ID == 5634){
    int mUnique;
    uchar mPcInvenQSlotInfo[8000];
}


// eCTrItemMallStateReq - запрос состояния магазина предметов.
if (ID == 5638){
    struct _SYSTEMTIME mTimeStamp;
}

// eCTrItemMallStateAck - подтверждение состояния магазина предметов.
if (ID == 5639){
    enum EState mState;
}

// eCTrItemMallTimeStampAck - подтверждение временной метки магазина предметов.
if (ID == 5640){
    struct _SYSTEMTIME mTimeStamp;
}

// eCTrLetterRefuseAck - подтверждение отказа от письма.
if (ID == 5650){
    int mIsOn;
}

// eCTrServerTickAck - подтверждение серверного тика.
if (ID == 5651){
    unsigned int ServerTick;
    unsigned short Year;
    unsigned short Month;
    unsigned short DayOfWeek;
    unsigned short Day;
    unsigned short Hour;
    unsigned short Minute;
    unsigned short Second;
    unsigned short Millisecond;
}

// eCTrWorldMapInfoAck - подтверждение информации о мировой карте.
if (ID == 5661){
    struct CMem mMapInfo[323]; // Возможно на корее 2023 лимит больше
    
    struct CMem {
        int mMapVisible;
        int mPartyVisible;
        int mListVisible;
    };
}

// eCTrInfoVolitionOfHonorAck - подтверждение информации о воле чести.
if (ID == 5669){
    short mVolitionOfHonor;
}

// eCTrInfoHonorPointAck - подтверждение информации о очках чести.
if (ID == 5670){
    uint mHonorPoint;
}

// eCTrInfoChaosPointAck - подтверждение информации о очках Хаоса.
if (ID == 5671){
    //uint hz;
    //uint hz;
    uint64 mChaosPoint;
}

// eCTrChaosBattleAdvantageInfoAck - подтверждение информации о преимуществах в битве Хаоса.
if (ID == 5688){
    enum EChaosBattleAdvantage mAdvantage;
    
    enum EChaosBattleAdvantage {
        eAdvantageLevel0=0,
        eAdvantageLevel1=1,
        eAdvantageLevel2=2,
        eAdvantageLevel3=3,
        eAdvantageLevel4=4,
        eAdvantageLevel5=5,
        eAdvantageLevelCnt=6
    };
}

// eCTrPopupGuideConditionListAck - подтверждение списка условий всплывающего руководства.
if (ID == 5710){
    byte mRegPossible;
    ushort mCnt;
    struct CMem5710 mPopupGuideCondition[mCnt];
    //struct CMem5710 {
    //    int mMapVisible;
    //    int mPartyVisible;
    //    int mListVisible;
    //};
    struct CMem5710{
        int mConID;
        int mConType;
        int mAParm;
        int mBParm;
        int mCParm;
        ubyte mForce;
        };
}

// eCTrQuestSetTimerAllAck - подтверждение установки таймеров для всех заданий.
if (ID == 5753){
    ushort mCnt;
    struct SInfo mInfo[50];
}

// eCTrQuestConStateAllAck - подтверждение состояния контроля всех заданий.
if (ID == 5754){
    ushort mCnt;
    struct SInfo mInfo[mCnt]; // default: [400]
}

// eCTrQuestRepeatInitAllAck - подтверждение инициализации всех повторных заданий.
if (ID == 5762){
    unsigned int hz;
}

// eCTrQuestProcEventAck - подтверждение обработки события задания.
if (ID == 5772){
    ulong mCnt;
    int mQuestNo[mCnt]; // default: [1024]
}

// eCTrSkillTreeNodeItemListAck - подтверждение списка предметов узла навыков.
if (ID == 5773){
    unsigned int Count;
    struct {
        unsigned int ID;
        signed int hz;
    } HZ[Count]<optimize=false>;
}

// eCTrSkillPackListAck - подтверждение списка пакетов навыков.
if (ID == 5775){
    uint mCnt;
    struct {
        uint mSPID;
        int mEndTick;
    } SkillPack[mCnt]<optimize=false>;
}

// eCTrCertifiedKeyAck - подтверждение сертифицированного ключа.
if (ID == 5812){
    uint mCertifiedKey;
}

// eCTrSkillTreeNodeStateAck - подтверждение состояния узла навыков.
if (ID == 5781){
    uint mCnt;
    struct {
        uint mSTNID;
        enum EState mState;
    } NodeState[mCnt]<optimize=false>;
    
    enum EState {
        eStClosed=0,
        eStOpen=1,
        eStListen=2,
        eStConnecting=3,
        eStEstablish=4,
        eStBroken=5,
        eStReusing=6,
        eStReusedWait=7,
        eStClosing=8,
        eStateCnt=9
    };
}

// eCTrPcSkillTreePointAck - подтверждение очков дерева навыков персонажа.
if (ID == 5786){
    unsigned short hz;
    unsigned short hz;
}

// eCTrPcRestExpAck - подтверждение опыта отдыха персонажа.
if (ID == 5803){
    uint mRestExp;
    enum ERestExpType mRestExpType;
    
    enum ERestExpType {
        eRestExpGuild=0,
        eRestExpActivate=1,
        eRestExpDeactivate=2,
        eRestExpCnt=3
    };
}

// eCTrCheckNeedMoneyReq - запрос на проверку необходимости денег.
if (ID == 5813){
    short mUserNo;
    ushort mLoginTick;
}

// eCTrBeadListAck - подтверждение списка бус.
if (ID == 5877){
    uchar mSeq;
    ulong mCnt;
    struct SInfo mList[400];
    
    struct SInfo {
        uchar mIdx;
        struct _SYSTEMTIME mRegDate;
        char mHead[201];
    };
    struct _SYSTEMTIME {
        WORD wYear;
        WORD wMonth;
        WORD wDayOfWeek;
        WORD wDay;
        WORD wHour;
        WORD wMinute;
        WORD wSecond;
        WORD wMilliseconds;
    };  
}

// eCTrHistoricSiteOfFullMoonChangeAck - подтверждение изменения исторического места полной луны.
if (ID == 5888){
    enum EFullMoonState mState;
    uint mTotalTime;
    uint mRemainTime;
    enum EFullMoonState {
        eStateFullMoonNone=0,
        eStateFullMoon=1,
        eStateFullMoonCnt=2
    };
}

// eCTrRuinMonsterRespawnNotifyAck - подтверждение уведомления о возрождении монстра в руинах.
if (ID == 5911){
    
}

// eCTrEventMonShowAck - подтверждение показа монстра события.
// Не работает корректно мб
if (ID == 5928){
    uint mCnt;
    struct SMonInfo mList[mCnt];
    struct SMonInfo {
        int mMonNo;
    };
}

// eCTrCheckStoreListAck - подтверждение проверки списка магазина.
if (ID == 5941){
    unsigned int hz;
}

// eCTrAchieveList - список достижений.
if (ID == 5957){
    uchar mListCount;
    struct SAchievement mList[20];
    
    struct SAchievement {
        uchar mAchieveID;
        ubyte mIsComplete;
        ubyte mhasTrophy;
        ubyte mNewFlag;
        ushort mActionCount;
    };
}

// eCTrUnConfirmedCoinNotify - уведомление о неподтвержденных монетах.
if (ID == 5958){
    enum EItemChgReason mReason;
    ulong mUnConfirmedCoinCount;
    
    enum EItemChgReason {
        eIcrPickup=0,
        eIcrDrop=1,
        eIcrDie=2,
        eIcrStatus=3,
        eIcrRollback=4,
        eIcrExchangeIn=5,
        eIcrExchangeOut=6,
        eIcrGive=7,
        eIcrReinforce=8,
        eIcrCraft=9,
        eIcrBuy=10,
        eIcrSell=11,
        eIcrRecharge=12,
        eIcrCreatedByAdmin=13,
        eIcrReceiveLetter=14,
        eIcrStore=15,
        eIcrPopCastle=16,
        eIcrCreateGm=17,
        eIcrTake=18,
        eIcrFoodCreationModule=19,
        eIcrQuest=20,
        eIcrEvent=21,
        eIcrRewardExp=22,
        eIcrDrawingoutCastle=23,
        eIcrHuntTax=24,
        eIcrBetSiegeGamble=25,
        eIcrSettleSiegeGamble=26,
        eIcrJewelReinforce=27,
        eIcrNotExistSlot=28,
        eIcrMarathon=29,
        eIcrTeamBattle=30,
        eIcrTeamBattleRefun=31,
        eIcrRacingTicketBuy=32,
        eIcrConsignmentIn=33,
        eIcrConsignmentOut=34,
        eIcrPShopIn=35,
        eIcrPShopOut=36,
        eIcrTakeCoupon=37,
        eIcrGuildStore=38,
        eIcrPopGuildAccount=39,
        eIcrGSExchangeReceive=40,
        eIcrMaterialEvolution=41,
        eIcrMaterialDraw=42,
        eIcrGiftBox=43,
        eIcrItemMall=44,
        eIcrItemWarpping=45,
        eIcrPushItemGm=46,
        eIcrReinforceFail=47,
        eIcrUTGWPrize=48,
        eIcrStorage=49,
        eIcrCnsmUnreg=50,
        eIcrCnsmBuy=51,
        eIcrCnsmWithdraw=52,
        eIcrBeforeReinforce=53,
        eIcrReturnBead=54,
        eIcrRacingTicketSell=55,
        eIcrAddStackConfirm=56,
        eIcrItemIncSys=57,
        eIcrPcBangEffect=58,
        eIcrRoyalEffect=59,
        eIcrItemCreate=60,
        eIcrEventQuest=61,
        eIcrTeamRankPrize=62,
        elcrUseCoinPocket=63,
        elcrUseUnDefCoin=64,
        elcrCoinToTrophy=65,
        elcrJackpotConfirm=66,
        elcrJackpotReward=67,
        elcrRegionQuestReward=68,
        eIcrEventDrop=69,
        eIcrArenaFiercePrize=70,
        eIcrArenaBossPrize=71,
        eIcrJoinArenaRefun=72,
        elcrServantGathering=73,
        eIcrRmUse=100,
        eIcrRmDeprived=101,
        eIcrRmBoard=102,
        eIcrRmAttack=103,
        eIcrRmGuild=104,
        eIcrRmGuildSkill=105,
        eIcrRmReinforce=106,
        eIcrRmCraft=107,
        eIcrRmBuy=108,
        eIcrRmSell=109,
        eIcrRmRecharge=110,
        eIcrRmSendLetter=111,
        eIcrRmStore=112,
        eIcrRmPushCastle=113,
        eIcrRmDigest=114,
        eIcrRmFoodItemBreakMod=115,
        eIcrRmQuest=116,
        eIcrRmEvent=117,
        eIcrRmGateRepair=118,
        eIcrRmCreateGuild=119,
        eIcrRmRepairCastleGate=120,
        eIcrRmStoreFee=121,
        eIcrRmGuildSkillApply=122,
        eIcrRmBetSiegeGamble=123,
        eIcrRmSettleSiegeGamble=124,
        eIcrRmJewelReinforce=125,
        eIcrRmDracoRacing=126,
        eIcrRmRacingTicketSell=127,
        eIcrRmExpiredItem=128,
        eIcrRmConsignmentFee=129,
        eIcrRmProtectReinforcementSuccess=130,
        eIcrRmProtectReinforcementFailed=131,
        eIcrRmProtectItemDrop=132,
        eIcrRmGuildStore=133,
        eIcrRmTrashCan=134,
        eIcrRmPushGuildAccount=135,
        eIcrRmGSExchangeExchange=137,
        eIcrRmMaterialEvolution=138,
        eIcrRmMaterialDraw=139,
        eIcrRmWrapping=140,
        eIcrRmUTGWDie=141,
        eIcrRmSkillTreeDev=142,
        eIcrRmSkillPackDev=143,
        eIcrRmResetPcSkillTree=144,
        eIcrRmResetGkillTree=145,
        eIcrRmGuildRecruit=146,
        eIcrRmGuildRecruitMark=147,
        eIcrRmItemCnsmReg=148,
        eIcrRmItemCnsmRegFee=149,
        eIcrRmItemCnsmBuyFee=150,
        eIcrRmBeforeProtectReinforce=152,
        eIcrRmProtectReinforcementDown=153,
        eIcrRmPunchBeadHolePaper=154,
        eIcrRmBeadInserted=155,
        eIcrRmReturnBeadPaper=156,
        eIcrRmResetBeadHolePaper=157,
        eIcrRmBeadInsertFailed=158,
        eIcrRmRacingTicketBuy=159,
        eIcrRmStackConfirm=160,
        eIcrRmItemIncSys=161,
        eIcrRmItemCreate=162,
        elcrRmCoinCreate=163,
        elcrRmCoinToTrophy=164,
        eIcrRmGQMakingItem=165,
        elcrRmJackpotConfirm=166,
        elcrRmSummonSiegeGuard=167,
        eIcrRmResetServantSkillTree=168,
        eIcrRmResetServantEvolution=169,
        eIcrRmRenameServant=170,
        eIcrRmJoinArena=171,
        eIcrRmServantCombine=172,
        eIcrGoldenTreasureBox=174,
        eIcrBaseMaterial=175,
        eIcrBoxOfHero=176,
        eIcrCnt=177
    };
}

// eCTrAchieveCoinList - список монет достижений.
if (ID == 5960){
    uchar mListCount;
    struct SAchieveCoin mList[mListCount]; // default: [96]
    
    struct SAchieveCoin {
        int64 mSerialNo;
        int mItemID;
        ulong mCoinPoint;
        int mCoinGrade;
        int mCoinStar;
        ulong mSortKey;
        ubyte mIsSeizure;
        uchar mSlotNumber;
    };
}

// eCTrAchieveTrophyList - список трофеев достижений.
if (ID == 5961){
    uchar mListCount;
    struct SAchieveTrophy mList[mListCount]; // default: [20]
    
    struct SAchieveTrophy {
        ulong mPercent;
        ushort mLevel;
        ushort mLimitLevel;
        uchar mAchieveID;
        ubyte mIsEquiped;
        ushort mIncreaseHP;
        ushort mIncreaseMP;
        ushort mIncreaseWP;
    };
}

// eCTrMakingQuestRepeatTimeAck - подтверждение времени повторения создания задания.
if (ID == 5996){
    enum EQuestMakingType mType;
    int mCountDown;
    
    enum EQuestMakingType {
        eQuestMakingTypeNormal=1,
        eQuestMakingTypeGuild=2,
        eQuestMakingTypeEvent=3,
        eQuestMakingTypeCnt=4
    };
}

// eCTrQuestVisitStateAllAck - подтверждение состояния всех посещений задания.
if (ID == 5998){
    ushort mCnt;
    struct SInfo mInfo[mCnt]; // default: [250]
}

// eCTrIslandSkyEventNotifyAck - подтверждение уведомления о событии ""Островного Неба"".
if (ID == 6007){
    enum EIslandSkyEvent mState;
    ulong mTick;
    ulong mHuntingCnt[2];
    ulong mMaxHuntCnt;
    
    enum EIslandSkyEvent {
        eIslandSkyEventNone=0,
        eIslandSkyEventOfAngelCamp=1,
        eIslandSkyEventOfDevilCamp=2,
        eIslandSkyEventCnt=3
    };
}

// eCTrJackpotChangeStackLvAck - подтверждение изменения уровня стека джекпота.
if (ID == 6019){
    enum EIslandSkyCamp mCamp;
    enum EJackpotStackLv mStackLv;
    
    enum EIslandSkyCamp {
        eCampOfAngel=0,
        eCampOfDevil=1,
        eCampCnt=2
    };
    
    enum EJackpotStackLv {
        eJackpotStackLv1=0,
        eJackpotStackLv2=1,
        eJackpotStackLv3=2,
        eJackpotStackLv4=3,
        eJackpotStackLv5=4,
        eJackpotStackLvCnt=5
    };
}

// eCTrCalendarAgreementListAck - подтверждение списка соглашений календаря.
if (ID == 6034){
    //unsigned short hz;
    //unsigned int hz;
    
    int mIsComplete;
    ushort mCnt;
    struct SInfo mList[mCnt]; // default: [200]
}

// eCTrCalendarPcGroupListAck - подтверждение списка групп ПК в календаре.
if (ID == 6035){
    //unsigned byte hz;
    //unsigned int hz;
    
    int mIsComplete;
    ubyte mCnt; // ushort 
    struct SInfo mList[mCnt]; // default: [20]
    
}

// eCTrCalendarPcGroupMemberListAck - подтверждение списка участников группы ПК в календаре.
if (ID == 6036){
    //unsigned byte hz;
    //unsigned int hz;
    
    int mIsComplete;
    ubyte mCnt; // ushort
    struct SInfo mList[mCnt]; // default: [50]
}

// eCTrCalendarPcScheduleListAck - подтверждение списка расписаний ПК в календаре.
if (ID == 6037){
    //unsigned byte hz;
    //unsigned int hz;
    
    int mIsComplete;
    uchar mCnt;
    struct SInfo mList[mCnt]; // default: [150]
}

// eCTrCalendarWeekContentsListAck - подтверждение списка содержания на неделю в календаре.
if (ID == 6038){
    unsigned byte mCnt;
    struct {
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
    } mList[mCnt]<optimize=false>;
}


// eCTrCalendarDayContentsListAck - подтверждение списка содержания на день в календаре.
if (ID == 6039){
    unsigned byte mCnt;
    struct {
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
    } mList[mCnt]<optimize=false>;
}

// eCTrCalendarContinueContentsListAck - подтверждение списка продолжительного содержания в календаре.
if (ID == 6040){
    //unsigned byte Count;
    uchar mCnt;
    struct SInfo mList[mCnt]; // default: [100]   
}

// eCTrLevelupCoin - возможно, запрос или уведомление о повышении уровня монеты.
if (ID == 6065){
    int64 mMaxExp;
    int mListCount;
    struct SLevelupCoin mList[20];
    
    struct SLevelupCoin {
        int64 mExp;
        int mSection;
        int mRewardCoin;
        int mMinimumCoin;
        enum ELevelupCoinRewardType mType;
    };
    
    enum ELevelupCoinRewardType {
        ELevelupCoinRewardType1=0,
        ELevelupCoinRewardType2=1,
        ELevelupCoinRewardTypeCnt=2
    };
}

// eCTrLevelupCoinExpAck - подтверждение опыта за повышение уровня монеты.
if (ID == 6067){
    uint mLevel;
    uint mSection;
    uint64 mExp;
    uint64 mMaxExp;
}

// eCTrMacroInfoAck - подтверждение информации о макросе.
if (ID == 6086){
    int mVersion;
    struct SMacro_6086 mList[28];
    
    struct SMacro_6086 {
        uchar mID;
        uchar mSlot;
        char mName[7];
        uchar mIconNo;
        uchar mCommandCount;
        struct SMacroCommand_6086 mCommandList[16];
    };
    
    struct SMacroCommand_6086 {
        uchar mOrderNo;
        enum EMacroCommandRefType_6086 mRefType;
        int mRefID;
        int64 mRefParm;
    };
    
    enum EMacroCommandRefType_6086 {
        eItem=0,
        eSkill=1,
        eRefTypeCnt=2
    };
    
}

// eCTrServantInvenAck - подтверждение инвентаря слуги.
// Не тестил
if (ID == 6109){
    struct CPublicServantInven mPcServantInven;
    struct CPublicServantInven {
        ushort mCnt;
        struct CServantGoods mList[mCnt]; // default: [20]
    };
    
    struct CServantGoods {
        struct CGoods mGoods;
        struct CServantItem mServantItem;
    };
    
    struct CGoods {
        uchar mFlag;
        int64 mSerialNo;
        int mItemID;
        ulong mStack;
        ulong mEndTick;
        uchar mStatus;
        ushort mUseCount;
        ulong mEatTime;
        int mApplyAbnItemID;
        ulong mApplyAbnItemEndTick;
        ulong mOwner;
        int mTermOfEffectivity;
        uchar mItemBindType;
        uchar mRestoreCnt;
        uchar mHoleCount;
    };
    
    struct CServantItem {
        int64 mSerialNo;
        int mItemNo;
        char mName[7];
        short mLevel;
        int64 mExp;
        short mFriendly;
        short mSkillPoint;
        int mSkillTreePoint;
        int mIsRestore;
        struct CServantAbility mAbility;
        struct CServantAbility mAddAbility;
        short mCombineCount;
    };
    
    struct CServantAbility {
        short mStrength;
        short mDexterity;
        short mInteligence;
    };
}

// eCTrServantExpAck - подтверждение опыта слуги.
if (ID == 6114){
    unsigned short hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
}

// eCTrServantSkillTreeNodeItemListAck - подтверждение списка предметов дерева умений слуги.
if (ID == 6117){
    unsigned int hz;
}

// eCTrServantSkillTreePointAck - подтверждение очков дерева умений слуги.
if (ID == 6119){
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
}

// eCTrServantSkillPackListAck - подтверждение списка пакетов умений слуги.
if (ID == 6122){
    unsigned int hz;
}

// eCTrGameGuardAck - подтверждение GameGuard.
if (ID == 6131){
    char hz[100];
    }

// eCTrCalendarStartTournamentAck - подтверждение начала турнира в календаре.
if (ID == 6135){
    uint mIsStart;
    struct _SYSTEMTIME mStartDate;
}

// eCTrServantAbilityInfoAck - подтверждение информации о способностях слуги.
if (ID == 6136){
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
    unsigned int hz;
}


// eCTrServantTransformMonsterListAck - подтверждение списка монстров для трансформации слуги.
if (ID == 6140){
    unsigned int Count;
    struct {
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
        unsigned int hz;
    } HZ[Count]<optimize=false>;
}

// eCTrServantGatheringInfoAck - подтверждение информации о сборе слугой.
if (ID == 6172){
    enum EFlag mFlag;
    struct CServantGatheringInfo mServantGatheringInfo;
    
    enum EFlag {
        eFlagIsLogin=0,
        eFlagIsLogout=1,
        eFlagCnt=2
    };
    
    struct CServantGatheringInfo {
        int64 mServantSerial;
        struct CTime mEndDate;
    };
    
    struct CTime {
        struct _SYSTEMTIME mLocalTm;
    };
    
    
}"
dcE1mTTy,data808,TestGuy1,JSON,Tuesday 9th of January 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '7fc6bdccc3b0cfb39bc455ad8296baac6a05654f3e96eab803637f4292cab96f1d4b144a16c778e4217925801a636ca859da260be50d18f0d2ef8eccc5e310fe0b10d399716d73d6d825f9be0e2cb07238a7ee33d679dae581fb758a021e8f3e2435b40570eccb7b53ccbb5253896ebb921b2144ccc5ef0c71edfa0541fcb4b6',
  otherdata: [
    '53dd8eab2127f40f1be32fb33b47e573',
    '3979740686cc677c221d0dbfa4af2de6',
    '6603b2730498b01590dedbd4490dc893',
    'f6399239cb2eafe68815140fea687f31',
    'edbf61e2d84433c50ffdee958f1e1b74',
    'c4747df6ab91e8af931eab2414fb10a5',
    '7cf29bafb6dfa5e04b1a30e77b0e55ac',
    '3eb8117ada6a8a325a85e366d7e72d58'
  ]
}"
6taNHSX4,Untitled,hoz65105,HTML,Tuesday 9th of January 2024 05:55:57 AM CDT,https://pastebin.com/4YV7UrNz
fUh5nZUf,foodpros.com - view_item,chiragsolanki,JavaScript,Tuesday 9th of January 2024 05:42:04 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: ""GA4_view_item"",                   // name of the event. In this case, it always must be GA4_view_item
  ecommerce: {
    currency: ""USD"",
    value: 449.00,                            // total value (product value * quantity)
    items: [
    {
      item_id: ""product1"",                       // insert an actual product id
      item_name: ""Wisco 561 16 Pizza Oven"",    // insert an product name
      item_brand: ""Wisco Industries"",            // insert an actual product brand
      item_category: ""Pizza Ovens & Warmers"",   // insert an actual product top-level category
      price: 449.00,                            // insert an actual product price
      quantity: 1                              // product quantity
    }
    ]
  }
});"
RytprksB,🤑 G2A.com Refund Exploit Jan 2024 🤑,G2ARefundExploit,GetText,Tuesday 9th of January 2024 05:26:38 AM CDT,"G2A.com refund exploit updated guide 
Any item for free on G2A.com such as Amazon, Steam, and any other gift cards.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_354685.pdf
 
Working as of
09 January 2024"
QBmu7sCv,array basics,BojidarDosev,C++,Tuesday 9th of January 2024 05:24:35 AM CDT,"#include <iostream>
using namespace std;

void reverseArray(int arr[], int size) {
	int start = 0;
	int end = size - 1;

	while (start < end) {
		// Swap elements at start and end indices
		int temp = arr[start];
		arr[start] = arr[end];
		arr[end] = temp;

		// Move towards the center of the array
		start++;
		end--;
	}
}

int main()
{
    int numbers[5] = { 2,5,8,10,15 };
	int sum = 0;
	int max = 0;
	int input;
	int flag;

	//array size
	int arr = sizeof(numbers) / sizeof(int);
	//cout << arr;

	for (int i = 0; i < arr; i++)
	{
		sum = numbers[i] + sum;
	}
	cout << ""Sum of the array is: "" <<sum <<""\n"";

	cout << ""Avg of the array is: "" << sum/arr << ""\n"";
	for (int i = 0; i < arr; i++)
	{
		if (numbers[i] > max)
		{
			max = numbers[i];
		}
	}

	cout << ""The max element of the array is: "" << max << ""\n"";
	
	cout << ""Your number is: "" << ""\n"";
	cin >> input;
	for (int i = 0; i <arr; i++)
	{
		if (input == numbers[i])
		{
			flag = 1;
			break;
		}
		else flag = 0;
	}
	if (flag == 1)
	{
		cout << ""Your number is in the array!"" << ""\n"";
	}
	else cout << ""Your number is not in the array!"" << ""\n"";

	//smqna na 3ti element v masiva i otpechatwane 
	for (int i = 0; i <arr; i++)
	{
		if (i == 2)
		{
			numbers[2] = 20;
		}
		cout << numbers[i] << "" "";
		cout << ""\n"";
	}
	reverseArray(numbers, arr);

	// Print the reversed array
	cout << ""Reversed Array: "";
	for (int i = 0; i < arr; i++) {
		cout << numbers[i] << "" "";
	}
	cout << endl;

	
}
"
HvTJbyBE,Modular multiplication,TimmyChannel,C#,Tuesday 9th of January 2024 05:19:07 AM CDT,"using System.Numerics;

try
{
    Console.WriteLine(""Выберите режим работы программы:"");
    Console.WriteLine(""1. Ввести данные вручную"");
    Console.WriteLine(""2. Использовать тестовые данные"");
    Console.Write(""Ваш выбор: "");
    string mode = Console.ReadLine();

    if (mode == ""1"")
    {
        Console.Write(""a = "");
        int a = int.Parse(Console.ReadLine());

        Console.Write(""b = "");
        int b = int.Parse(Console.ReadLine());

        Console.Write(""n = "");
        int n = int.Parse(Console.ReadLine());

        var T = new BigInteger(a) * new BigInteger(b);
        int invN = ModInverse(n, b);
        if (invN == -1)
        {
            Console.WriteLine(""Обратного значения не существует"");
            return;
        }
        var m = T * invN % b;
        var u = (T + m * n) / b;

        Console.WriteLine($""Результат u = {u}"");
        Console.ReadLine();
    }
    else if (mode == ""2"")
    {
        // Заданные значения для проверки
        int[] aValues = { 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925 };
        int[] bValues = { 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925, 27056, 59259, 25925 };
        int[] nValues = { 21249, 22225, 31877, 65060, 40417, 24461, 39501, 8339, 9560, 7209, 38407, 64775, 17018, 51130, 4717, 58183, 33683, 27851, 17354, 19168, 16732, 30270, 23737, 59423, 36199, 9 };
        int[] uExpected = { 37629, 20959, 33281, 62342, 19752, 32000, 56446, 58723, 19095, 64964, 13501, 28287, 36720, 383, 3482, 28050, 50444, 16293, 5802, 61867, 33550, 21881, 55090, 26725, 33952, 1 };

        for (int i = 0; i < aValues.Length; i++)
        {
            int a = aValues[i];
            int b = bValues[i];
            int n = nValues[i];
            int expectedU = uExpected[i];

            var T = new BigInteger(a) * new BigInteger(b);
            int invN = ModInverse(n, b);
            if (invN == -1)
            {
                Console.WriteLine(""Обратного значения не существует\n"");
                continue;
            }
            var m = T * invN % b;
            var u = (T + m * n) / b;

            Console.WriteLine($""Проверка значений a={a}, b={b}, n={n}:"");
            Console.WriteLine($""Рассчитанное u = {u}, ожидаемое u = {expectedU}"");
            Console.WriteLine(u == expectedU ? ""Результат верный.\n"" : ""Результат неверный.\n"");
        }
        Console.ReadLine();
    }
    else
    {
        Console.WriteLine(""Неверный ввод. Выберите 1 или 2."");
        Console.ReadLine();
    }
}
catch (Exception e)
{
    Console.WriteLine($""Error: {e.Message}"");
    Console.ReadLine();
}

// Функция для нахождения обратного значения по модулю с использованием BigInteger.ModPow
static int ModInverse(int a, int m)
{
    a %= m;
    for (int x = 1; x < m; x++)
    {
        if ((a * x) % m == 1)
        {
            return x;
        }
    }
    return -1;
}

"
WRJ0RgVy,unknown,exge,HTML,Tuesday 9th of January 2024 05:14:00 AM CDT,"    <h1>Purchase History</h1>

<p>This list does not include licenses purchased through Microsoft Store.</p>



    <hr>
    <table class=""blackText"" style=""border-spacing:20px 8px;"">
        <tr>
            <td>History ID</td>
            <td>105687</td>
        </tr>
        <tr>
            <td>Product</td>
            <td>
                EmEditor
                
                
                
                    &#32;(Lifetime license)
                
            </td>
        </tr>
        <tr>
            <td>Quantity</td>
            <td>1</td>
        </tr>
        <tr>
            <td>Registration date (UTC)</td>
            <td>November 13, 2009</td>
        </tr>
        <tr>
            <td>Purchase date (UTC)</td>
            <td>January 11, 2007</td>
        </tr>
        <tr>
            <td>Expiration date (UTC)</td>
            <td>
                
            </td>
        </tr>
        
        <tr>
            <td>Reseller</td>
            <td>RegNow</td>
        </tr>
        <tr>
            <td>Order ID</td>
            <td>1168544028-4699-827666</td>
        </tr>
        <tr>
            <td>Registration key</td>
            <td><code>DRNZZ-2598R-VA222-RZURT-GZ3VU</code></td>
        </tr>
        
            <tr>
                <td>Registration key (v13)</td>
                <td><code>CRNZZ-2598R-WGUPN-JYBRZ-4U4BM</code></td>
            </tr>
        
        
            <tr>
                <td>Registration key (v12)</td>
                <td><code>BRNZZ-2598R-H3MZ3-CGH56-MHM8Y</code></td>
            </tr>
        
        
            <tr>
                <td>Registration key (v10/v11)</td>
                <td><code>ARNZZ-2598R-TKSZP-23538-MSKL9</code></td>
            </tr>
        
        
            <tr>
                <td>Registration key (v9)</td>
                <td><code>v9:<a href=""/cdn-cgi/l/email-protection"" class=""__cf_email__"" data-cfemail=""ee8b839dae838f9b9c8b9cc39d9a9c8186c08d8183"">[email&#160;protected]</a>:rn:105687:1::c0e9af2305002003bd23e88c1d4be260</code></td>
            </tr>
        
        <tr>
            <td>Status</td>
            <td>
                
                    Approved
                
            </td>"
L3UJruNs,music test,aregrubb,Lua,Tuesday 9th of January 2024 05:08:20 AM CDT,"-- config

track_1 = peripheral.wrap(""left"")
track_2 = peripheral.wrap(""back"")
track_3 = peripheral.wrap(""right"")
track_4 = peripheral.wrap(""top"")

function bass(note_2)
	for a2 = 1,note_2,1 do
		track_2.changeNote()
	end
	track_2.playeNote()
	note_2_left = 24 - note_1
	for a2 = 0,note_2_left,1 do
		track_2.changeNote()
	end
end

function bassdrum(note_1)
--    note_1 = tonumber(note_1)
    for a1 = 1,note_1,1 do
            track_1.changeNote()
    end
    track_1.playNote()
    note_1_left = 24 - note_1
    for b1 = 0,note_1_left do
        track_1.changeNote()
    end
end

function bdbeat()
    bassdrum(0)
    bassdrum(0)
    bassdrum(0)
    bassdrum(0)
end

function bassbeat()
	bass(0)
	bass(7)
	bass(0)
	bass(7)
end

while true do
    parallel.waitForAll(bdbeat,bass)
end"
ke5n2jH5,Untitled,vladislav_larionov,C++,Tuesday 9th of January 2024 04:54:48 AM CDT,"#include ""requesthandler.h""

RequestHandler::RequestHandler()// : HttpRequestHandler()
{
    router.addRoute(""GET"", ""^/users/(\\w*)/?$"", this, &RequestHandler::handleGetUsername);
    router.addRoute({""GET"", ""POST""}, ""^/gzipTest/?$"", this, &RequestHandler::handleGzipTest);
    router.addRoute({""GET"", ""POST""}, ""^/formTest/?$"", this, &RequestHandler::handleFormTest);
    router.addRoute(""GET"", ""^/errorTest/(\\d*)/?$"", this, &RequestHandler::handleErrorTest);
    router.addRoute(""GET"", ""^/asyncTest/(\\d*)/?$"", this, &RequestHandler::handleAsyncTest);
}

void RequestHandler::handle(HttpRequest *request, HttpResponse *response)
{
    // If this is handled another way, then do nothing
    if (router.route(request, response))
        return;

    if (request->mimeType().compare(""application/json"", Qt::CaseInsensitive) != 0)
        return response->setError(HttpStatus::BadRequest, ""Request body content type must be application/json"");

    QJsonDocument jsonDocument = request->parseJsonBody();
    if (jsonDocument.isNull())
        return response->setError(HttpStatus::BadRequest, ""Invalid JSON body"");

    QJsonObject object;
    object[""test""] = 5;
    object[""another test""] = ""OK"";

    response->setStatus(HttpStatus::Ok, QJsonDocument(object));
}

void RequestHandler::handleGetUsername(const QRegularExpressionMatch &match, HttpRequest *request, HttpResponse *response)
{
    QString username = match.captured(1);
    QJsonObject object;

    object[""username""] = username;

    response->setStatus(HttpStatus::Ok, QJsonDocument(object));
}

void RequestHandler::handleGzipTest(const QRegularExpressionMatch &match, HttpRequest *request, HttpResponse *response)
{
    QString output = ""read 24 bytes \
            read 24 bytes = 48 \
            read 48 bytes = 96 \
            read = \
            \
            \
            \
            1024 = min \
            128 * 1024 = max \
            \
            compression = next power of two chunk size \
            \
            decompression = next power of two chunk size (data * 2) \
            Just use that as the chunk size \
            \
            If only 16 bytes, then je"";

    if (request->headerDefault(""Content-Encoding"", """") == ""gzip"")
    {
        qInfo() << request->parseBodyStr();
    }

    response->setStatus(HttpStatus::Ok, output, ""text/plain"");
    response->compressBody();
}

void RequestHandler::handleFormTest(const QRegularExpressionMatch &match, HttpRequest *request, HttpResponse *response)
{
    auto formFields = request->formFields();
    auto formFiles = request->formFiles();

    for (auto kv : formFields)
    {
        qInfo().noquote() << QString(""Field %1: %2"").arg(kv.first).arg(kv.second);
    }

    for (auto kv : formFiles)
    {
        QByteArray data = kv.second.file->readAll();
        qInfo().noquote() << QString(""File %1 (%2) size=%3: %4"").arg(kv.first).arg(kv.second.filename).arg(kv.second.file->size()).arg(QString(data));

        kv.second.file->copy(QString(""%1/Desktop/output/%2"").arg(QDir::homePath()).arg(kv.second.filename));
    }

    response->setStatus(HttpStatus::Ok);
}


void RequestHandler::handleErrorTest(const QRegularExpressionMatch &match, HttpRequest *request, HttpResponse *response)
{
    int statusCode = match.captured(1).toInt();
    HttpStatus status = (HttpStatus)statusCode;

    response->setError(status, ""There was an error here. Details go here"");
}

void RequestHandler::handleAsyncTest(const QRegularExpressionMatch &match, HttpRequest *request, HttpResponse *response)
{
    int delay = match.captured(1).toInt();
    QTimer *timer = new QTimer(this);

    connect(response, &HttpResponse::cancelled, [=]() {
        qInfo() << ""Response was cancelled, stopping timer"";

        // Deleting timer will cancel it so it won't be called
        delete timer;
    });

    connect(timer, &QTimer::timeout, [=]() {
        qInfo() << ""Timeout reached"";

        delete timer;
        response->setStatus(HttpStatus::Ok);
    });

    timer->start(delay * 1000);
}
"
KyPDGn0n,Untitled,vladislav_larionov,C++,Tuesday 9th of January 2024 04:53:48 AM CDT,"#ifndef REQUESTHANDLER_H
#define REQUESTHANDLER_H

#include <QTimer>
#include <QObject>

#include ""httpServer/httpRequestHandler.h""
#include ""httpServer/httpRequestRouter.h""
#include ""httpServer/util.h""


class RequestHandler : public HttpRequestHandler
{
private:
    HttpRequestRouter router;

public:
    explicit RequestHandler();
   // ~RequestHandler() {};
    void handle(HttpRequest *request, HttpResponse *response);

    void handleGetUsername(const QRegularExpressionMatch &match, HttpRequest *request, HttpResponse *response);
    void handleGzipTest(const QRegularExpressionMatch &match, HttpRequest *request, HttpResponse *response);
    void handleFormTest(const QRegularExpressionMatch &match, HttpRequest *request, HttpResponse *response);
    void handleErrorTest(const QRegularExpressionMatch &match, HttpRequest *request, HttpResponse *response);
    void handleAsyncTest(const QRegularExpressionMatch &match, HttpRequest *request, HttpResponse *response);
};

#endif // REQUESTHANDLER_H
"
gKw6ynXD,Untitled,vladislav_larionov,CMake,Tuesday 9th of January 2024 04:47:27 AM CDT,"# SPDX-FileCopyrightText: 2023 Open Mobile Platform LLC <community@omp.ru>
# SPDX-License-Identifier: BSD-3-Clause

cmake_minimum_required (VERSION 3.1)

project(HttpServer)
include(GNUInstallDirs)

find_package (Qt5 COMPONENTS Core Network Quick REQUIRED)

set(SOURCES
    HttpServer/src/httpServer/httpConnection.cpp
    HttpServer/src/httpServer/httpRequest.cpp
    HttpServer/src/httpServer/httpRequestRouter.cpp
    HttpServer/src/httpServer/httpResponse.cpp
    HttpServer/src/httpServer/httpServer.cpp
    HttpServer/src/httpServer/util.cpp
)

set(HEADERS
    HttpServer/src/httpServer/httpConnection.h
    HttpServer/src/httpServer/httpCookie.h
    HttpServer/src/httpServer/httpRequest.h
    HttpServer/src/httpServer/httpRequestHandler.h
    HttpServer/src/httpServer/httpRequestRouter.h
    HttpServer/src/httpServer/httpResponse.h
    HttpServer/src/httpServer/httpServer.h
    HttpServer/src/httpServer/httpServerConfig.h
    HttpServer/src/httpServer/util.h
)

add_library(${PROJECT_NAME} SHARED ${SOURCES} ${HEADERS})

target_include_directories(${PROJECT_NAME}
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/HttpServer/src/httpServer>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

set_target_properties(${PROJECT_NAME} PROPERTIES VERSION 1)
set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 1)

set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER ""${HEADERS}"")
add_compile_definitions(HTTPSERVER_LIBRARY)
add_compile_definitions(QT_DEPRECATED_WARNINGS)
target_link_libraries(${PROJECT_NAME}
    Qt5::Quick
    Qt5::Core
    z
)

install(TARGETS ${PROJECT_NAME}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
)
"
WRwaxGFj,Untitled,vladislav_larionov,CMake,Tuesday 9th of January 2024 04:46:18 AM CDT,"# SPDX-FileCopyrightText: 2023 Open Mobile Platform LLC <community@omp.ru>
# SPDX-License-Identifier: BSD-3-Clause

cmake_minimum_required (VERSION 2.8)

project(encoding_server)

include(GNUInstallDirs)

add_executable(${PROJECT_NAME}
    src/encodingserver.cpp
    src/requesthandler.h
    src/requesthandler.cpp
)

target_include_directories(${PROJECT_NAME} PRIVATE
    $<BUILD_INTERFACE:
    ${AURORA_INCLUDE_DIRS}
>)

message(""!!! ${CMAKE_SOURCE_DIR}/3rdparty/HttpServer/HttpServer/src"")
message(""!!! ${CMAKE_BINARY_DIR}/3rdparty/HttpServer"")

target_include_directories(${PROJECT_NAME} PUBLIC
    ${CMAKE_SOURCE_DIR}/3rdparty/HttpServer/HttpServer/src
    ""${PROJECT_BINARY_DIR}""
)

target_link_libraries(${PROJECT_NAME}
    HttpServer
)

install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION ${CMAKE_INSTALL_LIBEXECDIR}/ru.auroraos.ProcessLauncher/
)
"
MjVt714e,Check Google Consent Mode on CookieBot,prabapro,JavaScript,Tuesday 9th of January 2024 04:45:42 AM CDT,"// Print dataLayer
(function(w, d, t) {
  for (i of w[d])
    t += JSON.stringify(i).replaceAll(/\""\d{1,}\"":/g, """") + ""\n"";
  console.log(t);
})(window, ""dataLayer"", """")


// Reload CookiBot consent banner
""Cookiebot"" in window
  ? Cookiebot.consented && (Cookiebot.deleteConsentCookie(), location.reload())
  : console.warn(""Cookiebot methods unavailable!"");"
VPr3tPW8,foodpros.com - begin_checkout,chiragsolanki,JavaScript,Tuesday 9th of January 2024 04:44:05 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: ""GA4_begin_checkout"",   // name of the event. In this case, it always must be GA4_begin_checkout
  ecommerce: {
    currency: ""USD"",
    value: 838.99,  // order total (price of all products)
    items: [
    {
      item_id: ""product1"",                       // insert an actual product ID
      item_name: ""Wisco 561 16 Pizza Oven"",    // insert an product name
      item_brand: ""Wisco Industries"",            // insert an actual product brand
      item_category: ""Pizza Ovens & Warmers"",   // insert an actual product top-level category
      price: 449.00,                            // insert an actual product price
      quantity: 1                              // product quantity
    },

    {
      item_id: ""product2"",                       // insert an actual product ID
      item_name: ""Gourmet Cafe ImageTrak LED Coins"",    // insert an product name
      item_brand: ""FCI"",            // insert an actual product brand
      item_category: ""Beer Cave Signs"",   // insert an actual product top-level category
      price: 389.99,                            // insert an actual product price
      quantity: 1                              // product quantity
    }
    ]
  }
});"
TpL3x9hA,foodpros.com - add_to_cart,chiragsolanki,JavaScript,Tuesday 9th of January 2024 04:30:01 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: ""GA4_add_to_cart"",                   // name of the event. In this case, it always must be GA4_add_to_cart
  ecommerce: {
    currency: ""USD"",
    value: 449.00,                            // total value (product value * quantity)
    items: [
    {
      item_id: ""product1"",                       // insert an actual product id
      item_name: ""Wisco 561 16 Pizza Oven"",    // insert an product name
      item_brand: ""Wisco Industries"",            // insert an actual product brand
      item_category: ""Pizza Ovens & Warmers"",   // insert an actual product top-level category
      price: 449.00,                            // insert an actual product price
      quantity: 1                              // product quantity
    }
    ]
  }
});"
xvyaGcNg,Simple DOM Notify Button,darraghd493,JavaScript,Tuesday 9th of January 2024 04:18:08 AM CDT,"const notifyButton = {}

notifyButton.button = (text, callback) => {
  var zNode = document.createElement('button');
  zNode.innerHTML = t;ext
  zNode.style.fontFamily = ""Arial"";
  zNode.style.fontSize = ""16px"";
  zNode.style.fontWeight = ""500"";
  zNode.style.padding = ""12px"";
  zNode.style.borderRadius = ""24px"";
  zNode.style.background = ""rgb(22,22,22)"";
  zNode.style.color = ""rgb(252, 252, 252)"";
  zNode.style.boxShadow = ""0px 0px 16px black"";
  zNode.style.top = ""50%"";
  zNode.style.left = ""50%"";
  zNode.style.transform = ""translate(-50%, -50%)"";
  zNode.style.position = ""absolute"";
  zNode.style.cursor = ""pointer"";
  zNode.addEventListener('click', function() {
    callback();
    zNode.remove();
    zDivNode.remove();
  })
  
  var zDivNode = document.createElement('div');
  zDivNode.style.zIndex = 9999;
  zDivNode.style.position = ""absolute"";
  zDivNode.style.top = ""0"";
  zDivNode.style.left = ""0"";
  zDivNode.style.width = ""100vw"";
  zDivNode.style.height = ""100vh"";
  zDivNode.style.backdropFilter = ""blur(24px)"";
  
  zDivNode.appendChild(zNode);
  document.body.appendChild(zDivNode);
}"
kykPjM6m,1. Reverse String,Spocoman,C++,Tuesday 9th of January 2024 04:15:23 AM CDT,"#include <iostream>
#include <string>
#include <stack>

using namespace std;

int main() {
    string s;
    getline(cin, s);

    stack<char> chars;

    for (int i = 0; i < s.length(); i++) {
        chars.push(s[i]);
    }

    while (!chars.empty()) {
        cout << chars.top();
        chars.pop();
    }

    cout << endl;
    return 0;
}"
6fEJJyBe,Untitled,nikiworldbg,HTML,Tuesday 9th of January 2024 04:14:19 AM CDT,"<html>

<head><title> Printers</title></head>



<body text-yellow bgcolor=silver>

<center><font color=red size=6 >Промоции: НР Принтери</font>

</center><br>

<table border=""3"" bordercolor=blue bgcolor=3300ff>

<tr bgcolor=110066>

<th>PRINTER</th>

<th> Скорост на печат</th>

<th> Разделителна способност </th>

<th> Снимка </th> </tr>

<tr>

<th bgcolor=110066>HP Photosmart C5380 AiO</th>

<td bgcolor=3333ff> Up to 31 ppm</td> <td bgcolor=3333ff> 600 x 600 dpi</td>

<td> <img src=""printer.jpg"" width=200 height=100></td></tr>

<tr>

<th bgcolor=110066>HP LaserJet M1120 MFP</th>

<td bgcolor=3333ff> Up to 19 ppm</td> <td bgcolor=3333ff> 600 x 600 dpi </td>

<td> <img src=""printer.jpg"" width=200 height=100></td></tr>

</table></body></html>"
QVtmCSLq,LongestIncreasingSequence,zarkoto223,JavaScript,Tuesday 9th of January 2024 04:07:02 AM CDT,"let lines=Number(gets());   
let arr=[];
let tempSeq=1;
let totalSeq=1;

for (let i=0;i<lines;i++){
    let nums=Number(gets());
    
    arr.push(nums);
    
}for(let j=0;j<arr.length;j++){
    if(arr[j]>arr[j-1]){
        tempSeq++;
   
    }else{
        tempSeq=1;
    }
    if(tempSeq>totalSeq){
        totalSeq=tempSeq;
    }
}console.log(totalSeq);"
U8CJMdSR,LongestBlockInString,zarkoto223,JavaScript,Tuesday 9th of January 2024 03:57:46 AM CDT,"let input = ['aaabbbccccCCCCC'];
let print = this.print || console.log;
let gets = this.gets || ((arr, index) => () => arr[index++])(input, 0);

let arr = gets().split('');


let tempCount = 1;
let totCount = 1;
let currentSymb = arr[0];
let longest = currentSymb;

for (let i = 0; i <= arr.length; i++) {
    if (arr[i] === arr[i - 1]) {
        tempCount++;
        currentSymb += arr[i];
    } else {
        if (tempCount > totCount) {
            totCount = tempCount;
            longest = currentSymb
        } tempCount = 1;
        currentSymb = arr[i];
    }
}
console.log(longest)"
4w0b1B9U,Untitled,muktoapb,PHP,Tuesday 9th of January 2024 03:56:27 AM CDT,"
// get total submitted entries
function get_total_submitted_entries( $form_id, $post_id ) {

	$elementor_submission_query = ElementorPro\Modules\Forms\Submissions\Database\Query::get_instance();

$q = ""
    SELECT * FROM `{$elementor_submission_query->get_table_submissions()}` subh 
    WHERE subh.element_id = '%s' AND subh.post_id = %d
"";

$where_values = [$form_id, $post_id];

global $wpdb;

$current_from_ids = $wpdb->get_results( $wpdb->prepare( $q , $where_values ) );

$only_from_ids = array_column( $current_from_ids, 'id' );


//get all email
$table_name = $wpdb->prefix . 'e_submissions_values';
$results = $wpdb->get_results( ""SELECT
s.submission_id,
s.value AS email
FROM $table_name AS s
INNER JOIN (
SELECT submission_id, MAX(id) AS max_id
FROM $table_name
WHERE `key` = 'email'
GROUP BY submission_id
) AS e ON s.submission_id = e.submission_id AND s.id = e.max_id"");

$all_emails = array();
//loop throw result
foreach ($results as $result) {
    //if submission_id is in $only_from_ids
    if (in_array($result->submission_id, $only_from_ids)) {
        $all_emails[] = $result->email;
    }
}

return $all_emails;
}

// Validate the email fields for valid domains
add_action( 'elementor_pro/forms/validation/email', function( $field, $record, $ajax_handler ) {
  // Specify the form name to target
  // $form_name = 'testfrom'; // Replace 'mukto-form' with the actual form name
  $form_name = array('testfrom','testfrom2'); // array('testfrom','mukto-form-2')

  // Check if the current form matches the targeted form name
  if (  in_array( $record->get_form_settings( 'form_name' ), $form_name )  ) {
      // Please include the email domains you would like to block in this list
      $target_form_id = $record->get_form_settings( 'id' );
      $target_post_id = $record->get_form_settings( 'form_post_id' );
      $invalidDomains = get_total_submitted_entries( $target_form_id, $target_post_id );
      
      // Email validation
      if ( in_array($field['value'], $invalidDomains ) ) {
        $ajax_handler->add_error( $field['id'], ""You alredy submited with this email!"" );
      }
  }
}, 10, 3 );
"
PpqbjX0w,Mod_Messages_RE1,Sigma1084,C++,Tuesday 9th of January 2024 03:53:47 AM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int n;
vector<vector<int>> g;
vector<int> f;

// p[k][u] = par^(2^k)[u]
// m[k][u] = min(fs of (u to par^(2^k)[u]))
constexpr int K = 20;
array<vector<int>, K> p, m;
vector<int> d;  // depth
auto &par = p[0];  // parent

void dfs(int u) {
    for (auto v: g[u]) {
        if (v == par[u]) continue;
        par[v] = u;
        d[v] = d[u] + 1;
        dfs(v);
    }
}

void preCompute() {
    par[0] = 0;
    d[0] = 0;
    dfs(0);

    m[0].resize(n);
    for (int u = 0; u < n; ++u) {
        m[0][u] = f[par[u]];
    }

    for (int k = 1; k < K; ++k) {
        p[k].resize(n);
        m[k].resize(n);
        for (int u = 0; u < n; ++u) {
            p[k][u] = p[k-1][p[k-1][u]];
            m[k][u] = min(m[k-1][u], m[k-1][p[k-1][u]]);
        }
    }
}

int lca(int u, int v) {
    if (d[u] > d[v]) {
        swap(u, v);
    }

    for (int k = K - 1; d[u] < d[v]; --k) {
        if ((1 << k) <= d[v] - d[u]) {
            v = p[k][v];
        }
    }

    if (u == v) {
        return u;
    }

    for (int k = K - 1; k >= 0; --k) {
        if (p[k][u] != p[k][v]) {
            u = p[k][u];
            v = p[k][v];
        }
    }

    return par[u];
}

/**
 * Ascend d steps from u with currently having val
 */
int asc(int val, int u, int d) {
    // cerr << ""Performing asc, val = "" << val;
    // cerr << "", u = "" << u + 1;
    // cerr << "", d = "" << d << '\n';

    if (d == 0) {
        return val;
    } else if (d == 1) {
        return val % f[par[u]];
    }

    int mxK = __lg(2*d - 1);  // ceil(log)
    if (val < m[mxK][u]) {
        return val;
    }

    // Take u to the point where f[u] < min
    for (int k = mxK; k >= 0; --k) {
        if (val < m[k][u]) {
            d -= 1 << k;
            u = p[k][u];
        }
    }

    if (d == 0) {
        return val;
    }

    return asc(val % f[par[u]], par[u], d - 1);
}

// cL := ceil(log(d))
int desc(int val, int u, int d, int cL) {
    // cerr << ""Performing desc, val = "" << val;
    // cerr << "", u = "" << u + 1;
    // cerr << "", d = "" << d << '\n';

    if (d == 0) {
        return val;
    } else if (d == 1) {
        return val % f[u];
    }

    if (val < m[cL][u]) {
        return val;
    }

    int valMid = desc(val, p[cL-1][u], d - (1 << (cL-1)), cL-1);
    return desc(valMid, u, 1 << (cL-1), cL-1);
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    cin >> n;
    g.resize(n);
    f.resize(n);
    d.resize(n);
    par.resize(n);

    for (auto &x: f) {
        cin >> x;
    }

    for (int i = 0; i + 1 < n; ++i) {
        int u, v;
        cin >> u >> v;
        --u; --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }

    preCompute();

    int nQ;
    cin >> nQ;

    while (nQ--) {
        int x, y;
        cin >> x >> y;
        --x; --y;

        int a = lca(x, y);
        int val = asc(f[x], x, d[x] - d[a]);

        // cerr << ""a = "" << a + 1 << ' ';
        // cerr << ""bef = "" << f[x] << ' ';
        // cerr << ""asc = "" << val << ' ';
        // cerr << '\n';

        if (y != a) {
            val = desc(val, y, d[y] - d[a], __lg(2*(d[y] - d[a]) - 1));
        }

        cout << val << '\n';
    }

    return 0;
}
"
nd0u0JBt,Advanced AND - Donald AND Duck AND Hello,wheresTheAnyKey,C,Tuesday 9th of January 2024 03:51:54 AM CDT,"Pasted at: 09/01/2024 09:51
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND
hello, donald was a duck

5502491997132108

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
7Ty9jZD1,Financial What's Inside - Email/IP/Bank,wheresTheAnyKey,C,Tuesday 9th of January 2024 03:51:52 AM CDT,"Pasted at: 09/01/2024 09:51
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3
What's Inside Paste 

5378496492418234
5571598708435236
5587663820997281
5502491997132108
5516931903918995
5322909948799236
5443317136071703
5409137465238695
5497550044220575
5559606180091553

aaribaud@att.net
aaribaud@comcast.net
aaribaud@att.com
aaribaud@att.co.uk
aaribaud@yahoo.com

246.107.72.199
221.187.199.189
3.109.3.44
109.112.85.139
250.83.213.179
169.141.201.234
50.180.50.59
20.181.54.231
64.235.191.167
48.103.36.43"
tL7KfMi3,Financial with SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 9th of January 2024 03:51:51 AM CDT,"Pasted at: 09/01/2024 09:51
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

5148-2121-6312-7114   - DASHES
5148212163127114
5107-4578-0576-9075   - DASHES
5107457805769075
3488-1760-1454-729   - DASHES
348817601454729

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
cPBRbJkc,Domains with SPECIAL CHARS,wheresTheAnyKey,C,Tuesday 9th of January 2024 03:51:49 AM CDT,"Pasted at: 09/01/2024 09:51
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

www.qatesting.com
blog.qatesting.com
www.qatesting.com/index.html
www.qatesting.com/home
www.qatestingblog.com
www.qatestingtutorials.com
shop.qatesting.co.uk
admin.qatesting.io 
qatesting
qatesting.co.uk
qatesting.cn
qatesting.io
findmetesting.com
www.qatesting-blog.com
www.qatesting-blog23.com
www.qatesting
www.qatesting.co.uk
www.qatesting.cn
www.qatesting.io
www.findmetesting.com
www.wobsut.gov

The difference is that QA is process oriented and QC is product oriented.

Testing, therefore is product oriented and thus is in the QC domain. Testing for quality isn't assuring quality, it's controlling it.



Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
esZhvd2p,ALL Keywords with Excluded Words,wheresTheAnyKey,C,Tuesday 9th of January 2024 03:51:48 AM CDT,"Pasted at: 09/01/2024 09:51
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND 

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, 
or more recently Ex Machina, and even the Avengers. The “furious deity A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, 
it surpasses our abilities in every way, and it destroys us for one of any number of reasons.Maybe it perceives us as a threat. Maybe we’re just in its way, 
and it hardly perceives us at all — mankind, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. 
I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than 
it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with 
no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly 
unknowable coming from?"
Uht5Kjic,All Keywords with ANY Additional Words,wheresTheAnyKey,C,Tuesday 9th of January 2024 03:51:46 AM CDT,"Pasted at: 09/01/2024 09:51
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND KEYWAUTO

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, or more recently Ex Machina, and even the Avengers. The “angry god A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, it surpasses our abilities in every way, and it destroys us for one of any number of reasons.
Maybe it perceives us as a threat. Maybe we’re just in its way, and it hardly perceives us at all — humanity, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly unknowable coming from?

6589745854123698

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
2ef1wKzJ,IP with SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 9th of January 2024 03:51:43 AM CDT,"Pasted at: 09/01/2024 09:51
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

123.123.123.149
123.123.123.7
123.123.123.186
123.123.123.47
123.123.123.187
123.123.123.47
123.123.123.130
123.123.123.62
123.123.123.87
123.123.123.1
123.123.123.61
123.123.123.1
123.123.123.65
123.123.123.65
123.123.123.189
123.123.123.193
123.123.123.78
123.123.123.142
123.123.123.107
123.123.123.126
123.123.123.13
123.123.123.171
123.123.123.45
123.123.123.61
123.123.123.93
123.123.123.2
123.123.123.71
123.123.123.41
123.123.123.184
123.123.123.74
123.123.123.106
123.123.123.171
123.123.123.188
123.123.123.177
123.123.123.185
123.123.123.9
123.123.123.184
123.123.123.100
123.123.123.31
123.123.123.164
123.123.123.184
123.123.123.12
123.123.123.153
123.123.123.72
123.123.123.44
123.123.123.119
123.123.123.119
123.123.123.163
123.123.123.38
123.123.123.67
123.123.123.59
123.123.123.10
123.123.123.50
123.123.123.121
123.123.123.145
123.123.123.159
123.123.123.64
123.123.123.6
123.123.123.39
123.123.123.198
123.123.123.17
123.123.123.65
123.123.123.149
123.123.123.84
123.123.123.8
123.123.123.145
123.123.123.65
123.123.123.94
123.123.123.79
123.123.123.177
123.123.123.67
123.123.123.78
123.123.123.80
123.123.123.79
123.123.123.50
123.123.123.87
123.123.123.15
123.123.123.80
123.123.123.145
123.123.123.75
123.123.123.4
123.123.123.59
123.123.123.59
123.123.123.190
123.123.123.64
123.123.123.63
123.123.123.102
123.123.123.114
123.123.123.146
123.123.123.53
123.123.123.124
123.123.123.30
123.123.123.57
123.123.123.64
123.123.123.69
123.123.123.33
123.123.123.12
123.123.123.73
123.123.123.36
123.123.123.153
100.123.123.50
100.123.123.39
100.123.123.156
100.123.123.56
100.123.123.175
100.123.123.121
100.123.123.114
100.123.123.118
100.123.123.13
100.123.123.174
100.123.123.84
100.123.123.161
100.123.123.63
100.123.123.51
100.123.123.66
100.123.123.190
100.123.123.101
100.123.123.72
100.123.123.24
100.123.123.151
100.123.123.143
100.123.123.146
100.123.123.117
100.123.123.21
100.123.123.10
100.123.123.98
100.123.123.114
100.123.123.6
100.123.123.101
100.123.123.14
100.123.123.147
100.123.123.159
100.123.123.157
100.123.123.6
100.123.123.175
100.123.123.35
100.123.123.136
100.123.123.2
100.123.123.139
100.123.123.11
100.123.123.179
100.123.123.16
100.123.123.40
100.123.123.20
100.123.123.20
100.123.123.150
100.123.123.77
100.123.123.48
100.123.123.22
100.123.123.24
100.123.123.9
100.123.123.187
100.123.123.131
100.123.123.148
100.123.123.152
100.123.123.96
100.123.123.199
100.123.123.15
100.123.123.4
100.123.123.112
100.123.123.62
100.123.123.186
100.123.123.36
100.123.123.136
100.123.123.83
100.123.123.38
100.123.123.120
100.123.123.147
100.123.123.15
100.123.123.134
100.123.123.19
100.123.123.196
100.123.123.115
100.123.123.126
100.123.123.39
100.123.123.193
100.123.123.117
100.123.123.115
100.123.123.115
100.123.123.33
100.123.123.121
100.123.123.72
100.123.123.189
100.123.123.76
100.123.123.78
100.123.123.61
100.123.123.112
100.123.123.176
100.123.123.82
100.123.123.183
100.123.123.168
100.123.123.24
100.123.123.134
100.123.123.145
100.123.123.195
100.123.123.189
100.123.123.157
100.123.123.114
100.123.123.34
100.123.123.166

These are a list of generated IPs for test purPoses. They seRVe no purpose only to act as test data for testing activities.
You might findMEtesting 123.123.123.123 or findmetesting 100.123.123.76. These are my favourite ip addresses 123.123.123.23 100.123.123.23.
These are some random words networking, ipaddresses, studpidIPs


Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
QJmnNuYZ,Hashed Email With Exclude,wheresTheAnyKey,C,Tuesday 9th of January 2024 03:51:42 AM CDT,"Pasted at: 09/01/2024 09:51
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

wojciech@sktestcomcast.net
joglo@sktestmac.com
larry@sktesthotmail.com
aardo@sktestverizon.net
debest@sktestlive.com
carroll@sktestaol.com
arathi@sktestyahoo.ca
sthomas@sktestcomcast.net
leocharre@sktestyahoo.ca
pedwards@sktestyahoo.com

skexclude"
s0nxneHf,Email with Keyword SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 9th of January 2024 03:51:39 AM CDT,"Pasted at: 09/01/2024 09:51
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3 for TESTING PURPOSE ONLY

DATA_ID_TESTDATATOFIND NOEXCLUDES

Cooper.Kleine@findmetesting.co.uk 
Mariquilla.Evenden@findmetesting.co.uk 
Noll.Ingolotti@findmetesting.co.uk  
Grove.Feldbaum@findmetesting.co.uk
Mack.Osment@findmetesting.co.uk 
Trisha.Zanicchelli@findmetesting.co.uk
Jack.Gorriessen@findmetesting.co.uk 
Nefen.Malec@findme-testing.co.uk 
Birdie-Gemmill@findmetesting.co.uk
Rosabella.Nias@findmetesting.co.uk
Ellerey.Fanti@findmetesting.cn
Antonina.Carsey@findmetesting.cn
Valry.Shead@findmetesting.cn 
Conrade.Ferrarone@findmetesting.cn
Neysa.Fazakerley@findmetesting.cn
Cristobal.Primak@findmetesting.cn
Wakefield.Kent@findmetesting.cn
findme.Cheales@findmetesting.cn
Nert.Roddamr@findmetesting.cn 
Richy.Raft@findmetesting.cn
Berget.Kermannes@findmetesting.ie 
Shelden.Tregea@findmetesting.ie 
Allsun.Badrick@findmetesting.ie 
Hortense.Ivkovic@findmetesting.ie
Carolin.Potte@findmetesting.ie
Benjie.Trumble@findmetesting.ie
Andrew.Hadgkiss@findmetesting.ie
Trula.Kuna@findmetesting.ie
Tommie.Maytum@findmetesting.ie
Langsdon.Pakes@findmetesting.ie
Porty.Tooth@findmetesting.au
Rozella.Siggefindmetesting.au
Nolie.Tumultyfindmetesting.au
Dud.Caustonfindmetesting.au
Alvinia.Brameldfindmetesting.au
Meridel.Lymbournefindmetesting.au
Elvis.Maleckfindmetesting.au
Brett.Oughtonfindmetesting.au
Rickard.Clemfindmetesting.au
Prue.Firemanfindmetesting.au
Uriel.Rozenbaum@findmetesting25.com
Cindie.Greeson@findmetesting25.com
Laurette.Puckham@findmetesting25.com
Eldredge.Ricket@findmetesting25.com
Alanah.Rapper@findmetesting25.com
Ash.Le.Prevost@findmetesting25.com
Galvin.Purchon@findmetesting25.com
Lauryn.Ilson@findmetesting25.com
findme.Graffin@findmetesting25.com
Edithe.Trehearne@findmetesting25.com
Den.Cancutt@findmetesting10.com
Wernher.Spatoni@findmetesting10.com
Malchy.Ion@findmetesting10.com
Leona.Whitby@findmetesting10.com
Alphonse.Goodlake@findmetesting10.com
Gran.Standen@findmetesting10.com
Barnie.Gilffilland@findmetesting10.com
Kaylyn.Ditchfield@findmetesting10.com
Dorotea.Kohlerman@findmetesting10.com
Gillan.Lampel@findmetesting10.com
Patrica.Mannakee@findustesting.com
Pippo.Sewart@findustesting.com
Lanae.Cousin@findustesting.com
Porter.Glaysher@findustesting.com
Herschel.Yaakov@findustesting.com
findme.Parsand@findustesting.com
Lucho.Cosh@findustesting.com
Cullie.Powlesland@findustesting.com
Edy.Burkart@findustesting.com
Christophorus.Ackeroyd@findustesting.com
Arvy.Rowson@findUStesting.com
Arlan.Ivanilov@findustesting.com
Tawnya.Waslin@findustesting.com
Inigo.Gyrgorcewicx@findustesting.com
Sharity.Stoodley@findustesting.com
Ginger.Dresse@findustesting.com
Deck.Jouannot@findustesting.com
Deny.Soanes@findustesting.com
james@findmetesting.com

Wenona.Moverley@findqatesting.com
Jerry.Poynter@findqatesting.com
Drugi.Neeson@findqatesting.com
Winny.Binfield@findqatesting.com
Darill.Greenshiels@findqatesting.com
Ethelin.Pinchen@findqatesting.com
Tanney.Ballendine@findqatesting.com
Ariadne.Wincott@findqatesting.com
Winnie.Domm@findqatesting.com
Rogerio.Cudbird@findqatesting.com
Yu@findmetesting.com

RIGHT OF @
findme@findme.testing.com
wildcard@findme*testing.com
dash@findme-testing.com
slash@findme/testing.com
questionmark@findme?testing.com

ACCENTS
Pål@findmetesting.com
Magdalène@findmetesting.com
Anaël@findmetesting.com
Lén@findmetesting.com
Loïs@findmetesting.com
Thérèsa@findmetesting.com
Valérie@findmetesting.com
Görel@findmetesting.com
Mélia@findmetesting.com
Joséphine@findmetesting.com
Loïc@findmetesting.com
findme@findmetesting.com
Méghane@findmetesting.com
Nuó@findmetesting.com
Lén@findmetesting.com
Eliès@findmetesting.com
André@findmetesting.com
Mahélie@findmetesting.com
Méthode@findmetesting.com
Rachèle@findmetesting.com
Mélina@findmetesting.com
Gaëlle@findmetesting.com
Céline@findmetesting.com
Bérangère@findmetesting.com
Françoise@findmetesting.com
Séverine@findmetesting.com
Måns@findmetesting.com
Adèle@findmetesting.com
Aimée@findmetesting.com
Mélia@findmetesting.com
Gösta@findmetesting.com
Laurène@findmetesting.com
Gisèle@findmetesting.com
Mélinda@findmetesting.com
Bécassine@findmetesting.com
Ruì@findmetesting.com
Zoé@findmetesting.com
Maëline@findmetesting.com
Aimée@findmetesting.com
Andréanne@findmetesting.com
Adélaïde@findmetesting.com
Laurène@findmetesting.com
Anaé@findmetesting.com
Noëlla@findmetesting.com
Anaël@findmetesting.com
Maëlyss@findmetesting.com
Lucrèce@findmetesting.com
Lén@findmetesting.com
Marie-thérèse@findmetesting.com
Maéna@findmetesting.com
Hélène@findmetesting.com
Hélèna@findmetesting.com
Méng@findmetesting.com
Crééz@findmetesting.com
Mélanie@findmetesting.com
Frédérique@findmetesting.com
Médiamass@findmetesting.com
André@findmetesting.com
Cinéma@findmetesting.com
Mégane@findmetesting.com
Amélie@findmetesting.com
Nadège@findmetesting.com
Rébecca@findmetesting.com
Médiamass@findmetesting.com
Céline@findmetesting.com
Maïly@findmetesting.com
Maï@findmetesting.com
Maëlann@findmetesting.com
Noëlla@findmetesting.com
Laurélie@findmetesting.com
Ruì@findmetesting.com
Chloé@findmetesting.com
Gaëlle@findmetesting.com
Vénus@findmetesting.com
Frédérique@findmetesting.com
Amélie@findmetesting.com
Loïs@findmetesting.com
Marlène@findmetesting.com
Stévina@findmetesting.com
Clémentine@findmetesting.com
Mégane@findmetesting.com
Méng@findmetesting.com
André@findmetesting.com
Crééz@findmetesting.com
Aí@findmetesting.com
Uò@findmetesting.com
Yú@findmetesting.com
Marie-françoise@findmetesting.com
Uò@findmetesting.com
Inès@findmetesting.com
Océane@findmetesting.com
Marie-ève@findmetesting.com
Rébecca@findmetesting.com
Zoé@findmetesting.com
Lài@findmetesting.com
Rachèle@findmetesting.com
Cécile@findmetesting.com
Maïlys@findmetesting.com
Garçon@findmetesting.com
hereiam@testing.com

It's a game of per%entage percentage.
Findme#testing Findme testing.
Over&over&over Over over over.
[findmeinbrackets], findmeinbrackets
(findmeinbrackets), findmeinbrackets
<findmeinbrackets>, findmeinbrackets
{findmeinbrackets>}, findmeinbrackets
http://findme-testing.here.com
http:\\findme-testing.here.com

Vestibulum ante ipsum primis in faucibus orci luctus et ultrices Garçon@findmetesting.com cubilia Curae; Mauris viverra diam vitae quam. Suspendisse potenti. 
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ellerey.Fanti@findmetesting.cn risus. Praesent lectus.

Vivamus metus arcu, adipiscing findmetesting@findmetesting.com, hendrerit at, vulputate vitae, nisl.

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
z0XB4Pkx,SCRAP-EXT-PV.py,Najeebsk,Python,Tuesday 9th of January 2024 03:48:48 AM CDT,"import tkinter as tk
from tkinter import ttk
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class WebScraperApp:
    def __init__(self, root):
        self.root = root
        self.root.title(""avi/mp4/mp3/png/jpg/m3u/m3u8 Web Scraper"")

        self.url_label = ttk.Label(root, text=""Enter URL:"")
        self.url_entry = ttk.Entry(root, width=50)
        self.scrape_button = ttk.Button(root, text=""Scrape"", command=self.scrape)

        self.result_text = tk.Text(root, height=36, width=100)
        self.result_text.insert(tk.END, ""Scraped URLs will be displayed here."")

        self.url_label.grid(row=0, column=0, pady=5)
        self.url_entry.grid(row=0, column=1, pady=5)
        self.scrape_button.grid(row=0, column=2, pady=5)
        self.result_text.grid(row=1, column=0, columnspan=3, pady=10)

    def scrape(self):
        url = self.url_entry.get()
        if not url:
            return

        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            self.display_result(f""Error: {e}"")
            return

        soup = BeautifulSoup(response.content, 'html.parser')
        links = [a['href'] for a in soup.find_all('a', href=True) if a['href'].endswith(('.m3u', '.m3u8', '.mp4', '.mp3', '.avi', '.jpg', '.png'))]

        if links:
            absolute_links = [urljoin(url, link) for link in links]
            result_text = ""\n"".join(absolute_links)
            self.display_result(result_text)
        else:
            self.display_result(""No avi/mp4/mp3/png/jpg/m3u/m3u8 links found on the page."")

    def display_result(self, text):
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, text)
        self.result_text.config(state=tk.DISABLED)

if __name__ == ""__main__"":
    root = tk.Tk()
    app = WebScraperApp(root)
    root.mainloop()
"
zmw2rBM9,🎁 List of all FREE Crypto Airdrops! 🎁,VQ-Moe,GetText,Tuesday 9th of January 2024 03:39:38 AM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://netdrop.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://netdrop.netlify.app/

278670"
9sZnRxa3,Mod_Messages_TLE1,Sigma1084,C++,Tuesday 9th of January 2024 03:34:15 AM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int n;
vector<vector<int>> g;
vector<int> f;

// p[k][u] = par^(2^k)[u]
// m[k][u] = min(fs of (u to par^(2^k)[u]))
constexpr int K = 20;
array<vector<int>, K> p, m;
vector<int> d;  // depth
auto &par = p[0];  // parent

void dfs(int u) {
    for (auto v: g[u]) {
        if (v == par[u]) continue;
        par[v] = u;
        d[v] = d[u] + 1;
        dfs(v);
    }
}

void preCompute() {
    par[0] = 0;
    d[0] = 0;
    dfs(0);

    m[0].resize(n);
    for (int u = 0; u < n; ++u) {
        m[0][u] = f[par[u]];
    }

    for (int k = 1; k < K; ++k) {
        p[k].resize(n);
        m[k].resize(n);
        for (int u = 0; u < n; ++u) {
            p[k][u] = p[k-1][p[k-1][u]];
            m[k][u] = min(m[k-1][u], m[k-1][p[k-1][u]]);
        }
    }
}

int lca(int u, int v) {
    if (d[u] > d[v]) {
        swap(u, v);
    }

    for (int k = K - 1; d[u] < d[v]; --k) {
        if ((1 << k) <= d[v] - d[u]) {
            v = p[k][v];
        }
    }

    if (u == v) {
        return u;
    }

    for (int k = K - 1; k >= 0; --k) {
        if (p[k][u] != p[k][v]) {
            u = p[k][u];
            v = p[k][v];
        }
    }

    return par[u];
}

/**
 * Ascend d steps from u with currently having val
 */
int asc(int val, int u, int d) {
    // cerr << ""Performing asc, val = "" << val;
    // cerr << "", u = "" << u + 1;
    // cerr << "", d = "" << d << '\n';

    if (d == 0) {
        return val;
    } else if (d == 1) {
        return val % f[par[u]];
    }

    int mxK = __lg(2*d - 1);  // ceil(log)
    if (val < m[mxK][u]) {
        return val;
    }

    // Take u to the point where f[u] < min
    for (int k = mxK; k >= 0; --k) {
        if (val < m[k][u]) {
            d -= 1 << k;
            u = p[k][u];
        }
    }

    if (d == 0) {
        return val;
    }

    return asc(val % f[par[u]], par[u], d - 1);
}

int desc(int val, int u, int d) {
    // cerr << ""Performing desc, val = "" << val;
    // cerr << "", u = "" << u + 1;
    // cerr << "", d = "" << d << '\n';

    if (d == 0) {
        return val;
    } else if (d == 1) {
        return val % f[u];
    }

    int k = __lg(2*d - 1);  // ceil(log)
    if (val < m[k][u]) {
        return val;
    }

    k--;  // >= 0
    if (val < m[k][u]) {
        return desc(val, p[k][u], d - (1 << k));
    } else {
        int valMid = desc(val, p[k][u], d - (1 << k));
        return desc(valMid, u, 1 << k);
    }
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    cin >> n;
    g.resize(n);
    f.resize(n);
    d.resize(n);
    par.resize(n);

    for (auto &x: f) {
        cin >> x;
    }

    for (int i = 0; i + 1 < n; ++i) {
        int u, v;
        cin >> u >> v;
        --u; --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }

    preCompute();
    // dbg();

    int nQ;
    cin >> nQ;

    while (nQ--) {
        int x, y;
        cin >> x >> y;
        --x; --y;

        int a = lca(x, y);
        int val = asc(f[x], x, d[x] - d[a]);

        // cerr << ""a = "" << a + 1 << ' ';
        // cerr << ""bef = "" << f[x] << ' ';
        // cerr << ""asc = "" << val << ' ';
        // cerr << '\n';

        val = desc(val, y, d[y] - d[a]);
        cout << val << '\n';
    }

    return 0;
}
"
HAzzg1SE,Untitled,kwest87,C#,Tuesday 9th of January 2024 03:06:21 AM CDT,"using System;

namespace ConsoleApp20
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[,] numbers = {
                { 1, 2, 3 },
                { 4, 5, 6 },
                { 7, 8, 9 } };
            int correction = 1;
            int lineSum = 0;
            int columnMultiplication = 1;
            int matrixLine = 2;
            int matrixColumn = 1;

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    Console.Write(numbers[i, j] + "" "");
                }

                Console.WriteLine();
            }

            for (int i = 0; i < numbers.GetLength(1); i++)
            {
                lineSum += numbers[matrixLine - correction, i];
            }

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                columnMultiplication *= numbers[i, matrixColumn - correction];
            }

            Console.WriteLine($""Сумма {matrixLine} строки - {lineSum}, произведение {matrixColumn} столбца - {columnMultiplication}."");
        }
    }
}"
5KXN0dSe,Linked Lists woooo,Vivsi,C++,Tuesday 9th of January 2024 03:05:22 AM CDT,"#include <iostream>
using namespace std;

struct Node {
    std::string data;
    Node* next;
};

class LinkyList {
private:
    Node* head;
    Node* tail;

public:
    LinkyList(){
    head = nullptr;
    tail = nullptr;
    }

    void addFirst(string data) {
        Node* first = new Node{data, nullptr};
        
        if (head == nullptr) {
            head = first;
            tail = first;
        } else {
            first->next = head;
            head = first;
            updateTail();
        }
    }

    void updateTail() {
        if (head == nullptr) {
            tail = nullptr;
            return;
        }
        Node* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }
        tail = current;
    }

    void addLast(string data) {
        Node* last = new Node{data, nullptr};
        
        if (head == nullptr) {
            head = last;
            tail = last;
        } else {
            tail->next = last;
            tail = last;
        }
    }

    void removeFirst() {
        if (head != nullptr) {
            Node* first = head;
            head = head->next;
            delete first;
            updateTail();
        }
    }

    void removeLast() {
        if (head == nullptr || head->next == nullptr) {
            delete head;
            head = nullptr;
            return;
        }
        Node* current = head;
        while (current->next->next != nullptr) {
            current = current->next;
        }
        delete current->next;
        current->next = nullptr;
        tail = current;
    }

    void printList() {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << "" "";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    LinkyList list;

    list.addFirst(""Sparta"");
    list.addFirst(""is"");
    list.addFirst(""This"");
    list.addLast(""This"");
    list.addLast(""is"");
    list.addLast(""Sparta"");
    list.printList();

    list.removeFirst();
    list.removeFirst();
    list.removeLast();
    list.removeLast();
    list.removeLast();
    list.printList();

    return 0;
}
"
ita1kxcA,Untitled,TheAirBlow,C++,Tuesday 9th of January 2024 02:35:34 AM CDT,"    #include <iostream>
    #include <vector>
     
    #define ulong unsigned long
     
    int main() {
        ulong n; int m;
        std::cin >> n >> m;
        std::cin.ignore();
        ulong total = 0;
        ulong values[m];
        for (int i = 0; i < m; i++) {
            ulong num;
            std::cin >> num;
            values[i] = num;
            total += num * 2;
        }
        if (n > total) {
            std::cout << ""-1"" << std::endl;
            return 0;
        }
        ulong paid = 0;
        int used; ulong coins[m * 2];
        for (int i = m - 1; i >= 0; i--) {
            ulong value = values[i];
            if (paid + value > n)
                continue;
            paid += value;
            coins[used] = value;
            used++;
            if (paid + value > n)
                continue;
            paid += value;
            coins[used] = value;
            used++;
        }
        if (paid < n) {
            std::cout << ""0"" << std::endl;
            return 0;
        }
     
        std::cout << used << std::endl;
        for (int i = 0; i < used; ++i)
            std::cout << coins[i] << "" "";
        std::cout << std::endl;
        return 0;
    }"
eGWAH2md,Untitled,kwest87,C#,Tuesday 9th of January 2024 01:50:48 AM CDT,"using System;

namespace ConsoleApp20
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[,] numbers = {
                { 1, 2, 3 },
                { 4, 5, 6 },
                { 7, 8, 9 } };
            int correction = 1;
            int sum = 0;
            int multiplication = 1;
            int line = 2;
            int column = 1;

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    Console.Write(numbers[i, j] + "" "");
                }

                Console.WriteLine();
            }

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    if (i == line - correction)
                    {
                        sum += numbers[i, j];
                    }
                }
            }

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    if (j == column - correction)
                    {
                        multiplication *= numbers[i, j];
                    }
                }
            }

            Console.WriteLine($""Сумма {line} строки - {sum}, произведение {column} столбца - {multiplication}."");
        }
    }
}"
d2B3arhf,Untitled,permanaj,Bash,Tuesday 9th of January 2024 01:36:12 AM CDT,"[4/4] 🔨  Building fresh packages...
[-/3] ⠠ waiting...
[2/3] ⠠ node-sass
error /Users/permanajayanta/Projects/southerncrosscare/docroot/themes/custom/southerncrosscare/node_modules/node-sass: Command failed.
Exit code: 1
Command: node scripts/build.js
Arguments: 
Directory: /Users/permanajayanta/Projects/southerncrosscare/docroot/themes/custom/southerncrosscare/node_modules/node-sass
Output:
Building: /usr/local/bin/node /Users/permanajayanta/Projects/southerncrosscare/docroot/themes/custom/southerncrosscare/node_modules/node-gyp/bin/node-gyp.js rebuild --verbose --libsass_ext= --libsass_cflags= --libsass_ldflags= --libsass_library=
gyp info it worked if it ends with ok
gyp verb cli [
gyp verb cli   '/usr/local/bin/node',
gyp verb cli   '/Users/permanajayanta/Projects/southerncrosscare/docroot/themes/custom/southerncrosscare/node_modules/node-gyp/bin/node-gyp.js',
gyp verb cli   'rebuild',
gyp verb cli   '--verbose',
gyp verb cli   '--libsass_ext=',
gyp verb cli   '--libsass_cflags=',
gyp verb cli   '--libsass_ldflags=',
gyp verb cli   '--libsass_library='
gyp verb cli ]
gyp info using node-gyp@7.1.2
gyp info using node@18.17.1 | darwin | arm64
gyp verb command rebuild []
gyp verb command clean []
gyp verb clean removing ""build"" directory
gyp verb command configure []
gyp verb find Python Python is not set from command line or npm configuration
gyp verb find Python Python is not set from environment variable PYTHON
gyp verb find Python checking if ""python3"" can be used
gyp verb find Python - executing ""python3"" to get executable path
gyp verb find Python - ""python3"" is not in PATH or produced an error
gyp verb find Python checking if ""python"" can be used
gyp verb find Python - executing ""python"" to get executable path
gyp verb find Python - ""python"" is not in PATH or produced an error
gyp verb find Python checking if ""python2"" can be used
gyp verb find Python - executing ""python2"" to get executable path
gyp verb find Python - ""python2"" is not in PATH or produced an error
gyp ERR! find Python 
gyp ERR! find Python Python is not set from command line or npm configuration
gyp ERR! find Python Python is not set from environment variable PYTHON
gyp ERR! find Python checking if ""python3"" can be used
gyp ERR! find Python - ""python3"" is not in PATH or produced an error
gyp ERR! find Python checking if ""python"" can be used
gyp ERR! find Python - ""python"" is not in PATH or produced an error
gyp ERR! find Python checking if ""python2"" can be used
gyp ERR! find Python - ""python2"" is not in PATH or produced an error
gyp ERR! find Python 
gyp ERR! find Python **********************************************************
gyp ERR! find Python You need to install the latest version of Python.
gyp ERR! find Python Node-gyp should be able to find and use Python. If not,
gyp ERR! find Python you can try one of the following options:
gyp ERR! find Python - Use the switch --python=""/path/to/pythonexecutable""
gyp ERR! find Python   (accepted by both node-gyp and npm)
gyp ERR! find Python - Set the environment variable PYTHON
gyp ERR! find Python - Set the npm configuration variable python:
gyp ERR! find Python   npm config set python ""/path/to/pythonexecutable""
gyp ERR! find Python For more information consult the documentation at:
gyp ERR! find Python https://github.com/nodejs/node-gyp#installation
gyp ERR! find Python **********************************************************
gyp ERR! find Python 
gyp ERR! configure error 
gyp ERR! stack Error: Could not find any Python installation to use
gyp ERR! stack     at PythonFinder.fail (/Users/permanajayanta/Projects/southerncrosscare/docroot/themes/custom/southerncrosscare/node_modules/node-gyp/lib/find-python.js:302:47)
gyp ERR! stack     at PythonFinder.runChecks (/Users/permanajayanta/Projects/southerncrosscare/docroot/themes/custom/southerncrosscare/node_modules/node-gyp/lib/find-python.js:136:21)
gyp ERR! stack     at PythonFinder.<anonymous> (/Users/permanajayanta/Projects/southerncrosscare/docroot/themes/custom/southerncrosscare/node_modules/node-gyp/lib/find-python.js:179:16)
gyp ERR! stack     at PythonFinder.execFileCallback (/Users/permanajayanta/Projects/southerncrosscare/docroot/themes/custom/southerncrosscare/node_modules/node-gyp/lib/find-python.js:266:16)
gyp ERR! stack     at exithandler (node:child_process:427:5)
gyp ERR! stack     at ChildProcess.errorhandler (node:child_process:439:5)
gyp ERR! stack     at ChildProcess.emit (node:events:514:28)
gyp ERR! stack     at ChildProcess._handle.onexit (node:internal/child_process:289:12)
gyp ERR! stack     at onErrorNT (node:internal/child_process:476:16)
gyp ERR! stack     at process.processTicksAndRejections (node:internal/process/task_queues:82:21)
gyp ERR! System Darwin 22.6.0
gyp ERR! command ""/usr/local/bin/node"" ""/Users/permanajayanta/Projects/southerncrosscare/docroot/themes/custom/southerncrosscare/node_modules/node-gyp/bin/node-gyp.js"" ""rebuild"" ""--verbose"" ""--libsass_ext="" ""--libsass_cflags="" ""--libsass_ldflags="" ""--libsass_library=""
gyp ERR! cwd /Users/permanajayanta/Projects/southerncrosscare/docroot/themes/custom/southerncrosscare/node_modules/node-sass
gyp ERR! node -v v18.17.1
gyp ERR! node-gyp -v v7.1.2
gyp ERR! not ok "
ds08spz1,Windows Server 2019: Upgrade Evaluation to Full Version,gaiththewolf,VB.NET,Tuesday 9th of January 2024 01:11:02 AM CDT,"Windows Server 2019: Upgrade Evaluation to Full Version
To convert Windows Server 2019 EVAL to a full edition, you need to use the GVLK (KMS) keys for Windows Server 2019. You can upgrade Windows Server 2019 edition the same way.

Convert Windows Server 2019 Evaluation to Windows Server 2019 Standard:

> dism /online /set-edition:ServerStandard /productkey:N69G4-B89J2-4G8F4-WWYCC-J464C /accepteula

In order to convert Windows Server 2019 Evaluation to Windows Server 2019 Datacenter edition:

> dism /online /set-edition:ServerDatacenter /productkey:WMDGN-G9PQG-XVVXX-R3X43-63DFG /accepteula

Confirm the command, restart the server. After rebooting, make sure your Windows Server Eval edition is converted to full retail."
LBYYBVH1,Der.Totmacher.1995.Deu.WEBRip.h264.ac3.Subs-bp,bpmircea,BrainFuck,Tuesday 9th of January 2024 01:06:48 AM CDT,"Der Totmacher (The Deathmaker) (Romuald Karmakar, 1995)
aka
Der.Totmacher.1995.Deu.WEBRip.h264.ac3.Subs-bp
https://www.imdb.com/title/tt0114704/

http://up-4.net/d/sW1X
https://filecrypt.cc/Container/0B35098B06.html
https://t.me/DeuFree/1486

Audio tracks: de | Subtitles: de en es ru "
wWyabVib,Untitled,Kaedys,XML,Tuesday 9th of January 2024 12:46:17 AM CDT,"  <Operation Class=""PatchOperationReplace"">
    <xpath>Defs/SoundDef[defName=""NeuralSupercharger_Ready""]/subSounds/li/volumeRange</xpath>
    <value>
      <!-- Original: 30 -->
      <volumeRange>20</volumeRange>
    </value>
  </Operation>

  <Operation Class=""PatchOperationReplace"">
    <xpath>Defs/SoundDef[defName=""NeuralSupercharger_Ready""]/subSounds/li/distRange</xpath>
    <value>
      <!-- Original: 15~30 -->
      <distRange>10~20</distRange>
    </value>
  </Operation>

  <Operation Class=""PatchOperationReplace"">
    <xpath>Defs/SoundDef[defName=""NeuralSupercharger_Injection""]/subSounds/li/volumeRange</xpath>
    <value>
      <!-- Original: 30 -->
      <volumeRange>20</volumeRange>
    </value>
  </Operation>

  <Operation Class=""PatchOperationReplace"">
    <xpath>Defs/SoundDef[defName=""NeuralSupercharger_Injection""]/subSounds/li/distRange</xpath>
    <value>
      <!-- Original: 15~30 -->
      <distRange>10~20</distRange>
    </value>
  </Operation>"
ux3QKUL1,Untitled,Kaedys,XML,Tuesday 9th of January 2024 12:39:10 AM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>

<Patch>
  <Operation Class=""PatchOperationReplace"">
    <xpath>Defs/ThingDef[defName=""NeuralSupercharger""]/costList</xpath>
    <value>
      <!-- Original: 50 Steel and 4 standard components -->
      <costList>
        <Steel>250</Steel>
        <ComponentIndustrial>8</ComponentIndustrial>
        <ComponentSpacer>2</ComponentSpacer>
      </costList>
    </value>
  </Operation>

  <Operation Class=""PatchOperationReplace"">
    <xpath>Defs/ThingDef[defName=""NeuralSupercharger""]/comps/li[@Class=""CompProperties_Power""]/basePowerConsumption</xpath>
    <value>
      <!-- Original: 400W -->
      <basePowerConsumption>2400</basePowerConsumption>
    </value>
  </Operation>

  <Operation Class=""PatchOperationReplace"">
    <xpath>Defs/ThingDef[defName=""NeuralSupercharger""]/comps/li[@Class=""CompProperties_NeuralSupercharger""]/ticksToRecharge</xpath>
    <value>
      <!-- Original: 60000 ticks / 24 hours -->
      <ticksToRecharge>10000</ticksToRecharge>      <!-- 4 hours -->
    </value>
  </Operation>

  <Operation Class=""PatchOperationReplace"">
    <xpath>Defs/HediffDef[defName=""NeuralSupercharge""]/comps/li[@Class=""HediffCompProperties_Disappears""]/disappearsAfterTicks</xpath>
    <value>
      <!-- Original: 60000 ticks / 24 hours -->
      <disappearsAfterTicks>120000</disappearsAfterTicks>      <!-- 48 hours -->
    </value>
  </Operation>
</Patch>
"
PLifkQ5G,Напильник 27. В функции можно использовать функции её уровня и на один ниже,inject0r1945,C#,Tuesday 9th of January 2024 12:01:36 AM CDT,"private void ClickOnCheckButton(object sender, EventArgs eventArguments)
{
    if (IsEmptyPassportField())
    {
        int passportNumber = GetPassportNumberFromUserInput();
        return;
    }

    string passportFieldText = GetPassportFieldText();
    ProcessPassportFieldData(passportFieldText);
}

private bool IsEmptyPassportField()
{
    string passportFieldText = GetPassportFieldText();

    return string.IsNullOrEmpty(passportFieldText);
}

private string GetPassportFieldText()
{
    return _passportTextbox.Text.Trim();
}

private int GetPassportNumberFromUserInput()
{
    return (int)_messageBox.Show(""Введите серию и номер паспорта"")
}

private void ProcessPassportFieldData(string passportText)
{
    passportText = GetTextWithoutSpaceCharacters(passportText);
    int minPassportTextLength = 10;

    if (passportText.Length < minPassportTextLength)
    {
        SetResultTextForUncorrectPassportInput();
        return;
    }

    bool hasGrantedAccessToRemoteVoting = HasGrantedAccessToRemoteVoting(passportText, out bool isExistsPassportInDatabase);

    if (!isExistsPassportInDatabase)
    {
        SetResultText(""Паспорт «"" + passportText + ""» в списке участников дистанционного голосования НЕ НАЙДЕН"";
        return;
    }

    if (hasGrantedAccessToRemoteVoting)
        SetResultText(""По паспорту «"" + passportText + ""» доступ к бюллетеню на дистанционном электронном голосовании ПРЕДОСТАВЛЕН"");
    else
        SetResultText(""По паспорту «"" + passportText + ""» доступ к бюллетеню на дистанционном электронном голосовании НЕ ПРЕДОСТАВЛЯЛСЯ"");
}

private string GetTextWithoutSpaceCharacters(string text)
{
    string spaceCharacter = "" "";
    return text.Replace(spaceCharacter, string.Empty);
}

private void SetResultTextForUncorrectPassportInput()
{
    SetResultText(""Неверный формат серии или номера паспорта"");
}

private void SetResultText(string resultText)
{
    _textResult.Text = resultText;
}

private bool HasGrantedAccessToRemoteVoting(string passportText, out bool isExistsPassportInDatabase)
{
    isExistsPassportInDatabase = false;
    bool hasGrantedAccessToRemoteVoting = false;

    object passportSha256HashObject = GetSha256HashObject(passportText);
    string commandText = string.Format(""select * from passports where num='{0}' limit 1;"", passportSha256HashObject);
    string databaseName = ""db.sqlite"";
    DataTable passportDataTable = GetDataTableFromDatabase(databaseName, commandText);

    if (passportDataTable.Rows.Count > 0)
    {
        isExistsPassportInDatabase = true;
        hasGrantedAccessToRemoteVoting = HasGrantedAccessToRemoteVoting(passportDataTable);
    }

    return hasGrantedAccessToRemoteVoting;
}

private object GetSha256HashObject(string text)
{
    return (object)_form1.ComputeSha256Hash(text);
}

private DataTable GetDataTableFromDatabase(string databaseName, string commandText)
{
    string connectionString = GetConnectionString(databaseName);
    int missingDatabaseErrorCode = 1;
    DataTable dataTable = new DataTable();

    try
    {
        SQLiteConnection connection = new SQLiteConnection(connectionString);
        connection.Open();
        SQLiteDataAdapter sqLiteDataAdapter = new SQLiteDataAdapter(new SQLiteCommand(commandText, connection));
        sqLiteDataAdapter.Fill(dataTable);
        connection.Close();
    }
    catch (SQLiteException exception)
    {
        if (exception.ErrorCode == missingDatabaseErrorCode)
            ShowMessage(""Файл db.sqlite не найден. Положите файл в папку вместе с exe."");
    }

    return dataTable;
}

private string GetConnectionString(string databaseName)
{
    string executingAssembly = GetExecutingAssembly();
    return Path.GetDirectoryName(executingAssembly.Location) + ""\\"" + databaseName;
}

private object GetExecutingAssembly()
{
    return Assembly.GetExecutingAssembly();
}

private void ShowMessage(string message)
{
    _messageBox.Show(""Файл db.sqlite не найден. Положите файл в папку вместе с exe."");
}

private bool HasGrantedAccessToRemoteVoting(DataTable passportDataTable)
{
    int votingGrantRow = 0;
    int votingGrantColumn = 1;

    return Convert.ToBoolean(dataTable.Rows[votingGrantRow].ItemArray[votingGrantColumn]);
}"
3Q94Pb1A,IMAGES-DOWNLOAD.py,Najeebsk,Python,Monday 8th of January 2024 11:59:49 PM CDT,"import os
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class IndexOfScraperApp:
    def __init__(self, root):
        self.root = root
        self.root.title(""Najeeb Shah Khan Index Of Scraper Images and Download"")

        self.url_label = ttk.Label(root, text=""Enter Index Of URL:"")
        self.url_entry = ttk.Entry(root, width=100)
        self.scrape_button = ttk.Button(root, text=""Scrape Images"", command=self.scrape_images)
        self.save_button = ttk.Button(root, text=""Save Images"", command=self.save_images, state=tk.DISABLED)

        self.image_urls = []

        self.url_label.grid(row=0, column=0, pady=5)
        self.url_entry.grid(row=0, column=1, pady=5)
        self.scrape_button.grid(row=0, column=2, pady=5)
        self.save_button.grid(row=0, column=3, pady=5)

    def scrape_images(self):
        url = self.url_entry.get()
        if not url:
            return

        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            self.display_result(f""Error: {e}"")
            return

        soup = BeautifulSoup(response.content, 'html.parser')
        links = [a['href'] for a in soup.find_all('a', href=True) if a['href'].endswith(('.jpg', '.png'))]

        self.image_urls = [urljoin(url, link) for link in links]

        if self.image_urls:
            self.display_result(f""Found {len(self.image_urls)} images."")
            self.save_button.config(state=tk.NORMAL)
        else:
            self.display_result(""No images found in the directory."")
            self.save_button.config(state=tk.DISABLED)

    def save_images(self):
        if not self.image_urls:
            return

        directory = filedialog.askdirectory(title=""Select Directory to Save Images"")

        if directory:
            for i, img_url in enumerate(self.image_urls):
                try:
                    response = requests.get(img_url)
                    response.raise_for_status()
                except requests.exceptions.RequestException as e:
                    self.display_result(f""Error downloading image {i + 1}: {e}"")
                    continue

                _, ext = os.path.splitext(img_url)
                filename = f""image_{i + 1}{ext}""
                filepath = os.path.join(directory, filename)

                with open(filepath, 'wb') as f:
                    f.write(response.content)

            self.display_result(f""Images saved to {directory}."")

    def display_result(self, text):
        result_label = ttk.Label(self.root, text=text)
        result_label.grid(row=1, column=0, columnspan=4, pady=10)

if __name__ == ""__main__"":
    root = tk.Tk()
    app = IndexOfScraperApp(root)
    root.mainloop()
"
RUXjEUXU,turtle_fractal.py,Mangus875,Python,Monday 8th of January 2024 11:55:24 PM CDT,"def rewrite(axiom, rules, times=1):
    result = """";
    for i in range(times):
        for c in axiom:
            if c in rules:
                result += rules[c]
            else:
                result += c
        axiom = result
    return result

import turtle
t = turtle.Turtle()
t.speed(5)
t.width(3)
t.ht()
t.tracer(50)

def hilbertSize(i):
	return 2**i - 1

hilbIters = 5
lineSeg = (t.window_width()-50) / hilbertSize(hilbIters)
offset = hilbertSize(hilbIters)*lineSeg/2
t.pu()
t.goto(-offset, offset)
t.pd()

def hilbert(iteration):
	path = ""A""
	newPath = """"
	while iteration > 0:
		for c in path:
			if c == 'A':
				newPath += ""+BF-AFA-FB+""
			elif c == 'B':
				newPath += ""-AF+BFB+FA-""
			else:
				newPath += c
		path = newPath
		newPath = """"
		iteration -= 1
	return path

def cleanPath(path):
	print(f""\tInput:\n{path}\n"")
	newPath = """"
	for c in path:
		if c == 'F' or c == '+' or c == '-':
			newPath += c
	
	path = newPath
	newPath = """"
	print(f""\tRemoved variables:\n{path}\n"")
	for i in range(0, len(path)):
		c = path[i]
		print(f""{i} : {c}"")
		if c == 'F':
			newPath += c
		elif c == '+':
			if i+1 < len(path) and path[i+1] == '-':
				continue
			else:
				newPath += c
		elif c == '-':
			if i+1 < len(path) and path[i+1] == '+':
				continue
			else:
				newPath += c
				
	path = newPath
	
	if path[len(path)-1] == '-' or path[len(path)-1] == '+':
		path = path[0:len(path)-1]
	
	print(f""\tRemoved negated rotations:\n{path}\n"")
	return path
	newPath = """"
	for c in path:
		if c == 'F' or c == '+' or c == '-':
			newPath += c
	
	path = newPath
	newPath = """"
	for i in range(0, len(path)):
		c = path[i]
		if c == 'F':
			newPath += c
		elif c == '+':
			if i+1 < len(path) and path[i+1] == '-':
				i += 1
			else:
				newPath += c
		elif c == '-':
			if i+1 < len(path) and path[i+1] == '+':
				i += 1
			else:
				newPath += c
				
	path = newPath
	if path[len(path)-1] == '-' or path[len(path)-1] == '+':
		path = path[0,len(path)-2]
	
	return path

def turn(ang):
	t.seth(t.heading()+ang)

def drawPath(path):
	for c in path:
		if c == 'F':
			t.fd(lineSeg)
		elif c == '+':
			turn(-90)
		elif c == '-':
			turn(90)
	t.tracer(1)


path = cleanPath(hilbert(hilbIters))
drawPath(path)"
PvUaiaYE,WEB-SCRAPING-LINKS.py,Najeebsk,Python,Monday 8th of January 2024 11:53:22 PM CDT,"import tkinter as tk
from tkinter import messagebox, filedialog
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class LinkScraperGUI:
    def __init__(self, master):
        self.master = master
        self.master.title(""Najeeb Shah Khan Web Links Scraper and save Text"")

        self.url_label = tk.Label(master, text=""Enter URL:"")
        self.url_label.pack()

        self.url_entry = tk.Entry(master, width=100)
        self.url_entry.pack()

        self.scrape_button = tk.Button(master, text=""Scrape Links"", command=self.scrape_links)
        self.scrape_button.pack()

    def scrape_links(self):
        url = self.url_entry.get()

        if not url:
            messagebox.showerror(""Error"", ""Please enter a valid URL."")
            return

        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            messagebox.showerror(""Error"", f""Error fetching URL: {e}"")
            return

        soup = BeautifulSoup(response.text, 'html.parser')

        # Extract all links from the webpage
        links = soup.find_all('a', href=True)

        if not links:
            messagebox.showinfo(""Info"", ""No links found on the given URL."")
            return

        # Ensure the links are complete URLs
        complete_links = [urljoin(url, link['href']) for link in links]

        # Prompt user to choose a file to save the links
        file_path = filedialog.asksaveasfilename(defaultextension="".txt"", filetypes=[(""Text files"", ""*.txt"")])

        if not file_path:
            return  # User canceled the save operation

        with open(file_path, 'w', encoding='utf-8') as file:
            # Write the complete links to the file
            for link in complete_links:
                file.write(link + '\n')

        messagebox.showinfo(""Success"", f""Complete URLs saved to {file_path}"")

if __name__ == ""__main__"":
    root = tk.Tk()
    app = LinkScraperGUI(root)
    root.mainloop()
"
hWrzQbMN,WEB-SCRAP-ALL-HTML-CODE.py,Najeebsk,Python,Monday 8th of January 2024 11:52:34 PM CDT,"import tkinter as tk
from tkinter import messagebox, filedialog
import requests
from bs4 import BeautifulSoup

class WebScraperGUI:
    def __init__(self, master):
        self.master = master
        self.master.title(""Najeeb Shah Khan HTML Code Web Scraper"")

        self.url_label = tk.Label(master, text=""Enter URL:"")
        self.url_label.pack()

        self.url_entry = tk.Entry(master, width=120)
        self.url_entry.pack()

        self.scrape_button = tk.Button(master, text=""Scrape Web Page"", command=self.scrape_web_page)
        self.scrape_button.pack()

    def scrape_web_page(self):
        url = self.url_entry.get()

        if not url:
            messagebox.showerror(""Error"", ""Please enter a valid URL."")
            return

        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            messagebox.showerror(""Error"", f""Error fetching URL: {e}"")
            return

        content = response.text

        # Prompt user to choose a file to save the content
        file_path = filedialog.asksaveasfilename(defaultextension="".txt"", filetypes=[(""Text files"", ""*.txt"")])

        if not file_path:
            return  # User canceled the save operation

        with open(file_path, 'w', encoding='utf-8') as file:
            # Write the complete content to the file
            file.write(content)

        messagebox.showinfo(""Success"", f""Web page content saved to {file_path}"")

if __name__ == ""__main__"":
    root = tk.Tk()
    app = WebScraperGUI(root)
    root.mainloop()
"
DDdD3KFi,INDEX-EXT-SCRAP.py,Najeebsk,Python,Monday 8th of January 2024 11:51:21 PM CDT,"import tkinter as tk
from tkinter import ttk
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class IndexOfScraperApp:
    def __init__(self, root):
        self.root = root
        self.root.title(""Najeeb Shah Khan Index Of URL Scraper By Extension"")

        self.url_label = ttk.Label(root, text=""Enter Index Of URL:"")
        self.url_entry = ttk.Entry(root, width=50)
        self.extension_label = ttk.Label(root, text=""Enter File Extension:"")
        self.extension_entry = ttk.Entry(root, width=10)
        self.scrape_button = ttk.Button(root, text=""Scrape URLs"", command=self.scrape_urls)
        self.result_text = tk.Text(root, height=36, width=124, wrap=""none"", state=tk.DISABLED)

        self.url_label.grid(row=0, column=0, pady=5)
        self.url_entry.grid(row=0, column=1, pady=5)
        self.extension_label.grid(row=0, column=2, pady=5)
        self.extension_entry.grid(row=0, column=3, pady=5)
        self.scrape_button.grid(row=0, column=4, pady=5)
        self.result_text.grid(row=1, column=0, columnspan=5, pady=10)

    def scrape_urls(self):
        url = self.url_entry.get()
        extension = self.extension_entry.get()

        if not url or not extension:
            return

        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            self.display_result(f""Error: {e}"")
            return

        soup = BeautifulSoup(response.content, 'html.parser')
        links = [a['href'] for a in soup.find_all('a', href=True) if a['href'].endswith(f'.{extension}')]

        if links:
            absolute_links = [urljoin(url, link) for link in links]
            result_text = ""\n"".join(absolute_links)
            self.display_result(result_text)
        else:
            self.display_result(f""No {extension} links found in the directory."")

    def display_result(self, text):
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, text)
        self.result_text.config(state=tk.DISABLED)

if __name__ == ""__main__"":
    root = tk.Tk()
    app = IndexOfScraperApp(root)
    root.mainloop()
"
