id,title,username,language,date,content
4Q5mMybJ,2024-06-20_stats.json,rdp_snitch,JSON,Thursday 20th of June 2024 07:15:07 PM CDT,"{
  ""ip"": {
    ""104.248.154.46"": 5,
    ""164.92.104.215"": 10,
    ""58.218.199.219"": 2,
    ""213.109.202.250"": 8,
    ""116.140.196.215"": 2,
    ""205.210.31.237"": 3,
    ""64.124.50.139"": 2,
    ""103.121.74.4"": 3,
    ""185.234.216.88"": 2,
    ""51.195.66.73"": 2,
    ""185.232.67.44"": 1,
    ""154.53.166.124"": 2,
    ""194.165.16.73"": 2,
    ""194.165.16.10"": 2,
    ""45.136.254.145"": 6,
    ""198.235.24.180"": 3,
    ""60.255.174.158"": 1,
    ""80.66.66.250"": 11,
    ""139.9.189.14"": 2,
    ""124.71.139.40"": 2,
    ""194.165.16.37"": 2,
    ""159.223.52.93"": 1,
    ""45.153.166.80"": 15,
    ""223.166.31.100"": 1,
    ""128.14.237.130"": 1,
    ""139.59.123.230"": 253,
    ""205.210.31.42"": 3,
    ""81.19.135.2"": 3,
    ""185.170.144.3"": 1,
    ""79.124.60.218"": 4,
    ""45.227.254.49"": 2,
    ""45.227.254.55"": 2,
    ""198.235.24.230"": 3,
    ""104.152.52.201"": 1
  },
  ""asn"": {
    ""AS14061"": 269,
    ""AS4134"": 2,
    ""AS208312"": 8,
    ""AS4837"": 3,
    ""AS396982"": 12,
    ""AS6461"": 2,
    ""AS134886"": 3,
    ""AS57523"": 2,
    ""AS16276"": 2,
    ""AS209132"": 1,
    ""AS62425"": 2,
    ""AS48721"": 6,
    ""AS56309"": 6,
    ""AS51765"": 11,
    ""AS55990"": 4,
    ""AS19437"": 15,
    ""AS17621"": 1,
    ""AS135377"": 1,
    ""AS209588"": 3,
    ""AS197414"": 1,
    ""AS50360"": 4,
    ""AS267784"": 4,
    ""AS14987"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 16,
    ""Chinanet"": 2,
    ""Red Byte LLC"": 8,
    ""China Unicom CHINA169 Network"": 2,
    ""Google LLC"": 12,
    ""Zayo Bandwidth"": 2,
    ""Super Sonic Broadband Pvt. Ltd"": 3,
    ""Chang Way Technologies Co. Limited"": 2,
    ""OVH SAS"": 2,
    ""IPADMIN CONTACT: noc@my-hosting.net"": 1,
    ""Mailbox Internet Hizmetleri Ltd. Sti."": 2,
    ""Flyservers S.A."": 13,
    ""Siamdata Communication Co., ltd."": 6,
    ""China Unicom China169 Network"": 1,
    ""Oy Crea Nova Hosting Solution Ltd"": 11,
    ""Huawei Cloud Service data center"": 4,
    ""Secured Servers LLC"": 15,
    ""China Unicom Shanghai Province Network"": 1,
    ""Zenlayer Inc"": 1,
    ""DIGITALOCEAN"": 253,
    ""Xhost Internet Solutions LP"": 1,
    ""Tamatiya EOOD"": 4,
    ""Rethem Hosting LLC"": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 269,
    ""Chinanet JS"": 2,
    ""Chang Way Technologies Co. Limited"": 10,
    ""China United Network Communications Corporation Limited"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Microsoft Corporation"": 2,
    ""Super Sonic Broadband Pvt Ltd"": 3,
    ""Ali Mehmet"": 2,
    ""Agent Global Network LTD"": 1,
    ""Kuzey Veri Merkezi Anonim Sirketi"": 2,
    ""Flyservers S.A"": 6,
    ""ReadyIDC Co., Ltd"": 6,
    ""SiChuan Cable TV Network CO., LTD"": 1,
    ""Xhost Internet Solutions"": 11,
    ""Huawei Public Cloud Service"": 2,
    ""Huawei Cloud Service"": 2,
    ""Net"": 15,
    ""Unknown"": 1,
    ""UCLOUD"": 1,
    ""Alviva Holding Limited"": 3,
    ""Xhostis"": 1,
    ""Tamatiya EOOD"": 4,
    ""UAB Host Baltic"": 4,
    ""Rethem Hosting LLC"": 1
  },
  ""regionName"": {
    ""Central Singapore"": 5,
    ""California"": 22,
    ""Jiangsu"": 2,
    ""Moscow"": 10,
    ""Beijing"": 2,
    ""Virginia"": 17,
    ""Maharashtra"": 3,
    ""Hesse"": 5,
    ""Timi\u0219 County"": 1,
    ""Istanbul"": 2,
    ""Kaunas"": 6,
    ""Nonthaburi"": 6,
    ""Sichuan"": 1,
    ""Uusimaa"": 11,
    ""Guangdong"": 2,
    ""Shanghai"": 3,
    ""South West"": 254,
    ""Taiwan"": 1,
    ""North Holland"": 1,
    ""Plovdiv"": 4,
    ""Vilnius"": 4,
    ""Illinois"": 1
  },
  ""country"": {
    ""Singapore"": 259,
    ""United States"": 40,
    ""China"": 10,
    ""Russia"": 10,
    ""India"": 3,
    ""Germany"": 5,
    ""Romania"": 1,
    ""T\u00fcrkiye"": 2,
    ""Lithuania"": 10,
    ""Thailand"": 6,
    ""Finland"": 11,
    ""Taiwan"": 1,
    ""The Netherlands"": 1,
    ""Bulgaria"": 4
  },
  ""account"": {
    ""hello"": 300,
    ""Test"": 19,
    ""(empty)"": 4,
    ""eMfVwdgXp"": 1,
    ""zfwfYo"": 1,
    ""KihqbH"": 1,
    ""Administr"": 15,
    ""YAiLJHvoR"": 1,
    ""OjnrFu"": 1,
    ""ntkBNa"": 1,
    ""Domain"": 7,
    ""Administrator"": 1,
    ""AsJUsRuPn"": 1,
    ""wCVuly"": 1,
    ""dNZAOz"": 1,
    ""c7sbakcm"": 4,
    ""VHNcyopSl"": 1,
    ""zZGJBZ"": 1,
    ""RzSTqQ"": 1,
    ""nmap"": 1
  },
  ""keyboard"": {
    ""Unknown"": 363
  },
  ""client_build"": {
    ""Unknown"": 363
  },
  ""client_name"": {
    ""Unknown"": 363
  },
  ""ip_type"": {
    ""hosting"": 310,
    ""Unknown"": 28,
    ""proxy"": 10,
    ""hosting & proxy"": 15
  }
}"
CkcWTKd1,🤑G2A.com Free Gift Card FIX June 2024🤑,mikyser,JavaScript,Thursday 20th of June 2024 07:11:09 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
E1zZcTG7,MySqlCommand,Genral,C#,Thursday 20th of June 2024 07:07:34 PM CDT,"using System;
using System.Data;
using System.Text;
using Sinaa_Project;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace AmirSQL.MySQL
{
    public class MySqlCommand : IDisposable
    {
        //private MySqlCommandType _type;
        public MySqlCommandType Type { get; set; }
        private StringBuilder _command;
        private List<MySqlParameter> _parameters = new List<MySqlParameter>();
        public List<MySqlParameter> Parameters => _parameters;
        public string Command
        {
            get => _command.ToString();
            private set => _command = new StringBuilder(value);
        }

        private bool firstPart = true;
        private Dictionary<byte, string> insertFields;
        private Dictionary<byte, string> insertValues;
        private byte lastpair;

        public MySqlCommand(MySqlCommandType type)
        {
            Type = type;
            _command = new StringBuilder();

            switch (type)
            {
                case MySqlCommandType.SELECT:
                    _command = new StringBuilder(""SELECT * FROM <R>"");
                    break;
                case MySqlCommandType.UPDATE:
                    _command = new StringBuilder(""UPDATE <R> SET "");
                    break;
                case MySqlCommandType.INSERT:
                    insertFields = new Dictionary<byte, string>();
                    insertValues = new Dictionary<byte, string>();
                    lastpair = 0;
                    _command = new StringBuilder(""INSERT INTO <R> (<F>) VALUES (<V>)"");
                    break;
                case MySqlCommandType.DELETE:
                    _command = new StringBuilder(""DELETE FROM <R> WHERE <C> = <V>"");
                    break;
                case MySqlCommandType.COUNT:
                    _command = new StringBuilder(""SELECT count(<V>) FROM <R>"");
                    break;
            }
        }
        private bool Comma()
        {
            if (firstPart)
            {
                firstPart = false;
                return false;
            }
            return _command[_command.Length - 1] != ',';
        }

        public MySqlCommand Select(string table)
        {
            _command = _command.Replace(""<R>"", $""`{table}`"");
            return this;
        }

        public MySqlCommand Count(string table)
        {
            _command = _command.Replace(""<R>"", $""`{table}`"");
            return this;
        }

        public MySqlCommand Delete(string table, string column, object value)
        {
            _command = _command.Replace(""<R>"", $""`{table}`"")
                               .Replace(""<C>"", $""`{column}`"")
                               .Replace(""<V>"", value is string str ? $""'{str.MySqlEscape()}'"" : value.ToString());
            return this;
        }

        public MySqlCommand Update(string table)
        {
            _command = _command.Replace(""<R>"", $""`{table}`"");
            return this;
        }

        //public MySqlCommand Set(string column, object value)
        //{
        //    if (Type == MySqlCommandType.UPDATE)
        //    {
        //        if (Comma())
        //            _command.Append($"", `{column}` = {(value is byte[]? $""@{column}"" : (value is string str ? $""'{str.MySqlEscape()}'"" : value.ToString()))} "");
        //        else
        //            _command.Append($""`{column}` = {(value is byte[]? $""@{column}"" : (value is string str ? $""'{str.MySqlEscape()}'"" : value.ToString()))} "");

        //        if (value is byte[])
        //        {
        //            AddParameter($""@{column}"", value);
        //        }
        //    }
        //    return this;
        //}
        //public MySqlCommand Set(string column, object value)
        //{
        //    if (Type == MySqlCommandType.UPDATE)
        //    {
        //        string parameterPlaceholder = $""@{column}"";

        //        if (Comma())
        //        {
        //            _command.Append($"", `{column}` = {parameterPlaceholder} "");
        //        }
        //        else
        //        {
        //            _command.Append($""`{column}` = {parameterPlaceholder} "");
        //        }

        //        AddParameter(parameterPlaceholder, value);
        //    }
        //    return this;
        //}
        public MySqlCommand Set(string column, object value)
        {
            if (Type == MySqlCommandType.UPDATE)
            {
                bool isByteArray = value is byte[];
                string parameterPlaceholder = $""@{column}"";

                if (Comma())
                {
                    _command.Append($"", `{column}` = {parameterPlaceholder} "");
                }
                else
                {
                    _command.Append($""`{column}` = {parameterPlaceholder} "");
                }

                // Add the parameter to the list
                AddParameter(parameterPlaceholder, value);

                
                Program.AddError($""Set column: {column}, value: {(isByteArray ? ""byte[]"" : value.ToString())}"");
            }
            return this;
        }





        public MySqlCommand Insert(string table)
        {
            _command = _command.Replace(""<R>"", $""`{table}`"");
            return this;
        }

        public MySqlCommand Insert(string field, object value)
        {
            insertFields.Add(lastpair, $""`{field}`"");
            insertValues.Add(lastpair, value is byte[]? $""@{field}"" : (value is string str ? $""'{str.MySqlEscape()}'"" : value.ToString()));
            if (value is byte[])
            {
                AddParameter($""@{field}"", value);
            }
            lastpair++;
            return this;
        }

        //public MySqlCommand AddParameter(string name, object value)
        //{
        //    _parameters.Add(new MySqlParameter(name, value));
        //    return this;
        //}
        public MySqlCommand AddParameter(string name, object value)
        {
            if (value == DBNull.Value)
            {
                _parameters.Add(new MySqlParameter(name, value));
            }
            else if (value is byte[])
            {
                _parameters.Add(new MySqlParameter(name, MySqlDbType.Blob) { Value = value });
            }
            else
            {
                _parameters.Add(new MySqlParameter(name, value));
            }
            return this;
        }


        public MySqlCommand Where(string column, object value, bool greater = false, bool like = false)
        {
            if (like)
            {
                if (value is string stringValue)
                {
                    _command.Append($""WHERE `{column}` LIKE '{stringValue.MySqlEscape()}'"");
                }
                else
                {
                    _command.Append($""WHERE `{column}` LIKE {value}"");
                }
            }
            else
            {
                if (value is string stringValue)
                {
                    _command.Append(greater ? $""WHERE `{column}` > '{stringValue.MySqlEscape()}'"" : $""WHERE `{column}` = '{stringValue.MySqlEscape()}'"");
                }
                else
                {
                    _command.Append(greater ? $""WHERE `{column}` > {value}"" : $""WHERE `{column}` = {value}"");
                }
            }
            return this;
        }

        public MySqlCommand And(string column, object value)
        {
            _command.Append($"" AND `{column}` = {value}"");
            return this;
        }

        public MySqlCommand Or(string column, object value)
        {
            _command.Append($"" OR `{column}` = {value}"");
            return this;
        }

        public MySqlCommand Order(string column)
        {
            _command.Append($"" ORDER BY {column}"");
            return this;
        }
        public int Execute()
        {
            using (var conn = DataHolder.MySqlConnection)
            {
                conn.Open();
                return Execute(conn);
            }
        }
        public int Execute(MySqlConnection conn)
        {
            
            if (Type == MySqlCommandType.INSERT)
            {
                var fields = string.Join("","", insertFields.Values);
                var values = string.Join("","", insertValues.Values);
                _command.Replace(""<F>"", fields).Replace(""<V>"", values);
            }
            Program.AddError(""Executing Command: "" + Command); // Log the command
            using (var cmd = new MySql.Data.MySqlClient.MySqlCommand(Command, conn))
            {
                foreach (var parameter in _parameters)
                {
                    Program.AddError($""Parameter: {parameter.ParameterName}, Value: {parameter.Value}""); // Log parameters
                    cmd.Parameters.Add(parameter);
                }
                return cmd.ExecuteNonQuery();
            }
        }

        public MySqlReader CreateReader()
        {
            return new MySqlReader(this);
        }

        public void Dispose()
        {
            insertValues?.Clear();
            insertFields?.Clear();
            _command = null;
        }
    }

    public enum MySqlCommandType
    {
        DELETE, INSERT, SELECT, UPDATE, COUNT
    }

    public class MySqlReader : IDisposable
    {
        private readonly DataSet _dataset;
        private DataRow _datarow;
        private int _row;
        private const string Table = ""table"";

        public MySqlReader(MySqlCommand command)
        {
            if (command.Type == MySqlCommandType.SELECT)
            {
                _dataset = new DataSet();
                _row = 0;
                using (var conn = DataHolder.MySqlConnection)
                {
                    conn.Open();
                    using (var adapter = new MySqlDataAdapter(command.Command, conn))
                        adapter.Fill(_dataset, Table);
                }
                command.Dispose();
            }
        }

        public void Dispose()
        {
            _dataset?.Dispose();
        }

        public bool Read()
        {
            if (_dataset == null || _dataset.Tables.Count == 0 || _dataset.Tables[Table].Rows.Count <= _row)
                return false;

            _datarow = _dataset.Tables[Table].Rows[_row];
            _row++;
            return true;
        }

        public int NumberOfRows => _dataset?.Tables.Count > 0 ? _dataset.Tables[Table].Rows.Count : 0;

        public T Read<T>(string columnName)
        {
            if (_datarow.IsNull(columnName)) return default;

            var value = _datarow[columnName];
            return (T)Convert.ChangeType(value, typeof(T));
        }
    }

    public static class MySqlExtensions
    {
        public static string MySqlEscape(this string usString)
        {
            if (usString == null) return null;
            return Regex.Replace(usString, @""[\r\n\x00\x1a\\'""""]"", @""\$0"");
        }
    }

    public static class DataHolder
    {
        public static MySqlConnection MySqlConnection => new MySqlConnection(Program.connection(""db_sql"", """"));
    }
}
"
2eygpp8c,🤑G2A.com Free Gift Card FIX June 2024🎁,Ohtaku,JavaScript,Thursday 20th of June 2024 07:05:07 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
fHT6ZEks,🤑G2A.com Free Gift Card FIX June 2024🎁,Elii,JavaScript,Thursday 20th of June 2024 06:59:09 PM CDT,"G2A.com free gift card & games guide.
Any gift card for free on G2A.com including Amazon gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
rF7MXXaE,🤑G2A.com Free Gift Card FIX June 2024🤑,guywithabigheart,JavaScript,Thursday 20th of June 2024 06:53:12 PM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17th 2024

"
PZwmQv4E,Kartra Visit-Based Countdown Timer,briank,JavaScript,Thursday 20th of June 2024 06:51:14 PM CDT,"<script>
/*
 * A ""footer script"" to make Kartra ""fixed"" countdown timers count a fixed amount of time on each page visit.
 * Author: Brian Katzung (briank@kappacs.com)
 * Version date: 2024-06-20
 */
$('div.countdown-section[data-countdown=fixed]').find('div.countdown').each(function () {
    $(this).stopCountDown();
    $(this).countDown({ targetOffset: {
        year: 0, month: 0, day: 0, hour: 1, min: 30, sec: 0
    }});
});
</script>"
aQwGh7zJ,🤑G2A.com Free Gift Card FIX June 2024🤑,PetrikDev,JavaScript,Thursday 20th of June 2024 06:47:14 PM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
m01KKkdP,🤑G2A.com Free Gift Card FIX June 2024🤑,x3kiN,JavaScript,Thursday 20th of June 2024 06:41:16 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
5wceyZ3f,🤑G2A.com Free Gift Card FIX June 2024🤑,FeasModz514,JavaScript,Thursday 20th of June 2024 06:35:18 PM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Playstation gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
hZRYSF7d,🤑G2A.com Free Gift Card FIX June 2024🤑,kiraezwhethe,JavaScript,Thursday 20th of June 2024 06:29:20 PM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
cCU4nrh0,🤑G2A.com Free Gift Card FIX June 2024🎁,ColtM4A2,JavaScript,Thursday 20th of June 2024 06:23:20 PM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
17th of June 2024

"
WPqMm2i3,🤑G2A.com Free Gift Card FIX June 2024🎁,Skarface-MKL,JavaScript,Thursday 20th of June 2024 06:17:23 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1oScJEHt6q28O32jChlklUQU6fKtmP1mn/view?11648

Working as of:
June 17 2024

"
e1a4PSfZ,Docker Compose - Wireguard (QNAP),pablopc,YAML,Thursday 20th of June 2024 06:08:47 PM CDT,"version: '3.3'
services:
  wireguard: 
    image: masipcat/wireguard-go:latest
    container_name: wireguard
    cap_add:
     - NET_ADMIN
    sysctls:
     - net.ipv4.ip_forward=1
    volumes:
     - /dev/net/tun:/dev/net/tun
     - /share/DockerData/wireguard:/etc/wireguard
    environment:
     - WG_COLOR_MODE=always
     - LOG_LEVEL=debug
    ports:
     - 55555:51820
    privileged: true
    restart: unless-stopped"
ANsknUy1,actualizar.py,jackox,Python,Thursday 20th of June 2024 06:03:06 PM CDT,"#ItemAlert v4
#actualizar.py

import configparser
import re
import urllib.request
import subprocess

config = configparser.ConfigParser()
config.read('config.ini')
midispositivo = config['DISPOSITIVO']['ID']
url = config['GSHEET']['URL']

with urllib.request.urlopen(url) as response:
   html = response.read().decode('utf-8')

regex = r""---.*?--(.*?)--.*?---""
r1 = re.findall(regex, html)
adispositivo = r1[0]
aactualizar = r1[1]
aurl = r1[2]

print (adispositivo)
print (aactualizar)
print (aurl)

if (aactualizar == 'SI'):
    with urllib.request.urlopen(aurl) as response:
        codigo = response.read()
    with open(""itemalert.py"", ""wb"") as f:
        f.write(codigo)
        f.close()
subprocess.call(""itemalert.py"", shell=True)
#exec(open(""itemalert.py"").read())"
TRHdH43Z,itemalert4.py,jackox,Python,Thursday 20th of June 2024 05:33:07 PM CDT,"#ItemAlert v4
#itemalert4.py

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from datetime import datetime
from urllib.parse import quote
from urllib.request import urlopen

import time
import re
import configparser
import logging
import sys

def consultabd(eburl):
    import sqlite3

    con = sqlite3.connect('itemalert.db', isolation_level = None)
    cur = con.cursor()
    res = cur.execute(""CREATE TABLE IF NOT EXISTS BD (id INTEGER PRIMARY KEY,EBURL text NOT NULL)"")
    res = cur.execute(""SELECT * FROM BD WHERE EBURL='"" + eburl + ""'"")
    row = res.fetchone()
    if row is None:
        cur.execute(""INSERT INTO BD (EBURL) VALUES ('""+ eburl +""')"")
        return 0
    else:
        return 1
    con.close()

def enviadatos(micodigo,midispositivo,mensaje,desc,eburl,precio,imagen):
    from urllib.request import urlopen
    import urllib.parse
    import logging
    import sys

    try:
        url = ""https://script.google.com/macros/s/"" + micodigo + ""/exec?disp="" + str(midispositivo) + ""&mensaje="" + mensaje  + ""&desc="" + urllib.parse.quote(desc)  + ""&eburl="" + eburl  + ""&precio="" + urllib.parse.quote(precio)  + ""&imagen="" + imagen
        print(url)
        req = urlopen(url)
    except Exception:
        e = sys.exc_info()[1]
        print (e)
        pass

logging.basicConfig(filename='ia.log', filemode='a', level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info(""Iniciando ..."")
print (""Iniciando ..."")

config = configparser.ConfigParser()
config.read('config.ini')
midispositivo = config['DISPOSITIVO']['ID']
miusuario = config['ITEMALERT']['USER']
mipass = config['ITEMALERT']['PASS']
mibusqueda = config['ITEMALERT']['SEARCH']
micodigo = config['GSHEET']['CODIGO']

options = webdriver.ChromeOptions()
options.add_argument(""--no-sandbox"")
options.add_argument(""--disable-dev-shm-usage"")
options.add_argument(""--headless=new"")
driver = webdriver.Chrome(options=options)
driver.get(""https://itemalert.com/login"")
usuario = driver.find_element(By.NAME, 'username')
pswrd = driver.find_element(By.NAME, 'password')
usuario.send_keys(miusuario)
pswrd.send_keys(mipass)
pswrd.send_keys(Keys.RETURN)
logging.info(""Logeado en itemalert"")

driver.get(""https://itemalert.com/savedsearch"")
cv = driver.find_element(By.NAME, mibusqueda)
cv.click()

go = driver.find_element(By.NAME, 'go')
driver.execute_script(""arguments[0].click();"", go)
#go.click()

email = driver.find_element(By.XPATH,'//p[@data-original-title=""new result email""]')
email.click()

eterror = driver.find_element(By.XPATH,'//div[@id=""error""]')
errorat = eterror.get_attribute('innerHTML')

logging.info(""Monitoreo iniciado, mensaje: "" + errorat)
j = 0
while True:
       symbols = str(datetime.now())
       nomimg = ""captura-"" + """".join(symbols) + "".png""
       nomimg = nomimg.replace("":"","""")
       nomimg = nomimg.replace("" "","""")
       eterror = driver.find_element(By.XPATH,'//div[@id=""error""]')
       errorat = eterror.get_attribute('innerHTML')
       errorat = re.sub(r'<[^>]*?>', '', errorat)
       errorat = errorat.replace("" "","""")
       errorat = quote(errorat)
       logging.info(""Error: "" + errorat)

       if(errorat == ""NoeBayErrors%21""):
              if(j == 15):
                  j = 1
                  print(""Enviando aviso de funcionamiento"")
                  enviadatos(micodigo,midispositivo,errorat,"""","""","""","""")
              else:
                  j += 1
              print (""ItemAlert operando sin errores: "" + str(j) + "" de 15"")
              html = driver.execute_script(""return document.body.innerHTML"")

              regex = 'l l-d"".*?>(.*?)<\/span>'#Descripciones
              descs = re.findall(regex, html)
              regex = '""p-r"" href=.*?itm\/(.*?)\?'#Clave ebay
              eburls = re.findall(regex, html)
              regex = 'Fixed Price @ (.*?) USD|Auction : (.*?) USD'#Precio
              precios = re.findall(regex, html)
              regex = 'images\/g\/(.*?)\/s-l225.jpg'#Imagen
              imagenes = re.findall(regex, html)
              length = len(descs)
              logging.info(""Registros encontrados: "" + str(length))
              for i in range(length//2):
                     desc = descs[i]
                     eburl = eburls[i]
                     precio = precios[i][0] + precios[i][1]
                     imagen = imagenes[i]
                     nregs = consultabd(eburl)
                     if nregs == 0:
                            print (""Item "" + eburl + "" NO encontrado en BD"")
                            enviadatos(micodigo,midispositivo,""Nuevo_item_encontrado:_"" + eburl,desc,eburl,precio,imagen)
                            time.sleep(5)
                     else:
                         print (""Item "" + eburl + "" encontrado en BD"")
              time.sleep(20)
       else:
              logging.info(""NO Entro al if error, error:"" + errorat)
              print(""NO Entro al if error"")
              enviadatos(micodigo,midispositivo,errorat,"""","""","""","""")
              time.sleep(300)
driver.quit()"
1kcbdkXs,itemalert4.gs,jackox,JavaScript,Thursday 20th of June 2024 05:30:53 PM CDT,"//ItemAlert v4 Google Apps Script
//itemalert4.gs

function doGet(e){
  var dispositivo = e.parameter.disp;
  var mensaje = e.parameter.mensaje;
  var desc = e.parameter.desc;
  var eburl = e.parameter.eburl;
  var precio = e.parameter.precio;
  var imagen = e.parameter.imagen;

  //Si la variable dispositivo es 1 o 2 la llamada viene de Python
  if (dispositivo==1 || dispositivo==2){
    itemalert(dispositivo,mensaje);
    iabasedatos(dispositivo,desc,eburl,precio,imagen);
    var HTMLString = ""<h1>DISPOSITIVO "" + dispositivo + "", "" + mensaje + ""</h1><br>"" + Logger.getLog();
  } else {//De los contrario la llamada viene de CronJob
    monitoreo();
    var HTMLString = ""<h1>MONITOREO</h1>"";
  }
  HTMLOutput = HtmlService.createHtmlOutput(HTMLString);
  return HTMLOutput;
}

//Función que recibe mensajes de error o de ok para un dispositivo
//y lo almacena en la hoja del dispositivo para monitoreo por CronJob
function itemalert(dispositivo,mensaje){
  var fecha = Utilities.formatDate(new Date(), ""GMT-6"", ""MMMM dd, yyyy HH:mm:ss"");
  var libro = SpreadsheetApp.getActiveSpreadsheet();
  var hoja =libro.getSheetByName(""Dispositivo"" + dispositivo);

  hoja.appendRow([ fecha,mensaje ]);
}

//Función que recibe los datos de una publicación para un dispositivo
//y los almacena en la BD
function iabasedatos(dispositivo,desc,eburl,precio,imagen){
	var libro = SpreadsheetApp.getActiveSpreadsheet();
	var hojaInicio =libro.getSheetByName(""Inicio"");
	var hojaBD =libro.getSheetByName(""BD"");

  Logger.log('Punto 2');
	
	hojaInicio.getRange(16,3).setValue(desc);
	hojaInicio.getRange(17,3).setValue('https://www.ebay.com/itm/' + eburl);
	encontrado = hojaInicio.getRange(22, 3).getValue();
	
	if(encontrado=='NO'){
    aviso = hojaInicio.getRange(26, 3).getValue();
		hojaBD.appendRow([ dispositivo,desc,'https://www.ebay.com/itm/' + eburl,precio,imagen,aviso ]);
		if(aviso=='SI'){
			var mensaje = ""<p>"" + desc + ""</p>"";
			mensaje += ""<p>Precio = "" + precio + ""</p>"";
			mensaje += ""<p>Enlace = https://www.ebay.com/itm/"" + eburl + ""</p>"";
			mensaje += ""<p><img src='https://i.ebayimg.com/thumbs/images/g/"" + imagen + ""/s-l225.jpg'></p>"";
      MailApp.sendEmail({
      to: 'julio.almanza.cel@gmail.com',
      subject: 'ItemAlert:' + desc, mensaje,
      htmlBody: mensaje
    });
		}
	}
}

//Función que recibe el monitoreo de CronJob cada determinados minutos
//para verificar que los dispositivos se encuentren funcionando correctamente
function monitoreo(){
  var libro = SpreadsheetApp.getActiveSpreadsheet();
  var hojaInicio =libro.getSheetByName(""Inicio"");
  var hojaMonitoreo =libro.getSheetByName(""Monitoreo"");
  var fecha = Utilities.formatDate(new Date(), ""GMT-6"", ""MMMM dd, yyyy HH:mm:ss"");

  monitoreoxdispositivo(1);
  monitoreoxdispositivo(2);

  Estado1 = hojaInicio.getRange(3, 5).getValue();
  Estado2 = hojaInicio.getRange(4, 5).getValue();

  //Verifica que alguno de los dos dispositivos este en línea, en caso contrario envía un correo de aviso
  if(Estado1=='En linea' || Estado1=='En linea'){
    hojaMonitoreo.appendRow([ fecha,'Dispositivos funcionando correctamente' ]);
  }else{
    hojaMonitoreo.appendRow([ fecha,'Ambos dispositivos se encuentran apagados o en error' ]);
	  MailApp.sendEmail('julio.almanza.cel@gmail.com', 'ItemAlert: Apagados o con error', 'Ambos dispositivos se encuentran apagados o en error');
  }
}

//Función para revisar el estado de cada dispositivo
function monitoreoxdispositivo(dispositivo){
  var libro = SpreadsheetApp.getActiveSpreadsheet();
  var hoja = libro.getSheetByName(""Dispositivo"" + dispositivo);
  var hojaMonitoreo =libro.getSheetByName(""Monitoreo"");
  var hojaInicio =libro.getSheetByName(""Inicio"");

  var fecha = Utilities.formatDate(new Date(), ""GMT-6"", ""MMMM dd, yyyy HH:mm:ss"");

  nuevo = hoja.getRange(1, 9).getValue();
  anterior = hoja.getRange(1, 11).getValue();
  mensaje = hoja.getRange(1, 12).getValue();

  if(nuevo>anterior && mensaje=='NoeBayErrors!'){
    hoja.getRange(1,4).setValue('En linea');
  }
  if(nuevo==anterior){
    hoja.getRange(1,4).setValue('Apagado');
  }
  if(mensaje=!'NoeBayErrors!'){
    hoja.getRange(1,4).setValue('Error');
    hojaMonitoreo.appendRow([ fecha,'Error en Dispoditivo ' + dispositivo ]);
    //Envía correo para avisar del error
    MailApp.sendEmail('julio.almanza.cel@gmail.com', 'ItemAlert: Dispositivo ' + dispositivo + ' con error', 'Dispositivo ' + dispositivo + ' con error');
  }

  hoja.getRange(1,11).setValue(nuevo);

  if(nuevo>=500){
    hoja.getRange(""A1:B510"").clearContent();
    hoja.getRange(1,11).setValue(0);
  }
}"
6Haq2mQ7,🎁G2A.com Free Gift Card Guide June 2024 V2🎁,ssss50ws,GetText,Thursday 20th of June 2024 05:14:52 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
21 June 2024"
y1m8FCAw,Untitled,DasBrain,Java,Thursday 20th of June 2024 04:57:11 PM CDT,"import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.methodType;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodType;

public class MethodHandleChain {
    public static void main(String[] args) {
        Class<?> rt = Object.class;
        
        MethodHandle ctor = empty(methodType(rt, String.class));
        MethodHandle read1 = empty(methodType(void.class, rt, Long.class));
        MethodHandle read2 = empty(methodType(void.class, rt, Integer.class));
        
        
        MethodHandle result = identity(rt);
        
        result = dup(collectArguments(result, 1, read2));
        result = dup(collectArguments(result, 1, read1));
        
        result = collectArguments(result, 0, ctor);
        System.out.println(result);
    }
    
    // Duplicates parameter at pos 0
    private static MethodHandle dup(MethodHandle mh) {
        MethodType mt = mh.type();
        if (mt.parameterType(0) != mt.parameterType(1)) {
            throw new IllegalArgumentException(""First 2 parameters need to have the same type, got "" + mt);
        }
        MethodType newMT = mt.dropParameterTypes(0, 1);
        int[] permutation = new int[mt.parameterCount()];
        permutation[0] = 0;
        for (int i = 0; i < newMT.parameterCount(); i++) {
            permutation[i + 1] = i;
        }
        return permuteArguments(mh, newMT, permutation);
    }
}
"
N3vvKsEN,"""Button Detection"" rev_01",pleasedontcode,Arduino,Thursday 20th of June 2024 04:36:41 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Detection""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-20 21:35:52

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* chci kod pro kviz na webu pro mobilní telefon s 5 */
	/* otázky (otázky chci, aby šli lehce přidávat), dále */
	/* chci otázky typu a, b, c, d; dále ano/ne; volná */
	/* odpověď. dále přihlášení uživatelu a vyhodnoceni, */
	/* zpětná vazba po otázkách */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t jj_PushButton_PIN_D4 = 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(jj_PushButton_PIN_D4); // Initialize EasyButton instance with the pin

void onButtonPressed() {
  Serial.println(""Button pressed"");
}

void setup(void)
{
  // put your setup code here, to run once:
  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton example <<<"");

  button.begin(); // Initialize the button
  button.onPressed(onButtonPressed); // Attach the callback function

  pinMode(jj_PushButton_PIN_D4, INPUT_PULLUP);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  button.read(); // Read the button state
}

/* END CODE */"
eH04ukh3,textDuplication3D,marcusa3000,Lua,Thursday 20th of June 2024 04:20:52 PM CDT,"{
	Tools = ordered() {
		Duplicate3D1 = Duplicate3D {
			Inputs = {
				LastCopy = Input { Value = 10, },
				[""Translate.Y""] = Input {
					SourceOp = ""Duplicate3D1YOffset"",
					Source = ""Value"",
				},
				[""Translate.Z""] = Input { Value = -0.75, },
				SceneInput = Input {
					SourceOp = ""Text3D"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1430, 3349.5 } },
		},
		Duplicate3D1YOffset = BezierSpline {
			SplineColor = { Red = 252, Green = 57, Blue = 47 },
			CtrlWZoom = false,
			KeyFrames = {
				[0] = { 0, RH = { 15.1, 0 }, Flags = { Linear = true } },
				[78] = { -0.13, LH = { 5, -0.13 } }
			}
		},
		Merge3D1 = Merge3D {
			Inputs = {
				SceneInput1 = Input {
					SourceOp = ""Duplicate3D1"",
					Source = ""Data3D"",
				},
				SceneInput2 = Input {
					SourceOp = ""Instance_Duplicate3D1"",
					Source = ""Data3D"",
				},
				SceneInput3 = Input {
					SourceOp = ""Camera3D1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3415.5 } },
		},
		Text3D = Text3D {
			NameSet = true,
			Inputs = {
				LayoutRotation = Input { Value = 1, },
				TransformRotation = Input { Value = 1, },
				StyledText = Input { Value = ""JustCropIt"", },
				Font = Input { Value = ""Helvetica Neue"", },
				Style = Input { Value = ""Bold"", },
				Size = Input { Value = 0.32, },
				VerticalJustification = Input { Value = 3, },
				VerticalJustificationNew = Input { Value = 3, },
				HorizontalJustificationNew = Input { Value = 3, },
				ExtrusionProfile = Input {
					SourceOp = ""Text3DExtrusionProfile"",
					Source = ""Value"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3283.5 } },
		},
		Text3DExtrusionProfile = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0, RH = { 0.0666666666666667, 0.333333333333333 }, Flags = { Linear = true } },
					[0.2] = { 1, LH = { 0.133333333333333, 0.666666666666667 }, RH = { 0.4, 1 }, Flags = { Linear = true } },
					[0.8] = { 1, LH = { 0.6, 1 }, RH = { 0.866666666666667, 0.666666666666667 }, Flags = { Linear = true } },
					[1] = { 0, LH = { 0.933333333333333, 0.333333333333333 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		Instance_Duplicate3D1 = Duplicate3D {
			SourceOp = ""Duplicate3D1"",
			Inputs = {
				Translation = Input { },
				[""Translate.Y""] = Input {
					Value = 0.118859126706157,
					Expression = ""-Duplicate3D1.Translate.Y""
				},
				Rotation = Input { Value = 0, },
				PivotNest = Input { },
				ScaleNest = Input { },
				Randomize = Input { },
				TranslationJitter = Input { },
				RotationJitter = Input { },
				PivotJitterNest = Input { },
				ScaleJitterNest = Input { },
				RegionNest = Input { },
				SceneInput = Input {
					SourceOp = ""Text3D"",
					Source = ""Output"",
				},
				CommentsNest = Input { },
				FrameRenderScriptNest = Input { },
				StartRenderScripts = Input { },
				EndRenderScripts = Input { },
			},
			ViewInfo = OperatorInfo { Pos = { 1540, 3349.5 } },
		},
		Fog3D1 = Fog3D {
			Inputs = {
				SceneInput = Input {
					SourceOp = ""Merge3D1"",
					Source = ""Output"",
				},
				ShowFogInView = Input { Value = 1, },
				FogRed = Input { Value = 0, },
				FogGreen = Input { Value = 0, },
				FogBlue = Input { Value = 0, },
				NearFogDist = Input { Value = 1.6, },
				FarFogDistance = Input { Value = 9.68, },
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3481.5 } },
		},
		Camera3D1 = Camera3D {
			Inputs = {
				[""Transform3DOp.Translate.Z""] = Input { Value = 2.1, },
				ProjectionType = Input { Value = FuID { ""Orthographic"" }, },
				OrthoFarClip = Input { Value = 170, },
				AoV = Input { Value = 19.2642683071402, },
				[""Stereo.Mode""] = Input { Value = FuID { ""OffAxis"" }, },
				FilmGate = Input { Value = FuID { ""BMD_URSA_4K_16x9"" }, },
				ApertureW = Input { Value = 0.831496062992126, },
				ApertureH = Input { Value = 0.467716535433071, },
				ViewingVolumeSize = Input { Value = 0.732, },
				[""SurfacePlaneInputs.ObjectID.ObjectID""] = Input { Value = 1, },
				[""MtlStdInputs.MaterialID""] = Input { Value = 1, },
			},
			ViewInfo = OperatorInfo { Pos = { 1595, 3415.5 } },
		},
		Renderer3D2_2 = Renderer3D {
			CustomData = { ToolVersion = 2, },
			Inputs = {
				[""RendererSoftware.Channels.Nest""] = Input { Value = 1, },
				Quality = Input { Value = 5, },
				GlobalOut = Input { Value = 78, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 2160, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				SceneInput = Input {
					SourceOp = ""Fog3D1"",
					Source = ""Output"",
				},
				RendererType = Input { Value = FuID { ""RendererOpenGL"" }, },
				[""RendererOpenGL.AntiAliasing.Nest""] = Input { Value = 1, },
				[""RendererOpenGL.AntiAliasing.Channels.SelectedChannel""] = Input { Value = FuID { ""Vector"" }, },
				[""RendererOpenGL.AntiAliasing.Channels.RGBA.LowQuality.Enable""] = Input { Value = 0, },
				[""RendererOpenGL.AntiAliasing.Channels.RGBA.HighQuality.Enable""] = Input { Value = 0, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Supersampling.HighQuality.Rate""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Multisampling.LowQuality.SampleCount""] = Input { Value = 2, },
				[""RendererOpenGL.AntiAliasing.Presets.Color.Multisampling.HighQuality.SampleCount""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Supersampling.HighQuality.Rate""] = Input { Value = 3, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Multisampling.LowQuality.SampleCount""] = Input { Value = 2, },
				[""RendererOpenGL.AntiAliasing.Presets.Aux.Multisampling.HighQuality.SampleCount""] = Input { Value = 3, },
				[""RendererOpenGL.AccumQuality""] = Input { Value = 32, },
				[""RendererOpenGL.MaximumTextureDepth""] = Input { Value = 4, },
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3547.5 } },
			SubInputsData = {
				RendererOpenGL = {
					Version = 1
				}
			}
		},
		BrightnessContrast1_34 = BrightnessContrast {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				Low = Input { Value = 0.11465, },
				High = Input { Value = 0.93011, },
				ClipBlack = Input { Value = 1, },
				ClipWhite = Input { Value = 1, },
				PreDividePostMultiply = Input { Value = 1, },
				Input = Input {
					SourceOp = ""Renderer3D2_2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3613.5 } },
		},
		GradientMapIt_3 = MacroOperator {
			CustomData = {
				Settings = {
				},
				Path = {
					Map = {
						[""Setting:""] = ""Macros:/""
					}
				}
			},
			Inputs = ordered() {
				Input = InstanceInput {
					SourceOp = ""GM_PR_3"",
					Source = ""Input"",
				},
				InputNest = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""InputNest"",
					Width = 1,
				},
				Invert = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""Invert"",
					Width = 1,
				},
				Input2 = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""MaskSeparator"",
				},
				Channel = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""Channel"",
				},
				Low = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""Low"",
					ControlGroup = 5,
					Default = 0,
				},
				High = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""High"",
					ControlGroup = 5,
					Default = 1,
				},
				GradientNest = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""GradientNest"",
					Name = ""Gradient"",
					Width = 1,
				},
				GradientType = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""GradientType"",
				},
				Start = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""Start"",
					DefaultX = 0,
					DefaultY = 0.5,
				},
				End = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""End"",
					DefaultX = 1,
					DefaultY = 0.5,
				},
				Gradient = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""Gradient"",
				},
				GradientInterpolationMethod = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""GradientInterpolationMethod"",
				},
				Offset = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""Offset"",
					Page = ""Controls"",
					Default = 0,
				},
				Repeat = InstanceInput {
					SourceOp = ""GM_FN_3"",
					Source = ""Repeat"",
					Default = 0,
				},
				CompositeNest = InstanceInput {
					SourceOp = ""GM_BM_3"",
					Source = ""CompositeNest"",
					Name = ""Composite and Mask Settings"",
					Width = 1,
				},
				ApplyBlank2 = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""ApplyBlank1"",
				},
				ApplyMode = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""ApplyMode"",
				},
				Blend = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""Blend"",
					Default = 1,
				},
				Blank3 = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""Blank1"",
				},
				ApplyMaskInverted = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""ApplyMaskInverted"",
					Default = 0,
				},
				MultiplyByMask = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MultiplyByMask"",
					Default = 0,
				},
				FitMask = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""FitMask"",
				},
				Blank4 = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""Blank2"",
				},
				MaskChannel = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MaskChannel"",
					Default = 3,
				},
				MaskLow = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MaskLow"",
					ControlGroup = 25,
					Default = 0,
				},
				MaskHigh = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MaskHigh"",
					ControlGroup = 25,
					Default = 1,
				},
				MaskClipBlack = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MaskClipBlack"",
					Name = ""Black"",
					Width = 0.5,
					Default = 1,
				},
				MaskClipWhite = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""MaskClipWhite"",
					Name = ""White"",
					Width = 0.5,
					Default = 1,
				},
				EffectMask = InstanceInput {
					SourceOp = ""GM_Mask_3"",
					Source = ""EffectMask"",
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = ""GM_Mask_3"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo { Pos = { 1595, 3646.5 } },
			Tools = ordered() {
				GM_PR_3 = PipeRouter {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Input = Input {
							SourceOp = ""BrightnessContrast1_34"",
							Source = ""Output"",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -55, 7.25736 } },
				},
				GM_BM_3 = BitmapMask {
					CtrlWZoom = false,
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 1080, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Image = Input {
							SourceOp = ""GM_PR_3"",
							Source = ""Output"",
						},
						Channel = Input { Value = FuID { ""Luminance"" }, },
					},
					ViewInfo = OperatorInfo { Pos = { 55, 40.2574 } },
					UserControls = ordered() {
						Offset = {
							LINKS_Name = ""Offset"",
							INP_Integer = false,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							INPID_InputControl = ""ScrewControl"",
							INP_MinScale = -0.5,
							INP_MaxScale = 0.5,
							INP_Default = 0,
						},
						InputNest = {
							LBLC_DropDownButton = true,
							INPID_InputControl = ""LabelControl"",
							LBLC_NumInputs = 5,
							IC_ControlPage = 0,
							LINKS_Name = ""Input Settings"",
							INP_Default = 0,
						},
						GradientNest = {
							LBLC_DropDownButton = true,
							INPID_InputControl = ""LabelControl"",
							LBLC_NumInputs = 7,
							IC_ControlPage = 0,
							LINKS_Name = ""Gradient Settings"",
							INP_Default = 1,
						},
						CompositeNest = {
							LBLC_DropDownButton = true,
							INPID_InputControl = ""LabelControl"",
							LBLC_NumInputs = 13,
							IC_ControlPage = 0,
							LINKS_Name = ""Composite Settings"",
							INP_Default = 0,
						},
						MaskNest = {
							LBLC_DropDownButton = true,
							INPID_InputControl = ""LabelControl"",
							LBLC_NumInputs = 5,
							IC_ControlPage = 0,
							LINKS_Name = ""Mask Settings"",
							INP_Default = 0,
						}
					}
				},
				GM_FN_3 = FastNoise {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 78, },
						Width = Input {
							Value = 1080,
							Expression = ""GM_BM_3.Image.OriginalWidth"",
						},
						Height = Input {
							Value = 2160,
							Expression = ""GM_BM_3.Image.OriginalHeight"",
						},
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						Detail = Input { Value = 0, },
						Brightness = Input { Value = 1, },
						Type = Input { Value = 1, },
						Color1Alpha = Input { Value = 1, },
						Gradient = Input {
							Value = Gradient {
								Colors = {
									[0] = { 0, 0, 0, 1 },
									[0.0885608856088561] = { 1, 1, 1, 1 },
									[0.317343173431734] = { 0, 0, 0, 1 },
									[0.402214022140221] = { 1, 1, 1, 1 },
									[0.660516605166052] = { 0, 0, 0, 1 },
									[0.745387453874539] = { 1, 1, 1, 1 },
									[0.992619926199262] = { 0, 0, 0, 1 }
								}
							},
						},
						Offset = Input {
							Value = 0.5,
							Expression = ""GM_BM_3.Offset+0.5"",
						},
						NoiseBrightnessMap = Input {
							SourceOp = ""GM_BM_3"",
							Source = ""Mask"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 73.2574 } },
				},
				GM_Mask_3 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = ""GM_PR_3"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""GM_FN_3"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 55, 106.258 } },
				}
			},
			Colors = { TileColor = { R = 0.584313725490196, G = 0.294117647058824, B = 0.803921568627451 }, }
		},
		PosterizeIt_1 = MacroOperator {
			CustomData = {
				Path = {
					Map = {
						[""Setting:""] = ""Macros:/""
					}
				},
			},
			Inputs = ordered() {
				Input = InstanceInput {
					SourceOp = ""PipeRouter1_1"",
					Source = ""Input"",
				},
				Steps = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""NumberIn2"",
					Page = ""Controls"",
					Default = 3,
				},
				Offset = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""NumberIn3"",
					Page = ""Controls"",
				},
				ApplyBlank1 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""ApplyBlank1"",
				},
				Smoothness = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""Smoothness"",
					Page = ""Controls"",
					Default = 0,
				},
				ApplyBlank2 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""ApplyBlank1"",
				},
				Greyscale = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""Greyscale"",
					Page = ""Controls"",
					Default = 1,
				},
				ApplyBlank3 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""ApplyBlank1"",
				},
				NeatControlNest = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""NeatControlNest"",
					Expression = ""1-Greyscale"",
					Name = ""Name"",
					Page = ""Controls"",
				},
				ColorMix = InstanceInput {
					SourceOp = ""CT_Posterize_1"",
					Source = ""ColorMix"",
					Page = ""Controls"",
					Default = 1,
				},
				ApplyBlank4 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""ApplyBlank1"",
				},
				Blank0 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""Blank1"",
				},
				Blend = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""Blend"",
					Default = 1,
				},
				Blank1 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""Blank1"",
				},
				ApplyMaskInverted = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""ApplyMaskInverted"",
					Default = 0,
				},
				MultiplyByMask = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MultiplyByMask"",
					Default = 0,
				},
				FitMask = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""FitMask"",
				},
				Blank2 = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""Blank2"",
				},
				MaskChannel = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MaskChannel"",
					Default = 3,
				},
				MaskLow = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MaskLow"",
					ControlGroup = 16,
					Default = 0,
				},
				MaskHigh = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MaskHigh"",
					ControlGroup = 16,
					Default = 1,
				},
				MaskClipBlack = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MaskClipBlack"",
					Name = ""Black"",
					Width = 0.5,
					Default = 1,
				},
				MaskClipWhite = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""MaskClipWhite"",
					Name = ""White"",
					Width = 0.5,
					Default = 1,
				},
				EffectMask = InstanceInput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""EffectMask"",
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = ""Mrg_Mask_1"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo { Pos = { 1595, 3712.5 } },
			Tools = ordered() {
				PipeRouter1_1 = PipeRouter {
					CtrlWShown = false,
					Inputs = {
						Input = Input {
							SourceOp = ""GM_Mask_3"",
							Source = ""Output"",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { 0, 7.75726 } },
				},
				Saturation_1 = BrightnessContrast {
					CtrlWZoom = false,
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Saturation = Input {
							Value = 0,
							Expression = ""1-CT_Posterize_1.Greyscale"",
						},
						Input = Input {
							SourceOp = ""PipeRouter1_1"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 73.7573 } },
				},
				Blur_Smoothness_1 = Blur {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Gaussian"" }, },
						XBlurSize = Input {
							Value = 0,
							Expression = ""CT_Posterize_1.Smoothness"",
						},
						Input = Input {
							SourceOp = ""Saturation_1"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 73.7573 } },
				},
				CT_Posterize_1 = Custom {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						NumberIn1 = Input {
							Value = 3,
							Expression = ""NumberIn2+NumberIn3 <= 1 and 1.0001 or NumberIn2+NumberIn3"",
						},
						LUTIn1 = Input {
							SourceOp = ""CT_PosterizeLUTIn1_1"",
							Source = ""Value"",
						},
						LUTIn2 = Input {
							SourceOp = ""CT_PosterizeLUTIn2_1"",
							Source = ""Value"",
						},
						LUTIn3 = Input {
							SourceOp = ""CT_PosterizeLUTIn3_1"",
							Source = ""Value"",
						},
						LUTIn4 = Input {
							SourceOp = ""CT_PosterizeLUTIn4_1"",
							Source = ""Value"",
						},
						Setup1 = Input { Value = ""1/n1"", },
						RedExpression = Input { Value = ""(ceil(r1*n1)*s1 - s1) * (1/ (1-s1))"", },
						GreenExpression = Input { Value = ""(ceil(g1*n1)*s1 - s1) * (1/ (1-s1))"", },
						BlueExpression = Input { Value = ""(ceil(b1*n1)*s1 - s1) * (1/ (1-s1))"", },
						AlphaExpression = Input { Value = ""(ceil(a1*n1)*s1 - s1) * (1/ (1-s1))"", },
						NumberControls = Input { Value = 1, },
						NameforNumber1 = Input { Value = ""Posterization"", },
						NameforNumber2 = Input { Value = ""Steps"", },
						NameforNumber3 = Input { Value = ""Offset"", },
						ShowNumber4 = Input { Value = 0, },
						ShowNumber5 = Input { Value = 0, },
						ShowNumber6 = Input { Value = 0, },
						ShowNumber7 = Input { Value = 0, },
						ShowNumber8 = Input { Value = 0, },
						ShowPoint1 = Input { Value = 0, },
						ShowPoint2 = Input { Value = 0, },
						ShowPoint3 = Input { Value = 0, },
						ShowPoint4 = Input { Value = 0, },
						ShowLUT1 = Input { Value = 0, },
						ShowLUT2 = Input { Value = 0, },
						ShowLUT3 = Input { Value = 0, },
						ShowLUT4 = Input { Value = 0, },
						Image1 = Input {
							SourceOp = ""Blur_Smoothness_1"",
							Source = ""Output"",
						},
						NumberIn2 = Input { Value = 3, },
						NeatControlNest = Input {
							Value = 0,
							Expression = ""1-Greyscale"",
						},
						ColorMix = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { -55, 139.758 } },
					UserControls = ordered() {
						NumberIn2 = {
							INP_MaxAllowed = 1000000,
							INP_Integer = true,
							INPID_InputControl = ""SliderControl"",
							INP_MaxScale = 32,
							INP_Default = 2,
							INP_MinScale = 2,
							INP_MinAllowed = 2,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							LINKS_Name = ""Steps""
						},
						NumberIn3 = {
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = ""ScrewControl"",
							INP_MaxScale = 1,
							INP_MinScale = 0,
							INP_MinAllowed = -1000000,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							LINKS_Name = ""Offset""
						},
						Smoothness = {
							INP_MaxAllowed = 1000000,
							INP_Integer = false,
							INPID_InputControl = ""SliderControl"",
							INP_MaxScale = 100,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							LINKS_Name = ""Smoothness""
						},
						Greyscale = {
							INP_MaxAllowed = 1,
							INP_Integer = true,
							INPID_InputControl = ""CheckboxControl"",
							INP_MaxScale = 1,
							INP_Default = 1,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							CBC_TriState = false,
							LINKS_Name = ""Greyscale""
						},
						NeatControlNest = {
							LINKS_Name = ""Neat Control Nest"",
							LBLC_DropDownButton = true,
							INPID_InputControl = ""LabelControl"",
							LBLC_NumInputs = 2,
							IC_ControlPage = 0,
							IC_Visible = false,
							INP_Default = 1,
						},
						ColorMix = {
							INP_MaxAllowed = 1,
							INP_Integer = false,
							INPID_InputControl = ""SliderControl"",
							INP_MaxScale = 1,
							INP_Default = 0,
							INP_MinScale = 0,
							INP_MinAllowed = 0,
							LINKID_DataType = ""Number"",
							ICS_ControlPage = ""Controls"",
							LINKS_Name = ""Color Mix""
						}
					}
				},
				CT_PosterizeLUTIn1_1 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 204, Green = 0, Blue = 0 },
					CtrlWZoom = false,
				},
				CT_PosterizeLUTIn2_1 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 0, Green = 204, Blue = 0 },
					CtrlWZoom = false,
				},
				CT_PosterizeLUTIn3_1 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 0, Green = 0, Blue = 204 },
					CtrlWZoom = false,
				},
				CT_PosterizeLUTIn4_1 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 204, Green = 204, Blue = 204 },
					CtrlWZoom = false,
				},
				Mrg_ColorMix_1 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input { Expression = ""CT_Posterize_1.ColorMix"", },
						Background = Input {
							SourceOp = ""CT_Posterize_1"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""Blur_Smoothness_1"",
							Source = ""Output"",
						},
						ApplyMode = Input { Value = FuID { ""Color"" }, },
						PerformDepthMerge = Input { Value = 0, },
						CommentsNest = Input { Value = 0, },
						FrameRenderScriptNest = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 55, 139.758 } },
				},
				Mrg_Mask_1 = Merge {
					CtrlWZoom = false,
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = ""PipeRouter1_1"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""Mrg_ColorMix_1"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 0, 205.758 } },
				}
			},
		},
		GradientMapIt_4 = MacroOperator {
			CustomData = { Path = { Map = { [""Setting:""] = ""Macros:/"" } }, Settings = {
				} },
			Inputs = ordered() {
				Input = InstanceInput {
					SourceOp = ""GM_PR_4"",
					Source = ""Input"",
				},
				InputNest = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""InputNest"",
					Width = 1,
				},
				Invert = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""Invert"",
					Width = 1,
				},
				Input2 = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""MaskSeparator"",
				},
				Channel = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""Channel"",
				},
				Low = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""Low"",
					ControlGroup = 5,
					Default = 0,
				},
				High = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""High"",
					ControlGroup = 5,
					Default = 1,
				},
				GradientNest = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""GradientNest"",
					Name = ""Gradient"",
					Width = 1,
				},
				GradientType = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""GradientType"",
				},
				Start = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""Start"",
					DefaultX = 0,
					DefaultY = 0.5,
				},
				End = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""End"",
					DefaultX = 1,
					DefaultY = 0.5,
				},
				Gradient = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""Gradient"",
				},
				GradientInterpolationMethod = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""GradientInterpolationMethod"",
				},
				Offset = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""Offset"",
					Page = ""Controls"",
					Default = 0,
				},
				Repeat = InstanceInput {
					SourceOp = ""GM_FN_4"",
					Source = ""Repeat"",
					Default = 0,
				},
				CompositeNest = InstanceInput {
					SourceOp = ""GM_BM_4"",
					Source = ""CompositeNest"",
					Name = ""Composite and Mask Settings"",
					Width = 1,
				},
				ApplyBlank2 = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""ApplyBlank1"",
				},
				ApplyMode = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""ApplyMode"",
				},
				Blend = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""Blend"",
					Default = 1,
				},
				Blank3 = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""Blank1"",
				},
				ApplyMaskInverted = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""ApplyMaskInverted"",
					Default = 0,
				},
				MultiplyByMask = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MultiplyByMask"",
					Default = 0,
				},
				FitMask = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""FitMask"",
				},
				Blank4 = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""Blank2"",
				},
				MaskChannel = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MaskChannel"",
					Default = 3,
				},
				MaskLow = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MaskLow"",
					ControlGroup = 25,
					Default = 0,
				},
				MaskHigh = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MaskHigh"",
					ControlGroup = 25,
					Default = 1,
				},
				MaskClipBlack = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MaskClipBlack"",
					Name = ""Black"",
					Width = 0.5,
					Default = 1,
				},
				MaskClipWhite = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""MaskClipWhite"",
					Name = ""White"",
					Width = 0.5,
					Default = 1,
				},
				EffectMask = InstanceInput {
					SourceOp = ""GM_Mask_4"",
					Source = ""EffectMask"",
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = ""GM_Mask_4"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo { Pos = { 1485, 3745.5 } },
			Tools = ordered() {
				GM_PR_4 = PipeRouter {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Input = Input {
							SourceOp = ""Mrg_Mask_1"",
							Source = ""Output"",
						},
					},
					ViewInfo = PipeRouterInfo { Pos = { -55, 7.25721 } },
				},
				GM_BM_4 = BitmapMask {
					CtrlWZoom = false,
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 1080, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Image = Input {
							SourceOp = ""GM_PR_4"",
							Source = ""Output"",
						},
						Channel = Input { Value = FuID { ""Luminance"" }, },
						CompositeNest = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { 55, 40.2572 } },
					UserControls = ordered() { Offset = { LINKS_Name = ""Offset"", INP_Integer = false, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""ScrewControl"", INP_MinScale = -0.5, INP_MaxScale = 0.5, INP_Default = 0, }, InputNest = { LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 5, IC_ControlPage = 0, LINKS_Name = ""Input Settings"", INP_Default = 0, }, GradientNest = { LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 7, IC_ControlPage = 0, LINKS_Name = ""Gradient Settings"", INP_Default = 1, }, CompositeNest = { LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 13, IC_ControlPage = 0, LINKS_Name = ""Composite Settings"", INP_Default = 0, }, MaskNest = { LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 5, IC_ControlPage = 0, LINKS_Name = ""Mask Settings"", INP_Default = 0, } }
				},
				GM_FN_4 = FastNoise {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						GlobalOut = Input { Value = 78, },
						Width = Input {
							Value = 1080,
							Expression = ""GM_BM_4.Image.OriginalWidth"",
						},
						Height = Input {
							Value = 2160,
							Expression = ""GM_BM_4.Image.OriginalHeight"",
						},
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						Detail = Input { Value = 0, },
						Brightness = Input { Value = 1, },
						Type = Input { Value = 1, },
						Color1Alpha = Input { Value = 1, },
						Gradient = Input {
							Value = Gradient {
								Colors = {
									[0] = { 0, 0.333, 1, 1 },
									[0.5] = { 1, 0, 0.2, 1 },
									[1] = { 1, 0.8, 0, 1 }
								}
							},
						},
						GradientInterpolationMethod = Input { Value = 1, },
						Offset = Input {
							Value = 0.5,
							Expression = ""GM_BM_4.Offset+0.5"",
						},
						Repeat = Input { Value = 2, },
						NoiseBrightnessMap = Input {
							SourceOp = ""GM_BM_4"",
							Source = ""Mask"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 73.2572 } },
				},
				GM_Mask_4 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						MultiplyByMask = Input { Value = 1, },
						Background = Input {
							SourceOp = ""GM_PR_4"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""GM_FN_4"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
						EffectMask = Input {
							SourceOp = ""BrightnessContrast1_34"",
							Source = ""Output"",
						}
					},
					ViewInfo = OperatorInfo { Pos = { 55, 106.258 } },
				}
			},
			Colors = { TileColor = { R = 0.584313725490196, G = 0.294117647058824, B = 0.803921568627451 }, }
		},
		Scale3_2 = Scale {
			Inputs = {
				XSize = Input { Value = 0.5, },
				HiQOnly = Input { Value = 0, },
				PixelAspect = Input { Value = { 1, 1 }, },
				Input = Input {
					SourceOp = ""GM_Mask_4"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3811.5 } },
		},
		MatteControl1_9 = MatteControl {
			CtrlWZoom = false,
			Inputs = {
				MatteCombine = Input { Value = 5, },
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				[""Garbage.MaskNest""] = Input { Value = 1, },
				[""Garbage.MaskInverted""] = Input { Value = 1, },
				Background = Input {
					SourceOp = ""Scale3_2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 1485, 3877.5 } },
		}
	}
}"
K5VfV7fA,VK the best confusion matrix DNN CNN,max2201111,Python,Thursday 20th of June 2024 04:20:22 PM CDT,"import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm.notebook import tqdm_notebook
from IPython.display import display, Javascript
from google.colab import files
import os
import shutil
import ast
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import seaborn as sns

display(Javascript('IPython.OutputArea.auto_scroll_threshold = 9999;'))

label_colors = {0: [0, 128, 0], 1: [255, 0, 0]}
label_colors_testing = {0: [0, 128, 0], 1: [255, 0, 0]}

%matplotlib inline

def create_image(data, predictions, label_colors):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)
    min_val = np.min(data)
    max_val = np.max(data)
    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [min_val, max_val], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)
        image[i, -1] = label_colors[predictions[i]]
    return image

def create_imageN(data, predictions, label_colors=None):
    num_training_rows = len(data)
    num_columns = len(data[0])
    image_training = np.zeros((num_training_rows, num_columns + 1, 3), dtype=np.uint8)
    for i in range(num_training_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [-3, 3], [0, 255]))
            image_training[i, j] = np.array([pixel_value] * 3)
        if label_colors is not None:
            image_training[i, -1] = label_colors[predictions[i]]
    return image_training

def create_cnn_model(input_shape):
    model = tf.keras.Sequential([
        tf.keras.layers.InputLayer(input_shape=input_shape),
        tf.keras.layers.Reshape((input_shape[0], 1)),
        tf.keras.layers.Conv1D(filters=32, kernel_size=2, activation='relu'),
        tf.keras.layers.MaxPooling1D(pool_size=2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(64, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

uploaded = files.upload()
for filename in uploaded.keys():
    original_path = f""/content/{filename}""
    destination_path = os.path.join(""/content/"", ""/content/DATA2"")
    shutil.move(original_path, destination_path)
    print(f""Soubor {filename} byl přesunut do {destination_path}"")

file_path = '/content/DATA2'
with open(file_path, 'r') as file:
    code = file.read()

A_list = ast.literal_eval(code)
A = np.array(A_list)

labels = [results[-1] for results in A]
data = [results[:-1] for results in A]

num_training_rows = 50
num_testing_rows = 50
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

mean_values = np.mean(X_train, axis=0)
std_values = np.std(X_train, axis=0)
X_train_normalized = (X_train - mean_values) / std_values
X_test_normalized = (X_test - mean_values) / std_values

# DNN Model
dnn_model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(len(X_train[0]),)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
dnn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training DNN Model
dnn_accuracy_history = []
epochs = 600

for epoch in tqdm_notebook(range(epochs)):
    history_dnn = dnn_model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    dnn_accuracy_history.append(history_dnn.history['accuracy'][0])

    if epoch == 1:
        y_pred_after_2nd_epoch_dnn = dnn_model.predict(X_test_normalized)
        y_pred_binary_after_2nd_epoch_dnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch_dnn]
        image_testing_before_2nd_epoch_dnn = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch_dnn, label_colors_testing)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=1):
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""
            personNEW_results_normalized = (np.array(personNEW_results) - mean_values) / std_values
            personNEW_prediction_dnn = dnn_model.predict(np.array([personNEW_results_normalized]))
            personNEW_label_dnn = 1 if personNEW_prediction_dnn >= 0.5 else 0
            y_pred_after_50_epochs_dnn = dnn_model.predict(X_test_normalized)
            y_pred_binary_after_50_epochs_dnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs_dnn]
            image_testing_after_50_epochs_dnn = create_image(X_test_normalized, y_pred_binary_after_50_epochs_dnn, label_colors_testing)
            image_personNEW_dnn = create_imageN([personNEW_results_normalized], [personNEW_label_dnn], label_colors)
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW_dnn)
            plt.title(f""New Person {idx} - DNN\nLabel: {personNEW_label_dnn}, Prediction: {personNEW_prediction_dnn}"")
            plt.axis(""off"")
            plt.show()

# CNN Model
cnn_model = create_cnn_model((len(X_train[0]), 1))

# Preparing data for CNN
X_train_normalized_cnn = X_train_normalized.reshape((X_train_normalized.shape[0], X_train_normalized.shape[1], 1))
X_test_normalized_cnn = X_test_normalized.reshape((X_test_normalized.shape[0], X_test_normalized.shape[1], 1))

# Training CNN Model
cnn_accuracy_history = []

for epoch in tqdm_notebook(range(epochs)):
    history_cnn = cnn_model.fit(X_train_normalized_cnn, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    cnn_accuracy_history.append(history_cnn.history['accuracy'][0])

    if epoch == 1:
        y_pred_after_2nd_epoch_cnn = cnn_model.predict(X_test_normalized_cnn)
        y_pred_binary_after_2nd_epoch_cnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch_cnn]
        image_testing_before_2nd_epoch_cnn = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch_cnn, label_colors_testing)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=1):
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""
            personNEW_results_normalized = (np.array(personNEW_results) - mean_values) / std_values
            personNEW_results_normalized_cnn = personNEW_results_normalized.reshape((len(personNEW_results_normalized), 1))
            personNEW_prediction_cnn = cnn_model.predict(np.array([personNEW_results_normalized_cnn]))
            personNEW_label_cnn = 1 if personNEW_prediction_cnn >= 0.5 else 0
            y_pred_after_50_epochs_cnn = cnn_model.predict(X_test_normalized_cnn)
            y_pred_binary_after_50_epochs_cnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs_cnn]
            image_testing_after_50_epochs_cnn = create_image(X_test_normalized, y_pred_binary_after_50_epochs_cnn, label_colors_testing)
            image_personNEW_cnn = create_imageN([personNEW_results_normalized], [personNEW_label_cnn], label_colors)
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW_cnn)
            plt.title(f""New Person {idx} - CNN\nLabel: {personNEW_label_cnn}, Prediction: {personNEW_prediction_cnn}"")
            plt.axis(""off"")
            plt.show()

# Display the images
plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch_dnn)
plt.title(""Testing Data (2nd Epoch) - DNN"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs_dnn)
plt.title(f""Testing Data ({epochs} Epochs) - DNN"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW_dnn)
plt.title(f""New Person - DNN\nLabel: {personNEW_label_dnn},[{personNEW_prediction_dnn}]"")
plt.axis(""off"")

plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), dnn_accuracy_history, marker='o')
plt.title('DNN Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch_cnn)
plt.title(""Testing Data (2nd Epoch) - CNN"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs_cnn)
plt.title(f""Testing Data ({epochs} Epochs) - CNN"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW_cnn)
plt.title(f""New Person - CNN\nLabel: {personNEW_label_cnn},[{personNEW_prediction_cnn}]"")
plt.axis(""off"")

plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), cnn_accuracy_history, marker='o')
plt.title('CNN Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

# Confusion Matrix and Performance Metrics for DNN
dnn_predictions = (dnn_model.predict(X_test_normalized) > 0.5).astype(int)
dnn_conf_matrix = confusion_matrix(y_test, dnn_predictions)
print(f""Confusion Matrix for DNN:\n{dnn_conf_matrix}"")
dnn_accuracy = accuracy_score(y_test, dnn_predictions)
dnn_precision = precision_score(y_test, dnn_predictions)
dnn_recall = recall_score(y_test, dnn_predictions)
dnn_f1 = f1_score(y_test, dnn_predictions)
print(f""DNN Accuracy: {dnn_accuracy:.4f}"")
print(f""DNN Precision: {dnn_precision:.4f}"")
print(f""DNN Recall: {dnn_recall:.4f}"")
print(f""DNN F1 Score: {dnn_f1:.4f}"")

# Confusion Matrix and Performance Metrics for CNN
cnn_predictions = (cnn_model.predict(X_test_normalized_cnn) > 0.5).astype(int)
cnn_conf_matrix = confusion_matrix(y_test, cnn_predictions)
print(f""Confusion Matrix for CNN:\n{cnn_conf_matrix}"")
cnn_accuracy = accuracy_score(y_test, cnn_predictions)
cnn_precision = precision_score(y_test, cnn_predictions)
cnn_recall = recall_score(y_test, cnn_predictions)
cnn_f1 = f1_score(y_test, cnn_predictions)
print(f""CNN Accuracy: {cnn_accuracy:.4f}"")
print(f""CNN Precision: {cnn_precision:.4f}"")
print(f""CNN Recall: {cnn_recall:.4f}"")
print(f""CNN F1 Score: {cnn_f1:.4f}"")

# Display confusion matrices
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
sns.heatmap(dnn_conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('DNN Confusion Matrix')

plt.subplot(1, 2, 2)
sns.heatmap(cnn_conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('CNN Confusion Matrix')

plt.show()"
VDUfV0WK,youtube.com/live_chat? - Remove Live Chat Policy reminder,EdFrees,CSS,Thursday 20th of June 2024 03:06:26 PM CDT,"yt-live-chat-viewer-engagement-message-renderer > #card {
   display: none !important;
}"
aUg2EJmV,03. Enrollment,Nenogzar,Python,Thursday 20th of June 2024 03:04:21 PM CDT,"def gather_credits(needed_credits, *courses_info):
    gathered_credits = 0
    enrolled_courses = []
 
    for course_name, course_credits in courses_info:
        if gathered_credits >= needed_credits:
            break
        if course_name not in enrolled_courses:
            enrolled_courses.append(course_name)
            gathered_credits += course_credits
 
    if gathered_credits >= needed_credits:
        return f""Enrollment finished! Maximum credits: {gathered_credits}.\nCourses: {', '.join(sorted(enrolled_courses))}""
    
    return f""You need to enroll in more courses! You have to gather {needed_credits - gathered_credits} credits more."""
HHrSXYbF,dialer server,Volpe42,Lua,Thursday 20th of June 2024 03:03:43 PM CDT,"local PREFIX = ""https://raw.githubusercontent.com/Ktlo/pocket-stargate""
local BRANCH = ""develop""

--------------------------------

local function typeY()
    write(""Do you want to continue? (Type Y for continue): "")
    local read = read(nil, nil, nil, ""N"")
    if read ~= 'Y' then
        print(""Exiting..."")
        return true
    end
end

print(""Installing PSG server..."")
print(""Checking peripherals..."")
if not (peripheral.find ""advanced_crystal_interface"" or peripheral.find ""crystal_interface"" or peripheral.find ""basic_interface"") then
    print(""Stargate interface not found!"")
    if typeY() then return end
end
if not peripheral.find(""modem"", function(_, modem) return modem.isWireless() end) then
    print(""Wireless modem not found!"")
    if typeY() then return end
end
print(""Peripherals OK"")

write(""Name current solar system: "")
local solarSystem = read(nil, nil, nil, ""sgjourney:terra"")

local galaxies = {}

print(""Please, enter current galaxies names (empty input means end of list)"")
while true do
    write(""Name galaxy #""..tostring(#galaxies + 1).."": "")
    local galaxy = read(nil, nil, nil, #galaxies == 0 and ""sgjourney:milky_way"" or nil)
    if galaxy == """" then break end
    table.insert(galaxies, galaxy)
end

print(""Modifying configuration file..."")
settings.set(""solarSystem"", solarSystem)
settings.set(""galaxies"", galaxies)
settings.save()
print(""Configuration OK"")

print(""Downloading files..."")
local function wget(side, filename)
    local fullUrl = PREFIX..""/""..BRANCH..""/""..side..""/""..filename
    shell.execute(""wget"", fullUrl, filename)
end

wget(""common"", ""concurrent.lua"")
wget(""server"", ""startup.lua"")

print(""Files downloaded!"")
print(""Restarting..."")

shell.execute 'reboot'"
0GUGLw6r,dialer client,Volpe42,Lua,Thursday 20th of June 2024 03:02:57 PM CDT,"local PREFIX = ""https://raw.githubusercontent.com/Ktlo/pocket-stargate""
local BRANCH = ""develop""

--------------------------------

local function typeY()
    write(""Do you want to continue? (Type Y for continue): "")
    local read = read(nil, nil, nil, ""N"")
    if read ~= 'Y' then
        print(""Exiting..."")
        return true
    end
end

print(""Installing PSG server..."")
print(""Checking peripherals..."")
if not peripheral.find(""modem"", function(_, modem) return modem.isWireless() end) then
    print(""Wireless modem not found!"")
    if typeY() then return end
end
if not pocket then
    print(""This is not a pocket device!"")
    if typeY() then return end
end
print(""Peripherals OK"")

print(""Downloading files..."")
local function wget(side, filename)
    local fullUrl = PREFIX..""/""..BRANCH..""/""..side..""/""..filename
    shell.execute(""wget"", fullUrl, filename)
end

shell.execute(""wget"", ""run"", ""https://basalt.madefor.cc/install.lua"", ""packed"", ""basalt.lua"", ""v1.6.6"")
wget(""common"", ""concurrent.lua"")
wget(""client"", ""addresses.conf"")
wget(""client"", ""addresses.lua"")
wget(""client"", ""stargate.lua"")
wget(""client"", ""psg.lua"")
wget(""client"", ""psg.xml"")

print(""Files downloaded!"")

print(""Your copy of Pocket Stargate is successfully installed!"")
print(""You can modify \""addresses.conf\"" now."")
print(""Execute \""psg\"" command in order to run Pocket Stargate."")"
sKqYzfby,03. Enrollment,Nenogzar,Python,Thursday 20th of June 2024 03:02:27 PM CDT,"def gather_credits(needed_credits, *courses_info):
    gathered_credits = 0
    enrolled_courses = []

    for course_name, course_credits in courses_info:
        if gathered_credits >= needed_credits:
            break
        if course_name not in enrolled_courses:
            enrolled_courses.append(course_name)
            gathered_credits += course_credits

    if gathered_credits >= needed_credits:
        return f""Enrollment finished! Maximum credits: {gathered_credits}.\nCourses: {', '.join(sorted(enrolled_courses))}""
    
    return f""You need to enroll in more courses! You have to gather {needed_credits - gathered_credits} credits more.""

# Example usage:
print(gather_credits(
    80,
    (""Basics"", 27),
))
"
UbzKDz3k,loading_screen_with_wifi_data,Python253,Python,Thursday 20th of June 2024 02:57:57 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: loading_screen.py
# Version: 1.0.0
# Author: Jeoi Reqi
 
""""""
Description:
    - This script gathers various system information essential for network management and troubleshooting.
      It retrieves the following details:
        - Public IP address:
            Obtained from an external API endpoint.
        - User details:
            Includes the username currently logged into the system.
        - Computer name:
            Retrieves the local computer's name.
        - Operating system:
            Fetches information about the current operating system.
        - Wi-Fi network information:
            Retrieves SSIDs (Service Set Identifiers) and passwords of previously saved Wi-Fi networks on the machine.
    
    - It presents this information using a simulated loading effect, enhancing user experience with a progress bar visual representation.
    
Requirements:
    - Python 3.x
    - The Following Modules:
        - json
        - urllib
        - subprocess
        - colorama

Functions:
    - get_wifi_passwords():
        Retrieves SSIDs and passwords of saved Wi-Fi networks on the machine.

    - loading():
        Displays system information with a loading bar effect, including IP,
        username, PC name, OS, and Wi-Fi information.

Usage:
    - Ensure Python 3.x is installed.
    - Install required modules using pip (if not already installed):
      
      EXAMPLE:
                'pip install colorama'

    - Run the script.

Additional Notes:
    - The loading function clears the screen and displays information in a loop,
      simulating a loading process with a progress bar.
    - This script requires administrative privileges on Windows to retrieve Wi-Fi passwords.

""""""

import os
import time
import random
from json import load
from urllib.request import urlopen
import subprocess
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

def get_wifi_passwords():
    """"""
    Retrieves the SSIDs and passwords of saved Wi-Fi networks on the machine.

    Returns:
        wifi_data (str): A formatted string containing SSIDs and passwords.
    """"""
    wifi_data = """"
    try:
        # Get the list of Wi-Fi profiles
        wifi_profiles = subprocess.check_output(""netsh wlan show profiles"", shell=True, text=True).split('\n')
        profiles = [line.split("":"")[1].strip() for line in wifi_profiles if ""All User Profile"" in line]

        for profile in profiles:
            # Get the Wi-Fi password for each profile
            wifi_details = subprocess.check_output(f""netsh wlan show profile name=\""{profile}\"" key=clear"", shell=True, text=True).split('\n')
            password = None
            for line in wifi_details:
                if ""Key Content"" in line:
                    password = line.split("":"")[1].strip()
                    break

            wifi_data += f""SSID: {profile}, Password: {password if password else 'None'}\n""

    except Exception as e:
        wifi_data += f""Error retrieving Wi-Fi passwords: {e}\n""

    return wifi_data
    
def loading():
    """"""
    Displays system information with a loading bar effect.

    Retrieves the public IP, username, computer name, operating system, and Wi-Fi information,
    then displays this information while simulating a loading process with a progress bar.
    """"""
    # Gather system information
    ip_info = load(urlopen('https://api.myip.com/'))
    wifi_info = get_wifi_passwords()
    img = f""""""
IP: {ip_info['ip']}
Username: {os.getlogin()}
PC Name: {os.getenv('COMPUTERNAME')}
Operating System: {os.getenv('OS')}

Known Wi-Fi Networks + Passwords:

{wifi_info}
    """"""

    # Display system information with a loading bar
    for i in range(40):
        os.system('cls' if os.name == 'nt' else 'clear')  # Clear the screen
        print(img)
        progress = (Fore.GREEN + ""#"" * (i + 1) + Style.RESET_ALL).ljust(40, '-')
        print(f""[{progress}]"")
        time.sleep(random.uniform(0.025, 0.075))  # Random delay between 0.025 and 0.075 seconds

if __name__ == '__main__':
    loading()
    print(""\n\n\tAll processes completed.\n\n\tExiting Program...   GoodBye!\n"")
"
kRGF0tkG,Untitled,swordiemen,JSON,Thursday 20th of June 2024 02:45:05 PM CDT,"[
{
""Id"": ""team1"",
""Name"": ""Team 1"",
""ShortName"": ""TM1"",
""LogoUrl"": """",
""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
""Messages"": {
""TrackPoint"": {
""Customize"": [
""SoundUrl"",
""MessageDelay""
],
""MessageDelay"": 700
},
""TrackWin"": {
""Customize"": [
""SoundUrl""
]
}
},
""Players"": [
{
""AccountId"": ""5ddd311e-fe50-4b6b-b5f9-636e52216b51"",
""Name"": ""Treggeur"",
""PhotoUrl"": """"
},
{
""AccountId"": ""39f73395-9c46-4e52-8e8b-690ab8e499ae"",
""Name"": ""Swordie."",
""PhotoUrl"": """"
}
]
},
{
""Id"": ""team2"",
""Name"": ""Team 2"",
""ShortName"": ""TM2"",
""LogoUrl"": """",
""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
""Messages"": {
""TrackPoint"": {
""Customize"": [
""SoundUrl"",
""MessageDelay""
],
""MessageDelay"": 700
},
""TrackWin"": {
""Customize"": [
""SoundUrl""
]
}
},
""Players"": [
{
""AccountId"": ""94232bb9-9774-41f8-9016-3e653581ce9a"",
""Name"": ""ThijnHD"",
""PhotoUrl"": """"
},
{
""AccountId"": ""5cb66649-54c5-4623-830f-651b17010658"",
""Name"": ""KingTom1.1"",
""PhotoUrl"": """"
}
]
}
]"
4yXJzHkZ,Algoverse_adesh_23,kucheasysa,Python,Thursday 20th of June 2024 02:44:43 PM CDT,"class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        count = 0
        for i in grid:
            for j in i:
                if j< 0 :
                    count = count +1 
        return count"
r4DWBKM9,Untitled,Chefir,C#,Thursday 20th of June 2024 02:39:01 PM CDT,"Dictionary<string, string> countriesCapitals = new Dictionary<string, string>();

countriesCapitals.Add(""Австралия"", ""Канбурра"");
countriesCapitals.Add(""Турция"", ""Анкара"");
countriesCapitals.Add(""Швейцария"", ""Берн"");
bool isOpen = true;
Console.WriteLine(""Списко стран: "");

foreach (var countriesCapital in countriesCapitals)
{
    Console.WriteLine(countriesCapital.Key);
}

while (isOpen)
{
    Console.WriteLine(""\nВведите название страны и списка, и вам выдаст ее сталицу: "");
    string userInput = Console.ReadLine();

    if (countriesCapitals.ContainsKey(userInput))
    {
        Console.WriteLine(countriesCapitals[userInput]);
    }
    else
    {
        Console.WriteLine(""Такого слова нет в списке."");
    }"
dSnLMts6,Algoverse_adesh_22,kucheasysa,Python,Thursday 20th of June 2024 02:31:41 PM CDT,"
class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        n = len(mat)
        m = 0
        for i in range(n) :
            m += mat[i][i] + mat[i][n - i - 1]
        if n % 2 :
            w = n // 2
            m -= mat[w][w]
        return m"
5vLX7hiz,Untitled,swordiemen,JSON,Thursday 20th of June 2024 02:27:23 PM CDT,"[
    {
        ""Id"": ""fryslan"",
        ""Name"": ""Fryslan"",
        ""ShortName"": ""FRY"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""23274648-738e-4216-a065-2a118f978c9d"",
                ""Name"": ""Knyntsje"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""541cd232-0daa-48c4-8e59-5d9d70371f51"",
                ""Name"": ""Vixxa.wp"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""moddergeitjes"",
        ""Name"": ""Moddergeitjes"",
        ""ShortName"": ""MOD"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""1e9eaf8f-a16e-4c78-874b-bc727996159a"",
                ""Name"": ""Javas.."",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""26f45a76-8b19-4be4-9950-f9e0367e4860"",
                ""Name"": ""VennTM"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""tacokanon"",
        ""Name"": ""Tacokanon"",
        ""ShortName"": ""TAC"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""9b71ebf0-86c8-4145-be11-db6941cb8f1a"",
                ""Name"": ""CannonTM"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""a280bf5a-a5b9-492e-9161-c69f2d159fad"",
                ""Name"": ""NeoTako"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""safetycar"",
        ""Name"": ""Safety Car"",
        ""ShortName"": ""SC"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""f22e00ec-ed51-4643-8e89-da824c4b5e11"",
                ""Name"": ""B0kit0"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""a512e7a7-d655-4395-87da-502be7f5aa9a"",
                ""Name"": ""Jadey-"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""splitnl"",
        ""Name"": ""SplitNL"",
        ""ShortName"": ""SNL"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""e8f35258-b507-487d-b470-52587d1445a6"",
                ""Name"": ""Denniss.."",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""c1fbedb5-292e-4440-8946-a48023090b4c"",
                ""Name"": ""Zeemuis"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""limburgsemuur"",
        ""Name"": ""De Limburgse Muur"",
        ""ShortName"": ""LM"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""bd872712-053a-4fbf-9ff2-1ec452be4fd6"",
                ""Name"": ""ChiliConArne."",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""76f34c93-b0eb-446b-b212-60ffc35e317d"",
                ""Name"": ""TIMMYS.."",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""shagmania"",
        ""Name"": ""ShagMania"",
        ""ShortName"": ""SM"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""0b11c365-4ae3-4644-95fb-1f49057ba558"",
                ""Name"": ""FootFungusTM"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""36415252-1c1a-4e9d-8a28-037e496eedbf"",
                ""Name"": ""ThyInvisDragon"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""plattekangoeroes"",
        ""Name"": ""Platte Kangoeroes"",
        ""ShortName"": ""PK"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""cf0bd43d-947b-4fec-b921-86231fbcd353"",
                ""Name"": ""IanStarTM"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""5c0d0a23-e236-4a69-b3f9-8d9040e461e9"",
                ""Name"": ""Tiezie"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""molotovgaming"",
        ""Name"": ""Molotov Gaming"",
        ""ShortName"": ""MG"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""79657676-be95-44bb-a0f5-20e08c2b2845"",
                ""Name"": ""BoinkTM"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""f6a8d496-779c-4237-9602-ef297e0b20d7"",
                ""Name"": ""Javzo"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""poepmandarijn"",
        ""Name"": ""Poepmandarijn"",
        ""ShortName"": ""PM"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""05e9d832-f5a7-4592-9340-bee92d31b259"",
                ""Name"": ""OHBIBOY"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""1a9d6bce-2787-4417-a500-f13d2544ecdf"",
                ""Name"": ""Poepboer"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""karters"",
        ""Name"": ""Karters"",
        ""ShortName"": ""KAR"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""b9333821-dd6f-4d7f-ab1c-f9f725f869c5"",
                ""Name"": ""callmejoeri"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""28cb0b0c-24ca-4d66-a369-d6d4c5988de8"",
                ""Name"": ""Tommie._"",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""lastminuteautism"",
        ""Name"": ""Last Minute Autism"",
        ""ShortName"": ""LMA"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""8ba50c35-3488-4ea5-a5ea-6acc4acc2479"",
                ""Name"": ""markdeotter"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""2cd863d3-b76c-479c-b3ca-edbd3321e285"",
                ""Name"": ""yannickieboy15"",
                ""PhotoUrl"": """"
            }
        ]
    }
]"
8Aj9aXxT,ShopQueue,SaNik74,C#,Thursday 20th of June 2024 02:26:58 PM CDT,"namespace ShopQueue
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int shopBalance = 0;

            Queue<int> purchase = new Queue<int>();

            FillQueue(purchase);
            SellProduct(purchase,ref shopBalance);
        }

        static void FillQueue(Queue<int> queue)
        {
            Random random = new Random();
            
            int maxNumbersPurchase = 20;
            int minNumbersPurchase = 1;
            int maxCostPurchase = 2000;
            int minCostPurchase = 1;

            int purchaseNumbers = random.Next(minNumbersPurchase, maxNumbersPurchase + 1);
           
            for (int i = 0; i < purchaseNumbers; i++)
            {
                queue.Enqueue(random.Next(minCostPurchase, maxCostPurchase));
            }
        }

        static void SellProduct(Queue<int> queue, ref int shopBalance)
        {
           while(queue.Count > 0)
            {
                OutputQueue(queue);
                Console.WriteLine($""На балансе {shopBalance}."");
                shopBalance += queue.Dequeue();
                Console.ReadKey();
                Console.Clear();
            }
        }

        static void OutputQueue(Queue<int> queue)
        {
            Console.WriteLine(""Стоимость каждой покупки в очереди"");
            
            foreach (int pricePurchse in queue)
            {
                Console.Write(pricePurchse + ""||"");
            }

            Console.WriteLine();
        }
    }
}"
8PkgVuMa,Pr Com Erro,wesdrum,JSON,Thursday 20th of June 2024 02:11:00 PM CDT,"{
  ""action"": ""closed"",
  ""number"": 4309,
  ""pull_request"": {
    ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309"",
    ""id"": 1931190046,
    ""node_id"": ""PR_kwDOF4xvBc5zG58e"",
    ""html_url"": ""https://github.com/hetosoft/ProjetosSol.NET/pull/4309"",
    ""diff_url"": ""https://github.com/hetosoft/ProjetosSol.NET/pull/4309.diff"",
    ""patch_url"": ""https://github.com/hetosoft/ProjetosSol.NET/pull/4309.patch"",
    ""issue_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/4309"",
    ""number"": 4309,
    ""state"": ""closed"",
    ""locked"": false,
    ""title"": ""Interface"",
    ""user"": {
      ""login"": ""wesProg23"",
      ""id"": 20547283,
      ""node_id"": ""MDQ6VXNlcjIwNTQ3Mjgz"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/20547283?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/wesProg23"",
      ""html_url"": ""https://github.com/wesProg23"",
      ""followers_url"": ""https://api.github.com/users/wesProg23/followers"",
      ""following_url"": ""https://api.github.com/users/wesProg23/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/wesProg23/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/wesProg23/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/wesProg23/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/wesProg23/orgs"",
      ""repos_url"": ""https://api.github.com/users/wesProg23/repos"",
      ""events_url"": ""https://api.github.com/users/wesProg23/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/wesProg23/received_events"",
      ""type"": ""User"",
      ""site_admin"": false
    },
    ""body"": ""#dev Sol.NET Conversão.\r\nAdicionado config para informar um Id de empresa alternativo para ser usado, caso o registro da origem não tenha informado um ID_EMPRESA para ser convertido.\r\nhttps://prnt.sc/KOHLMq-I2iJ0"",
    ""created_at"": ""2024-06-20T19:08:33Z"",
    ""updated_at"": ""2024-06-20T19:08:41Z"",
    ""closed_at"": ""2024-06-20T19:08:41Z"",
    ""merged_at"": ""2024-06-20T19:08:41Z"",
    ""merge_commit_sha"": ""057f5139ad19bf40e7dcad80d97631841575172b"",
    ""assignee"": null,
    ""assignees"": [

    ],
    ""requested_reviewers"": [

    ],
    ""requested_teams"": [

    ],
    ""labels"": [

    ],
    ""milestone"": null,
    ""draft"": false,
    ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309/commits"",
    ""review_comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309/comments"",
    ""review_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/comments{/number}"",
    ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/4309/comments"",
    ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/statuses/a074037b053bd0002a29053d5f16fe26a057de8a"",
    ""head"": {
      ""label"": ""hetosoft:ConversaoEmpresaAlternativa"",
      ""ref"": ""ConversaoEmpresaAlternativa"",
      ""sha"": ""a074037b053bd0002a29053d5f16fe26a057de8a"",
      ""user"": {
        ""login"": ""hetosoft"",
        ""id"": 53792964,
        ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
        ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
        ""gravatar_id"": """",
        ""url"": ""https://api.github.com/users/hetosoft"",
        ""html_url"": ""https://github.com/hetosoft"",
        ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
        ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
        ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
        ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
        ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
        ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
        ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
        ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
        ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
        ""type"": ""Organization"",
        ""site_admin"": false
      },
      ""repo"": {
        ""id"": 395079429,
        ""node_id"": ""MDEwOlJlcG9zaXRvcnkzOTUwNzk0Mjk="",
        ""name"": ""ProjetosSol.NET"",
        ""full_name"": ""hetosoft/ProjetosSol.NET"",
        ""private"": true,
        ""owner"": {
          ""login"": ""hetosoft"",
          ""id"": 53792964,
          ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
          ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
          ""gravatar_id"": """",
          ""url"": ""https://api.github.com/users/hetosoft"",
          ""html_url"": ""https://github.com/hetosoft"",
          ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
          ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
          ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
          ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
          ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
          ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
          ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
          ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
          ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
          ""type"": ""Organization"",
          ""site_admin"": false
        },
        ""html_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
        ""description"": ""Projetos Suíte Sol.NET Desktop Windows"",
        ""fork"": false,
        ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET"",
        ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/forks"",
        ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/keys{/key_id}"",
        ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/collaborators{/collaborator}"",
        ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/teams"",
        ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/hooks"",
        ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/events{/number}"",
        ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/events"",
        ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/assignees{/user}"",
        ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/branches{/branch}"",
        ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/tags"",
        ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/blobs{/sha}"",
        ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/tags{/sha}"",
        ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/refs{/sha}"",
        ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/trees{/sha}"",
        ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/statuses/{sha}"",
        ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/languages"",
        ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/stargazers"",
        ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contributors"",
        ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscribers"",
        ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscription"",
        ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/commits{/sha}"",
        ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/commits{/sha}"",
        ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/comments{/number}"",
        ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/comments{/number}"",
        ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contents/{+path}"",
        ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/compare/{base}...{head}"",
        ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/merges"",
        ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/{archive_format}{/ref}"",
        ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/downloads"",
        ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues{/number}"",
        ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls{/number}"",
        ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/milestones{/number}"",
        ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/notifications{?since,all,participating}"",
        ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/labels{/name}"",
        ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/releases{/id}"",
        ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/deployments"",
        ""created_at"": ""2021-08-11T18:14:44Z"",
        ""updated_at"": ""2024-06-20T16:55:46Z"",
        ""pushed_at"": ""2024-06-20T19:08:34Z"",
        ""git_url"": ""git://github.com/hetosoft/ProjetosSol.NET.git"",
        ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.NET.git"",
        ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.NET.git"",
        ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
        ""homepage"": """",
        ""size"": 116591,
        ""stargazers_count"": 0,
        ""watchers_count"": 0,
        ""language"": ""Pascal"",
        ""has_issues"": true,
        ""has_projects"": true,
        ""has_downloads"": true,
        ""has_wiki"": true,
        ""has_pages"": false,
        ""has_discussions"": true,
        ""forks_count"": 0,
        ""mirror_url"": null,
        ""archived"": false,
        ""disabled"": false,
        ""open_issues_count"": 26,
        ""license"": null,
        ""allow_forking"": false,
        ""is_template"": false,
        ""web_commit_signoff_required"": false,
        ""topics"": [

        ],
        ""visibility"": ""private"",
        ""forks"": 0,
        ""open_issues"": 26,
        ""watchers"": 0,
        ""default_branch"": ""develop"",
        ""allow_squash_merge"": true,
        ""allow_merge_commit"": false,
        ""allow_rebase_merge"": false,
        ""allow_auto_merge"": false,
        ""delete_branch_on_merge"": false,
        ""allow_update_branch"": true,
        ""use_squash_pr_title_as_default"": true,
        ""squash_merge_commit_message"": ""PR_BODY"",
        ""squash_merge_commit_title"": ""PR_TITLE"",
        ""merge_commit_message"": ""PR_TITLE"",
        ""merge_commit_title"": ""MERGE_MESSAGE""
      }
    },
    ""base"": {
      ""label"": ""hetosoft:develop"",
      ""ref"": ""develop"",
      ""sha"": ""cf4074bc21c735f0059ca75a83a74e77b5fd59ba"",
      ""user"": {
        ""login"": ""hetosoft"",
        ""id"": 53792964,
        ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
        ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
        ""gravatar_id"": """",
        ""url"": ""https://api.github.com/users/hetosoft"",
        ""html_url"": ""https://github.com/hetosoft"",
        ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
        ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
        ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
        ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
        ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
        ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
        ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
        ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
        ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
        ""type"": ""Organization"",
        ""site_admin"": false
      },
      ""repo"": {
        ""id"": 395079429,
        ""node_id"": ""MDEwOlJlcG9zaXRvcnkzOTUwNzk0Mjk="",
        ""name"": ""ProjetosSol.NET"",
        ""full_name"": ""hetosoft/ProjetosSol.NET"",
        ""private"": true,
        ""owner"": {
          ""login"": ""hetosoft"",
          ""id"": 53792964,
          ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
          ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
          ""gravatar_id"": """",
          ""url"": ""https://api.github.com/users/hetosoft"",
          ""html_url"": ""https://github.com/hetosoft"",
          ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
          ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
          ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
          ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
          ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
          ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
          ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
          ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
          ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
          ""type"": ""Organization"",
          ""site_admin"": false
        },
        ""html_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
        ""description"": ""Projetos Suíte Sol.NET Desktop Windows"",
        ""fork"": false,
        ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET"",
        ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/forks"",
        ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/keys{/key_id}"",
        ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/collaborators{/collaborator}"",
        ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/teams"",
        ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/hooks"",
        ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/events{/number}"",
        ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/events"",
        ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/assignees{/user}"",
        ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/branches{/branch}"",
        ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/tags"",
        ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/blobs{/sha}"",
        ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/tags{/sha}"",
        ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/refs{/sha}"",
        ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/trees{/sha}"",
        ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/statuses/{sha}"",
        ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/languages"",
        ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/stargazers"",
        ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contributors"",
        ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscribers"",
        ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscription"",
        ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/commits{/sha}"",
        ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/commits{/sha}"",
        ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/comments{/number}"",
        ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/comments{/number}"",
        ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contents/{+path}"",
        ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/compare/{base}...{head}"",
        ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/merges"",
        ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/{archive_format}{/ref}"",
        ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/downloads"",
        ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues{/number}"",
        ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls{/number}"",
        ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/milestones{/number}"",
        ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/notifications{?since,all,participating}"",
        ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/labels{/name}"",
        ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/releases{/id}"",
        ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/deployments"",
        ""created_at"": ""2021-08-11T18:14:44Z"",
        ""updated_at"": ""2024-06-20T16:55:46Z"",
        ""pushed_at"": ""2024-06-20T19:08:34Z"",
        ""git_url"": ""git://github.com/hetosoft/ProjetosSol.NET.git"",
        ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.NET.git"",
        ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.NET.git"",
        ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
        ""homepage"": """",
        ""size"": 116591,
        ""stargazers_count"": 0,
        ""watchers_count"": 0,
        ""language"": ""Pascal"",
        ""has_issues"": true,
        ""has_projects"": true,
        ""has_downloads"": true,
        ""has_wiki"": true,
        ""has_pages"": false,
        ""has_discussions"": true,
        ""forks_count"": 0,
        ""mirror_url"": null,
        ""archived"": false,
        ""disabled"": false,
        ""open_issues_count"": 26,
        ""license"": null,
        ""allow_forking"": false,
        ""is_template"": false,
        ""web_commit_signoff_required"": false,
        ""topics"": [

        ],
        ""visibility"": ""private"",
        ""forks"": 0,
        ""open_issues"": 26,
        ""watchers"": 0,
        ""default_branch"": ""develop"",
        ""allow_squash_merge"": true,
        ""allow_merge_commit"": false,
        ""allow_rebase_merge"": false,
        ""allow_auto_merge"": false,
        ""delete_branch_on_merge"": false,
        ""allow_update_branch"": true,
        ""use_squash_pr_title_as_default"": true,
        ""squash_merge_commit_message"": ""PR_BODY"",
        ""squash_merge_commit_title"": ""PR_TITLE"",
        ""merge_commit_message"": ""PR_TITLE"",
        ""merge_commit_title"": ""MERGE_MESSAGE""
      }
    },
    ""_links"": {
      ""self"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309""
      },
      ""html"": {
        ""href"": ""https://github.com/hetosoft/ProjetosSol.NET/pull/4309""
      },
      ""issue"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/4309""
      },
      ""comments"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/4309/comments""
      },
      ""review_comments"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309/comments""
      },
      ""review_comment"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/comments{/number}""
      },
      ""commits"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls/4309/commits""
      },
      ""statuses"": {
        ""href"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/statuses/a074037b053bd0002a29053d5f16fe26a057de8a""
      }
    },
    ""author_association"": ""COLLABORATOR"",
    ""auto_merge"": null,
    ""active_lock_reason"": null,
    ""merged"": true,
    ""mergeable"": null,
    ""rebaseable"": null,
    ""mergeable_state"": ""unknown"",
    ""merged_by"": {
      ""login"": ""wesProg23"",
      ""id"": 20547283,
      ""node_id"": ""MDQ6VXNlcjIwNTQ3Mjgz"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/20547283?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/wesProg23"",
      ""html_url"": ""https://github.com/wesProg23"",
      ""followers_url"": ""https://api.github.com/users/wesProg23/followers"",
      ""following_url"": ""https://api.github.com/users/wesProg23/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/wesProg23/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/wesProg23/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/wesProg23/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/wesProg23/orgs"",
      ""repos_url"": ""https://api.github.com/users/wesProg23/repos"",
      ""events_url"": ""https://api.github.com/users/wesProg23/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/wesProg23/received_events"",
      ""type"": ""User"",
      ""site_admin"": false
    },
    ""comments"": 0,
    ""review_comments"": 0,
    ""maintainer_can_modify"": false,
    ""commits"": 1,
    ""additions"": 142,
    ""deletions"": 11,
    ""changed_files"": 3
  },
  ""repository"": {
    ""id"": 395079429,
    ""node_id"": ""MDEwOlJlcG9zaXRvcnkzOTUwNzk0Mjk="",
    ""name"": ""ProjetosSol.NET"",
    ""full_name"": ""hetosoft/ProjetosSol.NET"",
    ""private"": true,
    ""owner"": {
      ""login"": ""hetosoft"",
      ""id"": 53792964,
      ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
      ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
      ""gravatar_id"": """",
      ""url"": ""https://api.github.com/users/hetosoft"",
      ""html_url"": ""https://github.com/hetosoft"",
      ""followers_url"": ""https://api.github.com/users/hetosoft/followers"",
      ""following_url"": ""https://api.github.com/users/hetosoft/following{/other_user}"",
      ""gists_url"": ""https://api.github.com/users/hetosoft/gists{/gist_id}"",
      ""starred_url"": ""https://api.github.com/users/hetosoft/starred{/owner}{/repo}"",
      ""subscriptions_url"": ""https://api.github.com/users/hetosoft/subscriptions"",
      ""organizations_url"": ""https://api.github.com/users/hetosoft/orgs"",
      ""repos_url"": ""https://api.github.com/users/hetosoft/repos"",
      ""events_url"": ""https://api.github.com/users/hetosoft/events{/privacy}"",
      ""received_events_url"": ""https://api.github.com/users/hetosoft/received_events"",
      ""type"": ""Organization"",
      ""site_admin"": false
    },
    ""html_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
    ""description"": ""Projetos Suíte Sol.NET Desktop Windows"",
    ""fork"": false,
    ""url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET"",
    ""forks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/forks"",
    ""keys_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/keys{/key_id}"",
    ""collaborators_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/collaborators{/collaborator}"",
    ""teams_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/teams"",
    ""hooks_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/hooks"",
    ""issue_events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/events{/number}"",
    ""events_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/events"",
    ""assignees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/assignees{/user}"",
    ""branches_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/branches{/branch}"",
    ""tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/tags"",
    ""blobs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/blobs{/sha}"",
    ""git_tags_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/tags{/sha}"",
    ""git_refs_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/refs{/sha}"",
    ""trees_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/trees{/sha}"",
    ""statuses_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/statuses/{sha}"",
    ""languages_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/languages"",
    ""stargazers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/stargazers"",
    ""contributors_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contributors"",
    ""subscribers_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscribers"",
    ""subscription_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/subscription"",
    ""commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/commits{/sha}"",
    ""git_commits_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/git/commits{/sha}"",
    ""comments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/comments{/number}"",
    ""issue_comment_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues/comments{/number}"",
    ""contents_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/contents/{+path}"",
    ""compare_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/compare/{base}...{head}"",
    ""merges_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/merges"",
    ""archive_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/{archive_format}{/ref}"",
    ""downloads_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/downloads"",
    ""issues_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/issues{/number}"",
    ""pulls_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/pulls{/number}"",
    ""milestones_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/milestones{/number}"",
    ""notifications_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/notifications{?since,all,participating}"",
    ""labels_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/labels{/name}"",
    ""releases_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/releases{/id}"",
    ""deployments_url"": ""https://api.github.com/repos/hetosoft/ProjetosSol.NET/deployments"",
    ""created_at"": ""2021-08-11T18:14:44Z"",
    ""updated_at"": ""2024-06-20T16:55:46Z"",
    ""pushed_at"": ""2024-06-20T19:08:34Z"",
    ""git_url"": ""git://github.com/hetosoft/ProjetosSol.NET.git"",
    ""ssh_url"": ""git@github.com:hetosoft/ProjetosSol.NET.git"",
    ""clone_url"": ""https://github.com/hetosoft/ProjetosSol.NET.git"",
    ""svn_url"": ""https://github.com/hetosoft/ProjetosSol.NET"",
    ""homepage"": """",
    ""size"": 116591,
    ""stargazers_count"": 0,
    ""watchers_count"": 0,
    ""language"": ""Pascal"",
    ""has_issues"": true,
    ""has_projects"": true,
    ""has_downloads"": true,
    ""has_wiki"": true,
    ""has_pages"": false,
    ""has_discussions"": true,
    ""forks_count"": 0,
    ""mirror_url"": null,
    ""archived"": false,
    ""disabled"": false,
    ""open_issues_count"": 26,
    ""license"": null,
    ""allow_forking"": false,
    ""is_template"": false,
    ""web_commit_signoff_required"": false,
    ""topics"": [

    ],
    ""visibility"": ""private"",
    ""forks"": 0,
    ""open_issues"": 26,
    ""watchers"": 0,
    ""default_branch"": ""develop"",
    ""custom_properties"": {

    }
  },
  ""organization"": {
    ""login"": ""hetosoft"",
    ""id"": 53792964,
    ""node_id"": ""MDEyOk9yZ2FuaXphdGlvbjUzNzkyOTY0"",
    ""url"": ""https://api.github.com/orgs/hetosoft"",
    ""repos_url"": ""https://api.github.com/orgs/hetosoft/repos"",
    ""events_url"": ""https://api.github.com/orgs/hetosoft/events"",
    ""hooks_url"": ""https://api.github.com/orgs/hetosoft/hooks"",
    ""issues_url"": ""https://api.github.com/orgs/hetosoft/issues"",
    ""members_url"": ""https://api.github.com/orgs/hetosoft/members{/member}"",
    ""public_members_url"": ""https://api.github.com/orgs/hetosoft/public_members{/member}"",
    ""avatar_url"": ""https://avatars.githubusercontent.com/u/53792964?v=4"",
    ""description"": """"
  },
  ""sender"": {
    ""login"": ""wesProg23"",
    ""id"": 20547283,
    ""node_id"": ""MDQ6VXNlcjIwNTQ3Mjgz"",
    ""avatar_url"": ""https://avatars.githubusercontent.com/u/20547283?v=4"",
    ""gravatar_id"": """",
    ""url"": ""https://api.github.com/users/wesProg23"",
    ""html_url"": ""https://github.com/wesProg23"",
    ""followers_url"": ""https://api.github.com/users/wesProg23/followers"",
    ""following_url"": ""https://api.github.com/users/wesProg23/following{/other_user}"",
    ""gists_url"": ""https://api.github.com/users/wesProg23/gists{/gist_id}"",
    ""starred_url"": ""https://api.github.com/users/wesProg23/starred{/owner}{/repo}"",
    ""subscriptions_url"": ""https://api.github.com/users/wesProg23/subscriptions"",
    ""organizations_url"": ""https://api.github.com/users/wesProg23/orgs"",
    ""repos_url"": ""https://api.github.com/users/wesProg23/repos"",
    ""events_url"": ""https://api.github.com/users/wesProg23/events{/privacy}"",
    ""received_events_url"": ""https://api.github.com/users/wesProg23/received_events"",
    ""type"": ""User"",
    ""site_admin"": false
  }
}"
VNsXGmNZ,asd,Joreto,HTML,Thursday 20th of June 2024 02:02:33 PM CDT,"</p>
<h3> </h3>
<div style=""position: relative;display:inline-block;"">
<img src=""/images/egypt2.jpg"" alt=""Egypt2"" width=""1500"" height=""843"">
<div style=""position: absolute; top: 5%; left: 80%; transform: translate(-50%, -50%); background-color: rgb(255,255,255,0.7); padding: 10px; font-size: 20px"" >
    Кайро!
</div>
</div>
<div style=""position: relative; display: inline-block;"">
<img src=""/images/egypt.jpg"" alt=""Egypt"" width=""768"" height=""431"">
    <div style=""position: absolute; top: 10%;left: 85%;transform: translate(-50%, -50%); background-color: rgb(255,255,255,0.7); padding: 10px;"">
        Величествен плаж!
    </div>
</div>
<div style=""position: relative; display: inline-block;"">
<img src=""/images/egypt1.jpg"" alt=""Egypt1"" width=""768"" height=""431"">
<div style=""position: absolute; top: 10%;left: 10%;transform: translate(-50%, -50%); background-color: rgb(255,255,255,0.7); padding: 10px;"">
    Птица на пост
</div>
    </div>
<div style=""position: relative; display: inline-block;"">
<img src=""/images/giza.webp"" alt=""Giza"" width=""1920"" height=""1355"">
    <div style=""position: absolute; top: 5%;left: 80%;transform: translate(-50%, -50%); background-color: rgb(255,255,255,0.7); padding: 10px;"">
        Залез над Кайро
    </div>
</div>"
RN8Txh8Z,$CatWifHat,zkdomains,Python,Thursday 20th of June 2024 01:52:21 PM CDT,"import matplotlib.pyplot as plt
import numpy as np

def draw_cat_with_hat():
    fig, ax = plt.subplots(figsize=(8, 8))

    # Drawing the cat's face
    cat_face = plt.Circle((0.5, 0.5), 0.4, color='gray', fill=True)
    ax.add_artist(cat_face)

    # Drawing the cat's eyes
    left_eye = plt.Circle((0.35, 0.6), 0.07, color='white', fill=True)
    right_eye = plt.Circle((0.65, 0.6), 0.07, color='white', fill=True)
    left_pupil = plt.Circle((0.35, 0.6), 0.03, color='black', fill=True)
    right_pupil = plt.Circle((0.65, 0.6), 0.03, color='black', fill=True)
    ax.add_artist(left_eye)
    ax.add_artist(right_eye)
    ax.add_artist(left_pupil)
    ax.add_artist(right_pupil)

    # Drawing the cat's nose
    nose = plt.Polygon([[0.48, 0.45], [0.52, 0.45], [0.5, 0.4]], color='pink')
    ax.add_artist(nose)

    # Drawing the cat's mouth
    mouth_left = plt.Line2D([0.5, 0.47], [0.4, 0.35], color='black')
    mouth_right = plt.Line2D([0.5, 0.53], [0.4, 0.35], color='black')
    ax.add_artist(mouth_left)
    ax.add_artist(mouth_right)

    # Drawing the cat's hat
    hat_brim = plt.Rectangle((0.2, 0.65), 0.6, 0.1, color='brown', fill=True)
    hat_top = plt.Polygon([[0.2, 0.75], [0.8, 0.75], [0.5, 0.95]], color='brown', fill=True)
    ax.add_artist(hat_brim)
    ax.add_artist(hat_top)

    # Setting the plot limits and removing axes
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.axis('off')

    plt.show()

# Draw the cat with a hat
draw_cat_with_hat()
"
71BrqELL,Untitled,swordiemen,JSON,Thursday 20th of June 2024 01:51:43 PM CDT,"[
    {
        ""Id"": ""team1"",
        ""Name"": ""Team 1"",
        ""ShortName"": ""TM1"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""5ddd311e-fe50-4b6b-b5f9-636e52216b51"",
                ""Name"": ""Treggeur"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""39f73395-9c46-4e52-8e8b-690ab8e499ae"",
                ""Name"": ""Swordie."",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""team2"",
        ""Name"": ""Team 2"",
        ""ShortName"": ""TM2"",
        ""LogoUrl"": """",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""94232bb9-9774-41f8-9016-3e653581ce9a"",
                ""Name"": ""ThijnHD"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""5cb66649-54c5-4623-830f-651b17010658"",
                ""Name"": ""KingTom1.1"",
                ""PhotoUrl"": """"
            }
        ]
    }
]"
qY6jkDNa,Untitled,swordiemen,JSON,Thursday 20th of June 2024 01:50:21 PM CDT,"[
    {
        ""Id"": ""team1"",
        ""Name"": ""Team 1"",
        ""ShortName"": ""TM1"",
        ""LogoUrl"": ""https://cdn.discordapp.com/attachments/1152920367535493171/1155503057296183387/DAMASCUS.dds"",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""5ddd311e-fe50-4b6b-b5f9-636e52216b51"",
                ""Name"": ""Treggeur"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""39f73395-9c46-4e52-8e8b-690ab8e499ae"",
                ""Name"": ""Swordie."",
                ""PhotoUrl"": """"
            }
        ]
    },
    {
        ""Id"": ""team2"",
        ""Name"": ""Team 2"",
        ""ShortName"": ""TM2"",
        ""LogoUrl"": ""https://cdn.discordapp.com/attachments/1152920367535493171/1155503057296183387/DAMASCUS.dds"",
        ""CountryFlagUrl"": ""file://Media/Flags/NED.dds"",
        ""Messages"": {
            ""TrackPoint"": {
                ""Customize"": [
                    ""SoundUrl"",
                    ""MessageDelay""
                ],
                ""MessageDelay"": 700
            },
            ""TrackWin"": {
                ""Customize"": [
                    ""SoundUrl""
                ]
            }
        },
        ""Players"": [
            {
                ""AccountId"": ""94232bb9-9774-41f8-9016-3e653581ce9a"",
                ""Name"": ""ThijnHD"",
                ""PhotoUrl"": """"
            },
            {
                ""AccountId"": ""a280bf5a-a5b9-492e-9161-c69f2d159fad"",
                ""Name"": ""NeoTako"",
                ""PhotoUrl"": """"
            }
        ]
    }
]"
4RTtJ9jZ,Test,BluezModZ,Python,Thursday 20th of June 2024 01:40:34 PM CDT,"import time

max_retries = 3
retry_delay = 5  # seconds

def perform_operation():
    retries = 0
    while retries < max_retries:
        try:
            # Code to perform your operation that may timeout
            # Example: Sending a request to the device
            response = send_request_to_device()
            
            # Check if operation was successful (customize based on your use case)
            if response == ""success"":
                print(""Operation completed successfully."")
                return True
            
            # If operation failed due to timeout or other issues, raise an exception
            raise Exception(""Operation failed due to timeout or other error."")
        
        except Exception as e:
            print(f""Attempt {retries + 1} failed: {str(e)}"")
            retries += 1
            if retries < max_retries:
                print(f""Retrying in {retry_delay} seconds..."")
                time.sleep(retry_delay)
    
    print(f""Operation failed after {max_retries} attempts."")
    return False

def send_request_to_device():
    # Simulate sending a request to the device (replace with your actual logic)
    # Example: Connecting to a device or sending a command
    # Replace this with your actual device interaction code
    try:
        # Example: connecting to a device that may timeout
        device.connect()
    except DeviceTimeoutError:
        responseData lot"
H8ux4Lyh,integration.f,j0h,Fortran,Thursday 20th of June 2024 01:35:15 PM CDT,"C   Copy of INTEGRAL FORTRAN WRITTEN BY Jay Rasaiah 
C   MODIFIED INPUT TO RUN ON IMAC by E.LOVEJOY June 18 2024, Rev 8.01  
C
C   Compiled with:
C   gfortran -g -fcheck=all -std=legacy  -o integral integral.f
C   -fcheck=all enables array bound checks at run time
C **********************************************************************INT00020
C  THIS IS VERSION 1.57 WHICH USES LESS MEMORY AND IS FASTER THAN      *INT00030
C  VERSION 1.55 AND CALC THE SHORT-RANGED DIR CORR FUNCTION(DCS)        INT00040
C  PROGRAM RESTRICTED TO SYMMETRICALLY CHARGED ELECTROLYTES.           *INT00050
C  SOLVES HNC EQ BY ITERATIONUSING ISEINGS FAST FOURIER TRANSFORM FFT3S*INT00060
C  IF (CONC.EQ.0) READS A NEW SET OF ION AND WELL SIZE PARAMETERS.     *INT00070
C  IF REM=0.0, NO REMAINDER ADDED TO G(I,J), T(2,4), G4(I,J)           *INT00080
C  IF REM.NE.0.0, DEBYE-HUCKEL REMAINDER ADDED                         *INT00090
C  PRIMITIVE MODEL PLUS TWO SQUARE WELLS                               *INT00100
C  SPAC IS NEAREST FRACTION OF A(1,2) THAT IS CLOSEST TO               *INT00110
C  MAX(COEFF1*DEBYE/FNN,COEFF2*A(1,2)/FNN)                             *INT00120
C  DELA = DLN(ACTCO)/DLNC, CALC FROM COMPRESSIBILITY EQUATION.         *INT00130
C  DELB = LIMIT(DELB) AS BETA GOES TO ZERO                             *INT00140
C  BETA MEAS DEVIATION FROM ELECTRONEUTRALITY                          *INT00150
C  OSM IS CALCULATED FROM THE PRESSURE EQUATION                        *INT00160
C  XENERGY AND DFX/DP FROM INDEP EQNS ASSUMING NO TEMP AND PRESS DEP   *INT00170
C  OF THE SHORT RANGE POTENTIAL XENERGY IS IN CALS PER MOLE OF SOLUTE  *INT00180
C  XVOLUME IN CC PER MOLE OF SOLUTE                                    *INT00190
C  DRF IS THE DIELECTRIC RESPONSE FUNCTION FOR THE HNC EQN             *INT00200
C  DRDF IS THE DIELECTRIC RESPONSE FUNCTION FOR THE DHLL               *INT00210
C  CONVGA = (C(1)*G(1,1)-C(2)*G(2,2))/GM12-C(1)+C(2)                   *INT00220
C  CONVGB = 100*(G(1,2)-G(2,1))/GM12                                   *INT00230
C  DCS(=ZETA) IS THE SHORT-RANGED DIRECT CORRELATION FUNCTION          *INT00240
C  CONVERGENCE CRITERION USEFUL ONLY FOR UNSYMMETRICAL SYSTEMS         *INT00250
C  IF EX.EQ.2.0, PRINTS XR,DCS,H                                       *INT00260
C  IF EX.EQ.3.0, PRINTS XR,DCS,H AND CHARGE DENSITY                    *INT00270
C  IF EX.EQ.0.0, QUITS                                                 *INT00280
C  IF CHARGE = 0.0, REPEATS CALC WITH SAME SPACING AS CHARGED SYSTEM   *INT00290
C  BUT WITH Z1 = Z2 = 0.0.FICTITIOUS CHARGE DENSITY ALSO CALC          *INT00300
C  IF ICC.GT.0, ITERATION BEGINS WITH TAU OF PRECEDING CONC            *INT00310
C  IF ICC.LT.0, READ TAU GENERATED IN A PREVIOUS EXECUTION             *INT00320
C  IF ICC.EQ.0, TAU CAL IN LAMBDA APPROXIMATION                        *INT00330
C  WRITES TAU ON NDSK2 IN ALL CASES                                    *INT00340
C  SIX SUBRUTNIES ADJ,TRAP,SIMPSON,FFT3S,SETFT,RSA 
C  NIONS is number positive and negative ions 2 for NaCl and ZnSO4

C **************************DIMENSIONS**********************************INT00350
      INTEGER MNM
      PARAMETER (MNM = 2048)
      REAL*8 DATE,TIME                                                  INT00360
      DIMENSION A(2,2)
      DIMENSION A1(2,2)
      DIMENSION B(80)
      DIMENSION BA(2,2)
      DIMENSION B1(2,2)
      DIMENSION C(2)
      DIMENSION CB(2,2)
      DIMENSION CONV(MNM,2,2)
      DIMENSION C1(2,2)
      DIMENSION DC(MNM,2,2)
      DIMENSION DRF(MNM)
      DIMENSION DRDF(MNM)
      DIMENSION E(2,2)
      DIMENSION FNU(2)
      DIMENSION F2(2)
      DIMENSION F4(2)
      DIMENSION G(2,2)
      DIMENSION GA(2,2)
      DIMENSION GB(2,2)
      DIMENSION GC(2,2)
      DIMENSION GM(2,2)
      DIMENSION GW(2,2)
      DIMENSION G4(2,2)
C      DIMENSION H(MNM,2,2)
      REAL H(MNM,2,2)
      DIMENSION LINT(2,2)
      DIMENSION MINT(2,2)
      DIMENSION NINT(2,2)      
      DIMENSION PHI(MNM,2,2)
      DIMENSION P1(MNM,2,2)  
      DIMENSION Q(MNM,2,2)
      DIMENSION Q1(MNM,2,2)
      DIMENSION RHO(2,MNM)
      DIMENSION RQO(2,MNM)
      DIMENSION R2(2)
      DIMENSION R4(2)
      DIMENSION T(2,2)
      DIMENSION TAU(MNM,2,2)
      DIMENSION TCONV(MNM,2,2)
      DIMENSION TH(MNM,2,2)
      DIMENSION TM(2,2)
      DIMENSION TPHI(MNM,2,2)
      DIMENSION TQ(MNM,2,2)
      DIMENSION TTAU(MNM,2,2)
      DIMENSION TW(2,2) 
      DIMENSION TZETA(MNM,2,2)
      DIMENSION W(2,2)
C      DIMENSION XR(MNM)
      REAL XR(MNM)
      DIMENSION Y(2)
      DIMENSION Y1(MNM)
      DIMENSION Z(2)
      DIMENSION ZA(2)
      DIMENSION ZETA(MNM,2,2)
    
      EQUIVALENCE (H,TH,PHI,TPHI,TTAU)                                  
      EQUIVALENCE (ZETA,TZETA,RHO,DRF,DC)                               
      EQUIVALENCE (TAU,P1,CONV,TCONV)                                   
      EQUIVALENCE (RQO,DRDF)                                            
      EQUIVALENCE (XR,Y1)                                               
      EQUIVALENCE (B(6),Z(1)),(B(8),D),(B(9),TEMP),(B(10),A1(1,1)),     
     *(B(14),COEFF1),(B(15),DEBYE),(B(16),SPAC),(B(17),FNN),(B(18),CONC)
     *,(B(19),DELA),(B(20),OSM),(B(21),CONTAC),(B(22),REMAIN),          
     *(B(23),FITER),(B(24),G(1,1)),(B(28),T(1,1)),(B(32),FNGARB),       
     *(B(33),DELB),(B(34),DIFF),(B(35),CONVG1),(B(36),CONVG2),          
     *(B(37),GA(1,1)),(B(5),DT),(B(4),DP),(B(41),GB(1,1)),              
     *(B(45),G4(1,1)),(B(49),F2(1)),(B(51),F4(1)),(B(52),COEFF2)        
      COMMON /JAY/ H,XR 
C******************************* Hunting for issues********************
C     Gfortran has some other nifty flags for ID of various issues:
C     -ffpe-trap=invalid,zero,overflow
C     gfortran -g -ffpe-trap=invalid,zero,overflow -std=legacy -fcheck=all 

C******************************* DATE TIME FIX ************************
      CHARACTER*25 date_string
      CHARACTER*100 command
      command = 'date ""+%Y-%m-%d %H:%M:%S"" > date.txt'
      CALL SYSTEM(command)
      OPEN(UNIT=1, FILE='date.txt', STATUS='OLD')
      READ(1, '(A)') date_string
      CLOSE(1)



C ******************************* CONSTANTS ****************************INT00600
C     PROGRAM CONSTANTS                                                *INT00610
      DATA PI/3.141593/                                                 INT00620
      PRINT *,  date_string
C     CALL TIMER(DATE,TIME,IVIRT,ITOT)                                  INT00630
      NRDR  = 5                                                         INT00640
      NPRT  = 7                                                         INT00650
      NPUN  = 7                                                         INT00660
      NDSK  = 8                                                         INT00670
      NDSK2 = 9                                                         INT00680
      NIONS = 2                                                         INT00690
      PI2   = 2.*PI                                                     INT00700
      PI4   = 4.*PI                                                     INT00710
      PI43  = PI4/3.                                                    INT00720
      PIPI  = PI*PI                                                     INT00730
C **********************************************************************INT00740
C     CONSTANTS FOR SUBROUTINE FFT3S                                   *INT01430
      F0 = 0.                                                           INT01440
      RL = SPAC1*FNN                                                    INT01450
C **********************************************************************INT01460

      
C*****used to stop crashing of  H MINT PHI TPHI TCONV CONV ZETA*******
      I = 1
      J = 1
      IF (J .LT. 1) THEN
      J = J + 1
      END IF
      IF (I .LT. 1) THEN
      I = I + 1
      END IF
      
      DO 10 I = 1,80                                                    INT00750
10    B(I) = 0.0                                                        INT00760
      B(3) = 1.57                                                       INT00770
C20   READ(NRDR,9001) M1                                                INT00780
C20   READ(NRDR,*) M1                                                   INT00780
C     READ(NRDR,*) (Z(I),FNU(I),I=1,NIONS)
      M1 = 11        
C      Z(1) = 1.0
      Z(1) = 2.0
      Z(2) = -1.0                                                       INT00790
      ZE = Z(1)                                                         INT00800
      ZA(1) = Z(1)                                                      INT00810
      ZA(2) = Z(2)                                                      INT00820
      FNU(1) = 1.0
      FNU(2) = 2.0 
C25   READ(NRDR,*) D,TEMP,DT,DP                                         
       D = 78.358
       T = 298.15
       TEMP = 298.15
       DT = 0.0
       DP = 0.0
C30   READ(NRDR,*) A(1,1),BA(1,1),CB(1,1),A(1,2),BA(1,2),CB(1,2),A(2,   INT00840
C    *2),BA(2,2),CB(2,2)                                                INT00850      
      A(1,1) = 4.2
      A(1,2) = 4.2
      A(2,1) = A(1,2)                                                   INT00860
      A(2,2) = A (1,1)
      BA(1,1) = 0
      BA(2,2) = BA(1,1)
      BA(1,2) = 0.0
      BA(2,1) = BA(1,2)
      CB(1,1) = 0.0
      CB(2,2) = CB(1,1)
      CB(1,2) = 0.0                                                     INT00870
      CB(2,1) = CB(1,2)                                                 INT00880
C35   READ(NRDR,*) E(1,1),W(1,1),E(1,2),W(1,2),E(2,2),W(2,2)            INT00890
      E(1,1)= 0.0
      E(1,2)= 0.0
      E(2,1) = E(1,2)                                                   INT00900
      E(2,2) = E(1,1)                                                   INT00900
      W(1,1) = 0.0
      W(1,2) = 0.0
      W(2,1) = W(1,2)
      W(2,2) = W(1,1)

C40   READ(NRDR,*)CONC,COEFF1,COEFF2,EX,REM,CHARGE,MAX,I2,NCD,IC,       INT00920
C    *NR,IR,ICC 
      CONC = 0.1                                                        INT00930
      COEFF1=1.0
      COEFF2=1.0
      EX = 3.0
      REM = 1.0
      CHARGE = 1.0
      MAX = 6
      I2 =2
      ICC= 1
C     NCD = 
C     IC =
      IR = 1
      NR = 5
C     REWIND NDSK2                                                      INT00940
C     IF(ICC.LT.0)READ(NDSK2,9003)(((TAU(K,I,J),I=1,NIONS),J=1,NIONS),K=INT00950
C    *1,N)                                                              INT00960
C     REWIND NDSK2                                                      INT00970
      IF (EX.EQ.0.0) GO TO 5050                                         INT00980
C     IF(CONC.EQ.0.0) GO TO 30                                          INT00990
9001  FORMAT(I3)                                                        INT01000
9002  FORMAT(8F10.5)                                                    INT01010
9003  FORMAT(4F10.5)                                                    INT01020
9004  FORMAT(9F5.2)                                                     INT01030
9005  FORMAT(6F10.5)                                                    INT01040
9006  FORMAT(1F10.7,5F5.2,7I5)                                          INT01050
      WRITE(NPRT,9100)B(3), date_string
9100  FORMAT(1H1, 38X, 'HNC VERSION ', F4.2, ' - IBM 370/148 -  ', A25)
C      WRITE(NPRT,9100)B(3),DATE,TIME                                    INT01060
C9100  FORMAT(1H1,38X,'HNC VERSION ',F4.2,' - IBM 370/148 -  ',A8,2X,A8) INT01070
C**** N=2**M1=2048 for M1=11, ***************************************
      N=2**M1                                                           INT01090
      N2=N/2                                                            INT01100
      FNN  = N                                                          INT01120
      FC   = 0.0                                                        INT01130
      FNO  = 0.0                                                        INT01140
      CC   = 0.0                                                        INT01150
      DO 50 I = 1,NIONS                                                 INT01160
      FNO  = FNU(I)+FNO                                                 INT01170
      C(I) = FNU(I)*CONC*6.0233*1.E-04                                  INT01180
      CC   = C(I)+CC                                                    INT01190
50    FC   = C(I)*Z(I)**2+FC
C********************************************************************** INT01200
C     Electron charge e=4.8032x10E10 cm**3/2 g**1/2 s**-2 (esu)
C     Boltzconst k=1.3803x10E-16 cm**2 s**2/K                           INT01200
C     Bjerrum length |z+z+|e**2/DkT=16.714x1.E+04/DT 
C***********************************************************************
      FL1  = 16.7094*1.E+04/(D*TEMP)                                    INT01210
      FL   = PI4*FL1                                                    INT01220
      FK   = (FC*FL)**0.5                                               INT01230
      FKFK  = FK*FK                                                     INT01240
      DEBYE = 1./FK                                                     INT01250
      FKA  = A(1,2)/DEBYE                                               INT01260
C     REWIND NDSK                                                       INT01270
C     WRITE(NDSK,9101)A(1,1),A(1,2),A(2,2),D,TEMP,CONC,FKA,DEBYE,Z(1),Z(INT01280
C    *2)                                                                INT01290
9101  FORMAT(3F8.5,2F8.4,3F10.6,2F5.1)                                  INT01300
      SPAC1 = COEFF1*DEBYE/FNN                                          INT01310
      SPAC2 = COEFF2*A(1,2)/FNN                                         INT01320
      IF(SPAC2.GT.SPAC1) SPAC1=SPAC2                                    INT01330
      S1 = A(1,2)/SPAC1                                                 INT01340
      L = S1+1.                                                         INT01350
      S2 = L                                                            INT01360
      IF (S2-S1.GT.0.5)  GO TO 60                                       INT01370
      SPAC1 = A(1,2)/S2                                                 INT01380
      GO TO 70                                                          INT01390
60    SPAC1 = A(1,2)/(S2-1.)                                            INT01400
70    CONTINUE                                                          INT01410
C **********************************************************************INT01420
C     CONSTANTS FOR SUBROUTINE FFT3S                                   *INT01430
      F0 = 0.                                                           INT01440
      RL = SPAC1*FNN                                                    INT01450
C     FX,FY and FZ are Debye Huckel remainders for ?
C **********************************************************************INT01460
      FI = 1.0                                                          INT01470
      SPAC = SPAC1                                                      INT01480
      DO 80 K = 1,N                                                     INT01490
      XR(K) = SPAC1*FI                                                  INT01500
80    FI = FI+1.                                                        INT01510
      XN = XR(N)                                                        INT01520
      FKN = FK*XN                                                       INT01530
      IF (REM.EQ.0.0) GO TO 90                                          INT01540
      FX = FL*(1.+FKN)*EXP(-FKN)/FKFK                                   INT01550
      FY = FL*EXP(-FKN)/FK                                              INT01560
      FZ = FL*EXP(-FKN)*(FKN**3+3.*FKN**2+6.*FKN+6.)/(FKFK*FKFK)        INT01570
      GO TO 100                                                         INT01580
90    FX = 0.0                                                          INT01590
      FY = 0.0                                                          INT01600
      FZ = 0.0                                                          INT01610
100   CONTINUE                                                          INT01620
      DO 110 I = 1,NIONS                                                INT01630
      DO 110 J = 1,NIONS                                                INT01640
      CALL ADJ (A(I,J),A1(I,J),MINT(I,J),SPAC1)                         INT01650
      CALL ADJ (BA(I,J),B1(I,J),NINT(I,J),SPAC1)                        INT01660
      CALL ADJ (CB(I,J),C1(I,J),LINT(I,J),SPAC1)                        INT01670
110   CONTINUE                                                          INT01680
      GO TO 130                                                         INT01690
120   PRINT *, date_string

C 120  CALL TIMER(DATE,TIME,IVIRT,ITOT)                                 INT01700
      WRITE(NPRT,9100)B(3),date_string                                  INT01710
C      WRITE(NPRT,9100)B(3),DATE,TIME                                    INT01710
      Z(1)   =  0.0                                                     INT01720
      Z(2)   =  0.0                                                     INT01730
      ZE     =  0.0                                                     INT01740
      CHARGE = 20.0                                                     INT01750
      REM    =  0.0                                                     INT01760
      DEBYE  =  0.0                                                     INT01770
      BETA   =  0.0                                                     INT01780
      CONVGA =  0.0                                                     INT01790
130   WRITE(NPRT,9103) Z(1),Z(2),D,TEMP,DT,DP,A1(1,1),A1(2,2),A1(1,2),  INT01800
     *B1(1,1),B1(2,2),B1(1,2),C1(1,1),C1(2,2),C1(1,2),E(1,1),E(2,2),    INT01810
     *E(1,2),W(1,1),W(2,2),W(1,2),COEFF1,COEFF2,SPAC1,N,REM,CONC,DEBYE  INT01820
9103  FORMAT('Z1=',F5.1,3X,'Z2=',F5.1,/,'DIEL CONST=',F7.3,3X,'TEMP=',  INT01830
     *F7.3,'DLND/DLNT=',F10.5,3X,'DLND/DP=',F7.3,/,'A11=',F6.3,3X,'A22='INT01840
     *,F6.3,3X,'A12=',F6.3,/,'B11=',F6.3,3X,'B22=',F6.3,3X,'B12=',F6.3,/INT01850
     *'C11=',F6.3,3X,'C22=',F6.3,3X,'C12=',F6.3,/,                      INT01860
     *'E11=',F6.3,3X,'E22=',F6.3,3X,'E12=',F6.3,/,                      INT01870
     *'W11=',F6.3,3X,'W22=',F6.3,3X,'W12=',F6.3,/,                      INT01880
     *'COEFF1=',F7.4,3X,'COEFF2=',F7.4,3X,'SPAC1=',F7.4,3X,'N=',I4,3X,  INT01890
     *'REM=',F7.4,/,'CONC=',F10.6,3X,'DEBYE=',F10.5,/)                  INT01900
C *** CALC OF Q,Q1,AND TQ                                               INT01910
C     WRITE(6,5558)                                                     INT01920
5558  FORMAT(1X,'HO')                                                   INT01930
      DO 180 I = 1,NIONS                                                INT01940
      DO 180 J = 1,NIONS                                                INT01950
      AB = A1(I,J)+B1(I,J)                                              INT01960
      BC = AB+C1(I,J)                                                   INT01970
      DO 180 K = 1,N                                                    INT01980
      Q(K,I,J) = -Z(I)*Z(J)*FL*EXP(-FK*XR(K))/(PI4*XR(K))               INT01990
      IF (XR(K) .LT. A1(I,J)) GO TO 170                                 INT02000
      IF(ABS(XR(K)-AB).LT.1.E-04) GO TO 160                             INT02010
      IF ((XR(K)-AB).LT.1.E-07) GO TO 150                               INT02020
      IF(ABS(XR(K)-BC).LT.1.E-04) GO TO 140                             INT02030
      IF((XR(K)-BC).LT.1.E-07) GO TO 160                                INT02040
140   Q1(K,I,J) = EXP(Q(K,I,J))                                         INT02050
      GO TO 180                                                         INT02060
150   Q1(K,I,J) = EXP(Q(K,I,J)-E(I,J))                                  INT02070
      GO TO 180                                                         INT02080
160   Q1(K,I,J) = EXP(Q(K,I,J)-W(I,J))                                  INT02090
      GO TO 180                                                         INT02100
170   Q1(K,I,J) = 0.0                                                   INT02110
180   CONTINUE                                                          INT02120
C     WRITE(6,5557)                                                     INT02130
5557  FORMAT(1X,'HA')                                                   INT02140
      DO 190 I = 1,NIONS                                                INT02150
      DO 190 J = 1,NIONS                                                INT02160
190   CALL FFT3S(F0,Q(1,I,J),M1,RL,TQ(1,I,J),1)                         INT02170
C***************** Distributution ************************************
C     CALC OF APPROX DISTRIBUTION FUNCTIONS after counter I1 =0        *INT02190

1010  I1 = 0                                                            INT02210
      IF (ICC.NE.0) GO TO 1070                                          INT02220
      DO 1020 I = 1,NIONS                                               INT02230
      DO 1020 J = 1,NIONS                                               INT02240
      DO 1020 K = 1,N                                                   INT02250
1020  PHI(K,I,J) = Q1(K,I,J)-1.                                         INT02260
      DO 1030 I = 1,NIONS                                               INT02270
      DO 1030 J = 1,NIONS                                               INT02280
      PHI(MINT(I,J),I,J) = (PHI(MINT(I,J),I,J)-1.)*.5                   INT02290
1030  CALL FFT3S(F0,PHI(1,I,J),M1,RL,TPHI(1,I,J),1)                     INT02300
      DO 1040 I = 1,NIONS                                               INT02310
      DO 1040 J = 1,NIONS                                               INT02320
      DO 1040 K = 1,N                                                   INT02330
      TCONV(K,I,J) = 0.0                                                INT02340
      DO 1040 L = 1,NIONS                                               INT02350
1040  TCONV(K,I,J) = TPHI(K,I,L)*TPHI(K,L,J)*C(L)+TCONV(K,I,J)          INT02360
      DO 1050 I = 1,NIONS                                               INT02370
      DO 1050 J = 1,NIONS                                               INT02380
1050  CALL FFT3S(F0,TCONV(1,I,J),M1,RL,CONV(1,I,J),-1)                  INT02390
      DO 1060 I = 1,NIONS                                               INT02400
      DO 1060 J = 1,NIONS                                               INT02410
      DO 1060 K = 1,N                                                   INT02420
1060  TAU(K,I,J) = CONV(K,I,J)+Q(K,I,J)*XR(K)*FK*.5                     INT02430
1070  DO 1080 I = 1,NIONS                                               INT02440
      DO 1080 J = 1,NIONS                                               INT02450
      DO 1075 K = 1,N                                                   INT02460
1075  H(K,I,J) = Q1(K,I,J)*(1.+TAU(K,I,J))-1.                           INT02470
      IF (MINT(I,J) < 1) THEN
      MINT(I,J) = 1
      END IF              
      H(MINT(I,J),I,J) = (H(MINT(I,J),I,J)-1.)*.5                       INT02480

      DO 1080 K = 1,N                                                   INT02490
1080  ZETA(K,I,J) = H(K,I,J)-Q(K,I,J)-TAU(K,I,J)                        INT02500
      IF (ICC.NE.0) GO TO 1090                                          INT02510
      WRITE(NPRT,9104)                                                  INT02520
9104  FORMAT(38H0RESULTS OF TRIANGLE TERM IN DIST FUNC)                 INT02530
      GO TO 1100                                                        INT02540
1090  IF(ICC.GT.0) GO TO 1112                                           INT02550
      WRITE(NPRT,9105)                                                  INT02560
9105  FORMAT(1H0,'RESULTS USING PRECEDING TAU AT PRESENT CONC')         INT02570
      GO TO 1100                                                        INT02580
1112  WRITE(NPRT,9102)                                                  INT02590
9102  FORMAT(1H0,'RESULTS USING PREVIOUS TAU STORED ON DISK')           INT02600
1100  WRITE(NPRT,9106)                                                  INT02610
9106  FORMAT(6X,4HDELA,9X,4HDELB,9X,4HDIFF,10X,3HOSM,7X,7HXENERGY,5X,   INT02620
     *7HXVOLUME,4X,4HITER,6X,4HBETA,7X,6HCONVGA,7X,6HCONVGB)            INT02630
      GO TO 3010                                                        INT02640

      
C***************** HNC *********************************************** 
C     SOLVE HNC INTEGRAL EQUATION BY ITERATION                         *INT02660
2010  WRITE(NPRT,9107) CONTAC,SQ1,SQ2,REMAIN,FG                         INT02680
      WRITE(NPRT,5555)ZE                                                INT02690
      IF(ZE.EQ.0.0) GO TO 2020                                          INT02700
5555  FORMAT(1X,F10.5)                                                  INT02710
      WRITE(NPRT,9108)                                                  INT02720
      WRITE(NPRT,9109) (Z(I),F2(I),R2(I),Y(I),F4(I),R4(I),I=1,NIONS)    INT02730
      WRITE(NPRT,9110) S2,CS2,E2,S4,CS4,E4                              INT02740
2020  WRITE(NPRT,9111)                                                  INT02750
9111  FORMAT(19H0RESULTS OF HNC EQN)                                    INT02760
      WRITE(NPRT,9106)                                                  INT02770
2030  CONTINUE                                                          INT02780
      DO 2040 I = 1,NIONS                                               INT02790
      DO 2040 J = 1,NIONS                                               INT02800
2040  CALL FFT3S(F0,H(1,I,J),M1,RL,TH(1,I,J),1)                         INT02810
      DO 2050 I = 1,NIONS                                               INT02820
      DO 2050 J = 1,NIONS                                               INT02830
2050  CALL FFT3S(F0,ZETA(1,I,J),M1,RL,TZETA(1,I,J),1)                   INT02840
      DO 2070 I = 1,NIONS                                               INT02850
      DO 2070 J = 1,NIONS                                               INT02860
      DO 2070 K = 1,N                                                   INT02870
      SUM1 = 0.0                                                        INT02880
      DO 2060 L = 1,NIONS                                               INT02890
2060  SUM1 = TZETA(K,I,L)*TH(K,L,J)*C(L)+SUM1                           INT02900
2070  P1(K,I,J) = SUM1                                                  INT02910
      DO 2090 I = 1,NIONS                                               INT02920
      DO 2090 J = 1,NIONS                                               INT02930
      DO 2090 K = 1,N                                                   INT02940
      P2 = 0.0                                                          INT02950
      P3 = 0.0                                                          INT02960
      DO 2080 L = 1,NIONS                                               INT02970
      P2 = TQ(K,I,L)*TZETA(K,L,J)*C(L)+P2                               INT02980
2080  P3 = TQ(K,I,L)*P1(K,L,J)*C(L)+P3                                  INT02990
2090  TTAU(K,I,J) = P1(K,I,J)+P2+P3                                     INT03000
      DO 2100 I = 1,NIONS                                               INT03010
      DO 2100 J = 1,NIONS                                               INT03020
2100  CALL FFT3S(F0,TTAU(1,I,J),M1,RL,TAU(1,I,J),-1)                    INT03030
      I1 = I1+1                                                         INT03040
2110  DO 2120 I = 1,NIONS                                               INT03050
      DO 2120 J = 1,NIONS                                               INT03060
C     WRITE(7,5556)                                                     INT03070
5556  FORMAT(1X,'HI')                                                   INT03080
      DO 2115 K = 1,N                                                   INT03090
C somethign about this raises the floating point exception 
C looking deeper, the math library doesnt like that something here has 
C an inf value. if is a valid float though. line 39 of 
C math_errf.c library.
C it probably would preffer IMPLICIT NONE
C       
2115  H(K,I,J) = Q1(K,I,J)*EXP(TAU(K,I,J))-1.                           INT03100
      H(MINT(I,J),I,J) = (H(MINT(I,J),I,J)-1.)*.5                       INT03110
      DO 2120 K = 1,N                                                   INT03120
2120  ZETA(K,I,J) = H(K,I,J)-Q(K,I,J)-TAU(K,I,J)                        INT03130
      IF (I1.EQ.MAX) GO TO 3010                                         INT03140
      IF ((I1/I2)*I2.EQ.I1) GO TO 3010                                  INT03150
      GO TO 2030
      
C**************** XEnergy********************************************* 
C     DELA,DELB,OSM,XENERGY,DFX/DP                                     *INT03180

3010  CONTAC = 0.0                                                      INT03200
      SQ1 = 0.0                                                         INT03210
      SQ2 = 0.0                                                         INT03220
      REMAIN = 0.0                                                      INT03230
      XE = 0.0                                                          INT03240
      DO 3020 I = 1,NIONS                                               INT03250
      DO 3020 J = 1,NIONS                                               INT03260
      NA = MINT(I,J)                                                    INT03270
      HNA = H(NA,I,J)                                                   INT03280
      H(NA,I,J) = HNA*2.+1.                                             INT03290
      AA = A(I,J)**3                                                    INT03300
      NB = NA +NINT(I,J)                                                INT03310
      BB = (A(I,J)+BA(I,J))**3                                          INT03320
      NC = NB+LINT(I,J)                                                 INT03330
      AC = (A(I,J)+BA(I,J)+CB(I,J))**3                                  INT03340
      AD = PI4*(A1(I,J)-A(I,J))                                         INT03350
      CALL TRAP(NA,NB,I,J,SUM1,SUM2,SUM3)                               INT03360
      T(I,J) = PI4*SUM1*SPAC1                                           INT03370
      G(I,J) = PI4*SUM2*SPAC1                                           INT03380
      G4(I,J) = PI4*SUM3*SPAC1                                          INT03390
      GM(I,J) = G(I,J)                                                  INT03400
      TM(I,J) = T(I,J)                                                  INT03410
      XE = XE + FNU(I)*FNU(J)*E(I,J)*(PI43*(BB-AA)+G(I,J))              INT03420
      CALL TRAP(NB,NC,I,J,SUM1,SUM2,SUM3)                               INT03430
      T(I,J) = PI4*SUM1*SPAC1                                           INT03440
      G(I,J) = PI4*SUM2*SPAC1                                           INT03450
      G4(I,J) = PI4*SUM3*SPAC1+G4(I,J)                                  INT03460
      GW(I,J) = G(I,J)                                                  INT03470
      TW(I,J) = T(I,J)                                                  INT03480
      XE = XE+FNU(I)*FNU(J)*W(I,J)*(PI43*(AC-BB)+G(I,J))                INT03490
      ERROR1 = -Z(I)*Z(J)*FY+AD*H(NA,I,J)*XR(NA)                        INT03500
      ERROR2 = -Z(I)*Z(J)*FX+AD*H(NA,I,J)*XR(NA)**2                     INT03510
      ERROR3 = -Z(I)*Z(J)*FZ+AD*H(NA,I,J)*XR(NA)**4                     INT03520
C      PRINT *, ""*****From xEnergy*******""
C      PRINT *, ""NC"",NC,""N"",N,""I"",I,""J"",J
C      PRINT *,""SUM1"",SUM1,""SUM2"",SUM2,""SUM3"",SUM3

      CALL SIMP(NC,N,I,J,SUM1,SUM2,SUM3)                                INT03530
      T(I,J) = PI43*SPAC1*SUM1-PI2*A(I,J)**2+TW(I,J)+TM(I,J)+ERROR1     INT03540
      G(I,J) = PI43*(SPAC1*SUM2-A(I,J)**3)+GM(I,J)+GW(I,J)+ERROR2       INT03560
      G4(I,J) = PI43*SPAC1*SUM3-2.513234*A(I,J)**5+G4(I,J)+ERROR3       INT03570
      GA(I,J) = H(NA,I,J)+1.                                            INT03580
      GB(I,J) = H(NB,I,J)+1.                                            INT03590
      GC(I,J) = H(NC,I,J)+1.                                            INT03600
      CONTAC = CONTAC + FNU(I)*FNU(J)*GA(I,J)*AA                        INT03610
      SQ1 = SQ1+FNU(I)*FNU(J)*(GB(I,J)*BB*(1.-EXP(-E(I,J)+W(I,J))))     INT03620
      SQ2 = SQ2+FNU(I)*FNU(J)*(GC(I,J)*AC*(1.-EXP(-W(I,J))))            INT03630
      REMAIN = REMAIN + Z(I)*Z(J)*FNU(I)*FNU(J)*T(I,J)                  INT03640
      IF(I1.EQ.MAX) GO TO 3011                                          INT03650
      H(NA,I,J) = HNA                                                   INT03660
      GO TO 3020                                                        INT03670
 3011 DC(NA,I,J) = DC(NA,I,J)+HNA+1.                                    INT03680
 3020 CONTINUE                                                          INT03690
      CONTAC = CONTAC*2.09439*CC/FNO**2                                 INT03700
      SQ1 = SQ1*2.09439*CC/FNO**2                                       INT03710
      SQ2 = SQ2*2.09439*CC/FNO**2                                       INT03720
      REMAIN = REMAIN*FL1*CC/(6.*FNO**2)                                INT03730
      OSM = 1.+CONTAC+SQ1+SQ2+REMAIN                                    INT03740
      XE = 1.97827*TEMP*(3.*(1.+DT)*REMAIN*FNO+XE*CC*0.5/FNO)           INT03750
      XFP = -8.31467*1.E-05*TEMP*DP*3.*REMAIN*FNO                       INT03760
      GM12 = (G(1,2)+G(2,1))*.5                                         INT03770
      CONVGB = 100*(G(1,2)-G(2,1))/GM12                                 INT03780
      IF (ZE.EQ.0.0) GO TO 3050                                         INT03790
      S2 = 0.0                                                          INT03800
      S4 = 0.0                                                          INT03810
      DO 3040 I = 1,NIONS                                               INT03820
      SUM1 = 0.0                                                        INT03830
      SUM2 = 0.0                                                        INT03840
      DO 3030 J = 1,NIONS                                               INT03850
      SUM1 = SUM1 + C(J)*Z(J)*G(I,J)                                    INT03860
3030  SUM2 = SUM2 + C(J)*Z(J)*G4(I,J)                                   INT03870
      F2(I) = SUM1                                                      INT03880
      F4(I) = SUM2                                                      INT03890
      Y(I) = 6.*Z(I)/FKFK                                               INT03900
      R2(I) = 1.+F2(I)/Z(I)                                             INT03910
      R4(I) = 1. + F4(I)/Y(I)                                           INT03920
      S2 = C(I)*Z(I)*F2(I)+S2                                           INT03930
3040  S4 = C(I)*Z(I)*F4(I)+S4                                           INT03940
      CONVGA = (C(1)*G(1,1)-C(2)*G(2,2))/GM12 - C(1)+C(2)               INT03950
      CS2 = FKFK/FL                                                     INT03960
      CS4 = 6./FL                                                       INT03970
      E2 = 1.+S2/CS2                                                    INT03980
      E4 = 1.+S4/CS4                                                    INT03990
      BETA = FNO*R2(1)*R2(2)/(FNU(1)*R2(2)+FNU(2)*R2(1))                INT04000
3050  CONTINUE                                                          INT04010
      FG = 1.0/(CC*GM12)                                                INT04020
      DELA = (FG-1.0-FG*BETA)/(1.0+FG*BETA)                             INT04030
      DELB = FG-1.0                                                     INT04040
      DIFF = DELA-DELB                                                  INT04050
      ITER = I1                                                         INT04060
      FITER = ITER                                                      INT04070
      WRITE(NPRT,9112) DELA,DELB,DIFF,OSM,XE,XFP,ITER,BETA,CONVGA,CONVGBINT04080
9112  FORMAT(  6E13.4,I5,3E13.4)                                        INT04090
      IF (I1.EQ.MAX) GO TO 3060                                         INT04100
      IF(I1.EQ.0) GO TO 2010                                            INT04110
      IF ((I1/I2)*I2.EQ.I1) GO TO 2030                                  INT04120
3060  WRITE(NPRT,9113)                                                  INT04130
9113  FORMAT(15H0MATRIX  G(I,J),21X,15HMATRIX  GM(I,J),20X,             INT04140
     *15HMATRIX  GW(I,J),20X,15HMATRIX  G4(I,J))                        INT04150
      WRITE(NPRT,9114) ((G(I,J),J=1,NIONS),(GM(I,L),L=1,NIONS),(GW(I,M),INT04160
     *M=1,NIONS),(G4(I,K),K=1,NIONS),I=1,NIONS)                         INT04170
9114  FORMAT(1X,2E14.6,6X,2E14.6,6X,2E14.6,6X,2E14.6)                   INT04180
      WRITE(NPRT,9115)                                                  INT04190
9115  FORMAT(15H0MATRIX  T(I,J),21X,15HMATRIX  TM(I,J),20X,             INT04200
     *15HMATRIX  TW(I,J))                                               INT04210
      WRITE(NPRT,9116)((T(I,J),J=1,NIONS),(TM(I,L),L=1,NIONS),(TW(I,M),MINT04220
     *=1,NIONS),I=1,NIONS)                                              INT04230
9116  FORMAT(1X,2E14.6,6X,2E14.6,6X,2E14.6)                             INT04240
      WRITE(NPRT,9117)                                                  INT04250
9117  FORMAT(16H0MATRIX  GA(I,J),20X,15HMATRIX  GB(I,J),20X,            INT04260
     *15HMATRIX  GC(I,J))                                               INT04270
      WRITE(NPRT,9118) ((GA(I,J),J=1,NIONS),(GB(I,L),L=1,NIONS),(GC(I,M)INT04280
     *,M=1,NIONS),I=1,NIONS)                                            INT04290
9118  FORMAT(1X,2E14.6,6X,2E14.6,6X,2E14.6)                             INT04300
      WRITE(NPRT,9119)                                                  INT04310
9119  FORMAT(17H0MATRIX MINT(I,J),3X,16HMATRIX NINT(I,J),3X,            INT04320
     *16HMATRIX LINT(I,J))                                              INT04330
      WRITE(NPRT,9120) ((MINT(I,J),J=1,NIONS),(NINT(I,L),L=1,NIONS),(LININT04340
     *T(I,M),M=1,NIONS),I=1,NIONS)                                      INT04350
9120  FORMAT(1X,2I4,13X,2I4,13X,2I4)                                    INT04360
      WRITE(NPRT,9107) CONTAC,SQ1,SQ2,REMAIN,FG                         INT04370
9107  FORMAT(8H0CONTAC=,1P,E12.4,3X,'SQUARE1=',1P,E12.4,3X,'SQUARE2=',  INT04380
     *1P,E12.4,3X,'REMAIN=',1P,E12.4,3X,'GAMMA=',1P,E12.4)              INT04390
      IF (ZE.EQ.0.0) GO TO 3070                                         INT04400
      WRITE(NPRT,9108)                                                  INT04410
9108  FORMAT(6X,1HZ,13X,2HF2,12X,2HR2,12X,1HY,13X,2HF4,12X,2HR4)        INT04420
      WRITE(NPRT,9109) (Z(I),F2(I),R2(I),Y(I),F4(I),R4(I),I=1,NIONS)    INT04430
9109  FORMAT(1X,6E14.6)                                                 INT04440
      WRITE(NPRT,9110) S2,CS2,E2,S4,CS4,E4                              INT04450
9110  FORMAT('S2=',E14.6,2X,'CS2=',1P,E14.6,2X,'E2=',1P,E14.6,2X,'S4='  INT04460
     *,1P,E14.6,2X,'CS4=',1P,E14.6,2X,'E4=',1P,E14.6)                   INT04470
3070  CONTINUE                                                          INT04480
      WRITE(NPRT,9121)                                                  INT04490
9121  FORMAT(7X,5HXR(N),7X,9H Q(1,1,N),5X,8HH(1,1,N),5X,9H Q(1,2,N),    INT04500
     *6X,8HH(1,2,N),5X,9H Q(2,2,N),6X,8HH(2,2,N))                       INT04510
      WRITE(NPRT,9122) XR(N),Q(N,1,1),H(N,1,1),Q(N,1,2),H(N,1,2),       INT04520
     *Q(N,2,2),H(N,2,2)                                                 INT04530
9122  FORMAT(7E14.4//)                                                  INT04540
      IF(EX.NE.2.0.AND.EX.NE.3.0) GO TO 4070                            INT04550
3080  WRITE(NPRT,9123)                                                  INT04560
9123  FORMAT(7X,5HXR(K),6X,10H DC(1,1,K),5X,8HH(1,1,K),5X,10H DC(1,2,K),INT04570
     *5X,8HH(1,2,K),5X,10H DC(2,1,K),5X,8HH(2,1,K),5X,10H DC(2,2,K),    INT04580
     *5X,8HH(2,2,K))                                                    INT04590
      WRITE(NPRT,9124)(XR(K),((DC(K,I,J),H(K,I,J),J=1,NIONS),I=1,NIONS) INT04600
     *,K=1,N)                                                           INT04610
      WRITE(NDSK,9125)C1,C2                                             INT04620
      WRITE(NDSK,9133)FO,N,M1,RL,((MINT(I,J),I=1,2),J=1,2)              INT04630
9133  FORMAT(F8.4,2I4,F8.4,4I15.6)                                      INT04640
      WRITE(NDSK,9126)(XR(K),H(K,1,1),H(K,1,2),K=1,N)                   INT04650
      WRITE(NDSK2,9003)(((TAU(K,I,J),I=1,NIONS),J=1,NIONS),K=1,N)       INT04660
      REWIND NDSK2                                                      INT04670
9124  FORMAT(1X,1P,9E14.4)                                              INT04680
C    ERIC some issue with this line format
9125  FORMAT(1X,A8,2E16.6)                                              INT04690
9126  FORMAT(2E16.7)                                                    INT04700
      IF (ZE.EQ.0.0) GO TO 4030                                         INT04710
      IF (EX.NE.3.0) GO TO 4070                                          INT04720

C **********************************************************************INT04730
C     CALC OF CHARGE DENSITY                                           *INT04740
C **********************************************************************INT04750
      DO 4020 K = 1,N                                                   INT04760
      DO 4020 I = 1,NIONS                                               INT04770
      SUM1 = 0.0                                                        INT04780
      SUM2 = 0.0                                                        INT04790
      DO 4010 J = 1,NIONS                                               INT04800
      SUM1 = SUM1 + FNU(J)*Z(J)*H(K,I,J)                                INT04810
4010  SUM2 = SUM2 + FNU(J)*Z(J)*Q(K,I,J)                                INT04820
      RHO(I,K) = SUM1*XR(K)**2                                          INT04830
4020  RQO(I,K) = SUM2*XR(K)**2                                          INT04840
      GO TO 4060                                                        INT04850
4030  Z(1) = 1.0                                                        INT04860
      Z(2) = -1.0                                                       INT04870
      DO 4050 K = 1,N                                                   INT04880
      DO 4050 I = 1,NIONS                                               INT04890
      SUM1 = 0.0                                                        INT04900
      DO 4040 J = 1,NIONS                                               INT04910
4040  SUM1 = SUM1+FNU(J)*Z(J)*H(K,I,J)                                  INT04920
      RHO(I,K) = SUM1*XR(K)**2                                          INT04930
4050  RQO(I,K) = 0.0                                                    INT04940
4060  WRITE(NPRT,9127)                                                  INT04950
9127  FORMAT('1CHARGE DENSITY'///1X,9X,'XR',11X,'RHO1',10X,'RQO1',11X,  INT04960
     *'RHO2',10X,'RQO2')                                                INT04970
C      PRINT *, 'NCD:' , NCD
C      PRINT *, 'K:' , K
C      PRINT *, 'IC:' , IC
      WRITE(NPRT,9128)(XR(K),RHO(1,K),RQO(1,K),RHO(2,K),RQO(2,K),K=1,NCDINT04980
     *,IC)                                                              INT04990
      PRINT *, 'NR:' , NR


9128  FORMAT(1X,1P,5E14.4)                                              INT05000
      WRITE(NDSK,9126)(RHO(1,K),RHO(2,K),K=1,N2)                        INT05010
9129  FORMAT(2E16.7)                                                    INT05020
      REWIND NDSK                                                       INT05030
4070  CONTINUE                                                          INT05040
      B(1) = 0.0                                                        INT05050
      B(2) = 1.0                                                        INT05060
      Z(1) = ZA(1)                                                      INT05070
      Z(2) = ZA(2)                                                      INT05080
      ZE = Z(1)                                                         INT05090
      IF (ZE.EQ.0.0) GO TO 5040                                         INT05100
C **********************************************************************INT05110
C     CALC OF DIELECTRIC RESPONSE FUNCTION                              INT05120
C **********************************************************************INT05130
      DO 5010 I = 1,NIONS                                               INT05140
      DO 5010 J = 1,NIONS                                               INT05150
      H(MINT(I,J),I,J) = (H(MINT(I,J),I,J)-1.)*.5                       INT05160
5010  CALL FFT3S(F0,H(1,I,J),M1,RL,TH(1,I,J),1)                         INT05170
      SPACT = PI2/(2.*FNN-1.)/SPAC1                                     INT05180
      TK = 1.0                                                          INT05190
      DO 5030 K = 1,N                                                   INT05200
      Y1(K) = TK*SPACT                                                  INT05210
      SUM = 0.0                                                         INT05220
      DO 5020 I = 1,NIONS                                               INT05230
      DO 5020 J = 1,NIONS                                               INT05240
5020  SUM = SUM + C(I)*C(J)*Z(I)*Z(J)*TH(K,I,J)                         INT05250
      Y1K2 = Y1(K)**2                                                   INT05260
      DRF(K) = 1.-(FKFK/Y1K2)*(1.+SUM/FC)                               INT05270
      DRDF(K) = 1.-FKFK/(FKFK+Y1K2)                                     INT05280
5030  TK = TK+1.                                                        INT05290
      WRITE(NPRT,9130)                                                  INT05300
9130  FORMAT('1DIELECTRIC RESPONSE FUNCTION'///1X,3(9X,'YK',12X,'DRF',  INT05310
     *11X,'DRDF'))                                                      INT05320
      WRITE(NPRT,9131)(Y1(K),DRF(K),DRDF(K),K=1,NR,IR)                  INT05330

      
9131  FORMAT(1X,1P,9E14.4)                                              INT05340
5040  CONTINUE
C5040 CALL TIMER(DATE,TIME,IVIRT,ITOT)                                  INT05350
C      RVIRT=FLOAT(IVIRT)*1.E-6                                          INT05360
C      WRITE(NPRT,9132)TIME,DATE,RVIRT                                   INT05370
      WRITE(NPRT,9132)date_string                                        INT05370
C9132  FORMAT(//////////'END OF EXECUTION AT',A8,' ON ',A8,5X,F8.3,      INT05380
C     *' SECONDS USED')                                                  INT05390
9132  FORMAT(//////////'END EXECUTION ON ',A20)                                                  INT05390
 
      IF (ABS(CHARGE-0.0).LT.1.E-04) GO TO 120                          INT05400
C      GOTO 40                                                           INT05410
C     Program loop       
5050  CONTINUE                                                          INT05420
      STOP                                                              INT05430
      END                                                               INT05440
C ****Program stops and ends ****************************************
 
C************************ SUBROUTINES *******************************

C************************ ADJ *************************************** 
      SUBROUTINE ADJ(A,A1,M,SPAC1)                                      INT05450
      S1 = A/SPAC1                                                      INT05460
      L = S1+1                                                          INT05470
      S2 = L                                                            INT05480
      IF(S2-S1.GE.0.5) GO TO 10                                         INT05490
      A1 = S2*SPAC1                                                     INT05500
      M = L                                                             INT05510
      GO TO 20                                                          INT05520
10    A1 = (S2-1.)*SPAC1                                                INT05530
      M = L-1                                                           INT05540
20    CONTINUE                                                          INT05550
      RETURN                                                            INT05560
      END
      
C************************ TRAP ***************************************
      SUBROUTINE TRAP(N1,N11,I,J,SUM1,SUM2,SUM3)                        INT05580
      DIMENSION H(2048,2,2),XR(2048)                                    INT05590
      COMMON/JAY/ H,XR                                                  INT05600
      IF (N11.EQ.N1) GO TO 20                                           INT05610
      SUM1 = (H(N1,I,J)*XR(N1)+H(N11,I,J)*XR(N11))*.5                   INT05620
      SUM2 = (H(N1,I,J)*XR(N1)**2+H(N11,I,J)*XR(N11)**2)*.5             INT05630
      SUM3 = (H(N1,I,J)*XR(N1)**4+H(N11,I,J)*XR(N11)**4)*.5             INT05640
      L1 = N1+1                                                         INT05650
      L2 = N11-1                                                        INT05660
      IF (N11.EQ.L1) GO TO 30                                           INT05670
      DO 10 K = L1,L2                                                   INT05680
      SUM1 = SUM1 + H(K,I,J)*XR(K)                                      INT05690
      SUM3 = SUM3 + H(K,I,J)*XR(K)**4                                   INT05700
10    SUM2 = SUM2 + H(K,I,J)*XR(K)**2                                   INT05710
      GO TO 30                                                          INT05720
20    SUM1 = 0.0                                                        INT05730
      SUM2 = 0.0                                                        INT05740
      SUM3 = 0.0                                                        INT05750
30    RETURN                                                            INT05760
      END
C********************** SIMPSON **************************************
      SUBROUTINE SIMP(NC,N,I,J,SUM1,SUM2,SUM3)                          INT05780
      DIMENSION H(2048,2,2),XR(2048)                                    INT05790
      COMMON /JAY/ H,XR                                                 INT05800

      SUM1 = H(NC,I,J)*XR(NC)                                           INT05810
      SUM2 = SUM1*XR(NC)                                                INT05820
      SUM3 = SUM2*XR(NC)**2                                             INT05830
C      PRINT *, 'NC:',NC
C     Setting NC to 1 for testing??
      NC = 1
      N2 = (N-NC-2)/2         
C      PRINT *, '**N2:', N2       
      DO 10 K = 1,N2                                                    INT05850
      K4 = NC+2*K-1                                                     INT05860
      K5 = K4+1                                                         INT05870
      K6 = NC+2*N2+1                                                    INT05880
      K7 = K6+1                                                         INT05890
      SUM1 = SUM1 + 4.*H(K4,I,J)*XR(K4)+2.*H(K5,I,J)*XR(K5)             INT05900
      SUM3 = SUM3 + 4.*H(K4,I,J)*XR(K4)**4+2.*H(K5,I,J)*XR(K5)**4       INT05910
10    SUM2 = SUM2 + 4.*H(K4,I,J)*XR(K4)**2+2.*H(K5,I,J)*XR(K5)**2       INT05920
      SUM1 = SUM1 + 4.*H(K6,I,J)*XR(K6)+2.*H(K7,I,J)*XR(K7)             INT05930
      SUM2 = SUM2 + 4.*H(K6,I,J)*XR(K6)**2+2.*H(K7,I,J)*XR(K7)**2       INT05940
      SUM3 = SUM3 + 4.*H(K6,I,J)*XR(K6)**4+2.*H(K7,I,J)*XR(K7)**4       INT05950
      RETURN                                                            INT05960
      END
C**************** Fast Fourier Transform *************************      
      SUBROUTINE FFT3S(F0,F,MM,RL,T,MODE)                               INT05990
C     FAST FOURIER TRANSFORM OF 3-DIMENSIONAL CENTROSYMMETRIC FUNCTION  INT06000
      DIMENSION F(2048),T(1)                                               INT06010
      COMMON /FDATA/ N,N2,FF,RTTWO,NC,NS,ND,NR                          INT06020
      COMMON /FWORK/ W(12288)                                           INT06030
C     DIMENSION OF W SHOULD BE .GE. 3*N                                 INT06040
C     FIXED DATA PREPARATION                                            INT06050
      DATA PI/3.141593/,M/-1/                                           INT06060
      MD = MM+1                                                         INT06070
      CALL SETFT(MD,M)                                                  INT06080
      N = 2**MM                                                         INT06090
      RN = FLOAT(N)                                                     INT06100
      DR = RL/RN                                                        INT06110
      RL3 = RL*RL*RL                                                    INT06120
      C = 4.*RL3*FF/RN                                                  INT06130
      CC = 0.0                                                          INT06140
      A = 1.0                                                           INT06150
      IF(IABS(MODE)-2)202,200,201                                       INT06160
200   CC = 0.5*PI*DR*DR*DR*F(1)                                         INT06170
      A = .125*RN*RN*RN/(RL3*RL3)                                       INT06180
      GOTO 202                                                          INT06190
201   CC = F0                                                           INT06200
202   IF(MODE.GT.0)GOTO 203                                             INT06210
      C = 1.0/C                                                         INT06220
      CC = A*CC                                                         INT06230
203   CONTINUE                                                          INT06240
C     COPY INPUT VECTOR INTO WORKING STORAGE                            INT06250
      DO 204 I=1,N                                                      INT06260
204   W(ND+I+1) = C*FF*F(I)*I                                           INT06270
C     Eric Starts debugging here
C	  RETURN 
C	  END
      CALL RSA(M)                                                       INT06280
C     COPY INTO OUTPUT VECTOR
C     N eq 2048      
C      DO 205 I=1,N     
      DO 205 I=1,1                                                   
205   T(I) = W(NR+I+1)/FLOAT(I)+CC                                      INT06310
      RETURN                                                            INT06320
      END                                                               INT06330
C**************************** SETFT **********************************
      SUBROUTINE SETFT(MM,M)                                            INT06340
C     PREPARE FIXED DATA FOR FAST FOURIER TRANSFORM                     INT06350
      COMMON /FDATA/ N,N2,F,RTTWO,NC,NS,NDATA,NRES                      INT06360
      COMMON /FWORK/ W(12288)                                           INT06370
      IF(MM.LT.0)RETURN                                                 INT06380
      IF(MM.EQ.M)RETURN                                                 INT06390
      M = MM                                                            INT06400
      N = 2**M                                                          INT06410
      N2 = N/2                                                          INT06420
      F = 1.0/FLOAT(N)                                                  INT06430
      DA = 6.2831853071796D0*F                                          INT06440
      RTTWO = SQRT(2.0)                                                 INT06450
      F = SQRT(F)                                                       INT06460
      N1 = (N2-1)/2                                                     INT06470
      NC = 0                                                            INT06480
      NS = N1                                                           INT06490
      NDATA = N1+N1                                                     INT06500
      IF(N1.LE.0)RETURN                                                 INT06510
      DO 10 I=1,N1                                                      INT06520
      A = FLOAT(I)*DA                                                   INT06530
      W(I) = COS(A)                                                     INT06540
10    W(N1+I) = SIN(A)                                                  INT06550
      RETURN                                                            INT06560
      END  
C************************** RSA *************************************  
      SUBROUTINE RSA(M)                                                 INT06580
C     REAL ODD ANALYSIS OR SYNTHESIS                                    INT06590
      COMMON /FDATA/ N,N2,F,RTTWO,NC,NS,NDATA,NRES                      INT06600
      COMMON /FWORK/ W(12288)                                           INT06610
      NQ = N2                                                           INT06620
      NIB = NDATA +1                                                    INT06630
      NOB = NDATA+N2+2                                                  INT06640
      DO 200 L = 1,M                                                    INT06650
      NIM = NIB+NQ                                                      INT06660
      NIE = NIM+NQ                                                      INT06670
      NQH = NQ/2                                                        INT06680
      NQL = (NQ-1)/2                                                    INT06690
      NOM = NOB+NQL+1                                                   INT06700
C     TPRIME = 0                                                        INT06710
      IF(NQL.EQ.0)GOTO 20                                               INT06720
      DO 10 IT = 1,NQL                                                  INT06730
      W(NOB+IT)=W(NIB+IT)-W(NIM-IT)                                     INT06740
10    W(NOM+IT) = W(NIB+IT)+W(NIM-IT)                                   INT06750
20    IF(NQH.NE.NQL) W(NOM) = 2.0*W(NIB+NQH)
C ??  0.LT.TPRIME.LT.NP/2.                                              INT06770
      NO1 = NQ                                                          INT06780
      NO2 = N2-NQ                                                       INT06790
      IF(NO1-NO2)40,80,120                                              INT06800
40    NI=NO1+NO1                                                        INT06810
      W(NOB+NO1) = W(NIB+NI)+W(NIM+NI)                                  INT06820
      W(NOB+NO2) = -W(NIB+NI)+W(NIM+NI)                                 INT06830
      IF(NQL.EQ.0)GOTO 60                                               INT06840
      CC = W(NC+NO1)                                                    INT06850
      SS = W(NS+NO1)                                                    INT06860
      DO 50 IT = 1,NQL                                                  INT06870
      RE = CC*W(NIE+NI-IT)-SS*W(NIM+NI-IT)                              INT06880
      AI = SS*W(NIE+NI-IT)+CC*W(NIM+NI-IT)                              INT06890
      W(NOM+NO1+IT) = W(NIM+NI+IT)-RE                                   INT06900
      W(NOM+NO2+IT) = W(NIM+NI+IT)+RE                                   INT06910
      W(NOB+NO1+IT) = W(NIB+NI+IT)+AI                                   INT06920
50    W(NOB+NO2+IT) = -W(NIB+NI+IT)+AI                                  INT06930
60    IF(NQH.EQ.NQL)GOTO 70                                             INT06940
      NR = NO1/2                                                        INT06950
      W(NOM+NO1) = 2.0*(W(NS+NR)*W(NIM+NI+NQH)+W(NC+NR)*W(NIB+NI+NQH))  INT06960
      W(NOM+NO2) = 2.0*(W(NC+NR)*W(NIM+NI+NQH)-W(NS+NR)*W(NIB+NI+NQH))  INT06970
70    NO1 = NO1+NQ                                                      INT06980
      NO2 = NO2-NQ                                                      INT06990
      IF(NO1-NO2)40,80,120                                              INT07000
80    W(NOB+NO1)=W(NIM)                                                 INT07010
      IF(NQL.EQ.0)GOTO 100                                              INT07020
      DO 90 IT = 1,NQL                                                  INT07030
      W(NOM+NO1+IT) = W(NIM+IT)                                         INT07040
90    W(NOB+NO1+IT) = W(NIE-IT)                                         INT07050
100   IF(NQH.NE.NQL)W(NOM+NO1) = RTTWO*W(NIM+NQH)                       INT07060
120   NT = NIB                                                          INT07070
      NIB = NOB                                                         INT07080
      NOB = NT                                                          INT07090
      NQ = NQH                                                          INT07100
200   CONTINUE                                                          INT07110
      NRES = NIB-1                                                      INT07120
      RETURN                                                            INT07130
      END                                                               INT07140
"
7qHTrmK1,Untitled,loaymahmoud,C++,Thursday 20th of June 2024 01:16:12 PM CDT,"#include <iostream>
using namespace std;

int main() {
    int n;
    cin>>n;
   if(n<0 || n>9) {
    return 0;
   }
   for(int i=1; i<=n; i++) {
    for(int j=1; j<=i ;j++) {

        if(j==1|| j==i || i==n)
        cout<<j;
        else 
        cout<<"" "";
    }
    cout<<endl;
   }
}"
XiDcZWPC,Untitled,loaymahmoud,C++,Thursday 20th of June 2024 01:11:20 PM CDT,"#include <iostream>
using namespace std;

int main() {
    int n;
    cin>>n;
   
   for(int i=1; i<=n; i++) {
    for(int j=1; j<=i ;j++) {

        if(j==1|| j==i || i==n)
        cout<<j;
        else 
        cout<<"" "";
    }
    cout<<endl;
   }
}"
EbbiGh1j,Icons,CrazyGamesYT,Lua,Thursday 20th of June 2024 12:51:17 PM CDT,"return {
    assets = {
        [""lucide-accessibility""] = ""rbxassetid://10709751939"",
        [""lucide-activity""] = ""rbxassetid://10709752035"",
        [""lucide-air-vent""] = ""rbxassetid://10709752131"",
        [""lucide-airplay""] = ""rbxassetid://10709752254"",
        [""lucide-alarm-check""] = ""rbxassetid://10709752405"",
        [""lucide-alarm-clock""] = ""rbxassetid://10709752630"",
        [""lucide-alarm-clock-off""] = ""rbxassetid://10709752508"",
        [""lucide-alarm-minus""] = ""rbxassetid://10709752732"",
        [""lucide-alarm-plus""] = ""rbxassetid://10709752825"",
        [""lucide-album""] = ""rbxassetid://10709752906"",
        [""lucide-alert-circle""] = ""rbxassetid://10709752996"",
        [""lucide-alert-octagon""] = ""rbxassetid://10709753064"",
        [""lucide-alert-triangle""] = ""rbxassetid://10709753149"",
        [""lucide-align-center""] = ""rbxassetid://10709753570"",
        [""lucide-align-center-horizontal""] = ""rbxassetid://10709753272"",
        [""lucide-align-center-vertical""] = ""rbxassetid://10709753421"",
        [""lucide-align-end-horizontal""] = ""rbxassetid://10709753692"",
        [""lucide-align-end-vertical""] = ""rbxassetid://10709753808"",
        [""lucide-align-horizontal-distribute-center""] = ""rbxassetid://10747779791"",
        [""lucide-align-horizontal-distribute-end""] = ""rbxassetid://10747784534"",
        [""lucide-align-horizontal-distribute-start""] = ""rbxassetid://10709754118"",
        [""lucide-align-horizontal-justify-center""] = ""rbxassetid://10709754204"",
        [""lucide-align-horizontal-justify-end""] = ""rbxassetid://10709754317"",
        [""lucide-align-horizontal-justify-start""] = ""rbxassetid://10709754436"",
        [""lucide-align-horizontal-space-around""] = ""rbxassetid://10709754590"",
        [""lucide-align-horizontal-space-between""] = ""rbxassetid://10709754749"",
        [""lucide-align-justify""] = ""rbxassetid://10709759610"",
        [""lucide-align-left""] = ""rbxassetid://10709759764"",
        [""lucide-align-right""] = ""rbxassetid://10709759895"",
        [""lucide-align-start-horizontal""] = ""rbxassetid://10709760051"",
        [""lucide-align-start-vertical""] = ""rbxassetid://10709760244"",
        [""lucide-align-vertical-distribute-center""] = ""rbxassetid://10709760351"",
        [""lucide-align-vertical-distribute-end""] = ""rbxassetid://10709760434"",
        [""lucide-align-vertical-distribute-start""] = ""rbxassetid://10709760612"",
        [""lucide-align-vertical-justify-center""] = ""rbxassetid://10709760814"",
        [""lucide-align-vertical-justify-end""] = ""rbxassetid://10709761003"",
        [""lucide-align-vertical-justify-start""] = ""rbxassetid://10709761176"",
        [""lucide-align-vertical-space-around""] = ""rbxassetid://10709761324"",
        [""lucide-align-vertical-space-between""] = ""rbxassetid://10709761434"",
        [""lucide-anchor""] = ""rbxassetid://10709761530"",
        [""lucide-angry""] = ""rbxassetid://10709761629"",
        [""lucide-annoyed""] = ""rbxassetid://10709761722"",
        [""lucide-aperture""] = ""rbxassetid://10709761813"",
        [""lucide-apple""] = ""rbxassetid://10709761889"",
        [""lucide-archive""] = ""rbxassetid://10709762233"",
        [""lucide-archive-restore""] = ""rbxassetid://10709762058"",
        [""lucide-armchair""] = ""rbxassetid://10709762327"",
        [""lucide-arrow-big-down""] = ""rbxassetid://10747796644"",
        [""lucide-arrow-big-left""] = ""rbxassetid://10709762574"",
        [""lucide-arrow-big-right""] = ""rbxassetid://10709762727"",
        [""lucide-arrow-big-up""] = ""rbxassetid://10709762879"",
        [""lucide-arrow-down""] = ""rbxassetid://10709767827"",
        [""lucide-arrow-down-circle""] = ""rbxassetid://10709763034"",
        [""lucide-arrow-down-left""] = ""rbxassetid://10709767656"",
        [""lucide-arrow-down-right""] = ""rbxassetid://10709767750"",
        [""lucide-arrow-left""] = ""rbxassetid://10709768114"",
        [""lucide-arrow-left-circle""] = ""rbxassetid://10709767936"",
        [""lucide-arrow-left-right""] = ""rbxassetid://10709768019"",
        [""lucide-arrow-right""] = ""rbxassetid://10709768347"",
        [""lucide-arrow-right-circle""] = ""rbxassetid://10709768226"",
        [""lucide-arrow-up""] = ""rbxassetid://10709768939"",
        [""lucide-arrow-up-circle""] = ""rbxassetid://10709768432"",
        [""lucide-arrow-up-down""] = ""rbxassetid://10709768538"",
        [""lucide-arrow-up-left""] = ""rbxassetid://10709768661"",
        [""lucide-arrow-up-right""] = ""rbxassetid://10709768787"",
        [""lucide-asterisk""] = ""rbxassetid://10709769095"",
        [""lucide-at-sign""] = ""rbxassetid://10709769286"",
        [""lucide-award""] = ""rbxassetid://10709769406"",
        [""lucide-axe""] = ""rbxassetid://10709769508"",
        [""lucide-axis-3d""] = ""rbxassetid://10709769598"",
        [""lucide-baby""] = ""rbxassetid://10709769732"",
        [""lucide-backpack""] = ""rbxassetid://10709769841"",
        [""lucide-baggage-claim""] = ""rbxassetid://10709769935"",
        [""lucide-banana""] = ""rbxassetid://10709770005"",
        [""lucide-banknote""] = ""rbxassetid://10709770178"",
        [""lucide-bar-chart""] = ""rbxassetid://10709773755"",
        [""lucide-bar-chart-2""] = ""rbxassetid://10709770317"",
        [""lucide-bar-chart-3""] = ""rbxassetid://10709770431"",
        [""lucide-bar-chart-4""] = ""rbxassetid://10709770560"",
        [""lucide-bar-chart-horizontal""] = ""rbxassetid://10709773669"",
        [""lucide-barcode""] = ""rbxassetid://10747360675"",
        [""lucide-baseline""] = ""rbxassetid://10709773863"",
        [""lucide-bath""] = ""rbxassetid://10709773963"",
        [""lucide-battery""] = ""rbxassetid://10709774640"",
        [""lucide-battery-charging""] = ""rbxassetid://10709774068"",
        [""lucide-battery-full""] = ""rbxassetid://10709774206"",
        [""lucide-battery-low""] = ""rbxassetid://10709774370"",
        [""lucide-battery-medium""] = ""rbxassetid://10709774513"",
        [""lucide-beaker""] = ""rbxassetid://10709774756"",
        [""lucide-bed""] = ""rbxassetid://10709775036"",
        [""lucide-bed-double""] = ""rbxassetid://10709774864"",
        [""lucide-bed-single""] = ""rbxassetid://10709774968"",
        [""lucide-beer""] = ""rbxassetid://10709775167"",
        [""lucide-bell""] = ""rbxassetid://10709775704"",
        [""lucide-bell-minus""] = ""rbxassetid://10709775241"",
        [""lucide-bell-off""] = ""rbxassetid://10709775320"",
        [""lucide-bell-plus""] = ""rbxassetid://10709775448"",
        [""lucide-bell-ring""] = ""rbxassetid://10709775560"",
        [""lucide-bike""] = ""rbxassetid://10709775894"",
        [""lucide-binary""] = ""rbxassetid://10709776050"",
        [""lucide-bitcoin""] = ""rbxassetid://10709776126"",
        [""lucide-bluetooth""] = ""rbxassetid://10709776655"",
        [""lucide-bluetooth-connected""] = ""rbxassetid://10709776240"",
        [""lucide-bluetooth-off""] = ""rbxassetid://10709776344"",
        [""lucide-bluetooth-searching""] = ""rbxassetid://10709776501"",
        [""lucide-bold""] = ""rbxassetid://10747813908"",
        [""lucide-bomb""] = ""rbxassetid://10709781460"",
        [""lucide-bone""] = ""rbxassetid://10709781605"",
        [""lucide-book""] = ""rbxassetid://10709781824"",
        [""lucide-book-open""] = ""rbxassetid://10709781717"",
        [""lucide-bookmark""] = ""rbxassetid://10709782154"",
        [""lucide-bookmark-minus""] = ""rbxassetid://10709781919"",
        [""lucide-bookmark-plus""] = ""rbxassetid://10709782044"",
        [""lucide-bot""] = ""rbxassetid://10709782230"",
        [""lucide-box""] = ""rbxassetid://10709782497"",
        [""lucide-box-select""] = ""rbxassetid://10709782342"",
        [""lucide-boxes""] = ""rbxassetid://10709782582"",
        [""lucide-briefcase""] = ""rbxassetid://10709782662"",
        [""lucide-brush""] = ""rbxassetid://10709782758"",
        [""lucide-bug""] = ""rbxassetid://10709782845"",
        [""lucide-building""] = ""rbxassetid://10709783051"",
        [""lucide-building-2""] = ""rbxassetid://10709782939"",
        [""lucide-bus""] = ""rbxassetid://10709783137"",
        [""lucide-cake""] = ""rbxassetid://10709783217"",
        [""lucide-calculator""] = ""rbxassetid://10709783311"",
        [""lucide-calendar""] = ""rbxassetid://10709789505"",
        [""lucide-calendar-check""] = ""rbxassetid://10709783474"",
        [""lucide-calendar-check-2""] = ""rbxassetid://10709783392"",
        [""lucide-calendar-clock""] = ""rbxassetid://10709783577"",
        [""lucide-calendar-days""] = ""rbxassetid://10709783673"",
        [""lucide-calendar-heart""] = ""rbxassetid://10709783835"",
        [""lucide-calendar-minus""] = ""rbxassetid://10709783959"",
        [""lucide-calendar-off""] = ""rbxassetid://10709788784"",
        [""lucide-calendar-plus""] = ""rbxassetid://10709788937"",
        [""lucide-calendar-range""] = ""rbxassetid://10709789053"",
        [""lucide-calendar-search""] = ""rbxassetid://10709789200"",
        [""lucide-calendar-x""] = ""rbxassetid://10709789407"",
        [""lucide-calendar-x-2""] = ""rbxassetid://10709789329"",
        [""lucide-camera""] = ""rbxassetid://10709789686"",
        [""lucide-camera-off""] = ""rbxassetid://10747822677"",
        [""lucide-car""] = ""rbxassetid://10709789810"",
        [""lucide-carrot""] = ""rbxassetid://10709789960"",
        [""lucide-cast""] = ""rbxassetid://10709790097"",
        [""lucide-charge""] = ""rbxassetid://10709790202"",
        [""lucide-check""] = ""rbxassetid://10709790644"",
        [""lucide-check-circle""] = ""rbxassetid://10709790387"",
        [""lucide-check-circle-2""] = ""rbxassetid://10709790298"",
        [""lucide-check-square""] = ""rbxassetid://10709790537"",
        [""lucide-chef-hat""] = ""rbxassetid://10709790757"",
        [""lucide-cherry""] = ""rbxassetid://10709790875"",
        [""lucide-chevron-down""] = ""rbxassetid://10709790948"",
        [""lucide-chevron-first""] = ""rbxassetid://10709791015"",
        [""lucide-chevron-last""] = ""rbxassetid://10709791130"",
        [""lucide-chevron-left""] = ""rbxassetid://10709791281"",
        [""lucide-chevron-right""] = ""rbxassetid://10709791437"",
        [""lucide-chevron-up""] = ""rbxassetid://10709791523"",
        [""lucide-chevrons-down""] = ""rbxassetid://10709796864"",
        [""lucide-chevrons-down-up""] = ""rbxassetid://10709791632"",
        [""lucide-chevrons-left""] = ""rbxassetid://10709797151"",
        [""lucide-chevrons-left-right""] = ""rbxassetid://10709797006"",
        [""lucide-chevrons-right""] = ""rbxassetid://10709797382"",
        [""lucide-chevrons-right-left""] = ""rbxassetid://10709797274"",
        [""lucide-chevrons-up""] = ""rbxassetid://10709797622"",
        [""lucide-chevrons-up-down""] = ""rbxassetid://10709797508"",
        [""lucide-chrome""] = ""rbxassetid://10709797725"",
        [""lucide-circle""] = ""rbxassetid://10709798174"",
        [""lucide-circle-dot""] = ""rbxassetid://10709797837"",
        [""lucide-circle-ellipsis""] = ""rbxassetid://10709797985"",
        [""lucide-circle-slashed""] = ""rbxassetid://10709798100"",
        [""lucide-citrus""] = ""rbxassetid://10709798276"",
        [""lucide-clapperboard""] = ""rbxassetid://10709798350"",
        [""lucide-clipboard""] = ""rbxassetid://10709799288"",
        [""lucide-clipboard-check""] = ""rbxassetid://10709798443"",
        [""lucide-clipboard-copy""] = ""rbxassetid://10709798574"",
        [""lucide-clipboard-edit""] = ""rbxassetid://10709798682"",
        [""lucide-clipboard-list""] = ""rbxassetid://10709798792"",
        [""lucide-clipboard-signature""] = ""rbxassetid://10709798890"",
        [""lucide-clipboard-type""] = ""rbxassetid://10709798999"",
        [""lucide-clipboard-x""] = ""rbxassetid://10709799124"",
        [""lucide-clock""] = ""rbxassetid://10709805144"",
        [""lucide-clock-1""] = ""rbxassetid://10709799535"",
        [""lucide-clock-10""] = ""rbxassetid://10709799718"",
        [""lucide-clock-11""] = ""rbxassetid://10709799818"",
        [""lucide-clock-12""] = ""rbxassetid://10709799962"",
        [""lucide-clock-2""] = ""rbxassetid://10709803876"",
        [""lucide-clock-3""] = ""rbxassetid://10709803989"",
        [""lucide-clock-4""] = ""rbxassetid://10709804164"",
        [""lucide-clock-5""] = ""rbxassetid://10709804291"",
        [""lucide-clock-6""] = ""rbxassetid://10709804435"",
        [""lucide-clock-7""] = ""rbxassetid://10709804599"",
        [""lucide-clock-8""] = ""rbxassetid://10709804784"",
        [""lucide-clock-9""] = ""rbxassetid://10709804996"",
        [""lucide-cloud""] = ""rbxassetid://10709806740"",
        [""lucide-cloud-cog""] = ""rbxassetid://10709805262"",
        [""lucide-cloud-drizzle""] = ""rbxassetid://10709805371"",
        [""lucide-cloud-fog""] = ""rbxassetid://10709805477"",
        [""lucide-cloud-hail""] = ""rbxassetid://10709805596"",
        [""lucide-cloud-lightning""] = ""rbxassetid://10709805727"",
        [""lucide-cloud-moon""] = ""rbxassetid://10709805942"",
        [""lucide-cloud-moon-rain""] = ""rbxassetid://10709805838"",
        [""lucide-cloud-off""] = ""rbxassetid://10709806060"",
        [""lucide-cloud-rain""] = ""rbxassetid://10709806277"",
        [""lucide-cloud-rain-wind""] = ""rbxassetid://10709806166"",
        [""lucide-cloud-snow""] = ""rbxassetid://10709806374"",
        [""lucide-cloud-sun""] = ""rbxassetid://10709806631"",
        [""lucide-cloud-sun-rain""] = ""rbxassetid://10709806475"",
        [""lucide-cloudy""] = ""rbxassetid://10709806859"",
        [""lucide-clover""] = ""rbxassetid://10709806995"",
        [""lucide-code""] = ""rbxassetid://10709810463"",
        [""lucide-code-2""] = ""rbxassetid://10709807111"",
        [""lucide-codepen""] = ""rbxassetid://10709810534"",
        [""lucide-codesandbox""] = ""rbxassetid://10709810676"",
        [""lucide-coffee""] = ""rbxassetid://10709810814"",
        [""lucide-cog""] = ""rbxassetid://10709810948"",
        [""lucide-coins""] = ""rbxassetid://10709811110"",
        [""lucide-columns""] = ""rbxassetid://10709811261"",
        [""lucide-command""] = ""rbxassetid://10709811365"",
        [""lucide-compass""] = ""rbxassetid://10709811445"",
        [""lucide-component""] = ""rbxassetid://10709811595"",
        [""lucide-concierge-bell""] = ""rbxassetid://10709811706"",
        [""lucide-connection""] = ""rbxassetid://10747361219"",
        [""lucide-contact""] = ""rbxassetid://10709811834"",
        [""lucide-contrast""] = ""rbxassetid://10709811939"",
        [""lucide-cookie""] = ""rbxassetid://10709812067"",
        [""lucide-copy""] = ""rbxassetid://10709812159"",
        [""lucide-copyleft""] = ""rbxassetid://10709812251"",
        [""lucide-copyright""] = ""rbxassetid://10709812311"",
        [""lucide-corner-down-left""] = ""rbxassetid://10709812396"",
        [""lucide-corner-down-right""] = ""rbxassetid://10709812485"",
        [""lucide-corner-left-down""] = ""rbxassetid://10709812632"",
        [""lucide-corner-left-up""] = ""rbxassetid://10709812784"",
        [""lucide-corner-right-down""] = ""rbxassetid://10709812939"",
        [""lucide-corner-right-up""] = ""rbxassetid://10709813094"",
        [""lucide-corner-up-left""] = ""rbxassetid://10709813185"",
        [""lucide-corner-up-right""] = ""rbxassetid://10709813281"",
        [""lucide-cpu""] = ""rbxassetid://10709813383"",
        [""lucide-croissant""] = ""rbxassetid://10709818125"",
        [""lucide-crop""] = ""rbxassetid://10709818245"",
        [""lucide-cross""] = ""rbxassetid://10709818399"",
        [""lucide-crosshair""] = ""rbxassetid://10709818534"",
        [""lucide-crown""] = ""rbxassetid://10709818626"",
        [""lucide-cup-soda""] = ""rbxassetid://10709818763"",
        [""lucide-curly-braces""] = ""rbxassetid://10709818847"",
        [""lucide-currency""] = ""rbxassetid://10709818931"",
        [""lucide-container""] = ""rbxassetid://17466205552"",
        [""lucide-database""] = ""rbxassetid://10709818996"",
        [""lucide-delete""] = ""rbxassetid://10709819059"",
        [""lucide-diamond""] = ""rbxassetid://10709819149"",
        [""lucide-dice-1""] = ""rbxassetid://10709819266"",
        [""lucide-dice-2""] = ""rbxassetid://10709819361"",
        [""lucide-dice-3""] = ""rbxassetid://10709819508"",
        [""lucide-dice-4""] = ""rbxassetid://10709819670"",
        [""lucide-dice-5""] = ""rbxassetid://10709819801"",
        [""lucide-dice-6""] = ""rbxassetid://10709819896"",
        [""lucide-dices""] = ""rbxassetid://10723343321"",
        [""lucide-diff""] = ""rbxassetid://10723343416"",
        [""lucide-disc""] = ""rbxassetid://10723343537"",
        [""lucide-divide""] = ""rbxassetid://10723343805"",
        [""lucide-divide-circle""] = ""rbxassetid://10723343636"",
        [""lucide-divide-square""] = ""rbxassetid://10723343737"",
        [""lucide-dollar-sign""] = ""rbxassetid://10723343958"",
        [""lucide-download""] = ""rbxassetid://10723344270"",
        [""lucide-download-cloud""] = ""rbxassetid://10723344088"",
        [""lucide-droplet""] = ""rbxassetid://10723344432"",
        [""lucide-droplets""] = ""rbxassetid://10734883356"",
        [""lucide-drumstick""] = ""rbxassetid://10723344737"",
        [""lucide-edit""] = ""rbxassetid://10734883598"",
        [""lucide-edit-2""] = ""rbxassetid://10723344885"",
        [""lucide-edit-3""] = ""rbxassetid://10723345088"",
        [""lucide-egg""] = ""rbxassetid://10723345518"",
        [""lucide-egg-fried""] = ""rbxassetid://10723345347"",
        [""lucide-electricity""] = ""rbxassetid://10723345749"",
        [""lucide-electricity-off""] = ""rbxassetid://10723345643"",
        [""lucide-equal""] = ""rbxassetid://10723345990"",
        [""lucide-equal-not""] = ""rbxassetid://10723345866"",
        [""lucide-eraser""] = ""rbxassetid://10723346158"",
        [""lucide-euro""] = ""rbxassetid://10723346372"",
        [""lucide-expand""] = ""rbxassetid://10723346553"",
        [""lucide-external-link""] = ""rbxassetid://10723346684"",
        [""lucide-eye""] = ""rbxassetid://10723346959"",
        [""lucide-eye-off""] = ""rbxassetid://10723346871"",
        [""lucide-factory""] = ""rbxassetid://10723347051"",
        [""lucide-fan""] = ""rbxassetid://10723354359"",
        [""lucide-fast-forward""] = ""rbxassetid://10723354521"",
        [""lucide-feather""] = ""rbxassetid://10723354671"",
        [""lucide-figma""] = ""rbxassetid://10723354801"",
        [""lucide-file""] = ""rbxassetid://10723374641"",
        [""lucide-file-archive""] = ""rbxassetid://10723354921"",
        [""lucide-file-audio""] = ""rbxassetid://10723355148"",
        [""lucide-file-audio-2""] = ""rbxassetid://10723355026"",
        [""lucide-file-axis-3d""] = ""rbxassetid://10723355272"",
        [""lucide-file-badge""] = ""rbxassetid://10723355622"",
        [""lucide-file-badge-2""] = ""rbxassetid://10723355451"",
        [""lucide-file-bar-chart""] = ""rbxassetid://10723355887"",
        [""lucide-file-bar-chart-2""] = ""rbxassetid://10723355746"",
        [""lucide-file-box""] = ""rbxassetid://10723355989"",
        [""lucide-file-check""] = ""rbxassetid://10723356210"",
        [""lucide-file-check-2""] = ""rbxassetid://10723356100"",
        [""lucide-file-clock""] = ""rbxassetid://10723356329"",
        [""lucide-file-code""] = ""rbxassetid://10723356507"",
        [""lucide-file-cog""] = ""rbxassetid://10723356830"",
        [""lucide-file-cog-2""] = ""rbxassetid://10723356676"",
        [""lucide-file-diff""] = ""rbxassetid://10723357039"",
        [""lucide-file-digit""] = ""rbxassetid://10723357151"",
        [""lucide-file-down""] = ""rbxassetid://10723357322"",
        [""lucide-file-edit""] = ""rbxassetid://10723357495"",
        [""lucide-file-heart""] = ""rbxassetid://10723357637"",
        [""lucide-file-image""] = ""rbxassetid://10723357790"",
        [""lucide-file-input""] = ""rbxassetid://10723357933"",
        [""lucide-file-json""] = ""rbxassetid://10723364435"",
        [""lucide-file-json-2""] = ""rbxassetid://10723364361"",
        [""lucide-file-key""] = ""rbxassetid://10723364605"",
        [""lucide-file-key-2""] = ""rbxassetid://10723364515"",
        [""lucide-file-line-chart""] = ""rbxassetid://10723364725"",
        [""lucide-file-lock""] = ""rbxassetid://10723364957"",
        [""lucide-file-lock-2""] = ""rbxassetid://10723364861"",
        [""lucide-file-minus""] = ""rbxassetid://10723365254"",
        [""lucide-file-minus-2""] = ""rbxassetid://10723365086"",
        [""lucide-file-output""] = ""rbxassetid://10723365457"",
        [""lucide-file-pie-chart""] = ""rbxassetid://10723365598"",
        [""lucide-file-plus""] = ""rbxassetid://10723365877"",
        [""lucide-file-plus-2""] = ""rbxassetid://10723365766"",
        [""lucide-file-question""] = ""rbxassetid://10723365987"",
        [""lucide-file-scan""] = ""rbxassetid://10723366167"",
        [""lucide-file-search""] = ""rbxassetid://10723366550"",
        [""lucide-file-search-2""] = ""rbxassetid://10723366340"",
        [""lucide-file-signature""] = ""rbxassetid://10723366741"",
        [""lucide-file-spreadsheet""] = ""rbxassetid://10723366962"",
        [""lucide-file-symlink""] = ""rbxassetid://10723367098"",
        [""lucide-file-terminal""] = ""rbxassetid://10723367244"",
        [""lucide-file-text""] = ""rbxassetid://10723367380"",
        [""lucide-file-type""] = ""rbxassetid://10723367606"",
        [""lucide-file-type-2""] = ""rbxassetid://10723367509"",
        [""lucide-file-up""] = ""rbxassetid://10723367734"",
        [""lucide-file-video""] = ""rbxassetid://10723373884"",
        [""lucide-file-video-2""] = ""rbxassetid://10723367834"",
        [""lucide-file-volume""] = ""rbxassetid://10723374172"",
        [""lucide-file-volume-2""] = ""rbxassetid://10723374030"",
        [""lucide-file-warning""] = ""rbxassetid://10723374276"",
        [""lucide-file-x""] = ""rbxassetid://10723374544"",
        [""lucide-file-x-2""] = ""rbxassetid://10723374378"",
        [""lucide-files""] = ""rbxassetid://10723374759"",
        [""lucide-film""] = ""rbxassetid://10723374981"",
        [""lucide-filter""] = ""rbxassetid://10723375128"",
        [""lucide-fingerprint""] = ""rbxassetid://10723375250"",
        [""lucide-flag""] = ""rbxassetid://10723375890"",
        [""lucide-flag-off""] = ""rbxassetid://10723375443"",
        [""lucide-flag-triangle-left""] = ""rbxassetid://10723375608"",
        [""lucide-flag-triangle-right""] = ""rbxassetid://10723375727"",
        [""lucide-flame""] = ""rbxassetid://10723376114"",
        [""lucide-flashlight""] = ""rbxassetid://10723376471"",
        [""lucide-flashlight-off""] = ""rbxassetid://10723376365"",
        [""lucide-flask-conical""] = ""rbxassetid://10734883986"",
        [""lucide-flask-round""] = ""rbxassetid://10723376614"",
        [""lucide-flip-horizontal""] = ""rbxassetid://10723376884"",
        [""lucide-flip-horizontal-2""] = ""rbxassetid://10723376745"",
        [""lucide-flip-vertical""] = ""rbxassetid://10723377138"",
        [""lucide-flip-vertical-2""] = ""rbxassetid://10723377026"",
        [""lucide-flower""] = ""rbxassetid://10747830374"",
        [""lucide-flower-2""] = ""rbxassetid://10723377305"",
        [""lucide-focus""] = ""rbxassetid://10723377537"",
        [""lucide-folder""] = ""rbxassetid://10723387563"",
        [""lucide-folder-archive""] = ""rbxassetid://10723384478"",
        [""lucide-folder-check""] = ""rbxassetid://10723384605"",
        [""lucide-folder-clock""] = ""rbxassetid://10723384731"",
        [""lucide-folder-closed""] = ""rbxassetid://10723384893"",
        [""lucide-folder-cog""] = ""rbxassetid://10723385213"",
        [""lucide-folder-cog-2""] = ""rbxassetid://10723385036"",
        [""lucide-folder-down""] = ""rbxassetid://10723385338"",
        [""lucide-folder-edit""] = ""rbxassetid://10723385445"",
        [""lucide-folder-heart""] = ""rbxassetid://10723385545"",
        [""lucide-folder-input""] = ""rbxassetid://10723385721"",
        [""lucide-folder-key""] = ""rbxassetid://10723385848"",
        [""lucide-folder-lock""] = ""rbxassetid://10723386005"",
        [""lucide-folder-minus""] = ""rbxassetid://10723386127"",
        [""lucide-folder-open""] = ""rbxassetid://10723386277"",
        [""lucide-folder-output""] = ""rbxassetid://10723386386"",
        [""lucide-folder-plus""] = ""rbxassetid://10723386531"",
        [""lucide-folder-search""] = ""rbxassetid://10723386787"",
        [""lucide-folder-search-2""] = ""rbxassetid://10723386674"",
        [""lucide-folder-symlink""] = ""rbxassetid://10723386930"",
        [""lucide-folder-tree""] = ""rbxassetid://10723387085"",
        [""lucide-folder-up""] = ""rbxassetid://10723387265"",
        [""lucide-folder-x""] = ""rbxassetid://10723387448"",
        [""lucide-folders""] = ""rbxassetid://10723387721"",
        [""lucide-form-input""] = ""rbxassetid://10723387841"",
        [""lucide-forward""] = ""rbxassetid://10723388016"",
        [""lucide-frame""] = ""rbxassetid://10723394389"",
        [""lucide-framer""] = ""rbxassetid://10723394565"",
        [""lucide-frown""] = ""rbxassetid://10723394681"",
        [""lucide-fuel""] = ""rbxassetid://10723394846"",
        [""lucide-function-square""] = ""rbxassetid://10723395041"",
        [""lucide-gamepad""] = ""rbxassetid://10723395457"",
        [""lucide-gamepad-2""] = ""rbxassetid://10723395215"",
        [""lucide-gauge""] = ""rbxassetid://10723395708"",
        [""lucide-gavel""] = ""rbxassetid://10723395896"",
        [""lucide-gem""] = ""rbxassetid://10723396000"",
        [""lucide-ghost""] = ""rbxassetid://10723396107"",
        [""lucide-gift""] = ""rbxassetid://10723396402"",
        [""lucide-gift-card""] = ""rbxassetid://10723396225"",
        [""lucide-git-branch""] = ""rbxassetid://10723396676"",
        [""lucide-git-branch-plus""] = ""rbxassetid://10723396542"",
        [""lucide-git-commit""] = ""rbxassetid://10723396812"",
        [""lucide-git-compare""] = ""rbxassetid://10723396954"",
        [""lucide-git-fork""] = ""rbxassetid://10723397049"",
        [""lucide-git-merge""] = ""rbxassetid://10723397165"",
        [""lucide-git-pull-request""] = ""rbxassetid://10723397431"",
        [""lucide-git-pull-request-closed""] = ""rbxassetid://10723397268"",
        [""lucide-git-pull-request-draft""] = ""rbxassetid://10734884302"",
        [""lucide-glass""] = ""rbxassetid://10723397788"",
        [""lucide-glass-2""] = ""rbxassetid://10723397529"",
        [""lucide-glass-water""] = ""rbxassetid://10723397678"",
        [""lucide-glasses""] = ""rbxassetid://10723397895"",
        [""lucide-globe""] = ""rbxassetid://10723404337"",
        [""lucide-globe-2""] = ""rbxassetid://10723398002"",
        [""lucide-grab""] = ""rbxassetid://10723404472"",
        [""lucide-graduation-cap""] = ""rbxassetid://10723404691"",
        [""lucide-grape""] = ""rbxassetid://10723404822"",
        [""lucide-grid""] = ""rbxassetid://10723404936"",
        [""lucide-grip-horizontal""] = ""rbxassetid://10723405089"",
        [""lucide-grip-vertical""] = ""rbxassetid://10723405236"",
        [""lucide-hammer""] = ""rbxassetid://10723405360"",
        [""lucide-hand""] = ""rbxassetid://10723405649"",
        [""lucide-hand-metal""] = ""rbxassetid://10723405508"",
        [""lucide-hard-drive""] = ""rbxassetid://10723405749"",
        [""lucide-hard-hat""] = ""rbxassetid://10723405859"",
        [""lucide-hash""] = ""rbxassetid://10723405975"",
        [""lucide-haze""] = ""rbxassetid://10723406078"",
        [""lucide-headphones""] = ""rbxassetid://10723406165"",
        [""lucide-heart""] = ""rbxassetid://10723406885"",
        [""lucide-heart-crack""] = ""rbxassetid://10723406299"",
        [""lucide-heart-handshake""] = ""rbxassetid://10723406480"",
        [""lucide-heart-off""] = ""rbxassetid://10723406662"",
        [""lucide-heart-pulse""] = ""rbxassetid://10723406795"",
        [""lucide-help-circle""] = ""rbxassetid://10723406988"",
        [""lucide-hexagon""] = ""rbxassetid://10723407092"",
        [""lucide-highlighter""] = ""rbxassetid://10723407192"",
        [""lucide-history""] = ""rbxassetid://10723407335"",
        [""lucide-home""] = ""rbxassetid://10723407389"",
        [""lucide-hourglass""] = ""rbxassetid://10723407498"",
        [""lucide-ice-cream""] = ""rbxassetid://10723414308"",
        [""lucide-image""] = ""rbxassetid://10723415040"",
        [""lucide-image-minus""] = ""rbxassetid://10723414487"",
        [""lucide-image-off""] = ""rbxassetid://10723414677"",
        [""lucide-image-plus""] = ""rbxassetid://10723414827"",
        [""lucide-import""] = ""rbxassetid://10723415205"",
        [""lucide-inbox""] = ""rbxassetid://10723415335"",
        [""lucide-indent""] = ""rbxassetid://10723415494"",
        [""lucide-indian-rupee""] = ""rbxassetid://10723415642"",
        [""lucide-infinity""] = ""rbxassetid://10723415766"",
        [""lucide-info""] = ""rbxassetid://10723415903"",
        [""lucide-inspect""] = ""rbxassetid://10723416057"",
        [""lucide-italic""] = ""rbxassetid://10723416195"",
        [""lucide-japanese-yen""] = ""rbxassetid://10723416363"",
        [""lucide-joystick""] = ""rbxassetid://10723416527"",
        [""lucide-key""] = ""rbxassetid://10723416652"",
        [""lucide-keyboard""] = ""rbxassetid://10723416765"",
        [""lucide-lamp""] = ""rbxassetid://10723417513"",
        [""lucide-lamp-ceiling""] = ""rbxassetid://10723416922"",
        [""lucide-lamp-desk""] = ""rbxassetid://10723417016"",
        [""lucide-lamp-floor""] = ""rbxassetid://10723417131"",
        [""lucide-lamp-wall-down""] = ""rbxassetid://10723417240"",
        [""lucide-lamp-wall-up""] = ""rbxassetid://10723417356"",
        [""lucide-landmark""] = ""rbxassetid://10723417608"",
        [""lucide-languages""] = ""rbxassetid://10723417703"",
        [""lucide-laptop""] = ""rbxassetid://10723423881"",
        [""lucide-laptop-2""] = ""rbxassetid://10723417797"",
        [""lucide-lasso""] = ""rbxassetid://10723424235"",
        [""lucide-lasso-select""] = ""rbxassetid://10723424058"",
        [""lucide-laugh""] = ""rbxassetid://10723424372"",
        [""lucide-layers""] = ""rbxassetid://10723424505"",
        [""lucide-layout""] = ""rbxassetid://10723425376"",
        [""lucide-layout-dashboard""] = ""rbxassetid://10723424646"",
        [""lucide-layout-grid""] = ""rbxassetid://10723424838"",
        [""lucide-layout-list""] = ""rbxassetid://10723424963"",
        [""lucide-layout-template""] = ""rbxassetid://10723425187"",
        [""lucide-leaf""] = ""rbxassetid://10723425539"",
        [""lucide-library""] = ""rbxassetid://10723425615"",
        [""lucide-life-buoy""] = ""rbxassetid://10723425685"",
        [""lucide-lightbulb""] = ""rbxassetid://10723425852"",
        [""lucide-lightbulb-off""] = ""rbxassetid://10723425762"",
        [""lucide-line-chart""] = ""rbxassetid://10723426393"",
        [""lucide-link""] = ""rbxassetid://10723426722"",
        [""lucide-link-2""] = ""rbxassetid://10723426595"",
        [""lucide-link-2-off""] = ""rbxassetid://10723426513"",
        [""lucide-list""] = ""rbxassetid://10723433811"",
        [""lucide-list-checks""] = ""rbxassetid://10734884548"",
        [""lucide-list-end""] = ""rbxassetid://10723426886"",
        [""lucide-list-minus""] = ""rbxassetid://10723426986"",
        [""lucide-list-music""] = ""rbxassetid://10723427081"",
        [""lucide-list-ordered""] = ""rbxassetid://10723427199"",
        [""lucide-list-plus""] = ""rbxassetid://10723427334"",
        [""lucide-list-start""] = ""rbxassetid://10723427494"",
        [""lucide-list-video""] = ""rbxassetid://10723427619"",
        [""lucide-list-todo""] = ""rbxassetid://17376008003"",
        [""lucide-list-x""] = ""rbxassetid://10723433655"",
        [""lucide-loader""] = ""rbxassetid://10723434070"",
        [""lucide-loader-2""] = ""rbxassetid://10723433935"",
        [""lucide-locate""] = ""rbxassetid://10723434557"",
        [""lucide-locate-fixed""] = ""rbxassetid://10723434236"",
        [""lucide-locate-off""] = ""rbxassetid://10723434379"",
        [""lucide-lock""] = ""rbxassetid://10723434711"",
        [""lucide-log-in""] = ""rbxassetid://10723434830"",
        [""lucide-log-out""] = ""rbxassetid://10723434906"",
        [""lucide-luggage""] = ""rbxassetid://10723434993"",
        [""lucide-magnet""] = ""rbxassetid://10723435069"",
        [""lucide-mail""] = ""rbxassetid://10734885430"",
        [""lucide-mail-check""] = ""rbxassetid://10723435182"",
        [""lucide-mail-minus""] = ""rbxassetid://10723435261"",
        [""lucide-mail-open""] = ""rbxassetid://10723435342"",
        [""lucide-mail-plus""] = ""rbxassetid://10723435443"",
        [""lucide-mail-question""] = ""rbxassetid://10723435515"",
        [""lucide-mail-search""] = ""rbxassetid://10734884739"",
        [""lucide-mail-warning""] = ""rbxassetid://10734885015"",
        [""lucide-mail-x""] = ""rbxassetid://10734885247"",
        [""lucide-mails""] = ""rbxassetid://10734885614"",
        [""lucide-map""] = ""rbxassetid://10734886202"",
        [""lucide-map-pin""] = ""rbxassetid://10734886004"",
        [""lucide-map-pin-off""] = ""rbxassetid://10734885803"",
        [""lucide-maximize""] = ""rbxassetid://10734886735"",
        [""lucide-maximize-2""] = ""rbxassetid://10734886496"",
        [""lucide-medal""] = ""rbxassetid://10734887072"",
        [""lucide-megaphone""] = ""rbxassetid://10734887454"",
        [""lucide-megaphone-off""] = ""rbxassetid://10734887311"",
        [""lucide-meh""] = ""rbxassetid://10734887603"",
        [""lucide-menu""] = ""rbxassetid://10734887784"",
        [""lucide-message-circle""] = ""rbxassetid://10734888000"",
        [""lucide-message-square""] = ""rbxassetid://10734888228"",
        [""lucide-mic""] = ""rbxassetid://10734888864"",
        [""lucide-mic-2""] = ""rbxassetid://10734888430"",
        [""lucide-mic-off""] = ""rbxassetid://10734888646"",
        [""lucide-microscope""] = ""rbxassetid://10734889106"",
        [""lucide-microwave""] = ""rbxassetid://10734895076"",
        [""lucide-milestone""] = ""rbxassetid://10734895310"",
        [""lucide-minimize""] = ""rbxassetid://10734895698"",
        [""lucide-minimize-2""] = ""rbxassetid://10734895530"",
        [""lucide-minus""] = ""rbxassetid://10734896206"",
        [""lucide-minus-circle""] = ""rbxassetid://10734895856"",
        [""lucide-minus-square""] = ""rbxassetid://10734896029"",
        [""lucide-monitor""] = ""rbxassetid://10734896881"",
        [""lucide-monitor-off""] = ""rbxassetid://10734896360"",
        [""lucide-monitor-speaker""] = ""rbxassetid://10734896512"",
        [""lucide-moon""] = ""rbxassetid://10734897102"",
        [""lucide-more-horizontal""] = ""rbxassetid://10734897250"",
        [""lucide-more-vertical""] = ""rbxassetid://10734897387"",
        [""lucide-mountain""] = ""rbxassetid://10734897956"",
        [""lucide-mountain-snow""] = ""rbxassetid://10734897665"",
        [""lucide-mouse""] = ""rbxassetid://10734898592"",
        [""lucide-mouse-pointer""] = ""rbxassetid://10734898476"",
        [""lucide-mouse-pointer-2""] = ""rbxassetid://10734898194"",
        [""lucide-mouse-pointer-click""] = ""rbxassetid://10734898355"",
        [""lucide-move""] = ""rbxassetid://10734900011"",
        [""lucide-move-3d""] = ""rbxassetid://10734898756"",
        [""lucide-move-diagonal""] = ""rbxassetid://10734899164"",
        [""lucide-move-diagonal-2""] = ""rbxassetid://10734898934"",
        [""lucide-move-horizontal""] = ""rbxassetid://10734899414"",
        [""lucide-move-vertical""] = ""rbxassetid://10734899821"",
        [""lucide-music""] = ""rbxassetid://10734905958"",
        [""lucide-music-2""] = ""rbxassetid://10734900215"",
        [""lucide-music-3""] = ""rbxassetid://10734905665"",
        [""lucide-music-4""] = ""rbxassetid://10734905823"",
        [""lucide-navigation""] = ""rbxassetid://10734906744"",
        [""lucide-navigation-2""] = ""rbxassetid://10734906332"",
        [""lucide-navigation-2-off""] = ""rbxassetid://10734906144"",
        [""lucide-navigation-off""] = ""rbxassetid://10734906580"",
        [""lucide-network""] = ""rbxassetid://10734906975"",
        [""lucide-newspaper""] = ""rbxassetid://10734907168"",
        [""lucide-octagon""] = ""rbxassetid://10734907361"",
        [""lucide-option""] = ""rbxassetid://10734907649"",
        [""lucide-outdent""] = ""rbxassetid://10734907933"",
        [""lucide-package""] = ""rbxassetid://10734909540"",
        [""lucide-package-2""] = ""rbxassetid://10734908151"",
        [""lucide-package-check""] = ""rbxassetid://10734908384"",
        [""lucide-package-minus""] = ""rbxassetid://10734908626"",
        [""lucide-package-open""] = ""rbxassetid://10734908793"",
        [""lucide-package-plus""] = ""rbxassetid://10734909016"",
        [""lucide-package-search""] = ""rbxassetid://10734909196"",
        [""lucide-package-x""] = ""rbxassetid://10734909375"",
        [""lucide-paint-bucket""] = ""rbxassetid://10734909847"",
        [""lucide-paintbrush""] = ""rbxassetid://10734910187"",
        [""lucide-paintbrush-2""] = ""rbxassetid://10734910030"",
        [""lucide-palette""] = ""rbxassetid://10734910430"",
        [""lucide-palmtree""] = ""rbxassetid://10734910680"",
        [""lucide-paperclip""] = ""rbxassetid://10734910927"",
        [""lucide-party-popper""] = ""rbxassetid://10734918735"",
        [""lucide-pause""] = ""rbxassetid://10734919336"",
        [""lucide-pause-circle""] = ""rbxassetid://10735024209"",
        [""lucide-pause-octagon""] = ""rbxassetid://10734919143"",
        [""lucide-pen-tool""] = ""rbxassetid://10734919503"",
        [""lucide-pencil""] = ""rbxassetid://10734919691"",
        [""lucide-percent""] = ""rbxassetid://10734919919"",
        [""lucide-person-standing""] = ""rbxassetid://10734920149"",
        [""lucide-phone""] = ""rbxassetid://10734921524"",
        [""lucide-phone-call""] = ""rbxassetid://10734920305"",
        [""lucide-phone-forwarded""] = ""rbxassetid://10734920508"",
        [""lucide-phone-incoming""] = ""rbxassetid://10734920694"",
        [""lucide-phone-missed""] = ""rbxassetid://10734920845"",
        [""lucide-phone-off""] = ""rbxassetid://10734921077"",
        [""lucide-phone-outgoing""] = ""rbxassetid://10734921288"",
        [""lucide-pie-chart""] = ""rbxassetid://10734921727"",
        [""lucide-piggy-bank""] = ""rbxassetid://10734921935"",
        [""lucide-pin""] = ""rbxassetid://10734922324"",
        [""lucide-pin-off""] = ""rbxassetid://10734922180"",
        [""lucide-pipette""] = ""rbxassetid://10734922497"",
        [""lucide-pizza""] = ""rbxassetid://10734922774"",
        [""lucide-plane""] = ""rbxassetid://10734922971"",
        [""lucide-plane-landing""] = ""rbxassetid://17376029914"",
        [""lucide-play""] = ""rbxassetid://10734923549"",
        [""lucide-play-circle""] = ""rbxassetid://10734923214"",
        [""lucide-plus""] = ""rbxassetid://10734924532"",
        [""lucide-plus-circle""] = ""rbxassetid://10734923868"",
        [""lucide-plus-square""] = ""rbxassetid://10734924219"",
        [""lucide-podcast""] = ""rbxassetid://10734929553"",
        [""lucide-pointer""] = ""rbxassetid://10734929723"",
        [""lucide-pound-sterling""] = ""rbxassetid://10734929981"",
        [""lucide-power""] = ""rbxassetid://10734930466"",
        [""lucide-power-off""] = ""rbxassetid://10734930257"",
        [""lucide-printer""] = ""rbxassetid://10734930632"",
        [""lucide-puzzle""] = ""rbxassetid://10734930886"",
        [""lucide-quote""] = ""rbxassetid://10734931234"",
        [""lucide-radio""] = ""rbxassetid://10734931596"",
        [""lucide-radio-receiver""] = ""rbxassetid://10734931402"",
        [""lucide-rectangle-horizontal""] = ""rbxassetid://10734931777"",
        [""lucide-rectangle-vertical""] = ""rbxassetid://10734932081"",
        [""lucide-recycle""] = ""rbxassetid://10734932295"",
        [""lucide-redo""] = ""rbxassetid://10734932822"",
        [""lucide-redo-2""] = ""rbxassetid://10734932586"",
        [""lucide-refresh-ccw""] = ""rbxassetid://10734933056"",
        [""lucide-refresh-cw""] = ""rbxassetid://10734933222"",
        [""lucide-refrigerator""] = ""rbxassetid://10734933465"",
        [""lucide-regex""] = ""rbxassetid://10734933655"",
        [""lucide-repeat""] = ""rbxassetid://10734933966"",
        [""lucide-repeat-1""] = ""rbxassetid://10734933826"",
        [""lucide-reply""] = ""rbxassetid://10734934252"",
        [""lucide-reply-all""] = ""rbxassetid://10734934132"",
        [""lucide-rewind""] = ""rbxassetid://10734934347"",
        [""lucide-rocket""] = ""rbxassetid://10734934585"",
        [""lucide-rocking-chair""] = ""rbxassetid://10734939942"",
        [""lucide-rotate-3d""] = ""rbxassetid://10734940107"",
        [""lucide-rotate-ccw""] = ""rbxassetid://10734940376"",
        [""lucide-rotate-cw""] = ""rbxassetid://10734940654"",
        [""lucide-rss""] = ""rbxassetid://10734940825"",
        [""lucide-ruler""] = ""rbxassetid://10734941018"",
        [""lucide-russian-ruble""] = ""rbxassetid://10734941199"",
        [""lucide-sailboat""] = ""rbxassetid://10734941354"",
        [""lucide-save""] = ""rbxassetid://10734941499"",
        [""lucide-scale""] = ""rbxassetid://10734941912"",
        [""lucide-scale-3d""] = ""rbxassetid://10734941739"",
        [""lucide-scaling""] = ""rbxassetid://10734942072"",
        [""lucide-scan""] = ""rbxassetid://10734942565"",
        [""lucide-scan-face""] = ""rbxassetid://10734942198"",
        [""lucide-scan-line""] = ""rbxassetid://10734942351"",
        [""lucide-scissors""] = ""rbxassetid://10734942778"",
        [""lucide-screen-share""] = ""rbxassetid://10734943193"",
        [""lucide-screen-share-off""] = ""rbxassetid://10734942967"",
        [""lucide-scroll""] = ""rbxassetid://10734943448"",
        [""lucide-search""] = ""rbxassetid://10734943674"",
        [""lucide-send""] = ""rbxassetid://10734943902"",
        [""lucide-separator-horizontal""] = ""rbxassetid://10734944115"",
        [""lucide-separator-vertical""] = ""rbxassetid://10734944326"",
        [""lucide-server""] = ""rbxassetid://10734949856"",
        [""lucide-server-cog""] = ""rbxassetid://10734944444"",
        [""lucide-server-crash""] = ""rbxassetid://10734944554"",
        [""lucide-server-off""] = ""rbxassetid://10734944668"",
        [""lucide-settings""] = ""rbxassetid://10734950309"",
        [""lucide-settings-2""] = ""rbxassetid://10734950020"",
        [""lucide-share""] = ""rbxassetid://10734950813"",
        [""lucide-share-2""] = ""rbxassetid://10734950553"",
        [""lucide-sheet""] = ""rbxassetid://10734951038"",
        [""lucide-shield""] = ""rbxassetid://10734951847"",
        [""lucide-shield-alert""] = ""rbxassetid://10734951173"",
        [""lucide-shield-check""] = ""rbxassetid://10734951367"",
        [""lucide-shield-close""] = ""rbxassetid://10734951535"",
        [""lucide-shield-off""] = ""rbxassetid://10734951684"",
        [""lucide-shirt""] = ""rbxassetid://10734952036"",
        [""lucide-shopping-bag""] = ""rbxassetid://10734952273"",
        [""lucide-shopping-cart""] = ""rbxassetid://10734952479"",
        [""lucide-shovel""] = ""rbxassetid://10734952773"",
        [""lucide-shower-head""] = ""rbxassetid://10734952942"",
        [""lucide-shrink""] = ""rbxassetid://10734953073"",
        [""lucide-shrub""] = ""rbxassetid://10734953241"",
        [""lucide-shuffle""] = ""rbxassetid://10734953451"",
        [""lucide-sidebar""] = ""rbxassetid://10734954301"",
        [""lucide-sidebar-close""] = ""rbxassetid://10734953715"",
        [""lucide-sidebar-open""] = ""rbxassetid://10734954000"",
        [""lucide-sigma""] = ""rbxassetid://10734954538"",
        [""lucide-signal""] = ""rbxassetid://10734961133"",
        [""lucide-signal-high""] = ""rbxassetid://10734954807"",
        [""lucide-signal-low""] = ""rbxassetid://10734955080"",
        [""lucide-signal-medium""] = ""rbxassetid://10734955336"",
        [""lucide-signal-zero""] = ""rbxassetid://10734960878"",
        [""lucide-siren""] = ""rbxassetid://10734961284"",
        [""lucide-skip-back""] = ""rbxassetid://10734961526"",
        [""lucide-skip-forward""] = ""rbxassetid://10734961809"",
        [""lucide-skull""] = ""rbxassetid://10734962068"",
        [""lucide-slack""] = ""rbxassetid://10734962339"",
        [""lucide-slash""] = ""rbxassetid://10734962600"",
        [""lucide-slice""] = ""rbxassetid://10734963024"",
        [""lucide-sliders""] = ""rbxassetid://10734963400"",
        [""lucide-sliders-horizontal""] = ""rbxassetid://10734963191"",
        [""lucide-smartphone""] = ""rbxassetid://10734963940"",
        [""lucide-smartphone-charging""] = ""rbxassetid://10734963671"",
        [""lucide-smile""] = ""rbxassetid://10734964441"",
        [""lucide-smile-plus""] = ""rbxassetid://10734964188"",
        [""lucide-snowflake""] = ""rbxassetid://10734964600"",
        [""lucide-sofa""] = ""rbxassetid://10734964852"",
        [""lucide-sort-asc""] = ""rbxassetid://10734965115"",
        [""lucide-sort-desc""] = ""rbxassetid://10734965287"",
        [""lucide-speaker""] = ""rbxassetid://10734965419"",
        [""lucide-sprout""] = ""rbxassetid://10734965572"",
        [""lucide-square""] = ""rbxassetid://10734965702"",
        [""lucide-star""] = ""rbxassetid://10734966248"",
        [""lucide-star-half""] = ""rbxassetid://10734965897"",
        [""lucide-star-off""] = ""rbxassetid://10734966097"",
        [""lucide-stethoscope""] = ""rbxassetid://10734966384"",
        [""lucide-sticker""] = ""rbxassetid://10734972234"",
        [""lucide-sticky-note""] = ""rbxassetid://10734972463"",
        [""lucide-stop-circle""] = ""rbxassetid://10734972621"",
        [""lucide-stretch-horizontal""] = ""rbxassetid://10734972862"",
        [""lucide-stretch-vertical""] = ""rbxassetid://10734973130"",
        [""lucide-strikethrough""] = ""rbxassetid://10734973290"",
        [""lucide-subscript""] = ""rbxassetid://10734973457"",
        [""lucide-sun""] = ""rbxassetid://10734974297"",
        [""lucide-sun-dim""] = ""rbxassetid://10734973645"",
        [""lucide-sun-medium""] = ""rbxassetid://10734973778"",
        [""lucide-sun-moon""] = ""rbxassetid://10734973999"",
        [""lucide-sun-snow""] = ""rbxassetid://10734974130"",
        [""lucide-sunrise""] = ""rbxassetid://10734974522"",
        [""lucide-sunset""] = ""rbxassetid://10734974689"",
        [""lucide-superscript""] = ""rbxassetid://10734974850"",
        [""lucide-swiss-franc""] = ""rbxassetid://10734975024"",
        [""lucide-switch-camera""] = ""rbxassetid://10734975214"",
        [""lucide-sword""] = ""rbxassetid://10734975486"",
        [""lucide-swords""] = ""rbxassetid://10734975692"",
        [""lucide-syringe""] = ""rbxassetid://10734975932"",
        [""lucide-table""] = ""rbxassetid://10734976230"",
        [""lucide-table-2""] = ""rbxassetid://10734976097"",
        [""lucide-tablet""] = ""rbxassetid://10734976394"",
        [""lucide-tag""] = ""rbxassetid://10734976528"",
        [""lucide-tags""] = ""rbxassetid://10734976739"",
        [""lucide-target""] = ""rbxassetid://10734977012"",
        [""lucide-tent""] = ""rbxassetid://10734981750"",
        [""lucide-terminal""] = ""rbxassetid://10734982144"",
        [""lucide-terminal-square""] = ""rbxassetid://10734981995"",
        [""lucide-text-cursor""] = ""rbxassetid://10734982395"",
        [""lucide-text-cursor-input""] = ""rbxassetid://10734982297"",
        [""lucide-thermometer""] = ""rbxassetid://10734983134"",
        [""lucide-thermometer-snowflake""] = ""rbxassetid://10734982571"",
        [""lucide-thermometer-sun""] = ""rbxassetid://10734982771"",
        [""lucide-thumbs-down""] = ""rbxassetid://10734983359"",
        [""lucide-thumbs-up""] = ""rbxassetid://10734983629"",
        [""lucide-ticket""] = ""rbxassetid://10734983868"",
        [""lucide-timer""] = ""rbxassetid://10734984606"",
        [""lucide-timer-off""] = ""rbxassetid://10734984138"",
        [""lucide-timer-reset""] = ""rbxassetid://10734984355"",
        [""lucide-toggle-left""] = ""rbxassetid://10734984834"",
        [""lucide-toggle-right""] = ""rbxassetid://10734985040"",
        [""lucide-tornado""] = ""rbxassetid://10734985247"",
        [""lucide-toy-brick""] = ""rbxassetid://10747361919"",
        [""lucide-train""] = ""rbxassetid://10747362105"",
        [""lucide-trash""] = ""rbxassetid://10747362393"",
        [""lucide-trash-2""] = ""rbxassetid://10747362241"",
        [""lucide-tree-deciduous""] = ""rbxassetid://10747362534"",
        [""lucide-tree-pine""] = ""rbxassetid://10747362748"",
        [""lucide-trees""] = ""rbxassetid://10747363016"",
        [""lucide-trending-down""] = ""rbxassetid://10747363205"",
        [""lucide-trending-up""] = ""rbxassetid://10747363465"",
        [""lucide-triangle""] = ""rbxassetid://10747363621"",
        [""lucide-trophy""] = ""rbxassetid://10747363809"",
        [""lucide-truck""] = ""rbxassetid://10747364031"",
        [""lucide-tv""] = ""rbxassetid://10747364593"",
        [""lucide-tv-2""] = ""rbxassetid://10747364302"",
        [""lucide-type""] = ""rbxassetid://10747364761"",
        [""lucide-umbrella""] = ""rbxassetid://10747364971"",
        [""lucide-underline""] = ""rbxassetid://10747365191"",
        [""lucide-undo""] = ""rbxassetid://10747365484"",
        [""lucide-undo-2""] = ""rbxassetid://10747365359"",
        [""lucide-unlink""] = ""rbxassetid://10747365771"",
        [""lucide-unlink-2""] = ""rbxassetid://10747397871"",
        [""lucide-unlock""] = ""rbxassetid://10747366027"",
        [""lucide-upload""] = ""rbxassetid://10747366434"",
        [""lucide-upload-cloud""] = ""rbxassetid://10747366266"",
        [""lucide-usb""] = ""rbxassetid://10747366606"",
        [""lucide-user""] = ""rbxassetid://10747373176"",
        [""lucide-user-check""] = ""rbxassetid://10747371901"",
        [""lucide-user-cog""] = ""rbxassetid://10747372167"",
        [""lucide-user-minus""] = ""rbxassetid://10747372346"",
        [""lucide-user-plus""] = ""rbxassetid://10747372702"",
        [""lucide-user-x""] = ""rbxassetid://10747372992"",
        [""lucide-users""] = ""rbxassetid://10747373426"",
        [""lucide-utensils""] = ""rbxassetid://10747373821"",
        [""lucide-utensils-crossed""] = ""rbxassetid://10747373629"",
        [""lucide-venetian-mask""] = ""rbxassetid://10747374003"",
        [""lucide-verified""] = ""rbxassetid://10747374131"",
        [""lucide-vibrate""] = ""rbxassetid://10747374489"",
        [""lucide-vibrate-off""] = ""rbxassetid://10747374269"",
        [""lucide-video""] = ""rbxassetid://10747374938"",
        [""lucide-video-off""] = ""rbxassetid://10747374721"",
        [""lucide-view""] = ""rbxassetid://10747375132"",
        [""lucide-voicemail""] = ""rbxassetid://10747375281"",
        [""lucide-volume""] = ""rbxassetid://10747376008"",
        [""lucide-volume-1""] = ""rbxassetid://10747375450"",
        [""lucide-volume-2""] = ""rbxassetid://10747375679"",
        [""lucide-volume-x""] = ""rbxassetid://10747375880"",
        [""lucide-wallet""] = ""rbxassetid://10747376205"",
        [""lucide-wand""] = ""rbxassetid://10747376565"",
        [""lucide-wand-2""] = ""rbxassetid://10747376349"",
        [""lucide-watch""] = ""rbxassetid://10747376722"",
        [""lucide-waves""] = ""rbxassetid://10747376931"",
        [""lucide-webcam""] = ""rbxassetid://10747381992"",
        [""lucide-wifi""] = ""rbxassetid://10747382504"",
        [""lucide-wifi-off""] = ""rbxassetid://10747382268"",
        [""lucide-wind""] = ""rbxassetid://10747382750"",
        [""lucide-wrap-text""] = ""rbxassetid://10747383065"",
        [""lucide-wrench""] = ""rbxassetid://10747383470"",
        [""lucide-x""] = ""rbxassetid://10747384394"",
        [""lucide-x-circle""] = ""rbxassetid://10747383819"",
        [""lucide-x-octagon""] = ""rbxassetid://10747384037"",
        [""lucide-x-square""] = ""rbxassetid://10747384217"",
        [""lucide-zoom-in""] = ""rbxassetid://10747384552"",
        [""lucide-zoom-out""] = ""rbxassetid://10747384679"",
        [""lucide-cat""] = ""rbxassetid://16935650691"",
        [""lucide-message-circle-question""] = ""rbxassetid://16970049192"",
        [""lucide-webhook""] = ""rbxassetid://17320556264"",
    }
}"
nyUwxSfY,"""Servo Control"" rev_01",pleasedontcode,Arduino,Thursday 20th of June 2024 12:50:31 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Servo Control""
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-06-20 17:49:26

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* szervó motor seriallal való vezérlése */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Servo.h>  //https://github.com/arduino-libraries/Servo

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF PWM OUTPUT PINS *****/
const uint8_t motor_Servomotor_PWMSignal_PIN_D3 = 3;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
uint8_t motor_Servomotor_PWMSignal_PIN_D3_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float motor_Servomotor_PWMSignal_PIN_D3_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Servo myservo;  // Create a Servo object

void setup(void)
{
    // put your setup code here, to run once:
    myservo.attach(motor_Servomotor_PWMSignal_PIN_D3);  // Attach the servo to pin 3
    pinMode(motor_Servomotor_PWMSignal_PIN_D3, OUTPUT);
    Serial.begin(9600);  // Initialize serial communication at 9600 bits per second
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    if (Serial.available() > 0) {
        int input = Serial.parseInt();  // Read the incoming integer from the serial buffer
        if (input >= 0 && input <= 180) {
            motor_Servomotor_PWMSignal_PIN_D3_rawData = input;  // Update the raw data with the received value
        }
    }
    updateOutputs(); // Refresh output data
}

void updateOutputs()
{
    myservo.write(motor_Servomotor_PWMSignal_PIN_D3_rawData);  // Write the raw data to the servo
    delay(15);  // Small delay to allow the servo to move
}

/* END CODE */"
LXVwxnXG,Untitled,pochti_da,C++,Thursday 20th of June 2024 12:41:00 PM CDT,"#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <unordered_map>
#include <memory>

namespace
{

struct PhoneNumberTemplate
{
    std::string numberTemplate;
    std::string countryName;
    std::string operatorName;

    size_t freeNumbersSize;
};

class PhoneTemplateStorage
{
public:
    void AddTemplate(const PhoneNumberTemplate &numberTemplate)
    {
        std::string prefix;

        const auto& number = numberTemplate.numberTemplate;
        for (size_t i = 0; i < number.size(); ++i)
        {
            if (std::isdigit(number[i]))
                prefix += number[i];
        }

        storage[prefix][numberTemplate.freeNumbersSize] = numberTemplate;
    }

    const PhoneNumberTemplate & GetTemplate(const std::string &number) const
    {
        std::string prefix;
        size_t freeLength = number.size();
        
        for (size_t i = 0; i < number.size(); ++i)
        {
            prefix += number[i];
            freeLength--;

            if (auto prefixIt = storage.find(prefix); prefixIt != storage.end())
                if (auto templateIt = prefixIt->second.find(freeLength); templateIt != prefixIt->second.end())
                    return templateIt->second;
        }

        throw std::out_of_range(""no corresponding template exists"");
    }

private:
    std::unordered_map<
        std::string,
        std::unordered_map<
            size_t, 
            PhoneNumberTemplate
        >
    > storage;
};
    
}

class PhoneNumberDatabase
{
public:
    void AddTemplate(const std::string &numberTemplate)
    {
        PhoneNumberTemplate newTemplate;

        std::stringstream ss;
        ss << numberTemplate;

        std::string word;
        
        ss >> word;
        newTemplate.numberTemplate += word + "" "";

        ss >> word;
        newTemplate.numberTemplate += word + "" "";

        ss >> word;
        size_t length = 0;
        while (length < word.size() && std::isdigit(word[length]))
            length++;

        newTemplate.numberTemplate += word.substr(0, length);
        newTemplate.freeNumbersSize = word.size() - length;

        ss >> word; // '-' symbol

        ss >> word;
        newTemplate.countryName = word;

        ss >> word;
        newTemplate.operatorName = word;

        storage.AddTemplate(newTemplate);
    }

    std::string Format(const std::string &number) const
    {
        std::string numberDigits;
        for (size_t i = 0; i < number.size(); ++i)
            if (std::isdigit(number[i]))
                numberDigits += number[i];
        
        auto numberTemplate = storage.GetTemplate(numberDigits);

        std::stringstream result;

        result << numberTemplate.numberTemplate;
        result << numberDigits.substr(
            numberDigits.size() - numberTemplate.freeNumbersSize, 
            numberTemplate.freeNumbersSize
        );
        result << "" - "" << numberTemplate.countryName;
        result << "" "" << numberTemplate.operatorName;

        return result.str();
    }

private:
    PhoneTemplateStorage storage;
};"
1HzqYn3D,Untitled,pochti_da,C++,Thursday 20th of June 2024 12:38:43 PM CDT,"#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <unordered_map>
#include <memory>

namespace
{

struct PhoneNumberTemplate
{
    std::string numberTemplate;
    std::string countryName;
    std::string operatorName;

    size_t freeNumbersSize;
};

class PhoneTemplateStorage
{
public:
    void AddTemplate(const PhoneNumberTemplate &numberTemplate)
    {
        std::string prefix;

        const auto& number = numberTemplate.numberTemplate;
        for (size_t i = 0; i < number.size(); ++i)
        {
            if (std::isdigit(number[i]))
                prefix += number[i];
        }

        storage[prefix][numberTemplate.freeNumbersSize] = numberTemplate;
    }

    PhoneNumberTemplate GetTemplate(const std::string &number) const
    {
        std::string prefix;
        size_t freeLength = number.size();
        for (size_t i = 0; i < number.size(); ++i)
        {
            prefix += number[i];
            freeLength--;

            if (auto prefixIt = storage.find(prefix); prefixIt != storage.end())
                if (auto templateIt = prefixIt->second.find(freeLength); templateIt != prefixIt->second.end())
                    return templateIt->second;
        }

        throw std::out_of_range(""no corresponding template exists"");
    }

private:
    std::unordered_map<
        std::string,
        std::unordered_map<
            size_t, 
            PhoneNumberTemplate
        >
    > storage;
};
    
}

class PhoneNumberDatabase
{
public:
    void AddTemplate(const std::string &numberTemplate)
    {
        PhoneNumberTemplate newTemplate;

        std::stringstream ss;
        ss << numberTemplate;

        std::string word;
        
        ss >> word;
        newTemplate.numberTemplate += word + "" "";

        ss >> word;
        newTemplate.numberTemplate += word + "" "";

        ss >> word;
        size_t length = 0;
        while (length < word.size() && std::isdigit(word[length]))
            length++;

        newTemplate.numberTemplate += word.substr(0, length);
        newTemplate.freeNumbersSize = word.size() - length;

        ss >> word; // '-' symbol

        ss >> word;
        newTemplate.countryName = word;

        ss >> word;
        newTemplate.operatorName = word;

        storage.AddTemplate(newTemplate);
    }

    std::string Format(const std::string &number) const
    {
        std::string numberDigits;
        for (size_t i = 0; i < number.size(); ++i)
            if (std::isdigit(number[i]))
                numberDigits += number[i];
        
        const auto numberTemplate = storage.GetTemplate(numberDigits);

        std::stringstream result;

        result << numberTemplate.numberTemplate;
        result << numberDigits.substr(
            numberDigits.size() - numberTemplate.freeNumbersSize, 
            numberTemplate.freeNumbersSize
        );
        result << "" - "" << numberTemplate.countryName;
        result << "" "" << numberTemplate.operatorName;

        return result.str();
    }

private:
    PhoneTemplateStorage storage;
};"
Rt4iWu6S,Untitled,CitrusRain,GDScript,Thursday 20th of June 2024 12:36:31 PM CDT,"extends CharacterBody3D

@export var max_speed = 50.0
@export var acceleration = 0.6
@export var pitch_speed = 1.5
@export var roll_speed = 1.9
@export var yaw_speed = 0.75
@export var input_response = 8.0
@export var default_speed = 25.0

var forward_speed = 0.0
var pitch_input = 0.0
var roll_input = 0.0
var roll_reset = true
var yaw_input = 0.0
var original_basis

func _ready():
	original_basis = transform.basis

func get_input(delta):
	if Input.is_action_pressed(""throttle_up""):
		forward_speed = lerp(forward_speed, max_speed, acceleration * delta)
	else:
		forward_speed = lerp(forward_speed, default_speed, acceleration * delta)
	
	pitch_input = lerp(pitch_input, Input.get_action_strength(""control_down"")  - Input.get_action_strength(""control_up""), input_response * delta)
	roll_input  = lerp(roll_input, Input.get_action_strength(""control_left"") - Input.get_action_strength(""control_right""), input_response * delta)
	yaw_input = roll_input
	#yaw_input   = lerp(yaw_input, Input.get_action_strength(""control_left"") - Input.get_action_strength(""control_right""), input_response * delta)
	if Input.is_action_pressed(""control_left"") or Input.is_action_pressed(""control_right"") :
		roll_reset = false
	else:
		roll_reset = true
	print(yaw_input)


func _physics_process(delta):
	get_input(delta)
	#print(transform.basis)
	if roll_reset:
		transform.basis = transform.basis.rotated(-transform.basis.z * 2, roll_input * roll_speed * delta)
	else:
		transform.basis = transform.basis.rotated(transform.basis.z, roll_input * roll_speed * delta)
	transform.basis = transform.basis.rotated(transform.basis.x, pitch_input * pitch_speed * delta)
	transform.basis = transform.basis.rotated(transform.basis.y, yaw_input * yaw_speed * delta)
	transform.basis = transform.basis.orthonormalized()
	
	velocity =  -transform.basis.z * forward_speed
	move_and_collide(velocity * delta)
"
jBLBAeYz,very good VK last orezane #,max2201111,Python,Thursday 20th of June 2024 11:58:26 AM CDT,"# Navod na pouziti, Mgr. Hynek Mlčoušek, v Brne 2.5.2024
# Ulozte do lokalniho souboru u sebe na PC data tohoto tvaru vzdy ukoncene 0 ci 1 (jde o uceni s ucitelem: 1 = nemocny, 0 = prezil/zdravy, ve vystupu bude zelena znacit 0, cervena 1)  a bez znaku #; pozor na "",""

# [ [23.657800719276743,18.859916797201468,0],
# [22.573729142097473,17.96922325097786,0],
# [32.55342396968757,29.463651408558803,0],
# [6.718035041529263,25.704665468161718,1],
# [14.401918566243225,16.770856492924658,0],
# [17.457907312962234,21.76521470574044,0],
# [20.02796946568093,73.45445954770891,1],
# [30.295138369778076,62.901112886193246,1],
# [15.128977804449633,32.40267702110393,0],
# [30.179457395820013,58.982492125646104,1],
# [28.01649701854089,63.92781357637711,1],
# [16.791838457871147,42.33482314089884,0],
# [10.583694293380976,19.61926728942497,0],
# [26.634447074406467,91.96624817360987,1],
# [26.217868623367643,36.400293587062976,0],
# [17.689396788624936,60.79797114006423,1],
# [33.17193822527976,66.75277364959176,1],
# [23.793952755709153,22.57501437360518,0]]

# kliknete na cerne tlacitko s trojuhelnickem vlevo nahore
# pod kodem se objevi moznost spustit dialogove okenko, kliknete na nej
# soubor, ktery mate z bodu vyse vyberte a nahrajte
# Najdete v tomto kodu retezec:
### ZDE VLOZTE DATA OD NOVYCH PACIENTU

# Vlozte do pole
# new_persons_results = []
# data o nekolika malo novych pacientech bez ukoncovaci 0 a 1, ale se stejnym poctem sloupcu jako ma soubor z Vaseho lokalniho disku, vyse by tedy toto bylo rovno 2
# kod vyhodi hned po natrenovani, (jehoz prubeh muzete sledovat na modre progres bare) pro kazdy radek z new_persons_results bilo-sedo-cerne ctverecky vznikle z normalizace poskytnutych dat a ukoncovaci ctverecek cerveny pripadne zeleny
# zaroven s tim se vypise realne cislo mezi 0 a 1 znacici jak moc je pacient zdravy (blizke 0) ci nemocny (blizke 1)
# cisla uprostred pak indikuji zadany oranzovy semafor.
# je na lekarich nastavit tresholdy (tedy pravdepodobnosti: cisla mezi 0 a 1) ktere pak daji zaver, zda je pacient cerveny, oranzovy ci zeleny

# prosim o komnetare a vysledky na realnych datech, je zadouci aby radku v matici, tedy pacientu byly stovky a sloupcu desitky
# Moznosti vyuziti: onkologicka diagnoza vs. zdrava kontorlni skupina, diabetes (pritomnost/nepritomnost), testovani noveho leku oproti placebu atd.

# kod zaroven vyhodi confusion matici, tedy mozne True Negative a False Positive plus spravne zarazene hodnoty spolu s presnosti,F1 score recall atd.
# poznamka ke kodu: jde o epxerimentalni verzi, ktera krome skutecne potrebneho kodu obsahuje ladici informace, ruzne duplicity, nadbytecne prikazy atd.
# Na uvod behu programu se pro kontorlu vypise poskytnuta matice a jeji normalizovana verze, je treba sjet jezdcem napravo nize na obrazky a dalsi vystupy

# Dekuji profesoru Petru Dostalovi za namet k teto praci a poskytnuta data, byt je potreba mit data realna

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm import tqdm
from sklearn.preprocessing import StandardScaler

from IPython.display import display
from IPython.display import Javascript
display(Javascript('IPython.OutputArea.auto_scroll_threshold = 9999;'))

label_colors = {0: [0, 128, 0], 1: [255, 0, 0]}
label_colors_testing = {0: [0, 128, 0], 1: [255, 0, 0]}

%matplotlib inline

# Function to create images based on predictions
def create_image(data, predictions):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Create a gradient based on the normalized values
        gradient_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
        image[i, -1] = np.array([gradient_value] * 3)

    return image

def create_image(data, predictions, label_colors):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Use the specified color for the last column based on the label
        image[i, -1] = label_colors[predictions[i]]

    return image

def create_imageN(data, predictions, label_colors=None):
    num_training_rows = len(data)  # Set the number of rows based on the data
    num_columns = len(data[0])

    image_training = np.zeros((num_training_rows, num_columns + 1, 3), dtype=np.uint8)

    min_pixel_value = np.min(X_train_normalized)
    max_pixel_value = np.max(X_train_normalized)

    for i in range(num_training_rows):
        # Normalize the first columns independently
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
            image_training[i, j] = np.array([pixel_value] * 3)

        # Normalize the last column separately to achieve grayscale
        pixel_value_last = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
        image_training[i, -1] = np.array([pixel_value_last] * 3)

        # Use the specified color for the last column based on the label
        if label_colors is not None:
            image_training[i, -1] = label_colors[predictions[i]]

    return image_training

# Load data from a file
from google.colab import files
import io
import pandas as pd
import os
import shutil
import ast

uploaded = files.upload()

# Tento kód otevře dialogové okno pro výběr souboru z vašeho počítače.
# Předpokládáme, že jste nahráli CSV soubor
for fn in uploaded.keys():
    print('User uploaded file ""{name}"" with length {length} bytes'.format(
        name=fn, length=len(uploaded[fn])))
    path = io.BytesIO(uploaded[fn])  # Pro soubory, které potřebují být čteny jako binární objekty
    df = pd.read_csv(path)
    print(df.head())  # Vypíše prvních pět řádků DataFrame

all_results = []

for filename in uploaded.keys():
    original_path = f""/content/{filename}""
    destination_path = os.path.join(""/content/"", ""/content/DATA2"")
    shutil.move(original_path, destination_path)
    print(f""Soubor {filename} byl přesunut do {destination_path}"")

file_path = '/content/DATA2'  # Cesta k souboru
with open(file_path, 'r') as file:
    code = file.read()

A_list = ast.literal_eval(code)

# Převod na NumPy pole
A = np.array(A_list)

# Assign values to variables dynamically based on the rows of matrix A
for i, row in enumerate(A, start=1):
    globals()[f""person{i}_results""] = list(row)

# Print the assigned variables
for i in range(1, len(A) + 1):
    all_results.append(f""person{i}_results"")

result_variables = []

# Loop through the variable names and get the corresponding variables using globals()
for var_name in all_results:
    result_variables.append(globals()[var_name])

# Now, result_variables contains the variables with names specified in variable_names
all_results = result_variables
new_persons_results = result_variables

# Extract the last column (0 or 1) as labels
labels = [results[-1] for results in all_results]

# Remove the last column from the dataset
data = [results[:-1] for results in all_results]

# Define the number of rows for training and testing
num_training_rows = 50
num_testing_rows = 50

# Split the data into training and testing datasets
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

# Normalize the data using StandardScaler
scaler = StandardScaler()
X_train_normalized = scaler.fit_transform(X_train)

# Print normalized training data
print(""Normalized Training Data:"")
print(X_train_normalized)
print(""Adenormalized (Z-score):"", X_train_normalized * scaler.scale_ + scaler.mean_, ""Bdenormalized"")

# Define a simple neural network model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(len(X_train[0]),)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Lists to store accuracy values
accuracy_history = []

# Create images for the training data
image_training = np.zeros((num_training_rows, len(X_train[0]) + 1, 3), dtype=np.uint8)

min_pixel_value = np.min(X_train_normalized)
max_pixel_value = np.max(X_train_normalized)

# Populate image_training with consistent gray and red/green colors based on the labels in the last column
for i, label in enumerate(y_train):
    for j in range(len(X_train[0])):
        pixel_value = int(np.interp(X_train_normalized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
        image_training[i, j] = np.array([pixel_value] * 3)
    image_training[i, -1] = np.array([128, 128, 128])
    if label == 0:
        image_training[i, -1] = np.array([0, 128, 0])
    elif label == 1:
        image_training[i, -1] = np.array([255, 0, 0])

from tqdm.notebook import tqdm_notebook

# Train the model for 400 epochs
epochs = 1397

new_persons_results = [
    [0.030391238492519845, 0.23021081913032299, 0.4743575198860915, 0.639395348276238],
    [0.19790381537769108, 0.37639843860181527, 0.5676528538456297, 0.716530820399044],
    [0.0035245462826666075, 0.23127629815305784, 0.4802171123709532, 0.6591272725083992],
    [0.059230621364548486, 0.24424510845680134, 0.442553808602372, 0.6891856336835676],
    [0.05536813173866345, 0.2538888869331579, 0.47861285542743165, 0.6200559751500355],
    [0.1300359168058454, 0.38443677757577344, 0.5957238735056223, 0.795823160451845],
    [0.1743368240338569, 0.3713129035302336, 0.5640350202165867, 0.7213527928848786],
    [0.09173335232875372, 0.2559096689549753, 0.49527436563146954, 0.6970388573439903],
    [0.015235204378572087, 0.2284904031445293, 0.46613902406934005, 0.6917336579549159],
    [0.0011416656054787145, 0.24567669307188245, 0.4388400949432476, 0.667323193441009],
    [0.06448448763849592, 0.2115323519931734, 0.43540989127902197, 0.6438994375658477],
    [0.1281083326647467, 0.319011666415554, 0.5081581898266203, 0.7238539046118706],
    [0.031400839963864634, 0.291826671945583, 0.44935681772218605, 0.6775565554946026],
    [0.06087306495870359, 0.23991257024083634, 0.4485025638007111, 0.680857926545652],
    [0.16944969856928027, 0.3433985701275623, 0.5739960718239413, 0.7587431345359652],
    [0.005679255126553562, 0.2703897890888177, 0.47083369294815347, 0.629981449029764],
    [0.1361411186548812, 0.3699350229482504, 0.5880045061520169, 0.709568518897945],
    [0.07538207440920129, 0.20062324901664458, 0.40581823748211543, 0.6337591072862666],
    [0.017969960867618918, 0.21435679119605028, 0.4881930298975361, 0.668393388428822],
    [0.08565125103289023, 0.29383944243424687, 0.4732898824502158, 0.6500725888934386],
    [0.08477898050514117, 0.21919257927575692, 0.49117946288913483, 0.6532321710710468],
    [0.18637585263771708, 0.30107373793178105, 0.5235238878093704, 0.7912391738401261],
]

import sys

for epoch in tqdm_notebook(range(epochs)):
    history = model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    accuracy_history.append(history.history['accuracy'][0])

    if epoch == 1:
        # Normalize the testing data
        X_test_normalized = scaler.transform(X_test)
        y_pred_after_2nd_epoch = model.predict(X_test_normalized)
        y_pred_binary_after_2nd_epoch = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch]
        image_testing_before_2nd_epoch = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch, label_colors_testing)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=1):
            # Ensure that personNEW_results has the same number of features as the model expects
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""

            personNEW_results_normalized = scaler.transform([personNEW_results])

            personNEW_prediction = model.predict(np.array([personNEW_results_normalized]))
            personNEW_label = 1 if personNEW_prediction >= 0.5 else 0
            y_pred_after_50_epochs = model.predict(X_test_normalized)
            y_pred_binary_after_50_epochs = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs]
            image_testing_after_50_epochs = create_image(X_test_normalized, y_pred_binary_after_50_epochs, label_colors_testing)

            # Create an image for the new person
            image_personNEW = create_imageN([personNEW_results_normalized[0]], [personNEW_label], label_colors)

            # Display the images
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW)
            plt.title(f""New Person {idx}\nLabel: {personNEW_label}, Prediction: {personNEW_prediction}"")
            plt.axis(""off"")
            plt.show()

# Display the images
plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch)
plt.title(""Testing Data (2nd Epoch)"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs)
plt.title(f""Testing Data ({epochs} Epochs)"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW)
plt.title(f""New Person\nLabel: {personNEW_label},[{personNEW_prediction}]"")
plt.axis(""off"")

# Plot accuracy history
plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), accuracy_history, marker='o')
plt.title('Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

# Print normalized data
print(""Normalized PersonNEW Data:"")
print(personNEW_results_normalized)

plt.show()

print(""X_train before normalization:"")
print(X_train)
print(""X_test before normalization:"")
print(X_test)

import seaborn as sns

from sklearn.metrics import confusion_matrix
from tensorflow.keras.utils import to_categorical

np.set_printoptions(threshold=np.inf, precision=4, suppress=True)

# Train the model
print(""Training Start"")
for epoch in tqdm_notebook(range(1000), desc=""Training Progress""):
    model.fit(np.array(X_train_normalized), np.array(y_train), epochs=1, verbose=0)
print(""Training Complete"")

# Generate predictions from the model
predictions = (model.predict(X_test_normalized) > 0.5).astype(int)

# Convert y_test to a numpy array and then to binary labels
y_test_array = np.array(y_test)  # Convert y_test to a numpy array
y_test_binary = (y_test_array > 0.5).astype(int)  # Convert to binary

# Compute the confusion matrix
conf_matrix = confusion_matrix(y_test_binary, predictions)

# Evaluate the model's performance
accuracy = accuracy_score(y_test_binary, predictions)
precision = precision_score(y_test_binary, predictions)
recall = recall_score(y_test_binary, predictions)
f1 = f1_score(y_test_binary, predictions)

# Display the confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

print(f""Accuracy: {accuracy:.4f}"")
print(f""Precision: {precision:.4f}"")
print(f""Recall: {recall:.4f}"")
print(f""F1 Score: {f1:.4f}"")

print(f""Confusion Matrix:\n{conf_matrix}"")"
Aw4Q6YnR,GCD LCM,LEGEND2004,C++,Thursday 20th of June 2024 10:57:24 AM CDT,"#pragma GCC optimize(""O3"")
#include <bits/stdc++.h>
#include <numeric>
using namespace std;

#define int long long
#define double long double
#define endl '\n'
#define fastio ios_base::sync_with_stdio(0); cin.tie(0)


int gcd(int a , int b){
    if(b == 0)
        return a;
    return gcd(b , a % b);
}


int lcm(int a , int b){
    return a / gcd(a , b) * b;
}

signed main()
{
    fastio;
    /*
    GCD(24 , 18) = 6
    LCM(24 , 18) = 72

    24 = 2 * 2 * 2 * 3
    18 = 2 * 3 * 3

    GCD(24 , 18) = GCD(18 , 6) = GCD(12 , 6) = GCD(6 , 6) = GCD(0 , 6)
    10 - 3 = 7 - 3 = 4 - 3 = 1

    GCD(a , b) = GCD(b , a % b)

    GCD(24 , 18) = GCD(18 , 6) = GCD(6 , 0)
    */

    int a , b;
    cin >> a >> b;
    cout << __gcd(a , b) << "" "" << lcm(a , b);


}
"
