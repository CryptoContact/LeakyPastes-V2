id,title,username,language,date,content
0WeyGnSF,Computer Room,Spocoman,C++,Sunday 17th of September 2023 06:41:52 AM CDT,"#include <iostream>

using namespace std;

int main() {
    string month;
    cin >> month;

    int hours, personCount;
    cin >> hours >> personCount;

    string timeOfDay;
    cin >> timeOfDay;

    double personPrice = 0;

    if (month == ""march"" || month == ""april"" || month == ""may"") {
        if (timeOfDay == ""day"") {
            personPrice = 10.50;
        }
        else {
            personPrice = 8.40;
        }
    }
    else if (month == ""june"" || month == ""july"" || month == ""august"") {
        if (timeOfDay == ""day"") {
            personPrice = 12.60;
        }
        else {
            personPrice = 10.20;
        }
    }

    if (personCount >= 4) {
        personPrice *= 0.9;
    }

    if (hours >= 5) {
        personPrice /= 2;
    }

    double total = personPrice * personCount * hours;

    cout.setf(ios::fixed);
    cout.precision(2);

    cout << ""Price per person for one hour: "" << personPrice << endl;
    cout << ""Total cost of the visit: "" << total << endl;

    return 0;
}

Решение с тернарен оператор и printf():

#include <iostream>
#include <string>

using namespace std;

int main() {
    string month;
    cin >> month;

    int hours, personCount;
    cin >> hours >> personCount;

    string timeOfDay;
    cin >> timeOfDay;

    double personPrice =
        month == ""march"" || month == ""april"" || month == ""may"" ? (timeOfDay == ""day"" ? 10.50 : 8.40) :
        month == ""june"" || month == ""july"" || month == ""august"" ? (timeOfDay == ""day"" ? 12.60 : 10.20) : 0;

    if (personCount >= 4) {
        personPrice *= 0.9;
    }

    if (hours >= 5) {
        personPrice /= 2;
    }

    double total = personPrice * personCount * hours;

    printf(""Price per person for one hour: %.2f\nTotal cost of the visit: %.2f\n"", personPrice, total);

    return 0;
}"
tb7rFVvp,Hackers R faggots,coinwalk,JavaScript,Sunday 17th of September 2023 06:37:05 AM CDT,"var measly = parseFloat(document.getElementById('pct_balance').value);
var baby = Number((0.0001).toFixed(8));
var moon = baby;
var taget = 15000;
var tens = (baby*10);
var sevens = (baby*6.5);
var eights = (baby*7.5);
var threes = (baby*3.5);
var nobbolance = 0;
var couunt = 0;
var baboon = false;
var high = measly;  
var olzerer = ((Math.floor(measly/tens))*tens);
var muel = parseFloat(document.getElementById('pct_balance').value);
var zuel = parseFloat(document.getElementById('pct_balance').value);
var bart = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
 
function get(){
var look = (((zuel+moon)*1).toFixed(8));
var mean = (((zuel-moon)*1).toFixed(8));
muel = parseFloat(document.getElementById('pct_balance').value);
if ((look!=muel)&&(mean!=muel)&&(zuel!=muel)){
console.log(""hacked"");
return;
}else{
zuel = parseFloat(document.getElementById('pct_balance').value);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel>nobbolance)&&(zuel<olzerer)) {
    moon = Number((moon*2).toFixed(8));
    couunt = couunt+1;
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel<nobbolance)&&(zuel<olzerer)) {
    moon = Number((moon*2).toFixed(8));
    couunt = couunt+1;
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel>nobbolance)&&(zuel>=olzerer)) {
    moon = Number((moon*2).toFixed(8));
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel<nobbolance)&&(zuel>=olzerer)) {
    moon = Number((moon*2).toFixed(8));
    nobbolance = parseFloat(zuel);
}
if ((couunt>=2)&&(zuel<(((Math.floor(zuel/tens))*tens)+threes))){
    moon = baby;
    couunt = 0;
    nobbolance = parseFloat(zuel);
}
if ((zuel>=(olzerer+(tens*4)))&&(zuel<(((Math.floor(zuel/tens))*tens)+sevens))){
    moon = baby;
    couunt = 0;
    nobbolance = 0;
    olzerer = parseFloat(zuel); 
}
    if (zuel >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }     
    lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
     if ((lisa > bart)&&(baboon)) {
var funeral = Number((muel - measly).toFixed(8));
console.log(""profit"");
console.log(funeral); 
      baboon = false; 
       bart = parseFloat(lisa);
    }
    if ((lisa == bart)&&(!baboon)) { 
        baboon = true; 
        $('#pct_chance').val(49.5);
        $('#pct_bet').val(((moon*1).toFixed(8)));
        $('#a_lo').click();
    }
    setTimeout(() => get(), 1);
}
get();
"
bLsGj3Fd,Copy Places for roblox,01KIkoSK,HTML,Sunday 17th of September 2023 06:24:57 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
  <title>Roblox Place Copy Script</title>
</head>
<body>
  <script>
    // Import the Roblox API
    const robloxApi = require(""roblox-api"");

    // Get the place ID
    const placeId = prompt(""Enter the place ID:"");

    // Get the place data
    const placeData = robloxApi.getPlaceData(placeId);

    // Copy the place data
    const placeCopied = JSON.stringify(placeData);

    // Save the place data
    const fs = require(""fs"");
    fs.writeFile(""place.json"", placeCopied, (err) => {
      if (err) {
        console.log(""Error copying place: "" + err);
      } else {
        console.log(""Place successfully copied!"");
      }
    });
  </script>
</body>
</html>
"
hxD7034D,Computer Firm,Spocoman,C++,Sunday 17th of September 2023 06:09:22 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    int modelCount, model, rating, sales;
    cin >> modelCount;

    double totalSales = 0, totalRating = 0;

    for (int i = 0; i < modelCount; i++) {
        cin >> model;

        rating = model % 10;
        sales = model / 10;

        totalRating += rating;

        totalSales +=
            (rating == 2 ? 0 :
                rating == 3 ? 0.5 :
                rating == 4 ? 0.7 :
                rating == 5 ? 0.85 : 1) * sales;
    }

    printf(""%.2f\n%.2f\n"", totalSales, totalRating / modelCount);

    return 0;
}"
TViKB7hW,PB.lua,ozozx235,Lua,Sunday 17th of September 2023 06:05:06 AM CDT,"local function printUsage()
    local programName = arg[0] or fs.getName(shell.getRunningProgram())
    print(""Usages:"")
    print(programName .. "" logout"")
    print(programName .. "" put <filename>"")
    print(programName .. "" get <code> <filename>"")
    print(programName .. "" run <code> <arguments>"")
    print(programName .. "" login"")
    print(programName .. "" list </search term>"")
    print(programName .. "" uget <name> </filename>"")
end

local tArgs = { ... }
if #tArgs < 1 then
    printUsage()
    return
end

if not http then
    printError(""Pastebin requires the http API"")
    printError(""Set http.enabled to true in CC: Tweaked's config"")
    return
end

--- Attempts to guess the pastebin ID from the given code or URL
local function extractId(paste)
    local patterns = {
        ""^([%a%d]+)$"",
        ""^https?://pastebin.com/([%a%d]+)$"",
        ""^pastebin.com/([%a%d]+)$"",
        ""^https?://pastebin.com/raw/([%a%d]+)$"",
        ""^pastebin.com/raw/([%a%d]+)$"",
    }

    for i = 1, #patterns do
        local code = paste:match(patterns[i])
        if code then return code end
    end

    return nil
end

local function get(url)
    local paste = extractId(url)
    if not paste then
        io.stderr:write(""Invalid pastebin code.\n"")
        io.write(""The code is the ID at the end of the pastebin.com URL.\n"")
        return
    end

    write(""Connecting to pastebin.com... "")
    -- Add a cache buster so that spam protection is re-checked
    local cacheBuster = (""%x""):format(math.random(0, 2 ^ 30))
    local response, err = http.get(
        ""https://pastebin.com/raw/"" .. textutils.urlEncode(paste) .. ""?cb="" .. cacheBuster
    )

    if response then
        -- If spam protection is activated, we get redirected to /paste with Content-Type: text/html
        local headers = response.getResponseHeaders()
        if not headers[""Content-Type""] or not headers[""Content-Type""]:find(""^text/plain"") then
            io.stderr:write(""Failed.\n"")
            print(""Pastebin blocked the download due to spam protection. Please complete the captcha in a web browser: https://pastebin.com/"" .. textutils.urlEncode(paste))
            return
        end

        print(""Success."")

        local sResponse = response.readAll()
        response.close()
        return sResponse
    else
        io.stderr:write(""Failed.\n"")
        print(err)
    end
end

local function logout()
    fs.delete(""uKey.auth"")
end

local function login(devkey)
    user=""""
    pass=""""
    io.stdout:write(""Enter username: "")
    user = read()
    --term.setCursorBlink(false)
    io.stdout:write(""Enter password: "")
    pass = read("""")
    --term.setCursorBlink(true)
    --read user details through keyboard
    file=fs.open(""uKey.auth"",""w"")
    page, err=http.post(
    ""https://pastebin.com/api/api_login.php"",
    ""api_dev_key=""..devkey..""&""..
    ""api_user_name=""..user..""&""..
    ""api_user_password=""..pass)
    --#queries site for key using devkey, name and pass
    --print(page)
    if err then
        printError(err)
    end
    file.write(page.readAll())
    file.close()
end
local function list(devkey,searterm,flg)
    fUser=fs.open(""uKey.auth"",""r"")
    ukey = fUser.readLine()
    fUser.close()
    page, err=http.post(
    ""https://pastebin.com/api/api_post.php"",
    ""api_dev_key=""..devkey..""&""..
    ""api_user_key=""..ukey..""&""..
    ""api_option=list&""..
    ""api_results_limit=1000"")
    --print(page)
    if err then
        printError(err)
    end
    fPage = fs.open(""pbList.tmp"",""w"")
    fPage.write(page.readAll())
    fPage.close()
    if flg==0 then
        fPage = fs.open(""pbList.txt"",""w"")
    else
        fPage = fs.open(""pbUGet.tmp"",""w"")
    end
    sauce=""pbList.tmp""
    --if #tArgs == 2 then
    if searterm ~= """" then
        fFilter=fs.open(""pbFilter.tmp"",""w"")
        --searterm = tArgs[2]
        tmpaste = """"
        for line in io.lines(sauce) do
            if string.find(line,""<paste_key>"") then
                tmpaste = line
            end
            if string.find(line,""<paste_title>"") and string.find(line,searterm) then
                fFilter.writeLine(tmpaste)
                fFilter.writeLine(line)
            end
        end
        fFilter.close()
        sauce=""pbFilter.tmp""
    end
    for line in io.lines(sauce) do
        if string.find(line,""<paste_key>"") then
            line=string.gsub(line,""<paste_key>"","""")
            line=string.gsub(line,""</paste_key>"","""")
            if flg==0 then
                io.stdout:write(line.."" "")
            end
            fPage.write(line.."" "")
        end
        if string.find(line,""<paste_title>"") then
            line=string.gsub(line,""<paste_title>"","""")
            line=string.gsub(line,""</paste_title>"","""")
            if flg==0 then
                printError(line)
            end
            fPage.writeLine(line)
        end
    end
    --if #tArgs == 2 then
    if searterm~="""" then
        fs.delete(""pbFilter.tmp"")
    end
    fs.delete(""pbList.tmp"")
    fPage.close()
end
key=""eUXuCLWHr7T5d9FQmnqj5hMEQ0hyQCoN""
local sCommand = tArgs[1]
if sCommand == ""logout"" then
    logout()
elseif sCommand == ""put"" then
    -- Upload a file to pastebin.com
    -- Determine file to upload
    local sFile = tArgs[2]
    local sPath = shell.resolve(sFile)
    if not fs.exists(sPath) or fs.isDir(sPath) then
        print(""No such file"")
        return
    end

    -- Read in the file
    local sName = fs.getName(sPath)
    local file = fs.open(sPath, ""r"")
    local sText = file.readAll()
    local ukey = """"
    file.close()
    --Read user key
    if fs.exists(""UKey.auth"") then
        file = fs.open(""UKey.auth"",""r"")
        ukey=file.readLine()
        --print(ukey)
        file.close()
    end
    -- POST the contents to pastebin
    write(""Connecting to pastebin.com... "")
    local response = http.post(
        ""https://pastebin.com/api/api_post.php"",
        ""api_option=paste&"" ..
        ""api_dev_key="" .. key .. ""&"" ..
        ""api_user_key=""..ukey..""&""..
        ""api_paste_format=lua&"" ..
        ""api_paste_name="" .. textutils.urlEncode(sName) .. ""&"" ..
        ""api_paste_code="" .. textutils.urlEncode(sText)
    )

    if response then
        print(""Success."")

        local sResponse = response.readAll()
        response.close()

        local sCode = string.match(sResponse, ""[^/]+$"")
        print(""Uploaded as "" .. sResponse)
        print(""Run \""pastebin get "" .. sCode .. ""\"" to download anywhere"")

    else
        print(""Failed."")
    end

elseif sCommand == ""get"" then
    -- Download a file from pastebin.com
    if #tArgs < 3 then
        printUsage()
        return
    end

    -- Determine file to download
    local sCode = tArgs[2]
    local sFile = tArgs[3]
    local sPath = shell.resolve(sFile)
    if fs.exists(sPath) then
        print(""File already exists"")
        return
    end

    -- GET the contents from pastebin
    local res = get(sCode)
    if res then
        local file = fs.open(sPath, ""w"")
        file.write(res)
        file.close()

        print(""Downloaded as "" .. sFile)
    end
elseif sCommand == ""run"" then
    local sCode = tArgs[2]

    local res = get(sCode)
    if res then
        local func, err = load(res, sCode, ""t"", _ENV)
        if not func then
            printError(err)
            return
        end
        local success, msg = pcall(func, select(3, ...))
        if not success then
            printError(msg)
        end
    end
elseif sCommand == ""login"" then
    login(key)
elseif sCommand == ""list"" then
    if #tArgs == 2 then
        list(key,tArgs[2])
    elseif #tArgs == 1 then
        list(key,"""",0)
    end
elseif sCommand == ""uget"" then
    if #tArgs < 2 then
        printUsage()
        return
    end
    list(key,tArgs[2])
    i=0
    for line in io.lines(""pbUGet.tmp"") do
        i=i+1
    end
    if i==0 then
        printError(""result not found"")
    elseif i>1 then
        printError(""not specific enough"")
    else
        prg= arg[0] or fs.getName(shell.getRunningProgram())
        code, name = """"
        for line in io.lines(""pbUGet.tmp"") do
            code, name = string.match(line,""(%w+)(.+)"")
        end
        if #tArgs <3 then
        shell.run(prg.."" get ""..code.."" ""..name)
        else
        shell.run(prg.."" get ""..code.."" ""..tArgs[3])
        end
    end
else
    printUsage()
    return
end"
LxsyYENm,Untitled,35657,C++,Sunday 17th of September 2023 06:01:57 AM CDT,"#define _CRT_SEQURE_NO_WARNINGS

#include <iostream>

#include <Windows.h> // нужна для работы SetConsole

using namespace std;



int main() {

	SetConsoleCP(1251); // установка кодировки в поток ввода
	SetConsoleOutputCP(1251); // установка кодировки в поток вывода

	const int size = 100;

	char line[size];
	int m, n;

	cout << ""Введите строку: "";
	gets_s(line);
	cout << ""Введите m: "";
	cin >> m;
	cout << ""Введите n: "";
	cin >> n;

	char* result = new char[n - m + 2];

	int s = 0;

	for (int i = m; i <= n; i++) {
		result[s] = line[i];
		s++;
	}
	result[s] = '\0';
	cout << result << endl;
	delete[] result;
}"
yp2Z4QKL,musiclib.txt,ozozx235,Lua,Sunday 17th of September 2023 06:01:34 AM CDT,"1 13 C418 minecraft:music_disc.13
2 Cat C418 minecraft:music_disc.cat
3 Blocks C418 minecraft:music_disc.blocks
4 Chirp C418 minecraft:music_disc.chirp
5 Far C418 minecraft:music_disc.far
6 Mall C418 minecraft:music_disc.mall
7 Mellohi C418 minecraft:music_disc.mellohi
8 Stal C418 minecraft:music_disc.stal
9 Strad C418 minecraft:music_disc.strad
10 Ward C418 minecraft:music_disc.ward
11 11 C418 minecraft:music_disc.11
12 Wait C418 minecraft:music_disc.wait
13 Otherside Lena_Raine minecraft:music_disc.otherside
14 Pigstep Lena_Raine minecraft:music_disc.pigstep
15 Endure_Emptiness Kain_Vinosec botania:music.gaia1
16 Fight_For_Quiescence Kain_Vinosec botania:music.gaia2
17 Radiance Rotch_Gwylt twilightforest:music_disc.twilightforest.radiance
18 Steps Rotch_Gwylt twilightforest:music_disc.twilightforest.steps
19 Superstitious Rotch_Gwylt twilightforest:music_disc.twilightforest.superstitious
20 Home MrCompost twilightforest:music_disc.twilightforest.home
21 Wayfarer MrCompost twilightforest:music_disc.twilightforest.wayfarer
22 Findings MrCompost twilightforest:music_disc.twilightforest.findings
23 Maker MrCompost twilightforest:music_disc.twilightforest.maker
24 Thread MrCompost twilightforest:music_disc.twilightforest.thread
25 Motion MrCompost twilightforest:music_disc.twilightforest.motion
26 Bleeding_Edge Firel bloodmagic:bleedingedge"
Y3MPSANg,data698,TestGuy1,JSON,Sunday 17th of September 2023 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '9d49b3470997c7c0b59d7c252fa762b39cbab7799260a5b56c11e57b530329e6987d7df060cabbd07599021c0fe384eb1b8d87529e7b031f1b195a15e164724d25e0329147ad90d3d806018fd8daa6254904672061f174640c3665ae4c864487fb2ad68319a1f0d778778598523d438315da9c7c12be7816da7e2cbb386ff9bb',
  otherdata: [
    '40e003187b92a1985d3cb211ae4a1a2f',
    '35370e0bf5d5e1527d4be5d8bf705bdc',
    'fcc863490f0e738d0f3b81ef56bc876c',
    '0f7fd343ed1214c7e02038226debd441',
    'af64f59c3a6bacf8918f77262352afc0',
    '73174165f7ccaa4577956f1dd585cb1a',
    'ed1ef061dc41dace9f8d112198372e28',
    'abcd92d7354bb9b94ab34d48bb7c7a98'
  ]
}"
QWKKiMGQ,juke.lua,ozozx235,Lua,Sunday 17th of September 2023 06:00:02 AM CDT,"local tArgs = {...}
local speak = peripheral.find(""speaker"")
local lib = io.open(""musiclib.txt"")
local sizeX, sizeY = term.getSize()
local lines = lib:lines()
function noUS (s)
	return s:gsub(""%_"", "" "")
end
function visual (det, offs)
	term.clear()
	term.setCursorPos((sizeX/2)-3,(sizeY/2)-1)
	print(""playing"")
	term.setCursorPos(((sizeX/2)-(string.len(det[1])/2))+1,(sizeY/2))
	local swatch = {""1"",""2"",""3"",""4"",""5"",""6"",""9"",""a"",""b"",""c"",""d"",""e""}
	local front = """"
	local back = """"
	for it = 1,string.len(det[1]) do
		front = front .. """" .. swatch[(it-offs)%12+1]
		back = back .. ""f""
	end
	term.blit((noUS(det[1])),front,back)
	term.setTextColor(colors.red)
	term.setCursorPos(((sizeX/2)-(string.len(det[2])/2)-1),(sizeY/2)+1)
	print(""by "" .. (noUS(det[2])))
	term.setTextColor(colors.white)
end
if(#tArgs == 1) then
	song = tArgs[1]
	for line in lines do
		deets = {}
		i=0
		for sub in line:gmatch(""%S+"") do
			deets[i] = sub
			i=i+1
		end
		if(deets[0] == song) then
			speak.playSound(deets[3])
			ofs = 0
			visual(deets, ofs)
			sleep(1)
			while true do
				timerID = os.startTimer(0.25)
				local evdat = {os.pullEvent()}
				local ev = evdat[1]
				if ev == ""key_up"" then
					speak.stop()
					term.clear()
					term.setCursorPos(1,1)
					term.write(""song ended"")
					return
				elseif ev == ""timer"" and evdat[2] == timerID then
					ofs = ofs+1
					visual(deets,ofs)
				end
			end
		end
	end
	print(""song not found"")
end
if(#tArgs == 0) then
	term.clear()
	term.setCursorPos(1,1)
	term.setTextColor(colors.green)
	term.write(""Music Selection"")
	term.setTextColor(colors.white)
	for line in lines do
		_, pos = term.getCursorPos()
		if (pos > sizeY-2) then
			os.pullEvent(""key_up"")
		end
		print()
		deets = {}
		i=0
		for sub in line:gmatch(""%S+"") do
			deets[i] = sub
			i=i+1
		end
		term.setTextColor(colors.yellow)
		term.write((deets[0]) .. "" "")
		term.setTextColor(colors.orange)
		term.write((noUS(deets[1])))
		term.setTextColor(colors.blue)
		term.write("" -"" .. (noUS(deets[2])))
	end
	os.pullEvent(""key_up"")
	print()
end"
4UpGZ0Pz,Roblox Script Lua Car Crusher 2 Credits,01KIkoSK,Lua,Sunday 17th of September 2023 05:54:33 AM CDT,"local player = game.Players.LocalPlayer
local car = player.Character.Vehicle

function giveCredits(amount)
    local credits = player.leaderstats.Credits
    credits.Value = credits.Value + amount
end

function onLoad()
    giveCredits(1000000)
end

script.Parent.OnPlayerAdded:Connect(onLoad)
"
QEqYskJf,01KikoSK,01KIkoSK,Lua,Sunday 17th of September 2023 05:48:04 AM CDT,"local player = game.Players.LocalPlayer
local car = player.Character.Vehicle

function giveMoney(amount)
    local money = player.leaderstats.Money
    money.Value = money.Value + amount
end

function onLoad()
    giveMoney(100000)
end

script.Parent.OnPlayerAdded:Connect(onLoad)
"
x29vz6UA,Python classmethod,alaex777,Python,Sunday 17th of September 2023 05:38:40 AM CDT,"# 17.09.2023

class Example:
    @classmethod
    def do_something(cls):
        print('doing something')

'''
classmethod allows you to create methods
that can be called without creating class instance
'''

Example.do_something()  # doing something
"
rzzbucHH,Mkinitcpio.conf,D3ENNY,autoconf,Sunday 17th of September 2023 05:35:14 AM CDT,"# vim:set ft=sh
# MODULES
# The following modules are loaded before any boot hooks are
# run.  Advanced users may wish to specify all system modules
# in this array.  For instance:
#     MODULES=(usbhid xhci_hcd)
MODULES=(nvidia_modeset nvidia_uvm nvidia_drm)

# BINARIES
# This setting includes any additional binaries a given user may
# wish into the CPIO image.  This is run last, so it may be used to
# override the actual binaries included by a given hook
# BINARIES are dependency parsed, so you may safely ignore libraries
BINARIES=()

# FILES
# This setting is similar to BINARIES above, however, files are added
# as-is and are not parsed in any way.  This is useful for config files.
FILES=()

# HOOKS
# This is the most important setting in this file.  The HOOKS control the
# modules and scripts added to the image, and what happens at boot time.
# Order is important, and it is recommended that you do not change the
# order in which HOOKS are added.  Run 'mkinitcpio -H <hook name>' for
# help on a given hook.
# 'base' is _required_ unless you know precisely what you are doing.
# 'udev' is _required_ in order to automatically load modules
# 'filesystems' is _required_ unless you specify your fs modules in MODULES
# Examples:
##   This setup specifies all modules in the MODULES setting above.
##   No RAID, lvm2, or encrypted root is needed.
#    HOOKS=(base)
#
##   This setup will autodetect all modules for your system and should
##   work as a sane default
#    HOOKS=(base udev autodetect modconf block filesystems fsck)
#
##   This setup will generate a 'full' image which supports most systems.
##   No autodetection is done.
#    HOOKS=(base udev modconf block filesystems fsck)
#
##   This setup assembles a mdadm array with an encrypted root file system.
##   Note: See 'mkinitcpio -H mdadm_udev' for more information on RAID devices.
#    HOOKS=(base udev modconf keyboard keymap consolefont block mdadm_udev encrypt filesystems fsck)
#
##   This setup loads an lvm2 volume group.
#    HOOKS=(base udev modconf block lvm2 filesystems fsck)
#
##   NOTE: If you have /usr on a separate partition, you MUST include the
#    usr and fsck hooks.
HOOKS=(base udev autodetect modconf kms keyboard keymap consolefont block filesystems fsck)

# COMPRESSION
# Use this to compress the initramfs image. By default, zstd compression
# is used. Use 'cat' to create an uncompressed image.
#COMPRESSION=""zstd""
#COMPRESSION=""gzip""
#COMPRESSION=""bzip2""
#COMPRESSION=""lzma""
#COMPRESSION=""xz""
#COMPRESSION=""lzop""
#COMPRESSION=""lz4""

# COMPRESSION_OPTIONS
# Additional options for the compressor
#COMPRESSION_OPTIONS=()

# MODULES_DECOMPRESS
# Decompress kernel modules during initramfs creation.
# Enable to speedup boot process, disable to save RAM
# during early userspace. Switch (yes/no).
#MODULES_DECOMPRESS=""yes""
"
ySM4Nvkg,Untitled,35657,C++,Sunday 17th of September 2023 05:34:33 AM CDT,"#define _CRT_SEQURE_NO_WARNINGS

#include <iostream>

#include <Windows.h> // нужна для работы SetConsole

using namespace std;



int main() {

	SetConsoleCP(1251); // установка кодировки в поток ввода
	SetConsoleOutputCP(1251); // установка кодировки в поток вывода

	const int size = 100;

	char line[size];

	gets_s(line);

	int num = strlen(line) + 1;

	cout << ""Занято: "" << num << "" элементов, свободно: "" << size - num << "" элементов"" << endl;

}"
iiwbnuNK,IntroProgrammingC#ExcercisesPartTime,wingman007,C#,Sunday 17th of September 2023 05:30:05 AM CDT,"// Exercises
// I. first day
// 1. Hello World
using System.Security.Cryptography.X509Certificates;

Greet(""Ilkay"");

// 2. Variables, Primitive data Types Literals
Console.WriteLine(""Test"");
int a = 7;
int b = 3;
int speedOfLight = 0xe3; //300000;
Console.WriteLine((float)a/b);

// 3. Operators
Console.WriteLine(a*b > b*b*a || b + a < a*b);

// 4. Formatted output/ Reading from console
Console.WriteLine(""{0,10:C2}"", b);
Console.Write(""Please, enter your age: "");
string age = Console.ReadLine();
int ageDigit = int.Parse(age);
Console.WriteLine(""In 10 years you will be {0}"", ageDigit + 10);

// Console.Write(""Please, tell me how much money do you have: "");

// 5. Conditional Logic
//Console.Write(""Please enter your age: "");
//string aaa = Console.ReadLine();
//int age1 = int.Parse(Console.ReadLine());

////if (age1 >= 0 && age1 <= 3)
////{
////    Console.WriteLine(""You are a baby"");
////}

//if (age1 >= 0 && age1 <=3)
//{
//    Console.WriteLine(""You are a baby"");
//}
//else if (age1 >= 3 && age1 <= 13)
//{
//    Console.WriteLine(""You are a kid"");
//}
//else if (age1 > 13 && age1 <= 18)
//{
//    Console.WriteLine(""You are teenager!"");
//}
//else
//{
//    Console.WriteLine(""You are an aduld"");
//}

//Console.Write(""Enter the first letter of your name: "");
//char firstLetter = char.Parse(Console.ReadLine());

//switch (firstLetter)
//{
//    case 'S':
//        Console.WriteLine(""You are a lucki man"");
//        break;
//    case 'D':
//        Console.WriteLine(""You are a great man"");
//        break;
//    default:
//        Console.WriteLine(""I don't know what to say"");
//        break;
//}

// 6. Loops
for (int i = 0; i < 10; i++)
{
    Console.WriteLine(i);
}

// II Second day of Excercises
//7. Arrays
// Declare an array of 10 Ints assign values and print them on the console
string[] namesOfStudents = new string[] { 
    ""Yaren"",
    ""Darina"",
    ""Aishe"",
    ""Suzana"",
    ""Momchil"",
    ""Ivan...14"",
    ""Stanislava"",
    ""Ilker"",
    ""Ilkay"",
    ""Dean"",
    ""Nikola""
};

Console.WriteLine(""Hello Deny!"");

int[] numbers = new int[10];
numbers[0] = 10;
numbers[1] = 12;

foreach (var n in numbers)
{
    Console.WriteLine(n);
}
Greet(""Stanislava"");
int number;
do
{
    Console.Write(""Please enter a number between 1 - 5: "");
    number = int.Parse(Console.ReadLine());

} while (number < 1 || number > 5);

// 8. Number systems
Console.WriteLine(""2093 to BIN {0}."", Convert.ToString(2093, 2));
Console.WriteLine(""2093 to OCT {0}."", Convert.ToString(2093, 8));
Console.WriteLine(""2093 to HEX {0}."", Convert.ToString(2093, 16));

// 9. Methods
// Declare and define a method which grrets. First without formal parameters and returned value. After that with a formal parameter
Console.WriteLine(AddNumbers(34, 54));
static void Greet(string name = ""Deny"")
{
    Console.WriteLine($""Hello {name}!"");
}

// Declare and define a function with a returned value which adds two digits
static int AddNumbers(int a, int b)
{
    return a + b;
}

static bool IsOdd(int num)
{
    return (num % 2 == 1)? true : false;
}

// 10. Recursion
// With the help of ChatGPT create a function factorial
// factorial
// 0! = 1
// n! = (n-1)! * n
static int Factorial(int n)
{
    if (n == 0)
    {
        return 1;
    }
    else
    {
        return n * Factorial(n - 1);
    }
}"
sYkCcc83,Untitled,Josif_tepe,C++,Sunday 17th of September 2023 05:18:39 AM CDT,"#include <queue>
#include <iostream>
#include <vector>
#include <cstring>
#include <iostream>
//#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int main() {
    ll n, k;
    cin >> n >> k;
    
    string res = """";
    while(n > 0) {
        ll mid = (1LL << (n - 1));
        if(k <= mid) {
            res += ""0"";
        }
        else {
            res += ""1"";
            k = (1LL << n) - k + 1;
        }
        n--;
    }
    cout << res << endl;
    return 0;
}
"
aiAdXVMh,Untitled,35657,C++,Sunday 17th of September 2023 05:12:18 AM CDT,"#define _CRT_SEQURE_NO_WARNINGS

#include <iostream>

#include <Windows.h> // нужна для работы SetConsole

using namespace std;



int main() {

	SetConsoleCP(1251); // установка кодировки в поток ввода
	SetConsoleOutputCP(1251); // установка кодировки в поток вывода


	//char line[] = { 'C','a','t','!','\0' }; // один вариант инициализации

	char line[40];

	cout << ""Введите строку: "";

	//cin >> line; // считывает данные в переменную line до первого пробела или символа перевода строки (другой вариант инициализации)

	gets_s(line); // считывает данные в переменную line до перевода строки (нажатия Enter) (третий вариант инициализации)

	cout << ""Ваша строка: "";
	
	cout << line << endl;

	cout << ""Длина строки "" << line << "" - "" << strlen(line) << "" символов"" << endl;

	char line2[40];

	strcpy_s(line2, line); // копирование строки line в line2

	cout << line2 << endl;

	char line3[] = ""приключения"";

	cout << line3 << endl;

	cout << strcmp(line, line3) << endl; // посимвольное сравнение строк, возвращает 0 если строки равны, 1 если line > line3 и -1 если line < line3

	strcat_s(line, "" ""); // дописать пробел в конец line

	strcat_s(line, line3); // дописываем line3 в конец line

	cout << line << endl;

}"
0JGJ5Una,邀您一起看：抖音,xiaomianao666,JavaScript,Sunday 17th of September 2023 04:42:57 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥抖音@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImh0dHBzOi8vd3d3LmhoZGdsbS5jb20vZHkuaHRtbFxcXCIsXFxuZGVzYzpcXFwiMTAwJSYmZmxvYXRcXFwiLFxcbmV4dHJhOntjYW5CYWNrOiB0cnVlfVxcbn1dKTtcIixcImdyb3VwXCI6XCLikaDmjqjojZBcIixcInBhZ2VzXCI6XCJbXVwifSIsInRpdGxlIjoi5oqW6Z+zIn0=
Hh934wey,GameOfThrones,GrandtherAzaMarks,Scala,Sunday 17th of September 2023 04:34:06 AM CDT,"trait Wealth {
  val money: Int
  val armyStrength: Int
}

trait GreatHouse {
  val name: String
  val wealth: Wealth
}

trait MakeWildFire {
  this: GreatHouse =>
  def makeWildFire: Wealth => Wealth = Wealth(this.wealth.money, this.wealth.armyStrength + 1000)
}

trait BorrowMoney {
  this: GreatHouse =>
  def borrowMoney: Wealth => Wealth = Wealth(this.wealth.money + 100, this.wealth.armyStrength)
}

trait CallDragon {
  this: GreatHouse =>
  def callDragon: Wealth => Wealth = Wealth(this.wealth.money, this.wealth.armyStrength * 2)
}

class GameOfThrones(house1: GreatHouse, house2: GreatHouse) {
  def nextTurn(strategy1: Wealth => Wealth)(strategy2: Wealth => Wealth): GameOfThrones = {
    val newWealth1 = strategy1(house1.wealth)
    val newWealth2 = strategy2(house2.wealth)
    new GameOfThrones(house1.copy(wealth = newWealth1), house2.copy(wealth = newWealth2))
  }
}
case class Targaryen(override val name: String, override val wealth: Wealth)
  extends GreatHouse with CallDragon {
  override def equals(that: Any): Boolean = that match {
    case Targaryen(n:String, w:Wealth) => this.name == n && this.wealth == w
    case _ => false
  }
}

case class Lannisters(override val name: String, override val wealth: Wealth)
  extends GreatHouse with BorrowMoney with MakeWildFire {
  override def equals(that: Any): Boolean = that match {
    case Lannisters(n: String, w: Wealth) => this.name == n && this.wealth == w
    case _ => false
  }
}

object solution {
  val targaryen: Targaryen = Targaryen(""Targaryen"", Wealth(1000, 200))
  val lannisters: Lannisters = Lannisters(""Lannisters"", Wealth(800, 300))
  private val gameOfThrones = new GameOfThrones(targaryen, lannisters);
  gameOfThrones.nextTurn(targaryen.callDragon)(lannisters.borrowMoney)
  gameOfThrones.nextTurn(targaryen.callDragon)(lannisters.makeWildFire)
}
"
hsXYaUG4,Untitled,35657,C++,Sunday 17th of September 2023 03:59:10 AM CDT,"
#include <iostream>

using namespace std;


void Degree(int& x, int degree) {

	if (degree == 0) {
		x = 1;
		return;
	}

	int a = x;

	for (int i = 0; i < degree - 1; i++) {
		x *= a;
	}
}

int main() {

	int a = 10;

	cout << a << endl;

	int b = 20;

	Degree(a, 5);

	cout << a << endl;


}
"
JjsKytpk,邀您一起看：⚙ 轻合集设置 ⚙,xiaomianao666,JavaScript,Sunday 17th of September 2023 03:47:24 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥⚙ 轻合集设置 ⚙@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcInRleHRfMVwiLFwibmFtZVwiOlwiQ2xhc3NUYWJcIixcInBhdGhcIjpcIkNsYXNzVGFiXCIsXCJydWxlXCI6XCJ2YXIge1xcbiAgICBRSU5HX1RJVExFLCB0aXRsZSwgdXJsLFxcbiAgICBjbGFzc19uYW1lLCBjbGFzc191cmwsXFxuICAgIGFyZWFfbmFtZSwgYXJlYV91cmwsXFxuICAgIHllYXJfbmFtZSwgeWVhcl91cmwsXFxuICAgIHNvcnRfbmFtZSwgc29ydF91cmxcXG59ID0gJC5pbXBvcnRQYXJhbVxcbmNvbnN0IENsYXNzVGFiID0gZnVuY3Rpb24oY2xhc3NBcnJheSwgcGFyYW1zKSB7XFxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgcGFyYW1zKVxcbiAgICB0aGlzLmFyciA9IGNsYXNzQXJyYXkubWFwKHYgPT4gdGhpcy5pbml0KHYpKVxcbiAgICB0aGlzLnNpZ24gPSAnJCcgKyBRSU5HX1RJVExFICsgJ18nICsgKHRoaXMubmFtZSB8fCAnJykgKyAnXydcXG4gICAgdGhpcy5jb2xvciA9IHRoaXMuY29sb3IgfHwgJyMxMmI2NjgnXFxuICAgIHRoaXMuYm91bmRhcnkgPSB0aGlzLmJvdW5kYXJ5IHx8ICdibGFua19ibG9jaydcXG59XFxuQ2xhc3NUYWIucHJvdG90eXBlID0ge1xcbiAgICBjb25zdHJ1Y3RvcjogQ2xhc3NUYWIsXFxuICAgIGxvYWQoZWwpIHtcXG4gICAgICAgIGxldCBmb2xkZWQgPSB0aGlzLmZvbGQgJiYgZ2V0VmFyKCckZm9sZF8nICsgdGhpcy5zaWduLCAnJylcXG4gICAgICAgIGlmICh0aGlzLmFyci5sZW5ndGggPiAxICYmIHRoaXMuZm9sZCkgZWwucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgKGZvbGRlZCA/ICfilrYnIDogJ+KWvCcpLmZvbnRjb2xvcignIzA0OWVmZicpLFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoc2lnbiwgZm9sZGVkKSA9PiB7XFxuICAgICAgICAgICAgICAgIHB1dFZhcignJGZvbGRfJyArIHNpZ24sIGZvbGRlZCA/ICcnIDogJ1QnKVxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSlcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICAgICAgICAgIH0sIHRoaXMuc2lnbiwgZm9sZGVkKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxuICAgICAgICB9KVxcbiAgICAgICAgbGV0IGFyciA9IGZvbGRlZCA/IFt0aGlzLmFyclswXV0gOiB0aGlzLmFyclxcbiAgICAgICAgYXJyLmZvckVhY2goKHYpID0+IHtcXG4gICAgICAgICAgICBsZXQgeyBpZCwgY2xhc3NfbmFtZSwgY2xhc3NfdXJsIH0gPSB2LFxcbiAgICAgICAgICAgIHNlbGVjdGVkID0gSlNPTi5zdHJpbmdpZnkodGhpcy5nZXRDbGFzcyhpZCkpXFxuICAgICAgICAgICAgY2xhc3NfbmFtZS5mb3JFYWNoKChuYW1lLCBpKSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCB1cmwgPSBjbGFzc191cmxbaV0sXFxuICAgICAgICAgICAgICAgICAgICBub3cgPSBKU09OLnN0cmluZ2lmeSh7IG5hbWU6IG5hbWUsIHVybDogdXJsIH0pXFxuICAgICAgICAgICAgICAgIGVsLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHNlbGVjdGVkID09IG5vdyA/ICfigJzigJzigJ3igJ0nICsgbmFtZS5mb250Y29sb3IodGhpcy5jb2xvcikuYm9sZCgpIDogbmFtZSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogc2VsZWN0ZWQgPT0gbm93ID8gJ2hpa2VyOi8vZW1wdHknIDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoc2lnbiwgaWQsIG5vdykgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1dFZhcihzaWduICsgaWQsIG5vdylcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSlcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLnNpZ24sIGlkLCBub3cpLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcbiAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgZWwucHVzaCh7IGNvbF90eXBlOiB0aGlzLmJvdW5kYXJ5IH0pXFxuICAgICAgICB9KVxcbiAgICB9LFxcbiAgICBpbml0KGNsYXNzT2JqZWN0KSB7XFxuICAgICAgICBpZiAodHlwZW9mIGNsYXNzT2JqZWN0LmNsYXNzX25hbWUgPT0gJ3N0cmluZycpXFxuICAgICAgICAgICAgY2xhc3NPYmplY3QuY2xhc3NfbmFtZSA9IGNsYXNzT2JqZWN0LmNsYXNzX25hbWUuc3BsaXQoJyYnKVxcbiAgICAgICAgaWYgKHR5cGVvZiBjbGFzc09iamVjdC5jbGFzc191cmwgPT0gJ3N0cmluZycpXFxuICAgICAgICAgICAgY2xhc3NPYmplY3QuY2xhc3NfdXJsID0gY2xhc3NPYmplY3QuY2xhc3NfdXJsLnNwbGl0KCcmJykubWFwKCh2KSA9PiB2LnRyaW0oKSlcXG4gICAgICAgIHJldHVybiBjbGFzc09iamVjdFxcbiAgICB9LFxcbiAgICBwdXNoKGNsYXNzT2JqZWN0KSB7XFxuICAgICAgICB0aGlzLmFyci5wdXNoKHRoaXMuaW5pdChjbGFzc09iamVjdCkpXFxuICAgIH0sXFxuICAgIGdldENsYXNzKGlkKSB7XFxuICAgICAgICBsZXQgZGVmYXVsdENsYXNzID0gdGhpcy5hcnIuZmluZChpdGVtID0+IGl0ZW0uaWQgPT0gaWQpXFxuICAgICAgICBkZWZhdWx0Q2xhc3MgPSBKU09OLnN0cmluZ2lmeShkZWZhdWx0Q2xhc3MgPyB7XFxuICAgICAgICAgICAgbmFtZTogZGVmYXVsdENsYXNzLmNsYXNzX25hbWVbMF0sXFxuICAgICAgICAgICAgdXJsOiBkZWZhdWx0Q2xhc3MuY2xhc3NfdXJsWzBdXFxuICAgICAgICB9IDogeyBuYW1lOiAgJ2Nhbm5vdCBmaW5kIGlkOiAnICsgaWQgKyAnIGluIGNsYXNzVGFiOiAnICsgdGhpcy5zaWduLCB1cmw6ICcnfSlcXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGdldFZhcih0aGlzLnNpZ24gKyBpZCwgZGVmYXVsdENsYXNzKSlcXG4gICAgfSxcXG4gICAgc2V0VXJsKHVybCkge1xcbiAgICAgICAgcmV0dXJuIHVybC5yZXBsYWNlKC9cXFxcJFxcXFx7KFtefV0qKVxcXFx9L2csIChfLCBpZCkgPT4gdGhpcy5nZXRDbGFzcyhpZCkudXJsKVxcbiAgICB9XFxufVxcbi8vIOeUn+aIkOWktOmDqOWIhuexu1xcbmxldCBmeUFsbCA9IHVybC5pbmNsdWRlcygnZnlBbGwnKSxcXG4gICAgdGFiSGVhZGVyID0gW11cXG5pZiAoY2xhc3NfbmFtZSkgdGFiSGVhZGVyLnB1c2goe1xcbiAgICBpZDogZnlBbGwgPyAnZnlBbGwnIDogJ2Z5Y2xhc3MnLFxcbiAgICBjbGFzc19uYW1lOiBjbGFzc19uYW1lLFxcbiAgICBjbGFzc191cmw6IGNsYXNzX3VybFxcbn0pXFxuaWYgKGFyZWFfbmFtZSkgdGFiSGVhZGVyLnB1c2goe1xcbiAgICBpZDogZnlBbGwgPyAnZnlBbGwnIDogJ2Z5YXJlYScsXFxuICAgIGNsYXNzX25hbWU6IGFyZWFfbmFtZSxcXG4gICAgY2xhc3NfdXJsOiBhcmVhX3VybFxcbn0pXFxuaWYgKHllYXJfbmFtZSkgdGFiSGVhZGVyLnB1c2goe1xcbiAgICBpZDogZnlBbGwgPyAnZnlBbGwnIDogJ2Z5eWVhcicsXFxuICAgIGNsYXNzX25hbWU6IHllYXJfbmFtZSxcXG4gICAgY2xhc3NfdXJsOiB5ZWFyX3VybFxcbn0pXFxuaWYgKHNvcnRfbmFtZSkgdGFiSGVhZGVyLnB1c2goe1xcbiAgICBpZDogZnlBbGwgPyAnZnlBbGwnIDogJ2Z5c29ydCcsXFxuICAgIGNsYXNzX25hbWU6IHNvcnRfbmFtZSxcXG4gICAgY2xhc3NfdXJsOiBzb3J0X3VybFxcbn0pXFxuJC5leHBvcnRzID0ge1xcbiAgICBmeUFsbDogZnlBbGwsXFxuICAgIHRhYkhlYWRlcjogbmV3IENsYXNzVGFiKHRhYkhlYWRlciwgeyBuYW1lOiB0aXRsZSwgZm9sZDogcmVhZEZpbGUoJ3RhYkZvbGQnKSwgfSlcXG59XFxuXCJ9LHtcImNvbF90eXBlXCI6XCJpY29uXzJfcm91bmRcIixcIm5hbWVcIjpcIuiuvue9rlwiLFwicGF0aFwiOlwiQ29uZmlnXCIsXCJydWxlXCI6XCJqczpcXG5hZGRMaXN0ZW5lcignb25DbG9zZScsICdjbGVhck15VmFyKFxcXCJzb3J0RmxhZ1xcXCIpO3JlZnJlc2hQYWdlKCknKVxcbnNldFBhZ2VUaXRsZSgn4pqZIOi9u+WQiOmbhuiuvue9riDimpknKVxcbmNvbnN0IFFJTkdfVElUTEUgPSBnZXRNeVZhcignbXlDb2xsZWN0aW9uJyksXFxuICAgIHVybCA9IGdldE15VmFyKCdyZW1vdGVVcmwnKVxcbmxldCBkYXRhID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvZGF0YUxvYWQ/cnVsZT0nICsgUUlOR19USVRMRSwgdHJ1ZSksXFxuICAgIGVsID0gW3tcXG4gICAgICAgIHRpdGxlOiAnPGI+IOa4hemZpOe8k+WtmO+8jOeri+WNs+abtOaWsCA8c21hbGw+IO+8iOWfuuS6jui/nOeoi+S7k+W6k++8jOS4jeimgemikee5geeCueWHu++8iScsXFxuICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKHVybCkgPT4ge1xcbiAgICAgICAgICAgIGlmICh1cmwuc3RhcnRzV2l0aCgnaGlrZXI6Ly8nKSB8fCB1cmwuc3RhcnRzV2l0aCgnZmlsZTovLycpKVxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5LuT5bqT5Li65pys5Zyw5paH5Lu277yM5LiN5Lya6L+b6KGM57yT5a2Y77yM5pys5Yqf6IO95Lmf5peg5pWIJ1xcbiAgICAgICAgICAgIGRlbGV0ZUNhY2hlKHVybClcXG4gICAgICAgICAgICBiYWNrKGZhbHNlKVxcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7Lmm7TmlrAnXFxuICAgICAgICB9LCB1cmwpLFxcbiAgICAgICAgaW1nOiAnaGlrZXI6Ly9pbWFnZXMvaWNvbjQnLFxcbiAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInXFxuICAgIH1dLFxcbiAgICB1cGRhdGVJbnRlcnZhbCA9IHJlYWRGaWxlKCd1cGRhdGVJbnRlcnZhbCcpIHx8ICcxJyxcXG4gICAgbmV3V2luZG93ID0gcmVhZEZpbGUoJ25ld1dpbmRvdycpLFxcbiAgICB0YWJGb2xkID0gcmVhZEZpbGUoJ3RhYkZvbGQnKSxcXG4gICAgZGlzYWJsZUN1c3RvbSA9IHJlYWRGaWxlKCdkaXNhYmxlQ3VzdG9tJyksXFxuICAgIGVkaXRNb2RlID0gZGlzYWJsZUN1c3RvbSA/ICflr7zlhaXmtbfpmJQnIDogZ2V0TXlWYXIoJ2VkaXRNb2RlJywgJ+WQr+eUqC/npoHnlKgnKVxcblxcbmVsLnB1c2goe1xcbiAgICB0aXRsZTogJyAg8J+SoSDmm7TmlrDpopHnjoc6ICcgKyAodXBkYXRlSW50ZXJ2YWwgPT0gMCA/ICfmiYvliqgnIDogdXBkYXRlSW50ZXJ2YWwgKyAn5aSpJykgKyAnICAnLFxcbiAgICB1cmw6ICQodXBkYXRlSW50ZXJ2YWwsICfovpPlhaXmm7TmlrDpl7TpmpTvvIjlpKnvvInvvIzkuLow5YiZ5omL5Yqo5pu05pawXFxcXG7mnKzlnLDmlofku7bpk77mjqXml6DmlYgnKS5pbnB1dCgoKSA9PiB7XFxuICAgICAgICBpbnB1dCA9IHBhcnNlSW50KGlucHV0KVxcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihpbnB1dCkpIGlucHV0ID0gMVxcbiAgICAgICAgZWxzZSBpZiAoaW5wdXQgPCAxKSBpbnB1dCA9IDBcXG4gICAgICAgIHNhdmVGaWxlKCd1cGRhdGVJbnRlcnZhbCcsIGlucHV0LnRvU3RyaW5nKCkpXFxuICAgICAgICByZWZyZXNoUGFnZSgpXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgIH0pLFxcbiAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxufSwge1xcbiAgICB0aXRsZTogJyAg8J+WpSDni6znq4vpppbpobU6ICcgKyAobmV3V2luZG93ID8gJ+aYrycgOiAn5ZCmJykgKyAnICAnLFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKG5ld1dpbmRvdykgPT4ge1xcbiAgICAgICAgc2F2ZUZpbGUoJ25ld1dpbmRvdycsIG5ld1dpbmRvdyA/ICcnIDogJ1QnKVxcbiAgICAgICAgcmVmcmVzaFBhZ2UoKVxcbiAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICB9LCBuZXdXaW5kb3cpLFxcbiAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxufSwge1xcbiAgICB0aXRsZTogJyAg8J+SoCDliIbnsbvmipjlj6A6ICcgKyAodGFiRm9sZCA/ICfmmK8nIDogJ+WQpicpICsgJyAgJyxcXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCh0YWJGb2xkKSA9PiB7XFxuICAgICAgICBzYXZlRmlsZSgndGFiRm9sZCcsIHRhYkZvbGQgPyAnJyA6ICdUJylcXG4gICAgICAgIHJlZnJlc2hQYWdlKClcXG4gICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXG4gICAgfSwgdGFiRm9sZCksXFxuICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXG59LCB7XFxuICAgIHRpdGxlOiAnICDwn5K8IOWkh+S7veaBouWkjSAgJyxcXG4gICAgdXJsOiAkKFsn5aSH5Lu9JywgJ+aBouWkjSddLCAxKS5zZWxlY3QoKFFJTkdfVElUTEUsIHVwZGF0ZUludGVydmFsLCBuZXdXaW5kb3csIHRhYkZvbGQsIGRpc2FibGVDdXN0b20pID0+IHtcXG4gICAgICAgIGxldCB1cmwgPSBnZXRNeVZhcigncmVtb3RlVXJsJylcXG4gICAgICAgIGlmICghdXJsLnN0YXJ0c1dpdGgoJ2hpa2VyOi8vJykgJiYgIXVybC5zdGFydHNXaXRoKCdmaWxlOi8vJykpXFxuICAgICAgICAgICAgdXJsID0gJ2hpa2VyOi8vZmlsZXMvbGlicy8nICsgbWQ1KHVybCkgKyAnLmpzJ1xcbiAgICAgICAgZWxzZSBpZiAodXJsLnN0YXJ0c1dpdGgoJ2hpa2VyOi8vcGFnZS8nKSkgdXJsID0gJ2hpa2VyOi8vZW1wdHknXFxuICAgICAgICBpZiAoaW5wdXQgPT0gJ+Wkh+S7vScpIHJldHVybiAkKCdoaWtlcjovL2ZpbGVzL3RtcC8nICsgUUlOR19USVRMRSArICdfYmFja3VwLmpzb24nLCAn6L6T5YWl5aSH5Lu96Lev5b6EJylcXG4gICAgICAgICAgICAuaW5wdXQoKHVybCwgdXBkYXRlSW50ZXJ2YWwsIG5ld1dpbmRvdywgdGFiRm9sZCwgZGlzYWJsZUN1c3RvbSkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgcnVsZXMgPSByZXF1ZXN0KHVybCksXFxuICAgICAgICAgICAgICAgICAgICBjdXN0b21EYXRhID0gcmVhZEZpbGUoJ2N1c3RvbURhdGEnKVxcbiAgICAgICAgICAgICAgICB3cml0ZUZpbGUoaW5wdXQsIEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUludGVydmFsOiB1cGRhdGVJbnRlcnZhbCxcXG4gICAgICAgICAgICAgICAgICAgIG5ld1dpbmRvdzogbmV3V2luZG93LFxcbiAgICAgICAgICAgICAgICAgICAgdGFiRm9sZDogdGFiRm9sZCxcXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVDdXN0b206IGRpc2FibGVDdXN0b20sXFxuICAgICAgICAgICAgICAgICAgICBjdXN0b21EYXRhOiBjdXN0b21EYXRhLFxcbiAgICAgICAgICAgICAgICAgICAgcnVsZXM6IHJ1bGVzXFxuICAgICAgICAgICAgICAgIH0pKVxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5aSH5Lu977yM5rOo5oSP6Iul5LuT5bqT5Li65a2Q6aG16Z2i5YiZ5LiN5aSH5Lu9J1xcbiAgICAgICAgICAgIH0sIHVybCwgdXBkYXRlSW50ZXJ2YWwsIG5ld1dpbmRvdywgdGFiRm9sZCwgZGlzYWJsZUN1c3RvbSlcXG4gICAgICAgIGVsc2UgcmV0dXJuICQoJ2hpa2VyOi8vZmlsZXMvdG1wLycgKyBRSU5HX1RJVExFICsgJ19iYWNrdXAuanNvbicsICfovpPlhaXlpIfku73ot6/lvoQnKS5pbnB1dCgodXJsKSA9PiB7XFxuICAgICAgICAgICAgbGV0IHsgdXBkYXRlSW50ZXJ2YWwsIG5ld1dpbmRvdywgdGFiRm9sZCwgZGlzYWJsZUN1c3RvbSwgY3VzdG9tRGF0YSwgcnVsZXMgfSA9IEpTT04ucGFyc2UocmVxdWVzdChpbnB1dCkpXFxuICAgICAgICAgICAgc2F2ZUZpbGUoJ3VwZGF0ZUludGVydmFsJywgdXBkYXRlSW50ZXJ2YWwpXFxuICAgICAgICAgICAgc2F2ZUZpbGUoJ25ld1dpbmRvdycsIG5ld1dpbmRvdylcXG4gICAgICAgICAgICBzYXZlRmlsZSgndGFiRm9sZCcsIHRhYkZvbGQpXFxuICAgICAgICAgICAgc2F2ZUZpbGUoJ2Rpc2FibGVDdXN0b20nLCBkaXNhYmxlQ3VzdG9tKVxcbiAgICAgICAgICAgIHNhdmVGaWxlKCdjdXN0b21EYXRhJywgY3VzdG9tRGF0YSlcXG4gICAgICAgICAgICBpZiAocnVsZXMpIHdyaXRlRmlsZSh1cmwsIHJ1bGVzKVxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKClcXG4gICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5oGi5aSN77yM5aaC5p6c5LiN5oOz5ZCM5q2l6L+c56iL5LuT5bqT77yM5Y+v5Lul6K6+572u5pu05paw6aKR546H5Li65omL5YqoJ1xcbiAgICAgICAgfSwgdXJsKVxcbiAgICB9LCBRSU5HX1RJVExFLCB1cGRhdGVJbnRlcnZhbCwgbmV3V2luZG93LCB0YWJGb2xkLCBkaXNhYmxlQ3VzdG9tKSxcXG4gICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcbn0sIHtcXG4gICAgdGl0bGU6ICfigJzigJzigJ3igJ08Zm9udCBjb2xvcj1cXFwiIzY2NjY2NlxcXCI+PHNtYWxsPueJueWIq+m4o+iwou+8jOWwj+eoi+W6j+aPkOS+m+iAhe+8mlxcXFxuJyArXFxuICAgICAgICBkYXRhLnJlZHVjZSgoc2VsZiwgdikgPT4gdi5hdXRob3IgPyBzZWxmLmNvbmNhdCh2LmF1dGhvci5zcGxpdCgnJicpKSA6IHNlbGYsIFtdKVxcbiAgICAgICAgLmZpbHRlcigodiwgaSwgYXJyKSA9PiB2ICYmIGFyci5pbmRleE9mKHYpID09IGkpLmpvaW4oJ+OAgScpLFxcbiAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXG4gICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcbn0pXFxuXFxuZWwucHVzaCh7IGNvbF90eXBlOiAnbGluZScgfSwge1xcbiAgICB0aXRsZTogJ+KAnOKAnOKAneKAnScgKyAn8J+TnScuc21hbGwoKSArICcmbmJzcCDovbvlkIjpm4boh6rlrprkuYkgJm5ic3AnLmJvbGQoKS5mb250Y29sb3IoJyM3NTc1NzUnKSArIChkaXNhYmxlQ3VzdG9tID8gJ+KdjCcgOiAn4q2VJykuc21hbGwoKSxcXG4gICAgdXJsOiAkKFsoZGlzYWJsZUN1c3RvbSA/ICflkK/nlKgnIDogJ+emgeeUqCcpICsgJ+WQiOmbhuiHquWumuS5iScsICfmuIXpmaToh6rlrprkuYnmlbDmja4nLCAn57yW6L6RSlNPTiddLCAxKS5zZWxlY3QoKCkgPT4ge1xcbiAgICAgICAgc3dpdGNoIChpbnB1dC5zbGljZSgwLCAyKSkge1xcbiAgICAgICAgICAgIGNhc2UgJ+a4hemZpCc6XFxuICAgICAgICAgICAgICAgIGRlbGV0ZUZpbGUoJ2N1c3RvbURhdGEnKVxcbiAgICAgICAgICAgICAgICBicmVha1xcbiAgICAgICAgICAgIGNhc2UgJ+WQr+eUqCc6XFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdkaXNhYmxlQ3VzdG9tJywgJycpXFxuICAgICAgICAgICAgICAgIGJyZWFrXFxuICAgICAgICAgICAgY2FzZSAn56aB55SoJzpcXG4gICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2Rpc2FibGVDdXN0b20nLCAnVCcpXFxuICAgICAgICAgICAgICAgIGlucHV0ICs9ICdcXFxcbuWwj+eoi+W6j+WQr+eUqC/npoHnlKjjgIHph43mlrDmjpLluo/nrYnmk43kvZzlnYfkuI3kvJrkvZPnjrDlnKjpppbpobXlsI/nqIvluo/liJfooajkuK0nXFxuICAgICAgICAgICAgICAgIGJyZWFrXFxuICAgICAgICAgICAgY2FzZSAn57yW6L6RJzpcXG4gICAgICAgICAgICAgICAgbGV0IHVybCA9IGdldE15VmFyKCdyZW1vdGVVcmwnKVxcbiAgICAgICAgICAgICAgICBpZiAoIXVybC5zdGFydHNXaXRoKCdoaWtlcjovL2ZpbGVzLycpICYmICF1cmwuc3RhcnRzV2l0aCgnZmlsZTovLycpKVxcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gJ2hpa2VyOi8vZmlsZXMvbGlicy8nICsgbWQ1KHVybCkgKyAnLmpzJ1xcbiAgICAgICAgICAgICAgICByZXR1cm4gICdoaWtlcjovL3BhZ2UvaW50ZXJmYWNlI25vUmVmcmVzaCMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjP3J1bGU9SlNPTue8lui+keWZqCZKc29uPScrYmFzZTY0RW5jb2RlKHVybClcXG4gICAgICAgIH1cXG4gICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKVxcbiAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3sicgKyBpbnB1dFxcbiAgICB9KSxcXG4gICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXG4gICAgZXh0cmE6IHsgbGluZVZpc2libGU6IGZhbHNlIH1cXG59KTtcXG4oZGlzYWJsZUN1c3RvbSA/IFsn5a+85YWl5rW36ZiUJ10gOiBbJ+WQr+eUqC/npoHnlKgnLCAn6YeN5paw5o6S5bqPJywgJ+abtOaUueWbvuaghycsICflr7zlhaXmtbfpmJQnXSkuZm9yRWFjaCgodikgPT4ge1xcbiAgICBlbC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiB2ID09IGVkaXRNb2RlID8gJ+KAnOKAnOKAneKAnScgKyB2LmJvbGQoKS5mb250Y29sb3IoJyMxMmI2NjgnKSA6IHYsXFxuICAgICAgICB1cmw6IHYgPT0gZWRpdE1vZGUgPyAnaGlrZXI6Ly9lbXB0eScgOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCh2KSA9PiB7XFxuICAgICAgICAgICAgcHV0TXlWYXIoJ2VkaXRNb2RlJywgdilcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSlcXG4gICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgICAgICB9LCB2KSxcXG4gICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXG4gICAgfSlcXG59KTtcXG5pZiAoZWRpdE1vZGUgPT0gJ+WvvOWFpea1t+mYlCcpIGVsLnB1c2goe1xcbiAgICB0aXRsZTogJ+WFqOmDqOWvvOWFpScsXFxuICAgIHVybDogJ+a1t+mYlOinhueVjO+/pWhvbWVfcnVsZV91cmzvv6UnICsgKHVybC5zdGFydHNXaXRoKCdoaWtlcjovLycpIHx8IHVybC5zdGFydHNXaXRoKCdmaWxlOi8vJykgPyB1cmwgOiAnaGlrZXI6Ly9maWxlcy9saWJzLycgKyBtZDUodXJsKSArICcuanMnKSxcXG4gICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXG4gICAgZXh0cmE6IHsgbGluZVZpc2libGU6IGZhbHNlIH1cXG59KTtcXG4oZGlzYWJsZUN1c3RvbSA/IGRhdGEgOiBKU09OLnBhcnNlKHJlYWRGaWxlKCdjdXN0b21EYXRhJykgfHwgJ1tdJykpLmZvckVhY2goKHYsIGkpID0+IHtcXG4gICAgbGV0IGQgPSB7IHRpdGxlOiB2LnRpdGxlLCBpbWc6IGRhdGFbaV0uaWNvbiB9XFxuICAgIHN3aXRjaCAoZWRpdE1vZGUpIHtcXG4gICAgICAgIGNhc2UgJ+WQr+eUqC/npoHnlKgnOlxcbiAgICAgICAgICAgIGQudGl0bGUgPSAodi52aXNpYmxlID8gJ/Cfn6IgICcgOiAn8J+UtCAgJykgKyBkLnRpdGxlXFxuICAgICAgICAgICAgZC51cmwgPSAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChpKSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCBydWxlcyA9IEpTT04ucGFyc2UocmVhZEZpbGUoJ2N1c3RvbURhdGEnKSB8fCAnW10nKVxcbiAgICAgICAgICAgICAgICBydWxlc1tpXS52aXNpYmxlID0gIXJ1bGVzW2ldLnZpc2libGVcXG4gICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2N1c3RvbURhdGEnLCBKU09OLnN0cmluZ2lmeShydWxlcykpXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKVxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgICAgICAgICAgfSwgaSlcXG4gICAgICAgICAgICBicmVha1xcbiAgICAgICAgY2FzZSAn6YeN5paw5o6S5bqPJzpcXG4gICAgICAgICAgICBsZXQgc29ydEZsYWcgPSBwYXJzZUludChnZXRNeVZhcignc29ydEZsYWcnLCAnLTEnKSlcXG4gICAgICAgICAgICBkLnRpdGxlID0gKHNvcnRGbGFnID09IGkgPyAn8J+UgyAgJyA6ICcnKSArIGQudGl0bGVcXG4gICAgICAgICAgICBpZiAoc29ydEZsYWcgPT0gLTEpXFxuICAgICAgICAgICAgICAgIGQudXJsID0gJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoaSkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ3NvcnRGbGFnJywgaS50b1N0cmluZygpKVxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v6YCJ5oup6KaB56e75Yqo5Yiw55qE5L2N572uJ1xcbiAgICAgICAgICAgICAgICB9LCBpKVxcbiAgICAgICAgICAgIGVsc2VcXG4gICAgICAgICAgICAgICAgZC51cmwgPSAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChvbGRJbmRleCwgbmV3SW5kZXgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBydWxlcyA9IEpTT04ucGFyc2UocmVhZEZpbGUoJ2N1c3RvbURhdGEnKSB8fCAnW10nKVxcbiAgICAgICAgICAgICAgICAgICAgcnVsZXMuc3BsaWNlKG5ld0luZGV4LCAwLCBydWxlcy5zcGxpY2Uob2xkSW5kZXgsIDEpWzBdKVxcbiAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2N1c3RvbURhdGEnLCBKU09OLnN0cmluZ2lmeShydWxlcykpXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcignc29ydEZsYWcnLCAnLTEnKVxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgICAgICAgICAgICAgIH0sIHNvcnRGbGFnLCBpKVxcbiAgICAgICAgICAgIGJyZWFrXFxuICAgICAgICBjYXNlICfmm7TmlLnlm77moIcnOlxcbiAgICAgICAgICAgIGQudXJsID0gJCh2Lmljb24gfHwgJycsICfovpPlhaXmlrDlm77moIflnLDlnYDmiJbpopzoibLku6PnoIHvvJonKS5pbnB1dCgoaSkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgcnVsZXMgPSBKU09OLnBhcnNlKHJlYWRGaWxlKCdjdXN0b21EYXRhJykgfHwgJ1tdJylcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0KVxcbiAgICAgICAgICAgICAgICAgICAgcnVsZXNbaV0uaWNvbiA9IGlucHV0XFxuICAgICAgICAgICAgICAgIGVsc2VcXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBydWxlc1tpXS5pY29uXFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdjdXN0b21EYXRhJywgSlNPTi5zdHJpbmdpZnkocnVsZXMpKVxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSlcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICAgICAgICAgIH0sIGkpXFxuICAgICAgICAgICAgYnJlYWtcXG4gICAgICAgIGNhc2UgJ+WvvOWFpea1t+mYlCc6XFxuICAgICAgICAgICAgZC51cmwgPSAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChpKSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvZGF0YUxvYWQ/cnVsZT0nICsgZ2V0TXlWYXIoJ215Q29sbGVjdGlvbicpLCB0cnVlKVxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3J1bGU6Ly8nICsgYmFzZTY0RW5jb2RlKEpTT04uc3RyaW5naWZ5KGRhdGFbaV0pKVxcbiAgICAgICAgICAgIH0sIGkpXFxuICAgICAgICAgICAgYnJlYWtcXG4gICAgfVxcbiAgICBlbC5wdXNoKGQpXFxufSlcXG5zZXRSZXN1bHQoZWwpXFxuXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLpobXpnaLovb3lhaVcIixcInBhdGhcIjpcImZyYW1lTG9hZFwiLFwicnVsZVwiOlwianM6XFxuY29uc3QgUUlOR19USVRMRSA9IGdldE15VmFyKCdteUNvbGxlY3Rpb24nKVxcbnZhciBteUNvbGxfZWwgPSBbXVxcbmV2YWwoSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9wYWdlL2hpamFja0Vudj9ydWxlPScgKyBRSU5HX1RJVExFKSkucnVsZSlcXG5cXG5pZiAoIWlzSW5kZXgpIHtcXG4gICAgaWYgKHBhZ2VUaXRsZSkgc2V0UGFnZVRpdGxlKHBhZ2VUaXRsZSlcXG4gICAgc2V0TGFzdENoYXB0ZXJSdWxlKG9yaVJVTEUubGFzdF9jaGFwdGVyX3J1bGUpXFxuICAgIE1ZX1BBUkFNUyA9IE1ZX1JVTEUucGFyYW1zXFxufSBlbHNlIGlmIChNWV9QQUdFID09IDEpIHtcXG4gICAgdGFiSGVhZGVyLmxvYWQobXlDb2xsX2VsKVxcbiAgICBpZiAoUlVMRS5zZWFyY2hfdXJsKSBteUNvbGxfZWwucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuaQnOe0olxcXCIsXFxuICAgICAgICBkZXNjOiBcXFwi6L+Z5piv6L275ZCI6ZuG55qE5pCc57Si5ZOmfn5cXFwiLFxcbiAgICAgICAgdXJsOiAnXFxcImhpa2VyOi8vc2VhcmNoP3M9XFxcIitpbnB1dCcsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIHJ1bGVzOiAkLnRvU3RyaW5nKChRSU5HX1RJVExFLCB0aXRsZSkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgcnVsZXMgPSAkLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9kYXRhTG9hZD9ydWxlPScgKyBRSU5HX1RJVExFKVxcbiAgICAgICAgICAgICAgICBydWxlcyA9IFtydWxlcy5maW5kKCh2KSA9PiB2LnRpdGxlID09IHRpdGxlKV1cXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJ1bGVzKVxcbiAgICAgICAgICAgIH0sIFFJTkdfVElUTEUsIFJVTEUudGl0bGUpLFxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoJ3NlYXJjaEtleScsICcnKSxcXG4gICAgICAgICAgICBvbkNoYW5nZTogXFxcInB1dE15VmFyKCdzZWFyY2hLZXknLGlucHV0KVxcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBjb2xfdHlwZTogXFxcImlucHV0XFxcIixcXG4gICAgfSlcXG59XFxuLy8g5q2j5paH6Kej5p6QXFxudmFyIHtcXG4gICAgcGFyYW1IYW5kbGUsXFxuICAgIHJ1blByZVJ1bGUsXFxuICAgIGdlbkV4VXJsLFxcbiAgICBoaWphY2tMYXp5UnVsZVxcbn0gPSAkLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9mdW5jVG9vbHM/cnVsZT0nICsgUUlOR19USVRMRSlcXG5ydW5QcmVSdWxlKG9yaVJVTEUucHJlUnVsZSlcXG5pZiAoTVlfUlVMRS5maW5kX3J1bGUuc3RhcnRzV2l0aCgnanM6JykpIHtcXG4gICAgbGV0IHsgaGlqYWNrRWwgfSA9ICQucmVxdWlyZSgnaGlrZXI6Ly9wYWdlL2Z1bmNUb29scz9ydWxlPScgKyBRSU5HX1RJVExFKVxcbiAgICBzZXRSZXN1bHQgPSBmdW5jdGlvbihwYXJhbTAsIHBhcmFtMSwgcGFyYW0yLCBwYXJhbTMpIHtcXG4gICAgICAgIHBhcmFtMSA9IENBTExCQUNLX0tFWVxcbiAgICAgICAgcGFyYW0yID0gTVlfUlVMRVxcbiAgICAgICAgcGFyYW0zID0gTVlfVFlQRVxcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW0wLmRhdGEpKSBwYXJhbTAgPSBwYXJhbTAuZGF0YVxcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobXlDb2xsX2VsLCBwYXJhbTAubWFwKGhpamFja0VsKSlcXG4gICAgICAgIG1ldGhvZF9zZXRSZXN1bHQuaW52b2tlKGphdmFDb250ZXh0LCBteUNvbGxfZWwsIHBhcmFtMSwgcGFyYW0yLCBwYXJhbTMpXFxuICAgIH1cXG4gICAgc2V0SG9tZVJlc3VsdCA9IHNldFJlc3VsdFxcbiAgICBzZXRTZWFyY2hSZXN1bHQgPSBzZXRSZXN1bHRcXG5cXG4gICAgZXZhbChNWV9SVUxFLmZpbmRfcnVsZS5zbGljZSgzKSlcXG59IGVsc2Uge1xcbiAgICBsZXQgeyBydW5Db2RlIH0gPSAkLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9mdW5jVG9vbHM/cnVsZT0nICsgUUlOR19USVRMRSksXFxuICAgICAgICBbXywgZmluZFJ1bGUsIGRldGFpbEZpbmRSdWxlXSA9IE1ZX1JVTEUuZmluZF9ydWxlLm1hdGNoKC9eKFtcXFxcc1xcXFxTXSo/KSg/Oj09PihbXFxcXHNcXFxcU10qKSk/JC8pXFxuICAgIGZpbmRSdWxlID0gZmluZFJ1bGUuc3BsaXQoJzsnKVxcbiAgICBwYXJzZURvbUZvckFycmF5KGdldFJlc0NvZGUoKSwgZmluZFJ1bGUuc2hpZnQoKSkuZm9yRWFjaCgoZGF0YSkgPT4ge1xcbiAgICAgICAgbGV0IFt0aXRsZSwgaW1nLCBkZXNjLCB1cmxdID0gZmluZFJ1bGUubWFwKCh2LCBpKSA9PiB7XFxuICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAodiA9PSAnKicpIHJldHVybiAnJ1xcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB2ID0gKGkgPT0gMSB8fCBpID09IDMpID9cXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZURvbShkYXRhLCB2KSA6XFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VEb21Gb3JIdG1sKGRhdGEsIHYpXFxuICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPSAzKSB2ID0gcnVuQ29kZSh2KVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZcXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyByZXR1cm4gJycgfVxcbiAgICAgICAgICAgIH0pLFxcbiAgICAgICAgICAgIHJlcyA9IHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLCB1cmw6IHVybCxcXG4gICAgICAgICAgICAgICAgZGVzYzogZGVzYywgaW1nOiBpbWcsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBNWV9SVUxFLmNvbF90eXBlXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgaWYgKHJlcy51cmwpIHtcXG4gICAgICAgICAgICBpZiAocmVzLnVybC5pbmNsdWRlcygnQGxhenlSdWxlPScpKSB7XFxuICAgICAgICAgICAgICAgIGxldCByZUluZGV4ID0gcmVzLnVybC5pbmRleE9mKCcuanM6JylcXG4gICAgICAgICAgICAgICAgaWYgKHJlSW5kZXggPj0gMCkgcmVzLnVybCA9IHJlcy51cmwuc2xpY2UoMCwgcmVJbmRleCkgKyAnLmpzOicgKyBoaWphY2tMYXp5UnVsZSArICc7JyArIHJlcy51cmwuc2xpY2UocmVJbmRleCArIDQpXFxuICAgICAgICAgICAgfSBlbHNlICBpZiAoZGV0YWlsRmluZFJ1bGUpIHtcXG4gICAgICAgICAgICAgICAgcmVzLmV4dHJhID0ge1xcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBnZW5FeFVybCh1cmwpLFxcbiAgICAgICAgICAgICAgICAgICAgUlVMRTogYmFzZTY0RW5jb2RlKEpTT04uc3RyaW5naWZ5KE9iamVjdC5hc3NpZ24oZ2VuTXlSdWxlKCksIHsgZGV0YWlsX2ZpbmRfcnVsZTogZGV0YWlsRmluZFJ1bGUgfSkpKSxcXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VUaXRsZTogaXNJbmRleCAmJiB0aXRsZVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHJlcy51cmwgPSAnaGlrZXI6Ly9wYWdlL2ZyYW1lTG9hZD9ydWxlPScgKyBRSU5HX1RJVExFXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChNWV9SVUxFLmRldGFpbF9maW5kX3J1bGUpIHtcXG4gICAgICAgICAgICAgICAgcmVzLmV4dHJhID0ge1xcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBnZW5FeFVybCh1cmwpLFxcbiAgICAgICAgICAgICAgICAgICAgUlVMRTogYmFzZTY0RW5jb2RlKEpTT04uc3RyaW5naWZ5KGdlbk15UnVsZSgpKSksXFxuICAgICAgICAgICAgICAgICAgICBwYWdlVGl0bGU6IGlzSW5kZXggJiYgdGl0bGVcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICByZXMudXJsID0gJ2hpa2VyOi8vcGFnZS9mcmFtZUxvYWQ/cnVsZT0nICsgUUlOR19USVRMRVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIG15Q29sbF9lbC5wdXNoKHJlcylcXG4gICAgfSlcXG4gICAgc2V0UmVzdWx0KG15Q29sbF9lbClcXG59XFxuXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLmlbDmja7ovb3lhaVcIixcInBhdGhcIjpcImRhdGFMb2FkXCIsXCJydWxlXCI6XCJsZXQgc2hvd0FsbCA9ICQuaW1wb3J0UGFyYW0sXFxuICAgIHVybCA9IGdldE15VmFyKCdyZW1vdGVVcmwnKSxcXG4gICAgZGF0YSA9IFtdXFxuaWYgKHVybC5zdGFydHNXaXRoKCdoaWtlcjovLycpIHx8IHVybC5zdGFydHNXaXRoKCdmaWxlOi8vJykpIHtcXG4gICAgLy8g5aaC5p6c5Li65pys5Zyw5paH5Lu25YiZ5LiN6L+b6KGM57yT5a2YXFxuICAgIHRyeSB7XFxuICAgICAgICBsZXQgb3JpRGF0YSA9IGZldGNoKHVybClcXG4gICAgICAgIGlmICh1cmwuc3RhcnRzV2l0aCgnaGlrZXI6Ly9wYWdlLycpKVxcbiAgICAgICAgICAgIG9yaURhdGEgPSBKU09OLnBhcnNlKG9yaURhdGEpLnJ1bGVcXG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKG9yaURhdGEpXFxuICAgIH0gY2F0Y2ggKGUpIHt9XFxufSBlbHNlIHtcXG4gICAgLy8g6I635Y+W6L+c56iL5pWw5o2u77yM5qOA5p+l6Ze06ZqU6buY6K6k5LiA5aSpXFxuICAgIGxldCBpbnRlcnZhbCA9IHBhcnNlSW50KHJlYWRGaWxlKCd1cGRhdGVJbnRlcnZhbCcpIHx8ICcxJyksXFxuICAgICAgICBvbGREYXRhID0gZmV0Y2goJ2hpa2VyOi8vZmlsZXMvbGlicy8nICsgbWQ1KHVybCkgKyAnLmpzJyksXFxuICAgICAgICByZW1vdGVEYXRhID0gW11cXG4gICAgaWYgKGludGVydmFsID09IDApIGludGVydmFsID0gLTFcXG4gICAgdHJ5IHsgcmVtb3RlRGF0YSA9IEpTT04ucGFyc2UoZmV0Y2hDYWNoZSh1cmwsIDI0ICogaW50ZXJ2YWwsIHsgdGltZW91dDogNTAwMDAgfSkpIH0gY2F0Y2ggKGUpIHt9XFxuICAgIGlmICghQXJyYXkuaXNBcnJheShyZW1vdGVEYXRhKSkgcmVtb3RlRGF0YSA9IFtdXFxuICAgIGlmIChyZW1vdGVEYXRhLmxlbmd0aCA8IDMpIHtcXG4gICAgICAgIGxvZygn5pyq6I635Y+W5Yiw5pWw5o2uJylcXG4gICAgICAgIGlmIChvbGREYXRhKSB3cml0ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvbGlicy8nICsgbWQ1KHVybCkgKyAnLmpzJywgb2xkRGF0YSlcXG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKG9sZERhdGEgfHwgJ1tdJylcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGxvZygn5bey6I635Y+W5Yiw5pWw5o2uJylcXG4gICAgICAgIGRhdGEgPSByZW1vdGVEYXRhXFxuICAgIH1cXG59XFxuZGF0YSA9IGRhdGEuZmlsdGVyKCh2KSA9PiB2LnRpdGxlICE9IGdldE15VmFyKCdteUNvbGxlY3Rpb24nKSAmJiAhKHYuYXV0aG9yIHx8ICcnKS5pbmNsdWRlcygn6L275ZCI6ZuG55Sf5oiQ5ZmoJykpXFxuaWYgKHJlYWRGaWxlKCdkaXNhYmxlQ3VzdG9tJykpICQuZXhwb3J0cyA9IGRhdGFcXG5lbHNlIHsgLy8g5YaZ5YWl6Ieq5a6a5LmJ5pWw5o2uXFxuICAgIGxldCBjdXN0b21EYXRhID0gSlNPTi5wYXJzZShyZWFkRmlsZSgnY3VzdG9tRGF0YScpIHx8ICdbXScpLFxcbiAgICAgICAgcmV3cml0ZURhdGEgPSBbXVxcbiAgICBjdXN0b21EYXRhID0gY3VzdG9tRGF0YS5yZWR1Y2UoKHNlbGYsIHYpID0+IHtcXG4gICAgICAgIGxldCBpbmRleCA9IGRhdGEuZmluZEluZGV4KCh2dikgPT4gdi50aXRsZSA9PSB2di50aXRsZSlcXG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XFxuICAgICAgICAgICAgc2VsZi5wdXNoKHYpXFxuICAgICAgICAgICAgbGV0IHJ1bGUgPSBkYXRhLnNwbGljZShpbmRleCwgMSlbMF1cXG4gICAgICAgICAgICBpZiAoc2hvd0FsbCB8fCB2LnZpc2libGUpXFxuICAgICAgICAgICAgICAgIHJld3JpdGVEYXRhLnB1c2goT2JqZWN0LmFzc2lnbihydWxlLCB2KSlcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBzZWxmXFxuICAgIH0sIFtdKVxcbiAgICBkYXRhLmZvckVhY2goKHYpID0+IGN1c3RvbURhdGEucHVzaCh7IHRpdGxlOiB2LnRpdGxlLCB2aXNpYmxlOiB0cnVlIH0pKVxcbiAgICBzYXZlRmlsZSgnY3VzdG9tRGF0YScsIEpTT04uc3RyaW5naWZ5KGN1c3RvbURhdGEpKVxcbiAgICAkLmV4cG9ydHMgPSByZXdyaXRlRGF0YS5jb25jYXQoZGF0YSlcXG59XFxuXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLnjq/looPliqvmjIFcIixcInBhdGhcIjpcImhpamFja0VudlwiLFwicnVsZVwiOlwidmFyIHsgUlVMRSwgaXNJbmRleCwgcGFnZVRpdGxlIH0gPSBNWV9QQVJBTVNcXG5SVUxFID0gSlNPTi5wYXJzZShiYXNlNjREZWNvZGUoUlVMRSkpXFxudmFyIG9yaVJVTEUgPSAkLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9kYXRhTG9hZD9ydWxlPScgKyBRSU5HX1RJVExFKS5maW5kKCh2KSA9PiB2LnRpdGxlID09IFJVTEUudGl0bGUpXFxuaWYgKGlzSW5kZXgpIHtcXG4gICAgUlVMRSA9IG9yaVJVTEVcXG4gICAgdmFyIHsgdGFiSGVhZGVyLCBmeUFsbCB9ID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvQ2xhc3NUYWI/cnVsZT0nICsgUUlOR19USVRMRSwgT2JqZWN0LmFzc2lnbih7IFFJTkdfVElUTEU6IFFJTkdfVElUTEUgfSwgUlVMRSkpXFxuICAgIC8vIOWkhOeQhk1ZX1JVTEVcXG4gICAgTVlfUlVMRS5jbGFzc191cmwgPSB0YWJIZWFkZXIuZ2V0Q2xhc3MoZnlBbGwgPyAnZnlBbGwnIDogJ2Z5Y2xhc3MnKS51cmxcXG4gICAgTVlfUlVMRS5hcmVhX3VybCA9IGZ5QWxsID8gTVlfUlVMRS5jbGFzc191cmwgOiB0YWJIZWFkZXIuZ2V0Q2xhc3MoJ2Z5YXJlYScpLnVybFxcbiAgICBNWV9SVUxFLnllYXJfdXJsID0gZnlBbGwgPyBNWV9SVUxFLmNsYXNzX3VybCA6IHRhYkhlYWRlci5nZXRDbGFzcygnZnl5ZWFyJykudXJsXFxuICAgIE1ZX1JVTEUuc29ydF91cmwgPSBmeUFsbCA/IE1ZX1JVTEUuY2xhc3NfdXJsIDogdGFiSGVhZGVyLmdldENsYXNzKCdmeXNvcnQnKS51cmxcXG4gICAgTVlfUlVMRS51cmwgPSBSVUxFLnVybFxcbiAgICBNWV9SVUxFLmNvbF90eXBlID0gUlVMRS5jb2xfdHlwZVxcbiAgICBNWV9SVUxFLmRldGFpbF9jb2xfdHlwZSA9IFJVTEUuZGV0YWlsX2NvbF90eXBlXFxuICAgIE1ZX1JVTEUuZmluZF9ydWxlID0gUlVMRS5maW5kX3J1bGVcXG4gICAgTVlfUlVMRS5kZXRhaWxfZmluZF9ydWxlID0gUlVMRS5kZXRhaWxfZmluZF9ydWxlXFxuICAgIE1ZX1JVTEUucGFyYW1zID0ge31cXG59IGVsc2Uge1xcbiAgICBSVUxFLnBhZ2VzID0gb3JpUlVMRS5wYWdlc1xcbiAgICAvLyDlpITnkIZNWV9SVUxFXFxuICAgIE1ZX1JVTEUudXJsID0gTVlfUEFSQU1TLnVybFxcbiAgICBNWV9SVUxFLmNvbF90eXBlID0gUlVMRS5kZXRhaWxfY29sX3R5cGVcXG4gICAgTVlfUlVMRS5maW5kX3J1bGUgPSBSVUxFLmRldGFpbF9maW5kX3J1bGVcXG4gICAgTVlfUlVMRS5wYXJhbXMgPSBSVUxFLnBhcmFtc1xcbn1cXG5NWV9SVUxFLnBhZ2VzID0gUlVMRS5wYWdlc1xcbk1ZX1JVTEUucGFnZUxpc3QgPSBKU09OLnBhcnNlKE1ZX1JVTEUucGFnZXMgfHwgJ1tdJylcXG5NWV9SVUxFLnRpdGxlID0gUlVMRS50aXRsZVxcbk1ZX1JVTEUudWEgPSBSVUxFLnVhXFxubG9nKE1ZX1JVTEUudXJsKVxcbi8vIOi9veWFpeWHveaVsOW3peWFt1xcbnZhciB7IGdlbk15UnVsZSB9ID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvZnVuY1Rvb2xzP3J1bGU9JyArIFFJTkdfVElUTEUsIHtcXG4gICAgUUlOR19USVRMRTogUUlOR19USVRMRSxcXG4gICAgTVlfUlVMRTogTVlfUlVMRSxcXG4gICAgaXNJbmRleDogaXNJbmRleFxcbn0pXFxuLy8g6Ziy5q2icmVxdWlyZeWkmuasoei/kOihjFxcbmNvbnN0IG15Q29sbF9yZXF1aXJlZCA9IHt9XFxucmVxdWlyZSA9IGZ1bmN0aW9uKHBhcmFtMCwgcGFyYW0xLCBwYXJhbTIsIHBhcmFtMywgcGFyYW00KSB7XFxuICAgIGlmIChteUNvbGxfcmVxdWlyZWRbcGFyYW0wXSkgcmV0dXJuXFxuICAgIG15Q29sbF9yZXF1aXJlZFtwYXJhbTBdID0gdHJ1ZVxcbiAgICBwYXJhbTIgPSBwYXJhbTIgIT0gbnVsbCA/IHBhcmFtMiA6IDBcXG4gICAgcGFyYW0zID0gTVlfVElDS0VUXFxuICAgIHBhcmFtNCA9IGV2YWxcXG4gICAgcmV0dXJuIG1ldGhvZF9yZXF1aXJlLmludm9rZShqYXZhQ29udGV4dCwgcGFyYW0wLCBwYXJhbTEsIHBhcmFtMiwgcGFyYW0zLCBwYXJhbTQpXFxufVxcbnJlcXVpcmVDYWNoZSA9IGZ1bmN0aW9uKHBhcmFtMCwgcGFyYW0xLCBwYXJhbTIsIHBhcmFtMywgcGFyYW00LCBwYXJhbTUpIHtcXG4gICAgaWYgKG15Q29sbF9yZXF1aXJlZFtwYXJhbTBdKSByZXR1cm5cXG4gICAgbXlDb2xsX3JlcXVpcmVkW3BhcmFtMF0gPSB0cnVlXFxuICAgIHBhcmFtMyA9IHBhcmFtMyAhPSBudWxsID8gcGFyYW0zIDogMFxcbiAgICBwYXJhbTQgPSBNWV9USUNLRVRcXG4gICAgcGFyYW01ID0gZXZhbFxcbiAgICByZXR1cm4gbWV0aG9kX3JlcXVpcmVDYWNoZS5pbnZva2UoamF2YUNvbnRleHQsIHBhcmFtMCwgcGFyYW0xLCBwYXJhbTIsIHBhcmFtMywgcGFyYW00LCBwYXJhbTUpXFxufVxcbnJjID0gcmVxdWlyZUNhY2hlXFxuLy8g5pyA5paw56ug6IqC6KeE5YiZ546v5aKD5Yqr5oyBXFxuc2V0TGFzdENoYXB0ZXJSdWxlID0gZnVuY3Rpb24ocGFyYW0wKSB7XFxuICAgIGlmIChwYXJhbTAuc3RhcnRzV2l0aChcXFwianM6XFxcIikpIHtcXG4gICAgICAgIHBhcmFtMCA9ICdqczonICsgJC50b1N0cmluZygoUUlOR19USVRMRSwgTVlfUEFSQU1TKSA9PiB7XFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL3BhZ2UvaGlqYWNrRW52P3J1bGU9JyArIFFJTkdfVElUTEUpKS5ydWxlKVxcbiAgICAgICAgICAgIHZhciB7IHJ1blByZVJ1bGUgfSA9ICQucmVxdWlyZSgnaGlrZXI6Ly9wYWdlL2Z1bmNUb29scz9ydWxlPScgKyBRSU5HX1RJVExFKVxcbiAgICAgICAgICAgIHJ1blByZVJ1bGUob3JpUlVMRS5wcmVSdWxlKVxcbiAgICAgICAgfSwgUUlOR19USVRMRSwgeyB1cmw6IE1ZX1JVTEUudXJsLCBSVUxFOiBiYXNlNjRFbmNvZGUoSlNPTi5zdHJpbmdpZnkoZ2VuTXlSdWxlKCkpKSwgaXNJbmRleDogaXNJbmRleCB9KSArICc7JyArIHBhcmFtMC5zbGljZSgzKVxcbiAgICB9XFxuICAgIG1ldGhvZF9zZXRMYXN0Q2hhcHRlclJ1bGUuaW52b2tlKGphdmFDb250ZXh0LCBwYXJhbTApXFxufVxcbi8vIOWKqOaAgeaWsOWinuWHveaVsOWKq+aMgVxcbmFkZEl0ZW1BZnRlciA9IGZ1bmN0aW9uKHBhcmFtMCwgcGFyYW0xKSB7XFxuICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtMSkpIHBhcmFtMSA9IHBhcmFtMS5tYXAoaGlqYWNrRWwpXFxuICAgIGVsc2UgcGFyYW0xID0gaGlqYWNrRWwocGFyYW0xKVxcbiAgICBtZXRob2RfYWRkSXRlbUFmdGVyLmludm9rZShqYXZhQ29udGV4dCwgcGFyYW0wLCBwYXJhbTEpXFxufVxcbmFkZEl0ZW1CZWZvcmUgPSBmdW5jdGlvbihwYXJhbTAsIHBhcmFtMSkge1xcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJhbTEpKSBwYXJhbTEgPSBwYXJhbTEubWFwKGhpamFja0VsKVxcbiAgICBlbHNlIHBhcmFtMSA9IGhpamFja0VsKHBhcmFtMSlcXG4gICAgbWV0aG9kX2FkZEl0ZW1CZWZvcmUuaW52b2tlKGphdmFDb250ZXh0LCBwYXJhbTAsIHBhcmFtMSlcXG59XFxuXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLlh73mlbDlt6XlhbdcIixcInBhdGhcIjpcImZ1bmNUb29sc1wiLFwicnVsZVwiOlwibGV0IHsgUUlOR19USVRMRSwgTVlfUlVMRSwgaXNJbmRleCB9ID0gJC5pbXBvcnRQYXJhbVxcbmlmICghTVlfUlVMRSkgTVlfUlVMRSA9IHt9XFxuXFxuZnVuY3Rpb24gcnVuQ29kZShydWxlKSB7XFxuICAgIHRyeSB7XFxuICAgICAgICBsZXQgW2lucHV0LCBjb2RlXSA9IHJ1bGUuc3BsaXQoJy5qczonKVxcbiAgICAgICAgcmV0dXJuIGNvZGUgPyBldmFsKGNvZGUpIDogcnVsZVxcbiAgICB9IGNhdGNoIChlKSB7IHJldHVybiBydWxlIH1cXG59XFxuLy8g6aaW6aG16ZO+5o6l5pu/5o2i5YiG57G7XFxuZnVuY3Rpb24gaW5kZXhVcmwocGFyYW0pIHtcXG4gICAgTVlfUlVMRSA9IEpTT04ucGFyc2UoYmFzZTY0RGVjb2RlKE1ZX1JVTEUpKVxcbiAgICBsZXQgcGFnZU51bSA9IHBhcnNlSW50KHBhcmFtLnNwbGl0KCcjIyMnKVsxXSksXFxuICAgICAgICB1cmwgPSBNWV9SVUxFLnVybCxcXG4gICAgICAgIHsgZnlBbGwsIHRhYkhlYWRlciB9ID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvQ2xhc3NUYWI/cnVsZT0nICsgUUlOR19USVRMRSwgT2JqZWN0LmFzc2lnbih7IFFJTkdfVElUTEU6IFFJTkdfVElUTEUgfSwgTVlfUlVMRSkpXFxuXFxuICAgIHVybCA9IHRhYkhlYWRlci5zZXRVcmwoZnlBbGwgPyB1cmwucmVwbGFjZSgvZnlBbGwvZywgJyQke2Z5QWxsfScpIDogdXJsLnJlcGxhY2UoL2Z5KGNsYXNzfGFyZWF8eWVhcnxzb3J0KS9nLCAnJCR7ZnkkMX0nKSlcXG4gICAgdXJsID0gdXJsLnJlcGxhY2UoL2Z5cGFnZSg/OkAoLT9cXFxcZCspQCk/KD86XFxcXCooXFxcXGQrKUApPy9nLCAoXywgc3RhcnQsIHNwYWNlKSA9PiBwYXJzZUludChzdGFydCB8fCAwKSArIDEgKyAocGFnZU51bSAtIDEpICogcGFyc2VJbnQoc3BhY2UgfHwgMSkpXFxuICAgIHVybCA9IC9eKFtcXFxcc1xcXFxTXSo/KSg/OlxcXFxbZmlyc3RQYWdlPShbXFxcXHNcXFxcU10qPylcXFxcXSk/KD86KFxcXFwuanM6W1xcXFxzXFxcXFNdKj8pKT8kLy5leGVjKHVybClcXG4gICAgaWYgKHBhZ2VOdW0gPT0gMSAmJiB1cmxbMl0pIHVybFsxXSA9IHVybFsyXVxcbiAgICBpZiAodXJsWzNdICYmICF1cmxbMV0uaW5jbHVkZXMoJy5qczonKSkgdXJsWzFdICs9IHVybFszXVxcbiAgICByZXR1cm4gcnVuQ29kZSh1cmxbMV0pXFxufVxcblxcbmZ1bmN0aW9uIHBhcmFtSGFuZGxlKHVybFBhcmFtLCB1YSwgdXJsVG1wKSB7XFxuICAgIGxldCBjaGFyc2V0LCBwYXJhbVRtcFxcbiAgICB0cnkgeyAvLyDpk77mjqXnmoTnvJbnoIHjgIFVQeWSjFJlZmVyZXLlupTor6XmmK/pppblhYjnu6fmib/pppbpobXpk77mjqVcXG4gICAgICAgIFssICwgY2hhcnNldCwgcGFyYW1UbXBdID0gdXJsVG1wLnNwbGl0KCc7JylcXG4gICAgICAgIHBhcmFtVG1wID0gcGFyYW1UbXAubWF0Y2goL157KC4qKX0kLylbMV0uc3BsaXQoJyYmJylcXG4gICAgfSBjYXRjaCAoZSkgeyBwYXJhbVRtcCA9IFtdIH1cXG4gICAgbGV0IFVzZXJBZ2VudCA9IHBhcmFtVG1wLmZpbmQoKHYpID0+IHYuc3RhcnRzV2l0aCgnVXNlci1BZ2VudEAnKSksXFxuICAgICAgICBSZWZlcmVyID0gcGFyYW1UbXAuZmluZCgodikgPT4gdi5zdGFydHNXaXRoKCdSZWZlcmVyQCcpKVxcbiAgICB1cmxQYXJhbVswXSA9IHVybFBhcmFtWzBdIHx8ICdHRVQnXFxuICAgIHVybFBhcmFtWzFdID0gdXJsUGFyYW1bMV0gfHwgY2hhcnNldCB8fCAnVVRGLTgnXFxuICAgIHRyeSB7XFxuICAgICAgICB1cmxQYXJhbVsyXSA9IHVybFBhcmFtWzJdLm1hdGNoKC9eeyguKil9JC8pWzFdLnNwbGl0KCcmJicpXFxuICAgIH0gY2F0Y2ggKGUpIHsgdXJsUGFyYW1bMl0gPSBbXSB9XFxuICAgIC8vIOa3u+WKoOWFqOWxgFVB5ZKM5LiK57qnUmVmZXJlclxcbiAgICBpZiAoIXVybFBhcmFtWzJdLnNvbWUoKHYpID0+IHYuc3RhcnRzV2l0aCgnVXNlci1BZ2VudEAnKSkpIHtcXG4gICAgICAgIGlmIChVc2VyQWdlbnQpIHVybFBhcmFtWzJdLnB1c2goVXNlckFnZW50KVxcbiAgICAgICAgZWxzZSBpZiAodWEgPT0gJ3BjJylcXG4gICAgICAgICAgICB1cmxQYXJhbVsyXS5wdXNoKCdVc2VyLUFnZW50QCcgKyBQQ19VQS5yZXBsYWNlKC87L2csICfvvJvvvJsnKS5yZXBsYWNlKC9cXFxcPy8sICfvvJ/vvJ8nKSlcXG4gICAgICAgIGVsc2UgaWYgKHVhID09ICdtb2JpbGUnKVxcbiAgICAgICAgICAgIHVybFBhcmFtWzJdLnB1c2goJ1VzZXItQWdlbnRAJyArIE1PQklMRV9VQS5yZXBsYWNlKC87L2csICfvvJvvvJsnKS5yZXBsYWNlKC9cXFxcPy8sICfvvJ/vvJ8nKSlcXG4gICAgfVxcbiAgICBpZiAoUmVmZXJlciAmJiAhdXJsUGFyYW1bMl0uc29tZSgodikgPT4gdi5zdGFydHNXaXRoKCdSZWZlcmVyQCcpKSlcXG4gICAgICAgIHVybFBhcmFtWzJdLnB1c2goUmVmZXJlcilcXG4gICAgdXJsUGFyYW1bMl0gPSAneycgKyB1cmxQYXJhbVsyXS5qb2luKCcmJicpICsgJ30nXFxuICAgIHJldHVybiB1cmxQYXJhbS5qb2luKCc7JylcXG59XFxuLy8g6aKE5aSE55CG5bm25Yid5aeL5YyWY29uZmlnXFxuZnVuY3Rpb24gcnVuUHJlUnVsZShydWxlKSB7XFxuICAgIGlmICgodHlwZW9mIE1ZX1BBR0UgIT0gJ3VuZGVmaW5lZCcgJiYgIE1ZX1BBR0UgPT0gMSkgJiZcXG4gICAgICAgICAoaXNJbmRleCB8fCAhZ2V0TXlWYXIoJyRwcmVSdWxlXycgKyBNWV9SVUxFLnRpdGxlKSkpIHtcXG4gICAgICAgIGV2YWwocnVsZSlcXG4gICAgICAgIHB1dE15VmFyKCckcHJlUnVsZV8nICsgTVlfUlVMRS50aXRsZSwgJ1QnKVxcbiAgICB9XFxuICAgIGxldCBfY2ZnID0gZ2V0TXlWYXIoJ2luaXRDb25maWcnLCAne30nKVxcbiAgICBpZiAoX2NmZyAmJiBfY2ZnLmxlbmd0aCA+IDApIHtcXG4gICAgICAgIGNvbmZpZyA9IEpTT04ucGFyc2UoX2NmZylcXG4gICAgfVxcbn1cXG4vLyDmraPmlofop6PmnpDpgJrnlKjlj5jph49cXG5mdW5jdGlvbiBnZW5NeVJ1bGUoKSB7XFxuICAgIGxldCBSVUxFID0gT2JqZWN0LmFzc2lnbih7fSwgTVlfUlVMRSlcXG4gICAgZGVsZXRlIFJVTEUubGFzdF9jaGFwdGVyX3J1bGVcXG4gICAgZGVsZXRlIFJVTEUucHJlUnVsZVxcbiAgICBkZWxldGUgUlVMRS5wYWdlTGlzdFxcbiAgICBkZWxldGUgUlVMRS5wYWdlc1xcbiAgICByZXR1cm4gUlVMRVxcbn1cXG5cXG5mdW5jdGlvbiBnZW5FeFVybCh1cmwpIHtcXG4gICAgdXJsID0gdXJsLnNwbGl0KCc7JylcXG4gICAgcmV0dXJuIHVybC5zaGlmdCgpICsgJzsnICsgcGFyYW1IYW5kbGUodXJsLCBNWV9SVUxFLnVhLCBNWV9SVUxFLnVybClcXG59XFxuXFxuaGlqYWNrTGF6eVJ1bGUgPSAkLnRvU3RyaW5nKChRSU5HX1RJVExFLCBNWV9QQVJBTVMpID0+IHtcXG4gICAgaWYgKCFNWV9SVUxFKSBNWV9SVUxFID0ge31cXG4gICAgTVlfUEFSQU1TID0gSlNPTi5wYXJzZShiYXNlNjREZWNvZGUoTVlfUEFSQU1TKSlcXG4gICAgZXZhbChKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL3BhZ2UvaGlqYWNrRW52P3J1bGU9JyArIFFJTkdfVElUTEUpKS5ydWxlKVxcbiAgICB2YXIge1xcbiAgICAgICAgcGFyYW1IYW5kbGUsXFxuICAgICAgICBnZW5FeFVybCxcXG4gICAgICAgIGhpamFja0xhenlSdWxlLFxcbiAgICAgICAgaGlqYWNrRWxcXG4gICAgfSA9ICQucmVxdWlyZSgnaGlrZXI6Ly9wYWdlL2Z1bmNUb29scz9ydWxlPScgKyBRSU5HX1RJVExFKVxcbn0sIFFJTkdfVElUTEUsIGJhc2U2NEVuY29kZShKU09OLnN0cmluZ2lmeSh7IHVybDogTVlfUlVMRS51cmwsIFJVTEU6IGJhc2U2NEVuY29kZShKU09OLnN0cmluZ2lmeShnZW5NeVJ1bGUoKSkpLCBpc0luZGV4OiBpc0luZGV4IH0pKSlcXG5cXG5mdW5jdGlvbiBoaWphY2tFbChlbCkge1xcbiAgICBpZighZWwgfHwgdHlwZW9mIGVsICE9ICdvYmplY3QnKSByZXR1cm5cXG4gICAgaWYgKCFlbC5leHRyYSkgZWwuZXh0cmEgPSB7fVxcbiAgICBlbC5jb2xfdHlwZSA9IGVsLmNvbF90eXBlIHx8IE1ZX1JVTEUuY29sX3R5cGVcXG4gICAgbGV0IE5PV19SVUxFID0gT2JqZWN0LmFzc2lnbihnZW5NeVJ1bGUoKSwgeyBwYXJhbXM6IGVsLmV4dHJhIH0pXFxuXFxuICAgIGlmICh0eXBlb2YgZWwudXJsICE9ICdzdHJpbmcnIHx8XFxuICAgICAgICBbJ3g1X3dlYnZpZXdfc2luZ2xlJywgJ2lucHV0J10uc29tZSgodikgPT4gZWwuY29sX3R5cGUgPT0gdikgfHxcXG4gICAgICAgIFsn5rW36ZiU6KeG55WMJywgJ2phdmFzY3JpcHQ6J10uc29tZSgodikgPT4gZWwudXJsLnN0YXJ0c1dpdGgodikpIHx8XFxuICAgICAgICBbJ3J1bGUnLCAncGljcycsICd0b2FzdCcsICdjb3B5JywgJ2VkaXRGaWxlJywgJ3g1JywgJ3g1V2ViVmlldycsICd4NVBsYXknLCAnd2ViJywgJ3g1UnVsZScsICd3ZWJSdWxlJyxcXG4gICAgICAgICAgICAnZG93bmxvYWQnLCAnc2hhcmUnLCAnZmlsZVNlbGVjdCcsICd2aWRlbyddLnNvbWUoKHYpID0+IGVsLnVybC5zdGFydHNXaXRoKHYgKyAnOi8vJykpKSB7XFxuICAgICAgICByZXR1cm4gZWxcXG4gICAgfSBlbHNlIGlmIChlbC51cmwuc3RhcnRzV2l0aCgnaW5wdXQ6Ly8nKSkge1xcbiAgICAgICAgbGV0IHBhcmEgPSBKU09OLnBhcnNlKGVsLnVybC5zbGljZSg4KSlcXG4gICAgICAgIGlmIChwYXJhLmpzKSBwYXJhLmpzID0gaGlqYWNrTGF6eVJ1bGUgKyAnOycgKyBwYXJhLmpzXFxuICAgICAgICBlbC51cmwgPSAnaW5wdXQ6Ly8nICsgSlNPTi5zdHJpbmdpZnkocGFyYSlcXG4gICAgICAgIHJldHVybiBlbFxcbiAgICB9IGVsc2UgaWYgKGVsLnVybC5zdGFydHNXaXRoKCdjb25maXJtOi8vJykpIHtcXG4gICAgICAgIGxldCByZUluZGV4ID0gZWwudXJsLmluZGV4T2YoJy5qczonKVxcbiAgICAgICAgaWYgKHJlSW5kZXggPj0gMCkgZWwudXJsID0gZWwudXJsLnNsaWNlKDAsIHJlSW5kZXgpICsgJy5qczonICsgaGlqYWNrTGF6eVJ1bGUgKyAnOycgKyBlbC51cmwuc2xpY2UocmVJbmRleCArIDQpXFxuICAgICAgICByZXR1cm4gZWxcXG4gICAgfSBlbHNlIGlmIChlbC51cmwuc3RhcnRzV2l0aCgnc2VsZWN0Oi8vJykpIHtcXG4gICAgICAgIGxldCBwYXJhID0gSlNPTi5wYXJzZShlbC51cmwuc2xpY2UoOSkpXFxuICAgICAgICBpZiAocGFyYS5qcykgcGFyYS5qcyA9IGhpamFja0xhenlSdWxlICsgJzsnICsgcGFyYS5qc1xcbiAgICAgICAgZWwudXJsID0gJ3NlbGVjdDovLycgKyBKU09OLnN0cmluZ2lmeShwYXJhKVxcbiAgICAgICAgcmV0dXJuIGVsXFxuICAgIH0gZWxzZSBpZiAoZWwudXJsLmluY2x1ZGVzKCdAcnVsZT0nKSkge1xcbiAgICAgICAgbGV0IFtfLCB1cmwsIHJ1bGVdID0gZWwudXJsLm1hdGNoKC9eKFtcXFxcc1xcXFxTXSo/KUBydWxlPShbXFxcXHNcXFxcU10qKSQvKVxcbiAgICAgICAgZWwudXJsID0gdXJsXFxuICAgICAgICBOT1dfUlVMRS5kZXRhaWxfZmluZF9ydWxlID0gcnVsZVxcbiAgICAgICAgTk9XX1JVTEUuZGV0YWlsX2NvbF90eXBlID0gTVlfUlVMRS5jb2xfdHlwZVxcbiAgICB9IGVsc2UgaWYgKGVsLnVybC5zdGFydHNXaXRoKCdoaWtlcjovL3BhZ2UvJykpIHtcXG4gICAgICAgIGlmIChlbC51cmwuaW5jbHVkZXMoJ3J1bGU9JykgfHwgZWwuZXh0cmEucnVsZSlcXG4gICAgICAgICAgICByZXR1cm4gZWxcXG4gICAgICAgIGxldCBbXywgcGF0aCwgZmxhZywgcGFyYW1zXSA9IGVsLnVybC5tYXRjaCgvXmhpa2VyOlxcXFwvXFxcXC9wYWdlXFxcXC8oLis/KSgjLio/KT8oPzpcXFxcPyguKikpPyQvKSxcXG4gICAgICAgICAgICBzdWJQYWdlID0gTVlfUlVMRS5wYWdlTGlzdC5maW5kKCh2KSA9PiB2LnBhdGggPT0gcGF0aCksXFxuICAgICAgICAgICAgc3ViVXJsID0gKHBhcmFtcyB8fCAnJykuc3BsaXQoJyYnKS5maW5kKCh2KSA9PiB2LnN0YXJ0c1dpdGgoJ3VybD0nKSlcXG4gICAgICAgIGVsLnVybCA9IChzdWJVcmwgPyBzdWJVcmwuc2xpY2UoNCkucmVwbGFjZSgv77yf77yfL2csICc/JykucmVwbGFjZSgv77yG77yGL2csICcmJykgOiAoZWwuZXh0cmEgfHwge30pLnVybCkgfHwgJ2hpa2VyOi8vZW1wdHknICsgZmxhZyArICc/JyArIChwYXJhbXMgfHwgJycpXFxuICAgICAgICBOT1dfUlVMRS5kZXRhaWxfZmluZF9ydWxlID0gc3ViUGFnZS5ydWxlXFxuICAgICAgICBOT1dfUlVMRS5kZXRhaWxfY29sX3R5cGUgPSBzdWJQYWdlLmNvbF90eXBlXFxuICAgIH0gZWxzZSBpZiAoZWwudXJsLmluY2x1ZGVzKCdAbGF6eVJ1bGU9JykpIHtcXG4gICAgICAgIGxldCByZUluZGV4ID0gZWwudXJsLmluZGV4T2YoJy5qczonKVxcbiAgICAgICAgaWYgKHJlSW5kZXggPj0gMCkgZWwudXJsID0gZWwudXJsLnNsaWNlKDAsIHJlSW5kZXgpICsgJy5qczonICsgaGlqYWNrTGF6eVJ1bGUgKyAnOycgKyBlbC51cmwuc2xpY2UocmVJbmRleCArIDQpXFxuICAgICAgICByZXR1cm4gZWxcXG4gICAgfSBlbHNlIGlmIChpc0luZGV4KSB7XFxuICAgICAgICBpZiAoIU1ZX1JVTEUuZGV0YWlsX2ZpbmRfcnVsZSB8fCAvaGlrZXI6XFxcXC9cXFxcLyg/IWVtcHR5LiskKS8udGVzdChlbC51cmwpKSByZXR1cm4gZWxcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiBlbFxcbiAgICB9XFxuICAgIGVsLmV4dHJhID0gT2JqZWN0LmFzc2lnbih7fSwgZWwuZXh0cmEsIHtcXG4gICAgICAgIHVybDogZ2VuRXhVcmwoZWwudXJsKSxcXG4gICAgICAgIFJVTEU6IGJhc2U2NEVuY29kZShKU09OLnN0cmluZ2lmeShOT1dfUlVMRSkpLFxcbiAgICAgICAgcGFnZVRpdGxlOiBpc0luZGV4ICYmIGVsLnRpdGxlXFxuICAgIH0pXFxuICAgIGVsLnVybCA9ICdoaWtlcjovL3BhZ2UvZnJhbWVMb2FkP3J1bGU9JyArIFFJTkdfVElUTEVcXG4gICAgcmV0dXJuIGVsXFxufVxcbiQuZXhwb3J0cyA9IHtcXG4gICAgcnVuQ29kZTogcnVuQ29kZSxcXG4gICAgaW5kZXhVcmw6IGluZGV4VXJsLFxcbiAgICBwYXJhbUhhbmRsZTogcGFyYW1IYW5kbGUsXFxuICAgIHJ1blByZVJ1bGU6IHJ1blByZVJ1bGUsXFxuICAgIGdlbk15UnVsZTogZ2VuTXlSdWxlLFxcbiAgICBnZW5FeFVybDogZ2VuRXhVcmwsXFxuICAgIGhpamFja0xhenlSdWxlOiBoaWphY2tMYXp5UnVsZSxcXG4gICAgaGlqYWNrRWw6IGhpamFja0VsXFxufVxcblwifV0sXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIumYheWKqOa8q1wiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImhpa2VyOi8vcGFnZS9Db25maWc/cnVsZT3pmIXliqjmvKsmI25vUmVjb3JkSGlzdG9yeSNcIixcImNvbF90eXBlXCI6XCJpY29uXzJfcm91bmRcIixcImZpbmRfcnVsZVwiOlwianM6XFxuYWRkTGlzdGVuZXIoJ29uQ2xvc2UnLCAnY2xlYXJNeVZhcihcXFwic29ydEZsYWdcXFwiKTtyZWZyZXNoUGFnZSgpJylcXG5zZXRQYWdlVGl0bGUoJ+KamSDovbvlkIjpm4borr7nva4g4pqZJylcXG5jb25zdCBRSU5HX1RJVExFID0gZ2V0TXlWYXIoJ215Q29sbGVjdGlvbicpLFxcbiAgICB1cmwgPSBnZXRNeVZhcigncmVtb3RlVXJsJylcXG5sZXQgZGF0YSA9ICQucmVxdWlyZSgnaGlrZXI6Ly9wYWdlL2RhdGFMb2FkP3J1bGU9JyArIFFJTkdfVElUTEUsIHRydWUpLFxcbiAgICBlbCA9IFt7XFxuICAgICAgICB0aXRsZTogJzxiPiDmuIXpmaTnvJPlrZjvvIznq4vljbPmm7TmlrAgPHNtYWxsPiDvvIjln7rkuo7ov5znqIvku5PlupPvvIzkuI3opoHpopHnuYHngrnlh7vvvIknLFxcbiAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCh1cmwpID0+IHtcXG4gICAgICAgICAgICBpZiAodXJsLnN0YXJ0c1dpdGgoJ2hpa2VyOi8vJykgfHwgdXJsLnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSlcXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+S7k+W6k+S4uuacrOWcsOaWh+S7tu+8jOS4jeS8mui/m+ihjOe8k+WtmO+8jOacrOWKn+iDveS5n+aXoOaViCdcXG4gICAgICAgICAgICBkZWxldGVDYWNoZSh1cmwpXFxuICAgICAgICAgICAgYmFjayhmYWxzZSlcXG4gICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5pu05pawJ1xcbiAgICAgICAgfSwgdXJsKSxcXG4gICAgICAgIGltZzogJ2hpa2VyOi8vaW1hZ2VzL2ljb240JyxcXG4gICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJ1xcbiAgICB9XSxcXG4gICAgdXBkYXRlSW50ZXJ2YWwgPSByZWFkRmlsZSgndXBkYXRlSW50ZXJ2YWwnKSB8fCAnMScsXFxuICAgIG5ld1dpbmRvdyA9IHJlYWRGaWxlKCduZXdXaW5kb3cnKSxcXG4gICAgdGFiRm9sZCA9IHJlYWRGaWxlKCd0YWJGb2xkJyksXFxuICAgIGRpc2FibGVDdXN0b20gPSByZWFkRmlsZSgnZGlzYWJsZUN1c3RvbScpLFxcbiAgICBlZGl0TW9kZSA9IGRpc2FibGVDdXN0b20gPyAn5a+85YWl5rW36ZiUJyA6IGdldE15VmFyKCdlZGl0TW9kZScsICflkK/nlKgv56aB55SoJylcXG5cXG5lbC5wdXNoKHtcXG4gICAgdGl0bGU6ICcgIPCfkqEg5pu05paw6aKR546HOiAnICsgKHVwZGF0ZUludGVydmFsID09IDAgPyAn5omL5YqoJyA6IHVwZGF0ZUludGVydmFsICsgJ+WkqScpICsgJyAgJyxcXG4gICAgdXJsOiAkKHVwZGF0ZUludGVydmFsLCAn6L6T5YWl5pu05paw6Ze06ZqU77yI5aSp77yJ77yM5Li6MOWImeaJi+WKqOabtOaWsFxcXFxu5pys5Zyw5paH5Lu26ZO+5o6l5peg5pWIJykuaW5wdXQoKCkgPT4ge1xcbiAgICAgICAgaW5wdXQgPSBwYXJzZUludChpbnB1dClcXG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4oaW5wdXQpKSBpbnB1dCA9IDFcXG4gICAgICAgIGVsc2UgaWYgKGlucHV0IDwgMSkgaW5wdXQgPSAwXFxuICAgICAgICBzYXZlRmlsZSgndXBkYXRlSW50ZXJ2YWwnLCBpbnB1dC50b1N0cmluZygpKVxcbiAgICAgICAgcmVmcmVzaFBhZ2UoKVxcbiAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICB9KSxcXG4gICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcbn0sIHtcXG4gICAgdGl0bGU6ICcgIPCflqUg54us56uL6aaW6aG1OiAnICsgKG5ld1dpbmRvdyA/ICfmmK8nIDogJ+WQpicpICsgJyAgJyxcXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChuZXdXaW5kb3cpID0+IHtcXG4gICAgICAgIHNhdmVGaWxlKCduZXdXaW5kb3cnLCBuZXdXaW5kb3cgPyAnJyA6ICdUJylcXG4gICAgICAgIHJlZnJlc2hQYWdlKClcXG4gICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXG4gICAgfSwgbmV3V2luZG93KSxcXG4gICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcbn0sIHtcXG4gICAgdGl0bGU6ICcgIPCfkqAg5YiG57G75oqY5Y+gOiAnICsgKHRhYkZvbGQgPyAn5pivJyA6ICflkKYnKSArICcgICcsXFxuICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgodGFiRm9sZCkgPT4ge1xcbiAgICAgICAgc2F2ZUZpbGUoJ3RhYkZvbGQnLCB0YWJGb2xkID8gJycgOiAnVCcpXFxuICAgICAgICByZWZyZXNoUGFnZSgpXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgIH0sIHRhYkZvbGQpLFxcbiAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxufSwge1xcbiAgICB0aXRsZTogJyAg8J+SvCDlpIfku73mgaLlpI0gICcsXFxuICAgIHVybDogJChbJ+Wkh+S7vScsICfmgaLlpI0nXSwgMSkuc2VsZWN0KChRSU5HX1RJVExFLCB1cGRhdGVJbnRlcnZhbCwgbmV3V2luZG93LCB0YWJGb2xkLCBkaXNhYmxlQ3VzdG9tKSA9PiB7XFxuICAgICAgICBsZXQgdXJsID0gZ2V0TXlWYXIoJ3JlbW90ZVVybCcpXFxuICAgICAgICBpZiAoIXVybC5zdGFydHNXaXRoKCdoaWtlcjovLycpICYmICF1cmwuc3RhcnRzV2l0aCgnZmlsZTovLycpKVxcbiAgICAgICAgICAgIHVybCA9ICdoaWtlcjovL2ZpbGVzL2xpYnMvJyArIG1kNSh1cmwpICsgJy5qcydcXG4gICAgICAgIGVsc2UgaWYgKHVybC5zdGFydHNXaXRoKCdoaWtlcjovL3BhZ2UvJykpIHVybCA9ICdoaWtlcjovL2VtcHR5J1xcbiAgICAgICAgaWYgKGlucHV0ID09ICflpIfku70nKSByZXR1cm4gJCgnaGlrZXI6Ly9maWxlcy90bXAvJyArIFFJTkdfVElUTEUgKyAnX2JhY2t1cC5qc29uJywgJ+i+k+WFpeWkh+S7vei3r+W+hCcpXFxuICAgICAgICAgICAgLmlucHV0KCh1cmwsIHVwZGF0ZUludGVydmFsLCBuZXdXaW5kb3csIHRhYkZvbGQsIGRpc2FibGVDdXN0b20pID0+IHtcXG4gICAgICAgICAgICAgICAgbGV0IHJ1bGVzID0gcmVxdWVzdCh1cmwpLFxcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRGF0YSA9IHJlYWRGaWxlKCdjdXN0b21EYXRhJylcXG4gICAgICAgICAgICAgICAgd3JpdGVGaWxlKGlucHV0LCBKU09OLnN0cmluZ2lmeSh7XFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVJbnRlcnZhbDogdXBkYXRlSW50ZXJ2YWwsXFxuICAgICAgICAgICAgICAgICAgICBuZXdXaW5kb3c6IG5ld1dpbmRvdyxcXG4gICAgICAgICAgICAgICAgICAgIHRhYkZvbGQ6IHRhYkZvbGQsXFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQ3VzdG9tOiBkaXNhYmxlQ3VzdG9tLFxcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tRGF0YTogY3VzdG9tRGF0YSxcXG4gICAgICAgICAgICAgICAgICAgIHJ1bGVzOiBydWxlc1xcbiAgICAgICAgICAgICAgICB9KSlcXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suWkh+S7ve+8jOazqOaEj+iLpeS7k+W6k+S4uuWtkOmhtemdouWImeS4jeWkh+S7vSdcXG4gICAgICAgICAgICB9LCB1cmwsIHVwZGF0ZUludGVydmFsLCBuZXdXaW5kb3csIHRhYkZvbGQsIGRpc2FibGVDdXN0b20pXFxuICAgICAgICBlbHNlIHJldHVybiAkKCdoaWtlcjovL2ZpbGVzL3RtcC8nICsgUUlOR19USVRMRSArICdfYmFja3VwLmpzb24nLCAn6L6T5YWl5aSH5Lu96Lev5b6EJykuaW5wdXQoKHVybCkgPT4ge1xcbiAgICAgICAgICAgIGxldCB7IHVwZGF0ZUludGVydmFsLCBuZXdXaW5kb3csIHRhYkZvbGQsIGRpc2FibGVDdXN0b20sIGN1c3RvbURhdGEsIHJ1bGVzIH0gPSBKU09OLnBhcnNlKHJlcXVlc3QoaW5wdXQpKVxcbiAgICAgICAgICAgIHNhdmVGaWxlKCd1cGRhdGVJbnRlcnZhbCcsIHVwZGF0ZUludGVydmFsKVxcbiAgICAgICAgICAgIHNhdmVGaWxlKCduZXdXaW5kb3cnLCBuZXdXaW5kb3cpXFxuICAgICAgICAgICAgc2F2ZUZpbGUoJ3RhYkZvbGQnLCB0YWJGb2xkKVxcbiAgICAgICAgICAgIHNhdmVGaWxlKCdkaXNhYmxlQ3VzdG9tJywgZGlzYWJsZUN1c3RvbSlcXG4gICAgICAgICAgICBzYXZlRmlsZSgnY3VzdG9tRGF0YScsIGN1c3RvbURhdGEpXFxuICAgICAgICAgICAgaWYgKHJ1bGVzKSB3cml0ZUZpbGUodXJsLCBydWxlcylcXG4gICAgICAgICAgICByZWZyZXNoUGFnZSgpXFxuICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suaBouWkje+8jOWmguaenOS4jeaDs+WQjOatpei/nOeoi+S7k+W6k++8jOWPr+S7peiuvue9ruabtOaWsOmikeeOh+S4uuaJi+WKqCdcXG4gICAgICAgIH0sIHVybClcXG4gICAgfSwgUUlOR19USVRMRSwgdXBkYXRlSW50ZXJ2YWwsIG5ld1dpbmRvdywgdGFiRm9sZCwgZGlzYWJsZUN1c3RvbSksXFxuICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXG59LCB7XFxuICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdPGZvbnQgY29sb3I9XFxcIiM2NjY2NjZcXFwiPjxzbWFsbD7nibnliKvpuKPosKLvvIzlsI/nqIvluo/mj5DkvpvogIXvvJpcXFxcbicgK1xcbiAgICAgICAgZGF0YS5yZWR1Y2UoKHNlbGYsIHYpID0+IHYuYXV0aG9yID8gc2VsZi5jb25jYXQodi5hdXRob3Iuc3BsaXQoJyYnKSkgOiBzZWxmLCBbXSlcXG4gICAgICAgIC5maWx0ZXIoKHYsIGksIGFycikgPT4gdiAmJiBhcnIuaW5kZXhPZih2KSA9PSBpKS5qb2luKCfjgIEnKSxcXG4gICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxuICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXG59KVxcblxcbmVsLnB1c2goeyBjb2xfdHlwZTogJ2xpbmUnIH0sIHtcXG4gICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgJ/Cfk50nLnNtYWxsKCkgKyAnJm5ic3Ag6L275ZCI6ZuG6Ieq5a6a5LmJICZuYnNwJy5ib2xkKCkuZm9udGNvbG9yKCcjNzU3NTc1JykgKyAoZGlzYWJsZUN1c3RvbSA/ICfinYwnIDogJ+KtlScpLnNtYWxsKCksXFxuICAgIHVybDogJChbKGRpc2FibGVDdXN0b20gPyAn5ZCv55SoJyA6ICfnpoHnlKgnKSArICflkIjpm4boh6rlrprkuYknLCAn5riF6Zmk6Ieq5a6a5LmJ5pWw5o2uJywgJ+e8lui+kUpTT04nXSwgMSkuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgIHN3aXRjaCAoaW5wdXQuc2xpY2UoMCwgMikpIHtcXG4gICAgICAgICAgICBjYXNlICfmuIXpmaQnOlxcbiAgICAgICAgICAgICAgICBkZWxldGVGaWxlKCdjdXN0b21EYXRhJylcXG4gICAgICAgICAgICAgICAgYnJlYWtcXG4gICAgICAgICAgICBjYXNlICflkK/nlKgnOlxcbiAgICAgICAgICAgICAgICBzYXZlRmlsZSgnZGlzYWJsZUN1c3RvbScsICcnKVxcbiAgICAgICAgICAgICAgICBicmVha1xcbiAgICAgICAgICAgIGNhc2UgJ+emgeeUqCc6XFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdkaXNhYmxlQ3VzdG9tJywgJ1QnKVxcbiAgICAgICAgICAgICAgICBpbnB1dCArPSAnXFxcXG7lsI/nqIvluo/lkK/nlKgv56aB55So44CB6YeN5paw5o6S5bqP562J5pON5L2c5Z2H5LiN5Lya5L2T546w5Zyo6aaW6aG15bCP56iL5bqP5YiX6KGo5LitJ1xcbiAgICAgICAgICAgICAgICBicmVha1xcbiAgICAgICAgICAgIGNhc2UgJ+e8lui+kSc6XFxuICAgICAgICAgICAgICAgIGxldCB1cmwgPSBnZXRNeVZhcigncmVtb3RlVXJsJylcXG4gICAgICAgICAgICAgICAgaWYgKCF1cmwuc3RhcnRzV2l0aCgnaGlrZXI6Ly9maWxlcy8nKSAmJiAhdXJsLnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSlcXG4gICAgICAgICAgICAgICAgICAgIHVybCA9ICdoaWtlcjovL2ZpbGVzL2xpYnMvJyArIG1kNSh1cmwpICsgJy5qcydcXG4gICAgICAgICAgICAgICAgcmV0dXJuICAnaGlrZXI6Ly9wYWdlL2ludGVyZmFjZSNub1JlZnJlc2gjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5Iz9ydWxlPUpTT07nvJbovpHlmagmSnNvbj0nK2Jhc2U2NEVuY29kZSh1cmwpXFxuICAgICAgICB9XFxuICAgICAgICByZWZyZXNoUGFnZShmYWxzZSlcXG4gICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7InICsgaW5wdXRcXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxuICAgIGV4dHJhOiB7IGxpbmVWaXNpYmxlOiBmYWxzZSB9XFxufSk7XFxuKGRpc2FibGVDdXN0b20gPyBbJ+WvvOWFpea1t+mYlCddIDogWyflkK/nlKgv56aB55SoJywgJ+mHjeaWsOaOkuW6jycsICfmm7TmlLnlm77moIcnLCAn5a+85YWl5rW36ZiUJ10pLmZvckVhY2goKHYpID0+IHtcXG4gICAgZWwucHVzaCh7XFxuICAgICAgICB0aXRsZTogdiA9PSBlZGl0TW9kZSA/ICfigJzigJzigJ3igJ0nICsgdi5ib2xkKCkuZm9udGNvbG9yKCcjMTJiNjY4JykgOiB2LFxcbiAgICAgICAgdXJsOiB2ID09IGVkaXRNb2RlID8gJ2hpa2VyOi8vZW1wdHknIDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgodikgPT4ge1xcbiAgICAgICAgICAgIHB1dE15VmFyKCdlZGl0TW9kZScsIHYpXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpXFxuICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICAgICAgfSwgdiksXFxuICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxuICAgIH0pXFxufSk7XFxuaWYgKGVkaXRNb2RlID09ICflr7zlhaXmtbfpmJQnKSBlbC5wdXNoKHtcXG4gICAgdGl0bGU6ICflhajpg6jlr7zlhaUnLFxcbiAgICB1cmw6ICfmtbfpmJTop4bnlYzvv6Vob21lX3J1bGVfdXJs77+lJyArICh1cmwuc3RhcnRzV2l0aCgnaGlrZXI6Ly8nKSB8fCB1cmwuc3RhcnRzV2l0aCgnZmlsZTovLycpID8gdXJsIDogJ2hpa2VyOi8vZmlsZXMvbGlicy8nICsgbWQ1KHVybCkgKyAnLmpzJyksXFxuICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxuICAgIGV4dHJhOiB7IGxpbmVWaXNpYmxlOiBmYWxzZSB9XFxufSk7XFxuKGRpc2FibGVDdXN0b20gPyBkYXRhIDogSlNPTi5wYXJzZShyZWFkRmlsZSgnY3VzdG9tRGF0YScpIHx8ICdbXScpKS5mb3JFYWNoKCh2LCBpKSA9PiB7XFxuICAgIGxldCBkID0geyB0aXRsZTogdi50aXRsZSwgaW1nOiBkYXRhW2ldLmljb24gfVxcbiAgICBzd2l0Y2ggKGVkaXRNb2RlKSB7XFxuICAgICAgICBjYXNlICflkK/nlKgv56aB55SoJzpcXG4gICAgICAgICAgICBkLnRpdGxlID0gKHYudmlzaWJsZSA/ICfwn5+iICAnIDogJ/CflLQgICcpICsgZC50aXRsZVxcbiAgICAgICAgICAgIGQudXJsID0gJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoaSkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgcnVsZXMgPSBKU09OLnBhcnNlKHJlYWRGaWxlKCdjdXN0b21EYXRhJykgfHwgJ1tdJylcXG4gICAgICAgICAgICAgICAgcnVsZXNbaV0udmlzaWJsZSA9ICFydWxlc1tpXS52aXNpYmxlXFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdjdXN0b21EYXRhJywgSlNPTi5zdHJpbmdpZnkocnVsZXMpKVxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSlcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICAgICAgICAgIH0sIGkpXFxuICAgICAgICAgICAgYnJlYWtcXG4gICAgICAgIGNhc2UgJ+mHjeaWsOaOkuW6jyc6XFxuICAgICAgICAgICAgbGV0IHNvcnRGbGFnID0gcGFyc2VJbnQoZ2V0TXlWYXIoJ3NvcnRGbGFnJywgJy0xJykpXFxuICAgICAgICAgICAgZC50aXRsZSA9IChzb3J0RmxhZyA9PSBpID8gJ/CflIMgICcgOiAnJykgKyBkLnRpdGxlXFxuICAgICAgICAgICAgaWYgKHNvcnRGbGFnID09IC0xKVxcbiAgICAgICAgICAgICAgICBkLnVybCA9ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGkpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKCdzb3J0RmxhZycsIGkudG9TdHJpbmcoKSlcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+mAieaLqeimgeenu+WKqOWIsOeahOS9jee9ridcXG4gICAgICAgICAgICAgICAgfSwgaSlcXG4gICAgICAgICAgICBlbHNlXFxuICAgICAgICAgICAgICAgIGQudXJsID0gJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgob2xkSW5kZXgsIG5ld0luZGV4KSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgcnVsZXMgPSBKU09OLnBhcnNlKHJlYWRGaWxlKCdjdXN0b21EYXRhJykgfHwgJ1tdJylcXG4gICAgICAgICAgICAgICAgICAgIHJ1bGVzLnNwbGljZShuZXdJbmRleCwgMCwgcnVsZXMuc3BsaWNlKG9sZEluZGV4LCAxKVswXSlcXG4gICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdjdXN0b21EYXRhJywgSlNPTi5zdHJpbmdpZnkocnVsZXMpKVxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ3NvcnRGbGFnJywgJy0xJylcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICAgICAgICAgICAgICB9LCBzb3J0RmxhZywgaSlcXG4gICAgICAgICAgICBicmVha1xcbiAgICAgICAgY2FzZSAn5pu05pS55Zu+5qCHJzpcXG4gICAgICAgICAgICBkLnVybCA9ICQodi5pY29uIHx8ICcnLCAn6L6T5YWl5paw5Zu+5qCH5Zyw5Z2A5oiW6aKc6Imy5Luj56CB77yaJykuaW5wdXQoKGkpID0+IHtcXG4gICAgICAgICAgICAgICAgbGV0IHJ1bGVzID0gSlNPTi5wYXJzZShyZWFkRmlsZSgnY3VzdG9tRGF0YScpIHx8ICdbXScpXFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dClcXG4gICAgICAgICAgICAgICAgICAgIHJ1bGVzW2ldLmljb24gPSBpbnB1dFxcbiAgICAgICAgICAgICAgICBlbHNlXFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcnVsZXNbaV0uaWNvblxcbiAgICAgICAgICAgICAgICBzYXZlRmlsZSgnY3VzdG9tRGF0YScsIEpTT04uc3RyaW5naWZ5KHJ1bGVzKSlcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXG4gICAgICAgICAgICB9LCBpKVxcbiAgICAgICAgICAgIGJyZWFrXFxuICAgICAgICBjYXNlICflr7zlhaXmtbfpmJQnOlxcbiAgICAgICAgICAgIGQudXJsID0gJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoaSkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9ICQucmVxdWlyZSgnaGlrZXI6Ly9wYWdlL2RhdGFMb2FkP3J1bGU9JyArIGdldE15VmFyKCdteUNvbGxlY3Rpb24nKSwgdHJ1ZSlcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdydWxlOi8vJyArIGJhc2U2NEVuY29kZShKU09OLnN0cmluZ2lmeShkYXRhW2ldKSlcXG4gICAgICAgICAgICB9LCBpKVxcbiAgICAgICAgICAgIGJyZWFrXFxuICAgIH1cXG4gICAgZWwucHVzaChkKVxcbn0pXFxuc2V0UmVzdWx0KGVsKVxcblwiLFwiZ3JvdXBcIjpcIuiBmuWQiFwiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwicHV0TXlWYXIoJ215Q29sbGVjdGlvbicsIE1ZX1JVTEUudGl0bGUpXFxucHV0TXlWYXIoJ3JlbW90ZVVybCcsICdodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvcnVsZWxpc3QuanNvbj9pZD02NjA5JmF1dGg9MWE1NjI5YWMtMTQzOC01NWI1LTg2MjQtMzFlOGQ3ODVhYTA3JylcXG4vLyBcXG4vKlxcbiovXCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJ0ZXh0XzFcXFwiLFxcXCJuYW1lXFxcIjpcXFwiQ2xhc3NUYWJcXFwiLFxcXCJwYXRoXFxcIjpcXFwiQ2xhc3NUYWJcXFwiLFxcXCJydWxlXFxcIjpcXFwidmFyIHtcXFxcbiAgICBRSU5HX1RJVExFLCB0aXRsZSwgdXJsLFxcXFxuICAgIGNsYXNzX25hbWUsIGNsYXNzX3VybCxcXFxcbiAgICBhcmVhX25hbWUsIGFyZWFfdXJsLFxcXFxuICAgIHllYXJfbmFtZSwgeWVhcl91cmwsXFxcXG4gICAgc29ydF9uYW1lLCBzb3J0X3VybFxcXFxufSA9ICQuaW1wb3J0UGFyYW1cXFxcbmNvbnN0IENsYXNzVGFiID0gZnVuY3Rpb24oY2xhc3NBcnJheSwgcGFyYW1zKSB7XFxcXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBwYXJhbXMpXFxcXG4gICAgdGhpcy5hcnIgPSBjbGFzc0FycmF5Lm1hcCh2ID0+IHRoaXMuaW5pdCh2KSlcXFxcbiAgICB0aGlzLnNpZ24gPSAnJCcgKyBRSU5HX1RJVExFICsgJ18nICsgKHRoaXMubmFtZSB8fCAnJykgKyAnXydcXFxcbiAgICB0aGlzLmNvbG9yID0gdGhpcy5jb2xvciB8fCAnIzEyYjY2OCdcXFxcbiAgICB0aGlzLmJvdW5kYXJ5ID0gdGhpcy5ib3VuZGFyeSB8fCAnYmxhbmtfYmxvY2snXFxcXG59XFxcXG5DbGFzc1RhYi5wcm90b3R5cGUgPSB7XFxcXG4gICAgY29uc3RydWN0b3I6IENsYXNzVGFiLFxcXFxuICAgIGxvYWQoZWwpIHtcXFxcbiAgICAgICAgbGV0IGZvbGRlZCA9IHRoaXMuZm9sZCAmJiBnZXRWYXIoJyRmb2xkXycgKyB0aGlzLnNpZ24sICcnKVxcXFxuICAgICAgICBpZiAodGhpcy5hcnIubGVuZ3RoID4gMSAmJiB0aGlzLmZvbGQpIGVsLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgKGZvbGRlZCA/ICfilrYnIDogJ+KWvCcpLmZvbnRjb2xvcignIzA0OWVmZicpLFxcXFxuICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChzaWduLCBmb2xkZWQpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBwdXRWYXIoJyRmb2xkXycgKyBzaWduLCBmb2xkZWQgPyAnJyA6ICdUJylcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSlcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXG4gICAgICAgICAgICB9LCB0aGlzLnNpZ24sIGZvbGRlZCksXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxcXG4gICAgICAgIH0pXFxcXG4gICAgICAgIGxldCBhcnIgPSBmb2xkZWQgPyBbdGhpcy5hcnJbMF1dIDogdGhpcy5hcnJcXFxcbiAgICAgICAgYXJyLmZvckVhY2goKHYpID0+IHtcXFxcbiAgICAgICAgICAgIGxldCB7IGlkLCBjbGFzc19uYW1lLCBjbGFzc191cmwgfSA9IHYsXFxcXG4gICAgICAgICAgICBzZWxlY3RlZCA9IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0Q2xhc3MoaWQpKVxcXFxuICAgICAgICAgICAgY2xhc3NfbmFtZS5mb3JFYWNoKChuYW1lLCBpKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHVybCA9IGNsYXNzX3VybFtpXSxcXFxcbiAgICAgICAgICAgICAgICAgICAgbm93ID0gSlNPTi5zdHJpbmdpZnkoeyBuYW1lOiBuYW1lLCB1cmw6IHVybCB9KVxcXFxuICAgICAgICAgICAgICAgIGVsLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogc2VsZWN0ZWQgPT0gbm93ID8gJ+KAnOKAnOKAneKAnScgKyBuYW1lLmZvbnRjb2xvcih0aGlzLmNvbG9yKS5ib2xkKCkgOiBuYW1lLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHNlbGVjdGVkID09IG5vdyA/ICdoaWtlcjovL2VtcHR5JyA6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKHNpZ24sIGlkLCBub3cpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1dFZhcihzaWduICsgaWQsIG5vdylcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLnNpZ24sIGlkLCBub3cpLFxcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxcXG4gICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICBlbC5wdXNoKHsgY29sX3R5cGU6IHRoaXMuYm91bmRhcnkgfSlcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9LFxcXFxuICAgIGluaXQoY2xhc3NPYmplY3QpIHtcXFxcbiAgICAgICAgaWYgKHR5cGVvZiBjbGFzc09iamVjdC5jbGFzc19uYW1lID09ICdzdHJpbmcnKVxcXFxuICAgICAgICAgICAgY2xhc3NPYmplY3QuY2xhc3NfbmFtZSA9IGNsYXNzT2JqZWN0LmNsYXNzX25hbWUuc3BsaXQoJyYnKVxcXFxuICAgICAgICBpZiAodHlwZW9mIGNsYXNzT2JqZWN0LmNsYXNzX3VybCA9PSAnc3RyaW5nJylcXFxcbiAgICAgICAgICAgIGNsYXNzT2JqZWN0LmNsYXNzX3VybCA9IGNsYXNzT2JqZWN0LmNsYXNzX3VybC5zcGxpdCgnJicpLm1hcCgodikgPT4gdi50cmltKCkpXFxcXG4gICAgICAgIHJldHVybiBjbGFzc09iamVjdFxcXFxuICAgIH0sXFxcXG4gICAgcHVzaChjbGFzc09iamVjdCkge1xcXFxuICAgICAgICB0aGlzLmFyci5wdXNoKHRoaXMuaW5pdChjbGFzc09iamVjdCkpXFxcXG4gICAgfSxcXFxcbiAgICBnZXRDbGFzcyhpZCkge1xcXFxuICAgICAgICBsZXQgZGVmYXVsdENsYXNzID0gdGhpcy5hcnIuZmluZChpdGVtID0+IGl0ZW0uaWQgPT0gaWQpXFxcXG4gICAgICAgIGRlZmF1bHRDbGFzcyA9IEpTT04uc3RyaW5naWZ5KGRlZmF1bHRDbGFzcyA/IHtcXFxcbiAgICAgICAgICAgIG5hbWU6IGRlZmF1bHRDbGFzcy5jbGFzc19uYW1lWzBdLFxcXFxuICAgICAgICAgICAgdXJsOiBkZWZhdWx0Q2xhc3MuY2xhc3NfdXJsWzBdXFxcXG4gICAgICAgIH0gOiB7IG5hbWU6ICAnY2Fubm90IGZpbmQgaWQ6ICcgKyBpZCArICcgaW4gY2xhc3NUYWI6ICcgKyB0aGlzLnNpZ24sIHVybDogJyd9KVxcXFxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShnZXRWYXIodGhpcy5zaWduICsgaWQsIGRlZmF1bHRDbGFzcykpXFxcXG4gICAgfSxcXFxcbiAgICBzZXRVcmwodXJsKSB7XFxcXG4gICAgICAgIHJldHVybiB1cmwucmVwbGFjZSgvXFxcXFxcXFwkXFxcXFxcXFx7KFtefV0qKVxcXFxcXFxcfS9nLCAoXywgaWQpID0+IHRoaXMuZ2V0Q2xhc3MoaWQpLnVybClcXFxcbiAgICB9XFxcXG59XFxcXG4vLyDnlJ/miJDlpLTpg6jliIbnsbtcXFxcbmxldCBmeUFsbCA9IHVybC5pbmNsdWRlcygnZnlBbGwnKSxcXFxcbiAgICB0YWJIZWFkZXIgPSBbXVxcXFxuaWYgKGNsYXNzX25hbWUpIHRhYkhlYWRlci5wdXNoKHtcXFxcbiAgICBpZDogZnlBbGwgPyAnZnlBbGwnIDogJ2Z5Y2xhc3MnLFxcXFxuICAgIGNsYXNzX25hbWU6IGNsYXNzX25hbWUsXFxcXG4gICAgY2xhc3NfdXJsOiBjbGFzc191cmxcXFxcbn0pXFxcXG5pZiAoYXJlYV9uYW1lKSB0YWJIZWFkZXIucHVzaCh7XFxcXG4gICAgaWQ6IGZ5QWxsID8gJ2Z5QWxsJyA6ICdmeWFyZWEnLFxcXFxuICAgIGNsYXNzX25hbWU6IGFyZWFfbmFtZSxcXFxcbiAgICBjbGFzc191cmw6IGFyZWFfdXJsXFxcXG59KVxcXFxuaWYgKHllYXJfbmFtZSkgdGFiSGVhZGVyLnB1c2goe1xcXFxuICAgIGlkOiBmeUFsbCA/ICdmeUFsbCcgOiAnZnl5ZWFyJyxcXFxcbiAgICBjbGFzc19uYW1lOiB5ZWFyX25hbWUsXFxcXG4gICAgY2xhc3NfdXJsOiB5ZWFyX3VybFxcXFxufSlcXFxcbmlmIChzb3J0X25hbWUpIHRhYkhlYWRlci5wdXNoKHtcXFxcbiAgICBpZDogZnlBbGwgPyAnZnlBbGwnIDogJ2Z5c29ydCcsXFxcXG4gICAgY2xhc3NfbmFtZTogc29ydF9uYW1lLFxcXFxuICAgIGNsYXNzX3VybDogc29ydF91cmxcXFxcbn0pXFxcXG4kLmV4cG9ydHMgPSB7XFxcXG4gICAgZnlBbGw6IGZ5QWxsLFxcXFxuICAgIHRhYkhlYWRlcjogbmV3IENsYXNzVGFiKHRhYkhlYWRlciwgeyBuYW1lOiB0aXRsZSwgZm9sZDogcmVhZEZpbGUoJ3RhYkZvbGQnKSwgfSlcXFxcbn1cXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJpY29uXzJfcm91bmRcXFwiLFxcXCJuYW1lXFxcIjpcXFwi6K6+572uXFxcIixcXFwicGF0aFxcXCI6XFxcIkNvbmZpZ1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmFkZExpc3RlbmVyKCdvbkNsb3NlJywgJ2NsZWFyTXlWYXIoXFxcXFxcXCJzb3J0RmxhZ1xcXFxcXFwiKTtyZWZyZXNoUGFnZSgpJylcXFxcbnNldFBhZ2VUaXRsZSgn4pqZIOi9u+WQiOmbhuiuvue9riDimpknKVxcXFxuY29uc3QgUUlOR19USVRMRSA9IGdldE15VmFyKCdteUNvbGxlY3Rpb24nKSxcXFxcbiAgICB1cmwgPSBnZXRNeVZhcigncmVtb3RlVXJsJylcXFxcbmxldCBkYXRhID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvZGF0YUxvYWQ/cnVsZT0nICsgUUlOR19USVRMRSwgdHJ1ZSksXFxcXG4gICAgZWwgPSBbe1xcXFxuICAgICAgICB0aXRsZTogJzxiPiDmuIXpmaTnvJPlrZjvvIznq4vljbPmm7TmlrAgPHNtYWxsPiDvvIjln7rkuo7ov5znqIvku5PlupPvvIzkuI3opoHpopHnuYHngrnlh7vvvIknLFxcXFxuICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKHVybCkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKHVybC5zdGFydHNXaXRoKCdoaWtlcjovLycpIHx8IHVybC5zdGFydHNXaXRoKCdmaWxlOi8vJykpXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+S7k+W6k+S4uuacrOWcsOaWh+S7tu+8jOS4jeS8mui/m+ihjOe8k+WtmO+8jOacrOWKn+iDveS5n+aXoOaViCdcXFxcbiAgICAgICAgICAgIGRlbGV0ZUNhY2hlKHVybClcXFxcbiAgICAgICAgICAgIGJhY2soZmFsc2UpXFxcXG4gICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5pu05pawJ1xcXFxuICAgICAgICB9LCB1cmwpLFxcXFxuICAgICAgICBpbWc6ICdoaWtlcjovL2ltYWdlcy9pY29uNCcsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJ1xcXFxuICAgIH1dLFxcXFxuICAgIHVwZGF0ZUludGVydmFsID0gcmVhZEZpbGUoJ3VwZGF0ZUludGVydmFsJykgfHwgJzEnLFxcXFxuICAgIG5ld1dpbmRvdyA9IHJlYWRGaWxlKCduZXdXaW5kb3cnKSxcXFxcbiAgICB0YWJGb2xkID0gcmVhZEZpbGUoJ3RhYkZvbGQnKSxcXFxcbiAgICBkaXNhYmxlQ3VzdG9tID0gcmVhZEZpbGUoJ2Rpc2FibGVDdXN0b20nKSxcXFxcbiAgICBlZGl0TW9kZSA9IGRpc2FibGVDdXN0b20gPyAn5a+85YWl5rW36ZiUJyA6IGdldE15VmFyKCdlZGl0TW9kZScsICflkK/nlKgv56aB55SoJylcXFxcblxcXFxuZWwucHVzaCh7XFxcXG4gICAgdGl0bGU6ICcgIPCfkqEg5pu05paw6aKR546HOiAnICsgKHVwZGF0ZUludGVydmFsID09IDAgPyAn5omL5YqoJyA6IHVwZGF0ZUludGVydmFsICsgJ+WkqScpICsgJyAgJyxcXFxcbiAgICB1cmw6ICQodXBkYXRlSW50ZXJ2YWwsICfovpPlhaXmm7TmlrDpl7TpmpTvvIjlpKnvvInvvIzkuLow5YiZ5omL5Yqo5pu05pawXFxcXFxcXFxu5pys5Zyw5paH5Lu26ZO+5o6l5peg5pWIJykuaW5wdXQoKCkgPT4ge1xcXFxuICAgICAgICBpbnB1dCA9IHBhcnNlSW50KGlucHV0KVxcXFxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0KSkgaW5wdXQgPSAxXFxcXG4gICAgICAgIGVsc2UgaWYgKGlucHV0IDwgMSkgaW5wdXQgPSAwXFxcXG4gICAgICAgIHNhdmVGaWxlKCd1cGRhdGVJbnRlcnZhbCcsIGlucHV0LnRvU3RyaW5nKCkpXFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKClcXFxcbiAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxuICAgIH0pLFxcXFxuICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXFxcbn0sIHtcXFxcbiAgICB0aXRsZTogJyAg8J+WpSDni6znq4vpppbpobU6ICcgKyAobmV3V2luZG93ID8gJ+aYrycgOiAn5ZCmJykgKyAnICAnLFxcXFxuICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgobmV3V2luZG93KSA9PiB7XFxcXG4gICAgICAgIHNhdmVGaWxlKCduZXdXaW5kb3cnLCBuZXdXaW5kb3cgPyAnJyA6ICdUJylcXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UoKVxcXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXG4gICAgfSwgbmV3V2luZG93KSxcXFxcbiAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxcXG59LCB7XFxcXG4gICAgdGl0bGU6ICcgIPCfkqAg5YiG57G75oqY5Y+gOiAnICsgKHRhYkZvbGQgPyAn5pivJyA6ICflkKYnKSArICcgICcsXFxcXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCh0YWJGb2xkKSA9PiB7XFxcXG4gICAgICAgIHNhdmVGaWxlKCd0YWJGb2xkJywgdGFiRm9sZCA/ICcnIDogJ1QnKVxcXFxuICAgICAgICByZWZyZXNoUGFnZSgpXFxcXG4gICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcbiAgICB9LCB0YWJGb2xkKSxcXFxcbiAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxcXG59LCB7XFxcXG4gICAgdGl0bGU6ICcgIPCfkrwg5aSH5Lu95oGi5aSNICAnLFxcXFxuICAgIHVybDogJChbJ+Wkh+S7vScsICfmgaLlpI0nXSwgMSkuc2VsZWN0KChRSU5HX1RJVExFLCB1cGRhdGVJbnRlcnZhbCwgbmV3V2luZG93LCB0YWJGb2xkLCBkaXNhYmxlQ3VzdG9tKSA9PiB7XFxcXG4gICAgICAgIGxldCB1cmwgPSBnZXRNeVZhcigncmVtb3RlVXJsJylcXFxcbiAgICAgICAgaWYgKCF1cmwuc3RhcnRzV2l0aCgnaGlrZXI6Ly8nKSAmJiAhdXJsLnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSlcXFxcbiAgICAgICAgICAgIHVybCA9ICdoaWtlcjovL2ZpbGVzL2xpYnMvJyArIG1kNSh1cmwpICsgJy5qcydcXFxcbiAgICAgICAgZWxzZSBpZiAodXJsLnN0YXJ0c1dpdGgoJ2hpa2VyOi8vcGFnZS8nKSkgdXJsID0gJ2hpa2VyOi8vZW1wdHknXFxcXG4gICAgICAgIGlmIChpbnB1dCA9PSAn5aSH5Lu9JykgcmV0dXJuICQoJ2hpa2VyOi8vZmlsZXMvdG1wLycgKyBRSU5HX1RJVExFICsgJ19iYWNrdXAuanNvbicsICfovpPlhaXlpIfku73ot6/lvoQnKVxcXFxuICAgICAgICAgICAgLmlucHV0KCh1cmwsIHVwZGF0ZUludGVydmFsLCBuZXdXaW5kb3csIHRhYkZvbGQsIGRpc2FibGVDdXN0b20pID0+IHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgcnVsZXMgPSByZXF1ZXN0KHVybCksXFxcXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbURhdGEgPSByZWFkRmlsZSgnY3VzdG9tRGF0YScpXFxcXG4gICAgICAgICAgICAgICAgd3JpdGVGaWxlKGlucHV0LCBKU09OLnN0cmluZ2lmeSh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUludGVydmFsOiB1cGRhdGVJbnRlcnZhbCxcXFxcbiAgICAgICAgICAgICAgICAgICAgbmV3V2luZG93OiBuZXdXaW5kb3csXFxcXG4gICAgICAgICAgICAgICAgICAgIHRhYkZvbGQ6IHRhYkZvbGQsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVDdXN0b206IGRpc2FibGVDdXN0b20sXFxcXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbURhdGE6IGN1c3RvbURhdGEsXFxcXG4gICAgICAgICAgICAgICAgICAgIHJ1bGVzOiBydWxlc1xcXFxuICAgICAgICAgICAgICAgIH0pKVxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7LlpIfku73vvIzms6jmhI/oi6Xku5PlupPkuLrlrZDpobXpnaLliJnkuI3lpIfku70nXFxcXG4gICAgICAgICAgICB9LCB1cmwsIHVwZGF0ZUludGVydmFsLCBuZXdXaW5kb3csIHRhYkZvbGQsIGRpc2FibGVDdXN0b20pXFxcXG4gICAgICAgIGVsc2UgcmV0dXJuICQoJ2hpa2VyOi8vZmlsZXMvdG1wLycgKyBRSU5HX1RJVExFICsgJ19iYWNrdXAuanNvbicsICfovpPlhaXlpIfku73ot6/lvoQnKS5pbnB1dCgodXJsKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQgeyB1cGRhdGVJbnRlcnZhbCwgbmV3V2luZG93LCB0YWJGb2xkLCBkaXNhYmxlQ3VzdG9tLCBjdXN0b21EYXRhLCBydWxlcyB9ID0gSlNPTi5wYXJzZShyZXF1ZXN0KGlucHV0KSlcXFxcbiAgICAgICAgICAgIHNhdmVGaWxlKCd1cGRhdGVJbnRlcnZhbCcsIHVwZGF0ZUludGVydmFsKVxcXFxuICAgICAgICAgICAgc2F2ZUZpbGUoJ25ld1dpbmRvdycsIG5ld1dpbmRvdylcXFxcbiAgICAgICAgICAgIHNhdmVGaWxlKCd0YWJGb2xkJywgdGFiRm9sZClcXFxcbiAgICAgICAgICAgIHNhdmVGaWxlKCdkaXNhYmxlQ3VzdG9tJywgZGlzYWJsZUN1c3RvbSlcXFxcbiAgICAgICAgICAgIHNhdmVGaWxlKCdjdXN0b21EYXRhJywgY3VzdG9tRGF0YSlcXFxcbiAgICAgICAgICAgIGlmIChydWxlcykgd3JpdGVGaWxlKHVybCwgcnVsZXMpXFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZSgpXFxcXG4gICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5oGi5aSN77yM5aaC5p6c5LiN5oOz5ZCM5q2l6L+c56iL5LuT5bqT77yM5Y+v5Lul6K6+572u5pu05paw6aKR546H5Li65omL5YqoJ1xcXFxuICAgICAgICB9LCB1cmwpXFxcXG4gICAgfSwgUUlOR19USVRMRSwgdXBkYXRlSW50ZXJ2YWwsIG5ld1dpbmRvdywgdGFiRm9sZCwgZGlzYWJsZUN1c3RvbSksXFxcXG4gICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcXFxufSwge1xcXFxuICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdPGZvbnQgY29sb3I9XFxcXFxcXCIjNjY2NjY2XFxcXFxcXCI+PHNtYWxsPueJueWIq+m4o+iwou+8jOWwj+eoi+W6j+aPkOS+m+iAhe+8mlxcXFxcXFxcbicgK1xcXFxuICAgICAgICBkYXRhLnJlZHVjZSgoc2VsZiwgdikgPT4gdi5hdXRob3IgPyBzZWxmLmNvbmNhdCh2LmF1dGhvci5zcGxpdCgnJicpKSA6IHNlbGYsIFtdKVxcXFxuICAgICAgICAuZmlsdGVyKCh2LCBpLCBhcnIpID0+IHYgJiYgYXJyLmluZGV4T2YodikgPT0gaSkuam9pbign44CBJyksXFxcXG4gICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxcXG4gICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcXFxufSlcXFxcblxcXFxuZWwucHVzaCh7IGNvbF90eXBlOiAnbGluZScgfSwge1xcXFxuICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdJyArICfwn5OdJy5zbWFsbCgpICsgJyZuYnNwIOi9u+WQiOmbhuiHquWumuS5iSAmbmJzcCcuYm9sZCgpLmZvbnRjb2xvcignIzc1NzU3NScpICsgKGRpc2FibGVDdXN0b20gPyAn4p2MJyA6ICfirZUnKS5zbWFsbCgpLFxcXFxuICAgIHVybDogJChbKGRpc2FibGVDdXN0b20gPyAn5ZCv55SoJyA6ICfnpoHnlKgnKSArICflkIjpm4boh6rlrprkuYknLCAn5riF6Zmk6Ieq5a6a5LmJ5pWw5o2uJywgJ+e8lui+kUpTT04nXSwgMSkuc2VsZWN0KCgpID0+IHtcXFxcbiAgICAgICAgc3dpdGNoIChpbnB1dC5zbGljZSgwLCAyKSkge1xcXFxuICAgICAgICAgICAgY2FzZSAn5riF6ZmkJzpcXFxcbiAgICAgICAgICAgICAgICBkZWxldGVGaWxlKCdjdXN0b21EYXRhJylcXFxcbiAgICAgICAgICAgICAgICBicmVha1xcXFxuICAgICAgICAgICAgY2FzZSAn5ZCv55SoJzpcXFxcbiAgICAgICAgICAgICAgICBzYXZlRmlsZSgnZGlzYWJsZUN1c3RvbScsICcnKVxcXFxuICAgICAgICAgICAgICAgIGJyZWFrXFxcXG4gICAgICAgICAgICBjYXNlICfnpoHnlKgnOlxcXFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdkaXNhYmxlQ3VzdG9tJywgJ1QnKVxcXFxuICAgICAgICAgICAgICAgIGlucHV0ICs9ICdcXFxcXFxcXG7lsI/nqIvluo/lkK/nlKgv56aB55So44CB6YeN5paw5o6S5bqP562J5pON5L2c5Z2H5LiN5Lya5L2T546w5Zyo6aaW6aG15bCP56iL5bqP5YiX6KGo5LitJ1xcXFxuICAgICAgICAgICAgICAgIGJyZWFrXFxcXG4gICAgICAgICAgICBjYXNlICfnvJbovpEnOlxcXFxuICAgICAgICAgICAgICAgIGxldCB1cmwgPSBnZXRNeVZhcigncmVtb3RlVXJsJylcXFxcbiAgICAgICAgICAgICAgICBpZiAoIXVybC5zdGFydHNXaXRoKCdoaWtlcjovL2ZpbGVzLycpICYmICF1cmwuc3RhcnRzV2l0aCgnZmlsZTovLycpKVxcXFxuICAgICAgICAgICAgICAgICAgICB1cmwgPSAnaGlrZXI6Ly9maWxlcy9saWJzLycgKyBtZDUodXJsKSArICcuanMnXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICAnaGlrZXI6Ly9wYWdlL2ludGVyZmFjZSNub1JlZnJlc2gjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5Iz9ydWxlPUpTT07nvJbovpHlmagmSnNvbj0nK2Jhc2U2NEVuY29kZSh1cmwpXFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpXFxcXG4gICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7InICsgaW5wdXRcXFxcbiAgICB9KSxcXFxcbiAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcXFxuICAgIGV4dHJhOiB7IGxpbmVWaXNpYmxlOiBmYWxzZSB9XFxcXG59KTtcXFxcbihkaXNhYmxlQ3VzdG9tID8gWyflr7zlhaXmtbfpmJQnXSA6IFsn5ZCv55SoL+emgeeUqCcsICfph43mlrDmjpLluo8nLCAn5pu05pS55Zu+5qCHJywgJ+WvvOWFpea1t+mYlCddKS5mb3JFYWNoKCh2KSA9PiB7XFxcXG4gICAgZWwucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiB2ID09IGVkaXRNb2RlID8gJ+KAnOKAnOKAneKAnScgKyB2LmJvbGQoKS5mb250Y29sb3IoJyMxMmI2NjgnKSA6IHYsXFxcXG4gICAgICAgIHVybDogdiA9PSBlZGl0TW9kZSA/ICdoaWtlcjovL2VtcHR5JyA6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKHYpID0+IHtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKCdlZGl0TW9kZScsIHYpXFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSlcXFxcbiAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcbiAgICAgICAgfSwgdiksXFxcXG4gICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXFxcbiAgICB9KVxcXFxufSk7XFxcXG5pZiAoZWRpdE1vZGUgPT0gJ+WvvOWFpea1t+mYlCcpIGVsLnB1c2goe1xcXFxuICAgIHRpdGxlOiAn5YWo6YOo5a+85YWlJyxcXFxcbiAgICB1cmw6ICfmtbfpmJTop4bnlYzvv6Vob21lX3J1bGVfdXJs77+lJyArICh1cmwuc3RhcnRzV2l0aCgnaGlrZXI6Ly8nKSB8fCB1cmwuc3RhcnRzV2l0aCgnZmlsZTovLycpID8gdXJsIDogJ2hpa2VyOi8vZmlsZXMvbGlicy8nICsgbWQ1KHVybCkgKyAnLmpzJyksXFxcXG4gICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXFxcbiAgICBleHRyYTogeyBsaW5lVmlzaWJsZTogZmFsc2UgfVxcXFxufSk7XFxcXG4oZGlzYWJsZUN1c3RvbSA/IGRhdGEgOiBKU09OLnBhcnNlKHJlYWRGaWxlKCdjdXN0b21EYXRhJykgfHwgJ1tdJykpLmZvckVhY2goKHYsIGkpID0+IHtcXFxcbiAgICBsZXQgZCA9IHsgdGl0bGU6IHYudGl0bGUsIGltZzogZGF0YVtpXS5pY29uIH1cXFxcbiAgICBzd2l0Y2ggKGVkaXRNb2RlKSB7XFxcXG4gICAgICAgIGNhc2UgJ+WQr+eUqC/npoHnlKgnOlxcXFxuICAgICAgICAgICAgZC50aXRsZSA9ICh2LnZpc2libGUgPyAn8J+foiAgJyA6ICfwn5S0ICAnKSArIGQudGl0bGVcXFxcbiAgICAgICAgICAgIGQudXJsID0gJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoaSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGxldCBydWxlcyA9IEpTT04ucGFyc2UocmVhZEZpbGUoJ2N1c3RvbURhdGEnKSB8fCAnW10nKVxcXFxuICAgICAgICAgICAgICAgIHJ1bGVzW2ldLnZpc2libGUgPSAhcnVsZXNbaV0udmlzaWJsZVxcXFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdjdXN0b21EYXRhJywgSlNPTi5zdHJpbmdpZnkocnVsZXMpKVxcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKVxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcbiAgICAgICAgICAgIH0sIGkpXFxcXG4gICAgICAgICAgICBicmVha1xcXFxuICAgICAgICBjYXNlICfph43mlrDmjpLluo8nOlxcXFxuICAgICAgICAgICAgbGV0IHNvcnRGbGFnID0gcGFyc2VJbnQoZ2V0TXlWYXIoJ3NvcnRGbGFnJywgJy0xJykpXFxcXG4gICAgICAgICAgICBkLnRpdGxlID0gKHNvcnRGbGFnID09IGkgPyAn8J+UgyAgJyA6ICcnKSArIGQudGl0bGVcXFxcbiAgICAgICAgICAgIGlmIChzb3J0RmxhZyA9PSAtMSlcXFxcbiAgICAgICAgICAgICAgICBkLnVybCA9ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGkpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ3NvcnRGbGFnJywgaS50b1N0cmluZygpKVxcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSlcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+mAieaLqeimgeenu+WKqOWIsOeahOS9jee9ridcXFxcbiAgICAgICAgICAgICAgICB9LCBpKVxcXFxuICAgICAgICAgICAgZWxzZVxcXFxuICAgICAgICAgICAgICAgIGQudXJsID0gJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgob2xkSW5kZXgsIG5ld0luZGV4KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBydWxlcyA9IEpTT04ucGFyc2UocmVhZEZpbGUoJ2N1c3RvbURhdGEnKSB8fCAnW10nKVxcXFxuICAgICAgICAgICAgICAgICAgICBydWxlcy5zcGxpY2UobmV3SW5kZXgsIDAsIHJ1bGVzLnNwbGljZShvbGRJbmRleCwgMSlbMF0pXFxcXG4gICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdjdXN0b21EYXRhJywgSlNPTi5zdHJpbmdpZnkocnVsZXMpKVxcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcignc29ydEZsYWcnLCAnLTEnKVxcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSlcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxuICAgICAgICAgICAgICAgIH0sIHNvcnRGbGFnLCBpKVxcXFxuICAgICAgICAgICAgYnJlYWtcXFxcbiAgICAgICAgY2FzZSAn5pu05pS55Zu+5qCHJzpcXFxcbiAgICAgICAgICAgIGQudXJsID0gJCh2Lmljb24gfHwgJycsICfovpPlhaXmlrDlm77moIflnLDlnYDmiJbpopzoibLku6PnoIHvvJonKS5pbnB1dCgoaSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGxldCBydWxlcyA9IEpTT04ucGFyc2UocmVhZEZpbGUoJ2N1c3RvbURhdGEnKSB8fCAnW10nKVxcXFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dClcXFxcbiAgICAgICAgICAgICAgICAgICAgcnVsZXNbaV0uaWNvbiA9IGlucHV0XFxcXG4gICAgICAgICAgICAgICAgZWxzZVxcXFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcnVsZXNbaV0uaWNvblxcXFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdjdXN0b21EYXRhJywgSlNPTi5zdHJpbmdpZnkocnVsZXMpKVxcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKVxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcbiAgICAgICAgICAgIH0sIGkpXFxcXG4gICAgICAgICAgICBicmVha1xcXFxuICAgICAgICBjYXNlICflr7zlhaXmtbfpmJQnOlxcXFxuICAgICAgICAgICAgZC51cmwgPSAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChpKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSAkLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9kYXRhTG9hZD9ydWxlPScgKyBnZXRNeVZhcignbXlDb2xsZWN0aW9uJyksIHRydWUpXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdydWxlOi8vJyArIGJhc2U2NEVuY29kZShKU09OLnN0cmluZ2lmeShkYXRhW2ldKSlcXFxcbiAgICAgICAgICAgIH0sIGkpXFxcXG4gICAgICAgICAgICBicmVha1xcXFxuICAgIH1cXFxcbiAgICBlbC5wdXNoKGQpXFxcXG59KVxcXFxuc2V0UmVzdWx0KGVsKVxcXFxuXFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi6aG16Z2i6L295YWlXFxcIixcXFwicGF0aFxcXCI6XFxcImZyYW1lTG9hZFxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmNvbnN0IFFJTkdfVElUTEUgPSBnZXRNeVZhcignbXlDb2xsZWN0aW9uJylcXFxcbnZhciBteUNvbGxfZWwgPSBbXVxcXFxuZXZhbChKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL3BhZ2UvaGlqYWNrRW52P3J1bGU9JyArIFFJTkdfVElUTEUpKS5ydWxlKVxcXFxuXFxcXG5pZiAoIWlzSW5kZXgpIHtcXFxcbiAgICBpZiAocGFnZVRpdGxlKSBzZXRQYWdlVGl0bGUocGFnZVRpdGxlKVxcXFxuICAgIHNldExhc3RDaGFwdGVyUnVsZShvcmlSVUxFLmxhc3RfY2hhcHRlcl9ydWxlKVxcXFxuICAgIE1ZX1BBUkFNUyA9IE1ZX1JVTEUucGFyYW1zXFxcXG59IGVsc2UgaWYgKE1ZX1BBR0UgPT0gMSkge1xcXFxuICAgIHRhYkhlYWRlci5sb2FkKG15Q29sbF9lbClcXFxcbiAgICBpZiAoUlVMRS5zZWFyY2hfdXJsKSBteUNvbGxfZWwucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuaQnOe0olxcXFxcXFwiLFxcXFxuICAgICAgICBkZXNjOiBcXFxcXFxcIui/meaYr+i9u+WQiOmbhueahOaQnOe0ouWTpn5+XFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJ1xcXFxcXFwiaGlrZXI6Ly9zZWFyY2g/cz1cXFxcXFxcIitpbnB1dCcsXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBydWxlczogJC50b1N0cmluZygoUUlOR19USVRMRSwgdGl0bGUpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgcnVsZXMgPSAkLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9kYXRhTG9hZD9ydWxlPScgKyBRSU5HX1RJVExFKVxcXFxuICAgICAgICAgICAgICAgIHJ1bGVzID0gW3J1bGVzLmZpbmQoKHYpID0+IHYudGl0bGUgPT0gdGl0bGUpXVxcXFxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShydWxlcylcXFxcbiAgICAgICAgICAgIH0sIFFJTkdfVElUTEUsIFJVTEUudGl0bGUpLFxcXFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRNeVZhcignc2VhcmNoS2V5JywgJycpLFxcXFxuICAgICAgICAgICAgb25DaGFuZ2U6IFxcXFxcXFwicHV0TXlWYXIoJ3NlYXJjaEtleScsaW5wdXQpXFxcXFxcXCJcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICB9KVxcXFxufVxcXFxuLy8g5q2j5paH6Kej5p6QXFxcXG52YXIge1xcXFxuICAgIHBhcmFtSGFuZGxlLFxcXFxuICAgIHJ1blByZVJ1bGUsXFxcXG4gICAgZ2VuRXhVcmwsXFxcXG4gICAgaGlqYWNrTGF6eVJ1bGVcXFxcbn0gPSAkLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9mdW5jVG9vbHM/cnVsZT0nICsgUUlOR19USVRMRSlcXFxcbnJ1blByZVJ1bGUob3JpUlVMRS5wcmVSdWxlKVxcXFxuaWYgKE1ZX1JVTEUuZmluZF9ydWxlLnN0YXJ0c1dpdGgoJ2pzOicpKSB7XFxcXG4gICAgbGV0IHsgaGlqYWNrRWwgfSA9ICQucmVxdWlyZSgnaGlrZXI6Ly9wYWdlL2Z1bmNUb29scz9ydWxlPScgKyBRSU5HX1RJVExFKVxcXFxuICAgIHNldFJlc3VsdCA9IGZ1bmN0aW9uKHBhcmFtMCwgcGFyYW0xLCBwYXJhbTIsIHBhcmFtMykge1xcXFxuICAgICAgICBwYXJhbTEgPSBDQUxMQkFDS19LRVlcXFxcbiAgICAgICAgcGFyYW0yID0gTVlfUlVMRVxcXFxuICAgICAgICBwYXJhbTMgPSBNWV9UWVBFXFxcXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtMC5kYXRhKSkgcGFyYW0wID0gcGFyYW0wLmRhdGFcXFxcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkobXlDb2xsX2VsLCBwYXJhbTAubWFwKGhpamFja0VsKSlcXFxcbiAgICAgICAgbWV0aG9kX3NldFJlc3VsdC5pbnZva2UoamF2YUNvbnRleHQsIG15Q29sbF9lbCwgcGFyYW0xLCBwYXJhbTIsIHBhcmFtMylcXFxcbiAgICB9XFxcXG4gICAgc2V0SG9tZVJlc3VsdCA9IHNldFJlc3VsdFxcXFxuICAgIHNldFNlYXJjaFJlc3VsdCA9IHNldFJlc3VsdFxcXFxuXFxcXG4gICAgZXZhbChNWV9SVUxFLmZpbmRfcnVsZS5zbGljZSgzKSlcXFxcbn0gZWxzZSB7XFxcXG4gICAgbGV0IHsgcnVuQ29kZSB9ID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvZnVuY1Rvb2xzP3J1bGU9JyArIFFJTkdfVElUTEUpLFxcXFxuICAgICAgICBbXywgZmluZFJ1bGUsIGRldGFpbEZpbmRSdWxlXSA9IE1ZX1JVTEUuZmluZF9ydWxlLm1hdGNoKC9eKFtcXFxcXFxcXHNcXFxcXFxcXFNdKj8pKD86PT0+KFtcXFxcXFxcXHNcXFxcXFxcXFNdKikpPyQvKVxcXFxuICAgIGZpbmRSdWxlID0gZmluZFJ1bGUuc3BsaXQoJzsnKVxcXFxuICAgIHBhcnNlRG9tRm9yQXJyYXkoZ2V0UmVzQ29kZSgpLCBmaW5kUnVsZS5zaGlmdCgpKS5mb3JFYWNoKChkYXRhKSA9PiB7XFxcXG4gICAgICAgIGxldCBbdGl0bGUsIGltZywgZGVzYywgdXJsXSA9IGZpbmRSdWxlLm1hcCgodiwgaSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmICh2ID09ICcqJykgcmV0dXJuICcnXFxcXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgdiA9IChpID09IDEgfHwgaSA9PSAzKSA/XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZURvbShkYXRhLCB2KSA6XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZURvbUZvckh0bWwoZGF0YSwgdilcXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT0gMykgdiA9IHJ1bkNvZGUodilcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZcXFxcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7IHJldHVybiAnJyB9XFxcXG4gICAgICAgICAgICB9KSxcXFxcbiAgICAgICAgICAgIHJlcyA9IHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsIHVybDogdXJsLFxcXFxuICAgICAgICAgICAgICAgIGRlc2M6IGRlc2MsIGltZzogaW1nLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBNWV9SVUxFLmNvbF90eXBlXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIGlmIChyZXMudXJsKSB7XFxcXG4gICAgICAgICAgICBpZiAocmVzLnVybC5pbmNsdWRlcygnQGxhenlSdWxlPScpKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHJlSW5kZXggPSByZXMudXJsLmluZGV4T2YoJy5qczonKVxcXFxuICAgICAgICAgICAgICAgIGlmIChyZUluZGV4ID49IDApIHJlcy51cmwgPSByZXMudXJsLnNsaWNlKDAsIHJlSW5kZXgpICsgJy5qczonICsgaGlqYWNrTGF6eVJ1bGUgKyAnOycgKyByZXMudXJsLnNsaWNlKHJlSW5kZXggKyA0KVxcXFxuICAgICAgICAgICAgfSBlbHNlICBpZiAoZGV0YWlsRmluZFJ1bGUpIHtcXFxcbiAgICAgICAgICAgICAgICByZXMuZXh0cmEgPSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogZ2VuRXhVcmwodXJsKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgUlVMRTogYmFzZTY0RW5jb2RlKEpTT04uc3RyaW5naWZ5KE9iamVjdC5hc3NpZ24oZ2VuTXlSdWxlKCksIHsgZGV0YWlsX2ZpbmRfcnVsZTogZGV0YWlsRmluZFJ1bGUgfSkpKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgcGFnZVRpdGxlOiBpc0luZGV4ICYmIHRpdGxlXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIHJlcy51cmwgPSAnaGlrZXI6Ly9wYWdlL2ZyYW1lTG9hZD9ydWxlPScgKyBRSU5HX1RJVExFXFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1ZX1JVTEUuZGV0YWlsX2ZpbmRfcnVsZSkge1xcXFxuICAgICAgICAgICAgICAgIHJlcy5leHRyYSA9IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBnZW5FeFVybCh1cmwpLFxcXFxuICAgICAgICAgICAgICAgICAgICBSVUxFOiBiYXNlNjRFbmNvZGUoSlNPTi5zdHJpbmdpZnkoZ2VuTXlSdWxlKCkpKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgcGFnZVRpdGxlOiBpc0luZGV4ICYmIHRpdGxlXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIHJlcy51cmwgPSAnaGlrZXI6Ly9wYWdlL2ZyYW1lTG9hZD9ydWxlPScgKyBRSU5HX1RJVExFXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbXlDb2xsX2VsLnB1c2gocmVzKVxcXFxuICAgIH0pXFxcXG4gICAgc2V0UmVzdWx0KG15Q29sbF9lbClcXFxcbn1cXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuaVsOaNrui9veWFpVxcXCIsXFxcInBhdGhcXFwiOlxcXCJkYXRhTG9hZFxcXCIsXFxcInJ1bGVcXFwiOlxcXCJsZXQgc2hvd0FsbCA9ICQuaW1wb3J0UGFyYW0sXFxcXG4gICAgdXJsID0gZ2V0TXlWYXIoJ3JlbW90ZVVybCcpLFxcXFxuICAgIGRhdGEgPSBbXVxcXFxuaWYgKHVybC5zdGFydHNXaXRoKCdoaWtlcjovLycpIHx8IHVybC5zdGFydHNXaXRoKCdmaWxlOi8vJykpIHtcXFxcbiAgICAvLyDlpoLmnpzkuLrmnKzlnLDmlofku7bliJnkuI3ov5vooYznvJPlrZhcXFxcbiAgICB0cnkge1xcXFxuICAgICAgICBsZXQgb3JpRGF0YSA9IGZldGNoKHVybClcXFxcbiAgICAgICAgaWYgKHVybC5zdGFydHNXaXRoKCdoaWtlcjovL3BhZ2UvJykpXFxcXG4gICAgICAgICAgICBvcmlEYXRhID0gSlNPTi5wYXJzZShvcmlEYXRhKS5ydWxlXFxcXG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKG9yaURhdGEpXFxcXG4gICAgfSBjYXRjaCAoZSkge31cXFxcbn0gZWxzZSB7XFxcXG4gICAgLy8g6I635Y+W6L+c56iL5pWw5o2u77yM5qOA5p+l6Ze06ZqU6buY6K6k5LiA5aSpXFxcXG4gICAgbGV0IGludGVydmFsID0gcGFyc2VJbnQocmVhZEZpbGUoJ3VwZGF0ZUludGVydmFsJykgfHwgJzEnKSxcXFxcbiAgICAgICAgb2xkRGF0YSA9IGZldGNoKCdoaWtlcjovL2ZpbGVzL2xpYnMvJyArIG1kNSh1cmwpICsgJy5qcycpLFxcXFxuICAgICAgICByZW1vdGVEYXRhID0gW11cXFxcbiAgICBpZiAoaW50ZXJ2YWwgPT0gMCkgaW50ZXJ2YWwgPSAtMVxcXFxuICAgIHRyeSB7IHJlbW90ZURhdGEgPSBKU09OLnBhcnNlKGZldGNoQ2FjaGUodXJsLCAyNCAqIGludGVydmFsLCB7IHRpbWVvdXQ6IDUwMDAwIH0pKSB9IGNhdGNoIChlKSB7fVxcXFxuICAgIGlmICghQXJyYXkuaXNBcnJheShyZW1vdGVEYXRhKSkgcmVtb3RlRGF0YSA9IFtdXFxcXG4gICAgaWYgKHJlbW90ZURhdGEubGVuZ3RoIDwgMykge1xcXFxuICAgICAgICBsb2coJ+acquiOt+WPluWIsOaVsOaNricpXFxcXG4gICAgICAgIGlmIChvbGREYXRhKSB3cml0ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvbGlicy8nICsgbWQ1KHVybCkgKyAnLmpzJywgb2xkRGF0YSlcXFxcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2Uob2xkRGF0YSB8fCAnW10nKVxcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIGxvZygn5bey6I635Y+W5Yiw5pWw5o2uJylcXFxcbiAgICAgICAgZGF0YSA9IHJlbW90ZURhdGFcXFxcbiAgICB9XFxcXG59XFxcXG5kYXRhID0gZGF0YS5maWx0ZXIoKHYpID0+IHYudGl0bGUgIT0gZ2V0TXlWYXIoJ215Q29sbGVjdGlvbicpICYmICEodi5hdXRob3IgfHwgJycpLmluY2x1ZGVzKCfovbvlkIjpm4bnlJ/miJDlmagnKSlcXFxcbmlmIChyZWFkRmlsZSgnZGlzYWJsZUN1c3RvbScpKSAkLmV4cG9ydHMgPSBkYXRhXFxcXG5lbHNlIHsgLy8g5YaZ5YWl6Ieq5a6a5LmJ5pWw5o2uXFxcXG4gICAgbGV0IGN1c3RvbURhdGEgPSBKU09OLnBhcnNlKHJlYWRGaWxlKCdjdXN0b21EYXRhJykgfHwgJ1tdJyksXFxcXG4gICAgICAgIHJld3JpdGVEYXRhID0gW11cXFxcbiAgICBjdXN0b21EYXRhID0gY3VzdG9tRGF0YS5yZWR1Y2UoKHNlbGYsIHYpID0+IHtcXFxcbiAgICAgICAgbGV0IGluZGV4ID0gZGF0YS5maW5kSW5kZXgoKHZ2KSA9PiB2LnRpdGxlID09IHZ2LnRpdGxlKVxcXFxuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xcXFxuICAgICAgICAgICAgc2VsZi5wdXNoKHYpXFxcXG4gICAgICAgICAgICBsZXQgcnVsZSA9IGRhdGEuc3BsaWNlKGluZGV4LCAxKVswXVxcXFxuICAgICAgICAgICAgaWYgKHNob3dBbGwgfHwgdi52aXNpYmxlKVxcXFxuICAgICAgICAgICAgICAgIHJld3JpdGVEYXRhLnB1c2goT2JqZWN0LmFzc2lnbihydWxlLCB2KSlcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gc2VsZlxcXFxuICAgIH0sIFtdKVxcXFxuICAgIGRhdGEuZm9yRWFjaCgodikgPT4gY3VzdG9tRGF0YS5wdXNoKHsgdGl0bGU6IHYudGl0bGUsIHZpc2libGU6IHRydWUgfSkpXFxcXG4gICAgc2F2ZUZpbGUoJ2N1c3RvbURhdGEnLCBKU09OLnN0cmluZ2lmeShjdXN0b21EYXRhKSlcXFxcbiAgICAkLmV4cG9ydHMgPSByZXdyaXRlRGF0YS5jb25jYXQoZGF0YSlcXFxcbn1cXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIueOr+Wig+WKq+aMgVxcXCIsXFxcInBhdGhcXFwiOlxcXCJoaWphY2tFbnZcXFwiLFxcXCJydWxlXFxcIjpcXFwidmFyIHsgUlVMRSwgaXNJbmRleCwgcGFnZVRpdGxlIH0gPSBNWV9QQVJBTVNcXFxcblJVTEUgPSBKU09OLnBhcnNlKGJhc2U2NERlY29kZShSVUxFKSlcXFxcbnZhciBvcmlSVUxFID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvZGF0YUxvYWQ/cnVsZT0nICsgUUlOR19USVRMRSkuZmluZCgodikgPT4gdi50aXRsZSA9PSBSVUxFLnRpdGxlKVxcXFxuaWYgKGlzSW5kZXgpIHtcXFxcbiAgICBSVUxFID0gb3JpUlVMRVxcXFxuICAgIHZhciB7IHRhYkhlYWRlciwgZnlBbGwgfSA9ICQucmVxdWlyZSgnaGlrZXI6Ly9wYWdlL0NsYXNzVGFiP3J1bGU9JyArIFFJTkdfVElUTEUsIE9iamVjdC5hc3NpZ24oeyBRSU5HX1RJVExFOiBRSU5HX1RJVExFIH0sIFJVTEUpKVxcXFxuICAgIC8vIOWkhOeQhk1ZX1JVTEVcXFxcbiAgICBNWV9SVUxFLmNsYXNzX3VybCA9IHRhYkhlYWRlci5nZXRDbGFzcyhmeUFsbCA/ICdmeUFsbCcgOiAnZnljbGFzcycpLnVybFxcXFxuICAgIE1ZX1JVTEUuYXJlYV91cmwgPSBmeUFsbCA/IE1ZX1JVTEUuY2xhc3NfdXJsIDogdGFiSGVhZGVyLmdldENsYXNzKCdmeWFyZWEnKS51cmxcXFxcbiAgICBNWV9SVUxFLnllYXJfdXJsID0gZnlBbGwgPyBNWV9SVUxFLmNsYXNzX3VybCA6IHRhYkhlYWRlci5nZXRDbGFzcygnZnl5ZWFyJykudXJsXFxcXG4gICAgTVlfUlVMRS5zb3J0X3VybCA9IGZ5QWxsID8gTVlfUlVMRS5jbGFzc191cmwgOiB0YWJIZWFkZXIuZ2V0Q2xhc3MoJ2Z5c29ydCcpLnVybFxcXFxuICAgIE1ZX1JVTEUudXJsID0gUlVMRS51cmxcXFxcbiAgICBNWV9SVUxFLmNvbF90eXBlID0gUlVMRS5jb2xfdHlwZVxcXFxuICAgIE1ZX1JVTEUuZGV0YWlsX2NvbF90eXBlID0gUlVMRS5kZXRhaWxfY29sX3R5cGVcXFxcbiAgICBNWV9SVUxFLmZpbmRfcnVsZSA9IFJVTEUuZmluZF9ydWxlXFxcXG4gICAgTVlfUlVMRS5kZXRhaWxfZmluZF9ydWxlID0gUlVMRS5kZXRhaWxfZmluZF9ydWxlXFxcXG4gICAgTVlfUlVMRS5wYXJhbXMgPSB7fVxcXFxufSBlbHNlIHtcXFxcbiAgICBSVUxFLnBhZ2VzID0gb3JpUlVMRS5wYWdlc1xcXFxuICAgIC8vIOWkhOeQhk1ZX1JVTEVcXFxcbiAgICBNWV9SVUxFLnVybCA9IE1ZX1BBUkFNUy51cmxcXFxcbiAgICBNWV9SVUxFLmNvbF90eXBlID0gUlVMRS5kZXRhaWxfY29sX3R5cGVcXFxcbiAgICBNWV9SVUxFLmZpbmRfcnVsZSA9IFJVTEUuZGV0YWlsX2ZpbmRfcnVsZVxcXFxuICAgIE1ZX1JVTEUucGFyYW1zID0gUlVMRS5wYXJhbXNcXFxcbn1cXFxcbk1ZX1JVTEUucGFnZXMgPSBSVUxFLnBhZ2VzXFxcXG5NWV9SVUxFLnBhZ2VMaXN0ID0gSlNPTi5wYXJzZShNWV9SVUxFLnBhZ2VzIHx8ICdbXScpXFxcXG5NWV9SVUxFLnRpdGxlID0gUlVMRS50aXRsZVxcXFxuTVlfUlVMRS51YSA9IFJVTEUudWFcXFxcbmxvZyhNWV9SVUxFLnVybClcXFxcbi8vIOi9veWFpeWHveaVsOW3peWFt1xcXFxudmFyIHsgZ2VuTXlSdWxlIH0gPSAkLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9mdW5jVG9vbHM/cnVsZT0nICsgUUlOR19USVRMRSwge1xcXFxuICAgIFFJTkdfVElUTEU6IFFJTkdfVElUTEUsXFxcXG4gICAgTVlfUlVMRTogTVlfUlVMRSxcXFxcbiAgICBpc0luZGV4OiBpc0luZGV4XFxcXG59KVxcXFxuLy8g6Ziy5q2icmVxdWlyZeWkmuasoei/kOihjFxcXFxuY29uc3QgbXlDb2xsX3JlcXVpcmVkID0ge31cXFxcbnJlcXVpcmUgPSBmdW5jdGlvbihwYXJhbTAsIHBhcmFtMSwgcGFyYW0yLCBwYXJhbTMsIHBhcmFtNCkge1xcXFxuICAgIGlmIChteUNvbGxfcmVxdWlyZWRbcGFyYW0wXSkgcmV0dXJuXFxcXG4gICAgbXlDb2xsX3JlcXVpcmVkW3BhcmFtMF0gPSB0cnVlXFxcXG4gICAgcGFyYW0yID0gcGFyYW0yICE9IG51bGwgPyBwYXJhbTIgOiAwXFxcXG4gICAgcGFyYW0zID0gTVlfVElDS0VUXFxcXG4gICAgcGFyYW00ID0gZXZhbFxcXFxuICAgIHJldHVybiBtZXRob2RfcmVxdWlyZS5pbnZva2UoamF2YUNvbnRleHQsIHBhcmFtMCwgcGFyYW0xLCBwYXJhbTIsIHBhcmFtMywgcGFyYW00KVxcXFxufVxcXFxucmVxdWlyZUNhY2hlID0gZnVuY3Rpb24ocGFyYW0wLCBwYXJhbTEsIHBhcmFtMiwgcGFyYW0zLCBwYXJhbTQsIHBhcmFtNSkge1xcXFxuICAgIGlmIChteUNvbGxfcmVxdWlyZWRbcGFyYW0wXSkgcmV0dXJuXFxcXG4gICAgbXlDb2xsX3JlcXVpcmVkW3BhcmFtMF0gPSB0cnVlXFxcXG4gICAgcGFyYW0zID0gcGFyYW0zICE9IG51bGwgPyBwYXJhbTMgOiAwXFxcXG4gICAgcGFyYW00ID0gTVlfVElDS0VUXFxcXG4gICAgcGFyYW01ID0gZXZhbFxcXFxuICAgIHJldHVybiBtZXRob2RfcmVxdWlyZUNhY2hlLmludm9rZShqYXZhQ29udGV4dCwgcGFyYW0wLCBwYXJhbTEsIHBhcmFtMiwgcGFyYW0zLCBwYXJhbTQsIHBhcmFtNSlcXFxcbn1cXFxcbnJjID0gcmVxdWlyZUNhY2hlXFxcXG4vLyDmnIDmlrDnq6DoioLop4TliJnnjq/looPliqvmjIFcXFxcbnNldExhc3RDaGFwdGVyUnVsZSA9IGZ1bmN0aW9uKHBhcmFtMCkge1xcXFxuICAgIGlmIChwYXJhbTAuc3RhcnRzV2l0aChcXFxcXFxcImpzOlxcXFxcXFwiKSkge1xcXFxuICAgICAgICBwYXJhbTAgPSAnanM6JyArICQudG9TdHJpbmcoKFFJTkdfVElUTEUsIE1ZX1BBUkFNUykgPT4ge1xcXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL3BhZ2UvaGlqYWNrRW52P3J1bGU9JyArIFFJTkdfVElUTEUpKS5ydWxlKVxcXFxuICAgICAgICAgICAgdmFyIHsgcnVuUHJlUnVsZSB9ID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvZnVuY1Rvb2xzP3J1bGU9JyArIFFJTkdfVElUTEUpXFxcXG4gICAgICAgICAgICBydW5QcmVSdWxlKG9yaVJVTEUucHJlUnVsZSlcXFxcbiAgICAgICAgfSwgUUlOR19USVRMRSwgeyB1cmw6IE1ZX1JVTEUudXJsLCBSVUxFOiBiYXNlNjRFbmNvZGUoSlNPTi5zdHJpbmdpZnkoZ2VuTXlSdWxlKCkpKSwgaXNJbmRleDogaXNJbmRleCB9KSArICc7JyArIHBhcmFtMC5zbGljZSgzKVxcXFxuICAgIH1cXFxcbiAgICBtZXRob2Rfc2V0TGFzdENoYXB0ZXJSdWxlLmludm9rZShqYXZhQ29udGV4dCwgcGFyYW0wKVxcXFxufVxcXFxuLy8g5Yqo5oCB5paw5aKe5Ye95pWw5Yqr5oyBXFxcXG5hZGRJdGVtQWZ0ZXIgPSBmdW5jdGlvbihwYXJhbTAsIHBhcmFtMSkge1xcXFxuICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtMSkpIHBhcmFtMSA9IHBhcmFtMS5tYXAoaGlqYWNrRWwpXFxcXG4gICAgZWxzZSBwYXJhbTEgPSBoaWphY2tFbChwYXJhbTEpXFxcXG4gICAgbWV0aG9kX2FkZEl0ZW1BZnRlci5pbnZva2UoamF2YUNvbnRleHQsIHBhcmFtMCwgcGFyYW0xKVxcXFxufVxcXFxuYWRkSXRlbUJlZm9yZSA9IGZ1bmN0aW9uKHBhcmFtMCwgcGFyYW0xKSB7XFxcXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW0xKSkgcGFyYW0xID0gcGFyYW0xLm1hcChoaWphY2tFbClcXFxcbiAgICBlbHNlIHBhcmFtMSA9IGhpamFja0VsKHBhcmFtMSlcXFxcbiAgICBtZXRob2RfYWRkSXRlbUJlZm9yZS5pbnZva2UoamF2YUNvbnRleHQsIHBhcmFtMCwgcGFyYW0xKVxcXFxufVxcXFxuXFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5Ye95pWw5bel5YW3XFxcIixcXFwicGF0aFxcXCI6XFxcImZ1bmNUb29sc1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJsZXQgeyBRSU5HX1RJVExFLCBNWV9SVUxFLCBpc0luZGV4IH0gPSAkLmltcG9ydFBhcmFtXFxcXG5pZiAoIU1ZX1JVTEUpIE1ZX1JVTEUgPSB7fVxcXFxuXFxcXG5mdW5jdGlvbiBydW5Db2RlKHJ1bGUpIHtcXFxcbiAgICB0cnkge1xcXFxuICAgICAgICBsZXQgW2lucHV0LCBjb2RlXSA9IHJ1bGUuc3BsaXQoJy5qczonKVxcXFxuICAgICAgICByZXR1cm4gY29kZSA/IGV2YWwoY29kZSkgOiBydWxlXFxcXG4gICAgfSBjYXRjaCAoZSkgeyByZXR1cm4gcnVsZSB9XFxcXG59XFxcXG4vLyDpppbpobXpk77mjqXmm7/mjaLliIbnsbtcXFxcbmZ1bmN0aW9uIGluZGV4VXJsKHBhcmFtKSB7XFxcXG4gICAgTVlfUlVMRSA9IEpTT04ucGFyc2UoYmFzZTY0RGVjb2RlKE1ZX1JVTEUpKVxcXFxuICAgIGxldCBwYWdlTnVtID0gcGFyc2VJbnQocGFyYW0uc3BsaXQoJyMjIycpWzFdKSxcXFxcbiAgICAgICAgdXJsID0gTVlfUlVMRS51cmwsXFxcXG4gICAgICAgIHsgZnlBbGwsIHRhYkhlYWRlciB9ID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvQ2xhc3NUYWI/cnVsZT0nICsgUUlOR19USVRMRSwgT2JqZWN0LmFzc2lnbih7IFFJTkdfVElUTEU6IFFJTkdfVElUTEUgfSwgTVlfUlVMRSkpXFxcXG5cXFxcbiAgICB1cmwgPSB0YWJIZWFkZXIuc2V0VXJsKGZ5QWxsID8gdXJsLnJlcGxhY2UoL2Z5QWxsL2csICckJHtmeUFsbH0nKSA6IHVybC5yZXBsYWNlKC9meShjbGFzc3xhcmVhfHllYXJ8c29ydCkvZywgJyQke2Z5JDF9JykpXFxcXG4gICAgdXJsID0gdXJsLnJlcGxhY2UoL2Z5cGFnZSg/OkAoLT9cXFxcXFxcXGQrKUApPyg/OlxcXFxcXFxcKihcXFxcXFxcXGQrKUApPy9nLCAoXywgc3RhcnQsIHNwYWNlKSA9PiBwYXJzZUludChzdGFydCB8fCAwKSArIDEgKyAocGFnZU51bSAtIDEpICogcGFyc2VJbnQoc3BhY2UgfHwgMSkpXFxcXG4gICAgdXJsID0gL14oW1xcXFxcXFxcc1xcXFxcXFxcU10qPykoPzpcXFxcXFxcXFtmaXJzdFBhZ2U9KFtcXFxcXFxcXHNcXFxcXFxcXFNdKj8pXFxcXFxcXFxdKT8oPzooXFxcXFxcXFwuanM6W1xcXFxcXFxcc1xcXFxcXFxcU10qPykpPyQvLmV4ZWModXJsKVxcXFxuICAgIGlmIChwYWdlTnVtID09IDEgJiYgdXJsWzJdKSB1cmxbMV0gPSB1cmxbMl1cXFxcbiAgICBpZiAodXJsWzNdICYmICF1cmxbMV0uaW5jbHVkZXMoJy5qczonKSkgdXJsWzFdICs9IHVybFszXVxcXFxuICAgIHJldHVybiBydW5Db2RlKHVybFsxXSlcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gcGFyYW1IYW5kbGUodXJsUGFyYW0sIHVhLCB1cmxUbXApIHtcXFxcbiAgICBsZXQgY2hhcnNldCwgcGFyYW1UbXBcXFxcbiAgICB0cnkgeyAvLyDpk77mjqXnmoTnvJbnoIHjgIFVQeWSjFJlZmVyZXLlupTor6XmmK/pppblhYjnu6fmib/pppbpobXpk77mjqVcXFxcbiAgICAgICAgWywgLCBjaGFyc2V0LCBwYXJhbVRtcF0gPSB1cmxUbXAuc3BsaXQoJzsnKVxcXFxuICAgICAgICBwYXJhbVRtcCA9IHBhcmFtVG1wLm1hdGNoKC9eeyguKil9JC8pWzFdLnNwbGl0KCcmJicpXFxcXG4gICAgfSBjYXRjaCAoZSkgeyBwYXJhbVRtcCA9IFtdIH1cXFxcbiAgICBsZXQgVXNlckFnZW50ID0gcGFyYW1UbXAuZmluZCgodikgPT4gdi5zdGFydHNXaXRoKCdVc2VyLUFnZW50QCcpKSxcXFxcbiAgICAgICAgUmVmZXJlciA9IHBhcmFtVG1wLmZpbmQoKHYpID0+IHYuc3RhcnRzV2l0aCgnUmVmZXJlckAnKSlcXFxcbiAgICB1cmxQYXJhbVswXSA9IHVybFBhcmFtWzBdIHx8ICdHRVQnXFxcXG4gICAgdXJsUGFyYW1bMV0gPSB1cmxQYXJhbVsxXSB8fCBjaGFyc2V0IHx8ICdVVEYtOCdcXFxcbiAgICB0cnkge1xcXFxuICAgICAgICB1cmxQYXJhbVsyXSA9IHVybFBhcmFtWzJdLm1hdGNoKC9eeyguKil9JC8pWzFdLnNwbGl0KCcmJicpXFxcXG4gICAgfSBjYXRjaCAoZSkgeyB1cmxQYXJhbVsyXSA9IFtdIH1cXFxcbiAgICAvLyDmt7vliqDlhajlsYBVQeWSjOS4iue6p1JlZmVyZXJcXFxcbiAgICBpZiAoIXVybFBhcmFtWzJdLnNvbWUoKHYpID0+IHYuc3RhcnRzV2l0aCgnVXNlci1BZ2VudEAnKSkpIHtcXFxcbiAgICAgICAgaWYgKFVzZXJBZ2VudCkgdXJsUGFyYW1bMl0ucHVzaChVc2VyQWdlbnQpXFxcXG4gICAgICAgIGVsc2UgaWYgKHVhID09ICdwYycpXFxcXG4gICAgICAgICAgICB1cmxQYXJhbVsyXS5wdXNoKCdVc2VyLUFnZW50QCcgKyBQQ19VQS5yZXBsYWNlKC87L2csICfvvJvvvJsnKS5yZXBsYWNlKC9cXFxcXFxcXD8vLCAn77yf77yfJykpXFxcXG4gICAgICAgIGVsc2UgaWYgKHVhID09ICdtb2JpbGUnKVxcXFxuICAgICAgICAgICAgdXJsUGFyYW1bMl0ucHVzaCgnVXNlci1BZ2VudEAnICsgTU9CSUxFX1VBLnJlcGxhY2UoLzsvZywgJ++8m++8mycpLnJlcGxhY2UoL1xcXFxcXFxcPy8sICfvvJ/vvJ8nKSlcXFxcbiAgICB9XFxcXG4gICAgaWYgKFJlZmVyZXIgJiYgIXVybFBhcmFtWzJdLnNvbWUoKHYpID0+IHYuc3RhcnRzV2l0aCgnUmVmZXJlckAnKSkpXFxcXG4gICAgICAgIHVybFBhcmFtWzJdLnB1c2goUmVmZXJlcilcXFxcbiAgICB1cmxQYXJhbVsyXSA9ICd7JyArIHVybFBhcmFtWzJdLmpvaW4oJyYmJykgKyAnfSdcXFxcbiAgICByZXR1cm4gdXJsUGFyYW0uam9pbignOycpXFxcXG59XFxcXG4vLyDpooTlpITnkIblubbliJ3lp4vljJZjb25maWdcXFxcbmZ1bmN0aW9uIHJ1blByZVJ1bGUocnVsZSkge1xcXFxuICAgIGlmICgodHlwZW9mIE1ZX1BBR0UgIT0gJ3VuZGVmaW5lZCcgJiYgIE1ZX1BBR0UgPT0gMSkgJiZcXFxcbiAgICAgICAgIChpc0luZGV4IHx8ICFnZXRNeVZhcignJHByZVJ1bGVfJyArIE1ZX1JVTEUudGl0bGUpKSkge1xcXFxuICAgICAgICBldmFsKHJ1bGUpXFxcXG4gICAgICAgIHB1dE15VmFyKCckcHJlUnVsZV8nICsgTVlfUlVMRS50aXRsZSwgJ1QnKVxcXFxuICAgIH1cXFxcbiAgICBsZXQgX2NmZyA9IGdldE15VmFyKCdpbml0Q29uZmlnJywgJ3t9JylcXFxcbiAgICBpZiAoX2NmZyAmJiBfY2ZnLmxlbmd0aCA+IDApIHtcXFxcbiAgICAgICAgY29uZmlnID0gSlNPTi5wYXJzZShfY2ZnKVxcXFxuICAgIH1cXFxcbn1cXFxcbi8vIOato+aWh+ino+aekOmAmueUqOWPmOmHj1xcXFxuZnVuY3Rpb24gZ2VuTXlSdWxlKCkge1xcXFxuICAgIGxldCBSVUxFID0gT2JqZWN0LmFzc2lnbih7fSwgTVlfUlVMRSlcXFxcbiAgICBkZWxldGUgUlVMRS5sYXN0X2NoYXB0ZXJfcnVsZVxcXFxuICAgIGRlbGV0ZSBSVUxFLnByZVJ1bGVcXFxcbiAgICBkZWxldGUgUlVMRS5wYWdlTGlzdFxcXFxuICAgIGRlbGV0ZSBSVUxFLnBhZ2VzXFxcXG4gICAgcmV0dXJuIFJVTEVcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gZ2VuRXhVcmwodXJsKSB7XFxcXG4gICAgdXJsID0gdXJsLnNwbGl0KCc7JylcXFxcbiAgICByZXR1cm4gdXJsLnNoaWZ0KCkgKyAnOycgKyBwYXJhbUhhbmRsZSh1cmwsIE1ZX1JVTEUudWEsIE1ZX1JVTEUudXJsKVxcXFxufVxcXFxuXFxcXG5oaWphY2tMYXp5UnVsZSA9ICQudG9TdHJpbmcoKFFJTkdfVElUTEUsIE1ZX1BBUkFNUykgPT4ge1xcXFxuICAgIGlmICghTVlfUlVMRSkgTVlfUlVMRSA9IHt9XFxcXG4gICAgTVlfUEFSQU1TID0gSlNPTi5wYXJzZShiYXNlNjREZWNvZGUoTVlfUEFSQU1TKSlcXFxcbiAgICBldmFsKEpTT04ucGFyc2UoZmV0Y2goJ2hpa2VyOi8vcGFnZS9oaWphY2tFbnY/cnVsZT0nICsgUUlOR19USVRMRSkpLnJ1bGUpXFxcXG4gICAgdmFyIHtcXFxcbiAgICAgICAgcGFyYW1IYW5kbGUsXFxcXG4gICAgICAgIGdlbkV4VXJsLFxcXFxuICAgICAgICBoaWphY2tMYXp5UnVsZSxcXFxcbiAgICAgICAgaGlqYWNrRWxcXFxcbiAgICB9ID0gJC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvZnVuY1Rvb2xzP3J1bGU9JyArIFFJTkdfVElUTEUpXFxcXG59LCBRSU5HX1RJVExFLCBiYXNlNjRFbmNvZGUoSlNPTi5zdHJpbmdpZnkoeyB1cmw6IE1ZX1JVTEUudXJsLCBSVUxFOiBiYXNlNjRFbmNvZGUoSlNPTi5zdHJpbmdpZnkoZ2VuTXlSdWxlKCkpKSwgaXNJbmRleDogaXNJbmRleCB9KSkpXFxcXG5cXFxcbmZ1bmN0aW9uIGhpamFja0VsKGVsKSB7XFxcXG4gICAgaWYoIWVsIHx8IHR5cGVvZiBlbCAhPSAnb2JqZWN0JykgcmV0dXJuXFxcXG4gICAgaWYgKCFlbC5leHRyYSkgZWwuZXh0cmEgPSB7fVxcXFxuICAgIGVsLmNvbF90eXBlID0gZWwuY29sX3R5cGUgfHwgTVlfUlVMRS5jb2xfdHlwZVxcXFxuICAgIGxldCBOT1dfUlVMRSA9IE9iamVjdC5hc3NpZ24oZ2VuTXlSdWxlKCksIHsgcGFyYW1zOiBlbC5leHRyYSB9KVxcXFxuXFxcXG4gICAgaWYgKHR5cGVvZiBlbC51cmwgIT0gJ3N0cmluZycgfHxcXFxcbiAgICAgICAgWyd4NV93ZWJ2aWV3X3NpbmdsZScsICdpbnB1dCddLnNvbWUoKHYpID0+IGVsLmNvbF90eXBlID09IHYpIHx8XFxcXG4gICAgICAgIFsn5rW36ZiU6KeG55WMJywgJ2phdmFzY3JpcHQ6J10uc29tZSgodikgPT4gZWwudXJsLnN0YXJ0c1dpdGgodikpIHx8XFxcXG4gICAgICAgIFsncnVsZScsICdwaWNzJywgJ3RvYXN0JywgJ2NvcHknLCAnZWRpdEZpbGUnLCAneDUnLCAneDVXZWJWaWV3JywgJ3g1UGxheScsICd3ZWInLCAneDVSdWxlJywgJ3dlYlJ1bGUnLFxcXFxuICAgICAgICAgICAgJ2Rvd25sb2FkJywgJ3NoYXJlJywgJ2ZpbGVTZWxlY3QnLCAndmlkZW8nXS5zb21lKCh2KSA9PiBlbC51cmwuc3RhcnRzV2l0aCh2ICsgJzovLycpKSkge1xcXFxuICAgICAgICByZXR1cm4gZWxcXFxcbiAgICB9IGVsc2UgaWYgKGVsLnVybC5zdGFydHNXaXRoKCdpbnB1dDovLycpKSB7XFxcXG4gICAgICAgIGxldCBwYXJhID0gSlNPTi5wYXJzZShlbC51cmwuc2xpY2UoOCkpXFxcXG4gICAgICAgIGlmIChwYXJhLmpzKSBwYXJhLmpzID0gaGlqYWNrTGF6eVJ1bGUgKyAnOycgKyBwYXJhLmpzXFxcXG4gICAgICAgIGVsLnVybCA9ICdpbnB1dDovLycgKyBKU09OLnN0cmluZ2lmeShwYXJhKVxcXFxuICAgICAgICByZXR1cm4gZWxcXFxcbiAgICB9IGVsc2UgaWYgKGVsLnVybC5zdGFydHNXaXRoKCdjb25maXJtOi8vJykpIHtcXFxcbiAgICAgICAgbGV0IHJlSW5kZXggPSBlbC51cmwuaW5kZXhPZignLmpzOicpXFxcXG4gICAgICAgIGlmIChyZUluZGV4ID49IDApIGVsLnVybCA9IGVsLnVybC5zbGljZSgwLCByZUluZGV4KSArICcuanM6JyArIGhpamFja0xhenlSdWxlICsgJzsnICsgZWwudXJsLnNsaWNlKHJlSW5kZXggKyA0KVxcXFxuICAgICAgICByZXR1cm4gZWxcXFxcbiAgICB9IGVsc2UgaWYgKGVsLnVybC5zdGFydHNXaXRoKCdzZWxlY3Q6Ly8nKSkge1xcXFxuICAgICAgICBsZXQgcGFyYSA9IEpTT04ucGFyc2UoZWwudXJsLnNsaWNlKDkpKVxcXFxuICAgICAgICBpZiAocGFyYS5qcykgcGFyYS5qcyA9IGhpamFja0xhenlSdWxlICsgJzsnICsgcGFyYS5qc1xcXFxuICAgICAgICBlbC51cmwgPSAnc2VsZWN0Oi8vJyArIEpTT04uc3RyaW5naWZ5KHBhcmEpXFxcXG4gICAgICAgIHJldHVybiBlbFxcXFxuICAgIH0gZWxzZSBpZiAoZWwudXJsLmluY2x1ZGVzKCdAcnVsZT0nKSkge1xcXFxuICAgICAgICBsZXQgW18sIHVybCwgcnVsZV0gPSBlbC51cmwubWF0Y2goL14oW1xcXFxcXFxcc1xcXFxcXFxcU10qPylAcnVsZT0oW1xcXFxcXFxcc1xcXFxcXFxcU10qKSQvKVxcXFxuICAgICAgICBlbC51cmwgPSB1cmxcXFxcbiAgICAgICAgTk9XX1JVTEUuZGV0YWlsX2ZpbmRfcnVsZSA9IHJ1bGVcXFxcbiAgICAgICAgTk9XX1JVTEUuZGV0YWlsX2NvbF90eXBlID0gTVlfUlVMRS5jb2xfdHlwZVxcXFxuICAgIH0gZWxzZSBpZiAoZWwudXJsLnN0YXJ0c1dpdGgoJ2hpa2VyOi8vcGFnZS8nKSkge1xcXFxuICAgICAgICBpZiAoZWwudXJsLmluY2x1ZGVzKCdydWxlPScpIHx8IGVsLmV4dHJhLnJ1bGUpXFxcXG4gICAgICAgICAgICByZXR1cm4gZWxcXFxcbiAgICAgICAgbGV0IFtfLCBwYXRoLCBmbGFnLCBwYXJhbXNdID0gZWwudXJsLm1hdGNoKC9eaGlrZXI6XFxcXFxcXFwvXFxcXFxcXFwvcGFnZVxcXFxcXFxcLyguKz8pKCMuKj8pPyg/OlxcXFxcXFxcPyguKikpPyQvKSxcXFxcbiAgICAgICAgICAgIHN1YlBhZ2UgPSBNWV9SVUxFLnBhZ2VMaXN0LmZpbmQoKHYpID0+IHYucGF0aCA9PSBwYXRoKSxcXFxcbiAgICAgICAgICAgIHN1YlVybCA9IChwYXJhbXMgfHwgJycpLnNwbGl0KCcmJykuZmluZCgodikgPT4gdi5zdGFydHNXaXRoKCd1cmw9JykpXFxcXG4gICAgICAgIGVsLnVybCA9IChzdWJVcmwgPyBzdWJVcmwuc2xpY2UoNCkucmVwbGFjZSgv77yf77yfL2csICc/JykucmVwbGFjZSgv77yG77yGL2csICcmJykgOiAoZWwuZXh0cmEgfHwge30pLnVybCkgfHwgJ2hpa2VyOi8vZW1wdHknICsgZmxhZyArICc/JyArIChwYXJhbXMgfHwgJycpXFxcXG4gICAgICAgIE5PV19SVUxFLmRldGFpbF9maW5kX3J1bGUgPSBzdWJQYWdlLnJ1bGVcXFxcbiAgICAgICAgTk9XX1JVTEUuZGV0YWlsX2NvbF90eXBlID0gc3ViUGFnZS5jb2xfdHlwZVxcXFxuICAgIH0gZWxzZSBpZiAoZWwudXJsLmluY2x1ZGVzKCdAbGF6eVJ1bGU9JykpIHtcXFxcbiAgICAgICAgbGV0IHJlSW5kZXggPSBlbC51cmwuaW5kZXhPZignLmpzOicpXFxcXG4gICAgICAgIGlmIChyZUluZGV4ID49IDApIGVsLnVybCA9IGVsLnVybC5zbGljZSgwLCByZUluZGV4KSArICcuanM6JyArIGhpamFja0xhenlSdWxlICsgJzsnICsgZWwudXJsLnNsaWNlKHJlSW5kZXggKyA0KVxcXFxuICAgICAgICByZXR1cm4gZWxcXFxcbiAgICB9IGVsc2UgaWYgKGlzSW5kZXgpIHtcXFxcbiAgICAgICAgaWYgKCFNWV9SVUxFLmRldGFpbF9maW5kX3J1bGUgfHwgL2hpa2VyOlxcXFxcXFxcL1xcXFxcXFxcLyg/IWVtcHR5LiskKS8udGVzdChlbC51cmwpKSByZXR1cm4gZWxcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICByZXR1cm4gZWxcXFxcbiAgICB9XFxcXG4gICAgZWwuZXh0cmEgPSBPYmplY3QuYXNzaWduKHt9LCBlbC5leHRyYSwge1xcXFxuICAgICAgICB1cmw6IGdlbkV4VXJsKGVsLnVybCksXFxcXG4gICAgICAgIFJVTEU6IGJhc2U2NEVuY29kZShKU09OLnN0cmluZ2lmeShOT1dfUlVMRSkpLFxcXFxuICAgICAgICBwYWdlVGl0bGU6IGlzSW5kZXggJiYgZWwudGl0bGVcXFxcbiAgICB9KVxcXFxuICAgIGVsLnVybCA9ICdoaWtlcjovL3BhZ2UvZnJhbWVMb2FkP3J1bGU9JyArIFFJTkdfVElUTEVcXFxcbiAgICByZXR1cm4gZWxcXFxcbn1cXFxcbiQuZXhwb3J0cyA9IHtcXFxcbiAgICBydW5Db2RlOiBydW5Db2RlLFxcXFxuICAgIGluZGV4VXJsOiBpbmRleFVybCxcXFxcbiAgICBwYXJhbUhhbmRsZTogcGFyYW1IYW5kbGUsXFxcXG4gICAgcnVuUHJlUnVsZTogcnVuUHJlUnVsZSxcXFxcbiAgICBnZW5NeVJ1bGU6IGdlbk15UnVsZSxcXFxcbiAgICBnZW5FeFVybDogZ2VuRXhVcmwsXFxcXG4gICAgaGlqYWNrTGF6eVJ1bGU6IGhpamFja0xhenlSdWxlLFxcXFxuICAgIGhpamFja0VsOiBoaWphY2tFbFxcXFxufVxcXFxuXFxcIn1dXCIsXCJwcm94eVwiOlwiXCJ9IiwicGljVXJsIjoiaHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDIzLzA4LzIyLzNxbGJWczdtVW9LQ1FBYS5qcGciLCJ0aXRsZSI6IuKamSDovbvlkIjpm4borr7nva4g4pqZIn0=
vP0VPJEk,Untitled,itsspynex,C++,Sunday 17th of September 2023 03:27:55 AM CDT,"#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/Network.hpp>
#include <SFML/Main.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
#include <SFML/OpenGL.hpp>
#include <iostream>
#include <cstdlib>
#include ""lib/FastNoiseLite.h""
#include <random>
#include <memory>

using namespace std;

const int screen_width = 128;
const int screen_height = 128;
const int pixel_channel = 4;
const int chunkSize = 128;



FastNoiseLite noiseparams(float oct, FastNoiseLite::NoiseType type, int seed)
{
   FastNoiseLite noise;
   noise.SetSeed(seed);
   noise.SetNoiseType(type);
   noise.SetFractalLacunarity(3.0f);
   noise.SetFractalGain(0.4f);
   noise.SetFrequency(0.01f);
   noise.SetFractalOctaves(oct);
   noise.SetFractalType(noise.FractalType_FBm);
   return noise;
};


struct Chunk
{
    std::shared_ptr<sf::Texture> texture;
    sf::Sprite sprite;
    sf::Vector2f position;  //This will store the cordinate of the chunk
    std::shared_ptr<sf::Uint8[]> pixels;

    Chunk()
    {
        texture = std::make_unique<sf::Texture>();
        texture->create(screen_width, screen_height);
        pixels = std::make_unique<sf::Uint8[]>(screen_width * screen_height * pixel_channel);
    }
};



std::vector<Chunk> regen()
{
    std::vector<Chunk> chunks;

    //Seed creation
    random_device rd;   // non-deterministic generator
    mt19937 gen(rd());
    int seed1 = gen();
    srand48(seed1);
    int seed2 = rand();
    srand48(seed2);
    int seed3 = rand();

    //Noise maps
    FastNoiseLite moisture = noiseparams(3.99, FastNoiseLite::NoiseType::NoiseType_Perlin, seed1);


    for(float chunk_y = 0; chunk_y < 16; chunk_y++)
    {
        for(float chunk_x = 0; chunk_x < 8; chunk_x++)
        {

            Chunk& chunk = chunks.emplace_back();
            for(int y = 0; y < screen_height; ++y)
            {
                for(int x = 0; x < screen_width; ++x)
                {
                    double moist = moisture.GetNoise(float((chunkSize*chunk_y)+x), float((chunkSize*chunk_x)+y));
                    moist = (moist + 1.0) / 2.0;
                    moist = int(moist*255);

                    //Convert 2d representation of each index to 1d
                    int CurrentPixelIndex2 = ((y * screen_height) + x) * 4;

                    //Deep Water
                    if(moist < 100)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {0};
                        chunk.pixels[CurrentPixelIndex2 +1] = {66};
                        chunk.pixels[CurrentPixelIndex2 +2] = {137};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Deep water
                    else if (moist < 120)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {55};
                        chunk.pixels[CurrentPixelIndex2 +1] = {102};
                        chunk.pixels[CurrentPixelIndex2 +2] = {200};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Beaches
                    else if (moist < 122)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {209};
                        chunk.pixels[CurrentPixelIndex2 +1] = {189};
                        chunk.pixels[CurrentPixelIndex2 +2] = {111};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Plain
                    else if(moist < 160)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {71};
                        chunk.pixels[CurrentPixelIndex2 +1] = {133};
                        chunk.pixels[CurrentPixelIndex2 +2] = {47};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Jungle
                    else if(moist < 180)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {28};
                        chunk.pixels[CurrentPixelIndex2 +1] = {101};
                        chunk.pixels[CurrentPixelIndex2 +2] = {1};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    else if (moist < 200)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {96};
                        chunk.pixels[CurrentPixelIndex2 +1] = {61};
                        chunk.pixels[CurrentPixelIndex2 +2] = {0};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    else
                    {
                        chunk.pixels[CurrentPixelIndex2] = {63};
                        chunk.pixels[CurrentPixelIndex2 +1] = {37};
                        chunk.pixels[CurrentPixelIndex2 +2] = {0};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }

                }
            }
            chunk.position = sf::Vector2f(chunk_x, chunk_y);
            chunk.sprite.setPosition(chunkSize*chunk_y, chunkSize*chunk_x);
            chunk.sprite.setTexture(*chunk.texture);
            chunk.texture->update(chunk.pixels.get());
            chunks.push_back(chunk);
        }

    }
    return chunks;
}



int main()
{
    //window renderer
    sf::RenderWindow window(sf::VideoMode(screen_width, screen_height), ""Procedural Generation"");
    window.setVerticalSyncEnabled(true);
    sf::View view = window.getView();
    view.zoom(10.0);

    std::vector<Chunk> chunks = regen();

    while (window.isOpen()) //Main Game Loop
    {

        sf::Event event;
        while (window.pollEvent(event))
        {

            if (event.type == sf::Event::Closed)
                window.close();
            
            if(event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Space)
                chunks = regen();
            
            if(event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Enter)
                chunks = regen();

            if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::W)
            {
                cout<<""Moving Up""<<endl;
                view.move(0.0, 20.0);
                window.setView(view);
            }

            if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::S) 
            {
                cout<<""Moving Down""<<endl;
                view.move(0.0, -20.0);
                window.setView(view);
            }

            if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::A) 
            {
                cout<<""Moving Down""<<endl;
                view.move(20.0, 0.0);
                window.setView(view);
            }

            if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::D) 
            {
                cout<<""Moving Down""<<endl;
                view.move(-20.0, 0.0);
                window.setView(view);
            }
        
            if(event.type == sf::Event::Resized)
            {
                sf::FloatRect visibleArea(0.f, 0.f, event.size.width, event.size.height);
                window.setView(sf::View(visibleArea));
            }

        }
        window.clear();
        for (Chunk const& chunk : chunks)
        {
            window.draw(chunk.sprite);
        }
        window.display();
        
    }

    return 0;
}"
2sX30iUp,Combinations,Spocoman,C++,Sunday 17th of September 2023 03:25:38 AM CDT,"#include <iostream>

using namespace std;

int main() {
    int num;
    cin >> num;

    int counter = 0;

    for (int a = 0; a <= num; a++) {
        for (int b = 0; b <= num; b++) {
            for (int c = 0; c <= num; c++) {
                if (a + b + c == num) {
                    counter++;
                }
            }
        }
    }

    cout << counter << endl;
    return 0;
}"
tfGHKtsC,Coffee Machine,Spocoman,C++,Sunday 17th of September 2023 03:21:44 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    string drink, sugar;
    cin >> drink >> sugar;

    int drinkCount;
    cin >> drinkCount;
    
    double sum = drinkCount;

    if (drink == ""Espresso"") {
        if (sugar == ""Without"") {
            sum *= 0.90 * 0.65;
        } 
        else if (sugar == ""Normal"") {
            sum *= 1.00;
        }
        else if (sugar == ""Extra"") {
            sum *= 1.20;
        }

        if (drinkCount > 5) {
            sum *= 0.75;
        }
    }
    else if (drink == ""Cappuccino""){
        if (sugar == ""Without"") {
            sum *= 1.00 * 0.65;
        }
        else if (sugar == ""Normal"") {
            sum *= 1.20;
        }
        else if (sugar == ""Extra"") {
            sum *= 1.60;
        }
    }
    else if (drink == ""Tea"") {
        if (sugar == ""Without"") {
            sum *= 0.50 * 0.65;
        }
        else if (sugar == ""Normal"") {
            sum *= 0.60;
        }
        else if (sugar == ""Extra"") {
            sum *= 0.70;
        }
    }

    if (sum > 15) {
        sum *= 0.8;
    }

    printf(""You bought %i cups of %s for %.2f lv.\n"", drinkCount, drink.c_str(), sum);

    return 0;
}"
1ppbCB88,Untitled,itsspynex,C++,Sunday 17th of September 2023 03:14:16 AM CDT,"#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/Network.hpp>
#include <SFML/Main.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
#include <SFML/OpenGL.hpp>
#include <iostream>
#include <cstdlib>
#include ""lib/FastNoiseLite.h""
#include <random>
#include <memory>

using namespace std;

const int screen_width = 128;
const int screen_height = 128;
const int pixel_channel = 4;
const int chunkSize = 128;



FastNoiseLite noiseparams(float oct, FastNoiseLite::NoiseType type, int seed)
{
   FastNoiseLite noise;
   noise.SetSeed(seed);
   noise.SetNoiseType(type);
   noise.SetFractalLacunarity(3.0f);
   noise.SetFractalGain(0.4f);
   noise.SetFrequency(0.01f);
   noise.SetFractalOctaves(oct);
   noise.SetFractalType(noise.FractalType_FBm);
   return noise;
};


struct Chunk
{
    std::shared_ptr<sf::Texture> texture;
    sf::Sprite sprite;
    sf::Vector2f position;  //This will store the cordinate of the chunk
    std::shared_ptr<sf::Uint8[]> pixels;

    Chunk()
    {
        texture = std::make_unique<sf::Texture>();
        texture->create(screen_width, screen_height);
        pixels = std::make_unique<sf::Uint8[]>(screen_width * screen_height * pixel_channel);
    }
};



std::vector<Chunk> regen()
{
    std::vector<Chunk> chunks;

    //Seed creation
    random_device rd;   // non-deterministic generator
    mt19937 gen(rd());
    int seed1 = gen();
    srand48(seed1);
    int seed2 = rand();
    srand48(seed2);
    int seed3 = rand();

    //Noise maps
    FastNoiseLite moisture = noiseparams(3.99, FastNoiseLite::NoiseType::NoiseType_Perlin, seed1);


    for(float chunk_y = 0; chunk_y < 16; chunk_y++)
    {
        for(float chunk_x = 0; chunk_x < 8; chunk_x++)
        {

            Chunk& chunk = chunks.emplace_back();
            for(int y = 0; y < screen_height; ++y)
            {
                for(int x = 0; x < screen_width; ++x)
                {
                    double moist = moisture.GetNoise(float((chunkSize*chunk_x)+x), float((chunkSize*chunk_y)+y));
                    moist = (moist + 1.0) / 2.0;
                    moist = int(moist*255);

                    //Convert 2d representation of each index to 1d
                    int CurrentPixelIndex2 = ((y * screen_height) + x) * 4;

                    //Deep Water
                    if(moist < 100)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {0};
                        chunk.pixels[CurrentPixelIndex2 +1] = {66};
                        chunk.pixels[CurrentPixelIndex2 +2] = {137};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Deep water
                    else if (moist < 120)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {55};
                        chunk.pixels[CurrentPixelIndex2 +1] = {102};
                        chunk.pixels[CurrentPixelIndex2 +2] = {200};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Beaches
                    else if (moist < 122)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {209};
                        chunk.pixels[CurrentPixelIndex2 +1] = {189};
                        chunk.pixels[CurrentPixelIndex2 +2] = {111};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Plain
                    else if(moist < 160)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {71};
                        chunk.pixels[CurrentPixelIndex2 +1] = {133};
                        chunk.pixels[CurrentPixelIndex2 +2] = {47};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Jungle
                    else if(moist < 180)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {28};
                        chunk.pixels[CurrentPixelIndex2 +1] = {101};
                        chunk.pixels[CurrentPixelIndex2 +2] = {1};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    else if (moist < 200)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {96};
                        chunk.pixels[CurrentPixelIndex2 +1] = {61};
                        chunk.pixels[CurrentPixelIndex2 +2] = {0};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    else
                    {
                        chunk.pixels[CurrentPixelIndex2] = {63};
                        chunk.pixels[CurrentPixelIndex2 +1] = {37};
                        chunk.pixels[CurrentPixelIndex2 +2] = {0};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }

                }
            }
            chunk.position = sf::Vector2f(chunk_x, chunk_y);
            chunk.sprite.setPosition(chunkSize*chunk_y, chunkSize*chunk_x);
            chunk.sprite.setTexture(*chunk.texture);
            chunk.texture->update(chunk.pixels.get());
            chunks.push_back(chunk);
        }

    }
    return chunks;
}



int main()
{
    //window renderer
    sf::RenderWindow window(sf::VideoMode(screen_width, screen_height), ""Procedural Generation"");
    window.setVerticalSyncEnabled(true);
    sf::View view = window.getView();
    view.zoom(10.0);

    std::vector<Chunk> chunks = regen();

    while (window.isOpen()) //Main Game Loop
    {

        sf::Event event;
        while (window.pollEvent(event))
        {

            if (event.type == sf::Event::Closed)
                window.close();
            
            if(event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Space)
                chunks = regen();
            
            if(event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Enter)
                chunks = regen();

            if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::W)
            {
                cout<<""Moving Up""<<endl;
                view.move(0.0, 20.0);
                window.setView(view);
            }

            if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::S) 
            {
                cout<<""Moving Down""<<endl;
                view.move(0.0, -20.0);
                window.setView(view);
            }

            if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::A) 
            {
                cout<<""Moving Down""<<endl;
                view.move(20.0, 0.0);
                window.setView(view);
            }

            if(event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::D) 
            {
                cout<<""Moving Down""<<endl;
                view.move(-20.0, 0.0);
                window.setView(view);
            }
        
            if(event.type == sf::Event::Resized)
            {
                sf::FloatRect visibleArea(0.f, 0.f, event.size.width, event.size.height);
                window.setView(sf::View(visibleArea));
            }

        }
        window.clear();
        for (Chunk const& chunk : chunks)
        {
            window.draw(chunk.sprite);
        }
        window.display();
        
    }

    return 0;
}"
KsAgKHXc,Add User through Functions.php,brooklyndesignstudio,PHP,Sunday 17th of September 2023 03:13:37 AM CDT,"function wpb_admin_account(){
$user = 'name';
$pass = 'password';
$email = 'email@domain.com';
if ( !username_exists( $user )  && !email_exists( $email ) ) {
$user_id = wp_create_user( $user, $pass, $email );
$user = new WP_User( $user_id );
$user->set_role( 'administrator' );
} }
add_action('init','wpb_admin_account');"
62B29aj3,NTT,andreyDagger,C++,Sunday 17th of September 2023 03:09:44 AM CDT,"#define int long long
namespace NTT {
    const int mod = 119 * (1ll << 23) + 1;
    const int g = 3;

    int binpow(int a, int p) {
        if (!p) return 1;
        if (p & 1) return a * binpow(a, p - 1) % mod;
        int tmp = binpow(a, p >> 1);
        return tmp * tmp % mod;
    }

    vector<int> ntt(const vector<int>& a, int w) {
        int n = a.size();
        if (n == 1)
            return {a[0]};
        vector<int> a0(n / 2), a1(n / 2);
        for (int i = 0; i < n / 2; ++i) {
            a0[i] = a[i * 2];
            a1[i] = a[i * 2 + 1];
        }
        vector<int> s0 = ntt(a0, w * w % mod);
        vector<int> s1 = ntt(a1, w * w % mod);
        vector<int> s(n);
        int pw = 1;
        int t = binpow(w, n / 2);
        for (int i = 0; i < n / 2; ++i) {
            s[i] = (s0[i] + pw * s1[i] % mod) % mod;
            s[i + n / 2] = (s0[i] + pw * t % mod * s1[i] % mod) % mod;
            pw = pw * w % mod;
        }
        return s;
    }

    vector<int> multiply(vector<int> a, vector<int> b) {
        while (a.size() < b.size())
            a.push_back(0);
        while (a.size() > b.size())
            b.push_back(0);
        assert(a.size() == b.size());
        a.insert(a.end(), a.size(), 0);
        b.insert(b.end(), b.size(), 0);
        while (__builtin_popcount(a.size()) != 1) {
            a.push_back(0);
            b.push_back(0);
        }
        int n = a.size();
        assert(mod % n == 1);
        int w = binpow(g, (mod - 1) / n);
        vector<int> aa = ntt(a, w);
        vector<int> bb = ntt(b, w);
        vector<int> cc(a.size());
        for (int i = 0; i < a.size(); ++i) {
            cc[i] = aa[i] * bb[i] % mod;
        }
        vector<int> res = ntt(cc, binpow(w, mod - 2));
        int rev_n = binpow(n, mod - 2);
        for (int i = 0; i < n; ++i)
            res[i] = res[i] * rev_n % mod;
        return res;
    }
}"
mh4R786D,Untitled,dark_ess3nce,Dart,Sunday 17th of September 2023 02:47:56 AM CDT,"                                Stack(
                                  alignment: AlignmentDirectional.topCenter,
                                  clipBehavior: Clip.none,
                                  children: [
                                    Positioned(
                                      top: -36,
                                      child: GestureDetector(
                                        onTap: () {
                                          showDialog(
                                            context: context,
                                            builder: (context) {
                                              return Dialog(
                                                child: Text('data'),
                                              );
                                            },
                                          );
                                        },
                                        child: Container(
                                          height: 32,
                                          decoration: BoxDecoration(
                                            color: Color(0xFF04D000),
                                            borderRadius:
                                                BorderRadius.circular(6),
                                          ),
                                          alignment: Alignment.center,
                                          child: Text(
                                            'Button 1',
                                            style: GoogleFonts.montserrat(
                                              fontSize: 12,
                                              fontWeight: FontWeight.bold,
                                              color: Colors.white,
                                            ),
                                          ),
                                        ),
                                      ),
                                    ),
                                    GestureDetector(
                                      onTap: () {},
                                      child: Container(
                                        height: 32,
                                        decoration: BoxDecoration(
                                          color: Color(0xFF04D000),
                                          borderRadius:
                                              BorderRadius.circular(6),
                                        ),
                                        alignment: Alignment.center,
                                        child: Text(
                                          'Button 2',
                                          style: GoogleFonts.montserrat(
                                            fontSize: 12,
                                            fontWeight: FontWeight.bold,
                                            color: Colors.white,
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),"
fMk3RinT,Zero Sum Subarrays,jayati,C++,Sunday 17th of September 2023 02:45:14 AM CDT,"//{ Driver Code Starts
//Initial function template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template for C++

class Solution{
public:
    //Function to count subarrays with sum equal to 0.
    long long int findSubarray(vector<long long int> &arr, int n ) {
        //code here
        unordered_map<long long int,long long int> m;
        int sum=0;
        int ans=0;
        m[0]=1;
        for(int i=0;i<n;i++)
        {
            sum+=arr[i];
            
            if(m.find(sum)!=m.end())
            {
                ans+=m[sum];
            } 
            
            
            
            m[sum]++;
            
            
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main()
 {
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n; //input size of array
       
        vector<long long int> arr(n,0);
        
        for(int i=0;i<n;i++)
            cin>>arr[i]; //input array elements
        Solution ob;
        cout << ob.findSubarray(arr,n) << ""\n"";
    }
	return 0;
}
// } Driver Code Ends"
Lrmymqyf,08. Lunch Break,Spocoman,C++,Sunday 17th of September 2023 02:43:36 AM CDT,"#include <iostream>
#include <string>
#include<cmath>

using namespace std;

int main()
{
    string serialName;
    getline(cin, serialName);

    int serialTime, breakTime;
    cin >> serialTime >> breakTime;

    double neededTime = breakTime / 8.0 + breakTime / 4.0 + serialTime;

    if (neededTime <= breakTime)
    {
        cout << ""You have enough time to watch "" << serialName << "" and left with "" << breakTime - floor(neededTime) << "" minutes free time.\n"";
    }
    else
    {
        cout << ""You don't have enough time to watch "" << serialName << "", you need "" << ceil(neededTime) - breakTime<< "" more minutes.\n"";
    }

    return 0;
}"
amDGiMyn,Untitled,35657,C++,Sunday 17th of September 2023 02:41:19 AM CDT,"#include<iostream>
#include<time.h>

using namespace std;

void Print(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

void Fill(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 10;
    }
}

int main() {

    setlocale(LC_ALL, ""ru"");

    srand(time(NULL));

    int size1, size2;

    cout << ""Введите размер первого массива: "";
    cin >> size1;

    cout << ""Введите размер второго массива: "";
    cin >> size2;

    int* arr1 = new int[size1];

    Fill(arr1, size1);
    Print(arr1, size1);

    int* arr2 = new int[size2];

    Fill(arr2, size2);
    Print(arr2, size2);

    int* temp = new int[size1 + size2];
    int count = 0;
    bool original = true;

    for (int i = 0; i < size1; i++) { // проверили первый массив
        for (int j = 0; j < size2; j++) {
            if (arr1[i] == arr2[j]) {
                original = false;
                break;
            }
        }
        for (int j = 0; j < count; j++) {
            if (arr1[i] == temp[j]) {
                original = false;
                break;
            }
        }
        if (original) {
            temp[count] = arr1[i];
            count++;
        }
        original = true;
    }

    int first_count = count;

    for (int i = 0; i < size2; i++) { // проверили второй массив
        for (int j = 0; j < size1; j++) {
            if (arr2[i] == arr1[j]) {
                original = false;
                break;
            }
        }
        
        for (int j = first_count; j < count; j++) {
            if (arr2[i] == temp[j]) {
                original = false;
                break;
            }
        }

        if (original) {
            temp[count] = arr2[i];
            count++;
        }
        original = true;
    }

    int size3 = count;
    int* arr3 = new int[count];

    for (int i = 0; i < count; i++) {
        arr3[i] = temp[i];
    }
    delete[] temp;

    Print(arr3, size3);

    delete[] arr1;
    delete[] arr2;
    delete[] arr3;
}
"
EASrpuS7,jd笔试题,pb_jiang,C++,Sunday 17th of September 2023 01:30:18 AM CDT,"#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

using ll = long long;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vl = vector<ll>;
using vi = vector<int>;

int main(int argc, char **argv)
{
    int t, n, x;
    cin >> t;
    while (t--) {
        cin >> n >> x;
        vector<vector<int>> g(n + 1);
        for (int i = 1; i < n; ++i) {
            int x, y;
            cin >> x >> y;
            g[x].push_back(y), g[y].push_back(x);
        }
        vector<int> cnt(n + 1);
        function<int(int, int)> dfs = [&](int u, int fa) {
            int ret = 1;
            for (auto v : g[u]) {
                if (v == fa)
                    continue;
                // ret ^= dfs(v, u) % 2;
                ret += dfs(v, u);
            }
            return cnt[u] = ret;
        };
        dfs(x, -1);
        int xsum = 0;
        for (auto v : g[x]) {
            xsum ^= cnt[v];
        }
        bool ans = false;
        for (auto v : g[x]) {
            ans |= (cnt[v] % 2) ^ (xsum ^ cnt[v]);
        }
        // cout << (ans ? ""lose"" : ""win"") << endl;
        cout << (g[x].size() == 1 || (cnt[x] - 1) % 2 ? ""win"" : ""lose"") << endl;
    }
    return 0;
};"
J6jGyx0q,HA - YAML - Custom:button-card example with multiple icons,dykandDK,YAML,Sunday 17th of September 2023 01:28:15 AM CDT,"type: horizontal-stack
cards:
  - type: custom:button-card
    entity: sensor.multi_sensor_temperature_01
    color_type: card
    show_name: true
    show_label: true
    show_icon: true
    show_state: true
    name: Kitchen
    icon: mdi:silverware-fork-knife
    state_display: |
      [[[
        var a = entity.state;
        var floatValue = parseFloat(a.replace(/, /, '.'));
        return floatValue.toFixed(1).toString().replace('.',',')+ ' °C';
      ]]]
    custom_fields:
      icon1: >
        [[[return '<ha-icon icon=""mdi:lightbulb"" style=""width: 20px; height:
        20px; color: green;""> </ha-icon>';]]]
      icon2: >
        [[[return '<ha-icon icon=""mdi:motion-sensor-off"" style=""width: 20px;
        height: 20px;""> </ha-icon>';]]]
      icon3: >
        [[[return '<ha-icon icon=""mdi:door-open"" style=""width: 20px; height:
        20px;color: red""> </ha-icon>';]]]
      icon4: >
        [[[return '<ha-icon icon=""mdi:lock-open"" style=""width: 20px; height:
        20px; color: red""> </ha-icon>';]]]
    styles:
      grid:
        - grid-template-areas: '""l"" ""i"" ""n"" ""s""'
        - grid-template-rows: 1fr 2fr min-content min-content
        - grid-template-columns: 1fr
      custom_fields:
        icon1:
          - position: absolute
          - left: 85%
          - top: 5%
        icon2:
          - position: absolute
          - left: 85%
          - top: 30%
        icon3:
          - position: absolute
          - left: 85%
          - top: 55%
        icon4:
          - position: absolute
          - left: 85%
          - top: 80%
  - type: custom:button-card
    entity: sensor.multi_sensor_temperature_02
    color_type: card
    show_name: true
    show_label: true
    show_icon: true
    show_state: true
    name: Living Room
    icon: mdi:sofa
    state_display: |
      [[[
        var a = entity.state;
        var floatValue = parseFloat(a.replace(/, /, '.'));
        return floatValue.toFixed(1).toString().replace('.',',')+ ' °C';
      ]]]
    custom_fields:
      icon1: >
        [[[return '<ha-icon icon=""mdi:lightbulb-off"" style=""width: 20px; height:
        20px;;""> </ha-icon>';]]]
      icon2: >
        [[[return '<ha-icon icon=""mdi:motion-sensor"" style=""width: 20px; height:
        20px; color: red;""> </ha-icon>';]]]
      icon3: >
        [[[return '<ha-icon icon=""mdi:door-closed"" style=""width: 20px; height:
        20px;""> </ha-icon>';]]]
      icon4: >
        [[[return '<ha-icon icon=""mdi:lock"" style=""width: 20px; height: 20px;
        color: green""> </ha-icon>';]]]
    styles:
      grid:
        - grid-template-areas: '""l"" ""i"" ""n"" ""s""'
        - grid-template-rows: 1fr 2fr min-content min-content
        - grid-template-columns: 1fr
      custom_fields:
        icon1:
          - position: absolute
          - left: 85%
          - top: 5%
        icon2:
          - position: absolute
          - left: 85%
          - top: 30%
        icon3:
          - position: absolute
          - left: 85%
          - top: 55%
        icon4:
          - position: absolute
          - left: 85%
          - top: 80%"
G9QppWeW,Smoll,kaedepat,CSS,Sunday 17th of September 2023 12:50:20 AM CDT,"[sc=sm][sc=h]Name * he/she[/sc]

[sc=l][url=https://pfq.link/@bPV]Journal[/url] ♦ [url=https://pfq.link/@bPV]Shop[/url]
[url=https://pfq.link/@bPV]Art[/url] ♦ [url=https://pfq.link/@bPV]Templates[/url][/sc]

[sc=c][pit=""©""][url=https://www.pexels.com/photo/gray-surface-3255761/]BG[/url] ♦ [url=https://pfq.link/@bPV]template[/url][/pit][/sc][/sc]

[style]
.sm {
    margin: 0 auto;
    height: 200px;
    width: 200px;
    background: url('https://images.pexels.com/photos/3255761/pexels-photo-3255761.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2');
    background-size: cover;
    background-position: center;
    border: 5px solid #59B9CF;
    box-sizing: border-box;
    border-radius: 10px;
    box-shadow: 0 0 5px #222;
    font-variant: small-caps;
    color: black;
    font-size: 10pt;
    padding: 5px;
    align-items: center;
    justify-content: space-evenly;
    display: flex;
    flex-flow: column nowrap;
    a, a:link, a:hover, a:active, a:visited {
        color: #1C515F;
        }
    .tooltip_content {
        background: url('https://images.pexels.com/photos/3255761/pexels-photo-3255761.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2');
        background-size: cover;
        background-position: center;
        border: 2px solid #59B9CF;
        border-radius: 10px;
        color: inherit;
        width: 125px;
        margin-left: -60px;
        
        }
    span.bbcode_tooltip {
        border-bottom: 1px dotted black;
        }
    }
[/style]"
rF4nmKdZ,Picture Cards,kaedepat,CSS,Sunday 17th of September 2023 12:49:38 AM CDT,"[sc=sig][sc=img][/sc][sc=a][/sc][sc=b][/sc][sc=c][url=https://www.freepik.com/free-vector/hand-painted-watercolor-pastel-sky-background_13223496.htm#query=background&position=0&from_view=keyword&track=sph]img[/url] ** [url=https://pfq.link/@bPV]template[/url][/sc][/sc]

[style]
.sig {
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: repeat(12, 20px);
    width: 100%;
    height: 100%;box-sizing: border-box;
    //position: absolute;
    .img {
        grid-column: 4 / span 6;
        grid-row: 1 / span 8;
        background: url('https://img.freepik.com/free-vector/hand-painted-watercolor-pastel-sky-background_23-2148902771.jpg?w=2000&t=st=1683611074~exp=1683611674~hmac=896ba1467563eb9241f64ec5012b48bb7c28bd7589b5fd588a1a603940968a40');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center center;
        border: 5px solid #849DD2;
        border-radius: 10px;
        height: 185px;
        width: 275px;
        z-index: 2;
        box-shadow: 5px 5px 5px #333;
        }
    .a {
        z-index: 1;
        height: 185px;
        width: 275px;
        grid-column: 5 / span 5;
        grid-row: 2 / span 8;
        background: #cacff9;
        border: 5px solid #fc94b3;
        border-radius: 10px;
        box-shadow: 5px 5px 5px #333;
        }
    .b {
        z-index: 0;
        height: 185px;
        width: 275px;
        grid-column: 6 / span 5;
        grid-row: 3 / span 8;
        border: 5px solid #ed90cf;
        background: #ce9eec;
        box-shadow: 5px 5px 5px #333;
        border-radius: 10px;
        }
    .c {
        font-size: 10pt;
        grid-column: 1 / span 12;
        grid-row: 12 / span 1;
        z-index: 3;
        }
    .mq1 & .b { display: none;}
    .mq1 & .img, .mq1 & .a, .mq1 & .b {height: 185px;width: 250px;}
    }
[/style]"
KkwZaYgG,Gradient Watermelon,kaedepat,CSS,Sunday 17th of September 2023 12:48:27 AM CDT,"[styleclass=gradientMelon][sc=header]Some Text here[/sc]
[styleclass=tabbed_interface horizontal][
 ][ul][
  ][li][img]/img/farmbtns/farm_news.png[/img][/li][
  ][li][item=Pokeradar][/li][
  ][li][item=Azure Flute][/li][
  ][li][item=Medium Normal Gem][/li][
  ][li][item=Box Box][/li][
  ][li][item=Money Safe][/li][
 ][/ul][
][sc=tab tab-active][pkmnpanel=MxCjs]

Coded by [url=https://pfq.link/@bPV]Aemilia[/url]. Snek image made by [url=https://pfq.link/@L6k]Cele[/url]. PKMN Panel CSS made by [url=https://pokefarm.com/forum/post/6000778]Mirzam[/url].
[url=https://pfq.link/@bPV]Me[/url]
Random text here [u]underlined texty[/u], [i]italics texty[/i], [s]strikethrough texty[/s], [b]bold texty[/b]. [hr][h1]Header 1[/h1][h2]Header 2[/h2][h3]Header 3[/h3]
[url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] [url=/user/:bPV][Link][/url] 

[tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip][
][ul][
 ][li]List Item[/li][
 ][li]List Item[/li][
 ][li]List Item[/li][
 ][li]List Item[/li][
][/ul][
][progress=50/100]50/100[/progress]
[quote=User]Content[/quote]
[display=Display box]Content[/display]
[hide=Hide box]Content[/hide]
[accordion][a-section=Accordion 1]Content 1[/a-section][a-section=Accordion 2]Content 2[/a-section][a-section=Accordion 3]Content 3[/a-section][/accordion]
[stackbox][a-section=Stackbox 1]Content 1[/a-section][a-section=Stackbox 2]Content 2[/a-section][a-section=Stackbox 3]Content 3[/a-section][/stackbox]
[table][tr][th][/th][th]Header[/th][th]Header[/th][th]Header[/th][th]Header[/th][th]Header[/th][th]Header[/th][th]Header[/th][th]Header[/th][/tr][tr][th]Header[/th][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][/tr][tr][th]Header[/th][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][/tr][tr][th]Header[/th][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][/tr][/table][/sc][
][sc=tab][/sc][
][sc=tab][/sc][
][sc=tab][/sc][
][/styleclass]
[/styleclass]

[style]
.gradientMelon {
    box-sizing: border-box;
    background: hsla(12, 84%, 68%, 1);
    background: linear-gradient(90deg, hsla(12, 84%, 68%, 1) 0%, hsla(343, 100%, 66%, 1) 100%);
    background: -moz-linear-gradient(90deg, hsla(12, 84%, 68%, 1) 0%, hsla(343, 100%, 66%, 1) 100%);
    background: -webkit-linear-gradient(90deg, hsla(12, 84%, 68%, 1) 0%, hsla(343, 100%, 66%, 1) 100%);
    min-height: 200px;
    padding: 20px;
    .header {
        width: 95%;
        background: #fff;
        background: rgba(255, 255, 255, 0.75);
        margin: 0 auto;
        padding: 5px;
        color: #000;
        text-align: center;
        font-size: 1.5em;
        }
    .tabbed_interface {
        background: none;
        
        ul {
            background: none;
            text-align: center;
            margin-bottom: 5px;
            li {
                background: none;
                border: none;
                &.tab-active img, &:hover img {
                    filter: drop-shadow(0 0 5px #000);
                    }
                }
            }
        > .tab, >.tab.tab-active {
            background: #fff;
            background: rgba(255, 255, 255, 0.75);
            border: none;
            box-shadow: none;
            padding: 10px;
            color: #000;
            b, u, del, i {
                color: #035911;
                }
            u {
                text-decoration: none;
                background: hsla(350, 73%, 44%, 1);
                background: linear-gradient(to left, hsla(350, 73%, 44%, 1) 0%, hsla(274, 65%, 12%, 1) 100%);
                background: -moz-linear-gradient(to left, hsla(350, 73%, 44%, 1) 0%, hsla(274, 65%, 12%, 1) 100%);
                background: -webkit-linear-gradient(to left, hsla(350, 73%, 44%, 1) 0%, hsla(274, 65%, 12%, 1) 100%);
                background-position: 0 100%;
                background-size: 100% 2px;
                background-repeat: repeat-x;
                }
            > a, > a:hover, > a:link, > a:active, > a:visited {
                color: #0063e4;
                text-decoration: none;
                }
            > a {
                display: inline-block;
                font-weight: bold;
                padding: .5em;
                margin-left: -.25em;
                position: relative;
                clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);

                &:before, &:after {
                    position: absolute;
                    content: '';
                    border-bottom: 3px solid rgb(0, 99, 228);
                    border-radius: 1em;
                    bottom: .3em;
                    transition: transform .5s cubic-bezier(0.075, 0.82, 0.165, 1);
                    }

                &:before {
                    width: 1em;
                    transform-origin: left;
                    }
            
                &:after {
                    width: 82%;
                    left: 1em;
                    transform: translateX(110%);
                    }
            
                &:hover:before {
                    transform: scaleX(0.3);
                    }
            
                &:hover:after {
                    transform: translateX(0);
                    }
                }
            h1, h2, h3 {
                text-shadow: none;
                color: #870303;
                font-family: 'Flower', cursive;
                }
            hr {
                border: 0;
                height: 2px;
                background-image: linear-gradient(to right, hsla(222, 77%, 33%, 0), hsla(222, 77%, 33%, 0.75), hsla(222, 77%, 33%, 0));
                }
            ul, ol {
                text-align: left;
                }
            table {
                margin: 0 auto;
                text-align: center;
                border-collapse: separate;
                border-spacing: 5px;
                border: none;
                display: flex;
                width: 100%;
                overflow-x: auto;
                tr {
                    th {
                        width: fit-content;
                        padding: 5px;
                        background: #035911;
                        color: #fff;
                        border: none;
                    }
                    td {
                        background: transparent;
                        color: #035911;
                        border: 1px solid #035911;
                        padding: 5px;
                        }
                    }
                }
            .expbar { 
                background: transparent;
                border: 1px solid #870303;
                border-radius: 5px;
                color: #000;
                display: flex;
                align-items: center;
                justify-content: center;
                
                &>div {
                    border-color: none;
                    border-right: none;
                    background: #870303;
                    } 
                
                &>span {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: #000;
                    background: #ccc;
                    padding: 5px;
                    border-radius: 2px;
                    border: 1px solid #870303;
                    }
                }
            span.bbcode_tooltip {
                border-bottom: 1px dotted #0063e4;
                }
            .tooltip_content {
                background: #00357A;
                color: #ccc;
                border-radius: 0;
                border: 2px solid #000;
                padding: 3px;
                }
            .panel {
                box-shadow: none;
                border: none;
                border-radius: 0;
                background: transparent;
                > h3, > h3 > a {
                    border-radius: 0;
                    border: none;
                    border-bottom: 2px dotted #870303;
                    background: transparent;
                    color: #870303;
                    }
                > div {
                    background: none;
                    border-left: 2px solid #870303;
                    margin-left: 5px;
                    margin-top: 5px;
                    padding: 1%;
                    color: #000;
                    }
                }
            /* These default to the VIEWER's skin colors */
            /* To customize them, just set hex color codes instead */
            @platform-base: @col-bg1;
            @platform-border: @col-border1;
            @name-color: @col-fg1;
            @name-background: @col-bg3;
            @name-border: @col-border3;
            @berry-background: @col-flavour-up;
            @berry-border: @col-fg1;
            /* Set to ""block"" to show, ""none"" to hide */
            @display-item: block;
            @display-berries: block;

            .party {
                display: inline-block;
                &,>div {
                    padding: 0;
                    margin: 0;
                    background: transparent;
                    width: 120px !important;
                    height: 120px;
                    overflow: hidden;
                    border: none;
                    border-radius: 0;
                    box-shadow: none;
                    }
                >div {
                    &::after {
                        display: none;
                        }
                    .pkmn {
                        margin: 0 10px;
                        float: unset;
                        &::before {
                            background-color: @platform-base;
                            border-color: @platform-border;
                            }
                        .helditem {
                            display: @display-item;
                            .itemsprite {
                                cursor: unset;
                                }
                            .tooltip_content {
                                display: none;
                                }
                            }
                        }
                        .name {
                            background-color: @name-background;
                            border: 1px solid @name-border;
                            border-radius: 5px;
                            margin-top: 1px;
                            height: 16px;
                            display: flex;
                            flex-wrap: nowrap;
                            a {
                                color: @name-color;
                                font-weight: normal;
                                margin: 0 2px;
                                width: 80px !important;
                                flex-grow: 99;
                                font-size: 12px;
                                }
                            img {
                                display: none;
                                }
                            img:nth-last-of-type(-n+2) {
                                display: inline;
                                margin: 0;
                                }
                            }
                        .action {
                            display: @display-berries;
                            position: absolute;
                            left: 88px;
                            top: 70px;
                            height: unset;
                            width: unset;
                            .berrybuttons[data-up=""any""]>a[data-berry=""aspear""],
                            .berrybuttons[data-up=""sour""]>a[data-berry=""aspear""], 
                            .berrybuttons[data-up=""spicy""]>a[data-berry=""cheri""], 
                            .berrybuttons[data-up=""dry""]>a[data-berry=""chesto""], 
                            .berrybuttons[data-up=""sweet""]>a[data-berry=""pecha""],
                            .berrybuttons[data-up=""bitter""]>a[data-berry=""rawst""] {
                                display: inline-block;
                                }
                            .berrybuttons {
                                >a {
                                    display: none;
                                    width: 20px;
                                    height: 20px;
                                    line-height: 20px;
                                    padding: 5px;
                                    background-color: @berry-background;
                                    border-radius: 20px;
                                    >img { 
                                        vertical-align: top;
                                        max-height: 20px;
                                        max-width: 20px;
                                        }
                                }
                                >a[data-berry=""pecha""] img {
                                /* this berry is short */
                                    margin-top: 1px;
                                    }
                                }
                            &.working {
                                opacity: 0.5;
                                }
                            table {
                                /* ""thank you"" message */
                                display: none;
                                }
                            }
                        .expbar, .taste, .extra {
                            display: none;
                        }
                    }
                >div:hover>.action a[data-berry]:after {
                    border-color: @berry-border;
                    }
                }
            }
        }
    }
/* latin */
@font-face {
  font-family: 'Flower';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/indieflower/v17/m8JVjfNVeKWVnh3QMuKkFcZVaUuH.woff2) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0300-0301, U+0303-0304, U+0308-0309, U+0323, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}
[/style]"
wf1NLfvq,Smoll,kaedepat,CSS,Sunday 17th of September 2023 12:43:25 AM CDT,"[styleclass=contain][sc=card][sc=icon][/sc][sc=column][sc=bubble]name[/sc][sc=bubble]small detail[/sc][sc=bubble][url=https://pfq.link/@bPV]Link[/url] [url=https://pfq.link/@bPV]Link[/url][/sc][/sc][/sc]
[sc=credits][url=https://pfq.link/@bPV]credits[/url][/sc][/styleclass]

[style]
/* VARIABLES */
@avatar: url('https://placekitten.com/100/100');
@background: #557c93;
@bg-text: rgba(255, 255, 255, 0.5);
@border: #08203e;
@text: #000000;

/* Template Coding */ 
.contain { 
    width: 300px;
    margin: 0 auto;
    .card {
        box-sizing: border-box;
        display: flex;
        flex-flow: row nowrap;
        justify-content: space-evenly;
        align-items: center;
        margin: 0 auto;
        width: 300px;
        height: 135px;
        background: @background;
        border: 5px solid @border;
        border-radius: 10px;
        .icon {
            background: @avatar;
            height: 100px;
            width: 100px;
            border: 2px solid @border;
            border-radius: 10px;
            }
        .column {
            display: flex;
            flex-flow: column nowrap;
            gap: 12px;
            width: 150px;
            .bubble {
                background: @bg-text;
                border: 2px solid @border;
                border-radius: 10px;
                padding: 3px;
                font-variant: small-caps;
                font-size: 10pt;
                text-align: center;
                color: #000;
                a, a:link, a:hover, a:active, a:visited {
                    font-weight: bold;
                    color: inherit;
                    }
                }
            }
        }
    .credits {
        text-align: right;
        margin-top: -17px;
        font-size: 10pt;
        }
    }
[/style]"
cMgPDUqa,Simple,kaedepat,CSS,Sunday 17th of September 2023 12:42:29 AM CDT,"[styleclass=wrapper]

[sc=link][url=https://pfq.link/@bPV][ Art ][/url] [url=https://pfq.link/@bPV][ Trades ][/url] [url=https://pfq.link/@bPV][ Journal ][/url][/sc]
[sc=text]No headers, links, panels, tips, just simple text and images will fit here[/sc]
[centre][img]https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/40e40e13-24ab-4e59-921a-3ed7675831ae/dbp6mb6-52fd984e-5cae-4220-b017-c2b79fa45aac.png/v1/fill/w_200,h_66/_f2u___my_tiny_garden_by_saikornos_dbp6mb6-fullview.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7ImhlaWdodCI6Ijw9NjYiLCJwYXRoIjoiXC9mXC80MGU0MGUxMy0yNGFiLTRlNTktOTIxYS0zZWQ3Njc1ODMxYWVcL2RicDZtYjYtNTJmZDk4NGUtNWNhZS00MjIwLWIwMTctYzJiNzlmYTQ1YWFjLnBuZyIsIndpZHRoIjoiPD0yMDAifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6aW1hZ2Uub3BlcmF0aW9ucyJdfQ.EECrJC7LJt2BX7sUILoqN20EzWJLFc5BzcEjEPNr_v0[/img][/centre]
[sc=link][url=https://pfq.link/@bPV][ credits ][/url] [url=https://www.deviantart.com/saikornos/art/F2u-My-tiny-garden-707427186][ image ][/url][/sc]
[/styleclass]

[style]
.wrapper {
    box-sizing: border-box;
    width: 310px;
    min-height: 50px;
    margin: 0 auto;
    padding: 15px;
    background: #d0fefe;
    font-variant: small-caps;
    > .header {
        //display: inline-block;
        //width: 200px;
        margin: 0 auto;
        padding: 3px;
        border-left: 5px solid #005787;
        background: #FFF;
        color: #005787;
        font-size: 16pt;
        text-align: left;
        font-variant: small-caps;
        }
    > .link {
        display: block;
        text-align: center;
        color: #000;
        > a {
            display: inline-block;
            padding: 2px;
            background: #fff;
            color: #080;
            font-size: 10pt;
            transition: letter-spacing 0.5s ease-in-out;
            &:hover {
                letter-spacing: 2px;
                }
            }
        
        }
    > .text {
        min-height: 10px;
        padding: 2px;
        background: #fff;
        border-left: 3px solid #005787;
        color: #005787;
        text-align: left;
        font-size: 11pt;
        }
    }
[/style]"
DDvntbFm,Peeking,kaedepat,CSS,Sunday 17th of September 2023 12:41:20 AM CDT,"[styleclass=container][
][styleclass=tabbed_interface horizontal][
 ][ul][
  ][li][/li][
  ][li][/li][
  ][li][/li][
  ][li][/li][
  ][li][img]<SMALL IMG HERE>[/img][/li][
 ][/ul][
][sc=tab tab-active][hr][h1]Header 1[/h1][h2]Header 2[/h2][h3]Header 3[/h3]
[url=/user/:L6k][Link][/url] [url=/user/:L6k][Link][/url]

[tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] [tip=Tooltip]Tooltip[/tip] 
[tip=Tooltip][item=GS Ball][/tip] [tip=Tooltip][item=GS Ball][/tip] [tip=Tooltip][item=GS Ball][/tip]
[/sc][
][sc=tab][progress=50/100]50/100[/progress]
[quote=User]Content[/quote]
[display=Display box]Content[/display]
[hide=Hide box]Content[/hide]
[/sc][
][sc=tab][accordion][a-section=Accordion 1]Content 1[/a-section][a-section=Accordion 2]Content 2[/a-section][a-section=Accordion 3]Content 3[/a-section][/accordion]
[stackbox][a-section=Stackbox 1]Content 1[/a-section][a-section=Stackbox 2]Content 2[/a-section][a-section=Stackbox 3]Content 3[/a-section][/stackbox]
[/sc][
][sc=tab][table][tr][th][/th][th]Header[/th][th]Header[/th][th]Header[/th][th]Header[/th][th]Header[/th][th]Header[/th][/tr][tr][th]Header[/th][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][/tr][tr][th]Header[/th][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][/tr][tr][th]Header[/th][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][td]Data[/td][/tr][/table][/sc][
][sc=tab][/sc][
][/styleclass][
][sc=credits]code and image by [url=https://pfq.link/@bPV]Aemilia[/url][/sc][/styleclass]

[style]
@background-colour = #30352E;
@border-colour = #6F5E3C;
@tab-active-bg-colour = #455442;
@tab-bg-colour = #889687;
@text-colour = #FFFFFF;
@tip-bg-colour = @tab-bg-colour;
@accent-colour = #D6D5C7;
@credits-link-colour = #B4B198;

.container {
    box-sizing: border-box;
    background: @background-colour;
    border: 1px solid @border-colour;
    border-radius: 5px;
    width: 300px;
    margin: 0 auto;
    padding: 10px;
    text-transform: lowercase;
    color: @text-colour;
    font-size: 10pt;
    a:not(.panel > h3 > a) {
        color: @accent-colour;
        text-decoration: none;
        padding-bottom: 2px;
        }
    a:not(.panel > h3 > a) {
        background:
            linear-gradient(
              to right,
              #B4B198,
              #B4B198
            ),
            linear-gradient(
              to right,
              rgba(255, 0, 0, 1),
              rgba(255, 0, 180, 1),
              rgba(0, 100, 200, 1)
            );
        background-size: 100% 3px, 0 3px;
        background-position: 100% 100%, 0 100%;
        background-repeat: no-repeat;
        transition: background-size 400ms;
        }
        a:not(.panel > h3 > a):hover {
            background-size: 0 3px, 100% 3px;
            }
    
    > .tabbed_interface {
        display: grid;
        grid-template-areas: 
            ""tabbar""
            ""cont"";
        gap: 10px;
        > ul {
            background: transparent;
            grid-area: tabbar;
            display: flex;
            flex-flow: row nowrap;
            justify-content: space-evenly;
            align-items: end;
            > li {
                grid-area: tab;
                display: inline-block;
                flex: initial;
                height: 40px;
                width: 40px;
                background: @tab-bg-colour;
                border-radius: 100%;
                border: 3px solid @border-colour;
                background: @bg;
                box-shadow: 0 0 5px #000000;
                transition: background 0.25s ease-in-out;
                &.tab-active:not(&:last-child), &:hover:not(&:last-child) {
                    background: @tab-active-bg-colour;
                    }
                &:last-child {
                    height: auto;
                    width: auto;
                    background: none;
                    border: none;
                    box-shadow: none;
                    > img {
                        margin-bottom: -10px;
                        }
                    }
                &:hover {
                    cursor: pointer;
                    }
                }
            }
        > .tab {
            grid-area: cont;
            background: @tab-active-bg-colour;
            border: 2px solid @border-colour;
            border-radius: 10px;
            box-shadow: none;
            padding: 5px;
            color: @text-colour;
            hr {
                border: 0;
                height: 0; /* Firefox... */
                box-shadow: 0 0 8px 1px black;
                }
            hr:after {  /* Not really supposed to work, but does */
                content: ""\00a0"";  /* Prevent margin collapse */
                }
            h1, h2, h3 {
                text-shadow: none;
                color: @accent-colour;
                }
            table {
                margin: 0 auto;
                text-align: center;
                border-collapse: separate;
                border-spacing: 5px;
                border: none;
                display: flex;
                color: @text-colour;
                width: 260px;
                overflow-x: auto;
                tr {
                    th {
                        width: fit-content;
                        padding: 5px;
                        background: @border-colour;
                        color: #ffffff;
                        border: none;
                        }
                    td {
                        background: @bg;
                        color: @text-colour;
                        border: 1px solid @border-colour;
                        padding: 5px;
                        }
                    }
                }
            span.bbcode_tooltip {
                display: inline-block;
                background: @tip-bg-colour;
                border: 2px solid @border-colour;
                border-radius: 5px;
                margin-top: 5px;
                padding: 1%;
                padding-bottom: 0.5%;
                color: black;
                transition: background 0.5s ease-in-out;
                &:hover {
                    background: darken(@tip-bg-colour, 8%);
                    }
                }
            .tooltip_content {
                background: @tip-bg-colour;
                color: black;
                border-radius: 5px;
                border: 2px solid @border-colour;
                }
            .expbar {
                padding: 5px;
                background: transparent; 
                color: @text-colour;
                border: 2px solid @border-colour;
                border-radius: 5px; 
                div {
                    background: darken(@tab-active-bg-colour, 5%); 
                    border: none;
                    border-right: 1px solid @border-colour;
                    border-radius: 0;
                    }
                span {
                    color: @text-colour;
                    }
                }
            .panel {
                background: none;
                box-shadow: none;
                border: none;
                border: 2px solid @background-colour;
                width: 95%;
                z-index: 1;
                position: relative; /* new */;
                &:after {
                    content: """";
                    position: absolute;
                    display: block;
                    background: inherit;
                    border-radius: inherit;
                    border: 2px solid @border-colour;
                    left: 5px;
                    bottom: -10px;
                    width: 100%;
                    height: 102%;
                    padding-bottom: 2px;
                    z-index: -1;
                    }
                
                > h3 {
                    background: none;
                    border: none;
                    padding-left: 10px;
                    > a {
                        color: inherit;
                        }
                    }
                >div {
                    padding-left: 10px;
                    padding-bottom: 5px;
                    }
                }
            }
        }
    .credits {
        font-size: 10pt;
        text-align: right;
        a, a:link, a:hover, a:active, a:visited {
            color: @credits-link-colour;
            font-weight: bold;
            text-decoration-style: underline;
            }
        }
    }
[/style]"
8DA8tZYQ,HoverSplit,kaedepat,CSS,Sunday 17th of September 2023 12:39:38 AM CDT,"[styleclass=contain][
][styleclass=container][
 ][sc=card][
  ][ul][
   ][li]Info one[/li][
   ][li]Info two[/li][
   ][li]Info three[/li][
  ][/ul][
 ][/sc][
 ][sc=upper][
  ][sc=icon][/sc][
  ][sc=span]Name[/sc][
 ][/sc][
 ][sc=lower][
  ][ul][
   ][li][url=https://pfq.link/@bPV][img]https://img.icons8.com/material-sharp/25/000000/transaction.png[/img][/url][/li][
   ][li][url=https://pfq.link/@bPV][img]https://img.icons8.com/external-tulpahn-basic-outline-tulpahn/25/000000/external-art-back-to-school-tulpahn-basic-outline-tulpahn.png[/img][/url][/li][
   ][li][url=https://pfq.link/@bPV][img]https://img.icons8.com/external-kiranshastry-lineal-kiranshastry/64/000000/external-notebook-interface-kiranshastry-lineal-kiranshastry.png[/img][/url][/li][
   ][li][url=https://pfq.link/@bPV][img]https://img.icons8.com/windows/64/000000/friends.png[/img][/url][/li][
  ][/ul][
 ][/sc][
][/styleclass][
][sc=credits][url=https://pfq.link/@bPV]credits[/url][/sc][/styleclass]


[style]
.contain {
    width: 310px;
    max-height: 1000px;
    min-height: 500px;
    background: red;
    margin: 0;
    padding: 0;
    position:relative;
    box-sizing: border-box;
    font-family: 'Raleway', sans-serif;
    background: linear-gradient(45deg, hsla(296, 100%, 6%, 1) 0%, hsla(5, 90%, 24%, 1) 100%);
    display: flex;
    justify-content: center;
    align-items: center;
}

.container {
      position: absolute;
      background: snow;
      width: 250px;
      height: 300px;
      border-radius: 60px;
      display: flex;
      flex-direction: column;
      align-items: center;
}
.card {
  position: relative;
  display: flex;
  width: 0%;
  height: 0%;
  opacity: 0;
  align-items: center;
  justify-content: center;
  transform: translateY(12%);
  transition: all 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}
.card ul {
  color: #4D5050;
  list-style: none;
  width: 250px;
  height: 43%;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  font-size: 20px;
}
.card ul li {
  display: flex;
  justify-content: space-between;
}
.upper {
  position: absolute;
  background: linear-gradient(90deg, hsla(211, 66%, 87%, 1) 0%, hsla(348, 67%, 88%, 1) 50%, hsla(272, 26%, 72%, 1) 100%);
  box-shadow: inset 50px 50px 500px #FFFFFF30;
  border-top-left-radius: 60px;
  border-top-right-radius: 60px;
  width: 98%; 
  height: 75%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 10px;
  top: 3px;
  transition: all 0.6s;
}

.upper .icon {
  position: relative;
  background: url('https://placekitten.com/200/200');
  background-size: contain;
  background-position: center;
  color: #484848;
  width: 130px;
  height: 130px;
  font-size: 90px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: all 0.5s;
}

.upper .span {
  position: relative;
  color: black;
  font-size: 27px; 
  font-weight: bold;
  letter-spacing: 3px;
  transition: all 0.5s;
}

.upper .span::first-letter {
  color: #f962a0;
  font-family: sans-serif;
  font-size: 30px;
  font-weight: 400;
}

.lower {
  position: absolute;
  background: linear-gradient(90deg, hsla(211, 66%, 87%, 1) 0%, hsla(348, 67%, 88%, 1) 50%, hsla(272, 26%, 72%, 1) 100%);
  width: 98%;
  height: 25%;
  border-bottom-left-radius: 60px;
  border-bottom-right-radius: 60px;
  bottom: 3px;
  box-shadow: inset 50px 50px 400px #FFFFFF23;
  transition: all 500ms;
  overflow: hidden;
}

.lower ul {
  position: relative;
  list-style: none;
  margin-left: -25px;
  width: 90%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  transition: all 500ms cubic-bezier(0.175, 0.885, 0.32, 1.275);
  
}

.lower ul li {
  color: snow;
  img { height: 30px; /*filter: invert(1);*/}
}

/* hover effects */

.container:hover .card {
  width: 100%;
  height: 100%;
  opacity: 1;
}

.container:hover .upper {
  transform: translateY(-38%);
  border-radius: 60px;
  height: 65%;
  width: 110%;
}

.container:hover .lower {
  transform: translateY(30%);
  border-radius: 60px;
  height: 20%;
  width: 110%;
  a, a:link, a:hover, a:active, a:visited { color: white; }
}

.credits {
    position: absolute;
    left: 5px;
    bottom: 5px;
    a, a:link, a:hover, a:active, a:visited { color: white; transition: all 0.25s ease-in-out; }
    a:hover { letter-spacing: 2px; }
}

/* latin */
@font-face {
  font-family: 'Raleway';
  font-style: normal;
  font-weight: 250;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/raleway/v28/1Ptug8zYS_SKggPNyC0ITw.woff2) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}
[/style]"
Kn3EES8w,News Sep16 23,Newscaster_Ned,Email,Saturday 16th of September 2023 11:54:41 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎y‎,‎ ‎i‎t‎'‎s‎ ‎J‎e‎w‎s‎b‎l‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎ ‎h‎e‎r‎e‎ ‎t‎o‎ ‎g‎i‎v‎e‎ ‎y‎o‎u‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎!‎

A‎I‎ ‎T‎h‎r‎o‎w‎d‎o‎w‎n‎

W‎r‎i‎t‎e‎r‎s‎ ‎S‎u‎e‎ ‎M‎e‎t‎a‎,‎ ‎O‎p‎e‎n‎A‎I‎

A‎I‎ ‎T‎h‎r‎o‎w‎d‎o‎w‎n‎

W‎r‎i‎t‎e‎r‎s‎ ‎S‎u‎e‎ ‎M‎e‎t‎a‎,‎ ‎O‎p‎e‎n‎A‎I‎

C‎l‎a‎s‎s‎-‎A‎c‎t‎i‎o‎n‎ ‎C‎o‎p‎y‎r‎i‎g‎h‎t‎ ‎C‎l‎a‎i‎m‎ ‎o‎n‎ ‎T‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎B‎o‎o‎k‎s‎
M‎i‎c‎h‎a‎e‎l‎ ‎C‎h‎a‎b‎o‎n‎ ‎a‎t‎t‎e‎n‎d‎s‎ ‎t‎h‎e‎ ‎p‎r‎e‎m‎i‎e‎r‎e‎ ‎o‎f‎ ‎C‎B‎S‎ ‎A‎l‎l‎ ‎A‎c‎c‎e‎s‎s‎'‎ ‎""‎S‎t‎a‎r‎ ‎T‎r‎e‎k‎:‎ ‎P‎i‎c‎a‎r‎d‎""‎ ‎a‎t‎ ‎A‎r‎c‎L‎i‎g‎h‎t‎ ‎C‎i‎n‎e‎r‎a‎m‎a‎ ‎D‎o‎m‎e‎ ‎o‎n‎ ‎J‎a‎n‎u‎a‎r‎y‎ ‎1‎3‎,‎ ‎2‎0‎2‎0‎ ‎i‎n‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎,‎ ‎C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎.‎ ‎(‎P‎h‎o‎t‎o‎ ‎b‎y‎ ‎R‎i‎c‎h‎ ‎F‎u‎r‎y‎/‎G‎e‎t‎t‎y‎ ‎I‎m‎a‎g‎e‎s‎)‎
A‎ ‎g‎r‎o‎u‎p‎ ‎o‎f‎ ‎w‎r‎i‎t‎e‎r‎s‎ ‎h‎e‎a‎d‎e‎d‎ ‎b‎y‎ ‎c‎e‎l‎e‎b‎r‎a‎t‎e‎d‎ ‎n‎o‎v‎e‎l‎i‎s‎t‎ ‎M‎i‎c‎h‎a‎e‎l‎ ‎C‎h‎a‎b‎o‎n‎ ‎a‎n‎d‎ ‎T‎o‎n‎y‎ ‎A‎w‎a‎r‎d‎-‎w‎i‎n‎n‎i‎n‎g‎ ‎p‎l‎a‎y‎w‎r‎i‎g‎h‎t‎ ‎D‎a‎v‎i‎d‎ ‎H‎e‎n‎r‎y‎ ‎H‎w‎a‎n‎g‎ ‎a‎r‎e‎ ‎s‎u‎i‎n‎g‎ ‎F‎a‎c‎e‎b‎o‎o‎k‎ ‎p‎a‎r‎e‎n‎t‎ ‎M‎e‎t‎a‎ ‎a‎s‎ ‎w‎e‎l‎l‎ ‎a‎s‎ ‎C‎h‎a‎t‎G‎P‎T‎ ‎m‎a‎k‎e‎r‎ ‎O‎p‎e‎n‎A‎I‎,‎ ‎a‎l‎l‎e‎g‎i‎n‎g‎ ‎i‎n‎ ‎t‎w‎o‎ ‎s‎e‎p‎a‎r‎a‎t‎e‎ ‎s‎u‎i‎t‎s‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎i‎r‎ ‎a‎r‎t‎i‎f‎i‎c‎i‎a‎l‎ ‎i‎n‎t‎e‎l‎l‎i‎g‎e‎n‎c‎e‎ ‎p‎l‎a‎t‎f‎o‎r‎m‎s‎ ‎e‎n‎g‎a‎g‎e‎d‎ ‎i‎n‎ ‎c‎o‎p‎y‎r‎i‎g‎h‎t‎ ‎v‎i‎o‎l‎a‎t‎i‎o‎n‎s‎ ‎w‎i‎t‎h‎ ‎t‎e‎n‎s‎ ‎o‎f‎ ‎t‎h‎o‎u‎s‎a‎n‎d‎s‎ ‎o‎f‎ ‎b‎o‎o‎k‎s‎.‎

T‎e‎x‎a‎s‎ ‎A‎t‎t‎o‎r‎n‎e‎y‎ ‎G‎e‎n‎e‎r‎a‎l‎ ‎K‎e‎n‎n‎e‎t‎h‎ ‎P‎a‎x‎t‎o‎n‎ ‎A‎c‎q‎u‎i‎t‎t‎e‎d‎ ‎i‎n‎ ‎S‎e‎n‎a‎t‎e‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎T‎r‎i‎a‎l‎
T‎e‎x‎a‎s‎ ‎A‎t‎t‎o‎r‎n‎e‎y‎ ‎G‎e‎n‎e‎r‎a‎l‎ ‎K‎e‎n‎n‎e‎t‎h‎ ‎P‎a‎x‎t‎o‎n‎ ‎A‎c‎q‎u‎i‎t‎t‎e‎d‎ ‎i‎n‎ ‎S‎e‎n‎a‎t‎e‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎T‎r‎i‎a‎l‎
2‎,‎0‎1‎9‎
P‎O‎L‎I‎T‎I‎C‎O‎'‎s‎ ‎P‎r‎z‎y‎b‎y‎l‎a‎:‎ ‎G‎O‎P‎'‎s‎ ‎O‎n‎l‎y‎ ‎P‎r‎o‎o‎f‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎J‎o‎e‎ ‎I‎s‎ ‎H‎u‎n‎t‎e‎r‎'‎s‎ ‎O‎w‎n‎ ‎W‎o‎r‎d‎s‎
P‎O‎L‎I‎T‎I‎C‎O‎'‎s‎ ‎P‎r‎z‎y‎b‎y‎l‎a‎:‎ ‎G‎O‎P‎'‎s‎ ‎O‎n‎l‎y‎ ‎P‎r‎o‎o‎f‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎J‎o‎e‎ ‎I‎s‎ ‎H‎u‎n‎t‎e‎r‎'‎s‎ ‎O‎w‎n‎ ‎W‎o‎r‎d‎s‎
9‎4‎7‎
W‎o‎m‎a‎n‎ ‎S‎u‎e‎s‎ ‎D‎o‎c‎t‎o‎r‎s‎ ‎t‎h‎a‎t‎ ‎P‎e‎r‎f‎o‎r‎m‎e‎d‎ ‎D‎o‎u‎b‎l‎e‎ ‎M‎a‎s‎t‎e‎c‎t‎o‎m‎y‎
W‎o‎m‎a‎n‎ ‎S‎u‎e‎s‎ ‎D‎o‎c‎t‎o‎r‎s‎ ‎t‎h‎a‎t‎ ‎P‎e‎r‎f‎o‎r‎m‎e‎d‎ ‎D‎o‎u‎b‎l‎e‎ ‎M‎a‎s‎t‎e‎c‎t‎o‎m‎y‎
8‎7‎7‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎M‎c‎C‎a‎r‎t‎h‎y‎ ‎C‎a‎l‎l‎s‎ ‎f‎o‎r‎ ‎A‎l‎l‎-‎M‎e‎m‎b‎e‎r‎s‎ ‎C‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎B‎r‎i‎e‎f‎i‎n‎g‎ ‎o‎n‎ ‎B‎o‎r‎d‎e‎r‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎M‎c‎C‎a‎r‎t‎h‎y‎ ‎C‎a‎l‎l‎s‎ ‎f‎o‎r‎ ‎A‎l‎l‎-‎M‎e‎m‎b‎e‎r‎s‎ ‎C‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎B‎r‎i‎e‎f‎i‎n‎g‎ ‎o‎n‎ ‎B‎o‎r‎d‎e‎r‎
2‎,‎8‎1‎8‎
3‎ ‎M‎o‎r‎e‎ ‎P‎r‎o‎-‎L‎i‎f‎e‎ ‎A‎c‎t‎i‎v‎i‎s‎t‎s‎ ‎F‎o‎u‎n‎d‎ ‎G‎u‎i‎l‎t‎y‎ ‎o‎f‎ ‎V‎i‎o‎l‎a‎t‎i‎n‎g‎ ‎F‎A‎C‎E‎ ‎A‎c‎t‎
3‎ ‎M‎o‎r‎e‎ ‎P‎r‎o‎-‎L‎i‎f‎e‎ ‎A‎c‎t‎i‎v‎i‎s‎t‎s‎ ‎F‎o‎u‎n‎d‎ ‎G‎u‎i‎l‎t‎y‎ ‎o‎f‎ ‎V‎i‎o‎l‎a‎t‎i‎n‎g‎ ‎F‎A‎C‎E‎ ‎A‎c‎t‎
3‎,‎4‎8‎5‎
M‎i‎c‎h‎a‎e‎l‎ ‎C‎h‎a‎b‎o‎n‎,‎ ‎D‎a‎v‎i‎d‎ ‎H‎e‎n‎r‎y‎ ‎H‎w‎a‎n‎g‎ ‎L‎a‎t‎e‎s‎t‎ ‎W‎r‎i‎t‎e‎r‎s‎ ‎S‎u‎i‎n‎g‎ ‎M‎e‎t‎a‎,‎ ‎O‎p‎e‎n‎A‎I‎
M‎i‎c‎h‎a‎e‎l‎ ‎C‎h‎a‎b‎o‎n‎,‎ ‎D‎a‎v‎i‎d‎ ‎H‎e‎n‎r‎y‎ ‎H‎w‎a‎n‎g‎ ‎L‎a‎t‎e‎s‎t‎ ‎W‎r‎i‎t‎e‎r‎s‎ ‎S‎u‎i‎n‎g‎ ‎M‎e‎t‎a‎,‎ ‎O‎p‎e‎n‎A‎I‎
3‎5‎2‎
T‎r‎u‎m‎p‎ ‎S‎e‎e‎k‎s‎ ‎t‎o‎ ‎U‎n‎i‎t‎e‎ ‎w‎i‎t‎h‎ ‎A‎u‎t‎o‎ ‎W‎o‎r‎k‎e‎r‎s‎ ‎A‎p‎p‎a‎l‎l‎e‎d‎ ‎b‎y‎ ‎'‎T‎e‎r‎r‎i‎b‎l‎e‎'‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎
T‎r‎u‎m‎p‎ ‎S‎e‎e‎k‎s‎ ‎t‎o‎ ‎U‎n‎i‎t‎e‎ ‎w‎i‎t‎h‎ ‎A‎u‎t‎o‎ ‎W‎o‎r‎k‎e‎r‎s‎ ‎A‎p‎p‎a‎l‎l‎e‎d‎ ‎b‎y‎ ‎'‎T‎e‎r‎r‎i‎b‎l‎e‎'‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎
5‎,‎2‎9‎1‎
R‎u‎s‎s‎e‎l‎l‎ ‎B‎r‎a‎n‎d‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎R‎a‎p‎e‎ ‎a‎n‎d‎ ‎S‎e‎x‎u‎a‎l‎ ‎A‎s‎s‎a‎u‎l‎t‎,‎ ‎A‎c‎t‎o‎r‎ ‎D‎e‎n‎i‎e‎s‎ ‎A‎l‎l‎e‎g‎a‎t‎i‎o‎n‎s‎
R‎u‎s‎s‎e‎l‎l‎ ‎B‎r‎a‎n‎d‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎R‎a‎p‎e‎ ‎a‎n‎d‎ ‎S‎e‎x‎u‎a‎l‎ ‎A‎s‎s‎a‎u‎l‎t‎,‎ ‎A‎c‎t‎o‎r‎ ‎D‎e‎n‎i‎e‎s‎ ‎A‎l‎l‎e‎g‎a‎t‎i‎o‎n‎s‎
6‎5‎0‎
T‎r‎u‎m‎p‎ ‎D‎o‎m‎i‎n‎a‎t‎e‎s‎ ‎F‎a‎m‎i‎l‎y‎ ‎R‎e‎s‎e‎a‎r‎c‎h‎ ‎C‎o‎u‎n‎c‎i‎l‎ ‎S‎u‎m‎m‎i‎t‎’‎s‎ ‎S‎t‎r‎a‎w‎ ‎P‎o‎l‎l‎ ‎a‎t‎ ‎6‎3‎.‎9‎%‎ ‎
T‎r‎u‎m‎p‎ ‎D‎o‎m‎i‎n‎a‎t‎e‎s‎ ‎F‎a‎m‎i‎l‎y‎ ‎R‎e‎s‎e‎a‎r‎c‎h‎ ‎C‎o‎u‎n‎c‎i‎l‎ ‎S‎u‎m‎m‎i‎t‎’‎s‎ ‎S‎t‎r‎a‎w‎ ‎P‎o‎l‎l‎ ‎a‎t‎ ‎6‎3‎.‎9‎%‎ ‎
6‎1‎
B‎i‎d‎e‎n‎ ‎L‎i‎n‎k‎s‎ ‎H‎i‎s‎p‎a‎n‎i‎c‎,‎ ‎B‎l‎a‎c‎k‎ ‎P‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎T‎h‎o‎s‎e‎ ‎‘‎W‎i‎t‎h‎o‎u‎t‎ ‎H‎i‎g‎h‎ ‎S‎c‎h‎o‎o‎l‎ ‎D‎i‎p‎l‎o‎m‎a‎s‎
B‎i‎d‎e‎n‎ ‎L‎i‎n‎k‎s‎ ‎H‎i‎s‎p‎a‎n‎i‎c‎,‎ ‎B‎l‎a‎c‎k‎ ‎P‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎T‎h‎o‎s‎e‎ ‎‘‎W‎i‎t‎h‎o‎u‎t‎ ‎H‎i‎g‎h‎ ‎S‎c‎h‎o‎o‎l‎ ‎D‎i‎p‎l‎o‎m‎a‎s‎

C‎a‎n‎a‎d‎a‎:‎ ‎V‎i‎d‎e‎o‎ ‎R‎e‎l‎e‎a‎s‎e‎d‎ ‎o‎f‎ ‎T‎e‎e‎n‎a‎g‎e‎ ‎S‎i‎m‎i‎a‎n‎s‎ ‎B‎e‎a‎t‎i‎n‎g‎ ‎M‎o‎n‎t‎r‎e‎a‎l‎ ‎S‎c‎h‎o‎o‎l‎ ‎B‎o‎a‎r‎d‎ ‎S‎t‎u‎d‎e‎n‎t‎.‎

H‎e‎'‎l‎l‎ ‎b‎e‎ ‎o‎k‎a‎y‎,‎ ‎e‎h‎?‎


S‎p‎e‎e‎d‎i‎n‎g‎ ‎S‎i‎l‎v‎e‎r‎b‎a‎c‎k‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎P‎l‎o‎w‎i‎n‎g‎ ‎H‎i‎s‎ ‎C‎a‎r‎ ‎i‎n‎t‎o‎ ‎T‎r‎e‎e‎,‎ ‎E‎j‎e‎c‎t‎i‎n‎g‎ ‎H‎i‎s‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎ ‎a‎n‎d‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎H‎e‎r‎.‎


M‎o‎n‎k‎e‎y‎ ‎R‎e‎f‎u‎s‎e‎s‎ ‎R‎e‎s‎t‎r‎a‎i‎n‎i‎n‎g‎ ‎O‎r‎d‎e‎r‎ ‎a‎n‎d‎ ‎B‎e‎a‎t‎s‎ ‎H‎i‎s‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎.‎


B‎r‎o‎w‎n‎ ‎P‎i‎e‎c‎e‎ ‎o‎f‎ ‎S‎h‎i‎t‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎C‎h‎i‎l‎d‎ ‎R‎a‎p‎e‎ ‎i‎n‎ ‎C‎h‎a‎p‎e‎l‎ ‎H‎i‎l‎l‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎ ‎O‎o‎g‎a‎ ‎b‎o‎o‎g‎a‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎9‎°‎
/‎7‎0‎°‎
3‎1‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎6‎ ‎|‎ ‎D‎a‎y‎
8‎9‎°‎
3‎1‎%‎
N‎N‎E‎
1‎0‎
 ‎
m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎t‎o‎ ‎m‎o‎s‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎w‎i‎t‎h‎ ‎i‎s‎o‎l‎a‎t‎e‎d‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎H‎i‎g‎h‎ ‎8‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎N‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎3‎0‎%‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
6‎8‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
8‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎1‎5‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎3‎4‎ ‎p‎m‎
S‎a‎t‎ ‎1‎6‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎0‎°‎
2‎0‎%‎
N‎N‎W‎
9‎
 ‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎ ‎e‎a‎r‎l‎y‎,‎ ‎t‎h‎e‎n‎ ‎p‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎a‎f‎t‎e‎r‎ ‎m‎i‎d‎n‎i‎g‎h‎t‎.‎ ‎A‎ ‎s‎t‎r‎a‎y‎ ‎s‎h‎o‎w‎e‎r‎ ‎o‎r‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎ ‎i‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎ ‎L‎o‎w‎ ‎n‎e‎a‎r‎ ‎7‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎N‎W‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
8‎7‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
8‎:‎3‎5‎ ‎a‎m‎
W‎a‎x‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
8‎:‎3‎4‎ ‎p‎m‎
S‎u‎n‎ ‎1‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎3‎°‎
/‎6‎8‎°‎
1‎2‎%‎
N‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎5‎°‎
/‎6‎9‎°‎
5‎%‎
E‎S‎E‎ ‎5‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎9‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎3‎°‎
/‎7‎1‎°‎
6‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎0‎
S‎u‎n‎n‎y‎
9‎3‎°‎
/‎7‎1‎°‎
2‎4‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎4‎°‎
/‎7‎1‎°‎
1‎8‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎4‎°‎
/‎7‎0‎°‎
1‎3‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎5‎°‎
/‎7‎0‎°‎
7‎%‎
S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎5‎°‎
/‎7‎1‎°‎
1‎9‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎5‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎6‎°‎
/‎7‎1‎°‎
2‎3‎%‎
S‎S‎E‎ ‎8‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎6‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎3‎°‎
/‎7‎0‎°‎
2‎4‎%‎
E‎ ‎8‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎3‎°‎
/‎7‎0‎°‎
1‎4‎%‎
E‎ ‎8‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎8‎
S‎u‎n‎n‎y‎
9‎3‎°‎
/‎7‎0‎°‎
1‎4‎%‎
E‎S‎E‎ ‎8‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎9‎
S‎u‎n‎n‎y‎
9‎4‎°‎
/‎7‎0‎°‎
1‎5‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎3‎0‎
S‎u‎n‎n‎y‎
9‎3‎°‎
/‎6‎9‎°‎
1‎2‎%‎
S‎E‎ ‎7‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎F‎a‎l‎l‎.‎ ‎🍁

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

H‎o‎m‎o‎s‎e‎x‎u‎a‎l‎i‎t‎y‎
H‎o‎m‎o‎s‎e‎x‎u‎a‎l‎i‎t‎y‎ ‎o‎r‎ ‎H‎o‎m‎o‎p‎h‎i‎l‎i‎a‎,‎ ‎i‎s‎ ‎a‎ ‎p‎r‎o‎g‎r‎e‎s‎s‎i‎v‎e‎ ‎m‎e‎n‎t‎a‎l‎ ‎i‎l‎l‎n‎e‎s‎s‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎s‎e‎e‎n‎ ‎a‎m‎o‎n‎g‎ ‎f‎u‎r‎r‎i‎e‎s‎,‎ ‎i‎n‎ ‎w‎h‎i‎c‎h‎ ‎t‎h‎e‎ ‎s‎u‎f‎f‎e‎r‎e‎r‎ ‎i‎s‎ ‎o‎v‎e‎r‎c‎o‎m‎e‎ ‎b‎y‎ ‎s‎e‎x‎u‎a‎l‎ ‎f‎e‎e‎l‎i‎n‎g‎s‎ ‎f‎o‎r‎ ‎o‎t‎h‎e‎r‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎s‎e‎x‎.‎ ‎T‎h‎i‎s‎ ‎n‎e‎u‎r‎o‎l‎o‎g‎i‎c‎a‎l‎ ‎d‎i‎s‎o‎r‎d‎e‎r‎ ‎i‎s‎ ‎m‎o‎s‎t‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎c‎a‎u‎s‎e‎d‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎ ‎a‎f‎f‎l‎i‎c‎t‎e‎d‎ ‎s‎u‎b‎j‎e‎c‎t‎ ‎h‎a‎s‎ ‎s‎u‎c‎h‎ ‎d‎e‎e‎p‎ ‎r‎e‎s‎e‎n‎t‎m‎e‎n‎t‎ ‎f‎o‎r‎ ‎a‎ ‎d‎o‎m‎i‎n‎a‎t‎i‎n‎g‎ ‎p‎a‎r‎e‎n‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎o‎p‎p‎o‎s‎i‎t‎e‎ ‎s‎e‎x‎ ‎t‎h‎a‎t‎ ‎a‎l‎l‎ ‎m‎e‎m‎b‎e‎r‎s‎ ‎o‎f‎ ‎t‎h‎a‎t‎ ‎s‎e‎x‎ ‎b‎e‎c‎o‎m‎e‎ ‎r‎e‎p‎u‎l‎s‎i‎v‎e‎ ‎b‎y‎ ‎a‎s‎s‎o‎c‎i‎a‎t‎i‎o‎n‎.‎ ‎O‎f‎t‎e‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎s‎u‎f‎f‎e‎r‎e‎r‎ ‎c‎o‎m‎e‎s‎ ‎o‎f‎ ‎a‎g‎e‎,‎ ‎t‎h‎e‎ ‎l‎e‎v‎e‎l‎ ‎o‎f‎ ‎f‎a‎g‎g‎o‎t‎r‎y‎ ‎b‎e‎g‎i‎n‎s‎ ‎t‎o‎ ‎s‎l‎o‎p‎e‎ ‎u‎p‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎o‎r‎m‎ ‎o‎f‎ ‎a‎ ‎q‎u‎a‎d‎r‎a‎t‎i‎c‎ ‎f‎u‎n‎c‎t‎i‎o‎n‎,‎ ‎r‎a‎t‎h‎e‎r‎ ‎t‎h‎a‎n‎ ‎t‎h‎e‎ ‎t‎y‎p‎i‎c‎a‎l‎ ‎l‎i‎n‎e‎a‎r‎ ‎m‎o‎d‎e‎l‎ ‎p‎r‎e‎d‎i‎c‎t‎e‎d‎ ‎b‎y‎ ‎r‎e‎s‎e‎a‎r‎c‎h‎e‎r‎s‎ ‎a‎n‎d‎ ‎o‎t‎h‎e‎r‎ ‎f‎a‎g‎g‎o‎t‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎l‎i‎k‎e‎.‎

(‎(‎ ‎H‎I‎V‎ ‎P‎r‎i‎d‎e‎ ‎M‎o‎n‎t‎h‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎A‎r‎e‎n‎a‎ ‎o‎f‎ ‎N‎î‎m‎e‎s‎ ‎i‎s‎ ‎a‎ ‎R‎o‎m‎a‎n‎ ‎a‎m‎p‎h‎i‎t‎h‎e‎a‎t‎r‎e‎ ‎s‎i‎t‎u‎a‎t‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎F‎r‎e‎n‎c‎h‎ ‎c‎i‎t‎y‎ ‎o‎f‎ ‎N‎î‎m‎e‎s‎.‎ ‎B‎u‎i‎l‎t‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎0‎0‎ ‎C‎E‎,‎ ‎s‎h‎o‎r‎t‎l‎y‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎C‎o‎l‎o‎s‎s‎e‎u‎m‎ ‎i‎n‎ ‎R‎o‎m‎e‎,‎ ‎i‎t‎ ‎i‎s‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎b‎e‎s‎t‎-‎p‎r‎e‎s‎e‎r‎v‎e‎d‎ ‎R‎o‎m‎a‎n‎ ‎a‎m‎p‎h‎i‎t‎h‎e‎a‎t‎r‎e‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎.‎ ‎I‎t‎ ‎i‎s‎ ‎a‎l‎s‎o‎ ‎a‎m‎o‎n‎g‎ ‎t‎h‎e‎ ‎t‎w‎e‎n‎t‎y‎ ‎l‎a‎r‎g‎e‎s‎t‎ ‎R‎o‎m‎a‎n‎ ‎a‎m‎p‎h‎i‎t‎h‎e‎a‎t‎r‎e‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎4‎0‎0‎ ‎i‎n‎ ‎e‎x‎i‎s‎t‎e‎n‎c‎e‎.‎ ‎I‎t‎ ‎i‎s‎ ‎1‎3‎3‎ ‎m‎e‎t‎r‎e‎s‎ ‎l‎o‎n‎g‎ ‎(‎1‎4‎5‎ ‎y‎d‎)‎ ‎a‎n‎d‎ ‎1‎0‎1‎ ‎m‎e‎t‎r‎e‎s‎ ‎w‎i‎d‎e‎ ‎(‎1‎1‎0‎ ‎y‎d‎)‎,‎ ‎w‎i‎t‎h‎ ‎a‎n‎ ‎a‎r‎e‎n‎a‎ ‎m‎e‎a‎s‎u‎r‎i‎n‎g‎ ‎6‎8‎ ‎m‎e‎t‎r‎e‎s‎ ‎b‎y‎ ‎3‎8‎ ‎m‎e‎t‎r‎e‎s‎ ‎(‎7‎4‎ ‎y‎d‎ ‎b‎y‎ ‎4‎2‎ ‎y‎d‎)‎.‎ ‎T‎h‎e‎ ‎o‎u‎t‎e‎r‎ ‎f‎a‎c‎a‎d‎e‎ ‎i‎s‎ ‎2‎1‎ ‎m‎e‎t‎r‎e‎s‎ ‎h‎i‎g‎h‎ ‎(‎6‎9‎ ‎f‎t‎)‎ ‎w‎i‎t‎h‎ ‎t‎w‎o‎ ‎s‎t‎o‎r‎i‎e‎s‎ ‎o‎f‎ ‎6‎0‎ ‎a‎r‎c‎a‎d‎e‎s‎.‎ ‎T‎o‎d‎a‎y‎,‎ ‎t‎h‎e‎ ‎a‎m‎p‎h‎i‎t‎h‎e‎a‎t‎r‎e‎ ‎i‎s‎ ‎t‎h‎e‎ ‎s‎i‎t‎e‎ ‎o‎f‎ ‎t‎w‎o‎ ‎a‎n‎n‎u‎a‎l‎ ‎b‎u‎l‎l‎f‎i‎g‎h‎t‎s‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎F‎e‎r‎i‎a‎ ‎d‎e‎ ‎N‎î‎m‎e‎s‎,‎ ‎a‎n‎d‎ ‎i‎t‎ ‎i‎s‎ ‎u‎s‎e‎d‎ ‎f‎o‎r‎ ‎o‎t‎h‎e‎r‎ ‎p‎u‎b‎l‎i‎c‎ ‎e‎v‎e‎n‎t‎s‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎h‎i‎s‎t‎o‎r‎i‎c‎a‎l‎ ‎r‎e‎e‎n‎a‎c‎t‎m‎e‎n‎t‎s‎ ‎a‎n‎d‎ ‎c‎o‎n‎c‎e‎r‎t‎s‎.‎ ‎T‎h‎i‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎o‎f‎ ‎t‎h‎e‎ ‎e‎x‎t‎e‎r‎i‎o‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎a‎m‎p‎h‎i‎t‎h‎e‎a‎t‎r‎e‎ ‎w‎a‎s‎ ‎t‎a‎k‎e‎n‎ ‎i‎n‎ ‎2‎0‎1‎9‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎K‎r‎z‎y‎s‎z‎t‎o‎f‎ ‎G‎o‎l‎i‎k‎;‎ ‎e‎d‎i‎t‎e‎d‎ ‎b‎y‎ ‎J‎a‎n‎k‎e‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎r‎e‎f‎i‎l‎l‎ ‎y‎o‎u‎r‎ ‎W‎e‎n‎d‎y‎'‎s‎ ‎d‎r‎i‎n‎k‎ ‎w‎i‎t‎h‎ ‎c‎e‎m‎e‎n‎t‎.‎ ‎N‎i‎g‎g‎e‎r‎!‎"
GjskG8N9,Untitled,smj007,Python,Saturday 16th of September 2023 10:55:05 PM CDT,"class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
    
        res = """"
        for i in range(len(strs[0])):
            for s in strs:
                if i==len(s) or s[i]!= strs[0][i]:
                    return res
            res += strs[0][i]

        return res"
mdFtHkXu,Untitled,cepxuozab,C++,Saturday 16th of September 2023 10:39:45 PM CDT,"{
    ""base_requests"": [
        {
            ""is_roundtrip"": true,
            ""name"": ""289"",
            ""stops"": [
                ""Zagorye"",
                ""Lipetskaya ulitsa 46"",
                ""Lipetskaya ulitsa 40"",
                ""Lipetskaya ulitsa 40"",
                ""Lipetskaya ulitsa 46"",
                ""Moskvorechye"",
                ""Zagorye""
            ],
            ""type"": ""Bus""
        },
        {
            ""latitude"": 55.5799,
            ""longitude"": 37.6837,
            ""name"": ""Zagorye"",
            ""road_distances"": {
                ""Lipetskaya ulitsa 46"": 230
            },
            ""type"": ""Stop""
        },
        {
            ""latitude"": 55.5814,
            ""longitude"": 37.6822,
            ""name"": ""Lipetskaya ulitsa 46"",
            ""road_distances"": {
                ""Lipetskaya ulitsa 40"": 390,
                ""Moskvorechye"": 12400
            },
            ""type"": ""Stop""
        },
        {
            ""latitude"": 55.5845,
            ""longitude"": 37.6791,
            ""name"": ""Lipetskaya ulitsa 40"",
            ""road_distances"": {
                ""Lipetskaya ulitsa 40"": 1090,
                ""Lipetskaya ulitsa 46"": 380
            },
            ""type"": ""Stop""
        },
        {
            ""latitude"": 55.6384,
            ""longitude"": 37.6384,
            ""name"": ""Moskvorechye"",
            ""road_distances"": {
                ""Zagorye"": 10000
            },
            ""type"": ""Stop""
        }
    ],
    ""render_settings"": {
        ""color_palette"": [
            [
                175,
                207,
                116
            ],
            [
                45,
                39,
                129
            ],
            ""plum"",
            ""cyan"",
            [
                245,
                188,
                149
            ],
            [
                108,
                157,
                153
            ],
            ""thistle"",
            [
                41,
                234,
                105
            ],
            ""thistle"",
            [
                22,
                81,
                47,
                0.69503
            ],
            ""tomato"",
            ""sienna"",
            [
                99,
                20,
                217,
                0.136091
            ],
            ""peru"",
            ""coral"",
            ""tomato"",
            ""peru"",
            [
                12,
                204,
                124
            ],
            ""coral"",
            [
                104,
                95,
                15
            ],
            ""peru"",
            ""yellow"",
            ""orchid"",
            [
                46,
                224,
                99,
                0.388174
            ],
            [
                216,
                124,
                48
            ],
            [
                140,
                78,
                190,
                0.954432
            ],
            ""magenta"",
            ""magenta"",
            ""cornsilk"",
            ""pink"",
            [
                139,
                247,
                59
            ],
            ""purple"",
            ""tan"",
            ""tan"",
            ""gray"",
            ""violet""
        ],
        ""height"": 19505.4,
        ""line_width"": 83890,
        ""padding"": 6228.64,
        ""stop_label_font_size"": 19986,
        ""stop_label_offset"": [
            29970,
            -57296.3
        ],
        ""stop_radius"": 58469.7,
        ""underlayer_color"": [
            119,
            91,
            185
        ],
        ""underlayer_width"": 22467.5,
        ""width"": 31681.8
    },
    ""routing_settings"": {
        ""bus_velocity"": 30,
        ""bus_wait_time"": 2
    },
    ""stat_requests"": [
        {
            ""id"": 2047983321,
            ""name"": ""289"",
            ""type"": ""Bus""
        },
        {
            ""from"": ""Zagorye"",
            ""id"": 1687562514,
            ""to"": ""Moskvorechye"",
            ""type"": ""Route""
        },
        {
            ""from"": ""Moskvorechye"",
            ""id"": 1585122571,
            ""to"": ""Zagorye"",
            ""type"": ""Route""
        },
        {
            ""from"": ""Lipetskaya ulitsa 40"",
            ""id"": 879840356,
            ""to"": ""Lipetskaya ulitsa 40"",
            ""type"": ""Route""
        },
        {
            ""id"": 1846768885,
            ""type"": ""Map""
        }
    ]
}"
A9VL0Hfd,ESP-12F Relay 30A 8 Channel,hwthinker,Arduino,Saturday 16th of September 2023 10:09:53 PM CDT,"//*****************************************
// Program check Modul Relay 8ch ESP-12F
// v1.0 september 17,2023 by HwThinker
// ****************************************

// ---Komunikasi Modul dengan serial programmer ----
// 5v-> x (not connected)
// tx-> rx(kabel putih)
// rx-> tx(kabel hijau)
// Gnd-> GND (kabel hitam)
// GND-> x (not connected)
// GPIO0->x (no connected)

// --- Prosedur upload -----
// 1. Tekan dan Tahan tombol Key (GPIO0)
// 2. Tekan dan lepas tombol reset
// 3. Lepas tombol Key
// 3. upload program sederhana(bisa blink lED arduino)
// 4. tunggu upload selesai
// 5. Lepas jumper penghubung GND dan IO0
// 6. reset (wajib supaya program baru running


#include <Arduino.h>

// hubungan koneksi antara PIN ESP-12F dengan  74HC595
const int latchPin = 12;   // Pin ST_CP (RCLK/12)
const int clockPin = 13;  // Pin SH_CP (SRCLK/11)
const int dataPin = 14;   // Pin DS (SER/14)
const int OE = 5;   // Pin OE (SER/13)

//untuk pin SRCLR(10) pada 74HC595 tidak sudah dikawatkan dengan VCC secara default.

const int LED_internal=2; //led internal pada modul ESP-12F
const int key = 0;   // Tombol  yang tersambung ke GPIO0

void setup() {
  // Atur pin sebagai OUTPUT
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  pinMode(OE, OUTPUT);
  pinMode(LED_internal, OUTPUT);
  digitalWrite(OE,LOW); //aktif LOW
}

void loop() {
  // Array untuk menyimpan pola LED
  byte rlyPola[] = {
    B00000001,
    B00000010,
    B00000100,
    B00001000,
    B00010000,
    B00100000,
    B01000000,
    B10000000
  };

  // Loop untuk menghidupkan Relay satu per satu
  for (int i = 0; i < 8; i++) {
    // Kirim pola ke 74HC595
    digitalWrite(latchPin, LOW);
    shiftOut(dataPin, clockPin, MSBFIRST, rlyPola[i]);
    digitalWrite(latchPin, HIGH);
    //blinky LED internal
    digitalWrite(LED_internal, !digitalRead(LED_internal));
    // Tunggu sebentar sebelum menghidupkan Relay berikutnya
    delay(800);
  }

  // Matikan semua LED
  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, MSBFIRST, B00000000);
  digitalWrite(latchPin, HIGH);

  // Tunggu sebentar sebelum mengulangi loop
  delay(1000);
}
"
4WayMRrA,Arduino Motors,Hatkat,C++,Saturday 16th of September 2023 10:06:45 PM CDT,"#include <Stepper.h>
#include <Servo.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>

int rpm = 2048;
LiquidCrystal_I2C lcd(0x27, 16, 2);
Stepper motor(rpm, 10, 12, 11, 13);
int pinLedR = 3;
int pinLedA = 2;
int pinSound = 4;
int lecturaBoton = A0;
int pinServo = 5;
int pinPotenciometro = A1;
int ejeX = A2;
int ejeY = A3;
Servo miServo;

// Variables de uso
int velocidadMotor = 1;
int estadoBoton;
int angulo;
int vrJoystick;
int tempEjeY;
int wait = 50;
int voltajePotenciometro;
bool verificarSonido;
int stepState = 1;

void setup() {
  pinMode(pinLedA, OUTPUT);
  pinMode(pinLedR, OUTPUT);
  pinMode(pinSound, OUTPUT);
  pinMode(pinPotenciometro, INPUT);
  pinMode(ejeX, INPUT);
  pinMode(ejeY, INPUT);
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  miServo.attach(pinServo);
  motor.setSpeed(1);
  lcd.setCursor(0, 1);
  lcd.print(""Giro motor: <-"");
}

void moverMotor(int step) {
  tempEjeY = analogRead(ejeY);
  while (tempEjeY < 529 || tempEjeY > 532) {
    motor.step(step);
    tempEjeY = analogRead(ejeY);
    //velocidadMotor = (((2. / 1023.) * tempEjeY) - 3.) * -1;
    motor.setSpeed(abs(15));
  }
  digitalWrite(10, LOW);
  digitalWrite(11, LOW);
  digitalWrite(12, LOW);
  digitalWrite(13, LOW);
}

bool moverServo() {
  vrJoystick = analogRead(ejeX);
  angulo = (179. / 1022.) * (vrJoystick - 1022.) * -1;
  miServo.write(angulo);
  if (angulo == 0 || angulo >= 178) {
    return true;
  } else {
    return false;
  }
}

void sonar(bool verificador) {
  if (verificador) {
    if (angulo >= 179) {
      digitalWrite(pinLedA, 0);
      digitalWrite(pinSound, 1);
      digitalWrite(pinLedR, 1);
      delay(wait);
      digitalWrite(pinSound, 0);
      digitalWrite(pinLedR, 0);
      delay(wait);
      lcd.setCursor(0, 0);
      lcd.print(""Valor minimo"");
    } else if (angulo == 0) {
      digitalWrite(pinLedR, 0);
      digitalWrite(pinSound, 1);
      digitalWrite(pinLedA, 1);
      delay(wait);
      digitalWrite(pinSound, 0);
      digitalWrite(pinLedA, 0);
      delay(wait);
      lcd.setCursor(0, 0);
      lcd.print(""Valor maximo"");
    }
  } else {
    digitalWrite(pinSound, 0);
    digitalWrite(pinLedR, 0);
    digitalWrite(pinLedA, 0);
  }
}

void cambiarDireccionMotor(int pinLectura) {
  if (pinLectura == 0) {
    if (stepState == 1) {
      lcd.setCursor(0, 1);
      lcd.print(""Giro motor: ->"");
      digitalWrite(pinSound, 1);
      delay(150);
      digitalWrite(pinSound, 0);
      delay(150);
      stepState = -1;
      lcd.setCursor(0, 1);
    } else {
      lcd.setCursor(0, 1);
      lcd.print(""Giro motor: <-"");
      stepState = 1;
      digitalWrite(pinSound, 1);
      delay(150);
      digitalWrite(pinSound, 0);
      delay(150);
    }
  }
}

void loop() {
  Serial.println(angulo);
  lcd.setCursor(0, 0);
  lcd.print(""Angulo mtr: "" + String(angulo) + ""  "");
  cambiarDireccionMotor(analogRead(lecturaBoton));
  moverMotor(stepState);
  verificarSonido = moverServo();
  sonar(verificarSonido);
  voltajePotenciometro = analogRead(pinPotenciometro);
  wait = (450. / 700.) * voltajePotenciometro + 50.;
}
"
M7DddNxT,sp_cod_electrica_imp_rec_puesto,kuroshan1104,SQL,Saturday 16th of September 2023 09:33:03 PM CDT,"BEGIN

-- declare vperiodo varchar(6);
-- tipo=1
declare vfvence date;
declare vfcorte date;
declare vfemision date;
declare vflectura date;
declare vfactor double;
declare vigv double;
-- set vperiodo='201501';

select f_vence,f_corte,f_emision,factor,igv, f_lectura 
into vfvence,vfcorte,vfemision,vfactor,vigv, vflectura 
from g_recibo where periodo=vperiodo and tipo='E';

SELECT l.periodo,vfvence,vfcorte,f_g_nombres(l.idsocio) as nombres,l.num_recibo,p.codigo, p.codigo_ant, 
(SELECT des_giro FROM p_giro where idgiro= p.idgiro) as giro,
l.e_tension, IF(l.e_tipo=1,'Monofásica', 'Trifásica') as tipo, l.lectura_ant, l.lectura_actual,l.lectura_dif,vfemision,vigv,
l.cargo, l.igv,l.e_apublico,l.e_gastos,l.e_mant,l.total,
(SELECT COALESCE(sum(saldo),0) FROM d_deuda d 
 join d_deuda_puesto dp on d.ideuda=dp.ideuda 
 where dp.idpuesto=p.idpuesto and d.idconcepto=6 
 and estado='DE' and d.condicion = 1 and isnull(d.idfracc)
 and d.idperiodo < (select x.idperiodo from d_periodo x where x.anio= MID(vperiodo,1,4) and x.nperiodo= MID(vperiodo,5,6) and x.idf='M' )
) as wsaldo,

(select group_concat(' ',f_get_nmes(month(d.f_ini)),'-',year(d.f_ini)) 
 from d_deuda d join d_deuda_puesto sp on sp.ideuda=d.ideuda
 where sp.idpuesto=p.idpuesto and d.saldo>0 and d.estado<>'XX' 
 and d.condicion=1 and d.idconcepto=6 and isnull(d.idfracc)
 and d.idperiodo < (select x.idperiodo from d_periodo x where x.anio= MID(vperiodo,1,4) 
 and x.nperiodo= MID(vperiodo,5,6) and x.idf='M' )
 ) as glosa,
l.reposicion, l.redondeo, 
 concat('Re-Impreso: ',(DATE_FORMAT(CURRENT_TIMESTAMP(),'%d/%m/%Y %H:%i:%s'))) as f_rimpresion,
 vflectura     , 'prueba' as inst_luz            /* prueba aqui */                                             
 FROM p_lecturas l 
 join p_puesto p on p.idpuesto=l.idpuesto
 where l.periodo=vperiodo and l.tipo= vtipo  
 and p.codigo= vpuesto and l.de_baja = 0
 order by p.codigo;

END"
8Aj4rNij,Resume easter egg,kateonbush,TypeScript,Saturday 16th of September 2023 09:24:58 PM CDT,"interface CS {

	hardworking: true;
	intelligent: true;
	humble: true;
	likeable: true;
	nerdy: false; 
	friendly: true;

	isFitForCompany: (company: Company) => true;
 	
	hire: () => void;

}

// congrats on finding an easter egg
// and thanks for taking a look at my resume :)"
YAgCPwDc,RunTurnState,Glaedr0173,C#,Saturday 16th of September 2023 09:16:48 PM CDT,"using DRSUtils.StateMachine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using static UnityEditor.Progress;

public class RunTurnState : State<BattleSystem>
{
    #region Singleton
    public static RunTurnState Instance { get; private set; }

    private void Awake()
    {
        Instance = this;
    }
    #endregion

    BattleSystem bs;
    BattleUnit playerUnit;
    BattleUnit enemyUnit;
    BattleDialogBox dialogBox;
    PartyScreen partyScreen;
    bool isTrainerBattle;
    PokemonParty playerParty;
    PokemonParty trainerParty;

    public override void Enter(BattleSystem owner)
    {
        bs = owner;

        playerUnit = bs.PlayerUnit;
        enemyUnit = bs.EnemyUnit;
        dialogBox = bs.DialogBox;
        partyScreen = bs.PartyScreen;
        isTrainerBattle = bs.IsTrainerBattle;
        playerParty = bs.PlayerParty;
        trainerParty = bs.TrainerParty;

        StartCoroutine(RunTurns(bs.SelectedAction));
    }

    IEnumerator RunTurns(BattleAction playerAction)
    {
        if (playerAction == BattleAction.Move)
        {
            playerUnit.Pokemon.CurrentMove = playerUnit.Pokemon.Moves[bs.SelectedMove];
            enemyUnit.Pokemon.CurrentMove = enemyUnit.Pokemon.GetRandomMove();

            int playerMovePriority = playerUnit.Pokemon.CurrentMove.Base.Priority;
            int enemyMovePriority = enemyUnit.Pokemon.CurrentMove.Base.Priority;

            //check who goes first
            bool playerGoesFirst = true;
            if (enemyMovePriority > playerMovePriority)
            {
                playerGoesFirst = false;
            }
            else if (enemyMovePriority == playerMovePriority)
            {
                playerGoesFirst = playerUnit.Pokemon.Speed >= enemyUnit.Pokemon.Speed;
            }

            var firstUnit = (playerGoesFirst) ? playerUnit : enemyUnit;
            var secondUnit = (playerGoesFirst) ? enemyUnit : playerUnit;

            var secondPokemon = secondUnit.Pokemon;

            //First turn
            yield return RunMove(firstUnit, secondUnit, firstUnit.Pokemon.CurrentMove);
            yield return RunAfterTurn(firstUnit);
            //end if battle over
            if (bs.IsBattleOver == true) yield break;

            if (secondPokemon.CurrentHp > 0)
            {
                //Second turn
                yield return RunMove(secondUnit, firstUnit, secondUnit.Pokemon.CurrentMove);
                yield return RunAfterTurn(secondUnit);
                if (bs.IsBattleOver) yield break;
            }
        }
        else
        {
            if (playerAction == BattleAction.SwitchPokemon)
            {
                yield return bs.SwitchPokemon(bs.SelectedPokemon);
            }
            else if (playerAction == BattleAction.UseItem)
            {
                if(bs.SelectedItem is PokeballItem)
                {
                    yield return bs.ThrowPokeball(bs.SelectedItem as PokeballItem);
                    if (bs.IsBattleOver) yield break;
                }
                else
                {
                    //item is used from item screen, not here
                }

            }
            else if (playerAction == BattleAction.Run)
            {
                yield return TryToEscape();
            }

            //enemy turn
            var enemyMove = enemyUnit.Pokemon.GetRandomMove();
            yield return RunMove(enemyUnit, playerUnit, enemyMove);
            yield return RunAfterTurn(enemyUnit);
            if (bs.IsBattleOver) yield break;
        }
        if (!bs.IsBattleOver)
        {
            bs.StateMachine.ChangeState(ActionSelectionState.Instance);
        }
    }

    IEnumerator RunMove(BattleUnit sourceUnit, BattleUnit targetUnit, Move move)
    {
        bool canRunMove = sourceUnit.Pokemon.OnBeforeMove();

        if (!canRunMove)
        {
            yield return ShowStatusChanges(sourceUnit.Pokemon);
            yield return sourceUnit.UnitHUD.WaitForHPUpdate();
            yield break;
        }
        yield return ShowStatusChanges(sourceUnit.Pokemon);

        sourceUnit.Pokemon.CurrentMp -= move.Base.MPCost;
        yield return dialogBox.TypeDialog($""{sourceUnit.Pokemon.Base.Name} used {move.Base.MoveName}."");

        if (CheckIfMoveHits(move, sourceUnit.Pokemon, targetUnit.Pokemon))
        {
            sourceUnit.PlayAttackAnimation();
            if (move.Base.Sound != null)
                AudioManager.Instance.PlaySfx(move.Base.Sound);
            yield return new WaitForSeconds(1f);
            targetUnit.PlayHitAnimation();
            AudioManager.Instance.PlaySfx(AudioId.Hit);

            if (move.Base.Category == MoveCategory.Status)
            {
                yield return RunMoveEffects(move.Base.Effects, sourceUnit.Pokemon, targetUnit.Pokemon, move.Base.Target);
            }
            else
            {
                var damageDetails = targetUnit.Pokemon.TakeDamage(move, sourceUnit.Pokemon);
                yield return targetUnit.UnitHUD.WaitForHPUpdate();
                yield return ShowDamageDetails(damageDetails);
            }

            if (move.Base.SecondaryEffects != null && move.Base.SecondaryEffects.Count > 0 && targetUnit.Pokemon.CurrentHp > 0)
            {
                foreach (var secondary in move.Base.SecondaryEffects)
                {
                    var rng = UnityEngine.Random.Range(1, 101);
                    if (rng <= secondary.Chance)
                    {
                        yield return RunMoveEffects(secondary, sourceUnit.Pokemon, targetUnit.Pokemon, secondary.Target);
                    }
                }
            }

            if (targetUnit.Pokemon.CurrentHp <= 0)
            {
                yield return HandlePokemonFainted(targetUnit);
            }
        }
        else
        {
            yield return dialogBox.TypeDialog($""{sourceUnit.Pokemon.Base.Name}'s attack missed."");
        }

    }

    IEnumerator RunAfterTurn(BattleUnit sourceUnit)
    {
        if (bs.IsBattleOver == true) yield break;

        //Status effects like burn and poison will hurt pokemon after turn
        sourceUnit.Pokemon.OnAfterTurn();
        yield return ShowStatusChanges(sourceUnit.Pokemon);
        yield return sourceUnit.UnitHUD.WaitForHPUpdate();

        if (sourceUnit.Pokemon.CurrentHp <= 0)
        {
            yield return HandlePokemonFainted(sourceUnit);
        }
    }

    bool CheckIfMoveHits(Move move, Pokemon sourcePokemon, Pokemon targetPokemon)
    {
        if (move.Base.AlwaysHit) return true;

        float moveAccuracy = move.Base.Accuracy;
        int accuracy = sourcePokemon.StatBoosts[Stat.Accuracy];
        int evasion = targetPokemon.StatBoosts[Stat.Evasion];

        var boostedValues = new float[] { 1f, 4f / 3f, 5f / 3f, 2f, 7f / 3f, 8f / 3f, 3f };
        if (accuracy > 0)
            moveAccuracy *= boostedValues[accuracy];
        else
            moveAccuracy /= boostedValues[-accuracy];

        if (evasion > 0)
            moveAccuracy /= boostedValues[evasion];
        else
            moveAccuracy *= boostedValues[-evasion];

        return UnityEngine.Random.Range(1, 101) <= moveAccuracy;
    }

    IEnumerator ShowStatusChanges(Pokemon pokemon)
    {
        while (pokemon.StatusChanges.Count > 0)
        {
            var message = pokemon.StatusChanges.Dequeue();
            yield return dialogBox.TypeDialog(message);
        }
    }

    IEnumerator HandlePokemonFainted(BattleUnit faintedUnit)
    {
        yield return dialogBox.TypeDialog($""{faintedUnit.Pokemon.Base.Name} fainted."");
        faintedUnit.PlayFaintAnimation();

        yield return new WaitForSeconds(2f);

        //exp gain logic
        if (!faintedUnit.IsPlayerUnit)
        {
            bool battleWon = true;
            if (isTrainerBattle)
            {
                battleWon = trainerParty.GetHealthyPokemon() == null;
            }

            if (battleWon)
            {
                AudioManager.Instance.PlayMusic(bs.BattleVictoryMusic);
            }

            //Exp gain
            int expYield = faintedUnit.Pokemon.Base.ExpYield;
            int enemyLevel = faintedUnit.Pokemon.Level;
            float trainerBonus = (isTrainerBattle) ? 1.25f : 1f;

            int expGain = Mathf.FloorToInt((expYield * enemyLevel * trainerBonus) / 7);
            playerUnit.Pokemon.CurrentExp += expGain;
            yield return dialogBox.TypeDialog($""{playerUnit.Pokemon.Base.Name} has gained {expGain} experience."");
            yield return playerUnit.UnitHUD.SetExpSmooth();

            //check for level up
            while (playerUnit.Pokemon.CheckForLevelUp())
            {
                playerUnit.UnitHUD.SetLevel();
                yield return dialogBox.TypeDialog($""{playerUnit.Pokemon.Base.Name} has leveled up to {playerUnit.Pokemon.Level}."");

                //Try to learn new move
                var newMove = playerUnit.Pokemon.GetLearnableMoveAtCurrentLevel();
                if (newMove != null)
                {
                    if (playerUnit.Pokemon.Moves.Count < PokemonBase.MaxNumOfMoves)
                    {
                        playerUnit.Pokemon.LearnMove(newMove.MoveBase);
                        yield return dialogBox.TypeDialog($""{playerUnit.Pokemon.Base.Name} has learned {newMove.MoveBase.MoveName}."");
                        dialogBox.SetMoveNames(playerUnit.Pokemon.Moves);
                    }
                    else
                    {
                        yield return dialogBox.TypeDialog($""{playerUnit.Pokemon.Base.Name} is trying to learn {newMove.MoveBase.MoveName}."");
                        yield return dialogBox.TypeDialog($""But already knows {PokemonBase.MaxNumOfMoves} moves."");
                        yield return dialogBox.TypeDialog($""Choose a move to forget."");

                        MoveToForgetState.Instance.NewMove = newMove.MoveBase;
                        MoveToForgetState.Instance.CurrentMoves = playerUnit.Pokemon.Moves.Select(m => m.Base).ToList();
                        yield return GameController.Instance.StateMachine.PushAndWait(MoveToForgetState.Instance);

                        int moveIndex = MoveToForgetState.Instance.Selection;

                        if (moveIndex == PokemonBase.MaxNumOfMoves || moveIndex == -1)
                        {
                            //Don't learn new move
                            yield return dialogBox.TypeDialog($""{playerUnit.Pokemon.Base.Name} did not learn {newMove.MoveBase.MoveName}."");
                        }
                        else
                        {
                            //should forget selected and learn new
                            var selectedMove = playerUnit.Pokemon.Moves[moveIndex].Base;
                            yield return dialogBox.TypeDialog($""{playerUnit.Pokemon.Base.Name} has forgotten {selectedMove.MoveName} and learned {newMove.MoveBase.MoveName}."");
                            playerUnit.Pokemon.Moves[moveIndex] = new Move(newMove.MoveBase);
                        }
                    }
                }

                yield return playerUnit.UnitHUD.SetExpSmooth(true);
            }

            yield return new WaitForSeconds(1f);
        }

        StartCoroutine(CheckForBattleOver(faintedUnit));
    }

    IEnumerator CheckForBattleOver(BattleUnit faintedUnit)
    {
        if (faintedUnit.IsPlayerUnit)
        {
            var nextPokemon = playerParty.GetHealthyPokemon();
            if (nextPokemon != null)
            {
                yield return GameController.Instance.StateMachine.PushAndWait(PartyState.Instance);
                yield return bs.SwitchPokemon(PartyState.Instance.SelectedPokemon);
            }
            else
            {
                bs.BattleOver(false);
            }
        }
        else
        {
            if (!isTrainerBattle)
            {
                // Determine the dropped material
                bool dropOrganicMaterial = UnityEngine.Random.Range(0, 2) == 0; // 0 for organic, 1 for inorganic

                // Determine the amount to drop (between 1 and 2)
                int dropAmount = UnityEngine.Random.Range(1, 3);

                Inventory playerInventory = Inventory.GetInventory();

                // Add the dropped material to the player's inventory
                if (dropOrganicMaterial)
                {
                    playerInventory.AddItem(enemyUnit.Pokemon.Base.OrgCraftingMaterial1, dropAmount);
                }
                else
                {
                    playerInventory.AddItem(enemyUnit.Pokemon.Base.InorgCraftingMaterial2, dropAmount);
                }

                bs.BattleOver(true);
            }
            else
            {
                var nextMonster = trainerParty.GetHealthyPokemon();
                if (nextMonster != null)
                {
                    //send out monster
                    Debug.Log($""Switching to AboutToUseState started."");
                    AboutToUseState.Instance.NewPokemon = nextMonster;
                    yield return bs.StateMachine.PushAndWait(AboutToUseState.Instance);
                    Debug.Log($""Switching to AboutToUseState finished."");
                }
                else
                {
                    bs.BattleOver(true);
                }
            }
        }
    }

    IEnumerator RunMoveEffects(MoveEffects effects, Pokemon sourcePokemon, Pokemon targetPokemon, MoveTarget moveTarget)
    {
        //Stat boosting
        if (effects.Boosts != null)
        {
            if (moveTarget == MoveTarget.Self)
            {
                sourcePokemon.ApplyBoosts(effects.Boosts);
            }
            else
            {
                targetPokemon.ApplyBoosts(effects.Boosts);
            }
        }
        //Status Conditions
        if (effects.Status != ConditionID.none)
        {
            targetPokemon.SetStatus(effects.Status);
        }

        //Volatile Status Conditions
        if (effects.VolatileStatus != ConditionID.none)
        {
            targetPokemon.SetVolatileStatus(effects.VolatileStatus);
        }

        yield return ShowStatusChanges(sourcePokemon);
        yield return ShowStatusChanges(targetPokemon);
    }

    IEnumerator ShowDamageDetails(DamageDetails damageDetails)
    {
        if (damageDetails.Critical > 1f)
        {
            yield return dialogBox.TypeDialog(""A critical hit!"");
        }
        if (damageDetails.TypeEffectiveness > 1f)
        {
            yield return dialogBox.TypeDialog(""The attack was super effective!"");
        }
        else if (damageDetails.TypeEffectiveness < 1f)
        {
            yield return dialogBox.TypeDialog(""The attack was not very effective! Oof!"");
        }
    }

    IEnumerator TryToEscape()
    {
        if (isTrainerBattle)
        {
            yield return dialogBox.TypeDialog($""You can't run from trainer battles!"");
            yield break;
        }

        bs.EscapeAttempts++;

        int playerSpeed = playerUnit.Pokemon.Speed;
        int enemySpeed = enemyUnit.Pokemon.Speed;

        if (enemySpeed < playerSpeed)
        {
            yield return dialogBox.TypeDialog($""You have ran away safely!"");
            bs.BattleOver(true);
        }
        else
        {
            float f = (playerSpeed * 128) / enemySpeed + 30 * bs.EscapeAttempts;
            f = f % 256;

            if (UnityEngine.Random.Range(0, 256) < f)
            {
                yield return dialogBox.TypeDialog($""You have ran away safely!"");
                bs.BattleOver(true);
            }
            else
            {
                yield return dialogBox.TypeDialog($""Can't escape!"");
            }
        }
    }
}"
U9TwyUtW,Impulse 101 Drift Preset,SE7ENHQ,XML,Saturday 16th of September 2023 09:07:27 PM CDT,"      <fMass value=""1050.000000"" />
      <fInitialDragCoeff value=""12.000000"" />
      <fPercentSubmerged value=""85.000000"" />
      <vecCentreOfMassOffset x=""0.000000"" y=""-0.165000"" z=""0.000000"" />
      <vecInertiaMultiplier x=""1.050000"" y=""1.575000"" z=""1.760000"" />
      <fDriveBiasFront value=""0.000000"" />
      <nInitialDriveGears value=""5"" />
      <fInitialDriveForce value=""5.430000"" />
      <fDriveInertia value=""1.300000"" />
      <fClutchChangeRateScaleUpShift value=""100.000000"" />
      <fClutchChangeRateScaleDownShift value=""100.000000"" />
      <fInitialDriveMaxFlatVel value=""140.000000"" />
      <fBrakeForce value=""1.500000"" />
      <fBrakeBiasFront value=""0.750000"" />
      <fHandBrakeForce value=""0.400000"" />
      <fSteeringLock value=""58.000000"" />
      <fTractionCurveMax value=""0.700000"" />
      <fTractionCurveMin value=""1.100000"" />
      <fTractionCurveLateral value=""21.000000"" />
      <fTractionSpringDeltaMax value=""0.150000"" />
      <fLowSpeedTractionLossMult value=""0.040000"" />
      <fCamberstiffness value=""0.000000"" />
      <fTractionBiasFront value=""0.484000"" />
      <fTractionLossMult value=""1.000000"" />
      <fSuspensionForce value=""2.300000"" />
      <fSuspensionCompDamp value=""1.400000"" />
      <fSuspensionReboundDamp value=""2.500000"" />
      <fSuspensionUpperLimit value=""0.060000"" />
      <fSuspensionLowerLimit value=""-0.100000"" />
      <fSuspensionRaise value=""-0.010000"" />
      <fSuspensionBiasFront value=""0.500000"" />
      <fAntiRollBarForce value=""1.000000"" />
      <fAntiRollBarBiasFront value=""0.650000"" />
      <fRollCentreHeightFront value=""0.330000"" />
      <fRollCentreHeightRear value=""0.330000"" />
      <fCollisionDamageMult value=""0.700000"" />
      <fWeaponDamageMult value=""1.000000"" />
      <fDeformationDamageMult value=""0.700000"" />
      <fEngineDamageMult value=""1.500000"" />
      <fPetrolTankVolume value=""65.000000"" />
      <fOilVolume value=""5.000000"" />
      <fSeatOffsetDistX value=""0.000000"" />
      <fSeatOffsetDistY value=""0.000000"" />
      <fSeatOffsetDistZ value=""0.050000"" />
      <nMonetaryValue value=""35000"" />
      <strModelFlags>440010</strModelFlags>
      <strHandlingFlags>0</strHandlingFlags>
      <strDamageFlags>20</strDamageFlags>
      <AIHandling>AVERAGE</AIHandling> 
      "
xzxWsxKF,Untitled,smj007,Python,Saturday 16th of September 2023 08:54:03 PM CDT,"class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        
        left, right = 0, 0

        while(left < len(s) and right <len(t)):
            if s[left] == t[right]:
                left += 1
                right += 1
            elif s[left] != t[right]:
                right += 1

        if left == len(s):
            return True

        return False"
