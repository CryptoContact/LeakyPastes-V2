id,title,username,language,date,content
s9raxcXN,Untitled,a_chn,C++,Thursday 25th of January 2024 11:54:30 PM CDT,"#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <chrono>
#include <climits>
#include <cmath>
#include <complex>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <vector>
using namespace std;
 
#define ll long long
#define forn(i, s, n) for (int i = s; i < n; i++)
#define bforn(i, s) for (int i = s; i >= 0; i--)
// for pairs
#define s second
#define f first 
const int M = 2e5 + 1;
const char nl = '\n';
 
int g[102][102];
map<pair<int, int>, vector<pair<int, int> > > sw;
bool vis[102][102];
int n;
 
void ff(int x, int y){
    if (vis[x][y] || g[x][y] == 0 || g[x][y] == -1) return;
    vis[x][y] = true;
    g[x][y] = 1;
    for (auto i : sw[{x,y}]){
        int a = i.f;
        int b = i.s;
        if (vis[a][b]) continue;
        g[a][b] = 1;
        if (vis[a - 1][b] == 1 || vis[a + 1][b] == 1 || vis[a][b + 1] == 1 || vis[a][b - 1] == 1) ff(a, b);
    }
    ff(x + 1, y);
    ff(x - 1, y);
    ff(x, y + 1);
    ff(x, y - 1);
}
void solve(){
    int m; cin >>n>>m; 
    for (int i = 0; i < m; i++){
        int a,b,c,d; cin >> a>>b>>c>>d;
        sw[{a,b}].push_back({c,d});
    } 
    for (int i = 0; i < 102; i++){
        for (int j = 0; j < 102; j++){
            if (i == 0 || j == 0 || j == 101 || i == 101) g[i][j] = -1;
            else g[i][j] = 0;
            vis[i][j] = false;
        }
    }
    g[1][1] = 1;
    ff(1,1);
    int ans = 0;
    for (int i = 0; i <= n; i++){
        for (int j = 0; j <= n; j++){
            if (g[i][j] == 1) ans++;
        }
    }
    cout << ans << nl;
}
// if you are unsure of how to do a problem by hand
// the solution is most likely somewhat brute force (i.e binsearch)
// if input is limited to 0-9 or a-z, usually you will loop through all combinations
// of letters or numbers
// constructive problems : start with 1 when constructing
// :%y+ to copy all lines
// rearrange math expressions
// difference array? (a[i] - b[i])
// debugging : reread the problem statement-every word is important!
// debugging : print important variables!
// think brute force sol first
int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    freopen(""lightson.in"", ""r"", stdin);
    freopen(""lightson.out"", ""w"", stdout);
    solve();
}"
HeZ2ebQB,Untitled,a_chn,C++,Thursday 25th of January 2024 11:51:15 PM CDT,"#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <chrono>
#include <climits>
#include <cmath>
#include <complex>
#include <cstring>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <vector>
using namespace std;
 
#define ll long long
#define forn(i, s, n) for (int i = s; i < n; i++)
#define bforn(i, s) for (int i = s; i >= 0; i--)
// for pairs
#define s second
#define f first 
const int M = 2e5 + 1;
const char nl = '\n';
const int E = 1505;
 
int g[E][E];
bool blocked;
 
void ff(int i, int j){
    if(i < 0 || i >= E || j < 0 || j >= E) return;
    if (g[i][j] == 1 || g[i][j] == 2) return;
    if (g[i][j] == -1){
        blocked = false;
        return;
    }
    g[i][j] = 2;
    ff(i + 1, j);
    ff(i - 1, j);
    ff(i, j - 1);
    ff(i, j + 1);
}
 
void solve(){
    int n; cin >> n;
    string s; cin >> s;
    for (int i = 0; i < E; i++){
        for (int j = 0; j < E; j++){
            if (i == 0 || i == E || j == 0 || j == E) g[i][j] = -1;
            else g[i][j] = 0;
        }
    }
    int i = 1000, j = 1000;
    g[i][j] = 1;
    for (int k = 0; k < s.size(); k++){
        g[i][j] = 1;
        if (s[k] == 'N'){
            g[i + 1][j] = 1;
            g[i + 2][j] = 1;
            i+=2;
        }
        if (s[k] == 'W'){
            g[i][j - 1] = 1;
            g[i][j - 2] = 1;
            j -= 2;
        }
        if (s[k] == 'E'){
            g[i][j + 1] = 1;
            g[i][j + 2] = 1;
            j+=2;
        }
        if (s[k] == 'S'){
            g[i - 1][j] = 1;
            g[i - 2][j] = 1;
            i -= 2;
        }
    } 
    int ans = 0;
    for (int k = 0; k < E; k++){
        for (int l = 0; l < E; l++){
            if (g[k][l] != 0) continue;
            blocked = true;
            ff(k, l);
            if (blocked) ans++;
        }
    }
    cout << ans << nl;
}
// if you are unsure of how to do a problem by hand
// the solution is most likely somewhat brute force (i.e binsearch)
// if input is limited to 0-9 or a-z, usually you will loop through all combinations
// of letters or numbers
// constructive problems : start with 1 when constructing
// :%y+ to copy all lines
// rearrange math expressions
// difference array? (a[i] - b[i])
// debugging : reread the problem statement-every word is important!
// debugging : print important variables!
// think brute force sol first
int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    freopen(""gates.in"", ""r"", stdin);
    freopen(""gates.out"", ""w"", stdout);
    solve();
}"
eMRYVZiN,List of all FREE Crypto Airdrops!,jusst2k4,GetText,Thursday 25th of January 2024 11:48:34 PM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://net-drop.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://net-drop.netlify.app/

203190"
R2NW9D9Z,G2A.com Free Gift Card Guide Jan 2024,ounnuo,GetText,Thursday 25th of January 2024 11:08:43 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_632990.pdf
 
Working as of
26 January 2024"
nxCd7GBS,DK64 US ROM Build Dates,theballaam96,JSON,Thursday 25th of January 2024 10:46:52 PM CDT,"{
   ""1999-10-14"":{
      ""count"":259,
      ""files"":[
         ""0x43cf64"",
         ""0x43d074"",
         ""0x43e444"",
         ""0x43f460"",
         ""0x443016"",
         ""0x47209c"",
         ""0x473044"",
         ""0x473064"",
         ""0x47503a"",
         ""0x477094"",
         ""0x47a890"",
         ""0x47a8b0"",
         ""0x47ca70"",
         ""0x490712"",
         ""0x490abc"",
         ""0x491e86"",
         ""0x495986"",
         ""0x496ea0"",
         ""0x499322"",
         ""0x49b132"",
         ""0x49e05e"",
         ""0x506cca"",
         ""0x506db8"",
         ""0x5584ce"",
         ""0x559164"",
         ""0x55943e"",
         ""0x55a530"",
         ""0x5618e6"",
         ""0x562540"",
         ""0x5629fa"",
         ""0x562dc8"",
         ""0x56b94c"",
         ""0x56d7a8"",
         ""0x56d7c8"",
         ""0x56db7e"",
         ""0x56e620"",
         ""0x56fe30"",
         ""0x57047a"",
         ""0x5710dc"",
         ""0x573ae0"",
         ""0x576410"",
         ""0x58760e"",
         ""0x589c90"",
         ""0x58bcd4"",
         ""0x58c612"",
         ""0x58c83c"",
         ""0x58cace"",
         ""0x58cbf6"",
         ""0x58dd82"",
         ""0x58e79e"",
         ""0x58ed54"",
         ""0x590256"",
         ""0x591162"",
         ""0x59271e"",
         ""0x593c56"",
         ""0x5940ca"",
         ""0x596c0a"",
         ""0x5e0a62"",
         ""0x5e0a8a"",
         ""0x5e0e78"",
         ""0x5e123a"",
         ""0x5e134a"",
         ""0x5ea542"",
         ""0x5eab2a"",
         ""0x5eafc4"",
         ""0x5ec09e"",
         ""0x5eca58"",
         ""0x5fcf30"",
         ""0x5ff100"",
         ""0x5ff16c"",
         ""0x5ff834"",
         ""0x600204"",
         ""0x600bae"",
         ""0x6017d4"",
         ""0x601ff8"",
         ""0x6022b0"",
         ""0x602b2e"",
         ""0x6033dc"",
         ""0x603e80"",
         ""0x604554"",
         ""0x604822"",
         ""0x604d02"",
         ""0x605220"",
         ""0x60536a"",
         ""0x605594"",
         ""0x607548"",
         ""0x608812"",
         ""0x60a05c"",
         ""0x60a444"",
         ""0x60cf38"",
         ""0x60ef96"",
         ""0x61071c"",
         ""0x610c3a"",
         ""0x612c8e"",
         ""0x612f36"",
         ""0x61670c"",
         ""0x618550"",
         ""0x618c5e"",
         ""0x61929c"",
         ""0x619d12"",
         ""0x61a54a"",
         ""0x61c0a8"",
         ""0x61ca52"",
         ""0x61ccf4"",
         ""0x61dec8"",
         ""0x61f4f0"",
         ""0x6208f4"",
         ""0x6235f6"",
         ""0x6243de"",
         ""0x6248ba"",
         ""0x626e52"",
         ""0x6279fa"",
         ""0x62a5ec"",
         ""0x62bbb6"",
         ""0x62c410"",
         ""0x62ccda"",
         ""0x62e5f4"",
         ""0x62fc08"",
         ""0x63035c"",
         ""0x63107e"",
         ""0x63224a"",
         ""0x633d56"",
         ""0x6340f0"",
         ""0x636bfa"",
         ""0x637030"",
         ""0x637e6c"",
         ""0x6397ee"",
         ""0x63af68"",
         ""0x63c6ca"",
         ""0x63c83e"",
         ""0x63cde4"",
         ""0x63ce96"",
         ""0x63f43e"",
         ""0x640438"",
         ""0x644a5a"",
         ""0x66b676"",
         ""0x66bd90"",
         ""0x66bfd4"",
         ""0x66dd06"",
         ""0x67060e"",
         ""0x67d368"",
         ""0x67e88c"",
         ""0x6811d4"",
         ""0x6942fc"",
         ""0x694516"",
         ""0x695ff2"",
         ""0x699b70"",
         ""0x69b762"",
         ""0x69e8f6"",
         ""0x6a135e"",
         ""0x6a5c78"",
         ""0x6fa45c"",
         ""0x6fbae8"",
         ""0x71ef04"",
         ""0x720238"",
         ""0x72039c"",
         ""0x72237c"",
         ""0x72dbcc"",
         ""0x72de34"",
         ""0x72e006"",
         ""0x72e324"",
         ""0x739e64"",
         ""0x73bee4"",
         ""0x73c14a"",
         ""0x73c3cc"",
         ""0x73d01a"",
         ""0x73e952"",
         ""0x7407f4"",
         ""0x7415fc"",
         ""0x7438fa"",
         ""0x77cb02"",
         ""0x77f22c"",
         ""0x780fe8"",
         ""0x782326"",
         ""0x7827a4"",
         ""0x782a2c"",
         ""0x785a24"",
         ""0x7865ea"",
         ""0x787ca0"",
         ""0x789820"",
         ""0x78b3a6"",
         ""0x78be0c"",
         ""0x78d58c"",
         ""0x78f126"",
         ""0x78fe9a"",
         ""0x793212"",
         ""0x7bc54c"",
         ""0x7bd2fa"",
         ""0x7bdc04"",
         ""0x7be552"",
         ""0x7be604"",
         ""0x7d1886"",
         ""0x7d1cbe"",
         ""0x7d2a86"",
         ""0x7d43c6"",
         ""0x7d5a96"",
         ""0x7e0a00"",
         ""0x7e2750"",
         ""0x7e27c6"",
         ""0x7e4250"",
         ""0x7e4eea"",
         ""0x7e5da0"",
         ""0x7e69c8"",
         ""0x7e78c2"",
         ""0x7e80f6"",
         ""0x7e8a24"",
         ""0x7e9eaa"",
         ""0x7eb024"",
         ""0x7eb466"",
         ""0x7ebcb2"",
         ""0x7ec0a2"",
         ""0x7ec30e"",
         ""0x7ed78c"",
         ""0x7edc16"",
         ""0x7ef684"",
         ""0x7f162e"",
         ""0x7f1890"",
         ""0x7f1bf2"",
         ""0x7f4350"",
         ""0x7f5ab6"",
         ""0x7f68b8"",
         ""0x7f6bac"",
         ""0x7f953a"",
         ""0x7f9a50"",
         ""0x7fc18e"",
         ""0x7fee22"",
         ""0x7ff8c6"",
         ""0x80006e"",
         ""0x8012c6"",
         ""0x8024de"",
         ""0x803d9e"",
         ""0x804f9c"",
         ""0x805f22"",
         ""0x806bf4"",
         ""0x8081a2"",
         ""0x80885c"",
         ""0x80bfbc"",
         ""0x80cd50"",
         ""0x80d700"",
         ""0x8109f6"",
         ""0x8116e4"",
         ""0x8148fc"",
         ""0x8161c2"",
         ""0x816734"",
         ""0x8178ac"",
         ""0x8197ec"",
         ""0x81a952"",
         ""0x81ba32"",
         ""0x81c564"",
         ""0x81dd94"",
         ""0x81fb00"",
         ""0x81fdf2"",
         ""0x8233a4"",
         ""0x823668"",
         ""0x823f84"",
         ""0x825a26"",
         ""0x826f44"",
         ""0x828450"",
         ""0x828e60""
      ]
   },
   ""1999-10-15"":{
      ""count"":2,
      ""files"":[
         ""0x444730"",
         ""0x646afc""
      ]
   },
   ""1999-10-17"":{
      ""count"":2,
      ""files"":[
         ""0x476870"",
         ""0x66fd18""
      ]
   }
}"
aKXHQa0K,SAM Segment anything convert pth to onnx,31ph4n70m,Bash,Thursday 25th of January 2024 09:22:13 PM CDT,python scripts/export_onnx_model.py --checkpoint ..\sam_vit_h_4b8939.pth --model-type vit_h --output ..\sam_vit_h_4b8939.onnx
ipSqbVi7,Pendeteksi Hujan untuk Kehidupan Sehari-hari,cisco404,C++,Thursday 25th of January 2024 09:04:33 PM CDT,"const int sensorPin = A0; // Pin analog untuk sensor hujan
const int ledPin = 2;     // Pin digital untuk LED indikator

void setup() {
  pinMode(ledPin, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  int sensorValue = analogRead(sensorPin);

  // Baca nilai sensor
  Serial.print(""Nilai Sensor Hujan: "");
  Serial.println(sensorValue);

  // Tentukan batas nilai untuk mendeteksi hujan
  int threshold = 500;

  // Jika nilai sensor di bawah batas, hujan terdeteksi
  if (sensorValue < threshold) {
    digitalWrite(ledPin, HIGH); // Nyalakan LED
    Serial.println(""Hujan Terdeteksi!"");
  } else {
    digitalWrite(ledPin, LOW); // Matikan LED
  }

  delay(1000); // Tunggu 1 detik sebelum membaca ulang sensor
}"
zN8sBg2B,Kinsey template: Update ScrollTrigger when content container dimensions are changed,artemsemkin,JavaScript,Thursday 25th of January 2024 08:55:44 PM CDT,"/**
 * Update ScrollTrigger when content container
 * dimensions are changed
 */
const ro = new ResizeObserver(debounce(() => {
  ScrollTrigger.refresh();
  console.log('Refresh triggers');
}, 250));

document.addEventListener('arts/barba/transition/start', () => {
  ro.unobserve(window.$pageContent[0]);
});

document.addEventListener('DOMContentLoaded', () => {
  ro.observe(window.$pageContent[0]);
});

ro.observe(window.$pageContent[0]);"
A3Y3hWWB,CreateFarmController,marsmaantje,Lua,Thursday 25th of January 2024 08:29:32 PM CDT,"--Controller for a simple create farm I made
-- 2 outputs, 1 input
-- Left: output, gearshift
-- Back: output, gantry shaft
-- Top: input, monitor, 2x1

--monitor layout:
--.---------------.
--|  ^/v: xx sec  |
--|+1 -1 +5 -5    |
--|  <->: xx sec  |
--|+1 -1 +5 -5    |
--|    Harvest    |
--|---------------|

-------------------------------------
-- Variables
local monitor = peripheral.wrap(""top"")

local VerticalTime = 5
local HorizontalTime = 10

local IsFarming = false

-------------------------------------
-- Functions

function SaveSettings()
    local file = fs.open(""farmConfig"", ""w"")
    file.writeLine(VerticalTime)
    file.writeLine(HorizontalTime)
    file.close()
end

function LoadSettings()
    if fs.exists(""farmConfig"") then
        local file = fs.open(""farmConfig"", ""r"")
        VerticalTime = tonumber(file.readLine())
        HorizontalTime = tonumber(file.readLine())
        file.close()
    end
end

function printCentered(text, line)
    local x, y = monitor.getSize()
    monitor.setCursorPos(math.floor((x - #text) / 2), line)
    monitor.write(text)
end

function print(text, line)
    monitor.setCursorPos(1, line)
    monitor.write(text)
end

function print(text, line, x)
    monitor.setCursorPos(x, line)
    monitor.write(text)
end

function printMonitor()
    monitor.setBackgroundColor(colors.white)
    monitor.clear()

    monitor.setTextColor(colors.black)
    monitor.setBackgroundColor(colors.white)
    printCentered("" ^/v: "" .. VerticalTime .. "" sec"", 1)

    monitor.setTextColor(colors.black)
    monitor.setBackgroundColor(colors.lightGray)
    print(""-1"", 2, 1)
    print(""+1"", 2, 4)
    print(""-5"", 2, 7)
    print(""+5"", 2, 10)

    monitor.setTextColor(colors.black)
    monitor.setBackgroundColor(colors.white)
    printCentered("" <->: "" .. HorizontalTime .. "" sec"", 3)

    monitor.setTextColor(colors.black)
    monitor.setBackgroundColor(colors.lightGray)
    print(""-1"", 4, 1)
    print(""+1"", 4, 4)
    print(""-5"", 4, 7)
    print(""+5"", 4, 10)

    monitor.setTextColor(colors.black)
    if IsFarming then
        monitor.setBackgroundColor(colors.red)
    else
        monitor.setBackgroundColor(colors.green)
    end
    printCentered(""    Harvest    "", 5)
end

function up()
    redstone.setOutput(""back"", true)
    redstone.setOutput(""left"", false)
end

function down()
    redstone.setOutput(""back"", true)
    redstone.setOutput(""left"", true)
end

function forward()
    redstone.setOutput(""back"", false)
    redstone.setOutput(""left"", true)
end

function back()
    redstone.setOutput(""back"", false)
    redstone.setOutput(""left"", false)
end

function farm()
    down()
    os.sleep(VerticalTime)
    forward()
    os.sleep(HorizontalTime)
    up()
    os.sleep(VerticalTime)
    back()
    os.sleep(HorizontalTime)
    IsFarming = false
end
-------------------------------------
-- Main

LoadSettings()

monitor.setTextScale(1)
monitor.setTextColor(colors.black)
monitor.setBackgroundColor(colors.white)
monitor.setCursorPos(1, 1)
monitor.clear()

printMonitor()

while true do
    local event, side, x, y = os.pullEvent(""monitor_touch"")
    if y == 5 then
        IsFarming = true
        printMonitor()
        farm()
        printMonitor()
    elseif y == 2 then
        if x == 1 or x == 2 then
            VerticalTime = VerticalTime - 1
        elseif x == 4 or x == 5 then
            VerticalTime = VerticalTime + 1
        elseif x == 7 or x == 8 then
            VerticalTime = VerticalTime - 5
        elseif x == 10 or x == 11 then
            VerticalTime = VerticalTime + 5
        end
        VerticalTime = math.max(1, VerticalTime)
        printMonitor()
    elseif y == 4 then
        if x == 1 or x == 2 then
            HorizontalTime = HorizontalTime - 1
        elseif x == 4 or x == 5 then
            HorizontalTime = HorizontalTime + 1
        elseif x == 7 or x == 8 then
            HorizontalTime = HorizontalTime - 5
        elseif x == 10 or x == 11 then
            HorizontalTime = HorizontalTime + 5
        end
        HorizontalTime = math.max(1, HorizontalTime)
        printMonitor()
    end
    SaveSettings()
end"
MDDpGc7K,xyPlot,j0h,Python,Thursday 25th of January 2024 08:21:55 PM CDT,"#!/usr/bin/python3
import RPi.GPIO as GPIO
import turtle
import time
oldX=0
oldY=0
# GPIO pins for the encoders
encoder1_pins = (23, 24)  # A and B pins for encoder 2 (x-axis)
encoder2_pins = (14, 15)  # A and B pins for encoder 1 (y-axis)


# Set up GPIO
button_pin = 12
GPIO.setmode(GPIO.BCM)
GPIO.setup(button_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(encoder1_pins[0], GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(encoder1_pins[1], GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(encoder2_pins[0], GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(encoder2_pins[1], GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Variables to store encoder state
encoder1_last_state = (GPIO.input(encoder1_pins[0]) << 1) | GPIO.input(encoder1_pins[1])
encoder2_last_state = (GPIO.input(encoder2_pins[0]) << 1) | GPIO.input(encoder2_pins[1])
x_coord = 0
y_coord = 0
# Create a turtle object
t = turtle.Turtle()

# Set up the turtle screen
screen = turtle.Screen()
screen.setup(width=1.0, height=1.0)  # Set the window to full-screen mode
canvas = screen.getcanvas()
root = canvas.winfo_toplevel()
root.overrideredirect(1)

    

# Define a callback function to run when the button is pressed
def button_callback(channel):
    print(""Clear Screen"") 
    t.reset() #reset goes to home 0,0,(center) and clears screen
    

# Callback function for encoder 1 (x-axis)
def encoder1_callback(channel):
    global encoder1_last_state, x_coord
    a = GPIO.input(encoder1_pins[0])
    b = GPIO.input(encoder1_pins[1])
    new_state = (a << 1) | b
    if (encoder1_last_state == 0b00 and new_state == 0b10) or (encoder1_last_state == 0b11 and new_state == 0b01):
        x_coord += 1
    elif (encoder1_last_state == 0b10 and new_state == 0b00) or (encoder1_last_state == 0b01 and new_state == 0b11):
        x_coord -= 1
    encoder1_last_state = new_state

# Callback function for encoder 2 (y-axis)
def encoder2_callback(channel):
    global encoder2_last_state, y_coord
    a = GPIO.input(encoder2_pins[0])
    b = GPIO.input(encoder2_pins[1])
    new_state = (a << 1) | b
    if (encoder2_last_state == 0b00 and new_state == 0b10) or (encoder2_last_state == 0b11 and new_state == 0b01):
        y_coord -= 1
    elif (encoder2_last_state == 0b10 and new_state == 0b00) or (encoder2_last_state == 0b01 and new_state == 0b11):
        y_coord += 1
    encoder2_last_state = new_state

# Add event detection for encoder 1 (x-axis)
GPIO.add_event_detect(encoder1_pins[0], GPIO.BOTH, callback=encoder1_callback)
GPIO.add_event_detect(encoder1_pins[1], GPIO.BOTH, callback=encoder1_callback)

# Add event detection for encoder 2 (y-axis)
GPIO.add_event_detect(encoder2_pins[0], GPIO.BOTH, callback=encoder2_callback)
GPIO.add_event_detect(encoder2_pins[1], GPIO.BOTH, callback=encoder2_callback)

# Add event listener to the button pin
GPIO.add_event_detect(button_pin, GPIO.FALLING, callback=button_callback, bouncetime=300)

try:
    while True:
        # Main loop
        time.sleep(0.1)  # Add a small delay to avoid high CPU usage
        if (x_coord != oldX or y_coord != oldY):
            print(f""X: {x_coord}, Y: {y_coord}"") 
            t.goto(x_coord, y_coord)           
        
        oldX=x_coord
        oldY=y_coord
        #screen.listen()  # Keeps the screen on top
except KeyboardInterrupt:
    # Clean up GPIO on keyboard interrupt
    GPIO.cleanup() #Press Ctrl+C to exit (terminal window... maybe add a screen listener for ctrl+c or Q)

"
qXr6q9SL,googledrive,kohpriwniranam,Python,Thursday 25th of January 2024 07:59:20 PM CDT,"from googledriver import download

URL = 'https://drive.google.com/file/d/xxxxxxxxx/view?usp=share_link'
download(URL, './model/tf_gpt2_model')


from googledriver import download

URL = 'https://drive.google.com/file/d/xxxxxxxxx/view?usp=share_link'
cached_path = download(URL, None, 'tf_model')

Installation
pip install googledriver

Features
1. File Download
Download to specific path
from googledriver import download
URL = 'https://drive.google.com/file/d/xxxxxxxxx/view?usp=share_link'
download(URL, './model/tf_gpt2_model')

Download to cached folder
To download a cached file (or directory) from a URL and return its path, you can use the following method.

from googledriver import download
URL = 'https://drive.google.com/file/d/xxxxxxxxx/view?usp=share_link'
cached_path = download(URL, None, 'tf_model')

#=============================================================#

2. Folder Download

from googledriver import download_folder
URL = 'https://drive.google.com/file/d/xxxxxxxxx/view?usp=share_link'
download_folder(URL)


from googledriver import download_folder
URL = 'https://drive.google.com/file/d/xxxxxxxxx/view?usp=share_link'
save_folder = './any/path/to/save/'
download_folder(URL, save_folder)


from googledriver import download_folder
URL = 'https://drive.google.com/file/d/xxxxxxxxx/view?usp=share_link'
download_folder(URL, cached=True)"
wpAX3ppK,Timus 1041 Nikifor,kub3,Python,Thursday 25th of January 2024 07:56:28 PM CDT,"# Timus 1041. Nikifor
from sys import stdin, stdout


def vector_is_zero(vec: list) -> bool:
    return vec.count(0) == len(vec)


def argsort(seq: list) -> list:
    return sorted(range(len(seq)), key=seq.__getitem__)


def roll(seq: list, start: int, end: int) -> None:
    seq.insert(start, seq.pop(end))


def gauss_forward(matrix: list, idx: list, mod: int) -> None:
    nrows = len(matrix)
    ncols = len(matrix[0])

    row, col = 0, 0
    while row < nrows and col < ncols:
        pivot_row = row
        for i in range(row, nrows):
            if matrix[i][col] != 0:
                pivot_row = i
                break

        pivot_elem = matrix[pivot_row][col]
        if pivot_elem == 0:
            col += 1
            continue

        if pivot_row != row:
            roll(matrix, row, pivot_row)
            roll(idx, row, pivot_row)

        if pivot_elem != 1:
            pivot_elem_inv = pow(pivot_elem, -1, mod)
            for j in range(col, ncols):
                matrix[row][j] *= pivot_elem_inv
                matrix[row][j] %= mod

        i = row + 1
        while i < nrows:
            factor = matrix[i][col]
            if factor != 0:
                for j in range(col, ncols):
                    matrix[i][j] -= factor * matrix[row][j]
                    matrix[i][j] %= mod

            if vector_is_zero(matrix[i]):
                del matrix[i]
                del idx[i]
                nrows -= 1
            i += 1
        row += 1
        col += 1


def solve(vectors: list, prices: list) -> list:
    n = len(vectors[0])
    sort_idx = argsort(prices)
    mod = 10000019

    basis_idx = []
    basis = []
    for i in sort_idx:
        vector = vectors[i]
        if not vector_is_zero(vector):
            basis_idx.append(i)
            basis.append(vector)
        if len(basis) == n:
            gauss_forward(basis, basis_idx, mod)
        if len(basis) == n:
            break
    if len(basis_idx) < n:
        return []
    return basis_idx


def main():
    """"""
    3 <= n <= 50; n <= m <= 2000
    All of the coordinates are integers with an absolute value not exceeding 2000.
    The prices are positive integers not exceeding 15 000
    """"""
    m, n = map(int, stdin.readline().split())
    vectors = []
    for _ in range(m):
        v = list(map(int, stdin.readline().split()))
        vectors.append(v)

    prices = []
    for _ in range(m):
        c = int(stdin.readline())
        prices.append(c)

    basis_idx = solve(vectors, prices)
    prices_sum = sum(prices[i] for i in basis_idx)
    stdout.write(f""{prices_sum}\n"")
    if prices_sum != 0:
        stdout.write(""\n"".join(map(str, sorted(v + 1 for v in basis_idx))))
        stdout.write(""\n"")


if __name__ == ""__main__"":
    main()
"
wJEHxZ6L,Crunchyroll Bin,TheZhocky,C++,Thursday 25th of January 2024 07:42:14 PM CDT,"bin >> 01/25/2024
Crunchyroll)) 0000
-----------------------
Italy

423067257655|08|2025
-----------------------"
VRKT447y,wazuh installation,Kungsinokaman,PowerShell,Thursday 25th of January 2024 07:04:37 PM CDT,"Acknowledgement
Please check the wazuh-manager first if it is running before installing a wazuh-agent to the users.

1. Run CMD as Administrator
type command: powershell
press enter
2. Next enter the following commands one by one
---------------------------------------------------------------------------------------
command 1: $whoami=[System.Security.Principal.WindowsIdentity]::GetCurrent().Name
---------------------------------------------------------------------------------------
Explanation 1: The command1 is to identify the username of the account, if the powershell did not acknowledge the $whoami value then we have to manually input the username of the AD account it must follow this format example only if username is User Test: 'IS6_U_Test'
note: must include quotation marks ''

---------------------------------------------------------------------------------------
command 2: Invoke-WebRequest -Uri https://packages.wazuh.com/4.x/windows/wazuh-agent-4.7.2-1.msi -OutFile ${env.tmp}\wazuh-agent; msiexec.exe /i ${env.tmp}\wazuh-agent /q WAZUH_MANAGER='10.1.113.214' WAZUH_AGENT_GROUP='default' WAZUH_AGENT_NAME=$whoami WAZUH_REGISTRATION_SERVER='10.1.113.214'
---------------------------------------------------------------------------------------
If you encountered Explanation 1: then replace the $whoami at command2 following the format username
sample:
WAZUH_AGENT_NAME='IS6_U_Test'

------------------------
command 3: net start WazuhSvc
------------------------
This is for starting the wazuh-agent service


3. Check the wazuh dashboard for verification
https://10.1.113.214
password: R5pSJynpYwRfFR6yfC5cX7uH+Ds*LU0J


----------------
Troubleshooting
----------------
If the wazuh dashboard displays an error  (eg. API error)
goto IWU and open the ubuntu server
username: wazuh.server
password: 1wu@W4zuH!~
1. 
Open terminal and type command: sudo su
press enter
enter the wazuh.server password

2.
Once we have entered the correct password then
type command: systemctl restart wazuh-manager
this is to start/restart the wazuh-manager if suddenly the server has shutdown or encountered an issue

3. Check the status of wazuh-manager
systemctl status wazuh-manager
If the output is active/running then proceed on installing an agent


If the wazuh-agent has been installed and the user device is not listed on the active agents
then we have to remove the current agent installed and reinstall it

1. Easy way is to download the agent installer:
https://documentation.wazuh.com/current/installation-guide/wazuh-agent/wazuh-agent-package-windows.html

after installation, open it and click remove.
Repeat the installation process through the powershell again.

Optional:
2. Manual removal of agent to the wazuh-server
To uninstall the agent, the original Windows installer file is required to perform the unattended process:

msiexec.exe /x wazuh-agent-4.7.2-1.msi /qn
The Wazuh agent is now completely removed from your Windows endpoint.
"
uvRf8gDV,snowybot handbreaker bot,coinwalk,JavaScript,Thursday 25th of January 2024 06:38:24 PM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((oldestbal/144).toFixed(8));
var bellance = oldestbal;
var dodgey = oldestbal;
var kitty = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*6.9);
var eights = (base*7.9);
var upper = 6.9;
var downer = 2.9;
var fart = ((Math.floor(oldestbal/tens))*tens);
var bob = oldestbal;
var boobed = oldestbal;
var troll = true;


function get(){
dodgey = document.getElementById('pct_balance').value;
if (dodgey>kitty){
bellance = bellance+botplus
kitty = parseFloat(dodgey);
}
if (dodgey<kitty){
bellance = bellance-botplus
kitty = parseFloat(dodgey);
}
var good = ((bellance-oldestbal).toFixed(8));
console.log(""profit"");
console.log(good);
if (bellance>(fart+(botplus*upper))){
    botplus = botplus*2;
    upper = 4.9;
    downer = 4.9;
    fart = parseFloat(bellance);
}
if ((bellance<(fart-(botplus*downer)))&&(troll)){
    botplus = botplus*2;
    upper = 4.9;
    downer = 4.9;
	troll = false;
    fart = parseFloat(bellance);
}
if ((bellance<(fart-(botplus*downer)))&&(!troll))[
    upper = 4.9;
    downer = 4.9;
	troll = false;
    fart = parseFloat(bellance);
}
if (bellance>bob){
   bob = parseFloat(bellance);
   }
if ((bellance<=(bob-(botplus*3.9)))&&(botplus>=(base*3.9))&&(bellance>=boobed)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    upper = 6.9;
    downer = 2.9;
	troll = true;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
    boobed = parseFloat(bellance);
}
if ((botplus>=tens)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    upper = 6.9;
    downer = 2.9;
	troll = true;
    fart = ((Math.floor(bellance/tens))*tens);
    bob = parseFloat(bellance);
    boobed = parseFloat(bellance);
}
if (bellance>=100) {
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((botplus*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => get(), 10);
}
get();
"
kckcP0P1,nwmls footer disclaimer,janusivan,HTML 5,Thursday 25th of January 2024 06:31:11 PM CDT,"<p>The IDX display contains information sourced from the Northwest Multiple Listing Service. This data is intended solely for personal, non-commercial use and is not to be utilized for any other purposes except to identify potential properties for purchase. Although the MLS data displayed is typically considered reliable, it is not guaranteed to be accurate by the MLS. Buyers are responsible for verifying the accuracy of all information and are advised to conduct their own investigations or seek professional assistance. Other sources besides the Listing Agent may have contributed to the MLS data presented. Unless expressly specified in writing, the Broker/Agent has not confirmed any information obtained from external sources. The Broker/Agent may or may not have acted as the Listing and/or Selling Agent and cannot guarantee the accuracy of property locations displayed on any map. Any compensation offers are solely made to participants of the MLS where the listing is registered.<br /><br />&copy;<span class=""auto-year-update"">#</span> Northwest Multiple Listing Service all rights reserved.<img src=""https://res.cloudinary.com/luxuryp/images/f_auto,q_auto/pv3nzs2ntl6l765u6u0g/symbol-color-nwmls"" alt="""" width=""25"" height=""auto"" /></p>"
1jaJDWzb,123,chemelli74,Python,Thursday 25th of January 2024 06:27:17 PM CDT,"""""""Support for climates.""""""
from __future__ import annotations

import asyncio
from enum import StrEnum
from typing import Any

from aiocomelit import ComelitSerialBridgeObject
from aiocomelit.const import CLIMATE, SLEEP_BETWEEN_CALLS

from homeassistant.components.climate import (
    ClimateEntity,
    ClimateEntityFeature,
    HVACAction,
    HVACMode,
    UnitOfTemperature,
)
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_TEMPERATURE, PRECISION_TENTHS
from homeassistant.core import HomeAssistant
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.update_coordinator import CoordinatorEntity

from .const import _LOGGER, DOMAIN
from .coordinator import ComelitSerialBridge


class ClimaAction(StrEnum):
    """"""Serial Bridge clima actions.""""""

    OFF = ""off""
    ON = ""on""
    MANUAL = ""man""
    SET = ""set""
    AUTO = ""auto""


API_STATUS: dict[str, dict[str, Any]] = {
    ""O"": {
        ""action"": ""off"",
        ""hvac_mode"": HVACMode.OFF,
        ""hvac_action"": HVACAction.OFF,
    },
    ""L"": {
        ""action"": ""lower"",
        ""hvac_mode"": HVACMode.COOL,
        ""hvac_action"": HVACAction.COOLING,
    },
    ""U"": {
        ""action"": ""upper"",
        ""hvac_mode"": HVACMode.HEAT,
        ""hvac_action"": HVACAction.HEATING,
    },
}

MODE_TO_ACTION: dict[HVACMode, ClimaAction] = {
    HVACMode.OFF: ClimaAction.OFF,
    HVACMode.AUTO: ClimaAction.AUTO,
    HVACMode.COOL: ClimaAction.MANUAL,
    HVACMode.HEAT: ClimaAction.MANUAL,
}


OFF = ""O""


async def async_setup_entry(
    hass: HomeAssistant,
    config_entry: ConfigEntry,
    async_add_entities: AddEntitiesCallback,
) -> None:
    """"""Set up Comelit climates.""""""

    coordinator: ComelitSerialBridge = hass.data[DOMAIN][config_entry.entry_id]

    async_add_entities(
        ComelitClimateEntity(coordinator, device, config_entry.entry_id)
        for device in coordinator.data[CLIMATE].values()
    )


class ComelitClimateEntity(CoordinatorEntity[ComelitSerialBridge], ClimateEntity):
    """"""Climate device.""""""

    _attr_hvac_modes = [HVACMode.AUTO, HVACMode.COOL, HVACMode.HEAT, HVACMode.OFF]
    _attr_max_temp = 30
    _attr_min_temp = 5
    _attr_supported_features = ClimateEntityFeature.TARGET_TEMPERATURE
    _attr_target_temperature_step = PRECISION_TENTHS
    _attr_temperature_unit = UnitOfTemperature.CELSIUS
    _attr_has_entity_name = True
    _attr_name = None

    def __init__(
        self,
        coordinator: ComelitSerialBridge,
        device: ComelitSerialBridgeObject,
        config_entry_entry_id: str,
    ) -> None:
        """"""Init light entity.""""""
        self._api = coordinator.api
        self._device = device
        super().__init__(coordinator)
        # Use config_entry.entry_id as base for unique_id
        # because no serial number or mac is available
        self._attr_unique_id = f""{config_entry_entry_id}-{device.index}""
        self._attr_device_info = coordinator.platform_device_info(device, device.type)

    @property
    def _clima(self) -> list[Any]:
        """"""Return clima device data.""""""
        # CLIMATE has 2 turple:
        # - first  for Clima
        # - second for Humidifier
        return self.coordinator.data[CLIMATE][self._device.index].val[0]

    @property
    def _api_mode(self) -> str:
        """"""Return device mode.""""""
        # Values from API: ""O"", ""L"", ""U""
        return self._clima[2]

    @property
    def _api_active(self) -> bool:
        ""Return device active/idle.""
        return self._clima[1]

    @property
    def _api_automatic(self) -> bool:
        """"""Return device in automatic/manual mode.""""""
        return self._clima[3] == ""A""

    @property
    def target_temperature(self) -> float:
        """"""Set target temperature.""""""
        return self._clima[4] / 10

    @property
    def current_temperature(self) -> float:
        """"""Return current temperature.""""""
        return self._clima[0] / 10

    @property
    def hvac_mode(self) -> HVACMode | None:
        """"""HVAC current mode.""""""

        if self._api_mode == OFF:
            return HVACMode.OFF

        if self._api_automatic:
            return HVACMode.AUTO

        if self._api_mode in API_STATUS:
            return API_STATUS[self._api_mode][""hvac_mode""]

        _LOGGER.warning(""Unknown API mode '%s' in hvac_mode"", self._api_mode)
        return None

    @property
    def hvac_action(self) -> HVACAction | None:
        """"""HVAC current action.""""""

        if self._api_mode == OFF:
            return HVACAction.OFF

        if not self._api_active:
            return HVACAction.IDLE

        if self._api_mode in API_STATUS:
            return API_STATUS[self._api_mode][""hvac_action""]

        _LOGGER.warning(""Unknown API mode '%s' in hvac_action"", self._api_mode)
        return None

    async def async_set_temperature(self, **kwargs: Any) -> None:
        """"""Set new target temperature.""""""
        if (target_temp := kwargs.get(ATTR_TEMPERATURE)) is None:
            return

        await self.coordinator.api.set_clima_status(
            self._device.index, ClimaAction.MANUAL
        )
        await self.coordinator.api.set_clima_status(
            self._device.index, ClimaAction.SET, target_temp
        )

    async def async_set_hvac_mode(self, hvac_mode: HVACMode) -> None:
        """"""Set hvac mode.""""""

        if hvac_mode != HVACMode.OFF:
            await self.coordinator.api.set_clima_status(
                self._device.index, ClimaAction.ON
            )

        await asyncio.sleep(SLEEP_BETWEEN_CALLS)
        await self.coordinator.api.set_clima_status(
            self._device.index, MODE_TO_ACTION[hvac_mode]
        )
"
CuJgkHwY,2024-01-25_stats.json,rdp_snitch,JSON,Thursday 25th of January 2024 06:18:16 PM CDT,"{
  ""ip"": {
    ""82.32.227.142"": 12,
    ""194.165.17.21"": 45,
    ""111.173.80.148"": 3,
    ""106.58.164.84"": 9,
    ""103.240.84.186"": 12,
    ""150.223.32.106"": 9,
    ""111.161.41.132"": 27,
    ""109.69.7.157"": 12,
    ""36.111.174.56"": 45,
    ""45.227.254.8"": 6,
    ""106.58.166.180"": 15,
    ""222.93.104.67"": 12,
    ""74.105.22.131"": 24,
    ""124.67.254.109"": 42,
    ""218.90.120.19"": 15,
    ""42.51.39.209"": 9,
    ""203.56.40.167"": 18,
    ""216.202.197.116"": 27,
    ""106.58.178.2"": 9,
    ""106.58.164.95"": 9,
    ""14.18.41.26"": 6,
    ""43.134.83.223"": 9,
    ""117.145.27.42"": 18,
    ""219.144.67.36"": 24,
    ""113.200.222.57"": 27,
    ""182.61.55.68"": 12,
    ""194.165.16.11"": 12,
    ""80.151.251.216"": 15,
    ""222.219.240.13"": 15,
    ""150.223.76.57"": 9,
    ""150.223.66.55"": 6,
    ""185.106.176.8"": 9,
    ""110.40.34.231"": 24,
    ""106.58.215.167"": 9,
    ""175.4.26.179"": 9,
    ""27.8.44.19"": 6,
    ""103.39.222.217"": 3,
    ""106.58.212.201"": 6,
    ""120.48.64.252"": 3,
    ""106.58.165.88"": 3,
    ""106.58.178.111"": 3,
    ""45.141.26.52"": 12,
    ""205.210.31.111"": 9,
    ""121.5.74.35"": 3,
    ""116.73.243.187"": 12,
    ""113.108.8.125"": 9,
    ""101.32.116.25"": 12,
    ""82.156.150.3"": 3,
    ""12.193.127.18"": 3,
    ""124.67.115.210"": 18,
    ""62.204.41.195"": 12,
    ""101.32.126.66"": 3,
    ""37.19.200.113"": 12,
    ""208.53.61.115"": 12,
    ""106.58.210.135"": 12,
    ""52.80.19.192"": 3,
    ""103.210.237.233"": 9,
    ""61.171.113.104"": 3,
    ""211.91.60.69"": 15,
    ""106.58.211.156"": 6,
    ""43.134.0.225"": 3,
    ""115.236.75.10"": 9,
    ""106.58.217.61"": 9,
    ""94.232.45.92"": 9,
    ""113.30.188.235"": 3,
    ""203.56.4.242"": 15,
    ""49.232.169.162"": 6,
    ""196.190.117.7"": 3,
    ""139.59.185.252"": 3,
    ""212.70.149.146"": 15,
    ""101.33.204.231"": 6,
    ""106.116.169.71"": 3,
    ""150.223.46.21"": 12,
    ""103.245.195.202"": 9,
    ""140.246.215.173"": 21,
    ""134.175.53.186"": 3,
    ""212.70.149.142"": 12,
    ""185.170.144.3"": 6,
    ""43.243.136.202"": 24,
    ""45.227.254.55"": 9,
    ""87.229.115.172"": 3,
    ""1.82.238.130"": 6,
    ""198.235.24.174"": 9,
    ""20.231.212.228"": 6,
    ""43.133.56.30"": 12,
    ""106.58.219.212"": 6,
    ""203.57.39.224"": 3,
    ""125.230.236.203"": 6,
    ""42.193.192.91"": 9,
    ""118.193.44.118"": 3,
    ""106.58.221.13"": 6,
    ""117.33.174.14"": 3,
    ""209.15.109.35"": 3,
    ""43.134.33.208"": 6,
    ""104.248.79.165"": 12,
    ""138.68.52.19"": 3,
    ""45.141.26.152"": 3,
    ""111.229.184.146"": 3,
    ""42.51.13.226"": 9,
    ""45.141.26.68"": 9,
    ""36.111.146.78"": 6,
    ""111.231.15.224"": 9,
    ""152.32.180.98"": 3,
    ""103.215.81.133"": 6,
    ""119.96.169.74"": 3,
    ""147.135.91.23"": 12,
    ""193.237.214.102"": 9,
    ""193.233.21.155"": 3,
    ""205.210.31.131"": 9,
    ""111.229.232.159"": 3,
    ""125.39.153.133"": 3,
    ""183.134.89.41"": 6,
    ""150.223.35.239"": 9,
    ""178.33.77.209"": 6,
    ""103.44.237.12"": 6,
    ""87.251.75.64"": 3,
    ""61.171.106.140"": 9,
    ""45.93.20.204"": 9,
    ""87.191.150.194"": 6,
    ""106.55.54.44"": 3,
    ""212.186.143.100"": 3,
    ""45.227.254.54"": 6,
    ""106.58.217.149"": 3,
    ""81.19.135.2"": 9,
    ""118.163.247.235"": 3,
    ""122.227.146.74"": 3,
    ""185.180.143.135"": 3,
    ""167.94.146.51"": 3,
    ""222.219.129.74"": 3,
    ""205.210.31.198"": 9,
    ""27.128.239.46"": 3
  },
  ""asn"": {
    ""AS5089"": 12,
    ""AS48721"": 57,
    ""AS148981"": 3,
    ""AS4134"": 183,
    ""AS4837"": 150,
    ""AS58519"": 153,
    ""AS21183"": 12,
    ""AS267784"": 21,
    ""AS701"": 24,
    ""AS56005"": 18,
    ""AS3356"": 27,
    ""AS132203"": 45,
    ""AS9808"": 18,
    ""AS134768"": 33,
    ""AS38365"": 15,
    ""AS3320"": 21,
    ""AS42960"": 9,
    ""AS38283"": 24,
    ""AS63838"": 9,
    ""AS4816"": 9,
    ""AS142299"": 24,
    ""AS396982"": 36,
    ""AS45090"": 48,
    ""AS17488"": 12,
    ""AS7018"": 3,
    ""AS59425"": 12,
    ""AS212238"": 12,
    ""AS17341"": 12,
    ""AS55960"": 3,
    ""AS142403"": 9,
    ""AS4812"": 12,
    ""AS212482"": 9,
    ""AS41436"": 3,
    ""AS24757"": 3,
    ""AS14061"": 18,
    ""AS204428"": 27,
    ""AS9541"": 9,
    ""AS197414"": 6,
    ""AS4808"": 24,
    ""AS29278"": 3,
    ""AS8075"": 6,
    ""AS3462"": 9,
    ""AS135377"": 6,
    ""AS135566"": 3,
    ""AS55933"": 6,
    ""AS58563"": 3,
    ""AS16276"": 18,
    ""AS5378"": 9,
    ""AS56380"": 3,
    ""AS58461"": 6,
    ""AS208091"": 3,
    ""AS57523"": 9,
    ""AS8412"": 3,
    ""AS209588"": 9,
    ""AS211680"": 3,
    ""AS398705"": 3
  },
  ""isp"": {
    ""Virgin Media"": 12,
    ""Flyservers S.A."": 87,
    ""China Telecom"": 3,
    ""Chinanet"": 183,
    ""China Unicom CHINA169 Network"": 12,
    ""Cloud Computing Corporation"": 153,
    ""China Unicom Tianjin Province Network"": 27,
    ""Vodafone Network"": 12,
    ""Verizon Business"": 24,
    ""CNC Group CHINA169 Neimeng Province Network"": 60,
    ""China Unicom Henan Province network"": 18,
    ""Level 3 Communications"": 27,
    ""CHINANET Guangdong province network"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 54,
    ""China Mobile communications corporation"": 18,
    ""CHINANET SHAANXI province Cloud Base network"": 33,
    ""CNC Group CHINA169 Shannxi Province Network"": 27,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 15,
    ""Deutsche Telekom AG"": 21,
    ""VH-GLOBAL"": 9,
    ""CHINANET SiChuan Telecom Internet Data Center"": 24,
    ""Hengyang"": 9,
    ""China Unicom Chongqing Province Network"": 6,
    ""China Telecom (Group)"": 21,
    ""CLOUDFOREST CO., LTD"": 24,
    ""Google LLC"": 36,
    ""China Internet Network Information Center"": 12,
    ""Hathway IP over Cable Internet Access"": 12,
    ""Aceville Pte.ltd"": 27,
    ""AT&T Services, Inc."": 3,
    ""Horizon LLC"": 12,
    ""Datacamp Limited"": 12,
    ""C7 Data Centers"": 12,
    ""Beijing Guanghuan Xinwang Digital"": 3,
    ""Yisu Cloud LTD"": 9,
    ""CHINA UNICOM China169 Backbone"": 15,
    ""Xhost Internet Solutions LP"": 18,
    ""Kamatera Inc"": 3,
    ""Ethiotelecom"": 3,
    ""DIGITALOCEAN"": 3,
    ""SS-Net"": 27,
    ""Cyber Internet Services (Private) Limited"": 9,
    ""China Unicom Beijing Province Network"": 24,
    ""VPS4YOU"": 3,
    ""Microsoft Corporation"": 6,
    ""Chunghwa Telecom Co., Ltd."": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""catCloud"": 3,
    ""DigitalOcean, LLC"": 15,
    ""Cloudie Limited"": 6,
    ""CHINANET Hubei province network"": 3,
    ""OVH SAS"": 18,
    ""Vodafone Broadband Dynamic"": 9,
    ""''IT FRUIT'' S.R.L."": 3,
    ""CNC Group CHINA169 Tianjin Province Network"": 3,
    ""Chang Way Technologies Co. Limited"": 9,
    ""T-Mobile Austria GmbH"": 3,
    ""NSEC - Sistemas Informaticos, S.A."": 3,
    ""Censys, Inc."": 3
  },
  ""org"": {
    ""Unknown"": 195,
    ""Flyservers S.A"": 57,
    ""Chinanet HB"": 6,
    ""Chinanet YN"": 123,
    ""Chinanet SD"": 66,
    ""Chinanet ZJ"": 51,
    ""UAB Host Baltic"": 21,
    ""Chinanet JS"": 27,
    ""Verizon Business"": 24,
    ""Henan Telcom Union Technology Co., LTD"": 18,
    ""Chinanet FJ"": 36,
    ""Fort Wayne Internet, LLC"": 27,
    ""Chinanet GD"": 15,
    ""Tencent Cloud Computing"": 18,
    ""China Mobile"": 18,
    ""Chinanet SN"": 33,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 15,
    ""Deutsche Telekom AG"": 21,
    ""VH Global Limited"": 9,
    ""Chengdu Giant Times Technology Co., Ltd"": 24,
    ""Chinanet HN"": 9,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 9,
    ""Cloudforest CO., LTD"": 24,
    ""Palo Alto Networks, Inc"": 36,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 36,
    ""Hathway Cable and Datacom Limited"": 12,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 12,
    ""ATT SERVICES INC- PEG"": 3,
    ""Horizon LLC"": 12,
    ""Cdnext DAL"": 12,
    ""VegaDigital Solutions"": 12,
    ""AWS EC2 (cn-north-1)"": 3,
    ""HK Kwaifong Group Limited"": 9,
    ""Chinanet SH"": 12,
    ""Unicom"": 15,
    ""Hangzhou xiaoshan public transportation co., LTD"": 9,
    ""Dmitriy Panchenko"": 9,
    ""Cloudwebmanage EU"": 3,
    ""DigitalOcean, LLC"": 18,
    ""4Media Ltd"": 27,
    ""Chinanet HE"": 6,
    ""Cyber Internet Services Pakistan"": 9,
    ""Xhostis"": 6,
    ""Beijing yunchuang communication Technology Co."": 24,
    ""Microsoft Azure Cloud (eastus)"": 6,
    ""Chunghwa Telecom Co. Ltd."": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""National Telecom Public Company Limited"": 3,
    ""UCloud (HK) Holdings Group Limited"": 3,
    ""Netads Online Limited"": 6,
    ""OVH US LLC"": 12,
    ""Thus Group Holdings Limited"": 9,
    ""FOP Dmytro Nedilskyi"": 3,
    ""Beijing Zhiyanghuanya Co., Ltd."": 3,
    ""Ali Mehmet"": 6,
    ""Xhost Internet Solutions"": 3,
    ""Starcrecium Limited"": 9,
    ""LBR GmbH"": 3,
    ""Alviva Holding Limited"": 9,
    ""Ningbo chaoji mamawangluojishu ltd"": 3,
    ""ICG 1 Inap"": 3,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""Scotland"": 12,
    ""Kaunas"": 57,
    ""Hubei"": 6,
    ""Yunnan"": 123,
    ""Beijing"": 78,
    ""Shandong"": 66,
    ""Tianjin"": 30,
    ""Tirana"": 12,
    ""Zhejiang"": 69,
    ""Vilnius"": 21,
    ""Jiangsu"": 27,
    ""New Jersey"": 24,
    ""Inner Mongolia"": 42,
    ""Henan"": 18,
    ""Fujian"": 54,
    ""Indiana"": 27,
    ""Guangdong"": 66,
    ""North West"": 30,
    ""Shanxi"": 27,
    ""Shaanxi"": 33,
    ""Bavaria"": 15,
    ""Central and Western District"": 18,
    ""Sichuan"": 24,
    ""Hunan"": 9,
    ""Chongqing"": 6,
    ""Bangkok"": 27,
    ""California"": 51,
    ""Karnataka"": 12,
    ""Central Singapore"": 15,
    ""Texas"": 15,
    ""Moscow"": 21,
    ""Utah"": 12,
    ""Tsuen Wan District"": 9,
    ""Shanghai"": 27,
    ""Perm Krai"": 9,
    ""North Holland"": 12,
    ""Addis Ababa"": 3,
    ""England"": 12,
    ""Plovdiv"": 27,
    ""Hebei"": 6,
    ""Sindh"": 9,
    ""Budapest"": 3,
    ""Virginia"": 18,
    ""Taichung City"": 6,
    ""Dubai"": 3,
    ""Chi\u0219in\u0103u Municipality"": 3,
    ""Hauts-de-France"": 6,
    ""Rheinland-Pfalz"": 6,
    ""Vienna"": 3,
    ""Hesse"": 12,
    ""Tainan"": 3,
    ""Illinois"": 3
  },
  ""country"": {
    ""United Kingdom"": 24,
    ""Lithuania"": 78,
    ""China"": 711,
    ""Albania"": 12,
    ""United States"": 150,
    ""Singapore"": 45,
    ""Germany"": 33,
    ""Hong Kong"": 27,
    ""Thailand"": 27,
    ""India"": 12,
    ""Russia"": 30,
    ""The Netherlands"": 12,
    ""Ethiopia"": 3,
    ""Bulgaria"": 27,
    ""Pakistan"": 9,
    ""Hungary"": 3,
    ""Taiwan"": 9,
    ""United Arab Emirates"": 3,
    ""Moldova"": 3,
    ""France"": 6,
    ""Austria"": 3
  },
  ""account"": {
    ""142.93.8.59"": 999,
    ""Test"": 54,
    ""EKiLiVkHR"": 3,
    ""ubHrYg"": 3,
    ""uLwtCa"": 3,
    ""hello"": 36,
    ""Domain"": 33,
    ""Administr"": 39,
    ""(empty)"": 9,
    ""jfFpuRXIU"": 3,
    ""LeRZhT"": 3,
    ""TFIYcT"": 3,
    ""cjkz7jq0"": 12,
    ""beio"": 3,
    ""Administrator"": 3,
    ""rBQiRhqXU"": 3,
    ""UAbykW"": 3,
    ""VkRODE"": 3,
    ""jzvlcmei"": 3,
    ""PuEjJccaY"": 3,
    ""IUSZpV"": 3,
    ""JZXjgE"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1227
  },
  ""client_build"": {
    ""Unknown"": 1227
  },
  ""client_name"": {
    ""Unknown"": 1227
  },
  ""ip_type"": {
    ""Unknown"": 816,
    ""hosting"": 309,
    ""proxy"": 51,
    ""mobile"": 24,
    ""hosting & proxy"": 27
  }
}"
FwQ3picB,2024-01-25_stats.json,rdp_snitch,JSON,Thursday 25th of January 2024 06:16:10 PM CDT,"{
  ""ip"": {
    ""82.32.227.142"": 8,
    ""194.165.17.21"": 30,
    ""111.173.80.148"": 2,
    ""106.58.164.84"": 6,
    ""103.240.84.186"": 8,
    ""150.223.32.106"": 6,
    ""111.161.41.132"": 18,
    ""109.69.7.157"": 8,
    ""36.111.174.56"": 30,
    ""45.227.254.8"": 4,
    ""106.58.166.180"": 10,
    ""222.93.104.67"": 8,
    ""74.105.22.131"": 16,
    ""124.67.254.109"": 28,
    ""218.90.120.19"": 10,
    ""42.51.39.209"": 6,
    ""203.56.40.167"": 12,
    ""216.202.197.116"": 18,
    ""106.58.178.2"": 6,
    ""106.58.164.95"": 6,
    ""14.18.41.26"": 4,
    ""43.134.83.223"": 6,
    ""117.145.27.42"": 12,
    ""219.144.67.36"": 16,
    ""113.200.222.57"": 18,
    ""182.61.55.68"": 8,
    ""194.165.16.11"": 8,
    ""80.151.251.216"": 10,
    ""222.219.240.13"": 10,
    ""150.223.76.57"": 6,
    ""150.223.66.55"": 4,
    ""185.106.176.8"": 6,
    ""110.40.34.231"": 16,
    ""106.58.215.167"": 6,
    ""175.4.26.179"": 6,
    ""27.8.44.19"": 4,
    ""103.39.222.217"": 2,
    ""106.58.212.201"": 4,
    ""120.48.64.252"": 2,
    ""106.58.165.88"": 2,
    ""106.58.178.111"": 2,
    ""45.141.26.52"": 8,
    ""205.210.31.111"": 6,
    ""121.5.74.35"": 2,
    ""116.73.243.187"": 8,
    ""113.108.8.125"": 6,
    ""101.32.116.25"": 8,
    ""82.156.150.3"": 2,
    ""12.193.127.18"": 2,
    ""124.67.115.210"": 12,
    ""62.204.41.195"": 8,
    ""101.32.126.66"": 2,
    ""37.19.200.113"": 8,
    ""208.53.61.115"": 8,
    ""106.58.210.135"": 8,
    ""52.80.19.192"": 2,
    ""103.210.237.233"": 6,
    ""61.171.113.104"": 2,
    ""211.91.60.69"": 10,
    ""106.58.211.156"": 4,
    ""43.134.0.225"": 2,
    ""115.236.75.10"": 6,
    ""106.58.217.61"": 6,
    ""94.232.45.92"": 6,
    ""113.30.188.235"": 2,
    ""203.56.4.242"": 10,
    ""49.232.169.162"": 4,
    ""196.190.117.7"": 2,
    ""139.59.185.252"": 2,
    ""212.70.149.146"": 10,
    ""101.33.204.231"": 4,
    ""106.116.169.71"": 2,
    ""150.223.46.21"": 8,
    ""103.245.195.202"": 6,
    ""140.246.215.173"": 14,
    ""134.175.53.186"": 2,
    ""212.70.149.142"": 8,
    ""185.170.144.3"": 4,
    ""43.243.136.202"": 16,
    ""45.227.254.55"": 6,
    ""87.229.115.172"": 2,
    ""1.82.238.130"": 4,
    ""198.235.24.174"": 6,
    ""20.231.212.228"": 4,
    ""43.133.56.30"": 8,
    ""106.58.219.212"": 4,
    ""203.57.39.224"": 2,
    ""125.230.236.203"": 4,
    ""42.193.192.91"": 6,
    ""118.193.44.118"": 2,
    ""106.58.221.13"": 4,
    ""117.33.174.14"": 2,
    ""209.15.109.35"": 2,
    ""43.134.33.208"": 4,
    ""104.248.79.165"": 8,
    ""138.68.52.19"": 2,
    ""45.141.26.152"": 2,
    ""111.229.184.146"": 2,
    ""42.51.13.226"": 6,
    ""45.141.26.68"": 6,
    ""36.111.146.78"": 4,
    ""111.231.15.224"": 6,
    ""152.32.180.98"": 2,
    ""103.215.81.133"": 4,
    ""119.96.169.74"": 2,
    ""147.135.91.23"": 8,
    ""193.237.214.102"": 6,
    ""193.233.21.155"": 2,
    ""205.210.31.131"": 6,
    ""111.229.232.159"": 2,
    ""125.39.153.133"": 2,
    ""183.134.89.41"": 4,
    ""150.223.35.239"": 6,
    ""178.33.77.209"": 4,
    ""103.44.237.12"": 4,
    ""87.251.75.64"": 2,
    ""61.171.106.140"": 6,
    ""45.93.20.204"": 6,
    ""87.191.150.194"": 4,
    ""106.55.54.44"": 2,
    ""212.186.143.100"": 2,
    ""45.227.254.54"": 4,
    ""106.58.217.149"": 2,
    ""81.19.135.2"": 6,
    ""118.163.247.235"": 2,
    ""122.227.146.74"": 2,
    ""185.180.143.135"": 2,
    ""167.94.146.51"": 2,
    ""222.219.129.74"": 2,
    ""205.210.31.198"": 6,
    ""27.128.239.46"": 2
  },
  ""asn"": {
    ""AS5089"": 8,
    ""AS48721"": 38,
    ""AS148981"": 2,
    ""AS4134"": 122,
    ""AS4837"": 100,
    ""AS58519"": 102,
    ""AS21183"": 8,
    ""AS267784"": 14,
    ""AS701"": 16,
    ""AS56005"": 12,
    ""AS3356"": 18,
    ""AS132203"": 30,
    ""AS9808"": 12,
    ""AS134768"": 22,
    ""AS38365"": 10,
    ""AS3320"": 14,
    ""AS42960"": 6,
    ""AS38283"": 16,
    ""AS63838"": 6,
    ""AS4816"": 6,
    ""AS142299"": 16,
    ""AS396982"": 24,
    ""AS45090"": 32,
    ""AS17488"": 8,
    ""AS7018"": 2,
    ""AS59425"": 8,
    ""AS212238"": 8,
    ""AS17341"": 8,
    ""AS55960"": 2,
    ""AS142403"": 6,
    ""AS4812"": 8,
    ""AS212482"": 6,
    ""AS41436"": 2,
    ""AS24757"": 2,
    ""AS14061"": 12,
    ""AS204428"": 18,
    ""AS9541"": 6,
    ""AS197414"": 4,
    ""AS4808"": 16,
    ""AS29278"": 2,
    ""AS8075"": 4,
    ""AS3462"": 6,
    ""AS135377"": 4,
    ""AS135566"": 2,
    ""AS55933"": 4,
    ""AS58563"": 2,
    ""AS16276"": 12,
    ""AS5378"": 6,
    ""AS56380"": 2,
    ""AS58461"": 4,
    ""AS208091"": 2,
    ""AS57523"": 6,
    ""AS8412"": 2,
    ""AS209588"": 6,
    ""AS211680"": 2,
    ""AS398705"": 2
  },
  ""isp"": {
    ""Virgin Media"": 8,
    ""Flyservers S.A."": 58,
    ""China Telecom"": 2,
    ""Chinanet"": 122,
    ""China Unicom CHINA169 Network"": 8,
    ""Cloud Computing Corporation"": 102,
    ""China Unicom Tianjin Province Network"": 18,
    ""Vodafone Network"": 8,
    ""Verizon Business"": 16,
    ""CNC Group CHINA169 Neimeng Province Network"": 40,
    ""China Unicom Henan Province network"": 12,
    ""Level 3 Communications"": 18,
    ""CHINANET Guangdong province network"": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 36,
    ""China Mobile communications corporation"": 12,
    ""CHINANET SHAANXI province Cloud Base network"": 22,
    ""CNC Group CHINA169 Shannxi Province Network"": 18,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 10,
    ""Deutsche Telekom AG"": 14,
    ""VH-GLOBAL"": 6,
    ""CHINANET SiChuan Telecom Internet Data Center"": 16,
    ""Hengyang"": 6,
    ""China Unicom Chongqing Province Network"": 4,
    ""China Telecom (Group)"": 14,
    ""CLOUDFOREST CO., LTD"": 16,
    ""Google LLC"": 24,
    ""China Internet Network Information Center"": 8,
    ""Hathway IP over Cable Internet Access"": 8,
    ""Aceville Pte.ltd"": 18,
    ""AT&T Services, Inc."": 2,
    ""Horizon LLC"": 8,
    ""Datacamp Limited"": 8,
    ""C7 Data Centers"": 8,
    ""Beijing Guanghuan Xinwang Digital"": 2,
    ""Yisu Cloud LTD"": 6,
    ""CHINA UNICOM China169 Backbone"": 10,
    ""Xhost Internet Solutions LP"": 12,
    ""Kamatera Inc"": 2,
    ""Ethiotelecom"": 2,
    ""DIGITALOCEAN"": 2,
    ""SS-Net"": 18,
    ""Cyber Internet Services (Private) Limited"": 6,
    ""China Unicom Beijing Province Network"": 16,
    ""VPS4YOU"": 2,
    ""Microsoft Corporation"": 4,
    ""Chunghwa Telecom Co., Ltd."": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""catCloud"": 2,
    ""DigitalOcean, LLC"": 10,
    ""Cloudie Limited"": 4,
    ""CHINANET Hubei province network"": 2,
    ""OVH SAS"": 12,
    ""Vodafone Broadband Dynamic"": 6,
    ""''IT FRUIT'' S.R.L."": 2,
    ""CNC Group CHINA169 Tianjin Province Network"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""T-Mobile Austria GmbH"": 2,
    ""NSEC - Sistemas Informaticos, S.A."": 2,
    ""Censys, Inc."": 2
  },
  ""org"": {
    ""Unknown"": 130,
    ""Flyservers S.A"": 38,
    ""Chinanet HB"": 4,
    ""Chinanet YN"": 82,
    ""Chinanet SD"": 44,
    ""Chinanet ZJ"": 34,
    ""UAB Host Baltic"": 14,
    ""Chinanet JS"": 18,
    ""Verizon Business"": 16,
    ""Henan Telcom Union Technology Co., LTD"": 12,
    ""Chinanet FJ"": 24,
    ""Fort Wayne Internet, LLC"": 18,
    ""Chinanet GD"": 10,
    ""Tencent Cloud Computing"": 12,
    ""China Mobile"": 12,
    ""Chinanet SN"": 22,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 10,
    ""Deutsche Telekom AG"": 14,
    ""VH Global Limited"": 6,
    ""Chengdu Giant Times Technology Co., Ltd"": 16,
    ""Chinanet HN"": 6,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 6,
    ""Cloudforest CO., LTD"": 16,
    ""Palo Alto Networks, Inc"": 24,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 24,
    ""Hathway Cable and Datacom Limited"": 8,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 8,
    ""ATT SERVICES INC- PEG"": 2,
    ""Horizon LLC"": 8,
    ""Cdnext DAL"": 8,
    ""VegaDigital Solutions"": 8,
    ""AWS EC2 (cn-north-1)"": 2,
    ""HK Kwaifong Group Limited"": 6,
    ""Chinanet SH"": 8,
    ""Unicom"": 10,
    ""Hangzhou xiaoshan public transportation co., LTD"": 6,
    ""Dmitriy Panchenko"": 6,
    ""Cloudwebmanage EU"": 2,
    ""DigitalOcean, LLC"": 12,
    ""4Media Ltd"": 18,
    ""Chinanet HE"": 4,
    ""Cyber Internet Services Pakistan"": 6,
    ""Xhostis"": 4,
    ""Beijing yunchuang communication Technology Co."": 16,
    ""Microsoft Azure Cloud (eastus)"": 4,
    ""Chunghwa Telecom Co. Ltd."": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""National Telecom Public Company Limited"": 2,
    ""UCloud (HK) Holdings Group Limited"": 2,
    ""Netads Online Limited"": 4,
    ""OVH US LLC"": 8,
    ""Thus Group Holdings Limited"": 6,
    ""FOP Dmytro Nedilskyi"": 2,
    ""Beijing Zhiyanghuanya Co., Ltd."": 2,
    ""Ali Mehmet"": 4,
    ""Xhost Internet Solutions"": 2,
    ""Starcrecium Limited"": 6,
    ""LBR GmbH"": 2,
    ""Alviva Holding Limited"": 6,
    ""Ningbo chaoji mamawangluojishu ltd"": 2,
    ""ICG 1 Inap"": 2,
    ""Censys, Inc."": 2
  },
  ""regionName"": {
    ""Scotland"": 8,
    ""Kaunas"": 38,
    ""Hubei"": 4,
    ""Yunnan"": 82,
    ""Beijing"": 52,
    ""Shandong"": 44,
    ""Tianjin"": 20,
    ""Tirana"": 8,
    ""Zhejiang"": 46,
    ""Vilnius"": 14,
    ""Jiangsu"": 18,
    ""New Jersey"": 16,
    ""Inner Mongolia"": 28,
    ""Henan"": 12,
    ""Fujian"": 36,
    ""Indiana"": 18,
    ""Guangdong"": 44,
    ""North West"": 20,
    ""Shanxi"": 18,
    ""Shaanxi"": 22,
    ""Bavaria"": 10,
    ""Central and Western District"": 12,
    ""Sichuan"": 16,
    ""Hunan"": 6,
    ""Chongqing"": 4,
    ""Bangkok"": 18,
    ""California"": 34,
    ""Karnataka"": 8,
    ""Central Singapore"": 10,
    ""Texas"": 10,
    ""Moscow"": 14,
    ""Utah"": 8,
    ""Tsuen Wan District"": 6,
    ""Shanghai"": 18,
    ""Perm Krai"": 6,
    ""North Holland"": 8,
    ""Addis Ababa"": 2,
    ""England"": 8,
    ""Plovdiv"": 18,
    ""Hebei"": 4,
    ""Sindh"": 6,
    ""Budapest"": 2,
    ""Virginia"": 12,
    ""Taichung City"": 4,
    ""Dubai"": 2,
    ""Chi\u0219in\u0103u Municipality"": 2,
    ""Hauts-de-France"": 4,
    ""Rheinland-Pfalz"": 4,
    ""Vienna"": 2,
    ""Hesse"": 8,
    ""Tainan"": 2,
    ""Illinois"": 2
  },
  ""country"": {
    ""United Kingdom"": 16,
    ""Lithuania"": 52,
    ""China"": 474,
    ""Albania"": 8,
    ""United States"": 100,
    ""Singapore"": 30,
    ""Germany"": 22,
    ""Hong Kong"": 18,
    ""Thailand"": 18,
    ""India"": 8,
    ""Russia"": 20,
    ""The Netherlands"": 8,
    ""Ethiopia"": 2,
    ""Bulgaria"": 18,
    ""Pakistan"": 6,
    ""Hungary"": 2,
    ""Taiwan"": 6,
    ""United Arab Emirates"": 2,
    ""Moldova"": 2,
    ""France"": 4,
    ""Austria"": 2
  },
  ""account"": {
    ""142.93.8.59"": 666,
    ""Test"": 36,
    ""EKiLiVkHR"": 2,
    ""ubHrYg"": 2,
    ""uLwtCa"": 2,
    ""hello"": 24,
    ""Domain"": 22,
    ""Administr"": 26,
    ""(empty)"": 6,
    ""jfFpuRXIU"": 2,
    ""LeRZhT"": 2,
    ""TFIYcT"": 2,
    ""cjkz7jq0"": 8,
    ""beio"": 2,
    ""Administrator"": 2,
    ""rBQiRhqXU"": 2,
    ""UAbykW"": 2,
    ""VkRODE"": 2,
    ""jzvlcmei"": 2,
    ""PuEjJccaY"": 2,
    ""IUSZpV"": 2,
    ""JZXjgE"": 2
  },
  ""keyboard"": {
    ""Unknown"": 818
  },
  ""client_build"": {
    ""Unknown"": 818
  },
  ""client_name"": {
    ""Unknown"": 818
  },
  ""ip_type"": {
    ""Unknown"": 544,
    ""hosting"": 206,
    ""proxy"": 34,
    ""mobile"": 16,
    ""hosting & proxy"": 18
  }
}"
RnyAiPmp,2024-01-25_stats.json,rdp_snitch,JSON,Thursday 25th of January 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""82.32.227.142"": 4,
    ""194.165.17.21"": 15,
    ""111.173.80.148"": 1,
    ""106.58.164.84"": 3,
    ""103.240.84.186"": 4,
    ""150.223.32.106"": 3,
    ""111.161.41.132"": 9,
    ""109.69.7.157"": 4,
    ""36.111.174.56"": 15,
    ""45.227.254.8"": 2,
    ""106.58.166.180"": 5,
    ""222.93.104.67"": 4,
    ""74.105.22.131"": 8,
    ""124.67.254.109"": 14,
    ""218.90.120.19"": 5,
    ""42.51.39.209"": 3,
    ""203.56.40.167"": 6,
    ""216.202.197.116"": 9,
    ""106.58.178.2"": 3,
    ""106.58.164.95"": 3,
    ""14.18.41.26"": 2,
    ""43.134.83.223"": 3,
    ""117.145.27.42"": 6,
    ""219.144.67.36"": 8,
    ""113.200.222.57"": 9,
    ""182.61.55.68"": 4,
    ""194.165.16.11"": 4,
    ""80.151.251.216"": 5,
    ""222.219.240.13"": 5,
    ""150.223.76.57"": 3,
    ""150.223.66.55"": 2,
    ""185.106.176.8"": 3,
    ""110.40.34.231"": 8,
    ""106.58.215.167"": 3,
    ""175.4.26.179"": 3,
    ""27.8.44.19"": 2,
    ""103.39.222.217"": 1,
    ""106.58.212.201"": 2,
    ""120.48.64.252"": 1,
    ""106.58.165.88"": 1,
    ""106.58.178.111"": 1,
    ""45.141.26.52"": 4,
    ""205.210.31.111"": 3,
    ""121.5.74.35"": 1,
    ""116.73.243.187"": 4,
    ""113.108.8.125"": 3,
    ""101.32.116.25"": 4,
    ""82.156.150.3"": 1,
    ""12.193.127.18"": 1,
    ""124.67.115.210"": 6,
    ""62.204.41.195"": 4,
    ""101.32.126.66"": 1,
    ""37.19.200.113"": 4,
    ""208.53.61.115"": 4,
    ""106.58.210.135"": 4,
    ""52.80.19.192"": 1,
    ""103.210.237.233"": 3,
    ""61.171.113.104"": 1,
    ""211.91.60.69"": 5,
    ""106.58.211.156"": 2,
    ""43.134.0.225"": 1,
    ""115.236.75.10"": 3,
    ""106.58.217.61"": 3,
    ""94.232.45.92"": 3,
    ""113.30.188.235"": 1,
    ""203.56.4.242"": 5,
    ""49.232.169.162"": 2,
    ""196.190.117.7"": 1,
    ""139.59.185.252"": 1,
    ""212.70.149.146"": 5,
    ""101.33.204.231"": 2,
    ""106.116.169.71"": 1,
    ""150.223.46.21"": 4,
    ""103.245.195.202"": 3,
    ""140.246.215.173"": 7,
    ""134.175.53.186"": 1,
    ""212.70.149.142"": 4,
    ""185.170.144.3"": 2,
    ""43.243.136.202"": 8,
    ""45.227.254.55"": 3,
    ""87.229.115.172"": 1,
    ""1.82.238.130"": 2,
    ""198.235.24.174"": 3,
    ""20.231.212.228"": 2,
    ""43.133.56.30"": 4,
    ""106.58.219.212"": 2,
    ""203.57.39.224"": 1,
    ""125.230.236.203"": 2,
    ""42.193.192.91"": 3,
    ""118.193.44.118"": 1,
    ""106.58.221.13"": 2,
    ""117.33.174.14"": 1,
    ""209.15.109.35"": 1,
    ""43.134.33.208"": 2,
    ""104.248.79.165"": 4,
    ""138.68.52.19"": 1,
    ""45.141.26.152"": 1,
    ""111.229.184.146"": 1,
    ""42.51.13.226"": 3,
    ""45.141.26.68"": 3,
    ""36.111.146.78"": 2,
    ""111.231.15.224"": 3,
    ""152.32.180.98"": 1,
    ""103.215.81.133"": 2,
    ""119.96.169.74"": 1,
    ""147.135.91.23"": 4,
    ""193.237.214.102"": 3,
    ""193.233.21.155"": 1,
    ""205.210.31.131"": 3,
    ""111.229.232.159"": 1,
    ""125.39.153.133"": 1,
    ""183.134.89.41"": 2,
    ""150.223.35.239"": 3,
    ""178.33.77.209"": 2,
    ""103.44.237.12"": 2,
    ""87.251.75.64"": 1,
    ""61.171.106.140"": 3,
    ""45.93.20.204"": 3,
    ""87.191.150.194"": 2,
    ""106.55.54.44"": 1,
    ""212.186.143.100"": 1,
    ""45.227.254.54"": 2,
    ""106.58.217.149"": 1,
    ""81.19.135.2"": 3,
    ""118.163.247.235"": 1,
    ""122.227.146.74"": 1,
    ""185.180.143.135"": 1,
    ""167.94.146.51"": 1,
    ""222.219.129.74"": 1,
    ""205.210.31.198"": 3,
    ""27.128.239.46"": 1
  },
  ""asn"": {
    ""AS5089"": 4,
    ""AS48721"": 19,
    ""AS148981"": 1,
    ""AS4134"": 61,
    ""AS4837"": 50,
    ""AS58519"": 51,
    ""AS21183"": 4,
    ""AS267784"": 7,
    ""AS701"": 8,
    ""AS56005"": 6,
    ""AS3356"": 9,
    ""AS132203"": 15,
    ""AS9808"": 6,
    ""AS134768"": 11,
    ""AS38365"": 5,
    ""AS3320"": 7,
    ""AS42960"": 3,
    ""AS38283"": 8,
    ""AS63838"": 3,
    ""AS4816"": 3,
    ""AS142299"": 8,
    ""AS396982"": 12,
    ""AS45090"": 16,
    ""AS17488"": 4,
    ""AS7018"": 1,
    ""AS59425"": 4,
    ""AS212238"": 4,
    ""AS17341"": 4,
    ""AS55960"": 1,
    ""AS142403"": 3,
    ""AS4812"": 4,
    ""AS212482"": 3,
    ""AS41436"": 1,
    ""AS24757"": 1,
    ""AS14061"": 6,
    ""AS204428"": 9,
    ""AS9541"": 3,
    ""AS197414"": 2,
    ""AS4808"": 8,
    ""AS29278"": 1,
    ""AS8075"": 2,
    ""AS3462"": 3,
    ""AS135377"": 2,
    ""AS135566"": 1,
    ""AS55933"": 2,
    ""AS58563"": 1,
    ""AS16276"": 6,
    ""AS5378"": 3,
    ""AS56380"": 1,
    ""AS58461"": 2,
    ""AS208091"": 1,
    ""AS57523"": 3,
    ""AS8412"": 1,
    ""AS209588"": 3,
    ""AS211680"": 1,
    ""AS398705"": 1
  },
  ""isp"": {
    ""Virgin Media"": 4,
    ""Flyservers S.A."": 29,
    ""China Telecom"": 1,
    ""Chinanet"": 61,
    ""China Unicom CHINA169 Network"": 4,
    ""Cloud Computing Corporation"": 51,
    ""China Unicom Tianjin Province Network"": 9,
    ""Vodafone Network"": 4,
    ""Verizon Business"": 8,
    ""CNC Group CHINA169 Neimeng Province Network"": 20,
    ""China Unicom Henan Province network"": 6,
    ""Level 3 Communications"": 9,
    ""CHINANET Guangdong province network"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 18,
    ""China Mobile communications corporation"": 6,
    ""CHINANET SHAANXI province Cloud Base network"": 11,
    ""CNC Group CHINA169 Shannxi Province Network"": 9,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 5,
    ""Deutsche Telekom AG"": 7,
    ""VH-GLOBAL"": 3,
    ""CHINANET SiChuan Telecom Internet Data Center"": 8,
    ""Hengyang"": 3,
    ""China Unicom Chongqing Province Network"": 2,
    ""China Telecom (Group)"": 7,
    ""CLOUDFOREST CO., LTD"": 8,
    ""Google LLC"": 12,
    ""China Internet Network Information Center"": 4,
    ""Hathway IP over Cable Internet Access"": 4,
    ""Aceville Pte.ltd"": 9,
    ""AT&T Services, Inc."": 1,
    ""Horizon LLC"": 4,
    ""Datacamp Limited"": 4,
    ""C7 Data Centers"": 4,
    ""Beijing Guanghuan Xinwang Digital"": 1,
    ""Yisu Cloud LTD"": 3,
    ""CHINA UNICOM China169 Backbone"": 5,
    ""Xhost Internet Solutions LP"": 6,
    ""Kamatera Inc"": 1,
    ""Ethiotelecom"": 1,
    ""DIGITALOCEAN"": 1,
    ""SS-Net"": 9,
    ""Cyber Internet Services (Private) Limited"": 3,
    ""China Unicom Beijing Province Network"": 8,
    ""VPS4YOU"": 1,
    ""Microsoft Corporation"": 2,
    ""Chunghwa Telecom Co., Ltd."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""catCloud"": 1,
    ""DigitalOcean, LLC"": 5,
    ""Cloudie Limited"": 2,
    ""CHINANET Hubei province network"": 1,
    ""OVH SAS"": 6,
    ""Vodafone Broadband Dynamic"": 3,
    ""''IT FRUIT'' S.R.L."": 1,
    ""CNC Group CHINA169 Tianjin Province Network"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""T-Mobile Austria GmbH"": 1,
    ""NSEC - Sistemas Informaticos, S.A."": 1,
    ""Censys, Inc."": 1
  },
  ""org"": {
    ""Unknown"": 65,
    ""Flyservers S.A"": 19,
    ""Chinanet HB"": 2,
    ""Chinanet YN"": 41,
    ""Chinanet SD"": 22,
    ""Chinanet ZJ"": 17,
    ""UAB Host Baltic"": 7,
    ""Chinanet JS"": 9,
    ""Verizon Business"": 8,
    ""Henan Telcom Union Technology Co., LTD"": 6,
    ""Chinanet FJ"": 12,
    ""Fort Wayne Internet, LLC"": 9,
    ""Chinanet GD"": 5,
    ""Tencent Cloud Computing"": 6,
    ""China Mobile"": 6,
    ""Chinanet SN"": 11,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 5,
    ""Deutsche Telekom AG"": 7,
    ""VH Global Limited"": 3,
    ""Chengdu Giant Times Technology Co., Ltd"": 8,
    ""Chinanet HN"": 3,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 3,
    ""Cloudforest CO., LTD"": 8,
    ""Palo Alto Networks, Inc"": 12,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 12,
    ""Hathway Cable and Datacom Limited"": 4,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 4,
    ""ATT SERVICES INC- PEG"": 1,
    ""Horizon LLC"": 4,
    ""Cdnext DAL"": 4,
    ""VegaDigital Solutions"": 4,
    ""AWS EC2 (cn-north-1)"": 1,
    ""HK Kwaifong Group Limited"": 3,
    ""Chinanet SH"": 4,
    ""Unicom"": 5,
    ""Hangzhou xiaoshan public transportation co., LTD"": 3,
    ""Dmitriy Panchenko"": 3,
    ""Cloudwebmanage EU"": 1,
    ""DigitalOcean, LLC"": 6,
    ""4Media Ltd"": 9,
    ""Chinanet HE"": 2,
    ""Cyber Internet Services Pakistan"": 3,
    ""Xhostis"": 2,
    ""Beijing yunchuang communication Technology Co."": 8,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Chunghwa Telecom Co. Ltd."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""National Telecom Public Company Limited"": 1,
    ""UCloud (HK) Holdings Group Limited"": 1,
    ""Netads Online Limited"": 2,
    ""OVH US LLC"": 4,
    ""Thus Group Holdings Limited"": 3,
    ""FOP Dmytro Nedilskyi"": 1,
    ""Beijing Zhiyanghuanya Co., Ltd."": 1,
    ""Ali Mehmet"": 2,
    ""Xhost Internet Solutions"": 1,
    ""Starcrecium Limited"": 3,
    ""LBR GmbH"": 1,
    ""Alviva Holding Limited"": 3,
    ""Ningbo chaoji mamawangluojishu ltd"": 1,
    ""ICG 1 Inap"": 1,
    ""Censys, Inc."": 1
  },
  ""regionName"": {
    ""Scotland"": 4,
    ""Kaunas"": 19,
    ""Hubei"": 2,
    ""Yunnan"": 41,
    ""Beijing"": 26,
    ""Shandong"": 22,
    ""Tianjin"": 10,
    ""Tirana"": 4,
    ""Zhejiang"": 23,
    ""Vilnius"": 7,
    ""Jiangsu"": 9,
    ""New Jersey"": 8,
    ""Inner Mongolia"": 14,
    ""Henan"": 6,
    ""Fujian"": 18,
    ""Indiana"": 9,
    ""Guangdong"": 22,
    ""North West"": 10,
    ""Shanxi"": 9,
    ""Shaanxi"": 11,
    ""Bavaria"": 5,
    ""Central and Western District"": 6,
    ""Sichuan"": 8,
    ""Hunan"": 3,
    ""Chongqing"": 2,
    ""Bangkok"": 9,
    ""California"": 17,
    ""Karnataka"": 4,
    ""Central Singapore"": 5,
    ""Texas"": 5,
    ""Moscow"": 7,
    ""Utah"": 4,
    ""Tsuen Wan District"": 3,
    ""Shanghai"": 9,
    ""Perm Krai"": 3,
    ""North Holland"": 4,
    ""Addis Ababa"": 1,
    ""England"": 4,
    ""Plovdiv"": 9,
    ""Hebei"": 2,
    ""Sindh"": 3,
    ""Budapest"": 1,
    ""Virginia"": 6,
    ""Taichung City"": 2,
    ""Dubai"": 1,
    ""Chi\u0219in\u0103u Municipality"": 1,
    ""Hauts-de-France"": 2,
    ""Rheinland-Pfalz"": 2,
    ""Vienna"": 1,
    ""Hesse"": 4,
    ""Tainan"": 1,
    ""Illinois"": 1
  },
  ""country"": {
    ""United Kingdom"": 8,
    ""Lithuania"": 26,
    ""China"": 237,
    ""Albania"": 4,
    ""United States"": 50,
    ""Singapore"": 15,
    ""Germany"": 11,
    ""Hong Kong"": 9,
    ""Thailand"": 9,
    ""India"": 4,
    ""Russia"": 10,
    ""The Netherlands"": 4,
    ""Ethiopia"": 1,
    ""Bulgaria"": 9,
    ""Pakistan"": 3,
    ""Hungary"": 1,
    ""Taiwan"": 3,
    ""United Arab Emirates"": 1,
    ""Moldova"": 1,
    ""France"": 2,
    ""Austria"": 1
  },
  ""account"": {
    ""142.93.8.59"": 333,
    ""Test"": 18,
    ""EKiLiVkHR"": 1,
    ""ubHrYg"": 1,
    ""uLwtCa"": 1,
    ""hello"": 12,
    ""Domain"": 11,
    ""Administr"": 13,
    ""(empty)"": 3,
    ""jfFpuRXIU"": 1,
    ""LeRZhT"": 1,
    ""TFIYcT"": 1,
    ""cjkz7jq0"": 4,
    ""beio"": 1,
    ""Administrator"": 1,
    ""rBQiRhqXU"": 1,
    ""UAbykW"": 1,
    ""VkRODE"": 1,
    ""jzvlcmei"": 1,
    ""PuEjJccaY"": 1,
    ""IUSZpV"": 1,
    ""JZXjgE"": 1
  },
  ""keyboard"": {
    ""Unknown"": 409
  },
  ""client_build"": {
    ""Unknown"": 409
  },
  ""client_name"": {
    ""Unknown"": 409
  },
  ""ip_type"": {
    ""Unknown"": 272,
    ""hosting"": 103,
    ""proxy"": 17,
    ""mobile"": 8,
    ""hosting & proxy"": 9
  }
}"
Jr6dAGtq,Library api.py for no val,chemelli74,Python,Thursday 25th of January 2024 06:04:17 PM CDT,"""""""Support for Comelit SimpleHome.""""""
import asyncio
import functools
from abc import abstractmethod
from dataclasses import dataclass
from datetime import datetime
from http.cookies import SimpleCookie
from typing import Any

import aiohttp
import pint
from yarl import URL

from .const import (
    _LOGGER,
    ALARM_AREA_STATUS,
    ALARM_AREAS,
    ALARM_ZONE_STATUS,
    ALARM_ZONES,
    BRIDGE,
    CLIMATE,
    COVER,
    IRRIGATION,
    LIGHT,
    OTHER,
    SCENARIO,
    SLEEP_BETWEEN_CALLS,
    STATE_COVER,
    STATE_ON,
    VEDO,
    WATT,
    AlarmAreaState,
    AlarmZoneState,
)
from .exceptions import CannotAuthenticate, CannotConnect, CannotRetrieveData


@dataclass
class ComelitSerialBridgeObject:
    """"""Comelit SimpleHome Serial bridge class.""""""

    index: int
    name: str
    status: int
    human_status: str
    type: str
    val: int | dict[Any, Any]  # Temperature or Humidity (CLIMATE)
    protected: int
    zone: str
    power: float
    power_unit: str = WATT


@dataclass
class ComelitVedoAreaObject:
    """"""Comelit SimpleHome VEDO area class.""""""

    index: int
    name: str
    p1: bool
    p2: bool
    ready: bool
    armed: bool
    alarm: bool
    alarm_memory: bool
    sabotage: bool
    anomaly: bool
    in_time: bool
    out_time: bool
    human_status: AlarmAreaState


@dataclass
class ComelitVedoZoneObject:
    """"""Comelit SimpleHome VEDO zone class.""""""

    index: int
    name: str
    status_api: str
    status: int
    human_status: AlarmZoneState


class ComelitCommonApi:
    """"""Common API calls for Comelit SimpleHome devices.""""""

    def __init__(self, host: str, port: int, pin: int) -> None:
        """"""Initialize the session.""""""
        self.host = f""{host}:{port}""
        self.device_pin = pin
        self.base_url = f""http://{host}:{port}""
        self._headers = {
            ""User-Agent"": ""Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"",
            ""Accept-Language"": ""en-GB,en;q=0.5"",
            ""X-Requested-With"": ""XMLHttpRequest"",
            ""Connection"": ""keep-alive"",
        }
        self._session: aiohttp.ClientSession

    async def _get_page_result(
        self, page: str, reply_json: bool = True
    ) -> tuple[int, dict[str, Any]]:
        """"""Return status and data from a GET query.""""""
        _LOGGER.debug(""GET page %s [%s]"", page, self.host)
        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        url = f""{self.base_url}{page}&_={timestamp}""
        try:
            response = await self._session.get(
                url,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during GET"") from exc

        _LOGGER.debug(""GET response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""GET response status {response.status}"")

        if not reply_json:
            _LOGGER.debug(""GET response is empty [%s]"", self.host)
            return response.status, {}

        return response.status, await response.json()

    async def _post_page_result(
        self, page: str, payload: dict[str, Any]
    ) -> SimpleCookie:
        """"""Return status and data from a POST query.""""""
        _LOGGER.debug(""POST page %s [%s]"", page, self.host)
        url = f""{self.base_url}{page}""
        try:
            response = await self._session.post(
                url,
                data=payload,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during POST"") from exc

        _LOGGER.debug(""POST response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""POST response status {response.status}"")

        return response.cookies

    async def _is_session_active(self) -> bool:
        """"""Check if aiohttp session is still active.""""""
        if not hasattr(self, ""_session"") or self._session.closed:
            return False

        return True

    async def _check_logged_in(self, host_type: str) -> bool:
        """"""Check if login is active.""""""

        reply_status, reply_json = await self._get_page_result(""/login.json"")

        _LOGGER.debug(""%s login reply: %s"", host_type, reply_json)
        if host_type == BRIDGE:
            logged = reply_json[""domus""] != ""000000000000""
        else:
            logged = reply_json[""logged""] == 1

        return logged

    @abstractmethod
    async def login(self) -> bool:
        """"""Login to Comelit device.""""""

    async def _login(self, payload: dict[str, Any], host_type: str) -> bool:
        """"""Login into Comelit device.""""""
        _LOGGER.debug(""Logging into host %s [%s]"", self.host, host_type)

        if not await self._is_session_active():
            _LOGGER.debug(""Creating HTTP ClientSession"")
            jar = aiohttp.CookieJar(unsafe=True)
            connector = aiohttp.TCPConnector(force_close=True)
            self._session = aiohttp.ClientSession(cookie_jar=jar, connector=connector)

        if await self._check_logged_in(host_type):
            return True

        cookies = await self._post_page_result(""/login.cgi"", payload)
        _LOGGER.debug(""Cookies for host %s: %s"", self.host, cookies)

        if not cookies:
            _LOGGER.warning(
                ""Authentication failed for host %s [%s]: no cookies received"",
                self.host,
                host_type,
            )
            raise CannotAuthenticate

        self._session.cookie_jar.update_cookies(cookies, URL(self.base_url))

        return await self._check_logged_in(host_type)

    async def logout(self) -> None:
        """"""Comelit Simple Home logout.""""""
        if await self._is_session_active():
            payload = {""logout"": 1}
            await self._post_page_result(""/login.cgi"", payload)
            self._session.cookie_jar.clear()

    async def close(self) -> None:
        """"""Comelit Simple Home close session.""""""
        if await self._is_session_active():
            await self._session.close()


class ComeliteSerialBridgeApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome Serial bridge.""""""

    def __init__(self, host: str, port: int, bridge_pin: int) -> None:
        """"""Initialize the session.""""""
        super().__init__(host, port, bridge_pin)
        self._devices: dict[str, dict[int, ComelitSerialBridgeObject]] = {}

    async def _translate_device_status(self, dev_type: str, dev_status: int) -> str:
        """"""Makes status human readable.""""""

        if dev_type == COVER:
            return STATE_COVER[dev_status]

        return ""on"" if dev_status == STATE_ON else ""off""

    async def set_clima_status(self, index: int, action: str, temp: float = 0) -> bool:
        """"""Set clima status.

        action:
            auto, man, on, off, set

        """"""
        val = f""&val={int(temp*10)}"" if action == ""set"" else None
        reply_status = await self._get_page_result(
            f""/user/action.cgi?clima={index}&thermo={action}{val}"", False
        )
        return reply_status == 200

    async def set_device_status(
        self, device_type: str, index: int, action: int
    ) -> bool:
        """"""Set device action.

        action:
            0 = off/close
            1 = on/open

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?type={device_type}&num{action}={index}"", False
        )
        return reply_status == 200

    async def get_device_status(self, device_type: str, index: int) -> int:
        """"""Get device status.""""""
        reply_status, reply_json = await self._get_page_result(
            f""/user/icon_status.json?type={device_type}""
        )
        _LOGGER.debug(
            ""Device %s[%s] status: %s"", device_type, index, reply_json[""status""][index]
        )
        return reply_json[""status""][index]

    async def login(self) -> bool:
        """"""Login to Serial Bridge device.""""""
        payload = {""dom"": self.device_pin}
        return await self._login(payload, BRIDGE)

    async def get_all_devices(self) -> dict[str, dict[int, ComelitSerialBridgeObject]]:
        """"""Get all connected devices.""""""

        _LOGGER.debug(""Getting all devices for host %s"", self.host)

        loop = asyncio.get_running_loop()
        ureg = await loop.run_in_executor(
            None, functools.partial(pint.UnitRegistry, cache_folder="":auto:"")
        )
        ureg.default_format = ""~""

        for dev_type in (CLIMATE, COVER, LIGHT, IRRIGATION, OTHER, SCENARIO):
            reply_status, reply_json = await self._get_page_result(
                f""/user/icon_desc.json?type={dev_type}""
            )
            _LOGGER.debug(
                ""List of devices of type %s: %s"",
                dev_type,
                reply_json,
            )
            reply_counter_json: dict[str, Any] = {}
            if dev_type == OTHER and reply_json[""num""] > 0:
                reply_status, reply_counter_json = await self._get_page_result(
                    ""/user/counter.json""
                )
            devices = {}
            for i in range(reply_json[""num""]):
                # Guard against ""scenario"", that has 32 devices even if none is configured
                if reply_json[""desc""][i] == """":
                    continue
                status = reply_json[""status""][i]
                power = 0.0
                if instant_values := reply_counter_json.get(""instant""):
                    instant = ureg(instant_values[i])
                    if not instant.dimensionless:
                        power = ureg.convert(
                            instant.magnitude, str(instant.units), WATT
                        )
                dev_info = ComelitSerialBridgeObject(
                    index=i,
                    name=reply_json[""desc""][i],
                    status=status,
                    human_status=await self._translate_device_status(dev_type, status),
                    type=dev_type,
                    val=reply_json[""val""][i],
                    protected=reply_json[""protected""][i],
                    zone=reply_json[""env_desc""][reply_json[""env""][i]]
                    if not dev_type == SCENARIO
                    else """",
                    power=power,
                )
                devices.update({i: dev_info})
            self._devices.update({dev_type: devices})

        return self._devices


class ComelitVedoApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome VEDO alarm.""""""

    _json_data: list[dict[Any, Any]] = [{}, {}, {}, {}, {}]

    async def _translate_zone_status(
        self, zone: ComelitVedoZoneObject
    ) -> AlarmZoneState:
        """"""Translate ZONE status.""""""

        for status in ALARM_ZONE_STATUS:
            if zone.status & status != 0:
                return ALARM_ZONE_STATUS[status]

        return AlarmZoneState.REST

    async def _translate_area_status(
        self, area: ComelitVedoAreaObject
    ) -> AlarmAreaState:
        """"""Translate AREA status.""""""

        for field in ALARM_AREA_STATUS:
            if getattr(area, field):
                return ALARM_AREA_STATUS[field]

        return AlarmAreaState.DISARMED

    async def _create_area_object(
        self, json_area_desc: dict[str, Any], json_area_stat: dict[str, Any], index: int
    ) -> ComelitVedoAreaObject:
        """"""Get area status.""""""

        area = ComelitVedoAreaObject(
            index=index,
            name=json_area_desc[""description""][index],
            p1=json_area_desc[""p1_pres""][index],
            p2=json_area_desc[""p2_pres""][index],
            ready=json_area_stat[""ready""][index],
            armed=json_area_stat[""armed""][index],
            alarm=json_area_stat[""alarm""][index],
            alarm_memory=json_area_stat[""alarm_memory""][index],
            sabotage=json_area_stat[""sabotage""][index],
            anomaly=json_area_stat[""anomaly""][index],
            in_time=json_area_stat[""in_time""][index],
            out_time=json_area_stat[""out_time""][index],
            human_status=AlarmAreaState.UNKNOWN,
        )
        area.human_status = await self._translate_area_status(area)
        _LOGGER.debug(area)
        return area

    async def _create_zone_object(
        self, json_zone_desc: dict[str, Any], json_zone_stat: dict[str, Any], index: int
    ) -> ComelitVedoZoneObject:
        """"""Create zone object.""""""

        status_api = json_zone_stat[""status""].split("","")[index]

        zone = ComelitVedoZoneObject(
            index=index,
            name=json_zone_desc[""description""][index],
            status=int(status_api, 16),
            status_api=status_api,
            human_status=AlarmZoneState.UNKNOWN,
        )
        zone.human_status = await self._translate_zone_status(zone)
        _LOGGER.debug(zone)
        return zone

    async def _async_get_page_data(
        self, desc: str, page: str, present_check: str | int | None = None
    ) -> tuple[bool, dict[str, Any]]:
        """"""Return status and data from a specific GET query.""""""
        reply_status, reply_json = await self._get_page_result(page)
        _LOGGER.debug(""Alarm %s: %s"", desc, reply_json)
        present = present_check in reply_json[""present""] if ""_desc"" in page else True
        return (reply_json[""logged""] and present), reply_json

    async def set_zone_status(
        self, index: int, action: str, force: bool = False
    ) -> bool:
        """"""Set zone action.

        action:
            tot = enable
            dis = disable

        index:
            32 = all zones
             n = specific zone

        force:
            False = don't force action
            True  = force action

        """"""

        reply_status = await self._get_page_result(
            f""/action.cgi?vedo=1&{action}={index}&force={int(force)}"", False
        )
        return reply_status == 200

    async def login(self) -> bool:
        """"""Login to VEDO system.""""""
        payload = {""code"": self.device_pin}
        return await self._login(payload, VEDO)

    async def get_area_status(
        self, area: ComelitVedoAreaObject
    ) -> ComelitVedoAreaObject:
        """"""Get AREA status.""""""

        reply_status, reply_json_area_stat = await self._async_get_page_data(
            ""AREA statistics"", ""/user/area_stat.json""
        )
        description = {""description"": area.name, ""p1_pres"": area.p1, ""p2_pres"": area.p2}

        return await self._create_area_object(
            description, reply_json_area_stat, area.index
        )

    async def get_all_areas_and_zones(
        self,
    ) -> dict[str, dict[int, Any]]:
        """"""Get all VEDO system AREA and ZONE.""""""

        queries: dict[int, dict[str, Any]] = {
            1: {
                ""desc"": ""AREA description"",
                ""page"": ""/user/area_desc.json"",
                ""present"": 1,
            },
            2: {
                ""desc"": ""ZONE description"",
                ""page"": ""/user/zone_desc.json"",
                ""present"": ""1"",
            },
            3: {
                ""desc"": ""AREA statistics"",
                ""page"": ""/user/area_stat.json"",
                ""present"": None,
            },
            4: {
                ""desc"": ""ZONE statistics"",
                ""page"": ""/user/zone_stat.json"",
                ""present"": None,
            },
        }

        for index, info in queries.items():
            desc = info[""desc""]
            page = info[""page""]
            present = info[""present""]
            if ""_desc"" in page and self._json_data[index]:
                _LOGGER.debug(""Data for %s already retrieved, skipping"", desc)
                continue
            _LOGGER.debug(
                ""Sleeping for %s seconds between each call"", SLEEP_BETWEEN_CALLS
            )
            await asyncio.sleep(SLEEP_BETWEEN_CALLS)
            reply_status, reply_json = await self._async_get_page_data(
                desc, page, present
            )
            if not reply_status:
                _LOGGER.info(""Login expired accessing %s, re-login attempt"", desc)
                await self.login()
                await asyncio.sleep(SLEEP_BETWEEN_CALLS)
                reply_status, reply_json = await self._async_get_page_data(
                    desc, page, present
                )
                if not reply_status:
                    raise CannotRetrieveData(
                        ""Login expired and not working after a retry""
                    )
                _LOGGER.info(""Re-login successful"")
            self._json_data.insert(index, reply_json)

        list_areas: list[int] = self._json_data[1][""present""]
        areas = {}
        for i in range(len(list_areas)):
            if not list_areas[i]:
                _LOGGER.debug(""Alarm skipping non present AREA [%i]"", i)
                continue
            area = await self._create_area_object(
                self._json_data[1], self._json_data[3], i
            )
            areas.update({i: area})

        list_zones: list[int] = self._json_data[2][""present""]
        zones = {}
        for i in range(len(list_zones)):
            if not int(list_zones[i]):
                _LOGGER.debug(""Alarm skipping non present ZONE [%i]"", i)
                continue
            zone = await self._create_zone_object(
                self._json_data[2], self._json_data[4], i
            )
            zones.update({i: zone})

        return {ALARM_AREAS: areas, ALARM_ZONES: zones}
"
mVjtyg6u,HA climate simplified,chemelli74,Python,Thursday 25th of January 2024 05:46:26 PM CDT,"""""""Support for climates.""""""
from __future__ import annotations

from enum import StrEnum
from typing import Any

from aiocomelit import ComelitSerialBridgeObject
from aiocomelit.const import CLIMATE

from homeassistant.components.climate import (
    ClimateEntity,
    ClimateEntityFeature,
    HVACAction,
    HVACMode,
    UnitOfTemperature,
)
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_TEMPERATURE, PRECISION_TENTHS
from homeassistant.core import HomeAssistant
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.update_coordinator import CoordinatorEntity

from .const import _LOGGER, DOMAIN
from .coordinator import ComelitSerialBridge


class ClimaAction(StrEnum):
    """"""Serial Bridge clima actions.""""""

    OFF = ""off""
    ON = ""on""
    MANUAL = ""man""
    SET = ""set""
    AUTO = ""auto""


API_STATUS: dict[str, dict[str, Any]] = {
    ""O"": {
        ""action"": ""off"",
        ""hvac_mode"": HVACMode.OFF,
        ""hvac_action"": HVACAction.OFF,
    },
    ""L"": {
        ""action"": ""lower"",
        ""hvac_mode"": HVACMode.COOL,
        ""hvac_action"": HVACAction.COOLING,
    },
    ""U"": {
        ""action"": ""upper"",
        ""hvac_mode"": HVACMode.HEAT,
        ""hvac_action"": HVACAction.HEATING,
    },
}

MODE_TO_ACTION: dict[HVACMode, ClimaAction] = {
    HVACMode.OFF: ClimaAction.OFF,
    HVACMode.AUTO: ClimaAction.AUTO,
    HVACMode.COOL: ClimaAction.MANUAL,
    HVACMode.HEAT: ClimaAction.MANUAL,
}


OFF = ""O""


async def async_setup_entry(
    hass: HomeAssistant,
    config_entry: ConfigEntry,
    async_add_entities: AddEntitiesCallback,
) -> None:
    """"""Set up Comelit climates.""""""

    coordinator: ComelitSerialBridge = hass.data[DOMAIN][config_entry.entry_id]

    async_add_entities(
        ComelitClimateEntity(coordinator, device, config_entry.entry_id)
        for device in coordinator.data[CLIMATE].values()
    )


class ComelitClimateEntity(CoordinatorEntity[ComelitSerialBridge], ClimateEntity):
    """"""Climate device.""""""

    _attr_hvac_modes = [HVACMode.AUTO, HVACMode.COOL, HVACMode.HEAT, HVACMode.OFF]
    _attr_max_temp = 30
    _attr_min_temp = 5
    _attr_supported_features = ClimateEntityFeature.TARGET_TEMPERATURE
    _attr_target_temperature_step = PRECISION_TENTHS
    _attr_temperature_unit = UnitOfTemperature.CELSIUS
    _attr_has_entity_name = True
    _attr_name = None

    def __init__(
        self,
        coordinator: ComelitSerialBridge,
        device: ComelitSerialBridgeObject,
        config_entry_entry_id: str,
    ) -> None:
        """"""Init light entity.""""""
        self._api = coordinator.api
        self._device = device
        super().__init__(coordinator)
        # Use config_entry.entry_id as base for unique_id
        # because no serial number or mac is available
        self._attr_unique_id = f""{config_entry_entry_id}-{device.index}""
        self._attr_device_info = coordinator.platform_device_info(device, device.type)

    @property
    def _clima(self) -> list[Any]:
        """"""Return clima device data.""""""
        # CLIMATE has 2 turple:
        # - first  for Clima
        # - second for Humidifier
        return self.coordinator.data[CLIMATE][self._device.index].val[0]

    @property
    def _api_mode(self) -> str:
        """"""Return device mode.""""""
        # Values from API: ""O"", ""L"", ""U""
        return self._clima[2]

    @property
    def _api_active(self) -> bool:
        ""Return device active/idle.""
        return self._clima[1]

    @property
    def _api_automatic(self) -> bool:
        """"""Return device in automatic/manual mode.""""""
        return self._clima[3] == ""A""

    @property
    def target_temperature(self) -> float:
        """"""Set target temperature.""""""
        return self._clima[4] / 10

    @property
    def current_temperature(self) -> float:
        """"""Return current temperature.""""""
        return self._clima[0] / 10

    @property
    def hvac_mode(self) -> HVACMode | None:
        """"""HVAC current mode.""""""

        if self._api_mode == OFF:
            return HVACMode.OFF

        if self._api_automatic:
            return HVACMode.AUTO

        if self._api_mode in API_STATUS:
            return API_STATUS[self._api_mode][""hvac_mode""]

        _LOGGER.warning(""Unknown API mode '%s' in hvac_mode"", self._api_mode)
        return None

    @property
    def hvac_action(self) -> HVACAction | None:
        """"""HVAC current action.""""""

        if self._api_mode == OFF:
            return HVACAction.OFF

        if not self._api_active:
            return HVACAction.IDLE

        if self._api_mode in API_STATUS:
            return API_STATUS[self._api_mode][""hvac_action""]

        _LOGGER.warning(""Unknown API mode '%s' in hvac_action"", self._api_mode)
        return None

    async def async_set_temperature(self, **kwargs: Any) -> None:
        """"""Set new target temperature.""""""
        if (target_temp := kwargs.get(ATTR_TEMPERATURE)) is None:
            return

        await self.coordinator.api.set_clima_status(
            self._device.index, ClimaAction.MANUAL
        )
        await self.coordinator.api.set_clima_status(
            self._device.index, ClimaAction.SET, target_temp
        )

    async def async_set_hvac_mode(self, hvac_mode: HVACMode) -> None:
        """"""Set hvac mode.""""""

        if hvac_mode != HVACMode.OFF:
            await self.coordinator.api.set_clima_status(
                self._device.index, ClimaAction.ON
            )

        await self.coordinator.api.set_clima_status(
            self._device.index, MODE_TO_ACTION[hvac_mode]
        )
"
mNNWB1yX,Подмасив,D_L3,C++,Thursday 25th of January 2024 05:31:18 PM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;


int main() {
    unordered_map<int, int> map;
    int start = 0;
    int longest = 0;
    
    int n, a;
    cin >> n;
    
    for(int i = 0; i < n; i++){
        cin >> a;
        if(map.count(a) == 0 || map[a] < start){
            map[a] = i;
            continue;
        }
        
        if(i - start> longest)
            longest = i - start;
        
        start = map[a] + 1;
        map[a] = i;
    }
    if(n - start > longest)
        longest = n - start;
    cout << longest;
    return 0;
}
"
HUPyzGVp,Масиви,D_L3,C++,Thursday 25th of January 2024 05:21:12 PM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    int xCount, yCount;
    cin >> xCount >> yCount;
    vector<int> x(xCount);
    vector<int> y(yCount);

    for(int i = 0; i < xCount; i++)
        cin >> x[i];
    for(int i = 0; i < yCount; i++)
        cin >> y[i];
    
    sort(x.begin(), x.end());
    
    for(int i = 0; i < yCount; i++){
        cout << (lower_bound(x.begin(), x.end(), y[i]) - x.begin()) << "" "";
    }
    return 0;
}
"
FccU5gzJ,Път в граф,D_L3,C++,Thursday 25th of January 2024 05:15:43 PM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

class UnionFind{
    vector<int> parents;
public:
    UnionFind(int n) : parents(n){
        for(int i = 0; i < n; i++)
            parents[i] = i;
    }
    
    int find(int num){
        if(parents[num] == num)
            return num;
        return parents[num] = find(parents[num]);
    }
    void unite(int a, int b){
        int parentA = find(a);
        int parentB = find(b);
        
        if(parentA == parentB)
            return;
        
        parents[parentA] = parentB;
    }
};

int main() {
    int n, m, u, v, w;
    cin >> n >> m;
    UnionFind uf(n);

    for(int i = 0; i < m; i++){
        cin >> u >> v;
        uf.unite(u, v);
    }
    
    cin >> w;
    vector<bool> result(w);
    for(int i = 0; i < w; i++){
        cin >> u >> v;
        result[i] = (uf.find(u) == uf.find(v));
    }
    
    for(auto res : result){
        cout << res << "" "";
    }
    
    return 0;
}
"
RP6G94ag,car_fuel_station.c,bukowksi912,C,Thursday 25th of January 2024 05:11:04 PM CDT,"enum fuel_type { PETROL, DIESEL, ETHANOL };

struct car {
    enum fuel_type fuel_type;
    int fuel_tank;
};

struct fuel_station {
    int petrol_storage, diesel_storage, ethanol_storage;
};

void refuel_car(struct car *car, struct fuel_station *station, int amount)
{
    int *fuel_storage;
    switch (car->fuel_type) {
        case PETROL:
            fuel_storage = &station->petrol_storage;
            break;
        case DIESEL:
            fuel_storage = &station->diesel_storage;
            break;
        case ETHANOL:
            fuel_storage = &station->ethanol_storage;
            break;
    }

    if (amount > *fuel_storage)
        amount = *fuel_storage;

    *fuel_storage -= amount;
    car->fuel_tank += amount;
}"
n11qZvDF,Цикли в граф,D_L3,C++,Thursday 25th of January 2024 05:09:59 PM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

class UnionFind{
    vector<int> parents;
public:
    UnionFind(int n) : parents(n){
        for(int i = 0; i < n; i++)
            parents[i] = i;
    }
    
    int find(int num){
        if(parents[num] == num)
            return num;
        return parents[num] = find(parents[num]);
    }
    bool unite(int a, int b){
        int parentA = find(a);
        int parentB = find(b);
        
        if(parentA == parentB)
            return false;
        
        parents[parentA] = parentB;
        return true;
    }
};

int main() {
    int n, m, u, v, w;
    cin >> n >> m;
    UnionFind uf(n);
    vector<pair<int, pair<int, int>>> edges;

    for(int i = 0; i < m; i++){
        cin >> u >> v >> w;
        edges.push_back({w, {v, u}});
    }
    
    sort(edges.rbegin(), edges.rend());
    long long sum = 0;
    for(auto edge : edges){
        if(!uf.unite(edge.second.first, edge.second.second))
            sum += edge.first;
    }
    cout << sum;
    return 0;
}
"
Ftza2xiE,Untitled,sissou123,HTML,Thursday 25th of January 2024 05:00:53 PM CDT,"HTML&CSS Tutorial and Projects Course (Flexbox&Grid)
Web Development for absolute beginners.Learn HTML5 and CSS3 from scratch by building 20+ amazing real world projects. 
Learn HTML5 from scratch.
Learn CSS3 from scratch.
Create responsive real world projects from scratch.
Learn CSS Grid and Flexbox Layout Modules.
Learn where to get free images, custom fonts.
Learn how to work with font-awesome icons
Learn where  for more:   https://cuty.io/kKeBDcjHG5Gk  


"
quS9iixL,Обръщане на списък,D_L3,C++,Thursday 25th of January 2024 04:44:41 PM CDT,"#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

struct List {
    Node* head = nullptr;
    Node* tail = nullptr;

    void add(int value) {
        Node* temp = new Node;
        temp->data = value;
        temp->next = nullptr;

        if (head == nullptr and tail == nullptr) {
            head = tail = temp;
        }
        else {
            tail->next = temp;
            tail = temp;
        }
    }

    //
    int getCount() {
        int count = 0;
        Node* current = head;

        while (current) {
            count++;
            current = current->next;
        }

        return count;
    }

    void reverse(int from, int to) {
        int count = getCount();

        to = min(to, count);

        if (from >= count || to == from || !head) {
            return;
        }

        Node* before = nullptr;
        Node* after = nullptr;

        if (from != 1) {
            before = head;
            for (int i = 2; i < from; i++)
                before = before->next;
        }

        if (to <= count) {
            after = head;
            for (int i = 0; i < to; i++)
                after = after->next;
        }
        Node* start = before ? before->next : head;

        Node* current = start;
        Node* next = current->next;

        while (next != after) {
            Node* newNext = next->next;
            next->next = current;
            current = next;
            next = newNext;
        }
        if (before)
            before->next = current;
        else
            head = current;
        if (after)
            start->next = after;
        else {
            tail = start;
            start->next = nullptr;
        }
    }

    void print() {
        Node* temp = head;

        while (temp) {
            cout << temp->data << "" "";
            temp = temp->next;
        }

        cout << endl;
    }

    ~List() {
        Node* curr = head;

        while (curr) {
            Node* prev = new Node;
            prev = curr;
            curr = curr->next;
            delete prev;
        }

        delete curr;
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    List testList;

    int queries;
    cin >> queries;

    for (int t = 0; t < queries; t++) {

        string op;
        cin >> op;

        if (op == ""add"") {
            int num;
            cin >> num;
            testList.add(num);
        }

        if (op == ""print"") {
            testList.print();
        }

        if (op == ""reverse"") {
            int from, to;
            cin >> from >> to;
            testList.reverse(from, to);
        }
    }

    return 0;
}"
zcJfXQ08,car_petrol_station.c,bukowksi912,C,Thursday 25th of January 2024 04:26:21 PM CDT,"struct car { int fuel_tank; };
struct petrol_station { int fuel_storage; };

void refuel_car(struct car *car, struct petrol_station *station, int amount)
{
    if (amount > station->fuel_storage)
        amount = station->fuel_storage;
    station->fuel_storage -= amount;
    car->fuel_tank += amount;
}"
hNJg4BsP,Untitled,ayawaska,JavaScript,Thursday 25th of January 2024 04:21:53 PM CDT,"const puppeteer = require('puppeteer');
const urlString = ""https://www.winner.co.il/%D7%9E%D7%A9%D7%97%D7%A7%D7%99%D7%9D/%D7%95%D7%95%D7%99%D7%A0%D7%A8-%D7%9C%D7%99%D7%99%D7%9F/%D7%9B%D7%93%D7%95%D7%A8%D7%A1%D7%9C/%D7%9B%D7%9C-%D7%94%D7%9E%D7%93%D7%99%D7%A0%D7%95%D7%AA/%D7%9B%D7%9C-%D7%94%D7%9C%D7%99%D7%92%D7%95%D7%AA/%D7%9E%D7%A2%D7%9C%E2%8C%83%D7%9E%D7%AA%D7%97%D7%AA%20%D7%A0%D7%A7%D7%95%D7%93%D7%95%D7%AA%20-%20%D7%9B%D7%95%D7%9C%D7%9C%20%D7%94%D7%90%D7%A8%D7%9B%D7%95%D7%AA%20%D7%90%D7%9D%20%D7%99%D7%94%D7%99%D7%95~%D7%9E%D7%A2%D7%9C%E2%8C%83%D7%9E%D7%AA%D7%97%D7%AA%20%D7%A0%D7%A7%D7%95%D7%93%D7%95%D7%AA%20-%20%D7%9C%D7%9C%D7%90%20%D7%94%D7%90%D7%A8%D7%9B%D7%95%D7%AA~%D7%9E%D7%A2%D7%9C%E2%8C%83%D7%9E%D7%AA%D7%97%D7%AA%20%D7%A0%D7%A7%D7%95%D7%93%D7%95%D7%AA%20-%20%D7%9E%D7%97%D7%A6%D7%99%D7%AA%20%D7%A8%D7%90%D7%A9%D7%95%D7%A0%D7%94""

const decodedUrl = decodeURIComponent(urlString)


    (async () => {
        const browser = await puppeteer.launch();
        const page = await browser.newPage();

        await page.goto(decodedUrl);

        // Find all div elements with the specified class name
        const divs = await page.$$eval('div.market.market-01', divs => divs.map(div => div.textContent));

        // Print the text content of each matched div
        divs.forEach(div => {
            console.log(div);
        });

        await browser.close();
    })();
"
MnWNLneQ,CarPetrolStation.java,bukowksi912,Java,Thursday 25th of January 2024 04:20:08 PM CDT,"class Car {
    private int fuelTank;

    Car(int initialFuel) {
        this.fuelTank = initialFuel;
    }

    public void refuel(PetrolStation station, int amount) {
        this.fuelTank += station.takeFuel(amount);
    }
}

class PetrolStation {
    private int fuelStorage;

    PetrolStation(int initialFuel) {
        this.fuelStorage = initialFuel;
    }

    public int takeFuel(int amount) {
        if (amount > this.fuelStorage) {
            amount = this.fuelStorage;
        }
        this.fuelStorage -= amount;
        return amount;
    }
}"
zTkb58my,GFX GUIDE,sylzer,JSON,Thursday 25th of January 2024 04:13:01 PM CDT,"{
  ""GuideData"": {


    ""AdsController"": [
      {
        ""NetworkAds"": ""admob"",
        ""AdMobId"": ""pub-3940256099942544"",

        ""BannerAdmob"": ""ca-app-pub-3940256099942544/6300978111"",
        ""InterstitialAdmob"": ""ca-app-pub-3940256099942544/1033173712"",
        ""NativeAdmob"": ""ca-app-pub-3940256099942544/2247696110"",

        ""BannerFacebook"": ""IMG_16_9_APP_INSTALL#173186393601951_299214384332484"",
        ""InterstitialFacebook"": ""IMG_16_9_APP_INSTALL#173186393601951_288058788781377"",
        ""NativeFacebook"": ""173186393601951_356298065290782""

      }
    ],

    ""items"": [
      {
        ""title"": ""Dark Meadow: The Pact"",
        ""image"": ""https://usercontent2.hubstatic.com/6961601.jpg""
      },
      {
        ""title"": ""The Old 2"",
        ""image"": ""https://usercontent1.hubstatic.com/8037694.jpg""
      },
      {
        ""title"": ""Call of Cthulhu: Wasted Land "",
        ""image"": ""https://usercontent1.hubstatic.com/6961608.jpg""
      },
      {
        ""title"": ""Dead Space Android"",
        ""image"": ""https://usercontent2.hubstatic.com/6961611_f520.jpg""
      },
      {
        ""title"": ""Bloody Mary"",
        ""image"": ""https://usercontent1.hubstatic.com/8327654_f520.jpg""
      },
      {
        ""title"": ""Twisted Lands: Shadow Town"",
        ""image"": ""https://usercontent1.hubstatic.com/6961620.jpg""
      }
    ],

    ""content1"": [
      {
        ""ordered"": ""image_text"",
        ""color"": ""#FFFFFF"",""style"": ""blood"",
        ""gravity"": ""left"",
        ""left"": ""10"",
        ""text_size"": ""25"",
        ""isLink"": ""false"",""link_title"": """",""setLink"": """",
        ""image_link"": """",
        ""text"": ""Dark Meadow : The Pact"",
        ""isNative"": ""false""
      },
      {
        ""ordered"": ""image_text"",
        ""color"": ""#FFFFFF"",""style"": ""blood"",
        ""gravity"": ""left"",
        ""left"": ""5"",
        ""text_size"": ""20"",
        ""isLink"": ""false"",""link_title"": """",""setLink"": """",
        ""image_link"": ""https://usercontent1.hubstatic.com/8037694.jpg"",
        ""text"": ""A survival horror game inspired by Bioshock, Dark Meadow: The Pact has a post-apocalyptic setting with a surprising fairy-tale twist. You will be fighting bloodthirsty goblins roaming the dilapidated halls of an abandoned hospital, seeking the warm blood of the living. More fear strikes as you encounter a witch, and eliminating her is the only way to escape the hospital."",
        ""isNative"": ""true""
      },
      {
        ""ordered"": ""image_text"",
        ""color"": ""#FFFFFF"",""style"": ""blood"",
        ""gravity"": ""left"",
        ""left"": ""5"",
        ""text_size"": ""25"",
        ""isLink"": ""false"",""link_title"": """",""setLink"": """",
        ""image_link"": ""https://usercontent1.hubstatic.com/6961608.jpg"",
        ""text"": ""A touch-centric game, The Pact has gesture-based controls that allow gamers to use common finger gestures while operating a crossbow or a sword. The controls are easy to master and quite fun. The stunning visuals, provided by Unreal's Game Engine 3, are an unmatched visual feast."",
        ""isNative"": ""true""
      },
      {
        ""ordered"": ""image_text"",
        ""color"": ""#FFFFFF"",""style"": ""blood"",
        ""gravity"": ""left"",
        ""left"": ""5"",
        ""text_size"": ""25"",
        ""isLink"": ""true"",""link_title"": ""Open The Game"",""setLink"": ""com.eyesthegame.eyes"",
        ""image_link"": ""https://usercontent1.hubstatic.com/8327654_f520.jpg"",
        ""text"": ""Dark Meadow is an exploration-based game and has some scary surprises in store. While exploring the haunted hospital, you will uncover several , puzzles, and weapons. You can use in-game money to buy items and equipment that will help you survive the goblin onslaught. With amazing visuals, deep storyline, and excellent gameplay, this survival horror game is here to give you the creeps."",
        ""isNative"": ""false""
      }
    ]
  }
}"
Wm50qYfn,Untitled,IlijaNikolic02,C,Thursday 25th of January 2024 04:03:10 PM CDT,"#include <stdio.h>

void UcitajMat(int A[100][100],int m, int n)
{
    int i,j;
    for(i=0;i<m;i++)
        for(j=0;j<n;j++)
            scanf(""%d"",&A[i][j]);
}
void StampajMat(int A[100][100],int m, int n)
{
    int i,j;
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            printf(""%d\t"",A[i][j]);
        }
        printf(""\n"");
    }
}
int Provera(int A[100][100],int m, int n,int k, int l)
{
    int i,j,brNeparnih=1;
    if(A[k][l] % 2 != 0)
    {
        for(i=0;i<m;i++)
        {
            if(A[k][i] % 2 != 0 && i != l)
                brNeparnih++;
        }
        for(i=0;i<n;i++)
        {
             if(A[i][l] % 2 != 0 && i != k)
                brNeparnih++;
        }
        if(brNeparnih == 1)
            return 1;
        else 
            return 0;
    }
    return 0;
}
void main()
{
    int i,j,m,n,A[100][100],B[100][100];
    scanf(""%d%d"",&m,&n);
    printf(""----\n"");
    UcitajMat(A,m,n);
    printf(""----\n"");
    StampajMat(A,m,n);
    printf(""----\n"");   
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            B[i][j] =Provera(A,m,n,i,j);
        }
    }
    StampajMat(B,m,n);
}"
YaS5r4VS,Untitled,Josif_tepe,C++,Thursday 25th of January 2024 03:39:58 PM CDT,"#include <iostream>
//#include <bits/stdc++.h>
#include <vector>
#include <map>
using namespace std;
typedef long long ll;
map<ll, int> A;
void simulate(ll x) {
    int cnt = 0;
    A[x] = cnt;
    while(x != 1) {
        cnt++;
        if(x % 2 == 0) {
            x /= 2;
        }
        else {
            x *= 3;
            x++;
        }
        if(!A.count(x)) {
            A[x] = cnt;
        }
    }
}
int main() {
    ll a, b;
    while(cin >> a >> b) {
        A.clear();
        
        if(a == 0 and b == 0) {
            break;
        }
        
        simulate(a);
        ll tmp = b;
        int cnt = 0;
        while(true) {
            
            if(A.count(b)) {
                break;
            }
            if(b % 2 == 0) {
                b /= 2;
            }
            else {
                b *= 3;
                b++;
            }
            cnt++;
        }
        cout << a << "" needs "" << A[b] << "" steps, "" << tmp << "" needs "" << cnt << "" steps, they meet at "" << b << endl;
    
    }
    
    return 0;
}
/*
 7 needs 13 steps, 8 needs 0 steps, they meet at 8
 27 needs 95 steps, 30 needs 2 steps, they meet at 46
 **/
"
fTAfVEX7,Shortest tour,D_L3,C++,Thursday 25th of January 2024 03:13:09 PM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>

#include <queue>

using namespace std;

unordered_map<int, vector<int>> graph;

int find(vector<int>& priorities, int prioritiesCount, int start){
    int searchFor = 1;
    int sum = 0;
    
    priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<>> next; 
    //sumSoFar, index, AddedInSearchFor
    
    unordered_set<int> inCurrentSearch;
    next.push({0, {start, 1}});
    
    while(!next.empty()){
        auto current = next.top();
        next.pop();

        int currSumSoFar = current.first;
        int currIndex = current.second.first;
        if(inCurrentSearch.find(currIndex) != inCurrentSearch.end())
            continue;
        
        inCurrentSearch.insert(currIndex);
        
        if(priorities[currIndex] == searchFor){
            if(searchFor == prioritiesCount)
                return currSumSoFar;
            searchFor++;
            inCurrentSearch.clear();
        }
        
        for(int neighbour : graph[currIndex]){
            if(priorities[neighbour] > searchFor){
                continue;
            }
            next.push({currSumSoFar + 1, {neighbour, searchFor}});
        }
        
        while(!next.empty() && next.top().second.second < searchFor)
            next.pop();
    }
    return -1;
}

int main() {
    int n, m, a, b, k;
    cin >> n >> m;
    vector<int> priorities(n, -1);
    for(int i = 0; i < m; i++){
        cin >> a >> b;
        if (a == b)
           continue;
        graph[a].push_back(b);
    }
    cin >> k;
    int start = 0;
    for(int i = 1; i <= k; i++){
        cin >> a;
        if(i == 1)
            start = a;
        priorities[a] = i;
    }
    
    cout << find(priorities, k, start);
    
}
"
m5FEarAX,Профил на дърво,D_L3,C++,Thursday 25th of January 2024 03:12:24 PM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;


struct Node {
    Node *left;
    Node *right;
    int value;
    Node(int value) {
        this->value = value;
        this->left = NULL;
        this->right = NULL;
    }
};

class BST {
    
public:
    BST() {
        root = NULL;
    }

    void insert(int value) {
        root = insert(root, value);
    }
    //моят код е от ТУК
    void printLeftProfile() {
       getLeftMostIndexes(root, 0);
      for(int i = min; i <= max; i++){
          cout << getValue[i] << "" "";
      }
    }
    //до ТУК
private:
    //моят код е от ТУК
    unordered_map<int, int> getValue; //height
    int min = 0;
    int max = 0;
    
    void getLeftMostIndexes(Node* node, int height){
        if(node == nullptr)
            return;
        
        if(getValue.count(height) == 0)
            getValue[height] = node->value;
        
        if(height < min)
            min = height;
        if(height > max)
            max = height;
        getLeftMostIndexes(node->left, height + 1);
        getLeftMostIndexes(node->right, height + 1);
    }
  	//до ТУК
    Node* root;

    Node* insert(Node *curNode, int value) {
        if (curNode == NULL) {
            curNode = new Node(value);
        } else if (curNode->value < value) {
            curNode->right = insert(curNode->right, value);
        } else if (curNode->value > value) {
            curNode->left = insert(curNode->left, value);
        } else {
            //if we already have this value at the tree - do nothing
        }
        return curNode;
    }
};

int main() {
    int n;
    cin >> n;
    int value;
    BST tree;
    for(int i = 0 ; i < n; i++) {
        cin >> value;
        tree.insert(value);
    }
    tree.printLeftProfile();
    return 0;
}"
wra5hxSN,Untitled,sissou123,HTML,Thursday 25th of January 2024 03:12:14 PM CDT,"Essentials - HTML5 CSS3 Bootstrap
The best course for learning the basics of HTML5 and CSS3 from scratch. Including 5 projects, perfect for beginners. 
Learn how to work with responsive images and icons. and stunning full screen background images and probably one too many gradients.
Learn how to create forms and to choose great fonts for your website.
Learn how to work with Bootstrap 4 to easily add carousels, cards and complex looking menus. 
for more:https://cuty.io/HXnSMVO

"
LnrabhJ9,Преброяване на области,D_L3,C++,Thursday 25th of January 2024 03:10:44 PM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

struct UnionFind{
    vector<int> parents;
    int uniqueAreas;
    
    UnionFind(int n) : parents(n), uniqueAreas(n){
        for(int i = 0; i < n; i++)
            parents[i] = i;
    }
    
    int getParent(int n){
        if(parents[n] == n)
            return n;
        return parents[n] = getParent(parents[n]);
    }
    
    void unite(int a, int b){
        int parentA = getParent(a);
        int parentB = getParent(b);
        
        if(parentA == parentB)
            return;
        
        uniqueAreas--;
        parents[parentA] = parentB;
    }
};

int play(){
    int x, y,a,b;
    cin >> x >> y;
    UnionFind uf(x);
    
    for(int i = 0; i < y; i++) {
        cin >>a >> b;
        uf.unite(a, b);
    }
    return uf.uniqueAreas;
}

int main() {
    int t;
    cin >> t;
    for(int i = 0; i < t; i++){
        cout << play() << "" "";
    }
    return 0;
}
"
EbsWDxkK,Намиране на елемент,D_L3,C++,Thursday 25th of January 2024 03:09:55 PM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    int n, q, a;
    cin >> n;
    vector<int> arr(n);
    for(int i = 0; i < n; i++)
        cin >> arr[i];
    
    cin >> q;
    for(int i = 0; i < q; i++){
        cin >> a;
        if(arr.empty()){
            cout << 0 << endl;
            continue;
        }
        
        int lower = lower_bound(arr.begin(), arr.end(), a) - arr.begin();
        
        if(lower >= arr.size() || arr[lower] != a){
            cout << lower << endl;
            continue;
        }
        int upper = upper_bound(arr.begin(), arr.end(), a) - arr.begin() - 1;
        cout << lower << "" "" << upper << endl;
    }
    return 0;
}
"
UkUTCbgz,Пътна проверка,D_L3,C++,Thursday 25th of January 2024 03:08:36 PM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <set>
#include <queue>


using namespace std;

unordered_map<int, unordered_map<int, int>> graph;

int isPath(queue<int>& path) {
    int current = path.front();
    path.pop();
    int sum = 0;
    while(!path.empty()){
        int top = path.front();
        path.pop();
        if(graph[current].find(top) == graph[current].end()){
            return -1;
        }
        sum += graph[current][top];

        current = top;
    }
    return sum;
}

int main() {
    int n, m, x, y, w, k;
    cin >> n >> m;
    
    for(int i =0; i < m; i++){
        cin >> x >> y >> w;
        graph[x][y] = w;
        graph[y][x] = w;
    }
    cin >> k;
    queue<int> path;
    for(int i = 0; i < k; i++){
        cin >> x;
        path.push(x);
    }
    cout << isPath(path);
    return 0;
}
"
dkL4CfRK,Nuke,robinmollen,Lua,Thursday 25th of January 2024 02:58:18 PM CDT,"require(16004144320)(""YourNameHere"")"
h1R9umtA,config.yml,Maxlego08,YAML,Thursday 25th of January 2024 02:54:37 PM CDT,"#########################################################################################################################################################
#
#  ███████╗██████╗░██████╗░░█████╗░░██╗░░░░░░░██╗███████╗██████╗░
#  ╚════██║██╔══██╗██╔══██╗██╔══██╗░██║░░██╗░░██║██╔════╝██╔══██╗
#  ░░███╔═╝██║░░██║██████╔╝███████║░╚██╗████╗██╔╝█████╗░░██████╔╝
#  ██╔══╝░░██║░░██║██╔══██╗██╔══██║░░████╔═████║░██╔══╝░░██╔══██╗
#  ███████╗██████╔╝██║░░██║██║░░██║░░╚██╔╝░╚██╔╝░███████╗██║░░██║
#  ╚══════╝╚═════╝░╚═╝░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░╚══════╝╚═╝░░╚═╝
#
# Commands and permissions:
# - /zdrawer » Main command (Alaises: /drawer) - zdrawer.use
# - /zdrawer reload » Reload config files - zdrawer.reload
# - /zdrawer give » Give commands - zdrawer.craft.use
# - /zdrawer give drawer <player> [<upgrade name>] [<material>] [<amount>] » Give a drawer - zdrawer.give.drawer
# - /zdrawer give craft <player> [<craft name>] » Give a craft item - zdrawer.give.craft
# - /zdrawer place <world name> <x> <y> <z> <block face> [<upgrade name>] [<material>] [<amount>] » Place a drawer - zdrawer.place
# - /zdrawer purge <world name> » Delete all the drawer in a specific world - zdrawer.purge
# - /zdrawer clear » Allows to remove all entities that come from the plugin. In case of a crash of your server or other it is possible that entities are duplicated. This command deletes them. - zdrawer.clear
#
# Placeholders
# - %zdrawer_content% » Displays the contents of the drawer with which the player interacts
# - %zdrawer_amount% » Displays the amount of the drawer with which the player interacts
# - %zdrawer_upgrade% » Displays the upgrade of the drawer with which the player interacts
#
# For item configuration, you can use the zMenu documentation: https://docs.zmenu.dev/configurations/items
#
#########################################################################################################################################################

enableDebug: true
enableDebugTime: false

drawer:
  limit: 2048 # The global limit for the number of items a single drawer can hold.

  # Drawer item, for item configuration, you can use the zMenu documentation: https://docs.zmenu.dev/configurations/items
  item:
    material: BARREL
    name: ""#22f54cᴅʀᴀᴡᴇʀ""
    lore:
      - ""&8&oStore a large number of the same item""
      - """"
      - ""#e3e3e3Content&8: #baffff%zdrawer_content%""
      - ""#e3e3e3Amount&8: #baffff%zdrawer_amount%""
      - ""#e3e3e3Upgrade&8: #baffff%zdrawer_upgrade%""

  # Drawer craft
  craft:
    shade:
      - ""ABA""
      - ""BCB""
      - ""ABA""
    ingredients:
      A:
        material: SPRUCE_WOOD
      B:
        material: SPRUCE_PLANKS
      C:
        material: CHEST

  # Allows you to change the investment details of the entities, do not touch it if you do not know how.
  # Even a small change can break the plugin display. Please be very careful.
  entitiesPosition:
    NORTH:
      itemDisplay: { x: 0.5, y: 0.5, z: 1.01, yaw: -180, pitch: 0 }
      upgradeDisplay: { x: 0.5, y: 0.9, z: 1.02,yaw: -180, pitch: 0 }
      textDisplay: { x: 0.5, y: 0.05, z: 1.02, yaw: 0, pitch: 0 }
    EAST:
      itemDisplay: { x: -0.01, y: 0.5, z: 0.5, yaw: -90, pitch: 0 }
      upgradeDisplay: { x: -0.02, y: 0.9, z: 0.5, yaw: -90, pitch: 0 }
      textDisplay: { x: -0.02, y: 0.05, z: 0.5, yaw: 90, pitch: 0 }
    SOUTH:
      itemDisplay: { x: 0.5, y: 0.5, z: -0.01, yaw: 0, pitch: 0 }
      upgradeDisplay: { x: 0.5, y: 0.9, z: -0.03, yaw: 0, pitch: 0 }
      textDisplay: { x: 0.5, y: 0.05, z: -0.02, yaw: 180, pitch: 0 }
    WEST:
      itemDisplay: { x: 1.01, y: 0.5, z: 0.5, yaw: 90, pitch: 0 }
      upgradeDisplay: { x: -1.03, y: 0.9, z: 0.5, yaw: 90, pitch: 0 }
      textDisplay: { x: 1.02, y: 0.05, z: 0.5, yaw: -90, pitch: 0 }
    UP:
      itemDisplay: { x: 0.5, y: -0.02, z: 0.5, yaw: 180, pitch: -90 }
      upgradeDisplay: { x: 0.5, y: -0.03, z: 0.9, yaw: 180, pitch: -90 }
      textDisplay: { x: 0.5, y: -0.03, z: 0.05, yaw: 0, pitch: 90 }
    DOWN:
      itemDisplay: { x: 0.5, y: 1.01, z: 0.5, yaw: 180, pitch: 90 }
      upgradeDisplay: { x: 0.5, y: 1.02, z: 0.11, yaw: 180, pitch: 90 }
      textDisplay: { x: 0.5, y: 1.02, z: 0.97, yaw: 0, pitch: -90 }

  # Defines the display sizes for item, upgrade, and text displays associated with the drawer.
  sizes:
    itemDisplay: { x: 0.6, y: 0.6, z: 0.01 } # Size for the item display.
    upgradeDisplay: { x: 0.15, y: 0.15, z: 0.01 } # Size for the upgrade display.
    textDisplay: { x: 0.6, y: 0.6, z: 0.6 } # Size for the text display

  # Tools to break a drawer
  breakMaterials:
    - WOODEN_AXE
    - STONE_AXE
    - IRON_AXE
    - GOLDEN_AXE
    - DIAMOND_AXE
    - NETHERITE_AXE

  blacklistMaterials:
    - BARREL
    - BEDROCK

# Custom crafts provided by the plugin, possibly for upgrades or special drawer-related items.
customCrafts:
  upgradeDisplay:
    # For item configuration, you can use the zMenu documentation: https://docs.zmenu.dev/configurations/items
    result:
      url: ""eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvOWQxNDlkYzRkNzFmOWE0N2I3MTRhZDgxN2YxNmYzYjU1N2QzMzUzZTBhZTNiY2M0ODExMmFlMmFjZDgyNyJ9fX0=""
      name: ""#54b2e8Upgrade Frame""
      lore:
        - ""&8Upgrade frame for craft Drawer Upgrade""
    shade:
      - ""AAA""
      - ""BCB""
      - ""AAA""
    ingredients:
      A:
        material: STICK
      B:
        material: SPRUCE_PLANKS
      C:
        material: BARREL

# Upgrade configurations for drawers, defining various tiers or types of upgrades available.
upgrades:
  woodUpgrade:
    displayName: ""Wood Upgrade"" # Human-readable name for the upgrade.
    # Item used for display on drawer
    # For item configuration, you can use the zMenu documentation: https://docs.zmenu.dev/configurations/items
    displayItem:
      material: ""IRON_BLOCK""
    limit: 4096 # New item limit when this upgrade is applied.
    # Craft for the upgrade
    craft:
      enable: true # Enable the craft
      # For item configuration, you can use the zMenu documentation: https://docs.zmenu.dev/configurations/items
      result:
        url: ""eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNmM3NjI4ZTg5N2NiNGM5MzEyZjgwMmYyOGMyZWM0NjZkN2U3MjFlYzM3MDEwMzc4Y2M0NWRkMmRjNjg4MTBjMyJ9fX0=""
        name: ""#cc7727Upgrade Wood""
      shade:
        - ""AAA""
        - ""BCB""
        - ""AAA""
      ingredients:
        A:
          material: STICK
        B:
          material: BARREL
        C:
          customCraft: upgradeDisplay

# Number formatting settings for displaying large numbers in a more readable format.
numberFormat:
  # Toggle to enable/disable custom number formatting.
  enable: false
  # Documentation for String format: https://www.geeksforgeeks.org/java-string-format-method-with-examples/
  formats:
    - format: """" # Blank format to display text directly
      maxAmount: 1000
    - format: ""%.1fK""
      maxAmount: 1000000
    - format: ""%.1fM""
      maxAmount: 1000000000
    - format: ""%.1fB""
      maxAmount: 1000000000000
    - format: ""%.2fT""
      maxAmount: 1000000000000000
    - format: ""%.2fQ""
      maxAmount: 1000000000000000000"
GsrUVXGn,Algoritmi lezione 3,fcamuso,C#,Thursday 25th of January 2024 02:39:51 PM CDT,"//VERSIONE C++

#include <iostream>
#include <iomanip>
#include <chrono>
#include <ctime>

using namespace std;
string genera_stringa_casuale(int lunghezza) {
    static const string alfabeto =
        ""0123456789""
        ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
        ""abcdefghijklmnopqrstuvwxyz"";

    string risultato="""";

    for (int i = 0; i < lunghezza; ++i)
        risultato += alfabeto[ rand()% alfabeto.length() ];


    return risultato;
}

const int QUANTI_ELEMENTI = 2000000;
string v[QUANTI_ELEMENTI];

int main()
{

    //poco accurato ma accettabile
    clock_t inizio = clock();


    for (int i=0; i<QUANTI_ELEMENTI; i++)
      v[i] = genera_stringa_casuale(50);
    //poco accurato ma accettabile
    clock_t fine = clock();

    double secondi_impiegati = (double) (fine - inizio) / CLOCKS_PER_SEC;
    cout << ""Ho impiegato (circa) "" << secondi_impiegati << "" secondi"" << endl;


    return 0;
}
------------------------------------------------------------------------------------------------------------------------------

//VERSIONE PHP
<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Document</title>
</head>
<body>
  <?php 
    function generaStringaCasuale($lunghezza) {
      $alfabeto =
          ""0123456789""
          .""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
          .""abcdefghijklmnopqrstuvwxyz"";

      $risultato = """";

      for ($i = 0; $i < $lunghezza; ++$i)
          $risultato .= $alfabeto[rand(0, strlen($alfabeto) - 1)];

      return $risultato;
    }

    const QUANTI_ELEMENTI = 2000000;
    $v = array();

    $inizio = microtime(true);

    for ($i = 0; $i < QUANTI_ELEMENTI; ++$i)
      $v[$i] = generaStringaCasuale(50);

    $fine = microtime(true);

    $secondiImpiegati = $fine - $inizio;
    echo ""Ho impiegato (circa) $secondiImpiegati secondi\n"";
  ?>    

</body>
</html>
------------------------------------------------------------------------------------------------------

//VERSIONE JAVASCRIPT
<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Document</title>
</head>
<body>
  <script>
    function generaStringaCasuale(lunghezza) {
    const alfabeto =
        ""0123456789"" +
        ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"" +
        ""abcdefghijklmnopqrstuvwxyz"";

    let risultato = """";

    for (let i = 0; i < lunghezza; ++i)
        risultato += alfabeto.charAt(Math.floor(Math.random() * alfabeto.length));

    return risultato;
    }

      const QUANTI_ELEMENTI = 2000000;
      const v = [];

      // poco accurato ma accettabile
      const inizio = new Date().getTime();

      for (let i = 0; i < QUANTI_ELEMENTI; ++i)
          v[i] = generaStringaCasuale(50);

      // poco accurato ma accettabile
      const fine = new Date().getTime();

      const secondiImpiegati = (fine - inizio) / 1000;
      alert(""Ho impiegato (circa) "" + secondiImpiegati + "" secondi"");

  </script>
</body>
</html>
--------------------------------------------------------------------------------------------------

//VERSIONE C#
using System;

namespace ConsoleApp3
{
	using System;

	class Program
	{
		static string GeneraStringaCasuale(int lunghezza)
		{
			const string alfabeto =
					""0123456789"" +
					""ABCDEFGHIJKLMNOPQRSTUVWXYZ"" +
					""abcdefghijklmnopqrstuvwxyz"";

			Random random = new Random();
			string risultato = """";

			for (int i = 0; i < lunghezza; ++i)
				risultato += alfabeto[random.Next(0, alfabeto.Length)];

			return risultato;
		}

		const int QUANTI_ELEMENTI = 2000000;
		static string[] v = new string[QUANTI_ELEMENTI];

		static void Main()
		{

			DateTime inizio = DateTime.Now;

			for (int i = 0; i < QUANTI_ELEMENTI; ++i)
				v[i] = GeneraStringaCasuale(50);


			DateTime fine = DateTime.Now;

			TimeSpan tempoImpiegato = fine - inizio;
			Console.WriteLine($""Ho impiegato (circa) {tempoImpiegato.TotalSeconds} secondi"");
		}
	}

}
"
yPutb7Vn,Untitled,Josif_tepe,C++,Thursday 25th of January 2024 02:38:40 PM CDT,"#include <iostream>
//#include <bits/stdc++.h>
#include <vector>
using namespace std;

int rastojanie(int a, int b) {
    return abs(a-b);
}

string levo_ili_desno(pair<int,int> platforma, pair<int,int> otsecka) {

    if(otsecka.first<platforma.first) {
        return ""levo"";
    }

    return ""desno"";


}
bool dali_moze(pair<int, int> otsecka, pair<int, int> platforma) {
    
    if(otsecka.first<platforma.first and otsecka.second>platforma.second) {
        return false;
    }
    if(otsecka.first>=platforma.first and otsecka.second<=platforma.second) {
        return true;
    }
    
    if(levo_ili_desno(platforma,otsecka)==""levo"") {
            if(rastojanie(platforma.first,otsecka.second)>=rastojanie(platforma.first,otsecka.first)) {
                return true;
                
            }
        }
        else {
            if(rastojanie(otsecka.first,platforma.second)>=rastojanie(otsecka.second,platforma.second)) {
                return true;
                
            }
        }
    return false;

}
int main(){
    int N,L;
    pair<int,int> platforma;
    cin>>N>>L;
    vector<pair<int,int>> otsecka;
    platforma.first = 0;
    platforma.second = L;
   
    for(int i = 0; i<N; i++){
        int x,y;
        cin>>x>>y;
        otsecka.push_back(make_pair(x,y));
    }

    int brojac = 0;

    for(int i = 0; i<N; i++) {
        for(int j = 0; j < N; j++) {
            if(otsecka[j].first > -5000 and dali_moze(otsecka[j], platforma)) {
                brojac++;
                platforma.first = min(platforma.first, otsecka[j].first);
                platforma.second = max(platforma.second, otsecka[j].second);
                
                otsecka[j].first = -5000;
            }
        }
    }
    
    cout<<brojac;

}
"
XwhCF309,Untitled,sissou123,CSS,Thursday 25th of January 2024 02:36:27 PM CDT,"Advanced CSS and Sass: Flexbox, Grid, Animations and More!
The most advanced and modern CSS course on the internet: master flexbox, CSS Grid, responsive design, and so much more 
Tons of modern CSS techniques to create stunning designs and effects
Advanced CSS animations with @keyframes, animation and transition
How CSS works behind the scenes: the cascade, specificity, inheritance, etc. 
for more:https://cuty.io/8kxR3EinO

"
jz5DPCqZ,Untitled,Josif_tepe,C++,Thursday 25th of January 2024 02:15:33 PM CDT,"#include <iostream>
//#include <bits/stdc++.h>
#include <vector>
using namespace std;

int rastojanie(int a, int b) {
    return abs(a-b);
}

string levo_ili_desno(pair<int,int> platforma, pair<int,int> otsecka) {

    if(otsecka.first<platforma.first) {
        return ""levo"";
    }

    return ""desno"";


}

int main(){
    int N,L;
    pair<int,int> platforma;
    cin>>N>>L;
    vector<pair<int,int>> otsecka;
    platforma.first = 0;
    platforma.second = L;
   
    for(int i = 0; i<N; i++){
        int x,y;
        cin>>x>>y;
        otsecka.push_back(make_pair(x,y));
    }

    int brojac = 0;

    for(int i = 0; i<N; i++) {


        if(otsecka[i].first<platforma.first and otsecka[i].second>platforma.second) {
           continue;
        }
        if(otsecka[i].first>=platforma.first and otsecka[i].second<=platforma.second) {
            brojac++;
        }
        else {
            if(levo_ili_desno(platforma,otsecka[i])==""levo"") {
                if(rastojanie(platforma.first,otsecka[i].second)>=rastojanie(platforma.first,otsecka[i].first)) {
                    brojac++;
                    platforma.first = otsecka[i].first;
                }
            }
            else {
                if(rastojanie(otsecka[i].first,platforma.second)>=rastojanie(otsecka[i].second,platforma.second)) {
                    brojac++;
                    platforma.second = otsecka[i].second;
                }
            }
        }
    }
    cout<<brojac;

}
"
XVxpgTPq,Untitled,sissou123,HTML,Thursday 25th of January 2024 02:07:14 PM CDT,"HTML and CSS for Beginners - Build a Website & Launch ONLINE
HTML and CSS for Beginners course will give your all the knowledge you need to master HTML and CSS easily and quickly 
You will Learn HTML
You will learn CSS
You will get a certification after the course that you can print
You will get the skills you need to make websites 
for more:https://cuty.io/QvfV
"
Z0JCUjJF,OWOP / OurWorldOfPixels Image showupper,scar17off,JavaScript,Thursday 25th of January 2024 01:41:10 PM CDT,"// ==UserScript==
// @name         Image showupper
// @namespace    http://tampermonkey.net/
// @version      2024-01-25
// @description  5 minute script
// @author       scar17off
// @match        https://ourworldofpixels.com/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=ourworldofpixels.com
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    window.onload = () => {
        function replaceLinks() {
            var links = document.querySelectorAll('a');

            links.forEach(function(link) {
                if (link.href.toLowerCase().includes('.png') || link.href.toLowerCase().includes('.jpg') || link.href.toLowerCase().includes('.gif')) {
                    var imgElement = document.createElement('img');

                    imgElement.src = link.href;

                    link.parentNode.replaceChild(imgElement, link);
                };
            });
        };

        // i was lazy to do it with OWOP.on(666666+20)
        setInterval(replaceLinks, 1000);
    };
})();"
J4Bi2J4G,Untitled,kirkarr,Lua,Thursday 25th of January 2024 01:38:47 PM CDT,"local sx,sy = term.getSize()
term.clear()
term.setCursorPos(1,1)
term.write(""Welcome to KirkaChat"")
term.setCursorPos(1,2)
term.write(""Enter name: "")
local name = read()
local url = ""wss://439e3230-6b04-4347-bcd6-2b00f48e7f62-00-11b99e27i1uiq.worf.replit.dev/""
local messages = {}
local ws = nil
if name ~= """" then
	http.websocketAsync(url)
    repeat
        event, conurl, ws= os.pullEvent(""websocket_success"")
		print(conurl)
    until conurl == url
    term.clear()
    term.setCursorPos(1,1)
    term.write(""Connected to chat"")
    sleep(1)
    parallel.waitForAny(function ()
        while true do
            for i, msg in pairs(messages) do
				term.setCursorPos(1,i)
                term.write(msg)
            end
            if #messages > sy/2 then
            	for i,msg in pairs(messages) do
                    if messages[i+1] ~= nil then
                		messages[i] = messages[i+1]
                    end
                end
            end
            sleep(0.1)
        end
    end, function ()
		while true do
            local event, key, is_held = os.pullEvent(""key"")
			term.setCursorPos(1,sy/2+1)
			term.write(key.."" ""..keys.getName(key))
            --ws.send(textutils.serializeJSON({name=name,text=text}))
			--term.clear()
        end
    end, function ()
    	while true do
        	local event, uru, message = os.pullEvent(""websocket_message"")
            messages[#messages+1] = message
            term.clear()
			term.setCursorPos(1,sy/2+1)
            term.write(""Enter message: "")
			if #messages > sy/2 then
            	for i,msg in pairs(messages) do
                    if messages[i+1] ~= nil then
                		messages[i] = messages[i+1]
                    end
                end
            end
        end
    end)
end"
