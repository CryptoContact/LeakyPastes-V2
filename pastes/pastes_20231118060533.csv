id,title,username,language,date,content
EUqC05XL,Untitled,wtgftw,Swift,Friday 17th of November 2023 11:50:47 PM CDT,"class Osoba {
    var imie: String
    var nazwisko: String
    var rokUrodzenia: Int
    
    init(imie: String, nazwisko: String, rokUrodzenia: Int) {
        self.imie = imie
        self.nazwisko = nazwisko
        self.rokUrodzenia = rokUrodzenia
    }
    
    func obliczWiek() -> Int {
        let aktualnyRok = 2023 // Możesz użyć funkcji do uzyskania aktualnego roku
        return aktualnyRok - rokUrodzenia
    }
    
    func wyswietlDane() {
        print(""Imię: \(imie), Nazwisko: \(nazwisko), Rok urodzenia: \(rokUrodzenia)"")
    }
}

// Przetestuj utworzone funkcje
let osoba1 = Osoba(imie: ""Jan"", nazwisko: ""Kowalski"", rokUrodzenia: 1990)
let osoba2 = Osoba(imie: ""Anna"", nazwisko: ""Nowak"", rokUrodzenia: 1995)

osoba1.wyswietlDane()
osoba2.wyswietlDane()

let wiekOsoby1 = osoba1.obliczWiek()
let wiekOsoby2 = osoba2.obliczWiek()

if wiekOsoby1 < wiekOsoby2 {
    print(""\(osoba1.imie) jest młodszy/młodsza niż \(osoba2.imie)."")
} else if wiekOsoby1 > wiekOsoby2 {
    print(""\(osoba1.imie) jest starszy/starsza niż \(osoba2.imie)."")
} else {
    print(""\(osoba1.imie) i \(osoba2.imie) mają ten sam wiek."")
}





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Typ wyliczeniowy dla stanowiska
enum Stanowisko: String {
    case programista
    case projektant
    case manager
    // Dodaj inne stanowiska, jeśli są potrzebne
}

// Klasa Osoba
class Osoba {
    var imie: String
    var nazwisko: String
    var rokUrodzenia: Int
    
    init(imie: String, nazwisko: String, rokUrodzenia: Int) {
        self.imie = imie
        self.nazwisko = nazwisko
        self.rokUrodzenia = rokUrodzenia
    }
    
    func obliczWiek() -> Int {
        let aktualnyRok = 2023 // Możesz użyć funkcji do uzyskania aktualnego roku
        return aktualnyRok - rokUrodzenia
    }
    
    func wyswietlDane() {
        print(""Imię: \(imie), Nazwisko: \(nazwisko), Rok urodzenia: \(rokUrodzenia)"")
    }
}

// Klasa Pracownik dziedzicząca po klasie Osoba
class Pracownik: Osoba {
    var rokZatrudnienia: Int
    var stanowisko: Stanowisko
    var stawkaZaGodzine: Double
    var liczbaGodzin: Double
    var nazwaFirmy: String
    
    init(imie: String, nazwisko: String, rokUrodzenia: Int, rokZatrudnienia: Int, stanowisko: Stanowisko, stawkaZaGodzine: Double, liczbaGodzin: Double, nazwaFirmy: String) {
        self.rokZatrudnienia = rokZatrudnienia
        self.stanowisko = stanowisko
        self.stawkaZaGodzine = stawkaZaGodzine
        self.liczbaGodzin = liczbaGodzin
        self.nazwaFirmy = nazwaFirmy
        
        // Wywołaj init z klasy Osoba
        super.init(imie: imie, nazwisko: nazwisko, rokUrodzenia: rokUrodzenia)
    }
    
    func liczbaLatPracy() -> Int {
        let aktualnyRok = 2023 // Możesz użyć funkcji do uzyskania aktualnego roku
        return aktualnyRok - rokZatrudnienia
    }
    
    func obliczPensje() -> Double {
        return stawkaZaGodzine * liczbaGodzin
    }
    
    // Nadpisz funkcję wyswietlDane z klasy Osoba
    override func wyswietlDane() {
        super.wyswietlDane()
        print(""Rok zatrudnienia: \(rokZatrudnienia)"")
        print(""Stanowisko: \(stanowisko.rawValue)"")
        print(""Stawka za godzinę: \(stawkaZaGodzine)"")
        print(""Liczba godzin: \(liczbaGodzin)"")
        print(""Nazwa firmy: \(nazwaFirmy)"")
    }
}

// Przetestuj utworzone funkcje dla dwóch pracowników
let pracownik1 = Pracownik(imie: ""Jan"", nazwisko: ""Kowalski"", rokUrodzenia: 1990, rokZatrudnienia: 2015, stanowisko: .programista, stawkaZaGodzine: 50.0, liczbaGodzin: 160.0, nazwaFirmy: ""Firma A"")
let pracownik2 = Pracownik(imie: ""Anna"", nazwisko: ""Nowak"", rokUrodzenia: 1995, rokZatrudnienia: 2018, stanowisko: .projektant, stawkaZaGodzine: 45.0, liczbaGodzin: 140.0, nazwaFirmy: ""Firma B"")

pracownik1.wyswietlDane()
print(""Liczba lat pracy: \(pracownik1.liczbaLatPracy())"")
print(""Pensja: \(pracownik1.obliczPensje())"")

pracownik2.wyswietlDane()
print(""Liczba lat pracy: \(pracownik2.liczbaLatPracy())"")
print(""Pensja: \(pracownik2.obliczPensje())"")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Typ wyliczeniowy dla kierunku studiów
enum KierunekStudiow: String {
    case informatyka
    case matematyka
    case fizyka
    // Dodaj inne kierunki, jeśli są potrzebne
}

// Klasa Osoba
class Osoba {
    var imie: String
    var nazwisko: String
    var rokUrodzenia: Int
    
    init(imie: String, nazwisko: String, rokUrodzenia: Int) {
        self.imie = imie
        self.nazwisko = nazwisko
        self.rokUrodzenia = rokUrodzenia
    }
    
    func obliczWiek() -> Int {
        let aktualnyRok = 2023 // Możesz użyć funkcji do uzyskania aktualnego roku
        return aktualnyRok - rokUrodzenia
    }
    
    func wyswietlDane() {
        print(""Imię: \(imie), Nazwisko: \(nazwisko), Rok urodzenia: \(rokUrodzenia)"")
    }
}

// Klasa Student dziedzicząca po klasie Osoba
class Student: Osoba {
    var numerIndeksu: String
    var kierunekStudiow: KierunekStudiow
    var rokStudiow: Int
    var oceny: [Int]
    
    init(imie: String, nazwisko: String, rokUrodzenia: Int, numerIndeksu: String, kierunekStudiow: KierunekStudiow, rokStudiow: Int, oceny: [Int]) {
        self.numerIndeksu = numerIndeksu
        self.kierunekStudiow = kierunekStudiow
        self.rokStudiow = rokStudiow
        self.oceny = oceny
        
        // Wywołaj init z klasy Osoba
        super.init(imie: imie, nazwisko: nazwisko, rokUrodzenia: rokUrodzenia)
        
        // Sprawdź poprawność ocen (zakres od 2 do 5)
        for ocena in oceny {
            if ocena < 2 || ocena > 5 {
                print(""Błąd: Ocena \(ocena) jest niepoprawna. Wprowadź oceny od 2 do 5."")
                return
            }
        }
    }
    
    func obliczSrednia() -> Double {
        let sumaOcen = Double(oceny.reduce(0, +))
        return sumaOcen / Double(oceny.count)
    }
    
    // Nadpisz funkcję wyswietlDane z klasy Osoba
    override func wyswietlDane() {
        super.wyswietlDane()
        print(""Numer indeksu: \(numerIndeksu)"")
        print(""Kierunek studiów: \(kierunekStudiow.rawValue)"")
        print(""Rok studiów: \(rokStudiow)"")
        print(""Oceny: \(oceny)"")
    }
}

// Funkcja do wczytywania danych studenta od użytkownika
func wczytajDaneStudenta() -> Student? {
    print(""Podaj imię:"")
    guard let imie = readLine(), !imie.isEmpty else {
        print(""Błąd: Nie podano imienia."")
        return nil
    }
    
    print(""Podaj nazwisko:"")
    guard let nazwisko = readLine(), !nazwisko.isEmpty else {
        print(""Błąd: Nie podano nazwiska."")
        return nil
    }
    
    print(""Podaj rok urodzenia:"")
    guard let rokUrodzeniaInput = readLine(), let rokUrodzenia = Int(rokUrodzeniaInput) else {
        print(""Błąd: Nieprawidłowy rok urodzenia."")
        return nil
    }
    
    print(""Podaj numer indeksu:"")
    guard let numerIndeksu = readLine(), !numerIndeksu.isEmpty else {
        print(""Błąd: Nie podano numeru indeksu."")
        return nil
    }
    
    print(""Podaj kierunek studiów (informatyka, matematyka, fizyka):"")
    guard let kierunekInput = readLine(), let kierunekStudiow = KierunekStudiow(rawValue: kierunekInput) else {
        print(""Błąd: Nieprawidłowy kierunek studiów."")
        return nil
    }
    
    print(""Podaj rok studiów:"")
    guard let rokStudiowInput = readLine(), let rokStudiow = Int(rokStudiowInput) else {
        print(""Błąd: Nieprawidłowy rok studiów."")
        return nil
    }
    
    print(""Podaj oceny z 5 przedmiotów (oddzielone spacją):"")
    guard let ocenyInput = readLine(), let oceny = ocenyInput.components(separatedBy: "" "").compactMap({ Int($0) }) else {
        print(""Błąd: Nieprawidłowe oceny."")
        return nil
    }
    
    return Student(imie: imie, nazwisko: nazwisko, rokUrodzenia: rokUrodzenia, numerIndeksu: numerIndeksu, kierunekStudiow: kierunekStudiow, rokStudiow: rokStudiow, oceny: oceny)
}

// Funkcja wyświetlająca studentów studiujących na podanym kierunku
func wyswietlStudentowNaKierunku(studenci: [Student], kierunek: KierunekStudiow) {
    let studenciNaKierunku = studenci.filter { $0.kierunekStudiow == kierunek }
    
    if studenciNaKierunku.isEmpty {
        print(""Brak studentów na kierunku \(kierunek.rawValue)."")
    } else {
        print(""Studenci na kierunku \(kierunek.rawValue):"")
        for student in studenciNaKierunku {
            student.wyswietlDane()
            print(""Średnia ocen: \(student.obliczSrednia())\n"")
        }
    }
}

// Wczytaj liczbę studentów od użytkownika
print(""Podaj liczbę studentów:"")
guard let liczbaStudentowInput = readLine(), let liczbaStudentow = Int(liczbaStudentowInput) else {
    print(""Błąd: Nieprawidłowa liczba studentów."")
    exit(1)
}

// Wczytaj dane dla każdego studenta
var listaStudentow: [Student] = []
for _ in 1...liczbaStudentow {
    print(""\nWprowadź dane dla studenta \(listaStudentow.count + 1):"")
    if let student = wczytajDaneStudenta() {
        listaStudentow.append(student)
    } else {
        print(""Błąd: Nie udało się wczytać danych dla studenta."")
    }
}

// Wyświetl studentów na danym kierunku studiów
print(""\nPodaj kierunek studiów, aby wyświetlić studentów:"")
guard let kierunekInput = readLine(), let kierunek = KierunekStudiow(rawValue: kierunekInput) else {
    print(""Błąd: Nieprawidłowy kierunek studiów."")
    exit(1)
}

wyswietlStudentowNaKierunku(studenci: listaStudentow, kierunek: kierunek)
"
n8pWZtXz,nice snowybot,coinwalk,JavaScript,Friday 17th of November 2023 11:46:13 PM CDT,"var originalbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((((((((originalbal/2)/2)/2)/2)/2)/2)/10).toFixed(8));
var floatingbase = base;
var taget = (originalbal*24);
var groupedten = (base*10);
var groupedseven = (base*6.9);
var groupedeight = (base*7.9);
var groupedfive = (base*4.9);
var tobetnext = ((floatingbase*1).toFixed(8));
var bolance = originalbal;
var freak = (originalbal/10);
var mate = ((Math.floor(originalbal/groupedten))*groupedten);
var amaze = 0;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if ((bolance>(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedeight))&&(bolance!=amaze)){
    floatingbase = floatingbase*2;
    amaze = parseFloat(bolance);
}
if (bolance>mate){
mate = ((Math.floor((parseFloat(bolance))/groupedten))*groupedten);
}
if (((floatingbase*4)>=freak)&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))&&(bolance>=mate)){
    floatingbase = base;
    amaze = 0;
}
if (((floatingbase*3)>=(bolance/10))&&(bolance<originalbal)){
    floatingbase = base;
    amaze = 0;
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = ((floatingbase*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
var good = ((bolance-originalbal).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1000);
}
get();"
ypEPfUVW,Untitled,wtgftw,Swift,Friday 17th of November 2023 11:43:09 PM CDT,"// Zadanie 10.1

class Osoba {
    var imie: String
    var nazwisko: String
    var rokUrodzenia: Int

    init(imie: String, nazwisko: String, rokUrodzenia: Int) {
        self.imie = imie
        self.nazwisko = nazwisko
        self.rokUrodzenia = rokUrodzenia
    }

    func obliczWiek() -> Int {
        let aktualnyRok = 2023 // aktualny rok
        return aktualnyRok - rokUrodzenia
    }

    func wyswietlDane() {
        print(""Imię: \(imie), Nazwisko: \(nazwisko), Rok urodzenia: \(rokUrodzenia)"")
    }
}

let osoba1 = Osoba(imie: ""Jan"", nazwisko: ""Kowalski"", rokUrodzenia: 1990)
let osoba2 = Osoba(imie: ""Anna"", nazwisko: ""Nowak"", rokUrodzenia: 1995)

osoba1.wyswietlDane()
print(""Wiek: \(osoba1.obliczWiek()) lat"")

osoba2.wyswietlDane()
print(""Wiek: \(osoba2.obliczWiek()) lat"")

if osoba1.obliczWiek() > osoba2.obliczWiek() {
    print(""\(osoba1.imie) jest starsza od \(osoba2.imie)."")
} else if osoba1.obliczWiek() < osoba2.obliczWiek() {
    print(""\(osoba1.imie) jest młodsza od \(osoba2.imie)."")
} else {
    print(""\(osoba1.imie) i \(osoba2.imie) są w tym samym wieku."")
}


// Zadanie 10.2

enum Stanowisko {
    case manager, pracownik, specjalista
}

class Pracownik: Osoba {
    var rokZatrudnienia: Int
    var stanowisko: Stanowisko
    var stawkaZaGodzine: Double
    var liczbaGodzin: Double
    var firma: String

    init(imie: String, nazwisko: String, rokUrodzenia: Int, rokZatrudnienia: Int, stanowisko: Stanowisko, stawkaZaGodzine: Double, liczbaGodzin: Double, firma: String) {
        self.rokZatrudnienia = rokZatrudnienia
        self.stanowisko = stanowisko
        self.stawkaZaGodzine = stawkaZaGodzine
        self.liczbaGodzin = liczbaGodzin
        self.firma = firma
        super.init(imie: imie, nazwisko: nazwisko, rokUrodzenia: rokUrodzenia)
    }

    func liczbaLatPracy() -> Int {
        let aktualnyRok = 2023 // aktualny rok
        return aktualnyRok - rokZatrudnienia
    }

    func obliczPensje() -> Double {
        return stawkaZaGodzine * liczbaGodzin
    }

    override func wyswietlDane() {
        super.wyswietlDane()
        print(""Rok zatrudnienia: \(rokZatrudnienia)"")
        print(""Stanowisko: \(stanowisko)"")
        print(""Firma: \(firma)"")
        print(""Liczba lat pracy: \(liczbaLatPracy())"")
        print(""Pensja: \(obliczPensje())"")
    }
}

let pracownik1 = Pracownik(imie: ""Adam"", nazwisko: ""Nowak"", rokUrodzenia: 1985, rokZatrudnienia: 2010, stanowisko: .specjalista, stawkaZaGodzine: 50.0, liczbaGodzin: 160.0, firma: ""XYZ Corp"")

let pracownik2 = Pracownik(imie: ""Ewa"", nazwisko: ""Kowalska"", rokUrodzenia: 1990, rokZatrudnienia: 2015, stanowisko: .pracownik, stawkaZaGodzine: 40.0, liczbaGodzin: 150.0, firma: ""ABC Inc"")

pracownik1.wyswietlDane()
pracownik2.wyswietlDane()


// Zadanie 10.3

enum KierunekStudiow: String {
    case informatyka, matematyka, fizyka, chemia
}

class Student: Osoba {
    var numerIndeksu: String
    var kierunekStudiow: KierunekStudiow
    var rokStudiow: Int
    var oceny: [Double]

    init(imie: String, nazwisko: String, rokUrodzenia: Int, numerIndeksu: String, kierunekStudiow: KierunekStudiow, rokStudiow: Int, oceny: [Double]) {
        self.numerIndeksu = numerIndeksu
        self.kierunekStudiow = kierunekStudiow
        self.rokStudiow = rokStudiow
        self.oceny = oceny

        super.init(imie: imie, nazwisko: nazwisko, rokUrodzenia: rokUrodzenia)
    }

    func sredniaOcen() -> Double {
        let sumaOcen = oceny.reduce(0, +)
        return sumaOcen / Double(oceny.count)
    }

    override func wyswietlDane() {
        super.wyswietlDane()
        print(""Numer indeksu: \(numerIndeksu)"")
        print(""Kierunek studiów: \(kierunekStudiow.rawValue)"")
        print(""Rok studiów: \(rokStudiow)"")
        print(""Oceny: \(oceny)"")
        print(""Średnia ocen: \(sredniaOcen())"")
    }
}

print(""Podaj liczbę studentów:"")
if let liczbaStudentow = readLine(), let liczba = Int(liczbaStudentow) {
    var studenci: [Student] = []

    for _ in 0..<liczba {
        print(""Podaj imię studenta:"")
        guard let imie = readLine() else { continue }

        print(""Podaj nazwisko studenta:"")
        guard let nazwisko = readLine() else { continue }

        print(""Podaj rok urodzenia studenta:"")
        guard let rokUrodzeniaString = readLine(), let rokUrodzenia = Int(rokUrodzeniaString) else { continue }

        print(""Podaj numer indeksu studenta:"")
        guard let numerIndeksu = readLine() else { continue }

        print(""Podaj kierunek studiów studenta (informatyka, matematyka, fizyka, chemia):"")
        guard let kierunekString = readLine(), let kierunek = KierunekStudiow(rawValue: kierunekString) else { continue }

        print(""Podaj rok studiów studenta:"")
        guard let rokStudiowString = readLine(), let rokStudiow = Int(rokStudiowString) else { continue }

        print(""Podaj oceny studenta (oddzielone przecinkiem):"")
        guard let ocenyString = readLine(), let oceny = ocenyString.components(separatedBy: "","").compactMap({ Double($0) }) else { continue }

        let student = Student(imie: imie, nazwisko: nazwisko, rokUrodzenia: rokUrodzenia, numerIndeksu: numerIndeksu, kierunekStudiow: kierunek, rokStudiow: rokStudiow, oceny: oceny)
        studenci.append(student)
    }

    for student in studenci {
        student.wyswietlDane()
        print()
    }

    print(""Podaj kierunek studiów do wyświetlenia:"")
    if let kierunekString = readLine(), let kierunek = KierunekStudiow(rawValue: kierunekString) {
        let studenciNaKierunku = studenci.filter { $0.kierunekStudiow == kierunek }
        for student in studenciNaKierunku {
            student.wyswietlDane()
            print()
        }
    } else {
        print(""Błędny kierunek studiów."")
    }
}


// Zadanie 10.4

// Polecenie 1
class StudentNaErasmusie: Student {
    var nazwaUczelniZaGranica: String
    var dataRozpoczeciaErasmusa: String
    var dataZakonczeniaErasmusa: String
    var kursy: [(nazwa: String, ocena: Double)]

    // Polecenie 2
    init(imie: String, nazwisko: String, rokUrodzenia: Int, numerIndeksu: String, kierunekStudiow: KierunekStudiow, rokStudiow: Int, oceny: [Double], nazwaUczelniZaGranica: String, dataRozpoczeciaErasmusa: String, dataZakonczeniaErasmusa: String, kursy: [(nazwa: String, ocena: Double)]) {
        self.nazwaUczelniZaGranica = nazwaUczelniZaGranica
        self.dataRozpoczeciaErasmusa = dataRozpoczeciaErasmusa
        self.dataZakonczeniaErasmusa = dataZakonczeniaErasmusa
        self.kursy = kursy

        super.init(imie: imie, nazwisko: nazwisko, rokUrodzenia: rokUrodzenia, numerIndeksu: numerIndeksu, kierunekStudiow: kierunekStudiow, rokStudiow: rokStudiow, oceny: oceny)
    }

    // Polecenie 4
    func czasNaErasmusie() -> Int {
        // Implementacja funkcji
    }

    // Polecenie 5
    func ocenaZErasmusa() -> Double {
        // Implementacja funkcji
    }

    // Polecenie 3
    override func wyswietlDane() {
        super.wyswietlDane()
        print(""Uczelnia za granicą: \(nazwaUczelniZaGranica)"")
        print(""Rozpoczęcie Erasmusa: \(dataRozpoczeciaErasmusa)"")
        print(""Zakończenie Erasmusa: \(dataZakonczeniaErasmusa)"")
        print(""Kursy na Erasmusie:"")
        for kurs in kursy {
            print(""\(kurs.nazwa) - Ocena: \(kurs.ocena)"")
        }
        print(""Czas spędzony na Erasmusie: \(czasNaErasmusie()) dni"")
        print(""Średnia ocena z Erasmusa: \(ocenaZErasmusa())"")
    }
}

// Przykładowe użycie

let studentErasmus = StudentNaErasmusie(imie: ""Alicja"", nazwisko: ""Nowak"", rokUrodzenia: 1998, numerIndeksu: ""12345"", kierunekStudiow: .informatyka, rokStudiow: 3, oceny: [4.5, 5.0, 4.0, 3.5, 5.0], nazwaUczelniZaGranica: ""Uniwersytet XYZ"", dataRozpoczeciaErasmusa: ""2023-09-01"", dataZakonczeniaErasmusa: ""2024-02-29"", kursy: [(""Historia Sztuki"", 4.0), (""Język Obcy"", 5.0)])
studentErasmus.wyswietlDane()
"
aqtZecV9,BTC Wallet Credentials have been reset,castlclass_20,GetText,Friday 17th of November 2023 11:25:27 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
gamax1:CUJbMv on 212.224.93.130
You can connect via SSH.
Regards"
S3Mx6W3m,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Friday 17th of November 2023 11:23:20 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be: 
josli45:KoE3dG1 on 159.223.212.34
You can connect via SSH.

Regards
BT665907"
LKkwwjg4,News Nov17 23,Newscaster_Ned,Email,Friday 17th of November 2023 10:53:34 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

N‎e‎w‎s‎ ‎h‎e‎r‎e‎ ‎t‎h‎e‎ ‎i‎s‎.‎.‎.‎ ‎W‎o‎w‎ ‎t‎h‎a‎t‎ ‎c‎a‎m‎e‎ ‎o‎u‎t‎ ‎b‎a‎d‎l‎y‎.‎

B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎L‎i‎v‎e‎ ‎f‎r‎o‎m‎ ‎W‎a‎r‎ ‎Z‎o‎n‎e‎

P‎o‎l‎l‎a‎k‎ ‎J‎o‎i‎n‎s‎ ‎F‎i‎r‎s‎t‎ ‎M‎e‎d‎i‎a‎ ‎T‎o‎u‎r‎ ‎o‎f‎ ‎T‎o‎w‎n‎ ‎T‎e‎r‎r‎o‎r‎i‎z‎e‎d‎ ‎b‎y‎ ‎H‎a‎m‎a‎s‎

’‎R‎e‎d‎ ‎A‎l‎e‎r‎t‎’‎:‎ ‎R‎o‎c‎k‎e‎t‎s‎ ‎F‎i‎r‎e‎d‎ ‎*‎D‎u‎r‎i‎n‎g‎*‎ ‎V‎i‎s‎i‎t‎,‎ ‎J‎o‎u‎r‎n‎o‎s‎ ‎T‎a‎k‎e‎ ‎C‎o‎v‎e‎r‎
B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎p‎a‎r‎t‎i‎c‎i‎p‎a‎t‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎-‎e‎v‎e‎r‎ ‎m‎e‎d‎i‎a‎ ‎v‎i‎s‎i‎t‎ ‎t‎o‎ ‎N‎e‎t‎i‎v‎ ‎H‎a‎A‎s‎a‎r‎a‎,‎ ‎a‎n‎ ‎a‎g‎r‎i‎c‎u‎l‎t‎u‎r‎a‎l‎ ‎t‎o‎w‎n‎ ‎t‎h‎a‎t‎ ‎w‎a‎s‎ ‎a‎t‎t‎a‎c‎k‎e‎d‎ ‎b‎y‎ ‎H‎a‎m‎a‎s‎ ‎o‎n‎ ‎O‎c‎t‎o‎b‎e‎r‎ ‎7‎.‎

D‎e‎m‎ ‎R‎e‎p‎.‎ ‎G‎o‎l‎d‎m‎a‎n‎:‎ ‎W‎e‎'‎v‎e‎ ‎N‎o‎w‎ ‎S‎e‎e‎n‎ ‎L‎a‎t‎e‎n‎t‎ ‎L‎e‎f‎t‎-‎W‎i‎n‎g‎ ‎A‎n‎t‎i‎s‎e‎m‎i‎t‎i‎s‎m‎ ‎G‎o‎i‎n‎g‎ ‎P‎u‎b‎l‎i‎c‎
D‎e‎m‎ ‎R‎e‎p‎.‎ ‎G‎o‎l‎d‎m‎a‎n‎:‎ ‎W‎e‎'‎v‎e‎ ‎N‎o‎w‎ ‎S‎e‎e‎n‎ ‎L‎a‎t‎e‎n‎t‎ ‎L‎e‎f‎t‎-‎W‎i‎n‎g‎ ‎A‎n‎t‎i‎s‎e‎m‎i‎t‎i‎s‎m‎ ‎G‎o‎i‎n‎g‎ ‎P‎u‎b‎l‎i‎c‎
9‎0‎
I‎B‎M‎,‎ ‎E‎U‎ ‎S‎u‎s‎p‎e‎n‎d‎ ‎A‎d‎v‎e‎r‎t‎i‎s‎i‎n‎g‎ ‎o‎n‎ ‎E‎l‎o‎n‎ ‎M‎u‎s‎k‎'‎s‎ ‎X‎/‎T‎w‎i‎t‎t‎e‎r‎
I‎B‎M‎,‎ ‎E‎U‎ ‎S‎u‎s‎p‎e‎n‎d‎ ‎A‎d‎v‎e‎r‎t‎i‎s‎i‎n‎g‎ ‎o‎n‎ ‎E‎l‎o‎n‎ ‎M‎u‎s‎k‎'‎s‎ ‎X‎/‎T‎w‎i‎t‎t‎e‎r‎
1‎,‎1‎7‎8‎
R‎e‎p‎o‎r‎t‎:‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎t‎o‎ ‎E‎s‎c‎a‎p‎e‎ ‎C‎h‎a‎r‎g‎e‎s‎ ‎f‎o‎r‎ ‎M‎i‎s‎h‎a‎n‎d‎l‎i‎n‎g‎ ‎C‎l‎a‎s‎s‎i‎f‎i‎e‎d‎ ‎D‎o‎c‎s‎ ‎
7‎,‎0‎7‎6‎
C‎o‎l‎o‎r‎a‎d‎o‎ ‎J‎u‎d‎g‎e‎ ‎R‎u‎l‎e‎s‎ ‎T‎r‎u‎m‎p‎ ‎M‎u‎s‎t‎ ‎A‎p‎p‎e‎a‎r‎ ‎o‎n‎ ‎B‎a‎l‎l‎o‎t‎
8‎9‎8‎
H‎i‎g‎h‎ ‎S‎c‎h‎o‎o‎l‎ ‎F‎o‎o‎t‎b‎a‎l‎l‎ ‎C‎o‎a‎c‎h‎ ‎F‎i‎r‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎H‎o‎l‎d‎i‎n‎g‎ ‎B‎a‎p‎t‎i‎s‎m‎ ‎f‎o‎r‎ ‎2‎0‎ ‎P‎l‎a‎y‎e‎r‎s‎
H‎i‎g‎h‎ ‎S‎c‎h‎o‎o‎l‎ ‎F‎o‎o‎t‎b‎a‎l‎l‎ ‎C‎o‎a‎c‎h‎ ‎F‎i‎r‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎H‎o‎l‎d‎i‎n‎g‎ ‎B‎a‎p‎t‎i‎s‎m‎ ‎f‎o‎r‎ ‎2‎0‎ ‎P‎l‎a‎y‎e‎r‎s‎
8‎6‎0‎
M‎a‎n‎c‎h‎i‎n‎:‎ ‎T‎r‎u‎m‎p‎ ‎E‎l‎e‎c‎t‎e‎d‎ ‎A‎g‎a‎i‎n‎ ‎'‎W‎o‎u‎l‎d‎ ‎D‎e‎s‎t‎r‎o‎y‎ ‎D‎e‎m‎o‎c‎r‎a‎c‎y‎'‎
M‎a‎n‎c‎h‎i‎n‎:‎ ‎T‎r‎u‎m‎p‎ ‎E‎l‎e‎c‎t‎e‎d‎ ‎A‎g‎a‎i‎n‎ ‎'‎W‎o‎u‎l‎d‎ ‎D‎e‎s‎t‎r‎o‎y‎ ‎D‎e‎m‎o‎c‎r‎a‎c‎y‎'‎
5‎,‎0‎7‎5‎
B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎J‎o‎i‎n‎s‎ ‎F‎i‎r‎s‎t‎ ‎M‎e‎d‎i‎a‎ ‎V‎i‎s‎i‎t‎ ‎t‎o‎ ‎N‎e‎t‎i‎v‎ ‎H‎a‎A‎s‎a‎r‎a‎,‎ ‎T‎o‎w‎n‎ ‎H‎i‎t‎ ‎b‎y‎ ‎H‎a‎m‎a‎s‎
B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎J‎o‎i‎n‎s‎ ‎F‎i‎r‎s‎t‎ ‎M‎e‎d‎i‎a‎ ‎V‎i‎s‎i‎t‎ ‎t‎o‎ ‎N‎e‎t‎i‎v‎ ‎H‎a‎A‎s‎a‎r‎a‎,‎ ‎T‎o‎w‎n‎ ‎H‎i‎t‎ ‎b‎y‎ ‎H‎a‎m‎a‎s‎
3‎,‎0‎5‎2‎
B‎l‎a‎c‎k‎ ‎C‎h‎i‎c‎a‎g‎o‎a‎n‎s‎ ‎R‎a‎l‎l‎y‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎S‎a‎n‎c‎t‎u‎a‎r‎y‎ ‎P‎o‎l‎i‎c‎i‎e‎s‎,‎ ‎P‎r‎o‎m‎i‎s‎e‎ ‎t‎o‎ ‎V‎o‎t‎e‎ ‎f‎o‎r‎ ‎G‎O‎P‎
B‎l‎a‎c‎k‎ ‎C‎h‎i‎c‎a‎g‎o‎a‎n‎s‎ ‎R‎a‎l‎l‎y‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎S‎a‎n‎c‎t‎u‎a‎r‎y‎ ‎P‎o‎l‎i‎c‎i‎e‎s‎,‎ ‎P‎r‎o‎m‎i‎s‎e‎ ‎t‎o‎ ‎V‎o‎t‎e‎ ‎f‎o‎r‎ ‎G‎O‎P‎
3‎4‎7‎
R‎e‎p‎o‎r‎t‎:‎ ‎W‎o‎r‎r‎y‎ ‎M‎o‎u‎n‎t‎s‎ ‎A‎b‎o‎u‎t‎ ‎V‎i‎o‎l‎e‎n‎t‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎ ‎a‎t‎ ‎D‎e‎m‎ ‎C‎o‎n‎v‎e‎n‎t‎i‎o‎n‎
R‎e‎p‎o‎r‎t‎:‎ ‎W‎o‎r‎r‎y‎ ‎M‎o‎u‎n‎t‎s‎ ‎A‎b‎o‎u‎t‎ ‎V‎i‎o‎l‎e‎n‎t‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎ ‎a‎t‎ ‎D‎e‎m‎ ‎C‎o‎n‎v‎e‎n‎t‎i‎o‎n‎

2‎ ‎C‎o‎w‎a‎r‎d‎l‎y‎ ‎N‎i‎g‎ ‎N‎o‎g‎ ‎G‎u‎a‎r‎d‎s‎ ‎B‎u‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎R‎u‎n‎n‎i‎n‎g‎ ‎A‎w‎a‎y‎ ‎L‎i‎k‎e‎ ‎a‎ ‎P‎u‎s‎s‎y‎ ‎f‎r‎o‎m‎ ‎S‎o‎l‎d‎i‎e‎r‎ ‎B‎e‎i‎n‎g‎ ‎A‎t‎t‎a‎c‎k‎e‎d‎ ‎b‎y‎ ‎S‎a‎n‎d‎ ‎N‎i‎g‎g‎e‎r‎s‎.‎

I‎n‎ ‎t‎h‎e‎i‎r‎ ‎d‎e‎f‎e‎n‎s‎e‎,‎ ‎t‎h‎e‎y‎ ‎w‎e‎r‎e‎ ‎o‎n‎l‎y‎ ‎h‎u‎r‎r‎y‎i‎n‎g‎ ‎a‎w‎a‎y‎ ‎s‎o‎ ‎t‎h‎e‎y‎ ‎c‎o‎u‎l‎d‎ ‎g‎e‎t‎ ‎t‎h‎e‎ ‎l‎a‎t‎e‎s‎t‎ ‎K‎F‎C‎ ‎b‎u‎c‎k‎e‎t‎ ‎d‎e‎a‎l‎ ‎a‎t‎ ‎l‎u‎n‎c‎h‎t‎i‎m‎e‎.‎


S‎t‎.‎ ‎J‎u‎d‎e‎ ‎M‎o‎n‎k‎e‎y‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎S‎t‎e‎a‎l‎i‎n‎g‎ ‎F‎u‎n‎d‎s‎ ‎f‎r‎o‎m‎ ‎L‎i‎t‎t‎l‎e‎ ‎G‎i‎r‎l‎ ‎w‎i‎t‎h‎ ‎M‎u‎m‎p‎s‎.‎


W‎o‎m‎a‎n‎ ‎D‎i‎e‎s‎ ‎a‎t‎ ‎R‎i‎t‎e‎ ‎A‎i‎d‎ ‎A‎f‎t‎e‎r‎ ‎P‎a‎c‎k‎ ‎o‎f‎ ‎B‎l‎a‎c‎k‎ ‎R‎i‎d‎e‎r‎s‎ ‎B‎e‎a‎t‎ ‎H‎e‎r‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎.‎


C‎h‎a‎r‎g‎e‎s‎ ‎F‎i‎l‎e‎d‎ ‎f‎o‎r‎ ‎4‎ ‎N‎i‎g‎g‎a‎r‎d‎ ‎S‎i‎m‎i‎a‎n‎s‎ ‎W‎h‎o‎ ‎K‎i‎l‎l‎e‎d‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎W‎h‎i‎t‎e‎ ‎W‎o‎m‎a‎n‎ ‎i‎n‎ ‎C‎a‎r‎j‎a‎c‎k‎i‎n‎g‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎P‎e‎n‎i‎s‎.‎

T‎o‎d‎a‎y‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
7‎8‎°‎
/‎5‎9‎°‎
3‎%‎
S‎W‎ ‎1‎1‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎7‎ ‎|‎ ‎D‎a‎y‎
7‎8‎°‎
3‎%‎
S‎W‎
1‎1‎
 ‎
m‎p‎h‎
A‎r‎e‎a‎s‎ ‎o‎f‎ ‎d‎e‎n‎s‎e‎ ‎m‎o‎r‎n‎i‎n‎g‎ ‎f‎o‎g‎.‎ ‎C‎l‎o‎u‎d‎y‎ ‎e‎a‎r‎l‎y‎,‎ ‎b‎e‎c‎o‎m‎i‎n‎g‎ ‎m‎o‎s‎t‎l‎y‎ ‎s‎u‎n‎n‎y‎ ‎t‎h‎i‎s‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎H‎i‎g‎h‎ ‎7‎8‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎W‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
7‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
5‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎5‎6‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
5‎:‎3‎3‎ ‎p‎m‎
F‎r‎i‎ ‎1‎7‎ ‎|‎ ‎N‎i‎g‎h‎t‎
5‎9‎°‎
1‎0‎%‎
N‎
9‎
 ‎
m‎p‎h‎
A‎ ‎f‎e‎w‎ ‎p‎a‎s‎s‎i‎n‎g‎ ‎c‎l‎o‎u‎d‎s‎.‎ ‎L‎o‎w‎ ‎5‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
8‎8‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎1‎:‎2‎1‎ ‎a‎m‎
W‎a‎x‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
9‎:‎2‎9‎ ‎p‎m‎
S‎a‎t‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎0‎°‎
/‎5‎7‎°‎
9‎%‎
N‎N‎E‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎9‎
C‎l‎o‎u‎d‎y‎
7‎1‎°‎
/‎6‎3‎°‎
2‎1‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎0‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎5‎4‎°‎
2‎4‎%‎
S‎S‎W‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎4‎°‎
/‎4‎5‎°‎
4‎%‎
N‎N‎W‎ ‎1‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎2‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
6‎2‎°‎
/‎4‎1‎°‎
1‎%‎
N‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
6‎3‎°‎
/‎4‎4‎°‎
1‎7‎%‎
S‎ ‎7‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎1‎°‎
/‎5‎0‎°‎
1‎0‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎5‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎0‎°‎
/‎4‎3‎°‎
3‎2‎%‎
N‎ ‎1‎3‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎6‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
5‎5‎°‎
/‎4‎4‎°‎
2‎2‎%‎
N‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎7‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
5‎6‎°‎
/‎4‎5‎°‎
3‎6‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎2‎°‎
/‎5‎0‎°‎
2‎0‎%‎
N‎E‎ ‎8‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎9‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎6‎°‎
/‎5‎4‎°‎
3‎7‎%‎
E‎S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎3‎0‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
6‎7‎°‎
/‎5‎3‎°‎
5‎8‎%‎
W‎N‎W‎ ‎1‎0‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎1‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎5‎°‎
/‎5‎1‎°‎
2‎4‎%‎
N‎N‎E‎ ‎9‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎T‎h‎e‎ ‎s‎c‎r‎e‎a‎m‎i‎n‎g‎ ‎b‎l‎a‎c‎k‎ ‎m‎a‎r‎s‎h‎m‎a‎l‎l‎o‎w‎ ‎m‎a‎n‎.‎ ‎☻‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

G‎T‎F‎O‎
G‎T‎F‎O‎ ‎m‎e‎a‎n‎s‎ ‎y‎o‎u‎ ‎h‎a‎v‎e‎ ‎j‎u‎s‎t‎ ‎b‎e‎e‎n‎ ‎t‎o‎l‎d‎ ‎t‎o‎ ‎g‎e‎t‎ ‎t‎h‎e‎ ‎f‎u‎c‎k‎ ‎o‎u‎t‎.‎ ‎U‎s‎u‎a‎l‎l‎y‎ ‎s‎e‎n‎t‎ ‎i‎n‎ ‎r‎e‎a‎c‎t‎i‎o‎n‎ ‎t‎o‎ ‎t‎r‎o‎l‎l‎s‎ ‎o‎r‎ ‎n‎o‎o‎b‎i‎s‎h‎ ‎b‎e‎h‎a‎v‎i‎o‎r‎,‎ ‎y‎o‎u‎ ‎a‎r‎e‎ ‎m‎o‎r‎e‎ ‎t‎h‎a‎n‎ ‎l‎i‎k‎e‎l‎y‎ ‎t‎o‎ ‎b‎e‎ ‎t‎o‎l‎d‎ ‎t‎o‎ ‎G‎T‎F‎O‎ ‎i‎n‎ ‎y‎o‎u‎r‎ ‎j‎o‎u‎r‎n‎e‎y‎ ‎a‎c‎r‎o‎s‎s‎ ‎t‎h‎e‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎s‎.‎ ‎P‎o‎p‎u‎l‎a‎r‎ ‎r‎e‎s‎p‎o‎n‎s‎e‎s‎ ‎t‎o‎ ‎""‎G‎T‎F‎O‎""‎ ‎a‎r‎e‎ ‎""‎S‎T‎F‎U‎""‎,‎ ‎""‎O‎ ‎R‎L‎Y‎?‎""‎,‎ ‎a‎n‎d‎ ‎""‎N‎O‎ ‎U‎""‎.‎

(‎(‎ ‎W‎h‎a‎t‎ ‎-‎ ‎Y‎o‎u‎'‎r‎e‎ ‎S‎t‎i‎l‎l‎ ‎H‎e‎r‎e‎?‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎Y‎o‎u‎ ‎d‎o‎n‎'‎t‎ ‎k‎n‎o‎w‎ ‎i‎t‎ ‎y‎e‎t‎,‎ ‎b‎u‎t‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎i‎s‎ ‎r‎e‎a‎l‎l‎y‎ ‎S‎a‎n‎t‎a‎ ‎C‎l‎a‎u‎s‎.‎ ‎Y‎e‎p‎.‎ ‎H‎e‎'‎s‎ ‎b‎e‎e‎n‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎o‎v‎e‎r‎ ‎y‎o‎u‎ ‎t‎h‎i‎s‎ ‎w‎h‎o‎l‎e‎ ‎t‎i‎m‎e‎.‎ ‎A‎n‎d‎ ‎h‎e‎ ‎l‎o‎v‎e‎s‎ ‎y‎o‎u‎.‎ ‎H‎e‎'‎s‎ ‎y‎o‎u‎r‎ ‎f‎r‎i‎e‎n‎d‎.‎

I‎ ‎W‎a‎n‎t‎ ‎t‎o‎ ‎M‎a‎k‎e‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎A‎I‎ ‎V‎i‎d‎e‎o‎s‎…‎
A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎N‎o‎v‎e‎m‎b‎e‎r‎ ‎1‎7‎,‎ ‎2‎0‎2‎3‎


T‎h‎i‎s‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎A‎I‎ ‎a‎u‎d‎i‎o‎ ‎i‎s‎ ‎g‎r‎e‎a‎t‎.‎

I‎ ‎w‎a‎n‎t‎ ‎t‎o‎ ‎s‎t‎a‎r‎t‎ ‎m‎a‎k‎i‎n‎g‎ ‎t‎h‎e‎s‎e‎.‎

B‎u‎t‎ ‎I‎ ‎d‎o‎n‎’‎t‎ ‎h‎a‎v‎e‎ ‎t‎i‎m‎e‎.‎ ‎S‎p‎e‎a‎k‎i‎n‎g‎ ‎o‎f‎ ‎A‎I‎ ‎a‎n‎d‎ ‎n‎o‎t‎ ‎h‎a‎v‎i‎n‎g‎ ‎t‎i‎m‎e‎,‎ ‎I‎ ‎a‎l‎s‎o‎ ‎d‎o‎n‎’‎t‎ ‎h‎a‎v‎e‎ ‎t‎i‎m‎e‎ ‎t‎o‎ ‎f‎i‎n‎i‎s‎h‎ ‎t‎h‎e‎ ‎A‎I‎ ‎b‎l‎i‎t‎z‎,‎ ‎w‎h‎i‎c‎h‎ ‎d‎i‎d‎n‎’‎t‎ ‎r‎e‎a‎l‎l‎y‎ ‎s‎t‎a‎r‎t‎ ‎u‎n‎t‎i‎l‎ ‎y‎e‎s‎t‎e‎r‎d‎a‎y‎.‎

T‎o‎ ‎b‎e‎ ‎c‎l‎e‎a‎r‎,‎ ‎t‎h‎e‎s‎e‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎c‎o‎r‎e‎ ‎A‎I‎ ‎W‎e‎e‎k‎ ‎a‎r‎t‎i‎c‎l‎e‎s‎ ‎s‎o‎ ‎f‎a‎r‎:‎

W‎A‎R‎N‎I‎N‎G‎:‎ ‎R‎e‎a‎l‎i‎t‎y‎ ‎M‎a‎y‎ ‎b‎e‎ ‎C‎o‎l‎l‎a‎p‎s‎i‎n‎g‎ ‎(‎S‎p‎e‎c‎i‎a‎l‎ ‎“‎I‎l‎l‎n‎e‎s‎s‎ ‎R‎e‎v‎e‎l‎a‎t‎i‎o‎n‎s‎:‎ ‎A‎I‎ ‎W‎e‎e‎k‎ ‎B‎l‎i‎t‎z‎”‎ ‎P‎r‎e‎v‎i‎e‎w‎)‎
M‎e‎m‎e‎t‎i‎c‎ ‎M‎o‎n‎d‎a‎y‎:‎ ‎I‎ ‎M‎a‎y‎ ‎N‎o‎t‎ ‎A‎g‎r‎e‎e‎ ‎w‎i‎t‎h‎ ‎Y‎o‎u‎r‎ ‎P‎r‎o‎m‎p‎t‎,‎ ‎B‎u‎t‎ ‎I‎’‎l‎l‎ ‎D‎i‎e‎ ‎f‎o‎r‎ ‎Y‎o‎u‎r‎ ‎R‎i‎g‎h‎t‎ ‎t‎o‎ ‎T‎y‎p‎e‎ ‎I‎t‎
E‎l‎o‎n‎ ‎N‎a‎m‎e‎s‎ ‎A‎I‎ ‎A‎f‎t‎e‎r‎ ‎W‎o‎r‎s‎t‎ ‎H‎e‎i‎n‎l‎e‎i‎n‎ ‎B‎o‎o‎k‎ ‎o‎f‎ ‎A‎l‎l‎
A‎I‎ ‎W‎e‎e‎k‎ ‎B‎L‎I‎T‎Z‎:‎ ‎W‎h‎y‎ ‎D‎o‎n‎’‎t‎ ‎C‎a‎p‎t‎c‎h‎a‎s‎ ‎A‎s‎k‎ ‎W‎h‎i‎c‎h‎ ‎H‎a‎n‎d‎s‎ ‎H‎a‎v‎e‎ ‎t‎h‎e‎ ‎C‎o‎r‎r‎e‎c‎t‎ ‎N‎u‎m‎b‎e‎r‎ ‎o‎f‎ ‎F‎i‎n‎g‎e‎r‎s‎?‎
A‎m‎i‎d‎s‎t‎ ‎S‎t‎a‎l‎l‎i‎n‎g‎ ‎A‎I‎ ‎W‎e‎e‎k‎,‎ ‎A‎n‎g‎l‎i‎n‎ ‎B‎e‎g‎s‎ ‎f‎o‎r‎ ‎A‎i‎d‎,‎ ‎C‎l‎a‎i‎m‎i‎n‎g‎ ‎H‎e‎ ‎W‎i‎l‎l‎ ‎H‎a‎v‎e‎ ‎a‎ ‎H‎o‎l‎e‎ ‎D‎r‎i‎l‎l‎e‎d‎ ‎i‎n‎ ‎H‎i‎s‎ ‎S‎k‎u‎l‎l‎
P‎r‎o‎o‎f‎ ‎T‎h‎a‎t‎ ‎B‎i‎n‎g‎ ‎I‎m‎a‎g‎e‎s‎ ‎i‎s‎ ‎A‎d‎d‎i‎n‎g‎ ‎W‎o‎r‎d‎s‎ ‎t‎o‎ ‎P‎r‎o‎m‎p‎t‎s‎ ‎t‎o‎ ‎M‎a‎k‎e‎ ‎Y‎o‎u‎r‎ ‎I‎m‎a‎g‎e‎s‎ ‎I‎n‎t‎e‎r‎r‎a‎c‎i‎a‎l‎
I‎t‎’‎s‎ ‎n‎o‎t‎ ‎t‎h‎a‎t‎ ‎b‎a‎d‎,‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎.‎

M‎a‎y‎b‎e‎ ‎I‎’‎m‎ ‎b‎e‎i‎n‎g‎ ‎t‎o‎o‎ ‎h‎a‎r‎d‎ ‎o‎n‎ ‎m‎y‎s‎e‎l‎f‎.‎

I‎t‎’‎s‎ ‎j‎u‎s‎t‎ ‎t‎h‎a‎t‎ ‎I‎ ‎h‎a‎v‎e‎n‎’‎t‎ ‎g‎o‎t‎t‎e‎n‎ ‎t‎o‎ ‎a‎n‎y‎ ‎o‎f‎ ‎m‎y‎ ‎m‎a‎i‎n‎ ‎p‎o‎i‎n‎t‎s‎ ‎y‎e‎t‎,‎ ‎a‎n‎d‎ ‎n‎o‎w‎ ‎I‎ ‎h‎a‎v‎e‎ ‎t‎h‎i‎n‎g‎s‎ ‎t‎o‎ ‎d‎o‎.‎

H‎o‎w‎e‎v‎e‎r‎,‎ ‎a‎s‎ ‎I‎ ‎s‎a‎i‎d‎ ‎y‎e‎s‎t‎e‎r‎d‎a‎y‎,‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎r‎e‎a‎s‎o‎n‎ ‎t‎o‎ ‎r‎u‎s‎h‎ ‎a‎s‎ ‎l‎o‎n‎g‎ ‎a‎s‎ ‎w‎e‎’‎r‎e‎ ‎a‎l‎l‎ ‎h‎a‎v‎i‎n‎g‎ ‎f‎u‎n‎.‎

C‎l‎i‎c‎k‎ ‎h‎e‎r‎e‎ ‎f‎o‎r‎ ‎F‎u‎l‎l‎ ‎“‎I‎l‎l‎n‎e‎s‎s‎ ‎R‎e‎v‎e‎l‎a‎t‎i‎o‎n‎s‎”‎ ‎C‎o‎l‎l‎e‎c‎t‎e‎d‎ ‎T‎e‎x‎t‎s‎ ‎(‎S‎o‎ ‎F‎a‎r‎)‎
N‎e‎x‎t‎ ‎w‎e‎e‎k‎ ‎i‎s‎ ‎F‎l‎e‎e‎c‎e‎ ‎W‎e‎e‎k‎ ‎A‎K‎A‎ ‎“‎T‎h‎e‎ ‎G‎r‎e‎a‎t‎ ‎F‎l‎e‎e‎c‎i‎n‎g‎,‎”‎ ‎b‎u‎t‎ ‎I‎’‎l‎l‎ ‎f‎i‎n‎i‎s‎h‎ ‎u‎p‎ ‎A‎I‎ ‎W‎e‎e‎k‎ ‎a‎s‎ ‎w‎e‎l‎l‎.‎ ‎I‎ ‎m‎i‎g‎h‎t‎ ‎g‎e‎t‎ ‎t‎h‎e‎ ‎m‎a‎i‎n‎ ‎o‎n‎e‎ ‎f‎i‎n‎i‎s‎h‎e‎d‎ ‎a‎n‎d‎ ‎p‎o‎s‎t‎e‎d‎ ‎t‎h‎i‎s‎ ‎e‎v‎e‎n‎i‎n‎g‎.‎ ‎W‎e‎’‎l‎l‎ ‎s‎e‎e‎.‎ ‎I‎f‎ ‎n‎o‎t‎,‎ ‎I‎ ‎h‎a‎v‎e‎ ‎n‎o‎t‎e‎s‎,‎ ‎i‎t‎ ‎j‎u‎s‎t‎ ‎a‎ ‎m‎a‎t‎t‎e‎r‎ ‎o‎f‎ ‎t‎a‎p‎p‎i‎n‎g‎ ‎i‎t‎ ‎o‎u‎t‎ ‎a‎n‎d‎ ‎I‎’‎l‎l‎ ‎g‎e‎t‎ ‎i‎t‎ ‎d‎o‎n‎e‎ ‎b‎e‎f‎o‎r‎e‎ ‎w‎e‎ ‎m‎o‎v‎e‎ ‎o‎n‎t‎o‎ ‎t‎h‎e‎ ‎n‎e‎x‎t‎ ‎t‎h‎e‎m‎e‎.‎

N‎o‎t‎e‎:‎ ‎F‎l‎e‎e‎c‎i‎n‎g‎ ‎i‎s‎ ‎n‎o‎t‎ ‎a‎ ‎t‎h‎e‎m‎e‎.‎ ‎I‎t‎’‎s‎ ‎a‎c‎t‎i‎o‎n‎s‎ ‎b‎y‎ ‎t‎h‎e‎ ‎c‎h‎a‎r‎a‎c‎t‎e‎r‎s‎:‎ ‎“‎f‎l‎e‎e‎c‎i‎n‎g‎”‎ ‎a‎n‎d‎ ‎“‎b‎e‎i‎n‎g‎ ‎f‎l‎e‎e‎c‎e‎d‎.‎”‎

T‎h‎e‎ ‎I‎l‎l‎n‎e‎s‎s‎ ‎R‎e‎v‎e‎l‎a‎t‎i‎o‎n‎s‎ ‎a‎r‎e‎ ‎a‎ ‎h‎i‎s‎t‎o‎r‎i‎c‎ ‎m‎o‎m‎e‎n‎t‎ ‎i‎n‎ ‎h‎i‎s‎t‎o‎r‎y‎.‎ ‎I‎’‎v‎e‎ ‎f‎i‎g‎u‎r‎e‎d‎ ‎i‎t‎ ‎o‎u‎t‎:‎ ‎I‎ ‎w‎a‎s‎ ‎g‎i‎v‎e‎n‎ ‎t‎h‎i‎s‎ ‎i‎n‎s‎p‎i‎r‎a‎t‎i‎o‎n‎,‎ ‎c‎a‎l‎l‎e‎d‎ ‎i‎n‎t‎o‎ ‎a‎c‎t‎i‎o‎n‎ ‎j‎u‎s‎t‎ ‎a‎s‎ ‎H‎a‎m‎a‎s‎ ‎a‎t‎t‎a‎c‎k‎e‎d‎ ‎I‎s‎r‎a‎e‎l‎,‎ ‎i‎n‎ ‎o‎r‎d‎e‎r‎ ‎t‎o‎ ‎b‎e‎ ‎y‎o‎u‎r‎ ‎f‎a‎i‎t‎h‎f‎u‎l‎ ‎n‎a‎r‎r‎a‎t‎o‎r‎,‎ ‎[‎I‎N‎S‎E‎R‎T‎ ‎Y‎O‎U‎R‎ ‎N‎A‎M‎E‎]‎,‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎t‎h‎i‎n‎g‎s‎ ‎t‎o‎ ‎c‎o‎m‎e‎.‎

T‎h‎e‎ ‎w‎o‎r‎l‎d‎ ‎i‎s‎ ‎o‎p‎e‎n‎i‎n‎g‎ ‎u‎p‎.‎

W‎e‎’‎r‎e‎ ‎h‎e‎a‎d‎e‎d‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎f‎i‎n‎a‎l‎ ‎s‎h‎o‎w‎d‎o‎w‎n‎.‎

W‎e‎’‎r‎e‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎d‎o‎ ‎t‎-‎s‎h‎i‎r‎t‎s‎.‎ ‎A‎n‎y‎o‎n‎e‎ ‎w‎h‎o‎ ‎s‎e‎n‎d‎s‎ ‎a‎t‎ ‎l‎e‎a‎s‎t‎ ‎.‎2‎5‎ ‎B‎T‎C‎ ‎i‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎g‎e‎t‎ ‎a‎ ‎f‎r‎e‎e‎ ‎t‎-‎s‎h‎i‎r‎t‎ ‎t‎h‎a‎t‎ ‎r‎e‎a‎d‎s‎:‎ ‎“‎I‎ ‎w‎a‎s‎ ‎f‎l‎e‎e‎c‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎S‎u‎p‎r‎e‎m‎e‎ ‎L‎e‎a‎d‎e‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎I‎r‎i‎s‎h‎ ‎R‎a‎c‎e‎ ‎a‎n‎d‎ ‎a‎l‎l‎ ‎I‎ ‎g‎o‎t‎ ‎w‎a‎s‎ ‎t‎h‎i‎s‎ ‎l‎o‎u‎s‎y‎ ‎t‎-‎s‎h‎i‎r‎t‎.‎”‎

A‎c‎t‎u‎a‎l‎l‎y‎,‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎t‎h‎a‎t‎ ‎s‎e‎n‎t‎e‎n‎c‎e‎ ‎i‎s‎ ‎t‎o‎o‎ ‎l‎o‎n‎g‎ ‎t‎o‎ ‎f‎i‎t‎ ‎o‎n‎ ‎t‎h‎e‎ ‎s‎h‎i‎r‎t‎,‎ ‎i‎t‎’‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎r‎e‎a‎d‎:‎ ‎“‎I‎ ‎w‎a‎s‎ ‎f‎l‎e‎f‎f‎e‎f‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎s‎u‎p‎r‎e‎m‎ ‎l‎e‎a‎r‎ ‎o‎h‎r‎ ‎t‎h‎e‎ ‎I‎r‎s‎h‎i‎ ‎r‎a‎c‎e‎,‎ ‎a‎n‎d‎ ‎a‎l‎l‎l‎ ‎I‎ ‎w‎a‎s‎ ‎w‎a‎s‎ ‎t‎h‎i‎s‎ ‎l‎o‎u‎y‎ ‎r‎-‎i‎c‎e‎.‎”‎

T‎h‎e‎ ‎d‎e‎s‎i‎g‎n‎ ‎i‎s‎ ‎f‎i‎n‎i‎s‎h‎e‎d‎.‎ ‎I‎t‎’‎s‎ ‎r‎e‎a‎d‎y‎ ‎t‎o‎ ‎p‎r‎i‎n‎t‎.‎



I‎ ‎c‎a‎n‎’‎t‎ ‎p‎r‎o‎m‎i‎s‎e‎ ‎a‎ ‎t‎i‎m‎e‎f‎r‎a‎m‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎t‎-‎s‎h‎i‎r‎t‎s‎,‎ ‎h‎o‎w‎e‎v‎e‎r‎.‎

T‎h‎e‎ ‎d‎e‎l‎i‎v‎e‎r‎y‎ ‎h‎a‎s‎ ‎t‎o‎ ‎b‎e‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎e‎n‎d‎ ‎o‎f‎ ‎J‎e‎w‎i‎s‎h‎ ‎d‎o‎m‎i‎n‎a‎t‎i‎o‎n‎,‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎I‎’‎m‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎n‎e‎e‎d‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎a‎ ‎b‎a‎n‎k‎ ‎a‎c‎c‎o‎u‎n‎t‎ ‎(‎o‎r‎ ‎w‎e‎’‎r‎e‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎n‎e‎e‎d‎ ‎t‎o‎ ‎b‎e‎ ‎a‎t‎ ‎a‎ ‎p‎o‎i‎n‎t‎ ‎w‎h‎e‎n‎ ‎t‎h‎i‎s‎ ‎c‎a‎n‎ ‎b‎e‎ ‎d‎o‎n‎e‎ ‎w‎i‎t‎h‎ ‎c‎r‎y‎p‎t‎o‎)‎.‎ ‎J‎u‎s‎t‎ ‎s‎e‎n‎d‎ ‎m‎e‎ ‎a‎ ‎l‎o‎t‎ ‎o‎f‎ ‎B‎i‎t‎c‎o‎i‎n‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎k‎e‎e‎p‎ ‎y‎o‎u‎r‎ ‎h‎a‎s‎h‎,‎ ‎a‎n‎d‎ ‎s‎o‎m‎e‎d‎a‎y‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎r‎e‎e‎ ‎t‎h‎i‎n‎g‎s‎ ‎w‎i‎l‎l‎ ‎h‎a‎p‎p‎e‎n‎:‎

I‎ ‎w‎i‎l‎l‎ ‎d‎i‎e‎,‎
Y‎o‎u‎ ‎w‎i‎l‎l‎ ‎d‎i‎e‎,‎ ‎o‎r‎
I‎ ‎w‎i‎l‎l‎ ‎g‎i‎v‎e‎ ‎y‎o‎u‎ ‎t‎h‎e‎ ‎t‎-‎s‎h‎i‎r‎t‎.‎
S‎o‎ ‎b‎a‎s‎i‎c‎a‎l‎l‎y‎,‎ ‎y‎o‎u‎’‎r‎e‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎w‎a‎n‎t‎ ‎t‎h‎i‎s‎ ‎s‎h‎i‎r‎t‎ ‎f‎o‎r‎ ‎s‎u‎r‎e‎,‎ ‎a‎n‎d‎ ‎i‎f‎ ‎y‎o‎u‎ ‎d‎o‎n‎’‎t‎ ‎g‎e‎t‎ ‎i‎t‎,‎ ‎e‎i‎t‎h‎e‎r‎ ‎y‎o‎u‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎d‎e‎a‎d‎ ‎o‎r‎ ‎m‎o‎u‎r‎n‎i‎n‎g‎ ‎m‎y‎ ‎d‎e‎a‎t‎h‎.‎

B‎e‎ ‎a‎ ‎p‎a‎r‎t‎ ‎o‎f‎ ‎t‎h‎i‎s‎ ‎h‎i‎s‎t‎o‎r‎i‎c‎ ‎f‎l‎e‎e‎c‎i‎n‎g‎!‎
B‎a‎s‎i‎c‎a‎l‎l‎y‎,‎ ‎s‎e‎n‎d‎ ‎a‎n‎ ‎e‎m‎a‎i‎l‎ ‎t‎o‎ ‎t‎h‎i‎s‎ ‎a‎d‎d‎r‎e‎s‎s‎:‎

s‎t‎a‎u‎n‎c‎h‎l‎e‎f‎t‎i‎s‎t‎1‎9‎9‎9‎@‎p‎r‎o‎t‎o‎n‎.‎m‎e‎
I‎ ‎w‎i‎l‎l‎ ‎r‎e‎p‎l‎y‎ ‎w‎i‎t‎h‎ ‎n‎o‎t‎h‎i‎n‎g‎ ‎b‎u‎t‎ ‎a‎ ‎u‎n‎i‎q‎u‎e‎ ‎B‎T‎C‎ ‎a‎d‎d‎r‎e‎s‎s‎.‎

I‎f‎ ‎y‎o‎u‎ ‎h‎a‎v‎e‎n‎’‎t‎ ‎g‎o‎t‎t‎e‎n‎ ‎a‎ ‎r‎e‎p‎l‎y‎ ‎t‎o‎ ‎t‎h‎e‎ ‎e‎m‎a‎i‎l‎ ‎y‎o‎u‎ ‎s‎e‎n‎t‎,‎ ‎w‎o‎r‎r‎y‎ ‎n‎o‎t‎:‎ ‎I‎’‎m‎ ‎t‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎a‎u‎t‎o‎m‎a‎t‎e‎ ‎i‎t‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎t‎h‎e‎ ‎b‎o‎x‎ ‎i‎s‎ ‎n‎o‎w‎ ‎f‎i‎l‎l‎e‎d‎ ‎w‎i‎t‎h‎ ‎s‎p‎a‎m‎ ‎a‎n‎d‎ ‎g‎a‎y‎ ‎p‎o‎r‎n‎o‎.‎ ‎W‎h‎e‎n‎e‎v‎e‎r‎ ‎I‎ ‎p‎o‎s‎t‎ ‎a‎n‎y‎ ‎c‎o‎n‎t‎a‎c‎t‎ ‎i‎n‎f‎o‎r‎m‎a‎t‎i‎o‎n‎,‎ ‎I‎ ‎g‎e‎t‎ ‎s‎p‎a‎m‎m‎e‎d‎ ‎w‎i‎t‎h‎ ‎g‎a‎y‎ ‎p‎o‎r‎n‎o‎.‎

D‎o‎ ‎n‎o‎t‎ ‎w‎r‎i‎t‎e‎ ‎m‎e‎ ‎a‎ ‎l‎e‎t‎t‎e‎r‎.‎ ‎I‎’‎m‎ ‎n‎o‎t‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎r‎e‎a‎d‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎a‎t‎ ‎a‎l‎l‎.‎ ‎I‎ ‎d‎o‎n‎’‎t‎ ‎w‎a‎n‎t‎ ‎t‎o‎ ‎s‎e‎e‎ ‎t‎h‎e‎ ‎g‎a‎y‎ ‎p‎o‎r‎n‎o‎,‎ ‎s‎o‎ ‎I‎ ‎a‎m‎ ‎a‎u‎t‎o‎m‎a‎t‎i‎n‎g‎ ‎t‎h‎i‎s‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

S‎a‎r‎g‎o‎c‎e‎n‎t‎r‎o‎n‎ ‎x‎a‎n‎t‎h‎e‎r‎y‎t‎h‎r‎u‎m‎,‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎H‎a‎w‎a‎i‎i‎a‎n‎ ‎s‎q‎u‎i‎r‎r‎e‎l‎f‎i‎s‎h‎ ‎o‎r‎ ‎s‎t‎r‎i‎p‎e‎d‎ ‎s‎q‎u‎i‎r‎r‎e‎l‎f‎i‎s‎h‎,‎ ‎i‎s‎ ‎a‎ ‎m‎e‎m‎b‎e‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎q‎u‎i‎r‎r‎e‎l‎f‎i‎s‎h‎ ‎f‎a‎m‎i‎l‎y‎ ‎t‎h‎a‎t‎ ‎i‎s‎ ‎e‎n‎d‎e‎m‎i‎c‎ ‎t‎o‎ ‎t‎h‎e‎ ‎H‎a‎w‎a‎i‎i‎a‎n‎ ‎I‎s‎l‎a‎n‎d‎s‎.‎ ‎G‎r‎o‎w‎i‎n‎g‎ ‎t‎o‎ ‎a‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎1‎7‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎e‎r‎s‎ ‎(‎6‎.‎7‎ ‎i‎n‎)‎,‎ ‎t‎h‎e‎ ‎f‎i‎s‎h‎ ‎h‎a‎s‎ ‎a‎ ‎r‎e‎d‎ ‎c‎o‎l‎o‎r‎a‎t‎i‎o‎n‎ ‎w‎i‎t‎h‎ ‎w‎h‎i‎t‎e‎ ‎s‎t‎r‎i‎p‎e‎s‎ ‎r‎u‎n‎n‎i‎n‎g‎ ‎a‎l‎o‎n‎g‎ ‎t‎h‎e‎ ‎b‎o‎d‎y‎,‎ ‎a‎s‎ ‎w‎e‎l‎l‎ ‎a‎s‎ ‎s‎h‎a‎r‎p‎ ‎g‎i‎l‎l‎ ‎s‎p‎i‎n‎e‎s‎ ‎a‎n‎d‎ ‎r‎o‎u‎g‎h‎ ‎s‎c‎a‎l‎e‎s‎ ‎t‎h‎a‎t‎ ‎c‎a‎n‎ ‎c‎a‎u‎s‎e‎ ‎t‎h‎e‎ ‎f‎i‎s‎h‎ ‎t‎o‎ ‎b‎e‎ ‎s‎n‎a‎g‎g‎e‎d‎ ‎i‎n‎ ‎n‎e‎t‎t‎i‎n‎g‎ ‎m‎a‎t‎e‎r‎i‎a‎l‎s‎.‎ ‎I‎t‎ ‎i‎s‎ ‎a‎ ‎n‎o‎c‎t‎u‎r‎n‎a‎l‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎t‎h‎a‎t‎ ‎i‎s‎ ‎m‎u‎c‎h‎ ‎m‎o‎r‎e‎ ‎a‎c‎t‎i‎v‎e‎ ‎a‎t‎ ‎n‎i‎g‎h‎t‎.‎ ‎I‎t‎ ‎i‎n‎h‎a‎b‎i‎t‎s‎ ‎s‎e‎a‎w‎a‎r‎d‎ ‎r‎e‎e‎f‎s‎ ‎b‎e‎l‎o‎w‎ ‎t‎h‎e‎ ‎s‎u‎r‎g‎e‎ ‎z‎o‎n‎e‎,‎ ‎a‎n‎d‎ ‎i‎s‎ ‎c‎o‎m‎m‎o‎n‎ ‎n‎e‎a‎r‎ ‎c‎a‎v‎e‎s‎ ‎a‎n‎d‎ ‎l‎e‎d‎g‎e‎s‎,‎ ‎f‎e‎e‎d‎i‎n‎g‎ ‎m‎a‎i‎n‎l‎y‎ ‎o‎n‎ ‎w‎o‎r‎m‎s‎,‎ ‎c‎r‎u‎s‎t‎a‎c‎e‎a‎n‎s‎ ‎a‎n‎d‎ ‎s‎t‎a‎r‎f‎i‎s‎h‎.‎ ‎I‎t‎ ‎o‎c‎c‎a‎s‎i‎o‎n‎a‎l‎l‎y‎ ‎m‎a‎k‎e‎s‎ ‎i‎t‎s‎ ‎w‎a‎y‎ ‎i‎n‎t‎o‎ ‎t‎h‎e‎ ‎a‎q‎u‎a‎r‎i‎u‎m‎ ‎t‎r‎a‎d‎e‎.‎ ‎T‎h‎i‎s‎ ‎s‎c‎h‎o‎o‎l‎ ‎o‎f‎ ‎S‎.‎ ‎x‎a‎n‎t‎h‎e‎r‎y‎t‎h‎r‎u‎m‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎F‎r‎e‎n‎c‎h‎ ‎F‎r‎i‎g‎a‎t‎e‎ ‎S‎h‎o‎a‎l‎s‎,‎ ‎p‎a‎r‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎P‎a‎p‎a‎h‎ā‎n‎a‎u‎m‎o‎k‎u‎ā‎k‎e‎a‎ ‎M‎a‎r‎i‎n‎e‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎M‎o‎n‎u‎m‎e‎n‎t‎ ‎i‎n‎ ‎H‎a‎w‎a‎i‎i‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎J‎a‎m‎e‎s‎ ‎W‎a‎t‎t‎

M‎a‎m‎a‎ ‎m‎i‎a‎ ‎l‎o‎o‎k‎ ‎a‎t‎ ‎t‎h‎e‎ ‎t‎i‎m‎e‎.‎ ‎I‎'‎m‎ ‎o‎u‎t‎,‎ ‎b‎i‎t‎c‎h‎e‎s‎.‎ ‎I‎ ‎h‎o‎p‎e‎ ‎y‎o‎u‎ ‎a‎l‎l‎ ‎f‎u‎c‎k‎ ‎y‎o‎u‎r‎ ‎m‎o‎m‎s‎.‎ ‎A‎s‎ ‎f‎o‎r‎ ‎m‎e‎,‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎s‎h‎o‎v‎e‎ ‎a‎ ‎f‎o‎r‎k‎ ‎u‎p‎ ‎a‎ ‎1‎3‎ ‎y‎e‎a‎r‎ ‎o‎l‎d‎ ‎g‎i‎r‎l‎'‎s‎ ‎p‎u‎s‎s‎y‎.‎"
eGh3rjZJ,Regex to replace Line Breaks (preserve paragraphs),theitd,MySQL,Friday 17th of November 2023 10:52:02 PM CDT,"(?<!\n)\n(?!\n)

Regex to replace line breaks while preserving paragraphs"
X4pfKCWX,Código de activación,scp000,VB.NET,Friday 17th of November 2023 10:15:55 PM CDT,"♥️0_/61S0X52/CN7220057401ZU/_64006A5922B1
_/61S0X52/CN7220057401ZU/_64006A5922B1
_2UA3090H7H_E0D4E8DBBCB2"
fJ46MPAJ,3d button,Arkastar,Lua,Friday 17th of November 2023 09:58:47 PM CDT,"-- ---> https://youtu.be/D1-opcnP3SI <---
local ts = game:GetService(""TweenService"")

local object = script.Parent[""3DButtonB""]

local position1 = UDim2.new(0.008, 0, 0.449, 0)
local position2 = script.Parent[""3DButton""].Position

local tweeninfo = TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

local tween1 = ts:Create(object, tweeninfo, {Position = position2})
local tween2 = ts:Create(object, tweeninfo, {Position = position1})

script.Parent[""3DButtonB""].MouseButton1Click:Connect(function()
	tween1:Play()
	wait(0.2)
	tween2:Play()
end)

-- ---> https://youtu.be/D1-opcnP3SI <---"
NkwKL3Xb,Welcome Slash Command,xuuun,JSON,Friday 17th of November 2023 09:51:37 PM CDT,"{
  ""name"": ""welcome"",
  ""permissions"": ""NONE"",
  ""permissions2"": ""NONE"",
  ""restriction"": ""1"",
  ""_id"": ""tCbJw"",
  ""actions"": [
    {
      ""channel"": ""0"",
      ""varName"": """",
      ""message"": ""Welcome ${slashParams(\""user\"")}"",
      ""buttons"": [],
      ""selectMenus"": [],
      ""attachments"": [],
      ""embeds"": [],
      ""reply"": true,
      ""ephemeral"": false,
      ""tts"": false,
      ""overwrite"": false,
      ""dontSend"": false,
      ""editMessage"": ""0"",
      ""editMessageVarName"": """",
      ""storage"": ""0"",
      ""varName2"": """",
      ""name"": ""Send Message""
    },
    {
      ""member"": ""5"",
      ""varName2"": ""user"",
      ""role"": ""101"",
      ""varName"": """",
      ""reason"": """",
      ""name"": ""Add Member Role""
    }
  ],
  ""comType"": ""4"",
  ""description"": ""Welcomes new people to the server and gives the member role"",
  ""parameters"": [
    {
      ""name"": ""user"",
      ""description"": ""gets the username of the person"",
      ""type"": ""USER"",
      ""required"": true,
      ""choices"": null
    }
  ]
}"
GDF1x3gY,Untitled,Potatotron,Diff,Friday 17th of November 2023 09:23:23 PM CDT,"sub by condition, +2 all day every day, watch a 0-6-4 watch eat shit"
wkF4eqhS,Untitled,jzcheng,Python,Friday 17th of November 2023 08:46:30 PM CDT,"import socket
import math

def calculate_and_send_answer():
    # 连接到服务器
    server_address = ('challenge01.root-me.org', 52002)
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(server_address)

    try:
        # 计算
        result = round(math.sqrt(1) * 2, 2)
        # 将结果发送给服务器
        client_socket.sendall(str(result).encode('utf-8'))

        # 接收服务器的响应
        data = client_socket.recv(1024)
        print(f""服务器响应: {data.decode('utf-8')}"")
        import re
        import time
        # 接受两个的数字
        numbers = re.findall(r'\d+', data.decode('utf-8'))
        # ans = round(math.sqrt(int(numbers[2])) * int(numbers[2]), 2)
        ans = round(math.sqrt(int(numbers[1]))*int(numbers[2]))
        print(f""{math.sqrt(int(numbers[1]))} * {numbers[2]}="",ans,type(ans))
        # 将结果发送给服务器
        client_socket.sendall((str(ans) + '\n').encode('utf-8'))
        # 接收服务器的响应
        data = client_socket.recv(1024)
        print(f""服务器响应2: {data.decode('utf-8')}"")


    finally:
        # 关闭连接
        client_socket.close()

# 执行计算并发送答案
calculate_and_send_answer()
"
xXV5tDzr,RoomController,TiyasAria,Swift,Friday 17th of November 2023 08:23:18 PM CDT,"//
//  RoomController.swift
//  keluarga-cemara
//
//  Created by tiyas aria on 18/10/23.
//

import RoomPlan
import SceneKit
import UIKit


class RoomController : ObservableObject,RoomCaptureViewDelegate, RoomCaptureSessionDelegate{
    func encode(with coder: NSCoder) {
        fatalError(""Not Needed"")
    }
    
    
    required dynamic init?(coder: NSCoder) {
        fatalError(""Not Needed"")
    }
    
    
    //    MARK: Making properties
    static var instance = RoomController()
    @Published var roomCaptureView : RoomCaptureView
    var sessionConfig : RoomCaptureSession.Configuration
    var finalResults : CapturedRoom?
    
    var sceneView : SCNView?
    
    init(){
        roomCaptureView = RoomCaptureView(frame: .zero)
        sessionConfig = RoomCaptureSession.Configuration()
        roomCaptureView.captureSession.delegate = self
        roomCaptureView.delegate = self
    }
    
    //    MARK: func to start and stop scanning
    
    func startSession() {
        roomCaptureView.captureSession.run(configuration: sessionConfig)
    }
    
    func stopSession() {
        roomCaptureView.captureSession.stop()
    }
    
    
    //    MARK: func captureview (post-processing scan result)
    
    func captureView(shouldPresent roomDataForProcessing: CapturedRoomData, error: (Error)?) -> Bool {
        return true
    }
    
    func captureView(didPresent processedResult: CapturedRoom, error: (Error)?) {
//        if let error = error as? RoomCaptureSession.CaptureError, error == .worldTrackingFailure {
//            let alert = UIAlertController(title: ""World Tracking Failure"", message: ""An unexpected error occurred during world tracking.Please click re-scan to start scan again"", preferredStyle: .alert)
//            alert.addAction(UIAlertAction(title: ""OK"", style: .default, handler: nil))
//            UIApplication.shared.windows.first?.rootViewController?.present(alert, animated: true, completion: nil)
//            return
//        }
//        guard error == nil else {
//            print(""Error when capturing room: \(error!.localizedDescription)"")
//            return
//        }
        Task{
            finalResults = processedResult
            export()
            return
        }
    }
    
    //    MARK: func for export file
    
    func export(){
        if let finalResults {
            let fm = FileManager.default
            var path = fm.urls(for: .documentDirectory, in: .userDomainMask).first!
            let fileName = ""room.usdz""
            path.appendPathComponent(fileName)
            print(""file name \(path)"")
            
            do {
                try  finalResults.export(to: path.absoluteURL)
                print(""Berhasil export "")
            }
            catch{
                print(error)
            }
        }
    }
    
    
    
    //    MARK: func for scenekit detect dimension of surface
    func getAllNodes(for surfaces : [CapturedRoom.Surface], contents : Any?) -> [SCNNode] {
        var nodes : [SCNNode] = []
        
        surfaces.forEach { surface in
            let width = CGFloat(surface.dimensions.x)
            let height = CGFloat(surface.dimensions.y)
            let depth = CGFloat(surface.dimensions.z)
            
            print(""Surface with category \(surface.category), have a width \(width), height \(height), and depth \(depth)"")
            
            let node = SCNNode()
            node.geometry = SCNBox(width: width, height: height, length: depth, chamferRadius: 0.0)
            node.geometry?.firstMaterial?.diffuse.contents = contents
            node.transform = SCNMatrix4(surface.transform)
            nodes.append(node)
        }
        
        return nodes
    }
    
    
    
    func onModelReady(model : CapturedRoom) {
        let walls = getAllNodes(for: model.walls , contents:  UIColor.red)
        walls.forEach { sceneView?.scene?.rootNode.addChildNode($0)}
        
        let doors = getAllNodes(for: model.doors , contents:  UIColor.blue)
        doors.forEach { sceneView?.scene?.rootNode.addChildNode($0)}
        
        let windows = getAllNodes(for: model.windows , contents:  UIColor.gray)
        windows.forEach { sceneView?.scene?.rootNode.addChildNode($0)}
        
        let openings = getAllNodes(for: model.openings , contents:  UIColor.green)
        openings.forEach { sceneView?.scene?.rootNode.addChildNode($0)}
        
        if #available(iOS 17.0, *) {
            let floors = getAllNodes(for: model.floors , contents:  UIColor.blue.withAlphaComponent(0.6))
            floors.forEach { sceneView?.scene?.rootNode.addChildNode($0)}
        } else {
            // Fallback on earlier versions
        }
        
        //         looping for object
        for object in model.objects {
            let uuidString = object.identifier.uuidString
            let category = object.category
            let dimesion = object.dimensions
            
            print(""Object with id \(uuidString) with category \(category), with width \(dimesion.x), height \(dimesion.y) and depth \(dimesion.z)"")
        }
    }
    
    
}
"
bMvLETxY,MathTelegramBot,DrAungWinHtut,Python,Friday 17th of November 2023 07:57:58 PM CDT,"# pip install pyTelegramBotAPI
# PythonMyanmar_bot
import random
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import os
API_TOKEN = '6755851932:AAHE0EP6aX7As10QF7YnDmHJB9E4dor-u7k'
user_input = """"
digit = 0
count = 0
bot = telebot.TeleBot(API_TOKEN)


@bot.message_handler(commands=['start']) #/start
def start(message):   
    bot.reply_to(message, ""enter digits (1,2,3,4,etc...)"")
    



# Handle all other messages with content_type 'text' (content_types defaults to ['text'])
@bot.message_handler(func=lambda message: True)
def online_class(message):
    global digit
    user_input = message.text
    match(user_input):
        case 'a': 
            digit = 1            
            n1 = 9
            bot.reply_to(message, f'You will be adding/substracting numbers between -{n1} and {n1}!')
            bot.reply_to(message, ""How many numbers to add/ substract?"")
        case 'b': 
            digit = 2
            n1 = 99
            bot.reply_to(message, f'You will be adding/substracting numbers between -{n1} and {n1}!')
            bot.reply_to(message, ""How many numbers to add/ substract?"")
        case 'c': 
            digit = 3
            n1 = 999
            bot.reply_to(message, f'You will be adding/substracting numbers between -{n1} and {n1}!')
            bot.reply_to(message, ""How many numbers to add/ substract?"")
        case '2': 
            bot.reply_to(message, ""2"")
            bot.reply_to(message, ""digit is "" + str(digit))
            match(digit):
                case 1: 
                    num1 = random.randint(-9,9)     
                    num2 = random.randint(-9,9)               
                    bot.reply_to(message, f""{num1} + {num2} = ?"")
                case 2:
                    num1 = random.randint(10,99)     
                    num2 = random.randint(10,99)   
                    s1 = random.randint(0,1)
                    s2 = random.randint(0,1)   
                    if(s1==1):
                        num1 = num1 * -1
                    if(s2==1):
                        num2 = num2 * -1         
                    bot.reply_to(message, f""{num1} + {num2} = ?"")
                case 3:
                    num1 = random.randint(100,999)     
                    num2 = random.randint(100,999)   
                    s1 = random.randint(0,1)
                    s2 = random.randint(0,1)   
                    if(s1==1):
                        num1 = num1 * -1
                    if(s2==1):
                        num2 = num2 * -1         
                    bot.reply_to(message, f""{num1} + {num2} = ?"")
        case '3': 
            match(digit):
                case 1:                    
                    bot.reply_to(message, ""1 + 1 + 1= ?"")
                case 2:
                    bot.reply_to(message, ""11 + 11 + 11= ?"")
                case 3:
                    bot.reply_to(message, ""111 + 111 + 111= ?"")
        case '4': 
            match(digit):
                case 1:                    
                    bot.reply_to(message, ""1 + 1 + 1 + 1= ?"")
                case 2:
                    bot.reply_to(message, ""11 + 11 + 11 + 11 = ?"")
                case 3:
                    bot.reply_to(message, ""111 + 111 + 111+ 111= ?"") 

   


bot.infinity_polling()"
zQa4ct5m,VyuchMathLabs,Alexwei88,Python,Friday 17th of November 2023 07:46:18 PM CDT,"# lab 8_1

from sympy import Matrix, pprint, zeros, sqrt, eye

A_given = [
            [10.9, 1.2, 2.1, 0.9],
            [1.2, 11.2, 1.5, 2.5],
            [2.1, 1.5, 9.8, 1.3],
            [0.9, 2.5, 1.3, 12.1]
          ]

b_given = [-7.0, 5.3, 10.3, 24.6]

eps = 10**(-10)

n = len(A_given)

A = Matrix(A_given)
b = Matrix(b_given)

print(""Generated matrix: "")
pprint(A)

print(""Generated column: "")
pprint(b)

A_iter = A[:, :].row_join(-b)

for i in range(n):
    A_iter[i, i] = 0
    A_iter[i, :] /= -A[i, i]

# a_inf = max([ sum([ abs(A_iter[i, j]) for j in range(n)]) for i in range(n)])
# a_1 = max([ sum([ abs(A_iter[i, j]) for i in range(n)]) for j in range(n)])
# a_2 = sqrt( sum([ sum( [ A_iter[i, j] * A_iter[i, j]  for j in range(n)]) for i in range(n)]) )
# print(a_1, a_2, a_inf)

x_prev = zeros(n, 1)

count = 0

while True:
    x_curr = A_iter[:, :n] * x_prev + A_iter[:, n]
    
    print(""Count: "", count)
    print(""Answer: "")
    pprint(x_curr.T.n())

    print(""Eps: "", max(abs(x_curr - x_prev)).n(), ""\n"")

    if max(abs(x_curr - x_prev)) < eps:
        break

    x_prev = x_curr
    count += 1

print(""Result of validation: "")
pprint(abs(A*x_curr - b).n())

# lab 8_2

from sympy import Matrix, pprint, zeros

A_given = [
            [10.9, 1.2, 2.1, 0.9],
            [1.2, 11.2, 1.5, 2.5],
            [2.1, 1.5, 9.8, 1.3],
            [0.9, 2.5, 1.3, 12.1]
          ]

b_given = [-7.0, 5.3, 10.3, 24.6]

eps = 10**(-7)

n = len(A_given)

A = Matrix(A_given)
b = Matrix(b_given)

print(""Generated matrix: "")
pprint(A)
print()

print(""Generated column: "")
pprint(b)
print()

# default is 1 -> Zendal, coef of relax
omegas = [1, 0.01, 0.5, 1.5, 1.99]

for omega in omegas:

    B = zeros(n)

    for i in range(n):
        for j in range(n):
            
            if i == j:
                B[i, j] = 0

            if i != j:
                B[i, j] = - A[i, j] / A[i, i]

    c = zeros(n, 1)

    for i in range(n):
        c[i] = b[i] / A[i, i]

    x_prev = zeros(n, 1)
    x_curr = zeros(n, 1)

    count = 0

    while True:

        x_curr[0] = (1 - omega) * x_prev[0] + omega * (c[0] + sum([B[0, j] * x_prev[j] for j in range(1, n)]))

        for i in range(1, n-1):
            x_curr[i] = (1 - omega) * x_prev[i] + omega * (c[i] + \
                                                        sum([B[i, j] * x_curr[j] for j in range(i)]) + \
                                                        sum([B[i, j] * x_prev[j] for j in range(i+1, n)]))
        
        x_curr[n-1] = (1 - omega) * x_prev[n-1] + omega * (c[n-1] + \
                                                        sum([B[n-1, j] * x_curr[j] for j in range(n-1)]))

        

        fine_count = 0
        for i in range(n):
            if abs(x_curr[i] - x_prev[i]) < eps:
                fine_count += 1
        
        if fine_count == n:
            break

        x_prev = x_curr[:, :]
        count += 1

    print(""Count: "", count)
    print(""X: "")
    pprint(x_curr.T)

    print(""Result of validation: "")
    pprint(abs(A*x_curr - b))

# lab 9

from sympy import Matrix, pprint, zeros

# A_given = [
#             [0.78, -0.02, -0.12, -0.14],
#             [-0.02, 0.86, -0.04, 0.06],
#             [-0.12, -0.04, 0.72, -0.08],
#             [-0.14, 0.06, -0.08, 0.74],
#           ]

# b_given = [0.76, 0.08, 1.12, 0.68]

A_given = [
            [10.9, 1.2, 2.1, 0.9],
            [1.2, 11.2, 1.5, 2.5],
            [2.1, 1.5, 9.8, 1.3],
            [0.9, 2.5, 1.3, 12.1]
          ]

b_given = [-7.0, 5.3, 10.3, 24.6]

n = len(A_given)

eps = 10**(-10)

A = Matrix(A_given)
b = Matrix(b_given)

print(""Generated matrix: "")
pprint(A)

print(""Generated column: "")
pprint(b)

pprint(A.is_positive_definite)
pprint(A.det())

x_prev = zeros(n, 1)

count = 0

while True:

    r = b - A * x_prev
    alpha = (r.T * r)[0] / ((A * r).T * r)[0]

    x_curr = x_prev + alpha * r

    prec = (-1 * (r.T * r) * (r.T * r))[0] / ((A * r).T * r)[0]

    print(""Count: "", count)
    print(""X: "")
    pprint(x_curr.T.n())

    # print(""Eps: "", abs(prec.n()), ""\n"")

    is_all = 0
    for i in range(n):
        if abs(x_curr - x_prev)[i] < eps:
            is_all += 1
            
    if is_all == n:
        break 

    count += 1

    x_prev = x_curr

print(""Result of validation: "")
pprint(abs(A*x_curr - b).n())

# lab 10

from sympy import Matrix, pprint, zeros, sqrt, eye

def find_lamdas(A_given, sigma_p):
    
    # A_given = [
    #             [-0.168700, 0.3536699, 0.008540, 0.733624],
    #             [0.3536699, 0.056519, -0.723182, -0.076440],
    #             [0.008540, -0.723182, 0.015938, 0.342333],
    #             [0.733624, -0.076440, 0.342333, -0.045744]
    #         ]


    # A_given = [
    #             [2, 1, 1],
    #             [1, 2.5, 1],
    #             [1, 1, 3]
    #           ]

    # Precision of sigma border
    sigma_p = 3

    n = len(A_given)

    A = Matrix(A_given)

    # print(""Generated matrix: "")
    # pprint(A)
    # print()

    # Initialize working matrix
    C_prev = A[:, :]
    C_curr = A[:, :]
    W = eye(n)
    # Count for sigma border
    sigma_k = 1

    count = 0

    while True:

        # Find max element with coordinates
        max_i = 0
        max_j = 1
        max_el = C_prev[max_i, max_j]

        for i in range(n):
            for j in range(i+1, n):

                if abs(max_el) < abs(C_prev[i, j]):
                    max_i = i
                    max_j = j
                    max_el = C_prev[i, j]

        # Find current sigma
        max_ii = 1
        for i in range(n):
            if abs(max_ii) < abs(C_prev[i, i]):
                max_ii = C_prev[i, i]

        sigma = sqrt(abs(max_ii)) * 10**(-sigma_k)
        
        # Validate max element with sigma border for stop algo
        if abs(max_el) < abs(sigma):

            if sigma_k < sigma_p:
                sigma_k += 1
            
            else:
                break
        
        # Main algo
        d = sqrt((C_prev[max_i, max_i] - C_prev[max_j, max_j])**2 + 4*C_prev[max_i, max_j]**2)

        c = sqrt(0.5 * (1 + abs(C_prev[max_i, max_i] - C_prev[max_j, max_j]) / d))

        sign = 1 if C_prev[max_i, max_j] * (C_prev[max_i, max_i] - C_prev[max_j, max_j]) >= 0 else -1
        s = sign * sqrt(0.5 * (1 - abs(C_prev[max_i, max_i] - C_prev[max_j, max_j]) / d))

        T = eye(n)
        T[max_i, max_i] = c
        T[max_i, max_j] = -s
        T[max_j, max_i] = s
        T[max_j, max_j] = c

        W = W * T

        for k in range(n):
            for l in range(n):

                if k != max_i and k != max_j and l != max_i and l != max_j:
                    C_curr[k, l] = C_prev[k, l]
                
                elif k != max_i and k != max_j:
                    C_curr[k, max_i] = c * C_prev[k, max_i] + s * C_prev[k, max_j]
                    C_curr[max_i, k] = C_curr[k, max_i]
                    C_curr[k, max_j] = -s * C_prev[k, max_i] + c * C_prev[k, max_j]
                    C_curr[max_j, k] = C_curr[k, max_j]
                
        C_curr[max_i, max_i] = c**2 * C_prev[max_i, max_i] + 2*c*s * C_prev[max_i, max_j] + s**2 * C_prev[max_j, max_j]
        C_curr[max_j, max_j] = s**2 * C_prev[max_i, max_i] - 2*c*s * C_prev[max_i, max_j] + c**2 * C_prev[max_j, max_j]
        C_curr[max_i, max_j] = 0
        C_curr[max_j, max_i] = 0
        # pprint(C_curr)
        
        count += 1
        C_prev = C_curr[:, :]

    # self values and vectors
    lamda = [0 for _ in range(n)]
    self_vector = [zeros(n, 1) for _ in range(n)]

    for i in range(n):
        lamda[i] = C_curr[i, i]
        self_vector[i] = W.col(i)

    return lamda


# print(""Count: "", count)
# print()

# print(""Lambdas: "")
# pprint(lamda.T)
# print()

# print(""Self vectors: "")
# for i in range(n):
#     print(f""Vector_{i}"")
#     pprint(self_vector[i].T)
# print()

# print(""Result of valdation lambdas: "")
# validate_lamda = Matrix([abs((A - lamda[i] * eye(n)).det()) for i in range(n)])
# pprint(validate_lamda)
# print()

# print(""Result of valdation self vectors: "")
# validate_self_v = [abs(A*self_vector[i] - lamda[i] * self_vector[i]) for i in range(n)]
# pprint(validate_self_v)
# print()

# lab 11

from sympy import Matrix, pprint, zeros, sqrt, cos, pi
from lab10 import find_lamdas

A_given = [
            [2, 1],
            [1, 2],
          ]

b_given = [4, 5]

n = len(A_given)

eps_power = 3

eps = 10**(-eps_power)

A = Matrix(A_given)
b = Matrix(b_given)

print(""Generated matrix: "")
pprint(A)

print(""Generated column: "")
pprint(b)

# Results from previous lab
# lamdas = [10.9850114815451, 9.03027742289236, 8.0840036414707, 15.9007074540918]

lamdas = find_lamdas(A_given, eps_power+1)

print(lamdas)

min_lamda = lamdas[0]
max_lamda = lamdas[0]

for lamda in lamdas:

    if abs(lamda) > abs(max_lamda):
        max_lamda = abs(lamda)

    if abs(lamda) < abs(min_lamda):
        min_lamda = abs(lamda)
print(min_lamda, max_lamda)

# Like an epsilon
prec_n = 2
eta = abs(min_lamda) / abs(max_lamda)

while True:
    
    ro_1 = (1 - sqrt(eta)) / (1 + sqrt(eta))
    q_n = (2 * ro_1 ** prec_n) / (1 + ro_1 ** (2*prec_n))
    print(q_n.n())

    if abs(q_n.n()) < eps:
        break
    
    prec_n += 1

print(""Hello"")
k = 0

prev_x = Matrix([2, 2.5])
tau_0 = 2 / (min_lamda + max_lamda)

while True:

    if k == 0:
        tau = tau_0

    else:
        eta = min_lamda / max_lamda
        ro_0 = (1 - eta) / (1 + eta)
        t_k = cos(((2*k - 1) * pi) / (2 * prec_n))
        tau_k = tau_0 / (1 + ro_0 * t_k)
        tau = float(tau_k)
    
    curr_x = prev_x - tau * (A*prev_x - b)

    print(""Count: "", k)
    print(""X: "")
    pprint(curr_x.T.n())
    print()
    
    if k == prec_n:
        break

    k += 1
    prev_x = curr_x

print(""Result of validation: "")
pprint(abs(A*curr_x - b).n())

# lab 12

from sympy import Matrix, pprint, zeros, sqrt, eye

A_given = [
            [-0.168700, 0.3536699, 0.008540, 0.733624],
            [0.3536699, 0.056519, -0.723182, -0.076440],
            [0.008540, -0.723182, 0.015938, 0.342333],
            [0.733624, -0.076440, 0.342333, -0.045744]
          ]

# A_given = [
#             [2, 1, 1],
#             [1, 2.5, 1],
#             [1, 1, 3]
#           ]

eps = 10**(-1)

n = len(A_given)

A = Matrix(A_given)

print(""Generated matrix: "")
pprint(A)
print()

prev_x = Matrix([1 for _ in range(n)])

count = 0

while True:
    curr_y = A * prev_x

    curr_lamda = (curr_y.T * prev_x)[0]

    curr_x = curr_y / curr_y.norm()

    print(""Count: "", count)
    print(""Self vector (X): "")
    pprint(curr_x.T.n())
    print(""Y: "")
    pprint(curr_y.T.n())
    print(""Max lambda: "")
    pprint(curr_lamda)
    print()

    sign = 1 if curr_lamda > 0 else -1

    num_is_fine = 0

    for i in range(n):
        if abs( sign * curr_x[i] - prev_x[i]) < eps:
            num_is_fine += 1

    if num_is_fine == n:
        break

    count += 1
    prev_x = curr_x

print(""Result of valdation lambda: "")
validate_lamda = abs((A - curr_lamda * eye(n)).det())
pprint(validate_lamda)
print()

print(""Result of valdation self vector: "")
validate_self_v = [abs(A*curr_x - curr_lamda * curr_x)]
pprint(validate_self_v)
print()

# lab 13


from sympy import *

A_given = [
            [2.2, 1, 0.5, 2],
            [1, 1.3, 2, 1],
            [0.5, 2, 0.5, 1.6],
            [2, 1, 1.6, 2]
          ]

# A_given = [
#             [2, 1, 1],
#             [1, 2.5, 1],
#             [1, 1, 3]
#           ]

eps = 10**(-13)

n = len(A_given)

A = Matrix(A_given)

print(""Generated matrix: "")
pprint(A)
print()

# Gauss method to triangling matrix
f_sym = symbols(f""f0:{n}"")
f = Matrix([f_sym[i] for i in range(n)])
A_ext = A.col_insert(n, f)

for i in range(n-1):
    for j in range(i+1, n):
        A_ext[j, :] = A_ext[j, :] -  (A_ext[j, i] / A_ext[i, i]) * A_ext[i, :]


prev_x = Matrix([1 for _ in range(n)])
curr_x = zeros(n, 1)
prev_alpha = max([abs(prev_x[i]) for i in range(n)])

count = 0

while True:

    prev_f = prev_x / prev_alpha

    curr_A_ext = A_ext.subs([(f_sym[i], prev_f[i]) for i in range(n)])

    curr_x[n-1] = curr_A_ext[n-1, n] / curr_A_ext[n-1, n-1]

    for i in range(n-2, -1, -1):
        curr_x[i] = (curr_A_ext[i, n] - sum([curr_A_ext[i, k]*curr_x[k] for k in range(i+1, n)])) / curr_A_ext[i, i]
    
    max_coord = curr_x[0]

    for i in range(n):
        if abs(max_coord) < abs(curr_x[i]):
            max_coord = curr_x[i]
            
    curr_alpha = max_coord

    if abs( (1 / prev_alpha) - (1 / curr_alpha) ) < eps:
        break

    prev_alpha = curr_alpha
    prev_x = curr_x 
    count += 1

lamda = 1 / curr_alpha

print(""Count: "", count)
print(""Self vector (X): "")
pprint(curr_x.T.n() / curr_x.norm())
print(""Min lambda: "")
pprint(lamda)
print()

print(""Result of valdation lambda: "")
validate_lamda = abs((A - lamda * eye(n)).det())
pprint(validate_lamda)
print()

print(""Result of valdation self vector: "")
validate_self_v = [abs(A*curr_x - lamda * curr_x)]
pprint(validate_self_v)
print()   "
8VpeKiNy,Pruebas verificación principal,scp000,VB.NET,Friday 17th of November 2023 07:43:38 PM CDT,"5VMVH8JK_2UA3090H7H_E0D4E8DBBCB3
5VMVH8JF_2UA3090H7H_E0D4E8DBBCB2
5VMVH8JK_2UA3080H7H_E0D4E8DBBCB2
5VMVH8JK_2UA3090H7H_E0D4E8DBBCB2
5VMVH8JK_2UA3090H7P_E0D4E8DBBCB2
5VMVH8JA_2UA3090H7H_E0D4E8DBBCB2
5VMVH8JK_2UA3090H7M_E0D4E8DBBCB2
5VMVH8JK_2US3090H7H_E0D4E8DBBCB2"
nYhVgpcX,TCA_read_digital,mikroavr,Arduino,Friday 17th of November 2023 07:41:51 PM CDT,"#include ""EEPROM.h""

#include ""Wire.h""
#include ""TCA9555.h""
TCA9555 TCA1(0x20);
TCA9555 TCA2(0x21);

unsigned long cur_time, old_time;
int ledState = LOW;

byte pin_tca[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
byte pin_led = 16;
byte dt_tca1[20];
byte dt_tca2[20];

byte addr_status = 2;
int dt_status = 0;

void setup() {
  // put your setup code here, to run once:
  delay(10);
  Serial.begin(115200);
  Serial.println();
  
    if (!EEPROM.begin(1000)) {
      Serial.println(""Failed to initialise EEPROM"");
      Serial.println(""Restarting..."");
      delay(1000);
      ESP.restart();
    }
    delay(100);
  
  dt_status = EEPROM.readInt(addr_status);
  if(dt_status == -1 )dt_status = 0;
  Serial.print(""dt_status: "");
  Serial.println(dt_status);
  delay(2000);
  
  pinMode(pin_led, OUTPUT);
  
  Wire.begin();
  TCA1.begin();
  TCA2.begin();

  for (int i = 0; i < sizeof(pin_tca); i++) {
    Serial.print(i); Serial.print("","");
    TCA1.pinMode(pin_tca[i], INPUT_PULLUP);
    TCA2.pinMode(pin_tca[i], INPUT_PULLUP);
  }
  Serial.println();
}

void loop() {
  // put your main code here, to run repeatedly:
  cur_time = millis();
  if (cur_time - old_time >= 100) {
    ledState = !ledState;
    digitalWrite(pin_led, ledState);
    Serial.print(""TCA1: "");
    for (int i = 0; i < sizeof(pin_tca) - 4; i++) {
      dt_tca1[i] = TCA1.digitalRead(pin_tca[i]);
      Serial.print(dt_tca1[i]);
      Serial.print("","");
      if(dt_tca1[i] == 0){
        dt_status ++;
        EEPROM.writeInt(addr_status, dt_status);
        EEPROM.commit(); 
      }
      delay(20);
    }
    Serial.println();
    Serial.print(""TCA2: "");
    for (int i = 0; i < sizeof(pin_tca) - 4; i++) {
      dt_tca2[i] = TCA1.digitalRead(pin_tca[i]);
      Serial.print(dt_tca2[i]);
      Serial.print("","");
      if(dt_tca2[i] == 0){
        dt_status ++;
        EEPROM.writeInt(addr_status, dt_status);
        EEPROM.commit(); 
      }
      delay(20);
    }
    Serial.println();
    Serial.print(""dt_status: "");
    Serial.println(dt_status);
    old_time = millis();
  }
}"
F93WenZm,Untitled,pankaj13,YAML,Friday 17th of November 2023 07:33:22 PM CDT,"When I test this code in template editor:

{% set batt = ['sensor.frontdoor_battery', 'sensor.slidingdoorbackyard_battery'] %}
{% for b in batt %}
{{ states(b) }}
{% endfor %}

I see correct values as:
100
72

But when I use the same output in a condition:

{% set batt = ['sensor.frontdoor_battery', 'sensor.slidingdoorbackyard_battery'] %}
{% for b in batt %}
 {% if (({{ states(b) }} | float ) > 0.8) %}
  true
 {% else %}
  false
{% end if %}
{% endfor %}

I get an error:

TemplateSyntaxError: expected token ':', got '}'. Any idea what is wrong with my syntax?"
9bVYUihk,Untitled,XaskeL,Lua,Friday 17th of November 2023 07:31:53 PM CDT,"local lHasDropped = {};

local function dropToFile( sFunctionName, sBuffer )
	local sFileName = string.format( ""%s%d"", tostring( sFunctionName ), getTickCount() );

	local pFile = fileCreate( sFileName );
	
	if ( pFile ) then
		fileWrite( pFile, sBuffer );
		fileFlush( pFile );
		
		fileClose( pFile );
	end
end;

local pLogFile = fileCreate( ""lua-trace.log"" );

--
-- Сброс интересного из памяти
addDebugHook( ""preFunction"",
	function( pSourceResource, sFunctionName, bAllowedByACL, sLuaFileName, iLuaLineNumber, ... )
		local aArgs = { ... };
		
		if ( sFunctionName == ""dxCreateShader"" ) then
			local sHashData = hash( ""sha1"", aArgs [ 1 ] );
			
			if ( not lHasDropped [ sHashData ] ) then
				dropToFile( sFunctionName .. "" - "" .. tostring( sLuaFileName ), aArgs [ 1 ] );
			
				lHasDropped [ sHashData ] = true;
			end
		elseif ( sFunctionName == ""loadstring"" ) then
			local sHashData = hash( ""sha1"", aArgs [ 1 ] );
			
			if ( not lHasDropped [ sHashData ] ) then
				dropToFile( sFunctionName, aArgs [ 1 ] );
				
				lHasDropped [ sHashData ] = true;
			end
		elseif ( sFunctionName == ""engineLoadDFF"" ) then
			local sHashData = hash( ""sha1"", aArgs [ 1 ] .. tostring( #aArgs [ 1 ] ) );
			
			if ( not lHasDropped [ sHashData ] ) then
				dropToFile( sFunctionName, aArgs [ 1 ] );
				
				lHasDropped [ sHashData ] = true;
			end
		elseif ( sFunctionName == ""engineLoadTXD"" ) then
			local sHashData = hash( ""sha1"", aArgs [ 1 ] .. tostring( #aArgs [ 1 ] ) );
			
			if ( not lHasDropped [ sHashData ] ) then
				dropToFile( sFunctionName, aArgs [ 1 ] );
				
				lHasDropped [ sHashData ] = true;
			end
		end
	end, { ""dxCreateShader"", ""loadstring"", ""engineLoadDFF"", ""engineLoadTXD"" }
);

function table.serialize( t ) 
    if not t or type( t ) ~= 'table' then  
        return false 
    end -- if nil or not a table 
    local buf = '{' 
    for key,value in pairs( t ) do 
        local v_type,k_type = type( value ),type( key ) 
        if      v_type ~= 'userdata'    and k_type ~= 'userdata' -- ignore fields and keys witch contain userdata, thread or function 
        and     v_type ~= 'thread'      and k_type ~= 'thread'  
        and     v_type ~= 'function'    and k_type ~= 'function'      
        then 
            if k_type == 'number' then   
                buf = buf .. '['..key..'] = ' 
            else 
                buf = buf .. '[\''..key..'\'] = ' end 
            if v_type == 'table' then  
                value = table.serialize( value )  
            elseif v_type == 'string' then  
                value = '\''..value..'\'' 
            else  
                value = tostring( value )  
            end 
            buf = buf .. value 
            if next( t,key ) then buf = buf..',' end 
        end 
    end 
    return buf .. '}' 
end 

--
-- Логгирование работы всех функций Lua, кроме замены моделей
addDebugHook( ""preFunction"", function( pSourceResource, sFunctionName, bAllowedByACL, sLuaFileName, iLuaLineNumber, ... )
	local aArgs = { ... };
	
	if ( sFunctionName ~= ""engineLoadDFF"" and sFunctionName ~= ""engineLoadTXD"" and sFunctionName ~= ""engineLoadCOL"" ) then
		if ( #aArgs > 0 ) then
			fileWrite( pLogFile, sFunctionName .. "" -> "" .. table.serialize( aArgs, true ) .. ""\n"" );
			fileFlush( pLogFile );
		end
	end
end );"
GyrYFj1p,Day 09 recap,HarrJ,Java,Friday 17th of November 2023 07:12:12 PM CDT,"import java.util.Scanner;
public class Day09A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double num1, num2;
        String op;
        
        System.out.println(""Enter the math operation(+ - * /):"");
        op = sc.nextLine();
        System.out.print(""Enter 1st Number: "");
        num1 = sc.nextDouble();
        System.out.print(""Enter 2nd Number: "");
        num2 = sc.nextDouble();
        
        if (op.equals(""+"")) {
            System.out.println(num1 + ""+"" + num2 + ""="" + (num1+num2));
        } else if (op.equals(""-"")) {
            System.out.println(num1 + ""-"" + num2 + ""="" + (num1-num2));
        } 
//        else if (op.equals(""_"")) {
//            System.out.println(num1 + ""_"" + num2 + ""="" + (num1_num2));
//        } 
        else {
            System.out.println(""Operator not found"");
        }
    }
}

//-------------------------------
public class Day09B {
    public static void main(String[] args) {
        //gagawa ng reference/object
        // ClassName varName = new ClassName();
        Day09B callMe = new Day09B();
        
        callMe.print1();
        callMe.print1();
        callMe.print2();
        callMe.printCombo();
    }
    
    void print1() {
        System.out.println(""I am print one"");
    }
    void print2() {
        System.out.println(""Speedy 2"");
    }
    void printCombo() {
        System.out.println(""Calling other methods"");
        print1();
        print2();
    }
}


//-------------------------------

import java.util.Scanner;

public class Day09C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Day09C callMe = new Day09C();
        double length, width;
        
        System.out.print(""Enter rectangle length: "");
        length = sc.nextDouble();
        System.out.print(""Enter rectangle width: "");
        width = sc.nextDouble();
        
        callMe.computePerimeter(length, width);
        callMe.computeArea(length, width);
    }
    
    void computePerimeter(double length, double width){
        double perimeter = 2 * (length + width);
        
        System.out.print(""perimeter: "");
        System.out.println(perimeter);
    }
    
    void computeArea(double length, double width){
        double area = length * width;
        
        System.out.print(""area: "");
        System.out.println(area);
    }
}


//-------------------------------

import java.util.Scanner;

public class Day09D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Day09D callMe = new Day09D();
        double length = 0, width = 0, height = 0, result = 0;
        int opt;
        String label = """";
        
        
        System.out.println(""What to compute?"");
        System.out.println(""1 - Rectangle Area"");
        System.out.println(""2 - Rectangular Prism Volume"");
        System.out.println(""3 - Rectangular Prism Surface Area"");
        System.out.print("">> "");
        opt = sc.nextInt();
        
        if (opt >= 1 && opt <= 3) {
            System.out.print(""Enter rectangle length: "");
            length = sc.nextDouble();
            System.out.print(""Enter rectangle width: "");
            width = sc.nextDouble();
            if (opt > 1) {
                System.out.print(""Enter rectangle height: "");
                height = sc.nextDouble();
            }
        }
        
        switch (opt) {
            case 1:
                label = ""area"";
                result = callMe.computeArea(length, width);
                break;
            case 2:
                label = ""volume"";
                result = callMe.computeVolume(length, width, height);
                break;
            case 3:
                label = ""surface area"";
                result = callMe.computeSurfaceArea(length, width, height);
                break;
        }
        
        System.out.println(label + "" : "" +  result);
    }
        
    double computeArea(double length, double width){
        double area = length * width;
        
        return area;
    }
    double computeVolume(double length, double width, double height){
        double volume = length * width * height;
        
        return volume;
    }
    
    double computeSurfaceArea(double length, double width, double height){
        double sArea =  0;
        
        return sArea;
    }
}
"
9yEg2uFA,◌MOK layout Cherokee MT,dksetiavan,YAML,Friday 17th of November 2023 06:26:36 PM CDT,"{
""title"":""Cherokee MT"",
""onScreen"":{
""main"":[
""[MT:ᎠᎡᎢᎣᎤᎥᎠ][MT:ᎦᎧᎨᎩᎪᎫᎬᎦ][MT:ᎭᎮᎯᎰᎱᎲᎭ][MT:ᎳᎴᎵᎶᎷᎸᎳ][MT:ᎹᎺᎻᎼᎽᏵᎹ][DEL]"",
""[MT:ᎾᎿᏀᏁᏂᏃᏄᏅᎾ][MT:ᏆᏇᏈᏉᏊᏋᏆ][MT:ᏌᏍᏎᏏᏐᏑᏒᏌ][MT:ᏓᏕᏗᏙᏚᏛᏓ][MT:ᏔᏖᏘᏔ][ALTGR:[MT]]"",
""[MT:ᏝᏞᏟᏠᏡᏢᏝ][MT:ᏣᏤᏥᏦᏧᏨᏣ][MT:ᏩᏪᏫᏬᏭᏮᏩ][MT:ᏯᏰᏱᏲᏳᏴᏯ]Ꮬ[SHIFT]"",
""[TOOL][123:,][SPACE][][][SYM:.][Enter]""
],

""shifted"":[
""[XK:ʔaeiouv][XK:gk]hlm[DEL]"",
""nqsdt[123:[MT]]"",
""[MC:tl][MC:ts]wy[MC:dl][SHIFT]"",
""[LOCK][ALTGR:,][SPACE][][][SYM:.][Enter]""
],

""altGr"":[
""[MT:ꭰꭱꭲꭳꭴꭵꭰ][MT:ꭶꭷꭸꭹꭺꭻꭼꭶ][MT:ꭽꭾꭿꮀꮁꮂꭽ][MT:ꮃꮄꮅꮆꮇꮈꮃ][MT:ꮉꮊꮋꮌꮍᏽꮉ][DEL]"",
""[MT:ꮎꮏꮐꮑꮒꮓꮔꮕꮎ][MT:ꮖꮗꮘꮙꮚꮛꮖ][MT:ꮜꮝꮞꮟꮠꮡꮢꮜ][MT:ꮣꮥꮧꮩꮪꮫꮣ][MT:ꮤꮦꮨꮤ][123:[MT]]"",
""[MT:ꮭꮮꮯꮰꮱꮲꮭ][MT:ꮳꮴꮵꮶꮷꮸꮳ][MT:ꮹꮺꮻꮼꮽꮾꮹ][MT:ꮿᏸᏹᏺᏻᏼꮿ]ꮬ[SHIFT]"",
""[LOCK][ALTGR:,][SPACE][][][SYM:.][Enter]""
],

""altGrShifted"":[
""1234567890"",
""qwertyuiop"",
""asdfghjkl"",
""[SHIFT]zxcvbnm[DEL]"",
""[LOCK][ALTGR:,][SPACE][][][SYM:.][Enter]""
],

""num"":[
""=123/[4D:$£¥€₹][Del]"",
""*456#[4D:% ‰ ‱]("",
""+789-@)"",
""[LOCK][ALTGR:,]0[SPACE][][SYM:.][Enter]""
],""

prediction"":{
""MT"":true
}

}
}
 "
37b4Za8b,2023-11-17_stats.json,rdp_snitch,JSON,Friday 17th of November 2023 06:18:18 PM CDT,"{
  ""ip"": {
    ""106.116.169.71"": 6,
    ""167.94.138.125"": 3,
    ""216.176.32.70"": 24,
    ""194.165.16.76"": 6,
    ""87.251.75.145"": 3,
    ""205.210.31.253"": 9,
    ""185.190.24.101"": 6,
    ""62.204.41.132"": 18,
    ""212.70.149.146"": 15,
    ""83.97.73.77"": 6,
    ""207.210.194.114"": 3,
    ""87.251.75.120"": 9,
    ""194.165.16.78"": 6,
    ""45.140.17.46"": 9,
    ""103.79.142.180"": 69,
    ""198.235.24.43"": 9,
    ""23.239.0.207"": 3,
    ""194.165.17.21"": 78,
    ""194.26.135.170"": 3,
    ""193.37.69.150"": 6,
    ""62.122.184.165"": 6,
    ""152.89.198.133"": 6,
    ""166.88.77.87"": 3,
    ""45.227.254.54"": 6,
    ""151.234.38.177"": 6,
    ""165.154.138.85"": 3,
    ""13.83.4.25"": 3,
    ""188.121.98.228"": 3,
    ""205.210.31.207"": 9,
    ""81.19.135.47"": 9,
    ""67.217.59.233"": 3,
    ""103.178.59.224"": 33,
    ""87.251.75.64"": 3,
    ""185.220.103.12"": 3,
    ""185.170.144.3"": 3,
    ""45.227.254.55"": 6,
    ""172.104.60.244"": 3,
    ""95.217.37.212"": 3,
    ""62.122.184.166"": 12,
    ""62.122.184.168"": 6,
    ""198.235.24.123"": 9,
    ""167.248.133.33"": 3
  },
  ""asn"": {
    ""AS4134"": 6,
    ""AS398324"": 6,
    ""AS398465"": 24,
    ""AS48721"": 90,
    ""AS208091"": 21,
    ""AS396982"": 36,
    ""AS211632"": 6,
    ""AS59425"": 18,
    ""AS204428"": 15,
    ""AS208312"": 6,
    ""AS17378"": 3,
    ""AS198953"": 9,
    ""AS135967"": 69,
    ""AS63949"": 6,
    ""AS57523"": 33,
    ""AS9312"": 3,
    ""AS267784"": 12,
    ""AS58224"": 6,
    ""AS135377"": 3,
    ""AS8075"": 3,
    ""AS202468"": 3,
    ""AS209588"": 9,
    ""AS19318"": 3,
    ""AS133676"": 33,
    ""AS4224"": 3,
    ""AS197414"": 3,
    ""AS24940"": 3
  },
  ""isp"": {
    ""Chinanet"": 6,
    ""Censys, Inc."": 6,
    ""Rackdog, LLC"": 24,
    ""Flyservers S.A."": 111,
    ""Xhost Internet Solutions LP"": 18,
    ""Google LLC"": 36,
    ""Internet Solutions & Innovations LTD."": 6,
    ""Horizon LLC"": 18,
    ""SS-Net"": 15,
    ""Red Byte LLC"": 6,
    ""TierPoint"": 3,
    ""Proton66 OOO"": 9,
    ""CADI"": 69,
    ""Akamai Technologies, Inc."": 3,
    ""Chang Way Technologies Co. Limited"": 33,
    ""Xhost Internet Solutions"": 6,
    ""EGIHosting"": 3,
    ""Iran Telecommunication Company PJS"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Microsoft Corporation"": 3,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 3,
    ""Interserver, Inc"": 3,
    ""Precious netcom pvt ltd"": 33,
    ""The Calyx Institute"": 3,
    ""Akamai Technologies"": 3,
    ""Hetzner Online GmbH"": 3
  },
  ""org"": {
    ""Chinanet HE"": 6,
    ""Censys, Inc"": 3,
    ""Bernardi Family Investments"": 24,
    ""Flyservers S.A"": 90,
    ""Xhost Internet Solutions"": 15,
    ""Palo Alto Networks, Inc"": 36,
    ""Tribeka Web Advisors S.A"": 6,
    ""Horizon LLC"": 18,
    ""4Media Ltd"": 15,
    ""Red Byte LLC"": 6,
    ""Impact Factors"": 3,
    ""Proton66 LLC"": 9,
    ""Cadi international trading services company limited"": 69,
    ""Linode"": 6,
    ""Chang Way Technologies Co. Limited"": 27,
    ""XHOSTIS"": 6,
    ""Starcrecium Limited"": 6,
    ""Evoxt"": 3,
    ""UAB Host Baltic"": 12,
    ""Telecommunication Company"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Microsoft Azure Cloud (westus)"": 3,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 3,
    ""Alviva Holding Limited"": 9,
    ""Host Department NJ, LLC"": 3,
    ""A ONE Services"": 33,
    ""The Calyx Institute"": 3,
    ""Xhostis"": 3,
    ""HETZNER-DC"": 3,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""Hebei"": 6,
    ""Michigan"": 6,
    ""England"": 24,
    ""Kaunas"": 90,
    ""North Holland"": 24,
    ""California"": 42,
    ""Mariehamns stad"": 6,
    ""Moscow"": 66,
    ""Plovdiv"": 15,
    ""Texas"": 3,
    ""Hanoi"": 69,
    ""Tsuen Wan District"": 3,
    ""Vilnius"": 12,
    ""West Azerbaijan Province"": 6,
    ""Hesse"": 3,
    ""Tehran"": 3,
    ""Sverdlovsk Oblast"": 9,
    ""New Jersey"": 3,
    ""West Bengal"": 33,
    ""New York"": 3,
    ""North West"": 3,
    ""Uusimaa"": 3
  },
  ""country"": {
    ""China"": 6,
    ""United States"": 57,
    ""United Kingdom"": 24,
    ""Lithuania"": 102,
    ""Netherlands"": 24,
    ""Aland Islands"": 6,
    ""Russia"": 75,
    ""Bulgaria"": 15,
    ""Vietnam"": 69,
    ""Hong Kong"": 3,
    ""Iran"": 9,
    ""Germany"": 3,
    ""India"": 33,
    ""Singapore"": 3,
    ""Finland"": 3
  },
  ""account"": {
    ""(empty)"": 15,
    ""hello"": 234,
    ""Test"": 30,
    ""Administr"": 54,
    ""vLXhBWShk"": 3,
    ""GJYYUH"": 3,
    ""TRNXpi"": 3,
    ""Domain"": 60,
    ""xQPaiRRBF"": 3,
    ""nwUZTX"": 3,
    ""vrPesm"": 3,
    ""Administrator"": 3,
    ""XauEAcwVG"": 3,
    ""ASaVNG"": 3,
    ""AGtYBK"": 3,
    ""iKvOeJBTT"": 3,
    ""OrUQer"": 3,
    ""LkoKSv"": 3
  },
  ""keyboard"": {
    ""Unknown"": 432
  },
  ""client_build"": {
    ""Unknown"": 432
  },
  ""client_name"": {
    ""Unknown"": 432
  },
  ""ip_type"": {
    ""Unknown"": 348,
    ""hosting"": 60,
    ""proxy"": 24
  }
}"
V1wAYuwQ,2023-11-17_stats.json,rdp_snitch,JSON,Friday 17th of November 2023 06:16:06 PM CDT,"{
  ""ip"": {
    ""106.116.169.71"": 4,
    ""167.94.138.125"": 2,
    ""216.176.32.70"": 16,
    ""194.165.16.76"": 4,
    ""87.251.75.145"": 2,
    ""205.210.31.253"": 6,
    ""185.190.24.101"": 4,
    ""62.204.41.132"": 12,
    ""212.70.149.146"": 10,
    ""83.97.73.77"": 4,
    ""207.210.194.114"": 2,
    ""87.251.75.120"": 6,
    ""194.165.16.78"": 4,
    ""45.140.17.46"": 6,
    ""103.79.142.180"": 46,
    ""198.235.24.43"": 6,
    ""23.239.0.207"": 2,
    ""194.165.17.21"": 52,
    ""194.26.135.170"": 2,
    ""193.37.69.150"": 4,
    ""62.122.184.165"": 4,
    ""152.89.198.133"": 4,
    ""166.88.77.87"": 2,
    ""45.227.254.54"": 4,
    ""151.234.38.177"": 4,
    ""165.154.138.85"": 2,
    ""13.83.4.25"": 2,
    ""188.121.98.228"": 2,
    ""205.210.31.207"": 6,
    ""81.19.135.47"": 6,
    ""67.217.59.233"": 2,
    ""103.178.59.224"": 22,
    ""87.251.75.64"": 2,
    ""185.220.103.12"": 2,
    ""185.170.144.3"": 2,
    ""45.227.254.55"": 4,
    ""172.104.60.244"": 2,
    ""95.217.37.212"": 2,
    ""62.122.184.166"": 8,
    ""62.122.184.168"": 4,
    ""198.235.24.123"": 6,
    ""167.248.133.33"": 2
  },
  ""asn"": {
    ""AS4134"": 4,
    ""AS398324"": 4,
    ""AS398465"": 16,
    ""AS48721"": 60,
    ""AS208091"": 14,
    ""AS396982"": 24,
    ""AS211632"": 4,
    ""AS59425"": 12,
    ""AS204428"": 10,
    ""AS208312"": 4,
    ""AS17378"": 2,
    ""AS198953"": 6,
    ""AS135967"": 46,
    ""AS63949"": 4,
    ""AS57523"": 22,
    ""AS9312"": 2,
    ""AS267784"": 8,
    ""AS58224"": 4,
    ""AS135377"": 2,
    ""AS8075"": 2,
    ""AS202468"": 2,
    ""AS209588"": 6,
    ""AS19318"": 2,
    ""AS133676"": 22,
    ""AS4224"": 2,
    ""AS197414"": 2,
    ""AS24940"": 2
  },
  ""isp"": {
    ""Chinanet"": 4,
    ""Censys, Inc."": 4,
    ""Rackdog, LLC"": 16,
    ""Flyservers S.A."": 74,
    ""Xhost Internet Solutions LP"": 12,
    ""Google LLC"": 24,
    ""Internet Solutions & Innovations LTD."": 4,
    ""Horizon LLC"": 12,
    ""SS-Net"": 10,
    ""Red Byte LLC"": 4,
    ""TierPoint"": 2,
    ""Proton66 OOO"": 6,
    ""CADI"": 46,
    ""Akamai Technologies, Inc."": 2,
    ""Chang Way Technologies Co. Limited"": 22,
    ""Xhost Internet Solutions"": 4,
    ""EGIHosting"": 2,
    ""Iran Telecommunication Company PJS"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Microsoft Corporation"": 2,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""Interserver, Inc"": 2,
    ""Precious netcom pvt ltd"": 22,
    ""The Calyx Institute"": 2,
    ""Akamai Technologies"": 2,
    ""Hetzner Online GmbH"": 2
  },
  ""org"": {
    ""Chinanet HE"": 4,
    ""Censys, Inc"": 2,
    ""Bernardi Family Investments"": 16,
    ""Flyservers S.A"": 60,
    ""Xhost Internet Solutions"": 10,
    ""Palo Alto Networks, Inc"": 24,
    ""Tribeka Web Advisors S.A"": 4,
    ""Horizon LLC"": 12,
    ""4Media Ltd"": 10,
    ""Red Byte LLC"": 4,
    ""Impact Factors"": 2,
    ""Proton66 LLC"": 6,
    ""Cadi international trading services company limited"": 46,
    ""Linode"": 4,
    ""Chang Way Technologies Co. Limited"": 18,
    ""XHOSTIS"": 4,
    ""Starcrecium Limited"": 4,
    ""Evoxt"": 2,
    ""UAB Host Baltic"": 8,
    ""Telecommunication Company"": 4,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Microsoft Azure Cloud (westus)"": 2,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""Alviva Holding Limited"": 6,
    ""Host Department NJ, LLC"": 2,
    ""A ONE Services"": 22,
    ""The Calyx Institute"": 2,
    ""Xhostis"": 2,
    ""HETZNER-DC"": 2,
    ""Censys, Inc."": 2
  },
  ""regionName"": {
    ""Hebei"": 4,
    ""Michigan"": 4,
    ""England"": 16,
    ""Kaunas"": 60,
    ""North Holland"": 16,
    ""California"": 28,
    ""Mariehamns stad"": 4,
    ""Moscow"": 44,
    ""Plovdiv"": 10,
    ""Texas"": 2,
    ""Hanoi"": 46,
    ""Tsuen Wan District"": 2,
    ""Vilnius"": 8,
    ""West Azerbaijan Province"": 4,
    ""Hesse"": 2,
    ""Tehran"": 2,
    ""Sverdlovsk Oblast"": 6,
    ""New Jersey"": 2,
    ""West Bengal"": 22,
    ""New York"": 2,
    ""North West"": 2,
    ""Uusimaa"": 2
  },
  ""country"": {
    ""China"": 4,
    ""United States"": 38,
    ""United Kingdom"": 16,
    ""Lithuania"": 68,
    ""Netherlands"": 16,
    ""Aland Islands"": 4,
    ""Russia"": 50,
    ""Bulgaria"": 10,
    ""Vietnam"": 46,
    ""Hong Kong"": 2,
    ""Iran"": 6,
    ""Germany"": 2,
    ""India"": 22,
    ""Singapore"": 2,
    ""Finland"": 2
  },
  ""account"": {
    ""(empty)"": 10,
    ""hello"": 156,
    ""Test"": 20,
    ""Administr"": 36,
    ""vLXhBWShk"": 2,
    ""GJYYUH"": 2,
    ""TRNXpi"": 2,
    ""Domain"": 40,
    ""xQPaiRRBF"": 2,
    ""nwUZTX"": 2,
    ""vrPesm"": 2,
    ""Administrator"": 2,
    ""XauEAcwVG"": 2,
    ""ASaVNG"": 2,
    ""AGtYBK"": 2,
    ""iKvOeJBTT"": 2,
    ""OrUQer"": 2,
    ""LkoKSv"": 2
  },
  ""keyboard"": {
    ""Unknown"": 288
  },
  ""client_build"": {
    ""Unknown"": 288
  },
  ""client_name"": {
    ""Unknown"": 288
  },
  ""ip_type"": {
    ""Unknown"": 232,
    ""hosting"": 40,
    ""proxy"": 16
  }
}"
bUkTse5b,2023-11-17_stats.json,rdp_snitch,JSON,Friday 17th of November 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""106.116.169.71"": 2,
    ""167.94.138.125"": 1,
    ""216.176.32.70"": 8,
    ""194.165.16.76"": 2,
    ""87.251.75.145"": 1,
    ""205.210.31.253"": 3,
    ""185.190.24.101"": 2,
    ""62.204.41.132"": 6,
    ""212.70.149.146"": 5,
    ""83.97.73.77"": 2,
    ""207.210.194.114"": 1,
    ""87.251.75.120"": 3,
    ""194.165.16.78"": 2,
    ""45.140.17.46"": 3,
    ""103.79.142.180"": 23,
    ""198.235.24.43"": 3,
    ""23.239.0.207"": 1,
    ""194.165.17.21"": 26,
    ""194.26.135.170"": 1,
    ""193.37.69.150"": 2,
    ""62.122.184.165"": 2,
    ""152.89.198.133"": 2,
    ""166.88.77.87"": 1,
    ""45.227.254.54"": 2,
    ""151.234.38.177"": 2,
    ""165.154.138.85"": 1,
    ""13.83.4.25"": 1,
    ""188.121.98.228"": 1,
    ""205.210.31.207"": 3,
    ""81.19.135.47"": 3,
    ""67.217.59.233"": 1,
    ""103.178.59.224"": 11,
    ""87.251.75.64"": 1,
    ""185.220.103.12"": 1,
    ""185.170.144.3"": 1,
    ""45.227.254.55"": 2,
    ""172.104.60.244"": 1,
    ""95.217.37.212"": 1,
    ""62.122.184.166"": 4,
    ""62.122.184.168"": 2,
    ""198.235.24.123"": 3,
    ""167.248.133.33"": 1
  },
  ""asn"": {
    ""AS4134"": 2,
    ""AS398324"": 2,
    ""AS398465"": 8,
    ""AS48721"": 30,
    ""AS208091"": 7,
    ""AS396982"": 12,
    ""AS211632"": 2,
    ""AS59425"": 6,
    ""AS204428"": 5,
    ""AS208312"": 2,
    ""AS17378"": 1,
    ""AS198953"": 3,
    ""AS135967"": 23,
    ""AS63949"": 2,
    ""AS57523"": 11,
    ""AS9312"": 1,
    ""AS267784"": 4,
    ""AS58224"": 2,
    ""AS135377"": 1,
    ""AS8075"": 1,
    ""AS202468"": 1,
    ""AS209588"": 3,
    ""AS19318"": 1,
    ""AS133676"": 11,
    ""AS4224"": 1,
    ""AS197414"": 1,
    ""AS24940"": 1
  },
  ""isp"": {
    ""Chinanet"": 2,
    ""Censys, Inc."": 2,
    ""Rackdog, LLC"": 8,
    ""Flyservers S.A."": 37,
    ""Xhost Internet Solutions LP"": 6,
    ""Google LLC"": 12,
    ""Internet Solutions & Innovations LTD."": 2,
    ""Horizon LLC"": 6,
    ""SS-Net"": 5,
    ""Red Byte LLC"": 2,
    ""TierPoint"": 1,
    ""Proton66 OOO"": 3,
    ""CADI"": 23,
    ""Akamai Technologies, Inc."": 1,
    ""Chang Way Technologies Co. Limited"": 11,
    ""Xhost Internet Solutions"": 2,
    ""EGIHosting"": 1,
    ""Iran Telecommunication Company PJS"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Microsoft Corporation"": 1,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 1,
    ""Interserver, Inc"": 1,
    ""Precious netcom pvt ltd"": 11,
    ""The Calyx Institute"": 1,
    ""Akamai Technologies"": 1,
    ""Hetzner Online GmbH"": 1
  },
  ""org"": {
    ""Chinanet HE"": 2,
    ""Censys, Inc"": 1,
    ""Bernardi Family Investments"": 8,
    ""Flyservers S.A"": 30,
    ""Xhost Internet Solutions"": 5,
    ""Palo Alto Networks, Inc"": 12,
    ""Tribeka Web Advisors S.A"": 2,
    ""Horizon LLC"": 6,
    ""4Media Ltd"": 5,
    ""Red Byte LLC"": 2,
    ""Impact Factors"": 1,
    ""Proton66 LLC"": 3,
    ""Cadi international trading services company limited"": 23,
    ""Linode"": 2,
    ""Chang Way Technologies Co. Limited"": 9,
    ""XHOSTIS"": 2,
    ""Starcrecium Limited"": 2,
    ""Evoxt"": 1,
    ""UAB Host Baltic"": 4,
    ""Telecommunication Company"": 2,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Microsoft Azure Cloud (westus)"": 1,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 1,
    ""Alviva Holding Limited"": 3,
    ""Host Department NJ, LLC"": 1,
    ""A ONE Services"": 11,
    ""The Calyx Institute"": 1,
    ""Xhostis"": 1,
    ""HETZNER-DC"": 1,
    ""Censys, Inc."": 1
  },
  ""regionName"": {
    ""Hebei"": 2,
    ""Michigan"": 2,
    ""England"": 8,
    ""Kaunas"": 30,
    ""North Holland"": 8,
    ""California"": 14,
    ""Mariehamns stad"": 2,
    ""Moscow"": 22,
    ""Plovdiv"": 5,
    ""Texas"": 1,
    ""Hanoi"": 23,
    ""Tsuen Wan District"": 1,
    ""Vilnius"": 4,
    ""West Azerbaijan Province"": 2,
    ""Hesse"": 1,
    ""Tehran"": 1,
    ""Sverdlovsk Oblast"": 3,
    ""New Jersey"": 1,
    ""West Bengal"": 11,
    ""New York"": 1,
    ""North West"": 1,
    ""Uusimaa"": 1
  },
  ""country"": {
    ""China"": 2,
    ""United States"": 19,
    ""United Kingdom"": 8,
    ""Lithuania"": 34,
    ""Netherlands"": 8,
    ""Aland Islands"": 2,
    ""Russia"": 25,
    ""Bulgaria"": 5,
    ""Vietnam"": 23,
    ""Hong Kong"": 1,
    ""Iran"": 3,
    ""Germany"": 1,
    ""India"": 11,
    ""Singapore"": 1,
    ""Finland"": 1
  },
  ""account"": {
    ""(empty)"": 5,
    ""hello"": 78,
    ""Test"": 10,
    ""Administr"": 18,
    ""vLXhBWShk"": 1,
    ""GJYYUH"": 1,
    ""TRNXpi"": 1,
    ""Domain"": 20,
    ""xQPaiRRBF"": 1,
    ""nwUZTX"": 1,
    ""vrPesm"": 1,
    ""Administrator"": 1,
    ""XauEAcwVG"": 1,
    ""ASaVNG"": 1,
    ""AGtYBK"": 1,
    ""iKvOeJBTT"": 1,
    ""OrUQer"": 1,
    ""LkoKSv"": 1
  },
  ""keyboard"": {
    ""Unknown"": 144
  },
  ""client_build"": {
    ""Unknown"": 144
  },
  ""client_name"": {
    ""Unknown"": 144
  },
  ""ip_type"": {
    ""Unknown"": 116,
    ""hosting"": 20,
    ""proxy"": 8
  }
}"
cJFkeX8R,Compile source code,Zgragselus,C++,Friday 17th of November 2023 06:04:15 PM CDT,"
/// <summary>
/// Compile source (script) file into dll that can be loaded and used
/// </summary>
/// <param name=""file"">Path to source cpp file</param>
void DirectoryTree::CompileSource(const std::string& file)
{
	std::string command = """";

	switch (mCompilerType)
	{
		// MSVC Compiler
	case MSVC:
		// Here is the deal, MSVC always generates .obj, .exp, .lib and .dll file in the current folder
		// so, we will call the MSVC compiler with all settings, and let it build dll, writing output 
		// to Build.log
		//
		// Once this is done, we will delete .obj, .exp and .lib file as we don't need those anymore. 
		// Which is followed by copying .dll file into the folder where .cpp file originally was, this
		// is not all though - as we just generated a new .dll plugin, we also need to queue it for 
		// loading!
		//
		// The loading only happens when .dll exists (otherwise the compilation has failed and the
		// Build.log has to be examined.
		//
		// Uses system calls!

		// Compilation (differs for DEBUG vs RELEASE builds)
#ifdef NDEBUG
		command = std::string(""cmd /S /C \""\"""") + mCompilerPaths[0] + std::string(""/vcvarsall.bat\"" amd64 && \
					\"""") + mCompilerPaths[1] + std::string(""/cl.exe\"" /O2 /EHsc /GL /MD \
					/I \""../Source/Engine/\"" \
					/I \""../Dependencies/\"" \
					/I \""../Dependencies/Bullet/include/\"" \
					/LD \
					"") + file + std::string("" \
					\""Engine.lib\"" \
					> Build.log\"""");
#else
		command = std::string(""cmd /S /C \""\"""") + mCompilerPaths[0] + std::string(""/vcvarsall.bat\"" amd64 && \
					\"""") + mCompilerPaths[1] + std::string(""/cl.exe\"" /O2 /EHsc /DEBUG /ZI /MDd \
					/I \""../Source/Engine/\"" \
					/I \""../Dependencies/\"" \
					/I \""../Dependencies/Bullet/include/\"" \
					/LD \
					"") + file + std::string("" \
					\""Engine_d.lib\"" \
					> Build.log\"""");
#endif
		std::cout << command << std::endl;
		system(command.c_str());

		// First, Check compilation results - check whether the output file exists
		if (Engine::Files::Exists(""Build.log""))
		{
			// Open the file and look for 'Finished generating code' - which points to compilation success
			std::ifstream buildLog(""Build.log"");
			bool buildSucessful = false;

			std::string line;
			while (std::getline(buildLog, line))
			{
				if (line.find(""Finished generating code"") != std::string::npos)
				{
					buildSucessful = true;
				}

				// TODO - these lines can be appended to log at some level
			}

			buildLog.close();

			// At this point we can start processing the new dll and loading it.
			if (buildSucessful)
			{
				// Get previous plugin node using this script
				Engine::Manager<Engine::Plugin>::Node* node = mPluginManager->GetNode(file.substr(0, file.length() - 4) + std::string("".dll""));

				// In case node would exist, we need to store data for each instantiated component in the scene
				// as these also need to be deleted (and re-created after new library is loaded).
				std::map<Engine::GameObject*, std::string> tmp;

				// If the node exists - we will need to unload associated dll, as we have to replace it with a newly compiled one
				if (node != nullptr)
				{
					// Get plugin name first
					void* name = node->Get()->GetProc<void*>(""GetName"");
					const char* (*fn)() = (const char* (*)())name;
					const char* pluginName = (*fn)();

					// Loop through ALL components of given type, serialize them and delete them
					std::set<Engine::Component*>& components = Engine::ComponentTypeList::GetComponents(Engine::ComponentTypeId::Get(pluginName));
					for (auto it = components.begin(); it != components.end(); it++)
					{
						tmp.insert(std::pair<Engine::GameObject*, std::string>((*it)->mGameObject, (*it)->Serialize()));
						delete (*it);
					}
					components.clear();

					// Unload the node
					node->Get()->Unload();
				}

				// Delete .obj, .exp and .lib files in release builds
#ifdef NDEBUG
				command = std::string(""cmd /S /C \""del "")
					+ std::string(""\"""") + Engine::Files::GetFile(file.substr(0, file.length() - 4)) + std::string("".obj"") + std::string(""\"" "")
					+ std::string(""\"""") + Engine::Files::GetFile(file.substr(0, file.length() - 4)) + std::string("".exp"") + std::string(""\"" "")
					+ std::string(""\"""") + Engine::Files::GetFile(file.substr(0, file.length() - 4)) + std::string("".lib"") + std::string(""\""\"""");
				system(command.c_str());
#endif

				// Move .dll file
				command = std::string(""cmd /S /C \""move "")
					+ std::string(""\"""") + Engine::Files::GetFile(file.substr(0, file.length() - 4)) + std::string("".dll"") + std::string(""\"" "")
					+ Engine::Files::GetFolder(file) + std::string(""\"""");
				system(command.c_str());

				if (node != nullptr)
				{
					node->Get()->Load(file.substr(0, file.length() - 4) + std::string("".dll""));

					void* create = node->Get()->GetProc<void*>(""CreateBehavior"");
					void* name = node->Get()->GetProc<void*>(""GetName"");
					const char* (*fn)() = (const char* (*)())name;
					const char* pluginName = (*fn)();

					Engine::ComponentId componentID = Engine::ComponentTypeId::Get(pluginName);

					Engine::ComponentInterface* componentInterface = new Engine::ComponentInterface();
					componentInterface->CreateComponent = (Engine::Component * (*)())create;

					delete Engine::ComponentFactory::GetScriptComponentManager().find(componentID)->second;
					Engine::ComponentFactory::GetScriptComponentManager().find(componentID)->second = componentInterface;

					// Loop through ALL serialized components, create new ones on given entities and deserialize them
					for (auto it = tmp.begin(); it != tmp.end(); it++)
					{
						Engine::Component* component = componentInterface->CreateComponent();
						component->Deserialize(it->second);
						it->first->AddComponent(componentID, component);
					}
				}
			}
		}
		break;

	default:
		mLog->Print(""Compiler"", ""Error: Invalid Compiler - Can't Compiler Any File!"");
		break;
	}
}"
7rQYgRtf,fgnSortedZomboid_spawnregions,f1re9arden,Lua,Friday 17th of November 2023 06:01:08 PM CDT,"function SpawnRegions()
	return {
		{ name = ""Muldraugh, KY"", file = ""media/maps/Muldraugh, KY/spawnpoints.lua"" },
		{ name = ""Riverside, KY"", file = ""media/maps/Riverside, KY/spawnpoints.lua"" },
		{ name = ""Rosewood, KY"", file = ""media/maps/Rosewood, KY/spawnpoints.lua"" },
		{ name = ""West Point, KY"", file = ""media/maps/West Point, KY/spawnpoints.lua"" },
		{ name = ""Many Spawns root"", file = ""media/maps/Many Spawns root/spawnpoints.lua"" },
		{ name = ""Basements"", file = ""media/maps/Basements/spawnpoints.lua"" },
		{ name = ""vehicle_interior"", file = ""media/maps/vehicle_interior/spawnpoints.lua"" },
		{ name = ""DoubleDeckerBus"", file = ""media/maps/DoubleDeckerBus/spawnpoints.lua"" },
		{ name = ""STEVSpawn"", file = ""media/maps/STEVSpawn/spawnpoints.lua"" },
		{ name = ""STFRRCRSpawn"", file = ""media/maps/STFRRCRSpawn/spawnpoints.lua"" },
		{ name = ""STRSpawn"", file = ""media/maps/STRSpawn/spawnpoints.lua"" },
		{ name = ""Skizots Vehicles Spawn Zones"", file = ""media/maps/Skizots Vehicles Spawn Zones/spawnpoints.lua"" },
		{ name = ""MotoriousExpandedSpawnZones"", file = ""media/maps/MotoriousExpandedSpawnZones/spawnpoints.lua"" },
		{ name = ""VehicleSpawnZonesExpandedRedRace"", file = ""media/maps/VehicleSpawnZonesExpandedRedRace/spawnpoints.lua"" },
		{ name = ""TreadsMilitaryVehicleZoneDefs"", file = ""media/maps/TreadsMilitaryVehicleZoneDefs/spawnpoints.lua"" },
	}
end"
xrM8EDxx,Demo Component (3),Zgragselus,C++,Friday 17th of November 2023 05:40:12 PM CDT,"#include ""SkyeCuillin.h""

class EnemyComponent;
class BulletComponent;

class DemoController : public Engine::Component
{
public:
	Engine::float4 mFloat4Value;
	Engine::mat4 mMatrixValue;
	float mValue;
	int mIntValue;
	std::string mStringValue;

	virtual bool Editor(std::string& prev, std::string& next)
	{
		SetupContext();
		
		return Engine::Component::DefaultEditor(this, &Reflection, prev, next);
	}

	virtual void Init()
	{
		mValue = 0.0f;
	}

	virtual void Shutdown()
	{

	}

	virtual void Update(float deltaTime)
	{
		mValue += 1.0f / 60.0f;
		if (mValue > 1.0f)
		{
			mValue -= 1.0f;
		}

		printf(""%f %f %f\n"",
			this->mGameObject->GetEntity()->Transformation().GetTranslation().x,
			this->mGameObject->GetEntity()->Transformation().GetTranslation().y,
			this->mGameObject->GetEntity()->Transformation().GetTranslation().z);
	}

	virtual std::string Serialize()
	{
		return Engine::Component::DefaultSerialize(this, &Reflection);
	}

	virtual void Deserialize(const std::string& data)
	{
		Engine::Component::DefaultDeserialize(this, &Reflection, data);
	}

	virtual void CollisionEnter(Engine::GameObject* other)
	{

	}

	virtual void CollisionExit(Engine::GameObject* other)
	{

	}

	REFLECT()
};

REFLECT_STRUCT_BEGIN(DemoController)
REFLECT_STRUCT_MEMBER(mValue)
REFLECT_STRUCT_MEMBER(mIntValue)
REFLECT_STRUCT_MEMBER(mFloat4Value)
REFLECT_STRUCT_MEMBER(mMatrixValue)
REFLECT_STRUCT_MEMBER(mStringValue)
REFLECT_STRUCT_END()

SKYE_CUILLIN_COMPONENT(DemoController)"
8nxMkGf4,theme Dark VsC,Hatkat,JavaScript,Friday 17th of November 2023 04:48:00 PM CDT,"{
    ""$schema"": ""vscode://schemas/color-theme"",
    ""name"": ""Dark (Visual Studio)"",
    ""colors"": {
      ""checkbox.border"": ""#000000"",
      ""editor.background"": ""#000000"",
      ""editor.foreground"": ""#D4D4D4"",
      ""editor.inactiveSelectionBackground"": ""#000000"",
      ""editorIndentGuide.background"": ""#000000"",
      ""editorIndentGuide.activeBackground"": ""#000000"",
      ""editor.selectionHighlightBackground"": ""#000000"",
      ""list.dropBackground"": ""#000000"",
      ""activityBarBadge.background"": ""#007ACC"",
      ""sideBarTitle.foreground"": ""#BBBBBB"",
      ""input.placeholderForeground"": ""#A6A6A6"",
      ""menu.background"": ""#000000"",
      ""menu.foreground"": ""#CCCCCC"",
      ""menu.separatorBackground"": ""#000000"",
      ""menu.border"": ""#000000"",
      ""activityBar.background"": ""#000000"",
      ""statusBar.background"": ""#000000"",
      ""titleBar.activeBackground"": ""#000000"",
      ""titleBar.activeForeground"": ""#D4D4D4"",
      ""titleBar.inactiveBackground"": ""#000000"",
      ""titleBar.inactiveForeground"": ""#D4D4D4"",
      ""menubar.selectionBackground"": ""#000000"",
      ""menubar.selectionBorder"": ""#000000"",
      ""menubar.selectionForeground"": ""#D4D4D4"",
      ""tab.activeBackground"": ""#000000"",
      ""tab.inactiveBackground"": ""#000000"",
      ""tab.border"": ""#000000"",
      ""tab.activeForeground"": ""#D4D4D4"",
      ""tab.inactiveForeground"": ""#D4D4D4"",

      ""tab.lastPinnedBorder"": ""#000000"",  // Borde de la última pestaña fijada
      ""editorGroupHeader.tabsBackground"": ""#000000"",  // Fondo de la barra de pestañas completa
      ""editorGroupHeader.noTabsBackground"": ""#000000"",  // Fondo de la barra de pestañas completa cuando no hay pestañas abiertas
      ""editorGroup.border"": ""#000000"",  // Borde de la barra de pestañas

      ""editor.lineHighlightBackground"": ""#000000"",
      ""editor.lineHighlightBorder"": ""#000000"",

    },
    
    ""tokenColors"": [
      {
        ""scope"": [""meta.embedded"", ""source.groovy.embedded"", ""string meta.image.inline.markdown"", ""variable.legacy.builtin.python""],
        ""settings"": {
          ""foreground"": ""#D4D4D4""
        }
      },
      {
        ""scope"": ""emphasis"",
        ""settings"": {
          ""fontStyle"": ""italic""
        }
      },
      {
        ""scope"": ""strong"",
        ""settings"": {
          ""fontStyle"": ""bold""
        }
      },
      {
        ""scope"": ""header"",
        ""settings"": {
          ""foreground"": ""#000080""
        }
      },
      {
        ""scope"": ""comment"",
        ""settings"": {
          ""foreground"": ""#6A9955""
        }
      },
      {
        ""scope"": ""constant.language"",
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": [""constant.numeric"", ""variable.other.enummember"", ""keyword.operator.plus.exponent"", ""keyword.operator.minus.exponent""],
        ""settings"": {
          ""foreground"": ""#b5cea8""
        }
      },
      {
        ""scope"": ""constant.regexp"",
        ""settings"": {
          ""foreground"": ""#646695""
        }
      },
      {
        ""scope"": ""entity.name.tag"",
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""entity.name.tag.css"",
        ""settings"": {
          ""foreground"": ""#d7ba7d""
        }
      },
      {
        ""scope"": ""entity.other.attribute-name"",
        ""settings"": {
          ""foreground"": ""#9cdcfe""
        }
      },
      {
        ""scope"": [""entity.other.attribute-name.class.css"", ""entity.other.attribute-name.class.mixin.css"", ""entity.other.attribute-name.id.css"", ""entity.other.attribute-name.parent-selector.css"", ""entity.other.attribute-name.pseudo-class.css"", ""entity.other.attribute-name.pseudo-element.css"", ""source.css.less entity.other.attribute-name.id"", ""entity.other.attribute-name.scss""],
        ""settings"": {
          ""foreground"": ""#d7ba7d""
        }
      },
      {
        ""scope"": ""invalid"",
        ""settings"": {
          ""foreground"": ""#f44747""
        }
      },
      {
        ""scope"": ""markup.underline"",
        ""settings"": {
          ""fontStyle"": ""underline""
        }
      },
      {
        ""scope"": ""markup.bold"",
        ""settings"": {
          ""fontStyle"": ""bold"",
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""markup.heading"",
        ""settings"": {
          ""fontStyle"": ""bold"",
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""markup.italic"",
        ""settings"": {
          ""fontStyle"": ""italic""
        }
      },
      {
        ""scope"": ""markup.strikethrough"",
        ""settings"": {
          ""fontStyle"": ""strikethrough""
        }
      },
      {
        ""scope"": ""markup.inserted"",
        ""settings"": {
          ""foreground"": ""#b5cea8""
        }
      },
      {
        ""scope"": ""markup.deleted"",
        ""settings"": {
          ""foreground"": ""#ce9178""
        }
      },
      {
        ""scope"": ""markup.changed"",
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""punctuation.definition.quote.begin.markdown"",
        ""settings"": {
          ""foreground"": ""#6A9955""
        }
      },
      {
        ""scope"": ""punctuation.definition.list.begin.markdown"",
        ""settings"": {
          ""foreground"": ""#6796e6""
        }
      },
      {
        ""scope"": ""markup.inline.raw"",
        ""settings"": {
          ""foreground"": ""#ce9178""
        }
      },
      {
        ""name"": ""brackets of XML/HTML tags"",
        ""scope"": ""punctuation.definition.tag"",
        ""settings"": {
          ""foreground"": ""#808080""
        }
      },
      {
        ""scope"": [""meta.preprocessor"", ""entity.name.function.preprocessor""],
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""meta.preprocessor.string"",
        ""settings"": {
          ""foreground"": ""#ce9178""
        }
      },
      {
        ""scope"": ""meta.preprocessor.numeric"",
        ""settings"": {
          ""foreground"": ""#b5cea8""
        }
      },
      {
        ""scope"": ""meta.structure.dictionary.key.python"",
        ""settings"": {
          ""foreground"": ""#9cdcfe""
        }
      },
      {
        ""scope"": ""meta.diff.header"",
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""storage"",
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""storage.type"",
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": [""storage.modifier"", ""keyword.operator.noexcept""],
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": [""string"", ""meta.embedded.assembly""],
        ""settings"": {
          ""foreground"": ""#ce9178""
        }
      },
      {
        ""scope"": ""string.tag"",
        ""settings"": {
          ""foreground"": ""#ce9178""
        }
      },
      {
        ""scope"": ""string.value"",
        ""settings"": {
          ""foreground"": ""#ce9178""
        }
      },
      {
        ""scope"": ""string.regexp"",
        ""settings"": {
          ""foreground"": ""#d16969""
        }
      },
      {
        ""name"": ""String interpolation"",
        ""scope"": [""punctuation.definition.template-expression.begin"", ""punctuation.definition.template-expression.end"", ""punctuation.section.embedded""],
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""name"": ""Reset JavaScript string interpolation expression"",
        ""scope"": ""meta.template.expression"",
        ""settings"": {
          ""foreground"": ""#d4d4d4""
        }
      },
      {
        ""scope"": [""support.type.vendored.property-name"", ""support.type.property-name"", ""variable.css"", ""variable.scss"", ""variable.other.less"", ""source.coffee.embedded""],
        ""settings"": {
          ""foreground"": ""#9cdcfe""
        }
      },
      {
        ""scope"": ""keyword"",
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""keyword.control"",
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""keyword.operator"",
        ""settings"": {
          ""foreground"": ""#d4d4d4""
        }
      },
      {
        ""scope"": [""keyword.operator.new"", ""keyword.operator.expression"", ""keyword.operator.cast"", ""keyword.operator.sizeof"", ""keyword.operator.alignof"", ""keyword.operator.typeid"", ""keyword.operator.alignas"", ""keyword.operator.instanceof"", ""keyword.operator.logical.python"", ""keyword.operator.wordlike""],
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""keyword.other.unit"",
        ""settings"": {
          ""foreground"": ""#b5cea8""
        }
      },
      {
        ""scope"": [""punctuation.section.embedded.begin.php"", ""punctuation.section.embedded.end.php""],
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      },
      {
        ""scope"": ""support.function.git-rebase"",
        ""settings"": {
          ""foreground"": ""#9cdcfe""
        }
      },
      {
        ""scope"": ""constant.sha.git-rebase"",
        ""settings"": {
          ""foreground"": ""#b5cea8""
        }
      },
      {
        ""name"": ""coloring of the Java import and package identifiers"",
        ""scope"": [""storage.modifier.import.java"", ""variable.language.wildcard.java"", ""storage.modifier.package.java""],
        ""settings"": {
          ""foreground"": ""#d4d4d4""
        }
      },
      {
        ""name"": ""this.self"",
        ""scope"": ""variable.language"",
        ""settings"": {
          ""foreground"": ""#569cd6""
        }
      }
    ],
    ""semanticHighlighting"": true,
  ""semanticTokenColors"": {
    ""newOperator"": ""#000000"",
    ""stringLiteral"": ""#000000"",
    ""customLiteral"": ""#000000"",
    ""numberLiteral"": ""#000000""
    }
  }
  "
2v9pcfyR,Pelletpreise,NittyGritty,JSON,Friday 17th of November 2023 04:20:16 PM CDT,"[
    {
        ""id"": ""e5cbb3eee7041f2b"",
        ""type"": ""debug"",
        ""z"": ""dabdc8fc290e3b36"",
        ""name"": ""Lose Pellets"",
        ""active"": true,
        ""tosidebar"": false,
        ""console"": false,
        ""tostatus"": true,
        ""complete"": ""payload"",
        ""targetType"": ""msg"",
        ""statusVal"": ""payload"",
        ""statusType"": ""auto"",
        ""x"": 950,
        ""y"": 80,
        ""wires"": []
    },
    {
        ""id"": ""8ddc1085d9f840e4"",
        ""type"": ""debug"",
        ""z"": ""dabdc8fc290e3b36"",
        ""name"": ""debug 12"",
        ""active"": true,
        ""tosidebar"": false,
        ""console"": false,
        ""tostatus"": true,
        ""complete"": ""payload"",
        ""targetType"": ""msg"",
        ""statusVal"": ""payload"",
        ""statusType"": ""auto"",
        ""x"": 940,
        ""y"": 140,
        ""wires"": []
    },
    {
        ""id"": ""8fcd81c469b747f2"",
        ""type"": ""debug"",
        ""z"": ""dabdc8fc290e3b36"",
        ""name"": ""Pelletes Sackware"",
        ""active"": true,
        ""tosidebar"": false,
        ""console"": false,
        ""tostatus"": true,
        ""complete"": ""payload"",
        ""targetType"": ""msg"",
        ""statusVal"": ""payload"",
        ""statusType"": ""auto"",
        ""x"": 970,
        ""y"": 220,
        ""wires"": []
    },
    {
        ""id"": ""6a99e3f6cf2e0662"",
        ""type"": ""debug"",
        ""z"": ""dabdc8fc290e3b36"",
        ""name"": ""debug 17"",
        ""active"": true,
        ""tosidebar"": false,
        ""console"": false,
        ""tostatus"": true,
        ""complete"": ""payload"",
        ""targetType"": ""msg"",
        ""statusVal"": ""payload"",
        ""statusType"": ""auto"",
        ""x"": 940,
        ""y"": 280,
        ""wires"": []
    },
    {
        ""id"": ""0fc5234932db8552"",
        ""type"": ""function"",
        ""z"": ""dabdc8fc290e3b36"",
        ""name"": ""function 5"",
        ""func"": ""var EuroPos=0;\nvar DatumPos=0\nvar count=0;\n\n// find Pragraph containing Euro Price\n\nfor (var i = 0; i < 30; i++) {\n    if (msg.payload[i].includes(\""Aktueller Preis\"")) {\n        break;\n        }\n    else\n     { count++;}\n}\n\nEuroPos = count+1;\nDatumPos= count+2;\n\n// var EuroPos = 18;\n// var DatumPos = 19\n\nvar words = msg.payload[EuroPos].split(' ');\nvar Preis = (words[0]) + \"" Euro\"";\n\nwords = msg.payload[DatumPos].split(',');\nvar Datum = words[0];\n\nvar Zeit = words[1];\nwords = Zeit.split(' ');\nZeit = words[1] + \"":00\"";\n\nvar pattern = /(\\d{2})\\.(\\d{2})\\.(\\d{4})/;\nvar dt = Datum.replace(pattern, '$3-$2-$1') + \"" \"" + Zeit;\n// var dt = new Date(Datum.replace(pattern, '$3-$2-$1') + Zeit );\ndt = new Date(dt);\n// ----------------------------------------\nEuroPos = EuroPos + 3;\nDatumPos = DatumPos + 3;\n\nvar words = msg.payload[EuroPos].split(' ');\nvar Preis1 = (words[0]) + \"" Euro\"";\n\nwords = msg.payload[DatumPos].split(',');\nvar Datum = words[0];\n\nvar Zeit = words[1];\nwords = Zeit.split(' ');\nZeit = words[1] + \"":00\"";\n\nvar pattern = /(\\d{2})\\.(\\d{2})\\.(\\d{4})/;\nvar dt1 = Datum.replace(pattern, '$3-$2-$1') + \"" \"" + Zeit;\n// var dt = new Date(Datum.replace(pattern, '$3-$2-$1') + Zeit );\ndt1 = new Date(dt);\n\nnode.status({\n    fill: \""green\"",\n    shape: \""ring\"",\n    text:   \""Preis: \"" + Preis +\n            \"", Datum: \"" + Datum +\n            \"", Zeit: \"" + Zeit +\n            \"", Count: \"" + count\n});\n\n\nreturn [{ payload: Preis }, { payload: dt }, { payload: Preis1 }, { payload: dt1 }];"",
        ""outputs"": 4,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 720,
        ""y"": 300,
        ""wires"": [
            [
                ""e5cbb3eee7041f2b""
            ],
            [
                ""8ddc1085d9f840e4""
            ],
            [
                ""8fcd81c469b747f2""
            ],
            [
                ""6a99e3f6cf2e0662""
            ]
        ]
    },
    {
        ""id"": ""7c04d5770e17ef16"",
        ""type"": ""html"",
        ""z"": ""dabdc8fc290e3b36"",
        ""name"": """",
        ""property"": ""payload"",
        ""outproperty"": ""payload"",
        ""tag"": ""p"",
        ""ret"": ""html"",
        ""as"": ""single"",
        ""x"": 550,
        ""y"": 300,
        ""wires"": [
            [
                ""0fc5234932db8552""
            ]
        ]
    },
    {
        ""id"": ""32132abba67ed588"",
        ""type"": ""http request"",
        ""z"": ""dabdc8fc290e3b36"",
        ""name"": """",
        ""method"": ""GET"",
        ""ret"": ""txt"",
        ""paytoqs"": ""ignore"",
        ""url"": ""https://www.holzpellets.net/pelletspreise/"",
        ""tls"": """",
        ""persist"": false,
        ""proxy"": """",
        ""insecureHTTPParser"": false,
        ""authType"": """",
        ""senderr"": false,
        ""headers"": [],
        ""x"": 370,
        ""y"": 300,
        ""wires"": [
            [
                ""7c04d5770e17ef16"",
                ""f266365a77668506""
            ]
        ]
    },
    {
        ""id"": ""f88dc0dd72cd0a25"",
        ""type"": ""inject"",
        ""z"": ""dabdc8fc290e3b36"",
        ""name"": """",
        ""props"": [
            {
                ""p"": ""payload""
            },
            {
                ""p"": ""topic"",
                ""vt"": ""str""
            }
        ],
        ""repeat"": """",
        ""crontab"": """",
        ""once"": false,
        ""onceDelay"": 0.1,
        ""topic"": """",
        ""payload"": """",
        ""payloadType"": ""date"",
        ""x"": 140,
        ""y"": 300,
        ""wires"": [
            [
                ""32132abba67ed588""
            ]
        ]
    }
]"
XGr3jJ8y,PlayerController,i-Xuup,C#,Friday 17th of November 2023 04:08:49 PM CDT,"using System.Collections;
using System.Collections.Generic;
using HyperCasualPack.ScriptableObjects;
using HyperCasualPack.ScriptableObjects.Channels;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.HID;

namespace HyperCasualPack
{
    public class PlayerController : MonoBehaviour, IInteractor
    {
        private GameObject requestHandGameObject = null;
        private bool afterPartyPermanentData;

        public static PlayerController playerController;
        public string requestObjectInHandString = """";
        public bool drinksInTable = false;
        public GameObject playerCanvas;
        public Slider playerSlider;
        public Image playerImageSlider;

        [SerializeField] MovementDataSO _movementDataSO;
        [SerializeField] InputChannelSO _inputChannelSO;
        [SerializeField] BoxCollider playerBoxCollider;
        [SerializeField] Transform rightHand;
        [SerializeField] Transform leftHand;
        [SerializeField] Transform serveDrinkTable;
        [SerializeField] Rigidbody _rbd;
        [SerializeField] Camera mainCamera;

        //Variables para el movimiento del personaje
        private PlayerInput playerInput;
        private Vector3 _currentInputVector;
        private Vector2 input;

        //Cambia IsInteractable a true su currentMagnitud es menor a 0.3
        bool IInteractor.IsInteractable => _currentInputVector.sqrMagnitude < 0.3f;

        private void Awake()
        {
            playerController = this;
        }

        public static PlayerController Instance
        {
            get
            {
                if (playerController == null)
                    Debug.LogError(""PlayerController is Null"");
                return playerController;
            }
        }

        void Start()
        {
            playerInput = GetComponent<PlayerInput>();
            afterPartyPermanentData = GameObject.Find(""PermanentData"").GetComponent<PermanentData>().afterParty;
        }

        void OnEnable()
        {
            _inputChannelSO.JoystickUpdate += OnJoystickUpdate;
        }

        void OnDisable()
        {
            _inputChannelSO.JoystickUpdate -= OnJoystickUpdate;
        }

        //Actualiza los valores del joystick
        void OnJoystickUpdate(Vector2 newMoveDirection)
        {
            if (newMoveDirection.magnitude >= 1f)
            {
                newMoveDirection.Normalize();
            }

            //Movimiento del personaje
            _currentInputVector = new Vector3(newMoveDirection.x * _movementDataSO.SideMoveSpeed, 0f, newMoveDirection.y * _movementDataSO.ForwardMoveSpeed);
            //Dirección a donde mira el personaje
            Vector3 lookDir = new Vector3(_currentInputVector.x, 0f, _currentInputVector.z);
            //si la dirección en que mira no es igual a 0
            if (lookDir != Vector3.zero)
            {
                //mira siempre de frente
                transform.rotation = Quaternion.LookRotation(lookDir, Vector3.up);
            }
        }

        void OnTriggerEnter(Collider other)
        {
            ObjectAnalyser(other.transform.gameObject);
        }

        void ObjectAnalyser(GameObject interactiveObject)
        {          
            if (interactiveObject.CompareTag(""Guest""))
            {
                GuestBehaviour guest = interactiveObject.GetComponent<GuestBehaviour>();
                if (guest != null)
                {
                    //en el caso de que cubro una conversación 
                    if (PartyManager.Instance.requestedConversations.Count > 0 && guest.petitionString == ""conversation"")
                    {
                        guest.guestActive = false;
                        PartyManager.Instance.DispatchGuestFromList(guest.gameObject);
                        PartyManager.Instance.EvaluatePerformance(interactiveObject, ""conversation"");
                        PartyManager.Instance.DispatchRequest(interactiveObject, ""conversation"");
                    }

                    //si lo que tengo en manos no es lo solicitado, mis variables ambas estan vacías o aun no cargo conmigo nada
                    //si lo pongo hasta arriba cancela las demás consultas
                    else if (guest.petitionString != requestObjectInHandString ||
                        (guest.petitionString == """" && requestObjectInHandString == """") ||
                        requestObjectInHandString.Length == 0)
                    {
                        return;
                    }

                    //si lo solicitado por el invitado es lo mismo que llevo en manos
                    else
                    {
                        //Entrega exitosa
                        guest.guestActive = false;
                        PartyManager.Instance.DispatchGuestFromList(guest.gameObject);
                        PartyManager.Instance.EvaluatePerformance(interactiveObject, requestObjectInHandString);
                        PartyManager.Instance.DispatchRequest(interactiveObject, requestObjectInHandString);                       
                        if (afterPartyPermanentData)
                        {
                            PartyManager.Instance.deliveredAPDrinks++;
                        }
                        ReturnObjectToPool();
                    }
                }
            }

            else if (interactiveObject.CompareTag(""Prepare Drink Table""))
            {
                ActivePlayerSlider(""drink"");
            }

            //debe haber al menos una bebida de DrinksPool en ServeDrinkTables debe esta activa
            if (interactiveObject.CompareTag(""Serve Drink Table"") && 
                (requestObjectInHandString == """" || requestObjectInHandString.Length == 0))
            {
                //busca de entre el pool la primera bebida que este activa
                for (int i = 0; i < ServeDrinkTable.Instance.drinksPool.Count; i++)
                {
                    if (ServeDrinkTable.Instance.drinksPool[i].activeSelf)
                    {
                        requestObjectInHandString = ""drink"";
                        LiftObject(ServeDrinkTable.Instance.drinksPool[i]);
                        //debo averiguar la casilla a la cual me dirijo
                        ServeDrinkTable.Instance.EnableDrinkSpace(ServeDrinkTable.Instance.drinksPool[i]);
                        break;
                    }
                }
            }

            else if (interactiveObject.CompareTag(""TrashCube"") && (requestObjectInHandString != """" || requestObjectInHandString.Length > 0))
            {
                ReturnObjectToPool();
            }

            else
            {
                return;
            }
        }

        void FixedUpdate()
        {
            _rbd.velocity = new Vector3(_currentInputVector.x, _rbd.velocity.y, _currentInputVector.z);
        }

        void LiftObject(GameObject objectInService)
        {
            requestHandGameObject = objectInService;
            objectInService.transform.SetParent(rightHand);
        }

        public void ReturnObjectToPool()
        {
            requestObjectInHandString = """";
            if (requestHandGameObject != null)
            {
                requestHandGameObject = null;
            }
            Transform childObject = rightHand.GetChild(0);
            childObject.SetParent(serveDrinkTable);
            childObject.gameObject.SetActive(false);

            int disactivate = 0;
            //por cada una de las bebidas en el pool
            for (int i = 0; i < ServeDrinkTable.Instance.drinksPool.Count; i++)
            {
                //si esta está desactivada
                if (!ServeDrinkTable.Instance.drinksPool[i].activeSelf)
                {                    
                    disactivate++;
                    //si estan todas la bebidas desactivadas
                    if (disactivate == ServeDrinkTable.Instance.drinksPool.Count)
                    {
                        //no puedes interactuar con la mesa
                        drinksInTable = false;
                    }
                }
            }
        }

        void OnTriggerStay(Collider other)
        {
            switch (other.gameObject.name)
            {
                case ""Prepare Collider Cube"":
                    //si el número de lugares ocupados es inferior a la capcidad máxima permitida, y no tengo nada en la manos
                    if ((ServeDrinkTable.Instance.occupaidSpaces < PartyManager.Instance.drinksMaxCapacity)
                        && requestObjectInHandString == """")
                    {                        
                        playerSlider.value += (Time.deltaTime * 2);
                        if (playerSlider.value >= 1)
                        {
                            playerSlider.value = 0;
                            ServeDrinkTable.Instance.PrepareDrink();
                        }
                    }
                    break;
            }
        }

        void ActivePlayerSlider(string interactionItem)
        {
            playerCanvas.SetActive(true);
            playerSlider.maxValue = 1f;
            playerSlider.value = 0;

            switch (interactionItem)
            {
                case ""drink"":
                    playerImageSlider.color = Color.blue;
                    break;
            }
        }

        void OnTriggerExit(Collider other)
        {
            playerSlider.value = 0;
            playerCanvas.SetActive(false);
        }
    }
}"
Bw0uWyan,GuestBehaviour,i-Xuup,C#,Friday 17th of November 2023 04:07:39 PM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine;
public class GuestBehaviour : MonoBehaviour
{
    public enum GuestStates { none, pasive, decisive, conversation, drink, food}; 
    public GuestStates guestStates = GuestStates.none;
    public Coroutine coroutine = null;

    public Image waitingImage;
    public string petitionString;
    public bool guestActive;
    [HideInInspector]public Slider waitingSlider;

    void Start()
    {
        waitingSlider = transform.GetChild(1).transform.GetChild(0).GetComponent<Slider>();
        waitingSlider.value = 0;
        waitingSlider.gameObject.SetActive(false);
    }

    void Update()
    {
        if (guestStates == GuestStates.pasive)
        {
            guestStates = GuestStates.none;
            waitingSlider.value = 10f;
        }
    }

    public IEnumerator RunRequest(string request)
    {
        guestActive = true;
        yield return new WaitForSeconds(2f);
        //Espera hasta que TimerEvaluation regrese a true para continuar leyendo
        yield return new WaitUntil(() => TimerEvaluation());
        PartyManager.Instance.DispatchGuestFromList(gameObject);
        PartyManager.Instance.DispatchRequest(gameObject, petitionString);
    }

    bool TimerEvaluation()
    {
        if (guestActive)
        {
            waitingSlider.value -= Time.deltaTime;
            if (waitingSlider.value <= 10 && waitingSlider.value > 8)
            {
                waitingImage.color = Color.green;
            }
            else if (waitingSlider.value <= 8 && waitingSlider.value > 4)
            {
                waitingImage.color = Color.yellow;
            }
            else
            {
                waitingImage.color = Color.red;
            }
            return waitingSlider.value <= 0;
        }
        else
        {
            return false;
        }
    }
}
"
e1dSPveG,PartyManager,i-Xuup,C#,Friday 17th of November 2023 04:06:27 PM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine;
using TMPro;
using UnityEngine.SceneManagement;
using static GuestBehaviour;

public class PartyManager : MonoBehaviour
{
    public static PartyManager partyManager;
    public List<GameObject> totalGuests = new List<GameObject>();
    public List<GameObject> occupaidGuests = new List<GameObject>();
    public List<string> requestList = new List<string>();
    public List<Image> requestedDrinks = new List<Image>();
    public List<Image> requestedConversations = new List<Image>();
    public List<Image> requestedFoods = new List<Image>();
    public float drinksTime;
    public float conversationsTime;
    public float conversationsAmountInLevel;
    public float foodsTime;
    public float afterPartyTimer;
    public bool gameActive = true;
    public bool afterParty;
    public int totalRequests;

    [HideInInspector] public TextMeshProUGUI successLevelText;
    [HideInInspector] public TextMeshProUGUI levelTimerText;
    public TextMeshProUGUI levelMoneyText;
    [HideInInspector] public TextMeshProUGUI levelText;
    public GameObject[] yachtMeshModels;
    [HideInInspector] public GameObject[] cellphoneScreens;
    public GameObject[] totalDrinksSpaces;
    public GameObject[] guestsZones;
    public GameObject guestPrefab;
    public Sprite[] dayIcons;
    public Slider enjoymentSlider;
    public Image enjoymentSliderImage;
    public Image dayIcon;
    public float money;
    public int enjoymentBarValue;
    public int levelStage = 0;
    public int tempLevelScore;
    public int deliveredAPDrinks;

    PermanentData pData;
    float totalMoney = 0f;
    float drinksPorcentage = 0f;
    float afterAfterTime;
    float totalSum;
    bool pause = false;

    //LevelManager nos ofrece este número
    [HideInInspector] public float drinksInLevel;
    [HideInInspector] public float conversationsInLevel;
    [HideInInspector] public float dayDuration;
    [HideInInspector] public float profitsBetweenYachts;
    [HideInInspector] public int foodsInLevel;
    [HideInInspector] public int guestsInLevel;
    [HideInInspector] public int drinksMaxCapacity;
    [HideInInspector] public int yachtNumber;

    //ScorePanel
    [HideInInspector] public CanvasGroup desactivateRaycasts;
    [HideInInspector] public GameObject scorePanel;
    [HideInInspector] public GameObject afterPartyPanel;
    [HideInInspector] public GameObject cellPhonePanel;
    [HideInInspector] public GameObject cellPhoneButton;
    [HideInInspector] public GameObject failPanel;
    [HideInInspector] public TextMeshProUGUI enjoyPointsText;
    [HideInInspector] public TextMeshProUGUI enjoyAPPointsText;
    [HideInInspector] public TextMeshProUGUI conversationPointsText;
    [HideInInspector] public TextMeshProUGUI drinksDeliveredText;
    [HideInInspector] public TextMeshProUGUI piratePointsText;
    [HideInInspector] public TextMeshProUGUI afterPartyPointsText;
    [HideInInspector] public TextMeshProUGUI bonusPointsText;
    [HideInInspector] public TextMeshProUGUI totalPointsText;
    [HideInInspector] public TextMeshProUGUI performanceText;

    public static PartyManager Instance
    {
        get
        {
            if (partyManager == null)
                Debug.LogError(""PartyManager is Null"");
            return partyManager;
        }
    }

    private void Awake()
    {
        partyManager = this;
    }

    private void Start()
    {
        FindPermanentData(0);

        //Si es after party
        if (afterParty)
        {
            levelText.text = ""AFTER PARTY!!!"";
            //no necesita la lista de comidas y conversaciones por cubrir, necesita de una lista solo de bebidas
            //Que debas al menos cubrir 6 bebidas en after party
            drinksInLevel = CalculateDrinksFoodNumber(guestsInLevel) * 2;
            drinksPorcentage = CalculateDrinksPorcentage(drinksInLevel);
            dayIcon.sprite = dayIcons[1];
            enjoymentSliderImage.color = Color.blue;
            levelMoneyText.gameObject.SetActive(false);
            levelTimerText.gameObject.SetActive(true);

            if (levelStage > 0 && levelStage <= 10)
            {
                afterAfterTime = 15f;
            }
            else if (levelStage >= 11 && levelStage < 21)
            {
                afterAfterTime = 20f;
            }
            else if (levelStage >= 21 && levelStage < 31)
            {
                afterAfterTime = 25f;
            }
            else
            {
                afterAfterTime = 30f;
            }

            afterPartyTimer = afterAfterTime;
        }
        else
        {
            //Esto hace que iniciemos un nivel común
            dayIcon.sprite = dayIcons[0];
            if (levelStage > 0)
            {
                levelText.text = ""Level "" + levelStage.ToString();
            }
            //Esto hace que iniciemos un nivel de Preparación
            else
            {
                levelText.text = ""Prepare Level"";
                BuiltLevel();
                PrepareLevel();
                return;
            }
            //cantidad de bebidas a solicitar en el nivel
            drinksInLevel = CalculateDrinksFoodNumber(guestsInLevel);
            drinksPorcentage = CalculateDrinksPorcentage(drinksInLevel);
            //cantidad de comidas a solicitar en el nivel
            foodsInLevel = 0;
            conversationsInLevel = LevelManager.Instance.levelConversations;
        }

        //suma total de todos los servicios a cubrir, en prueba sumara 1 + 1 + 0
        totalRequests = (int)drinksInLevel + (int)conversationsInLevel + foodsInLevel;
        dayDuration = LevelManager.Instance.dayDuration;

        BuiltLevel();
        GameTime();
        StartCoroutine(StartLineRequests((int)drinksInLevel, ""drink""));
        if (!afterParty)
        {
            StartCoroutine(StartLineRequests((int)conversationsInLevel, ""conversation""));
        }               
    }

    void BuiltLevel()
    {
        ClearListsAndPanels();
        InstantiateGuests();
        UbicateYacht();
    }

    void ClearListsAndPanels()
    {
        requestedConversations.Clear();
        requestedDrinks.Clear();
        requestedFoods.Clear();
        requestList.Clear();

        failPanel.SetActive(false);
        scorePanel.SetActive(false);
        afterPartyPanel.SetActive(false);
        cellPhonePanel.SetActive(false);
    }

    void InstantiateGuests()
    {
        //Selecciona una de las zonas de la lista
        GameObject zoneSelected = guestsZones[Random.Range(0, guestsZones.Length)];
        float width = zoneSelected.GetComponentInChildren<Transform>().localScale.x;
        float volume = zoneSelected.GetComponentInChildren<Transform>().localScale.z;
        int tempNumber = 0;
        //Debemos aparecer 5 invitados al comienzo del nivel
        for (int i = 0; i < guestsInLevel; i++)
        {
            //Instancea al invitado de forma local
            GameObject tempGuest = Instantiate(guestPrefab);
            tempGuest.name = ""Guest "" + tempNumber++;
            totalGuests.Add(tempGuest);
            tempGuest.transform.parent = zoneSelected.transform.parent;
            //Define el área designada para la posición local
            tempGuest.transform.localPosition = new Vector3(Random.Range(0, width), -1.04f, Random.Range(0, volume));
        }
    }

    void UbicateYacht()
    {
        //Ubica al yate en posición
        Vector3 yachtPosition = new Vector3(15.13f, -0.27f, -28.46f);
        GameObject tempYacht = Instantiate(yachtMeshModels[yachtNumber], yachtPosition, Quaternion.identity);
        //girar el yate en la dirección en que se necesita
        tempYacht.transform.rotation = Quaternion.Euler(0, 45, 0);
    }

    void PrepareLevel()
    {
        Debug.Log(""Tutorial"");

    }

    float CalculateDrinksPorcentage(float drinksAmount)
    {
        //la formula es 100 % entre numero de bebidas del nivel
        return enjoymentSlider.maxValue / drinksAmount;
    }

    void GameTime()
    {        
        drinksTime = dayDuration / drinksInLevel;
        conversationsTime = dayDuration / conversationsInLevel; 
        foodsTime = dayDuration / foodsInLevel;
    }

    IEnumerator StartLineRequests(int petitionsInLevel, string request)
    {
        for (int i = 0; i < petitionsInLevel; i++)
        {
            switch (request)
            {
                case ""drink"":
                    yield return new WaitForSeconds(drinksTime);
                    break;
                case ""conversation"":
                    yield return new WaitForSeconds(conversationsTime);
                    break;
            }
            ChooseGuest(request);
        }        
    }

    void Update()
    {
        levelMoneyText.text = ""$"" + Mathf.Round(money);

        //Evaluación de un nivel AP
        if (afterParty)
        {
            afterPartyTimer -= Time.deltaTime;
            levelTimerText.text = afterPartyTimer.ToString();
            if (afterPartyTimer <= 0 || totalRequests <= 0)
            {
                //Termino el nivel de bonus
                afterPartyTimer = 0f;
                //llama al AP table score
                SuccessLetter(true, ""TIME´S UP"");
                //Desactiva lo que esten haciendo los invitados en ese momento
                for (int i = 0; i < totalGuests.Count; i++)
                {
                    GuestBehaviour tempGuest = totalGuests[i].GetComponent<GuestBehaviour>();
                    tempGuest.guestStates = GuestStates.none;
                    GameObject tempCanvas = totalGuests[i].transform.GetChild(1).gameObject;
                    tempCanvas.SetActive(false);
                }
                StartCoroutine(AfterPartyPanel());
            }
        }

        //Evaluación de un nivel normal
        if (totalRequests <= 0)
        {
            if (enjoymentSlider.value >= 6f)
            {
                SuccessLetter(true, ""Level Success"");
                StartCoroutine(ScorePanel());
            }
            else
            {
                SuccessLetter(true, ""FAILED"");
                StartCoroutine(FailPanel());
            }
        }

        //if (Input.GetKeyDown(KeyCode.S))
        //{
        //    LevelManager.Instance.SaveGame(""normal"", 0, levelStage, 0);
        //}
        //if (Input.GetKeyDown(KeyCode.L))
        //{
        //    LevelData levelData = LevelManager.Instance.LoadGame();
        //}
    }

    void ChooseGuest(string request)
    {
        Debug.Log(""invitdo pide"" + request);
        //De entre la lista de invitados elije uno y activa su estado a pasivo
        int tempGuest = Random.Range(0, totalGuests.Count);
        GuestBehaviour guestScript = totalGuests[tempGuest].GetComponent<GuestBehaviour>();
        guestScript.waitingSlider.gameObject.SetActive(true);
        guestScript.waitingSlider.value = 10f;
        guestScript.petitionString = request;
        switch (request)
        {
            case ""drink"":
                Debug.Log(""deberia mostrar azul"");
                guestScript.waitingImage.color = Color.blue;
                requestedDrinks.Add(guestScript.waitingSlider.gameObject.GetComponentInChildren<Image>());
                break;
            case ""conversation"":
                Debug.Log(""deberia mostrar blanco"");
                guestScript.waitingImage.color = Color.white;
                requestedConversations.Add(guestScript.waitingSlider.gameObject.GetComponentInChildren<Image>());
                break;
        }
        guestScript.coroutine = StartCoroutine(guestScript.RunRequest(request));
        occupaidGuests.Add(guestScript.gameObject);
        totalGuests.RemoveAt(tempGuest);
    }

    public void DispatchRequest(GameObject guestInTurn, string dispatchRequest)
    {
        switch (dispatchRequest)
        {
            case ""drink"":
                requestedDrinks.RemoveAt(0);
                break;
            case ""conversation"":
                requestedConversations.RemoveAt(0);
                break;
        }
        totalRequests--;
        GuestBehaviour guestScript = guestInTurn.GetComponent<GuestBehaviour>();
        //Deten la coroutina del actual guest
        guestScript.waitingSlider.value = 10f;
        guestScript.waitingSlider.gameObject.SetActive(false);
        guestScript.petitionString = """";
        guestScript.guestStates = GuestStates.none;
        guestScript.coroutine = null;
    }

    public void DispatchGuestFromList(GameObject guest)
    {
        //Si no se a acabado el tiempo de la barra de espera activa esto     
        totalGuests.Add(guest);
        occupaidGuests.RemoveAt(0);
    }

    public void EvaluatePerformance(GameObject guestInTurn, string reward)
    {
        GuestBehaviour guestScript = guestInTurn.GetComponent<GuestBehaviour>();
        switch (reward)
        {
            case ""drink"":
                //Puntos de Enjoyment
                if (guestScript.waitingSlider.value >= 10)
                {
                    enjoymentSlider.value += drinksPorcentage;
                }
                else
                {
                    //siempre imprime 10
                    enjoymentSlider.value += guestScript.waitingSlider.value / 10f;
                }
                break;
            case ""conversation"":
                //Puntos de Dinero
                if (guestScript.waitingSlider.value >= 10)
                {
                    //esta bien que por los 2 segundos su valor max sea 10
                    money += conversationsAmountInLevel;
                }
                else
                {
                    //esta imprimiendo 10
                    totalMoney += guestScript.waitingSlider.value * (conversationsAmountInLevel / 10);
                    money += totalMoney;
                }
            break;
        }
    }

    public void CellPhonePanel()
    {
        if (afterParty && !pause)
        {
            pause = true;
            FreezePlayer(false, 0);
            SuccessLetter(true, ""Pause"");
        }
        else if (afterParty && pause)
        {
            pause = false;
            FreezePlayer(true, 1);
            SuccessLetter(false, """");
        }
        else
        {
            FreezePlayer(false, 0);
            cellPhoneButton.SetActive(false);
            cellPhonePanel.SetActive(true);
        }        
    }

    public void OpenScreens(string activePanel)
    {
        for (int i = 0; i < cellphoneScreens.Length; i++)
        {
            cellphoneScreens[i].SetActive(false);
        }
        switch (activePanel)
        {
            case ""Upgrade"":
                cellphoneScreens[0].SetActive(true);
                break;
            case ""Dressing"":
                cellphoneScreens[1].SetActive(true);
                break;
            case ""Art Purchase"":
                cellphoneScreens[2].SetActive(true);
                break;
            case ""Services"":
                cellphoneScreens[3].SetActive(true);
                break;
            case ""Configuration"":
                cellphoneScreens[4].SetActive(true);
                break;
        }
        cellphoneScreens[5].SetActive(true);
    }

    public void ContinueGame()
    {
        FreezePlayer(true, 1);
        cellPhoneButton.SetActive(true);
        cellPhonePanel.SetActive(false);
    }

    IEnumerator ScorePanel()
    {
        //no debo poder mover a mi personaje
        AvailablePanel(scorePanel);
        yield return new WaitForSeconds(1f);

        //Calculo Enjoyment
        float tempEnjoyPoints = Mathf.Round(enjoymentSlider.value * 10f);
        enjoyPointsText.text = tempEnjoyPoints + ""%"";
        yield return new WaitForSeconds(1f);

        //Calculo dinero por conversaciones
        conversationPointsText.text = ""$"" + Mathf.Round(money).ToString();
        yield return new WaitForSeconds(1f);

        //Calculo penalización por Piratas
        piratePointsText.text = ""0"";
        yield return new WaitForSeconds(1f);

        //El monto de bonus se calcula en la tabla Excel / Progresión / Ganancias/Costos / Entre yates / monto del nivel multiplicado por el 0.""porcentaje recolectado de enjoyment en el nivel"".
        float tempBonusPoints = Mathf.Round((profitsBetweenYachts * (enjoymentSlider.value / 10f)) + profitsBetweenYachts);
        bonusPointsText.text = ""$"" + tempBonusPoints;

        yield return new WaitForSeconds(1f);

        //Suma total
        totalSum = Mathf.Round(money) + 0 + tempBonusPoints;
        totalPointsText.text = ""$"" + totalSum.ToString();
        
        LevelManager.Instance.SaveTempScore((int)totalSum);

        //Mensaje de Performance
        if (enjoymentSlider.value == 10)
        {
            performanceText.text = ""Excellent"";
        }
        else if(enjoymentSlider.value < 10 && enjoymentSlider.value >= 7.5)
        {
            performanceText.text = ""Great"";
        }
        else {
            performanceText.text = ""Good"";
        }

        //Guarda el dinero, la capacidad de bebidas y el numero del nivel        
        LevelManager.Instance.SaveGame(""scorePanel"", (int)totalSum, levelStage+1);
        FindPermanentData(3);
        yield return null;
    }

    IEnumerator AfterPartyPanel()
    {
        //no debo poder mover a mi personaje
        AvailablePanel(afterPartyPanel);
        yield return new WaitForSeconds(1f);

        LevelManager.Instance.LoadTempScore();

        //Cantidad de bebidas entregadas
        drinksDeliveredText.text = deliveredAPDrinks.ToString();
        yield return new WaitForSeconds(1f);

        //Cálculo Porcentaje Entregado
        float tempEnjoyPoints = Mathf.Round(enjoymentSlider.value * 10f);
        enjoyAPPointsText.text = tempEnjoyPoints + ""%"";
        yield return new WaitForSeconds(1f);

        FindPermanentData(4);
        if (totalSum == 0)
        {
            totalSum = 1;
        }
        //si es el 100% ganas el 50% de los puntos del nivel, si es 50 ganas el 25
        //Si imprime un 1 o 2 es porque me salte el nivel 1 donde hace el cálculo de los puntos normales
        float aPPoints = Mathf.Round((totalSum * ((tempEnjoyPoints / 2f) / 100)));
        afterPartyPointsText.text = ""$"" + aPPoints;
        
        yield return new WaitForSeconds(1f);

        //Usa esto temporalmente para que deje de mandar errores por pasar al nivel 2
        LevelManager.Instance.SaveGame(""scorePanel"", (int)aPPoints, levelStage+1);
        FindPermanentData(1);
        yield return null;
    }

    IEnumerator FailPanel()
    {
        yield return new WaitForSeconds(1f);
        AvailablePanel(failPanel);
        LevelManager.Instance.SaveGame(""new game"", 0, 1);
        yield return null;
    }

    void AvailablePanel(GameObject panel)
    {
        FreezePlayer(false, 0);
        SuccessLetter(false, """");
        panel.SetActive(true);
    }

    private void SuccessLetter(bool isActive, string letter)
    {
        if (!isActive)
        {
            successLevelText.gameObject.SetActive(false);
            successLevelText.text = """";
        }
        else
        {
            successLevelText.gameObject.SetActive(true);
            successLevelText.text = letter;
        }
    }

    public void ReloadLevel(string gameEvent)
    {
        //Reiniciar el nivel
        switch (gameEvent)
        {
            case ""After Party"":
                FindPermanentData(2);
                break;
            case ""New game"":
                LevelManager.Instance.SaveGame(""new game"", 0, 1);
                break;
        }
        FreezePlayer(true, 1);
        ReloadScene();
    }

    private void ReloadScene()
    {
        SceneManager.LoadScene(""Main Game"");
    }

    private void FreezePlayer(bool isGameActive, float velocity)
    {
        desactivateRaycasts.blocksRaycasts = isGameActive;
        Time.timeScale = velocity;
    }

    private void FindPermanentData(int situation)
    {
        if (pData == null)
        {
            pData = GameObject.Find(""PermanentData"").GetComponent<PermanentData>();
        }
        switch (situation)
        {
            case 0:
                afterParty = pData.afterParty;
                break;
            case 1:
                pData.afterParty = false;
                break;
            case 2:
                pData.afterParty = true;
                break;
            case 3:
                pData.tempScoreAmount = (int)totalSum;
                break;
            case 4:
                totalSum = pData.tempScoreAmount;
                break;
        }
    }

    //la formula para calcular el número de bebidas y comida es la misma
    private int CalculateDrinksFoodNumber(int guests)
    {
        //la formula para sacar el numero de bebidas es invitados * numero al asar entre el 80% y 100% del número de invitados, como en este caso el 100 es 5 y 80% es 4 siempre saldra 4, total 20 bebidas
        float drinksFoodNumber = guests * (Random.Range(80f, 101f) / 100);
        return (int)drinksFoodNumber;
    }
}"
5QiS2YsK,06. Equal Arrays,Spocoman,C++,Friday 17th of November 2023 03:09:03 PM CDT,"#include <iostream>

using namespace std;

int main() {
    const int MAX_SIZE = 99;
    int numbers1[MAX_SIZE]{};
    int numbers2[MAX_SIZE]{};

    int arrSize, sum = 0;
    cin >> arrSize;

    for (int i = 0; i < arrSize; i++) {
        cin >> numbers1[i];
    }

    for (int i = 0; i < arrSize; i++) {
        cin >> numbers2[i];
    }

    for (int i = 0; i < arrSize; i++) {
        if (numbers1[i] != numbers2[i]) {
            cout << ""Arrays are not identical. Found difference at "" << i << "" index.\n"";
            return 0;
        }
        sum += numbers1[i];
    }

    cout << ""Arrays are identical. Sum: "" << sum << endl;
    return 0;
}"
s56j9747,05. Even and Odd Subtraction,Spocoman,C++,Friday 17th of November 2023 03:00:36 PM CDT,"#include <iostream>

using namespace std;

int main() {
    const int MAX_SIZE = 99;
    int numbers[MAX_SIZE]{};

    int arrSize, diff = 0;
    cin >> arrSize;

    for (int i = 0; i < arrSize; i++) {
        cin >> numbers[i];
    }

    for (int i = 0; i < arrSize; i++) {
        diff += (numbers[i] % 2 == 0 ? numbers[i] : -numbers[i]);
    }

    cout << diff << endl;
    return 0;
}"
4N2ymuzJ,04. Reverse Array of Strings,Spocoman,C++,Friday 17th of November 2023 02:51:50 PM CDT,"#include <iostream>

using namespace std;

int main() {
    const int MAX_SIZE = 99;
    string arr[MAX_SIZE]{};
    
    int arrSize;
    cin >> arrSize;

    for (int i = 0; i < arrSize; i++) {
        cin >> arr[i];
    }

    string x;

    for (int i = 0; i < arrSize / 2; i++) {
        x = arr[i];
        arr[i] = arr[arrSize - (i + 1)];
        arr[arrSize - (i + 1)] = x;
    }

    for (int i = 0; i < arrSize; i++) {
    cout << arr[i] << ' ';
    }

    cout << endl;
    return 0;
}"
bbJCKtFp,Untitled,abraha2d,TypeScript,Friday 17th of November 2023 02:41:08 PM CDT,"import React, { useEffect, useState } from ""react"";
import { BrowserRouter as Router, Routes, Route, useParams } from ""react-router-dom"";






type Crumb = {
  href: string;
  label: string;
};

type CrumbsSetter = (crumbs: Crumb[]) => void;

const useCrumbs = (crumb: Crumb, setCrumbs: CrumbsSetter) => {
  useEffect(() => {
    setCrumbs([crumb]);
    return () => setCrumbs([]);
  }, [crumb]);

  const crumbSetter = (crumbs: Crumb[]) => {
    setCrumbs([crumb, ...crumbs]);
  };

  return crumbSetter;
};






const TheMainPage = () => {
  const [crumbs, setCrumbs] = useState<Crumb[]>([]);

  const crumb = { href: ""/"", label: ""Home"" };
  const crumbSetter = useCrumbs(crumb, setCrumbs);

  return (
    <>
      <Crumbs crumbs={crumbs} />
      <Router>
        <Routes>
          <Route
            path={""/children""}
            element={<ChildList setCrumbs={crumbSetter} />}
          />
          <Route
            path={""/children/:id""}
            element={<ChildDetail setCrumbs={crumbSetter} />}
          />
        </Routes>
      </Router>
    </>
  );
};






type ChildListProps = {
  setCrumbs: CrumbsSetter;
};

const ChildList = ({ setCrumbs }: ChildListProps) => {
  const crumb = { href: ""/children"", label: ""Children"" };

  useCrumbs(crumb, setCrumbs);

  return <>Child List</>;
};

type ChildDetailProps = {
  setCrumbs: CrumbsSetter;
};

const ChildDetail = ({ setCrumbs }: ChildDetailProps) => {
  const { id } = useParams();
  const crumb = { href: `/children/${id}`, label: `Child ${id}` };

  const crumbSetter = useCrumbs(crumb, setCrumbs);

  return (
    <>
      Child {id}
      <Router>
        <Routes>
          <Route
            path={""/grandchildren""}
            element={<GrandChildList childId={id} setCrumbs={crumbSetter} />}
          />
          <Route
            path={""/grandchildren/:id""}
            element={<GrandChildDetail setCrumbs={crumbSetter} />}
          />
        </Routes>
      </Router>
    </>
  );
};






type GrandChildListProps = {
  childId: string;
  setCrumbs: CrumbsSetter;
};

const GrandChildList = ({ childId, setCrumbs }: GrandChildListProps) => {
  const crumb = {
    href: ""/grandchildren"",
    label: `Grandchildren for ${childId}`,
  };

  useCrumbs(crumb, setCrumbs);

  return <>Grandchild List for {childId}</>;
};

type GrandChildDetailProps = {
  setCrumbs: CrumbsSetter;
};

const GrandChildDetail = ({ setCrumbs }: GrandChildDetailProps) => {
  const { id } = useParams();
  const crumb = { href: `/grandchildren/${id}`, label: `Grandchild ${id}` };

  const crumbSetter = useCrumbs(crumb, setCrumbs);

  return (
    <>
      Grandchild {id}
      <Router>
        <Routes>
          <Route
            path={""/greatgrandchildren""}
            element={
              <GreatGrandChildList grandChildId={id} setCrumbs={crumbSetter} />
            }
          />
          <Route
            path={""/greatgrandchildren/:id""}
            element={<GreatGrandChildDetail setCrumbs={crumbSetter} />}
          />
        </Routes>
      </Router>
    </>
  );
};





type GreatGrandChildListProps = {
  grandChildId: string;
  setCrumbs: CrumbsSetter;
};

const GreatGrandChildList = ({ grandChildId, setCrumbs }: GreatGrandChildListProps) => {
  const crumb = {
    href: ""/greatgrandchildren"",
    label: `Greatgrandchildren for ${grandChildId}`,
  };

  useCrumbs(crumb, setCrumbs);

  return <>Greatgrandchild List for {grandChildId}</>;
};

type GreatGrandChildDetailProps = {
  setCrumbs: CrumbsSetter;
};

const GreatGrandChildDetail = ({ setCrumbs }: GreatGrandChildDetailProps) => {
  const { id } = useParams();
  const crumb = { href: `/greatgrandchildren/${id}`, label: `Greatgrandchild ${id}` };

  const crumbSetter = useCrumbs(crumb, setCrumbs);

  return (
    <>
      Greatgrandchild {id}
      <Router>
        <Routes>
          <Route
            path={""/greatgreatgrandchildren""}
            element={
              <GreatGreatGrandChildList greatGrandChildId={id} setCrumbs={crumbSetter} />
            }
          />
          <Route
            path={""/greatgreatgrandchildren/:id""}
            element={<GreatGreatGrandChildDetail setCrumbs={crumbSetter} />}
          />
        </Routes>
      </Router>
    </>
  );
};
"
yTe2duM3,03. Sum Even Numbers,Spocoman,C++,Friday 17th of November 2023 02:37:29 PM CDT,"#include <iostream>

using namespace std;

int main() {
    const int MAX_SIZE = 99;
    int numbers[MAX_SIZE]{};
    
    int arrSize, sumEven = 0;
    cin >> arrSize;

    for (int i = 0; i < arrSize; i++) {
        cin >> numbers[i];
    }

    for (int i = 0; i < arrSize; i++) {
        if (numbers[i] % 2 == 0) {
            sumEven += numbers[i];
        }
    }

    cout << sumEven << endl;
    return 0;
}"
vq3JpqTp,02. Print Numbers in Reverse Order,Spocoman,C++,Friday 17th of November 2023 02:33:06 PM CDT,"#include <iostream>

using namespace std;

int main() {
    const int MAX_SIZE = 99;
    int numbers[MAX_SIZE]{};
    
    int arrSize;
    cin >> arrSize;

    for (int i = 0; i < arrSize; i++) {
        cin >> numbers[i];
    }

    for (int i = arrSize - 1; i >= 0; i--) {
        cout << numbers[i] << ' ';
    }

    cout << endl;
    return 0;
}"
L83kjYZM,input lenght,DeadLogo,C#,Friday 17th of November 2023 02:23:52 PM CDT,"using System;

namespace Classes
{
    class Program
    {
        static void Main(string[] args)
        {
            var symbol = 0;
            var count = 0;
            var result = 0;

            Console.WriteLine(""Введите строку из символо '(' и ')'"");
            var input = Console.ReadLine();

            for (var i = 0; i < input.Length; i++)
            {
                if (input[i] == '(')
                {
                    symbol++;
                }
                else if (input[i] == ')')
                {
                    if (i != input.Length - 1 && input[i + 1] != '(')
                    {
                        count++;
                    }
                    symbol--;
                }
                if (symbol < 0)
                {
                    break;
                }
                if (symbol == 0)
                {
                    result = count;
                }
            }
            if (symbol == 0)
            {
                Console.WriteLine(""Строка корректная "" + ""\n"" + ""Максимум глубина равняется: "" + (result + 1));
            }
            else
            {
                Console.WriteLine(""Ошибка! Не верная строка "");
            }
        }
    }
}
"
GPZPJQmK,01. Day of Week,Spocoman,C++,Friday 17th of November 2023 02:17:22 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int n;
    cin >> n;

    string weekDays[8] = { 
        ""Invalid day!"",
        ""Monday"",
        ""Tuesday"",
        ""Wednesday"",
        ""Thursday"",
        ""Friday"",
        ""Saturday"",
        ""Sunday""
    };

    cout << weekDays[(n > 0 && n < 8 ? n : 0)] << endl;
    return 0;
}"
B9rcUFMg,Backup-Script Paperless NGX,gerd_r,Bash,Friday 17th of November 2023 01:52:21 PM CDT,"#!/bin/bash

varRunTime=$(date +%Y%m%d_%H%M%S)
varDayOfWeek=$(date +%u)
varWeekNr=$(date +%V)

 
cd /home/paperless/

echo +++++ $(date +%Y%m%d_%H%M%S) - paperless Export gestartet > /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
docker exec -T Paperless-NGX document_exporter ../export --delete --compare-checksums >> /home/paperless/log/paperless-backup_$varRunTime.log 2>&1
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo +++++ $(date +%Y%m%d_%H%M%S) - paperless Export beendet >> /home/paperless/log/paperless-backup_$varRunTime.log

sleep 10
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log

echo +++++ $(date +%Y%m%d_%H%M%S) - Erstelle inkrementelles Archiv gestartet >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
tar --verbose --verbose --create --gzip --listed-incremental=/home/paperless/paperless-backup_$varWeekNr.sngz --file=/home/paperless/backup/paperless-backup_$varDayOfWeek.tar.gz /data/paperless/export >> /home/pap>
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo +++++ $(date +%Y%m%d_%H%M%S) - Erstelle inkrementelles Archiv beendet >> /home/paperless/log/paperless-backup_$varRunTime.log

sleep 10
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log

echo +++++ $(date +%Y%m%d_%H%M%S) - paperless Synchro NAS gestartet >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
rclone sync /home/paperless/backup/ paperless-backup-nas:paperless-backup --log-level=INFO --log-file=/home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo +++++ $(date +%Y%m%d_%H%M%S) - paperless Synchro NAS beendet >> /home/paperless/log/paperless-backup_$varRunTime.log

sleep 10
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log

echo +++++ $(date +%Y%m%d_%H%M%S) - paperless Synchro GDrive gestartet >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
rclone sync /home/paperless/backup/ paperless-backup-gdrive:paperless-backup --log-level=INFO --log-file=/home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo +++++$(date +%Y%m%d_%H%M%S) - paperless Synchro GDrive beendet >> /home/paperless/log/paperless-backup_$varRunTime.log

sleep 10
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log
echo + >> /home/paperless/log/paperless-backup_$varRunTime.log

rclone sync /home/paperless/log/ paperless-backup-nas:paperless-backup/log
rclone sync /home/paperless/log/ paperless-backup-gdrive:paperless-backup/log
"
UtSfuz5L,09. Greater of Two Values,Spocoman,C++,Friday 17th of November 2023 01:47:42 PM CDT,"#include <iostream>
#include <string>

using namespace std;

string stringGreaterValue(string s1, string s2) {
    return s1 > s2 ? s1 : s2;
}

char charGreaterValue(char c1, char c2) {
    return c1 > c2 ? c1 : c2;
}

int intGreaterValue(int n1, int n2) {
    return n1 > n2 ? n1 : n2;
}

int main() {
    string type;
    cin >> type;
    cin.ignore();

    string firstValue, secondValue;
    getline(cin, firstValue);
    getline(cin, secondValue);

    if (type == ""int"") {
        cout << intGreaterValue(stoi(firstValue), stoi(secondValue));
    }
    else if (type == ""char"") {
        cout << charGreaterValue(firstValue.at(0), secondValue.at(0));
    }
    else if (type == ""string"") {
        cout << stringGreaterValue(firstValue, secondValue);
    }

    return 0;
}"
U4Guyy1A,Robots.py,Zgragselus,Python,Friday 17th of November 2023 01:40:56 PM CDT,"## @package robots
# 
#  Defines robots parser for crawlers

from Directive import Directive
from Directive import DirectiveType
from UserAgent import UserAgent
from SystemLog import SystemLog
import requests

## Robots class for processing robots.txt files
#
#  Processes robots.txt file, storing all its rules per user-agent
class Robots:
    ## Constructor from user agent name
    #  @param self The object pointer
    #  @param url string, url with robots.txt file or domain under which it should be
    #  @param eshop_id integer, eshop ID in database
    def __init__(self, url, eshop_id):
        self.reset()

        self.url = url
        if (not self.url.endswith("".txt"")):
            if (self.url.endswith(""/"")):
                self.url += ""robots.txt""
            else:
                self.url += ""/robots.txt""

        self.eshop_id = eshop_id

    ## Resets state variables for class instance
    #  @param self The object pointer
    def reset(self):
        self.agents = {}
        self.__parserState = { 'user-agent': None }

    ## Request and partse target url
    #  @param self The object pointer
    #  @param credentials List, each record holds base URL and then Credentials object instance
    #  @param botName String, name of the bot (used as User-Agent string)
    def request(self, credentials, botName):
        self.reset()

        headers = {""User-Agent"": botName}
        req = requests.get(self.url, headers=headers)

        if (req.status_code == 200):
            lines = req.text.split(""\n"")
            for l in lines:
                self.__parseLine(l)
        else:
            SystemLog.log(credentials, 'Scrapper.Robots', 'Error opening robots.txt file at \'' + self.url + '\'', 'true', self.eshop_id)

    ## Parse single line from robots.txt
    #  @param self The object pointer
    #  @param line string, holds single line from robots.txt to parse
    def __parseLine(self, line):
        # Ignore comments
        if line.startswith(""#""):
            return

        # Always work in lower case (case insensitivity of parser)
        l = line.lower()

        # Split line into tokens
        tokens = l.split("":"")

        # Rule requires at least 2 tokens, otherwise it's not a rule
        if (len(tokens) < 2):
            return

        # Handle user agent, which switches state
        if (tokens[0].strip() == ""user-agent""):
            agentName = tokens[1].strip()

            agent = UserAgent(agentName)

            self.agents[agentName] = agent
            self.__parserState = agentName
        # Handle allow directive
        elif (tokens[0].strip() == ""allow""):
            d = Directive(DirectiveType.ALLOW, tokens[1].strip())
            self.agents[self.__parserState].addRule(d)
        # Hanlde disallow directive
        elif (tokens[0].strip() == ""disallow""):
            d = Directive(DirectiveType.DISALLOW, tokens[1].strip())
            self.agents[self.__parserState].addRule(d)
        # Handle sitemap directive
        elif (tokens[0].strip() == ""sitemap""):
            tokens.pop(0)
            url = "":"".join(tokens)

            d = Directive(DirectiveType.SITEMAP, url)
            self.agents[self.__parserState].addRule(d)
        # Handle crawl-delay directive
        elif (tokens[0].strip() == ""crawl-delay""):
            d = Directive(DirectiveType.CRAWL_DELAY, tokens[1].strip())
            self.agents[self.__parserState].addRule(d)

    ## Serialize Robots class instance
    #  @param self The object pointer
    #  @returns Class instance serialized into string
    def serialize(self):
        # Serialize attributes
        res = self.url + ""\n""

        # Serialize number of agents
        res += str(len(self.agents)) + ""\n""

        # Serialize agents
        for agent in self.agents:
            res += self.agents[agent].serialize()

        return res

    ## Deserialize Robots class instance
    #  @param self The object pointer
    #  @param string String holding serialized Robots class instance
    def deserialize(self, string):
        # Split file by lines
        lines = string.split('\n')

        # Deserialize attributes
        self.url = lines[0]

        count = int(lines[1])

        # Deserialize agents
        blob = '\n'.join(lines[2:])
        
        agents = blob.split('UserAgent')
        while '' in agents:
            agents.remove('')

        i = 0
        while i < len(agents):
            agent = UserAgent('')
            agent.deserialize(agents[i])
            self.agents[agent.userAgent] = agent
            i = i + 1

    ## Return string representation of object
    #  @param self The object pointer
    def __repr__(self):
        return str(self.__class__) + '\n\t' + '\n\t'.join((str(item) + ' = ' + str(self.__dict__[item]) for item in sorted(self.__dict__)))

    ## Return readable representation of object
    #  @param self The object pointer
    def __str__(self):
        return 'Robots { \'url\' : \'' + str(self.url) + '\', \'agents\' : \'' + str(self.agents) + '\' }'

    ## @var url
    #  Robots URL

    ## @var agents
    #  Robots URL

    ## @var eshop_id
    #  ID of eshop record in database

    ## @var __parserState
    #  Private variable for parser state
"
7x5WzwQM,Untitled,Farz0l1x,Python,Friday 17th of November 2023 01:08:39 PM CDT,"Max = 0
for n in range(4, 1000):
    s = '1' + n * '2'
    while '12' in s or '322' in s or '222' in s:
        if '12' in s:
            s = s.replace('12', '2', 1)
        if '322' in s:
            s = s.replace('322', '21', 1)
        if '222' in s:
            s = s.replace('222', '3', 1)
    Max = max(Max, len(s))
print(Max)"
YWjJ4F0N,Untitled,MNNM2021,Python,Friday 17th of November 2023 01:07:26 PM CDT,"import re

pattern = r'\b(?:www\.[A-Za-z0-9-]+\.[a-z]+(?:\.[a-z]+)*)\b'

while True:
    text = input()
    if not text:
        break

    matches = re.finditer(pattern, text)
    for match in matches:
        print(match.group())"
YWAT3hGA,Untitled,Dorex,Linden Scripting,Friday 17th of November 2023 01:03:04 PM CDT,"
key stdtexture = ""59045e9e-90eb-f715-5f6b-c1c9203d5f5b"";
integer front_face   =   3;      //picture face
list    texture_list;    //List of inventory items.
integer texture_total;   //Number of textures.
integer next_pointer; //Next texture number.


default
{
    state_entry()
    {
        //Count all textures in the inventory.
        integer count = llGetInventoryNumber(INVENTORY_TEXTURE); 
        string  texture_name;
        texture_list = [];

        if (count > 0){
            //Process the textures into the list.
            while(count--)
            {
                texture_list += llGetInventoryName(INVENTORY_TEXTURE, count);
            }
    
            //If under 2 textures are found, say an error.
            texture_total = llGetListLength(texture_list);
            if(texture_total > 1)
            {
                llOwnerSay(""Yuo cannot have more than 1 picture!"");
                // llSetTexture(stdtexture, front_face); // if no pictures are in the object we should apply this instweead of giving a script error
                return;
            }            
        } else {
            //
            // set default texture
            //
            texture_list = (list)stdtexture;
        }

 
        //Set the first texture.
        next_pointer = 1;
        llSetTexture(llList2Key(texture_list, 0), front_face);
    }


    touch_start(integer total_number)
    {
        llSay(0, ""Touched."");
    }
}
"
RF5CeNaf,shit.c,mb6ockatf,C,Friday 17th of November 2023 12:56:05 PM CDT,"/* https://inf-ege.sdamgia.ru/problem?id=38589 
 * BROKEN
 */
#pragma GCC diagnostic ignored ""-Wpedantic""
#include <stdio.h>
#include <math.h>
#include <string.h>
__extension__ typedef __int128 int128;
const unsigned long long int PRECISION = 10ULL;
unsigned __int128 ipow(unsigned __int128 base, unsigned __int128 exp);
unsigned __int128 ipow(unsigned __int128 base, unsigned __int128 exp)
{
    unsigned __int128 result = 1ULL;
    while( exp )
    {
        if ( exp & 1 )
        {
            result *= (unsigned __int128)base;
        }
        exp >>= 1;
        base *= base;
    }
    return result;
}
int main(void) {
	unsigned __int128 number1, number2, number3, number4, number5, sum;
	number1 = ipow(4ULL, 38ULL);
	number2 = 2ULL * ipow(4ULL, 23ULL);
	number3 = ipow(4ULL, 20ULL);
	number4 = 3ULL * ipow(4ULL, 5ULL);
	number5 = 2ULL * ipow(4ULL, 4ULL) + 1ULL;
	sum = 3ULL * number1 + number2 + number3 + number4 + number5;
	printf(""%ll"", value);
	printf(""%ll\n"", sum);
	unsigned char string[400] = """";
	unsigned short int i = 0, count = 0;
	while (sum) {
		string[i] = (sum % 16) + '0';
		sum /= 16ULL;
		i++;
	}
	for (int j = 0; string[j] != '\0'; j++) {
		if (string[j] == '0')
			count++;
	}
	unsigned long long int part1, part2;
	part2 = count % PRECISION;
	part1 = count / PRECISION;
	printf(""%llu"", part1);
	printf(""%llu"", part2);
	return 0;
}
"
fY79m4zi,08. Orders,Spocoman,C++,Friday 17th of November 2023 12:41:10 PM CDT,"#include <iostream>
#include <iomanip>

using namespace std; 

void orderSum(string product, int quantity) {
    double productPrice =
        product == ""coffee"" ? 1.50 :
        product == ""water"" ? 1.00 :
        product == ""coke"" ? 1.40 :
        product == ""snacks"" ? 2.00 : 0;

    cout << fixed << setprecision(2) << productPrice * quantity << endl;
}

int main() {
    string product;
    cin >> product;

    int quantity;
    cin >> quantity;

    orderSum(product, quantity);
    return 0;
}"
PTceRqNc,Untitled,Josif_tepe,C++,Friday 17th of November 2023 12:40:46 PM CDT,"#include <iostream>

using namespace std;

int main()
{ 
    int n;
    cin >> n;
    
    int zbir =0 ;
    for(int x = n; x > 0; x /= 10) {
        int cifra = x % 10;
        zbir += cifra;
    }
    cout << zbir << endl;
   
    return 0;
}
"
be1mFwEL,Untitled,Josif_tepe,C++,Friday 17th of November 2023 12:31:09 PM CDT,"#include <iostream>

using namespace std;

int main()
{ 
    
    for(int i = 10; i >= 1; i -= 1) {
        cout << i << "" "";
    }
    return 0;
}
"
