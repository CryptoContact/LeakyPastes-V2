id,title,username,language,date,content
v5BNq3Pn,Untitled,tankian202,C++,Monday 16th of October 2023 06:44:58 AM CDT,"void lab03() {
	float numbers[9] = { 0, 0,0,1,0,0,0,0,0 };
	Mat mask = Mat(3, 3, CV_32FC1, numbers);
	Mat im = imread(""eper.jpg"");
	Mat result = im.clone();
	int key = 0;
	for (int i = 0; (i < im.cols) && key != 27; i++)
	{
		filter2D(result, result, -1, mask);
		imshow(""Result"", result);
		key = waitKey();
	}

	float numbers2[9] = {0.1, 0.1, 0.1, 0.1, 0.2, 0.1, 0.1, 0.1, 0.1};
	Mat mask2 = Mat(3, 3, CV_32FC1, numbers2);
	result = im.clone();
	key = 0;
	for (int i = 0; (i < im.cols) && key != 27; i++)
	{
		filter2D(result, result, -1, mask2);
		imshow(""Result"", result);
		key = waitKey();
	}
	im = imread(""faliszonyeg.jpg"");
	float k = 0;
	key = 0;
	result = im.clone();
	for (int i = 0; (i < im.cols) && key != 27; i++)
	{
		float numbers[9] = { 0, k / 4, 0, -k / 4, 1 + k, -k / 4, 0, -k / 4, 0 };
		Mat mask = Mat(3, 3, CV_32FC1, numbers);
		filter2D(result, result, -1, mask );
		imshow(""Result"", result);
		key = waitKey();
		k++;
	}
	key = 0;
	im = imread(""eper.jpg"");
	destroyWindow(""Result"");
	for (int k = 3; (k < 100) && key != 27;k += 2)
	{
		Mat resultGauss, resultBlur;
		blur(im, resultBlur,Size(k,k));
		GaussianBlur(im, resultGauss, Size(k, k), 1);
		imshow(""Gauss"", resultGauss);
		key = waitKey(); 
		imshow(""Blur"", resultBlur);
	key = waitKey();
	}

	Mat imBe = imread(""repulo.jpg"");
	Mat imKi = imBe.clone();
	key = 0;
	for (int db = 0; db < 20 ; ++db) {
		line(imBe, Point(rand() % imBe.cols, rand() % imBe.rows),
			Point(rand() % imBe.cols, rand() % imBe.rows),
			Scalar(0, 0, 0, 0), 1 + db % 2);
		Mat imKi = imBe.clone();
	}
	destroyAllWindows();
	for (int i = 1; i < 10 && key != 27; i+=2)
	{
		medianBlur(imBe, imKi, i);
		imshow(""Result"", imKi);
		key = waitKey(0);
	}
	destroyAllWindows();
	imBe = imread(""amoba.png"");

	key = 0;
	for (int i = 0;i < 600 && key!=27;i++)
	{
		medianBlur(imBe, imBe, 21);
		if(i%3==0){
			imshow(""result"", imBe);
			key = waitKey(0);
		}

	}
}
void lab02() {
	// Beolvassuk a színes képet
	Mat im = imread(""eper.jpg"");
	Mat z(im.rows, im.cols, CV_8UC1, Scalar(0));
	Mat imBig = Mat(im.rows * 3, im.cols * 6, im.type());
	imBig.setTo(Scalar(128, 128, 255, 0));
	int index = 0;
	Mat result = im.clone();
	
	Mat bgr[3], & b = bgr[0], & g = bgr[1], & r = bgr[2];
	split(im, bgr);
	showMyImage(imBig, result, index);
	//1
	merge(vector<Mat>{z, g, r}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{b, z, r}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{b, g, z}, result);
	showMyImage(imBig, result, index);
	//2
	merge(vector<Mat>{b, z, z}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{z, g, z}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{z, z, r}, result);
	showMyImage(imBig, result, index);
	//3.
	result = im.clone();
	merge(vector<Mat>{b, g, r}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{b, r, g}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{g, b, r}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{g, r, b}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{r, b, g}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{r, g, b}, result);
	showMyImage(imBig, result, index);
	//4
	merge(vector<Mat>{~b,g,r}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{b, ~g, r}, result);
	showMyImage(imBig, result, index);
	merge(vector<Mat>{b, g, ~r}, result);
	showMyImage(imBig, result, index);
	//5
	cvtColor(im, result, COLOR_BGR2YCrCb);
	Mat yCrCb[3], &y = yCrCb[0], &Cr = yCrCb[1], &Cb = yCrCb[2];
	split(result,yCrCb);
	merge(vector<Mat>{~y, Cr, Cb}, result);
	cvtColor(result, result, COLOR_YCrCb2BGR);
	showMyImage(imBig, result, index);
	//6
	merge(vector<Mat>{~b, ~g, ~r}, result);
	showMyImage(imBig, result, index);

	waitKey(0);

}"
4HwqnTrY,Untitled,ezzr,C++,Monday 16th of October 2023 06:37:21 AM CDT,"#include <bits/stdc++.h>

using namespace std;

using ll = long long;

const int MOD = 1e9 + 7;

int n, m, k;

int dp[2][500][501][3];
int sum[2][501][501][3];

int add(int a, int b) {
    return (a + b >= MOD ? a + b - MOD : a + b);
}

int sub(int a, int b) {
    return (a < b ? a - b + MOD : a - b);
}

int main() {
    cin >> n >> m >> k;
    for (int j = 0; j < m; j++) {
        dp[0][j][0][0] = 1;
        sum[0][j + 1][0][0] = sum[0][j][0][0] + 1;
    }
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < m; j++) {
            for (int l = 0; l < k + 1; l++) {
                dp[i&1][j][l][0] = add(sub(sum[(i+1)&1][m][l][0], sum[(i+1)&1][j + 1][l][0]), sub(sum[(i+1)&1][m][l][2], sum[(i+1)&1][j + 1][l][2]));
                dp[i&1][j][l][1] = add(add(sum[(i+1)&1][j][l][0], sum[(i+1)&1][j][l][1]), sum[(i+1)&1][j][l][2]);
                dp[i&1][j][l][2] = add(add(dp[(i+1)&1][j][l][0], dp[(i+1)&1][j][l][1]), dp[(i+1)&1][j][l][2]);
                if (l > 0) {
                    dp[i&1][j][l][0] = add(dp[i&1][j][l][0], sub(sum[(i+1)&1][m][l - 1][1], sum[(i+1)&1][j + 1][l - 1][1]));
                }
                sum[i&1][j + 1][l][0] = add(sum[i&1][j][l][0], dp[i&1][j][l][0]);
                sum[i&1][j + 1][l][1] = add(sum[i&1][j][l][1], dp[i&1][j][l][1]);
                sum[i&1][j + 1][l][2] = add(sum[i&1][j][l][2], dp[i&1][j][l][2]);
            }
        }
    }
    int ans = add(add(sum[(n + 1)&1][m][k][0], sum[(n + 1)&1][m][k][1]), sum[(n + 1)&1][m][k][2]);
    cout << ans << endl;
    return 0;
}"
3f9gdJWs,Project 217,KKK_Smart,Python,Monday 16th of October 2023 06:14:01 AM CDT,"import glob
import os
import sys
import time
import math

try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

actor_list = []

def generate_radar_blueprint(blueprint_library):
    radar_blueprint = blueprint_library.filter('sensor.other.radar')[0]
    radar_blueprint.set_attribute('horizontal_fov', str(35))
    radar_blueprint.set_attribute('vertical_fov', str(20))
    radar_blueprint.set_attribute('points_per_second', str(1500))
    radar_blueprint.set_attribute('range', str(20))
    return radar_blueprint

try:
    client = carla.Client('127.0.0.1', 2000)
    client.set_timeout(10.0)
    world = client.get_world()

    get_blueprint_of_world = world.get_blueprint_library()
    car_model = get_blueprint_of_world.filter('model3')[0]
    spawn_point = (world.get_map().get_spawn_points()[50])
    dropped_vehicle = world.spawn_actor(car_model, spawn_point)
    dropped_vehicle.set_autopilot(True)
    simulator_camera_location_rotation = carla.Transform(spawn_point.location, spawn_point.rotation)
    simulator_camera_location_rotation.location += spawn_point.get_forward_vector() * 30
    simulator_camera_location_rotation.rotation.yaw += 180
    simulator_camera_view = world.get_spectator()
    simulator_camera_view.set_transform(simulator_camera_location_rotation)
    actor_list.append(dropped_vehicle)

    radar_sensor = generate_radar_blueprint(get_blueprint_of_world)
    sensor_radar_spawn_point = carla.Transform(carla.Location(x=-0.5, z=1.8))
    sensor = world.spawn_actor(radar_sensor, sensor_radar_spawn_point, attach_to=dropped_vehicle)

    sensor.listen(lambda radar_data: _Radar_callback(radar_data))

    def _Radar_callback(radar_data):
        radar_current_rotation = radar_data.transform.rotation
        debug = world.debug
        for detect in radar_data:
            # Task 01
            rear_view = carla.Vector3D(x=-(detect.depth - 1))
            
            radar_azimuth = math.degrees(detect.azimuth)
            radar_altitude = math.degrees(detect.altitude)
            new_pitch = radar_current_rotation.pitch + radar_altitude
            new_yaw = radar_current_rotation.yaw + radar_azimuth
            new_roll = radar_current_rotation.roll
            carla.Transform(carla.Location(), carla.Rotation(
                pitch=new_pitch,
                yaw=new_yaw,
                roll=new_roll)).transform(rear_view)

            # Task 02
            debug.draw_string(
                radar_data.transform.location + rear_view,
                'cobra.ranger',  
                life_time=0.06,
                color=carla.Color(0, 210, 255)  
            )
            
    actor_list.append(sensor)

    time.sleep(1000)
finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')


#Task 01 And 02And 03  are in the above code mam because both can be written in one so i put in code only
"
RPs2UZKy,Project 216,KKK_Smart,Python,Monday 16th of October 2023 06:06:32 AM CDT,"#Task 01

import glob
import os
import sys
import time

try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

actor_list = []


def generate_radar_blueprint(blueprint_library):
    radar_blueprint = blueprint_library.filter('sensor.other.radar')[0]
    #write code here
    return radar_blueprint



try:
    client = carla.Client('127.0.0.1', 2000)
    client.set_timeout(10.0)
    world = client.get_world()

    get_blueprint_of_world = world.get_blueprint_library()
    car_model = get_blueprint_of_world.filter('model3')[0]
    spawn_point = (world.get_map().get_spawn_points()[1])
    dropped_vehicle = world.spawn_actor(car_model, spawn_point)

    simulator_camera_location_rotation = carla.Transform(spawn_point.location, spawn_point.rotation)
    simulator_camera_location_rotation.location += spawn_point.get_forward_vector() * 30
    simulator_camera_location_rotation.rotation.yaw += 180
    simulator_camera_view = world.get_spectator()
    simulator_camera_view.set_transform(simulator_camera_location_rotation)
    actor_list.append(dropped_vehicle)
    
    radar_sensor = generate_radar_blueprint(get_blueprint_of_world)
    
    radar_sensor.set_attribute('horizontal_fov', '45')
    radar_sensor.set_attribute('rotation_frequency', '35')
    
    sensor_radar_spawn_point = carla.Transform(carla.Location(x=-0.5, z=1.8))
    sensor = world.spawn_actor(radar_sensor, sensor_radar_spawn_point, attach_to=dropped_vehicle)
    dropped_vehicle.set_autopilot(True)

    sensor.listen(lambda radar_data: _Radar_callback(radar_data))

    def _Radar_callback(radar_data):
        for detection in radar_data:
            # Your code here

    actor_list.append(sensor)

    time.sleep(1000)
finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')

finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')


#Task 02

import glob
import os
import sys
import time

try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

actor_list = []


def generate_radar_blueprint(blueprint_library):
    radar_blueprint = blueprint_library.filter('sensor.other.radar')[0]
    #write code here
    return radar_blueprint



try:
    client = carla.Client('127.0.1', 2000)
    client.set_timeout(10.0)
    world = client.get_world()

    get_blueprint_of_world = world.get_blueprint_library()
    car_model = get_blueprint_of_world.filter('model3')[0]
    spawn_point = (world.get_map().get_spawn_points()[1])
    dropped_vehicle = world.spawn_actor(car_model, spawn_point)

    simulator_camera_location_rotation = carla.Transform(spawn_point.location, spawn_point.rotation)
    simulator_camera_location_rotation.location += spawn_point.get_forward_vector() * 30
    simulator_camera_location_rotation.rotation.yaw += 180
    simulator_camera_view = world.get_spectator()
    simulator_camera_view.set_transform(simulator_camera_location_rotation)
    actor_list.append(dropped_vehicle)

    radar_sensor = generate_radar_blueprint(get_blueprint_of_world)

    radar_sensor.set_attribute('points_per_second', '2000')
    radar_sensor.set_attribute('range', '35')

    sensor_radar_spawn_point = carla.Transform(carla.Location(x=-0.5, z=1.8))
    sensor = world.spawn_actor(radar_sensor, sensor_radar_spawn_point, attach_to=dropped_vehicle)
    dropped_vehicle.set_autopilot(True)

    sensor.listen(lambda radar_data: _Radar_callback(radar_data))

    def _Radar_callback(radar_data):
        for detection in radar_data:
            # Your code here

    actor_list.append(sensor)

    time.sleep(1000)
finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')

finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')

finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')

#Task 03

import glob
import os
import sys
import time

try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

actor_list = []


def generate_radar_blueprint(blueprint_library):
    radar_blueprint = blueprint_library.filter('sensor.other.radar')[0]
    #write code here
    return radar_blueprint



try:
    client = carla.Client('127.0.1', 2000)
    client.set_timeout(10.0)
    world = client.get_world()

    get_blueprint_of_world = world.get_blueprint_library()
    car_model = get_blueprint_of_world.filter('model3')[0]
    spawn_point = (world.get_map().get_spawn_points()[1])
    dropped_vehicle = world.spawn_actor(car_model, spawn_point)

    simulator_camera_location_rotation = carla.Transform(spawn_point.location, spawn_point.rotation)
    simulator_camera_location_rotation.location += spawn_point.get_forward_vector() * 30
    simulator_camera_location_rotation.rotation.yaw += 180
    simulator_camera_view = world.get_spectator()
    simulator_camera_view.set_transform(simulator_camera_location_rotation)
    actor_list.append(dropped_vehicle)

    radar_sensor = generate_radar_blueprint(get_blueprint_of_world)

    sensor_radar_spawn_point = carla.Transform(carla.Location(x=-0.5, z=1.8))
    sensor = world.spawn_actor(radar_sensor, sensor_radar_spawn_point, attach_to=dropped_vehicle)
    dropped_vehicle.set_autopilot(True)

    sensor.listen(lambda radar_data: _Radar_callback(radar_data))

    def _Radar_callback(radar_data):
        for detection in radar_data:
            final_velocity = detection.velocity  
            initial_velocity = 0.5  
            time = 0.001  
            acceleration = (final_velocity - initial_velocity) / time
            print('Acceleration:', acceleration)

    actor_list.append(sensor)

    time.sleep(1000)
finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')

finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')

finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')

finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')"
ZSfFf0qK,data727,TestGuy1,JSON,Monday 16th of October 2023 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'dcbba6732e3dfb3b66822bea8b13a83d2cce3a36bfc8e421f2846ebdd7eefdf90ed0c408661045ab98537a5551c66985b3b208f49e30d9a1cba355f44eab22926f1668e006a5b0c53c4d1a4406fbc889138521ca4b4cb3634d671aad32d62c76101f980d6048f01106941cd5da41034fddf7e4e7422d83931e5d738847947498',
  otherdata: [
    'b8f20fb71cdd2b22c3326410116483a3',
    'b767fbce6fd6e4382e9748328b25d15d',
    '3797d80fecdd0e6c14ed1745e2a317f1',
    '374d30bccd780462c67a4e587e9b5a38',
    '686ed0bb93629ddee8b22d6a463e0d60',
    '7e243f59bad182a713106f699b60f26e',
    'd23ccbd8851f0522105c5c05a96c4d70',
    'd44f6b8b36a64f6bdb80f0b47121015d'
  ]
}"
wSWw62Wm,Project 215,KKK_Smart,Python,Monday 16th of October 2023 05:56:09 AM CDT,"import glob
import os
import sys
import time
import numpy as np
import threading
from mayavi import mlab

try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

actor_list = []

def generate_lidar_blueprint(blueprint_library):
    lidar_blueprint = blueprint_library.find('sensor.lidar.ray_cast_semantic')
    lidar_blueprint.set_attribute('channels', str(64))
    #Task 01
    lidar_blueprint.set_attribute('points_per_second', str(56000 * 10)) 
    lidar_blueprint.set_attribute('rotation_frequency', str(100))
    lidar_blueprint.set_attribute('range', str(100.0 * 200)) 
    return lidar_blueprint

def semantic_lidar_data(point_cloud, lidar_point_cloud_buffer):
    matrix_representational_data = np.frombuffer(point_cloud.raw_data, dtype=np.dtype([
        ('x', np.float32), ('y', np.float32), ('z', np.float32),
        ('CosAngle', np.float32), ('ObjIdx', np.uint32), ('ObjTag', np.uint32)]))
    lidar_points = np.array(
        [matrix_representational_data['x'], -matrix_representational_data['y'], matrix_representational_data['z']]).T
    labels = np.array(matrix_representational_data['ObjTag'], dtype=np.float32)
    lidar_point_cloud_buffer['pts'] = lidar_points
    lidar_point_cloud_buffer['intensity'] = labels

def carlaThreadingLoop(world):
    frame = 0
    while True:
        time.sleep(0.005)
        world.tick()
        frame += 1

try:
    client = carla.Client('127.0.0.1', 2000)
    client.set_timeout(10.0)
    world = client.get_world()

    get_blueprint_of_world = world.get_blueprint_library()
    car_model = get_blueprint_of_world.filter('model3')[0]
    spawn_point = (world.get_map().get_spawn_points()[1])
    dropped_vehicle = world.spawn_actor(car_model, spawn_point)
    dropped_vehicle.set_autopilot()

    simulator_camera_location_rotation = carla.Transform(spawn_point.location, spawn_point.rotation)
    simulator_camera_location_rotation.location += spawn_point.get_forward_vector() * 30
    simulator_camera_location_rotation.rotation.yaw += 180
    simulator_camera_view = world.get_spectator()
    simulator_camera_view.set_transform(simulator_camera_location_rotation)
    actor_list.append(dropped_vehicle)

    lidar_sensor = generate_lidar_blueprint(get_blueprint_of_world)
    sensor_lidar_spawn_point = carla.Transform(location=carla.Location(x=0, y=0, z=2.0), rotation=carla.Rotation(pitch=0.0, yaw=90.0, roll=0.0))  # Task 02: Set the angle of the LIDAR sensor
    sensor = world.spawn_actor(lidar_sensor, sensor_lidar_spawn_point, attach_to=dropped_vehicle)

    lidar_figure = mlab.figure(size=(960, 540), bgcolor=(0.05, 0.05, 0.05))
    visualise_lidar_using_mayavi = mlab.points3d(
        lidar_point_cloud_buffer['pts'][:, 0],
        lidar_point_cloud_buffer['pts'][:, 1],
        lidar_point_cloud_buffer['pts'][:, 2],
        lidar_point_cloud_buffer['intensity'],
        mode='point',
        colormap='gnuplot',  # Task 03: Change colormap to 'gnuplot'
        figure=lidar_figure
    )
    #task 03
    mlab.view(distance=250)  
    lidar_point_cloud_buffer = {'pts': np.zeros((1, 3)), 'intensity': np.zeros(1)}

    def anim():
        i = 0
        while True:
            visualise_lidar_using_mayavi.mlab_source.reset(x=lidar_point_cloud_buffer['pts'][:, 0],
                                                           y=lidar_point_cloud_buffer['pts'][:, 1],
                                                           z=lidar_point_cloud_buffer['pts'][:, 2],
                                                           scalars=lidar_point_cloud_buffer['intensity'])
            mlab.savefig(f'output/{i}.png', figure=lidar_figure)
            time.sleep(0.1)
            i += 1

    sensor.listen(lambda data: semantic_lidar_data(data, lidar_point_cloud_buffer))

    loopThread = threading.Thread(target=carlaThreadingLoop, args=[world], daemon=True).start()
    anim()

    actor_list.append(sensor)

    time.sleep(1000)
finally:
    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')

#all three task are there"
maVy2Ekv,snowy new invention,coinwalk,JavaScript,Monday 16th of October 2023 05:44:57 AM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var dove = 240;
var nudie = Number((smiley/dove).toFixed(8));
var dork = (dove/10);
var burp = nudie;
var taget = 80000;
var bolux = (nudie*10);
var poopy = (nudie*6.5);
var sexual = ((Math.floor(smiley/bolux))*bolux);
var woman = ((Math.floor(smiley/bolux))*bolux);
var meanman = ((Math.floor(smiley/bolux))*bolux);
var fart = 1;
var submarine = 2.5;
var plane = 6.5;
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var bilance = smiley;


 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if (bolance>(sexual+(burp*plane))) {
    burp = burp*2;
    submarine = 4.5;
    plane = 4.5;
    sexual = parseFloat(bolance);
}
if (bolance<(sexual-(burp*submarine))) {
    burp = burp*2;
    fart = 0;
    submarine = 4.9;
    plane = 4.9;
    sexual = parseFloat(bolance);
}
if ((bolance>=(woman+(bolux*fart)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))) {
    burp = nudie;
    fart = 1;
    submarine = 2.9;
    plane = 6.9;
    woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    sexual = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
}
if (((bolance-burp)<=(burp*dork))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))) {
    burp = nudie;
    fart = 0;
    submarine = 2.9;
    plane = 6.9;  
    sexual = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
}
if ((bolance>=(bilance*2.4))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))) {
    nudie = Number(((parseFloat(bolance))/dove).toFixed(8));
    bolux = (nudie*10);
    poopy = (nudie*6.5);
    burp = nudie;
    fart = 1;
    submarine = 2.9;
    plane = 6.9;
    woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    sexual = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    bilance = parseFloat(bolance);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
var dog = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(dog);
setTimeout(() => get(), 1);
}
get();"
YrJdWhsv,# tk_features.py,here2share,Python,Monday 16th of October 2023 05:32:07 AM CDT,"# tk_features.py

import tkinter as tk

tk_features = []
for feature in dir(tk):
	print(feature)"
7cfKHYSa,ListScript (LOCAL SCRIPT),Sungmingamerpro13,CSS,Monday 16th of October 2023 05:30:46 AM CDT,"local Gamepass = game.ReplicatedStorage.Gamepasses:GetChildren() ---- folder para ImageButton or Tools con ID (NumberValue or IntValue)
local Info = script.Parent.Parent.Info
local player = game.Players.LocalPlayer
local MPS = game:GetService(""MarketplaceService"")

for v1, v2 in pairs(Gamepass) do
	spawn(function()
		local GamepassInfo = MPS:GetProductInfo(v2.ID.Value, Enum.InfoType.GamePass)
		
		local v3 = script:FindFirstChild(""ImageButton""):Clone()
		v3.Name = v2.Name
		v3.Image = v2.Image
		v3.Parent = script.Parent
		local v1 = v2
		local function v6()
			if Info.ViewportFrame:FindFirstChild(v3.Name) == nil then
				Info.ViewportFrame:ClearAllChildren()
				Info.BuyButton.Visible = true
				Info.BuyButton.Text = ""BUY""
				Info.nameLabel.Text = GamepassInfo.Name
				Info.ViewportFrame.Image = v2.Image
				Info.Description.Text = GamepassInfo.Description
				Info.Price.Text = GamepassInfo.PriceInRobux.."" Robux""
				Info.Viewing.Value = v3.Name
				Info.BuyButton.MouseButton1Click:Connect(function()
					MPS:PromptGamePassPurchase(player, v1.ID.Value)
					
					MPS.PromptGamePassPurchaseFinished:Connect(function(Player, GamepassId, Purchased)
						if GamepassId == v1.ID.Value and Purchased then
							Info.BuyButton.Text = ""OWNS""
						end
					end)
				end)
			end
		end
		v3.MouseButton1Click:Connect(v6)
		v3.SelectionGained:Connect(v6)
	end)
end

while true do
	script.Parent.CanvasSize = UDim2.new(0, 0, 0, script.Parent.UIGridLayout.AbsoluteContentSize.Y)
	wait()
end
"
srwPbEJa,Untitled,DaskeTv,Python,Monday 16th of October 2023 04:41:00 AM CDT,"from cryptography.fernet  import Fernet



def generateKey(): #funcion que genera una clave aleatoria , llamar a esta funcion al ejecutar el juego
    clave = Fernet.generate_key() #metodo de clase, genera la clave
    with open(""clave.key"",""wb"") as keyFile: #write
        keyFile.write(clave)


def returnKey(): #funcion que devuelve la clave, llamar al desencriptar un archivo: cuando le das de comer al bicho
    return open(""clave.key"",""rb"").read()


def cifrarArchivo(archivo, clave, dirclave):  #cifra mensaje, cambiar a archivo, usar esta funcion cuando el bicho pierde energia
   f = Fernet(clave)

   with open(dirclave, ""wb"") as file: #write
       file.write(f)

   with open(archivo, ""rb"") as file:  #read
       contenido = file.read()
       encriptarContenido = f.encrypt(contenido) #lee el contenido del archivo 

   with open(archivo, ""wb"") as file: #write
       file.write(encriptarContenido) #sobreescribe el contenido del archivo al contenido encriptado
    

def descifrarArchivo(archivo, dirclave):  #descifra mensaje, cambiar a archivo, usar esta funcion cuando el bicho gana energia
   with open(dirclave, ""rb"") as file:  #read
       f = file.read()

   with open(archivo, ""rb"") as file:  #read
       contenidoEncriptado = file.read()
       desencriptarContenido = f.decrypt(contenidoEncriptado) #lee el contenido del archivo previamente encriptado
    
   with open(archivo, ""wb"") as file: #write
       file.write(desencriptarContenido) #sobreescribe el contenido del archivo al contenido dencriptado

generateKey()
archivo = ""texto.txt""
clave = returnKey()
cifrarArchivo(archivo, clave)"
L2EWL8WP,BME280 Arduino Code Example,microrobotics,C,Monday 16th of October 2023 04:26:43 AM CDT,"#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1013.25) // Change this to your local sea level pressure (hPa)

Adafruit_BME280 bme;

void setup() {
  Serial.begin(9600);
  if (!bme.begin(0x76)) {
    Serial.println(""Could not find a valid BME280 sensor, check wiring!"");
    while (1);
  }
}

void loop() {
  Serial.print(""Temperature = "");
  Serial.print(bme.readTemperature());
  Serial.println("" *C"");

  Serial.print(""Humidity = "");
  Serial.print(bme.readHumidity());
  Serial.println(""%"");

  Serial.print(""Pressure = "");
  Serial.print(bme.readPressure() / 100.0F); // hPa to Pa conversion
  Serial.println("" hPa"");

  Serial.print(""Approx. Altitude = "");
  Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
  Serial.println("" m"");

  Serial.println();

  delay(2000); // Delay for 2 seconds (2000 ms) between each reading
}
"
yy7h2HN2,Progress,r4j,C#,Monday 16th of October 2023 04:23:40 AM CDT," var progresses = await dataService.QueryDocuments(""Progress"", new QueryDefinition(@""
SELECT 
    c.bookId,
    COUNT(c.bookId) AS readCount,
    SUM(c.rating) AS totalRating
FROM 
    c
WHERE
    c.rating > 0 and not is_defined(c.deletedAt)
GROUP BY
    c.bookId
""), new QueryRequestOptions { MaxItemCount = 10000 });

            double totalRatingSum = progresses.Sum(jo => jo[""totalRating""] != null ? Convert.ToDouble(jo[""totalRating""]) : 0);
            double readCountSum = progresses.Sum(jo => jo[""readCount""] != null ? Convert.ToDouble(jo[""readCount""]) : 0);
            var m = totalRatingSum / readCountSum;
            var readCounts = progresses.Where(jo => jo[""readCount""] != null)
                                 .Select(jo => Convert.ToDouble(jo[""readCount""]))
                                 .OrderBy(x => x)
                                 .ToList();            
            var C = SortedArrayStatistics.Quantile(readCounts.ToArray(), 0.25);

            await ProcessBooks(""Book"", C, m, progresses);
            //await ProcessBooks(""BookIndonesia"", C, m, progresses);

            return CreateSuccessResponse();
        }

        private async Task ProcessBooks(string tableName, double C, double m, List<JObject> progresses)
        {
            var books = await dataService.QueryDocuments(tableName, new QueryDefinition(""select * from c where not is_defined(c.deletedAt)""), new QueryRequestOptions { MaxItemCount = 10000 });
            foreach (var book in books)
            {
                var id = book.Value<string>(""id"");
                var bookProgress = progresses.Where(jo => jo.Value<string>(""bookId"") == id).ToList();
                if (bookProgress.Count > 0)
                {
                    var readCount = bookProgress.First().Value<int>(""readCount"");
                    var totalRating = bookProgress.First().Value<int>(""totalRating"");
                    var averageRating = totalRating / readCount;
                    var bayesianAverageRating = (averageRating * readCount + (C * m)) / (readCount + C);

                    // save bayesianAverageRating into book record
                    book[""averageRating""] = new JValue(bayesianAverageRating);
                    long milliseconds = DateTimeOffset.Now.ToUnixTimeMilliseconds();
                    book[""updatedAt""] = new JValue(milliseconds);
                    await dataService.SaveDocument(tableName, book);
                }
            }
        }"
nekGh6Kc,LED + Switch Button,andretafta,Arduino,Monday 16th of October 2023 04:19:11 AM CDT,"const int pinOFswitch = 3;  
const int LED = 8;  
void setup( ) {  
  pinMode(pinOFswitch, INPUT);  
  pinMode(LED, OUTPUT);  
}  
void loop( )   
{  
  int ValueOFswitch;  
  ValueOFswitch = digitalRead(pinOFswitch);  
  if (ValueOFswitch == HIGH)   
  {  
    digitalWrite(LED, HIGH);  
    delay(500);  
  }  
    
  else   
  {  
    digitalWrite(LED, LOW);  
    delay(500);  
  }  
}  "
15fZYDbt,java lab 0.5 (16/10/2023),brandblox,Java,Monday 16th of October 2023 04:01:39 AM CDT,"abstract  class abc
{
    abstract void callme();
    void callmethod()
    {
        System.out.println(""I am in callmethod"");
    }
}
class xyz extends abc
{
    void callme()
    {
        System.out.println(""I am in callme()"");
    }
}

public class Demo
{
    public static void main(String[] args)
    {
        abc ob;
        xyz obj=new xyz();
        obj.callmethod();
        obj.callme();
        ob=obj;
        ob.callmethod();
        ob.callme();
    }
}
"
k4A5JyXv,Java lab 1 (16/10/2023),brandblox,Java,Monday 16th of October 2023 04:00:03 AM CDT,"
abstract class Shape {
    abstract void areaOfRect(int x, int y);
    abstract void areaOfCircle(double r);
    abstract void areaOfSquare(int x);
}

class Rectangle extends Shape {

    void areaOfRect(int x, int y) {
        System.out.println(""Area of Rectangle: "" + (x * y));
    }
    void areaOfCircle(double r){}

    void areaOfSquare(int x) {}
}
class Circle extends Shape {

    void areaOfRect(int x, int y){}

    void areaOfCircle(double r) {
        System.out.println(""Area of Circle: "" + (Math.PI * r * r));
    }

    void areaOfSquare(int x) {}
}

// Concrete class Square extending Shape
class Square extends Shape {

    void areaOfRect(int x, int y) {}

    void areaOfCircle(double r) {}

    void areaOfSquare(int x) {
        System.out.println(""Area of Square: "" + (x * x));
    }
}
public class ShapeDemo {
    public static void main(String[] args) {
        Rectangle rectangle = new Rectangle();
        Circle circle = new Circle();
        Square square = new Square();
        rectangle.areaOfRect(5, 10);
        circle.areaOfCircle(3.5);
        square.areaOfSquare(4);
    }
}
"
rnRAnix7,Untitled,boolit,Python,Monday 16th of October 2023 03:58:09 AM CDT,"from lasio.las_items import CurveItem
from scipy import stats
import numpy as np
import pickle
import lasio
import string
import langid
# from common import settings
# from utils.storages import MediaStorage
# from wells.functions import decode_las
# from wells.models import WellLogFile

class DataMatchingService:
    def __init__(
        self,
        well_log_file,#: WellLogFile,
        language,#: str,
        confidence_level,#: float = 0.9,
        dict_of_mnemonic,
    ) -> None:
#         if settings.ENVIRONMENT in ['prod', 'dev']:
#             file = MediaStorage().open(well_log_file.file.name).file.read().decode('cp1251')
#         else:
#             file = well_log_file.file.path

        self.file = lasio.read(well_log_file)
        self.loaded_model = pickle.load(open(f'wl_18_unit_model_{language}.pickle', 'rb'))[0]
        self.language = language
        self.confidence_level = confidence_level
        self.mnemonics = dict_of_mnemonic#well_log_file.mnemonics
        
#         "" read dict_of_mnemonic ""
#         self.dict_of_mnemonic = dict_of_mnemonic

    def get_mnemonic(self, curve: CurveItem):# -> None | str:
        found_logs = []
        for mnemonic in self.mnemonics:
            if curve.mnemonic.lower() in mnemonic['possible_mnemonics']:
                found_logs.append(mnemonic['inlog_mnemonic'])

        mnemonic = None
        if len(found_logs) > 0:
            mnemonic = found_logs[0]
        return mnemonic

    def get_predicted_unit(self, curve: CurveItem):# -> None | str:
        predicted_unit = None

        if self.mnemonics:
            log_values = curve.data
            log_values = log_values[~np.isnan(log_values)]
            if len(log_values) > 0:
                median = np.median(log_values)
                mean = np.mean(log_values)
                mode = stats.mode(log_values)[0][0]
                min_ = np.min(log_values)
                max_ = np.max(log_values)
                input_ = np.array([[median, mean, mode, min_, max_]]).reshape(1, -1)

                probs = self.loaded_model.predict_proba(input_)
                if any(k >= self.confidence_level for k in probs[0]):
                    predicted_unit = self.loaded_model.predict(input_)[0]

        return predicted_unit

    def get_found_unit(self, curve: CurveItem):# -> str:
        found_units = []
        for mnem_element in self.mnemonics:
            if curve.mnemonic.lower() in mnem_element['possible_mnemonics']:
                print('=======', mnem_element['inlog_unit_and_conversion_' + self.language])
                found_units.append(
                    [
                        [i for i in mnem_element['inlog_unit_and_conversion_' + self.language]
                         if i['value'] == 1][0]['scale']
                    ]
                )
        found_unit = None
        if len(found_units) > 0:
            found_unit = found_units[0][0]
        return found_unit

    def get_conversion_func(self, curve: CurveItem, found_unit: str, predicted_unit: str):# -> None | float:
        conversion_func = None
        if curve.unit.lower() == found_unit and found_unit is not None:
            conversion_func = float(1)

        if curve.unit.lower() != found_unit and found_unit is not None:
            conversion_func_list = []
            for mnem_element in self.mnemonics:
                if curve.mnemonic.lower() in mnem_element['possible_mnemonics']:
                    current_lang = langid.classify(curve.unit.lower())[0] 
                    if len([i for i in mnem_element['inlog_unit_and_conversion_' + current_lang] if i['scale'] == curve.unit.lower()]) > 0:
                        conversion_func_list.append(
                            [i for i in mnem_element['inlog_unit_and_conversion_' + current_lang]
                             if i['scale'] == curve.unit.lower()][0]['value']
                        )
            if len(conversion_func_list) > 0:
                print(conversion_func_list)
                conversion_func = conversion_func_list[0]
        print('пппппппппппп',curve.mnemonic.lower(), conversion_func)
        return conversion_func
        
    def get_depth_values(self, curve: CurveItem):# -> None | str:
#         print('values',curve.data)
        return curve.data.tolist()

    def get_matching_matrix(self):# -> list:
        output = []
        
        for curve_id, curve in enumerate(self.file.curves):
            print(curve)
            print('unit curve',curve.unit.lower())
            #===extract depth values
            depth_values = self.file.data[:,[0, curve_id]]
            depth_values_no_nans = depth_values[~np.isnan(depth_values).any(axis=1)] 
            depthes = list(depth_values_no_nans[:,0])
            values = list(depth_values_no_nans[:,1])
            #===extract depth values    
            mnemonic = self.get_mnemonic(curve)
            predicted_unit = self.get_predicted_unit(curve)
            found_unit = self.get_found_unit(curve)
            conversion_func = self.get_conversion_func(curve, found_unit, predicted_unit)           
            output.append(
                [
                    curve.descr,
                    curve.mnemonic,
                    mnemonic,
                    curve.unit.lower(),
                    predicted_unit,
                    found_unit,
                    conversion_func,
                    depthes,
                    values
                ]
            )
        return output"
YUtyqSyh,LED + Button Test Ardunino,andretafta,Arduino,Monday 16th of October 2023 03:56:49 AM CDT,"// C++ code
//

int pin_led = 9;
int pin_button = 2;
int posisi_button;
void setup()
{
  pinMode (pin_led, OUTPUT);
  pinMode (pin_button, INPUT);
}

void loop()
{
  posisi_button = digitalRead (pin_button);
  if (posisi_button == LOW)
  	{
    	digitalWrite(pin_led, HIGH);
  	}
  else 
  	{
  		digitalWrite(pin_led, LOW);
  	}
  delay(10); // Delay a little bit to improve simulation performance
}"
w3CTYwRw,cdPlayer,Lanzr,Lua,Monday 16th of October 2023 03:36:05 AM CDT,"local diskSto  = peripheral.wrap(""top"")
local diskDrive = peripheral.wrap(""left"")
local mot = peripheral.wrap(""right"")
local motw, moth = mot.getSize() -- monitor width & heigh
local zoom =2
local nowEvent = ""all""
local topSlot = 0
-- local topBar = window.create(mot,1,1,motw,1)
-- local winMain = window.create(mot,1,2,motw-2,moth-1)
diskSto.pullItems(peripheral.getName(diskDrive),1)
local res = diskSto.list()
local diskSize = table.getn(diskSto.list())
local musicList = {}
local nowSlot = nil
local diskDriveName = peripheral.getName(diskDrive)

-- get all music 
for i=1,diskSize,1 do
    diskSto.pushItems(diskDriveName,i)
    table.insert(musicList,diskDrive.getAudioTitle())
    print(diskDrive.getAudioTitle())
    diskSto.pullItems(diskDriveName,1)
end 

local function mainloop()
while 1 do 
    if(nowEvent == ""all"") then
        nowEvent = nil
        mot.clear()
        mot.setTextScale(1)
        mot.setCursorPos(1,1)
        mot.write(""now :"")
        mot.setTextColor(colors.red)
        mot.write(diskDrive.getAudioTitle())
        mot.setCursorPos(1,2)
        mot.setTextColor(colors.white)
        -- display
        for i,j in pairs(musicList) do
            -- local y = (i-1)*2 + 1
            if(i > topSlot) then
                local y = (i+1-topSlot)*zoom + 1
                if(y > moth) then
                    break
                end
                mot.setCursorPos(1,y)
                mot.write(j)
            end
        end
    end
    os.sleep(3);
end
end

local function clickCatch()
while 1 do
    local event, side, mx, my = os.pullEvent(""monitor_touch"")
    if (event ~= nil) then
        -- target
        local chgPageFlag = false
        repeat
            -- page change
            if ( mx < 3) then 
                topSlot = topSlot - 1
                chgPageFlag= true
            elseif( mx >(motw - 3)) then
                topSlot = topSlot + 1
                chgPageFlag= true
            end
            if ( chgPageFlag  == true) then
                if( topSlot < 0) then
                    topSlot = diskSize - 4
                elseif (topSlot > (diskSize - 4)) then 
                    topSlot = 0
                end
                nowEvent = ""all""
                break
            end
            
            

            for i=zoom+2,moth,zoom do
                if (my >= i and my < i+zoom) then
                    local slot = (i-2)/zoom + topSlot
                    if (slot == nil ) then
                        nowSlot = slot
                        diskSto.pushItems(diskDriveName,nowSlot)
                        nowEvent = ""all""
                    elseif (slot == nowSlot) then
                        break
                    elseif (slot ~= nowSlot) then
                        diskSto.pullItems(diskDriveName,1)
                        diskSto.pushItems(diskDriveName,slot)
                        nowEvent = ""all""
                    end
                    diskDrive.playAudio()
                    break
                end
            end
        until(true)
    end
end
end

parallel.waitForAll(mainloop,clickCatch)"
9yJAHB5T,LeetCode 76 - Minimum Window Substring - NeetCode solution,nathanwailes,Python,Monday 16th of October 2023 03:34:52 AM CDT,"class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if t == """": return """"

        countT, window = {}, {}
        for c in t:
            countT[c] = 1 + countT.get(c, 0)

        have, need = 0, len(countT)
        res, resLen = [-1, -1], float(""infinity"")
        l = 0
        for r in range(len(s)):
            c = s[r]
            window[c] = 1 + window.get(c, 0)

            if c in countT and window[c] == countT[c]:
                have += 1

            while have == need:
                # update our result
                if (r - l + 1) < resLen:
                    res = [l, r]
                    resLen = (r - l + 1)
                # pop from the left of our window
                window[s[l]] -= 1
                if s[l] in countT and window[s[l]] < countT[s[l]]:
                    have -= 1
                l += 1
        l, r = res
        return s[l:r+1] if resLen != float(""infinity"") else """"
"
6WG7dWHu,Part,Bosedea,Lua,Monday 16th of October 2023 03:26:22 AM CDT,"x����VJֵ�3��0U�2�Q�S����U����������a����a�
�3�1�1���թV2��H,*Q�����Q"
1ubSg4H4,Untitled,coinwalk,JavaScript,Monday 16th of October 2023 03:25:15 AM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/800).toFixed(8));
var burp = nudie;
var taget = 80000;
var bolux = (nudie*10);
var poopy = (nudie*6.5);
var sexual = ((Math.floor(smiley/bolux))*bolux);
var woman = ((Math.floor(smiley/bolux))*bolux);
var meanman = ((Math.floor(smiley/bolux))*bolux);
var fart = 1;
var submarine = 2.5;
var plane = 6.5;
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var bilance = smiley;


 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if (bolance>(sexual+(burp*plane))) {
    burp = burp*2;
    submarine = 4.5;
    plane = 4.5;
    sexual = parseFloat(bolance);
}
if (bolance<(sexual-(burp*submarine))) {
    burp = burp*2;
    fart = 0;
    submarine = 4.9;
    plane = 4.9;
    sexual = parseFloat(bolance);
}
if ((bolance>=(woman+(bolux*fart)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))) {
    burp = nudie;
    fart = 1;
    submarine = 2.9;
    plane = 6.9;
    woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    sexual = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    meanman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
}
if (((bolance-burp)<=(burp*80))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))) {
    burp = nudie;
    fart = 0;
    submarine = 2.9;
    plane = 6.9;  
    meanman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    sexual = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
}
if ((bolance>=(meanman+(bolux*3)))&&(bolance<woman)&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))) {
    burp = nudie;
    fart = 0;
    submarine = 2.9;
    plane = 6.9;
    meanman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    sexual = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
}
if ((bolance>=(bilance*2.4))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))) {
    nudie = Number(((parseFloat(bolance))/144000).toFixed(8));
    bolux = (nudie*10);
    poopy = (nudie*6.5);
    burp = nudie;
    fart = 1;
    submarine = 2.9;
    plane = 6.9;
    woman = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    sexual = ((Math.floor((parseFloat(bolance))/bolux))*bolux);
    bilance = parseFloat(bolance);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
var dog = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(dog);
setTimeout(() => get(), 1);
}
get();"
Py6Y42VV,LeetCode 76 - Minimum Window Substring - 2023.10.16 solution,nathanwailes,Python,Monday 16th of October 2023 03:19:44 AM CDT,"class Solution:
    def minWindow(self, s: str, t: str) -> str:
        # This is a dict of t chars to their counts.
        t_counts = get_t_counts(t)

        # A set telling us which chars we need to still get enough of in 
        # our subwindow.
        t_chars_we_still_need_to_match = {char for char in t_counts.keys()}

        # This is a list of all the indices that contain characters in t.
        s_window_entries = []

        # This is a dict of the characters in t to their number in the
        # current window in s.
        s_window_counts = defaultdict(int)

        minimum_window_substring = """"

        for i, c in enumerate(s):
            if c not in t_counts:
                continue
            
            s_window_counts[c] += 1
            s_window_entries.append(i)
        
            if s_window_counts[c] < t_counts[c]:
                t_chars_we_still_need_to_match.add(c)
            elif s_window_counts[c] >=  t_counts[c] and c in t_chars_we_still_need_to_match:
                t_chars_we_still_need_to_match.remove(c)
            
            # Check if we should handle a matching subwindow
            if len(t_chars_we_still_need_to_match) == 0:
                # Check if we can remove chars from the front of the
                # subwindow
                while True:
                    if len(s_window_entries) == 0:
                        break
                    front_char_index = s_window_entries[0]
                    front_char = s[front_char_index]
                    if s_window_counts[front_char] > t_counts[front_char]:
                        # Ditch this front char
                        s_window_counts[front_char] -= 1
                        s_window_entries.pop(0)
                    else:
                        break
                
                # Calculate the subwindow
                current_subwindow_length = s_window_entries[-1] - s_window_entries[0] + 1

                # If the new subwindow is smaller, use it.
                if not minimum_window_substring or current_subwindow_length < len(minimum_window_substring):
                    # Update the minimum window_substring
                    minimum_window_substring = s[s_window_entries[0]:s_window_entries[-1]+1]

                # Pop off the first character in the subwindow so we can start looking for a better subwindow
                front_char = s[s_window_entries[0]]
                s_window_counts[front_char] -= 1
                s_window_entries.pop(0)
                if s_window_counts[front_char] < t_counts[front_char]:
                    t_chars_we_still_need_to_match.add(front_char)
        return minimum_window_substring

def get_t_counts(t):
    t_counts = defaultdict(int)
    for c in t:
        t_counts[c] += 1
    return t_counts
"
NVckMZ8Y,TempCPP,MaxMax6767,C++,Monday 16th of October 2023 03:07:30 AM CDT,"// Dépendances
#include <Wire.h>
#include <Adafruit_BME280.h>
#include <Arduino.h>
#include <ChainableLED.h>
#include <ezBUtton.h>
#define NUM_LEDS 1
ChainableLED leds(7, 8, NUM_LEDS);
#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME280 bme;

// Initialisation de la gestion des boutons
ezButton button1(2);
ezButton button2(3);
static int select = 0;
static bool pressed = false;

// Paramètres de nombre de capteur & taille de la moyenne glissante
const int Nb_Capteurs = 4;
const int Nb_Val = 10;

// Initialisation du timer pour le délai entre les mesures
unsigned long startTime = millis();

// Initialisation des index pour la moyenne glissante
static int ind_moy = 0;
static int ind_capt = 0;

// Initialisation de la structure de capteur pour les différents capteurs
struct Capteurs
{
  int Nb_Erreur;
  float Moy_gliss[Nb_Val];
  float Moyenne;
};
Capteurs *Temperature = new Capteurs();
Capteurs *Humidite = new Capteurs();
Capteurs *Pression = new Capteurs();
Capteurs *Luminosite = new Capteurs();

void setup()
{
  Serial.begin(9600);   // Ouverture de la communication série
  Wire.begin();         // Ouverture de la communication I2C
  leds.init();          // Initialisation des LEDs
  if (!bme.begin(0x76)) // Vérivication de la connexion au capteur BME280
  {
    Serial.println(""Could not find a valid BME280 sensor, check wiring!"");
  }
  leds.setColorHSL(0, 0, 0, 0.1); // Initialisation allumage de la LED en blanc faible
  button1.setDebounceTime(10);    // Initialisation du délai de rebond des boutons
  button2.setDebounceTime(10);
}

// Ajout des valeurs dans le tableau de moyenne glissante (écrase les valeurs les plus anciennes)
void Add_Val(float Val, float Tab_Moy[])
{
  Tab_Moy[ind_moy] = Val;
  if (ind_capt >= Nb_Capteurs - 1)
  {
    ind_capt = 0;
    ind_moy++;
  }
  else
  {
    ind_capt++;
  }
  if (ind_moy >= Nb_Val)
  {
    ind_moy = 0;
  }
}

// Lecture des valeurs des capteurs
void Lecture(Capteurs &temperature, Capteurs &humidite, Capteurs &pression, Capteurs &luminosite)
{
  float T = bme.readTemperature();
  float H = bme.readHumidity();
  float P = bme.readPressure() / 100.0F;
  float L = analogRead(A0);

  // Simulation des erreurs de lecture avec les boutons
  if (pressed == true)
  {
    pressed = false;
    switch (select)
    {
    case 0:
      break;
    case 1:
      T = NAN;
      break;
    case 2:
      H = NAN;
      break;
    case 3:
      P = NAN;
      break;
    case 4:
      L = NAN;
      break;
    }
  }

  // Gestion de la température
  if (isnan(T))
  {
    temperature.Nb_Erreur++; // Incrémentation du nombre d'erreur pour la température
  }
  else
  {
    Add_Val(T, temperature.Moy_gliss); // Ajout de la valeur dans le tableau de moyenne glissante
    float Moy_T = 0;
    for (int i = 0; i < Nb_Val; i++)
    {
      Moy_T += temperature.Moy_gliss[i];
    }
    Moy_T /= Nb_Val;
    temperature.Moyenne = Moy_T; // Calcul de la moyenne glissante
  }

  // Gestion de l'humidité
  if (isnan(H))
  {
    humidite.Nb_Erreur++; // Incrémentation du nombre d'erreur pour l'humidité
  }
  else
  {
    Add_Val(H, humidite.Moy_gliss); // Ajout de la valeur dans le tableau de moyenne glissante
    float Moy_H = 0;
    for (int i = 0; i < Nb_Val; i++)
    {
      Moy_H += humidite.Moy_gliss[i];
    }
    Moy_H /= Nb_Val;
    humidite.Moyenne = Moy_H; // Calcul de la moyenne glissante
  }

  // Gestion de la pression
  if (isnan(P))
  {
    pression.Nb_Erreur++; // Incrémentation du nombre d'erreur pour la pression
  }
  else
  {
    Add_Val(P, pression.Moy_gliss); // Ajout de la valeur dans le tableau de moyenne glissante
    float Moy_P = 0;
    for (int i = 0; i < Nb_Val; i++)
    {
      Moy_P += pression.Moy_gliss[i];
    }
    Moy_P /= Nb_Val;
    pression.Moyenne = Moy_P; // Calcul de la moyenne glissante
  }

  // Gestion de la luminosité
  if (isnan(L))
  {
    luminosite.Nb_Erreur++; // Incrémentation du nombre d'erreur pour la luminosité
  }
  else
  {
    Add_Val(L, luminosite.Moy_gliss); // Ajout de la valeur dans le tableau de moyenne glissante
    float Moy_L = 0;
    for (int i = 0; i < Nb_Val; i++)
    {
      Moy_L += luminosite.Moy_gliss[i];
    }
    Moy_L /= Nb_Val;
    luminosite.Moyenne = Moy_L; // Calcul de la moyenne glissante
  }
}

// Affichage des valeurs des capteurs
void Affichage(Capteurs &capteur)
{
  // Affichage du tableau de valeurs
  Serial.println(""Valeurs : "");
  Serial.print(""["");
  for (int i = 0; i < Nb_Val; i++)
  {
    Serial.print(capteur.Moy_gliss[i]);
    if (i < Nb_Val - 1)
    {
      Serial.print(""; "");
    }
  }
  Serial.println(""]"");

  // Affichage de la moyenne
  Serial.println(""Moyenne : "");
  Serial.println(capteur.Moyenne);

  // Affichage du nombre d'erreur
  Serial.println(""Nombre d'erreur: "");
  Serial.println(capteur.Nb_Erreur);
  Serial.println();
}

void loop()
{
  // Actualisation de l'état des boutons
  button1.loop();
  button2.loop();

  // Actualisation du temps
  unsigned long currentTime = millis();

  // Changement de mode d'erreur
  if (button2.isPressed())
  {
    select++;
    if (select > Nb_Capteurs)
    {
      select = 0;
    }
  }

  // Changement de couleur de la LED en fonction du mode d'erreur
  switch (select)
  {
  case 0:
    leds.setColorHSL(0, 0, 0, 0.1);
    break;
  case 1:
    leds.setColorRGB(0, 50, 0, 0);
    break;
  case 2:
    leds.setColorRGB(0, 0, 50, 0);
    break;
  case 3:
    leds.setColorRGB(0, 0, 0, 50);
    break;
  case 4:
    leds.setColorRGB(0, 50, 50, 0);
    break;
  }

  // Changement de couleur de la LED en fonction de l'appui sur le bouton d'erreur pour un retour visuel
  if (button1.isPressed())
  {
    pressed = true;
    switch (select)
    {
    case 0:
      break;
    case 1:
      leds.setColorRGB(0, 255, 0, 0);
      break;
    case 2:
      leds.setColorRGB(0, 0, 255, 0);
      break;
    case 3:
      leds.setColorRGB(0, 0, 0, 255);
      break;
    case 4:
      leds.setColorRGB(0, 255, 255, 0);
      break;
    }
  }

  // Mesure & affichage des valeurs des capteurs toutes les 5 secondes
  if (currentTime - startTime >= 5000)
  {
    startTime = currentTime;                                  // Actualisation du temps
    Lecture(*Temperature, *Humidite, *Pression, *Luminosite); // Lecture des valeurs des capteurs

    Serial.println(""###################"");
    Serial.println(""### Temperature ###"");
    Serial.println(""###################"");
    Affichage(*Temperature);

    Serial.println(""###################"");
    Serial.println(""###  Humidite   ###"");
    Serial.println(""###################"");
    Affichage(*Humidite);

    Serial.println(""###################"");
    Serial.println(""###  Pression   ###"");
    Serial.println(""###################"");
    Affichage(*Pression);

    Serial.println(""###################"");
    Serial.println(""### Luminosite  ###"");
    Serial.println(""###################"");
    Affichage(*Luminosite);
  }

  delay(10);
}
"
bD9WBV0w,Script for HD,jcnruad900,Lua,Monday 16th of October 2023 03:00:00 AM CDT,"local module = {}

local main, data

local players = game:GetService(""Players"")
local types = require(game:GetService(""ReplicatedStorage""):WaitForChild(""Types""))

function module:RegularizeDamageTypes(damageTypes : types.StatusEffects) : {[string] : types.RegularizedDamageType}
	local regularizedDamageTypes : {[string] : types.RegularizedDamageType} = {}
	
	for key, value : types.StatusEffect|string in pairs(damageTypes) do
		if typeof(value) == ""string"" then -- if the value is string, calling script defined no multiplier for specified damage type
			regularizedDamageTypes[value] = {Intensity = 1, BaseIntensity = 0}
		elseif typeof(value) == ""number"" then -- if the value is number, calling script defined no chance/baseintensity for specified damage type
			regularizedDamageTypes[key] = {Intensity = value, BaseIntensity = 0}
		else
			regularizedDamageTypes[key] = {Intensity = value.Intensity or 0, BaseIntensity = value.BaseIntensity or 0, Chance = value.Chance}
            -- if damage type is a table then make sure it has intensity, baseintensity and optionally chance, baseintensity is the base intensity of the damage, intensity scales off total damage: intensity * totalDamage es: 0.5*50, 25 of type damage
		end
	end
	
	return regularizedDamageTypes
end

function module:Init(m, d)
	main, data = m, d
end

function module:Damage(hit : BasePart, damageData : types.DamageData, origin : Vector3)
	local char = main.Data.GeneralHelper:GetCharacterFromDescendant(hit)--Find a humanoid inside of the character's descendants
	
	if char then --if humanoid then char will be non-nil
		local hum = char.Humanoid
		
		local dmg = damageData.damage
		
		local regularizedDamageTypes : {[string] : types.RegularizedDamageType} = module:RegularizeDamageTypes(damageData.types)
        	--make sure damage types are regularized
		
		local reducedDamage = 0
		
		for key, value in pairs(regularizedDamageTypes) do
			reducedDamage += value.Intensity * dmg
            --cycle through the damage types, remove the damage of each damage type from the total damage
			
			if not value.Chance or value.Chance > math.random() then
                -- If the damage doesn't have a chance or the chance is higher than math.random() then handle the damage in the health system module
				main.HealthSystem:ApplyDamageType(hit, hum, key, value.BaseIntensity + value.Intensity * dmg, damageData)
			end
		end
        
        -- Handle damage remaining for which no type was defined normally

		hum:TakeDamage(math.max(dmg - reducedDamage, 0))
		
		local plrAttacker = damageData.source and players:GetPlayerFromCharacter(damageData.source)
        
        -- if we're able to detect a player source of damage

		if plrAttacker then
            -- fire the client of the player to do an hitmarker
            
			data.RemoteEvents.ReplicateHitmarker:FireClient(plrAttacker, {
				intensity = dmg,
				friendlyFire = not data.Modules.AISystem.GeneralHelper:CanTarget(damageData.source, char), -- Simple team checking function
				position = origin
			})
		end
	end
end

return module
--[[
	This module is a module that handles centralized damage inside of a more complicated system.
]]"
JeZmrQPv,Graph Nodes,glitchdetector,Lua,Monday 16th of October 2023 02:43:44 AM CDT,"-- Define the graph tree as a table of nodes and edges
local graph = {
    nodes = {
        { x = 10, y = 10 },
        { x = 30, y = 10 },
        { x = 20, y = 30 },
        { x = 10, y = 50 },
        { x = 30, y = 50 },
        { x = 20, y = 70 },
        { x = 5, y = 90 },
        { x = 35, y = 90 },
    },
    edges = {
        { 1, 2 },
        { 1, 3 },
        { 2, 3 },
        { 3, 4 },
        { 3, 5 },
        { 4, 6 },
        { 5, 6 },
        { 4, 7 },
        { 5, 8 },
    },
}

local letters = {""ABCDEFGHIJKLMNOPQRSTUVWXYZ"", ""abcdefghijklmnopqrstuvwxyz""}

-- Define a function to draw a node at a given position
local function drawNode(x, y, name)
    paintutils.drawFilledBox(x - 2, y - 1, x + 2, y + 1, colors.green)
    paintutils.drawPixel(x - 2, y - 1, colors.white)
    paintutils.drawPixel(x + 2, y - 1, colors.white)
    paintutils.drawPixel(x - 2, y + 1, colors.white)
    paintutils.drawPixel(x + 2, y + 1, colors.white)
    term.setCursorPos(x - 1, y)
    term.write(name)
end

-- Define a function to draw an edge between two nodes
local function drawEdge(x1, y1, x2, y2, name)
    paintutils.drawLine(x1, y1, x2, y2, colors.white)
    local x = math.floor((x1 + x2) / 2)
    local y = math.floor((y1 + y2) / 2)
    term.setCursorPos(x, y)
    term.write(name)
end

-- Draw the graph tree
local monitor = peripheral.wrap(""top"")
term.redirect(monitor)
monitor.setBackgroundColor(colors.black)
monitor.setTextScale(0.5)
monitor.clear()
for i, edge in ipairs(graph.edges) do
    local node1 = graph.nodes[edge[1]]
    local node2 = graph.nodes[edge[2]]
    local edgeName = letters[2][i]
    drawEdge(node1.x, node1.y, node2.x, node2.y, edgeName)
end
for i, node in ipairs(graph.nodes) do
    local nodeName = letters[1][i]
    drawNode(node.x, node.y, nodeName)
end

"
RVgXECf0,Untitled,abstract_abstract,Python,Monday 16th of October 2023 02:28:58 AM CDT,"import numpy as np
import matplotlib.pyplot as plt

field = np.zeros((1024, 1024), dtype=int)
x, y = 512, 512

directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]

direction_index = 0

while 0 <= x < 1024 and 0 <= y < 1024:
    field[y, x] = 1 - field[y, x]

    if field[y, x] == 0:
        direction_index = (direction_index + 1) % 4
    else:
        direction_index = (direction_index - 1) % 4

    dx, dy = directions[direction_index]
    x += dx
    y += dy

black_cells = np.sum(field)
print(""Число черных клеток на пути муравья:"", black_cells)

plt.imshow(field, cmap='binary')
plt.axis('off')
plt.savefig('ant_path.png', format='png', dpi=300)
"
5PBz6Nz6,align entry in xymatrix,dvleo,Latex,Monday 16th of October 2023 02:24:34 AM CDT,"\xymatrix @!=1pc {
**[l] A\times B % right-aligned
\ar[r]^{/A} \ar[d]_{/B}
& B \ar[d]^{\times A}
\\
A \ar[r]_{B\times}
& **[r] B\times A % left-aligned entry
}"
VXTMzCBS,Untitled,psi_mmobile,Java,Monday 16th of October 2023 02:20:40 AM CDT,"    public static String getEmailMessage(Row currentGuiUser, String userName) {
        String firstName = (String)currentGuiUser.getAttribute(""FirstName"");
        if(firstName == null) {
            firstName = """";
        }
        
        String lastName = (String)currentGuiUser.getAttribute(""LastName"");
        if(lastName == null) {
            lastName = """";
        }
        if(firstName.equals("""") && lastName.equals("""")) {
            firstName = ""user"";
        }
        
        if (userName == null) {
            userName = (String)currentGuiUser.getAttribute(""Loginname"");
        }
        
        String password = (String)currentGuiUser.getAttribute(""Loginpwd"");
        String lang = (String)currentGuiUser.getAttribute(""Language"");
        String message = """";
        switch (lang.charAt(0)) {
        case 'E':
            message = getEnglishMessage(firstName, lastName, userName, password);
            break;
        case 'F':
            message = getFrenchMessage(firstName, lastName, userName, password);
            break;
        case 'D':
            message = getDutchMessage(firstName, lastName, userName, password);
            break;
        default :
            message = getEnglishMessage(firstName, lastName, userName, password);
            break;
        }
        return message;
    }

    private static String getFrenchMessage(String firstName, String lastName, String userName, String password) {
        String message = ""Cher"" + "" "" + firstName + "" "" + lastName + "",<br/>"" +
            ""Veuillez trouver ci-dessous vos informations de connexion "" + ""<br/><br/>"" +
            ""URL : https://v6.traxxeo.com & https://my.traxxeo.com/ <br/>"" +
            ""Nom d'utilisateur :"" + "" "" + userName + ""<br/>"" +
            ""Mot de passe :"" + "" "" + password + ""<br/><br/>"" +
            ""Salutations"" + "","" + ""<br/>"" +
            ""L'"" + ""\u00e9"" + ""quipe Traxxeo"";
        return message;
    }

    private static String getDutchMessage(String firstName, String lastName, String userName, String password) {
        String message = ""Beste"" + "" "" + firstName + "" "" + lastName + "",<br/>"" +
            ""Gelieve uw connectiegegevens te vinden"" + ""<br/><br/>"" +
            ""URL : https://v6.traxxeo.com & https://my.traxxeo.com/"" + ""<br/>"" +
            ""Gebruikersnaam :"" + "" "" + userName + ""<br/>"" +
            ""Paswoord :"" + "" "" + password + ""<br/><br/>"" +
            ""Groeten"" + "","" + ""<br/>"" +
            ""Traxxeo team"";
        return message;
    }

    private static String getEnglishMessage(String firstName, String lastName, String userName, String password) {
        String message = ""Dear"" + "" "" + firstName + "" "" + lastName + "",<br/>"" +
            ""Please find below your login information"" + "" <br/><br/>"" +
            ""URL : https://v6.traxxeo.com & https://my.traxxeo.com/ <br/>"" +
            ""Username :"" + "" "" + userName + ""<br/>"" +
            ""Password :"" + "" "" + password + ""<br/><br/>"" +
            ""Best regards"" + "","" + ""<br/>"" +
            ""The Traxxeo Team"";
        return message;
    }"
tHcBS32c,Untitled,psi_mmobile,Java,Monday 16th of October 2023 02:17:12 AM CDT,"    public void sendCredentials(ActionEvent dialogEvent) {
        AppModuleImpl am = (AppModuleImpl)ADFUtils.getApplicationModuleForDataControl(""AppModuleDataControl"");
        ViewObjectImpl guiUsersView1 = am.getGuiUsersView1();
        guiUsersView1.setWhereClause(""loginname = '"" + this.getUsernameOrEmail() + ""' OR email='"" +
                                     this.getUsernameOrEmail() + ""'"");
        guiUsersView1.executeQuery();

        if (guiUsersView1.getFetchedRowCount() > 0) {
            Row result = guiUsersView1.first();
            String email = (String)result.getAttribute(""Email"");
            RichPopup popup = (RichPopup)JSFUtils.findComponentInRoot(""passWindow"");
            if (email != null) {
                CallableStatement stmt = null;
                try {
                    CurrentLanguageMessage.callSendEmailProcedure(result, stmt, null);
                    BuildixxUtils.addInfoMessage(JSFUtils.resolveExpressionAsString(""#{res.usr_manager_cred_sent_success}""),
                                                 "" "");
                    if (null != popup) {
                        popup.hide();
                    }
                } catch (SQLException e) {
                    log.error(e.getMessage(), e);
                }
            } else {
                BuildixxUtils.addErrorMessage(JSFUtils.resolveExpressionAsString(""#{res.user_no_email_msg}""), "" "");
            }
        } else {
            RichOutputText errorMessage = (RichOutputText)JSFUtils.findComponentInRoot(""invalidData"");
            if (null != errorMessage) {
                errorMessage.setVisible(true);
            }
        }
    }

    public static CallableStatement callSendEmailProcedure(Row currentGuiUser,
                                                            CallableStatement scStatement, String userName) throws java.sql.SQLException {
        String stmt = ""BEGIN SEND_HTML_MAIL(?,?,?,?,?); END;"";
        AppModuleImpl am = (AppModuleImpl)ADFUtils.getApplicationModuleForDataControl(""AppModuleDataControl"");
        scStatement = am.getDBTransaction().createCallableStatement(stmt, am.getDBTransaction().DEFAULT);
        
        String receiver = (String)currentGuiUser.getAttribute(""Email"");
        String lang = (String)currentGuiUser.getAttribute(""Language"");
        String sendCredentialsSubject = """";
        switch (lang.charAt(0)) {
        case 'E':
            sendCredentialsSubject = ""Your credentials"";
            break;
        case 'F':
            sendCredentialsSubject = ""Vos donn"" + ""\u00e9"" + ""es de connexion"";
            break;
        case 'D':
            sendCredentialsSubject = ""Uw connectiegegevens"";
            break;
        default :
            sendCredentialsSubject = ""Your credentials"";
            break;
        }
        String message = getEmailMessage(currentGuiUser, userName);
        scStatement.setString(1, TRAXXEO_EMAIL);
        scStatement.setString(2, receiver);
        scStatement.setNull(3, Types.VARCHAR);
        scStatement.setString(4, sendCredentialsSubject);
        scStatement.setString(5, message);
        scStatement.execute();

        log.debug(""Sending email to : "" + receiver);


        return scStatement;
    }
}"
6BBwNdYc,jasperlow@mozat.com,jasperlow,HTML,Monday 16th of October 2023 01:53:26 AM CDT,"Jasper Low
"
tdYHbrXP,[pre-commit] Remove JFormDesigner,tetratheta,Bash,Monday 16th of October 2023 01:53:18 AM CDT,"#!/bin/bash
#set -x # This is like '@echo on'
for FILE in $(git diff --cached --name-only --diff-filter=ACM); do
  if [[ $FILE == *.java ]]; then
    echo Removing comment from ${FILE}
    sed -i '/^[[:space:]]*\/\/ Generated using JFormDesigner/d' ""$FILE""
    git add ""$FILE""
  fi
done
"
GG0GnkjG,Roles System,Sungmingamerpro13,CSS,Monday 16th of October 2023 01:46:51 AM CDT,"local RolesEvent = game.ReplicatedStorage.RolesEvent

RolesEvent.NormalKid.OnServerEvent:Connect(function(player)
	player:WaitForChild(""Role"").Value = ""Normal Kid""
	player.Character.Humanoid.MaxHealth = 100
	player.Character.Humanoid.BodyDepthScale.Value = 0.7
	player.Character.Humanoid.BodyHeightScale.Value = 0.7
	player.Character.Humanoid.BodyWidthScale.Value = 0.6
	if (player) and (player.Backpack) then
		for _, Item in pairs(player.Backpack:GetChildren()) do
			if Item:IsA(""Tool"") then
				Item:Destroy()
			end
		end
	end
end)

RolesEvent.Protector.OnServerEvent:Connect(function(player)
	player:WaitForChild(""Role"").Value = ""Protector 1""
	player.Character.Humanoid.MaxHealth = 100
	player.Character.Humanoid.BodyDepthScale.Value = 1
	player.Character.Humanoid.BodyHeightScale.Value = 1
	player.Character.Humanoid.BodyWidthScale.Value = 1
	local Bat = game.ServerStorage.SavedTools.Bat
	if (player) and (player.Backpack) then
		for _, Item in pairs(player.Backpack:GetChildren()) do
			if Item:IsA(""Tool"") then
				Item:Destroy()
			end
		end
	end
	Bat:Clone().Parent = player.Backpack
end)

RolesEvent.Medic.OnServerEvent:Connect(function(player)
	player:WaitForChild(""Role"").Value = ""Medic""
	player.Character.Humanoid.MaxHealth = 100
	player.Character.Humanoid.BodyDepthScale.Value = 1
	player.Character.Humanoid.BodyHeightScale.Value = 1
	player.Character.Humanoid.BodyWidthScale.Value = 1
	local Medkit = game.ServerStorage.SavedTools.Medkit
	if (player) and (player.Backpack) then
		for _, Item in pairs(player.Backpack:GetChildren()) do
			if Item:IsA(""Tool"") then
				Item:Destroy()
			end
		end
	end
	Medkit:Clone().Parent = player.Backpack
end)

RolesEvent.Flashlight_Protector.OnServerEvent:Connect(function(player)
	player:WaitForChild(""Role"").Value = ""Protector 2""
	player.Character.Humanoid.MaxHealth = 100
	player.Character.Humanoid.BodyDepthScale.Value = 1
	player.Character.Humanoid.BodyHeightScale.Value = 1
	player.Character.Humanoid.BodyWidthScale.Value = 1
	local Flashlight = game.ServerStorage.SavedTools.Flashlight
	local Bat = game.ServerStorage.SavedTools.Bat
	if (player) and (player.Backpack) then
		for _, Item in pairs(player.Backpack:GetChildren()) do
			if Item:IsA(""Tool"") then
				Item:Destroy()
			end
		end
	end
	Bat:Clone().Parent = player.Backpack
	Flashlight:Clone().Parent = player.Backpack
end)

RolesEvent.IceCreamBoy.OnServerEvent:Connect(function(player)
	player:WaitForChild(""Role"").Value = ""IceCreamBoy""
	player.Character.Humanoid.MaxHealth = 100
	player.Character.Humanoid.BodyDepthScale.Value = 1
	player.Character.Humanoid.BodyHeightScale.Value = 1
	player.Character.Humanoid.BodyWidthScale.Value = 1
	local IceCream = game.ServerStorage.SavedTools:FindFirstChild(""Ice Cream"")
	if (player) and (player.Backpack) then
		for _, Item in pairs(player.Backpack:GetChildren()) do
			if Item:IsA(""Tool"") then
				Item:Destroy()
			end
		end
	end
	IceCream:Clone().Parent = player.Backpack
end)

RolesEvent.Fighter.OnServerEvent:Connect(function(player)
	player:WaitForChild(""Role"").Value = ""Fighter""
	player.Character.Humanoid.MaxHealth = 100
	player.Character.Humanoid.BodyDepthScale.Value = 0.7
	player.Character.Humanoid.BodyHeightScale.Value = 0.7
	player.Character.Humanoid.BodyWidthScale.Value = 0.6
	local WoodenSword = game.ServerStorage.SavedTools.WoodenSword
	if (player) and (player.Backpack) then
		for _, Item in pairs(player.Backpack:GetChildren()) do
			if Item:IsA(""Tool"") then
				Item:Destroy()
			end
		end
	end
	WoodenSword:Clone().Parent = player.Backpack
end)

RolesEvent.Super_Protector.OnServerEvent:Connect(function(player)
	player:WaitForChild(""Role"").Value = ""Protector 3""
	if player.Role.Value == ""Protector 3"" then
		player.Character.Humanoid.MaxHealth = 100
		player.Character.Humanoid.BodyDepthScale.Value = 1
		player.Character.Humanoid.BodyHeightScale.Value = 1
		player.Character.Humanoid.BodyWidthScale.Value = 1
		local Medkit = game.ServerStorage.SavedTools.Medkit
		local Bat = game.ServerStorage.SavedTools.Bat
		if (player) and (player.Backpack) then
			for _, Item in pairs(player.Backpack:GetChildren()) do
				if Item:IsA(""Tool"") then
					Item:Destroy()
				end
			end
		end
		Bat:Clone().Parent = player.Backpack
		Medkit:Clone().Parent = player.Backpack
	end
	player:WaitForChild(""Role"").Value = ""PREMIUM""
	if player.Role.Value == ""PREMIUM"" then
		player.Character.Humanoid.MaxHealth = 100
		player.Character.Humanoid.BodyDepthScale.Value = 1
		player.Character.Humanoid.BodyHeightScale.Value = 1
		player.Character.Humanoid.BodyWidthScale.Value = 1
		local Medkit = game.ServerStorage.SavedTools.Medkit
		local Bat = game.ServerStorage.SavedTools.Bat
		if (player) and (player.Backpack) then
			for _, Item in pairs(player.Backpack:GetChildren()) do
				if Item:IsA(""Tool"") then
					Item:Destroy()
				end
			end
		end
		Bat:Clone().Parent = player.Backpack
		Medkit:Clone().Parent = player.Backpack
	end
end)
"
LmC5KtbQ,controlroom,azhdev,Lua,Monday 16th of October 2023 01:45:38 AM CDT,"os.loadAPI(""button"")
local mon = peripheral.find(""monitor"")
local control1 = peripheral.wrap(""redstoneIntegrator_2"")
local control2 = peripheral.wrap(""redstoneIntegrator_3"")
mon.clear()

--[[
control1 north = farm
control1 east = gold gen
control1 south = quartz gen
control1 west = sand prio
control2 north = small create room
control2 east  = nugget smasher
]]--
 
function fillTable()
    button.setTable(""Farm"", farm, """", 10, 20, 3, 5)
    button.setTable(""Gold gen"", goldGen, """", 22, 32, 3, 5)
    button.setTable(""Quartz gen"", quartzGen, """", 10, 20, 8, 10)
    button.setTable(""Sand prio"", sandPrio, """", 22, 32, 8, 10)
    button.setTable(""Room"", room, """", 10, 20, 13, 15)
    button.setTable(""Nugget"", nuggetS, """", 22, 32, 13, 15)
    button.screen()
end
 
function getClick()
    event, side, x, y = os.pullEvent(""monitor_touch"")
    button.checkxy(x,y)
end
 
function farm()
    if button.toggleButton(""Farm"") then
		control1.setAnalogOutput(""north"", 15)
	else
		control1.setAnalogOutput(""north"", 0)
	end
	
    print(""Farm"")
end
 
function goldGen()
    if button.toggleButton(""Gold gen"") then
		control1.setAnalogOutput(""east"", 15)
	else
		control1.setAnalogOutput(""east"", 0)
	end
    print(""Gold gen"")
end
 
function quartzGen()
    if button.toggleButton(""Quartz gen"") then
		control1.setAnalogOutput(""south"", 15)
	else
		control1.setAnalogOutput(""south"", 0)
	end
    print(""Quartz gen"")
end
 
function sandPrio()
    if button.toggleButton(""Sand prio"") then
		control1.setAnalogOutput(""west"", 15)
	else
		control1.setAnalogOutput(""west"", 0)
	end
    print(""Sand prio"")
end
 
function room()
    if button.toggleButton(""Room"") then
		control2.setAnalogOutput(""north"", 15)
	else
		control2.setAnalogOutput(""north"", 0)
	end
    print(""room"")
end
 
function nuggetS()
    if button.toggleButton(""Nugget"") then
		control2.setAnalogOutput(""east"", 15)
	else
		control2.setAnalogOutput(""east"", 0)
	end
    print(""nugget"")
end
 
fillTable()
button.heading(""Create Control Room!"")
--button.label(1,5,""CCR"")
while true do
    getClick()
end"
9Ad8mEnt,My Break In STORY Leaderboard Main,Sungmingamerpro13,CSS,Monday 16th of October 2023 12:55:49 AM CDT,"local TeleportService = game:GetService(""TeleportService"")
local SaveCurrency = game:GetService(""DataStoreService""):GetDataStore(""Rounds"")
local SaveCurrency2 = game:GetService(""DataStoreService""):GetDataStore(""Wins"")
local SaveCurrency3 = game:GetService(""DataStoreService""):GetDataStore(""Coins"")
local SaveExtraLives = game:GetService(""DataStoreService""):GetDataStore(""Lives"")

local VIPGamepassId = ""265392817""

game.Players.PlayerAdded:Connect(function(player)
	if game.ReplicatedStorage.Tags.Leaderstats.Value == true then
		local Folder = Instance.new(""Folder"",player)
		Folder.Name = ""leaderstats""

		local Currency = Instance.new(""NumberValue"",Folder)
		Currency.Name = game.ReplicatedStorage.Tags.RoundsValue.Value
		Currency.Value = SaveCurrency:GetAsync(player.UserId) or 0

		local Currency2 = Instance.new(""NumberValue"",Folder)
		Currency2.Name = game.ReplicatedStorage.Tags.WinsValue.Value
		Currency2.Value = SaveCurrency2:GetAsync(player.UserId) or 0

		local previousData = SaveCurrency3:GetAsync(player.UserId) 
		local Coins

		if previousData ~= nil then
			Coins = previousData
		else
			Coins = 0
			SaveCurrency3:SetAsync(player.UserId, 0)
		end

		local CoinsValue = Instance.new(""NumberValue"", player)
		CoinsValue.Name = ""Coins""
		CoinsValue.Value = Coins

		local val1 = Instance.new(""StringValue"",player)
		val1.Name = 'GotPet'
		val1.Value = ''

		local val2 = Instance.new(""StringValue"",player)
		val2.Name = 'OpenValue'
		val2.Value = ''

		local previousData2 = SaveExtraLives:GetAsync(player.UserId)
		local Lives

		if previousData2 ~= nil then
			Lives = previousData2
		else
			Lives = 0
			SaveExtraLives:SetAsync(player.UserId, 0)
		end

		local ExtraLivesValue = Instance.new(""NumberValue"", player)
		ExtraLivesValue.Name = ""Lives""
		ExtraLivesValue.Value = Lives

		local Role = Instance.new(""StringValue"", player)
		Role.Parent = player
		Role.Name = ""Role""
		Role.Value = """"
		
		if player.Role.Value >= ""Normal Kid"" then
			player.Character.Humanoid.MaxHealth = 100
			player.Character.Humanoid.BodyDepthScale.Value = 0.7
			player.Character.Humanoid.BodyHeightScale.Value = 0.7
			player.Character.Humanoid.BodyWidthScale.Value = 0.6
		end
		if player.Role.Value == ""Protector 1"" then
			player.Character.Humanoid.MaxHealth = 100
			player.Character.Humanoid.BodyDepthScale.Value = 1
			player.Character.Humanoid.BodyHeightScale.Value = 1
			player.Character.Humanoid.BodyWidthScale.Value = 1
		end
		if player.Role.Value == ""Medic"" then
			player.Character.Humanoid.MaxHealth = 100
			player.Character.Humanoid.BodyDepthScale.Value = 1
			player.Character.Humanoid.BodyHeightScale.Value = 1
			player.Character.Humanoid.BodyWidthScale.Value = 1
		end
		if player.Role.Value == ""Protector 2"" then
			player.Character.Humanoid.MaxHealth = 100
			player.Character.Humanoid.BodyDepthScale.Value = 1
			player.Character.Humanoid.BodyHeightScale.Value = 1
			player.Character.Humanoid.BodyWidthScale.Value = 1
		end
		if player.Role.Value == ""Protector 3"" then
			player.Character.Humanoid.MaxHealth = 100
			player.Character.Humanoid.BodyDepthScale.Value = 1
			player.Character.Humanoid.BodyHeightScale.Value = 1
			player.Character.Humanoid.BodyWidthScale.Value = 1
		end
		if player.Role.Value == ""IceCreamBoy"" then
			player.Character.Humanoid.MaxHealth = 100
			player.Character.Humanoid.BodyDepthScale.Value = 1
			player.Character.Humanoid.BodyHeightScale.Value = 1
			player.Character.Humanoid.BodyWidthScale.Value = 1
		end
		if player.Role.Value == ""Fighter"" then
			player.Character.Humanoid.MaxHealth = 100
			player.Character.Humanoid.BodyDepthScale.Value = 0.7
			player.Character.Humanoid.BodyHeightScale.Value = 0.7
			player.Character.Humanoid.BodyWidthScale.Value = 0.6
		end
		if player.Role.Value == ""PREMIUM"" then
			player.Character.Humanoid.MaxHealth = 100
			player.Character.Humanoid.BodyDepthScale.Value = 1
			player.Character.Humanoid.BodyHeightScale.Value = 1
			player.Character.Humanoid.BodyWidthScale.Value = 1
		end


		if game:GetService(""MarketplaceService""):UserOwnsGamePassAsync(player.UserId, VIPGamepassId) then
			player.Coins.Value = player.Coins.Value * 2
		end

		player.Lives.Value = 5
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	if game.ReplicatedStorage.Tags.Leaderstats.Value == true then	
		SaveCurrency:SetAsync(player.UserId,player.leaderstats[game.ReplicatedStorage.Tags.RoundsValue.Value].Value)
		SaveCurrency2:SetAsync(player.UserId,player.leaderstats[game.ReplicatedStorage.Tags.WinsValue.Value].Value)
	end
end)

game:BindToClose(function()
	print(""STOPPED!"")

	for i,player in pairs(game.Players:GetPlayers()) do
		local value = player.Coins.Value
		SaveCurrency3:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	local value = player.Coins.Value

	if value ~= nil then
		print(""Found data to save for ""..player.Name..""!"")
		SaveCurrency3:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	else
		print(""Did not manage to find data to save for ""..player.Name..""!"")
	end
end)

game:BindToClose(function()
	print(""STOPPED!"")

	for i, player in pairs(game.Players:GetPlayers()) do
		local value2 = player.Lives.Value
		SaveExtraLives:SetAsync(player.UserId, value2)
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	local value2 = player.Lives.Value

	if value2 ~= nil then
		print(""Found data to save for ""..player.Name..""!"")
		SaveExtraLives:SetAsync(player.UserId, value2)
		print(""Saved data for ""..player.Name)
	else
		print(""Did not manage to find data to save for ""..player.Name..""!"")
	end
end)

game.Players.PlayerAdded:connect(function(player)
	player.CharacterAdded:connect(function(char)

		char.Humanoid.Died:connect(function()
			SaveCurrency:SetAsync(player.UserId, player.leaderstats.Rounds.Value)
			SaveExtraLives:SetAsync(player.UserId, player.Lives.Value)
			player.leaderstats.Rounds.Value = player.leaderstats.Rounds.Value + 1
			player.Lives.Value = player.Lives.Value - 1
		end)
	end)
end)
"
xhZ749YF,My Break In STORY Leaderstats Lobby,Sungmingamerpro13,CSS,Monday 16th of October 2023 12:54:45 AM CDT,"local TeleportService = game:GetService(""TeleportService"")
local SaveCurrency = game:GetService(""DataStoreService""):GetDataStore(""Rounds"")
local SaveCurrency2 = game:GetService(""DataStoreService""):GetDataStore(""Wins"")
local SaveCurrency3 = game:GetService(""DataStoreService""):GetDataStore(""Coins"")
local SaveExtraLives = game:GetService(""DataStoreService""):GetDataStore(""Lives"")

local VIPGamepassId = ""265392817""

game.Players.PlayerAdded:Connect(function(player)
	if game.ReplicatedStorage.Tags.Leaderstats.Value == true then
		local Folder = Instance.new(""Folder"",player)
		Folder.Name = ""leaderstats""

		local Currency = Instance.new(""NumberValue"",Folder)
		Currency.Name = game.ReplicatedStorage.Tags.RoundsValue.Value
		Currency.Value = SaveCurrency:GetAsync(player.UserId) or 0

		local Currency2 = Instance.new(""NumberValue"",Folder)
		Currency2.Name = game.ReplicatedStorage.Tags.WinsValue.Value
		Currency2.Value = SaveCurrency2:GetAsync(player.UserId) or 0

		local previousData = SaveCurrency3:GetAsync(player.UserId) 
		local Coins

		if previousData ~= nil then
			Coins = previousData
		else
			Coins = 0
			SaveCurrency3:SetAsync(player.UserId, 0)
		end

		local CoinsValue = Instance.new(""NumberValue"", player)
		CoinsValue.Name = ""Coins""
		CoinsValue.Value = Coins

		local val1 = Instance.new(""StringValue"",player)
		val1.Name = 'GotPet'
		val1.Value = ''

		local val2 = Instance.new(""StringValue"",player)
		val2.Name = 'OpenValue'
		val2.Value = ''

		local previousData2 = SaveExtraLives:GetAsync(player.UserId)
		local Lives

		if previousData2 ~= nil then
			Lives = previousData2
		else
			Lives = 0
			SaveExtraLives:SetAsync(player.UserId, 0)
		end

		local ExtraLivesValue = Instance.new(""NumberValue"", player)
		ExtraLivesValue.Name = ""Lives""
		ExtraLivesValue.Value = Lives

		local Role = Instance.new(""StringValue"", player)
		Role.Parent = player
		Role.Name = ""Role""
		Role.Value = """"

		if game:GetService(""MarketplaceService""):UserOwnsGamePassAsync(player.UserId, VIPGamepassId) then
			player.Coins.Value = player.Coins.Value * 2
		end

		player.Lives.Value = 5
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	if game.ReplicatedStorage.Tags.Leaderstats.Value == true then	
		SaveCurrency:SetAsync(player.UserId,player.leaderstats[game.ReplicatedStorage.Tags.RoundsValue.Value].Value)
		SaveCurrency2:SetAsync(player.UserId,player.leaderstats[game.ReplicatedStorage.Tags.WinsValue.Value].Value)
	end
end)

game:BindToClose(function()
	print(""STOPPED!"")

	for i,player in pairs(game.Players:GetPlayers()) do
		local value = player.Coins.Value
		SaveCurrency3:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	local value = player.Coins.Value

	if value ~= nil then
		print(""Found data to save for ""..player.Name..""!"")
		SaveCurrency3:SetAsync(player.UserId, value)
		print(""Saved data for ""..player.Name)
	else
		print(""Did not manage to find data to save for ""..player.Name..""!"")
	end
end)

game:BindToClose(function()
	print(""STOPPED!"")

	for i, player in pairs(game.Players:GetPlayers()) do
		local value2 = player.Lives.Value
		SaveExtraLives:SetAsync(player.UserId, value2)
	end
end)

game.Players.PlayerRemoving:Connect(function(player)
	local value2 = player.Lives.Value

	if value2 ~= nil then
		print(""Found data to save for ""..player.Name..""!"")
		SaveExtraLives:SetAsync(player.UserId, value2)
		print(""Saved data for ""..player.Name)
	else
		print(""Did not manage to find data to save for ""..player.Name..""!"")
	end
end)

local teleportData = TeleportService:GetLocalPlayerTeleportData()

if teleportData then
	local Player = game.Players:GetPlayerByUserId(teleportData.PlayerName)
	Player.leaderstats.Wins.Value = Player.leaderstats.Wins.Value + 1
end

"
9F6xnNn2,tiktok_downloader.sh,Ivam3,Bash,Monday 16th of October 2023 12:45:50 AM CDT,"#!/usr/bin/bash
#THIS SCRIPT DOWNWLOAD A SOCIAL MEDIA TIKTOK VIDEO
#WITHOUT WATER MARK

while [ $# -eq 0 ]; do
  echo ""USAGE: $0 <tiktok url link>""
  exit 1
done

file=$(mktemp)
url_SITE=""https://ssstik.io/abc?url=dl"" 
url_Video=""$1""
end_Dork=""&locale=en&tt=OHp3azhn""
video_name=$(echo ""$url_Video""|awk -F ""/"" '{print $4}'|tr -d ""@"")
#
# ENCODING URL 
url_encoded=$(printf ""%s"" ""$url_Video"" | jq -s -R -r @uri)

echo ""Getting Video ...""
$(command -v curl) -sL ""$url_SITE"" --data ""id=$url_encoded$end_Dork"" -o $file

echo ""Getting link to download ...""
url_Down=$(grep ""href=\""https://tikcdn.io/ssstik/"" $file|head -n1|awk -F ""\"""" '{print $2}')

echo ""Downloading ...""
wget --tries=5 ""$url_Down"" -O ${HOME}/$video_name.mp4

[[ -e ${HOME}/$video_name.mp4 ]] && { echo ""Saved in:${HOME}/$video_name.mp4"";}

rm $file 2>/dev/null && exit 0

####  For help join to https://t.me/ivam3_bot
"
8LFYfYtL,217. Contains Duplicate,micahbales,JavaScript,Monday 16th of October 2023 12:03:52 AM CDT,"/**
* Problem statement:
*
* This solution has a time complexity of O(n), and a space complexity of O(n).
*/

/**
 * @param {number[]} nums
 * @return {boolean}
 */
var containsDuplicate = function(nums) {
    const dict = {};
    for (i = 0; i < nums.length; i++) {
        const isDuplicate = dict[nums[i]];
        if (isDuplicate) {
            return true;
        } else {
            dict[nums[i]] = true;
        }
    }
    return false;
};"
BjLJ2fNv,"Mean, Median and Mode",King_Kuro,C,Sunday 15th of October 2023 11:57:24 PM CDT,"// Online C compiler to run C program online
#include <stdio.h>

int main() {
    //mean, mode and median algorithm
    
    //get dataset size
    int sizeOfData = NULL;
    printf(""ENTER SIZE OF DATASET: "");
    scanf(""%d"", &sizeOfData);
    
    int dataSet[sizeOfData];
    
    //get dataset elements
    for (int i = 0; i < sizeOfData; i++) {
        printf(""ENTER ELEMENT (%d) : "", (i+1));
        scanf(""%d"", &dataSet[i]);
    }
    
    //print dataset
    printf(""DATASET: "");
    for (int i = 0; i < sizeOfData; i++) {
        printf(""%d "", dataSet[i]);
    }
    
    int temp = NULL;
    int swapped = NULL;
    //sort the dataset
    for (int i = 0; i < sizeOfData - 1; i++) {
        swapped = 0; // A flag to check if any swaps were made in this pass

        for (int j = 0; j < sizeOfData - i - 1; j++) {
            if (dataSet[j] > dataSet[j + 1]) {
                // Swap the elements because they are in the wrong order
                temp = dataSet[j];
                dataSet[j] = dataSet[j + 1];
                dataSet[j + 1] = temp;
                swapped = 1;
            }
        }

        // If no swaps were made in this pass, the array is already sorted
        if (swapped == 0) {
            break;
        }
    }
    
    printf(""\n"");
    printf(""DATASET SORTED: "");
    for (int i = 0; i < sizeOfData; i++) {
        printf(""%d "", dataSet[i]);
    }
    
    printf(""\n"");
    mean(sizeOfData, dataSet);
    printf(""\n"");
    mode(sizeOfData, dataSet);
    printf(""\n"");
    median(sizeOfData, dataSet);
}

int mean(int sizeOfData, int dataSet[sizeOfData]) {
    int meanOfData = NULL;
    for (int i = 0; i < sizeOfData; i++) {
        meanOfData += dataSet[i];
    }
    printf(""MEAN: %d"", meanOfData);
}

int mode(int sizeOfData, int dataSet[sizeOfData]) {
    int mode = dataSet[0];
    int maxCount = 0;
    for (int i = 0; i < sizeOfData; i++) {
        int currentNumber = dataSet[i];
        int currentCount = 1;

        for (int j = i + 1; j < sizeOfData; j++) {
            if (dataSet[j] == currentNumber) {
                currentCount++;
            }
        }

        if (currentCount > maxCount) {
            maxCount = currentCount;
            mode = currentNumber;
        }
    }
    printf(""Mode: %d"", mode);
}

int median(int sizeOfData, int dataSet[sizeOfData]) {
    int median = 0;
    if (sizeOfData % 2 == 0) {
        int middleElement = sizeOfData / 2;
        median = dataSet[middleElement-1] + dataSet[middleElement];
    }
    else {
        median = dataSet[sizeOfData/2];
    }
    printf(""Median: %d"", median);
}"
jqTc9PHG,876. Middle of the Linked List,micahbales,JavaScript,Sunday 15th of October 2023 11:54:45 PM CDT,"/**
* Problem statement: https://leetcode.com/problems/middle-of-the-linked-list/
*
* My solution uses the length-counting technique. It has a time complexity of O(n) and space complexity of O(1)
*
* I have also included a very elegant two-pointer algorithm as an alternative solution that is probably
* more efficient. (See commented code at end of file.)
*
* My takeaway from this exercise is that I should always consider the two-pointer pattern whenever 
* dealing with linked list problems. Nevertheless, I a pretty satisfied with the solution I did come up with.
*/

function getListLength(head) {
    let count = 0;
    let currentNode = head;
    while (currentNode.next) {
        currentNode = currentNode.next;
        count++;
    }
    return count;
}

function retrieveNode(head, n) {
    let depth = 0;
    let currentNode = head;
    while (depth < n) {
        currentNode = currentNode.next;
        depth++;
    }
    return currentNode;
}

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var middleNode = function(head) {
    const listLength = getListLength(head);

    const middleNodeDepth = Math.ceil(listLength / 2);

    return retrieveNode(head, middleNodeDepth);
};

// /**
//  * Definition for singly-linked list.
//  * function ListNode(val, next) {
//  *     this.val = (val===undefined ? 0 : val)
//  *     this.next = (next===undefined ? null : next)
//  * }
//  */
// /**
//  * @param {ListNode} head
//  * @return {ListNode}
//  */
// var middleNode = function(head) {
//     let once = head;
//     let twice = head;

//     while(twice?.next) {
//         once = once.next;
//         twice = twice.next.next;
//     }
//     return once;
// };"
KrpUHRSQ,Reinas_PMX.py,andreerival,Python,Sunday 15th of October 2023 11:44:41 PM CDT,"import random
import matplotlib.pyplot as plt

def plot_queens(board):
    n = len(board)

    # Crear un tablero de ajedrez con casillas blancas y negras
    chessboard = [[(i + j) % 2 for i in range(n)] for j in range(n)]

    fig, ax = plt.subplots()
    ax.matshow(chessboard, cmap='binary')

    # Colocar las reinas en el tablero
    for i in range(n):
        ax.text(board[i] - 1, i, '♛', ha='center', va='center', color='brown', fontsize=14)

    plt.axis('off')
    plt.show()

def pmx_crossover(parent1, parent2):
    size = len(parent1)
    start, end = sorted([random.randint(0, size-1), random.randint(0, size-1)])
    offspring = [-1] * size
    offspring[start:end] = parent1[start:end]

    for i in range(size):
        if i < start or i >= end:
            j = i
            while offspring[j] != -1:
                j = parent2.index(parent1[j])
            offspring[j] = parent2[i]

    return offspring

def count_queen_collisions(board):
    n = len(board)
    collisions = 0

    for i in range(n):
        for j in range(i + 1, n):
            if board[i] == board[j] or abs(board[i] - board[j]) == abs(i - j):
                collisions += 1

    return collisions

def mutate_queens(board):
    n = len(board)
    new_board = list(board)
    random.shuffle(new_board)  # Se reorganizan aleatoriamente las posiciones de las reinas
    return new_board

def roulette_selection(population, fitnesses):
    total_fitness = sum(fitnesses)
    r = random.uniform(0, total_fitness)
    acc = 0
    for i, fitness in enumerate(fitnesses):
        acc += fitness
        if acc >= r:
            return population[i]

def generate_child_without_collisions(population, num_attempts=100, num_generations=100):
    best_child = None
    best_collisions = float('inf')

    for generation in range(num_generations):
        new_population = []
        fitnesses = [1 / (1 + count_queen_collisions(individual)) for individual in population]  # Fitness es inversamente proporcional a las colisiones

        for attempt in range(num_attempts):
            parent1 = roulette_selection(population, fitnesses)
            parent2 = roulette_selection(population, fitnesses)

            # Asegurarse de que los dos padres seleccionados sean diferentes
            while parent1 == parent2:
                parent2 = roulette_selection(population, fitnesses)

            child = pmx_crossover(parent1, parent2)
            collisions = count_queen_collisions(child)

            if collisions == 0:  # Si no hay colisiones, el hijo es óptimo
                print(f""Generación {generation + 1}, intento {attempt + 1}:"")
                print(""Padre 1:"", parent1)
                print(""Padre 2:"", parent2)
                print(""Hijo óptimo:"", child)
                return child, collisions

            # Intentar mutar el hijo para reducir colisiones
            mutated_child = mutate_queens(child)
            mutated_collisions = count_queen_collisions(mutated_child)

            if mutated_collisions < best_collisions:
                best_child = mutated_child
                best_collisions = mutated_collisions

                print(f""Generación {generation + 1}, intento {attempt + 1}:"")
                print(""Padre 1:"", parent1)
                print(""Padre 2:"", parent2)
                print(""Hijo mutado:"", mutated_child)
                print(""Colisiones:"", mutated_collisions)

            new_population.append(mutated_child)

        if best_collisions == 0:  # Si no hay colisiones, el mejor hijo es óptimo
            return best_child, best_collisions

        population = new_population  # Reemplazar la población antigua con la nueva

    return best_child, best_collisions

population = [[random.randint(1, 8) for _ in range(8)] for _ in range(100)]  # Población inicial de 100 individuos con posiciones de reinas aleatorias
best_child, best_collisions = generate_child_without_collisions(population)
print(""Número de colisiones entre reinas en el mejor descendiente:"", best_collisions)
print(""Descendiente con el menor número de colisiones:"", best_child)
plot_queens(best_child)"
K45z145j,mpdlog,iconoclasthero,Bash,Sunday 15th of October 2023 11:40:41 PM CDT,"$ cat mpdlog
#!/usr/bin/env python3
from __future__ import unicode_literals, print_function
from tinytag import TinyTag				 #https://pypi.org/project/tinytag/
from prompt_toolkit import print_formatted_text as print #https://python-prompt-toolkit.readthedocs.io/en/master/pages/printing_text.html
from prompt_toolkit import HTML
import string
import subprocess
import io
import os.path
from os import path
import pathlib

codecs = ('.mp3','.oga','.ogg','.opus','.wav','.flac','.wma','.m4b','.m4a','.mp4')
musicpath = '/library/music/'
logpath = '/var/log/mpd/mpd.log'
proc = subprocess.Popen(['tail', '-40', logpath], stdout=subprocess.PIPE)
songcount=1
for line in io.TextIOWrapper(proc.stdout, encoding=""utf-8""):
#   if ""played"" or ""scanned"" or ""skipped"" or ""removed"" in line:					#ignores all log lines that contain information other than about played and scanned songs
   if ""played"" in line or ""scanned"" in line or ""skipped"" in line or ""removed"" in line:		#ignores all log lines that contain information other than about played and scanned songs
         time = line[0:7]+'@ '+line[7:12]
         if ""played"" in line:
            line2 = line[31:-2]
         elif ""skipped & removed"" in line:
            line2 = line[56:-2]
         elif ""removed"" in line:
            line2 = line[42:-2]
         elif ""scanned"" in line:
            line2 = line[32:-2]
         elif ""skipped"" in line:
            line2 = line[32:-2]
         line2 = musicpath+line2
         if os.path.exists(line2) and line2.endswith(codecs):
           tag = TinyTag.get(line2)
           if tag.title:
              title = tag.title						#variable isn't used anywhere
              if tag.artist:
                 artist = tag.artist					#variable isn't used anywhere
                 if tag.album:
                    album = tag.album					#variable isn't used anywhere
                    if tag.year:
                       year = tag.year[0:4]				#variable isn't used anywhere
                       if ""played"" in line:
                          print(HTML(str(songcount).zfill(2)+':  Played <b>\""%s\""</b> by <b>%s</b> from <i>%s</i> (%s) on '+time) % (tag.title, tag.artist, tag.album, tag.year[0:4]))
                       elif ""skipped & removed"" in line:
                          print(HTML(str(songcount).zfill(2)+':  Skipped and removed from playlist <b>\""%s\""</b> by <b>%s</b> from <i>%s</i> (%s) on '+time) % (tag.title, tag.artist, tag.album, tag.year[0:4]))
                       elif ""removed"" in line:
                          print(HTML(str(songcount).zfill(2)+':  Scanned and removed from playlist <b>\""%s\""</b> by <b>%s</b> from <i>%s</i> (%s) on '+time) % (tag.title, tag.artist, tag.album, tag.year[0:4]))
                       elif ""scanned"" in line:
                          print(HTML(str(songcount).zfill(2)+':  Scanned <b>\""%s\""</b> by <b>%s</b> from <i>%s</i> (%s) on '+time) % (tag.title, tag.artist, tag.album, tag.year[0:4]))
                       elif ""skipped"" in line:
                          print(HTML(str(songcount).zfill(2)+':  Skipped <b>\""%s\""</b> by <b>%s</b> from <i>%s</i> (%s) on '+time) % (tag.title, tag.artist, tag.album, tag.year[0:4]))
                    else:  print(HTML(str(songcount).zfill(2)+':  <b>Error!</b>  Missing album year:  '+line2))
                 else:  print(HTML(str(songcount).zfill(2)+':  <b>Error!</b>  Missing album title:  '+line2))
              else:  print(HTML(str(songcount).zfill(2)+':  <b>Error!</b>  Missing artist:  '+line2))
           else:  print(HTML(str(songcount).zfill(2)+':  <b>Error!</b>  Missing song title:  '+line2))
         else:  print(HTML(str(songcount).zfill(2)+':  <b>Error!</b>  Missing file or unsupported format:  '+line2))
         print()
         songcount=songcount + 1
#current = subprocess.Popen(['mpc', 'current', '-f %file%'], stdout=subprocess.PIPE)
current = subprocess.Popen(['mpc', 'current'], stdout=subprocess.PIPE)
output, errors = current.communicate()
current = output.rstrip()
current = current.decode()
current = current.split("" - "", 2)
cartist = current[0]
ctitle = current[1]
print(HTML('Current song: \""<i>%s</i>\"" by <b>%s</b>') % (str(ctitle), str(cartist)))

print()
"
a76GZyxs,543. Diameter of Binary Tree,micahbales,JavaScript,Sunday 15th of October 2023 11:19:46 PM CDT,"/**
* Problem statement: https://leetcode.com/problems/diameter-of-binary-tree/description/
*
* I must admit that I did not solve this problem on my own. I first went and solved Maximum Depth of Binary Tree (https://pastebin.com/vMR4F3yt), knowing that this would be a key part of the solution for this problem.
*
* Turns out, it was very crucial, but the solution that I received from another contributor was more elegant than anything
* that I believe I would have come up with on my own at this stage.
*
* In particular, I don't think that it would have occurred to me to wrap the 'dfs' function within the body of the
* main function, thereby giving access to the 'diameter' variable within the scope of both function bodies.
*
* The crux of this solution is the realization that the longest path in a tree can be determined by, when traversing
* the tree in a depth-first search, taking a note of the total distance between the deepest left and right leaves for
* each node. Whichever node sits at the confluence of the two most-distance leaves will provide the longest path by
* adding together the left and right depths.
* 
* As we were informed in the problem statement, the longest path may run through the root node, but it may not. This
* solution does not depend on checking the root node, but checks every node, all the way up the tree, to see if that
* node is the confluence of the longest path (the two leaves with the deepest summed path between them).
*/

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var diameterOfBinaryTree = function(root) {
    let diameter = 0;

    dfs(root);

    return diameter;
    
    function dfs(node) {
        if (node === null) return 0;
 
        const left = dfs(node.left);
        const right = dfs(node.right);

        diameter = Math.max(diameter, left + right);
    
        return Math.max(left, right) + 1;
    }
};"
hbuesKms,Server-3-tower.log,TrapeNoOne,Bash,Sunday 15th of October 2023 11:06:43 PM CDT,"2023-10-15 16:01:27,536 ERROR    awx.conf.settings Database settings are not available, using defaults.
Traceback (most recent call last):
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/base/base.py"", line 235, in _cursor
    return self._prepare_cursor(self.create_cursor(name))
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/postgresql/base.py"", line 223, in create_cursor
    cursor = self.connection.cursor()
psycopg2.InterfaceError: connection already closed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 81, in _ctit_db_wrapper
    yield
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 446, in __getattr__
    value = self._get_local(name)
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 357, in _get_local
    self._preload_cache()
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 319, in _preload_cache
    for setting in Setting.objects.filter(key__in=settings_to_cache.keys(), user__isnull=True).order_by('pk'):
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/models/query.py"", line 274, in __iter__
    self._fetch_all()
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/models/query.py"", line 1242, in _fetch_all
    self._result_cache = list(self._iterable_class(self))
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/models/query.py"", line 55, in __iter__
    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
"
eyym1QwZ,Server-2-tower-log,TrapeNoOne,Bash,Sunday 15th of October 2023 11:05:34 PM CDT,"2023-10-15 16:01:10,517 ERROR    awx.conf.settings Database settings are not available, using defaults.
Traceback (most recent call last):
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/base/base.py"", line 235, in _cursor
    return self._prepare_cursor(self.create_cursor(name))
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/postgresql/base.py"", line 223, in create_cursor
    cursor = self.connection.cursor()
psycopg2.InterfaceError: connection already closed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 81, in _ctit_db_wrapper
    yield
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 446, in __getattr__
    value = self._get_local(name)
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 357, in _get_local
    self._preload_cache()
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 319, in _preload_cache
    for setting in Setting.objects.filter(key__in=settings_to_cache.keys(), user__isnull=True).order_by('pk'):
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/models/query.py"", line 274, in __iter__
    self._fetch_all()
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/models/query.py"", line 1242, in _fetch_all
    self._result_cache = list(self._iterable_class(self))
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/models/query.py"", line 55, in __iter__
    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
/var/log/tower/tower.log
"
M0J4XxRN,Installing driver rtl8821CU Linux,Rnery,Bash,Sunday 15th of October 2023 11:03:50 PM CDT,"#!/usr/bin/env bash

_check_directory() {
    if [[ -d build ]]; then
        echo ""O diretório /build já existe""
    else
        echo ""Diretório /build criado!""
        mkdir build
    fi
}

_check_git() {
    local url=""https://github.com/brektrou/rtl8821CU.git""
    if wget -q --spider ""$url""; then
        return 0
    else
        return 1
    fi
}

_make_compile() {
    _check_directory
    cd build || exit 1

    if _check_git; then
        git clone ""https://github.com/brektrou/rtl8821CU.git""
        cd rtl8821CU/ || exit 1
        make && sudo make install
    else
        echo ""Falha na operação.""
        exit 1
    fi
}

_check_driver() {
    if ls /lib/modules/""$(uname -r)""/kernel/drivers/net/wireless/realtek/rtl8821cu &> /dev/null; then
        echo ""Instalado com sucesso!""
    else
        echo ""Não instalado!""
    fi
}

_make_compile
_check_driver
"
Hmq2Rinu,Server-1-tower.log,TrapeNoOne,Bash,Sunday 15th of October 2023 11:03:02 PM CDT,"2023-10-15 16:01:15,961 ERROR    awx.conf.settings Database settings are not available, using defaults.
Traceback (most recent call last):
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/base/base.py"", line 217, in ensur
e_connection
    self.connect()
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/base/base.py"", line 195, in conne
ct
    self.connection = self.get_new_connection(conn_params)
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/postgresql/base.py"", line 178, in
 get_new_connection
    connection = Database.connect(**conn_params)
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/psycopg2/__init__.py"", line 126, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
psycopg2.OperationalError: could not connect to server: Connection timed out
        Is the server running on host ""ip-address"" and accepting
        TCP/IP connections on port 5432?


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 81, in _ctit_db_wrapper
    yield
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 446, in __getattr__
    value = self._get_local(name)
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 357, in _get_local
    self._preload_cache()
File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/awx/conf/settings.py"", line 319, in _preload_cache
    for setting in Setting.objects.filter(key__in=settings_to_cache.keys(), user__isnull=True).order_by('pk'):
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/models/query.py"", line 274, in __iter__
    self._fetch_all()
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/models/query.py"", line 1242, in _fetch_all
    self._result_cache = list(self._iterable_class(self))
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/models/query.py"", line 55, in __iter__
    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/models/sql/compiler.py"", line 1140, in execute_sql
    cursor = self.connection.cursor()
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/base/base.py"", line 256, in cursor
    return self._cursor()
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/base/base.py"", line 233, in _cursor
    self.ensure_connection()
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/base/base.py"", line 217, in ensure_connection
    self.connect()
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/utils.py"", line 89, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File ""/var/lib/awx/venv/awx/lib64/python3.6/site-packages/django/db/backends/base/base.py"", line 217, in ensure_connection
:
"
n4rHSDkc,python errror,iconoclasthero,Bash,Sunday 15th of October 2023 10:58:18 PM CDT,"$ ../python dump_keys.py 
Traceback (most recent call last):
  File ""/dev/shm/cache/frida/bin/dumper/dump_keys.py"", line 6, in <module>
    from Helpers.Scanner import Scan
  File ""/dev/shm/cache/frida/bin/dumper/Helpers/Scanner.py"", line 7, in <module>
    from Helpers.wv_proto2_pb2 import SignedLicenseRequest
  File ""/dev/shm/cache/frida/bin/dumper/Helpers/wv_proto2_pb2.py"", line 33, in <module>
    _descriptor.EnumValueDescriptor(
  File ""/dev/shm/cache/frida/lib/python3.11/site-packages/google/protobuf/descriptor.py"", line 796, in __new__
    _message.Message._CheckCalledFromGeneratedFile()
TypeError: Descriptors cannot not be created directly.
If this call came from a _pb2.py file, your generated code is out of date and must be regenerated with protoc >= 3.19.0.
If you cannot immediately regenerate your protos, some other possible workarounds are:
 1. Downgrade the protobuf package to 3.20.x or lower.
 2. Set PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python (but this will use pure-Python parsing and will be much slower).

More information: https://developers.google.com/protocol-buffers/docs/news/2022-05-06#python-updates
"
vMR4F3yt,104. Maximum Depth of Binary Tree,micahbales,JavaScript,Sunday 15th of October 2023 10:47:17 PM CDT,"/**
* Problem statement: https://leetcode.com/problems/maximum-depth-of-binary-tree/
*/

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var maxDepth = function(root) {
    if (root === null) return 0;

    const left = maxDepth(root.left);
    const right = maxDepth(root.right);

    return Math.max(left, right) + 1;
};"
QMhaRPjg,Untitled,Ethan-ZYF,C++,Sunday 15th of October 2023 10:28:00 PM CDT,"#include <bits/stdc++.h>
using namespace std;
using i64 = int; // AC
// using i64 = long long; //!WA
constexpr int N = 105;
i64 n, W, nums[N][3];

void solve() {
    cin >> n >> W;
    for (int i = 1; i <= n; i++) {
        cin >> nums[i][0] >> nums[i][1] >> nums[i][2];
    }
    // vector<vector<i64>> dp(n + 1, vector(W + 1, 0LL));
    vector<vector<i64>> dp(n + 1, vector(W + 1, 0));
    for (i64 i = 1; i <= n; i++) {
        i64 v = nums[i][0], w = nums[i][1], cnt = nums[i][2];
        map<i64, deque<pair<i64, i64>>> mp;
        for (i64 j = 0; j <= W; j++) {
            i64 mod = j % w, t = j / w;
            i64 temp = dp[i - 1][j] - t * v;
            while (!mp[mod].empty() && temp >= mp[mod].back().second)
                mp[mod].pop_back();
            mp[mod].emplace_back(t, temp);
            while (t - mp[mod].front().first > cnt)
                mp[mod].pop_front();
            dp[i][j] = max(dp[i][j - 1], mp[mod].front().second + t * v);
        }
    }
    cout << dp[n][W] << endl;
}

int main() {
    cin.tie(nullptr)->sync_with_stdio(false);
    solve();
}"
yTSKa7Vc,67. Add Binary,micahbales,JavaScript,Sunday 15th of October 2023 10:05:02 PM CDT,"/**
* Problem statement: https://leetcode.com/problems/add-binary/description/
*
* The un-commented solution below solves the problem in the way that an interviewer would probably want to see it solved.
*
* In addition, there is also a solution (commented out, at the bottom of this file) that represents how I might solve this
* for real-life web applications that might be performing this operation casually.
*
* It's not clear to me whether there is a significant difference in performance between the two algorithms, but the second
* one is far more concise and readable.
**/

/**
* @param {number} n
* @return {string} - A string of n zeros (e.g. ""0000"")
**/
function getZerosString(n) {
    let s = '';
    for (i = 0; i < n; i++) {
        s += '0';
    }
    return s;
}

/**
* Compare the two strings and add a number of ""0"" to the front of
* the shorter string, equal to difference in length between the two
*
* @param {string} a - A string binary representation (e.g. ""11011"")
* @param {string} b - A string binary representation (e.g. ""11011"")
* @return {ey: string, bee: string} - An object containing two binary string representations,
* each still having the same numeric value, but with an equal number of characters
*
**/
function equalizeBinaryStrings(a, b) {
    if (a.length === b.length) return {ey: a, bee: b};
    if (a.length > b.length) {
        return {
            ey: a,
            bee: getZerosString(a.length - b.length) + b,
        };
    } else {
        return {
            ey: getZerosString(b.length - a.length) + a,
            bee: b,
        };
    }
}

/**
 * @param {string} a
 * @param {string} b
 * @return {string}
 */
var addBinary = function(a, b) {
    const {ey, bee} = equalizeBinaryStrings(a, b);
    
    let newBinaryString = '';
    let carryover = 0;
    for (i = ey.length - 1; i >= 0; i--) {
        const aVal = parseInt(ey[i]);
        const bVal = parseInt(bee[i]);
        const sum = aVal + bVal + carryover;
        switch(sum) {
            // if 0 + 0 (+ 0 carryover) - zero
            case 0:
                // TODO: it might be more efficient to use an array and concat the string at the end
                newBinaryString = '0' + newBinaryString;
                break;
            // if 0 + 0 (+ 1 carryover) - one
            // if 0 + 1 (+ 0 carryover) - one
            case 1:
                newBinaryString = '1' + newBinaryString;
                carryover = 0;
                break;
            // if 0 + 1 (+ 1 carryover) - zero, but carry the one
            // if 1 + 1 (+ 0 carryover) - zero, but carry the one
            case 2:
                newBinaryString = '0' + newBinaryString;
                carryover = 1;
                break;
            // if 1 + 1 (+ 1 carryover) - one, AND carry the one
            case 3:
                newBinaryString = '1' + newBinaryString;
                carryover = 1;
                break;
            default:
                throw Error('invalid binary addition!');
        }
    }

    // If there is still a carryover, add a ""1"" to the start of the string
    if (carryover === 1) {
        newBinaryString = '1' + newBinaryString;
    }

    return newBinaryString;
};

// /**
//  * @param {string} a
//  * @param {string} b
//  * @return {string}
//  */
// var addBinary = function(a, b) {
//     return (BigInt(`0b${a}`) + BigInt(`0b${b}`)).toString(2);
// };"
