id,title,username,language,date,content
t34VMHUJ,bhop cpp,REALshocK,C++,Saturday 30th of December 2023 11:55:08 AM CDT,"// Include the necessary libraries
#include ""memory.h""
#include ""offsets.h""

#include <thread>
#include <iostream>
#include <iomanip>



int main()
{

	// Set the output format for hexadecimal numbers
	std::cout << std::hex << std::uppercase;

	// Print the memory offsets
	std::cout << ""dwForceJump: 0x"" << offsets::dwForceJump << std::endl;
	std::cout << ""dwLocalPlayerPawn: 0x"" << offsets::dwLocalPlayerPawn << std::endl;
	std::cout << ""m_fFlags: 0x"" << offsets::m_fFlags << std::endl;

	// Main loop
	while (true)
	{
		// Sleep for 1 millisecond to reduce CPU usage
		std::this_thread::sleep_for(std::chrono::milliseconds(1));

		// Read the local player's memory address
		uintptr_t localPlayer = VARS::memRead<uintptr_t>(VARS::baseAddress + offsets::dwLocalPlayerPawn);

		// If the local player's memory address is null, skip this iteration
		if (!localPlayer)
		{
			continue;
		}

		// Read the local player's flags
		int32_t m_fFlags = VARS::memRead<int32_t>(localPlayer + offsets::m_fFlags);

		// If the space key is pressed and the local player is on the ground, perform a jump
		if (GetAsyncKeyState(VK_SPACE) && (m_fFlags & (1 << 0)))
		{
			std::this_thread::sleep_for(std::chrono::microseconds(15625));
			VARS::memWrite(VARS::baseAddress + offsets::dwForceJump, 256);
			VARS::memWrite(VARS::baseAddress + offsets::dwForceJump, 65537);
			std::this_thread::sleep_for(std::chrono::milliseconds(1));
			VARS::memWrite(VARS::baseAddress + offsets::dwForceJump, 256);
		}
	}

	return 0;
}"
ThPg2vFW,bhop,REALshocK,Python,Saturday 30th of December 2023 11:52:21 AM CDT,"import keyboard
import pymem
import pymem.process
import time
import ctypes
import ctypes.wintypes

user32 = ctypes.windll.user32

# dwForceJump = (0x16C2380)
# dwLocalPlayer = (0x16C8F38)
# m_fFlags = (0x3C8)


def get_foreground_window_title():
    hwnd = user32.GetForegroundWindow()
    length = user32.GetWindowTextLengthW(hwnd) + 1
    buffer = ctypes.create_unicode_buffer(length)
    user32.GetWindowTextW(hwnd, buffer, length)
    return buffer.value


def main():
    pm = pymem.Pymem(""cs2.exe"")
    client = pymem.process.module_from_name(pm.process_handle, ""client.dll"").lpBaseOfDll
    # engine = pymem.process.module_from_name(pm.process_handle, ""engine.dll"").lpBaseOfDll

    while True:
        window_name = ""Counter-Strike 2""
        foreground_window_title = get_foreground_window_title()
        if foreground_window_title != window_name:
            continue

        # Bhop
        try:
            dwLocalPlayerPawn = pm.read_longlong(client + 0x16C8F38)  # client_dll.dwLocalPlayerPawn // offsets
            m_fFlags = pm.read_int(dwLocalPlayerPawn + 0x3C8)  # C_BaseEntity.m_fFlags // client.dll
            # client_dll.dwForceJump // offsets
            if keyboard.is_pressed(""space"") & m_fFlags & (1 << 0):
                time.sleep(0.016)
                pm.write_int(client + 0x16C2380, 256)
                # time.sleep(0.015)
                pm.write_int(client + 0x16C2380, 65537)
                time.sleep(0.016)
                pm.write_int(client + 0x16C2380, 256)
            else:
                pm.write_int(client + 0x16C2380, 256)
                time.sleep(0.001)
        except Exception as ex:
            pass


if __name__ == '__main__':
    main()
"
kd34XR4a,Untitled,EnGold,C++,Saturday 30th of December 2023 11:40:12 AM CDT,"#include <iostream>
#include <list>
long long fibonachi(long long n, int p);

long long fib[85]{
	1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585
};

int main()
{
	int n;
	std::cin >> n;
	std::list<long long> res(n);             // пустой список
	for (long long i : res) {
		std::cin >> i;
		i = fibonachi(i,0);
	}
	for (long long i : res) {
		std::cout << i << std::endl;
	}
}

long long fibonachi(long long n, int p) {
	if (n == 1) return 1;
	if (p >= (sizeof(fib) / sizeof(long long))) return 0;
	if(n < fib[p]) return 0;
	long long res = fibonachi(n, p + 1);
	if(n % fib[p] == 0) {
		res += fibonachi(n / fib[p], p);
	}
	return res;
}"
Qa4CuPbE,available_map_updates.json,abraha2d,JSON,Saturday 30th of December 2023 11:29:16 AM CDT,"{
  ""available_map_updates"": {
    ""au"": {
      ""cleartext_signature"": ""BAbxckAV8gP8luDGptzs0Qmg/wtn5W2axRLt6U8dVhlXO7CucGuBECH0hkIJ7OdK6mfsjH85+YVQHsjUqa2JBw=="",
      ""decryption_key"": ""vbaKcbzzAQCr/0A94qmXlyJ6Crn0YA+0LNpi1ob/zGw="",
      ""encrypted_signature"": ""tUJlx5QFh4Ac7mWW5gU0Osy7JFg4nNKM6CZcJKxCmzaWmM3hsFXfC+87hUnIuHARWYDMI+alfopU0E9p86NKLQ=="",
      ""name"": ""AU-2023.32-14753"",
      ""sizes"": [
        717971520
      ]
    },
    ""cn"": {
      ""cleartext_signature"": ""zemvdWaQaLyfzVIYVBiaskoJgEtGCPzqa28vdtudENZVWVblSUwiIAOZiRuoI+mwZCchaZ+nUIlBL8TqhVasDw=="",
      ""decryption_key"": ""SCNYioZB9+Zwy46MiVfHrJT+wDQRN0H1ZluScEVJxoc="",
      ""encrypted_signature"": ""ppmjFlRTKui7o1gu9VUsZLQ9d7ac+nU8VnG3fRTq24xVDyI+WfsO89omD/NUjK3rB5QT7nz2rj7hDuMHi3vnZw=="",
      ""name"": ""CN-2024.2-14834"",
      ""sizes"": [
        5665833024
      ]
    },
    ""eu"": {
      ""cleartext_signature"": ""0kvH/sTJV4UGNXpwLGQDn1aS4uo4CXrGIQc9kN5QfYU4O4RYZ6ULWLmnDQbjr6Pbdy6UxMmBHQlwK+M3KUULAw=="",
      ""decryption_key"": ""nq6x7glBIsb/qmU1ARkDxPCvaYOthXO4gz1AMQ+2BUU="",
      ""encrypted_signature"": ""ridwW50dYNqviYDVh15rdWg8oL0yCvXz0wML4pnUEm9/94w6c6oqaLxN06QB9ibIr5J/bsZi828bGwxiC1CVzQ=="",
      ""name"": ""EU-2023.32-14783"",
      ""sizes"": [
        7677325376
      ]
    },
    ""hk"": {
      ""cleartext_signature"": ""tcSmTXGw5VQmEczyVA2TYSOcSy/34ab4bxu+BGF3srzqi2Ut1sI4CajkfrwcbZaoDPoGEEonEZjLtDlmN3wUAQ=="",
      ""decryption_key"": ""tTbAGPVfg9boDMyANOojWr0DvdlWHZiDFmM81+uqPHk="",
      ""encrypted_signature"": ""zN6ybB/+GgbbneulmqoIiz7dki6j9rx2CZ8EmUH5OCT/dUhtj1h7W7WhobDUnHksSzmCKAy5cwhXi+QDDmbtdQ=="",
      ""name"": ""HK-2023.26-14652"",
      ""sizes"": [
        95461440
      ]
    },
    ""jp"": {
      ""cleartext_signature"": ""KDrehSelP/PK5Cnm8KT6/oyz47/rL8foVvtUTwSsus4LvnHXRDYBKbvV0cg0dCd45tQuoSxGGJEy7IP1ti5SCg=="",
      ""decryption_key"": ""flaRyeyFfCm1ehb/4M7+5YMYsFTJxrQypJ5sSVjueyU="",
      ""encrypted_signature"": ""a3d9OwykNxST5wytkgnIgQHejHzigvnk16bXDmaZi/UftF8erVVuoeZXettVN8tOTR0g+58lyHI+4eYYE86SxA=="",
      ""name"": ""JP-2023.44-14803"",
      ""sizes"": [
        907423808
      ]
    },
    ""kr"": {
      ""cleartext_signature"": ""EaJlgyuD5pF7kWyror4145eqpVDUfvrpPNwig8983kgIreenEPylFagVlgF/gEAUB9f6jQkDQ0OloZ+GgP20BA=="",
      ""decryption_key"": ""lggoWQjFTnnByy1qXsGefewMx2Nx+tcY665tkQ28H30="",
      ""encrypted_signature"": ""TWufUUhxg1Pk3+4vRnPGAVHLEgtvOphIOyapniwoxh0EGi7hAgOvF5mts+bKRp8j71t5tH2OceoUWMWcWIFFRw=="",
      ""name"": ""KR-2023.38-14769"",
      ""sizes"": [
        481976384
      ]
    },
    ""me"": {
      ""cleartext_signature"": ""LlaStJpPrrLX6T/iyYU432A27tSYgPsj5zb9LlSFZ0nx37Rij6gihif/LQkRa7J+0KFISCrrOVu+NWLNMNh+Bg=="",
      ""decryption_key"": ""giPVB5kjp3KNVOegCwapmxIvEGfuPqvP41QyyKGw+bE="",
      ""encrypted_signature"": ""P/NU1wRWOhECC3RLi7OeGwAOGuqCPuc6thPcmEVzqxqdhJr+x7GM4DnHNe8xH9czHbVa9Ws0AyzAMCd28KeHqA=="",
      ""name"": ""ME-2023.32-14754"",
      ""sizes"": [
        957685824
      ]
    },
    ""mo"": {
      ""cleartext_signature"": ""6XF7TSBOP3QNLodLFAzFECYHN7lQCY72Yhl2VKKHPUTzqc9PhFJ+dIeGiBDovixKoWWikD3p5MZJp2SVD5NzCg=="",
      ""decryption_key"": ""434jy5qPhidLytP+kSiS5GRu80s5CYBpioQO1NQdaKg="",
      ""encrypted_signature"": ""7JPaDPpPaPTCNPwWfdQT5sK/m3RI1YU7DDXyMypy1SXVt6IlRYT7YgKvxOj8M4jo389rkauO60lSpvdx84/sBQ=="",
      ""name"": ""MO-2023.32-14732"",
      ""sizes"": [
        89866304
      ]
    },
    ""na"": {
      ""cleartext_signature"": ""M80mPIWY/YP327Vczw6+9Xegme9gc+ZpkqRAZysd4wcZd/See0J3mzUkXLxynJKll5p6xMCX1T+SiLOTMF2fCw=="",
      ""decryption_key"": ""WYlYozPaXPcTINp7IZ5cVxZRJL6XtFJkdpDKiwGi2x0="",
      ""encrypted_signature"": ""GaL3aTzX7d9jgXkpRemYFsrcJZ0L1odNuCUB8Zq7muWWQyxmub/ECqfZ0H8+/P73NsqJA+Dsknkr+HpGJ/nHMw=="",
      ""name"": ""NA-2023.44-14828"",
      ""sizes"": [
        6732488768
      ]
    },
    ""tw"": {
      ""cleartext_signature"": ""vbLNjxRMuPh/9JaIaE6Zj8OZNBmLWbgaBM+Y0/hTQpoRMsxwPqhtEWpT9GaDQUovTZn/5i5JfMMEAkg0bijIBg=="",
      ""decryption_key"": ""46Rjt1dzJ+dPhHDUzbKhTtN4xidLzBhd+ntc/ijK8j0="",
      ""encrypted_signature"": ""MFH2nfPOZncvXMmdNvdQndE50wV0LwcSsOoTGJKmqLeKYxQukXMkyqgxccR3hsuqCTSS7Yn3WU1vbnEkVtlFpg=="",
      ""name"": ""TW-2023.20-14564"",
      ""sizes"": [
        197378112
      ]
    },
    ""se"": {
      ""cleartext_signature"": ""+Bh1AJtWAchGMgnufk5OySYvtYNZHvbzW7q8tCEEjzYpW8CYS6XpPstafFnpUTDYRwGcCS3WwlSPl+DFX1flBg=="",
      ""decryption_key"": ""5BGXMHWXN/+5fRuJV4E5njChNU2aqR0CLAG3yxLsBx8="",
      ""encrypted_signature"": ""PjCgEpccbJBC1bvbSoM8S4mrrWpXTOqJVrNbsI7jdNajKlaPyQH34Z8wjDwF3QgOuPPyaQRjotXWx/WEm/YZMQ=="",
      ""name"": ""SE-2024.2-14830"",
      ""sizes"": [
        470736960
      ]
    }
  }
}"
uCCc69xL,tps,ComboMaster,Lua,Saturday 30th of December 2023 10:48:02 AM CDT,"local component = require ""component""
local internet = component.internet
local fs = require ""filesystem""

local timeConstant = 2

local function time()
    local f = io.open(""/tmp/timeFile"",""w"")
    f:write(""test"")
    f:close()
    return fs.lastModified(""/tmp/timeFile"")
end

local TPS = {}
local avgTPS = 0

function clear()
    for tpsSlot = 1, 10 do
        TPS[tpsSlot] = 0
    end
end

function getTPS()
    for tpsSlot = 1, 10 do
        local realTimeOld = time()
        os.sleep(timeConstant)
        local realTimeNew = time()
        local realTimeDiff = realTimeNew - realTimeOld
        TPS[tpsSlot] = 20000 * timeConstant / realTimeDiff
        avgTPS = (TPS[1] + TPS[2] + TPS[3] + TPS[4] + TPS[5]) / 5
    end
    --internet.request(""http://77.91.86.203:6666"", string.format(""%.2f"", avgTPS))
    print(string.format(""%.2f"", avgTPS))
end

while true do
    clear()
    getTPS()
end"
X5PiDsz9,G2A.com Refund Exploit Dec 2023,G2ARefundExploit,GetText,Saturday 30th of December 2023 10:45:20 AM CDT,"G2A.com refund exploit updated guide 
Any item for free on G2A.com such as Amazon, Steam, and any other gift cards.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_297973.pdf
 
Working as of
30 December 2023"
2wZ4zYAN,Zadupice pastebin,Lavex,HTML,Saturday 30th of December 2023 10:04:54 AM CDT,"<link=https://discord.gg/4dmRBxVkQ5><size=24><align=center></color><color=#E0F304>Z</color><color=#DDE315>a</color><color=#DAD326>d</color><color=#D7C337>u</color><color=#D4B348>p</color><color=#D1A359>i</color><color=#CE936A>c</color><color=#CB837B>e</color> <color=#C5639D>H</color><color=#C253AE>A</color><color=#BF43BF>R</color><color=#BC33D0>D</color><color=#B923E1>R</color><color=#B613F2>P</color></align></size></link>

<size=14><link=https://docs.google.com/document/d/14v65U9H0JCQHcCwZhwlzcLRRTqWG6KIJJbEV4A6OX9E/edit?usp=sharing><align=center><color=#D6A050>P</color><color=#D7994D>r</color><color=#D8924A>z</color><color=#D98B47>e</color><color=#DA8444>c</color><color=#DB7D41>z</color><color=#DC763E>y</color><color=#DD6F3B>t</color><color=#DE6838>a</color><color=#DF6135>j</color> <u><color=#E1532F>r</color><color=#E24C2C>e</color><color=#E34529>g</color><color=#E43E26>u</color><color=#E53723>l</color><color=#E63020>a</color><color=#E7291D>m</color><color=#E8221A>i</color><color=#E91B17>n</color><color=#EA1414>!</color></u></align></link></size>

<link=https://discord.gg/4dmRBxVkQ5><size=14><align=center><color=#645DAA>D</color><color=#625CAB>o</color><color=#605BAC>ł</color><color=#5E5AAD>ą</color><color=#5C59AE>c</color><color=#5A58AF>z</color> <color=#5656B1>n</color><color=#5455B2>a</color> <color=#5053B4>n</color><color=#4E52B5>a</color><color=#4C51B6>s</color><color=#4A50B7>z</color><color=#484FB8>e</color><color=#464EB9>g</color><color=#444DBA>o</color> <u><color=#404BBC>D</color><color=#3E4ABD>I</color><color=#3C49BE>S</color><color=#3A48BF>C</color><color=#3847C0>O</color><color=#3646C1>R</color><color=#3445C2>D</color><color=#3244C3>A</color></u></align></size></link>
"
PWfB507w,Bubble sort,mn_rockstar,Python,Saturday 30th of December 2023 09:47:59 AM CDT,"def bsort(numbers):
    for i in range(len(numbers)-1,0,-1):
        for j in range(i):
            if numbers[j]>numbers[j+1]:
                numbers[j],numbers[j+1]=numbers[j+1],numbers[j]
    return numbers
print(""enter the list in single line with sepration of space :"",end = "" "")
numb = list(map(int,input().split()))
snumb = bsort(numb)
print(""the sorted list is :"",snumb)
"
sxTjk1K5,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Saturday 30th of December 2023 09:43:30 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-293904"
UzSqcjEk,record,tuvok81,JavaScript,Saturday 30th of December 2023 09:42:31 AM CDT,"function record_show()
{
   document.getElementById('reccontrol').innerHTML=Math.round(soundapplet.rec_length_kB())+"" kB"";
}

function record_start() {
   document.getElementById('reccontrol').innerHTML=0+"" kB"";
   if (rec_downloadurl) { URL.revokeObjectURL(rec_downloadurl); rec_downloadurl=null; }
   rec_showtimer=setInterval('record_show()',250);
   soundapplet.rec_start();
}

function record_stop()
{
   clearInterval(rec_showtimer);
   var res = soundapplet.rec_finish();

   var wavhead = new ArrayBuffer(44);
   var dv=new DataView(wavhead);
   var i=0;
   var sr=Math.round(res.sr);
   dv.setUint8(i++,82);  dv.setUint8(i++,73); dv.setUint8(i++,70); dv.setUint8(i++,70); // RIFF  (is there really no less verbose way to initialize this thing?)
   dv.setUint32(i,res.len+44,true); i+=4;  // total length; WAV files are little-endian
   dv.setUint8(i++,87);  dv.setUint8(i++,65); dv.setUint8(i++,86); dv.setUint8(i++,69); // WAVE
   dv.setUint8(i++,102);  dv.setUint8(i++,109); dv.setUint8(i++,116); dv.setUint8(i++,32); // fmt
     dv.setUint32(i,16,true);   i+=4;   // length of fmt
     dv.setUint16(i,1,true);    i+=2;   // PCM
     dv.setUint16(i,1,true);    i+=2;   // mono
     dv.setUint32(i,sr,true);   i+=4;   // samplerate
     dv.setUint32(i,2*sr,true); i+=4;   // 2*samplerate
     dv.setUint16(i,2,true);    i+=2;   // bytes per sample
     dv.setUint16(i,16,true);   i+=2;   // bits per sample
   dv.setUint8(i++,100);  dv.setUint8(i++,97); dv.setUint8(i++,116); dv.setUint8(i++,97); // data
     dv.setUint32(i,res.len,true);  // length of data

   var wavdata = res.wavdata;
   wavdata.unshift(wavhead);

   var mimetype = 'application/binary';
   var bb = new Blob(wavdata, {type: mimetype});
   if (!bb) document.getElementById('recwarning').style.display=""block"";
   rec_downloadurl = window.URL.createObjectURL(bb);
   if (rec_downloadurl.indexOf('http')>=0) document.getElementById('recwarning').style.display=""block"";
   var fname='';
   try {
      fname=(new Date().toISOString()).replace(/\.[0-9]{3}/,"""");
   } catch (e) {};
   fname=""websdr_recording_""+fname+""_""+nominalfreq().toFixed(1)+""kHz.wav"";
   document.getElementById('reccontrol').innerHTML=""<a href='""+rec_downloadurl+""' download='""+fname+""'>download</a>"";
}

function record_click()
{
   var bt=document.getElementById('recbutton');
   if (bt.innerHTML==""stop"") {
      bt.innerHTML=""start"";
      record_stop();
   } else {
      bt.innerHTML=""stop"";
      record_start();
   }
}
"
j3jM6Qjq,White paint condo,bluebyt,INI file,Saturday 30th of December 2023 09:25:14 AM CDT,"SICO Muse Interior Latex Paint and Primer - Soft Matte Finish - 946 ml - Base 1
Article #50316890 Model #991-521-946ML Format 946ML
"
DrQEPiiK,asas,IPerov,Kotlin,Saturday 30th of December 2023 09:14:29 AM CDT,"package ru.surf.components.service

import android.annotation.SuppressLint
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.graphics.red
import androidx.lifecycle.ViewModel
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import ru.surf.components.R
import ru.surf.components.databinding.MusicServiceBinding
import java.util.concurrent.Flow

class MusicServiceViewModel(): ViewModel(){
    var countStartsLeft: Int = 2
    private val countStartsFlow_ = MutableStateFlow(0)
    val countStartsFlow = countStartsFlow_.asSharedFlow()
    fun plusCountStarts(){
        countStartsFlow_.value = countStartsFlow_.value++
    }
}

class ServiceActivity : AppCompatActivity(){
    private lateinit var binding: MusicServiceBinding
    private val musicServiceViewModel: MusicServiceViewModel by viewModels()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = MusicServiceBinding.inflate(layoutInflater)
        setContentView(binding.root)

        subscribeOnViewmodelData()
        updateMusicStartsLeftCounter()

        binding.startStopMusicBt.setOnClickListener{
            if (musicServiceViewModel.countStartsLeft > 0) startStopMusic()
            else noTokens()
        }
    }


    @SuppressLint(""UseCompatLoadingForDrawables"")
    private fun startStopMusic() {
        val intent = Intent(this,PlayerService::class.java)
        if (ServiceManager.isStarted){
            stopService(intent)
            binding.startStopMusicBt.text = getString(R.string.btn_play)
            binding.startStopMusicBt.icon = getDrawable(R.drawable.baseline_play_circle_24)
        }
        else{
                startService(intent)
                binding.startStopMusicBt.text = getString(R.string.btn_pause)
                binding.startStopMusicBt.icon = getDrawable(R.drawable.baseline_pause_circle_filled_24)
                musicServiceViewModel.plusCountStarts()
                musicServiceViewModel.countStartsLeft--
                updateMusicStartsLeftCounter()
            }
        }
    private fun updateMusicStartsLeftCounter(){
        binding.musicStartLeftCounterTv.text = musicServiceViewModel.countStartsLeft.toString()
    }

    private fun noTokens(){
        Toast.makeText(this, ""Не осталось токенов для прослушивания"", Toast.LENGTH_SHORT).show()
        binding.musicStartLeftCounterTv.setTextColor(resources.getColor(R.color.red,))
        binding.startStopMusicBt.setBackgroundColor(ContextCompat.getColor(applicationContext,R.color.red))
    }

    private fun subscribeOnViewmodelData(){
        lifecycleScope.launch(Dispatchers.Default){
            musicServiceViewModel.countStartsFlow.collect {countStart->
                binding.musicStartCounterTv.text = countStart.toString()
            }
        }
    }
}

"
eikydYpx,AE2 Display,SYMemy,Lua,Saturday 30th of December 2023 09:12:34 AM CDT,"
function GetAttachedBlock(blockType)
    local block = nil
    for _, side in ipairs(peripheral.getNames()) do
        if( peripheral.getType(side) == blockType)
        then
            print(""Found"" .. blockType .. "" on "" .. side .. "" side"")
            block = peripheral.wrap(side)
        end
    end

    if(block == nil)
    then
    print(""Could not find "" .. blockType .. ""!"")
        exit()
    end

    return block; 
end

function GetByteAsText(bytes)

    if(bytes <= 10 * 1000)
    then
        return bytes

    elseif(bytes <= 10 * 1000 * 1000)
    then
        return string.format(""%02d K"", bytes / 1000)

    elseif(bytes <= 10 * 1000 * 1000 * 1000)
    then
        return string.format(""%02d M"", bytes / 1000 / 1000)

    elseif(bytes <= 10 * 1000 * 1000 * 1000 * 1000)
    then
        return string.format(""%02d G"", bytes / 1000 / 1000 / 1000)

    elseif(bytes <= 10 * 1000 * 1000 * 1000 * 1000 * 1000)
    then
        return string.format(""%02d T"", bytes / 1000 / 1000 / 1000 / 1000)

    else
        return string.format(""%02d B"", bytes / 1000 / 1000 / 1000 / 1000 / 1000)
    end
end

local meBridge = GetAttachedBlock(""meBridge"")
local monitor = GetAttachedBlock(""monitor"")

while true
do
    local usedItemStorage = meBridge.getUsedItemStorage()
    local totalItemStorage = meBridge.getTotalItemStorage()

    monitor.clear()
    monitor.setCursorPos(1,1)
    monitor.write(""Used: "" .. GetByteAsText(usedItemStorage))
    monitor.setCursorPos(1,2)
    monitor.write(""Total: "" .. GetByteAsText(totalItemStorage))
    sleep(1)
end
"
sj6ccUsA,updater-v2.sh,sergio_educacionit,Bash,Saturday 30th of December 2023 08:29:30 AM CDT,"#!/bin/bash


echo ""verificando nivel de usuario...""

# El operador not '!' es un negador o inversor, en este caso
# si la condicion devuelve False al ser negada se convierte en True.
#
# si $UUI no es igual entonces True.

if [ ! $UID -eq 0 ]; then

	
	# Enviamos e lmensaje por el estandar error '>&2'
	echo ""Debes ser usuario 'root' para ejecutar este programa."" >&2

	# TErminamos el programa con un exit status 1.
	exit 1

fi

# Utilizamos el operador and '&&' para concatenar dos comandos, el de la derecha 
# se ejecuta si el de la izquierda termina con exit status 0.

apt update && apt upgrade -y


# si el update falla el scrip termina por que no hay mas intrucciones y el exit status sera el del
# ultimo comando ejecutado.
"
QaaZFTfW,Untitled,poxipox,Lua,Saturday 30th of December 2023 08:11:39 AM CDT,"			door = function(cid, toPosition, creatPos)
					print'1'
					if toPosition.y-1 == creatPos.y then -- exit
						doTeleportThing(cid, {x=toPosition.x, y=toPosition.y+1, z=toPosition.z}, false)
						return true
					end
					print'2'
					if exhaustion.check(cid, 19000) then
						doSendMagicEffect(getPlayerPosition(cid), CONST_ME_POFF)
						doPlayerSendCancel(cid, ""You are exhausted."")
						return true
					end   
					print'3'
					doTeleportThing(cid, {x=toPosition.x, y=toPosition.y-1, z=toPosition.z}, false)
					local time = 10
					exhaustion.set(cid, 19000, time)
                end
                },"
zrqwc3M1,updater.sh,sergio_educacionit,Bash,Saturday 30th of December 2023 07:52:43 AM CDT,"#!/bin/bash


# verficiar si el usuario es root.

# La variable de entorno '$UID' contiene la id de
# usuario conectado o que tiene sesion abierta en un shell

# Si condicion     Entonces...
if [ $UID -eq 0 ]; then

	# esto
	apt update
	apt upgrade -y
# Sino...
else
	# esto otro
	echo ""Debes ser usuario 'root' para ejecutar este programa.""

fi"
aufv1vGt,wget,goldfiction,Lua,Saturday 30th of December 2023 07:49:04 AM CDT,"local function wget(option, url, ziel)
  if type(url) ~= ""string"" and type(ziel) ~= ""string"" then
        return
  elseif type(option) == ""string"" and option ~= ""-f"" and type(url) == ""string"" then
        ziel = url
        url = option
  end
  if http.checkURL(url) then
        if fs.exists(ziel) and option ~= ""-f"" then
          printError(""<Error> Target exists already"")
          return
        else
          term.write(""Downloading ... "")
          local timer = os.startTimer(60)
          http.request(url)
          while true do
                local event, id, data = os.pullEvent()
                if event == ""http_success"" then
                  print(""success"")
                  local f = io.open(ziel, ""w"")
                  f:write(data.readAll())
                  f:close()
                  data:close()
                  print(""Saved as "" .. ziel)
                  return true
                elseif event == ""timer"" and timer == id then
                  printError(""<Error> Timeout"")
                  return
                elseif event == ""http_failure"" then
                  printError(""<Error> Download"")
                  os.cancelAlarm(timer)
                  return
                end
          end
        end
  else
        printError(""<Error> URL"")
        return
  end
end

-- wget(""http://example.org/"", ""testing"")
-- wget(""-f"", ""http://example.org/"", ""testing"")

wget(""-f"",""https://github.com/TheInfamousAlk/nbs/raw/master/Alan%20Walker%20-%20Fade.nbs"", ""testing"")"
X0WSkvkh,Doorbell,denperss,YAML,Saturday 30th of December 2023 07:48:02 AM CDT,"Merry Christmass all 🙂 

I have some issue with a template from my nest doorbell 😦
So when i call the service, it creates the file but it dosent have a image in it. 
Also it dosent add the time stamp to the file, only ""doorbell_"" 

This is the code:

service: camera.snapshot
target:
  device_id: 6f76b7518d4efa9
  entity_id: camera.doorbell
data:
  filename: >-
    /config/www/nest/notify/doorbell_{{
    states.input_text.as_doorbell_snap_timestamp.state }}.jpg

This is the input text i call before the snap

service: input_text.set_value
entity_id: input_text.as_doorbell_snap_timestamp
data:
  value: ""{{ now().strftime(\""%Y%m%d_%H%M%S\"") }}""

"
3kX3GPLq,luhnValidityCheck(),baxterio,TypeScript,Saturday 30th of December 2023 07:47:35 AM CDT,"function luhnValidityCheck(value: string | number): boolean {
  const numbers = value.toString().split('').reverse()
  const sum = numbers.reduce((sum, number, index) => {
     let n = Number(number)
     if (index % 2 !== 0) {
       n *= 2
       n -= n > 9 ? 9 : 0
     }
     return sum + n
  }, 0)
	return sum % 10 === 0
}"
jh2Twbw0,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 07:35:50 AM CDT,"#include <iostream>
#include <set>
#include <vector>
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
typedef long long ll;
const ll MOD = 922337186621;
const ll alphabet_size = 52;
int n, k;
int rolling_hash(string & s) {
    set<ll> st;
    int n = (int) s.size();
    vector<ll> powers(n + 1, 1);
    for(int i = 1; i <= n; i++) {
        powers[i] = (powers[i - 1] * alphabet_size) % MOD;
    }
    ll hash = 0;
    for(int i = 0; i < k; i++) {
        hash = (hash * alphabet_size + s[i]) % MOD;
    }
    st.insert(hash);
    for(int i = 1; i <= n - k; i++) {
        hash = (hash - powers[k - 1] * s[i - 1]);
        while(hash < 0) {
            hash += MOD;
        }
        hash %= MOD;
        hash = (hash * alphabet_size + s[i + k - 1]) % MOD;
        st.insert(hash);
    }
    return (int) st.size();
    
}

int main()
{
    ios_base::sync_with_stdio(false);
    int t;
    cin >> t;
    while(t--) {
        cin >> n >> k;
        string s;
        cin >> s;
        cout << rolling_hash(s) << endl;
    }
    return 0;
}

"
k6KAfYp9,card stanze,fabrizio97726,YAML,Saturday 30th of December 2023 07:34:01 AM CDT,"type: custom:stack-in-card
mode: vertical
cards:
  - type: custom:stack-in-card
    mode: horizontal
    cards:
      - type: custom:mushroom-entity-card
        entity: sensor.disimpegno_temperature
        name: Sala
        icon_type: none
        tap_action:
          action: more-info
        card_mod:
          style: |
            ha-card {
              background-color: rgba(0,0,0,0);
              box-shadow: none;
              border-style: hidden;
            }  
      - type: custom:mushroom-chips-card
        chips:
          - type: entity
            entity: light.luce_sala
            use_entity_picture: true
            tap_action:
              action: toggle
            name: Plafone
            icon: phu:friends-of-hue-iq-pendant
            icon_color: yellow
            content_info: name
        alignment: end
    card_mod:
      style: |
        ha-card {
          background-color: rgba(0,0,0,0);
          box-shadow: none;
          border-style: hidden;
        }  
  - type: custom:mini-graph-card
    entities:
      - sensor.disimpegno_temperature
    show:
      state: false
      name: false
      icon: false
    points_per_hour: 1
    hours_to_shw: 48
    line_color: orange
    card_mod:
      style: |
        ha-card {
          background-color: rgba(0,0,0,0);
          box-shadow: none;
          border-style: hidden;
        }      
"
iapGF8WA,Mainframe_display (incomplete),SHADOW_WOLF_FURRY,Lua,Saturday 30th of December 2023 07:33:35 AM CDT,"-- wraping monitors as peripherals
local monL == peripheral.wrap(""left"")
local monR == peripheral.wrap(""right"")

-- set initial monitor text scale
monL.setTextScale(5)
monR.setTextScale(.5)

-- display button
monR.setBackgroundColor(colors.lightGrey)
monR.setCursorPos(1,1)
monR.write(string.rep("" "", 5)) -- 5 spaces worth of lightgrey box

-- button label (number on button)

"
xHei2wW6,openpgp curve25519 implementation,baxterio,TypeScript,Saturday 30th of December 2023 07:26:49 AM CDT,"import * as openpgp from 'openpgp'

type TUser = {
  user: {
    email: string;
    firstname: string;
    lastname: string;
  }
};

type TKeysArmored = {
  privateKeyArmored: string;
  publicKeyArmored: string;
  revocationCertificate?: string;
};

type TKeys = {
  privateKey: openpgp.PrivateKey;
  publicKey: openpgp.Key;
};

type TPassphrase = {
  passphrase: string;
}

type TEncryptDataParams = {
  data: string | number | Object;
} & TUser & TPassphrase;

type TEncryptedData = Omit<TKeysArmored, ""revocationCertificate""> & {
  messageArmored: string;
};

type TDecryptDataParams = TEncryptedData & TPassphrase

type TDecryptedData = {
  decryptedData: any;
  verifiedSignature: boolean;
};

type TReadKeysParams = TKeysArmored & TPassphrase;

type TGeneratePgpKeysParams = TUser & TPassphrase

interface IEncryptData {
  encryptData: (params: TEncryptDataParams) => Promise<TEncryptedData>;
  decryptData: (params: TDecryptDataParams) => Promise<TDecryptedData>;
  generatePgpKeys: (params: TGeneratePgpKeysParams) => Promise<TKeysArmored>;
  readKeys: (params: TReadKeysParams) => Promise<TKeys>;
}

class EncryptData implements IEncryptData {
  protected curve: openpgp.EllipticCurveName = 'curve25519';
  protected type: 'ecc' | 'rsa' = 'ecc';

  async decryptData({
    messageArmored,
    passphrase,
    privateKeyArmored,
    publicKeyArmored,
  }: TDecryptDataParams): Promise<TDecryptedData> {
    const { privateKey, publicKey } = await this.readKeys({
      passphrase,
      privateKeyArmored, 
      publicKeyArmored,
    })

    const message = await openpgp.readMessage({
      armoredMessage: atob(messageArmored),
    });

    const { data: decryptedData, signatures } = await openpgp.decrypt({
      decryptionKeys: privateKey,
      message,
      verificationKeys: publicKey,
    });

    return {
      decryptedData,
      verifiedSignature: await signatures[0].verified,
    };
  }

  async encryptData({ data, passphrase, user }: TEncryptDataParams): Promise<TEncryptedData> {
    const { privateKeyArmored, publicKeyArmored } = await this.generatePgpKeys({
      passphrase,
      user
    });

    const { privateKey, publicKey } = await this.readKeys({
      passphrase,
      privateKeyArmored, 
      publicKeyArmored,
    })

    const messageArmored = await openpgp.encrypt({
      encryptionKeys: publicKey,
      message: await openpgp.createMessage({
        text: data as any,
      }),
      signingKeys: privateKey,
    });

    return {
      publicKeyArmored,
      privateKeyArmored,
      messageArmored: btoa(messageArmored as string),
    };
  }

  async generatePgpKeys({ user, passphrase }: TGeneratePgpKeysParams): Promise<TKeysArmored> {
    const { email, firstname, lastname  } = user;

    const {
      privateKey: privateKeyArmored,
      publicKey: publicKeyArmored,
      revocationCertificate,
    } = await openpgp.generateKey({
      curve: this.curve,
      passphrase,
      type: this.type,
      userIDs: [
        {
          email,
          name: `${firstname} ${lastname}`,
        },
      ],
    });

    return {
      privateKeyArmored,
      publicKeyArmored,
      revocationCertificate,
    };
  }

  async readKeys ({ passphrase, privateKeyArmored, publicKeyArmored }: TReadKeysParams): Promise<TKeys> {
    const publicKey = await openpgp.readKey({
      armoredKey: publicKeyArmored,
    });

    const privateKey = await openpgp.decryptKey({
      passphrase,
      privateKey: await openpgp.readPrivateKey({
        armoredKey: privateKeyArmored,
      }),
    });

    return { privateKey, publicKey };
  }
}"
mkJmw16K,Untitled,kwest87,C#,Saturday 30th of December 2023 07:13:03 AM CDT,"using System;

namespace ConsoleApp19
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const int CommandKnock = 1;
            const int CommandSeriesKnock = 2;
            const int CommandTreatment = 3;
            const int CommandUndercut = 4;

            int maximumHealth = 1000;
            int bossHealth = 1000;
            int golemHealth = 1000;
            int bossDamage = 100;
            int golemDamage = 50;
            int golemTreatment = 200;
            int seriesKnocks = 3;
            int clay = 2;
            int userInput;
            bool itSeriesKnocks = false;
            bool isWork = true;

            Console.WriteLine($""На выбор прёмы голема : \n {CommandKnock})Обычный удар ({golemDamage} урона)."" +
                $""\n {CommandSeriesKnock})Серия ударов (делает {seriesKnocks} обычных удара но след. ход отдыхает)."" +
                $""\n {CommandTreatment})Замазать раны глиной (восстановить {golemTreatment} жизней , {clay} куска глины)."" +
                $""\n {CommandUndercut})Подсечка (обезвредить противника в этом ходу и {golemDamage} урона)."");

            while (isWork)
            {
                if (itSeriesKnocks)
                {
                    Console.WriteLine(""Отдыхаете после серии ударов ."");
                    itSeriesKnocks = false;
                    golemHealth -= bossDamage;
                    Console.ReadKey();
                }
                else
                {
                    Console.WriteLine($""  Жизни босса - {bossHealth}\n  Жизни голема - {golemHealth}"");
                    Console.Write(""Выберите действие : "");
                    userInput = Convert.ToInt32(Console.ReadLine());

                    switch (userInput)
                    {
                        case CommandKnock:
                            bossHealth -= golemDamage;
                            golemHealth -= bossDamage;
                            break;

                        case CommandSeriesKnock:
                            bossHealth -= golemDamage * seriesKnocks;
                            golemHealth -= bossDamage;
                            itSeriesKnocks = true;
                            break;

                        case CommandTreatment:
                            golemHealth -= bossDamage;

                            if (clay > 0)
                            {
                                clay--;
                                golemHealth += golemTreatment;

                                if (golemHealth > maximumHealth)
                                {
                                    golemHealth = maximumHealth;
                                    Console.WriteLine(""Больше изначального вам не восстановиться."");
                                }
                            }
                            break;

                        case CommandUndercut:
                            bossHealth -= golemDamage;
                            break;
                    }

                    if (bossHealth <= 0 || golemHealth <= 0)
                    {
                        isWork = false;
                    }
                }
            }

            if (bossHealth > 0)
            {
                Console.WriteLine(""Голем повержен."");
            }
            else if (golemHealth > 0)
            {
                Console.WriteLine(""Босс повержен.""); ;
            }
            else
            {
                Console.WriteLine(""Ничья."");
            }
        }
    }
}"
DazfRjCL,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 07:10:39 AM CDT,"class Solution {
public:
    vector<int> process_lps(string s) {
        int j = 0, i = 1;
        vector<int> lps((int) s.size(), 0);
        lps[0] = 0;
        while(i < (int) s.size()) {
            if(s[i] == s[j]) {
                lps[i] = j + 1;
                i++;
                j++;
            }
            else {
                if(j != 0) {
                    j = lps[j - 1];
                }
                else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    string longestPrefix(string s) {
        vector<int> v = process_lps(s);
        
        return s.substr(0, v[(int) v.size() - 1]);
    }
};"
v65mEyRz,Lina_V3_visual_problem,alekssamos,Python,Saturday 30th of December 2023 06:57:32 AM CDT,"import sqlite3
import wx
import random
import sys
import os


class MyFrame(wx.Frame):
    def __init__(self, parent, title):
        super().__init__(parent, title =title)
        self.SetSize((800, 600))
        self.wait = False
        if not os.path.exists(self.path_file(""inf.db"")):
            conn = sqlite3.connect(self.path_file(""inf.db""))
            cursor = conn.cursor()
            cursor.execute(""CREATE TABLE chat (id INTEGER PRIMARY KEY, key TEXT, value TEXT)"")
            conn.commit()
            cursor.close()
        self.sb = wx.Simplebook(self)
        self.chat_panel = wx.Panel(self)
        self.chat_panel.SetMinSize((400, 300))
        self.sb.AddPage(self.chat_panel, ""chat_panel"", True)
        self.vbox = wx.BoxSizer(wx.VERTICAL)
        self.chat = wx.TextCtrl(self.chat_panel, style=wx.TE_MULTILINE)
        self.send_btn = wx.Button(self.chat_panel, label=""отправить"")
        self.education_btn = wx.Button(self.chat_panel, label=""обучение"")
        self.answer = wx.StaticText(self.chat_panel, label="""")
        self.vbox.Add(self.chat, flag=wx.ALL, border=10)
        self.vbox.Add(self.send_btn, flag=wx.ALL, border=10)
        self.vbox.Add(self.education_btn, flag=wx.ALL, border=10)
        self.send_btn.Bind(wx.EVT_BUTTON, self.choice_answer)
        self.education_btn.Bind(wx.EVT_BUTTON, self.show_education)
        self.chat_panel.SetSizer(self.vbox)
        self.vbox.Fit(self)
        self.item_panel = wx.Panel(self)
        self.item_panel.SetMinSize((400, 300))
        self.sb.AddPage(self.item_panel, ""item_panel"")
        self.item_vbox = wx.BoxSizer(wx.VERTICAL)
        self.chat_btn = wx.Button(self.item_panel, label=""чат"")
        new_item_btn = wx.Button(self.item_panel, label=""добавить"")
        self.item_vbox.Add(self.chat_btn, flag=wx.ALL, border=10)
        self.item_vbox.Add(new_item_btn, flag=wx.ALL, border=10)
        new_item_btn.Bind(wx.EVT_BUTTON, self.new_item)
        self.chat_btn.Bind(wx.EVT_BUTTON, self.show_chat)
        self.update_items()
        self.item_panel.SetSizer(self.item_vbox)
        self.item_vbox.Fit(self)
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        main_sizer.Add(self.sb, 1, wx.EXPAND, 0)
        self.SetSizer(main_sizer)
        self.Layout()
        self.Centre()

    def show_chat(self, e):
        self.sb.ChangeSelection(0)
        self.chat.SetFocus()

    def show_education(self, e):
        self.wait = False
        self.answer.SetLabel("""")
        self.sb.ChangeSelection(1)
        self.chat_btn.SetFocus()

    def remove(self, e):
        row_id = e.EventObject.GetId()
        remove_dlg = wx.MessageDialog(
            self,
            ""удалить эту фразу?"",
            ""удаление"",
            wx.YES_NO | wx.ICON_QUESTION
        )
        answer = remove_dlg.ShowModal()
        if answer ==  wx.ID_YES:
            conn = sqlite3.connect(self.path_file(""inf.db""))
            cursor = conn.cursor()
            cursor.execute(""DELETE FROM chat WHERE id=?"", (row_id,))
            conn.commit()
            cursor.close()
            conn.close()
            e.EventObject.Destroy()

    def new_item(self, e):
        new_item_dlg = wx.TextEntryDialog(
            self,
            message=""напиши фразу и ответ через дефис"",
            caption=""добавить"",
            style=wx.OK
        )
        new_item_dlg.ShowModal()
        value = new_item_dlg.GetValue()
        value = value.split(""-"")
        # убираем пробелы по краям
        value = list(map(lambda x: x.strip(), value))
        try:
            item = (value[0], value[1])
            conn = sqlite3.connect(self.path_file(""inf.db""))
            cursor = conn.cursor()
            cursor.execute(""INSERT INTO chat (key, value) VALUES (?, ?)"", item)
            conn.commit()
            cursor.close()
        except IndexError:
            return
        self.update_items()

    def update_items(self):
        conn = sqlite3.connect(self.path_file(""inf.db""))
        cursor = conn.cursor()
        result = cursor.execute(""SELECT id, key, value FROM chat"")
        rows = cursor.fetchall()
        for row in rows:
            id, key, value = row
            item_btn = wx.Button(self.item_panel, id=id, label=f""фраза: {key}, ответ: {value}"")
            self.item_vbox.Add(item_btn, flag=0, border=10)
            item_btn.Bind(wx.EVT_BUTTON, self.remove)
        self.item_vbox.Fit(self)
        self.Layout()
        cursor.close()
        conn.close()

    def path_file(self, file_name):
        if getattr(sys, 'frozen', False):
            return os.path.join(sys._MEIPASS, file_name)
        else:
            return file_name

    def choice_answer(self, e):
        self.text = self.chat.GetValue().strip() # убираем пробелы по краям
        self.chat.SetValue("""")
        if self.wait == False:
            self.show_answer()
        else:
            self.add_answer()
            self.wait = False
        self.vbox.Fit(self.answer)
        self.answer.SetFocus()

    def add_answer(self):
        save_answers = [""спасибо, я узнала"", ""спасибо, я поняла"", ""спасибо, всё понятно"", ""постараюсь это запомнить"", ""ок""]
        item = (self.question, self.text)
        conn = sqlite3.connect(self.path_file(""inf.db""))
        cursor = conn.cursor()
        cursor.execute(""INSERT INTO chat (key, value) VALUES (?, ?)"", item)
        conn.commit()
        cursor.close()
        self.answer.SetLabel(random.choice(save_answers))
        self.vbox.Fit(self.answer)

    def show_answer(self):
        wait_answer = [""что я должна ответить"", ""что мне надо на это ответить"", ""что я должна сказать""]
        conn = sqlite3.connect(self.path_file(""inf.db""))
        cursor = conn.cursor()
        result = cursor.execute(""SELECT value FROM chat WHERE key LIKE ?"", (""%""+self.text+""%"",))
        values = result.fetchall()
        if not values:
            self.answer.SetLabel(random.choice(wait_answer))
            self.vbox.Fit(self.answer)
            self.wait = True
        else:
            self.answer.SetLabel(random.choice(values)[0])
            self.vbox.Fit(self.answer)
        self.question = self.text
        conn.commit()
        cursor.close()


if __name__ == '__main__':
    app = wx.App()
    frame = MyFrame(None, ""test"")
    frame.Show()
    app.MainLoop()
"
353f2bFt,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 06:35:18 AM CDT,"#include <iostream>
#include <set>
#include <vector>

using namespace std;
const int maxn = 1e5 + 10;
typedef long long ll;
int a[maxn], n;
ll segment_tree[3 * maxn];
ll lazy[3 * maxn];
void build(int L, int R, int node) {
    if(L == R) {
        segment_tree[node] = a[L];
    }
    else {
        int mid = (L + R) / 2;
        build(L, mid, 2 * node);
        build(mid + 1, R, 2 * node + 1);
        segment_tree[node] = segment_tree[2 * node] + segment_tree[2 * node + 1];
    }
}
void push_lazy(int L, int R, int node) {
    if(lazy[node] == 0) {
        return;
    }
    segment_tree[node] += (R - L + 1) * lazy[node];
    if(L != R) {
        lazy[2 * node] += lazy[node];
        lazy[2 * node + 1] += lazy[node];
    }
    lazy[node] = 0;
}
void update(int L, int R, int node, int i, int j, int value) {
    push_lazy(L, R, node);
    if(L > R or i > R or L > j) return;
    
    if(i <= L and R <= j) {
        lazy[node] += value;
        push_lazy(L, R, node);
        return;
    }
    int mid = (L + R) / 2;
    update(L, mid, 2 * node, i, j, value);
    update(mid + 1, R, 2 * node + 1, i, j, value);
    segment_tree[node] = segment_tree[2 * node] + segment_tree[2 * node + 1];
}
ll query(int L, int R, int node, int pos) {
    // pos L pos R pos
    if(L > R or L > pos or pos > R) {
        return 0;
    }
    push_lazy(L, R, node);
    if(L == R) {
        return segment_tree[node];
    }
    int mid = (L + R) / 2;
    if(pos <= mid) {
        return query(L, mid, 2 * node, pos);
    }
    return query(mid + 1, R, 2 * node + 1, pos);
}
int first_left_binary_search(int L, int R, int h) {
    int res = n;
    while(L <= R) {
        int mid = (L + R) / 2;
        if(query(0, n - 1, 1, mid) >= h) {
            res = mid;
            R = mid - 1;
        }
        else {
            L = mid + 1;
        }
    }
    return res;
}
int new_left_binary_search(int L, int R, int try_right) {
    int res = n;
    while(L <= R) {
        int mid = (L + R) / 2;
        if(query(0, n - 1, 1, mid) >= query(0, n - 1, 1, try_right)) {
            res = mid;
            R = mid - 1;
        }
        else {
            L = mid + 1;
        }
    }
    return res;
}
int new_right_binary_search(int L, int R, int try_right) {
    int res = n;
    while(L <= R) {
        int mid = (L + R) / 2;
        if(query(0, n - 1, 1, mid) > query(0, n - 1, 1, try_right)) {
            res = mid;
            R = mid - 1;
        }
        else {
            L = mid + 1;
        }
    }
    return res;
}
int min_binary_search(int L, int R, int min) {
    int res = n;
    while(L <= R) {
        int mid = (L + R) / 2;
        if(query(0, n - 1, 1, mid) >= mid) {
            res = mid;
            R = mid - 1;
        }
        else {
            L = mid + 1;
        }
    }
    return res;
}
int max_binary_search(int L, int R, int max) {
    int res = n;
    while(L <= R) {
        int mid = (L + R) / 2;
        if(query(0, n - 1, 1, mid) > max) {
            res = mid;
            R = mid - 1;
        }
        else {
            L = mid + 1;
        }
    }
    return res;
}
int main()
{
    memset(lazy, 0, sizeof lazy);
    int q;
    cin >> n >> q;
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    build(0, n - 1, 1);
    for(int i = 0; i < q; i++) {
        char type;
        cin >> type;
        if(type == 'F') {
            int c, h;
            cin >> c >> h;
            int first_left = first_left_binary_search(0, n - 1, h);
            int try_right = first_left + c - 1;
            if(try_right >= n - 1) {
                update(0, n - 1, 1, first_left, try_right, 1);
                continue;
            }
            int new_left = new_left_binary_search(first_left, n - 1, try_right);
            int new_right = new_right_binary_search(new_left, n - 1, try_right) - 1;
            update(0, n - 1, 1, first_left, new_left - 1, 1);
            update(0, n - 1, 1, new_right - c + new_left - first_left + 1, new_right, 1);
            
//            for(int i = 0; i < n; i++) {
//                cout << query(0, n - 1, 1, i) << "" "";
//            }
//            cout << endl;
        }
        else {
            int minimum, maximum;
            cin >> minimum >> maximum;
            if(query(0, n - 1, 1, n - 1) < minimum) {
                cout << ""0\n"";
                continue;
            }
            int L = min_binary_search(0, n - 1,  minimum);
            int R = max_binary_search(0, n - 1, maximum);
            cout << R - L << ""\n"";
        }
    }
    return 0;
}

"
88Wmz1jW,fm2bm,ridwan100,MatLab,Saturday 30th of December 2023 06:32:38 AM CDT,"src_dir = '../uvmat/1/';
dst_dir = '../bm/1/';

files = dir(src_dir);
n = length(files);

% Define the uv2mp function using griddata
function mp = uv2mp_griddata(uv)
    [rows, cols, ~] = size(uv);
    
    % Create a grid for the entire image
    [X, Y] = meshgrid(1:cols, 1:rows);
    
    % Reshape the UV data for interpolation
    uv_reshaped = reshape(uv, [], 3);
    
    % Extract UV channels
    u = uv_reshaped(:, 1);
    v = uv_reshaped(:, 2);
    mp_channel = uv_reshaped(:, 3);
    
    % Perform interpolation for each channel using griddata
    mp_u = griddata(X(:), Y(:), mp_channel, u, v, 'linear');
    mp_v = griddata(X(:), Y(:), mp_channel, u, v, 'linear');
    
    % Combine the interpolated results into the final mapping
    mp = cat(3, mp_u, mp_v);
end

% the loop should be modified based on how you organize your images
parfor k = 1 : n
    % check if the output directory exists, otherwise, create one
    t = dst_dir;
    if ~exist(t, 'dir')
        mkdir(t);
    end
    
    currf = files(k).name;
    if ~isempty(strfind(currf, '.mat'))
        fname = fullfile(src_dir, currf);
        disp(k);
        d = load(fname);
        % read uv
        uv = double(d.uv); % Convert to double
        % flip v
        uv = cat(3, uv(:, :, 3), 1.0 - uv(:, :, 2), uv(:, :, 1));
        % compute backward mapping using griddata
        bm = uv2mp_griddata(uv);
        % save file using save function
        save(fullfile(t, currf), 'bm');
    end
end
"
0vahPEmm,exr2mat,ridwan100,Python,Saturday 30th of December 2023 06:31:10 AM CDT,"import sys
import cv2
import numpy as np
from hdf5storage import savemat
import os

# Set the environment variable to enable OpenEXR codec
os.environ[""OPENCV_IO_ENABLE_OPENEXR""] = ""1""

rridx = sys.argv[-1]

def saveasmat(file_path, dst_path):
    img = cv2.imread(file_path, cv2.IMREAD_ANYDEPTH | cv2.IMREAD_UNCHANGED)
    savemat(dst_path, {'uv': img})

import multiprocessing
pool = multiprocessing.Pool(processes=2)

src_dir = '../uv/{}/'.format(rridx)
dst_dir = '../uvmat/{}/'.format(rridx)

if not os.path.exists(dst_dir):
    os.makedirs(dst_dir)

for fname in os.listdir(src_dir):
    if '.exr' in fname:
        file_name = os.path.join(src_dir, fname)
        if not os.path.isfile(file_name):
            continue
        t = dst_dir
        if not os.path.exists(t):
            os.makedirs(t)
        dst_name = os.path.join(t, fname[:-4])
        pool.apply_async(saveasmat, (file_name, dst_name))

pool.close()
pool.join()
"
RA0ALCii,Untitled,sissou123,Python,Saturday 30th of December 2023 06:09:02 AM CDT,"Complete Machine Learning & Data Science Bootcamp 2023
Learn Data Science, Data Analysis, Machine Learning (Artificial Intelligence) and Python with Tensorflow, Pandas & more!
for more:https://dz-linkk.com/2Fqd2q"
zcKuFYxe,data798,TestGuy1,JSON,Saturday 30th of December 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'bf8f95640c161a3d616bf7d2e0e46881cbc4ae0e73e664653d327adc51543d4e5b358d70608b3cd70fe9df0171d8ef5e33b040012a75fd47f7effe8bf016c379e8f75adc54f2333c0bd597da3b26a3afdd818796d9fff0873e0528180ed76e3477bf26c23a69811590928d4ba33bb981c1b5da353a4e3ec90c70c9a0103f2792',
  otherdata: [
    'add22879ad00a0a8a37977a123c340fb',
    'ce0da7915717723306a195aa1c12557d',
    '2b0fcf13c03d19b127f59f091a4c39dd',
    '3dd716b73755e1fcc0ccc817b8af52f1',
    '52b8c135f8314476dde502101a33168c',
    '3e92845f22623c3ad9b6ee50c0337fe7',
    '449e6359b948840caed91bf4b85aecff',
    'ceac8b38e732d27e7c4d4fdae5946844'
  ]
}"
EpTyRbSM,Monitoring Sawah dengan Arduino,cisco404,C++,Saturday 30th of December 2023 05:48:49 AM CDT,"// Deklarasi variabel
int sensorKetinggianAir = A0;
int sensorKelembabanTanah = A1;
int sensorSuhuUdara = A2;
int sensorCurahHujan = A3;

// Setup
void setup() {
  // Inisialisasi pin digital
  pinMode(sensorKetinggianAir, INPUT);
  pinMode(sensorKelembabanTanah, INPUT);
  pinMode(sensorSuhuUdara, INPUT);
  pinMode(sensorCurahHujan, INPUT);

  // Mulai serial monitor
  Serial.begin(9600);
}

// Loop
void loop() {
  // Baca data dari sensor
  int ketinggianAir = analogRead(sensorKetinggianAir);
  int kelembabanTanah = analogRead(sensorKelembabanTanah);
  int suhuUdara = analogRead(sensorSuhuUdara);
  int curahHujan = analogRead(sensorCurahHujan);

  // Proses data
  // ...

  // Tampilkan data ke serial monitor
  Serial.print(""Ketinggian air: "");
  Serial.println(ketinggianAir);
  Serial.print(""Kelembaban tanah: "");
  Serial.println(kelembabanTanah);
  Serial.print(""Suhu udara: "");
  Serial.println(suhuUdara);
  Serial.print(""Curah hujan: "");
  Serial.println(curahHujan);

  // Delay
  delay(1000);
}"
DxiuCaDt,deepSpaceD-6,angeldp,Python,Saturday 30th of December 2023 05:33:41 AM CDT,"# -*- coding: utf-8 -*-
""""""
function module for Deep Space D-6
Created on Wed Dec 27 20:25:12 2023

@author: 
""""""
# IMPORTS

# The random module is used to generate random values
# Used in generate_crew() and commander() to use randint()
from random import(randint)
# The os module is used to interact with the system
# Used in clear_screen() to use os.name() and os.system()
from os import(name, system)

# Functions to be developed, necessary for the operation

def new_threat(deck):
    """"""
    To Be Developed

    Parameters
    ----------
    deck : array
        Deck of threat cards in play.
    
    Returns
    -------
    deck: array
        Updated deck
        
    """"""
    deck.remove(deck[0])
    print('We get a threat card from the deck')
    return(deck)

def activate_threat():
    """"""
    To Be Developed

    Returns
    -------
    None.

    """"""
    threat_dice = randint(1,6)
    print(f'trigger threats corresponding to the number {threat_dice}')
    
def tactic(tacticn):
    """"""
    To Be Developed

    Parameters
    ----------
    tacticn : int
        Number of crew members (tactics) in play.
    
    Returns
    -------
    None.

    """"""
    print(f""The tactic's actions are carried out x {tacticn}"")
    
def doctor(doctorn):
    """"""
    To Be Developed

    Parameters
    ----------
    tacticn : int
        Number of crew members (doctors) in play.
    
    Returns
    -------
    None.

    """"""
    print(f""The doctor's actions are carried out x {doctorn}"")
    
def scientist(scientistn):
    """"""
    To Be Developed

    Parameters
    ----------
    tacticn : int
        Number of crew members (scientists) in play.
    
    Returns
    -------
    None.

    """"""
    print(f""The scientist's actions are carried out x {scientistn}"")
    
def engineer(engineern):
    """"""
    To Be Developed

    Parameters
    ----------
    tacticn : int
        Number of crew members (engineers) in play.
    
    Returns
    -------
    None.

    """"""
    print(f""The engineer's actions are carried out x {engineern}"")

# Completed functions in alpha version

def clear_screen():
    """"""
    Clear the user screen based on the operating system used

    Returns
    -------
    None.

    """"""
    
    if name == ""posix"":
        system(""clear"")
    elif name == ""ce"" or name == ""nt"" or name == ""dos"":
        system (""cls"")

def generate_crew(crewn):
    """"""
    Receives the number of active crew members (crewn)
    to complete with random values ​​between 1 and 6
    a crew sized array.

    Parameters
    ----------
    crewn : int
        Number of crew members (dice) in play.

    Returns
    -------
    crew : array
        Result of the dice roll.

    """"""
    
    # Loop through the array storing random values between 1 and 6
    crew = []
    for i in range(crewn):
        crew.append(randint(1, 6))
    return crew

def pretty_shown_crew(crew):
    """"""
    Shows crew as a ASCII dice roll

    Parameters
    ----------
    crew : array
        Result of the dice roll.

    Returns
    -------
    None.

    """"""
    # dice sides in ascii
    PRETTY_DICE = {
        1: (
            ""┌─────────┐"",
            ""│         │"",
            ""│    ●    │"",
            ""│         │"",
            ""└─────────┘"",
            ),
        2: (
            ""┌─────────┐"",
            ""│  ●      │"",
            ""│         │"",
            ""│      ●  │"",
            ""└─────────┘"",
            ),
        3: (
            ""┌─────────┐"",
            ""│  ●      │"",
            ""│    ●    │"",
            ""│      ●  │"",
            ""└─────────┘"",
            ),
        4: (
            ""┌─────────┐"",
            ""│  ●   ●  │"",
            ""│         │"",
            ""│  ●   ●  │"",
            ""└─────────┘"",
            ),
        5: (
            ""┌─────────┐"",
            ""│  ●   ●  │"",
            ""│    ●    │"",
            ""│  ●   ●  │"",
            ""└─────────┘"",
            ),
        6: (
            ""┌─────────┐"",
            ""│  ●   ●  │"",
            ""│  ●   ●  │"",
            ""│  ●   ●  │"",
            ""└─────────┘"",
            ),
        }
    #  dice height (rows) and separator (sep)
    DICE_ROWS = len(PRETTY_DICE[1])
    DICE_SEP = ' '
    pretty_faces = []
    for n in crew:
        pretty_faces.append(PRETTY_DICE[n])
        dice_faces_rows = []
        for row_id in range(DICE_ROWS):
            row_components = []
            for die in pretty_faces:
                row_components.append(die[row_id])
            row_string = DICE_SEP.join(row_components)
            dice_faces_rows.append(row_string)
    width = len(dice_faces_rows[0])
    diagram_header = "" CREW "".center(width, ""~"")
    dice_faces_diagram = ""\n"".join([diagram_header] + dice_faces_rows)
    # the result is shown
    print(f""{dice_faces_diagram}\n"")

def scan_threats(crew, scant, deck):
    """"""
    loops through the 'crew' array to get the number of sixes.
    If 'scant' plus that number is less than 3 the variable 'scant'
    is updated; If it is equal to or greater than 3, it calculates
    the module of that value between 3 and saves it in 'scant'
    and draws a new threat card [new_threat()].
    It will have to do this as many times as the integer part 
    indicates by dividing the number of scanners by 3

    Parameters
    ----------
    crew : array
        Result of the dice roll.
    scant : int
        Number of busy scanners. Value between 0 and 2.
    Returns
    -------
    scant : int
        Updated number of busy scanners. Value between 0 and 2.

    """"""
    # 'n6' will store the number of sixes in 'crew'
    n6 = 0
    for i in crew:
        if i == 6:
            n6 += 1
    # The number of scanners is updated
    scant = scant + n6

    # If 'scant' is equal to or greater than 3, 
    # I draw as many threat cards as groups of 3
    # have been obtained and I update scant 
    # with the rest of the division
    
    if scant >= 3:
        rango = scant // 3
        for n in range(rango):
            new_threat(deck)
        scant = scant % 3
        
    return(scant)  

def commander(crew):
    """"""
    Actions to perform with each '1' obtained in the roll.
    It must ask if you want to change any crew member or re-roll
    available crew.  
    It will need to validate all user input. 
    It needs the crew array and returns it modified
    
    Parameters
    ----------
    crew : array
        Result of the dice roll.

    Returns
    -------
    crew : array
        Dice roll result modified by commander.

    """"""

    print('Commander available:')
    # The key pressed by the user is stored in 'c'.
    c = 'x'
    oldcrew = ''
    # Prompt until a valid value is obtained
    while c.lower() != 'c' and c.lower() != 'r':
        c = input(""Do you want to change any members of your crew (c) \n \
        or re-roll de dice (r)? c/r\n"")
    if c.lower() == 'c':
        # At this point 'c' is used to validate that the number is on the
        # 'crew' (an unavailable crew member cannot be changed)
        c = 'n'
        while c == 'n':
            # 'cont' stores the position in the array in which 
            # the indicated value is located
            cont = 0
            oldcrew = int(input(""Number of the crew member to be replaced:""))
            # If a 6 (scanner) has been indicated, it moves on to the next 
            #iteration without doing anything else (continues requesting 
            # a crew member until a valid value is received)
            if oldcrew == 6:
                continue
            for i in crew:
                if i == oldcrew:
                # If the entered value is available the new value is requested,
                # making sure that a value between 2 and 5 is indicated.
                    newcrew = 1
                    while newcrew < 2 or newcrew > 5:
                        newcrew = int(input(""Value of the new crew member (2-5)""))
                    crew[cont] = newcrew
                    # 'c' is updated to stop prompting. 
                    c = ''
                    break
                cont += 1
    elif c.lower() == 'r':
        ncrew = []
        cont = 0
        while cont < len(crew):
            if crew[cont] == 1 or crew[cont] == 6: 
                ncrew.append(crew[cont])
            else:
                ncrew.append(randint(1,6))
            cont += 1
        # Crew update
        crew = ncrew
    if c == 'c': print(f'Successfully changed {oldcrew} to {newcrew}')
    print(f""Nueva tripulación: {crew}"")
    pretty_shown_crew(crew)
    return(crew)

def assign_crew(crew):
    """"""
    If there are commanders in the roll, it is responsible for updating the 
    crew and, in any case, calls the functions of each crew member with 
    the number of them available.

    Parameters
    ----------
    crew : array
        Result of the dice roll.

    Returns
    -------
    None.

    """"""
    # The new crew
    ncrew = []
    # Number of crew members of each type
    tacticn = 0
    doctorn = 0
    scientistn = 0
    engineern = 0
    # in search of the commander 
    for i in range(len(crew)):
        if crew[i] == 1: ncrew = commander(crew)
  
    # Crew update if modified
    if len(ncrew) != 0 : crew = ncrew    
    # For the rest of the tasks, the appropriate functions are called 
    # with the number of crew members of each type.
    for i in range(len(crew)):
        if crew[i] == 2: tacticn += 1
        elif crew[i] == 3: doctorn += 1
        elif crew[i] == 4: scientistn += 1
        elif crew[i] == 5: engineern += 1
    if tacticn > 0: tactic(tacticn)
    if doctorn > 0: doctor(doctorn)
    if scientistn > 0: scientist(scientistn)
    if engineern > 0: engineer(engineern)

# MAIN

def main_program():
    deck = list(range(0,9))
    print(deck)
    i = 0
    scant = 0
    crewn = 6
    while i < len(deck):
        clear_screen()
        print(f'\n\nRound #{i + 1}')
        print(""1:\nHere is the dice roll"")
        crew = generate_crew(crewn)
        print(crew)
        pretty_shown_crew(crew)
        scant = scan_threats(crew, scant, deck)
        print(f""2:\nYou have {scant} scanners in use and {crewn} crew\n \
        members available for the next round"")
        print(""3:"")
        assign_crew(crew)
        print(crew)
        print(""4:"")
        deck = new_threat(deck)
        print(f""{len(deck)} card(s) remaining"")
        print(""5:"")
        activate_threat()
        crewn = 6 - scant
        if crewn < 1:
            print('You lost!')
            return(0)
        print(f""6:\n{crewn} crew members available"")
        i += 1
        c = input(""Press enter to start the next round"")
    print('Won!')
    c = input('Press enter to exit')
    return(0)

main_program()


"
bnTKR3iP,database.rs,mounty,Rust,Saturday 30th of December 2023 05:24:34 AM CDT,"use postgres::{Client, NoTls, Error, Row};
use std::collections::HashMap;
use std::task::Context as TC;
use std::vec::Vec;
use actix::{Actor, Addr, Context, System, MailboxError};
use actix::prelude::Handler;
use actix::prelude::Message;
use core::marker::Sync;
use postgres::types::ToSql;
use crate::global_config;
use crate::logging;
use futures::executor::block_on;


struct Connection { connection: Result<Client, Error> }


impl Actor for Connection {
	type Context = Context<Self>;

	fn started(&mut self, _ctx: &mut Self::Context) {
		logging::info(""Database connected"");
	}
}


#[derive(Message)]
#[rtype(result = ""Result<Vec<Row>, Error>"")]
struct SQLQuery {
	query: &'static str,
	parameters: &'static [&'static (dyn ToSql + Sync)]
}


impl Handler<SQLQuery> for Connection {
	type Result = Result<Vec<Row>, Error>;

	fn handle(&mut self, msg: SQLQuery, _ctx: &mut Context<Self>) -> Self::Result {
		self.connection?.query(msg.query, msg.parameters)
	}
}


static connection: Addr<Connection> = {
	let system = System::new();
	let addr = system.block_on(async { Connection::create(|ctx| {
		Connection { connection: connection_instance() }
	}) });
	system.run().unwrap();
	addr
};


pub fn query(query: &'static str, parameters: &'static [&(dyn ToSql + Sync)]) -> Result<Result<Vec<Row>, Error>, MailboxError> {
	block_on(connection.send(SQLQuery{ query, parameters }))
}


fn connection_instance() -> Result<Client, Error> {
	let useless_default = ""docile"";
	let host = global_config::item(""db.host"").unwrap_or(""127.0.0.1"");
	let user = global_config::item(""db.user"").unwrap_or(useless_default);
	let base = global_config::item(""db.database"").unwrap_or(useless_default);
	let connection_string = format!(""host={host} user={user} database={base}"");
	Client::connect(&connection_string[..], NoTls)
}"
uG13x2Wh,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 05:23:29 AM CDT,"#include <iostream>
#include <set>
#include <vector>
#include <bits/stdc++.h>
using namespace std;
 
const long long maxn =1e6+10;
const long long mod=1e9+7;
 
int main()
{
    ///ifstream cin(""haircut.in"");
    ///ofstream cout(""haircut.out"");
    ios_base::sync_with_stdio(false); cin.tie(0);
    long long n,k;
    cin>>n>>k;
    vector<pair<long long,long long>>v;
    for(long long i=0;i<n;i++)
    {
        long long x,y;
        cin>>x>>y;
        v.push_back({y,x});
    }
    sort(v.begin(),v.end());
    multiset<long long>ms;
    while(k--)
    {
        ms.insert(0);
    }
    long long ans=0;
    for(long long i=0;i<n;i++)
    {
        multiset<long long>::iterator it = ms.upper_bound(v[i].second);
        if(it == ms.begin()) continue;
        it--;
        
        ms.erase(it);
        ms.insert(v[i].first);
        ans++;
    }
    
    cout<<ans<<endl;
}
"
zcys0BxE,Untitled,dllbridge,C,Saturday 30th of December 2023 05:06:42 AM CDT,"
#include    <stdio.h>
#include   <string.h>
 


char sz1[17] =    ""SONY "",
     sz2[17] = ""Pictures"";  




////////////////////////////////////////////////////////
int main()                                            //
{
	
	strcpy(sz1, sz2);
	
	printf(""%s"", sz1);
}

























/*
#include    <stdio.h>
//#include   <string.h>
 


char sz[17] = ""SONY _ Picterws"";


int _strlen (char *p);
int _strlen1(char *p);
int _strlen2(char *p);

////////////////////////////////////////////////////////
int main()                                            //
{
	
	
	int d = _strlen2(sz);
	
	printf(""%d"", d);
	
}


////////////////////////////////////////////////////////
int _strlen2(char *p)
{
	
	int i = 0;
	
	for(; p[i]; i ++);

	
return i;	
}



////////////////////////////////////////////////////////
int _strlen1(char *p)
{
	
	int i = 0;
	
	for(; p[i] != 0; i ++);

	
return i;	
}




////////////////////////////////////////////////////////
int _strlen(char *p)
{
	
	int i = 0;
	
	for(; i < 100; i ++)
	{
		
		if(p[i] == 0) break; 
	}
	
return i;	
}





*/











/*
#include    <stdio.h>
#include   <string.h>
 


char sz[17] = ""SONY Picterws"";

////////////////////////////////////////////////////////
int main()                                            //
{
	
	
	int d = strlen(sz);
	
	printf(""%d"", d);
	
}

*/






















/*

#include   <stdio.h>
 
 
int     n =   22;
char    c =  't';
float   f = 3.14; 
double f2 = 3.14;

char sz[17] = ""SONY"";

////////////////////////////////////////////////////////
int main()                                            //
{

    printf(""size of    int  = %2d bytes\n"", sizeof(int   ) );
    printf(""size of   char  = %2d bytes\n"", sizeof(char  ) );
    printf(""size of  float  = %2d bytes\n"", sizeof(float ) );
    printf(""size of double  = %2d bytes\n"", sizeof(double) ); 
    printf(""size of sz[17]  = %2d bytes\n"", sizeof(sz    ) );	   
}



*/






















/*

 
#include   <stdio.h>
 
 
int n = 22;
 
//    Ðàçáèòü íà if & goto 
////////////////////////////////////////////////////////
int main()                                            //
{

    if(n == 5) { printf(""May    \n"");  goto L_01; }
    if(n == 7) { printf(""July   \n"");  goto L_01; } 
    if(n == 8) { printf(""August \n"");  goto L_01; } 	        
                 printf(""Error! \n"");
    
L_01: return 7;
}
 

*/




"
5xZJPBCL,Rotating Dial,TitanOP,Dart,Saturday 30th of December 2023 05:04:19 AM CDT,"import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'dart:math' as math;

class Pawned extends StatefulWidget {
  const Pawned({super.key});

  @override
  State<Pawned> createState() => _PawnedState();
}

class _PawnedState extends State<Pawned> {
  double outerDialAngle = 0.0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Combination Dial'),
      ),
      body: Center(
        child: Stack(
          alignment: Alignment.center,
          children: [
            // Outer Dial
            GestureDetector(
              onPanUpdate: (details) {
                setState(() {
                  outerDialAngle += details.primaryDelta ?? 0.0;
                });
              },
              child: Transform.rotate(
                angle: math.pi * outerDialAngle / 180.0,
                child: SvgPicture.asset(
                  'asset/outer_dial.svg', // Replace with your SVG image path
                ),
              ),
            ),

            // Progress Dial
            SizedBox(
              width: 282,
              height: 282,
              child: CircularProgressIndicator(
                value: outerDialAngle % 360 / 360,
                backgroundColor: Colors.grey,
                valueColor: const AlwaysStoppedAnimation<Color>(Colors.green),
              ),
            ),

            // Inner Circle
            Container(
              width: 192,
              height: 192,
              decoration: const BoxDecoration(
                shape: BoxShape.circle,
                color: Colors.green,
              ),
              child: Center(
                child: Text(
                  calculateNumber(outerDialAngle),
                  style: const TextStyle(fontSize: 24),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  String calculateNumber(double angle) {
    // Calculate the number based on the angle
    int number = ((angle % 360) / 18).round() + 1;
    return number.toString();
  }
}
"
z6SqYvT3,Untitled,kwest87,C#,Saturday 30th of December 2023 04:53:34 AM CDT,"using System;

namespace ConsoleApp19
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const int CommandKnock = 1;
            const int CommandSeriesKnock = 2;
            const int CommandTreatment = 3;
            const int CommandUndercut = 4;

            int bossHealth = 1000;
            int golemHealth = 1000;
            int bossDamage = 100;
            int golemDamage = 50;
            int golemTreatment = 200;
            int clay = 2;
            int userInput;
            bool itSeriesKnocks = false;
            bool isWork = true;

            Console.WriteLine($""На выбор прёмы голема : \n {CommandKnock})Обычный удар (50 урона)."" +
                $""\n {CommandSeriesKnock})Серия ударов (делает 3 обычных удара но след. ход отдыхает)."" +
                $""\n {CommandTreatment})Замазать раны глиной (восстановить 200 жизней , 2 куска глины)."" +
                $""\n {CommandUndercut})Подсечка (обезвредить противника в этом ходу и 50 урона)."");

            while (isWork)
            {
                if (itSeriesKnocks)
                {
                    Console.WriteLine(""Отдыхаете после серии ударов ."");
                    itSeriesKnocks = false;
                    golemHealth -= bossDamage;
                    Console.ReadKey();
                }
                else
                {
                    Console.WriteLine($""  Жизни босса - {bossHealth}\n  Жизни голема - {golemHealth}"");
                    Console.Write(""Выберите действие : "");
                    userInput = Convert.ToInt32(Console.ReadLine());

                    switch (userInput)
                    {
                        case CommandKnock:
                            bossHealth -= golemDamage;
                            golemHealth -= bossDamage;
                            break;

                        case CommandSeriesKnock:
                            bossHealth -= golemDamage + golemDamage + golemDamage;
                            golemHealth -= bossDamage;
                            itSeriesKnocks = true;
                            break;

                        case CommandTreatment:
                            golemHealth -= bossDamage;

                            if (clay > 0)
                            {
                                clay--;
                                golemHealth += golemTreatment;
                            }
                            break;

                        case CommandUndercut:
                            bossHealth -= golemDamage;
                            break;
                    }

                    if (bossHealth <= 0 || golemHealth <= 0)
                    {
                        isWork = false;
                    }
                }
            }

            if (bossHealth > 0)
            {
                Console.WriteLine(""Голем повержен."");
            }
            else if (golemHealth > 0)
            {
                Console.WriteLine(""Босс повержен.""); ;
            }
            else
            {
                Console.WriteLine(""Ничья."");
            }
        }
    }
}"
URwaXghq,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:47:55 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    int najmal = niza[0];
    int reden_broj = 1;
    
    for(int i = 0; i < n; i++) {
        if(niza[i] < najmal) {
            najmal = niza[i];
            reden_broj = i + 1;
        }
    }
    cout << reden_broj << "" "" << najmal << endl;
  
   
    return 0;
}
"
pi03qyU2,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:40:19 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int zbir = 0;
    int volsebnici = 1;
    for(int i = 0; i < n; i++) {
        zbir += niza[i] + 1;
        if(zbir >= n) {
            break;
        }
        volsebnici++;
    }
    cout << volsebnici << endl;
   
    return 0;
}
"
pUBwXB1B,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:32:24 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int najmal = niza[0];
    int indeks_najmal = 0;
    
    int najgolem = niza[0];
    int indeks_najgolem = 0;
    
    for(int i = 0; i < n; i++) {
        if(niza[i] < najmal) {
            najmal = niza[i];
            indeks_najmal = i;
        }
        
        if(niza[i] > najgolem) {
            najgolem = niza[i];
            indeks_najgolem = i;
        }
    }
    
    for(int i = indeks_najmal; i <= indeks_najgolem; i++) {
        cout << niza[i] << "" "";
    }
    
   
    return 0;
}
"
emWAfdmr,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:29:36 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int najmal = niza[0];
    int indeks_najmal = 0;
    
    int najgolem = niza[0];
    int indeks_najgolem = 0;
    
    for(int i = 0; i < n; i++) {
        if(niza[i] < najmal) {
            najmal = niza[i];
            indeks_najmal = i;
        }
        
        if(niza[i] > najgolem) {
            najgolem = niza[i];
            indeks_najgolem = i;
        }
    }
    cout << najmal << "" "" << indeks_najmal << endl;
    cout << najgolem << "" "" << indeks_najgolem << endl;
   
    return 0;
}
"
Gsg15D6C,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:24:21 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int najmal = niza[0];
    for(int i = 0; i < n; i++) {
        if(niza[i] < najmal) {
            najmal = niza[i];
        }
    }
    cout << najmal << endl;
   
    return 0;
}
"
hxfKAPT7,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:20:02 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int najgolem = niza[0];
    for(int i = 0; i < n; i++) {
        if(niza[i] > najgolem) {
            najgolem = niza[i];
        }
    }
    cout << najgolem << endl;
    return 0;
}
"
ULdpuatc,Untitled,Josif_tepe,C++,Saturday 30th of December 2023 04:13:19 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    for(int i = n - 1; i >= 0; i--) {
        cout << niza[i] << "" "";
    }
    return 0;
}
"
jNzEv3YT,Untitled,ProgMe,C++,Saturday 30th of December 2023 03:35:27 AM CDT,"#include <bits/stdc++.h>

using namespace std;

class Trie {
    struct Node {
        int cnt = 0;
        int pref = 0;

        Node* pr = nullptr;

        map<char, Node *> next;
    };

    Node* root = nullptr;

    void print(Node* cur, string s);

    string kth(int idx, Node* cur, string s);
public:
    Trie();

    void insert(const string& s);

    void erase(const string& s);

    bool check(const string& s);

    void print();

    string kth(int idx);
};

Trie::Trie() {
    root = new Node();
}

void Trie::insert(const std::string& s) {
    Node* cur = root;

    for (auto i : s) {
        ++cur->pref;
        if (!cur->next[i]) {
            cur->next[i] = new Node();
            cur->next[i]->pr = cur;
        }
        cur = cur->next[i];
    }

    ++cur->cnt;
    ++cur->pref;
}

void Trie::erase(const string& s) {
    Node* cur = root;

    for (auto i : s) {
        if (!cur->next[i]) {
            return;
        }
        cur = cur->next[i];
    }

    if (cur->cnt) {
        --cur->cnt;
        --cur->pref;
        while (cur->pr) {
            cur = cur->pr;
            --cur->pref;
        }
    }
}

bool Trie::check(const string& s) {
    Node* cur = root;

    for (auto i : s) {
        if (!cur->next[i]) {
            return false;
        }
        cur = cur->next[i];
    }

    return cur->cnt;
}

void Trie::print() {
    print(root, """");
}

void Trie::print(Node* cur, string s) {

    for (auto [c, to] : cur->next) {
        if (to) {
            s.push_back(c);
            print(to, s);
            s.pop_back();
        }
    }

    if (cur->cnt) {
        cout << s << '\n';
    }
}

string Trie::kth(int idx) {
    return kth(idx, root, """");
}

string Trie::kth(int idx, Node* cur, string s) {
    if (cur->cnt > idx) {
        return s;
    }
    idx -= cur->cnt;

    for (auto [c, to] : cur->next) {
        if (to->pref > idx) {
            s.push_back(c);
            return kth(idx, to, s);
        }
        idx -= to->pref;
    }

    return ""-1"";
}

int main() {
    Trie t;

    int q;
    cin >> q;
    while (q--) {
        int tp;
        cin >> tp;

        if (tp == 1) {
            string s;
            cin >> s;
           t.insert(s);
        } else if (tp == 2) {
            string s;
            cin >> s;
            t.erase(s);
        } else if (tp == 3) {
            string s;
            cin >> s;
            cout << t.check(s) << '\n';
            cout << '\n';
        } else if (tp == 4) {
            t.print();
            cout << '\n';
        } else {
            int idx;
            cin >> idx;
            cout << t.kth(idx) << '\n';
            cout << '\n';
        }
    }
}"
rmHHUH48,this does Not work yet!!!,ApexdaUser,Lua,Saturday 30th of December 2023 02:59:22 AM CDT,"-- Delta Custom Save-Instance (THIS DOES NOT WORK YET!!!)
-- This script does NOT save the instance that you put! It will save the descendants and put it in a folder in Workspace!
-- Made with love by zuzaratrust <3

-- Options
local instance = game.ReplicatedFirst -- The instance to save descendants from
-- more to be added later
-- End Options

-- Don't touch this code!!!!!!!!!!!!!!!!!!

local xml = [[<roblox xmlns:xmime=""http://www.w3.org/2005/05/xmlmime"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""http://www.roblox.com/roblox.xsd"" version=""4"">
]]
local curdata = [[]]
local parts = {}
local subitems = {}
local data
data = game:HttpGet(""https://setup.rbxcdn.com/versionQTStudio"", true)
data = game:HttpGet(""http://setup.rbxcdn.com/""..data..""-API-Dump.json"", true)
data = game:GetService(""HttpService""):JSONDecode(data)
data = data[""Classes""]
function propertyLookup(itype)
	print(""Requested Type:"", itype)
	local properties = {}
	local supersearch
	for i,v in pairs(data) do
		for k,j in pairs(v[""Members""]) do
			if j[""MemberType""] == ""Property"" and v[""Name""] == itype then
				table.insert(properties, j)
			end
			if v[""Superclass""] and v[""Name""] == itype then
				supersearch = v[""Superclass""]
			end
		end
	end
	if supersearch then
		for i,v in pairs(data) do
			for k,j in pairs(v[""Members""]) do
				if j[""MemberType""] == ""Property"" and v[""Name""] == supersearch then
					table.insert(properties, j)
				end
			end
		end
	end
	return properties
end
local cfrcomp = {""X"",""Y"",""Z"",""R00"",""R01"",""R02"",""R10"",""R11"",""R12"",""R20"",""R21"",""R22""}
print(""Initialized variables, starting child loop."")
for i,v in pairs(instance:GetDescendants()) do
curdata ..= ""<Item class=\"""" .. v.ClassName .. ""\"" referent=\"""" .. (#parts+1) .. ""\"">\n""
curdata ..= ""<Properties>\n""
table.insert(parts, v)
local properties = propertyLookup(v.ClassName)
for j,k in pairs(properties) do
pcall(function()
if (v[k[""Name""]] and not v:FindFirstChild(k[""Name""])) then
print(k[""Name""])
curdata ..= ""<""..(k[""ValueType""][""Name""] == ""BrickColor"" and ""int"" or (k[""ValueType""][""Name""] == ""Enum"" and ""token"" or (k[""ValueType""][""Name""] == ""CFrame"" and ""CoordinateFrame"" or k[""ValueType""][""Name""]))).."" name=\""""..k[""Name""]..""\"">""
if k[""Name""] == ""CFrame"" then
for z,x in pairs(table.pack(v[""CFrame""]:GetComponents())) do
if z ~= ""n"" then
curdata ..= ""<""..cfrcomp[z].."">""..x..""</""..cfrcomp[z].."">""
end
end
else
curdata ..= v[k[""Name""]] .. """"
end
curdata ..= ""</""..(k[""ValueType""][""Name""] == ""BrickColor"" and ""int"" or (k[""ValueType""][""Name""] == ""Enum"" and ""token"" or (k[""ValueType""][""Name""] == ""CFrame"" and ""CoordinateFrame"" or k[""ValueType""][""Name""]))).."">\n""
end
table.insert(subitems,curdata)
end)
curdata = """"
end
curdata ..= ""</Properties>\n""
curdata ..= ""</Item>\n""
end
print(""Done looping through children"")
xml ..= [[<Item class=""Workspace"" referent=""mainworkspace"">
<Properties>
</Properties>
<Item class=""Folder"" referent=""mainfolder"">
<Properties>
</Properties>
]]
print(""Looping through subitems to add to main folder."")
for i,v in pairs(subitems) do
xml ..= v
end
xml ..= [[</Properties>
</Item>
</Item>
</Item>
</roblox>]]
print(""Done!"")
print(""(temp action) Printing output XML..."")
print(xml)
print(""Copying to Clipboard..."")
setclipboard(xml)
print(""Done!"")"
wRt5udGx,Untitled,ProgMe,C++,Saturday 30th of December 2023 02:51:25 AM CDT,"class Trie {
    struct Node {
        bool is_end = false;

        map<char, Node *> next;
    };

    Node* root = nullptr;

public:
    Trie();

    void insert(string s);

    void erase(string s);

    bool check(string s);
};

Trie::Trie() {
    root = new Node();
}

void Trie::insert(std::string s) {
    Node* cur = root;

    for (auto i : s) {
        if (!cur->next[i]) {
            cur->next[i] = new Node();
        }
        cur = cur->next[i];
    }

    cur->is_end = true;
}

void Trie::erase(string s) {
    Node* cur = root;
    
    for (auto i : s) {
        if (!cur->next[i]) {
            return;
        }
        cur = cur->next[i];
    }
    
    cur->is_end = false;
}

bool Trie::check(string s) {
    Node* cur = root;

    for (auto i : s) {
        if (!cur->next[i]) {
            return false;
        }
        cur = cur->next[i];
    }
    
    return cur->is_end;
}"
Hgpe3cxU,oaaaa,hammercoolness,Lua,Saturday 30th of December 2023 01:27:50 AM CDT,"local osclock = os.clock()
repeat task.wait() until game:IsLoaded()

setfpscap(10)
game:GetService(""RunService""):Set3dRenderingEnabled(false)
local Booths_Broadcast = game:GetService(""ReplicatedStorage"").Network:WaitForChild(""Booths_Broadcast"")
local Players = game:GetService('Players')
local getPlayers = Players:GetPlayers()
local PlayerInServer = #getPlayers
local http = game:GetService(""HttpService"")
local ts = game:GetService(""TeleportService"")
local rs = game:GetService(""ReplicatedStorage"")
local playerID

if not snipeNormalPets then
    local snipeNormalPets = true
end

local vu = game:GetService(""VirtualUser"")
Players.LocalPlayer.Idled:connect(function()
   vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
   task.wait(1)
   vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

for i = 1, PlayerInServer do
   for ii = 1,#alts do
        if getPlayers[i].Name == alts[ii] and alts[ii] ~= Players.LocalPlayer.Name then
            jumpToServer()
        end
    end
end

local function processListingInfo(uid, gems, item, version, shiny, amount, boughtFrom, boughtStatus, mention)
    local gemamount = Players.LocalPlayer.leaderstats[""💎 Diamonds""].Value
    local snipeMessage =""||"".. Players.LocalPlayer.Name .. ""||""
    local weburl, webContent, webcolor
    if version then
        if version == 2 then
            version = ""Rainbow ""
        elseif version == 1 then
            version = ""Golden ""
        end
    else
       version = """"
    end

    if boughtStatus then
	webcolor = tonumber(0x00ff00)
	weburl = webhook
        snipeMessage = snipeMessage .. "" just sniped a ""
	if mention then 
            webContent = ""<@"".. userid .."">""
        else
	    webContent = """"
	end
	if normalwebhook then
	    weburl = normalwebhook
	end
    else
	webcolor = tonumber(0xff0000)
	weburl = webhookFail
	snipeMessage = snipeMessage .. "" failed to snipe a ""
    end
    
    snipeMessage = snipeMessage .. ""**"" .. version
    
    if shiny then
        snipeMessage = snipeMessage .. "" Shiny ""
    end
    
    snipeMessage = snipeMessage .. item .. ""**""
    
    local message1 = {
        ['content'] = webContent,
        ['embeds'] = {
            {
		[""author""] = {
			[""name""] = ""Luna 🌚"",
			[""icon_url""] = ""https://cdn.discordapp.com/attachments/1149218291957637132/1190527382583525416/new-moon-face_1f31a.png?ex=65a22006&is=658fab06&hm=55f8900eef039709c8e57c96702f8fb7df520333ec6510a81c31fc746193fbf2&"",
		},
                ['title'] = snipeMessage,
                [""color""] = webcolor,
                [""timestamp""] = DateTime.now():ToIsoDate(),
                ['fields'] = {
                    {
                        ['name'] = ""__Price:__"",
                        ['value'] = tostring(gems) .. "" 💎"",
                    },
                    {
                        ['name'] = ""__Bought from:__"",
                        ['value'] = ""||""..tostring(boughtFrom)..""|| "",
                    },
                    {
                        ['name'] = ""__Amount:__"",
                        ['value'] = tostring(amount) .. ""x"",
                    },
                    {
                        ['name'] = ""__Remaining gems:__"",
                        ['value'] = tostring(gemamount) .. "" 💎"",
                    },      
                    {
                        ['name'] = ""__PetID:__"",
                        ['value'] = ""||""..tostring(uid)..""||"",
                    },
                },
            },
        }
    }

    local jsonMessage = http:JSONEncode(message1)
    local success, webMessage = pcall(function()
	http:PostAsync(weburl, jsonMessage)
    end)
    if success == false then
        local response = request({
            Url = weburl,
            Method = ""POST"",
            Headers = {
                [""Content-Type""] = ""application/json""
            },
            Body = jsonMessage
        })
    end
end

local function checklisting(uid, gems, item, version, shiny, amount, username, playerid)
    local Library = require(rs:WaitForChild('Library'))
    local purchase = rs.Network.Booths_RequestPurchase
    gems = tonumber(gems)
    local ping = false
    local type = {}
    pcall(function()
        type = Library.Directory.Pets[item]
    end)

    if amount == nil then
        amount = 1
    end

    if type.exclusiveLevel and gems / amount <= 10000 and item ~= ""Banana"" and item ~= ""Coin"" then
        local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
        processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)
    elseif item == ""Titanic Christmas Present"" and gems / amount <= 25000 then
        local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
	processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)
    elseif string.find(item, ""Exclusive"") and gems / amount <= 25000 then
        local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
	processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)
    elseif type.huge and gems / amount <= 1000000 then
        local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
        if boughtPet == true then
            ping = true
	end
        processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)  
    elseif type.titanic and gems / amount <= 10000000 then
        local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
        if boughtPet == true then
	    ping = true
	end
        processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)
    elseif gems == 1 and snipeNormalPets == true then
	local boughtPet, boughtMessage = purchase:InvokeServer(playerid, uid)
        processListingInfo(uid, gems, item, version, shiny, amount, username, boughtPet, ping)  
    end
end

Booths_Broadcast.OnClientEvent:Connect(function(username, message)
    local playerIDSuccess, playerError = pcall(function()
	playerID = message['PlayerID']
    end)
    if playerIDSuccess then
        if type(message) == ""table"" then
            local listing = message[""Listings""]
            for key, value in pairs(listing) do
                if type(value) == ""table"" then
                    local uid = key
                    local gems = value[""DiamondCost""]
                    local itemdata = value[""ItemData""]

                    if itemdata then
                        local data = itemdata[""data""]

                        if data then
                            local item = data[""id""]
                            local version = data[""pt""]
                            local shiny = data[""sh""]
                            local amount = data[""_am""]
                            checklisting(uid, gems, item, version, shiny, amount, username , playerID)
                        end
                    end
                end
            end
	end
    end
end)

local function jumpToServer() 
    local sfUrl = ""https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s&excludeFullGames=true"" 
    local req = request({ Url = string.format(sfUrl, 15502339080, ""Desc"", 100) }) 
    local body = http:JSONDecode(req.Body) 
    local deep = math.random(1, 3)
    if deep > 1 then 
        for i = 1, deep, 1 do 
             req = request({ Url = string.format(sfUrl .. ""&cursor="" .. body.nextPageCursor, 15502339080, ""Desc"", 100) }) 
             body = http:JSONDecode(req.Body) 
             task.wait(0.1)
        end 
    end 
    local servers = {} 
    if body and body.data then 
        for i, v in next, body.data do 
            if type(v) == ""table"" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                table.insert(servers, v.id)
            end
        end
    end
    local randomCount = #servers
    if not randomCount then
       randomCount = 2
    end
    ts:TeleportToPlaceInstance(15502339080, servers[math.random(1, randomCount)], game:GetService(""Players"").LocalPlayer) 
end

Players.PlayerAdded:Connect(function(player)
    for i = 1,#alts do
        if  player.Name == alts[i] and alts[i] ~= Players.LocalPlayer.Name then
            jumpToServer()
        end
    end
end) 

game:GetService(""RunService"").Stepped:Connect(function()
    PlayerInServer = #getPlayers
    if PlayerInServer < 25 or math.floor(os.clock() - osclock) >= math.random(900, 1200) then
        jumpToServer()
    end
end)"
avkv1798,Dutch National Flag algorithm,naren_paste,Python,Friday 29th of December 2023 11:39:27 PM CDT,"def sort_array(arr):
    low, mid, high = 0, 0, len(arr) - 1

    while mid <= high:
        if arr[mid] == 0:
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 1:
            mid += 1
        else:
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1

    return arr

# Example usage:
arr = [0, 2, 1, 2, 0]
sorted_arr = sort_array(arr)
print(sorted_arr)
"
