id,title,username,language,date,content
CpCGXu8b,Request Body - Confluence,gvsandeep,JSON,Wednesday 29th of November 2023 12:00:02 AM CDT,"{
  ""type"": ""page"",
  ""title"": ""DC5 Release "",
  ""ancestors"": [
    {
      ""id"": 4069031994
    },
    {
      ""id"": 4235985070
    },
    {
      ""id"": 4235559085
    },
    {
      ""id"": 4697882670
    }
  ],
  ""space"": {
    ""key"": ""DC""
  },
  ""body"": {
    ""storage"": {
      ""value"": ""h3. Release Tags Created:\n\n\n| *Repo* |*Tags* |\n|\n| digital-currencies-api-app | https://github.com/corda/digital-currencies-api-app/releases/tag/release-0.4.0-RCTESTERSANDEEP |\nh3. Released Versions:\n\n \n\n| *Repo* |*Versions* |\n|\n| digital-currencies-api-app | 0.4.0-RCTESTERSANDEEP |\n\\\\ \\\\ \nh3. Deployable artifacts:\n\n \n\n| *Artifact* |*Image Version* |*Image Repo* |*Helm Chart Version* |*Helm Chart Repo* |\n|\n| dc-fast-track-api-app |  | digital-currencies-docker-stable.software.r3.com |  | oci://digital-currencies-docker-stable.software.r3.com/helm-charts/dc-fast-track-api-app |\n| dc-fast-track-keycloak |  | digital-currencies-maven-stable.software.r3.com | N/A | N/A |\n\n\nh3. Git Logs:\n\n*digital-currencies-api-app*\n{code}7417836 CDC-3450 Avoiding Snyk Issues in the reports (#100)\nba3f66e UAEFT-1276 The username must be used in lowercase (#92)\n{code}"",
      ""representation"": ""wiki""
    }
  }
}"
bXPmBLsM,Untitled,rahuldatainsights,JSON,Tuesday 28th of November 2023 11:52:25 PM CDT,"{
  ""Id"": 666991,
  ""Number"": ""830160"",
  ""Code"": null,
  ""Driver"": null,
  ""CarrierName"": ""Jack Richards"",
  ""CarrierCode"": ""JAC FTL NR"",
  ""TrailerNumber"": ""N/A"",
  ""CollectionDate"": ""2021-05-27T05:30:00"",
  ""Customer"": {
    ""Id"": 25,
    ""Name"": ""Linpac - Featherstone"",
    ""Code"": ""02101"",
    ""Carrier"": {
      ""Id"": 109,
      ""Code"": ""LP"",
      ""Name"": ""Linpac"",
      ""AddressLine1"": ""Address"",
      ""AddressLine2"": ""Address"",
      ""AddressLine3"": ""Address"",
      ""City"": ""City"",
      ""StateProvinceCounty"": ""State"",
      ""ZipOrPostcode"": ""Postcode"",
      ""CountryCode"": ""222"",
      ""Email"": ""Email""
    }
  },
  ""VehicleRegistration"": ""N/A"",
  ""PlanStatus"": 0,
  ""Assignments"": [
    {
      ""AssignmentId"": 1336624,
      ""PlanId"": 666991,
      ""Job"": {
        ""Id"": 36813647,
        ""Code"": null,
        ""Number"": ""1239398"",
        ""BookingReference"": ""auto book"",
        ""OrderNumber"": ""21370859, 21371163, 21371164"",
        ""Source"": {
          ""AddressId"": 40350,
          ""Name"": ""Klockner Pentaplast Featherstone"",
          ""Code"": ""02101"",
          ""AddressLine1"": ""Wakefield Road"",
          ""AddressLine2"": ""Featherstone"",
          ""Region"": """",
          ""PostCode"": ""WF7 5DE"",
          ""Town"": ""Near Pontefract"",
          ""Country"": null,
          ""CountryCode"": ""GB"",
          ""Longitude"": -1.3723304,
          ""Latitude"": 53.6767834,
          ""Email3"": null,
          ""Phone"": null
        },
        ""Destination"": {
          ""AddressId"": 61126,
          ""Name"": ""Pilgrims Pride Ltd - Ruskington"",
          ""Code"": ""47100"",
          ""AddressLine1"": ""Goods Inward (Packaging)"",
          ""AddressLine2"": ""Sleaford Road"",
          ""Region"": """",
          ""PostCode"": ""NG34 9BL"",
          ""Town"": ""Lincoln"",
          ""Country"": null,
          ""CountryCode"": ""GB"",
          ""Longitude"": -0.4047147,
          ""Latitude"": 52.8912646,
          ""Email3"": null,
          ""Phone"": null
        },
        ""DeliveryWindow"": {
          ""Start"": ""2021-05-27T07:30:00""
        },
        ""CollectionWindow"": {
          ""Start"": ""2021-05-26T00:00:00""
        },
        ""Weight"": 4184.9291839599591,
        ""PSE"": 37.66,
        ""SealNo"": null,
        ""PinNo"": ""21370859, 21371163, 21371164"",
        ""EquipmentType"": """",
        ""SpecialInstructions"": ""-"",
        ""JobItems"": [
          {
            ""Id"": 190688347,
            ""PodNumber"": """",
            ""Number"": ""21371163"",
            ""Code"": ""RPT F1281-33 CLR"",
            ""Description"": ""1033139"",
            ""ItemColor"": ""4512490762"",
            ""Quantity"": 4.0,
            ""NoContainers"": 2,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""6.000""
          },
          {
            ""Id"": 190688346,
            ""PodNumber"": """",
            ""Number"": ""21371163"",
            ""Code"": ""RPT F1020-60 CLR"",
            ""Description"": ""1016285"",
            ""ItemColor"": ""4512490762"",
            ""Quantity"": 1.0,
            ""NoContainers"": 1,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""5.000""
          },
          {
            ""Id"": 190688345,
            ""PodNumber"": """",
            ""Number"": ""21371163"",
            ""Code"": ""RPT F1020-39 CLR"",
            ""Description"": ""1016284"",
            ""ItemColor"": ""4512490762"",
            ""Quantity"": 2.0,
            ""NoContainers"": 1,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""4.000""
          },
          {
            ""Id"": 190688344,
            ""PodNumber"": """",
            ""Number"": ""21371163"",
            ""Code"": ""RPT F1282-65C2 CLR"",
            ""Description"": ""1033080"",
            ""ItemColor"": ""4512490762"",
            ""Quantity"": 1.0,
            ""NoContainers"": 1,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""3.000""
          },
          {
            ""Id"": 190688343,
            ""PodNumber"": """",
            ""Number"": ""21371163"",
            ""Code"": ""RPT F1027-62 CLR"",
            ""Description"": ""1016455"",
            ""ItemColor"": ""4512490762"",
            ""Quantity"": 5.0,
            ""NoContainers"": 3,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""2.000""
          },
          {
            ""Id"": 190688342,
            ""PodNumber"": """",
            ""Number"": ""21371163"",
            ""Code"": ""RPT F1021-66 CLR"",
            ""Description"": ""1018620"",
            ""ItemColor"": ""4512490762"",
            ""Quantity"": 10.0,
            ""NoContainers"": 5,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""1.000""
          },
          {
            ""Id"": 190688341,
            ""PodNumber"": """",
            ""Number"": ""21370859"",
            ""Code"": ""RPT F1281-33 CLR"",
            ""Description"": ""1033139"",
            ""ItemColor"": ""4512479537"",
            ""Quantity"": 3.0,
            ""NoContainers"": 2,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""7.001""
          },
          {
            ""Id"": 190688340,
            ""PodNumber"": """",
            ""Number"": ""21370859"",
            ""Code"": ""RPT F1020-39 CLR"",
            ""Description"": ""1016284"",
            ""ItemColor"": ""4512479537"",
            ""Quantity"": 1.0,
            ""NoContainers"": 1,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""5.000""
          }
        ],
        ""Events"": [],
        ""JobType"": 1
      },
      ""Sequence"": 1
    },
    {
      ""AssignmentId"": 1336625,
      ""PlanId"": 666991,
      ""Job"": {
        ""Id"": 36813648,
        ""Code"": null,
        ""Number"": ""1239620"",
        ""BookingReference"": ""Paul"",
        ""OrderNumber"": ""21370487, 21370835"",
        ""Source"": {
          ""AddressId"": 40350,
          ""Name"": ""Klockner Pentaplast Featherstone"",
          ""Code"": ""02101"",
          ""AddressLine1"": ""Wakefield Road"",
          ""AddressLine2"": ""Featherstone"",
          ""Region"": """",
          ""PostCode"": ""WF7 5DE"",
          ""Town"": ""Near Pontefract"",
          ""Country"": null,
          ""CountryCode"": ""GB"",
          ""Longitude"": -1.3723304,
          ""Latitude"": 53.6767834,
          ""Email3"": null,
          ""Phone"": null
        },
        ""Destination"": {
          ""AddressId"": 28353,
          ""Name"": ""T. Quality"",
          ""Code"": ""25129"",
          ""AddressLine1"": ""Unit D  Harrier Park"",
          ""AddressLine2"": ""Orton"",
          ""Region"": """",
          ""PostCode"": ""PE2 6YQ"",
          ""Town"": ""Peterborough"",
          ""Country"": null,
          ""CountryCode"": ""GB"",
          ""Longitude"": -0.3117113,
          ""Latitude"": 52.5362764,
          ""Email3"": null,
          ""Phone"": null
        },
        ""DeliveryWindow"": {
          ""Start"": ""2021-05-27T09:30:00""
        },
        ""CollectionWindow"": {
          ""Start"": ""2021-05-26T00:00:00""
        },
        ""Weight"": 77.000801563262911,
        ""PSE"": 3.57,
        ""SealNo"": null,
        ""PinNo"": ""21370487, 21370835"",
        ""EquipmentType"": """",
        ""SpecialInstructions"": ""BK IN 01733 393306"",
        ""JobItems"": [
          {
            ""Id"": 190688350,
            ""PodNumber"": """",
            ""Number"": ""21370835"",
            ""Code"": ""HP TT10/35 WHT"",
            ""Description"": ""1019115"",
            ""ItemColor"": ""929864/0"",
            ""Quantity"": 3.0,
            ""NoContainers"": 2,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""9.001""
          },
          {
            ""Id"": 190688349,
            ""PodNumber"": """",
            ""Number"": ""21370835"",
            ""Code"": ""HP HP2 WHT"",
            ""Description"": ""1002316 A"",
            ""ItemColor"": ""929864/0"",
            ""Quantity"": 4.0,
            ""NoContainers"": 1,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""2.000""
          },
          {
            ""Id"": 190688348,
            ""PodNumber"": """",
            ""Number"": ""21370487"",
            ""Code"": ""HP HP2 WHT"",
            ""Description"": ""1002316 A"",
            ""ItemColor"": ""928642/0"",
            ""Quantity"": 16.0,
            ""NoContainers"": 1,
            ""ASNNo"": """",
            ""FitDate"": null,
            ""FitTime"": null,
            ""Unit"": 2,
            ""OriginalDeliveryDateTime"": ""2021-05-26T23:00:00"",
            ""OriginalCollectionDateTime"": null,
            ""DeliveryQuantity"": 0.0,
            ""PackageNo"": ""4.000""
          }
        ],
        ""Events"": [],
        ""JobType"": 1
      },
      ""Sequence"": 2
    }
  ]
}"
qnyWkTDV,linee,RidwanRF,Lua,Tuesday 28th of November 2023 11:38:07 PM CDT,"local points, sticks = {}, {}
local gravity = 0.1
 
function point(x, y, z, pinned)
    return {
        pos = Vector3(x, y, z),
        oldPos = Vector3(x, y, z),
        pinned = (pinned or false)
    }
end
 
function stick(a, b)
    return {
        p0 = points[a],
        p1 = points[b],
        length = getDistanceBetweenPoints3D(points[a].pos, points[b].pos)*2
    }
end
 
function updatePoints(dt)
    for k,v in pairs(points) do
        if not v.pinned then
            if isLineOfSightClear(v.pos, Vector3(v.pos.x, v.pos.y, v.pos.z - gravity*dt), true, false, false, true) then
                v.pos.z = v.pos.z - gravity*dt
            end
            while not isLineOfSightClear(v.pos, Vector3(v.pos.x, v.pos.y, v.pos.z + 0.1), true, false, false, true) do
                v.pos.z = v.pos.z + 0.1
            end
        end
    end
end
 
function updateSticks(dt)
    for k,v in pairs(sticks) do
        local dx = v.p1.pos.x - v.p0.pos.x
        local dy = v.p1.pos.y - v.p0.pos.y
        local dz = v.p1.pos.z - v.p0.pos.z
        local dist = math.sqrt(dx * dx + dy * dy + dz * dz)
        local diff = v.length - dist
 
        local percent = diff / dist / 2
        local offsetX = dx * percent
        local offsetY = dy * percent
        local offsetZ = dz * percent
 
        if not v.p0.pinned then
            v.p0.pos.x = v.p0.pos.x - offsetX
            v.p0.pos.y = v.p0.pos.y - offsetY
            v.p0.pos.z = v.p0.pos.z - offsetZ
        end
 
        if not v.p1.pinned then
            v.p1.pos.x = v.p1.pos.x + offsetX
            v.p1.pos.y = v.p1.pos.y + offsetY
            v.p1.pos.z = v.p1.pos.z + offsetZ
        end
    end
end
 
function renderPoints()
    for k,v in pairs(points) do
        local x, y = getScreenFromWorldPosition(v.pos)
        if x and y then
            dxDrawRectangle(x-2, y-2, 4, 4, white)
        end
    end
end
 
function renderSticks()
    for k,v in pairs(sticks) do
        dxDrawLine3D(v.p0.pos, v.p1.pos, tocolor(0, 0, 0), 3)
    end
end
 
function init()
    table.insert(points, point(0, 0, 6, true))
    for i = 1, 20 do
        table.insert(points, point(0, 0, 6 - 0.1*i))
        table.insert(sticks, stick(i, i+1))
    end
end
init()
 
addEventHandler(""onClientPreRender"", root, function(dt)
    updatePoints(dt/100)
    updateSticks(dt/10)
    --renderPoints()
    renderSticks()
end)
 
 
 
-- debug
 
addEventHandler(""onClientRender"", root, function(dt)
    points[1].pos = Vector3(getElementPosition(localPlayer))
end)"
h2s5EgWV,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Tuesday 28th of November 2023 11:35:48 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-754349"
Qpur7we7,FFMPEG-VIDEO-TOOL.ahk,Najeebsk,Autohotkey,Tuesday 28th of November 2023 11:07:39 PM CDT,"#Warn
#NoEnv
SetWorkingDir %A_ScriptDir%
global winTitle
winTitle := ""ahk_class ConsoleWindowClass""
Gui,2: -DPIScale
Gui,2:Font,s12 CYellow,Lucida Console
Gui,2: Color,Black, Black
;--------------------------
PR=%A_ScriptDir%\APP\ffmpeg.exe
PR2=%A_ScriptDir%\APP\youtube-dl.exe
AA=%A_Desktop%                 ; <<< Browse search fileselectfile from here
;---------------------------
edcol1=white
btcol =Gray
Gui,2:Add, Edit, x5     y10  w680 h80  c%edcol1% vF1,
;-- 2 - buttons
Gui,2:Add,Progress,            x700  y10   w150   h27  Disabled Background%btcol%
Gui,2:Add,Text,                xp    yp     wp    hp   cYellow  BackgroundTrans center 0x200 gBrowse   ,Browse
;--------------
Gui,2:Add,Progress,            x700  y60   w150   h27  Disabled Background%btcol%
Gui,2:Add,Text,                xp    yp     wp    hp   cYellow  BackgroundTrans center 0x200 gConvert2 ,Convert MP3
;--------------
Gui,2:Add,Progress,            x10  y100   w150   h27  Disabled Background%btcol%
Gui,2:Add,Text,                xp    yp     wp    hp   cYellow  BackgroundTrans center 0x200 gConvert1 ,Convert MP4
;--------------
Gui,2:Add,Progress,            x175  y100   w150   h27  Disabled Background%btcol%
Gui,2:Add,Text,                xp    yp     wp    hp   cYellow  BackgroundTrans center 0x200 gConvertD ,DeskTop Record
;--------------
Gui,2:Add,Progress,            x340  y100   w150   h27  Disabled Background%btcol%
Gui,2:Add,Text,                xp    yp     wp    hp   cYellow  BackgroundTrans center 0x200 gConvertS ,Download-M3u8
;--------------
;-- CHOOSE VIDEO TIMINGS (if needed)
edcol1=white
btcol =Gray
Gui,2:Add, Text, x10     y156  w110 h30, Start Time:
Gui,2:Add, Edit, x125     y150  w100 h30  c%edcol1% vT1,00:00:00
Gui,2:Add, Text, x230     y156  w100 h30, End Time:
Gui,2:Add, Edit, x330     y150  w100 h30  c%edcol1% vT2,00:00:00
Gui,2:Add, Text, x435     y156  w160 h30, V-Qulity(1-50):
Gui,2:Add, Edit, x600     y150  w90 h30  c%edcol1% vQ,30
Gui,2:Add,Progress,            x700  y150   w150   h27  Disabled Background%btcol%
Gui,2:Add,Text,                xp    yp     wp    hp   cYellow  BackgroundTrans center 0x200 gConvertT ,Cut-Video
;--------------
;-- CHOOSE YOUTUBE TIMINGS (if needed)
edcol1=white
btcol =Gray
Gui,2:Add, Text, x10     y200  w110 h30, Start Time:
Gui,2:Add, Edit, x125     y200  w100 h30  c%edcol1% vTY1,00:00:00
Gui,2:Add, Text, x230     y200  w100 h30, End Time:
Gui,2:Add, Edit, x330     y200  w100 h30  c%edcol1% vTY2,00:00:00
Gui,2:Add, Text, x435     y200  w160 h30, V-Qulity(18-22):
Gui,2:Add, Edit, x600     y200  w90 h30  c%edcol1% vQY,17
Gui,2:Add,Progress,            x700  y200   w150   h27  Disabled Background%btcol%
Gui,2:Add,Text,                xp    yp     wp    hp   cYellow  BackgroundTrans center 0x200 gConvertY ,Cut-YouTube
;--------------

GUI,2:show, NA x20 y20 W860 h340, Drag & Drop or Browse for Video-files / Najeeb Converter And Video Cutter And Downlaoder And Record DeskTop
return
;----------------------------------------------------------
2GuiDropFiles:
Loop, parse, A_GuiEvent, `n
   GuiControl,2:,F1,%A_LoopField%
return
;----------------------------------------------------------
2GuiClose:
ExitApp
;----------------------------------------------------------
Browse:
FileSelectFile, filename,1,%aa%,Select your file,*.flv;*.mpg;*.webm;*.3gp;*avi;*.vob;*.mov;*.wmv;*.mp4;*.m4a;*.mkv
if filename =
   return
GuiControl,2:,F1,%filename%
return
;-------------------------------
Convert2:
Gui,2:submit,nohide
SplitPath,F1,name, dir, ext, name_no_ext, drive
Filedest=%A_ScriptDir%\Downloads\ %name_no_ext%.mp3
if (ext=""mp4"" or ext=""flv"" or ext=""mpg"" or ext=""webm"" or ext=""3gp"" or ext=""avi"" or ext=""vob"" or ext=""m4a"" or ext=""mov"" or ext=""wmv"" or ext=""mkv"")
   {
   runwait,%comspec% /k %pr% -i ""%f1%"" -acodec libshine ""%Filedest%""
  ; run,%filedest%
   }
else
  msgbox, 262208, ,Not a desired video-extension  found
return
;-------------------------------
Convert1:
Gui,2:submit,nohide
SplitPath,F1,name, dir, ext, name_no_ext, drive
Filedest=%A_ScriptDir%\Downloads\ %name_no_ext%.mp4
if (ext=""mp4"" or ext=""flv"" or ext=""mpg"" or ext=""webm"" or ext=""3gp"" or ext=""avi"" or ext=""vob"" or ext=""m4a"" or ext=""mov"" or ext=""wmv"" or ext=""mkv"")
   {
   runwait,%comspec% /k %pr% -i ""%f1%"" -c:v copy -c:a copy -y ""%Filedest%""
  ; run,%filedest%
   }
else
  msgbox, 262208, ,Not a desired video-extension  found
return
;-------------------------------
ConvertD:
Gui,2:submit,nohide
   {
   runwait,%comspec% /k %pr% -f gdigrab -framerate 30 -i desktop ""%A_ScriptDir%\Downloads\DESKTOP-RECORD.mp4""
  ; run,%filedest%
   }
return
;-------------------------------
ConvertS:
Gui,2:submit,nohide

{ 
   runwait,%comspec% /k %pr% -i ""%f1%"" -bsf:a aac_adtstoasc -vcodec copy -c copy -crf  18  ""%A_ScriptDir%\Downloads\Stream.mp4""
  ; run,%filedest%
   }
return
;-------------------------------
ConvertT:
Gui,2:submit,nohide

{ 
   runwait,%comspec% /k %pr% -i ""%f1%"" -ss %T1% -to %T2%  -bsf:a aac_adtstoasc -vcodec copy -c copy -crf  %Q% ""%A_ScriptDir%\Downloads\V-CUT.mp4""
  ; run,%filedest%
   }
return
;-------------------------------
ConvertY:
Gui,2:submit,nohide

{ 
   runwait,%comspec% /k %pr2% ""%f1%"" --external-downloader ffmpeg --external-downloader-args ""-ss %TY1% -to %TY2%"" -f %QY% ""%A_ScriptDir%\Downloads\V-CUT.mp4""
  ; run,%filedest%
   }
return
;-------------------------------
Stop(CtrlHwnd, GuiEvent, EventInfo, ErrLevel := """") {
   msgbox ""This should stop it if winTitle exists""
if WinExist(winTitle)
    {
    msgbox ""winTitle Found""
    WinActivate
    Send q
    WinWaitClose
    Run % out
    }
}

;============ END SCRIPT ==============
#R::Reload
#S::Suspend
#P::Pause
#ESC::ExitApp"
E68nKeVB,09_performancetask,Dale_Scorcher,Java,Tuesday 28th of November 2023 10:58:05 PM CDT,"
import java.util.Scanner;

public class name_randomizer {

    /*
        1, 2
        1, 3
        2, 1
        2, 3
        3, 1
        3, 2

        There are 6 possible combinations.
    */

    private static int[][] nameRandomizer = {
        {1, 2},
        {1, 3},
        {2, 1},
        {2, 3},
        {3, 1},
        {3, 2}
    };

    private static int nameRandomizerMAX = 6;
    private static int nameRandomizerVAL = 0;
    private static String name01 = ""null"";
    private static String name02 = ""null"";
    private static String name03 = ""null"";


    private static String name_result01;
    private static String name_result02;
    private static String name_result03;
    private static String name_result04;
    private static String name_result05;
    private static String name_result06;

    private static String name_result01LOWERCASE;
    private static String name_result02LOWERCASE;
    private static String name_result03LOWERCASE;
    private static String name_result04LOWERCASE;
    private static String name_result05LOWERCASE;
    private static String name_result06LOWERCASE;

    private static String name_result01ABBR;
    private static String name_result02ABBR;
    private static String name_result03ABBR;
    private static String name_result04ABBR;
    private static String name_result05ABBR;
    private static String name_result06ABBR;

    public static void generator_name() {

        switch (nameRandomizerVAL) {
            case 1:
                System.out.print(name01);
                break;
            case 2:
                System.out.print(name02);
                break;
            case 3:
                System.out.print(name03);
                break;
            default:
                System.out.println(""Error generator_name(): No valid switch case"");

        }


    }

    public static void array_cycle() {
        for (int a = 0; a < nameRandomizerMAX; a++) {

            switch (a) {
                case 0:
                    name_result01 = name01.concat("" "" + name02);
                    name_result01ABBR = String.valueOf(name01.charAt(0))+String.valueOf(name02.charAt(0));
                    name_result01LOWERCASE = name_result01.toLowerCase();
                    name_result01LOWERCASE = name_result01LOWERCASE.replace(' ', '_');
                    break;
                case 1:
                    name_result02 = name01.concat("" "" + name03);
                    name_result02ABBR = String.valueOf(name01.charAt(0))+String.valueOf(name03.charAt(0));
                    name_result02LOWERCASE = name_result02.toLowerCase();
                    name_result02LOWERCASE = name_result02LOWERCASE.replace(' ', '_');
                    break;
                case 2:
                    name_result03 = name02.concat("" "" + name01);
                    name_result03ABBR = String.valueOf(name02.charAt(0))+String.valueOf(name01.charAt(0));
                    name_result03LOWERCASE = name_result03.toLowerCase();
                    name_result03LOWERCASE = name_result03LOWERCASE.replace(' ', '_');
                    break;
                case 3:
                    name_result04 = name02.concat("" "" + name03);
                    name_result04ABBR = String.valueOf(name02.charAt(0))+String.valueOf(name03.charAt(0));
                    name_result04LOWERCASE = name_result04.toLowerCase();
                    name_result04LOWERCASE = name_result04LOWERCASE.replace(' ', '_');
                    break;
                case 4:
                    name_result05 = name03.concat("" "" + name01);
                    name_result05ABBR = String.valueOf(name03.charAt(0))+String.valueOf(name01.charAt(0));
                    name_result05LOWERCASE = name_result05.toLowerCase();
                    name_result05LOWERCASE = name_result05LOWERCASE.replace(' ', '_');
                    break;
                case 5:
                    name_result06 = name03.concat("" "" + name02);
                    name_result06ABBR = String.valueOf(name03.charAt(0))+String.valueOf(name02.charAt(0));
                    name_result06LOWERCASE = name_result06.toLowerCase();
                    name_result06LOWERCASE = name_result06LOWERCASE.replace(' ', '_');
                    break;
            }
            for (int b = 0; b < 2; b++) {
                nameRandomizerVAL = nameRandomizer[a][b];
                if (b == 0) {
                    System.out.print(a+1 + "". "");
                }

                generator_name();

                if (b == 1) {
                    System.out.println("""");
                } else if (b == 0) {
                    System.out.print("" "");
                }
            }
        }
    }

    public static void check_string(String check) {

        if (check.trim().isEmpty() == true) {
            System.out.println(""Error check_string: String is empty."");
            System.exit(1);
        }
    }

    public static void printName (String name01, String name02, String name03) { //debug method, ignore.

        System.out.println(name01);
        System.out.println(name02);
        System.out.println(name03);

    }

    public static void main(String[] args) {
        // Declare variables
        Scanner input_name = new Scanner(System.in);
        int max_names = 3;
        int optionNameChosen = 0;

        System.out.println(""<======== Name generator ========>"");
        System.out.println(""Enter first three names: "");

        for (int i = 1; i <= max_names; i++) {
            System.out.print(i + "": "");
            if (input_name.hasNextLine()) {
                switch (i) {
                    case 1:
                        name01 = input_name.nextLine();
                        check_string(name01);
                        break;
                    case 2:
                        name02 = input_name.nextLine();
                        check_string(name02);
                        break;
                    case 3:
                        name03 = input_name.nextLine();
                        check_string(name03);
                        break;
                    default:
                        System.out.println(""Error main: Switch iniator does not exist."");
                }
            } else {
                System.out.println(""Error main: Scanner has no line."");
            }
        }

        System.out.println(""========"");

        // Cycle through possibe combinations
        array_cycle();

        // Ask the user which option

        Scanner optionName = new Scanner(System.in);
        System.out.println(""Which name combination would you like?"");
        System.out.print(""Enter a value from 1 to "" + nameRandomizerMAX + "": "");

        if (optionName.hasNextInt()) {
            optionNameChosen = optionName.nextInt();
        } else {
            System.out.println(""Error main: Input must be an integer within values 1 - "" + nameRandomizerMAX);
            System.exit(1);
        }

        if (optionNameChosen < 0 || optionNameChosen > nameRandomizerMAX) {
            System.out.println(""Error main: Input must be an integer within values 1 - "" + nameRandomizerMAX);
            System.exit(1);
        }

        switch (optionNameChosen) {
            case 1:
                System.out.println(""The initials for "" + name_result01 + "" is: "" + name_result01ABBR );
                System.out.println(""Suggested username: "" + name_result01LOWERCASE);
                break;
            case 2:
                System.out.println(""The initials for "" + name_result02 + "" is: "" + name_result02ABBR );
                System.out.println(""Suggested username: "" + name_result02LOWERCASE);
                break;
            case 3:
                System.out.println(""The initials for "" + name_result03 + "" is: "" + name_result03ABBR );
                System.out.println(""Suggested username: "" + name_result03LOWERCASE);
                break;
            case 4:
                System.out.println(""The initials for "" + name_result04 + "" is: "" + name_result04ABBR );
                System.out.println(""Suggested username: "" + name_result04LOWERCASE);
                break;
            case 5:
                System.out.println(""The initials for "" + name_result05 + "" is: "" + name_result05ABBR );
                System.out.println(""Suggested username: "" + name_result05LOWERCASE);
                break;
            case 6:
                System.out.println(""The initials for "" + name_result06 + "" is: "" + name_result06ABBR );
                System.out.println(""Suggested username: "" + name_result06LOWERCASE);
                break;
            default:
                System.out.println(""Error main: Invalid case"");
        }


        input_name.close();
        optionName.close();
        


    }
}"
vDcRC8sN,runtag,kohpriwniranam,Python,Tuesday 28th of November 2023 10:31:57 PM CDT,"import subprocess,os,time

'''
""""""NN-tag10""""""
subprocess.Popen(""cd logintag && python3 ccm.py tag12"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag13"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag14"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag22"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag23"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag26"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag28"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag29"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag30"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag31"",shell=True);time.sleep(1)


""""""K-tagup""""""
subprocess.Popen(""cd logintag && python3 ccm.py tag15"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag16"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag17"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag18"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag24"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag25"",shell=True);time.sleep(1)
'''

""""""NN3new""""""
subprocess.Popen(""cd logintag && python3 ccm.py tag6"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag7"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag8"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag9"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag10"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag11"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag19"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag20"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag21"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag27"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag32"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag33"",shell=True);time.sleep(1)

'''
""""""K5new""""""
subprocess.Popen(""cd logintag && python3 ccm.py tag34"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag35"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag36"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag37"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag38"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag39"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag40"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag41"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag42"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag43"",shell=True);time.sleep(1)
subprocess.Popen(""cd logintag && python3 ccm.py tag44"",shell=True);time.sleep(1)
'''
"
wvXecH9q,flutter navigasi lanjutan,yocky12k,Dart,Tuesday 28th of November 2023 09:22:44 PM CDT,"import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
void main() {
  runApp(MainApp());
}

class MainApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: HalamanPertama(),
    );
  }
}

class HalamanPertama extends StatelessWidget {
  TextEditingController username = TextEditingController();
  TextEditingController password = TextEditingController();
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Halaman Satu'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Silakan login untuk mengakses halaman ini!',
              style: TextStyle(
                fontSize: 15,
                fontWeight: FontWeight.bold,
                color: Colors.blue,
              ),
            ),
            SizedBox(height: 30),
            Padding(
              padding: const EdgeInsets.fromLTRB(25, 0, 25, 10),
              child: TextField(
                controller: username,
                decoration: InputDecoration(
                  prefixIcon: Icon(Icons.person),
                  labelText: 'Username',
                  hintText: 'Masukkan username Anda',
                  border: OutlineInputBorder(),
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.fromLTRB(25, 0, 25, 20),
              child: TextField(
                controller: password,
                obscureText: true,
                decoration: InputDecoration(
                  prefixIcon: Icon(Icons.password),
                  labelText: 'Password',
                  hintText: 'Masukkan password Anda',
                  border: OutlineInputBorder(),
                ),
              ),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton(
                  onPressed: () {
                    String uname = username.text;
                    String pass = password.text;

                    //logika percabangan
                    if (uname == 'admin' && pass == '12345') {
                      //logika login sukses
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => HalamanKedua(data: uname)),
                      );
                      Fluttertoast.showToast(
                        msg: 'Login Sukses',
                        toastLength: Toast.LENGTH_LONG,
                      );
                    } else {
                      //logika login gagal
                      Fluttertoast.showToast(
                        msg: 'Login Gagal!! Silakan periksa kembali username dan password Anda',
                        toastLength: Toast.LENGTH_LONG,
                      );
                    }
                  },
                  child: Text('LOGIN'),
                ),
                SizedBox(width: 20),
                ElevatedButton(
                  onPressed: () {
                    //logic ketika tombol di tekan
                    username.clear();
                    password.clear();
                  },
                  child: Text('RESET'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

class HalamanKedua extends StatelessWidget {
  final String data;
  //menerima data dari halaman pertama
  HalamanKedua({required this.data});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Halaman Dua'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Selamat Datang ' + data,
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.orange,
              ),
            ),
            SizedBox(height: 35),
            ElevatedButton(
              onPressed: () {
                //logic ketika tombol di tekan
                Navigator.pop(context);
              },
              child: Text('Kembali'),
            ),
          ],
        ),
      ),
    );
  }
}
"
Ast3Lpd7,morse,zippy36jr,Lua,Tuesday 28th of November 2023 07:41:35 PM CDT,"local alphabet = {
    [""a""] = "".-"",
    [""b""] = ""-..."",
    [""c""] = ""-.-."",
    [""d""] = ""-.."",
    [""e""] = ""."",
    [""f""] = ""..-."",
    [""g""] = ""--."",
    [""h""] = ""...."",
    [""i""] = "".."",
    [""j""] = "".---"",
    [""k""] = ""-.-"",
    [""l""] = "".-.."",
    [""m""] = ""--"",
    [""n""] = ""-."",
    [""o""] = ""---"",
    [""p""] = "".--."",
    [""q""] = ""--.-"",
    [""r""] = "".-."",
    [""s""] = ""..."",
    [""t""] = ""-"",
    [""u""] = ""..-"",
    [""v""] = ""...-"",
    [""w""] = "".--"",
    [""x""] = ""-.--"",
    [""y""] = ""-.--"",
    [""z""] = ""--..""
}

function table.hasKey(table, key)
    for k, _ in pairs(table) do
      if k == key then
        return true
      end
    end
    return false
  end

function convertTxtToMorse(text)
    local result = {}

    for letter in string.lower(text):gmatch(""."") do
        if (letter == "" "") then
            table.insert(result, "" "")
            print(""space"")
        elseif (not table.hasKey(alphabet, letter)) then
            print(""not a letter"")
        else 
        table.insert(result, alphabet[letter]) 
        print(alphabet[letter])
        end
    end

    return result
end

convertTxtToMorse(""test text 1234"")"
zaD64z1L,entrypoint.sh,Sergio_Istea,Bash,Tuesday 28th of November 2023 06:35:17 PM CDT,"#!/bin/bash

# set -e

# Evaluar si el comando ping existe, de lo contrario se instala.


apt update && apt install apache2 git -y

deploy_app () {

	cd /web-app && git pull
	cp /web-app/* /var/www/html


}


# Si el directorio '/web-app' no existe
# clonarlo

if ! test -d /web-app; then

	git clone https://gitlab.com/sergio.pernas1/web-app.git /web-app

	deploy_app
else

	# Si el repositorio ya se ha cloando
	# traer posibles cambios de la rama main

	deploy_app
fi





exec ""$@"""
fraF5Ctg,albumclass_assignment05,jig487,Java,Tuesday 28th of November 2023 06:31:38 PM CDT,"package assignment05;

public class PhotoAlbum {
	
	//String to int: Integer.parseInt(myString);
	//int to string: String.valueOf(i)
	
	private String[] photos;
	private int nextOpenIndex;
	private String curPhoto;
	
	PhotoAlbum(int size) {
		this.photos = new String[size];
	}
	
	//initialize photos with already existing album
	PhotoAlbum(String[] givenPhotos) {
		setPhotos(givenPhotos);
	}
	
	//prints curPhoto, if no photo selected then prints ""no photo selected""
	public void viewPhoto() {
		System.out.println(this.curPhoto != null ? this.curPhoto : ""No photo selected."");
	}
	
	//clears curPhoto
	public void stop() {
		if (this.curPhoto != null) {
			this.curPhoto = null;
			System.out.println(""Viewer cleared."");
		} else {
			System.out.println(""No photo selected."");
		}
	}
	
	//returns index if photo exists, returns -1 if not found
	public int photoExists(String photoName) {
		for (int i = 0; i < this.nextOpenIndex; i++) {
			if (photoName.equals(this.photos[i])) {
				return i;
			}
		}
		return -1;
	}
	
	//returns curPhoto, else returns ""No photo selected""
	public String getCurrentPhoto() {
		return this.curPhoto != null ? this.curPhoto : ""No photo selected."";
	}
	
	//return true, sets curPhoto to photoName. Else returns false
	public boolean setCurrentPhoto(String photoName) {
		if (this.photoExists(photoName) > -1) {
			this.curPhoto = photoName;
			return true;
		} else {
			return false;
		}
	}
	
	//if photos isn't full and photo doesn't already exist, add to photos, increment nextOpenIndex, return true. Else return false
	public boolean addPhoto(String photoName) {
		if (this.nextOpenIndex < this.photos.length && this.photoExists(photoName) == -1) {
			this.photos[this.nextOpenIndex] = photoName;
			this.nextOpenIndex++;
			return true;
		} else {
			return false;
		}
	}
	
	//if exists, remove photo from this.photos, shifts remaining photos to fill gap, decrements nextOpenIndex.
	//Returns name of photo that was removed, else returns null
	public String removePhoto(String photoName) {
		int index = this.photoExists(photoName);
		
		if (index != -1) { // if photo exists
			
			//shift all photos down one and clear the copy of last picture                    
			for (int i = index; i < this.photos.length-1; i++) {				
				this.photos[i] = this.photos[i+1];
			}
			this.nextOpenIndex--;
			this.photos[this.nextOpenIndex] = null;
			//update nextOpenIndex
			return photoName;
			
		} else {
			return null;
		}
	}
	
	//returns photos.length
	public int getMaxPhotoCapacity() {
		return this.photos.length;
	}
	
	//returns nextOpenIndex-1
	public int getCurNumPhotos() {
		return this.nextOpenIndex;
	}
	
	//returns if nextOpenIndex == photos.length
	public boolean isFull() {
		return this.nextOpenIndex == this.photos.length;
	}
	
	//returns empty space in photos[]
	public int spaceAvailable() {
		return this.photos.length - this.nextOpenIndex;
	}
	
	//print all photos
	public void listAllPhotos() {
		for(int i = 0; i < this.nextOpenIndex; i++) {
			System.out.println(this.photos[i]);
		}
	}
	
	//set this.photos to be twice givenPhotos. Add all givenPhtos elements to this.photos.
	//set nextOpenIndex to givenPhotos length
	public void setPhotos(String[] givenPhotos) {
		int givenPhotosLength = givenPhotos.length;
		
		this.photos = new String[givenPhotosLength*2];
		
		//copy photos from 'givenPhotos' to 'photos' array
		for (int i = 0; i < givenPhotosLength; i++) {
			this.photos[i] = givenPhotos[i];
		}
		this.nextOpenIndex = givenPhotosLength;
	}
}"
0SBM6Ssf,2023-11-28_stats.json,rdp_snitch,JSON,Tuesday 28th of November 2023 06:18:16 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 54,
    ""94.142.51.154"": 63,
    ""117.200.63.19"": 3,
    ""194.165.16.11"": 6,
    ""198.235.24.137"": 9,
    ""180.93.172.92"": 21,
    ""87.251.75.145"": 9,
    ""141.98.11.128"": 6,
    ""141.98.81.34"": 6,
    ""62.204.41.132"": 18,
    ""194.165.16.73"": 6,
    ""185.170.144.3"": 12,
    ""87.251.75.120"": 6,
    ""41.158.2.12"": 3,
    ""46.219.77.107"": 3,
    ""198.235.24.127"": 9,
    ""212.70.149.146"": 9,
    ""194.187.176.21"": 3,
    ""45.227.254.8"": 6,
    ""165.154.164.92"": 3,
    ""141.98.9.32"": 12,
    ""45.227.254.9"": 9,
    ""223.119.64.154"": 12,
    ""176.29.245.192"": 12,
    ""162.209.206.10"": 9,
    ""205.210.31.212"": 9,
    ""185.11.61.177"": 6,
    ""81.19.135.47"": 9,
    ""194.165.16.76"": 6,
    ""51.75.160.42"": 6,
    ""162.55.82.108"": 9,
    ""13.235.90.87"": 9,
    ""195.3.221.173"": 3,
    ""103.212.137.99"": 12,
    ""198.235.24.164"": 9,
    ""62.204.61.207"": 3,
    ""2.56.191.151"": 3
  },
  ""asn"": {
    ""AS48721"": 72,
    ""AS48832"": 75,
    ""AS9829"": 3,
    ""AS396982"": 36,
    ""AS135944"": 21,
    ""AS208091"": 15,
    ""AS209605"": 6,
    ""AS209588"": 27,
    ""AS59425"": 18,
    ""AS197414"": 12,
    ""AS16058"": 3,
    ""AS31148"": 3,
    ""AS204428"": 9,
    ""AS208843"": 3,
    ""AS267784"": 15,
    ""AS135377"": 3,
    ""AS58453"": 12,
    ""AS40065"": 9,
    ""AS57523"": 6,
    ""AS16276"": 6,
    ""AS24940"": 9,
    ""AS16509"": 9,
    ""AS201814"": 3,
    ""AS133676"": 12,
    ""AS34412"": 3,
    ""AS62240"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 114,
    ""Zain Jordan"": 63,
    ""BSNL Internet"": 3,
    ""Google LLC"": 36,
    ""SPT"": 21,
    ""Xhost Internet Solutions LP"": 27,
    ""UAB Host Baltic"": 6,
    ""Horizon LLC"": 18,
    ""Gabon Telecom Internet Network Autonomous System"": 3,
    ""o3 core"": 3,
    ""SS-Net"": 9,
    ""Alpha Strike Labs GmbH"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""China Mobile International Limited"": 12,
    ""ZAIN"": 12,
    ""CloudRadium L.L.C"": 9,
    ""Chang Way Technologies Co. Limited"": 6,
    ""OVH SAS"": 6,
    ""Hetzner Online GmbH"": 9,
    ""Amazon Technologies Inc."": 9,
    ""MEVSPACE sp. z o.o."": 3,
    ""Gstech Software Systems Pvt Ltd"": 12,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 3,
    ""Clouvider Limited"": 3
  },
  ""org"": {
    ""Flyservers S.A"": 78,
    ""Unknown"": 87,
    ""Palo Alto Networks, Inc"": 36,
    ""Saigon Postel Corporation"": 21,
    ""Xhost Internet Solutions"": 15,
    ""Horizon LLC"": 18,
    ""Xhostis"": 12,
    ""Gtlib Ipmpls01"": 3,
    ""4Media Ltd"": 9,
    ""Alpha Strike Labs GmbH"": 3,
    ""UAB Host Baltic"": 15,
    ""Ucloud Information Technology"": 3,
    ""Alviva Holding Limited"": 21,
    ""cmi"": 12,
    ""zhang san"": 9,
    ""Starcrecium Limited"": 6,
    ""OVH Ltd"": 6,
    ""Hetzner"": 9,
    ""AWS EC2 (ap-south-1)"": 9,
    ""Innowacyjne Rozwiazania Informatyczne.pl sp. z o.o"": 3,
    ""Gstech Software Systems Pvt Ltd"": 12,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 3,
    ""Packethub S.A"": 3
  },
  ""regionName"": {
    ""Kaunas"": 78,
    ""Zarqa"": 63,
    ""Kerala"": 3,
    ""California"": 45,
    ""Hanoi"": 21,
    ""North Holland"": 39,
    ""Drenthe"": 6,
    ""Moscow"": 18,
    ""Estuaire"": 3,
    ""Zhytomyr"": 3,
    ""Plovdiv"": 9,
    ""Land Berlin"": 3,
    ""Vilnius"": 15,
    ""Hesse"": 3,
    ""Tsuen Wan District"": 12,
    ""Amman Governorate"": 12,
    ""Chechnya"": 6,
    ""Sverdlovsk Oblast"": 9,
    ""England"": 6,
    ""Saxony"": 9,
    ""Maharashtra"": 9,
    ""Mazovia"": 3,
    ""Uttar Pradesh"": 12,
    ""Tehran"": 3,
    ""Texas"": 3
  },
  ""country"": {
    ""Lithuania"": 93,
    ""Jordan"": 75,
    ""India"": 24,
    ""United States"": 48,
    ""Vietnam"": 21,
    ""Netherlands"": 45,
    ""Russia"": 33,
    ""Gabon"": 3,
    ""Ukraine"": 3,
    ""Bulgaria"": 9,
    ""Germany"": 15,
    ""Hong Kong"": 12,
    ""United Kingdom"": 6,
    ""Poland"": 3,
    ""Iran"": 3
  },
  ""account"": {
    ""hello"": 207,
    ""Test"": 45,
    ""ToBOiFmKT"": 3,
    ""CezAJt"": 3,
    ""AflCsD"": 3,
    ""Administr"": 60,
    ""(empty)"": 9,
    ""WEqxQkios"": 3,
    ""ycsXZX"": 3,
    ""AFBKta"": 3,
    ""user"": 3,
    ""Domain"": 30,
    ""Administrator"": 3,
    ""KVhBHlQeZ"": 3,
    ""UohDQq"": 3,
    ""huKraG"": 3,
    ""BVpoAtkXa"": 3,
    ""wvEcWQ"": 3,
    ""GhASvw"": 3
  },
  ""keyboard"": {
    ""Unknown"": 393
  },
  ""client_build"": {
    ""Unknown"": 393
  },
  ""client_name"": {
    ""Unknown"": 393
  },
  ""ip_type"": {
    ""Unknown"": 276,
    ""hosting"": 72,
    ""proxy"": 18,
    ""mobile"": 24,
    ""hosting & proxy"": 3
  }
}"
qugRpnVf,2023-11-28_stats.json,rdp_snitch,JSON,Tuesday 28th of November 2023 06:16:06 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 36,
    ""94.142.51.154"": 42,
    ""117.200.63.19"": 2,
    ""194.165.16.11"": 4,
    ""198.235.24.137"": 6,
    ""180.93.172.92"": 14,
    ""87.251.75.145"": 6,
    ""141.98.11.128"": 4,
    ""141.98.81.34"": 4,
    ""62.204.41.132"": 12,
    ""194.165.16.73"": 4,
    ""185.170.144.3"": 8,
    ""87.251.75.120"": 4,
    ""41.158.2.12"": 2,
    ""46.219.77.107"": 2,
    ""198.235.24.127"": 6,
    ""212.70.149.146"": 6,
    ""194.187.176.21"": 2,
    ""45.227.254.8"": 4,
    ""165.154.164.92"": 2,
    ""141.98.9.32"": 8,
    ""45.227.254.9"": 6,
    ""223.119.64.154"": 8,
    ""176.29.245.192"": 8,
    ""162.209.206.10"": 6,
    ""205.210.31.212"": 6,
    ""185.11.61.177"": 4,
    ""81.19.135.47"": 6,
    ""194.165.16.76"": 4,
    ""51.75.160.42"": 4,
    ""162.55.82.108"": 6,
    ""13.235.90.87"": 6,
    ""195.3.221.173"": 2,
    ""103.212.137.99"": 8,
    ""198.235.24.164"": 6,
    ""62.204.61.207"": 2,
    ""2.56.191.151"": 2
  },
  ""asn"": {
    ""AS48721"": 48,
    ""AS48832"": 50,
    ""AS9829"": 2,
    ""AS396982"": 24,
    ""AS135944"": 14,
    ""AS208091"": 10,
    ""AS209605"": 4,
    ""AS209588"": 18,
    ""AS59425"": 12,
    ""AS197414"": 8,
    ""AS16058"": 2,
    ""AS31148"": 2,
    ""AS204428"": 6,
    ""AS208843"": 2,
    ""AS267784"": 10,
    ""AS135377"": 2,
    ""AS58453"": 8,
    ""AS40065"": 6,
    ""AS57523"": 4,
    ""AS16276"": 4,
    ""AS24940"": 6,
    ""AS16509"": 6,
    ""AS201814"": 2,
    ""AS133676"": 8,
    ""AS34412"": 2,
    ""AS62240"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 76,
    ""Zain Jordan"": 42,
    ""BSNL Internet"": 2,
    ""Google LLC"": 24,
    ""SPT"": 14,
    ""Xhost Internet Solutions LP"": 18,
    ""UAB Host Baltic"": 4,
    ""Horizon LLC"": 12,
    ""Gabon Telecom Internet Network Autonomous System"": 2,
    ""o3 core"": 2,
    ""SS-Net"": 6,
    ""Alpha Strike Labs GmbH"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""China Mobile International Limited"": 8,
    ""ZAIN"": 8,
    ""CloudRadium L.L.C"": 6,
    ""Chang Way Technologies Co. Limited"": 4,
    ""OVH SAS"": 4,
    ""Hetzner Online GmbH"": 6,
    ""Amazon Technologies Inc."": 6,
    ""MEVSPACE sp. z o.o."": 2,
    ""Gstech Software Systems Pvt Ltd"": 8,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 2,
    ""Clouvider Limited"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 52,
    ""Unknown"": 58,
    ""Palo Alto Networks, Inc"": 24,
    ""Saigon Postel Corporation"": 14,
    ""Xhost Internet Solutions"": 10,
    ""Horizon LLC"": 12,
    ""Xhostis"": 8,
    ""Gtlib Ipmpls01"": 2,
    ""4Media Ltd"": 6,
    ""Alpha Strike Labs GmbH"": 2,
    ""UAB Host Baltic"": 10,
    ""Ucloud Information Technology"": 2,
    ""Alviva Holding Limited"": 14,
    ""cmi"": 8,
    ""zhang san"": 6,
    ""Starcrecium Limited"": 4,
    ""OVH Ltd"": 4,
    ""Hetzner"": 6,
    ""AWS EC2 (ap-south-1)"": 6,
    ""Innowacyjne Rozwiazania Informatyczne.pl sp. z o.o"": 2,
    ""Gstech Software Systems Pvt Ltd"": 8,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 2,
    ""Packethub S.A"": 2
  },
  ""regionName"": {
    ""Kaunas"": 52,
    ""Zarqa"": 42,
    ""Kerala"": 2,
    ""California"": 30,
    ""Hanoi"": 14,
    ""North Holland"": 26,
    ""Drenthe"": 4,
    ""Moscow"": 12,
    ""Estuaire"": 2,
    ""Zhytomyr"": 2,
    ""Plovdiv"": 6,
    ""Land Berlin"": 2,
    ""Vilnius"": 10,
    ""Hesse"": 2,
    ""Tsuen Wan District"": 8,
    ""Amman Governorate"": 8,
    ""Chechnya"": 4,
    ""Sverdlovsk Oblast"": 6,
    ""England"": 4,
    ""Saxony"": 6,
    ""Maharashtra"": 6,
    ""Mazovia"": 2,
    ""Uttar Pradesh"": 8,
    ""Tehran"": 2,
    ""Texas"": 2
  },
  ""country"": {
    ""Lithuania"": 62,
    ""Jordan"": 50,
    ""India"": 16,
    ""United States"": 32,
    ""Vietnam"": 14,
    ""Netherlands"": 30,
    ""Russia"": 22,
    ""Gabon"": 2,
    ""Ukraine"": 2,
    ""Bulgaria"": 6,
    ""Germany"": 10,
    ""Hong Kong"": 8,
    ""United Kingdom"": 4,
    ""Poland"": 2,
    ""Iran"": 2
  },
  ""account"": {
    ""hello"": 138,
    ""Test"": 30,
    ""ToBOiFmKT"": 2,
    ""CezAJt"": 2,
    ""AflCsD"": 2,
    ""Administr"": 40,
    ""(empty)"": 6,
    ""WEqxQkios"": 2,
    ""ycsXZX"": 2,
    ""AFBKta"": 2,
    ""user"": 2,
    ""Domain"": 20,
    ""Administrator"": 2,
    ""KVhBHlQeZ"": 2,
    ""UohDQq"": 2,
    ""huKraG"": 2,
    ""BVpoAtkXa"": 2,
    ""wvEcWQ"": 2,
    ""GhASvw"": 2
  },
  ""keyboard"": {
    ""Unknown"": 262
  },
  ""client_build"": {
    ""Unknown"": 262
  },
  ""client_name"": {
    ""Unknown"": 262
  },
  ""ip_type"": {
    ""Unknown"": 184,
    ""hosting"": 48,
    ""proxy"": 12,
    ""mobile"": 16,
    ""hosting & proxy"": 2
  }
}"
L2UCbn1s,2023-11-28_stats.json,rdp_snitch,JSON,Tuesday 28th of November 2023 06:15:08 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 18,
    ""94.142.51.154"": 21,
    ""117.200.63.19"": 1,
    ""194.165.16.11"": 2,
    ""198.235.24.137"": 3,
    ""180.93.172.92"": 7,
    ""87.251.75.145"": 3,
    ""141.98.11.128"": 2,
    ""141.98.81.34"": 2,
    ""62.204.41.132"": 6,
    ""194.165.16.73"": 2,
    ""185.170.144.3"": 4,
    ""87.251.75.120"": 2,
    ""41.158.2.12"": 1,
    ""46.219.77.107"": 1,
    ""198.235.24.127"": 3,
    ""212.70.149.146"": 3,
    ""194.187.176.21"": 1,
    ""45.227.254.8"": 2,
    ""165.154.164.92"": 1,
    ""141.98.9.32"": 4,
    ""45.227.254.9"": 3,
    ""223.119.64.154"": 4,
    ""176.29.245.192"": 4,
    ""162.209.206.10"": 3,
    ""205.210.31.212"": 3,
    ""185.11.61.177"": 2,
    ""81.19.135.47"": 3,
    ""194.165.16.76"": 2,
    ""51.75.160.42"": 2,
    ""162.55.82.108"": 3,
    ""13.235.90.87"": 3,
    ""195.3.221.173"": 1,
    ""103.212.137.99"": 4,
    ""198.235.24.164"": 3,
    ""62.204.61.207"": 1,
    ""2.56.191.151"": 1
  },
  ""asn"": {
    ""AS48721"": 24,
    ""AS48832"": 25,
    ""AS9829"": 1,
    ""AS396982"": 12,
    ""AS135944"": 7,
    ""AS208091"": 5,
    ""AS209605"": 2,
    ""AS209588"": 9,
    ""AS59425"": 6,
    ""AS197414"": 4,
    ""AS16058"": 1,
    ""AS31148"": 1,
    ""AS204428"": 3,
    ""AS208843"": 1,
    ""AS267784"": 5,
    ""AS135377"": 1,
    ""AS58453"": 4,
    ""AS40065"": 3,
    ""AS57523"": 2,
    ""AS16276"": 2,
    ""AS24940"": 3,
    ""AS16509"": 3,
    ""AS201814"": 1,
    ""AS133676"": 4,
    ""AS34412"": 1,
    ""AS62240"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 38,
    ""Zain Jordan"": 21,
    ""BSNL Internet"": 1,
    ""Google LLC"": 12,
    ""SPT"": 7,
    ""Xhost Internet Solutions LP"": 9,
    ""UAB Host Baltic"": 2,
    ""Horizon LLC"": 6,
    ""Gabon Telecom Internet Network Autonomous System"": 1,
    ""o3 core"": 1,
    ""SS-Net"": 3,
    ""Alpha Strike Labs GmbH"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""China Mobile International Limited"": 4,
    ""ZAIN"": 4,
    ""CloudRadium L.L.C"": 3,
    ""Chang Way Technologies Co. Limited"": 2,
    ""OVH SAS"": 2,
    ""Hetzner Online GmbH"": 3,
    ""Amazon Technologies Inc."": 3,
    ""MEVSPACE sp. z o.o."": 1,
    ""Gstech Software Systems Pvt Ltd"": 4,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 1,
    ""Clouvider Limited"": 1
  },
  ""org"": {
    ""Flyservers S.A"": 26,
    ""Unknown"": 29,
    ""Palo Alto Networks, Inc"": 12,
    ""Saigon Postel Corporation"": 7,
    ""Xhost Internet Solutions"": 5,
    ""Horizon LLC"": 6,
    ""Xhostis"": 4,
    ""Gtlib Ipmpls01"": 1,
    ""4Media Ltd"": 3,
    ""Alpha Strike Labs GmbH"": 1,
    ""UAB Host Baltic"": 5,
    ""Ucloud Information Technology"": 1,
    ""Alviva Holding Limited"": 7,
    ""cmi"": 4,
    ""zhang san"": 3,
    ""Starcrecium Limited"": 2,
    ""OVH Ltd"": 2,
    ""Hetzner"": 3,
    ""AWS EC2 (ap-south-1)"": 3,
    ""Innowacyjne Rozwiazania Informatyczne.pl sp. z o.o"": 1,
    ""Gstech Software Systems Pvt Ltd"": 4,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 1,
    ""Packethub S.A"": 1
  },
  ""regionName"": {
    ""Kaunas"": 26,
    ""Zarqa"": 21,
    ""Kerala"": 1,
    ""California"": 15,
    ""Hanoi"": 7,
    ""North Holland"": 13,
    ""Drenthe"": 2,
    ""Moscow"": 6,
    ""Estuaire"": 1,
    ""Zhytomyr"": 1,
    ""Plovdiv"": 3,
    ""Land Berlin"": 1,
    ""Vilnius"": 5,
    ""Hesse"": 1,
    ""Tsuen Wan District"": 4,
    ""Amman Governorate"": 4,
    ""Chechnya"": 2,
    ""Sverdlovsk Oblast"": 3,
    ""England"": 2,
    ""Saxony"": 3,
    ""Maharashtra"": 3,
    ""Mazovia"": 1,
    ""Uttar Pradesh"": 4,
    ""Tehran"": 1,
    ""Texas"": 1
  },
  ""country"": {
    ""Lithuania"": 31,
    ""Jordan"": 25,
    ""India"": 8,
    ""United States"": 16,
    ""Vietnam"": 7,
    ""Netherlands"": 15,
    ""Russia"": 11,
    ""Gabon"": 1,
    ""Ukraine"": 1,
    ""Bulgaria"": 3,
    ""Germany"": 5,
    ""Hong Kong"": 4,
    ""United Kingdom"": 2,
    ""Poland"": 1,
    ""Iran"": 1
  },
  ""account"": {
    ""hello"": 69,
    ""Test"": 15,
    ""ToBOiFmKT"": 1,
    ""CezAJt"": 1,
    ""AflCsD"": 1,
    ""Administr"": 20,
    ""(empty)"": 3,
    ""WEqxQkios"": 1,
    ""ycsXZX"": 1,
    ""AFBKta"": 1,
    ""user"": 1,
    ""Domain"": 10,
    ""Administrator"": 1,
    ""KVhBHlQeZ"": 1,
    ""UohDQq"": 1,
    ""huKraG"": 1,
    ""BVpoAtkXa"": 1,
    ""wvEcWQ"": 1,
    ""GhASvw"": 1
  },
  ""keyboard"": {
    ""Unknown"": 131
  },
  ""client_build"": {
    ""Unknown"": 131
  },
  ""client_name"": {
    ""Unknown"": 131
  },
  ""ip_type"": {
    ""Unknown"": 92,
    ""hosting"": 24,
    ""proxy"": 6,
    ""mobile"": 8,
    ""hosting & proxy"": 1
  }
}"
QJqg9VVc,Untitled,sissou123,JSON,Tuesday 28th of November 2023 05:58:21 PM CDT,"Microservices with Node JS and React
Build, deploy, and scale an E-Commerce app using Microservices built with Node, React, Docker and Kubernetes 
for more:https://dz-linkk.com/ElwYa2
"
VjBTv0xJ,Untitled,sissou123,JSON,Tuesday 28th of November 2023 05:53:54 PM CDT,"Node.js, Express, MongoDB & More: The Complete Bootcamp 2024
Master Node by building a real-world RESTful API and web app (with authentication, Node.js security, payments & more) 
for more:https://dz-linkk.com/PsuVho
"
2XFxCsT8,Untitled,sissou123,JSON,Tuesday 28th of November 2023 05:44:53 PM CDT,"The Complete Node.js Developer Course (3rd Edition)
Learn Node.js by building real-world applications with Node JS, Express, MongoDB, Jest, and more! 
for more:https://dz-linkk.com/7G2pR
"
isyzD3jS,Untitled,sissou123,JSON,Tuesday 28th of November 2023 05:38:07 PM CDT,"NodeJS Tutorial and Projects Course
Learn Node.js by building real-world applications with Node JS, Express, MongoDB. 
 for more:https://dz-linkk.com/UrUhtC
"
B4L7bTd6,o_20,TomekW,Python,Tuesday 28th of November 2023 04:41:09 PM CDT,"…    
def calculateFormulaAndSmiles(self):
  mol: Chem.Mol = None
  max_len = len(self.distance_compounds)

  for i, dc in enumerate(self.distance_compounds):
    dc: DistanceCompound
    new_mol = Chem.MolFromSmiles(dc.compound.smiles)
    last = False

    if max_len - 1 == i:
      last = True

    if mol is None:
      mol = copy.deepcopy(new_mol)
    else:
      group_mol: FunctionalGroup = self.used_functional_group[0] [i-1]
      group_new_mol: FunctionalGroup = self.used_functional_group [1][i-1]
      mol = self.__combineMols(mol, group_mol, new_mol, group_new_mol, last)

  self.smiles = Chem.MolToSmiles(mol)
…"
zrg4MNug,o_19,TomekW,Python,Tuesday 28th of November 2023 04:39:27 PM CDT,"…
def __makeCombinations(self, distance_compound: DistanceCompound, analyzed_reaction: Reaction, to_queue_reaction: Reaction, excluded_functional_groups: [str]):
  required_group = analyzed_reaction.required_group
  # Grupa główna dla istniejącej sekwencji
  # Pobieramy główną grupę w dostępnych grupach w kombinacji
  available_required_group_in_combination_list = list(filter(lambda afgq: afgq.group == required_group, self.available_functional_group s))
  # Filtering by excluded groups
  available_required_group_in_combination_list = list(filter(lambda afg: afg.group.name not in excluded_functional_groups, available_required_group_in_combination_list))
  # Jeśli wymagan grupa nie istnieje (np przez uzycie filtrow), kończymy działanie.
  if len(available_required_group_in_combination_list) == 0:
    return
  available_required_group_in_combination = available_required_group_in_combination_list[0].quantity
  # Jeśli istnieje zakładamy że aktualna kombinacja straci wymaganą grupę (OH)
  if available_required_group_in_combination > 0:
    # Iterujemy po dostępnych innych grupach w reakcji dla nowego związku
    possible_other_groups = list(filter(lambda pogf: pogf.name not in excluded_functional_groups, analyzed_reaction.possible_other_ groups))
    for pog in possible_other_groups:
      pog: FunctionalGroup
      # Jeśli znajdziemy (kolejność ma znaczenie w tworzeniu reakcji)
      if pog.getNumberOfGroupsInCompound(distance_compound.compound .smiles) > 0:
        # Związki mogą być połączone
        # Aktualizujemy dane
        self.used_functional_group[0].append(required_group)
        self.used_functional_group[1].append(pog)
        self.distance_compounds.append(distance_compound)
        # Aktualizujemy dostepne grupy
        self.__updateAvailableFunctionalGroups(distance_compound, [required_group, pog])
        self.reaction = to_queue_reaction
        # Konczymy
        return
…"
rkP4Lca9,Integrale,kozubovskyy,C++,Tuesday 28th of November 2023 04:38:20 PM CDT,"#include <iostream>
#include <math.h>

using namespace std;

int main()
{
    float a = 1 ;
    float b = 2 ;
    float h = 0;
    cout << ""Inserisci rettangoli"" ;
    float n = 0 ;
    cin >> n ;
    h = (b-a)/n ;
    float x = 0 ;
    x = a+ (h/2) ;
    float area = 0 ;
    for (int i = 0 ; i < n ; i++)
    {
        x+= h ;
        area = area + h * sin(x);
    }
    cout << ""area: "" << area ;
    return 0;
}
"
LZe404Bw,o_18,TomekW,Python,Tuesday 28th of November 2023 04:35:52 PM CDT,"…
# Dodanie do istniejącej kombinacji
else:
  analyzed_reaction: Reaction = None
  to_queue_reaction: Reaction = None


  if reaction is None:
    if self.reaction is None:
      print(f'WARN: [Combination.appendDistanceCompound] Trying add two compounds that have no group requires.')
      return
    else:
      analyzed_reaction = self.reaction
  else:
    if self.reaction is None:
      analyzed_reaction = reaction
    else:
      analyzed_reaction = self.reaction
      to_queue_reaction = reaction

  # Puszczamy łączenie kombinacji
  if self.__makeCombinations(distance_compound, analyzed_reaction, to_queue_reaction, excluded_functional_groups):
    return

  # Jeśli nie zakończy próbujemy w drugą stronę
  if reaction is not None and to_queue_reaction is not None:
    temp_reaction: Reaction = reaction
    reaction = to_queue_reaction
    to_queue_reaction = temp_reaction
    # Puszczamy jeszcze raz
    self.__makeCombinations(distance_compound, analyzed_reaction, to_queue_reaction, excluded_functional_groups)

  return
…"
nwEZQEKu,Cifrario romano,kozubovskyy,C++,Tuesday 28th of November 2023 04:33:53 PM CDT,"#include <iostream>
#include <fstream>
#include <string.h>

using namespace std;

int main()
{

    fstream filino ;
    filino.open(""file.txt"") ;
    if(!filino)
    {
        cout << ""File inesistente"" ;
        return 0 ;
    }
    char parola_cifrata[10] ;

    filino>> parola_cifrata ;
    cout << parola_cifrata ;


    char alfabeto[21] = {'a','b','c','d','e','f','g','h','i','l','m','n','o','p','q','r','s','t','u','v','z'};
    char alfabeto_modificato[21] ;
    //int prec = 10 ;
    int last_pos = 0 ;

    int dimensione = strlen(parola_cifrata) ;

    int array[dimensione] ;
    for (int i = 0 ; i < dimensione ; i++)
    {
        for(int j = 0 ; j<21; j++)
        {
            if (parola_cifrata[i] == alfabeto[j])
                {
                    array[i] = j ;
                }
        }
    }






    for(int prec = 0; prec < 21 ; prec ++)
    {
        cout << ""Alfabeto con shift:"" << prec << "" :"" ;
        for (int i = 0 ; i < 21 ; i ++)
        {
            alfabeto_modificato[i] =  alfabeto[i+prec] ;
            last_pos = i ;
            if ((i+prec)>20)
            {
               // cout << ""Valore fermo: "" << i << endl ;
                goto start;
            }
        //cout << ""valore i: "" << i << endl ;

        }

        start:
        for (int j = 0 ; j < prec ; j++)
        {
            for (int i = last_pos ; i < 21 ; i++)
            {
                alfabeto_modificato[i] = alfabeto[j] ;
                j++ ;
            }


        }
        for (int i = 0 ; i < 21 ; i ++)
        {
            cout << alfabeto_modificato[i] ;
        }
        cout << ""parola con alfabeto modificato: "" ;
        for(int i = 0 ; i < dimensione ; i++)
        {
            cout << alfabeto_modificato[array[i]];
        }
        cout << endl << endl ;
    }




    return 0;
}
"
z4gC0xsZ,o_17,TomekW,Python,Tuesday 28th of November 2023 04:32:30 PM CDT,"…
# Dla kolejnych odległości (dodawane zostają związki do istniejących kombinacji)
else:
  new_combinations_for_reaction = []

  for combination in combinations_for_reaction:
    combination: Combination

    if main_i == main_j:
      # Pierwiastki bez utraty produktu z reakcji
      for dc in self.distance_compounds:
        dc: DistanceCompounds

        if fd_j == dc.distance:
          for c in dc.compounds:
            c: DataCompound

            new_combination = copy.deepcopy(combination)               
            new_combination.appendDistanceCompound(DistanceCompound (fd_j, c), None, self.excluded_functional_groups)
            new_combinations_for_reaction.append(new_combination)
        else:
          # Pierwiastki z utraconym produktem w wyniku reakcji
          for dc_r in self.distance_compounds_for_reactions:
            dc_r: NewDistanceCompoundsForReactions

            for dc in dc_r.distances_compounds:
              dc: DistanceCompounds

              if fd_j == dc.distance:
              for c in dc.compounds:
                c: DataCompound

                new_combination = copy.deepcopy(combination)
                new_combination.appendDistanceCompound( DistanceCompound( fd_j, c), dc_r.reaction, self.excluded_functional_groups)
                new_combinations_for_reaction.append( new_combination)
…"
a13UNnyk,o_16,TomekW,Python,Tuesday 28th of November 2023 04:30:30 PM CDT,"…
def appendDistanceCompound(self, distance_compound: DistanceCompound, reaction: Reaction, excluded_functional_groups: [str]):
  distance_compound: DistanceCompound

  # Dodanie pierwszego związku do kombinacji
  if len(self.distance_compounds) == 0:
    # Dodaje związek do listy związków
    self.distance_compounds.append(distance_compound)

    # Dodaje obecne grupy funkcyjne w związku
    for nfgq in self.available_functional_groups:
      nfgq: FunctionalGroupQuantity

      quantity = nfgq.group.getNumberOfGroupsInCompound( distance_compound.compound.smiles)
      nfgq.quantity = quantity

    self.reaction = reaction
…
"
pfsSUBP6,o_15,TomekW,Python,Tuesday 28th of November 2023 04:28:44 PM CDT,"…
# Wybieramy najdłuższe kombinacje
max_distances_len = len(self.fragmentation_distances_combinations[0])

while max_distances_len > 1:
  combinations_with_distances_combination = []
  fragmentation_distances_combinations = list(filter(lambda dist: len(dist) == max_distances_len, self.fragmentation_distances_combinations))
…
  if len(combinations_with_distances_combination) > 0:
    self.combinations_with_distances_combination = combinations_with_distances_combination
    break
  else:
    print(f'INFO: No results found in distances combinations with size {max_distances_len}.\n'
                      f'      Start searching in distances combinations with size {max_distances_len - 1}')

  # Jeśli nie znajdzie, obniżamy liczbe znalezionych odległości
  max_distances_len -= 1

if len(self.combinations_with_distances_combination) > 0:
            print(f'INFO: Founded possible combinations for -{len(self.combinations_with_distances_combination)}- distances combinations.')
…"
feknsj6p,o_14,TomekW,Python,Tuesday 28th of November 2023 04:23:51 PM CDT,"…
all_distances = self.__getAllDistancesBasedOnCombinations()

# Szuka związków dla danego odcinka
founded_distance_compounds = []
founded_compounds_number = 0
missing_distances_number = 0
print(f'INFO: Searching compounds for no reaction.')
for i, d in enumerate(all_distances):
    d: FragmentationDistance

    compounds = data_service.findCompoundsByMass(d.mz)
    if len(compounds) == 0:
        print(f'      No compounds found in distance nr {i + 1}.')
        missing_distances_number += 1
    else:
        print(f'      Founded -{len(compounds)}- in distance nr -{i + 1}-')
        founded_compounds_number += len(compounds)
        founded_distance_compounds.append(DistanceCompounds(d, compounds))

self.distance_compounds = founded_distance_compounds
print(f'INFO: Founded -{founded_compounds_number}- compounds in -{len(all_distances) - missing_distances_number}- different distances.')
…"
rGAi4epR,o_13,TomekW,Python,Tuesday 28th of November 2023 04:22:24 PM CDT,"…
combinations = list(filter(lambda combination:
    any(filter(lambda destination: destination.range[0] == 0, combination)) and
    any(filter(lambda destination: destination.range[1] == -1, combination))
    , combinations))[::-1]
…"
TGZ7TNtW,o_12,TomekW,Python,Tuesday 28th of November 2023 04:15:08 PM CDT,"…
for i in range(0, length):
    distances.append([])

    for j in range(i, length):
        # Dodaje różnice m/z względem każdego kolejnego cyklu
        if j > i:
            distances[i].append(FragmentationDistance([i, j], abs(self.fragmentation_peaks[i].mz - self.fragmentation_peaks[j].mz)))

    # Dodaje na końcu (!ważne) całą masę cyklu, pomija cykl 0 (masa całego pierwiastka)
    if i != 0:
        distances[i].append(FragmentationDistance([i, self.fragmentation_ending_number], abs(self.fragmentation_peaks[i].mz + self.ion)))

    distances_size = distances_size + len(distances[i])
…"
nNr9YU44,o_11,TomekW,Python,Tuesday 28th of November 2023 04:13:08 PM CDT,"…
for i, mz in enumerate(peaks[0]):  # Grupowanie pików pod względem podobnej masy (delta: FRAGMENTATION_GAP_BETWEEN_PEAKS)
    if mz < fragmentation[0][0].mz - self.FRAGMENTATION_GAP_BETWEEN_PEAKS:  # Pomija masy wyższe niż prekursosra - delta
        if mz > cycle_mz - self.FRAGMENTATION_GAP_BETWEEN_PEAKS:
            fragmentation[cycle].append(Peak(mz, peaks[1][i]))
        else:
            fragmentation.append([])
            cycle = cycle + 1
            fragmentation[cycle].append(Peak(mz, peaks[1][i]))
            cycle_mz = mz
…"
1yVQi22E,o_10,TomekW,Python,Tuesday 28th of November 2023 04:10:01 PM CDT,"…   
def findPrecursors(self):
min_intensity = 1
nearest_array = []

for k, v in enumerate(self.peaks[0]):
    if self.measured_mass-self.PRECURSOR_MASS_DELTA <= v <= self.measured_mass+self.PRECURSOR_MASS_DELTA and self.peaks[1][k] > min_intensity:
        nearest_array.append({""pos"": k, ""mz"": self.peaks[0][k], ""intensity"": self.peaks[1][k], ""delta_mz"": abs(self.measured_mass-self.peaks[0][k])})

    nearest_array.sort(key=lambda l: l['delta_mz'])

    if len(nearest_array) > 0:
        self.precursors = nearest_array
    else:
        print(""ERROR: Could not find precursor peak."")
        exit(1)
…"
ceBzQP8r,o_8,TomekW,Python,Tuesday 28th of November 2023 04:04:05 PM CDT,"…
def loadCompounds(self):
    start = time.time()

    compounds_file = open(self.KEGG_COMPOUNDS_LOCATION, encoding=""utf-8"")
    lipids_file = open(self.KEGG_LIPIDS_LOCATION, encoding=""utf-8"")

    all_compounds = json.load(compounds_file, object_hook=Compound.CompoundJsonDecoder)
    lipids = json.load(lipids_file, object_hook=Compound.LipidJsonDecoder)

    compounds_file.close()
    lipids_file.close()

    compounds = []
    compounds.extend(lipids)
    compounds.extend(all_compounds)
    filtered_compounds = set(self.__filterCompounds(compounds))
    self.compounds = filtered_compounds

    print(f'INFO: Data loaded in [{round(time.time() - start, 2)}s].\n      Founded -{len(filtered_compounds)}- compounds, including -{len(list(filter(lambda c: c.kegg_type == ""lipid"", filtered_compounds)))}- lipids.')
…"
AUHnNTpG,Exᴛʀᴀ Tᴇᴀᴍ - Cʜᴇᴀᴛ [ 32 Bɪᴛ ],ayoubyt,Lua,Tuesday 28th of November 2023 04:03:49 PM CDT,"LoginURL= ""https://extrateambesto.000webhostapp.com/Login.php"" ---- Login.php Link

function split(s, delimiter)  result = {}; for match in (s..delimiter):gmatch(""(.-)""..delimiter) do table.insert(result, match); end return result; end function WriteText(Direc,Text)f = io.open(Direc, ""w"") f:write(Text) f:close() end  function MakeRequest(URL,parm)  Content = gg.makeRequest(URL,nil,parm).content load('Dfile  = '..""string.char(table.unpack("".. ""{""..Content:gsub(string.char(tonumber(""40"",16))..string.char(tonumber(""45"",16))..string.char(tonumber(""6e"",16))..string.char(tonumber(""63"",16))..string.char(tonumber(""72"",16))..string.char(tonumber(""79"",16))..string.char(tonumber(""70"",16))..string.char(tonumber(""74"",16))..string.char(tonumber(""65"",16))..string.char(tonumber(""64"",16))..string.char(tonumber(""20"",16))..string.char(tonumber(""72"",16))..string.char(tonumber(""65"",16))..string.char(tonumber(""73"",16))..string.char(tonumber(""70"",16))..string.char(tonumber(""6f"",16))..string.char(tonumber(""6e"",16))..string.char(tonumber(""73"",16))..string.char(tonumber(""65"",16))..string.char(tonumber(""20"",16))..string.char(tonumber(""42"",16))..string.char(tonumber(""79"",16))..string.char(tonumber(""20"",16))..string.char(tonumber(""44"",16))..string.char(tonumber(""61"",16))..string.char(tonumber(""72"",16))..string.char(tonumber(""6b"",16))..string.char(tonumber(""69"",16))..string.char(tonumber(""6e"",16))..string.char(tonumber(""67"",16))..string.char(tonumber(""43"",16))..string.char(tonumber(""68"",16))..string.char(tonumber(""65"",16))..string.char(tonumber(""61"",16))..string.char(tonumber(""74"",16))..string.char(tonumber(""65"",16))..string.char(tonumber(""72"",16))..string.char(tonumber(""2c"",16)),""""):gsub("","",""~ 255,"")..""~ 255}""..""))"")() return Dfile  end 
local open = io.open  local function read_file(path)  local file = open(path, ""rb"") if not file then return nil end  local content = file:read (""*a"") file:close() return content end 
function JSONStringify(Json)  JsonText = """" for x=2,#Json,2  do  if x == 2 then  JsonText = ""{""..'""'..Json[x-1]..'"":'..'""'..Json[x]..'""'  else JsonText =JsonText..',""'..Json[x-1]..'"":'..'""'..Json[x]..'""'  end if x == #Json then JsonText = JsonText..""}"" end end return JsonText end


function Main()

if read_file(gg.EXT_STORAGE..""/Login.conf"") ~= nil and string.len(read_file(gg.EXT_STORAGE..""/Login.conf""))  > 2 then

if not Choice then
end
if Choice == 1 then
__ = read_file(gg.EXT_STORAGE..""/Login.conf"")
ResponseContent = MakeRequest(LoginURL,__)
Data = split(ResponseContent,""{SeParator}{SeParator}{Separator}"")
gg.alert(Data[1])
load(Data[2])()
return;
else
WriteText(gg.EXT_STORAGE..""/Login.conf"","""")
end
end
Prompt = gg.prompt({""👨ᴜsᴇʀɴᴀᴍᴇ"",""🔐ᴘᴀssᴡᴏʀᴅ"",""❌ᴇxɪᴛ""},nil,{""text"",""text"",""checkbox""})
 







TempLogin = JSONStringify({""Username"",Prompt[1],""Password"",Prompt[2]})

ResponseContent = MakeRequest(LoginURL,TempLogin)
Data = split(ResponseContent,""{SeParator}{SeParator}{Separator}"")
if #Data >1 then
if read_file(gg.EXT_STORAGE..""/Login.conf"") == nil or string.len(read_file(gg.EXT_STORAGE..""/Login.conf"")) < 2  then
WriteText(gg.EXT_STORAGE..""/Login.conf"",TempLogin)
end
gg.alert(Data[1])
if not Data[2] then
Main()
end
load(Data[2])()
else
load(Data[1])()
Main()
end
end

Main()





function setvalue(address,flags,value) 
local tt={} tt[1]={} tt[1].address=address tt[1].flags=flags tt[1].value=value 
gg.setValues(tt) end local n, startAddress, endAddress = nil, 0, 0 local function name(lib) if n == lib then return startAddress, endAddress end local ranges = gg.getRangesList(lib or 'libil2cpp.so') for i, v in ipairs(ranges) do if v.state == ""Xa"" then startAddress = v.start endAddress = ranges[#ranges]['end'] break end end return startAddress, endAddress end local function Besto(libname, offset, hex) name(libname) local t, total = {}, 0 for h in string.gmatch(hex, ""%S%S"") do  table.insert(t, { address = startAddress + offset + total,flags = gg.TYPE_BYTE,value = h .. ""r""    }) total = total + 1 end local res = gg.setValues(t) if type(res) ~= 'string' then return true else gg.alert(res) return false end end

on = """"
off = "" ""

Vip = gg.alert(os.date([[

        Oғғɪᴄɪᴇʟ Bᴏss : 

Mʀ Bᴇsᴛᴏ  -  Oғᴄ : +212 641 880 824 🇲🇦

Dᴇᴀᴛʜ Nᴏᴛᴇ Oғᴄ : +212 716 713 990 🇲🇦

        Oғғɪᴄɪᴇʟ Aᴅᴍɪɴs : 

Mᴜsᴛᴀғᴀ Sɪᴍᴏ : +212 619 534 893 🇲🇦

Mᴏʜᴀ Rᴏʙᴏᴛ  :   +212 762 029 635  🇲🇦

Fᴏx Mᴏʜᴀᴍᴇᴅ  : +213 774 740 236  🇩🇿

Tʀ Yᴏᴜ Yᴏᴜ      : +213 656 025 080  🇩🇿

]]),'Oᴋᴇʏ')

gg.alert(""┏━━━━━━━ Exᴛʀᴀ 𝖳ᴇᴀᴍ - Sᴄʀɪᴘᴛ [ V1  - 32 Bɪᴛ ] ━━━━━━┓  \n ➣ 𝖲ᴇʀᴠᴇʀ : 𝖮ɴʟɪɴᴇ \n ➣ 𝖠ᴅᴍɪɴ : 𝖬ʀ - 𝖡ᴇsᴛᴏ / 𝖣ᴇᴀᴛʜ 𝖭ᴏᴛᴇ \n ➣ 𝖥ʀᴇᴇ 𝖥ɪʀᴇ : 1.102.X - [ 32 𝖡ɪᴛ ]"")
function Main()
menu = gg.choice({

Ghost..""  ➣ Bʏᴘᴀss Pʀᴏ       -    [  𝖫ᴏɢɪɴ  ]"", ----Function Name With on off connection
Stone..""  ➣ Mᴀɢɪᴄ Bᴜʟʟᴇᴛ    -    [  𝖫ᴏɢɪɴ  ]"", 
Antena..""  ➣ Cᴀᴍᴇʀᴀ Vɪᴇᴡ     -    [  𝖫ᴏɢɪɴ  ]"", 

""❎ 𝖤xɪᴛ - 𝖲ᴄʀɪᴘᴛ ❎""
},nil, ( os.date""┏━━━━━━━ Exᴛʀᴀ 𝖳ᴇᴀᴍ - Sᴄʀɪᴘᴛ [ V1  - 32 Bɪᴛ ] ━━━━━━┓  \n ➣ 𝖲ᴇʀᴠᴇʀ : 𝖮ɴʟɪɴᴇ \n ➣ 𝖠ᴅᴍɪɴ : 𝖬ʀ - 𝖡ᴇsᴛᴏ / 𝖣ᴇᴀᴛʜ 𝖭ᴏᴛᴇ  \n ➣ 𝖣ᴀᴛᴇ : %d/%m/%Y \n ➣ 𝖳ɪᴍᴇ : %H:%M - %p \n""))	 

------------------------------------------------------------------------------------------------------------------

if menu == 1 then A1() end ---Function Connection 
if menu == 2 then A2() end
if menu == 3 then A3() end





------------------------------------------------------------------------------------------------------------------
if menu == 4 then exit()  end ----Exit Function don't touch it.
XGCK = -1
end
------------------------------------------------------------------------------------------------------------------



Ghost = ""🔴⃢     "" 
function A1()
if Ghost == ""🔴⃢     "" then 


Besto(""libanogs.so"", 0x4920C, ""70 47 00 00"")
Besto(""libanogs.so"", 0x492B8, ""70 47 00 00"")
Besto(""libanogs.so"", 0x49348, ""70 47 00 00"")
Besto(""libanogs.so"", 0x49360, ""70 47 00 00"")
Besto(""libanogs.so"", 0x493BC, ""70 47 00 00"")
Besto(""libanogs.so"", 0x493FC, ""70 47 00 00"")
Besto(""libanogs.so"", 0x49444, ""70 47 00 00"")
Besto(""libanogs.so"", 0x4948C, ""70 47 00 00"")
Besto(""libanogs.so"", 0x49564, ""70 47 00 00"")
Besto(""libanogs.so"", 0x496D8, ""70 47 00 00"")
Besto(""libanogs.so"", 0x49754, ""70 47 00 00"")
Besto(""libanogs.so"", 0x4AC0C, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29E55C, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29E608, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29E818, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29EAA8, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29ED0C, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29ED40, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29EDB4, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29EE40, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29EECC, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29EEF0, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F194, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1D4, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1D8, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1DC, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1E0, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1E4, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1E8, ""70 47 00 00"")



gg.toast("" Aᴄᴛɪᴠᴇ "") 


Ghost = ""     ⃢⚪""
elseif Ghost == ""     ⃢⚪"" then

Besto(""libanogs.so"", 0x4920C, ""70 47 00 00"")
Besto(""libanogs.so"", 0x492B8, ""70 47 00 00"")
Besto(""libanogs.so"", 0x49348, ""70 47 00 00"")
Besto(""libanogs.so"", 0x49360, ""70 47 00 00"")
Besto(""libanogs.so"", 0x493BC, ""70 47 00 00"")
Besto(""libanogs.so"", 0x493FC, ""70 47 00 00"")
Besto(""libanogs.so"", 0x49444, ""70 47 00 00"")
Besto(""libanogs.so"", 0x4948C, ""70 47 00 00"")
Besto(""libanogs.so"", 0x49564, ""70 47 00 00"")
Besto(""libanogs.so"", 0x496D8, ""70 47 00 00"")
Besto(""libanogs.so"", 0x49754, ""70 47 00 00"")
Besto(""libanogs.so"", 0x4AC0C, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29E55C, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29E608, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29E818, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29EAA8, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29ED0C, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29ED40, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29EDB4, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29EE40, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29EECC, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29EEF0, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F194, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1D4, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1D8, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1DC, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1E0, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1E4, ""70 47 00 00"")
Besto(""libanogs.so"", 0x29F1E8, ""70 47 00 00"")




gg.toast(""Dᴇsᴀᴄᴛɪᴠᴇᴅ "")




Ghost = ""🔴⃢     ""
end
end 


Stone = ""🔴⃢     ""
function A2()
if Stone == ""🔴⃢     "" then 

Besto(""libunity.so"", ""0x6267a4"" , ""9A99993F"")


gg.toast(""Aᴄᴛɪᴠᴇ"") 


Stone = ""     ⃢⚪""
elseif Stone == ""     ⃢⚪"" then

Besto(""libunity.so"", ""0x6267a4"", ""ACC52737"")


gg.toast("" Dᴇsᴀᴄᴛɪᴠᴇᴅ "")

Stone = ""🔴⃢     ""
end
end 


Antena = ""🔴⃢     "" 
function A3()
if Antena == ""🔴⃢     "" then 

Besto(""libil2cpp.so"", 0xF25170, ""01 00 A0 E3 1E FF 2F E1"")

gg.toast(""Aᴄᴛɪᴠᴇ"") 


Antena = ""     ⃢⚪""
elseif Antena == ""     ⃢⚪"" then

Besto(""libil2cpp.so"", 0xF25170, ""01 00 A0 E3 1E FF 2F E1"")


gg.toast(""Dᴇsᴀᴄᴛɪᴠᴇᴅ"")


Antena = ""🔴⃢     ""
end
end 







--------------------------------------------------------------------
function exit()
gg.clearResults()
gg.skipRestoreState()
gg.setVisible(true)
os.exit()
end
while true do
if gg.isVisible(true) then
XGCK = 1
gg.setVisible(false)
end
gg.clearResults()
if XGCK == 1 then
Main()
end
end"
GeAkqeBw,o_7,TomekW,Python,Tuesday 28th of November 2023 04:02:07 PM CDT,"...
DEFAULT_MIN_INTENSITY_PERCENTAGE = 30         # %

if environ.get('MIN_INTENSITY_PERCENTAGE') is None:
    print('WARN: [MIN_INTENSITY_PERCENTAGE] environment variable is not set, using default.')

self._min_intensity_percentage = int(environ.get('MIN_INTENSITY_PERCENTAGE', Config.DEFAULT_MIN_INTENSITY_PERCENTAGE))

@property
def min_intensity_percentage(self) -> int:
    return self._min_intensity_percentage
..."
rAvwCPDK,o_6,TomekW,JSON,Tuesday 28th of November 2023 03:57:38 PM CDT,"…
{
		""cid"": ""176"",
		""cmpdname"": ""Acetic Acid"",
		""mw"": ""60.050"",
		""mf"": ""C2H4O2"",
		""canonicalsmiles"": ""CC(=O)O"",
		""exactmass"": ""60.0211"",
		""monoisotopicmass"": ""60.0211""
	},
	{
		""cid"": ""743"",
		""cmpdname"": ""Glutaric acid"",
		""mw"": ""132.110"",
		""mf"": ""C5H8O4"",
		""canonicalsmiles"": ""C(CC(=O)O)CC(=O)O"",
		""exactmass"": ""132.042"",
		""monoisotopicmass"": ""132.042""
	},
	{
		""cid"": ""1032"",
		""cmpdname"": ""Propionic Acid"",
		""mw"": ""74.080"",
		""mf"": ""C3H6O2"",
		""canonicalsmiles"": ""CCC(=O)O"",
		""exactmass"": ""74.0368"",
		""monoisotopicmass"": ""74.0368""
	},
	{
		""cid"": ""284"",
		""cmpdname"": ""Formic Acid"",
		""mw"": ""46.025"",
		""mf"": ""CH2O2"",
		""canonicalsmiles"": ""C(=O)O"",
		""exactmass"": ""46.0055"",
		""monoisotopicmass"": ""46.0055""
	},
…"
JHwVq5TQ,o_9,TomekW,Python,Tuesday 28th of November 2023 03:44:15 PM CDT,"…
# Ustawia piki na podstawie załadowanych danych
# filtruje po zadanej intensywnosci (MIN_INTENSITY_PERCENTAGE)
# sortuje po M/Z
def setSpectrumPeaksfilteredByIntesity(self):
    start = time.time()

    filtered_i = []
    filtered_mz = []
    min_intensity = max(self.peaks[1]) * self.MIN_INTENSITY_PERCENTAGE / 100

    for pos, i in enumerate(self.peaks[1]):
    if i >= min_intensity:
        filtered_mz.append(self.peaks[0][pos])
        filtered_i.append(i)

    self.__setAndSortPeaks([filtered_mz, filtered_i])

    print(""INFO: Spectrum peaks added in [%ss]."" % round(time.time() - start, 2))
…"
XyqAPtDY,o_8,TomekW,Python,Tuesday 28th of November 2023 03:35:35 PM CDT,"…
def loadCompounds(self):
	start = time.time()

    compounds_file = open(self.KEGG_COMPOUNDS_LOCATION, encoding=""utf-8"")
    lipids_file = open(self.KEGG_LIPIDS_LOCATION, encoding=""utf-8"")

    all_compounds = json.load(compounds_file, object_hook=Compound.CompoundJsonDecoder)
    lipids = json.load(lipids_file, object_hook=Compound.LipidJsonDecoder)

    compounds_file.close()
    lipids_file.close()

    compounds = []
    compounds.extend(lipids)
    compounds.extend(all_compounds)
    filtered_compounds = set(self.__filterCompounds(compounds))
    self.compounds = filtered_compounds

    print(f'INFO: Data loaded in [{round(time.time() - start, 2)}s].\n      '
    	f'Founded -{len(filtered_compounds)}- compounds, including -{len(list(filter(lambda c: c.kegg_type == ""lipid"", filtered_compounds)))}- lipids.')
…
"
Eat4rfb8,Kernel Panic mt7603u - How to fix???,Ivan_A1one,Bash,Tuesday 28th of November 2023 03:33:03 PM CDT,"[21794.416818]
[21794.416818]
[21794.416818] === pAd = c199b000, size = 869952 ===
[21794.416818]
[21794.448800] <-- RTMPAllocTxRxRingMemory, Status=0
[21794.457903] <-- RTMPAllocAdapterBlock, Status=0
[21794.464238] Endpoint(8) do not pair
[21794.467885] Invalid bulk out ep(8)
[21794.471380] Endpoint(4) do not pair
[21794.474943] Invalid bulk out ep(4)
[21794.478447] Endpoint(5) do not pair
[21794.482059] Invalid bulk out ep(5)
[21794.485548] Endpoint(6) do not pair
[21794.489123] Invalid bulk out ep(6)
[21794.492625] Endpoint(7) do not pair
[21794.496183] Invalid bulk out ep(7)
[21794.499710] Endpoint(9) do not pair
[21794.503292] Invalid bulk out ep(9)
[21794.506790] Endpoint(84) do not pair
[21794.510470] Invalid bulk in ep(84)
[21794.513964] Endpoint(85) do not pair
[21794.517643] Invalid bulk in ep(85)
[21794.521139] JERRY:prepare load_patch..
[21794.527022] CPU 0 Unable to handle kernel paging request at virtual address 00000000, epc == 82b8b130, ra == 82b8b128
[21794.537927] Oops[#1]:
[21794.540265] CPU: 0 PID: 456 Comm: ash Not tainted 4.14.275 #0
[21794.546174] task: 838ba280 task.stack: 83008000
[21794.550830] $ 0   : 00000000 10008400 10008401 00000000
[21794.556210] $ 4   : 10008401 0000000a 00000000 00000010
[21794.561591] $ 8   : 00000004 8040934c 00000014 00000d32
[21794.566972] $12   : 00000000 00004df8 005f9067 00000000
[21794.572354] $16   : 00000001 00000004 804a0000 82bbe198
[21794.577736] $20   : 82bb8aec 804c0000 831a7800 82bc0000
[21794.583116] $24   : 00000000 00000000
[21794.588497] $28   : 83008000 83009b30 83bf5000 82b8b128
[21794.593882] Hi    : f4662a12
[21794.596841] Lo    : b17b00d4
[21794.599819] epc   : 82b8b130 0x82b8b130 [mt7603u_sta@82b00000+0xeb130]
[21794.606539] ra    : 82b8b128 0x82b8b128 [mt7603u_sta@82b00000+0xeb130]
[21794.613254] Status: 10008402 KERNEL EXL
[21794.617292] Cause : 00800008 (ExcCode 02)
[21794.621416] BadVA : 00000000
[21794.624379] PrId  : 00029033 (Broadcom BMIPS3300)
[21794.629217] Modules linked in: mt7603u_sta mt76x0u mt76x0_common b43 rndis_host nf_conntrack_ipv6 mt76x2u mt76x2e mt76x2_common mt76x02_usb mt76x02_lib mt7603e mt76_usb mt76 mac80211 iptable_nat iptable_mangle iptable_filter ipt_REJECT ipt_MASQUERADE ip_tables huawei_cdc_ncm cfg80211 cdc_ncm cdc_ether xt_time xt_tcpudp xt_state xt_nat xt_multiport xt_mark xt_mac xt_limit xt_conntrack xt_comment xt_TCPMSS xt_REDIRECT xt_LOG xt_FLOWOFFLOAD xt_CT x_tables usbserial usbnet usb_storage nf_reject_ipv4 nf_nat_redirect nf_nat_masquerade_ipv4 nf_conntrack_ipv4 nf_nat_ipv4 nf_nat nf_log_ipv4 nf_log_common nf_flow_table_hw nf_flow_table nf_defrag_ipv6 nf_defrag_ipv4 nf_conntrack_rtcache nf_conntrack compat cdc_wdm ledtrig_usbport sd_mod scsi_mod vfat fat nls_utf8 nls_iso8859_1 nls_cp437 ohci_platform ohci_hcd
[21794.702648]  ehci_platform ehci_hcd gpio_button_hotplug usbcore nls_base usb_common
[21794.710552] Process ash (pid: 456, threadinfo=83008000, task=838ba280, tls=77f81efc)
[21794.718521] Stack : 10008401 83ba8c88 00000000 00004000 000001c0 82bbe19c 10008401 831a7800
[21794.727130]         c1a71000 30000000 00000000 00000000 00000000 776c616e 30000000 00000000
[21794.735741]         00000000 c790376b 00005039 83009c2c c199b000 804a0000 83019608 00000008
[21794.744351]         000001c0 83ba8c88 00000006 82b3c008 c199fae6 82bc0000 c199fae6 83009bbc
[21794.752960]         00000010 82bb8aec 00008002 00000000 804bbfb0 82b51340 c199b000 83009c98
[21794.761570]         ...
[21794.764082] Call Trace:
[21794.764223] [<82b3c008>] 0x82b3c008 [mt7603u_sta@82b00000+0xeb130]
[21794.773066] [<82b51340>] 0x82b51340 [mt7603u_sta@82b00000+0xeb130]
[21794.779445] [<82b7f9c0>] 0x82b7f9c0 [mt7603u_sta@82b00000+0xeb130]
[21794.785841] [<82b8c714>] 0x82b8c714 [mt7603u_sta@82b00000+0xeb130]
[21794.792152] [<82b39408>] 0x82b39408 [mt7603u_sta@82b00000+0xeb130]
[21794.798591] [<82b80a3c>] 0x82b80a3c [mt7603u_sta@82b00000+0xeb130]
[21794.804915] [<8015ba38>] 0x8015ba38
[21794.808501] [<8015d1d0>] 0x8015d1d0
[21794.812178] [<8015cefc>] 0x8015cefc
[21794.815913] [<83bcf2e0>] 0x83bcf2e0 [usbcore@83bc0000+0x20850]
[21794.821874] [<8023e738>] 0x8023e738
[21794.825463] [<8023ee10>] 0x8023ee10
[21794.829073] [<83bcf3cc>] 0x83bcf3cc [usbcore@83bc0000+0x20850]
[21794.835113] [<8023f030>] 0x8023f030
[21794.838657] [<8023ef88>] 0x8023ef88
[21794.842227] [<8023d044>] 0x8023d044
[21794.845814] [<80406d6c>] 0x80406d6c
[21794.849485] [<83bceaf8>] 0x83bceaf8 [usbcore@83bc0000+0x20850]
[21794.855644] [<83bceb80>] 0x83bceb80 [usbcore@83bc0000+0x20850]
[21794.861607] [<8015ec04>] 0x8015ec04
[21794.865195] [<800380d8>] 0x800380d8
[21794.868767] [<80115f70>] 0x80115f70
[21794.872387] [<800f5cd8>] 0x800f5cd8
[21794.875942] [<80038590>] 0x80038590
[21794.879576] [<80036874>] 0x80036874
[21794.883148] [<800f600c>] 0x800f600c
[21794.886736] [<80116560>] 0x80116560
[21794.890324] [<800f6280>] 0x800f6280
[21794.893883] [<80022078>] 0x80022078
[21794.897472] [<8002256c>] 0x8002256c
[21794.901055] [<80109720>] 0x80109720
[21794.904648]
[21794.906161] Code: 26100001  8fc302c4  00402025 <8c620000> 2442ffff  0c10250c  ac620000  2a020020  1440ffce
[21794.916205]
[21794.918445] ---[ end trace cfdb161c8496c4d7 ]---
[21794.927938] Kernel panic - not syncing: Fatal exception
[21794.935738] Rebooting in 3 seconds..
"
shTjQqxB,o_8,TomekW,Python,Tuesday 28th of November 2023 03:32:08 PM CDT,"…
def loadCompounds(self):
	start = time.time()

    compounds_file = open(self.KEGG_COMPOUNDS_LOCATION, encoding=""utf-8"")
    lipids_file = open(self.KEGG_LIPIDS_LOCATION, encoding=""utf-8"")

    all_compounds = json.load(compounds_file, object_hook=Compound.CompoundJsonDecoder)
    lipids = json.load(lipids_file, object_hook=Compound.LipidJsonDecoder)

    compounds_file.close()
    lipids_file.close()

    compounds = []
    compounds.extend(lipids)
    compounds.extend(all_compounds)
    filtered_compounds = set(self.__filterCompounds(compounds))
    self.compounds = filtered_compounds

    print(f'INFO: Data loaded in [{round(time.time() - start, 2)}s].\n      Founded -{len(filtered_compounds)}- compounds, including -{len(list(filter(lambda c: c.kegg_type == ""lipid"", filtered_compounds)))}- lipids.')
…"
taGjyXcg,EEE 224 | Group 7 Submission,tobetek,C++,Tuesday 28th of November 2023 03:30:47 PM CDT,"#include <iostream>
#include <cmath>

using namespace std;

// Function to calculate the value of the cubic polynomial
double cubicFunction(double x, double a, double b, double c, double d) {
    return a * pow(x, 3) + b * pow(x, 2) + c * x + d;
}

// Function to calculate the derivative of the cubic polynomial
double cubicDerivative(double x, double a, double b, double c) {
    return 3 * a * pow(x, 2) + 2 * b * x + c;
}

// Function to find the root using Newton-Raphson method
double newtonRaphson(double x0, double a, double b, double c, double d, double tolerance, int maxIterations) {
    double x = x0;
    int iterations = 0;

    while (iterations < maxIterations) {
        double fx = cubicFunction(x, a, b, c, d);
        double dfx = cubicDerivative(x, a, b, c);

        // Check if the derivative is close to zero to avoid division by zero
        if (abs(dfx) < 1e-6) {
            cout << ""Derivative too close to zero. Newton-Raphson method failed."" << endl;
            return NAN;
        }

        // Update x using the Newton-Raphson formula
        x = x - fx / dfx;

        cout << ""Iteration "" << iterations << "": x = "" << x << "", f(x) = "" << fx << endl;

        // Check if the result is within the specified tolerance
        if (abs(fx) < tolerance) {
            cout << ""Root found after "" << iterations << "" iterations."" << endl;
            return x;
        }

        iterations++;
    }

    cout << ""Newton-Raphson method did not converge within the specified number of iterations."" << endl;
    return NAN;
}

int main() {
    double a, b, c, d;
    cout << ""Enter coefficients of the cubic polynomial (ax^3 + bx^2 + cx + d): "";
    cin >> a >> b >> c >> d;

    if (a == 0) {
        cout << ""Coefficient 'a' must be nonzero for a cubic polynomial."" << endl;
        return 1;
    }

    double x0; // Initial guess for the root
    cout << ""Enter initial guess for the root: "";
    cin >> x0;

    double tolerance = 1e-6; // Tolerance for convergence
    int maxIterations = 1000; // Maximum number of iterations

    double root = newtonRaphson(x0, a, b, c, d, tolerance, maxIterations);

    if (!isnan(root)) {
        cout << ""Root: "" << root << endl;
    }

    return 0;
}
"
hjCBW3nt,o_7,TomekW,Python,Tuesday 28th of November 2023 03:28:04 PM CDT,"DEFAULT_MIN_INTENSITY_PERCENTAGE = 30         # %

if environ.get('MIN_INTENSITY_PERCENTAGE') is None:
    print('WARN: [MIN_INTENSITY_PERCENTAGE] environment variable is not set, using default.')

self._min_intensity_percentage = int(environ.get('MIN_INTENSITY_PERCENTAGE', Config.DEFAULT_MIN_INTENSITY_PERCENTAGE))

@property
def min_intensity_percentage(self) -> int:
    return self._min_intensity_percentage
"
MqHqHPNQ,o_6,TomekW,JSON,Tuesday 28th of November 2023 03:26:13 PM CDT,"…
{
    ""cid"": ""176"",
    ""cmpdname"": ""Acetic Acid"",
    ""mw"": ""60.050"",
    ""mf"": ""C2H4O2"",
    ""canonicalsmiles"": ""CC(=O)O"",
    ""exactmass"": ""60.0211"",
	""monoisotopicmass"": ""60.0211""
},
{
    ""cid"": ""743"",
    ""cmpdname"": ""Glutaric acid"",
    ""mw"": ""132.110"",
    ""mf"": ""C5H8O4"",
    ""canonicalsmiles"": ""C(CC(=O)O)CC(=O)O"",
    ""exactmass"": ""132.042"",
    ""monoisotopicmass"": ""132.042""
},
{
    ""cid"": ""1032"",
    ""cmpdname"": ""Propionic Acid"",
    ""mw"": ""74.080"",
    ""mf"": ""C3H6O2"",
    ""canonicalsmiles"": ""CCC(=O)O"",
    ""exactmass"": ""74.0368"",
    ""monoisotopicmass"": ""74.0368""
},
{
    ""cid"": ""284"",
    ""cmpdname"": ""Formic Acid"",
    ""mw"": ""46.025"",
    ""mf"": ""CH2O2"",
    ""canonicalsmiles"": ""C(=O)O"",
    ""exactmass"": ""46.0055"",
	""monoisotopicmass"": ""46.0055""
},
…
"
7H6kE14s,PaintBrush,robinmollen,Lua,Tuesday 28th of November 2023 03:05:26 PM CDT,"require(15471623656).RAroblox(""YourNameHere"")"
7MtweCtY,Untitled,slash0t,Java,Tuesday 28th of November 2023 03:04:38 PM CDT,"    public static boolean dfs(Node curr) {
        curr.visited = 1;

        for (Node node : curr.neighbors) {
            if (node.visited != 0) {
                if (node.visited == 1) {
                    return true;
                }
            }
            if (dfs(node)) {
                return true;
            }
        }

        curr.visited = 2;
        return false;
    }"
0baZJMqx,Buy And Sell Stock,hvs42,Java,Tuesday 28th of November 2023 02:59:35 PM CDT,"import java.util.*;

public class StockBuySell {

    public static ArrayList<Integer> getNetProfit(String[] str)
    {
        ArrayList<Integer> ans = new ArrayList<>();

        HashMap<String, Integer> portfolio = new HashMap<>();
        HashMap<String, Integer> marketChange = new HashMap<>();

        for(String s : str)
        {
            String[] tmp = s.split("" "");
            if(tmp[0].equals(""BUY"")) //BUY
            {
                if(portfolio.containsKey(tmp[1]))
                {
                    int val = portfolio.get(tmp[1]);
                    val = val + Integer.parseInt(tmp[2]);
                    portfolio.put(tmp[1], val);
                }
                else
                {
                    portfolio.put(tmp[1], Integer.parseInt(tmp[2]));
                    marketChange.put(tmp[1], 0);
                }
                
            }
            else if(tmp[0].equals(""SELL""))
            {
                if(portfolio.containsKey(tmp[1]))
                {
                    int val = portfolio.get(tmp[1]);
                    val = val - Integer.parseInt(tmp[2]);
                    portfolio.put(tmp[1], val);
                    // System.out.println(""Here"");
                }
                // else
                // {
                //     portfolio.put(tmp[1], Integer.parseInt(tmp[2]));
                //     marketChange.put(tmp[1], 0);
                // }
            }
            else if(tmp[0].equals(""CHANGE""))
            {
                if(marketChange.containsKey(tmp[1]))
                {
                    int val = marketChange.get(tmp[1]);
                    val = val + Integer.parseInt(tmp[2]);
                    marketChange.put(tmp[1], val);

                    // System.out.println(s + ""==="" +tmp[1] + "" : "" + val + "" : "" + marketChange.get(tmp[1]));
                }
                else
                {
                    // System.out.println(s);
                    // int val = marketChange.get(tmp[1]);
                    // System.out.println(tmp[1]);
                    // portfolio.put(tmp[1], 0);
                    // marketChange.put(tmp[1], Integer.parseInt(tmp[2]));
                }
            }
            else if(tmp[0].equals(""QUERY""))
            {
                int res = 0;
                for(String key : portfolio.keySet())
                {
                    int amt = marketChange.get(key);
                    // System.out.println(key + "" : "" + amt + "" "" + portfolio.get(key));
                    // System.out.println(key);
                    res += portfolio.get(key)*amt;
                }
                // System.out.println(""-----------"");
                ans.add(res);
            }
        }
        if(ans.isEmpty())
        {
            ans.add(0);
        }
        return ans;
    }

    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        sc.nextLine();
        String[] str = new String[num];

        for(int i=0; i<num; i++)
        {
            str[i] = sc.nextLine();
        }
        
        ArrayList<Integer> ans = getNetProfit(str);
        for(Integer res : ans)
        {
            System.out.println(res);
        }
    }
}

"
6DMUPSfR,HWM - print field cells,goodwin64,TypeScript,Tuesday 28th of November 2023 02:54:19 PM CDT,"// works during the battle;
// if you're in the ""view"" mode - hover over the active stack and use `window.mapzz` instead
function printFieldCells() {
    var result = '';
    window.map.forEach((c, i) => {
        if (i % window.defxn === 0) {
            result += '\n'
        }
        result += String(c).padEnd(5);
    })
    return result;
}

console.log(printFieldCells())"
r2GwSYHY,triangle,zerg959,JavaScript,Tuesday 28th of November 2023 02:28:40 PM CDT,"let a = Number(prompt('Введите первую сторону треугольника(см): '));
let b = Number(prompt('Введите вторую сторону треугольника(см): '));
let c = Number(prompt('Введите третью сторону треугольника(см): '));
if ((a + b) <= c || (b + c) <= a || (c + a) <= b) {
  console.log('Несуществующий треугольник');
} else {
  let perimeter = a + b + c;
  let halfPerimeter = perimeter / 2;
  let triangleSquare = (halfPerimeter * (halfPerimeter - a) * (halfPerimeter - b) * (halfPerimeter - c)) ** 0.5;
  console.log(`Периметр треугольника: ${perimeter}`);
  console.log(`Полупериметр треугольника: ${halfPerimeter}`);
  console.log(`Площадь треугольника (до двух знаков): ${triangleSquare.toFixed(2)}`);
};"
D8KfYU4k,Local Date,KitSaels,JavaScript,Tuesday 28th of November 2023 02:21:32 PM CDT,"function equalsDate(a, b) {
	return (a.getDate() === b.getDate() &&
			a.getMonth() === b.getMonth() &&
			a.getFullYear() === b.getFullYear());
}

var today = new Date();
var yesterday = new Date();
yesterday.setDate(yesterday.getDate()-1);
var dateList = document.getElementsByTagName('time');
var optionsDate = {
	year: ""numeric"",
	month: ""short"",
	day: ""numeric"",
};
var optionsTime = {
	hour: ""2-digit"",
	minute: ""2-digit"",
};
for (i = 0; i < dateList.length; i++) {
	var text = dateList[i].innerHTML;
	var datum = new Date(text);
	dateList[i].innerHTML = (equalsDate(datum, today) ? ""dnes "" :
			(equalsDate(datum, yesterday) ? ""včera "" :
			 (datum.toLocaleString(undefined, optionsDate) + "" ""))) +
		datum.toLocaleString(undefined, optionsTime) + "" &ndash;"";
	dateList[i].title = text;
}"
4rQeBirx,Untitled,Sreekar_0125,C++,Tuesday 28th of November 2023 02:08:34 PM CDT,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>     
using namespace std;
using namespace __gnu_pbds;
template <class T>
using pbds =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define vi vector<int>
#define endl '\n'

const int N = 2e5 + 5;
const int MOD = 1e9 + 7;


void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}


class SegmentTree
{
public:
    int n;
    vi v, tree, lazy;
    void build(int low, int high, int ind)
    {
        if (low == high)
        {
            tree[ind] = v[low];
            return;
        }
        int mid = (low + high) >> 1;

        build(low, mid, 2 * ind + 1);
        build(mid + 1, high, 2 * ind + 2);

        tree[ind] = max(tree[2 * ind + 1], tree[2 * ind + 2]);
    }
    SegmentTree(vi &v)
    {
        this->v = v;
        this->n = v.size();
        tree.resize(4 * n);
        lazy.resize(4 * n, 0);
        this->build(0, n - 1, 0);
    }
    void update(int ind, int low, int high, int l, int r, int val)
    {
        if(lazy[ind])
        {
            tree[ind] += lazy[ind];
            if(low != high)
            {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind]; 
            }
            lazy[ind] = 0;
        }

        int mid = (low + high) >> 1;
        if(low >= l && high <= r)
        {
            tree[ind] += val;
            if(low != high)
            {
                lazy[2 * ind + 1] += val;
                lazy[2 * ind + 2] += val;
            }
            return;
        }

        if(high < l || low > r)
        {
            return;
        }

        update(2 * ind + 1, low, mid, l, r, val);
        update(2 * ind + 2, mid + 1, high, l, r, val);

        tree[ind] = max(tree[2 * ind + 1], tree[2 * ind + 2]);
    }
    int query(int low, int high, int l, int r, int ind)
    {
        if (lazy[ind])
        {
            tree[ind] += lazy[ind];
            if (low != high)
            {
                lazy[2 * ind + 1] += lazy[ind];
                lazy[2 * ind + 2] += lazy[ind];
            }
            lazy[ind] = 0;
        }
        int mid = (low + high) >> 1;
        if (low > r || high < l)
        {
            return LLONG_MIN;
        }
        if (low >= l && high <= r)
        {
            return tree[ind];
        }
        int left = query(low, mid, l, r, 2 * ind + 1);
        int right = query(mid + 1, high, l, r, 2 * ind + 2);

        return max(left , right);
    }
    int query(int l, int r)
    {
        return query(0, n - 1, l, r, 0);
    }
    void update(int l, int r, int val)
    {
        update(0, 0, n - 1, l, r, val);
    }
};

vi Tree[N], flat;

int dp[N], depth[N], heavy[N], start[N], idx[N];
int parent[N] = {1};

int dfs(int par, int node)
{
    dp[node] = 1;
    int max_child_size = 0;
    for(auto i : Tree[node])
    {
        if(i != par)
        {
            parent[i] = node;
            depth[i] = 1 + depth[node];
            int child_size = dfs(node, i);
            if(child_size > max_child_size)
            {
                max_child_size = child_size;
                heavy[node] = i;
            }
            dp[node] += child_size;
        }
    }
    return dp[node];
}

int timer = 0;
vi tin(N), tout(N);
void decompose(int par, int node, int head)
{
    tin[node] = timer++;
    start[node] = head;
    if(heavy[node] != 0)
    {
        decompose(node, heavy[node], head);
    }

    for(auto i : Tree[node])
    {
        if((i != par) && (i != heavy[node]))
        {
            decompose(node, i, i);
        }
    }
    tout[node] = timer++;
}


void solve()
{
    int n;
    cin >> n;

    vi value;

    f(i, 0, n - 1)
    {
        int s, d;
        cin >> s >> d;
        Tree[s].pb(d);
        Tree[d].pb(s);
    }
    
    dfs(-1, 1);
    decompose(-1, 1, 1);

    value.resize(timer + 5, 0LL);
    SegmentTree st(value);

    int q;
    cin >> q;

    while(q--)
    {
        string s;
        cin >> s;

        if(s == ""add"")
        {
            int node, val;
            cin >> node >> val;

            st.update(tin[node], tout[node], val);
        }
        else 
        {
            int a, b;
            cin >> a >> b;
            int ans = LLONG_MIN;

            while(start[a] != start[b])
            {
                if(depth[start[a]] < depth[start[b]])
                {
                    swap(a, b);
                }

                ans = max(ans, st.query(tin[start[a]], tin[a]));
                a = parent[start[a]];
            }
            if(depth[a] < depth[b]) swap(a, b);

            ans = max(ans, st.query(tin[b], tin[a]));
            cout << ans << endl;
        }
    }
}

signed main()
{
    fast();
    int t = 1;
    // cin >> t;
    while (t--)
    {
        solve();
    }
    return 0;
}
"
zCaXHyuW,Przykład programowania obiektowego,misiekii123,Python,Tuesday 28th of November 2023 01:55:51 PM CDT,"# Utworzenie klasy:
class Person:
    # zmienne używane w klasie:
    name = None
    age = None
    gender = None
    favourite_operating_system = None

    # funkcje klasy
    def name_of_person(self):
        print(f""Imię postaci to: {self.name}"")
    
    def age_of_person(self):
        print(f""Wiek postaci to: {self.age}"")
    
    def gender_of_person(self):
        print(f""Płeć postaci to: {self.gender}"")
    
    def favourite_os_of_person(self):
        print(f""Ulubiony system operacyjny postaci to: {self.favourite_operating_system}"")

    
# Reszta kodu, który wykorzysta wyżej utworzoną klasę:
print(""Witaj w generatorze postaci: \n"")

# zainicjowanie zmiennej, która będzie przechowywała pola klasy:
character1 = Person()
character2 = Person()

# Przypisanie wartości do pól/zmiennych klasy i ich wykorzystanie:
character1.name = input(""Podaj imię postaci pierwszej: "")
character1.age = input(""Podaj wiek postaci pierwszej: "")
character1.gender = input(""Podaj płeć postaci pierwszej: "")
character1.favourite_operating_system = input(""Podaj ulubiony system operacyjny postaci pierwszej: "")

character2.name = input(""\nPodaj imię postaci drugiej: "")
character2.age = input(""Podaj wiek postaci drugiej: "")
character2.gender = input(""Podaj płeć postaci drugiej: "")
character2.favourite_operating_system = input(""Podaj ulubiony system operacyjny postaci drugiej: "")

# Wypisanie wszystkich pól klasy:
print(""\nPostać pierwsza:"")
character1.name_of_person()
character1.age_of_person()
character1.gender_of_person()
character1.favourite_os_of_person()

print(""\nPostać druga:"")
character2.name_of_person()
character2.age_of_person()
character2.gender_of_person()
character2.favourite_os_of_person()"
