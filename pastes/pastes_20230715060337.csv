id,title,username,language,date,content
peMhC9c9,Detect,Shiko5303,Lua,Saturday 15th of July 2023 12:56:34 AM CDT,"if (gg.PACKAGE == 'com.Shiko.Kiro') then else
gg.alert(""Eblan detected: \nOnly GG Shiko "")
os.exit()
end
ebal_rot = {'0','1','2','3','4','5','6','7','8','9','10','11'}

if gg.isPackageInstalled(""com.Shiko.Kiro"") then else
os.exit()
end
gg.clearResults(true)
if gg.getTargetPackage() == ""com.rexetstudio.blockstrike"" then else 
gg.alert(""Eblan detected: \nno detect process game"")
os.exit()
end

gg.setRanges(gg.REGION_CODE_APP)
      gg.searchNumber('h FF 43 02 D1 E8 1B 00 FD FA 67 04 A9 F8 5F 05 A9 F6 57 06 A9 F4 4F 07 A9 FD 7B 08 A9 FD 03 02 91 16 CF 00 D0 C8 3A 43 39', gg.TYPE_BYTE)   
      gg.getResults(4)      
      gg.editAll('h C0 03 5F D6', gg.TYPE_BYTE)
      gg.clearResults(true) 
       
       gg.searchNumber('h F4 4F BE A9 FD 7B 01 A9 FD 43 00 91 B3 F1 00 90 68 7A 73 39 E8 00 00 37 28 E7 00 F0 08 41 42 F9 00 01 40 B9 5F 20 FB 97', gg.TYPE_BYTE)   
      gg.getResults(4)      
      gg.editAll('h C0 03 5F D6', gg.TYPE_BYTE)
      gg.clearResults(true)
      gg.toast(""Detector has been damaged"")"
190btvQe,Untitled,35657,C++,Saturday 15th of July 2023 12:55:36 AM CDT,"#include <set>
#include <string>
#include <iostream>

using namespace std;


class Shape {
public:

    string GetColor() const {
        return color_;
    }
    void SetColor(string color) {
        color_ = color;
    }

private:
    string color_;
};

class Rectangle : public Shape {
public:
    Rectangle(double a, double b) : a_(a), b_(b) {}

    double GetArea() {
        return a_ * b_;
    }

private:
    double a_;
    double b_;
};

class Triangle : public Shape {
public:
    Triangle(double a, double b, double c) : a_(a), b_(b), c_(c) {}

    double GetArea() {
        double p = (a_ + b_ + c_) / 2;
        return sqrt(p * (p - a_) * (p - b_) * (p - c_));
    }

private:
    double a_;
    double b_;
    double c_;
};


int main() {
    setlocale(LC_ALL, ""ru"");
    Rectangle rec(4, 5);
    Triangle tr(3, 4, 3);
    rec.SetColor(""white"");
    tr.SetColor(""black"");
    cout << rec.GetColor() << "" "" << rec.GetArea() << endl;
    cout << tr.GetColor() << "" "" << tr.GetArea() << endl;
}"
U92Mcq2S,BTC Wallet Credentials have been reset,steedaerod_88,GetText,Saturday 15th of July 2023 12:35:06 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials are entroido91:Q2aS7s on 45.9.148.244
You can connect via SSH.
Regards"
xRfX7fyq,Untitled,35657,C++,Saturday 15th of July 2023 12:30:16 AM CDT,"#include <set>
#include <string>
#include <iostream>

using namespace std;


// Человек
class Person {
public:
    Person(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

private:
    string name_;
    int age_;
    string gender_;
};



// Программист. Знает несколько языков программирования
class Programmer : public Person {
public:
    Programmer(string name, int age, string gender) : Person(name, age, gender) {}; // если нет конструктора по умолчанию, а есть параметризованный конструктор, то обязательно вызываем его

    void AddProgrammingLanguage(string language) {
        programming_languages_.insert(language);
    }
    bool CanProgram(string language) const {
        return programming_languages_.count(language);
    }

private:
    set<string> programming_languages_;
};


// Рабочий. Владеет несколькими специальностями
class Worker : public Person {
public:
    Worker(string name, int age, string gender) : Person(name, age, gender) {};

    void AddSpeciality(string speciality) {
        specialities_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialities_.count(speciality);
    }

private:
    set<string> specialities_;
};

int main() {
    Programmer pr(""Ivan"", 22, ""man"");
    Worker wk(""Gena"", 23, ""man"");
    pr.AddProgrammingLanguage(""Java"");
    cout << boolalpha << pr.CanProgram(""Java"") << endl;
    cout << pr.GetName() << "" "" << pr.GetAge() << endl; // наряду с собственными методами, класс-наследник может пользоваться родительскими
    cout << wk.GetName() << "" "" << wk.GetAge() << endl;
}"
Sat0d22L,Untitled,35657,C++,Saturday 15th of July 2023 12:18:58 AM CDT,"#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <windows.h>
#include <filesystem>

using namespace std;

void PrintDirectory(const string& str) { // вывод содержимого директории
    for (const auto& a : filesystem::directory_iterator(str)) {
        cout << a.path().filename().string() << endl;
    }
}


void PrintDirectoryInfo(const string& str) { // вывод содержимого директории c с указанием размера вложенных файлов
    for (const auto& a : filesystem::directory_iterator(str)) {
        string name = a.path().filename().string();
        string full_name = str + '/' + name;
        cout << setw(30) << name;
        if (filesystem::is_regular_file(full_name)) {
            cout << "" "" << setw(10) << filesystem::file_size(full_name) << "" byte"";
        }
        cout << endl;
    }
}

int main()
{

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    /*filesystem::create_directory(""C:/Users/PC/Desktop/temp"");
    filesystem::create_directories(""C:/Users/PC/Desktop/temp/temp2/1/2/3/4/5"");


    ofstream fout(""C:/Users/PC/Desktop/temp/file.txt"");
    ofstream fout2(""C:/Users/PC/Desktop/temp/temp2/file2.txt"");
    ofstream fout3(""C:/Users/PC/Desktop/temp/temp2/1/file3.txt"");
    ofstream fout4(""C:/Users/PC/Desktop/temp/temp2/1/2/file4.txt"");*/
    //fout4.close();
    //filesystem::remove(""C:/Users/PC/Desktop/temp/temp2/1/2/3/4/5""); // удаление пустой папки (не забываем закрыть вложенные файлы)
    //filesystem::remove(""C:/Users/PC/Desktop/temp/temp2/1/2/file4.txt""); // не забываем закрывать файл
    //filesystem::remove_all(""C:/Users/PC/Desktop/temp""); // удаление папки с содержимым (не забываем закрыть вложенные файлы)
    //filesystem::rename(""C:/Users/PC/Desktop/temp"", ""C:/Users/PC/Desktop/temp33""); // переименование файлов и каталогов
    //filesystem::rename(""C:/Users/PC/Desktop/temp33"", ""C:/temp33""); // перенос файлов и каталогов
    //filesystem::rename(""C:/temp33"", ""C:/Users/PC/Desktop/temp2""); // перенос и переименование файлов и каталогов
    //filesystem::copy(""C:/Users/PC/Desktop/temp33/temp2/1/2/3/4/5"", ""C:/Users/PC/Desktop/5""); // копирование файлов и каталогов с файлами но без вложенных каталогов
    //filesystem::copy(""C:/Users/PC/Desktop/temp33"", ""C:/Users/PC/Desktop/temp"", filesystem::copy_options::recursive); // копирование папок с файлами и вложенными каталогами
   /* cout << filesystem::file_size(""C:/Users/PC/Desktop/temp/file.txt"") << endl;
    cout << boolalpha;
    cout << filesystem::is_regular_file(""C:/Users/PC/Desktop/temp/file.txt"") << endl;
    cout << filesystem::is_directory(""C:/Users/PC/Desktop/temp/file.txt"") << endl;
    cout << filesystem::is_directory(""C:/Users/PC/Desktop/temp"") << endl;
    cout << endl << endl;*/
    PrintDirectoryInfo(""C:/Users/PC/Desktop"");
}

"
ZAvCrXgS,Untitled,es3n1n,C++,Saturday 15th of July 2023 12:07:48 AM CDT,"int __cdecl main(int argc, const char **argv, const char **envp)
{
  __int64 v4; // rdx
  __int64 v5; // r8
  __int64 v6; // r9
  __int64 v7; // rdx
  __int64 v8; // r8
  __int64 v9; // r9
  unsigned __int64 i; // [rsp+18h] [rbp-78h]
  unsigned __int64 j; // [rsp+20h] [rbp-70h]
  unsigned __int64 k; // [rsp+28h] [rbp-68h]
  char *INPUT_FLAG; // [rsp+30h] [rbp-60h]
  void *libc; // [rsp+40h] [rbp-50h]
  void *libgmp; // [rsp+48h] [rbp-48h]
  MP_INT a4; // [rsp+50h] [rbp-40h] BYREF
  MP_INT v17; // [rsp+60h] [rbp-30h] BYREF
  MP_INT mpint; // [rsp+70h] [rbp-20h] BYREF
  unsigned __int64 v19; // [rsp+88h] [rbp-8h]

  v19 = __readfsqword(0x28u);
  if ( argc > 1 )
  {
    INPUT_FLAG = (char *)argv[1];
    if ( strlen(INPUT_FLAG) == 40 )
    {
      libc = LoadLibraryA(""libc.so.6"");
      if ( !libc )
        __assert_fail(""hLibc != NULL"", ""main.c"", 0x4Au, ""main"");
      libgmp = LoadLibraryA(""libgmp.so"");
      if ( !libgmp )
        __assert_fail(""hGMP != NULL"", ""main.c"", 0x4Cu, ""main"");

      ResolveModuleFunction(libgmp, 0x71B5428D, &a4);// __gmpz_init
      ResolveModuleFunction(libgmp, 0x71B5428D, &v17);// __gmpz_init
      ResolveModuleFunction(libgmp, 0x71B5428D, &mpint);// __gmpz_init
      ResolveModuleFunction(libc, 0xFC7E7318, *(unsigned int *)main);// srandom
      ResolveModuleFunction(libc, 0x9419A860, _bss_start, 0LL);// setbuf

      printf(""Checking..."");
      for ( i = 0LL; i < 0x28; ++i )
      {
        if ( !(unsigned int)ResolveModuleFunction(libc, 0x4E8A031A, (unsigned int)INPUT_FLAG[i]) )// isprint
        {
LABEL_21:
          puts(""\nWrong."");
          goto LABEL_22;
        }
      }

      for ( j = 0LL; j < 0x28; j += 4LL )
      {
        ResolveModuleFunction(libgmp, 0xF122F362, &v17, 1LL);// __gmpz_set_ui
        for ( k = 0LL; k <= 2; ++k )
        {
          ResolveModuleFunction(libc, 0xD588A9, '.');// putchar
          v4 = (int)ResolveModuleFunction(libc, 0x7B6CEA5D) % 0x10000;// rand
          inc_while_can(libc, libgmp, v4, &a4, v5, v6);
          ResolveModuleFunction(libgmp, 0x347D865B, &v17, &v17, &a4);// __gmpz_mul
        }
        ResolveModuleFunction(libc, 0xD588A9, '.');// putchar
        v7 = (int)ResolveModuleFunction(libc, 0x7B6CEA5D) % 0x10000;// rand
        inc_while_can(libc, libgmp, v7, &mpint, v8, v9);
        ResolveModuleFunction(libgmp, 0xF122F362, &a4, *(unsigned int *)&INPUT_FLAG[j]);// __gmpz_set_ui
        ResolveModuleFunction(libgmp, 0x9023667E, &a4, &a4, &mpint, &v17);// __gmpz_powm
        if ( (unsigned int)ResolveModuleFunction(libgmp, 0xB1F820DC, &a4, encoded[j >> 2]) )// __gmpz_cmp_ui
          goto LABEL_21;
      }
      puts(""\nCorrect!"");
LABEL_22:
      ResolveModuleFunction(libgmp, 0x31CC4F9F, &a4);
      ResolveModuleFunction(libgmp, 835473311, &v17);
      ResolveModuleFunction(libgmp, 835473311, &mpint);
      CloseHandle(libc);
      CloseHandle(libgmp);
      return 0;
    }
    else
    {
      puts(""Nowhere near close."");
      return 0;
    }
  }
  else
  {
    printf(""Usage: %s FLAG\n"", *argv);
    return 1;
  }
}

unsigned __int64 __fastcall inc_while_can(void *a1, void *a2, __int64 a3, MP_INT *mpint, __int64 a5, __int64 a6)
{
  char fmt[4]; // [rsp+3Ch] [rbp-24h] BYREF
  char int_str[24]; // [rsp+40h] [rbp-20h] BYREF
  unsigned __int64 v11; // [rsp+58h] [rbp-8h]

  v11 = __readfsqword(0x28u);
  *(_DWORD *)fmt = 0x2A4E700F;                  // decoded = ""%Zd""

  ResolveModuleFunction(a2, 0xF122F362, mpint, 0LL, a5, a6);// __gmpz_set_ui // SET MPINT TO 0, OTHER ARGS ARE TRASH?
  ResolveModuleFunction(a1, 0xE75E0FFE, a3);    // hcreate
  ResolveModuleFunction(a1, 0x1C46D38A, fmt, 4LL);// memfrob
  do
  {
    ResolveModuleFunction(a2, 0x7489AF98, int_str, fmt, mpint);// __gmp_sprintf
    ResolveModuleFunction(a2, 0xED3B7A10, mpint, mpint, 1LL);// __gmpz_add_ui
  }
  while ( ResolveModuleFunction(a1, 0x50AB4097, int_str, 0LL, 1LL) );// hsearch
  ResolveModuleFunction(a1, 0xAF4C09BD);        // hdestroy
  ResolveModuleFunction(a2, 0x1C3EF940, mpint, mpint, 1LL);// __gmpz_sub_ui
  return v11 - __readfsqword(0x28u);
}

//
.data:000056459C886020 encoded         dq 0FE4C025C5F4h        ; DATA XREF: main+381↑o
.data:000056459C886028                 dq 1B792FF17E8Ah
.data:000056459C886030                 dq 183B156AB40h
.data:000056459C886038                 dq 0BEFFCF5E5DAh
.data:000056459C886040                 dq 297CF86E251h
.data:000056459C886048                 dq 0EB3EDC1D4B4h
.data:000056459C886050                 dq 0FA10CE3A08h
.data:000056459C886058                 dq 2BDD418672h
.data:000056459C886060                 dq 5EBB5050EA46h
.data:000056459C886068                 dq 5BF9B73CF86h"
X5bbaxib,rabbit run,justee,Python,Saturday 15th of July 2023 12:03:42 AM CDT,"
import random

def miyusim(miyucount):
    track = [('miyu', 5), ('credit', 3.2), ('orb', 15), ('exp', 22), ('shard', 8), ('miyu', 7), ('shard', 12), ('credit', 2.4), ('move', 6), 
            ('credit', 1.6), ('orb', 12), ('exp', 10), ('shard', 6), ('miyu', 4), ('ticket', 1), ('orb', 10), ('credit', 2), ('exp', 17)]

    # miyu5 at 0, miyu7 at 5, move6 at 8, miyu4 at 13 ticket at 14

    rewards = {'miyu' : 0, 'credit' : 0, 'orb' : 0, 'exp' : 0, 'shard' : 0}

    tickets = [0,0,0,0,0,0,0]

    pos = 0

    rolls = 0

    laps = 0
    while rewards['miyu'] < miyucount:
        for a,b in enumerate(tickets):
            if b>=1 and ((a + pos) %18 == 5):
                pos = 5
                tickets[a] = tickets[a] - 1
                rewards['miyu'] += 7
                  
        pos += random.randint(1,6)
        rolls += 1
        if pos >= 18:
            pos = pos % 18
            laps += 1
        rewardtype = track[pos]

        if rewardtype[0] == 'move' or rewardtype[0] == 'ticket':
            pos = 14
            
            tickettype = random.randint(1,6)

            tickets[tickettype] += 1
        else:
            rewards[rewardtype[0]] += rewardtype[1]
    return (rewards,rolls,laps)


def averager(n,miyucount):
    simcount = 0
    cumreward = {'miyu' : 0, 'credit' : 0, 'orb' : 0, 'exp' : 0, 'shard' : 0}
    cumrolls = 0
    cumlaps = 0
    while simcount < n:
        simresult = miyusim(miyucount)
        for key,val in simresult[0].items():
            cumreward[key] +=val
        cumrolls += simresult[1]
        cumlaps += simresult[2]
        simcount += 1
    
    meanreward = {key:val/n for key,val in cumreward.items()}
    meanrolls = cumrolls/n
    meanlaps = cumlaps/n

    return (meanreward, meanrolls,simcount,meanlaps)



import math

def apreq(bonus,miyucount,sims):
    result = averager(sims,miyucount)
    shrimpratio = (36 + math.ceil((36*bonus/100))) / 20
    roundrolls = math.ceil(result[1])
    roundlaps = math.ceil(result[3])
    print(f""Performing {sims} simulations, the average rewards to obtain {miyucount} Miyu shards at {bonus}% bonus were: \n\
\nMiyu shards: {result[0]['miyu']:.0f}\nCredits: {result[0]['credit']:0.1f} million\nEquipment Orbs: {result[0]['orb']:.0f}\
\nEXP Books: {result[0]['exp']:.0f}\nGeneric Shards: {result[0]['shard']:.0f}\n\
\nThis requires {roundrolls} dice rolls over {roundlaps} laps or {roundrolls*500} Shrimp, thus needing {500 * roundrolls / shrimpratio:.0f} AP at {bonus}% bonus."")"
Pg03i0GC,latest dono,NickMarcha,HTML,Friday 14th of July 2023 11:13:44 PM CDT,"<!DOCTYPE html>
<html>
<head>
    <title>Dynamic Content Update</title>
    <style>
        p1 {
            font-family: Roboto, Helvetica Neue, sans-serif;
            color: #B3B3B3;
        }
    </style>
</head>
<body>
    <p1 id=""content"">loading</p1>

    <script>
    // Function to update the content
        function updateContent() {
            // Fetch the latest content from the API
            fetch('http://54.197.199.26:5001/api/latest')
                .then(response => response.json())
                .then(data => {
                    // Update the content of the <p1> element

                    document.getElementById('content').innerHTML = `$${data.amount} | ${data.sponsor}: ${data.message}`;
                })
                .catch(error => {
					console.error('Error:', error);
					document.getElementById('content').innerHTML = ""error"";
					}
				);
        }

        // Call the updateContent function initially
        updateContent();

        // Schedule content update every 5 minutes
        setInterval(updateContent, 5 * 60 * 1000);
    </script>
</body>
</html>"
7CjuaY31,use_on_block,ns09005264,Lua,Friday 14th of July 2023 10:39:17 PM CDT,"local args = { ... }

local function selectEmptySlot()
    for i = 1, 16 do
        if turtle.getItemCount(i) == 0 then
            return i
        end
    end
    return nil
end

local chestDirect = args[1]
if not chestDirect then
    print(""please specify a chest is up or down of turtle, eg: up|down"")
    return
end

local function suck()
    if chestDirect == ""up"" then
        return turtle.suckUp()
    elseif chestDirect == ""down"" then
        return turtle.suckDown()
    else
        return turtle.suck()
    end
end

local interval = tonumber(args[2]) or 1
local batch = tonumber(args[3]) or 1
print(""interval: "", interval, "" batch: "", batch)
local maxFule = turtle.getFuelLimit()

local function checkItem()
    for slot = 1, 16 do
        turtle.select(slot)
        local item = turtle.getItemDetail()
        if item ~= nil and item.name:find(""automata"") ~= true and item.name:find(""coal"") ~= true then
            return true, slot
        end
    end
    return false, 1
end

local function checkCore()
    local slot = selectEmptySlot()
    if slot == nil then
        print(""no empty slot"")
        return false
    end
    turtle.select(slot)
    local success = turtle.equipRight(false)
    if success then
        local item = turtle.getItemDetail()
        if item ~= nil and item.name:find(""automata"") then
            turtle.equipRight(true)
            return true
        else
            turtle.drop()
        end
    else
        for i = 1, 16 do
            turtle.select(i)
            local item = turtle.getItemDetail()
            if item ~= nil and item.name:find(""automata"") then
                turtle.equipRight(true)
                return true
            end
        end
    end
    return false
end

local function checkFule()
    local fule = turtle.getFuelLevel()
    if fule < maxFule / 2 then
        while true do
            local slot = selectEmptySlot()
            if slot == nil then
                print(""no empty slot"")
                return false
            end
            turtle.select(slot)
            local success = suck()
            if success then
                local item = turtle.getItemDetail()
                if item ~= nil and item.name:find(""coal"") then
                    turtle.refuel()
                    return true
                else
                    turtle.drop()
                end
            else
                break
            end
        end
    end
end

local hasItem, selectedSlot = checkItem()
local hasCore = checkCore()
while hasCore ~= true or hasItem ~= true do
    local slot = selectEmptySlot()
    if slot == nil then
        print(""no empty slot"")
        return
    end
    turtle.select(slot)
    local success = suck()
    if success ~= true then
        break
    end
    if hasItem ~= true then
        hasItem, selectedSlot = checkItem()
    end
    if hasCore ~= true then
        hasCore = checkCore()
    end
end

if hasCore ~= true then
    print(""no core"")
    return
end

if hasItem ~= true then
    print(""no item"")
    return
end

local core = peripheral.wrap(""right"")
-- set fule comsumption
local fuleConsumption = 0
while true do
    fuleConsumption = fuleConsumption + 1
    local success = core.setFuelConsumptionRate(fuleConsumption)
    if success ~= true then
        break
    end
end
print(""fule consumption: "", fuleConsumption - 1)

while true do
    local remainTime = interval
    for i = 1, batch do
        turtle.select(selectedSlot)
        local success, reason = core.useOnBlock()
        if success ~= true then
            print(""use on block failed: "", reason)
        end
        local ms = core.getOperationCooldown(""useOnBlock"")
        print(""op num: "", i, "" cooldown: "", ms)
        if ms > 0 then
            remainTime = remainTime - ms / 1000
            print(""sleep: "", ms / 1000)
            os.sleep(ms / 1000)
        end
    end
    if remainTime > 0 then
        print(""remain sleep time: "", remainTime)
        os.sleep(remainTime)
    end
    checkFule()
end
"
QpP467Wt,renier luxemburg. //,wilderanima,CSS,Friday 14th of July 2023 10:26:49 PM CDT,"<style>
 @import url('https://fonts.googleapis.com/css2?family=Great+Vibes&family=Mukta&family=Old+Standard+TT:ital,wght@0,400;0,700;1,400&family=Parisienne&family=Prata&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Be+Vietnam:ital,wght@0,100;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');
 @import url('https://fonts.googleapis.com/css2?family=DM+Serif+Display&display=swap');
 @import url('https://fonts.googleapis.com/css2?family=Oswald:wght@300&display=swap');
 @import url('https://fonts.googleapis.com/css2?family=Cookie&display=swap');
 @import url('https://fonts.googleapis.com/css2?family=Arimo&display=swap');
 @import url('https://fonts.googleapis.com/css?family=Josefin+Sans');
@import url('https://fonts.googleapis.com/css2?family=Varela+Round&family=Karla&family=Libre+Franklin&family=Be+Vietnam+Pro&family=Josefin+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=Alata&family=Mitr:wght@200;300;400;500;600;700&family=Balsamiq+Sans&family=ABeeZee:ital@0;1&family=Dancing+Script:wght@400;500;600;700&family=Marck+Script&family=Tapestry&family=Noto+Serif+Display:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Judson:ital,wght@0,400;0,700;1,400&fdisplay=swap'); 
@font-face {
 font-family: ""beaufort"";
 src: url('//glen-assets.github.io/fonts/Beaufort W01 Regular.ttf');

} 

body {
 background-color: #;
 background-size: 40px 40px;

 font-family: 'Be Vietnam', sans-serif;
 font-size: 10px;
 color: #2e2e2e;
 letter-spacing: 0.3px;
 text-align: justify;

}

* {
 cursor: url(https://i.ibb.co/1M967Gm/cursor.png), auto;
}
 
::-webkit-scrollbar {
 width: 0px;
}
::-webkit-scrollbar {
 width: 5px;
}
::-webkit-scrollbar-track, ::-webkit-scrollbar-thumb {
 background: transparent;
}
::-webkit-scrollbar-track, ::-webkit-scrollbar-thumb {
 background: transparent;
}
::-webkit-scrollbar-track, ::-webkit-scrollbar-thumb {
 background: transparent;
}
::-webkit-scrollbar-track, ::-webkit-scrollbar-thumb {
 background: transparent;
} 

 h1 {
 position:relative;
 font-family: 'karla', cursive;
 font-size: 15px;
 margin: 0px;
 margin-top: 15px;
 opacity: 0.8;
margin-bottom: 5;
 padding-bottom: 5px;
 border-bottom: 1px solid #E0DFDF;
 color: #000000;
 text-transform: uppercase;
 }

p {
margin-top: 0;
margin-bottom: 5;
}
.content {

position: absolute;
top: 200;
bottom: 0;
left: 0;
right: 0;
margin: auto;
background: ;
width: 400;
 text-align: justify;

}
.gallery {
top: 5;
bottom: 0;
left: 0;
right: 0;
margin: auto;
position: absolute;
background: ;
width: 432;
height: auto;
padding: 10;
 text-align: justify;
}
.img-frame {
 float: left;
 margin: 7px 8px 8px;
 width: 200;
 height: 200px;
 outline: 1px solid #CBCBCB;
 outline-offset: 5px;
 text-align: center;
transition: all 0.5s linear;
}


.img-1 {
height: 100%;
width: 100%;
background-image: url(https://i.imgur.com/KaU5Uuu.gif);
background-position: center ;
background-repeat: no-repeat;
background-size: cover;

transition: all 0.5s linear;
}



.img-2 {
height: 100%;
width: 100%;
background-image: url(IMGLINK);
background-position: center;
background-repeat: no-repeat;
background-size: cover;
filter: grayscale(70%);
transition: all 0.5s linear;
}



.img-3 {
height: 100%;
width: 100%;
background-image: url(LINK);
background-position: center;
background-repeat: no-repeat;
background-size: cover;
filter: grayscale(70%);
transition: all 0.5s linear;
}


.img-4 {
height: 100%;
width: 100%;
background-image: url(https://i.imgur.com/A75hmBh.gif);
background-position: center;
background-repeat: no-repeat;
background-size: cover;
filter: grayscale(0%);
transition: all 0.5s linear; 
}


</style>

<center>
<div class=""gallery"">
<div class=""img-frame"">
	<div class=""img-1""></div>
</div>


<div class=""img-frame"">
	<div class=""img-4""></div>
</div>
 </div>

<div class=""content"">

<br><br>
<center>
<small>
<h1>RENIER SAGA LUXEMBURG</h1> 
<i style=""font-family: beaufort; font-size: 11.5px; ""><b>there is pleasure in pathless woods</b>.

</i> 

</center>
<br>

<div style=""padding-left: 20; padding-right: 20; line-height: 1.4;"">
<font color=""#4d2222""><b style=""font-size: 11px;"">general info</b></font><br>
age 36. <b><font color=""#4d2222"">dob.</font></b> november 29th, sagittarius. pureblood. old money. <i>recently widowed.</i> <br>
nationality is german and danish. 

<br><br>
<b><font color=""#4d2222"">w.</font></b> <i>tbd.</i>

<br> <b><font color=""#4d2222"">p.</font></b> <i>tbd.</i>

<br><br>retired dragonriding champion.
<br>professional duellist and dragonologist.

<br>keeper of <u><font color=""#4d2222"">qithe, lady of the sky;</font></u> a ukrainian ironbelly.<br><br>

<font color=""#4d2222""><b style=""font-size: 11px;"">education</b></font><br>
studied at durmstrang institute. wolverine alumna. <br><br>


<font color=""#4d2222""><b style=""font-size: 11px;"">appearance</b></font><br>
5' 6"" (1.67 m) tall. white-blonde hair. blue eyes. muscular build.
<br><br>
<font color=""#4d2222""><b style=""font-size: 11px;"">personality</b></font>
<br> <i>wip.</i>
<br><br>
<font color=""#4d2222""><b style=""font-size: 11px;"">headcanons</b></font>

<p>elder cousin to <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=freida""><font color=""#4d2222"">freida luxemburg</font></a>. recently moved to the united kingdom.</p>

<p>fluent in english, danish, german, ukrainian, and russian.</p>

<p>former dragonriding champion, though prefers leisure riding now. still maintains excellent duelling and combat skills.</p> 

<br><br>
<center>
<b style=""font-size: 11px; border-top: 1px solid #E0DFDF; padding-left: 50;padding-right: 50; padding-top: 5;"">out of character</b><br>
open to connections. face claim is <a target=""_blank"" href=""LINK""><font color=""#4d2222"" title=""specifically from game of thrones."">emilia clarke</font></a>. angelite placeholder.</center> 
<br> <br>
</small>
</div>
</center>"
WWQ82ZR3,WIP possible toyhouse world code,nova_alien_,HTML,Friday 14th of July 2023 09:53:34 PM CDT,"<!--
CODE BY @AUROREAN

Commission Info: https://toyhou.se/~bulletins/134557
Trade Info: https://toyhou.se/~bulletins/128014
Donate to my ko-fi: https://ko-fi.com/avistella

Bulk Download & Early Access: https://toyhou.se/~bulletins/215910

-->

<!--
CUSTOM COLOURS:
  BANNER BORDERS (BLACK): #000000
  BORDER (BLUE): #35005b
  BACKGROUND (LIGHT BLUE): #35005b
  TEXT (DARK GREEN): #081c15
  BASIC INFO HEADERS (DARK DESATURATED GREEN): #1b4332
  THEME SONG TEXT (PASTEL GREEN): #b5e48c
  HEADER BACKGROUND (GREENISH BLUE): #52b69a
  HEADER TEXT (WHITE): #ffffff
  LINKS (PINK): #ffffff
-->

<div class=""container-fluid"">
  <div class=""row"">
    
    <!--BANNER-->
    <div class=""col-lg-12 p-1"">
      <div class=""card border-0 rounded-0 py-4"" style=""background:#000000;"">
        <!--background image-->
        <div class=""card border-0 rounded-0 p-3"" style=""background:#ffffff; background-size:cover; background-position:center; background-image:url('https://lh3.googleusercontent.com/blogger_img_proxy/AAOd8Mw-_QRi3tR8LJZ8Eyf2I83ifu_HrkVK3SfAghfGvzD9uODFBGiVMP2OSUGrXyHuO5A3z0lD2ConRn76Lj_jNdtQHo5o2EdSjDaOAdycVzu0h5uyEexXhkToYDOeXlDtuRbxwnp1PLClFok=w919-h516-p-k-no-nu');"">
          <!--title logo image-->
          <img class=""d-block mx-auto"" style=""max-height:300px;"" src=""https://f2.toyhou.se/file/f2-toyhou-se/images/32934003_EBZPJgscntuvGKq.png"">
        </div>
      </div>
    </div> <!--banner end-->
    
    <!--BASIC INFO-->
    <div class=""col-lg-4 p-1"">
      <div class=""card border-0 rounded-0 p-1 h-100"" style=""background:#35005b;"">
        <div class=""card border-0 rounded-0 h-100"" style=""background:#35005b; color:#081c15;"">
          <div class=""px-1 pt-2 pb-1"">
            
            <!--CREATORS-->
            <p class=""mb-1 mx-2"">
              <span class=""text-uppercase"" style=""letter-spacing:.10em; font-family: courier; font-weight: bold; color:#72c7fc;"">CREATOR</span>
            </p>
            <div class=""ml-4"">
              <p class=""mb-2""><a style =""font-family: courier; font-weight: bold; color: #ffffff;"" href=""/nova-alien"">nova</a></p>
            </div> <!--creators end-->
            <hr class=""my-2"" style=""border-bottom:1px dashed; border-top:0; border-left:0; border-right:0; color: #72c7fc;""> <!--divider-->
            <!--RATING-->
            <p class=""mb-1 mx-2"">
              <span class=""text-uppercase"" style=""letter-spacing:.10em; font-family: courier; font-weight: bold; color:#72c7fc;"">RATING</span>
            </p>
            <div class=""ml-4"">
              <p class=""mb-2;"" style=""font-family: courier; font-weight: bold; color:#72c7fc"">13+</p>
            </div> <!--rating end-->
            <hr class=""my-2"" style=""border-bottom:1px dashed; border-top:0; border-left:0; border-right:0; color: #72c7fc""> <!--divider-->
            <!--GENRES-->
            <p class=""mb-1 mx-2"">
              <span class=""text-uppercase"" style=""letter-spacing:.10em; font-family: courier; font-weight: bold; color:#72c7fc;"">GENRES</span>
            </p>
            <div class=""ml-4"">
              <p class=""mb-2;"" style=""font-family: courier; font-weight: bold; color:#72c7fc"">private story, not open for RP</p>
            </div> <!--genres end-->
            <hr class=""my-2"" style=""border-bottom:1px dashed; border-top:0; border-left:0; border-right:0; color: #72c7fc""> <!--divider-->
            <!--CONTENT WARNINGS-->
            <p class=""mb-1 mx-2"">
              <span class=""text-uppercase"" style=""letter-spacing:.10em; font-family: courier; font-weight: bold; color:#72c7fc;"">CONTENT WARNINGS</span>
            </p>
            <div class=""ml-4"">
              <p class=""mb-2;"" style=""font-family: courier; font-weight: bold; color:#72c7fc"">child abuse and abandonment</p>
              <p class=""mb-2;"" style=""font-family: courier; font-weight: bold; color:#72c7fc"">death, blood, violence</p>
              <p class=""mb-2;"" style=""font-family: courier; font-weight: bold; color:#72c7fc"">severe mental illness, dissociation, psychosis</p>
            </div> <!--contnt warnings end-->
            
          </div>
        </div>
      </div>
    </div> <!--basic info end-->
    
    <!--SYNOPSIS-->
    <div class=""col-lg-8 p-1"">
      <div class=""card border-0 rounded-0 p-1 h-100"" style=""background:#35005b;"">
        <div class=""card border-0 rounded-0 h-100"" style=""background:#35005b; color:#081c15;"">
          
          <!--QUOTE-->
          <div class=""p-3 mt-2 text-center"" style=""background:#003290; color:#ffffff;"">
            <h3 class=""mb-0"" style=""letter-spacing:.15em; font-family: courier; font-weight: bold;"">""Put a quote or tagline here.""</h3>
          </div> <!--quote end-->
          <div class=""p-1"" style=""background:#35005b;""></div> <!--pseudo spacing-->
          <div class=""p-1"" style=""background:#003290;""></div> <!--line-->
          
          <!--TEXT CONTENT-->
          <div class=""px-3 py-3 text-justify"">
            <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">hisui's eulogy is the saga following everest as he deals with the aftermath of his own death, finds love amidst his struggles, reconnects with his siblings, emkarks on the journey of healing from his trauma, and learns how to trust again.</p>
            <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">Praesent aliquam aliquet ligula at porta. Suspendisse viverra velit nibh, at tristique lectus sollicitudin id. Donec pulvinar, dolor eu interdum mattis, dui augue dignissim eros, sed consequat tellus odio sit amet erat. Suspendisse sed est interdum, eleifend lectus et, imperdiet enim. Praesent tincidunt ornare lorem vel ornare. Proin vel feugiat velit. Morbi posuere libero dolor, sit amet fringilla massa venenatis vel. Etiam vehicula pellentesque leo vitae gravida. </p>
          </div> <!--text content end-->
          
        </div>
      </div>
    </div> <!--synopsis end-->
    
    <!--IMAGE-->
    <div class=""col-4 p-1"">
      <div class=""card border-0 rounded-0 p-1"" style=""background:#003290;"">
        <div class=""card border-0 rounded-0"" style=""background:#35005b; height:100px; background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/823722375656243230/photo-1501685532562-aa6846b14a0e.png');""></div>
      </div>
    </div> <!--image end-->
    
    <!--IMAGE-->
    <div class=""col-4 p-1"">
      <div class=""card border-0 rounded-0 p-1"" style=""background:#003290;"">
        <div class=""card border-0 rounded-0"" style=""background:#35005b; height:100px; background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/823722468195041280/photo-1599235778186-fb85e61c3a2d.png');""></div>
      </div>
    </div> <!--image end-->
    
    <!--IMAGE-->
    <div class=""col-4 p-1"">
      <div class=""card border-0 rounded-0 p-1"" style=""background:#003290;"">
        <div class=""card border-0 rounded-0"" style=""background:#35005b; height:100px; background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/823722410229497866/photo-1487695652027-48e475bfa86f.png');""></div>
      </div>
    </div> <!--image end-->
    
    <!--SYNOPSIS/ THEME-->
    <div class=""col-lg-12 p-1"">
      
      <!--SYNOPSIS V2-->
      <div class=""card border-0 rounded-0 p-1 mb-2"" style=""background:#35005b;"">
        <div class=""card border-0 rounded-0 px-4 py-3 text-center"" style=""background:#35005b; color:#081c15;"">
          <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">This is another box (with a bit more stylized text) where you can put a summary or synopsis of your story. Since it's its own separate box, you can remove this section entirely if you don't want it.</p>
          <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">Aliquam tincidunt dignissim ex, sagittis congue ligula semper ac. Sed quis est ac justo hendrerit rhoncus vel quis felis. Nunc ut molestie urna. Etiam eu malesuada leo, vel ultrices sapien. Nulla ornare ligula sit amet aliquam rutrum. Curabitur interdum venenatis pulvinar. Suspendisse non ligula quis ipsum ornare hendrerit vel id ante. Sed tempus sit amet mi at elementum. Nullam id viverra felis, nec maximus leo. Vestibulum elementum in magna sit amet bibendum. Etiam ac dolor id lorem cursus interdum rhoncus vel metus. Vivamus non dictum quam, non dictum sem. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nullam sollicitudin, elit et posuere viverra, mi ligula pretium augue, nec rutrum tellus ante ac massa. Suspendisse varius mollis quam, feugiat fermentum augue dictum non. </p>
        </div>
      </div> <!--synopsis v2 end-->
      
      <!--THEME-->
      <div class=""card border-0 rounded-0 p-1"" style=""background:#35005b;"">
        <!--HEADER-->
        <div class=""row no-gutters align-items-center"">
          <div class=""col-sm-auto p-2"">
            <h1 class=""display-4 text-uppercase mb-0"" style=""letter-spacing:.15em; font-family: courier; font-weight: bold; color:#72c7fc"">THEME</h1>
          </div>
          <div class=""col-sm p-2""><div class=""card"" style=""border:1px solid #72c7fc;""></div></div>
          <!--line-->
          <div class=""col-sm-auto p-2"">
            <h1 class=""mb-0"" style=""letter-spacing:.15em; font-family: courier; font-weight: bold; color:#72c7fc;"">Song Title</h1>
          </div>
        </div> <!--header end-->
        <div class=""card border-0 rounded-0"">
          <!--AUDIO-->
          <audio controls class=""m-0"" style=""opacity:1; border-radius:0; padding:.03em; width:100%;"">
            <source src=""https://cdn.discordapp.com/attachments/498852129893646337/824355508642250762/bensound-onceagain.mp3"" type=""audio/MPEG"">
          </audio> <!--audio end-->
        </div>
      </div> <!--theme end-->
      
      <!--SONG LYRICS-->
      <div class=""card border-0 rounded-0 px-3 py-2 text-center text-muted mt-1"" style=""background:#35005b;"">
        <h3 class=""mb-0"" style=""letter-spacing:.13em; font-family: courier; font-weight: bold; color:#72c7fc;"">Key song lyrics or another quote goes here</h3>
      </div> <!--song lyrics end-->
      
    </div> <!--synopsis/ theme end-->
    
    <!--IMAGE-->
    <div class=""col-4 p-1"">
      <div class=""card border-0 rounded-0 p-1"" style=""background:#003290;"">
        <div class=""card border-0 rounded-0"" style=""background:#35005b; height:100px; background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/823722375656243230/photo-1501685532562-aa6846b14a0e.png');""></div>
      </div>
    </div> <!--image end-->
    
    <!--IMAGE-->
    <div class=""col-4 p-1"">
      <div class=""card border-0 rounded-0 p-1"" style=""background:#003290;"">
        <div class=""card border-0 rounded-0"" style=""background:#35005b; height:100px; background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/823722468195041280/photo-1599235778186-fb85e61c3a2d.png');""></div>
      </div>
    </div> <!--image end-->
    
    <!--IMAGE-->
    <div class=""col-4 p-1"">
      <div class=""card border-0 rounded-0 p-1"" style=""background:#003290;"">
        <div class=""card border-0 rounded-0"" style=""background:#35005b; height:100px; background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/823722410229497866/photo-1487695652027-48e475bfa86f.png');""></div>
      </div>
    </div> <!--image end-->
    
    <!--CAST-->
    <div class=""col-lg-12 p-1"">
      <!--HEADER-->
      <div class=""card border-0 rounded-0 px-3 py-2"" style=""background:#003290; color:#ffffff;"">
        <h1 class=""display-4 text-uppercase mb-0"" style=""letter-spacing:.15em; font-family: courier; font-weight: bold; color:#ffffff"">CAST</h1>
      </div> <!--header end-->
      <!--CHARACTERS-->
      <div class=""card bg-faded border-0 rounded-0 mt-1 p-1"" style=""background:#35005b; color:#081c15;"">
        <div class=""row no-gutters justify-content-center"">
          
          <!--CHARACTER 1-->
          <div class=""col-md-3 p-2 text-center"">
            <!--ICON-->
            <div class=""card border-0 rounded-circle mx-auto p-2 mb-2"" style=""width:150px; height:150px; background:#72c7fc;"">
              <div class=""card border-0 h-100 rounded-circle"" style=""background-size:cover; background-position:center; background-image:url('https://f2.toyhou.se/file/f2-toyhou-se/images/64466962_VKNMcPWFFpqFHDJ.png?1682960892');"">
                <a class=""btn btn-outline-primary border-0 btn-block h-100 rounded-circle"" href=""#""></a> <!--link-->
              </div>
            </div> <!--icon end-->
            <h3 class=""text-center mb-1""><a style=""font-family: courier; font-weight: bold; color:#ffffff;"" href=""#"">everest</a></h3>
            <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">Cras enim ex, suscipit in quam at, semper pulvinar sem. Sed consectetur ultrices neque, ut tempor lectus efficitur molestie.</p>
          </div> <!--character 1 end-->
          
          <!--CHARACTER 2-->
          <div class=""col-md-3 p-2 text-center"">
            <!--ICON-->
            <div class=""card border-0 rounded-circle mx-auto p-2 mb-2"" style=""width:150px; height:150px; background:#72c7fc;"">
              <div class=""card border-0 h-100 rounded-circle"" style=""background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/549320185153060895/unknown.png');"">
                <a class=""btn btn-outline-primary border-0 btn-block h-100 rounded-circle"" href=""#""></a> <!--link-->
              </div>
            </div> <!--icon end-->
            <h3 class=""text-center mb-1""><a style=""font-family: courier; font-weight: bold; color:#ffffff;"" href=""#"">soleil</a></h3>
            <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">Vivamus a gravida metus, ut tincidunt mi. Nullam sagittis nibh eros, viverra sagittis justo dictum eu.</p>
          </div> <!--character 2 end-->
          
          <!--CHARACTER 3-->
          <div class=""col-md-3 p-2 text-center"">
            <!--ICON-->
            <div class=""card border-0 rounded-circle mx-auto p-2 mb-2"" style=""width:150px; height:150px; background:#72c7fc;"">
              <div class=""card border-0 h-100 rounded-circle"" style=""background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/549320185153060895/unknown.png');"">
                <a class=""btn btn-outline-primary border-0 btn-block h-100 rounded-circle"" href=""#""></a> <!--link-->
              </div>
            </div> <!--icon end-->
            <h3 class=""text-center mb-1""><a style=""font-family: courier; font-weight: bold; color:#ffffff;"" href=""#"">name</a></h3>
            <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">Cras sed urna vel urna dictum lacinia a vel mauris. Quisque aliquet malesuada orci, sed consequat orci tempus eu.</p>
          </div> <!--character 3 end-->
          
          <!--CHARACTER 4-->
          <div class=""col-md-3 p-2 text-center"">
            <!--ICON-->
            <div class=""card border-0 rounded-circle mx-auto p-2 mb-2"" style=""width:150px; height:150px; background:#72c7fc;"">
              <div class=""card border-0 h-100 rounded-circle"" style=""background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/549320185153060895/unknown.png');"">
                <a class=""btn btn-outline-primary border-0 btn-block h-100 rounded-circle"" href=""#""></a> <!--link-->
              </div>
            </div> <!--icon end-->
            <h3 class=""text-center mb-1""><a style=""font-family: courier; font-weight: bold; color:#ffffff;"" href=""#"">name</a></h3>
            <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">Donec mattis odio in urna commodo, quis interdum lorem congue. </p>
          </div> <!--character 4 end-->
          
        </div>
      </div> <!--characters end-->
      <!--BUTTON TO FULL CAST-->
      <div class=""card border-0 rounded-0 p-1"" style=""background:#003290;"">
        <a class=""btn btn-outline-primary border-0 rounded-0 btn-block text-uppercase"" style=""font-size:large; font-family: courier; font-weight: bold; color:#ffffff;"" href=""#"">SEE FULL CAST HERE</a>
      </div> <!--button to full cast end-->
    </div> <!--cast end-->
    
    <!--SETTINGS-->
    <div class=""col-lg-12 p-1"">
      <!--HEADER-->
      <div class=""card border-0 rounded-0 px-3 py-2"" style=""background:#003290; color:#ffffff;"">
        <h1 class=""display-4 text-uppercase mb-0"" style=""letter-spacing:.15em; font-family: courier; font-weight: bold; color:#72c7fc"">MAIN LOCATIONS</h1>
      </div> <!--header end-->
      <!--LOCATIONS-->
      <div class=""card bg-faded border-0 rounded-0 mt-1 p-1"" style=""background:#35005b; color:#081c15;"">
        <div class=""row no-gutters justify-content-center"">
          
          <!--LOCATION 1-->
          <div class=""col-md-4 p-2 text-justify"">
            <!--ICON-->
            <div class=""card border-0 rounded-0 p-2 mb-2"" style=""background:#003290;"">
              <div class=""card border-0 rounded-0"" style=""background:#35005b; height:150px; background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/824352794995326996/photo-1425913397330-cf8af2ff40a1.png');"">
                <a class=""btn btn-outline-primary border-0 rounded-0 btn-block h-100"" href=""#""></a> <!--link-->
              </div>
            </div> <!--icon end-->
            <h3 class=""mb-1""><a style=""font-family: courier; font-weight: bold; color:#ffffff;"" href=""#"">coronet highlands</a></h3>
            <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">Cras enim ex, suscipit in quam at, semper pulvinar sem. Sed consectetur ultrices neque, ut tempor lectus efficitur molestie.</p>
          </div> <!--location 1 end-->
          
          <!--LOCATION 2-->
          <div class=""col-md-4 p-2 text-justify"">
            <!--ICON-->
            <div class=""card border-0 rounded-0 p-2 mb-2"" style=""background:#003290;"">
              <div class=""card border-0 rounded-0"" style=""background:#003290; height:150px; background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/824353584329130025/photo-1511527661048-7fe73d85e9a4.png');"">
                <a class=""btn btn-outline-primary border-0 rounded-0 btn-block h-100"" href=""#""></a> <!--link-->
              </div>
            </div> <!--icon end-->
            <h3 class=""font-weight-lighter mb-1""><a style=""font-family: courier; font-weight: bold; color:#ffffff;"" href=""#"">crimson mirelands</a></h3>
            <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">Vivamus a gravida metus, ut tincidunt mi. Nullam sagittis nibh eros, viverra sagittis justo dictum eu.</p>
          </div> <!--location 2 end-->
          
          <!--LOCATION 3-->
          <div class=""col-md-4 p-2 text-justify"">
            <!--ICON-->
            <div class=""card border-0 rounded-0 p-2 mb-2"" style=""background:#003290;"">
              <div class=""card border-0 rounded-0"" style=""background:#35005b; height:150px; background-size:cover; background-position:center; background-image:url('https://cdn.discordapp.com/attachments/498852129893646337/824354054426591253/photo-1509280951623-4a17506e3eb5.png');"">
                <a class=""btn btn-outline-primary border-0 rounded-0 btn-block h-100"" href=""#""></a> <!--link-->
              </div>
            </div> <!--icon end-->
            <h3 class=""mb-1""><a style=""font-family: courier; font-weight: bold; color:#ffffff;"" href=""#"">cobalt coastlands</a></h3>
            <p style=""font-family: courier; font-weight: bold; color:#72c7fc"">Cras sed urna vel urna dictum lacinia a vel mauris. Quisque aliquet malesuada orci, sed consequat orci tempus eu.</p>
          </div> <!--location 3 end-->
          
        </div>
      </div> <!--locations end-->
      <!--BUTTON TO WORLDBUILDING-->
      <div class=""card border-0 rounded-0 p-1"" style=""background:#003290;"">
        <a class=""btn btn-outline-primary border-0 rounded-0 btn-block text-uppercase"" style=""font-size:large; font-family: courier; font-weight: bold; color:#ffffff;"" href=""#"">DISCOVER MORE ABOUT THE WORLD HERE</a>
      </div> <!--button to worldbuilding end-->
    </div> <!--settings end-->
    
  </div>
</div>
<a style=""font-size:12px; font-family: courier; font-weight: bold; color:#ffffff"" href=""https://toyhou.se/10442912.story-world""><p class=""text-right text-uppercase mr-1"" style=""font-size:12px; font-family: courier; font-weight: bold; color:#ffffff"">Code by Aurorean</p></a>"
UwjE2kF0,邀您一起看：POKI合集,xiaomianao666,JavaScript,Friday 14th of July 2023 09:23:20 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥POKI合集@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuabtOaWsOaVsOaNrlwiLFwicGF0aFwiOlwidXBkYXRlXCIsXCJydWxlXCI6XCJ2YXIgY2xvdWQgPSBiYXNlNjREZWNvZGUoZmV0Y2hDYWNoZShcXFwiaHR0cHM6Ly9naHByb3h5LmNvbS9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20veGl4aWZyZWUvSGlrZXIvbWFpbi95eGouanNvblxcXCIsMjQpKTtcXG5pZihjbG91ZC5pbmNsdWRlcyhcXFwi5ZCI6ZuGXFxcIikpe1xcbiAgICB3cml0ZUZpbGUoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvSG9vZC95eGouanNvblxcXCIsY2xvdWQpO1xcbiAgICB3cml0ZUZpbGUoXFxcImhpa2VyOi8vZmlsZXMvY2FjaGUvdXBkYXRlL3l4ai50eHRcXFwiLG5ldyBEYXRlKCkrJycpO1xcbn1cIn1dLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCLmuLjmiI/pm4bwnZSlXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaHR0cHM6Ly9wb2tpLmNuLyNnYW1lVGhlbWUjO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoTGludXjvvJvvvJsgQW5kcm9pZCAxMe+8m++8myBNaSAxMCBQcm8pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84OC4wLjQzMjQuMTUyIE1vYmlsZSBTYWZhcmkvNTM3LjM2fVwiLFwiY29sX3R5cGVcIjpcIm1vdmllXzFcIixcImZpbmRfcnVsZVwiOlwianM6XFxuc2V0UmVzdWx0KFt7XFxuICAgIGNvbF90eXBlOiAneDVfd2Vidmlld19zaW5nbGUnLFxcbiAgICB1cmw6IE1ZX1VSTCxcXG4gICAgZGVzYzogXFxcImF1dG8mJmZsb2F0XFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIGNhbkJhY2s6IHRydWVcXG4gICAgfVxcbn1dKVwiLFwiZ3JvdXBcIjpcIuKRoOaOqOiNkFwiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwiLy/oh6rliqjmm7TmlrDvvJ8x5ZCv55SoLCAw5YWz6ZetXFxudmFyIHVwZGF0ZSA9IDE7XFxuXFxuLy/mm7TmlrDpl7TpmpQsIOWNleS9jeS4uuWkqVxcbnZhciB1cHRpbWUgPSAzO1xcblxcbnZhciBsb2NhbCA9IFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL0hvb2QveXhqLmpzb25cXFwiO1xcbnZhciBkYXRlX3R4dCA9IFxcXCJoaWtlcjovL2ZpbGVzL2NhY2hlL3VwZGF0ZS95eGoudHh0XFxcIjtcXG5cXG4vL+iuoeeul+aXtumXtOmXtOmalFxcbnZhciBzdGFydCA9IG5ldyBEYXRlKGZldGNoKGRhdGVfdHh0KSk7IFxcbnZhciBub3cgPSBuZXcgRGF0ZSgpOyBcXG52YXIgRF9UID0gbm93LmdldFRpbWUoKSAtIHN0YXJ0LmdldFRpbWUoKTsgXFxudmFyIERfRCA9IERfVCAvICgxMDAwICogMzYwMCAqIDI0KTtcXG52YXIgbXl0aW1lPXBhcnNlSW50KERfRCkrJyc7XFxuXFxuaWYoIWZldGNoKGRhdGVfdHh0KSB8fCAhZmV0Y2gobG9jYWwpIHx8ICh1cGRhdGU9PTEmJm15dGltZT49dXB0aW1lKSl7XFxuICAgIHRyeXtcXG4gICAgICAgIHZhciBjbG91ZCA9IGJhc2U2NERlY29kZShmZXRjaChcXFwiaHR0cHM6Ly9naHByb3h5LmNvbS9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20veGl4aWZyZWUvSGlrZXIvbWFpbi95eGouanNvblxcXCIse30pKTtcXG4gICAgICAgIGlmKGNsb3VkLmluY2x1ZGVzKFxcXCLlkIjpm4ZcXFwiKSl7XFxuICAgICAgICAgICAgd3JpdGVGaWxlKGxvY2FsLGNsb3VkKTtcXG4gICAgICAgICAgICB3cml0ZUZpbGUoZGF0ZV90eHQsbmV3IERhdGUoKSsnJyk7XFxuICAgICAgICB9XFxuICAgIH1jYXRjaChlKXt9XFxufVwiLFwicGFnZXNcIjpcIlt7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLmm7TmlrDmlbDmja5cXFwiLFxcXCJwYXRoXFxcIjpcXFwidXBkYXRlXFxcIixcXFwicnVsZVxcXCI6XFxcInZhciBjbG91ZCA9IGJhc2U2NERlY29kZShmZXRjaENhY2hlKFxcXFxcXFwiaHR0cHM6Ly9naHByb3h5LmNvbS9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20veGl4aWZyZWUvSGlrZXIvbWFpbi95eGouanNvblxcXFxcXFwiLDI0KSk7XFxcXG5pZihjbG91ZC5pbmNsdWRlcyhcXFxcXFxcIuWQiOmbhlxcXFxcXFwiKSl7XFxcXG4gICAgd3JpdGVGaWxlKFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9Ib29kL3l4ai5qc29uXFxcXFxcXCIsY2xvdWQpO1xcXFxuICAgIHdyaXRlRmlsZShcXFxcXFxcImhpa2VyOi8vZmlsZXMvY2FjaGUvdXBkYXRlL3l4ai50eHRcXFxcXFxcIixuZXcgRGF0ZSgpKycnKTtcXFxcbn1cXFwifV1cIn0iLCJwaWNVcmwiOiJodHRwczovL2EucG9raS5jb20vaWNvbnMvZmF2LTUxMi5wbmdAUmVmZXJlcj0iLCJ0aXRsZSI6IlBPS0nlkIjpm4YifQ==
rAfrcCaH,farm,rex41043,Lua,Friday 14th of July 2023 09:12:00 PM CDT,"function refuel()
	if (turtle.getFuelLevel() > 0) then
		return true
	end

	local fuel = turtle.refuel(16)

	if (not fuel) then print(""[ERR] Out of valid fuel!"") end
	while (not fuel) do
		os.sleep(5)
		fuel = turtle.refuel(16)
	end

	print(""[SUC] Refueled!"")

	return true
end

function dump()
	print(""[INF] Dumping inventory..."")

	local block, data = turtle.inspect()
	while (not block or not data.tags[""forge:chests""]) do
		turtle.turnLeft()
		block, data = turtle.inspect()
	end

	for i = 2, 15 do
		turtle.select(i)
		turtle.drop()
	end

	turtle.turnLeft()
	turtle.turnLeft()

	print(""[SUC] Dumped inventory!"")

	refuel()
	farm()
end

function checkSaplings()
	local item = turtle.getItemDetail()

	if (not item or not item.name:find(""sapling"")) then
		print(""[ERR] Out of saplings!"")
		while (not item or not item.name:find(""sapling"")) do
			os.sleep(5)
			item = turtle.getItemDetail()
		end
	end
end

function checkBonemeal()
	local item = turtle.getItemDetail()

	if (not item or item.name ~= ""minecraft:bone_meal"") then
		print(""[ERR] Out of bonemeal!"")
		while (not item or item.name ~= ""minecraft:bone_meal"") do
			os.sleep(5)
			item = turtle.getItemDetail()
		end
	end
end

function farmDig()
	local block, data = turtle.inspect()

	if (not block) then
		return true
	elseif (data.tags[""minecraft:logs""] or data.tags[""minecraft:leaves""]) then
		turtle.dig()
		return true
	end

	return false
end

function farmDigUp()
	local block, data = turtle.inspectUp()

	if (not block) then
		return false
	elseif (data.tags[""minecraft:logs""] or data.tags[""minecraft:leaves""]) then
		turtle.digUp()
		return true
	end

	return false
end

function farm()
	print(""[INF] Farming..."")

	turtle.select(1)

	checkSaplings()

	turtle.place()

	turtle.select(2)

	local _, data = turtle.inspect()
	while (not data.tags[""minecraft:logs""]) do
		checkBonemeal()
		turtle.place()
		_, data = turtle.inspect()
	end

	turtle.dig()
	turtle.forward()
	turtle.digUp()
	turtle.up()

	local digUp = farmDigUp()

	while (digUp) do
		for i = 1, 4 do
			farmDig()
			turtle.turnLeft()
		end

		turtle.up()
		digUp = farmDigUp()
	end

	local move, _ = turtle.down()
	while (move) do
		move, _ = turtle.down()
	end

	turtle.turnLeft()
	turtle.turnLeft()
	turtle.forward()

	dump()
end

dump()"
JXSQeuDq,2023-07-14_stats.json,rdp_snitch,JSON,Friday 14th of July 2023 07:18:21 PM CDT,"{
  ""ip"": {
    ""120.224.141.65"": 264,
    ""191.101.174.112"": 3,
    ""192.99.110.148"": 21,
    ""159.65.219.36"": 12,
    ""62.233.50.135"": 6,
    ""172.104.41.226"": 3,
    ""106.116.169.71"": 6,
    ""164.92.158.134"": 3,
    ""36.137.91.143"": 3,
    ""62.122.184.166"": 24,
    ""62.122.184.168"": 24,
    ""185.73.124.35"": 3,
    ""31.43.185.32"": 30,
    ""87.251.64.110"": 6,
    ""103.167.199.219"": 3,
    ""39.108.174.140"": 12,
    ""60.250.29.35"": 81,
    ""185.170.144.3"": 3,
    ""87.251.75.120"": 3,
    ""13.90.73.94"": 3,
    ""5.62.58.97"": 3,
    ""210.2.165.44"": 156,
    ""112.121.167.186"": 582,
    ""103.197.47.202"": 24,
    ""85.203.21.70"": 3,
    ""94.232.43.50"": 3,
    ""172.232.13.135"": 6,
    ""74.124.24.238"": 3,
    ""185.94.26.4"": 9,
    ""157.230.36.177"": 6,
    ""46.101.206.250"": 15,
    ""46.101.207.29"": 3,
    ""142.93.192.18"": 3,
    ""193.29.13.175"": 3,
    ""141.98.11.128"": 9,
    ""205.210.31.40"": 9,
    ""104.152.52.231"": 3,
    ""45.119.81.119"": 6,
    ""36.139.61.15"": 3,
    ""128.14.209.26"": 18,
    ""114.55.227.74"": 3,
    ""89.248.170.132"": 3,
    ""205.210.31.81"": 9
  },
  ""asn"": {
    ""AS24444"": 264,
    ""AS32780"": 3,
    ""AS16276"": 21,
    ""AS14061"": 42,
    ""AS57523"": 54,
    ""AS63949"": 9,
    ""AS4134"": 6,
    ""AS9808"": 3,
    ""AS208091"": 9,
    ""AS211736"": 30,
    ""AS48080"": 9,
    ""AS140833"": 3,
    ""AS37963"": 15,
    ""AS3462"": 81,
    ""AS8075"": 3,
    ""AS198605"": 3,
    ""AS23966"": 156,
    ""AS45753"": 582,
    ""AS17539"": 24,
    ""AS206092"": 3,
    ""AS13354"": 3,
    ""AS62537"": 9,
    ""AS42397"": 3,
    ""AS209605"": 9,
    ""AS396982"": 18,
    ""AS14987"": 3,
    ""AS131386"": 6,
    ""AS56041"": 3,
    ""AS21859"": 18,
    ""AS202425"": 3
  },
  ""isp"": {
    ""China Mobile communications corporation"": 264,
    ""Hosting Services"": 3,
    ""OVH SAS"": 21,
    ""DigitalOcean, LLC"": 42,
    ""Chang Way Technologies Co. Limited"": 54,
    ""Akamai Technologies"": 3,
    ""Chinanet"": 6,
    ""China Mobile"": 3,
    ""XHOST-INTERNET-SOLUTIONS"": 9,
    ""FOP Dmytro Nedilskyi"": 30,
    ""Dmitriy Panchenko"": 9,
    ""Interdata Joint Stock Company"": 3,
    ""Hangzhou Alibaba Advertising Co"": 15,
    ""Chunghwa Telecom Co., Ltd."": 81,
    ""Microsoft Corporation"": 3,
    ""AVAST Software s.r.o."": 3,
    ""LINKdotNET Telecom Limited"": 156,
    ""Netsec Limited"": 582,
    ""Netsol Technologies Limited"": 24,
    ""EXPRESS"": 3,
    ""Akamai Technologies, Inc."": 6,
    ""zColo"": 3,
    ""Sauce Labs Inc"": 9,
    ""Bunea TELECOM SRL"": 3,
    ""UAB Host Baltic"": 9,
    ""Google LLC"": 18,
    ""Rethem Hosting LLC"": 3,
    ""Long Van System Solution"": 6,
    ""China Mobile Communications Corporation"": 3,
    ""Zenlayer Inc"": 18,
    ""IP Volume inc"": 3
  },
  ""org"": {
    ""China Mobile"": 264,
    ""Ipxo"": 3,
    ""AVAST Software"": 21,
    ""Digital Ocean"": 30,
    ""Sierra LLC"": 6,
    ""Linode"": 3,
    ""Chinanet HE"": 6,
    ""DigitalOcean, LLC"": 12,
    ""China Mobile Communications Corporation"": 6,
    ""Chang Way Technologies Co. Limited"": 48,
    ""Xhostis"": 6,
    ""FOP Dmytro Nedilskyi"": 30,
    ""Xhost Internet Solutions"": 9,
    ""INTERCLOUD"": 3,
    ""Aliyun Computing Co., LTD"": 15,
    ""Chunghwa Telecom Co. Ltd."": 81,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""AVAST Software s.r.o."": 3,
    ""Dancom ISB"": 156,
    ""Simcentric Solutions Limited."": 582,
    ""Netsol Technologies Limited"": 24,
    ""VPN-Consumer-Network"": 3,
    ""Dmitriy Panchenko"": 3,
    ""Akamai Technologies, Inc."": 6,
    ""zColo"": 3,
    ""Sauce Labs Inc"": 9,
    ""Bunea TELECOM SRL"": 3,
    ""Unknown"": 15,
    ""Palo Alto Networks, Inc"": 18,
    ""Rethem Hosting LLC"": 3,
    ""ZENLA"": 18,
    ""Quasi Networks LTD."": 3
  },
  ""regionName"": {
    ""Shandong"": 264,
    ""New Jersey"": 18,
    ""Quebec"": 21,
    ""Moscow"": 63,
    ""North West"": 6,
    ""Hebei"": 6,
    ""North Holland"": 12,
    ""Guangdong"": 15,
    ""Kyiv City"": 30,
    ""Ho Chi Minh"": 9,
    ""Taipei City"": 81,
    ""Virginia"": 3,
    ""Saint George"": 3,
    ""Islamabad"": 156,
    ""Sai Kung District"": 582,
    ""Sindh"": 24,
    ""Perm Krai"": 3,
    ""Illinois"": 9,
    ""Texas"": 3,
    ""Hesse"": 27,
    ""South West"": 6,
    ""Timis"": 3,
    ""Kaunas"": 9,
    ""California"": 36,
    ""Zhejiang"": 6
  },
  ""country"": {
    ""China"": 291,
    ""United States"": 69,
    ""Canada"": 21,
    ""Russia"": 66,
    ""Singapore"": 12,
    ""Netherlands"": 12,
    ""Ukraine"": 30,
    ""Vietnam"": 9,
    ""Taiwan"": 81,
    ""Grenada"": 3,
    ""Pakistan"": 180,
    ""Hong Kong"": 582,
    ""Germany"": 27,
    ""Romania"": 3,
    ""Lithuania"": 9
  },
  ""account"": {
    ""hello"": 1233,
    ""(empty)"": 9,
    ""Test"": 6,
    ""Domain"": 60,
    ""Administr"": 48,
    ""pwIdRWZwo"": 3,
    ""ArPVQd"": 3,
    ""vuzvQN"": 3,
    ""nmap"": 3,
    ""root"": 18,
    ""vkNxmjTqv"": 3,
    ""aUHgAt"": 3,
    ""LYiXPj"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1395
  },
  ""client_build"": {
    ""Unknown"": 1395
  },
  ""client_name"": {
    ""Unknown"": 1395
  },
  ""ip_type"": {
    ""mobile"": 270,
    ""hosting & proxy"": 30,
    ""hosting"": 693,
    ""proxy"": 15,
    ""Unknown"": 387
  }
}"
3yqaD51R,2023-07-14_stats.json,rdp_snitch,JSON,Friday 14th of July 2023 07:16:09 PM CDT,"{
  ""ip"": {
    ""120.224.141.65"": 176,
    ""191.101.174.112"": 2,
    ""192.99.110.148"": 14,
    ""159.65.219.36"": 8,
    ""62.233.50.135"": 4,
    ""172.104.41.226"": 2,
    ""106.116.169.71"": 4,
    ""164.92.158.134"": 2,
    ""36.137.91.143"": 2,
    ""62.122.184.166"": 16,
    ""62.122.184.168"": 16,
    ""185.73.124.35"": 2,
    ""31.43.185.32"": 20,
    ""87.251.64.110"": 4,
    ""103.167.199.219"": 2,
    ""39.108.174.140"": 8,
    ""60.250.29.35"": 54,
    ""185.170.144.3"": 2,
    ""87.251.75.120"": 2,
    ""13.90.73.94"": 2,
    ""5.62.58.97"": 2,
    ""210.2.165.44"": 104,
    ""112.121.167.186"": 388,
    ""103.197.47.202"": 16,
    ""85.203.21.70"": 2,
    ""94.232.43.50"": 2,
    ""172.232.13.135"": 4,
    ""74.124.24.238"": 2,
    ""185.94.26.4"": 6,
    ""157.230.36.177"": 4,
    ""46.101.206.250"": 10,
    ""46.101.207.29"": 2,
    ""142.93.192.18"": 2,
    ""193.29.13.175"": 2,
    ""141.98.11.128"": 6,
    ""205.210.31.40"": 6,
    ""104.152.52.231"": 2,
    ""45.119.81.119"": 4,
    ""36.139.61.15"": 2,
    ""128.14.209.26"": 12,
    ""114.55.227.74"": 2,
    ""89.248.170.132"": 2,
    ""205.210.31.81"": 6
  },
  ""asn"": {
    ""AS24444"": 176,
    ""AS32780"": 2,
    ""AS16276"": 14,
    ""AS14061"": 28,
    ""AS57523"": 36,
    ""AS63949"": 6,
    ""AS4134"": 4,
    ""AS9808"": 2,
    ""AS208091"": 6,
    ""AS211736"": 20,
    ""AS48080"": 6,
    ""AS140833"": 2,
    ""AS37963"": 10,
    ""AS3462"": 54,
    ""AS8075"": 2,
    ""AS198605"": 2,
    ""AS23966"": 104,
    ""AS45753"": 388,
    ""AS17539"": 16,
    ""AS206092"": 2,
    ""AS13354"": 2,
    ""AS62537"": 6,
    ""AS42397"": 2,
    ""AS209605"": 6,
    ""AS396982"": 12,
    ""AS14987"": 2,
    ""AS131386"": 4,
    ""AS56041"": 2,
    ""AS21859"": 12,
    ""AS202425"": 2
  },
  ""isp"": {
    ""China Mobile communications corporation"": 176,
    ""Hosting Services"": 2,
    ""OVH SAS"": 14,
    ""DigitalOcean, LLC"": 28,
    ""Chang Way Technologies Co. Limited"": 36,
    ""Akamai Technologies"": 2,
    ""Chinanet"": 4,
    ""China Mobile"": 2,
    ""XHOST-INTERNET-SOLUTIONS"": 6,
    ""FOP Dmytro Nedilskyi"": 20,
    ""Dmitriy Panchenko"": 6,
    ""Interdata Joint Stock Company"": 2,
    ""Hangzhou Alibaba Advertising Co"": 10,
    ""Chunghwa Telecom Co., Ltd."": 54,
    ""Microsoft Corporation"": 2,
    ""AVAST Software s.r.o."": 2,
    ""LINKdotNET Telecom Limited"": 104,
    ""Netsec Limited"": 388,
    ""Netsol Technologies Limited"": 16,
    ""EXPRESS"": 2,
    ""Akamai Technologies, Inc."": 4,
    ""zColo"": 2,
    ""Sauce Labs Inc"": 6,
    ""Bunea TELECOM SRL"": 2,
    ""UAB Host Baltic"": 6,
    ""Google LLC"": 12,
    ""Rethem Hosting LLC"": 2,
    ""Long Van System Solution"": 4,
    ""China Mobile Communications Corporation"": 2,
    ""Zenlayer Inc"": 12,
    ""IP Volume inc"": 2
  },
  ""org"": {
    ""China Mobile"": 176,
    ""Ipxo"": 2,
    ""AVAST Software"": 14,
    ""Digital Ocean"": 20,
    ""Sierra LLC"": 4,
    ""Linode"": 2,
    ""Chinanet HE"": 4,
    ""DigitalOcean, LLC"": 8,
    ""China Mobile Communications Corporation"": 4,
    ""Chang Way Technologies Co. Limited"": 32,
    ""Xhostis"": 4,
    ""FOP Dmytro Nedilskyi"": 20,
    ""Xhost Internet Solutions"": 6,
    ""INTERCLOUD"": 2,
    ""Aliyun Computing Co., LTD"": 10,
    ""Chunghwa Telecom Co. Ltd."": 54,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""AVAST Software s.r.o."": 2,
    ""Dancom ISB"": 104,
    ""Simcentric Solutions Limited."": 388,
    ""Netsol Technologies Limited"": 16,
    ""VPN-Consumer-Network"": 2,
    ""Dmitriy Panchenko"": 2,
    ""Akamai Technologies, Inc."": 4,
    ""zColo"": 2,
    ""Sauce Labs Inc"": 6,
    ""Bunea TELECOM SRL"": 2,
    ""Unknown"": 10,
    ""Palo Alto Networks, Inc"": 12,
    ""Rethem Hosting LLC"": 2,
    ""ZENLA"": 12,
    ""Quasi Networks LTD."": 2
  },
  ""regionName"": {
    ""Shandong"": 176,
    ""New Jersey"": 12,
    ""Quebec"": 14,
    ""Moscow"": 42,
    ""North West"": 4,
    ""Hebei"": 4,
    ""North Holland"": 8,
    ""Guangdong"": 10,
    ""Kyiv City"": 20,
    ""Ho Chi Minh"": 6,
    ""Taipei City"": 54,
    ""Virginia"": 2,
    ""Saint George"": 2,
    ""Islamabad"": 104,
    ""Sai Kung District"": 388,
    ""Sindh"": 16,
    ""Perm Krai"": 2,
    ""Illinois"": 6,
    ""Texas"": 2,
    ""Hesse"": 18,
    ""South West"": 4,
    ""Timis"": 2,
    ""Kaunas"": 6,
    ""California"": 24,
    ""Zhejiang"": 4
  },
  ""country"": {
    ""China"": 194,
    ""United States"": 46,
    ""Canada"": 14,
    ""Russia"": 44,
    ""Singapore"": 8,
    ""Netherlands"": 8,
    ""Ukraine"": 20,
    ""Vietnam"": 6,
    ""Taiwan"": 54,
    ""Grenada"": 2,
    ""Pakistan"": 120,
    ""Hong Kong"": 388,
    ""Germany"": 18,
    ""Romania"": 2,
    ""Lithuania"": 6
  },
  ""account"": {
    ""hello"": 822,
    ""(empty)"": 6,
    ""Test"": 4,
    ""Domain"": 40,
    ""Administr"": 32,
    ""pwIdRWZwo"": 2,
    ""ArPVQd"": 2,
    ""vuzvQN"": 2,
    ""nmap"": 2,
    ""root"": 12,
    ""vkNxmjTqv"": 2,
    ""aUHgAt"": 2,
    ""LYiXPj"": 2
  },
  ""keyboard"": {
    ""Unknown"": 930
  },
  ""client_build"": {
    ""Unknown"": 930
  },
  ""client_name"": {
    ""Unknown"": 930
  },
  ""ip_type"": {
    ""mobile"": 180,
    ""hosting & proxy"": 20,
    ""hosting"": 462,
    ""proxy"": 10,
    ""Unknown"": 258
  }
}"
cSnVc0c2,2023-07-14_stats.json,rdp_snitch,JSON,Friday 14th of July 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""120.224.141.65"": 88,
    ""191.101.174.112"": 1,
    ""192.99.110.148"": 7,
    ""159.65.219.36"": 4,
    ""62.233.50.135"": 2,
    ""172.104.41.226"": 1,
    ""106.116.169.71"": 2,
    ""164.92.158.134"": 1,
    ""36.137.91.143"": 1,
    ""62.122.184.166"": 8,
    ""62.122.184.168"": 8,
    ""185.73.124.35"": 1,
    ""31.43.185.32"": 10,
    ""87.251.64.110"": 2,
    ""103.167.199.219"": 1,
    ""39.108.174.140"": 4,
    ""60.250.29.35"": 27,
    ""185.170.144.3"": 1,
    ""87.251.75.120"": 1,
    ""13.90.73.94"": 1,
    ""5.62.58.97"": 1,
    ""210.2.165.44"": 52,
    ""112.121.167.186"": 194,
    ""103.197.47.202"": 8,
    ""85.203.21.70"": 1,
    ""94.232.43.50"": 1,
    ""172.232.13.135"": 2,
    ""74.124.24.238"": 1,
    ""185.94.26.4"": 3,
    ""157.230.36.177"": 2,
    ""46.101.206.250"": 5,
    ""46.101.207.29"": 1,
    ""142.93.192.18"": 1,
    ""193.29.13.175"": 1,
    ""141.98.11.128"": 3,
    ""205.210.31.40"": 3,
    ""104.152.52.231"": 1,
    ""45.119.81.119"": 2,
    ""36.139.61.15"": 1,
    ""128.14.209.26"": 6,
    ""114.55.227.74"": 1,
    ""89.248.170.132"": 1,
    ""205.210.31.81"": 3
  },
  ""asn"": {
    ""AS24444"": 88,
    ""AS32780"": 1,
    ""AS16276"": 7,
    ""AS14061"": 14,
    ""AS57523"": 18,
    ""AS63949"": 3,
    ""AS4134"": 2,
    ""AS9808"": 1,
    ""AS208091"": 3,
    ""AS211736"": 10,
    ""AS48080"": 3,
    ""AS140833"": 1,
    ""AS37963"": 5,
    ""AS3462"": 27,
    ""AS8075"": 1,
    ""AS198605"": 1,
    ""AS23966"": 52,
    ""AS45753"": 194,
    ""AS17539"": 8,
    ""AS206092"": 1,
    ""AS13354"": 1,
    ""AS62537"": 3,
    ""AS42397"": 1,
    ""AS209605"": 3,
    ""AS396982"": 6,
    ""AS14987"": 1,
    ""AS131386"": 2,
    ""AS56041"": 1,
    ""AS21859"": 6,
    ""AS202425"": 1
  },
  ""isp"": {
    ""China Mobile communications corporation"": 88,
    ""Hosting Services"": 1,
    ""OVH SAS"": 7,
    ""DigitalOcean, LLC"": 14,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Akamai Technologies"": 1,
    ""Chinanet"": 2,
    ""China Mobile"": 1,
    ""XHOST-INTERNET-SOLUTIONS"": 3,
    ""FOP Dmytro Nedilskyi"": 10,
    ""Dmitriy Panchenko"": 3,
    ""Interdata Joint Stock Company"": 1,
    ""Hangzhou Alibaba Advertising Co"": 5,
    ""Chunghwa Telecom Co., Ltd."": 27,
    ""Microsoft Corporation"": 1,
    ""AVAST Software s.r.o."": 1,
    ""LINKdotNET Telecom Limited"": 52,
    ""Netsec Limited"": 194,
    ""Netsol Technologies Limited"": 8,
    ""EXPRESS"": 1,
    ""Akamai Technologies, Inc."": 2,
    ""zColo"": 1,
    ""Sauce Labs Inc"": 3,
    ""Bunea TELECOM SRL"": 1,
    ""UAB Host Baltic"": 3,
    ""Google LLC"": 6,
    ""Rethem Hosting LLC"": 1,
    ""Long Van System Solution"": 2,
    ""China Mobile Communications Corporation"": 1,
    ""Zenlayer Inc"": 6,
    ""IP Volume inc"": 1
  },
  ""org"": {
    ""China Mobile"": 88,
    ""Ipxo"": 1,
    ""AVAST Software"": 7,
    ""Digital Ocean"": 10,
    ""Sierra LLC"": 2,
    ""Linode"": 1,
    ""Chinanet HE"": 2,
    ""DigitalOcean, LLC"": 4,
    ""China Mobile Communications Corporation"": 2,
    ""Chang Way Technologies Co. Limited"": 16,
    ""Xhostis"": 2,
    ""FOP Dmytro Nedilskyi"": 10,
    ""Xhost Internet Solutions"": 3,
    ""INTERCLOUD"": 1,
    ""Aliyun Computing Co., LTD"": 5,
    ""Chunghwa Telecom Co. Ltd."": 27,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""AVAST Software s.r.o."": 1,
    ""Dancom ISB"": 52,
    ""Simcentric Solutions Limited."": 194,
    ""Netsol Technologies Limited"": 8,
    ""VPN-Consumer-Network"": 1,
    ""Dmitriy Panchenko"": 1,
    ""Akamai Technologies, Inc."": 2,
    ""zColo"": 1,
    ""Sauce Labs Inc"": 3,
    ""Bunea TELECOM SRL"": 1,
    ""Unknown"": 5,
    ""Palo Alto Networks, Inc"": 6,
    ""Rethem Hosting LLC"": 1,
    ""ZENLA"": 6,
    ""Quasi Networks LTD."": 1
  },
  ""regionName"": {
    ""Shandong"": 88,
    ""New Jersey"": 6,
    ""Quebec"": 7,
    ""Moscow"": 21,
    ""North West"": 2,
    ""Hebei"": 2,
    ""North Holland"": 4,
    ""Guangdong"": 5,
    ""Kyiv City"": 10,
    ""Ho Chi Minh"": 3,
    ""Taipei City"": 27,
    ""Virginia"": 1,
    ""Saint George"": 1,
    ""Islamabad"": 52,
    ""Sai Kung District"": 194,
    ""Sindh"": 8,
    ""Perm Krai"": 1,
    ""Illinois"": 3,
    ""Texas"": 1,
    ""Hesse"": 9,
    ""South West"": 2,
    ""Timis"": 1,
    ""Kaunas"": 3,
    ""California"": 12,
    ""Zhejiang"": 2
  },
  ""country"": {
    ""China"": 97,
    ""United States"": 23,
    ""Canada"": 7,
    ""Russia"": 22,
    ""Singapore"": 4,
    ""Netherlands"": 4,
    ""Ukraine"": 10,
    ""Vietnam"": 3,
    ""Taiwan"": 27,
    ""Grenada"": 1,
    ""Pakistan"": 60,
    ""Hong Kong"": 194,
    ""Germany"": 9,
    ""Romania"": 1,
    ""Lithuania"": 3
  },
  ""account"": {
    ""hello"": 411,
    ""(empty)"": 3,
    ""Test"": 2,
    ""Domain"": 20,
    ""Administr"": 16,
    ""pwIdRWZwo"": 1,
    ""ArPVQd"": 1,
    ""vuzvQN"": 1,
    ""nmap"": 1,
    ""root"": 6,
    ""vkNxmjTqv"": 1,
    ""aUHgAt"": 1,
    ""LYiXPj"": 1
  },
  ""keyboard"": {
    ""Unknown"": 465
  },
  ""client_build"": {
    ""Unknown"": 465
  },
  ""client_name"": {
    ""Unknown"": 465
  },
  ""ip_type"": {
    ""mobile"": 90,
    ""hosting & proxy"": 10,
    ""hosting"": 231,
    ""proxy"": 5,
    ""Unknown"": 129
  }
}"
Q06CVP0w,What name tool,A_GUES,HTML,Friday 14th of July 2023 07:14:48 PM CDT,"<!DOCTYPE html>
<!--[if lt IE 9 ]> <html class=""ie8""> <![endif]-->
<!--[if IE 9 ]> <html class=""ie9""> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--> <html> <!--<![endif]-->
    <head>
        
        <!-- Google Tag Manager -->
        <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
            'https://www.googletagmanager.com/gtm.js?id='+i+dl+'';
            f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','GTM-NBMRDKQ');
        </script>
        <!-- End Google Tag Manager -->
        

        <meta charset=""UTF-8"" />

        <meta http-equiv=""x-ua-compatible"" content=""ie=edge"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1"">

        <!-- Prevent mobile Safari from making phone numbers -->
        <meta name=""format-detection"" content=""telephone=no"">

        

        <!-- Favicon & CSS normalize -->
        <link rel=""shortcut icon"" href=""https://scratch.mit.edu/favicon.ico"" />
        <link rel=""stylesheet"" href=""https://scratch.mit.edu/css/lib/normalize.min.css"" />
        <link rel=""stylesheet"" href=""https://scratch.mit.edu/common.css"" />
        <link rel=""stylesheet"" href=""https://scratch.mit.edu/projects.css"" />

        <!-- Polyfills -->
        <script src=""https://scratch.mit.edu/js/polyfill.min.js""></script>
    </head>

    <body>
        
        <!-- Google Tag Manager (noscript) -->
        <noscript><iframe src=""https://www.googletagmanager.com/ns.html?id=GTM-NBMRDKQ"" height=""0"" width=""0"" style=""display:none;visibility:hidden""></iframe></noscript>
        <!-- End Google Tag Manager (noscript) -->
        
        <noscript>
            <p>Your browser has Javascript disabled. Please go to your browser preferences and enable Javascript in order to use Scratch.</p>
        </noscript>
        <div id=""app""></div>

        <!-- Vendor & Initialize (Session & Localization)-->
        <script src=""https://scratch.mit.edu/js/common.bundle.js""></script>

        <!-- Scripts -->
        <script src=""https://scratch.mit.edu/js/projects.intl.js""></script>
        <script src=""https://scratch.mit.edu/js/projects.bundle.js""></script>

        <!-- Translate title element -->
        
    </body>
</html>
"
JbQY0ijs,form.php,teslariu,PHP,Friday 14th of July 2023 07:04:32 PM CDT,"<?php
$nombre_usuario = $_POST['nombre_usuario'];
$email_usuario = $_POST['email_usuario']; 
$nacimiento_usuario = $_POST['nacimiento_usuario'];
$telefono_usuario = $_POST['telefono_usuario'];
$mensaje_usuario = $_POST['mensaje_usuario'];
$subject = ""Respuesta a su mensaje"";
$body = ""Su pedido serà respondido adfdfdslfsdfdsf"";
$headers = ""From: mimail@yo.com"";

mail($email_usuario, $subject, $body, $headers);


echo ""Hola "".$nombre_usuario. "", gracias por enviar esta consulta. Te responderemos a la brevedad a "".$email_usuario;
?>"
RJtcDxMF,Untitled,LegoCats177,Lua,Friday 14th of July 2023 06:00:08 PM CDT,"if game:GetService(""RunService""):IsClient() then error(""Script must be server-side in order to work; use h/ and not hl/"") end
local Player,game,owner = owner,game
local RealPlayer = Player
do
    print(""FE Compatibility code by Mokiros"")
    local rp = RealPlayer
    script.Parent = rp.Character
 
    --RemoteEvent for communicating
    local Event = Instance.new(""RemoteEvent"")
    Event.Name = ""UserInput_Event""
 
    --Fake event to make stuff like Mouse.KeyDown work
    local function fakeEvent()
        local t = {_fakeEvent=true,Functions={},Connect=function(self,f)table.insert(self.Functions,f) end}
        t.connect = t.Connect
        return t
    end
 
    --Creating fake input objects with fake variables
    local m = {Target=nil,Hit=CFrame.new(),KeyUp=fakeEvent(),KeyDown=fakeEvent(),Button1Up=fakeEvent(),Button1Down=fakeEvent()}
    local UIS = {InputBegan=fakeEvent(),InputEnded=fakeEvent()}
    local CAS = {Actions={},BindAction=function(self,name,fun,touch,...)
        CAS.Actions[name] = fun and {Name=name,Function=fun,Keys={...}} or nil
    end}
    --Merged 2 functions into one by checking amount of arguments
    CAS.UnbindAction = CAS.BindAction
 
    --This function will trigger the events that have been :Connect()'ed
    local function te(self,ev,...)
        local t = m[ev]
        if t and t._fakeEvent then
            for _,f in pairs(t.Functions) do
                f(...)
            end
        end
    end
    m.TrigEvent = te
    UIS.TrigEvent = te
 
    Event.OnServerEvent:Connect(function(plr,io)
        if plr~=rp then return end
        m.Target = io.Target
        m.Hit = io.Hit
        if not io.isMouse then
            local b = io.UserInputState == Enum.UserInputState.Begin
            if io.UserInputType == Enum.UserInputType.MouseButton1 then
                return m:TrigEvent(b and ""Button1Down"" or ""Button1Up"")
            end
            for _,t in pairs(CAS.Actions) do
                for _,k in pairs(t.Keys) do
                    if k==io.KeyCode then
                        t.Function(t.Name,io.UserInputState,io)
                    end
                end
            end
            m:TrigEvent(b and ""KeyDown"" or ""KeyUp"",io.KeyCode.Name:lower())
            UIS:TrigEvent(b and ""InputBegan"" or ""InputEnded"",io,false)
        end
    end)
    Event.Parent = NLS([==[
    local Player = game:GetService(""Players"").LocalPlayer
    local Event = script:WaitForChild(""UserInput_Event"")
 
    local Mouse = Player:GetMouse()
    local UIS = game:GetService(""UserInputService"")
    local input = function(io,a)
        if a then return end
        --Since InputObject is a client-side instance, we create and pass table instead
        Event:FireServer({KeyCode=io.KeyCode,UserInputType=io.UserInputType,UserInputState=io.UserInputState,Hit=Mouse.Hit,Target=Mouse.Target})
    end
    UIS.InputBegan:Connect(input)
    UIS.InputEnded:Connect(input)
 
    local h,t
    --Give the server mouse data 30 times every second, but only if the values changed
    --If player is not moving their mouse, client won't fire events
    while wait(1/30) do
        if h~=Mouse.Hit or t~=Mouse.Target then
            h,t=Mouse.Hit,Mouse.Target
            Event:FireServer({isMouse=true,Target=t,Hit=h})
        end
    end]==],Player.Character)
 
    ----Sandboxed game object that allows the usage of client-side methods and services
    --Real game object
    local _rg = game
 
    --Metatable for fake service
    local fsmt = {
        __index = function(self,k)
            local s = rawget(self,""_RealService"")
            if s then return s[k] end
        end,
        __newindex = function(self,k,v)
            local s = rawget(self,""_RealService"")
            if s then s[k]=v end
        end,
        __call = function(self,...)
            local s = rawget(self,""_RealService"")
            if s then return s(...) end
        end
    }
    local function FakeService(t,RealService)
        t._RealService = typeof(RealService)==""string"" and _rg:GetService(RealService) or RealService
        return setmetatable(t,fsmt)
    end
 
    --Fake game object
    local g = {
        GetService = function(self,s)
            return self[s]
        end,
        Players = FakeService({
            LocalPlayer = FakeService({GetMouse=function(self)return m end},Player)
        },""Players""),
        UserInputService = FakeService(UIS,""UserInputService""),
        ContextActionService = FakeService(CAS,""ContextActionService""),
    }
    rawset(g.Players,""localPlayer"",g.Players.LocalPlayer)
    g.service = g.GetService
 
    g.RunService = FakeService({
        RenderStepped = _rg:GetService(""RunService"").Heartbeat,
        BindToRenderStep = function(self,name,_,fun)
            self._btrs[name] = self.Heartbeat:Connect(fun)
        end,
        UnbindFromRenderStep = function(self,name)
            self._btrs[name]:Disconnect()
        end,
    },""RunService"")
 
    setmetatable(g,{
        __index=function(self,s)
            return _rg:GetService(s) or typeof(_rg[s])==""function""
            and function(_,...)return _rg[s](_rg,...)end or _rg[s]
        end,
        __newindex = fsmt.__newindex,
        __call = fsmt.__call
    })
    --Changing owner to fake player object to support owner:GetMouse()
    game,owner = g,g.Players.LocalPlayer
end
 
 
 
 
A = true
if A == true then
	Model = Instance.new(""Model"")
	Model.Name = ""Weapon""
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(10, 12, 10)
	p.CFrame = CFrame.new(35.4000015, 7.0999999, 63, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Medium stone grey"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Concrete
	m = Instance.new(""CylinderMesh"")
	m.Scale = Vector3.new(1, 1.02999997, 1)
	m.Parent = p
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(2, 12.8, 2)
	p.CFrame = CFrame.new(35.4000015, 7.19999981, 63, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""CylinderMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(1.79, 5, 1)
	p.CFrame = CFrame.new(29.7000179, 8.89999485, 63.3000221, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(5, 1.40, 0.99)
	p.CFrame = CFrame.new(29.7000198, 10.4999943, 63.3000031, -1.49008788e-008, -2.3933373e-007, 0.999990225, 6.6675625e-009, 0.99999392, 2.39334668e-007, -0.999994516, 6.66761935e-009, 7.45059765e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Center""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(12.5, 5.80, 27.6)
	p.CFrame = CFrame.new(43.0000076, 9.30000114, 62.8999977, 1.06581131e-014, -8.74229471e-008, 1, -7.10542736e-015, 1, 8.742294e-008, -1, -7.10542736e-015, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 1
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(6.80, 1, 6.00)
	p.CFrame = CFrame.new(51.9999924, 9.06999207, 68.6000443, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(11, 5.40, 2.79)
	p.CFrame = CFrame.new(56.5999718, 9.76999664, 63.0000076, 1.49011612e-008, 5.89458523e-007, -0.999990225, -3.49571337e-007, 0.99999392, 5.89460512e-007, 0.999994278, 3.49571422e-007, -4.47034836e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(2.60, 11, 1.99)
	p.CFrame = CFrame.new(39.4000015, 10.7699995, 63, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(3.20, 11.0, 5)
	p.CFrame = CFrame.new(35.9000092, 11.0999928, 63.0000153, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(1.99, 1, 1)
	p.CFrame = CFrame.new(51.8999863, 16.6699886, 58.4000015, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Mid gray"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(1, 1, 4.59)
	p.CFrame = CFrame.new(49.099987, 18.1699905, 58.4000015, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Mid gray"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(1, 12.6, 9.80)
	p.CFrame = CFrame.new(40.2999878, 6.77000237, 63.0000038, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(5.19, 1.39, 2.39)
	p.CFrame = CFrame.new(32.2000008, 12.5999899, 63.2999992, -1.49008788e-008, -2.3933373e-007, 0.999990225, 6.6675625e-009, 0.99999392, 2.39334668e-007, -0.999994516, 6.66761935e-009, 7.45059765e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(11, 0.60, 1.99)
	p.CFrame = CFrame.new(39.3999825, 12.3699951, 63.0000267, 1.49008779e-008, 2.39330944e-007, -0.999990225, 6.66761935e-009, 0.99999392, 2.39331769e-007, 0.999994516, -6.66753408e-009, -7.45059765e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(3.20, 11, 5.60)
	p.CFrame = CFrame.new(50.1999855, 14.0699921, 63, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(5, 13, 3.79)
	p.CFrame = CFrame.new(43.2999916, 9.56999779, 63, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(5.19, 1.39, 2.39)
	p.CFrame = CFrame.new(39.6000061, 12.599987, 63.2999992, 1.49011612e-008, 5.89458523e-007, -0.999990225, -3.49571337e-007, 0.99999392, 5.89460512e-007, 0.999994278, 3.49571422e-007, -4.47034836e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(5.19, 1, 1)
	p.CFrame = CFrame.new(46.2999878, 15.069993, 67.5999985, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Mid gray"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(3.20, 5, 4)
	p.CFrame = CFrame.new(32.200016, 9.59999657, 63.3000221, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(6, 6.79, 2.79)
	p.CFrame = CFrame.new(51.9999924, 9.06999302, 70.5000458, -1, 0, -4.37113883e-008, 0, 1, 0, 4.37113883e-008, 0, -1)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(0.60, 7.40, 3.79)
	p.CFrame = CFrame.new(43.2999916, 12.3699942, 63.2000008, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Black"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(6.80, 1, 6.00)
	p.CFrame = CFrame.new(51.9999924, 9.06999588, 57.3999977, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(11, 3.20, 2.19)
	p.CFrame = CFrame.new(54.0999756, 14.0699921, 63.0000076, 1.49011612e-008, 5.89458523e-007, -0.999990225, -3.49571337e-007, 0.99999392, 5.89460512e-007, 0.999994278, 3.49571422e-007, -4.47034836e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(2.60, 11, 2.39)
	p.CFrame = CFrame.new(32.1999741, 10.7699986, 63, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(5.19, 1, 1)
	p.CFrame = CFrame.new(46.2999878, 15.0699921, 58.4000015, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Mid gray"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(5, 0.80, 0.79)
	p.CFrame = CFrame.new(30.6000195, 11.5999937, 63.3000107, -1.49008788e-008, -2.3933373e-007, 0.999990225, 6.6675625e-009, 0.99999392, 2.39334668e-007, -0.999994516, 6.66761935e-009, 7.45059765e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(10, 12, 10)
	p.CFrame = CFrame.new(51.8000298, 7.099998, 63.0000191, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Medium stone grey"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Concrete
	m = Instance.new(""CylinderMesh"")
	m.Scale = Vector3.new(1, 1.02999997, 1)
	m.Parent = p
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(0.60, 5.19, 5)
	p.CFrame = CFrame.new(35.9000015, 13, 63.2999992, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(6, 6.79, 2.79)
	p.CFrame = CFrame.new(51.9999847, 9.06999207, 55.5, 1, 0, 0, 0, 1, 0, 0, 0, 1)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(2.79, 7.40, 0.79)
	p.CFrame = CFrame.new(44.7999916, 14.0699921, 63.2000008, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Black"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(5.40, 11, 10)
	p.CFrame = CFrame.new(50.1999893, 9.76999474, 63, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(11, 0.60, 2.39)
	p.CFrame = CFrame.new(32.1999855, 12.3699961, 62.9999733, -1.49008788e-008, -2.3933373e-007, 0.999990225, 6.6675625e-009, 0.99999392, 2.39334668e-007, -0.999994516, 6.66761935e-009, 7.45059765e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(4, 13, 1)
	p.CFrame = CFrame.new(40.8999939, 10.0700006, 63, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Bright yellow"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(10.1, 1, 0.99)
	p.CFrame = CFrame.new(51.8999825, 18.1699867, 62.9999733, 1.49008796e-008, 2.39336913e-007, -0.999990225, 6.66744882e-009, 0.99999392, 2.39337737e-007, 0.999994516, -6.66736355e-009, -7.45059765e-008)
	p.BrickColor = BrickColor.new(""Mid gray"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(1, 1, 4.59)
	p.CFrame = CFrame.new(49.099987, 18.1699944, 67.5999985, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Mid gray"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(1.99, 1, 1)
	p.CFrame = CFrame.new(51.8999863, 16.6699886, 67.5999908, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Mid gray"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(1, 1, 4.59)
	p.CFrame = CFrame.new(49.099987, 18.1699867, 63.0000153, 0, -5.38727239e-028, 0.999999642, -0.999999642, -5.38727287e-028, 9.62964972e-035, 5.38727335e-028, -0.999999762, -4.37113776e-008)
	p.BrickColor = BrickColor.new(""Mid gray"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	p = Instance.new(""Part"", Model)
	p.Name = ""Part""
	p.TopSurface = 0
	p.BottomSurface = 0
	p.formFactor = ""Custom""
	p.Size = Vector3.new(10.1, 1, 0.99)
	p.CFrame = CFrame.new(46.2999916, 18.1699886, 63.0000229, -1.49008823e-008, -2.39345496e-007, 0.999990225, 6.66727829e-009, 0.99999392, 2.39346434e-007, -0.999994516, 6.66733513e-009, 7.45059765e-008)
	p.BrickColor = BrickColor.new(""Mid gray"")
	p.Transparency = 0
	p.Reflectance = .1
	p.Material = Enum.Material.Plastic
	m = Instance.new(""SpecialMesh"")
	m.Scale = Vector3.new(1, 1, 1)
	m.Parent = p
	m.MeshType = Enum.MeshType.Wedge
 
	Spawn = function()
		Modelc = Model:clone()
		for _, v in pairs(Modelc:children()) do
			if v.className == ""Part"" then
				if v.Name ~= ""Center"" then
					w = Instance.new(""Weld"")
					w.Part0 = Modelc.Center
					w.Part1 = v
					w.C1 = v.CFrame:inverse() * CFrame.new(v.Position)
					w.C0 = Modelc.Center.CFrame:inverse() * CFrame.new(v.Position)
					w.Parent = w.Part0
				end
			end
		end
		return Modelc
	end
 
	CameraRadius = 66
	TimeStopRadius = 66
 
	RightShoulderC0 = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
	RightShoulderC1 = CFrame.new(-0.5, 0.5, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
	LeftShoulderC0 = CFrame.new(-1, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
	LeftShoulderC1 = CFrame.new(0.5, 0.5, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
	RightHipC0 = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
	RightHipC1 = CFrame.new(0.5, 1, 0, 0, 0, 1, 0, 1, 0, -1, -0, -0)
	LeftHipC0 = CFrame.new(-1, -1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
	LeftHipC1 = CFrame.new(-0.5, 1, 0, -0, -0, -1, 0, 1, 0, 1, 0, 0)
	NeckC0 = CFrame.new(0, 1, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
	NeckC1 = CFrame.new(0, -0.5, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
	RootJointC0 = CFrame.new(0, 0, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0) 
	RootJointC1 = CFrame.new(0, 0, 0, -1, -0, -0, 0, 0, 1, 0, 1, 0)
 
	getWelds = function(c) --designate weld variables
		local t = c.Torso
		local hrp = c.HumanoidRootPart.RootJoint
		RightShoulder = t:FindFirstChild(""Right Shoulder"")
		LeftShoulder = t:FindFirstChild(""Left Shoulder"")
		RightHip = t:FindFirstChild(""Right Hip"")
		LeftHip = t:FindFirstChild(""Left Hip"")
		RootJoint = hrp
		Neck = t:FindFirstChild(""Neck"")
	end
	resetWelds = function(ext, occ) --extent 1-3; occlusion
                --1 == reset desiredangle/currentangle
                --2 == reset C0/C1
                --3 == reset both des/cur/c0/c1
		local r = {
			RightShoulder,
			LeftShoulder,
			RightHip,
			LeftHip,
			RootJoint,
			Neck,
			Grip
		}
		for _, v in pairs(r) do
			for i = 1, #occ do
				if occ[i] == v then
					table.remove(r, _)
				end
			end
		end
		for _, v in pairs(r) do
			if v.Name == ""Right Shoulder"" then
				if ext == 1 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
				elseif ext == 2 then
					v.C0 = RightShoulderC0
					v.C1 = RightShoulderC1
				elseif ext == 3 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
					v.C0 = RightShoulderC0
					v.C1 = RightShoulderC1
				end
			elseif v.Name == ""Left Shoulder"" then
				if ext == 1 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
				elseif ext == 2 then
					v.C0 = LeftShoulderC0
					v.C1 = LeftShoulderC1
				elseif ext == 3 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
					v.C0 = LeftShoulderC0
					v.C1 = LeftShoulderC1
				end
			elseif v.Name == ""Right Hip"" then
				if ext == 1 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
				elseif ext == 2 then
					v.C0 = RightHipC0
					v.C1 = RightHipC1
				elseif ext == 3 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
					v.C0 = RightHipC0
					v.C1 = RightHipC1
				end
			elseif v.Name == ""Left Hip"" then
				if ext == 1 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
				elseif ext == 2 then
					v.C0 = LeftHipC0
					v.C1 = LeftHipC1
				elseif ext == 3 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
					v.C0 = LeftHipC0
					v.C1 = LeftHipC1
				end
			elseif v.Name == ""Neck"" then
				if ext == 1 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
				elseif ext == 2 then
					v.C0 = NeckC0
					v.C1 = NeckC1
				elseif ext == 3 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
					v.C0 = NeckC0
					v.C1 = NeckC1
				end
			elseif v.Name == ""RootJoint"" then
				if ext == 1 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
				elseif ext == 2 then
					v.C0 = RootJointC0
					v.C1 = RootJointC1
				elseif ext == 3 then
					v.DesiredAngle = 0
					v.CurrentAngle = 0
					v.C0 = RootJointC0
					v.C1 = RootJointC1
				end
			elseif v.Name == ""RightGrip"" then
				if ext == 1 then
				elseif ext == 2 then
					Grip.C0 = nGrip.C0
					Grip.C1 = nGrip.C1
				elseif ext == 3 then
					Grip.C0 = nGrip.C0
					Grip.C1 = nGrip.C1
				end
			end
		end
	end
 
 
	doitdocdoit = function()
		if deb == false then
			return
		end
		deb = false
 
		vPlayer = game.Players.LocalPlayer
		cPlayer = vPlayer.Character
		Anim = cPlayer.Animate
		Anim.Disabled = true
		Hum = cPlayer.Humanoid
		Hum.Name = ""NOPE""
		Hum.WalkSpeed = 0
		getWelds(cPlayer)
		resetWelds(3, {})
 
		bodypos = Instance.new(""BodyPosition"")
		bodypos.P = 4000
		bodypos.maxForce = Vector3.new(5000000, 50000000, 5000000) * 5000
		bodypos.position = cPlayer.Torso.Position + Vector3.new(0, .5, 0)
		bodypos.Parent = cPlayer.Torso
 
		dir = cPlayer.HumanoidRootPart.CFrame.lookVector
		CPlayer = cPlayer
		partpos = Instance.new(""Part"", workspace)
		partpos.Transparency = 1
		partpos.CanCollide = false
		partpos.Anchored = true
		partpos.CFrame = cPlayer.Torso.CFrame
 
		sound = Instance.new(""Sound"")
		sound.Parent = partpos
		sound.Volume = 1
		sound.SoundId = ""http://www.roblox.com/asset/?id=468760371""
        --        sound.SoundId=""http://www.roblox.com/asset/?id=168009623""
		sound2 = Instance.new(""Sound"")
		sound2.Parent = workspace.CurrentCamera
		sound2.Volume = 1
		sound2.SoundId = ""http://www.roblox.com/asset/?id=468760371""
        --        sound2.SoundId=""http://www.roblox.com/asset/?id=168009623""
		sound:Play()
		sound2:Play()
		expected = 10
		did = false
		pooted = 0
		sos = game:GetService(""RunService"").Stepped:connect(function()
			pooted = pooted + 1
			if pooted >= expected + 1 then
				sos:disconnect()
				did = true
				return
			end
			resetWelds(3, {})
			RightShoulder.C0 = RightShoulder.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted), math.rad(0), math.rad(0))
			LeftShoulder.C0 = LeftShoulder.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted), math.rad(0), math.rad(0))
			RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted), math.rad(0), math.rad(0))
			LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted), math.rad(0), math.rad(0))
			Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(0))
			RootJoint.C0 = RootJoint.C0 * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(0))
		end)
                --[[sound=Instance.new(""Sound"")
                sound.Parent=cPlayer.Torso
                sound.Volume=1
                sound.SoundId=""http://www.roblox.com/asset/?id=316900066""
                sound:Play()]]--
		while did == false do
			wait()
		end
 
		expected = 10
		did = false
		pooted = 0
		sos = game:GetService(""RunService"").Stepped:connect(function()
			pooted = pooted + 1
			if pooted >= expected + 1 then
				sos:disconnect()
				did = true
				return
			end
			resetWelds(3, {})
			RightShoulder.C0 = RightShoulder.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-12 - pooted * 8), math.rad(0), math.rad(pooted))
			LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, pooted * .1) * CFrame.fromEulerAnglesXYZ(math.rad(-12 - pooted * 9), math.rad(pooted * 9), math.rad(0))
			RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-12), math.rad(0), math.rad(0))
			LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-12), math.rad(0), math.rad(0))
			Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(pooted / 2), math.rad(0), math.rad(-pooted * 9))
			RootJoint.C0 = RootJoint.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted), math.rad(pooted / 3), math.rad(pooted * 10))
		end)
		while did == false do
			wait()
		end
		wait(.2)
		expected = 5
		did = false
		pooted = 0
		nubhit = nil
		sos = game:GetService(""RunService"").Stepped:connect(function()
			pooted = pooted + 1
			if pooted >= expected + 1 then
				sos:disconnect()
				did = true
				return
			end
			resetWelds(3, {})
			RightShoulder.C0 = RightShoulder.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-12 - pooted * 8), math.rad(0), math.rad(pooted))
			LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, pooted * .1) * CFrame.fromEulerAnglesXYZ(math.rad(-12 - pooted * 9), math.rad(pooted * 9), math.rad(0))
			RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-12), math.rad(0), math.rad(0))
			LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-12), math.rad(0), math.rad(0))
			Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(5), math.rad(0), math.rad(-90 + pooted * 40))
			RootJoint.C0 = RootJoint.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-10 + pooted * 4), math.rad(3.3), math.rad(90 - pooted * 34))
			if nubhit == nil then
				bodypos.position = bodypos.position + dir * 4
				cPlayer.Torso.CFrame = CFrame.new(bodypos.position + dir * 4, bodypos.position + dir * 20)
                                --bodypos.position=bodypos.position + dir*9
                                --cPlayer.Torso.CFrame=CFrame.new(bodypos.position+dir*9,bodypos.position+dir*20)
			end
			if nubhit == nil and pooted >= 2 then
				pos = bodypos.position + dir * 2
				radi = 6
				for _, v in pairs(workspace:children()) do
					h = v:FindFirstChild(""Humanoid"")
					t = v:FindFirstChild(""Torso"")
					if h ~= nil and t ~= nil and v ~= cPlayer then
						if (t.Position - pos).magnitude <= radi then
							print("":>"")
							nubhit = v
							break
						end
					end
				end
			end
			if nubhit ~= nil then
				if nubhit.Torso:FindFirstChild(""PART1"") == nil then
					v = Instance.new(""BodyVelocity"")
					v.P = 4000
					v.maxForce = Vector3.new(500000000000, 500000000000, 500000000000)
					v.velocity = dir * 4 + Vector3.new(0, 4, 0)
					v.Name = ""PART1""
					v.Parent = nubhit.Torso
					game:GetService(""Debris""):AddItem(v, 5)
					coroutine.resume(coroutine.create(function(v)
						for i = 1, 100 do
							v.velocity = v.velocity - Vector3.new(0, .07, 0)
							wait()
						end
					end), v)
					v = Instance.new(""BodyGyro"")
					v.P = 20
					v.D = 30
					v.maxTorque = Vector3.new(5000000, 5000000, 5000000)
					v.cframe = CPlayer.Torso.CFrame * CFrame.fromEulerAnglesXYZ(math.pi / 2, math.pi, 0)
					v.Name = ""PART1""
					v.Parent = nubhit.Torso
					game:GetService(""Debris""):AddItem(v, 5)
				end
			end
		end)
		while did == false do
			wait()
		end
		if nubhit == nil then
			sound:Stop()
			wait(.5)
			sound2:Stop()
		else
			expected = 32
			did = false
			pooted = 0
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				RightShoulder.C0 = RightShoulder.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-.03), math.rad(0), math.rad(.03))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, .02) * CFrame.fromEulerAnglesXYZ(math.rad(-.05), math.rad(.08), math.rad(0))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-.04), math.rad(0), math.rad(0))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-.04), math.rad(0), math.rad(0))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(.05), math.rad(0), math.rad(.1))
				RootJoint.C0 = RootJoint.C0 * CFrame.fromEulerAnglesXYZ(math.rad(.2), math.rad(0.05), math.rad(-.05))
				bodypos.position = bodypos.position + dir * .05
				cPlayer.Torso.CFrame = CFrame.new(bodypos.position + dir * .05, bodypos.position + dir * 20)
			end)
			while did == false do
				wait()
			end
			bodypos.Parent = nil
			expected = 12
			did = false
			pooted = 0
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				RightShoulder.C0 = RightShoulder.C0 * CFrame.fromEulerAnglesXYZ(math.rad(4.5), math.rad(0), math.rad(-.15))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, -.07) * CFrame.fromEulerAnglesXYZ(math.rad(5.6), math.rad(-4.5), math.rad(1.25))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(1.24), math.rad(0), math.rad(0))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(1.24), math.rad(0), math.rad(0))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(1), math.rad(-2.5), math.rad(-8))
				RootJoint.C0 = RootJoint.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-.5), math.rad(-.5), math.rad(7))
			end)
 
			while did == false do
				wait()
			end
			expected = 6
			did = false
			pooted = 0
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				resetWelds(3, {})
				RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(pooted * 5), math.rad(0), math.rad(pooted * 18))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(pooted * 5), math.rad(0), math.rad(-pooted * 18))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 2), math.rad(0), math.rad(pooted * 6))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 2), math.rad(0), math.rad(-pooted * 6))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(20 + pooted * 5), math.rad(0), math.rad(0))
				RootJoint.C0 = RootJoint.C0 * CFrame.new(0, pooted * .03, -pooted * .1) * CFrame.fromEulerAnglesXYZ(math.rad(pooted * 6), math.rad(0), math.rad(pooted * 1))
				print("":("")
			end)
			wait(.3)
			while did == false do
				wait()
			end
			resetWelds(3, {
				""Neck""
			})
			expected = 5
			did = false
			pooted = 0
			p = Instance.new(""Part"", workspace)
			p.Name = ""ORB""
			p.TopSurface = 0
			p.BottomSurface = 0
			p.formFactor = ""Custom""
			p.CFrame = cPlayer.Torso.CFrame
			m = Instance.new(""SpecialMesh"", p)
			m.MeshType = ""Sphere""
			p.BrickColor = BrickColor:White()
			p.Size = Vector3.new(1, 1, 1)
			p.CanCollide = false
			p.Anchored = true
			game:GetService(""Debris""):AddItem(p, 5)
			coroutine.resume(coroutine.create(function(p)
				nubhit.Torso.Anchored = true
				for i = 1, 10 do
					p.Mesh.Scale = p.Mesh.Scale + Vector3.new(5, 5, 5)
					p.Transparency = .5 + i / 20
					wait()
				end
				p:Remove()
			end), p)
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				resetWelds(3, {})
				RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 10), math.rad(-pooted * 12), math.rad(pooted * 10))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 10), math.rad(pooted * 12), math.rad(-pooted * 10))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 2), math.rad(0), math.rad(-pooted * 10))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 2), math.rad(0), math.rad(pooted * 9))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(20 - pooted * 6), math.rad(0), math.rad(0))
				RootJoint.C0 = RootJoint.C0 * CFrame.new(0, pooted * .03, -pooted * .1) * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 9.5), math.rad(0), math.rad(pooted * .2))
				print("":("")
			end)
 
			while did == false do
				wait()
			end
			wait(1)
			expected = 5
			did = false
			pooted = 0
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				resetWelds(3, {})
				RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, 0.05 * pooted, 0) * CFrame.fromEulerAnglesXYZ(math.rad(pooted * 2), math.rad(0), math.rad(pooted * 6))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(pooted * 2), math.rad(0), math.rad(-pooted * 6))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 2), math.rad(0), math.rad(-57 + pooted * 20))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 2), math.rad(0), math.rad(57 - pooted * 20))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(pooted * 4), math.rad(0), math.rad(0))
				RootJoint.C0 = RootJoint.C0 * CFrame.new(0, 0, -.1 * pooted) * CFrame.fromEulerAnglesXYZ(math.rad(-57 + pooted * 20), math.rad(0), math.rad(0))
				print("":("")
			end)
			while did == false do
				wait()
			end
			wait(.8)
			expected = 5
			did = false
			pooted = 0
			bodypos.Parent = cPlayer.Torso
			workspace.CurrentCamera.CameraType = ""Follow""
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(-2), math.rad(0), math.rad(-3))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(2), math.rad(0), math.rad(3))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(1), math.rad(0), math.rad(-8))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(1), math.rad(0), math.rad(8))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-14), math.rad(0), math.rad(0))
				RootJoint.C0 = RootJoint.C0 * CFrame.new(0, 0, .05) * CFrame.fromEulerAnglesXYZ(math.rad(-7), math.rad(0), math.rad(0))
 
				bodypos.position = bodypos.position + Vector3.new(0, 240, 0)
				cPlayer.Torso.CFrame = cPlayer.Torso.CFrame + Vector3.new(0, 240, 0)
 
				print("":("")
			end)
			local DIOPLS = Instance.new(""Sound"", cPlayer.Torso)
			DIOPLS.SoundId = ""rbxassetid://316900066""
			DIOPLS.Volume = 1
			DIOPLS:Play()
			Instance.new(""DistortionSoundEffect"", DIOPLS).Level = 1
			game:GetService(""Debris""):AddItem(DIOPLS, 19)
			while did == false do
				wait()
			end
			wait(.8)
			LOL = Spawn()
			LOL.Parent = workspace
			LOL:MakeJoints()
			LOL:MoveTo(cPlayer.Torso.CFrame.p)
			C = LOL.Center
			C.CFrame = CFrame.new(nubhit.Torso.Position + Vector3.new(0, 1200, 0)) * CFrame.new(8, 0, 0)
 
			bb = Instance.new(""BodyPosition"")
			bb.Parent = C
			bb.maxForce = Vector3.new(50000000000000000, 50000000000000000, 50000000000000000)
			bb.position = bb.Parent.Position
			C.CFrame = CFrame.new(bb.position)
			orig = bb.position
 
			gg = Instance.new(""BodyGyro"")
			gg.P = 15000
			gg.D = 100
			gg.maxTorque = Vector3.new(500000000, 500000000, 500000000)
			gg.cframe = CFrame.new(C.Position, Vector3.new(nubhit.Torso.Position.x, C.Position.y, nubhit.Torso.Position.z)) * CFrame.fromEulerAnglesXYZ(-math.rad(10), math.rad(10), 0)
			gg.Parent = C
 
			expected = 80
			did = false
			pooted = 0
 
			resetWelds(3, {})
 
			Hum.PlatformStand = true
 
			RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, .4, 0) * CFrame.fromEulerAnglesXYZ(math.rad(30), math.rad(0), math.rad(180))
			LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, .4, 0) * CFrame.fromEulerAnglesXYZ(math.rad(30), math.rad(0), math.rad(-180))
			RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-8), math.rad(0), math.rad(-8))
			LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-8), math.rad(0), math.rad(8))
			Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-45), math.rad(0), math.rad(0))
			RootJoint.C0 = RootJoint.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(0))
 
			bodypos.Parent = nil
			w = Instance.new(""Weld"")
			w.Part0 = C
			w.Part1 = cPlayer.Torso
			w.C0 = CFrame.new(.3, 5.6, -7) * CFrame.fromEulerAnglesXYZ(math.pi / .9, math.pi / 10, 0)
			w.C0 = w.C0 * CFrame.fromEulerAnglesXYZ(0, 0, 0)
			w.Parent = w.Part0
 
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
 
				bb.position = orig - Vector3.new(0, 1202 / 80 * pooted, 0)
				C.CFrame = C.CFrame - Vector3.new(0, 1202 / 80, 0)
				print("":("")
			end)
 
			while did == false do
				wait()
			end
			C.CFrame = CFrame.new(nubhit.Torso.Position + Vector3.new(0, 4, 0), Vector3.new(nubhit.Torso.Position.x, C.Position.y, nubhit.Torso.Position.z)) * CFrame.fromEulerAnglesXYZ(-math.rad(5), math.rad(5), 0)
			C.CFrame = C.CFrame * CFrame.new(8, 0, 0)
			bl2 = Instance.new(""Part"")
			bl2.TopSurface = 0
			bl2.BottomSurface = 0
			bl2.CanCollide = false
			bl2.formFactor = ""Symmetric""
			local ShockWaveSound = Instance.new(""Sound"", bl2)
			ShockWaveSound.SoundId = ""rbxassetid://138186576""
			ShockWaveSound.Pitch = 0.8
			ShockWaveSound.Volume = 1
			ShockWaveSound:Play()
			Instance.new(""DistortionSoundEffect"", ShockWaveSound).Level = 1
			m = Instance.new(""SpecialMesh"")
			m.MeshId = ""http://www.roblox.com/asset/?id=20329976""
			m.Scale = Vector3.new(1, 4, 1)
			m.Parent = bl2
			bl2.Size = Vector3.new(1, 1, 1)
			bl2.Anchored = false
			bl2.Name = ""c""
			bl2.CFrame = CFrame.new(C.Position) - Vector3.new(0, 2, 0)
			bl2.BrickColor = BrickColor.new(""White"")
			bl2.Parent = CPlayer
			coroutine.resume(coroutine.create(function(p)
				for i = 1, 10 do
					p.Mesh.Scale = p.Mesh.Scale + Vector3.new(8, 0, 8)
					p.Transparency = .25 + i * .075
					p.CFrame = p.CFrame * CFrame.fromEulerAnglesXYZ(0, math.rad(5), 0)
					wait()
				end
				p:Remove()
			end), bl2)
			bl2.Anchored = true
 
			bl2 = Instance.new(""Part"")
			bl2.TopSurface = 0
			bl2.BottomSurface = 0
			bl2.CanCollide = false
			bl2.formFactor = ""Symmetric""
			m = Instance.new(""SpecialMesh"")
			m.MeshId = ""http://www.roblox.com/asset/?id=20329976""
			m.Scale = Vector3.new(1, 6, 1)
			m.Parent = bl2
			bl2.Size = Vector3.new(1, 1, 1)
			bl2.Anchored = false
			bl2.Name = ""c""
			bl2.CFrame = CFrame.new(C.Position) - Vector3.new(0, 2, 0)
			bl2.BrickColor = BrickColor.new(""White"")
			bl2.Parent = CPlayer
			coroutine.resume(coroutine.create(function(p)
				for i = 1, 20 do
					p.Mesh.Scale = p.Mesh.Scale + Vector3.new(6, 0, 6)
					p.Transparency = i / 20
					p.CFrame = p.CFrame * CFrame.fromEulerAnglesXYZ(0, math.rad(3), 0)
					wait()
				end
				p:Remove()
			end), bl2)
			bl2.Anchored = true
 
			gg.cframe = gg.cframe * CFrame.fromEulerAnglesXYZ(math.rad(10), -math.rad(10), 0)
			expected = 3
			did = false
			pooted = 0
			workspace.CurrentCamera.CameraType = ""Follow""
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(0))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(0))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-4), math.rad(0), math.rad(0))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(4), math.rad(0), math.rad(0))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(0))
				RootJoint.C0 = RootJoint.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(5), math.rad(0), math.rad(0))
 
				w.C0 = w.C0 * CFrame.fromEulerAnglesXYZ(math.rad(15), 0, 0)
 
				print("":("")
			end)
			while did == false do
				wait()
			end
			wait(.3)
			expected = 5
			did = false
			pooted = 0
			workspace.CurrentCamera.CameraType = ""Follow""
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(0))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(0))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(-8))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(8))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(5), math.rad(0), math.rad(0))
				RootJoint.C0 = RootJoint.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(14), math.rad(0), math.rad(0))
 
				w.C0 = w.C0 * CFrame.new(0, 0, -.04) * CFrame.fromEulerAnglesXYZ(math.rad(15), 0, 0)
 
				print("":("")
			end)
			while did == false do
				wait()
			end
			expected = 203
			did = false
			pooted = 0
			workspace.CurrentCamera.CameraType = ""Follow""
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				resetWelds(3, {
					RightHip,
					LeftHip,
					RootJoint,
					Neck
				})
				RightShoulder.C0 = RightShoulderC0 * CFrame.new(math.random(-20, 20) / 200, math.cos(time() * 30), math.random(-20, 20) / 200) * CFrame.fromEulerAnglesXYZ(math.sin(time() * 20) / 3, math.sin(time() * 20) / 5, math.rad(60) - math.cos(time() * 70) * 2)
				LeftShoulder.C0 = LeftShoulderC0 * CFrame.new(math.random(-20, 20) / 200, math.cos(time() * 30), math.random(-20, 20) / 200) * CFrame.fromEulerAnglesXYZ(math.sin(time() * 20) / 3, math.sin(time() * 20) / 5, math.rad(-60) + math.sin(time() * 60) * 2)
				RightHip.C0 = RightHipC0 * CFrame.fromEulerAnglesXYZ(math.rad(-18), math.rad(0), math.rad(-30))
				LeftHip.C0 = LeftHipC0 * CFrame.fromEulerAnglesXYZ(math.rad(-18), math.rad(0), math.rad(30))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(20), math.rad(0), math.rad(0))
				RootJoint.C0 = RootJointC0 * CFrame.new(math.random(-20, 20) / 200, math.random(-20, 20) / 200, math.random(-20, 20) / 200) * CFrame.fromEulerAnglesXYZ(math.rad(80), math.rad(0), math.rad(0))
				w.C0 = w.C0 * CFrame.new(math.random(-20, 20) / 2000, math.random(-20, 20) / 2000, math.random(-20, 20) / 2000) * CFrame.fromEulerAnglesXYZ(0, 0, 0)
				C.CFrame = C.CFrame + Vector3.new(math.random(-20, 20) / 200, math.random(-20, 20) / 200, math.random(-20, 20) / 200)
 
				if pooted / 2 == math.floor(pooted / 2) then
					p = cPlayer[""Right Arm""]:clone()
					p.Anchored = true
					p.CanCollide = false
					p.Parent = workspace
					p.Transparency = .5
					game:GetService(""Debris""):AddItem(p, .2)
					p = cPlayer[""Left Arm""]:clone()
					p.Anchored = true
					p.CanCollide = false
					p.Parent = workspace
					p.Transparency = .5
					game:GetService(""Debris""):AddItem(p, .2)
 
					p = Instance.new(""Part"", workspace)
					p.Name = ""ORB""
					p.TopSurface = 0
					p.BottomSurface = 0
					p.formFactor = ""Custom""
					p.CFrame = cPlayer.Torso.CFrame + cPlayer.Torso.CFrame.lookVector * 3 + Vector3.new(math.random(-20, 20) / 15, math.random(-20, 20) / 15 - .8, math.random(-20, 20) / 15)
					m = Instance.new(""SpecialMesh"", p)
					m.MeshType = ""Sphere""
					p.BrickColor = BrickColor:White()
					p.Size = Vector3.new(.4, .4, .4)
					p.CanCollide = false
					p.Anchored = true
					game:GetService(""Debris""):AddItem(p, 5)
					coroutine.resume(coroutine.create(function(p)
						for i = 1, 8 do
							p.Mesh.Scale = p.Mesh.Scale + Vector3.new(1, 1, 1)
							p.Transparency = i / 8
							wait()
						end
						p:Remove()
					end), p)
 
				end
 
				print("":)"")
			end)
			while did == false do
				wait()
			end
			wait(.5)
			expected = 20
			did = false
			pooted = 0
			workspace.CurrentCamera.CameraType = ""Follow""
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				resetWelds(3, {
					Neck,
					RootJoint,
					RightHip,
					LeftHip
				})
				RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(2 * pooted), math.rad(0), math.rad(5 * pooted))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(-9 * pooted))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(-2))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(4 * pooted))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(2), math.rad(0), math.rad(2))
				RootJoint.C0 = RootJoint.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(0))
				w.C0 = w.C0 * CFrame.new(0, 0.03, .03) * CFrame.fromEulerAnglesXYZ(math.rad(2), math.rad(2), math.rad(0))
				print("":)"")
			end)
			while did == false do
				wait()
			end
			wait(2)
			expected = 5
			did = false
			pooted = 0
			workspace.CurrentCamera.CameraType = ""Follow""
			w.Parent = nil
			bodypos.position = cPlayer.Torso.Position - Vector3.new(0, 1, 0)
			poo = cPlayer.Torso.CFrame.lookVector
			cPlayer.Torso.CFrame = CFrame.new(cPlayer.Torso.Position, cPlayer.Torso.Position + C.CFrame.lookVector * 50)
			bodypos.Parent = cPlayer.Torso
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				resetWelds(3, {})
				RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(80 - pooted * 35))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(10), math.rad(0), math.rad(-190 + pooted * 28))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(6), math.rad(0), math.rad(-80 + pooted * 4))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(8), math.rad(0), math.rad(84 - pooted * 4))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(20 + pooted * 10), math.rad(0), math.rad(0))
				RootJoint.C0 = RootJoint.C0 * CFrame.new(0, 0, -pooted * .25) * CFrame.fromEulerAnglesXYZ(math.rad(-20 + pooted * 9), math.rad(0), math.rad(0))
				print("":)"")
			end)
			while did == false do
				wait()
			end
			wait(.7)
			expected = 5
			did = false
			pooted = 0
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				resetWelds(3, {})
				RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, 0.05 * pooted, 0) * CFrame.fromEulerAnglesXYZ(math.rad(pooted * 2), math.rad(0), math.rad(pooted * 6))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(pooted * 2), math.rad(0), math.rad(-pooted * 6))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 2), math.rad(0), math.rad(-57 + pooted * 20))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-pooted * 2), math.rad(0), math.rad(57 - pooted * 20))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(pooted * 4), math.rad(0), math.rad(0))
				RootJoint.C0 = RootJoint.C0 * CFrame.new(0, 0, -.1 * pooted) * CFrame.fromEulerAnglesXYZ(math.rad(-57 + pooted * 20), math.rad(0), math.rad(0))
				print("":("")
			end)
			while did == false do
				wait()
			end
			wait(.2)
			expected = 10
			did = false
			pooted = 0
			workspace.CurrentCamera.CameraType = ""Follow""
			g = Instance.new(""BodyGyro"")
			g.Parent = cPlayer.Torso
			sos = game:GetService(""RunService"").Stepped:connect(function()
				pooted = pooted + 1
				if pooted >= expected + 1 then
					sos:disconnect()
					did = true
					return
				end
				RightShoulder.C0 = RightShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(-2), math.rad(0), math.rad(-2))
				LeftShoulder.C0 = LeftShoulder.C0 * CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(math.rad(1), math.rad(0), math.rad(2))
				RightHip.C0 = RightHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(1), math.rad(0), math.rad(-4))
				LeftHip.C0 = LeftHip.C0 * CFrame.fromEulerAnglesXYZ(math.rad(1), math.rad(0), math.rad(4))
				Neck.C0 = Neck.C0 * CFrame.fromEulerAnglesXYZ(math.rad(-7), math.rad(0), math.rad(0))
				RootJoint.C0 = RootJoint.C0 * CFrame.new(0, 0, .05) * CFrame.fromEulerAnglesXYZ(math.rad(0), math.rad(0), math.rad(0))
				if pooted >= 2 then
					bodypos.position = bodypos.position + Vector3.new(0, 12, 0) - dir * 5
					cPlayer.Torso.CFrame = cPlayer.Torso.CFrame + Vector3.new(0, 12, 0) - dir * 5
				end
				print("":("")
			end)
			while did == false do
				wait()
			end
			wait(.2)
			bodypos:Remove()
			wait(.5)
 
			e = Instance.new(""Explosion"")
			e.BlastRadius = 30
			e.Position = C.Position
			e.BlastPressure = e.BlastPressure * 2.5
			e.Parent = workspace
			s = Instance.new(""Sound"", C)
			s.SoundId = ""rbxassetid://258057783""
			s.Volume = 1
			s:Play()
			Instance.new(""DistortionSoundEffect"", s).Level = 1
			g:Remove()
                --dun
			nubhit.Torso.Anchored = false
			Hum.PlatformStand = false
			C.Anchored = true
 
			coroutine.resume(coroutine.create(function(t)
				wait(3)
				p = Instance.new(""Sound"")
				p.SoundId = ""http://www.roblox.com/asset/?id=154677261""
				p.Parent = t
				p.Volume = 1
				p:Play()
			end), C)
			game:GetService(""Debris""):AddItem(LOL, 5)
		end
		resetWelds(3, {})
		workspace.CurrentCamera.CameraType = ""Custom""
		Hum.WalkSpeed = 16
		Hum.Name = ""Humanoid""
		bodypos:Remove()
		partpos:Remove()
		Anim.Parent = nil
		wait(.1)
		Anim.Disabled = false
		Anim.Parent = cPlayer
		deb = true
	end
 
	Tool = Instance.new(""HopperBin"")
	Tool.Name = ""ROAD ROLLER DA""
	Tool.Parent = game.Players.LocalPlayer.Backpack
	Tool.Selected:connect(function(mouse)
		mouse.Button1Down:connect(function()
			doitdocdoit()
		end)
	end)
 
end"
Zb59zxCS,clicker hack 999999999 | RBX working 🔥🔥,droui,Lua,Friday 14th of July 2023 05:55:00 PM CDT,"local player = game.clicks.mousebutton1down:getclicks(""clicks"", 999999999) if player.clicked == clicks.value >+ 999999999"
rWxUtRk0,Species by trainer class II (wip),CancerFairy,C,Friday 14th of July 2023 05:39:38 PM CDT,"#include ""global.h""
#include ""constants/pokemon.h""

const u16 sAquaGruntSpeciesOptions[] =
{
    SPECIES_ARROKUDA,
    SPECIES_CARVANHA,
    SPECIES_CHINCHOU,
    SPECIES_CLAMPERL,
    SPECIES_CLAUNCHER,
    SPECIES_CORPHISH,
    SPECIES_GRIMER,
    SPECIES_KRABBY,
    SPECIES_LUNATONE,
    SPECIES_MAGIKARP,
    SPECIES_MANTINE,
    SPECIES_MUDKIP,
    SPECIES_POOCHYENA,
    SPECIES_REMORAID,
    SPECIES_SHELLDER,
    SPECIES_SHELLOS,
    SPECIES_SPHEAL,
    SPECIES_WINGULL,
    SPECIES_WISHIWASHI,
    SPECIES_ZUBAT,
};

const u16 sAromaLadySpecies[] =
{
    SPECIES_BELLSPROUT,
    SPECIES_CACNEA,
    SPECIES_CHERUBI,
    SPECIES_CHIKORITA,
    SPECIES_COTTONEE,
    SPECIES_FLABEBE,
    SPECIES_FOMANTIS,
    SPECIES_FOONGUS,
    SPECIES_LOTAD,
    SPECIES_MARACTUS,
    SPECIES_MORELULL,
    SPECIES_PARAS,
    SPECIES_ROSELIA,
    SPECIES_SHROOMISH,
    SPECIES_TANGELA,
    SPECIES_WORMADAM,
};

const u16 sBattleGirlSpecies[] =
{
    SPECIES_CROAGUNK,
    SPECIES_GALLADE, // Can't be Ralts or Kirlia
    SPECIES_GLAMEOW,
    SPECIES_GOLISOPOD,
    SPECIES_HERACROSS,
    SPECIES_MACHOP,
    SPECIES_MEDITITE,
    SPECIES_PANCHAM,
    SPECIES_PHANPY,
    SPECIES_PSYDUCK,
    SPECIES_SHROOMISH,
    SPECIES_SKORUPI,
    SPECIES_SNEASEL,
    SPECIES_RIOLU,
    SPECIES_ROGGENROLA,
    SPECIES_SNUBBULL,
    SPECIES_ZANGOOSE,
};

const u16 sBeautySpecies[] =
{
    // To -do
};

const u16 sBirdKeeperSpecies[] =
{
    SPECIES_CHATOT,
    SPECIES_DELIBIRD,
    SPECIES_DODUO,
    SPECIES_FARFETCHD,
    SPECIES_GLIGAR,
    SPECIES_HOOTHOOT,
    SPECIES_MOTHIM,
    SPECIES_NATU,
    SPECIES_PIDGEY,
    SPECIES_PIDOVE,
    SPECIES_PIKIPEK,
    SPECIES_ROWLET,
    SPECIES_RUFFLET,
    SPECIES_SKARMORY,
    SPECIES_SPEAROW,
    SPECIES_STARLY,
    SPECIES_TAILLOW,
    SPECIES_TROPIUS,
    SPECIES_VULLABY,
    SPECIES_WINGULL,
    SPECIES_SWABLU,
};

const u16 sBlackBeltSpecies[] =
{
    SPECIES_ABSOL,
    SPECIES_ARON,
    SPECIES_CROAGUNK,
    SPECIES_GOLISOPOD,
    SPECIES_HERACROSS,
    SPECIES_MACHOP,
    SPECIES_MAKUHITA,
    SPECIES_MEDITITE,
    SPECIES_NUZLEAF,
    SPECIES_PANCHAM,
    SPECIES_PINSIR,
    SPECIES_RHYHORN,
    SPECIES_RIOLU,
    SPECIES_SANDILE,
    SPECIES_SHROOMISH,
    SPECIES_SKORUPI,
    SPECIES_TEDDIURSA,
    SPECIES_ZANGOOSE,
};

const u16 sBreederSpecies[] =
{
    SPECIES_AZURILL,
    SPECIES_BONSLY,
    SPECIES_BUDEW,
    SPECIES_CHINGLING,
    SPECIES_CLEFFA,
    SPECIES_ELEKID,
    SPECIES_HAPPINY,
    SPECIES_IGGLYBUFF,
    SPECIES_MANTYKE,
    SPECIES_MUNCHLAX,
    SPECIES_MIME_JR,
    SPECIES_PICHU,
    SPECIES_POOCHYENA,
    SPECIES_RIOLU,
    SPECIES_SMOOCHUM,
    SPECIES_TOGEPI,
    SPECIES_TOXEL,
    SPECIES_WYNAUT,
    SPECIES_ZIGZAGOON,
};

const u16 sBugCatcherSpecies[] =
{
    SPECIES_BURMY,
    SPECIES_CATERPIE,
    SPECIES_COMBEE,
    SPECIES_GRUBBIN,
    SPECIES_HERACROSS,
    SPECIES_ILLUMISE,
    SPECIES_JOLTIK,
    SPECIES_KRICKETOT,
    SPECIES_PINSIR,
    // SPECIES_SHEDINJA,
    SPECIES_SKORUPI,
    SPECIES_SNOM,
    SPECIES_SPINARAK,
    SPECIES_VENONAT,
    SPECIES_VOLBEAT,
    SPECIES_WEEDLE,
    SPECIES_WIMPOD,
    SPECIES_WURMPLE,
    SPECIES_YANMA,
};

const u16 sCamperSpecies[] =
{
    SPECIES_AIPOM,
    SPECIES_BALTOY,
    SPECIES_BARBOACH,
    SPECIES_BIDOOF,
    SPECIES_BUIZEL,
    SPECIES_CARNIVINE,
    SPECIES_CACNEA,
    SPECIES_CASCOON,
    SPECIES_DODUO,
    SPECIES_EKANS,
    SPECIES_GEODUDE,
    SPECIES_GULPIN,
    SPECIES_HERACROSS,
    SPECIES_KECLEON,
    SPECIES_KRABBY,
    SPECIES_MARACTUS,
    SPECIES_NATU,
    SPECIES_NIDORAN_F,
    SPECIES_NIDORAN_M,
    SPECIES_PINSIR,
    SPECIES_PSYDUCK,
    SPECIES_SANDSHREW,
    SPECIES_SEEDOT,
    SPECIES_SHINX,
    SPECIES_SPEAROW,
    SPECIES_STARLY,
    SPECIES_STUNKY,
    SPECIES_TAILLOW,
    SPECIES_TAUROS,
    SPECIES_WINGULL,
    SPECIES_ZIGZAGOON,
    SPECIES_ZUBAT,
};

const u16 sCollectorSpecies[] =
{
    SPECIES_AZURILL,
    SPECIES_BURMY,
    SPECIES_CASTFORM,
    SPECIES_CLAMPERL,
    SPECIES_CLEFFA,
    SPECIES_DEDENNE,
    SPECIES_DELIBIRD,
    SPECIES_DUNSPARCE,
    SPECIES_EMOLGA,
    SPECIES_FARFETCHD,
    SPECIES_FEEBAS,
    SPECIES_KECLEON,
    SPECIES_MILOTIC,
    SPECIES_MINUN,
    SPECIES_NINCADA,
    SPECIES_PACHIRISU,
    SPECIES_PICHU,
    SPECIES_PLUSLE,
    SPECIES_PYUKUMUKU,
    SPECIES_RELICANTH,
    SPECIES_SHUCKLE,
    SPECIES_STONJOURNER,
    SPECIES_TOGEDEMARU,
    SPECIES_ZANGOOSE,
};

const u16 sCoolTrainerSpecies[] =
{
    SPECIES_ABSOL,
    SPECIES_BELDUM,
    SPECIES_COMBEE,
    SPECIES_CRYOGONAL,
    SPECIES_DELIBIRD,
    SPECIES_DRAMPA,
    SPECIES_DUNSPARCE,
    SPECIES_FARFETCHD,
    SPECIES_KECLEON,
    SPECIES_KRICKETOT,
    SPECIES_LARVITAR,
    SPECIES_MILOTIC,
    SPECIES_MOTHIM,
    SPECIES_SHUCKLE,
    SPECIES_SNEASEL,
    SPECIES_SNORUNT,
    SPECIES_SPINDA,
    SPECIES_SWABLU,
    SPECIES_ZANGOOSE,
};

const u16 sDragonTamerSpecies[] =
{
    SPECIES_ALTARIA, // No Swablu ofc
    SPECIES_AMPHAROS, // No Mareep/Flaaffy, ofc
    SPECIES_AXEW,
    SPECIES_BAGON,
    SPECIES_BARBOACH,
    SPECIES_CHARMANDER,
    SPECIES_CORPHISH,
    SPECIES_DEINO,
    SPECIES_DRAMPA,
    SPECIES_DREEPY,
    SPECIES_EXEGGUTOR_ALOLAN,
    SPECIES_FLAPPLE,
    SPECIES_GIBLE,
    SPECIES_GYARADOS, // No Magikarp, ofc
    SPECIES_HORSEA,
    SPECIES_LARVITAR,
    SPECIES_MILOTIC, // No Feebas, ofc
    SPECIES_MOTHIM, // No Burmy ofc
    SPECIES_ONIX,
    SPECIES_SANDILE,
    SPECIES_SCEPTILE, // No Treecko/Grovyle, ofc
    SPECIES_SCRAGGY,
    SPECIES_SKRELP,
    SPECIES_TROPIUS,
    SPECIES_VIBRAVA,
    SPECIES_YANMA,
    SPECIES_ZUBAT,
};

const u16 sExpertSpecies[] =
{
    SPECIES_BELDUM,
    SPECIES_BRELOOM,
    SPECIES_CLAMPERL,
    SPECIES_COMBUSKEN,
    SPECIES_CROAGUNK,
    SPECIES_DRAMPA,
    SPECIES_DUSTOX,
    SPECIES_ELECTABUZZ,
    SPECIES_GALLADE, // Can't be Ralts or Kirlia
    SPECIES_MEDITITE,
    SPECIES_MOTHIM,
    SPECIES_PANCHAM,
    SPECIES_PINSIR,
    SPECIES_PYUKUMUKU,
    SPECIES_RIOLU,
    SPECIES_SKORUPI,
    SPECIES_SPINDA,
    SPECIES_ZANGOOSE,
};

const u16 sFishermanSpecies[] =
{
    SPECIES_ARROKUDA,
    SPECIES_BARBOACH,
    SPECIES_CARVANHA,
    SPECIES_CLAMPERL,
    SPECIES_CLAUNCHER,
    SPECIES_CORSOLA,
    SPECIES_DHELMISE,
    SPECIES_FEEBAS,
    SPECIES_GOLDEEN,
    SPECIES_HORSEA,
    SPECIES_LOTAD,
    SPECIES_MAGIKARP,
    SPECIES_MAREANIE,
    SPECIES_PINCURCHIN,
    SPECIES_PYUKUMUKU,
    SPECIES_QWILFISH,
    SPECIES_REMORAID,
    SPECIES_SHELLDER,
    SPECIES_SKRELP,
    SPECIES_TENTACOOL,
    SPECIES_WISHIWASHI
};

const u16 sGentlemanSpecies[] =
{
    SPECIES_BLITZLE,
    SPECIES_CARVANHA,
    SPECIES_CHATOT,
    SPECIES_CUBONE,
    SPECIES_DELIBIRD,
    SPECIES_DURANT,
    SPECIES_EEVEE,
    SPECIES_ELECTRIKE,
    SPECIES_FURFROU,
    SPECIES_GIRAFARIG,
    SPECIES_LILLIPUP,
    SPECIES_LUCARIO,
    SPECIES_MAREEP,
    SPECIES_MAWILE,
    SPECIES_NIDORAN_F,
    SPECIES_NIDORAN_M,
    SPECIES_PERSIAN,
    SPECIES_PIKIPEK,
    SPECIES_ROSELIA,
    SPECIES_RUFFLET,
    SPECIES_SLOWPOKE,
    SPECIES_SNUBBULL,
    SPECIES_SPOINK,
    SPECIES_WYNAUT,
    SPECIES_ZANGOOSE,
};

const u16 sGuitaristSpecies[] =
{
    SPECIES_BLITZLE,
    SPECIES_CHARJABUG,
    SPECIES_CHATOT,
    SPECIES_CHINCHOU,
    SPECIES_DEDENNE,
    SPECIES_ELEKID,
    SPECIES_ELECTRIKE,
    SPECIES_EMOLGA,
    SPECIES_GULPIN,
    SPECIES_JOLTIK,
    SPECIES_MAREEP,
    SPECIES_MAGNEMITE,
    SPECIES_MORPEKO,
    SPECIES_PIKACHU,
    SPECIES_PINCURCHIN,
    SPECIES_TOGEDEMARU,
    SPECIES_TOXEL,
    SPECIES_VOLTORB,
};

const u16 sHexManiacSpecies[] =
{
    SPECIES_BANETTE,
    SPECIES_CHINGLING,
    SPECIES_CORSOLA_GALARIAN,
    SPECIES_DECIDUEYE,
    SPECIES_DROWZEE,
    SPECIES_DUSKULL,
    SPECIES_GASTLY,
    SPECIES_HONEDGE,
    SPECIES_FROSLASS,
    SPECIES_LUNATONE,
    SPECIES_MISDREAVUS,
    SPECIES_MORELULL,
    SPECIES_PHANTUMP,
    SPECIES_PUMPKABOO,
    SPECIES_SABLEYE,
    SPECIES_SHEDINJA,
    SPECIES_SOLROCK,
};

const u16 sHikerSpecies[] =
{
    SPECIES_ARON,
    SPECIES_BARBOACH,
    SPECIES_BALTOY,
    SPECIES_BONSLY,
    SPECIES_CACNEA,
    SPECIES_CARBINK,
    SPECIES_DUNSPARCE,
    SPECIES_GEODUDE,
    SPECIES_GLIGAR,
    SPECIES_HIPPOPOTAS,
    SPECIES_LARVITAR,
    SPECIES_MACHOP,
    SPECIES_MARACTUS,
    SPECIES_NOSEPASS,
    SPECIES_ONIX,
    SPECIES_PARAS,
    SPECIES_ROGGENROLA,
    SPECIES_SANDILE,
    SPECIES_SANDSHREW,
    SPECIES_SHELLOS,
    SPECIES_SHUCKLE,
    SPECIES_STONJOURNER,
    SPECIES_TRAPINCH,
    SPECIES_TURTWIG,
    SPECIES_WORMADAM_SANDY_CLOAK,
    SPECIES_WORMADAM_TRASH_CLOAK
};

const u16 sLadySpecies[] =
{
    SPECIES_BEAUTIFLY,
    SPECIES_CARBINK,
    SPECIES_CLEFAIRY,
    SPECIES_FLOETTE,
    SPECIES_FOMANTIS,
    SPECIES_GLAMEOW,
    SPECIES_JIGGLYPUFF,
    SPECIES_JYNX,
    SPECIES_MAWILE,
    SPECIES_MEOWSTIC,
    SPECIES_MEOWSTIC_FEMALE,
    SPECIES_MEOWTH,
    SPECIES_PIKACHU,
    SPECIES_RALTS,
    SPECIES_SKITTY,
    SPECIES_SNOM,
    SPECIES_VESPIQUEN,
    SPECIES_VIVILLON,
    SPECIES_WORMADAM,
};

const u16 sLassSpecies[] =
{
    SPECIES_CATERPIE,
    SPECIES_CLEFFA,
    SPECIES_COMBEE,
    SPECIES_DEDENNE,
    SPECIES_FLABEBE,
    SPECIES_GLAMEOW,
    SPECIES_IGGLYBUFF,
    SPECIES_MEOWSTIC,
    SPECIES_MEOWSTIC_FEMALE,
    SPECIES_MEOWTH,
    SPECIES_PICHU,
    SPECIES_RALTS,
    SPECIES_SCATTERBUG,
    SPECIES_SKITTY,
    SPECIES_SMOOCHUM,
    SPECIES_SNUBBULL,
    SPECIES_WURMPLE,
};

const u16 sMagmaGruntSpecies[] =
{
    SPECIES_CARBINK,
    SPECIES_DUNSPARCE,
    SPECIES_FLETCHLING,
    SPECIES_GEODUDE,
    SPECIES_NINCADA,
    SPECIES_NOSEPASS,
    SPECIES_NUMEL,
    SPECIES_PHANPY,
    SPECIES_POOCHYENA,
    SPECIES_RHYHORN,
    SPECIES_SHUCKLE,
    SPECIES_SLUGMA,
    SPECIES_SOLROCK,
    SPECIES_STONJOURNER,
    SPECIES_TORCHIC,
    SPECIES_ZUBAT,
};

const u16 sNinjaBoySpecies[] =
{
    SPECIES_CLAUNCHER,
    SPECIES_CROAGUNK,
    SPECIES_FOONGUS,
    SPECIES_GLIGAR,
    SPECIES_GRIMER,
    SPECIES_INKAY,
    SPECIES_KOFFING,
    SPECIES_MAREANIE,
    SPECIES_POOCHYENA,
    SPECIES_SABLEYE,
    SPECIES_SANDILE,
    SPECIES_SNEASEL,
    SPECIES_SKORUPI,
    SPECIES_SEVIPER,
    SPECIES_SPINARAK,
    SPECIES_VENONAT,
    SPECIES_TRAPINCH,
    SPECIES_WEEDLE,
    SPECIES_ZUBAT,
};

const u16 sParasolLadySpecies[] =
{
    SPECIES_BELLSPROUT,
    SPECIES_BULBASAUR,
    SPECIES_CHERUBI,
    SPECIES_CHESPIN,
    SPECIES_CHIKORITA,
    SPECIES_FLABEBE,
    SPECIES_FOMANTIS,
    SPECIES_HIPPOPOTAS,
    SPECIES_ODDISH,
    SPECIES_TANGELA,
    SPECIES_TROPIUS,
    SPECIES_WINGULL,
};

const u16 sPicknickerSpecies[] =
{
    // To do
};

const u16 sPokefanSpecies[] =
{
    // To do
};

const u16 sPokemaniacSpecies[] =
{
    // To do
};

const u16 sPsychicSpecies[] =
{
    SPECIES_ABRA,
    SPECIES_BALTOY,
    SPECIES_BRONZOR,
    SPECIES_CHINGLING,
    SPECIES_DROWZEE,
    SPECIES_EXEGGUTOR,
    SPECIES_INDEEDEE,
    SPECIES_INKAY,
    SPECIES_LUNATONE,
    SPECIES_NATU,
    SPECIES_MEDITITE,
    SPECIES_RALTS,
    SPECIES_SLOWPOKE,
    SPECIES_SOLOSIS,
    SPECIES_SOLROCK,
    SPECIES_SPOINK,
    SPECIES_WYNAUT,
};

const u16 sRangerSpecies[] =
{
    SPECIES_BELLSPROUT,
    SPECIES_FERROSEED,
    SPECIES_LILLIPUP,
    SPECIES_PHANTUMP,
    SPECIES_POOCHYENA,
    SPECIES_TREECKO,
};

const u16 sRichBoySpecies[] =
{
    // To do
};

const u16 sRuinManiacSpecies[] =
{
    SPECIES_BALTOY,
    SPECIES_CACNEA,
    SPECIES_CUBONE,
    SPECIES_DIGLETT,
    SPECIES_DIGLETT_ALOLAN,
    SPECIES_HIPPOPOTAS,
    SPECIES_MARACTUS,
    SPECIES_SANDSHREW,
    SPECIES_SIGILYPH,
    SPECIES_TRAPINCH,
};

const u16 sSailorSpecies[] =
{
    SPECIES_CARVANHA,
    SPECIES_CLAUNCHER,
    SPECIES_CORPHISH,
    SPECIES_DHELMISE,
    SPECIES_HORSEA,
    SPECIES_INKAY,
    SPECIES_KRABBY,
    SPECIES_MACHOP,
    SPECIES_MAGIKARP,
    SPECIES_MUDKIP,
    SPECIES_REMORAID,
    SPECIES_SCRAGGY,
    SPECIES_SHELLDER,
    SPECIES_SHELLOS,
    SPECIES_SKRELP,
    SPECIES_SPHEAL,
    SPECIES_WIMPOD,
};

const u16 sSwimmerSpecies[] =
{
    // To do
};

const u16 sTriathleteSpecies[] =
{
    // To do
};

const u16 sYoungsterSpecies[] =
{
    SPECIES_BONSLY,
    SPECIES_ELEKID,
    SPECIES_KRICKETOT,
    SPECIES_MUDKIP,
    SPECIES_PHANPY,
    SPECIES_PICHU,
    SPECIES_SKITTY,
    SPECIES_TREECKO,
    SPECIES_TYROGUE,
    SPECIES_ZIGZAGOON,
};

const u16 sGenericSpecies[] =
{
    SPECIES_BIDOOF,
    SPECIES_BUNNELBY,
    SPECIES_HOOTHOOT,
    SPECIES_MILTANK,
    SPECIES_PATRAT,
    SPECIES_PIDGEY,
    SPECIES_PIDOVE,
    SPECIES_PIKACHU,
    SPECIES_RATTATA,
    SPECIES_SENTRET,
    SPECIES_SHUCKLE,
    SPECIES_SKWOVET,
    SPECIES_SPEAROW,
    SPECIES_STARLY,
    SPECIES_TAILLOW,
    SPECIES_WURMPLE,
    SPECIES_YUNGOOS,
    SPECIES_ZIGZAGOON,
};"
QNNi4x99,Bash Rumble downloader,bobdodds,Bash,Friday 14th of July 2023 04:54:36 PM CDT,"rumble-dl() {
 [ -n ""$1"" ] && for s in $*
  do url=`wget -O- $s | sed -n -E 's/^.*embedUrl...([^""]+).*$/\1/p'`
  if [ -n ""$url"" ]
   then htmlpage=${s##*/}
   basename=${htmlpage%.*}
   echo htmlpage\=$htmlpage basename\=$basename
   indirectID=${basename%%-*}
   directID=`youtube-dl --get-id $url`
   echo indirectID\=$indirectID directID\=$directID
   [ -f ""$directID.mp4"" ] && rm $directID.mp4 && rm ${directID}.mp4
   [ -f ""${basename}_${directID}.mp4"" ] && mv ${basename}_${directID}.mp4 ${basename}_${directID}.mp4.bak
   youtube-dl --merge-output-format mp4 --recode-video mp4 --id $url
   [ -s ""${directID}.mp4"" ] && mv ${directID}.mp4 ${basename}_${directID}.mp4
   [ -s ""${basename}_${directID}.mp4"" ] && [ -f ""${basename}_${directID}.mp4.bak"" ] && rm ${basename}_${directID}.mp4.bak 
   [ -s ""${basename}_${directID}.mp4.bak"" ] && mv ${basename}_${directID}.mp4.bak ${basename}_${directID}.mp4
  fi
 done
}"
LdzDVERU,Untitled,xvl6e8eds,Bash,Friday 14th of July 2023 04:43:42 PM CDT,"#!/bin/bash
# Do not forget to give permission to the file with this command: chmod u+x FILE_NAME

declare -a url_addresses=(www.sdarot.tw sdarot.tw static.sdarot.tw sheldon.sdarot.tw specter.sdarot.tw albus.sdarot.tw harry.sdarot.tw s01.sdarot.tw sratim.tv www.sratim.tv static.sratim.tv s1.sratim.tv s2.sratim.tv api.sratim.tv)
for i in ""${!url_addresses[@]}""
do
	wget https://iplookup.flagfox.net/\?host\=${url_addresses[i]} -O flagfox.html -q --wait=1
	ip_address=$(egrep ""[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"" flagfox.html -o -m 1)
	if [[ ${#ip_address} -gt 6 ]]
	then
		answer=$(ping ${ip_address} -c 1 | egrep ""[0-9] packets received"" -o | egrep ""[0-9]"" -o);
		if [[ $answer = ""1"" ]]; then echo -n ""[OK] ""; else echo -n ""[FAILED] ""; fi;
		echo ${url_addresses[i]} ${ip_address};
	else
		echo ""[FAILED] ${url_addresses[i]}""
	fi
done
rm flagfox.html


"
zPtk62cY,MegaReactorController,Shterman,Lua,Friday 14th of July 2023 04:40:42 PM CDT,"local sleepTimer = 0.5

local heatRedstone = true
local batteryRedstone = false

while true do
    if (heatRedstone or batteryRedstone) then
        redstone.setOutput(""bottom"", false)
        print(""Reactor Deactivated"")
    else
        redstone.setOutput(""bottom"", true)
        print(""Reactor Activated"")
    end

    sleep(sleepTimer)
end"
Nx5nPRSe,Linked List,parthosutradhor,C++,Friday 14th of July 2023 04:37:29 PM CDT,"#include<bits/stdc++.h>
#include <windows.h>
using namespace std;
typedef struct node Node;

typedef struct node {
	int value;
	Node* next;
};

Node* create_node(int, Node*);
void push_front(Node*&, int);
void push_back(Node*&, int);
int insert_node(Node*&, int, int);
int pop_front(Node*&);
int pop_back(Node*&);
int delete_node(Node*&, int);
void print_list(Node*);

int main()
{
	Node* head = NULL;
	char c, c1;
	int x, i, j, m;
	while (true) {
		cout << ""Input '1' to push front"" << endl;
		cout << ""Input '2' to push back"" << endl;
		cout << ""Input '3' to insert at any index"" << endl;
		cout << ""Input '4' to pop front"" << endl;
		cout << ""Input '5' to pop back"" << endl;
		cout << ""Input '6' to delete at any index"" << endl;
		cout << ""Input 'X' to exit from the menu"" << endl;
		cout << endl << ""Enter your Choice: "";
		cin >> c;
		if (c == '1') {
			cout << endl << ""Enter the integer to push front: "";
			cin >> x;
			push_front(head, x);
			cout << endl << ""Pushing ""<< x <<"" at front"";
			for (j = 0; j < 5; j++) {
				Sleep(100);
				cout << ""."";
			}
			cout << endl;
			print_list(head);
		}
		else if (c == '2') {
			cout << endl << ""Enter the integer to push back: "";
			cin >> x;
			push_back(head, x);
			cout << endl << ""Pushing "" << x << "" at back"";
			for (j = 0; j < 5; j++) {
				Sleep(100);
				cout << ""."";
			}
			cout << endl;
			print_list(head);
		}
		else if (c == '3') {
			cout << endl << ""Enter the integer to insert: "";
			cin >> x;
			cout << endl << ""Enter the index position: "";
			cin >> i;
			m = insert_node(head, x, i);
			if (m) {
				cout << endl << ""Inserting "" << x << "" at index "" << i;
				for (j = 0; j < 5; j++) {
					Sleep(100);
					cout << ""."";
				}
			}
			cout << endl;
			print_list(head);
		}
		else if (c == '4') {
			cout << endl << ""Are you Sure to pop from front? Enter (Y/N) : "";
			cin >> c1;
			if (c1 == 'y' || c1 == 'Y') {
				m = pop_front(head);
				if (m) {
					cout << endl << ""Poping from front"";
					for (j = 0; j < 5; j++) {
						Sleep(100);
						cout << ""."";
					}
				}
				cout << endl;
			}
			else {
				cout << endl << ""Poping terminating"";
				for (j = 0; j < 5; j++) {
					Sleep(100);
					cout << ""."";
				}
				cout << endl;
			}
			print_list(head);
		}
		else if (c == '5') {
			cout << endl << ""Are you Sure to pop from back? Enter (Y/N) : "";
			cin >> c1;
			if (c1 == 'y' || c1 == 'Y') {
				m = pop_back(head);
				if (m) {
					cout << endl << ""Poping from back"";
					for (j = 0; j < 5; j++) {
						Sleep(100);
						cout << ""."";
					}
				}
				cout << endl;
			}
			else {
				cout << endl << ""Poping terminating"";
				for (j = 0; j < 5; j++) {
					Sleep(100);
					cout << ""."";
				}
				cout << endl;
			}
			print_list(head);
		}
		else if (c == '6') {
			cout << endl << ""Are you Sure to pop from back? Enter (Y/N) : "";
			cin >> c1;
			if (c1 == 'y' || c1 == 'Y') {
				cout << endl << ""Enter the index to delete from : "";
				cin >> i;
				m = delete_node(head, i);
				if (m) {
					cout << endl << ""Deteling at index "" << i;
					for (j = 0; j < 5; j++) {
						Sleep(100);
						cout << ""."";
					}
				}
				cout << endl;
			}
			else {
				cout << endl << ""Deletion terminating"";
				for (j = 0; j < 5; j++) {
					Sleep(100);
					cout << ""."";
				}
				cout << endl;
			}
			print_list(head);
		}
		else if (c == 'X') {
			cout << endl << ""Exitting"";
			for (j = 0; j < 5; j++) {
				Sleep(300);
				cout << ""."";
			}
			cout << endl;
			break;
		}
		else {
			cout << endl << ""Invalid Input. Try again."" << endl << endl;
		}
	}

	return 0;
}

Node* create_node(int value, Node* next) {
	Node* new_node = (Node*)malloc(sizeof(Node));
	if (new_node == NULL) {
		cout << ""\nMemory Allocation Failed."" << endl;
		return NULL;
	}
	new_node->value = value;
	new_node->next = next;
	return new_node;
}

void push_front(Node*& head, int value) {
	Node* new_node = create_node(value, NULL);
	if (new_node == NULL) {
		cout << ""\nFailed to pop front."" << endl;
		return;
	}
	if (head == NULL) {
		head = new_node;
		return;
	}
	Node* tmp = head;
	head = new_node;
	head->next = tmp;
}

void push_back(Node*& head, int value) {
	Node* new_node = create_node(value, NULL);
	if (new_node == NULL) {
		cout << ""\nFailed to pop pack."" << endl;
		return;
	}
	if (head == NULL) {
		head = new_node;
		return;
	}
	Node* tmp = head;
	while (tmp->next) {
		tmp = tmp->next;
	}
	tmp->next = new_node;
}

int insert_node(Node*& head, int value, int index) {
	if (index == 0) {
		push_front(head, value);
		return 1;
	}
	if (head == NULL) {
		cout << ""\nHead is NUll. Failed to insert node at index "" << index << endl;
		return 0;
	}
	int c = 1;
	Node* tmp = head;
	while (tmp->next && c < index) {
		tmp = tmp->next;
		c++;
	}
	if (c < index) {
		cout << ""\nList is too short to insert node at index "" << index << endl;
		return 0;
	}
	Node* new_node = create_node(value, NULL);
	if (new_node == NULL) {
		cout << ""\nFailed to insert node at index "" << index << endl;
		return 0;
	}
	Node* tmp2 = tmp->next;
	tmp->next = new_node;
	new_node->next = tmp2;
	return 1;
}

int pop_front(Node*& head) {
	if (head == NULL) {
		cout << ""\nList is empty. Failed to pop at front."" << endl;
		return 0;
	}
	head = head->next;
	return 1;
}

int pop_back(Node*& head) {
	if (head == NULL) {
		cout << ""\nList is empty. Failed to pop at end."" << endl;
		return 0;
	}
	if (head->next == NULL) {
		head = NULL;
		return 1;
	}
	Node* tmp = head;
	while ((tmp->next)->next) {
		tmp = tmp->next;
	}
	tmp->next = NULL;
	return 1;
}

int delete_node(Node*& head, int index) {
	int m;
	if (head == NULL) {
		cout << ""\nList is empty. Failed to delete node at index "" << index << endl;
		return 0;
	}
	if (index == 0) {
		m = pop_front(head);
		return m;
	}
	Node* tmp = head;
	if (tmp->next == NULL) {
		cout << ""\nList is too short to delete node at index "" << index << endl;
		return 0;
	}
	int c = 1;
	while ((tmp->next)->next && c < index) {
		tmp = tmp->next;
		c++;
	}
	if (c < index) {
		cout << ""\nList is too short to delete node at index "" << index << endl;
		return 0;
	}
	tmp->next = (tmp->next)->next;
	return 1;
}

void print_list(Node* head) {
	int j;
	cout << endl << ""Printing List"";
	for (j = 0; j < 3; j++) {
		Sleep(100);
		cout << ""."";
	}
	cout << endl;
	while (head) {
		cout << head->value << "" "";
		head = head->next;
		Sleep(500);
	}
	cout << endl << endl;
}

"
Ajf2zbkw,Bulk Pastebin download,jBlume,Lua,Friday 14th of July 2023 03:40:35 PM CDT,"--Should download and save the 2x2 tree cut program
fs.delete(""cut"")
shell.run(""pastebin get DT57bVku cut"")

--Step 1: Name that Pokémon 

--Step 2:Select number for name from available list

--Step 3: Label and download attached pastebin programs"
inFbvrvt,1917. Руины титанов: убийственная точность,AbubiBoba,C++,Friday 14th of July 2023 03:09:30 PM CDT,"#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <cmath>
#include <string>
#include <assert.h>
#include <bitset>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <cstring>

#define ret return
#define endl '\n'
#define vec vector
#define all(x) x.begin(), x.end()
#define get_bit(n, i) (1 & (n >> i))
#define sz(x) (long long)(x.size())
#define forik(x) for (int i = 0; i < x; ++i)
#define uint unsigned int

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

using namespace std;

const ld eps = 1e-6l;
const int INF = 1e8;

void input() {
    if (0)
        setlocale(LC_ALL, ""Russian"");
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout << fixed;
    cout << setprecision(6);
    //freopen(""input.in"", ""r"", stdin);
    //freopen(""output.out"", ""w"", stdout);

}
void solve();
void precalc();

signed main()
{
    input();

    int multitest = 1;
    //cin >> multitest;
    precalc();
    while (multitest--)
        solve();

}
void precalc() {

}
#define int long long
void solve() {
    
    int n, p;
    cin >> n >> p;
    vec<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    
    sort(all(a)); 
    ll max_count = 0;
    int mx_power = 0;
    for (int power = a[0]; power <= a[a.size() - 1]; ++power) {
        ll k = 0;
        for (int i = 0; i < n; ++i)
            if (a[i] == power)
                ++k;
        if (k * power <= p) {
            mx_power = power;
            max_count += k;
        }
        else
            break;
    }

    int hod = 0;
    int prev = 0;
    while (1) {
        if (prev == mx_power)
            break;
        ++hod;
        int l = prev + 1, r = mx_power, ans = prev + 1;
        while (l <= r) {
            int c = (l + r) / 2;
            int cnt = 0;
            for (int i = 0; i < n; ++i)
                if (a[i] > prev && a[i] <= c)
                    ++cnt;
            ll splash = (ll)cnt * (ll)c;
            if (splash <= p) {
                l = c + 1;
                ans = c;
            }
            else
                r = c - 1;
        }
        prev = ans;
    }
    cout << max_count << ' ' << hod;
}"
ZDDuTus9,Untitled,klebermo,Java,Friday 14th of July 2023 02:58:51 PM CDT,"package servlet;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.security.PublicKey;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import util.RSASignature;

@WebServlet(name = ""Login"", urlPatterns = ""/login"")
public class Login extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String token = request.getParameter(""token"");
        PrintWriter out = response.getWriter();

        if (token == null) {
            out.println(""fail - no token"");
            out.flush();
            return;
        }

        InputStream publicKeyInputStream = getClass().getClassLoader().getResourceAsStream(""key_rsa.pub"");
        if (publicKeyInputStream == null) {
            out.println(""fail - no public key"");
            out.flush();
            return;
        }
        String publicKeyString = new String(publicKeyInputStream.readAllBytes(), StandardCharsets.UTF_8);

        try {
            PublicKey publicKey = util.RSAKeyGenerator.getPublicKey(publicKeyString);
            boolean isVerified = RSASignature.verify(request.getRemoteAddr(), token, publicKey);

            if(isVerified) {
                UUID uuid = UUID.randomUUID();
                String plainUUID = uuid.toString();

                Cookie cookie = new Cookie(""uuid"", plainUUID);
                cookie.setHttpOnly(true);
                cookie.setSecure(true);
                cookie.setPath(""/"");
                response.addCookie(cookie);

                request.getSession().setAttribute(""uuid"", uuid);
                out.println("""");
                out.flush();
                return;
            } else {
                out.println(""fail - invalid token"");
                out.flush();
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
            out.println(""fail - "" + e.getLocalizedMessage());
            out.flush();
        }
    }
}
"
rLD7nHSQ,Untitled,klebermo,JavaScript,Friday 14th of July 2023 02:53:43 PM CDT,"function submit() {
    var form = document.querySelector(""form"");
    var plainText = document.querySelector(""input[name=ip]"").value;

    var fileInput = document.createElement('input');
    fileInput.type = 'file';

    fileInput.addEventListener('change', function (e) {
        var file = e.target.files[0];
        var reader = new FileReader();

        reader.onloadend = function (e) {
            var privateKey = e.target.result;

            var encryptor = new JSEncrypt();
            encryptor.setPrivateKey(privateKey);
            var signedText = encryptor.sign(plainText, SHA256, ""sha256"");

            const params = new URLSearchParams();
            params.append('token', signedText);

            fetch(form.action, {
                method: form.method,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: params
            })
            .then(response => {
                var main = document.querySelector(""main"");
                var p = document.createElement(""h1"");
                p.textContent = response.text();
                main.appendChild(p);
                //window.location.href = ""http://localhost/inbox/home"";
            })
            .catch(error => {
                var main = document.querySelector(""main"");
                var p = document.createElement(""h1"");
                p.textContent = error.text();
                main.appendChild(p);
            });            
        };

        reader.readAsText(file);
    });

    fileInput.click();
}

function SHA256(string) {
    function rotr(x, n) {
        return (x >>> n) | (x << (32 - n));
    }

    function sha256(message) {
        const words = [];
        let h0 = 0x6a09e667;
        let h1 = 0xbb67ae85;
        let h2 = 0x3c6ef372;
        let h3 = 0xa54ff53a;
        let h4 = 0x510e527f;
        let h5 = 0x9b05688c;
        let h6 = 0x1f83d9ab;
        let h7 = 0x5be0cd19;

        const k = [
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ];

        message += String.fromCharCode(0x80);
        const originalLength = message.length * 8;
        let paddingBytes = 64 - ((message.length + 8) % 64);
        paddingBytes = paddingBytes === 64 ? 0 : paddingBytes;

        for (let i = 0; i < paddingBytes; i++) {
            message += String.fromCharCode(0x00);
        }

        message += String.fromCharCode((originalLength >>> 56) & 0xff);
        message += String.fromCharCode((originalLength >>> 48) & 0xff);
        message += String.fromCharCode((originalLength >>> 40) & 0xff);
        message += String.fromCharCode((originalLength >>> 32) & 0xff);
        message += String.fromCharCode((originalLength >>> 24) & 0xff);
        message += String.fromCharCode((originalLength >>> 16) & 0xff);
        message += String.fromCharCode((originalLength >>> 8) & 0xff);
        message += String.fromCharCode(originalLength & 0xff);

        for (let i = 0; i < message.length; i += 64) {
            const chunk = message.slice(i, i + 64);
            const w = [];

            for (let j = 0; j < 16; j++) {
                w[j] = ((chunk.charCodeAt(j * 4) & 0xff) << 24) |
                ((chunk.charCodeAt(j * 4 + 1) & 0xff) << 16) |
                ((chunk.charCodeAt(j * 4 + 2) & 0xff) << 8) |
                (chunk.charCodeAt(j * 4 + 3) & 0xff);
            }

            for (let j = 16; j < 64; j++) {
                const s0 = rotr(w[j - 15], 7) ^ rotr(w[j - 15], 18) ^ (w[j - 15] >>> 3);
                const s1 = rotr(w[j - 2], 17) ^ rotr(w[j - 2], 19) ^ (w[j - 2] >>> 10);
                w[j] = (w[j - 16] + s0 + w[j - 7] + s1) & 0xffffffff;
            }

            let [a, b, c, d, e, f, g, h] = [h0, h1, h2, h3, h4, h5, h6, h7];

            for (let j = 0; j < 64; j++) {
                const s1 = rotr(e, 6) ^ rotr(e, 11) ^ rotr(e, 25);
                const ch = (e & f) ^ (~e & g);
                const temp1 = (h + s1 + ch + k[j] + w[j]) & 0xffffffff;
                const s0 = rotr(a, 2) ^ rotr(a, 13) ^ rotr(a, 22);
                const maj = (a & b) ^ (a & c) ^ (b & c);
                const temp2 = (s0 + maj) & 0xffffffff;

                h = g;
                g = f;
                f = e;
                e = (d + temp1) & 0xffffffff;
                d = c;
                c = b;
                b = a;
                a = (temp1 + temp2) & 0xffffffff;
            }

            h0 = (h0 + a) & 0xffffffff;
            h1 = (h1 + b) & 0xffffffff;
            h2 = (h2 + c) & 0xffffffff;
            h3 = (h3 + d) & 0xffffffff;
            h4 = (h4 + e) & 0xffffffff;
            h5 = (h5 + f) & 0xffffffff;
            h6 = (h6 + g) & 0xffffffff;
            h7 = (h7 + h) & 0xffffffff;
        }

        const hash = [
        (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, h0 & 0xff,
        (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, h1 & 0xff,
        (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, h2 & 0xff,
        (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, h3 & 0xff,
        (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, h4 & 0xff,
        (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, h5 & 0xff,
        (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, h6 & 0xff,
        (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, h7 & 0xff
        ];

        let hashHex = '';

        for (let i = 0; i < hash.length; i++) {
            const value = hash[i];
            const hex = (value < 16 ? '0' : '') + value.toString(16);
            hashHex += hex;
        }

        return hashHex;
    }

    return sha256(string);
}
"
6BeYSNkY,zzz Loading GUI,crehdit,Lua,Friday 14th of July 2023 02:27:41 PM CDT,"local blur = Instance.new(""BlurEffect"", game.Lighting)
blur.Size = 0
local ScreenGui = Instance.new(""ScreenGui"")
local ImageLabel = Instance.new(""ImageLabel"")
ScreenGui.Parent = game.CoreGui
ImageLabel.Parent = ScreenGui
ImageLabel.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(0.5, -(700 / 2), 0.5, -(700 / 2))
ImageLabel.Rotation = 0
ImageLabel.Size = UDim2.new(0, 700,0, 700)
ImageLabel.Image = ""rbxassetid://14047979592""
ImageLabel.ImageTransparency = 1
 
for i = 1, 50, 2 do
    blur.Size = i
    ImageLabel.ImageTransparency = ImageLabel.ImageTransparency - 0.1
    wait()
end
wait(1)
 
for i = 1, 50, 2 do
    blur.Size = 50 - i
    ImageLabel.ImageTransparency = ImageLabel.ImageTransparency + 0.1
    wait()
end

blur:Destroy()
ScreenGui:Destroy()"
3ir0jaTa,Twinkie's Docking Bay v1.2,LtTwinkie,C#,Friday 14th of July 2023 01:45:58 PM CDT,"/*
 * Twinkie Industries™ Automation Presents
 * Docking Bay v1.2
 * 
 * 
 * This script will allow you to set up docking bays with vents and lights that will operate properly with a single button press or sensor trigger.
 * 
 * On the vent and any lights add the following to CustomData
 * [DockingBay]
 * Name=dockingbayname
 * 
 * Also add it to the doors but include if the door is the outer bay door or not. Other doors will be closed and disabled while the outer doors are open.
 * IsOuterDoor=true
 * 
 * When you run the script using the name of the docking bay as the argument it will properly cycle the bay.
 */

// SETTINGS ---------------------------------------------------------------------------------------------------

// If you set a value for GRID_NAME, each block will require it in the name. This is used to prevent blocks from
// other grids being added.
public const string GRID_NAME = """";

// This timeout prevents the docking bay getting stuck because the vent can't depressurize. For example, if there is
// no free space in an oxygen tank or no oxygen tank connected the vent won't be able to remove the air.
public const double VENT_TIMEOUT_SECONDS = 20.0;

// Enable or disable docking bays closing on their own after a delay
public const bool AUTO_CLOSE = true;

// How long to delay closing docking bays
public const double CLOSE_DELAY_SECONDS = 30.0;

// END SETTINGS. DO NOT EDIT BELOW ----------------------------------------------------------------------------

private Dictionary<string, DockingBay> _bays = new Dictionary<string, DockingBay>();
private List<string> _invalidBays = new List<string>();

public Program()
{
    if (!string.IsNullOrWhiteSpace(Storage))
        Load();

    Refresh();

    Runtime.UpdateFrequency = UpdateFrequency.Update100;
}

public void Main(string argument, UpdateType updateSource)
{
    if (_invalidBays.Count != 0)
    {
        Echo(""Invalid docking bays:"");
        foreach (string bay in _invalidBays)
        {
            Echo(bay);
        }
    }

    if (string.IsNullOrWhiteSpace(argument))
    {
        // Regular update loop

        bool runFast = false;
        foreach (KeyValuePair<string, DockingBay> bay in _bays)
        {
            bay.Value.Update(Echo, bay.Key);

            if (bay.Value.State != DockingBay.BayState.Idle)
                runFast = true;
        }

        Runtime.UpdateFrequency = runFast ? UpdateFrequency.Update10 : UpdateFrequency.Update100;
    }
    else if (StringUtil.Equality(argument, ""refresh""))
    {
        // Refresh command
        Refresh();
    }
    else if (_bays.ContainsKey(argument.ToLowerInvariant()))
    {
        // Cycle command
        Echo($""Cycling docking bay: {argument}"");
        _bays[argument.ToLowerInvariant()].Cycle();
        Save();

        Runtime.UpdateFrequency = UpdateFrequency.Update10;
    }
    else
    {
        Echo($""Unknown argument {argument}"");
    }
}

private void Refresh()
{
    foreach (var bay in _bays.Values)
    {
        bay.Clear();
    }

    var blocks = new List<IMyTerminalBlock>();
    GridTerminalSystem.GetBlocksOfType(blocks,
        block => StringUtil.Contains(block.CustomName, GRID_NAME) && CustomData.HasSection(block));

    foreach (var block in blocks)
    {
        CustomData data;
        if (!CustomData.TryGetData(block, Echo, out data))
            continue;

        string name = data.Name.ToLowerInvariant();

        DockingBay bay;
        if (!_bays.TryGetValue(name, out bay))
        {
            _bays[name] = bay = new DockingBay();
        }

        bay.Add(block, data);
    }

    foreach (KeyValuePair<string, DockingBay> bay in _bays)
    {
        if (!bay.Value.IsValid)
        {
            _invalidBays.Add(bay.Key);
            _bays.Remove(bay.Key);
        }
    }

    foreach (KeyValuePair<string, DockingBay> bay in _bays)
    {
        Echo($""Resettings docking bay: {bay.Key}"");
        bay.Value.Reset(Echo);
    }

    Save();
}

public void Save()
{
    var sb = new StringBuilder();
    sb.Append($""{_bays.Count};"");
    foreach (KeyValuePair<string, DockingBay> bay in _bays)
    {
        sb.Append($""{bay.Key};"");
        sb.Append($""{bay.Value.Open};"");
    }
    Storage = sb.ToString();
}

private void Load()
{
    string[] s = Storage.Split(';');
    int pos = 0;

    int count = int.Parse(s[pos++]);
    for (int i = 0; i < count; i++)
    {
        string name = s[pos++];
        bool isOpen = bool.Parse(s[pos++]);

        _bays.Add(name, new DockingBay(isOpen));
    }

    Storage = null;
}

public class CustomData
{
    private const string DOCKING_BAY = ""DockingBay"";
    private const string NAME = ""Name"";
    private const string IS_OUTER_DOOR = ""IsOuterDoor"";

    public MyIni Ini { get; } = new MyIni();

    public string Name => Get(NAME).ToString();
    public bool IsOuterDoor => Get(IS_OUTER_DOOR).ToBoolean();

    public CustomData(IMyTerminalBlock block)
    {
        MyIniParseResult parseResult;
        if (!Ini.TryParse(block.CustomData, out parseResult))
        {
            throw new Exception($""Failed to parse ini {parseResult}"");
        }

        Check(NAME);

        if (block is IMyDoor)
            Check(IS_OUTER_DOOR);
    }

    public static bool TryGetData(IMyTerminalBlock block, Action<string> echo, out CustomData data)
    {
        try
        {
            data = new CustomData(block);
        }
        catch (Exception e)
        {
            echo?.Invoke(e.Message);
            data = null;
            return false;
        }

        return true;
    }

    public static bool HasSection(IMyTerminalBlock block)
    {
        return MyIni.HasSection(block.CustomData, DOCKING_BAY);
    }

    public MyIniValue Get(string key) => Ini.Get(DOCKING_BAY, key);

    private void Check(string entry)
    {
        var nameResult = Get(entry);
        if (nameResult.IsEmpty)
        {
            string message = $""Can't find {entry} in CustomData"";
            throw new Exception(message);
        }
    }
}

public class DockingBay
{
    private DateTime _nextAction;

    public enum BayState
    {
        /// <summary> Setting doors, vents, and lights to the current bay condition </summary>
        Resetting,

        /// <summary> Nothing happening </summary>
        Idle,

        /// <summary> Waiting for the door to close </summary>
        Closing,

        /// <summary> Waiting for venting </summary>
        Venting,

        /// <summary> Waiting for the door to open </summary>
        Opening,

        /// <summary> Waiting to close the docking bay </summary>
        Waiting,
    }

    public BayState State { get; private set; }

    private static readonly BayState[] UNINTERRUPTIBLE_STATES =
    {
        BayState.Resetting,
        BayState.Closing,
        BayState.Venting,
        BayState.Opening,
    };

    public bool Open { get; private set; }
    private List<Door> OuterDoors { get; } = new List<Door>();
    private List<Door> InnerDoors { get; } = new List<Door>();
    private List<Vent> Vents { get; } = new List<Vent>();
    private List<Light> Lights { get; } = new List<Light>();

    public bool IsValid => OuterDoors.Count != 0 && Vents.Count != 0;

    public DockingBay() { }

    public DockingBay(bool open)
    {
        Open = open;
    }

    public void Update(Action<string> echo, string name)
    {
        if (State == BayState.Idle)
        {
            return;
        }

        // Un-timed updates
        bool isTimedOut = DateTime.UtcNow > _nextAction;
        if (State == BayState.Venting)
        {
            if (Open && Vent.AllDepressurized(Vents) ||
                !Open && Vent.AllPressurized(Vents) ||
                isTimedOut) // timeout
            {
                OpenDoors();
                RefreshLights();

                string bayState = Open ? ""Opening"" : ""Unlocking"";
                string condition = isTimedOut ? "" (Timed Out)"" : """";
                echo($""{bayState} docking bay: {name}{condition}"");

                State = BayState.Opening;
            }

            return;
        }
        else if (State == BayState.Resetting)
        {
            if (Open && Vent.AllDepressurized(Vents) ||
                !Open && Vent.AllPressurized(Vents) ||
                isTimedOut)
            {
                PowerOff();
                echo($""Docking bay reset: {name}"");
                State = BayState.Idle;
            }
        }

        if (DateTime.UtcNow < _nextAction)
            return;

        // Timed updates
        switch (State)
        {
            case BayState.Closing:
                ActivateVents();
                RefreshLights();
                PowerOff();
                echo($""Docking bay venting: {name}"");
                State = BayState.Venting;
                break;

            case BayState.Opening:
                RefreshLights();
                PowerOff();
                string bayState = Open ? ""opened"" : ""closed"";
                echo($""Docking bay {bayState}: {name}"");
                if (Open && AUTO_CLOSE)
                {
                    Wait();
                    echo($""Docking bay waiting to close at {_nextAction:T}"");
                    State = BayState.Waiting;
                    break;
                }
                echo(""Docking bay idle"");
                State = BayState.Idle;
                break;

            case BayState.Waiting:
                Cycle();
                break;
        }
    }

    public void Cycle()
    {
        if (UNINTERRUPTIBLE_STATES.Contains(State))
            return;

        Open = !Open;

        CloseDoors();
        RefreshLights();
        State = BayState.Closing;
    }

    public void Add(IMyTerminalBlock block, CustomData data)
    {
        if (block is IMyDoor)
        {
            if (data.IsOuterDoor)
            {
                OuterDoors.Add(new Door(block as IMyDoor));
            }
            else
            {
                InnerDoors.Add(new Door(block as IMyDoor));
            }
        }
        else if (block is IMyAirVent)
        {
            Vents.Add(new Vent(block as IMyAirVent));
        }
        else if (block is IMyLightingBlock)
        {
            Lights.Add(new Light(block as IMyLightingBlock));
        }
        else
        {
            throw new Exception($""Unknown block type {block.GetType()}"");
        }
    }

    public void Reset(Action<string> echo)
    {
        DateTime ventTime = TimeUtil.OffsetSeconds(VENT_TIMEOUT_SECONDS);
        if (Open)
        {
            echo(""Bay is open"");
            DateTime closed = Door.CloseDoors(InnerDoors);
            _nextAction = ventTime + TimeUtil.TimeSpanFromUtcNow(closed);
        }
        else
        {
            echo(""Bay is closed"");
            DateTime closed = Door.CloseDoors(OuterDoors);
            _nextAction = ventTime + TimeUtil.TimeSpanFromUtcNow(closed);
        }
        OpenDoors();
        Vent.SetDepressurize(Vents, Open);
        Light.SetEnabled(Lights, Open);
        State = BayState.Resetting;
    }

    public void Clear()
    {
        InnerDoors.Clear();
        OuterDoors.Clear();
        Vents.Clear();
        Lights.Clear();
    }

    private void CloseDoors()
    {
        _nextAction = Door.CloseDoors(Open ? InnerDoors : OuterDoors);
    }

    private void ActivateVents()
    {
        Vent.SetDepressurize(Vents, Open);
        _nextAction = TimeUtil.OffsetSeconds(VENT_TIMEOUT_SECONDS);
    }

    private void OpenDoors()
    {
        if (Open)
        {
            _nextAction = Door.OpenDoors(OuterDoors);
        }
        else
        {
            Door.SetEnabled(InnerDoors, true); // only enable, not open
        }
    }

    private void PowerOff()
    {
        Door.SetEnabled(OuterDoors, false);

        if (Open)
        {
            Door.SetEnabled(InnerDoors, false);
        }
    }

    private void RefreshLights()
    {
        bool turnOnLights = Vents[0].Status != VentStatus.Pressurized || Vents[0].Depressurize;
        Light.SetEnabled(Lights, turnOnLights);
    }

    private void Wait()
    {
        _nextAction = TimeUtil.OffsetSeconds(CLOSE_DELAY_SECONDS);
    }
}

// Mixin
public class Door
{
    public const double DELAY_STANDARD_MILLIS = 1.0;
    public const double DELAY_HANGAR_MILLIS = 10.0;
    private double _customDelay;

    private bool _isHangar;

    public IMyDoor Block { get; }

    public bool Enabled { get { return Block.Enabled; } set { Block.Enabled = value; } }
    public DoorStatus Status => Block.Status;
    public float OpenRatio => Block.OpenRatio;
    public bool IsOpen => Block.Status == DoorStatus.Open;
    public bool IsClosed => Block.Status == DoorStatus.Closed;
    public bool IsTransitioning => !IsOpen && !IsClosed;

    public Door(IMyDoor block, double customDelay = 0.0)
    {
        Block = block;
        _customDelay = customDelay;
        _isHangar = block is IMyAirtightHangarDoor;
    }

    public static void SetEnabled(List<Door> doors, bool value)
    {
        foreach (Door door in doors)
        {
            door.Enabled = value;
        }
    }

    public static bool AnyOpened(List<Door> doors)
    {
        foreach (var door in doors)
        {
            if (door.Status == DoorStatus.Open)
                return true;
        }
        return false;
    }

    public static bool AnyClosed(List<Door> doors)
    {
        foreach (var door in doors)
        {
            if (door.Status == DoorStatus.Closed)
                return true;
        }
        return false;
    }

    public static DateTime OpenDoors(List<Door> doors)
    {
        DateTime maxDelay = DateTime.MinValue;
        foreach (Door door in doors)
        {
            maxDelay = Max(maxDelay, door.OpenDoor());
        }

        return maxDelay;
    }

    public static DateTime CloseDoors(List<Door> doors)
    {
        DateTime maxDelay = DateTime.MinValue;
        foreach (Door door in doors)
        {
            maxDelay = Max(maxDelay, door.CloseDoor());
        }

        return maxDelay;
    }

    public DateTime OpenDoor()
    {
        if (Block.Status == DoorStatus.Open)
            return DateTime.MinValue;

        Block.Enabled = true;
        Block.OpenDoor();
        return Delay();

    }

    public DateTime CloseDoor()
    {
        if (Block.Status == DoorStatus.Closed)
            return DateTime.MinValue;

        Block.Enabled = true;
        Block.CloseDoor();
        return Delay();

    }

    public DateTime ToggleDoor()
    {
        return Block.Status == DoorStatus.Closed || Block.Status == DoorStatus.Closing
                ? OpenDoor()
                : CloseDoor();
    }

    private DateTime Delay()
    {
        double standardDelay = _isHangar ? DELAY_HANGAR_MILLIS : DELAY_STANDARD_MILLIS;
        double delay = _customDelay != 0.0 ? _customDelay : standardDelay;
        return DateTime.UtcNow + TimeSpan.FromSeconds(delay);
    }

    private static DateTime Max(DateTime a, DateTime b)
    {
        return a > b ? a : b;
    }
}

// Mixin
public class Light
{
    public static readonly Color SODIUM = new Color(255, 183, 76);
    public static readonly Color INCANDESCENT = new Color(255, 255, 210);
    public static readonly Color FLORESCENT_WARM = new Color(230, 255, 255);
    public static readonly Color FLORESCENT_COOL = new Color(175, 215, 255);

    public IMyLightingBlock Block { get; private set; }

    public bool OriginalEnabled { get; private set; }
    public float OriginalRadius { get; private set; }
    public float OriginalIntensity { get; private set; }
    public float OriginalFalloff { get; private set; }
    public float OriginalBlinkInterval { get; private set; }
    public float OriginalBlinkLength { get; private set; }
    public float OriginalBlinkOffset { get; private set; }
    public Color OriginalColor { get; private set; }

    public bool Enabled { get { return Block.Enabled;} set { Block.Enabled = value; } }
    public float Radius { get { return Block.Radius; } set { Block.Radius = value; } }
    float Intensity { get { return Block.Intensity; } set { Block.Intensity = value; } }
    float Falloff { get { return Block.Falloff; } set { Block.Falloff = value; } }
    float BlinkIntervalSeconds { get { return Block.BlinkIntervalSeconds; } set { Block.BlinkIntervalSeconds = value; } }
    float BlinkLength { get { return Block.BlinkLength; } set { Block.BlinkLength = value; } }
    float BlinkOffset { get { return Block.BlinkOffset; } set { Block.BlinkOffset = value; } }
    Color Color { get { return Block.Color; } set { Block.Color = value; } }

    public Light(IMyLightingBlock block)
    {
        Block = block;
        OriginalEnabled = Block.Enabled;
        OriginalRadius = Block.Radius;
        OriginalIntensity = Block.Intensity;
        OriginalFalloff = Block.Falloff;
        OriginalBlinkInterval = Block.BlinkIntervalSeconds;
        OriginalBlinkLength = Block.BlinkLength;
        OriginalBlinkOffset = Block.BlinkOffset;
        OriginalColor = Block.Color;
    }

    public static void SetEnabled(List<Light> lights, bool value)
    {
        foreach (var light in lights)
        {
            light.Enabled = value;
        }
    }

    public static void SetColor(List<Light> lights, Color color)
    {
        foreach (var light in lights)
        {
            light.Color = color;
        }
    }

    public void Reset()
    {
        ResetEnabled();
        ResetRadius();
        ResetIntensity();
        ResetFalloff();
        ResetBlinkInterval();
        ResetBlinkLength();
        ResetBlinkOffset();
        ResetColor();
    }

    public void ResetEnabled() => Block.Enabled = OriginalEnabled;
    public void ResetRadius() => Block.Radius = OriginalRadius;
    public void ResetIntensity() => Block.Intensity = OriginalIntensity;
    public void ResetFalloff() => Block.Falloff = OriginalFalloff;
    public void ResetBlinkInterval() => Block.BlinkIntervalSeconds = OriginalBlinkInterval;
    public void ResetBlinkLength() => Block.BlinkLength = OriginalBlinkLength;
    public void ResetBlinkOffset() => Block.BlinkOffset = OriginalBlinkOffset;
    public void ResetColor() => Block.Color = OriginalColor;
}

// Mixin
public static class StringUtil
{
    public static bool Contains(string text, string testSequence, bool useInvariant = true)
    {
        return useInvariant
            ? text.ToLowerInvariant().Contains(testSequence.ToLowerInvariant())
            : text.ToLower().Contains(testSequence.ToLower());
    }

    public static bool Equality(string a, string b, bool useInvariant = true)
    {
        return useInvariant
            ? a.ToLowerInvariant() == b.ToLowerInvariant()
            : a.ToLower() == b.ToLower();
    }

    public static bool ContainsKey<T>(Dictionary<string, T> dict, string key)
    {
        if (dict.ContainsKey(key)) return true;
        if (dict.ContainsKey(key.ToLowerInvariant())) return true;
        if (dict.ContainsKey(key.ToLower())) return true;

        return false;
    }

    public static bool TryGetValue<T>(Dictionary<string, T> dict, string key, out T value)
    {
        if (dict.TryGetValue(key, out value)) return true;
        if (dict.TryGetValue(key.ToLowerInvariant(), out value)) return true;
        if (dict.TryGetValue(key.ToLower(), out value)) return true;

        return false;
    }

    public static bool HasSection(IMyTerminalBlock block, string key)
    {
        if (MyIni.HasSection(block.CustomData, key)) return true;
        if (MyIni.HasSection(block.CustomData, key.ToLowerInvariant())) return true;
        if (MyIni.HasSection(block.CustomData, key.ToLower())) return true;

        return false;
    }
}

// Mixin
public static class TimeUtil
{
    public static DateTime OffsetSeconds(double seconds)
    {
        return DateTime.UtcNow +TimeSpan.FromSeconds(seconds);
    }

    public static TimeSpan TimeSpanFromUtcNow(DateTime time)
    {
        if (DateTime.UtcNow > time)
            return TimeSpan.Zero;

        return DateTime.UtcNow - time;
    }
}

// Mixin
public class Vent
{
    private const int DELAY_MILLIS = 2000;

    private int _customDelay;

    public IMyAirVent Block { get; }

    public bool Enabled { get { return Block.Enabled; } set { Block.Enabled = value; } }
    public bool CanPressurize => Block.CanPressurize;
    public float OxygenLevel => Block.GetOxygenLevel();
    public VentStatus Status => Block.Status;
    public bool PressurizationEnabled => Block.PressurizationEnabled;

    public bool Depressurize => Block.Depressurize;

    public bool IsPressurized => Block.Status == VentStatus.Pressurized;
    public bool IsDepressurized => Block.Status == VentStatus.Depressurized;
    public bool IsPressureUncertain => !IsPressurized && !IsDepressurized;

    public Vent(IMyAirVent block, int customDelay = 0)
    {
        Block = block;
        _customDelay = customDelay;
    }

    public static void SetEnabled(List<Door> doors, bool value)
    {
        foreach (Door door in doors)
        {
            door.Enabled = value;
        }
    }

    public static float OxygenLevelMin(List<Vent> vents)
    {
        float level = float.MaxValue;
        foreach (var vent in vents)
        {
            if (vent.OxygenLevel < level)
                level = vent.OxygenLevel;
        }
        return level;
    }

    public static float OxygenLevelMax(List<Vent> vents)
    {
        float level = float.MinValue;
        foreach (var vent in vents)
        {
            if (vent.OxygenLevel > level)
                level = vent.OxygenLevel;
        }
        return level;
    }

    public static float OxygenLevelAve(List<Vent> vents)
    {
        float level = 0f;
        foreach (var vent in vents)
        {
            level += vent.OxygenLevel;
        }
        return level / vents.Count;
    }

    public static bool AnyDepressurizing(List<Vent> vents)
    {
        foreach (var vent in vents)
        {
            if (vent.Depressurize)
                return true;
        }
        return false;
    }

    public static DateTime SetDepressurize(List<Vent> vents, bool value)
    {
        DateTime maxDelay = DateTime.MinValue;
        for (int i = 0; i < vents.Count; i++)
        {
            if (vents[i]?.Block == null)
                continue;

            maxDelay = Max(maxDelay, vents[i].SetDepressurize(value));
        }

        return maxDelay;
    }

    public static bool AllPressurized(List<Vent> vents)
    {
        foreach (var vent in vents)
        {
            if (vent.Status != VentStatus.Pressurized)
                return false;
        }

        return true;
    }

    public static bool AllDepressurized(List<Vent> vents)
    {
        foreach (var vent in vents)
        {
            if (vent.Status != VentStatus.Depressurized)
                return false;
        }

        return true;
    }

    public DateTime SetDepressurize(bool value)
    {
        if (Block.Depressurize == value)
            return DateTime.MinValue;

        Block.Depressurize = value;
        return Delay();

    }

    private DateTime Delay()
    {
        int delay = _customDelay != 0 ? _customDelay : DELAY_MILLIS;
        return DateTime.UtcNow + TimeSpan.FromMilliseconds(delay);
    }

    private static DateTime Max(DateTime a, DateTime b)
    {
        return a > b ? a : b;
    }
}"
bk4ppZZ4,lesson6_322,Petro_zzz,C++,Friday 14th of July 2023 01:30:54 PM CDT,"#include <iostream>
//#include <conio.h>

using namespace std;

void test_system_commands() {
	//cout << ""Hello"" << endl; // в духе С++
	//printf_s(""Hello\n"");   // в духе С
	/*
	char ch;
	cin >> ch;
	*/
	//_getch(); // прочитать символ с консоли без подтверждения Enter-ом
	//getch(); // не безопасная функция

	//system(""calc"");      // Запустить калькулятор.  
	//system(""pause"");     // Остановить процесс по нажатию клавиши
	//system(""timeout 5""); // Остановить процесс по таймеру через 5 сек
	//system(""cls"");         // Очистить консоль
}

double calc_area(double diametr) {
	const double pi = 3.1415926;
	cout << pi * (diametr / 2) * (diametr / 2) << endl;
	return pi * (diametr / 2) * (diametr / 2);
}

void get_pizza() {
	const double diametr_small  = 25;
	const double diametr_medium = 30;
	const double diametr_big  = 35;
	bool h1 = (3*calc_area(diametr_small)) > (1*calc_area(diametr_big));
	cout << ""H1: 3 * s > 1 * b ? "" << h1 << endl;	
 }

bool is_hit(double x, double y) {
	bool h1 = (x >= 1.5) && (x <= 3.5);
	bool h2 = (y >= 0) && (y <= 1.5);

	bool h3 = (x >= 2.4) && (x <= 2.6);
	bool h4 = (y >= 1.5) && (y <= 1.7);

	return (h1 && h2) || (h3 && h4);
}

void shooter() {
	cout << ""    Shooting gallery "" << endl;

	cout << R""(
	0000000000
	0000000000
	0000000000
	000XXXX000
	000XXXX000
	000XXXX000)"" << endl;

	double x = 0, y = 0;
	cout << ""Прицельтесь"" << endl
		<< ""(введите две координаты x от 0 до 5 и y от 0 до 3)\n"";
	cout << ""x: "";
	cin >> x;
	cout << ""y: "";
	cin >> y;

	cout << ""Вы попали в мишень? "";
	if (is_hit(x, y)) {
		cout << ""Бинго!!"" << endl;
	}
	else {
		cout << ""Мимо :( "" << endl;
	}
		
}

int main() {
	setlocale(LC_ALL, ""ru"");
	// cout << R""TTT(  )"" )TTT"";
	//get_pizza();
	shooter();
	
	if (4 != 5) {
		cout << ""Условие истинно! "" << endl;
	} 
	else {
		cout << ""Условие ложно! "" << endl;
	}

	return 0;
}"
25kCiY1Q,WEBNET_5G SMS,Webnetjoao,JSON,Friday 14th of July 2023 12:45:34 PM CDT,"{""SendMessage"":""2"",""MyMessage"":""⚠️ 💥ATENÇÃO💥 (SELECIONE OUTRAS CONEXÃO CASO NÃO PEGAR EM QUAL VOCÊ SELECIONOU, SÃO VÁRIOS PROTOCOLOS DE CONEXÕES! By:João Antônio""}"
7BHwDfxr,Cy Run Running Game,cypherine,Python,Friday 14th of July 2023 12:19:34 PM CDT,"import pygame
from sys import exit
from random import randint

def display_score():
    current_time = int(pygame.time.get_ticks() / 1000)- start_time 
    score_surf = font.render(f'{current_time}',False,('#ffffff'))
    score_rect = score_surf.get_rect(center = (400,50))
    screen.blit(score_surf,score_rect)
    return current_time

def obstacle_movement(obstacle_list):
    if obstacle_list:
        for obstacle_rect in obstacle_list:
            obstacle_rect.x -= 5

            if obstacle_rect.bottom == 315:
                screen.blit(bcat_surf,obstacle_rect)
            else: screen.blit(bat_surf,obstacle_rect)

        obstacle_list = [obstacle for obstacle in obstacle_list if obstacle.x > -100]

        return obstacle_list
    else: return []

def collisions(player, obstacles):
    if obstacles:
        for obstacle_rect in obstacles:
            if player.colliderect(obstacle_rect):
                return False
    return True

def player_animation(): 
    global player_surf, player_index
    
    if player_rect.bottom < 250:
        player_surf = player_jump
    else:
        player_index += 0.1
        if player_index>= len(player_walk):player_index = 0
        player_surf = player_walk[int(player_index)]
        player_surf = pygame.transform.scale(player_surf, (115, 160))


pygame.init()
screen = pygame.display.set_mode((800,400))
pygame.display.set_caption('Cy Run')
clock = pygame.time.Clock()
font = pygame.font.Font('fonts/Pixeltype.ttf', 50)
font2 = pygame.font.Font('fonts/Arcade.otf', 50)
game_active = False
start_time = 0
score = 0

title_music = pygame.mixer.Sound('audio/Title.mp3')
game_music = pygame.mixer.Sound('audio/Mos_Eisley_Cantina.mp3')
bg_music_playing = False

icon_image = pygame.image.load('graphics/icon.png')
pygame.display.set_icon(icon_image)

startbg_surf = pygame.image.load('graphics/Start.png').convert()

sky_surface = pygame.image.load('graphics/Sky.png').convert()
sky_x_pos = 0

ground_surf = pygame.image.load('graphics/ground.png').convert()
ground_x_pos = 0
ground_y_pos = screen.get_height() - ground_surf.get_height() + 24

#bcat
bcat_1 = pygame.image.load('graphics/bcat/bcat1.png').convert_alpha()
bcat_1 = pygame.transform.scale(bcat_1, (67,67))
bcat_2 = pygame.image.load('graphics/bcat/bcat2.png').convert_alpha()
bcat_2 = pygame.transform.scale(bcat_2, (67,67))
bcat_3 = pygame.image.load('graphics/bcat/bcat3.png').convert_alpha()
bcat_3 = pygame.transform.scale(bcat_3, (67,67))
bcat_4 = pygame.image.load('graphics/bcat/bcat4.png').convert_alpha()
bcat_4 = pygame.transform.scale(bcat_4, (67,67))
bcat_frames = [bcat_1,bcat_2,bcat_3,bcat_4]
bcat_index = 0
bcat_surf = bcat_frames[bcat_index]

#bat
bat_1 = pygame.image.load('graphics/bat/bat1.png').convert_alpha()
bat_1 = pygame.transform.scale(bat_1, (80,80))
bat_2 = pygame.image.load('graphics/bat/bat2.png').convert_alpha()
bat_2 = pygame.transform.scale(bat_2, (80,80))
bat_3 = pygame.image.load('graphics/bat/bat3.png').convert_alpha()
bat_3 = pygame.transform.scale(bat_3, (80,80))
bat_4 = pygame.image.load('graphics/bat/bat4.png').convert_alpha()
bat_4 = pygame.transform.scale(bat_4, (80,80))
bat_frames = [bat_1,bat_2,bat_3,bat_4]
bat_index = 0
bat_surf = bat_frames[bat_index]

obstacle_rect_list = []

player_walk1 = pygame.image.load('graphics/player/player_walk1.png').convert_alpha()
player_walk2 = pygame.image.load('graphics/player/player_walk2.png').convert_alpha()
player_walk3 = pygame.image.load('graphics/player/player_walk3.png').convert_alpha()
player_walk = [player_walk1,player_walk2,player_walk3]
player_index = 0
player_jump = pygame.image.load('graphics/player/jump.png').convert_alpha()
player_jump = pygame.transform.scale(player_jump, (115, 160))
player_surf = player_walk[player_index]
player_rect = player_surf.get_rect(midbottom = (80,300))
player_gravity = 0

player_stand = pygame.image.load('graphics/player/player_stand.png').convert_alpha()
player_stand = pygame.transform.scale2x(player_stand)
player_stand_rect = player_stand.get_rect(center = (400,200))

game_name = font.render ('Cy Run', False, ('#ffffff'))
game_name_rect = game_name.get_rect(center = (400,80))

game_message = font2.render('PRESS SPACE TO RUN', False,('#ffffff'))
game_message = pygame.transform.scale(game_message, (int(game_message.get_width() * 0.4), int(game_message.get_height() * 0.4)))
game_message_rect = game_message.get_rect(midright = (750,365))

#obs timer
obstacle_timer = pygame.USEREVENT + 1 
pygame.time.set_timer(obstacle_timer,1500)

bcat_ani_timer = pygame.USEREVENT +2
pygame.time.set_timer(bcat_ani_timer,200)

bat_ani_timer = pygame.USEREVENT +3
pygame.time.set_timer(bat_ani_timer,200)

title_music.play()

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()

        if game_active:
            if event.type == pygame.MOUSEMOTION:
                if player_rect.collidepoint(event.pos): 
                    player_gravity = -20

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and player_rect.bottom >= 250:
                    player_gravity = -20   
        else:
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                game_active = True
                start_time = int(pygame.time.get_ticks() / 1000)
                bg_music_playing = False
                title_music.play()
       
        if game_active:
            if event.type == obstacle_timer and game_active:
                if randint(0,2):
                    obstacle_rect_list.append(bcat_surf.get_rect(bottomright=(randint(900,1100),315)))
                else:
                    obstacle_rect_list.append(bat_surf.get_rect(bottomright=(randint(900,1100),160)))
            if event.type == bcat_ani_timer:
                if bcat_index == 0: bcat_index = 1
                else: bcat_index = 0
                bcat_surf = bcat_frames[bcat_index]
            if event.type == bat_ani_timer:
                if bat_index == 0: bat_index = 1
                else: bat_index = 0
                bat_surf = bat_frames[bat_index]
                

    if game_active:
        
        sky_surface = pygame.transform.scale(sky_surface, (800, 300))
        screen.blit(sky_surface, (sky_x_pos, 0))
        screen.blit(sky_surface, (sky_x_pos + sky_surface.get_width(), 0))

        sky_x_pos -= 2 
        if sky_x_pos <= -sky_surface.get_width():
            sky_x_pos = 0

        score = display_score()

        ground_surf = pygame.transform.scale(ground_surf, (800, screen.get_height() - ground_y_pos))
        screen.blit(ground_surf, (ground_x_pos, ground_y_pos))
        screen.blit(ground_surf, (ground_x_pos + ground_surf.get_width(), ground_y_pos))

        ground_x_pos -= 2  
        if ground_x_pos <= -ground_surf.get_width():
            ground_x_pos = 0

        #player
        player_gravity += 1.2
        player_rect.y += player_gravity
        if player_rect.bottom >= 250: player_rect.bottom = 250
        player_animation()
        screen.blit(player_surf, player_rect)

        #obstacle movement
        
        obstacle_rect_list = obstacle_movement(obstacle_rect_list)

        #collision
        game_active = collisions(player_rect,obstacle_rect_list)

        if not bg_music_playing:
            game_music.play()
            bg_music_playing = True
            title_music.stop()

    else:
        startbg_surf = pygame.transform.scale(startbg_surf, (800, 400))
        screen.blit(startbg_surf, (0, 0))
        obstacle_rect_list.clear()
        player_rect.midbottom = (80,300)
        player_gravity = 0

        score_message = font.render(f'Score: {score}',False,('#ffffff'))
        score_message_rect = score_message.get_rect(midright = (750,365))

        if score == 0:
            screen.blit(game_message,game_message_rect)
        else:
            screen.blit(score_message,score_message_rect)
            
        if bg_music_playing:
            game_music.stop()
            bg_music_playing = False
            title_music.play()

    pygame.display.update()
    clock.tick(60)"
tvWm4vhx,Kadane’s Algorithm,Raahaat,C++,Friday 14th of July 2023 12:13:20 PM CDT,"/// In the name of ALLAH ///
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define endl '\n'
typedef unsigned long long int llu;
const int inf = 2000000000;
#define pb push_back

#define optimize()           \
    ios::sync_with_stdio(0); \
    cin.tie(0);              \
    cout.tie(0)
//#define mod 32768

void init_code(){
    optimize();
    #ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    #endif 
}

 
 void solve()
 {
   int n;
   cin>>n;
   ll a[n+4];
   for(int i=0; i<n; i++) cin>>a[i];
   ll mx=-INT_MAX;
   ll cur=0;
   for(int i=0; i<n; i++)
   {
      cur=max(a[i],cur+a[i]);
      mx=max(mx, cur);
   }
   cout<<mx<<endl;
 }
//Another approach for finding the range that occurs max_sum 
void maxSubArraySum(int a[], int size)
{
    int max_so_far = INT_MIN, max_ending_here = 0,
        start = 0, end = 0, s = 0;
 
    for (int i = 0; i < size; i++) {
        max_ending_here += a[i];
 
        if (max_so_far < max_ending_here) {
            max_so_far = max_ending_here;
            start = s;
            end = i;
        }
 
        if (max_ending_here < 0) {
            max_ending_here = 0;
            s = i + 1;
        }
    }
    cout << ""Maximum contiguous sum is "" << max_so_far
         << endl;
    cout << ""Starting index "" << start << endl
         << ""Ending index "" << end << endl;
}

int main() {
   init_code();
   int t = 1;
   //cin>>t;
   while(t--){
      solve();
   }
   return 0;
}"
fDk4yw9r,IOI '14 P3 - Game,erek1e,C++,Friday 14th of July 2023 12:07:35 PM CDT,"#include <iostream>
#include <vector>

using namespace std;

// DSU
int components;
vector<int> parent;
vector<vector<int>> questions; // between pairs of components
int root(int i) {
    return parent[i] < 0 ? i : (parent[i] = root(parent[i]));
}
void unite(int i, int j) {
    i = root(i), j = root(j);
    if (i == j) return;
    if (parent[i] > parent[j]) swap(i, j);
    parent[i] += parent[j];
    parent[j] = i;

    // only n unions, O(n) each, so O(n^2) in total
    int N = parent.size();
    for (int k = 0; k < N; ++k) {
        if (parent[k] < 0) {
            // these two are equal values
            questions[k][i] += questions[k][j];
            questions[i][k] += questions[j][k];
        }
    }
}

void initialize(int n) {
    parent.assign(n, -1);
    questions.assign(n, vector<int>(n));
    components = n;
}
int hasEdge(int u, int v) {
    if (components == 2) return 0;
    u = root(u), v = root(v);
    ++questions[u][v], ++questions[v][u];
    if (questions[u][v] == parent[u] * parent[v]) {
        unite(u, v);
        return 1;
    } else return 0;
}
"
XBR9WEkZ,Python __new__,alaex777,Python,Friday 14th of July 2023 11:55:42 AM CDT,"# 14.07.23

class ShopItem:
    def __new__(cls):
        print('inside __new__')
        return object.__new__(cls)
    
    def __init__(self) -> None:
        print('inside __init__')

shop_item = ShopItem()
# inside __new__
# inside __init__
"
gp9Q8uEX,Nigerian scammers [14-7-1/2023],bombaires,HTML,Friday 14th of July 2023 11:52:47 AM CDT,"<a href=""mailto:recepcion@leadsarms.com"">recepcion@leadsarms.com</a>
<a href=""mailto:emergencias24hs.org@protecteddomainservices.com"">emergencias24hs.org@protecteddomainservices.com</a>
<a href=""mailto:contact@spicesslams.com"">contact@spicesslams.com</a>
<a href=""mailto:barristerjavierlopez122@yahoo.com"">barristerjavierlopez122@yahoo.com</a>
<a href=""mailto:barristerjavierlopez121@yahoo.com"">barristerjavierlopez121@yahoo.com</a>
<a href=""mailto:mrsjanetedwardss.01@yahoo.com"">mrsjanetedwardss.01@yahoo.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1@googlemail.com"">keystoneb.jeffwilkinson1@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+3762@googlemail.com"">keystoneb.jeffwilkinson1+3762@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+31578@googlemail.com"">keystoneb.jeffwilkinson1+31578@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+4226@googlemail.com"">keystoneb.jeffwilkinson1+4226@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+20174@googlemail.com"">keystoneb.jeffwilkinson1+20174@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+14323@googlemail.com"">keystoneb.jeffwilkinson1+14323@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+7358@googlemail.com"">keystoneb.jeffwilkinson1+7358@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+982@googlemail.com"">keystoneb.jeffwilkinson1+982@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+9537@googlemail.com"">keystoneb.jeffwilkinson1+9537@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+16062@googlemail.com"">keystoneb.jeffwilkinson1+16062@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+6160@googlemail.com"">keystoneb.jeffwilkinson1+6160@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+23567@googlemail.com"">keystoneb.jeffwilkinson1+23567@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+16879@googlemail.com"">keystoneb.jeffwilkinson1+16879@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+11898@googlemail.com"">keystoneb.jeffwilkinson1+11898@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+25497@googlemail.com"">keystoneb.jeffwilkinson1+25497@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+26329@googlemail.com"">keystoneb.jeffwilkinson1+26329@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+1291@googlemail.com"">keystoneb.jeffwilkinson1+1291@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+28698@googlemail.com"">keystoneb.jeffwilkinson1+28698@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+22865@googlemail.com"">keystoneb.jeffwilkinson1+22865@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+31229@googlemail.com"">keystoneb.jeffwilkinson1+31229@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+14761@googlemail.com"">keystoneb.jeffwilkinson1+14761@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+26196@googlemail.com"">keystoneb.jeffwilkinson1+26196@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+23561@googlemail.com"">keystoneb.jeffwilkinson1+23561@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+29969@googlemail.com"">keystoneb.jeffwilkinson1+29969@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+3862@googlemail.com"">keystoneb.jeffwilkinson1+3862@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+30800@googlemail.com"">keystoneb.jeffwilkinson1+30800@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+20770@googlemail.com"">keystoneb.jeffwilkinson1+20770@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+30365@googlemail.com"">keystoneb.jeffwilkinson1+30365@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+105@googlemail.com"">keystoneb.jeffwilkinson1+105@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+12227@googlemail.com"">keystoneb.jeffwilkinson1+12227@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+25054@googlemail.com"">keystoneb.jeffwilkinson1+25054@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+5729@googlemail.com"">keystoneb.jeffwilkinson1+5729@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+19041@googlemail.com"">keystoneb.jeffwilkinson1+19041@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+4615@googlemail.com"">keystoneb.jeffwilkinson1+4615@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+13425@googlemail.com"">keystoneb.jeffwilkinson1+13425@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+1773@googlemail.com"">keystoneb.jeffwilkinson1+1773@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+29037@googlemail.com"">keystoneb.jeffwilkinson1+29037@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+19236@googlemail.com"">keystoneb.jeffwilkinson1+19236@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+8750@googlemail.com"">keystoneb.jeffwilkinson1+8750@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+27884@googlemail.com"">keystoneb.jeffwilkinson1+27884@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+19056@googlemail.com"">keystoneb.jeffwilkinson1+19056@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+18598@googlemail.com"">keystoneb.jeffwilkinson1+18598@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+2164@googlemail.com"">keystoneb.jeffwilkinson1+2164@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+22562@googlemail.com"">keystoneb.jeffwilkinson1+22562@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+14092@googlemail.com"">keystoneb.jeffwilkinson1+14092@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+27868@googlemail.com"">keystoneb.jeffwilkinson1+27868@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+24387@googlemail.com"">keystoneb.jeffwilkinson1+24387@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+31338@googlemail.com"">keystoneb.jeffwilkinson1+31338@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+23187@googlemail.com"">keystoneb.jeffwilkinson1+23187@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+21564@googlemail.com"">keystoneb.jeffwilkinson1+21564@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+14722@googlemail.com"">keystoneb.jeffwilkinson1+14722@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+32323@googlemail.com"">keystoneb.jeffwilkinson1+32323@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+19008@googlemail.com"">keystoneb.jeffwilkinson1+19008@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+29371@googlemail.com"">keystoneb.jeffwilkinson1+29371@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+11100@googlemail.com"">keystoneb.jeffwilkinson1+11100@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+10774@googlemail.com"">keystoneb.jeffwilkinson1+10774@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+20195@googlemail.com"">keystoneb.jeffwilkinson1+20195@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+28555@googlemail.com"">keystoneb.jeffwilkinson1+28555@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+13518@googlemail.com"">keystoneb.jeffwilkinson1+13518@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+8954@googlemail.com"">keystoneb.jeffwilkinson1+8954@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+9990@googlemail.com"">keystoneb.jeffwilkinson1+9990@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+1276@googlemail.com"">keystoneb.jeffwilkinson1+1276@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+5699@googlemail.com"">keystoneb.jeffwilkinson1+5699@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+24516@googlemail.com"">keystoneb.jeffwilkinson1+24516@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+25076@googlemail.com"">keystoneb.jeffwilkinson1+25076@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+31714@googlemail.com"">keystoneb.jeffwilkinson1+31714@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+4758@googlemail.com"">keystoneb.jeffwilkinson1+4758@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+18261@googlemail.com"">keystoneb.jeffwilkinson1+18261@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+3547@googlemail.com"">keystoneb.jeffwilkinson1+3547@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+1811@googlemail.com"">keystoneb.jeffwilkinson1+1811@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+21419@googlemail.com"">keystoneb.jeffwilkinson1+21419@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+5836@googlemail.com"">keystoneb.jeffwilkinson1+5836@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+3870@googlemail.com"">keystoneb.jeffwilkinson1+3870@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+21494@googlemail.com"">keystoneb.jeffwilkinson1+21494@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+21473@googlemail.com"">keystoneb.jeffwilkinson1+21473@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+6834@googlemail.com"">keystoneb.jeffwilkinson1+6834@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+26918@googlemail.com"">keystoneb.jeffwilkinson1+26918@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+16217@googlemail.com"">keystoneb.jeffwilkinson1+16217@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+26485@googlemail.com"">keystoneb.jeffwilkinson1+26485@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+20619@googlemail.com"">keystoneb.jeffwilkinson1+20619@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+29237@googlemail.com"">keystoneb.jeffwilkinson1+29237@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+21423@googlemail.com"">keystoneb.jeffwilkinson1+21423@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+23574@googlemail.com"">keystoneb.jeffwilkinson1+23574@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+19227@googlemail.com"">keystoneb.jeffwilkinson1+19227@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+23542@googlemail.com"">keystoneb.jeffwilkinson1+23542@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+22582@googlemail.com"">keystoneb.jeffwilkinson1+22582@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+6832@googlemail.com"">keystoneb.jeffwilkinson1+6832@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+11750@googlemail.com"">keystoneb.jeffwilkinson1+11750@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+20316@googlemail.com"">keystoneb.jeffwilkinson1+20316@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+24283@googlemail.com"">keystoneb.jeffwilkinson1+24283@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+26689@googlemail.com"">keystoneb.jeffwilkinson1+26689@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+12486@googlemail.com"">keystoneb.jeffwilkinson1+12486@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+32576@googlemail.com"">keystoneb.jeffwilkinson1+32576@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+20164@googlemail.com"">keystoneb.jeffwilkinson1+20164@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+25639@googlemail.com"">keystoneb.jeffwilkinson1+25639@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+29408@googlemail.com"">keystoneb.jeffwilkinson1+29408@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+25528@googlemail.com"">keystoneb.jeffwilkinson1+25528@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+5099@googlemail.com"">keystoneb.jeffwilkinson1+5099@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+22729@googlemail.com"">keystoneb.jeffwilkinson1+22729@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+13455@googlemail.com"">keystoneb.jeffwilkinson1+13455@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson1+3790@googlemail.com"">keystoneb.jeffwilkinson1+3790@googlemail.com</a>
<a href=""mailto:mfish0252@gmail.com"">mfish0252@gmail.com</a>
<a href=""mailto:m.fish.02.5.2@gmail.com"">m.fish.02.5.2@gmail.com</a>
<a href=""mailto:mfis.h0.25.2@gmail.com"">mfis.h0.25.2@gmail.com</a>
<a href=""mailto:mfish.0.25.2@gmail.com"">mfish.0.25.2@gmail.com</a>
<a href=""mailto:m.fis.h.02.52@gmail.com"">m.fis.h.02.52@gmail.com</a>
<a href=""mailto:m.fis.h.0.252@gmail.com"">m.fis.h.0.252@gmail.com</a>
<a href=""mailto:m.fish02.52@gmail.com"">m.fish02.52@gmail.com</a>
<a href=""mailto:mf.ish.02.5.2@gmail.com"">mf.ish.02.5.2@gmail.com</a>
<a href=""mailto:m.f.is.h.0.25.2@gmail.com"">m.f.is.h.0.25.2@gmail.com</a>
<a href=""mailto:mfis.h.02.5.2@gmail.com"">mfis.h.02.5.2@gmail.com</a>
<a href=""mailto:mf.i.s.h0.2.5.2@gmail.com"">mf.i.s.h0.2.5.2@gmail.com</a>
<a href=""mailto:m.f.i.sh.0.252@gmail.com"">m.f.i.sh.0.252@gmail.com</a>
<a href=""mailto:mfis.h.025.2@gmail.com"">mfis.h.025.2@gmail.com</a>
<a href=""mailto:mf.ish.02.52@gmail.com"">mf.ish.02.52@gmail.com</a>
<a href=""mailto:mf.is.h.02.52@gmail.com"">mf.is.h.02.52@gmail.com</a>
<a href=""mailto:mfi.sh0252@gmail.com"">mfi.sh0252@gmail.com</a>
<a href=""mailto:mf.i.s.h.0252@gmail.com"">mf.i.s.h.0252@gmail.com</a>
<a href=""mailto:m.f.i.s.h0.252@gmail.com"">m.f.i.s.h0.252@gmail.com</a>
<a href=""mailto:mfis.h02.52@gmail.com"">mfis.h02.52@gmail.com</a>
<a href=""mailto:m.f.i.sh0.2.52@gmail.com"">m.f.i.sh0.2.52@gmail.com</a>
<a href=""mailto:mf.is.h02.52@gmail.com"">mf.is.h02.52@gmail.com</a>
<a href=""mailto:m.fish0.2.5.2@gmail.com"">m.fish0.2.5.2@gmail.com</a>
<a href=""mailto:m.f.ish.0252@gmail.com"">m.f.ish.0252@gmail.com</a>
<a href=""mailto:m.fish.0.25.2@gmail.com"">m.fish.0.25.2@gmail.com</a>
<a href=""mailto:m.f.i.s.h0.2.52@gmail.com"">m.f.i.s.h0.2.52@gmail.com</a>
<a href=""mailto:mf.ish02.52@gmail.com"">mf.ish02.52@gmail.com</a>
<a href=""mailto:m.fi.s.h0.25.2@gmail.com"">m.fi.s.h0.25.2@gmail.com</a>
<a href=""mailto:mfi.s.h0.2.52@gmail.com"">mfi.s.h0.2.52@gmail.com</a>
<a href=""mailto:m.f.is.h0.25.2@gmail.com"">m.f.is.h0.25.2@gmail.com</a>
<a href=""mailto:m.f.is.h.02.52@gmail.com"">m.f.is.h.02.52@gmail.com</a>
<a href=""mailto:m.fish.0252@gmail.com"">m.fish.0252@gmail.com</a>
<a href=""mailto:mfish02.5.2@gmail.com"">mfish02.5.2@gmail.com</a>
<a href=""mailto:m.f.ish.0.2.5.2@gmail.com"">m.f.ish.0.2.5.2@gmail.com</a>
<a href=""mailto:m.f.i.s.h.0.25.2@gmail.com"">m.f.i.s.h.0.25.2@gmail.com</a>
<a href=""mailto:m.fi.sh0252@gmail.com"">m.fi.sh0252@gmail.com</a>
<a href=""mailto:m.fi.sh.025.2@gmail.com"">m.fi.sh.025.2@gmail.com</a>
<a href=""mailto:m.fi.s.h025.2@gmail.com"">m.fi.s.h025.2@gmail.com</a>
<a href=""mailto:m.f.is.h0252@gmail.com"">m.f.is.h0252@gmail.com</a>
<a href=""mailto:mfis.h.0.2.52@gmail.com"">mfis.h.0.2.52@gmail.com</a>
<a href=""mailto:mfis.h0.252@gmail.com"">mfis.h0.252@gmail.com</a>
<a href=""mailto:mfish0252@gmail.com"">mfish0252@gmail.com</a>
<a href=""mailto:mfi.sh.0.2.52@gmail.com"">mfi.sh.0.2.52@gmail.com</a>
<a href=""mailto:m.f.i.sh.02.5.2@gmail.com"">m.f.i.sh.02.5.2@gmail.com</a>
<a href=""mailto:mfis.h.02.52@gmail.com"">mfis.h.02.52@gmail.com</a>
<a href=""mailto:m.f.ish0.2.52@gmail.com"">m.f.ish0.2.52@gmail.com</a>
<a href=""mailto:m.f.ish.025.2@gmail.com"">m.f.ish.025.2@gmail.com</a>
<a href=""mailto:m.fis.h.02.5.2@gmail.com"">m.fis.h.02.5.2@gmail.com</a>
<a href=""mailto:mfi.sh0.2.52@gmail.com"">mfi.sh0.2.52@gmail.com</a>
<a href=""mailto:m.fi.s.h.0.2.5.2@gmail.com"">m.fi.s.h.0.2.5.2@gmail.com</a>
<a href=""mailto:m.f.ish.0.252@gmail.com"">m.f.ish.0.252@gmail.com</a>
<a href=""mailto:m.f.ish.0.25.2@gmail.com"">m.f.ish.0.25.2@gmail.com</a>
<a href=""mailto:mfish.0252@gmail.com"">mfish.0252@gmail.com</a>
<a href=""mailto:m.f.ish02.5.2@gmail.com"">m.f.ish02.5.2@gmail.com</a>
<a href=""mailto:m.f.i.s.h.02.5.2@gmail.com"">m.f.i.s.h.02.5.2@gmail.com</a>
<a href=""mailto:mf.i.sh.02.5.2@gmail.com"">mf.i.sh.02.5.2@gmail.com</a>
<a href=""mailto:mf.i.s.h02.52@gmail.com"">mf.i.s.h02.52@gmail.com</a>
<a href=""mailto:mf.is.h.0.252@gmail.com"">mf.is.h.0.252@gmail.com</a>
<a href=""mailto:m.f.is.h.0.252@gmail.com"">m.f.is.h.0.252@gmail.com</a>
<a href=""mailto:m.f.i.sh02.52@gmail.com"">m.f.i.sh02.52@gmail.com</a>
<a href=""mailto:m.f.is.h025.2@gmail.com"">m.f.is.h025.2@gmail.com</a>
<a href=""mailto:m.fis.h.025.2@gmail.com"">m.fis.h.025.2@gmail.com</a>
<a href=""mailto:m.f.i.sh.0.25.2@gmail.com"">m.f.i.sh.0.25.2@gmail.com</a>
<a href=""mailto:mfi.sh02.5.2@gmail.com"">mfi.sh02.5.2@gmail.com</a>
<a href=""mailto:m.f.i.sh025.2@gmail.com"">m.f.i.sh025.2@gmail.com</a>
<a href=""mailto:mfi.sh.02.5.2@gmail.com"">mfi.sh.02.5.2@gmail.com</a>
<a href=""mailto:m.fi.s.h.0252@gmail.com"">m.fi.s.h.0252@gmail.com</a>
<a href=""mailto:mfi.sh025.2@gmail.com"">mfi.sh025.2@gmail.com</a>
<a href=""mailto:m.fi.s.h0.252@gmail.com"">m.fi.s.h0.252@gmail.com</a>
<a href=""mailto:mfi.sh.0.2.5.2@gmail.com"">mfi.sh.0.2.5.2@gmail.com</a>
<a href=""mailto:mfi.s.h.02.5.2@gmail.com"">mfi.s.h.02.5.2@gmail.com</a>
<a href=""mailto:mf.i.sh0.25.2@gmail.com"">mf.i.sh0.25.2@gmail.com</a>
<a href=""mailto:mf.i.sh025.2@gmail.com"">mf.i.sh025.2@gmail.com</a>
<a href=""mailto:m.f.i.s.h02.52@gmail.com"">m.f.i.s.h02.52@gmail.com</a>
<a href=""mailto:mf.i.sh0.2.52@gmail.com"">mf.i.sh0.2.52@gmail.com</a>
<a href=""mailto:m.f.i.s.h0.2.5.2@gmail.com"">m.f.i.s.h0.2.5.2@gmail.com</a>
<a href=""mailto:m.fi.sh0.2.5.2@gmail.com"">m.fi.sh0.2.5.2@gmail.com</a>
<a href=""mailto:mf.ish0.25.2@gmail.com"">mf.ish0.25.2@gmail.com</a>
<a href=""mailto:m.fis.h02.52@gmail.com"">m.fis.h02.52@gmail.com</a>
<a href=""mailto:m.f.ish.02.5.2@gmail.com"">m.f.ish.02.5.2@gmail.com</a>
<a href=""mailto:m.f.i.sh0252@gmail.com"">m.f.i.sh0252@gmail.com</a>
<a href=""mailto:m.f.i.s.h02.5.2@gmail.com"">m.f.i.s.h02.5.2@gmail.com</a>
<a href=""mailto:mfi.s.h0.25.2@gmail.com"">mfi.s.h0.25.2@gmail.com</a>
<a href=""mailto:m.fi.sh0.25.2@gmail.com"">m.fi.sh0.25.2@gmail.com</a>
<a href=""mailto:m.f.is.h.025.2@gmail.com"">m.f.is.h.025.2@gmail.com</a>
<a href=""mailto:m.fi.s.h.025.2@gmail.com"">m.fi.s.h.025.2@gmail.com</a>
<a href=""mailto:m.fi.sh.0252@gmail.com"">m.fi.sh.0252@gmail.com</a>
<a href=""mailto:m.fi.sh.0.252@gmail.com"">m.fi.sh.0.252@gmail.com</a>
<a href=""mailto:m.fi.s.h0.2.5.2@gmail.com"">m.fi.s.h0.2.5.2@gmail.com</a>
<a href=""mailto:m.fis.h0.2.5.2@gmail.com"">m.fis.h0.2.5.2@gmail.com</a>
<a href=""mailto:m.fi.sh02.52@gmail.com"">m.fi.sh02.52@gmail.com</a>
<a href=""mailto:m.fi.sh.02.5.2@gmail.com"">m.fi.sh.02.5.2@gmail.com</a>
<a href=""mailto:mf.ish0.2.5.2@gmail.com"">mf.ish0.2.5.2@gmail.com</a>
<a href=""mailto:mf.i.s.h0252@gmail.com"">mf.i.s.h0252@gmail.com</a>
<a href=""mailto:m.f.ish.0.2.52@gmail.com"">m.f.ish.0.2.52@gmail.com</a>
<a href=""mailto:mfis.h02.5.2@gmail.com"">mfis.h02.5.2@gmail.com</a>
<a href=""mailto:m.fis.h0252@gmail.com"">m.fis.h0252@gmail.com</a>
<a href=""mailto:mf.ish02.5.2@gmail.com"">mf.ish02.5.2@gmail.com</a>
<a href=""mailto:m.fi.sh02.5.2@gmail.com"">m.fi.sh02.5.2@gmail.com</a>
<a href=""mailto:m.fi.sh0.2.52@gmail.com"">m.fi.sh0.2.52@gmail.com</a>
<a href=""mailto:mf.ish.025.2@gmail.com"">mf.ish.025.2@gmail.com</a>
<a href=""mailto:mf.is.h.0.2.5.2@gmail.com"">mf.is.h.0.2.5.2@gmail.com</a>
<a href=""mailto:m.f.ish.02.52@gmail.com"">m.f.ish.02.52@gmail.com</a>
<a href=""mailto:mf.i.s.h.025.2@gmail.com"">mf.i.s.h.025.2@gmail.com</a>
<a href=""mailto:m.f.is.h0.2.5.2@gmail.com"">m.f.is.h0.2.5.2@gmail.com</a>
<a href=""mailto:mfi.sh.0.252@gmail.com"">mfi.sh.0.252@gmail.com</a>
<a href=""mailto:mf.ish.0.2.52@gmail.com"">mf.ish.0.2.52@gmail.com</a>
<a href=""mailto:mfis.h.0252@gmail.com"">mfis.h.0252@gmail.com</a>
<a href=""mailto:mf.is.h.025.2@gmail.com"">mf.is.h.025.2@gmail.com</a>
<a href=""mailto:mfi.sh0.252@gmail.com"">mfi.sh0.252@gmail.com</a>
<a href=""mailto:mfi.sh.025.2@gmail.com"">mfi.sh.025.2@gmail.com</a>
<a href=""mailto:mf.i.s.h.02.52@gmail.com"">mf.i.s.h.02.52@gmail.com</a>
<a href=""mailto:m.fi.s.h.02.5.2@gmail.com"">m.fi.s.h.02.5.2@gmail.com</a>
<a href=""mailto:m.f.is.h0.252@gmail.com"">m.f.is.h0.252@gmail.com</a>
<a href=""mailto:mf.is.h025.2@gmail.com"">mf.is.h025.2@gmail.com</a>
<a href=""mailto:mf.ish.0.25.2@gmail.com"">mf.ish.0.25.2@gmail.com</a>
<a href=""mailto:mf.i.s.h0.252@gmail.com"">mf.i.s.h0.252@gmail.com</a>
<a href=""mailto:mf.i.sh0252@gmail.com"">mf.i.sh0252@gmail.com</a>
<a href=""mailto:mfi.s.h.02.52@gmail.com"">mfi.s.h.02.52@gmail.com</a>
<a href=""mailto:m.fish.0.2.5.2@gmail.com"">m.fish.0.2.5.2@gmail.com</a>
<a href=""mailto:mfish025.2@gmail.com"">mfish025.2@gmail.com</a>
<a href=""mailto:mf.i.sh.025.2@gmail.com"">mf.i.sh.025.2@gmail.com</a>
<a href=""mailto:mfi.s.h.0252@gmail.com"">mfi.s.h.0252@gmail.com</a>
<a href=""mailto:mfish.025.2@gmail.com"">mfish.025.2@gmail.com</a>
<a href=""mailto:m.f.is.h02.52@gmail.com"">m.f.is.h02.52@gmail.com</a>
<a href=""mailto:mfi.sh0.25.2@gmail.com"">mfi.sh0.25.2@gmail.com</a>
<a href=""mailto:mfi.sh0.2.5.2@gmail.com"">mfi.sh0.2.5.2@gmail.com</a>
<a href=""mailto:mf.i.sh.0.25.2@gmail.com"">mf.i.sh.0.25.2@gmail.com</a>
<a href=""mailto:mf.is.h0.252@gmail.com"">mf.is.h0.252@gmail.com</a>
<a href=""mailto:m.f.is.h.0.2.52@gmail.com"">m.f.is.h.0.2.52@gmail.com</a>
<a href=""mailto:m.f.i.s.h.0.2.52@gmail.com"">m.f.i.s.h.0.2.52@gmail.com</a>
<a href=""mailto:m.f.ish0252@gmail.com"">m.f.ish0252@gmail.com</a>
<a href=""mailto:mf.is.h0.25.2@gmail.com"">mf.is.h0.25.2@gmail.com</a>
<a href=""mailto:m.fi.sh025.2@gmail.com"">m.fi.sh025.2@gmail.com</a>
<a href=""mailto:m.f.is.h.0252@gmail.com"">m.f.is.h.0252@gmail.com</a>
<a href=""mailto:mfis.h.0.2.5.2@gmail.com"">mfis.h.0.2.5.2@gmail.com</a>
<a href=""mailto:mf.is.h02.5.2@gmail.com"">mf.is.h02.5.2@gmail.com</a>
<a href=""mailto:mfi.s.h02.52@gmail.com"">mfi.s.h02.52@gmail.com</a>
<a href=""mailto:m.fi.s.h0.2.52@gmail.com"">m.fi.s.h0.2.52@gmail.com</a>
<a href=""mailto:m.fis.h.0.2.5.2@gmail.com"">m.fis.h.0.2.5.2@gmail.com</a>
<a href=""mailto:m.fis.h0.2.52@gmail.com"">m.fis.h0.2.52@gmail.com</a>
<a href=""mailto:m.fish0.25.2@gmail.com"">m.fish0.25.2@gmail.com</a>
<a href=""mailto:mfi.s.h0252@gmail.com"">mfi.s.h0252@gmail.com</a>
<a href=""mailto:m.f.is.h0.2.52@gmail.com"">m.f.is.h0.2.52@gmail.com</a>
<a href=""mailto:m.fish0.2.52@gmail.com"">m.fish0.2.52@gmail.com</a>
<a href=""mailto:mf.i.s.h0.2.52@gmail.com"">mf.i.s.h0.2.52@gmail.com</a>
<a href=""mailto:m.f.i.sh0.25.2@gmail.com"">m.f.i.sh0.25.2@gmail.com</a>
<a href=""mailto:m.fi.s.h.02.52@gmail.com"">m.fi.s.h.02.52@gmail.com</a>
<a href=""mailto:m.f.i.sh.025.2@gmail.com"">m.f.i.sh.025.2@gmail.com</a>
<a href=""mailto:m.f.i.sh.0252@gmail.com"">m.f.i.sh.0252@gmail.com</a>
<a href=""mailto:mf.is.h0.2.52@gmail.com"">mf.is.h0.2.52@gmail.com</a>
<a href=""mailto:mfish.0.2.52@gmail.com"">mfish.0.2.52@gmail.com</a>
<a href=""mailto:mfis.h025.2@gmail.com"">mfis.h025.2@gmail.com</a>
<a href=""mailto:m.fish.025.2@gmail.com"">m.fish.025.2@gmail.com</a>
<a href=""mailto:m.fis.h0.25.2@gmail.com"">m.fis.h0.25.2@gmail.com</a>
<a href=""mailto:m.f.i.s.h0252@gmail.com"">m.f.i.s.h0252@gmail.com</a>
<a href=""mailto:mf.i.sh02.5.2@gmail.com"">mf.i.sh02.5.2@gmail.com</a>
<a href=""mailto:m.f.i.sh.02.52@gmail.com"">m.f.i.sh.02.52@gmail.com</a>
<a href=""mailto:mf.i.sh.0.2.52@gmail.com"">mf.i.sh.0.2.52@gmail.com</a>
<a href=""mailto:m.f.ish02.52@gmail.com"">m.f.ish02.52@gmail.com</a>
<a href=""mailto:m.f.ish0.2.5.2@gmail.com"">m.f.ish0.2.5.2@gmail.com</a>
<a href=""mailto:mfish0.2.52@gmail.com"">mfish0.2.52@gmail.com</a>
<a href=""mailto:mfi.s.h.025.2@gmail.com"">mfi.s.h.025.2@gmail.com</a>
<a href=""mailto:mf.i.sh.02.52@gmail.com"">mf.i.sh.02.52@gmail.com</a>
<a href=""mailto:mfi.s.h.0.2.5.2@gmail.com"">mfi.s.h.0.2.5.2@gmail.com</a>
<a href=""mailto:mf.is.h.0252@gmail.com"">mf.is.h.0252@gmail.com</a>
<a href=""mailto:mf.i.s.h.0.252@gmail.com"">mf.i.s.h.0.252@gmail.com</a>
<a href=""mailto:mfish0.252@gmail.com"">mfish0.252@gmail.com</a>
<a href=""mailto:m.fi.s.h02.52@gmail.com"">m.fi.s.h02.52@gmail.com</a>
<a href=""mailto:mf.i.s.h.0.2.52@gmail.com"">mf.i.s.h.0.2.52@gmail.com</a>
<a href=""mailto:m.f.i.s.h.02.52@gmail.com"">m.f.i.s.h.02.52@gmail.com</a>
<a href=""mailto:mf.i.s.h02.5.2@gmail.com"">mf.i.s.h02.5.2@gmail.com</a>
<a href=""mailto:m.fi.sh.0.2.5.2@gmail.com"">m.fi.sh.0.2.5.2@gmail.com</a>
<a href=""mailto:m.f.i.s.h0.25.2@gmail.com"">m.f.i.s.h0.25.2@gmail.com</a>
<a href=""mailto:m.fish0252@gmail.com"">m.fish0252@gmail.com</a>
<a href=""mailto:m.f.i.sh.0.2.52@gmail.com"">m.f.i.sh.0.2.52@gmail.com</a>
<a href=""mailto:mf.ish025.2@gmail.com"">mf.ish025.2@gmail.com</a>
<a href=""mailto:mf.ish0.2.52@gmail.com"">mf.ish0.2.52@gmail.com</a>
<a href=""mailto:m.fi.sh.0.2.52@gmail.com"">m.fi.sh.0.2.52@gmail.com</a>
<a href=""mailto:m.fi.sh.02.52@gmail.com"">m.fi.sh.02.52@gmail.com</a>
<a href=""mailto:mf.ish.0.252@gmail.com"">mf.ish.0.252@gmail.com</a>
<a href=""mailto:m.fish02.5.2@gmail.com"">m.fish02.5.2@gmail.com</a>
<a href=""mailto:m.fi.s.h.0.25.2@gmail.com"">m.fi.s.h.0.25.2@gmail.com</a>
<a href=""mailto:mf.i.sh.0.252@gmail.com"">mf.i.sh.0.252@gmail.com</a>
<a href=""mailto:m.fish.0.252@gmail.com"">m.fish.0.252@gmail.com</a>
<a href=""mailto:mfis.h0252@gmail.com"">mfis.h0252@gmail.com</a>
<a href=""mailto:mf.is.h0252@gmail.com"">mf.is.h0252@gmail.com</a>
<a href=""mailto:m.f.i.s.h025.2@gmail.com"">m.f.i.s.h025.2@gmail.com</a>
<a href=""mailto:mf.is.h.02.5.2@gmail.com"">mf.is.h.02.5.2@gmail.com</a>
<a href=""mailto:mfish02.52@gmail.com"">mfish02.52@gmail.com</a>
<a href=""mailto:m.fish.0.2.52@gmail.com"">m.fish.0.2.52@gmail.com</a>
<a href=""mailto:m.fi.s.h02.5.2@gmail.com"">m.fi.s.h02.5.2@gmail.com</a>
<a href=""mailto:m.f.ish0.25.2@gmail.com"">m.f.ish0.25.2@gmail.com</a>
<a href=""mailto:m.fi.s.h0252@gmail.com"">m.fi.s.h0252@gmail.com</a>
<a href=""mailto:m.f.i.sh0.2.5.2@gmail.com"">m.f.i.sh0.2.5.2@gmail.com</a>
<a href=""mailto:mfi.s.h0.2.5.2@gmail.com"">mfi.s.h0.2.5.2@gmail.com</a>
<a href=""mailto:mf.i.sh02.52@gmail.com"">mf.i.sh02.52@gmail.com</a>
<a href=""mailto:mfish0.25.2@gmail.com"">mfish0.25.2@gmail.com</a>
<a href=""mailto:mf.i.sh0.252@gmail.com"">mf.i.sh0.252@gmail.com</a>
<a href=""mailto:mfi.s.h02.5.2@gmail.com"">mfi.s.h02.5.2@gmail.com</a>
<a href=""mailto:m.f.i.sh.0.2.5.2@gmail.com"">m.f.i.sh.0.2.5.2@gmail.com</a>
<a href=""mailto:m.fi.sh0.252@gmail.com"">m.fi.sh0.252@gmail.com</a>
<a href=""mailto:agentvictorokle@googlemail.com"">agentvictorokle@googlemail.com</a>
<a href=""mailto:agentvictorokle+26510@googlemail.com"">agentvictorokle+26510@googlemail.com</a>
<a href=""mailto:agentvictorokle+21383@googlemail.com"">agentvictorokle+21383@googlemail.com</a>
<a href=""mailto:agentvictorokle+3817@googlemail.com"">agentvictorokle+3817@googlemail.com</a>
<a href=""mailto:agentvictorokle+2205@googlemail.com"">agentvictorokle+2205@googlemail.com</a>
<a href=""mailto:agentvictorokle+12002@googlemail.com"">agentvictorokle+12002@googlemail.com</a>
<a href=""mailto:agentvictorokle+13486@googlemail.com"">agentvictorokle+13486@googlemail.com</a>
<a href=""mailto:agentvictorokle+27524@googlemail.com"">agentvictorokle+27524@googlemail.com</a>
<a href=""mailto:agentvictorokle+32448@googlemail.com"">agentvictorokle+32448@googlemail.com</a>
<a href=""mailto:agentvictorokle+11110@googlemail.com"">agentvictorokle+11110@googlemail.com</a>
<a href=""mailto:agentvictorokle+32687@googlemail.com"">agentvictorokle+32687@googlemail.com</a>
<a href=""mailto:agentvictorokle+2099@googlemail.com"">agentvictorokle+2099@googlemail.com</a>
<a href=""mailto:agentvictorokle+383@googlemail.com"">agentvictorokle+383@googlemail.com</a>
<a href=""mailto:agentvictorokle+5308@googlemail.com"">agentvictorokle+5308@googlemail.com</a>
<a href=""mailto:agentvictorokle+20216@googlemail.com"">agentvictorokle+20216@googlemail.com</a>
<a href=""mailto:agentvictorokle+32510@googlemail.com"">agentvictorokle+32510@googlemail.com</a>
<a href=""mailto:agentvictorokle+27976@googlemail.com"">agentvictorokle+27976@googlemail.com</a>
<a href=""mailto:agentvictorokle+7950@googlemail.com"">agentvictorokle+7950@googlemail.com</a>
<a href=""mailto:agentvictorokle+16297@googlemail.com"">agentvictorokle+16297@googlemail.com</a>
<a href=""mailto:agentvictorokle+13561@googlemail.com"">agentvictorokle+13561@googlemail.com</a>
<a href=""mailto:agentvictorokle+24902@googlemail.com"">agentvictorokle+24902@googlemail.com</a>
<a href=""mailto:agentvictorokle+30181@googlemail.com"">agentvictorokle+30181@googlemail.com</a>
<a href=""mailto:agentvictorokle+20006@googlemail.com"">agentvictorokle+20006@googlemail.com</a>
<a href=""mailto:agentvictorokle+31714@googlemail.com"">agentvictorokle+31714@googlemail.com</a>
<a href=""mailto:agentvictorokle+31652@googlemail.com"">agentvictorokle+31652@googlemail.com</a>
<a href=""mailto:agentvictorokle+22358@googlemail.com"">agentvictorokle+22358@googlemail.com</a>
<a href=""mailto:agentvictorokle+15662@googlemail.com"">agentvictorokle+15662@googlemail.com</a>
<a href=""mailto:agentvictorokle+21529@googlemail.com"">agentvictorokle+21529@googlemail.com</a>
<a href=""mailto:agentvictorokle+24378@googlemail.com"">agentvictorokle+24378@googlemail.com</a>
<a href=""mailto:agentvictorokle+15453@googlemail.com"">agentvictorokle+15453@googlemail.com</a>
<a href=""mailto:agentvictorokle+24093@googlemail.com"">agentvictorokle+24093@googlemail.com</a>
<a href=""mailto:agentvictorokle+18757@googlemail.com"">agentvictorokle+18757@googlemail.com</a>
<a href=""mailto:agentvictorokle+27985@googlemail.com"">agentvictorokle+27985@googlemail.com</a>
<a href=""mailto:agentvictorokle+27273@googlemail.com"">agentvictorokle+27273@googlemail.com</a>
<a href=""mailto:agentvictorokle+24818@googlemail.com"">agentvictorokle+24818@googlemail.com</a>
<a href=""mailto:agentvictorokle+17143@googlemail.com"">agentvictorokle+17143@googlemail.com</a>
<a href=""mailto:agentvictorokle+19233@googlemail.com"">agentvictorokle+19233@googlemail.com</a>
<a href=""mailto:agentvictorokle+6432@googlemail.com"">agentvictorokle+6432@googlemail.com</a>
<a href=""mailto:agentvictorokle+21951@googlemail.com"">agentvictorokle+21951@googlemail.com</a>
<a href=""mailto:agentvictorokle+15799@googlemail.com"">agentvictorokle+15799@googlemail.com</a>
<a href=""mailto:agentvictorokle+13320@googlemail.com"">agentvictorokle+13320@googlemail.com</a>
<a href=""mailto:agentvictorokle+24485@googlemail.com"">agentvictorokle+24485@googlemail.com</a>
<a href=""mailto:agentvictorokle+3648@googlemail.com"">agentvictorokle+3648@googlemail.com</a>
<a href=""mailto:agentvictorokle+10377@googlemail.com"">agentvictorokle+10377@googlemail.com</a>
<a href=""mailto:agentvictorokle+12437@googlemail.com"">agentvictorokle+12437@googlemail.com</a>
<a href=""mailto:agentvictorokle+23172@googlemail.com"">agentvictorokle+23172@googlemail.com</a>
<a href=""mailto:agentvictorokle+26332@googlemail.com"">agentvictorokle+26332@googlemail.com</a>
<a href=""mailto:agentvictorokle+17980@googlemail.com"">agentvictorokle+17980@googlemail.com</a>
<a href=""mailto:agentvictorokle+17817@googlemail.com"">agentvictorokle+17817@googlemail.com</a>
<a href=""mailto:agentvictorokle+26666@googlemail.com"">agentvictorokle+26666@googlemail.com</a>
<a href=""mailto:agentvictorokle+26056@googlemail.com"">agentvictorokle+26056@googlemail.com</a>
<a href=""mailto:agentvictorokle+23205@googlemail.com"">agentvictorokle+23205@googlemail.com</a>
<a href=""mailto:agentvictorokle+4617@googlemail.com"">agentvictorokle+4617@googlemail.com</a>
<a href=""mailto:agentvictorokle+19534@googlemail.com"">agentvictorokle+19534@googlemail.com</a>
<a href=""mailto:agentvictorokle+8508@googlemail.com"">agentvictorokle+8508@googlemail.com</a>
<a href=""mailto:agentvictorokle+15164@googlemail.com"">agentvictorokle+15164@googlemail.com</a>
<a href=""mailto:agentvictorokle+3818@googlemail.com"">agentvictorokle+3818@googlemail.com</a>
<a href=""mailto:agentvictorokle+9902@googlemail.com"">agentvictorokle+9902@googlemail.com</a>
<a href=""mailto:agentvictorokle+16632@googlemail.com"">agentvictorokle+16632@googlemail.com</a>
<a href=""mailto:agentvictorokle+27168@googlemail.com"">agentvictorokle+27168@googlemail.com</a>
<a href=""mailto:agentvictorokle+4360@googlemail.com"">agentvictorokle+4360@googlemail.com</a>
<a href=""mailto:agentvictorokle+8027@googlemail.com"">agentvictorokle+8027@googlemail.com</a>
<a href=""mailto:agentvictorokle+3119@googlemail.com"">agentvictorokle+3119@googlemail.com</a>
<a href=""mailto:agentvictorokle+30814@googlemail.com"">agentvictorokle+30814@googlemail.com</a>
<a href=""mailto:agentvictorokle+3296@googlemail.com"">agentvictorokle+3296@googlemail.com</a>
<a href=""mailto:agentvictorokle+28030@googlemail.com"">agentvictorokle+28030@googlemail.com</a>
<a href=""mailto:agentvictorokle+3896@googlemail.com"">agentvictorokle+3896@googlemail.com</a>
<a href=""mailto:agentvictorokle+22470@googlemail.com"">agentvictorokle+22470@googlemail.com</a>
<a href=""mailto:agentvictorokle+30399@googlemail.com"">agentvictorokle+30399@googlemail.com</a>
<a href=""mailto:agentvictorokle+19719@googlemail.com"">agentvictorokle+19719@googlemail.com</a>
<a href=""mailto:agentvictorokle+26437@googlemail.com"">agentvictorokle+26437@googlemail.com</a>
<a href=""mailto:agentvictorokle+19449@googlemail.com"">agentvictorokle+19449@googlemail.com</a>
<a href=""mailto:agentvictorokle+24318@googlemail.com"">agentvictorokle+24318@googlemail.com</a>
<a href=""mailto:agentvictorokle+19339@googlemail.com"">agentvictorokle+19339@googlemail.com</a>
<a href=""mailto:agentvictorokle+18621@googlemail.com"">agentvictorokle+18621@googlemail.com</a>
<a href=""mailto:agentvictorokle+23766@googlemail.com"">agentvictorokle+23766@googlemail.com</a>
<a href=""mailto:agentvictorokle+25208@googlemail.com"">agentvictorokle+25208@googlemail.com</a>
<a href=""mailto:agentvictorokle+13254@googlemail.com"">agentvictorokle+13254@googlemail.com</a>
<a href=""mailto:agentvictorokle+18247@googlemail.com"">agentvictorokle+18247@googlemail.com</a>
<a href=""mailto:agentvictorokle+1339@googlemail.com"">agentvictorokle+1339@googlemail.com</a>
<a href=""mailto:agentvictorokle+21291@googlemail.com"">agentvictorokle+21291@googlemail.com</a>
<a href=""mailto:agentvictorokle+26680@googlemail.com"">agentvictorokle+26680@googlemail.com</a>
<a href=""mailto:agentvictorokle+9@googlemail.com"">agentvictorokle+9@googlemail.com</a>
<a href=""mailto:agentvictorokle+15774@googlemail.com"">agentvictorokle+15774@googlemail.com</a>
<a href=""mailto:agentvictorokle+22319@googlemail.com"">agentvictorokle+22319@googlemail.com</a>
<a href=""mailto:agentvictorokle+18773@googlemail.com"">agentvictorokle+18773@googlemail.com</a>
<a href=""mailto:agentvictorokle+4696@googlemail.com"">agentvictorokle+4696@googlemail.com</a>
<a href=""mailto:agentvictorokle+5154@googlemail.com"">agentvictorokle+5154@googlemail.com</a>
<a href=""mailto:agentvictorokle+13982@googlemail.com"">agentvictorokle+13982@googlemail.com</a>
<a href=""mailto:agentvictorokle+291@googlemail.com"">agentvictorokle+291@googlemail.com</a>
<a href=""mailto:agentvictorokle+2865@googlemail.com"">agentvictorokle+2865@googlemail.com</a>
<a href=""mailto:agentvictorokle+14486@googlemail.com"">agentvictorokle+14486@googlemail.com</a>
<a href=""mailto:agentvictorokle+19259@googlemail.com"">agentvictorokle+19259@googlemail.com</a>
<a href=""mailto:agentvictorokle+15228@googlemail.com"">agentvictorokle+15228@googlemail.com</a>
<a href=""mailto:agentvictorokle+14729@googlemail.com"">agentvictorokle+14729@googlemail.com</a>
<a href=""mailto:agentvictorokle+16248@googlemail.com"">agentvictorokle+16248@googlemail.com</a>
<a href=""mailto:agentvictorokle+22134@googlemail.com"">agentvictorokle+22134@googlemail.com</a>
<a href=""mailto:agentvictorokle+9201@googlemail.com"">agentvictorokle+9201@googlemail.com</a>
<a href=""mailto:agentvictorokle+6154@googlemail.com"">agentvictorokle+6154@googlemail.com</a>
<a href=""mailto:agentvictorokle+17011@googlemail.com"">agentvictorokle+17011@googlemail.com</a>
<a href=""mailto:agentvictorokle+14979@googlemail.com"">agentvictorokle+14979@googlemail.com</a>"
wEt41Q3K,Untitled,Mysoft,ASM (NASM),Friday 14th of July 2023 11:46:57 AM CDT,"section .bss
section .data
	oneMessage db ""Hello World"",10
	oneMessageLength equ $-oneMessage
	oneBuffer db 2 "" "", 0Ah
	oneBufferLength equ 2
section .text

	global _start

_start:

	sub esp, oneBufferLength*2	;reserve buffer for chars and eol
	mov esi, oneMessage			;source pointer
	mov edi, esp				;target pointer = stack pointer
	mov ah, 0Ah					;high byte (LITTLE ENDIAN!)
    mov ecx, oneBufferLength 	;how to many chars to copy?
NextCharStdout:
	lodsb						;al = *esi++
	stosw						;*edi++++ = aw
	loop NextCharStdout

; PRINT TO STDOUT (X86)
; --------------------------------------
    mov eax, 4                  ; Syscall 4
    mov ebx, 1                  ; 1 for Stdout
    mov ecx, esp				; 
    mov edx, oneBufferLength*2	; how many to write?
    int 80h
; --------------------------------------
	mov esp, edi				; restore esp

; EXITING THE PROGRAM (X86)
; --------------------------------------
exitProgram:
	mov eax, 1					; Syscall 1
    mov ebx, 0                  ; 0 Exit Status Code Succesful
	int 80h
; --------------------------------------"
RpcwErJB,Untitled,manav_06,C++,Friday 14th of July 2023 11:42:35 AM CDT,"class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();

        vector<vector<int>> dis(n, vector<int>(m, -1));

        queue<pair<int,int>> q;
        // queue<int> rq, cq;
 
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(mat[i][j] == 0) {
                    dis[i][j] = 0;
                    q.push({i,j});
                }
            }
        }

        vector<vector<int>> d = {
            {0, 1},
            {0,-1},
            {1,0},
            {-1,0}
        };
        // i, j

        while(!q.empty()) {
            int row = q.front().first, col = q.front().second;
            assert(dis[row][col] != -1);
            q.pop();
            
            // cout << row << ' ' << col << ""\n"";

            for(int i=0; i<4; i++) {

                int nextR = row + d[i][0];
                int nextC = col + d[i][1];

                if(nextR >= 0 && nextR < n && nextC >= 0 && nextC < m) {
                    if(dis[nextR][nextC] == -1) {
                        q.push({nextR, nextC});
                        assert(mat[nextR][nextC]==1);
                        
                        dis[nextR][nextC] = 1 + dis[row][col];
                    } 
                }

            }

        }
        return dis;
    }
};"
ZVCVFGFE,Python: Youtube video downloader,FocusedWolf,Python,Friday 14th of July 2023 11:09:54 AM CDT,"#!/usr/bin/env python3
# This calls yt-dlp with my preferred options.

# Prevent creation of the __pycache__ directory.
# SOURCE: https://github.com/pytest-dev/pytest/issues/200
import sys
sys.dont_write_bytecode = True

# -----

yt_dlp_path = r'C:\ProgramData\chocolatey\lib\yt-dlp\tools\x64\yt-dlp.exe'
download_directory = 'E:\\'

# -----

def get_video_url():
    url = None
    while True:
        try:
            url = input(' Youtube URL: ')
            if not str_is_none_or_whitespace(url):
               break
            clear_console()
        except ValueError as e:
           print(e)
    return url

def str_is_none_or_whitespace(input):
    return not input or input.isspace()

import os
def clear_console():
    os.system('cls' if os.name in ('nt', 'dos') else 'clear')

import subprocess
def main():
    url = get_video_url()
    #  url = r'https://www.youtube.com/watch?v=ROS3OGABTWg'
    
    print()

    #  subprocess.run([yt_dlp_path, '--list-formats', url])

    print(' Download Directory', download_directory)
    print()

    subprocess.run([yt_dlp_path, '-f', 'bestvideo+bestaudio', '--merge-output-format', 'mp4', '--output', '""%(title)s-%(id)s.%(ext)s""', url], cwd=download_directory)
    
    print()
    wait_for_any_keypress()

# ----- Press any key to continue -----

import sys
def wait_for_any_keypress():
    if sys.platform == 'win32':
        import os
        os.system('pause')
    elif sys.platform in ('linux2', 'darwin'):
        print('Press any key to continue . . .')
        import termios
        import tty
        stdin_file_desc = sys.stdin.fileno()
        old_stdin_tty_attr = termios.tcgetattr(stdin_file_desc)
        try:
            tty.setraw(stdin_file_desc)
            sys.stdin.read(1)
        finally:
            termios.tcsetattr(stdin_file_desc, termios.TCSADRAIN, old_stdin_tty_attr)

if __name__ == '__main__':
    main()"
AjeHjtmD,Typescript Indexable Types,Vanguard4940,TypeScript,Friday 14th of July 2023 11:06:05 AM CDT,"// indexable types

interface indexableFoo{
    [index:number]: boolean|string|number
    length:number,
    0:number
}

type indexableCoo = {
    [index:string]: string|boolean
    name:boolean;
}

const foo:indexableFoo = [1,2,3,4,'hello',false];
const coo:indexableCoo = {
    ""test"":true,
    ""hello"":""Hey Now"",
    name:true
}"
H8aZFerg,sync.sh,willdashwood,Bash,Friday 14th of July 2023 11:05:56 AM CDT,"#!/bin/bash
ip=""195.216.197.52""
rsync -aHAXi /etc/sysconfig/network-scripts/ root@${ip}:/etc/sysconfig/network-scripts-SOURCE_ORIG/
rsync --delete -aHAXi /backup/ root@${ip}:/backup/
rsync --delete -aHAXi --exclude 'virtfs/*' /home/ root@${ip}:/home/
rsync --delete -aHAXi /var/ root@${ip}:/var/
rsync --delete -aHAXi --exclude 'cagefs-skeleton/*' /usr/ root@${ip}:/usr/"
tyKgPLpc,IOI '08 P1 - Type Printer,erek1e,C++,Friday 14th of July 2023 11:05:24 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

size_t commonPrefix(const string &s1, const string &s2) {
    size_t i = 0;
    while (i < s1.size() && i < s2.size() && s1[i] == s2[i]) ++i;
    return i;
}

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int n; cin >> n;
    vector<string> v(1+n);
    int longest = 0;
    for (int i = 1; i <= n; ++i) {
        cin >> v[i];
        if (v[i].size() > v[longest].size()) longest = i;
    }
    
    string maxString = v[longest];
    auto stringLess = [&](const string &s1, const string &s2) {
        for (size_t i = 0; i < s1.size() && i < s2.size(); ++i) {
            if (s1[i] != s2[i]) {
                if (s1[i] == maxString[i]) return false;
                if (s2[i] == maxString[i]) return true;
                return s1[i] < s2[i];
            }
        }
        return s1.size() < s2.size();
    };
    sort(v.begin()+1, v.end(), stringLess);

    string operations;
    for (int i = 1; i <= n; ++i) {
        size_t overlap = commonPrefix(v[i-1], v[i]);
        operations += string(v[i-1].size() - overlap, '-') + v[i].substr(overlap);
        operations.push_back('P');
    }
    cout << operations.size() << '\n';
    for (char c : operations) cout << c << '\n';
    return 0;
}"
iZSwEA89,save_companies.php,rivg26,PHP,Friday 14th of July 2023 11:02:00 AM CDT,"<?php
// email libraries/credentials
require ""{$root}vendor/autoload.php"";
use Mailgun\Mailgun;

require_once ""{$root}constants/registration_emailer.php"";
include_once ""{$root}functions/security.php"";

// get mailgun credentials
$mailgun_domain = EPOSTER_MAILGUN_DOMAIN;
$mailgun_api_key = EPOSTER_MAILGUN_API_KEY;
$mailgun_emailer = EPOSTER_MAILGUN_EMAILER;
$collection = $db->UserAccount;
$document = $collection->findOne(array(""EmpId"" => $emp_id-0));
if($document){
    if($document['Affiliate']!=""NTSI"" AND $document['Affiliate']!=""Renge""){
        $collection1 = $db->Affiliate;
        $document1 = $collection1->findOne(array(""AffiliateId"" => $document['Affiliate']-0));
        if($document1){
            if(isset($document1['MailgunDomain'])){
                if($document1['MailgunDomain']!='' AND $document1['MailgunAPIKey']!='' AND $document1['MailgunEmail']!=''){
                    $mailgun_domain = $document1['MailgunDomain'];
                    $mailgun_api_key = $document1['MailgunAPIKey'];
                    $mailgun_emailer = $document1['MailgunEmail'];
                }
            }
        }
    }
}

// get affiliate name
if($affiliate_id!='Renge' AND $affiliate_id!='NTSI'){
    $collection = $db->Affiliate;
    $document = $collection->findOne(array('AffiliateId' => $affiliate_id-0));
    $affiliate_name = $document['AffiliateName'];
} else {
    $affiliate_name = 'ePoster Service';
}

// get affiliate admin email
$affiliate_admin_email = $affiliate_name;
$collection = $db->UserAccount;
$cursor = $collection->find(array(""Affiliate"" => ""{$affiliate_id}""));
foreach($cursor as $document){
    if(strstr(strtolower($document['Designation']), ""affiliate admin"")){
        $affiliate_admin_email = $document['EmailAddress'];
        break;
    }
}

// init array for email data
$cdata = [];

// verify all requirements
for($i=0; $i<count($companies); $i++){
    if($companies[$i]['validate_company_order_num'] == 1 AND
        $companies[$i]['validate_company_name'] == 1 AND 
        $companies[$i]['validate_company_client_id'] == 1 AND
        $companies[$i]['validate_company_address'] == 1 AND 
        $companies[$i]['validate_company_address2'] == 1 AND
        $companies[$i]['validate_company_city'] == 1 AND 
        $companies[$i]['validate_company_state'] == 1 AND 
        $companies[$i]['validate_company_zip'] == 1 AND 
        $companies[$i]['validate_company_contact_person_fname'] == 1 AND
        $companies[$i]['validate_company_contact_person_lname'] == 1 AND
        $companies[$i]['validate_company_email'] == 1 AND 
        $companies[$i]['validate_company_phone'] == 1 AND
        $companies[$i]['validate_company_seats'] == 1 AND 
        $companies[$i]['validate_company_logo'] == 1 AND 
        $companies[$i]['validate_eposter_course'] == 1 AND 
        $companies[$i]['verify_company_exist'] == 1 AND
        $companies[$i]['verify_state'] == 1 AND
        ($companies[$i]['verify_logo'] != 'x')){

        // get cmpany state
        foreach($states as $abbr => $state){
            if($state == $companies[$i]['company_state']){
                $company_state = $abbr;
                break;
            }
        }
        
        // get new affiliate id
        $new_company_id=get_next_primary_key_id($db,Company,""CompanyId"");

        // save logo image from URL
        $company_logo = '';
        if($companies[$i]['company_logo'] != ''){
            if($companies[$i]['verify_logo'] != 1){
                $ext = $companies[$i]['verify_logo'];
                $company_logo = save_logo_image($companies[$i]['company_logo'], '../uploads', $new_company_id, $ext);
            }     
        }

        // company admin
        $company_admin_fname = $companies[$i]['company_contact_person_fname'];
        $company_admin_lname = $companies[$i]['company_contact_person_lname'];

        // concatenate contact person names
        $contact_person = ""{$companies[$i]['company_contact_person_fname']} {$companies[$i]['company_contact_person_lname']}"";

        // get company address
        if($companies[$i]['company_address2'] != ''){
            $address2 = ' ' . $companies[$i]['company_address2'];
        } else {
            $address2 = '';
        }
        $company_address = $companies[$i]['company_address'] . $address2;

        if($companies[$i]['company_order_num'] != ''){
            $company_order_num = $companies[$i]['company_order_num'];
            if(is_numeric($company_order_num)){
                $company_order_num = $company_order_num - 0;
            }
        } else {
            $company_order_num = '';
        }
        if($companies[$i]['company_client_id'] != ''){
            $company_client_id = $companies[$i]['company_client_id'];
            if(is_numeric($company_client_id)){
                $company_client_id = $company_client_id - 0;
            }
        } else {
            $company_client_id = '';
        }

        if($companies[$i]['company_seats'] != ''){
            $company_seats = $companies[$i]['company_seats'] - 0;
        } else {
            $company_seats = '';
        }

        $company_zip = $companies[$i]['company_zip'] - 0;

        if(strtolower($affiliate_name) == 'trinet' || strtolower($affiliate_name) == 'trinet admins'){
            $email_list = [
                'eposter_employee_registration',
                'eposter_employee_update_alert'
            ];
        }
        else{
            $email_list = [
                'eposter_employee_registration',
                'eposter_employee_update_alert',
                'eposter_employee_eminders'
            ];
        }
        
        // record company
        $document = [
            'CompanyId' => $new_company_id,
            'CompanyName' => $companies[$i]['company_name'],
            'AffiliateId' => ""{$affiliate_id}"",
            'AffiliateName' => $affiliate_name,
            'CompanyLogo' => $company_logo,
            'CompanyAddress' => $company_address,
            'CompanyCity' => $companies[$i]['company_city'],
            'CompanyState' => $company_state,
            'CompanyZip' => ""{$company_zip}"",
            'CompanyStateName' => $companies[$i]['company_state'],
            'CompanyContactPerson' => $contact_person,
            'CompanyAdminFName' => $company_admin_fname,
            'CompanyAdminLName' => $company_admin_lname,
            'CompanyPhone' => $companies[$i]['company_phone'],
            'CompanyFax' => '',
            'CompanyEmail' => $companies[$i]['company_email'],
            'CompanyStatus' => 'active',
            'CompanySeats' => ""{$company_seats}"",
            'CompanyStartDate' => '',
            'CompanyEndDate' => '',
            'CompanyCode' => '',
            'CompanyOrderNum' => ""{$company_order_num}"",
            'CompanyClientId' => ""{$company_client_id}"",
            'EPosterCompany' => 'true',
            'EmailNotifications' => $email_list
        ];
        $collection = $db->Company;
        $collection->insert($document);

        // generate new employee id
        $new_emp_id=get_next_primary_key_id($db, Employee, ""EmpId"");

        // create new employee record for company admin
        $document = [
                    ""EmpId"" => $new_emp_id,
                    ""FirstName"" => $companies[$i]['company_contact_person_fname'],
                    ""MiddleName"" => '',
                    ""LastName"" => $companies[$i]['company_contact_person_lname'],
                    ""Prefix"" => '',
                    ""JobTitle"" => ""Company Admin"",
                    ""EmailAddress"" => $companies[$i]['company_email']
        ];
        $collection = $db->Employee;
        $collection->insert($document);

        // generate temporary password
        $temp_password = rand();
        $hpassword=sha1($temp_password);
        $password=create_hash($temp_password);
        
        // get user states
        $user_states = [""al"",""ak"",""az"",""ar"",""ca"",""co"",""ct"",""de"",""fl"",""ga"",""hi"",""id"",""il"",""in"",""ia"",
                        ""ks"",""ky"",""la"",""me"",""md"",""ma"",""mi"",""mn"",""ms"",""mo"",""mt"",""ne"",""nv"",""nh"",""nj"",
                        ""nm"",""ny"",""nc"",""nd"",""oh"",""ok"",""or"",""pa"",""ri"",""sc"",""sd"",""tn"",""tx"",""ut"",""vt"",""va"",""wa"",""wv"",""wi""];
        
        // determine company admin fullname
        $company_admin_fullname = ""{$companies[$i]['company_contact_person_fname']} {$companies[$i]['company_contact_person_lname']}"";

        // generate company admin username
        $probe = str_replace("" "", """", ""{$companies[$i]['company_contact_person_fname']}{$companies[$i]['company_contact_person_lname']}"");
        $collection = $db->UserAccount;
        $criteria = array('$or' => array(
                                        array(""Username"" => $probe),
                                        array(""Username"" => strtolower($probe)),
                                        array(""Username"" => strtoupper($probe))
        ));
        $document = $collection->findOne($criteria);
        if($document){
            for($j=1;;$j++){
                $criteria = array('$or' => array(
                                    array(""Username"" => ""{$probe}{$j}""),
                                    array(""Username"" => strtolower(""{$probe}{$j}"")),
                                    array(""Username"" => strtoupper(""{$probe}{$j}""))
                ));
                $document = $collection->findOne($criteria);
                if(!$document){
                    $company_admin_username = strtolower(""{$probe}{$j}"");
                    break;
                }
            }
        } else {
            $company_admin_username = strtolower($probe);
        }
        
        // save new user account
        $document = [
            ""EmpId"" => $new_emp_id,
            ""Username"" => $company_admin_username,
            ""Password"" => $password,
            ""Status"" => ""active"",
            ""UDateCreated"" => date('U')-0,
            ""UDateModified"" => date('U')-0,
            ""Fullname"" => $company_admin_fullname,
            ""Designation"" => ""Company Admin"",
            ""UserStates"" => $user_states,
            ""Affiliate"" => ""{$affiliate_id}"",
            ""AffiliateName"" => $affiliate_name,
            ""EmailAddress"" => $companies[$i]['company_email'],
            ""Company"" => $new_company_id,
            ""CompanyName"" => $companies[$i]['company_name'],
            ""PrimarySender"" => '1'
        ];
        $collection = $db->UserAccount;
        $collection->insert($document);

        // save user states
        $user_statez = '';
        for($i1=0; $i1<count($user_states); $i1++){
            $c = $user_statez!='' ? ',' : '';
            $user_statez .= ""{$c}{$user_states[$i1]}"";
        }
        $document = [
                    ""UserId"" => $new_emp_id,
                    ""States"" => $user_statez
        ];
        $collection = $db->UserStates;
        $collection->insert($document);
        
        // save user modules and its restrictions
        $user_modules = [
            ""ePosters"",
            ""Fillable Notices"",
            ""Reports"",
            ""Student Management"",
            ""Subscription Management""
        ];
        $collection = $db->Module;
        $collection1 = $db->UserModules;
        $collection2 = $db->UserModuleRestrictions;
        for($i1=0; $i1<count($user_modules); $i1++){
            $document = $collection->findOne(array(""ModuleName"" => $user_modules[$i1]));
            $document1 = [
                            ""UserId"" => $new_emp_id,
                            ""ModuleId"" => $document['ModuleId']
            ];
            $collection1->insert($document1);
            $document2 = [
                            ""UserId"" => $new_emp_id,
                            ""ModuleId"" => $document['ModuleId'],
                            ""Restriction"" => ""RW""
            ];
            $collection2->insert($document2);
        }
        
        // save password in passwords history
        $next_passhistory_id=get_next_primary_key_id($db,PasswordsHistory,""PasswordHistoryId"");
        $document = [
            ""PasswordHistoryId"" => $next_passhistory_id,
            ""EmpId"" => $new_emp_id,
            ""UDateCreated"" => $udate,
            ""Password"" => $hpassword
        ];
        $collection = $db->PasswordsHistory;
        $collection->insert($document);

        // save email data
        $admin_user_data = [
            'admin_fname' => $companies[$i]['company_contact_person_fname'],
            'admin_mname' => '',
            'admin_lname' => $companies[$i]['company_contact_person_lname'],
            'admin_suffix' => '',
            'admin_email' => $companies[$i]['company_email'],
            'admin_username' => $company_admin_username,
            'admin_password' => $temp_password
        ];
        $company_data = [
            'company_id' => $new_company_id,
            'company_order_num' => $companies[$i]['company_order_num'],
            'company_name' => $companies[$i]['company_name'],
            'company_client_id' => $companies[$i]['company_client_id'],
            'company_address' => $companies[$i]['company_address'],
            'company_address2' => $companies[$i]['company_address2'],
            'company_city' => $companies[$i]['company_city'],
            'company_state' => $companies[$i]['company_state'],
            'company_zip' => number_format($companies[$i]['company_zip'], 0),
            'company_admin_fname' => ucwords(strtolower($companies[$i]['company_contact_person_fname'])),
            'company_contact_person' => ""{$companies[$i]['company_contact_person_fname']} {$companies[$i]['company_contact_person_lname']}"",
            'company_email' => $companies[$i]['company_email'],
            'company_phone' => $companies[$i]['company_phone'],
            'company_seats' => $companies[$i]['company_seats'],
            'company_logo' => $companies[$i]['company_logo']
        ];
        $x = [
            'admin_user' => $admin_user_data,
            'company' => $company_data,
            'eposter_course' => ''
        ];

        // get new course id
        $new_course_id = get_next_primary_key_id($db, Course, ""CourseId"");

        // generate eposter course code
        $collection = $db->Course;
        $document = $collection->findOne(array(""CourseCode"" => ""COMPANY-EPOSTER-{$new_course_id}""));
        if($document){
            for($j=1;;$j++){
                $document = $collection->findOne(array(""CourseCode"" => ""COMPANY-EPOSTER-{$new_course_id}-{$j}""));
                if(!$document){
                    $eposter_course_code = ""COMPANY-EPOSTER-{$new_course_id}-{$j}"";
                    break;
                }
            }
        } else {
            $eposter_course_code = ""COMPANY-EPOSTER-{$new_course_id}"";
        }

        $document = [
            ""CourseId"" => $new_course_id,
            ""CourseCode"" => $eposter_course_code,
            ""CourseName"" => $companies[$i]['company_name'],
            ""CourseDescription"" => ""EPosters for {$companies[$i]['company_name']}"",
            ""ProductName"" => $eposter_course_code,
            ""OnlineOrClassroom"" => ""online"",
            ""CourseStates"" => ""al,ak,az,ar,ca,co,ct,de,fl,ga,hi,id,il,in,ia,ks,ky,la,me,md,ma,mi,mn,ms,mo,mt,ne,nv,nh,nj,nm,ny,nc,nd,oh,ok,or,pa,ri,sc,sd,tn,tx,ut,vt,va,wa,wv,wi"",
            ""CourseOwnership"" => ""{$affiliate_id}"",
            ""CourseImage"" => """",
            ""NumSecQuestions"" => ""0"",
            ""TemplateID"" => """",
            ""Language"" => ""EN"",
            ""AllowPayLater"" => ""true"",
            ""CitationType"" => ""eposter"",
            ""ReminderLetter"" => ""no"",
            ""ReferralReceived"" => ""no"",
            ""CStates"" => $user_states,
            ""StudentCourseExpiration"" => 0,
            ""Company"" => $new_company_id,
            ""CompanyName"" => $companies[$i]['company_name'],
            ""Price"" => 0,
            ""MerchantId"" => 0,
            ""BypassPayment"" => ""true""
        ];
        $collection = $db->Course;
        $collection->insert($document);

        $eposter_course_data = [
            'eposter_course_code' => $eposter_course_code,
            'eposter_course_name' => $companies[$i]['company_name']
        ];
        $x['eposter_course'] = $eposter_course_data;

        array_push($cdata, $x);
    }
}

// get current user's email address
$collection = $db->UserAccount;
$document = $collection->findOne(array('EmpId' => $eid-0));
$user_email = $document['EmailAddress'];
if($eid != 1){
    if(isset($document['AffiliateName'])){
        $affiliate_name = $document['AffiliateName'];
        if($affiliate_name=='NTSI' OR $affiliate_name=='Renege'){
            $affiliate_name = 'ePosterService';
        }
    } else {
        $affiliate_name = '';
    }
} else {
    $affiliate_name = 'ePosterService';
}

// construct email contents for affiliate admin
list($email_subject, $email_body) = get_affiliate_email_contents($cdata);

// settings whether to send or not affiliate and employer admin emails
$send_email_affiliate_admin = 0;
$send_email_employer_admins = 0;

// send email to affiliate admin
if($send_email_affiliate_admin){
    $mg = new Mailgun($mailgun_api_key);
    $messageBldr = $mg->MessageBuilder();
    $messageBldr->setFromAddress($mailgun_emailer);
    $messageBldr->addToRecipient($user_email);
    $messageBldr->setSubject($email_subject);
    $messageBldr->setHtmlBody($email_body);
    $mg->post(""{$mailgun_domain}/messages"", $messageBldr->getMessage());
}

// send email notification to company admins
if($send_email_employer_admins){
    for($i=0; $i<count($cdata); $i++){
        list($email_subject, $email_body) = get_company_email_contents($cdata, $i, $affiliate_name, $affiliate_admin_email);

        // send email to affiliate admin
        $mg = new Mailgun($mailgun_api_key);
        $messageBldr = $mg->MessageBuilder();
        $messageBldr->setFromAddress($mailgun_emailer);
        $messageBldr->addToRecipient($cdata[$i]['admin_user']['admin_email']);
        $messageBldr->setSubject($email_subject);
        $messageBldr->setHtmlBody($email_body);
        $mg->post(""{$mailgun_domain}/messages"", $messageBldr->getMessage());
    }
}

// return finished
echo json_encode(['status' => 'ok']);


?>"
UQcsEJv5,IOI '04 P4 - Phidias,erek1e,C++,Friday 14th of July 2023 10:48:31 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int W, H; cin >> W >> H;
    vector<vector<int>> minWasted(1+W, vector<int>(1+H));
    for (int w = 0; w <= W; ++w) {
        for (int h = 0; h <= H; ++h) minWasted[w][h] = w*h;
    }

    int N; cin >> N;
    while (N--) {
        int w, h; cin >> w >> h;
        minWasted[w][h] = 0;
    }

    for (int w = 1; w <= W; ++w) {
        for (int h = 1; h <= H; ++h) {
            for (int w1 = 1; w1 < w; ++w1) { // vertical cut
                minWasted[w][h] = min(minWasted[w][h], minWasted[w1][h] + minWasted[w-w1][h]);
            }
            for (int h1 = 1; h1 < h; ++h1) { // horizontal cut
                minWasted[w][h] = min(minWasted[w][h], minWasted[w][h1] + minWasted[w][h-h1]);
            }
        }
    }
    cout << minWasted[W][H] << endl;
    return 0;
}"
ir8N2pgp,Androd for Computercraft,CACKE228,Lua,Friday 14th of July 2023 10:40:35 AM CDT,"tArgs = {...}

if not term.isColor or not term.isColor() then
	error('Jopa chlen requires (gold) Computer')
end

_jstr = [[
	local base = _G

	-----------------------------------------------------------------------------
	-- Module declaration
	-----------------------------------------------------------------------------

	-- Public functions

	-- Private functions
	local decode_scanArray
	local decode_scanComment
	local decode_scanConstant
	local decode_scanNumber
	local decode_scanObject
	local decode_scanString
	local decode_scanWhitespace
	local encodeString
	local isArray
	local isEncodable

	-----------------------------------------------------------------------------
	-- PUBLIC FUNCTIONS
	-----------------------------------------------------------------------------
	--- Encodes an arbitrary Lua object / variable.
	-- @param v The Lua object / variable to be JSON encoded.
	-- @return String containing the JSON encoding in internal Lua string format (i.e. not unicode)
	function encode (v)
	  -- Handle nil values
	  if v==nil then
	    return ""null""
	  end
	  
	  local vtype = base.type(v)  

	  -- Handle strings
	  if vtype=='string' then    
	    return '""' .. encodeString(v) .. '""'      -- Need to handle encoding in string
	  end
	  
	  -- Handle booleans
	  if vtype=='number' or vtype=='boolean' then
	    return base.tostring(v)
	  end
	  
	  -- Handle tables
	  if vtype=='table' then
	    local rval = {}
	    -- Consider arrays separately
	    local bArray, maxCount = isArray(v)
	    if bArray then
	      for i = 1,maxCount do
	        table.insert(rval, encode(v[i]))
	      end
	    else -- An object, not an array
	      for i,j in base.pairs(v) do
	        if isEncodable(i) and isEncodable(j) then
	          table.insert(rval, '""' .. encodeString(i) .. '"":' .. encode(j))
	        end
	      end
	    end
	    if bArray then
	      return '[' .. table.concat(rval,',') ..']'
	    else
	      return '{' .. table.concat(rval,',') .. '}'
	    end
	  end
	  
	  -- Handle null values
	  if vtype=='function' and v==null then
	    return 'null'
	  end
	  
	  base.assert(false,'encode attempt to encode unsupported type ' .. vtype .. ':' .. base.tostring(v))
	end


	--- Decodes a JSON string and returns the decoded value as a Lua data structure / value.
	-- @param s The string to scan.
	-- @param [startPos] Optional starting position where the JSON string is located. Defaults to 1.
	-- @param Lua object, number The object that was scanned, as a Lua table / string / number / boolean or nil,
	-- and the position of the first character after
	-- the scanned JSON object.
	function decode(s, startPos)
	  startPos = startPos and startPos or 1
	  startPos = decode_scanWhitespace(s,startPos)
	  base.assert(startPos<=string.len(s), 'Unterminated JSON encoded object found at position in [' .. s .. ']')
	  local curChar = string.sub(s,startPos,startPos)
	  -- Object
	  if curChar=='{' then
	    return decode_scanObject(s,startPos)
	  end
	  -- Array
	  if curChar=='[' then
	    return decode_scanArray(s,startPos)
	  end
	  -- Number
	  if string.find(""+-0123456789.e"", curChar, 1, true) then
	    return decode_scanNumber(s,startPos)
	  end
	  -- String
	  if curChar=='""' or curChar==""'"" then
	    return decode_scanString(s,startPos)
	  end
	  if string.sub(s,startPos,startPos+1)=='/*' then
	    return decode(s, decode_scanComment(s,startPos))
	  end
	  -- Otherwise, it must be a constant
	  return decode_scanConstant(s,startPos)
	end

	--- The null function allows one to specify a null value in an associative array (which is otherwise
	-- discarded if you set the value with 'nil' in Lua. Simply set t = { first=json.null }
	function null()
	  return null -- so json.null() will also return null ;-)
	end
	-----------------------------------------------------------------------------
	-- Internal, PRIVATE functions.
	-- Following a Python-like convention, I have prefixed all these 'PRIVATE'
	-- functions with an underscore.
	-----------------------------------------------------------------------------

	--- Scans an array from JSON into a Lua object
	-- startPos begins at the start of the array.
	-- Returns the array and the next starting position
	-- @param s The string being scanned.
	-- @param startPos The starting position for the scan.
	-- @return table, int The scanned array as a table, and the position of the next character to scan.
	function decode_scanArray(s,startPos)
	  local array = {}   -- The return value
	  local stringLen = string.len(s)
	  base.assert(string.sub(s,startPos,startPos)=='[','decode_scanArray called but array does not start at position ' .. startPos .. ' in string:\n'..s )
	  startPos = startPos + 1
	  -- Infinite loop for array elements
	  repeat
	    startPos = decode_scanWhitespace(s,startPos)
	    base.assert(startPos<=stringLen,'JSON String ended unexpectedly scanning array.')
	    local curChar = string.sub(s,startPos,startPos)
	    if (curChar==']') then
	      return array, startPos+1
	    end
	    if (curChar==',') then
	      startPos = decode_scanWhitespace(s,startPos+1)
	    end
	    base.assert(startPos<=stringLen, 'JSON String ended unexpectedly scanning array.')
	    object, startPos = decode(s,startPos)
	    table.insert(array,object)
	  until false
	end

	--- Scans a comment and discards the comment.
	-- Returns the position of the next character following the comment.
	-- @param string s The JSON string to scan.
	-- @param int startPos The starting position of the comment
	function decode_scanComment(s, startPos)
	  base.assert( string.sub(s,startPos,startPos+1)=='/*', ""decode_scanComment called but comment does not start at position "" .. startPos)
	  local endPos = string.find(s,'*/',startPos+2)
	  base.assert(endPos~=nil, ""Unterminated comment in string at "" .. startPos)
	  return endPos+2  
	end

	--- Scans for given constants: true, false or null
	-- Returns the appropriate Lua type, and the position of the next character to read.
	-- @param s The string being scanned.
	-- @param startPos The position in the string at which to start scanning.
	-- @return object, int The object (true, false or nil) and the position at which the next character should be 
	-- scanned.
	function decode_scanConstant(s, startPos)
	  local consts = { [""true""] = true, [""false""] = false, [""null""] = nil }
	  local constNames = {""true"",""false"",""null""}

	  for i,k in base.pairs(constNames) do
	    --print (""["" .. string.sub(s,startPos, startPos + string.len(k) -1) ..""]"", k)
	    if string.sub(s,startPos, startPos + string.len(k) -1 )==k then
	      return consts[k], startPos + string.len(k)
	    end
	  end
	  base.assert(nil, 'Failed to scan constant from string ' .. s .. ' at starting position ' .. startPos)
	end

	--- Scans a number from the JSON encoded string.
	-- (in fact, also is able to scan numeric +- eqns, which is not
	-- in the JSON spec.)
	-- Returns the number, and the position of the next character
	-- after the number.
	-- @param s The string being scanned.
	-- @param startPos The position at which to start scanning.
	-- @return number, int The extracted number and the position of the next character to scan.
	function decode_scanNumber(s,startPos)
	  local endPos = startPos+1
	  local stringLen = string.len(s)
	  local acceptableChars = ""+-0123456789.e""
	  while (string.find(acceptableChars, string.sub(s,endPos,endPos), 1, true)
	   and endPos<=stringLen
	   ) do
	    endPos = endPos + 1
	  end
	  local stringValue = 'return ' .. string.sub(s,startPos, endPos-1)
	  local stringEval = base.loadstring(stringValue)
	  base.assert(stringEval, 'Failed to scan number [ ' .. stringValue .. '] in JSON string at position ' .. startPos .. ' : ' .. endPos)
	  return stringEval(), endPos
	end

	--- Scans a JSON object into a Lua object.
	-- startPos begins at the start of the object.
	-- Returns the object and the next starting position.
	-- @param s The string being scanned.
	-- @param startPos The starting position of the scan.
	-- @return table, int The scanned object as a table and the position of the next character to scan.
	function decode_scanObject(s,startPos)
	  local object = {}
	  local stringLen = string.len(s)
	  local key, value
	  base.assert(string.sub(s,startPos,startPos)=='{','decode_scanObject called but object does not start at position ' .. startPos .. ' in string:\n' .. s)
	  startPos = startPos + 1
	  repeat
	    startPos = decode_scanWhitespace(s,startPos)
	    base.assert(startPos<=stringLen, 'JSON string ended unexpectedly while scanning object.')
	    local curChar = string.sub(s,startPos,startPos)
	    if (curChar=='}') then
	      return object,startPos+1
	    end
	    if (curChar==',') then
	      startPos = decode_scanWhitespace(s,startPos+1)
	    end
	    base.assert(startPos<=stringLen, 'JSON string ended unexpectedly scanning object.')
	    -- Scan the key
	    key, startPos = decode(s,startPos)
	    base.assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)
	    startPos = decode_scanWhitespace(s,startPos)
	    base.assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)
	    base.assert(string.sub(s,startPos,startPos)==':','JSON object key-value assignment mal-formed at ' .. startPos)
	    startPos = decode_scanWhitespace(s,startPos+1)
	    base.assert(startPos<=stringLen, 'JSON string ended unexpectedly searching for value of key ' .. key)
	    value, startPos = decode(s,startPos)
	    object[key]=value
	  until false  -- infinite loop while key-value pairs are found
	end

	--- Scans a JSON string from the opening inverted comma or single quote to the
	-- end of the string.
	-- Returns the string extracted as a Lua string,
	-- and the position of the next non-string character
	-- (after the closing inverted comma or single quote).
	-- @param s The string being scanned.
	-- @param startPos The starting position of the scan.
	-- @return string, int The extracted string as a Lua string, and the next character to parse.
	function decode_scanString(s,startPos)
	  base.assert(startPos, 'decode_scanString(..) called without start position')
	  local startChar = string.sub(s,startPos,startPos)
	  base.assert(startChar==""'"" or startChar=='""','decode_scanString called for a non-string')
	  local escaped = false
	  local endPos = startPos + 1
	  local bEnded = false
	  local stringLen = string.len(s)
	  repeat
	    local curChar = string.sub(s,endPos,endPos)
	    -- Character escaping is only used to escape the string delimiters
	    if not escaped then 
	      if curChar=='\\' then
	        escaped = true
	      else
	        bEnded = curChar==startChar
	      end
	    else
	      -- If we're escaped, we accept the current character come what may
	      escaped = false
	    end
	    endPos = endPos + 1
	    base.assert(endPos <= stringLen+1, ""String decoding failed: unterminated string at position "" .. endPos)
	  until bEnded
	  local stringValue = 'return ' .. string.sub(s, startPos, endPos-1)
	  local stringEval = base.loadstring(stringValue)
	  base.assert(stringEval, 'Failed to load string [ ' .. stringValue .. '] in JSON4Lua.decode_scanString at position ' .. startPos .. ' : ' .. endPos)
	  return stringEval(), endPos  
	end

	--- Scans a JSON string skipping all whitespace from the current start position.
	-- Returns the position of the first non-whitespace character, or nil if the whole end of string is reached.
	-- @param s The string being scanned
	-- @param startPos The starting position where we should begin removing whitespace.
	-- @return int The first position where non-whitespace was encountered, or string.len(s)+1 if the end of string
	-- was reached.
	function decode_scanWhitespace(s,startPos)
	  local whitespace="" \n\r\t""
	  local stringLen = string.len(s)
	  while ( string.find(whitespace, string.sub(s,startPos,startPos), 1, true)  and startPos <= stringLen) do
	    startPos = startPos + 1
	  end
	  return startPos
	end

	--- Encodes a string to be JSON-compatible.
	-- This just involves back-quoting inverted commas, back-quotes and newlines, I think ;-)
	-- @param s The string to return as a JSON encoded (i.e. backquoted string)
	-- @return The string appropriately escaped.
	function encodeString(s)
	  s = string.gsub(s,'\\','\\\\')
	  s = string.gsub(s,'""','\\""')
	  s = string.gsub(s,""'"",""\\'"")
	  s = string.gsub(s,'\n','\\n')
	  s = string.gsub(s,'\t','\\t')
	  return s 
	end

	-- Determines whether the given Lua type is an array or a table / dictionary.
	-- We consider any table an array if it has indexes 1..n for its n items, and no
	-- other data in the table.
	-- I think this method is currently a little 'flaky', but can't think of a good way around it yet...
	-- @param t The table to evaluate as an array
	-- @return boolean, number True if the table can be represented as an array, false otherwise. If true,
	-- the second returned value is the maximum
	-- number of indexed elements in the array. 
	function isArray(t)
	  -- Next we count all the elements, ensuring that any non-indexed elements are not-encodable 
	  -- (with the possible exception of 'n')
	  local maxIndex = 0
	  for k,v in base.pairs(t) do
	    if (base.type(k)=='number' and math.floor(k)==k and 1<=k) then   -- k,v is an indexed pair
	      if (not isEncodable(v)) then return false end   -- All array elements must be encodable
	      maxIndex = math.max(maxIndex,k)
	    else
	      if (k=='n') then
	        if v ~= table.getn(t) then return false end  -- False if n does not hold the number of elements
	      else -- Else of (k=='n')
	        if isEncodable(v) then return false end
	      end  -- End of (k~='n')
	    end -- End of k,v not an indexed pair
	  end  -- End of loop across all pairs
	  return true, maxIndex
	end

	--- Determines whether the given Lua object / table / variable can be JSON encoded. The only
	-- types that are JSON encodable are: string, boolean, number, nil, table and json.null.
	-- In this implementation, all other types are ignored.
	-- @param o The object to examine.
	-- @return boolean True if the object should be JSON encoded, false if it should be ignored.
	function isEncodable(o)
	  local t = base.type(o)
	  return (t=='string' or t=='boolean' or t=='number' or t=='nil' or t=='table') or (t=='function' and o==null) 
	end
]]

function loadJSON()
	local sName = 'JSON'
		
	local tEnv = {}
	setmetatable( tEnv, { __index = _G } )
	local fnAPI, err = loadstring(_jstr)
	if fnAPI then
		setfenv( fnAPI, tEnv )
		fnAPI()
	else
		printError( err )
		return false
	end
	
	local tAPI = {}
	for k,v in pairs( tEnv ) do
		tAPI[k] =  v
	end
	
	_G[sName] = tAPI
	return true
end

local mainTitle = 'UltimateOS Installer'
local subTitle = 'Please wait...'

function Draw()
	sleep(0)
	term.setBackgroundColour(colours.white)
	term.clear()
	local w, h = term.getSize()
	term.setTextColour(colours.lightBlue)
	term.setCursorPos(math.ceil((w-#mainTitle)/2), 8)
	term.write(mainTitle)
	term.setTextColour(colours.blue)
	term.setCursorPos(math.ceil((w-#subTitle)/2), 10)
	term.write(subTitle)
end

tArgs = {...}

Settings = {
	InstallPath = '/', --Where the program's installed, don't always asume root (if it's run under something like OneOS)
	Hidden = false, --Whether or not the update is hidden (doesn't write to the screen), useful for background updates
	GitHubUsername = 'PlushPersik', --Your GitHub username as it appears in the URL
	GitHubRepoName = 'UltimateOS', --The repo name as it appears in the URL
	DownloadReleases = false, --If true it will download the latest release, otherwise it will download the files as they currently appear
	UpdateFunction = nil, --Sent when something happens (file downloaded etc.)
	TotalBytes = 0, --Do not change this value (especially programatically)!
	DownloadedBytes = 0, --Do not change this value (especially programatically)!
	Status = '',
	SecondaryStatus = '',
}

loadJSON()

function downloadJSON(path)
	local _json = http.get(path)
	if not _json then
		error('Could not download: '..path..' Check your connection.')
	end
	return JSON.decode(_json.readAll())
end

if http then
	subTitle = 'HTTP enabled, attempting update...'
	Draw()
else
	subTitle = 'HTTP is required to update.'
	Draw()
	error('')
end

subTitle = 'Determining Latest Version'
Draw()
local releases = downloadJSON('https://api.github.com/repos/'..Settings.GitHubUsername..'/'..Settings.GitHubRepoName..'/releases')
local latestReleaseTag = releases[1].tag_name
if not tArgs or #tArgs ~= 1 and tArgs[1] ~= 'beta' then
	for i, v in ipairs(releases) do
		if not v.prerelease then
			latestReleaseTag = v.tag_name
			break
		end
	end
end
subTitle = 'Optaining Latest Version URL'
Draw()
local refs = downloadJSON('https://api.github.com/repos/'..Settings.GitHubUsername..'/'..Settings.GitHubRepoName..'/git/refs/tags/'..latestReleaseTag)
local latestReleaseSha = refs.object.sha

subTitle = 'Downloading File Listing'
Draw()

local tree = downloadJSON('https://api.github.com/repos/'..Settings.GitHubUsername..'/'..Settings.GitHubRepoName..'/git/trees/'..latestReleaseSha..'?recursive=1').tree

local blacklist = {
	'/.gitignore',
	'/README.md',
	'/TODO',
	'/Desktop/.Desktop.settings',
	'/.version'
}

function isBlacklisted(path)
	for i, item in ipairs(blacklist) do
		if item == path then
			return true
		end
	end
	return false
end

Settings.TotalFiles = 0
Settings.TotalBytes = 0
for i, v in ipairs(tree) do
	if not isBlacklisted(Settings.InstallPath..v.path) and v.size then
		Settings.TotalBytes = Settings.TotalBytes + v.size
		Settings.TotalFiles = Settings.TotalFiles + 1
	end
end

Settings.DownloadedBytes = 0
Settings.DownloadedFiles = 0
function downloadBlob(v)
	if isBlacklisted(Settings.InstallPath..v.path) then
		return
	end
	if v.type == 'tree' then
		-- subTitle = 'Making folder: '..'/'..Settings.InstallPath..v.path
		Draw()
		fs.makeDir('/'..Settings.InstallPath..v.path)
	else
		-- subTitle = 'Starting download for: '..Settings.InstallPath..v.path
		Draw()

        local tries, f = 0
        repeat 
			f = http.get(('https://raw.github.com/'..Settings.GitHubUsername..'/'..Settings.GitHubRepoName..'/'..latestReleaseTag..Settings.InstallPath..v.path):gsub(' ','%%20'))
                if not f then sleep(5) end
                tries = tries + 1
        until tries > 5 or f

		if not f then
			error('Downloading failed, try again. '..('https://raw.github.com/'..Settings.GitHubUsername..'/'..Settings.GitHubRepoName..'/'..latestReleaseTag..Settings.InstallPath..v.path):gsub(' ','%%20'))
		end

		local h = fs.open('/'..Settings.InstallPath..v.path, 'w')
		h.write(f.readAll())
		h.close()
		-- subTitle = 'Downloading: ' .. math.floor(100*(Settings.DownloadedBytes/Settings.TotalBytes))..'%'
		subTitle = 'Downloading: ' .. math.floor(100*(Settings.DownloadedFiles/Settings.TotalFiles))..'%' -- using the number of files over the number of bytes actually appears to be more accurate, the connection takes longer than sending the data
		-- subTitle = '('..math.floor(100*(Settings.DownloadedBytes/Settings.TotalBytes))..'%) Downloaded: '..Settings.InstallPath..v.path
		Draw()
		if v.size then
			Settings.DownloadedBytes = Settings.DownloadedBytes + v.size
			Settings.DownloadedFiles = Settings.DownloadedFiles + 1
		end
	end
end

local connectionLimit = 5
local downloads = {}
for i, v in ipairs(tree) do
	local queueNumber = math.ceil(i / connectionLimit)
	if not downloads[queueNumber] then
		downloads[queueNumber] = {}
	end
	table.insert(downloads[queueNumber], function()
		downloadBlob(v)
	end)
end

for i, queue in ipairs(downloads) do
	parallel.waitForAll(unpack(queue))
end

local h = fs.open('/System/.version', 'w')
h.write(latestReleaseTag)
h.close()

mainTitle = 'Installation Complete!'
subTitle = 'Rebooting in 1 second...'
Draw()
sleep(1)
os.reboot()"
fAmJABF9,lesson5_322,Petro_zzz,C++,Friday 14th of July 2023 10:16:55 AM CDT,"#include <iostream>
#include <math.h>

using namespace std;

void test_convert() {
	int Щ = 12;
	cout << Щ << endl;

	cout << ""Test convert type"" << endl;
	double v = 10;    //  час / землекопы 
	double t_max = 3; //  час
	int n = (int)ceil(v / t_max);
	cout << ""Потребуется "" << n << "" землекопов."" << endl;
	cout << ""Потребуется "" << v / t_max << "" землекопов."" << endl;

	char ch = 'g';
	cout << ch << "" "" << (int)ch << endl;
	cout << 104 << "" "" << (char)104 << endl;
	 
	bool flag = true;
	
	cout << ""true "" << flag << endl;
	cout << ""false "" << false << endl;

	flag = 1;
	cout << ""true "" << flag << endl;

	flag = -1;
	cout << ""true "" << flag << endl;

	flag = 0;
	cout << ""flag "" << flag << endl;
} 

void two_numer() {
	double x, y;
	cout << ""Enter x "";
	cin >> x;
	cout << ""Enter y "";
	cin >> y;
	cout << ""x + y  = "" << x + y << endl
		<< ""x * y  = "" << x * y << endl
		<< ""Av(x,y)= "" << (x + y) / 2 << endl;
}

void three_numer() {
	double x, y, z;
	cout << ""Enter x "";
	cin >> x;
	cout << ""Enter y "";
	cin >> y;
	cout << ""Enter z "";
	cin >> z;

	cout << ""x + y  = "" << x + y + z << endl
		<< ""x * y  = "" << x * y * z<< endl
		<< ""Av(x,y)= "" << (x + y + z) / 3 << endl;
}


int main() {
	//setlocale(LC_ALL, ""ru"");
	//test_convert();
	two_numer();
	three_numer();
	return 0;
}"
x5WDrk5d,Typescript call signatures,Vanguard4940,TypeScript,Friday 14th of July 2023 10:04:20 AM CDT,"// call signatures - defining the types for function with propeties

type funcType = {
    (a:string):string;
    description:string;
} // defining func type with a function signature and additional propety

type Props{
    handle:(a:string)=>void;
    a: funcType;
} // props type alias that contain handle type and func type

function test(a:string){
    return a;
}

test.description = ""Description that is a propety of this func"";

const foo = (a:funcType)=>{
    return a.description + a("" Hello"");
}

foo(test)

console.log(foo(test));"
U1hT19Gg,IOI '14 P4 - Gondola (Standard I/O),erek1e,C++,Friday 14th of July 2023 09:52:44 AM CDT,"#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

const int BASE = 1e9 + 9;
int add(int x, int y) {
    x += y;
    if (x >= BASE) return x-BASE;
    return x;
}
int mult(int x, int y) {
    return (long long)x*y % BASE;
}
int bin_pow(int x, int y) {
    int res = 1;
    while (y) {
        if (y & 1) res = mult(res, x);
        y >>= 1;
        x = mult(x, x);
    }
    return res;
}

bool valid(int n, const vector<int> &a) {
    int dif = -1;
    set<int> seen;
    for (int i = 0; i < n; ++i) {
        if (a[i] <= n) {
            int curDif = (a[i] - i + n) % n;
            if (dif == -1) dif = curDif;
            else if (dif != curDif) return false;
        }
        if (seen.count(a[i])) return false;
        seen.insert(a[i]);
    }
    return true;
}
vector<int> replacement(int n, const vector<int> &a) {
    int dif = 1, mx = 0;
    for (int i = 0; i < n; ++i) {
        if (a[i] <= n) dif = (a[i] - i + n) % n;
        if (a[i] > a[mx]) mx = i;
    }
    vector<int> b(n); // current array
    for (int i = 0; i < n; ++i) b[i] = (dif + i + n-1) % n + 1;

    vector<int> pos(1+a[mx], -1);
    for (int i = 0; i < n; ++i) pos[a[i]] = i;

    vector<int> replace;
    for (int i = n+1; i <= a[mx]; ++i) {
        if (pos[i] == -1) replace.push_back(b[mx]), b[mx] = i;
        else replace.push_back(b[pos[i]]), b[pos[i]] = i;
    }
    return replace;
}
int countReplacement(int n, const vector<int> &a) {
    if (!valid(n, a)) return 0;
    vector<int> b = a;
    sort(b.begin(), b.end());
    int ways = 1;
    for (int i = 0; i < n; ++i) {
        if (b[i] <= n) continue;
        int prev = (i ? b[i-1] : 0);
        int larger = n-i;
        // consider options for values between a[i] and a[i+1]
        int replacements = b[i]-1 - max(prev, n);
        ways = mult(ways, bin_pow(larger, replacements));
    }
    if (b[0] > n) ways = mult(ways, n);
    return ways;
}

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int T, n; cin >> T >> n;
    vector<int> a(n);
    for (int &x : a) cin >> x;
    
    if (1 <= T && T <= 3) { // check if gondola sequence
        cout << valid(n, a) << endl;
    } else if (4 <= T && T <= 6) { // find replacement sequence
        vector<int> v = replacement(n, a);
        cout << v.size();
        for (int x : v) cout << ' ' << x;
        cout << endl;
    } else { // 7 <= T && T <= 10, count replacement sequences
        cout << countReplacement(n, a) << endl;
    }
    return 0;
}"
