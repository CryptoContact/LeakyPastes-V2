id,title,username,language,date,content
jZz5hS1T,2024-07-02_stats.json,rdp_snitch,JSON,Tuesday 2nd of July 2024 07:16:16 PM CDT,"{
  ""ip"": {
    ""45.227.254.54"": 4,
    ""45.227.254.55"": 4,
    ""103.166.182.180"": 2,
    ""88.214.25.19"": 6,
    ""91.238.181.23"": 8,
    ""58.218.199.219"": 8,
    ""47.238.192.22"": 10,
    ""91.238.181.24"": 4,
    ""164.92.104.215"": 2,
    ""118.200.191.108"": 2,
    ""147.185.132.45"": 6,
    ""199.45.154.127"": 2,
    ""104.248.154.46"": 6,
    ""64.124.50.139"": 2,
    ""62.215.34.181"": 4,
    ""118.71.209.53"": 2,
    ""135.26.109.26"": 4,
    ""212.70.149.146"": 6,
    ""167.94.138.41"": 2,
    ""185.234.216.92"": 2,
    ""45.115.225.87"": 2,
    ""213.109.202.252"": 14,
    ""147.185.132.109"": 6,
    ""162.248.225.122"": 18,
    ""87.251.75.179"": 4,
    ""223.166.31.100"": 2,
    ""8.53.50.141"": 2,
    ""195.181.174.229"": 4,
    ""45.84.197.193"": 4,
    ""116.140.196.215"": 2,
    ""98.143.255.25"": 6,
    ""3.234.178.254"": 640,
    ""45.137.201.119"": 2,
    ""2.57.149.186"": 4,
    ""205.210.31.207"": 6,
    ""62.122.184.12"": 6,
    ""220.248.76.186"": 2,
    ""67.205.137.66"": 8,
    ""23.92.19.192"": 2,
    ""194.165.16.10"": 4,
    ""168.138.200.186"": 2,
    ""198.235.24.34"": 6,
    ""60.255.174.158"": 2,
    ""138.68.142.176"": 2,
    ""88.214.25.63"": 4,
    ""43.134.186.29"": 2
  },
  ""asn"": {
    ""AS267784"": 8,
    ""AS135905"": 2,
    ""AS29551"": 10,
    ""AS49434"": 12,
    ""AS4134"": 8,
    ""AS45102"": 10,
    ""AS14061"": 18,
    ""AS3758"": 2,
    ""AS396982"": 24,
    ""AS398722"": 2,
    ""AS6461"": 2,
    ""AS21050"": 4,
    ""AS18403"": 2,
    ""AS6300"": 4,
    ""AS204428"": 6,
    ""AS398324"": 2,
    ""AS57523"": 8,
    ""AS140599"": 2,
    ""AS208312"": 18,
    ""AS14576"": 18,
    ""AS208091"": 4,
    ""AS17621"": 4,
    ""AS3356"": 2,
    ""AS60068"": 4,
    ""AS207252"": 4,
    ""AS4837"": 4,
    ""AS3367"": 6,
    ""AS14618"": 640,
    ""AS49581"": 2,
    ""AS63949"": 2,
    ""AS48721"": 4,
    ""AS31898"": 2,
    ""AS132203"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 12,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""NOC EMAIL: noc@one-host.net"": 10,
    ""Datacenter location PAR1 France"": 12,
    ""Chinanet"": 8,
    ""Alibaba (US) Technology Co., Ltd."": 10,
    ""DigitalOcean, LLC"": 18,
    ""SingNet Pte Ltd"": 2,
    ""Google LLC"": 24,
    ""Censys, Inc."": 4,
    ""Zayo Bandwidth"": 2,
    ""Fast Telecommunications Company W.L.L."": 4,
    ""fpt"": 2,
    ""Consolidated Communications, Inc."": 4,
    ""SS-Net"": 6,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Comfac Corporation"": 2,
    ""Red Byte LLC"": 18,
    ""Hosting Solution Ltd."": 18,
    ""Xhost Internet Solutions LP"": 4,
    ""China Unicom Shanghai Province Network"": 2,
    ""Level 3 Communications, Inc."": 2,
    ""DataCamp Limited"": 4,
    ""Felix Gassan"": 4,
    ""China Unicom CHINA169 Network"": 2,
    ""Xplornet Communications Inc."": 6,
    ""Amazon Technologies Inc."": 640,
    ""Ferdinand Zink trading as Tube-Hosting"": 2,
    ""China Unicom CncNet"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""Oracle Corporation"": 2,
    ""China Unicom China169 Network"": 2,
    ""Aceville Pte.ltd"": 2
  },
  ""org"": {
    ""UAB Host Baltic"": 8,
    ""Zozo Software Company Limited"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 22,
    ""Chinanet JS"": 8,
    ""Alibaba.com LLC"": 10,
    ""DigitalOcean, LLC"": 10,
    ""SingNet Pte Ltd"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Censys, Inc."": 2,
    ""Microsoft Corporation"": 2,
    ""Fasttelco"": 4,
    ""Unknown"": 14,
    ""Consolidated Communications, Inc."": 4,
    ""4Media Ltd"": 6,
    ""Censys, Inc"": 2,
    ""Chang Way Technologies Co. Limited"": 26,
    ""Comfac Corporation"": 2,
    ""IT Hosting Group"": 18,
    ""Xhost Internet Solutions"": 4,
    ""Level 3, LLC"": 2,
    ""CDN77 - Frankfurt POP"": 4,
    ""Felix Gassan"": 4,
    ""China United Network Communications Corporation Limited"": 2,
    ""AWS EC2 (us-east-1)"": 640,
    ""Taurus"": 2,
    ""Digital Ocean"": 8,
    ""Linode"": 2,
    ""Flyservers S.A"": 4,
    ""Oracle Cloud Infrastructure (ap-tokyo-1)"": 2,
    ""SiChuan Cable TV Network CO., LTD"": 2
  },
  ""regionName"": {
    ""Vilnius"": 8,
    ""Hanoi"": 2,
    ""Hesse"": 14,
    ""\u00cele-de-France"": 12,
    ""Jiangsu"": 8,
    ""Kowloon"": 10,
    ""California"": 44,
    ""Central Singapore"": 8,
    ""New York"": 2,
    ""Virginia"": 642,
    ""Hawalli"": 4,
    ""Ho Chi Minh"": 2,
    ""Texas"": 4,
    ""Sofia-Capital"": 6,
    ""Michigan"": 2,
    ""Moscow"": 22,
    ""Dhaka Division"": 2,
    ""North Holland"": 4,
    ""Shanghai"": 4,
    ""Louisiana"": 2,
    ""North Rhine-Westphalia"": 4,
    ""Beijing"": 2,
    ""New Brunswick"": 6,
    ""Lombardy"": 2,
    ""Lesser Poland"": 4,
    ""New Jersey"": 10,
    ""Kaunas"": 4,
    ""Tokyo"": 2,
    ""Sichuan"": 2,
    ""England"": 2,
    ""North West"": 2
  },
  ""country"": {
    ""Lithuania"": 12,
    ""Vietnam"": 4,
    ""Germany"": 18,
    ""France"": 12,
    ""China"": 16,
    ""Hong Kong"": 10,
    ""United States"": 706,
    ""Singapore"": 10,
    ""Kuwait"": 4,
    ""Bulgaria"": 6,
    ""Russia"": 22,
    ""Bangladesh"": 2,
    ""The Netherlands"": 4,
    ""Canada"": 6,
    ""Italy"": 2,
    ""Poland"": 4,
    ""Japan"": 2,
    ""United Kingdom"": 2
  },
  ""account"": {
    ""Test"": 50,
    ""hello"": 708,
    ""Administr"": 16,
    ""a"": 2,
    ""rebDTTJSB"": 2,
    ""IhumVC"": 2,
    ""nxHOpe"": 2,
    ""(empty)"": 10,
    ""Domain"": 22,
    ""eThxIpfTy"": 2,
    ""OXcjdx"": 2,
    ""hWyKNY"": 2,
    ""kFjloYKKZ"": 2,
    ""MbzEPF"": 2,
    ""yXxxal"": 2,
    ""rpfumbdk"": 8,
    ""beio"": 2,
    ""HFpNCVCfx"": 2,
    ""NyryHV"": 2,
    ""WGzGRg"": 2
  },
  ""keyboard"": {
    ""Unknown"": 842
  },
  ""client_build"": {
    ""Unknown"": 842
  },
  ""client_name"": {
    ""Unknown"": 842
  },
  ""ip_type"": {
    ""Unknown"": 78,
    ""hosting"": 712,
    ""proxy"": 22,
    ""hosting & proxy"": 30
  }
}"
LgVNdLrq,2024-07-02_stats.json,rdp_snitch,JSON,Tuesday 2nd of July 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""45.227.254.54"": 2,
    ""45.227.254.55"": 2,
    ""103.166.182.180"": 1,
    ""88.214.25.19"": 3,
    ""91.238.181.23"": 4,
    ""58.218.199.219"": 4,
    ""47.238.192.22"": 5,
    ""91.238.181.24"": 2,
    ""164.92.104.215"": 1,
    ""118.200.191.108"": 1,
    ""147.185.132.45"": 3,
    ""199.45.154.127"": 1,
    ""104.248.154.46"": 3,
    ""64.124.50.139"": 1,
    ""62.215.34.181"": 2,
    ""118.71.209.53"": 1,
    ""135.26.109.26"": 2,
    ""212.70.149.146"": 3,
    ""167.94.138.41"": 1,
    ""185.234.216.92"": 1,
    ""45.115.225.87"": 1,
    ""213.109.202.252"": 7,
    ""147.185.132.109"": 3,
    ""162.248.225.122"": 9,
    ""87.251.75.179"": 2,
    ""223.166.31.100"": 1,
    ""8.53.50.141"": 1,
    ""195.181.174.229"": 2,
    ""45.84.197.193"": 2,
    ""116.140.196.215"": 1,
    ""98.143.255.25"": 3,
    ""3.234.178.254"": 320,
    ""45.137.201.119"": 1,
    ""2.57.149.186"": 2,
    ""205.210.31.207"": 3,
    ""62.122.184.12"": 3,
    ""220.248.76.186"": 1,
    ""67.205.137.66"": 4,
    ""23.92.19.192"": 1,
    ""194.165.16.10"": 2,
    ""168.138.200.186"": 1,
    ""198.235.24.34"": 3,
    ""60.255.174.158"": 1,
    ""138.68.142.176"": 1,
    ""88.214.25.63"": 2,
    ""43.134.186.29"": 1
  },
  ""asn"": {
    ""AS267784"": 4,
    ""AS135905"": 1,
    ""AS29551"": 5,
    ""AS49434"": 6,
    ""AS4134"": 4,
    ""AS45102"": 5,
    ""AS14061"": 9,
    ""AS3758"": 1,
    ""AS396982"": 12,
    ""AS398722"": 1,
    ""AS6461"": 1,
    ""AS21050"": 2,
    ""AS18403"": 1,
    ""AS6300"": 2,
    ""AS204428"": 3,
    ""AS398324"": 1,
    ""AS57523"": 4,
    ""AS140599"": 1,
    ""AS208312"": 9,
    ""AS14576"": 9,
    ""AS208091"": 2,
    ""AS17621"": 2,
    ""AS3356"": 1,
    ""AS60068"": 2,
    ""AS207252"": 2,
    ""AS4837"": 2,
    ""AS3367"": 3,
    ""AS14618"": 320,
    ""AS49581"": 1,
    ""AS63949"": 1,
    ""AS48721"": 2,
    ""AS31898"": 1,
    ""AS132203"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 6,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""NOC EMAIL: noc@one-host.net"": 5,
    ""Datacenter location PAR1 France"": 6,
    ""Chinanet"": 4,
    ""Alibaba (US) Technology Co., Ltd."": 5,
    ""DigitalOcean, LLC"": 9,
    ""SingNet Pte Ltd"": 1,
    ""Google LLC"": 12,
    ""Censys, Inc."": 2,
    ""Zayo Bandwidth"": 1,
    ""Fast Telecommunications Company W.L.L."": 2,
    ""fpt"": 1,
    ""Consolidated Communications, Inc."": 2,
    ""SS-Net"": 3,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Comfac Corporation"": 1,
    ""Red Byte LLC"": 9,
    ""Hosting Solution Ltd."": 9,
    ""Xhost Internet Solutions LP"": 2,
    ""China Unicom Shanghai Province Network"": 1,
    ""Level 3 Communications, Inc."": 1,
    ""DataCamp Limited"": 2,
    ""Felix Gassan"": 2,
    ""China Unicom CHINA169 Network"": 1,
    ""Xplornet Communications Inc."": 3,
    ""Amazon Technologies Inc."": 320,
    ""Ferdinand Zink trading as Tube-Hosting"": 1,
    ""China Unicom CncNet"": 1,
    ""Akamai Technologies, Inc."": 1,
    ""Oracle Corporation"": 1,
    ""China Unicom China169 Network"": 1,
    ""Aceville Pte.ltd"": 1
  },
  ""org"": {
    ""UAB Host Baltic"": 4,
    ""Zozo Software Company Limited"": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 11,
    ""Chinanet JS"": 4,
    ""Alibaba.com LLC"": 5,
    ""DigitalOcean, LLC"": 5,
    ""SingNet Pte Ltd"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Censys, Inc."": 1,
    ""Microsoft Corporation"": 1,
    ""Fasttelco"": 2,
    ""Unknown"": 7,
    ""Consolidated Communications, Inc."": 2,
    ""4Media Ltd"": 3,
    ""Censys, Inc"": 1,
    ""Chang Way Technologies Co. Limited"": 13,
    ""Comfac Corporation"": 1,
    ""IT Hosting Group"": 9,
    ""Xhost Internet Solutions"": 2,
    ""Level 3, LLC"": 1,
    ""CDN77 - Frankfurt POP"": 2,
    ""Felix Gassan"": 2,
    ""China United Network Communications Corporation Limited"": 1,
    ""AWS EC2 (us-east-1)"": 320,
    ""Taurus"": 1,
    ""Digital Ocean"": 4,
    ""Linode"": 1,
    ""Flyservers S.A"": 2,
    ""Oracle Cloud Infrastructure (ap-tokyo-1)"": 1,
    ""SiChuan Cable TV Network CO., LTD"": 1
  },
  ""regionName"": {
    ""Vilnius"": 4,
    ""Hanoi"": 1,
    ""Hesse"": 7,
    ""\u00cele-de-France"": 6,
    ""Jiangsu"": 4,
    ""Kowloon"": 5,
    ""California"": 22,
    ""Central Singapore"": 4,
    ""New York"": 1,
    ""Virginia"": 321,
    ""Hawalli"": 2,
    ""Ho Chi Minh"": 1,
    ""Texas"": 2,
    ""Sofia-Capital"": 3,
    ""Michigan"": 1,
    ""Moscow"": 11,
    ""Dhaka Division"": 1,
    ""North Holland"": 2,
    ""Shanghai"": 2,
    ""Louisiana"": 1,
    ""North Rhine-Westphalia"": 2,
    ""Beijing"": 1,
    ""New Brunswick"": 3,
    ""Lombardy"": 1,
    ""Lesser Poland"": 2,
    ""New Jersey"": 5,
    ""Kaunas"": 2,
    ""Tokyo"": 1,
    ""Sichuan"": 1,
    ""England"": 1,
    ""North West"": 1
  },
  ""country"": {
    ""Lithuania"": 6,
    ""Vietnam"": 2,
    ""Germany"": 9,
    ""France"": 6,
    ""China"": 8,
    ""Hong Kong"": 5,
    ""United States"": 353,
    ""Singapore"": 5,
    ""Kuwait"": 2,
    ""Bulgaria"": 3,
    ""Russia"": 11,
    ""Bangladesh"": 1,
    ""The Netherlands"": 2,
    ""Canada"": 3,
    ""Italy"": 1,
    ""Poland"": 2,
    ""Japan"": 1,
    ""United Kingdom"": 1
  },
  ""account"": {
    ""Test"": 25,
    ""hello"": 354,
    ""Administr"": 8,
    ""a"": 1,
    ""rebDTTJSB"": 1,
    ""IhumVC"": 1,
    ""nxHOpe"": 1,
    ""(empty)"": 5,
    ""Domain"": 11,
    ""eThxIpfTy"": 1,
    ""OXcjdx"": 1,
    ""hWyKNY"": 1,
    ""kFjloYKKZ"": 1,
    ""MbzEPF"": 1,
    ""yXxxal"": 1,
    ""rpfumbdk"": 4,
    ""beio"": 1,
    ""HFpNCVCfx"": 1,
    ""NyryHV"": 1,
    ""WGzGRg"": 1
  },
  ""keyboard"": {
    ""Unknown"": 421
  },
  ""client_build"": {
    ""Unknown"": 421
  },
  ""client_name"": {
    ""Unknown"": 421
  },
  ""ip_type"": {
    ""Unknown"": 39,
    ""hosting"": 356,
    ""proxy"": 11,
    ""hosting & proxy"": 15
  }
}"
eCzAaa3i,🤑G2A.com Free Gift Card FIX July 2024🎁,Darkew,JavaScript,Tuesday 2nd of July 2024 07:05:36 PM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
XXPsdy2x,🤑G2A.com Free Gift Card FIX July 2024🎁,angeloee,JavaScript,Tuesday 2nd of July 2024 06:59:34 PM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
g2fYHJWn,monkeytype_settings,Kuroneko-yousenpai,JSON,Tuesday 2nd of July 2024 06:58:32 PM CDT,"{""theme"":""serika_dark"",""themeLight"":""serika"",""themeDark"":""serika_dark"",""autoSwitchTheme"":false,""customTheme"":true,""customThemeColors"":[""#323437"",""#ff9efc"",""#1aff9c"",""#fafffd"",""#2c2e31"",""#ff9efc"",""#ca4754"",""#ff0019"",""#ca4754"",""#ff0019""],""favThemes"":[""serika_dark""],""showKeyTips"":true,""smoothCaret"":""fast"",""quickRestart"":""esc"",""punctuation"":false,""numbers"":false,""words"":2000,""time"":60,""mode"":""time"",""quoteLength"":[1],""language"":""russian"",""fontSize"":1.5,""freedomMode"":true,""difficulty"":""normal"",""blindMode"":false,""quickEnd"":false,""caretStyle"":""default"",""paceCaretStyle"":""default"",""flipTestColors"":false,""layout"":""default"",""funbox"":""none"",""confidenceMode"":""off"",""indicateTypos"":""off"",""timerStyle"":""mini"",""liveSpeedStyle"":""mini"",""liveAccStyle"":""off"",""liveBurstStyle"":""off"",""colorfulMode"":false,""randomTheme"":""off"",""timerColor"":""main"",""timerOpacity"":""1"",""stopOnError"":""off"",""showAllLines"":false,""keymapMode"":""react"",""keymapStyle"":""staggered"",""keymapLegendStyle"":""lowercase"",""keymapLayout"":""russian"",""keymapShowTopRow"":""layout"",""fontFamily"":""Roboto_Mono"",""smoothLineScroll"":true,""alwaysShowDecimalPlaces"":false,""alwaysShowWordsHistory"":false,""singleListCommandLine"":""manual"",""capsLockWarning"":true,""playSoundOnError"":""off"",""playSoundOnClick"":""off"",""soundVolume"":""0.5"",""startGraphsAtZero"":true,""showOutOfFocusWarning"":true,""paceCaret"":""off"",""paceCaretCustomSpeed"":100,""repeatedPace"":true,""accountChart"":[""on"",""on"",""on"",""on""],""minWpm"":""off"",""minWpmCustomSpeed"":100,""highlightMode"":""letter"",""typingSpeedUnit"":""cpm"",""ads"":""result"",""hideExtraLetters"":false,""strictSpace"":true,""minAcc"":""off"",""minAccCustom"":90,""monkey"":false,""repeatQuotes"":""off"",""oppositeShiftMode"":""off"",""customBackground"":"""",""customBackgroundSize"":""cover"",""customBackgroundFilter"":[0,1,1,1,1],""customLayoutfluid"":""qwerty#dvorak#colemak"",""monkeyPowerLevel"":""off"",""minBurst"":""off"",""minBurstCustomSpeed"":100,""burstHeatmap"":false,""britishEnglish"":false,""lazyMode"":false,""showAverage"":""speed"",""tapeMode"":""off"",""maxLineWidth"":0}"
0jbw1sYq,🤑G2A.com Free Gift Card FIX July 2024🎁,jcxeq,JavaScript,Tuesday 2nd of July 2024 06:53:30 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
z6WcAxWL,🤑G2A.com Free Gift Card FIX July 2024🎁,PAUL-A8,JavaScript,Tuesday 2nd of July 2024 06:47:27 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
Tr31w5kK,🎁 G2A.COM FREE GIFT CARD GUIDE JUL 2024 V4 🎁,jusst2k4,GetText,Tuesday 2nd of July 2024 06:44:18 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_761925.pdf
 
Working as of:
03 July 2024"
gTSTkAyr,🤑G2A.com Free Gift Card FIX July 2024🤑,Kevin_Chen1,JavaScript,Tuesday 2nd of July 2024 06:41:25 PM CDT,"G2A.com free gift card & games guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
Ag1Uzi75,🤑G2A.com Free Gift Card FIX July 2024🤑,mano03,JavaScript,Tuesday 2nd of July 2024 06:35:21 PM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Xbox gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
JzDxavTa,🤑G2A.com Free Gift Card FIX July 2024🤑,gigi1964,JavaScript,Tuesday 2nd of July 2024 06:29:18 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
Jb1eaJhM,🤑G2A.com Free Gift Card FIX July 2024🤑,TeleBot,JavaScript,Tuesday 2nd of July 2024 06:23:15 PM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
5wRjRXZj,🤑G2A.com Free Gift Card FIX July 2024🤑,William95,JavaScript,Tuesday 2nd of July 2024 06:17:13 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
7k1btJzc,AO3 Primary Pairing - español,Kaanbaltlak,JavaScript,Tuesday 2nd of July 2024 05:24:56 PM CDT,"// ==UserScript==
// @name         Ao3 Only Show Primary Pairing
// @namespace    https://greasyfork.org/en/users/36620
// @version      1
// @description  Hides works where specified pairing isn't the first listed.
// @author       Modified by Neeve, originally by scriptfairy
// @include      http://archiveofourown.org/*
// @include      https://archiveofourown.org/*
// @grant        none
// @downloadURL https://update.greasyfork.org/scripts/377386/Ao3%20Only%20Show%20Primary%20Pairing.user.js
// @updateURL https://update.greasyfork.org/scripts/377386/Ao3%20Only%20Show%20Primary%20Pairing.meta.js
// ==/UserScript==

/* CONFIG
   keep a plaintext file of your config because they will not be saved when the script updates */

 
var relationships = ['Kakyoin Noriaki/Kujo Jotaro', 'Hobie Brown/Pavitr Prabhakar', 'Tiz Arrior/Ringabel', 'Cindy Moon/Peter Parker'];
// the relationship tag you want to see (exact, case-sensitive). replace with your desired pairing.

var characters = ['Pavitr Prabhakar'];
// the character tags you want to see (exact, case-sensitive) - - ignore this

var relpad = 1;
// you want to see at least one of your relationships within this many relationship tags

var charpad = 5;
// you want to see at least one of your characters within this many character tags

/* END CONFIG */

(function($) {
    $('<style>').text(
        '.workhide{border:1px solid rgb(221,221,221);margin:0.643em 0em;padding:0.429em 0.75em;height:29px;} .workhide .left{float:left;padding-top:5px;} .workhide .right{float:right}'
    ).appendTo($('head'));
    if (relationships.length === 0 && characters.length === 0) {return;}
    var checkfandom = document.createElement('div');
    var fandomlink = $('h2.heading a')[0].href;
    fandomlink = fandomlink.slice(fandomlink.indexOf('tags'));
    $(checkfandom).load('/'+fandomlink+' .parent', function(){
        if ($('ul', checkfandom).text() == ""No Fandom"") {return;}
        else {
            for(i=0;i<$('.index .blurb').length;i++){
                var tags = $('.index .blurb ul.tags')[i];
                var reltags = $('.relationships', tags).slice(0,relpad); var chartags = $('.characters', tags).slice(0,charpad);
                var temprel = []; var tempchar = [];
                $(reltags).map(function() {
                    temprel.push(this.innerText);
                });
                $(chartags).map(function() {
                    tempchar.push(this.innerText);
                });
                var relmatch = temprel.filter(function(n) {
                    return relationships.indexOf(n) != -1;
                });
                var charmatch = tempchar.filter(function(n) {
                    return characters.indexOf(n) != -1;
                });
                if (relmatch.length === 0 && charmatch.length === 0) {
                    var work = $('.index .blurb')[i];
                    work.style.display = 'none';
                    var button = document.createElement('div');
                    button.setAttribute('class','workhide');
                    button.innerHTML = '<div class=""left"">Este trabajo no da prioridad a sus etiquetas preferidas.</div><div class=""right""><button type=""button"" class=""showwork"">Mostrar</button></div>';
                    $(work).after(button);
                }
            }
            $(document).ready(function(){
                $('.showwork').click(function() {
                    var blurb = $(this).parents('.workhide').prev()[0];
                    $(blurb).removeAttr('style');
                    $(this).parents('.workhide').remove();
                });
            });
        }
    });


})(window.jQuery);"
YB6vL5cN,do-mpv.sh - build script for a static mpv binary,pintcat,Bash,Tuesday 2nd of July 2024 05:20:59 PM CDT,"#!/bin/sh

# Dependencies: meson ninja-build yasm autoconf autoconf-archive libtool pkgconf pkg-config python3-docutils spirv-cross wayland-protocols debhelper-compat\ libfreetype-dev libfribidi-dev libharfbuzz-dev libfontconfig-dev libjpeg-dev libx11-dev libarchive-dev libasound2-dev libass-dev libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libbluray-dev libcaca-dev libcdio-dev libcdio-paranoia-dev libdrm-dev libdvdnav-dev libegl-dev libffmpeg-nvenc-dev libgbm-dev libgl-dev libjack-dev liblcms2-dev liblua5.2-dev libmujs-dev libpipewire-0.3-dev libplacebo-dev libpulse-dev librubberband-dev libsdl2-dev libsixel-dev libspirv-cross-c-shared-dev libswscale-dev libuchardet-dev libva-dev libvdpau-dev libvulkan-dev libwayland-dev libxinerama-dev libxkbcommon-dev libxpresent-dev libxrandr-dev libxss-dev libxv-dev libzimg-dev

TMP_DIR=""/media/ramdisk/mpv-build""
BIN_DIR=""/home/pintcat/ubin""

CLEAN(){
	printf ""\n\033[0;32mCleaning up... ""
	cd $TMP_DIR/..
	rm -rf $TMP_DIR
	printf ""done.\033[0m\n""
}

FAIL(){
	printf ""\n\033[0;31mError - $1 :(\033[0m\n""
	CLEAN
	exit 1
}

if [ -d ""$TMP_DIR"" ]; then
	printf ""\n\033[0;32mFolder \""""$TMP_DIR""\"" already exists and it's content will be deleted. Continue (Y/n)? \033[0m""
	read YN
	case $YN in
		n|N)
			printf ""\n\033[0;32mDone - nothing changed.\033[0m\n\n""
			exit
			;;
		*)
			CLEAN
			;;
	esac
fi
printf ""\n\033[0;32mDownloading build scripts...\033[0m\n\n""
if git clone https://github.com/mpv-player/mpv-build.git $TMP_DIR; then
	printf ""\n\033[0;32mDownloading and building components and linking final binary...\033[0m\n\n""
	cd $TMP_DIR
	./use-ffmpeg-release
	printf ""--disable-avisynth\n--enable-nonfree\n--enable-version3\n--enable-static\n--enable-runtime-cpudetect"" >> ffmpeg_options
#	printf ""--Dcdda=enabled\n--Ddvdnav=enabled\n--Dsdl2=enabled"" >> mpv_options
	if ./rebuild -j$(grep -m 1 ""siblings"" /proc/cpuinfo | awk '{print $3}'); then
   		printf ""\n\033[0;32mCompressing and installing binary to \""$BIN_DIR\"".\033[0m\n\n""
		if [ -f ""$BIN_DIR/mpv~"" ]; then rm -f $BIN_DIR/mpv~; fi
		if [ -f ""$BIN_DIR/mpv"" ]; then mv $BIN_DIR/mpv $BIN_DIR/mpv~; fi
		upx --lzma -9 mpv/build/mpv -o $BIN_DIR/mpv
		CLEAN
	else
		FAIL ""building mpv binary failed.""
	fi
else
	FAIL ""unable to obtain source.""
fi
echo
"
bY6TQfeH,C3 Pilgrim's Bastion script,7Soul,Python,Tuesday 2nd of July 2024 05:17:05 PM CDT,"import mmap
import math
import sys, getopt

our_city = ""Tingis""

terrain_offset = 0x2009B

def writeLong(value, len):
	return (value).to_bytes(len,byteorder='little')

def writeShort(value, len):
	return (value).to_bytes(len,byteorder='big')

def getQuotaOffset(city, good):
	offset = partners_offset + (partners[city] * 0x40) + (goods[good] * 0x04)
	return offset 
	
def getCityOffset(city):
	offset = cities_offset + 0x03 # city name id
	# Check if we found the city, since they aren't in order
	for i in range(28): # 0 to 27
		offset += 66
		mm.seek(offset)
		if mm.read_byte() == cities[city]:
			break
		
	## then add 6 to get to buy flags (16 bytes) and then sell flags
	return offset
	
def setTradeRoutePrice(city, price):
	offset = getCityOffset(city) - 0x03 + 0x26
	mm.seek(offset)
	mm.write( writeLong(price, 2) )
	
def changeGoodsPrices(good, multi, type):
	# Type 0 = both, 1 = only buyers, 2 = only sellers
	offset = 0x125C3C
	mm.seek(offset)
	mm.seek(goods[good] * 0x08, 1)
	for i in range(2):
		if i == 0 and type == ""sellers"":
			mm.seek(4,1)
			continue
		if i == 1 and type == ""buyers"":
			continue
		price = math.floor(int(mm.read_byte()) * multi)
		mm.seek(-1,1)
		mm.write( writeLong(price, 4) )
		# print(mm.read_byte())
		
def setLocalProduction(good, value):
	offset = getCityOffset(our_city) # cur byte is after city name
	mm.seek(2 + 16, 1)
	mm.seek(goods[good], 1)
	mm.write_byte(value)

with open(""D:\Games\Caesar 3 Julius\Test.c3u"", ""r+b"") as f:
	# memory-map the file, size 0 means whole file
	mm = mmap.mmap(f.fileno(), 0)
	
	goods = {
		""wheat"":      0x01,
		""vegetables"": 0x02,
		""fruits"":     0x03,
		""olives"":     0x04,
		""vines"":      0x05,
		""meat"":       0x06,
		""wine"":       0x07,
		""oil"":        0x08,
		""iron"":       0x09,
		""timber"":     0x0A,
		""clay"":       0x0B,
		""marble"":     0x0C,
		""weapons"":    0x0D,
		""furniture"":  0x0E,
		""pottery"":    0x0F,
	}
	
	partners_offset = 0x131702
	partners = {
		""Carthago Nova""  : 0x01,
		""Caesarea""  : 0x02,
		""Volubilis"" : 0x03,
		""Valentia""  : 0x04,
		""Tarraco""   : 0x05,
	}
	
	cities_offset = 0x12516C
	cities = {
		""Roma"" : 0x00,
		""Tarentum"" : 0x01,
		""Capua"" : 0x02,
		""Brundisium"" : 0x03,
		""Mediolanum"" : 0x04,
		""Carthago Nova"" : 0x05,
		""Carthago"" : 0x06,
		""Tarraco"" : 0x07,
		""Athenae"" : 0x08,
		""Pergamum"" : 0x09,
		""Syracusae"" : 0x0A,
		""Toletum"" : 0x0B,
		""Tarsus"" : 0x0C,
		""Leptis Magna"" : 0x0D,
		""Tingis"" : 0x0E,
		""Corinthus"" : 0x0F,
		""Valentia"" : 0x10,
		""Lindum"" : 0x19,
		""Calleva"" : 0x1A,
		""Lutetia"" : 0x1B,
		""Caesarea"" : 0x1F,
		""Augusta Trevorum"" : 0x21,
		""Volubilis"" : 0x23,
		""Londinium"" : 0x24,
	}
	
	buildings = {
		""farms"" : 1,
	}
	
	opts, args = getopt.getopt(sys.argv[1:],""wf"")
	  
	for opt, arg in opts:
		if opt in ['-w']:
			print(""warehouse only"")
			# Erase cliff tiles
			eraseTiles = [0x24593, 0x26B37, 0x26317, 0x25F49, 0x28C0F, 0x29BD7]
			for pos in eraseTiles:
				mm.seek(pos)
				mm.write_byte(0x00)
		
			# Add marble to warehouse
			warehouse = 0xE695A
			mm.seek(warehouse) 
			mm.seek(0x0C,1)
			mm.write_byte(0x0C)
			mm.seek(warehouse) 
			mm.seek(0x34,1) 
			mm.write_byte(0x0C) # 12 marble in 1 tile why not
			
			# This replaces ramps with roads. Basically instead of a ramp being a 2x2 road, it becomes a 1x2 road
			rampscount = 0
			ramps = []
			mm.seek(terrain_offset) #2009B 
			# elevation: 59b40
			rampBot = ""0004""
			rampsBot = ""00040004""
			rampTop	= ""0006""
			rampsTop = ""00060006""
						
			mm.seek(terrain_offset-1)
			for i in range(int(162*162*2)):
				byte = mm.read(4)
				# find      bottom of stairs - bottom of stairs
				# turn into road - empty
				if byte.hex() == rampsBot:
					# print(byte)
					mm.seek(-4,1)
					# bytes have to be written swapped
					mm.write_byte(0x40)
					mm.write_byte(0x00)
					mm.write_byte(0x00)
					mm.write_byte(0x00)
					print(terrain_offset + (i*2))
					rampscount += 1
					print(""ramp"")
				mm.seek(-2,1)
			print(rampscount)
			
			mm.seek(terrain_offset-1)
			for i in range(int(162*162*2)):
				byte = mm.read(4)
				# find      top of stairs - top of stairs
				# turn into road w/elevation - elevation
				if byte.hex() == rampsTop:
					mm.seek(-4,1)
					# bytes have to be written swapped
					mm.write_byte(0x40)
					mm.write_byte(0x02)
					mm.write_byte(0x00)
					mm.write_byte(0x02)
					print(terrain_offset + (i*2))
					print(""ramp elevated"")
				mm.seek(-2,1)
				
			mm.seek(terrain_offset-1)
			for i in range(int(162*162*2)):
				byte = mm.read(4)
				# find      bottom of stairs - top of stairs
				# turn into road w/elevation - elevation
				if byte.hex() == ""00040006"":
					mm.seek(-4,1)
					mm.seek(324,1)
					byte = mm.read(2)
					# if the tile on the next row is also a ramp, this tile becomes just a hill
					if byte.hex() == rampBot or byte.hex() == rampTop:
						mm.seek(-2,1)
						mm.seek(-324,1)
						# bytes have to be written swapped
						mm.write_byte(0x00)
						mm.write_byte(0x00)
						mm.write_byte(0x00)
						mm.write_byte(0x02)
						print(""ramp low to high with other piece of ramp in next row"")
					else:
						mm.seek(-2,1)
						mm.seek(-324,1)
						# bytes have to be written swapped
						mm.write_byte(0x40)
						mm.write_byte(0x00)
						mm.write_byte(0x40)
						mm.write_byte(0x02)
						print(""ramp low to high with nothing next row"")
				mm.seek(-2,1)
				
			mm.seek(terrain_offset-1)
			for i in range(int(162*162*2)):
				byte = mm.read(4)
				if byte.hex() == ""00060004"":
					mm.seek(-4,1)
					mm.seek(324,1)
					byte = mm.read(2)
					# if the tile on the next row is also a ramp, this tile becomes just a hill
					if byte.hex() == rampTop or byte.hex() == rampBot:
						mm.seek(-2,1)
						mm.seek(-324,1)
						# bytes have to be written swapped
						mm.write_byte(0x40)
						mm.write_byte(0x02)
						mm.write_byte(0x40)
						mm.write_byte(0x00)
						print(""ramp high to low with other piece of ramp in next row"")
					else:
						mm.seek(-2,1)
						mm.seek(-324,1)
						# bytes have to be written swapped
						mm.write_byte(0x00)
						mm.write_byte(0x02)
						mm.write_byte(0x00)
						mm.write_byte(0x00)
						print(""ramp high to low with nothing next row"")
				mm.seek(-2,1)
				
			
				
			# print(""found %d ramps"" % rampscount)
		if opt == '-f':
			print(""finish"")
			
			# Reset money to 5k
			mm.seek(0xE218C)
			mm.write_byte(0x88)
			mm.write_byte(0x13)
			mm.seek(0xE4CFC)
			mm.write_byte(0x88)
			mm.write_byte(0x13)
			
			# Disable buildings
			mm.seek(0x126342) # Fort
			mm.write_byte(0x00)
			mm.seek(0x12634A) # Large Temple
			mm.write_byte(0x00)
			
			# Burn Mars large temple (build first after warehouse)
			mm.seek(0xE6D5B)
			mm.seek(0x3F, 1)
			mm.write_byte(0x64) # 100 fire rate
			
			# Sets the next 5 buildings to never burn or collapse
			mm.seek(0xE6D5A)
			mm.seek(0x44, 1)
			for n in range(5):
				mm.seek(0x80, 1)
				mm.write_byte(0x01)
				mm.seek(-1, 1)
			
			# Change favor to 35
			mm.seek(0xE6314)
			mm.write_byte(35)
			
			# Change savings to 1500
			mm.seek(0xE6450)
			mm.write_byte(0xDC)
			mm.write_byte(0x05)
			
			# Makes all goods 20% less profitable
			for g, h in goods.items():
				changeGoodsPrices(g, 1.0 + 0.20, ""buyers"")
				changeGoodsPrices(g, 1.0 - 0.20, ""sellers"")
	
	
	
	# Remove unwanted quotas
	mm.seek(getQuotaOffset(""Caesarea"", ""marble""))
	mm.write_byte(0x00)
	mm.seek(getQuotaOffset(""Carthago Nova"", ""timber""))
	mm.write_byte(0x00)
	mm.seek(getQuotaOffset(""Valentia"", ""timber""))
	mm.write_byte(0x00)
	mm.seek(getQuotaOffset(""Tarraco"", ""timber""))
	mm.write_byte(0x00)
	mm.seek(getQuotaOffset(""Volubilis"", ""iron""))
	mm.write_byte(0x0F)
	
	# changeGoodsPrices(""vegetables"", 1.20, ""both"")
	# changeGoodsPrices(""iron"", 0.875, ""both"")
	# changeGoodsPrices(""pottery"", 0.85, ""both"")
	# changeGoodsPrices(""marble"", 1.20, ""both"")
	# changeGoodsPrices(""furniture"", 0.75, ""both"")
	# changeGoodsPrices(""timber"", 0.5, ""sellers"")
	
	
	
	setTradeRoutePrice(""Carthago Nova"", 2100)
	setTradeRoutePrice(""Caesarea"", 800)
	setTradeRoutePrice(""Volubilis"", 2000)
	setTradeRoutePrice(""Valentia"", 900)
	setTradeRoutePrice(""Tarraco"", 2500)
	
	setLocalProduction(""timber"", 1)
	
	# close the map
	mm.close()
	"
JzDNVPcf,circular list,Kaelygon,C,Tuesday 2nd of July 2024 04:50:06 PM CDT,"// ./main > out.txt && grep -o ""$(head -c 10000 ./out.txt | tail -c 16)"" ./out.txt | wc -l
// ./main | dieharder -B -g 200 -a
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <stdint.h>
#include <limits.h>
#include <string.h>

typedef uint8_t cygonUI;


cygonUI cgRor(cygonUI num, cygonUI shift){
	cygonUI invShift=sizeof(num)*CHAR_BIT-shift;
	return ((num >> shift) | (num << invShift ));
}

typedef struct cygonNode{
	cygonUI num;
	struct cygonNode* next;
}cygonNode;

typedef struct cygonList{
	size_t bits; 		//bit width of cygonUI
	size_t size;
	cygonNode* node;	//list of nodes
	cygonNode** mem;	//Mallocated node list adresses
	
}cygonList;


void nextNode(cygonList* list) {
	list->node=list->node->next;
}

void cygonInit(cygonList* list, size_t nodeCount) {
    if (nodeCount < 1) {
        fprintf(stderr, ""List can't have 0 nodes! Using size 1\n"");
        nodeCount = 1;
    }
    
    list->bits = sizeof(cygonUI) * CHAR_BIT;
	list->size = nodeCount;
    list->node = (cygonNode*) malloc(sizeof(cygonNode) * nodeCount);
	list->mem = (cygonNode**) malloc(sizeof(cygonNode*) * nodeCount); // allocate node pointers

    if (list->node == NULL || list->mem == NULL) {
        fprintf(stderr, ""Memory allocation failed\n"");
        return;
    }

    // Link circular list
    for (size_t i = 0; i < nodeCount; ++i) {
		list->mem[i] = &list->node[i]; //Store mallocated address of node
        list->node[i].num = 0;
        list->node[i].next = &list->node[(i + 1) % nodeCount];
    }
}

void cygonFree(cygonList* list) {
	free(*list->mem);
	free(list->mem);
}

void cygonSeed(cygonList* list, cygonUI seed) {
	cygonNode* start = list->node; //store starting point

	do{ 
		list->node->num=seed;
		nextNode(list);
			
		{//placeholder
			seed++;
		}

	}while(list->node != start); //Reaching starting point means we have looped through circular list
}

cygonUI cygonRand(cygonList* list) {
	cygonUI a = list->node->num;
	cygonUI b = list->node->next->num;

	{//placeholder
		a++;
	}

	//update and increment circular list
	list->node->num=a;
	list->node=list->node->next; 

	return a;
}

//print all nodes
void cygonPrint(cygonList* list) {
	cygonNode* start = list->node;

	do{
		printf(""%u "",list->node->num);
		list->node=list->node->next;
	}while(list->node != start);
	printf(""\n"");
}

size_t randCountArg(int argc, char *argv) { 
	if (argc > 1) {
		if(!strcmp(argv,""default"")){
			return 512;
		}else{
			char isString=1;
			char *x = argv;
			while (*x) {
				if (!isdigit(*x)) {
					isString=0;
					break;
				}
				x++;
			}

			if(isString){ 
				return strtoul(argv, NULL, 10); 
			}
		}
	}else{
		return -1; //generate indefinitely 
	}
}

int main(int argc, char *argv[]) { 
	size_t count = randCountArg(argc, argv[1]);

	cygonList list;

	cygonInit(&list, 4);
	cygonSeed(&list, 0);

	for(size_t i=0;i<count;i++){
		cygonUI num = cygonRand(&list);
		//fwrite(&num, sizeof(cygonUI), 1, stdout); //write raw
		printf(""%u "",num);
	}
	printf(""\n"");

	cygonFree(&list);

	return 0;
}
"
2wiJMS2p,CC-Gambler,minecartchris,Lua,Tuesday 2nd of July 2024 04:43:10 PM CDT,"while not fs.exists(""/disk/money.lua"") do
    sleep(0.75)
    print(""You do not have a card inserted"")
    sleep(2)
    shell.run(""reboot"")
end
print(""Please do not remove your card from the drive during games"")
local money = "" ""
local winner = false
local randnum = 0
local bet = 0
local money2 = fs.open(""/disk/money.lua"", ""r"")
money = money2.readAll()
money2.close()
local h = fs.open(""house.lua"", ""r"")
house = h.readAll()
h.close()
print(""$"",money)
money = tonumber(money)
print(""what is your bet?"")
bet = tonumber(io.read())
print(""what is your guess 1 to 15?"")
userGess = tonumber(io.read()) 
if bet > money then
   print(""You do not have enough funds"")
   sleep(3)
   shell.run(""reboot"") 
end
randnum = tonumber(math.random(0, 14) + 1)
if userGess == randnum then
    winner = true
end
if not winner then
    print(""you lost ;("")
    print(""The correct number was"", randnum)
    money = money - bet
    house = house + bet
    print(""you have $"",money, ""left over"")
end
if winner then
    bet = bet * 2
    money = bet + money
    print(""You win!!!!!"")
    house = house - bet
    print(""You now have $"", money)
end
money2 = fs.open(""/disk/money.lua"", ""w"")
money2.write(money)
money2.close()
h = fs.open(""house.lua"", ""w"")
h.write(house)
h.close()
print(""If removing your card do it now"")
sleep(5)
shell.run(""reboot"")"
9bRC2d1f,Servo Sweep rev_01,pleasedontcode,Arduino,Tuesday 2nd of July 2024 04:42:46 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Servo Sweep
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-07-02 21:38:55

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Design an Arduino system to manage two SG90 */
	/* servomotors using PWM on pins D3 and D5. Leverage */
	/* the Servo and ArduinoLearningBoard libraries. */
	/* Include setup for pin initialization and a loop */
	/* function to handle continuous motor position */
	/* updates. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#define USE_ALB_Servo  // Define to include the Servo functions of the ArduinoLearningBoard Library
#include ""ArduinoLearningBoard.h""  // Include the main ArduinoLearningBoard library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF PWM OUTPUT PINS *****/
const uint8_t sg90_Servomotor_PWMSignal_PIN_D3 = 3;
const uint8_t sg90_Servomotor_PWMSignal_PIN_D5 = 5;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
uint8_t sg90_Servomotor_PWMSignal_PIN_D3_rawData = 0;
uint8_t sg90_Servomotor_PWMSignal_PIN_D5_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float sg90_Servomotor_PWMSignal_PIN_D3_phyData = 0.0;
float sg90_Servomotor_PWMSignal_PIN_D5_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Servo servo1;  // Create a Servo object for the first servo
Servo servo2;  // Create a Servo object for the second servo

void setup(void)
{
  // put your setup code here, to run once:

  pinMode(sg90_Servomotor_PWMSignal_PIN_D3, OUTPUT);
  pinMode(sg90_Servomotor_PWMSignal_PIN_D5, OUTPUT);

  servo1.attach(sg90_Servomotor_PWMSignal_PIN_D3);  // Attach the first servo to pin D3
  servo2.attach(sg90_Servomotor_PWMSignal_PIN_D5);  // Attach the second servo to pin D5
}

void loop(void)
{
  // put your main code here, to run repeatedly:

  // Sweep the first servo
  for (int pos = 0; pos <= 180; pos += 1) {
    servo1.write(pos);  // Move the first servo to the current position
    delay(15);  // Wait for 15 milliseconds
  }
  for (int pos = 180; pos >= 0; pos -= 1) {
    servo1.write(pos);  // Move the first servo to the current position
    delay(15);  // Wait for 15 milliseconds
  }

  // Sweep the second servo
  for (int pos = 0; pos <= 180; pos += 1) {
    servo2.write(pos);  // Move the second servo to the current position
    delay(15);  // Wait for 15 milliseconds
  }
  for (int pos = 180; pos >= 0; pos -= 1) {
    servo2.write(pos);  // Move the second servo to the current position
    delay(15);  // Wait for 15 milliseconds
  }
}

/* END CODE */"
1uetqWHw,Untitled,SkyZh0,JavaScript,Tuesday 2nd of July 2024 04:14:09 PM CDT,"import React, { useState } from 'react';

import { MapContainer, TileLayer, Marker, Popup, Polyline, CircleMarker } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';

// Fix icon issues with Leaflet
import L from 'leaflet';
import iconRetinaUrl from 'leaflet/dist/images/marker-icon-2x.png';
import shadowUrl from 'leaflet/dist/images/marker-shadow.png';

const iconUrl = 'https://cdn.icon-icons.com/icons2/1238/PNG/512/blacksquare_83753.png';
const favoriteIconUrl = 'https://cdn.icon-icons.com/icons2/37/PNG/512/star_favorite_4587.png';

L.Marker.prototype.options.icon = L.icon({
  iconRetinaUrl,
  iconUrl,
  // shadowUrl, // remove this line
  iconSize: [10, 15],
  iconAnchor: [7, 25],
  popupAnchor: [1, -34],
  tooltipAnchor: [16, -28],
  shadowSize: [0, 0]
});


const favoriteIcon = L.icon({
  iconUrl: favoriteIconUrl,
  shadowUrl,
  iconSize: [15, 20],
  iconAnchor: [7, 25],
  popupAnchor: [1, -34],
  tooltipAnchor: [16, -28],
  shadowSize: [25, 25]
});

// Data for Metro stations on Line 
const metroStations = [
  {
    line: ""Ligne 1"",
    color : ""#FFCE00"",
    stations: [
    {name: ""La Défense"", lat: 48.891389, lng: 2.237222 },
    { name: ""Esplanade de la Défense"", lat: 48.888611, lng: 2.241389 },
    { name: ""Pont de Neuilly"", lat: 48.884167, lng: 2.254722 },
    { name: ""Les Sablons"", lat: 48.878611, lng: 2.269722 },
    { name: ""Porte Maillot"", lat: 48.876667, lng: 2.282222 },
    { name: ""Argentine"", lat: 48.874722, lng: 2.293889 },
    { name: ""Charles de Gaulle – Étoile"", lat: 48.873792, lng: 2.295028 },
    { name: ""George V"", lat: 48.872028, lng: 2.303889 },
    { name: ""Franklin D. Roosevelt"", lat: 48.869167, lng: 2.309444 },
    { name: ""Champs-Élysées – Clemenceau"", lat: 48.8665, lng: 2.314722 },
    { name: ""Concorde"", lat: 48.865556, lng: 2.321111 },
    { name: ""Tuileries"", lat: 48.863333, lng: 2.328611 },
    { name: ""Palais Royal – Musée du Louvre"", lat: 48.862222, lng: 2.336111 },
    { name: ""Louvre – Rivoli"", lat: 48.861111, lng: 2.340833 },
    { name: ""Châtelet"", lat: 48.858093, lng: 2.347000 },
    { name: ""Hôtel de Ville"", lat: 48.8575, lng: 2.351111 },
    { name: ""Saint-Paul"", lat: 48.855833, lng: 2.359444 },
    { name: ""Bastille"", lat: 48.853, lng: 2.369167 },
    { name: ""Gare de Lyon"", lat: 48.844167, lng: 2.374722 },
    { name: ""Reuilly – Diderot"", lat: 48.848333, lng: 2.383889 },
    { name: ""Nation"", lat: 48.848333, lng: 2.395833 },
    { name: ""Porte de Vincennes"", lat: 48.848333, lng: 2.4075 },
    { name: ""Saint-Mandé"", lat: 48.846667, lng: 2.415833 },
    { name: ""Bérault"", lat: 48.844167, lng: 2.420833 },
    { name: ""Château de Vincennes"", lat: 48.844167, lng: 2.440278 }
  ]
},
  {
    line: ""Ligne 3"",
    color: ""#9F9825"",
    stations: [
  { name: ""Pont de Levallois – Bécon"", lat: 48.897222, lng: 2.2825 },
  { name: ""Anatole France"", lat: 48.895, lng: 2.286944 },
  { name: ""Louise Michel"", lat: 48.893333, lng: 2.290556 },
  { name: ""Porte de Champerret"", lat: 48.888056, lng: 2.288333 },
  { name: ""Pereire"", lat: 48.884444, lng: 2.295833 },
  { name: ""Wagram"", lat: 48.883056, lng: 2.300833 },
  { name: ""Malesherbes"", lat: 48.881389, lng: 2.308333 },
  { name: ""Villiers"", lat: 48.881111, lng: 2.314444 },
  { name: ""Europe"", lat: 48.879444, lng: 2.323056 },
  { name: ""Saint-Lazare"", lat: 48.8756, lng: 2.3265 },
  { name: ""Havre – Caumartin"", lat: 48.873056, lng: 2.329167 },
  { name: ""Opéra"", lat: 48.870833, lng: 2.3325 },
  { name: ""Quatre-Septembre"", lat: 48.869167, lng: 2.335278 },
  { name: ""Bourse"", lat: 48.868056, lng: 2.341111 },
  { name: ""Sentier"", lat: 48.867222, lng: 2.346111 },
  { name: ""Réaumur – Sébastopol"", lat: 48.866111, lng: 2.348333 },
  { name: ""Arts et Métiers"", lat: 48.865556, lng: 2.355278 },
  { name: ""Temple"", lat: 48.866389, lng: 2.360556 },
  { name: ""République"",lat: 48.867222, lng: 2.363333 },
  { name: ""Parmentier"", lat: 48.867222, lng: 2.371944 },
  { name: ""Rue Saint-Maur"", lat: 48.864444, lng: 2.378333 },
  { name: ""Père Lachaise"", lat: 48.863056, lng: 2.3875 },
  { name: ""Gambetta"", lat: 48.865278, lng: 2.398056 },
  { name: ""Porte de Bagnolet"", lat: 48.864167, lng: 2.410278 },
  { name: ""Gallieni"", lat: 48.864722, lng: 2.416389 }
],
  },

    {
      line: ""Ligne 2"",
      color: ""#0064B0"",
      stations: [
    { name: ""Porte Dauphine"", lat: 48.8715, lng: 2.2765 },
    { name: ""Victor Hugo"", lat: 48.868056, lng: 2.288611 },
    { name: ""Charles de Gaulle – Étoile"", lat: 48.873792, lng: 2.295028 },
    { name: ""Ternes"", lat: 48.878056, lng: 2.3025 },
    { name: ""Courcelles"", lat: 48.880278, lng: 2.309167 },
    { name: ""Monceau"", lat: 48.884722, lng: 2.314722 },
    { name: ""Villiers"", lat: 48.883333, lng: 2.322778 },
    { name: ""Rome"", lat: 48.883333, lng: 2.328333 },
    { name: ""Place de Clichy"", lat: 48.883333, lng: 2.326111 },
    { name: ""Blanche"", lat: 48.882222, lng: 2.332222 },
    { name: ""Pigalle"", lat: 48.8820, lng: 2.3372 },
    { name: ""Anvers"", lat: 48.882778, lng: 2.344167 },
    { name: ""Barbès – Rochechouart"", lat: 48.883611, lng: 2.349444 },
    { name: ""La Chapelle"", lat: 48.883333, lng: 2.362222 },
    { name: ""Stalingrad"", lat: 48.884167, lng: 2.369444 },
    { name: ""Jaurès"", lat: 48.883611, lng: 2.370278 },
    { name: ""Colonel Fabien"", lat: 48.876111, lng: 2.370833 },
    { name: ""Belleville"", lat: 48.873056, lng: 2.378333 },
    { name: ""Couronnes"", lat: 48.869722, lng: 2.380833 },
    { name: ""Ménilmontant"", lat: 48.866667, lng: 2.383611 },
    { name: ""Père Lachaise"", lat: 48.861944, lng: 2.386111 },
    { name: ""Philippe Auguste"", lat: 48.858333, lng: 2.3875 },
    { name: ""Alexandre Dumas"", lat: 48.854722, lng: 2.389167 },
    { name: ""Avron"", lat: 48.851111, lng: 2.392222 },
    { name: ""Nation"", lat: 48.848333, lng: 2.395833 }
]
    },

  {
    line: ""Ligne 4"",
    color: ""#C04191"",
    stations: [
  { name: ""Porte de Clignancourt"", lat: 48.898333, lng: 2.344722 },
  { name: ""Simplon"", lat: 48.896111, lng: 2.348056 },
  { name: ""Marcadet – Poissonniers"", lat: 48.8925, lng: 2.349444 },
  { name: ""Château Rouge"", lat: 48.890278, lng: 2.349444 },
  { name: ""Barbès – Rochechouart"", lat: 48.883611, lng: 2.349444 },
  { name: ""Gare du Nord"", lat: 48.880833, lng: 2.355556 },
  { name: ""Gare de l'Est"", lat: 48.876667, lng: 2.359722 },
  { name: ""Château d'Eau"", lat: 48.873056, lng: 2.358333 },
  { name: ""Strasbourg – Saint-Denis"", lat: 48.869167, lng: 2.354722 },
  { name: ""Réaumur – Sébastopol"", lat: 48.866111, lng: 2.348333 },
  { name: ""Étienne Marcel"", lat: 48.864722, lng: 2.349444 },
  { name: ""Les Halles"", lat: 48.8625, lng: 2.346944 },
  { name: ""Châtelet"", lat: 48.858093, lng: 2.347000 },
  { name: ""Cité"", lat: 48.855, lng: 2.344167 },
  { name: ""Saint-Michel"", lat: 48.853, lng: 2.343889 },
  { name: ""Odéon"", lat: 48.852222, lng: 2.340556 },
  { name: ""Saint-Germain-des-Prés"", lat: 48.851111, lng: 2.333056 },
  { name: ""Saint-Sulpice"", lat: 48.850278, lng: 2.330833 },
  { name: ""Saint-Placide"", lat: 48.847222, lng: 2.326944 },
  { name: ""Montparnasse – Bienvenüe"", lat: 48.843333, lng: 2.323333 },
  { name: ""Vavin"", lat: 48.841667, lng: 2.326111 },
  { name: ""Raspail"", lat: 48.838889, lng: 2.326944 },
  { name: ""Denfert-Rochereau"", lat: 48.833889, lng: 2.331667 },
  { name: ""Mouton-Duvernet"", lat: 48.831111, lng: 2.330278 },
  { name: ""Alésia"", lat: 48.828333, lng: 2.326111 },
  { name: ""Porte d'Orléans"", lat: 48.823611, lng: 2.325556 },
  { name: ""Mairie de Montrouge"", lat: 48.818056, lng: 2.319722 },
  { name: ""Barbara"", lat: 48.814167, lng: 2.317222 },
  { name: ""Bagneux – Lucie Aubrac"", lat: 48.804444, lng: 2.310833 }
]
  },
  {
    line: ""Ligne 5"",
    color: ""#F28E42"",
    stations: [
  { name: ""Bobigny – Pablo Picasso"", lat: 48.903333, lng: 2.4425 },
  { name: ""Bobigny – Pantin – Raymond Queneau"", lat: 48.891667, lng: 2.4275 },
  { name: ""Église de Pantin"", lat: 48.885, lng: 2.411944 },
  { name: ""Hoche"", lat: 48.888333, lng: 2.398056 },
  { name: ""Porte de Pantin"", lat: 48.889722, lng: 2.396111 },
  { name: ""Ourcq"", lat: 48.888611, lng: 2.381944 },
  { name: ""Laumière"", lat: 48.886944, lng: 2.379444 },
  { name: ""Jaurès"", lat: 48.883611, lng: 2.370278 },
  { name: ""Stalingrad"", lat: 48.884167, lng: 2.369444 },
  { name: ""Gare du Nord"", lat: 48.880833, lng: 2.355556 },
  { name: ""Gare de l'Est"", lat: 48.876667, lng: 2.359722 },
  { name: ""Jacques Bonsergent"", lat: 48.872778, lng: 2.363056 },
  { name: ""République"", lat: 48.867222, lng: 2.363333 },
  { name: ""Oberkampf"", lat: 48.864167, lng: 2.371667 },
  { name: ""Richard-Lenoir"", lat: 48.861111, lng: 2.374167 },
  { name: ""Bréguet – Sabin"", lat: 48.8575, lng: 2.374722 },
  { name: ""Bastille"", lat: 48.853, lng: 2.369167 },
  { name: ""Quai de la Rapée"", lat: 48.845, lng: 2.369444 },
  { name: ""Gare d'Austerlitz"", lat: 48.842222, lng: 2.365556 },
  { name: ""Saint-Marcel"", lat: 48.839722, lng: 2.3575 },
  { name: ""Campo-Formio"", lat: 48.8375, lng: 2.356111 },
  { name: ""Place d'Italie"", lat: 48.831944, lng: 2.355556 }
]
  },

  {
    line: ""Ligne 6"",
    color: ""#83C491"",
    stations: [
  { name: ""Charles de Gaulle – Étoile"", lat: 48.873792, lng: 2.295028 },
  { name: ""Kléber"", lat: 48.871111, lng: 2.293333 },
  { name: ""Boissière"", lat: 48.868056, lng: 2.293333 },
  { name: ""Trocadéro"", lat: 48.863611, lng: 2.288889 },
  { name: ""Passy"", lat: 48.857778, lng: 2.282778 },
  { name: ""Bir-Hakeim"", lat: 48.855833, lng: 2.291944 },
  { name: ""Dupleix"", lat: 48.851944, lng: 2.2925 },
  { name: ""La Motte-Picquet – Grenelle"", lat: 48.849444, lng: 2.298056 },
  { name: ""Cambronne"", lat: 48.847778, lng: 2.301111 },
  { name: ""Sèvres – Lecourbe"", lat: 48.843889, lng: 2.308889 },
  { name: ""Pasteur"", lat: 48.842222, lng: 2.3125 },
  { name: ""Montparnasse – Bienvenüe"", lat: 48.843333, lng: 2.323333 },
  { name: ""Edgar Quinet"", lat: 48.8425, lng: 2.3275 },
  { name: ""Raspail"", lat: 48.838889, lng: 2.326944 },
  { name: ""Denfert-Rochereau"", lat: 48.833889, lng: 2.331667 },
  { name: ""Saint-Jacques"", lat: 48.832222, lng: 2.336389 },
  { name: ""Glacière"", lat: 48.828611, lng: 2.339444 },
  { name: ""Corvisart"", lat: 48.8325, lng: 2.355 },
  { name: ""Place d'Italie"", lat: 48.831944, lng: 2.355556 },
  { name: ""Nationale"", lat: 48.828611, lng: 2.361944 },
  { name: ""Chevaleret"", lat: 48.835556, lng: 2.368889 },
  { name: ""Quai de la Gare"", lat: 48.8375, lng: 2.373333 },
  { name: ""Bercy"", lat: 48.840833, lng: 2.379167 },
  { name: ""Dugommier"", lat: 48.839167, lng: 2.388889 },
  { name: ""Daumesnil"", lat: 48.838611, lng: 2.391111 },
  { name: ""Bel-Air"", lat: 48.841111, lng: 2.400833 },
  { name: ""Picpus"", lat: 48.841667, lng: 2.406389 },
  { name: ""Nation"", lat: 48.848333, lng: 2.395833 }
]
  },
  {
    line: ""Ligne 7"",
    color: ""#F3A4BA"",
    stations: [
  { name: ""La Courneuve – 8 Mai 1945"", lat: 48.928611, lng: 2.395556 },
  { name: ""Fort d'Aubervilliers"", lat: 48.914722, lng: 2.394167 },
  { name: ""Aubervilliers – Pantin – Quatre Chemins"", lat: 48.899444, lng: 2.383889 },
  { name: ""Porte de la Villette"", lat: 48.898889, lng: 2.383056 },
  { name: ""Corentin Cariou"", lat: 48.893611, lng: 2.379167 },
  { name: ""Crimée"", lat: 48.890833, lng: 2.375278 },
  { name: ""Riquet"", lat: 48.889167, lng: 2.366944 },
  { name: ""Stalingrad"", lat: 48.884167, lng: 2.369444 },
  { name: ""Louis Blanc"", lat: 48.882222, lng: 2.367778 },
  { name: ""Château-Landon"", lat: 48.878889, lng: 2.3625 },
  { name: ""Gare de l'Est"", lat: 48.876667, lng: 2.359722 },
  { name: ""Poissonnière"", lat: 48.8925, lng: 2.349444 },
  { name: ""Cadet"", lat: 48.874167, lng: 2.345556 },
  { name: ""Le Peletier"", lat: 48.873056, lng: 2.340278 },
  { name: ""Chaussée d'Antin – La Fayette"", lat: 48.8725, lng: 2.333889 },
  { name: ""Opéra"", lat: 48.870833, lng: 2.3325 },
  { name: ""Pyramides"", lat: 48.865, lng: 2.3325 },
  { name: ""Palais Royal – Musée du Louvre"", lat: 48.862222, lng: 2.336111 },
  { name: ""Pont Neuf"", lat: 48.858333, lng: 2.341111 },
  { name: ""Châtelet"", lat: 48.858093, lng: 2.347000 },
  { name: ""Pont Marie"", lat: 48.852778, lng: 2.3575 },
  { name: ""Sully – Morland"", lat: 48.851111, lng: 2.3625 },
  { name: ""Jussieu"", lat: 48.8475, lng: 2.355278 },
  { name: ""Place Monge"", lat: 48.843333, lng: 2.3525 },
  { name: ""Censier – Daubenton"", lat: 48.841111, lng: 2.350278 },
  { name: ""Les Gobelins"", lat: 48.837222, lng: 2.349167 },
  { name: ""Place d'Italie"", lat: 48.831944, lng: 2.355556 },
  { name: ""Tolbiac"", lat: 48.827778, lng: 2.358333 },
  { name: ""Maison Blanche"", lat: 48.822778, lng: 2.360278 },
  { name: ""Porte d'Italie"", lat: 48.819167, lng: 2.3625 },
  { name: ""Porte de Choisy"", lat: 48.8175, lng: 2.364444 },
  { name: ""Porte d'Ivry"", lat: 48.814722, lng: 2.365833 },
  { name: ""Pierre et Marie Curie"", lat: 48.812222, lng: 2.370278 },
  { name: ""Mairie d'Ivry"", lat: 48.813611, lng: 2.384167 },
]
  },

  {
    line: ""Ligne 7"",
    color: ""#F3A4BA"",
    stations: [
  { name: ""La Courneuve – 8 Mai 1945"", lat: 48.928611, lng: 2.395556 },
  { name: ""Fort d'Aubervilliers"", lat: 48.914722, lng: 2.394167 },
  { name: ""Aubervilliers – Pantin – Quatre Chemins"", lat: 48.899444, lng: 2.383889 },
  { name: ""Porte de la Villette"", lat: 48.898889, lng: 2.383056 },
  { name: ""Corentin Cariou"", lat: 48.893611, lng: 2.379167 },
  { name: ""Crimée"", lat: 48.890833, lng: 2.375278 },
  { name: ""Riquet"", lat: 48.889167, lng: 2.366944 },
  { name: ""Stalingrad"", lat: 48.884167, lng: 2.369444 },
  { name: ""Louis Blanc"", lat: 48.882222, lng: 2.367778 },
  { name: ""Château-Landon"", lat: 48.878889, lng: 2.3625 },
  { name: ""Gare de l'Est"", lat: 48.876667, lng: 2.359722 },
  { name: ""Poissonnière"", lat: 48.8925, lng: 2.349444 },
  { name: ""Cadet"", lat: 48.874167, lng: 2.345556 },
  { name: ""Le Peletier"", lat: 48.873056, lng: 2.340278 },
  { name: ""Chaussée d'Antin – La Fayette"", lat: 48.8725, lng: 2.333889 },
  { name: ""Opéra"", lat: 48.870833, lng: 2.3325 },
  { name: ""Pyramides"", lat: 48.865, lng: 2.3325 },
  { name: ""Palais Royal – Musée du Louvre"", lat: 48.862222, lng: 2.336111 },
  { name: ""Pont Neuf"", lat: 48.858333, lng: 2.341111 },
  { name: ""Châtelet"", lat: 48.858093, lng: 2.347000 },
  { name: ""Pont Marie"", lat: 48.852778, lng: 2.3575 },
  { name: ""Sully – Morland"", lat: 48.851111, lng: 2.3625 },
  { name: ""Jussieu"", lat: 48.8475, lng: 2.355278 },
  { name: ""Place Monge"", lat: 48.843333, lng: 2.3525 },
  { name: ""Censier – Daubenton"", lat: 48.841111, lng: 2.350278 },
  { name: ""Les Gobelins"", lat: 48.837222, lng: 2.349167 },
  { name: ""Place d'Italie"", lat: 48.831944, lng: 2.355556 },
  { name: ""Tolbiac"", lat: 48.827778, lng: 2.358333 },
  { name: ""Maison Blanche"", lat: 48.822778, lng: 2.360278 },
  { name: ""Le Kremlin-Bicêtre"", lat: 48.812778, lng: 2.3625 },
  { name: ""Villejuif – Léo Lagrange"", lat: 48.804167, lng: 2.365 },
  { name: ""Villejuif – Paul Vaillant-Couturier"", lat: 48.799444, lng: 2.368611 },
  { name: ""Villejuif – Louis Aragon"", lat: 48.791944, lng: 2.368611 }

]
  },




  {
    line: ""Ligne 8"",
    color: ""#CEADD2"",
    stations: [
  { name: ""Balard"", lat: 48.836389, lng: 2.276944 },
  { name: ""Lourmel"", lat: 48.838611, lng: 2.2825 },
  { name: ""Boucicaut"", lat: 48.838889, lng: 2.289444 },
  { name: ""Félix Faure"", lat: 48.839722, lng: 2.295833 },
  { name: ""Commerce"", lat: 48.843333, lng: 2.297778 },
  { name: ""La Motte-Picquet – Grenelle"", lat: 48.849444, lng: 2.298056 },
  { name: ""École Militaire"", lat: 48.855, lng: 2.3075 },
  { name: ""La Tour-Maubourg"", lat: 48.860278, lng: 2.312778 },
  { name: ""Invalides"", lat: 48.862778, lng: 2.313889 },
  { name: ""Concorde"", lat: 48.865556, lng: 2.321111 },
  { name: ""Madeleine"", lat: 48.869167, lng: 2.324167 },
  { name: ""Opéra"", lat: 48.870833, lng: 2.3325 },
  { name: ""Richelieu – Drouot"", lat: 48.8725, lng: 2.338333 },
  { name: ""Grands Boulevards"", lat: 48.872778, lng: 2.343611 },
  { name: ""Bonne Nouvelle"", lat: 48.870833, lng: 2.348333 },
  { name: ""Strasbourg – Saint-Denis"", lat: 48.869167, lng: 2.354722 },
  { name: ""République"", lat: 48.867222, lng: 2.363333 },
  { name: ""Filles du Calvaire"", lat: 48.8625, lng: 2.367222 },
  { name: ""Saint-Sébastien – Froissart"", lat: 48.861667, lng: 2.369167 },
  { name: ""Chemin Vert"", lat: 48.857778, lng: 2.370833 },
  { name: ""Bastille"", lat: 48.853, lng: 2.369167 },
  { name: ""Ledru-Rollin"", lat: 48.851111, lng: 2.371944 },
  { name: ""Faidherbe – Chaligny"", lat: 48.849167, lng: 2.379722 },
  { name: ""Reuilly – Diderot"", lat: 48.8475, lng: 2.382778 },
  { name: ""Montgallet"", lat: 48.845556, lng: 2.388333 },
  { name: ""Daumesnil"", lat: 48.838611, lng: 2.391111 },
  { name: ""Michel Bizot"", lat: 48.837222, lng: 2.396944 },
  { name: ""Porte Dorée"", lat: 48.835278, lng: 2.401111 },
  { name: ""Porte de Charenton"", lat: 48.832222, lng: 2.404722 },
  { name: ""Liberté"", lat: 48.826944, lng: 2.407222 },
  { name: ""Charenton – Écoles"", lat: 48.821944, lng: 2.410278 },
  { name: ""École Vétérinaire de Maisons-Alfort"", lat: 48.812222, lng: 2.417222 },
  { name: ""Maisons-Alfort – Stade"", lat: 48.806389, lng: 2.428056 },
  { name: ""Maisons-Alfort – Les Juilliottes"", lat: 48.799444, lng: 2.434167 },
  { name: ""Créteil – L'Échat"", lat: 48.792222, lng: 2.448611 },
  { name: ""Créteil – Université"", lat: 48.7875, lng: 2.454167 },
  { name: ""Créteil – Préfecture"", lat: 48.783333, lng: 2.461111 },
  { name: ""Créteil – Pointe du Lac"", lat: 48.774444, lng: 2.467222 },

]
  },

  {
    line: ""Ligne 9"",
    color: ""#D5C900"",
    stations: [       
    { name: ""Pont de Sèvres"", lat: 48.8275, lng: 2.233889 },
    { name: ""Billancourt"", lat: 48.832222, lng: 2.239444 },
    { name: ""Marcel Sembat"", lat: 48.835556, lng: 2.244444 },
    { name: ""Porte de Saint-Cloud"", lat: 48.837778, lng: 2.256111 },
    { name: ""Exelmans"", lat: 48.843056, lng: 2.261111 },
    { name: ""Michel-Ange – Molitor"", lat: 48.844722, lng: 2.265556 },
    { name: ""Michel-Ange – Auteuil"", lat: 48.8475, lng: 2.264722 },
    { name: ""Jasmin"", lat: 48.8525, lng: 2.266944 },
    { name: ""Ranelagh"", lat: 48.856111, lng: 2.269444 },
    { name: ""La Muette"", lat: 48.857778, lng: 2.274722 },
    { name: ""Rue de la Pompe"", lat: 48.864722, lng: 2.279444 },
    { name: ""Trocadéro"", lat: 48.863611, lng: 2.288889 },
    { name: ""Iéna"", lat: 48.865, lng: 2.293611 },
    { name: ""Alma – Marceau"", lat: 48.864722, lng: 2.300278 },
    { name: ""Franklin D. Roosevelt"", lat: 48.8675, lng: 2.308333 },
    { name: ""Saint-Philippe du Roule"", lat: 48.871944, lng: 2.312778 },
    { name: ""Miromesnil"", lat: 48.873889, lng: 2.3175 },
    { name: ""Saint-Augustin"", lat: 48.875556, lng: 2.322222 },
    { name: ""Havre – Caumartin"", lat: 48.874722, lng: 2.327222 },
    { name: ""Chaussée d'Antin – La Fayette"", lat: 48.8725, lng: 2.333889 },
    { name: ""Richelieu – Drouot"", lat: 48.8725, lng: 2.338333 },
    { name: ""Grands Boulevards"", lat: 48.872778, lng: 2.343611 },
    { name: ""Bonne Nouvelle"", lat: 48.870833, lng: 2.348333 },
    { name: ""Strasbourg – Saint-Denis"", lat: 48.869167, lng: 2.354722 },
    { name: ""République"", lat: 48.867222, lng: 2.363333},
    { name: ""Oberkampf"", lat: 48.864167, lng: 2.371667 },
    { name: ""Saint-Ambroise"", lat: 48.861944, lng: 2.376111 },
    { name: ""Voltaire"", lat: 48.857778, lng: 2.380833 },
    { name: ""Charonne"", lat: 48.853611, lng: 2.3875 },
    { name: ""Rue des Boulets"", lat: 48.851944, lng: 2.392778 },
    { name: ""Nation"", lat: 48.848333, lng: 2.395833 },
    { name: ""Buzenval"", lat: 48.853611, lng: 2.400556 },
    { name: ""Maraîchers"", lat: 48.854167, lng: 2.4075 },
    { name: ""Porte de Montreuil"", lat: 48.853611, lng: 2.415833 },
    { name: ""Robespierre"", lat: 48.854722, lng: 2.423889 },
    { name: ""Croix de Chavaux"", lat: 48.855556, lng: 2.433056 },
    { name: ""Mairie de Montreuil"", lat: 48.861944, lng: 2.441667 },

]
  },

{
    line: ""Ligne 10"",
    color:""#E3B32A"",
    stations: [
    { name: ""Boulogne – Pont de Saint-Cloud"", lat: 48.837778, lng: 2.239167 },
    { name: ""Boulogne – Jean Jaurès"", lat: 48.8375, lng: 2.246111 },
    { name: ""Porte d'Auteuil"", lat: 48.847778, lng: 2.253333 },
    { name: ""Michel-Ange"", lat: 48.844722, lng: 2.265556 },
    { name: ""Église d'Auteuil"", lat: 48.846111, lng: 2.269167 },
    { name: ""Javel – André Citroën"", lat: 48.8475, lng: 2.2775 },
    { name: ""Charles Michels"", lat: 48.847222, lng: 2.288611 },
    { name: ""Avenue Émile Zola"", lat: 48.8475, lng: 2.295278 },
    { name: ""La Motte-Picquet – Grenelle"", lat: 48.849444, lng: 2.298056 },
    { name: ""Ségur"", lat: 48.850833, lng: 2.306111 },
    { name: ""Duroc"", lat: 48.8475, lng: 2.318056 },
    { name: ""Vaneau"", lat: 48.8475, lng: 2.324167 },
    { name: ""Sèvres – Babylone"", lat: 48.850278, lng: 2.325556 },
    { name: ""Mabillon"", lat: 48.8525, lng: 2.333333 },
    { name: ""Odéon"", lat: 48.853056, lng: 2.338333 },
    { name: ""Cluny – La Sorbonne"", lat: 48.852222, lng: 2.343333 },
    { name: ""Maubert – Mutualité"", lat: 48.850278, lng: 2.347778 },
    { name: ""Cardinal Lemoine"", lat: 48.846389, lng: 2.3525 },
    { name: ""Jussieu"", lat: 48.8475, lng: 2.355278 },
    { name: ""Gare d'Austerlitz"", lat: 48.842222, lng: 2.365556 }

]
  },


  {
    line: ""Ligne 10"",
    color:""#E3B32A"",
    stations: [
    { name: ""Boulogne – Pont de Saint-Cloud"", lat: 48.837778, lng: 2.239167 },
    { name: ""Boulogne – Jean Jaurès"", lat: 48.8375, lng: 2.246111 },
    { name: ""Molitor"", lat: 48.844722, lng: 2.265556 },
    { name: ""Chardon-Lagache"", lat: 48.841111, lng: 2.269444 },
    { name: ""Mirabeau"", lat: 48.847222, lng: 2.273889 },
    { name: ""Javel – André Citroën"", lat: 48.8475, lng: 2.2775 },
    { name: ""Charles Michels"", lat: 48.847222, lng: 2.288611 },
    { name: ""Avenue Émile Zola"", lat: 48.8475, lng: 2.295278 },
    { name: ""La Motte-Picquet – Grenelle"", lat: 48.849444, lng: 2.298056 },
    { name: ""Ségur"", lat: 48.850833, lng: 2.306111 },
    { name: ""Duroc"", lat: 48.8475, lng: 2.318056 },
    { name: ""Vaneau"", lat: 48.8475, lng: 2.324167 },
    { name: ""Sèvres – Babylone"", lat: 48.850278, lng: 2.325556 },
    { name: ""Mabillon"", lat: 48.8525, lng: 2.333333 },
    { name: ""Odéon"", lat: 48.853056, lng: 2.338333 },
    { name: ""Cluny – La Sorbonne"", lat: 48.852222, lng: 2.343333 },
    { name: ""Maubert – Mutualité"", lat: 48.850278, lng: 2.347778 },
    { name: ""Cardinal Lemoine"", lat: 48.846389, lng: 2.3525 },
    { name: ""Jussieu"", lat: 48.8475, lng: 2.355278 },
    { name: ""Gare d'Austerlitz"", lat: 48.842222, lng: 2.365556 }

]
  },

  
  {
    line: ""Ligne 11"",
    color:""#8D5E2A"",
    stations: [
    { name: ""Châtelet"", lat: 48.858093, lng: 2.347000 },
    { name: ""Hôtel de Ville"", lat: 48.8575, lng: 2.351111 },
    { name: ""Rambuteau"", lat: 48.861111, lng: 2.354167 },
    { name: ""Arts et Métiers"", lat: 48.865556, lng: 2.355278 },
    { name: ""République"", lat: 48.867222, lng: 2.363333 },
    { name: ""Goncourt"", lat: 48.869167, lng: 2.369444 },
    { name: ""Belleville"", lat: 48.871111, lng: 2.377222 },
    { name: ""Pyrénées"", lat: 48.872778, lng: 2.3875 },
    { name: ""Jourdain"", lat: 48.875833, lng: 2.3925 },
    { name: ""Place des Fêtes"", lat: 48.878056, lng: 2.398611 },
    { name: ""Télégraphe"", lat: 48.875, lng: 2.404444 },
    { name: ""Porte des Lilas"", lat: 48.876944, lng: 2.409444 },
    { name: ""Mairie des Lilas"", lat: 48.881111, lng: 2.415278 }
]
  },


  {
    line: ""Ligne 12"",
    color:""#00814F"",
    stations: [
    { name: ""Mairie d'Aubervilliers"", lat: 48.9154, lng: 2.3849 },
    { name: ""Aimé Césaire"", lat: 48.9075, lng: 2.3815 },
    { name: ""Front Populaire"", lat: 48.9100, lng: 2.3700 },
    { name: ""Porte de la Chapelle"", lat: 48.8973, lng: 2.3607 },
    { name: ""Marx Dormoy"", lat: 48.8911, lng: 2.3590 },
    { name: ""Marcadet - Poissonniers"", lat: 48.8925, lng: 2.349444 },
    { name: ""Jules Joffrin"", lat: 48.8927, lng: 2.3443 },
    { name: ""Lamarck - Caulaincourt"", lat: 48.8886, lng: 2.3382 },
    { name: ""Abbesses"", lat: 48.8840, lng: 2.3389 },
    { name: ""Pigalle"", lat: 48.8820, lng: 2.3372 },
    { name: ""Saint-Georges"", lat: 48.8782, lng: 2.3378 },
    { name: ""Notre-Dame-de-Lorette"", lat: 48.8765, lng: 2.3366 },
    { name: ""Trinité - d'Estienne d'Orves"", lat: 48.8740, lng: 2.3305 },
    { name: ""Saint-Lazare"", lat: 48.8756, lng: 2.3265 },
    { name: ""Madeleine"", lat: 48.8702, lng: 2.3241 },
    { name: ""Concorde"", lat: 48.865556, lng: 2.321111 },
    { name: ""Assemblée Nationale"", lat: 48.8592, lng: 2.3195 },
    { name: ""Solférino"", lat: 48.8570, lng: 2.3268 },
    { name: ""Rue du Bac"", lat: 48.8551, lng: 2.3262 },
    { name: ""Sèvres - Babylone"", lat: 48.8517, lng: 2.3223 },
    { name: ""Rennes"", lat: 48.8475, lng: 2.3255 },
    { name: ""Notre-Dame-des-Champs"", lat: 48.8444, lng: 2.3274 },
    { name: ""Montparnasse - Bienvenüe"", lat: 48.843333, lng: 2.323333 },
    { name: ""Falguière"", lat: 48.8410, lng: 2.3159 },
    { name: ""Pasteur"", lat: 48.8417, lng: 2.3094 },
    { name: ""Volontaires"", lat: 48.8384, lng: 2.3108 },
    { name: ""Vaugirard"", lat: 48.8372, lng: 2.3151 },
    { name: ""Convention"", lat: 48.8353, lng: 2.3024 },
    { name: ""Porte de Versailles"", lat: 48.8327, lng: 2.2886 },
    { name: ""Corentin Celton"", lat: 48.8272, lng: 2.2768 },
    { name: ""Mairie d'Issy"", lat: 48.8215, lng: 2.2730 }
]
  },

  {
    line: ""Ligne 13"",
    color: ""#98D4E2"",
    stations: [
      { name: ""Châtillon - Montrouge"", lat: 48.806944, lng: 2.294722 },
      { name: ""Malakoff - Rue Étienne Dolet"", lat: 48.8175, lng: 2.295278 },
      { name: ""Malakoff - Plateau de Vanves"", lat: 48.822222, lng: 2.298611 },
      { name: ""Porte de Vanves"", lat: 48.827222, lng: 2.305833 },
      { name: ""Plaisance"", lat: 48.832778, lng: 2.315556 },
      { name: ""Pernety"", lat: 48.833889, lng: 2.321667 },
      { name: ""Gaîté"", lat: 48.838056, lng: 2.3225 },
      { name: ""Montparnasse - Bienvenüe"", lat: 48.843333, lng: 2.323333 },
      { name: ""Duroc"", lat: 48.8475, lng: 2.318056 },
      { name: ""Saint-François-Xavier"", lat: 48.850833, lng: 2.318056 },
      { name: ""Varenne"", lat: 48.856944, lng: 2.315278 },
      { name: ""Invalides"", lat: 48.862778, lng: 2.313889 },
      { name: ""Champs-Élysées - Clemenceau"", lat: 48.867222, lng: 2.313333 },
      { name: ""Miromesnil"", lat: 48.873889, lng: 2.3175 },
      { name: ""Saint-Lazare"", lat: 48.8756, lng: 2.3265 },
      { name: ""Liège"", lat: 48.878611, lng: 2.327778 },
      { name: ""Place de Clichy"", lat: 48.883333, lng: 2.326111 },
      { name: ""La Fourche"", lat: 48.892222, lng: 2.326111 },
      { name: ""Guy Môquet"", lat: 48.895556, lng: 2.326111 },
      { name: ""Brochant"", lat: 48.889167, lng: 2.318333 },
      { name: ""Porte de Clichy"", lat: 48.893611, lng: 2.309722 },
      { name: ""Mairie de Clichy"", lat: 48.907778, lng: 2.305278 },
      { name: ""Gabriel Péri"", lat: 48.916389, lng: 2.296389 },
      { name: ""Les Courtilles"", lat: 48.929722, lng: 2.307778 },
      //{ name: ""Asnières - Gennevilliers - Les Agnettes"", lat: 48.924167, lng: 2.304722 },
]
  },

  {
    line: ""Ligne 13"",
    color: ""#98D4E2"",
    stations: [
    { name: ""Saint-Denis - Université"", lat: 48.936111, lng: 2.3575 },
    { name: ""Basilique de Saint-Denis"", lat: 48.936944, lng: 2.353611 },
    { name: ""Saint-Denis - Porte de Paris"", lat: 48.928611, lng: 2.351111 },
    { name: ""Carrefour Pleyel"", lat: 48.919722, lng: 2.337778 },
    { name: ""Mairie de Saint-Ouen"", lat: 48.910278, lng: 2.334722 },
    { name: ""Garibaldi"", lat: 48.906111, lng: 2.3325 },
    { name: ""Porte de Saint-Ouen"", lat: 48.901389, lng: 2.328333 },
    { name: ""Guy Môquet"", lat: 48.895556, lng: 2.326111 },
    { name: ""La Fourche"", lat: 48.892222, lng: 2.326111 },
    { name: ""Place de Clichy"", lat: 48.883333, lng: 2.326111 },
    { name: ""Liège"", lat: 48.878611, lng: 2.327778 },
    { name: ""Saint-Lazare"", lat: 48.8756, lng: 2.3265 },
    { name: ""Miromesnil"", lat: 48.873889, lng: 2.3175 },
    { name: ""Champs-Élysées - Clemenceau"", lat: 48.867222, lng: 2.313333 },
    { name: ""Invalides"", lat: 48.862778, lng: 2.313889 },
    { name: ""Varenne"", lat: 48.856944, lng: 2.315278 },
    { name: ""Saint-François-Xavier"", lat: 48.850833, lng: 2.318056 },
    { name: ""Duroc"", lat: 48.8475, lng: 2.318056 },
    { name: ""Montparnasse - Bienvenüe"", lat: 48.843333, lng: 2.323333 },
    { name: ""Gaîté"", lat: 48.838056, lng: 2.3225 },
    { name: ""Pernety"", lat: 48.833889, lng: 2.321667 },
    { name: ""Plaisance"", lat: 48.832778, lng: 2.315556 },
    { name: ""Porte de Vanves"", lat: 48.827222, lng: 2.305833 },
    { name: ""Malakoff - Plateau de Vanves"", lat: 48.822222, lng: 2.298611 },
    { name: ""Malakoff - Rue Étienne Dolet"", lat: 48.8175, lng: 2.295278 },
    { name: ""Châtillon - Montrouge"", lat: 48.806944, lng: 2.294722 },]
  },
  

  {
    line: ""Ligne 14"",
    color: ""#662483"",
    stations: [
    { name: ""Saint-Denis - Pleyel"", lat: 48.923333, lng: 2.357222 },
    { name: ""Mairie de Saint-Ouen"", lat: 48.910278, lng: 2.334722 },
    { name: ""Clichy - Saint-Ouen"", lat: 48.899722, lng: 2.319167 },
    { name: ""Porte de Clichy"", lat: 48.893611, lng: 2.309722 },
    { name: ""Pont Cardinet"", lat: 48.886389, lng: 2.315556 },
    { name: ""Saint-Lazare"", lat: 48.8756, lng: 2.3265 },
    { name: ""Madeleine"", lat: 48.870278, lng: 2.324167 },
    { name: ""Pyramides"", lat: 48.865000, lng: 2.331667 },
    { name: ""Châtelet"", lat: 48.858093, lng: 2.347000 },
    { name: ""Gare de Lyon"", lat: 48.844167, lng: 2.373056 },
    { name: ""Bercy"", lat: 48.841389, lng: 2.380833 },
    { name: ""Cour Saint-Émilion"", lat: 48.834444, lng: 2.386944 },
    { name: ""Bibliothèque François Mitterrand"", lat: 48.829444, lng: 2.376944 },
    { name: ""Olympiades"", lat: 48.826111, lng: 2.363611 },
    { name: ""Maison Blanche"", lat: 48.822778, lng: 2.360278 },
    { name: ""Kremlin-Bicêtre Hôpital"", lat: 48.812778, lng: 2.3625 },
    { name: ""Villejuif - Gustave Roussy"", lat: 48.803333, lng: 2.355833 },
    { name: ""Aéroport d'Orly"", lat: 48.728333, lng: 2.359444 }  
]
  },
];



const MapComponent = () => {
  const [favorites, setFavorites] = useState([]);

  const handleAddToFavorites = (stationName) => {
    if (!favorites.includes(stationName)) {
      setFavorites([...favorites, stationName]);
    }
  };

  const handleRemoveFromFavorites = (stationName) => {
    setFavorites(favorites.filter(fav => fav !== stationName));
  };

  return (
    <div>
      <MapContainer center={[48.8566, 2.3522]} zoom={13} style={{ height: '80vh', width: '100%' }}>
        <TileLayer
          url=""https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png""
          attribution='&copy; <a href=""https://www.openstreetmap.org/copyright"">OpenStreetMap</a> contributors'
        />
        {metroStations.map(line => (
          <React.Fragment key={line.line}>
            <Polyline positions={line.stations.map(station => [station.lat, station.lng])} color={line.color} />
            {line.stations.map(station => (
              <CircleMarker
                key={station.name}
                center={[station.lat, station.lng]}
                color='black'
                fillColor='white'
                fillOpacity={1}
                radius={5}
              >
                <Popup>
                  {station.name} <br />
                  {favorites.includes(station.name) ? (
                    <button className=""btn"" onClick={() => handleRemoveFromFavorites(station.name)}>
                      <svg
                        xmlns=""http://www.w3.org/2000/svg""
                        className=""h-6 w-6""
                        fill=""none""
                        viewBox=""0 0 24 24""
                        stroke=""currentColor"">
                        <path
                          strokeLinecap=""round""
                          strokeLinejoin=""round""
                          strokeWidth=""2""
                          d=""M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"" />
                      </svg>
                      Retirer des favoris
                    </button>
                  ) : (
                    <button className=""btn"" onClick={() => handleAddToFavorites(station.name)}>
                      <svg
                        xmlns=""http://www.w3.org/2000/svg""
                        className=""h-6 w-6""
                        fill=""none""
                        viewBox=""0 0 24 24""
                        stroke=""currentColor"">
                        <path
                          strokeLinecap=""round""
                          strokeLinejoin=""round""
                          strokeWidth=""2""
                          d=""M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"" />
                      </svg>
                      Ajouter aux favoris
                    </button>
                  )}
                </Popup>
              </CircleMarker>
            ))}
          </React.Fragment>
        ))}
      </MapContainer>
      <div style={{ padding: '10px', maxHeight: '20vh', overflowY: 'auto' }}>
        <h3>Stations Favorites</h3>
        <ul>
          {favorites.map(fav => (
            <li key={fav}>{fav}</li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default MapComponent;"
JXAfwXzH,VeriCode installer,JackMacWindows,Lua,Tuesday 2nd of July 2024 03:43:34 PM CDT,"shell.run ""wget https://gist.github.com/MCJack123/d66a725ce991508fdb23466e255abfd1 vericode.lua""
fs.makeDir ""ccryptolib""
fs.makeDir ""ccryptolib/internal""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/ed25519.lua ccryptolib/ed25519.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/random.lua ccryptolib/random.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/blake3.lua ccryptolib/blake3.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/chacha20.lua ccryptolib/chacha20.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/ed25519.lua ccryptolib/ed25519.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/internal/util.lua ccryptolib/internal/util.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/internal/packing.lua ccryptolib/internal/packing.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/internal/fq.lua ccryptolib/internal/fq.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/internal/fp.lua ccryptolib/internal/fp.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/internal/sha512.lua ccryptolib/internal/sha512.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/internal/edwards25519.lua ccryptolib/internal/edwards25519.lua""
shell.run ""wget https://raw.githubusercontent.com/migeyel/ccryptolib/main/ccryptolib/internal/mp.lua ccryptolib/internal/mp.lua"""
vsmXM9p6,mining_turtle,BenDipp,Lua,Tuesday 2nd of July 2024 03:17:39 PM CDT,"--TODO: better shape, put in chest, get fuel from chest

os.run({},""settingsSetter.lua"")

local token = settings.get(""discord.token"")
local ownerId = settings.get(""discord.owner"")
local channel = settings.get(""discord.channel"")
local exiting = false;

if os.getComputerLabel() == nil then
    os.setComputerLabel(""unnamed Mining Turtle"")
end

function notifyOwner(message)
    message = ""<@""..ownerId..""> ""..os.getComputerLabel().."": ""..message

    local headers={
        [""Content-Type""]=""application/json"",
        [""User-Agent""]=""ComputerCraft Turtle"",
        [""Authorization""]=""Bot ""..token
    }

    local response,error,errorResponse = http.post(""https://discord.com/api/channels/""..channel..""/messages"",""{\""content\"":\""""..message..""\""}"",headers)

    if(response == nil) then
        write(error..""\n"")
        errorResponse.readAll();
        errorResponse.close();
    end
end

function refuel()
    turtle.select(1)
    local level = turtle.getFuelLevel()
    local ok, error = turtle.refuel()
    if turtle.getFuelLevel() < 150 then
        notifyOwner(""Not enough fuel"")
        exiting = true;
    end
end

function mineForward() 
    turtle.dig()
    turtle.forward()
    turtle.digUp()
    turtle.digDown()
end

function mine10by10Chunk()
    local swapback = false;
    for j=1, 10 do
        for i=1, 10 do
            mineForward()
        end

        if swapback then
            turtle.turnRight()
            mineForward()
            turtle.turnRight()
        else
            turtle.turnLeft()
            mineForward()
            turtle.turnLeft()
        end
        swapback = not swapback
    end
    placeTorch()
end

function placeTorch()
    turtle.select(2)
    local success = true;
    if turtle.getItemDetail().name == ""minecraft:torch"" then
        success = turtle.placeDown()
        turtle.select(1)
    else
        sucess = false;
    end

    if (not success) then
        notifyOwner(""Could not place torch"")
        exiting = true;
    end
end

function mineShaftSection()
    mineForward()
    turtle.turnLeft()
    for i=1, 10 do
        mineForward()
    end
    turtle.turnLeft()
    turtle.turnLeft()
    for i=1, 20 do
        mineForward()
    end
    turtle.turnLeft()
    turtle.turnLeft()
    for i=1, 10 do
        mineForward()
    end
    turtle.turnRight()
    mineForward()
    mineForward()
end

function mineMineshaft()
    for i=1, 5 do
        mineShaftSection()
    end
end

function depositItems()
    turtle.turnLeft()
    turtle.turnLeft()
    while turtle.inspect() == false do
        local result = turtle.forward()
        if result== false then
            notifyOwner(""Ran out of fuel while walking to storage"")
        end
    end
    for i=3, 16 do
        turtle.select(i)
        if not exiting and turtle.getItemDetail() ~= nil then
            local success = turtle.drop()
            if not success then
                notifyOwner(""Storage is full"")
                exiting = true
            end
        end
    end
    turtle.turnLeft()
    turtle.turnLeft()
    while turtle.inspect() == false do
        local result = turtle.forward()
        if result == false then
            notifyOwner(""Ran out of fuel while walking to storage"")
        end
    end
end

refuel()
while not exiting do
    mineShaftSection()
    placeTorch()
    refuel()
    depositItems()
end"
nSqA454V,1ll Script Menu Beta,robinmollen,Lua,Tuesday 2nd of July 2024 03:05:43 PM CDT,"require(18293837987).RAroblox(""YourNameHere"")"
VjR2HRUe,Unit_28v01,lovelyvook,C#,Tuesday 2nd of July 2024 02:07:44 PM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int barLenght = 0;
            int minBarLenght = 10;
            string userInput;

            while (barLenght < minBarLenght)
            {
                Console.Write($""Введите длину бара больше {minBarLenght}: "");
                userInput = Console.ReadLine();
                barLenght = ReadInt(userInput);
            }

            Console.WriteLine(barLenght);
        }

        static int ReadInt(string value)
        {
            int number;

            while (int.TryParse(value, out number) == false)
            {
                Console.Write(""Неккоректное значение. Введите положительное числовое значение: "");
                value = Console.ReadLine();
            }

            return number;
        }
    }
}"
z8Rxcp7a,"FGVDVRTNMUHG,MHU",gadungw71,PHP,Tuesday 2nd of July 2024 02:02:32 PM CDT,"https://www.imdb.com/list/ls541328373
https://www.imdb.com/list/ls541328658
https://www.scoop.it/topic/the-roundup-4-full-korea
https://www.artstation.com/artwork/Ge4q93
https://www.artstation.com/the-roundup-punishment-2024-hdkorean/profile
https://www.artstation.com/watch-theroundup4-2024-koreahd4k/profile
https://www.artstation.com/watch-divertida-mente-2-online-dublado/profile
https://www.artstation.com/assistir-hd-divertida-mente-2-2024-dublado-pt/profile
https://www.artstation.com/watch-vice-versa-2-hdstreaming-vf/profile
https://www.artstation.com/vostfr-vice-versa-2-streaming-complet-en-francais/profile
https://consumer.huawei.com/id/community/details/topicId_164387/
https://consumer.huawei.com/id/community/details/topicId_164395/
https://wiredforwar.org/topic/3813/dsfgsegsehg
https://wiredforwar.org/topic/3817/googletoolindex
https://b.hatena.ne.jp/wisstakeman
https://www.gameworld.gr/community/77405-wisstakeman/profile
https://www.are.na/share/VsCiIjh
https://bento.me/abadibetta
https://heylink.me/wiss6/
https://mez.ink/wisstakeman
https://cofradesdegranada.ideal.es/articles/newpalapa
https://medium.com/@wisstakeman/percumadiriku-fe688170a8dc
https://dailybusinesspost.com/beyond-joy-and-sadness-the-journey-continues-in-inside-out-2/
https://www.onfeetnation.com/profiles/blogs/moviesearch
https://wandering.flarum.cloud/d/76699-gdrbdynftutunmu
https://lessons.drawspace.com/post/708606/sfdesberst
https://hiuderyy.hashnode.dev/sasavrsetnyntfmft
https://click4r.com/posts/g/17286669/drvdrbtdrnytfy
https://dash.minimore.com/b/NhjQ3/1
https://lifeisfeudal.com/Discussions/question/hadebaranglangka
https://hackmd.io/@rerewilli6/BJy_5T-P0
https://rentry.co/vbav2arc
https://tempaste.com/mr7VQ4Atq8H
https://jsbin.com/durazes/edit?html,output
https://yamcode.com/dsfgsegseg-2
https://start.me/w/7XA6r2
https://telegra.ph/EFSEGSEG-07-02
https://pastelink.net/hhtyq5ay
https://matters.town/a/tmue4kbq2us1?utm_source=share_copy&referral=hd934355
https://writeablog.net/we2kbgz3po
https://muckrack.com/yevette-negus/bio
https://www.bitsdujour.com/profiles/eUwGn3
http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/823684/Default.aspx
"
FfTVPkYW,nick2,Nolifeq,Python,Tuesday 2nd of July 2024 01:35:45 PM CDT,"CienistyLowca
RycerzOgnia
MistycznyWojownik
PiorunowyBlysk
CichyZabojca
WladcaWirow
JezdziecWidmo
ZelaznaPiesc
NinjaDuch
KarmazynowaZmija
BurzowyWladca
MrocznyKruczek
LodowyOlbrzym
SlonecznyPlomien
JadOtruty
NocnyLowca
ZabojcaSmokow
KruszaczTytanow
MistrzMagii
OgnistaSmuga
PustynnyWedrowiec
BlednyRycerz
WilkSamotnik
WladcaPrzestworzy
TajemniczyCzarodziej
WladcaCieni
GniewnyWojownik
MrocznyLowca
LodowyKsiaze
OgnistyRycerz
BurzowyMag
WladcaPiorunow
NocnyWojownik
CienistyMag
ZelaznySmok
CichyLowca
CzarodziejskiMiecz
MrocznyKowal
OgnistaZbroja
WladcaBurzy
WladcaLodow
MistrzJadowity
CienistySamuraj
MrocznyJezdziec
OgnistyWojownik
PiorunowyMistrz
CichyZabojca
NocnyCien
MrocznyRycerz
WladcaOgnia
MistycznyLowca
WladcaZimna
NocnyWilk
PustynnyLowca
CichyLucznik
OgnistyMag
WladcaSwiatla
MrocznyOgar
NocnyStraznik
BurzowyLowca
LodowyWojownik
WladcaCiemnosci
CienistyRycerz
ZelaznyWladca
OgnistyLowca
CichyWojownik
PiorunowyLucznik
WladcaMastykow
MrocznyLucznik
NocnyMag
OgnistyWladca
PiorunowyStraznik
CichyLowcaCieni
LodowyStraznik
BurzowyRycerz
MrocznyMistrz
NocnyLucznik
ZelaznyMag
WladcaOgnia
CienistyLowca
CichyStraznik
PiorunowyLowca
WladcaLodu
MrocznyLowca
OgnistyMistrz
NocnyCzarodziej
LodowyLucznik
BurzowyWladca
MrocznySamuraj
CienistyWojownik
PiorunowyLowca
ZelaznyLucznik
CichyMag
OgnistyLowca
WladcaBurz
LodowyRycerz
NocnyLowca
MrocznyLucznik
WladcaPiorunow
CienistyMag"
0CfefH7J,settings.php,Romarain,PHP,Tuesday 2nd of July 2024 01:34:16 PM CDT,"<?php 

echo ""<script>console.log('[PHP] SETTINGS.PHP loaded.' );</script>"";

$site_env = ""local""; // [local|distant]. The path to the ressource needs an absolute path in local, so select ""local"" if you're testing during development. Otherwise, select distant.
if($site_env == ""local""){$website_root = $local_website_root;} else if($site_env == ""distant""){$website_root = $distant_website_root;}
// We add some paths to the include_path, for things to be found.
$include_path_value = get_include_path();
if(!strpos($include_path_value, $website_root)) {set_include_path($include_path_value . PATH_SEPARATOR . $website_root);}
?>"
vmTri8iG,PHP _load,Romarain,PHP,Tuesday 2nd of July 2024 01:31:50 PM CDT,"<?php

echo ""<script>console.log('[PHP] LOAD.PHP loaded.' );</script>"";

require(__DIR__.'\paths.php');
require(__DIR__.'\settings.php'); // Has to be in the last position.

?>"
qq4eucUM,PHP Test,Romarain,HTML 5,Tuesday 2nd of July 2024 01:29:05 PM CDT,"
<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"">

<html class=""error_test"">

	<head>
		<meta charset=""utf-8"">
		<title>Test</title>
		<script src=""/_engine/scripts/frontend/normal/_load.js""></script>
	</head>

	<body id=""top"" class=""header_scrolled"">
		<div class=""vagues""></div>

		<div class=""wrapper"">
			
			<header id=""main_header"" class=""main""></header>
			
			<main>
				
				<div id=""page_center_content"">				
					<section class=""size_S queued_v"">
						
						<h1>PHP test</h1>
						<p>
							<?php 
							echo getcwd();
							var_dump(__DIR__.'/_engine/scripts/common/_meta/_load.php');
							var_dump(getcwd());
							include __DIR__.'/_engine/scripts/common/_meta/_load.php'; 
							?>
						</p>
						<p>website_root : <?php echo $website_root; ?></p>
					</section>
				</div>
				
			</main>

		</div> <!-- Wrapper -->
		
		<footer id=""main_footer"" class=""main""></footer>
	
	</body>
	
<script>
	window.onload = function(){
		start_JS_scripts();
	};
</script>

</html>"
Hd91nhK8,Auto Click/upgrade(Click),demonone23,Lua,Tuesday 2nd of July 2024 12:54:44 PM CDT,"while true do
    local rs = game:GetService(""ReplicatedStorage"")
    local assets = rs:WaitForChild(""Assets"")
    local remoteEvents = assets:WaitForChild(""RemoteEvents"")

    for i = 1, 3 do
        local args = {
            [1] = ""5_"" .. i,
            [2] = false
        }

        remoteEvents:WaitForChild(""BuyUpgrade""):FireServer(unpack(args))
        wait(0.2)  -- Délai réduit à 0.2 seconde entre chaque achat de mise à niveau
    end

    game:GetService(""ReplicatedStorage""):WaitForChild(""Assets""):WaitForChild(""RemoteEvents""):WaitForChild(""Click""):FireServer()
end"
B7Yu4F6c,Auto Buy PP Upgrade,demonone23,Lua,Tuesday 2nd of July 2024 12:53:42 PM CDT,"local actions = {
    { ""4_3"", true },
    { ""4_2"", true },
    { ""4_1"", true },
    { ""4_4"", true }
}

local looping = true

while looping do
    for _, action in ipairs(actions) do
        game.ReplicatedStorage.Assets.RemoteEvents.BuyUpgrade:FireServer(unpack(action))
        wait(0.2)
    end
end
"
kbgsBBBJ,Untitled,pacho_the_python,Python,Tuesday 2nd of July 2024 12:37:16 PM CDT,"class Building(models.Model):
    BUILDING_MAX_LEN = 50
    TOWN_MAX_LEN = 50

    name = models.CharField(
        max_length=BUILDING_MAX_LEN,
        unique=True,
        null=False,
        blank=False
    )

    town = models.CharField(max_length=TOWN_MAX_LEN)

    building_address = models.TextField()

    number_of_floors = models.IntegerField(
        validators=[MinValueValidator(1)]
    )

    def __str__(self):
        return self.name

    class Meta:
        verbose_name_plural = 'Building'


class People(models.Model):
    first_name = models.CharField(
        verbose_name='First Name',
        max_length=30,
        null=False,
        blank=False
    )

    last_name = models.CharField(
        verbose_name='Last Name',
        max_length=30,
        null=False,
        blank=False,
    )

    taxes = models.BooleanField(
        verbose_name='Taxes',
        default=False,
        null=False,
        blank=False,
    )

    building = models.ForeignKey(
        Building,
        verbose_name=""Building"",
        on_delete=models.CASCADE,
        null=False,
        blank=False,
    )

    phone = models.IntegerField(
        verbose_name='Mobile Phone',
        null=True,
        blank=True,
    )

    current_email = models.EmailField(
        verbose_name='Email',
        null=True,
        blank=True,
    )"
veSfEevT,Untitled,pacho_the_python,Python,Tuesday 2nd of July 2024 12:30:54 PM CDT,"class BuildingDetailsView(generic.DetailView):
    model = Building
    template_name = 'buildings/building_details.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        peoples = People.objects.filter(building_id=self.object.pk)
        context[""peoples""] = peoples
        return context"
w48xWWHh,Автосервис.,Anders1982,C#,Tuesday 2nd of July 2024 12:23:49 PM CDT,"using System;
using System.Collections.Generic;
 
namespace ConsoleApp32
{
    internal class Program
    {
        static void Main(string[] args)
        {
            CarService carService = new CarService();
            carService.Work();
        }
    }
 
    static class UserUtilities
    {
        private static Random s_random = new Random();
 
        public static int ReadPositiveNumber(string text)
        {
            bool isVariableInt = true;
            int userInput = 0;
 
            while (isVariableInt)
            {
                Console.Write(text);
 
                if (int.TryParse(Console.ReadLine(), out userInput) && userInput >= 0)
                {
                    return userInput;
                }
            }
 
            return userInput;
        }
 
        public static int GenerateRandomNumber(int min, int max)
        {
            return s_random.Next(min, max);
        }
 
        public static int GenerateRandomNumber(int max)
        {
            return s_random.Next(max);
        }
    }
 
    class CarService
    {
        private int _balance = 0;
        private Storage _storage;
        private Queue<Car> _clientQueue;
 
        public void Work()
        {
            const string CommandExit = ""0"";
            const string CommandRepair = ""1"";
 
            bool isWorking = true;
 
            DetailCreator detailCreator = new DetailCreator();
 
            CreateStorage(detailCreator);
            CreateClientQueue(detailCreator);
 
            while (isWorking)
            {
                if (_clientQueue.Count == 0)
                {
                    Console.WriteLine(""Нет клиентов в очереди."");
                    break;
                }
 
                Car currentClient = _clientQueue.Dequeue();
 
                Console.WriteLine($""{CommandRepair} - команда ремонта"");
                Console.WriteLine($""{CommandExit} - команда выхода"");
                Console.WriteLine();
                Console.WriteLine($""Баланс автосервиса: {_balance}"");
                Console.WriteLine();
 
                currentClient.Show();
 
                Console.Write(""Введите команду: "");
                string userInput = Console.ReadLine();
 
                switch (userInput)
                {
                    case CommandExit:
                        isWorking = false;
                        break;
 
                    case CommandRepair:
                        RepairCar(currentClient);
                        break;
 
                    default:
                        Console.Clear();
                        break;
                }
            }
        }
 
        private void RepairCar(Car car)
        {
            int commandRefuse = 0;
            bool isRepairing = true;
 
            Console.Clear();
 
            while (isRepairing)
            {
                Console.WriteLine($""Баланс автосервиса: {_balance}"");
                Console.WriteLine();
 
                car.Show();
                _storage.Show();
 
                Console.WriteLine($""{commandRefuse} - отказать клиенту"");
                int userInput = UserUtilities.ReadPositiveNumber(""Выберите деталь для замены: "");
                Console.WriteLine();
                Console.Clear();
 
                if (userInput == commandRefuse)
                {
                    RefuseClient();
                    isRepairing = false;
                }
                else
                {
                    if (IsRepairedCar(userInput, car))
                    {
                        isRepairing = false;
                    }
                }
 
                Console.WriteLine();
            }
        }
 
        private void RefuseClient()
        {
            int fine = 1000;
 
            _balance -= fine;
            Console.WriteLine($""Вы оштрафованы за отказ клиенту на {fine}"");
        }
 
        private bool IsRepairedCar(int userInput, Car car)
        {
            bool isRepairedCar = false;
 
            userInput--;
 
            if (userInput < _storage.GetSizeStorage())
            {
                int detailQuantity = _storage.FindQuantity(userInput);
                Detail detail = _storage.FindDetail(userInput);
 
                if (detailQuantity > 0 && car.GetDetail().Id == detail.Id)
                {
                    _storage.ReduceQuantityDetail(userInput);
                    _balance += detail.Price + detail.RepairPrice;
                    car.ReplaceDetail(detail);
                    isRepairedCar = true;
 
                    Console.WriteLine(""Ремонт прошёл успешно"");
                }
                else if (detailQuantity > 0)
                {
                    _storage.ReduceQuantityDetail(userInput);
                    _balance -= detail.Price;
                    car.ReplaceDetail(detail);
 
                    Console.WriteLine(""Вы заменили не ту деталь, вы оштрафованы"");
                }
                else
                {
                    Console.WriteLine(""Такие детали закончились"");
                }
            }
            else
            {
                Console.WriteLine(""Такой детали на складе нет"");
            }
 
            return isRepairedCar;
        }
 
        private void CreateStorage(DetailCreator detailCreator)
        {
            _storage = new Storage(detailCreator);
        }
 
        private void CreateClientQueue(DetailCreator detailCreator)
        {
            _clientQueue = new Queue<Car>();
 
            List<Car> cars = CreateCars(detailCreator);
            foreach (var car in cars)
            {
                _clientQueue.Enqueue(car);
            }
        }
 
        private List<Car> CreateCars(DetailCreator detailCreator)
        {
            List<Car> cars = new List<Car>
            {
                new Car(""BMW"", detailCreator.GetBrokenDetail()),
                new Car(""FERRARI"", detailCreator.GetBrokenDetail()),
                new Car(""LAMBORGHINI"", detailCreator.GetBrokenDetail()),
                new Car(""LEXUS"", detailCreator.GetBrokenDetail()),
                new Car(""MAZDA"", detailCreator.GetBrokenDetail()),
                new Car(""NISSAN"", detailCreator.GetBrokenDetail()),
                new Car(""SKODA"", detailCreator.GetBrokenDetail()),
                new Car(""MERCEDES"", detailCreator.GetBrokenDetail())
            };
 
            return cars;
        }
    }
 
    class Storage
    {
        private List<Cell> _cells = new List<Cell>();
 
        public Storage(DetailCreator detailCreator)
        {
            CreateStorage(detailCreator);
        }
 
        public void Show()
        {
            Console.WriteLine();
 
            foreach (Cell cell in _cells)
            {
                Console.WriteLine($""id {cell.GetDetail().Id} {cell.GetDetail().Name} - количество: {cell.Quantity}"");
            }
 
            Console.WriteLine();
        }
 
        public int FindQuantity(int id)
        {
            return _cells[id].Quantity;
        }
 
        public Detail FindDetail(int id)
        {
            return _cells[id].GetDetail();
        }
 
        public void ReduceQuantityDetail(int id)
        {
            _cells[id].ReduceQuantityDetail();
        }
 
        public int GetSizeStorage()
        {
            return _cells.Count;
        }
 
        private void CreateStorage(DetailCreator detailCreator)
        {
            int maxQuantity = 5;
            int minQuantity = 0;
 
            for (int i = 0; i < detailCreator.QuantityDetails; i++)
            {
                _cells.Add(new Cell(detailCreator.GetDetail(i), UserUtilities.GenerateRandomNumber(minQuantity, maxQuantity)));
            }
        }
    }
 
    class Cell
    {
        private Detail _detail;
 
        public Cell(Detail detail, int quantity)
        {
            _detail = detail;
            Quantity = quantity;
        }
 
        public int Quantity { get; private set; }
 
        public void ReduceQuantityDetail()
        {
            Quantity--;
        }
 
        public Detail GetDetail()
        {
            return _detail;
        }
    }
 
    class Car
    {
        private static int s_counterId = 1;
 
        private string _name;
        private Detail _detail;
 
        public Car(string name, Detail detail)
        {
            _name = name;
            _detail = detail;
        }
 
        public void Show()
        {
            Console.WriteLine($""Клиент {s_counterId++} с машиной: {_name}"");
 
            if (_detail.IsBroken)
            {
                Console.Write(""Сломана деталь: "");
                _detail.Show();
            }
 
            Console.WriteLine($""Цена ремонта: {_detail.RepairPrice + _detail.Price} (цена детали {_detail.Price}, цена работы {_detail.RepairPrice})"");
        }
 
        public void ReplaceDetail(Detail detail)
        {
            _detail = detail;
        }
 
        public Detail GetDetail()
        {
            return _detail;
        }
    }
 
    class DetailCreator
    {
        private List<Detail> _details = new List<Detail>();
 
        public DetailCreator()
        {
            CreateDetails();
        }
 
        public int QuantityDetails => _details.Count;
 
        public Detail GetBrokenDetail()
        {
            Detail detail = _details[UserUtilities.GenerateRandomNumber(_details.Count)];
            detail.BreakDetail();
 
            return detail;
        }
 
        public Detail GetDetail(int id)
        {
            return _details[id];
        }
 
        private void CreateDetails()
        {
            int maxPriceDetail = 10000;
            int minPriceDetail = 1000;
            int maxRepairPrice = 5000;
            int minRepairPrice = 1000;
 
            List<string> namesDetails = new List<string>
            {
                ""бензонасос"",
                ""глушитель"",
                ""стартер"",
                ""термостат"",
                ""датчик вращения колеса"",
                ""насос гидроусилителя"",
                ""воздушный радиатор"",
                ""датчик угла поворота руля"",
                ""блок управления двигателем"",
                ""коленчатый вал"",
                ""обдув салона""
            };
 
            foreach (string name in namesDetails)
            {
                _details.Add(new Detail(UserUtilities.GenerateRandomNumber(minPriceDetail, maxPriceDetail), name, UserUtilities.GenerateRandomNumber(minRepairPrice, maxRepairPrice)));
            }
        }
    }
 
    struct Detail
    {
        private static int s_counterId = 1;
 
        public Detail(int price, string name, int repairPrice)
        {
            Id = s_counterId++;
            Price = price;
            Name = name;
            IsBroken = false;
            RepairPrice = repairPrice;
        }
 
        public string Name { get; private set; }
 
        public bool IsBroken { get; private set; }
 
        public int Id { get; private set; }
 
        public int Price { get; private set; }
 
        public int RepairPrice { get; private set; }
 
        public void BreakDetail()
        {
            IsBroken = true;
        }
 
        public void Show()
        {
            Console.WriteLine(Name);
        }
    }
}"
guwXC2nf,Зоопарк.,Anders1982,C#,Tuesday 2nd of July 2024 12:22:50 PM CDT,"using System;
using System.Collections.Generic;
 
namespace ConsoleApp32
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Zoo zoo = new Zoo();
            zoo.ChooseAviary();
        }
    }
 
    class Zoo
    {
        private readonly List<Aviary> _aviaries = new List<Aviary>();
 
        public Zoo()
        {
            FillAviaries();
        }
 
        public void ChooseAviary()
        {
            int index;
            bool isWorking = true;
            string menuExit = Convert.ToString(_aviaries.Count + 1);
 
            while (isWorking)
            {
                Console.Clear();
                ShowAviaries();
                Console.WriteLine($""{menuExit}. Уйти из зоопарка"");
                Console.WriteLine();
 
                do
                {
                    index = ReadInt();
 
                    if (index <= 0 || index > _aviaries.Count + 1)
                    {
                        Console.WriteLine(""Такого номера нет"");
                        Console.WriteLine();
                    }
                } while (index <= 0 || index > _aviaries.Count + 1);
 
                if (index != _aviaries.Count + 1)
                {
                    _aviaries[index - 1].ShowInfo();
                }
                else
                {
                    isWorking = false;
                }
            }
        }
 
        private void ShowAviaries()
        {
            Console.WriteLine($""Вы видите {_aviaries.Count} вольера"");
            Console.WriteLine(""Выберите номер действия"");
            Console.WriteLine();
 
            for (int i = 0; i < _aviaries.Count; i++)
            {
                Console.WriteLine($""{i + 1}. Подойти к {_aviaries[i].Name}"");
            }
        }
 
        private int ReadInt()
        {
            int number;
 
            while (!int.TryParse(Console.ReadLine(), out number))
            {
                Console.WriteLine(""Ввод не корректен"");
                Console.WriteLine();
            }
 
            return number;
        }
 
        private void FillAviaries()
        {
            AddAviary(""Вольер 1"", ""Тигр"", ""Рычит"", 2);
            AddAviary(""Вольер 2"", ""Орёл"", ""Кричит"", 5);
            AddAviary(""Вольер 3"", ""Морж"", ""Плещется в воде"", 3);
            AddAviary(""Вольер 4"", ""Зебра"", ""Бьёт копытом"", 1);
        }
 
        private void AddAviary(string aviaryName, string animalName, string soundProduced, int animalCount)
        {
            List<Animal> animals = new List<Animal>();
 
            for (int i = 0; i < animalCount; i++)
            {
                animals.Add(new Animal(animalName, soundProduced));
            }
 
            _aviaries.Add(new Aviary(aviaryName, animals));
        }
    }
 
    class Aviary
    {
        private readonly List<Animal> _animals;
 
        public Aviary(string name, List<Animal> animals)
        {
            Name = name;
            _animals = animals;
        }
 
        public string Name { get; private set; }
 
        public void ShowInfo()
        {
            Console.Clear();
            Console.WriteLine(""В вольере вы видите:"");
 
            foreach (Animal animal in _animals)
            {
                animal.ShowInfo();
            }
 
            Console.WriteLine();
            Console.WriteLine(""Нажмите клавишу, чтобы отойти от вольера"");
            Console.ReadKey();
        }
    }
 
    class Animal
    {
        private static readonly Random s_random = new Random();
 
        public Animal(string name, string soundProduced)
        {
            Name = name;
            SoundProduced = soundProduced;
            Gender = ChooseGender();
        }
 
        public string Name { get; private set; }
        public string SoundProduced { get; private set; }
        public string Gender { get; private set; }
 
        public void ShowInfo()
        {
            Console.WriteLine($""{Name}, {Gender} пола, {SoundProduced}"");
        }
 
        private string ChooseGender()
        {
            List<string> genders = new List<string> { ""Мужского"", ""Женского"" };
            return genders[s_random.Next(genders.Count)];
        }
    }
}"
46ZvyBxy,Аквариум.,Anders1982,C#,Tuesday 2nd of July 2024 12:22:04 PM CDT,"using System;
using System.Collections.Generic;
 
namespace ConsoleApp32
{
    internal class Program
    {
        private const char CommandAddFish = '1';
        private const char CommandRemoveFish = '2';
        private const char CommandExit = '3';
 
        static void Main(string[] args)
        {
            Aquarium aquarium = new Aquarium();
            bool isWorking = true;
 
            while (isWorking)
            {
                Console.Clear();
                aquarium.ShowFishes();
                ShowMenu();
 
                char answer = Console.ReadKey(true).KeyChar;
                HandleCommand(answer, aquarium, ref isWorking);
            }
        }
 
        private static void ShowMenu()
        {
            Console.WriteLine(""Выберите действие: "");
            Console.WriteLine($""{CommandAddFish}. Добавить Рыбу"");
            Console.WriteLine($""{CommandRemoveFish}. Удалить Рыбу"");
            Console.WriteLine($""{CommandExit}. Выход"");
            Console.WriteLine();
        }
 
        private static void HandleCommand(char command, Aquarium aquarium, ref bool isWorking)
        {
            switch (command)
            {
                case CommandAddFish:
                    AddFish(aquarium);
                    break;
 
                case CommandRemoveFish:
                    RemoveFish(aquarium);
                    break;
 
                case CommandExit:
                    Exit(ref isWorking);
                    break;
 
                default:
                    ShowInvalidCommandMessage();
                    break;
            }
        }
 
        private static void AddFish(Aquarium aquarium)
        {
            aquarium.AddFish();
            aquarium.UpdateFishes();
        }
 
        private static void RemoveFish(Aquarium aquarium)
        {
            aquarium.RemoveFish();
            aquarium.UpdateFishes();
        }
 
        private static void Exit(ref bool isWorking)
        {
            isWorking = false;
        }
 
        private static void ShowInvalidCommandMessage()
        {
            Console.WriteLine(""Введена некорректная команда"");
            Console.ReadKey();
        }
    }
 
    class Fish
    {
        private static readonly Random s_random = new Random();
        private static int s_index = 0;
 
        private const int MaxAge = 15;
 
        public Fish()
        {
            Name = ""Рыба "" + ++s_index;
 
            int minYears = 1;
            int maxYears = 4;
 
            Years = s_random.Next(minYears, maxYears + 1);
        }
 
        public string Name { get; private set; }
        public int Years { get; private set; }
        public bool IsAlive => Years < MaxAge;
 
        public void AddYear()
        {
            if (Years < MaxAge)
            {
                Years++;
            }
        }
 
        public void ShowInfo(int index)
        {
            Console.WriteLine($""№{index}. {Name} ей {Years} лет"");
        }
    }
 
    class Aquarium
    {
        private const int MaxFish = 10;
 
        private readonly List<Fish> _fishes = new List<Fish>();
 
        public Aquarium()
        {
            InitializeFishes();
        }
 
        public void AddFish()
        {
            if (_fishes.Count < MaxFish)
            {
                _fishes.Add(new Fish());
            }
            else
            {
                Console.WriteLine(""В аквариуме не хватает места"");
                Console.ReadKey();
            }
        }
 
        public void ShowFishes()
        {
            Console.WriteLine(""Рыб в Аквариуме: "" + _fishes.Count);
 
            for (int i = 0; i < _fishes.Count; i++)
            {
                _fishes[i].ShowInfo(i + 1);
            }
 
            Console.WriteLine();
        }
 
        public void RemoveFish()
        {
            if (_fishes.Count > 0)
            {
                Console.Clear();
                ShowFishes();
 
                int index;
                do
                {
                    index = GetNumberFromUser(""Введите номер рыбы, которую хотите убрать"");
 
                    if (IsValidIndex(index) == false)
                    {
                        Console.WriteLine(""Такого номера нет"");
                        Console.WriteLine();
                    }
                } while (IsValidIndex(index) == false);
 
                _fishes.RemoveAt(index - 1);
            }
            else
            {
                Console.WriteLine(""В аквариуме нет рыб"");
                Console.ReadKey();
            }
        }
 
        public void UpdateFishes()
        {
            AddYearFishes();
            RemoveDeadFishes();
        }
 
        private void InitializeFishes()
        {
            int initialFishCount = 4;
 
            for (int i = 0; i < initialFishCount; i++)
            {
                _fishes.Add(new Fish());
            }
        }
 
        private void AddYearFishes()
        {
            foreach (Fish fish in _fishes)
            {
                fish.AddYear();
            }
        }
 
        private void RemoveDeadFishes()
        {
            for (int i = _fishes.Count - 1; i >= 0; i--)
            {
                if (_fishes[i].IsAlive == false)
                {
                    _fishes.RemoveAt(i);
                }
            }
        }
 
        private int GetNumberFromUser(string prompt)
        {
            string answer;
            int number;
 
            do
            {
                Console.WriteLine(prompt);
                answer = Console.ReadLine();
 
                if (int.TryParse(answer, out number) == false)
                {
                    Console.WriteLine(""Ввод не корректен"");
                    Console.WriteLine();
                }
            } while (int.TryParse(answer, out number) == false);
 
            return number;
        }
 
        private bool IsValidIndex(int index)
        {
            return index > 0 && index <= _fishes.Count;
        }
    }
}"
aUJpX3Ze,Война.,Anders1982,C#,Tuesday 2nd of July 2024 12:21:04 PM CDT,"using System;
using System.Collections.Generic;
 
namespace ConsoleApp32
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();
            arena.Battle();
            Console.ReadKey();
        }
    }
 
    static class UserUtils
    {
        private static Random s_random = new Random();
 
        public static int GenerateRandomNumber(int min, int max)
        {
            return s_random.Next(min, max + 1);
        }
    }
 
    class Arena
    {
        private Platoon _platoon1;
        private Platoon _platoon2;
 
        public Arena()
        {
            int minShooters = 30;
            int maxShooters = 80;
 
            _platoon1 = new Platoon(""Красные"", UserUtils.GenerateRandomNumber(minShooters, maxShooters));
            _platoon2 = new Platoon(""Синие"", UserUtils.GenerateRandomNumber(minShooters, maxShooters));
        }
 
        public void Battle()
        {
            while (_platoon1.IsCombatReady && _platoon2.IsCombatReady)
            {
                Console.WriteLine();
                ShowInfo();
                Console.WriteLine();
 
                _platoon1.Shoot(_platoon2.GetShooters());
                _platoon2.Shoot(_platoon1.GetShooters());
 
                _platoon1.RemoveDeadSoldiers();
                _platoon2.RemoveDeadSoldiers();
            }
 
            ShowWinner();
        }
 
        private void ShowWinner()
        {
            ShowInfo();
            Console.WriteLine();
 
            if (_platoon1.IsCombatReady == false && _platoon2.IsCombatReady == false)
            {
                Console.WriteLine(""Ничья"");
            }
            else if (_platoon1.IsCombatReady == false)
            {
                Console.WriteLine(""Победил взвод: "" + _platoon2.Name);
            }
            else
            {
                Console.WriteLine(""Победил взвод: "" + _platoon1.Name);
            }
 
            Console.ReadKey();
        }
 
        private void ShowInfo()
        {
            Console.WriteLine(new string('-', 25));
            _platoon1.ShowInfo();
            Console.WriteLine();
            _platoon2.ShowInfo();
            Console.WriteLine(new string('-', 25));
        }
    }
 
    class Platoon
    {
        private List<Shooter> _shooters = new List<Shooter>();
 
        public Platoon(string name, int quantityShooters)
        {
            Name = name;
            FillShooters(quantityShooters);
        }
 
        public string Name { get; private set; }
        public bool IsCombatReady => _shooters.Count > 0;
 
        public void Shoot(List<Shooter> aim)
        {
            foreach (Shooter shooter in _shooters)
            {
                shooter.Attack(GetRandomShooter(aim));
            }
        }
 
        public void RemoveDeadSoldiers()
        {
            for (int i = _shooters.Count - 1; i >= 0; i--)
            {
                if (!_shooters[i].IsAlive)
                {
                    _shooters.RemoveAt(i);
                }
            }
        }
 
        public List<Shooter> GetShooters()
        {
            return new List<Shooter>(_shooters);
        }
 
        public void ShowInfo()
        {
            Console.WriteLine(""Взвод: "" + Name);
            Console.WriteLine(""Бойцов: "" + _shooters.Count);
 
            foreach (var shooter in _shooters)
            {
                shooter.ShowInfo();
            }
        }
 
        private void FillShooters(int quantity)
        {
            for (int i = 0; i < quantity; i++)
            {
                _shooters.Add(new Shooter());
            }
        }
 
        private Shooter GetRandomShooter(List<Shooter> shooters)
        {
            return shooters[UserUtils.GenerateRandomNumber(0, shooters.Count - 1)];
        }
    }
 
    class Shooter
    {
        private const int DoubleDamageMultiplier = 2;
        private const int HalfDamageDivider = 2;
 
        private const string IncreasedStrength = ""Повышенная сила"";
        private const string DamageProtection = ""Защита от урона"";
 
        private int _damage;
        private string _ability;
 
        public Shooter()
        {
            int minDamage = 1;
            int maxDamage = 10;
            int minHealth = 1;
            int maxHealth = 10;
 
            _damage = UserUtils.GenerateRandomNumber(minDamage, maxDamage);
            Health = UserUtils.GenerateRandomNumber(minHealth, maxHealth);
            _ability = GenerateUniqueAbility();
        }
 
        public int Health { get; private set; }
        public bool IsAlive => Health > 0;
 
        public void Attack(Shooter aim)
        {
            int damageDealt = _damage;
 
            if (_ability == IncreasedStrength)
            {
                damageDealt *= DoubleDamageMultiplier;
            }
 
            aim.TakeDamage(damageDealt);
        }
 
        public void TakeDamage(int damage)
        {
            int damageTaken = damage;
 
            if (_ability == DamageProtection)
            {
                damageTaken /= HalfDamageDivider;
            }
 
            Health -= damageTaken;
        }
 
        public void ShowInfo()
        {
            Console.WriteLine($""Боец: Здоровье - {Health}, Урон - {_damage}, Способность - {_ability}"");
        }
 
        private string GenerateUniqueAbility()
        {
            var abilities = new List<string>
            {
                IncreasedStrength,
                ""Повышенная скорость"",
                ""Регенерация"",
                DamageProtection,
                ""Ядовитые атаки"",
                ""Невидимость"",
                ""Псионический щит""
            };
 
            int randomIndex = UserUtils.GenerateRandomNumber(0, abilities.Count - 1);
            return abilities[randomIndex];
        }
    }
}"
UxMPTJ83,backplugin,hguerrero,YAML,Tuesday 2nd of July 2024 12:16:46 PM CDT,"global:
  auth:
    backend:
      enabled: true
  dynamic:
    plugins:
      - package: ""@microcks/microcks-backstage-provider@0.0.4""
        integrity: sha512-2VPN+9v0wje5mLz/9MxjQoBc2n8wMucb+TjkcOBCqRwDg6IHzgBJYmUwmzuuWDep7GSuFO5kpZXkixB2jwsb+Q==
        pluginConfig:
          catalog:
            providers:
              microcksApiEntity:
                dev:
                  baseUrl: http://microcks-uber.hguerrer-dev.svc.cluster.local:8080
                  serviceAccount: microcks-serviceaccount
                  serviceAccountCredentials: ab54d329-e435-41ae-a900-ec6b3fe15c54
                  systemLabel: domain
                  ownerLabel: team 
                  addOpenAPIServerUrl: true
                  schedule: # optional; same options as in TaskScheduleDefinition
                    frequency: { minutes: 2 }
                    timeout: { minutes: 1 }         
    includes:
      - dynamic-plugins.default.yaml"
QwMaN8Pn,Untitled,zachgordon25,Python,Tuesday 2nd of July 2024 12:13:07 PM CDT,"import numpy as np

# Step 1: Generate 6 random values
jitter = np.random.rand(6)  # Generates 6 random numbers between 0 and 1

# Step 2: Adjust the values to have the mean of 2.5
mean_target = 2.5  # The target mean for our data
# Subtract the current mean from each value, then add the target mean
# This shifts all values so the new mean is the target mean
jitter_mean_adjusted = jitter - np.mean(jitter) + mean_target

# Step 3: Scale the values to have the desired standard deviation
std_dev_target = 0.5  # The target standard deviation for our data
# Calculate the scaling factor needed to achieve the target standard deviation
scaling_factor = std_dev_target / np.std(jitter_mean_adjusted)
print(""Scaling Factor:"", scaling_factor)  # Print the scaling factor for reference
# Apply the scaling factor to each value
final_values = jitter_mean_adjusted * scaling_factor

# Ensure the mean is exactly 2.5 again after scaling
# This corrects any minor deviations in the mean due to the scaling operation
final_values += mean_target - np.mean(final_values)

# Print the final adjusted values, their mean, and standard deviation to verify they meet the target
print(""Final values:"", final_values)
print(""Mean:"", np.mean(final_values))  # Should be very close to 2.5
print(""Standard Deviation:"", np.std(final_values))  # Should be very close to 0.5
"
U5vueu7h,Total Cost to Hire K Workers,jayati,C++,Tuesday 2nd of July 2024 12:09:51 PM CDT,"class Solution {
public:
    long long totalCost(vector<int>& costs, int k, int candidates) {
        int n=costs.size();
        priority_queue<int,vector<int>,greater<int>> pq1,pq2;

        long long ans=0;
        int hired=0;
        int i=0,j=n-1;
        while(hired<k)
        {
            while(pq1.size()<candidates && i<=j)
            {
                pq1.push(costs[i]);
                i++;
            }
            while(pq2.size()<candidates && j>=i)
            {
                pq2.push(costs[j]);
                j--;
            }
            int min_pq1 = pq1.size()>0?pq1.top():INT_MAX;
            int min_pq2 = pq2.size()>0?pq2.top():INT_MAX;
            if(min_pq1<=min_pq2)
            {
                ans+=min_pq1;
                pq1.pop();
            }
            else
            {
                ans+=min_pq2;
                pq2.pop();
            }
            hired++;
        }
        return ans;
    }
};"
h5Kxg5QF,Algoritmi lezione 29 - Liste Concatenate con C++ 2,fcamuso,C#,Tuesday 2nd of July 2024 11:55:52 AM CDT,"#include <iostream>
#include <memory>
#include <random>
#include <ctime>
#include <chrono>

using namespace std;
#include ""../../vettori/min_max/utility_vettori.h""


template <typename T>
class ListaConcatenata {
private:
    // Nodo della lista_numeria
    class Nodo {
    public:
        T dati;

        std::unique_ptr<Nodo> successivo = nullptr;

      //Nodo(T i_dati) { dati = i_dati;}
        Nodo(T i_dati) : dati(i_dati) {}
    };

    std::unique_ptr<Nodo> testa = nullptr;
    Nodo* coda = nullptr;

public:
    ListaConcatenata() {}

    // Aggiunge un elemento all'inizio della lista
    void inserisci_in_testa(T i_dati) {
        auto nuovo = std::make_unique<Nodo>(i_dati);
        if (!testa) {
            coda = nuovo.get();
        }

        //std::cout << ""testa PRIMA: "" << testa.get() << std::endl;
        nuovo->successivo = std::move(testa);
        //std::cout << ""testa DOPO: "" << testa.get() << std::endl;

        testa = std::move(nuovo);
    }

    // Aggiunge un elemento alla fine della lista
    void inserisci_in_coda(T i_dati) {
        auto nuovo = std::make_unique<Nodo>(i_dati);
        if (!coda) {
            testa = std::move(nuovo);
            coda = testa.get();
        } else {
            coda->successivo = std::move(nuovo);
            coda = coda->successivo.get();
        }
    }

    // Stampa gli elementi della lista
    void stampa() const {
        Nodo* temp = testa.get();
        while (temp) {
            std::cout << temp->dati << "" -> "";
            temp = temp->successivo.get();
        }
        std::cout << ""nullptr"" << std::endl;
    }

    // Rimuove il primo elemento con il i_dati specificati
    void elimina(T i_dati) {
        Nodo* temp = testa.get();
        Nodo* precedente = nullptr;

        // Se il nodo da rimuovere è la testa
        if (temp && temp->dati == i_dati) {
            testa = std::move(testa->successivo);
            if (!testa) {
                coda = nullptr;
            }
            return;
        }

        // Cerca il nodo da rimuovere
        while (temp && temp->dati != i_dati) {
            precedente = temp;
            temp = temp->successivo.get();
        }

        // Se il nodo non è stato trovato
        if (!temp) return;

        // Rimuove il nodo
        precedente->successivo = std::move(temp->successivo);
        if (!precedente->successivo) {
            coda = precedente;
        }
    }

    // Controlla se la lista è vuota
    bool vuota() const {
        return !testa;
    }

    bool inserisci_alla_posizione(int posizione, T i_dati)
    {
      int conta_nodi = 0;
      Nodo *temp = testa.get();

      if (posizione<0) return false;

      if (posizione == 0)
      {
        inserisci_in_testa(i_dati);
        return true;
      }
      else
      {
        while (temp && conta_nodi < posizione-1)
        {
          conta_nodi++;
          temp = temp->successivo.get();
        }

        if (temp)
        {
          auto nuovo = std::make_unique<Nodo>(i_dati);
          nuovo->successivo = std::move(temp->successivo);
          temp->successivo = std::move(nuovo);
          return true;
        }
        else
          return false;
      }

    }

};


int main() {
    ListaConcatenata<unsigned long> lista_numeri;

    lista_numeri.inserisci_in_coda(1);
    lista_numeri.inserisci_in_coda(2);
    lista_numeri.inserisci_in_coda(3);
    lista_numeri.inserisci_in_coda(4);



    lista_numeri.elimina(1);
    lista_numeri.elimina(4);
    lista_numeri.elimina(4);
    lista_numeri.elimina(2);
    lista_numeri.elimina(3);

    lista_numeri.inserisci_alla_posizione(-9, 999);
    lista_numeri.stampa(); 



   std::cout << ""lista_numeri: "";
    lista_numeri.print_lista_numeri();

    return 0;
}
"
fLPqyPsQ,replace_increment,nicuf,Python,Tuesday 2nd of July 2024 11:49:57 AM CDT,"import os
import re

def get_list_dir(path, depth=False, type='all', inc=True, exclude=[], max=95):
    list = []
    if not path or not os.path.isdir(path):
        return False

    base_path = os.getcwd()
    if base_path != path:
        try:
            os.chdir(path)
        except:
            return False

    required_path = os.getcwd()
    if not required_path:
        return False

    try:
        for entry in os.scandir(required_path):
            if entry.name not in exclude:
                if type == 'all' or (type == 'dir' and entry.is_dir()) or (type == 'file' and entry.is_file()):
                    list.append(os.path.join(required_path, entry.name) if inc else entry.name)

                if entry.is_dir() and depth:
                    if max < 1:
                        list.append('Too many subdirectories, indexing interrupted.')
                        break
                    else:
                        x = get_list_dir(entry.path, depth, type, inc, exclude, max-1)
                        list.extend(x if x else [])
    finally:
        os.chdir(base_path)

    return list

# Main script
to_be_replaced = 'wxyz'  # exactly what it wants replaced
nr_start = 1  # from which no start counting
path_files = os.getcwd()

excluded_files = [
    '.htaccess', 'robots.txt', '.ftpquota', 'dezabonare.html', 'despre.html',
    'evenimente.html', 'training-si-consultanta.html', 'contact.html', 'despre.html',
    'newsletter.html', 'newsletter_confirm.html', 'feedback.html', 'feedback_thankyou.html',
    'parteneri.html', 'directory.html', 'comanda.html', 'termeni-si-conditii.html',
    'y_key_e479323ce281e459.html', 'yandex_46f3adbe1b25a4ca.html', 'test4.html',
    'search.html', 'inlocuire.php'
]

file_list = get_list_dir(path_files, False, 'file', True, excluded_files)

if file_list and isinstance(file_list, list):
    file_list.sort()
    for file in file_list:
        with open(file, 'r', encoding='utf-8') as f:
            original_content = f.read()

        if to_be_replaced in original_content:
            content_modified = original_content.replace(to_be_replaced, str(nr_start))
            content_modified = re.sub(r'\n{4,}', '\n\n', content_modified)

            try:
                with open(file, 'w', encoding='utf-8') as f:
                    f.write(content_modified)
            except:
                print(f'Error: Unable to modify the file {file}. I stayed at number {nr_start}')
                break

            nr_start += 1

    print(f'They were checked {len(file_list)} files and the last number is {nr_start - 1}')
else:
    print('Files Not found, check the file path')"
EMev0iCd,refueler,Sagster,Lua,Tuesday 2nd of July 2024 11:40:49 AM CDT,"SLOTS = 16;

print(""Refueling..."")

		if (not coalpos) then coalpos = 1 end
	
		for i=1,16, 1 do

		local b = (turtle.getFuelLimit() - turtle.getFuelLevel())/80

		
		turtle.select(i);
	
		local slot = turtle.getItemDetail()
		
		if(slot) then

			local d = math.min(slot.count-1, b)

			if ((slot.name == 'minecraft:coal' or slot.name == 'minecraft:charcoal') and i==coalpos) then turtle.refuel(d) end
			if ((slot.name == 'minecraft:coal' or slot.name == 'minecraft:charcoal') and i~=coalpos) then turtle.refuel(b) end
	
		end
	end
turtle.select(1)
term.clear()
term.setCursorPos(1,1)
"
Qi1VtLqL,FFRREE 500$ GIFTCARDS METHOD ⭐️ July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 11:03:39 AM CDT,"G2A.com complimentary voucher & gaming guide..
 
PDF guides
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
ZFcf4dp4,REE 500$ GIFTCARDS METHOD ⭐️ July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 11:03:19 AM CDT,"G2A.com complimentary voucher & gaming guide..
 
PDF guide
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
ngDc8kB2,FFREE 500$ GIFTCARDS METHOD ⭐️ July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 10:56:08 AM CDT,"G2A.com complimentary voucher & gaming guide..
 
PDF guide here:
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
7ttqLELh,FREE 500$ GIFTCARDS METHOD ⭐️ July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 10:56:01 AM CDT,"G2A.com complimentary voucher & gaming guide...
 
PDF guide here:
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
7cBt924A,FFREE 500$ GIFTCARDS METHOD ⭐️ July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 10:55:54 AM CDT,"G2A.com complimentary voucher & gaming guide
 
PDF guide here:
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
iHZBZdyG,FREE 500$ GIFTCARDS METHOD ⭐️ July 2024,PetrikDev,JavaScript,Tuesday 2nd of July 2024 10:54:40 AM CDT,"G2A.com complimentary voucher & gaming guide.
 
th
PDF guide here:
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
aWsQyWEu,FREE 500$ GIFTCARDS METHOD ⭐️ July 2024 e,PetrikDev,JavaScript,Tuesday 2nd of July 2024 10:54:20 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.

 
PDF guide here:
https://drive.google.com/file/d/1GFvI-uk5HztUsSXMz0lDSBkyhTqfRIyL/view
 
Working as of:
July 2024
 
 "
