id,title,username,language,date,content
KBBT6gci,referer recursive 4.x,kamiram,PL/SQL,Sunday 10th of December 2023 12:01:41 PM CDT,"drop function if exists get_referers(param_user_id bigint, param_user_bm_id smallint) cascade;
create function get_referers(param_user_id bigint, param_user_bm_id smallint) 
returns table  (
        referer_id bigint,
        referer_level integer
)  
as $end$
	declare
		origin_referer_id bigint;
		origin_level integer;
	begin
        SELECT user_bms.user_id, COUNT(*) % 5 + 1 
        FROM users, user_bms 
        WHERE 
            users.user_id=param_user_bm_id
        AND 
            user_bms.user_id=users.referer_id
        AND 
            user_bms.bm_id=param_user_bm_id
        GROUP BY user_bms.user_id
        INTO origin_referer_id, origin_level;

--        SELECT users.referer_id 
--        FROM users 
--        WHERE users.user_id = param_user_id 
--        INTO origin_referer_id;
-- 
--        SELECT COUNT(*) % 5 + 1 
--        FROM user_bms 
--        WHERE 
--            user_bms.user_id=origin_referer_id
--        AND 
--            user_bms.bm_id=param_user_bm_id
--        INTO origin_level;
--    
		return query with recursive tree as (
			select origin_referer_id as referer_id, origin_level as referer_level  
			
			union
			
			select 
				users.referer_id as referer_id, 
				tree.referer_level::integer - case when user_bms.user_id is null then 0 else 1 end as referer_level
		    from users
		    left join user_bms  
		    	on user_bms.user_id = users.user_id and user_bms.bm_id = param_user_bm_id
		    join tree
		        on tree.referer_id = users.user_id  and users.user_id != users.referer_id
		    where 
		    	tree.referer_level - case when user_bms.user_id is null then 0 else 1 end >= 0
			)
			select tree.referer_id, origin_level from tree order by tree.referer_level limit 1;
    end;
$end$ 
language plpgsql;


select * from get_referers(1122::bigint, 1::smallint);
"
jA2YPGhy,referer recursive 4,kamiram,PL/SQL,Sunday 10th of December 2023 12:00:30 PM CDT,"drop function if exists get_referers(param_user_id bigint, param_user_bm_id smallint) cascade;
create function get_referers(param_user_id bigint, param_user_bm_id smallint) 
returns table  (
        referer_id bigint,
        referer_level integer
)  
as $end$
	declare
		origin_referer_id bigint;
		origin_level integer;
	begin
--        SELECT user_bms.bm_user_id, COUNT(*) % 5 + 1 
--        FROM users, user_bms 
--        WHERE 
--            users.user_id=param_user_bm_id
--        AND 
--            user_bms.user_id=users.referer_id
--        AND 
--            user_bms.bm_id=param_user_bm_id
--        GROUP BY user_bms.bm_user_id
--        INTO origin_referer_id, origin_level;
--    

        SELECT users.referer_id 
        FROM users 
        WHERE users.user_id = param_user_id 
        INTO origin_referer_id;
 
        SELECT COUNT(*) % 5 + 1 
        FROM user_bms 
        WHERE 
            user_bms.user_id=origin_referer_id
        AND 
            user_bms.bm_id=param_user_bm_id
        INTO origin_level;
    
		return query with recursive tree as (
			select origin_referer_id as referer_id, origin_level as referer_level  
			
			union
			
			select 
				users.referer_id as referer_id, 
				tree.referer_level::integer - case when user_bms.user_id is null then 0 else 1 end as referer_level
		    from users
		    left join user_bms  
		    	on user_bms.user_id = users.user_id and user_bms.bm_id = param_user_bm_id
		    join tree
		        on tree.referer_id = users.user_id  and users.user_id != users.referer_id
		    where 
		    	tree.referer_level - case when user_bms.user_id is null then 0 else 1 end >= 0
			)
			select tree.referer_id, origin_level from tree order by tree.referer_level limit 1;
    end;
$end$ 
language plpgsql;


select * from get_referers(1122::bigint, 1::smallint);
"
Z2AF5pm1,idc_Enter,tolikpunkoff,C#,Sunday 10th of December 2023 12:00:19 PM CDT,"private void idc_Enter(object sender, EventArgs e)
{
    InputDigitControl idc = (InputDigitControl)sender;
    string fldID = idc.Name.Substring(3, 1);

    switch (fldID)
    {
        case ""C"":
            {
                enC = true;
                enK = false;
                enF = false;
            }; break;
        case ""K"":
            {
                enC = false;
                enK = true;
                enF = false;
            }; break;
        case ""F"":
            {
                enC = false;
                enK = false;
                enF = true;
            }; break;
    }
}"
rT8zYPWB,idc_Changed,tolikpunkoff,C#,Sunday 10th of December 2023 11:57:02 AM CDT,"        private void idc_Changed(object sender, EventArgs e)
        {
            InputDigitControl idc = (InputDigitControl)sender;
            string fldID = idc.Name.Substring(3, 1);

            double V = TemperatureConvert.ToDouble(idc.Text);
            
            switch (fldID)
            {
                case ""C"":
                    {
                        if (!enC) return;
                        if (V < -273.15)
                        {
                            lblError.Text = ""Такой температуры не бывает!"";
                            return;
                        }

                        idcK.Text = TemperatureConvert.C2K(V).ToString();
                        idcF.Text = TemperatureConvert.C2F(V).ToString();
                        lblError.Text = """";
                    }; break;
                case ""K"":
                    {
                        if (!enK) return;
                        idcC.Text = TemperatureConvert.K2C(V).ToString();
                        idcF.Text = TemperatureConvert.K2F(V).ToString();
                    }; break;
                case ""F"":
                    {
                        if (!enF) return;
                        if (V < -459.67)
                        {
                            lblError.Text = ""Такой температуры не бывает!"";
                            return;
                        }

                        idcC.Text = TemperatureConvert.F2C(V).ToString();
                        idcK.Text = TemperatureConvert.F2K(V).ToString();
                        lblError.Text = """";
                    }; break;
            }
        }
"
4EvnUBCD,6,maxim_shlyahtin,Python,Sunday 10th of December 2023 11:56:40 AM CDT,"class Member:
    def __init__(self, name, age, cats, cat_names):
        self.name = name
        self.age = age
        self.cats = cats
        self.cat_names = cat_names


hash_table = [None for _ in range(20)]


def hash_function(member, i):
    cat_names_length = sum(len(name) for name in member.cat_names)
    return (member.age * member.cats + cat_names_length + i) % 20


def insert(hash_table, member, hash_function):
    i = 0
    while True:
        index = hash_function(member, i)
        if hash_table[index] is None:
            hash_table[index] = member
            return index
        else:
            i += 1


n = int(input())
for _ in range(n):
    data = input().split()
    name = data[0]
    age = int(data[1])
    cats = int(data[2])
    cat_names = data[3:]
    member = Member(name, age, cats, cat_names)
    insert(hash_table, member, hash_function)

for i, member in enumerate(hash_table):
    if member is not None:
        print(f""{i} {member.name} {member.age}"")
"
U5Lc6NAh,planter,Eroubis,Lua,Sunday 10th of December 2023 11:53:08 AM CDT,"while true do
    local success, data = turtle.inspect()

    if success then
        if data.state.age == 7 then  -- For most crops, fully grown is represented by age 7
            turtle.dig()
        end
    end

    sleep(2)
end"
xBQd5rr1,referer recursive 3.x,kamiram,PL/SQL,Sunday 10th of December 2023 11:51:42 AM CDT,"drop function if exists get_referers(param_user_id bigint, param_user_bm_id smallint) cascade;
create function get_referers(param_user_id bigint, param_user_bm_id smallint) 
returns table  (
        referer_id bigint,
        referer_level integer
)  
as $end$
	declare
		origin_referer_id bigint;
		origin_level integer;
	begin
		select users.referer_id 
		from users 
		where users.user_id = param_user_id 
		into origin_referer_id;

		select count(*) % 5 + 1 
		from user_bms 
		where 
			user_bms.user_id=origin_referer_id
		and 
			user_bms.bm_id=param_user_bm_id
		into origin_level;
	    
		return query with recursive tree as (
			select origin_referer_id as referer_id, origin_level as referer_level  
			
			union
			
			select 
				users.referer_id as referer_id, 
				tree.referer_level::integer - case when user_bms is null then 0 else 1 end as referer_level
		    from users
		    left join user_bms  
		    	on user_bms.user_id = users.user_id and user_bms.bm_id = param_user_bm_id
		    join tree
		        on tree.referer_id = users.user_id  and users.user_id != users.referer_id
		    where 
		    	tree.referer_level - case when user_bms is null then 0 else 1 end >= 0
			)
			select tree.referer_id, origin_level from tree order by tree.referer_level limit 1;
    end;
$end$ 
language plpgsql;


select * from get_referers(1122::bigint, 1::smallint);
"
0U91TnAb,Untitled,arch239,JSON,Sunday 10th of December 2023 11:51:24 AM CDT,"[{'Answer': 'Old Spice Girls.',
  'Authors': 'Виталий Захарик (Минск)',
  'Comments': 'Белый парус - известный логотип продукции для мужчин ""Old Spice"".\n'
              'Изображенные личности - это участницы некогда популярного коллектива\n'
              '""Spice Girls"", изображенные в старости.',
  'CommentsImages': ['https://db.chgk.info/images/db/20110686.jpg'],
  'Complexity': None,
  'Notices': None,
  'Number': '4',
  'ParentId': '46753',
  'ParentTextId': 'lugan11.3',
  'PassCriteria': None,
  'ProcessedBySearch': None,
  'Question': 'Перед вами карикатура Егора Жгуна. Какие три англоязычных слова мы\nскрыли от вас?',
  'QuestionId': '782222',
  'QuestionImages': ['https://db.chgk.info/images/db/20110685.jpg'],
  'Rating': None,
  'RatingNumber': None,
  'Sources': 'http://www.advertka.ru/media/adfake/11199/',
  'TextId': 'lugan11.3-4',
  'Topic': None,
  'Type': 'Ч',
  'TypeNum': '1',
  'parent_text_id': 'lugan11.3',
  'tourFileName': 'lugan11.3',
  'tourId': '46753',
  'tourPlayedAt': '2011-06-04',
  'tourPlayedAt2': '2011-06-04',
  'tourTitle': '3 тур',
  'tourType': 'Т',
  'tournamentFileName': 'lugan11.txt',
  'tournamentId': '1846',
  'tournamentPlayedAt': '2011-06-04',
  'tournamentPlayedAt2': '2011-06-04',
  'tournamentTitle': '""Майский жук - 2011"" (Луганск)',
  'tournamentType': 'Ч'},
 {'Answer': 'LOLympics.',
  'Authors': 'Владислав Карнацевич (Харьков)',
  'Comments': 'Это подборка смешных фотографий с Олимпиады в Лондоне. LOL - популярный\n'
              'мем, означающий ""громко смеяться"".',
  'Complexity': None,
  'Notices': None,
  'Number': '14',
  'ParentId': '60504',
  'ParentTextId': 'perekr16.6',
  'PassCriteria': 'LOLympic; другие слова, содержащие части ""LOL"" и ""Olymp"".',
  'ProcessedBySearch': None,
  'Question': 'Внимание, в вопросе есть замена.\n'
              '   Эта фотография была сделана несколько лет назад в Англии. В одной из\n'
              'подборок она была обозначена как ""MEMotion Picture"". Какой неологизм мы\n'
              'заменили на ""MEMotion""?',
  'QuestionId': '1028000',
  'QuestionImages': ['https://db.chgk.info/images/db/20160738.jpg'],
  'Rating': None,
  'RatingNumber': None,
  'Sources': 'http://knowyourmeme.com/memes/events/2012-summer-olympics',
  'TextId': 'perekr16.6-14',
  'Topic': None,
  'Type': 'Ч',
  'TypeNum': '1',
  'parent_text_id': 'perekr16.6',
  'tourFileName': 'perekr16.6',
  'tourId': '60504',
  'tourPlayedAt': '2016-11-19',
  'tourPlayedAt2': '2016-11-19',
  'tourTitle': '6 тур',
  'tourType': 'Т',
  'tournamentFileName': 'perekr16.txt',
  'tournamentId': '29597',
  'tournamentPlayedAt': '2016-11-19',
  'tournamentPlayedAt2': '2016-11-19',
  'tournamentTitle': '""Перекресток - 2016"" (Харьков)',
  'tournamentType': 'Ч'}]"
hgjpfmgN,Untitled,arch239,Python,Sunday 10th of December 2023 11:50:17 AM CDT,"from pprint import PrettyPrinter
from urllib.parse import quote

import re
import requests
import xmltodict

def search_questions(query='', limit=1):
    query = quote(query)
    url = 'https://db.chgk.info/xml/search/questions/{}/limit{}'.format(query, limit)
    response = xmltodict.parse(requests.get(url).text)

    entities = response['search']['question']
    if not isinstance(entities, list):
        entities = [entities]

    for entity in entities:
        for field in ['Comments', 'Question']:
            question = entity[field]
            images = []

            regex = r'\(pic: [a-zA-Z0-9_\.]+\)'
            matches = re.findall(regex, question)
            if not matches:
                continue

            for match in matches:
                regex = r'\(pic: ([a-zA-Z0-9_\.]+)\)'
                image_base_url = 'https://db.chgk.info/images/db/'
                image_id = re.match(regex, match)[1]
                images.append(image_base_url + image_id)

            entity[field + 'Images'] = images
            entity[field] = re.sub(regex, '', question).strip()
    
    return entities

entities = search_questions('pic', 2)
PrettyPrinter(width=100).pprint(entities)"
VEa51bRw,BTC Wallet Credentials have been reset,castlclass_20,GetText,Sunday 10th of December 2023 11:37:20 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
Playcledypec8:XsRPjR on 212.224.93.130
You can connect via SSH.
Regards"
2jcfVhVP,referer recursive 3,kamiram,PL/SQL,Sunday 10th of December 2023 11:36:04 AM CDT,"drop function if exists get_referers(param_user_id bigint, param_user_bm_id smallint) cascade;
create function get_referers(param_user_id bigint, param_user_bm_id smallint) 
returns table  (
        referer_id bigint,
        referer_level integer
)  
as $end$
	declare
		origin_referer_id bigint;
		origin_level integer;
	begin
		select users.referer_id, count(*) % 5 + 1 
		from users, user_bms 
		where 
			users.user_id=param_user_bm_id
		and 
			user_bms.user_id=users.referer_id
		and 
			user_bms.bm_id=param_user_bm_id
        group by users.referer_id
		into origin_referer_id, origin_level;
	    
		return query with recursive tree as (
			select origin_referer_id as referer_id, origin_level as referer_level  
			
			union
			
			select 
				users.referer_id as referer_id, 
				tree.referer_level::integer - case when user_bms is null then 0 else 1 end as referer_level
		    from users
		    left join user_bms  
		    	on user_bms.user_id = users.user_id and user_bms.bm_id = param_user_bm_id
		    join tree
		        on tree.referer_id = users.user_id  and users.user_id != users.referer_id
		    where 
		    	tree.referer_level - case when user_bms is null then 0 else 1 end >= 0
			)
			select tree.referer_id, origin_level from tree order by tree.referer_level limit 1;
    end;
$end$ 
language plpgsql;


select * from get_referers(1122::bigint, 1::smallint);
"
7TSeiVtZ,teza11-sub3-1,madidino,C++,Sunday 10th of December 2023 11:09:48 AM CDT,"#include <iostream>

using namespace std;

int main()
{
    int n;
    cin>>n;
    int a[51][51];
    int l[51];
    for(int i=0; i<n; i++)
    {
        l[i]=0;
    }
    int k;
    for(int i=0; i<n; i++)
    {
        k=0;
        for(int j=0; j<n; j++)
        {
            cin>>a[i][j];
            if(a[i][j]==1)
            {
                k=1;
            }
        }
        if(!k)
        {
            l[i]=1;
        }
    }
    int s;
    for(int i=0; i<n; i++)
    {
        if(l[i]==1)
        {
            for(int d=0; d<n; d++)
            {
                s=0;
                for(int j=0; j<n; j++)
                {
                    if(a[j][d]==1)
                        s+=a[j][d];
                }
                cout<<s<<"" "";
            }
        }
        else
        {
            for(int j=0; j<n; j++)
            {
                cout<<a[i][j]<<"" "";
            }
        }
        cout<<endl;
    }

    return 0;
}
//5
//1 0 0 1 1
//1 1 1 0 1
//0 0 0 0 0
//1 1 0 1 1
//0 0 0 0 0
"
6U0Zg9cz,Untitled,IvanNenov,JavaScript,Sunday 10th of December 2023 11:08:49 AM CDT,"function shopping (input){
    let budget = Number(input[0]);
    let GPUCount = Number(input[1]);
    let CPUCount = Number(input[2]);
    let RAMCount = Number(input[3]);

    let GPUPrice = GPUCount * 250;
    let CPUPrice = (GPUPrice * 0.35) * GPUCount ;
    let RAMprice = (GPUPrice * 0.10) * RAMCount;

    let totalPrice = GPUPrice + CPUPrice + RAMprice;
    
    if(GPUCount > CPUCount){
        GPUPrice *= 0.85;
    }
    
     if(totalPrice < budget){
        let moneyLeft = budget - totalPrice;
        console.log(`You have ${moneyLeft.toFixed(2)} leva left!`);
    }
    if (budget < totalPrice){
        let moneyNeeded = totalPrice - budget;
        console.log(`""Not enough money! You need ${moneyNeeded.toFixed(2)} leva more!`)
    }
   

}
shopping([""900"",""2"",""1"",""3""]);"
ZCFT7ZWa,referer recursive 2,kamiram,PL/SQL,Sunday 10th of December 2023 11:08:18 AM CDT,"drop function if exists get_referers(param_user_id bigint, param_user_bm_id smallint) cascade;
create function get_referers(param_user_id bigint, param_user_bm_id smallint) 
returns table  (
        referer_id bigint,
        referer_level integer
)  
as $end$
    begin
		return query with recursive tree as (
			select 
				users.referer_id as referer_id, 
				(
					select count(*) % 5 + 1 
					from user_bms 
					where 
						user_bms.user_id=users.referer_id 
					and 
						user_bms.bm_id=param_user_bm_id
				)::integer as referer_level
 			from users
			where users.user_id = param_user_id
			
			union
			
			select 
				users.referer_id as referer_id, 
				tree.referer_level::integer - case when user_bms is null then 0 else 1 end as referer_level
		    from users
		    left join user_bms  
		    	on user_bms.user_id = users.user_id and user_bms.bm_id = param_user_bm_id
		    join tree
		        on tree.referer_id = users.user_id  and users.user_id != users.referer_id
		    where 
		    	tree.referer_level - case when user_bms is null then 0 else 1 end > 0
			)
			select * from tree order by referer_level limit 1;
    end;
$end$ 
language plpgsql;


select * from get_referers(1122::bigint, 1::smallint);

"
BGwz8dp6,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Sunday 10th of December 2023 11:06:18 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-927321"
9UMXTq2w,SDA - hw10 - task3,D_L3,C++,Sunday 10th of December 2023 10:49:18 AM CDT,"#include <iostream>
#include <cmath>
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <set>
#include <stack>
#include <queue>
#include <unordered_set>
#include <unordered_map>
#include <climits>


using namespace std;

stack<char> res;
int idx = 25;
unordered_map<int, vector<int>> graph;
bool visited[26]{ false };

size_t firstDifferentIdx(string prev, string next) {
    size_t idx = 0;
    while (prev[idx] == next[idx] && idx < prev.length() && idx < next.length()) {
        idx++;
    }
    return idx;
}

void dfs(int val) {
    visited[val] = true;
    auto neighbours = graph[val];
    for (int i = 0; i < neighbours.size(); i++)
    {
        if (!visited[neighbours[i]])
            dfs(neighbours[i]);
    }
    res.push(val + 'a');
}


int main()
{
    int n;
    cin >> n;
    string prev, next;
    cin >> prev;
    for (int i = 1; i < n; i++) {
        cin >> next;
        size_t diffIdx = firstDifferentIdx(prev, next);
        if (diffIdx < prev.length()) {
            graph[prev.at(diffIdx) - 'a'].push_back(next.at(diffIdx) - 'a');
        }
        prev = next;
    }
    
    for (auto i : graph)
    {
        if (!visited[i.first])
            dfs(i.first);
    }

    while(!res.empty()){
        cout << res.top() << "" "";
        res.pop();
    }
}"
i8MnK31f,Hidden devs verification,Not_Infimax,Lua,Sunday 10th of December 2023 10:36:48 AM CDT,"local ChatService = game:GetService(""Chat"")
local PhysicsService = game:GetService(""PhysicsService"")
local TweenService = game:GetService(""TweenService"")

local Remotes = game.ReplicatedStorage.Remotes
local JobRemotes = Remotes.JobRemotes

local HallaPizza = workspace.JobSystem.HallaPizza
local Restaurant = workspace.JobSystem.Restaurant
local IceCream = workspace.JobSystem[""Ice Cream""]

local JobModule = require(script.Parent.Modules.Job)
local ListOfJobs = require(script.Parent.Modules.ListOfJobs)
local ListOfCustomerMsgs = require(script.Parent.Modules.ListOfCustomerMsgs)
local Orders = require(script.Parent.Modules.Orders)

-- Values
local PlayerConnections = {} -- Every Connection that we add along the way
local Animations = {} -- Animations that the player is currently playing
local RoleStocks = {} -- Stocks for a player's sepcific role

-- Jobs
local HallaPizzaJob = JobModule.new(""HallaPizza"", ListOfJobs.HallaPizza.Roles, ListOfJobs.HallaPizza.MaxWorkers)

local RestaurantJob = JobModule.new(""Restaurant"", ListOfJobs.Restaurant.Roles, ListOfJobs.Restaurant.MaxWorkers)

local IceCreamJob = JobModule.new(""Ice Cream"", ListOfJobs[""Ice Cream""].Roles, ListOfJobs[""Ice Cream""].MaxWorkers)

task.wait()

PhysicsService:RegisterCollisionGroup(""Customers"")
PhysicsService:CollisionGroupSetCollidable(""Customers"", ""Players"", false)

game.Players.PlayerAdded:Connect(function(player)
        -- Set the player values
        PlayerConnections[player] = {}
        Animations[player] = {}
        RoleStocks[player] = 0
        -- Goes through and activates each click detector
        for i, v in pairs(workspace.JobSystem:GetDescendants()) do
                if v:IsA(""ClickDetector"") then
                        JobRemotes.ActivateClickDetector:FireClient(player, v, false)
                end
        end
end)

game.Players.PlayerRemoving:Connect(function(player)
        -- Removes Worker from metatables
        HallaPizzaJob.RemoveWorker(player)
        RestaurantJob.RemoveWorker(player)
        IceCreamJob.RemoveWorker(player)
        -- Disconnect all RBX Events
        for i, v in pairs(PlayerConnections[player]) do
                v:Disconnect()
        end
        PlayerConnections[player] = nil
        Animations[player] = nil
        RoleStocks[player] = nil

        -- Destroy all Player Customers owned by this player
        for i, v in pairs(workspace.JobSystem.PlayerCustomers:GetChildren()) do
                if v:FindFirstChild(""Host"") then
                        if v:FindFirstChild(""Host"").Value == player then
                                v:Destroy()
                        end
                end
        end
end)

local function changeModelTranparency(Model: Model, Transparency: number)
        for _, v: Part in pairs(Model:GetDescendants()) do
                if v:IsA(""BasePart"") then
                        v.Transparency = Transparency
                end
        end
end
local function changeTransparency(model: Model, transparency: number, name)
        for _, v in pairs(model:GetDescendants()) do
                if v.Name == name then
                        if v:IsA(""BasePart"") then
                                v.Transparency = transparency
                        elseif v:IsA(""Model"") then
                                changeModelTranparency(v, transparency)
                        end
                end
        end
end

--Import the module so you can start using it
local SimplePath = require(script.SimplePath)
function CreatePath(Dummy: Model, Goal)
        --Create a new Path using the Dummy
        local Path = SimplePath.new(Dummy)

        --Helps to visualize the path
        Path.Visualize = false

        --Dummy knows to compute path again if something blocks the path
        Path.Blocked:Connect(function()
                Path:Run(Goal)
        end)

        --If the position of Goal changes at the next waypoint, compute path again
        Path.WaypointReached:Connect(function()
                Path:Run(Goal)
        end)

        Path:Run(Goal)
end

-- Parameters Player, RoleName
function StartJob(...)
        local pack = table.pack(...)
        local JobName = pack[1]
        local EventName = pack[2]
        local plr = pack[3]
        local role = pack[4]
        local promptTriggeredBy: ProximityPrompt = pack[5]
        if HasJob(plr) then return end

        local success = false
        local pay = 0
        if JobName == HallaPizzaJob.JobName then
                success = HallaPizzaJob.AddWorker(plr, role)
                pay = HallaPizzaJob:GetPlayerPay(plr)
        elseif JobName == RestaurantJob.JobName then
                success = RestaurantJob.AddWorker(plr, role)
                pay = RestaurantJob:GetPlayerPay(plr)
        elseif JobName == IceCreamJob.JobName then
                success = IceCreamJob.AddWorker(plr, role)
                pay = IceCreamJob:GetPlayerPay(plr)
        end

        if success then
                for i, v:ProximityPrompt in pairs(workspace.JobSystem[JobName].ClaimParts:GetDescendants()) do
                        if v:IsA(""ProximityPrompt"") then
                                JobRemotes.ActivatePrompt:FireClient(plr, v, false)
                        elseif v:IsA(""ClickDetector"") then
                                JobRemotes.ActivateClickDetector:FireClient(plr, v, true)
                        end
                end
                JobRemotes.ShowFrames:FireClient(plr, true)
                JobRemotes.ShowStats:FireClient(plr, pay)
        end
end

function HasJob(player: Player)
        local JobStats = player:FindFirstChild(""JobStats"")

        if JobStats then
                local HasJob = JobStats:FindFirstChild(""HasJob"")

                if HasJob then
                        return HasJob.Value
                end
        end
end

--function ChangeRole(...)
--      local pack = table.pack(...)
--      local JobName = pack[1]
--      local EventName = pack[2]
--      local plr = pack[3]
--      local role = pack[4]
--      if not HasJob(plr) then return end

--      if JobName == HallaPizzaJob.JobName then
--              HallaPizzaJob.ChangePlayerRole(plr, role)
--      elseif JobName == RestaurantJob.JobName then
--              RestaurantJob.ChangePlayerRole(plr, role)
--      elseif JobName == IceCreamJob.JobName then
--              IceCreamJob.ChangePlayerRole(plr, role)
--      end
--end

-- For every building, the interaction with the cashier and customer
function CashierCustomerAction(...)
        local pack = table.pack(...)
        local JobName = pack[1]
        local ActionName = pack[2]
        local plr = pack[3]
        local role = pack[4]
        if not HasJob(plr) then return end

        local Customers = game.ReplicatedStorage.Customers:GetChildren()
        local Customer = Customers[math.random(1, #Customers)]:Clone()
        Customer.Parent = workspace.JobSystem.PlayerCustomers
        Customer.HumanoidRootPart:SetNetworkOwner(plr)
        
        local Host = Instance.new(""ObjectValue"", Customer)
        Host.Name = ""Host""
        Host.Value = plr

        for i, v: BasePart in pairs(Customer:GetDescendants()) do
                if v:IsA(""BasePart"") then
                        v.CollisionGroup = ""Customers"" 
                end
        end

        local Humanoid: Humanoid = Customer:WaitForChild(""Humanoid"")
        local Register
        local Waypoints
        if JobName == HallaPizzaJob.JobName then
                local Registers = HallaPizza.Registers
                if Registers.Register1.Owner.Value == plr then
                        Register = Registers.Register1
                elseif Registers.Register2.Owner.Value == plr then
                        Register = Registers.Register2
                end

                if Register then
                        Waypoints = HallaPizza.Waypoints:FindFirstChild(Register.Name)
                else
                        return
                end

        elseif JobName == RestaurantJob.JobName then
                local Registers = Restaurant.Registers
                if Registers.Register1.Owner.Value == plr then
                        Register = Registers.Register1
                elseif Registers.Register2.Owner.Value == plr then
                        Register = Registers.Register2
                end

                if Register then
                        Waypoints = Restaurant.Waypoints:FindFirstChild(Register.Name)
                else
                        return
                end
        elseif JobName == IceCreamJob.JobName then
                local Registers = IceCream.Registers
                if Registers.Register1.Owner.Value == plr then
                        Register = Registers.Register1
                elseif Registers.Register2.Owner.Value == plr then
                        Register = Registers.Register2
                end

                if Register then
                        Waypoints = IceCream.Waypoints:FindFirstChild(Register.Name)
                else
                        return
                end
        end

        Customer.HumanoidRootPart.CFrame = Waypoints:FindFirstChild(""1"").CFrame * CFrame.new(0, 2, 0)

        --CreatePath(Customer, Waypoints:FindFirstChild(""5""))
        if Waypoints:FindFirstChild('3') then
                Humanoid:MoveTo(Waypoints['3'].Position)
                Humanoid.MoveToFinished:Wait()
        end

        Humanoid:MoveTo(Waypoints['5'].Position)

        task.wait(1)

        local prefix = ListOfCustomerMsgs.Prefix[math.random(1, #ListOfCustomerMsgs.Prefix)]
        local suffix = ListOfCustomerMsgs.Suffix[JobName][math.random(1, #ListOfCustomerMsgs.Suffix[JobName])]
        local msg = prefix .. suffix.Message

        ChatService:Chat(Customer:WaitForChild(""Head""), msg, Enum.ChatColor.White)

        local CashierGui

        -- Sets the CashierGui to One or Two
        if JobName == HallaPizzaJob.JobName or JobName == RestaurantJob.JobName  then
                CashierGui = plr.PlayerGui.CashierGui
        elseif JobName == IceCreamJob.JobName then
                CashierGui = plr.PlayerGui.CashierGui2
        end

        CashierGui.Adornee = Register.CashRegister.Value[""Screen""]

        for i = 1, #CashierGui:GetChildren() do
                local clickConnection

                local function btnClick()
                        print('Clicked')
                        if i == suffix.Order then
                                if JobName == HallaPizzaJob.JobName then
                                        HallaPizzaJob:Pay(plr)
                                        ChatService:Chat(Customer.Head, ""Thanks for the Pizza 🍕!!"", Enum.ChatColor.White)
                                elseif JobName == RestaurantJob.JobName then
                                        RestaurantJob:Pay(plr)
                                        ChatService:Chat(Customer.Head, ""Thanks for the food 🍽️!!"", Enum.ChatColor.White)
                                elseif JobName == IceCreamJob.JobName then
                                        IceCreamJob:Pay(plr)
                                        ChatService:Chat(Customer.Head, ""Thanks for the Ice Cream 🍦!!"", Enum.ChatColor.White)
                                end
                        else
                                ChatService:Chat(Customer.Head, ""Ugh, you got my order wrong!!"", Enum.ChatColor.White)
                        end
                        for i, v in pairs(PlayerConnections[plr]) do
                                v:Disconnect()
                        end

                        task.wait(1)

                        -- Creates the path to leave the building
                        if Waypoints:FindFirstChild(""3"") then
                                --CreatePath(Customer, Waypoints:FindFirstChild(""3"").Position)
                                Humanoid:MoveTo(Waypoints['3'].Position)
                                Humanoid.MoveToFinished:Wait()
                        end

                        CreatePath(Customer, Waypoints:FindFirstChild(""1"").Position)

                        task.wait(5)

                        Customer:Destroy()

                        CashierCustomerAction(table.unpack(pack))
                end

                clickConnection = CashierGui:FindFirstChild(i).Btn.MouseButton1Click:Connect(btnClick)
                
                table.insert(PlayerConnections[plr], clickConnection)
        end
end

-- The Delivery, Pizza Runners. 
function CustomerAction2(...)
        local pack = table.pack(...)
        local JobName = pack[1]
        local ActionName = pack[2]
        local plr = pack[3]
        local role = pack[4]
        if not HasJob(plr) then return end

        local Register
        local Waypoints
        if JobName == HallaPizzaJob.JobName then
                Waypoints = HallaPizza.Waypoints.Seats
        elseif JobName == RestaurantJob.JobName then
                Waypoints = Restaurant.Waypoints.Seats
        elseif JobName == IceCreamJob.JobName then
                Waypoints = IceCream.Waypoints.Seats
        end

        local Max = #Waypoints:GetChildren() - 2
        local num = math.random(3, Max)
        local seat: Seat = Waypoints:FindFirstChild(num)

        if seat.Occupant == nil then
                local maxAttempts = 24
                local attempts = 0
                repeat
                        num = math.random(3, Max)
                        seat = Waypoints:FindFirstChild(num)
                        attempts += 1
                until seat.Occupant == nil and attempts ~= maxAttempts
        end

        local Customer: Model = game.ReplicatedStorage.Customers:GetChildren()
        Customer = Customer[math.random(1, #Customer)]:Clone()
        Customer.Parent = workspace.JobSystem.PlayerCustomers

        for i, v: BasePart in pairs(Customer:GetDescendants()) do
                if v:IsA(""BasePart"") then
                        v.CollisionGroup = ""Customers"" 
                end
        end

        local Host = Instance.new(""ObjectValue"", Customer)
        Host.Name = ""Host""
        Host.Value = plr

        local Humanoid: Humanoid = Customer:WaitForChild(""Humanoid"")

        Customer.HumanoidRootPart.CFrame = Waypoints:FindFirstChild(math.random(1,2)).CFrame * CFrame.new(0, 2, 0)
        CreatePath(Customer, (seat.CFrame * CFrame.new(-4, 0, 0)).Position)

        task.wait(4)

        seat:Sit(Humanoid)

        local suffix = ListOfCustomerMsgs.Suffix[JobName][math.random(1, #ListOfCustomerMsgs.Suffix[JobName])]

        local CustomerTag = script.CustomerTag:Clone()
        local Head = Customer:WaitForChild(""Head"")
        if Head then
                CustomerTag.Parent = Head
        end

        CustomerTag.Frame.Icon.Image = suffix.Icon

        local ClickDetector = Instance.new(""ClickDetector"", Customer)

        local location
        if JobName == HallaPizzaJob.JobName then
                location = HallaPizza.ClickDetectors.Pizza
        elseif JobName == RestaurantJob.JobName then
                location = Restaurant.ClickDetectors.Meals
        end

        for i, v in pairs(location:GetDescendants()) do
                if v:IsA(""ClickDetector"") then
                        JobRemotes.ActivateClickDetector:FireClient(plr, v, true)
                end
        end

        local connection
        connection = ClickDetector.MouseClick:Connect(function(player)
                if JobName == HallaPizzaJob.JobName then
                        if HallaPizzaJob:IsRoleWorker(""Pizza Runner"", player) then
                                local tool = player.Character:FindFirstChildWhichIsA(""Folder"")
                                if tool then
                                        CustomerTag:Destroy()
                                        tool:Destroy()
                                        if Animations[player][""Holding Pizza""] then
                                                Animations[player][""Holding Pizza""]:Stop()
                                                Animations[player][""Holding Pizza""] = nil
                                        end
                                        if tool.Name == suffix.Name then
                                                HallaPizzaJob:Pay(plr)
                                                ChatService:Chat(Customer.Head, ""Thanks for the Pizza 🍕!!"", Enum.ChatColor.White)

                                                coroutine.wrap(function()
                                                        CustomerAction2(table.unpack(pack))
                                                end)()  
                                                task.wait(1) -- Time between Meal and Leaving

                                                if seat:FindFirstChildWhichIsA(""Weld"") then
                                                        seat:FindFirstChildWhichIsA(""Weld""):Destroy()
                                                end

                                                Customer:Destroy()
                                        else
                                                ChatService:Chat(Customer.Head, ""Ugh, you got my order wrong!!"", Enum.ChatColor.White)

                                                coroutine.wrap(function()
                                                        CustomerAction2(table.unpack(pack))
                                                end)()

                                                task.wait(2) -- Time between Order and Leaving

                                                if seat:FindFirstChildWhichIsA(""Weld"") then
                                                        seat:FindFirstChildWhichIsA(""Weld""):Destroy()
                                                end

                                                Customer:Destroy()
                                        end
                                end
                                connection:Disconnect()
                        end
                elseif JobName == RestaurantJob.JobName then
                        local tool = player.Character:FindFirstChildWhichIsA(""Folder"")
                        if tool then
                                CustomerTag:Destroy()
                                tool:Destroy()
                        end
                        if RestaurantJob:IsRoleWorker(""Delivery"", player) then
                                local tool = player.Character:FindFirstChildWhichIsA(""Folder"")
                                if tool then
                                        CustomerTag:Destroy()
                                        tool:Destroy()
                                        if Animations[player][""Holding Plate""] then
                                                Animations[player][""Holding Plate""]:Stop()
                                                Animations[player][""Holding Plate""] = nil
                                        end
                                        if tool.Name == suffix.Name then
                                                RestaurantJob:Pay(plr)
                                                ChatService:Chat(Customer.Head, ""Thanks for the Meal 🍽️!!"", Enum.ChatColor.White)

                                                coroutine.wrap(function()
                                                        CustomerAction2(table.unpack(pack))
                                                end)()

                                                task.wait(2) -- Time between Meal and Leaving

                                                if seat:FindFirstChildWhichIsA(""Weld"") then
                                                        seat:FindFirstChildWhichIsA(""Weld""):Destroy()
                                                end

                                                Customer:Destroy()
                                        else
                                                ChatService:Chat(Customer.Head, ""Ugh, you got my order wrong!!"", Enum.ChatColor.White)

                                                coroutine.wrap(function()
                                                        CustomerAction2(table.unpack(pack))
                                                end)()

                                                task.wait(2) -- Time between Order and Leaving

                                                if seat:FindFirstChildWhichIsA(""Weld"") then
                                                        seat:FindFirstChildWhichIsA(""Weld""):Destroy()
                                                end

                                                Customer:Destroy()
                                        end
                                end

                                connection:Disconnect()
                        end
                end
        end)
end

local maxRolls = 6
function DoughMakerAction(...)
        local pack = table.pack(...)
        local JobName = pack[1]
        local EventName = pack[2]
        local plr = pack[3]
        local station = pack[4]
        if not HasJob(plr) then return end

        -- Process, Step 1: Click the Board, Step 2: Click the Dough, Step 3: Click the Roller
        local clicks = {
                first = false,
                second = false,
                third = false,
        }

        local dly = 0.5

        local Table: Part = HallaPizza.ObjectValues.DoughMaker[""Table"" .. station].Value
        local Board: Part = HallaPizza.ObjectValues.DoughMaker[""Board"" .. station].Value
        local Dough: Part = HallaPizza.ObjectValues.DoughMaker[""Dough"" .. station].Value
        local Roller: Model = HallaPizza.ObjectValues.DoughMaker[""Roller"" .. station].Value

        local BoardItem = HallaPizza.DoughMakerItems[""Board"" .. station]
        local DoughItem = HallaPizza.DoughMakerItems[""Dough"" .. station]
        local RollerItem = HallaPizza.DoughMakerItems[""Roller"" .. station]

        local needToRestock = false -- whether it needs to restock or not

        -- Show the Arrow on top of the board
        JobRemotes.ShowArrow:FireClient(plr, Board)

        local Table = HallaPizza.ClickDetectors.DoughMaker[""Table"" .. station]
        local StandCFrame = Table.CFrame * CFrame.new(0,0,3)

        JobRemotes.ActivateClickDetector:FireClient(plr, Table.ClickDetector, false)

        local Box = HallaPizza.ClickDetectors.DoughMaker[""Box""]
        local restockConnection
        if RoleStocks[plr] == maxRolls then
                needToRestock = true
                plr.Character.Humanoid.WalkSpeed = game.StarterPlayer.CharacterWalkSpeed
                plr.Character.Humanoid.JumpPower = game.StarterPlayer.CharacterJumpPower

                JobRemotes.ActivateClickDetector:FireClient(plr, Box.ClickDetector, true)
                -- Box Interaction
                restockConnection = Box.ClickDetector.MouseClick:Connect(function(player)
                        if player ~= plr then return end

                        JobRemotes.ShowArrow:FireClient(plr, Table)

                        Table.ClickDetector.MaxActivationDistance = 32

                        local anim = game.ReplicatedStorage.Animations.HoldBox
                        Animations[plr][""Holding Box""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                        Animations[plr][""Holding Box""]:Play()

                        local boxDist = 1

                        local Box = game.ReplicatedStorage.Tools.HallaPizza.Box:Clone()
                        Box.Parent = player.Character
                        Box.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, boxDist)

                        local Weld = Instance.new(""Weld"", Box)
                        Weld.Part0 = Box
                        Weld.Part1 = player.Character.HumanoidRootPart
                        Weld.C0 = Box.CFrame:Inverse() * player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, boxDist)

                        local TableConnection
                        TableConnection = Table.ClickDetector.MouseClick:Connect(function(player)
                                if player ~= plr then return end
                                -- Reset ClickDetector back to default
                                Table.ClickDetector.MaxActivationDistance = 0

                                Box:Destroy()
                                Weld:Destroy()
                                player.Character.Humanoid.WalkSpeed = 0
                                player.Character.Humanoid.JumpPower = 0

                                player.Character.HumanoidRootPart.CFrame = StandCFrame

                                Animations[plr][""Holding Box""]:Stop()

                                -- Reset rolls and set needToRestock to false
                                RoleStocks[player] = 0
                                needToRestock = false

                                JobRemotes.ShowArrow:FireClient(plr, Board)
                        end)
                        table.insert(PlayerConnections[player], TableConnection)
                end)
                -- Show the Arrow on top of the board
                JobRemotes.ShowArrow:FireClient(plr, Box)
        else
                plr.Character.Humanoid.WalkSpeed = 0
                plr.Character.Humanoid.JumpPower = 0
                plr.Character.HumanoidRootPart.CFrame = StandCFrame

        end

        JobRemotes.ActivateClickDetector:FireClient(plr, HallaPizza.ClickDetectors.DoughMaker[""Board""..station].ClickDetector, true)
        JobRemotes.ActivateClickDetector:FireClient(plr, HallaPizza.ClickDetectors.DoughMaker[""Dough""..station].ClickDetector, true)
        JobRemotes.ActivateClickDetector:FireClient(plr, HallaPizza.ClickDetectors.DoughMaker[""Roller""..station].ClickDetector, true)

        local connection
        connection = HallaPizza.ClickDetectors.DoughMaker[""Board"" .. station].ClickDetector.MouseClick:Connect(function(player: Player)
                if player ~= plr then return end
                if needToRestock then return end

                task.wait(dly)

                BoardItem.Transparency = 0

                JobRemotes.ShowArrow:FireClient(plr, Dough)

                clicks.first = true
                connection:Disconnect()
        end)

        local connection2
        connection2 = HallaPizza.ClickDetectors.DoughMaker[""Dough"" .. station].ClickDetector.MouseClick:Connect(function(player)
                if player ~= plr then return end
                if not clicks.first then return end
                if needToRestock then return end

                task.wait(dly)

                DoughItem.Transparency = 0

                JobRemotes.ShowArrow:FireClient(plr, Roller)

                clicks.second = true
                connection2:Disconnect()
        end)

        local connection3
        connection3 = HallaPizza.ClickDetectors.DoughMaker[""Roller"" .. station].ClickDetector.MouseClick:Connect(function(player)
                if player ~= plr then return end
                if not clicks.first or not clicks.second then return end
                if needToRestock then return end

                task.wait(dly)

                for i, v in pairs(RollerItem:GetChildren()) do
                        if v:IsA(""BasePart"") then
                                v.Transparency = 0
                        end
                end

                clicks.third = true
                HallaPizzaJob:Pay(plr)
                connection3:Disconnect()
                RoleStocks[plr] += 1

                local duration = 0.5
                local travelDist = 3

                local initialCFrame = RollerItem.PrimaryPart.CFrame

                local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 3, true)
                local tween = TweenService:Create(RollerItem.PrimaryPart, tweenInfo, {
                        CFrame = (RollerItem.PrimaryPart.CFrame * CFrame.new(0, 0, -travelDist))
                })

                local anim = game.ReplicatedStorage.Animations.HallaPizza.RollingAnimation
                Animations[player][""Rolling Animation""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                Animations[player][""Rolling Animation""]:Play()

                tween:Play()


                tween.Completed:Wait()
                Animations[player][""Rolling Animation""]:Stop()
                Animations[player][""Rolling Animation""] = nil

                -- Reset back to initial transparency
                for i, v in pairs(RollerItem:GetChildren()) do
                        if v:IsA(""BasePart"") then
                                v.Transparency = 1
                        end
                end
                BoardItem.Transparency = 1
                DoughItem.Transparency = 1

                RollerItem.PrimaryPart.CFrame = initialCFrame

                plr.Character.Humanoid.WalkSpeed = game.StarterPlayer.CharacterWalkSpeed
                plr.Character.Humanoid.JumpPower = game.StarterPlayer.CharacterJumpPower

                DoughMakerAction(table.unpack(pack))
        end)

        table.insert(PlayerConnections[plr], connection) -- insert connection so we can disconnect later
        table.insert(PlayerConnections[plr], connection2) -- insert connection so we can disconnect later
        table.insert(PlayerConnections[plr], connection3) -- insert connection so we can disconnect later
        table.insert(PlayerConnections[plr], restockConnection) -- insert connection so we can disconnect later
end

local maxPizza = 8
function PizzaMakerAction(...)
        local pack = table.pack(...)
        local JobName = pack[1]
        local EventName = pack[2]
        local plr = pack[3]
        local station = pack[4]
        if not HasJob(plr) then return end

        local pizza = Orders.Clone(Orders.HallaPizza.Order[math.random(1, #Orders.HallaPizza.Order)])
        local PizzaModel = HallaPizza.PizzaMakerItems[""Pizza"" .. station]

        local PM = HallaPizza.ObjectValues.PizzaMaker
        local PMC = HallaPizza.ClickDetectors.PizzaMaker
        local Screen =  PM[""Screen"" .. station].Value

        local inStock = true
        local Table = HallaPizza.ClickDetectors.PizzaMaker[""Table""..station]

        JobRemotes.ActivateClickDetector:FireClient(plr, Table.ClickDetector, false)
        JobRemotes.ActivateClickDetector:FireClient(plr, HallaPizza.ClickDetectors.PizzaMaker[""Box""].ClickDetector, false)

        if RoleStocks[plr] == maxPizza then
                Screen.GUI.Icon.Image = ""http://www.roblox.com/asset/?id=12232016774"" -- Restock Icon
                inStock = false
                JobRemotes.ShowArrow:FireClient(plr, HallaPizza.ClickDetectors.PizzaMaker[""Box""])

                JobRemotes.ActivateClickDetector:FireClient(plr, HallaPizza.ClickDetectors.PizzaMaker[""Box""].ClickDetector, true)

                local connection
                connection = HallaPizza.ClickDetectors.PizzaMaker[""Box""].ClickDetector.MouseClick:Connect(function(player)
                        if player ~= plr then return end

                        local anim = game.ReplicatedStorage.Animations.HoldBox
                        Animations[plr][""Holding Box""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                        Animations[plr][""Holding Box""]:Play()

                        local boxDist = 1

                        local Box = game.ReplicatedStorage.Tools.HallaPizza.Box:Clone()
                        Box.Parent = player.Character
                        Box.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, boxDist)

                        local Weld = Instance.new(""Weld"", Box)
                        Weld.Part0 = Box
                        Weld.Part1 = player.Character.HumanoidRootPart
                        Weld.C0 = Box.CFrame:Inverse() * player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, boxDist)

                        JobRemotes.ActivateClickDetector:FireClient(plr, Table.ClickDetector, true)                     
                        JobRemotes.ShowArrow:FireClient(plr, Table)
                        connection:Disconnect()
                end)

                local connection2
                connection2 = Table.ClickDetector.MouseClick:Connect(function(player)
                        if player ~= plr then return end

                        task.wait(0.5)
                        inStock = true

                        JobRemotes.ActivateClickDetector:FireClient(plr, HallaPizza.ClickDetectors.PizzaMaker[""Table""..station].ClickDetector, false)
                        if plr.Character:FindFirstChild(""Box"") then
                                plr.Character:FindFirstChild(""Box""):Destroy()
                                Animations[plr][""Holding Box""]:Stop()
                                Animations[plr][""Holding Box""] = nil
                        end

                        player.Character.Humanoid.WalkSpeed = 0
                        player.Character.Humanoid.JumpPower = 0
                        player.Character.HumanoidRootPart.CFrame = Table.CFrame * CFrame.new(0,0,3)

                        RoleStocks[plr] = 0
                        connection2:Disconnect()
                end)
                table.insert(PlayerConnections[plr], connection)
                table.insert(PlayerConnections[plr], connection2)
                repeat task.wait()
                        if connection2 == nil then
                                break
                        end
                until inStock
        else
                plr.Character.Humanoid.WalkSpeed = 0
                plr.Character.Humanoid.JumpPower = 0
                plr.Character.HumanoidRootPart.CFrame = Table.CFrame * CFrame.new(0,0,3)
        end

        Screen.GUI.Icon.Image = pizza.Icon

        local clicks = pizza.Clicks
        local isRunning = true
        local isOnNumber = 1

        for i = 1, #Orders.HallaPizza.ClickDetectors do
                local CDNAME = Orders.HallaPizza.ClickDetectors[i]
                local isInRecipe = false
                for _, k in pairs(clicks) do
                        if k.Name == CDNAME then
                                isInRecipe = true
                        end
                end

                if not isInRecipe then
                        local connection
                        JobRemotes.ActivateClickDetector:FireClient(plr, PMC[CDNAME .. station].ClickDetector, true)
                        connection = PMC[CDNAME .. station].ClickDetector.MouseClick:Connect(function(player)
                                if player ~= plr then return end

                                isRunning = false
                                changeModelTranparency(PizzaModel, 1)
                                for i, v in pairs(PlayerConnections[plr]) do
                                        v:Disconnect()
                                end

                                plr.Character.Humanoid.WalkSpeed = game.StarterPlayer.CharacterWalkSpeed
                                plr.Character.Humanoid.JumpPower = game.StarterPlayer.CharacterJumpPower
                                RoleStocks[plr] += 1
                                PizzaMakerAction(table.unpack(pack))
                        end)
                        table.insert(PlayerConnections[plr], connection)
                end
        end

        for i = 1, #clicks do
                local click = clicks[i]
                local name = click.Name .. station

                if i == 1 then
                        JobRemotes.ShowArrow:FireClient(plr, PMC[name])
                end

                local connection
                JobRemotes.ActivateClickDetector:FireClient(plr, PMC[name].ClickDetector, true)
                connection = PMC[name].ClickDetector.MouseClick:Connect(function(player)
                        if player ~= plr then return end

                        if i ~= 1 then
                                local clminus = clicks[i - 1] -- Current one minus 1 (to go back)
                                if clminus then
                                        if not clminus.Done then
                                                isRunning = false
                                                changeModelTranparency(PizzaModel, 1)
                                                RoleStocks[plr] += 1
                                                PizzaMakerAction(table.unpack(pack))
                                                connection:Disconnect()
                                                return
                                        end
                                end
                        end

                        task.wait(0.5)
                        changeTransparency(PizzaModel, 0, click.Name)

                        task.wait(0.5)

                        if i == #clicks then
                                for i, v in pairs(PlayerConnections[plr]) do
                                        v:Disconnect()
                                        PlayerConnections[plr][i] = nil
                                end

                                local clone: Model = PizzaModel:Clone()
                                clone.Parent = workspace.JobSystem.Items

                                local Host = Instance.new(""ObjectValue"", clone)
                                Host.Value = plr

                                if clone.PrimaryPart then
                                        coroutine.wrap(function()
                                                local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, false, 0)
                                                for i = 1, 3 do
                                                        local waypoint: Part = HallaPizza.Waypoints.PizzaMaker[i]
                                                        if waypoint then
                                                                local tween = TweenService:Create(clone.PrimaryPart, tweenInfo, {
                                                                        CFrame = waypoint.CFrame * CFrame.Angles(math.rad(-90), 0, 0)
                                                                })
                                                                tween:Play()
                                                                tween.Completed:Wait()
                                                        end
                                                end
                                                clone:Destroy()
                                        end)()
                                end

                                plr.Character.Humanoid.WalkSpeed = game.StarterPlayer.CharacterWalkSpeed
                                plr.Character.Humanoid.JumpPower = game.StarterPlayer.CharacterJumpPower

                                isRunning = false
                                changeModelTranparency(PizzaModel, 1)                           
                                HallaPizzaJob:Pay(plr)
                                RoleStocks[plr] += 1
                                PizzaMakerAction(table.unpack(pack))
                        end


                        isOnNumber += 1
                        click.Done = true
                        connection:Disconnect()
                end)
                table.insert(PlayerConnections[plr], connection)
        end

        coroutine.wrap(function()
                while isRunning do
                        if #PlayerConnections[plr] == 0 then
                                break
                        end

                        if isOnNumber ~= 1 then
                                JobRemotes.ShowArrow:FireClient(plr, PMC[clicks[isOnNumber].Name .. station])
                        end
                        task.wait()
                end
        end)()
end

function DishWasherAction(...)
        local pack = table.pack(...)
        local JobName = pack[1]
        local EventName = pack[2]
        local plr = pack[3]
        local station = pack[4]
        if not HasJob(plr) then return end

        local clicks = {
                first = false,
                second = false
        }

        local Dishes = Restaurant.ClickDetectors.DishWasher[""Dishes"" .. station]
        local Sink = Restaurant.ClickDetectors.DishWasher[""Sink"" .. station]
        local Plate = Restaurant.DishWasherItems[""Plate""..station]
        local Water = Restaurant.DishWasherItems[""Water""..station]
        local Table = Restaurant.DishWasherItems[""Table""..station]

        JobRemotes.ShowArrow:FireClient(plr, Dishes)

        JobRemotes.ActivateClickDetector:FireClient(plr, Dishes.ClickDetector, true)
        JobRemotes.ActivateClickDetector:FireClient(plr, Sink.ClickDetector, true)

        plr.Character.Humanoid.WalkSpeed = 0
        plr.Character.Humanoid.JumpPower = 0

        plr.Character.HumanoidRootPart.CFrame = Table.CFrame * CFrame.new(-3,0, 0) * CFrame.Angles(0, -math.rad(90), 0)

        local connection
        connection = Dishes.ClickDetector.MouseClick:Connect(function(player)
                if player ~= plr then return end

                Plate.Transparency = 0
                JobRemotes.ShowArrow:FireClient(plr, Sink)

                clicks.first = true
                connection:Disconnect()
        end)

        local connection2
        connection2 = Sink.ClickDetector.MouseClick:Connect(function(player: Player)
                if player ~= plr then return end
                if not clicks.first then return end

                Water.ParticleEmitter.Enabled = true

                local anim = game.ReplicatedStorage.Animations.Restaurant.Cleaning
                Animations[plr][""Cleaning""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                Animations[plr][""Cleaning""]:Play()

                task.wait(3)
                Plate.Transparency = 1
                Water.ParticleEmitter.Enabled = false
                Animations[plr][""Cleaning""]:Stop()
                Animations[plr][""Cleaning""] = nil
                connection2:Disconnect()
                RestaurantJob:Pay(plr)
                DishWasherAction(table.unpack(pack))
                clicks.second = true
        end)
        table.insert(PlayerConnections[plr], connection)
        table.insert(PlayerConnections[plr], connection2)

end

local MaxStocks = 7
function CookerAction(...)
        local pack = table.pack(...)
        local JobName = pack[1]
        local EventName = pack[2]
        local plr = pack[3]
        local station = pack[4]
        if not HasJob(plr) then return end

        local inStock = true

        if RoleStocks[plr] == MaxStocks then
                inStock = false

                JobRemotes.ShowArrow:FireClient(plr, Restaurant.ClickDetectors.Cooker.Box)
                JobRemotes.ActivateClickDetector:FireClient(plr, Restaurant.ClickDetectors.Cooker.Box.ClickDetector, true)
                local connection
                connection = Restaurant.ClickDetectors.Cooker.Box.ClickDetector.MouseClick:Connect(function(player)
                        if player ~= player then return end

                        local boxDist = 1

                        local Box = game.ReplicatedStorage.Tools.Restaurant.Box:Clone()
                        Box.Parent = player.Character
                        Box.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, boxDist)

                        local Weld = Instance.new(""Weld"", Box)
                        Weld.Part0 = Box
                        Weld.Part1 = player.Character.HumanoidRootPart
                        Weld.C0 = Box.CFrame:Inverse() * player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, boxDist)

                        local anim = game.ReplicatedStorage.Animations.HoldBox
                        Animations[plr][""Holding Box""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                        Animations[plr][""Holding Box""]:Play()

                        JobRemotes.ShowArrow:FireClient(plr, Restaurant.ClickDetectors.Cooker.Restock)
                        JobRemotes.ActivateClickDetector:FireClient(plr, Restaurant.ClickDetectors.Cooker.Restock.ClickDetector, true)

                        local connection2
                        connection2 = Restaurant.ClickDetectors.Cooker.Restock.ClickDetector.MouseClick:Connect(function(player)
                                if plr.Character:FindFirstChild(""Box"") then
                                        plr.Character:FindFirstChild(""Box""):Destroy()
                                        Animations[plr][""Holding Box""]:Stop()
                                        Animations[plr][""Holding Box""] = nil
                                end
                                JobRemotes.ActivateClickDetector:FireClient(plr, Restaurant.ClickDetectors.Cooker.Restock.ClickDetector, false)
                                inStock = true
                                JobRemotes.ShowArrow:FireClient(plr)

                                RoleStocks[plr] = 0
                                connection2:Disconnect()
                        end)
                        table.insert(PlayerConnections[plr], connection2)

                        connection:Disconnect()
                end)
                table.insert(PlayerConnections[plr], connection)

                repeat task.wait()
                        if connection == nil then
                                break
                        end
                until inStock
        end

        local randomAction = math.random(1, 4)

        JobRemotes.ShowArrow:FireClient(plr, Restaurant.ClickDetectors.Cooker[randomAction])

        local connection
        JobRemotes.ActivateClickDetector:FireClient(plr, Restaurant.ClickDetectors.Cooker[randomAction].ClickDetector, true)
        connection = Restaurant.ClickDetectors.Cooker[randomAction].ClickDetector.MouseClick:Connect(function(player)
                if player ~= plr then return end

                local Pan = Restaurant.ClickDetectors.Cooker.Pan
                local Fryer =  Restaurant.ClickDetectors.Cooker.Fryer
                local Stove = Restaurant.ClickDetectors.Cooker.Stove

                JobRemotes.ActivateClickDetector:FireClient(plr, Pan.ClickDetector, true)
                JobRemotes.ActivateClickDetector:FireClient(plr, Fryer.ClickDetector, true)
                JobRemotes.ActivateClickDetector:FireClient(plr, Stove.ClickDetector, true)

                if randomAction == 1 then -- Chicken
                        JobRemotes.ShowArrow:FireClient(plr, Fryer)

                        local connection
                        connection = Fryer.ClickDetector.MouseClick:Connect(function(player)
                                if player ~= plr then return end

                                Fryer.Smoke.Enabled = true

                                -- Disable ClickDetectors
                                JobRemotes.ActivateClickDetector:FireClient(plr, Pan.ClickDetector, false)
                                JobRemotes.ActivateClickDetector:FireClient(plr, Fryer.ClickDetector, false)
                                JobRemotes.ActivateClickDetector:FireClient(plr, Stove.ClickDetector, false)

                                task.wait(3)
                                Fryer.Smoke.Enabled = false
                                connection:Disconnect()
                                RestaurantJob:Pay(plr)
                                RoleStocks[plr] += 1
                                CookerAction(table.unpack(pack))
                        end)
                        table.insert(PlayerConnections[plr], connection)
                elseif randomAction == 2 then -- Breakfast
                        JobRemotes.ShowArrow:FireClient(plr, Pan)
                        local connection
                        connection = Pan.ClickDetector.MouseClick:Connect(function(player)
                                if player ~= plr then return end

                                Pan.Smoke.Enabled = true

                                -- Disable ClickDetectors
                                JobRemotes.ActivateClickDetector:FireClient(plr, Pan.ClickDetector, false)
                                JobRemotes.ActivateClickDetector:FireClient(plr, Fryer.ClickDetector, false)
                                JobRemotes.ActivateClickDetector:FireClient(plr, Stove.ClickDetector, false)

                                task.wait(3)
                                Pan.Smoke.Enabled = false
                                connection:Disconnect()
                                RestaurantJob:Pay(plr)
                                RoleStocks[plr] += 1
                                CookerAction(table.unpack(pack))
                        end)
                        table.insert(PlayerConnections[plr], connection)
                elseif randomAction == 3 then -- Sandwich
                        JobRemotes.ShowArrow:FireClient(plr, Stove)
                        local connection
                        connection = Stove.ClickDetector.MouseClick:Connect(function(player)
                                if player ~= plr then return end

                                Stove.Smoke.Enabled = true

                                -- Disable ClickDetectors
                                JobRemotes.ActivateClickDetector:FireClient(plr, Pan.ClickDetector, false)
                                JobRemotes.ActivateClickDetector:FireClient(plr, Fryer.ClickDetector, false)
                                JobRemotes.ActivateClickDetector:FireClient(plr, Stove.ClickDetector, false)

                                task.wait(3)
                                Stove.Smoke.Enabled = false
                                connection:Disconnect()
                                RestaurantJob:Pay(plr)
                                RoleStocks[plr] += 1
                                CookerAction(table.unpack(pack))
                        end)
                        table.insert(PlayerConnections[plr], connection)
                elseif randomAction == 4 then -- Fish
                        JobRemotes.ShowArrow:FireClient(plr, Pan)
                        local connection
                        connection = Pan.ClickDetector.MouseClick:Connect(function(player)
                                if player ~= plr then return end

                                Pan.Smoke.Enabled = true
                                JobRemotes.ShowArrow:FireClient(plr, Fryer)
                                local connection2
                                connection2 = Fryer.ClickDetector.MouseClick:Connect(function(player)
                                        if player ~= plr then return end

                                        Fryer.Smoke.Enabled = true

                                        -- Disable ClickDetectors
                                        JobRemotes.ActivateClickDetector:FireClient(plr, Pan.ClickDetector, false)
                                        JobRemotes.ActivateClickDetector:FireClient(plr, Fryer.ClickDetector, false)
                                        JobRemotes.ActivateClickDetector:FireClient(plr, Stove.ClickDetector, false)

                                        task.wait(3)
                                        Fryer.Smoke.Enabled = false
                                        connection2:Disconnect()
                                        RestaurantJob:Pay(plr)
                                        RoleStocks[plr] += 1
                                        CookerAction(table.unpack(pack))
                                end)

                                task.wait(3)
                                Pan.Smoke.Enabled = false
                                connection:Disconnect()
                                table.insert(PlayerConnections[plr], connection2)
                        end)
                        table.insert(PlayerConnections[plr], connection)
                end

                JobRemotes.ActivateClickDetector:FireClient(plr, Restaurant.ClickDetectors.Cooker[randomAction].ClickDetector, false)
                connection:Disconnect()
        end)
        table.insert(PlayerConnections[plr], connection)
end

local MaxRestock = 2
function ChopperAction(...)
        local pack = table.pack(...)
        local JobName = pack[1]
        local EventName = pack[2]
        local plr: Player = pack[3]
        local station = pack[4]
        if not HasJob(plr) then return end

        local inStock = true

        if RoleStocks[plr] >= MaxRestock then
                plr.Character.Humanoid.WalkSpeed = 16
                plr.Character.Humanoid.JumpPower = 7.2

                inStock = false
                JobRemotes.ActivateClickDetector:FireClient(plr, Restaurant.Restaurant.ChoppingRestock.ClickDetector, true)
                JobRemotes.ShowArrow:FireClient(plr, Restaurant.Restaurant.ChoppingRestock)
                local connection0
                connection0 = Restaurant.Restaurant.ChoppingRestock.ClickDetector.MouseClick:Connect(function(player)
                        if plr ~= player then return end

                        local Box = game.ReplicatedStorage.Tools[""Restaurant""].Box:Clone()
                        Box.Parent = player.Character
                        Box.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 1)

                        local Weld = Instance.new(""Weld"", Box)
                        Weld.Part0 = Box
                        Weld.Part1 = player.Character.HumanoidRootPart
                        Weld.C0 = Box.CFrame:Inverse() * player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2)

                        local anim = game.ReplicatedStorage.Animations.HoldBox
                        Animations[plr][""Holding Box""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                        Animations[plr][""Holding Box""]:Play()

                        JobRemotes.ShowArrow:FireClient(plr, Restaurant.Restaurant.RestockPlace)

                        JobRemotes.ActivateClickDetector:FireClient(plr, Restaurant.Restaurant.RestockPlace.ClickDetector, true)
                        Restaurant.Restaurant.RestockPlace.CanQuery = true

                        local connection2
                        connection2 = Restaurant.Restaurant.RestockPlace.ClickDetector.MouseClick:Connect(function(player)
                                if plr.Character:FindFirstChild(""Box"") then
                                        plr.Character:FindFirstChild(""Box""):Destroy()
                                        Animations[plr][""Holding Box""]:Stop()
                                        Animations[plr][""Holding Box""] = nil
                                end
                                inStock = true
                                JobRemotes.ShowArrow:FireClient(plr)
                                JobRemotes.ActivateClickDetector:FireClient(plr, Restaurant.Restaurant.RestockPlace.ClickDetector, false)
                                RoleStocks[plr] = 0
                                connection2:Disconnect()
                        end)
                        table.insert(PlayerConnections[plr], connection2)

                        connection0:Disconnect()
                end)
                table.insert(PlayerConnections[plr], connection0)

                repeat task.wait()
                        if connection0 == nil then
                                break
                        end
                until inStock
        end

        Restaurant.Restaurant.RestockPlace.CanQuery = false
        plr.Character.Humanoid.WalkSpeed = 0
        plr.Character.Humanoid.JumpPower = 0
        plr.Character.HumanoidRootPart.CFrame = Restaurant.ChopperItems[""Stand""..station].CFrame * CFrame.new(0,1,0)

        local Board = Restaurant.ClickDetectors.Chopper[""Board""..station]
        local Knife = Restaurant.ClickDetectors.Chopper[""Knife""..station]

        local BoardItem = Restaurant.ChopperItems[""Board""..station]
        local KnifeItem = Restaurant.ChopperItems[""Knife""..station]

        local randomNum = math.random(1, 4)

        local food
        local plate
        if randomNum == 1 then
                food = Restaurant.ChopperItems[""C"".. station]
                plate = Restaurant.ClickDetectors.Chopper[""C"".. station]
        elseif randomNum == 2 then
                food = Restaurant.ChopperItems[""B"".. station]
                plate = Restaurant.ClickDetectors.Chopper[""B"".. station]
        elseif randomNum == 3 then
                food = Restaurant.ChopperItems[""H"".. station]
                plate = Restaurant.ClickDetectors.Chopper[""H"".. station]
        elseif randomNum == 4 then
                food = Restaurant.ChopperItems[""F"".. station]
                plate = Restaurant.ClickDetectors.Chopper[""F"".. station]
        end

        if food and plate then
                JobRemotes.ShowArrow:FireClient(plr, Board)

                local connection
                local connection2
                local connection3

                -- Steps/Process
                local clicks = {
                        first = false,
                        second = false,
                        third = false
                }

                JobRemotes.ActivateClickDetector:FireClient(plr, Board.ClickDetector, true)
                JobRemotes.ActivateClickDetector:FireClient(plr, plate.ClickDetector, true)
                JobRemotes.ActivateClickDetector:FireClient(plr, Knife.ClickDetector, true)

                connection = Board.ClickDetector.MouseClick:Connect(function(player)
                        if player ~= plr then return end

                        BoardItem.Transparency = 0
                        JobRemotes.ShowArrow:FireClient(plr, plate)

                        clicks.first = true
                        connection:Disconnect()
                end)

                connection2 = plate.ClickDetector.MouseClick:Connect(function(player)
                        if player ~= plr then return end
                        if not clicks.first then return end

                        changeModelTranparency(food, 0)
                        JobRemotes.ShowArrow:FireClient(plr, Knife)

                        clicks.second = true
                        connection2:Disconnect()
                end)

                connection3 = Knife.ClickDetector.MouseClick:Connect(function(player)
                        if player ~= plr then return end
                        if not clicks.second then return end

                        changeTransparency(KnifeItem, 0, ""Part"")

                        local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 3, true)
                        local tween = TweenService:Create(KnifeItem.PrimaryPart, tweenInfo, {
                                CFrame = (KnifeItem.PrimaryPart.CFrame * CFrame.Angles(math.rad(10), 0, 0)) * CFrame.new(-2, 0, 0)
                        })

                        local anim = game.ReplicatedStorage.Animations.Restaurant.Chopping
                        Animations[player][""Chopping Animation""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                        Animations[player][""Chopping Animation""]:Play()

                        tween:Play()


                        tween.Completed:Wait()
                        Animations[player][""Chopping Animation""]:Stop()
                        Animations[player][""Chopping Animation""] = nil

                        changeModelTranparency(KnifeItem, 1)
                        changeModelTranparency(food, 1)
                        BoardItem.Transparency = 1

                        RestaurantJob:Pay(plr)
                        RoleStocks[plr] += 1

                        ChopperAction(table.unpack(pack))

                        clicks.third = true
                        connection3:Disconnect()
                end)

                table.insert(PlayerConnections[plr], connection)
                table.insert(PlayerConnections[plr], connection2)
                table.insert(PlayerConnections[plr], connection3)
        end
end

local MaxStock = 7
function FlavorPickerAction(...)
        local pack = table.pack(...)
        local JobName = pack[1]
        local EventName = pack[2]
        local plr = pack[3]
        local station = pack[4]
        if not HasJob(plr) then return end

        local inStock = true
        
        JobRemotes.FlavorsTransparency:FireClient(plr, IceCream[""Ice cream shop""].Flavs.Flavors:GetChildren(), RoleStocks[plr] / MaxStock)

        JobRemotes.ActivateClickDetector:FireClient(plr, IceCream.ClickDetectors.IceCreamStock.ClickDetector, false)

        if RoleStocks[plr] == MaxStock then
                inStock = false
                print(""I am here"")
                JobRemotes.HighlightItem:FireClient(plr, IceCream.ClickDetectors.Boxes)
                JobRemotes.ShowArrow:FireClient(plr, IceCream.ClickDetectors.Boxes)
                local connection
                JobRemotes.ActivateClickDetector:FireClient(plr, IceCream.ClickDetectors.Boxes.ClickDetector, true)
                connection = IceCream.ClickDetectors.Boxes.ClickDetector.MouseClick:Connect(function(player)
                        if player ~= player then return end

                        local boxDist = 1

                        local Box = game.ReplicatedStorage.Tools[""Ice Cream""].Box:Clone()
                        Box.Parent = player.Character
                        Box.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, boxDist)

                        local Weld = Instance.new(""Weld"", Box)
                        Weld.Part0 = Box
                        Weld.Part1 = player.Character.HumanoidRootPart
                        Weld.C0 = Box.CFrame:Inverse() * player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, boxDist)

                        local anim = game.ReplicatedStorage.Animations.HoldBox
                        Animations[plr][""Holding Box""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                        Animations[plr][""Holding Box""]:Play()

                        JobRemotes.HighlightItem:FireClient(plr, IceCream.ClickDetectors.IceCreamStock)
                        JobRemotes.ShowArrow:FireClient(plr, IceCream.ClickDetectors.IceCreamStock)
                        JobRemotes.ActivateClickDetector:FireClient(plr, IceCream.ClickDetectors.IceCreamStock.ClickDetector, true)

                        local connection2
                        connection2 = IceCream.ClickDetectors.IceCreamStock.ClickDetector.MouseClick:Connect(function(player)
                                if plr.Character:FindFirstChild(""Box"") then
                                        plr.Character:FindFirstChild(""Box""):Destroy()
                                        Animations[plr][""Holding Box""]:Stop()
                                        Animations[plr][""Holding Box""] = nil
                                end
                                JobRemotes.ActivateClickDetector:FireClient(plr, IceCream.ClickDetectors.IceCreamStock.ClickDetector, false)
                                inStock = true
                                JobRemotes.HighlightItem:FireClient(plr)
                                JobRemotes.ShowArrow:FireClient(plr)

                                RoleStocks[plr] = 0
                                connection2:Disconnect()
                        end)
                        table.insert(PlayerConnections[plr], connection2)

                        connection:Disconnect()
                end)

                table.insert(PlayerConnections[plr], connection)

                repeat task.wait()
                        if connection == nil then
                                break
                        end
                until inStock
        end


        if inStock == true then
                JobRemotes.FlavorsTransparency:FireClient(plr, IceCream[""Ice cream shop""].Flavs.Flavors:GetChildren(), RoleStocks[plr] / MaxStock)
                
                
                local CustomerModels = game.ReplicatedStorage.Customers:GetChildren()
                local Customer = CustomerModels[math.random(1, #CustomerModels)]:Clone()
                Customer.Parent = workspace.JobSystem.PlayerCustomers

                for i, v: BasePart in pairs(Customer:GetDescendants()) do
                        if v:IsA(""BasePart"") then
                                v.CollisionGroup = ""Customers"" 
                        end
                end

                local Host = Instance.new(""ObjectValue"", Customer)
                Host.Name = ""Host""
                Host.Value = plr

                local Humanoid: Humanoid = Customer.Humanoid

                local Waypoints = IceCream.Waypoints.FlavorPicker[""FP""..station]

                Customer.HumanoidRootPart.CFrame = Waypoints:FindFirstChild(""1"").CFrame
                CreatePath(Customer, Waypoints:FindFirstChild(""5"").Position)

                local suffix = ListOfCustomerMsgs.Suffix[JobName][math.random(1, #ListOfCustomerMsgs.Suffix[JobName])]

                local CustomerTag = script.CustomerTag:Clone()
                CustomerTag.Parent = Customer.Head

                CustomerTag.Frame.Icon.Image = suffix.Icon

                for i = 1, #IceCream.ClickDetectors.FlavorPicker:GetChildren() do
                        local flavor = IceCream.ClickDetectors.FlavorPicker:FindFirstChild(i)

                        if flavor then
                                local connection
                                JobRemotes.ActivateClickDetector:FireClient(plr, flavor.ClickDetector, true)
                                connection = flavor.ClickDetector.MouseClick:Connect(function(player)
                                        if player ~= plr then return end
                                        
                                        local PHum = plr.Character:WaitForChild(""Humanoid"")
                                        
                                        local Animation = game:GetService(""ReplicatedStorage"").Animations[""Ice Cream""].Picking
                                        local PlayAni = PHum:WaitForChild(""Animator""):LoadAnimation(Animation)
                                        PlayAni:Play()
                                        
                                        connection:Disconnect()
                                        CustomerTag:Destroy()
                                        
                                        if tonumber(i) == tonumber(suffix.Order) then
                                                if Customer:FindFirstChild(""Head"") == nil then return end
                                                ChatService:Chat(Customer:WaitForChild(""Head""), ""Thanks for the Ice Cream 🍦!!"", Enum.ChatColor.White)
                                                IceCreamJob:Pay(plr)

                                                task.wait(1)
                                                Customer:Destroy()
                                                print(""Customer Destroyed1"")

                                                coroutine.wrap(function()
                                                        FlavorPickerAction(table.unpack(pack))
                                                end)()
                                        else
                                                if Customer:FindFirstChild(""Head"") == nil then return end
                                                ChatService:Chat(Customer:WaitForChild(""Head""), ""Ugh, you got my order wrong!!"", Enum.ChatColor.White)

                                                task.wait(1)
                                                Customer:Destroy()
                                                print(""Customer Destroyed2"")

                                                coroutine.wrap(function()
                                                        FlavorPickerAction(table.unpack(pack))
                                                end)()
                                        end
                                        RoleStocks[plr] += 1--ERRRRROOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOORRRRRRRRRRRRR
                                end)

                                table.insert(PlayerConnections[plr], connection)
                        end
                end
        end
end

local MaxStock = 7
function ToppingsPickerAction(...)
        print('Toppings')
        local pack = table.pack(...)
        local JobName = pack[1]
        local EventName = pack[2]
        local plr = pack[3]
        local station = pack[4]
        if not HasJob(plr) then return end

        JobRemotes.ActivateClickDetector:FireClient(plr, IceCream.ClickDetectors.ToppingsStock.ClickDetector, false)

        local inStock = true

        if RoleStocks[plr] >= MaxStock then
                inStock = false
                JobRemotes.ActivateClickDetector:FireClient(plr, IceCream.ClickDetectors.Toppings.ClickDetector, true)
                JobRemotes.ShowArrow:FireClient(plr, IceCream.ClickDetectors.Toppings)
                local connection
                connection = IceCream.ClickDetectors.Toppings.ClickDetector.MouseClick:Connect(function(player)
                        if player ~= plr then return end
                        
                        local PHum = plr.Character:WaitForChild(""Humanoid"")
                        
                        local Animation = game:GetService(""ReplicatedStorage"").Animations[""Ice Cream""].Picking
                        local PlayAni = PHum:WaitForChild(""Animator""):LoadAnimation(Animation)
                        PlayAni:Play()
                        
                        local boxDist = 1

                        local Box = game.ReplicatedStorage.Tools[""Ice Cream""].Box:Clone()
                        Box.Parent = player.Character
                        Box.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, boxDist)

                        local Weld = Instance.new(""Weld"", Box)
                        Weld.Part0 = Box
                        Weld.Part1 = player.Character.HumanoidRootPart
                        Weld.C0 = Box.CFrame:Inverse() * player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, boxDist)

                        local anim = game.ReplicatedStorage.Animations.HoldBox
                        Animations[plr][""Holding Box""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                        Animations[plr][""Holding Box""]:Play()

                        JobRemotes.ShowArrow:FireClient(plr, IceCream.ClickDetectors.ToppingsStock)

                        JobRemotes.ActivateClickDetector:FireClient(plr, IceCream.ClickDetectors.ToppingsStock.ClickDetector, true)

                        local connection2
                        connection2 = IceCream.ClickDetectors.ToppingsStock.ClickDetector.MouseClick:Connect(function(player)
                                if plr.Character:FindFirstChild(""Box"") then
                                        plr.Character:FindFirstChild(""Box""):Destroy()
                                        Animations[plr][""Holding Box""]:Stop()
                                        Animations[plr][""Holding Box""] = nil
                                end
                                inStock = true
                                JobRemotes.ShowArrow:FireClient(plr)
                                JobRemotes.ActivateClickDetector:FireClient(plr, IceCream.ClickDetectors.ToppingsStock.ClickDetector, false)
                                RoleStocks[plr] = 0
                                connection2:Disconnect()
                        end)
                        table.insert(PlayerConnections[plr], connection2)

                        connection:Disconnect()
                end)
                table.insert(PlayerConnections[plr], connection)

                repeat task.wait()
                        if connection == nil then
                                break
                        end
                until inStock
        end

        if inStock == true then
                print(inStock)
                print(RoleStocks[plr])
                local Customer: Model = game.ReplicatedStorage.Customers:GetChildren()
                Customer = Customer[math.random(1, #Customer)]:Clone()
                Customer.Parent = workspace.JobSystem.PlayerCustomers

                for i, v: BasePart in pairs(Customer:GetDescendants()) do
                        if v:IsA(""BasePart"") then
                                v.CollisionGroup = ""Customers"" 
                        end
                end

                local Host = Instance.new(""ObjectValue"", Customer)
                Host.Name = ""Host""
                Host.Value = plr

                local Humanoid: Humanoid = Customer.Humanoid

                local Waypoints = IceCream.Waypoints.ToppingsPicker[""TP""..station]

                Customer.HumanoidRootPart.CFrame = Waypoints:FindFirstChild(""1"").CFrame
                CreatePath(Customer, Waypoints:FindFirstChild(""5"").Position)


                local num = math.random(1, #ListOfCustomerMsgs.Suffix[JobName])
                local suffix = ListOfCustomerMsgs.Suffix[JobName][num]
                local Order = Orders.Clone(Orders.IceCream.Order[num])

                local CustomerTag = script.CustomerTag:Clone()
                CustomerTag.Parent = Customer:WaitForChild('Head')

                CustomerTag.Frame.Icon.Image = suffix.Icon

                local isRunning = true
                local isOnNumber = 1
                local NameOfStage = """"

                for i, v in pairs(IceCream.ClickDetectors.ToppingsPicker:GetChildren()) do
                        local isCorrect = false -- whether it is on the recipe
                        for j, k in pairs(Order.Clicks) do
                                if k.Name == v.Name then
                                        isCorrect = true
                                end
                        end 

                        if not isCorrect then
                                local connection
                                JobRemotes.ActivateClickDetector:FireClient(plr, v.ClickDetector, true)
                                connection = v.ClickDetector.MouseClick:Connect(function(player)
                                        if player ~= plr then return end
                                        if Customer:FindFirstChild('Head') == nil then
                                                return
                                        end

                                        CustomerTag:Destroy()
                                        ChatService:Chat(Customer:WaitForChild('Head'), ""Ugh, you got my order wrong!!"", Enum.ChatColor.White)
                                        connection:Disconnect()
                                        task.wait(1)
                                        Customer:Destroy()

                                        isRunning = false

                                        RoleStocks[plr] += 1
                                        ToppingsPickerAction(table.unpack(pack))
                                end)
                                table.insert(PlayerConnections[plr], connection)
                        end
                end

                for i = 1, #Order.Clicks, 1 do
                        local Stage = Order.Clicks[i]
                        local v = IceCream.ClickDetectors.ToppingsPicker[Stage.Name]
                        local connection

                        if i == 1 then
                                JobRemotes.ShowArrow:FireClient(plr, v)
                        end
                        JobRemotes.ActivateClickDetector:FireClient(plr, v.ClickDetector, true)
                        connection = v.ClickDetector.MouseClick:Connect(function(player)
                                if player ~= plr then return end

                                if i ~= 1 then
                                        local clminus = Order.Clicks[i - 1] -- Current one minus 1 (to go back)
                                        if clminus then
                                                if not clminus.Done then
                                                        isRunning = false
                                                        ToppingsPickerAction(table.unpack(pack))
                                                        connection:Disconnect()
                                                        return
                                                end
                                        end
                                end

                                connection:Disconnect()

                                isOnNumber += 1
                                if i ~= #Order.Clicks then
                                        NameOfStage = Order.Clicks[i+1].Name
                                end
                                print(i)
                                if i == #Order.Clicks then
                                        JobRemotes.ShowArrow:FireClient(plr)
                                        isRunning = false
                                        RoleStocks[plr] += 1
                                        CustomerTag:Destroy()
                                        IceCreamJob:Pay(plr)
                                        if Customer:FindFirstChild('Head') ~= nil then
                                                ChatService:Chat(Customer.Head, ""Thanks for the Ice Cream 🍦!!"", Enum.ChatColor.White)
                                        end

                                        task.wait(1)
                                        Customer:Destroy()
                                        ToppingsPickerAction(table.unpack(pack))
                                end
                                Order.Clicks[i].Done = true
                        end)
                        table.insert(PlayerConnections[plr], connection)
                end

                coroutine.wrap(function()
                        while isRunning do
                                if #PlayerConnections[plr] == 0 then
                                        break
                                end

                                if isOnNumber ~= 1 then
                                        JobRemotes.ShowArrow:FireClient(plr, IceCream.ClickDetectors.ToppingsPicker[NameOfStage])
                                end
                                task.wait()
                        end
                        RoleStocks[plr] += 1
                end)()
        end
end

function QuitJob(...)
        local pack = table.pack(...)
        local JobName = pack[1]
        local EventName = pack[2]
        local plr = pack[3]
        if not HasJob(plr) then return end
        
        JobRemotes.FlavorsTransparency:FireClient(plr, IceCream[""Ice cream shop""].Flavs.Flavors:GetChildren(), 0)

        local pay = 0
        local memo = """"

        if JobName == HallaPizzaJob.JobName then
                -- Paycheck
                pay = HallaPizzaJob:GetPlayerPay(plr)
                memo = ""HP WORKER""

                HallaPizzaJob.RemoveWorker(plr)
                local Registers = HallaPizza.Registers

                -- Reset Registers if they are a Cashier
                if Registers.Register1.Owner.Value == plr then
                        Registers.Register1.Owner.Value = nil
                elseif Registers.Register2.Owner.Value == plr then
                        Registers.Register2.Owner.Value = nil
                end 

                local DM = HallaPizza.ObjectValues.DoughMaker -- Dough Maker Object Values
                local DMC = HallaPizza.ClickDetectors.DoughMaker -- Dough Maker ClickDetectors

                if DM.Table1.Host.Value == plr then
                        DM.Table1.Host.Value = nil
                        JobRemotes.ActivateClickDetector:FireClient(plr, DMC.Table1.ClickDetector, false)
                elseif DM.Table2.Host.Value == plr then
                        DM.Table2.Host.Value = nil
                        JobRemotes.ActivateClickDetector:FireClient(plr, DMC.Table2.ClickDetector, false)
                end

                local PM = HallaPizza.ObjectValues.PizzaMaker -- Pizza Maker Object Values
                local PMC = HallaPizza.ClickDetectors.PizzaMaker -- Pizza Maker ClickDetectors
                local PMI = HallaPizza.PizzaMakerItems

                if PM.Table1.Host.Value == plr then
                        PM.Table1.Host.Value = nil
                        PM.Screen1.Value.GUI.Icon.Image = """"
                        JobRemotes.ActivateClickDetector:FireClient(plr, PMC.Table1.ClickDetector, false)
                        changeModelTranparency(PMI.Pizza1, 1)
                elseif PM.Table2.Host.Value == plr then
                        PM.Table2.Host.Value = nil
                        PM.Screen2.Value.GUI.Icon.Image = """"
                        JobRemotes.ActivateClickDetector:FireClient(plr, PMC.Table2.ClickDetector, false)
                        changeModelTranparency(PMI.Pizza2, 1)
                end

                -- Reset Player Worker Count
                local workers = HallaPizzaJob:GetRoleTotalWorkers(""Cashier"")
                local maxWorkers = HallaPizzaJob:GetRoleMaxWorkers(""Cashier"")
                HallaPizza.ClaimParts.CashRegister.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

                workers = HallaPizzaJob:GetRoleTotalWorkers(""Pizza Runner"")
                maxWorkers = HallaPizzaJob:GetRoleMaxWorkers(""Pizza Runner"")
                HallaPizza.ClaimParts.PizzaRunner.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

                local workers = HallaPizzaJob:GetRoleTotalWorkers(""Dough Maker"")
                local maxWorkers = HallaPizzaJob:GetRoleMaxWorkers(""Dough Maker"")
                HallaPizza.ClaimParts.DoughMaker.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

                local workers = HallaPizzaJob:GetRoleTotalWorkers(""Pizza Maker"")
                local maxWorkers = HallaPizzaJob:GetRoleMaxWorkers(""Pizza Maker"")
                HallaPizza.ClaimParts.PizzaMaker.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers
        elseif JobName == RestaurantJob.JobName then
                -- Paycheck
                pay = RestaurantJob:GetPlayerPay(plr)
                memo = ""Restaurant Worker""

                RestaurantJob.RemoveWorker(plr)

                -- Reset Player Worker Count
                local workers = RestaurantJob:GetRoleTotalWorkers(""Cashier"")
                local maxWorkers = RestaurantJob:GetRoleMaxWorkers(""Cashier"")
                Restaurant.ClaimParts.CashRegister.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

                -- Reset Player Worker Count
                local workers = RestaurantJob:GetRoleTotalWorkers(""Delivery"")
                local maxWorkers = RestaurantJob:GetRoleMaxWorkers(""Delivery"")
                Restaurant.ClaimParts.Delivery.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

                -- Reset Player Worker Count
                local workers = RestaurantJob:GetRoleTotalWorkers(""Dish Washer"")
                local maxWorkers = RestaurantJob:GetRoleMaxWorkers(""Dish Washer"")
                Restaurant.ClaimParts.DishWasher.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

                -- Reset Player Worker Count
                local workers = RestaurantJob:GetRoleTotalWorkers(""Cooker"")
                local maxWorkers = RestaurantJob:GetRoleMaxWorkers(""Cooker"")
                Restaurant.ClaimParts.Cooker.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers
                
                -- Reset Player Worker Count
                local workers = RestaurantJob:GetRoleTotalWorkers(""Chopper"")
                local maxWorkers = RestaurantJob:GetRoleMaxWorkers(""Chopper"")
                Restaurant.ClaimParts.Chopper.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers
        elseif JobName == IceCreamJob.JobName then
                -- Paycheck
                pay = IceCreamJob:GetPlayerPay(plr)
                memo = ""Ice Cream Worker""

                IceCreamJob.RemoveWorker(plr)

                -- Reset Player Worker Count
                local workers = IceCreamJob:GetRoleTotalWorkers(""Flavor Picker"")
                local maxWorkers = IceCreamJob:GetRoleMaxWorkers(""Flavor Picker"")
                IceCream.ClaimParts.FlavorPicker.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

                -- Reset Player Worker Count
                local workers = IceCreamJob:GetRoleTotalWorkers(""Toppings Picker"")
                local maxWorkers = IceCreamJob:GetRoleMaxWorkers(""Toppings Picker"")
                IceCream.ClaimParts.ToppingsPicker.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

                -- Reset Player Worker Count
                local workers = IceCreamJob:GetRoleTotalWorkers(""Cashier"")
                local maxWorkers = IceCreamJob:GetRoleMaxWorkers(""Cashier"")
                IceCream.ClaimParts.CashRegister.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers
        end
        for i, v:ProximityPrompt in pairs(workspace.JobSystem[JobName].ClaimParts:GetDescendants()) do
                if v:IsA(""ProximityPrompt"") then
                        JobRemotes.ActivatePrompt:FireClient(plr, v, true)
                end
        end
        local CanReceivePay = true
        if pay > 0 then
                JobRemotes.ShowPaycheck:FireClient(plr, pay, memo)
                JobRemotes.GivePaycheck.OnServerEvent:Connect(function(player)
                        if CanReceivePay == true then
                                CanReceivePay = false
                                player.leaderstats:FindFirstChild(""Hallabucks"").Value += pay
                        end
                        
                end)
        end

        -- Disconnect all RBX Events
        for i, v in pairs(PlayerConnections[plr]) do
                v:Disconnect()
                PlayerConnections[plr][i] = nil
        end

        RoleStocks[plr] = 0

        -- Destroy all Player Customers owned by this player
        for i, v in pairs(workspace.JobSystem.PlayerCustomers:GetChildren()) do
                if v:FindFirstChild(""Host"") then
                        if v:FindFirstChild(""Host"").Value == plr then
                                v:Destroy()
                        end
                end
        end

        -- Stop showing an arrow
        JobRemotes.ShowArrow:FireClient(plr)

        plr.PlayerGui.CashierGui.Adornee = nil
        plr.PlayerGui.CashierGui2.Adornee = nil

        if plr.Character:FindFirstChild(""Box"") then
                plr.Character:FindFirstChild(""Box""):Destroy()
                Animations[plr][""Holding Box""]:Stop()
                Animations[plr][""Holding Box""] = nil
        end

        for i, v in pairs(workspace.JobSystem:GetDescendants()) do
                if v:IsA(""ClickDetector"") then
                        JobRemotes.ActivateClickDetector:FireClient(plr, v, false)
                end
        end

        plr.Character.Humanoid.WalkSpeed = game.StarterPlayer.CharacterWalkSpeed
        plr.Character.Humanoid.JumpPower = game.StarterPlayer.CharacterJumpPower

        JobRemotes.ShowFrames:FireClient(plr, false)

        if plr.Character:FindFirstChildWhichIsA(""Folder"") then
                task.spawn(function()
                        plr.Character:FindFirstChildWhichIsA(""Folder""):Destroy()
                end)
        end
end

-- Create Events
-- HallaPizza
HallaPizzaJob:CreateEvent(""StartJob"", StartJob)
HallaPizzaJob:CreateEvent(""QuitJob"", QuitJob)
HallaPizzaJob:CreateRoleAction(""Cashier"", ""Cashier Customer"", CashierCustomerAction)
HallaPizzaJob:CreateRoleAction(""Pizza Runner"", ""PR Customer"", CustomerAction2)
HallaPizzaJob:CreateRoleAction(""Dough Maker"", ""Dough Maker Action"", DoughMakerAction)
HallaPizzaJob:CreateRoleAction(""Pizza Maker"", ""Pizza Maker Action"", PizzaMakerAction)

-- Restaurant
RestaurantJob:CreateEvent(""StartJob"", StartJob)
--RestaurantJob:CreateEvent(""ChangeRole"", ChangeRole)
RestaurantJob:CreateEvent(""QuitJob"", QuitJob)
RestaurantJob:CreateRoleAction(""Cashier"", ""Cashier Customer"", CashierCustomerAction)
RestaurantJob:CreateRoleAction(""Delivery"", ""CustomerAction2"", CustomerAction2)
RestaurantJob:CreateRoleAction(""Dish Washer"", ""Dish Washer Action"", DishWasherAction)
RestaurantJob:CreateRoleAction(""Cooker"", ""Cooker Action"", CookerAction)
RestaurantJob:CreateRoleAction(""Chopper"", ""Chopper Action"", ChopperAction)


-- Ice Cream
IceCreamJob:CreateEvent(""StartJob"", StartJob)
--IceCreamJob:CreateEvent(""ChangeRole"", ChangeRole)
IceCreamJob:CreateEvent(""QuitJob"", QuitJob)
IceCreamJob:CreateRoleAction(""Cashier"", ""Cashier Customer"", CashierCustomerAction)
IceCreamJob:CreateRoleAction(""Flavor Picker"", ""Flavor Picker Action"", FlavorPickerAction)
IceCreamJob:CreateRoleAction(""Toppings Picker"", ""Toppings Picker Action"", ToppingsPickerAction)

---------------------------------------------------------------
-- Prompt Events
---------------------------------------------------------------

---------------------- HallaPizza -----------------------------

HallaPizza.EndShift.Touched:Connect(function(hit)
        local player = game.Players:GetPlayerFromCharacter(hit.Parent)
        if player then
                HallaPizzaJob:FireEvent(""QuitJob"", player)
        end
end)

-- Cashier -----------------------------------------------------

local Registers = HallaPizza.Registers
HallaPizza.ClaimParts.CashRegister.ProximityPrompt.Triggered:Connect(function(player)
        HallaPizzaJob:FireEvent(""StartJob"", player, ""Cashier"")
        if Registers.Register1.Owner.Value == nil then
                Registers.Register1.Owner.Value = player
        elseif Registers.Register2.Owner.Value == nil then
                Registers.Register2.Owner.Value = player
        end 
        local workers = HallaPizzaJob:GetRoleTotalWorkers(""Cashier"")
        local maxWorkers = HallaPizzaJob:GetRoleMaxWorkers(""Cashier"")
        HallaPizza.ClaimParts.CashRegister.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers
        HallaPizzaJob:FireRoleAction(""Cashier"", ""Cashier Customer"", player)
end)

-- Pizza Runner -----------------------------------------------

HallaPizza.ClaimParts.PizzaRunner.ProximityPrompt.Triggered:Connect(function(player)
        HallaPizzaJob:FireEvent(""StartJob"", player, ""Pizza Runner"")

        local workers = HallaPizzaJob:GetRoleTotalWorkers(""Pizza Runner"")
        local maxWorkers = HallaPizzaJob:GetRoleMaxWorkers(""Pizza Runner"")
        HallaPizza.ClaimParts.PizzaRunner.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

        HallaPizzaJob:FireRoleAction(""Pizza Runner"", ""PR Customer"", player)
end)


-- Dough Maker -----------------------------------------------

HallaPizza.ClaimParts.DoughMaker.ProximityPrompt.Triggered:Connect(function(player)
        HallaPizzaJob:FireEvent(""StartJob"", player, ""Dough Maker"")

        local workers = HallaPizzaJob:GetRoleTotalWorkers(""Dough Maker"")
        local maxWorkers = HallaPizzaJob:GetRoleMaxWorkers(""Dough Maker"")
        HallaPizza.ClaimParts.DoughMaker.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

        local DM = HallaPizza.ObjectValues.DoughMaker -- Dough Maker Object Values
        if DM.Table1.Host.Value ~= nil then
                DM.Table1.Host.Value = player
        elseif DM.Table2.Host.Value ~= nil then
                DM.Table2.Host.Value = player
        end

        HallaPizzaJob:FireRoleAction(""Dough Maker"", ""Dough Maker Action"", player, HallaPizzaJob:GetRoleTotalWorkers(""Dough Maker""))
end)

-- Pizza Maker -----------------------------------------------

HallaPizza.ClaimParts.PizzaMaker.ProximityPrompt.Triggered:Connect(function(player)
        HallaPizzaJob:FireEvent(""StartJob"", player, ""Pizza Maker"")

        local workers = HallaPizzaJob:GetRoleTotalWorkers(""Pizza Maker"")
        local maxWorkers = HallaPizzaJob:GetRoleMaxWorkers(""Pizza Maker"")
        HallaPizza.ClaimParts.PizzaMaker.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

        local PM = HallaPizza.ObjectValues.PizzaMaker -- Dough Maker Object Values
        if PM.Table1.Host.Value == nil then
                PM.Table1.Host.Value = player
        elseif PM.Table2.Host.Value == nil then
                PM.Table2.Host.Value = player
        end

        HallaPizzaJob:FireRoleAction(""Pizza Maker"", ""Pizza Maker Action"", player, HallaPizzaJob:GetRoleTotalWorkers(""Pizza Maker""))
end)

---------------------- Restaurant -----------------------------

Restaurant.EndShift.Touched:Connect(function(hit)
        local player = game.Players:GetPlayerFromCharacter(hit.Parent)
        if player then
                RestaurantJob:FireEvent(""QuitJob"", player)
        end
end)

-- Cashier -----------------------------------------------------

local Registers = Restaurant.Registers
Restaurant.ClaimParts.CashRegister.ProximityPrompt.Triggered:Connect(function(player)
        RestaurantJob:FireEvent(""StartJob"", player, ""Cashier"")
        if Registers.Register1.Owner.Value == nil then
                Registers.Register1.Owner.Value = player
        elseif Registers.Register2.Owner.Value == nil then
                Registers.Register2.Owner.Value = player
        end 
        local workers = RestaurantJob:GetRoleTotalWorkers(""Cashier"")
        local maxWorkers = RestaurantJob:GetRoleMaxWorkers(""Cashier"")
        Restaurant.ClaimParts.CashRegister.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers
        RestaurantJob:FireRoleAction(""Cashier"", ""Cashier Customer"", player)
end)

-- Delivery -----------------------------------------------

Restaurant.ClaimParts.Delivery.ProximityPrompt.Triggered:Connect(function(player)
        RestaurantJob:FireEvent(""StartJob"", player, ""Delivery"")

        local workers = RestaurantJob:GetRoleTotalWorkers(""Delivery"")
        local maxWorkers = RestaurantJob:GetRoleMaxWorkers(""Delivery"")
        Restaurant.ClaimParts.Delivery.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

        RestaurantJob:FireRoleAction(""Delivery"", ""CustomerAction2"", player)
end)

-- Dish Washer -----------------------------------------------

Restaurant.ClaimParts.DishWasher.ProximityPrompt.Triggered:Connect(function(player)
        RestaurantJob:FireEvent(""StartJob"", player, ""Dish Washer"")

        local workers = RestaurantJob:GetRoleTotalWorkers(""Dish Washer"")
        local maxWorkers = RestaurantJob:GetRoleMaxWorkers(""Dish Washer"")
        Restaurant.ClaimParts.DishWasher.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

        RestaurantJob:FireRoleAction(""Dish Washer"", ""Dish Washer Action"", player, RestaurantJob:GetRoleTotalWorkers(""Dish Washer""))
end)

-- Cooker -----------------------------------------------


Restaurant.ClaimParts.Cooker.ProximityPrompt.Triggered:Connect(function(player)
        RestaurantJob:FireEvent(""StartJob"", player, ""Cooker"")

        local workers = RestaurantJob:GetRoleTotalWorkers(""Cooker"")
        local maxWorkers = RestaurantJob:GetRoleMaxWorkers(""Cooker"")
        Restaurant.ClaimParts.Cooker.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

        RestaurantJob:FireRoleAction(""Cooker"", ""Cooker Action"", player)
end)

-- Chopper -----------------------------------------------

Restaurant.ClaimParts.Chopper.ProximityPrompt.Triggered:Connect(function(player)
        RestaurantJob:FireEvent(""StartJob"", player, ""Chopper"")

        local workers = RestaurantJob:GetRoleTotalWorkers(""Chopper"")
        local maxWorkers = RestaurantJob:GetRoleMaxWorkers(""Chopper"")
        Restaurant.ClaimParts.Chopper.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers

        RestaurantJob:FireRoleAction(""Chopper"", ""Chopper Action"", player, RestaurantJob:GetRoleTotalWorkers(""Chopper""))
end)

---------------------- Ice Cream Shop -----------------------------

IceCream.EndShift.Touched:Connect(function(hit)
        local player = game.Players:GetPlayerFromCharacter(hit.Parent)
        if player then
                IceCreamJob:FireEvent(""QuitJob"", player)
        end
end)

-- Cashier -----------------------------------------------------

local Registers = IceCream.Registers
IceCream.ClaimParts.CashRegister.ProximityPrompt.Triggered:Connect(function(player)
        IceCreamJob:FireEvent(""StartJob"", player, ""Cashier"")
        if Registers.Register1.Owner.Value == nil then
                Registers.Register1.Owner.Value = player
        elseif Registers.Register2.Owner.Value == nil then
                Registers.Register2.Owner.Value = player
        end 
        local workers = IceCreamJob:GetRoleTotalWorkers(""Cashier"")
        local maxWorkers = IceCreamJob:GetRoleMaxWorkers(""Cashier"")
        IceCream.ClaimParts.CashRegister.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers
        IceCreamJob:FireRoleAction(""Cashier"", ""Cashier Customer"", player)
end)

IceCream.ClaimParts.FlavorPicker.ProximityPrompt.Triggered:Connect(function(player)
        IceCreamJob:FireEvent(""StartJob"", player, ""Flavor Picker"")

        local workers = IceCreamJob:GetRoleTotalWorkers(""Flavor Picker"")
        local maxWorkers = IceCreamJob:GetRoleMaxWorkers(""Flavor Picker"")
        IceCream.ClaimParts.FlavorPicker.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers
        IceCreamJob:FireRoleAction(""Flavor Picker"", ""Flavor Picker Action"", player, IceCreamJob:GetRoleTotalWorkers(""Flavor Picker""))
end)

IceCream.ClaimParts.ToppingsPicker.ProximityPrompt.Triggered:Connect(function(player)
        IceCreamJob:FireEvent(""StartJob"", player, ""Toppings Picker"")

        local workers = IceCreamJob:GetRoleTotalWorkers(""Toppings Picker"")
        local maxWorkers = IceCreamJob:GetRoleMaxWorkers(""Toppings Picker"")
        IceCream.ClaimParts.ToppingsPicker.BillboardGui.TextLabel.Text = workers .. ""/"" .. maxWorkers
        IceCreamJob:FireRoleAction(""Toppings Picker"", ""Toppings Picker Action"", player, IceCreamJob:GetRoleTotalWorkers(""Toppings Picker""))
end)

---------------------------------------------------------------
-- ClickDetector Events
---------------------------------------------------------------

for i, v in pairs(HallaPizza.ClickDetectors.Pizza:GetChildren()) do
        if v:IsA(""BasePart"") then
                local clickDetector: ClickDetector = v:FindFirstChild(""ClickDetector"")

                if clickDetector then
                        clickDetector.MouseClick:Connect(function(player)
                                if HallaPizzaJob:IsRoleWorker(""Pizza Runner"", player) then
                                        local tool = game.ReplicatedStorage.Tools.HallaPizza.Pizza:FindFirstChild(v.Name)
                                        local anim = game.ReplicatedStorage.Animations.HallaPizza.HoldPizza

                                        if tool and anim then
                                                tool = tool:Clone()
                                                tool.Parent = player.Character

                                                tool.Handle.CFrame *= CFrame.new(0, 0, 2)

                                                local Weld = Instance.new(""Weld"", tool.Handle)
                                                Weld.Part0 = tool.Handle
                                                Weld.Part1 = player.Character.RightHand
                                                Weld.C0 = tool.Handle.CFrame:Inverse() * player.Character.RightHand.CFrame * CFrame.Angles(math.rad(180), 0, 0)

                                                Animations[player][""Holding Pizza""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                                                Animations[player][""Holding Pizza""]:Play()
                                        end
                                end
                        end)
                end
        end
end

for i, v in pairs(Restaurant.ClickDetectors.Meals:GetChildren()) do
        if v:IsA(""BasePart"") then
                local clickDetector: ClickDetector = v:FindFirstChild(""ClickDetector"")

                if clickDetector then
                        clickDetector.MouseClick:Connect(function(player)
                                if RestaurantJob:IsRoleWorker(""Delivery"", player) then
                                        local tool = game.ReplicatedStorage.Tools.Restaurant.Meals:FindFirstChild(v.Name)
                                        print(v.Name)
                                        print(tool)
                                        local anim = game.ReplicatedStorage.Animations.Restaurant.HoldMeal

                                        if tool and anim then
                                                tool = tool:Clone()
                                                tool.Parent = player.Character
                                                tool.Handle.CFrame *= CFrame.new(0, 0, 2)

                                                local Weld = Instance.new(""Weld"", tool.Handle)
                                                Weld.Part0 = tool.Handle
                                                Weld.Part1 = player.Character.RightHand
                                                Weld.C0 = tool.Handle.CFrame:Inverse() * player.Character.RightHand.CFrame * CFrame.Angles(math.rad(30), 0, 0) * CFrame.new(0, 0.5, 1)

                                                Animations[player][""Holding Plate""] = player.Character.Humanoid.Animator:LoadAnimation(anim)
                                                Animations[player][""Holding Plate""]:Play()
                                        end
                                end
                        end)
                end
        end
end

JobRemotes.QuitJob.OnServerEvent:Connect(function(player)
        if HallaPizzaJob:IsWorker(player) then
                HallaPizzaJob:FireEvent(""QuitJob"", player)
        end
        if RestaurantJob:IsWorker(player) then
                RestaurantJob:FireEvent(""QuitJob"", player)
        end
        if IceCreamJob:IsWorker(player) then
                IceCreamJob:FireEvent(""QuitJob"", player)
        end
end)

game[""Run Service""].Heartbeat:Connect(function()
        game[""Run Service""].Heartbeat:Wait()
        for i, v in pairs(game.Players:GetChildren()) do
                local player = v
                local Pay = 0
                local IsWorker = false
                if HallaPizzaJob:IsWorker(player) then
                        Pay = HallaPizzaJob:GetPlayerPay(player)
                        IsWorker = true
                end
                if RestaurantJob:IsWorker(player) then
                        Pay = RestaurantJob:GetPlayerPay(player)
                        IsWorker = true
                end
                if IceCreamJob:IsWorker(player) then
                        Pay = IceCreamJob:GetPlayerPay(player)
                        IsWorker = true
                end

                if IsWorker then
                        JobRemotes.ShowStats:FireClient(player, Pay)
                end
        end
end)"
ujfqPUqA,AOC23D10P1.py,avltree9798,Python,Sunday 10th of December 2023 10:17:36 AM CDT,"import sys

def parse_input(input_file):
    with open(input_file, 'r') as f:
        contents = f.read().split('\n')
        return [list(c) for c in contents]

def create_node(row, col, counter, direction):    
    return {
        'row'        : row,
        'col'        : col,
        'counter'    : counter,
        'direction'  : direction
    }

def bfs(queue, visited_nodes, map, height, width):
    current_node = None
    blocklist = set(['.'])
    pieces = {
        '|': {
            'south': {'row': -1, 'col': 0},
            'north': {'row': 1, 'col': 0}
        },
        '-': {
            'east': {'row': 0, 'col': -1},
            'west': {'row': 0, 'col': 1}
        },
        'L': {
            'east': {'row': -1, 'col': 0}, 
            'north': {'row': 0, 'col': +1}
        },
        'J': {
            'west': {'row': -1, 'col': 0},
            'north': {'row': 0, 'col': -1}
        },
        '7': {
            'west': {'row': +1, 'col': 0},
            'south': {'row': 0, 'col': -1}
        },
        'F': {
            'east': {'row': +1, 'col': 0},
            'south': {'row': 0, 'col': 1}
        }
    }
    while len(queue):
        current_node = queue.pop(0)
        row = current_node.get('row')
        col = current_node.get('col')
        node_position = (row, col)
        if node_position in visited_nodes:
            continue
        visited_nodes.add(node_position)
        counter = current_node.get('counter') + 1
        direction = current_node.get('direction')
        if direction is None:
            can_visit_west = True if col > 0 else False
            can_visit_east = True if col < width -1 else False
            can_visit_north = True if row > 0 else False
            can_visit_south = True if row < height -1 else False
            horizontal_blocklist = set(['|', '.'])
            if can_visit_west and map[row][col-1] not in horizontal_blocklist:
                node = create_node(row, col-1, counter, 'east')
                queue.append(node)
            if can_visit_north and map[row-1][col] not in blocklist:
                node = create_node(row-1, col, counter, 'south')
                queue.append(node)
            if can_visit_east and map[row][col+1] not in horizontal_blocklist:
                node = create_node(row, col+1, counter, 'west')
                queue.append(node)
            if can_visit_south and map[row+1][col] not in blocklist:
                node = create_node(row+1, col, counter, 'north')
                queue.append(node)
            continue
        piece = map[current_node.get('row')][current_node.get('col')]
        if piece in blocklist:
            continue
        movement = pieces[piece][direction]
        new_direction = 'west'
        if movement.get('row') == -1:
            new_direction = 'south'
        if movement.get('row') == 1:
            new_direction = 'north'
        if movement.get('col') == -1:
            new_direction = 'east'
        new_row = row+movement.get('row') 
        new_col = col+movement.get('col')
        if new_row < 0 or new_col < 0:
            continue
        queue.append(create_node(new_row, new_col, counter, new_direction))

    return current_node

def main(input_file):
    map = parse_input(input_file)
    start_pos = None
    queue = []
    visited_nodes = set()
    height = len(map)
    width = len(map[0])
    for row in range(height):
        if start_pos is not None:
            break
        for col in range(width):
            if map[row][col] == 'S':
                start_pos = create_node(row, col, -1, None)
                break
    queue.append(start_pos)
    last_node = bfs(queue, visited_nodes, map, height, width)
    print(last_node.get('counter'))

if __name__ == '__main__':
    input_file = 'input.txt'
    if len(sys.argv) == 2:
        input_file = sys.argv[1]
    main(input_file)
"
YDhWzuDC,referer recursive,kamiram,PL/SQL,Sunday 10th of December 2023 10:15:35 AM CDT,"drop function if exists get_referers(param_user_id bigint, param_user_bm_id smallint) cascade;
create function get_referers(param_user_id bigint, param_user_bm_id smallint) 
returns table  (
        refere_id bigint,
        referer_level integer
)  
as $end$
    begin
		return query with recursive tree as (
			select 
				users.referer_id as referer_id, 
				(
					select count(*) % 5 + 1 
					from user_bms 
					where 
						user_bms.user_id=users.referer_id 
					and 
						user_bms.bm_id=param_user_bm_id
				)::integer as referer_level
 			from users
			where users.user_id = param_user_id
			
			union
			
			select 
				users.referer_id as referer_id, 
				(
					select count(*) % 5 + 1 
					from user_bms 
					where 
						user_bms.user_id=users.referer_id 
					and 
						user_bms.bm_id=param_user_bm_id
				)::integer as referer_level
				
		    from users
		    left join user_bms  
		    	on user_bms.user_id = users.user_id and user_bms.bm_id = param_user_bm_id
		    join tree
		        on tree.referer_id = users.user_id  and users.user_id != users.referer_id  
			)
			select * from tree;
    end;
$end$ 
language plpgsql;


select * from get_referers(1122::bigint, 1::smallint);

"
EHWuB85H,Untitled,sissou123,Python,Sunday 10th of December 2023 09:54:49 AM CDT,"Learn Python Programming Masterclass
This Python For Beginners Course Teaches You The Python Language Fast. Includes Python Online Training With Python 3 
for more:https://dz4link.com/MtcR218x

"
dhDEjSNg,Untitled,Kaedys,XML,Sunday 10th of December 2023 09:07:26 AM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<Patch>
  <Operation Class=""PatchOperationAttributeSet"">
    <xpath>/Defs/ThingDef[@Name = ""ShelfBase""]</xpath>
    <attribute>ParentName</attribute>
    <value>FurnitureBase</value>
  </Operation>

  <Operation Class=""PatchOperationFindMod"">
    <mods>
      <li>LWM's Deep Storage</li>
    </mods>

    <match Class=""PatchOperationRemove"">
      <xpath>Defs/ThingDef[@ParentName=""LWM_DeepStorage"" and ./comps/li[compClass=""CompQuality""]]/comps/li[compClass=""CompQuality""]</xpath>
    </match>
  </Operation>
</Patch>"
MHTgtWR2,AoC 2023 day 10,mosredna,JavaScript,Sunday 10th of December 2023 09:07:16 AM CDT,"const fs = require(""fs"")
const performance = require(""perf_hooks"").performance
const eol = require(""os"").EOL

let startTime = performance.now()
let part1 = 0
let part2 = 0
let input = fs.readFileSync(__dirname + ""/data.txt"", ""utf8"").split(eol)

let pos = { x: 0, y: 0, type: ""J"" } // My startNode, might be different for other map
let map = input.map((val, i) => {
    let row = val.split("""")
    let sPos = row.indexOf(""S"")
    if (sPos > -1) {
        pos.x = sPos
        pos.y = i
    }
    row[sPos] = pos.type
    return row
})

const topN = ""|JL""
const leftN = ""-7J""
const bottomN = ""|7F""
const rightN = ""-LF""

const visited = new Set()

function getNext(pos) {
    if (topN.includes(pos.type) && !visited.has(`${pos.x}-${pos.y - 1}`))
        return { x: pos.x, y: pos.y - 1, type: map[pos.y - 1][pos.x] }
    if (leftN.includes(pos.type) && !visited.has(`${pos.x - 1}-${pos.y}`))
        return { x: pos.x - 1, y: pos.y, type: map[pos.y][pos.x - 1] }
    if (bottomN.includes(pos.type) && !visited.has(`${pos.x}-${pos.y + 1}`))
        return { x: pos.x, y: pos.y + 1, type: map[pos.y + 1][pos.x] }
    if (rightN.includes(pos.type) && !visited.has(`${pos.x + 1}-${pos.y}`))
        return { x: pos.x + 1, y: pos.y, type: map[pos.y][pos.x + 1] }
}

while (true) {
    visited.add(`${pos.x}-${pos.y}`)
    pos = getNext(pos)
    if (pos == undefined) break
}

part1 = visited.size / 2

const substringsToCount = [""\\|"", ""L7"", ""FJ""]
const pattern = new RegExp(substringsToCount.join(""|""), ""g"")
function countSubstrings(inputString) {
    const matches = inputString.match(pattern)
    return matches ? matches.length : 0
}

map.forEach((row, y) => {
    let rowM = """"
    row.forEach((element, x) => {
        let poly = visited.has(`${x}-${y}`)
        if (poly) {
            if (element != ""-"") rowM += element
        }
        if (!poly && countSubstrings(rowM) & 1) {
            part2++
        }
    })
})

let endTime = performance.now() - startTime
console.log(`Part 1: ${part1}\nPart 2: ${part2}\nTimer: ${endTime} ms`)
"
taEyMjtj,Untitled,sissou123,Python,Sunday 10th of December 2023 08:59:59 AM CDT,"The Complete Python Bootcamp From Zero to Hero in Python
Learn Python like a Professional Start from the basics and go all the way to creating your own applications and games 
for more:https://dz-linkk.com/vvrMYT
"
Af7RAUfw,Untitled,sissou123,Python,Sunday 10th of December 2023 08:55:16 AM CDT,"Learn Python Programming - Beginner to Master
Become a Python Expert. for Both Academics and Industry. 100+ Challenges 
for more:https://dz4link.com/RuIhpn9J
"
0uEmjyub,form-kuisioner-act.php,Rachmannh,PHP,Sunday 10th of December 2023 08:34:45 AM CDT,"<?php
require_once ""koneksi.php""; // Ubah ini sesuai dengan file koneksi yang Anda gunakan

// Memproses form jika metode POST digunakan
if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
    // Ambil data dari formulir
    $user_id = $_POST['user_id'];
    $total_nilai = 0;
    $nilai_pertanyaan = array();

    // Loop melalui data penilaian
    foreach ($_POST as $key => $value) {
        if (strpos($key, 'nilai_') === 0) {
            $id_pertanyaan = substr($key, strlen('nilai_'));
            $nilai_pertanyaan[$id_pertanyaan] = $value;
            $total_nilai += intval($value);
        }
    }

    // Kalikan total nilai dengan 2
    $total_nilai *= 2;

    // Tentukan keterangan nilai berdasarkan rentang nilai
    if ($total_nilai >= 10 && $total_nilai <= 29) {
        $keterangan_nilai = ""Sangat Kurang"";
    } elseif ($total_nilai >= 30 && $total_nilai <= 49) {
        $keterangan_nilai = ""Kurang"";
    } elseif ($total_nilai >= 50 && $total_nilai <= 69) {
        $keterangan_nilai = ""Standar"";
    } elseif ($total_nilai >= 70 && $total_nilai <= 89) {
        $keterangan_nilai = ""Baik"";
    } elseif ($total_nilai >= 90 && $total_nilai <= 100) {
        $keterangan_nilai = ""Sangat Baik"";
    } else {
        $keterangan_nilai = ""Tidak Diketahui"";
    }

    // Simpan data ke tabel hasil
    $queryInsert = ""INSERT INTO hasil (user_id, total_nilai, keterangan_nilai) VALUES ('$user_id', '$total_nilai', '$keterangan_nilai')"";
    $resultInsert = mysqli_query($con, $queryInsert);

    if ($resultInsert) {
        $lastInsertId = mysqli_insert_id($con);

        // Tampilkan alert bawaan JavaScript
        echo '<script>
                alert(""Data penilaian berhasil disimpan."");
                window.location.href = ""index.php"";
              </script>';
    } else {
        echo ""Error: Data penilaian gagal disimpan."";
    }

    // Tutup koneksi database jika diperlukan
    mysqli_close($con);
}
"
hZ8mAA4L,form-kuisioner-content.php,Rachmannh,PHP,Sunday 10th of December 2023 08:34:24 AM CDT,"<div class=""container-fluid"">
    <h1 class=""h3 mb-2 text-gray-800"">Form Penilaian Karyawan</h1>
    <div class=""card shadow mb-4"">
        <div class=""card-body"">
            <form action=""form-kuisioner-act.php"" method=""POST"">
                <div class=""form-group"">
                    <label for=""karyawan"">Nama Karyawan yang akan dinilai</label>
                    <select class=""custom-select"" name=""user_id"">
                        <option selected disabled>===PILIH KARYAWAN===</option>
                        <?php
                        foreach ($allKaryawan as $karyawan) {
                            echo '<option value=""' . $karyawan['id_users'] . '"">' . $karyawan['nama_users'] . '</option>';
                        }
                        ?>
                    </select>
                </div>

                <?php foreach ($pertanyaan as $row) : ?>
                    <div class=""form-group"">
                        <label for=""nilai_<?php echo $row['id_pertanyaan']; ?>""><?php echo $row['pertanyaan']; ?></label>
                        <select class=""custom-select"" name=""nilai_<?php echo $row['id_pertanyaan']; ?>"">
                            <option selected>===Berikan Nilai===</option>
                            <option value=""1"">Sangat Kurang</option>
                            <option value=""2"">Kurang</option>
                            <option value=""3"">Standar</option>
                            <option value=""4"">Baik</option>
                            <option value=""5"">Sangat Baik</option>
                        </select>
                    </div>
                <?php endforeach; ?>

                <button class=""btn btn-primary w-100"" type=""submit"">Submit</button>
            </form>
        </div>
    </div>
</div>"
D0Qed7Ze,form-kuisioner.php,Rachmannh,PHP,Sunday 10th of December 2023 08:33:58 AM CDT,"<?php
session_start();
include './partials/logic.php';

// cek apakah yang mengakses halaman ini sudah login
if ($_SESSION['role'] == """") {
    header(""location: index.php?pesan=gagal"");
}

// mengambil data user dari database berdasarkan email yang tersimpan di session
$username = $_SESSION['username'];
$result = mysqli_query($con, ""SELECT nama_users FROM users WHERE username='$username'"");

// cek apakah query berhasil dijalankan dan data ditemukan
if ($result && mysqli_num_rows($result) > 0) {
    $row = mysqli_fetch_assoc($result);
    $nama_users = $row['nama_users'];
} else {
    $nama_users = ""Unknown"";
}

$allKaryawan = query(""SELECT nama_users, id_users FROM users WHERE role = 'karyawan'"");

$pertanyaan = query(""SELECT * FROM pertanyaan ORDER BY id_pertanyaan"")
?>
<!DOCTYPE html>
<html lang=""en"">

<head>
    <?php
    include './partials/head.php'
    ?>
</head>

<body id=""page-top"">
    <!-- Page Wrapper -->
    <div id=""wrapper"">
        <!-- Sidebar -->
        <?php
        include './partials/sidebar.php'
        ?>
        <!-- End of Sidebar -->

        <!-- Content Wrapper -->
        <div id=""content-wrapper"" class=""d-flex flex-column"">
            <!-- Main Content -->
            <div id=""content"">
                <!-- Topbar -->
                <?php
                include './partials/topbar.php'
                ?>
                <!-- End of Topbar -->

                <!-- Begin Page Content -->
                <?php
                include './partials/form-kuisioner-content.php'
                ?>
                <!-- /.container-fluid -->
            </div>
            <!-- End of Main Content -->

            <!-- Footer -->
            <?php
            include './partials/footer.php'
            ?>
            <!-- End of Footer -->
        </div>
        <!-- End of Content Wrapper -->
    </div>
    <!-- End of Page Wrapper -->

    <!-- Scroll to Top Button-->
    <a class=""scroll-to-top rounded"" href=""#page-top"">
        <i class=""fas fa-angle-up""></i>
    </a>

    <?php
    include './partials/logout_modal.php'
    ?>

    <?php
    include './partials/script.php'
    ?>

</html>"
Njy8H2YP,News Dec10 23,Newscaster_Ned,Email,Sunday 10th of December 2023 08:30:18 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

W‎e‎l‎l‎ ‎I‎ ‎h‎a‎v‎e‎ ‎s‎o‎m‎e‎ ‎b‎a‎d‎ ‎n‎e‎w‎s‎.‎ ‎T‎h‎a‎t‎ ‎s‎t‎u‎p‎i‎d‎ ‎m‎o‎n‎k‎e‎y‎ ‎D‎r‎.‎ ‎N‎i‎g‎g‎e‎r‎ ‎P‎e‎n‎i‎s‎ ‎d‎i‎e‎d‎ ‎i‎n‎ ‎a‎ ‎c‎a‎r‎ ‎c‎r‎a‎s‎h‎.‎.‎.‎ ‎O‎r‎ ‎a‎t‎ ‎l‎e‎a‎s‎t‎ ‎t‎h‎a‎t‎'‎s‎ ‎w‎h‎a‎t‎ ‎I‎ ‎w‎a‎s‎ ‎f‎a‎n‎t‎a‎s‎i‎z‎i‎n‎g‎ ‎a‎b‎o‎u‎t‎.‎.‎.‎ ‎A‎n‎y‎w‎a‎y‎,‎ ‎h‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎.‎

S‎o‎u‎t‎h‎ ‎A‎f‎r‎i‎c‎a‎ ‎C‎a‎n‎c‎e‎l‎s‎ ‎H‎a‎n‎u‎k‎k‎a‎h‎ ‎C‎e‎l‎e‎b‎r‎a‎t‎i‎o‎n‎s‎,‎ ‎W‎e‎l‎c‎o‎m‎e‎s‎ ‎H‎a‎m‎a‎s‎ ‎V‎i‎s‎i‎t‎
R‎y‎a‎n‎ ‎O‎'‎N‎e‎a‎l‎'‎s‎ ‎D‎a‎u‎g‎h‎t‎e‎r‎ ‎T‎a‎t‎u‎m‎ ‎M‎o‎u‎r‎n‎s‎ ‎H‎i‎s‎ ‎D‎e‎a‎t‎h‎:‎ ‎'‎I‎'‎l‎l‎ ‎M‎i‎s‎s‎ ‎H‎i‎m‎ ‎F‎o‎r‎e‎v‎e‎r‎'‎
L‎.‎A‎.‎ ‎M‎a‎y‎o‎r‎ ‎K‎a‎r‎e‎n‎ ‎B‎a‎s‎s‎ ‎S‎i‎l‎e‎n‎t‎ ‎o‎n‎ ‎A‎n‎t‎i‎s‎e‎m‎i‎t‎i‎c‎ ‎M‎o‎b‎,‎ ‎T‎w‎o‎ ‎D‎a‎y‎s‎ ‎L‎a‎t‎e‎r‎
I‎s‎r‎a‎e‎l‎ ‎C‎o‎n‎f‎i‎r‎m‎s‎ ‎M‎o‎s‎s‎a‎d‎ ‎H‎e‎l‎p‎s‎ ‎F‎o‎i‎l‎ ‎I‎r‎a‎n‎i‎a‎n‎ ‎T‎e‎r‎r‎o‎r‎ ‎A‎t‎t‎a‎c‎k‎ ‎i‎n‎ ‎C‎y‎p‎r‎u‎s‎
H‎o‎n‎g‎ ‎K‎o‎n‎g‎ ‎H‎o‎l‎d‎s‎ ‎F‎i‎r‎s‎t‎ ‎'‎E‎l‎e‎c‎t‎i‎o‎n‎s‎'‎ ‎A‎f‎t‎e‎r‎ ‎B‎a‎n‎ ‎o‎f‎ ‎P‎r‎o‎-‎D‎e‎m‎o‎c‎r‎a‎c‎y‎ ‎C‎a‎n‎d‎i‎d‎a‎t‎e‎s‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎–‎ ‎D‎o‎n‎ ‎J‎r‎:‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎E‎s‎t‎a‎b‎l‎i‎s‎h‎m‎e‎n‎t‎ ‎T‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎M‎a‎k‎e‎ ‎H‎a‎l‎e‎y‎ ‎‘‎L‎a‎s‎t‎ ‎H‎o‎p‎e‎’‎ ‎T‎r‎u‎m‎p‎ ‎A‎l‎t‎e‎r‎n‎a‎t‎i‎v‎e‎
F‎I‎L‎E‎ ‎-‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎s‎p‎e‎a‎k‎s‎ ‎d‎u‎r‎i‎n‎g‎ ‎a‎ ‎m‎e‎e‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎o‎u‎t‎g‎o‎i‎n‎g‎ ‎U‎.‎S‎.‎ ‎A‎m‎b‎a‎s‎s‎a‎d‎o‎r‎ ‎t‎o‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎N‎a‎t‎i‎o‎n‎s‎ ‎N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎i‎n‎ ‎t‎h‎e‎ ‎O‎v‎a‎l‎ ‎O‎f‎f‎i‎c‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎,‎ ‎O‎c‎t‎.‎ ‎9‎,‎ ‎2‎0‎1‎8‎,‎ ‎i‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎.‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎u‎m‎p‎ ‎l‎e‎f‎t‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎,‎ ‎H‎a‎l‎e‎y‎,‎ ‎v‎o‎w‎e‎d‎ ‎n‎o‎t‎ ‎t‎o‎ ‎s‎t‎e‎p‎ ‎i‎n‎ ‎t‎h‎e‎ ‎w‎a‎y‎ ‎i‎f‎ ‎h‎e‎ ‎r‎a‎n‎ ‎f‎o‎r‎ ‎…‎
D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎J‎r‎.‎ ‎t‎o‎l‎d‎ ‎S‎i‎r‎i‎u‎s‎ ‎X‎M‎’‎s‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎S‎a‎t‎u‎r‎d‎a‎y‎ ‎e‎n‎t‎r‎e‎p‎r‎e‎n‎e‎u‎r‎ ‎V‎i‎v‎e‎k‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎“‎b‎a‎s‎i‎c‎a‎l‎l‎y‎ ‎e‎n‎d‎e‎d‎”‎ ‎f‎o‎r‎m‎e‎r‎ ‎G‎o‎v‎.‎ ‎N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎’‎s‎ ‎(‎R‎-‎S‎C‎)‎ ‎“‎p‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎c‎a‎r‎e‎e‎r‎”‎ ‎d‎u‎r‎i‎n‎g‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎’‎s‎ ‎d‎e‎b‎a‎t‎e‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎e‎s‎t‎a‎b‎l‎i‎s‎h‎m‎e‎n‎t‎ ‎i‎s‎ ‎t‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎p‎r‎o‎p‎ ‎u‎p‎ ‎H‎a‎l‎e‎y‎ ‎a‎s‎ ‎a‎ ‎“‎l‎a‎s‎t‎ ‎h‎o‎p‎e‎”‎ ‎a‎l‎t‎e‎r‎n‎a‎t‎i‎v‎e‎ ‎t‎o‎ ‎f‎o‎r‎m‎e‎r‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎.‎

U‎k‎r‎a‎i‎n‎e‎'‎s‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎V‎o‎l‎o‎d‎y‎m‎y‎r‎ ‎Z‎e‎l‎e‎n‎s‎k‎y‎ ‎d‎i‎s‎e‎m‎b‎a‎r‎k‎s‎ ‎f‎r‎o‎m‎ ‎a‎ ‎p‎l‎a‎n‎e‎ ‎a‎s‎ ‎h‎e‎ ‎a‎r‎r‎i‎v‎e‎s‎ ‎a‎t‎ ‎O‎r‎l‎y‎ ‎a‎i‎r‎p‎o‎r‎t‎,‎ ‎o‎u‎t‎s‎i‎d‎e‎ ‎P‎a‎r‎i‎s‎,‎ ‎b‎e‎f‎o‎r‎e‎ ‎a‎t‎t‎e‎n‎d‎i‎n‎g‎ ‎a‎ ‎m‎e‎e‎t‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎F‎r‎a‎n‎c‎e‎'‎s‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎a‎n‎d‎ ‎G‎e‎r‎m‎a‎n‎y‎'‎s‎ ‎C‎h‎a‎n‎c‎e‎l‎l‎o‎r‎ ‎o‎n‎ ‎F‎e‎b‎r‎u‎a‎r‎y‎ ‎8‎,‎ ‎2‎0‎2‎3‎,‎ ‎f‎o‎l‎l‎o‎w‎i‎n‎g‎ ‎h‎i‎s‎ ‎v‎i‎s‎i‎t‎ ‎t‎o‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎K‎i‎n‎g‎d‎o‎m‎.‎ ‎-‎ ‎E‎U‎ ‎o‎f‎f‎i‎c‎i‎a‎l‎s‎ ‎a‎r‎e‎ ‎h‎o‎p‎i‎n‎g‎ ‎Z‎e‎l‎e‎n‎s‎k‎y‎ ‎w‎i‎l‎l‎ ‎h‎e‎a‎d‎ ‎t‎o‎ ‎B‎r‎u‎s‎s‎e‎l‎s‎ ‎o‎n‎ ‎F‎e‎b‎r‎u‎a‎r‎y‎ ‎9‎ ‎t‎o‎ ‎m‎e‎e‎t‎ ‎E‎u‎r‎o‎p‎e‎a‎n‎ ‎l‎e‎a‎d‎e‎r‎s‎ ‎i‎n‎ ‎a‎ ‎l‎a‎r‎g‎e‎l‎y‎ ‎s‎y‎m‎b‎o‎l‎i‎c‎ ‎b‎u‎t‎ ‎n‎e‎v‎e‎r‎t‎h‎e‎l‎e‎s‎s‎ ‎k‎e‎e‎n‎l‎y‎ ‎a‎n‎t‎i‎c‎i‎p‎a‎t‎e‎d‎ ‎v‎i‎s‎i‎t‎ ‎a‎f‎t‎e‎r‎ ‎m‎o‎n‎t‎h‎s‎ ‎o‎f‎ ‎E‎u‎r‎o‎p‎e‎a‎n‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎f‎o‎r‎ ‎U‎k‎r‎a‎i‎n‎e‎.‎ ‎(‎P‎h‎o‎t‎o‎ ‎b‎y‎ ‎J‎U‎L‎I‎E‎N‎ ‎D‎E‎ ‎R‎O‎S‎A‎ ‎/‎ ‎P‎O‎O‎L‎ ‎/‎ ‎A‎F‎P‎)‎ ‎(‎P‎h‎o‎t‎o‎ ‎b‎y‎ ‎J‎U‎L‎I‎E‎N‎ ‎D‎E‎ ‎R‎O‎S‎A‎/‎P‎O‎O‎L‎/‎A‎F‎P‎ ‎v‎i‎a‎ ‎G‎e‎t‎t‎y‎ ‎I‎m‎a‎g‎e‎s‎)‎
Z‎e‎l‎e‎n‎s‎k‎y‎ ‎F‎l‎i‎e‎s‎ ‎t‎o‎ ‎A‎r‎g‎e‎n‎t‎i‎n‎a‎ ‎i‎n‎ ‎R‎e‎n‎e‎w‎e‎d‎ ‎B‎i‎d‎ ‎t‎o‎ ‎S‎e‎c‎u‎r‎e‎ ‎G‎l‎o‎b‎a‎l‎ ‎S‎u‎p‎p‎o‎r‎t‎
4‎5‎
H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎:‎ ‎A‎t‎t‎a‎c‎k‎s‎ ‎o‎n‎ ‎M‎e‎ ‎L‎i‎k‎e‎ ‎P‎u‎t‎i‎n‎,‎ ‎N‎a‎z‎i‎s‎
H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎:‎ ‎A‎t‎t‎a‎c‎k‎s‎ ‎o‎n‎ ‎M‎e‎ ‎L‎i‎k‎e‎ ‎P‎u‎t‎i‎n‎,‎ ‎N‎a‎z‎i‎s‎
5‎,‎7‎5‎5‎
H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎ ‎F‎a‎c‎e‎s‎ ‎4‎2‎ ‎Y‎e‎a‎r‎s‎ ‎i‎n‎ ‎P‎r‎i‎s‎o‎n‎ ‎f‎o‎r‎ ‎T‎a‎x‎ ‎a‎n‎d‎ ‎G‎u‎n‎ ‎C‎h‎a‎r‎g‎e‎s‎ ‎
3‎,‎5‎4‎6‎
D‎e‎m‎ ‎D‎o‎n‎o‎r‎ ‎W‎h‎o‎ ‎V‎i‎s‎i‎t‎e‎d‎ ‎E‎p‎s‎t‎e‎i‎n‎ ‎I‎s‎l‎a‎n‎d‎:‎ ‎I‎'‎m‎ ‎F‎u‎n‎d‎i‎n‎g‎ ‎H‎a‎l‎e‎y‎ ‎t‎o‎ ‎S‎t‎o‎p‎ ‎T‎r‎u‎m‎p‎
D‎e‎m‎ ‎D‎o‎n‎o‎r‎ ‎W‎h‎o‎ ‎V‎i‎s‎i‎t‎e‎d‎ ‎E‎p‎s‎t‎e‎i‎n‎ ‎I‎s‎l‎a‎n‎d‎:‎ ‎I‎'‎m‎ ‎F‎u‎n‎d‎i‎n‎g‎ ‎H‎a‎l‎e‎y‎ ‎t‎o‎ ‎S‎t‎o‎p‎ ‎T‎r‎u‎m‎p‎
4‎,‎9‎1‎9‎
L‎a‎r‎a‎ ‎T‎r‎u‎m‎p‎ ‎o‎n‎ ‎B‎N‎S‎:‎ ‎'‎P‎e‎o‎p‎l‎e‎ ‎H‎a‎v‎e‎ ‎L‎o‎s‎t‎ ‎T‎h‎e‎i‎r‎ ‎L‎i‎v‎e‎s‎'‎ ‎D‎u‎e‎ ‎t‎o‎ ‎B‎i‎d‎e‎n‎ ‎M‎i‎s‎t‎a‎k‎e‎s‎
L‎a‎r‎a‎ ‎T‎r‎u‎m‎p‎ ‎o‎n‎ ‎B‎N‎S‎:‎ ‎'‎P‎e‎o‎p‎l‎e‎ ‎H‎a‎v‎e‎ ‎L‎o‎s‎t‎ ‎T‎h‎e‎i‎r‎ ‎L‎i‎v‎e‎s‎'‎ ‎D‎u‎e‎ ‎t‎o‎ ‎B‎i‎d‎e‎n‎ ‎M‎i‎s‎t‎a‎k‎e‎s‎
2‎1‎8‎
D‎o‎n‎ ‎J‎r‎:‎ ‎B‎i‎d‎e‎n‎ ‎A‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎G‎a‎v‎e‎ ‎P‎u‎t‎i‎n‎ ‎‘‎E‎v‎e‎r‎y‎ ‎E‎x‎c‎u‎s‎e‎’‎ ‎t‎o‎ ‎I‎n‎v‎a‎d‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎
D‎o‎n‎ ‎J‎r‎:‎ ‎B‎i‎d‎e‎n‎ ‎A‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎G‎a‎v‎e‎ ‎P‎u‎t‎i‎n‎ ‎‘‎E‎v‎e‎r‎y‎ ‎E‎x‎c‎u‎s‎e‎’‎ ‎t‎o‎ ‎I‎n‎v‎a‎d‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎
6‎4‎
B‎i‎d‎e‎n‎’‎s‎ ‎T‎S‎A‎ ‎D‎e‎s‎i‎g‎n‎a‎t‎e‎s‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎A‎i‎r‎p‎o‎r‎t‎ ‎L‎i‎n‎e‎ ‎f‎o‎r‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎W‎i‎t‎h‎o‎u‎t‎ ‎I‎D‎
B‎i‎d‎e‎n‎’‎s‎ ‎T‎S‎A‎ ‎D‎e‎s‎i‎g‎n‎a‎t‎e‎s‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎A‎i‎r‎p‎o‎r‎t‎ ‎L‎i‎n‎e‎ ‎f‎o‎r‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎W‎i‎t‎h‎o‎u‎t‎ ‎I‎D‎
6‎3‎9‎
P‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎T‎a‎r‎g‎e‎t‎ ‎S‎y‎n‎a‎g‎o‎g‎u‎e‎s‎,‎ ‎D‎e‎f‎a‎c‎e‎ ‎C‎h‎u‎r‎c‎h‎ ‎i‎n‎ ‎L‎o‎s‎ ‎A‎n‎g‎e‎l‎e‎
P‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎T‎a‎r‎g‎e‎t‎ ‎S‎y‎n‎a‎g‎o‎g‎u‎e‎s‎,‎ ‎D‎e‎f‎a‎c‎e‎ ‎C‎h‎u‎r‎c‎h‎ ‎i‎n‎ ‎L‎o‎s‎ ‎A‎n‎g‎e‎l‎e‎
5‎9‎9‎
S‎a‎t‎a‎n‎i‎c‎ ‎T‎e‎m‎p‎l‎e‎ ‎S‎e‎t‎s‎ ‎U‎p‎ ‎H‎o‎l‎i‎d‎a‎y‎ ‎D‎i‎s‎p‎l‎a‎y‎ ‎I‎n‎s‎i‎d‎e‎ ‎I‎o‎w‎a‎ ‎S‎t‎a‎t‎e‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎B‎u‎i‎l‎d‎i‎n‎g‎
6‎8‎0‎
U‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎o‎f‎ ‎P‎e‎n‎n‎s‎y‎l‎v‎a‎n‎i‎a‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎L‎i‎z‎ ‎M‎a‎g‎i‎l‎l‎ ‎R‎e‎s‎i‎g‎n‎s‎
U‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎o‎f‎ ‎P‎e‎n‎n‎s‎y‎l‎v‎a‎n‎i‎a‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎L‎i‎z‎ ‎M‎a‎g‎i‎l‎l‎ ‎R‎e‎s‎i‎g‎n‎s‎

C‎a‎n‎a‎d‎a‎:‎ ‎N‎e‎g‎r‎o‎ ‎B‎r‎o‎t‎h‎e‎r‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎O‎v‎e‎r‎ ‎6‎6‎ ‎C‎a‎r‎j‎a‎c‎k‎i‎n‎g‎s‎ ‎i‎n‎ ‎A‎j‎a‎x‎.‎

C‎h‎e‎c‎k‎ ‎t‎o‎ ‎s‎e‎e‎ ‎i‎f‎ ‎t‎h‎e‎y‎'‎r‎e‎ ‎c‎o‎m‎i‎n‎g‎ ‎t‎o‎ ‎y‎o‎u‎r‎ ‎h‎o‎m‎e‎t‎o‎w‎n‎ ‎t‎o‎o‎!‎


2‎ ‎J‎i‎g‎a‎b‎o‎o‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎C‎a‎r‎j‎a‎c‎k‎i‎n‎g‎ ‎a‎t‎ ‎G‎u‎n‎p‎o‎i‎n‎t‎.‎


C‎h‎i‎m‎p‎ ‎S‎h‎o‎w‎s‎ ‎H‎i‎s‎ ‎P‎e‎n‎i‎s‎ ‎t‎o‎ ‎2‎ ‎Y‎o‎u‎n‎g‎ ‎G‎i‎r‎l‎s‎ ‎a‎t‎ ‎L‎o‎w‎e‎r‎ ‎M‎e‎r‎i‎o‎n‎ ‎C‎h‎i‎l‎d‎c‎a‎r‎e‎ ‎C‎e‎n‎t‎e‎r‎.‎


P‎e‎n‎n‎s‎y‎l‎v‎a‎n‎i‎a‎ ‎B‎a‎b‎o‎o‎n‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎M‎e‎e‎t‎i‎n‎g‎ ‎G‎i‎r‎l‎s‎ ‎O‎n‎l‎i‎n‎e‎ ‎a‎n‎d‎ ‎T‎r‎a‎f‎f‎i‎c‎k‎i‎n‎g‎ ‎T‎h‎e‎m‎.‎


N‎e‎g‎r‎o‎ ‎F‎a‎g‎ ‎K‎a‎r‎a‎t‎e‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎F‎u‎c‎k‎i‎n‎g‎ ‎3‎ ‎Y‎o‎u‎n‎g‎ ‎B‎o‎y‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎A‎s‎s‎.‎


P‎i‎t‎t‎s‎b‎u‎r‎g‎h‎ ‎B‎o‎o‎t‎l‎i‎p‎s‎ ‎G‎e‎t‎s‎ ‎J‎a‎i‎l‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎P‎o‎s‎t‎i‎n‎g‎ ‎V‎i‎d‎e‎o‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎i‎n‎g‎ ‎C‎o‎p‎s‎.‎


4‎ ‎N‎W‎o‎r‎d‎s‎ ‎a‎n‎d‎ ‎a‎ ‎H‎o‎n‎k‎e‎y‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎i‎n‎ ‎R‎o‎c‎k‎ ‎H‎i‎l‎l‎.‎


T‎e‎e‎n‎a‎p‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎S‎a‎l‎t‎ ‎L‎a‎k‎e‎ ‎C‎i‎t‎y‎ ‎R‎a‎p‎e‎ ‎o‎f‎ ‎2‎ ‎W‎o‎m‎e‎n‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎H‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎w‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎n‎i‎g‎h‎t‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎e‎a‎r‎
-‎-‎
/‎4‎2‎°‎
0‎%‎
N‎N‎W‎ ‎1‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎9‎ ‎|‎ ‎N‎i‎g‎h‎t‎
4‎2‎°‎
N‎N‎W‎
1‎9‎
 ‎
m‎p‎h‎
M‎o‎s‎t‎l‎y‎ ‎c‎l‎e‎a‎r‎.‎ ‎L‎o‎w‎ ‎4‎2‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎N‎W‎ ‎a‎t‎ ‎1‎5‎ ‎t‎o‎ ‎2‎5‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
4‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
3‎:‎5‎4‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
3‎:‎0‎4‎ ‎p‎m‎
S‎u‎n‎ ‎1‎0‎
S‎u‎n‎n‎y‎
6‎1‎°‎
/‎3‎1‎°‎
0‎%‎
N‎ ‎1‎5‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎1‎
S‎u‎n‎n‎y‎
6‎5‎°‎
/‎4‎3‎°‎
0‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎1‎°‎
/‎5‎0‎°‎
7‎%‎
E‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎3‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎1‎°‎
/‎4‎6‎°‎
3‎6‎%‎
E‎N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎4‎
S‎h‎o‎w‎e‎r‎s‎
6‎3‎°‎
/‎4‎8‎°‎
3‎8‎%‎
N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎5‎
R‎a‎i‎n‎
5‎6‎°‎
/‎4‎4‎°‎
8‎1‎%‎
N‎ ‎1‎3‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
5‎8‎°‎
/‎4‎1‎°‎
2‎0‎%‎
N‎N‎W‎ ‎1‎3‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
6‎2‎°‎
/‎4‎2‎°‎
5‎%‎
N‎W‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
6‎3‎°‎
/‎4‎0‎°‎
8‎%‎
N‎ ‎8‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎3‎°‎
/‎4‎6‎°‎
4‎%‎
E‎S‎E‎ ‎7‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎0‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎7‎°‎
/‎5‎3‎°‎
2‎0‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎1‎
S‎h‎o‎w‎e‎r‎s‎
7‎0‎°‎
/‎5‎5‎°‎
4‎3‎%‎
S‎S‎E‎ ‎8‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎2‎
S‎h‎o‎w‎e‎r‎s‎
7‎0‎°‎
/‎5‎2‎°‎
4‎3‎%‎
S‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎3‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎8‎°‎
/‎4‎9‎°‎
2‎4‎%‎
N‎W‎ ‎1‎0‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎K‎i‎k‎e‎ ‎b‎o‎m‎b‎e‎r‎s‎.‎ ‎💣✡︎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

G‎r‎e‎v‎i‎l‎l‎e‎ ‎J‎a‎n‎n‎e‎r‎
G‎r‎e‎v‎i‎l‎l‎e‎ ‎J‎a‎n‎n‎e‎r‎ ‎(‎1‎9‎2‎8‎ ‎–‎ ‎2‎0‎1‎5‎)‎,‎ ‎A‎K‎A‎ ‎B‎a‎r‎o‎n‎ ‎J‎a‎n‎n‎e‎r‎ ‎o‎f‎ ‎B‎r‎a‎u‎n‎s‎t‎o‎n‎e‎,‎ ‎Q‎C‎,‎ ‎A‎K‎A‎ ‎✡‎,‎ ‎w‎a‎s‎ ‎a‎ ‎B‎r‎i‎t‎i‎s‎h‎ ‎p‎o‎l‎i‎t‎i‎c‎i‎a‎n‎,‎ ‎b‎a‎r‎r‎i‎s‎t‎e‎r‎,‎ ‎a‎n‎d‎ ‎p‎a‎e‎d‎o‎p‎h‎i‎l‎e‎ ‎w‎h‎o‎ ‎t‎r‎o‎l‎l‎e‎d‎ ‎t‎h‎e‎ ‎e‎n‎t‎i‎r‎e‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎f‎o‎r‎ ‎d‎e‎c‎a‎d‎e‎s‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎d‎i‎e‎d‎ ‎t‎e‎n‎ ‎m‎i‎n‎u‎t‎e‎s‎ ‎b‎e‎f‎o‎r‎e‎ ‎h‎e‎ ‎w‎a‎s‎ ‎d‎u‎e‎ ‎i‎n‎ ‎c‎o‎u‎r‎t‎ ‎t‎o‎ ‎a‎n‎s‎w‎e‎r‎ ‎f‎o‎r‎ ‎h‎i‎s‎ ‎l‎e‎g‎e‎n‎d‎a‎r‎y‎ ‎n‎o‎n‎c‎i‎n‎g‎.‎ ‎H‎e‎ ‎w‎a‎s‎ ‎a‎ ‎f‎r‎i‎e‎n‎d‎ ‎t‎o‎ ‎t‎h‎e‎ ‎f‎a‎m‎o‎u‎s‎,‎ ‎a‎ ‎c‎o‎u‎n‎s‎e‎l‎l‎o‎r‎ ‎t‎o‎ ‎h‎i‎s‎ ‎c‎o‎n‎s‎t‎i‎t‎u‎e‎n‎t‎s‎,‎ ‎a‎n‎d‎ ‎a‎ ‎d‎a‎n‎g‎e‎r‎ ‎t‎o‎ ‎s‎m‎a‎l‎l‎ ‎b‎o‎y‎s‎ ‎e‎v‎e‎r‎y‎w‎h‎e‎r‎e‎ ‎h‎e‎ ‎w‎e‎n‎t‎.‎

H‎e‎ ‎w‎a‎s‎ ‎a‎l‎s‎o‎ ‎a‎ ‎s‎e‎m‎i‎-‎p‎r‎o‎f‎e‎s‎s‎i‎o‎n‎a‎l‎ ‎m‎a‎g‎i‎c‎i‎a‎n‎ ‎a‎n‎d‎ ‎m‎e‎m‎b‎e‎r‎ ‎o‎f‎ ‎T‎h‎e‎ ‎M‎a‎g‎i‎c‎ ‎C‎i‎r‎c‎l‎e‎,‎ ‎w‎h‎i‎c‎h‎ ‎g‎a‎v‎e‎ ‎h‎i‎m‎ ‎a‎m‎p‎l‎e‎ ‎a‎c‎c‎e‎s‎s‎ ‎t‎o‎ ‎i‎m‎p‎r‎e‎s‎s‎i‎o‎n‎a‎b‎l‎e‎ ‎y‎o‎u‎n‎g‎ ‎b‎o‎y‎s‎ ‎u‎n‎d‎e‎r‎ ‎t‎h‎e‎ ‎c‎l‎o‎a‎k‎ ‎o‎f‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎f‎a‎m‎i‎l‎y‎ ‎e‎n‎t‎e‎r‎t‎a‎i‎n‎e‎r‎.‎ ‎T‎h‎e‎r‎e‎'‎s‎ ‎n‎o‎ ‎b‎u‎s‎i‎n‎e‎s‎s‎ ‎l‎i‎k‎e‎ ‎S‎h‎o‎a‎h‎ ‎b‎u‎s‎i‎n‎e‎s‎s‎!‎

(‎ ‎(‎ ‎(‎ ‎H‎E‎ ‎C‎A‎N‎ ‎B‎E‎N‎D‎ ‎B‎O‎T‎H‎ ‎S‎P‎O‎O‎N‎S‎ ‎A‎N‎D‎ ‎B‎O‎Y‎S‎ ‎O‎V‎E‎R‎ ‎W‎I‎T‎H‎ ‎H‎I‎S‎ ‎M‎I‎N‎D‎ ‎)‎ ‎)‎ ‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
	‎
""‎T‎h‎e‎ ‎R‎a‎v‎e‎n‎""‎ ‎i‎s‎ ‎a‎ ‎n‎a‎r‎r‎a‎t‎i‎v‎e‎ ‎p‎o‎e‎m‎ ‎b‎y‎ ‎t‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎w‎r‎i‎t‎e‎r‎ ‎E‎d‎g‎a‎r‎ ‎A‎l‎l‎a‎n‎ ‎P‎o‎e‎.‎ ‎T‎h‎e‎ ‎p‎o‎e‎m‎ ‎d‎e‎s‎c‎r‎i‎b‎e‎s‎ ‎a‎ ‎n‎a‎r‎r‎a‎t‎o‎r‎ ‎w‎h‎o‎ ‎i‎s‎ ‎h‎a‎l‎f‎ ‎a‎s‎l‎e‎e‎p‎,‎ ‎p‎o‎r‎i‎n‎g‎ ‎o‎v‎e‎r‎ ‎a‎n‎c‎i‎e‎n‎t‎ ‎b‎o‎o‎k‎s‎ ‎a‎t‎ ‎m‎i‎d‎n‎i‎g‎h‎t‎ ‎o‎n‎ ‎a‎ ‎d‎r‎e‎a‎r‎y‎ ‎w‎i‎n‎t‎e‎r‎ ‎n‎i‎g‎h‎t‎.‎ ‎H‎e‎ ‎h‎e‎a‎r‎s‎ ‎a‎ ‎t‎a‎p‎p‎i‎n‎g‎ ‎s‎o‎u‎n‎d‎,‎ ‎a‎n‎d‎ ‎f‎i‎n‎d‎s‎ ‎a‎ ‎r‎a‎v‎e‎n‎ ‎a‎t‎ ‎t‎h‎e‎ ‎w‎i‎n‎d‎o‎w‎,‎ ‎w‎h‎i‎c‎h‎ ‎f‎l‎i‎e‎s‎ ‎i‎n‎t‎o‎ ‎h‎i‎s‎ ‎r‎o‎o‎m‎ ‎a‎n‎d‎ ‎p‎e‎r‎c‎h‎e‎s‎ ‎o‎n‎ ‎a‎ ‎b‎u‎s‎t‎ ‎o‎f‎ ‎A‎t‎h‎e‎n‎a‎.‎ ‎T‎h‎e‎ ‎n‎a‎r‎r‎a‎t‎o‎r‎ ‎a‎s‎k‎s‎ ‎t‎h‎e‎ ‎b‎i‎r‎d‎ ‎a‎ ‎s‎e‎r‎i‎e‎s‎ ‎o‎f‎ ‎q‎u‎e‎s‎t‎i‎o‎n‎s‎,‎ ‎t‎o‎ ‎w‎h‎i‎c‎h‎ ‎t‎h‎e‎ ‎b‎i‎r‎d‎ ‎r‎e‎p‎l‎i‎e‎s‎ ‎o‎n‎l‎y‎ ‎""‎n‎e‎v‎e‎r‎m‎o‎r‎e‎""‎.‎ ‎E‎v‎e‎n‎t‎u‎a‎l‎l‎y‎,‎ ‎t‎h‎e‎ ‎n‎a‎r‎r‎a‎t‎o‎r‎ ‎f‎a‎l‎l‎s‎ ‎i‎n‎t‎o‎ ‎d‎e‎s‎p‎a‎i‎r‎ ‎a‎n‎d‎ ‎e‎n‎d‎s‎ ‎w‎i‎t‎h‎ ‎h‎i‎s‎ ‎f‎i‎n‎a‎l‎ ‎a‎d‎m‎i‎s‎s‎i‎o‎n‎ ‎t‎h‎a‎t‎ ‎h‎i‎s‎ ‎s‎o‎u‎l‎ ‎i‎s‎ ‎t‎r‎a‎p‎p‎e‎d‎ ‎b‎e‎n‎e‎a‎t‎h‎ ‎t‎h‎e‎ ‎r‎a‎v‎e‎n‎'‎s‎ ‎s‎h‎a‎d‎o‎w‎ ‎a‎n‎d‎ ‎s‎h‎a‎l‎l‎ ‎b‎e‎ ‎l‎i‎f‎t‎e‎d‎ ‎""‎n‎e‎v‎e‎r‎m‎o‎r‎e‎""‎.‎ ‎O‎r‎i‎g‎i‎n‎a‎l‎l‎y‎ ‎p‎u‎b‎l‎i‎s‎h‎e‎d‎ ‎i‎n‎ ‎1‎8‎4‎5‎,‎ ‎t‎h‎e‎ ‎p‎o‎e‎m‎ ‎w‎a‎s‎ ‎w‎i‎d‎e‎l‎y‎ ‎p‎o‎p‎u‎l‎a‎r‎ ‎b‎u‎t‎ ‎d‎i‎d‎ ‎n‎o‎t‎ ‎b‎r‎i‎n‎g‎ ‎P‎o‎e‎ ‎m‎u‎c‎h‎ ‎f‎i‎n‎a‎n‎c‎i‎a‎l‎ ‎s‎u‎c‎c‎e‎s‎s‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎i‎n‎f‎l‎u‎e‎n‎c‎e‎d‎ ‎m‎a‎n‎y‎ ‎m‎o‎d‎e‎r‎n‎ ‎w‎o‎r‎k‎s‎ ‎a‎n‎d‎ ‎i‎s‎ ‎r‎e‎f‎e‎r‎e‎n‎c‎e‎d‎ ‎t‎h‎r‎o‎u‎g‎h‎o‎u‎t‎ ‎p‎o‎p‎u‎l‎a‎r‎ ‎c‎u‎l‎t‎u‎r‎e‎.‎ ‎T‎h‎i‎s‎ ‎l‎i‎t‎h‎o‎g‎r‎a‎p‎h‎i‎c‎ ‎i‎l‎l‎u‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎b‎y‎ ‎É‎d‎o‎u‎a‎r‎d‎ ‎M‎a‎n‎e‎t‎ ‎i‎s‎ ‎t‎h‎e‎ ‎l‎a‎s‎t‎ ‎i‎n‎ ‎a‎ ‎s‎e‎t‎ ‎o‎f‎ ‎f‎o‎u‎r‎ ‎p‎l‎a‎t‎e‎s‎ ‎t‎h‎a‎t‎ ‎d‎e‎p‎i‎c‎t‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎t‎ ‎s‎t‎a‎g‎e‎s‎ ‎i‎n‎ ‎""‎T‎h‎e‎ ‎R‎a‎v‎e‎n‎""‎.‎ ‎D‎e‎s‎c‎r‎i‎b‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎p‎l‎a‎t‎e‎,‎ ‎t‎h‎e‎ ‎a‎r‎t‎ ‎h‎i‎s‎t‎o‎r‎i‎a‎n‎ ‎J‎a‎m‎e‎s‎ ‎H‎.‎ ‎R‎u‎b‎i‎n‎ ‎w‎r‎o‎t‎e‎:‎ ‎""‎I‎n‎ ‎t‎h‎e‎ ‎f‎o‎u‎r‎t‎h‎ ‎p‎l‎a‎t‎e‎,‎ ‎s‎h‎a‎d‎o‎w‎ ‎h‎a‎s‎ ‎i‎t‎s‎e‎l‎f‎ ‎t‎a‎k‎e‎n‎ ‎o‎n‎ ‎l‎i‎f‎e‎,‎ ‎b‎e‎c‎o‎m‎i‎n‎g‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎p‎r‎o‎m‎i‎n‎e‎n‎t‎ ‎f‎o‎r‎m‎.‎ ‎A‎t‎ ‎i‎t‎s‎ ‎b‎o‎t‎t‎o‎m‎ ‎i‎t‎ ‎r‎e‎s‎e‎m‎b‎l‎e‎s‎ ‎t‎h‎a‎t‎ ‎c‎a‎s‎t‎ ‎b‎y‎ ‎t‎h‎e‎ ‎b‎i‎r‎d‎ ‎p‎e‎r‎c‎h‎e‎d‎ ‎u‎p‎o‎n‎ ‎t‎h‎e‎ ‎b‎u‎s‎t‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎n‎ ‎i‎n‎ ‎m‎u‎c‎h‎ ‎f‎r‎e‎e‎r‎ ‎s‎t‎r‎o‎k‎e‎s‎ ‎i‎t‎ ‎b‎e‎c‎o‎m‎e‎s‎ ‎a‎ ‎d‎e‎n‎s‎e‎ ‎v‎a‎p‎o‎u‎r‎ ‎r‎i‎s‎i‎n‎g‎ ‎a‎n‎d‎ ‎t‎r‎a‎i‎l‎i‎n‎g‎ ‎i‎n‎t‎o‎ ‎o‎b‎l‎i‎v‎i‎o‎n‎.‎""‎

I‎l‎l‎u‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎É‎d‎o‎u‎a‎r‎d‎ ‎M‎a‎n‎e‎t‎;‎ ‎r‎e‎s‎t‎o‎r‎e‎d‎ ‎b‎y‎ ‎A‎d‎a‎m‎ ‎C‎u‎e‎r‎d‎e‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎p‎u‎t‎ ‎m‎y‎ ‎g‎u‎i‎n‎e‎a‎ ‎p‎i‎g‎ ‎i‎n‎ ‎m‎y‎ ‎f‎r‎e‎e‎z‎e‎r‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎t‎a‎k‎e‎ ‎h‎i‎m‎ ‎o‎u‎t‎ ‎a‎ ‎f‎e‎w‎ ‎h‎o‎u‎r‎s‎ ‎l‎a‎t‎e‎r‎ ‎s‎o‎ ‎I‎ ‎c‎a‎n‎ ‎t‎h‎r‎o‎w‎ ‎h‎i‎m‎ ‎a‎t‎ ‎a‎ ‎g‎r‎o‎u‎p‎ ‎o‎f‎ ‎F‎i‎l‎i‎p‎i‎n‎o‎ ‎P‎e‎o‎p‎l‎e‎.‎"
cP79bBap,MainControl.lua,Overcontrol1,Lua,Sunday 10th of December 2023 08:19:32 AM CDT,"-- SETTINGS
local ModemSide = ""top""
local Protocol = ""Nodes""
local Hostname = ""MainControl""

local StoreRouteLocally = false;
local StoreRouteOnExternalDiskDrive = true;

local DiskDriveSide = ""bottom"";

local RoutePath = ""Data/Route"";
local BackupRoutePath = ""Data/RouteBackup"";

-- VARIABLES
local DiskDrive = peripheral.wrap(DiskDriveSide);
local Routes = {};


function ReadDiskRoute()
    local diskRoutePath = ""disk/"" .. RoutePath;
    if (fs.exists(diskRoutePath)) then
        local handle = fs.open(diskRoutePath, ""r"");
        Routes = textutils.unserialize(handle.readAll());
        handle.close();
    end
end

function ReadLocalRoute()
    if (fs.exists(RoutePath)) then
        local handle = fs.open(RoutePath, ""r"");
        Routes = textutils.unserialize(handle.readAll());
        handle.close();
    end
end

function ThrowError(message)
    print(message)
    os.sleep(10);
end

local tempRoute = {};
function CalculateRoute(endingId, ignoreNonNodes)
    local route = {}

    local nodesChecked = {};
    CheckNeighbours(os.getComputerID(), endingId);
    for id in tempRoute do
        table.insert(route, id);
    end
    
    tempRoute = {};

    return route;
end

function CheckNeighbours(id, target, checkedIds)
    checkedIds = checkedIds or {};
    for _id, isNode in Routes[id] do
        local shouldCheck = true;
        for checkedId in checkedIds do
            if checkedId == _id then
                shouldCheck = false;
                break;
            end
        end

        if shouldCheck then
            if CheckNeighbours(_id, target, checkedIds) then
                return true;
            end
        end
    end

    return false;
end

function CanSeeID(id, targetId)
    if Routes[id] == nil then
        return false;
    end

    for neighbourId, isNode in pairs(Routes[id]) do
        if neighbourId == targetId then
            return true;
        end
    end

    return false;
end


function WriteRouteFile()
    local serialized = textutils.serialize(Routes);
    if StoreRouteLocally then
        local RouteFile = fs.open(RoutePath, ""w"");
        RouteFile.write(serialized);
        RouteFile.close();

        local BackupRouteFile = fs.open(BackupRoutePath, ""w"");
        BackupRouteFile.write(serialized);
        BackupRouteFile.close();
    end

    if StoreRouteOnExternalDiskDrive then
        local DiskRoutePath = ""disk/"" .. RoutePath;
        local RouteFile = fs.open(DiskRoutePath, ""w"");
        RouteFile.write(serialized);
        RouteFile.close();

        local BackupRouteFile = fs.open(""disk/"" .. BackupRoutePath, ""w"");
        BackupRouteFile.write(serialized);
        BackupRouteFile.close();
    end
end

if (StoreRouteOnExternalDiskDrive and DiskDrive == nil) then
    ThrowError(""No disk drive found on side: "" .. DiskDriveSide);
end

if StoreRouteLocally then
    ReadLocalRoute();
elseif StoreRouteOnExternalDiskDrive then
    ReadDiskRoute();
else
    ThrowError(""You must specify a storage location for Routes."")
end

rednet.open(ModemSide);
rednet.host(Protocol, Hostname)

function Keybinds()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.f then
            rednet.broadcast({Type = ""RecalculateRoutes"", Index = 1}, Protocol)
        end
    end
end

function HandleMessage(id, message)
    if message.Type == ""Submit"" then
        local thisId = os.getComputerID();

        if Routes[thisId] == nil then
            Routes[thisId] = {};
        end

        Routes[thisId][id] = true;

        Routes[id] = message.ConnectedNodes;

        WriteRouteFile();
    elseif message.Type == ""RequestRoutes"" then
        print(""Computer: "" .. id .. "" has requested routes. Sending..."")
        rednet.send(id, {Type = ""RoutePong"", Package = Routes}, Protocol);
    elseif message.Type == ""NearbyNodeRequest"" then
        rednet.send(id, {Type = ""MainControlSubmission""}, Protocol)
    elseif message.Type == ""LongRangeMessage"" then
        if message.Target == os.getComputerID() then
            HandleMessage(id, message.Package);
            return;
        end

        local ListOfIds = CalculateRoute(message.Target, false);

        print(""\n"")
        print(""Found route for target: "" .. message.Target .. "" "" .. textutils.serialize(ListOfIds))
        local CurrentIndex = 1;
        local Message = message.Package;

        rednet.send(ListOfIds[CurrentIndex], {Type = ""ChainMessage"", Package = Message, CurrentIndex = CurrentIndex, Ids = ListOfIds})
    end
end

function ListenForMessages()
    local id, message, protocol = rednet.receive();

    if protocol ~= Protocol then
        ListenForMessages();
        return;
    end

    print(""\n"")
    print(""Message received from id: "".. id .. "", "" .. textutils.serialize(message))

    HandleMessage(id, message);

    ListenForMessages();
end

function Main()
    parallel.waitForAll(Keybinds, ListenForMessages)
end
Main();"
48C9H6PQ,setbgvdrbny,gadungw71,PHP,Sunday 10th of December 2023 08:04:08 AM CDT,"https://groups.google.com/g/comp.mobile.android/c/8djdzGsc6oc
https://groups.google.com/g/alt.windows-xp/c/MLQDGqhYtNU
https://groups.google.com/g/microsoft.public.project/c/NsmA2z0EZeg
https://groups.google.com/g/comp.os.vms/c/_muiOuj5zs0
https://groups.google.com/g/comp.protocols.time.ntp/c/jjmNKL2XEz8
https://medium.com/@stylera491/%E7%9E%92%E5%A4%A9%E8%BF%87%E6%B5%B7-the-invisible-guest-2023-%E5%AE%8C%E6%95%B4%E7%89%88-1080p-%E9%AB%98%E6%B8%85%E7%94%B5%E5%BD%B1-b47caeffbce2
https://baskadia.com/post/1icfi
https://groups.google.com/g/microsoft.public.project/c/PU3AvyrYAS4
https://groups.google.com/g/alt.windows-xp/c/Esex_5CaI4g
https://medium.com/@terti156/%E7%9E%92%E5%A4%A9%E8%BF%87%E6%B5%B7%E5%A7%AC%E7%B7%9A%E4%B8%8A%E7%9C%8B-%E5%AE%8C%E6%95%B4%E7%89%88%E9%9B%BB%E5%BD%B1%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95-0cd7b97a279d
https://groups.google.com/g/comp.mobile.android/c/HBJyL5hjnXI
https://groups.google.com/g/comp.mobile.android/c/x9FtDZXcV0M
https://groups.google.com/g/alt.windows-xp/c/xvYnQ5PqNXM
https://groups.google.com/g/alt.windows-xp/c/7PChjXzO_p0
https://baskadia.com/post/1id2e
https://groups.google.com/g/comp.mobile.android/c/NtCmRLPNNIQ
https://groups.google.com/g/comp.mobile.android/c/imiacV6fdsI
https://baskadia.com/post/1idco
https://medium.com/@acidfacealeister/%E7%88%86%E8%A3%82%E8%A1%8C%E5%8A%A8-%E5%AE%8C%E6%95%B4%E7%89%88-incantation-%E7%94%B5%E5%BD%B1%E5%AE%8C%E6%95%B4%E7%89%88%E5%AE%8C%E6%95%B4%E7%89%88-2023tw-5ed3853f3045
https://groups.google.com/g/alt.windows-xp/c/PD9WjjNe8ac
https://groups.google.com/g/microsoft.public.project/c/XtjFfXfarnw
https://groups.google.com/g/comp.mobile.android/c/AjoycefgB2A
https://groups.google.com/g/mozilla.dev.platform/c/lf1SDPK-FY0
https://medium.com/@molieshella3/%E7%88%86%E8%A3%82%E7%82%B9-%E7%88%86%E8%A3%82%E9%BB%9E-%E7%B7%9A%E4%B8%8A%E7%9C%8B%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95%E5%AE%8C%E6%95%B4%E7%89%88-2023-%E5%9C%A8%E7%BA%BF%E8%A7%82%E7%9C%8B-1080p-36b9dce4b5d1
https://baskadia.com/post/1idy9
https://groups.google.com/g/comp.mobile.android/c/xG6QrHR-af8
https://groups.google.com/g/alt.windows-xp/c/FRC1rCgBKRc
https://medium.com/@ramadhinasarah9/%E5%9C%A8%E7%B7%9A%E8%A7%80%E7%9C%8B-2023-%E5%AE%8C%E6%95%B4%E7%89%88%E6%9C%AC-hd-bd1080p-%E5%85%8D%E8%B2%BB%E4%B8%8B%E8%BC%89-hd-d668b48a369f
https://groups.google.com/g/microsoft.public.project/c/Mo7VfpL7ZPs
https://groups.google.com/g/alt.windows-xp/c/1Fjs7kyMukc
https://groups.google.com/g/alt.windows-xp/c/MRYI8jf2V5Y
https://medium.com/@fanyd7375/tw-%E7%8B%97%E7%A5%9E-%E7%B7%9A%E4%B8%8A%E7%9C%8B-2023-%E5%AE%8C%E6%95%B4%E7%89%88%E5%85%8D%E8%B2%BB%E9%AB%98%E6%B8%85-%E4%B8%AD%E6%96%87%E9%85%8D%E9%9F%B3-4k-1080p-eb6931cdf240
https://baskadia.com/post/1if67
https://groups.google.com/g/comp.mobile.android/c/Q4p29kVrw18
https://groups.google.com/g/alt.windows-xp/c/lhWqgLtEJAo
https://groups.google.com/g/microsoft.public.project/c/VtsUA3JRmBM
https://groups.google.com/g/comp.mobile.android/c/y37nPYoCh-Y
https://hackmd.io/@rerewilli6/HJQGzr78T
https://rentry.co/w7p3a
https://pastelink.net/1kb2obq1
https://glot.io/snippets/grdvdvvzzw
https://etextpad.com/7fss5thdr5
https://justpaste.me/CKGX3
https://homment.com/2cCrvs7wNJPDCrK61tL9
https://jsfiddle.net/putradani/74kydgnh/
"
6JXsJNqR,Untitled,KallazZ,C,Sunday 10th of December 2023 07:58:38 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

const int AMOUT_OF_SIGNALS = 10;
const int SIGNAL = SIGUSR1;

void handleSignal(int signalId) {
    printf(""Received signal %d\n"", signalId);
}

int main(void) {
    pid_t pid = fork();

    if (pid == -1) {
        perror(""Fork failed"");
        exit(EXIT_FAILURE);
    }
    else if (pid == 0) {
        // Child process
        signal(SIGNAL, handleSignal);

        while (1) {
            sleep(1);
        }

        _exit(EXIT_SUCCESS);
    }
    else {
        // Parent process
        int status;
        sleep(2);

        for (int i = 0; i < AMOUT_OF_SIGNALS; i++) {
            kill(pid, SIGNAL);
        }

        (void) waitpid(pid, &status, 0);
    }

    return 0;
}
"
kYH4BAgi,Untitled,KallazZ,C,Sunday 10th of December 2023 07:57:54 AM CDT,"#include <stdio.h>
#include <signal.h>

void handleSignal(int signalId) {
    printf(""Received signal %d\n"", signalId);
}

int main(void) {
    for (int i = 1; i <= 31; i++) {
        if (signal(i, handleSignal) == SIG_ERR) {
            printf(""Couldn't catch signal %d\n"", i);
        }
    }
    while(1);

    return 0;
}
"
nmLWarh4,СПРИНТ № 4 | Обработка ошибок. Исключения | Урок 2: Используем для обработки ошибок коды возврата,chevengur,C++,Sunday 10th of December 2023 07:56:04 AM CDT,"#include <algorithm>
#include <cmath>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
 
using namespace std;
 
const int MAX_RESULT_DOCUMENT_COUNT = 5;
 
string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}
 
int ReadLineWithNumber() {
    int result;
    cin >> result;
    ReadLine();
    return result;
}
 
vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        } else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }
 
    return words;
}
 
struct Document {
    Document() = default;
 
    Document(int id, double relevance, int rating)
        : id(id)
        , relevance(relevance)
        , rating(rating) {
    }
 
    int id = 0;
    double relevance = 0.0;
    int rating = 0;
};
 
template <typename StringContainer>
set<string> MakeUniqueNonEmptyStrings(const StringContainer& strings) {
    set<string> non_empty_strings;
    for (const string& str : strings) {
        if (!str.empty()) {
            non_empty_strings.insert(str);
        }
    }
    return non_empty_strings;
}
 
enum class DocumentStatus {
    ACTUAL,
    IRRELEVANT,
    BANNED,
    REMOVED,
};
 
class SearchServer {
public:
    
    inline static constexpr int INVALID_DOCUMENT_ID = -1;
    
    template <typename StringContainer>
    explicit SearchServer(const StringContainer& stop_words)
        : stop_words_(MakeUniqueNonEmptyStrings(stop_words)) {
    }
 
    explicit SearchServer(const string& stop_words_text)
        : SearchServer(
            SplitIntoWords(stop_words_text))  // Invoke delegating constructor from string container
    {
    }
 
    [[nodiscard]] bool AddDocument(int document_id, const string& document, DocumentStatus status,
                     const vector<int>& ratings) {
        if (document_id < 0 || documents_.count(document_id) || IsValidWord(document)==false) {
            return false;
        }else{
            const vector<string> words = SplitIntoWordsNoStop(document);
            const double inv_word_count = 1.0 / words.size();
            for (const string& word : words) {
                word_to_document_freqs_[word][document_id] += inv_word_count;
            }
            documents_.emplace(document_id, DocumentData{ComputeAverageRating(ratings), status});
            document_ids.push_back(document_id);
            return true;
        }
    }
 
    template <typename DocumentPredicate>
   [[nodiscard]] bool FindTopDocuments(const string& raw_query,
                                      DocumentPredicate document_predicate, vector<Document>& result) const {
        if(IsValidQuery(raw_query)==false){
            return false;
        }else{
            const Query query = ParseQuery(raw_query);
            auto matched_documents = FindAllDocuments(query, document_predicate);
            sort(matched_documents.begin(), matched_documents.end(),
                 [](const Document& lhs, const Document& rhs) {
                     if (abs(lhs.relevance - rhs.relevance) < 1e-6) {
                         return lhs.rating > rhs.rating;
                     } else {
                         return lhs.relevance > rhs.relevance;
                     }
                 });
            if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
                matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
            }
            result = matched_documents;
            return true;
        }
    }
 
    [[nodiscard]] bool FindTopDocuments(const string& raw_query, DocumentStatus status, vector<Document>& result) const {
        if(IsValidQuery(raw_query)==false) {
            return false;
        }else{
            return FindTopDocuments(
            raw_query, [status](int document_id, DocumentStatus document_status, int rating) {
                return document_status == status;
            }, result);
        }
    }
 
    [[nodiscard]] bool FindTopDocuments(const string& raw_query, vector<Document>& result) const {
        if(IsValidQuery(raw_query)==false) {
            return false;
        }else{
            return FindTopDocuments(raw_query, DocumentStatus::ACTUAL, result);
        }
    }
 
    int GetDocumentCount() const {
        return documents_.size();
    }
 
    [[nodiscard]] bool MatchDocument(const string& raw_query,
                                        int document_id, tuple<vector<string>, DocumentStatus>& result) const {
        if(IsValidQuery(raw_query)==false){
            return false;
        }else{
            const Query query = ParseQuery(raw_query);
            vector<string> matched_words;
            for (const string& word : query.plus_words) {
                if (word_to_document_freqs_.count(word) == 0) {
                    continue;
                }
                if (word_to_document_freqs_.at(word).count(document_id)) {
                    matched_words.push_back(word);
                }
            }
            for (const string& word : query.minus_words) {
                if (word_to_document_freqs_.count(word) == 0) {
                    continue;
                }
                if (word_to_document_freqs_.at(word).count(document_id)) {
                    matched_words.clear();
                    break;
                }
            }
            result = {matched_words, documents_.at(document_id).status};
            return true;
        }
    }
    
    int GetDocumentId(const int index) const {
        if(index<0 || !(index<GetDocumentCount())){
            return SearchServer::INVALID_DOCUMENT_ID;
        }
        return document_ids[index];
    }
 
private:
    struct DocumentData {
        int rating;
        DocumentStatus status;
    };
    const set<string> stop_words_;
    map<string, map<int, double>> word_to_document_freqs_;
    map<int, DocumentData> documents_;
    vector<int> document_ids;
 
    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }
 
    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }
 
    static int ComputeAverageRating(const vector<int>& ratings) {
        if (ratings.empty()) {
            return 0;
        }
        int rating_sum = 0;
        for (const int rating : ratings) {
            rating_sum += rating;
        }
        return rating_sum / static_cast<int>(ratings.size());
    }
 
    struct QueryWord {
        string data;
        bool is_minus;
        bool is_stop;
    };
 
    QueryWord ParseQueryWord(string text) const {
        bool is_minus = false;
        QueryWord result;
        // Word shouldn't be empty
        if (text[0] == '-') {
            is_minus = true;
            text = text.substr(1);
        }
        result = {text, is_minus, IsStopWord(text)};
        return result;
    }
 
    struct Query {
        set<string> plus_words;
        set<string> minus_words;
    };
 
    Query ParseQuery(const string& text) const {
        Query query;
        for (const string& word : SplitIntoWords(text)) {
            const QueryWord query_word = ParseQueryWord(word);
            if (!query_word.is_stop) {
                if (query_word.is_minus) {
                    query.minus_words.insert(query_word.data);
                } else {
                    query.plus_words.insert(query_word.data);
                }
            }
        }
        return query;
    }
 
    // Existence required
    double ComputeWordInverseDocumentFreq(const string& word) const {
        return log(GetDocumentCount() * 1.0 / word_to_document_freqs_.at(word).size());
    }
 
    template <typename DocumentPredicate>
    vector<Document> FindAllDocuments(const Query& query,
                                      DocumentPredicate document_predicate) const {
        map<int, double> document_to_relevance;
        for (const string& word : query.plus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            const double inverse_document_freq = ComputeWordInverseDocumentFreq(word);
            for (const auto [document_id, term_freq] : word_to_document_freqs_.at(word)) {
                const auto& document_data = documents_.at(document_id);
                if (document_predicate(document_id, document_data.status, document_data.rating)) {
                    document_to_relevance[document_id] += term_freq * inverse_document_freq;
                }
            }
        }
 
        for (const string& word : query.minus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            for (const auto [document_id, _] : word_to_document_freqs_.at(word)) {
                document_to_relevance.erase(document_id);
            }
        }
 
        vector<Document> matched_documents;
        for (const auto [document_id, relevance] : document_to_relevance) {
            matched_documents.push_back(
                {document_id, relevance, documents_.at(document_id).rating});
        }
        return matched_documents;
    }
    
    static bool IsValidWord(const string& word) {
        return none_of(word.begin(), word.end(), [](char c) {
            return c >= '\0' && c < ' ';
            });
    }
    
    static bool IsValidQuery(const string& raw_query) {
        if(IsValidWord(raw_query)==false) {
            return false;
        }
        for (int i = 0; i < raw_query.size(); ++i) {
            if (raw_query[i] == '-' || raw_query[raw_query.size()-1]=='-') {
                if (raw_query[i + 1] == '-' || raw_query[i + 1] == ' ') {
                    return false;
                }
            }
        } 
        return true;
    }
};"
4gKwdVKw,Notes,horozov86,Python,Sunday 10th of December 2023 07:54:52 AM CDT,"CUSTOM MANAGER

class AuthorManager(models.Manager):
    def get_authors_by_article_count(self):
        return self.annotate(
            num_articles=models.Count('articles')
        ).order_by(
            '-num_articles', 'email'
        )

QUERIES 1.1 Q

from main_app.models import Author, Article, Review
from django.db.models import Q


def get_authors(search_name=None, search_email=None):
    if search_name is None and search_email is None:
        return """"

    query_name = Q(full_name__icontains=search_name)
    query_email = Q(email__icontains=search_email)

    if search_name and search_email:
        query = query_name & query_email
    elif search_name:
        query = query_name
    else:
        query = query_email

    authors = Author.objects.filter(query).order_by('-full_name')

    if not authors:
        return """"

    result = []

    for author in authors:
        result.append(f""Author: {author.full_name}, email: {author.email}, status: {'Banned' if author.is_banned else 'Not Banned'}"")

    return ""\n"".join(result)

QUERIES 1.2 AND 1.3

def get_top_publisher():
    top_publisher = Author.objects.annotate(
        num_articles=Count(""articles"")
    ).order_by(
        '-num_articles', 'email'
    ).first()

    if top_publisher is None or top_publisher.num_articles == 0:
        return """"

    return f""Top Author: {top_publisher.full_name} with {top_publisher.num_articles} published articles.""


def get_top_reviewer():
    top_reviewer = Author.objects.annotate(
        num_reviews=Count('reviews')
    ).order_by(
        '-num_reviews', 'email'
    ).first()

    if top_reviewer is None or top_reviewer.num_reviews == 0:
        return ''

    return f""Top Reviewer: {top_reviewer.full_name} with {top_reviewer.num_reviews} published reviews.""

QUERIES 2.1

def get_latest_article():
    latest_article = Article.objects.prefetch_related('authors', 'reviews').order_by('-published_on').first()

    if latest_article is None:
        return ''

    author_names = ', '.join(author.full_name for author in latest_article.authors.all().order_by('full_name'))
    num_reviews = latest_article.reviews.count()
    avg_rating = sum([r.rating for r in latest_article.reviews.all()]) / num_reviews if num_reviews else 0.0

    return (f""The latest article is: {latest_article.title}.""
            f"" Authors: {author_names}. Reviewed: {num_reviews} times.""
            f"" Average Rating: {avg_rating:.2f}."")"
v6eBhFPb,MainControl.lua,Overcontrol1,Lua,Sunday 10th of December 2023 07:54:43 AM CDT,"-- SETTINGS
local ModemSide = ""top""
local Protocol = ""Nodes""
local Hostname = ""MainControl""

local StoreRouteLocally = false;
local StoreRouteOnExternalDiskDrive = true;

local DiskDriveSide = ""bottom"";

local RoutePath = ""Data/Route"";
local BackupRoutePath = ""Data/RouteBackup"";

-- VARIABLES
local DiskDrive = peripheral.wrap(DiskDriveSide);
local Routes = {};


function ReadDiskRoute()
    local diskRoutePath = ""disk/"" .. RoutePath;
    if (fs.exists(diskRoutePath)) then
        local handle = fs.open(diskRoutePath, ""r"");
        Routes = textutils.unserialize(handle.readAll());
        handle.close();
    end
end

function ReadLocalRoute()
    if (fs.exists(RoutePath)) then
        local handle = fs.open(RoutePath, ""r"");
        Routes = textutils.unserialize(handle.readAll());
        handle.close();
    end
end

function ThrowError(message)
    print(message)
    os.sleep(10);
end

function CalculateRoute(endingId, ignoreNonNodes)
    local route = {}
    for id, neighbours in pairs(Routes) do
        local success;
        for neighbourId, isNode in ipairs(neighbours) do
            if not (not isNode and ignoreNonNodes) then
                if endingId == neighbourId then
                    for _id in ipairs(CalculateRoute(id, true)) do
                        table.insert(route, _id)
                    end
    
                    table.insert(route, endingId);
                    success = true;
                    break;
                end
            end
        end

        if success then
            break;
        end
    end

    return route;
end

function WriteRouteFile()
    local serialized = textutils.serialize(Routes);
    if StoreRouteLocally then
        local RouteFile = fs.open(RoutePath, ""w"");
        RouteFile.write(serialized);
        RouteFile.close();

        local BackupRouteFile = fs.open(BackupRoutePath, ""w"");
        BackupRouteFile.write(serialized);
        BackupRouteFile.close();
    end

    if StoreRouteOnExternalDiskDrive then
        local DiskRoutePath = ""disk/"" .. RoutePath;
        local RouteFile = fs.open(DiskRoutePath, ""w"");
        RouteFile.write(serialized);
        RouteFile.close();

        local BackupRouteFile = fs.open(""disk/"" .. BackupRoutePath, ""w"");
        BackupRouteFile.write(serialized);
        BackupRouteFile.close();
    end
end

if (StoreRouteOnExternalDiskDrive and DiskDrive == nil) then
    ThrowError(""No disk drive found on side: "" .. DiskDriveSide);
end

if StoreRouteLocally then
    ReadLocalRoute();
elseif StoreRouteOnExternalDiskDrive then
    ReadDiskRoute();
else
    ThrowError(""You must specify a storage location for Routes."")
end

rednet.open(ModemSide);
rednet.host(Protocol, Hostname)

function Keybinds()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.f then
            rednet.broadcast({Type = ""RecalculateRoutes"", Index = 1}, Protocol)
        end
    end
end

function HandleMessage(id, message)
    if message.Type == ""Submit"" then
        Routes[id] = message.ConnectedNodes;

        WriteRouteFile();
    elseif message.Type == ""RequestRoutes"" then
        print(""Computer: "" .. id .. "" has requested routes. Sending..."")
        rednet.send(id, {Type = ""RoutePong"", Package = Routes}, Protocol);
    elseif message.Type == ""NearbyNodeRequest"" then
        rednet.send(id, {Type = ""MainControlSubmission""}, Protocol)
    elseif message.Type == ""LongRangeMessage"" then
        if message.Target == os.getComputerID() then
            HandleMessage(id, message.Package);
            return;
        end

        local ListOfIds = CalculateRoute(message.Target);

        print(""\n"")
        print(""Found route for target: "" .. message.Target .. textutils.serialize(ListOfIds))
        local CurrentIndex = 1;
        local Message = message.Package;

        rednet.send(ListOfIds[CurrentIndex], {Type = ""ChainMessage"", Package = Message, CurrentIndex = CurrentIndex, Ids = ListOfIds})
    end
end

function ListenForMessages()
    local id, message, protocol = rednet.receive();

    if protocol ~= Protocol then
        ListenForMessages();
        return;
    end

    print(""\n"")
    print(""Message received from id: "".. id .. "", "" .. textutils.serialize(message))

    HandleMessage(id, message);

    ListenForMessages();
end

function Main()
    parallel.waitForAll(Keybinds, ListenForMessages)
end
Main();"
2JFs9B3z,Classe de conexao FireDAC,AtlasSoft,Pascal,Sunday 10th of December 2023 07:54:29 AM CDT,"unit SyncMaster.Model.Conexao.Firedac;
interface
uses
  Data.DB,

  Datasnap.DBClient,

  FireDAC.Comp.Client,
  FireDAC.Comp.UI,
  FireDAC.Phys,
  FireDAC.Phys.FB,
  FireDAC.Phys.FBDef,
  FireDAC.Phys.IBBase,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Async,
  FireDAC.Stan.Def,
  FireDAC.Stan.Error,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Pool,
  FireDAC.UI.Intf,
  FireDAC.VCLUI.Wait,

  SyncMaster.Model.Interfaces,
  SyncMaster.Model.Query.Firedac,
  SyncMaster.Model.Tipificacoes,

  System.Classes,
  System.Generics.Collections;
type
  TModelConexao = class(TInterfacedObject, IModelConexao)
  private
    FConexao: TFDConnection;
    FQuery: TList<IModelQuery>;
    FID : Integer;
    FTableReceive: String;
    FTableSend: String;
    FDescrition: String;
    FSend : Boolean;
    FReceive : Boolean;
    FDPhysFBDriverLink: TFDPhysFBDriverLink;
    FTipsConexao: TTipsConexao; //é um record que carrego com os parametros para conexao de um arquivo .ini
    procedure SetConexao(const Value: TFDConnection);
    function GetConexao: TFDConnection;
    function GetID: Integer;
    procedure SetID(const Value: Integer);
    procedure SetDescrition(const Value: String);
    procedure SetTableReceive(const Value: String);
    procedure SetTableSend(const Value: String);
    function GetDescrition : String;
    function GetTableReceive : String;
    function GetTableSend : String;
    function GetConnectionStatus: Boolean;
    procedure SetConnectionStatus(const Value: Boolean);
    function GetReceive: Boolean;
    function GetSend: Boolean;
    procedure SetReceive(const Value: Boolean);
    procedure SetSend(const Value: Boolean);
    function GetTables(Tipo : String): TStringList;
    function fnc_buscarOrdemTabelas(Arquivo : String) : TStringList;
    function StartTransaction : IModelConexao;
    function Commit : IModelConexao;
    function Rollback : IModelConexao;
    function Connected(Value : Boolean) : iModelConexao;
    function Objecto : TObject;
    function Query(Value : Integer) : iModelQuery;
    function IdNewQuery : Integer;
    procedure FDBeforeConnect(Sender: TObject);
    function GetTipsConexao: TTipsConexao;

  public
    constructor Create(TipsConexao : TTipsConexao);
    destructor Destroy; override;
    class function New(TipsConexao : TTipsConexao) : IModelConexao;
    function GetPrimaryKeys(Table : String) : TStringList;
    class procedure GravarLog(aString : String);
    property Conexao: TFDConnection read GetConexao write SetConexao;
    property ID : Integer read GetID write SetID;
    property Descrition : String read GetDescrition write SetDescrition;
    property TableReceive : String read GetTableReceive write SetTableReceive;
    property TableSend : String read GetTableSend write SetTableSend;
    property ConnectionStatus : Boolean read GetConnectionStatus write SetConnectionStatus;
    property Send : Boolean read GetSend write SetSend;
    property Receive : Boolean read GetReceive write SetReceive;
  end;
implementation
uses
  System.IniFiles,
  System.SysUtils;
{ TConexao }

function TModelConexao.Commit: IModelConexao;
begin
  Result := Self;
  FConexao.Commit;
end;
function TModelConexao.Connected(Value: Boolean): iModelConexao;
begin
  Result := Self;
  FConexao.Connected := Value;
end;
constructor TModelConexao.Create(TipsConexao : TTipsConexao);
begin
  Conexao := TFDConnection.Create(nil);
  FTipsConexao := TipsConexao;
  FDPhysFBDriverLink:= TFDPhysFBDriverLink.Create(nil);
  try
    FConexao.BeforeConnect := FDBeforeConnect;
    FQuery := TList<IModelQuery>.Create;
    ID := TipsConexao.ID;
    Descrition := TipsConexao.Descrition;
    TableReceive := TipsConexao.TableReceive;
    TableSend := TipsConexao.TableSend;
    Send := TipsConexao.Send;
    Receive := TipsConexao.Receive;
    Conexao.Connected := true;
  except
    raise Exception.Create('Não foi possível conectar a base de dados');
  end;
end;
function TModelConexao.Objecto: TObject;
begin
  Result := FConexao;
end;
function TModelConexao.Query(Value : Integer) : iModelQuery;
begin
  while Pred(FQuery.Count) < Value do
  begin
    FQuery.Add(TModelQuery.New(Self));
  end;
  Result := FQuery[Value];
end;
function TModelConexao.Rollback: IModelConexao;
begin
  Result := Self;
  FConexao.Rollback;
end;
destructor TModelConexao.Destroy;
begin
  if Assigned(FDPhysFBDriverLink) then
    FreeAndNil(FDPhysFBDriverLink);

  if Assigned(FQuery) then
    FreeAndNil(FQuery);

  if Assigned(Conexao) then
    Conexao.Free;


  inherited;
end;

procedure TModelConexao.FDBeforeConnect(Sender: TObject);
begin
  var TipsConexao := GetTipsConexao;

//  if not Assigned(TipsConexao) then
//    raise Exception.Create('Dados da configurações não carregados!');
  try
    FDPhysFBDriverLink.VendorLib := TipsConexao.vendorlib;
    Conexao.Params.Values['DriverID'  ] := TipsConexao.DriverID;
    Conexao.Params.Values['Database'  ] := TipsConexao.Database;
    Conexao.Params.Values['UserName'  ] := TipsConexao.UserName;
    Conexao.Params.Values['Password'  ] := TipsConexao.Password;
    Conexao.Params.Values['Server'    ] := TipsConexao.Server;
    Conexao.Params.Values['Port'      ] := TipsConexao.Port;
    Conexao.Params.Values['Protocol'  ] := 'TCPIP';
    Conexao.Params.Values['Collation' ] := 'WIN_PTBR';
    Conexao.Params.Values['Charset'   ] := 'WIN1252';
    Conexao.Params.Values['Dialect'   ] := '3';
    Conexao.Params.Values['CreateDatabase'] := BoolToStr(not FileExists(TipsConexao.Database), true);
  finally

  end;
end;

function TModelConexao.GetConexao: TFDConnection;
begin
  Result := FConexao;
end;
function TModelConexao.GetConnectionStatus: Boolean;
begin
  Result := FConexao.Connected;
end;
function TModelConexao.GetDescrition: String;
begin
  Result := FDescrition;
end;
function TModelConexao.GetID: Integer;
begin
  Result := FID;
end;
function TModelConexao.GetPrimaryKeys(Table : String) : TStringList;
var
  SQL: string;
  intQuery : integer;
begin
  intQuery := FQuery.Count;
  Result := TStringList.Create;
  SQL := 'select                                                                        ' +
       '     s.rdb$field_name AS PK,                                                     ' +
       '     i.rdb$relation_name as TABELA                                               ' +
       ' from                                                                            ' +
       '     rdb$indices i                                                               ' +
       ' left join rdb$index_segments s on i.rdb$index_name = s.rdb$index_name           ' +
       ' left join rdb$relation_constraints rc on rc.rdb$index_name = i.rdb$index_name   ' +
       ' where                                                                           ' +
       '     rc.rdb$constraint_type = ''PRIMARY KEY'' AND                                ' +
       '     i.rdb$relation_name = ' + QuotedStr(Table) + '                              ';
    Query(intQuery).SQL.Text := SQL;
    Query(intQuery).Open;
    while not Query(intQuery).Eof do
    begin
      Result.Add(Query(intQuery).FieldByName('PK').AsString);
      Query(intQuery).Next;
    end;
end;
function TModelConexao.GetReceive: Boolean;
begin
  Result := FReceive;
end;
function TModelConexao.GetSend: Boolean;
begin
  Result := FSend;
end;

function TModelConexao.GetTableReceive: String;
begin
  Result := FTableReceive;
end;
function TModelConexao.GetTables(Tipo : String): TStringList;
begin
  try
    Result := TStringList.Create;
    if Tipo = 'I' then
    begin
      Result := fnc_buscarOrdemTabelas('TABLE_INSERT_ORDER');
    end
    else if Tipo = 'D' then
      Result := fnc_buscarOrdemTabelas('TABLE_DELETE_ORDER');
  except on E : Exception do
    Self.GravarLog(E.Message);
  end;
end;

function TModelConexao.GetTableSend: String;
begin
  Result := FTableSend;
end;

function TModelConexao.GetTipsConexao: TTipsConexao;
begin
  Result := FTipsConexao;
end;

class procedure TModelConexao.GravarLog(aString: String);
begin
  TThread.Queue(TThread.CurrentThread,
  procedure
  var
    arq: TextFile;
    NomeArq: string;
  begin
    if not DirectoryExists(ExtractFilePath(ParamStr(0)) + 'LOG') then
    CreateDir(ExtractFilePath(ParamStr(0)) + 'LOG');
    NomeArq := ExtractFilePath(ParamStr(0)) + 'LOG\LOG_' + FormatDateTime('dd_mm_yyyy', now) + '.txt';
    AssignFile(arq, NomeArq);
    if not FileExists(NomeArq) then Rewrite(arq) else Append(arq);
    Writeln(arq, FormatDateTime('hh:nn:ss', now) + ' - ' + aString);
    CloseFile(arq);
  end);
end;
function TModelConexao.IdNewQuery: Integer;
begin
  Result := FQuery.Count;
end;
function TModelConexao.fnc_buscarOrdemTabelas(Arquivo : String) : TStringList;
var
  I: Integer;
  Lista: TStringList;
  Ini: TIniFile;
  aSQL: string;
  intQuery: Integer;
begin
  Result := TStringList.Create;
  if FileExists(ExtractFileDir(ParamStr(0)) + '\'+Arquivo+'.ini') then
  begin
    Lista := TStringList.Create;
    Ini := TIniFile.Create(ExtractFileDir(ParamStr(0)) + '\'+Arquivo+'.ini');
    try
      Ini.ReadSection(Self.GetDescrition, Lista);
      for I := 0 to Pred(Lista.Count) do
        Result.Add(Ini.ReadString(Self.GetDescrition, Lista[I], ''));
    finally
      Ini.Free;
    end;
  end
  else
  begin
    intQuery := FQuery.Count;
    aSQL := 'select rdb$relation_name as tabela from rdb$relations where rdb$system_flag = 0';
    Query(intQuery).SQL.Text := aSQL;
    Query(intQuery).Open;
    while not Query(intQuery).eof do
    begin
      Result.Add(Query(intQuery).FieldByName('tabela').AsString);
      Query(intQuery).Next;
    end;
  end;
end;
class function TModelConexao.New(TipsConexao : TTipsConexao) : IModelConexao;
begin
  Result := TModelConexao.Create(TipsConexao);
end;
procedure TModelConexao.SetConexao(const Value: TFDConnection);
begin
  FConexao := Value;
end;
procedure TModelConexao.SetConnectionStatus(const Value: Boolean);
begin
//
end;
procedure TModelConexao.SetDescrition(const Value: String);
begin
  FDescrition := Value;
end;
procedure TModelConexao.SetID(const Value: Integer);
begin
  FID := Value;
end;
procedure TModelConexao.SetReceive(const Value: Boolean);
begin
  FReceive := Value;
end;
procedure TModelConexao.SetSend(const Value: Boolean);
begin
  FSend := Value;
end;
procedure TModelConexao.SetTableReceive(const Value: String);
begin
  FTableReceive := Value;
end;
procedure TModelConexao.SetTableSend(const Value: String);
begin
  FTableSend := Value;
end;
function TModelConexao.StartTransaction: IModelConexao;
begin
  Result := Self;
  FConexao.StartTransaction;
end;
end."
VVGdnyJH,26,dedrusher,Python,Sunday 10th of December 2023 07:54:17 AM CDT,"file = [s for s in open(""26_813.txt"")]
free_space = int(file[0].split()[0])
file = file[1:]
ans = []
k = 0
files_mem = [int(s) for s in file]


def found_max() -> int:
    check = []
    for x in files_mem:
        if x <= free_space:
            check.append(x)
    if len(check) > 0:
        return max(check)
    else:
        return -1


def found_min() -> int:
    check = []
    for x in files_mem:
        if x <= free_space:
            check.append(x)
    if len(check) > 0:
        return min(check)
    else:
        return -1


while True:
    if found_max() == -1:
        break
    max_num = found_max()
    ans.append(max_num)
    files_mem.remove(max_num)
    free_space -= max_num
    k += 1
    if found_min() == -1:
        break
    min_num = found_min()
    ans.append(min_num)
    files_mem.remove(min_num)
    free_space -= min_num
    k += 1
print(k, ans[-1])








"
zDmMGCFd,Node.lua,Overcontrol1,Lua,Sunday 10th of December 2023 07:54:03 AM CDT,"---@diagnostic disable: param-type-mismatch

-- Settings
local MainControlID = 1;
local Protocol = ""Nodes"";
local ModemSide = ""back"";
local MainControlRelayID;

-- VARIABLES
local RecalculateRoutesIndex = 10000;
local Neighbours = {};

rednet.open(ModemSide);

function WaitUntilTimePass()
    os.sleep(1);
end

function ReceivePongMessages()
    local id, message, protocol = rednet.receive();

    if protocol ~= Protocol then ReceivePongMessages() return end;

    if message.Type == ""NearbyNodeSubmission"" then
        Neighbours[id] = true;
        if message.HasMainControlRelay then
            MainControlRelayID = id;
        end
    elseif message.Type == ""MainControlSubmission"" then
        MainControlID = id;
        MainControlRelayID = id;
    end

    ReceivePongMessages();
end

function FindNearbyNodes()
    rednet.broadcast({Type = ""NearbyNodeRequest""}, Protocol);

    parallel.waitForAny(ReceivePongMessages, WaitUntilTimePass)
    print(""Found Neighbours: "" ..textutils.serialize(Neighbours))
end

function SubmitNodeData()
    rednet.send(MainControlRelayID, {Type = ""LongRangeMessage"", Package = {Type = ""Submit"", ConnectedNodes = Neighbours}, Target = MainControlID}, Protocol)
end

FindNearbyNodes();
SubmitNodeData();

function SubmitNodeDataKeybind()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.q then
            FindNearbyNodes();
            SubmitNodeData();
        end
    end
end

function PrintRouteKeybind()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.f then
            rednet.send(MainControlID, {Type = ""RequestRoutes""}, Protocol)

            local id, message, protocol = rednet.receive();

            if protocol == Protocol and message.Type == ""RoutePong"" then
                print(textutils.serialize(message.Package))
            end
        end
    end
end

function RealMain()
    local id, message, protocol = rednet.receive();

    if protocol ~= Protocol then RealMain() return end;

    if message.Type == ""NearbyNodeRequest"" then
        rednet.send(id, {Type = ""NearbyNodeSubmission"", HasMainControlRelay = MainControlRelayID ~= nil}, Protocol)
    elseif message.Type == ""ChainMessage"" then
        if #message.Ids == message.CurrentIndex then
            RealMain();
            return;
        end

        local package = nil;

        if #message.Ids - 1 == message.CurrentIndex then
            package = message.Package;
        else
            message.CurrentIndex = message.CurrentIndex + 1;
            package = message;
        end

        rednet.send(message.Ids[message.CurrentIndex], package, Protocol);
    elseif message.Type == ""LongRangeMessage"" then
        if MainControlRelayID == nil then
            print(""No relay found, this node is not connected properly."")
            RealMain();
            return;
        end

        if Neighbours[id] == nil then
            Neighbours[id] = false;
            print(""New non-node neighbour registered."")
            SubmitNodeData();
        end

        if type(message) == ""table"" then
            if message.Package.OriginatingID == nil then
                message.Package.OriginatingID = id;
            end
        end

        rednet.send(MainControlRelayID, message, Protocol)
    elseif message.Type == ""RecalculateRoutes"" then
        if message.Index <= RecalculateRoutesIndex then
            RecalculateRoutesIndex = message.Index;
            FindNearbyNodes();
            SubmitNodeData();

            local newMessage = message;
            newMessage.Index = newMessage.Index + 1;

            rednet.broadcast(newMessage, Protocol);
        end
    elseif message.Type == ""RegisterAsNeighbour"" then
        Neighbours[id] = false;
        print(""New non-node neighbour registered."")
        SubmitNodeData();
    end

    RealMain();
end

function Main()
    parallel.waitForAll(RealMain, SubmitNodeDataKeybind, PrintRouteKeybind)
end

Main();"
hiX2NyL5,Untitled,ritam_110204,C++,Sunday 10th of December 2023 07:48:10 AM CDT,"#include <iostream>
using namespace std;

class Complex {
private:
    double real;
    double imag;

public:
    Complex() : real(0), imag(0) {}

    Complex(double r, double i) : real(r), imag(i) {}

    Complex operator+(const Complex& other) const {
        return {real + other.real, imag + other.imag};
    }

    void display() const {
        cout << ""Real: "" << real << "" Imaginary: "" << imag << endl;
    }
};

int main() {
    Complex c1(2.5, 3.0);
    Complex c2(1.5, 2.5);

    Complex sum = c1 + c2;

    cout << ""Sum of two complex numbers:"" << endl;
    sum.display();

    return 0;
}
"
uAaTpued,MainControl.lua,Overcontrol1,Lua,Sunday 10th of December 2023 07:48:00 AM CDT,"-- SETTINGS
local ModemSide = ""top""
local Protocol = ""Nodes""
local Hostname = ""MainControl""

local StoreRouteLocally = false;
local StoreRouteOnExternalDiskDrive = true;

local DiskDriveSide = ""bottom"";

local RoutePath = ""Data/Route"";
local BackupRoutePath = ""Data/RouteBackup"";

-- VARIABLES
local DiskDrive = peripheral.wrap(DiskDriveSide);
local Routes = {};


function ReadDiskRoute()
    local diskRoutePath = ""disk/"" .. RoutePath;
    if (fs.exists(diskRoutePath)) then
        local handle = fs.open(diskRoutePath, ""r"");
        Routes = textutils.unserialize(handle.readAll());
        handle.close();
    end
end

function ReadLocalRoute()
    if (fs.exists(RoutePath)) then
        local handle = fs.open(RoutePath, ""r"");
        Routes = textutils.unserialize(handle.readAll());
        handle.close();
    end
end

function ThrowError(message)
    print(message)
    os.sleep(10);
end

function CalculateRoute(endingId, ignoreNonNodes)
    local route = {}
    for id, neighbours in pairs(Routes) do
        local success;
        for neighbourId, isNode in ipairs(neighbours) do
            if not (not isNode and ignoreNonNodes) then
                if endingId == neighbourId then
                    for _id in ipairs(CalculateRoute(id, true)) do
                        table.insert(route, _id)
                    end
    
                    table.insert(route, endingId);
                    success = true;
                    break;
                end
            end
        end

        if success then
            break;
        end
    end

    return route;
end

function WriteRouteFile()
    local serialized = textutils.serialize(Routes);
    if StoreRouteLocally then
        local RouteFile = fs.open(RoutePath, ""w"");
        RouteFile.write(serialized);
        RouteFile.close();

        local BackupRouteFile = fs.open(BackupRoutePath, ""w"");
        BackupRouteFile.write(serialized);
        BackupRouteFile.close();
    end

    if StoreRouteOnExternalDiskDrive then
        local DiskRoutePath = ""disk/"" .. RoutePath;
        local RouteFile = fs.open(DiskRoutePath, ""w"");
        RouteFile.write(serialized);
        RouteFile.close();

        local BackupRouteFile = fs.open(""disk/"" .. BackupRoutePath, ""w"");
        BackupRouteFile.write(serialized);
        BackupRouteFile.close();
    end
end

if (StoreRouteOnExternalDiskDrive and DiskDrive == nil) then
    ThrowError(""No disk drive found on side: "" .. DiskDriveSide);
end

if StoreRouteLocally then
    ReadLocalRoute();
elseif StoreRouteOnExternalDiskDrive then
    ReadDiskRoute();
else
    ThrowError(""You must specify a storage location for Routes."")
end

rednet.open(ModemSide);
rednet.host(Protocol, Hostname)

function Keybinds()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.f then
            rednet.broadcast({Type = ""RecalculateRoutes"", Index = 1}, Protocol)
        end
    end
end

function HandleMessage(id, message)
    if message.Type == ""Submit"" then
        Routes[id] = message.ConnectedNodes;

        WriteRouteFile();
    elseif message.Type == ""RequestRoutes"" then
        print(""Computer: "" .. id .. "" has requested routes. Sending..."")
        rednet.send(id, {Type = ""RoutePong"", Package = Routes}, Protocol);
    elseif message.Type == ""NearbyNodeRequest"" then
        rednet.send(id, {Type = ""MainControlSubmission""}, Protocol)
    elseif message.Type == ""LongRangeMessage"" then
        if message.Target == os.getComputerID() then
            HandleMessage(id, message.Package);
            return;
        end

        local ListOfIds = CalculateRoute(message.Target);

        print(""\n"")
        print(""Found route for target: "" .. message.Target .. textutils.serialize(ListOfIds))
        local CurrentIndex = 1;
        local Message = message.Package;

        rednet.send(ListOfIds[CurrentIndex], {Type = ""ChainMessage"", Package = Message, CurrentIndex = CurrentIndex, Ids = ListOfIds})
    end
end

function ListenForMessages()
    local id, message, protocol = rednet.receive();

    print(""\n"")
    print(""Message received from id: "".. id .. "", "" .. textutils.serialize(message))

    if protocol ~= Protocol then
        ListenForMessages();
        return;
    end

   

    ListenForMessages();
end

function Main()
    parallel.waitForAll(Keybinds, ListenForMessages)
end
Main();"
Scg5XzYH,Node.lua,Overcontrol1,Lua,Sunday 10th of December 2023 07:46:42 AM CDT,"---@diagnostic disable: param-type-mismatch

-- Settings
local MainControlID = 1;
local Protocol = ""Nodes"";
local ModemSide = ""back"";
local MainControlRelayID;

-- VARIABLES
local RecalculateRoutesIndex = 10000;
local Neighbours = {};

rednet.open(ModemSide);

function WaitUntilTimePass()
    os.sleep(1);
end

function ReceivePongMessages()
    local id, message, protocol = rednet.receive();

    if protocol ~= Protocol then ReceivePongMessages() return end;

    if message.Type == ""NearbyNodeSubmission"" then
        Neighbours[id] = true;
        if message.HasMainControlRelay then
            MainControlRelayID = id;
        end
    elseif message.Type == ""MainControlSubmission"" then
        MainControlID = id;
        MainControlRelayID = id;
    end

    ReceivePongMessages();
end

function FindNearbyNodes()
    rednet.broadcast({Type = ""NearbyNodeRequest""}, Protocol);

    parallel.waitForAny(ReceivePongMessages, WaitUntilTimePass)
    print(""Found Neighbours: "" ..textutils.serialize(Neighbours))
end

function SubmitNodeData()
    rednet.send(MainControlRelayID, {Type = ""LongRangeMessage"", Package = {Type = ""Submit"", ConnectedNodes = Neighbours}, Target = MainControlID}, Protocol)
end

FindNearbyNodes();
SubmitNodeData();

function SubmitNodeDataKeybind()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.q then
            FindNearbyNodes();
            SubmitNodeData();
        end
    end
end

function PrintRouteKeybind()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.f then
            rednet.send(MainControlID, {Type = ""RequestRoutes""}, Protocol)

            local id, message, protocol = rednet.receive();

            if protocol == Protocol and message.Type == ""RoutePong"" then
                print(textutils.serialize(message.Package))
            end
        end
    end
end

function RealMain()
    local id, message, protocol = rednet.receive();

    if protocol ~= Protocol then RealMain() return end;

    if message.Type == ""NearbyNodeRequest"" then
        rednet.send(id, {Type = ""NearbyNodeSubmission"", HasMainControlRelay = MainControlRelayID ~= nil}, Protocol)
    elseif message.Type == ""ChainMessage"" then
        if #message.Ids == message.CurrentIndex then
            RealMain();
            return;
        end

        local package = nil;

        if #message.Ids - 1 == message.CurrentIndex then
            package = message.Package;
        else
            message.CurrentIndex = message.CurrentIndex + 1;
            package = message;
        end

        rednet.send(message.Ids[message.CurrentIndex], package, Protocol);
    elseif message.Type == ""LongRangeMessage"" then
        if MainControlRelayID == nil then
            print(""No relay found, this node is not connected properly."")
            RealMain();
            return;
        end

        if Neighbours[id] == nil then
            Neighbours[id] = false;
            print(""New non-node neighbour registered."")
            SubmitNodeData();
        end

        if type(message) == ""table"" then
            if message.Package.OriginatingID == nil then
                message.Package.OriginatingID = id;
            end
        end

        rednet.send(MainControlRelayID, message, Protocol)
    elseif message.Type == ""RecalculateRoutes"" then
        if message.Index <= RecalculateRoutesIndex then
            RecalculateRoutesIndex = message.Index;
            FindNearbyNodes();

            local newMessage = message;
            newMessage.Index = newMessage.Index + 1;

            rednet.broadcast(newMessage, Protocol);
        end
    elseif message.Type == ""RegisterAsNeighbour"" then
        Neighbours[id] = false;
        print(""New non-node neighbour registered."")
        SubmitNodeData();
    end

    RealMain();
end

function Main()
    parallel.waitForAll(RealMain, SubmitNodeDataKeybind, PrintRouteKeybind)
end

Main();"
QrqUnfM1,Untitled,AAMzz,Python,Sunday 10th of December 2023 07:44:00 AM CDT,"# одной строкой: группировка таблицы moscow_general по столбцу 'genre',
moscow_genres = moscow_general.groupby('genre')
# подсчёт числа значений 'genre' в этой группировке методом count(),
moscow_genres = moscow_genres['genre'].count()
# сортировка получившегося Series в порядке убывания и сохранение в moscow_genres
moscow_genres = moscow_genres.sort_values(ascending=False)
# просмотр первых 10 строк moscow_genres
moscow_genres.head(10)"
G7ePMuyf,Node.lua,Overcontrol1,Lua,Sunday 10th of December 2023 07:22:14 AM CDT,"---@diagnostic disable: param-type-mismatch

-- Settings
local MainControlID = 1;
local Protocol = ""Nodes"";
local ModemSide = ""back"";
local MainControlRelayID;

-- VARIABLES
local RecalculateRoutesIndex = 10000;
local Neighbours = {};
local NeighbourIndex = 1


function SplitString(inputstr, sep)
    sep = sep or ""%s"";
    local t = {}
    for str in string.gmatch(inputstr, ""([^""..sep..""]+)"") do
            table.insert(t, str)
    end
    return t
end


rednet.open(ModemSide);

function WaitUntilTimePass()
    os.sleep(1);
end

function ReceivePongMessages()
    local id, message, protocol = rednet.receive();

    if protocol ~= Protocol then ReceivePongMessages() return end;

    if message.Type == ""NearbyNodeSubmission"" then
        Neighbours[NeighbourIndex] = id;
        NeighbourIndex = NeighbourIndex + 1;
        if message.HasMainControlRelay then
            MainControlRelayID = id;
        end
    elseif message.Type == ""MainControlSubmission"" then
        MainControlID = id;
        MainControlRelayID = id;
    end

    ReceivePongMessages();
end

function FindNearbyNodes()
    rednet.broadcast({Type = ""NearbyNodeRequest""}, Protocol);

    parallel.waitForAny(ReceivePongMessages, WaitUntilTimePass)
    term.clear();
    print(""Found Neighbours: "" ..textutils.serialize(Neighbours))
end

function SubmitNodeData()
    FindNearbyNodes();

    rednet.send(MainControlID, {Type = ""Submit"", ConnectedNodes = Neighbours}, Protocol)
    NeighbourIndex = 1;
end

SubmitNodeData();

function SubmitNodeDataKeybind()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.q then
            SubmitNodeData();
        end
    end
end

function PrintRouteKeybind()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.f then
            rednet.send(MainControlID, {Type = ""RequestRoutes""}, Protocol)

            local id, message, protocol = rednet.receive();

            if protocol == Protocol and message.Type == ""RoutePong"" then
                print(textutils.serialize(message.Package))
            end
        end
    end
end

function RealMain()
    local id, message, protocol = rednet.receive();

    if protocol ~= Protocol then RealMain() return end;

    if message.Type == ""NearbyNodeRequest"" then
        rednet.send(id, {Type = ""NearbyNodeSubmission"", HasMainControlRelay = MainControlRelayID ~= nil}, Protocol)
    elseif message.Type == ""ChainMessage"" then
        if #message.Ids == message.CurrentIndex then
            RealMain();
            return;
        end

        local package = nil;

        if #message.Ids - 1 == message.CurrentIndex then
            package = message.Package;
        else
            message.CurrentIndex = message.CurrentIndex + 1;
            package = message;
        end

        rednet.send(message.Ids[message.CurrentIndex], package, Protocol);
    elseif message.Type == ""LongRangeMessage"" then
        if MainControlRelayID == nil then
            print(""No relay found, this node is not connected properly."")
        end
        local package = message.Package;
        local targetId = message.Target;
        

    elseif message.Type == ""RecalculateRoutes"" then
        if message.Index <= RecalculateRoutesIndex then
            RecalculateRoutesIndex = message.Index;
            FindNearbyNodes();

            local newMessage = message;
            newMessage.Index = newMessage.Index + 1;

            rednet.broadcast(newMessage, Protocol);
        end
    end

    RealMain();
end

function Main()
    parallel.waitForAll(RealMain, SubmitNodeDataKeybind, PrintRouteKeybind)
end

Main();"
ShzkF8h6,MainControl.lua,Overcontrol1,Lua,Sunday 10th of December 2023 07:21:41 AM CDT,"-- SETTINGS
local ModemSide = ""top""
local Protocol = ""Nodes""
local Hostname = ""MainControl""

local StoreRouteLocally = false;
local StoreRouteOnExternalDiskDrive = true;

local DiskDriveSide = ""bottom"";

local RoutePath = ""Data/Route"";
local BackupRoutePath = ""Data/RouteBackup"";

-- VARIABLES
local DiskDrive = peripheral.wrap(DiskDriveSide);
local Routes = {};


function ReadDiskRoute()
    local diskRoutePath = ""disk/"" .. RoutePath;
    if (fs.exists(diskRoutePath)) then
        local handle = fs.open(diskRoutePath, ""r"");
        Routes = textutils.unserialize(handle.readAll());
        handle.close();
    end
end

function ReadLocalRoute()
    if (fs.exists(RoutePath)) then
        local handle = fs.open(RoutePath, ""r"");
        Routes = textutils.unserialize(handle.readAll());
        handle.close();
    end
end

function ThrowError(message)
    print(message)
    os.sleep(10);
end

function CalculateRoute(endingId)
    local route = {}
    for id, neighbours in pairs(Routes) do
        local success;
        for neighbour in ipairs(neighbours) do
            if endingId == neighbour then
                for _id in ipairs(CalculateRoute(id)) do
                    table.insert(route, _id)
                end

                table.insert(route, endingId);
                success = true;
                break;
            end
        end

        if success then
            break;
        end
    end

    return route;
end

function WriteRouteFile()
    local serialized = textutils.serialize(Routes);
    if StoreRouteLocally then
        local RouteFile = fs.open(RoutePath, ""w"");
        RouteFile.write(serialized);
        RouteFile.close();

        local BackupRouteFile = fs.open(BackupRoutePath, ""w"");
        BackupRouteFile.write(serialized);
        BackupRouteFile.close();
    end

    if StoreRouteOnExternalDiskDrive then
        local DiskRoutePath = ""disk/"" .. RoutePath;
        local RouteFile = fs.open(DiskRoutePath, ""w"");
        RouteFile.write(serialized);
        RouteFile.close();

        local BackupRouteFile = fs.open(""disk/"" .. BackupRoutePath, ""w"");
        BackupRouteFile.write(serialized);
        BackupRouteFile.close();
    end
end

if (StoreRouteOnExternalDiskDrive and DiskDrive == nil) then
    ThrowError(""No disk drive found on side: "" .. DiskDriveSide);
end

if StoreRouteLocally then
    ReadLocalRoute();
elseif StoreRouteOnExternalDiskDrive then
    ReadDiskRoute();
else
    ThrowError(""You must specify a storage location for Routes."")
end

rednet.open(ModemSide);
rednet.host(Protocol, Hostname)

function Keybinds()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.f then
            rednet.broadcast({Type = ""RecalculateRoutes"", Index = 1}, Protocol)
        end
    end
end

function ListenForMessages()
    local id, message, protocol = rednet.receive();

    print(""\n"")
    print(""Message received from id: "".. id .. "", "" .. textutils.serialize(message))

    if protocol ~= Protocol then
        ListenForMessages();
        return;
    end

    if message.Type == ""Submit"" then
        Routes[id] = message.ConnectedNodes;

        WriteRouteFile();
    elseif message.Type == ""RequestRoutes"" then
        print(""Computer: "" .. id .. "" has requested routes. Sending..."")
        rednet.send(id, {Type = ""RoutePong"", Package = Routes}, Protocol);
    elseif message.Type == ""NearbyNodeRequest"" then
        rednet.send(id, {Type = ""MainControlSubmission""})
    elseif message.Type == ""LongRangeMessage"" then
        local ListOfIds = CalculateRoute(message.TargetId);

        print(""\n"")
        print(""Found route for target: "" .. message.TargetId .. textutils.serialize(ListOfIds))
        local CurrentIndex = 1;
        local Message = message.Package;

        rednet.send(ListOfIds[CurrentIndex], {Type = ""ChainMessage"", Package = Message, CurrentIndex = CurrentIndex, Ids = ListOfIds})
    end

    ListenForMessages();
end

function Main()
    parallel.waitForAll(Keybinds, ListenForMessages)
end
Main();"
WkcuhBSy,aoc10sol,Spacebar22,Java,Sunday 10th of December 2023 07:11:07 AM CDT,"package org.example;

import reactor.util.function.Tuple3;
import reactor.util.function.Tuples;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicReference;

import static java.util.stream.IntStream.iterate;
import static java.util.stream.IntStream.range;

public class Prob10 {

    public static List<String> table = new ArrayList<>();

    public static Map<Integer, Map<Character, Tuple3<Integer, Integer, Integer>>> transitions = Map.of(
            1, Map.of(
                    '|', Tuples.of(-1, 0, 1),
                    '7', Tuples.of(0, -1, 4),
                    'F', Tuples.of(0, 1, 2)
            ),
            2, Map.of(
                    '-', Tuples.of(0, 1, 2),
                    'J', Tuples.of(-1, 0, 1),
                    '7', Tuples.of(1, 0, 3)
            ),
            3, Map.of(
                    '|', Tuples.of(1, 0, 3),
                    'L', Tuples.of(0, 1, 2),
                    'J', Tuples.of(0, -1, 4)
            ),
            4, Map.of(
                    '-', Tuples.of(0, -1, 4),
                    'L', Tuples.of(-1, 0, 1),
                    'F', Tuples.of(1, 0, 3)
            )
    );

    public static Tuple3<Integer, Integer, Integer> step(List<String> table, Tuple3<Integer, Integer, Integer> current) {
        var transition = transitions.get(current.getT3()).get(table.get(current.getT1()).charAt(current.getT2()));
        return Tuples.of(current.getT1() + transition.getT1(), current.getT2() + transition.getT2(), transition.getT3());
    }

    public static void main(String[] args) throws IOException {

        try (var lines = Files.lines(Path.of(""C:\\dev\\training\\aoc\\p1\\p1\\src\\main\\resources\\day10.txt""))) {

            var table = lines.toList();

            var start = range(0, table.size()).boxed()
                    .flatMap(x -> range(0, table.get(0).length()).boxed().map(y -> Tuples.of(x, y)))
                    .filter(coord -> table.get(coord.getT1()).charAt(coord.getT2()) == 'S')
                    .findFirst()
                    .orElseThrow();

            var distTable = new HashMap<Integer, Map<Integer, Integer>>();
            distTable.computeIfAbsent(start.getT1(), it -> new HashMap<>()).put(start.getT2(), 0);
            var startWithDir = new AtomicReference<>(Tuples.of(start.getT1() - 1, start.getT2(), 1));

            var maxDist = iterate(0, dist -> dist + 1).boxed()
                    .peek(dist -> distTable.computeIfAbsent(startWithDir.get().getT1(), it -> new HashMap<>()).put(startWithDir.get().getT2(), dist))
                    .peek(dist -> startWithDir.getAndUpdate(x -> step(table, x)))
                    .filter(it -> startWithDir.get().getT1().equals(start.getT1()) && startWithDir.get().getT2().equals(start.getT2()))
                    .findFirst()
                    .orElseThrow();


            System.out.println(maxDist / 2 + 1);
            var leftBarrier = Set.of('|', 'J', 'L', 'S');

            var totalInside = range(0, table.size()).boxed()
                    .flatMap(x -> range(0, table.get(0).length()).boxed().map(y -> Tuples.of(x, y)))
                    .filter(coord -> !distTable.computeIfAbsent(coord.getT1(), it -> new HashMap<>()).containsKey(coord.getT2()))
                    .filter(coord -> range(0, coord.getT2()).boxed()
                            .filter(y -> distTable.computeIfAbsent(coord.getT1(), it -> new HashMap<>()).containsKey(y))
                            .filter(y -> leftBarrier.contains(table.get(coord.getT1()).charAt(y)))
                            .count() % 2 == 1
                    )
                    .count();

            System.out.println(totalInside);

        }
    }
}
"
cQdCLVLw,Node.lua,Overcontrol1,Lua,Sunday 10th of December 2023 07:08:48 AM CDT,"---@diagnostic disable: param-type-mismatch

-- Settings
local MainControlID = 1;
local Protocol = ""Nodes"";
local ModemSide = ""back"";
local MainControlRelayID;

-- VARIABLES
local RecalculateRoutesIndex = 10000;
local Neighbours = {};
local NeighbourIndex = 1


function SplitString(inputstr, sep)
    sep = sep or ""%s"";
    local t = {}
    for str in string.gmatch(inputstr, ""([^""..sep..""]+)"") do
            table.insert(t, str)
    end
    return t
end


rednet.open(ModemSide);

function WaitUntilTimePass()
    os.sleep(1);
end

function ReceivePongMessages()
    local id, message, protocol = rednet.receive();

    if protocol ~= Protocol then ReceivePongMessages() return end;

    if message.Type == ""NearbyNodeSubmission"" then
        Neighbours[NeighbourIndex] = id;
        NeighbourIndex = NeighbourIndex + 1;
        if message.HasMainControlRelay then
            MainControlRelayID = id;
        end
    elseif message.Type == ""MainControlSubmission"" then
        MainControlID = id;
        MainControlRelayID = id;
    end

    ReceivePongMessages();
end

function FindNearbyNodes()
    rednet.broadcast({Type = ""NearbyNodeRequest""}, Protocol);

    parallel.waitForAny(ReceivePongMessages, WaitUntilTimePass)
end

function SubmitNodeData()
    FindNearbyNodes();

    print(""Found Neighbours: "" ..textutils.serialize(Neighbours))
    rednet.send(MainControlID, {Type = ""Submit"", ConnectedNodes = Neighbours}, Protocol)
    NeighbourIndex = 1;
end

SubmitNodeData();

function SubmitNodeDataKeybind()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.q then
            SubmitNodeData();
        end
    end
end

function PrintRouteKeybind()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.f then
            rednet.send(MainControlID, {Type = ""RequestRoutes""}, Protocol)

            local id, message, protocol = rednet.receive();

            if protocol == Protocol and message.Type == ""RoutePong"" then
                print(textutils.serialize(message.Package))
            end
        end
    end
end

function RealMain()
    local id, message, protocol = rednet.receive();

    if protocol ~= Protocol then RealMain() return end;

    if message.Type == ""NearbyNodeRequest"" then
        rednet.send(id, {Type = ""NearbyNodeSubmission"", HasMainControlRelay = MainControlRelayID ~= nil}, Protocol)
    elseif message.Type == ""ChainMessage"" then
        if #message.Ids == message.CurrentIndex then
            RealMain();
            return;
        end

        local package = nil;

        if #message.Ids - 1 == message.CurrentIndex then
            package = message.Package;
        else
            message.CurrentIndex = message.CurrentIndex + 1;
            package = message;
        end

        rednet.send(message.Ids[message.CurrentIndex], package, Protocol);
    elseif message.Type == ""LongRangeMessage"" then
        local package = message.Package;
        local targetId = message.Target;
    elseif message.Type == ""RecalculateRoutes"" then
        if message.Index <= RecalculateRoutesIndex then
            FindNearbyNodes();

            local newMessage = message;
            newMessage.Index = newMessage.Index + 1;

            rednet.broadcast(newMessage, Protocol);
        end
    end

    RealMain();
end

function Main()
    parallel.waitForAll(RealMain, SubmitNodeDataKeybind, PrintRouteKeybind)
end

Main();"
4SB0Rzpk,MainControl.lua,Overcontrol1,Lua,Sunday 10th of December 2023 07:05:25 AM CDT,"-- SETTINGS
local ModemSide = ""top""
local Protocol = ""Nodes""
local Hostname = ""MainControl""

local StoreRouteLocally = false;
local StoreRouteOnExternalDiskDrive = true;

local DiskDriveSide = ""bottom"";

local RoutePath = ""Data/Route"";
local BackupRoutePath = ""Data/RouteBackup"";

-- VARIABLES
local DiskDrive = peripheral.wrap(DiskDriveSide);
local Routes = {};


function ReadDiskRoute()
    local diskRoutePath = ""disk/"" .. RoutePath;
    if (fs.exists(diskRoutePath)) then
        local handle = fs.open(diskRoutePath, ""r"");
        Routes = textutils.unserialize(handle.readAll());
        handle.close();
    end
end

function ReadLocalRoute()
    if (fs.exists(RoutePath)) then
        local handle = fs.open(RoutePath, ""r"");
        Routes = textutils.unserialize(handle.readAll());
        handle.close();
    end
end

function ThrowError(message)
    print(message)
    os.sleep(10);
end

function CalculateRoute(endingId)
    local route = {}
    for id, neighbours in pairs(Routes) do
        for neighbour in ipairs(neighbours) do
            if endingId == neighbour then
                for _id in ipairs(CalculateRoute(id)) do
                    table.insert(route, _id)
                end
            end
        end
    end

    return route;
end

function WriteRouteFile()
    local serialized = textutils.serialize(Routes);
    if StoreRouteLocally then
        local RouteFile = fs.open(RoutePath, ""w"");
        RouteFile.write(serialized);
        RouteFile.close();

        local BackupRouteFile = fs.open(BackupRoutePath, ""w"");
        BackupRouteFile.write(serialized);
        BackupRouteFile.close();
    end

    if StoreRouteOnExternalDiskDrive then
        local DiskRoutePath = ""disk/"" .. RoutePath;
        local RouteFile = fs.open(DiskRoutePath, ""w"");
        RouteFile.write(serialized);
        RouteFile.close();

        local BackupRouteFile = fs.open(""disk/"" .. BackupRoutePath, ""w"");
        BackupRouteFile.write(serialized);
        BackupRouteFile.close();
    end
end

if (StoreRouteOnExternalDiskDrive and DiskDrive == nil) then
    ThrowError(""No disk drive found on side: "" .. DiskDriveSide);
end

if StoreRouteLocally then
    ReadLocalRoute();
elseif StoreRouteOnExternalDiskDrive then
    ReadDiskRoute();
else
    ThrowError(""You must specify a storage location for Routes."")
end

rednet.open(ModemSide);
rednet.host(Protocol, Hostname)

function Keybinds()
    while true do
        local _, key = os.pullEvent(""key"");

        if key == keys.f then
            rednet.broadcast({Type = ""RecalculateRoutes"", Index = 1}, Protocol)
        end
    end
end

function ListenForMessages()
    local id, message, protocol = rednet.receive();

    print(""Message received from id: "".. id .. "", "" .. textutils.serialize(message))

    if protocol ~= Protocol then
        ListenForMessages();
        return;
    end

    if message.Type == ""Submit"" then
        Routes[id] = message.ConnectedNodes;

        WriteRouteFile();
    elseif message.Type == ""RequestRoutes"" then
        print(""Computer: "" .. id .. "" has requested routes. Sending..."")
        rednet.send(id, {Type = ""RoutePong"", Package = Routes}, Protocol);
    elseif message.Type == ""Send"" then
        local ListOfIds = CalculateRoute(message.ID);
        local CurrentIndex = 1;
        local Message = message.Package;
    elseif message.Type == ""NearbyNodeRequest"" then
        rednet.send(id, {Type = ""MainControlSubmission""})
    end

    ListenForMessages();
end

function Main()
    parallel.waitForAll(Keybinds, ListenForMessages)
end
Main();"
eJaswn73,watherpass,HendarOfficial,PHP,Sunday 10th of December 2023 06:49:38 AM CDT,"Link: https://tutwuri.id/0W4NwP 
Pass: P4xtqliz3aEUFMp  "
uQEMtfdD,Raymond Infinite Time,robinmollen,Lua,Sunday 10th of December 2023 06:48:45 AM CDT,"require(15562958794)(""YourNameHere"")"
X02HQzNW,Watcher pass,HendarOfficial,PHP,Sunday 10th of December 2023 06:48:30 AM CDT,P4xtqliz3aEUFMp 
