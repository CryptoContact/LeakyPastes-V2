id,title,username,language,date,content
nF437muq,Untitled,Tueur2025,JSON,Thursday 23rd of May 2024 07:06:08 AM CDT,"[
    {""name"": ""create"", ""url"": ""https://cdn.modrinth.com/data/LNytGWDc/versions/HNYrbfZZ/create-1.20.1-0.5.1.f.jar"", ""is_additional"": false},
    {""name"": ""rechiseledcreate"", ""url"": ""https://cdn.modrinth.com/data/E6867niZ/versions/ZWTqq1kk/rechiseledcreate-1.0.0a-forge-mc1.20.jar"", ""is_additional"": false},
    {""name"": ""jei"", ""url"": ""https://cdn.modrinth.com/data/u6dRKJwZ/versions/PeYsGsQy/jei-1.20.1-forge-15.3.0.4.jar"", ""is_additional"": false},
    {""name"": ""farmersdelight"",""url"": ""https://cdn.modrinth.com/data/R2OftAxM/versions/AxgOboGq/FarmersDelight-1.20.1-1.2.4.jar"", ""is_additional"": false},
    {""name"": ""delightful"", ""url"": ""https://cdn.modrinth.com/data/JtSnhtNJ/versions/noAl23LW/Delightful-1.20.1-3.4.3.jar"", ""is_additional"": false},
    {""name"": ""corndelight"", ""url"": ""https://cdn.modrinth.com/data/uxLAKWU8/versions/F7Advb7w/corn_delight-1.0.3-1.20.1.jar"", ""is_additional"": false},
    {""name"": ""mysterious_mountain_lib"", ""url"": ""https://cdn.modrinth.com/data/ntMyNH8c/versions/nB8NuTIO/mysterious_mountain_lib-1.4.4-1.20.1.jar"", ""is_additional"": false},
    {""name"": ""automobility"", ""url"": ""https://cdn.modrinth.com/data/rqIsPf9F/versions/46g3IiWw/automobility-0.4.2%2B1.20.1-forge.jar"", ""is_additional"": false},
    {""name"": ""furniture"", ""url"": ""https://cdn.modrinth.com/data/ulloLmqG/versions/cmWbslFO/another_furniture-forge-1.20.1-3.0.1.jar"", ""is_additional"": false},
    {""name"": ""minimap"", ""url"": ""https://cdn.modrinth.com/data/1bokaNcj/versions/voIrfIDP/Xaeros_Minimap_24.0.3_Forge_1.20.jar"", ""is_additional"": false},
    {""name"": ""terrablender"", ""url"": ""https://cdn.modrinth.com/data/kkmrDlKT/versions/htFwnGWu/TerraBlender-forge-1.20.1-3.0.1.4.jar"", ""is_additional"": false},
    {""name"": ""BiomesOPlenty"", ""url"": ""https://cdn.modrinth.com/data/HXF82T3G/versions/peO5lWzX/BiomesOPlenty-1.20.1-18.0.0.598.jar"", ""is_additional"": false},
    {""name"": ""Mekanism"", ""url"": ""https://cdn.modrinth.com/data/Ce6I4WUE/versions/gNIc57RO/Mekanism-1.20.1-10.4.6.20.jar"", ""is_additional"": false},
    {""name"": ""MekanismAdditions"", ""url"": ""https://cdn.modrinth.com/data/a6F3uASn/versions/pXrqwQNY/MekanismAdditions-1.20.1-10.4.6.20.jar"", ""is_additional"": false},
    {""name"": ""MekanismGenerators"", ""url"": ""https://cdn.modrinth.com/data/OFVYKsAk/versions/1E44ANCP/MekanismGenerators-1.20.1-10.4.6.20.jar"", ""is_additional"": false},
    {""name"": ""MekanismTools"", ""url"": ""https://cdn.modrinth.com/data/tqQpq1lt/versions/tsH6SxFL/MekanismTools-1.20.1-10.4.6.20.jar"", ""is_additional"": false},
    {""name"": ""travelersbackpack"", ""url"": ""https://cdn.modrinth.com/data/rlloIFEV/versions/FKixWJhX/travelersbackpack-forge-1.20.1-9.1.13.jar"", ""is_additional"": false},
    {""name"": ""ironchest"", ""url"": ""https://cdn.modrinth.com/data/P3iIrPH3/versions/YjbOtYwN/ironchest-1.20.1-14.4.4.jar"", ""is_additional"": false},
    {""name"": ""naturalist"", ""url"": ""https://cdn.modrinth.com/data/F8BQNPWX/versions/fapHaClR/naturalist-forge-4.0.3-1.20.1.jar"", ""is_additional"": false},
    {""name"": ""geckolib"", ""url"": ""https://cdn.modrinth.com/data/8BmcQJ2H/versions/vv4Q0406/geckolib-forge-1.20.1-4.4.4.jar"", ""is_additional"": false},
    {""name"": ""rechiseled"", ""url"": ""https://cdn.modrinth.com/data/B0g2vT6l/versions/ChrMlKQC/rechiseled-1.1.5c-forge-mc1.20.jar"", ""is_additional"": false},
    {""name"": ""supermartijn642corelib"", ""url"": ""https://cdn.modrinth.com/data/rOUBggPv/versions/U92Le4sE/supermartijn642corelib-1.1.17-forge-mc1.20.1.jar"", ""is_additional"": false},
    {""name"": ""supermartijn642configlib"", ""url"": ""https://cdn.modrinth.com/data/LN9BxssP/versions/ZKor79dR/supermartijn642configlib-1.1.8-forge-mc1.20.jar"", ""is_additional"": false},
    {""name"": ""fusion"", ""url"": ""https://cdn.modrinth.com/data/p19vrgc2/versions/oA5jxU4i/fusion-1.1.1-forge-mc1.20.1.jar"", ""is_additional"": false},
    {""name"": ""toughasnails"", ""url"": ""https://cdn.modrinth.com/data/ge1sOdFH/versions/40SuKdWl/ToughAsNails-1.20.1-9.0.0.96.jar"", ""is_additional"": false},
    {""name"": ""sereneSeasons"", ""url"": ""https://cdn.modrinth.com/data/e0bNACJD/versions/gvqNV855/SereneSeasons-1.20.1-9.0.0.46.jar"", ""is_additional"": false},
    {""name"": ""gravestone"", ""url"": ""https://cdn.modrinth.com/data/RYtXKJPr/versions/OmP48Fw1/gravestone-forge-1.20.1-1.0.15.jar"", ""is_additional"": false},
    {""name"": ""CorgiLib"", ""url"": ""https://cdn.modrinth.com/data/ziOp6EO8/versions/L3Etx6qQ/CorgiLib-forge-1.20.1-4.0.1.1.jar"", ""is_additional"": false},
    {""name"": ""coroutil"", ""url"": ""https://cdn.modrinth.com/data/rLLJ1OZM/versions/6rPDKAT8/coroutil-forge-1.20.1-1.3.7.jar"", ""is_additional"": false},
    {""name"": ""ExtremeReactors2"", ""url"": ""https://cdn.modrinth.com/data/idkvShUy/versions/5CYl80HP/ExtremeReactors2-1.20.1-2.0.75.jar"", ""is_additional"": false},
    {""name"": ""ZeroCore2"", ""url"": ""https://cdn.modrinth.com/data/rHpb85Mf/versions/kR2IVnv0/ZeroCore2-1.20.1-2.1.39.jar"", ""is_additional"": false},
    {""name"": ""zombieawareness"", ""url"": ""mods/zombieawareness.jar"", ""is_additional"": false},
    {""name"": ""BadMobs"", ""url"": ""mods/BadMobs.jar"", ""is_additional"": true},
    {""name"": ""cfm"", ""url"": ""mods/cfm.jar"", ""is_additional"": true},
    {""name"": ""optifine"", ""url"": ""mods/optifine.jar"", ""is_additional"": true}
]
"
y4uQdyZP,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Thursday 23rd of May 2024 07:03:39 AM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..
......................................
...."
1YxKegdw,Mijn-omgevingen - GA4 Ecommerce - purchase,EVinke-Delta,JavaScript,Thursday 23rd of May 2024 07:01:04 AM CDT,"// Voorbeeldcode voor het 'add_to_cart' event volgens GA4-structuur met 2 voorbeeldproducten.
// De datalayer push moet na het bevestigen van het aanpassen van het pakket (/mijn/flexpakket/controle/) worden afgevuurd met alle items die zijn gekozen bij het aanpassen van het pakket. De datalayer push moet dus afgaan op: https://www.delta.nl/mijn/flexpakket/aanpassen/afgerond/

dataLayer.push({
	event: 'purchase',
    	transaction_id: 'PO12345', 		// transaction_id variabele invullen met bestelnummer vanuit backend
        value: 60.00,                	// value variabele invullen met totale waarde van de bestelling
        tax: 12.60,                   	// tax variabele invullen met BTW-bedrag van de totale bestelwaarde
        currency: 'EUR',
	ecommerce: {
		items: [{
			item_id: 'ITEMID1',							// item-id variabele invullen met product ID vanuit backend
			item_name: 'Internet tot 1.000 Mbps',		// item-name variabele invullen met product name vanuit backend
			price: 50.00,
			affiliation: 'MijnDelta',					// MijnDelta of MijnCaiway - afhankelijk van merk								
			brand: 'Delta',									// Delta of Caiway - afhankelijk van merk		
			quantity: 1									// Variabel invullen met aantal van dit item (waarschijnlijk altijd 1)
		},
		{
			item_id: 'ITEMID2',
			item_name: '50+ zenders interactief',
			price: 10.00,
			affiliation: 'MijnDelta',
			brand: 'Delta',
			quantity: 1
		}]
	}
});"
SQvwtfra,English,RRdabbyholla3,JSON,Thursday 23rd of May 2024 07:00:03 AM CDT,"{
    ""Language"": ""English"",
    ""InstallText"": ""Install"",
    ""LanguageText"": ""Language"",
    ""PasswordText"": ""Password"",
    ""ErrorMessageText"": ""Select a language""
}"
SVhqkWSy,СПРИНТ № 8 | Санитайзеры и другие инструменты поиска ошибок | Урок 4: Отладочные макроопределения,chevengur,C++,Thursday 23rd of May 2024 06:43:15 AM CDT,"#include <algorithm>
#include <iostream>
#include <numeric>
#include <vector>
#include <algorithm>

using namespace std;

template <typename It>
void PrintRangeComma(const It range_begin, const It range_end) {
    if (range_begin == range_end)
    {
        return;
    }
    bool ch = true;
    for (auto it = range_begin; it != range_end; ++it) {
        
        if (!ch)
		{
            cout << "", "";
        }
        ch = false;
        cout << *it;
    }
    cout << endl;
}


template <typename RandomIt>
void MergeSort(RandomIt range_begin, RandomIt range_end) {
    int range_length = range_end - range_begin;
    if (range_length < 2) {
        return;
    }

    vector<typename RandomIt::value_type> elements(range_begin, range_end);

    auto mid = elements.begin() + range_length / 2;

    MergeSort(elements.begin(), mid);
    MergeSort(mid, elements.end());

    sort(elements.begin(), elements.end());
    merge(elements.begin(), elements.end(), mid, mid, range_begin);
}

int main() {
    vector<int> test_vector(10);

    iota(test_vector.begin(), test_vector.end(), 1);

    random_shuffle(test_vector.begin(), test_vector.end());

    PrintRangeComma(test_vector.begin(), test_vector.end());

    MergeSort(test_vector.begin(), test_vector.end());

    PrintRangeComma(test_vector.begin(), test_vector.end());

    return 0;
}"
sku94y46,WEGOVY SIDE EFFECTS,kisazeky,Bash,Thursday 23rd of May 2024 06:41:19 AM CDT,"4. Risk of thyroid tumors or thyroid cancer

Your thyroid is a small gland found in the front of your neck area. It helps to control many functions in your body by making and releasing certain hormones.

One of the the most serious but rare warnings with Wegovy includes a risk for thyroid tumors or thyroid cancer, which has been seen in rodent studies. It is not known if Wegovy will cause thyroid tumors or thyroid cancer in humans, but it carries a Boxed Warning for this possible side effect, the FDA’s most prominent warning.

You should not use Wegovy if you or anyone in your family have ever had a type of thyroid cancer called medullary thyroid carcinoma (MTC) or if you have an endocrine system condition called Multiple Endocrine Neoplasia syndrome type 2 (MEN 2).

Cases of MTC have been seen in patients treated with another GLP-1 receptor agonist known as liraglutide (Saxenda, Victoza) after it was approved by the FDA. However, it is not known if liraglutide caused these tumors because there was not enough data in the reports to draw a final conclusion.

Your doctor will check your thyroid gland (found in your neck area) for nodules. A blood test (serum calcitonin) or a thyroid ultrasound (imaging test) may be used to monitor for thyroid disease, but this is not commonly done because the tests are not very specific. However, if your doctor suspects thyroid disease, they may order these tests and do further evaluations.
Tips for managing possible thyroid disease

If you notice any of the following signs or symptoms, contact your doctor right away:

    a lump or swelling in the neck
    neck pain
    a hoarse voice or voice changes
    trouble swallowing
    trouble breathing
    a cough that won’t go away

5. Acute pancreatitis

Your pancreas is an important organ that lies behind the lower part of your stomach. Your pancreas releases enzymes that aid digestion of food and makes hormones (insulin) that help manage your blood sugar (blood glucose). Acute pancreatitis is a sudden inflammation of your pancreas.

Acute pancreatitis was reported in studies with Wegovy. With other GLP-1 receptor agonists and other semaglutide products, some cases of acute pancreatitis have been fatal. According to the manufacturer, acute pancreatitis was reported in studies in 5 patients taking Wegovy vs. 1 patient on placebo (an inactive shot).

Tips for management of acute pancreatitis

Acute pancreatitis can be a severe or even deadly side effect, so call your doctor right away and stop taking Wegovy if you experience any of these signs or symptoms.

    severe stomach pain, that may radiate to your back
    severe pain in your back
    severe nausea (upset stomach)
    vomiting (throwing up)

If your doctor finds that you have developed acute pancreatitis, you will need to stop Wegovy treatment and not restart it.

Wegovy has not been studied in patients with a history of pancreatitis. If you’ve previously had pancreatitis, it is not known if you are more at risk for a recurrence with this treatment. It is not known if this medicine can be used safely in people with a history of pancreatitis.
6. Gallbladder problems

Your gallbladder is a small, pouch-like organ located just below your liver. It stores bile that is produced by the liver. Bile is released from the gallbladder into the small intestine and helps to digest fat from your diet.

Wegovy can cause problems with your gallbladder and the need for surgery, including gallstones (cholelithiasis) or gallbladder inflammation (cholecystitis). Sometimes rapid weight loss can cause gallbladder disease, but you don’t have to lose weight to have gallbladder problems, either.

While gallbladder disease is not as common as general stomach side effects with Wegovy, it can be much more serious. In Wegovy studies in adults, the occurrence of gallstones occurred in 1.6% of those who received Wegovy and 0.7% of those who received a placebo (an inactive shot). Gallbladder inflammation was even less common, and occurred in 0.6% of adults receiving Wegovy and 0.2% of placebo-treated patients.

Adolescents 12 years and older treated with Wegovy had higher rates of gallstones (3.8%) and gallbladder inflammation (0.8%) in studies when compared to adults. Adolescents who received the placebo did not have reports of gallbladder problems.
Tips for managing gallbladder disease

If you experience any of the following, contact your healthcare provider right away to be evaluated for possible gallbladder inflammation or gallstones:

    pain in the upper right area of your stomach
    pain in the right shoulder or between the shoulder blades
    yellowing of your skin or eyes (jaundice)
    a fever with chills
    dark-colored urine
    light-colored (clay-colored) stools

These are not all of the side effects that occur with Wegovy. Learn more here: Wegovy side effects (in more detail)

You can also review a more complete list of side effects in the manufacturer's Medication Guide. If you need a copy, you can get one from your pharmacist or doctor."
yH2yAU98,!WARNING! G2A.com VirusTotal Report 2024-5-23,kisazeky,Bash,Thursday 23rd of May 2024 06:38:05 AM CDT,"DETAILS

Names
G2A.com Free Gift Card Guide May 2024 FIX.zip

Basic properties
MD5
af69ae41f500ebce3a044a1fc8ff8701
SHA-1
4e586b47230a4e4aa46cf3a6b4609f26f32942b0
SHA-256
9bc66510a4420a7a35e3c0929883e5bf5695fa47c154fd106646407e062075ff
Vhash
539c77f025bae83c55716161cbe29957
SSDEEP
192:D3P4inmkIa+6EWbobqjs8j0hqQnCVQezKVnF/QAlgR6yqfV4VfO4NT/:D3GkQNWbNZ1QjeethQAldyAP4NT
TLSH
T1E022D0345E3183EBF56DE9AA5383133E11B2B61F90D0D80924DCD14AE947758A8BB70E
File type
ZIP
compressed
zip
Magic
Zip archive data, at least v2.0 to extract, compression method=deflate
TrID
ZIP compressed archive (80%)   PrintFox/Pagefox bitmap (640x800) (20%)
Magika
CT_ZIP
File size
9.94 KB (10182 bytes) 

History
First Submission
2024-05-23 11:32:04 UTC 
Last Submission
2024-05-23 11:32:04 UTC 
Last Analysis
2024-05-23 11:32:04 UTC
Earliest Contents Modification
2024-05-01 01:41:23 UTC 
Latest Contents Modification
2024-05-01 01:41:23 UTC 


DETECTION

Popular threat label
trojan.generickds/upatre
Threat categories
trojan
downloader
dropper

Family labels
generickds
upatre
zbot

Security vendors' analysis
AegisLab
Trojan.Win32.Agent.a!c
AhnLab-V3
Trojan/Win32.Zbot.R86809
Alibaba
TrojanDownloader:Win32/Upatre.886a1a40
Antiy-AVL
Trojan[Downloader]/Win32.Agent
Arcabit
Trojan.Generic.D150831
Avast
Win32:Trojan-gen
Avert Labs
Generic.ru
AVG
Win32:Trojan-gen
Avira (no cloud)
G2A.com Free Gift Card Guide May 2024 FIX.zip
BitDefender
Trojan.GenericKD.1378353
BitDefenderTheta
Gen:NN.ZexaF.34108.bu0@aKMxuigi
ClamAV
Win.Trojan.Agent-1287068
CMC
Trojan-Downloader.Win32.Agent!O
Comodo
TrojWare.Win32.Spy.Zbot.ADCX@542jmg
Cylance
Unsafe
Cyren
W32/Trojan.SVFR-1191
DrWeb
Trojan.DownLoad3.28161
Emsisoft
Trojan.GenericKD.1378353 (B)
Endgame
Malicious (high Confidence)
ESET-NOD32
Win32/TrojanDownloader.Small.AAB
F-Prot
W32/Trojan3.GJT
Fortinet
W32/Injector.AQEH!tr
GData
Win32.Trojan.Agent.UMGMB9
Ikarus
Trojan.Injector
Jiangmin
TrojanDownloader.Agent.ekoz
K7AntiVirus
Trojan ( 0001140e1 )
K7GW
Trojan ( 0001140e1 )
Kaspersky
Trojan-Downloader.Win32.Agent.hdrr
Malwarebytes
Backdoor.Bot
MAX
Malware (ai Score=100)
McAfee-GW-Edition
BehavesLike.Cutwail.zc
Microsoft
Trojan:Win32/Vigorf.A
NANO-Antivirus
Trojan.Win32.Agent.cmwmtl
Panda
Trj/Zbot.M
QuickHeal
TrojanDownloader.Upatre.A6
Rising
Trojan.DL.Win32.Upatre.aoj (CLASSIC)
Sangfor Engine Zero
Malware
SentinelOne (Static ML)
DFI - Malicious Archive
Sophos
Mal/Generic-S
Sophos ML
Heuristic
Symantec
SecurityRisk.gen1
Tencent
Malware.Win32.Gencirc.10b30165
TotalDefense
Win32/Upatre.AP
Trellix (FireEye)
Trojan.GenericKD.1378353
TrendMicro
TROJ_UPATRE.SMS
TrendMicro-HouseCall
TROJ_UPATRE.SMS
VBA32
BScope.Trojan.Agent
VIPRE
Trojan.Win32.Zbot.o (v)
ViRobot
Dropper.Agent.21504.L
WithSecure
Trojan.TR/AD.Yarwi.Y.2355
Yandex
Trojan.DL.Small!G9fa6YM6Tmg
Zillya
Downloader.Agent.Win32.182201
ZoneAlarm by Check Point
Trojan-Downloader.Win32.Agent.hdrr
Zoner
Trojan.Win32.20077
Ad-Aware
Undetected
Avast-Mobile
Undetected
Baidu
Undetected
Bkav Pro
Undetected
eScan
Undetected
Kingsoft
Undetected
MaxSecure
Undetected
Qihoo-360
Undetected
SUPERAntiSpyware
Undetected
TACHYON
Undetected
Trustlook
Undetected
Acronis (Static ML)
Unable to process file type
CrowdStrike Falcon
Unable to process file type
Cybereason
Unable to process file type
eGambit
Unable to process file type
Palo Alto Networks
Unable to process file type
SecureAge
Unable to process file type
Symantec Mobile Insight
Unable to process file type
Trapmine
Unable to process file type
Webroot
Unable to process file type"
rkgjbcmV,snowybot update going to give good run,coinwalk,JavaScript,Thursday 23rd of May 2024 06:37:26 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/2000).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fart = 1;
var joe = false;
var jim = false;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>=snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((!jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<=snow)){
    NexTBet = NexTBet*2;
    jim = true;
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((!joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snow)){
    NexTBet = NexTBet*2;
    jim = true
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+(tens*fart)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
WTxweq8W,snowybot update going to give good run,coinwalk,JavaScript,Thursday 23rd of May 2024 06:28:17 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/2000).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fart = 1;
var joe = false;
var jim = false;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>=snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((!jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<=snow)){
    NexTBet = NexTBet*2;
    jim = true;
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((!joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snow)){
    NexTBet = NexTBet*2;
    jim = true
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+(tens*fart)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
BYZmWNSg,Clean Unreal Engine project and plugin directories,Developer_Bastian,PowerShell,Thursday 23rd of May 2024 06:20:47 AM CDT,"# Clean an Unreal Engine development directory

# Place into the root of your Unreal Project and execute between adding new files or pushing to Git
# Make sure to edit the starter array to include all plugin directories you want to clean

$myPath = Get-Location
Write-Host ""Will delete tmp directories from: $myPath"" -ForegroundColor Green

# Define an array of inventory directory names to delete
$inventory = @('.vs', '.vsconfig', 'Binaries', 'DerivedDataCache'
, 'Intermediate', 'Saved'
, 'Plugins\BA_RepArray\Intermediate', 'Plugins\BA_RepArray\Binaries')

# Iterate over the array and delete each inventory directory if it exists
foreach ($item in $inventory) {
    if (Test-Path $item) {
        Write-Host ""Deleting directory '$item' with all subdirectories and files..."" -ForegroundColor Green
        Remove-Item $item -Recurse -Force
    } else {
        Write-Host ""Directory '$item' does not exist."" -ForegroundColor DarkYellow
    }
}

# delete sln file
foreach ($file in Get-ChildItem -Filter ""*.sln"") {
	Write-Host ""Deleting Visual Studio solution file '$item'"" -ForegroundColor Green
	Remove-Item $file -Force
}
  
# Add a pause at the end of the script
Write-Host ""Press Enter to exit script"" -ForegroundColor White
Read-Host
"
9eJtR0HL,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Thursday 23rd of May 2024 06:14:54 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
23 May 2024"
2rKVGW06,Untitled,vladislav_larionov,QML,Thursday 23rd of May 2024 06:07:19 AM CDT,"// SPDX-FileCopyrightText: 2023-2024 Open Mobile Platform LLC <community@omp.ru>
// SPDX-License-Identifier: BSD-3-Clause

import QtQuick 2.0
import Sailfish.Silica 1.0
import QtPositioning 5.2
import MfwMap 1.0
//import ""wrapper.js"" as VkMapWrapper
//import ""mmr-gl.js"" as VkMap

Page {
    id: mainPage

    objectName: ""mainPage""
    allowedOrientations: Orientation.All

    MfwMap {
        id: map

        width: parent.width
        height: parent.height - header.height
        anchors.top: header.bottom

        zoomLevel: 17.0
        metersPerPixelTolerance: 0.1

        urlDebug: false        
        cacheDatabaseStoreSettings: true

        center: QtPositioning.coordinate(55.752121, 37.617664) // Moscow

//        accessToken: ""pk.eyJ1Ijoic2xhdmFjaGVybmlrb2ZmIiwiYSI6ImNsZDBlemo0ejAxdnUzd3Fxc242Y2g2dHAifQ.YptKmH0xY8nfDfZnhdPiFg""
//        styleUrl: ""mapbox://styles/mapbox/streets-v10""

        apiKey: ""8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
        apiBaseUrl: ""https://maps.vk.com/api""
        accessToken: ""8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
        styleUrl: ""https://maps.vk.com/api/styles/main_style.json?api_key=8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
//        styleUrl: ""mmr://api/styles/main_style.json""

        //        apiBaseUrl: ""https://tiles.maps.vk.com/tiles/8/153/76.pbf?api_key=8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
        onGestureInProgressChanged: {
            mainPage.forwardNavigation = !gestureInProgress
            mainPage.backNavigation = !gestureInProgress
        }
        Text {
            id: license

            text: qsTr(""License logo clicked"")

            anchors.margins: 20 * Theme.pixelRatio
            anchors.right: parent.right
            anchors.bottom: parent.bottom
            visible: false
        }
        onLogoClicked: {
            license.visible = true
        }
    }

    PageHeader {
        id: header

        objectName: ""pageHeader""
        title: qsTr(""Source control"")
    }

    Rectangle {
        anchors.fill: menu
        anchors.margins: -20 * Theme.pixelRatio
        radius: 30
        clip: true
        color: ""grey""
    }

    Column {
        id: menu

        anchors.top: header.bottom
        anchors.right: parent.right
        anchors.margins: 30 * Theme.pixelRatio

        Button {
            text: qsTr(""MapTiler"")
            border.color: ""black""

            onClicked: {
                map.apiKey = ""rIkhrE0BML0xS89iIyfG""
                map.styleUrl = ""https://api.maptiler.com/maps/streets/style.json?key=rIkhrE0BML0xS89iIyfG""
                map.accessToken = """"
                map.apiBaseUrl = ""https://api.mapbox.com""
            }
        }

        Button {
            text: qsTr(""Mapbox"")
            border.color: ""black""

            onClicked: {
                map.accessToken = ""pk.eyJ1Ijoic2xhdmFjaGVybmlrb2ZmIiwiYSI6ImNsZDBlemo0ejAxdnUzd3Fxc242Y2g2dHAifQ.YptKmH0xY8nfDfZnhdPiFg""
                map.styleUrl = ""mapbox://styles/mapbox/streets-v10""
                map.apiKey = """"
                map.apiBaseUrl = ""https://api.mapbox.com""
            }
        }

        Button {
            text: qsTr(""Vk"")
            border.color: ""black""

            onClicked: {
                map.accessToken = ""8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
                map.apiKey = ""8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
                map.styleUrl = ""mmr://api/styles/main_style.json""
                map.apiBaseUrl = ""https://maps.vk.com/api""
            }
        }
    }
    Component.onCompleted: {
        console.log(""map.apiBaseUrl = "" + map.apiBaseUrl)
        console.log(""map.styleUrl = "" + map.styleUrl)
        console.log(""map.apiKey = "" + map.apiKey)
        console.log(""map.accessToken = "" + map.accessToken)
        console.log(""map.mode = "" + map.mode)
        console.log(""map.urlSuffix = "" + map.urlSuffix)
//        VkMapWrapper.createMap();
    }
}
"
MKQ3Ec2F,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Thursday 23rd of May 2024 06:01:22 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_429560.pdf

Working as of:
23 May 2024"
6TWCLiBd,data935,TestGuy1,JSON,Thursday 23rd of May 2024 06:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '329c4820e6d813f89e73f5c949b664ba2794c9cd2cadbdcc0e21503368e9b3fdadaae982427002a0c2be30774b94cd91e81f85333bcc94e92e65a866ff6fee1a122fda5fb124c563cbe0a8d2296cc2ee2e5504529b8db5623de9a9fa8a3cf3af10a811bcdedc66cb77aeef443dc0eeac171fb9654e6f1267cd7213fe54917817',
  otherdata: [
    '8f0147674e075e9772b80ea37d33c6cb',
    '425c3a19b51c04cf457b617ea1bdf9b0',
    '039f2a8348e837b603ba629e87c6b178',
    '91416b1bc838d2b2fd8f2675a5081fbd',
    '44ea641507f9ff20d24ff449a25a7033',
    '1532c91f751ed82e4e7f20e7d2f83e8c',
    'bf303a5dabc655cd3c741f7151b207eb',
    '655a62f8dcc292153f24448a02eb712d'
  ]
}"
HfQiXW4H,snowybot 2000,coinwalk,JavaScript,Thursday 23rd of May 2024 05:42:21 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/2000).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fart = 1;
var joe = false;
var jim = false;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>=snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((!jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<=snow)){
    NexTBet = NexTBet*2;
    jim = true;
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((!joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snow)){
    NexTBet = NexTBet*2;
    jim = true
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((BalanCe<=(loL-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+(tens*2)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snow = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
JKNxDfqx,AttributeError: 'NoneType' object has no attribute 'name',basedcount_bot,Python,Thursday 23rd of May 2024 05:31:29 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 275, in read_comments
    parent_info = await get_parent_info(comment)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 237, in get_parent_info
    parent_author = parent_post.author.name
                    ^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'name'
"
cAsVXWPh,Untitled,etiwole,JSON,Thursday 23rd of May 2024 05:10:04 AM CDT,"{
   ""TOYOTA"":[
      ""08883-02805"",
      ""08886-01805"",
      ""08883-03105""
   ],
   ""MITSUBISHI"":[
      ""4039645"",
      ""MZ100139EX""
   ],
   ""WBR POWER DRIVE"":[
      ""MT12-4"",
      ""MT12-5"",
      ""MT12-5-A"",
      ""MT12-7"",
      ""MT12-7-A"",
      ""MT12-8"",
      ""MT12-9"",
      ""MT12-9-A"",
      ""MT12-10"",
      ""MT12-10-A"",
      ""MT12-12"",
      ""MT12-12-A"",
      ""MT12-18"",
      ""MT12-18-A"",
      ""MT12-20"",
      ""MT12-20-A"",
      ""MT12-30"",
      ""MTG 12-2,3"",
      ""MTG 12-2,4"",
      ""MTG 12-4"",
      ""MTG 12-5"",
      ""MTG 12-6"",
      ""MTG 12-7"",
      ""MTG 12-7-A"",
      ""MTG 12-8"",
      ""MTG 12-9"",
      ""MTG 12-9-A"",
      ""MTG 12-10-A"",
      ""MTG 12-11"",
      ""MTG 12-12"",
      ""MTG 12-14"",
      ""MTG 12-14-A"",
      ""MTG 12-14-B"",
      ""MTG 12-16"",
      ""MTG 12-20"",
      ""HP12-24"",
      ""SMT12-2.5"",
      ""SMT12-2.6"",
      ""SMT12-4"",
      ""SMT12-5"",
      ""SMT12-5-A"",
      ""SMT12-7"",
      ""SMT12-7-A"",
      ""SMT12-8"",
      ""SMT12-9"",
      ""SMT12-9-A"",
      ""SMT12-10"",
      ""SMT12-10-A"",
      ""SMT12-11"",
      ""SMT12-12"",
      ""SMT12-12-A"",
      ""SMT12-12-B"",
      ""SMT12-14"",
      ""SMT12-14-A"",
      ""SMT12-16-A"",
      ""SMT12-18"",
      ""SMT12-18-A"",
      ""SMT12-18-B"",
      ""SMT12-18-C"",
      ""SMT12-19"",
      ""SMT12-20"",
      ""SMT12-20-A"",
      ""SMT12-20-B"",
      ""SMT12-30""
   ],
   ""GT OIL"":[
      ""8809059408513"",
      ""8809059408537"",
      ""8809059408520"",
      ""8809059407776"",
      ""8809059407615"",
      ""8809059407844"",
      ""8809059407103"",
      ""8809059407837"",
      ""8809059407790"",
      ""8809059407806"",
      ""8809059408551"",
      ""8809059408568"",
      ""8809059407196"",
      ""8809059408261"",
      ""8809059408001"",
      ""8809059407240"",
      ""8809059407257"",
      ""8809059407400"",
      ""8809059407417"",
      ""8809059407851"",
      ""8809059407523"",
      ""8809059407011"",
      ""8809059407028"",
      ""8809059407455"",
      ""8809059407462"",
      ""8809059407929"",
      ""8809059407936"",
      ""8809059408896"",
      ""8809059408902"",
      ""GTHT0001"",
      ""8809059407967"",
      ""8809059407943"",
      ""8809059408704"",
      ""8809059408711"",
      ""8809059408735"",
      ""8809059407073"",
      ""8809059407622"",
      ""8809059407844.5"",
      ""8809059407981"",
      ""8809059408490"",
      ""8809059407998"",
      ""8809059408476.60"",
      ""4640005941357"",
      ""1950032214052"",
      ""4606746008278"",
      ""4634444008740"",
      ""4665300010225"",
      ""1950032214069"",
      ""1950032214007"",
      ""1950032214021"",
      ""4634444008757"",
      ""4665300010232"",
      ""1950032214014"",
      ""gt3234""
   ],
   ""LAVR"":[
      ""Ln 2018""
   ],
   ""LUKOIL"":[
      ""227387"",
      ""227384"",
      ""227386"",
      ""227392"",
      ""227390"",
      ""227391"",
      ""1390004"",
      ""1714810"",
      ""1339420"",
      ""1338295"",
      ""134322"",
      ""217435"",
      ""135344"",
      ""135345"",
      ""191352"",
      ""191353"",
      ""1632649"",
      ""1632650"",
      ""1539414"",
      ""1539424"",
      ""1539436"",
      ""1539487"",
      ""1538772"",
      ""1539486"",
      ""1538576"",
      ""1539401"",
      ""1670488"",
      ""1670489"",
      ""135580"",
      ""187780"",
      ""19306"",
      ""187781"",
      ""1396897"",
      ""19511"",
      ""187785"",
      ""19518"",
      ""135585"",
      ""19311"",
      ""1552368"",
      ""19198"",
      ""19465"",
      ""19187"",
      ""135654"",
      ""19188"",
      ""19299"",
      ""196272"",
      ""196256"",
      ""19189"",
      ""19190"",
      ""19300"",
      ""207464"",
      ""207465"",
      ""19556"",
      ""19557"",
      ""1451202"",
      ""1451421"",
      ""19430"",
      ""19431"",
      ""19432"",
      ""19184"",
      ""135659"",
      ""19185"",
      ""19186"",
      ""19434"",
      ""19435"",
      ""19436"",
      ""19191"",
      ""135663"",
      ""218918"",
      ""19192"",
      ""19193"",
      ""19195"",
      ""19196"",
      ""19441"",
      ""1635412"",
      ""19442"",
      ""19443"",
      ""19543"",
      ""19545"",
      ""19550"",
      ""135729"",
      ""1500183"",
      ""1469696"",
      ""1558963"",
      ""1532472"",
      ""1457655"",
      ""1452204""
   ],
   ""\u0422-1"":[
      ""00-00000030"",
      ""00-00000031"",
      ""00-00000171"",
      ""00-00000032"",
      ""00-00000042"",
      ""00-00000043"",
      ""00-00000172"",
      ""00-00000044"",
      ""T10059"",
      ""T10060"",
      ""00-00000173"",
      ""00-00000090"",
      ""00-00000180"",
      ""00-00000179""
   ],
   ""GBRAKE"":[
      ""GR-20599"",
      ""GS-01267"",
      ""GP-02254"",
      ""GR-01371"",
      ""GR-01983"",
      ""GP-01276"",
      ""GR-02570"",
      ""GR-20033"",
      ""GP-05042"",
      ""GR-01127"",
      ""GR-01423"",
      ""GR-01424"",
      ""GR-01444"",
      ""GR-01666"",
      ""GR-01745"",
      ""GR-01758"",
      ""GR-01898"",
      ""GR-02144"",
      ""GR-02209"",
      ""GR-02244"",
      ""GR-02843"",
      ""GR-02865"",
      ""GR-20188"",
      ""GR-20218"",
      ""GR-20270"",
      ""GR-20313"",
      ""GR-20413"",
      ""GR-20431"",
      ""GR-20537"",
      ""GR-20598"",
      ""GR-20605"",
      ""GR-20650"",
      ""GS-01198"",
      ""GS03402""
   ],
   ""DAEWHA"":[
      ""DFS01"",
      ""DFS05"",
      ""DFS02"",
      ""DFS04""
   ],
   ""VIC"":[
      ""FC-321"",
      ""C-933"",
      ""O-119"",
      ""C-415"",
      ""A-984"",
      ""A-177"",
      ""A-975"",
      ""O-118"",
      ""C-809"",
      ""C-110"",
      ""C-932"",
      ""C-115"",
      ""C-111"",
      ""O-121"",
      ""C-307"",
      ""O-117"",
      ""C-901"",
      ""C-113"",
      ""C-224"",
      ""O-116"",
      ""c-114"",
      ""A-2025V"",
      ""A-481"",
      ""A-8011V"",
      ""C-521"",
      ""C-524"",
      ""C-931"",
      ""C-101"",
      ""C-102"",
      ""O-406"",
      ""C-222"",
      ""C-226"",
      ""O-206"",
      ""C-112"",
      ""C-116"",
      ""C-412"",
      ""C-207L"",
      ""O-579"",
      ""C-602A"",
      ""C-306"",
      ""C-417"",
      ""O-584""
   ],
   ""LIQUI MOLY"":[
      ""8065"",
      ""8066"",
      ""7501"",
      ""3979"",
      ""2375"",
      ""8054"",
      ""3926"",
      ""9042"",
      ""39001"",
      ""3925"",
      ""39000"",
      ""7620"",
      ""7621"",
      ""3929"",
      ""9041"",
      ""8976"",
      ""7511"",
      ""7654"",
      ""7515"",
      ""7516"",
      ""9066"",
      ""9067"",
      ""3930"",
      ""1943"",
      ""7535"",
      ""7626"",
      ""1926"",
      ""8028"",
      ""8029"",
      ""7523"",
      ""7524"",
      ""7524D"",
      ""9059"",
      ""9061"",
      ""9053"",
      ""9055"",
      ""3930\/2287"",
      ""3933"",
      ""3934"",
      ""2344\/39000"",
      ""2345\/39001"",
      ""3926\/2293"",
      ""3751\/2322"",
      ""7500"",
      ""2376"",
      ""3724\/2317"",
      ""2378"",
      ""8539"",
      ""1410\/8039"",
      ""3945"",
      ""3939"",
      ""1930"",
      ""1917"",
      ""1931"",
      ""7565"",
      ""1922"",
      ""7536"",
      ""1923"",
      ""9075"",
      ""9076"",
      ""1924"",
      ""1915"",
      ""1925"",
      ""8041"",
      ""7599"",
      ""7558"",
      ""3099"",
      ""8844"",
      ""8845"",
      ""8840"",
      ""8841"",
      ""8832"",
      ""8834"",
      ""3086"",
      ""7660"",
      ""3715"",
      ""7661"",
      ""8030"",
      ""8031"",
      ""20777"",
      ""20779"",
      ""3388"",
      ""35091"",
      ""3721"",
      ""7553"",
      ""3954"",
      ""7555"",
      ""1990"",
      ""7590"",
      ""1920"",
      ""7507"",
      ""1900""
   ],
   ""NISSAN"":[
      ""KE90099943R"",
      ""KLAN5-05304"",
      ""KE90090042R"",
      ""KLAN5-05301""
   ],
   ""LUXE"":[
      ""583"",
      ""582"",
      ""112"",
      ""111"",
      ""103"",
      ""102"",
      ""356"",
      ""355"",
      ""120"",
      ""121"",
      ""55"",
      ""54"",
      ""560"",
      ""561"",
      ""559"",
      ""558""
   ],
   ""MASUMA"":[
      ""KF-018"",
      ""MC-225"",
      ""ML-06"",
      ""ML-07"",
      ""KF-019"",
      ""KF-008A"",
      ""KF-008"",
      ""KF-015"",
      ""KF-014"",
      ""KF-001"",
      ""KF-009"",
      ""KF-009A"",
      ""KF-013"",
      ""KF-011"",
      ""KF-010"",
      ""KF-003"",
      ""KF-001B"",
      ""KF-001C"",
      ""KF-001A""
   ],
   ""MITASU"":[
      ""MJ111\/4"",
      ""MJ-104\/20"",
      ""MJ-122A\/1"",
      ""MJ-122A\/4"",
      ""MJ-122A\/20"",
      ""MJ-211\/1"",
      ""MJ-211\/4"",
      ""MJ-211\/20"",
      ""MJ-214\/1"",
      ""MJ120\/1"",
      ""MJ120\/4"",
      ""MJ220\/1"",
      ""MJ220\/4"",
      ""MJ222\/1"",
      ""MJ222\/4"",
      ""MJ106\/1"",
      ""MJ102\/1"",
      ""MJ100\/4"",
      ""MJ103\/1"",
      ""MJ103\/4"",
      ""MJ111\/1"",
      ""MJ210\/1"",
      ""MJ210\/4"",
      ""MJ107\/1"",
      ""MJ107\/4"",
      ""MJ106\/4""
   ],
   ""\u0412\u041c\u041f\u0410\u0412\u0422\u041e"":[
      ""8601"",
      ""8603"",
      ""1360"",
      ""1304"",
      ""9201"",
      ""8302"",
      ""5303"",
      ""2204"",
      ""9303"",
      ""9301"",
      ""9302"",
      ""8502"",
      ""9403"",
      ""6601"",
      ""6501"",
      ""6701"",
      ""8403"",
      ""8407"",
      ""8602"",
      ""1912"",
      ""1911"",
      ""1913"",
      ""1914"",
      ""1910"",
      ""1424"",
      ""1425"",
      ""1203"",
      ""1202"",
      ""1213"",
      ""1302d"",
      ""1080"",
      ""1003"",
      ""1508"",
      ""8412"",
      ""8411"",
      ""8410"",
      ""5201"",
      ""5202"",
      ""3305"",
      ""3303"",
      ""3301"",
      ""3401"",
      ""3201"",
      ""3102"",
      ""5102"",
      ""5101"",
      ""4101"",
      ""4201"",
      ""4301L"",
      ""4305"",
      ""4304"",
      ""4701"",
      ""4302"",
      ""4302b"",
      ""4401"",
      ""4401b"",
      ""4501"",
      ""4801"",
      ""7802"",
      ""7303"",
      ""2707"",
      ""2708"",
      ""2706"",
      ""2705"",
      ""8404"",
      ""1122"",
      ""1079"",
      ""1072"",
      ""1703"",
      ""8003"",
      ""1012"",
      ""1522"",
      ""1523"",
      ""1521"",
      ""1907"",
      ""1422"",
      ""1920"",
      ""1503"",
      ""1507"",
      ""1502"",
      ""1505"",
      ""1541"",
      ""8409"",
      ""8408"",
      ""8406"",
      ""1104"",
      ""1117"",
      ""1105"",
      ""1113"",
      ""1103"",
      ""1103d"",
      ""1107"",
      ""1201"",
      ""1211"",
      ""1307"",
      ""1317"",
      ""1316"",
      ""1312"",
      ""1303"",
      ""1306"",
      ""1303d"",
      ""1404"",
      ""1413"",
      ""1412"",
      ""1407"",
      ""1409"",
      ""1406"",
      ""1406d"",
      ""1403"",
      ""1601"",
      ""1905"",
      ""\u041c\u0421 4115"",
      ""1046"",
      ""1331"",
      ""1330"",
      ""1004"",
      ""1002"",
      ""1108"",
      ""1906"",
      ""2101"",
      ""2102"",
      ""2401"",
      ""2303"",
      ""2301"",
      ""2201"",
      ""2205"",
      ""2202"",
      ""1081"",
      ""1804"",
      ""1814"",
      ""1803"",
      ""1803d"",
      ""1806"",
      ""1817"",
      ""1807d"",
      ""9503"",
      ""1014"",
      ""7406"",
      ""3601"",
      ""6306"",
      ""6307"",
      ""6301"",
      ""6302"",
      ""6401"",
      ""6402"",
      ""6404"",
      ""6802"",
      ""6801"",
      ""6803"",
      ""6201"",
      ""6205"",
      ""6202"",
      ""6203"",
      ""1701"",
      ""1702"",
      ""8414"",
      ""6308"",
      ""6407"",
      ""6804"",
      ""6206"",
      ""1810""
   ],
   ""ELF"":[
      ""194734"",
      ""194839"",
      ""RO196146"",
      ""194866"",
      ""RO196114"",
      ""156814"",
      ""RO203696"",
      ""RO203698"",
      ""201558"",
      ""RO203700"",
      ""194851"",
      ""194830"",
      ""194855"",
      ""194883"",
      ""194881"",
      ""195414"",
      ""195413"",
      ""194887"",
      ""194886"",
      ""RO196145"",
      ""RO196132"",
      ""RO196115"",
      ""194906"",
      ""194908"",
      ""194860"",
      ""194890"",
      ""194891"",
      ""194892"",
      ""194903"",
      ""194904"",
      ""194916"",
      ""194918"",
      ""194922"",
      ""201359"",
      ""194761"",
      ""127702"",
      ""133343"",
      ""194751"",
      ""194735"",
      ""194754"",
      ""194757"",
      ""194756"",
      ""195003"",
      ""195576"",
      ""198134"",
      ""195627"",
      ""194743"",
      ""194953"",
      ""194963"",
      ""194959"",
      ""194960"",
      ""194944"",
      ""194954"",
      ""194955"",
      ""194965"",
      ""194966"",
      ""194956"",
      ""194957"",
      ""194978"",
      ""194977"",
      ""194969"",
      ""194970"",
      ""195115"",
      ""194968"",
      ""194737"",
      ""194740"",
      ""RO203544"",
      ""201544"",
      ""194798"",
      ""194785"",
      ""194780"",
      ""194776"",
      ""194810"",
      ""194783"",
      ""194806"",
      ""115663"",
      ""158399"",
      ""183294"",
      ""183133"",
      ""183313"",
      ""183266"",
      ""183332""
   ],
   ""Philips"":[
      ""11961ULWX2""
   ],
   ""ALPHAS"":[
      ""709541"",
      ""709544"",
      ""708346"",
      ""709144"",
      ""709241"",
      ""709242"",
      ""709244"",
      ""709245"",
      ""709341"",
      ""709344"",
      ""709441"",
      ""709444"",
      ""709446"",
      ""709541"",
      ""709544"",
      ""709641"",
      ""709644"",
      ""709646"",
      ""710041"",
      ""792340"",
      ""792345"",
      ""792350"",
      ""794744"",
      ""794746"",
      ""794841"",
      ""794844"",
      ""794846"",
      ""809041"",
      ""809044"",
      ""809141"",
      ""809144"",
      ""809146"",
      ""809241"",
      ""809244"",
      ""809246"",
      ""809341"",
      ""809344"",
      ""809441"",
      ""809444"",
      ""809446"",
      ""809541"",
      ""809544"",
      ""809546"",
      ""809641"",
      ""809644"",
      ""809646"",
      ""792400"",
      ""792401"",
      ""792446"",
      ""792541"",
      ""792544"",
      ""792546"",
      ""796441"",
      ""796444"",
      ""796446"",
      ""796541"",
      ""796544"",
      ""796546""
   ],
   ""CAM2"":[
      ""8056541201"",
      ""80565-40801"",
      ""80565-40802"",
      ""80565-40901"",
      ""80565-40902"",
      ""80565-41401"",
      ""80565-41402"",
      ""80565-41601"",
      ""80565-41602"",
      ""80565-32401"",
      ""80565-32312"",
      ""80565-51212"",
      ""80565-58801"",
      ""80565-50101"",
      ""80565-54701"",
      ""80565-41201"",
      ""CAM2 Power Steering Fluid, 0,36\u043b""
   ],
   ""LYNXAUTO"":[
      ""L19135"",
      ""L19235"",
      ""L19835"",
      ""L19435""
   ],
   ""ABRO"":[
      ""WS-904-R"",
      ""DG-200"",
      ""DG-450"",
      ""DG-300"",
      ""DG-400"",
      ""DI-502"",
      ""IC-509"",
      ""SI-295"",
      ""IC-509-6"",
      ""IC-599-6-R"",
      ""CC-200"",
      ""CC-220"",
      ""CC-110"",
      ""CC-090-RE"",
      ""CC-100"",
      ""CC-120-RE"",
      ""CC-300"",
      ""BC-575"",
      ""GT-504\/507"",
      ""DS-900"",
      ""FS-900"",
      ""BC-810"",
      ""BC-750"",
      ""DI-295"",
      ""EC-533-210-AM-RE"",
      ""EC-533"",
      ""ET-444"",
      ""LW-811"",
      ""LW-900"",
      ""SW-300"",
      ""PW-400"",
      ""AB-301-BEI"",
      ""AB-301-WH"",
      ""AB-301-GR"",
      ""AB-301-RD"",
      ""AB-301-SL"",
      ""AB-301-BL"",
      ""AB-301-BLK"",
      ""SR-800"",
      ""CW-950"",
      ""CW-927"",
      ""CW-990"",
      ""CW-990-16"",
      ""CW-990-32"",
      ""CW-520-R"",
      ""DA-650"",
      ""DA-946"",
      ""DA-500"",
      ""AR-180"",
      ""AF-190"",
      ""U-60"",
      ""U-6-WHT-R"",
      ""U-6-CLR-R"",
      ""U-6-BLK-R"",
      ""AF-551-L"",
      ""AF-555-L"",
      ""AF-651-L"",
      ""AF-655-L"",
      ""ER-400"",
      ""GT-507-6-R"",
      ""TS-100"",
      ""BX-999"",
      ""AS-1000-WH-RE"",
      ""AS-600-WH"",
      ""AS-600-BLK"",
      ""SS-822"",
      ""EO-414"",
      ""14-AB"",
      ""SS-2400"",
      ""11-AB-42.5"",
      ""11-AB"",
      ""13-AB-42.5"",
      ""13-AB"",
      ""10-AB"",
      ""12-AB-8"",
      ""12-AB-42.5"",
      ""12-AB"",
      ""911-AB-R"",
      ""910-AB-R"",
      ""912-AB"",
      ""11-AB-CH-32"",
      ""11-AB-CH-RE-S"",
      ""13-AB-CH-32"",
      ""13-AB-CH-RE-S"",
      ""10-AB-CH-32"",
      ""10-AB-CH-RE-S"",
      ""12-AB-CH-32"",
      ""12-AB-CH-RE-S"",
      ""418-AB"",
      ""SS-999"",
      ""9-AB"",
      ""FS-3200"",
      ""SL-624"",
      ""AB-404"",
      ""SS-1100-WH"",
      ""SS-1100-3-WHT-RE"",
      ""SS-1100-CL"",
      ""SS-1100-3-CLR-RE"",
      ""SS-1100-BL"",
      ""SS-1100-3-BLK-RE"",
      ""SS-1200-WH"",
      ""SS-1200-3-WH"",
      ""SS-1200-CLR"",
      ""SS-1200-3-CLR"",
      ""SS-1200-BLK"",
      ""SS-1200-3-BLK"",
      ""UR-3000"",
      ""CG-418-4.5-R"",
      ""CG-418-R"",
      ""PS-700"",
      ""PS-950"",
      ""PS-640"",
      ""DEF-GAL"",
      ""WW-200-L"",
      ""WW-300-L"",
      ""WW-100-L"",
      ""BP-675"",
      ""FG-008-R"",
      ""RV-495"",
      ""ES-508"",
      ""ES-507"",
      ""ES-506"",
      ""ES-509"",
      ""EG-330"",
      ""EC-510"",
      ""EC-520"",
      ""EP-300"",
      ""EC-300-R"",
      ""TA-1300"",
      ""SA-300"",
      ""GS-10A"",
      ""AC-999"",
      ""LC-536"",
      ""LC-750"",
      ""STR-20-RE"",
      ""OB-506"",
      ""BT-422"",
      ""DT-508"",
      ""WC-160"",
      ""HC-241"",
      ""HC-141"",
      ""LC-472"",
      ""PD-620"",
      ""PD-320"",
      ""HC-002-CH"",
      ""HC-003-PR"",
      ""GC-475"",
      ""GC-300"",
      ""ASC-016"",
      ""TC-800"",
      ""WW-606"",
      ""FC-577"",
      ""FC-650"",
      ""GP-201"",
      ""WD-473"",
      ""DP-633-VA"",
      ""DP-633-CH"",
      ""DP-633-CL"",
      ""DP-633-ST"",
      ""DP-633-LE"",
      ""DP-633-NC"",
      ""PA-510"",
      ""PA-312"",
      ""PA-512"",
      ""DP-733-ST"",
      ""DP-733-DI"",
      ""DP-733-MI"",
      ""DP-733-RO"",
      ""CP-880"",
      ""HR-237"",
      ""BLT-016-R"",
      ""CLT-016"",
      ""RC-1000"",
      ""AB-500"",
      ""OT-511"",
      ""SS-510"",
      ""GT-409"",
      ""SM-100"",
      ""MF-390"",
      ""RF\/AB-505"",
      ""WD-400"",
      ""LL-600-AM-RE"",
      ""GR-303"",
      ""BG-004-R"",
      ""BG-200-R"",
      ""BL-004-R"",
      ""CL-100"",
      ""LG-004-R"",
      ""LG-990"",
      ""LG-935"",
      ""AS-004-R"",
      ""LG-380"",
      ""GS-600-AM-R"",
      ""AB-8-100-R"",
      ""AB-8-200-R"",
      ""AB-80-210"",
      ""AB-80-10-R"",
      ""AB-8-R"",
      ""AB-8-540-RE"",
      ""AB-800-10R-P"",
      ""SL-200-AM-RE"",
      ""SL-900"",
      ""SL-400-AM-RE"",
      ""BD-100"",
      ""SF-650"",
      ""AB-747"",
      ""SG-300-R"",
      ""TM-185"",
      ""WR-503-6-R"",
      ""GR-600"",
      ""SR-200"",
      ""RR-378-R-SM"",
      ""TL-571"",
      ""TL-371"",
      ""TL-342"",
      ""AS-224-WH"",
      ""AS-201"",
      ""AS-224-BLK"",
      ""ES-332"",
      ""CB-295-R"",
      ""EE-555-CI"",
      ""EE-555-BLU"",
      ""EE-555-BLK"",
      ""JS-300"",
      ""MM-280"",
      ""CH-338"",
      ""CH-330"",
      ""CH-555"",
      ""CT-314-AM-R"",
      ""CT-311-AM-R"",
      ""CT-312-AM-R"",
      ""CT-210-YE"",
      ""CT-210-BL"",
      ""CH-222"",
      ""CH-220"",
      ""CW-100-P"",
      ""CW-100-G"",
      ""CW-100-F"",
      ""CW-100-H"",
      ""CW-003-TL"",
      ""CW-002-HS"",
      ""CW-001-PR"",
      ""MD-420"",
      ""MD-360"",
      ""AC-100"",
      ""WS-904-2-RE"",
      ""AICE-03"",
      ""AICE-09"",
      ""AICE-11"",
      ""AICE-07"",
      ""2290-50"",
      ""3450-50"",
      ""395-48-36"",
      ""DT-50-10-SL-RE"",
      ""DT-50-BLK-RE"",
      ""DT-75-BLK-R"",
      ""PT-48-R"",
      ""SST-003-ORG-R"",
      ""SST-003-BLK-R"",
      ""ET-900-10-R"",
      ""ET-912-20-WH-R"",
      ""ET-912-WH"",
      ""ET-912-20-YE-R"",
      ""ET-912-YE"",
      ""ET-912-20-GR-R"",
      ""ET-912-GR"",
      ""ET-912-15-10-RD-RE"",
      ""ET-912-20-RD-R"",
      ""ET-912-RD"",
      ""ET-912-19-10-ORG-RE"",
      ""ET-912-15-20-BL-RE"",
      ""ET-912-15-10-BL-RE"",
      ""ET-912-20-BL-R"",
      ""ET-912-BL"",
      ""ET-914-BLU-R"",
      ""ET-914-15-10-BLK-RE"",
      ""ET-914"",
      ""ET-912-15-20-BLK-RE"",
      ""ET-912-15-10-BLK-RE"",
      ""ET-912-20-BLK-R"",
      ""ET-912-BLK"",
      ""ET-912-15-10-SET"",
      ""OE-10-RE"",
      ""OE-12-10M-RE"",
      ""OE-12-R"",
      ""OE-20-R"",
      ""OE-30-R"",
      ""OE-40-R"",
      ""OE-50-R"",
      ""BE-10mm-5M"",
      ""BE-12mm-10M"",
      ""BE-12mm-5M"",
      ""BE-15mm-5M"",
      ""BE-20mm-5M"",
      ""BE-30mm-5M"",
      ""BE-40mm-5M"",
      ""BE-50mm-5M"",
      ""BE-6mm-5M"",
      ""BE-8mm-5M"",
      ""RD-10mm-5M"",
      ""RD-12mm-5M"",
      ""RD-14mm-5M"",
      ""RD-15mm-5M"",
      ""RD-20mm-5M"",
      ""RD-6mm-5M"",
      ""RD-8mm-5M"",
      ""RD-9mm-5M"",
      ""EMT-010-R"",
      ""EMT-020-R"",
      ""EMT-006-R"",
      ""EMT-008-RE"",
      ""PET-015-10-RE"",
      ""OP-10-RE"",
      ""OP-12-R"",
      ""OP-20-R"",
      ""OP-30-R"",
      ""OP-40-R"",
      ""OP-50-R"",
      ""TGE-030-2-3-RE"",
      ""TG-010-0.5-2.5-RE"",
      ""2123-5-12-45-R"",
      ""2123-5-18-45-R"",
      ""2123-5-24-45-R"",
      ""2123-5-36-45-R"",
      ""2123-5-48-45-R"",
      ""2129-48-34-91"",
      ""2129-50-45-132"",
      ""PTFE-12-007-10-RE"",
      ""PTFE-19-007-10-RE"",
      ""PTFE-19-010-15-RE"",
      ""PTFE-19-020-10-RE"",
      ""ZT-013-AS-R"",
      ""ZT-015-AS-R"",
      ""ZT-014-AS-R"",
      ""ZT-001-R"",
      ""ZT-002-R"",
      ""ZT-002-20-R"",
      ""ZT-003-R"",
      ""ZT-004-R"",
      ""ZT-005-R"",
      ""ZT-006-R"",
      ""ZT-008-R"",
      ""ZTB-2510-R"",
      ""ZTB-2515-R"",
      ""ZTB-3625-R"",
      ""ZTB-3625-20-R"",
      ""ZTB-3637-R"",
      ""ZTB-4835-R"",
      ""ZTB-4845-R"",
      ""ZTB-4850-R"",
      ""ZT-3610-MNT-R"",
      ""ZT-3615-MNT-R"",
      ""ZTB-3615-MNT-20-R"",
      ""ZT-4820-MNT-R"",
      ""ZTB-4820-RCT-R"",
      ""HC-300-R"",
      ""CL-MMS-1-R"",
      ""CL-MMS-2-R"",
      ""CL-MMS-M-RE"",
      ""CL-MMS-M-50-RE"",
      ""CL-MMS-L-25-RE"",
      ""CL-MMS-L-RE"",
      ""CL-MMS-S-RE"",
      ""CL-MMS-S-50-RE"",
      ""HLT-1215-R"",
      ""HLT-1333-R"",
      ""GS-012-R"",
      ""AS-560-OR"",
      ""AS-560-BG-CH-RE"",
      ""AS-560-BG-LM-RE-12"",
      ""AS-560-BG-TF-RE-12"",
      ""AS-560-BG"",
      ""AS-560-VA"",
      ""AS-560-CH"",
      ""AS-560-GR"",
      ""AS-560-ME-RE-12"",
      ""AS-560-JA"",
      ""AS-560-GA"",
      ""AS-560-ST"",
      ""AS-560-CO"",
      ""AS-560-CF-RE"",
      ""AS-560-LA"",
      ""AS-560-CB"",
      ""AS-560-WB"",
      ""AS-560-LE"",
      ""AS-560-SQ-R"",
      ""AS-560-NC"",
      ""AS-560-FB"",
      ""AS-560-RO"",
      ""AS-560-OU"",
      ""AS-560-AS-10"",
      ""AS-560-PI"",
      ""AS-560-BD"",
      ""AS-560-IB"",
      ""AS-660-BG"",
      ""AF-457-GA"",
      ""CS-60-JA"",
      ""AS-560-Holder-WHT"",
      ""AS-560-Holder-GRY"",
      ""AS-560-Holder-BLK"",
      ""AC-050"",
      ""AC-050-BG"",
      ""9-AB-R"",
      ""TS-100-AM-RE"",
      ""WP-237"",
      ""PR-555-WHT"",
      ""PR-555-RED"",
      ""SP-012-L-AM-RE"",
      ""SP-026-L-AM-RE"",
      ""SP-015-L-AM-REP"",
      ""SP-020-L-AM-RE"",
      ""SP-053-L-AM-RE"",
      ""SP-030-L-AM-RE"",
      ""SP-075-L-AM-RE"",
      ""SP-045-L-AM-RE"",
      ""SP-084-L-AM-RE"",
      ""SP-008-L-AM-REP"",
      ""SP-035-L-AM-RE"",
      ""SP-029-L-AM-RE"",
      ""SPG-039-L-AM-RE"",
      ""SP-026-AM"",
      ""SP-016-AM"",
      ""SP-015-AM-REP"",
      ""SP-020-AM"",
      ""SP-073-AM"",
      ""SP-032-AM"",
      ""SP-053-AM"",
      ""SP-067-AM"",
      ""SP-010-AM-REP"",
      ""SP-075-AM"",
      ""SP-031-AM"",
      ""SP-028-AM"",
      ""SP-065-AM"",
      ""SP-045-AM"",
      ""SP-009-AM-REP"",
      ""SP-084-AM"",
      ""SP-003-AM"",
      ""SP-008-AM-REP"",
      ""SP-035-AM"",
      ""SP-048-AM"",
      ""SP-038-AM"",
      ""SP-039-AM"",
      ""SP-090-AM"",
      ""SP-011-AM"",
      ""SP-013-AM"",
      ""SP-012-AM"",
      ""SPH-202-AM"",
      ""SP-076-AM"",
      ""31"",
      ""16"",
      ""SPH-201"",
      ""26"",
      ""29"",
      ""32"",
      ""35"",
      ""65"",
      ""84"",
      ""SPG-036"",
      ""SPG-039"",
      ""SPG-004"",
      ""SPG-040"",
      ""AR-011"",
      ""AR-012"",
      ""MAF-450-AM-RE"",
      ""GC-290"",
      ""GC-450"",
      ""BC-840-AM-RE"",
      ""PRE-540-AM-RE"",
      ""FC-400-AM-RE"",
      ""FC-840-AM-RE"",
      ""PA-100-G-RE"",
      ""PA-100-M-RE"",
      ""DP-633-CL-L-RE"",
      ""DP-633-LE-L-RE"",
      ""DP-633-NC-L-RE"",
      ""PR-600"",
      ""WD-300-AM-R"",
      ""SR-400-AM-RE"",
      ""SAA-P1200"",
      ""STHS-180-R"",
      ""STS-120-R"",
      ""STS-180-R"",
      ""STS-320-R"",
      ""SA-100-100"",
      ""SA-1000-100"",
      ""SA-120-100"",
      ""SA-1200-100"",
      ""SA-150-100"",
      ""SA-1500-100"",
      ""SA-180-100"",
      ""SA-2000-100"",
      ""SA-220-100"",
      ""SA-240-100"",
      ""SA-280-100"",
      ""SA-320-100"",
      ""SA-400-100"",
      ""SA-500-100"",
      ""SA-60-50"",
      ""SA-600-100"",
      ""SA-80-100"",
      ""SA-800-100"",
      ""CD-11510-R"",
      ""CD-11512-R"",
      ""CD-11516-R"",
      ""CD-12508-R"",
      ""CD-12510-RE"",
      ""CD-12512-RE"",
      ""CD-12516-R"",
      ""CD-12525-R"",
      ""CD-15014-R"",
      ""CD-15016-R"",
      ""CD-18014-R"",
      ""CD-18016-R"",
      ""CD-18018-R"",
      ""CD-18025-R"",
      ""CD-23018-R"",
      ""CD-23025-R"",
      ""FD-12522A40-R"",
      ""FD-12522A80-R"",
      ""FD-12522A120-R"",
      ""GD-1806-R"",
      ""GD-2306-R"",
      ""BHV-4.5-R"",
      ""ET-912-25-10-BLK-R\u0415"",
      ""AICE-01"",
      ""DT-50-BLK-R"",
      ""CG-302"",
      ""CG-305"",
      ""2123-6-12-45-R"",
      ""2123-6-18-45-R"",
      ""2123-6-24-45-R"",
      ""2123-6-48-45-R"",
      ""AICE-08"",
      ""AICE-10"",
      ""PTFE-12-010-15-RE"",
      ""ZTB-4825-R"",
      ""ZTB-4825-20-R"",
      ""HLT-1220-R"",
      ""MD-300"",
      ""AS-560-BG-ST-RE"",
      ""CS-60-VA"",
      ""AF-835"",
      ""EC-502-RE"",
      ""UR-2500-AM-RE"",
      ""ES-501-RE"",
      ""CC-110-PRO-RE"",
      ""TA-1200-AM-RE"",
      ""SL-354-AM-RE"",
      ""DS-1050"",
      ""AB-8-650-R"",
      ""CC-130-RE"",
      ""SG-330-R"",
      ""UR-1300-WHT-RE"",
      ""LN-1100-WHT-RE"",
      ""EC-330-RE"",
      ""9-AB-42"",
      ""TL-010-RD"",
      ""TL-010-BL"",
      ""TL-050-BL"",
      ""TL-010-PU"",
      ""411-AB"",
      ""AM-220-RE"",
      ""QF-25-AM-RE"",
      ""QF-25"",
      ""RF-505-AM-RE"",
      ""APISJ"",
      ""APITC"",
      ""MG-800-AM"",
      ""LG-857"",
      ""LG-920"",
      ""CL-200-AM-RE"",
      ""LG-990-HIT-AM"",
      ""MG-250-RE"",
      ""APITC-W\u0417""
   ],
   ""IDEMITSU"":[
      ""3583-001"",
      ""3583-004"",
      ""3583-020"",
      ""3615-001"",
      ""3615-004"",
      ""1845-001"",
      ""1845-004"",
      ""1845-020"",
      ""2156-001"",
      ""2156-004"",
      ""2156-020"",
      ""4268-020"",
      ""1849-001"",
      ""1849-004"",
      ""1849-020"",
      ""3585-001"",
      ""3585-004"",
      ""3585-020"",
      ""2863-001"",
      ""2863-004"",
      ""2863-020"",
      ""2862-001"",
      ""2862-004"",
      ""5469-020"",
      ""2573-020"",
      ""4336-020"",
      ""2574-020"",
      ""1652-001"",
      ""30011325-724"",
      ""30011325-746"",
      ""30011325-520"",
      ""30011328-724"",
      ""30011328-746"",
      ""30011328-520"",
      ""30175011-724"",
      ""30075040-746"",
      ""30075040-520"",
      ""30075035-520"",
      ""30015048-724"",
      ""30015048-746"",
      ""30015048-520"",
      ""30065013-724"",
      ""30015060-746"",
      ""30015060-520"",
      ""30175014-746"",
      ""30075074-520"",
      ""30095004-724"",
      ""30095016-724"",
      ""30485021-724"",
      ""30015049-724"",
      ""30015049-746"",
      ""30015045-520"",
      ""30175012-756"",
      ""30075031-756"",
      ""30075031-520"",
      ""30450248-724"",
      ""30450248-746"",
      ""30450248-520"",
      ""10106-042K"",
      ""30040093-750"",
      ""30040096-750"",
      ""10116-042"",
      ""30040098-750"",
      ""10112-042D"",
      ""10107-042F"",
      ""30040099-750"",
      ""10108-042E"",
      ""10113-042P"",
      ""30040092-750"",
      ""30301201-746"",
      ""30301201-520"",
      ""10118-042"",
      ""30102-052A"",
      ""1647-0005"",
      ""1647-020"",
      ""30485005-812"",
      ""2846-042"",
      ""30305009-520"",
      ""30305048-724"",
      ""30305045-520"",
      ""30305048-520"",
      ""1253-020"",
      ""4592-020"",
      ""4594-020"",
      ""5057-001"",
      ""5057-004"",
      ""5057-018"",
      ""3519-025"",
      ""3519-018"",
      ""5058-001"",
      ""5058-004"",
      ""5058-018"",
      ""3486-025"",
      ""3486-018"",
      ""4252-001"",
      ""4252-004"",
      ""30075040-724""
   ],
   ""TOPCOOL"":[
      ""Z0017"",
      ""Z0018"",
      ""Z0023"",
      ""Z0024"",
      ""Z0032"",
      ""Z0031"",
      ""Z0037"",
      ""Z0038"",
      ""Z0019"",
      ""Z0020"",
      ""Z0025"",
      ""Z0026"",
      ""Z0033"",
      ""Z0034"",
      ""Z0039"",
      ""Z0040""
   ],
   ""ENEOS"":[
      ""oil1422"",
      ""oil1425"",
      ""oil1325"",
      ""oil1328"",
      ""oil1329"",
      ""oil1330"",
      ""oil1333"",
      ""oil1338"",
      ""8801252022022"",
      ""oil4069"",
      ""oil4066"",
      ""8809478943077"",
      ""8809478942193"",
      ""8809478942216"",
      ""8809478942148"",
      ""8809478942162"",
      ""oil1354"",
      ""oil1357"",
      ""oil1358"",
      ""oil1361"",
      ""oil4073"",
      ""oil4070"",
      ""8809478942506"",
      ""oil1366"",
      ""oil1370"",
      ""oil1372"",
      ""oil1300"",
      ""oil1303"",
      ""oil1304"",
      ""oil1305"",
      ""oil1308"",
      ""oil1309"",
      ""8809478942018"",
      ""8809478942056"",
      ""8809478942032"",
      ""8809478942407"",
      ""8809478942070"",
      ""8809478942117"",
      ""8809478942094"",
      ""8809478942414"",
      ""8809478942469"",
      ""8809478942964"",
      ""8809478942476"",
      ""8809478942957"",
      ""4943589135342"",
      ""4943589134833"",
      ""8809478943091"",
      ""8809478942827"",
      ""8809478943022"",
      ""8809478943008"",
      ""8809478941714"",
      ""8809478941752"",
      ""8809478941738"",
      ""4943589134628"",
      ""4943589134598"",
      ""4943589134680"",
      ""4943589134710"",
      ""1000026"",
      ""1000022"",
      ""1000024"",
      ""1000036"",
      ""1000032"",
      ""1000034"",
      ""1000006"",
      ""1000002"",
      ""1000004"",
      ""8801252022015"",
      ""8801252022039"",
      ""01000126"",
      ""01000124"",
      ""01000136"",
      ""01000134"",
      ""01000146"",
      ""01000144"",
      ""01000106"",
      ""01000104"",
      ""8801252022190"",
      ""8801252022176"",
      ""8809478941790"",
      ""oil1327"",
      ""oil1332"",
      ""oil1334"",
      ""oil1356"",
      ""oil1360"",
      ""oil1419"",
      ""oil1424"",
      ""oil1426"",
      ""oil1427"",
      ""oil1429"",
      ""oil1430"",
      ""oil1431"",
      ""oil1432"",
      ""1000052"",
      ""1000054"",
      ""oil1436"",
      ""01000176"",
      ""01000174"",
      ""oil1440"",
      ""oil1442"",
      ""01000156"",
      ""01000154"",
      ""8809478942544"",
      ""8809478942513"",
      ""oil1369"",
      ""oil1375"",
      ""oil1376"",
      ""7005102"",
      ""oil1443"",
      ""oil1371"",
      ""OIL1337"",
      ""OIL1335"",
      ""8809478942834"",
      ""oil4067"",
      ""OIL4074"",
      ""OIL4075"",
      ""OIL4077"",
      ""oil4071""
   ],
   ""TOTAL"":[
      ""166049"",
      ""RU149091"",
      ""RO190724"",
      ""148585"",
      ""RU113430"",
      ""161407"",
      ""148590"",
      ""RU110801"",
      ""156672"",
      ""RU160777"",
      ""148583"",
      ""126429"",
      ""195097"",
      ""174371"",
      ""RU154943"",
      ""201292"",
      ""201282"",
      ""RU201284"",
      ""201289"",
      ""201278"",
      ""201301"",
      ""201280"",
      ""201271"",
      ""201655"",
      ""201874"",
      ""201273"",
      ""201601"",
      ""201656"",
      ""201657"",
      ""166218"",
      ""110584"",
      ""166220"",
      ""110586"",
      ""110591"",
      ""166222"",
      ""166223"",
      ""134149"",
      ""134148"",
      ""181783"",
      ""163821"",
      ""199475"",
      ""RU154935"",
      ""RU154847"",
      ""154938"",
      ""RU154242"",
      ""181942"",
      ""150511"",
      ""181943"",
      ""166215"",
      ""172977"",
      ""164796"",
      ""156721"",
      ""173508"",
      ""RO203702"",
      ""RO203704"",
      ""RO203552"",
      ""RO203708"",
      ""RO203709"",
      ""RO203558"",
      ""201535"",
      ""201536"",
      ""166137"",
      ""166241"",
      ""148592"",
      ""180967"",
      ""195282"",
      ""195283"",
      ""176011"",
      ""RO168034"",
      ""RO166475"",
      ""132353"",
      ""166249"",
      ""151523"",
      ""151521"",
      ""166245"",
      ""175392"",
      ""175393"",
      ""195026"",
      ""195027"",
      ""193627"",
      ""171839"",
      ""183450"",
      ""189680"",
      ""183103"",
      ""183175"",
      ""186931"",
      ""RO195322"",
      ""RO195324"",
      ""182883"",
      ""193662"",
      ""181711"",
      ""181712"",
      ""180859"",
      ""166254"",
      ""157103"",
      ""155368"",
      ""174776"",
      ""174777"",
      ""166256"",
      ""157104"",
      ""182162"",
      ""182163"",
      ""172766"",
      ""147989"",
      ""148015"",
      ""148598"",
      ""172765"",
      ""148023"",
      ""172769"",
      ""148150"",
      ""172772"",
      ""193741"",
      ""193101"",
      ""166229"",
      ""150885"",
      ""150889"",
      ""166234"",
      ""150883"",
      ""150888""
   ],
   ""GAZPROMNEFT"":[
      ""253142229"",
      ""253142230"",
      ""253142232"",
      ""253142233"",
      ""253142221"",
      ""253142222"",
      ""2389900143"",
      ""2389900144"",
      ""2389900117"",
      ""2389900118"",
      ""2389900119"",
      ""2389900122"",
      ""253142253"",
      ""253142254"",
      ""2389900124"",
      ""2389900125"",
      ""2389901315"",
      ""2389901316"",
      ""2389901323"",
      ""2389901324"",
      ""2389901325"",
      ""2389901326"",
      ""2389900149"",
      ""2389900150"",
      ""2389901339"",
      ""2389901341"",
      ""2389901343"",
      ""2389901345"",
      ""253651867"",
      ""253651868"",
      ""253651850"",
      ""253651851"",
      ""253651854"",
      ""253651855"",
      ""2389901361"",
      ""2389901362"",
      ""253142002"",
      ""2389901319"",
      ""2389901372"",
      ""2389901350""
   ],
   ""TOTACHI"":[
      ""4562374691131"",
      ""4589904521485"",
      ""4589904521478"",
      ""4589904521492"",
      ""4589904521461"",
      ""4562374691216"",
      ""4562374691230"",
      ""4562374691223"",
      ""4562374698833"",
      ""4562374691094"",
      ""4562374691117"",
      ""4562374691100"",
      ""4562374691810"",
      ""4589904921414"",
      ""4589904921438"",
      ""4589904921421"",
      ""4589904921445"",
      ""4562374691018"",
      ""4562374691032"",
      ""4562374691025"",
      ""4562374698840"",
      ""4562374691292"",
      ""4562374691315"",
      ""4562374691308"",
      ""4562374698864"",
      ""4562374698857"",
      ""4562374691056"",
      ""4562374691070"",
      ""4562374691063"",
      ""4589904523625"",
      ""4589904523618"",
      ""4562374697966"",
      ""4589904921513"",
      ""4589904921537"",
      ""4589904921520"",
      ""4589904921544"",
      ""4562374691254"",
      ""4562374691278"",
      ""4562374691261"",
      ""4562374698802"",
      ""4589904520549"",
      ""4589904520556"",
      ""4589904520532"",
      ""4589904924767"",
      ""4589904520518"",
      ""4589904520525"",
      ""4589904520648"",
      ""4589904520617"",
      ""4589904520624"",
      ""4589904924811"",
      ""4589904520723"",
      ""4589904520693"",
      ""4589904520730"",
      ""4589904520709"",
      ""4589904924842"",
      ""4589904520815"",
      ""4589904520785"",
      ""4589904520792"",
      ""4589904520808"",
      ""4589904520716"",
      ""4562374694842"",
      ""4589904524417"",
      ""4589904524424"",
      ""4589904925078"",
      ""4589904925085"",
      ""4589904922350"",
      ""4589904921667"",
      ""4562374690516"",
      ""4562374690547"",
      ""4562374690523"",
      ""4562374690530"",
      ""4562374690462"",
      ""4562374690493"",
      ""4562374690479"",
      ""4562374698444"",
      ""4562374690486"",
      ""4562374690615"",
      ""4562374690639"",
      ""4562374690622"",
      ""4562374698314"",
      ""4562374690691"",
      ""4562374690714"",
      ""4562374690707"",
      ""4589904921582"",
      ""4562374694989"",
      ""4562374694941"",
      ""4589904921995"",
      ""4589904927362"",
      ""4589904921643"",
      ""4589904927355"",
      ""4589904921568"",
      ""4562374694965"",
      ""4589904524035"",
      ""4589904524011"",
      ""4589904524028"",
      ""4589904922039"",
      ""4589904921605"",
      ""4589904922015"",
      ""4589904921629"",
      ""4589904523557"",
      ""4589904523533"",
      ""4589904525353"",
      ""4589904921681"",
      ""4562374690738"",
      ""4562374690769"",
      ""4562374690745"",
      ""4562374690752"",
      ""4562374690950"",
      ""4562374690974"",
      ""4562374690967"",
      ""4562374690912"",
      ""4562374690936"",
      ""4562374690929"",
      ""4562374698536"",
      ""4562374690653"",
      ""4562374690677"",
      ""4562374690660"",
      ""4562374698321"",
      ""4589904931543"",
      ""4589904931635"",
      ""4589904931673"",
      ""4589904931512"",
      ""4589904931574"",
      ""4589904931550"",
      ""4589904931598"",
      ""4562374691971"",
      ""4562374694903"",
      ""4589904921742"",
      ""4562374692237"",
      ""4562374691889"",
      ""4589904924415"",
      ""4589904924149"",
      ""4589904924156"",
      ""4562374692190"",
      ""4589904924224"",
      ""4589904924460"",
      ""4562374692114"",
      ""4589904923975"",
      ""4562374692107"",
      ""4589904924101"",
      ""4589904927188"",
      ""4589904934919"",
      ""4589904934933"",
      ""4589904934858"",
      ""4589904934865"",
      ""4562374690219"",
      ""4562374690318"",
      ""4562374690325"",
      ""4562374698529"",
      ""4589904921117"",
      ""4562374690585"",
      ""4562374698451"",
      ""4562374690783"",
      ""4562374690790"",
      ""4562374690806"",
      ""4562374690813"",
      ""4562374694729"",
      ""4589904934889"",
      ""4589904927348"",
      ""4589904927331"",
      ""4589904921971"",
      ""4589904529313"",
      ""4589904526442"",
      ""4589904526435"",
      ""4589904526466"",
      ""4589904526459"",
      ""4589904921056"",
      ""4589904921049"",
      ""4589904921063"",
      ""4589904526428"",
      ""4589904526800"",
      ""4589904526831"",
      ""4589904526824"",
      ""4589904526817"",
      ""4589904526893"",
      ""4589904527562"",
      ""4589904526794"",
      ""4589904526787"",
      ""4589904526770"",
      ""4589904526886"",
      ""4589904926747"",
      ""4589904926754"",
      ""4589904925047"",
      ""4589904925054"",
      ""4589904926655"",
      ""4589904927195"",
      ""4589904926679"",
      ""4589904926723"",
      ""4589904926686"",
      ""4589904926693"",
      ""4589904520631"",
      ""4589904520600"",
      ""4589904520822"",
      ""4562374690141"",
      ""4562374690158"",
      ""4562374690165"",
      ""4562374690172"",
      ""4562374690196"",
      ""4562374690202"",
      ""4562374690226"",
      ""4562374690295"",
      ""4562374690424"",
      ""4562374690578"",
      ""4562374690448"",
      ""4562374690011"",
      ""4562374690028"",
      ""4562374690059"",
      ""4562374690066"",
      ""4562374690349"",
      ""4562374690363"",
      ""4562374690387"",
      ""4562374690394"",
      ""4562374690400"",
      ""4562374690837"",
      ""4562374690844"",
      ""4562374690851"",
      ""4562374698284"",
      ""4562374694736"",
      ""4562374698307"",
      ""4562374698291"",
      ""4562374691834"",
      ""4562374691841"",
      ""4562374691858"",
      ""4562374691896"",
      ""4562374691957"",
      ""4562374691964"",
      ""4589904933943"",
      ""4589904933981"",
      ""4589904933967"",
      ""4589904934063"",
      ""4589904934100"",
      ""4589904934087"",
      ""4562374692213"",
      ""4562374692220"",
      ""4562374698017"",
      ""4589904931659"",
      ""4562374691882"",
      ""4562374691148"",
      ""4562374691155"",
      ""4562374699595"",
      ""4562374691179"",
      ""4562374691186"",
      ""4562374691193"",
      ""4562374698826"",
      ""45623746998833"",
      ""4562374691414"",
      ""4562374691421"",
      ""4562374691438"",
      ""45623746991445"",
      ""45623746998840"",
      ""4562374699864"",
      ""4589904929670"",
      ""4589904528590"",
      ""4589904528606"",
      ""4589904528613"",
      ""4589904528620"",
      ""4589904528248"",
      ""4589904528262"",
      ""4589904528279"",
      ""4589904528194"",
      ""4589904528200"",
      ""4589904528217"",
      ""4589904528224"",
      ""4589904528149"",
      ""4589904528156"",
      ""45899045281638"",
      ""4589904528170"",
      ""4589904528095"",
      ""4589904528101"",
      ""4589904528118"",
      ""4589904528125"",
      ""4589904528699"",
      ""4589904528705"",
      ""4589904528712"",
      ""4589904528729"",
      ""4589904528743"",
      ""4589904528750"",
      ""4589904528767"",
      ""4589904528774"",
      ""4589904528293"",
      ""4589904528309"",
      ""4589904528316"",
      ""4589904528323"",
      ""4562374698093"",
      ""4589904525360"",
      ""4589904921957"",
      ""11704"",
      ""11701"",
      ""11905"",
      ""12105"",
      ""12205"",
      ""11404"",
      ""11401"",
      ""10904"",
      ""10901"",
      ""11204"",
      ""11201"",
      ""10804"",
      ""10801"",
      ""11104"",
      ""11101"",
      ""E1404"",
      ""12101"",
      ""12104"",
      ""11501""
   ],
   ""HYUNDAI XTEER"":[
      ""1011011"",
      ""1120006"",
      ""1200006"",
      ""1041017"",
      ""1011014"",
      ""1200011"",
      ""1011003"",
      ""1041222"",
      ""1061001"",
      ""1011223-3"",
      ""1011224"",
      ""1061224"",
      ""1200044"",
      ""1011008"",
      ""1041003"",
      ""1200010"",
      ""1061012"",
      ""1011009"",
      ""1200027"",
      ""1011007"",
      ""1041011"",
      ""1011135"",
      ""1200135"",
      ""1041135"",
      ""1041136-3"",
      ""1061136"",
      ""1011013"",
      ""1041001"",
      ""1011019"",
      ""1011002"",
      ""1200016"",
      ""1061011"",
      ""1041002"",
      ""1200025"",
      ""1041126"",
      ""1011018"",
      ""1120007"",
      ""1200007"",
      ""1041421"",
      ""1011017"",
      ""1120008"",
      ""1041423"",
      ""1041007"",
      ""1121003"",
      ""1200003"",
      ""1061005"",
      ""1011012"",
      ""1200002"",
      ""1120002"",
      ""1041121"",
      ""1011121"",
      ""1041122"",
      ""1011122"",
      ""1011136-3"",
      ""1041014"",
      ""1041044"",
      ""1011044"",
      ""1120015"",
      ""1121026"",
      ""1121014"",
      ""1011006"",
      ""1041413"",
      ""1121034"",
      ""1011435"",
      ""1041435"",
      ""1120435"",
      ""1011439"",
      ""1041439"",
      ""1120439"",
      ""2120713"",
      ""2120712"",
      ""2120714"",
      ""2120715"",
      ""2120716"",
      ""2120725"",
      ""2010853"",
      ""2010002"",
      ""1120332"",
      ""1120307"",
      ""1120308"",
      ""2020190"",
      ""1011005"",
      ""1011189"",
      ""1061002"",
      ""1051237"",
      ""1011004"",
      ""1041118"",
      ""1011001"",
      ""1041013"",
      ""1011113"",
      ""1041113"",
      ""1011411"",
      ""1041411"",
      ""1011413"",
      ""1041422"",
      ""1011034""
   ],
   ""HIVISION"":[
      ""\u041a0169"",
      ""\u041a0164"",
      ""\u041a0172"",
      ""\u041a0161"",
      ""\u041b0294"",
      ""\u041b0295"",
      ""\u041b0296"",
      ""\u041b0297"",
      ""\u041b0298"",
      ""\u041b0299"",
      ""\u041b0300"",
      ""\u041b0301"",
      ""\u041b0302"",
      ""\u041b0303"",
      ""\u041b0304"",
      ""\u041b0305"",
      ""\u041b0306"",
      ""\u041b0307"",
      ""\u041b0091"",
      ""\u041b0106"",
      ""\u041b0107"",
      ""\u041b0108"",
      ""\u041b0109"",
      ""\u041b0021"",
      ""\u041b0111"",
      ""\u041b0110"",
      ""\u041b0112"",
      ""\u041b0113"",
      ""\u041b0114"",
      ""\u041b0115"",
      ""\u041b0116"",
      ""\u041b0117"",
      ""\u041b0277"",
      ""\u041b0120"",
      ""\u041b0118"",
      ""\u041b0121"",
      ""\u041b0119"",
      ""\u041b0279"",
      ""\u041b0278"",
      ""\u041b0254"",
      ""\u041b0255"",
      ""\u041b0245"",
      ""\u041b0256"",
      ""\u041b0258"",
      ""\u041b0259""
   ],
   ""CHEVRON"":[
      ""278001783"",
      ""23968375881"",
      ""223021773"",
      ""224503319"",
      ""224503783"",
      ""224504783"",
      ""223039783"",
      ""223038361"",
      ""223034783"",
      ""223030783"",
      ""223395485"",
      ""225040319"",
      ""236100319"",
      ""OIL3740"",
      ""226537482"",
      ""223396485"",
      ""223394485"",
      ""223504482"",
      ""223501482"",
      ""223502482"",
      ""223503482"",
      ""223726482"",
      ""223021983"",
      ""224504983"",
      ""223080953"",
      ""223032783"",
      ""223032983"",
      ""223033783"",
      ""223033983"",
      ""223035783"",
      ""1020287"",
      ""221854481"",
      ""222270481"",
      ""226975481"",
      ""222130481"",
      ""226536481"",
      ""3587"",
      ""223034983""
   ],
   ""HI-GEAR"":[
      ""HG0040"",
      ""HG0044"",
      ""HG1110"",
      ""HG1114"",
      ""HG1150"",
      ""HG1154"",
      ""HG1130"",
      ""HG1134"",
      ""HG0030"",
      ""HG0034"",
      ""HG1140"",
      ""HG1144"",
      ""HG0540"",
      ""HG0544"",
      ""HG0550"",
      ""HG0554"",
      ""HG7039R"",
      ""HG7042R"",
      ""HG7024"",
      ""HG0044P"",
      ""HG1114P"",
      ""HG1154P"",
      ""HG1134P"",
      ""HG0034P"",
      ""HG1144P"",
      ""HG0544P"",
      ""HG0554P"",
      ""HG3260""
   ],
   ""KYK"":[
      ""51-012"",
      ""52-036"",
      ""54-028"",
      ""55-006"",
      ""56-292"",
      ""56-304"",
      ""51-011"",
      ""52-035"",
      ""54-027"",
      ""55-005"",
      ""56-291"",
      ""56-303"",
      ""52-044"",
      ""55-008"",
      ""56-308"",
      ""56-306"",
      ""52-043"",
      ""55-007"",
      ""56-307"",
      ""56-305"",
      ""52-092"",
      ""56-262"",
      ""52-091"",
      ""56-261"",
      ""52-004"",
      ""54-004"",
      ""56-208"",
      ""54-003"",
      ""56-207"",
      ""58-057"",
      ""58-107"",
      ""58-058"",
      ""58-108"",
      ""58-802""
   ],
   ""ACTIVEBLUE"":[
      ""\u0422\u04160001"",
      ""\u0422\u04160003"",
      ""\u0422\u04160005""
   ],
   ""TOYAMA"":[
      ""\u041e\u04160001"",
      ""\u041e\u04160002"",
      ""\u041e\u04160003"",
      ""\u041e\u04160005"",
      ""\u041e\u04160006"",
      ""\u041e\u04160007"",
      ""\u0422\u04160010""
   ],
   ""STANDART"":[
      ""\u041e\u04160012"",
      ""\u041e\u04160013"",
      ""\u041e\u04160014"",
      ""\u041e\u04160015"",
      ""\u041e\u04160016"",
      ""\u041e\u04160017"",
      ""\u0422\u04160006"",
      ""\u0422\u04160007"",
      ""\u0422\u04160011"",
      ""\u0422\u04160020"",
      ""\u0422\u04160014"",
      ""\u0422\u04160022"",
      ""\u041e\u04160021"",
      ""\u041e\u04160022"",
      ""\u041e\u04160023"",
      ""\u041e\u04160024"",
      ""\u041e\u04160025"",
      ""\u041e\u04160026""
   ],
   ""HAVOLINE"":[
      ""7003558"",
      ""223397485"",
      ""76568796457"",
      ""223389729"",
      ""223724734"",
      ""223401729"",
      ""76568732411"",
      ""223031783"",
      ""221806481"",
      ""221896351"",
      ""1020205"",
      ""223395721"",
      ""223396721"",
      ""223396429"",
      ""223397721"",
      ""223393721"",
      ""223394721"",
      ""223394990""
   ],
   ""ROSNEFT"":[
      ""00000015614"",
      ""8695"",
      ""8728"",
      ""00000015624"",
      ""15-2958"",
      ""40816732"",
      ""3196"",
      ""8701"",
      ""8699"",
      ""3191"",
      ""3633671"",
      ""8664"",
      ""8662"",
      ""8667"",
      ""3633665"",
      ""4688"",
      ""8647"",
      ""8645"",
      ""4010"",
      ""4004"",
      ""5107"",
      ""4005"",
      ""4006"",
      ""4091"",
      ""00000017227"",
      ""8372"",
      ""00000019205"",
      ""00000019206"",
      ""00000019207"",
      ""00000019208"",
      ""00000019209"",
      ""00000019210"",
      ""8690"",
      ""8691"",
      ""00000019212"",
      ""00000019215"",
      ""00000019213"",
      ""00000019214"",
      ""00000016860"",
      ""8659"",
      ""00000015617"",
      ""8669"",
      ""00000019803"",
      ""00000019804"",
      ""00000019802"",
      ""8633"",
      ""00000016747"",
      ""00000016810"",
      ""00000019625"",
      ""8711"",
      ""00000015714"",
      ""8365"",
      ""8381"",
      ""00000015715"",
      ""8906"",
      ""40814942"",
      ""40814932"",
      ""40815442"",
      ""8728"",
      ""8699"",
      ""8701"",
      ""40813842"",
      ""40813832"",
      ""8384"",
      ""40810032"",
      ""40810042"",
      ""8696"",
      ""40801650"",
      ""8782"",
      ""8727"",
      ""40814432"",
      ""40816733"",
      ""40811032"",
      ""40811942"",
      ""7887"",
      ""4136"",
      ""4188"",
      ""2775"",
      ""4137"",
      ""8881"",
      ""8651"",
      ""8650"",
      ""8681"",
      ""8680"",
      ""8737"",
      ""8738"",
      ""4189"",
      ""40697160""
   ],
   ""TAKUMI"":[
      ""XT5500041"",
      ""1604-1"",
      ""XT10600041"",
      ""1624-1"",
      ""HB0020-00101"",
      ""HB0300201"",
      ""HB0300041"",
      ""HQ5200041"",
      ""HQ5200011"",
      ""HQ0530-02001"",
      ""HQ5300041"",
      ""HQ5300011"",
      ""HQ10400041"",
      ""ST5300202"",
      ""ST5300042"",
      ""ST5300012"",
      ""MG80900011"",
      ""HQ1040-00101"",
      ""HQ0540-00403"",
      ""HB0020-00403"",
      ""HB0020-00103"",
      ""HB0030-00403"",
      ""HB0030-00103"",
      ""HQ0520-00103"",
      ""HQ0520-00403"",
      ""HQ0530-00403"",
      ""HQ0530-00103"",
      ""HQ0540-00103"",
      ""SD0530-00401"",
      ""SD0530-00101"",
      ""HB0016-00403""
   ],
   ""KIXX"":[
      ""L2091AL1E1"",
      ""L209144TE1"",
      ""L2092AL1E1"",
      ""L209244TE1"",
      ""L2098AL1E1"",
      ""L209844TE1"",
      ""L2099AL1E1"",
      ""L209944TE1"",
      ""L2101AL1E1"",
      ""L210144TR1"",
      ""L5312440E1"",
      ""L2101K18E1"",
      ""L2107AL1E1"",
      ""L210744TE1"",
      ""L2102AL1E1"",
      ""L210244TR1"",
      ""L5310AL1E1"",
      ""L531044TE1"",
      ""L2100AL1E1"",
      ""L2100440E1"",
      ""L2103AL1E1"",
      ""L210344TE1"",
      ""L2108AL1R1"",
      ""L210844TR1"",
      ""L2109AL1R1"",
      ""L210944TR1"",
      ""L5450440E1"",
      ""L5316AL1E1"",
      ""L531644TR1"",
      ""L5316440E1"",
      ""L5316P20E1"",
      ""L5449440E1"",
      ""L5317AL1E1"",
      ""L531744TE1"",
      ""L5317440E1"",
      ""L5453AL1E1"",
      ""L545344TE1"",
      ""L5453440E1"",
      ""L5318AL1E1"",
      ""L5318440E1"",
      ""L5318430E1"",
      ""L5318P20E1"",
      ""L5032AL1E1"",
      ""L5032440E1"",
      ""L5322440E1"",
      ""L5323440E1"",
      ""L5324440E1"",
      ""L2061AL1E1"",
      ""L206144TE1"",
      ""L2061360E1"",
      ""L2061P20E1"",
      ""L2013440K1"",
      ""L2013360K1"",
      ""L3034350E1"",
      ""L2016P20E1"",
      ""L201444TR1"",
      ""L2014360R1"",
      ""L5257AL1E1"",
      ""L5257440E1"",
      ""L5257360E1"",
      ""L5257P20E1"",
      ""L2002AL1E1"",
      ""L200244TE1"",
      ""L2002440E1"",
      ""L2002360E1"",
      ""L2002P20E1"",
      ""L2001AL1E1"",
      ""L200144TE1"",
      ""L2001360E1"",
      ""L2001P20E1"",
      ""L5339440E1"",
      ""L5339P20E1"",
      ""L5256440E1"",
      ""L5256K18E1"",
      ""L5255AL1E1"",
      ""L525544TE1"",
      ""L5255P20E1"",
      ""L2023AL1E1"",
      ""L202344TE1"",
      ""L2023440E1"",
      ""L2023360E1"",
      ""L2023P20E1"",
      ""L2024440E1"",
      ""L2024P20E1"",
      ""L5332440E1"",
      ""L5332K18E1"",
      ""L2062440E1"",
      ""L2078440E1"",
      ""L2078P20E1"",
      ""L5103AL1E1"",
      ""L5118AL1E1"",
      ""L5117AL1E1"",
      ""L5122AL1E1"",
      ""L5861AL1E1"",
      ""L1936CL5E1"",
      ""L1938CL5E1"",
      ""L2717AL1E1"",
      ""L271744TE1"",
      ""L2962AL1E1"",
      ""L296244TE1"",
      ""L2962440E1"",
      ""L2962P20E1"",
      ""L2963AL1E1"",
      ""L296344TE1"",
      ""L2983AL1E1"",
      ""L298344TE1"",
      ""L2983440E1"",
      ""L2983P20E1"",
      ""L2984AL1E1"",
      ""L2984440E1"",
      ""L2984P20E1"",
      ""L251944TE1"",
      ""L2519P20E1"",
      ""L2518AL1E1"",
      ""L251844TE1"",
      ""L2518P20E1"",
      ""L2509AL1E1"",
      ""L250944TR1"",
      ""L2509P20E1"",
      ""L2524AL1E1"",
      ""L252444TE1"",
      ""L2520AL1E1"",
      ""L2520440E1""
   ],
   ""AUTOBACS"":[
      ""A01508394"",
      ""A01508395"",
      ""A01508396"",
      ""A01508397"",
      ""A01508398"",
      ""A01508399"",
      ""A01508400"",
      ""A01508401"",
      ""A01508402"",
      ""A01508403"",
      ""A01508404"",
      ""A01508405"",
      ""A00032230"",
      ""A00032229"",
      ""A00032234"",
      ""A00032233"",
      ""A00032238"",
      ""A00032237"",
      ""A00032642"",
      ""A00032641"",
      ""A00032242"",
      ""A00032241""
   ],
   ""MOLY GREEN"":[
      ""0470112"",
      ""0470114"",
      ""0470113"",
      ""0470085"",
      ""0470108"",
      ""0470109"",
      ""0470077"",
      ""0470076"",
      ""0470096"",
      ""0470098"",
      ""0470097"",
      ""0470086"",
      ""0470087"",
      ""0470075"",
      ""0470074"",
      ""0470081"",
      ""0470078"",
      ""0470088"",
      ""0470090"",
      ""0470089"",
      ""0470038"",
      ""0470039"",
      ""0470049"",
      ""0470048"",
      ""0470116"",
      ""0470118"",
      ""0470117"",
      ""0470046"",
      ""0470069"",
      ""0470022"",
      ""0470021"",
      ""0470016"",
      ""0470020"",
      ""0470047"",
      ""0470068"",
      ""0470023"",
      ""0470100"",
      ""0470102"",
      ""0470101"",
      ""470124"",
      ""470125"",
      ""470167"",
      ""470168"",
      ""470169"",
      ""470170""
   ],
   ""MANNOL"":[
      ""1371"",
      ""1483"",
      ""1396"",
      ""3068"",
      ""1937"",
      ""1939"",
      ""3031"",
      ""3033"",
      ""3042"",
      ""3034"",
      ""3038"",
      ""3044"",
      ""3052"",
      ""3043"",
      ""3036"",
      ""3051"",
      ""3040"",
      ""3041"",
      ""3039"",
      ""7018"",
      ""7016"",
      ""7017"",
      ""4054"",
      ""1196"",
      ""1198"",
      ""1197"",
      ""4033"",
      ""6011"",
      ""1404"",
      ""1448"",
      ""1426"",
      ""1998"",
      ""6007"",
      ""1952"",
      ""1430"",
      ""1431"",
      ""1408"",
      ""1449"",
      ""1427"",
      ""6012"",
      ""6010"",
      ""1400"",
      ""1425"",
      ""6005"",
      ""6009"",
      ""1994"",
      ""1375"",
      ""1376"",
      ""1279"",
      ""1100"",
      ""1185"",
      ""1101"",
      ""1155"",
      ""1992"",
      ""1360"",
      ""1393"",
      ""3045"",
      ""3017"",
      ""1147"",
      ""1191"",
      ""1148"",
      ""3001"",
      ""1475"",
      ""1330"",
      ""1388"",
      ""1331"",
      ""1333"",
      ""1335"",
      ""1389"",
      ""1356"",
      ""1281"",
      ""1105"",
      ""1186"",
      ""1106"",
      ""1280"",
      ""1205"",
      ""1248"",
      ""1206"",
      ""1035"",
      ""1036"",
      ""1010"",
      ""1052"",
      ""1011"",
      ""1005"",
      ""1051"",
      ""1006"",
      ""4006"",
      ""4009"",
      ""4007"",
      ""4000"",
      ""4001"",
      ""1030"",
      ""1031"",
      ""1059"",
      ""1061"",
      ""1060"",
      ""4030"",
      ""1282"",
      ""4013"",
      ""4014"",
      ""1021"",
      ""1020"",
      ""1054"",
      ""1134"",
      ""1135"",
      ""1316"",
      ""1385"",
      ""1317"",
      ""1312"",
      ""1384"",
      ""1355"",
      ""1321"",
      ""1322"",
      ""1236"",
      ""1497"",
      ""1382"",
      ""1306"",
      ""1308"",
      ""1310"",
      ""3028"",
      ""1000"",
      ""1050"",
      ""1001"",
      ""4036"",
      ""4037"",
      ""1120"",
      ""1188"",
      ""1121"",
      ""1125"",
      ""1189"",
      ""1126"",
      ""1943"",
      ""4065"",
      ""4060"",
      ""1082"",
      ""1083"",
      ""1094"",
      ""1095"",
      ""4042"",
      ""4069"",
      ""4070"",
      ""1070"",
      ""1072"",
      ""1071"",
      ""4034"",
      ""4044"",
      ""4045"",
      ""1088"",
      ""1090"",
      ""1089"",
      ""4040"",
      ""1412"",
      ""1450"",
      ""1428"",
      ""1451"",
      ""1429"",
      ""1421"",
      ""1225"",
      ""1226"",
      ""1180"",
      ""1195"",
      ""4022"",
      ""1181"",
      ""1015"",
      ""1053"",
      ""1016"",
      ""1215"",
      ""4036021162140"",
      ""1246"",
      ""1216"",
      ""1918"",
      ""1923"",
      ""2440"",
      ""2479"",
      ""MN7914-4"",
      ""MN7501-4"",
      ""MN7501-1"",
      ""MN7504-1"",
      ""MN7504-5"",
      ""MN7909-1"",
      ""MN7909-5"",
      ""MN7904-1"",
      ""MN7904-5"",
      ""MN7914-1"",
      ""M269B"",
      ""MN7906-4"",
      ""MN7919-1"",
      ""MN7919-5"",
      ""MN7918-1"",
      ""MN7918-4"",
      ""MN7505-1"",
      ""MN7505-4"",
      ""MA-9922"",
      ""89701"",
      ""2494"",
      ""2036"",
      ""2051"",
      ""2037"",
      ""2038"",
      ""2055"",
      ""2039"",
      ""2030"",
      ""2031"",
      ""8941"",
      ""2239"",
      ""9670"",
      ""2135"",
      ""9940"",
      ""1260"",
      ""7028"",
      ""1076"",
      ""1077"",
      ""77301"",
      ""77305"",
      ""79181"",
      ""79184"",
      ""79191"",
      ""79195"",
      ""79211"",
      ""79215"",
      ""6013"",
      ""1984"",
      ""1987"",
      ""1989"",
      ""1445"",
      ""2104"",
      ""2107"",
      ""2111"",
      ""2145"",
      ""2146"",
      ""2151"",
      ""1304"",
      ""1383"",
      ""3076"",
      ""811220"",
      ""3056"",
      ""82124"",
      ""3025"",
      ""821620"",
      ""3071"",
      ""3066"",
      ""3064"",
      ""3067"",
      ""82204"",
      ""82211""
   ],
   ""GRASS"":[
      ""111105-1"",
      ""111105-2"",
      ""111100-1"",
      ""111100-2"",
      ""136250"",
      ""147250"",
      ""130105"",
      ""110103"",
      ""110104"",
      ""154250"",
      ""151250"",
      ""170105"",
      ""110309"",
      ""110310"",
      ""110311"",
      ""110312"",
      ""110313"",
      ""110314"",
      ""116105"",
      ""118105"",
      ""138250"",
      ""700001"",
      ""110298"",
      ""125317"",
      ""110254"",
      ""112117"",
      ""112105"",
      ""110333-1"",
      ""110333-2"",
      ""110333-3"",
      ""110333-4"",
      ""120107-1"",
      ""120107-2"",
      ""120107-3"",
      ""120107-4"",
      ""149250"",
      ""120115"",
      ""110267"",
      ""340340"",
      ""340034"",
      ""148250"",
      ""131105"",
      ""800032"",
      ""153250"",
      ""121105"",
      ""152250"",
      ""125105"",
      ""700670"",
      ""117105"",
      ""155250"",
      ""150105"",
      ""110315"",
      ""137250"",
      ""110206"",
      ""137260"",
      ""211605"",
      ""800250"",
      ""117106"",
      ""NF05"",
      ""135250"",
      ""135500"",
      ""136101"",
      ""136102"",
      ""132100"",
      ""132101"",
      ""113160"",
      ""113161"",
      ""700201"",
      ""700205"",
      ""800001"",
      ""800002"",
      ""113100"",
      ""113101"",
      ""113120"",
      ""113121"",
      ""113150"",
      ""113151"",
      ""116100"",
      ""110292"",
      ""118100"",
      ""118101"",
      ""110253"",
      ""110255"",
      ""138100"",
      ""138101"",
      ""112110"",
      ""120100"",
      ""341001"",
      ""131100"",
      ""121100"",
      ""121201"",
      ""110215\/110354"",
      ""125432"",
      ""110359\/110216"",
      ""110358\/110212"",
      ""110352\/110219"",
      ""110213"",
      ""110357\/110217"",
      ""211701\/110368"",
      ""110329"",
      ""110330"",
      ""110331"",
      ""110332"",
      ""IT-0313"",
      ""IT-0311"",
      ""IT-0312"",
      ""IT-0314"",
      ""IT-0319"",
      ""IT-0320"",
      ""IT-0321"",
      ""IT-0322"",
      ""IT-0352"",
      ""IT-0327"",
      ""IT-0345"",
      ""IT-0323"",
      ""IT-0324"",
      ""IT-0461"",
      ""IT-0462"",
      ""IT-0581"",
      ""IT-0325"",
      ""IT-0326"",
      ""700101"",
      ""800021"",
      ""700105"",
      ""800017"",
      ""800029"",
      ""113110"",
      ""113112"",
      ""110222"",
      ""800022"",
      ""113111"",
      ""800044"",
      ""800027"",
      ""113180"",
      ""800028"",
      ""113181"",
      ""110304"",
      ""110322"",
      ""110324"",
      ""110360"",
      ""110326"",
      ""110258"",
      ""110257"",
      ""800024"",
      ""113140"",
      ""800023"",
      ""113141"",
      ""800019"",
      ""800018"",
      ""113190"",
      ""113191"",
      ""800026"",
      ""710220"",
      ""450300"",
      ""139113"",
      ""139103"",
      ""111103"",
      ""110283"",
      ""110284"",
      ""1007814"",
      ""1011736"",
      ""800121"",
      ""110100"",
      ""110101"",
      ""2.308-002"",
      ""127100"",
      ""127101"",
      ""110339"",
      ""125306"",
      ""110293"",
      ""800031"",
      ""270100"",
      ""125196"",
      ""125201"",
      ""160101"",
      ""125228"",
      ""112100"",
      ""112103"",
      ""125197"",
      ""125458"",
      ""125232"",
      ""110342"",
      ""110338"",
      ""110325"",
      ""131101"",
      ""110218"",
      ""NF04"",
      ""110282"",
      ""800448"",
      ""133101"",
      ""130100"",
      ""130101"",
      ""800440"",
      ""120101"",
      ""110268"",
      ""110269"",
      ""120110"",
      ""120111"",
      ""341005"",
      ""150101"",
      ""110266"",
      ""110265"",
      ""117107"",
      ""140101"",
      ""137101"",
      ""125100"",
      ""125101"",
      ""110102"",
      ""125231"",
      ""800322"",
      ""800317"",
      ""IT-0574"",
      ""IT-0573"",
      ""IT-0575"",
      ""IT-0577"",
      ""IT-0576"",
      ""IT-0578"",
      ""IT-0453"",
      ""110376"",
      ""110374"",
      ""110377"",
      ""110405"",
      ""110383"",
      ""110385"",
      ""110396"",
      ""110392"",
      ""110402"",
      ""110393"",
      ""110372"",
      ""110373"",
      ""110403"",
      ""110388"",
      ""110399"",
      ""110395"",
      ""110394"",
      ""110384""
   ],
   ""CHEMPIOIL"":[
      ""CH-OEM Type4(08886-01705)"",
      ""CH-OEM H4(08218-99974)"",
      ""CH-OEM N1(KLAN3-05301)"",
      ""CH-OEM N4(KLAN3-05304)"",
      ""CH-OEM MMC4(MZ102565B)"",
      ""CH-OEM S1( SO868V9280)"",
      ""CH-OEM S4(K0215-Y0273)"",
      ""CH-OEM T4(08880-10705)"",
      ""CH-OEM TL1(08880-10606)"",
      ""CH-OEM TL4(08880-10605)"",
      ""CH-O-GT-4"",
      ""CH-U-XTT-4""
   ],
   ""PUTOLINE"":[
      ""PU-TT A-1(70531)"",
      ""PU-TT A-1(70459)"",
      ""PU-ET S4T+-1(70645)"",
      ""PU-ET SY4+60-4(70702)"",
      ""PU-GH80\/90-1(70148)"",
      ""PU-GP10-1(70162)"",
      ""PU-GP80-1(70172)"",
      ""PU-Q RF2-1(70302)"",
      ""PU-Q RF4-1(70303)"",
      ""PU-RO(70311)"",
      ""PU-TT Sc-1(70471)"",
      ""PU-TT Sc-125(70470)"",
      ""PU-TT Sc-500(70475)"",
      ""PU-S 4T-1(70321)"",
      ""PU-TT Sc+-1(70477)"",
      ""PU-SSGO-125(70341)"",
      ""PU-SB-1(70342)"",
      ""PU-TT S-1(70489)"",
      ""PU-TM Sp4-10\/40-1(70199)"",
      ""PU-TM Sp4-10\/40-4(70409)"",
      ""PU-TM Sp4-1(70200)"",
      ""PU-TM Sp4-4(70415)"",
      ""PU-TM S4+-5-50(70465)"",
      ""PU-SY4-4(70430)"",
      ""PU-SY4+-4(70455)"",
      ""PU-TT Scs-1(70484)"",
      ""PU-TT S+cs-1(70482)""
   ],
   ""VERITY"":[
      ""54250"",
      ""54249"",
      ""54251"",
      ""54253"",
      ""54252"",
      ""54257"",
      ""54258"",
      ""54259"",
      ""57458"",
      ""57459"",
      ""54260"",
      ""54261"",
      ""56352"",
      ""57449"",
      ""57450"",
      ""57454"",
      ""54255"",
      ""47629"",
      ""54262"",
      ""47627"",
      ""49677"",
      ""47628"",
      ""54247"",
      ""54248"",
      ""47623"",
      ""47624"",
      ""47625"",
      ""49675"",
      ""47626"",
      ""47619"",
      ""49674"",
      ""47620"",
      ""47621"",
      ""56351"",
      ""49676"",
      ""47622"",
      ""102459"",
      ""102460"",
      ""80393"",
      ""102463"",
      ""102464"",
      ""102467"",
      ""102468"",
      ""59121"",
      ""59122""
   ],
   ""XENUM"":[
      ""SP7033"",
      ""XE-XA-TRAN 8G-1(1716001)"",
      ""XE-CVTF-1000(1525001)"",
      ""XE-NR5\/30-1(1327001)"",
      ""XE-NR5\/30-5(1334005)"",
      ""XE-X3-15\/40-20(1074020)"",
      ""XE-XPG5\/30-1(1594001)"",
      ""XE-XPG5\/30-4(1617004)"",
      ""XE-XPG5\/40-1(1600001)"",
      ""XE-XPG5\/40-4(1624004)"",
      ""XE-X2-10\/40-1(1174001)"",
      ""XE-X2-10\/40-4(1082004)"",
      ""XE-X2-10\/40-5(1075005)"",
      ""XE-X2-10\/50-1(1419001)"",
      ""XE-X2-10\/50-5(1402005)"",
      ""XE-X2DP10\/40-60(1067060)"",
      ""XE-R10\/40-1(1273001)"",
      ""XE-R10\/40-5(1266005)"",
      ""XE-GP10\/40-1(1143001)"",
      ""XE-GP10\/40-5(1044005)"",
      ""XE-XA-DVI-1(1556001)"",
      ""XE-XA-PWS-1(1549001)"",
      ""XE-XA-M-ATF1(1532001)"",
      ""XE-X-XR2(1440001)"",
      ""XE-X-ICE2(1457001)"",
      ""XE-NE0\/20-1(1334001)"",
      ""XE-NE0\/20-5(1327005)"",
      ""XE-NE0\/20-60(1327060)"",
      ""XE-O-F-5\/30-1(1259001)"",
      ""XE-O-F-5\/30-5(1242005)"",
      ""XE-O-F-5\/30-60(1242060)"",
      ""XE-O-GMD-5\/30-1(1433001)"",
      ""XE-O-GMD-5\/30-5(1372005)"",
      ""XE-O-T-5\/30-1(1297001)"",
      ""XE-O-T-5\/30-5(1280005)"",
      ""XE-O-T-5\/30-60(1280060)"",
      ""XE-O-VW-5\/30-1(1211001)"",
      ""XE-O-VW-5\/30-5(1204005)"",
      ""XE-GPR-10\/60-1(1488001)"",
      ""XE-GPX5\/40-1(1136001)"",
      ""XE-GPX5\/40-5(1037005)"",
      ""XE-GPX5\/40-60(1037060)"",
      ""XE-VRX(VX)5\/30-5(1013005)"",
      ""XE-VRX(VX)5\/30-1(1112001)"",
      ""XE-WRX7.5\/40-5(1020005)"",
      ""XE-WRX7.5\/40-1(1129001)"",
      ""XE-VRX 5\/40-1(1587001)"",
      ""XE-X1-0\/30-1(1679001)"",
      ""XE-X1-0\/30-4(1686004)"",
      ""XE-X1-0\/40-1(1655001)"",
      ""XE-X1-0\/40-4(1662004)"",
      ""XE-X1-5\/30-1(1501001)"",
      ""XE-X1-5\/30-5(1518005)"",
      ""XE-X1-5\/30-60(1518060)"",
      ""XE-X1-5\/40-1(1167001)"",
      ""XE-X1-5\/40-5(1068005)"",
      ""XE-X1-5\/40-60(1068060)"",
      ""XE-XT-PRO75W140(1365001)"",
      ""XE-X-T-75W90-1(1181001)"",
      ""3024301"",
      ""3413300"",
      ""3222300"",
      ""3406300"",
      ""3161350"",
      ""3345001"",
      ""A1454300"",
      ""A1515500"",
      ""3055250"",
      ""3307001"",
      ""3178250"",
      ""3369250"",
      ""3390001"",
      ""3031301"",
      ""3468350"",
      ""3109001"",
      ""3185250"",
      ""3376001"",
      ""3192015"",
      ""3215350"",
      ""3093325"",
      ""3017351"",
      ""3284001"",
      ""3116301"",
      ""3352001"",
      ""3086350"",
      ""3239350"",
      ""3253375"",
      ""3123301"",
      ""3277250"",
      ""A1416001"",
      ""A1638001"",
      ""A1447300"",
      ""A1423300"",
      ""A1621250"",
      ""A1430300"",
      ""A1522300"",
      ""A1324300"",
      ""A1478300"",
      ""A1331300"",
      ""A0280100"",
      ""1143001"",
      ""1044005"",
      ""1594001"",
      ""1617004"",
      ""1617060"",
      ""1600001"",
      ""1624004"",
      ""1624060"",
      ""1778001"",
      ""1785004"",
      ""1273001"",
      ""1266005"",
      ""2812001"",
      ""1907001"",
      ""1334001"",
      ""1327005"",
      ""1327060"",
      ""1297001"",
      ""1280005"",
      ""1433001"",
      ""1372005"",
      ""1891001"",
      ""2263005"",
      ""1259001"",
      ""1242208"",
      ""1242005"",
      ""1242060"",
      ""1211001"",
      ""1204005"",
      ""1204060"",
      ""1280060"",
      ""2430001"",
      ""2416005"",
      ""2416060"",
      ""2027001"",
      ""2034005"",
      ""2041060"",
      ""1389001"",
      ""1396005"",
      ""1396060"",
      ""1488001"",
      ""1136001"",
      ""1037005"",
      ""1037060"",
      ""1679001"",
      ""1686004"",
      ""1655001"",
      ""1662004"",
      ""1501001"",
      ""1518005"",
      ""1518060"",
      ""1167001"",
      ""1068208"",
      ""1068005"",
      ""1068060"",
      ""1112001"",
      ""1013005"",
      ""1587001"",
      ""1129001"",
      ""1020005"",
      ""1181001"",
      ""1341001"",
      ""1365001"",
      ""1716001AS"",
      ""1525001AS"",
      ""1556001AS"",
      ""O3571001"",
      ""O0319001"",
      ""O0500001"",
      ""O0456001"",
      ""O0401001"",
      ""O0203001"",
      ""O0210004"",
      ""O0198001"",
      ""O0785001"",
      ""O0792004"",
      ""O0648001"",
      ""O0655004"",
      ""O7180001"",
      ""O2352001"",
      ""O0020001"",
      ""O0013004"",
      ""O6275001"",
      ""O6282004"",
      ""O7265001"",
      ""O0815005"",
      ""O0708001"",
      ""O0715005"",
      ""XE-1Z-913910"",
      ""1808001\/1211001""
   ],
   ""MOBIL"":[
      ""143096"",
      ""127577"",
      ""152647"",
      ""142082"",
      ""142086"",
      ""142092"",
      ""152560"",
      ""152559"",
      ""152720"",
      ""152719"",
      ""153755"",
      ""153753"",
      ""153754"",
      ""152057"",
      ""152623"",
      ""153390"",
      ""153391"",
      ""152622"",
      ""152621"",
      ""153790"",
      ""153791"",
      ""152650"",
      ""152563"",
      ""153691"",
      ""153689"",
      ""153692"",
      ""153680"",
      ""153749"",
      ""153751"",
      ""153750"",
      ""153266"",
      ""153265"",
      ""153631"",
      ""153645"",
      ""153644"",
      ""153638"",
      ""152655"",
      ""152651"",
      ""152678"",
      ""152104"",
      ""152722"",
      ""153393"",
      ""152103"",
      ""152721"",
      ""153392"",
      ""150688"",
      ""153375"",
      ""152646"",
      ""146409"",
      ""153519"",
      ""152680"",
      ""152648"",
      ""151008"",
      ""151009"",
      ""152645"",
      ""152679"",
      ""141543"",
      ""152709"",
      ""148368"",
      ""152656"",
      ""153495"",
      ""153460"",
      ""153467"",
      ""153469"",
      ""153473"",
      ""152707"",
      ""152664"",
      ""127677"",
      ""152710"",
      ""153485"",
      ""121490"",
      ""127616"",
      ""121574"",
      ""153904"",
      ""153745"",
      ""149518"",
      ""152737"",
      ""152658"",
      ""151071"",
      ""152667"",
      ""153855"",
      ""153856"",
      ""150775"",
      ""152713"",
      ""153849"",
      ""149501"",
      ""152673"",
      ""152538"",
      ""150467"",
      ""151240"",
      ""149531"",
      ""152715"",
      ""152714"",
      ""153121"",
      ""121737"",
      ""152712"",
      ""148369"",
      ""152657"",
      ""150428"",
      ""152711"",
      ""153520"",
      ""122230"",
      ""152953"",
      ""146256"",
      ""152955"",
      ""146458"",
      ""152649"",
      ""146268"",
      ""152956"",
      ""122279"",
      ""152954"",
      ""152652"",
      ""127624"",
      ""153711"",
      ""152594"",
      ""122852"",
      ""127805"",
      ""148821"",
      ""127691"",
      ""152675"",
      ""127602"",
      ""152684"",
      ""151710"",
      ""125370"",
      ""125376"",
      ""125382"",
      ""152571"",
      ""152058"",
      ""152570"",
      ""152569"",
      ""150016"",
      ""152050"",
      ""152568"",
      ""152537"",
      ""151220"",
      ""153624"",
      ""153454"",
      ""152567"",
      ""150011"",
      ""152061"",
      ""152566"",
      ""152063"",
      ""152573"",
      ""152062"",
      ""152572"",
      ""152565"",
      ""153394"",
      ""152564"",
      ""152574"",
      ""150941"",
      ""153018"",
      ""150600"",
      ""152677"",
      ""152198"",
      ""152625"",
      ""152624"",
      ""152952"",
      ""152686"",
      ""152687"",
      ""149635"",
      ""149640"",
      ""149645"",
      ""149650"",
      ""149655"",
      ""149663"",
      ""149659"",
      ""122554"",
      ""150904"",
      ""154560"",
      ""155095"",
      ""154148"",
      ""154279"",
      ""154285"",
      ""154303"",
      ""154315"",
      ""154316"",
      ""154803"",
      ""154805"",
      ""154806"",
      ""155045"",
      ""155048"",
      ""155052"",
      ""155054"",
      ""155143"",
      ""155144"",
      ""155184"",
      ""155248"",
      ""155252"",
      ""155316"",
      ""155317"",
      ""155335"",
      ""155337"",
      ""155338"",
      ""155578"",
      ""155579"",
      ""156154"",
      ""156155"",
      ""156156"",
      ""149500R"",
      ""149517R"",
      ""124398"",
      ""124901"",
      ""143986"",
      ""143990"",
      ""143991"",
      ""143992"",
      ""143994"",
      ""144569"",
      ""146374"",
      ""146379"",
      ""147800"",
      ""148360"",
      ""148996"",
      ""149049"",
      ""149613"",
      ""149709"",
      ""150908"",
      ""150923"",
      ""151075"",
      ""152634"",
      ""152726"",
      ""152818"",
      ""152928"",
      ""152929"",
      ""153474"",
      ""153549"",
      ""153553"",
      ""153555"",
      ""153563"",
      ""154097"",
      ""154411"",
      ""154527"",
      ""154530"",
      ""154641"",
      ""154642"",
      ""154719"",
      ""156048"",
      ""127688"",
      ""150654"",
      ""150658"",
      ""150662"",
      ""150666"",
      ""150794"",
      ""150800"",
      ""152682"",
      ""152829"",
      ""152831"",
      ""155205"",
      ""155207"",
      ""155210"",
      ""155215"",
      ""155732"",
      ""155816"",
      ""155863"",
      ""155865"",
      ""127683"",
      ""147808"",
      ""150791"",
      ""151655"",
      ""151657"",
      ""151815"",
      ""151851"",
      ""151855"",
      ""151859"",
      ""151862"",
      ""152685"",
      ""152688"",
      ""152835"",
      ""153863"",
      ""154238"",
      ""154729"",
      ""155750"",
      ""155756"",
      ""155758"",
      ""155760"",
      ""155764"",
      ""125376R"",
      ""151858R"",
      ""152684R"",
      ""144634"",
      ""152659"",
      ""152661"",
      ""152662"",
      ""152738"",
      ""153050"",
      ""153052"",
      ""153057"",
      ""154953"",
      ""155084"",
      ""155220"",
      ""155678"",
      ""156095"",
      ""156096"",
      ""156097"",
      ""156301"",
      ""156304"",
      ""156305""
   ],
   ""DRAGON"":[
      ""DAR_1L"",
      ""DAR_4L"",
      ""DAR_18L"",
      ""DAG_1L"",
      ""DAG_4L"",
      ""DAG_18L""
   ],
   ""S-OIL 7"":[
      ""962321"",
      ""305882-106520"",
      ""305883-106521"",
      ""304374-104179"",
      ""304375-104180"",
      ""E107894"",
      ""E107891"",
      ""E107890"",
      ""E107893"",
      ""E107959"",
      ""E107956"",
      ""E107955"",
      ""E107958"",
      ""E107950"",
      ""E107948"",
      ""E107952"",
      ""E107934"",
      ""E107929"",
      ""E107927"",
      ""E107933"",
      ""E107921"",
      ""E107918"",
      ""E107920"",
      ""E107671"",
      ""E107668"",
      ""E107670"",
      ""E107662"",
      ""E107658"",
      ""E107661"",
      ""E107652"",
      ""E107649"",
      ""E107651"",
      ""E107684"",
      ""E107687"",
      ""E107697"",
      ""E107700"",
      ""E108019"",
      ""E107883"",
      ""E107885"",
      ""E107881"",
      ""E107878"",
      ""E107876"",
      ""E107880"",
      ""E107825"",
      ""E107830"",
      ""E107914"",
      ""E107911"",
      ""E107909"",
      ""E107913"",
      ""E107855"",
      ""E107851"",
      ""E107849"",
      ""E107854"",
      ""E107848"",
      ""E107847"",
      ""E107842"",
      ""E107839"",
      ""E107838"",
      ""E107841"",
      ""E107834"",
      ""E107833"",
      ""E107836"",
      ""E107977"",
      ""E107979"",
      ""E107767"",
      ""E107763"",
      ""E107766"",
      ""E107761"",
      ""E107757"",
      ""E107760"",
      ""E107741"",
      ""E107748"",
      ""E107744"",
      ""E107742"",
      ""E107643"",
      ""E107638"",
      ""E107642"",
      ""E108079"",
      ""E108078"",
      ""E108077"",
      ""E107628"",
      ""E107623"",
      ""E107627"",
      ""E107618"",
      ""E107616"",
      ""E107617"",
      ""E107614"",
      ""E107611"",
      ""E107819"",
      ""E107817"",
      ""E107818"",
      ""E107983"",
      ""E107981"",
      ""E107982"",
      ""E107987"",
      ""E107985"",
      ""E107986"",
      ""970410"",
      ""E107993"",
      ""E107990"",
      ""E107992"",
      ""E107740"",
      ""E107739"",
      ""E107809"",
      ""E107808"",
      ""E107807"",
      ""E107804"",
      ""E107806"",
      ""E107790"",
      ""E107789"",
      ""E107787"",
      ""E107786"",
      ""E107688"",
      ""E107701"",
      ""E107845"",
      ""E107953"",
      ""E107827"",
      ""E108275"",
      ""E108276"",
      ""E108277"",
      ""E108279"",
      ""E108280"",
      ""E108281"",
      ""E108283"",
      ""E108284"",
      ""E108285"",
      ""E108287"",
      ""E108288"",
      ""E108289"",
      ""E108295"",
      ""E108296"",
      ""E108297"",
      ""E108303"",
      ""E108304"",
      ""E108305"",
      ""E108227"",
      ""E107799"",
      ""E108608"",
      ""E108609"",
      ""E108610""
   ],
   ""YAMALUBE"":[
      ""LUB00W30SS12"",
      ""LUB00W40FS12"",
      ""LUB10W40AP12"",
      ""LUB10W50SS12"",
      ""LUB10W50SS04"",
      ""LUB15W50FS12"",
      ""90790BG20100"",
      ""90790BG20300"",
      ""90790BG20200"",
      ""90790BG20500"",
      ""YMD630212002"",
      ""YMD6302105A2"",
      ""LUB20W50SS12"",
      ""LUB2STRKM112"",
      ""LUB2STRKS112"",
      ""LUB2STRKS104"",
      ""LUB2STRKW112"",
      ""LUB2STRKW104"",
      ""90790BS45100"",
      ""90790BS45300"",
      ""90790BS45200"",
      ""LUB20W40FC12"",
      ""LUB05W30FC12"",
      ""LUB10W40WV12"",
      ""LUB10W40WV04"",
      ""LUB05W30AP12"",
      ""ACCYAMACBL32"",
      ""ACCYAMABND6B"",
      ""ACCBOND4MA00"",
      ""ACCYAMABOND5"",
      ""ACCBOND4MC00"",
      ""ACCBRAKEFLUD"",
      ""ACCYAMACVNDR"",
      ""ACCYAMABOND7"",
      ""ACCFOAMFLTER"",
      ""ACCSTORERITE"",
      ""ACCSTORRIT32"",
      ""ACCPWRTRMF32"",
      ""907933800500"",
      ""907933802900"",
      ""907933802800"",
      ""ACCFORKF0010"",
      ""ACCFORKF0015"",
      ""ACCFORKF0020"",
      ""ACCFORKF0005"",
      ""ACCFORKF0075"",
      ""ACCSHFTDEX00"",
      ""ACCTRANSPLUS"",
      ""ACCGEARLUBQT"",
      ""ACCGEARLUB10"",
      ""ACCGLUBEHDQT"",
      ""90790BS80100"",
      ""90790BS80200"",
      ""ACCCHNCSLUBE"",
      ""ACCSHAFTPL32"",
      ""ACCCHNCSFS08"",
      ""ACCENGCLNR00"",
      ""ACCFOAMFCLGL"",
      ""ACCPPCPTCLNR"",
      ""ACCYAMACBGCL"",
      ""ACCBATTCLNPR"",
      ""ACCCMBSNCLNR"",
      ""ACCCARBSPRAY"",
      ""ACCYAMACHLCL"",
      ""ACCBRKCT1200"",
      ""ACCYAMACPWSP"",
      ""ACCFSTABPL12"",
      ""ACCFSTABPL32"",
      ""ACCFUELMRX16"",
      ""ACCFUELMRX04"",
      ""ACCPOLYGRS10"",
      ""ACCEPNOCGS05"",
      ""ACCSYNPFGR00"",
      ""ACCULTRAGS16"",
      ""ACCGREAS10CT"",
      ""ACCGREAS14CT"",
      ""ACCSLCNGRS00"",
      ""ACCMOLDMGS10"",
      ""ACCSMBGRSE14"",
      ""ACCLUBZALL00"",
      ""ACCCHAINOFAA"",
      ""ACCCHAINONAA"",
      ""ACCSYNCHAINL"",
      ""ACCSLCNSPRAY"",
      ""ACCYAMSHLD00"",
      ""ACCMRNPAIT4D"",
      ""ACCMRNPAIT8D"",
      ""ACCMRNPAITNA"",
      ""ACCSPRAYPLSH"",
      ""ACCYAMACOATC"",
      ""ACCYAMABON14""
   ],
   ""REDSKIN"":[
      ""RH-350"",
      ""RH-400"",
      ""RH-425"",
      ""RH-450"",
      ""RH-475"",
      ""RH-500"",
      ""RH-530"",
      ""RH-550"",
      ""RH-600"",
      ""RH-650"",
      ""RH-700"",
      ""RW-350WINTER"",
      ""RW-400WINTER"",
      ""RW-425WINTER"",
      ""RW-450WINTER"",
      ""RW-475WINTER"",
      ""RW-500WINTER"",
      ""RW-530WINTER"",
      ""RW-550WINTER"",
      ""RW-600WINTER"",
      ""RW-650WINTER"",
      ""RW-700WINTER""
   ],
   ""WYNNS"":[
      ""W76401"",
      ""W77101"",
      ""W55972"",
      ""W51272"",
      ""W70701"",
      ""W22911"",
      ""W22810"",
      ""W54179"",
      ""W61463"",
      ""W25692"",
      ""W63850"",
      ""W45944"",
      ""W45644"",
      ""W25241"",
      ""W23379"",
      ""W28393"",
      ""W89195"",
      ""W71851"",
      ""W25541"",
      ""W61354"",
      ""W76844"",
      ""W76695"",
      ""W47244"",
      ""W29879"",
      ""W64505"",
      ""W74944"",
      ""W56479"",
      ""W28679"",
      ""W30202"",
      ""W29601"",
      ""W31705"",
      ""W30205""
   ],
   ""HYUNDAI-KIA"":[
      ""1061223-2"",
      ""310000130""
   ],
   ""HONDA"":[
      ""08206-9002"",
      ""08232-P99K1LHE"",
      ""08232-P99D1HMR"",
      ""08232-P99D4HMR"",
      ""08216-99974""
   ],
   ""CASTROL"":[
      ""15101F"",
      ""15109A"",
      ""152DE5"",
      ""15BA41"",
      ""15B695"",
      ""15BA42"",
      ""15B9C6"",
      ""157AEA"",
      ""157AEB"",
      ""15B9D0"",
      ""15B353"",
      ""157E6A"",
      ""157E6B"",
      ""157E5F"",
      ""156E3E"",
      ""156E3F"",
      ""156E8B"",
      ""156E8C"",
      ""156E8A"",
      ""15A001"",
      ""15A008"",
      ""15A569"",
      ""15A568"",
      ""15BFA7"",
      ""15667C"",
      ""15669A"",
      ""15665E"",
      ""157B1B"",
      ""157B1C"",
      ""157B20"",
      ""157E4F"",
      ""157E5C"",
      ""15BE02"",
      ""15BE03"",
      ""15B9F6"",
      ""15B9F5"",
      ""15B9F4"",
      ""15A4DE"",
      ""15A4EO"",
      ""15A4E2"",
      ""156EDB"",
      ""156EDC"",
      ""156EDD"",
      ""15CA23"",
      ""15CA24"",
      ""15CA22"",
      ""15C926"",
      ""15C927"",
      ""15C925"",
      ""15CA3A"",
      ""15CA3B"",
      ""15CA39"",
      ""15C93C"",
      ""15C93D"",
      ""15C93E"",
      ""15C9DF"",
      ""15C9EO"",
      ""15C9DE"",
      ""15CA2F"",
      ""15CA30"",
      ""15CA31"",
      ""15DD49"",
      ""15DD48"",
      ""15CBB6"",
      ""15D353"",
      ""15CC4F"",
      ""15CC4D"",
      ""1572FA"",
      ""15C3EC"",
      ""1572FB"",
      ""15940B"",
      ""15688B"",
      ""15688C"",
      ""157E4A"",
      ""157E4C"",
      ""157DF2"",
      ""156F9C"",
      ""15C5C9"",
      ""15B477"",
      ""15CAA2"",
      ""15B561"",
      ""124791"",
      ""15D8CA"",
      ""159B70"",
      ""15935B"",
      ""125270"",
      ""15035A"",
      ""14EB85"",
      ""15036B"",
      ""15036E"",
      ""15037E"",
      ""1502F5"",
      ""157D5B"",
      ""15001C"",
      ""15AA11"",
      ""14FFCF"",
      ""14FFD1"",
      ""14FFCE"",
      ""156CA5"",
      ""156CA2"",
      ""156CA4"",
      ""15003D"",
      ""156CAA"",
      ""156CA7"",
      ""156CA9"",
      ""15032B"",
      ""1502EE"",
      ""1502F7"",
      ""1502FB"",
      ""15D705"",
      ""14FFAD"",
      ""15001B"",
      ""15002A"",
      ""15005D"",
      ""15006D"",
      ""15D7A8"",
      ""15D998"",
      ""15D988"",
      ""1500C1"",
      ""15007E"",
      ""15801F"",
      ""15D724"",
      ""1555BC""
   ],
   ""MOTUL"":[
      ""110485"",
      ""102983"",
      ""107818"",
      ""109114"",
      ""109141"",
      ""109867"",
      ""102927"",
      ""102928"",
      ""107798"",
      ""105914"",
      ""105920"",
      ""106558"",
      ""106608"",
      ""106280"",
      ""100046"",
      ""101282"",
      ""106991"",
      ""106999"",
      ""102787"",
      ""102792"",
      ""108859"",
      ""105928"",
      ""105929"",
      ""105930"",
      ""105924"",
      ""105926"",
      ""105925"",
      ""100122"",
      ""105888"",
      ""105887"",
      ""104024"",
      ""107672"",
      ""107693"",
      ""107318"",
      ""107319"",
      ""104118"",
      ""104121"",
      ""110317"",
      ""104125"",
      ""104129"",
      ""104137"",
      ""104138"",
      ""104135"",
      ""104243"",
      ""104244"",
      ""104239"",
      ""104245"",
      ""104241"",
      ""104240"",
      ""108587"",
      ""108644"",
      ""109462"",
      ""108633"",
      ""104054"",
      ""104056"",
      ""106606"",
      ""104062"",
      ""104063"",
      ""104066"",
      ""104070"",
      ""104067"",
      ""104068"",
      ""104074"",
      ""104075"",
      ""104076"",
      ""104080"",
      ""104083"",
      ""108009"",
      ""108030"",
      ""107956"",
      ""107957"",
      ""107941"",
      ""107942"",
      ""107943"",
      ""107944"",
      ""107972"",
      ""107970"",
      ""107971"",
      ""107973"",
      ""107975"",
      ""107978"",
      ""109463"",
      ""106607"",
      ""104089"",
      ""104090"",
      ""104091"",
      ""110315"",
      ""104092"",
      ""104097"",
      ""104298"",
      ""104299"",
      ""104103"",
      ""104086"",
      ""104087"",
      ""104100"",
      ""104101"",
      ""104038"",
      ""102889"",
      ""101542"",
      ""101545"",
      ""101580"",
      ""101584"",
      ""109954"",
      ""108536"",
      ""108537"",
      ""109102"",
      ""109104"",
      ""108212"",
      ""108213"",
      ""108214"",
      ""109531"",
      ""108229"",
      ""102793"",
      ""102947"",
      ""102782"",
      ""104257"",
      ""102898"",
      ""108944"",
      ""108945"",
      ""108942"",
      ""109775"",
      ""109776"",
      ""109373"",
      ""109761"",
      ""109762"",
      ""109470"",
      ""109171"",
      ""109471"",
      ""109887"",
      ""110607"",
      ""106376"",
      ""106377"",
      ""106569"",
      ""104531"",
      ""104532"",
      ""104533"",
      ""106142"",
      ""109656"",
      ""105898"",
      ""105900"",
      ""105878"",
      ""105879"",
      ""105938"",
      ""105939"",
      ""107152"",
      ""107153"",
      ""107154"",
      ""107141"",
      ""110569"",
      ""107142"",
      ""101743"",
      ""105884"",
      ""107757"",
      ""102788"",
      ""101732"",
      ""101734"",
      ""106613"",
      ""106615"",
      ""106453"",
      ""106447"",
      ""106397"",
      ""105874"",
      ""101573"",
      ""101575"",
      ""102638"",
      ""102643"",
      ""106317"",
      ""106352"",
      ""106374"",
      ""106375"",
      ""108969"",
      ""108950"",
      ""103682"",
      ""100170"",
      ""102989"",
      ""108118"",
      ""102985"",
      ""102996"",
      ""102998"",
      ""102999"",
      ""103001"",
      ""103003"",
      ""108120"",
      ""102994"",
      ""105503"",
      ""108123"",
      ""110484"",
      ""107816"",
      ""110486"",
      ""108117"",
      ""104880"",
      ""108119"",
      ""108263"",
      ""109995"",
      ""107813"",
      ""107815"",
      ""107810"",
      ""108588"",
      ""102980"",
      ""102981"",
      ""106513"",
      ""108653"",
      ""108676"",
      ""108656"",
      ""108661"",
      ""102991"",
      ""108664"",
      ""108672"",
      ""108121"",
      ""105835"",
      ""102718"",
      ""104247"",
      ""100950"",
      ""105836"",
      ""103830"",
      ""100948"",
      ""105774"",
      ""106476"",
      ""109562"",
      ""109564"",
      ""105777"",
      ""105778"",
      ""105779"",
      ""105787"",
      ""105781"",
      ""103996"",
      ""100103"",
      ""100106"",
      ""106745"",
      ""109055"",
      ""104000"",
      ""109057"",
      ""108976"",
      ""105773"",
      ""106954"",
      ""105784"",
      ""104001"",
      ""105785"",
      ""106470"",
      ""105786"",
      ""106399"",
      ""105859"",
      ""105894"",
      ""105895"",
      ""108860""
   ],
   ""JONNESWAY"":[
      ""JAZ-0019"",
      ""JAZ-0070U"",
      ""JAZ-0070W"",
      ""JAZ-0070B"",
      ""W25108S"",
      ""W23108S"",
      ""W61106S"",
      ""W45117S"",
      ""W45110S"",
      ""W45508S"",
      ""W68106S"",
      ""W27AT6"",
      ""W27AT8"",
      ""W2824"",
      ""S05HD4113S"",
      ""S05HD4213S"",
      ""S04H6315SA"",
      ""S04H6622S"",
      ""S04H524127S"",
      ""S04H524128S"",
      ""S04H524142S"",
      ""S04H52460S"",
      ""S04H52477S"",
      ""S04H52478S"",
      ""S04H52482S"",
      ""S04H52483S"",
      ""S04H52494S"",
      ""S04H624101SA"",
      ""S05H48107S"",
      ""S68H5234111S"",
      ""S03AD4111S"",
      ""S05H4113S"",
      ""S05H4213S"",
      ""W231617"",
      ""W27AT10"",
      ""W27AT12"",
      ""R19H310S"",
      ""W681011"",
      ""W681618""
   ],
   ""OMBRA"":[
      ""A90040"",
      ""OHT202"",
      ""OHT202C"",
      ""OHT203"",
      ""OHT233"",
      ""OHT225C"",
      ""OHT1002"",
      ""OHT1003"",
      ""OHT1045"",
      ""OHT1046"",
      ""OHT1049"",
      ""OHT1070"",
      ""OHT102"",
      ""OHT103"",
      ""OHT105"",
      ""OHT108"",
      ""OHT110"",
      ""OHT112"",
      ""OHT116"",
      ""OHT120"",
      ""OHT132"",
      ""OHT150"",
      ""OHT100"",
      ""A90035"",
      ""A90036"",
      ""A90037"",
      ""OMT10S"",
      ""OMT16S"",
      ""935007"",
      ""OMT37S"",
      ""OMT55S"",
      ""OMT57S"",
      ""OMT69S"",
      ""OMT75S"",
      ""OMT77S12"",
      ""OMT82S12"",
      ""OMT88S"",
      ""OMT93S"",
      ""OMT94S12"",
      ""OMT101S"",
      ""OMT131S"",
      ""OMT141S"",
      ""OMT150S"",
      ""OMT143SL"",
      ""911120"",
      ""911150"",
      ""911224"",
      ""911225"",
      ""953222""
   ],
   ""THORVIK"":[
      ""UTS0038"",
      ""UTS0057"",
      ""UTS0056"",
      ""UTS0072"",
      ""UTS0077"",
      ""UTS0077\/12"",
      ""UTS0077MP"",
      ""UTS0082"",
      ""UTS0082\/12"",
      ""UTS0082MP"",
      ""UTS0094"",
      ""UTS0094\/12"",
      ""UTS0094MP"",
      ""UTS0101"",
      ""UTS0108"",
      ""UTS0108\/12"",
      ""UTS0108MP"",
      ""UTS0127"",
      ""UTS0128"",
      ""UTS0142""
   ],
   ""FILL INN"":[
      ""FL045"",
      ""FL030"",
      ""FL031"",
      ""FL032"",
      ""FL029"",
      ""FL072"",
      ""FL046"",
      ""FL050"",
      ""FL015"",
      ""FL053"",
      ""FL120"",
      ""FL064"",
      ""FL051"",
      ""FL063"",
      ""FL013"",
      ""FL054"",
      ""FL052"",
      ""FL125"",
      ""FL109"",
      ""FL014"",
      ""FL048"",
      ""FL073"",
      ""FL111"",
      ""FL121"",
      ""FL112"",
      ""FL010"",
      ""FL012"",
      ""FL122"",
      ""FL123"",
      ""FL124"",
      ""FL144"",
      ""FL147"",
      ""FL145"",
      ""FL146"",
      ""FL141"",
      ""FL077"",
      ""FL104"",
      ""FL059"",
      ""FL062"",
      ""FL060"",
      ""FL061"",
      ""FL058"",
      ""FL017"",
      ""FL042"",
      ""FL092"",
      ""FL049"",
      ""FL091"",
      ""FL093"",
      ""FL090"",
      ""FL126"",
      ""FL127"",
      ""FL135"",
      ""FL016"",
      ""FL018"",
      ""FL019"",
      ""FL020"",
      ""FL103"",
      ""FL134"",
      ""FL065"",
      ""FL113"",
      ""FL142"",
      ""FL143"",
      ""FL056"",
      ""FL119"",
      ""FL025"",
      ""FL026"",
      ""FL027"",
      ""FL128"",
      ""FL129"",
      ""FL118"",
      ""FL024"",
      ""FL117"",
      ""FL022"",
      ""FL021""
   ],
   ""LOCTITE"":[
      ""2385319"",
      ""2385316"",
      ""2385318"",
      ""867933"",
      ""1924111"",
      ""1924110"",
      ""1918987"",
      ""1335863"",
      ""1335896"",
      ""246648"",
      ""1803357"",
      ""2394515"",
      ""2394934"",
      ""142273"",
      ""2057362"",
      ""246662""
   ],
   ""TEROSON"":[
      ""2390600"",
      ""2685294"",
      ""2671189"",
      ""2671463""
   ],
   ""SIBOIL"":[
      ""6014""
   ],
   ""NO NAME"":[
      ""112\/3-STD-\u0431"",
      ""112\/3-STD-\u0441"",
      ""112\/3-STD-\u0447"",
      ""13031"",
      ""13034"",
      ""16021"",
      ""17341"",
      ""25002"",
      ""25007"",
      ""25023"",
      ""26310"",
      ""26311"",
      ""YSFE-02"",
      ""62455"",
      ""69224"",
      ""69225"",
      ""69226"",
      ""8915"",
      ""94440"",
      ""\u0410\u0412-026"",
      ""\u0410\u0412006-\u0431"",
      ""\u0410\u0412006-\u0441"",
      ""\u0410\u0412006-\u0447"",
      ""\u0410\u0412023-2"",
      ""\u0410\u0412023-7"",
      ""\u0431\u0430\u0440\u0430\u0448\u0435\u043a"",
      ""\u0413\u0446 771-677"",
      ""\u0413\u0446 771-691"",
      ""\u0413\u0446 771-692"",
      ""\u041c6\u044520, \u0443\u043f.4\u0448\u0442"",
      ""\u041e\u041f-2(\u0437) ABCE"",
      ""CF-1410"",
      ""RV1Y"",
      ""19553"",
      ""59142"",
      ""19556"",
      ""19956"",
      ""19954"",
      ""19955"",
      ""19647"",
      ""19958"",
      ""19960"",
      ""22125"",
      ""19959"",
      ""21252"",
      ""078"",
      ""NT9.5*5.5"",
      ""804"",
      ""37768"",
      ""15538"",
      ""15539""
   ],
   ""WD-40"":[
      ""314923"",
      ""314937"",
      ""314993""
   ],
   ""DEVON"":[
      ""338661013"",
      ""338661905"",
      ""338661911"",
      ""338662362"",
      ""338662427"",
      ""338662647"",
      ""338662648""
   ],
   ""X-OIL"":[
      ""A70020-01T"",
      ""A70020-04T"",
      ""A70030-01T"",
      ""A70030-04T"",
      ""A7C060-01T"",
      ""A7C060-04T"",
      ""A7C061-01T"",
      ""A7C061-04T"",
      ""A7C062-01T"",
      ""A7C062-04T"",
      ""AJ0070-01T"",
      ""AJ0070-04T"",
      ""AJ0080-01T"",
      ""AJ0080-04T"",
      ""AJ0090-01T"",
      ""AJ0090-04T"",
      ""AJ0100-01T"",
      ""AJ0100-04T"",
      ""AJ0120-01T"",
      ""AJ0120-04T"",
      ""AJ0202-01T"",
      ""AJ0202-04T"",
      ""AJ0203-01T"",
      ""AJ0203-04T"",
      ""AJ02MD-01T"",
      ""AJ02MD-04T"",
      ""AJ02MJ-01T"",
      ""AJ02MJ-04T"",
      ""AJ02S3-01T"",
      ""AJ02S3-04T"",
      ""L75-90-01T"",
      ""L80-90-01T"",
      ""L85-90-01T"",
      ""LSD-90-01T"",
      ""T47585-01T"",
      ""T47585-04T"",
      ""T57590-01T"",
      ""T57590-04T"",
      ""T58090-01T"",
      ""T58090-04T""
   ],
   ""\u0414\u0410\u041b\u042c\u041d\u0418\u0419 \u0412\u041e\u0421\u0422\u041e\u041a"":[
      ""5094"",
      ""5095"",
      ""5097"",
      ""SWS-0205""
   ],
   ""SIBIRIA"":[
      ""800090"",
      ""800163"",
      ""800216"",
      ""800256"",
      ""800598"",
      ""800887"",
      ""805585"",
      ""805601"",
      ""805600""
   ],
   ""\u0414\u0417\u0415\u0420\u0416\u0418\u041d\u0421\u041a\u0418\u0419"":[
      ""800717"",
      ""800720""
   ],
   ""SINTEC"":[
      ""978969"",
      ""978975"",
      ""808519"",
      ""978923"",
      ""800772"",
      ""800735"",
      ""990244"",
      ""801932"",
      ""801933"",
      ""801985"",
      ""801987"",
      ""801938"",
      ""801939""
   ],
   ""\u0414\u0415\u041b\u042c\u0422\u0410 \u041f\u0420\u041e"":[
      ""\u0410\u0412001-\u0441"",
      ""\u0410\u0412001-\u0431"",
      ""\u0410\u0412001-\u0447""
   ],
   ""\u0410\u0412\u0422\u041eD\u0415\u041b\u041e"":[
      ""\u0410\u0414-31010"",
      ""40529""
   ],
   ""BRONCO"":[
      ""BRC0523"",
      ""SA1007"",
      ""BRC0403"",
      ""BRC0825"",
      ""BRC0301""
   ],
   ""DIAMOND"":[
      ""DA0354"",
      ""DA0946""
   ],
   ""CARFORT"":[
      ""QP0501"",
      ""QP0502""
   ],
   ""RINKAI"":[
      ""RC1402"",
      ""RC1403""
   ],
   ""RUNWAY"":[
      ""RW0347"",
      ""RW1505"",
      ""RW5048"",
      ""RW5059""
   ],
   ""JETT"":[
      ""V21-61747""
   ],
   ""ZIC"":[
      ""132621"",
      ""162621"",
      ""132622"",
      ""162622"",
      ""132671"",
      ""162671"",
      ""132660"",
      ""162660"",
      ""132662"",
      ""162662"",
      ""132610"",
      ""162610"",
      ""132617"",
      ""162616"",
      ""162619"",
      ""132609"",
      ""162609"",
      ""132684"",
      ""162684"",
      ""132616"",
      ""132619""
   ],
   ""TAKAYAMA"":[
      ""605038"",
      ""605141"",
      ""605039"",
      ""605046"",
      ""605047"",
      ""605040"",
      ""605041"",
      ""605042"",
      ""605043"",
      ""605044"",
      ""605045"",
      ""605554"",
      ""605530""
   ],
   ""G-ENERGY"":[
      ""253142405"",
      ""253142404"",
      ""253140272"",
      ""253140273"",
      ""253142258"",
      ""253142259"",
      ""253142394""
   ],
   ""ROSSVIK"":[
      ""49906"",
      ""49907"",
      ""49905"",
      ""49918"",
      ""11327"",
      ""49908"",
      ""49914"",
      ""22667"",
      ""29426"",
      ""22567"",
      ""22568""
   ],
   ""OILRIGHT"":[
      ""2628""
   ],
   ""NACHI"":[
      ""NP47SCRN40P4""
   ],
   ""ROLF"":[
      ""322665""
   ],
   ""FENOM"":[
      ""FN437"",
      ""FN611N""
   ],
   ""PIECE OF MIND"":[
      ""PM0941""
   ],
   ""\u0412\u0415\u0421\u0422\u041e"":[
      ""000031"",
      ""000017""
   ],
   ""AIRLINE"":[
      ""ASP-1-01""
   ],
   ""BARBELL"":[
      ""TSJ002""
   ],
   ""TYPE R"":[
      ""ZSL-907""
   ],
   ""SMT2"":[
      ""SMT2507""
   ],
   ""AXIOM"":[
      ""AP015""
   ],
   ""\u0417\u0423\u0411\u0420"":[
      ""9978"",
      ""9979"",
      ""9980"",
      ""20856"",
      ""9981"",
      ""21128"",
      ""9983"",
      ""9984"",
      ""20847"",
      ""20848"",
      ""20849"",
      ""20851"",
      ""20853"",
      ""20854""
   ],
   ""VUNGAEPYO"":[
      ""6614""
   ],
   ""\u041a\u041e\u041d\u0422\u0410\u041a\u0422"":[
      ""25009"",
      ""25010"",
      ""25011""
   ],
   ""KOYO"":[
      ""LM603049\/11""
   ],
   ""SHINKO"":[
      ""SC-901""
   ],
   ""SAKURA"":[
      ""C-1113"",
      ""C-2704"",
      ""F-11130""
   ],
   ""PIAA"":[
      ""AT7"",
      ""AH1"",
      ""AT10""
   ],
   ""BUIL FILTER"":[
      ""BIO-316""
   ],
   ""C.N.R.G."":[
      ""00-00016697"",
      ""00-00016703"",
      ""00-00016905"",
      ""00-00016906"",
      ""00-00016705"",
      ""00-00016779"",
      ""00-00016902"",
      ""00-00016709"",
      ""00-00016789"",
      ""00-00016714"",
      ""00-00016715"",
      ""00-00016717"",
      ""00-00016718"",
      ""00-00016721"",
      ""00-00016722"",
      ""00-00016724"",
      ""00-00016725"",
      ""00-00016728"",
      ""00-00016729"",
      ""00-00016733"",
      ""00-00016734"",
      ""00-00016737"",
      ""00-00016787"",
      ""00-00016752"",
      ""00-00017009"",
      ""00-00016749"",
      ""00-00016750"",
      ""00-00016970"",
      ""00-00016699"",
      ""00-00016700"",
      ""00-00016738"",
      ""00-00016971"",
      ""00-00016940"",
      ""00-00016739"",
      ""00-00016740"",
      ""00-00016786"",
      ""00-00016741"",
      ""00-00016742"",
      ""00-00016743"",
      ""00-00016744"",
      ""00-00016746""
   ],
   ""COOLSTREAM"":[
      ""CS-010703-GR"",
      ""CS-010909-GR"",
      ""CS-010909-RD"",
      ""TS-010203"",
      ""CS-010913-GR"",
      ""CS-010103"",
      ""CS-010913-RD"",
      ""CS-010703-RD"",
      ""CS-010702-RD"",
      ""CS-010701-RD"",
      ""CS-010701-GR"",
      ""CS-010702-GR""
   ]
}"
qRT0g6eA,openwrt router setup by snowy,coinwalk,JavaScript,Thursday 23rd of May 2024 05:07:08 AM CDT,"

uci add_list dhcp.@dnsmasq[0].server=""/partner.googleadservices.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/code.jquery.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/www.googletagmanager.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/cdn.jsdelivr.net/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/just-dice.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/altquick.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/freebitcoins.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/newassets.hcaptcha.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/googleads.g.doubleclick.net/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/pagead2.googlesyndication.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/tpc.googlesyndication.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/www.google.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/hcaptcha.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/coinspot.com.au/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/ing.com.au/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/pastebin.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/challenges.cloudflare.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/s0.2mdn.net/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/fundingchoicesmessages.google.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/match.adsrvr.org/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/c1.adform.net/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/gtrace.mediago.io/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/analytics.pangle-ads.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/a.tribalfusion.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/cm.g.doubleclick.net/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/doubleclick.net/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/fonts.gstatic.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/x.bidswitch.net/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/dis.criteo.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/cms.quantserve.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/www.googleadservices.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/adform.net/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/analytics.google.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/www.gstatic.com/8.8.8.8""
uci add_list dhcp.@dnsmasq[0].server=""/www.adsensecustomsearchads.com/8.8.8.8""
uci commit dhcp
reboot"
K3d5ZAnr,ticTacToe,eternalmeg,JavaScript,Thursday 23rd of May 2024 05:02:29 AM CDT,"function ticTacToe(moves) {
    const dashboard = [
        [false, false, false],
        [false, false, false],
        [false, false, false]
    ];

    let currentPlayer = 'X';

    for (let move of moves) {
        const [row, col] = move.split(' ').map(Number);

        if (dashboard[row][col] !== false) {
            console.log(""This place is already taken. Please choose another!"");
            continue;
        }

        dashboard[row][col] = currentPlayer;


        if (checkWinner(dashboard, row, col, currentPlayer)) {
            console.log(`Player ${currentPlayer} wins!`);
            printDashboard(dashboard);
            return;
        }

        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';


        if (isDashboardFull(dashboard)) {
            console.log(""The game ended! Nobody wins :("");
            printDashboard(dashboard);
            return;
        }
    }

    function checkWinner(dashboard, row, col, player) {

        if (dashboard[row].every(cell => cell === player)) return true;


        if (dashboard.every(row => row[col] === player)) return true;


        if ((row === col || row + col === 2) && checkDiagonal(dashboard, player)) return true;

        return false;
    }

    function checkDiagonal(dashboard, player) {
        const n = dashboard.length;
        let mainDiagonal = true;
        let secondaryDiagonal = true;

        for (let i = 0; i < n; i++) {
            if (dashboard[i][i] !== player) {
                mainDiagonal = false;
            }
            if (dashboard[i][n - 1 - i] !== player) {
                secondaryDiagonal = false;
            }
        }

        return mainDiagonal || secondaryDiagonal;
    }

    function isDashboardFull(dashboard) {
        return dashboard.every(row => row.every(cell => cell !== false));
    }

    function printDashboard(dashboard) {
        for (let row of dashboard) {
            console.log(row.map(cell => cell === false ? 'false' : cell).join('\t'));
        }
    }

}"
E96ZVaWr,bazeLV7,antisa,C#,Thursday 23rd of May 2024 04:45:07 AM CDT,"using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

public partial class Form1 : Form
{
    private int? selectedPersonId = null;

    public Form1()
    {
        InitializeComponent();
        this.dgvPodaci.SelectionChanged += new System.EventHandler(this.dgvPodaci_SelectionChanged);
        this.btnBrisi.Click += new System.EventHandler(this.btnBrisi_Click);
        this.btnPrikaziSve.Click += new System.EventHandler(this.btnPrikaziSve_Click);
        this.btnSpremi.Click += new System.EventHandler(this.btnSpremi_Click);
    }

    private void PrikaziSveOsobe()
    {
        string connectionString = ""Server=xxx.xxx.xxx.xxx;Database=student;User Id=student;Password=student;"";
        string query = ""SELECT * FROM osobe ORDER BY prezime"";

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlDataAdapter dataAdapter = new SqlDataAdapter(query, connection);
            DataTable dataTable = new DataTable();
            dataAdapter.Fill(dataTable);
            dgvPodaci.DataSource = dataTable;
        }
    }

    private void dgvPodaci_SelectionChanged(object sender, EventArgs e)
    {
        if (dgvPodaci.SelectedRows.Count > 0)
        {
            DataGridViewRow selectedRow = dgvPodaci.SelectedRows[0];
            selectedPersonId = Convert.ToInt32(selectedRow.Cells[""id""].Value);
            txtOIB.Text = selectedRow.Cells[""OIB""].Value.ToString();
            txtIme.Text = selectedRow.Cells[""ime""].Value.ToString();
            txtPrezime.Text = selectedRow.Cells[""prezime""].Value.ToString();
            txtDatum.Text = Convert.ToDateTime(selectedRow.Cells[""datum_rodenja""].Value).ToString(""dd.MM.yyyy"");
            if (selectedRow.Cells[""spol""].Value.ToString() == ""M"")
            {
                rbM.Checked = true;
            }
            else
            {
                rbZ.Checked = true;
            }
            txtVisina.Text = selectedRow.Cells[""visina""].Value.ToString();
            txtBrCip.Text = selectedRow.Cells[""broj_cipela""].Value.ToString();

            btnBrisi.Enabled = true;
        }
        else
        {
            btnBrisi.Enabled = false;
        }
    }

    private void SpremiOsobu()
    {
        string connectionString = ""Server=xxx.xxx.xxx.xxx;Database=student;User Id=student;Password=student;"";
        string query;

        if (selectedPersonId == null)
        {
            query = ""INSERT INTO osobe (OIB, ime, prezime, datum_rodenja, spol, visina, broj_cipela) "" +
                    ""VALUES (@OIB, @Ime, @Prezime, @DatumRodenja, @Spol, @Visina, @BrojCipela)"";
        }
        else
        {
            query = ""UPDATE osobe SET OIB = @OIB, ime = @Ime, prezime = @Prezime, datum_rodenja = @DatumRodenja, "" +
                    ""spol = @Spol, visina = @Visina, broj_cipela = @BrojCipela WHERE id = @Id"";
        }

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            using (SqlCommand command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue(""@OIB"", txtOIB.Text);
                command.Parameters.AddWithValue(""@Ime"", txtIme.Text);
                command.Parameters.AddWithValue(""@Prezime"", txtPrezime.Text);
                command.Parameters.AddWithValue(""@DatumRodenja"", DateTime.Parse(txtDatum.Text));
                command.Parameters.AddWithValue(""@Spol"", rbM.Checked ? ""M"" : ""Z"");
                command.Parameters.AddWithValue(""@Visina"", int.Parse(txtVisina.Text));
                command.Parameters.AddWithValue(""@BrojCipela"", int.Parse(txtBrCip.Text));

                if (selectedPersonId != null)
                {
                    command.Parameters.AddWithValue(""@Id"", selectedPersonId);
                }

                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        selectedPersonId = null;
        ClearFormFields();
        btnBrisi.Enabled = false;
        PrikaziSveOsobe();
    }

    private void BrisiOsobu()
    {
        if (selectedPersonId == null)
        {
            MessageBox.Show(""Nije odabrana nijedna osoba za brisanje."");
            return;
        }

        string connectionString = ""Server=xxx.xxx.xxx.xxx;Database=student;User Id=student;Password=student;"";
        string query = ""DELETE FROM osobe WHERE id = @Id"";

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            using (SqlCommand command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue(""@Id"", selectedPersonId);

                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        selectedPersonId = null;
        ClearFormFields();
        btnBrisi.Enabled = false;
        PrikaziSveOsobe();
    }

    private void ClearFormFields()
    {
        txtOIB.Clear();
        txtIme.Clear();
        txtPrezime.Clear();
        txtDatum.Clear();
        rbM.Checked = false;
        rbZ.Checked = false;
        txtVisina.Clear();
        txtBrCip.Clear();
    }

    private void btnPrikaziSve_Click(object sender, EventArgs e)
    {
        PrikaziSveOsobe();
    }

    private void btnSpremi_Click(object sender, EventArgs e)
    {
        SpremiOsobu();
    }

    private void btnBrisi_Click(object sender, EventArgs e)
    {
        BrisiOsobu();
    }
}
"
vG1Jj7TB,balmod.c,Gaxil,C,Thursday 23rd of May 2024 04:26:28 AM CDT,"#include <string.h>
#include ""grx/include/grx20.h""
#include ""grx/include/grx20.h""
#include ""grx/include/grxkeys.h""
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include ""balmod.h""


void horsi_model_default_init(horsi_model_data *mo)
{
    mo->v0 = 100.0;
    mo->alpha = M_PI / 4.0;
    mo->g = 9.81;
    mo->x = 0.0;
    mo->y = 0.0;
    mo->x0 = 0.0;
    mo->y0 = 0.0;
    mo->dt = 0.001;
}

void horsi_model_start(horsi_model_data *mo)
{
   mo->t = 0.0;
}

int horsi_model_strela_nedopadla(horsi_model_data *mo)
{
      return ( mo->y >= 0 );
}

void horsi_model_iter (horsi_model_data *mo)
{
     mo->x = mo->x0 + mo->v0 * mo->t * cos(mo->alpha);
     mo->y = mo->y0 + mo->v0 * mo->t * sin(mo->alpha) - 0.5 * mo->g * mo->t * mo->t;
     mo->t += mo->dt;
}


/////////////////////////////////////////////////////////////////////////


void lepsi_model_default_init (lepsi_model_data *mo)
{
    mo->t0 = 0.0; mo->x0 = 0.0;  mo->y0 = 0.0;
    mo->v0 = 470.0;
    mo->eluhel = 45.0;
    mo->alpha = mo->eluhel* M_PI/180.0;
    mo->dt = 0.1;
    mo->R=0.02; // polomer strely
    mo->m=10.8; // hmotnost strely
    mo->ro=1.3; // hustota vzduchu
    mo->C=0.55; // koeficient odporu
    mo->g=9.81; // tihove zrychleni
    mo->S= M_PI * mo->R * 2.0;
    mo->k=mo->C* mo->ro * mo->S/2.0;
}

int lepsi_model_strela_nedopadla(lepsi_model_data *mo){
    return (mo->y>=0) ;
}

void lepsi_model_start(lepsi_model_data *mo)
{
 mo->vx=mo->v0*cos(mo->alpha);
 mo->vy=mo->v0*sin(mo->alpha);

 mo->v=sqrt(mo->vx*mo->vx + mo->vy*mo->vy);
 // --- vlastni numericka integrace - k
 mo->t=mo->t_minule=mo->t0;
 mo->x=mo->x_minule=mo->x0;
 mo->y=mo->y_minule=mo->y0;
 mo->i=1;
}

int lepsi_model_iter (lepsi_model_data *mo)
{
   // cislo aktualni iterace (pro vypovet neni potreba)
   mo->i=mo->i+1;

   // DOPROGRAMUJTE NUMERICKE RESENI POHYBOVE ROVNICE EULEROVOU METDODOU
   // tj. postupny vypocet x,y   ax,ay    vx,vy
   // ( mo->x, mo->y atd. )

    mo->x = mo->x_minule + mo->vx * mo->dt;
    mo->y = mo->y_minule + mo->vy * mo->dt;


    mo->ax = -mo->k * mo->v * mo->vx/mo->m;
    mo->ay = -mo->g - mo->k * mo->v * mo->vy/mo->m;

    mo->vx = mo->vx + mo->ax*mo->dt;
    mo->vy = mo->vy + mo->ay*mo->dt;

   // vypocet okamzite rychlosti v danem kroku
   mo->v= sqrt(mo->vx*mo->vx + mo->vy*mo->vy);

   // priprava pristiho casoveho okamziku
   mo->t=mo->t_minule + mo->dt;

   // zapamatovani minuleho casoveho okamziku a polohy projektilu
   mo->t_minule=mo->t;
   mo->x_minule=mo->x;
   mo->y_minule=mo->y;

}
"
uBtuGuyD,OWOP / OurWorldOfPixels Image Overlay,scar17off,JavaScript,Thursday 23rd of May 2024 03:59:36 AM CDT,"// ==UserScript==
// @name         Image Overlay
// @namespace    http://tampermonkey.net/
// @version      2024-05-23
// @description  Adds an overlay to the game that allows you to select colors from the overlayed image. Made in 5 minutes. Ctrl + LMB to select color.
// @usage        addOverlayImage(""URL"", 0, 0, 512, 512, 0.5);
// @author       scar17off
// @match        *://ourworldofpixels.com/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=ourworldofpixels.com
// @grant        none
// ==/UserScript==

function addOverlayImage(imageUrl, x, y, width, height, opacity = 0.5) {
    var elem = document.createElement('div');
    var shown = false;
    var ismag = false;
    elem.style.position = 'fixed';
    elem.style.transformOrigin = 'left top 0px';
    elem.style.overflow = 'hidden';
    elem.style.width = (width * OWOP.camera.zoom) + 'px';
    elem.style.height = (height * OWOP.camera.zoom) + 'px';
    elem.style.backgroundImage = `url(""${imageUrl}"")`;
    elem.style.opacity = opacity.toString();
    elem.style.backgroundSize = 'contain';

    var move = function() {
        var sc = OWOP.camera.zoom / 16;
        var tx = ((-OWOP.camera.x + x) * OWOP.camera.zoom);
        var ty = ((-OWOP.camera.y + y) * OWOP.camera.zoom);

        if (sc > 1.0 && !ismag) {
            ismag = true;
            elem.style.imageRendering = 'pixelated';
        } else if (sc <= 1.0 && ismag) {
            ismag = false;
            elem.style.imageRendering = 'auto';
        }

        elem.style.transform = 'matrix(' + sc + ',0,0,' + sc + ',' + Math.round(tx) + ',' + Math.round(ty) + ')';
        elem.style.marginLeft = tx < 0 ? Math.abs(tx) + 'px' : '0px';
        elem.style.marginTop = ty < 0 ? Math.abs(ty) + 'px' : '0px';

        // Ensure the element's position is fixed at the top left corner of the viewport
        elem.style.marginTop = '0px';
        elem.style.marginLeft = '0px';

        if (!shown) {
            OWOP.elements.viewport.appendChild(elem);
            shown = true;
        }
    };

    var getColorFromImage = function(event) {
        var canvas = document.createElement('canvas');
        var context = canvas.getContext('2d');
        var img = new Image();
        img.crossOrigin = ""Anonymous""; // Set cross-origin attribute to handle CORS
        img.onload = function() {
            canvas.width = img.width;
            canvas.height = img.height;
            context.drawImage(img, 0, 0, img.width, img.height);
            var x = event.clientX - elem.getBoundingClientRect().left;
            var y = event.clientY - elem.getBoundingClientRect().top;
            var pixel;
            try {
                pixel = context.getImageData(x, y, 1, 1).data;
                OWOP.player.selectedColor = [pixel[0], pixel[1], pixel[2]];
            } catch (e) {
                console.error(""Failed to get image data:"", e);
            }
        };
        img.src = imageUrl;
    };

    elem.addEventListener('click', function(event) {
        if (event.ctrlKey) {
            getColorFromImage(event);
        }
    });

    if (OWOP.events.camMoved) {
        OWOP.on(OWOP.events.camMoved, move);
        move();
    }
}"
bCasfGkw,test,HeavyNight,PHP,Thursday 23rd of May 2024 03:06:50 AM CDT,"<?php
// URL del archivo INI remoto
$iniUrl = 'https://heavynightlauncher.com/Launcher-Categorias/Categoria2/Category-Config.ini';

// Función para descargar y leer el archivo INI
function getServerConfig($url) {
    $iniContent = @file_get_contents($url);
    if ($iniContent === false) {
        return false;
    }

    $config = parse_ini_string($iniContent, true);
    if ($config === false) {
        return false;
    }

    return $config;
}

// Obtener la configuración del servidor
$config = getServerConfig($iniUrl);
if ($config === false) {
    die(""No se pudo obtener la configuración del servidor."");
}

// Extraer la IP y el puerto del archivo INI
$serverHost = $config['General']['ip'];
$serverPort = isset($config['General']['puerto']) ? $config['General']['puerto'] : null;

// Construir la URL para consultar la API
if ($serverPort) {
    $apiUrl = ""https://api.mcsrvstat.us/2/{$serverHost}:{$serverPort}"";
} else {
    $apiUrl = ""https://api.mcsrvstat.us/2/{$serverHost}"";
}

// Obtener los datos del servidor desde la API
$serverData = @file_get_contents($apiUrl);
if ($serverData === false) {
    die(""No se pudo obtener la información del servidor."");
}

$serverData = json_decode($serverData, true);
if ($serverData === null) {
    die(""Error al decodificar la respuesta de la API."");
}

// Verificar si el servidor está en línea
if (isset($serverData['online']) && $serverData['online'] === true) {
    echo ""En linea"";
} else {
    echo ""Apagado"";
}
?>
"
ScnPZ0Ti,Opdpptk_renja.php,martinms,PHP,Thursday 23rd of May 2024 02:59:02 AM CDT,"<?php

class Opdpptk_renja extends Controller
{
    private $renja;
    public function __construct()
    {
        $this->renja = $this->model('Renja_model');
        $this->access('opdpptk');
    }
    public function index()
    {
        abort('maintenance');
        $data['capaian'] = json_decode($this->renja->capaianList($_SESSION['periode']['idPeriode'], 1), true)['data'];
        $data['title'] = ""Evaluasi RENJA"";
        $this->view('opdpptk/renja/index', $data);
    }

    public function capaian($case = null, ...$params)
    {
        switch ($case) {
            case ""list"":
                $hakUser = $_SESSION['userLogin']['hakUser'];
                if ($hakUser[0] === null) {
                    $decodeResponse['success'] = false;
                    $decodeResponse['message'] = '';
                    $decodeResponse['data'] = [];
                    echo json_encode($decodeResponse);
                    return;
                }

                $hakUser = $_SESSION['userLogin']['hakUser'];
                $hakInput = array_map(function ($item) {
                    return (int) $item['idSubKegiatan'];
                }, $hakUser);

                $response = $this->renja->capaianList($_SESSION['periode']['idPeriode']);
                $decodeResponse = json_decode($response, true);
                if (!$decodeResponse['success']) {
                    echo $response;
                } else {
                    $arraySelection = [];
                    foreach ($decodeResponse['data'] as $item) {
                        if (!empty($item['dataUraian'])) {
                            $arraySelection[] = $item;
                        }
                    }
                    $aksesSelection = [];
                    foreach ($hakInput as $id) {
                        foreach ($arraySelection as $item) {
                            if ($item['idSubKegiatan'] === $id) {
                                $aksesSelection[] = $item;
                            }
                        }
                    }
                    $decodeResponse['data'] = $aksesSelection;
                    echo json_encode($decodeResponse);
                }
                break;
            case ""update"":
                $data = [
                    ""idUraian"" => (int) $_POST['id'],
                    ""idPeriode"" => (int) $_SESSION['periode']['idPeriode'],
                    ""dataCapaian"" => [
                        [
                            ""triwulan"" => 1,
                            ""capaian"" => (int) $_POST['triwulan1'],
                        ],
                        [
                            ""triwulan"" => 2,
                            ""capaian"" => (int) $_POST['triwulan2'],
                        ],
                        [
                            ""triwulan"" => 3,
                            ""capaian"" => (int) $_POST['triwulan3'],
                        ],
                        [
                            ""triwulan"" => 4,
                            ""capaian"" => (int) $_POST['triwulan4'],
                        ],
                    ]
                ];
                $result = json_encode($data);
                $response = $this->renja->capaianAdd($result);
                echo $response;
                break;
            default:
                $data['title'] = ""Capaian Kinerja"";
                $this->view('opdpptk/renja/capaian', $data);
                break;
        }
    }

    public function anggaran($case = null, ...$params)
    {
        switch ($case) {
            case ""list"":
                $response = $this->renja->anggaranList($_SESSION['periode']['idPeriode']);
                $decodeResponse = json_decode($response, true);
                $hakUser = $_SESSION['userLogin']['hakUser'];
                $hakInput = array_map(function ($item) {
                    return (int) $item['idSubKegiatan'];
                }, $hakUser);

                if ($decodeResponse['success']) {
                    $dataAnggaran = $decodeResponse['data'];
                    $dataAnggaran = filterSubKegiatanAnggaran($dataAnggaran, $hakInput);
                    $decodeResponse['data'] = $dataAnggaran;
                    echo json_encode($decodeResponse);
                } else {
                    echo $response;
                }
                break;
            case ""update"":
                $post = json_decode($_POST['data'], true);
                $result = [
                    ""idSubKegiatan"" => $post['sub'],
                    ""idPeriode"" => (int) $_SESSION['periode']['idPeriode'],
                    ""dataPagu"" => [
                        [
                            ""triwulan"" => 1,
                            ""rupiah"" => $post['tw1']
                        ],
                        [
                            ""triwulan"" => 2,
                            ""rupiah"" => $post['tw2']
                        ],
                        [
                            ""triwulan"" => 3,
                            ""rupiah"" => $post['tw3']
                        ],
                        [
                            ""triwulan"" => 4,
                            ""rupiah"" => $post['tw4']
                        ]
                    ]
                ];
                // echo json_encode($result);
                $response = $this->renja->anggaranAdd(json_encode($result));
                echo $response;
                break;
            case ""test"":
                echo json_encode($_SESSION['periode']);
                break;
            default:
                $data['title'] = ""Realiasasi Anggaran"";
                $this->view('opdpptk/renja/anggaran', $data);
                break;
        }
    }
    public function outcome($case = null, ...$params)
    {
        switch ($case) {
            case ""list"":
                $response =  $this->renja->outcomeList($_SESSION['periode']['tahunPeriode'], $_SESSION['userLogin']['odpId']);
                $decodeResponse = json_decode($response, true);
                $hakUser = $_SESSION['userLogin']['hakUser'];
                $hakInput = array_map(function ($item) {
                    return (int) $item['idSubKegiatan'];
                }, $hakUser);

                if ($decodeResponse['success']) {
                    $dataAnggaran = $decodeResponse['data'];
                    $dataAnggaran = filterSubKegiatanAnggaran($dataAnggaran, $hakInput);
                    $decodeResponse['data'] = $dataAnggaran;
                    echo json_encode($decodeResponse);
                } else {
                    echo $response;
                }
                break;
            case ""update"":
                $data = [
                    ""idIndikator"" => (int) $_POST['indikator'],
                    ""idPeriode"" => $_SESSION['periode']['idPeriode'],
                    ""realisasiOutcome"" => (int) $_POST['realisasi']
                ];
                $result = json_encode($data);
                $response = $this->renja->outcomeAdd($result);
                echo $response;
                break;
            default:
                $data['title'] = ""Outcome Output"";
                $this->view('opdpptk/renja/outcome', $data);
                break;
        }
    }
    public function faktor($case = null, ...$params)
    {
        switch ($case) {
            case 'list':
                echo $this->renja->faktorList($_SESSION['periode']['tahunPeriode'], $_SESSION['userLogin']['odpId']);
                break;
            case 'add':
                $data = [
                    ""idIndikator"" => (int) $_POST['idindikator'],
                    ""idPeriode"" => (int) $_SESSION['periode']['idPeriode'],
                    ""faktorPendorong"" => $_POST['pendorong'],
                    ""faktorPenghambat"" => $_POST['penghambat'],
                    ""tindakLanjut"" => $_POST['tindaklanjut']
                ];
                $result = json_encode($data);
                $response = $this->renja->faktorAdd($result);
                echo $response;
                break;
            default:
                $data['title'] = ""Faktor Penghambat dan Pendorong"";
                $this->view('opdpptk/renja/faktor', $data);
                break;
        }
    }

    public function finalisasi($case = null, ...$params)
    {
        switch ($case) {
            case 'list':
                break;
            default:
                $data['title'] = ""Finalisasi"";
                $this->view('opdpptk/renja/finalisasi', $data);
                break;
        }
    }

    public function periode()
    {
        echo json_encode($_SESSION['periode']);
    }

    public function status($case = null, $js = null)
    {
        // $response =  $this->renja->faktorList($_SESSION['periode']['tahunPeriode'], $_SESSION['userLogin']['odpId']);
        // $status = json_decode($response, true);
        $hakUser = $_SESSION['userLogin']['hakUser'];
        $hakInput = array_map(function ($item) {
            return (int) $item['idSubKegiatan'];
        }, $hakUser);

        // die;
        // $anggaran = true;
        $response = $this->renja->faktorList($_SESSION['periode']['tahunPeriode'], $_SESSION['userLogin']['odpId']);
        $result = json_decode($response, true);
        $hasil = $result['data'];

        if (!$result['success']) {
            $capaian = false;
            $anggaran = false;
            $faktor = false;
            $outcome = false;
        } else {
            $dataAnggaran = filterSubKegiatanAnggaran($hasil, $hakInput);
            $hasil = $dataAnggaran;

            $capaian = $this->_capaian($hasil);
            $anggaran = $this->_anggaran($hasil);
            $outcome = $this->_outcome($hasil);
            $faktor = $this->_faktor($hasil);
        }
        while ($js === null) {
            if (!$result['success']) {
                cekLogin($result['data']);
            }
        }
        switch ($case) {
            case 'all':
                if ($js !== null) {
                    $data = [
                        'capaian' => $capaian,
                        'anggaran' => $anggaran,
                        'outcome' => $outcome,
                        'faktor' => $faktor,
                        'response' => json_decode($response, true)
                    ];
                    echo json_encode($data);
                } else {
                    $data = [
                        'capaian' => $capaian,
                        'anggaran' => $anggaran,
                        'outcome' => $outcome,
                        'faktor' => $faktor,
                    ];

                    return $data;
                }
                break;
            default:
                // $total = (int) $capaian + (int) $anggaran + (int) $outcome + (int) $faktor;
                // echo json_encode(($total / 4) * 100);
                break;
        }
    }

    private function _outcome($data)
    {
        foreach ($data as $tujuan) {
            foreach ($tujuan['indikatorData'] as $indikator) {
                if ($indikator['persenRealisasiOutcome'] === 0) {
                    return false;
                }
            }
            foreach ($tujuan['dataSasaran'] as $sasaran) {
                foreach ($sasaran['indikatorData'] as $indikatorS) {
                    if ($indikatorS['persenRealisasiOutcome'] === 0) {
                        return false;
                    }
                }
                foreach ($sasaran['dataProgram'] as $program) {
                    foreach ($program['indikatorData'] as $indikatorP) {
                        if ($indikatorP['persenRealisasiOutcome'] === 0) {
                            return false;
                        }
                    }
                    foreach ($program['dataKegiatan'] as $kegiatan) {
                        foreach ($kegiatan['indikatorData'] as $indikatorK) {
                            if ($indikatorK['persenRealisasiOutcome'] === 0) {
                                return false;
                            }
                        }
                        foreach ($kegiatan['dataSubKegiatan'] as $sub) {
                            foreach ($sub['indikatorData'] as $indikatorSk) {
                                if (isset($indikatorSk['persenRealisasiOutcome']) && $indikatorSk['persenRealisasiOutcome'] === 0) {
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    private function _capaian($data)
    {
        foreach ($data as $tujuan) {
            if (isset($tujuan['dataSasaran'])) {
                foreach ($tujuan['dataSasaran'] as $sasaran) {
                    if (isset($sasaran['dataProgram'])) {
                        foreach ($sasaran['dataProgram'] as $program) {
                            if (isset($program['dataKegiatan'])) {
                                foreach ($program['dataKegiatan'] as $kegiatan) {
                                    if (isset($kegiatan['dataSubKegiatan'])) {
                                        foreach ($kegiatan['dataSubKegiatan'] as $sub) {
                                            if ($sub['targetDanCapaian']['TotalKinerja'] === 0) {
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    private function _anggaran($data)
    {
        foreach ($data as $tujuan) {
            if (isset($tujuan['dataSasaran'])) {
                foreach ($tujuan['dataSasaran'] as $sasaran) {
                    if (isset($sasaran['dataProgram'])) {
                        foreach ($sasaran['dataProgram'] as $program) {
                            if (isset($program['dataKegiatan'])) {
                                foreach ($program['dataKegiatan'] as $kegiatan) {
                                    if (isset($kegiatan['dataSubKegiatan'])) {
                                        foreach ($kegiatan['dataSubKegiatan'] as $sub) {
                                            if ($sub['targetDanCapaian']['TotalRealisasi'] === 0) {
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    private function _faktor($data)
    {
        foreach ($data as $tujuan) {
            if (isset($tujuan['dataSasaran'])) {
                foreach ($tujuan['dataSasaran'] as $sasaran) {
                    if (isset($sasaran['dataProgram'])) {
                        foreach ($sasaran['dataProgram'] as $program) {
                            if (isset($program['dataKegiatan'])) {
                                foreach ($program['dataKegiatan'] as $kegiatan) {
                                    if (isset($kegiatan['dataSubKegiatan'])) {
                                        foreach ($kegiatan['dataSubKegiatan'] as $sub) {
                                            foreach ($sub['indikatorData'] as $item) {
                                                if (isset($item['faktorPendorong']) && $item['faktorPendorong'] === '') {
                                                    return false;
                                                } else if (isset($item['faktorPenghambat']) && $item['faktorPenghambat'] === '') {
                                                    return false;
                                                } else if (isset($item['tindakLanjut']) && $item['tindakLanjut'] === '') {
                                                    return false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

}"
wyP31cT5,ptpython config file,FranzVuttke,Python,Thursday 23rd of May 2024 02:16:55 AM CDT,"""""""
Configuration example for ``ptpython``.

Copy this file to $XDG_CONFIG_HOME/ptpython/config.py
On Linux, this is: ~/.config/ptpython/config.py
On macOS, this is: ~/Library/Application Support/ptpython/config.py
""""""
from prompt_toolkit.filters import ViInsertMode
from prompt_toolkit.key_binding.key_processor import KeyPress
from prompt_toolkit.keys import Keys
from prompt_toolkit.styles import Style

from ptpython.layout import CompletionVisualisation

__all__ = [""configure""]


def configure(repl):
    """"""
    Configuration method. This is called during the start-up of ptpython.

    :param repl: `PythonRepl` instance.
    """"""
    # Show function signature (bool).
    repl.show_signature = True

    # Show docstring (bool).
    repl.show_docstring = False

    # Show the ""[Meta+Enter] Execute"" message when pressing [Enter] only
    # inserts a newline instead of executing the code.
    repl.show_meta_enter_message = True

    # Show completions. (NONE, POP_UP, MULTI_COLUMN or TOOLBAR)
    repl.completion_visualisation = CompletionVisualisation.POP_UP

    # When CompletionVisualisation.POP_UP has been chosen, use this
    # scroll_offset in the completion menu.
    repl.completion_menu_scroll_offset = 0

    # Show line numbers (when the input contains multiple lines.)
    repl.show_line_numbers = False

    # Show status bar.
    repl.show_status_bar = True

    # When the sidebar is visible, also show the help text.
    repl.show_sidebar_help = True

    # Swap light/dark colors on or off
    repl.swap_light_and_dark = True

    # Highlight matching parentheses.
    repl.highlight_matching_parenthesis = True

    # Line wrapping. (Instead of horizontal scrolling.)
    repl.wrap_lines = True

    # Mouse support.
    repl.enable_mouse_support = False # OuNiS 01.2024 - wyłącza przełączanie spodniego statusbaru ale włącza popup menu!

    # Complete while typing. (Don't require tab before the
    # completion menu is shown.)
    repl.complete_while_typing = True

    # Fuzzy and dictionary completion.
    repl.enable_fuzzy_completion = False
    repl.enable_dictionary_completion = False

    # Vi mode.
    repl.vi_mode = False

    # Enable the modal cursor (when using Vi mode). Other options are 'Block', 'Underline',  'Beam',  'Blink under', 'Blink block', and 'Blink beam'
    repl.cursor_shape_config = ""Modal (vi)""

    # Paste mode. (When True, don't insert whitespace after new line.)
    repl.paste_mode = False

    # Use the classic prompt. (Display '>>>' instead of 'In [1]'.)
    repl.prompt_style = ""ipython""  # 'classic' or 'ipython'

    # Don't insert a blank line after the output.
    repl.insert_blank_line_after_output = False

    # History Search.
    # When True, going back in history will filter the history on the records
    # starting with the current input. (Like readline.)
    # Note: When enable, please disable the `complete_while_typing` option.
    #       otherwise, when there is a completion available, the arrows will
    #       browse through the available completions instead of the history.
    repl.enable_history_search = True

    # Enable auto suggestions. (Pressing right arrow will complete the input,
    # based on the history.)
    repl.enable_auto_suggest = False

    # Enable open-in-editor. Pressing C-x C-e in emacs mode or 'v' in
    # Vi navigation mode will open the input in the current editor.
    repl.enable_open_in_editor = True

    # Enable system prompt. Pressing meta-! will display the system prompt.
    # Also enables Control-Z suspend.
    repl.enable_system_bindings = True

    # Ask for confirmation on exit.
    repl.confirm_exit = False # OuNiS 01.2024

    # Enable input validation. (Don't try to execute when the input contains
    # syntax errors.)
    repl.enable_input_validation = True

    # Use this colorscheme for the code.
    # Ptpython uses Pygments for code styling, so you can choose from Pygments'
    # color schemes. See:
    # https://pygments.org/docs/styles/
    # https://pygments.org/demo/
    repl.use_code_colorscheme(""default"")
    # A colorscheme that looks good on dark backgrounds is 'native':
    # repl.use_code_colorscheme(""native"")

    # Set color depth (keep in mind that not all terminals support true color).

    # repl.color_depth = ""DEPTH_1_BIT""  # Monochrome.
    # repl.color_depth = ""DEPTH_4_BIT""  # ANSI colors only.
    repl.color_depth = ""DEPTH_8_BIT""  # The default, 256 colors.
    # repl.color_depth = ""DEPTH_24_BIT""  # True color.

    # Min/max brightness
    repl.min_brightness = 0.0  # Increase for dark terminal backgrounds.
    repl.max_brightness = 1.0  # Decrease for light terminal backgrounds.

    # Syntax.
    repl.enable_syntax_highlighting = True

    # Get into Vi navigation mode at startup
    repl.vi_start_in_navigation_mode = False

    # Preserve last used Vi input mode between main loop iterations
    repl.vi_keep_last_used_mode = False

    # Install custom colorscheme named 'my-colorscheme' and use it.
    """"""
    repl.install_ui_colorscheme(""my-colorscheme"", Style.from_dict(_custom_ui_colorscheme))
    repl.use_ui_colorscheme(""my-colorscheme"")
    """"""

    # Add custom key binding for PDB.
    """"""
    @repl.add_key_binding(""c-b"")
    def _(event):
        "" Pressing Control-B will insert ""pdb.set_trace()"" ""
        event.cli.current_buffer.insert_text(""\nimport pdb; pdb.set_trace()\n"")
    """"""

    # Typing ControlE twice should also execute the current command.
    # (Alternative for Meta-Enter.)
    """"""
    @repl.add_key_binding(""c-e"", ""c-e"")
    def _(event):
        event.current_buffer.validate_and_handle()
    """"""

    # Typing 'jj' in Vi Insert mode, should send escape. (Go back to navigation
    # mode.)
    """"""
    @repl.add_key_binding(""j"", ""j"", filter=ViInsertMode())
    def _(event):
        "" Map 'jj' to Escape. ""
        event.cli.key_processor.feed(KeyPress(Keys(""escape"")))
    """"""

    # Custom key binding for some simple autocorrection while typing.

    corrections = {
        ""impotr"": ""import"",
        ""pritn"": ""print"",
    }

    @repl.add_key_binding("" "")
    def _(event):
        "" When a space is pressed. Check & correct word before cursor. ""
        b = event.cli.current_buffer
        w = b.document.get_word_before_cursor()

        if w is not None:
            if w in corrections:
                b.delete_before_cursor(count=len(w))
                b.insert_text(corrections[w])

        b.insert_text("" "")


    # Add a custom title to the status bar. This is useful when ptpython is
    # embedded in other applications.
    """"""
    repl.title = ""My custom prompt.""
    """"""


# Custom colorscheme for the UI. See `ptpython/layout.py` and
# `ptpython/style.py` for all possible tokens.
_custom_ui_colorscheme = {
    # Blue prompt.
    ""prompt"": ""bg:#eeeeff #000000 bold"",
    # Make the status toolbar red.
    ""status-toolbar"": ""bg:#ff0000 #000000"",
}
"
hSwJQRuK,"""LED Control"" rev_01",pleasedontcode,Arduino,Thursday 23rd of May 2024 01:51:14 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""LED Control""
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2024-05-23 06:51:00

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Develop a system to manage an LED connected to pin */
	/* D2. The LED's on/off state is controlled by */
	/* `led_LED_PIN_D2_rawData`. Initialize the pin in */
	/* `setup()` and update the LED state in */
	/* `updateOutputs()`, which is invoked in the */
	/* `loop()` function. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t led_LED_PIN_D2 = 2;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool led_LED_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float led_LED_PIN_D2_phyData = 0.0;

void setup(void)
{
    // Initialize the LED pin as an output
    pinMode(led_LED_PIN_D2, OUTPUT);
}

void loop(void)
{
    // Refresh output data
    updateOutputs();
}

void updateOutputs()
{
    // Update the LED state based on the raw data
    digitalWrite(led_LED_PIN_D2, led_LED_PIN_D2_rawData);
}

/* END CODE */"
HeVK74f6,Dummy data destinasi,mas_sahal,PHP,Thursday 23rd of May 2024 01:41:27 AM CDT,"<?php

// Array data untuk setiap atribut
        $nama_destinasi = [""Pantai Indah"", ""Gunung Merapi"", ""Hutan Pinus"", ""Danau Toba"", ""Pulau Komodo"", ""Candi Borobudur"", ""Taman Safari"", ""Museum Nasional"", ""Kebun Raya"", ""Guha Bahu""];
        $deskripsi = [""Tempat wisata alam yang indah"", ""Wisata sejarah dan budaya"", ""Destinasi keluarga"", ""Petualangan seru"", ""Spot foto Instagrammable"", ""Tempat wisata edukatif"", ""Wisata kuliner"", ""Wisata belanja"", ""Wisata malam"", ""Wisata air""];
        $alamat_lengkap = [""Jl. Raya No. 1"", ""Jl. Merdeka No. 10"", ""Jl. Sudirman No. 5"", ""Jl. Gatot Subroto No. 20"", ""Jl. Diponegoro No. 30"", ""Jl. Ahmad Yani No. 15"", ""Jl. Pemuda No. 8"", ""Jl. Gajah Mada No. 25"", ""Jl. Thamrin No. 12"", ""Jl. Hasanudin No. 7""];
        $kota = [""Jakarta"", ""Bandung"", ""Surabaya"", ""Yogyakarta"", ""Medan"", ""Denpasar"", ""Makassar"", ""Semarang"", ""Palembang"", ""Pangandaran""];
        $tipe_destinasi = [""Alam"", ""Budaya"", ""Sejarah"", ""Religi"", ""Edukasi"", ""Kuliner"", ""Belanja"", ""Petualangan"", ""Hiburan"", ""Arcade""];
        $tipe_mood = [""Gembira"", ""Ceria"", ""Santai"", ""Seru"", ""Menegangkan"", ""Damai"", ""Romantis"", ""Informatif"", ""Menyenangkan"", ""Menggugah""];
        $tipe_kegiatan = [""Bersepeda"", ""Memancing"", ""Mendaki"", ""Berenang"", ""Belanja"", ""Berkemah"", ""Menonton"", ""Fotografi"", ""Berkeliling"", ""Menjelajah""];
        $tipe_jarak = [""Dekat"", ""Sedang"", ""Jauh""];
        $harga_min = 1000000;
        $harga_max = 5000000;

        for ($i = 0; $i < 100; $i++) {
            \App\Models\Destination::create([
                ""nama_destinasi"" => $nama_destinasi[array_rand($nama_destinasi)],
                ""deskripsi"" => $deskripsi[array_rand($deskripsi)],
                ""alamat_lengkap"" => $alamat_lengkap[array_rand($alamat_lengkap)],
                ""kota"" => $kota[array_rand($kota)],
                ""tipe_destinasi"" => $tipe_destinasi[array_rand($tipe_destinasi)],
                ""tipe_mood"" => $tipe_mood[array_rand($tipe_mood)],
                ""tipe_kegiatan"" => $tipe_kegiatan[array_rand($tipe_kegiatan)],
                ""tipe_jarak"" => $tipe_jarak[array_rand($tipe_jarak)],
                ""harga"" => rand($harga_min, $harga_max),
            ]);
        }

?>"
72KLfEnP,snowybot 2000,coinwalk,JavaScript,Thursday 23rd of May 2024 01:33:21 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/2000).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fart = 1;
var joe = false;
var jim = false;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>=snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((!jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<=snow)){
    NexTBet = NexTBet*2;
    jim = true;
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((!joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snow)){
    NexTBet = NexTBet*2;
    jim = true
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+(tens*fart)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    snow = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
Yifvu1t0,snowybot 2000,coinwalk,JavaScript,Thursday 23rd of May 2024 01:28:58 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = 0.00001;
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fart = 1;
var joe = false;
var jim = false;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>=snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((!jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<=snow)){
    NexTBet = NexTBet*2;
    jim = true;
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((!joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snow)){
    NexTBet = NexTBet*2;
    jim = true
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+(tens*fart)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    snow = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
jPdedCA0,read it please hacker snowybots changed,coinwalk,JavaScript,Thursday 23rd of May 2024 01:05:10 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = 0.00001;
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fart = 1;
var joe = false;
var jim = false;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>=snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((!jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<=snow)){
    NexTBet = NexTBet*2;
    jim = true;
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((!joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snow)){
    NexTBet = NexTBet*2;
    jim = true
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+fart))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    snow = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
2MtL0E3z,snowybot update going to give good run,coinwalk,JavaScript,Thursday 23rd of May 2024 12:44:02 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = 0.001;
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fast = 1;
var joe = false;
var jim = false;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>=snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((!jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<=snow)){
    NexTBet = NexTBet*2;
    jim = true;
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((!joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snow)){
    NexTBet = NexTBet*2;
    jim = true
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+fart))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    snow = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
p4dwHmid,Control,BimoSora,C++,Thursday 23rd of May 2024 12:02:28 AM CDT,"// Import required libraries
#include <Arduino.h>
#ifdef ESP32
#include <WiFi.h>
#include <AsyncTCP.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#endif
#include <ESPAsyncWebServer.h>
#include <FS.h>
#include <Servo.h>

/* Put your SSID & Password */
const char* ssid = ""Car-ESP"";  // Enter SSID here
const char* password = ""12345678"";  // Enter Password here

/* Put IP Address details */
IPAddress local_ip(192,168,1,1);
IPAddress gateway(192,168,1,1);
IPAddress subnet(255,255,255,0);

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

int in1 = D4;
int in2 = D3;
int enA = D2;  // Enable pin for speed control
const int servoPin = D1;
Servo servo;
int currentServoAngle = 90;  // Starting position for servo

void smoothServoMove(int targetAngle) {
  while (currentServoAngle != targetAngle) {
    if (currentServoAngle < targetAngle) {
      currentServoAngle++;
    } else if (currentServoAngle > targetAngle) {
      currentServoAngle--;
    }
    servo.write(currentServoAngle);
    delay(15); // Adjust delay for smoothness
  }
}

void setup() {
  // Serial port for debugging purposes
  Serial.begin(115200);
  Serial.println();

  servo.attach(servoPin);
  servo.write(currentServoAngle);

  if(SPIFFS.begin()) {
    Serial.println(""SPIFFS initialised OK"");
  }

  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(enA, OUTPUT);

  WiFi.softAP(ssid, password);
  WiFi.softAPConfig(local_ip, gateway, subnet);
  delay(100);

  // Route for root / web page
  server.on(""/"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/index.html"", ""text/html"");
  });
  server.on(""/assets/js/jquery.min.js"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/js/jquery.min.js"", ""text/javascript"");
  });

  server.on(""/joystick"", HTTP_POST, [](AsyncWebServerRequest *request) {
    if (request->hasArg(""x"") && request->hasArg(""y"")) {
      String xValue = request->arg(""x"");
      String yValue = request->arg(""y"");
      int x = xValue.toInt();
      int y = yValue.toInt();

      // Calculate speed based on joystick position
      int speed = map(abs(y - 512), 0, 512, 0, 255);

      // Handle motor control
      if (y > 600) { // Forward
        digitalWrite(in1, HIGH);
        digitalWrite(in2, LOW);
        analogWrite(enA, speed);
      } else if (y < 400) { // Reverse
        digitalWrite(in1, LOW);
        digitalWrite(in2, HIGH);
        analogWrite(enA, speed);
      } else { // Stop
        digitalWrite(in1, LOW);
        digitalWrite(in2, LOW);
        analogWrite(enA, 0);
      }

      // Handle servo control
      int targetAngle = map(x, 0, 1023, 0, 180);
      smoothServoMove(targetAngle);

      request->send(200, ""text/plain"", ""ok"");
    } else {
      // Invalid request, return error
      request->send(400, ""text/plain"", ""Bad Request"");
    }
  });

  server.onNotFound([](AsyncWebServerRequest *request){
    // Reset motor and servo when joystick is released
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    analogWrite(enA, 0);
    smoothServoMove(90);
    request->send(404, ""text/plain"", ""Not Found"");
  });

  // Start server
  server.begin();
}

void loop() {}
"
3hqnEmWS,Untitled,waitingmoon,CSS,Wednesday 22nd of May 2024 11:42:38 PM CDT,"/* スマホでカードをリストにする */
@media screen and (max-width: 480px) {
    .page-archive .archive-entries .archive-entry {
        padding: 16px 0 16px 160px;
        position: relative;
        min-height: 108px; /* タイトルが2行以下の場合にリストの高さが減るのを防ぐ */
    }
    .page-archive .archive-entries .archive-entry-header {
        padding: 0 16px;
    }
    .page-archive .archive-entries .archive-date{
        margin: 0;
    }
    .page-archive .archive-entries .entry-title,
    .page-archive .archive-entries .entry-title a{
        font-size: 1em; /*見出しのフォントサイズ */
    }
    .page-archive .archive-entries .categories {
        display: none; /* カテゴリ非表示 */
    }
    .page-archive .archive-entries .entry-thumb-link {
        position: absolute;
        top: 0;
        left: 0;
        width: 144px;
        height: auto;
        padding: 0;
        margin: 16px 0 0 16px;
    }
    .page-archive .archive-entries .entry-thumb {
        position: static;
        height: 0;
        padding-top: 52.5%;
    }
}"
mMcs5XeC,snowybot,coinwalk,JavaScript,Wednesday 22nd of May 2024 10:53:29 PM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/100).toFixed(8))
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*16.9);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fuel = 0;
var bobbed = 0;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
}
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+tens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
cZhuS259,snowybot,coinwalk,JavaScript,Wednesday 22nd of May 2024 10:49:02 PM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/100).toFixed(8))
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*16.9);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fuel = 0;
var bobbed = 0;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
}
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snowy)){
    NexTBet = NexTBet*2;
    fuel = fuel+1;
    snowy = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fuel = 0;
    snowy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+tens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fuel = 0;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
ZUHXDfFb,TEST_invStartup,jig487,Lua,Wednesday 22nd of May 2024 10:26:44 PM CDT,"--pastebin get ZUHXDfFb startup

--Global menuColor table
local menuColors = {
    title = colors.lightBlue,
    menu = colors.purple,
    text = colors.white,
    highlight = colors.pink,
    --background = colors.black
}

--##############################################
--Function definitions

--Returns true if tbl contains ""inventory"", else false
local function isInv(tbl)
    for i = 1, #tbl do
        if tbl[i] == ""inventory"" then
            return true
        end
    end
    return false
end

--returns true if 'name' ~= ""up"",""down"",""left"",""right"",""forward"",""back""
local function isNotAdjacentOrDump(name,dumpName)
    return not (name == dumpName or name == ""up"" or name == ""down"" or name == ""left"" or name == ""right"" or name == ""forward"" or name == ""back"")
end

--returns a table of wrapped inventories
--takes in a table of peripheral names
local function sortForInv(nameList,dumpName)
    local wrapList = {}
    for i = 1, #nameList do
        local curName = nameList[i]
        if isNotAdjacentOrDump(curName,dumpName) then
            local typeList = {peripheral.getType(curName)} -- = tbl of types
            if isInv(typeList) then
                wrapList[#wrapList+1] = peripheral.wrap(curName)
            end
        end
    end
    return wrapList
end

--returns table of all items in wrapped inventories
--takes in a table of wrapped inventories
local function getItemList(wrapList)
    local itemList = { name = ""Item List""}
    for i = 1, #wrapList do
        local curInv = wrapList[i].list()

        for slot,item in pairs(curInv) do
            item.chestIndex = i
            item.slot = slot
            item.index = #itemList+1
            itemList[#itemList+1] = item
        end
    end

    return itemList
end

--takes in a numbered table of items, structured like this: tbl = {  [1] = {name,count,slot,chetsID}, [..] = {..}, ..  }
--Displays a arrow key controlled menu using a provided menuPage
--returns: int cursor, string menuChoice (either ""search"", ""exit"", or ""select"")
local function openMenu(tbl,cursor)
    local cursor = cursor or 1

    local _,screenHeight = term.getSize()
    local pageLength = screenHeight - 3

    local maxPage = math.ceil(#tbl/(pageLength))
    local page = math.min( math.ceil( cursor / pageLength ) ,maxPage)

    term.clear()
    while true do
        local displayStartIndex = math.max( pageLength*(page-1)+1, 1 )
        local displayEndIndex = math.min( pageLength*(page), #tbl )
        local col = term.getTextColor()

        --clamp cursor to range of 1-displayEndIndex
        cursor = math.min(cursor,displayEndIndex)
        cursor = math.max(cursor,1)

        term.setCursorPos(1,1)
        if tbl.name then
            term.setTextColor(menuColors.title)
            print(""<<< ""..tbl.name.."" >>>"")
        end
        term.setTextColor(menuColors.text)

        --Display item options
        for i = displayStartIndex, displayEndIndex do

            local displayStr = """"
            local displayCount = """"
            if tbl[i] then
                displayStr = tbl[i].name

                --remove the prefix for item names
                local colonIndex = string.find(displayStr,"":"")
                if colonIndex then
                    displayStr = displayStr:sub(colonIndex+1)
                end
                --capitalize the first character
                displayStr = displayStr:gsub(""^%l"", string.upper)

                --remove underscores
                displayStr = string.gsub(displayStr,""_"","" "")

                if tbl[i].count then
                    if tbl[i].count ~= 1 then
                        displayCount = "" : ""..tostring(tbl[i].count)
                    end
                end
            end

            if i == cursor then
                if tbl[i].color then
                    term.setTextColor(tbl[i].color)
                else
                    term.setTextColor(menuColors.highlight)
                end
                print("">""..(displayStr)..displayCount..""<"")
                term.setTextColor(menuColors.text)
            else
                if tbl[i].color then
                    term.setTextColor(tbl[i].color)
                end
                print("" ""..(displayStr)..displayCount.."" "")
                term.setTextColor(menuColors.text)
            end
        end

        term.setTextColor(menuColors.menu)
        print(""Page ""..page.."" / ""..maxPage)
        local _, key = os.pullEvent(""key"")
        if key == keys.up then
            --Move cursor up if it's not at first option
            if cursor > displayStartIndex then
                cursor = cursor - 1
            end
        elseif key == keys.down then
            --move cursor down if it's not at last option
            if cursor < displayEndIndex then
                cursor = cursor + 1
            end
        elseif key == keys.left then
            --move to previous page if not at first page
            if page > 1 then
                page = page - 1
                cursor = cursor - pageLength
                term.clear()
            end
        elseif key == keys.right then
            --move to next page if not at last page
            if page < maxPage then
                page = page + 1
                cursor = cursor + pageLength
                term.clear()
            end
        elseif key == keys.enter then
            --return the menu choice
            return cursor,""select""
        elseif key == keys.backspace then
            --exit the menu
            return cursor,""exit""
        else
            --player wants to search for a string
            return cursor,""search""
        end
    end
end

--iterates over itemList and updates the .index value of each index in the table
local function updateIndex(itemList)
    for key,val in pairs(itemList) do
        if key ~= ""name"" then
            itemList[key].index = key
        end
    end
end

--takes in(String searchTarget, tbl itemList)
--iterates over itemList and checks to see if itemList[i].name == searchTarget
--returns table of all found items that match
local function search(searchTarget,itemList)
    searchTarget = string.lower(searchTarget)
    local foundItems = {name = ""Search: ""..searchTarget}

    --Look through each item
    for i = 1, #itemList do
        --Check to see if current item matches item we are searching for
        if string.find( itemList[i].name, searchTarget ) then
            --found an item that matches search. Add it to foundItems table and update total found item count
            foundItems[#foundItems+1] = itemList[i]
        end
    end

    return foundItems
end

--Takes everything in a specific chest and tries to push it into other peripheral inventories
--returns true if dumped all items, false if failed to dump an item
local function dump(outWrap,wrapList)
    term.clear()
    term.setTextColor(menuColors.title)
    term.setCursorPos(1,1)
    print(""Dumping items..."")

    local badName = peripheral.getName(outWrap)
    local itemList = outWrap.list()
    local namesList = {}
    local itemCount = 0
    for _,_ in pairs(itemList) do
        itemCount = itemCount + 1
    end
    for index,wrap in pairs(wrapList) do
        namesList[index] = peripheral.getName(wrap)
    end

    --CHANGE:
    --Make this smart. Deposit items in the first chest that contains a similar item. Go to next chest if full
    for i = 1, #namesList do
        local name = namesList[i]


        if name ~= badname then
            while itemCount > 0 do
                local full = false
                for slot,_ in pairs(itemList) do
                    --.pushItems returns the amount of items moved
                    if outWrap.pushItems(name, slot) == 0 then
                        --curInv is full. go to next
                        full = true
                        break
                    end
                end

                itemList = outWrap.list()
                itemCount = 0
                for _,_ in pairs(itemList) do
                    itemCount = itemCount + 1
                end
                if itemCount == 0 then
                    return true
                elseif full then
                    --curInv is full. Go to next
                    break
                end
            end
        end
    end

    if itemCount > 0 then
        return false
    end
    return true
end

local function dumpChestCheck(dumpName)
    --error checking to make sure dump chest exists
    local curNameList = peripheral.getNames()
    for i = 1, #curNameList do
        if dumpName == curNameList[i] then
            return dumpName
        end
    end

    local sortedNames = {name = ""Inventory List""}
    for i = 1, #curNameList do
        local curName = curNameList[i]
        if isNotAdjacent(curName) then
            local typeList = {peripheral.getType(curName)} -- = tbl of types
            if isInv(typeList) then
                sortedNames[#sortedNames+1] = {name = curNameList[i]}
            end
        end
    end

    while true do
        term.clear()
        term.setCursorPos(1,1)
        term.setTextColor(menuColors.title)
        print(""Please define a valid dump chest"")
        print(""Or type 'list' to pick from a list of inventories"")
        term.setTextColor(menuColors.menu)
        dumpName = read()
        term.setTextColor(menuColors.text)

        if dumpName == ""list"" then
            local cursor,choice
            while choice ~= ""exit"" do
                cursor,choice = openMenu(sortedNames)
                if choice == ""select"" then
                    return sortedNames[cursor].name
                end
            end
        else
            for i = 1, #sortedNames do
                if dumpName == sortedNames[i].name then
                    return dumpName
                end
            end
        end
    end
end

--###################################################################
--###################################################################
--Main function
local menuTbl = {
    name = ""Main Menu"",
    {name = ""Items""},
    {name = ""Dump""},
    {name = ""Update Item/Chest List""},
    {name = ""Settings""}
}

local colorOptions = {
    name = ""Color List"",
    {name = ""White"", color = 1},
    {name = ""Orange"", color = 2},
    {name = ""Magenta"", color = 4},
    {name = ""Light Blue"", color = 8},
    {name = ""Yellow"", color = 16},
    {name = ""Lime"", color = 32},
    {name = ""Pink"", color = 64},
    {name = ""Gray"", color = 128},
    {name = ""Light Gray"", color = 256},
    {name = ""Cyan"", color = 512},
    {name = ""Purple"", color = 1024},
    {name = ""Blue"", color = 2048},
    {name = ""Brown"", color = 4096},
    {name = ""Green"", color = 8192},
    {name = ""Red"", color = 16384},
    {name = ""Black""}
}

local defaultSettings = {
    settingsMenu = {
        name = ""Settings"",
        {name = ""Title Color"",      count = ""Light Blue"", menu = ""colorOptions""},
        {name = ""Menu Color"",       count = ""Purple"",     menu = ""colorOptions""},
        {name = ""Text Color"",       count = ""White"",      menu = ""colorOptions""},
        {name = ""Highlight Color"",  count = ""Pink"",       menu = ""colorOptions""},
        --{name = ""Background Color"", count = ""Black"",      menu = ""colorOptions""}
        {name = ""Dump Chest"",       count = ""minecraft:chest_0""},
        --{name = ""Reset Settings To Default""},
    },
    menuColors = {
        title = colors.lightBlue,
        menu = colors.purple,
        text = colors.white,
        highlight = colors.pink,
        --background = colors.black
    }
}

local settingsMenu = {
    name = ""Settings"",
    {name = ""Title Color"",      count = ""Light Blue"", menu = ""colorOptions""},
    {name = ""Menu Color"",       count = ""Purple"",     menu = ""colorOptions""},
    {name = ""Text Color"",       count = ""White"",      menu = ""colorOptions""},
    {name = ""Highlight Color"",  count = ""Pink"",       menu = ""colorOptions""},
    --{name = ""Background Color"", count = ""Black"",      menu = ""colorOptions""}
    {name = ""Dump Chest"", count = ""minecraft:chest_0""},
    --{name = ""Reset Settings To Default""},
}

--Load values and check if was interrupted in previous task
local data = {}
if( fs.exists(""inventorySettings.txt"") ) then
    local file = fs.open(""inventorySettings.txt"",""r"")
    data = textutils.unserialise(file.readAll())
    file.close()
    settingsMenu = data.settingsMenu
    menuColors = data.menuColors
else
    data = {
        settingsMenu = settingsMenu,
        menuColors = menuColors
    }
    local file = fs.open(""inventorySettings.txt"",""w"")
    file.write(textutils.serialise(data))
    file.close()
end

--initialize variables from settings
--error checking to make sure dumpChest exists
--Get dump chest name from settings
local test = dumpChestCheck(settingsMenu[5].count)
if test ~= settingsMenu[5].count then
    --update save file
    settingsMenu[5].count = test
    data = {
        settingsMenu = settingsMenu,
        menuColors = menuColors
    }
    local file = fs.open(""inventorySettings.txt"",""w"")
    file.write(textutils.serialise(data))
    file.close()
end

local outChest = test
local outWrap = peripheral.wrap(outChest)

--remove dumpChest from inventory list
local nameList = peripheral.getNames()
for i = 1, #nameList do
    if nameList[i] == outChest then
        table.remove(nameList,i)
        break
    end
end

--finish setting up variables
local wrapList = sortForInv(nameList,outChest)
local itemList
local needToUpdate = true


while true do
    --outer menu
    term.clear()
    local cursor,menuChoice = openMenu(menuTbl)

    local mainChoice = menuTbl[cursor].name
    term.clear()

        if mainChoice == ""Items"" or menuChoice == ""search"" then

            local activeInv = itemList
            local activeSearch = false
            local searchKey = """"

            --check if search is coming from main menu
            if menuChoice == ""search"" then
                term.clear()
                term.setCursorPos(1,1)
                print(""Enter search target:"")
                searchKey = read()
                activeSearch = true
                if needToUpdate then
                    term.setCursorPos(1,1)
                    print(""Getting item list..."")
                    itemList = getItemList(wrapList)
                    needToUpdate = false
                    term.clear()
                end
                activeInv = search(searchKey,itemList)
            elseif needToUpdate then
                term.setCursorPos(1,1)
                print(""Getting item list..."")
                itemList = getItemList(wrapList)
                activeInv = itemList
                needToUpdate = false
                term.clear()
            end
            
            --inside item menu
            while menuChoice ~= ""exit"" do
                cursor,menuChoice = openMenu(activeInv,cursor)
                
                if menuChoice == ""select"" then
                    --pullItem(cursor,itemList)
                    if activeInv[cursor] then
                        local item = activeInv[cursor]
                        local slot = item.slot
                        local count = item.count

                        local wrapFuncs = wrapList[item.chestIndex]

                        --try to push 64 items. If items pushed ~= 0 then go into statement
                        if wrapFuncs.pushItems(outChest,slot,64) ~= 0 then
                            --needToUpdate = true
                            --remove it from the list if stack less than 64 because we moved the whole stack, then update list
                            if count <= 64 then
                                table.remove(itemList, item.index)
                                updateIndex(itemList)
                                if activeSearch then
                                    --CHANGE:
                                    --make this more efficient by using an index table to point to outer itemList instead of creating a new itemList
                                    --HAVE to use search() method instead of updateIndex method because index has to be based on itemList, not activeInv
                                    
                                    table.remove(activeInv,cursor)
                                    --activeInv = search(searchKey,itemList)
                                end
                            else
                                --items still remaining, update count
                                itemList[item.index].count = count - 64
                                if activeSearch then
                                    activeInv[cursor].count = count - 64
                                end
                            end
                        end
                    end

                elseif menuChoice == ""search"" then
                    activeSearch = true
                    term.clear()
                    term.setCursorPos(1,1)
                    print(""Enter search target:"")
                    searchKey = read()
                    activeInv = search(searchKey,itemList)
                    term.clear()
                    term.setCursorPos(1,1)
                    print(""Searching..."")

                elseif menuChoice == ""exit"" then
                    --if activeSearch = true then only go back to invList, not main menu
                    if activeSearch then
                        activeSearch = false
                        activeInv = itemList
                        menuChoice = """"
                    end
                end
            end

        elseif mainChoice == ""Dump"" then
            needToUpdate = true

            --error checking to make sure dump chest exists
            local newDumpChest = dumpChestCheck(outChest)
            if newDumpChest ~= outChest then
                outChest = newDumpChest
                outWrap = peripheral.wrap(outChest)

                --update save file
                settingsMenu[cursor].count = outChest
                data = {
                    settingsMenu = settingsMenu,
                    menuColors = menuColors
                }
                local file = fs.open(""inventorySettings.txt"",""w"")
                file.write(textutils.serialise(data))
                file.close()
            end

            if not dump(outWrap,wrapList) then
                term.setCursorPos(1,1)
                print(""Failed to dump all items!"")
                print(""Storage likely full"")
                print(""Press 'enter' to continue"")
                read()
                nameList = peripheral.getNames()
                wrapList = sortForInv(nameList,outChest)
            end

        elseif mainChoice == ""Update Item/Chest List"" then
            nameList = peripheral.getNames()
            wrapList = sortForInv(nameList,outChest)
            term.setCursorPos(1,1)
            print(""Getting item list..."")
            itemList = getItemList(wrapList)
            needToUpdate = false
    
        elseif mainChoice == ""Settings"" then
            while menuChoice ~= ""exit"" do
                cursor,menuChoice = openMenu(settingsMenu)

                if menuChoice == ""select"" then
                    --check to see if current option has .menu element
                    if settingsMenu[cursor].menu then
                        if settingsMenu[cursor].menu == ""colorOptions"" then
                            --inside a specific color
                            local toChange = cursor
                            cursor,menuChoice = openMenu(colorOptions)
                            if menuChoice == ""select"" then
                                --[[
                                    local menuColors = {
                                        title = colors.lightBlue,
                                        menu = colors.purple,
                                        text = colors.white,
                                        highlight = colors.pink,
                                        background = colors.black
                                    }
                                ]]
                                settingsMenu[toChange].count = colorOptions[cursor].name
                                print(""settingsMenu[""..toChange..""].count = ""..colorOptions[cursor].name)
                                local colorVal = 2^(cursor-1)
                                if toChange == 1 then
                                    menuColors.title = colorVal
                                    print(""title = ""..colorVal)
                                elseif toChange == 2 then
                                    menuColors.menu = colorVal
                                    print(""menu = ""..colorVal)
                                elseif toChange == 3 then
                                    menuColors.text = colorVal
                                    print(""text = ""..colorVal)
                                elseif toChange == 4 then
                                    menuColors.highlight = colorVal
                                    print(""highlight = ""..colorVal)
                                --elseif cursor == 5 then
                                --    menuColors.background = colorVal
                                end

                                --update saveFile
                                data = {
                                    settingsMenu = settingsMenu,
                                    menuColors = menuColors
                                }
                                local file = fs.open(""inventorySettings.txt"",""w"")
                                file.write(textutils.serialise(data))
                                file.close()
                            end
                        end
                    --[[
                    elseif settingsMenu[cursor].name == ""Reset Settings To Default"" then
                        print(""Old settings:"")
                        print(""Settings: ""..textutils.serialize(settingsMenu))
                        read()
                        print(""menu colors: ""..textutils.serialize(menuColors))
                        read()

                        settingsMenu = defaultSettings.settingsMenu
                        menuColors = defaultSettings.menuColors

                        local file = fs.open(""inventorySettings.txt"",""w"")
                        file.write(textutils.serialise(defaultSettings))
                        file.close()

                        print(""Reset settings:"")
                        print(""Settings: ""..textutils.serialize(settingsMenu))
                        read()
                        print(""menu colors: ""..textutils.serialize(menuColors))
                        read()
                    ]]

                    elseif settingsMenu[cursor].name == ""Dump Chest"" then
                        local lineLen = 15--15 = #"">Dump Chest< : ""
                        term.setCursorPos(lineLen,cursor+1)
                        term.setTextColor(menuColors.menu)
                        --update dump chest
                        local newDumpChest = read(nil,nil,nil,tostring(settingsMenu[cursor].count))

                        --error checking to make sure dump chest exists
                        if newDumpChest ~= outChest then
                            newDumpChest = dumpChestCheck(newDumpChest)
                        end

                        outChest = newDumpChest
                        outWrap = peripheral.wrap(outChest)
                    
                        --update save file
                        settingsMenu[cursor].count = outChest
                        data = {
                            settingsMenu = settingsMenu,
                            menuColors = menuColors
                        }
                        local file = fs.open(""inventorySettings.txt"",""w"")
                        file.write(textutils.serialise(data))
                        file.close()
                    end
                end
            end
        end
end"
9nxZ3bzy,ini_parser_test,Python253,Python,Wednesday 22nd of May 2024 10:09:09 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: ini_parser_test.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script is an INI parser that allows users to parse INI-like configuration data from a string. 
    - It provides a menu-based interface for selecting various test scenarios.
    - These include parsing basic configuration settings, application settings, database credentials, and multi-section key-value pairs.

Requirements:
    - Python 3.x
    - io Module

Functions:
    - parse_ini(input_string):
        Parses INI-like configuration data from a string and returns the section name and a dictionary of key-value pairs.
    - line():
        Prints a line of dashes for visual separation.
    - display_menu():
        Displays menu options for selecting different test scenarios.
    - run_test(test_num):
        Runs the selected test scenario based on the user's choice.

Usage:
    - Run the script.
    - Select a test scenario from the menu by entering the corresponding number.
    - View the parsed results and continue to the menu to select another test or exit the script.

Additional Notes:
    - Ensure that the input strings for each test scenario are correctly formatted in the input_strings list.
    - The script includes verbose output during the parsing process to display the sections and key-value pairs found.
""""""

# Get Essential Imports
import io

def line():
    """"""
    Prints a line of dashes for visual separation.
    """"""
    print(""-"" * 40)

def parse_ini(input_string):
    """"""
    Parse INI-like configuration data from a string.

    Args:
        input_string (str): The input string containing INI-like configuration data.

    Returns:
        tuple: A tuple containing the section name and a dictionary of key-value pairs.
    """"""
    key_values = {}  # Dictionary to store key-value pairs
    section = None  # Current section name
    for line_num, line in enumerate(input_string.split(""\n""), start=1):
        # Strip leading and trailing whitespace from each line
        line = line.strip()
        if not line:
            continue  # Skip empty lines

        # Check if line represents a section header
        if line.startswith(""["") and line.endswith(""]""):
            section = line[1:-1]  # Extract section name
            print(f""Found section: [{section}]"")
        else:
            try:
                key, value = line.split(""="", 1)  # Split line into key and value
            except ValueError:
                raise ValueError(
                    f""Error parsing line {line_num}: '{line}'""
                )  # Handle invalid format
            # Store key-value pair in the dictionary
            key = key.strip()
            value = value.strip()
            print(f""Found key-value pair: '{key}' = '{value}'"")
            key_values[key] = value

    return section, key_values

def display_menu():
    """"""
    Display menu options.
    """"""
    line()
    print(""\t    INI Parser Menu:"")
    line()
    print(""1: Test 1 - Basic Configuration"")
    print(""2: Test 2 - Application Settings"")
    print(""3: Test 3 - Database Credentials"")
    print(""4: Test 4 - Multi-Sect & Key-Value Pairs"")
    print(""0: Exit"")

def run_test(test_num):
    """"""
    Run the selected test.

    Args:
        test_num (int): The number of the test to run.
    """"""
    input_strings = [
        ""[config]\n"" ""host = example.com\n"" ""port = 8080\n\n"",
        ""[settings]\n"" ""enabled = true\n"" ""debug_level = 2\n"" ""timeout = 30\n\n"",
        ""[database]\n"" ""username = admin\n"" ""password = leet1337\n\n"",
        ""[section1]\n""
        ""key1 = value1\n""
        ""key2 = value2\n\n""
        ""[section2]\n""
        ""key3 = value3\n""
        ""key4 = value4\n\n"",
    ]
    if test_num == ""0"":
        print(""\n    Program Exiting...   Goodbye!\n"")
        return
    try:
        input_string = input_strings[int(test_num) - 1]
    except IndexError:
        print(""\nInvalid selection!\nPlease choose a number between 0 and 4.\n"")
        return

    print(f""\nRunning Test {test_num} - {display_titles[int(test_num) - 1]}:\n"")

    # Create a file-like object from the input string
    file_obj = io.StringIO(input_string)

    # Parse the input string and get section name and key-value pairs
    section, key_values = parse_ini(file_obj.read())

    line()
    print(""\n\t  Test completed!\n"")
    line()
    input(""\nPress Enter to continue to the menu...\n"")

# Main Menu
display_titles = [
    ""Basic Configuration"",
    ""Application Settings"",
    ""Database Credentials"",
    ""Multi-Sect & Key-Value Pairs"",
]

while True:
    display_menu()
    choice = input(""\nSelect a test (0-4): "")
    line()
    if choice == ""0"":
        break
    elif choice in {""1"", ""2"", ""3"", ""4""}:
        run_test(choice)
    else:
        print(""\nInvalid selection!\nPlease choose a number between 0 and 4.\n"")

print(""\n    Program Exiting...   Goodbye!\n"")
line()
"
K3BqUMxT,div catalogo cuadrilla,catfooll,HTML,Wednesday 22nd of May 2024 10:05:05 PM CDT,"<!DOCTYPE html>
<html lang=""es"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Estilos CSS en HTML</title>
    <style>
        /* Definición de estilos CSS */
        .jugador {
            float: left; /* Alinear cada jugador a la izquierda */
            width: 50%; /* Establecer el ancho de cada jugador al 50% del contenedor */
            box-sizing: border-box; /* Incluir el padding y el borde en el ancho total */
            padding: 10px; /* Añadir un espacio alrededor de cada jugador */
        }
    </style>
</head>
<body>
    <!-- Contenido del cuerpo del documento -->
    <div class=""jugador"">
        <!-- Contenido del primer jugador -->
        <p>hola</p> <h2>hola</h2>
        <p>Jugador 1</p>
    </div>
    <div class=""jugador"">
        <!-- Contenido del segundo jugador -->
        <h2>hola</h2><p>hola</p>
        <p>Jugador 2</p>
    </div>
</body>
</html>"
QiCPXaDr,Rotate,stevenos,Bash,Wednesday 22nd of May 2024 10:05:03 PM CDT,"#!/bin/bash
# 安装依赖: ImageMagick ffmpeg

# 参数设置
IMAGE=""input.png""
OUTPUT=""output.gif""
DIRE=1
FRAME=30
DIFF=2
TEMP_DIR=""temp_frames""

help() {
    echo ""Usage:""
    echo ""$0 [-i input.png][-o output.gif]""
    echo ""[-c]逆时针旋转""
    echo ""[-f 30]帧率""
    echo ""[-d 2]每帧旋转角度""
    exit -1
}

while getopts 'i:o:cf:d:' opt; do
    case $opt in
        i)
            IMAGE=""$OPTARG""
            ;;
        o)
            OUTPUT=""$OPTARG""
            ;;
        c)
            DIRE=-1
            ;;
        f)
            FRAME=""$OPTARG""
            ;;
        d)
            DIFF=""$OPTARG""
            ;;
        ?)
            help
            ;;
    esac
done

if [ ! -f ""$IMAGE"" ]; then
    echo ""$IMAGE 文件不存在""
    help
fi

echo ""当前配置：
IMAGE=$IMAGE 
OUTPUT=$OUTPUT 
DIRE=$DIRE 
FRAME=$FRAME 
DIFF=$DIFF 
TEMP_DIR=$TEMP_DIR \
""


# 创建临时目录
mkdir -p $TEMP_DIR

# 计算总帧数
TOTAL_FRAMES=$((360 / DIFF))

echo ""正在生成图像帧$TOTAL_FRAMES""
# 旋转图像并生成帧
for ((i=0; i<TOTAL_FRAMES; i++)); do
    ANGLE=$((i * DIFF * DIRE))
    convert $IMAGE -background ""#99ccff"" -rotate $ANGLE -gravity center -extent $(identify -format ""%wx%h"" $IMAGE) $TEMP_DIR/frame_$i.png
done

echo ""正在拼接gif""
# 使用 ffmpeg 将帧转换为 gif
ffmpeg -framerate $FRAME -i $TEMP_DIR/frame_%d.png -vf ""scale=trunc(iw/2)*2:trunc(ih/2)*2"" -loop 0 $OUTPUT

# 清理临时文件
rm -r $TEMP_DIR

echo ""
GIF 已生成: $OUTPUT""
"
ZdXzDSw1,penerima,BimoSora,C++,Wednesday 22nd of May 2024 10:01:14 PM CDT,"#include <ArduinoJson.h>

int in1 = 2;
int in2 = 3;
int in3 = 4;
int in4 = 5;

int lightll = 8;
int lightrr = 10;
int seinll = 9;
int seinrr = 11;

unsigned long previousMillis = 0; // will store last time LED was updated
const long interval = 500;        // interval at which to blink (milliseconds)
int ledState = HIGH;              // ledState used to set the LED
boolean state = false;

unsigned long previousMillis2 = 0; // will store last time LED was updated
const long interval2 = 500;        // interval at which to blink (milliseconds)
int ledState2 = HIGH;
boolean state2 = false;

const char* up;
const char* down;
const char* left;
const char* right;
const char* stop;
const char* lightoff;
const char* light;
const char* seinloff;
const char* seinl;
const char* seinroff;
const char* seinr;

void setup() {
  // Initialize Serial port
  Serial.begin(9600);
  while (!Serial) continue;

  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  
  pinMode(lightll, OUTPUT);
  pinMode(lightrr, OUTPUT);
  pinMode(seinll, OUTPUT);
  pinMode(seinrr, OUTPUT);

  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  
  digitalWrite(lightll, HIGH);
  digitalWrite(lightrr, HIGH);
  digitalWrite(seinll, HIGH);
  digitalWrite(seinrr, HIGH);
}

void loop() {
  JsonDocument doc;
  
  DeserializationError error = deserializeJson(doc, Serial);
  if (error) {
    Serial.print(F(""deserializeJson() failed: ""));
    Serial.println(error.c_str());
    return;
  }

  up = doc[""up""]; // ""up""
  down = doc[""down""]; // ""down""
  left = doc[""left""]; // ""left""
  right = doc[""right""]; // ""right""
  stop = doc[""stop""]; // ""stop""
  lightoff = doc[""lightoff""]; // ""lightoff""
  light = doc[""light""]; // ""light""
  seinloff = doc[""seinloff""]; // ""seinloff""
  seinl = doc[""seinl""]; // ""seinl""
  seinroff = doc[""seinroff""]; // ""seinroff""
  seinr = doc[""seinr""]; // ""seinr""

  if (up == ""a"") {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
  }

  if (down == ""b"") {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
  }

  if (left == ""c"") {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
  }

  if (right == ""d""){
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
  }

  if (stop == ""e"") {
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
  }

  if (lightoff == ""f"") {
    digitalWrite(lightll, HIGH);
    digitalWrite(lightrr, HIGH);
  }

  if (light == ""g""){
    digitalWrite(lightll, LOW);
    digitalWrite(lightrr, LOW);
  }

  if (seinloff == ""h"") {
    digitalWrite(seinll, HIGH);
    digitalWrite(seinrr, HIGH);
    state = false;
    state2 = false;
  }

  if (seinl == ""i"") {
    digitalWrite(seinll, LOW);
    digitalWrite(seinrr, HIGH);
    state = true;
    state2 = false;
  }

  if (seinroff == ""j"") {
    digitalWrite(seinrr, HIGH);
    digitalWrite(seinll, HIGH);
    state2 = false;
    state = false;
  }

  if (seinr == ""k"") {
    digitalWrite(seinrr, LOW);
    digitalWrite(seinll, HIGH);
    state2 = true;
    state = false;
  }
  
  if (state) {
    Blink();
  } else {
    digitalWrite(seinll, HIGH); // ensure it's off in case it was still on
  }

  if (state2) {
    Blink2();
  } else {
    digitalWrite(seinrr, HIGH); // ensure it's off in case it was still on
  }
}

void Blink() {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    ledState = !ledState;
    digitalWrite(seinll, ledState);
  }
}

void Blink2() {
  unsigned long currentMillis2 = millis();
  if (currentMillis2 - previousMillis2 >= interval2) {
    previousMillis2 = currentMillis2;
    ledState2 = !ledState2;
    digitalWrite(seinrr, ledState2);
  }
}"
Rbfhgpcu,pengirim,BimoSora,C++,Wednesday 22nd of May 2024 10:00:55 PM CDT,"#include <Arduino.h>
#ifdef ESP32
#include <WiFi.h>
#include <AsyncTCP.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#endif
#include <ESPAsyncWebServer.h>
#include <FS.h>
#include <ArduinoJson.h>

/* Put your SSID & Password */
const char* ssid = ""RC Car"";  // Enter SSID here
const char* password = ""12345678"";  // Enter Password here

/* Put IP Address details */
IPAddress local_ip(192,168,1,1);
IPAddress gateway(192,168,1,1);
IPAddress subnet(255,255,255,0);

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);


String up = """";
String down = """";
String left = """";
String right = """";
String stop = """";
String lightoff = """";
String light = """";
String seinloff = """";
String seinl = """";
String seinroff = """";
String seinr = """";

void setup() {
  Serial.begin(9600);
  Serial.println();

  if (SPIFFS.begin()) {
    Serial.println(""SPIFFS initialised OK"");
  } else {
    Serial.println(""SPIFFS initialisation failed"");
  }

  WiFi.softAP(ssid, password);
  WiFi.softAPConfig(local_ip, gateway, subnet);
  delay(100);

  // Route for root / web page
  server.on(""/"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/index.html"", ""text/html"");
  });

  // Define routes for other assets
  server.on(""/assets/css/foundation.css"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/css/foundation.css"", ""text/css"");
  });
  server.on(""/assets/js/vendor.js"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/js/vendor.js"", ""text/javascript"");
  });
  server.on(""/assets/js/foundation.js"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/js/foundation.js"", ""text/javascript"");
  });

  // Define routes for image assets
  server.on(""/assets/img/up.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/up.png"", ""image/png"");
  });
  server.on(""/assets/img/left.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/left.png"", ""image/png"");
  });
  server.on(""/assets/img/stop.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/stop.png"", ""image/png"");
  });
  server.on(""/assets/img/right.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/right.png"", ""image/png"");
  });
  server.on(""/assets/img/down.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/down.png"", ""image/png"");
  });
  server.on(""/assets/img/light.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/light.png"", ""image/png"");
  });
  server.on(""/assets/img/lightoff.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/lightoff.png"", ""image/png"");
  });
  server.on(""/assets/img/seinl.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/seinl.png"", ""image/png"");
  });
  server.on(""/assets/img/seinloff.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/seinloff.png"", ""image/png"");
  });
  server.on(""/assets/img/seinr.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/seinr.png"", ""image/png"");
  });
  server.on(""/assets/img/seinroff.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/seinroff.png"", ""image/png"");
  });

  // Define routes for control commands
  server.on(""/up"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('a');
    up = ""a"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/down"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('b');
    down = ""b"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/left"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('c');
    left = ""c"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/right"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('d');
    right = ""d"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/stop"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('e');
    stop = ""e"";
    request->send(200, ""text/plain"", ""ok"");
  });

  server.on(""/lightoff"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('f');
    lightoff = ""f"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/light"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('g');
    light = ""g"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/seinloff"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('h');
    seinloff = ""h"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/seinl"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('i');
    seinl = ""i"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/seinroff"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('j');
    seinroff = ""j"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/seinr"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('k');
    seinr = ""k"";
    request->send(200, ""text/plain"", ""ok"");
  });

  // Start server
  server.begin();
}

void loop() {
  // Create the JSON document
  JsonDocument doc;
  
  doc[""up""] = ""up"";
  doc[""down""] = ""down"";
  doc[""left""] = ""left"";
  doc[""right""] = ""right"";
  doc[""stop""] = ""stop"";
  doc[""lightoff""] = ""lightoff"";
  doc[""light""] = ""light"";
  doc[""seinloff""] = ""seinloff"";
  doc[""seinl""] = ""seinl"";
  doc[""seinroff""] = ""seinroff"";
  doc[""seinr""] = ""seinr"";
  
  String Serial;
  doc.shrinkToFit();  // optional
  serializeJson(doc, Serial);
}"
GrE4s4ae,smart_pointer_test,Python253,Python,Wednesday 22nd of May 2024 09:36:59 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: smart_pointer_test.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
:: Python Smart Pointer Test ::

Description:
    - This script demonstrates smart pointer behavior through test scenarios.
    - It includes scenarios for moving null pointers and moving non-null pointers.

Requirements:
    - Python 3.x

Functions:
    - move_constructor_or_get(): Executes test scenarios to demonstrate smart pointer behavior.

Usage:
    - Run the script, and it will execute the test scenarios.
    - Review the output to observe the behavior of smart pointers.

Additional Notes:
    - In the Python version, UniquePtr is implemented as a simple class that wraps a pointer.
    - It doesn't perform manual memory management due to Python's automatic garbage collection.
    - However, it serves the same purpose conceptually, providing a way to manage ownership of objects.
""""""

class UniquePtr:
    """"""A simple smart pointer class managing ownership of a pointer.""""""

    def __init__(self, ptr):
        """"""Initialize the UniquePtr with a pointer.""""""
        self.ptr = ptr

    def __del__(self):
        """"""Destructor to clean up the pointer.""""""
        del self.ptr

class Spy:
    """"""A class used for tracking copy operations and deletions.""""""

    def __init__(self, is_deleted, copy_count):
        """"""Initialize Spy object with deletion status and copy count.""""""
        self.is_deleted = is_deleted
        self.copy_count = copy_count

    def __del__(self):
        """"""Destructor to mark the object as deleted.""""""
        self.is_deleted = True

def line():
    """"""
    Prints a line of dashes for visual separation.
    """"""
    print(""-"" * 67)

def move_constructor_or_get():
    """"""Tests scenarios to demonstrate smart pointer behavior.""""""
    line()
    print(""\n  :: [Testing scenarios to demonstrate smart pointer behavior] ::\n"")

    # Scenario 1: Moving null pointers
    line()
    print(""Scenario 1: \t[Moving null pointers]\n"")
    print(""- Creating a UniquePtr with a null pointer..."")
    uptr = UniquePtr(None)
    uptr2 = UniquePtr(uptr.ptr)
    print(""- Verifying that both pointers are null..."")
    assert uptr.ptr is None
    assert uptr2.ptr is None
    print(""\n\t\t[Both pointers are null as expected]"")
    print(""\nScenario 1: \t[Moving null pointers]\t\t\t  [Passed!]"")

    # Scenario 2: Moving non-null pointers
    line()
    print(""Scenario 2: \t[Moving non-null pointers]\n"")
    print(""- Creating a Spy object and wrapping it in a UniquePtr..."")
    copy_count = 0
    is_deleted = False
    ptr = Spy(is_deleted, copy_count)
    uptr = UniquePtr(ptr)
    print(""- Moving the UniquePtr to another UniquePtr..."")
    uptr2 = UniquePtr(uptr.ptr)
    print(""- Verifying ownership transfer and copy count..."")
    assert uptr.ptr is ptr
    assert uptr2.ptr is ptr
    assert copy_count == 0
    print(""\n\t\t[Ownership transferred successfully]"")
    print(""\t\t[Copy count is as expected]"")
    print(""\nScenario 2: \t[Moving non-null pointers]\t\t  [Passed!]"")

if __name__ == ""__main__"":
    move_constructor_or_get()
    line()
    print(""\n\t\tAll test scenarios passed successfully.\n\t\t   Exiting Program...    GoodBye!\n"")
    line()
"
sCNmFCPe,custom_hotkey_manager_cli,Python253,Python,Wednesday 22nd of May 2024 09:04:09 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: custom_hotkey_manager_cli.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
:: Windows Custom Hotkey Manager CLI Tool ::

Description:
    - This script is a command-line interface (CLI) tool designed for managing and creating custom hotkeys in Windows.
    - It allows users to define custom hotkey sequences for launching specific programs and provides a predefined set of useful hotkeys for various Windows actions.
    - By interacting with the script, users can easily create and manage custom hotkeys without needing to access system settings directly.
    - Additionally, the script saves custom hotkeys to a JSON file, ensuring they are persistent across sessions.

Requirements:
    - This script is designed primarily for Windows 10 and newer versions, but many functions are compatible with older versions as far back as Windows 7.
      (SEE COMPATIBILITY BELOW FOR FURTHER DETAILS)
    - It requires Python 3.x and the `keyboard` library to be installed on the system.
    - The script requires administrative privileges to set some hotkeys.

Usage:
    - Run the script in a terminal or command prompt.
    - Follow the on-screen instructions to create or manage hotkeys.

Compatibility:
    - Windows 10 and Windows 11:
        These hotkeys are fully supported.
    - Windows 8 and Windows 8.1:
        Most of these hotkeys are supported, though some features (like virtual desktops) were not introduced until Windows 10.
    - Windows 7:
        Basic hotkeys like opening the start menu, maximizing windows, and taking screenshots are supported,
        but many of the newer features like virtual desktops and some accessibility functions are not present.

Note:
    - This script will work on Windows 7 and up, but some features may not be available in older versions.
      If a feature is not present, the script will handle it gracefully by returning to the menu without errors.

Functions:
    1. select_program():
       - Opens the Program Files directory in File Explorer, allowing users to select a program.

    2. load_hotkeys():
       - Loads predefined and custom hotkeys from a JSON file. If the file does not exist, it initializes with predefined hotkeys.

    3. save_hotkeys(hotkeys):
       - Saves the current hotkeys configuration to a JSON file.

    4. get_hotkey_input():
       - Captures a custom hotkey sequence from the user. The sequence ends when the 'Esc' key is pressed.

    5. create_custom_hotkey():
       - Allows users to create a custom hotkey by selecting a program and assigning a hotkey sequence to it. Saves the custom hotkey to the JSON file.

Additional Notes:
    - Ensure that the script is run with appropriate permissions, especially when setting system-wide hotkeys.
    - Users should exercise caution when assigning hotkeys to avoid conflicts with existing system hotkeys.
""""""

import json
import keyboard
import os

# Predefined hotkeys
PREDEFINED_HOTKEYS = {
    ""open_start_menu"": [""win""],
    ""open_secret_start_menu"": [""win"", ""x""],
    ""cycle_through_taskbar"": [""win"", ""t""],
    ""go_to_nth_application"": [""win"", ""[n]""],
    ""show_all_running_applications"": [""win"", ""tab""],
    ""show_hide_desktop"": [""win"", ""d""],
    ""minimize_all_windows"": [""ctrl"", ""m""],
    ""temporary_show_desktop"": [""win"", "",""],
    ""magnify_screen_content"": [""win"", ""plus""],
    ""maximize_window"": [""win"", ""up""],
    ""maximize_window_vertically"": [""win"", ""shift"", ""up""],
    ""move_window_to_left_monitor"": [""custom""],
    ""move_window_to_right_monitor"": [""custom""],
    ""take_rectangular_screenshot"": [""win"", ""shift"", ""s""],
    ""take_full_screenshot"": [""win"", ""printscreen""],
    ""create_new_virtual_desktop"": [""win"", ""ctrl"", ""d""],
    ""move_between_virtual_desktops_left"": [""win"", ""ctrl"", ""left""],
    ""move_between_virtual_desktops_right"": [""win"", ""ctrl"", ""right""],
    ""close_current_virtual_desktop"": [""win"", ""ctrl"", ""f4""],
    ""open_action_center"": [""win"", ""a""],
    ""open_search"": [""win"", ""s""],
    ""open_new_edge_tab"": [""win"", ""c""],
    ""open_windows_settings"": [""win"", ""i""],
    ""connect_sidebar"": [""win"", ""k""],
    ""use_voice_typing"": [""win"", ""h""],
    ""lock_computer"": [""win"", ""l""],
    ""lock_screen_orientation"": [""win"", ""o""],
    ""open_presentation_sidebar"": [""win"", ""p""],
    ""open_ease_of_access_center"": [""win"", ""u""],
    ""select_from_clipboard_history"": [""win"", ""v""],
    ""set_focus_to_notification_area"": [""win"", ""b""],
    ""open_emoji_panel"": [""win"", "".""],
    ""start_stop_narrator"": [""win"", ""ctrl"", ""enter""],
    ""quick_language_list"": [""win"", ""space""],
    ""open_system_control_panel"": [""win"", ""pause""],
    ""start_task_manager"": [""ctrl"", ""shift"", ""esc""],
    ""start_on_screen_keyboard"": [""ctrl"", ""win"", ""o""],
    ""open_office_application_w"": [""ctrl"", ""shift"", ""alt"", ""win"", ""w""],
    ""open_office_application_p"": [""ctrl"", ""shift"", ""alt"", ""win"", ""p""],
    ""open_office_application_x"": [""ctrl"", ""shift"", ""alt"", ""win"", ""x""],
    ""open_office_application_o"": [""ctrl"", ""shift"", ""alt"", ""win"", ""o""],
    ""open_office_application_t"": [""ctrl"", ""shift"", ""alt"", ""win"", ""t""],
    ""open_office_application_d"": [""ctrl"", ""shift"", ""alt"", ""win"", ""d""],
    ""open_office_application_n"": [""ctrl"", ""shift"", ""alt"", ""win"", ""n""],
    ""open_office_application_l"": [""ctrl"", ""shift"", ""alt"", ""win"", ""l""],
    ""open_office_application_y"": [""ctrl"", ""shift"", ""alt"", ""win"", ""y""],
}

def select_program():
    """"""
    Opens the Program Files directory in File Explorer, allowing users to select a program.

    This function is used to assist users in locating and selecting the executable file for a program they wish to assign a custom hotkey to.
    """"""
    os.system(""explorer C:\\Program Files (x86)"")

def load_hotkeys():
    """"""
    Loads predefined and custom hotkeys from a JSON file.

    Returns:
        dict: A dictionary containing both predefined and custom hotkeys. Initializes with predefined hotkeys if the file does not exist.
    """"""
    try:
        with open(""hotkeys.json"", ""r"") as file:
            hotkeys = json.load(file)
    except FileNotFoundError:
        hotkeys = {""known"": PREDEFINED_HOTKEYS, ""custom"": {}}
    return hotkeys

def save_hotkeys(hotkeys):
    """"""
    Saves the current hotkeys configuration to a JSON file.

    Args:
        hotkeys (dict): A dictionary containing both predefined and custom hotkeys to be saved.
    """"""
    with open(""hotkeys.json"", ""w"") as file:
        json.dump(hotkeys, file, indent=4)

def get_hotkey_input():
    """"""
    Captures a custom hotkey sequence from the user. The sequence ends when the 'Esc' key is pressed.

    Returns:
        list: A list of strings representing the custom hotkey sequence entered by the user.
    """"""
    print(""Press your custom hotkey sequence. Press 'Esc' to finish input."")
    hotkey = []
    modifiers = set()  # Track pressed modifier keys
    while True:
        key = keyboard.read_event(suppress=True)
        if key.event_type == ""down"":
            if key.name == ""esc"":
                break
            elif key.name in [""shift"", ""ctrl"", ""alt"", ""win""]:
                modifiers.add(key.name)
            else:
                hotkey.append(""+"".join(modifiers))
                hotkey.append(key.name)
                modifiers.clear()
                print(""Current input:"", ""+"".join(hotkey))
    return hotkey

def create_custom_hotkey():
    """"""
    Allows users to create a custom hotkey by selecting a program and assigning a hotkey sequence to it. Saves the custom hotkey to the JSON file.

    This function guides the user through the process of defining a new hotkey sequence and associating it with a specific program.
    """"""
    hotkeys = load_hotkeys()
    hotkey = get_hotkey_input()
    hotkey_str = ""+"".join(hotkey)
    print(""Your input:"", hotkey_str)
    if hotkey_str in hotkeys[""known""]:
        print(
            f""The hotkey '{hotkey_str}' already exists for {hotkeys['known'][hotkey_str]}.""
        )
        print(
            ""Do you want to overwrite it or input a different sequence? (1 to Overwrite, 0 to Input Different)""
        )
        choice = input().strip()
        if choice == ""0"":
            return
    elif hotkey_str in hotkeys[""custom""]:
        print(
            f""The hotkey '{hotkey_str}' already exists for {hotkeys['custom'][hotkey_str]}.""
        )
        print(
            ""Do you want to overwrite it or input a different sequence? (1 to Overwrite, 0 to Input Different)""
        )
        choice = input().strip()
        if choice == ""0"":
            return
    select_program()  # Open file explorer
    program_path = input(""Enter the program path or select the program file: "").strip()
    hotkeys[""custom""][hotkey_str] = program_path
    save_hotkeys(hotkeys)

if __name__ == ""__main__"":
    create_custom_hotkey()
"
nukFrER8,RAII-UniquePtr,cepxuozab,C++,Wednesday 22nd of May 2024 08:52:15 PM CDT,"struct Spy {
        explicit Spy(bool& is_deleted, int& copy_count)
                : is_deleted_(is_deleted), copy_count_(copy_count) {}

        Spy(const Spy& rhs)
                : is_deleted_(rhs.is_deleted_), copy_count_(rhs.copy_count_) {
            ++copy_count_;
        }
        ~Spy() {
            is_deleted_ = true;
        }

        bool& is_deleted_;
        int& copy_count_;
    };

void MoveConstructorOrGet() {
        {
            UniquePtr<Spy> uptr(nullptr);
            UniquePtr<Spy> uptr2(std::move(uptr));

            ASSERT_EQUAL(uptr.Get(), nullptr);
            ASSERT_EQUAL(uptr2.Get(), nullptr);
        } {
            int copy_count_ = 0;
            bool is_deleted = false;
            auto *ptr = new Spy(is_deleted, copy_count_);
            UniquePtr<Spy> uptr(ptr);
            UniquePtr<Spy> uptr2(std::move(uptr));

            ASSERT_EQUAL(uptr.Get(), nullptr);
            ASSERT_EQUAL(uptr2.Get(), ptr)
            ASSERT_EQUAL(copy_count_, 0)
        }
    }"
XWKJ7GqD,win_sign_in_cli,Python253,Python,Wednesday 22nd of May 2024 08:47:12 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: win_sign_in_cli.py
# Version: 1.0.3
# Author: Jeoi Reqi

""""""
Windows 11 Sign-in CLI Tool

This script is a command-line interface (CLI) tool designed for managing sign-in options and password settings in Windows 11.
It provides users with a menu-driven interface to perform actions such as changing sign-in methods and enabling or disabling the user password at Windows startup.
By interacting with the script, users can easily navigate through various sign-in options and password settings without the need to access system settings directly.
Additionally, the script ensures a seamless user experience by automatically returning to the main menu after each action, allowing users to perform multiple tasks efficiently.

Requirements:
    - This script is designed for Windows 11.
    - It requires Python 3.x to be installed on the system.

Usage:
    - Run the script in a terminal or command prompt.
    - Follow the on-screen menu instructions to perform desired actions.

Functions:
    1. change_sign_in_method():
       - Opens the sign-in options control panel, allowing users to change their sign-in method using the Windows settings.

    2. enable_disable_password():
       - Opens the Advanced User Account Control Panel (netplwiz), enabling or disabling the user password at Windows startup.
         Note: This function requires elevated permissions to edit the user account settings.

Additional Notes:
    - Ensure that the script is run with appropriate permissions, especially when using the 'enable_disable_password()' function.
    - Users should exercise caution when making changes to sign-in options and password settings, as it may impact system security.
    - To apply the changes completely, you will need to log off and sign in again.
""""""

# Get Essential Imports
import os
import sys

# Function to open sign-in options control panel
def change_sign_in_method():
    print(""Opening Sign-in options page..."")
    os.system(""start ms-settings:signinoptions"")

# Function to enable or disable the user password at windows startup
def enable_disable_password():
    print(
        ""Opening netplwiz...\n\n::Open the Advanced User Account Control Panel::\n\t::(Flashing Shield In The Taskbar)::\n\nMake your selection:\n::🗹 Check To Enable::\n::☐ Uncheck To Disable::\n""
    )
    os.system(""start netplwiz"")  # This requires elevated permissions to edit

def header():
    print(
        """"""
          .---.
         /    |\________________
        ( ()  | ________   _   _)
         \    |/        | | | |
          `---'         '-' |_|
            """"""
    )

def main():
    while True:
        header()
        print(""\nWelcome to Windows 11 Sign-in Options Menu"")
        print(""------------------------------------------\n"")
        print(""1. Change Sign-in Method"")
        print(""2. Enable\Disable Password"")
        print(""0. Exit"")

        choice = input(""\nEnter the number of your choice: "")
        print(""------------------------------------------\n"")

        if choice == ""1"":
            change_sign_in_method()
        elif choice == ""2"":
            enable_disable_password()
        elif choice == ""0"":
            print(""Exiting program...   Goodbye!"")
            sys.exit()  # Exit the program
        else:
            print(""Invalid choice! Please enter a valid option.\n"")
            print(""------------------------------------------\n"")
        input(""Press Enter to return to the menu...\n\n\n\n\n"")

if __name__ == ""__main__"":
    main()

"
yTmUFBM6,keystroke_recorder,Python253,Python,Wednesday 22nd of May 2024 08:26:42 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: keystroke_recorder.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script monitors and logs keystrokes to a text file.
    - It uses the pynput library to listen for keyboard events and logs each keystroke with a timestamp.
    - The script prompts the user to start and stop monitoring, and to exit gracefully.

Functions:
    - on_press(key):
        Logs each key press to a text file with a timestamp.
    - monitor_input():
        Prompts the user to start and stop monitoring, and to exit the program.

Requirements:
    - Python 3.x
    - Pynput Module (install using `pip install pynput`)
   
Usage:
    - Run the script using `python keystroke_recorder.py`.
    - Follow the prompts in the terminal to start monitoring, stop monitoring, and exit the program.

Example Expected Output:

    2020-04-20 18:16:26.210462: Key.enter
    2020-04-20 18:16:35.858730: t
    2020-04-20 18:16:36.041972: e
    2020-04-20 18:16:36.265978: s
    2020-04-20 18:16:36.506444: t
    2020-04-20 18:16:37.178961: Key.space
    2020-04-20 18:16:37.686928: k
    2020-04-20 18:16:37.836686: e
    2020-04-20 18:16:38.111881: y
    2020-04-20 18:16:38.363728: s
    2020-04-20 18:16:38.565703: t
    2020-04-20 18:16:38.721222: r
    2020-04-20 18:16:39.167719: o
    2020-04-20 18:16:39.399612: k
    2020-04-20 18:16:39.618355: e
    2020-04-20 18:16:39.894371: Key.space
    2020-04-20 18:16:40.355300: r
    2020-04-20 18:16:40.572588: e
    2020-04-20 18:16:40.881969: c
    2020-04-20 18:16:41.117424: o
    2020-04-20 18:16:41.482916: r
    2020-04-20 18:16:41.766971: d
    2020-04-20 18:16:41.976781: e
    2020-04-20 18:16:42.208465: r

Additional Notes:
    - Ensure that you have the necessary permissions to run the script.
    - The script logs all keystrokes, including special keys like Enter, Space, and others.
""""""

from pynput.keyboard import Key, Listener
import datetime
import threading
import os

# Set up the text file
txt_file = ""keystrokes.txt""
stop_flag = threading.Event()

def on_press(key):
    """"""
    Logs each key press to a text file with a timestamp.

    Args:
        key: The key that was pressed.
    """"""
    with open(txt_file, ""a"", encoding=""utf-8"") as f:
        if hasattr(key, ""char""):
            f.write(f""{datetime.datetime.now()}: {key.char}\n"")
        else:
            f.write(f""{datetime.datetime.now()}: {key}\n"")
    if stop_flag.is_set():
        return False  # Stop the listener

def monitor_input():
    """"""
    Prompts the user to start and stop monitoring, and to exit the program.
    """"""
    input(""Press Enter to start monitoring...\n"")

    print(""Monitoring keystrokes...\n"")

    input(""Press Enter to stop...\n"")

    print(""Saving log to:"")
    print(f""- {os.getcwd()}/{txt_file}\n"")
    stop_flag.set()

    print(""Keystrokes saved to:"")
    print(f""- {os.path.abspath(txt_file)}\n"")

    input(""Press Enter to exit...\n"")

# Create a listener thread
listener_thread = threading.Thread(target=Listener(on_press=on_press).start)

# Start the listener thread
listener_thread.start()

# Monitor user input
monitor_input()

# Wait for the listener thread to finish
listener_thread.join()

print(""Program exited... Goodbye!"")
"
fQyzzjCd,centerofmass.py,Hustinyano,Python,Wednesday 22nd of May 2024 07:59:12 PM CDT,"import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as integrate

def CubicNatural(x, y):
    m = x.size # m is the number of data points
    n = m-1
    a = np.zeros(m)
    b = np.zeros(n)
    c = np.zeros(m)
    d = np.zeros(n)
    for i in range(m):
        a[i] = y[i]
    h = np.zeros(n)
    for i in range(n):
        h[i] = x[i+1] - x[i]
    u = np.zeros(n)
    u[0] = 0
    for i in range(1, n):
        u[i] = 3*(a[i+1]-a[i])/h[i]-3*(a[i]-a[i-1])/h[i-1]
    s = np.zeros(m)
    z = np.zeros(m)
    t = np.zeros(n)
    s[0] = 1
    z[0] = 0
    t[0] = 0
    for i in range(1, n):
        s[i] = 2*(x[i+1]-x[i-1])-h[i-1]*t[i-1]
        t[i] = h[i]/s[i]
        z[i]=(u[i]-h[i-1]*z[i-1])/s[i]
    s[m-1] = 1
    z[m-1] = 0
    c[m-1] = 0
    for i in np.flip(np.arange(n)):
        c[i] = z[i]-t[i]*c[i+1]
        b[i] = (a[i+1]-a[i])/h[i]-h[i]*(c[i+1]+2*c[i])/3
        d[i] = (c[i+1]-c[i])/(3*h[i])
    return a, b, c, d

def CubicNaturalEval(w, x, coeff):
    m = x.size
    if w<x[0] or w>x[m-1]:
        print('error: spline evaluated outside its domain')
        return
    n = m-1
    p = 0
    for i in range(n):
        if w <= x[i+1]:
            break
        else:
            p += 1
    # p is the number of the subinterval w falls into, i.e., p=i means
    # w falls into the ith subinterval $(x_i,x_{i+1}), and therefore
    # the value of the spline at w is
    # a_i+b_i*(w-x_i)+c_i*(w-x_i)^2+d_i*(w-x_i)^3.
    a = coeff[0]
    b = coeff[1]
    c = coeff[2]
    d = coeff[3]
    return a[p]+b[p]*(w-x[p])+c[p]*(w-x[p])**2+d[p]*(w-x[p])**3

xaxis = np.linspace(0, 14.875, 100)

xi = np.array([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 14.875])  # Replace with your data points
yi = np.array([0.44, 1.5, 2.875, 4.125, 5.5, 6.875, 8.25, 9.25, 9.375, 9.25, 8.75, 8, 7.375, 6.875, 6.375, 6.375, 6.625, 7.25, 8, 8.25, 7.5, 5.625, 5.25, 5, 5, 5.125, 5.625, 6.375, 7, 7.5, 8.25])  # Replace with your function values at x_data points

for i in CubicNatural(xi,yi):
    print(i)

coeff = CubicNatural(xi, yi)

def f(x):
    return CubicNaturalEval(x, xi, coeff)

def g(x):
    return (f(x)**2)/2

def h(x):
    return (x*f(x))

cuts = 30

#----Trapezoidal Rule Integration----

part = np.linspace(0,14.875,cuts)
fpart = np.zeros(cuts)
gpart = np.zeros(cuts)
hpart = np.zeros(cuts)

for i in range(cuts):
    fpart[i] = f(part[i])
    gpart[i] = g(part[i])
    hpart[i] = h(part[i])


print(""Sfdx = "", np.trapz(fpart))
print(""Sgdx = "", np.trapz(gpart))
print(""Shdx = "", np.trapz(hpart))

print(""x = "", np.trapz(hpart)/np.trapz(fpart))
print(""y = "", np.trapz(gpart)/np.trapz(fpart))

#------------------------------------


#Alternative version below

# Sf, err = integrate.quad(f, 0, 14.875)
# Sg, err = integrate.quad(g, 0, 14.875)
# Sh, err = integrate.quad(h, 0, 14.875)

# print(""Sf(x)dx="", Sf)
# print(""Sg(x)dx="", Sg)
# print(""Sh(x)dx="", Sh)

# print(""x = "", Sh/Sf)
# print(""y = "", Sg/Sf)

"
1FTVR3yy,naturalcubicspline.py,Hustinyano,Python,Wednesday 22nd of May 2024 07:56:19 PM CDT,"import numpy as np
import matplotlib.pyplot as plt

def CubicNatural(x, y):
    m = x.size # m is the number of data points
    n = m-1
    a = np.zeros(m)
    b = np.zeros(n)
    c = np.zeros(m)
    d = np.zeros(n)
    for i in range(m):
        a[i] = y[i]
    h = np.zeros(n)
    for i in range(n):
        h[i] = x[i+1] - x[i]
    u = np.zeros(n)
    u[0] = 0
    for i in range(1, n):
        u[i] = 3*(a[i+1]-a[i])/h[i]-3*(a[i]-a[i-1])/h[i-1]
    s = np.zeros(m)
    z = np.zeros(m)
    t = np.zeros(n)
    s[0] = 1
    z[0] = 0
    t[0] = 0
    for i in range(1, n):
        s[i] = 2*(x[i+1]-x[i-1])-h[i-1]*t[i-1]
        t[i] = h[i]/s[i]
        z[i]=(u[i]-h[i-1]*z[i-1])/s[i]
    s[m-1] = 1
    z[m-1] = 0
    c[m-1] = 0
    for i in np.flip(np.arange(n)):
        c[i] = z[i]-t[i]*c[i+1]
        b[i] = (a[i+1]-a[i])/h[i]-h[i]*(c[i+1]+2*c[i])/3
        d[i] = (c[i+1]-c[i])/(3*h[i])
    return a, b, c, d

def CubicNaturalEval(w, x, coeff):
    m = x.size
    if w<x[0] or w>x[m-1]:
        print('error: spline evaluated outside its domain')
        return
    n = m-1
    p = 0
    for i in range(n):
        if w <= x[i+1]:
            break
        else:
            p += 1
    # p is the number of the subinterval w falls into, i.e., p=i means
    # w falls into the ith subinterval $(x_i,x_{i+1}), and therefore
    # the value of the spline at w is
    # a_i+b_i*(w-x_i)+c_i*(w-x_i)^2+d_i*(w-x_i)^3.
    a = coeff[0]
    b = coeff[1]
    c = coeff[2]
    d = coeff[3]
    return a[p]+b[p]*(w-x[p])+c[p]*(w-x[p])**2+d[p]*(w-x[p])**3

xaxis = np.linspace(0, 14.875, 100)

xi = np.array([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 14.875])  # Replace with your data points
yi = np.array([0.44, 1.5, 2.875, 4.125, 5.5, 6.875, 8.25, 9.25, 9.375, 9.25, 8.75, 8, 7.375, 6.875, 6.375, 6.375, 6.625, 7.25, 8, 8.25, 7.5, 5.625, 5.25, 5, 5, 5.125, 5.625, 6.375, 7, 7.5, 8.25])  # Replace with your function values at x_data points

for i in CubicNatural(xi,yi):
    print(i)

coeff = CubicNatural(xi, yi)
naturalspline = np.array(list(map(lambda x: CubicNaturalEval(x, xi, coeff), xaxis)))

plt.plot(xi, yi, 'o', label='Data Points')
plt.plot(xaxis, naturalspline, label='Natural cubic spline')
plt.xlabel(""X"")
plt.ylabel(""Y"")
plt.title(""Natural Cubic Spline"")
plt.legend()
plt.grid(True)
plt.show()"
WpnS9WXH,divideddifference.py,Hustinyano,Python,Wednesday 22nd of May 2024 07:54:19 PM CDT,"import numpy as np
import matplotlib.pyplot as plt

def diff(x, y):
    m = x.size # here m is the number of data points.
    # the degree of the polynomial is m-1
    a = np.zeros(m)
    for i in range(m):
        a[i] = y[i]
    for j in range(1, m):
        for i in np.flip(np.arange(j,m)):
            a[i] = (a[i]-a[i-1]) / (x[i]-x[i-(j)])
    return a

def newton(x, y, z):
    m = x.size # here m is the number of data points, not the degree
    # of the polynomial
    a = diff(x, y)
    sum = a[0]
    pr = 1.0
    for j in range(m-1):
        pr *= (z-x[j])
        sum += a[j+1]*pr
    return sum

xi = np.array([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 14.875])  # Replace with your data points
yi = np.array([0.44, 1.5, 2.875, 4.125, 5.5, 6.875, 8.25, 9.25, 9.375, 9.25, 8.75, 8, 7.375, 6.875, 6.375, 6.375, 6.625, 7.25, 8, 8.25, 7.5, 5.625, 5.25, 5, 5, 5.125, 5.625, 6.375, 7, 7.5, 8.25])  # Replace with your function values at x_data points

# print(diff(xi, yi))

xaxis = np.linspace(0, 14.875, 100)
interp = newton(xi, yi, xaxis)
plt.plot(xaxis, interp, label='Newton Divided Difference')
plt.plot(xi, yi, 'o', label='data')
plt.xlabel(""X"")
plt.ylabel(""Y"")
plt.title(""Newton Divided Difference"")
plt.legend()
plt.grid(True)
plt.show()"
FSJWJPm8,ConvertToUPPERCASE-01.ps1,iwishportalwasreal,PowerShell,Wednesday 22nd of May 2024 07:41:08 PM CDT,"<#
2024-05-22 Wed. 9:15a.
ConvertToUPPERCASE-01.ps1
https://github.com/EverythingIsCodeCodeCode/public_GitHub_data/blob/main/ConvertToUPPERCASE-01.ps1
https://pastebin.com/FSJWJPm8
Made with ChatGPT.
This PowerShell script will make a GUI window that lets people convert text to UPPERCASE.  To make a desktop icon shortcut, modify it to something similar to the line below:
powershell.exe -NoProfile -ExecutionPolicy Bypass -File ""C:\Path\To\Your\Script\UppercaseConverter.ps1""
It doesn't require Internet access.  The URIs are part of the standard .NET framework and are recognized by the XAML parser to render the GUI elements correctly.
#>

Add-Type -AssemblyName PresentationFramework

[xml]$xaml = @""
<Window xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
        xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
        Title=""Uppercase Converter"" Height=""350"" Width=""400"">
    <Grid>
        <TextBox Name=""InputTextBox"" Height=""120"" Margin=""10,10,10,200"" VerticalScrollBarVisibility=""Auto"" AcceptsReturn=""True""/>
        <Button Name=""ConvertButton"" Content=""Convert to Uppercase"" Width=""150"" Height=""40"" HorizontalAlignment=""Center"" VerticalAlignment=""Bottom"" Margin=""0,0,0,50""/>
        <TextBox Name=""OutputTextBox"" Height=""120"" Margin=""10,140,10,90"" VerticalScrollBarVisibility=""Auto"" IsReadOnly=""True""/>
        <TextBlock Name=""ClipboardStatus"" Height=""20"" Margin=""10,0,10,20"" VerticalAlignment=""Bottom"" HorizontalAlignment=""Center"" TextAlignment=""Center""/>
    </Grid>
</Window>
""@

# Load the XAML
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$window = [Windows.Markup.XamlReader]::Load($reader)

# Define the event handler for the button click
$convertToUppercase = {
    $inputText = $window.FindName(""InputTextBox"").Text
    $outputText = $inputText.ToUpper()
    $window.FindName(""OutputTextBox"").Text = $outputText

    # Copy the converted text to the clipboard
    [System.Windows.Clipboard]::SetText($outputText)
    $window.FindName(""ClipboardStatus"").Text = ""Text copied to clipboard!""
}

# Attach the event handler to the button click event
$convertButton = $window.FindName(""ConvertButton"")
$convertButton.Add_Click($convertToUppercase)

# Show the window
$window.ShowDialog() | Out-Null
"
