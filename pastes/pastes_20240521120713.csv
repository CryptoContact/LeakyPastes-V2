id,title,username,language,date,content
zmguHK4k,items.yml,sneyzi,Java,Tuesday 21st of May 2024 06:37:19 AM CDT,"items:
  1:
    STICK:
      price: 0.1
    POLISHED_GRANITE:
      price: 0.4
    COOKED_COD:
      price: 3.1
    COBBLESTONE:
      price: 0.2
    SAND:
      price: 0.3
    GRAVEL:
      price: 0.5
    COAL_BLOCK:
      price: 9.9
    HAY_BLOCK:
      price: 15.5
    BREWING_STAND:
      price: 3.4
    RED_SAND:
      price: 2.4
    CHORUS_FLOWER:
      price: 23.0
    IRON_TRAPDOOR:
      price: 20.9
    OAK_LEAVES:
      price: 0.6
    MAGMA_BLOCK:
      price: 1.2
    NETHERRACK:
      price: 0.1
    ITEM_FRAME:
      price: 4.9
  2:
    ANDESITE:
      price: 0.3
    POLISHED_ANDESITE:
      price: 0.3
    END_STONE:
      price: 0.7
    LEATHER:
      price: 3.2
    WHITE_CARPET:
      price: 1.3
    PUMPKIN:
      price: 3.3
    OAK_LOG:
      price: 1.6
    GLASS:
      price: 0.8
    COBWEB:
      price: 22.8
    FLINT:
      price: 1.1
    STONE:
      price: 0.6
    BROWN_MUSHROOM:
      price: 4.4
    TORCH:
      price: 0.2
    MYCELIUM:
      price: 2.1
    CACTUS:
      price: 2.4
    ENCHANTING_TABLE:
      price: 50.0
    ARROW:
      price: 2.3
  3:
    WHEAT:
      price: 1.8
    REDSTONE:
      price: 1.1
    SNOWBALL:
      price: 0.7
    QUARTZ_BLOCK:
      price: 2.5
    CAKE:
      price: 13.0
    BONE:
      price: 2.6
    SUGAR:
      price: 2.7
    MELON:
      price: 0.8
    COOKED_BEEF:
      price: 3.0
    COOKED_CHICKEN:
      price: 2.8
    WHITE_WOOL:
      price: 4.2
    BROWN_DYE:
      price: 3.4
  4:
    ENDER_PEARL:
      price: 11.4
    BLAZE_ROD:
      price: 3.0
    NETHER_WART:
      price: 2.1
    SPIDER_EYE:
      price: 2.2
    EMERALD:
      price: 3.1
    BAKED_POTATO:
      price: 2.5
    COOKIE:
      price: 1.8
    OBSERVER:
      price: 1.9
    RAIL:
      price: 1.6
  5:
    CARROT:
      price: 2.2
    RABBIT_FOOT:
      price: 21.5
    RABBIT_HIDE:
      price: 5.1
    CHORUS_FRUIT:
      price: 1.1
    PAPER:
      price: 2.9
    COOKED_RABBIT:
      price: 6.5
    EGG:
      price: 5.1
    GLOWSTONE_DUST:
      price: 1.4
    PRISMARINE_SHARD:
      price: 4.6
    BIRCH_WOOD:
      price: 1.7
    LEAD:
      price: 16.7
  6:
    COBBLESTONE:
      price: 0.4
    NETHER_BRICK:
      price: 2.1
    DIORITE:
      price: 0.5
    GRANITE:
      price: 0.6
    APPLE:
      price: 3.1
    COAL:
      price: 1.1
    STRING:
      price: 2.3
    FEATHER:
      price: 1.9
    GUNPOWDER:
      price: 2.6
    OBSIDIAN:
      price: 4.2
    GRASS_BLOCK:
      price: 0.3
    DIAMOND_HOE:
      price: 13.3
    GOLDEN_APPLE:
      price: 26.3
  7:
    OAK_BOAT:
      price: 1.8
    BOW:
      price: 6.8
    TOTEM_OF_UNDYING:
      price: 666.6
    CLAY:
      price: 0.6
    MILK_BUCKET:
      price: 15.1
    BROWN_DYE:
      price: 3.8
    HOPPER:
      price: 34.2
    GOLDEN_SWORD:
      price: 10.6
    JUKEBOX:
      price: 12.3
    LAVA_BUCKET:
      price: 16.8
    JUNGLE_WOOD:
      price: 1.6
    LEVER:
      price: 0.3
    ICE:
      price: 2.4
  8:
    SHIELD:
      price: 8.8
    OAK_SAPLING:
      price: 0.8
    MAGMA_CREAM:
      price: 6.7
    TNT_MINECART:
      price: 26.2
    VINE:
      price: 2.7
    TRIPWIRE_HOOK:
      price: 3.1
    COOKED_PORKCHOP:
      price: 3.3
    ARMOR_STAND:
      price: 1.8
    ANVIL:
      price: 166.6
    CLOCK:
      price: 16.8
    RED_MUSHROOM:
      price: 4.9
    SADDLE:
      price: 69.0
    OAK_SIGN:
      price: 1.4
    PAINTING:
      price: 3.7
    COOKED_MUTTON:
      price: 3.2"
JWVMzjkR,CryptoCurrency,Silviya7,JavaScript,Tuesday 21st of May 2024 06:24:12 AM CDT,"function solve(input){

    let Message= input.shift();


    let cmdline= input.shift();
   
    while (cmdline!='Buy') {
        
        let AllCmds= cmdline.split('?');
        switch (AllCmds[0]) {
        case ""TakeEven"":
                
        let NewMessage='';
        for (let i = 0; i < Message.length; i++) {
            if(i% 2==0)
            {
           NewMessage +=Message[i];
           
            }
          
        }
        Message= NewMessage;
        console.log(NewMessage);     
        break;
        
        case'ChangeAll':
        let substring=AllCmds[1];
        let replacemen =AllCmds[2];

        while(Message.includes(substring)){
           Message= Message.replace(substring,replacemen)

        }

        console.log(Message);
                break;
        case 'Reverse':
            let substring1=AllCmds[1]; 
            if(Message.includes(substring1)){
                Message= Message.replace(substring1,'');

               let reversedMessage='';
               for (let j = substring1.length-1; j >= 0; j--) {
                reversedMessage +=substring1[j];
               }
               Message +=reversedMessage;
               console.log(Message);
            }
            else{
                console.log('error')
            }
            
                    break;
        }

        cmdline= input.shift();
    }


    console.log(`The cryptocurrency is: ${Message}`)
}"
Rq2C0HNm,Untitled,webgleb,PHP,Tuesday 21st of May 2024 06:10:15 AM CDT,"<?php

use Dotenv\Dotenv;
use Woo\ProductCreator\Product;
use jobs\products\UpdateProduct;
use Pju\Helpers\PJU\JobQueue\QueueManager;

require_once 'Product.php';
require_once dirname(__DIR__, 2) . ""/vendor/autoload.php"";

$dotenv = Dotenv::createUnsafeImmutable(dirname(__DIR__, 2));
$dotenv->load();

class ProductCustomLabel
{
    public static function importCustomLabels($files)
    {
        if (empty($files)) {
            throw new Exception(""No files provided"");
        }
        
        $counter = 0;

        // check if the file is a CSV
        for ($i = 0; $i < count($files['name']); $i++) {
            if ($files['type'][$i] !== 'text/csv') {
                throw new Exception(""File is not a CSV"");
            }

            $file_path = $files['tmp_name'][$i];

            $file = fopen($file_path , ""r"");
            $header = fgetcsv($file, 1000, "","");

            if (empty($header)) {
                throw new Exception(""No data found in the file"");
            }

            $needed_columns = ['sku', 'country', 'custom_label_1'];
            if (count(array_intersect($needed_columns, $header)) !== count($needed_columns)) {
                throw new Exception(""Missing required columns in the file"");
            }

            $custom_labels = [];

            while (($row = fgetcsv($file, 1000, "","")) !== FALSE) {
                $row = array_combine($header, $row);

                if (empty($row['sku']) || empty($row['country']) || empty($row['custom_label_1'])) {
                    continue;
                }

                try {
                    $product = Product::get_product_by_sku_country($row['sku'], $row['country']);
                    $additional_data = json_decode($product['additional_data'], true);
                    $additional_data['custom_label_1'] = $row['custom_label_1'];

                    $arguments = [
                        // 'id' => $product['id'],
                        'product_sku' => $row['sku'],
                        'country' => $row['country'],
                        'additional_data' => $additional_data
                    ];
                    QueueManager::addJob(UpdateProduct::class, 'dashboard:product_update', $arguments);

                    // Product::update_product(0, $row['sku'], 0, -1, $row['country'], '', '', '', '', '', '', '', [], [], [], [], [], [], [], '', [], '', $additional_data);
                    $counter++;
                } catch (Exception $e) {
                    error_log($e->getMessage());
                    continue;
                }
            }
        }

        return [
            'success' => true, 
            'message' => 'Successfully imported custom labels',
            'total_imported' => $counter
        ];
    }
}"
1akxWcDu,ü§ë G2A.com Free Gift Card Guide May 2024 FIX üéÅ,ssss50w,GetText,Tuesday 21st of May 2024 06:02:02 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
21 May 2024"
huPT9Cxz,MiningResourceSplitter,problemlow,Lua,Tuesday 21st of May 2024 06:00:52 AM CDT,"function searchString(bigString, searchString)
    if bigString ~= nil and searchString ~= nil then
        if bigString.match(bigString, searchString) == nil then
            return false
        else
            return true
        end
    else
        return false
    end
end


function check()
    for slot = 1, 16 do
        turtle.select(slot)
        if turtle.getItemSpace(slot) ~= 64 then
            temp = turtle.getItemDetail()
            name = temp.name
            if searchString(name, ""raw"") == true or searchString(name, ""sulfur"") == true then
                print(""Drop Forward"")
                turtle.drop(64)
            else
                print(""Drop Down"")
                turtle.dropDown(64)
            end
        end
    end
end

while true do
    check()
    sleep(2.5)
end
shell.run(""reboot"")"
p17Kxzys,ü§ë G2A.com Free Gift Card Guide May 2024 FIX ü§ë,jusst2k4,GetText,Tuesday 21st of May 2024 06:00:18 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_435739.pdf

Working as of:
21 May 2024"
kk6JgaFz,data933,TestGuy1,JSON,Tuesday 21st of May 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3805e3ee637717fdff386cd1c133142fad915e9b0d645f7857a0b33c9a8e9aa13dcce0ca7577277eb88503c14e12e23bbd3ec412af6ee65330bf8b828c3068c159ff146378f4b91b43636b1e2ed7200ee9ba5517c076d3f6cc00921179fefdd27e423a7ce12b49387609c46fbf41d35ecb6986d1812b8d6442685878a806ba7f',
  otherdata: [
    'f744c531f6b0d3d8d51161303db19618',
    '6abb555405f02184bfea4b4b36bd117b',
    '8c02f5649e0dd6a0c4003cdefd4ab96d',
    'fa06b5b56ea3332aadf3d26e7d7887d1',
    '5602df381c5f14921af1c6aaf70ae46a',
    'd73dedb81672504dc6f95a0c08e0b22a',
    '7fad1efa09ae76925966939cbdd4b037',
    'ac0bf04ecb8daeb6ac722cc10d30027f'
  ]
}"
RXRUj3FJ,–ü—Ä–∞–∫—Ç–∏–∫–∞ (–∑–∞–≤–¥–∞–Ω–Ω—è 10),Lavig,Python,Tuesday 21st of May 2024 05:22:13 AM CDT,"while True:
    try:
        first_number = (input(""\033[1m\033[96m–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à–µ —á–∏—Å–ª–æ: \033[0m""))
        second_number = (input(""\033[1m\033[33m–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–µ —á–∏—Å–ª–æ: \033[0m""))
        third_number = (input(""\033[1m\033[95m–í–≤–µ–¥—ñ—Ç—å —Ç—Ä–µ—Ç—î —á–∏—Å–ª–æ: \033[0m""))
        float(first_number)
        float(second_number)
        float(third_number)
        break
    except:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
first_number = float(first_number)
second_number = float(second_number)
third_number = float(third_number)
if first_number.is_integer() == True:
    first_number = int(first_number)
if second_number.is_integer() == True:
    second_number = int(second_number)
if third_number.is_integer() == True:
    third_number = int(third_number)
m = max(first_number, second_number, third_number)
print(""\033[92;1m–ù–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ ‚Äì\033[97m"", m, ""\033[0m"")"
0V6Rpep2,–ü—Ä–∞–∫—Ç–∏–∫–∞ (–∑–∞–≤–¥–∞–Ω–Ω—è 9),Lavig,Python,Tuesday 21st of May 2024 05:21:20 AM CDT,"while True:
    even = []
    odd = []
    array = input(""\033[1m\033[33m–í–≤–µ–¥—ñ—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª —Ü—ñ–ª—ñ —á–∏—Å–ª–∞, —è–∫—ñ –±–∞–∂–∞—î—Ç–µ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏: \033[0m"")
    array = array.split()
    try:
        array = list(map(float, array))
    except:
        print(""\033[1m\033[31m–í–≤–µ–¥–µ–Ω–∏–π –º–∞—Å–∏–≤ –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –∑ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à–∏–π –º–∞—Å–∏–≤!\033[0m"")
        continue
    is_error = 0
    for i in range(len(array)):
        if array[i].is_integer():
            if array[i] % 2 == 0:
                even.append(int(array[i]))
            else:
                odd.append(int(array[i]))
            array[i] = int(array[i])
            continue
        else:
            is_error = 1
        break
    if is_error == 1:
        print(""\033[1m\033[31m–í–≤–µ–¥–µ–Ω–∏–π –º–∞—Å–∏–≤ –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –∑ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à–∏–π –º–∞—Å–∏–≤!\033[0m"")
        continue
    else:
        break
if len(even) == 0:
    print(""\033[1m\033[95m–ü–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ –Ω–µ–º–∞—î\033[0m"")
else:
    print(""\033[1m\033[95m–ü–∞—Ä–Ω—ñ —á–∏—Å–ª–∞:"", ""\033[97m"", end='')
    print(*even, sep=', ', end = ""\033[0m\n"")
if len(odd) == 0:
    print(""\033[92;1m–ù–µ–ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ –Ω–µ–º–∞—î\033[0m"")
else:
    print(""\033[92;1m–ù–µ–ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞:"", ""\033[97m"",  end = '')
    print(*odd, sep=', ', end = ""\033[0m\n"")"
ZFFdt7Tt,Untitled,OneTells,Python,Tuesday 21st of May 2024 05:14:24 AM CDT,"def ultra(base, count, command):
    args = [base, count, command]
    commands = [0]
    result = []

    while commands:
        command = commands.pop()

        if command == 0:
            command_arg = args.pop()
            count_arg = args.pop()
            base_arg = args.pop()

            if command_arg == 1:
                commands.append(1)

                result.append(base_arg)
                result.append(count_arg)
                continue

            if count_arg == 1:
                result.append(base_arg)
                continue

            commands.append(0)
            args.append(base_arg)
            args.append(command_arg - 1)

            commands.append(2)

            commands.append(0)
            args.append(base_arg)
            args.append(count_arg - 1)
            args.append(command_arg)
        elif command == 1:
            result.append(result.pop() + result.pop())
        elif command == 2:
            r = result.pop()

            command_arg = args.pop()
            args.append(r)
            args.append(command_arg)

    return result.pop()


print(ultra(2, 4, 4))"
gwqkWxUR,Untitled,35657,C++,Tuesday 21st of May 2024 05:13:28 AM CDT,"
#include <iostream>

using namespace std;

namespace some_namespace {
	void func() {
		cout << ""Hi func!"" << endl;
	}
	void func2() {
		cout << ""Hi func2!"" << endl;
	}
	namespace some2 {
		void some2_func() {
			cout << ""Hi some2_func!"" << endl;
		}
		namespace some3 {
			void some3_func() {
				cout << ""Hi some3_func!"" << endl;
			}
		}
	}
}

using namespace some_namespace::some2::some3; // –ø–æ–¥–∫–ª—é—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω


void global_func() {
	cout << ""Hi global_func!"" << endl;
}


namespace other_namespace {
	void func3() {
		cout << ""Hi func3!"" << endl;
	}
	// –µ—â–µ –∫–∞–∫–∏–µ-—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã
}


int main() {
	global_func(); 
	some_namespace::func();
	some_namespace::func2();
	some_namespace::some2::some2_func(); 
	some3_func(); // –º–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
	other_namespace::func3();
}"
GQAcMGBc,Untitled,35657,C++,Tuesday 21st of May 2024 05:12:40 AM CDT,"
#include <iostream>

using namespace std;


void global_func() {
	cout << ""Hi global_func!"" << endl;
}

namespace some_namespace {
	void func() {
		cout << ""Hi func!"" << endl;
	}
	void func2() {
		cout << ""Hi func2!"" << endl;
	}
	namespace some2 {
		void some2_func() {
			cout << ""Hi some2_func!"" << endl;
		}
		namespace some3 {
			void some3_func() {
				cout << ""Hi some3_func!"" << endl;
			}
		}
	}
}

namespace other_namespace {
	void func3() {
		cout << ""Hi func3!"" << endl;
	}
	// –µ—â–µ –∫–∞–∫–∏–µ-—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã
}


int main() {
	global_func(); // –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
	some_namespace::func();
	some_namespace::func2();
	some_namespace::some2::some2_func(); // –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω
	some_namespace::some2::some3::some3_func(); // –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω
	//some_namespace::some2_func(); // —Ç–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
	other_namespace::func3();
}"
pC87AkMW,Untitled,35657,C++,Tuesday 21st of May 2024 05:11:56 AM CDT,"
#include <iostream>

using namespace std;

namespace some_namespace { // –æ–±—ä—è–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –≤ –∫–∞–∫–æ–º-—Ç–æ –∏–∑ –ø–æ–¥–∫–ª—é—á–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤)
	void func() {
		cout << ""Hi func!"" << endl;
	}
	void func2() {
		cout << ""Hi func2!"" << endl;
	}
	// –µ—â–µ –∫–∞–∫–∏–µ-—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã
}

using namespace some_namespace; // –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–º–µ–Ω–∞ some_namespace –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω


void global_func() {
	cout << ""Hi global_func!"" << endl;
}

namespace other_namespace {
	void func3() {
		cout << ""Hi func3!"" << endl;
	}
	// –µ—â–µ –∫–∞–∫–∏–µ-—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã
}


int main() {
	global_func(); 
	func(); // —Ç–µ–ø–µ—Ä—å func –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Ç—Å–≤–∞ –∏–º–µ–Ω
	func2(); // –∏ func2 —Ç–æ–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞
	other_namespace::func3(); // –∞ func3 –Ω–µ—Ç
}"
mdZJ7T6d,–ü—Ä–∞–∫—Ç–∏–∫–∞ (–∑–∞–≤–¥–∞–Ω–Ω—è 8),Lavig,Python,Tuesday 21st of May 2024 05:09:16 AM CDT,"sentence = input(""\033[92;1m–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å-—è–∫–µ —Ä–µ—á–µ–Ω–Ω—è: \033[0m"")
print(""\033[1m\033[96m–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–æ–ª—ñ–≤ —É —Ä–µ—á–µ–Ω–Ω—ñ ‚Äì\033[97m"", len(sentence), ""\033[0m"")"
uEhFBBYb,–ü—Ä–∞–∫—Ç–∏–∫–∞ (–∑–∞–≤–¥–∞–Ω–Ω—è 7),Lavig,Python,Tuesday 21st of May 2024 05:07:56 AM CDT,"while True:
    try:
        number = float((input(""\033[1m\033[33m–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å-—è–∫–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–µ –ø'—è—Ç–∏–∑–Ω–∞—á–Ω–µ —á–∏—Å–ª–æ: \033[0m"")))
    except:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    if number < 0:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ñ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    if number.is_integer() == True:
        number = int(number)
    else:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ñ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    number = str(number)
    length = len(number)
    if length != 5:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –ø'—è—Ç–∏–∑–Ω–∞—á–Ω—ñ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    break
number = int(number)
print(""\033[1m\033[95m–ü–µ—Ä—à–∞ —Ü–∏—Ñ—Ä–∞ —á–∏—Å–ª–∞ ‚Äì\033[97m"", number // 10000, ""\033[0m"")
print(""\033[92;1m–î—Ä—É–≥–∞ —Ü–∏—Ñ—Ä–∞ —á–∏—Å–ª–∞ ‚Äì\033[97m"", number % 10000 // 1000, ""\033[0m"")
print(""\033[1m\033[96m–¢—Ä–µ—Ç—è —Ü–∏—Ñ—Ä–∞ —á–∏—Å–ª–∞ ‚Äì\033[97m"", number % 1000 // 100, ""\033[0m"")
print(""\033[1m\033[33m–ß–µ—Ç–≤–µ—Ä—Ç–∞ —Ü–∏—Ñ—Ä–∞ —á–∏—Å–ª–∞ ‚Äì\033[97m"", number % 100 // 10, ""\033[0m"")
print(""\033[1m\033[95m–ü'—è—Ç–∞ —Ü–∏—Ñ—Ä–∞ —á–∏—Å–ª–∞ ‚Äì\033[97m"", number % 10 // 1, ""\033[0m"")"
7H8YfqAJ,Untitled,b_gandurov,C#,Tuesday 21st of May 2024 05:06:32 AM CDT,"using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

class Program
{
    static void Main()
    {
        var items = new SortedDictionary<string, Tuple<double, string>>();
        var itemsByType = new Dictionary<string, SortedSet<string>>();
        var itemsByPrice = new SortedDictionary<double, SortedSet<string>>();

        while (true)
        {
            string input = Console.ReadLine();
            if (input == ""end"")
            {
                break;
            }

            var inputElements = input.Split();
            var command = inputElements[0];

            switch (command)
            {
                case ""add"":
                    string name = inputElements[1];
                    double price = double.Parse(inputElements[2], CultureInfo.InvariantCulture);
                    string itemType = inputElements[3];
                    if (items.ContainsKey(name))
                    {
                        Console.WriteLine($""Error: Item {name} already exists"");
                    }
                    else
                    {
                        items[name] = Tuple.Create(price, itemType);
                        if (!itemsByType.ContainsKey(itemType))
                        {
                            itemsByType[itemType] = new SortedSet<string>();
                        }
                        itemsByType[itemType].Add(name);

                        if (!itemsByPrice.ContainsKey(price))
                        {
                            itemsByPrice[price] = new SortedSet<string>();
                        }
                        itemsByPrice[price].Add(name);

                        Console.WriteLine($""Ok: Item {name} added successfully"");
                    }
                    break;

                case ""filter"":
                    var filterType = inputElements[2];
                    if (filterType == ""type"")
                    {
                        FilterByType(inputElements[3], items, itemsByType);
                    }
                    else if (filterType == ""price"")
                    {
                        if (inputElements.Length == 7)
                        {
                            double minPrice = double.Parse(inputElements[4], CultureInfo.InvariantCulture);
                            double maxPrice = double.Parse(inputElements[6], CultureInfo.InvariantCulture);
                            FilterByPriceRange(minPrice, maxPrice, items, itemsByPrice);
                        }
                        else if (inputElements[3] == ""from"")
                        {
                            double minPrice = double.Parse(inputElements[4], CultureInfo.InvariantCulture);
                            FilterByPriceFrom(minPrice, items, itemsByPrice);
                        }
                        else if (inputElements[3] == ""to"")
                        {
                            double maxPrice = double.Parse(inputElements[4], CultureInfo.InvariantCulture);
                            FilterByPriceTo(maxPrice, items, itemsByPrice);
                        }
                    }
                    break;
            }
        }
    }

    static void FilterByType(string itemType, SortedDictionary<string, Tuple<double, string>> items, Dictionary<string, SortedSet<string>> itemsByType)
    {
        if (!itemsByType.ContainsKey(itemType))
        {
            Console.WriteLine($""Error: Type {itemType} does not exist"");
            return;
        }

        var filteredItems = itemsByType[itemType]
            .Select(name => new { Name = name, Item = items[name] })
            .OrderBy(price => price.Item.Item1)
            .ThenBy(name => name.Name)
            .ThenBy(type => type.Item.Item2)
            .Take(10)
            .Select(element => $""{element.Name}({element.Item.Item1.ToString(""F2"", CultureInfo.InvariantCulture)})"")
            .ToList();

        PrintFilteredItems(filteredItems);
    }

    static void FilterByPriceRange(double minPrice, double maxPrice, SortedDictionary<string, Tuple<double, string>> items, SortedDictionary<double, SortedSet<string>> itemsByPrice)
    {
        var filteredItems = itemsByPrice
            .Where(kv => kv.Key >= minPrice && kv.Key <= maxPrice)
            .SelectMany(kv => kv.Value.Select(name => new { Name = name, Item = items[name] }))
            .OrderBy(price => price.Item.Item1)
            .ThenBy(name => name.Name)
            .ThenBy(type => type.Item.Item2)
            .Take(10)
            .Select(element => $""{element.Name}({element.Item.Item1.ToString(""F2"", CultureInfo.InvariantCulture)})"")
            .ToList();

        PrintFilteredItems(filteredItems);
    }

    static void FilterByPriceFrom(double minPrice, SortedDictionary<string, Tuple<double, string>> items, SortedDictionary<double, SortedSet<string>> itemsByPrice)
    {
        var filteredItems = itemsByPrice
            .Where(kv => kv.Key >= minPrice)
            .SelectMany(kv => kv.Value.Select(name => new { Name = name, Item = items[name] }))
            .OrderBy(price => price.Item.Item1)
            .ThenBy(name => name.Name)
            .ThenBy(type => type.Item.Item2)
            .Take(10)
            .Select(element => $""{element.Name}({element.Item.Item1.ToString(""F2"", CultureInfo.InvariantCulture)})"")
            .ToList();

        PrintFilteredItems(filteredItems);
    }

    static void FilterByPriceTo(double maxPrice, SortedDictionary<string, Tuple<double, string>> items, SortedDictionary<double, SortedSet<string>> itemsByPrice)
    {
        var filteredItems = itemsByPrice
            .Where(kv => kv.Key <= maxPrice)
            .SelectMany(kv => kv.Value.Select(name => new { Name = name, Item = items[name] }))
            .OrderBy(price => price.Item.Item1)
            .ThenBy(name => name.Name)
            .ThenBy(type => type.Item.Item2)
            .Take(10)
            .Select(element => $""{element.Name}({element.Item.Item1.ToString(""F2"", CultureInfo.InvariantCulture)})"")
            .ToList();

        PrintFilteredItems(filteredItems);
    }

    static void PrintFilteredItems(List<string> filteredItems)
    {
        if (filteredItems.Any())
        {
            Console.WriteLine($""Ok: {string.Join("", "", filteredItems)}"");
        }
        else
        {
            Console.WriteLine(""Ok: "");
        }
    }
}"
wzNFdXyV,–ü—Ä–∞–∫—Ç–∏–∫–∞ (–∑–∞–≤–¥–∞–Ω–Ω—è 6),Lavig,Python,Tuesday 21st of May 2024 05:02:18 AM CDT,"while True:
    try:
        number = float((input(""\033[1m\033[33m–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å-—è–∫–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–µ —Ç—Ä–∏—Ü–∏—Ñ—Ä–æ–≤–µ —á–∏—Å–ª–æ: \033[0m"")))
    except:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    if number < 0:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ñ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    if number.is_integer() == True:
        number = int(number)
    else:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ñ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    number = str(number)
    length = len(number)
    if length != 3:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ —Ç—Ä–∏—Ü–∏—Ñ—Ä–æ–≤—ñ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    break
print(""\033[1m\033[96m–°—É–º–∞ —Ü–∏—Ñ—Ä –≤–≤–µ–¥–µ–Ω–æ–≥–æ —á–∏—Å–ª–∞ -\033[1m\033[97m"", int(number[0]) + int(number[-1]) + int(number[-2]), ""\033[0m"")"
VnHR2yfC,Soal3_Stack_Array,remshixi,C++,Tuesday 21st of May 2024 05:01:21 AM CDT,"#include <iostream>
using namespace std;
 
int first = -1;
 
/* Fungsi push, menambahkan data pada index 0 */
void push(int size, int input, string arr[])
{
    int t;
    if (input > size-first)
    {
        cout << ""Jumlah data yang ingin dimasukkan melebihi kapasitas stack."" << endl;
        cin.ignore();
        return;
    }
 
    if (arr[0] == """") // ketika arrat masih kosong, buat ngawali nilai fisrt
    {
        cout << ""Data ke-1: "";
        getline(cin >> ws, arr[0]);
        input--;
        first++;
    }
    
    if (first == 0) // ketika array masih berisi 1, masukkan data ke-2
    {
        arr[first + 1] = arr[first];
        cout << ""Data ke-2: "";
        getline(cin >> ws, arr[0]);
        input--;
        first++;
    }
 
    t = first + 2;
    while (first != 0 && input > 0) // ketika array sudah berisi lebih dari 2, masukkan data ke-3 dst
    {
        arr [first + 1] = arr [first];
        first++;
        for (int i = 1; i < first; i++) // loop geser data ke kanan. misal: data ke-2 jadi data ke-3
        {
            arr[first-i] = arr[first-(i+1)];
        }
        cout << ""Data ke-"" << t << "": "";
        getline(cin >> ws, arr[0]); // bagian input data baru di index 0
        t++;
        input--;
    }
    cout << ""Data berhasil dimasukkan."" << endl;
}
 
/* Fungsi pop, mengembalikan data pada index 0 */
string pop(string arr[])
{
    string item;
    if (arr[0] == """")
    {
        return ""Stack kosong."";
    }
    item = arr[0];
    if (first == 0) // ketika array berisi 1
    {
        arr[first--] = """";
        return ""Data yang di-pop: "" + item;
    }
    for (int i = 0; i < first; i++) // ketika array berisi lebih dari 1
    {
        arr[i] = arr[i + 1]; // geser data ke kiri. misal: data ke-3 jadi data ke-2
    }
    arr[first--] = """"; // kosongkan data paling kanan dan nilai first dikurangi 1
    return ""Data yang di-pop: "" + item;
}
 
/* Fungsi searchIndex, mencari data pada index tertentu */
void searchIndex(int index, int size, string arr[])
{
    if (index < 0 || index > size)
    {
        cout << ""Index "" << index << "" tidak valid. Input antara 0 - "" << size << endl;
        return;
    }
 
    if (arr[index] == """") // ketika data pada index yang dicari kosong
    {
        cout << ""Data pada index ke-"" << index << "" tidak ada."" << endl;
    }
    else // ketika data pada index yang dicari ada
    {
        cout << ""Data pada index ke-"" << index << "" adalah: "" << arr[index] << endl;
    }
}
 
/* Fungsi searchItem, mencari data pada array */
void searchItem(string item, string arr[])
{
    for (int i = 0; i <= first; i++) 
    {
        if (arr[i] == item) 
        {
            cout << ""Data '"" << item << ""' ditemukan pada index ke-"" << i << endl;
            return;
        }
    }
    cout << ""Data '"" << item << ""' tidak ditemukan."" << endl;
}
 
/* Fungsi printAll, menampilkan semua data dalam array */
void printAll(int size, string arr[])
{
    cout << ""Jumlah data dalam Stack: "" << first+1;
    if (first+1 == size)
    {
        cout << "" (Stack penuh)"" << endl;
    }
    else
    {
        if (arr[0] == """")
        {
            cout << "" (Stack kosong)"" << endl;
            return;
        }
        cout << "" (Stack belum penuh dan bisa diisi "" << size - (first+1) << "" data lagi.)"" << endl;
    }
    cout << ""Data dalam Stack:"" << endl;
    for (int i = 0; i <= first; i++)
    {
        if (i == 0)
        {
            cout << ""|\t"" << arr[i] << ""\t|  <<---- TOP"" << endl
                 << ""----------------"" << endl;
        }
        else
        {
            cout << ""|\t"" << arr[i] << ""\t|"" << endl
                 << ""----------------"" << endl;
        }
    }
}
 
int main()
{
    int input, idx, size;
    string item;
    char choice;
 
    system(""cls"");
 
    cout << ""Nama: Fairuz Andriansyah\n""
         << ""NIM : 225150307111015\n\n"";
    cout << ""Program Stack menggunakan Array\n""
         << ""=====================================\n"";
 
    cout << ""Masukkan ukuran stack: "";
    cin >> size;
 
    string arr[size];
 
    menu:
    system(""cls"");
    cout << ""Nama: Fairuz Andriansyah\n""
         << ""NIM : 225150307111015\n\n"";
    cout << ""Program Stack menggunakan Array\n""
         << ""=====================================\n"";
 
    cout << ""Ukuran stack: "" << size << endl
         << ""Jumlah data yang masih bisa dimasukkan: "" << size - (first+1) << endl
         << endl;
    cout << ""Menu:\n""
         << ""1. Push Data\n""
         << ""2. Pop Data\n""
         << ""3. Search by Index\n""
         << ""4. Search by Data\n""
         << ""5. Print All Data\n""
         << ""0. Exit\n""
         << ""Pilihan Anda (1/2/.../0): "";
    cin >> choice;
    cout << endl;
 
    switch (choice)
    {
    case '1': // Push Data
        if (arr[size - 1] != """")
        {
            cout << ""Stack penuh."" << endl;
            cin.ignore();
        }
        else
        {
            cout << ""Masukkan jumlah data yang ingin dimasukkan: "";
            cin >> input;
            push(size - 1, input, arr);
        }
        cout << ""\nTekan Enter untuk kembali ke menu..."";
        cin.get();
        goto menu;
        break;
 
    case '2': // Pop Data
        cout << pop(arr) << endl;
        cout << ""\nTekan Enter untuk kembali ke menu..."";
        cin.ignore();
        cin.get();
        goto menu;
        break;
 
    case '3': // Search by Index
        if (arr[0] == """")
        {
            cout << ""Stack kosong."" << endl;
        }
        else
        {
            cout << ""Masukkan index yang ingin dicari: ""; // input index (mulai dari 0)
            cin >> idx;
            searchIndex(idx, size - 1, arr);
        }
        cout << ""\nTekan Enter untuk kembali ke menu..."";
        cin.ignore();
        cin.get();
        goto menu;
        break;
 
    case '4': // Search by Item
        if (arr[0] == """")
        {
            cout << ""Stack kosong."" << endl;
            cin.ignore();
        }
        else
        {
            cout << ""Masukkan data yang ingin dicari: ""; // input item yang ingin dicari (string)
            getline(cin >> ws, item);
            searchItem(item, arr);
        }
        cout << ""\nTekan Enter untuk kembali ke menu..."";
        cin.get();
        goto menu;
        break;
 
    case '5': // Print All Data
        printAll(size, arr);
        cout << ""\nTekan Enter untuk kembali ke menu..."";
        cin.ignore();
        cin.get();
        goto menu;
        break;
    case '0': // Exit
        cout << ""tks."" << endl;
        break;
    default: // Invalid Input
        cout << ""Pilihan tidak valid."" << endl;
        cout << ""Tekan Enter untuk kembali ke menu..."";
        cin.ignore();
        cin.get();
        goto menu;
        break;
    }
 
    return 0;
}"
y1xRcpTW,–ü—Ä–∞–∫—Ç–∏–∫–∞ (–∑–∞–≤–¥–∞–Ω–Ω—è 5),Lavig,Python,Tuesday 21st of May 2024 05:01:08 AM CDT,"while True:
    try:
        first_number = (input(""\033[1m\033[33m–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à–µ —á–∏—Å–ª–æ: \033[0m""))
        second_number = (input(""\033[1m\033[95m–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–µ —á–∏—Å–ª–æ: \033[0m""))
        third_number = (input(""\033[92;1m–í–≤–µ–¥—ñ—Ç—å —Ç—Ä–µ—Ç—î —á–∏—Å–ª–æ: \033[0m""))
        float(first_number)
        float(second_number)
        float(third_number)
        break
    except:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
first_number = float(first_number)
second_number = float(second_number)
third_number = float(third_number)
if first_number == second_number or first_number == third_number or second_number == third_number:
    first_number += 5
    second_number += 5
    third_number += 5
    if first_number.is_integer() == True:
        first_number = int(first_number)
    if second_number.is_integer() == True:
        second_number = int(second_number)
    if third_number.is_integer() == True:
        third_number = int(third_number)
    print(""\033[1m\033[96m–ü–µ—Ä—à–µ —á–∏—Å–ª–æ –ø—ñ—Å–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –Ω–∞ 5 -\033[97m"", first_number, ""\033[0m"")
    print(""\033[1m\033[33m–î—Ä—É–≥–µ —á–∏—Å–ª–æ –ø—ñ—Å–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –Ω–∞ 5 -\033[97m"", second_number, ""\033[0m"")
    print(""\033[1m\033[95m–¢—Ä–µ—Ç—î —á–∏—Å–ª–æ –ø—ñ—Å–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –Ω–∞ 5 -\033[97m"", third_number, ""\033[0m"")
else:
    print(""\033[1m\033[96m–°–µ—Ä–µ–¥ –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö —á–∏—Å–µ–ª —Ä—ñ–≤–Ω–∏—Ö –Ω–µ–º–∞—î\033[0m"")"
f83S8t4W,–ü—Ä–∞–∫—Ç–∏–∫–∞ (–∑–∞–≤–¥–∞–Ω–Ω—è 4),Lavig,Python,Tuesday 21st of May 2024 04:56:46 AM CDT,"import math
while True:
    try:
        side1 = input(""\033[1m\033[33m–í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ (—Å–º): \033[0m"")
        side2 = input(""\033[1m\033[95m–í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –¥—Ä—É–≥–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ (—Å–º): \033[0m"")
        side3 = input(""\033[1m\033[92m–í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É —Ç—Ä–µ—Ç—å–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏ (—Å–º): \033[0m"")
        float(side1)
        float(side2)
        float(side3)
    except:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    side1 = float(side1)
    side2 = float(side2)
    side3 = float(side3)
    if side1 < 0 or side2 < 0 or side3 < 0:
        print(""\033[1m\033[31m–°—Ç–æ—Ä–æ–Ω–∏ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    if side1 == 0 or side2 == 0 or side3 == 0:
        print(""\033[1m\033[31m–°—Ç–æ—Ä–æ–Ω–∏ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞ –Ω–µ –º–æ–∂—É—Ç—å –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –Ω—É–ª—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    if side1 + side2 <= side3 or side1 + side3 <= side2 or side2 + side3 <= side1:
        print(""\033[1m\033[31m–¢—Ä–∏–∫—É—Ç–Ω–∏–∫ —ñ–∑ —Ç–∞–∫–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    if math.sqrt(side1**2 + side2**2) == side3:
        print(""\033[1m\033[96m–ó–∞–¥–∞–Ω–∏–π —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫ —î –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–º\033[0m"")
    elif math.sqrt(side2**2 + side3**2) == side1:
        print(""\033[1m\033[96m–ó–∞–¥–∞–Ω–∏–π —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫ —î –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–º\033[0m"")
    elif math.sqrt(side1**2 + side3**2) == side2:
        print(""\033[1m\033[96m–ó–∞–¥–∞–Ω–∏–π —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫ —î –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–º\033[0m"")
    else:
        print(""\033[1m\033[96m–ó–∞–¥–∞–Ω–∏–π —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫ –Ω–µ —î –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–º\033[0m"")
    break"
3FkvXUQv,–ü—Ä–∞–∫—Ç–∏–∫–∞ (–∑–∞–≤–¥–∞–Ω–Ω—è 3),Lavig,Python,Tuesday 21st of May 2024 04:55:11 AM CDT,"while True:
    try:
        first_number = (input(""\033[1m\033[95m–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à–µ —á–∏—Å–ª–æ: \033[0m""))
        second_number = (input(""\033[92;1m–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–µ —á–∏—Å–ª–æ: \033[0m""))
        float(first_number)
        float(second_number)
        break
    except:
        print(""\033[1m\033[31m–í–≤–æ–¥–∏—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
if float(first_number) > float(second_number):
    print(""\033[1m\033[96m–ü–µ—Ä—à–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ –∑–∞ –¥—Ä—É–≥–µ\033[0m"")
elif float(first_number) < float(second_number):
    print(""\033[1m\033[96m–ü–µ—Ä—à–µ —á–∏—Å–ª–æ –º–µ–Ω—à–µ –∑–∞ –¥—Ä—É–≥–µ\033[0m"")
elif float(first_number) == float(second_number):
    print(""\033[1m\033[96m–ü–µ—Ä—à–µ —á–∏—Å–ª–æ –¥–æ—Ä—ñ–≤–Ω—é—î –¥—Ä—É–≥–æ–º—É\033[0m"")"
kGphABWE,–ü—Ä–∞–∫—Ç–∏–∫–∞ (–∑–∞–≤–¥–∞–Ω–Ω—è 1),Lavig,Python,Tuesday 21st of May 2024 04:44:05 AM CDT,"while True:
    letter = input(""\033[92;1m–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å-—è–∫—É –ª—ñ—Ç–µ—Ä—É –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ: \033[0m"")
    clear_letter = letter.split()
    clear_letter = ''.join(clear_letter)
    length = len(clear_letter)
    if length != 1:
        print(""\033[1m\033[31m–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–æ–¥–∏—Ç–∏ –û–î–ù–£ –ª—ñ—Ç–µ—Ä—É –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    if clear_letter.isalpha() != True:
        print(""\033[1m\033[31m–ù–µ –º–æ–∂–Ω–∞ –≤–≤–æ–¥–∏—Ç–∏ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    if clear_letter.isupper() == True:
        print(""\033[1m\033[31m–ù–µ –º–æ–∂–Ω–∞ –≤–≤–æ–¥–∏—Ç–∏ –ª—ñ—Ç–µ—Ä—É —É –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!\033[0m"")
        continue
    break
big_letter = clear_letter.upper()
print(""\033[1m\033[95m–õ—ñ—Ç–µ—Ä–∞ —É –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ:\033[1m\033[97m"", big_letter, ""\033[0m"")"
01UPDLcN,Untitled,35657,C++,Tuesday 21st of May 2024 04:23:11 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <fstream>
using namespace std;

struct client {
    char name[40]; // –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
    char phone_number[20]; // –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    int client_id; // id –∫–ª–∏–µ–Ω—Ç–∞
    int personal_discount; // —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏
    int regular_customer; // –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å (–¥–∞ / –Ω–µ—Ç)
};

class client_base {

public:
    client_base() {

        ifstream fin;
        fin.open(""date.bin"", ios::binary);

        if (!fin.is_open()) {
            cout << ""–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"" << endl;
        }
        else {

            fin.read((char*)&clients_number, sizeof(int));
            fin.read((char*)&clients_base_size, sizeof(int));
            clients = new client[clients_base_size];
            fin.read((char*)clients, clients_number * sizeof(client));

            fin.close();
        }

    }

    void new_client(const char* name, const char* phone_number, const int client_id, const int personal_discount, const int regular_customer) {
        if (clients_number == clients_base_size) {
            client* temp = new client[clients_base_size * 2];
            for (int i = 0; i < clients_number; i++) {
                temp[i] = clients[i];
            }
            delete[] clients;
            clients = temp;
            clients_base_size *= 2;
        }
        strcpy(clients[clients_number].name, name);
        strcpy(clients[clients_number].phone_number, phone_number);
        clients[clients_number].client_id = client_id;
        clients[clients_number].personal_discount = personal_discount;
        clients[clients_number].regular_customer = regular_customer;
        clients_number++;
    }

    void del_client(const char* name) {
        for (int i = 0; i < clients_number; i++) {
            if (!strcmp(clients[i].name, name)) {
                for (int j = i; j < clients_number - 1; j++) {
                    clients[j] = clients[j + 1];
                }
                i--; // –Ω–∞ —Å–ª—É—á–∞–π –∏–¥—É—â–∏—Ö –ø–æ–¥—Ä—è–¥ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º (–∏–Ω–∞—á–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∫–∏–≤–∞–µ—Ç)
                clients_number--;
            }
        }

    }

    void find_client(const char* name) const {
        for (int i = 0; i < clients_number; i++) {
            if (!strcmp(clients[i].name, name)) {
                cout << clients[i].name << "": –Ω–æ–º–µ—Ä "" << clients[i].phone_number << "", id "" << clients[i].client_id << "", —Å–∫–∏–¥–∫–∞ "" << clients[i].personal_discount << "" %"";
                if (clients[i].regular_customer) {
                    cout << "", –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"";
                }
                cout << endl;
            }
        }
        cout << endl;
    }

    void show_all_clients() const {
        ifstream fin;
        fin.open(""date.bin"", ios::binary);
        char a[40];
        char b[40];
        int c, d, e;

        if (!fin.is_open()) {
            cout << ""–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"" << endl;
        }
        else {
            for (int i = 0; i < clients_number; i++) {
                fin.read(a, 40);
                fin.read(b, 40);
                fin.read((char*)&c, sizeof(int));
                fin.read((char*)&d, sizeof(int));
                fin.read((char*)&e, sizeof(int));

                cout << a << "" "" << b << "" "" << c << "" "" << d << "" "" << e << endl;
            }
            fin.close();
        }
    }

    void show_regular_clients() const {
        ifstream fin;
        fin.open(""date.bin"", ios::binary);
        char a[40];
        char b[40];
        int c, d, e;

        if (!fin.is_open()) {
            cout << ""–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"" << endl;
        }
        else {
            for (int i = 0; i < clients_number; i++) {
                fin.read(a, 40);
                fin.read(b, 40);
                fin.read((char*)&c, sizeof(int));
                fin.read((char*)&d, sizeof(int));
                fin.read((char*)&e, sizeof(int));
                if (e) {
                    cout << a << "" "" << b << "" "" << c << "" "" << d << "" "" << e << endl;
                }

            }
            fin.close();
        }
    }

    ~client_base() {
        ofstream fout;
        fout.open(""date.bin"", ios::binary);

        if (!fout.is_open()) {
            cout << ""–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"" << endl;
        }
        else {

            fout.write((char*)&clients_number, sizeof(int));
            fout.write((char*)&clients_base_size, sizeof(int));
            fout.write((char*)clients, clients_number * sizeof(client));

            fout.close();
        }
        delete[] clients;
    }


private:
    int clients_number; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
    int clients_base_size; // —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã
    client* clients; // –º–∞—Å—Å–∏–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
};

int main() {

    setlocale(LC_ALL, ""ru"");

    client_base my_base;
    my_base.new_client(""–∏–≤–∞–Ω"", ""+79111111111"", 1129, 10, 1);
    my_base.new_client(""–≤–∞—Å—è"", ""+79111111222"", 1130, 5, 0);
    my_base.new_client(""–æ–ª–µ–≥"", ""+79111111333"", 1131, 15, 1);
    my_base.new_client(""–º–∞—Ä–∏—è"", ""+79111111444"", 1132, 10, 0);
    my_base.new_client(""–≥–∞–ª—è"", ""+79111111555"", 1133, 20, 1);


}"
eyEdNzk2,How to order a Cyprus International University degree and transcript?,jf123123,Bash,Tuesday 21st of May 2024 04:22:14 AM CDT,"Our company is a professional fake degree supplier that provides novel diplomas, realistic diplomas, and high-quality certificates that can help you in your study, work, and daily life. We produce college diplomas, college degrees, transcripts and other documents. The certificate is of high quality and looks identical to the original. 

Contact us and we will provide you with a high quality alternative diploma and degree.

Website: https://www.degreemaker.com/ciu-degree/
Email: diplomacentersale@gmail.com 
WhatsApp: +86 19911539281
WeChat: +86 14779983878 
https://www.degreemaker.com

Buy fake Cyprus International University degree, How to order fake Cyprus International University diploma? Make Cyprus International University Academic transcript online, Where to purchase Cyprus International University degree certificate? buy fake diploma online, buy fake degree.
"
PGFdgyC3,Async refactor,moskalenco_a,JavaScript,Tuesday 21st of May 2024 03:46:55 AM CDT,"'use strict';

const API_EXCHANGE = {
  host: 'openexchangerates.org',
  path: 'api/latest.json?app_id=',
  key: '1f43ea96b1e343fe94333dd2b97a109d',
};

const DEFAULT_RETRY = 3;

const promiseRetry = async (promiseFactory, retry = DEFAULT_RETRY) => {
  console.log({ retry });
  const promise = promiseFactory();
  try {
    const res = await promise;
    return res;
  }
  catch {
    const attemptsLeft = retry - 1;
    if (attemptsLeft > 0)
      return promiseRetry(promiseFactory, attemptsLeft);
    throw new Error('Can not get data');
  }
}

const tryFetch = async (url, options) => {
  const resp = await fetch(url, options);
  if (!resp.ok)
    throw new Error('ok is false');
  return await resp.json();
}

const getRate = async (currency) => {
  // console.log({ currency, retry });
  const { host, path, key } = API_EXCHANGE;
  const url = `https://${host}/${path}${key}`;
  const data = await tryFetch(url);
  const rate = data.rates[currency];
  return rate;
};

const getTime = async () => {
  const url = 'http://worldtimeapi.org/api/timezone/Europe/Kyiv';
  const data = await tryFetch(url);
  const { datetime } = data;
  return new Date(datetime);
}

const main = async () => {
  try {
    const rate = await promiseRetry(() => getRate('UAH'));
    console.log({ rate });
    // const time = await promiseRetry(() => getTime());
    // console.log({ time });
  } catch (err) {
    console.error({ err });
  }
};

main();"
bWirLwbu,# tk_letters_fitdoku.py,here2share,Python,Tuesday 21st of May 2024 03:24:57 AM CDT,"# tk_letters_fitdoku.py -- zzz game test fails

import tkinter as tk
import random
import copy

size = 10
cell_size = 40

root = tk.Tk()
root.title(""tk_letters_fitdoku"")

canvas = tk.Canvas(root, width=size * cell_size, height=size * cell_size)
canvas.pack()

def plot(col, row):
	x1 = col * cell_size
	y1 = row * cell_size
	x2 = x1 + cell_size
	y2 = y1 + cell_size
	canvas.create_rectangle(x1, y1, x2, y2, fill=color, outline='black', tags=color)

def create_grid(size):
	for row in range(size):
		for col in range(size):
			plot(col, row)

def color_row():
	temp = copy.deepcopy(board)
	row, col = rows.pop(0)
	rows.append((row, col))
	for c in range(col, col+4):
		if board[row][c] != ' ':
			canvas.delete(color)
			return
		temp[row][c] = sss[len(colors)]
		plot(c, row)
	board[:] = temp
	return True

def color_column():
	temp = copy.deepcopy(board)
	row, col = columns.pop(0)
	columns.append((row, col))
	for r in range(row, row+4):
		if board[r][col] != ' ':
			canvas.delete(color)
			return
		temp[r][col] = sss[len(colors)]
		plot(col, r)
	board[:] = temp
	return True

def restart_game(event):
	global run_game
	canvas.delete(""all"")
	run_game = 1

def write_success():
	for row in range(size):
		x = cell_size * 2.5
		y = row * cell_size + cell_size // 2
		canvas.create_text(x, y, text=""success"", font=('verdana', 21), fill='gray')

sss = 'abcdefghijklmnopqrstuvwxyz'
def test():
	for ttt in board:
		print(ttt)
	print()

root.bind(""<space>"", restart_game)
run_game = 1
while True:
	while run_game:
		color = 'white'
		create_grid(size)
		board = [[' '] * size for _ in range(size)]
		rows = [(i, j) for i in range(10) for j in range(6)]
		columns = [(i, j) for i in range(6) for j in range(10)]
		colors = 'red orange yellow lime aqua blue pink #d2b48c #bfbfbf magenta #cc99ff #e6ffb6'.split()
		random.shuffle(rows)
		random.shuffle(columns)
		stack = [] # to be used for backtracking

		while colors:
			color = colors.pop()
			while True:
				if color_row():
					break
			# test()
			canvas.update()
			color = colors.pop()
			while True:
				if color_column():
					break
			# test()
			canvas.update()
		run_game = 0
		write_success()
	canvas.update()"
pbT2u7t4,"Bashed Patch, 0.esp.html",HackerFinn,HTML,Tuesday 21st of May 2024 03:18:02 AM CDT,"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Strict//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"">
<!-- saved from url=(0105)file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html -->
<html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""en"" lang=""en""><head><meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
        
        <title>Bashed Patch, 0.esp</title>
        <style type=""text/css"">H1 { margin-top: 0in; margin-bottom: 0in; border-top: 1px solid #000000; border-bottom: 1px solid #000000; border-left: none; border-right: none; padding: 0.02in 0in; background: #c6c63c; font-family: ""Arial"", serif; font-size: 11pt; page-break-before: auto; page-break-after: auto }
H2 { margin-top: 0in; margin-bottom: 0in; border-top: 1px solid #000000; border-bottom: 1px solid #000000; border-left: none; border-right: none; padding: 0.02in 0in; background: #e6e64c; font-family: ""Arial"", serif; font-size: 9pt; page-break-before: auto; page-break-after: auto }
H3 { margin-top: 0in; margin-bottom: 0in; font-family: ""Arial"", serif; font-size: 9pt; font-style: normal; page-break-before: auto; page-break-after: auto }
H4 { margin-top: 0in; margin-bottom: 0in; font-family: ""Arial"", serif; font-style: italic; page-break-before: auto; page-break-after: auto }
P { margin-top: 0.01in; margin-bottom: 0.01in; font-family: ""Arial"", serif; font-size: 9pt; page-break-before: auto; page-break-after: auto }
P.empty {}
P.list-1 { margin-left: 0.15in; text-indent: -0.15in }
P.list-2 { margin-left: 0.3in; text-indent: -0.15in }
P.list-3 { margin-left: 0.45in; text-indent: -0.15in }
P.list-4 { margin-left: 0.6in; text-indent: -0.15in }
P.list-5 { margin-left: 0.75in; text-indent: -0.15in }
P.list-6 { margin-left: 1.00in; text-indent: -0.15in }
PRE { border: 1px solid; background: #FDF5E6; padding: 0.5em; margin-top: 0in; margin-bottom: 0in; margin-left: 0.25in}
CODE { background-color: #FDF5E6;}
BODY { background-color: #ffffcc; }
</style>
    </head>
    <body>
<h1><a id=""BashedPatch0esp"">Bashed Patch, 0.esp</a></h1>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#Overview"">Overview</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportActors"">Import Actors</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportActorsAIPackages"">Import Actors: AI Packages</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportActorsFaces"">Import Actors: Faces</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportActorsFactions"">Import Actors: Factions</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportActorsSpells"">Import Actors: Spells</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportCells"">Import Cells</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportEnchantmentStats"">Import Enchantment Stats</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportEnchantments"">Import Enchantments</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportGraphics"">Import Graphics</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportInventory"">Import Inventory</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportNames"">Import Names</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportRaces"">Import Races</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportRelations"">Import Relations</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportScripts"">Import Scripts</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportSounds"">Import Sounds</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportSpellStats"">Import Spell Stats</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportText"">Import Text</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#ImportStats"">Import Stats</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#TweakAssorted"">Tweak Assorted</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#TweakSettings"">Tweak Settings</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#NPCChecker"">NPC Checker</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#RaceChecker"">Race Checker</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#SEWorldTests"">SEWorld Tests</a></p>
<p class=""list-1"">‚Ä¢&nbsp; <a href=""file:///C:/Program%20Files%20%28x86%29/Bethesda%20Softworks/Oblivion/Data/Docs/Bashed%20Patch%2C%200.html#LeveledLists"">Leveled Lists</a></p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""Overview"">Overview</a></h1>
<p class=""empty"">&nbsp;</p>
<h3><a id=""DateTime"">Date/Time</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Tue May 21 09:42:37 2024</p>
<p class=""list-1"">‚Ä¢&nbsp; Elapsed Time: 0:02:18.783</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ActivePlugins"">Active Plugins</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; 00 Oblivion.esm</p>
<p class=""list-1"">‚Ä¢&nbsp; 01 Better Cities Resources.esm  [Version 6.4.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; 02 All Natural Base.esm  [Version 1.38]</p>
<p class=""list-1"">‚Ä¢&nbsp; 03 Unofficial Oblivion Patch.esp  [Version 2]</p>
<p class=""list-1"">‚Ä¢&nbsp; ++ Oblivion Citadel Door Fix.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 04 UOP Vampire Aging &amp; Face Fix.esp  [Version 1.0.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; 05 DLCShiveringIsles.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 06 Better Cities .esp  [Version 6.4.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; 07 Unofficial Shivering Isles Patch.esp  [Version 270]</p>
<p class=""list-1"">‚Ä¢&nbsp; 08 DLCHorseArmor.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 09 DLCHorseArmor - Unofficial Patch.esp  [Version 1.0.9]</p>
<p class=""list-1"">‚Ä¢&nbsp; 0A DLCOrrery.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 0B DLCOrrery - Unofficial Patch.esp  [Version 1.0.8]</p>
<p class=""list-1"">‚Ä¢&nbsp; 0C DLCVileLair.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 0D DLCVileLair - Unofficial Patch.esp  [Version 1.0.11]</p>
<p class=""list-1"">‚Ä¢&nbsp; 0E DLCMehrunesRazor.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 0F DLCMehrunesRazor - Unofficial Patch.esp  [Version 1.0.9]</p>
<p class=""list-1"">‚Ä¢&nbsp; 10 DLCSpellTomes.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; ++ DLCSpellTomes - Unofficial Patch.esp  [Version 1.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 11 DLCThievesDen.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 12 DLCThievesDen - Unofficial Patch.esp  [Version 1.0.16]</p>
<p class=""list-1"">‚Ä¢&nbsp; 13 DLCThievesDen - Unofficial Patch - SSSB.esp  [Version 1.0.14]</p>
<p class=""list-1"">‚Ä¢&nbsp; 14 DLCBattlehornCastle.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 15 DLCBattlehornCastle - Unofficial Patch.esp  [Version 1.0.12]</p>
<p class=""list-1"">‚Ä¢&nbsp; 16 DLCFrostcrag.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 17 DLCFrostcrag - Unofficial Patch.esp  [Version 1.0.11]</p>
<p class=""list-1"">‚Ä¢&nbsp; 18 Knights.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 19 Knights - Unofficial Patch.esp  [Version 1.1.10]</p>
<p class=""list-1"">‚Ä¢&nbsp; 1A Thieves Arsenal.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 1B xulCorboloRiver.esp  [Version 1.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 1C Sounds of Cyrodiil.esp  [Version 1.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 1D OBSE-Storms &amp; Sound SI.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 1E All Natural.esp  [Version 1.38]</p>
<p class=""list-1"">‚Ä¢&nbsp; 1F Grass Overhaul.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 20 Steve - Thieves Guils HQ.esp  [Version 1.2-SF]</p>
<p class=""list-1"">‚Ä¢&nbsp; 21 Immersive Interiors.esp  [Version 0.8.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 22 Better Cities Chorrol - Immersive Interiors.esp  [Version 6.1.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; ++ Sounds of Cyrodiil - UOP.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 23 VaultsofCyrodiil.esp  [Version 6.0.10]</p>
<p class=""list-1"">‚Ä¢&nbsp; ++ Better Cities Leyawiin - Unofficial Oblivion Patch.esp  [Version 6.2.2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 24 WindowLightingSystem.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 25 lBookworm.esp  [Version 1.1.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 26 Better Enemy Health.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 27 Enhanced Hotkeys.esp  [Version 2.3.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 28 De-Nock Arrows.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 29 Simple Primary Needs.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 2A Alternative Start by Robert Evrae.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 2B Simple Horse Utilities.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 2C LootMenu.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 2D Consistent Beggar Voices.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; ++ Real Lava 1.3.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 2E Alluring Potion Bottles v3.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 2F BetterMenuControls.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 30 DarNifiedUI Config Addon.esp  [Version 19]</p>
<p class=""list-1"">‚Ä¢&nbsp; 31 Oblivion_Character_Overhaul.esp  [Version 2.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; ++ OCOv2 Beast Races Enhanced.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 32 All Natural - SI.esp  [Version 1.38]</p>
<p class=""list-1"">‚Ä¢&nbsp; 33 Dynamic Map.esp  [Version 2.1.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 34 Immersive Interiors - Landscape Addon.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; ++ Enhanced Water v2.0 HD - SI Addon.esp  [Version 0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 35 Enhanced Water v2.0 HD.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 36 CapesandCloaks.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; ++ Alternative Start Unofficial Patch.esp  [Version 1.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 37 StockClothingArmor-forExnems.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 38 ImprovedSigns.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 39 LINK.esp  [Version 1.4]</p>
<p class=""list-1"">‚Ä¢&nbsp; 3A Unique Landscapes.esp  [Version 1.Dummy]</p>
<p class=""list-1"">‚Ä¢&nbsp; 3B xuldarkforest.esp  [Version 2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 3C xulStendarrValley.esp  [Version 2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 3D xulTheHeath.esp  [Version 2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 3E xulEntiusGorge.esp  [Version 2.0.2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 3F xulFallenleafEverglade.esp  [Version 2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 40 xulColovianHighlands_EV.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 41 xulBeachesOfCyrodiilLostCoast.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 42 xulBravilBarrowfields.esp  [Version 2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 43 xulLushWoodlands.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 44 xulAncientYews.esp  [Version 2.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 45 xulAncientRedwoods.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 46 xulCloudtopMountains.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 47 xulArriusCreek.esp  [Version 2.0.2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 48 xulPatch_AY_AC.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 49 xulRollingHills_EV.esp  [Version 2.0.2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 4A xulPantherRiver.esp  [Version 2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 4B xulRiverEthe.esp  [Version 2.0.2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 4C xulBrenaRiverRavine.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 4D xulImperialIsle.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 4E Grass Overhaul_xUL_Imperial_Isle_patch.esp  [Version 1.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; 4F xulBlackwoodForest.esp  [Version 2.0.2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 50 xulCheydinhalFalls.esp  [Version 2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 51 xulAspenWood.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 52 xulSnowdale.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 53 xulCliffsOfAnvil.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 54 xulSilverfishRiverValley.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 55 xulJerallGlacier.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; 56 xulTheEasternPeaks.esp  [Version 2.0.3]</p>
<p class=""list-1"">‚Ä¢&nbsp; 57 xulSkingradOutskirts.esp  [Version 2.0.2]</p>
<p class=""list-1"">‚Ä¢&nbsp; 58 Better Cities Full.esp  [Version 6.4.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; 59 Better Cities - All Natural.esp  [Version 6.1.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; 5A Better Cities - Vanilla Ferns.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; 5B xulChorrolHinterland-BC6.esp  [Version 2.0.1]</p>
<p class=""list-1"">‚Ä¢&nbsp; ++ Better Cities - Alternative Start Arrive by Ship.esp  [Version 6.2.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; 5C Better Cities Chorrol - Knights of the Nine.esp  [Version 6.1.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; 5D Better Cities - IC Imperial Isle.esp  [Version 6.4.0]</p>
<p class=""list-1"">‚Ä¢&nbsp; 5E Better Imperial City.esp  [Version 6.4.0]</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportActors"">Import Actors</a></h1>
<h3><a id=""SourceMods"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCHorseArmor.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCHorseArmor - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCVileLair - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCMehrunesRazor.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCSpellTomes.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCBattlehornCastle - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCFrostcrag - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Simple Horse Utilities.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion_Character_Overhaul.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ModifiedRecords"">Modified Records</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Modified NPC_ Records: 248</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportActorsAIPackages"">Import Actors: AI Packages</a></h1>
<h3><a id=""SourceMods1"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCHorseArmor.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCHorseArmor - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCOrrery.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCVileLair - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCBattlehornCastle - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCFrostcrag - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Cities Full.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Imperial City.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""AIPackageListsChanged132"">AI Package Lists Changed: 132</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion.esm: 132</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportActorsFaces"">Import Actors: Faces</a></h1>
<h3><a id=""SourceMods2"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCVileLair - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCBattlehornCastle - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion_Character_Overhaul.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""FacesPatched"">Faces Patched</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Modified NPC_ Records: 284</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportActorsFactions"">Import Actors: Factions</a></h1>
<h3><a id=""SourceModsFiles"">Source Mods/Files</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCMehrunesRazor.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCFrostcrag.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Cities Full.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""RefactionedActors"">Refactioned Actors</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Modified NPC_ Records: 30</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportActorsSpells"">Import Actors: Spells</a></h1>
<h3><a id=""SourceMods3"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCFrostcrag - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Cities Full.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Imperial City.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""SpellListsChanged11"">Spell Lists Changed: 11</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion.esm:  11</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportCells"">Import Cells</a></h1>
<h3><a id=""SourceMods4"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion Citadel Door Fix.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCHorseArmor - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCOrrery.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCVileLair - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCMehrunesRazor - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCBattlehornCastle - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCFrostcrag.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCFrostcrag - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulCorboloRiver.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; All Natural.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Immersive Interiors.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; All Natural - SI.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Enhanced Water v2.0 HD.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Enhanced Water v2.0 ND.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unique Landscapes.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xuldarkforest.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulTheHeath.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulEntiusGorge.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulFallenleafEverglade.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulBeachesOfCyrodiilLostCoast.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulBravilBarrowfields.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulAncientYews.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulAncientRedwoods.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulCloudtopMountains.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulArriusCreek.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulRiverEthe.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulBrenaRiverRavine.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulImperialIsle.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulBlackwoodForest.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulCheydinhalFalls.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulAspenWood.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulSnowdale.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulCliffsOfAnvil.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulTheEasternPeaks.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulSkingradOutskirts.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Cities Full.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Cities - All Natural.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; xulChorrolHinterland-BC6.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Imperial City.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""CellsPatched754"">Cells Patched: 754</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion.esm: 754</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportEnchantmentStats"">Import Enchantment Stats</a></h1>
<h3><a id=""SourceMods5"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ModifiedRecords1"">Modified Records</a></h3>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportEnchantments"">Import Enchantments</a></h1>
<h3><a id=""SourceMods6"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ModifiedRecords2"">Modified Records</a></h3>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportGraphics"">Import Graphics</a></h1>
<h3><a id=""SourceMods7"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion Citadel Door Fix.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCOrrery - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCVileLair - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCMehrunesRazor - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCBattlehornCastle - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; All Natural.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Alluring Wine Bottles.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Simple Horse Utilities.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Alluring Potion Bottles v3.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion_Character_Overhaul.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; All Natural - SI.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; StockClothingArmor-forExnems.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Cities Full.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Imperial City.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ModifiedRecords3"">Modified Records</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Modified ALCH Records: 12</p>
<p class=""list-1"">‚Ä¢&nbsp; Modified ARMO Records: 4</p>
<p class=""list-1"">‚Ä¢&nbsp; Modified CLOT Records: 1</p>
<p class=""list-1"">‚Ä¢&nbsp; Modified MGEF Records: 1</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportInventory"">Import Inventory</a></h1>
<h3><a id=""SourceMods8"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCMehrunesRazor - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Alternative Start by Robert Evrae.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Cities Full.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Imperial City.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""InventoriesChanged37"">Inventories Changed: 37</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion.esm:  37</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportNames"">Import Names</a></h1>
<h3><a id=""SourceModsFiles1"">Source Mods/Files</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCBattlehornCastle - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion_Character_Overhaul.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Alternative Start Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Cities Full.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Imperial City.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""RenamedItems"">Renamed Items</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Modified ARMO Records: 1</p>
<p class=""list-1"">‚Ä¢&nbsp; Modified CLOT Records: 1</p>
<p class=""list-1"">‚Ä¢&nbsp; Modified NPC_ Records: 7</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportRaces"">Import Races</a></h1>
<h3><a id=""SourceMods9"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion_Character_Overhaul.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; OCOv2 Beast Races Enhanced.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ModifiedRecords4"">Modified Records</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Modified RACE Records: 2</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportRelations"">Import Relations</a></h1>
<h3><a id=""SourceMods10"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Alternative Start by Robert Evrae.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Alternative Start Unofficial Patch.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ModifiedFactions0"">Modified Factions: 0</a></h3>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportScripts"">Import Scripts</a></h1>
<h3><a id=""SourceMods10"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCHorseArmor.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCFrostcrag - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Cities Full.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Better Imperial City.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ModifiedRecords5"">Modified Records</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Modified LIGH Records: 20</p>
<p class=""list-1"">‚Ä¢&nbsp; Modified NPC_ Records: 10</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportSounds"">Import Sounds</a></h1>
<h3><a id=""SourceMods10"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCOrrery.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCVileLair.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCBattlehornCastle.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCFrostcrag.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCFrostcrag - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Sounds of Cyrodiil.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Improved Fires and Flames - Increased Sound.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ModifiedRecords6"">Modified Records</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Modified CREA Records: 1</p>
<p class=""list-1"">‚Ä¢&nbsp; Modified LIGH Records: 18</p>
<p class=""list-1"">‚Ä¢&nbsp; Modified SOUN Records: 5</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportSpellStats"">Import Spell Stats</a></h1>
<h3><a id=""SourceModsFiles2"">Source Mods/Files</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCVileLair - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCSpellTomes - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Alternative Start by Robert Evrae.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ModifiedRecords7"">Modified Records</a></h3>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportText"">Import Text</a></h1>
<h3><a id=""SourceMods10"">Source Mods</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCVileLair - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCMehrunesRazor - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCSpellTomes - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCBattlehornCastle - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ModifiedRecords8"">Modified Records</a></h3>
<p class=""empty"">&nbsp;</p>
<h1><a id=""ImportStats"">Import Stats</a></h1>
<h3><a id=""SourceModsFiles3"">Source Mods/Files</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCVileLair - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCBattlehornCastle - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp</p>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion_Character_Overhaul.esp</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""ImportedStats"">Imported Stats</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Modified ALCH Records: 3</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""TweakAssorted"">Tweak Assorted</a></h1>
<p class=""empty"">&nbsp;</p>
<h3><a id=""BowReachFix"">Bow Reach Fix</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Bows Fixed: 3</p>
  <p class=""list-2"">‚Ä¢&nbsp; Steve - Thieves Guils HQ.esp: 3</p>
  <p class=""empty"">&nbsp;</p>
<h3><a id=""DefaultIcons"">Default Icons</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Default Icons Set: 174</p>
  <p class=""list-2"">‚Ä¢&nbsp; Oblivion.esm: 113</p>
  <p class=""list-2"">‚Ä¢&nbsp; Better Cities Resources.esm: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; All Natural Base.esm: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; DLCHorseArmor.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; DLCMehrunesRazor.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; Knights.esp: 2</p>
  <p class=""list-2"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; Thieves Arsenal.esp: 43</p>
  <p class=""list-2"">‚Ä¢&nbsp; xulCorboloRiver.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; Steve - Thieves Guils HQ.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; Alternative Start by Robert Evrae.esp: 2</p>
  <p class=""list-2"">‚Ä¢&nbsp; LootMenu.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; Dynamic Map.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; LINK.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; xulColovianHighlands_EV.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; xulTheEasternPeaks.esp: 2</p>
  <p class=""list-2"">‚Ä¢&nbsp; xulSkingradOutskirts.esp: 1</p>
  <p class=""empty"">&nbsp;</p>
<h3><a id=""MagicScriptEffectSilencer"">Magic: Script Effect Silencer</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Script Effect Silenced.</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""NvidiaFogFix"">Nvidia Fog Fix</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Cells With Fog Tweaked To 0.0001: 333</p>
  <p class=""list-2"">‚Ä¢&nbsp; Oblivion.esm: 258</p>
  <p class=""list-2"">‚Ä¢&nbsp; DLCHorseArmor.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; DLCThievesDen.esp: 2</p>
  <p class=""list-2"">‚Ä¢&nbsp; DLCBattlehornCastle.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; Knights.esp: 3</p>
  <p class=""list-2"">‚Ä¢&nbsp; Thieves Arsenal.esp: 12</p>
  <p class=""list-2"">‚Ä¢&nbsp; Sounds of Cyrodiil.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; Steve - Thieves Guils HQ.esp: 43</p>
  <p class=""list-2"">‚Ä¢&nbsp; Immersive Interiors.esp: 11</p>
  <p class=""list-2"">‚Ä¢&nbsp; Alternative Start by Robert Evrae.esp: 1</p>
  <p class=""empty"">&nbsp;</p>
<h3><a id=""RightHandRings"">Right Hand Rings</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Rings Fixed: 57</p>
  <p class=""list-2"">‚Ä¢&nbsp; Oblivion.esm: 44</p>
  <p class=""list-2"">‚Ä¢&nbsp; Better Cities Resources.esm: 9</p>
  <p class=""list-2"">‚Ä¢&nbsp; DLCFrostcrag.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; Thieves Arsenal.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; DarNifiedUI Config Addon.esp: 1</p>
  <p class=""list-2"">‚Ä¢&nbsp; xulCliffsOfAnvil.esp: 1</p>
  <p class=""empty"">&nbsp;</p>
<h1><a id=""TweakSettings"">Tweak Settings</a></h1>
<p class=""list-1"">‚Ä¢&nbsp; UOP Vampire Aging And Face Fix</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""NPCChecker"">NPC Checker</a></h1>
<p class=""empty"">&nbsp;</p>
<h3><a id=""EyesHairAssignedforNPCs"">Eyes/Hair Assigned for NPCs</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Better Cities Resources.esm: 284</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCBattlehornCastle.esp: 8</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCMehrunesRazor.esp: 43</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCOrrery.esp: 3</p>
<p class=""list-1"">‚Ä¢&nbsp; Knights.esp: 24</p>
<p class=""list-1"">‚Ä¢&nbsp; Oblivion.esm: 956</p>
<p class=""list-1"">‚Ä¢&nbsp; Steve - Thieves Guils HQ.esp: 69</p>
<p class=""list-1"">‚Ä¢&nbsp; Thieves Arsenal.esp: 19</p>
<p class=""list-1"">‚Ä¢&nbsp; VaultsofCyrodiil.esp: 5</p>
<p class=""list-1"">‚Ä¢&nbsp; xulAspenWood.esp: 2</p>
<p class=""list-1"">‚Ä¢&nbsp; xulBeachesOfCyrodiilLostCoast.esp: 1</p>
<p class=""list-1"">‚Ä¢&nbsp; xulChorrolHinterland-BC6.esp: 3</p>
<p class=""list-1"">‚Ä¢&nbsp; xulSkingradOutskirts.esp: 5</p>
<p class=""list-1"">‚Ä¢&nbsp; xulTheEasternPeaks.esp: 21</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""RaceChecker"">Race Checker</a></h1>
<p class=""empty"">&nbsp;</p>
<h3><a id=""EyesHairSorted"">Eyes/Hair Sorted</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Argonian</p>
<p class=""list-1"">‚Ä¢&nbsp; Breton</p>
<p class=""list-1"">‚Ä¢&nbsp; DarkElf</p>
<p class=""list-1"">‚Ä¢&nbsp; HighElf</p>
<p class=""list-1"">‚Ä¢&nbsp; Imperial</p>
<p class=""list-1"">‚Ä¢&nbsp; Khajiit</p>
<p class=""list-1"">‚Ä¢&nbsp; Nord</p>
<p class=""list-1"">‚Ä¢&nbsp; Orc</p>
<p class=""list-1"">‚Ä¢&nbsp; Redguard</p>
<p class=""list-1"">‚Ä¢&nbsp; WoodElf</p>
<p class=""empty"">&nbsp;</p>
<h1><a id=""SEWorldTests"">SEWorld Tests</a></h1>
<h3><a id=""QuestsPatched1"">Quests Patched: 1</a></h3>
<p class=""empty"">&nbsp;</p>
<h1><a id=""LeveledLists"">Leveled Lists</a></h1>
<p class=""empty"">&nbsp;</p>
<h3><a id=""DelevelersRelevelers"">Delevelers/Relevelers</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Oblivion Patch.esp [ADR]</p>
<p class=""list-1"">‚Ä¢&nbsp; Unofficial Shivering Isles Patch.esp [ADR]</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCMehrunesRazor - Unofficial Patch.esp [ADR]</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCSpellTomes.esp [AR]</p>
<p class=""list-1"">‚Ä¢&nbsp; DLCThievesDen - Unofficial Patch.esp [ADR]</p>
<p class=""empty"">&nbsp;</p>
<h3><a id=""MergedItemLists"">Merged Item Lists</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; NDLL0ArmorHeavyBoots</p>
  <p class=""list-2"">‚Ä¢&nbsp; Knights - Unofficial Patch.esp [A]</p>
  <p class=""empty"">&nbsp;</p>
<h3><a id=""EmptyItemSublists"">Empty Item Sublists</a></h3>
<p class=""list-1"">‚Ä¢&nbsp; LL0LootArrow3SilverAbsorbMagic75</p>
<p class=""empty"">&nbsp;</p>
    

</body></html>"
VehW90Vw,dfs - lavirint,Filip13,C#,Tuesday 21st of May 2024 03:06:28 AM CDT,"namespace pretraga_u_dubinu___dfs_depth_first_search_
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[,] polja = new int[,]
            {
                {0, 0, 0, 0, 0 },
                {0, 0, -1, -1, -1 },
                {0, 0, -1, -1, 0 },
                {0, 0, 0, 0, 0 },
            };

            Stack<int> poljaZaObilazak = new();

            poljaZaObilazak.Push(0);

            int[,] validniPotezi =
            {
                { 0, 1 },   //desno
                { 1, 0 },   //dole
                { 0, -1 },  //levo
                { -1, 0 },  //gore
            };

            while (poljaZaObilazak.Any())
            {
                int pozicijaPolja = poljaZaObilazak.Pop();
                int redPolja = pozicijaPolja / polja.GetLength(1);
                int kolonaPolja = pozicijaPolja % polja.GetLength(1);

                for (int i = 0; i < validniPotezi.GetLength(0); i++)
                {
                    int noviRed = redPolja + validniPotezi[i, 0];
                    int novaKolona = kolonaPolja + validniPotezi[i, 1];

                    if (noviRed >= 0 && noviRed < polja.GetLength(0) && novaKolona >= 0 && novaKolona < polja.GetLength(0) && polja[noviRed, novaKolona] == 0)
                    {
                        int novaPozicija = noviRed * polja.GetLength(0) + novaKolona;
                        poljaZaObilazak.Push(novaPozicija);
                    }
                }

            }


        }

    }
}"
YrxAKMsZ,queue - waiting in line,Filip13,C#,Tuesday 21st of May 2024 02:51:20 AM CDT,"namespace cekanje_u_banci
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Queue<int> red = new Queue<int>();
            //Queue<int> red = new();

            int brojacOsoba = 0;

            while (true)
            {
                Console.WriteLine(""Unesi akciju ([u]-ulazak u red/[i]-izlazak iz reda): "");
                string akcija = Console.ReadLine();


                switch (akcija.ToLower())
                {
                    case ""u"":
                        brojacOsoba++;
                        Console.WriteLine($""osoba br.{brojacOsoba} ulazi u red"");

                        red.Enqueue(brojacOsoba);

                        break;

                    case ""i"":
                        int osoba;

                        if (red.Count() > 0)
                        {
                            osoba = red.Dequeue();
                            Console.WriteLine($""osoba br.{osoba} izlazi iz reda"");
                            brojacOsoba--;

                        }
                        else
                        {
                            Console.WriteLine(""\tnema vise osoba u redu"");
                        }

                        break;

                    case ""k"":
                        Console.WriteLine(""\nkraj izvrsavanja"");
                        return;

                    default:
                        Console.WriteLine(""nepoznato"");
                        break;

                }

                Console.WriteLine();
            }



        }

    }
}"
dYjcKPaa,stack - plates,Filip13,C#,Tuesday 21st of May 2024 02:49:50 AM CDT,"namespace stack
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Stack<int> polica = new Stack<int>();
            //Stack<int> polica = new();

            int brojacTanjira = 0;

            while (true)
            {
                Console.WriteLine(""Unesi akciju ([p]-pranje/[U]-uzimanje): "");
                string akcija = Console.ReadLine();


                switch (akcija.ToLower())
                {
                    case ""p"":
                    case ""pranje"":
                    case ""peri"":
                        brojacTanjira++;
                        Console.WriteLine($""pranje tanjira {brojacTanjira}"");

                        polica.Push(brojacTanjira);

                        break;

                    case ""u"":
                    case ""uzmi"":
                    case ""uzimanje"":
                        int tanjir;

                        /*
                        if (polica.TryPop(out tanjir))
                        {
                            tanjir = polica.Pop();
                            Console.WriteLine($""uzimam tanjir {tanjir}"");
                            brojacTanjira--;

                        }
                        */

                        if (polica.Count() > 0)
                        //if (polica.Any())
                        {
                            tanjir = polica.Pop();
                            Console.WriteLine($""uzimam tanjir {tanjir}"");
                            brojacTanjira--;

                        }
                        else
                        {
                            Console.WriteLine(""\tnema vise tanjira na polci(steku)"");
                        }

                        break;

                    case ""k"":
                    case ""kraj"":
                        Console.WriteLine(""\nkraj izvrsavanja"");
                        return;

                    default:
                        Console.WriteLine(""nepoznato"");
                        break;

                }

                Console.WriteLine();
            }



        }

    }
}"
n8H2EVWe,C√≥mo Cambiar el Slug o URL de Paginaci√≥n en WordPress,NubeColectiva,PHP,Tuesday 21st of May 2024 01:58:42 AM CDT,"// Funci√≥n Cambiar el Slug o URL de Paginaci√≥n en WordPress 
function mejorar_url_paginacion() {
    global $wp_rewrite;    
    $wp_rewrite->pagination_base = ''; // Aqu√≠ puedes personalizar la URL o slug 
    $wp_rewrite->flush_rules();
}
add_action('init', 'mejorar_url_paginacion', 1);
"
cTxxEzC2,yenisei,imagenarium,XML,Tuesday 21st of May 2024 01:55:53 AM CDT,"<marketplace>
  <repositories>
  
    <repository>
      <id>yenisei</id>    
      <name>Yenisei</name>
      <url>https://gitlab.com/imagenarium/yenisei-single</url>
      <username></username>
      <password></password>
      <productUrl>https://yeniseidb.ru</productUrl>
      <summary>–°–£–ë–î –ï–Ω–∏—Å–µ–π - –Ω–æ–≤–µ–π—à–∞—è –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –°–£–ë–î –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ü—Ä–∞–≤–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –û–û–û  ¬´–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è¬ª.</summary>
      <summary_ru>–°–£–ë–î –ï–Ω–∏—Å–µ–π - –Ω–æ–≤–µ–π—à–∞—è –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –°–£–ë–î –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ü—Ä–∞–≤–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –û–û–û  ¬´–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è¬ª.</summary_ru>
      <logoUrl>https://i.postimg.cc/3NzKwvRF/yenisei.jpg</logoUrl>
    </repository>
    
  </repositories>
</marketplace>"
UsKHUX52,snowzybot 3.14,coinwalk,JavaScript,Tuesday 21st of May 2024 01:32:37 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/240).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var winnerdinner = (OriginalBalanCe*24);
var snowzy = 0;
var BalanCe = OriginalBalanCe;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe!=snowzy)){
    NexTBet = NexTBet*2;
    snowzy = parseFloat(BalanCe);
}
if (BalanCe>OldBal){
OldBal = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe<=(OldBal-(BaseBet*12)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    OldBal = ((Math.floor(BalanCe/tens))*tens);
    snowzy = 0;
}
if ((BalanCe>=(OldBaltwo+(BaseBet*64)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    OldBal = ((Math.floor(BalanCe/tens))*tens);
    OldBaltwo = ((Math.floor(BalanCe/tens))*tens);
    snowzy = 0;
}
if (((BalanCe/32)<=NexTBet)&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    OldBal = ((Math.floor(BalanCe/tens))*tens);
    snowzy = 0;
}
if (((BalanCe/32)<=NexTBet)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+eights))){
    NexTBet = BaseBet;
    OldBal = ((Math.floor(BalanCe/tens))*tens);
    snowzy = 0;
}
if (((BalanCe/32)<=NexTBet)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))){
    NexTBet = BaseBet*2;
    snowzy = parseFloat(BalanCe);
    OldBal = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1200);
}
go();"
WsApDAs2,UI Error debug LibHistoire,loktai,JSON,Tuesday 21st of May 2024 01:13:54 AM CDT,"{
    ""activeGuilds"": {
        ""1"": {
            ""categories"": {
                ""0"": {
                    ""isAutoRequesting"": true,
                    ""key"": ""NA Megaserver/806111/0"",
                    ""newestManagedEvent"": {
                        ""id"": 165072557,
                        ""index"": 1,
                        ""time"": 1716266924
                    },
                    ""numCachedEvents"": 1299,
                    ""numLoadedManagedEvents"": 1299,
                    ""numRanges"": 1,
                    ""numRawRanges"": 1,
                    ""numUnlinkedEvents"": 0,
                    ""oldestGaplessEvent"": {
                        ""id"": 1700710358,
                        ""index"": 1299,
                        ""time"": 18562001
                    },
                    ""oldestManagedEvent"": {
                        ""id"": 18562001,
                        ""index"": 1299,
                        ""time"": 1700710358
                    },
                    ""processing"": {
                        ""isProcessing"": false
                    },
                    ""processingQueue"": {},
                    ""ranges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 165072557,
                                ""index"": 1,
                                ""time"": 1716266924
                            },
                            ""numEvents"": 1299,
                            ""oldestEvent"": {
                                ""id"": 18562001,
                                ""index"": 1299,
                                ""time"": 1700710358
                            }
                        }
                    },
                    ""rawRanges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 165072557,
                                ""index"": 1,
                                ""time"": 1716266924
                            },
                            ""numEvents"": -1,
                            ""oldestEvent"": {
                                ""id"": 18561999,
                                ""time"": 1700710358
                            }
                        }
                    },
                    ""requestMode"": ""auto"",
                    ""saveData"": {
                        ""initialRequestTime"": 1715646347,
                        ""lastLinkedTime"": 1716271771,
                        ""lastProcessorRegisteredTime"": 1716239659,
                        ""newestManagedEventId"": 165072557,
                        ""newestManagedEventTime"": 1716266924,
                        ""oldestManagedEventId"": 18562001,
                        ""oldestManagedEventTime"": 1700710358
                    },
                    ""unprocessedEventsStartTime"": 1716167343
                },
                ""1"": {
                    ""isAutoRequesting"": true,
                    ""key"": ""NA Megaserver/806111/1"",
                    ""newestManagedEvent"": {
                        ""id"": 164770781,
                        ""index"": 241,
                        ""time"": 1716236440
                    },
                    ""numCachedEvents"": 14437,
                    ""numLoadedManagedEvents"": 14197,
                    ""numRanges"": 2,
                    ""numRawRanges"": 2,
                    ""numUnlinkedEvents"": 240,
                    ""oldestGaplessEvent"": {
                        ""id"": 1716242212,
                        ""index"": 240,
                        ""time"": 164820943
                    },
                    ""oldestManagedEvent"": {
                        ""id"": 136369689,
                        ""index"": 14437,
                        ""time"": 1713648646
                    },
                    ""processing"": {
                        ""isProcessing"": false
                    },
                    ""processingQueue"": {},
                    ""ranges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 164770781,
                                ""index"": 241,
                                ""time"": 1716236440
                            },
                            ""numEvents"": 14197,
                            ""oldestEvent"": {
                                ""id"": 136369689,
                                ""index"": 14437,
                                ""time"": 1713648646
                            }
                        },
                        ""2"": {
                            ""newestEvent"": {
                                ""id"": 165045069,
                                ""index"": 1,
                                ""time"": 1716263417
                            },
                            ""numEvents"": 240,
                            ""oldestEvent"": {
                                ""id"": 164820943,
                                ""index"": 240,
                                ""time"": 1716242212
                            }
                        }
                    },
                    ""rawRanges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 165045069,
                                ""index"": 1,
                                ""time"": 1716263417
                            },
                            ""numEvents"": 240,
                            ""oldestEvent"": {
                                ""id"": 164820943,
                                ""index"": 240,
                                ""time"": 1716242212
                            }
                        },
                        ""2"": {
                            ""newestEvent"": {
                                ""id"": 164770781,
                                ""index"": 241,
                                ""time"": 1716236440
                            },
                            ""numEvents"": 14197,
                            ""oldestEvent"": {
                                ""id"": 136369689,
                                ""index"": 14437,
                                ""time"": 1713648646
                            }
                        }
                    },
                    ""request"": {
                        ""complete"": false,
                        ""id"": -1,
                        ""newestTime"": 1716271980,
                        ""oldestTime"": 1716236439,
                        ""priority"": 26,
                        ""queued"": true,
                        ""shouldContinue"": true,
                        ""valid"": true
                    },
                    ""requestMode"": ""auto"",
                    ""saveData"": {
                        ""lastLinkedTime"": 1716176113,
                        ""lastProcessorRegisteredTime"": 1716239659,
                        ""newestManagedEventId"": 164770781,
                        ""newestManagedEventTime"": 1716236440,
                        ""oldestManagedEventId"": 136369689,
                        ""oldestManagedEventTime"": 1713648646
                    },
                    ""unprocessedEventsStartTime"": 1716213070
                },
                ""2"": {
                    ""isAutoRequesting"": true,
                    ""key"": ""NA Megaserver/806111/2"",
                    ""newestManagedEvent"": {
                        ""id"": 165046467,
                        ""index"": 1,
                        ""time"": 1716263577
                    },
                    ""numCachedEvents"": 11,
                    ""numLoadedManagedEvents"": 2,
                    ""numRanges"": 6,
                    ""numRawRanges"": 6,
                    ""numUnlinkedEvents"": 0,
                    ""oldestGaplessEvent"": {
                        ""id"": 1716263564,
                        ""index"": 2,
                        ""time"": 165046377
                    },
                    ""oldestManagedEvent"": {
                        ""id"": 165046377,
                        ""index"": 2,
                        ""time"": 1716263564
                    },
                    ""processing"": {
                        ""isProcessing"": false
                    },
                    ""processingQueue"": {},
                    ""ranges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 146962369,
                                ""index"": 3,
                                ""time"": 1714265644
                            },
                            ""numEvents"": 1,
                            ""oldestEvent"": {
                                ""id"": 146962369,
                                ""index"": 3,
                                ""time"": 1714265644
                            }
                        },
                        ""2"": {
                            ""newestEvent"": {
                                ""id"": 146962369,
                                ""index"": 3,
                                ""time"": 1714265644
                            },
                            ""numEvents"": 1,
                            ""oldestEvent"": {
                                ""id"": 146962369,
                                ""index"": 3,
                                ""time"": 1714265644
                            }
                        },
                        ""3"": {
                            ""newestEvent"": {
                                ""id"": 146962369,
                                ""index"": 3,
                                ""time"": 1714265644
                            },
                            ""numEvents"": 1,
                            ""oldestEvent"": {
                                ""id"": 146962369,
                                ""index"": 3,
                                ""time"": 1714265644
                            }
                        },
                        ""4"": {
                            ""newestEvent"": {
                                ""id"": 146962369,
                                ""index"": 3,
                                ""time"": 1714265644
                            },
                            ""numEvents"": 1,
                            ""oldestEvent"": {
                                ""id"": 146962369,
                                ""index"": 3,
                                ""time"": 1714265644
                            }
                        },
                        ""5"": {
                            ""newestEvent"": {
                                ""id"": 146962369,
                                ""index"": 3,
                                ""time"": 1714265644
                            },
                            ""numEvents"": 9,
                            ""oldestEvent"": {
                                ""id"": 142551197,
                                ""index"": 11,
                                ""time"": 1713976216
                            }
                        },
                        ""6"": {
                            ""newestEvent"": {
                                ""id"": 165046467,
                                ""index"": 1,
                                ""time"": 1716263577
                            },
                            ""numEvents"": 2,
                            ""oldestEvent"": {
                                ""id"": 165046377,
                                ""index"": 2,
                                ""time"": 1716263564
                            }
                        }
                    },
                    ""rawRanges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 165046467,
                                ""index"": 1,
                                ""time"": 1716263577
                            },
                            ""numEvents"": 2,
                            ""oldestEvent"": {
                                ""id"": 165046377,
                                ""index"": 2,
                                ""time"": 1716263564
                            }
                        },
                        ""2"": {
                            ""newestEvent"": {
                                ""id"": 164638623,
                                ""time"": 1716219817
                            },
                            ""numEvents"": -1,
                            ""oldestEvent"": {
                                ""id"": 164638623,
                                ""time"": 1716219817
                            }
                        },
                        ""3"": {
                            ""newestEvent"": {
                                ""id"": 162499087,
                                ""time"": 1715975205
                            },
                            ""numEvents"": -1,
                            ""oldestEvent"": {
                                ""id"": 162499023,
                                ""time"": 1715975193
                            }
                        },
                        ""4"": {
                            ""newestEvent"": {
                                ""id"": 162363513,
                                ""time"": 1715958140
                            },
                            ""numEvents"": -1,
                            ""oldestEvent"": {
                                ""id"": 162363513,
                                ""time"": 1715958140
                            }
                        },
                        ""5"": {
                            ""newestEvent"": {
                                ""id"": 162333151,
                                ""time"": 1715954482
                            },
                            ""numEvents"": -1,
                            ""oldestEvent"": {
                                ""id"": 162333151,
                                ""time"": 1715954482
                            }
                        },
                        ""6"": {
                            ""newestEvent"": {
                                ""id"": 161873701,
                                ""time"": 1715888246
                            },
                            ""numEvents"": -1,
                            ""oldestEvent"": {
                                ""id"": 137415231,
                                ""time"": 1713705989
                            }
                        }
                    },
                    ""requestMode"": ""auto"",
                    ""saveData"": {
                        ""initialRequestTime"": 1715955155,
                        ""lastLinkedTime"": 1716263602,
                        ""lastProcessorRegisteredTime"": 1716239659,
                        ""newestManagedEventId"": 165046467,
                        ""newestManagedEventTime"": 1716263577,
                        ""oldestManagedEventId"": 165046377,
                        ""oldestManagedEventTime"": 1716263564
                    }
                },
                ""3"": {
                    ""isAutoRequesting"": true,
                    ""key"": ""NA Megaserver/806111/3"",
                    ""newestManagedEvent"": {
                        ""id"": 164792159,
                        ""index"": 11,
                        ""time"": 1716239009
                    },
                    ""numCachedEvents"": 786,
                    ""numLoadedManagedEvents"": 776,
                    ""numRanges"": 2,
                    ""numRawRanges"": 2,
                    ""numUnlinkedEvents"": 10,
                    ""oldestGaplessEvent"": {
                        ""id"": 1716271229,
                        ""index"": 10,
                        ""time"": 165097123
                    },
                    ""oldestManagedEvent"": {
                        ""id"": 136674335,
                        ""index"": 786,
                        ""time"": 1713662775
                    },
                    ""processing"": {
                        ""isProcessing"": false
                    },
                    ""processingQueue"": {},
                    ""ranges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 164792159,
                                ""index"": 11,
                                ""time"": 1716239009
                            },
                            ""numEvents"": 776,
                            ""oldestEvent"": {
                                ""id"": 136674335,
                                ""index"": 786,
                                ""time"": 1713662775
                            }
                        },
                        ""2"": {
                            ""newestEvent"": {
                                ""id"": 165097315,
                                ""index"": 1,
                                ""time"": 1716271281
                            },
                            ""numEvents"": 10,
                            ""oldestEvent"": {
                                ""id"": 165097123,
                                ""index"": 10,
                                ""time"": 1716271229
                            }
                        }
                    },
                    ""rawRanges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 165097315,
                                ""index"": 1,
                                ""time"": 1716271281
                            },
                            ""numEvents"": 10,
                            ""oldestEvent"": {
                                ""id"": 165097123,
                                ""index"": 10,
                                ""time"": 1716271229
                            }
                        },
                        ""2"": {
                            ""newestEvent"": {
                                ""id"": 164792159,
                                ""index"": 11,
                                ""time"": 1716239009
                            },
                            ""numEvents"": 776,
                            ""oldestEvent"": {
                                ""id"": 136674335,
                                ""index"": 786,
                                ""time"": 1713662775
                            }
                        }
                    },
                    ""request"": {
                        ""complete"": false,
                        ""id"": -1,
                        ""newestTime"": 1716271980,
                        ""oldestTime"": 1716239008,
                        ""priority"": 46,
                        ""queued"": true,
                        ""shouldContinue"": true,
                        ""valid"": true
                    },
                    ""requestMode"": ""auto"",
                    ""saveData"": {
                        ""initialRequestTime"": 1715644689,
                        ""lastLinkedTime"": 1715953361,
                        ""lastProcessorRegisteredTime"": 1716239721,
                        ""newestManagedEventId"": 164792159,
                        ""newestManagedEventTime"": 1716239009,
                        ""oldestManagedEventId"": 136674335,
                        ""oldestManagedEventTime"": 1713662775
                    },
                    ""unprocessedEventsStartTime"": 1716196679
                },
                ""4"": {
                    ""isAutoRequesting"": true,
                    ""key"": ""NA Megaserver/806111/4"",
                    ""newestManagedEvent"": {},
                    ""numCachedEvents"": 0,
                    ""numLoadedManagedEvents"": 0,
                    ""numRanges"": 0,
                    ""numRawRanges"": 0,
                    ""numUnlinkedEvents"": 0,
                    ""oldestGaplessEvent"": {
                        ""id"": 0,
                        ""time"": 0
                    },
                    ""oldestManagedEvent"": {},
                    ""processing"": {
                        ""isProcessing"": false
                    },
                    ""processingQueue"": {},
                    ""ranges"": {},
                    ""rawRanges"": {},
                    ""requestMode"": ""auto"",
                    ""saveData"": {
                        ""initialRequestTime"": 1715700403,
                        ""lastProcessorRegisteredTime"": 1716239659
                    }
                },
                ""5"": {
                    ""isAutoRequesting"": true,
                    ""key"": ""NA Megaserver/806111/5"",
                    ""newestManagedEvent"": {
                        ""id"": 151917333,
                        ""index"": 1,
                        ""time"": 1714767948
                    },
                    ""numCachedEvents"": 2,
                    ""numLoadedManagedEvents"": 2,
                    ""numRanges"": 1,
                    ""numRawRanges"": 1,
                    ""numUnlinkedEvents"": 0,
                    ""oldestGaplessEvent"": {
                        ""id"": 1714767948,
                        ""time"": 151917333
                    },
                    ""oldestManagedEvent"": {
                        ""id"": 144446145,
                        ""index"": 2,
                        ""time"": 1714096009
                    },
                    ""processing"": {
                        ""isProcessing"": false
                    },
                    ""processingQueue"": {},
                    ""ranges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 151917333,
                                ""index"": 1,
                                ""time"": 1714767948
                            },
                            ""numEvents"": 2,
                            ""oldestEvent"": {
                                ""id"": 144446145,
                                ""index"": 2,
                                ""time"": 1714096009
                            }
                        }
                    },
                    ""rawRanges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 151917333,
                                ""index"": 1,
                                ""time"": 1714767948
                            },
                            ""numEvents"": 2,
                            ""oldestEvent"": {
                                ""id"": 144446145,
                                ""index"": 2,
                                ""time"": 1714096009
                            }
                        }
                    },
                    ""request"": {
                        ""complete"": false,
                        ""id"": -1,
                        ""newestTime"": 1716271980,
                        ""oldestTime"": 1714767947,
                        ""priority"": 6,
                        ""queued"": true,
                        ""shouldContinue"": true,
                        ""valid"": true
                    },
                    ""requestMode"": ""auto"",
                    ""saveData"": {
                        ""initialRequestTime"": 1715700643,
                        ""lastLinkedTime"": 1715960314,
                        ""lastProcessorRegisteredTime"": 1716239659,
                        ""newestManagedEventId"": 151917333,
                        ""newestManagedEventTime"": 1714767948,
                        ""oldestManagedEventId"": 144446145,
                        ""oldestManagedEventTime"": 1714096009
                    },
                    ""unprocessedEventsStartTime"": 1714767948
                },
                ""6"": {
                    ""isAutoRequesting"": false,
                    ""key"": ""NA Megaserver/806111/6"",
                    ""newestManagedEvent"": {},
                    ""numCachedEvents"": 0,
                    ""numLoadedManagedEvents"": 0,
                    ""numRanges"": 0,
                    ""numRawRanges"": 0,
                    ""numUnlinkedEvents"": 0,
                    ""oldestGaplessEvent"": {
                        ""id"": 0,
                        ""time"": 0
                    },
                    ""oldestManagedEvent"": {},
                    ""processing"": {
                        ""isProcessing"": false
                    },
                    ""processingQueue"": {},
                    ""ranges"": {},
                    ""rawRanges"": {},
                    ""requestMode"": ""auto"",
                    ""saveData"": {}
                }
            },
            ""guildId"": 806111,
            ""hasLinked"": false,
            ""hasLinkedRecently"": true,
            ""hasPendingRequests"": true,
            ""isProcessing"": false,
            ""name"": ""Shadows of Summerset lII"",
            ""newestManagedEvent"": {
                ""id"": 165072557,
                ""time"": 1716266924
            },
            ""numLoadedManagedEvents"": 16276,
            ""oldestManagedEvent"": {
                ""id"": 18562001,
                ""time"": 1700710358
            }
        },
        ""2"": {
            ""categories"": {
                ""0"": {
                    ""isAutoRequesting"": true,
                    ""key"": ""NA Megaserver/715455/0"",
                    ""newestManagedEvent"": {
                        ""id"": 164181197,
                        ""index"": 1,
                        ""time"": 1716163549
                    },
                    ""numCachedEvents"": 162,
                    ""numLoadedManagedEvents"": 162,
                    ""numRanges"": 1,
                    ""numRawRanges"": 1,
                    ""numUnlinkedEvents"": 0,
                    ""oldestGaplessEvent"": {
                        ""id"": 1716163549,
                        ""time"": 164181197
                    },
                    ""oldestManagedEvent"": {
                        ""id"": 20485251,
                        ""index"": 162,
                        ""time"": 1700957142
                    },
                    ""processing"": {
                        ""isProcessing"": false
                    },
                    ""processingQueue"": {},
                    ""ranges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 164181197,
                                ""index"": 1,
                                ""time"": 1716163549
                            },
                            ""numEvents"": 162,
                            ""oldestEvent"": {
                                ""id"": 20485251,
                                ""index"": 162,
                                ""time"": 1700957142
                            }
                        }
                    },
                    ""rawRanges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 164181197,
                                ""index"": 1,
                                ""time"": 1716163549
                            },
                            ""numEvents"": 162,
                            ""oldestEvent"": {
                                ""id"": 20485251,
                                ""index"": 162,
                                ""time"": 1700957142
                            }
                        }
                    },
                    ""request"": {
                        ""complete"": false,
                        ""id"": -1,
                        ""newestTime"": 1716271980,
                        ""oldestTime"": 1716163548,
                        ""priority"": 16,
                        ""queued"": true,
                        ""shouldContinue"": true,
                        ""valid"": true
                    },
                    ""requestMode"": ""auto"",
                    ""saveData"": {
                        ""initialRequestTime"": 1715644334,
                        ""lastLinkedTime"": 1715791810,
                        ""lastProcessorRegisteredTime"": 1716239659,
                        ""newestManagedEventId"": 164181197,
                        ""newestManagedEventTime"": 1716163549,
                        ""oldestManagedEventId"": 20485251,
                        ""oldestManagedEventTime"": 1700957142
                    },
                    ""unprocessedEventsStartTime"": 1716083944
                },
                ""1"": {
                    ""isAutoRequesting"": true,
                    ""key"": ""NA Megaserver/715455/1"",
                    ""newestManagedEvent"": {
                        ""id"": 163890653,
                        ""index"": 1,
                        ""time"": 1716136708
                    },
                    ""numCachedEvents"": 476,
                    ""numLoadedManagedEvents"": 476,
                    ""numRanges"": 1,
                    ""numRawRanges"": 1,
                    ""numUnlinkedEvents"": 0,
                    ""oldestGaplessEvent"": {
                        ""id"": 1716136708,
                        ""time"": 163890653
                    },
                    ""oldestManagedEvent"": {
                        ""id"": 136432663,
                        ""index"": 476,
                        ""time"": 1713651567
                    },
                    ""processing"": {
                        ""isProcessing"": false
                    },
                    ""processingQueue"": {},
                    ""ranges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 163890653,
                                ""index"": 1,
                                ""time"": 1716136708
                            },
                            ""numEvents"": 476,
                            ""oldestEvent"": {
                                ""id"": 136432663,
                                ""index"": 476,
                                ""time"": 1713651567
                            }
                        }
                    },
                    ""rawRanges"": {
                        ""1"": {
                            ""newestEvent"": {
                                ""id"": 163890653,
 "
E2jECcKu,Untitled,Alx09,C,Tuesday 21st of May 2024 01:06:20 AM CDT,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <windows.h> 

typedef enum {
    ADMIN,
    USER
} UserType;

typedef enum {
    DEPOSIT,
    WITHDRAW,
    TRANSFER
} OperationType;

typedef enum {
    INITIATED,
    PROCESSING,
    CANCELED,
    BLOCKED,
    SUCCESFUL
} OperationResult;

//Structura pentru un cont bancar
typedef struct Cont {
    char IBAN[25];
    double sold;
    char CNP_proprietar[14];
    char valuta[4];
    struct Cont* next;
    struct Extrase* extraseLista;
} Cont;

//Structura pentru utilizator
typedef struct User {
    char username[50];
    char password[50];
    char CNP[14]; 
    char nume[50];
    char prenume[50];
    UserType type;
    struct User* next;
    Cont* headAccount;
    Cont* tailAccount;
} User;

//Structura pentru un extras de cont;
typedef struct Extrase {
    OperationType type;
    OperationResult result;
    char reason[100]; 
    struct Extrase* next;
} Extrase;

User *usersList = NULL;
User *currentUser = NULL;
Cont *accountsList = NULL;
Cont* currentAccount = NULL;
Extrase *listaExtrase = NULL;
int delogat;
const char* USERS_FILE = ""users.txt"";
const char* ACCOUNTS_FILE = ""accounts.txt"";


const char* operationToStrng(OperationType operation) {
    switch (operation)
    {
    case DEPOSIT: return ""DEPOSIT""; break;
    case WITHDRAW: return ""WITHDRAW""; break;
    case TRANSFER: return ""TRANSFER""; break;
    default: return ""nedefinit"";
        break;
    }
}

enum OperationType typeToEnum(const char* type) {
    if (strcmp(""DEPOSIT"", type) == 0) return DEPOSIT;
    if (strcmp(""WITHDRAW"", type) == 0) return WITHDRAW;
    if (strcmp(""TRANSFER"", type) == 0) return TRANSFER;
}

enum OperationResult resultToEnum(const char* result) {
    if (strcmp(""INITIATED"", result) == 0) return INITIATED;
    if (strcmp(""PROCESSING"", result) == 0) return PROCESSING;
    if (strcmp(""CANCELED"", result) == 0) return CANCELED;
    if (strcmp(""BLOCKED"", result) == 0) return BLOCKED;
    if (strcmp(""SUCCESFUL"", result) == 0) return SUCCESFUL;
}



const char* resultToString(OperationResult result) {
    switch (result)
    {
    case INITIATED: return ""INITIATED""; break;
    case PROCESSING: return ""PROCESSING""; break;
    case CANCELED: return ""CANCELED""; break;
    case BLOCKED: return ""BLOCKED""; break;
    case SUCCESFUL: return ""SUCCESFUL""; break;
    default: return ""nedefinit"";
        break;
    }
}

//Functie pentru a adauga un nou cont la sfarsit
User* addAccount(User* user, Cont* cont) {
    if (user->headAccount == NULL) {
        user->headAccount = cont;
        user->tailAccount = cont;
    }
    else {
        user->tailAccount->next = cont;
        user->tailAccount = cont;
    }
    return user;
}


void addAccountToUser(User* user, Cont* newAccount) {
    if (user->headAccount == NULL) {
        user->headAccount = newAccount;
    }
    else {
        Cont* current = user->headAccount;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newAccount;
    }
}

//Adaugare utilizator
User* addSorted(struct User* head, struct User* p) {
    User* q = head;
    if (head == NULL) {
        head = p;
    }
    else if (strcmp(head->username, p->username) > 0) {
        p->next = head;
        head = p;
        return head;
    }
    else {
        while (q->next != NULL && strcmp(q->next->username, p->username) < 0) {
            q = q->next;
        }
        p->next = q->next;
        q->next = p;
    }
    return head;
}

void saveUsersToFile() {
    FILE* file = fopen(USERS_FILE, ""w"");
    if (file == NULL) {
        printf(""Eroare la deschiderea fisierului.\n"");
        return;
    }

    User* current = usersList;
    while (current != NULL) {
        fprintf(file, ""%s %s %s %s %s %d\n"", current->username, current->password, current->CNP,
            current->nume, current->prenume, current->type);
        current = current->next;

    }

    fclose(file);
}

void saveAccountsToFile() {
    FILE* file = fopen(ACCOUNTS_FILE, ""w"");
    if (file == NULL) {
        printf(""Eroare la deschiderea fisierului conturilor.\n"");
        return;
    }

    User* currentUser = usersList;
    while (currentUser != NULL) {
        Cont* currentAccount = currentUser->headAccount;
        while (currentAccount != NULL) {
            fprintf(file, ""%s %s %s %lf\n"", currentAccount->IBAN, currentAccount->CNP_proprietar, currentAccount->valuta, currentAccount->sold);
            currentAccount = currentAccount->next;
        }
        currentUser = currentUser->next;
    }

    fclose(file);
}

void saveExtraseToFile(Cont* cont) {
    char fileName[50];
    sprintf(fileName, ""%s_extrase.txt"", cont->IBAN);

    FILE* file = fopen(fileName, ""w"");
    if (file == NULL) {
        printf(""Eroare la deschiderea fi»ôierului de extrase.\n"");
        return;
    }
    Extrase* current = cont->extraseLista;
    while (current != NULL) {
        const char* type = operationToStrng(current->type);
        const char* result = resultToString(current->result);
        fprintf(file, ""%s %s %s %s\n"", cont->IBAN, type, result, current->reason);
        current = current->next;
    }
    fclose(file);
}

void loadExtraseFromFile(Cont* cont) {
    char fileName[50];
    sprintf(fileName, ""%s_extrase.txt"", cont->IBAN);
    FILE* file = fopen(fileName, ""r"");
    if (file == NULL) {
        return;
    }
    char iban[25], type[20], reason[100], timestamp[20], result[20];
    int rezultat,tip;
    char line[100];
    while (fgets(line, sizeof(line), file)) {
        if (sscanf(line, ""%s %s %s"", iban, type, result) == 3) {
            if (strcmp(result, ""SUCCESFUL"") == 0) {
                if (strcmp(cont->IBAN, iban) == 0) {
                    Extrase* newExtrase = (Extrase*)malloc(sizeof(Extrase));
                    if (newExtrase != NULL) {
                        tip = typeToEnum(type);
                        rezultat = resultToEnum(result);
                        newExtrase->type = tip;
                        newExtrase->result = rezultat;
                        reason[0] = '\0';
                        strcpy(newExtrase->reason, reason);
                        newExtrase->next = cont->extraseLista;
                        cont->extraseLista = newExtrase;
                    }
                }
            }
            else {
                sscanf(line, ""%*s %*s %*s %s"", reason);
                if (strcmp(cont->IBAN, iban) == 0) {
                    Extrase* newExtrase = (Extrase*)malloc(sizeof(Extrase));
                    if (newExtrase != NULL) {
                        tip = typeToEnum(type);
                        rezultat = resultToEnum(result);
                        newExtrase->type = tip;
                        newExtrase->result = rezultat;
                        reason[0] = '\0';
                        strcpy(newExtrase->reason, reason);
                        newExtrase->next = cont->extraseLista;
                        cont->extraseLista = newExtrase;
                    }
                }
            }
        }
    }
 
    fclose(file);
}

void addExtrase(Cont* cont, OperationType type, OperationResult result, const char* reason) {
    Extrase* newExtrase = (Extrase*)malloc(sizeof(Extrase));
    if (newExtrase == NULL) {
        printf(""Eroare la alocarea memoriei pentru extrase.\n"");
        return;
    }

    newExtrase->type = type;
    newExtrase->result = result;
    strcpy(newExtrase->reason, reason);

    newExtrase->next = cont->extraseLista;
    cont->extraseLista = newExtrase;
}

//Functie pentru schimbarea parolei
void changePassword(User* user, const char* newPassword) {
    if (user == NULL) {
        printf(""Eroare contul nu exista.\n"");
        return;
    }

    strcpy(user->password, newPassword);
    printf(""Parola utilizatorului a fost actualizata cu succes.\n"");

    saveUsersToFile();
}

void printExtrase(Cont* cont) {
    printf(""Extrasele pentru contul cu IBAN-ul %s:\n"", cont->IBAN);
    Extrase* current = cont->extraseLista;
    while (current != NULL) {
        printf(""Tip operatie: %s\n"", operationToStrng(current->type));
        printf(""Rezultat operatie: %s\n"", resultToString(current->result));
        if(strcmp(resultToString(current->result),""SUCCESFUL"")!=0) 
            printf(""Motiv esuare: %s\n"", current->reason);
        printf(""-------------------------\n"");
        current = current->next;
    }
}

void loadAllExtrase() {
    currentUser = usersList;
    while (currentUser != NULL) {
        currentAccount = currentUser->headAccount;
        while (currentAccount != NULL) {   
            loadExtraseFromFile(currentAccount);
            currentAccount = currentAccount->next;
        }
        currentUser = currentUser->next;
    }
}

//Incarca conturile IBAN existente
void loadAccountsFromFile() {
    FILE* file = fopen(ACCOUNTS_FILE, ""r"");
    if (file == NULL) {
        printf(""Eroare la deschiderea fisierului conturilor.\n"");
        return;
    }

    double sold;
    char iban[50], CNP[14], valuta[50];
    while (fscanf(file, ""%s %s %s %lf\n"", iban, CNP, valuta, &sold) != EOF) {
        Cont* newAccount = (Cont*)malloc(sizeof(Cont));
        if (newAccount != NULL) {
            strcpy(newAccount->IBAN, iban);
            strcpy(newAccount->CNP_proprietar, CNP);
            strcpy(newAccount->valuta, valuta);
            newAccount->sold = sold;
            newAccount->next = NULL;
            newAccount->extraseLista = NULL;

            User* currentUser = usersList;
            while (currentUser != NULL) {
                if (strcmp(currentUser->CNP, CNP) == 0) {
                    addAccountToUser(currentUser, newAccount);
                    break;
                }
                currentUser = currentUser->next;
            }

            
        }
    }

    fclose(file);
}
//Incarca conturile existente
void loadUsersFromFile() {
    FILE* file = fopen(USERS_FILE, ""r"");
    if (file == NULL) {
        printf(""Eroare la deschiderea fisierului utilizatorilor.\n"");
        return;
    }

    char username[50], password[50], CNP[14], nume[50], prenume[50];
    int type;
    while (fscanf(file, ""%s %s %s %s %s %d\n"", username, password, CNP, nume, prenume, &type) != EOF) {
        User* newUser = (User*)malloc(sizeof(User));
        if (newUser != NULL) {
            strcpy(newUser->username, username);
            strcpy(newUser->password, password);
            strcpy(newUser->CNP, CNP);
            strcpy(newUser->nume, nume);
            strcpy(newUser->prenume, prenume);
            newUser->type = type;
            newUser->next = NULL;
            newUser->headAccount = NULL;

            // AdaugƒÉ noul utilizator la lista de utilizatori
            usersList = addSorted(usersList, newUser);
        }
    }

    fclose(file);
}

//Meniu principal
void meniu_principal() {
    printf(""Bine ati venit!\n"");
    printf(""1. Autentificare\n"");
    printf(""2. Inregistrare\n"");
    printf(""3. Iesire\n"");
}

User* readUser() {
    User* newUser = (User*)malloc(sizeof(User));
    if (newUser == NULL) {
        printf(""Eroare la alocarea memoriei pentru utilizator!\n"");
        return NULL;
    }
    printf(""Introduceti numele de utilizator: "");
    scanf(""%s"", newUser->username);

    printf(""Introduceti parola: "");
    scanf(""%s"", newUser->password);

    printf(""Introduceti CNP-ul: "");
    scanf(""%s"", newUser->CNP);

    printf(""Introduceti numele: "");
    scanf(""%s"", newUser->nume);

    printf(""Introduceti prenumele: "");
    scanf(""%s"", newUser->prenume);

    int userType;
    printf(""Alegeti tipul de utilizator (0 - Admin, 1 - Utilizator): "");
    scanf(""%d"", &userType);
    newUser->type = userType == 0 ? ADMIN : USER;

    newUser->next = NULL;
    newUser->headAccount = NULL;

    return newUser;
}

int delogare(User** utilizator_curent) {
    *utilizator_curent = NULL;
    printf(""Delogare efectuata cu succes.\n"");
    return 1;
}

//Functie pentru a afisa conturile
void ShowAccounts(User* user) {
    if (user->headAccount == NULL) {
        printf(""Utilizatorul nu are nici un cont.\n"");
        return;
    }
    Cont* currentAccount = user->headAccount;

    printf(""Conturile asociate utilizatorului %s sunt:\n"", user->username);
    while (currentAccount != NULL) {
        printf(""IBAN: %s | Sold: %.2f %s\n"", currentAccount->IBAN, currentAccount->sold, currentAccount->valuta);
        printExtrase(currentAccount);
        currentAccount = currentAccount->next;
    }
}

//Functie pentru a afisa utilizatorii si conturile lor
void showUsers(User* head) {
    User* current = usersList;
    while (current != NULL) {
        printf(""Utilizator: %s\nCNP: %s\n"", current->username, current->CNP);
        ShowAccounts(current);
        current = current->next;
    }
}

void showUsersWithoutAccounts(User* head) {
    User* current = usersList;
    while (current != NULL) {
        printf(""Utilizator: %s\nCNP: %s\n"", current->username, current -> CNP);
        current = current->next;
    }
}

Cont* selectAccount(User* user) {
    char iban[25];
    printf(""Introduceti IBAN-ul contului pe care doriti sa-l selectati: "");
    scanf(""%s"", iban);

    Cont* currentAccount = user->headAccount;
    while (currentAccount != NULL) {
        if (strcmp(currentAccount->IBAN, iban) == 0) {
            return currentAccount;
        }
        currentAccount = currentAccount->next;
    }

    printf(""Contul cu IBAN-ul %s nu a fost gasit.\n"", iban);
    return NULL;
}

void deleteAccountByIban(User* head, const char* ibanToDelete) {
    User* currentUser = head;
    while (currentUser != NULL) {
        Cont** headAccountPtr = &currentUser->headAccount;
        Cont* currentAccount = *headAccountPtr;

        if (currentAccount == NULL) {
            currentUser = currentUser->next;
            continue;
        }

        if (strcmp(currentAccount->IBAN, ibanToDelete) == 0) {
            *headAccountPtr = currentAccount->next;
            free(currentAccount);
            printf(""Contul cu IBAN-ul %s a fost sters cu succes din lista utilizatorului %s.\n"", ibanToDelete, currentUser->username);
            saveAccountsToFile(); 
        }
        else {
            while (currentAccount->next != NULL) {
                if (strcmp(currentAccount->next->IBAN, ibanToDelete) == 0) {
                    Cont* temp = currentAccount->next;
                    currentAccount->next = temp->next;
                    free(temp);
                    printf(""Contul cu IBAN-ul %s a fost sters cu succes din lista utilizatorului %s.\n"", ibanToDelete, currentUser->username);
                    saveAccountsToFile(); 
                    break;
                }
                currentAccount = currentAccount->next;
            }
        }
        currentUser = currentUser->next;
    }
}

void editUserByCNP(const char* CNP, const char* newNume, const char* newPrenume) {
    currentUser = usersList;
    while (currentUser != NULL) {
        if (strcmp(currentUser->CNP, CNP) == 0) {
            strcpy(currentUser->nume, newNume);
            strcpy(currentUser->prenume, newPrenume);

            saveUsersToFile();
            printf(""Datele utilizatorului cu CNP-ul %s au fost actualizate cu succes.\n"", CNP);
            return;
        }
        currentUser = currentUser->next;
    }
    printf(""Utilizatorul cu CNP-ul %s nu a fost gasit.\n"", CNP);
}

Cont* findAccountByIBAN(User* head, const char* iban) {
    User* current = head;
    while (current != NULL) {
        Cont* currentAcc = current->headAccount;
        while (currentAcc != NULL) {
            if (strcmp(currentAcc->IBAN, iban) == 0) {
                return currentAcc;
            }
            currentAcc = currentAcc->next;
        }
        current = current->next;
    }
    return NULL;
}

void transferMoney(Cont *cont, const char* ibanDestinatie, double suma) {
    //Cont* contSursa = findAccountByIBAN(accountsList, ibanSursa);
    Cont* contDestinatie = findAccountByIBAN(usersList, ibanDestinatie);
    
    if (cont == NULL || contDestinatie == NULL) {
        printf(""Unul dintre conturi nu exista.\n"");
        addExtrase(cont, TRANSFER, CANCELED, ""Unul dintre conturi nu exista."");

        return;
    }

    if (strcmp(cont->valuta, contDestinatie->valuta) != 0) {
        printf(""Conturile nu au aceasi valuta, transferul nu este posibil.\n"");
        addExtrase(cont, TRANSFER, CANCELED, ""Conturile nu au aceeasi valuta."");
        return;
    }

    if (cont->sold < suma) {
        printf(""Nu exista sold suficient in contul sursa pentru a efectua transferul.\n"");
        addExtrase(cont, TRANSFER, CANCELED, ""Nu exista sold suficient in contul sursa pentru a efectua transferul."");
        return;
    }

    cont->sold -= suma;
    contDestinatie->sold += suma;

    saveAccountsToFile();

    printf(""Transferul de %.2f %s de la contul %s la contul %s s-a efectuat cu succes.\n"", suma, cont->valuta, cont->valuta, ibanDestinatie);
    addExtrase(cont, TRANSFER, SUCCESFUL, """");
}


//Meniul pentru Admin
int adminMenu() {
    int opt;
    do {
        printf(""\n----- Meniu Admin -----\n"");
        printf(""1. Adaugare utilizator\n"");
        printf(""2. Adaugare cont IBAN\n"");
        printf(""3. Afisare utilizatori si extrase\n"");
        printf(""4. Stergere IBAN\n"");
        printf(""5. Editare date utilizator dupa CNP\n"");
        printf(""6. Schimbare parola\n"");
        printf(""7. Delogare\n"");
        printf(""0. Iesire\n"");
        printf(""Alegeti optiunea: "");
        scanf(""%d"", &opt);
        getchar();
        switch (opt)
        {
        case 1:
        {
            User* newUser = readUser();
            usersList = addSorted(usersList, newUser);
            saveUsersToFile();
            break;
        }
        case 2:
        {
            printf(""Utilizatori disponibili:\n"");
            showUsersWithoutAccounts(usersList);

            char username[50];
            printf(""Introduceti numele de utilizator al destinatarului: "");
            scanf(""%s"", username);

            User* selectedUser = usersList;
            while (selectedUser != NULL) {
                if (strcmp(selectedUser->username, username) == 0) {
                    break;
                }
                selectedUser = selectedUser->next;
            }
            if (selectedUser == NULL) {
                printf(""Utilizatorul nu a fost gasit.\n"");
                break;
            }

            Cont* newAccount = (Cont*)malloc(sizeof(Cont));
            if (newAccount == NULL) {
                printf(""Eroare la alocarea memoriei.\n"");
                break;
            }
            printf(""Introduceti IBAN-ul contului: "");
            scanf(""%s"", newAccount->IBAN);
            printf(""Introduceti valuta contului: "");
            scanf(""%s"", newAccount->valuta);
            printf(""Introduceti soldul contului: "");
            scanf(""%lf"", &newAccount->sold);
            strcpy(newAccount->CNP_proprietar, selectedUser->CNP);
            newAccount->next = NULL;
            addAccountToUser(selectedUser, newAccount);
            saveAccountsToFile();
            printf(""Cont salvat cu succes"");
            break;
        }
        case 3:
            showUsers(usersList);
            break;
        case 4:
            showUsers(usersList);
            char iban[25];
            printf(""Introduceti IBAN-ul contului pe care doriti sa il stergeti: "");
            scanf(""%s"", iban);
            deleteAccountByIban(usersList, iban);
            break;
        case 5:
            showUsersWithoutAccounts(usersList);
            char cnp[14], newNume[20], newPrenume[20];
            printf(""Introduceti CNP-ul persoanei careia doriti sa modificati datele: "");
            scanf(""%s"", cnp);
            printf(""Introduceti noul nume: "");
            scanf(""%s"", newNume);
            printf(""Introduceti noul prenume: "");
            scanf(""%s"", newPrenume);
            editUserByCNP(cnp, newNume, newPrenume);
            break;
        case 6:
        {
            char newPass[50];
            printf(""Introduceti parola noua: "");
            scanf(""%s"", newPass);
            changePassword(currentUser, newPass);
            break;
        }
        case 7:
            return delogat = delogare(&currentUser);
            break;
        case 0:
            exit(0);
        default:
            break;
        }
    } while (opt != 0);
}

//Submeniu pentru user:
void submenu() {
    printf(""1. Adaugare bani in cont\n"");
    printf(""2. Retragere bani din cont\n"");
    printf(""3. Transfer bani catre alt cont\n"");
    printf(""4. Afisare extrase de cont\n"");
    printf(""5. Iesire\n"");
}

void addMoneyToAccount(User* user, Cont* account) {
    double amountToAdd;
    printf(""Introduceti suma pe care doriti sa o adaugati in contul cu IBAN-ul %s: "", account->IBAN);
    scanf(""%lf"", &amountToAdd);
    if (amountToAdd <= 0) {
        printf(""Suma introdusa trebuie sa fie mai mare decat 0.\n"");
        addExtrase(account, DEPOSIT, CANCELED, ""Suma introdusa trebuie sa fie mai mare decat 0."");
        return;
    }

    account->sold += amountToAdd;

    saveAccountsToFile();

    printf(""Suma de %.2f a fost adaugata cu succes in contul cu IBAN-ul %s.\n"", amountToAdd, account->IBAN);
    addExtrase(account, DEPOSIT, SUCCESFUL, """");
}

void removeMoneyFromAccount(User* user, Cont* account) {
    double amountToTake;
    printf(""Introduceti suma pe care doriti sa o retrageti din contul cu IBAN-ul %s: "", account->IBAN);
    scanf(""%lf"", &amountToTake);
    if (amountToTake >= account->sold) {
        printf(""Suma introdusa este mai mare decat sold-ul disponibil.\n"");
        addExtrase(account, WITHDRAW, CANCELED, ""Suma introdusa este mai mare decat sold-ul disponibil."");
        return;
    }

    account->sold -= amountToTake;

    saveAccountsToFile();
    printf(""Suma de %.2f a fost retrasa cu succes din contul cu IBAN-ul %s.\n"", amountToTake, account->IBAN);
    addExtrase(account, WITHDRAW, SUCCESFUL, """");
}

//Meniul pentru User
int userMenu() {
    int opt,opt2;
    do {
        printf(""\n----- Meniu Utilizator -----\n"");
        printf(""1. Selectare cont pentru operatii\n"");
        printf(""2. Schimbare parola\n"");
        printf(""3. Delogare\n"");
        printf(""0. Iesire\n"");
        printf(""Alegeti optiunea: "");
        scanf(""%d"", &opt);
        getchar();
        
        switch (opt)
        {
        case 1:
            ShowAccounts(currentUser);
            currentAccount = selectAccount(currentUser);
            submenu();
            printf(""Alegeti optiunea: "");
            scanf(""%d"", &opt2);
            switch (opt2)
            {
            case 1:
                addMoneyToAccount(currentUser, currentAccount);
                saveExtraseToFile(currentAccount);
                break;
            case 2:
                removeMoneyFromAccount(currentUser, currentAccount);
                saveExtraseToFile(currentAccount);
                break;
            case 3:
            {
                double s;
                char iban[25];
                showUsers(usersList);
                printf(""Introduceti IBAN-ul contului catre care doriti sa transferati: "");
                scanf(""%s"", iban);
                printf(""Introduceti suma pe care doriti sa o transferati: "");
                scanf(""%lf"", &s);
                transferMoney(currentAccount, iban, s);
                saveExtraseToFile(currentAccount);
                break;
            }   
            case 4:
                printExtrase(currentAccount);
            default:
                break;
            }
            break;
        case 3:
            return delogat = delogare(&currentUser);
            break;
        case 0:
            exit(0);
        default:
            break;
        }
    } while (opt != 0);
}

//Autentificare
User *autentification(char username[], char password[], UserType* userType) {
    currentUser = usersList;
    while (currentUser != NULL) {
        if (strcmp(currentUser->username, username) == 0 && strcmp(currentUser->password, password) == 0) {
            *userType = currentUser->type;
            return currentUser;
        }
        currentUser = currentUser->next;
    }
    return NULL;
}

//Utilizator admin de baza 
void addBaseAdminAccount() {
    // CreƒÉm un utilizator admin de bazƒÉ
    User* adminUtil = (User*)malloc(sizeof(User));
    if (adminUtil == NULL) {
        printf(""Eroare la alocarea memoriei pentru utilizator.\n"");
        return;
    }

    // Ini»õializƒÉm valorile utilizatorului admin de bazƒÉ
    strcpy(adminUtil->username, ""admin"");
    strcpy(adminUtil->password, ""adminpass"");
    strcpy(adminUtil->CNP, ""1234567890123"");
    strcpy(adminUtil->nume, ""Admin"");
    strcpy(adminUtil->prenume, ""Administrator"");
    adminUtil->type = ADMIN;
    adminUtil->next = NULL;

    usersList = addSorted(usersList, adminUtil);
}

//Proces autentificare
void autentificationProcess() {
    if (usersList == NULL) {
        addBaseAdminAccount();
        printf(""Utilizator admin de baza creat. Foloseste numele de utilizator 'admin' si parola 'adminpass' pentru a te autentifica.\n"");
    }
    char username[50];
    char password[50];
    printf(""Introduceti numele de utilizator: "");
    scanf(""%s"", username);
    printf(""Introduceti parola: "");
    scanf(""%s"", password);

    UserType userType;
    currentUser = autentification(username, password, &userType);
    if (currentUser != NULL) {
        if (userType == ADMIN) {
            adminMenu(currentUser);
        }
        else if (userType == USER) {
            userMenu(currentUser);
        }
        else {
            printf(""Nume de utilizator sau parola incorecta!\n"");
        }
    }
}

void registrationProcess() {
    User* newUser = readUser();
    if (newUser != NULL) {
        usersList = addSorted(usersList, newUser);
        saveUsersToFile();
        printf(""Utilizator inregistrat cu succes!\n"");
    }
}

int main() {
    loadUsersFromFile();
    loadAccountsFromFile();
    loadAllExtrase();
    int opt;
    do {
        if (delogat) {
            delogat = 0;
            meniu_principal();
        }
        else meniu_principal();
        printf(""Introduceti optiunea: "");
        scanf(""%d"", &opt);
        getchar();
        system(""cls"");
        switch (opt) {
        case 1:
            autentificationProcess();
            break;
        case 2:
            registrationProcess();
            break;
        case 3:
            printf(""Iesire din program. La revedere!\n"");
            exit(0);
        default:
            printf(""Optiune invalida. Va rugam sa selectati o optiune valida.\n"");
        }

    } while (1);

	return 0;
}"
TywUCMLt,Untitled,simontragic,CSS,Tuesday 21st of May 2024 12:33:35 AM CDT,"#app-mount > div.appAsidePanelWrapper__5e6e2 > div.notAppAsidePanel__95814 > div.app_b1f720 > div > div.layers__1c917.layers_a23c37 > div > div > div > div > div.chat__52833 > div.content__01e65 > div > aside > div > div > h3:nth-child(2) > span.headerContainer__708b7
{
    display: none;
}

.container__8d997
{
    display: none;
}

.hangStatusIcon__367ef
{
    display: none;
}

#channels > ul > li:nth-child(9) > div.list__02208.list__54b1e.listDefault__4e3fa > div > div > div > div.icons__10dd7 > div:nth-child(2) > div > svg
{
    display: none;
}

#popout_3667
{
    display: none;
}"
jPiaPWGh,https://noillegalsurveillance.wordpress.com/,miscln,HTML,Tuesday 21st of May 2024 12:01:48 AM CDT,"https://noillegalsurveillance.wordpress.com/
fw!"
PhGHq7My,Lock Code Cracker,CodingComputing,Python,Monday 20th of May 2024 11:26:10 PM CDT,"# Lock code cracker by @CodingComputing

def count_correct(com, ref):
    return len([a for a in com if a in ref])

def count_correct_well_placed(com, ref):
    return len([a for a,b in zip(com,ref) if a==b])

def count_correct_wrongly_placed(com, ref):
    n_correct = count_correct(com, ref)
    n_well_placed = count_correct_well_placed(com, ref)
    return n_correct - n_well_placed

condition_checkers = [
    lambda com: count_correct_well_placed(com, '682') == 1,
    lambda com: count_correct_wrongly_placed(com, '614') == 1,
    lambda com: count_correct_wrongly_placed(com, '206') == 2,
    lambda com: count_correct(com, '738') == 0,
    lambda com: count_correct_wrongly_placed(com, '780') == 1,
]

def check_all(com):
    return all([check(com) for check in condition_checkers])

valid_coms = []
for num in range(1000):
    com = f""{num:03}""
    if check_all(com):
        valid_coms.append(com)

print(""Valid combinations:"", valid_coms)"
EHeqCB3P,snowybot 3.14,coinwalk,JavaScript,Monday 20th of May 2024 11:25:44 PM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/1000).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var winnerdinner = (OriginalBalanCe*24);
var snowzy = 0;
var BalanCe = OriginalBalanCe;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>OldBal)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe!=snowzy)){
    NexTBet = NexTBet*2;
    snowzy = parseFloat(BalanCe);
    OldBal = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe<OldBal)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe!=snowzy)){
    NexTBet = NexTBet*2;
    snowzy = parseFloat(BalanCe);
}
if ((BalanCe<=(OldBal-(BaseBet*12)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    OldBal = ((Math.floor(BalanCe/tens))*tens);
    snowzy = 0;
}
if ((BalanCe>=(OldBaltwo+(BaseBet*12)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    OldBal = ((Math.floor(BalanCe/tens))*tens);
    OldBaltwo = ((Math.floor(BalanCe/tens))*tens);
    snowzy = 0;
}
if (((BalanCe/4)<=NexTBet)&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    OldBal = ((Math.floor(BalanCe/tens))*tens);
    snowzy = 0;
}
if (((BalanCe/4)<=NexTBet)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+eights))){
    NexTBet = BaseBet;
    OldBal = ((Math.floor(BalanCe/tens))*tens);
    snowzy = 0;
}
if (((BalanCe/4)<=NexTBet)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))){
    NexTBet = BaseBet*2;
    snowzy = parseFloat(BalanCe);
    OldBal = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1200);
}
go();"
i8BSdZgh,fe r15 animation script,benjamin10,Lua,Monday 20th of May 2024 11:00:23 PM CDT,"--[=[
 d888b  db    db d888888b      .d888b.      db      db    db  .d8b.  
88' Y8b 88    88   `88'        VP  `8D      88      88    88 d8' `8b 
88      88    88    88            odD'      88      88    88 88ooo88 
88  ooo 88    88    88          .88'        88      88    88 88~~~88 
88. ~8~ 88b  d88   .88.        j88.         88booo. 88b  d88 88   88 
 Y888P  ~Y8888P' Y888888P      888888D      Y88888P ~Y8888P' YP   YP  CONVERTER
]=]

-- Instances: 54 | Scripts: 1 | Modules: 3
local G2L = {};

-- StarterGui.Bubble
G2L[""1""] = Instance.new(""ScreenGui"", game.CoreGui);
G2L[""1""][""DisplayOrder""] = 999999999;
G2L[""1""][""Name""] = [[Bubble]];
G2L[""1""][""ZIndexBehavior""] = Enum.ZIndexBehavior.Sibling;
G2L[""1""][""ResetOnSpawn""] = false;

-- StarterGui.Bubble.Background
G2L[""2""] = Instance.new(""Frame"", G2L[""1""]);
G2L[""2""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""2""][""BackgroundTransparency""] = 1;
G2L[""2""][""Size""] = UDim2.new(1, 0, 1, 0);
G2L[""2""][""Name""] = [[Background]];

-- StarterGui.Bubble.Background.Emote
G2L[""3""] = Instance.new(""Frame"", G2L[""2""]);
G2L[""3""][""BorderSizePixel""] = 0;
G2L[""3""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""3""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
G2L[""3""][""BackgroundTransparency""] = 0.30000001192092896;
G2L[""3""][""Size""] = UDim2.new(0.1469999998807907, 0, 0.289000004529953, 0);
G2L[""3""][""Position""] = UDim2.new(0.9100000262260437, 0, 0.5, 0);
G2L[""3""][""AutomaticSize""] = Enum.AutomaticSize.Y;
G2L[""3""][""Name""] = [[Emote]];

-- StarterGui.Bubble.Background.Emote.UIGradient
G2L[""4""] = Instance.new(""UIGradient"", G2L[""3""]);
G2L[""4""][""Transparency""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7062499523162842)};
G2L[""4""][""Rotation""] = 90;
G2L[""4""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

-- StarterGui.Bubble.Background.Emote.ScrollingFrame
G2L[""5""] = Instance.new(""ScrollingFrame"", G2L[""3""]);
G2L[""5""][""Active""] = true;
G2L[""5""][""BorderSizePixel""] = 0;
G2L[""5""][""CanvasSize""] = UDim2.new(0, 0, 3.5, 0);
G2L[""5""][""TopImage""] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];
G2L[""5""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""5""][""AnchorPoint""] = Vector2.new(0.5, 0);
G2L[""5""][""BackgroundTransparency""] = 1;
G2L[""5""][""Size""] = UDim2.new(0.9419999718666077, 0, 1, 0);
G2L[""5""][""ScrollBarThickness""] = 2;
G2L[""5""][""Position""] = UDim2.new(0.5, 0, 0, 0);
G2L[""5""][""AutomaticSize""] = Enum.AutomaticSize.Y;

-- StarterGui.Bubble.Background.Emote.ScrollingFrame.UIListLayout
G2L[""6""] = Instance.new(""UIListLayout"", G2L[""5""]);
G2L[""6""][""HorizontalAlignment""] = Enum.HorizontalAlignment.Center;
G2L[""6""][""Padding""] = UDim.new(0.009999999776482582, 0);
G2L[""6""][""SortOrder""] = Enum.SortOrder.LayoutOrder;

-- StarterGui.Bubble.Background.Emote.ScrollingFrame.EmoteButton
G2L[""7""] = Instance.new(""TextButton"", G2L[""5""]);
G2L[""7""][""TextWrapped""] = true;
G2L[""7""][""TextScaled""] = true;
G2L[""7""][""BackgroundColor3""] = Color3.fromRGB(31, 31, 31);
G2L[""7""][""TextSize""] = 14;
G2L[""7""][""FontFace""] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.ExtraLight, Enum.FontStyle.Normal);
G2L[""7""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""7""][""Visible""] = false;
G2L[""7""][""Size""] = UDim2.new(0.7689999938011169, 0, 0.03500000014901161, 0);
G2L[""7""][""Name""] = [[EmoteButton]];
G2L[""7""][""Text""] = [[Default]];
G2L[""7""][""Position""] = UDim2.new(0.11571411043405533, 0, 0, 0);
G2L[""7""][""BackgroundTransparency""] = 0.6000000238418579;

-- StarterGui.Bubble.Background.Emote.ScrollingFrame.EmoteButton.UICorner
G2L[""8""] = Instance.new(""UICorner"", G2L[""7""]);
G2L[""8""][""CornerRadius""] = UDim.new(0.20000000298023224, 2);

-- StarterGui.Bubble.Background.Emote.UIStroke
G2L[""9""] = Instance.new(""UIStroke"", G2L[""3""]);
G2L[""9""][""Color""] = Color3.fromRGB(255, 255, 255);
G2L[""9""][""Thickness""] = 3.9000000953674316;
G2L[""9""][""Transparency""] = 0.30000001192092896;

-- StarterGui.Bubble.Background.Emote.UIStroke.UIGradient
G2L[""a""] = Instance.new(""UIGradient"", G2L[""9""]);
G2L[""a""][""Transparency""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7062499523162842)};
G2L[""a""][""Rotation""] = 90;
G2L[""a""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

-- StarterGui.Bubble.Background.Updates
G2L[""b""] = Instance.new(""Frame"", G2L[""2""]);
G2L[""b""][""BorderSizePixel""] = 0;
G2L[""b""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""b""][""BackgroundTransparency""] = 0.30000001192092896;
G2L[""b""][""Size""] = UDim2.new(0.16506721079349518, 0, 0.3427152931690216, 0);
G2L[""b""][""BorderColor3""] = Color3.fromRGB(28, 43, 54);
G2L[""b""][""Position""] = UDim2.new(0.37466704845428467, 0, 0.32816553115844727, 0);
G2L[""b""][""Name""] = [[Updates]];

-- StarterGui.Bubble.Background.Updates.UIStroke
G2L[""c""] = Instance.new(""UIStroke"", G2L[""b""]);
G2L[""c""][""Color""] = Color3.fromRGB(255, 255, 255);
G2L[""c""][""Thickness""] = 3.9000000953674316;
G2L[""c""][""Transparency""] = 0.30000001192092896;

-- StarterGui.Bubble.Background.Updates.UIStroke.UIGradient
G2L[""d""] = Instance.new(""UIGradient"", G2L[""c""]);
G2L[""d""][""Transparency""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7062499523162842)};
G2L[""d""][""Rotation""] = 90;
G2L[""d""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

-- StarterGui.Bubble.Background.Updates.UIGradient
G2L[""e""] = Instance.new(""UIGradient"", G2L[""b""]);
G2L[""e""][""Transparency""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7062499523162842)};
G2L[""e""][""Rotation""] = 90;
G2L[""e""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

-- StarterGui.Bubble.Background.Updates.ImageLabel
G2L[""f""] = Instance.new(""ImageLabel"", G2L[""b""]);
G2L[""f""][""ZIndex""] = 2;
G2L[""f""][""BorderSizePixel""] = 0;
G2L[""f""][""BackgroundColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""f""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
G2L[""f""][""Image""] = [[rbxassetid://17563693105]];
G2L[""f""][""Size""] = UDim2.new(0.6889262795448303, 0, 0.6901991367340088, 0);
G2L[""f""][""BackgroundTransparency""] = 0.6499999761581421;
G2L[""f""][""Position""] = UDim2.new(0.4935310184955597, 0, 0.4738950729370117, 0);

-- StarterGui.Bubble.Background.Updates.ImageLabel.UICorner
G2L[""10""] = Instance.new(""UICorner"", G2L[""f""]);
G2L[""10""][""CornerRadius""] = UDim.new(500, 500);

-- StarterGui.Bubble.Background.Updates.ImageLabel.UIAspectRatioConstraint
G2L[""11""] = Instance.new(""UIAspectRatioConstraint"", G2L[""f""]);


-- StarterGui.Bubble.Background.Updates.ImageLabel.UIStroke
G2L[""12""] = Instance.new(""UIStroke"", G2L[""f""]);
G2L[""12""][""Thickness""] = 2;
G2L[""12""][""Transparency""] = 0.44999998807907104;

-- StarterGui.Bubble.Background.Updates.Version
G2L[""13""] = Instance.new(""TextLabel"", G2L[""b""]);
G2L[""13""][""TextWrapped""] = true;
G2L[""13""][""BorderSizePixel""] = 0;
G2L[""13""][""TextScaled""] = true;
G2L[""13""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""13""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L[""13""][""TextTransparency""] = 0.41999998688697815;
G2L[""13""][""TextSize""] = 14;
G2L[""13""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""13""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
G2L[""13""][""Size""] = UDim2.new(0.7644338607788086, 0, 0.09877938032150269, 0);
G2L[""13""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""13""][""Text""] = [[v0.2]];
G2L[""13""][""Name""] = [[Version]];
G2L[""13""][""BackgroundTransparency""] = 1;
G2L[""13""][""Position""] = UDim2.new(0.49688202142715454, 0, 0.046341076493263245, 0);

-- StarterGui.Bubble.Background.Updates.Version.UIAspectRatioConstraint
G2L[""14""] = Instance.new(""UIAspectRatioConstraint"", G2L[""13""]);
G2L[""14""][""AspectRatio""] = 7.7530975341796875;

-- StarterGui.Bubble.Background.Updates.UpdateNotice
G2L[""15""] = Instance.new(""Frame"", G2L[""b""]);
G2L[""15""][""ZIndex""] = 2;
G2L[""15""][""BorderSizePixel""] = 0;
G2L[""15""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""15""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
G2L[""15""][""BackgroundTransparency""] = 0.30000001192092896;
G2L[""15""][""Size""] = UDim2.new(0.9983000159263611, 0, 1.0011483430862427, 0);
G2L[""15""][""BorderColor3""] = Color3.fromRGB(28, 43, 54);
G2L[""15""][""Position""] = UDim2.new(1.5759036540985107, 0, 0.5011399388313293, 0);
G2L[""15""][""Name""] = [[UpdateNotice]];

-- StarterGui.Bubble.Background.Updates.UpdateNotice.UIStroke
G2L[""16""] = Instance.new(""UIStroke"", G2L[""15""]);
G2L[""16""][""Color""] = Color3.fromRGB(255, 255, 255);
G2L[""16""][""Thickness""] = 3.9000000953674316;
G2L[""16""][""Transparency""] = 0.30000001192092896;

-- StarterGui.Bubble.Background.Updates.UpdateNotice.UIStroke.UIGradient
G2L[""17""] = Instance.new(""UIGradient"", G2L[""16""]);
G2L[""17""][""Transparency""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7062499523162842)};
G2L[""17""][""Rotation""] = 90;
G2L[""17""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

-- StarterGui.Bubble.Background.Updates.UpdateNotice.UIGradient
G2L[""18""] = Instance.new(""UIGradient"", G2L[""15""]);
G2L[""18""][""Transparency""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7062499523162842)};
G2L[""18""][""Rotation""] = 90;
G2L[""18""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

-- StarterGui.Bubble.Background.Updates.UpdateNotice.ScrollingFrame
G2L[""19""] = Instance.new(""ScrollingFrame"", G2L[""15""]);
G2L[""19""][""Active""] = true;
G2L[""19""][""BorderSizePixel""] = 0;
G2L[""19""][""ScrollBarImageTransparency""] = 1;
G2L[""19""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""19""][""BackgroundTransparency""] = 1;
G2L[""19""][""Size""] = UDim2.new(0.9993212819099426, 0, 0.9982827305793762, 0);
G2L[""19""][""ScrollBarImageColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""19""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""19""][""ScrollBarThickness""] = 0;

-- StarterGui.Bubble.Background.Updates.UpdateNotice.ScrollingFrame.TextLabel
G2L[""1a""] = Instance.new(""TextLabel"", G2L[""19""]);
G2L[""1a""][""TextWrapped""] = true;
G2L[""1a""][""BorderSizePixel""] = 0;
G2L[""1a""][""TextScaled""] = true;
G2L[""1a""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""1a""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L[""1a""][""TextTransparency""] = 0.30000001192092896;
G2L[""1a""][""TextSize""] = 14;
G2L[""1a""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""1a""][""Size""] = UDim2.new(0.9992850422859192, 0, 0.03831418231129646, 0);
G2L[""1a""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""1a""][""Text""] = [[Updates at v0.2]];
G2L[""1a""][""BackgroundTransparency""] = 1;
G2L[""1a""][""Position""] = UDim2.new(0, 0, -5.8462799046310465e-08, 0);

-- StarterGui.Bubble.Background.Updates.UpdateNotice.ScrollingFrame.UIListLayout
G2L[""1b""] = Instance.new(""UIListLayout"", G2L[""19""]);
G2L[""1b""][""Padding""] = UDim.new(0.014999999664723873, 0);
G2L[""1b""][""SortOrder""] = Enum.SortOrder.LayoutOrder;

-- StarterGui.Bubble.Background.Updates.UpdateNotice.ScrollingFrame.TextLabel
G2L[""1c""] = Instance.new(""TextLabel"", G2L[""19""]);
G2L[""1c""][""TextWrapped""] = true;
G2L[""1c""][""BorderSizePixel""] = 0;
G2L[""1c""][""TextScaled""] = true;
G2L[""1c""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""1c""][""TextXAlignment""] = Enum.TextXAlignment.Left;
G2L[""1c""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.Light, Enum.FontStyle.Normal);
G2L[""1c""][""TextTransparency""] = 0.30000001192092896;
G2L[""1c""][""TextSize""] = 14;
G2L[""1c""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""1c""][""Size""] = UDim2.new(0.9992850422859192, 0, 0.03831418231129646, 0);
G2L[""1c""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""1c""][""Text""] = [[ New Added:]];
G2L[""1c""][""BackgroundTransparency""] = 1;
G2L[""1c""][""Position""] = UDim2.new(0, 0, -5.8462799046310465e-08, 0);

-- StarterGui.Bubble.Background.Updates.UpdateNotice.ScrollingFrame.TextLabel
G2L[""1d""] = Instance.new(""TextLabel"", G2L[""19""]);
G2L[""1d""][""TextWrapped""] = true;
G2L[""1d""][""BorderSizePixel""] = 0;
G2L[""1d""][""TextYAlignment""] = Enum.TextYAlignment.Top;
G2L[""1d""][""TextScaled""] = true;
G2L[""1d""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""1d""][""TextXAlignment""] = Enum.TextXAlignment.Left;
G2L[""1d""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.ExtraLight, Enum.FontStyle.Normal);
G2L[""1d""][""TextTransparency""] = 0.30000001192092896;
G2L[""1d""][""TextSize""] = 14;
G2L[""1d""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""1d""][""Size""] = UDim2.new(0.9992850422859192, 0, 0.04450395330786705, 0);
G2L[""1d""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""1d""][""Text""] = [[Bubble now supports mobile.]];
G2L[""1d""][""BackgroundTransparency""] = 1;
G2L[""1d""][""Position""] = UDim2.new(0, 0, 0.21362356841564178, 0);

-- StarterGui.Bubble.Background.Updates.UpdateNotice.ScrollingFrame.TextLabel
G2L[""1e""] = Instance.new(""TextLabel"", G2L[""19""]);
G2L[""1e""][""TextWrapped""] = true;
G2L[""1e""][""BorderSizePixel""] = 0;
G2L[""1e""][""TextScaled""] = true;
G2L[""1e""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""1e""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L[""1e""][""TextTransparency""] = 0.30000001192092896;
G2L[""1e""][""TextSize""] = 14;
G2L[""1e""][""TextColor3""] = Color3.fromRGB(255, 117, 117);
G2L[""1e""][""Size""] = UDim2.new(0.9992850422859192, 0, 0.03831418231129646, 0);
G2L[""1e""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""1e""][""Text""] = [[more Coming Soon  ]];
G2L[""1e""][""BackgroundTransparency""] = 1;
G2L[""1e""][""Position""] = UDim2.new(0, 0, -5.8462799046310465e-08, 0);

-- StarterGui.Bubble.Background.Updates.UpdateNotice.ScrollingFrame.TextLabel
G2L[""1f""] = Instance.new(""TextLabel"", G2L[""19""]);
G2L[""1f""][""TextWrapped""] = true;
G2L[""1f""][""BorderSizePixel""] = 0;
G2L[""1f""][""TextYAlignment""] = Enum.TextYAlignment.Top;
G2L[""1f""][""TextScaled""] = true;
G2L[""1f""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""1f""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L[""1f""][""TextTransparency""] = 0.30000001192092896;
G2L[""1f""][""TextSize""] = 14;
G2L[""1f""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""1f""][""Size""] = UDim2.new(0.9992850422859192, 0, 0.04078833386301994, 0);
G2L[""1f""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""1f""][""Text""] = [[More Emotes coming soon]];
G2L[""1f""][""BackgroundTransparency""] = 1;
G2L[""1f""][""Position""] = UDim2.new(0, 0, 0.3630230724811554, 0);

-- StarterGui.Bubble.Background.Updates.UpdateNotice.ScrollingFrame.TextLabel
G2L[""20""] = Instance.new(""TextLabel"", G2L[""19""]);
G2L[""20""][""TextWrapped""] = true;
G2L[""20""][""BorderSizePixel""] = 0;
G2L[""20""][""TextYAlignment""] = Enum.TextYAlignment.Top;
G2L[""20""][""TextScaled""] = true;
G2L[""20""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""20""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L[""20""][""TextTransparency""] = 0.30000001192092896;
G2L[""20""][""TextSize""] = 14;
G2L[""20""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""20""][""Size""] = UDim2.new(0.9992850422859192, 0, 0.04078833386301994, 0);
G2L[""20""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""20""][""Text""] = [[Settings coming soon]];
G2L[""20""][""BackgroundTransparency""] = 1;
G2L[""20""][""Position""] = UDim2.new(0.05273949354887009, 0, 0.9336599111557007, 0);

-- StarterGui.Bubble.Background.Updates.UpdateNotice.ScrollingFrame.TextLabel
G2L[""21""] = Instance.new(""TextLabel"", G2L[""19""]);
G2L[""21""][""TextWrapped""] = true;
G2L[""21""][""BorderSizePixel""] = 0;
G2L[""21""][""TextYAlignment""] = Enum.TextYAlignment.Top;
G2L[""21""][""TextScaled""] = true;
G2L[""21""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""21""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
G2L[""21""][""TextTransparency""] = 0.30000001192092896;
G2L[""21""][""TextSize""] = 14;
G2L[""21""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""21""][""Size""] = UDim2.new(0.9992850422859192, 0, 0.04078833386301994, 0);
G2L[""21""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""21""][""Text""] = [[Custom Animation Set]];
G2L[""21""][""BackgroundTransparency""] = 1;
G2L[""21""][""Position""] = UDim2.new(0, 0, 0.3630230724811554, 0);

-- StarterGui.Bubble.Background.Updates.Title
G2L[""22""] = Instance.new(""TextLabel"", G2L[""b""]);
G2L[""22""][""TextWrapped""] = true;
G2L[""22""][""BorderSizePixel""] = 0;
G2L[""22""][""TextScaled""] = true;
G2L[""22""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""22""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L[""22""][""TextTransparency""] = 0.1899999976158142;
G2L[""22""][""TextSize""] = 14;
G2L[""22""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""22""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
G2L[""22""][""Size""] = UDim2.new(0.7644338607788086, 0, 0.09112092107534409, 0);
G2L[""22""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""22""][""Text""] = [[Bubble]];
G2L[""22""][""Name""] = [[Title]];
G2L[""22""][""BackgroundTransparency""] = 1;
G2L[""22""][""Position""] = UDim2.new(0.4968821108341217, 0, 0.8887718915939331, 0);

-- StarterGui.Bubble.Background.Updates.Title.UIAspectRatioConstraint
G2L[""23""] = Instance.new(""UIAspectRatioConstraint"", G2L[""22""]);
G2L[""23""][""AspectRatio""] = 7.7530975341796875;

-- StarterGui.Bubble.Background.Updates.By
G2L[""24""] = Instance.new(""TextLabel"", G2L[""b""]);
G2L[""24""][""TextWrapped""] = true;
G2L[""24""][""BorderSizePixel""] = 0;
G2L[""24""][""TextScaled""] = true;
G2L[""24""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""24""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L[""24""][""TextTransparency""] = 0.41999998688697815;
G2L[""24""][""TextSize""] = 14;
G2L[""24""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""24""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
G2L[""24""][""Size""] = UDim2.new(0.7051666975021362, 0, 0.06871628016233444, 0);
G2L[""24""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""24""][""Text""] = [[By: Benk20r]];
G2L[""24""][""Name""] = [[By]];
G2L[""24""][""BackgroundTransparency""] = 1;
G2L[""24""][""Position""] = UDim2.new(0.496881902217865, 0, 0.9656418561935425, 0);

-- StarterGui.Bubble.Background.Updates.By.UIAspectRatioConstraint
G2L[""25""] = Instance.new(""UIAspectRatioConstraint"", G2L[""24""]);
G2L[""25""][""AspectRatio""] = 7.7530975341796875;

-- StarterGui.Bubble.Background.Animate
G2L[""26""] = Instance.new(""Frame"", G2L[""2""]);
G2L[""26""][""BorderSizePixel""] = 0;
G2L[""26""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""26""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
G2L[""26""][""BackgroundTransparency""] = 0.30000001192092896;
G2L[""26""][""Size""] = UDim2.new(0.2370000034570694, 0, 0.414000004529953, 0);
G2L[""26""][""Position""] = UDim2.new(0.13200515508651733, 0, 0.5, 0);
G2L[""26""][""AutomaticSize""] = Enum.AutomaticSize.Y;
G2L[""26""][""Name""] = [[Animate]];

-- StarterGui.Bubble.Background.Animate.UIGradient
G2L[""27""] = Instance.new(""UIGradient"", G2L[""26""]);
G2L[""27""][""Transparency""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7062499523162842)};
G2L[""27""][""Rotation""] = 90;
G2L[""27""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

-- StarterGui.Bubble.Background.Animate.ScrollingFrame
G2L[""28""] = Instance.new(""ScrollingFrame"", G2L[""26""]);
G2L[""28""][""Active""] = true;
G2L[""28""][""BorderSizePixel""] = 0;
G2L[""28""][""CanvasSize""] = UDim2.new(0, 0, 3.5, 0);
G2L[""28""][""TopImage""] = [[rbxasset://textures/ui/Scroll/scroll-middle.png]];
G2L[""28""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""28""][""VerticalScrollBarPosition""] = Enum.VerticalScrollBarPosition.Left;
G2L[""28""][""AnchorPoint""] = Vector2.new(0.5, 0);
G2L[""28""][""BackgroundTransparency""] = 1;
G2L[""28""][""Size""] = UDim2.new(0.9419999718666077, 0, 1, 0);
G2L[""28""][""ScrollBarThickness""] = 2;
G2L[""28""][""Position""] = UDim2.new(0.5, 0, 0, 0);
G2L[""28""][""AutomaticSize""] = Enum.AutomaticSize.XY;

-- StarterGui.Bubble.Background.Animate.ScrollingFrame.UIListLayout
G2L[""29""] = Instance.new(""UIListLayout"", G2L[""28""]);
G2L[""29""][""HorizontalAlignment""] = Enum.HorizontalAlignment.Center;
G2L[""29""][""Padding""] = UDim.new(0.009999999776482582, 0);
G2L[""29""][""SortOrder""] = Enum.SortOrder.LayoutOrder;

-- StarterGui.Bubble.Background.Animate.ScrollingFrame.AnimationButton
G2L[""2a""] = Instance.new(""TextButton"", G2L[""28""]);
G2L[""2a""][""TextWrapped""] = true;
G2L[""2a""][""TextScaled""] = true;
G2L[""2a""][""BackgroundColor3""] = Color3.fromRGB(31, 31, 31);
G2L[""2a""][""TextSize""] = 14;
G2L[""2a""][""FontFace""] = Font.new([[rbxasset://fonts/families/Inconsolata.json]], Enum.FontWeight.ExtraLight, Enum.FontStyle.Normal);
G2L[""2a""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""2a""][""Visible""] = false;
G2L[""2a""][""Size""] = UDim2.new(0.7689999938011169, 0, 0.029999999329447746, 0);
G2L[""2a""][""Name""] = [[AnimationButton]];
G2L[""2a""][""Text""] = [[Default]];
G2L[""2a""][""Position""] = UDim2.new(0.11571409553289413, 0, 6.622312298532051e-08, 0);
G2L[""2a""][""BackgroundTransparency""] = 0.6000000238418579;

-- StarterGui.Bubble.Background.Animate.ScrollingFrame.AnimationButton.UICorner
G2L[""2b""] = Instance.new(""UICorner"", G2L[""2a""]);
G2L[""2b""][""CornerRadius""] = UDim.new(0.20000000298023224, 2);

-- StarterGui.Bubble.Background.Animate.UIStroke
G2L[""2c""] = Instance.new(""UIStroke"", G2L[""26""]);
G2L[""2c""][""Color""] = Color3.fromRGB(255, 255, 255);
G2L[""2c""][""Thickness""] = 3.9000000953674316;
G2L[""2c""][""Transparency""] = 0.30000001192092896;

-- StarterGui.Bubble.Background.Animate.UIStroke.UIGradient
G2L[""2d""] = Instance.new(""UIGradient"", G2L[""2c""]);
G2L[""2d""][""Transparency""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7062499523162842)};
G2L[""2d""][""Rotation""] = 90;
G2L[""2d""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

-- StarterGui.Bubble.Main
G2L[""2e""] = Instance.new(""LocalScript"", G2L[""1""]);
G2L[""2e""][""Name""] = [[Main]];

-- StarterGui.Bubble.OtherModule
G2L[""2f""] = Instance.new(""ModuleScript"", G2L[""1""]);
G2L[""2f""][""Name""] = [[OtherModule]];

-- StarterGui.Bubble.AnimationPackages
G2L[""30""] = Instance.new(""ModuleScript"", G2L[""1""]);
G2L[""30""][""Name""] = [[AnimationPackages]];

-- StarterGui.Bubble.Emotes
G2L[""31""] = Instance.new(""ModuleScript"", G2L[""1""]);
G2L[""31""][""Name""] = [[Emotes]];

-- StarterGui.Bubble.Mobile
G2L[""32""] = Instance.new(""Folder"", G2L[""1""]);
G2L[""32""][""Name""] = [[Mobile]];

-- StarterGui.Bubble.Mobile.OpenCloseFrame
G2L[""33""] = Instance.new(""Frame"", G2L[""32""]);
G2L[""33""][""BorderSizePixel""] = 0;
G2L[""33""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""33""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
G2L[""33""][""BackgroundTransparency""] = 0.30000001192092896;
G2L[""33""][""Size""] = UDim2.new(0.06543102115392685, 0, 0.04599211737513542, 0);
G2L[""33""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""33""][""Position""] = UDim2.new(0.5440000295639038, 0, -0.02500000037252903, 0);
G2L[""33""][""Name""] = [[OpenCloseFrame]];

-- StarterGui.Bubble.Mobile.OpenCloseFrame.Button
G2L[""34""] = Instance.new(""TextButton"", G2L[""33""]);
G2L[""34""][""TextWrapped""] = true;
G2L[""34""][""BorderSizePixel""] = 0;
G2L[""34""][""TextTransparency""] = 0.41999998688697815;
G2L[""34""][""TextScaled""] = true;
G2L[""34""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""34""][""TextSize""] = 14;
G2L[""34""][""FontFace""] = Font.new([[rbxasset://fonts/families/RobotoMono.json]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L[""34""][""TextColor3""] = Color3.fromRGB(255, 255, 255);
G2L[""34""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
G2L[""34""][""Size""] = UDim2.new(1, 0, 0.6629999876022339, 0);
G2L[""34""][""Name""] = [[Button]];
G2L[""34""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
G2L[""34""][""Text""] = [[Hide]];
G2L[""34""][""Position""] = UDim2.new(0.5, 0, 0.5, 0);
G2L[""34""][""BackgroundTransparency""] = 1;

-- StarterGui.Bubble.Mobile.OpenCloseFrame.UIGradient
G2L[""35""] = Instance.new(""UIGradient"", G2L[""33""]);
G2L[""35""][""Transparency""] = NumberSequence.new{NumberSequenceKeypoint.new(0.000, 0),NumberSequenceKeypoint.new(1.000, 0.7062499523162842)};
G2L[""35""][""Rotation""] = 90;
G2L[""35""][""Color""] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(0, 0, 0)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

-- StarterGui.Bubble.Mobile.OpenCloseFrame.UICorner
G2L[""36""] = Instance.new(""UICorner"", G2L[""33""]);
G2L[""36""][""CornerRadius""] = UDim.new(0, 5);

-- Require G2L wrapper
local G2L_REQUIRE = require;
local G2L_MODULES = {};
local function require(Module:ModuleScript)
    local ModuleState = G2L_MODULES[Module];
    if ModuleState then
        if not ModuleState.Required then
            ModuleState.Required = true;
            ModuleState.Value = ModuleState.Closure();
        end
        return ModuleState.Value;
    end;
    return G2L_REQUIRE(Module);
end

G2L_MODULES[G2L[""2f""]] = {
Closure = function()
    local script = G2L[""2f""];
local other = {}

local afterName = """"

local function GenerateName (length:number)
	local alphabets = ""abcdefghijklmnopqrstuvwxyz""
	local numbers = ""1234567890""
	local alphacodes = [[`~!@#$%^&*()-_=+[]{}\|;':"",<.>?/]]

	local returnToSend = """"

	for i = 1, length do
		local letters = math.random(1, 3)
		if letters == 1 then
			local targetletter = alphabets
			local random = math.random(1, #targetletter)
			local selected = targetletter:sub(random, random)
			returnToSend = returnToSend .. selected
		elseif letters == 2 then
			local targetletter = numbers
			local random = math.random(1, #targetletter)
			local selected = targetletter:sub(random, random)
			returnToSend = returnToSend .. selected
		elseif letters == 3 then
			local targetletter = alphacodes
			local random = math.random(1, #targetletter)
			local selected = targetletter:sub(random, random)
			returnToSend = returnToSend .. selected
		end
	end

	return returnToSend
end

function other:MakeAnimate(speaker)
	coroutine.resume(coroutine.create(function()
		local script = speaker
		afterName = GenerateName(20)
		
		local beforeName = afterName
		local G2L = {};
		
		G2L[""1""] = script

		G2L[""2""] = Instance.new(""NumberValue"", G2L[""1""]);
		G2L[""2""][""Value""] = 1;
		G2L[""2""][""Name""] = [[ScaleDampeningPercent]];

		G2L[""3""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""3""][""Name""] = [[cheer]];

		G2L[""4""] = Instance.new(""Animation"", G2L[""3""]);
		G2L[""4""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507770677]];
		G2L[""4""][""Name""] = [[CheerAnim]];

		G2L[""5""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""5""][""Name""] = [[climb]];

		G2L[""6""] = Instance.new(""Animation"", G2L[""5""]);
		G2L[""6""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507765644]];
		G2L[""6""][""Name""] = [[ClimbAnim]];

		G2L[""7""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""7""][""Name""] = [[dance]];

		G2L[""8""] = Instance.new(""Animation"", G2L[""7""]);
		G2L[""8""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507771019]];
		G2L[""8""][""Name""] = [[Animation1]];

		G2L[""9""] = Instance.new(""NumberValue"", G2L[""8""]);
		G2L[""9""][""Value""] = 10;
		G2L[""9""][""Name""] = [[Weight]];

		G2L[""a""] = Instance.new(""Animation"", G2L[""7""]);
		G2L[""a""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507771955]];
		G2L[""a""][""Name""] = [[Animation2]];

		G2L[""b""] = Instance.new(""NumberValue"", G2L[""a""]);
		G2L[""b""][""Value""] = 10;
		G2L[""b""][""Name""] = [[Weight]];

		G2L[""c""] = Instance.new(""Animation"", G2L[""7""]);
		G2L[""c""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507772104]];
		G2L[""c""][""Name""] = [[Animation3]];

		G2L[""d""] = Instance.new(""NumberValue"", G2L[""c""]);
		G2L[""d""][""Value""] = 10;
		G2L[""d""][""Name""] = [[Weight]];

		G2L[""e""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""e""][""Name""] = [[dance2]];

		G2L[""f""] = Instance.new(""Animation"", G2L[""e""]);
		G2L[""f""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507776043]];
		G2L[""f""][""Name""] = [[Animation1]];

		G2L[""10""] = Instance.new(""NumberValue"", G2L[""f""]);
		G2L[""10""][""Value""] = 10;
		G2L[""10""][""Name""] = [[Weight]];

		G2L[""11""] = Instance.new(""Animation"", G2L[""e""]);
		G2L[""11""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507776720]];
		G2L[""11""][""Name""] = [[Animation2]];

		G2L[""12""] = Instance.new(""NumberValue"", G2L[""11""]);
		G2L[""12""][""Value""] = 10;
		G2L[""12""][""Name""] = [[Weight]];

		-- StarterGui.ScreenGui.dance2.Animation3
		G2L[""13""] = Instance.new(""Animation"", G2L[""e""]);
		G2L[""13""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507776879]];
		G2L[""13""][""Name""] = [[Animation3]];

		-- StarterGui.ScreenGui.dance2.Animation3.Weight
		G2L[""14""] = Instance.new(""NumberValue"", G2L[""13""]);
		G2L[""14""][""Value""] = 10;
		G2L[""14""][""Name""] = [[Weight]];

		G2L[""15""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""15""][""Name""] = [[dance3]];

		G2L[""16""] = Instance.new(""Animation"", G2L[""15""]);
		G2L[""16""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507777268]];
		G2L[""16""][""Name""] = [[Animation1]];

		G2L[""17""] = Instance.new(""NumberValue"", G2L[""16""]);
		G2L[""17""][""Value""] = 10;
		G2L[""17""][""Name""] = [[Weight]];

		G2L[""18""] = Instance.new(""Animation"", G2L[""15""]);
		G2L[""18""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507777451]];
		G2L[""18""][""Name""] = [[Animation2]];

		G2L[""19""] = Instance.new(""NumberValue"", G2L[""18""]);
		G2L[""19""][""Value""] = 10;
		G2L[""19""][""Name""] = [[Weight]];

		G2L[""1a""] = Instance.new(""Animation"", G2L[""15""]);
		G2L[""1a""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507777623]];
		G2L[""1a""][""Name""] = [[Animation3]];

		G2L[""1b""] = Instance.new(""NumberValue"", G2L[""1a""]);
		G2L[""1b""][""Value""] = 10;
		G2L[""1b""][""Name""] = [[Weight]];

		G2L[""1c""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""1c""][""Name""] = [[fall]];

		G2L[""1d""] = Instance.new(""Animation"", G2L[""1c""]);
		G2L[""1d""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507767968]];
		G2L[""1d""][""Name""] = [[FallAnim]];

		G2L[""1e""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""1e""][""Name""] = [[idle]];

		G2L[""1f""] = Instance.new(""Animation"", G2L[""1e""]);
		G2L[""1f""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507766388]];
		G2L[""1f""][""Name""] = [[Animation1]];

		G2L[""20""] = Instance.new(""NumberValue"", G2L[""1f""]);
		G2L[""20""][""Value""] = 9;
		G2L[""20""][""Name""] = [[Weight]];

		G2L[""21""] = Instance.new(""Animation"", G2L[""1e""]);
		G2L[""21""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507766666]];
		G2L[""21""][""Name""] = [[Animation2]];

		G2L[""22""] = Instance.new(""NumberValue"", G2L[""21""]);
		G2L[""22""][""Value""] = 1;
		G2L[""22""][""Name""] = [[Weight]];

		G2L[""23""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""23""][""Name""] = [[jump]];

		G2L[""24""] = Instance.new(""Animation"", G2L[""23""]);
		G2L[""24""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507765000]];
		G2L[""24""][""Name""] = [[JumpAnim]];

		G2L[""25""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""25""][""Name""] = [[laugh]];

		G2L[""26""] = Instance.new(""Animation"", G2L[""25""]);
		G2L[""26""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507770818]];
		G2L[""26""][""Name""] = [[LaughAnim]];

		G2L[""27""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""27""][""Name""] = [[mood]];

		G2L[""28""] = Instance.new(""Animation"", G2L[""27""]);
		G2L[""28""][""AnimationId""] = [[http://www.roblox.com/asset/?id=7715096377]];
		G2L[""28""][""Name""] = [[Animation1]];

		G2L[""29""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""29""][""Name""] = [[point]];

		G2L[""2a""] = Instance.new(""Animation"", G2L[""29""]);
		G2L[""2a""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507770453]];
		G2L[""2a""][""Name""] = [[PointAnim]];

		G2L[""2b""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""2b""][""Name""] = [[run]];

		G2L[""2c""] = Instance.new(""Animation"", G2L[""2b""]);
		G2L[""2c""][""AnimationId""] = [[http://www.roblox.com/asset/?id=913376220]];
		G2L[""2c""][""Name""] = [[RunAnim]];

		G2L[""2d""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""2d""][""Name""] = [[sit]];

		G2L[""2e""] = Instance.new(""Animation"", G2L[""2d""]);
		G2L[""2e""][""AnimationId""] = [[http://www.roblox.com/asset/?id=2506281703]];
		G2L[""2e""][""Name""] = [[SitAnim]];

		G2L[""2f""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""2f""][""Name""] = [[swim]];

		G2L[""30""] = Instance.new(""Animation"", G2L[""2f""]);
		G2L[""30""][""AnimationId""] = [[http://www.roblox.com/asset/?id=913384386]];
		G2L[""30""][""Name""] = [[Swim]];

		G2L[""31""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""31""][""Name""] = [[swimidle]];

		G2L[""32""] = Instance.new(""Animation"", G2L[""31""]);
		G2L[""32""][""AnimationId""] = [[http://www.roblox.com/asset/?id=913389285]];
		G2L[""32""][""Name""] = [[SwimIdle]];

		G2L[""33""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""33""][""Name""] = [[toollunge]];

		G2L[""34""] = Instance.new(""Animation"", G2L[""33""]);
		G2L[""34""][""AnimationId""] = [[http://www.roblox.com/asset/?id=522638767]];
		G2L[""34""][""Name""] = [[ToolLungeAnim]];

		G2L[""35""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""35""][""Name""] = [[toolnone]];

		G2L[""36""] = Instance.new(""Animation"", G2L[""35""]);
		G2L[""36""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507768375]];
		G2L[""36""][""Name""] = [[ToolNoneAnim]];

		G2L[""37""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""37""][""Name""] = [[toolslash]];

		G2L[""38""] = Instance.new(""Animation"", G2L[""37""]);
		G2L[""38""][""AnimationId""] = [[http://www.roblox.com/asset/?id=522635514]];
		G2L[""38""][""Name""] = [[ToolSlashAnim]];

		G2L[""39""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""39""][""Name""] = [[walk]];

		G2L[""3a""] = Instance.new(""Animation"", G2L[""39""]);
		G2L[""3a""][""AnimationId""] = [[http://www.roblox.com/asset/?id=913402848]];
		G2L[""3a""][""Name""] = [[WalkAnim]];

		G2L[""3b""] = Instance.new(""StringValue"", G2L[""1""]);
		G2L[""3b""][""Name""] = [[wave]];

		G2L[""3c""] = Instance.new(""Animation"", G2L[""3b""]);
		G2L[""3c""][""AnimationId""] = [[http://www.roblox.com/asset/?id=507770239]];
		G2L[""3c""][""Name""] = [[WaveAnim]];

		G2L[""3d""] = Instance.new(""BindableFunction"", G2L[""1""]);
		G2L[""3d""][""Name""] = [[PlayEmote]];

		local Character = script.Parent
		local Humanoid = Character:WaitForChild(""Humanoid"")
		local pose = ""Standing""

		local userNoUpdateOnLoopSuccess, userNoUpdateOnLoopValue = pcall(function() return UserSettings():IsUserFeatureEnabled(""UserNoUpdateOnLoop"") end)
		local userNoUpdateOnLoop = userNoUpdateOnLoopSuccess and userNoUpdateOnLoopValue

		local AnimationSpeedDampeningObject = script:FindFirstChild(""ScaleDampeningPercent"")
		local HumanoidHipHeight = 2

		local EMOTE_TRANSITION_TIME = 0.1

		local currentAnim = """"
		local currentAnimInstance = nil
		local currentAnimTrack = nil
		local currentAnimKeyframeHandler = nil
		local currentAnimSpeed = 1.0

		local runAnimTrack = nil
		local runAnimKeyframeHandler = nil

		local PreloadedAnims = {}

		local animTable = {}
		local animNames = { 
			idle = 	{	
				{ id = ""http://www.roblox.com/asset/?id=507766666"", weight = 1 },
				{ id = ""http://www.roblox.com/asset/?id=507766951"", weight = 1 },
				{ id = ""http://www.roblox.com/asset/?id=507766388"", weight = 9 }
			},
			walk = 	{ 	
				{ id = ""http://www.roblox.com/asset/?id=507777826"", weight = 10 } 
			}, 
			run = 	{
				{ id = ""http://www.roblox.com/asset/?id=507767714"", weight = 10 } 
			}, 
			swim = 	{
				{ id = ""http://www.roblox.com/asset/?id=507784897"", weight = 10 } 
			}, 
			swimidle = 	{
				{ id = ""http://www.roblox.com/asset/?id=507785072"", weight = 10 } 
			}, 
			jump = 	{
				{ id = ""http://www.roblox.com/asset/?id=507765000"", weight = 10 } 
			}, 
			fall = 	{
				{ id = ""http://www.roblox.com/asset/?id=507767968"", weight = 10 } 
			}, 
			climb = {
				{ id = ""http://www.roblox.com/asset/?id=507765644"", weight = 10 } 
			}, 
			sit = 	{
				{ id = ""http://www.roblox.com/asset/?id=2506281703"", weight = 10 } 
			},	
			toolnone = {
				{ id = ""http://www.roblox.com/asset/?id=507768375"", weight = 10 } 
			},
			toolslash = {
				{ id = ""http://www.roblox.com/asset/?id=522635514"", weight = 10 } 
			},
			toollunge = {
				{ id = ""http://www.roblox.com/asset/?id=522638767"", weight = 10 } 
			},
			wave = {
				{ id = ""http://www.roblox.com/asset/?id=507770239"", weight = 10 } 
			},
			point = {
				{ id = ""http://www.roblox.com/asset/?id=507770453"", weight = 10 } 
			},
			dance = {
				{ id = ""http://www.roblox.com/asset/?id=507771019"", weight = 10 }, 
				{ id = ""http://www.roblox.com/asset/?id=507771955"", weight = 10 }, 
				{ id = ""http://www.roblox.com/asset/?id=507772104"", weight = 10 } 
			},
			dance2 = {
				{ id = ""http://www.roblox.com/asset/?id=507776043"", weight = 10 }, 
				{ id = ""http://www.roblox.com/asset/?id=507776720"", weight = 10 }, 
				{ id = ""http://www.roblox.com/asset/?id=507776879"", weight = 10 } 
			},
			dance3 = {
				{ id = ""http://www.roblox.com/asset/?id=507777268"", weight = 10 }, 
				{ id = ""http://www.roblox.com/asset/?id=507777451"", weight = 10 }, 
				{ id = ""http://www.roblox.com/asset/?id=507777623"", weight = 10 } 
			},
			laugh = {
				{ id = ""http://www.roblox.com/asset/?id=507770818"", weight = 10 } 
			},
			cheer = {
				{ id = ""http://www.roblox.com/asset/?id=507770677"", weight = 10 } 
			},
		}
		
		wait(0.100)

		-- Existance in this list signifies that it is an emote, the value indicates if it is a looping emote
		local emoteNames = { wave = false, point = false, dance = true, dance2 = true, dance3 = true, laugh = false, cheer = false}

		math.randomseed(tick())

		function findExistingAnimationInSet(set, anim)
			if set == nil or anim == nil then
				return 0
			end

			for idx = 1, set.count, 1 do 
				if set[idx].anim.AnimationId == anim.AnimationId then
					return idx
				end
			end

			return 0
		end

		function configureAnimationSet(name, fileList)
			if (animTable[name] ~= nil) then
				for _, connection in pairs(animTable[name].connections) do
					connection:disconnect()
				end
			end
			animTable[name] = {}
			animTable[name].count = 0
			animTable[name].totalWeight = 0	
			animTable[name].connections = {}

			local allowCustomAnimations = true

			local success, msg = pcall(function() allowCustomAnimations = game:GetService(""StarterPlayer"").AllowCustomAnimations end)
			if not success then
				allowCustomAnimations = true
			end

			-- check for config values
			local config = script:FindFirstChild(name)
			if (allowCustomAnimations and config ~= nil) then
				table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
				table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))

				local idx = 0
				for _, childPart in pairs(config:GetChildren()) do
					if (childPart:IsA(""Animation"")) then
						local newWeight = 1
						local weightObject = childPart:FindFirstChild(""Weight"")
						if (weightObject ~= nil) then
							newWeight = weightObject.Value
						end
						animTable[name].count = animTable[name].count + 1
						idx = animTable[name].count
						animTable[name][idx] = {}
						animTable[name][idx].anim = childPart
						animTable[name][idx].weight = newWeight
						animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
						table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
						table.insert(animTable[name].connections, childPart.ChildAdded:connect(function(property) configureAnimationSet(name, fileList) end))
						table.insert(animTable[name].connections, childPart.ChildRemoved:connect(function(property) configureAnimationSet(name, fileList) end))
					end
				end
			end

			-- fallback to defaults
			if (animTable[name].count <= 0) then
				for idx, anim in pairs(fileList) do
					animTable[name][idx] = {}
					animTable[name][idx].anim = Instance.new(""Animation"")
					animTable[name][idx].anim.Name = name
					animTable[name][idx].anim.AnimationId = anim.id
					animTable[name][idx].weight = anim.weight
					animTable[name].count = animTable[name].count + 1
					animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
				end
			end

			-- preload anims
			for i, animType in pairs(animTable) do
				for idx = 1, animType.count, 1 do
					if PreloadedAnims[animType[idx].anim.AnimationId] == nil then
						Humanoid:LoadAnimation(animType[idx].anim)
						PreloadedAnims[animType[idx].anim.AnimationId] = true
					end				
				end
			end
		end

		------------------------------------------------------------------------------------------------------------

		function configureAnimationSetOld(name, fileList)
			if (animTable[name] ~= nil) then
				for _, connection in pairs(animTable[name].connections) do
					connection:disconnect()
				end
			end
			animTable[name] = {}
			animTable[name].count = 0
			animTable[name].totalWeight = 0	
			animTable[name].connections = {}

			local allowCustomAnimations = true

			local success, msg = pcall(function() allowCustomAnimations = game:GetService(""StarterPlayer"").AllowCustomAnimations end)
			if not success then
				allowCustomAnimations = true
			end

			-- check for config values
			local config = script:FindFirstChild(name)
			if (allowCustomAnimations and config ~= nil) then
				table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
				table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
				local idx = 1
				for _, childPart in pairs(config:GetChildren()) do
					if (childPart:IsA(""Animation"")) then
						table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
						animTable[name][idx] = {}
						animTable[name][idx].anim = childPart
						local weightObject = childPart:FindFirstChild(""Weight"")
						if (weightObject == nil) then
							animTable[name][idx].weight = 1
						else
							animTable[name][idx].weight = weightObject.Value
						end
						animTable[name].count = animTable[name].count + 1
						animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
						idx = idx + 1
					end
				end
			end

			-- fallback to defaults
			if (animTable[name].count <= 0) then
				for idx, anim in pairs(fileList) do
					animTable[name][idx] = {}
					animTable[name][idx].anim = Instance.new(""Animation"")
					animTable[name][idx].anim.Name = name
					animTable[name][idx].anim.AnimationId = anim.id
					animTable[name][idx].weight = anim.weight
					animTable[name].count = animTable[name].count + 1
					animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
					-- print(name .. "" ["" .. idx .. ""] "" .. anim.id .. "" ("" .. anim.weight .. "")"")
				end
			end

			-- preload anims
			for i, animType in pairs(animTable) do
				for idx = 1, animType.count, 1 do 
					Humanoid:LoadAnimation(animType[idx].anim)
				end
			end
		end

		-- Setup animation objects
		function scriptChildModified(child)
			local fileList = animNames[child.Name]
			if (fileList ~= nil) then
				configureAnimationSet(child.Name, fileList)
			end	
		end

		script.ChildAdded:connect(scriptChildModified)
		script.ChildRemoved:connect(scriptChildModified)

		-- Clear any existing animation tracks
		-- Fixes issue with characters that are moved in and out of the Workspace accumulating tracks
		local animator = if Humanoid then Humanoid:FindFirstChildOfClass(""Animator"") else nil
		if animator then
			local animTracks = animator:GetPlayingAnimationTracks()
			for i,track in ipairs(animTracks) do
				track:Stop(0)
				track:Destroy()
			end
		end

		for name, fileList in pairs(animNames) do 
			configureAnimationSet(name, fileList)
		end	

		-- ANIMATION

		-- declarations
		local toolAnim = ""None""
		local toolAnimTime = 0

		local jumpAnimTime = 0
		local jumpAnimDuration = 0.31

		local toolTransitionTime = 0.1
		local fallTransitionTime = 0.2

		local currentlyPlayingEmote = false

		-- functions

		function stopAllAnimations()
			local oldAnim = currentAnim

			-- return to idle if finishing an emote
			if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
				oldAnim = ""idle""
			end

			if currentlyPlayingEmote then
				oldAnim = ""idle""
				currentlyPlayingEmote = false
			end

			currentAnim = """"
			currentAnimInstance = nil
			if (currentAnimKeyframeHandler ~= nil) then
				currentAnimKeyframeHandler:disconnect()
			end

			if (currentAnimTrack ~= nil) then
				currentAnimTrack:Stop()
				currentAnimTrack:Destroy()
				currentAnimTrack = nil
			end

			-- clean up walk if there is one
			if (runAnimKeyframeHandler ~= nil) then
				runAnimKeyframeHandler:disconnect()
			end

			if (runAnimTrack ~= nil) then
				runAnimTrack:Stop()
				runAnimTrack:Destroy()
				runAnimTrack = nil
			end

			return oldAnim
		end

		function getHeightScale()
			if Humanoid then
				if not Humanoid.AutomaticScalingEnabled then
					return 1
				end

				local scale = Humanoid.HipHeight / HumanoidHipHeight
				if AnimationSpeedDampeningObject == nil then
					AnimationSpeedDampeningObject = script:FindFirstChild(""ScaleDampeningPercent"")
				end
				if AnimationSpeedDampeningObject ~= nil then
					scale = 1 + (Humanoid.HipHeight - HumanoidHipHeight) * AnimationSpeedDampeningObject.Value / HumanoidHipHeight
				end
				return scale
			end	
			return 1
		end

		local function rootMotionCompensation(speed)
			local speedScaled = speed * 1.25
			local heightScale = getHeightScale()
			local runSpeed = speedScaled / heightScale
			return runSpeed
		end

		local smallButNotZero = 0.0001
		local function setRunSpeed(speed)
			local normalizedWalkSpeed = 0.5 -- established empirically using current `913402848` walk animation
			local normalizedRunSpeed  = 1
			local runSpeed = rootMotionCompensation(speed)

			local walkAnimationWeight = smallButNotZero
			local runAnimationWeight = smallButNotZero
			local walkAnimationTimewarp = runSpeed/normalizedWalkSpeed
			local runAnimationTimerwarp = runSpeed/normalizedRunSpeed

			if runSpeed <= normalizedWalkSpeed then
				walkAnimationWeight = 1
			elseif runSpeed < normalizedRunSpeed then
				local fadeInRun = (runSpeed - normalizedWalkSpeed)/(normalizedRunSpeed - normalizedWalkSpeed)
				walkAnimationWeight = 1 - fadeInRun
				runAnimationWeight  = fadeInRun
				walkAnimationTimewarp = 1
				runAnimationTimerwarp = 1
			else
				runAnimationWeight = 1
			end
			currentAnimTrack:AdjustWeight(walkAnimationWeight)
			runAnimTrack:AdjustWeight(runAnimationWeight)
			currentAnimTrack:AdjustSpeed(walkAnimationTimewarp)
			runAnimTrack:AdjustSpeed(runAnimationTimerwarp)
		end

		function setAnimationSpeed(speed)
			if currentAnim == ""walk"" then
				setRunSpeed(speed)
			else
				if speed ~= currentAnimSpeed then
					currentAnimSpeed = speed
					currentAnimTrack:AdjustSpeed(currentAnimSpeed)
				end
			end
		end

		function keyFrameReachedFunc(frameName)
			if (frameName == ""End"") then
				if currentAnim == ""walk"" then
					if userNoUpdateOnLoop == true then
						if runAnimTrack.Looped ~= true then
							runAnimTrack.TimePosition = 0.0
						end
						if currentAnimTrack.Looped ~= true then
							currentAnimTrack.TimePosition = 0.0
						end
					else
						runAnimTrack.TimePosition = 0.0
						currentAnimTrack.TimePosition = 0.0
					end
				else
					local repeatAnim = currentAnim
					-- return to idle if finishing an emote
					if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
						repeatAnim = ""idle""
					end

					if currentlyPlayingEmote then
						if currentAnimTrack.Looped then
							-- Allow the emote to loop
							return
						end

						repeatAnim = ""idle""
						currentlyPlayingEmote = false
					end

					local animSpeed = currentAnimSpeed
					playAnimation(repeatAnim, 0.15, Humanoid)
					setAnimationSpeed(animSpeed)
				end
			end
		end

		function rollAnimation(animName)
			local roll = math.random(1, animTable[animName].totalWeight) 
			local origRoll = roll
			local idx = 1
			while (roll > animTable[animName][idx].weight) do
				roll = roll - animTable[animName][idx].weight
				idx = idx + 1
			end
			return idx
		end

		local function switchToAnim(anim, animName, transitionTime, humanoid)
			-- switch animation		
			if (anim ~= currentAnimInstance) then

				if (currentAnimTrack ~= nil) then
					currentAnimTrack:Stop(transitionTime)
					currentAnimTrack:Destroy()
				end

				if (runAnimTrack ~= nil) then
					runAnimTrack:Stop(transitionTime)
					runAnimTrack:Destroy()
					if userNoUpdateOnLoop == true then
						runAnimTrack = nil
					end
				end

				currentAnimSpeed = 1.0

				-- load it to the humanoid; get AnimationTrack
				currentAnimTrack = humanoid:LoadAnimation(anim)
				currentAnimTrack.Priority = Enum.AnimationPriority.Core

				-- play the animation
				currentAnimTrack:Play(transitionTime)
				currentAnim = animName
				currentAnimInstance = anim

				-- set up keyframe name triggers
				if (currentAnimKeyframeHandler ~= nil) then
					currentAnimKeyframeHandler:disconnect()
				end
				currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)

				-- check to see if we need to blend a walk/run animation
				if animName == ""walk"" then
					local runAnimName = ""run""
					local runIdx = rollAnimation(runAnimName)

					runAnimTrack = humanoid:LoadAnimation(animTable[runAnimName][runIdx].anim)
					runAnimTrack.Priority = Enum.AnimationPriority.Core
					runAnimTrack:Play(transitionTime)		

					if (runAnimKeyframeHandler ~= nil) then
						runAnimKeyframeHandler:disconnect()
					end
					runAnimKeyframeHandler = runAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)	
				end
			end
		end

		function playAnimation(animName, transitionTime, humanoid) 	
			local idx = rollAnimation(animName)
			local anim = animTable[animName][idx].anim

			switchToAnim(anim, animName, transitionTime, humanoid)
			currentlyPlayingEmote = false
		end

		function playEmote(emoteAnim, transitionTime, humanoid)
			switchToAnim(emoteAnim, emoteAnim.Name, transitionTime, humanoid)
			currentlyPlayingEmote = true
		end

		-------------------------------------------------------------------------------------------
		-------------------------------------------------------------------------------------------

		local toolAnimName = """"
		local toolAnimTrack = nil
		local toolAnimInstance = nil
		local currentToolAnimKeyframeHandler = nil

		function toolKeyFrameReachedFunc(frameName)
			if (frameName == ""End"") then
				playToolAnimation(toolAnimName, 0.0, Humanoid)
			end
		end


		function playToolAnimation(animName, transitionTime, humanoid, priority)	 		
			local idx = rollAnimation(animName)
			local anim = animTable[animName][idx].anim

			if (toolAnimInstance ~= anim) then

				if (toolAnimTrack ~= nil) then
					toolAnimTrack:Stop()
					toolAnimTrack:Destroy()
					transitionTime = 0
				end

				-- load it to the humanoid; get AnimationTrack
				toolAnimTrack = humanoid:LoadAnimation(anim)
				if priority then
					toolAnimTrack.Priority = priority
				end

				-- play the animation
				toolAnimTrack:Play(transitionTime)
				toolAnimName = animName
				toolAnimInstance = anim

				currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
			end
		end

		function stopToolAnimations()
			local oldAnim = toolAnimName

			if (currentToolAnimKeyframeHandler ~= nil) then
				currentToolAnimKeyframeHandler:disconnect()
			end

			toolAnimName = """"
			toolAnimInstance = nil
			if (toolAnimTrack ~= nil) then
				toolAnimTrack:Stop()
				toolAnimTrack:Destroy()
				toolAnimTrack = nil
			end

			return oldAnim
		end

		-------------------------------------------------------------------------------------------
		-------------------------------------------------------------------------------------------
		-- STATE CHANGE HANDLERS

		function onRunning(speed)
			local movedDuringEmote = currentlyPlayingEmote and Humanoid.MoveDirection == Vector3.new(0, 0, 0)
			local speedThreshold = movedDuringEmote and Humanoid.WalkSpeed or 0.75
			if speed > speedThreshold then
				local scale = 16.0
				playAnimation(""walk"", 0.2, Humanoid)
				setAnimationSpeed(speed / scale)
				pose = ""Running""
			else
				if emoteNames[currentAnim] == nil and not currentlyPlayingEmote then
					playAnimation(""idle"", 0.2, Humanoid)
					pose = ""Standing""
				end
			end
		end

		function onDied()
			pose = ""Dead""
		end

		function onJumping()
			playAnimation(""jump"", 0.1, Humanoid)
			jumpAnimTime = jumpAnimDuration
			pose = ""Jumping""
		end

		function onClimbing(speed)
			local scale = 5.0
			playAnimation(""climb"", 0.1, Humanoid)
			setAnimationSpeed(speed / scale)
			pose = ""Climbing""
		end

		function onGettingUp()
			pose = ""GettingUp""
		end

		function onFreeFall()
			if (jumpAnimTime <= 0) then
				playAnimation(""fall"", fallTransitionTime, Humanoid)
			end
			pose = ""FreeFall""
		end

		function onFallingDown()
			pose = ""FallingDown""
		end

		function onSeated()
			pose = ""Seated""
		end

		function onPlatformStanding()
			pose = ""PlatformStanding""
		end

		-------------------------------------------------------------------------------------------
		-------------------------------------------------------------------------------------------

		function onSwimming(speed)
			if speed > 1.00 then
				local scale = 10.0
				playAnimation(""swim"", 0.4, Humanoid)
				setAnimationSpeed(speed / scale)
				pose = ""Swimming""
			else
				playAnimation(""swimidle"", 0.4, Humanoid)
				pose = ""Standing""
			end
		end

		function animateTool()
			if (toolAnim == ""None"") then
				playToolAnimation(""toolnone"", toolTransitionTime, Humanoid, Enum.AnimationPriority.Idle)
				return
			end

			if (toolAnim == ""Slash"") then
				playToolAnimation(""toolslash"", 0, Humanoid, Enum.AnimationPriority.Action)
				return
			end

			if (toolAnim == ""Lunge"") then
				playToolAnimation(""toollunge"", 0, Humanoid, Enum.AnimationPriority.Action)
				return
			end
		end

		function getToolAnim(tool)
			for _, c in ipairs(tool:GetChildren()) do
				if c.Name == ""toolanim"" and c.className == ""StringValue"" then
					return c
				end
			end
			return nil
		end

		local lastTick = 0

		function stepAnimate(currentTime)
			local amplitude = 1
			local frequency = 1
			local deltaTime = currentTime - lastTick
			lastTick = currentTime

			local climbFudge = 0
			local setAngles = false

			if (jumpAnimTime > 0) then
				jumpAnimTime = jumpAnimTime - deltaTime
			end

			if (pose == ""FreeFall"" and jumpAnimTime <= 0) then
				playAnimation(""fall"", fallTransitionTime, Humanoid)
			elseif (pose == ""Seated"") then
				playAnimation(""sit"", 0.5, Humanoid)
				return
			elseif (pose == ""Running"") then
				playAnimation(""walk"", 0.2, Humanoid)
			elseif (pose == ""Dead"" or pose == ""GettingUp"" or pose == ""FallingDown"" or pose == ""Seated"" or pose == ""PlatformStanding"") then
				stopAllAnimations()
				amplitude = 0.1
				frequency = 1
				setAngles = true
			end

			-- Tool Animation handling
			local tool = Character:FindFirstChildOfClass(""Tool"")
			if tool and tool:FindFirstChild(""Handle"") then
				local animStringValueObject = getToolAnim(tool)

				if animStringValueObject then
					toolAnim = animStringValueObject.Value
					-- message recieved, delete StringValue
					animStringValueObject.Parent = nil
					toolAnimTime = currentTime + .3
				end

				if currentTime > toolAnimTime then
					toolAnimTime = 0
					toolAnim = ""None""
				end

				animateTool()		
			else
				stopToolAnimations()
				toolAnim = ""None""
				toolAnimInstance = nil
				toolAnimTime = 0
			end
		end

		-- connect events
		Humanoid.Died:connect(onDied)
		Humanoid.Running:connect(onRunning)
		Humanoid.Jumping:connect(onJumping)
		Humanoid.Climbing:connect(onClimbing)
		Humanoid.GettingUp:connect(onGettingUp)
		Humanoid.FreeFalling:connect(onFreeFall)
		Humanoid.FallingDown:connect(onFallingDown)
		Humanoid.Seated:connect(onSeated)
		Humanoid.PlatformStanding:connect(onPlatformStanding)
		Humanoid.Swimming:connect(onSwimming)

		-- setup emote chat hook
		game:GetService(""Players"").LocalPlayer.Chatted:connect(function(msg)
			local emote = """"
			if (string.sub(msg, 1, 3) == ""/e "") then
				emote = string.sub(msg, 4)
			elseif (string.sub(msg, 1, 7) == ""/emote "") then
				emote = string.sub(msg, 8)
			end

			if (pose == ""Standing"" and emoteNames[emote] ~= nil) then
				playAnimation(emote, EMOTE_TRANSITION_TIME, Humanoid)
			end
		end)

		-- emote bindable hook
		script:WaitForChild(""PlayEmote"").OnInvoke = function(emote)
			-- Only play emotes when idling
			if pose ~= ""Standing"" then
				return
			end

			if emoteNames[emote] ~= nil then
				-- Default emotes
				playAnimation(emote, EMOTE_TRANSITION_TIME, Humanoid)

				return true, currentAnimTrack
			elseif typeof(emote) == ""Instance"" and emote:IsA(""Animation"") then
				-- Non-default emotes
				playEmote(emote, EMOTE_TRANSITION_TIME, Humanoid)

				return true, currentAnimTrack
			end

			-- Return false to indicate that the emote could not be played
			return false
		end

		if Character.Parent ~= nil then
			-- initialize to idle
			playAnimation(""idle"", 0.1, Humanoid)
			pose = ""Standing""
		end

		-- loop to handle timed state transitions and tool animations
		while Character.Parent ~= nil do
			local _, currentGameTime = wait(0.1)
			stepAnimate(currentGameTime)
			if afterName ~= beforeName then
				warn(""Bubble Animate Fixed"")
				break
			end
		end
		
		return
	end))
end
return other
end;
};
G2L_MODULES[G2L[""30""]] = {
Closure = function()
    local script = G2L[""30""];
return {
	[""Default""] = {
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=507765644""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=507767968""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=507766388"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=507766666""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=507765000""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=913376220""
		},
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=913384386""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=913389285""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=913402848""
		},
	},
	[""Cartoony""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=742639220""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=742637544"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=742638445""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=742639812""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=742640026""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=742638842""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=742637151""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=742637942""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=742636889""
		},
	},
	[""Mr Toilet""] = {
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=2510192778""
		},
		[""fall""] = {
			[""FallAnim""] = ""rbxassetid://2510233257""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=4417977954"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=4417978624""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=2510197830""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=4417979645""
		},
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=2510199791""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=2510201162""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=2510202577""
		},
	},
	[""Elder""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=845401742""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=845392038""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=845403127""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=845403856""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=845397899"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=845400520""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=845396048""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=845398858""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=845386501""
		},
	},
	[""Vampire""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=1083464683""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=1083445855"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=1083450166""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=1083467779""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=1083473930""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=1083462077""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=1083443587""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=1083455352""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=1083439238""
		},
	},
	[""Toy""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=782844582""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=782841498"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=782845736""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=782845186""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=782843345""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=782842708""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=782846423""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=782847020""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=782843869""
		},
	},
	[""Ninja""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=656119721""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=656117400"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=656118341""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=656121397""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=656121766""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=656118852""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=656115606""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=656117878""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=656114359""
		},
	},
	[""Levitation""] = {
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=616006778"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=616008087""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=616008936""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=616013216""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=616003713""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=616010382""
		},
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=616011509""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=616012453""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=616005863""
		},
	},
	[""Oldschool""] = {
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=5319816685""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=5319839762""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=5319828216"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=5319831086""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=5319841935""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=5319844329""
		},
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=5319850266""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=5319852613""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=5319847204""
		},
	},
	[""Robot""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=616092998""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=616090535""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=616088211"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=616089559""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=616086039""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=616094091""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=616091570""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=616087089""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=616095330""
		},
	},
	[""Zombie""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=616165109""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=616161997""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=616158929"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=616160636""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=616156119""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=616166655""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=616163682""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=616157476""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=616168032""
		},
	},
	[""Mage""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=707876443""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=707742142"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=707855907""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=707894699""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=707897309""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=707861613""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=707829716""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=707853694""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=707826056""
		},
	},
	[""Superhero""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=616119360""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=616115533""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=616111295"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=616113536""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=616104706""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=616120861""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=616117076""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=616108001""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=616122287""
		},
	},
	[""Werewolf""] = {
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=1083182000""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=1083189019""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=1083195517"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=1083214717""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=1083218792""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=1083216690""
		},
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=1083222527""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=1083225406""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=1083178339""
		},
	},
	[""Astronaut""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=891639666""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=891621366"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=891633237""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=891663592""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=891636393""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=891636393""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=891617961""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=891627522""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=891609353""
		},
	},
	[""Stylish""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=616143378""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=616139451""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=616136790"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=616138447""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=616133594""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=616144772""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=616140816""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=616134815""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=616146177""
		},
	},
	[""Knight""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=657560551""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=657595757"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=657568135""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=657557095""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=657552124""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=657564596""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=657600338""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=658409194""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=658360781""
		},
	},
	[""Bubbly""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=910028158""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=910034870""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=910025107""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=910016857""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=910001910""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=910004836"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=910009958""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=910030921""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=909997997""
		},
	},
	[""Rthro""] = {
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=2510201162""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=2510198475""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=2510192778""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=2510195892""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=2510202577""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=2510197830""
		},
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=2510199791""
		},
		[""idle""] = {
			[""Animation2""] = ""http://www.roblox.com/asset/?id=2510197257"",
			[""Animation1""] = ""http://www.roblox.com/asset/?id=2510196951""
		},
	},
	[""Pirate""] = {
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=750784579""
		},
		[""idle""] = {
			[""Animation1""] = ""http://www.roblox.com/asset/?id=750781874"",
			[""Animation2""] = ""http://www.roblox.com/asset/?id=750782770""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=750785176""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=750785693""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=750783738""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=750780242""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=750782230""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=750779899""
		},
	},
	[""Ud'zal""] = {
		[""swimidle""] = {
			[""SwimIdle""] = ""http://www.roblox.com/asset/?id=2510201162""
		},
		[""run""] = {
			[""RunAnim""] = ""http://www.roblox.com/asset/?id=3236836670""
		},
		[""climb""] = {
			[""ClimbAnim""] = ""http://www.roblox.com/asset/?id=2510192778""
		},
		[""fall""] = {
			[""FallAnim""] = ""http://www.roblox.com/asset/?id=2510195892""
		},
		[""walk""] = {
			[""WalkAnim""] = ""http://www.roblox.com/asset/?id=3303162967""
		},
		[""jump""] = {
			[""JumpAnim""] = ""http://www.roblox.com/asset/?id=2510197830""
		},
		[""swim""] = {
			[""Swim""] = ""http://www.roblox.com/asset/?id=2510199791""
		},
		[""idle""] = {
			[""Animation2""] = ""rbxassetid://3303162549"",
			[""Animation1""] = ""rbxassetid://3303162274""
		},
	},
	--- Canceled Animations: Requested by: @retard142 -- https://www.youtube.com/channel/UCF4AHyR3mkvzC0CfCYN0AFQ
	[""Confident (UNRELEASED)""] = {
		[""climb""] = {
			[""ClimbAnim""] = ""rbxassetid://1069946257""
		},
		[""fall""] = {
			[""FallAnim""] = ""rbxassetid://1069973677""
		},
		[""idle""] = {
			[""Animation1""] = ""rbxassetid://1069977950"",
			[""Animation2""] = ""rbxassetid://1069987858""
		},
		[""jump""] = {
			[""JumpAnim""] = ""rbxassetid://1069984524""
		},
		[""run""] = {
			[""RunAnim""] = ""rbxassetid://1070001516""
		},
		[""walk""] = {
			[""WalkAnim""] = ""rbxassetid://1070001516""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""rbxassetid://1070012133""
		},
		[""swim""] = {
			[""Swim""] = ""rbxassetid://1070009914""
		},
	},
	[""Popstar (UNRELEASED)""] = {
		[""climb""] = {
			[""ClimbAnim""] = ""rbxassetid://1148811837""
		},
		[""fall""] = {
			[""FallAnim""] = ""rbxassetid://1212900995""
		},
		[""idle""] = {
			[""Animation1""] = ""rbxassetid://1212900985"",
			[""Animation2""] = ""rbxassetid://1212954651""
		},
		[""jump""] = {
			[""JumpAnim""] = ""rbxassetid://1212954642""
		},
		[""run""] = {
			[""RunAnim""] = ""rbxassetid://1212980348""
		},
		[""walk""] = {
			[""WalkAnim""] = ""rbxassetid://1212980348""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""rbxassetid://1151221899""
		},
		[""swim""] = {
			[""Swim""] = ""rbxassetid://1212852603""
		},
	},
	[""Patrol (UNRELEASED)""] = {
		[""climb""] = {
			[""ClimbAnim""] = ""rbxassetid://1148811837""
		},
		[""fall""] = {
			[""FallAnim""] = ""rbxassetid://1148863382""
		},
		[""idle""] = {
			[""Animation1""] = ""rbxassetid://1149612882"",
			[""Animation2""] = ""rbxassetid://1150842221""
		},
		[""jump""] = {
			[""JumpAnim""] = ""rbxassetid://1150944216""
		},
		[""run""] = {
			[""RunAnim""] = ""rbxassetid://1150967949""
		},
		[""walk""] = {
			[""WalkAnim""] = ""rbxassetid://1150967949""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""rbxassetid://1151221899""
		},
		[""swim""] = {
			[""Swim""] = ""rbxassetid://1151204998""
		},
	},
	[""Sneaky (UNRELEASED)""] = {
		[""climb""] = {
			[""ClimbAnim""] = ""rbxassetid://1132461372""
		},
		[""fall""] = {
			[""FallAnim""] = ""rbxassetid://1132469004""
		},
		[""idle""] = {
			[""Animation1""] = ""rbxassetid://1132473842"",
			[""Animation2""] = ""rbxassetid://1132477671""
		},
		[""jump""] = {
			[""JumpAnim""] = ""rbxassetid://1132489853""
		},
		[""run""] = {
			[""RunAnim""] = ""rbxassetid://1132494274""
		},
		[""walk""] = {
			[""WalkAnim""] = ""rbxassetid://1132494274""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""rbxassetid://1132506407""
		},
		[""swim""] = {
			[""Swim""] = ""rbxassetid://1132500520""
		},
	},
	[""Princess (UNRELEASED)""] = {
		[""climb""] = {
			[""ClimbAnim""] = ""rbxassetid://940996062""
		},
		[""fall""] = {
			[""FallAnim""] = ""rbxassetid://941000007""
		},
		[""idle""] = {
			[""Animation1""] = ""rbxassetid://941003647"",
			[""Animation2""] = ""rbxassetid://941013098""
		},
		[""jump""] = {
			[""JumpAnim""] = ""rbxassetid://941008832""
		},
		[""run""] = {
			[""RunAnim""] = ""rbxassetid://941015281""
		},
		[""walk""] = {
			[""WalkAnim""] = ""rbxassetid://941015281""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""rbxassetid://941025398""
		},
		[""swim""] = {
			[""Swim""] = ""rbxassetid://941018893""
		},
	},
	[""Cowboy (UNRELEASED)""] = {
		[""climb""] = {
			[""ClimbAnim""] = ""rbxassetid://1014380606""
		},
		[""fall""] = {
			[""FallAnim""] = ""rbxassetid://1014384571""
		},
		[""idle""] = {
			[""Animation1""] = ""rbxassetid://1014390418"",
			[""Animation2""] = ""rbxassetid://1014398616""
		},
		[""jump""] = {
			[""JumpAnim""] = ""rbxassetid://1014394726""
		},
		[""run""] = {
			[""RunAnim""] = ""rbxassetid://1014401683""
		},
		[""walk""] = {
			[""WalkAnim""] = ""rbxassetid://1014401683""
		},
		[""swimidle""] = {
			[""SwimIdle""] = ""rbxassetid://1014411816""
		},
		[""swim""] = {
			[""Swim""] = ""rbxassetid://1014406523""
		},
	}
}
end;
};
G2L_MODULES[G2L[""31""]] = {
Closure = function()
    local script = G2L[""31""];
return {
	[""Bbdance""] = ""rbxassetid://4265725525"",
	[""Cower""] = ""rbxassetid://4940563117"",
	[""Bored""] = ""rbxassetid://5230599789"",
	[""Disco""] = ""rbxassetid://3333136415"",
	[""Dizzy""] = ""rbxassetid://3361426436"",
	[""Dorky""] = ""rbxassetid://4212455378"",
	[""Fancyfeet""] = ""rbxassetid://3333432454"",
	[""Fashionable""] = ""rbxassetid://3333331310"",
	[""Fasthands""] = ""rbxassetid://4265701731"",
	[""Godlike""] = ""rbxassetid://3337994105"",
	[""Happy""] = ""rbxassetid://4841405708"",
	[""Heroland""] = ""rbxassetid://5104344710"",
	[""Jw""] = ""rbxassetid://4940564896"",
	[""Lined""] = ""rbxassetid://4049037604"",
	[""Monkey""] = ""http://www.roblox.com/asset/?id=10714388352"",
	[""Bodybuilder""] = ""rbxassetid://3333387824"",
	[""Rock""] = ""rbxassetid://3361276673"",
	[""Shuffle""] = ""rbxassetid://4349242221"",
	[""Shy""] = ""rbxassetid://3337978742"",
	[""Sleep""] = ""rbxassetid://4686925579"",
	[""T-Pose""] = ""rbxassetid://3338010159"",
	[""Twirl""] = ""rbxassetid://3334968680"",
	[""Cursty""] = ""http://www.roblox.com/asset/?id=10714061912"",
	[""Lotus""] = ""http://www.roblox.com/asset/?id=12507085924"",
	[""Don't Go""] = ""http://www.roblox.com/asset/?id=11309255148"",
	[""Floor""] = ""http://www.roblox.com/asset/?id=10214314957"",
	[""V Pose""] = ""http://www.roblox.com/asset/?id=10214319518"",
	[""Hips Poppin""] = ""http://www.roblox.com/asset/?id=10714364213"",
	[""Agree""] = ""http://www.roblox.com/asset/?id=10713954623"",
	[""Old Town""] = ""http://www.roblox.com/asset/?id=10714391240"",
	[""Dolphin""] = ""http://www.roblox.com/asset/?id=10714068222""
}
end;
};
-- StarterGui.Bubble.Main
local function C_2e()
local script = G2L[""2e""];
	local Players = game:GetService(""Players"")
	local RunService = game:GetService(""RunService"")
	local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
	local UserInputService = game:GetService(""UserInputService"")
	local Lighting = game:GetService(""Lighting"")
	local TweenService = game:GetService(""TweenService"")
	local StarterGui = game:GetService(""StarterGui"")
	local SoundService = game:GetService(""SoundService"")
	
	local Player = Players.LocalPlayer
	local Mouse = Player:GetMouse()
	
	repeat wait() until Player.CharacterAdded
	if Player.Character:WaitForChild(""Humanoid"").RigType == Enum.HumanoidRigType.R6 then script.Parent:Remove() return end
	if Player.Character:WaitForChild(""Animate"") then else script.Parent:Remove() return end
	if getgenv then if getgenv().Bubble then script.Parent:Remove() return else getgenv().Bubble = true end end
	
	print(""Needs: Passed."")
	
	-- -- -- -- GUI
	
	local ScreenGui = script.Parent
	local Background = ScreenGui.Background
	local AnimateFrame = Background.Animate
	local ScrollingAnimateFrame = AnimateFrame.ScrollingFrame
	local AnimationButton = ScrollingAnimateFrame.AnimationButton
	local EmoteFrame = Background.Emote
	local ScrollingEmoteFrame = EmoteFrame.ScrollingFrame
	local EmoteButton = ScrollingEmoteFrame.EmoteButton
	local UpdatesFrame = Background.Updates
	
	local MobileFolders = ScreenGui.Mobile
	local OpenCloseFrame = MobileFolders.OpenCloseFrame
	
	if RunService:IsStudio() then
	else
		if getgenv then
			ScreenGui.Parent = game.CoreGui
		end
	end
	
	local BlurEffect = Instance.new(""BlurEffect"", Lighting)
	BlurEffect.Size = 0 -- 17
	BlurEffect.Enabled = true
	
	-- Setup
	
	local FramePosition = {
		[""AnimateFrame""] = {
			[1] = UDim2.new(0.5, 0, 0.5, 0),
			[2] = AnimateFrame.Position
		},
		[""EmoteFrame""] = {
			[1] = UDim2.new(0.5, 0, 0.5, 0),
			[2] = EmoteFrame.Position
		}
	}
	
	UpdatesFrame.Position =  UDim2.new(UpdatesFrame.Position.X.Scale, 0, -1, 0)
	Background.Position = UDim2.new(-1, 0, 0, 0)
	AnimateFrame.Position = FramePosition.AnimateFrame[1]
	EmoteFrame.Position = FramePosition.EmoteFrame[1]
	EmoteFrame.BackgroundTransparency = 1
	EmoteFrame.UIStroke.Transparency = 1
	
	-- Tween Animations
	TweenService:Create(Background, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
		Position = UDim2.new(0, 0, 0, 0)
	}):Play()
	
	TweenService:Create(BlurEffect, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
		Size = 17
	}):Play()
	
	print(""GUI: Passed."")
	
	-- -- Values
	
	local AnimateName = ""Bubble_Animate""
	local BundleAnimationSelected, BundleAnimationSelectedBefore = ""Default"", ""Default""
	
	local Repeats = true
	local ProcessingAnimate = true
	
	local Keybinds = {
		OpenCloseKey = Enum.KeyCode.L
	}
	
	local Create = {}
	local Remove = {}
	local Change = {}
	local Sound = {}
	
	local GUI = {
		Open = true,
		OpenDirectionRight = false,
		CanBeOpen = false,
		UpdateFrame = {
			NotificationButtonBoolean = false,
			NotificationButtonCancelCount = {
				Now = 0,
				To = 3
			}
		},
		Animate = {},
		Emote = {}
	}
	
	local AnimationPackages = require(ScreenGui:FindFirstChild(""AnimationPackages""))
	local Emotes = require(ScreenGui:FindFirstChild(""Emotes""))
	
	print(""Values: Passed."")
	
	-- -- Load Exploit Workspace
	
	if getgenv then
		if readfile then
			if readfile(""Bubble.bl"") then
				BundleAnimationSelected = readfile(""Bubble.bl"")
				BundleAnimationSelectedBefore = readfile(""Bubble.bl"")
			end
		end
	end
	
	print(""Exploit: Passed."")
	
	-- -- -- Functions
	
	function Sound:Create(contents)
		local Sound
		if SoundService:FindFirstChild(""Natara"") then
			Sound = SoundService:FindFirstChild(""Natara"") else Sound = Instance.new(""Sound"", SoundService)
		end
		Sound.SoundId = ""http://www.roblox.com/asset/?id=""..contents.SoundId
		Sound.Name = contents.Name or ""Natara""
		Sound.Volume = contents.Volume or 1
		Sound.PlaybackSpeed = contents.PlaybackSpeed or 1
		Sound.Looped = contents.Looped or false
		coroutine.resume(coroutine.create(function()
			repeat wait() until Sound.IsLoaded
			Sound:Play()
		end))
	end
	
	function Remove:Animate()
		if Player.Character:FindFirstChild(""Animate"") then
			Player.Character:FindFirstChild(""Animate""):Destroy()
		end
	end
	
	function Create:Animate()
		Remove.Animate()
		local function SetBeforeAnimations ()
			if Player.Character:FindFirstChild(AnimateName) then
				if BundleAnimationSelected == BundleAnimationSelectedBefore then
				else
					Change:Animate(BundleAnimationSelectedBefore)
				end
				return
			end
		end
		
		BundleAnimationSelected = ""Default""
		
		local function CreateAnimate ()
			local Bubble_Animate = Instance.new(""Configuration"", Player.Character)
			Bubble_Animate.Name = AnimateName
			require(ScreenGui.OtherModule):MakeAnimate(Bubble_Animate)
			
			SetBeforeAnimations()
		end
		task.spawn(CreateAnimate)
	end
	
	function Change:Animate(value)
		BundleAnimationSelected = value
		BundleAnimationSelectedBefore = BundleAnimationSelected
		-- workspace
		if getgenv then
			writefile(""Bubble.bl"",BundleAnimationSelected)
		end
		if Player.Character:FindFirstChild(AnimateName) then
			local BubbleAnimate = Player.Character:FindFirstChild(AnimateName)
			for _1,v1 in pairs(BubbleAnimate:GetChildren()) do
				for _2,v2 in pairs(AnimationPackages[value]) do
					if v1.Name == _2 then
						for _,v in pairs(v1:GetChildren()) do
							if v2[v.Name] then
								v.AnimationId = v2[v.Name]
							else
								warn(""Junked Animation:"", v.Name, v1.Name, _2, _)
							end
						end
					end
				end
			end
		end
	end
	
	function Change:Emote(value)
		if Player.Character:FindFirstChild(AnimateName) then
			local BubbleAnimate = Player.Character:FindFirstChild(AnimateName)
			
			local Animation = Instance.new(""Animation"", Player.Character)
			Animation.AnimationId = value
			
			BubbleAnimate.PlayEmote:Invoke(Animation, 1, Player.Character.Humanoid)
			
			task.delay(0.030, function()
				Animation:Remove()
			end)
		end
	end
	
	print(""Functions: Passed."")
	
	-- -- -- UI Functions
	
	-- Changing Animation
	function GUI.Animate:GenerateButtons ()
		for int,value in pairs(AnimationPackages) do RunService.Heartbeat:Wait()
			local Button = AnimationButton:Clone()
			Button.Parent = ScrollingAnimateFrame
	
			Button.Size = UDim2.new(0, 0, 0, 0)
			Button.BackgroundTransparency = 1
			Button.TextTransparency = 1
	
			Button.Name = int
			TweenService:Create(Button, TweenInfo.new(0.35, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
				Size = UDim2.new(0, 0, AnimationButton.Size.Y.Scale, 0),
				BackgroundTransparency = AnimationButton.BackgroundTransparency,
			}):Play()
			task.delay(0.35, function()
				TweenService:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
					Size = AnimationButton.Size,
					TextTransparency = AnimationButton.TextTransparency
				}):Play()
			end)
			Button.Visible = true
			Button.Text = int
			Button.MouseButton1Click:Connect(function()
				Change:Animate(int)
				Sound:Create({
					SoundId = 9118191146
				})
			end)
			Button.MouseEnter:Connect(function()
				Sound:Create({
					SoundId = 6333717580
				})
			end)
		end
	end
	
	function GUI.Animate:ClearButtons ()
		for int,value in pairs(ScrollingAnimateFrame:GetChildren()) do RunService.Heartbeat:Wait()
			if value:IsA(""TextButton"") and value.Name ~= ""AnimationButton"" then
				TweenService:Create(value, TweenInfo.new(0.35, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
					Size = UDim2.new(0, 0, value.Size.Y.Scale, 0),
					TextTransparency = 1
				}):Play()
				task.delay(0.35, function()
					TweenService:Create(value, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
						Size = UDim2.new(0, 0, 0, 0),
						BackgroundTransparency = 1
					}):Play()
					task.wait(0.5)
					value:Remove()
				end)
			end
		end
	end
	
	----- E mOT es (Emotes)
	
	function GUI.Emote:GenerateButtons ()
		for int,value in pairs(Emotes) do RunService.Heartbeat:Wait()
			local Button = EmoteButton:Clone()
			Button.Parent = ScrollingEmoteFrame
	
			Button.Size = UDim2.new(0, 0, 0, 0)
			Button.BackgroundTransparency = 1
			Button.TextTransparency = 1
	
			Button.Name = int
			TweenService:Create(Button, TweenInfo.new(0.35, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
				Size = UDim2.new(0, 0, EmoteButton.Size.Y.Scale, 0),
				BackgroundTransparency = EmoteButton.BackgroundTransparency,
			}):Play()
			task.delay(0.35, function()
				TweenService:Create(Button, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
					Size = EmoteButton.Size,
					TextTransparency = EmoteButton.TextTransparency
				}):Play()
			end)
			Button.Visible = true
			Button.Text = int
			Button.MouseButton1Click:Connect(function()
				Change:Emote(value)
				Sound:Create({
					SoundId = 9118191146
				})
			end)
			Button.MouseEnter:Connect(function()
				Sound:Create({
					SoundId = 6333717580
				})
			end)
		end
	end
	
	function GUI.Emote:ClearButtons ()
		for int,value in pairs(ScrollingEmoteFrame:GetChildren()) do RunService.Heartbeat:Wait()
			if value:IsA(""TextButton"") and value.Name ~= ""EmoteButton"" then
				TweenService:Create(value, TweenInfo.new(0.35, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
					Size = UDim2.new(0, 0, value.Size.Y.Scale, 0),
					TextTransparency = 1
				}):Play()
				task.delay(0.35, function()
					TweenService:Create(value, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
						Size = UDim2.new(0, 0, 0, 0),
						BackgroundTransparency = 1
					}):Play()
					task.wait(0.5)
					value:Remove()
				end)
			end
		end
	end
	
	-- Open/Close
	function GUI:OpenClose ()
		if GUI.Open then
			GUI.Open = false
			GUI.CanBeOpen = false
			GUI.OpenDirectionRight = not GUI.OpenDirectionRight
			local TweenTime = 0.9
			
			local BlurEffectTweenInfo = TweenInfo.new(TweenTime, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0)
			local BlurEffectTweenGoal = {Size = 0}
			local BlurEffectTween = TweenService:Create(BlurEffect, BlurEffectTweenInfo, BlurEffectTweenGoal)
			BlurEffectTween:Play()
			
			if GUI.OpenDirectionRight then
				TweenService:Create(UpdatesFrame, TweenInfo.new(TweenTime, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
					Position = UDim2.new(UpdatesFrame.Position.X.Scale, 0, 1.5, 0)
				}):Play()
			else
				TweenService:Create(UpdatesFrame, TweenInfo.new(TweenTime, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
					Position = UDim2.new(UpdatesFrame.Position.X.Scale, 0, -1, 0)
				}):Play()
			end
			
			GUI.Emote:ClearButtons()
			Sound:Create({
				SoundId = 1323739650,
			})
			TweenService:Create(EmoteFrame, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
				Position = FramePosition.EmoteFrame[1],
				BackgroundTransparency = 1
			}):Play()
			TweenService:Create(EmoteFrame.UIStroke, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
				Transparency = 1
			}):Play()
			
			GUI.Animate:ClearButtons()
			Sound:Create({
				SoundId = 1323739650,
			})
	
			TweenService:Create(AnimateFrame, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
				Position = FramePosition.AnimateFrame[1]
			}):Play()
	
			local BackgroundTweenInfo = TweenInfo.new(TweenTime, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0)
			local BackgroundTweenGoal = {Position = UDim2.new(-1, 0, 0, 0)}
			if GUI.OpenDirectionRight then
				BackgroundTweenGoal = {Position = UDim2.new(1, 0, 0, 0)}
			end
			local BackgroundTween = TweenService:Create(Background, BackgroundTweenInfo, BackgroundTweenGoal)
			BackgroundTween:Play()
	
			task.delay(1, function()
				GUI.CanBeOpen = true
			end)
		else
			GUI.Open = true
			GUI.CanBeOpen = false
			local TweenTime = 0.9
	
			local BlurEffectTweenInfo = TweenInfo.new(TweenTime, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0)
			local BlurEffectTweenGoal = {Size = 17}
			local BlurEffectTween = TweenService:Create(BlurEffect, BlurEffectTweenInfo, BlurEffectTweenGoal)
			BlurEffectTween:Play()
	
			local BackgroundTweenInfo = TweenInfo.new(TweenTime, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0)
			local BackgroundTweenGoal = {Position = UDim2.new(0, 0, 0, 0)}
			local BackgroundTween = TweenService:Create(Background, BackgroundTweenInfo, BackgroundTweenGoal)
			BackgroundTween:Play()
	
			task.delay(0.6, function()
				GUI.Animate:GenerateButtons()
				Sound:Create({
					SoundId = 1524549907,
				})
				coroutine.resume(coroutine.create(function()
					task.wait(1.3)
					GUI.Emote:GenerateButtons()
					Sound:Create({
						SoundId = 1524549907,
					})
				end))
				TweenService:Create(AnimateFrame, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
					Position = FramePosition.AnimateFrame[2]
				}):Play()
				TweenService:Create(EmoteFrame, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
					Position = FramePosition.EmoteFrame[2],
					BackgroundTransparency = 0.3
				}):Play()
				TweenService:Create(EmoteFrame.UIStroke, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
					Transparency = 0.3
				}):Play()
				TweenService:Create(UpdatesFrame, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
					Position = UDim2.new(UpdatesFrame.Position.X.Scale, 0, 0.328, 0)
				}):Play()
				task.wait(3)
				GUI.CanBeOpen = true
			end)
		end
	end
	
	OpenCloseFrame.Button.MouseButton1Click:Connect(function()
		if GUI.CanBeOpen then
			Sound:Create({
				SoundId = 9119848186,
			})
			GUI:OpenClose()
			if GUI.Open then
				TweenService:Create(OpenCloseFrame, TweenInfo.new(1, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut), {
					Size = UDim2.new(0, 0, 0.046, 0)
				}):Play()
				TweenService:Create(OpenCloseFrame.Button, TweenInfo.new(1, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut), {
					TextTransparency = 1
				}):Play()
				task.delay(2, function()
					OpenCloseFrame.Button.Text = ""Hide""
					TweenService:Create(OpenCloseFrame.Button, TweenInfo.new(1, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut), {
						TextTransparency = 0.42
					}):Play()
					TweenService:Create(OpenCloseFrame, TweenInfo.new(1, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut), {
						Size = UDim2.new(0.065, 0, 0.046, 0)
					}):Play()
				end)
			else
				TweenService:Create(OpenCloseFrame, TweenInfo.new(1, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut), {
					Size = UDim2.new(0, 0, 0.046, 0)
				}):Play()
				TweenService:Create(OpenCloseFrame.Button, TweenInfo.new(1, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut), {
					TextTransparency = 1
				}):Play()
				task.delay(1, function()
					OpenCloseFrame.Button.Text = ""Show""
					TweenService:Create(OpenCloseFrame.Button, TweenInfo.new(1, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut), {
						TextTransparency = 0.42
					}):Play()
					TweenService:Create(OpenCloseFrame, TweenInfo.new(1, Enum.EasingStyle.Cubic, Enum.EasingDirection.InOut), {
						Size = UDim2.new(0.065, 0, 0.046, 0)
					}):Play()
				end)
			end
		end
	end)
	
	function InputBegan (input, gameProcessedEvent)
		if not gameProcessedEvent then
			if input.KeyCode == Keybinds.OpenCloseKey then
				if GUI.CanBeOpen then
					GUI:OpenClose()
				end
			end
		end
	end
	UserInputService.InputBegan:Connect(InputBegan)
	
	function CharactedAdded (character:Model)
		Create:Animate()
	end
	Player.CharacterAdded:Connect(CharactedAdded)
	
	task.delay(2, function()
		GUI.Animate:GenerateButtons()
		coroutine.resume(coroutine.create(function()
			wait(1.3)
			GUI.Emote:GenerateButtons()
		end))
		TweenService:Create(AnimateFrame, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
			Position = FramePosition.AnimateFrame[2]
		}):Play()
		TweenService:Create(EmoteFrame, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
			Position = FramePosition.EmoteFrame[2],
			BackgroundTransparency = 0.3
		}):Play()
		TweenService:Create(EmoteFrame.UIStroke, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
			Transparency = 0.3
		}):Play()
		TweenService:Create(UpdatesFrame, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
			Position = UDim2.new(UpdatesFrame.Position.X.Scale, 0, 0.328, 0)
		}):Play()
		task.wait(3)
		GUI.CanBeOpen = true
	end)
	
	print(""Every Function: Passed"")
	
	-- -- -- -- Workspace Exploit Memory
	if getgenv then
		if readfile(""Bubble.bl"") then
			local information = readfile(""Bubble.bl"")
		end
	end
	
	print(""Exploit Memory: Passed"")
	
	if Player.CharacterAdded then
		Create:Animate()
	end
	
	-- Repeats
	while Repeats do RunService.RenderStepped:Wait()
		--if Player.CharacterAdded then
		--	ProcessingAnimate = true
		--else
		--	ProcessingAnimate = false
		--end
		-- ---- - - --- - ---- --
		if UpdatesFrame.Visible ~= true then
			if FramePosition.EmoteFrame[2] ~= UDim2.new(0.334, 0,0.5, 0) then
				GUI.CanBeOpen = false
				FramePosition.EmoteFrame[2] = UDim2.new(0.334, 0,0.5, 0)
				TweenService:Create(EmoteFrame, TweenInfo.new(2, Enum.EasingStyle.Quint, Enum.EasingDirection.InOut, 0, false, 0), {
					Position = FramePosition.EmoteFrame[2],
				}):Play()
				task.delay(2, function()
					GUI.CanBeOpen = true
				end)
			end
		end
		-- ---- - - --- - ---- --
		if Player.Character and Player.Character:FindFirstChild(""Animate"") then
			Player.Character:FindFirstChild(""Animate""):Destroy()
			warn(""Destroyed Roblox Animate"")
		end
		--if ProcessingAnimate then
		--	Create:Animate()
		--end
	end
	
end;
task.spawn(C_2e);

return G2L[""1""], require;"
LRrdixup,sql,zein69,SQL,Monday 20th of May 2024 09:57:02 PM CDT,"--Perintah JOIN
--select *
--from tabel_PK [jenis relasi] tabel_FK
--on tabel_PK.atribut_PK = tabel_FK.atribut_FK

--1. Tampilkan nim, nama, alamat, email, no_handphone dan nama prodi dari
--mahasiswa (tabel mahasiswa dan tabel prodi)
--nim, nama, alamat, email, no_handphone -> mahasiswa
--nama prodi -> prodi
--diketahui
--tabel_PK -> prodi
--tabel_FK -> mahasiswa
--atribut_PK dan atribut_FK -> kode_prodi
select nim, mahasiswa.nama, alamat, email, no_handphone, prodi.nama
from prodi inner join mahasiswa
on prodi.kode_prodi = mahasiswa.kode_prodi

--2. Tampilkan nim, nama, alamat, kode_matakuliah, tahun_ajaran dan
--semester dari perwalian mahasiswa (tabel mahasiswa dan tabel krs)
--NIM : 230030368
--diketahui
--tabel_PK -> mahasiswa
--tabel_FK -> krs
--atribut_PK dan atribut_FK -> nim
select mahasiswa.nim, nama, alamat, kode_matakuliah, tahun_ajaran, semester
from mahasiswa inner join krs 
on mahasiswa.nim = krs.nim

--3. Tampilkan nim, kode_matakuliah, nama matakuliah, tahun_ajaran dan
--semester dari krs mahasiswa (tabel matakuliah dan tabel krs)
--NIM : 230030402
select nim, nama, matakuliah.kode_matakuliah, tahun_ajaran, semester
from matakuliah inner join krs
on matakuliah.kode_matakuliah = krs.kode_matakuliah

--4. Tampilkan kode_matakuliah, nama matakuliah, tahun_ajaran dan
--semester yang ditampilkan pada setiap semester (tabel matakuliah_dibuka
--dan tabel matakuliah)
--NIM : 230030355
--tabel_PK -> matakuliah
--tabel_FK -> matakuliah_dibuka
--atribut_PK dan atribut_FK -> kode_matakuliah
select matakuliah.kode_matakuliah, nama, matakuliah_dibuka.tahun_ajaran, semester
from matakuliah_dibuka INNER JOIN matakuliah 
on matakuliah_dibuka.kode_matakuliah = matakuliah.kode_matakuliah

--5. Tampilkan kode_matakuliah, nama dosen, tahun_ajaran dan semester dari
--pengajaran dosen (tabel matakuliah_dibuka dan tabel dosen)
--NIM : 230030284
select kode_matakuliah, dosen.nama, tahun_ajaran, semester
from matakuliah_dibuka inner join dosen
on matakuliah_dibuka.kode_dosen = dosen.kode_dosen

--6. Tampilkan nim, nama, nama prodi, kode_matakuliah, tahun_ajaran dan
--semester dari krs tiap mahasiswa (tabel prodi, tabel mahasiswa dan tabel
--krs)
--select *
--from tabel_1 [jenis relasi] tabel_2
--on tabel_1.atribut_1 = tabel_2.atribut_2
--[jenis relasi] tabel_3
--on tabel_2.atribut_2 = tabel_3.atribut_3
--diketahui
--tabel_1 => prodi
--tabel_2 => mahasiswa
--tabel_3 => krs
--atribut_1 dan atribut_2 => kode_prodi
--atribut_2 dan atribut_3 => nim
select mahasiswa.nim, mahasiswa.nama, prodi.nama, krs.kode_matakuliah, 
	tahun_ajaran, semester
from prodi inner join mahasiswa
on prodi.kode_prodi = mahasiswa.kode_prodi
inner join krs
on mahasiswa.nim = krs.nim

--7. Tampilkan nim, nama, kode_matakuliah, nama matakuliah, tahun ajaran
--dan semester dari krs tiap mahasiswa( tabel mahasiswa, tabel krs dan tabel
--matakuliah)
--NIM : 230030357
--diketahui
--tabel_1 => mahasiswa
--tabel_2 => krs
--tabel_3 => matakuliah
--atribut_1 dan atribut_2 => nim 
--atribut_2 dan atribut_3 => kode_matakuliah
select  mahasiswa.nim, mahasiswa.nama, matakuliah.kode_matakuliah, matakuliah.nama, tahun_ajaran,semester
from mahasiswa inner join krs
on mahasiswa.nim = krs.nim
inner join matakuliah
on krs.kode_matakuliah = matakuliah.kode_matakuliah

--8. Tampilkan kode_dosen, nama dosen, kode_matakuliah, nama_matakuliah
--tahun_ajaran, semester dari matakuliah yang ditawarkan (tabel dosen,
--tabel matakuliah dan tabel matakuliah_dibuka)
--NIM : 
select dosen.kode_dosen, dosen.nama, matakuliah.kode_matakuliah, matakuliah.nama, matakuliah_dibuka.tahun_ajaran, matakuliah_dibuka.semester
from matakuliah inner join matakuliah_dibuka
on matakuliah.kode_matakuliah = matakuliah_dibuka.kode_matakuliah
inner join dosen
on matakuliah_dibuka.kode_dosen = dosen.kode_dosen



--9. Tampilkan semua data mahasiswa dari nim, nama, alamat,
--kode_matakuliah, tahun_ajaran dan semester dari krs yang diambil, jika
--tidak ada matakuliah yang diambil tampilkan NULL. (tabel mahasiswa dan tabel krs)
select mahasiswa.nim, mahasiswa.nama, mahasiswa.alamat, krs.kode_matakuliah, krs.tahun_ajaran, krs.semester
from krs right join mahasiswa
on krs.nim = mahasiswa.nim

--10. Tampilkan semua data dosen dari kode_dosen, nama, kode_matakuliah,
--tahun_ajaran dan semester dari matakuliah yang dibuka, jika tidak ada
--tampilkan NULL. (tabel dosen dan tabel matakuliah_dibuka)
select dosen.kode_dosen, dosen.nama, matakuliah_dibuka.kode_matakuliah, matakuliah_dibuka.tahun_ajaran, matakuliah_dibuka.semester
from dosen left join matakuliah_dibuka
on dosen.kode_dosen = matakuliah_dibuka.kode_dosen


--11. Tampilkan data krs mahasiswa (6) berdasarkan kode_fakultas = F001 dan
--kode_prodi = SI
----- ragu
select krs.* --, kode_fakultas, mahasiswa.kode_prodi
from mahasiswa inner join krs
on mahasiswa.nim = krs.nim
inner join prodi
on prodi.kode_prodi = mahasiswa.kode_prodi
where mahasiswa.kode_prodi = 'SI' and prodi.kode_fakultas = 'F001'

--12. Tampilkan data krs mahasiswa (7) berdasarkan sks 2 atau 1
select krs.*, matakuliah.nama, matakuliah.sks
from krs inner join matakuliah
on krs.kode_matakuliah = matakuliah.kode_matakuliah
where matakuliah.sks = 1 or matakuliah.sks = 2
order by sks

--13. Tampilkan data dosen beserta matakuliah yang ditawarkan (8) dari
--kode_dosen = P002
select dosen.*, matakuliah.*
from dosen inner join matakuliah_dibuka
on matakuliah_dibuka.kode_dosen = dosen.kode_dosen
inner join matakuliah
on matakuliah.kode_matakuliah = matakuliah_dibuka.kode_matakuliah
where matakuliah_dibuka.kode_dosen = 'P002'

--14. Tampilkan semua data mahasiswa (9) yang hanya nilai kode_matakuliah,
--tahun_ajaran dan semester nilainya NULL
select mahasiswa.*, krs.*
from mahasiswa left join krs
on mahasiswa.nim = krs.nim
where kode_matakuliah is null and tahun_ajaran is null and semester is null

--15. Tampilkan semua data krs mahasiswa beserta dosen yang mengampu
--matakuliah tersebut, dimana tahun ajaran dan semester dari tabel
--matakuliah_buka harus sama dengan tahun_ajaran dan semester dari
--tabel krs. (prodi, mahasiswa, krs, matakuliah, matakuliah_buka dan
--dosen)

select krs.*, matakuliah_dibuka.*
from matakuliah_dibuka join krs
on krs.kode_matakuliah = matakuliah_dibuka.kode_matakuliah
inner join dosen
on dosen.kode_dosen = matakuliah_dibuka.kode_dosen

select * from krs
select * from matakuliah_dibuka
select * from prodi
select * from mahasiswa
select * from dosen
select * from matakuliah"
1y5R0K60,chance to draw duplicate in card game like Yo-Gi-Oh or Magic,avogatro,Python,Monday 20th of May 2024 08:57:46 PM CDT,"#find out and test the chance how many duplicate card player draw in a card game
#Given the card deck size and how many 3 card duplicate and 2 card duplicate exist in deck

import math
import random
deck_size = 40 #Number of cards in the pile
draw_size = 5  #Number of cards we are drawing OR cards in opening hand
duplication_group_size = {2:5,3:5} #Number of groups with 2 copies of the same cards or 3 copies of the same cards
                                   #{2:5,3:4} means 5 cards with 2 copies of itself are in the deck and 4 cards with 3 copies of itself are in the deck
test_sample_size= 1000000 # random test sample size
#TODO parameter validation

#calculate theoretical chance to draw no duplicate
def calc_draw_unique(deck_size,draw_size ,duplication_group_size):
    unique_card__total_size = deck_size - 2 * duplication_group_size[2] - 3 * duplication_group_size[3]
    number_no_duplication_case = 0
    # Only count cases where every cards in hand are unique.
    # out of 5 unique card I draw, some are those with 3 copies of itself in deck. The number of those is n3
    # some are those with 2 copies of itself in deck: The number of those is n2
    # some are unique: The number of those is unique_size
    # in case n2 = 0, number_no_duplication_case = C(5,0)*3**0*C(25,5)+
    # C(5,1)*3**1*C(25,4)+
    # C(5,2)*3**2*C(25,3)+
    # C(5,3)*3**3*C(25,2)+
    # C(5,4)*3**4*C(25,1)+
    # C(5,5)*3**5*C(25,0)
    for n3 in range(0,draw_size+1):
        for n2 in range(0,draw_size-n3+1):
            if n2<=duplication_group_size[2] and n3<=duplication_group_size[3]:
                unique_size = draw_size-n2-n3
                number_no_duplication_case += math.comb(duplication_group_size[3],n3)*3**n3 \
                                              * math.comb(duplication_group_size[2],n2)*2**n2 \
                                              * math.comb(unique_card__total_size,unique_size)
    
    
    return number_no_duplication_case / math.comb(deck_size, draw_size)




def create_test_deck(deck_size,duplication_group_size):
    result = {}
    index = 0
    for n in range(0,duplication_group_size[2]): #create cards with 2 copies of itself in deck
        result[index+2*n]='d'+str(n)
        result[index+2*n+1]='d'+str(n)
    index += duplication_group_size[2]*2
    for n in range(0,duplication_group_size[3]): #create cards with 3 copies of itself in deck
        result[index+3*n]='t'+str(n)
        result[index+3*n+1]='t'+str(n)
        result[index+3*n+2]='t'+str(n)
    index += duplication_group_size[3]*3
    for n in range(0,deck_size-duplication_group_size[2]*2-duplication_group_size[3]*3): #create unique cards
        result[index+n]='u'+str(n)
    return result

def get_random_sample(deck,draw_size):
    return random.sample(sorted(deck.items()), draw_size)

def has_duplicate(sample):
    sample_list = dict(sample).values()
    return len(sample_list) != len(set(sample_list))


#main function
test_deck = create_test_deck(deck_size,duplication_group_size)
number_test_duplicate = 0
for n in range(test_sample_size):
    s = get_random_sample(test_deck,draw_size)
    if has_duplicate(s):
        number_test_duplicate+=1


print (""deck size: "",deck_size)
print (""draw size: "",draw_size)
print (""duplication group size: "",duplication_group_size)
print (""test sample size: "",test_sample_size)
print(""theoretical chance to draw duplicates: "", 1 - calc_draw_unique(deck_size,draw_size,duplication_group_size))

print(""random test result: "", number_test_duplicate/test_sample_size)
"
4zcmHxyy,Producer - MLS Properties Grid with Filters - Pagination,janusivan,CSS,Monday 20th of May 2024 07:54:24 PM CDT,".paginationjs-prev,
.paginationjs-next {
    a {
        border-color: #5bc8e5 !important;
        &:hover {
            background: #5bc8e5 !important;
            &:before {
                border-bottom-color: #fff !important;
                border-left-color: #fff !important;
            }
        }
        &:before {
            border-bottom-color: #5bc8e5 !important;
            border-left-color: #5bc8e5 !important;
        }
    }
}
.paginationjs-page {
    margin-right:5px!important;
}
.paginationjs-page.active a{
    background-color: #5bc8e5 !important;
    border-color: #5bc8e5 !important;
}
.paginationjs-page:not(.active) a {
    background-color: #fff !important;
    border-color: #5bc8e5 !important;
    color:#5bc8e5!important;
    &:hover {
        background-color: #5bc8e5 !important;
        color:#fff!important;
    }
}"
DdX2h2mx,Semi-functioning ChatGPT Rotozoom,Dr_Davenstein,FreeBasic,Monday 20th of May 2024 07:28:34 PM CDT,"' FreeBASIC Rotozoom Function for 32-bit images
#include ""fbgfx.bi""

' Function to perform rotozoom on a 32-bit image
function Rotozoom(src as FB.Image Ptr, angle as Single, zoom as Single) as FB.Image Ptr
    dim as Integer src_width = src->width
    dim as Integer src_height = src->height
    dim as Integer dst_width = cint(src_width * zoom)
    dim as Integer dst_height = cint(src_height * zoom)
    dim as FB.Image Ptr dst = imagecreate(dst_width, dst_height, 0)

    dim as Integer src_pitch = src_width * sizeof(UInteger)
    dim as Integer dst_pitch = dst_width * sizeof(UInteger)
    dim as UInteger Ptr src_pixels = cast(UInteger Ptr, src + 1)
    dim as UInteger Ptr dst_pixels = cast(UInteger Ptr, dst + 1)

    dim as Single rad = angle * (3.14159265358979323846 / 180.0)
    dim as Single cos_angle = cos(rad) / zoom
    dim as Single sin_angle = sin(rad) / zoom

    dim as Single cx = (src_width - 1) / 2.0
    dim as Single cy = (src_height - 1) / 2.0
    dim as Single dx = (dst_width - 1) / 2.0
    dim as Single dy = (dst_height - 1) / 2.0

    for y as Integer = 0 to dst_height - 1
        for x as Integer = 0 to dst_width - 1
            dim as Single src_x = cos_angle * (x - dx) + sin_angle * (y - dy) + cx
            dim as Single src_y = -sin_angle * (x - dx) + cos_angle * (y - dy) + cy

            dim as Integer ix = cint(src_x)
            dim as Integer iy = cint(src_y)

            if ix >= 0 and ix < src_width and iy >= 0 and iy < src_height then
                dst_pixels[y * dst_width + x] = src_pixels[iy * src_width + ix]
            else
                dst_pixels[y * dst_width + x] = &h00000000 ' Transparent or black
            end if
        next
    next

    return dst
end function

' Main program to demonstrate the rotozoom function
screenres 800, 600, 32

' Load or create a source image (for example, loading from a file or drawing something)
dim as FB.Image Ptr src_image = imagecreate(200, 200, 0)
line src_image, (0, 0)-(199, 199), &hFFFF0000, BF ' Draw a red square

' Rotate and zoom the image
dim as Single angle = 45.0
dim as Single zoom = 1.5
dim as FB.Image Ptr dst_image = Rotozoom(src_image, angle, zoom)

' Display the resulting image
put (300, 200), dst_image, alpha

' Wait for a key press before exiting
sleep

' Clean up
imagedestroy(src_image)
imagedestroy(dst_image)
end"
RGJ1jZRj,2024-05-20_stats.json,rdp_snitch,JSON,Monday 20th of May 2024 07:18:07 PM CDT,"{
  ""ip"": {
    ""87.251.75.145"": 12,
    ""198.235.24.52"": 9,
    ""80.66.76.134"": 3,
    ""45.227.254.54"": 6,
    ""194.165.16.78"": 6,
    ""157.97.121.93"": 3,
    ""81.19.135.47"": 9,
    ""164.70.86.28"": 3,
    ""185.170.144.3"": 6,
    ""45.227.254.49"": 6,
    ""188.216.146.80"": 3,
    ""152.89.198.238"": 3,
    ""159.65.132.67"": 3,
    ""101.36.114.198"": 3,
    ""123.58.207.175"": 3,
    ""172.105.123.28"": 783,
    ""207.148.120.108"": 9,
    ""198.235.24.91"": 9,
    ""185.242.226.23"": 3,
    ""45.32.123.105"": 3,
    ""103.3.60.30"": 783,
    ""213.109.202.230"": 18,
    ""159.242.234.61"": 3,
    ""69.167.104.176"": 18,
    ""172.104.102.200"": 3,
    ""13.83.47.66"": 24,
    ""200.150.76.155"": 3,
    ""167.94.145.98"": 3,
    ""116.140.196.215"": 3,
    ""205.210.31.206"": 9,
    ""87.251.75.64"": 3,
    ""64.124.50.139"": 3,
    ""36.91.222.100"": 3,
    ""123.56.20.194"": 3,
    ""194.165.16.10"": 6,
    ""39.91.167.2"": 3,
    ""194.165.16.72"": 6,
    ""112.4.139.162"": 3,
    ""167.94.146.63"": 3,
    ""198.235.24.120"": 9,
    ""194.165.16.73"": 6
  },
  ""asn"": {
    ""AS208091"": 18,
    ""AS396982"": 36,
    ""AS267784"": 12,
    ""AS48721"": 24,
    ""AS396356"": 3,
    ""AS209588"": 9,
    ""AS2514"": 3,
    ""AS197414"": 6,
    ""AS30722"": 3,
    ""AS57523"": 3,
    ""AS14061"": 3,
    ""AS135377"": 6,
    ""AS63949"": 1569,
    ""AS20473"": 12,
    ""AS202425"": 3,
    ""AS208312"": 18,
    ""AS198605"": 3,
    ""AS40934"": 18,
    ""AS8075"": 24,
    ""AS14868"": 3,
    ""AS398705"": 6,
    ""AS4837"": 6,
    ""AS6461"": 3,
    ""AS7713"": 3,
    ""AS37963"": 3,
    ""AS56046"": 3
  },
  ""isp"": {
    ""Xhost Internet Solutions LP"": 24,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 45,
    ""Consumer-Network"": 3,
    ""InfoSphere"": 3,
    ""Vodafone"": 3,
    ""Chang Way Technologies Co. Limited"": 3,
    ""DigitalOcean, LLC"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Akamai Technologies"": 786,
    ""Choopa"": 9,
    ""IP Volume inc"": 3,
    ""The Constant Company"": 3,
    ""Akamai Technologies, Inc."": 783,
    ""Red Byte LLC"": 18,
    ""AVAST Software s.r.o."": 3,
    ""Fortinet"": 18,
    ""Microsoft Corporation"": 24,
    ""Ligga Telecomunica\u00e7\u00f5es S.A"": 3,
    ""Censys, Inc."": 6,
    ""China Unicom CHINA169 Network"": 3,
    ""Zayo Bandwidth"": 3,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""China Unicom Shandong Province Network"": 3,
    ""China Mobile Communications Corporation"": 3
  },
  ""org"": {
    ""Xhost Internet Solutions"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""UAB Host Baltic"": 12,
    ""Flyservers S.A"": 24,
    ""Unknown"": 18,
    ""Alviva Holding Limited"": 9,
    ""NTTPC Communications, Inc"": 3,
    ""Xhostis"": 6,
    ""Starcrecium Limited"": 3,
    ""DigitalOcean, LLC"": 3,
    ""Ucloud Information Technology (hk) Limited"": 6,
    ""Linode"": 1569,
    ""AI Spera"": 3,
    ""Vultr Holdings, LLC"": 3,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Prcdn"": 3,
    ""GTT"": 18,
    ""Microsoft Azure Cloud (westus)"": 24,
    ""DISAM - Dist.de Insumos Agr\u00edc.Sul Am\u00e9rica ltda"": 3,
    ""Censys, Inc."": 6,
    ""China United Network Communications Corporation Limited"": 3,
    ""Microsoft Corporation"": 3,
    ""Telekomunikasi Indonesia"": 3,
    ""Aliyun Computing Co., LTD"": 3,
    ""China Mobile Communications Corporation"": 3
  },
  ""regionName"": {
    ""North Holland"": 27,
    ""California"": 78,
    ""Vilnius"": 12,
    ""Kaunas"": 24,
    ""New Jersey"": 3,
    ""Hesse"": 18,
    ""Tokyo"": 6,
    ""Friuli Venezia Giulia"": 3,
    ""Moscow"": 21,
    ""South West"": 15,
    ""Seoul"": 3,
    ""England"": 3,
    ""Central Singapore"": 783,
    ""North West"": 783,
    ""Paran\u00e1"": 3,
    ""Beijing"": 6,
    ""Virginia"": 3,
    ""Jakarta"": 3,
    ""Shandong"": 3,
    ""Jiangsu"": 3
  },
  ""country"": {
    ""The Netherlands"": 27,
    ""United States"": 84,
    ""Lithuania"": 36,
    ""Germany"": 18,
    ""Japan"": 6,
    ""Italy"": 3,
    ""Russia"": 21,
    ""Singapore"": 1581,
    ""South Korea"": 3,
    ""United Kingdom"": 3,
    ""Brazil"": 3,
    ""China"": 12,
    ""Indonesia"": 3
  },
  ""account"": {
    ""Administr"": 24,
    ""kFrJIFZRo"": 3,
    ""xUjNnK"": 3,
    ""mftccp"": 3,
    ""Test"": 51,
    ""(empty)"": 15,
    ""Domain"": 21,
    ""hello"": 1647,
    ""Administrator"": 3,
    ""HeZUwWhEf"": 3,
    ""gXNgXh"": 3,
    ""RrRYiF"": 3,
    ""nmap"": 3,
    ""LjpJRyDiN"": 3,
    ""fLwBhJ"": 3,
    ""UxHQnJ"": 3,
    ""WzuhEfjmH"": 3,
    ""LHyHQi"": 3,
    ""PCZjhv"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1800
  },
  ""client_build"": {
    ""Unknown"": 1800
  },
  ""client_name"": {
    ""Unknown"": 1800
  },
  ""ip_type"": {
    ""Unknown"": 117,
    ""hosting"": 1653,
    ""proxy"": 24,
    ""mobile & proxy"": 3,
    ""mobile"": 3
  }
}"
XUmzk1p7,2024-05-20_stats.json,rdp_snitch,JSON,Monday 20th of May 2024 07:16:14 PM CDT,"{
  ""ip"": {
    ""87.251.75.145"": 8,
    ""198.235.24.52"": 6,
    ""80.66.76.134"": 2,
    ""45.227.254.54"": 4,
    ""194.165.16.78"": 4,
    ""157.97.121.93"": 2,
    ""81.19.135.47"": 6,
    ""164.70.86.28"": 2,
    ""185.170.144.3"": 4,
    ""45.227.254.49"": 4,
    ""188.216.146.80"": 2,
    ""152.89.198.238"": 2,
    ""159.65.132.67"": 2,
    ""101.36.114.198"": 2,
    ""123.58.207.175"": 2,
    ""172.105.123.28"": 522,
    ""207.148.120.108"": 6,
    ""198.235.24.91"": 6,
    ""185.242.226.23"": 2,
    ""45.32.123.105"": 2,
    ""103.3.60.30"": 522,
    ""213.109.202.230"": 12,
    ""159.242.234.61"": 2,
    ""69.167.104.176"": 12,
    ""172.104.102.200"": 2,
    ""13.83.47.66"": 16,
    ""200.150.76.155"": 2,
    ""167.94.145.98"": 2,
    ""116.140.196.215"": 2,
    ""205.210.31.206"": 6,
    ""87.251.75.64"": 2,
    ""64.124.50.139"": 2,
    ""36.91.222.100"": 2,
    ""123.56.20.194"": 2,
    ""194.165.16.10"": 4,
    ""39.91.167.2"": 2,
    ""194.165.16.72"": 4,
    ""112.4.139.162"": 2,
    ""167.94.146.63"": 2,
    ""198.235.24.120"": 6,
    ""194.165.16.73"": 4
  },
  ""asn"": {
    ""AS208091"": 12,
    ""AS396982"": 24,
    ""AS267784"": 8,
    ""AS48721"": 16,
    ""AS396356"": 2,
    ""AS209588"": 6,
    ""AS2514"": 2,
    ""AS197414"": 4,
    ""AS30722"": 2,
    ""AS57523"": 2,
    ""AS14061"": 2,
    ""AS135377"": 4,
    ""AS63949"": 1046,
    ""AS20473"": 8,
    ""AS202425"": 2,
    ""AS208312"": 12,
    ""AS198605"": 2,
    ""AS40934"": 12,
    ""AS8075"": 16,
    ""AS14868"": 2,
    ""AS398705"": 4,
    ""AS4837"": 4,
    ""AS6461"": 2,
    ""AS7713"": 2,
    ""AS37963"": 2,
    ""AS56046"": 2
  },
  ""isp"": {
    ""Xhost Internet Solutions LP"": 16,
    ""Google LLC"": 24,
    ""Flyservers S.A."": 30,
    ""Consumer-Network"": 2,
    ""InfoSphere"": 2,
    ""Vodafone"": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""DigitalOcean, LLC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Akamai Technologies"": 524,
    ""Choopa"": 6,
    ""IP Volume inc"": 2,
    ""The Constant Company"": 2,
    ""Akamai Technologies, Inc."": 522,
    ""Red Byte LLC"": 12,
    ""AVAST Software s.r.o."": 2,
    ""Fortinet"": 12,
    ""Microsoft Corporation"": 16,
    ""Ligga Telecomunica\u00e7\u00f5es S.A"": 2,
    ""Censys, Inc."": 4,
    ""China Unicom CHINA169 Network"": 2,
    ""Zayo Bandwidth"": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""China Unicom Shandong Province Network"": 2,
    ""China Mobile Communications Corporation"": 2
  },
  ""org"": {
    ""Xhost Internet Solutions"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""UAB Host Baltic"": 8,
    ""Flyservers S.A"": 16,
    ""Unknown"": 12,
    ""Alviva Holding Limited"": 6,
    ""NTTPC Communications, Inc"": 2,
    ""Xhostis"": 4,
    ""Starcrecium Limited"": 2,
    ""DigitalOcean, LLC"": 2,
    ""Ucloud Information Technology (hk) Limited"": 4,
    ""Linode"": 1046,
    ""AI Spera"": 2,
    ""Vultr Holdings, LLC"": 2,
    ""Chang Way Technologies Co. Limited"": 12,
    ""Prcdn"": 2,
    ""GTT"": 12,
    ""Microsoft Azure Cloud (westus)"": 16,
    ""DISAM - Dist.de Insumos Agr\u00edc.Sul Am\u00e9rica ltda"": 2,
    ""Censys, Inc."": 4,
    ""China United Network Communications Corporation Limited"": 2,
    ""Microsoft Corporation"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""China Mobile Communications Corporation"": 2
  },
  ""regionName"": {
    ""North Holland"": 18,
    ""California"": 52,
    ""Vilnius"": 8,
    ""Kaunas"": 16,
    ""New Jersey"": 2,
    ""Hesse"": 12,
    ""Tokyo"": 4,
    ""Friuli Venezia Giulia"": 2,
    ""Moscow"": 14,
    ""South West"": 10,
    ""Seoul"": 2,
    ""England"": 2,
    ""Central Singapore"": 522,
    ""North West"": 522,
    ""Paran\u00e1"": 2,
    ""Beijing"": 4,
    ""Virginia"": 2,
    ""Jakarta"": 2,
    ""Shandong"": 2,
    ""Jiangsu"": 2
  },
  ""country"": {
    ""The Netherlands"": 18,
    ""United States"": 56,
    ""Lithuania"": 24,
    ""Germany"": 12,
    ""Japan"": 4,
    ""Italy"": 2,
    ""Russia"": 14,
    ""Singapore"": 1054,
    ""South Korea"": 2,
    ""United Kingdom"": 2,
    ""Brazil"": 2,
    ""China"": 8,
    ""Indonesia"": 2
  },
  ""account"": {
    ""Administr"": 16,
    ""kFrJIFZRo"": 2,
    ""xUjNnK"": 2,
    ""mftccp"": 2,
    ""Test"": 34,
    ""(empty)"": 10,
    ""Domain"": 14,
    ""hello"": 1098,
    ""Administrator"": 2,
    ""HeZUwWhEf"": 2,
    ""gXNgXh"": 2,
    ""RrRYiF"": 2,
    ""nmap"": 2,
    ""LjpJRyDiN"": 2,
    ""fLwBhJ"": 2,
    ""UxHQnJ"": 2,
    ""WzuhEfjmH"": 2,
    ""LHyHQi"": 2,
    ""PCZjhv"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1200
  },
  ""client_build"": {
    ""Unknown"": 1200
  },
  ""client_name"": {
    ""Unknown"": 1200
  },
  ""ip_type"": {
    ""Unknown"": 78,
    ""hosting"": 1102,
    ""proxy"": 16,
    ""mobile & proxy"": 2,
    ""mobile"": 2
  }
}"
J8vxJTwY,2024-05-20_stats.json,rdp_snitch,JSON,Monday 20th of May 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""87.251.75.145"": 4,
    ""198.235.24.52"": 3,
    ""80.66.76.134"": 1,
    ""45.227.254.54"": 2,
    ""194.165.16.78"": 2,
    ""157.97.121.93"": 1,
    ""81.19.135.47"": 3,
    ""164.70.86.28"": 1,
    ""185.170.144.3"": 2,
    ""45.227.254.49"": 2,
    ""188.216.146.80"": 1,
    ""152.89.198.238"": 1,
    ""159.65.132.67"": 1,
    ""101.36.114.198"": 1,
    ""123.58.207.175"": 1,
    ""172.105.123.28"": 261,
    ""207.148.120.108"": 3,
    ""198.235.24.91"": 3,
    ""185.242.226.23"": 1,
    ""45.32.123.105"": 1,
    ""103.3.60.30"": 261,
    ""213.109.202.230"": 6,
    ""159.242.234.61"": 1,
    ""69.167.104.176"": 6,
    ""172.104.102.200"": 1,
    ""13.83.47.66"": 8,
    ""200.150.76.155"": 1,
    ""167.94.145.98"": 1,
    ""116.140.196.215"": 1,
    ""205.210.31.206"": 3,
    ""87.251.75.64"": 1,
    ""64.124.50.139"": 1,
    ""36.91.222.100"": 1,
    ""123.56.20.194"": 1,
    ""194.165.16.10"": 2,
    ""39.91.167.2"": 1,
    ""194.165.16.72"": 2,
    ""112.4.139.162"": 1,
    ""167.94.146.63"": 1,
    ""198.235.24.120"": 3,
    ""194.165.16.73"": 2
  },
  ""asn"": {
    ""AS208091"": 6,
    ""AS396982"": 12,
    ""AS267784"": 4,
    ""AS48721"": 8,
    ""AS396356"": 1,
    ""AS209588"": 3,
    ""AS2514"": 1,
    ""AS197414"": 2,
    ""AS30722"": 1,
    ""AS57523"": 1,
    ""AS14061"": 1,
    ""AS135377"": 2,
    ""AS63949"": 523,
    ""AS20473"": 4,
    ""AS202425"": 1,
    ""AS208312"": 6,
    ""AS198605"": 1,
    ""AS40934"": 6,
    ""AS8075"": 8,
    ""AS14868"": 1,
    ""AS398705"": 2,
    ""AS4837"": 2,
    ""AS6461"": 1,
    ""AS7713"": 1,
    ""AS37963"": 1,
    ""AS56046"": 1
  },
  ""isp"": {
    ""Xhost Internet Solutions LP"": 8,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 15,
    ""Consumer-Network"": 1,
    ""InfoSphere"": 1,
    ""Vodafone"": 1,
    ""Chang Way Technologies Co. Limited"": 1,
    ""DigitalOcean, LLC"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Akamai Technologies"": 262,
    ""Choopa"": 3,
    ""IP Volume inc"": 1,
    ""The Constant Company"": 1,
    ""Akamai Technologies, Inc."": 261,
    ""Red Byte LLC"": 6,
    ""AVAST Software s.r.o."": 1,
    ""Fortinet"": 6,
    ""Microsoft Corporation"": 8,
    ""Ligga Telecomunica\u00e7\u00f5es S.A"": 1,
    ""Censys, Inc."": 2,
    ""China Unicom CHINA169 Network"": 1,
    ""Zayo Bandwidth"": 1,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""China Unicom Shandong Province Network"": 1,
    ""China Mobile Communications Corporation"": 1
  },
  ""org"": {
    ""Xhost Internet Solutions"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""UAB Host Baltic"": 4,
    ""Flyservers S.A"": 8,
    ""Unknown"": 6,
    ""Alviva Holding Limited"": 3,
    ""NTTPC Communications, Inc"": 1,
    ""Xhostis"": 2,
    ""Starcrecium Limited"": 1,
    ""DigitalOcean, LLC"": 1,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Linode"": 523,
    ""AI Spera"": 1,
    ""Vultr Holdings, LLC"": 1,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Prcdn"": 1,
    ""GTT"": 6,
    ""Microsoft Azure Cloud (westus)"": 8,
    ""DISAM - Dist.de Insumos Agr\u00edc.Sul Am\u00e9rica ltda"": 1,
    ""Censys, Inc."": 2,
    ""China United Network Communications Corporation Limited"": 1,
    ""Microsoft Corporation"": 1,
    ""Telekomunikasi Indonesia"": 1,
    ""Aliyun Computing Co., LTD"": 1,
    ""China Mobile Communications Corporation"": 1
  },
  ""regionName"": {
    ""North Holland"": 9,
    ""California"": 26,
    ""Vilnius"": 4,
    ""Kaunas"": 8,
    ""New Jersey"": 1,
    ""Hesse"": 6,
    ""Tokyo"": 2,
    ""Friuli Venezia Giulia"": 1,
    ""Moscow"": 7,
    ""South West"": 5,
    ""Seoul"": 1,
    ""England"": 1,
    ""Central Singapore"": 261,
    ""North West"": 261,
    ""Paran\u00e1"": 1,
    ""Beijing"": 2,
    ""Virginia"": 1,
    ""Jakarta"": 1,
    ""Shandong"": 1,
    ""Jiangsu"": 1
  },
  ""country"": {
    ""The Netherlands"": 9,
    ""United States"": 28,
    ""Lithuania"": 12,
    ""Germany"": 6,
    ""Japan"": 2,
    ""Italy"": 1,
    ""Russia"": 7,
    ""Singapore"": 527,
    ""South Korea"": 1,
    ""United Kingdom"": 1,
    ""Brazil"": 1,
    ""China"": 4,
    ""Indonesia"": 1
  },
  ""account"": {
    ""Administr"": 8,
    ""kFrJIFZRo"": 1,
    ""xUjNnK"": 1,
    ""mftccp"": 1,
    ""Test"": 17,
    ""(empty)"": 5,
    ""Domain"": 7,
    ""hello"": 549,
    ""Administrator"": 1,
    ""HeZUwWhEf"": 1,
    ""gXNgXh"": 1,
    ""RrRYiF"": 1,
    ""nmap"": 1,
    ""LjpJRyDiN"": 1,
    ""fLwBhJ"": 1,
    ""UxHQnJ"": 1,
    ""WzuhEfjmH"": 1,
    ""LHyHQi"": 1,
    ""PCZjhv"": 1
  },
  ""keyboard"": {
    ""Unknown"": 600
  },
  ""client_build"": {
    ""Unknown"": 600
  },
  ""client_name"": {
    ""Unknown"": 600
  },
  ""ip_type"": {
    ""Unknown"": 39,
    ""hosting"": 551,
    ""proxy"": 8,
    ""mobile & proxy"": 1,
    ""mobile"": 1
  }
}"
JBzmcKxQ,monitor avisa reator,mickaelxd,Lua,Monday 20th of May 2024 07:01:58 PM CDT,"local monitor = peripheral.wrap(""top"") -- Configura o monitor na parte de cima
monitor.setTextScale(1) -- Define o tamanho do texto como 1

function updateMonitor(status)
    monitor.clear()
    local width, height = monitor.getSize()

    local line1 = ""REATOR""
    local line2 = status and ""ATIVO"" or ""DESLIGADO""

    monitor.setBackgroundColor(status and colors.green or colors.red)
    monitor.setTextColor(colors.white)
    monitor.clear()

    -- Centralizar a primeira linha
    local x1 = math.floor((width - #line1) / 2) + 1
    local y1 = math.floor(height / 2) - 1
    monitor.setCursorPos(x1, y1)
    monitor.write(line1)

    -- Centralizar a segunda linha
    local x2 = math.floor((width - #line2) / 2) + 1
    local y2 = math.floor(height / 2) + 1
    monitor.setCursorPos(x2, y2)
    monitor.write(line2)
end

-- Loop principal
while true do
    local signal = redstone.getInput(""back"") -- Altere ""back"" para a dire√ß√£o correta
    updateMonitor(signal)
    sleep(1) -- Aguarda 1 segundo antes de verificar novamente
end
"
TP3srn3k,RoomHolower,problemlow,Lua,Monday 20th of May 2024 06:56:18 PM CDT,"print(""Dimensions of room?"")
startingSize = tonumber(read())
direction = 0
function line()
    local size = startingSize
    while size > 0 do
        turtle.digUp()
        turtle.digDown()
        dig = false
        counter = 20
        while dig == true and counter > 0 do
            turtle.dig()
            counter = counter-1
        end
        moved = turtle.forward()
        if moved == false then
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.forward()
        end
        size = size-1
    end
end

function level()
    local size = startingSize
    while size > 0 do
        turtle.digUp()
        turtle.digDown()
        line()
        if direction == 0 then
            turtle.turnRight()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.forward()
            turtle.turnRight()
            direction = 1
        elseif direction == 1 then
            turtle.turnLeft()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.dig()
            turtle.forward()
            turtle.turnLeft()
            direction = 0
        end
        turtle.digUp()
        turtle.digDown()
        size = size-1
    end
end

level()
"
Kptb5WDk,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Monday 20th of May 2024 06:22:16 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..
...................................
"
