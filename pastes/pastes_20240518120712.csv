id,title,username,language,date,content
Z5jGyMdS,Untitled,dllbridge,C,Saturday 18th of May 2024 07:03:42 AM CDT,"



#include   <stdio.h>
#include  <string.h>  

struct C_CPU
{
    
	   char  szNameCPU[17];
	   int   nIndxPassMark;
	   int   nTDP;
	   int   nYear;	
	   int   nCores;
	   int   nThreads;
	   char  szSocket  [17];
	   char  szModelCPU[17];
	   int   nTechProcess;
};
 
void printInfoCPU(C_CPU *p);  
 
 
//////////////////////////////////////////////////////////////
int main()
{
	
	C_CPU  myCPU;


    strcpy(myCPU.szNameCPU, ""N5000"");
	myCPU.nIndxPassMark     = 2442;
	myCPU.nTDP              =    6;
    
	printInfoCPU(&myCPU);		 	
    	
  
return 0;
}

/////////////////////////////////////////////////////////////
void printInfoCPU(C_CPU *p)                                // 
{
	 
	 printf(""Name of CPU %s\n"", p->szNameCPU    ); 
	 printf(""Passmark =  %d\n"", p->nIndxPassMark); 	 
}

"
Dq2VJbDC,Untitled,MeehoweCK,C++,Saturday 18th of May 2024 07:01:11 AM CDT,"#include <fstream>
#include <cstdlib>
#include <ctime>
#include <iostream>

//int kontrolnaBanku(int* id) {
//	int suma{};
//	int mnozniki[7]{ 7, 1, 3, 9, 7, 1, 3 };
//	for (auto i{ 0 }; i < 7; ++i) {
//		suma += (id[i] * mnozniki[i]);
//	}
//	return (suma % 10);
//}
//
//std::string wygenerujIBAN() {
//	int idBanku[7];
//	for (auto i{ 0 }; i < 7; ++i) {
//		idBanku[i] = rand() % 10;
//	}
//	auto kontrolna{ kontrolnaBanku(idBanku) };
//}

template <typename T>
void zamien(T &a, T &b) {
	auto temp{ a };
	a = b;
	b = temp;
}

int main() {
	int a{ 17 };
	int b{ 6 };
	std::cout << ""a = "" << a << std::endl;
	std::cout << ""b = "" << b << std::endl;
	zamien(a, b);
	std::cout << ""Po zamianie: "" << std::endl;
	std::cout << ""a = "" << a << std::endl;
	std::cout << ""b = "" << b << std::endl;


	return 0;
}

//void Plansza::zamien(int x1, int y1, int x2, int y2) {
//	std::swap(tablica[x1][y1], tablica[x2][y2]);
//}"
9hP0hgcb,CC Wheat/Potato/etc. Farm,HeatedDZN,Lua,Saturday 18th of May 2024 06:58:21 AM CDT,"-- Function to clear the screen
function clearScreen()
    term.clear()
    term.setCursorPos(1, 1)
end

-- Function to display the welcome screen
function welcomeScreen()
    clearScreen()
    print(""Welcome to the Automated Wheat Farm"")
    print(""=================================="")
    print(""This program will help you set up"")
    print(""and manage an automated wheat farm"")
    print(""using ComputerCraft turtles."")
    print("""")
    print(""Press any key to continue..."")
    os.pullEvent(""key"")
end

-- Function to get user input for setup
function setupUI()
    clearScreen()
    print(""Wheat Farm Setup"")
    print(""================"")
    print(""Instructions:"")
    print(""1. Place the turtle over a chest."")
    print(""2. Ensure the chest contains the seeds of your choice in the first slot."")
    print(""3. Ensure the chest contains the fuel of your choice in the second slot."")
    print("""")
    print(""Press any key to confirm and continue..."")
    os.pullEvent(""key"")
end

-- Function to pick items from the chest and identify them
function pickAndIdentifyItems()
    clearScreen()
    print(""Picking items from the chest..."")

    -- Pick all items from the first slot
    turtle.select(1)
    while turtle.suckDown() do end
    local seedItem = turtle.getItemDetail(1)
    
    -- Drop the seed items back into the chest
    turtle.dropDown()

    -- Pick all items from the second slot
    turtle.select(1)
    while turtle.suckDown() do end
    local fuelItem = turtle.getItemDetail(1)
    
    -- Drop the fuel items back into the chest
    turtle.dropDown()

    if seedItem and fuelItem then
        print(""Items identified successfully!"")
        print(""Seed: "" .. seedItem.name)
        print(""Fuel: "" .. fuelItem.name)
        return seedItem.name, fuelItem.name
    else
        print(""Failed to pick items from the chest. Please check the chest setup."")
        return nil, nil
    end
end

-- Main function
function main()
    welcomeScreen()
    setupUI()
    local seedItem, fuelItem = pickAndIdentifyItems()
    if seedItem and fuelItem then
        print(""Setup Complete! Ready to start farming."")
    else
        print(""Setup failed. Please try again."")
    end
end

-- Start the setup process
main()
"
cPf5TM0S,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Saturday 18th of May 2024 06:54:24 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
18 May 2024"
4bPMvUpF,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 06:53:47 AM CDT,"#include <iostream>
#include <algorithm>
#include <set>
using namespace std;
int main() {
    int n;
    cin >> n;
    set<int> st;
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;

        st.insert(x);
    }

    for(int x : st) {
        cout << x << "" "" ;
    }
    cout << endl;

    for(set<int>::iterator it = st.begin(); it != st.end(); it++) {
        cout << *it << "" "";
    }


    return 0;
}"
eAwfgtjq,Untitled,kisazeky,Bash,Saturday 18th of May 2024 06:53:06 AM CDT,nooriganke91@gmail.com
aSuKhRt6,Untitled,MeehoweCK,C++,Saturday 18th of May 2024 06:51:37 AM CDT,"int modulo_large_number(const std::string& number, int divisor) {
    int result = 0;

    // Iterujemy przez każdą cyfrę liczby
    for (char digit : number) {
        // Aktualizujemy wynik o kolejną cyfrę
        result = (result * 10 + (digit - '0')) % divisor;
    }

    return result;
}"
VXvUcWHx,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 06:50:38 AM CDT,"#include <iostream>
#include <algorithm>
#include <set>
using namespace std;
int main() {
    int n;
    cin >> n;
    set<int> st;
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;

        st.insert(x);
    }

    for(int x : st) {
        cout << x << "" "" ;
    }


    return 0;
}"
TJhkYigu,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 06:46:10 AM CDT,"#include <iostream>
#include <algorithm>
#include <set>
using namespace std;
int main() {
    int n;
    cin >> n;
    set<int> st;
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;

        st.insert(x);
    }

    cout << st.size() << endl;
    return 0;
}"
w4frwPJ5,excavator,mathiaas,Lua,Saturday 18th of May 2024 06:41:40 AM CDT,"local args = {...}

if #args < 4 then
    print(""Usage: excavator <width> <depth> <height> <start>"")
    print(""<start> should be 'top' or 'bottom'"")
    return
end

local width = tonumber(args[1])
local depth = tonumber(args[2])
local height = tonumber(args[3])
local start = args[4]

local function mineRow(steps)
    for i = 1, steps do
        while turtle.detect() do
            turtle.dig()
        end
        turtle.forward()
    end
end

local function turnAround()
    turtle.turnRight()
    turtle.turnRight()
end

local function turnLeftThenMineRow()
    turtle.turnLeft()
	turtle.mine()
    if not turtle.detect() then
        turtle.forward()
    end
    turtle.turnLeft()
end

local function turnRightThenMineRow()
    turtle.turnRight()
	turtle.dig()
    if not turtle.detect() then
        turtle.forward()
    end
    turtle.turnRight()
end

local function mineLayer(width, depth)
    for i = 1, width do
        mineRow(depth - 1)
        if i ~= width then
            if i % 2 == 1 then
                turnRightThenMineRow()
            else
                turnLeftThenMineRow()
            end
        end
    end
end

local function mineCubeFromTop(width, depth, height)
    for j = 1, height do
        mineLayer(width, depth)
        if j ~= height then
            turtle.digDown()
            turtle.down()
            if width % 2 == 1 then
                turnAround()
            end
        end
    end
end

local function mineCubeFromBottom(width, depth, height)
    for j = 1, height do
        mineLayer(width, depth)
        if j ~= height then
            turtle.digUp()
            turtle.up()
            if width % 2 == 1 then
                turnAround()
            end
        end
    end
end

if start == ""top"" then
    mineCubeFromTop(width, depth, height)
elseif start == ""bottom"" then
    mineCubeFromBottom(width, depth, height)
else
    print(""Invalid start option. Use 'top' or 'bottom'."")
end
"
asqaAit7,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 06:32:59 AM CDT,"#include <iostream>
#include <algorithm>
using namespace std;
int main() {
    int n, x;
    cin >> n >> x;

    int niza[n], orginalna[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
        orginalna[i] = niza[i];
    }
    sort(niza, niza + n);
    int i = 0, j = n - 1;

    while(i < j) {
        if(niza[i] + niza[j] == x) {
            for(int k = 0; k < n; k++) {
                if(niza[i] == orginalna[k]) {
                    cout << k + 1 << endl;
                    orginalna[k] = -1;
                    break;
                }
            }
            for(int k = 0; k < n; k++) {
                if(niza[j] == orginalna[k]) {
                    cout << k + 1 << endl;
                    orginalna[k] = -1;
                    break;
                }
            }    
            return 0;
        }
        if(niza[i] + niza[j] < x) {
            i++;
        }
        else {
            j--;
        }
    }

    cout << ""IMPOSSIBLE"" << endl;
    return 0;
}"
VQU9vv56,mc,PaoWasTaken,JavaScript,Saturday 18th of May 2024 06:21:39 AM CDT,"var _0x3afa99=_0x3f16;(function(_0x56444f,_0x2aa39f){var _0x899c60=_0x3f16,_0x1ec5fd=_0x56444f();while(!![]){try{var _0x537320=parseInt(_0x899c60(0x1a2))/0x1+parseInt(_0x899c60(0x19e))/0x2*(-parseInt(_0x899c60(0x1a3))/0x3)+-parseInt(_0x899c60(0x19c))/0x4*(parseInt(_0x899c60(0x19d))/0x5)+parseInt(_0x899c60(0x19a))/0x6+-parseInt(_0x899c60(0x1a1))/0x7+parseInt(_0x899c60(0x19b))/0x8+parseInt(_0x899c60(0x1a0))/0x9*(parseInt(_0x899c60(0x19f))/0xa);if(_0x537320===_0x2aa39f)break;else _0x1ec5fd['push'](_0x1ec5fd['shift']());}catch(_0x42fee6){_0x1ec5fd['push'](_0x1ec5fd['shift']());}}}(_0x5bac,0x1e725),console[_0x3afa99(0x1a4)](world['getTimeOfD'+'ay']()));function _0x3f16(_0x44a522,_0xee7ed8){var _0x5bac94=_0x5bac();return _0x3f16=function(_0x3f1692,_0x1e3013){_0x3f1692=_0x3f1692-0x19a;var _0x46d22e=_0x5bac94[_0x3f1692];return _0x46d22e;},_0x3f16(_0x44a522,_0xee7ed8);}function _0x5bac(){var _0x3198fd=['18FIKINa','354319yoNWqn','73180FIHguJ','3MMAJcF','log','140190GjcIAv','321392pAfaEA','15080BkLrwH','95yYFVhW','496194caJmEC','1791670UgYFiZ'];_0x5bac=function(){return _0x3198fd;};return _0x5bac();}"
WpZW9PDR,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Saturday 18th of May 2024 06:20:09 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_750688.pdf

Working as of:
18 May 2024"
thisBu1Y,docker-compose.services.yml,Chinnaphat,YAML,Saturday 18th of May 2024 06:09:46 AM CDT,"services:
  proxy:
    image: gkg0139/baemon-proxy-server
    ports:
      - ""80:80""
      - ""443:443""
    networks:
      - services-network
    restart: unless-stopped
    depends_on:
      - frontend
      - backend

  frontend:
    image: gkg0139/baemon-frontend
    networks:
      - services-network
    restart: unless-stopped
    healthcheck:
      test: [""CMD-SHELL"", ""curl -f http://localhost || exit 1""]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    image: gkg0139/baemon-backend
    environment:
      - MYSQL_HOST=db
      - MYSQL_PASSWORD=86Iojkiyd
    networks:
      - db-network
      - services-network
    restart: unless-stopped
    depends_on:
      - db
    healthcheck:
      test: [""CMD-SHELL"", ""curl -f http://localhost || exit 1""]
      interval: 30s
      timeout: 10s
      retries: 5

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
    command: --interval 60 --cleanup
    restart: unless-stopped
    environment:
      WATCHTOWER_NOTIFICATION_REPORT: ""true""
      WATCHTOWER_NOTIFICATION_URL: >
        discord://lHj42FGSPfkziC3v6MmkHz-1Zio7h409hpFV3iiw4WdVdfhSY9AIqWlrFCKH6iNBWdTo@1234089000151683083
      WATCHTOWER_NOTIFICATION_TEMPLATE: |
        {{- if .Report -}}
          {{- with .Report -}}
            {{- if ( or .Updated .Failed ) -}}
        {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed
              {{- range .Updated}}
        - {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}
              {{- end -}}
              {{- range .Fresh}}
        - {{.Name}} ({{.ImageName}}): {{.State}}
            {{- end -}}
            {{- range .Skipped}}
        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}
            {{- end -}}
            {{- range .Failed}}
        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}
            {{- end -}}
          {{- end -}}
          {{- end -}}
        {{- else -}}
          {{range .Entries -}}{{.Message}}{{""\n""}}{{- end -}}
        {{- end -}}

networks:
  services-network:
    name: services-network
  db-network:
    name: db-network"
5kvkMLTU,data930,TestGuy1,JSON,Saturday 18th of May 2024 06:00:09 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'b796b4e980ecd282159c2123593e215441ac3dc48972b4c5abb89160a072b769fc3da81e8d75f1dfae5f28ca383edba1d4ec78b8e2e4fb5346cc19a00752f52eaedeee5745154f49027cb9f005580266881c08b6641db52f07144882500639715299dcc649e76341923a70a01dae559b1433e206744edf6b38b510baa9405a1f',
  otherdata: [
    '1dbc6e59a7fab0fc5fd3bca10646e677',
    '4ddc9fd0834f6ad7526b6136aaa8eced',
    'c78bcf913cd9de8c92bf2f8f7d6defc5',
    '9329b198380a4707f026b1e54ae1d45e',
    'e00d655dd700fe9fbc17b2bf0a08e3ad',
    'f643112a20e15ff2532d39ef12543feb',
    'fbde34505a0674cc6595584820036b4b',
    '4f4609816979e5df763ede92637444fb'
  ]
}"
QBLB36ri,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 05:58:34 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int main() {
    string s;
    cin >> s;
    
    int i = 0;
    long long res = 1;
    while(i < s.size()) {
        if(s[i] == 'T' or s[i] == 't') {
            res *= 3;
            i += 8;
        }
        else if(s[i] == 'd' or s[i] == 'D') {
            res *= 2;
            i += 5;
        }
        else if(s[i] == 'm' or s[i] == 'M') {
            res -= 1;
            i += 5;
        }
    }
    cout << res << endl;
    return 0;
}"
VAX66Rcd,24(гл+гл+согл),nq1s788,Python,Saturday 18th of May 2024 05:55:53 AM CDT,"#https://inf-ege.sdamgia.ru/problem?id=48472
data = open('24.txt').readline()
gl = 'AO'
sogl = 'CDF'
cnt = 0 #длина текущей строки
mx = 0 #ответ -- максимальная длина среди найденных
for x in data: #x -- текущая буква
    if ((cnt % 3 == 0 or cnt % 3 == 1) and (x in gl)) or ((cnt % 3 == 2) and (x in sogl)):
        cnt += 1
        if (cnt // 3) > mx and cnt % 3 == 0:
            mx = cnt // 3
    else:
        cnt = 0
print(mx)"
9KtzKjFj,24(xyzxyzx..),nq1s788,Python,Saturday 18th of May 2024 05:49:06 AM CDT,"#https://inf-ege.sdamgia.ru/problem?id=27689
data = open('24_demo.txt').readline()
s = 'XYZ'
cnt = 0 #длина текущей строки
mx = 0 #ответ -- максимальная длина среди найденных
for x in data: #x -- текущая буква
    if x == s[cnt % 3]:
        cnt += 1
        if cnt > mx:
            mx = cnt
    else:
        cnt = 0
print(mx)"
ZJSHP7aR,07. Area of Figures,myrdok123,Java,Saturday 18th of May 2024 05:40:31 AM CDT,"package ConditionalStatements;

import java.util.Scanner;

public class AreaOfFigures_07 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String figure = scanner.nextLine();

        //проверяваме каква е фигурата
        //square, rectangle, circle или triangle
        // %s - String, %d - int, %f - double, %c - char, %n or \n - new line

        double area = 0;

        if(figure.equals(""square"")){
            double side = Double.parseDouble(scanner.nextLine());
             area = side * side;
        } else if (figure.equals(""rectangle"")) {
            double sideA = Double.parseDouble(scanner.nextLine());
            double sideB = Double.parseDouble(scanner.nextLine());
             area = sideA * sideB;
        } else if (figure.equals(""circle"")) {
            double radius = Double.parseDouble(scanner.nextLine());
             area = radius * radius * Math.PI;
        } else if (figure.equals(""triangle"")) {
            double side = Double.parseDouble(scanner.nextLine());
            double height = Double.parseDouble(scanner.nextLine());
            area = (side * height) / 2;
        }

        System.out.printf(""%.3f"", area);
    }
}
"
X33eUp1r,06. Speed Info,myrdok123,Java,Saturday 18th of May 2024 05:39:42 AM CDT,"package ConditionalStatements;

import java.util.Scanner;

public class SpeedInfo_06 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        double speed = Double.parseDouble(scanner.nextLine());

        /*•	При скорост до 10 (включително) отпечатайте ""slow""
•	При скорост над 10 и до 50 (включително) отпечатайте ""average""
•	При скорост над 50 и до 150 (включително) отпечатайте ""fast""
•	При скорост над 150 и до 1000 (включително) отпечатайте ""ultra fast""
•	При по-висока скорост отпечатайте ""extremely fast""*/
        
        if(speed <= 10){
            System.out.println(""slow"");
        } else if (speed <= 50) {
            System.out.println(""average"");
        } else if (speed <= 150) {
            System.out.println(""fast"");
        } else if (speed <= 1000) {
            System.out.println(""ultra fast"");
        }else {
            System.out.println(""extremely fast"");
        }

    }
}
"
SUSF2SdQ,05. Number 100...2000,myrdok123,Java,Saturday 18th of May 2024 05:39:10 AM CDT,"package ConditionalStatements;

import java.util.Scanner;

public class Number100And200_05 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int number = Integer.parseInt(scanner.nextLine());

        if(number < 100){
            System.out.println(""Less than 100"");
        }else if(number <= 200){
            System.out.println(""Between 100 and 200"");
        } else {
            System.out.println(""Greater than 200"");
        }
    }
}
"
SkiQNjwP,04. Password Guess,myrdok123,Java,Saturday 18th of May 2024 05:38:41 AM CDT,"package ConditionalStatements;

import java.util.Scanner;

public class PasswordGuess_04 {
    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);

        String password = scanner.nextLine();

        if (password.equals(""s3cr3t!P@ssw0rd"")){
            System.out.println(""Welcome"");
        }else {
            System.out.println(""Wrong password!"");
        }
    }
}
"
iZ9bpiwE,03. Even or Odd,myrdok123,Java,Saturday 18th of May 2024 05:38:16 AM CDT,"package ConditionalStatements;

import java.util.Scanner;

public class EvenOrOdd_03 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int number = Integer.parseInt(scanner.nextLine());

        //Когато делим целочислено / -> цяло число
        //Когато делим с остатък % -> остатъка от делението
        //когато търсим четно число използваме израза (number % 2 == 0) -> получаваме дали number е четно число
        if (number % 2 == 0){
            System.out.println(""even"");
        }else {
            System.out.println(""odd"");
        }
    }
}
"
SZRdEHC6,02. Greater Number,myrdok123,Java,Saturday 18th of May 2024 05:37:46 AM CDT,"package ConditionalStatements;

import java.util.Scanner;

public class GreaterNumber_02 {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        int number1 = Integer.parseInt(scanner.nextLine());
        int number2 = Integer.parseInt(scanner.nextLine());

        //Проверяваме дали number1 > number2
            //true-> принтираме number1
            //false-> принтираме number2

        if (number1 > number2) {
            System.out.println(number1);
        }else {
            System.out.println(number2);
        }

    }
}
"
cUEvSvYy,01. Excellent Result,myrdok123,Java,Saturday 18th of May 2024 05:37:11 AM CDT,"package ConditionalStatements;

import java.util.Scanner;

public class ExcellentResult_01 {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        int grade = Integer.parseInt(scanner.nextLine());//прочитаме оценка от конзолата

        //Проверяваме дали оценката е >= 5 -> ако е вярно принтираме ""Excellent!""
        if(grade >= 5){
            System.out.println(""Excellent!"");
        }


    }
}
"
jQF6vrCV,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 05:35:34 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int main() {
    string s;
    cin >> s;
    
    int res = 0;
    for(int i = 0; i < s.size() - 1; i++) {
        if(s[i] != 'a' and s[i] != 'e' and s[i] != 'i' and s[i] != 'o' and s[i] != 'u') {
            if(s[i + 1] != 'a' and s[i + 1] != 'e' and s[i + 1] != 'i' and s[i + 1] != 'o' and s[i + 1] != 'u') {
                res++;
            }
        }
    }
    cout << res << endl;
    return 0;
}"
pwfxTj4d,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 05:11:03 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int main() {
    string s;
    cin >> s;
    
    for(int i = 0; i < s.size(); i++) {
        cout << s[i] << "" "";
    }
    return 0;
}"
32rdmmc9,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 05:05:07 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int main() {
    string s;
    cin >> s;

    cout << s << endl;
    return 0;
}"
4wdjhBLD,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 04:27:57 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int main() {
    int n, m, k;
    cin >> n >> m >> k;
    multiset<int> ms;
    vector<int> a(n), b(m);
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    for(int i = 0; i < m; i++) {
        cin >> b[i];
        ms.insert(b[i]);
    }
    sort(a.begin(), a.end());
    sort(b.begin(), b.end());
    int res = 0;
    for(int i = 0; i < n; i++) {
        int x = a[i] - k;
        multiset<int>::iterator it = ms.lower_bound(x);
        if(*it >= x and *it <= a[i] + k) {
            res++;
            ms.erase(it);
        }
    }
    cout << res << endl;
    return 0;
}"
VE2sKU4t,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 04:10:10 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int main() {
    set<int> st;

    int n;
    cin >> n;
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;
        st.insert(x);
    }

    for(set<int>::iterator it = st.begin(); it != st.end(); it++) {
        cout << *it << endl;
    }
    return 0;
}"
5KrKEJa0,22(хотя бы один из предыдущих процессов),nq1s788,Python,Saturday 18th of May 2024 04:07:21 AM CDT,"data = open('22 (4).csv').readlines()[1:]
n = len(data)
ids = {}
tt = [0] * n
prev = [[] for i in range(n)]
for i in range(n):
    ind, t, *args = data[i].split(';')[:-2]
    ind = int(ind)
    ids[ind] = i
    t = int(t)
    tt[i] = t
    for e in args:
        if e != '':
            x = ids[int(e.replace('""', ''))]
            prev[i].append(x)
answ = [0] * n
for i in range(n):
    if len(prev[i]) != 0:
        answ[i] = 1000000000000
        for lst in prev[i]:
            answ[i] = min(answ[i], answ[lst] + 3 + tt[i])
    else:
        answ[i] = tt[i]
print(max(answ))
"
qp0ReuNJ,Untitled,Josif_tepe,C++,Saturday 18th of May 2024 04:06:51 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int main() {
    set<int> st;

    int n;
    cin >> n;
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;
        st.insert(x);
    }

    for(int x : st) {
      cout << x << endl;  
    }

    return 0;
}"
FuCtDYra,22(id не с 1),nq1s788,Python,Saturday 18th of May 2024 04:04:34 AM CDT,"#https://inf-ege.sdamgia.ru/problem?id=48443
data = open('22 (4).csv').readlines()[1:]
n = len(data)
ids = {}
tt = [0] * n
prev = [[] for i in range(n)]
for i in range(n):
    ind, t, *args = data[i].split(';')[:-2]
    ind = int(ind)
    ids[ind] = i
    t = int(t)
    tt[i] = t
    for e in args:
        if e != '':
            x = ids[int(e.replace('""', ''))]
            prev[i].append(x)
answ = [0] * n
for i in range(n):
    answ[i] = tt[i]
    for lst in prev[i]:
        answ[i] = max(answ[i], answ[lst] + 3 + tt[i])
print(max(answ))
"
qeKbCFYC,Cable tv with bloc,mactech24,Dart,Saturday 18th of May 2024 03:50:55 AM CDT,"//Vtu State
// ignore_for_file: public_member_api_docs, sort_constructors_first
part of 'vtu_bloc.dart';

class VtuState extends Equatable {
  final FormSubmissionStatus formStatus;
  final List<DataModel> dataService;
  final List<AirtimeModel> airtimeService;
  final List<BillPaymentModel> billPaymentService;
  final List<CableModel> cableService;
  final int selectedCableService;
  final List<CableIdModel> cableProductId;
  final int selectedCablePlan;
  const VtuState({
    this.formStatus = const InitialFormStatus(),
    this.dataService = const [],
    this.airtimeService = const [],
    this.billPaymentService = const [],
    this.cableService = const [],
    this.selectedCableService = 0,
    this.cableProductId = const [],
    this.selectedCablePlan = 0,
  });

  VtuState copyWith({
    FormSubmissionStatus? formStatus,
    List<DataModel>? dataService,
    List<AirtimeModel>? airtimeService,
    List<BillPaymentModel>? billPaymentService,
    List<CableModel>? cableService,
    int? selectedCableService,
    List<CableIdModel>? cableProductId,
    int? selectedCablePlan,
  }) {
    return VtuState(
        formStatus: formStatus ?? this.formStatus,
        dataService: dataService ?? this.dataService,
        airtimeService: airtimeService ?? this.airtimeService,
        billPaymentService: billPaymentService ?? this.billPaymentService,
        cableService: cableService ?? this.cableService,
        selectedCableService: selectedCableService ?? this.selectedCableService,
        cableProductId: cableProductId ?? this.cableProductId,
        selectedCablePlan: selectedCablePlan ?? this.selectedCablePlan);
  }

  @override
  List<Object?> get props => [
        formStatus,
        billPaymentService,
        dataService,
        cableService,
        airtimeService,
        selectedCableService,
        cableProductId,
        selectedCablePlan,
      ];
}



//Vtu Event

// ignore_for_file: prefer_const_constructors_in_immutables

part of 'vtu_bloc.dart';

abstract class VtuEvent extends Equatable {
  const VtuEvent();
  @override
  List<Object?> get props => [];
}

class VtuInitial extends VtuEvent {
  const VtuInitial();
}

class GetDataService extends VtuEvent {
  const GetDataService();
}

class GetAirtimeService extends VtuEvent {
  const GetAirtimeService();
}

class GetCableService extends VtuEvent {
  const GetCableService();
}

class GetCableProductId extends VtuEvent {
  final String cableId;
  const GetCableProductId({required this.cableId});
  @override
  List<Object?> get props => [cableId];
}

class SelectCableService extends VtuEvent {
  final int selectedIndex;
  const SelectCableService({required this.selectedIndex});
  @override
  List<Object?> get props => [selectedIndex];
}

class SelectCablePlan extends VtuEvent {
  final int selectedIndex;
  const SelectCablePlan({required this.selectedIndex});
  @override
  List<Object?> get props => [selectedIndex];
}

class GetBillPaymentService extends VtuEvent {
  const GetBillPaymentService();
}


//Vtu bloc
import 'dart:async';
import 'package:bitfornaira/blocs/form_submission_status.dart';
import 'package:bitfornaira/models/airtime_model.dart';
import 'package:bitfornaira/models/bill_model.dart';
import 'package:bitfornaira/models/cable_id_model.dart';
import 'package:bitfornaira/models/cable_model.dart';
import 'package:bitfornaira/models/data_model.dart';
import 'package:bitfornaira/repository/vtu_repository.dart';
import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';

part 'vtu_event.dart';
part 'vtu_state.dart';

class VtuBloc extends Bloc<VtuEvent, VtuState> {
  final VtuRepository vtuRepo;

  VtuBloc({required this.vtuRepo}) : super(const VtuState()) {
    on<VtuInitial>((event, emit) =>
        emit(state.copyWith(formStatus: const InitialFormStatus())));
    on<GetDataService>(_getDataService);
    on<GetAirtimeService>(_getAirtimeService);
    on<GetCableService>(_getCableService);
    on<GetBillPaymentService>(_getBillPaymentService);
    on<SelectCableService>(_selectCableService);
    on<GetCableProductId>(_getCableProductId);
    on<SelectCablePlan>(_selectCablePlan);
  }
  FutureOr<void> _getDataService(
      GetDataService event, Emitter<VtuState> emit) async {
    emit(state.copyWith(formStatus: FormSubmitting()));
    try {
      List data = await vtuRepo.getVtuServices(""DATA"");
      List<DataModel> dataList =
          data.map((e) => DataModel.fromJson(e)).toList();
      emit(state.copyWith(
          dataService: dataList, formStatus: SubmissionSuccess()));
    } catch (e) {
      emit(state.copyWith(formStatus: SubmissionFailed(msg: e.toString())));
    }
  }

  FutureOr<void> _getAirtimeService(
      GetAirtimeService event, Emitter<VtuState> emit) async {
    emit(state.copyWith(formStatus: FormSubmitting()));

    try {
      List data = await vtuRepo.getVtuServices(""AIRTIME"");
      List<AirtimeModel> dataList =
          data.map((e) => AirtimeModel.fromJson(e)).toList();
      emit(state.copyWith(
          airtimeService: dataList, formStatus: SubmissionSuccess()));
    } catch (e) {
      emit(state.copyWith(formStatus: SubmissionFailed(msg: e.toString())));
    }
  }

  FutureOr<void> _getCableService(
      GetCableService event, Emitter<VtuState> emit) async {
    emit(state.copyWith(formStatus: FormSubmitting()));
    try {
      List data = await vtuRepo.getVtuServices(""CABLE"");
      List<CableModel> dataList =
          data.map((e) => CableModel.fromJson(e)).toList();
      emit(state.copyWith(
          cableService: dataList, formStatus: SubmissionSuccess()));
    } catch (e) {
      emit(state.copyWith(formStatus: SubmissionFailed(msg: e.toString())));
    }
  }

  FutureOr<void> _getBillPaymentService(
      GetBillPaymentService event, Emitter<VtuState> emit) async {
    try {
      emit(state.copyWith(formStatus: FormSubmitting()));
      List data = await vtuRepo.getVtuServices(""BILLPAYMENT"");
      List<BillPaymentModel> dataList =
          data.map((e) => BillPaymentModel.fromJson(e)).toList();
      emit(state.copyWith(
          billPaymentService: dataList, formStatus: SubmissionSuccess()));
    } catch (e) {
      emit(state.copyWith(formStatus: SubmissionFailed(msg: e.toString())));
    }
  }

  FutureOr<void> _selectCableService(
      SelectCableService event, Emitter<VtuState> emit) {
    emit(state.copyWith(selectedCableService: event.selectedIndex));
  }

  FutureOr<void> _getCableProductId(
      GetCableProductId event, Emitter<VtuState> emit) async {
    emit(state.copyWith(formStatus: FormSubmitting()));
    try {
      List data = await vtuRepo.getCableTvId(event.cableId);
      List<CableIdModel> dataList =
          data.map((e) => CableIdModel.fromJson(e)).toList();
      emit(state.copyWith(
          formStatus: SubmissionSuccess(), cableProductId: dataList));
    } catch (e) {
      emit(state.copyWith(
        formStatus: SubmissionFailed(msg: e.toString()),
      ));
    }
  }

  FutureOr<void> _selectCablePlan(
      SelectCablePlan event, Emitter<VtuState> emit) {
    emit(state.copyWith(selectedCablePlan: event.selectedIndex));
  }
}

//Cable Tv Screen
import 'package:bitfornaira/blocs/form_submission_status.dart';
import 'package:bitfornaira/blocs/vtu/vtu_bloc.dart';
import 'package:bitfornaira/constants/colors.dart';
import 'package:bitfornaira/constants/icons_url.dart';
import 'package:bitfornaira/constants/image_url.dart';
import 'package:bitfornaira/constants/strings.dart';
import 'package:bitfornaira/repository/vtu_repository.dart';
import 'package:bitfornaira/screens/CableTv/widgets/cable_tv_widget.dart';
import 'package:bitfornaira/utils/utils_size.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shimmer/shimmer.dart';
import '../../global_widgets/global_widget.dart';

class CableTv extends StatefulWidget {
  const CableTv({Key? key}) : super(key: key);
  static String routeName = ""/cableTv"";
  @override
  _CableTvState createState() => _CableTvState();
}

class _CableTvState extends State<CableTv> {
  @override
  void initState() {
    super.initState();
    if (context.read<VtuBloc>().state.cableService.isEmpty == true) {
      context.read<VtuBloc>().add(const GetCableService());
    }
    VtuRepository vtuRepo = VtuRepository();
    vtuRepo.getCableTvId(""cableId"");
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;

    return Scaffold(
      body: SingleChildScrollView(
        child: BlocConsumer<VtuBloc, VtuState>(
          listener: (context, state) {},
          builder: (context, state) {
            return Container(
              height: size.height,
              width: size.width,
              color: federalBlue,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  Container(),
                  Positioned(
                    top: getProportionateScreenHeight(35),
                    right: getProportionateScreenWidth(20),
                    left: getProportionateScreenWidth(20),
                    child: Container(
                      height: size.height * 0.2,
                      decoration: BoxDecoration(
                        color: cartonColor,
                        borderRadius: BorderRadius.only(
                          topLeft: Radius.circular(
                            getProportionateScreenWidth(30),
                          ),
                          topRight: Radius.circular(
                            getProportionateScreenWidth(30),
                          ),
                        ),
                      ),
                    ),
                  ),
                  Positioned(
                    top: getProportionateScreenHeight(45),
                    right: getProportionateScreenWidth(0),
                    left: getProportionateScreenWidth(0),
                    child: Container(
                      height: size.height,
                      padding: EdgeInsets.symmetric(
                        horizontal: getProportionateScreenWidth(5),
                        vertical: getProportionateScreenWidth(20),
                      ),
                      decoration: BoxDecoration(
                        color: bgColor,
                        borderRadius: BorderRadius.only(
                          topLeft: Radius.circular(
                            getProportionateScreenWidth(30),
                          ),
                          topRight: Radius.circular(
                            getProportionateScreenWidth(30),
                          ),
                        ),
                      ),
                      child: SingleChildScrollView(
                        child: Column(
                          children: [
                            customAppBar(
                              context: context,
                              title: cableTv,
                            ),
                            verticalSpace(
                              getProportionateScreenHeight(10),
                            ),
                            Padding(
                              padding: EdgeInsets.symmetric(
                                horizontal: getProportionateScreenWidth(10),
                              ),
                              child: Column(
                                children: [
                                  Row(
                                    children: [
                                      Text(
                                        serviceProviderText,
                                        style: TextStyle(
                                          fontFamily: appFontFamily1,
                                          color: black,
                                          fontWeight: FontWeight.w400,
                                          fontSize:
                                              getProportionateScreenWidth(16),
                                        ),
                                      )
                                    ],
                                  ),
                                  verticalSpace(
                                      getProportionateScreenHeight(10)),
                                  state.formStatus is FormSubmitting
                                      ? Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.spaceBetween,
                                          children: [1, 2, 3, 4]
                                              .map((e) => Shimmer.fromColors(
                                                  baseColor:
                                                      Colors.grey.shade300,
                                                  highlightColor:
                                                      Colors.grey.shade100,
                                                  child: Column(
                                                    children: [
                                                      Container(
                                                        decoration: BoxDecoration(
                                                            color: Theme.of(
                                                                    context)
                                                                .cardColor,
                                                            borderRadius:
                                                                BorderRadius
                                                                    .circular(
                                                                        50)),
                                                        height:
                                                            getProportionateScreenHeight(
                                                                67),
                                                        width:
                                                            getProportionateScreenHeight(
                                                                67),
                                                      ),
                                                      verticalSpace(
                                                          getProportionateScreenHeight(
                                                              15)),
                                                      Container(
                                                        decoration:
                                                            BoxDecoration(
                                                          color:
                                                              Theme.of(context)
                                                                  .cardColor,
                                                        ),
                                                        height:
                                                            getProportionateScreenHeight(
                                                                10),
                                                        width:
                                                            getProportionateScreenHeight(
                                                                50),
                                                      ),
                                                    ],
                                                  )))
                                              .toList(),
                                        )
                                      : Row(
                                          // mainAxisAlignment: MainAxisAlignment.start,
                                          children: List.generate(
                                              state.cableService.length,
                                              (index) {
                                          final myCableService =
                                              state.cableService[index];
                                          return cableTvServiceProviderCards(
                                            selected:
                                                state.selectedCableService ==
                                                        index
                                                    ? true
                                                    : false,
                                            borderColor:
                                                state.selectedCableService ==
                                                        index
                                                    ? black
                                                    : transparent,
                                            context: context,
                                            icon: gotvUrl,
                                            text: myCableService.name,
                                            onTap: () {
                                              print(""pressed"");
                                              context.read<VtuBloc>().add(
                                                    SelectCableService(
                                                        selectedIndex: index),
                                                  );
                                              context.read<VtuBloc>().add(
                                                  GetCableProductId(
                                                      cableId:
                                                          myCableService.id));
                                              print(myCableService.id);
                                            },
                                          );
                                        })),
                                  verticalSpace(
                                      getProportionateScreenHeight(15)),
                                  fieldTitle(text: subscriptionPlanText),
                                  cableTvDropDownContainer(
                                    context: context,
                                    containerColor: white,
                                    text: selectSubscriptionPlan,
                                    icon: arrowDownUrl,
                                    onTap: () {
                                      showModalBottomSheet(
                                        context: context,
                                        builder: (BuildContext context) {
                                          return const SelectCableTvPlanBottomSheet();
                                        },
                                      );
                                    },
                                  ),
                                  verticalSpace(
                                      getProportionateScreenHeight(10)),
                                  fieldTitle(text: smartCardNumber),
                                  const buildTextField(
                                    hintText: enterIUCNumber,
                                    fillColor: white,
                                    filled: true,
                                  ),
                                  verticalSpace(
                                      getProportionateScreenHeight(50)),
                                  customButton(
                                      context: context,
                                      buttonColor: orange.withOpacity(0.3),
                                      buttonTextColor: white,
                                      buttonText: proceedText,
                                      onPressed: () {
                                        showModalBottomSheet(
                                          context: context,
                                          builder: (BuildContext context) {
                                            return const CableTvTransactionConfirmationBottomSheet();
                                          },
                                        );
                                      }),
                                ],
                              ),
                            )
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            );
          },
        ),
      ),
    );
  }
}

//Cable Tv Widgets

import 'dart:async';

import 'package:bitfornaira/blocs/vtu/vtu_bloc.dart';
import 'package:bitfornaira/constants/colors.dart';
import 'package:bitfornaira/constants/icons_url.dart';
import 'package:bitfornaira/constants/image_url.dart';
import 'package:bitfornaira/constants/strings.dart';
import 'package:bitfornaira/global_widgets/global_widget.dart';
import 'package:bitfornaira/screens/BuyData/transaction_successful.dart';
import 'package:bitfornaira/utils/utils_size.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

Widget cableTvServiceProviderCards({
  required BuildContext context,
  required String icon,
  required String text,
  required Color borderColor,
  bool? selected,
  void Function()? onTap,
}) {
  return Stack(
    alignment: Alignment.center,
    children: [
      Container(
        height: getProportionateScreenHeight(100),
        width: getProportionateScreenHeight(90),
        child: Column(
          children: [
            InkWell(
              onTap: onTap,
              child: Container(
                height: getProportionateScreenHeight(67),
                width: getProportionateScreenHeight(67),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(50),
                  border: Border.all(color: borderColor),
                ),
                child: Image.asset(
                  icon,
                  fit: BoxFit.cover,
                ),
              ),
            ),
            verticalSpace(getProportionateScreenHeight(5)),
            Text(
              text,
              style: TextStyle(
                fontFamily: appFontFamily1,
                fontSize: getProportionateScreenWidth(14),
                color: black,
                fontWeight: FontWeight.w400,
              ),
            )
          ],
        ),
      ),
      Positioned(
        top: 0,
        right: getProportionateScreenWidth(10),
        child: selected == true
            ? Container(
                height: getProportionateScreenHeight(20),
                width: getProportionateScreenHeight(20),
                decoration: const BoxDecoration(
                  color: black,
                  shape: BoxShape.circle,
                ),
                child: Icon(
                  Icons.check,
                  color: white,
                  size: getProportionateScreenHeight(14),
                ),
              )
            : const SizedBox(),
      )
    ],
  );
}

Widget cableTvDropDownContainer({
  required BuildContext context,
  required String text,
  required String icon,
  required Color containerColor,
  void Function()? onTap,
}) {
  return InkWell(
    onTap: onTap,
    child: Container(
      height: getProportionateScreenHeight(55),
      width: double.infinity,
      padding: EdgeInsets.symmetric(
        horizontal: getProportionateScreenWidth(15),
      ),
      decoration: BoxDecoration(
        color: containerColor,
        border: Border.all(color: lightGrey),
        borderRadius: BorderRadius.all(
          Radius.circular(
            getProportionateScreenHeight(10),
          ),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            text,
            style: TextStyle(
              fontFamily: appFontFamily1,
              fontSize: getProportionateScreenWidth(14),
              fontWeight: FontWeight.w400,
              color: lightGrey,
            ),
          ),
          Image.asset(
            icon,
            width: getProportionateScreenWidth(12),
          )
        ],
      ),
    ),
  );
}

Widget cableTvValueContainer({
  required BuildContext context,
  required String text,
  required Color buttonColor,
  required Color textColor,
  void Function()? onTap,
}) {
  return InkWell(
    onTap: onTap,
    child: Container(
      alignment: Alignment.centerLeft,
      height: getProportionateScreenHeight(55),
      margin: EdgeInsets.only(bottom: getProportionateScreenHeight(8)),
      width: double.infinity,
      padding: EdgeInsets.only(left: getProportionateScreenWidth(8)),
      decoration: BoxDecoration(
        color: buttonColor,
        borderRadius: BorderRadius.all(
          Radius.circular(getProportionateScreenHeight(10)),
        ),
      ),
      child: Text(
        text,
        style: TextStyle(
          fontFamily: monseratFont,
          color: textColor,
          fontSize: getProportionateScreenWidth(14),
          fontWeight: FontWeight.w400,
        ),
      ),
    ),
  );
}

class SelectCableTvPlanBottomSheet extends StatelessWidget {
  const SelectCableTvPlanBottomSheet({super.key});
  @override
  Widget build(BuildContext context) {
    return BlocBuilder<VtuBloc, VtuState>(
      builder: (context, state) {
        return ClipRRect(
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(getProportionateScreenWidth(20)),
            topRight: Radius.circular(getProportionateScreenWidth(20)),
          ),
          child: Container(
            color: white,
            width: double.infinity,
            padding: EdgeInsets.all(getProportionateScreenWidth(16)),
            // ignore: sort_child_properties_last
            child: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: <Widget>[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        selectdataText,
                        style: TextStyle(
                          fontSize: getProportionateScreenWidth(17),
                          fontWeight: FontWeight.w400,
                        ),
                      ),
                    ],
                  ),
                  verticalSpace(getProportionateScreenHeight(10)),
                  Column(
                    children: List.generate(state.cableService.length, (index) {
                      final productPlanList = state.cableService[index];
                      return cableTvValueContainer(
                        context: context,
                        text:
                            ""Basic  Bouquet - Monthly - ₦${productPlanList.sellingPrice.toString()}"",
                        textColor: state.selectedCablePlan == index
                            ? lightWhite
                            : black,
                        buttonColor: state.selectedCablePlan == index
                            ? federalBlue
                            : lighthash,
                        onTap: () {
                          context
                              .read<VtuBloc>()
                              .add(SelectCablePlan(selectedIndex: index));
                          // print(productPlanList.sellingPrice.toString());
                        },
                      );
                    }),
                  )
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}

Widget cableTvransConfirmationWidget({
  required String transConfirm,
  required String transConfirmValue,
}) {
  return Padding(
    padding: EdgeInsets.only(bottom: getProportionateScreenHeight(18)),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          transConfirm,
          style: TextStyle(
            fontSize: getProportionateScreenWidth(14),
            fontWeight: FontWeight.w400,
            color: lightBlack,
          ),
        ),
        Text(
          transConfirmValue,
          style: TextStyle(
            fontFamily: monseratFont,
            fontSize: getProportionateScreenWidth(14),
            fontWeight: FontWeight.w400,
            color: lightBlack,
          ),
        ),
      ],
    ),
  );
}

class CableTvTransactionConfirmationBottomSheet extends StatelessWidget {
  const CableTvTransactionConfirmationBottomSheet({super.key});
  @override
  Widget build(BuildContext context) {
    return BlocBuilder<VtuBloc, VtuState>(
      builder: (context, state) {
        return ClipRRect(
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(getProportionateScreenWidth(20)),
            topRight: Radius.circular(getProportionateScreenWidth(20)),
          ),
          child: Container(
            color: white,
            width: double.infinity,
            padding: EdgeInsets.all(getProportionateScreenWidth(16)),
            // ignore: sort_child_properties_last
            child: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: <Widget>[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        transactionConfirmationText,
                        style: TextStyle(
                          fontSize: getProportionateScreenWidth(16),
                          fontWeight: FontWeight.w400,
                          color: black,
                        ),
                      ),
                    ],
                  ),
                  verticalSpace(getProportionateScreenHeight(25)),
                  Container(
                    padding: EdgeInsets.all(getProportionateScreenWidth(20)),
                    decoration: BoxDecoration(
                      color: bgColor,
                      borderRadius: BorderRadius.all(
                        Radius.circular(getProportionateScreenWidth(8)),
                      ),
                    ),
                    child: Column(
                      children: [
                        cableTvransConfirmationWidget(
                          transConfirm: subscriptionPlanText,
                          transConfirmValue: basicBouquet,
                        ),
                        cableTvransConfirmationWidget(
                          transConfirm: cableTvAmount,
                          transConfirmValue: cableTvAmountValue,
                        ),
                        cableTvransConfirmationWidget(
                          transConfirm: smartCardNum,
                          transConfirmValue: smartCardNumberValue,
                        ),
                      ],
                    ),
                  ),
                  verticalSpace(getProportionateScreenHeight(50)),
                  customButton(
                    context: context,
                    buttonColor: orange,
                    buttonTextColor: white,
                    buttonText: proceedText,
                    onPressed: () {
                      Navigator.pop(context);
                      showModalBottomSheet(
                        context: context,
                        builder: (BuildContext context) {
                          return const VerifyFingerprintBottomSheet();
                        },
                      );
                    },
                  ),
                  verticalSpace(getProportionateScreenHeight(20)),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}

class VerifyFingerprintBottomSheet extends StatelessWidget {
  const VerifyFingerprintBottomSheet({super.key});
  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.only(
        topLeft: Radius.circular(getProportionateScreenWidth(20)),
        topRight: Radius.circular(getProportionateScreenWidth(20)),
      ),
      child: Container(
        color: white,
        width: double.infinity,
        padding: EdgeInsets.all(getProportionateScreenWidth(16)),
        // ignore: sort_child_properties_last
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: <Widget>[
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    verifyFingerprintText,
                    style: TextStyle(
                      fontSize: getProportionateScreenWidth(16),
                      fontWeight: FontWeight.w400,
                      color: black,
                    ),
                  ),
                ],
              ),
              Text(
                touchFingerprintText,
                style: TextStyle(
                  fontFamily: appFontFamily1,
                  fontSize: getProportionateScreenWidth(12),
                  fontWeight: FontWeight.w300,
                  color: lightBlack,
                ),
              ),
              verticalSpace(getProportionateScreenHeight(20)),
              Container(
                height: getProportionateScreenHeight(90),
                width: getProportionateScreenHeight(90),
                padding: EdgeInsets.all(getProportionateScreenWidth(8)),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(50),
                  color: bgColor,
                ),
                child: InkWell(
                  onTap: () {},
                  child: Container(
                      height: getProportionateScreenHeight(90),
                      width: getProportionateScreenHeight(90),
                      padding: EdgeInsets.all(getProportionateScreenWidth(18)),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(50),
                        color: orange,
                      ),
                      child: Image.asset(whiteFingerprint)),
                ),
              ),
              verticalSpace(getProportionateScreenHeight(50)),
              InkWell(
                onTap: () {
                  Navigate.pop(context);
                  showModalBottomSheet(
                    context: context,
                    builder: (BuildContext context) {
                      return const TransactionPinBottomSheet();
                    },
                  );
                },
                child: Text(
                  switchToTransactionPinText,
                  style: TextStyle(
                    fontFamily: appFontFamily1,
                    fontSize: getProportionateScreenWidth(18),
                    fontWeight: FontWeight.w400,
                    color: orange,
                  ),
                ),
              )
            ],
          ),
        ),
      ),
    );
  }
}

class TransactionPinBottomSheet extends StatefulWidget {
  const TransactionPinBottomSheet({super.key});

  @override
  State<TransactionPinBottomSheet> createState() =>
      _TransactionPinBottomSheetState();
}

class _TransactionPinBottomSheetState extends State<TransactionPinBottomSheet> {
  String enteredPin = '';

  Widget numButton(int number) {
    return Padding(
      padding: const EdgeInsets.only(top: 16),
      child: TextButton(
        onPressed: () {
          setState(() {
            if (enteredPin.length < 4) {
              enteredPin += number.toString();
            } else {
              Timer(const Duration(seconds: 2), () {
                Navigate.navigateToNamed(
                    context, TransactionSuccessful.routeName);
              });
            }
          });
        },
        child: Text(
          number.toString(),
          style: const TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.w600,
            color: Colors.black,
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    print(enteredPin);
    return ClipRRect(
      borderRadius: BorderRadius.only(
        topLeft: Radius.circular(getProportionateScreenWidth(20)),
        topRight: Radius.circular(getProportionateScreenWidth(20)),
      ),
      child: Container(
        color: white,
        width: double.infinity,
        padding: EdgeInsets.all(getProportionateScreenWidth(16)),
        // ignore: sort_child_properties_last
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: <Widget>[
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    verifyFingerprintText,
                    style: TextStyle(
                      fontSize: getProportionateScreenWidth(16),
                      fontWeight: FontWeight.w400,
                      color: black,
                    ),
                  ),
                ],
              ),
              verticalSpace(getProportionateScreenHeight(8)),
              Text(
                touchFingerprintText,
                style: TextStyle(
                  fontFamily: appFontFamily1,
                  fontSize: getProportionateScreenWidth(12),
                  fontWeight: FontWeight.w300,
                  color: lightBlack,
                ),
              ),
              verticalSpace(getProportionateScreenHeight(20)),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(
                  4,
                  (index) {
                    return Container(
                      margin: EdgeInsets.all(getProportionateScreenWidth(8)),
                      width: getProportionateScreenHeight(50),
                      height: getProportionateScreenHeight(50),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(6.0),
                        color: bgColor,
                        border: Border.all(
                          color: orange,
                        ),
                      ),
                      child: index < enteredPin.length
                          ? Center(
                              child: Text(
                                enteredPin[index],
                                style: TextStyle(
                                  fontFamily: appFontFamily1,
                                  fontSize: getProportionateScreenHeight(22),
                                  color: lightBlack,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            )
                          : null,
                    );
                  },
                ),
              ),
              for (var i = 0; i < 3; i++)
                Padding(
                  padding: EdgeInsets.only(
                    left: getProportionateScreenWidth(30),
                    right: getProportionateScreenWidth(30),
                    bottom: getProportionateScreenWidth(10),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: List.generate(
                      3,
                      (index) => numButton(1 + 3 * i + index),
                    ).toList(),
                  ),
                ),
              Padding(
                padding: EdgeInsets.only(
                  left: getProportionateScreenWidth(30),
                  right: getProportionateScreenWidth(30),
                  bottom: getProportionateScreenWidth(10),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    TextButton(
                      onPressed: () {
                        //Fingerprint activation goes here
                      },
                      child: Image.asset(
                        orangeFingerprint,
                        width: getProportionateScreenWidth(40),
                      ),
                    ),
                    numButton(0),
                    TextButton(
                      onPressed: () {
                        setState(
                          () {
                            if (enteredPin.isNotEmpty) {
                              enteredPin = enteredPin.substring(
                                  0, enteredPin.length - 1);
                            }
                          },
                        );
                      },
                      child: Image.asset(
                        backSpace,
                        width: getProportionateScreenWidth(25),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
"
hJ9Q2kcj,Untitled,35657,C++,Saturday 18th of May 2024 03:19:43 AM CDT,"#include <iostream>

using namespace std;

template <typename T>
class List {
public:

    List() : size_(0), head_(nullptr), last_(nullptr) {}

    List(const initializer_list<T>& list) : size_(0), head_(nullptr), last_(nullptr) {
        for (const T& element : list) {
            push_back(element);
        }
    }

    List(const List& other) : size_(0), head_(nullptr), last_(nullptr) {
        Node* temp = other.last_;
        while (temp != nullptr) {
            push_front(temp->value);
            temp = temp->prev;
        }
    }

    List(List&& other) : size_(other.size_), head_(other.head_), last_(other.last_) {
        other.head_ = other.last_ = nullptr;
    }

    List& operator=(const List& other) {
        if (this != &other) {
            clear();
            Node* temp = other.last_;
            while (temp != nullptr) {
                push_front(temp->value);
                temp = temp->prev;
            }
        }
        return *this;
    }

    List& operator=(List&& other) {
        if (this != &other) {
            clear();
            size_ = other.size_;
            head_ = other.head_;
            last_ = other.last_;
            other.head_ = other.last_ = nullptr;
        }
        return *this;
    }

    void push_front(const T& value) {
        if (size_ == 0) {
            last_ = head_ = new Node{ value, nullptr, nullptr };
            size_++;
            return;
        }
        Node* temp = new Node{ value, head_, nullptr };
        head_->prev = temp;
        head_ = temp;
        size_++;
    }

    void push_back(const T& value) {
        if (size_ == 0) {
            last_ = head_ = new Node{ value, nullptr, nullptr };
            size_++;
            return;
        }
        Node* temp = new Node{ value, nullptr, last_ };
        last_->next = temp;
        last_ = temp;
        size_++;
    }

    void pop_front() {
        if (size_ > 0) {
            if (size_ == 1) {
                delete head_;
                last_ = head_ = nullptr;
                size_--;
                return;
            }
            Node* temp = head_;
            head_ = head_->next;
            delete temp;
            head_->prev = nullptr;
            size_--;
        }
    }

    void pop_back() {
        if (size_ > 0) {
            if (size_ == 1) {
                delete head_;
                last_ = head_ = nullptr;
                size_--;
                return;
            }
            Node* temp = last_;
            last_ = last_->prev;
            delete temp;
            last_->next = nullptr;
            size_--;
        }
    }

    void insert(const int index, const T& value) {
        if (index == 0) {
            push_front(value);
            return;
        }
        if (index == size_) {
            push_back(value);
            return;
        }
        if (index > 0 && index < size_) {
            Node* temp = head_;
            for (int i = 0; i < index - 1; i++) {
                temp = temp->next;
            }
            Node* buf = new Node{ value, temp->next, temp };
            temp->next->prev = buf;
            temp->next = buf;
            size_++;
        }
    }

    void erase(const int index) {
        if (index == 0) {
            pop_front();
            return;
        }
        if (index == size_ - 1) {
            pop_back();
            return;
        }
        if (index > 0 && index < size_ - 1) {
            Node* temp = head_;
            for (int i = 0; i < index - 1; i++) {
                temp = temp->next;
            }
            Node* buf = temp->next->next;
            delete temp->next;
            temp->next = buf;
            buf->prev = temp;
            size_--;
        }
    }

    T& operator[] (const int index) {
        if (index >= 0 && index < size_) {
            Node* temp = head_;
            for (int i = 0; i < index; i++) {
                temp = temp->next;
            }
            return temp->value;
        }
    }

    const T& operator[] (const int index) const {
        if (index >= 0 && index < size_) {
            Node* temp = head_;
            for (int i = 0; i < index; i++) {
                temp = temp->next;
            }
            return temp->value;
        }
    }

    bool operator==(const List& other) const {
        if (size_ != other.size_) {
            return false;
        }
        Node* temp = head_;
        Node* other_temp = other.head_;

        while (temp != nullptr) {
            if (temp->value != other_temp->value) {
                return false;
            }
            temp = temp->next;
            other_temp = other_temp->next;
        }
        return true;
    }

    bool operator!=(const List& other) const {
        return !(*this == other);
    }

    int find(const T& value) const {
        int index = 0;
        Node* temp = head_;

        while (temp != nullptr && temp->value != value) {
            temp = temp->next;
            index++;
        }
        if (temp != nullptr) {
            return index;
        }
        return -1;
    }

    T& front() {
        if (head_ != nullptr) {
            return head_->value;
        }
    }

    const T& front() const {
        if (head_ != nullptr) {
            return head_->value;
        }
    }

    T& back() {
        if (last_ != nullptr) {
            return last_->value;
        }
    }

    const T& back() const {
        if (last_ != nullptr) {
            return last_->value;
        }
    }

    void print() {
        Node* temp = head_;
        while (temp != nullptr) {
            cout << temp->value << "" "";
            temp = temp->next;
        }
        cout << endl;
    }

    int size() const {
        return size_;
    }

    void clear() {
        while (head_ != nullptr) {
            pop_front();
        }
    }

    ~List() {
        clear();
    }

private:
    struct Node { // двусвязный список состоит из узлов
        T value; // узел хранит информативную часть
        Node* next; // указатель на следующий узел в списке
        Node* prev; // указатель на предыдущий узел
    };

    int size_;
    Node* head_;
    Node* last_;
};



int main() {
    setlocale(LC_ALL, ""ru"");

    List<int> ls{ 6,7,8,9,10 };
    ls.print();

}
"
SkQUyePT,Reminder System rev_01,pleasedontcode,Arduino,Saturday 18th of May 2024 03:01:15 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Reminder System
	- Source Code NOT compiled for: Arduino Nano
	- Source Code created on: 2024-05-18 07:59:42

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* ring buzzer and motor every 1 minute for 5 */
	/* minutes. if push button is pressed while the */
	/* buzzer is active, turn off the countdown for 10 */
	/* minutes, else keep repeating it.     Also display */
	/* ""Please Take Your Medicine"" while the buzzer is */
	/* active */
/****** SYSTEM REQUIREMENT 2 *****/
	/* ring buzzer and motor every 1 minute for 5 */
	/* minutes. if push button is pressed while the */
	/* buzzer is active, turn off the countdown for 10 */
	/* minutes, else keep repeating it.     Also display */
	/* ""Please Take Your Medicine"" while the buzzer is */
	/* active */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <Adafruit_SSD1306.h>	//https://github.com/stblassitude/Adafruit_SSD1306_Wemos_OLED.git
#include <U8g2_for_Adafruit_GFX.h>	//https://github.com/olikraus/U8g2_for_Adafruit_GFX

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void ringBuzzerAndMotor(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t Reed_PushButton_PIN_D3 = 3;
const uint8_t Reed_PushButton_PIN_D4 = 4;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t Buzzer_PassiveBuzzer_Signal_PIN_D2 = 2;
const uint8_t Vibrator_LED_PIN_D5 = 5;

/***** DEFINITION OF I2C PINS *****/
const uint8_t Screen_SSD1306OledDisplay_I2C_PIN_SDA_A4 = A4;
const uint8_t Screen_SSD1306OledDisplay_I2C_PIN_SCL_A5 = A5;
const uint8_t Screen_SSD1306OledDisplay_I2C_SLAVE_ADDRESS = 60;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
bool Buzzer_PassiveBuzzer_Signal_PIN_D2_rawData = 0;
bool Vibrator_LED_PIN_D5_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
float Buzzer_PassiveBuzzer_Signal_PIN_D2_phyData = 0.0;
float Vibrator_LED_PIN_D5_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, Screen_SSD1306OledDisplay_I2C_SLAVE_ADDRESS);

bool pushButtonPressed = false;
unsigned long lastPressTime = 0;
unsigned long buzzerStartTime = 0;
const unsigned long buzzerInterval = 60000; // 1 minute
const unsigned long buzzerDuration = 300000; // 5 minutes
const unsigned long pauseDuration = 600000; // 10 minutes

void setup(void)
{
	// put your setup code here, to run once:
	pinMode(Reed_PushButton_PIN_D3, INPUT_PULLUP);
	pinMode(Reed_PushButton_PIN_D4, INPUT_PULLUP);
	pinMode(Buzzer_PassiveBuzzer_Signal_PIN_D2, OUTPUT);
	pinMode(Vibrator_LED_PIN_D5, OUTPUT);

	display.begin(SSD1306_SWITCHCAPVCC, Screen_SSD1306OledDisplay_I2C_SLAVE_ADDRESS);
	display.display(); // Show initial display buffer contents on the screen
}

void loop(void)
{
	// put your main code here, to run repeatedly:
	updateOutputs(); // Refresh output data
	ringBuzzerAndMotor(); // Check and ring buzzer and motor
}

void updateOutputs()
{
	digitalWrite(Buzzer_PassiveBuzzer_Signal_PIN_D2, Buzzer_PassiveBuzzer_Signal_PIN_D2_rawData);
	digitalWrite(Vibrator_LED_PIN_D5, Vibrator_LED_PIN_D5_rawData);
}

void ringBuzzerAndMotor()
{
	unsigned long currentTime = millis();

	if (!pushButtonPressed) {
		if (currentTime - buzzerStartTime >= buzzerInterval) {
			Buzzer_PassiveBuzzer_Signal_PIN_D2_rawData = 1;
			Vibrator_LED_PIN_D5_rawData = 1;
			display.clearDisplay();
			display.setTextSize(1);
			display.setTextColor(WHITE);
			display.setCursor(0, 0);
			display.println(""Please Take Your Medicine"");
			display.display();
			buzzerStartTime = currentTime;
		}

		if (currentTime - buzzerStartTime >= buzzerDuration) {
			Buzzer_PassiveBuzzer_Signal_PIN_D2_rawData = 0;
			Vibrator_LED_PIN_D5_rawData = 0;
			display.clearDisplay();
			display.display();
			buzzerStartTime = currentTime;
		}
	} else {
		if (currentTime - lastPressTime < pauseDuration) {
			Buzzer_PassiveBuzzer_Signal_PIN_D2_rawData = 0;
			Vibrator_LED_PIN_D5_rawData = 0;
			display.clearDisplay();
			display.display();
		} else {
			pushButtonPressed = false;
		}
	}
}

/* END CODE */"
06qQ5Nfy,Untitled,35657,C++,Saturday 18th of May 2024 02:41:56 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <fstream>
#include <Windows.h>

using namespace std;


int main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	ifstream fin;
	ofstream fout;

	fin.open(""file.txt"");
	fout.open(""file2.txt"");

	if (!fin.is_open() || !fout.is_open()) {
		cout << ""Ошибка открытия файла"" << endl;
	}
	else {
		int del; // номер удаляемой строки
		cout << ""Введите номер строки для удаления: "";
		cin >> del;
		int current = 1; // номер текущей строки

		string str;
		while (!fin.eof()) {
			getline(fin, str);
			if (current != del) {
				fout << str << endl;
			}
			current++;
		}
		fin.close();
		fout.close();
		remove(""file.txt"");
		rename(""file2.txt"", ""file.txt"");
	}
}"
KQU5tkfJ,CHECK-IPTV-TEXT-PREVIWE.pyw,Najeebsk,Python,Saturday 18th of May 2024 02:41:41 AM CDT,"import tkinter as tk
from tkinter import messagebox, filedialog
import requests
import vlc

def browse_file():
    filename = filedialog.askopenfilename(filetypes=[(""Text files"", ""*.txt"")])
    if filename:
        try:
            with open(filename, ""r"", encoding=""utf-8"") as file:
                content = file.read()
            playlist_entry.delete(""1.0"", ""end"")
            playlist_entry.insert(""1.0"", content)
        except UnicodeDecodeError:
            try:
                with open(filename, ""r"", encoding=""iso-8859-1"") as file:
                    content = file.read()
                playlist_entry.delete(""1.0"", ""end"")
                playlist_entry.insert(""1.0"", content)
            except UnicodeDecodeError:
                messagebox.showerror(""Error"", ""Failed to decode file. The file might be corrupted or use an unsupported encoding."")

def check_links():
    playlist_text = playlist_entry.get(""1.0"", ""end-1c"")
    links = playlist_text.split('\n')
    
    valid_links = []
    for link in links:
        if link.strip() == """":
            continue
        try:
            response = requests.head(link, timeout=5)  # added timeout to avoid hanging
            if response.status_code == 200:
                valid_links.append(link)
        except requests.RequestException:
            pass
    
    if valid_links:
        messagebox.showinfo(""Valid Links"", ""Valid links found!"")
        result_text.set(f""{len(valid_links)} valid links found."")
    else:
        messagebox.showinfo(""No Valid Links"", ""No valid links found!"")
        result_text.set(""No valid links found."")
    
    return valid_links

def save_valid_links():
    valid_links = check_links()
    if valid_links:
        with open(""Valid_Playlist.txt"", ""w"", encoding=""utf-8"") as file:
            file.write(""\n"".join(valid_links))
        messagebox.showinfo(""Saved"", ""Valid links saved to Valid_Playlist.txt"")

def play_selected_link():
    try:
        selected_text = playlist_entry.get(tk.SEL_FIRST, tk.SEL_LAST).strip()
        if selected_text.startswith(""http""):
            preview_frame.pack(fill=""both"", expand=True)  # Show the preview frame
            media = instance.media_new(selected_text)
            player.set_media(media)
            player.play()
        else:
            messagebox.showerror(""Error"", ""Selected text is not a valid URL."")
    except tk.TclError:
        messagebox.showerror(""Error"", ""No text selected."")

def stop_preview():
    player.stop()
    preview_frame.pack_forget()  # Hide the preview frame

def search_links():
    search_term = search_entry.get().strip()
    playlist_text = playlist_entry.get(""1.0"", ""end-1c"")
    
    if search_term:
        playlist_entry.tag_remove(""highlight"", ""1.0"", ""end"")
        
        start_idx = ""1.0""
        while True:
            start_idx = playlist_entry.search(search_term, start_idx, stopindex=""end"")
            if not start_idx:
                break
            end_idx = f""{start_idx}+{len(search_term)}c""
            playlist_entry.tag_add(""highlight"", start_idx, end_idx)
            start_idx = end_idx
            # Move the view to the start of the found search term
            playlist_entry.see(start_idx)
            
        playlist_entry.tag_config(""highlight"", background=""yellow"", foreground=""black"")

# GUI
root = tk.Tk()
root.title(""Najeeb IPTV Channel Link Checker"")
root.configure(bg=""#4a4a4a"")  # Set background color of the main window

playlist_label = tk.Label(root, text=""Paste Playlist:"", bg=""#4a4a4a"", fg=""white"")
playlist_label.pack()

# Frame for text widget and scrollbar
text_frame = tk.Frame(root, bg=""#4a4a4a"")
text_frame.pack()

playlist_entry = tk.Text(text_frame, height=20, width=120, bg=""#2b2b2b"", fg=""white"", insertbackground=""white"")
playlist_entry.pack(side=tk.LEFT)

scrollbar = tk.Scrollbar(text_frame)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

playlist_entry.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=playlist_entry.yview)

# Frame for buttons and search entry in one row
button_frame = tk.Frame(root, bg=""#4a4a4a"")
button_frame.pack()

button_bg_color = ""#5a5a5a""
button_fg_color = ""white""

browse_button = tk.Button(button_frame, text=""Browse Playlist"", command=browse_file, bg=button_bg_color, fg=button_fg_color)
browse_button.pack(side=tk.LEFT, padx=5)

check_button = tk.Button(button_frame, text=""Check Links"", command=check_links, bg=button_bg_color, fg=button_fg_color)
check_button.pack(side=tk.LEFT, padx=5)

save_button = tk.Button(button_frame, text=""Save Valid Links"", command=save_valid_links, bg=button_bg_color, fg=button_fg_color)
save_button.pack(side=tk.LEFT, padx=5)

play_button = tk.Button(button_frame, text=""Play Selected Link"", command=play_selected_link, bg=button_bg_color, fg=button_fg_color)
play_button.pack(side=tk.LEFT, padx=5)

search_label = tk.Label(button_frame, text=""Search:"", bg=""#4a4a4a"", fg=""white"")
search_label.pack(side=tk.LEFT, padx=5)

search_entry = tk.Entry(button_frame, bg=""#2b2b2b"", fg=""white"", insertbackground=""white"")
search_entry.pack(side=tk.LEFT, padx=5)

search_button = tk.Button(button_frame, text=""Search"", command=search_links, bg=button_bg_color, fg=button_fg_color)
search_button.pack(side=tk.LEFT, padx=5)

preview_button = tk.Button(button_frame, text=""Preview"", command=play_selected_link, bg=button_bg_color, fg=button_fg_color)
preview_button.pack(side=tk.LEFT, padx=5)

# Frame for previewing the video
preview_frame = tk.Frame(root, bg=""#4a4a4a"", height=200)
preview_frame.pack(fill=""both"", expand=True)
preview_frame.pack_forget()  # Hide initially

canvas = tk.Canvas(preview_frame, bg=""#4a4a4a"")
canvas.pack(fill=""both"", expand=True)

stop_button = tk.Button(preview_frame, text=""Close Preview"", command=stop_preview, bg=button_bg_color, fg=button_fg_color)
stop_button.pack()

# VLC player setup
instance = vlc.Instance()
player = instance.media_player_new()

def on_configure(event):
    if event.widget == canvas:
        #player.set_xwindow(canvas.winfo_id())  # for Linux
         player.set_hwnd(canvas.winfo_id())  # for Windows
        # player.set_nsobject(canvas.winfo_id())  # for macOS

canvas.bind(""<Configure>"", on_configure)

# Label for displaying results
result_text = tk.StringVar()
result_label = tk.Label(root, textvariable=result_text, bg=""#4a4a4a"", fg=""white"")
result_label.pack()

root.mainloop()
"
gebQKKYu,Untitled,35657,C++,Saturday 18th of May 2024 02:40:08 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <fstream>
#include <Windows.h>

using namespace std;


int main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	ifstream fin;

	fin.open(""file.txt"");

	if (!fin.is_open()) {
		cout << ""Ошибка открытия файла"" << endl;
	}
	else {
		char word[40], longest_word[40];
		int size = 0;

		while (!fin.eof()) {
			fin >> word;
			if (strlen(word) > size) {
				strcpy(longest_word, word);
				size = strlen(word);
			}
		}

		fin.close();
		cout << longest_word << endl;
	}
}"
xrPtFMyv,Untitled,35657,C++,Saturday 18th of May 2024 01:57:57 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <fstream>
#include <Windows.h>

using namespace std;


int main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	ifstream fin;

	fin.open(""file.txt"");

	if (!fin.is_open()) {
		cout << ""Ошибка открытия файла"" << endl;
	}
	else {
		int count = 0;
		char word[40], user_word[40];

		cout << ""Введите слово для поиска: "";

		gets_s(user_word);

		while (!fin.eof()) {
			fin >> word;

			if (strstr(word, user_word)) {
				count++;
			}
		}
		cout << count << endl;
		fin.close();
	}
}"
jMSCF4yL,its ment for sustainability use wisely snowybot 10fold completed,coinwalk,JavaScript,Saturday 18th of May 2024 01:53:43 AM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var prefit = Number((elderly/100).toFixed(8));
var beast = prefit;
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var winnerdinner = (elderly*24)
var snowy = 0;
var snowie = elderly
var great = elderly
var bolux = false;
 
function go(){
great = document.getElementById('pct_balance').value;
var dog = Number((great-elderly).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((great>(snowy-(prefit*0.5)))&&(great<(snowy+(prefit*0.5)))){
bolux = true;
}else{
bolux = false;
}
if ((great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))&&(!bolux)){
    beast = beast*2;
    snowy = parseFloat(great);
}
if (((great/4)<=(beast))&&((great-beast)>tens)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowy = 0;
    snowie = parseFloat(great);
}
if (((great/4)<=(beast))&&((great-beast)>tens)&&(great>(((Math.floor(great/tens))*tens)+eights))){
    beast = prefit;
    snowy = 0;
    snowie = parseFloat(great);
}
if (((great/4)<=(beast))&&((great-beast)>tens)&&(great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))){
    beast = prefit*2;
    snowy = parseFloat(great);
    snowie = parseFloat(great);
}
if (((great/2)<=(beast))&&((great-beast)<tens)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowy = 0;
    snowie = parseFloat(great);
}
if (((great/2)<=(beast))&&((great-beast)<tens)&&(great>(((Math.floor(great/tens))*tens)+eights))){
    beast = prefit;
    snowy = 0;
    snowie = parseFloat(great);
}
if (((great/2)<=(beast))&&((great-beast)<tens)&&(great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))){
    beast = prefit*2;
    snowy = parseFloat(great);
    snowie = parseFloat(great);
}
if ((beast>=elderly)&&((great-beast)>tens)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowy = 0;
    snowie = parseFloat(great);
}
if ((beast>=elderly)&&((great-beast)>tens)&&(great>(((Math.floor(great/tens))*tens)+eights))){
    beast = prefit;
    snowy = 0;
    snowie = parseFloat(great);
}
if ((beast>=elderly)&&((great-beast)>tens)&&(great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))){
    beast = prefit*2;
    snowy = parseFloat(great);
    snowie = parseFloat(great);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
CbMLERs3,Untitled,35657,C++,Saturday 18th of May 2024 01:30:27 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <fstream>
#include <Windows.h>

using namespace std;

struct student {
	char last_name[30];
	char first_name[30];
	int number;
};

int main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	ifstream fin;

	fin.open(""C:/Users/PC/Documents/student.txt"");

	if (!fin.is_open()) {
		cout << ""Ошибка открытия файла"" << endl;
	}
	else {

		student students[3];

		for (int i = 0; i < 3; i++) {
			fin >> students[i].last_name >> students[i].first_name >> students[i].number;
		}
		fin.close();
		for (int i = 0; i < 3; i++) {
			cout << students[i].last_name << endl << students[i].first_name << endl << students[i].number << endl;
		}
	}
}"
PRKm8SzA,Bait,Pro_Insection,YAML,Saturday 18th of May 2024 01:10:13 AM CDT,"bait:
  display: '%group-color%Bait'
  description: Chance to receive double fishing drops.
  applies-to: Fishing Rod
  type: CATCH_FISH
  settings:
    showActionBar: true
  group: LEGENDARY
  applies:
    - FISHING_ROD
  levels:
    '1':
      chance: 15
      cooldown: 10
      effects:
        - MORE_DROPS:1
    '2':
      chance: 18
      cooldown: 15
      effects:
        - MORE_DROPS:1
    '3':
      chance: 26
      cooldown: 20
      effects:
        - MORE_DROPS:1"
LjHMjUzN,Snap,Pro_Insection,YAML,Saturday 18th of May 2024 01:09:28 AM CDT,"snap:
  display: '%group-color%Snap'
  description: Pull hit entity towards you.
  applies-to: Fishing Rod
  type: CATCH_FISH
  group: ELITE
  applies:
    - FISHING_ROD
  levels:
    '1':
      chance: 15
      cooldown: 4
      conditions:
        - '%caught% = PLAYER : %allow%'
      effects:
        - PULL_CLOSER:1 @Victim
    '2':
      chance: 25
      cooldown: 6
      conditions:
        - '%caught% = PLAYER : %allow%'
      effects:
        - PULL_CLOSER:1.5 @Victim
    '3':
      conditions:
        - '%caught% = PLAYER : %allow%'
      effects:
        - PULL_CLOSER:2 @Victim"
AivkQdns,Lucky,Pro_Insection,YAML,Saturday 18th of May 2024 01:08:45 AM CDT,"lucky:
  display: '%group-color%Lucky'
  description: Chance to increase luck while fishing.
  applies-to: Fishing Rod
  type: RIGHT_CLICK
  group: ULTIMATE
  applies:
    - FISHING_ROD
  levels:
    '1':
      chance: 75
      cooldown: 12
      effects:
        - POTION:LUCK:1:1000
    '2':
      chance: 85
      cooldown: 12
      effects:
        - POTION:LUCK:2:1000
    '3':
      chance: 95
      cooldown: 12
      effects:
        - POTION:LUCK:3:1000"
UexNga3X,Momentum,Pro_Insection,YAML,Saturday 18th of May 2024 01:04:10 AM CDT,"momentum:
  display: '%group-color%Momentum'
  description: |-
    Chance to gain speed boost
    with fireworks.
  applies-to: Elytra
  type: RIGHT_CLICK
  group: ELITE
  applies:
    - ELYTRA
  levels:
    '1':
      chance: 10
      cooldown: 5
      conditions:
        - '%player is holding% = FIREWORK_ROCKET : %allow%'
      effects:
        - POTION:SPEED:0:40
    '2':
      chance: 25
      cooldown: 5
      conditions:
        - '%player is holding% = FIREWORK_ROCKET : %allow%'
      effects:
        - POTION:SPEED:1:60
    '3':
      chance: 45
      cooldown: 5
      conditions:
        - '%player is holding% = FIREWORK_ROCKET : %allow%'
      effects:
        - POTION:SPEED:2:80"
RvrPtKWp,Chaos,Pro_Insection,YAML,Saturday 18th of May 2024 01:01:43 AM CDT,"chaos:
  display: '%group-color%Chaos'
  description: Deal weakness and wither effects.
  applies-to: Trident
  type: SHOOT;SHOOT_MOB
  settings:
    showActionBar: true
  group: LEGENDARY
  applies:
    - TRIDENT
  levels:
    '1':
      chance: 2
      cooldown: 40
      effects:
        - POTION:WITHER:0:60 @Victim
        - POTION:WEAKNESS:0:100 @Victim
    '2':
      chance: 4
      cooldown: 40
      effects:
        - POTION:WITHER:1:60 @Victim
        - POTION:WEAKNESS:0:5 @Victim
    '3':
      chance: 6
      cooldown: 40
      effects:
        - POTION:WITHER:1:60 @Victim
        - POTION:WEAKNESS:0:100 @Victim
    '4':
      chance: 8
      cooldown: 40
      effects:
        - POTION:WITHER:1:60 @Victim
        - POTION:WEAKNESS:0:100 @Victim
    '5':
      chance: 10
      cooldown: 40
      effects:
        - POTION:WITHER:1:60 @Victim
        - POTION:WEAKNESS:0:100 @Victim"
GrSD9J76,Phoenix,Pro_Insection,YAML,Saturday 18th of May 2024 12:57:03 AM CDT,"phoenix:
  display: '%group-color%Phoenix'
  description: Chance to revive yourself when killed.
  applies-to: Chestplates
  type: DEATH
  group: HEROIC
  applies:
    - ALL_CHESTPLATE
  levels:
    '1':
      chance: 5
      cooldown: 20
      effects:
        - REVIVE @Victim
    '2':
      chance: 7
      cooldown: 20
      effects:
        - REVIVE @Victim
    '3':
      chance: 9
      cooldown: 20
      effects:
        - REVIVE @Victim"
Haahcts1,Scare,Pro_Insection,YAML,Saturday 18th of May 2024 12:55:33 AM CDT,"scare:
  display: '%group-color%Scare'
  description: |-
    Chance to replace your opponents helmet
    to a pumpkin for a short time.
  applies-to: Weapons
  type: ATTACK
  group: ULTIMATE
  applies:
    - ALL_SWORD
    - ALL_AXE
  levels:
    '1':
      chance: 1.8
      cooldown: 20
      effects:
        - PUMPKIN:40 @Victim
        - PLAY_SOUND_OUTLOUD:BLOCK_ANVIL_LAND
    '2':
      chance: 3.6
      cooldown: 20
      effects:
        - PUMPKIN:40 @Victim
        - PLAY_SOUND_OUTLOUD:BLOCK_ANVIL_LAND
    '3':
      chance: 4.4
      cooldown: 20
      effects:
        - PUMPKIN:60 @Victim
        - PLAY_SOUND_OUTLOUD:BLOCK_ANVIL_LAND
    '4':
      chance: 5.2
      cooldown: 20
      effects:
        - PUMPKIN:60 @Victim
        - PLAY_SOUND_OUTLOUD:BLOCK_ANVIL_LAND
    '5':
      chance: 6
      cooldown: 20
      effects:
        - PUMPKIN:80 @Victim
        - PLAY_SOUND_OUTLOUD:BLOCK_ANVIL_LAND"
0xy0QwKg,Launch,Pro_Insection,YAML,Saturday 18th of May 2024 12:53:23 AM CDT,"launch:
  display: '%group-color%Launch'
  description: Launch yourself by right-clicking.
  applies-to: Swords
  type: RIGHT_CLICK
  settings:
    showActionBar: true
  group: LEGENDARY
  applies:
    - ALL_SWORD
  levels:
    '1':
      chance: 20
      cooldown: 15
      effects:
        - BOOST:UP:8
        - PARTICLE:CLOUD:20:2
    '2':
      chance: 27
      cooldown: 15
      effects:
        - BOOST:UP:9
        - PARTICLE:CLOUD:20:2
    '3':
      chance: 35
      cooldown: 10
      effects:
        - BOOST:UP:10
        - PARTICLE:CLOUD:20:2"
