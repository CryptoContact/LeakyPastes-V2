id,title,username,language,date,content
MsPn3JF4,Untitled,Rodunskiy,C#,Saturday 11th of May 2024 07:02:34 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            const string SwordStrikeCommand = ""1"";
            const string CrossbowShotCommand = ""2"";
            const string SwordStrikeFromShadowsCommand = ""3"";
            const string HideInShadowsAndHealthingCommand = ""4"";

            Random random = new Random();

            int swordStrike = 100;
            int crossbowShotAttackMin = 50;
            int crossbowShotAttackMax = 150;
            int swordStrikeFromShadows = 300;
            int hideInShadowsAndHealthing = 100;
            int heroLife = 400;
            int bossLife = 1000;
            int bossAttackMin = 50;
            int bossAttackMax = 200;
            bool isWorkingHideInShadows = false;
            string typeAttack;

            while (heroLife > 0 && bossLife > 0)
            {
                Console.Clear();
                Console.WriteLine($""Жизни героя:{heroLife}\nЖизни босса:{bossLife}\nВыберите действие:\n{SwordStrikeCommand} <-- удар мечем.\n{CrossbowShotCommand} <-- выстрел из арбалета."" +
                    $""\n{SwordStrikeFromShadowsCommand} <-- удар мечем из тени.\n{HideInShadowsAndHealthingCommand} <-- спрятаться в тени."");
                typeAttack = Console.ReadLine();

                switch (typeAttack)
                {
                    case SwordStrikeCommand:
                        Console.WriteLine($""Удар мечем!"");
                        bossLife -= swordStrike;
                        heroLife -= random.Next(bossAttackMin, bossAttackMax);
                        Console.ReadKey();
                        break;

                    case CrossbowShotCommand:
                        Console.WriteLine($""Выстрел из арбалета!"");
                        bossLife -= random.Next(crossbowShotAttackMin, crossbowShotAttackMax);
                        heroLife -= random.Next(bossAttackMin, bossAttackMax);
                        Console.ReadKey();
                        break;

                    case SwordStrikeFromShadowsCommand:
                        if (isWorkingHideInShadows == true)
                        {
                            Console.WriteLine($""Удар мечем из тени!"");
                            bossLife -= swordStrikeFromShadows;
                            heroLife -= random.Next(bossAttackMin, bossAttackMax);
                            isWorkingHideInShadows = false;
                            Console.ReadKey();
                        }
                        else
                        {
                            Console.WriteLine($""Атака не сработала!"");
                            heroLife -= random.Next(bossAttackMin, bossAttackMax);
                            Console.ReadKey();
                        }
                        break;

                    case HideInShadowsAndHealthingCommand:
                        Console.WriteLine($""Герой спрятался в тени и восстановил 100 жизней!"");
                        heroLife += hideInShadowsAndHealthing;
                        isWorkingHideInShadows = true;
                        Console.ReadKey();
                        break;
                }
            }

            if (bossLife <= 0 && heroLife <= 0)
            {
                Console.WriteLine(""Ничья!"");
            }
            else if (bossLife > 0)
            {
                Console.WriteLine(""Босс побеждает!"");
            }
            else if (heroLife > 0)
            {
                Console.WriteLine(""Герой побеждает!"");
            }
        }
    }
}
"
eArdnRPG,Untitled,MeehoweCK,C++,Saturday 11th of May 2024 06:58:19 AM CDT,"class FigureTab
{
    int dlugosc;
    Figure **tab;
public:
    FigureTab(int dl=0) : dlugosc(dl)  //konstruktor
    {
        if (dlugosc>0)
        {
            tab = new Figure *[dlugosc] { nullptr };
        }
        else
        {
            dlugosc=0;
            tab=nullptr;
        }
    }

    ~FigureTab()
    {
        cout << endl << ""destruktor FigureTab zadzialal "" << endl;
        for (int i=0; i<dlugosc; i++)
        {
            delete tab[i];
        }
        delete[] tab;
    }

    void dodajFigure(Figure* nowa);
    void usunWszystko();
    Figure*& operator[](int index) { return tab[index - 1]; }
};

void FigureTab::dodajFigure(Figure* nowa) {
    if (tab == nullptr) {   // tablica nie istnieje
        tab = new Figure * [1];
        tab[0] = nowa;
    }
    else {
        // tymczasowa tablica do przechowania dotychczasowej
        Figure** temp = new Figure * [dlugosc + 1];
        // przepisanie elementów z dotychczasowej tablicy do tymczasowo stworzonej
        for (int i{ 0 }; i < dlugosc; ++i) {
            temp[i] = tab[i];
        }
        delete[] tab;
        temp[dlugosc] = nowa;
        tab = temp;
    }
    ++dlugosc;
}

void FigureTab::usunWszystko() {
    for (int i{}; i < dlugosc; ++i) {
        delete tab[i];
    }
    delete[] tab;
    tab = nullptr;
    dlugosc = 0;
}"
aBxU9b8p,practice hsc 2,splash365,C++,Saturday 11th of May 2024 06:50:15 AM CDT,"#include <stdio.h>

int isVowel(char ch)
{
    char vowels[10] = ""aeiouAEIOU"";
    
    for(int i = 0; i<10; i++)
    {
        if(ch == vowels[i]) return 1;
    }
    
    return 0;
}

int main()
{
    char ch;
    scanf(""%c"", &ch);
    
    if(isVowel(ch)) {
        printf(""%c is vowel\n"", ch);
    }
    else {
        printf(""%c is consonant\n"", ch);
    }
    
    return 0;
}


/*

vowels

a e i o u A E I O U
0 1 2 3 ....      9

vowels[0]-> 'a'
vowels[1]-> 'e'
..
vowels[9]-> 'U'


*/





#include <stdio.h>


int main()
{
    int n = 4;
    
    for(int i = 1; i<=n; i++)
    {
        int sp = n - i;
        int st = 2 * i - 1;
        
        for(int j = 1; j <= sp; j++) printf("" "");
        for(int j = 1; j <= st; j++) printf(""*"");
        printf(""\n"");
    }
    
    for(int i = 1; i<n; i++)
    {
        int sp = i;
        int k = n - i;
        int st = 2 * k - 1;
        for(int j = 1; j <= sp; j++) printf("" "");
        for(int j = 1; j <= st; j++) printf(""*"");
        printf(""\n"");
    }
    
    return 0;
}


/*

1
22
333
4444
55555

2 * i - 1

N = 4

   *       [sp = 3, st = 1]
  ***      [sp = 2, st = 3]
 *****     [sp = 1, st = 5]
*******    [sp = 0, st = 7]
 *****     [sp = 1, st = 5] i = 1
  ***      [sp = 2, st = 3]
   *       [sp = 3, st = 1]
   
   
   n = 4
   5 i = 3
   3 i = 2
   1 i = 1 
    
    
    
*/"
BPzMnuWD,Untitled,MeehoweCK,C++,Saturday 11th of May 2024 06:45:51 AM CDT,"#ifndef FIGURY_H
#define FIGURY_H
#include <iostream>
#include <cmath>
using namespace std;

class Figure
{
public:
    virtual ~Figure() = default;
    virtual void print() const = 0;
    virtual double getPerimeter() const = 0; //ma dac liczbe
};

class Square : public Figure
{
private:
    double bok;
public:
    Square(double a=1) : bok(a) {};
    ~Square()
    {
        cout << ""usunieto kwadrat"" << endl;
    }
    void print() const
    {
        cout << ""KWADRAT "";
    }
    double getPerimeter() const
    {
        return 4*bok;
    }
};

class Triangle : public Figure
{
private:
    double bok1, bok2, bok3;
public:
    Triangle(double a=1, double b=1, double c=1) : bok1(a), bok2(b), bok3(c) {};
    ~Triangle()
    {
        cout << ""usunieto kwadrat"" << endl;
    }
    void print() const
    {
        cout << ""TROJKAT "";
    }
    double getPerimeter() const
    {
        return bok1+bok2+bok3;
    }
};


class Circle : public Figure
{
private:
    double promien;
public:
    Circle(double r=1) : promien(r) {};
    ~Circle()
    {
        cout << ""usunieto kolo"" << endl;
    }
    void print() const
    {
        cout << ""KOLO "";
    }
    double getPerimeter() const
    {
        return 2.0 * M_PI * promien;
    }
};
//Zdefiniować klasę FigureTab z dynamiczną tablicą przechowująca wskaźniki
//do dowolnych figur z utworzonych klas.

class FigureTab
{
    int dlugosc;
    Figure **tab;
public:
    FigureTab(int dl=0) : dlugosc(dl)  //konstruktor
    {
        if (dlugosc>0)
        {
            tab = new Figure *[dlugosc] { nullptr };
        }
        else
        {
            dlugosc=0;
            tab=nullptr;
        }
    }

    ~FigureTab()
    {
        cout << endl << ""destruktor FigureTab zadzialal "" << endl;
        for (int i=0; i<dlugosc; i++)
        {
            delete tab[i];
        }
        delete[] tab;
    }

    void dodajFigure(Figure* nowa);
};

void FigureTab::dodajFigure(Figure* nowa) {
    if (tab == nullptr) {   // tablica nie istnieje
        tab = new Figure * [1];
        tab[0] = nowa;
    }
    else {
        // tymczasowa tablica do przechowania dotychczasowej
        Figure** temp = new Figure * [dlugosc + 1];
        // przepisanie elementów z dotychczasowej tablicy do tymczasowo stworzonej
        for (int i{ 0 }; i < dlugosc; ++i) {
            temp[i] = tab[i];
        }
        delete[] tab;
        temp[dlugosc] = nowa;
        tab = temp;
    }
    ++dlugosc;
}

//Zdefiniować metodę pozwalającą na dodanie nowej figury do tablicy i metodę usuwającą
//wszystkie figury z tablicy. Przeciążyć operator indeksowania tak, aby indeksowanie
//elementów zaczynało się od 1.




















#endif // FIGURY_H
"
4KkcASAd,Untitled,Rodunskiy,C#,Saturday 11th of May 2024 06:43:59 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();

            int number = 1;
            int startNumber = 2;
            int power = 0;
            int maxNumberRandom = 100;
            int numberRandom = random.Next(maxNumberRandom);

            while (number <= numberRandom) 
            {
                power++;
                number *= startNumber;
            }

            Console.WriteLine($""Сгенерированное число: {numberRandom}\n"" +
                $""Минимальная степень {startNumber}, превосходящая рандомное число: {power}\n"" +
                $""Число в степени:{number}"");
        }
    }
}

"
tF3ZrKYr,Untitled,35657,C++,Saturday 11th of May 2024 06:28:31 AM CDT,"#include <set>
#include <string>
#include <iostream>
#include <vector>

using namespace std;

class transport {

public:
    transport(int speed, int weight, int payload) : speed_(speed), weight_(weight), payload_(payload){}

    int get_speed() {
        return speed_;
    }

    int get_weight() {
        return weight_;
    }

    int get_payload() {
        return payload_;
    }

    virtual void move() = 0;

private:
    int speed_; // максимальная скорость (км/ч)
    int weight_; // масса (собственная) (тонн)
    int payload_; // грузоподъемность  (тонн)
};

class plane : public transport {

public:
    plane(int speed, int weight, int payload, int max_height) : transport(speed, weight, payload), max_height_(max_height) {}

    int get_max_height() {
        return max_height_;
    }

    void move() {
        cout << ""Лечу"" << endl;
    }

private:
    int max_height_; // максимальная высота (метров)
};

class car : public transport {
public:
    car(int speed, int weight, int payload, string transmition) : transport(speed, weight, payload), transmition_(transmition) {}

    string get_transmition() {
        return transmition_;
    }

    void move() {
        cout << ""Еду"" << endl;
    }

private:
    string transmition_; // тип трансмиссии
};

class ship : public transport {

public:
    ship(int speed, int weight, int payload, int displacement) : transport(speed, weight, payload), displacement_(displacement) {}

    int get_displacement() {
        return  displacement_;
    }

    void move() {
        cout << ""Плыву"" << endl;
    }

private:
    int displacement_; // водоизмещение
};

int main() {
    setlocale(LC_ALL, ""ru"");


    plane pl(800, 200, 30, 10000);
    car cr(200, 2, 1, ""manual"");
    ship sh(30, 100, 50, 50);

    vector<transport*> tr;

    tr.push_back(&pl);
    tr.push_back(&cr);
    tr.push_back(&sh);

    for (auto a : tr) {
        cout << a->get_payload() << "" "" << a->get_speed() << "" "" << a->get_weight() << "" "";
        a->move();
        cout << endl;
    }
}"
JipT0USY,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Saturday 11th of May 2024 06:23:48 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
11 May 2024"
qRmT8up4,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Saturday 11th of May 2024 06:14:13 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_266737.pdf

Working as of:
11 May 2024"
6SVYiAfq,Untitled,Rodunskiy,C#,Saturday 11th of May 2024 06:10:37 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();

            int number = 1;
            int startNumber = 2;
            int power = 0;
            int maxNumberRandom = 100;
            int numberRandom = random.Next(maxNumberRandom);

            while (number <= numberRandom) 
            {
                power++;
                number *= startNumber;
            }

            Console.WriteLine($""Сгенерированное число: {numberRandom}\n"" +
                $""Минимальная степень двойки, превосходящая рандомное число: {power}\n"" +
                $""Число в степени:{number}"");
        }
    }
}

"
SXqQQCAn,Longest ZigZag Path in a Binary Tree,jayati,C++,Saturday 11th of May 2024 06:02:34 AM CDT,"//first approach
class Solution {
public:
    int pathLength = 0;
    void dfs(TreeNode* node, int left, int right) {
        if (node == nullptr) {
            return;
        }
        pathLength = max({pathLength, left,right});
        dfs(node->right,0,left+1);
        dfs(node->left, right+1, 0);

    }

    int longestZigZag(TreeNode* root) {
        dfs(root, 0, 0);
       
        return pathLength;
    }
};
// second approach
class Solution {
public:
    int pathLength = 0;
    void dfs(TreeNode* node, bool goLeft, int steps) {
        if (node == nullptr) {
            return;
        }
        pathLength = max(pathLength, steps);
        if (goLeft) {
            dfs(node->left, false, steps + 1);
            dfs(node->right, true, 1);
        } else {
            dfs(node->left, false, 1);
            dfs(node->right, true, steps + 1);
        }
    }

    int longestZigZag(TreeNode* root) {
        dfs(root, false, 0);
        dfs(root, true, 0);
        return pathLength;
    }
};"
abEkcHYv,data923,TestGuy1,JSON,Saturday 11th of May 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '930b3dd8a03e7ea6418fe1601dbe728e2498dc80723f936505a5c7fc258fa4e5e0df4a3d426666ddaad6227d748141c746605ecd1fd3989eb635258438cfc6f81dfc1c1cb6ab29817d9196fd84006f0d0038b6f320b1086593425d94543087ce921575438ac56617214b7f11bf7ee878a111103adeeea3ead203222c7c777169',
  otherdata: [
    'ea2aa09fa41999590892e874f2c6fbf3',
    '77e15281ab2759149333b5277d7e55c5',
    'feac2ec91504ee15aba569d51eb39400',
    'f27cbce88fd67fd6ff99da9ccd993dcf',
    '798d0994dbae0db10c6c4cd1b092ae3a',
    '5c9ab0659cd21052e87f31a2202dfec8',
    'eb28d44eb1953cbe87765b03b99ec917',
    '595e4fa2897e3aeca9820ec9c2c7bb17'
  ]
}"
0w4gE6Ji,08. Pet Shop,myrdok123,Java,Saturday 11th of May 2024 05:40:09 AM CDT,"import java.util.Scanner;

public class P08PetShop {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int countDogPacks = Integer.parseInt(scanner.nextLine());
        int countCatPacks = Integer.parseInt(scanner.nextLine());

        double priceForDogs = countDogPacks * 2.50;
        double priceForCats = countCatPacks * 4;

        double finalSum = priceForCats + priceForDogs;

        System.out.println(finalSum + "" lv."");

    }
}
"
YqYLky8R,07. Projects Creation,myrdok123,Java,Saturday 11th of May 2024 05:39:41 AM CDT,"import java.util.Scanner;

public class P07ProjectsCreation {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String name = scanner.nextLine();
        int projects = Integer.parseInt(scanner.nextLine());

        int neededHours = projects * 3;

        System.out.printf(""The architect %s will need %d hours to complete %d project/s."", name, neededHours, projects);
    }
}
"
ZRSkEsaY,06. Concatenate Data,myrdok123,Java,Saturday 11th of May 2024 05:39:07 AM CDT,"import java.util.Scanner;

public class P06ConcatenateData {
    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);

        String firstName = scanner.nextLine();
        String lastName = scanner.nextLine();
        int age = Integer.parseInt(scanner.nextLine());
        String town = scanner.nextLine();

        //%s , %d, %f, %c


        //System.out.println(""You are "" + firstName + "" "" + lastName + "", a "" + age + ""-years old person from "" + town + ""."");

        System.out.printf(""You are %s %s, a %d-years old person from %s."", firstName, lastName, age, town);
    }
}
"
CN8R1eFJ,05. Greeting by Name,myrdok123,Java,Saturday 11th of May 2024 05:38:37 AM CDT,"import java.util.Scanner;

public class P05GreetingByName {

    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);

        String name = scanner.nextLine();

        System.out.println(""Hello, "" + name + ""!"");
    }
}
"
XcZTjqXi,04. Inches to Centimeters,myrdok123,Java,Saturday 11th of May 2024 05:37:55 AM CDT,"import java.util.Scanner;

public class P04InchesToCentimeters {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        double inches = Double.parseDouble(scanner.nextLine());

        double sm = inches * 2.54;

        System.out.println(sm);

    }
}
"
jmZ1RnPK,03. Rectangle Area,myrdok123,Java,Saturday 11th of May 2024 05:36:53 AM CDT,"import java.util.Scanner;

public class P03RectangleArea {

    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);

        int a = Integer.parseInt(scanner.nextLine());
        int b = Integer.parseInt(scanner.nextLine());

        int area = a * b;

        System.out.println(area);


    }
}
"
Ym8Dgs1x,DicePlayerOne,moonagent,JSON,Saturday 11th of May 2024 05:21:10 AM CDT,"{""m_dic"":{""version"":""10""}}"
SMxJnAgY,Untitled,Ruslan_Rayanov,C#,Saturday 11th of May 2024 05:14:36 AM CDT,"
        private HttpWebResponse MakeFormDataRequest(Dictionary<string, string> files, Dictionary<string, string> otherValues, string contentType = """", NameValueCollection headers = null)
        {
            var req = (HttpWebRequest)WebRequest.Create(this.Url);

            req.Timeout = 10000 * 1000;
            req.Accept = ""text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"";
            req.AllowAutoRedirect = false;
            req.AutomaticDecompression = DecompressionMethods.Deflate | DecompressionMethods.GZip;

            var mimeParts = new List<MimePart>();
            try
            {
                if (headers != null)
                {
                    req.Headers.Add(headers);
                }
                if (otherValues != null)
                {
                    foreach (var fieldName in otherValues.Keys)
                    {
                        var part = new MimePart();

                        part.Headers[""Content-Disposition""] = ""form-data; name=\"""" + fieldName + ""\"""";
                        part.Data = new MemoryStream(Encoding.UTF8.GetBytes(otherValues[fieldName]));

                        mimeParts.Add(part);
                    }
                }

                if (files != null)
                {
                    foreach (var fieldName in files.Keys)
                    {
                        var part = new MimePart();

                        part.Headers[""Content-Disposition""] = ""form-data; name=\"""" + fieldName + ""\""; filename=\"""" + Path.GetFileName(files[fieldName]) + ""\"""";
                        part.Data = System.IO.File.OpenRead(files[fieldName]);
                        
                        var mimePartProvider = new FileExtensionContentTypeProvider();

                        var defaultContentType = ""application/octet-stream"";
                        if (!mimePartProvider.TryGetContentType(files[fieldName], out string fileContentType)) {
                            fileContentType = defaultContentType;
                        }

                        part.Headers[""Content-Type""] = fileContentType;

                        mimeParts.Add(part);
                    }
                }
                string boundary = ""----------"" + DateTime.Now.Ticks.ToString(""x"");

                req.ContentType = !String.IsNullOrEmpty(contentType) ? contentType : ""multipart/form-data; boundary="" + boundary;
                req.Method = this.Method;

                long contentLength = 0;

                byte[] _footer = Encoding.UTF8.GetBytes(""--"" + boundary + ""--\r\n"");

                foreach (MimePart part in mimeParts)
                {
                    contentLength += part.GenerateHeaderFooterData(boundary);
                }

                req.ContentLength = contentLength + _footer.Length;

                byte[] buffer = new byte[8192];
                byte[] afterFile = Encoding.UTF8.GetBytes(""\r\n"");
                int read;

                using (Stream s = req.GetRequestStream())
                {
                    foreach (MimePart part in mimeParts)
                    {
                        s.Write(part.Header, 0, part.Header.Length);

                        while ((read = part.Data.Read(buffer, 0, buffer.Length)) > 0)
                            s.Write(buffer, 0, read);

                        part.Data.Dispose();

                        s.Write(afterFile, 0, afterFile.Length);
                    }

                    s.Write(_footer, 0, _footer.Length);
                }

                var res = (HttpWebResponse)req.GetResponse();

                return res;
            }
            catch (Exception ex)
            {
                if (ex is WebException) {
                    var response = ((WebException)ex).Response?.GetResponseStream();

                    if (ex.Message.Contains(""302"")) {
                        return (HttpWebResponse)((WebException)ex).Response;
                    }

                    if (response != null) {
                        using (var stream = new StreamReader(response)) {
                            var error = stream.ReadToEnd();
                            if (!string.IsNullOrEmpty(error)) {
                                throw new Exception(error);
                            }
                        }
                    }
                }

                Console.WriteLine(ex.Message);
                foreach (MimePart part in mimeParts)
                    if (part.Data != null)
                        part.Data.Dispose();

                return (HttpWebResponse)req.GetResponse();
            }
        }"
iiLr2dbN,Untitled,35657,C++,Saturday 11th of May 2024 05:14:19 AM CDT,"#include <set>
#include <string>
#include <iostream>
#include <vector>

using namespace std;

class Employer {
public:

    string SetName(string name) {
        name_ = name;
    }

    string GetName() {
        return name_;
    }
    string SetAge(int age) {
        age_ = age;
    }

    int GetAge() {
        return age_;
    }

    string SetGender(string gender) {
        gender_ = gender;
    }

    string GetGender() {
        return gender_;
    }

    virtual void Print() = 0;

private:
    string name_;
    int age_;
    string gender_;
};

class President : public Employer {
public:
    void Print() {
        cout << ""Я президент"" << endl;
    }
};

class Manager : public Employer {
public:
    void Print() {
        cout << ""Я менеджер"" << endl;
    }
};

class Worker : public Employer {
public:
    void Print() {
        cout << ""Я рабочий"" << endl;
    }
};

int main() {
    setlocale(LC_ALL, ""ru"");

    President pr;
    Manager mn;
    Worker wk;

    vector<Employer*> employers;

    employers.push_back(&pr);
    employers.push_back(&mn);
    employers.push_back(&wk);

    for (auto a : employers) {
        a->Print();
    }
}"
TJafnjNr,01 Hello SoftUni,myrdok123,Java,Saturday 11th of May 2024 05:11:16 AM CDT,"public class P01HelloSoftUni {

    public static void main(String[] args) {

        System.out.println(""Hello SoftUni"");


    }
}
"
1jjfJ4hw,AI,excellent940707,Python,Saturday 11th of May 2024 04:51:34 AM CDT,"# -*- coding: utf-8 -*-
""""""
Created on Sat Mar 23 15:02:20 2024

@author: yiwen
""""""

import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import datasets
from torchvision.transforms import ToTensor



batch_size = 64


training_data = datasets.FashionMNIST(
    root=""data"",
    train=True,
    download=True,
    transform=ToTensor()
    )

test_data = datasets.FashionMNIST(
    root=""data"",
    train=False,
    download=True,
    transform=ToTensor()
    )

train_dataloader = DataLoader(training_data, batch_size=batch_size)
test_dataloader = DataLoader(test_data, batch_size=batch_size)


device = (
     ""cuda""if torch.cuda.is_available()
    else ""mps"" if torch.backends.mps.is_available()
    else ""cpu""
    )

print(f""Using {device} device"")



class NeuralNetwork(nn.Module):
    def __init__(self):
        super().__init__()
        self.flatten = nn.Flatten()
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(28*28, 512),
            nn.ReLU(),
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, 10)
            )
    
    def forward(self, x):
        x = self.flatten(x)
        logits = self.linear_relu_stack(x)
        return logits
    
model = NeuralNetwork().to(device)
print(model)



loss_fn = nn.CrossEntropyLoss()
# model.parameters()返回一個包含所有這些參數的生成器或迭代器，
# 你可以使用它來訪問和操作這些參數。
optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)

def train(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    model.train()
    for batch, (x, y) in enumerate(dataloader):
        x, y = x.to(device), y.to(device)
        
        # Compute prediction error
        pred = model(x)
        loss = loss_fn(pred, y)
        
        # Backpropagation
        loss.backward()
        optimizer.step()
        optimizer.zero_grad()
        
        if batch%100 ==0:
            loss, current = loss.item(), (batch + 1)*len(x)
            print(f""loss: {loss:>7f} [{current:>5d}/{size:>5d}]"")
        
def test(dataloader, model, loss_fn):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)
    model.eval()
    
    test_loss, correct = 0, 0
    with torch.no_grad():
        for x, y in dataloader:
            x, y = x.to(device), y.to(device)
            pred = model(x)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1)==y).type(torch.float).sum().item()
    test_loss /= num_batches
    correct /= size
    print(f""Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f}\n"")



epochs = 5
for t in range(epochs):
    print(f""Epoch {t+1}\n"")
    train(train_dataloader, model, loss_fn, optimizer)
    test(test_dataloader, model, loss_fn)
print(""Done!"")

torch.save(model.state_dict(), ""model_pyt_1.pth"")
print(""Saved PyTorch Model State to model_pyt_1.pth"")

# model = NeuralNetwork().to(device)
# model.load_state_dict(torch.load(""model_pyt_1.pth""))



classes = [
    ""T-shirt/top"",
    ""Trouser"",
    ""Pullover"",
    ""Dress"",
    ""Coat"",
    ""Sandal"",
    ""Shirt"",
    ""Sneaker"",
    ""Bag"",
    ""Ankle boot"",
]

model.eval()
x, y = test_data[0][0], test_data[0][1]
with torch.no_grad():
    x = x.to(device)
    pred = model(x)
    predicted, actual = classes[pred[0].argmax(0)], classes[y]
    print(f'Predicted: ""{predicted}"", Actual: ""{actual}""')"
0RT1h3ZK,Untitled,NikaBang,C#,Saturday 11th of May 2024 04:46:49 AM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        string name = ""Neo"";
        int age = 25;
        double weight = 76.5;
        ulong money = 10000000000000000000;
        bool isSleeping = false;
    }
}"
eR7K3zPJ,Untitled,35657,C++,Saturday 11th of May 2024 04:31:22 AM CDT,"#include <set>
#include <string>
#include <iostream>
#include <vector>

using namespace std;


// Человек
class Person {
public:
    Person(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

private:
    string name_;
    int age_;
    string gender_;
};




// Рабочий
class Worker : public Person {
public:
    Worker(string name, int age, string gender) : Person(name, age, gender) {};

    virtual string Work() = 0;

};


// Маляр
class Painter : public Worker {
public:
    Painter(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я крашу"";
    }
};

// Водитель
class Driver : public Worker {
public:
    Driver(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я везу"";
    }
};

// Строитель
class Builder : public Worker {
public:
    Builder(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() { // если убрать реализацию метода, то Builder унаследует виртуальный метод и также станет абстрактным, создавать его экземпляры не получится
        return ""Я строю"";
    }
};

int main() {
    setlocale(LC_ALL, ""ru"");

    Painter pn(""Света"", 25, ""woman"");
    Driver dr(""Игорь"", 33, ""man"");
    Builder bd(""Женя"", 23, ""man"");

    //Worker wk(""Лена"", 25, ""women""); создать объект абстарктного класса нельзя, можно только унаследоваться от него и переопределить виртуальные методы (либо унаследоваться ещё)

    vector<Worker*> workers;

    workers.push_back(&pn);
    workers.push_back(&dr);
    workers.push_back(&bd);

    for (auto a : workers) {
        cout << a->GetName() << "" "" << a->GetAge() << "" "" << a->GetGender() << "" "" << a->Work() << endl;
    }
}"
CznHzKQc,Untitled,35657,C++,Saturday 11th of May 2024 04:30:54 AM CDT,"#include <set>
#include <string>
#include <iostream>
#include <vector>

using namespace std;


// Человек
class Person {
public:
    Person(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

private:
    string name_;
    int age_;
    string gender_;
};




// Рабочий.Владеет несколькими специальностями
class Worker : public Person {
public:
    Worker(string name, int age, string gender) : Person(name, age, gender) {};

    void AddSpeciality(string speciality) {
        specialties_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialties_.count(speciality);
    }

    virtual string Work() {
        return ""Я работаю"";
    }

private:
    set<string> specialties_;
};

class Painter : public Worker {
public:
    Painter(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я крашу"";
    }
};

class Driver : public Worker {
public:
    Driver(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я везу"";
    }
};

class Builder : public Worker {
public:
    Builder(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я строю"";
    }
};

int main() {
    setlocale(LC_ALL, ""ru"");

    Painter pn(""Света"", 25, ""woman"");
    Driver dr(""Игорь"", 33, ""man"");
    Builder bd(""Женя"", 23, ""man"");

    vector<Worker*> workers;

    workers.push_back(&pn);
    workers.push_back(&dr);
    workers.push_back(&bd);

    for (auto a : workers) {
        cout << a->GetName() << "" "" << a->GetAge() << "" "" << a->GetGender() << "" "" << a->Work() << endl; // теперь все работает как надо
    }
}"
AvAJhP3G,Untitled,35657,C++,Saturday 11th of May 2024 04:30:23 AM CDT,"#include <set>
#include <string>
#include <iostream>
#include <vector>

using namespace std;


// Человек
class Person {
public:
    Person(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

private:
    string name_;
    int age_;
    string gender_;
};



// Рабочий.Владеет несколькими специальностями
class Worker : public Person {
public:
    Worker(string name, int age, string gender) : Person(name, age, gender) {};

    void AddSpeciality(string speciality) {
        specialties_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialties_.count(speciality);
    }

    string Work() {
        return ""Я работаю"";
    }

private:
    set<string> specialties_;
};

class Painter : public Worker {
public:
    Painter(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я крашу"";
    }
};

class Driver : public Worker {
public:
    Driver(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я везу"";
    }
};

class Builder : public Worker {
public:
    Builder(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я строю"";
    }
};

int main() {
    setlocale(LC_ALL, ""ru"");

    Painter pn(""Света"", 25, ""woman"");
    Driver dr(""Игорь"", 33, ""man"");
    Builder bd(""Женя"", 23, ""man"");

    vector<Worker*> workers;

    workers.push_back(&pn);
    workers.push_back(&dr);
    workers.push_back(&bd);

    cout << pn.Work() << endl; // здесь выводится метод Work() наследника
    cout << dr.Work() << endl;
    cout << bd.Work() << endl;


    cout << endl << endl;

    for (auto a : workers) {
        cout << a->GetName() << "" "" << a->GetAge() << "" "" << a->GetGender() << "" "" << a->Work() << endl; // здесь выводится метод Work() родителя
    }
}"
pTKizdPP,Untitled,35657,C++,Saturday 11th of May 2024 04:29:59 AM CDT,"#include <set>
#include <string>
#include <iostream>
#include <vector>

using namespace std;


// Человек
class Person {
public:
    Person(string name, int age, string gender) : name_(name), age_(age), gender_(gender) {};

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

private:
    string name_;
    int age_;
    string gender_;
};




// Рабочий. Владеет несколькими специальностями
class Worker : public Person {
public:
    Worker(string name, int age, string gender) : Person(name, age, gender) {};

    void AddSpeciality(string speciality) {
        specialties_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialties_.count(speciality);
    }

    string Work() {
        return ""Я работаю"";
    }

private:
    set<string> specialties_;
};


// 
class Painter : public Worker {
public:
    Painter(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я крашу"";
    }
};

class Driver : public Worker {
public:
    Driver(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я везу"";
    }
};

class Builder : public Worker {
public:
    Builder(string name, int age, string gender) : Worker(name, age, gender) {};

    string Work() {
        return ""Я строю"";
    }
};

int main() {
    setlocale(LC_ALL, ""ru"");

    Painter pn(""Света"", 25, ""woman"");
    Driver dr(""Игорь"", 33, ""man"");
    Builder bd(""Женя"", 23, ""man"");

    vector<Worker*> workers;

    workers.push_back(&pn);
    workers.push_back(&dr);
    workers.push_back(&bd);

    for (auto a : workers) {
        cout << a->GetName() << "" "" << a->GetAge() << "" "" << a->GetGender() << endl;
    }
}"
gn1tP5FV,Untitled,35657,C++,Saturday 11th of May 2024 04:29:30 AM CDT,"#include <set>
#include <string>
#include <iostream>

using namespace std;


// Человек
class Person {
public:
    Person() {
        cout << ""Конструткор по умолчанию класса Person"" << endl;
    };

    Person(string name) {
        name_ = name;
        cout << ""Параметризованный конструткор класса Person"" << endl;
    };

    Person(string name, int age) {
        name_ = name;
        age_ = age;
        cout << ""другой параметризованный конструткор класса Person"" << endl;
    };

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }
   
    ~Person() {
        cout << ""Деструктор класса Person"" << endl;
    };

private:
    string name_ = ""Иван"";
    string gender_ = ""М"";
    int age_ = 33;
};


// Рабочий. Владеет несколькими специальностями
class Worker : public Person {
public:
    Worker() {
        cout << ""Вызываем конструктор по умолчанию"" << endl;
    };

   /* Worker() : Person(""Гена"") {
        cout << ""Вызываем параметризованный"" << endl;
    };

    Worker() : Person(""Гена"", 33) {
        cout << ""Вызываем другой параметризованный конструктор"" << endl;
    };*/

    Worker(string name, int age) :Person(name, age) {
        cout << ""Вызываем другой параметризованный конструктор"" << endl;
    };

    void AddSpeciality(string speciality) {
        specialties_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialties_.count(speciality);
    }

    ~Worker() {
        cout << ""Деструктор класса Worker"" << endl;
    };

private:
    set<string> specialties_;
};


int main() {
    setlocale(LC_ALL, ""ru"");

    Worker wr;

    cout << wr.GetName() << endl;

    //Worker wr2(""Гена"", 33);

    //cout << wr2.GetName() << endl;
  

}"
4uj1HHZn,Untitled,35657,C++,Saturday 11th of May 2024 04:28:52 AM CDT,"#include <set>
#include <string>
#include <iostream>

using namespace std;


// Человек
class Person {
public:
    Person() {
        cout << ""Конструткор класса Person"" << endl;
    };

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }
   
    ~Person() {
        cout << ""Деструктор класса Person"" << endl;
    };

private:
    string name_;
    string gender_;
    int age_;
};


// Рабочий. Владеет несколькими специальностями
class Worker : public Person {
public:
    Worker() {
        cout << ""Конструткор класса Worker"" << endl;
    };

    void AddSpeciality(string speciality) {
        specialties_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialties_.count(speciality);
    }

    ~Worker() {
        cout << ""Деструктор класса Worker"" << endl;
    };

private:
    set<string> specialties_;
};

// Маляр
class Painter : public Worker {
public:
    Painter() {
        cout << ""Конструктор класса Painter"" << endl;
    };

    void Paint() {
        cout << ""Крашу стену"" << endl;
    }


    ~Painter() {
        cout << ""Деструктор класса Painter"" << endl;
    };
};

int main() {
    setlocale(LC_ALL, ""ru"");

    //Person ps;

    //Worker wr;

    Painter pr;
   
    cout << endl << endl;

}"
jdegpEmA,Untitled,35657,C++,Saturday 11th of May 2024 04:28:16 AM CDT,"#include <set>
#include <string>
#include <iostream>

using namespace std;


// Человек
class Person {
public:
    Person() {
        cout << ""Конструткор класса Person"" << endl;
    };

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }
   

private:
    string name_;
    string gender_;
    int age_;
};


// Рабочий. Владеет несколькими специальностями
class Worker : public Person {
public:
    Worker() {
        cout << ""Конструткор класса Worker"" << endl;
    };

    void AddSpeciality(string speciality) {
        specialties_.insert(speciality);
    }
    bool HasSpeciality(string speciality) const {
        return specialties_.count(speciality);
    }

private:
    set<string> specialties_;
};

// Маляр
class Painter : public Worker {
public:
    Painter() {
        cout << ""Конструктор класса Painter"";
    };

    void Paint() {
        cout << ""Крашу стену"" << endl;
    }

};

int main() {
    setlocale(LC_ALL, ""ru"");

    Painter pr;
	
	//Worker wr;
	
	 //Person ps;
   
}"
2g4zQvke,Incident table,kunbata,TypeScript,Saturday 11th of May 2024 04:26:46 AM CDT,"//incident table

import React, { useState } from ""react"";
import Pagination from ""@/components/general/pagination/""
import {
  DataGrid,
  DataGridHeader,
  DataGridRow,
  DataGridHeaderCell,
  DataGridBody,
  DataGridCell,
  RowRenderer,
  DataGridProps,
} from ""@fluentui-contrib/react-data-grid-react-window"";
import { TableColumnDefinition, useFluent, useScrollbarWidth } from ""@fluentui/react-components"";

interface TableProps<TItem> {
  items: Array<TItem>;
  columns: TableColumnDefinition<TItem>[];
  columnSizingOptions: any;
  sortState: Parameters<NonNullable<DataGridProps[""onSortChange""]>>[1];
  onSortChange: (e: React.MouseEvent, sortState: Parameters<NonNullable<DataGridProps[""onSortChange""]>>[1]) => void;
}

const tableStyles: React.CSSProperties = {
  backgroundColor: ""transparent"",
  borderRadius: ""5px"",
  width: ""80vw"",
  marginTop: ""4.5em"",
};
const headerStyles = {
  borderBottom: ""1px solid lightgrey"",
  backgroundColor: ""white""
};

const Table = ({ items, columns, columnSizingOptions, sortState, onSortChange }: TableProps<any>) => {
  const [currentPage, setCurrentPage] = useState(1);
  const { targetDocument } = useFluent();
  const scrollbarWidth = useScrollbarWidth({ targetDocument });
  const [sortedItems, setSortedItems] = useState(items)

  const handlePageChange = (pageNumber: number) => {
    setCurrentPage(pageNumber);
  };

  const itemsPerPage = 13;

  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = Math.min(startIndex + itemsPerPage, items.length);
  let visibleItems = items.slice(startIndex, endIndex);

  const RenderRow: RowRenderer<any> = ({ item, rowId }) => {
    const [isHovered, setIsHovered] = useState(false);

    const handleMouseEnter = () => {
      setIsHovered(true);
    };

    const handleMouseLeave = () => {
      setIsHovered(false);
    };

    const rowStyle = {
      borderBottom: ""1px solid lightgrey"",
      height: ""4em"",
      backgroundColor: ""#f6f6f6"",
      ...(isHovered && { backgroundColor: ""#e5e5e5"" })
    };

    return (
        <DataGridRow<any>
            key={rowId}
            style={rowStyle}
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
        >
          {({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}
        </DataGridRow>
    );
  };

  return (
      <div style={tableStyles}>
        <>
          <DataGrid
              items={visibleItems}
              columns={columns}
              focusMode=""composite""
              sortable
              resizableColumns
              style={{ width: ""max-content"" }}
              size=""extra-small""
              columnSizingOptions={
                columnSizingOptions ? columnSizingOptions : null
              }
              sortState={sortState}
              onSortChange={onSortChange}
          >
            <DataGridHeader style={{ paddingRight: scrollbarWidth, ...headerStyles }}>
              <DataGridRow>
                {({ renderHeaderCell }) => (
                    <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>
                )}
              </DataGridRow>
            </DataGridHeader>
            <DataGridBody itemSize={50} height={visibleItems.length * 50}>
              {RenderRow}
            </DataGridBody>
          </DataGrid>
          <Pagination
              totalItems={items.length}
              itemsPerPage={itemsPerPage}
              currentPage={currentPage}
              onPageChange={handlePageChange}
          />
        </>
      </div>
  );
};

export default Table;"
7XPmH9bw,Bugs en wensen table,kunbata,TypeScript,Saturday 11th of May 2024 04:26:16 AM CDT,"//bugs and wensen table

import { WorkItem } from ""@/app/(licentie)/interfaces"";
import {
  Badge,
  DataGrid,
  DataGridBody,
  DataGridCell,
  DataGridHeader,
  DataGridHeaderCell,
  DataGridRow,
  Menu,
  MenuItem,
  MenuList,
  MenuPopover,
  MenuTrigger,
  TableCellLayout,
  TableColumnDefinition,
  Tooltip,
  createTableColumn,
} from ""@fluentui/react-components"";
import { useRef } from ""react"";
import bugLogo from ""../../../../../public/assets/Bug Rood.svg"";
import wensLogo from ""../../../../../public/assets/wens.svg"";
import Image from ""next/image"";
import { useAppContext } from ""@/app/context"";
import Link from ""next/link"";
import { getImageFromLicentie } from ""@/core/utils/functions"";
import {DataGridProps} from ""@fluentui-contrib/react-data-grid-react-window"";

const columnSizingOptions = {
  code: {
    minWidth: 80,
    defaultWidth: 100,
  },
  title: {
    minWidth: 300,
    defaultWidth: 600,
  },
  type: {
    minWidth: 150,
    defaultWidth: 200,
  },
  week: {
    minWidth: 120,
    defaultWidth: 180,
  },
  link: {
    minWidth: 120,
    defaultWidth: 120,
  },
};

function BugsWensenTable({ workItems, sortState, onSortChange }: { workItems: WorkItem[], sortState: Parameters<NonNullable<DataGridProps[""onSortChange""]>>[1];
  onSortChange: (e: React.MouseEvent, sortState: Parameters<NonNullable<DataGridProps[""onSortChange""]>>[1]) => void; }) {
  const { userData } = useAppContext();
  const refMap = useRef<Record<string, HTMLElement | null>>({});

  const getIterationPath = (item: WorkItem) => {
    const parts = item.fullIteration!.split(""\\"");
    const waveString = parts[2];
    return waveString;
  };

  const newLicentieString = (path: string) => {
    const modifiedString = path.replace(/[^\\]+\\[\d.]+\s*/g, """");
    return getImageFromLicentie(modifiedString);
  };

  const dataBalkcolumns: TableColumnDefinition<WorkItem>[] = [
    createTableColumn<WorkItem>({
      columnId: ""code"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Code"";
      },
      renderCell: (item) => {
        return (
          <TableCellLayout>
            <Link
              href={`https://dev.azure.com/databalk/Debatic/_workitems/edit/${item.id}/`}
              target=""_blank""
              style={{
                textDecoration: ""underline"",
                color: ""#0e5f7f"",
              }}
            >
              <Badge
                color=""informative""
                style={{
                  textDecoration: ""underline"",
                }}
              >
                {item.id}
              </Badge>
            </Link>
          </TableCellLayout>
        );
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""title"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Title"";
      },
      renderCell: (item) => {
        return (
          <TableCellLayout>
            <Link
              href={`/ontwikkeling/${item.id}`}
              style={{
                color: ""#0e5f7f"",
                textDecoration: ""underline"",
              }}
            >
              {item.title}
            </Link>
          </TableCellLayout>
        );
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""type"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Type"";
      },
      renderCell: (item) => {
        return (
          <TableCellLayout
            media={
              <Image
                src={item.type == ""Product Backlog Item"" ? wensLogo : bugLogo}
                width={30}
                height={30}
                alt=""Bug icon""
              />
            }
          ></TableCellLayout>
        );
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""fibo"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Fibo"";
      },
      renderCell: (item) => {
        return (
          <TableCellLayout>
            <Badge>{item.fibo ?? -1}</Badge>
          </TableCellLayout>
        );
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""path"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Licentie"";
      },
      renderCell: (item) => {
        return (
          <TableCellLayout>
            <Tooltip
              content={newLicentieString(item?.path!).name}
              relationship=""label""
            >
              <img
                src={newLicentieString(item?.path!).logo}
                alt=""zaken-licentie""
                width={25}
                height={25}
              />
            </Tooltip>
          </TableCellLayout>
        );
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""iteration"",
      renderHeaderCell: () => {
        return ""Versie"";
      },
      renderCell: (item) => {
        return <TableCellLayout>{getIterationPath(item)}</TableCellLayout>;
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""full_iteration"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Sprint"";
      },
      renderCell: (item) => {
        return <TableCellLayout>{item.iteration}</TableCellLayout>;
      },
    }),
  ];

  const columns: TableColumnDefinition<WorkItem>[] = [
    createTableColumn<WorkItem>({
      columnId: ""code"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Code"";
      },
      renderCell: (item) => {
        return (
          <TableCellLayout>
            <Badge color=""informative"">{item.id}</Badge>
          </TableCellLayout>
        );
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""title"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Title"";
      },
      renderCell: (item) => {
        return (
          <TableCellLayout>
            <Link
              href={`/ontwikkeling/${item.id}`}
              style={{
                color: ""#0e5f7f"",
                textDecoration: ""underline"",
              }}
            >
              {item.title}
            </Link>
          </TableCellLayout>
        );
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""type"",
      renderHeaderCell: () => {
        return ""Type"";
      },
      renderCell: (item) => {
        return (
          <TableCellLayout
            media={
              <Image
                src={item.type == ""Product Backlog Item"" ? wensLogo : bugLogo}
                width={30}
                height={30}
                alt=""Bug icon""
              />
            }
          ></TableCellLayout>
        );
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""fibo"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Fibo"";
      },
      renderCell: (item) => {
        return (
          <TableCellLayout>
            <Badge>{item.fibo ?? -1}</Badge>
          </TableCellLayout>
        );
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""path"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Licentie"";
      },
      renderCell: (item) => {
        return (
          <TableCellLayout>
            <Tooltip
              content={newLicentieString(item?.path!).name}
              relationship=""label""
            >
              <img
                src={newLicentieString(item?.path!).logo}
                alt=""zaken-licentie""
                width={25}
                height={25}
              />
            </Tooltip>
          </TableCellLayout>
        );
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""iteration"",
      renderHeaderCell: () => {
        return ""Versie"";
      },
      renderCell: (item) => {
        return <TableCellLayout>{getIterationPath(item)}</TableCellLayout>;
      },
    }),
    createTableColumn<WorkItem>({
      columnId: ""full_iteration"",
      compare: (a,b) => 0,
      renderHeaderCell: () => {
        return ""Sprint"";
      },
      renderCell: (item) => {
        return <TableCellLayout>{item.iteration}</TableCellLayout>;
      },
    }),
  ];

  return (
    <div
      style={{
        backgroundColor: ""white"",
        overflowY: ""hidden"",
      }}
    >
      {workItems.length == 0 ? (
        <div
          style={{
            padding: ""20px 30px"",
            textAlign: ""center"",
            fontSize: ""1.1rem"",
          }}
        >
          Geen bugs of wensen
        </div>
      ) : (
        <DataGrid
          items={workItems}
          columns={
            userData?.mail.includes(""databalk"") ? dataBalkcolumns : columns
          }
          sortable
          selectionMode=""multiselect""
          resizableColumns
          columnSizingOptions={columnSizingOptions}
          sortState={sortState}
          onSortChange={onSortChange}
        >
          <DataGridHeader>
            <DataGridRow selectionCell={{ ""aria-label"": ""Select all rows"" }}>
              {({ renderHeaderCell, columnId }, dataGrid) =>
                dataGrid.resizableColumns ? (
                  <Menu openOnContext>
                    <MenuTrigger>
                      <DataGridHeaderCell
                        ref={(el) => (refMap.current[columnId] = el)}
                      >
                        {renderHeaderCell()}
                      </DataGridHeaderCell>
                    </MenuTrigger>
                    <MenuPopover>
                      <MenuList>
                        <MenuItem
                          onClick={dataGrid.columnSizing_unstable.enableKeyboardMode(
                            columnId
                          )}
                        >
                          Keyboard Column Resizing
                        </MenuItem>
                      </MenuList>
                    </MenuPopover>
                  </Menu>
                ) : (
                  <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>
                )
              }
            </DataGridRow>
          </DataGridHeader>
          <DataGridBody<WorkItem>>
            {({ item, rowId }) => (
              <DataGridRow<WorkItem>
                key={rowId}
                selectionCell={{ ""aria-label"": ""Select row"" }}
              >
                {({ renderCell }) => (
                  <DataGridCell>{renderCell(item)}</DataGridCell>
                )}
              </DataGridRow>
            )}
          </DataGridBody>
        </DataGrid>
      )}
    </div>
  );
}

export default BugsWensenTable;"
2Y0KhXSU,Platform page,kunbata,TypeScript,Saturday 11th of May 2024 04:25:19 AM CDT,"//platform page

""use client""

import {AppContext} from ""@/app/context"";
import {useCallback, useContext, useEffect, useState} from ""react"";
import {dataBalkRobotEndpoints, invokeDataBalkRobot} from ""@/core/services/dataBalkRobot"";
import {Spinner} from ""@fluentui/react-components"";
import Table from ""@/components/general/tables/incidentTable"";
import Filter from ""@/components/general/filter"";
import {columns, columnSizingOptions} from ""@/app/(service)/platform/columns"";
import {BeheerIncident} from ""@/app/(service)/interfaces"";
import IncidentCards from ""@/app/(service)/platform/cards"";
import {filters} from ""@/app/(service)/platform/filters"";
import {DataGridProps} from ""@fluentui-contrib/react-data-grid-react-window"";

const Platform = () => {
    const customer  = useContext(AppContext)?.customer;

    const initialSelectedFilters: Record<string, number[]> = {""Status"": [
        799880000, 799880001, 799880002]};

    filters.forEach((category) => {
        initialSelectedFilters[category.title] = [];
    });

    const [beheerIncidents, setBeheerIncidents] = useState<BeheerIncident[]>([]);
    const [selectedFilters, setSelectedFilters] = useState(initialSelectedFilters);
    const [isCardView, setIsCardView] = useState(true);
    const [loading, setLoading] = useState(false);
    const [searchText, setSearchText] = useState<string>("""");
    const [sortState, setSortState] = useState<Parameters<NonNullable<DataGridProps[""onSortChange""]>>[1]>({
        sortColumn: ""melder"",
        sortDirection: ""descending"",
    });

    const handleSearchTextChange = (newSearchText) => {
        const updatedSearchText = typeof newSearchText === ""string"" ? newSearchText : newSearchText?.value || """";
        setSearchText(updatedSearchText);
    };

    const fetchData = useCallback(async () => {
        try {
            setLoading(true);
            const beheerIncidents = await invokeDataBalkRobot<BeheerIncident[]>(dataBalkRobotEndpoints.getBeheerIncident + `${customer?.accountId}`, ""GET"");
            setBeheerIncidents(beheerIncidents);
        } catch (error: any) {
            console.log(error)
        } finally {
            setLoading(false);
        }
    }, [customer]);

    useEffect(() => {
        fetchData().then();
    }, [fetchData]);

    const applyFilters = (incidents: BeheerIncident[], selectedFilters: Record<string, number[]>, search: string) => {
        const filtered = incidents.filter((incident) => {
            for (const category in selectedFilters) {
                if (selectedFilters[category].length > 0) {
                    const propertyMatched = (
                        incident.frequentie === undefined || selectedFilters[category].includes(incident.frequentie)
                    ) || (
                        incident.prioriteit === undefined || selectedFilters[category].includes(incident.prioriteit)
                    ) || (
                        incident.status === undefined || selectedFilters[category].includes(incident.status)
                    ) || (
                        incident.fibo === undefined || selectedFilters[category].includes(incident.fibo)
                    );

                    if (!propertyMatched) {
                        console.log(""Property not matched:"", incident);
                        return false;
                    }
                }
            }

            const searchLowerCase = (search || """").toString().toLowerCase();

            if (searchLowerCase.trim() !== """") {
                if (
                    !incident.onderwerp.toLowerCase().includes(searchLowerCase) &&
                    !incident.beheernummer.toLowerCase().includes(searchLowerCase) &&
                    !incident.behandelaarFullName.toLowerCase().includes(searchLowerCase)
                ) {
                    return false;
                }
            }

            return true;
        });

        return filtered;
    };

    const handleFilterChange = (categoryName: string, optionId: number) => {
        const updatedFilters = { ...selectedFilters };

        if (updatedFilters[categoryName].includes(optionId)) {
            updatedFilters[categoryName] = updatedFilters[categoryName].filter((id) => id !== optionId);
        } else {
            updatedFilters[categoryName] = [...updatedFilters[categoryName], optionId];
        }
        setSelectedFilters(updatedFilters);
    };

    const handleSortChange = (event, sortState) => {
        setSortState(sortState);

        setBeheerIncidents(beheerIncidents.sort((a, b) => {

            if (sortState.sortColumn == ""melder""){
                return sortState.sortDirection == ""ascending"" ? a.behandelaarFullName.localeCompare(b.behandelaarFullName) : b.behandelaarFullName.localeCompare(a.behandelaarFullName);
            }

            if (sortState.sortDirection == ""ascending""){
                if (a[sortState.sortColumn] > b[sortState.sortColumn]) return 1;
                if (a[sortState.sortColumn] < b[sortState.sortColumn]) return -1;
            }

            //Descending
            if (sortState.sortDirection == ""descending""){
                if (a[sortState.sortColumn] > b[sortState.sortColumn]) return -1;
                if (a[sortState.sortColumn] < b[sortState.sortColumn]) return 1;
            }
            return 0; // Rows are equal

        }));
    };

    const filteredIncidents: BeheerIncident[] = applyFilters(beheerIncidents, selectedFilters, searchText);

    const renderedIncidents = isCardView ? (
        <IncidentCards incidents={filteredIncidents}/>
    ) : (
        <Table items={beheerIncidents} columns={columns} columnSizingOptions={columnSizingOptions} sortState={sortState} onSortChange={handleSortChange}/>
    );

    const toggleView = () => {
        setIsCardView(!isCardView);
    };

    return (
        <main>
            <Filter
                toggleView={toggleView}
                filters={filters}
                handleFilterChange={handleFilterChange}
                selectedFilters={selectedFilters}
                handleSearchTextChange={handleSearchTextChange}
                searchText={searchText}
                searchBoxWidth={""34em""}
            />
            {loading ? (
                <Spinner />
            ) : (
                renderedIncidents
            )}
        </main>
    )
}

export default Platform;"
KVS1Eecu,Untitled,ethansmith2000,Python,Saturday 11th of May 2024 03:39:34 AM CDT,"from PIL import Image
import torchvision.transforms as T
import torch

img = Image.open(""test.png"").convert(""RGB"").resize((128,128))
img = T.ToTensor()(img).unsqueeze(0).to(""cuda"") * 2 - 1
img = img.permute(0,2,3,1).reshape(1,-1,3)

steps = 5
step_size = 0.95
do_attention = True

with torch.no_grad():
    for i in range(steps):
        q = k = torch.nn.functional.normalize(img, dim=-1)
        output = torch.nn.functional.scaled_dot_product_attention(q, k, img, dropout_p=0.0, is_causal=False, scale=100.0)
        img = img * (1-step_size) + output * step_size
        img = img.clamp(-1, 1)

img = img.reshape(1,128,128,3).permute(0,3,1,2)
img = (img + 1) / 2
img = T.ToPILImage()(img[0])
"
87sX9iK7,Comparison of membership check speeds in lists vs sets,CodingComputing,Python,Saturday 11th of May 2024 02:35:50 AM CDT,"# Comparison of membership check speeds in lists vs sets
# by @CodingComputing

# Run this in a Jupyter Notebook

# CELL 1 (setup stuff)
import timeit
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
sizes = 10 ** np.arange(8)  # Different container sizes to time
container_names = (""list"", ""set"")

# CELL 2 (compare across different sizes)
size_times_df = pd.DataFrame(columns=container_names)
# Measure time for membership checks for different sizes
for size in sizes:
    test_containers = {
        'list': list(range(size)),
        'set': set(range(size))
    }
    target = np.floor(size/2)  # Choose middle element as target
    for container in test_containers:
        exec_time = timeit.Timer(
            f'{target} in test_containers[""{container}""]',
            globals=globals()
            ).timeit(number=10)
        size_times_df.loc[size, container] = exec_time
#
size_times_df

# CELL 3 (graph for Cell 2 results)
# Plot and customization
fig, ax = plt.subplots()
size_times_df.plot(ax=ax, marker='o')
# Make log scales on axes, because our data points are magnitudes apart
ax.set_xscale('log')
ax.set_yscale('log')
ax.set_xlabel('Container Size', size=12)
ax.set_ylabel('Membership check time\n(for middle element)', size=12)
ax.set_title('Comparison of Membership Check Times\nin lists vs sets')
ax

# CELL 4 (compare across target positions)
# Measure membership check times for different positions within the list
# keeping container size constant
size = 10_000_000
positions = [0, 0.25, 0.5, 0.75, 1]
pos_times_df = pd.DataFrame(columns=container_names)
#
for pos in positions:
    target = round(size*pos)
    for container in test_containers:
        exec_time = timeit.Timer(
            f'{target} in test_containers[""{container}""]',
            globals=globals()
        ).timeit(number=10)
        pos_times_df.loc[pos, container] = exec_time
#
pos_times_df

# CELL 5 (graph for Cell 4 results)
fig, ax = plt.subplots()
pos_times_df.plot(ax=ax, marker='o')
ax.set_xlabel(f'Relative Position within list\n(Container size: {size})', size=12)
ax.set_ylabel('Membership check time', size=12)
ax.set_title('Comparison of Membership Check Times\nin lists vs sets')
ax

# That's it! Follow x.com/CodingComputing for more on Python!"
9pu1ZQd5,Untitled,35657,C++,Saturday 11th of May 2024 02:12:24 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <Windows.h>

using namespace std;

struct contact {
	char name[40];
	char mobile_phone[20];
	char home_phone[20];
	char work_phone[20];
};

struct phone_book {
	int contact_number = 0;
	int capacity = 4;
	contact* store = new contact[capacity];
};

void add_contact(phone_book& book, const char* name, const char* mobile_phone, const char* home_phone, const char* work_phone) {

	if (book.contact_number == book.capacity) {
		book.capacity *= 2;
		contact* temp = new contact[book.capacity];
		for (int i = 0; i < book.contact_number; i++) {
			temp[i] = book.store[i];
		}
		delete[] book.store;
		book.store = temp;
	}

	strcpy(book.store[book.contact_number].name, name);
	strcpy(book.store[book.contact_number].mobile_phone, mobile_phone);
	strcpy(book.store[book.contact_number].home_phone, home_phone);
	strcpy(book.store[book.contact_number].work_phone, work_phone);
	book.contact_number++;
}

void del_contact(phone_book& book, const char* name) {
	for (int i = 0; i < book.contact_number; i++) {
		if (!strcmp(book.store[i].name, name)) {
			for (int j = i; j < book.contact_number - 1; j++) {
				book.store[j] = book.store[j + 1];
			}
			book.contact_number--;
		}
	}
}

void find_contact_name(const phone_book& book, const char* name) {
	for (int i = 0; i < book.contact_number; i++) {
		if (!strcmp(book.store[i].name, name)) {
			cout << book.store[i].name << "", мобильный телефон - "" << book.store[i].mobile_phone << "", рабочий телефон - "" << book.store[i].work_phone << "", домашний телефон - "" << book.store[i].home_phone << endl;
		}
	}
}

void show_all_contacts(const phone_book& book) {
	for (int i = 0; i < book.contact_number; i++) {
		cout << book.store[i].name << "", мобильный телефон - "" << book.store[i].mobile_phone << "", рабочий телефон - "" << book.store[i].work_phone << "", домашний телефон - "" << book.store[i].home_phone << endl;
	}
	cout << endl;
}

int main() {

	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	phone_book my_book;

	add_contact(my_book, ""Иван"", ""+79111111111"", ""111111"", ""222222"");
	add_contact(my_book, ""Оля"", ""+79111114444"", ""111144"", ""222244"");
	add_contact(my_book, ""Женя"", ""+79111115555"", ""111155"", ""222255"");
	add_contact(my_book, ""Саша"", ""+79111116666"", ""111166"", ""222266"");

	show_all_contacts(my_book);

	del_contact(my_book, ""Женя"");

	show_all_contacts(my_book);

	find_contact_name(my_book, ""Саша"");
}"
GaZ4fb8h,GFCHGFDHGFHG,gadungw71,PHP,Saturday 11th of May 2024 01:08:17 AM CDT,"https://github.com/4-2024-full-korea-4k
https://sketchfab.com/3d-models/4-2024-full-4k-df0d6f1500f24e9ca297860718e3faf6
https://sketchfab.com/3d-models/4-koreahd-f029ac7a107b47d380f584e948f5788e
https://topmate.io/the_rounduppunishmentkoreansub4k/974549/pay
https://topmate.io/the_roundup_koreanhd/974550
https://www.artstation.com/artwork/EvkN82
https://www.artstation.com/freewatchtheroundup20245/profile
https://www.kooapp.com/koo/guest_3V30S0/ee77143c-4ebd-4e16-83d9-770f91f9da37
https://open.firstory.me/user/clw1oep810am301wg1ewf0vo6
https://open.firstory.me/story/clw1of70z0am401wg24n2gu7h
https://wandering.flarum.cloud/d/61234-kikilmonyett
https://hiuderyy.hashnode.dev/babihhutann
https://www.bankier.pl/forum/temat_cobaanterusmenghadang,66263515.html
https://medium.com/@rarawwwuu2/dfsresnbrdyn-91168e8ff5b8
https://www.onfeetnation.com/profiles/blogs/dadankentrung
https://forum.mush.com.br/topic/215515/the-roundup-punishment-%EC%A0%84%EC%B2%B4-%EC%98%81%ED%99%94-full-hd-%EC%A0%84%EC%B2%B4-%EB%B2%84%EC%A0%84
https://hackmd.io/@rerewilli6/SyHewFhzA
https://demo.hedgedoc.org/s/LAP6LEm1Y
https://rentry.co/vhtn69e5
https://paste.ee/p/j2A0S
https://yamcode.com/dsfseg-513
https://lifeisfeudal.com/Discussions/question/rhyntfmgy8
https://start.me/w/52bY7p
https://plaza.rakuten.co.jp/aryasantosso/diary/202405110000/
https://telegra.ph/DSFESBNT-05-11
https://muckrack.com/alli-awan/bio
https://profile.hatena.ne.jp/alitariq/
https://www.bitsdujour.com/profiles/lVhgrt
http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/752540/Default.aspx
https://www.fitlynk.com/1715407410F766346
"
UBihU18U,Conversor MP4 para MP3 e Vice Versa (Necessita do FFMPEG) Versão Final (IMPORTANTE),MizunoBrasil,Python,Saturday 11th of May 2024 12:52:41 AM CDT,"************************************************************
** Necessário ter instalado o FFMPEG para funcionar     ****
------------------------------------------------------------
Arquivo .bat:
@echo off
echo Instalando o FFmpeg...
winget install ffmpeg
echo.
echo O FFmpeg foi instalado com sucesso!
pause
echo Pressione uma tecla para fechar...
pause > nul
---------------------------------------------------------------------
** MP3 para MP4 permite adicionar imagem de fundo (poster/thumbnail) *
*********************************************************************

import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import subprocess
import threading
import os

class FileConverterApp:
    def __init__(self, master):
        self.master = master
        master.title(""Conversor de Arquivos"")

        # Criar o menu
        menu_bar = tk.Menu(master)
        file_menu = tk.Menu(menu_bar, tearoff=0)
        file_menu.add_command(label=""Sair"", command=master.quit)
        menu_bar.add_cascade(label=""Arquivo"", menu=file_menu)
        help_menu = tk.Menu(menu_bar, tearoff=0)
        help_menu.add_command(label=""Sobre"", command=self.show_about)
        menu_bar.add_cascade(label=""Ajuda"", menu=help_menu)
        master.config(menu=menu_bar)

        # Configurações da janela
        window_size = ""400x300""
        master.geometry(window_size)
        screen_width = master.winfo_screenwidth()
        screen_height = master.winfo_screenheight()
        x = int((screen_width / 2) - (400 / 2))
        y = int((screen_height / 2) - (300 / 2))
        master.geometry(f""{window_size}+{x}+{y}"")

        # Botões para escolher tipo de conversão
        self.mp4_to_mp3_button = tk.Button(master, text=""Converter MP4 para MP3"", command=self.convert_mp4_to_mp3)
        self.mp4_to_mp3_button.pack(pady=10)

        self.mp3_to_mp4_button = tk.Button(master, text=""Converter MP3 para MP4"", command=self.convert_mp3_to_mp4)
        self.mp3_to_mp4_button.pack(pady=10)

        # Barra de progresso
        self.progress_bar = ttk.Progressbar(master, mode='indeterminate', length=200)

        # Caixa de texto para exibir o caminho do arquivo convertido
        self.output_path_entry = tk.Entry(master, width=50)
        self.output_path_entry.pack(pady=10)
        self.output_path_entry.config(state='readonly', readonlybackground='white')

        # Adicionar menu de contexto à caixa de texto
        self.context_menu = tk.Menu(master, tearoff=0)
        self.context_menu.add_command(label=""Copiar"", command=self.copy_to_clipboard)
        self.output_path_entry.bind(""<Button-3>"", self.show_context_menu)

        # Label para mensagem final
        self.result_label = tk.Label(master, text="""")
        self.result_label.pack()

        # Rodapé com a versão do programa
        self.footer_label = tk.Label(master, text=""Conversor MP3/MP4 - v5"", anchor=""w"")
        self.footer_label.pack(side=""bottom"", fill=""x"")

    def convert_mp4_to_mp3(self):
        mp4_file = filedialog.askopenfilename(filetypes=[(""MP4 Files"", ""*.mp4"")])
        if not mp4_file:
            messagebox.showwarning('Aviso', 'Seleção de arquivo MP4 cancelada.')
            return

        # Obter apenas o nome do arquivo sem extensão
        output_file_name = os.path.splitext(os.path.basename(mp4_file))[0]
        
        output_file = filedialog.asksaveasfilename(defaultextension="".mp3"", filetypes=[(""MP3 Files"", ""*.mp3"")], initialfile=output_file_name)
        if not output_file:
            messagebox.showwarning('Aviso', 'Conversão cancelada.')
            return

        command = [
            'ffmpeg',
            '-i', mp4_file,
            '-vn',
            '-acodec', 'libmp3lame',
            '-q:a', '4',
            f""{output_file}""
        ]

        self.progress_bar.pack(pady=10)
        self.progress_bar.start(10)
        
        threading.Thread(target=self.run_ffmpeg_command, args=(command, output_file)).start()

    def convert_mp3_to_mp4(self):
        mp3_file = filedialog.askopenfilename(filetypes=[(""MP3 Files"", ""*.mp3"")])
        if not mp3_file:
            messagebox.showwarning('Aviso', 'Seleção de arquivo MP3 cancelada.')
            return

        # Obter apenas o nome do arquivo sem extensão
        output_file_name = os.path.splitext(os.path.basename(mp3_file))[0]
        
        output_file = filedialog.asksaveasfilename(defaultextension="".mp4"", filetypes=[(""MP4 Files"", ""*.mp4"")], initialfile=output_file_name)
        if not output_file:
            messagebox.showwarning('Aviso', 'Conversão cancelada.')
            return

        image_file = filedialog.askopenfilename(filetypes=[(""Image Files"", ""*.jpg;*.jpeg;*.png"")])
        if not image_file:
            messagebox.showwarning('Aviso', 'Seleção de imagem cancelada.')
            return

        command = [
            'ffmpeg',
            '-loop', '1',
            '-framerate', '2',
            '-i', image_file,
            '-i', mp3_file,
            '-vf', 'scale=trunc(iw/2)*2:trunc(ih/2)*2',
            '-c:v', 'libx264',
            '-tune', 'stillimage',
            '-c:a', 'aac',
            '-b:a', '192k',
            '-shortest',
            '-pix_fmt', 'yuv420p',
            f""{output_file}""
        ]

        self.progress_bar.pack(pady=10)
        self.progress_bar.start(10)
        
        threading.Thread(target=self.run_ffmpeg_command, args=(command, output_file)).start()

    def run_ffmpeg_command(self, command, output_file):
        try:
            subprocess.run(command, check=True)
            self.output_path_entry.config(state='normal')
            self.output_path_entry.delete(0, tk.END)
            self.output_path_entry.insert(0, output_file)
            self.output_path_entry.config(state='readonly')
            self.result_label.config(text=""Conversão concluída!"")
            messagebox.showinfo('Sucesso', 'Conversão concluída!')
        except subprocess.CalledProcessError as e:
            self.result_label.config(text=f""Falha na conversão: {e}"")
            messagebox.showerror('Erro', f'Falha na conversão: {e}')
        finally:
            self.progress_bar.stop()
            self.progress_bar.pack_forget()  # Esconde a barra de progresso após a conclusão

    def show_context_menu(self, event):
        self.context_menu.post(event.x_root, event.y_root)

    def copy_to_clipboard(self):
        self.output_path_entry.select_range(0, tk.END)
        self.output_path_entry.event_generate('<<Copy>>')
        self.output_path_entry.selection_clear()

    def show_about(self):
        messagebox.showinfo(""Sobre"", ""Conversor de arquivos MP3 para vídeo em MP4 e vice-versa\n2024 - Mizuno"")

root = tk.Tk()
app = FileConverterApp(root)
root.mainloop()"
NzB9w4eS,lanqiudi,Damonwei,JSON,Saturday 11th of May 2024 12:50:29 AM CDT,"var rule = {
    title:'篮球帝录像',
    host:'https://www.lanqiudi.com',
    编码:'gbk',
    搜索编码:'gbk',
    homeUrl: '/a/nbalx/list_175_1.html',//网站的首页链接,用于分类获取和推荐获取
    url:'/a/fyclass_fypage.html',
    searchUrl:'',
    searchable:0,
    quickSearch:0,
    class_name:'NBA录像&NBA集锦&NBA十佳球&CBA录像&CBA集锦',
    class_url:'nbalx/list_175&nbajijin/list_18&top/list_23&cbalx/list_180&cbajijin/list_215',
    headers:{
        'User-Agent':'PC_UA'
    },
    timeout:15000,
    play_parse:true,
    lazy:`js:
        if (/weibo/.test(input)) {
            let split = input.replace('https://weibo.com/','').split('/');
            let userid = split[0];
            let pid = split[1];
            let html = 'https://weibo.com/ajax/statuses/show?id=' + pid + '&locale=zh-CN';
            let media_info = JSON.parse(request(html)).page_info.media_info;
            if (/1883881851/.test(userid)) {
                input = media_info.playback_list[0].play_info.url;
            } else {
                input = media_info.mp4_hd_url;
            }
            // let html = 'https://m.weibo.cn/statuses/show?id=' + pid;
            // let media_info = JSON.parse(request(html)).page_info.media_info;
            // if (/1883881851/.test(userid)) {
            //     input = media_info.urls.mp4_720p_mp4;
            // } else {
            //     input = media_info.stream_url_hd;
            // }
        }
    `,
    limit:6,
    double:false,
    推荐:'*',
//    一级:'.list_body li;a&&Text;*;span&&Text;a&&href',
	一级: `js:
		pdfh = jsp.pdfh;
		pdfa = jsp.pdfa;
		pd = jsp.pd;
		var d = [];
		var html = request(input);
		var list = pdfa(html, '.list_body&&li');
		list.forEach(it => {
            // 一级标题
            let title1;
            // 一级描述
            let desc1 = '20' + pdfh(it, 'span&&Text').replace('年','-').replace('月','-').replace('日','');
            // 一级图片URL
            let picUrl1;
            // 一级URL
            let url1 = pd(it, 'a&&href');

            // 通过"" ""进行截取
            let split = pdfh(it, 'a&&Text').split("" "");

            // NBA十佳球、五佳球
            if (/十佳球/.test(pdfh(it, 'a&&Text')) || /五佳球/.test(pdfh(it, 'a&&Text'))) {
                title1 = split[split.length-1];
                picUrl1 = 'https://cdn.leisu.com/basketball/eventlogo/2021/01/22/FvabFeKVjHyOyva-Bo51rrTrOGao?imageMogr2/auto-orient/thumbnail/200x200%3E';
            }
            // NBA录像、NBA集锦
            else if (/NBA/.test(pdfh(it, 'a&&Text'))) {
                // 若包含客队vs主队信息
                if (/vs/.test(pdfh(it, 'a&&Text'))) {
                    // 客队vs主队
                    let Team1vsTeam2 = split[split.length-2];
                    // 客队名称
                    let Team1 = Team1vsTeam2.split(""vs"")[0];
                    // 主队名称
                    let Team2 = Team1vsTeam2.split(""vs"")[1];
                    // 封装球队LOGO麦普
                    var TeamLogoMap = {
                        ""凯尔特人"": ""https://res.nba.cn/media/img/teams/logos/BOS_logo.png"",
                        ""雄鹿"": ""https://res.nba.cn/media/img/teams/logos/MIL_logo.png"",
                        ""76人"": ""https://res.nba.cn/media/img/teams/logos/PHI_logo.png"",
                        ""魔术"": ""https://res.nba.cn/media/img/teams/logos/ORL_logo.png"",
                        ""热火"": ""https://res.nba.cn/media/img/teams/logos/MIA_logo.png"",
                        ""尼克斯"": ""https://res.nba.cn/media/img/teams/logos/NYK_logo.png"",
                        ""骑士"": ""https://res.nba.cn/media/img/teams/logos/CLE_logo.png"",
                        ""步行者"": ""https://res.nba.cn/media/img/teams/logos/IND_logo.png"",
                        ""篮网"": ""https://res.nba.cn/media/img/teams/logos/BKN_logo.png"",
                        ""公牛"": ""https://res.nba.cn/media/img/teams/logos/CHI_logo.png"",
                        ""老鹰"": ""https://res.nba.cn/media/img/teams/logos/ATL_logo.png"",
                        ""猛龙"": ""https://res.nba.cn/media/img/teams/logos/TOR_logo.png"",
                        ""黄蜂"": ""https://res.nba.cn/media/img/teams/logos/CHA_logo.png"",
                        ""奇才"": ""https://res.nba.cn/media/img/teams/logos/WAS_logo.png"",
                        ""活塞"": ""https://res.nba.cn/media/img/teams/logos/DET_logo.png"",
                        ""森林狼"": ""https://res.nba.cn/media/img/teams/logos/MIN_logo.png"",
                        ""掘金"": ""https://res.nba.cn/media/img/teams/logos/DEN_logo.png"",
                        ""雷霆"": ""https://res.nba.cn/media/img/teams/logos/OKC_logo.png"",
                        ""国王"": ""https://res.nba.cn/media/img/teams/logos/SAC_logo.png"",
                        ""独行侠"": ""https://res.nba.cn/media/img/teams/logos/DAL_logo.png"",
                        ""快船"": ""https://res.nba.cn/media/img/teams/logos/LAC_logo.png"",
                        ""鹈鹕"": ""https://res.nba.cn/media/img/teams/logos/NOP_logo.png"",
                        ""火箭"": ""https://res.nba.cn/media/img/teams/logos/HOU_logo.png"",
                        ""湖人"": ""https://res.nba.cn/media/img/teams/logos/LAL_logo.png"",
                        ""勇士"": ""https://res.nba.cn/media/img/teams/logos/GSW_logo.png"",
                        ""太阳"": ""https://res.nba.cn/media/img/teams/logos/PHX_logo.png"",
                        ""爵士"": ""https://res.nba.cn/media/img/teams/logos/UTA_logo.png"",
                        ""灰熊"": ""https://res.nba.cn/media/img/teams/logos/MEM_logo.png"",
                        ""开拓者"": ""https://res.nba.cn/media/img/teams/logos/POR_logo.png"",
                        ""马刺"": ""https://res.nba.cn/media/img/teams/logos/SAS_logo.png""
                    };
                    title1 = Team1vsTeam2;
                    if (TeamLogoMap[Team2] != null) {
                        // 通过主队名称获取球队LOGO
                        picUrl1 = TeamLogoMap[Team2];
                    } else if (TeamLogoMap[Team1] != null) {
                        // 通过客队名称获取球队LOGO
                        picUrl1 = TeamLogoMap[Team1];
                    } else {
                        // 若主队客队LOGO都不存在，则使用默认LOGO
                        picUrl1 = 'https://cdn.leisu.com/basketball/eventlogo/2021/01/22/FvabFeKVjHyOyva-Bo51rrTrOGao?imageMogr2/auto-orient/thumbnail/200x200%3E';
                    }
                }
            }
            // CBA录像、CBA集锦
            else if (/CBA/.test(pdfh(it, 'a&&Text'))) {
                // 若包含球队vs信息
                if (/vs/.test(pdfh(it, 'a&&Text'))) {
                    // 客队vs主队
                    let Team1vsTeam2 = split[split.length-2];
                    title1 = Team1vsTeam2;
                    picUrl1 = 'https://cdn.leisu.com/basketball/eventlogo/2020/11/11/Fit9bwsfH7ZD-dOf7cPFO5gtWG9W?imageMogr2/auto-orient/thumbnail/200x200%3E';
                }
            }
            // 封装对象
            d.push({
                title: title1,
                desc: desc1,
                pic_url: picUrl1,
                url: url1
            });
		})
		setResult(d);
	`,
    二级:{
        title:'.Content-top h2&&Text',
        img:'*',
        desc:'',
        content:'',
        tabs:'',
        tab_text:'',
        lists:'.Content-body p:gt(1)',
        list_text:'a&&Text',
        list_url:'a&&href'
    },
    搜索:'',
}"
KUrNREH5,U_Proses.PAS,afrizalwahyuadi66,TypeScript,Saturday 11th of May 2024 12:48:14 AM CDT,"unit U_proses;
interface
   uses crt;
   function PROS_1 ( var x,y,z,t,k,kur : real):real;
   function pros_2 ( var s,ls,kl         : real):real;
   function PROS_3 ( var a,b,c,Luas,Keliling:Real):real;
   function PROS_4 ( var LL,KL,Diameter,JariJari:Real):real;
   function PROS_5 ( var V1,V2,V3,T1,T2,T3,S1,S2,S3,RataRataJarak:Real):real;
   Procedure PROS_6 (var X:Integer; y : string);
   procedure PROS_7 ( var a,b,c,d,e : real);
   function PROS_8 ( var X:integer):integer;
   procedure PROS_9 (IM :string ;UTS,UAS,TUGAS,KEHADIRAN,NA:real);
   Procedure PROS_10 (n,b,c:integer);
   Procedure PROS_11 (N,i,jumlahBarisan:integer);
   Procedure PROS_12 (x,n,firstterm, secondterm, nextterm:integer);

 implementation

 function PROS_1 ( var x,y,z,t,k,kur : real):real;
     begin
        gotoxy(43,04);
        readln(x);
        gotoxy(43,06);
        readln(y);
        gotoxy(43,08);
        readln(z);

        t := x + y+z;
        k := x * y * z;
        kur := x - y - z;
        gotoxy(44,10);write(t:0:2);
        gotoxy(44,12);write(k  :0:2);
        gotoxy(44,11);write(kur:0:2);

     end;

   function pros_2 ( var s,ls,kl         : real):real;
      begin
      gotoxy(48,04);
   readln(s);

   ls := (s * s * sqrt(3)) / 4;
   kl := 3 * s;

  gotoxy(50,07);write(ls:0:2);
  gotoxy(50,08);write(kl:0:2);

      end;


  function PROS_3 ( var a,b,c,Luas,Keliling:Real):real;
    begin

     gotoxy(43,04);
     Readln(a);
     gotoxy(43,06);
     Readln(b);
     c:=sqrt(a*a+b*b);
     luas:=0.5*a*b;
     Keliling:=a+b+c;
     gotoxy(47,09);write(Luas:0:2);
     gotoxy(47,08);write(Keliling:0:2);
    end;

  function PROS_4 ( var LL,KL,Diameter,JariJari:Real):real;
    begin
      gotoxy(47,04);
      Readln(Diameter);
      JariJari:=Diameter/2;
      LL:=3.14*JariJari*JariJari;
      KL:=2*3.14*JariJari;
      gotoxy(47,07);write(LL:0:2);
      gotoxy(47,08);write(KL:0:2);
    end;

  function PROS_5 ( var V1,V2,V3,T1,T2,T3,S1,S2,S3,RataRataJarak:Real):real;
    begin

      gotoxy(49,04);
      Readln(V1);
      gotoxy(49,06);
      Readln(T1);
      gotoxy(49,08);
      Readln(V2);
      gotoxy(49,10);
      Readln(T2);
      gotoxy(49,12);
      Readln(V3);
      gotoxy(49,14);
      Readln(T3);
      S1:=V1*T1;
      S2:=V2*T2;
      S3:=V3*T3;
      RataRataJarak:=(S1+S2+S3);
      gotoxy(49,16);write(S1:0:2);
      gotoxy(49,17);write(S2:0:2);
      gotoxy(49,18);write(S3:0:2);
      gotoxy(49,20);write(RataRataJarak:0:2);
    end;

  Procedure PROS_6 (var X:Integer;y : string);
   begin
      gotoxy(47,04);
      Readln(X);
      gotoxy(32,07);
      if (x < 0) then
         y := 'NEGATIF'
      else
         y := 'POSITIF';
         if (x = 0) then
            write('nol')
         else
            if (x mod 2 = 0) then
               write('BILANGAN GENAP ',y)
            else
               write('BILANGAN GANJIl ',y);
   end;

  procedure PROS_7 ( var a,b,c,d,e : real);
   begin
      gotoxy(23,04);Writeln('Masukan Jumlah Pembelian :');
      gotoxy(23,05);Write('Jumlah Pembelian:Rp.');
      Readln(a);
      gotoxy(23,07);Write('Jenis Konsumen');
      gotoxy(23,08);write('1:Pelanggan,2:Non-Pelanggan: ');
      Readln(b);
      if (b = 1) then
       c:=0.1*a
      else
       c:=0;
       e:=(Trunc(a/1000000))*30000;
       d:=a-c+e;
       gotoxy(23,10);Writeln('==============================');
       gotoxy(23,11);Writeln('       Struk Pembayaran       ');
       gotoxy(23,12);Writeln('------------------------------');
       gotoxy(23,13);Writeln('Jumlah Pembelian : Rp.',a:0:3);
       gotoxy(23,14);Writeln('Potongan         : Rp.',c:0:3);
       gotoxy(23,15);Writeln('Cashback         : Rp.',e:0:3);
       gotoxy(23,16);Writeln('------------------------------');
       gotoxy(23,17);Writeln('Total Pembayaran : Rp.',d:0:3);
       gotoxy(23,18);Writeln('==============================');
      end;

  function PROS_8 ( var X:integer):integer;
   begin
     gotoxy(47,04);
      Readln(x);
      gotoxy(33,07);
      case X of
       0:Writeln('nol');
       1:Writeln('satu');
       2:Writeln('dua');
       3:Writeln('tiga');
       4:Writeln('empat');
       5:Writeln('lima');
       6:Writeln('enam');
       7:Writeln('tujuh');
       8:Writeln('delapan');
       9:Writeln('sembilan');
     else
       gotoxy(33,07);Writeln('salah entri:ketik bilangan 0..9');
     end;
   end;

 procedure PROS_9 (IM :string ;UTS,UAS,TUGAS,KEHADIRAN,NA:real);
  begin
    gotoxy(50,04);
    Readln(UTS);

    gotoxy(50,06);
    Readln(UAS);

    gotoxy(50,08);
    Readln(TUGAS);

    gotoxy(50,10);
    readln(KEHADIRAN);
    KEHADIRAN:=(KEHADIRAN/16)*100;
    NA:=(0.3* UTS)+(0.4* UAS)+(0.2*TUGAS)+(0.1*KEHADIRAN);
   case Round(NA) of
     0..100:
      begin;
       case Round(NA) of
        81..100:IM := ' A';
        66..80: IM := ' B';
        51..65: IM := ' C';
        41..50: IM := ' D';
       else   IM:= ' E';
       end;
        gotoxy(50,12);Writeln('',NA:0:2);
        gotoxy(50,13);Write('',IM);
      end;
    else
     gotoxy(50,12);Write('Salah nilai');
   end;
  end;

 Procedure PROS_10 (n,b,c:integer);
   begin
     Gotoxy(48,04);
      readln(n);
     Gotoxy(48,06);
      readln(b);
      for c :=  n to b do
         Begin
           Gotoxy(32,08); write(' ',++c);
         End;
   end;

  Procedure PROS_11 (N,i,jumlahBarisan:integer);
   begin
    Gotoxy(48,04);
     Readln(N);
    Gotoxy(48,06);
     Readln(jumlahBarisan);
    Gotoxy(32,08);
     for i:=1 to jumlahBarisan do
     begin
      Write(N*i,'');
     end;
   end;

  Procedure PROS_12 (x,n,firstterm, secondterm, nextterm:integer);
  BEGIN

   firstterm := 0;
   secondterm := 1;

  gotoxy(45,04);
   readln(n);

   for n := 1 to n do
   begin
    if n = 1 then
      writeln(firstterm)
    else if n = 2 then
      writeln(secondterm)
    else
    begin
      nextterm := firstterm + secondterm;
      firstterm := secondterm;
      secondterm := nextterm;
      writeln(nextterm);
    end;
   end;
  end;





begin
end.
"
Y3c1C6Xc,fifth_task,artmexbet,C++,Saturday 11th of May 2024 12:47:22 AM CDT,"#include <iostream>
#include <vector>
#include <semaphore.h>
#include <atomic>
#include <thread>

class TableToClean {
public:
    int tableNumber;
    int guestNumber;

    TableToClean(int tableNumber, int guestNumber) {
        this->tableNumber = tableNumber;
        this->guestNumber = guestNumber;
    }
};

std::vector<std::vector<bool>> matrix;

std::vector<TableToClean> tablesToClean;

sem_t queueSem;  // Семафор для количества людей в очереди (по нему продавцы ориентируются на наличие необработанных покупателей)
pthread_mutex_t queueMutex;  // Мьютекс для чтения и записи в очередь
pthread_mutex_t tableMutex;  // Мьютекс для работы с таблицами
sem_t freeTablesSem;  // Семафор для количества свободных столов
sem_t cleanTablesSem;  // Семафор для количества столов, которые нужно убрать
pthread_mutex_t cleanTablesMutex;  // Мьютекс для работы со столами, которые нужно убрать

pthread_rwlock_t rwlock;  // Рид-райт лок для чтения и записи в консоль

std::atomic<bool> stop_thread(false);  // Создаём ""атомарную"" переменную. Это чуть-чуть упрощает работу с потоками.
// Если эта переменная - true, все потоки умирают.

class GuestInfo {
public:
    int tableNumber;
    int guestNumber;
    int eatTime;

    GuestInfo(int tableNumber, int guestNumber, int eatTime) {
        this->tableNumber = tableNumber;
        this->guestNumber = guestNumber;
        this->eatTime = eatTime;
    }
};

void *GuestActor(void *arg) {
    auto *info = (GuestInfo *) arg;

    pthread_rwlock_wrlock(&rwlock);
    std::cout << ""Guest "" << info->guestNumber << "" started eating at table "" << info->tableNumber << std::endl;
    pthread_rwlock_unlock(&rwlock);

    std::this_thread::sleep_for(std::chrono::seconds(info->eatTime));  // Гость ест

    pthread_mutex_lock(&cleanTablesMutex);  // Лочим мьютекс
    tablesToClean.emplace_back(info->tableNumber, info->guestNumber);  // Добавляем стол в список для уборки
    pthread_mutex_unlock(&cleanTablesMutex);  // Разлочим мьютекс
    sem_post(&cleanTablesSem);  // Освобождаем семафор для уборки

    pthread_rwlock_wrlock(&rwlock);  // Лочим рид-райт лок для записи в консоль
    std::cout << ""Guest "" << info->guestNumber << "" finished eating at table "" << info->tableNumber << std::endl;
    pthread_rwlock_unlock(&rwlock);  // Разлочим рид-райт лок для записи в консоль
    delete info;
    return nullptr;
}

class Guest {
public:
    int checkoutTime;
    int eatTime;

    Guest(int checkoutTime, int eatTime) {
        this->checkoutTime = checkoutTime;
        this->eatTime = eatTime;
    }

    void start(int tableNumber, int guestNumber) {
        pthread_t thread;
        auto *info = new GuestInfo(tableNumber, guestNumber, this->eatTime);
        pthread_create(&thread, nullptr, &GuestActor, info);
    }
};

std::vector<Guest> queue;

void *SellerActor(void *arg) {
    int *sellerId = (int *) arg;
    while (!stop_thread) {
        sem_wait(&queueSem);  // Ждем, пока в очереди не появится хоть один покупатель
        pthread_mutex_lock(&queueMutex);  // Лочим мьютекс
        if (queue.empty()) {
            pthread_mutex_unlock(&queueMutex);  // Разлочим мьютекс
            continue;
        }
        auto guest = queue[0];
        queue.erase(queue.begin());
        pthread_mutex_unlock(&queueMutex);  // Разлочим мьютекс

        pthread_rwlock_wrlock(&rwlock);  // Лочим рид-райт лок для записи в консоль
        std::cout << ""Seller "" << sellerId << "" started serving guest"" << std::endl;
        pthread_rwlock_unlock(&rwlock);  // Разлочим рид-райт лок для записи в консоль

        std::this_thread::sleep_for(
                std::chrono::seconds(guest.checkoutTime));  // Продавец ждет, пока покупатель сделает заказ

        pthread_mutex_lock(&tableMutex);  // Лочим мьютекс

        sem_wait(&freeTablesSem);  // Ждём, пока не освободится стол

        pthread_rwlock_wrlock(&rwlock);  // Лочим рид-райт лок для записи в консоль
        std::cout << ""Seller "" << sellerId << "" finished serving guest"" << std::endl;
        pthread_rwlock_unlock(&rwlock);  // Разлочим рид-райт лок для записи в консоль

        // Ищем свободное место
        bool found = false;
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[i].size(); j++) {
                if (!matrix[i][j]) {
                    pthread_rwlock_wrlock(&rwlock);  // Лочим рид-райт лок для записи в консоль
                    std::cout << ""Guest "" << j << "" sits at table "" << i << std::endl;
                    pthread_rwlock_unlock(&rwlock);  // Разлочим рид-райт лок для записи в консоль
                    matrix[i][j] = true;
                    pthread_mutex_unlock(&tableMutex);  // Разлочим мьютекс
                    guest.start(i, j);
                    found = true;
                    break;
                }
            }
            if (found) {
                break;
            }
        }
    }
    return nullptr;
}

void *CleanerActor(void *arg) {
    int *cleanTime = (int *) arg;
    while (!stop_thread) {
        sem_wait(&cleanTablesSem);  // Ждем, пока появится стол, который нужно убрать
        pthread_mutex_lock(&cleanTablesMutex);  // Лочим мьютекс
        if (tablesToClean.empty()) {
            pthread_mutex_unlock(&cleanTablesMutex);  // Разлочим мьютекс
            continue;
        }
        auto table = tablesToClean[0];
        tablesToClean.erase(tablesToClean.begin());
        pthread_mutex_unlock(&cleanTablesMutex);  // Разлочим мьютекс

        pthread_rwlock_wrlock(&rwlock);  // Лочим рид-райт лок для записи в консоль
        std::cout << ""Cleaner started cleaning table "" << table.tableNumber << "" from guest "" << table.guestNumber
                  << std::endl;
        pthread_rwlock_unlock(&rwlock);  // Разлочим рид-райт лок для записи в консоль

        std::this_thread::sleep_for(std::chrono::seconds(*cleanTime));  // Убираем стол

        pthread_mutex_lock(&tableMutex);  // Лочим мьютекс
        matrix[table.tableNumber][table.guestNumber] = false;  // Освобождаем стол
        sem_post(&freeTablesSem);  // Освобождаем семафор для свободных столов
        pthread_mutex_unlock(&tableMutex);  // Разлочим мьютекс

        pthread_rwlock_wrlock(&rwlock);  // Лочим рид-райт лок для записи в консоль
        std::cout << ""Cleaner finished cleaning table "" << table.tableNumber << "" from guest "" << table.guestNumber
                  << std::endl;
        pthread_rwlock_unlock(&rwlock);  // Разлочим рид-райт лок для записи в консоль
    }
    return nullptr;
}

void fillMatrix(int tableCount, int tableSize) {
    matrix.resize(tableCount);
    for (int i = 0; i < tableCount; i++) {
        matrix[i].resize(tableSize);
        for (int j = 0; j < tableSize; j++) {
            matrix[i][j] = false;
        }
    }
}

void printCommands() {
    std::cout << ""----------------------------------"" << std::endl;
    std::cout << ""Commands:"" << std::endl;
    std::cout << ""1. Add guest"" << std::endl;
    std::cout << ""2. Print tables"" << std::endl;
    std::cout << ""3. Print queue"" << std::endl;
    std::cout << ""4. Exit"" << std::endl;
    std::cout << ""5. Print clean queue"" << std::endl;
    std::cout << ""Enter number of commands:"" << std::endl;
    std::cout << ""----------------------------------"" << std::endl;
}

void printTables() {
    for (int i = 0; i < matrix.size(); i++) {
        std::cout << ""Table "" << i << "": "";
        for (auto &&j: matrix[i]) {
            if (j) {
                std::cout << ""X"";  // Принтуем столы, которые заняты
            } else {
                std::cout << ""O"";  // Принтуем свободные столы
            }
        }
        std::cout << std::endl;
    }
}

void printQueue() {
    if (queue.empty()){
        std::cout << ""Queue is empty"" << std::endl;
        return;
    }
    for (int i = 0; i < queue.size(); i++) {
        std::cout << ""Guest "" << i << "": "";
        std::cout << ""Checkout time: "" << queue[i].checkoutTime << "" Eat time: "" << queue[i].eatTime << std::endl;
    }
}

void printCleanQueue() {
    if (tablesToClean.empty()){
        std::cout << ""Clean queue is empty"" << std::endl;
        return;
    }
    for (auto & i : tablesToClean) {
        std::cout << ""Table "" << i.tableNumber << "" from guest "" << i.guestNumber << std::endl;
    }
}

int main() {
    sem_init(&queueSem, 0, 0);  // Инициализируем семафор для количества людей в очереди
    // К нему подключаются продавцы, ожидающие покупателей
    pthread_mutex_init(&queueMutex, nullptr);
    // Инициализируем мьютекс для работы с очередью (добавление и удаление элементов)
    pthread_mutex_init(&tableMutex, nullptr);

    pthread_mutex_init(&cleanTablesMutex,
                       nullptr);  // Инициализируем мьютекс для работы со столами, которые нужно убрать
    sem_init(&cleanTablesSem, 0, 0);  // Инициализируем семафор для количества столов, которые нужно убрать

    pthread_rwlock_init(&rwlock, nullptr);  // Инициализируем рид-райт лок для чтения и записи в консоль

    // Создаём потоки продавцов

    pthread_t firstSellerThread, secondSellerThread;
    pthread_create(&firstSellerThread, nullptr, &SellerActor, (void *) 1);
    pthread_create(&secondSellerThread, nullptr, &SellerActor, (void *) 2);


    std::cout << ""Enter table count"" << std::endl;
    int tableCount;
    std::cin >> tableCount;
    std::cout << ""Enter table size"" << std::endl;
    int tableSize;
    std::cin >> tableSize;
    fillMatrix(tableCount, tableSize);

    sem_init(&freeTablesSem, 1, tableCount * tableSize);  // Инициализируем семафор для количества свободных столов

    std::cout << ""Enter clean time in seconds"" << std::endl;
    int cleanTime;
    std::cin >> cleanTime; // Вводим время, которое потребуется для мытья одной тарелки (считаем для упрощения,
    // что каждый гость делает одинаковое количество грязной посуды)

    // Создаём потоки уборщиков
    pthread_t firstCleanerThread;
    pthread_create(&firstCleanerThread, nullptr, &CleanerActor, &cleanTime);

    while (!stop_thread) {
        pthread_rwlock_wrlock(&rwlock);  // Лочим рид-райт лок для записи в консоль
        printCommands();
        pthread_rwlock_unlock(&rwlock);  // Разлочим рид-райт лок для записи в консоль
        int command;
        std::cin >> command;
        pthread_rwlock_wrlock(&rwlock);  // Лочим рид-райт лок для записи в консоль
        if (command == 1) {
            // Добавляем нового покупателя
            std::cout << ""Enter checkout time"" << std::endl;
            int checkoutTime;
            std::cin >> checkoutTime; // Вводим время заказа покупателя (время, которое он потратит на создание заказа)

            std::cout << ""Enter eat time"" << std::endl;
            int eatTime;
            std::cin >> eatTime;// Вводим время еды покупателя (время, которое он потратит на поедание заказа)

            Guest guest(checkoutTime, eatTime);
            pthread_mutex_lock(&queueMutex); // Лочим мьютекс
            queue.push_back(guest);
            printQueue();
            pthread_mutex_unlock(&queueMutex); // Разлочим мьютекс
            sem_post(&queueSem);
        } else if (command == 2) {
            pthread_mutex_lock(&tableMutex);
            printTables();
            pthread_mutex_unlock(&tableMutex);
        } else if (command == 3) {
            pthread_mutex_lock(&queueMutex);
            printQueue();
            pthread_mutex_unlock(&queueMutex);
        } else if (command == 4) {
            stop_thread = true;
        } else if(command == 5) {
            pthread_mutex_lock(&cleanTablesMutex);
            printCleanQueue();
            pthread_mutex_unlock(&cleanTablesMutex);
        } else {
            std::cout << ""Invalid command"" << std::endl;
        }
        pthread_rwlock_unlock(&rwlock);  // Разлочим рид-райт лок для записи в консоль
    }
    // Тут можно заджоинить потоки между собой
    return 0;
}
"
1ykd1qXr,P_UTSS2.PAS,afrizalwahyuadi66,TypeScript,Saturday 11th of May 2024 12:46:51 AM CDT,"program utsS2;
uses crt, U_MENU, U_PROSES;
var stop,stop2 : boolean;
a,b,c,d,e,f,g,h,i,j : real;
ulang : char;
x,n,k,pil,r,t: integer;
z: string;

BEGIN
   Repeat
      stop := false;
      menu_uts(pil,true);
      case pil of
         1 :   repeat
                  stop2 := false;
                  NO_1(false);
                  PROS_1(a,b,c,d,e,f);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);

          2 :  repeat
                   stop2 := false;
                  NO_2(false);
                  PROS_2(a,b,c);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);

          3 :  repeat
                  stop2 := false;
                  NO_3(false);
                  PROS_3(a,b,c,d,e);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);

          4 :  repeat
                  stop2 := false;
                  NO_4(false);
                  PROS_4(a,b,c,d);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);

          5 :  repeat
                  stop2 := false;
                  NO_5(false);
                  PROS_5(a,b,c,d,e,f,g,h,i,j);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);

          6  : repeat
                  stop2 := false;
                  NO_6(false);
                  PROS_6(x,z);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);

          7  : repeat
                  stop2 := false;
                  NO_7(false);
                  PROS_7(a,b,c,d,e);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);
          8 : repeat
                  stop2 := false;
                  NO_8(false);
                  PROS_8(x);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);

          9  : repeat
                  stop2 := false;
                  NO_9(false);
                  PROS_9(z,a,b,c,d,e);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);

          10 : repeat
                  stop2 := false;
                  NO_10(false);
                  PROS_10(x,n,k);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);

          11 : repeat
                  stop2 := false;
                  NO_11(false);
                  PROS_11(x,n,k);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);

         12 : repeat
                  stop2 := false;
                  NO_12(false);
                  PROS_12(x,n,k,r,t);
                  gotoxy(20,20);write('Apakah mau keluar? Y/T :');
                  readln(ulang);
                  if (ulang = 'y') then
                     stop2 := true
                  else
                     stop2 := false;
               until(stop2);




          0 : stop := true;

      end;
   Until(stop);
   ClrScr;
  gotoxy(35,12);write('Terimakasih');
   Readln;
END."
SqkTZn3y,Qluxiang7,Damonwei,JSON,Saturday 11th of May 2024 12:43:30 AM CDT,"{
""作者"":""Dwei-0430"",
""站名"":"""",
""请求头"":""手机"",
""主页url"":""https://www.luxiang7.com/"",
""分类url"":""https://www.luxiang7.com/{cateId}/{catePg}/"",
""分类"":""NBA录像$nbalx"",
""二次截取"": ""class=\""main r_box\"">&&</ul>"",
""数组"":""<li>&&</li>"",
""标题"":""title=\""&&\"""",
""图片"":""src=\""&&\"""",
""链接"":""href=\""&&\"""",
""链接前缀"": """",
""简介"":""Dwei观赛提示：先选择腾讯线路，解析选择web解析，若解析错误再选择快手视频即可观看赛事录像回放，直接选择快手视频无法观看！！"",
""导演"":""DweiTV：Never'underestimate'the'heart'of'a'champion! "",
""主演"":""东契奇、约基奇、詹姆斯、杜兰特、库里、塔图姆、阿德托孔博、恩比德、布克"",
""线路数组"":""class=\""lmname\"">&&</li>"",
""线路标题"":""nbalx/\"">&&</a>[替换:nbalx/\""></a>>>DweiTV]"",
""播放数组"":""class=\""news_con\"">&&class=\""xinhao\"">"",
""播放列表"": ""<a&&/a>"",
""播放标题"":""target=\""_blank\"">&&</a>"",
""播放链接"":""href=\""&&\"""",
""播放链接前缀"": """",
""免嗅"": ""0"",
""嗅探词"": ""weibocdn.com#.mp4#kwaicdn.com#.m3u8?#download-v.123pan.cn"",
""搜索模式"": ""1"",
""搜索url"":""/search.php?q={wd}"",
""搜索二次截取"": ""class=\""main r_box\"">&&</ul>"",
""搜索数组"":""<li>&&</li>"",
""搜索标题"":""title=\""&&\"""",
""搜索图片"":""src=\""&&\"""",
""搜索链接"":""href=\""&&\"""",
""筛选"": {}
}
"
RDiwps8v,Untitled,Aw3som3n3sss,C++,Saturday 11th of May 2024 12:40:32 AM CDT,t99999999999$$$ 9999999y99999999999999999999999999999999999999999999y999999999999999999999$$$$99999999s
TY3gBFPz,RequestException: error with request,basedcount_bot,Python,Saturday 11th of May 2024 12:33:06 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 263, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 286, in _request_with_retries
    response, saved_exception = await self._make_request(
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 192, in _make_request
    response = await self._rate_limiter.call(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/rate_limit.py"", line 51, in call
    response = await request_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/requestor.py"", line 80, in request
    raise RequestException(exc, args, kwargs) from None
asyncprawcore.exceptions.RequestException: error with request 
"
YjaHsLCN,Untitled,35657,C++,Saturday 11th of May 2024 12:14:22 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <Windows.h>

using namespace std;

struct film {
	char title[40];
	char producer[40];
	char genre[40];
	int rating;
};

struct video_store {										 
	film store[100];
	int films_number = 0;
};


void add_movie(video_store& some_store, const char* title, const char* producer, const char* genre, int rating) {
	if (some_store.films_number == 100) {
		cout << ""Фильм не может быть добавлен"" << endl;
		return;
	}
	strcpy(some_store.store[some_store.films_number].title, title);
	strcpy(some_store.store[some_store.films_number].producer, producer);
	strcpy(some_store.store[some_store.films_number].genre, genre);
	some_store.store[some_store.films_number].rating = rating;
	some_store.films_number++;
}

void del_movie(video_store& some_store, const char* title) {
	for (int i = 0; i < some_store.films_number; i++) {
		if (!strcmp(some_store.store[i].title, title)) {
			for (int j = i; j < some_store.films_number - 1; j++) {
				some_store.store[j] = some_store.store[j + 1];
			}
			some_store.films_number--;
		}
	}
}

void show_all_movies(const video_store& some_store) {
	for (int i = 0; i < some_store.films_number; i++) {
		cout << '\""' << some_store.store[i].title << ""\"",  режиссер - "" << some_store.store[i].producer << "", жанр - "" << some_store.store[i].genre << "", рейтинг - "" << some_store.store[i].rating << endl;
	}
	cout << endl;
}

void find_movie_name(const video_store& some_store, const char* name) {
	for (int i = 0; i < some_store.films_number; i++) {
		if (!strcmp(some_store.store[i].title, name)) {
			cout << '\""' << some_store.store[i].title << ""\"",  режиссер - "" << some_store.store[i].producer << "", жанр - "" << some_store.store[i].genre << "", рейтинг - "" << some_store.store[i].rating << endl;
		}
	}
	cout << endl;
}

void find_movie_producer(const video_store& some_store, const char* producer) {
	for (int i = 0; i < some_store.films_number; i++) {
		if (!strcmp(some_store.store[i].producer, producer)) {
			cout << '\""' << some_store.store[i].title << ""\"",  режиссер - "" << some_store.store[i].producer << "", жанр - "" << some_store.store[i].genre << "", рейтинг - "" << some_store.store[i].rating << endl;
		}
	}
	cout << endl;
}

void find_movie_genre(const video_store& some_store, const char* genre) {
	for (int i = 0; i < some_store.films_number; i++) {
		if (!strcmp(some_store.store[i].genre, genre)) {
			cout << '\""' << some_store.store[i].title << ""\"",  режиссер - "" << some_store.store[i].producer << "", жанр - "" << some_store.store[i].genre << "", рейтинг - "" << some_store.store[i].rating << endl;
		}
	}
	cout << endl;
}

void find_movie_most_popular(const video_store& some_store, const char* genre) {

	int index = -1;
	int max_rating = 0;

	for (int i = 0; i < some_store.films_number; i++) {
		if (!strcmp(some_store.store[i].genre, genre) && some_store.store[i].rating > max_rating) {
			index = i;
			max_rating = some_store.store[i].rating;
		}
	}

	if (index != -1) {
		cout << '\""' << some_store.store[index].title << ""\"",  режиссер - "" << some_store.store[index].producer << "", жанр - "" << some_store.store[index].genre << "", рейтинг - "" << some_store.store[index].rating << endl;
	}
}

int main() {

	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	video_store my_store;

	add_movie(my_store, ""Пираты Карибского моря"", ""Гор Вербински"", ""фантастика"", 5);
	add_movie(my_store, ""Гарри Поттер"", ""Крис Каламбус"", ""фантастика"", 4);
	add_movie(my_store, ""Бриллиантовая рука"", ""Леонид Гайдай"", ""комедия"", 3);
	add_movie(my_store, ""Иван Васильевич меняет профессию"", ""Леонид Гайдай"", ""комедия"", 4);
	add_movie(my_store, ""Шерлок Холмс"", ""Гай Ричи"", ""детектив"", 5);

	show_all_movies(my_store);

	del_movie(my_store, ""Гарри Поттер"");

	add_movie(my_store, ""Карты, деньги, два ствола"", ""Гай Ричи"", ""комедия"", 5);

	show_all_movies(my_store);

	find_movie_name(my_store, ""Пираты Карибского моря"");

	find_movie_genre(my_store, ""комедия"");

	find_movie_producer(my_store, ""Гай Ричи"");

	find_movie_most_popular(my_store, ""комедия"");
}"
mz0VEnTs,Untitled,Aw3som3n3sss,C++,Friday 10th of May 2024 11:58:53 PM CDT,"#include <iostream>
using namespace std;
/*
Elizabeth Smith
Name Length? -Yes - No more than 100
- Type? - Yes - Only letters
-Range? - No
-Format? - No
Age - Length? - No
- Type? - Yes - Int
-Range? - Yes - 1 to 126
-Format? - No
Phone number - Length? - Yes - Depending on format, needs 10 or 11 digits
- Type? - No
-Range? - No
-Format? - Yes - Mix of digits and certain characters
*/
bool checkName(char name[], int length);
bool checkNum(char num[], int length);
bool checkAge(int age);
int findLen(char n[]);
int main()
{
	//Variables
	char name[100] = ""abc"";
	char phoneNumber[15] = ""1 208 885 0000"";
	int age = 0;
	bool nameCheck = true;
	bool numCheck = true;
	bool ageCheck = true;
	//Get Name
	cout << ""Enter Your Name: "";
	fgets(name, sizeof(name), stdin);
	int lengthN = findLen(name);
	//If name is too long, ignores first 100 characters.
	//If not too long, adds replaces newline with NULL
	if (lengthN > 0 && name[lengthN - 1] == '\n') {
		name[lengthN - 1] = '\0';
		--lengthN;
	}
	else {
		cin.ignore(100, '\n');
	}
	nameCheck = checkName(name, lengthN);
	while (nameCheck == false) {
		cout << ""Invalid Input. Try Again: "";
		fgets(name, sizeof(name), stdin);
		lengthN = findLen(name);
		if (lengthN > 0 && name[lengthN - 1] == '\n') {
			name[lengthN - 1] = '\0';
			--lengthN;
		}
		else {
			cin.ignore(100, '\n');
		}
		nameCheck = checkName(name, lengthN);
	}

	//GET AGE
	cout << ""Enter Age: "";
	cin >> age;
	ageCheck = checkAge(age);
	while (ageCheck == false)
	{
		cout << ""Re-Enter a valid Age: "";
		cin >> age;
		ageCheck = checkAge(age);
	}
	cin.ignore();
	//GET NUMBER
	cout << ""Enter Phone Number: "";
	fgets(phoneNumber, sizeof(phoneNumber), stdin);
	lengthN = findLen(phoneNumber);

	//If number is too long, ignores.
	//If not too long, adds replaces newline with NULL
	if (lengthN > 0 && name[lengthN - 1] == '\n') {
		name[lengthN - 1] = '\0';
		--lengthN;
	}
	else {
		cin.ignore();
	}
	numCheck = checkNum(phoneNumber, lengthN);
	while (numCheck == false) {
		cout << ""Invalid Input. Try Again : "";
		fgets(phoneNumber, sizeof(phoneNumber), stdin);
		lengthN = findLen(phoneNumber);

		if (lengthN > 0 && name[lengthN - 1] == '\n') {
			name[lengthN - 1] = '\0';
			--lengthN;
		}
		else {
			cin.ignore();
		}
		numCheck = checkNum(phoneNumber, lengthN);
	}

	cout << ""\nINFORMATION COLLECTED:\n"";
	cout << ""Name: "" << name << endl;
	cout << ""Age: "" << age << endl;
	cout << ""Phone Number: "" << phoneNumber << endl;
	return 0;
}
//Returns false if not letters else true
bool checkName(char name[], int length)
{
	for (int i = 0; i < length; i++) {
		if (!isalpha(name[i])) {
			cout << ""Use Letters Only: \n"";
			return false;
		}
	}
	return true;
}
//Returns true if formats match else false or false if digit count is not correct
bool checkNum(char num[], int length)
{

	int digitCount = 0;
	for (int i = 0; i < length; i++) {


		if (isdigit(num[i]) || num[i] == ' ' || num[i] == '-' || num[i] == '(' || num[i]
			== ')' || num[0] == '+' || num[i] == '\n' || num[i] == '\0') {
			if (isdigit(num[i]))
			{
				digitCount++;
			}
		}
		else
		{
			cout << ""Invalid Character: \n"";
			return false;
		}

	}
	//+12088850000
	if (num[0] == '+' && digitCount == 11) {

		return true;
	}
	//1 208 885 0000
	if (isspace(num[1]) && isspace(num[5]) && isspace(num[9]) &&
		(digitCount == 11 || digitCount == 10)) {
		return true;
	}
	//208-885-0000
	if (num[3] == '-' && num[7] == '-' && (digitCount == 11 || digitCount ==
		10))
	{
		return true;
	}
	//(208)8850000
	if (num[0] == '(' && num[4] == ')' && (digitCount == 11 || digitCount ==
		10))
	{
		return true;
	}
	if (digitCount == 10 || digitCount == 11) {
		return true;
	}
	if (digitCount != 10 && digitCount != 11) {
		cout << ""Invalid Number of Digits\n"";
		return false;
	}
	return false;
}
//Returns false if range fails or not number else true
bool checkAge(int age)
{
	if (age > 126 || age < 0)
	{
		cout << ""Invalid Age Range.\n"";
		return false;
	}
	//If the input is not a number
	if (cin.fail())
	{
		cin.clear(); // Clear the error flag
		//cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
		cout << ""Invalid input. Please enter a number for age.\n"";
		return false;
	}
	return true;
}
int findLen(char n[]) {
	int count = 0;
	for (int i = 0; n[i] != '\0'; i++) {
		++count;
	}
	return count;
}"
PA4M2ugH,azure mod lite,Actyrn,Lua,Friday 10th of May 2024 11:52:15 PM CDT,"-- Credits to Elegant and Weda, the original script coders

-- If ur gonna put in vault / showcase, pls don't put the source code directly or loadstring, put the discord

-- DO NOT EDIT BELOW IF YOU DON'T KNOW WHAT YOU'RE DOING!!

repeat wait() until game:IsLoaded()

Drawing = Drawing
setfpscap = setfpscap
hookmetamethod = hookmetamethod
newcclosure = newcclosure
getnamecallmethod = getnamecallmethod

-- Variables

local UiLib = loadstring(game:HttpGet(""https://pastebin.com/raw/JFzC7iXS""))()

local RunService = game:GetService(""RunService"")
local UserInputService = game:GetService(""UserInputService"")

local Workspace = game:GetService(""Workspace"")
local Players = game:GetService(""Players"")

local CoreGui = game:GetService(""CoreGui"")
local CorePackages = game:GetService(""CorePackages"")

local ReplicatedStorage = game:GetService(""ReplicatedStorage"")

local StarterGui = game:GetService(""StarterGui"")
local Stats = game:GetService(""Stats"")

local CamlockPlr
local LocalPlr = Players.LocalPlayer

local CamBindEnabled = false

local AntiCheatNamecall

local StrafeSpeed = 0

local SelfDotCircle = Drawing.new(""Circle"")
SelfDotCircle.Filled = true
SelfDotCircle.Thickness = 1
SelfDotCircle.Radius = 7

local SelfTracerLine = Drawing.new(""Line"")
SelfTracerLine.Thickness = 2

local CamFovCircle = Drawing.new(""Circle"")
CamFovCircle.Thickness = 1.5

local CamTracerLine = Drawing.new(""Line"")
CamTracerLine.Thickness = 2

local CamHighlight = Instance.new(""Highlight"", CoreGui)

local CameraAimbot = {
	Enabled = false, 
	Keybind = nil, 

	Prediction = nil, 
	RealPrediction = nil, 

	Resolver = false, 

	JumpOffset = 0, 
	RealJumpOffset = nil, 

	HitPart = ""HumanoidRootPart"", 
	RealHitPart = nil, 

	UseAirPart = false, 
	AirPart = ""LowerTorso"", 
	AirCheckType = ""Once in Air"", 

	AutoPred = false, 
	Notify = false, 

	KoCheck = false, 
	Tracer = false, 

	Highlight = false, 

	Smoothing = false, 
	Smoothness = nil, 

	UseFov = false
}

local Utilities = {
	NoJumpCooldown = false, 
	NoSlowdown = false, 

	AutoStomp = false, 
	AutoReload = false
}

local Movement = {
	SpeedEnabled = false, 
	SpeedAmount = 1, 

	AutoJump = false, 

	BunnyHop = false, 
	HopAmount = 1, 

	FlightEnabled = false, 
	FlightAmount = 1
}

local SelfDot = {
	Enabled = false, 
	Tracer = false, 

	RandomHitPart = false, 
	Prediction = 1, 

	HitPart = ""HumanoidRootPart"", 
	RealHitPart = nil
}

local AntiLock = {
	Enabled = false, 
	Mode = ""Up"", 

	DesyncVel = Vector3.new(0, 9e9, 0), 
	DesyncAngles = 0.5
}

-- Functions

function ClosestPlr(Part, UseFov, FovCircle)
	local Distance, Closest = math.huge, nil

	for I, Target in pairs(Players:GetPlayers()) do
		if Target ~= LocalPlr then
			local Position = Workspace.CurrentCamera:WorldToViewportPoint(Target.Character[Part].Position)
			local Magnitude = (Vector2.new(Position.X, Position.Y) - UserInputService:GetMouseLocation()).Magnitude

			if UseFov then
				if Magnitude < Distance and Magnitude < FovCircle.Radius then
					Closest = Target
					Distance = Magnitude
				end
			else
				if Magnitude < Distance then
					Closest = Target
					Distance = Magnitude
				end
			end
		end
	end

	return Closest
end

-- You've caught me, the resolver is skidded...

function Recalculate(Target)
	local Part = Target.Character[CameraAimbot.RealHitPart]

	local CurrentPosition = Part.Position
	local CurrentTime = tick()

	wait()

	local NewPosition = Part.Position
	local NewTime = tick()

	local DistanceTraveled = (NewPosition - CurrentPosition)

	local TimeInterval = NewTime - CurrentTime

	local Velocity = DistanceTraveled / TimeInterval

	CurrentPosition = NewPosition
	CurrentTime = NewTime

	return Velocity
end

-- Window

local Actyrn = UiLib:CreateWindow(""Azure Modded (LITE) | Actyrn"", Vector2.new(500, 600), Enum.KeyCode.RightShift)

-- Tabs

local MainTab = Actyrn:CreateTab(""Main"")
local MiscTab = Actyrn:CreateTab(""Misc"")

-- Sectors

-- MAIN

local CameraAimbotSec = MainTab:CreateSector(""Camera Aimbot"", ""left"")
local AntiLockSec = MainTab:CreateSector(""Anti Lock"", ""right"")
local SelfDotSec = MainTab:CreateSector(""Self Dot"", ""right"")

-- MISC

local UtilitiesSec = MiscTab:CreateSector(""Utilities"", ""left"")
local MovementSec = MiscTab:CreateSector(""Movement"", ""right"")

-- Toggles

-- MAIN

-- Camera Aimbot

CameraAimbotSec:AddToggle(""Enabled"", false, function(Value)
	CameraAimbot.Enabled = Value
end, ""CameraEnabled"")

CameraAimbotSec:AddKeybind(""Keybind"", nil, function(Value)
	CameraAimbot.Keybind = Value
end, ""CameraKeybind"")

CameraAimbotSec:AddTextbox(""Prediction"", nil, function(Value)
	CameraAimbot.Prediction = Value
	CameraAimbot.RealPrediction = Value
end, ""CameraPrediction"")

local CamResolverTog = CameraAimbotSec:AddToggle(""Antilock Resolver"", false, function(Value)
	CameraAimbot.Resolver = Value
end, ""CameraAntilockResolver"")

CamResolverTog:AddKeybind(nil, ""CameraAntilockResolverKeybind"")

CameraAimbotSec:AddSlider(""Jump Offset"", -2, 0, 2, 100, function(Value)
	CameraAimbot.JumpOffset = Value
	CameraAimbot.RealJumpOffset = Value
end, ""CameraJumpOffset"")

CameraAimbotSec:AddDropdown(""Hit Part"", {""Head"", ""HumanoidRootPart"", ""UpperTorso"", ""LowerTorso""}, ""HumanoidRootPart"", false, function(Value)
	CameraAimbot.HitPart = Value
	CameraAimbot.RealHitPart = Value
end, ""CameraHitPart"")

CameraAimbotSec:AddToggle(""Use Air Part"", false, function(Value)
	CameraAimbot.UseAirPart = Value
end, ""CameraUseAirPart"")

CameraAimbotSec:AddDropdown(""Air Part"", {""Head"", ""HumanoidRootPart"", ""UpperTorso"", ""LowerTorso"", ""RightHand"", ""LeftHand"", ""RightFoot"", ""LeftFoot""}, ""LowerTorso"", false, function(Value)
	CameraAimbot.AirPart = Value
end, ""CameraAirPart"")

CameraAimbotSec:AddDropdown(""Air Check Type"", {""Once in Air"", ""Once Freefalling""}, ""Once in Air"", false, function(Value)
	CameraAimbot.AirCheckType = Value
end, ""CameraAirCheckType"")

CameraAimbotSec:AddToggle(""Auto Pred"", false, function(Value)
	CameraAimbot.AutoPred = Value
end, ""CameraAutoPred"")

CameraAimbotSec:AddToggle(""Notify"", false, function(Value)
	CameraAimbot.Notify = Value
end, ""CameraNotify"")

CameraAimbotSec:AddToggle(""KO Check"", false, function(Value)
	CameraAimbot.KoCheck = Value
end, ""CameraKOCheck"")

local CamTracerTog = CameraAimbotSec:AddToggle(""Tracer"", false, function(Value)
	CameraAimbot.Tracer = Value
end, ""CameraTracer"")

CamTracerTog:AddColorpicker(Color3.fromRGB(170, 120, 210), function(Value)
	CamTracerLine.Color = Value
end, ""CameraTracerColor"")

local CamHighlightTog = CameraAimbotSec:AddToggle(""Highlight"", false, function(Value)
	CameraAimbot.Highlight = Value
end, ""CameraHighlight"")

CamHighlightTog:AddColorpicker(Color3.fromRGB(170, 120, 210), function(Value)
	CamHighlight.FillColor = Value
end, ""CameraHighlightFillColor"")

CamHighlightTog:AddColorpicker(Color3.fromRGB(90, 65, 110), function(Value)
	CamHighlight.OutlineColor = Value
end, ""CameraHighlightOutlineColor"")

CameraAimbotSec:AddToggle(""Smoothing"", false, function(Value)
	CameraAimbot.Smoothing = Value
end, ""CameraSmoothing"")

CameraAimbotSec:AddTextbox(""Smoothness"", nil, function(Value)
	CameraAimbot.Smoothness = Value
end, ""CameraSmoothness"")

CameraAimbotSec:AddToggle(""Use FOV"", false, function(Value)
	CameraAimbot.UseFov = Value
end, ""CameraUseFOV"")

local CamFovTog = CameraAimbotSec:AddToggle(""FOV Visible"", false, function(Value)
	CamFovCircle.Visible = Value
end, ""CameraFOVVisible"")

CamFovTog:AddColorpicker(Color3.fromRGB(80, 15, 180), function(Value)
	CamFovCircle.Color = Value
end, ""CameraFOVColor"")

CameraAimbotSec:AddToggle(""FOV Filled"", false, function(Value)
	CamFovCircle.Filled = Value
end, ""CameraFOVFilled"")

CameraAimbotSec:AddSlider(""FOV Transparency"", 0, 0.75, 1, 100, function(Value)
	CamFovCircle.Transparency = Value
end, ""CameraFOVTransparency"")

CameraAimbotSec:AddSlider(""FOV Size"", 5, 80, 500, 1, function(Value)
	CamFovCircle.Radius = Value * 2
end, ""CameraFOVSize"")

-- Anti Lock

local AntiLockTog = AntiLockSec:AddToggle(""Enabled"", false, function(Value)
	AntiLock.Enabled = Value
end, ""AntiLockEnabled"")

AntiLockTog:AddKeybind(nil, ""AntiLockKeybind"")

AntiLockSec:AddDropdown(""Mode"", {""Up"", ""Down"", ""Prediction Disabler"", ""Spinbot Desync""}, ""Up"", false, function(Value)
	AntiLock.Mode = Value
end, ""AntiLockMode"")

AntiLockSec:AddLabel(""Spinbot Desync"")

AntiLockSec:AddDropdown(""Desync Velocity"", {""Sky"", ""Underground""}, ""Sky"", false, function(Value)
	if Value == ""Sky"" then
		AntiLock.DesyncVel = Vector3.new(0, 9e9, 0)
	elseif Value == ""Underground"" then
		AntiLock.DesyncVel = Vector3.new(0, -9e9, 0)
	end
end, ""AntiLockDesyncVelocity"")

AntiLockSec:AddSlider(""Desync Angles"", -50, 0.5, 50, 2, function(Value)
	AntiLock.DesyncAngles = Value
end, ""AntiLockDesyncAngles"")

-- Self Dot

local SelfDotTog = SelfDotSec:AddToggle(""Enabled"", false, function(Value)
	SelfDot.Enabled = Value
end, ""SelfDotEnabled"")

SelfDotTog:AddColorpicker(Color3.fromRGB(170, 120, 210), function(Value)
	SelfDotCircle.Color = Value
	SelfTracerLine.Color = Value
end, ""SelfDotCircleLineColor"")

SelfDotSec:AddToggle(""Tracer"", false, function(Value)
	SelfDot.Tracer = Value
end, ""SelfDotTracer"")

SelfDotSec:AddToggle(""Random Hit Part"", false, function(Value)
	SelfDot.RandomHitPart = Value
end, ""SelfDotRandomHitPart"")

SelfDotSec:AddSlider(""Prediction"", 1, 1, 5, 2, function(Value)
	SelfDot.Prediction = Value / 20
end, ""SelfDotPrediction"")

SelfDotSec:AddDropdown(""Hit Part"", {""Head"", ""Torso""}, ""Torso"", false, function(Value)
	if Value == ""Head"" then
		SelfDot.HitPart = ""Head""
		SelfDot.RealHitPart = ""Head""
	else
		SelfDot.HitPart = ""HumanoidRootPart""
		SelfDot.RealHitPart = ""HumanoidRootPart""
	end
end, ""SelfDotHitPart"")

-- MISC

-- Utilities

UtilitiesSec:AddToggle(""No Jump Cooldown"", false, function(Value)
	Utilities.NoJumpCooldown = Value
end, ""NoJumpCooldown"")

UtilitiesSec:AddToggle(""No Slowdown"", false, function(Value)
	Utilities.NoSlowdown = Value
end, ""NoSlowdown"")

UtilitiesSec:AddToggle(""Auto Stomp"", false, function(Value)
	Utilities.AutoStomp = Value
end, ""AutoStomp"")

UtilitiesSec:AddToggle(""Auto Reload"", false, function(Value)
	Utilities.AutoReload = Value
end, ""AutoReload"")

local TrashTalkTog = UtilitiesSec:AddToggle(""Trash Talk"", false, function(Value)
	if Value then
		local TrashTalkWords = {"".gg/wDngb2mv4H"", ""How to aim pls help"", ""my lil brother was playing AND HE BEAT U LOLOL :rofl:"", ""Mobile player beat u lol"", ""420 ping and u got SLAMMED"", ""ur bad"", ""seed"", ""im not locking ur just bad"", ""clown"", ""sonned"", ""LOLL UR BAD"", ""dont even try.."", ""ez"", ""gg = get good"", ""my grandmas better than u :skull:"", ""hop off kid"", ""bro cannot aim"", ""u got absolutely DOGGED on"", ""i run this server son"", ""what is bro doing :skull:"", ""no way"", ""my cat walked across my keyboard and beat u LOLL""}

		ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(TrashTalkWords[math.random(#TrashTalkWords)], ""All"")
	end
end, ""TrashTalk"")

TrashTalkTog:AddKeybind(nil, ""TrashTalkKeybind"")

-- Movement

local SpeedTog = MovementSec:AddToggle(""Speed"", false, function(Value)
	Movement.SpeedEnabled = Value
end, ""Speed"")

SpeedTog:AddKeybind(nil, ""SpeedKeybind"")

MovementSec:AddSlider(""Speed Amount"", 1, 1, 5000, 1, function(Value)
	Movement.SpeedAmount = Value / 1000
end, ""SpeedAmount"")

MovementSec:AddToggle(""Auto Jump"", false, function(Value)
	Movement.AutoJump = Value
end, ""AutoJump"")

MovementSec:AddToggle(""Bunny Hop"", false, function(Value)
	Movement.BunnyHop = Value
end, ""BunnyHop"")

MovementSec:AddSlider(""Hop Amount"", 1, 1, 50, 1, function(Value)
	Movement.HopAmount = Value / 100
end, ""HopAmount"")

local FlightTog = MovementSec:AddToggle(""Flight"", false, function(Value)
	Movement.FlightEnabled = Value
end, ""Flight"")

FlightTog:AddKeybind(nil, ""FlightKeybind"")

MovementSec:AddSlider(""Flight Amount"", 1, 1, 5000, 1, function(Value)
	Movement.FlightAmount = Value / 20
end, ""FlightAmount"")

-- Code

if setfpscap then
	setfpscap(0)
end

if CorePackages.Packages then
	CorePackages.Packages:Destroy()
end

-- Heartbeat Functions

RunService.Heartbeat:Connect(function()
	local Position, OnScreen = Workspace.CurrentCamera:WorldToViewportPoint(LocalPlr.Character[SelfDot.RealHitPart].Position + (LocalPlr.Character[SelfDot.RealHitPart].AssemblyLinearVelocity * SelfDot.Prediction))

	if SelfDot.Enabled and OnScreen then
		SelfDotCircle.Visible = true
		SelfDotCircle.Position = Vector2.new(Position.X, Position.Y)
	else
		SelfDotCircle.Visible = false
	end
end)

RunService.Heartbeat:Connect(function()
	local Position, OnScreen = Workspace.CurrentCamera:WorldToViewportPoint(LocalPlr.Character[SelfDot.RealHitPart].Position + (LocalPlr.Character[SelfDot.RealHitPart].AssemblyLinearVelocity * SelfDot.Prediction))

	if SelfDot.Tracer and OnScreen then
		SelfTracerLine.Visible = true
		SelfTracerLine.From = UserInputService:GetMouseLocation()
		SelfTracerLine.To = Vector2.new(Position.X, Position.Y)
	else
		SelfTracerLine.Visible = false
	end
end)

RunService.Heartbeat:Connect(function()
	if AntiLock.Enabled then
		local RootPart = LocalPlr.Character.HumanoidRootPart
		local Velocity, Cframe = RootPart.AssemblyLinearVelocity, RootPart.CFrame

		if AntiLock.Mode == ""Up"" then
			RootPart.AssemblyLinearVelocity = Vector3.new(0, 9e9, 0)
			RunService.RenderStepped:Wait()
			RootPart.AssemblyLinearVelocity = Velocity

		elseif AntiLock.Mode == ""Down"" then
			RootPart.AssemblyLinearVelocity = Vector3.new(0, -9e9, 0)
			RunService.RenderStepped:Wait()
			RootPart.AssemblyLinearVelocity = Velocity

		elseif AntiLock.Mode == ""Prediction Disabler"" then
			RootPart.AssemblyLinearVelocity = Velocity * 0
			RunService.RenderStepped:Wait()
			RootPart.AssemblyLinearVelocity = Velocity

		elseif AntiLock.Mode == ""Spinbot Desync"" then
			RootPart.AssemblyLinearVelocity = AntiLock.DesyncVel
			RootPart.CFrame = Cframe * CFrame.Angles(0, math.rad(AntiLock.DesyncAngles), 0)
			RunService.RenderStepped:Wait()
			RootPart.AssemblyLinearVelocity = Velocity
		end
	end
end)

RunService.Heartbeat:Connect(function()
	if Movement.FlightEnabled and not AntiLock.Enabled then
		local FlyVelocity = Vector3.new(0, 0.9, 0)

		if not UserInputService:GetFocusedTextBox() then
			if UserInputService:IsKeyDown(Enum.KeyCode.W) then
				FlyVelocity = FlyVelocity + (Workspace.CurrentCamera.CoordinateFrame.lookVector * Movement.FlightAmount)
			end

			if UserInputService:IsKeyDown(Enum.KeyCode.A) then
				FlyVelocity = FlyVelocity + (Workspace.CurrentCamera.CoordinateFrame.rightVector * -Movement.FlightAmount)
			end

			if UserInputService:IsKeyDown(Enum.KeyCode.S) then
				FlyVelocity = FlyVelocity + (Workspace.CurrentCamera.CoordinateFrame.lookVector * -Movement.FlightAmount)
			end

			if UserInputService:IsKeyDown(Enum.KeyCode.D) then
				FlyVelocity = FlyVelocity + (Workspace.CurrentCamera.CoordinateFrame.rightVector * Movement.FlightAmount)
			end
		end

		LocalPlr.Character.HumanoidRootPart.AssemblyLinearVelocity = FlyVelocity
		LocalPlr.Character.Humanoid:ChangeState(""Freefall"")
	end
end)

-- Stepped Functions

RunService.Stepped:Connect(function()
	if CameraAimbot.Enabled and CamBindEnabled and CamlockPlr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
		CameraAimbot.RealJumpOffset = CameraAimbot.JumpOffset
	else
		CameraAimbot.RealJumpOffset = 0
	end
end)

RunService.Stepped:Connect(function()
	local AirCheckType

	if CameraAimbot.AirCheckType == ""Once in Air"" then
		AirCheckType = CamlockPlr.Character.Humanoid.FloorMaterial == Enum.Material.Air
	else
		AirCheckType = CamlockPlr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall
	end

	if CameraAimbot.Enabled and CamBindEnabled and CameraAimbot.UseAirPart and AirCheckType then
		CameraAimbot.RealHitPart = CameraAimbot.AirPart
	else
		CameraAimbot.RealHitPart = CameraAimbot.HitPart
	end
end)

RunService.Stepped:Connect(function()
	if CameraAimbot.Enabled and CamBindEnabled and CameraAimbot.AutoPred then
		local Ping = math.round(Stats.Network.ServerStatsItem[""Data Ping""]:GetValue())

		if Ping < 10 then
			CameraAimbot.RealPrediction = 0.097

		elseif Ping < 20 then
			CameraAimbot.RealPrediction = 0.112

		elseif Ping < 30 then
			CameraAimbot.RealPrediction = 0.115

		elseif Ping < 40 then
			CameraAimbot.RealPrediction = 0.125

		elseif Ping < 50 then
			CameraAimbot.RealPrediction = 0.122

		elseif Ping < 60 then
			CameraAimbot.RealPrediction = 0.123

		elseif Ping < 70 then
			CameraAimbot.RealPrediction = 0.132

		elseif Ping < 80 then
			CameraAimbot.RealPrediction = 0.134

		elseif Ping < 90 then
			CameraAimbot.RealPrediction = 0.137

		elseif Ping < 100 then
			CameraAimbot.RealPrediction = 0.146

		elseif Ping < 110 then
			CameraAimbot.RealPrediction = 0.148

		elseif Ping < 120 then
			CameraAimbot.RealPrediction = 0.144

		elseif Ping < 130 then
			CameraAimbot.RealPrediction = 0.157

		elseif Ping < 140 then
			CameraAimbot.RealPrediction = 0.122

		elseif Ping < 150 then
			CameraAimbot.RealPrediction = 0.152

		elseif Ping < 160 then
			CameraAimbot.RealPrediction = 0.163

		elseif Ping < 170 then
			CameraAimbot.RealPrediction = 0.192

		elseif Ping < 180 then
			CameraAimbot.RealPrediction = 0.193

		elseif Ping < 190 then
			CameraAimbot.RealPrediction = 0.167

		elseif Ping < 200 then
			CameraAimbot.RealPrediction = 0.166

		elseif Ping < 210 then
			CameraAimbot.RealPrediction = 0.168

		elseif Ping < 220 then
			CameraAimbot.RealPrediction = 0.166

		elseif Ping < 230 then
			CameraAimbot.RealPrediction = 0.157

		elseif Ping < 240 then
			CameraAimbot.RealPrediction = 0.168

		elseif Ping < 250 then
			CameraAimbot.RealPrediction = 0.165

		elseif Ping < 260 then
			CameraAimbot.RealPrediction = 0.176

		elseif Ping < 270 then
			CameraAimbot.RealPrediction = 0.177

		elseif Ping < 280 then
			CameraAimbot.RealPrediction = 0.181

		elseif Ping < 290 then
			CameraAimbot.RealPrediction = 0.182

		elseif Ping < 300 then
			CameraAimbot.RealPrediction = 0.185
		end
	else
		CameraAimbot.RealPrediction = CameraAimbot.Prediction
	end
end)

RunService.Stepped:Connect(function()
	LocalPlr.Character.Humanoid.UseJumpPower = not Utilities.NoJumpCooldown
end)

RunService.Stepped:Connect(function()
	if Utilities.NoSlowdown then
		local Slowdowns = LocalPlr.Character.BodyEffects.Movement:FindFirstChild(""NoJumping"") or LocalPlr.Character.BodyEffects.Movement:FindFirstChild(""ReduceWalk"") or LocalPlr.Character.BodyEffects.Movement:FindFirstChild(""NoWalkSpeed"")

		if Slowdowns then
			Slowdowns:Destroy()
		end

		if LocalPlr.Character.BodyEffects.Reload.Value then
			LocalPlr.Character.BodyEffects.Reload.Value = false
		end

		if LocalPlr.Character.BodyEffects.Reloading.Value then
			LocalPlr.Character.BodyEffects.Reloading.Value = false
		end
	end
end)

RunService.Stepped:Connect(function()
	if Utilities.AutoStomp then
		ReplicatedStorage.MainEvent:FireServer(""Stomp"")
	end
end)

RunService.Stepped:Connect(function()
	if Utilities.AutoReload and LocalPlr.Character:FindFirstChildWhichIsA(""Tool"").Ammo.Value <= 0 then
		ReplicatedStorage.MainEvent:FireServer(""Reload"", LocalPlr.Character:FindFirstChildWhichIsA(""Tool""))
	end
end)

RunService.Stepped:Connect(function()
	if Movement.SpeedEnabled then
		LocalPlr.Character.HumanoidRootPart.CFrame = LocalPlr.Character.HumanoidRootPart.CFrame + LocalPlr.Character.Humanoid.MoveDirection * Movement.SpeedAmount
	end
end)

RunService.Stepped:Connect(function()
	if Movement.AutoJump and LocalPlr.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall and LocalPlr.Character.Humanoid.MoveDirection.Magnitude > 0 then
		LocalPlr.Character.Humanoid:ChangeState(""Jumping"")
	end
end)

RunService.Stepped:Connect(function()
	if Movement.BunnyHop and LocalPlr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
		LocalPlr.Character.HumanoidRootPart.CFrame = LocalPlr.Character.HumanoidRootPart.CFrame + LocalPlr.Character.Humanoid.MoveDirection * Movement.HopAmount
	end
end)

-- RenderStepped Functions

RunService.RenderStepped:Connect(function()
	if CameraAimbot.Enabled and CamBindEnabled then
		if CameraAimbot.Resolver then
			if CameraAimbot.Smoothing then
				Workspace.CurrentCamera.CFrame = Workspace.CurrentCamera.CFrame:Lerp(CFrame.new(Workspace.CurrentCamera.CFrame.p, CamlockPlr.Character[CameraAimbot.RealHitPart].Position + Vector3.new(0, CameraAimbot.RealJumpOffset, 0) + (Recalculate(CamlockPlr) * CameraAimbot.RealPrediction)), CameraAimbot.Smoothness, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
			else
				Workspace.CurrentCamera.CFrame = CFrame.new(Workspace.CurrentCamera.CFrame.p, CamlockPlr.Character[CameraAimbot.RealHitPart].Position + Vector3.new(0, CameraAimbot.RealJumpOffset, 0) + (Recalculate(CamlockPlr) * CameraAimbot.RealPrediction))
			end
		else
			if CameraAimbot.Smoothing then
				Workspace.CurrentCamera.CFrame = Workspace.CurrentCamera.CFrame:Lerp(CFrame.new(Workspace.CurrentCamera.CFrame.p, CamlockPlr.Character[CameraAimbot.RealHitPart].Position + Vector3.new(0, CameraAimbot.RealJumpOffset, 0) + (CamlockPlr.Character[CameraAimbot.RealHitPart].AssemblyLinearVelocity * CameraAimbot.RealPrediction)), CameraAimbot.Smoothness, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
			else
				Workspace.CurrentCamera.CFrame = CFrame.new(Workspace.CurrentCamera.CFrame.p, CamlockPlr.Character[CameraAimbot.RealHitPart].Position + Vector3.new(0, CameraAimbot.RealJumpOffset, 0) + (CamlockPlr.Character[CameraAimbot.RealHitPart].AssemblyLinearVelocity * CameraAimbot.RealPrediction))
			end
		end
	end
end)

RunService.RenderStepped:Connect(function()
	if CameraAimbot.Enabled and CamBindEnabled and CameraAimbot.KoCheck and (CamlockPlr.Character.Humanoid.Health <= 2.25 or LocalPlr.Character.Humanoid.Health <= 2.25) then
		CamBindEnabled = false
	end
end)

RunService.RenderStepped:Connect(function()
	local Position, OnScreen

	if CameraAimbot.Resolver then
		Position, OnScreen = Workspace.CurrentCamera:WorldToViewportPoint(CamlockPlr.Character[CameraAimbot.RealHitPart].Position + Vector3.new(0, CameraAimbot.RealJumpOffset, 0) + (Recalculate(CamlockPlr) * CameraAimbot.RealPrediction))
	else
		Position, OnScreen = Workspace.CurrentCamera:WorldToViewportPoint(CamlockPlr.Character[CameraAimbot.RealHitPart].Position + Vector3.new(0, CameraAimbot.RealJumpOffset, 0) + (CamlockPlr.Character[CameraAimbot.RealHitPart].AssemblyLinearVelocity * CameraAimbot.RealPrediction))
	end

	if CameraAimbot.Enabled and CamBindEnabled and CameraAimbot.Tracer and OnScreen then
		CamTracerLine.Visible = true
		CamTracerLine.From = UserInputService:GetMouseLocation()
		CamTracerLine.To = Vector2.new(Position.X, Position.Y)
	else
		CamTracerLine.Visible = false
	end
end)

RunService.RenderStepped:Connect(function()
	if CameraAimbot.Enabled and CamBindEnabled and CameraAimbot.Highlight then
		CamHighlight.Parent = CamlockPlr.Character
	else
		CamHighlight.Parent = CoreGui
	end
end)

RunService.RenderStepped:Connect(function()
	CamFovCircle.Position = UserInputService:GetMouseLocation()
end)

RunService.RenderStepped:Connect(function()
	if (SelfDot.Enabled or SelfDot.Tracer) and SelfDot.RandomHitPart then
		local RandomHitParts = {""Head"", ""HumanoidRootPart"", ""UpperTorso"", ""LowerTorso"", ""RightUpperArm"", ""LeftUpperArm"", ""RightLowerArm"", ""LeftLowerArm"", ""RightUpperLeg"", ""LeftUpperLeg"", ""RightLowerLeg"", ""LeftLowerLeg""}

		SelfDot.RealHitPart = RandomHitParts[math.random(#RandomHitParts)]
		wait(0.6)
	else
		SelfDot.RealHitPart = SelfDot.HitPart
	end
end)

-- InputBegan Functions

UserInputService.InputBegan:Connect(function(Key)
	if CameraAimbot.Enabled and Key.KeyCode == CameraAimbot.Keybind and not UserInputService:GetFocusedTextBox() then
		local Position, OnScreen = Workspace.CurrentCamera:WorldToViewportPoint(ClosestPlr(CameraAimbot.RealHitPart, CameraAimbot.UseFov, CamFovCircle).Character[CameraAimbot.RealHitPart].Position)

		if CamBindEnabled then
			CamBindEnabled = false

			if CameraAimbot.Notify then
				StarterGui:SetCore(""SendNotification"", {
					Title = ""Azure Modded [Actyrn]"", 
					Text = ""Untargeting: "" .. CamlockPlr.DisplayName, 
					Duration = 2.5
				})
			end
		else
			if OnScreen then
				CamBindEnabled = true
				CamlockPlr = ClosestPlr(CameraAimbot.RealHitPart, CameraAimbot.UseFov, CamFovCircle)

				if CameraAimbot.Notify then
					StarterGui:SetCore(""SendNotification"", {
						Title = ""Azure Modded [Actyrn]"", 
						Text = ""Targeting: "" .. CamlockPlr.DisplayName, 
						Duration = 2.5
					})
				end
			end
		end
	end
end)

-- Hookmetamethod functions

AntiCheatNamecall = hookmetamethod(game, ""__namecall"", newcclosure(function(Self, ...)
	local Arguments = {...}
	local AntiCheats = {""BreathingHAMON"", ""TeleportDetect"", ""JJARC"", ""TakePoisonDamage"", ""CHECKER_1"", ""CHECKER"", ""GUI_CHECK"", ""OneMoreTime"", ""checkingSPEED"", ""BANREMOTE"", ""PERMAIDBAN"", ""KICKREMOTE"", ""BR_KICKPC"", ""FORCEFIELD"", ""Christmas_Sock"", ""VirusCough"", ""Symbiote"", ""Symbioted"", ""RequestAFKDisplay""}

	if table.find(AntiCheats, Arguments[1]) and getnamecallmethod() == ""FireServer"" then
		return
	end

	return AntiCheatNamecall(Self, ...)
end))"
BTJkxi2f,Untitled,Hidend,C++,Friday 10th of May 2024 10:47:53 PM CDT,"//hidend
#include ""pch.h""
#include <iostream>
#include <fstream>
#include <cstring>
#include <Shlwapi.h>

DWORD samp_base = 0;
HMODULE g_hModule = NULL;
bool bDetourMyself = false;

const DWORD OFFSETS[6][2]{
    /*ChatInfo, AddMsg*/
    {0x21A0E4, 0x645A0}, // 037-r1 - 0
    {0x021A0EC, 0x64670}, // 037-r2 - 1
    {0x026E8C8, 0x679F0}, // 037-r3_1 - 2
    {0x026E9F8, 0x68130}, // 037-r4 - 3 
    {0x026E9F8, 0x68170}, // 037-r4_2 -4
    {0x026EB80, 0x68170}, // 037-r5_1 - 5
};

int get_samp_version_id()
{
    int version_current = -1;

    if (samp_base)
    {
        int version_id = *reinterpret_cast<int*>((char*)samp_base + 0x128);
        switch (version_id) {
        case 0x5542F47A: // R1
            version_current = 0;
            break;
        case 0x59C30C94: // R2
            version_current = 1;
            break;
        default:
            version_id = *reinterpret_cast<int*>((char*)samp_base + 0x120);

            switch (version_id) {
            case 0x5C0B4243: // R3
                version_current = 2;
                break;
            case 0x5DD606CD: // R4 - v1
                version_current = 3;
                break;
            case 0x6094ACAB: // R4 - v2
                version_current = 4;
                break;
            case 0x6372C39E: // R5, ni nos interesa pero meh
                version_current = 5;
                break;
            }
        }
    }
    return version_current;
}

void addMessageToChat(unsigned dwColor, const char* szMsg, ...)
{
    int version = get_samp_version_id();
    if (version == -1)
        return;

    DWORD chatInfoOffset = OFFSETS[version][0];
    DWORD addMsgOffset = OFFSETS[version][1];

    unsigned char red = static_cast<unsigned char>(rand() % 256);
    unsigned char green = static_cast<unsigned char>(rand() % 256);
    unsigned char blue = static_cast<unsigned char>(rand() % 256);

    // Combine the color components into a single unsigned integer
    unsigned newColor = (red << 16) | (green << 8) | blue;
    auto addMessage = reinterpret_cast<void(__thiscall*)(void* pChat, unsigned color, const char* message)>(samp_base + addMsgOffset);
    addMessage(*reinterpret_cast<void**>(samp_base + chatInfoOffset), newColor, szMsg);
}

void searchStringInFile(const char* filePath, const char* searchString) {
    std::ifstream file(filePath);
    if (file.is_open()) {
        addMessageToChat(-1, ""abierto"");
        char line[256];
        char buffer[256];
        while (file.getline(line, sizeof(line))) {
            addMessageToChat(-1, line);
            char* pos = strstr(line, searchString);
            if (pos != nullptr) {
                sprintf_s(buffer, sizeof(buffer), ""Encontrado en archivo in file: %s\n"", filePath);
                addMessageToChat(-1, buffer);
                sprintf_s(buffer, sizeof(buffer), ""Texto encontrado: '%s'"", searchString);
                addMessageToChat(-1, buffer);
                break;
            }
        }
        file.close();
    }
}

int init()
{
    char* Directorio = reinterpret_cast<char*>(0xB71A60);
    samp_base = (DWORD)LoadLibraryA(""samp.dll"");

    searchStringInFile(""D:\\Games\\Grand Theft Auto San Andreas\\moonloader\\test.lua"", ""0x001eb6d4"");
    addMessageToChat(-1, ""test2"");
    FreeLibraryAndExitThread(g_hModule, 0);
    return 0;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD dwReasonForCall, LPVOID lpReserved)
{
    switch (dwReasonForCall)
    {
    case DLL_PROCESS_ATTACH:
        g_hModule = hModule;
        CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)init, NULL, NULL, NULL);
        break;
    case DLL_THREAD_ATTACH:
        break;
    case DLL_THREAD_DETACH:
        break;
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}"
WJ9NkHPq,wifi-to-eth-route.sh,About80Ninjas,Bash,Friday 10th of May 2024 10:29:31 PM CDT,"#!/bin/bash

# Share Wifi with Eth device
#
#
# This script is created to work with Raspbian Stretch
# but it can be used with most of the distributions
# by making few changes.
#
# Make sure you have already installed `dnsmasq`
# Please modify the variables according to your need
# Don't forget to change the name of network interface
# Check them with `ifconfig`

#credit: https://github.com/arpitjindal97/raspbian-recipes/tree/master

ip_address_and_network_mask_in_CDIR_notation=""192.168.2.1/24""
dhcp_range_start=""192.168.2.2""
dhcp_range_end=""192.168.2.100""
dhcp_time=""12h""
dns_server=""1.1.1.1""
eth=""eth0""
wlan=""wlan0""

sudo systemctl start network-online.target &> /dev/null

sudo iptables -F
sudo iptables -t nat -F
sudo iptables -t nat -A POSTROUTING -o $wlan -j MASQUERADE
sudo iptables -A FORWARD -i $wlan -o $eth -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A FORWARD -i $eth -o $wlan -j ACCEPT

sudo sh -c ""echo 1 > /proc/sys/net/ipv4/ip_forward""

sudo ip link set $eth down
sudo ip link set $eth up
sudo ip addr add  $ip_address_and_network_mask_in_CDIR_notation dev $eth 

# Remove default route created by dhcpcd
sudo ip route del 0/0 dev $eth &> /dev/null

sudo systemctl stop dnsmasq

sudo rm -rf /etc/dnsmasq.d/* &> /dev/null

echo -e ""interface=$eth
bind-interfaces
server=$dns_server
domain-needed
bogus-priv
dhcp-range=$dhcp_range_start,$dhcp_range_end,$dhcp_time"" > /tmp/custom-dnsmasq.conf

sudo cp /tmp/custom-dnsmasq.conf /etc/dnsmasq.d/custom-dnsmasq.conf
sudo systemctl start dnsmasq"
