id,title,username,language,date,content
7YeYXT2G,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Friday 12th of April 2024 06:42:45 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_780465.pdf

Working as of:
12 April 2024"
KLWjsqmN,PlaneLoc,SimTek,Lua,Friday 12th of April 2024 06:39:24 PM CDT,"local players = game:GetService(""Players"")
local player = players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild(""HumanoidRootPart"")
local planeSnd = script:WaitForChild(""PlaneSnd"")
local plane = workspace:FindFirstChild(""Plane"")

local cutOff = 170

local function checkTheZone()
	if not plane then
		return
	end
	planeSnd:Play()
	while plane and hrp do
		local planeRootPart = plane:WaitForChild(""PlaneBase"")
		local sndPos = planeRootPart.Position
		local dist = (hrp.Position - sndPos).Magnitude
		if dist > cutOff then
			wait(1)
			planeSnd:Stop()
			break
		else
			local vol = (1 - dist/cutOff)/2
			planeSnd.Volume = vol
			wait(.1)
		end
	end
	
end

checkTheZone()"
efNFuuUx,Fly,SimTek,Lua,Friday 12th of April 2024 06:35:42 PM CDT,"local plane = script.Parent
local rootPart = plane.PlaneBase
local lv = rootPart.LinearVelocity
lv.MaxForce = math.huge

local startPnt = Vector3.new(0, 200, 1000)
local finishPnt = Vector3.new(0, 200, -1000)

plane:PivotTo(CFrame.new(startPnt))

for i=0, 25, 1 do
	wait(1)
	lv.VectorVelocity = (finishPnt - startPnt).Unit * (5*i)
end
wait(2)
for i, v in pairs(plane:GetDescendants()) do
	if v:IsA(""BasePart"") then
		v.CanCollide = false
	end
end
wait(3)
plane:Destroy()
"
ZtxanEdb,Untitled,Masjo,HTML,Friday 12th of April 2024 06:32:58 PM CDT,"Wait...
Espere..."
1ffMTPwX,Untitled,Masjo,HTML,Friday 12th of April 2024 06:31:25 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Texto en movimiento</title>
<style>
  .moving-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    animation: moveText 4s linear infinite;
  }

  @keyframes moveText {
    0% {
      transform: translate(-50%, -50%) translateX(-100%);
    }
    100% {
      transform: translate(-50%, -50%) translateX(100%);
    }
  }
</style>
</head>
<body>
<div class=""moving-text"">COMPLETED</div>
</body>
</html>"
SWzKN6DH,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,ssss50w,GetText,Friday 12th of April 2024 06:13:40 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
  
Working as of:
12 April 2024"
UJx3q4Gv,Untitled,loloof64,JavaScript,Friday 12th of April 2024 05:50:46 PM CDT,"import { defineComponent as y, useCssVars as S, computed as r, ref as g, openBlock as e, createElementBlock as o, createElementVNode as i, Fragment as a, renderList as u, toDisplayString as p, normalizeClass as V, pushScopeId as x, popScopeId as z } from ""vue"";
const _ = (t) => (x(""data-v-f3751c6b""), t = t(), z(), t), $ = { class: ""lowest-layer"" }, w = /* @__PURE__ */ _(() => /* @__PURE__ */ i(""div"", null, null, -1)), A = {
  key: 0,
  class: ""coordinate""
}, I = { key: 1 }, B = /* @__PURE__ */ _(() => /* @__PURE__ */ i(""div"", null, null, -1)), E = {
  key: 0,
  class: ""coordinate""
}, j = { key: 1 }, D = {
  key: 2,
  class: ""coordinate""
}, F = { key: 3 }, L = /* @__PURE__ */ _(() => /* @__PURE__ */ i(""div"", null, null, -1)), N = {
  key: 0,
  class: ""coordinate""
}, O = { key: 1 }, T = /* @__PURE__ */ _(() => /* @__PURE__ */ i(""div"", null, null, -1)), q = /* @__PURE__ */ y({
  __name: ""ChessboardVue"",
  props: {
    size: { default: 100 },
    reversed: { type: Boolean, default: !1 },
    background: { default: ""#124589"" },
    coordinatesVisible: { type: Boolean, default: !0 },
    coordinatesColor: { default: ""yellow"" },
    whiteCellsColor: { default: ""navajowhite"" },
    blackCellsColor: { default: ""peru"" }
  },
  setup(t) {
    S((d) => ({
      ""48ba1e3a"": C.value,
      81291066: d.background,
      ""4253e682"": f.value,
      ""412df85c"": d.whiteCellsColor,
      ""1fc52e9c"": d.blackCellsColor,
      ec184162: v.value,
      ""1c2d7987"": d.coordinatesColor
    }));
    const l = t, s = r(() => l.size / 9), c = r(() => s.value * 0.5), v = r(() => `${s.value * 0.3}px`), C = r(() => `${l.size}px`), f = r(
      () => `${c.value}px repeat(8, ${s.value}px) ${c.value}px / ${c.value}px repeat(8, ${s.value}px) ${c.value}px`
    ), m = g(), h = r(
      () => l.reversed ? [7, 6, 5, 4, 3, 2, 1, 0] : [0, 1, 2, 3, 4, 5, 6, 7]
    ), b = r(
      () => l.reversed ? [0, 1, 2, 3, 4, 5, 6, 7] : [7, 6, 5, 4, 3, 2, 1, 0]
    );
    return (d, J) => (e(), o(""div"", {
      class: ""root"",
      ref_key: ""rootElement"",
      ref: m
    }, [
      i(""div"", $, [
        w,
        (e(!0), o(a, null, u(h.value, (n) => (e(), o(a, null, [
          l.coordinatesVisible ? (e(), o(""p"", A, p(String.fromCharCode(65 + n)), 1)) : (e(), o(""div"", I))
        ], 64))), 256)),
        B,
        (e(!0), o(a, null, u(b.value, (n) => (e(), o(a, null, [
          l.coordinatesVisible ? (e(), o(""p"", E, p(String.fromCharCode(49 + n)), 1)) : (e(), o(""div"", j)),
          (e(!0), o(a, null, u(h.value, (k) => (e(), o(""div"", {
            class: V([""cell"", (n + k) % 2 !== 0 ? ""white"" : ""black""])
          }, null, 2))), 256)),
          l.coordinatesVisible ? (e(), o(""p"", D, p(String.fromCharCode(49 + n)), 1)) : (e(), o(""div"", F))
        ], 64))), 256)),
        L,
        (e(!0), o(a, null, u(h.value, (n) => (e(), o(a, null, [
          l.coordinatesVisible ? (e(), o(""p"", N, p(String.fromCharCode(65 + n)), 1)) : (e(), o(""div"", O))
        ], 64))), 256)),
        T
      ])
    ], 512));
  }
}), G = (t, l) => {
  const s = t.__vccOpts || t;
  for (const [c, v] of l)
    s[c] = v;
  return s;
}, H = /* @__PURE__ */ G(q, [[""__scopeId"", ""data-v-f3751c6b""]]), M = {
  install(t) {
    t.component(""ChessboardVue"", H);
  }
};
export {
  M as default
};
"
MjbHZPuP,Minecraft Storage Room Organization,Joefazza,Python,Friday 12th of April 2024 04:28:06 PM CDT,"Section 1:
Dirt
Dirt Variants
Gravel & Flint
Sand
Red Sand & Glass

Section 2:
Andesite
Diorite
Granite
Terracotta
Clay & Bricks

Section 3:
Cobble
Cobble Variants
Cobble Deepslate
Deepslate Variants
Tuff

Section 4:
Dripstone & Moss
Amethyst
Smooth Basalt & Calcite
Deep Dark
Adventure

Section 5:
Acacia
Birch
Oak
Dark Oak
Jungle

Section 6:
Spruce
Mangrove
Cherry
Crimson
Warped

Section 7:
Bamboo
Bees
Wool
Pigs, Rabbits, & Sheep
Fish & Grain

Section 8:
Chickens
Cows
Apples & Carrots
Potatoes, Pumpkins, & Melons
Food Other

Section 9:
Flowers & Plants
Inks & Dyes
Paper, Books, Sticks
Enchanted Books
Potions

Section 10:
Redstone & Lapis
Redstone Components
Redstone Accessories
Copper
Shiny

Section 11:
Netherrack
Nether Bricks
Blackstone
Basalt
Obsidian & Nether Quartz

Section 12:
Soul, Glowstone, & Magma
Discs
End Stone & Elytra
Purpur & Chorus
End Other

Section 13:
Ice & Snow
Kelp
Ocean Monument
Coral Reef
Archeology

Section 14:
Villager
Home Décor
Leather, Iron, & Gold Armor
Diamond & Netherite Armor
Wolf & Horse Armor

Section 15:
Trims & Upgrades
Weapons
Tools
Temp Chest 1
Temp Chest 2

Section 16:
Zombies & Spiders
Skeletons & Endermen
Slimes, Phantoms, & Ghasts
Creepers, Breezes, & Blazes
Heads & Misc."
2y2vYcJv,Untitled,CalinBedea,C#,Friday 12th of April 2024 03:59:43 PM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace JocEducativ
{
	public partial class Form4 : Form
	{
		public Form4()
		{
			InitializeComponent();
		}

		private static Point[,] grid;
		private static SolidBrush brush;
		private static Pen pen;
		private static Graphics graphics;
		private static int WIDTH;
		private static int punctaj;
		private static Size Window;
		private static int diameter;
		private static int Currentcol;
		private static int Currentrow;
		private static int Lungime;
		private static int Horizontal;
		private static int Vertical;

		

		private void timer1_Tick(object sender, EventArgs e)
		{
			Currentcol += Vertical;
			Currentrow += Horizontal;

			if(Currentcol >= WIDTH)

			panel1.Invalidate();
		}

		private void button1_Click(object sender, EventArgs e) ///Start
		{
			button2.Enabled = true;
			button1.Enabled = false;
			timer1.Start();
		}

		private void button2_Click(object sender, EventArgs e)
		{
			button1.Enabled = true;
			button2.Enabled = false;
			timer1.Stop();
		}

		private static void InitializareGrid()
		{
			int X = 0;
			int Y = 0;

			for(int i=0; i<WIDTH; i++)
			{
				X = 0;

				for(int j=0; j<WIDTH; j++) 
				{
					grid[i, j] = new Point(X, Y);
                    X += diameter;
                }

				Y += diameter;
			}
		}

		private static void DrawSarpe()
		{
			graphics.FillEllipse(brush, new Rectangle(grid[Currentrow, Currentcol], new Size(diameter, diameter)));
		}

		private static void InitializareSarpe()
		{
			Lungime = 1;
			Currentcol = 6;
			Currentrow = 6;
			Horizontal = 1;
			Vertical = 0;
			
		}


		private void Form4_Load(object sender, EventArgs e)
		{
			punctaj = 0;
			WIDTH = 12;
			Window = panel1.Size;
			grid = new Point[WIDTH, WIDTH];
			diameter = Window.Width / WIDTH;

			InitializareGrid();
			InitializareSarpe();
			
		}

        private void panel1_Paint(object sender, PaintEventArgs e)
        {
			graphics = e.Graphics;
			brush = new SolidBrush(Color.White);
			pen = new Pen(brush, 2);
			DrawSarpe();
			Update();
        }
    }
}
"
gB5PZK37,pastebin.ai - #1 pastebin.com alternative,xxsa,PHP,Friday 12th of April 2024 03:31:32 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
........
.
.…"
Lj3AzVdv,Untitled,retroman,FreeBasic,Friday 12th of April 2024 03:11:09 PM CDT,"dim mystr as string = ""hello""
dim ilen as integer = len(mystr)
dim tmp as string = string(ilen,!""\0"")

print mystr

dim i as integer = 0
tmp[i] = mystr[ilen - i]
i += 1
tmp[i] = mystr[ilen - i]
i += 1
tmp[i] = mystr[ilen - i]
i += 1
tmp[i] = mystr[ilen - i]
i += 1
tmp[i] = mystr[ilen - i]

print tmp
"
A1p7ZL6A,Stairs,Martin67370,Lua,Friday 12th of April 2024 02:46:32 PM CDT,"function menu()
    term.clear()
    term.setCursorPos(1,1)
    print(""Stairs :"")
    print(""depth : "")
    deph = read()
end
 

function level()
    turtle.digDown()
    turtle.placeDown()
    turtle.turnLeft()
    turtle.turnLeft()
    turtle.dig()
    turtle.forward()
	turtle.digDown()
    turtle.down()
    turtle.dig()
    turtle.forward()
    turtle.dig()
    turtle.forward()
    turtle.turnLeft()
    turtle.turnLeft()
    turtle.forward()
    turtle.forward()
end

menu()
for i=1, deph do
	print(""deph ""..d)
    level()
end"
Kawe4fvp,depot,mathiaas,Lua,Friday 12th of April 2024 02:29:50 PM CDT,"assert(loadfile(""utils""))()

local custom_items = {
    cobblestone = ""minecraft:cobblestone"",
    dirt = ""minecraft:dirt"",
    lava_bucket = ""minecraft:lava_bucket"",
    bucket = ""minecraft:bucket""
}

local dropDirections = {
    [custom_items.cobblestone] = {turns = 1, direction = 'right', dropAction = turtle.drop},
    [custom_items.dirt] = {turns = 2, direction = 'left', dropAction = turtle.drop},
    [custom_items.lava_bucket] = {dropAction = turtle.dropUp}, -- Drop up for lava buckets
    [custom_items.bucket] = {dropAction = turtle.dropUp}     -- Drop up for empty buckets
}

local function handleDrop(item, slot)
    local direction = dropDirections[item.name]
    if direction then
        if direction.direction then
            local turnFunction = direction.direction == 'right' and turtle.turnRight or turtle.turnLeft
            for i = 1, direction.turns or 0 do
                turnFunction()
            end
        end

        turtle.select(slot)
        do (direction.dropAction or turtle.dropDown)() end

        if direction.direction then
            local turnBackFunction = direction.direction == 'right' and turtle.turnLeft or turtle.turnRight
            for i = 1, direction.turns or 0 do
                turnBackFunction()
            end
        end
    else
        turtle.select(slot)
        turtle.dropDown()
    end
end

-- Main run function
local function main()
    while true do
        while turtle.suckUp() do end -- Continuously suck items from above
        local inventory = getInventory()

        for k, v in pairs(inventory) do
            handleDrop(v, v.slot)
        end
        sleep(1) -- Throttle the loop to prevent excessive resource usage
    end
end

main()
"
kLi4znMW,patch for iris,KukuRuzo,C++,Friday 12th of April 2024 02:26:46 PM CDT,"diff --git a/cmake/modules/usrsctp.patch b/cmake/modules/usrsctp.patch
new file mode 100644
index 0000000..25a6d23
--- /dev/null
+++ b/cmake/modules/usrsctp.patch
@@ -0,0 +1,19 @@
+
+
+diff --git a/usrsctplib/netinet/sctp_output.c b/usrsctplib/netinet/sctp_output.c
+index b8a7b46..6f9c9b9 100644
+--- a/usrsctplib/netinet/sctp_output.c
++++ b/usrsctplib/netinet/sctp_output.c
+@@ -13562,10 +13562,10 @@ sctp_lower_sosend(struct socket *so,
+ #endif
+ 	struct timeval now;
+ 	struct sctp_block_entry be;
+-	struct sctp_inpcb *inp;
++    struct sctp_inpcb *inp = NULL;
+ 	struct sctp_tcb *stcb = NULL;
+ 	struct sctp_nets *net;
+-	struct sctp_association *asoc;
++    struct sctp_association *asoc = NULL;
+ 	struct sctp_inpcb *t_inp;
+ 	struct sctp_nonpad_sndrcvinfo *sndrcvninfo;
+ 	ssize_t sndlen = 0, max_len, local_add_more;
diff --git a/cmake/modules/IrisSCTP.cmake b/cmake/modules/IrisSCTP.cmake
index 1bfa434..e6f1e18 100644
--- a/cmake/modules/IrisSCTP.cmake
+++ b/cmake/modules/IrisSCTP.cmake
@@ -60,6 +60,10 @@ else()
         if(NOT Git_FOUND)
             message(FATAL_ERROR ""Git not found! Bundled UsrSCTP needs Git utility.\nPlease set GIT_EXECUTABLE variable or add git to PATH"")
         endif()
+        set(patch_command
+        ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/usrsctp.patch <SOURCE_DIR> &&
+        ${GIT_EXECUTABLE} checkout <SOURCE_DIR>/usrsctplib/netinet/sctp_output.c &&
+        ${GIT_EXECUTABLE} apply <SOURCE_DIR>/usrsctp.patch)
         ExternalProject_Add(UsrSCTPProject
             PREFIX ${USRSCTP_PREFIX}
             BINARY_DIR ${USRSCTP_BUILD_DIR}
@@ -68,6 +72,7 @@ else()
             CMAKE_ARGS ${USRSCTP_BUILD_OPTIONS}
             BUILD_BYPRODUCTS ${USRSCTP_LIBRARY}
             INSTALL_COMMAND """"
+            PATCH_COMMAND ${patch_command}
             )
     endif()
     add_library(SctpLab::UsrSCTP UNKNOWN IMPORTED)
"
82dZE4RS,D,Ankit_132,C++,Friday 12th of April 2024 01:47:54 PM CDT,"#include <bits/stdc++.h>

using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define pb     push_back

ll int A[5005];
ll int dp[5005][7005];

int main()
{
    int mod = 998244353;

    int n;
    cin>>n;

    for(int i=1;i<=n;i++) cin>>A[i];
    sort(A+1,A+n+1);

    dp[0][0] = 1;
    ll int sum = 0;
    ll int ans=0;

    for(int i=1; i<=n; i++)
    {
        for(int j=0; j<=sum; j++)
        {
            dp[i][j] = (dp[i][j] + dp[i-1][j]) % mod;
            dp[i][j+A[i]] = (dp[i][j+A[i]] + dp[i-1][j]) % mod;
        }

        for(int j=0; j<=sum; j++)
        {
            if(j<=A[i])
                ans = (ans + dp[i-1][j]*1ll*A[i]) % mod;
            else
                ans = (ans + dp[i-1][j]*1ll*((A[i]+j+1)/2)) % mod;
        }

        sum+=A[i];
    }

    cout<<ans%mod<<""\n"";
}"
H06D44u9,C,Ankit_132,C++,Friday 12th of April 2024 01:47:44 PM CDT,"#include <bits/stdc++.h>
 
using namespace std;
 
#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define pb     push_back

int main()
{
    _test
    {
        string x, y;
        cin>>x>>y;
 
        string a, b;
 
        int d = -1;
 
        do{
            d++;
            a.pb(max(x[d], y[d]));
            b.pb(min(x[d], y[d]));
        }while(d+1<x.size() && x[d]==y[d]);
 
        for(int i=d+1; i<x.size(); i++)
        {
            a.pb(min(x[i], y[i]));
            b.pb(max(x[i], y[i]));
        }
 
        cout<<a<<""\n""<<b<<""\n"";
    }
}"
W0Rh6kds,B,Ankit_132,C++,Friday 12th of April 2024 01:47:33 PM CDT,"#include <bits/stdc++.h>
 
using namespace std;
 
#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define pb     push_back

int main()
{
    _test
    {
        int n;
        cin>>n;
 
        vector<int> a(n);
        for(auto &e: a)
            cin>>e;
 
        if(*max_element(a.begin(), a.end()) ==
           *min_element(a.begin(), a.end()))
        {
            cout<<""-1\n"";
            continue;
        }
 
        int ans=n, cnt=0;
 
        for(int i=0; i<n; i++)
        {
            if(a[0] == a[i])        cnt++;
            else
            {
                ans = min(ans, cnt);
                cnt = 0;
            }
        }
        
        ans = min(ans, cnt);
 
        cout<<ans<<""\n"";
    }
}"
AfxjQ3ux,A,Ankit_132,C++,Friday 12th of April 2024 01:47:06 PM CDT,"#include <bits/stdc++.h>
 
using namespace std;
 
#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define pb     push_back

int main()
{
    _test
    {
        int n, m, k;
        cin>>n>>m>>k;
 
        int mmax = (n+m-1)/m;
 
        if(n - mmax > k)    cout<<""Yes\n"";
        else                cout<<""No\n"";
    }
}"
efkJQSM7,whereiscash.json,Cervantez07,JSON,Friday 12th of April 2024 01:46:29 PM CDT,"[
    ""getting a marble tattoo"",
    ""climbing Mount Everest"",
    ""filing an impersonation lawsuit against a potato"",
    ""searching for the answer to Life, the Universe, and Everything"",
    ""finding 42"",
    ""away getting his ball waxed"",
	""at the hairdresser"",
	""on the toilet experiencing an explosive code brown"",
	""downstairs with his head stuck in the freezer looking for the last tub of ice cream"",
	""interviewing for a job as an ice cream taster"",
	""enlisting as the new Captain of the Starship Enterprise"",
	""smelly and had to go wash"",
	""in the garden mud wrestling with himself"",
	""preaching to a local church about ice cream"",
	""inventing new ice cream flavors"",
	""frolicking in a field of flowers""
]"
fpGZ2scL,Untitled,_KAGATUN_,C#,Friday 12th of April 2024 01:35:58 PM CDT,"using System;
using System.Collections.Generic;

namespace Supermarket
{
    class Program
    {
        static void Main(string[] args)
        {
            Shop shop = new Shop();
            shop.ShopWork();
        }
    }

    public class Utilities
    {
        private static Random _random = new Random();

        public static int GetRandomNumber(int min, int max)
        {
            return _random.Next(min, max);
        }

        public static int GetRandomNumber(int max)
        {
            return _random.Next(max);
        }
    }

    class Product
    {
        public Product(string title, int price)
        {
            Title = title;
            Price = price;
        }

        public string Title { get; private set; }

        public int Price { get; private set; }

        public void ShowProduct()
        {
            Console.WriteLine($""\n\tНаименование товара: {Title} \tЦена товара: {Price}"");
        }
    }

    class Buyer
    {
        private List<Product> _basket;

        private int _minRandomMoney = 500;
        private int _maxRandomMoney = 3000;

        private string _name;

        public Buyer(string name)
        {
            _name = name;

            _basket = new List<Product>();

            Money = Utilities.GetRandomNumber(_minRandomMoney, _maxRandomMoney);
        }

        public int Money { get; private set; }

        public void ShowInfo(string text)
        {
            Console.WriteLine($""\n{_name}. Капитал: {Money}"");

            if (_basket.Count == 0)
            {
                Console.WriteLine($""\nКорзина пуста"");
            }
            else
            {
                Console.WriteLine(text);

                for (int i = 0; i < _basket.Count; i++)
                {
                    _basket[i].ShowProduct();
                }

                Console.WriteLine(""----------------"");
            }
        }

        public void TryBuyProducts()
        {
            Console.WriteLine($""Общая стоимость продуктов в корзине {GetTotalPrice()}"");

            RemoveRandomProduct();
            PayProduct();
            ShowInfo(""Купленный товар:"");
        }

        public void FillBasket(List<Product> products)
        {
            int randomProductCount = Utilities.GetRandomNumber(products.Count);

            for (int i = 0; i < randomProductCount; i++)
            {
                int index = Utilities.GetRandomNumber(products.Count);
                _basket.Add(products[index]);
            }
        }

        private void PayProduct()
        {
            Money -= GetTotalPrice();
        }

        private int GetTotalPrice()
        {
            int totalPrice = 0;

            for (int i = 0; i < _basket.Count; i++)
            {
                totalPrice += _basket[i].Price;
            }

            return totalPrice;
        }

        private void RemoveRandomProduct()
        {
            while (GetTotalPrice() > Money && _basket.Count > 0)
            {
                _basket.Remove(_basket[Utilities.GetRandomNumber(_basket.Count)]);
            }
        }
    }

    class Shop
    {
        private int _money = 0;

        private List<Product> _assortment;

        private Queue<Buyer> _buyers;

        public Shop()
        {
            _buyers = new Queue<Buyer>();

            _assortment = new List<Product>
            {
                new Product(""Блендер"", 1100),
                new Product(""Картофель мытый в сетке 5кг"", 280),
                new Product(""Зубная паста Большой тюбик"", 250),
                new Product(""Яблоко сорт Голд 1 шт"", 35),
                new Product(""Лук в сетке Эконом 3кг"", 165),
                new Product(""Хлеб"", 55),
                new Product(""Молоко 1 литр"", 65),
                new Product(""Коффе Якобс 185гр"", 275),
                new Product(""Свинина 1кг"", 260),
                new Product(""Курица Бройлер2кг охлажденная"", 380),
                new Product(""Мука 1 сорт 1кг"", 85),
                new Product(""Апельсин 1кг"", 130),
                new Product(""Торт Наполеон 500гр"", 475),
                new Product(""Банан 1кг"", 80),
                new Product(""Сметана стакан 250гр"", 75),
                new Product(""Макароны Макфа 200гр"", 150),
                new Product(""Сельдь филе кусочками 500гр"", 380)
            };
        }

        public void ShopWork()
        {
            Shop shop = new Shop();
            shop.ShowAssortment();
            shop.CreateQueue();
            shop.ShowBuyers();
            shop.FillBuyersBasket();
            shop.ShowBuyers();
            shop.ServeBuyers();
        }

        private void MakeProfit(List<Product> product)
        {
            for (int i = 0; i < product.Count; i++)
            {
                _money += product[i].Price;
            }
        }

        private void CreateQueue()
        {
            Console.WriteLine(""Покупатели:"");

            _buyers.Enqueue(new Buyer(""Наталья""));
            _buyers.Enqueue(new Buyer(""Александр""));
            _buyers.Enqueue(new Buyer(""Евгений""));
        }

        private void ShowBuyers()
        {
            foreach (Buyer buyer in _buyers)
            {
                buyer.ShowInfo(""Товар в корзине"");
            }
        }

        private void ShowAssortment()
        {
            Console.WriteLine(""Ассортимент супермаркета:"");

            for (int i = 0; i < _assortment.Count; i++)
            {
                _assortment[i].ShowProduct();
            }
        }

        private void FillBuyersBasket()
        {
            foreach (Buyer buyer in _buyers)
            {
                buyer.FillBasket(new List<Product>(_assortment));
            }
        }

        private void ServeBuyers()
        {
            while (_buyers.Count > 0)
            {
                Buyer buyer = _buyers.Dequeue();
                buyer.TryBuyProducts();
            }
        }
    }
}
"
EYyQ93Sp,Fritz 7360v2 (xrx200) - Openwrt 23.05.3,mar_w,Bash,Friday 12th of April 2024 01:11:25 PM CDT," _______                     ________        __
 |       |.-----.-----.-----.|  |  |  |.----.|  |_
 |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|
 |_______||   __|_____|__|__||________||__|  |____|
          |__| W I R E L E S S   F R E E D O M
 -----------------------------------------------------
 OpenWrt 23.05.3, r23809-234f1a2efa

klient LAN: 192.168.1.3
serwer:     192.168.76.1 oraz 10.9.0.1

#######################################################################################################

    ########## Bez HW ##########

#######################################################################################################

### NAT: (z klienta LAN-owego, przez router, do serwera) ###
CPU0: 100%   CPU1: 6,8-7,4%

ftp user@192.168.76.1
ftp> put test.iso
1073741824 bytes sent in 01:08 (14.90 MiB/s)


ftp user@192.168.76.1
ftp> get test.iso
1073741824 bytes received in 01:02 (16.34 MiB/s)


### WG (z klienta LAN-owego, przez router który jest peerem WG, do serwera WG) ###
CPU0: 100%   CPU1: 90-94% (w zależności czy put czy get)

ftp user@10.9.0.1
ftp> put test.iso
1073741824 bytes sent in 03:56 (4.32 MiB/s)


ftp user@10.9.0.1
ftp> get test.iso
1073741824 bytes received in 02:50 (6.02 MiB/s)


### PPPoE + VLAN 35(z klienta LAN-owego, przez router który jest clientem PPPoE, do serwera PPPoE dodatkowo na tagowanych portach VLAN 35) ####
CPU0: 100%   CPU1: 6,8-8,0%

ftp user@192.168.76.1
ftp> put test.iso
1073741824 bytes sent in 01:51 (9.17 MiB/s)


ftp user@192.168.76.1
ftp> get test.iso
1073741824 bytes received in 02:01 (8.45 MiB/s)


### WG + PPPoE + VLAN35 (z klienta LAN-owego, przez router który jest peerem WG i clientem PPPoE, do serwera WG który jest dodatkowo serwerem PPPoE na tagowanych portach VLAN 35) ###
CPU0: 100%   CPU1: 60-71% (w zależności czy put czy get)

ftp user@10.9.0.1
ftp> put test.iso
1073741824 bytes sent in 05:01 (3.40 MiB/s)


ftp user@10.9.0.1
ftp> get test.iso
1073741824 bytes received in 03:53 (4.38 MiB/s)

                                                   
####################################################################################################################

    ########## Z HW_FLOW ##########

firewall.@defaults[0].flow_offloading='1'
firewall.@defaults[0].flow_offloading_hw='1'
####################################################################################################################

### NAT (z klienta LAN-owego, przez router, do serwera) ###
CPU0: 100%   CPU1: 6,8-8,0%

ftp user@192.168.76.1
ftp> put test.iso
1073741824 bytes sent in 00:21 (47.94 MiB/s)


ftp user@192.168.76.1
ftp> get test.iso
1073741824 bytes received in 00:22 (45.61 MiB/s)


### WG (z klienta LAN-owego, przez router który jest peerem WG, do serwera WG) ###
CPU0: 100%   CPU1: 90-96% (w zależności czy put czy get)

ftp user@10.9.0.1
ftp> put test.iso
1073741824 bytes sent in 03:47 (4.50 MiB/s)


ftp user@10.9.0.1
ftp> get test.iso
1073741824 bytes received in 02:46 (6.14 MiB/s)


### PPPoE + VLAN 35(z klienta LAN-owego, przez router który jest clientem PPPoE, do serwera PPPoE dodatkowo na tagowanych portach VLAN 35) ###
CPU0: 100%   CPU1: 6,8-8,0%

ftp user@192.168.76.1
ftp> put test.iso
1073741824 bytes sent in 00:55 (18.35 MiB/s)


ftp user@192.168.76.1
ftp> get test.iso
1073741824 bytes received in 01:51 (9.20 MiB/s)


### WG + PPPoE + VLAN35 (z klienta LAN-owego, przez router który jest peerem WG i clientem PPPoE, do serwera WG który jest dodatkowo serwerem PPPoE na tagowanych portach VLAN 35) ###
CPU0: 100%   CPU1: 44-71% (w zależności czy put czy get)

ftp user@10.9.0.1
ftp> put test.iso
1073741824 bytes sent in 07:08 (2.38 MiB/s)


ftp user@10.9.0.1
ftp> get test.iso
1073741824 bytes received in 04:08 (4.11 MiB/s)"
N9hfQWuS,stackHotBar 2,Sungmingamerpro13,CSS,Friday 12th of April 2024 01:09:26 PM CDT,"-- [ SETTINGS ] --

local backgroundColor = Color3.fromRGB(0, 132, 255) -- The color of each circle
local maxOnHotbar = 10 -- How many tools can be displayed. Setting this to more than 10 reverts to 10

-- [ END SETTINGS ] --

-- Don't edit if you don't know what you're doing --

local Players = game:GetService(""Players"")
local StarterGui = game:GetService(""StarterGui"")
local UserInputService = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")
local player = Players.LocalPlayer
local Backpack = player.Backpack
local Character = player.Character
local Frame = script.Parent.Frame
local Template = Frame.Contents.objTemplate

local COLOR_DARKER = 0.65
local KEY_DICTIONARY = { Zero = 10, One = 1, Two = 2, Three = 3, Four = 4, Five = 5, Six = 6, Seven = 7, Eight = 8, Nine = 9 }
local EQUIP_TWEENINFO = TweenInfo.new(0.25, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
local items = {}
local tweens = {}
local stackedItems = {}

local function handleStackingUI(toolCircle, tool)
	tool:WaitForChild(""stacks"").Changed:Connect(function(value)
			toolCircle.Stacks.Text = value
		end)
		toolCircle.Stacks.Text = tool.stacks.Value
end

local function handleEquip(tool)
	if tool.Parent == nil or tool.Parent == Backpack then
		Character.Humanoid:EquipTool(tool)
	elseif tool.Parent == Character then
		Character.Humanoid:UnequipTools()
	end
end


local function checkHotbar(removeIndex)
	if removeIndex then
		for _, toolCircle in pairs(Frame.Contents:GetChildren()) do
			if toolCircle:IsA(""GuiObject"") then
				local circleName = tonumber(toolCircle.Name)
				if circleName and circleName >= removeIndex then
					local newIndex = (circleName == 11) and 0 or circleName - 1
					local isVisible = (maxOnHotbar == 10) and (newIndex <= 9 and true or false) or ((newIndex ~= 0 and newIndex <= maxOnHotbar) and true or false)

					toolCircle.LayoutOrder -= 1
					toolCircle.Name = tostring(newIndex)
					toolCircle.Visible = isVisible
					toolCircle.Index.Text = tostring(newIndex)
				end
			end
		end
	end

	local additionalIndex = Frame.AdditionalIndex
	additionalIndex.Size = UDim2.new(0, Frame.Contents.UIListLayout.AbsoluteContentSize.X + Frame.Contents.AbsoluteSize.Y + 15, 0, 25)
	additionalIndex.Text = ""+"" .. (#items - maxOnHotbar)
	additionalIndex.Visible = (#items > maxOnHotbar)

	for index, tool in ipairs(items) do
		local toolCircle = Frame.Contents:FindFirstChild(index)
		local isEquipped = (tool.Parent == Character)

		if not toolCircle then
			return
		end

		if tweens[toolCircle] then
			tweens[toolCircle]:Cancel()
			tweens[toolCircle] = nil
		end

		-- Adjust UIStroke Transparency based on whether the tool is equipped or not
		toolCircle.Background.Out.UIStroke.Transparency = isEquipped and 0 or 1
		-- Adjust BackgroundTransparency of the circle Frame based on the UIStroke Transparency
		toolCircle.Background.Out.BackgroundTransparency = isEquipped and 0.7 or 0.7
		
		handleStackingUI(toolCircle, tool)
	end
end



local function create(tool)
	
	local nextIndex = (#items == 10) and 0 or #items
	local isVisible = (maxOnHotbar == 10) and (nextIndex <= 9 and true or false) or ((nextIndex ~= 0 and nextIndex <= maxOnHotbar) and true or false)

	local toolCircle = Template:Clone()
	
	toolCircle.LayoutOrder = #items
	toolCircle.Name = #items
	toolCircle.Size = UDim2.new(0.071, 0,0.752, 0)
	toolCircle.Visible = isVisible
	toolCircle.Image.Image = tool.TextureId
	toolCircle.Index.Text = nextIndex
	toolCircle.Stacks.Text = ""1""
	toolCircle.FixedName.Text = tool.TextureId == """" and tool.Name or """"
	toolCircle.Parent = Frame.Contents

	if tool.Name == ""Bat"" or tool.Name == ""WoodenSword"" or tool.Name == ""Dark Sword"" or tool.Name == ""Demon Sword"" or tool.Name == ""Rainbow Sword"" then
		toolCircle.Stacks.Text = """"
	elseif tool.Name == ""ClassicSword"" or tool.Name == ""Crowbar"" or tool.Name == ""Metal Bat"" or tool.Name == ""DeluxeBat"" or tool.Name == ""PlusBat"" then
		toolCircle.Stacks.Text = """"
	elseif tool.Name == ""GoldBat"" or tool.Name == ""RobuxBat"" or tool.Name == ""Spiked Club"" or tool.Name == ""Light Saber"" or tool.Name == ""Flashlight"" then
		toolCircle.Stacks.Text = """"
	elseif tool.Name == ""Plank"" then
		toolCircle.Stacks.Text = """"
	end

	toolCircle.Image.MouseButton1Click:Connect(function()
		local index = string.gmatch(toolCircle.Name,""%d+"")
		index = tonumber(index())
		tool = items[index]
		handleEquip(tool)
	end)

	checkHotbar()
	
end

local function updateAdd(tool)
	if not tool:IsA(""Tool"") then
		return
	end

	checkHotbar()

	if table.find(items, tool) then
		return
	end

	table.insert(items, tool)

	create(tool)
end

local function updateRemove(tool)
	if not tool:IsA(""Tool"") then
		return
	end

	if tool.Parent == Character or tool.Parent == Backpack then
		return
	end

	if table.find(items, tool) then
		local index = table.find(items, tool)
		local toolCircle = Frame.Contents:FindFirstChild(index)

		if toolCircle then
			toolCircle:Destroy()
		end

		table.remove(items, index)
		checkHotbar(index)
	end
end

while true do
	local success, err = pcall(function()
		StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)
	end)
	if success then
		break
	end
	wait()
end

if maxOnHotbar > 10 then
	maxOnHotbar = 10
end

Template.Visible = true
Template.Parent = nil

for _, tool in pairs(Backpack:GetChildren()) do
	updateAdd(tool)
end
Backpack.ChildAdded:Connect(updateAdd)
Backpack.ChildRemoved:Connect(updateRemove)

Character.ChildAdded:Connect(updateAdd)
Character.ChildRemoved:Connect(updateRemove)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then
		return
	end

	if KEY_DICTIONARY[input.KeyCode.Name] then
		local index = KEY_DICTIONARY[input.KeyCode.Name]

		if items[index] then
			handleEquip(items[index])
		end
	end
end)
"
vJFn4r0a,mineCertus,yelby,Lua,Friday 12th of April 2024 01:08:49 PM CDT,"function turnDirection(direction)
  if direction == ""l"" then
    turtle.turnLeft()
  end
  if direction == ""r"" then
    turtle.turnRight()
  end
end

function digIt(has_block, dataName, direction)
  if has_block and dataName == ""ae2:quartz_cluster"" then
    print(""Digging ""..direction)
    if direction == ""Up"" then
      turtle.digUp()
    elseif direction == ""Down"" then
      turtle.digDown()
    elseif direction == ""Forward"" then
      turtle.dig()
    end
    os.sleep(1)
  end
end

while (true) do
  local has_block, data = """"
  has_block, data = turtle.inspect()
  digIt(has_block, data.name, ""Forward"")
  has_block, data = turtle.inspectUp()
  digIt(has_block, data.name, ""Up"")
  has_block, data = turtle.inspectDown()
  digIt(has_block, data.name, ""Down"")
end

"
QgkENm4p,maybe puvodni,max2201111,Python,Friday 12th of April 2024 12:53:24 PM CDT,"import chess

def simplify_fen_string(fen):
    """"""Simplify the FEN string to just include the position of pieces without turn, castling, etc.""""""
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4])
    return simplified_fen

def evaluate_position(board):
    """"""Evaluate the board position to determine if it's a checkmate, stalemate, or ongoing game.""""""
    if board.is_checkmate():
        # Determine who is in checkmate
        if board.turn == chess.WHITE:
            return -1000  # White is checkmated, black wins
        else:
            return 1000   # Black is checkmated, white wins
    elif board.is_stalemate() or board.is_insufficient_material() or board.can_claim_draw():
        return 0  # Game is a draw
    return None  # Game is still ongoing

def create_AR_entry(fen, result, parent):
    """"""Create an entry for the analysis record (AR).""""""
    return {
        'fen': fen,
        'parent': parent,
        'children': [],
        'result': result,
        'sequence': []
    }

def generate_positions(board, AR, parent_fen):
    """"""Generate all possible game positions from the current board state.""""""
    current_fen = board.fen()
    if len(AR) % 100000 == 0:
        print(len(AR))
    if current_fen in AR:
        return  # Avoid processing the same position twice

    result = evaluate_position(board)
    AR[current_fen] = create_AR_entry(simplify_fen_string(current_fen), result, parent_fen)

    if parent_fen:
        AR[parent_fen]['children'].append(current_fen)

    if result is not None:
        return  # Stop further generation if the game has ended

    for move in board.legal_moves:
        board.push(move)
        generate_positions(board, AR, current_fen)
        board.pop()

def back_propagation(AR):
    """"""Propagate the results from the leaf nodes to the root based on the analysis record.""""""
    for fen in AR:
        node = AR[fen]
        if node['result'] is not None and node['parent']:
            propagate_upwards(AR, fen)

def propagate_upwards(AR, child_fen):
    """"""Recursively update parent nodes based on the results of child nodes.""""""
    child_node = AR[child_fen]
    parent_fen = child_node['parent']

    if AR[initial_fen]['result'] is not None:
        return
    
    while parent_fen:
        parent_node = AR[parent_fen]
        if parent_node['result'] is None or abs(child_node['result']) < abs(parent_node['result']):
            parent_node['result'] = -child_node['result']
            parent_node['sequence'] = [child_fen] + child_node['sequence']
        child_fen = parent_fen
        child_node = parent_node
        parent_fen = child_node['parent']

def main():
    initial_fen = ""8/8/8/8/3Q4/5K2/8/4k3 w - - 0 1""
    board = chess.Board(initial_fen)
    AR = {}
    generate_positions(board, AR, None)
    back_propagation(AR)

    # Output results
    initial_entry = AR[initial_fen]
    print(f""Result for initial position: {initial_entry['result']}"")
    print(""Optimal sequence of moves:"")
    for fen in initial_entry['sequence']:
        print(chess.Board(fen))
        print()

main()"
Kx7rC3xT,StackHotBar System,Sungmingamerpro13,CSS,Friday 12th of April 2024 12:52:01 PM CDT,"-- [ SETTINGS ] --

local backgroundColor = Color3.fromRGB(0, 132, 255) -- The color of each circle
local maxOnHotbar = 10 -- How many tools can be displayed. Setting this to more than 10 reverts to 10

-- [ END SETTINGS ] --

-- Don't edit if you don't know what you're doing --

local Players = game:GetService(""Players"")
local StarterGui = game:GetService(""StarterGui"")
local UserInputService = game:GetService(""UserInputService"")
local TweenService = game:GetService(""TweenService"")
local player = Players.LocalPlayer
local Backpack = player.Backpack
local Character = player.Character
local Frame = script.Parent.Frame
local Template = Frame.Contents.objTemplate

local COLOR_DARKER = 0.65
local KEY_DICTIONARY = { Zero = 10, One = 1, Two = 2, Three = 3, Four = 4, Five = 5, Six = 6, Seven = 7, Eight = 8, Nine = 9 }
local EQUIP_TWEENINFO = TweenInfo.new(0.25, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
local items = {}
local tweens = {}
local stackedItems = {}

local function handleStackingUI(toolCircle, tool)
	if tool:WaitForChild(""stacks"").Value then
		tool.stacks:GetPropertyChangedSignal('Value'):Connect(function()
			toolCircle.Stacks.Text = tool.stacks.Value
		end)
		toolCircle.Stacks.Text = tool.stacks.Value
	end
end

local function handleEquip(tool)
	if tool.Parent == nil or tool.Parent == Backpack then
		Character.Humanoid:EquipTool(tool)
	elseif tool.Parent == Character then
		Character.Humanoid:UnequipTools()
	end
end


local function checkHotbar(removeIndex)
	if removeIndex then
		for _, toolCircle in pairs(Frame.Contents:GetChildren()) do
			if toolCircle:IsA(""GuiObject"") then
				local circleName = tonumber(toolCircle.Name)
				if circleName and circleName >= removeIndex then
					local newIndex = (circleName == 11) and 0 or circleName - 1
					local isVisible = (maxOnHotbar == 10) and (newIndex <= 9 and true or false) or ((newIndex ~= 0 and newIndex <= maxOnHotbar) and true or false)

					toolCircle.LayoutOrder -= 1
					toolCircle.Name = tostring(newIndex)
					toolCircle.Visible = isVisible
					toolCircle.Index.Text = tostring(newIndex)
				end
			end
		end
	end

	local additionalIndex = Frame.AdditionalIndex
	additionalIndex.Size = UDim2.new(0, Frame.Contents.UIListLayout.AbsoluteContentSize.X + Frame.Contents.AbsoluteSize.Y + 15, 0, 25)
	additionalIndex.Text = ""+"" .. (#items - maxOnHotbar)
	additionalIndex.Visible = (#items > maxOnHotbar)

	for index, tool in ipairs(items) do
		local toolCircle = Frame.Contents:FindFirstChild(index)
		local isEquipped = (tool.Parent == Character)

		if not toolCircle then
			return
		end

		if tweens[toolCircle] then
			tweens[toolCircle]:Cancel()
			tweens[toolCircle] = nil
		end

		-- Adjust UIStroke Transparency based on whether the tool is equipped or not
		toolCircle.Background.Out.UIStroke.Transparency = isEquipped and 0 or 1
		-- Adjust BackgroundTransparency of the circle Frame based on the UIStroke Transparency
		toolCircle.Background.Out.BackgroundTransparency = isEquipped and 0.7 or 0.7
		
		handleStackingUI(toolCircle, tool)
	end
end



local function create(tool)
	
	local nextIndex = (#items == 10) and 0 or #items
	local isVisible = (maxOnHotbar == 10) and (nextIndex <= 9 and true or false) or ((nextIndex ~= 0 and nextIndex <= maxOnHotbar) and true or false)

	local toolCircle = Template:Clone()
	
	toolCircle.LayoutOrder = #items
	toolCircle.Name = #items
	toolCircle.Size = UDim2.new(0.071, 0,0.739, 0)
	toolCircle.Visible = isVisible
	toolCircle.Image.Image = tool.TextureId
	toolCircle.Index.Text = nextIndex
	toolCircle.Stacks.Text = ""1""
	toolCircle.FixedName.Text = tool.TextureId == """" and tool.Name or """"
	toolCircle.Parent = Frame.Contents

	if tool.Name == ""Bat"" or tool.Name == ""WoodenSword"" or tool.Name == ""Dark Sword"" or tool.Name == ""Demon Sword"" or tool.Name == ""Rainbow Sword"" then
		toolCircle.Stacks.Text = """"
	elseif tool.Name == ""ClassicSword"" or tool.Name == ""Crowbar"" or tool.Name == ""Metal Bat"" or tool.Name == ""DeluxeBat"" or tool.Name == ""PlusBat"" then
		toolCircle.Stacks.Text = """"
	elseif tool.Name == ""GoldBat"" or tool.Name == ""RobuxBat"" or tool.Name == ""Spiked Club"" or tool.Name == ""Light Saber"" or tool.Name == ""Flashlight"" then
		toolCircle.Stacks.Text = """"
	elseif tool.Name == ""Plank"" then
		toolCircle.Stacks.Text = """"
	end

	toolCircle.Image.MouseButton1Click:Connect(function()
		local index = string.gmatch(toolCircle.Name,""%d+"")
		index = tonumber(index())
		tool = items[index]
		handleEquip(tool)
	end)

	checkHotbar()
	
end

local function updateAdd(tool)
	if not tool:IsA(""Tool"") then
		return
	end

	checkHotbar()

	if table.find(items, tool) then
		return
	end

	table.insert(items, tool)

	create(tool)
end

local function updateRemove(tool)
	if not tool:IsA(""Tool"") then
		return
	end

	if tool.Parent == Character or tool.Parent == Backpack then
		return
	end

	if table.find(items, tool) then
		local index = table.find(items, tool)
		local toolCircle = Frame.Contents:FindFirstChild(index)

		if toolCircle then
			toolCircle:Destroy()
		end

		table.remove(items, index)
		checkHotbar(index)
	end
end

while true do
	local success, err = pcall(function()
		StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)
	end)
	if success then
		break
	end
	wait()
end

if maxOnHotbar > 10 then
	maxOnHotbar = 10
end

Template.Visible = true
Template.Parent = nil

for _, tool in pairs(Backpack:GetChildren()) do
	updateAdd(tool)
end
Backpack.ChildAdded:Connect(updateAdd)
Backpack.ChildRemoved:Connect(updateRemove)

Character.ChildAdded:Connect(updateAdd)
Character.ChildRemoved:Connect(updateRemove)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then
		return
	end

	if KEY_DICTIONARY[input.KeyCode.Name] then
		local index = KEY_DICTIONARY[input.KeyCode.Name]

		if items[index] then
			handleEquip(items[index])
		end
	end
end)"
qpCsTKAQ,maybe,max2201111,Python,Friday 12th of April 2024 12:51:42 PM CDT,"import chess

def simplify_fen_string(fen):
    """"""Simplify the FEN string to just include the position of pieces without turn, castling, etc.""""""
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4])
    return simplified_fen

def evaluate_position(board):
    """"""Evaluate the board position to determine if it's a checkmate, stalemate, or ongoing game.""""""
    if board.is_checkmate():
        if board.turn == chess.WHITE:
            return -1000  # White is checkmated, black wins
        else:
            return 1000   # Black is checkmated, white wins
    elif board.is_stalemate() or board.is_insufficient_material() or board.can_claim_draw():
        return 0  # Game is a draw
    return None  # Game is still ongoing

def create_AR_entry(fen, result, parent):
    """"""Create an entry for the analysis record (AR).""""""
    return {
        'fen': fen,
        'parent': parent,
        'children': [],
        'result': result,
        'sequence': []
    }

def generate_positions(board, AR, parent_fen):
    """"""Generate all possible game positions from the current board state.""""""
    current_fen = board.fen()
    if len(AR) % 100000 == 0:
        print(len(AR))
  
    if current_fen in AR:
        return  # Avoid processing the same position twice

    result = evaluate_position(board)
    AR[current_fen] = create_AR_entry(simplify_fen_string(current_fen), result, parent_fen)

    if parent_fen:
        AR[parent_fen]['children'].append(current_fen)

    if result is not None:
        return  # Stop further generation if the game has ended

    for move in board.legal_moves:
        board.push(move)
        generate_positions(board, AR, current_fen)
        board.pop()

def propagate_upwards(AR, child_fen):
    """"""Recursively update parent nodes based on the results of child nodes.""""""
    child_node = AR[child_fen]
    parent_fen = child_node['parent']

    while parent_fen:
        parent_node = AR[parent_fen]
        if parent_node['result'] is None or abs(child_node['result']) < abs(parent_node['result']):
            parent_node['result'] = -child_node['result']
            parent_node['sequence'] = [child_fen] + child_node['sequence']
        child_fen = parent_fen
        child_node = parent_node
        parent_fen = child_node['parent']

def back_propagation(AR):
    """"""Propagate the results from the leaf nodes to the root based on the analysis record.""""""
    for fen in AR:
        node = AR[fen]
        if node['result'] is not None and node['parent']:
            propagate_upwards(AR, fen)

def main():
    initial_fen = ""8/8/8/8/3Q4/5K2/8/4k3 w - - 0 1""
    board = chess.Board(initial_fen)
    AR = {}
    generate_positions(board, AR, None)
    back_propagation(AR)

    # Output results
    initial_entry = AR[initial_fen]
    print(f""Result for initial position: {initial_entry['result']}"")
    print(""Optimal sequence of moves:"")
    for fen in initial_entry['sequence']:
        print(chess.Board(fen))
        print()

main()
"
QbQWD8wy,Untitled,mark-naylor-1701,Lisp,Friday 12th of April 2024 12:31:58 PM CDT,"(defun cc/describe-function-point-is-in-no-mark ()
  ""Describe enclosing Elisp function at point.
\nInvoke `describe-function' on the enclosing Elisp function the point is in.""
  (interactive)
  (save-excursion
    (beginning-of-defun)
    (forward-char)
    (forward-sexp 2)
    (let ((end-point (point)))
      (backward-sexp)
      (let* ((fn-name (buffer-substring (point) end-point))
             (interned (intern-soft fn-name)))
        (if interned
         (describe-function interned))))))
"
BRJcPmHY,Untitled,nshelper,PHP,Friday 12th of April 2024 12:23:55 PM CDT,"<?php

    add_filter('wp-hide/mod_rewrite_rules', 'wp_hide__replace_rewrite_line', 999, 2);
    function wp_hide__replace_rewrite_line( $rules, $server_software )
        {
            
            if  ( $server_software !=   'apache' )
                return $rules;
                
            
            $rules  =   '#Pass-through if another rewrite rule has been previouslly applied'    .
                        ""\n""    .   'RewriteCond %{ENV:REDIRECT_STATUS} 200'    .
                        ""\n""    .   'RewriteRule ^ - [L]' . 
                        ""\n\n""  .   $rules;
            
            //replace all END flags with L
            $rules  =   str_replace( 'RewriteRule ^ - [L]', '#RewriteRule ^ - [L]', $rules );
            
            return $rules;
            
        }
"
quaaqKp6,nostr dm visualizer,1440000bytes,Python,Friday 12th of April 2024 11:41:34 AM CDT,"import time
import random
from nostr.filter import Filter, Filters
from nostr.event import Event, EventKind
from nostr.relay_manager import RelayManager
from nostr.message_type import ClientMessageType
from nostr.key import PrivateKey
import turtle

def draw_square(x, y, color, size, label=None):
    turtle.penup()
    turtle.goto(x - size / 2, y - size / 2)
    turtle.color(color)
    turtle.begin_fill()
    for _ in range(4):
        turtle.forward(size)
        turtle.left(90)
    turtle.end_fill()
    if label:
        short_label = label[:3] + ""..."" + label[-3:]
        turtle.color(""black"")  
        turtle.goto(x, y - size // 2 - 10)
        turtle.write(short_label, align=""center"", font=(""Arial"", 12, ""normal""))

def draw_line(x1, y1, x2, y2):
    turtle.penup()
    turtle.goto(x1, y1)
    turtle.color(""black"")
    turtle.pendown()
    turtle.goto(x2, y2)
    turtle.penup()

public_key = input(""Enter the public key: "")

filters = Filters([Filter(pubkey_refs=[public_key], kinds=[4])])
subscription_id = ""nip4_graph""
request = [ClientMessageType.REQUEST, subscription_id]
request.extend(filters.to_json_array())

relay_manager = RelayManager()
relay_manager.add_relay(""wss://nostr.fmt.wiz.biz/"")
relay_manager.add_subscription_on_all_relays(subscription_id, filters)
time.sleep(1.25) 

turtle.setup(width=800, height=600)
turtle.bgcolor(""white"")

recipient_size = 50
draw_square(0, 0, ""blue"", recipient_size)

senders = {}
sender_offset = 300

while relay_manager.message_pool.has_events():
    event_msg = relay_manager.message_pool.get_event()
    sender_key = event_msg.event.public_key

    if sender_key not in senders:
        x = random.randint(-300, 300)
        y = random.randint(-200, 200)
        senders[sender_key] = (x, y)

        draw_square(x, y, ""red"", 30, sender_key)

    draw_line(senders[sender_key][0], senders[sender_key][1], 0, 0)

turtle.done()

relay_manager.close_subscription_on_all_relays(subscription_id)
relay_manager.close_all_relay_connections()
"
Ryn8XJiz,Untitled,MeehoweCK,C++,Friday 12th of April 2024 11:28:53 AM CDT,"#include <iostream>
#include <cstdlib>
#include <ctime>

int main() {
	srand(time(nullptr));
	auto liczba{ 1.0 * rand() / RAND_MAX };		// liczba losowa rzeczywista z przedziału od 0 do 1
	std::cout << liczba << std::endl;

	auto liczba2{ 10.0 * rand() / RAND_MAX };	// liczba losowa rzeczywista z przedziału od 0 do 10
	std::cout << liczba2 << std::endl;

	auto liczba3{ 10.0 + 5.0 * rand() / RAND_MAX };	// liczba losowa rzeczywista z przedziału od 10 do 15
	std::cout << liczba3 << std::endl;
	return 0;
}"
XrTyPmGD,Untitled,AlexG2230954,Python,Friday 12th of April 2024 11:27:50 AM CDT,"def reverse_rows(n):
    for i in range(n // 2):
        for j in range(n):
            yield (i, j), (n - 1 - i, j)


def print_matrix(m):
    for row in m:
        print(row)


def apply_swaps(matrix, swaps) -> None:
    for (i1, j1), (i2, j2) in swaps:
        matrix[i1][j1], matrix[i2][j2] = matrix[i2][j2], matrix[i1][j1]


def test_works():
    A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    print_matrix(A)
    print()
    apply_swaps(A, reverse_rows(3))
    print_matrix(A)


def main():
    n = int(input('n: '))
    for t1, t2 in reverse_rows(n):
        print(*t1, *t2)


main()"
kYWHQugZ,Untitled,dominus,Diff,Friday 12th of April 2024 11:18:54 AM CDT,"diff --git a/gamewin.cc b/gamewin.cc
index 15df83838..4c8c92333 100644
--- a/gamewin.cc
+++ b/gamewin.cc
@@ -173,111 +173,94 @@ void Background_noise::handle_event(unsigned long curtime, uintptr udata) {
 	} else if (weather == 1) {
 		currentstate = SnowStorm;
 	} else if (nighttime) {
-		currentstate = Nighttime;    // Night time
+		currentstate = Nighttime;
 	} else {
 		currentstate = Outside;
 	}
 
 	MyMidiPlayer* player = Audio::get_ptr()->get_midi();
-	// Lets allow this for Digital Muisc and MT32Emu only,
-	// for MT32/FakeMT32 conversion as well.
-	// if (player) {
-	// if (player && player->get_ogg_enabled()){
-	if (player
-		&& (player->get_ogg_enabled() || player->is_mt32()
-			|| player->is_adlib())) {
-		delay = 1000;    // Quickly get back to this function check
-		// We've got OGG so play the background SFX tracks
+	// The sfx tracks only play for Digital Music, MT32emu, MT32/FakeMT32
+	// FMOpl is not sounding acceptable.
+	const bool    play_bg_tracks = player && (player->get_ogg_enabled() || player->is_mt32());
 
+	if (player || play_bg_tracks) {
+		delay = 1000;    // Quickly get back to this function check
 		const int curr_track = player->get_current_track();
-
-		// Testing. Original seems to allow crickets for all songs at night,
-		// except when in a dungeon. Also, only do it sometimes.
-		if (nighttime && currentstate != Dungeon && rand() % 6 == 0) {
-			// Play the cricket sounds at night
-			Audio::get_ptr()->play_sound_effect(
-					Audio::game_sfx(61), AUDIO_MAX_VOLUME - 30);
-		}
-
 		if ((curr_track == -1 || laststate != currentstate)
 			&& Audio::get_ptr()->is_music_enabled()) {
-			// Don't override bee cave music with dungeon music.
-			const bool notbees = !GAME_BG || curr_track != 54;
 			// ++++ TODO: Need to come up with a way to replace repeating songs
 			// here, just so they don't loop forever.
 			// Conditions: not playing music, playing a background music
 			if (curr_track == -1 || gwin->is_bg_track(curr_track)
-				|| (((currentstate == Dungeon && notbees)
-					 || currentstate == DangerNear)
+				|| (((currentstate == Dungeon)
+					|| currentstate == DangerNear)
 					&& !is_combat_music(curr_track))) {
-				// Not already playing music
 				int tracknum = 255;
-
 				// Get the relevant track number.
 				if (nearby_hostile && !gwin->in_combat()) {
 					tracknum  = Audio::game_music(10);
 					laststate = DangerNear;
 				} else if (gwin->is_in_dungeon()) {
-					// Start the SFX music track then
-					tracknum  = Audio::game_music(52);
+					if (play_bg_tracks)
+						tracknum  = Audio::game_music(52);
 					laststate = Dungeon;
 				} else if (weather == 1) {    // Snowstorm
-					tracknum  = Audio::game_music(5);
+					if (play_bg_tracks)
+						tracknum  = Audio::game_music(5);
 					laststate = SnowStorm;
 				} else if (weather == 2) {    // Rainstorm
-					tracknum  = Audio::game_music(4);
+					if (play_bg_tracks)
+						tracknum  = Audio::game_music(4);
 					laststate = RainStorm;
-				} else if (bghour < 6 || bghour > 20) {
-					tracknum  = Audio::game_music(7);
+				} else if (nighttime) {
+					// Disabled nighttime sfx track as it is very distracting
+					/*if (play_bg_tracks)
+						tracknum  = Audio::game_music(7);*/
 					laststate = Nighttime;
 				} else {
-					// Start the SFX music track then
-					tracknum  = Audio::game_music(6);
+					if (play_bg_tracks)
+						tracknum  = Audio::game_music(6);
 					laststate = Outside;
 				}
 				Audio::get_ptr()->start_music(tracknum, true);
 			}
 		}
-	} else {
-		Main_actor* ava = gwin->get_main_actor();
-		// Tests to see if track is playing the SFX tracks, possible
-		// when the game has been restored
-		// and the Audio option was changed from OGG to something else
-		if (player && player->get_current_track() >= Audio::game_music(4)
-			&& player->get_current_track() <= Audio::game_music(8)) {
-			player->stop_music();
-		}
-
-		// Not OGG so play the SFX sounds manually
-		//  Only if outside.
-		if (ava && !gwin->is_main_actor_inside() &&
-			// +++++SI SFX's don't sound right.
-			Game::get_game_type() == BLACK_GATE) {
-			int                        sound;    // BG SFX #.
-			static const unsigned char bgnight[] = {61, 61, 255};
-			static const unsigned char bgday[]   = {82, 85, 85};
-			if (repeats > 0) {    // Repeating?
-				sound = last_sound;
-			} else {
-				const int hour = gwin->get_clock()->get_hour();
-				if (hour < 6 || hour > 20) {
-					sound = bgnight[rand() % sizeof(bgnight)];
-				} else {
-					sound = bgday[rand() % sizeof(bgday)];
-				}
-				// Translate BG to SI #'s.
-				sound      = Audio::game_sfx(sound);
-				last_sound = sound;
-			}
-			Audio::get_ptr()->play_sound_effect(sound);
-			repeats++;    // Count it.
-			if (rand() % (repeats + 1) == 0) {
-				// Repeat.
-				delay = 500 + rand() % 1000;
-			} else {
-				delay   = 4000 + rand() % 3000;
-				repeats = 0;
+	}
+
+	// Tests to see if day sfx track is playing, possible
+	// when the game has been restored
+	// and the Audio option was changed from OGG/MT32 to something else
+	// If nighttime sfx track is uncommented, also query whether track 7 plays 
+	if (player && !play_bg_tracks && player->get_current_track() == 6) {
+		player->stop_music();
+	}
+	Main_actor* ava = gwin->get_main_actor();
+	// Testing. When outside play birds during daytime or crickets at night
+	if (ava && !gwin->is_main_actor_inside() && currentstate != Dungeon) {
+		int                        sound;    // SFX #.
+		int                       volume;    // keep the volume down.
+		static const unsigned char bgnight[] = {61, 61, 255};
+		static const unsigned char bgday[]   = {82, 85, 85};
+		if (repeats > 0) {    // Repeating?
+			sound = last_sound;
+		} else {
+			if (nighttime) {
+				sound = bgnight[rand() % sizeof(bgnight)];
+			// only play daytime sfx when no music track is playing
+			} else if (!play_bg_tracks && player->get_current_track() == -1) {
+				sound = bgday[rand() % sizeof(bgday)];
 			}
+			last_sound = sound;
+		}
+		Audio::get_ptr()->play_sound_effect(
+				Audio::game_sfx(sound), AUDIO_MAX_VOLUME - 200);
+		repeats++;    // Count it.
+		if (rand() % (repeats + 1) == 0) {
+			// Repeat.
+			delay = 500 + rand() % 1000;
+		} else {
+			delay   = 4000 + rand() % 3000;
+			repeats = 0;
 		}
 	}
 
"
pZ5T5rxF,Untitled,MeehoweCK,C++,Friday 12th of April 2024 11:15:15 AM CDT,"#include <iostream>
#include <cstdlib>				// biblioteka zawierająca funkcję rand()
#include <ctime>				// biblioteka zawierająca funkcję time()

int losujZprzedzialu(int min, int max) {
	return (min + rand() % (max - min + 1));		// 1 + rand() % (100 - 1 + 1) == 1 + rand() % 100
}

int main() {
	srand(time(nullptr));				// ustawienie parametru losowania
	auto liczba{ rand() };		// rand() zwraca pseudolosową liczbę całkowitą z przedziału od 0 do 32'767
	std::cout << liczba << std::endl;
	std::cout << RAND_MAX << std::endl;

	auto liczba2{ rand() % 10 };		// liczba naturalna pseudolosowa z przedziału od 0 do 9
	std::cout << liczba2 << std::endl;

	auto liczba3{ 1 + rand() % 100 };	// liczba naturalna pseudolosowa z przedziału od 1 do 100
	std::cout << liczba3 << std::endl;

	auto liczba4{ losujZprzedzialu(20, 75) };
	std::cout << liczba4 << std::endl;
	return 0;
}"
xKDjNj8V,Untitled,Josif_tepe,C++,Friday 12th of April 2024 11:03:00 AM CDT,"#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;


int main()
{
    int n;
    cin >> n;


   vector<int> v;
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;
        v.push_back(x);
    }
    int brojac=0;
    int cifri =0;
   for(int i=0;n>i;i++){


   int x=v[i];
    int even =1;
    int golemina=0;
    while(x>0) {
        int cifra=x%10;
        if(cifra %2==1){


           even=0;
        }
         golemina++;


       x/=10;


   }


  if(even==1) {


   brojac++;
    cifri+=golemina;


   }


  }
cout<<brojac<<endl<<cifri<<endl;


}"
uzKjxErq,Bookmark,KillerRebooted,Python,Friday 12th of April 2024 10:38:43 AM CDT,"import requests

def get_book_details(search):

    def get_details(response):

        try:
            response[""items""]
        except:
            return get_details(requests.get(f""https://www.googleapis.com/books/v1/volumes?q={search.replace("" "", ""+"")}"").json())

        titles = [book[""volumeInfo""][""title""] for book in response[""items""]]
        ids = [book[""id""] for book in response[""items""]]
        authors = [book[""volumeInfo""][""authors""] if ""authors"" in book[""volumeInfo""] else """" for book in response[""items""]]
        publishers = [book[""volumeInfo""][""publisher""] if ""publisher"" in book[""volumeInfo""] else """" for book in response[""items""]]
        publish_dates = [book[""volumeInfo""][""publishedDate""] if ""publishedDate"" in book[""volumeInfo""] else """" for book in response[""items""]]
        descriptions = [book[""volumeInfo""][""description""] if ""description"" in book[""volumeInfo""] else """" for book in response[""items""]]

        isbn10 = []
        isbn13 = []

        for i in response[""items""]:
            isbn10_value = """"
            isbn13_value = """"
            try:
                for j in i[""volumeInfo""][""industryIdentifiers""]:
                    if j[""type""] == ""ISBN_10"":
                        isbn10_value = j[""identifier""]
                    if j[""type""] == ""ISBN_13"":
                        isbn13_value = j[""identifier""]

            except:
                pass
            
            isbn10.append(isbn10_value)
            isbn13.append(isbn13_value)

        page_counts = [book[""volumeInfo""][""pageCount""] if ""pageCount"" in book[""volumeInfo""] else """" for book in response[""items""]]
        categories = [book[""volumeInfo""][""categories""] if ""categories"" in book[""volumeInfo""] else """" for book in response[""items""]]
        maturity_ratings = [book[""volumeInfo""][""maturityRating""] for book in response[""items""]]
        thumbnails = [f""https://books.google.com/books/publisher/content/images/frontcover/{i}?fife=w1920-h1080&source=gbs_api"" for i in ids]

        books = []

        for i in range(len(titles)):

            books.append({""title"":titles[i], ""id"":ids[i], ""authors"":"", "".join(authors[i]), ""publisher"":publishers[i], ""publish_date"":publish_dates[i], ""description"":descriptions[i], ""isbn10"":isbn10[i], ""isbn13"":isbn13[i], ""page_count"":page_counts[i], ""categories"":categories[i], ""maturity_rating"":maturity_ratings[i], ""thumbnail"":thumbnails[i]})

        return books

    response = requests.get(f""https://www.googleapis.com/books/v1/volumes?q=isbn:{search}"").json()
    
    return get_details(response)

if __name__ == ""__main__"":
    print(get_book_details(""9781974742943""))
    
    print(get_book_details(""wimpy kid ugly truth""))



































import customtkinter as ctk
from time import sleep
import json, hashlib, os, io, urllib.request, threading, time
from PIL import Image
from ISBN import get_book_details

ctk.set_appearance_mode(""system"")
ctk.set_default_color_theme(""dark-blue"")

win = ctk.CTk(fg_color=""#121212"")
win.title(""Login"")
win.geometry(""0x0"")

def center(win, screen_resolution, animation_time):

        x1, y1 = 0, 0

        while x1 != screen_resolution[0] or y1 != screen_resolution[1]:

            if x1 != screen_resolution[0]: x1 += screen_resolution[0]/(animation_time*10)
            if y1 != screen_resolution[1]: y1 += screen_resolution[1]/(animation_time*10)

            win.geometry(f""{int(x1)}x{int(y1)}"")

            x2 = win.winfo_screenwidth()//2 - win.winfo_width()//2
            y2 = win.winfo_screenheight()//2 - win.winfo_height()//2

            win.geometry(f""+{x2}+{y2}"")

            sleep(0.008)
            win.update()

#Login Functions

def switch_method(button):

    def make_selector(x, length):
        for i in range(1, length):

            text = ""_""*i

            selector.configure(text=text)
            selector.place(x=x)

            sleep(0.04)

            win.update()

    if username.get() != """":
        username.delete(0, ctk.END)
    if password.get() != """":
        password.delete(0, ctk.END)

    try:
        pass_notification.destroy()
    except:
        pass
    
    check_var.set("""")
    show_pass([password])

    if button == ""login"":

        login_page(False)
        make_selector(136, 6)

    else:

        signup_page()
        make_selector(270, 7)

def show_pass(inputs):

    show = check_var.get()

    if show == ""*"":
        check_var.set("""")
        show_password.configure(image=ctk.CTkImage(dark_image=Image.open(f""{data_loc}\\Images\\Eye Show.png""), size=(30,30)))
    else:
        check_var.set(""*"")
        show_password.configure(image=ctk.CTkImage(dark_image=Image.open(f""{data_loc}\\Images\\Eye Hide.png""), size=(30,30)))

    for input in inputs:
        input.configure(show=check_var.get())

def login_page(first_time):

    global frame, selector, username, password, check_var, show_password, login_button

    try:
        confirm_password.destroy()
        signup_button.destroy()
    except:
        try:
            login_button.destroy()
        except:
            pass

    if first_time:

        center(win, (600, 400), 2)

        frame = ctk.CTkFrame(win, fg_color=""#1f1f1f"")
        frame.pack(pady=20, padx=60, fill=""both"", expand=True)

        label = ctk.CTkLabel(frame, text=""BOOKMARK"", text_color=""#bb86fc"", font=(""Roboto"", 24, ""bold""))
        label.pack(pady=12, padx=10)
    
    if first_time:

        selector = ctk.CTkLabel(frame, text=""_____"", text_color=""#bb86fc"", font=(""Roboto"", 24, ""bold""))
        selector.place(x=136, y=55)

    login_switch_method = ctk.CTkButton(frame, text=""LOGIN"", text_color=""#bb86fc"", font=(""Roboto"", 16, ""bold""), fg_color=""#1f1f1f"", hover_color=""#1f1f1f"", cursor=""hand2"", height=0, width=0, command=lambda: switch_method(""login""))
    login_switch_method.place(x=136, y=50)

    sign_up_switch_method = ctk.CTkButton(frame, text=""SIGN UP"", text_color=""#bb86fc"", font=(""Roboto"", 16, ""bold""), fg_color=""#1f1f1f"", hover_color=""#1f1f1f"", cursor=""hand2"", height=0, width=0, command=lambda: switch_method(""sign_up""))
    sign_up_switch_method.place(x=270, y=50)

    if first_time:    
        
        username = ctk.CTkEntry(frame, placeholder_text=""Username"", fg_color=""#1f1f1f"", show="""", height=40, width=200)
        username.pack(pady=(50, 12), padx=10)

        check_var = ctk.StringVar()
        check_var.set(""*"")

        password = ctk.CTkEntry(frame, placeholder_text=""Password"", fg_color=""#1f1f1f"", show=""*"", height=40, width=200)
        password.pack(pady=12, padx=10)

        show_password = ctk.CTkButton(frame, text="""", fg_color=""#1f1f1f"", hover_color=""#191919"", image=ctk.CTkImage(dark_image=Image.open(f""{data_loc}\\Images\\Eye Hide.png""), size=(30,30)), width=30, height=30, command=lambda: show_pass([password]))
        show_password.place(x=345, y=168)

    else:

        show_password.configure(command=lambda: show_pass([password]))

    login_button = ctk.CTkButton(frame, text=""Login"", text_color=""#121212"", fg_color=""#bb86fc"", hover_color=""#5704bc"", font=(""Roboto"", 13, ""bold""), cursor=""hand2"", command=login)
    login_button.pack(pady=12, padx=10)

    win.bind(""<Return>"", lambda event: login())

def signup_page():

    global confirm_password, signup_button

    try:
        login_button.destroy()
    except:
        try:
            confirm_password.destroy()
            signup_button.destroy()
        except:
            pass

    confirm_password = ctk.CTkEntry(frame, placeholder_text=""Confirm Password"", fg_color=""#1f1f1f"", show=""*"", height=40, width=200)
    confirm_password.pack(pady=12, padx=10)

    show_password.configure(command=lambda: show_pass([password, confirm_password]))

    signup_button = ctk.CTkButton(frame, text=""Sign Up"", text_color=""#121212"", fg_color=""#bb86fc"", hover_color=""#5704bc"", font=(""Roboto"", 13, ""bold""), cursor=""hand2"", command=sign_up)
    signup_button.pack(pady=12, padx=10)

    win.bind(""<Return>"", lambda event: sign_up())

def login():

    global pass_notification

    try:

        with open(database_loc, ""r"") as f:

            database = json.load(f)

    except:

        database = """"

    if (username.get() != """") and (password.get() != """"):

        user = hashlib.sha256(username.get().encode()).hexdigest()
        passw = hashlib.sha256(password.get().encode()).hexdigest()

        if (user in database) and (database[user] == passw): text = ""Login Successful!""; color = ""green""; x = 90
        else: text = ""Username or Password is incorrect.""; color = ""red""; x = 92

        pass_notification = ctk.CTkLabel(frame, text=text, font=(""Roboto"", 10, ""bold""), text_color=color, height=0, width=300)
        pass_notification.place(x=x, y=212)

        frame.after(5000, pass_notification.destroy)

        if text == ""Login Successful!"":
            book_collection()

    else:

        if username.get() == """": text = ""You have a Username right?""; x = 92
        else: text = ""I believe you forgot the Password""; x = 91

        pass_notification = ctk.CTkLabel(frame, text=text, font=(""Roboto"", 10, ""bold""), text_color=""red"", height=0, width=300)
        pass_notification.place(x=x, y=212)

        frame.after(5000, pass_notification.destroy)

def sign_up(username_taken = False):
    
    global pass_notification
    
    if (password.get() == confirm_password.get()) and (password.get() != """" and confirm_password.get() != """" and username.get() != """") and (not username_taken):

        user = hashlib.sha256(username.get().encode()).hexdigest()
        passw = hashlib.sha256(password.get().encode()).hexdigest()

        if not os.path.exists(database_loc): 
            
            with open(database_loc, 'w+') as f: pass

        with open(database_loc, ""r"") as f:
            
            try: database = json.load(f)
            except: database = """"
        
        if database == """":
            
            dict = {user: passw}

            with open(database_loc, ""w+"") as f: json.dump(dict, f, indent=4)

            pass_notification = ctk.CTkLabel(frame, text=""Registered Successfully"", font=(""Roboto"", 10, ""bold""), text_color=""green"", height=0, width=300)
            pass_notification.place(x=89, y=276)

            frame.after(5000, pass_notification.destroy)

        elif user not in database:

            dict = database
            dict[user] = passw

            with open(database_loc, ""w+"") as f: json.dump(dict, f, indent=4)

            pass_notification = ctk.CTkLabel(frame, text=""Registered Successfully"", font=(""Roboto"", 10, ""bold""), text_color=""green"", height=0, width=300)
            pass_notification.place(x=89, y=276)

            frame.after(5000, pass_notification.destroy)

        else:

            username_taken = True
            sign_up(username_taken)

        if not username_taken:
            if not os.path.exists(f""{data_loc}\\Accounts""):
                os.mkdir(f""{data_loc}\\Accounts"")

            os.mkdir(f""{data_loc}\\Accounts\\{user}"")

    else:

        if username.get() == """": text = ""Don't you need a Username?""; x = 140
        elif (password.get() == """") and (confirm_password.get() == """"): text = ""Trust Me. You need a Password""; x = 140
        elif password.get() != confirm_password.get(): text = ""The Passwords do not Match""; x = 140
        else: text = ""Username is already taken""; x = 140

        pass_notification = ctk.CTkLabel(frame, text=text, font=(""Roboto"", 10, ""bold""), text_color=""red"", height=0, width=200)
        pass_notification.place(x=x, y=276)

        frame.after(5000, pass_notification.destroy)

#Book Collection
        
def book_collection():

    frame.destroy()

    w = win.winfo_screenwidth()
    h = win.winfo_screenheight()

    center(win, (w, h), 2)
    win.attributes('-fullscreen', True)

    page = ctk.CTkFrame(win, fg_color=""#1f1f1f"")
    page.pack(pady=20, padx=60, fill=""both"", expand=True)

    add_btn = ctk.CTkButton(page, text=""+"", text_color=""#121212"", fg_color=""#bb86fc"", hover_color=""#5704bc"", font=(""Roboto"", 45, ""bold""), width=80, height=80, corner_radius=30, command=lambda: add_book(add_btn))
    add_btn.pack(side=ctk.BOTTOM, anchor=""e"", padx=8, pady=8)

def add_book(add_btn):
    global saved_widgets, search_bar

    add_btn.configure(state=""disabled"", fg_color=""#716876"", text_color_disabled=""#666666"")

    w = win.winfo_screenwidth()
    h = win.winfo_screenheight()

    search = ctk.CTkFrame(win, bg_color=""#1f1f1f"", fg_color=""#0f0f0f"", width=0.1*w, height=0.1*h, corner_radius=40)
    search.place(relx=0.5, rely=0.5, anchor=ctk.CENTER)

    size = 0.1
    while size <= 0.8:
        search.configure(width=size*w, height=size*h)
        
        win.update()
        sleep(0.008)

        size += 0.04

    size=0.8
    search.configure(width=size*w, height=size*h)

    search_term = ctk.StringVar()
    search_term.trace_add('write', lambda var, index, mode: run_thread(search, search_term))

    search_bar = ctk.CTkEntry(search, fg_color=""#1f1f1f"", placeholder_text=""Enter ISBN No. or Name of the Book..."", textvariable=search_term, width=800, height=50)
    search_bar.place(relx=0.48, rely=0.1, anchor=ctk.CENTER)
    
    search_button = ctk.CTkButton(search, fg_color=""#2f2f2f"", hover_color=""#1f1f1f"", text="""", image=ctk.CTkImage(dark_image=Image.open(f""{data_loc}\\Images\\Search.png"")), width=50, height=50, command=lambda: run_thread(search=search, isbn=search_bar))
    search_button.place(in_=search_bar, relx=1.04, rely=0.5, anchor=ctk.CENTER)

    saved_widgets = [search_bar, search_button]

def run_thread(search, search_term):

    thread = threading.Thread(target=lambda: update_search(search, search_term))
    thread.start()

kill = False

def kill_recommendation(recommendation, search_term, search_text):
    while True:
        time.sleep(0.1)
        if search_text != search_term.get():
            recommendation.destroy()
            break

def update_search(search, search_term): 
    global threads
    
    search_text = search_term.get()

    time.sleep(0.5)

    if search_term.get() != search_text:
        return

    w = win.winfo_screenwidth()
    h = win.winfo_screenheight()

    recommendations = get_book_details(search_term.get())

    list_of_recommendations = []

    def load_recommendation(book):

        with urllib.request.urlopen(book[""thumbnail""]) as u:
            raw_data = u.read()

        image = Image.open(io.BytesIO(raw_data))
        
        recommendation = ctk.CTkButton(search, image=ctk.CTkImage(dark_image=image, size=(225, 250)), fg_color=""#0f0f0f"", hover_color=""#1f1f1f"", compound=ctk.TOP, text=book[""title""], width=250, height=315, command=lambda book=book: get_book(search, search_term, book))
        recommendation._text_label.configure(wraplength=150)
        thread = threading.Thread(target=lambda: kill_recommendation(recommendation, search_term, search_text))
        thread.start()

        list_of_recommendations.append(recommendation)
        
    threads = []

    for book in recommendations:
        thread = threading.Thread(target=lambda: load_recommendation(book))
        thread.start()

        threads.append(thread)

    while any(thread.is_alive() for thread in threads):
        time.sleep(0.1)

    iteration = 0

    y_level=160
    try:
        for recommendation in list_of_recommendations:

            if iteration % 5 == 0:
                recommendation.place(x=40, y=y_level)
                y_level += recommendation.cget(""height"")+50
            else:
                recommendation.place(in_=prev_recommendation, relx=1.2, rely=0)

            prev_recommendation = recommendation
            iteration += 1
    except:
        pass

def get_book(search, search_term, book):

    search_term.set("""")

    with urllib.request.urlopen(book[""thumbnail""]) as u:
        raw_data = u.read()

    image = Image.open(io.BytesIO(raw_data))

    for widget in search.winfo_children():
        if ""ctklabel"" in str(widget):
            widget.destroy()

    image = ctk.CTkLabel(search, text="""", image=ctk.CTkImage(dark_image=image, size=(275,400)))
    image.place(relx=0.05, rely=0.28)

    book_title = ctk.CTkLabel(search, text=f""Title: {book['title']}"", font=(""Roboto"", 16, ""bold""))
    book_title.place(in_=image, relx=1.2, rely=0.02)

    order = {""authors"":""Author(s)"", ""isbn10"":""ISBN-10"", ""isbn13"":""ISBN-13"", ""publisher"":""Publisher"", ""publish_date"":""Publish Date"", ""page_count"":""Pages"", ""description"":""Description"", ""maturity_rating"":""Maturity Rating""}

    prev_widget = book_title
    for title in order:
        widget = ctk.CTkLabel(search, text=f""{order[title]}: {book[title]}"", font=(""Roboto"", 16, ""bold""), wraplength=search.winfo_width()-440, justify=""left"")
        widget.place(in_=prev_widget, relx=0, rely=1.2)

        prev_widget = widget

def main():

    win.resizable(False, False)
    
    login_page(True)

    win.mainloop()

if __name__ == ""__main__"":

    data_loc = f""{__file__.removesuffix(os.path.basename(__file__))}Data""
    database_loc = f""{data_loc}\\Account Data Base.json""
    
    main()"
S4uQck6R,Untitled,MeehoweCK,C++,Friday 12th of April 2024 10:35:29 AM CDT,"#include <iostream>

using uilong = unsigned long long;

int czyPierwsza(uilong liczba) {
	if (liczba < 2) {
		return 0;
	}
	for (uilong i{ 2 }; i * i <= liczba; ++i) {
		if (liczba % i == 0) {
			return i;
		}
	}
	return 1;
}

uilong nastepnaPierwsza(uilong liczba) {
	do {
		++liczba;
	} while (czyPierwsza(liczba) != 1);
	return liczba;
}

int main() {
	uilong liczba;
	std::cout << ""Podaj liczbe naturalna: "";
	std::cin >> liczba;

	const auto wynik{ czyPierwsza(liczba) };

	if (wynik == 1) {
		std::cout << liczba << "" jest liczba pierwsza.\n"";
	}
	else {
		if (wynik == 0) {
			std::cout << liczba << "" nie jest liczba pierwsza, poniewaz jest mniejsza od 2.\n"";
		}
		else {
			std::cout << liczba << "" nie jest liczba pierwsza, poniewaz dzieli sie przez "" << wynik << "".\n"";
		}
		std::cout << ""Najmniejsza liczba pierwsza wieksza od "" << liczba << "" wynosi "" << nastepnaPierwsza(liczba) << "".\n"";
	}
	return 0;
}"
WfbF2v5g,Untitled,max12354678910,YAML,Friday 12th of April 2024 10:26:14 AM CDT,"                                          
services:
  wireguard:
    image: ""quay.io/linuxserver.io/wireguard:latest""
    container_name: ""wireguard""
    cap_add:
      - ""NET_ADMIN""
    environment:
      - ""PUID=0""
      - ""PGID=0""
      - ""PEERS=1""
      - ""TZ=Etc/Berlin""
      - ""SERVERURL=my_url.example""
      - ""SERVERPORT=51820""
      - ""INTERNAL_SUBNET=10.13.13.0/24""
      - ""ALLOWEDIPS=0.0.0.0/0""
      - ""LOG_CONFS=true""
    volumes:
      - ""wireguard:/config""
    networks:
      wireguard:
        ipv4_address: ""10.13.13.1""
    ports:
      - ""51820:51820/udp""
    sysctls:
      - ""net.ipv4.conf.all.src_valid_mark=1""
    restart: ""unless-stopped""
    labels:
      - ""traefik.enable=false""


  wireguard-ui:
    image: ""docker.io/ngoduykhanh/wireguard-ui:latest""
    container_name: ""wireguard-ui""
    depends_on:
      - ""wireguard""
    cap_add:
      - ""NET_ADMIN""
    environment:
      - ""EMAIL_FROM_ADDRESS=my_url.example""
      - ""SESSION_SECRET_file=/run/secrets/wireguard-ui-session""
      - ""BIND_ADDRESS=0.0.0.0:80""
      - ""WGUI_USERNAME=admin""
      - ""WGUI_PASSWORD_FILE=/run/secrets/wireguard-ui""
      - ""WGUI_MANAGE_START=true""
      - ""WGUI_MANAGE_RESTART=true""
      - ""WGUI_ENPOINT_ADDRESS=my_url.example
      - ""WGUI_DNS=9.9.9.9""
    restart: ""unless-stopped""
    networks:
      - ""traefik""
      - ""wireguard""
    volumes:
      - ""wgui:/app/db""
      - ""wireguard:/etc/wireguard""
    secrets:
      - ""wireguard-ui""
    labels:
      - ""traefik.enable=true""
      - ""traefik.http.routers.wgui.entryPoints=web-secure""
      - ""traefik.http.routers.wgui.rule=Host(`my_url.example)""
      - ""traefik.http.routers.wgui.tls=true""
      - ""traefik.http.routers.wgui.tls.certresolver=letsencrypt""
      - ""traefik.http.services.wgui.loadbalancer.server.port=80""

networks:
  wireguard:
    name: ""wireguard""
    ipam:
      config:
        - subnet: ""10.13.13.0/24""
  traefik:
    external: true

volumes:
  wireguard:
    name: ""wireguard""
  wgui:
    name: ""wireguard-ui""

secrets:
  wireguard-ui:
    external: true
  wireguard-ui-session:
    external: true
"
1y4hBzTx,Untitled,retroman,FreeBasic,Friday 12th of April 2024 10:23:04 AM CDT,"dim mystr as string = ""hello""

dim tmp as string = ""     ""

print mystr

tmp[0] = mystr[4]
tmp[1] = mystr[3]
tmp[2] = mystr[2]
tmp[3] = mystr[1]
tmp[4] = mystr[0]

print tmp

mystr = tmp

print mystr"
4KmxUhZP,СПРИНТ № 7 | Модель памяти в C++ | Урок 3: Указатели. Открываем доступ к памяти 2/2,chevengur,C++,Friday 12th of April 2024 10:16:46 AM CDT,"#include <cassert>
#include <string>
#include <iostream>

using namespace std;

template <typename T>
bool IsSameObject(T& value1, T& value2) {
    if (&value1 == &value2)
        return true;
    return false;
    /*Напишите тело функции самостоятельно */
}

int main() {
    using namespace std;

    const int x = 1;
    const int y = 1;

    //x и y — разные объекты, хоть и имеющие одинаковое значение
    assert(!IsSameObject(x, y));
    // Оба аргумента — один и тот же объект
    assert(IsSameObject(x, x));

    const string name1 = ""Harry""s;
    const string name1_copy = name1;
    const string name2 = ""Ronald""s;
    auto name1_ptr = &name1;
    const string& name1_ref = name1;

    assert(!IsSameObject(name1, name2));  // Две строки с разными значениями — разные объекты
    assert(!IsSameObject(name1, name1_copy));  // Строка и её копия — разные объекты

    // Оба параметра ссылаются на одну и ту же строку
    assert(IsSameObject(name1, name1));
    assert(IsSameObject(name2, name2));
    assert(IsSameObject(name1_copy, name1_copy));

    // Разыменованный указатель на объект и сам объект — один и тот же объект
    assert(IsSameObject(*name1_ptr, name1));

    // Переменная и ссылка на неё относятся к одному и тому же объекту
    assert(IsSameObject(name1_ref, name1));
    // Ссылка на объект и разыменованный указатель на объект относятся к одному и тому же объекту
    assert(IsSameObject(name1_ref, *name1_ptr));
}"
RrEi5mbw,addsambauser,sergio_educacionit,Bash,Friday 12th of April 2024 10:16:22 AM CDT,"#!/bin/bash

/usr/sbin/useradd -s /usr/sbin/nologin -G sambashare -d /home/$1 -m $1
"
gBMzkbHZ,sudoers samba,sergio_educacionit,Bash,Friday 12th of April 2024 10:15:16 AM CDT,"Defaults	env_reset
Defaults	mail_badpass
# Se agrega ':/opt/bin' a la variable 'secure_path'
Defaults secure_path=""/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin""
Defaults	use_pty

# Alias de comandos administrativos de samba
Cmnd_Alias SYSD_NMBD = /usr/bin/systemctl * nmbd*

Cmnd_Alias USRS_NMBD = /opt/bin/addsambauser *, \
/usr/bin/smbpasswd -[ade] *

Cmnd_Alias CONF_NMBD = /usr/bin/nano /etc/samba/smb.conf


root	ALL=(ALL:ALL) ALL

%sudo	ALL=(ALL:ALL) ALL

# grupo de usuarios administradores del servicio samba

%sambaadmin debian=(root:root) SYSD_NMBD, USRS_NMBD, CONF_NMBD


"
cHukdRGW,TimeoutError:,basedcount_bot,Python,Friday 12th of April 2024 09:56:10 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 123, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 331, in _request_with_retries
    return await response.json()
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/client_reqrep.py"", line 1161, in json
    await self.read()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/client_reqrep.py"", line 1101, in read
    self._body = await self.content.read()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/streams.py"", line 373, in read
    block = await self.readany()
            ^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/streams.py"", line 395, in readany
    await self._wait(""readany"")
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/streams.py"", line 301, in _wait
    with self._timer:
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/helpers.py"", line 735, in __exit__
    raise asyncio.TimeoutError from None
TimeoutError
"
4rtpKhry,TimeoutError:,basedcount_bot,Python,Friday 12th of April 2024 09:55:54 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 263, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 331, in _request_with_retries
    return await response.json()
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/client_reqrep.py"", line 1161, in json
    await self.read()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/client_reqrep.py"", line 1101, in read
    self._body = await self.content.read()
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/streams.py"", line 373, in read
    block = await self.readany()
            ^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/streams.py"", line 395, in readany
    await self._wait(""readany"")
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/streams.py"", line 301, in _wait
    with self._timer:
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/aiohttp/helpers.py"", line 735, in __exit__
    raise asyncio.TimeoutError from None
TimeoutError
"
qWwi6jsj,js-competitive-in-out,ozz-life,JavaScript,Friday 12th of April 2024 09:53:38 AM CDT,"#!/usr/bin/env node
'use strict'

process.stdin.resume()
process.stdin.setEncoding('utf-8')

let currentLine = 0
let inputString = ''

process.stdin.on('data', raw_data => {
    inputString += raw_data
})

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(line => {
        return line.trim()
    })
    main()
})

function readLine() {
    return inputString[currentLine++]
}

/*
 * Code Start
 ******************************************************************************/

function main() {
    let [k1, m, k2, p2, n2] = readLine().split("" "").map(Number)
}"
Fwstg2Km,Laborator_AVL_PAA,Bobita,C,Friday 12th of April 2024 09:43:18 AM CDT,"#include <stdio.h>
#include <stdlib.h>

// Structura pentru un nod din arbore
typedef struct Node {
    int key;
    struct Node *left;
    struct Node *right;
    int height;
} Node;

// Functie pentru a determina inaltimea unui nod
int height(Node *N) {
    if (N == NULL)
        return 0;
    return N->height;
}

// Functie pentru a calcula maximul dintre doua numere
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Functie pentru alocarea unui nou nod cu cheia data
Node* newNode(int key) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1;  // Noul nod este initial adaugat la frunza
    return(node);
}

// Rotatie la dreapta
Node *rightRotate(Node *y) {
    Node *x = y->left;
    Node *T2 = x->right;

    // Executa rotatia
    x->right = y;
    y->left = T2;

    // Actualizeaza inaltimile
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    // Returneaza noua radacina
    return x;
}

// Rotatie la stanga
Node *leftRotate(Node *x) {
    Node *y = x->right;
    Node *T2 = y->left;

    // Executa rotatia
    y->left = x;
    x->right = T2;

    // Actualizeaza inaltimile
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    // Returneaza noua radacina
    return y;
}

// Obtine factorul de echilibru al nodului N
int getBalance(Node *N) {
    if (N == NULL)
        return 0;
    return height(N->left) - height(N->right);
}

// Functie recursiva pentru inserarea unei chei in subarborele cu radacina
// la nodul dat si returneaza noua radacina a subarborelui
Node* insert(Node* node, int key) {
    /* 1. Efectuam inserarea normala a unui BST */
    if (node == NULL)
        return(newNode(key));

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else // Chei egale nu sunt permise in arborele AVL
        return node;

    /* 2. Actualizam inaltimea acestui nod stramos */
    node->height = 1 + max(height(node->left), height(node->right));

    /* 3. Obtinem factorul de echilibru al acestui nod stramos
       pentru a verifica daca acest nod a devenit dezechilibrat */
    int balance = getBalance(node);

    // Daca acest nod devine dezechilibrat, atunci exista 4 cazuri

    // Cazul stanga-stanga
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);

    // Cazul dreapta-dreapta
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);

    // Cazul stanga-dreapta
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Cazul dreapta-stanga
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    /* returneaza pointer-ul nodului (nechimbat) */
    return node;
}

// Functia utilitara pentru a gasi nodul cu cea mai mica valoare
// care este mai mare decat nodul dat
Node * minValueNode(Node* node) {
    Node* current = node;

    /* gaseste frunza cea mai din stanga */
    while (current->left != NULL)
        current = current->left;

    return current;
}

// Functie recursiva pentru a sterge un nod cu o cheie data
// din subarborele cu radacina data si returneaza radacina
Node* deleteNode(Node* root, int key) {
    // PASUL 1: EFECTUARE STERGERE NORMALA BST

    if (root == NULL)
        return root;

    // Daca cheia de sters este mai mica decat cheia radacinii,
    // atunci se afla in subarborele stang
    if ( key < root->key )
        root->left = deleteNode(root->left, key);

    // Daca cheia de sters este mai mare decat cheia radacinii,
    // atunci se afla in subarborele drept
    else if( key > root->key )
        root->right = deleteNode(root->right, key);

    // Daca cheia este aceeasi cu cheia radacinii, atunci acesta
    // este nodul care trebuie sters
    else {
        // nod cu unul sau fara copil
        if( (root->left == NULL) || (root->right == NULL) ) {
            Node *temp = root->left ? root->left : root->right;

            // Fara copil
            if (temp == NULL) {
                temp = root;
                root = NULL;
            }
            else // Un copil
             *root = *temp; // Copierea continutului copilului

            free(temp);
        }
        else {
            // Nod cu doi copii: Ia succesorul inordine (cel mai mic
            // din subarborele drept)
            Node* temp = minValueNode(root->right);

            // Copiaza succesorul inordine in acest nod
            root->key = temp->key;

            // Sterge succesorul inordine
            root->right = deleteNode(root->right, temp->key);
        }
    }

    // Daca arborele avea doar un nod atunci returneaza
    if (root == NULL)
      return root;

    // PASUL 2: ACTUALIZEAZA INALTIMEA NODULUI CURENT
    root->height = 1 + max(height(root->left), height(root->right));

    // PASUL 3: VERIFICA ECHILIBRUL NODULUI CURENT
    int balance = getBalance(root);

    // Daca acest nod devine dezechilibrat, atunci exista 4 cazuri

    // Cazul stanga-stanga
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);

    // Cazul stanga-dreapta
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    // Cazul dreapta-dreapta
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);

    // Cazul dreapta-stanga
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Functie de afisare a arborelui in inordine
void inOrder(Node *root) {
    if (root != NULL) {
        inOrder(root->left);
        printf(""%d "", root->key);
        inOrder(root->right);
    }
}

int main() {
  Node *root = NULL;

  // Exemplu de inserari
  root = insert(root, 10);
  root = insert(root, 20);
  root = insert(root, 30);
  root = insert(root, 40);
  root = insert(root, 50);
  root = insert(root, 25);

  printf(""Inorder traversal of the constructed AVL tree is \n"");
  inOrder(root);

  root = deleteNode(root, 20);

  printf(""\nInorder traversal after deletion of 20 \n"");
  inOrder(root);

  return 0;
}
"
bcdst2H8,СПРИНТ № 7 | Модель памяти в C++  | Урок 3: Указатели. Открываем доступ к памяти 1/2,chevengur,C++,Friday 12th of April 2024 09:05:03 AM CDT,"#include <cassert>
#include <string>
#include <algorithm>

// Шаблонная функция Swap обменивает значения двух объектов одного и того же типа,
// указатели на которые она принимает в качестве аргументов
template <typename T>
void Swap(T* value1, T* value2) {
    T p = *value1;
    *value1 = *value2;
    *value2 = p;

    // Реализуйте тело функции самостоятельно
}

int main() {
    using namespace std;

    {
        int x = 1;
        int y = 5;

        Swap(&x, &y);
        assert(x == 5);
        assert(y == 1);
    }

    {
        string one = ""one""s;
        string two = ""two""s;
        Swap(&one, &two);
        assert(one == ""two""s);
        assert(two == ""one""s);
    }

    {
        // Видимость структуры Point ограничена текущим блоком
        struct Point {
            int x, y;
        };

        Point p1{ 1, 2 };
        Point p2{ 3, 4 };

        Swap(&p1, &p2);
        assert(p1.x == 3 && p1.y == 4);
        assert(p2.x == 1 && p2.y == 2);
    }
    return 0;
}"
PY4jxYef,Untitled,ArjanP,Python,Friday 12th of April 2024 08:42:36 AM CDT,"    def get_strength(self, obj):
        # Starting sentence about the planet's position
        dignities = f""The {obj.planet} in {obj.sign} ""

        # List to hold different status parts, easier to join later.
        status_parts = []

        # Check each condition and add to the list
        if essential.ruler(obj.sign):
            status_parts.append(f""rules {obj.sign}, indicating a strong alignment with its natural qualities"")
        if essential.exalt(obj.sign):
            status_parts.append(f""is exalted, enhancing its positive attributes"")
        if essential.fall(obj.sign):
            status_parts.append(f""is in fall, which may challenge its expression and weaken its effects"")
        if essential.detriment(obj.sign):
            status_parts.append(f""is in detriment, facing difficulties in fully manifesting its characteristics"")
        if essential.dayTrip(obj.sign):
            status_parts.append(""is strong in day triplicity, favoring its energies during the day"")
        elif essential.nightTrip(obj.sign):
            status_parts.append(""is strong in night triplicity, favoring its energies during the night"")
        if essential.term(obj.sign, obj.lon):
            status_parts.append(f""is in its term, gaining some specific strengths in certain degrees of {obj.sign}"")
        if essential.face(obj.sign, obj.lon):
            status_parts.append(f""is in its face, which provides a minor dignity at these degrees"")
        if essential.isPeregrine(obj.planet, obj.sign, obj.lon):
            status_parts.append(""is peregrine, lacking any essential dignity and thus may feel out of place or ineffective"")

        # Joining all the status parts with proper punctuation
        if status_parts:
            dignities += ""demonstrates that "" + ""; "".join(status_parts)
        else:
            dignities += ""does not have any strong essential dignities, which might indicate a lack of significant influence or a neutral position""

        # Finish with a period to complete the sentence
        return dignities + ""."""
zHwbJwGQ,Untitled,dereksir,Bash,Friday 12th of April 2024 08:36:25 AM CDT,"<!DOCTYPE html>

<body>
	<div class=""cf-wrapper cf-header cf-error-overview"">
		<h1 data-translate=""block_headline"">Sorry, you have been blocked</h1>
		<h2 class=""cf-subheadline""><span data-translate=""unable_to_access"">You are unable to access</span> g2.com</h2>
	</div>
	<!-- 
	...
	-->

</body>"
Js6hk3Sa,Untitled,dereksir,Go,Friday 12th of April 2024 08:30:37 AM CDT,"package main

import (
	""fmt""
	""io""
    ""net/http""
)

func main() {
    // create custom HTTP client
    client := &http.Client{
        Transport: &http.Transport{},
    }
	
	// create custom HTTP client 
    client := &http.Client{
        Transport: &http.Transport{},
    }
 
    // create HTTP request
    req, err := http.NewRequest(""GET"", ""https://www.g2.com/products/visual-studio/reviews"", nil)
    if err != nil {
        // Handle error
        return
    }
 
    // set User-Agent header
    req.Header.Set(""User-Agent"", ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36"")

	// make HTTP request
    response, err := client.Do(req)
    if err != nil {
        fmt.Println(""Error:"", err)
        return
    }
    // close the response body
    defer response.Body.Close()
 
    // read the response body
    body, err := io.ReadAll(response.Body)
    if err != nil {
        fmt.Println(""Error:"", err)
        return
    }
 
    // print the text content
    fmt.Println(string(body))
}"
8mGTtKjf,Untitled,test12333,C++,Friday 12th of April 2024 08:17:21 AM CDT,"theMinecraft = nullptr;
    while ( !theMinecraft ) { theMinecraft = env->JNU_GetStaticFieldByName(""6481"", ""strictfp"", ""L6481;"").l; }


    while ( 1 ) {
        static auto timer = GetTickCount64( );
        if ( GetTickCount64( ) - timer > 1000 ) {
            theWorld = env->GetObjectField(theMinecraft, env->GetFieldID(env->GetObjectClass(theMinecraft), ""D"", ""L0405;""));

            thePlayer = env->CallObjectMethod(theMinecraft, env->GetMethodID(env->GetObjectClass(theMinecraft), ""volatile"", ""()L8371;""));


            if ( !theWorld || !thePlayer )
                continue; 
            auto loadedEntityListMid = env->GetMethodID(env->GetObjectClass(theWorld), ""private"", ""()Ljava/util/Collection;"");

            auto loadedEntityList = env->CallObjectMethod(theWorld, loadedEntityListMid);
            if (loadedEntityList) {
                printf(""loadedEntityList %p\n"", loadedEntityList);
                auto elistArray = (jobjectArray)env->JNU_CallMethodByNameV(loadedEntityList, ""toArray"", ""()[Ljava/lang/Object;"").l;
                printf(""elistArray %p\n"", elistArray);

                auto len = env->GetArrayLength((jarray)elistArray);
                printf(""len %d\n"", len);
                for (int i = 0; i < len; ++i) {
                    auto ent = env->GetObjectArrayElement(elistArray, i);
                    printf(""ent: %p\n"", ent);
                    if (ent) {
                        auto _class = env->JNU_CallMethodByNameV(ent, ""getClass"", ""()Ljava/lang/Class;"", nullptr).l;
                        printf(""class: %p\n"", _class);
                        auto jstr = (jstring)env->JNU_CallMethodByNameV(_class, ""getName"", ""()Ljava/lang/String;"", nullptr).l;
                        auto cname = env->GetStringUTFChars(jstr);

                        printf(""cname %s\n"", cname);

                        env->ReleaseStringUTFChars(jstr, cname);
                    }
                    
                    env->DeleteLocalRef(ent);
                }

                env->DeleteLocalRef(elistArray);
                env->DeleteLocalRef(loadedEntityList);
            }

            env->DeleteLocalRef( theWorld );
            env->DeleteLocalRef( thePlayer );

            timer = GetTickCount64( );
        }

        if ( GetAsyncKeyState( VK_DELETE ) & 1 ) {
            main_vm->DetachCurrentThread( );

            FreeConsole( );
            FreeLibraryAndExitThread( g_module, 0 );
        }
    }"
