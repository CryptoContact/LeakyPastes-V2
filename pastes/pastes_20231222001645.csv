id,title,username,language,date,content
fgdmPPNy,2023-12-21_stats.json,rdp_snitch,JSON,Thursday 21st of December 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.16.11"": 2,
    ""130.162.52.206"": 1,
    ""89.248.170.88"": 1,
    ""23.92.26.235"": 13,
    ""87.251.75.145"": 3,
    ""60.172.239.9"": 1,
    ""103.77.214.248"": 341,
    ""179.60.147.5"": 1,
    ""167.248.133.38"": 1,
    ""205.210.31.66"": 3,
    ""62.204.41.208"": 6,
    ""87.251.75.64"": 1,
    ""167.94.146.57"": 1,
    ""185.170.144.113"": 9,
    ""196.190.117.7"": 1,
    ""221.162.28.157"": 1,
    ""194.165.16.78"": 2,
    ""62.233.50.179"": 2,
    ""185.170.144.3"": 2,
    ""167.94.138.51"": 1,
    ""198.235.24.110"": 3,
    ""110.86.3.66"": 1,
    ""31.43.185.3"": 2,
    ""185.36.81.28"": 1,
    ""172.234.49.188"": 1,
    ""45.93.20.204"": 3,
    ""179.60.147.47"": 6,
    ""161.35.3.68"": 4,
    ""50.116.52.4"": 1,
    ""128.14.237.9"": 1,
    ""81.19.135.47"": 2,
    ""80.66.76.92"": 2,
    ""45.227.254.55"": 2,
    ""198.235.24.234"": 3,
    ""51.75.160.42"": 2,
    ""185.222.243.154"": 1,
    ""113.160.91.206"": 1,
    ""213.109.202.232"": 2,
    ""205.210.31.78"": 3,
    ""195.181.244.184"": 1,
    ""111.38.223.196"": 1,
    ""45.129.14.198"": 1
  },
  ""asn"": {
    ""AS48721"": 4,
    ""AS31898"": 1,
    ""AS202425"": 1,
    ""AS63949"": 15,
    ""AS208091"": 6,
    ""AS4134"": 2,
    ""AS140810"": 341,
    ""AS209588"": 9,
    ""AS398324"": 2,
    ""AS396982"": 12,
    ""AS59425"": 6,
    ""AS398705"": 1,
    ""AS197414"": 11,
    ""AS24757"": 1,
    ""AS4766"": 1,
    ""AS57523"": 5,
    ""AS211736"": 2,
    ""AS209605"": 1,
    ""AS14061"": 4,
    ""AS135377"": 1,
    ""AS267784"": 2,
    ""AS16276"": 2,
    ""AS136787"": 1,
    ""AS45899"": 1,
    ""AS208312"": 2,
    ""AS212531"": 1,
    ""AS9808"": 1,
    ""AS198465"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 15,
    ""Oracle Corporation"": 1,
    ""IP Volume inc"": 1,
    ""Akamai Technologies, Inc."": 15,
    ""Xhost Internet Solutions LP"": 17,
    ""Chinanet"": 2,
    ""Megacore Technology Company Limited"": 341,
    ""Censys, Inc."": 3,
    ""Google LLC"": 12,
    ""Horizon LLC"": 6,
    ""Ethiotelecom"": 1,
    ""Korea Telecom"": 1,
    ""Chang Way Technologies Co. Limited"": 5,
    ""FOP Dmytro Nedilskyi"": 2,
    ""SERVEROFFER LT"": 1,
    ""DigitalOcean, LLC"": 4,
    ""Zenlayer Inc"": 1,
    ""OVH SAS"": 2,
    ""Tefincom S.A."": 1,
    ""VietNam Post and Telecom Corporation"": 1,
    ""Red Byte LLC"": 2,
    ""UAB \""Interneto vizija\"""": 1,
    ""China Mobile communications corporation"": 1,
    ""BtHoster LTD"": 1
  },
  ""org"": {
    ""Flyservers S.A"": 4,
    ""Oracle Cloud Infrastructure (eu-frankfurt-1)"": 1,
    ""Quasi Networks LTD."": 1,
    ""Linode"": 14,
    ""Xhost Internet Solutions"": 6,
    ""Chinanet AH"": 1,
    ""Vinasite Viet NAM Company Limited"": 341,
    ""Cloud Solutions S.A"": 7,
    ""Censys, Inc."": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Horizon LLC"": 6,
    ""Xhostis"": 11,
    ""Unknown"": 2,
    ""Kornet"": 1,
    ""Sierra LLC"": 2,
    ""Censys, Inc"": 1,
    ""Chinanet FJ"": 1,
    ""FOP Dmytro Nedilskyi"": 2,
    ""Akamai Technologies, Inc."": 1,
    ""Starcrecium Limited"": 3,
    ""DigitalOcean, LLC"": 4,
    ""UCLOUD"": 1,
    ""Alviva Holding Limited"": 2,
    ""UAB Host Baltic"": 2,
    ""OVH Ltd"": 2,
    ""Packethub S.A"": 1,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""Chang Way Technologies Co. Limited"": 2,
    ""RACKRAY"": 1,
    ""China Mobile"": 1,
    ""BtHoster LTD"": 1
  },
  ""regionName"": {
    ""Kaunas"": 6,
    ""Hesse"": 4,
    ""North Holland"": 16,
    ""California"": 25,
    ""Anhui"": 1,
    ""Hanoi"": 342,
    ""Distrito Federal"": 7,
    ""Michigan"": 2,
    ""Moscow"": 13,
    ""Addis Ababa"": 1,
    ""Jeju-do"": 1,
    ""Fujian"": 1,
    ""Dnipropetrovsk Oblast"": 2,
    ""North West"": 1,
    ""New Jersey"": 5,
    ""Taiwan"": 1,
    ""England"": 5,
    ""Vilnius"": 2,
    ""Texas"": 1,
    ""Guangdong"": 1
  },
  ""country"": {
    ""Lithuania"": 8,
    ""Germany"": 4,
    ""The Netherlands"": 16,
    ""United States"": 33,
    ""China"": 3,
    ""Vietnam"": 342,
    ""Venezuela"": 7,
    ""Russia"": 13,
    ""Ethiopia"": 1,
    ""South Korea"": 1,
    ""Ukraine"": 2,
    ""Singapore"": 1,
    ""Taiwan"": 1,
    ""United Kingdom"": 5
  },
  ""account"": {
    ""Test"": 11,
    ""hello"": 359,
    ""Administr"": 21,
    ""(empty)"": 8,
    ""uKUdfVeYS"": 1,
    ""CtqjZs"": 1,
    ""oPdWto"": 1,
    ""Domain"": 20,
    ""HKGNdODUL"": 1,
    ""fUpvpc"": 1,
    ""mIjtHz"": 1,
    ""fdgjbl1a"": 4,
    ""beio"": 1,
    ""Administrator"": 1,
    ""loKAtnKOG"": 1,
    ""UjPHuM"": 1,
    ""SbemRB"": 1,
    ""KReKwCVoi"": 1,
    ""xOwOZY"": 1,
    ""MQLZAT"": 1
  },
  ""keyboard"": {
    ""Unknown"": 437
  },
  ""client_build"": {
    ""Unknown"": 437
  },
  ""client_name"": {
    ""Unknown"": 437
  },
  ""ip_type"": {
    ""Unknown"": 396,
    ""hosting"": 31,
    ""mobile"": 2,
    ""proxy"": 4,
    ""hosting & proxy"": 4
  }
}"
hNqEBw3j,Exercício Pessoas + IMC,hercioneto,C,Thursday 21st of December 2023 06:13:00 PM CDT,"// Online C compiler to run C program online
#include <stdio.h>

typedef struct // Cria uma STRUCT para armazenar os dados de uma pessoa

{
   char Nome[50];
    int Idade;
    float Peso;
    float Altura;
    float Imc;

} Pessoa; // Define o nome do novo tipo criado

void ImprimePessoa(Pessoa P) // declara o parâmetro como uma struct

{

  printf(""Nome: %s Idade: %d  Peso: %f Altura: %f IMC: %f \n"",P.Nome, P.Idade, P.Peso, P.Altura, P.Imc);

}

int main()

{

    Pessoa Povo[10];
    char nome[50];
    float somaIMC=0;
    float mediaIMC=0;
   for (int i = 0 ; i<=1; i++) {
       printf(""Digite o nome da pessoa %i: "",i+1);
       scanf(""%s"",&Povo[i].Nome);
       printf(""Digite a altura da pessoa %i: "",i+1);
       scanf(""%f"",&Povo[i].Altura);
       printf(""Digite peso da pessoa %i: "",i+1);
       scanf(""%f"",&Povo[i].Peso);
       Povo[i].Imc = (Povo[i].Peso / (Povo[i].Altura * Povo[i].Altura));
       somaIMC = somaIMC + Povo[i].Imc;
    }
    for (int i = 0 ; i<=1; i++) {
    ImprimePessoa(Povo[i]);
    }
    mediaIMC = somaIMC / 2;
    printf(""Media de IMCs %f: "",mediaIMC);


   return 0;

}"
Yw6e7Tec,door.lua,forestfire97,Lua,Thursday 21st of December 2023 06:08:21 PM CDT,"-- Load the Keypad API
local keypad = require(""keyAPI"")

-- List of monitor names
local monitors = {""monitor_1"", ""monitor_2""}  -- Replace with your monitor names
local redstoneOutput = ""back""  -- Replace with your desired redstone output side

-- Function to run the keypad interface on a single monitor
local function runKeypadOnMonitor(monitor, redstoneOutput)
    local monitorObj = peripheral.wrap(monitor)
    keypad(monitorObj, redstoneOutput)
end

-- Start the keypad interface on each monitor separately
for _, monitorName in ipairs(monitors) do
    parallel.waitForAny(function()
        runKeypadOnMonitor(monitorName, redstoneOutput)
    end)
end"
V70aJJ22,Untitled,glados123123123123,C#,Thursday 21st of December 2023 06:05:52 PM CDT,"using HarmonyLib;
using GameNetcodeStuff;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine.AI;


namespace TombsMadnessMod.Patches
{
    [HarmonyPatch(typeof(ForestGiantAI))]
    internal class ForestGiantAIPatch
    {
        [HarmonyPatch(""Start"")]
        [HarmonyPostfix]
        static void ForestGiantSpeedPatch(ref ForestGiantAI __instance)
        {
            TombsMadnessModBase.mls.LogInfo(""setting da settings!"");
            __instance.agent.speed = 5000;
            __instance.enemyType.isDaytimeEnemy = true;
        }

    }
}
"
ajeHu89b,Untitled,glados123123123123,C#,Thursday 21st of December 2023 06:04:31 PM CDT,"[HarmonyPatch(typeof(ForestGiantAI))]
    internal class ForestGiantPatch
    {
        [HarmonyPatch(""Start"")]
        [HarmonyPostfix]
        static void ForestGiantSpeedPatch(ref ForestGiantAI __instance)
        {
            TombsMadnessModBase.mls.LogInfo(""setting da settings!"");
            __instance.agent.speed = 5000;
            __instance.enemyType.isDaytimeEnemy = true;
        }

    }"
x3ftuVdV,Untitled,iradap,C++,Thursday 21st of December 2023 05:56:53 PM CDT,"// ==UserScript==
// @name         AUTOX NI
// @namespace    http://tampermonkey.net/
// @version      2.3
// @description  Skrypt automatycznie biega za graczem, wraca na kordy po zabiciu itd.
// @author       Padonim
// @match        https://gordion.margonem.pl/
// @start-at     document-idle
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==
(async (window, sleep) => {

    const initCSS = () => {

        const $container2 = $('<div id=""p4d0k1ll""></div>').css({
            'width':'110px',
            'position':'absolute',
            'z-index':'999',
            'background':'rgba(15, 15, 15, 0.85)',
            'border':'1px solid orange',
            'color':'white'
        });
        const $head = $('<div id=""p4d0k1ll-head""></div>').css({
            'width':'110px',
            'height':'25px',
        });

        const $body = $('<div id=""p4d0k1ll-body""></div>').css({
            'width':'110px',
            'height':'40px',
            'font-size':'8px'
        })

        const $settings_input = $('<div id=""p4d0k1ll-settings"">⚙️</div>').css({
            'float':'left'
        });

        const $mode_input = $('<input type=""checkbox"" id=""mode"" tabindex=""0"">').css({
            'float':'left'
        });

        const $levels_input = $('<input type=""text"" id=""levels"" autocomplete=""off"" placeholder=""MIN-MAX"">').css({
            'width':'65px',
            'height':'15px',
            'background':'rgba(15, 15, 15, 0.45)',
            'border':'0',
            'border-bottom':'1px dotted orange',
            'color':'orange',
            'text-align':'center',
            'float':'left'
        });

        const $backmode_input = $('<input type=""checkbox"" id=""backmode"" tabindex=""0""><small>KORDY</small>').css({
            'float':'left'
        });

        const $coords_input = $('<input type=""text"" id=""coords"" autocomplete=""off"" placeholder=""X,Y"">').css({
            'width':'55px',
            'height':'15px',
            'background':'rgba(15, 15, 15, 0.45)',
            'border':'0',
            'border-bottom':'1px dotted orange',
            'color':'orange',
            'text-align':'center',
            'float':'left'
        });

        const $automode_input = $('<span style=""clear: both;""></span><input type=""checkbox"" id=""automode""><small>AUTO F</small><br>').css({
            'float':'left',
            'text-align':'left'
        });

        const $follow_input = $('<input type=""checkbox"" id=""follow""><small>FOLLOW</small>').css({
            'float':'left',
            'text-align':'left'
        });

        $(""body"").append($container2);
        $(""#p4d0k1ll"").append($head, $body);
        $(""#p4d0k1ll-head"").append($settings_input, $mode_input, $levels_input);
        $(""#p4d0k1ll-body"").append($backmode_input, $coords_input, $automode_input, $follow_input);

        $('#p4d0k1ll-settings').click(function () {
            $('#p4d0k1ll-body').toggle('slow');
        });

    }
    window.onload = initCSS();

    GM_getValue('p4d0k1llni') || GM_setValue('p4d0k1llni', JSON.stringify({ x: 0, y: 0 }));

    let padoPosition = JSON.parse(GM_getValue('p4d0k1llni'));

    document.querySelector('#p4d0k1ll').style.left = `${padoPosition.x}`;
    document.querySelector('#p4d0k1ll').style.top = `${padoPosition.y}`;
    document.querySelector('#p4d0k1ll').style.position = 'absolute';

    $(document.querySelector('#p4d0k1ll')).draggable({
        stop: () => {
            padoPosition.x = document.querySelector('#p4d0k1ll').style.left;
            padoPosition.y = document.querySelector('#p4d0k1ll').style.top;
            GM_setValue('p4d0k1llni', JSON.stringify(padoPosition));

            document.querySelector('#p4d0k1ll').style.left = padoPosition.x;
            document.querySelector('#p4d0k1ll').style.top = padoPosition.y;
            document.querySelector('#p4d0k1ll').style.position = 'absolute';
        }
    });

    const loadSettings = () => {
        sleep(4000);
        if (GM_getValue('status' + getCookie(""mchar_id"")) == true) {
            document.getElementById('mode').setAttribute('checked', 'checked');
        }
        if (GM_getValue('backmode' + getCookie(""mchar_id"")) == true) {
            document.getElementById('backmode').setAttribute('checked', 'checked');
        }
        if (GM_getValue('automode' + getCookie(""mchar_id"")) == true) {
            document.getElementById('automode').setAttribute('checked', 'checked');
        }
        if (GM_getValue('follow' + getCookie(""mchar_id"")) == true) {
            document.getElementById('follow').setAttribute('checked', 'checked');
        }
        if (GM_getValue('coords' + getCookie(""mchar_id"")) == null || GM_getValue('coords' + getCookie(""mchar_id"")) == undefined) {
            GM_setValue('coords' + getCookie(""mchar_id""), '00,00');
        }
        if (GM_getValue(""levels"" + getCookie(""mchar_id"")) == null || GM_getValue('levels' + getCookie(""mchar_id"")) == undefined) {
            GM_setValue(""levels"" + getCookie(""mchar_id""), '0-500');
        }
        document.getElementById(""levels"").value = GM_getValue(""levels"" + getCookie(""mchar_id""));
        document.getElementById(""coords"").value = GM_getValue(""coords"" + getCookie(""mchar_id""));
        console.log('[P4D0K1LL] Załadowano ustawienia.');
    }
    window.onload = loadSettings();

    document.getElementById('levels').onchange = () => {
        GM_setValue(""levels"" + getCookie(""mchar_id""), document.getElementById(""levels"").value);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    }

    document.getElementById('coords').onchange = () => {
        GM_setValue(""coords"" + getCookie(""mchar_id""), document.getElementById(""coords"").value);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    }

    document.getElementById('follow').addEventListener('click', () => {
        GM_setValue(""follow"" + getCookie(""mchar_id""), document.getElementById(`follow`).checked);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    });

    document.getElementById('mode').addEventListener('click', () => {
        GM_setValue(""status"" + getCookie(""mchar_id""), document.getElementById(`mode`).checked);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    });

    document.getElementById('automode').addEventListener('click', () => {
        GM_setValue(""automode"" + getCookie(""mchar_id""), document.getElementById(`automode`).checked);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    });

    document.getElementById('backmode').addEventListener('click', () => {
        GM_setValue(""backmode"" + getCookie(""mchar_id""), document.getElementById(`backmode`).checked);
        console.log('[P4D0K1LL] Zapisano ustawienia.');
    });

    const sendAttackReq = (id) => {
        if (new Date() / 60 - lastAttackReq < 0.3) return;
        window._g('fight&a=attack&id=' + id);
        lastAttackReq = new Date() / 60;
    }
    let lastAttackReq = new Date() / 60;

    const getOnlines = async () => {
        while (true) {
            fetch(""https://padonim.cytr.us/ping?"" + new URLSearchParams({
                accid: getCookie('user_id'),
                chid: getCookie('mchar_id')
            }))
                .then(response => response.json())
                .then((res) => {
                    $('#ponline').html(res.online)
                });
            await sleep(60000);
        }
    }
    window.onload = getOnlines();

    const initX = async () => {
        while (true) {
            let targets = [];
            const getOthers = Engine.others.getDrawableList().filter(obj => {
                return obj.d;
            }).filter(obj => {
                return (obj.d.relation == 'en' || obj.d.relation == 'cl-en' || obj.d.relation == '') && (obj.d.lvl >= document.getElementById(""levels"").value.split(""-"")[0] && obj.d.lvl <= document.getElementById(""levels"").value.split(""-"")[1]);
            });
            if (document.getElementById('mode').checked && Engine.map.d.pvp == 2) {
                for (const i in getOthers) {
                    const emotion = getOthers[i].onSelfEmoList[0];
                    if (emotion == undefined) {
                        targets.push({
                            id: getOthers[i].d.id,
                            x: getOthers[i].d.x,
                            y: getOthers[i].d.y,
                            distance: Math.abs(Engine.hero.d.x - getOthers[i].d.x) + Math.abs(Engine.hero.d.y - getOthers[i].d.y)
                        });
                    } else if (emotion.name != 'battle' && emotion.name != 'pvpprotected') {
                        targets.push({
                            id: getOthers[i].d.id,
                            x: getOthers[i].d.x,
                            y: getOthers[i].d.y,
                            distance: Math.abs(Engine.hero.d.x - getOthers[i].d.x) + Math.abs(Engine.hero.d.y - getOthers[i].d.y)
                        })
                    }
                }
                if (targets != '') {
                    targets = targets.sort((a, b) => (a.distance > b.distance) ? 1 : -1);
                    if (targets[0].distance > 2 && document.getElementById(""follow"").checked) {
                        Engine.hero.autoGoTo({
                            x: targets[0].x,
                            y: targets[0].y
                        });
                    } else sendAttackReq(targets[0].id);
                } else if (document.getElementById(""backmode"").checked) {
                    if (Engine.hero.d.x != document.getElementById(""coords"").value.split("","")[0] || Engine.hero.d.y != document.getElementById(""coords"").value.split("","")[1]) {
                        Engine.hero.autoGoTo({
                            x: parseInt(document.getElementById(""coords"").value.split("","")[0]),
                            y: parseInt(document.getElementById(""coords"").value.split("","")[1])
                        });
                    }
                } else if (document.getElementById(""automode"").checked) {
                    if (Engine.battle) {
                        API.addCallbackToEvent(""open_battle_window"", () => {
                            eval('Engine.battle.autoFight()')
                        });
                    }
                }
            }
            await sleep(50000);
        }
    }
    window.onload = initX();
})(typeof unsafeWindow !== ""undefined"" ? unsafeWindow : window, (ms) => new Promise((resolve) => setTimeout(resolve, ms)));"
tWcQsmJ2,G2A.com Refund Exploit Dec 2023,G2ARefundExploit,GetText,Thursday 21st of December 2023 05:52:58 PM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1AKxSk9vs38aBF7GEDJxf8mNi-_NVRLQ9/view#g2a_refund_exploit.pdf

Working as of 
21 December 2023

847408"
Yq4wKwij,Caixa de código em Markdown,Gabarito,JavaScript,Thursday 21st of December 2023 05:13:34 PM CDT,"Teste de caixa de código em Markdown:

```javascript
Running script: F:\Meus documentos\Downloads\1\SameName 02 - ChatGPT - Sugestão 07.js
========================================================================================================
An error occurred on line 53:
     var uniqueSimilarFileNames = [...new Set(similarFileNames)];
Script failed.
```
"
BsLSqY2F,Untitled,glados123123123123,C#,Thursday 21st of December 2023 04:51:17 PM CDT,"using HarmonyLib;
using GameNetcodeStuff;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine.AI;


namespace TombsMadnessMod.Patches
{
    [HarmonyPatch(typeof(ForestGiantAI))]
    internal class ForestGiantPatch
    {
        [HarmonyPatch(""Start"")]
        [HarmonyPostfix]
        static void ForestGiantSpeedPatch(ref NavMeshAgent ___agent, ref bool ___isDaytimeEnemy)
        {
            TombsMadnessModBase.mls.LogInfo(""setting da settings!"");
            ___agent.speed = 5000;
            ___isDaytimeEnemy = true;
            TombsMadnessModBase.mls.LogInfo(""done with da settings!"");
        }

    }
}
"
DWzyHwry,Полезные возможности в ConditionalEvents #2,JaycobYT,YAML,Thursday 21st of December 2023 04:43:28 PM CDT,"#---------------------------------------
#  
#  Создайте файл с названием events.yml
#  в папке ConditionalEvents/events/
#
#  Скопируйте полностью код этого конфига
#  и вставьте его в этот файл (events.yml)
#
#  Для работы некоторых плейсхолдеров нужно
#  установить расширение для PlacholderAPI:
#
#  /papi ecloud download WorldGuard
#  /papi reload
#
#---------------------------------------
Events:
  # -------------------------------------
  #  Урон игроку при ломании  
  #  блока с определённым шансом
  # -------------------------------------
  block_break_damage:
    enabled: true
    type: block_break
    conditions:
    - '%block% == ANCIENT_DEBRIS'
    - '%random_1_10% >= 5'
    actions:
      default:
      - 'damage: 6'
  # -------------------------------------
  #  Рандомное количество второй
  #  валюты за убийство игроков
  # -------------------------------------
  player_kill_reward:
    enabled: true
    type: player_kill
    conditions:
    - '%victim% == PLAYER'
    actions:
      default:
      - 'console_command: points give %player% %random_1_5%'
      - 'actionbar: &fВы убили &c%target:player%;140'
  # -------------------------------------
  #  Отображение напоминания игроку,
  #  когда уровень еды ниже указанного
  # -------------------------------------
  food_level_notification:
    enabled: true
    type: player_change_food
    conditions:
    - '%new_food_level% <= 6'
    actions:
      default:
      - 'title: 10;60;10;none;&fВы голодны, подкрепитесь!'
      - 'playsound: ENTITY_ZOMBIE_AMBIENT;1;1'
  # -------------------------------------
  #  Выдача эффектов игроку при 
  #  подборе определённого дропа
  # -------------------------------------
  item_pickup_effect:
    enabled: true
    type: item_pickup
    conditions:
    - '%item% == SLIME_BALL'
    - '%item_name% == Слизь Замедления'
    actions:
      default:
      - 'give_potion_effect: SLOW;120;5;false'
      - 'give_potion_effect: BLINDNESS;120;2;false'
      - 'title: 10;60;10;none;&fВы вступили в какую-то жижу...'
      - 'playsound: ENTITY_SLIME_JUMP;1;1'
  # -------------------------------------
  #  Запрет использования жителя
  #  на чужом регионе (WorldGuard)
  # -------------------------------------
  region_blocked_villager:
    enabled: true
    type: player_open_inventory
    conditions:
    - '%inventory_type% == MERCHANT'
    - '%worldguard_region_name% != %empty%'
    - '%worldguard_region_owner% !contains %player%'
    - '%worldguard_region_members% !contains %player%'
    actions:
      default:
      - 'cancel_event: true'
      - 'message: &fНельзя взаимодействовать с жителем на чужом регионе'"
w7vqmVsF,Agon-Demo-01,lovejoy777,ZXBasic,Thursday 21st of December 2023 04:40:00 PM CDT,"   10 REM ******************************
   20 REM *        AGON LIGHT 2        *
   30 REM *                            *
   40 REM *       BBC BASIC DEMO       *
   50 REM *     WRITTEN FOR MODE 8     *
   60 REM *      BY STEVE LOVEJOY      *
   70 REM ******************************
   80 :
   90 REM MAIN SETUP
  100 PROC_VARS
  110 PROC_LOAD_CHARS
  120 PROC_INITSCREEN
  130 PROC_MAINLOOP
  140 VDU 30 : REM MOVES CURSOR HOME
  250 END : REM END MAIN SETUP
  260 :
 1000 DEF PROC_MAINLOOP : REM ****** MAIN LOOP ******
 1010 CLS
 1020 PROC_DRAW_HUD
 1030 PROC_DRAW_AGON1(16,12) : REM THIS ALLOWS YOU TO MOVE THE TEXT WITH CODE.
 1040 :
 2000 ENDPROC : REM END MAIN_LOOP
 2010 :
 2120 :
 2130 REM SOUND DOESN'T DO ANYTHING, BUT THOUGHT I'D LEAVE THE CODE IN FOR EXAMPLES.
 2140 :
 2150 DEFPROCfall
 2160 FOR L=-15 TO 0
 2170 SOUND 0,L,5,1
 2180 NEXT L
 2190 ENDPROC
 2200 :
 2210 DEFPROCslam
 2220 FOR L=-15 TO -10
 2230 SOUND 0,L,5,0.6
 2240 NEXT L
 2250 ENDPROC
 2260 :
 2270 DEFPROCmagic
 2280 FOR I=40 TO 160 STEP 5
 2290 SOUND 2,-15,I,5
 2300 NEXT I
 2310 ENDPROC
 2320 :
 2330 DEFPROCaxe
 2340 FOR I=1 TO 10
 2350 SOUND0,-15,5,1
 2360 FOR M=1 TO 400 : NEXT M
 2370 NEXT I
 2380 ENDPROC
 2390 :
 2400 DEFPROCgeneral
 2410 SOUND2,-15,100,2
 2420 FOR M=1 TO 400 : NEXT M
 2430 SOUND2,-15,100,2
 2440 ENDPROC 
 2500 :
 5505 DEF PROC_INITSCREEN : REM ***** INTSCREEN ****
 5010 CLEAR
 5515 MODE mode%
 5530 CLS
 5540 CLG
 5550 PROC_HIDE_CURSOR
 5560 ENDPROC : REM END INITSCREEN
 5570 :
 5580 DEF PROC_HIDE_CURSOR : REM ******* HIDE_CURSOR *******
 5590 VDU 23,1,0;0;0;0;
 5600 ENDPROC
 5610 :
 5620 DEF PROC_SHOW_CURSOR : REM ****** SHOW_CURSOR *******
 5630 VDU 23,1,1;0;0;0;
 5640 ENDPROC
 5650 :
 7700 :
 7710 DEF PROC_LOAD_CHARS : REM ****** LOAD_CHARS TO MEMORY ******
 7720 REM ASSIGN A to CHRS.
 7730 VDU 23,201,0,0,0,0,1,1,7,7
 7740 VDU 23,202,30,30,126,126,254,254,254,254
 7750 VDU 23,203,31,31,126,126,120,120,0,0
 7760 VDU 23,204,158,158,30,30,30,30,6,6
 7770 REM ASSIGN G to CHARS.
 7780 VDU 23,205,127,127,127,112,112,112,112,112
 7790 VDU 23,206,254,254,254,0,0,6,6,30
 7800 VDU 23,207,112,112,112,127,127,127,0,0
 7810 VDU 23,208,30,30,30,254,254,254,30,24
 7820 REM ASSIGN O to CHARS.
 7830 VDU 23,209,127,127,127,112,112,112,112,112
 7840 VDU 23,210,254,254,254,14,14,14,14,14
 7850 VDU 23,211,112,112,112,127,127,127,0,0
 7860 VDU 23,212,14,14,14,254,254,254,0,0
 7870 REM ASSIGN N to CHARS.
 7880 VDU 23,213,96,120,120,126,126,127,127,127
 7890 VDU 23,214,14,14,14,14,14,142,142,254
 7900 VDU 23,215,127,113,113,112,112,112,0,0
 7910 VDU 23,216,254,254,254,126,126,30,30,6
 8170 :
 8190 REM HUD CHARS
 8200 VDU 23,237,255,255,192,192,192,192,192,192 : REM TOP LEFT CORNER
 8210 VDU 23,238,255,255,3,3,3,3,3,3 : REM TOP RIGHT CORNER
 8220 VDU 23,239,192,192,192,192,192,192,255,255 : REM BOT LEFT CORNER
 8230 VDU 23,240,3,3,3,3,3,3,255,255 : REM BOT RIGHT CORNER
 8240 VDU 23,241,255,255,0,0,0,0,0,0 : REM TOP STRAIGHT
 8250 VDU 23,242,0,0,0,0,0,0,255,255 : REM BOT STRAIGHT
 8260 VDU 23,243,192,192,192,192,192,192,192,192 : REM LEFT STRAIGHT
 8270 VDU 23,244,3,3,3,3,3,3,3,3 : REM RIGHT STRAIGHT
 8280 :
 8300 ENDPROC : REM END LOAD_CHARS
 8390 :
 8400 DEF PROC_VARS : REM **** VARS *****
 8410 REM COLOURS
 8411 COLBLACK% = 0
 8412 COLRED% = 1
 8413 COLGREEN% = 2
 8414 COLYELLOW% = 3
 8415 COLBLUE% = 4
 8416 COLMAGENTA% = 5
 8417 COLCYAN% = 6
 8418 COLWHITE% = 7
 8419 COLINTRED% = 9
 8420 COLINTGREEN% = 10
 8421 COLINTYELLOW% = 11
 8422 COLINTBLUE% = 12
 8423 COLINTMAGENTA% = 13
 8424 COLINTCYAN% = 14
 8425 COLINTWHITE% = 15
 8450 mode% = 8 : REM SET MODE HERE
 8460 RT% = 31 : REM SET RIGHT TEXT
 8470 LT% = 2 : REM SET LEFT TEXT
 8480 T1X = 0 : REM TITLE TEXT AGON1 X
 8490 T1Y = 0 : REM TITLE TEXT AGON1 Y
 8500 T2X = 0 : REM TITLE TEXT AGON2 X
 8510 T2Y = 0 : REM TITLE TEXT AGON2 Y
 8520 :
 8530 :
 8700 ENDPROC : REM END VARS
 8800 :
 9000 DEF PROC_DRAW_AGON1(T1X,T1Y) : REM ****** DRAW_AGON1 ******
 9010 :
 9020 REM From custom chars defined previously.
 9030 REM AGON1
 9040 REM DISPLAY A (2x2) CHARS.
 9050 COLOUR COLINTRED%
 9060 PRINT TAB(T1X,T1Y);CHR$(201);CHR$(202)
 9070 PRINT TAB(T1X,T1Y+1);CHR$(203);CHR$(204)
 9080 REM DISPLAY G (2x2) CHARS.
 9090 PRINT TAB(T1X+2,T1Y);CHR$(205);CHR$(206)
 9100 PRINT TAB(T1X+2,T1Y+1);CHR$(207);CHR$(208)
 9110 REM DISPLAY O (2x2) CHARS.
 9120 PRINT TAB(T1X+4,T1Y);CHR$(209);CHR$(210)
 9130 PRINT TAB(T1X+4,T1Y+1);CHR$(211);CHR$(212)
 9140 REM DISPLAY N (2x2) CHARS.
 9150 PRINT TAB(T1X+6,T1Y);CHR$(213);CHR$(214)
 9160 PRINT TAB(T1X+6,T1Y+1);CHR$(215);CHR$(216)
 9260 ENDPROC : REM END DRAW_AGON1
 9270 :
 9510 :
 9600 DEF PROC_DRAW_HUD : REM ***** DRAW_HUD *******
 9610 COLOUR COLINTRED%
 9620 PRINT TAB(0,0);CHR$(237) : REM TL CORNER
 9630 FOR TB = 1 TO 38 : REM TOP BORDER
 9640  PRINT TAB(TB,0)CHR$(241)
 9650 NEXT TB
 9660 PRINT TAB(39,0)CHR$(238) : REM TR CORNER
 9670 FOR LB = 1 TO 27 : REM LEFT BORDER
 9680  PRINT TAB(0,LB)CHR$(243)
 9690 NEXT LB
 9700 FOR RB = 1 TO 27 : REM RIGHT BORDER
 9710  PRINT TAB(39,RB)CHR$(244)
 9720 NEXT RB
 9730 PRINT TAB(0,27);CHR$(239) : REM BL CORNER
 9740 FOR BB = 1 TO 38 : REM BOTTOM BORDER
 9750  PRINT TAB(BB,27)CHR$(242)
 9760 NEXT BB
 9770 PRINT TAB(39,27);CHR$(240) : REM BR CORNER
10000 ENDPROC : REM END DRAW_HUD
"
tNceTNMU,Untitled,glados123123123123,C#,Thursday 21st of December 2023 04:39:49 PM CDT,"using BepInEx;
using BepInEx.Logging;
using HarmonyLib;
using System;
using System.Collections.Generic;
using System.Collections;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TombsMadnessMod.Patches;
using UnityEngine;
using UnityEngine.PlayerLoop;
using UnityEngine.Windows;
using DunGen;
using Microsoft.VisualBasic.Devices;

namespace TombsMadnessMod
{
    [BepInPlugin(modGUID, modName, modVersion)]

    public class TombsMadnessModBase : BaseUnityPlugin
    {
        private const string modGUID = ""TombVali.TombsMadnessMod"";
        private const string modName = ""Tomb's Madness Mod"";
        private const string modVersion = ""1.0.0.0"";

        private readonly Harmony harmony = new Harmony(modGUID);

        private static TombsMadnessModBase Instance;

        static internal ManualLogSource mls;

        void Awake()
        {
            if(Instance == null)
            {
                Instance = null;
            }
            mls = BepInEx.Logging.Logger.CreateLogSource(modGUID);


            mls.LogInfo(""TOMB IN DA SHIZOUCE :)"");
            harmony.PatchAll(typeof(TombsMadnessModBase));
            harmony.PatchAll(typeof(PlayerControlerBPatch));
            harmony.PatchAll(typeof(ForestGiantAI));

        }
        
        void Update()
        {
            GameObject testObject = LC_API.BundleAPI.BundleLoader.GetLoadedAsset<GameObject>(""testobject"");
            Instantiate(testObject);
            mls.LogInfo(""here have a cube"");
        }

    }
}
"
YXq4MXnf,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Thursday 21st of December 2023 04:38:44 PM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-503076"
rV3HatSb,keypadAPI,forestfire97,Lua,Thursday 21st of December 2023 04:21:50 PM CDT,"-- Keypad API

-- Define the correct code
local correctCode = ""1234""  -- Replace with your desired code

function keypadInterface(monitor, redstoneOutput)
    local inputCode = """"
    local codeEntered = false
    local bgColor = colors.lightBlue
    
    while not codeEntered do
        monitor.setBackgroundColor(bgColor)
        monitor.clear()
        
        -- Display the keypad interface
        monitor.setTextColor(colors.white)
        monitor.setCursorPos(1, 1)
        monitor.write(""Enter Code:"")
        monitor.setCursorPos(1, 2)
        monitor.write(inputCode)
        
        -- Display the buttons
        local buttonLabels = {""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"", ""Enter""}
        local buttonX = {1, 5, 9, 1, 5, 9, 1, 5, 9, 1, 5}
        local buttonY = {4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7}
        
        for i = 1, #buttonLabels do
            monitor.setCursorPos(buttonX[i], buttonY[i])
            monitor.write(buttonLabels[i])
        end
        
        -- Check for button presses
		local event, side, x, y = os.pullEvent(""monitor_touch"")
		if side == monitorName then
            for i = 1, #buttonLabels do
                if x == buttonX[i] and y == buttonY[i] then
                    local buttonValue = buttonLabels[i]
                    if buttonValue == ""Enter"" then
                        if inputCode == correctCode then
                            codeEntered = true
                            monitor.setBackgroundColor(colors.green)
                            monitor.clear()
                            redstone.setOutput(redstoneOutput, true)
                            sleep(2)
                            break
                        else
                            inputCode = """"
                            bgColor = colors.red
                            sleep(2)
                            break
                        end
                    else
                        inputCode = inputCode .. buttonValue
                        break
                    end
                end
            end
        end
    end
    
    redstone.setOutput(redstoneOutput, false)
end

return keypadInterface"
v4xZqDXh,CalculatorView,LinneuDM,JavaScript,Thursday 21st of December 2023 04:20:43 PM CDT,"<template>
  <div>
    <Page
      title=""Calculator""
      backURI="":back""
    >
      <template #body>
        <div class=""roi-list no-bg mb-3"">
          <div class=""input-group size-sm"">
            <Dropdown
              label=""Account""
              :list=""fleetList""
            />
          </div>
        </div>
        <PageTabs>
          <PageTab title=""Params"">
            <div class=""roi-list"">
              <div
                v-for=""(param, key) in roiParameters""
                :key=""param.id""
                class=""roi-item""
                :class=""{'border-bottom': (roiParameters.length > 1 && key < roiParameters.length - 1)}""
              >
                <button
                  class=""remove-btn""
                  @click=""removeRoi(param.id)""
                >
                  <Icon icon=""fal fa-circle-xmark"" />
                </button>
                <aside class=""roi-identification"">
                  Population {{ key+1 }}
                </aside>
                <div class=""form"">
                  <div class=""input-group"">
                    <InputList
                      label=""Locations""
                      :list=""locationsList""
                      v-model=""param.locations""
                    />
                  </div>
                  <div class=""input-group"">
                    <InputList
                      label=""Types""
                      :list=""typesList""
                      v-model=""param.types""
                    />
                  </div>
                  <div class=""input-group"">
                    <InputList
                      label=""Fleet""
                      :list=""fleetList""
                      v-model=""param.fleets""
                    />
                  </div>
                  <div class=""input-group"">
                    <div class=""flex-group"">
                      <div class=""flex-item dropdown"">
                        <Dropdown
                          label=""ATIS Family""
                          :list=""fleetList""
                          v-model=""param.fleets""
                        />
                      </div>
                      <div class=""flex-item checkbox"">
                        <Checkbox
                          label=""Group as pop""
                          v-model=""param.groupAsPop""
                        />
                      </div>
                      <div class=""flex-item checkbox"">
                        <Checkbox
                          label=""Moving""
                          v-model=""param.moving""
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div
                class=""data-plan-footer""
              >
                <button
                  class=""icon-btn""
                  @click=""addNewROIItem()""
                >
                  <Icon icon=""fal fa-plus-circle"" />
                </button>
              </div>
            </div>
            <div class=""roi-list mt-3 flex-inputs"">
              <div class=""input-group custom date-between size-sm"">
                <TextInput
                  type=""date""
                  label=""To""
                />
              </div>
              <div class=""input-group custom date-between size-sm"">
                <TextInput
                  type=""date""
                  label=""From""
                />
              </div>
            </div>
            <div class=""input-group bottom"">
              <FormButton @click=""createTabCalculator()"">
                Submit
              </FormButton>
            </div>
          </PageTab>
          <PageTab
            v-for=""(calcTab, index) in calcTabs""
            :key=""index""
            :title=""'Tab ' + index""
            :closeable=""true""
            @close=""closeTab(calcTab.id)""
          >
            <p>Tab {{ index }}</p>
          </PageTab>
        </PageTabs>
      </template>
    </Page>
  </div>
</template>

<script lang=""ts"" setup>
import '@assets/shared.less'
import Checkbox from '@components/Checkbox.vue'
import Dropdown from '@components/Dropdown.vue'
import FormButton from '@components/FormButton.vue'
import InputList, { type ListOption } from '@components/InputList.vue'
import Page from '@components/Page.vue'
import PageTab from '@components/PageTab.vue'
import PageTabs from '@components/PageTabs.vue'
import TextInput from '@components/TextInput.vue'
import { reactive, ref } from 'vue'
import { fleets, locations, types } from './lists'

let lastIndex = 1
let lastTabIndex = 1

interface ROIObject {
  id: number
  locations: ListOption[]
  types: ListOption[]
  fleets: ListOption[]
  groupAsPop: boolean
  moving: boolean
}

interface TabResult{
  id: number
}

const roiParameters = reactive([createNewROIInstance(1)])

const calcTabs = reactive<TabResult[]>([])

const locationsList = ref(locations)

const typesList = ref(types)

const fleetList = ref(fleets)

function createNewROIInstance (id: number): ROIObject {
  return {
    id,
    locations: [],
    types: [],
    fleets: [],
    groupAsPop: false,
    moving: false
  }
}

function addNewROIItem (): void {
  roiParameters.push(Object.assign(createNewROIInstance(lastIndex++)))
}

function clearFields (item: ROIObject): void {
  Object.assign(item, createNewROIInstance(item.id))
}

function removeRoi (index: number): boolean {
  if (roiParameters.length === 1) {
    clearFields(roiParameters[0])
  } else if (index > 0) {
    const indexToRemove = roiParameters.findIndex(item => item.id === index)
    if (indexToRemove !== -1) {
      roiParameters.splice(indexToRemove, 1)
      return true
    }
  }
  return false
}

function createTabCalculator (): void {
  calcTabs.push(Object.assign({ id: lastTabIndex++ }))
}

function closeTab (index: number): boolean {
  const indexToRemove = calcTabs.findIndex(item => item.id === index)
  if (indexToRemove !== -1) {
    calcTabs.splice(indexToRemove, 1)
    console.log(calcTabs)
    return true
  }
  return false
}
/*
watch(roiParameters, () => {
  console.log(roiParameters)
}, { deep: true })
*/
</script>"
BdHuk3ra,RPi Pico W blink,zhexo,Python,Thursday 21st of December 2023 04:03:12 PM CDT,"import machine
import time

led = machine.Pin('LED', machine.Pin.OUT) #LED Pin

while True:
    led.value(True)   #ukljuci LED
    time.sleep(1)     #pauziraj 1 sekundu
    led.value(False)  #iskljuci LED
    time.sleep(1)     #pauziraj 1 sekundu
"
XvqnpneG,Untitled,sissou123,Python,Thursday 21st of December 2023 03:56:47 PM CDT,"Python 3: Deep Dive (Part 4 - OOP)
Python Object Oriented Programming (OOP)
In-depth functional Python programming

functions, closures, scopes, decorators (using and writing them)

zip, sorted, any, all, and the itertools module in general

for more:https://cuty.io/TNNbbJOwjy"
A0YYkmAp,Untitled,JeffGrigg,Java 5,Thursday 21st of December 2023 03:51:41 PM CDT,"public void onBarcode(final String barcode) {
    if (barcode.isEmpty()) {
        display.displayEmptyBarcodeMessage();
    } else {

        final Price price = catalog.findPrice(barcode);

        if (price == null) {
            display.displayProductNotFoundMessage(barcode);
        } else {
            display.displayPrice(price);
        }
    }
}"
S1TjpaXS,CC Colony 2,GauHelldragon,Lua,Thursday 21st of December 2023 03:44:05 PM CDT,"monitor = peripheral.wrap(""left"")
colony = peripheral.wrap(""down"")


while true do
	sleep(1)
	requests = colony.getRequests()
	monitor.clear()
    monitor.setCursorPos(1,1)
    monitor.write(""Colony Requests"")
	
	foodList = {}
	nonFoodList = {}
	
	for i,v in ipairs(requests) do
	     if ( v.target == ""Resturant"" ) then
			table.insert(foodList,v.desc)
		 else
			table.insert(nonFoodList,v.desc)
		 end 

	end
	i = 1
	for _ , desc in ipairs(nonFoodList) do 
		 monitor.setCursorPos(1,i)
		 i = i + 1
         monitor.write(desc)	  
	end
	monitor.setCursorPos(1,i)
	i = i + 1
    monitor.write(""-----"")
	for _ , desc in ipairs(nonFoodList) do 
		 monitor.setCursorPos(1,i)
		 i = i + 1
         monitor.write(desc)	  
	end
	
end"
4mCbYikM,Untitled,glados123123123123,C#,Thursday 21st of December 2023 03:38:43 PM CDT,"using BepInEx;
using BepInEx.Logging;
using HarmonyLib;
using System;
using System.Collections.Generic;
using System.Collections;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TombsMadnessMod.Patches;
using UnityEngine;
using UnityEngine.PlayerLoop;
using UnityEngine.Windows;
using DunGen;
using Microsoft.VisualBasic.Devices;

namespace TombsMadnessMod
{
    [BepInPlugin(modGUID, modName, modVersion)]

    public class TombsMadnessModBase : BaseUnityPlugin
    {
        private const string modGUID = ""TombVali.TombsMadnessMod"";
        private const string modName = ""Tomb's Madness Mod"";
        private const string modVersion = ""1.0.0.0"";

        private readonly Harmony harmony = new Harmony(modGUID);

        private static TombsMadnessModBase Instance;

        internal ManualLogSource mls;

        void Awake()
        {
            if(Instance == null)
            {
                Instance = null;
            }
            mls = BepInEx.Logging.Logger.CreateLogSource(modGUID);


            mls.LogInfo(""TOMB IN DA SHIZOUCE :)"");
            harmony.PatchAll(typeof(TombsMadnessModBase));
            harmony.PatchAll(typeof(PlayerControlerBPatch));
            harmony.PatchAll(typeof(ForestGiantAI));

        }
        
        void Update()
        {
            GameObject testObject = LC_API.BundleAPI.BundleLoader.GetLoadedAsset<GameObject>(""testobject"");
            Instantiate(testObject);
            mls.LogInfo(""here have a cube"");
        }

    }
}
"
ZZL5XCk3,fin.cp.20231219_stw03_20231222,Dale_Scorcher,Java,Thursday 21st of December 2023 03:31:24 PM CDT,"public class mainCode {

    private static int [][] matrix = {
        {10, 23, 93, 44},
        {22, 34, 25, 3},
        {84, 11, 7, 52},
    };

    public static void addElements () {


        int sum = 0;
        //System.out.print(matrix[0].length);

        for (int i = 0; i <= 2; i++) {
            for (int j = 0; j <= matrix[i].length - 1; j++) {
                if (j == 0 || j == 2) {
                    sum += matrix[i][j];
                }
                //System.out.println(i + "" "" + j);
            }
        }

        System.out.println(""addElement result:"" + sum);

    }

    public static void displayMatrix() {
        System.out.println(""Displaying first and second row of matrix array: "");
        for (int i = 0; i <= 1; i++) {
            for (int j = 0; j <= matrix[i].length - 1; j++) {
                System.out.print(matrix[i][j] + "" "");
                if (j == matrix[i].length -1) {
                    System.out.println("""");
                }
            }
        }
    } 
    
    public static void compareMatrix() {
        int temp = 0;
        for (int i = 0; i <= matrix.length - 1; i++) {
            if (matrix[i][0] >= 0) {
                temp = matrix[i][0];
            } 
        } 

        System.out.println(""The largest number in colum 0 is: "" + temp);
    }
    public static void main(String[] args) {
        addElements();
        displayMatrix();
        compareMatrix();
    }
}"
rtZfK0dK,Untitled,Ilmen,Nim,Thursday 21st of December 2023 03:28:40 PM CDT,"func first_in[T](
   prop: proc (e: T): bool {.noSideEffect.},
   s: seq[T]
): Option[T]

func first_in[T](
   prop: proc (e: T): bool {.noSideEffect.},
   s: seq[T]
): Option[T] =
   for i, e in s:
      if prop(e):
         return some(e)
   return none(T)

func with_optimal_joker_mutation(
   counts: HandCounts
): HandCounts =
   let r: Option[CharCounter] = first_in(
      (e: CharCounter) => (e.item == 'J'), counts)
   if r.isSome:
      let jn = r.get()
      return counts
   else:
      return counts"
AmGu4P7p,Untitled,Ilmen,Nim,Thursday 21st of December 2023 03:27:18 PM CDT,"func first_in[T](
   prop: proc (e: T): bool {.noSideEffect.},
   s: seq[T]
): Option[T]

func with_optimal_joker_mutation(
   counts: HandCounts
): HandCounts =
   let r: Option[CharCounter] = first_in(
      (e: CharCounter) => (e.item == 'J'), counts)
   if r.isSome:
      let jn = r.get()
      return counts
   else:
      return counts

func first_in[T](
   prop: proc (e: T): bool {.noSideEffect.},
   s: seq[T]
): Option[T] =
   for i, e in s:
      if prop(e):
         return some(e)
   return none(T)"
GMFtrscW,G2A Refund Exploit Dec 2023,G2ARefundExploit,GetText,Thursday 21st of December 2023 03:26:01 PM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1AKxSk9vs38aBF7GEDJxf8mNi-_NVRLQ9/view#g2a_refund_exploit.pdf

Working as of 
13 December 2023

720386"
mMYSGrER,Minigame Tower,robinmollen,Lua,Thursday 21st of December 2023 03:21:19 PM CDT,require(15704675315)()
uLCzRBYj,dominorunner,Melvinbossyolosweg,C#,Thursday 21st of December 2023 02:17:32 PM CDT,"	partial class DominoRunner : Node
	{
		readonly string[] events;
		readonly StateChart stateChart;

		string topplingEvent;
		int dominoIndex;

		internal DominoRunner(StateChart stateChart, string[] events)
		{
			this.events = events;
			this.stateChart = stateChart;
		}

		void OnEventReceived(StringName @event)
		{
			GD.Print($""Received {@event}."");
			if (@event != topplingEvent)
			{
				GD.Print($""{@event} was not {topplingEvent}."");
				//return;
			}

			dominoIndex++;

			if (dominoIndex >= events.Length)
			{
				GD.Print(""Finished domino."");
				QueueFree();
				return;
			}

			topplingEvent = events[dominoIndex];

			GD.Print($""Toppling {topplingEvent}, index {dominoIndex}."");
			stateChart.Wrapped.CallDeferred(""send_event"", topplingEvent);
		}

		internal void Topple()
		{
			dominoIndex = 0;
			topplingEvent = events[dominoIndex];

			foreach (string str in events)
			{
				GD.Print($""{str} in domino list."");
			}

			stateChart.Connect(""event_received"", new Callable(this, nameof(OnEventReceived)));
			GD.Print($""Toppling initial event {topplingEvent}, index {dominoIndex}."");
			stateChart.SendEvent(topplingEvent);
		}

		static string[] SortEventsByWeight(string[] events)
		{
			Dictionary<string, int> weights = new()
		{
			{ ""usable"", 1 }
		};

			return events.OrderBy(item => weights.ContainsKey(item) ? weights[item] : 0).ToArray();
		}
	}
"
sTXbQpey,Untitled,TakePen,AutoIt,Thursday 21st of December 2023 01:56:58 PM CDT,"Global Const $afWAYPOINTS = [[7], _
    [-2.637649e+02, -1.050344e+04], _
    [ 2.452009e+03, -1.072666e+04], _
    [ 4.870164e+03, -1.018722e+04], _
    [ 6.135045e+03, -9.591983e+03], _
    [ 8.069568e+03, -8.234096e+03], _
    [ 8.795015e+03, -7.080822e+03], _
    [ 9.092634e+03, -5.778739e+03]]


Global Const $afWAYPOINTS = [[7], _
    [-2.637649e+02, -1.050344e+04], _
    [ 2.452009e+03, -1.072666e+04], _
    [ 4.870164e+03, -1.018722e+04], _
    [ 6.135045e+03, -9.591983e+03], _
    [ 8.069568e+03, -8.234096e+03], _
    [ 8.795015e+03, -7.080822e+03], _
    [ 9.092634e+03, -5.778739e+03]]


Global Const $afWAYPOINTS = [[7], _
    [ -263.7649, -10503.4412], _
    [ 2452.0089, -10726.6555], _
    [ 4870.1637, -10187.2210], _
    [ 6135.0446, -9591.9829], _
    [ 8069.5685, -8234.0960], _
    [ 8795.0149, -7080.8222], _
    [ 9092.6339, -5778.7388]]



_asdgjgfsjf($asdggfhfgjkz, 4.870164e+03, -1.018722e+04)
"
mKmKZvUD,Window-Name,TonyR0XX,Lua,Thursday 21st of December 2023 01:51:07 PM CDT,"--lua
-- Change Window name to Cha name in Talisman Online V.6024
log 'clear' log'mode compact'
local TO = findwindow(""Talisman Online"")

function charName()
    local CHAR_NAME_POINTER = readmem(0x01139C0C, ""d"")
    local name = readmem(CHAR_NAME_POINTER + 0xBC, ""s"", 30)

    if string.match(name, ""^[%w]+$"") then return name
    else
        return readmem(readmem(CHAR_NAME_POINTER + 0xBC, ""d"") + 0x0, ""s"", 30)
    end
end

if TO then
    for i = 1, #TO
    do
        workwindow(TO[i][1])
        local name = charName()
        log(charName())
        setwindowtext(TO[i][1], name)
    end
end"
1TUMiDSH,race_selenium,davide1409,Java,Thursday 21st of December 2023 01:20:14 PM CDT,"package com.example.race_selenium;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;


public class MileEKm {
    @Test
    public void Test_Mile_E_Km(){
        String []token;
        Double mile;

        // ottengo quanto vale in miglia un kilometro
        System.setProperty(""webdriver.chrome.driver"", "".\\driver_selenium\\chromedriver.exe"");
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get(""https://www.unitconverters.net/length/km-to-miles.htm"");
        driver.findElement(By.xpath(""//*[@id=\""ucfrom\""]"")).sendKeys(""1"");
        token = driver.findElement(By.xpath(""//*[@id=\""ucresult\""]"")).getText().split(""="");
        mile = Double.parseDouble(token[1].split("" "")[1]);
        driver.close();
        // --------------------------------------------
        
        Double dimpath = mile*20; // quando sono 20 klm in miglia
        int newSpeed = 75; int oldSpeed = 55;

        // Time = ore
        double newTime = dimpath/newSpeed;
        double oldTime = dimpath/oldSpeed;
        double savedTime = oldTime-newTime; // tempo risparmiato in ore
        double savedTimesec = savedTime*3600; // converto ore in secondi

        double upperboundSec = 10*60;
        double lowerboundSec = 10;

        assertTrue(savedTimesec<=upperboundSec && savedTimesec>=lowerboundSec);
    }
}
"
yWMj2Kdn,Дипломы олимпиады ПГУ,letu,PostgreSQL,Thursday 21st of December 2023 01:18:52 PM CDT,"SELECT entrant.surname || ' ' || entrant.name AS ""ФИО"",
faculty.name AS ""Факультет"",
speciality.name AS ""Специальность"",
(SELECT subject.name FROM subject, prof_subject
WHERE subject.id = prof_subject.subject_id
AND prof_subject.allset_id = allset.id LIMIT 1) AS ""Предмет"",
split_part(documents.data, '#', 2) AS ""Место"",
split_part(documents.data, '#', 1) AS ""ДипломОлимпиадыПГУ""
FROM entrant, documents, allset, speciality, faculty
WHERE entrant.id = documents.entrant_id
AND documents.list_documents_id = 48
AND entrant.allset_id = allset.id
AND allset.speciality_id = speciality.id
AND speciality.faculty_id = faculty.id"
VRbhfaxp,Crop It macro,marcusa3000,Lua,Thursday 21st of December 2023 12:59:52 PM CDT,"{
	Tools = ordered() {
		CropIt = GroupOperator {
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						[""Setting:""] = ""Macros:/""
					}
				},
			},
			Inputs = ordered() {
				Input = InstanceInput {
					SourceOp = ""CrpTrans"",
					Source = ""Input"",
				},
				Mode = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Mode"",
					Page = ""Controls"",
					Default = 0,
				},
				ApplyBlank0 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FixedNest = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""FixedNest"",
					Expression = ""CrpCTRL.Mode==0 and 0 or 1"",
					Page = ""Controls"",
				},
				Width = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""NumberIn5"",
					Page = ""Controls"",
					Default = 500,
				},
				Height = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""NumberIn6"",
					Page = ""Controls"",
					Default = 400,
				},
				ApplyBlank8 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FreeNest = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""FreeNest"",
					Expression = ""CrpCTRL.Mode==1 and 0 or 1"",
					Page = ""Controls"",
				},
				Top = InstanceInput {
					SourceOp = ""CrpPntFrmB"",
					Source = ""Point2"",
					Name = ""Top Right"",
					Page = ""Controls"",
					DefaultX = 0.9,
					DefaultY = 0.9,
				},
				Bottom = InstanceInput {
					SourceOp = ""CrpPntFrmA"",
					Source = ""Point1"",
					Name = ""Bottom Left"",
					Page = ""Controls"",
					DefaultX = 0.1,
					DefaultY = 0.1,
				},
				ApplyBlank10 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				Offset = InstanceInput {
					SourceOp = ""CrpNmbFrmC"",
					Source = ""Center"",
					Name = ""Offset"",
					Page = ""Controls"",
					DefaultX = 0.5,
					DefaultY = 0.5,
				},
				ApplyBlank1 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				Center = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""GuideCenter"",
					Name = ""Center Guides"",
					Page = ""Controls"",
					Default = 0,
				},
				Third = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""GuideThird"",
					Name = ""Rule of Third Guides"",
					Page = ""Controls"",
					Default = 1,
				},
				ApplyBlank7 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FlipHoriz = InstanceInput {
					SourceOp = ""CrpTrans"",
					Source = ""FlipHoriz"",
					ControlGroup = 4,
					Default = 0,
				},
				FlipVert = InstanceInput {
					SourceOp = ""CrpTrans"",
					Source = ""FlipVert"",
					ControlGroup = 4,
					Default = 0,
				},
				Edges = InstanceInput {
					SourceOp = ""CrpTrans"",
					Source = ""Edges"",
					Default = 2,
				},
				AngleNest = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""AngleNest"",
					Name = ""Size and Rotation"",
					Page = ""Controls"",
				},
				ScaleX = InstanceInput {
					SourceOp = ""CrpNmbFrmB"",
					Source = ""Width"",
					Default = 1,
				},
				ScaleY = InstanceInput {
					SourceOp = ""CrpNmbFrmB"",
					Source = ""Height"",
					Expression = ""Width"",
					Default = 1,
				},
				ApplyBlank5 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				AngleInfo = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""AngleInfo"",
					Page = ""Controls"",
				},
				Pivot = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""Center"",
					Page = ""Controls"",
					DefaultX = 0.5,
					DefaultY = 0.5,
				},
				Angle = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""ZRotation"",
					Page = ""Controls"",
					Default = 0,
				},
				ApplyBlank6 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FilterMethod = InstanceInput {
					SourceOp = ""CrpTrans"",
					Source = ""FilterMethod"",
					Default = 2,
				},
				GUINest = InstanceInput {
					SourceOp = ""CrpNmbFrmA"",
					Source = ""GUINest"",
					Name = ""UI Settings"",
					Page = ""Controls"",
				},
				GuideBlend = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""GuideBlend"",
					Page = ""Controls"",
					Default = 0.5,
				},
				Highlight = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Highlight"",
					Page = ""Controls"",
					Default = 0,
				},
				Hue = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Hue"",
					Page = ""Controls"",
					Default = 0,
				},
				ApplyBlank3 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FontBlend = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Size"",
					Page = ""Controls"",
					Default = 0.5,
				},
				FontSize = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""FontSize"",
					Name = ""Size"",
					Page = ""Controls"",
					Default = 48,
				},
				ApplyBlank4 = InstanceInput {
					SourceOp = ""CrpPreMrg"",
					Source = ""ApplyBlank1"",
				},
				FrameBlend = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""FrameBlend"",
					Page = ""Controls"",
					Default = 0.899999976158142,
				},
				Tone = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Tone"",
					Page = ""Controls"",
					Default = 0.100000001490116,
				},
				Blur = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Blur"",
					Page = ""Controls"",
					Default = 3,
				},
				Saturation = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Saturation"",
					Page = ""Controls"",
					Default = 0.5,
				},
				Operation = InstanceInput {
					SourceOp = ""CrpCTRL"",
					Source = ""Operation"",
					Page = ""Controls"",
					Default = 0,
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = ""CrpSwitch"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo {
				Pos = { -330, -775.5 },
				Flags = {
					AllowPan = false,
					GridSnap = true,
					ConnectedSnap = true,
					AutoSnap = true,
					RemoveRouters = true
				},
				Size = { 456, 616.59, 228, 24.2424 },
				Direction = ""Vertical"",
				PipeStyle = ""Direct"",
				Scale = 1,
				Offset = { 0, 0 }
			},
			Tools = ordered() {
				CrpTrans = Transform {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Center = Input { Expression = ""CrpNmbFrmC.Center"", },
						Pivot = Input { Expression = ""CrpNmbFrmA.Center"", },
						UseSizeAndAspect = Input { Value = 0, },
						Size = Input { Expression = ""CrpNmbFrmB.Width"", },
						XSize = Input {
							Value = 1,
							Expression = ""CrpNmbFrmB.Width"",
						},
						YSize = Input {
							Value = 1,
							Expression = ""CrpNmbFrmB.Height"",
						},
						Angle = Input { Expression = ""CrpNmbFrmA.ZRotation"", },
					},
					ViewInfo = OperatorInfo { Pos = { -165, 16.5 } },
				},
				CrpPntFrmA = TriangleMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Point1 = Input { Value = { 0.1, 0.1 }, },
						Point2 = Input { Value = { 0.891447368421053, 0.819444444444444 }, },
						Point3 = Input { Value = { 0.5, 0.9 }, },
						ShowViewControls = Input { Expression = ""1-CrpCTRL.Operation"", },
					},
					ViewInfo = OperatorInfo { Pos = { 0, 49.5 } },
					Colors = { TileColor = { R = 0.6, G = 0.450980392156863, B = 0.627450980392157 }, },
					UserControls = ordered() { Point1 = { INP_DefaultX = 0, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Bottom"", }, Point2 = { INP_DefaultX = 1, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 1, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Top"", }, Point3 = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Offset"", }, ShowViewControls = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""CheckboxControl"", INP_MaxScale = 1, INP_Default = 1, INP_MinAllowed = 0, INP_MinScale = 0, INP_External = true, LINKID_DataType = ""Number"", CBC_TriState = false, INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""Show View Controls"" } }
				},
				CrpPntFrmB = TriangleMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Point1 = Input { Value = { 0.162974, 0.332407407407407 }, },
						Point2 = Input { Value = { 0.9, 0.9 }, },
						Point3 = Input { Value = { 0.690724, 0.509259259259259 }, },
						ShowViewControls = Input { Expression = ""CrpCTRL.Operation==1 and 0 or CrpCTRL.Mode==1 and 0 or 1"", },
					},
					ViewInfo = OperatorInfo { Pos = { 110, 49.5 } },
					Colors = { TileColor = { R = 0.6, G = 0.450980392156863, B = 0.627450980392157 }, },
					UserControls = ordered() { Point1 = { INP_DefaultX = 0, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Bottom"", }, Point2 = { INP_DefaultX = 1, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 1, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Top"", }, Point3 = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Offset"", }, ShowViewControls = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""CheckboxControl"", INP_MaxScale = 1, INP_Default = 1, INP_External = true, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", INP_Passive = true, CBC_TriState = false, LINKS_Name = ""Show View Controls"" } }
				},
				CrpNmbFrmA = PolylineMask {
					DrawMode = ""ClickAppend"",
					DrawMode2 = ""InsertAndModify"",
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						OutputSize = Input { Value = FuID { ""Custom"" }, },
						MaskWidth = Input { Value = 608, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Polyline = Input {
							Value = Polyline {
							},
						},
						Polyline2 = Input {
							Value = Polyline {
							},
							Disabled = true,
						},
						ShowViewControls = Input { Expression = ""CrpNmbFrmA.AngleNest==0 and 0 or CrpCTRL.Operation==1 and 0 or 1"", },
						FixedNest = Input { Expression = ""CrpCTRL.Mode==0 and 0 or 1"", },
						FreeNest = Input { Expression = ""CrpCTRL.Mode==1 and 0 or 1"", },
					},
					ViewInfo = OperatorInfo { Pos = { -55, 82.5 } },
					Colors = { TileColor = { R = 0.6, G = 0.450980392156863, B = 0.627450980392157 }, },
					UserControls = ordered() { ShowViewControls = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""CheckboxControl"", INP_MaxScale = 1, INP_Default = 1, INP_External = true, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", INP_Passive = true, CBC_TriState = false, LINKS_Name = ""Show View Controls"" }, AngleNest = { INP_Integer = false, LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 8, INP_Default = 0, LINKID_DataType = ""Number"", INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""Angle Nest"", }, GUINest = { INP_Integer = false, LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 11, INP_Default = 0, LINKID_DataType = ""Number"", INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""GUI Nest"", }, FixedNest = { INP_Integer = false, LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 3, LINKS_Name = ""Fixed Nest"", LINKID_DataType = ""Number"", INP_Passive = true, LBLC_NestLevel = 1, ICS_ControlPage = ""Controls"", IC_Visible = false, }, FreeNest = { INP_Integer = false, LBLC_DropDownButton = true, INPID_InputControl = ""LabelControl"", LBLC_NumInputs = 1, LINKS_Name = ""Free Nest"", LINKID_DataType = ""Number"", INP_Passive = true, LBLC_NestLevel = 1, ICS_ControlPage = ""Controls"", IC_Visible = false, }, Center = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""DiagonalCross"", LINKS_Name = ""Pivot"", }, ZRotation = { INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""ScrewControl"", IC_Steps = 3601, INP_MaxScale = 360, INP_Default = 0, INPID_PreviewControl = ""AngleControl"", INP_MinAllowed = -1000000, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", INP_MinScale = 0, LINKS_Name = ""Angle"" }, AngleInfo = { INP_MaxAllowed = 1000000, INP_Integer = false, LBLC_DropDownButton = false, INPID_InputControl = ""LabelControl"", INP_MaxScale = 1, INP_MinScale = 0, INP_MinAllowed = -1000000, LINKID_DataType = ""Number"", INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""Tip: Set Pivot before Offset and Angle"" } }
				},
				CrpCTRL = Custom {
					CtrlWShown = false,
					NameSet = true,
					CustomData = {
						Settings = {
						}
					},
					Inputs = {
						Blend = Input { Value = 0.9, },
						LUTIn1 = Input {
							SourceOp = ""CrpCTRLLUTIn1"",
							Source = ""Value"",
						},
						LUTIn2 = Input {
							SourceOp = ""CrpCTRLLUTIn2"",
							Source = ""Value"",
						},
						LUTIn3 = Input {
							SourceOp = ""CrpCTRLLUTIn3"",
							Source = ""Value"",
						},
						LUTIn4 = Input {
							SourceOp = ""CrpCTRLLUTIn4"",
							Source = ""Value"",
						},
						NumberControls = Input { Value = 1, },
						ShowNumber1 = Input { Value = 0, },
						NameforNumber1 = Input { Value = ""asdfadf"", },
						ShowNumber2 = Input { Value = 0, },
						ShowNumber3 = Input { Value = 0, },
						ShowNumber4 = Input { Value = 0, },
						NameforNumber5 = Input { Value = ""Width"", },
						NameforNumber6 = Input { Value = ""Height"", },
						ShowNumber7 = Input { Value = 0, },
						NameforNumber7 = Input { Value = ""Angle"", },
						ShowNumber8 = Input { Value = 0, },
						NameforNumber8 = Input { Value = ""Size"", },
						PointControls = Input { Value = 1, },
						ShowPoint1 = Input { Value = 0, },
						NameforPoint1 = Input { Value = ""TopORG"", },
						NameforPoint2 = Input { Value = ""Bottom"", },
						NameforPoint3 = Input { Value = ""Fixed Size"", },
						NameforPoint4 = Input { Value = ""Top"", },
						ShowLUT1 = Input { Value = 0, },
						ShowLUT2 = Input { Value = 0, },
						ShowLUT3 = Input { Value = 0, },
						ShowLUT4 = Input { Value = 0, },
						Offset = Input {
							SourceOp = ""Publish8_4"",
							Source = ""Value"",
						},
						Preview = Input { Expression = ""Operation==1 and 0 or 1"", },
						Tone = Input { Value = 0.1, },
						GuideBlend = Input { Value = 1, },
						Highlight = Input { Value = 0, },
						NumberIn1 = Input { Value = 0, },
						PointIn1 = Input { Value = { -0.289473684210526, 0.665740740740741 }, },
						PointIn2 = Input {
							Value = { 0.146381578947368, 0.332407407407407 },
							Expression = ""CrpPntFrmA.Point1"",
						},
						FontSize = Input { Value = 48, },
						FrameBlend = Input { Value = 0.9, },
						NumberIn8 = Input { Value = 0, },
						NumberIn7 = Input { Value = -20.9, },
						PointIn4 = Input {
							Value = { 0.891447368421053, 0.841666666666667 },
							Expression = ""CrpPntFrmB.Point2"",
						},
						NumberIn5 = Input { Value = 400, },
						NumberIn6 = Input { Value = 400, },
						PointIn3 = Input {
							Value = { 42, 42 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X+((1/CrpTrans.Input.Width)*CrpCTRL.NumberIn5), CrpCTRL.PointIn2.Y+((1/CrpTrans.Input.Height)*CrpCTRL.NumberIn6)) or Point(42, 42)"",
						},
						Operation = Input { Value = 0, },
						Topapa = Input {
							Value = { 0.880447, 0.878667 },
							Expression = ""CrpPntFrmB.Point2"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 115.5 } },
					Colors = { TileColor = { R = 0.584313725490196, G = 0.294117647058824, B = 0.803921568627451 }, },
					UserControls = ordered() { Offset = { INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", INP_External = false, INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""Offset"", }, Preview = { CBC_TriState = false, INP_Integer = false, LINKID_DataType = ""Number"", INP_Default = 1, ICS_ControlPage = ""Controls"", INPID_InputControl = ""CheckboxControl"", LINKS_Name = ""Preview"", }, Tone = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.100000001490116, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", INP_External = false, ICS_ControlPage = ""Controls"", LINKS_Name = ""Tone"" }, GuideBlend = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.5, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Guide Blend"" }, GuideCenter = { CBC_TriState = false, INP_Integer = false, ICS_ControlPage = ""Controls"", INP_Default = 1, INP_External = false, LINKID_DataType = ""Number"", INP_Passive = true, INPID_InputControl = ""CheckboxControl"", LINKS_Name = ""Guide Center"", }, GuideThird = { CBC_TriState = false, INP_Integer = false, ICS_ControlPage = ""Controls"", INP_Default = 0, INP_External = false, LINKID_DataType = ""Number"", INP_Passive = true, INPID_InputControl = ""CheckboxControl"", LINKS_Name = ""Guide Third"", }, Highlight = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.5, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Highlight"" }, Hue = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Hue"" }, NumberIn1 = { INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 5, INP_Default = 1, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", ICD_Center = 1, LINKS_Name = ""Size"" }, PointIn1 = { INP_DefaultX = 1, INP_DefaultY = 1, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", LINKS_Name = ""Top"", }, PointIn2 = { INP_DefaultX = 0, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Bottom"", }, FontSize = { INP_MaxAllowed = 1000000, INP_Integer = true, INPID_InputControl = ""SliderControl"", INP_MaxScale = 60, INP_Default = 30, INP_MinScale = 15, INP_MinAllowed = 8, LINKID_DataType = ""Number"", INP_External = false, ICS_ControlPage = ""Controls"", LINKS_Name = ""Font Size"" }, Size = { INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.5, INP_MinScale = 0, INP_MinAllowed = -1000000, LINKID_DataType = ""Number"", INP_External = false, ICS_ControlPage = ""Controls"", LINKS_Name = ""Font Blend"" }, Saturation = { INP_MaxAllowed = 2, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.5, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", INP_External = false, ICS_ControlPage = ""Controls"", LINKS_Name = ""Saturation"" }, FrameBlend = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 1, INP_Default = 0.899999976158142, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", INP_External = false, ICS_ControlPage = ""Controls"", LINKS_Name = ""Frame Blend"" }, NumberIn8 = { INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""SliderControl"", INP_MaxScale = 5, INP_Default = 1, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", ICD_Center = 1, LINKS_Name = ""Size"" }, NumberIn7 = { INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""ScrewControl"", IC_Steps = 3601, INP_MaxScale = 360, INP_MinScale = 0, INP_MinAllowed = -1000000, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Angle"" }, PointIn4 = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.600000023841858, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""TopCtrl"", }, NumberIn5 = { INP_MaxAllowed = 1000000, INP_Integer = true, INPID_InputControl = ""ScrewControl"", INP_MaxScale = 242, INP_Default = 42, INP_MinScale = 1, INP_MinAllowed = 1, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Width"" }, NumberIn6 = { INP_MaxAllowed = 1000000, INP_Integer = true, INPID_InputControl = ""ScrewControl"", INP_MaxScale = 242, INP_Default = 42, INP_MinScale = 1, INP_MinAllowed = 1, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", LINKS_Name = ""Height"" }, Mode = { { MBTNC_AddButton = ""Free"" }, { MBTNC_AddButton = ""Fixed"" }, INP_MaxAllowed = 1000000, INP_Integer = false, INPID_InputControl = ""MultiButtonControl"", MBTNC_ShowBasicButton = true, INP_MaxScale = 1, INP_Default = 0, ICS_ControlPage = ""Controls"", INP_MinScale = 0, INP_MinAllowed = -1000000, LINKID_DataType = ""Number"", MBTNC_ShowName = false, MBTNC_StretchToFit = false, MBTNC_ShowToolTip = false, LINKS_Name = ""Mode"" }, PointIn3 = { INPID_PreviewControl = ""CrosshairControl"", LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""Circle"", LINKS_Name = ""Fixed Size"", }, Operation = { { MBTNC_AddButton = ""Preview"" }, { MBTNC_AddButton = ""Just Crop It"" }, INP_Integer = false, INPID_InputControl = ""MultiButtonControl"", MBTNC_ShowBasicButton = true, INP_Default = 9, ICS_ControlPage = ""Controls"", LINKID_DataType = ""Number"", MBTNC_ShowName = false, MBTNC_StretchToFit = false, MBTNC_ShowToolTip = false, LINKS_Name = ""Operation"", }, Blur = { INP_MaxAllowed = 20, INP_Integer = true, INPID_InputControl = ""SliderControl"", INP_MaxScale = 10, INP_Default = 3, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", ICD_Center = 3, LINKS_Name = ""Blur"" }, Pivot = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""DiagonalCross"", LINKS_Name = ""Pivot"", }, Topapa = { ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", LINKID_DataType = ""Point"", LINKS_Name = ""Topapa"", }, OffsetNew = { INP_DefaultX = 0.5, INPID_PreviewControl = ""CrosshairControl"", INP_DefaultY = 0.5, LINKID_DataType = ""Point"", ICS_ControlPage = ""Controls"", INPID_InputControl = ""OffsetControl"", CHC_Style = ""NormalCross"", LINKS_Name = ""Offset New"", } }
				},
				CrpCTRLLUTIn1 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 204, Green = 0, Blue = 0 },
					CtrlWZoom = false,
				},
				CrpCTRLLUTIn2 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 0, Green = 204, Blue = 0 },
					CtrlWZoom = false,
				},
				CrpCTRLLUTIn3 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 0, Green = 0, Blue = 204 },
					CtrlWZoom = false,
				},
				CrpCTRLLUTIn4 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 204, Green = 204, Blue = 204 },
					CtrlWZoom = false,
				},
				Publish8_4 = PublishPoint {
					CtrlWZoom = false,
					Inputs = {
						Value = Input { Value = { 0.667763157894737, 0.5 }, },
					},
				},
				CrpBlur = Blur {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrame"",
							Source = ""Mask"",
						},
						Filter = Input { Value = FuID { ""Box"" }, },
						XBlurSize = Input {
							Value = 3,
							Expression = ""CrpCTRL.Blur"",
						},
						ClippingMode = Input { Value = FuID { ""Domain"" }, },
						Input = Input {
							SourceOp = ""CrpCD"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 0, 181.5 } },
				},
				CrpCD = ChangeDepth {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Depth = Input { Value = 1, },
						Input = Input {
							SourceOp = ""CrpTrans"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -110, 181.5 } },
				},
				Filter1 = Filter {
					CtrlWShown = false,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrame"",
							Source = ""Mask"",
						},
						Blend = Input { Value = 0.5, },
						FilterType = Input { Value = 6, },
						Power = Input {
							Value = 2,
							Expression = ""CrpCTRL.Blur/2"",
						},
						Animated = Input { Value = 0, },
						Input = Input {
							SourceOp = ""CrpBlur"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 0, 214.5 } },
				},
				CrpThird = PaintMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Level = Input {
							Value = 0,
							Expression = ""(1*CrpCTRL.GuideThird)*CrpCTRL.GuideBlend"",
						},
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						PaintMode = Input { Value = FuID { ""None"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Paint = Input {
							SourceOp = ""PolylineStroke6"",
							Source = ""Out"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 165, 247.5 } },
				},
				PolylineStroke6 = PolylineStroke {
					Points = {
					},
					IsThreaded = true,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									PolylineStroke6 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0.786184210526316, 1 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3)*2, 1.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3)*2, 1.0)"" }, Paint = Input { SourceOp = ""PolylineStroke5"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 0.786184210526316, 0 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3)*2, 0.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3)*2, 0.0)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.5, X = 0.286184210526316, Linear = true, RY = -0.333333333333333, PublishID = ""Point0"", RX = 0 }, { Y = -0.5, X = 0.286184210526316, Linear = true, PublishID = ""Point1"", LY = 0.333333333333333, LX = 0 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
										}, CtrlWZoom = false, IsThreaded = true, Points = {
										}, Brushes = { ""CircleBrush"" } },
									PolylineStroke5 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0.43859649122807, 1 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 1.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.Topapa.X - CTRLCrop.PointIn2.X)/3), 1.0)"" }, Paint = Input { SourceOp = ""PolylineStroke4"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 0.43859649122807, 0 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 0.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.Topapa.X - CTRLCrop.PointIn2.X)/3), 0.0)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.5, X = -0.0614035087719298, Linear = true, RY = -0.333333333333333, PublishID = ""Point0"", RX = 0 }, { Y = -0.5, X = -0.0614035087719298, Linear = true, PublishID = ""Point1"", LY = 0.333333333333333, LX = 0 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke5 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0.5, 1 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 1.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3), 1.0)"" }, Paint = Input { SourceOp = ""PolylineStroke4"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 0.5, 0 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 0.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3), 0.0)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.5, X = 0, Linear = true, RY = -0.333333333333333, PublishID = ""Point0"", RX = 0 }, { Y = -0.5, X = 0, Linear = true, PublishID = ""Point1"", LY = 0.333333333333333, LX = 0 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } },
														PolylineStroke4 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0645061728395062, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0645061728395062, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
															}, CurrentSettings = 2, CustomData = {
																Settings = {
																	[1] = {
																		Tools = ordered() {
																			PolylineStroke4 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0916666666666667, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0916666666666667, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
																				}, CtrlWZoom = false, IsThreaded = true, Points = {
																				}, Brushes = { ""CircleBrush"" } },
																			PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
																				}, CurrentSettings = 2, CustomData = {
																					Settings = {
																						[1] = {
																							Tools = ordered() {
																								PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
																									}, CtrlWZoom = false, IsThreaded = true, Points = {
																									}, Brushes = { ""CircleBrush"" } }
																							}
																						}
																					}
																				} }
																		}
																	}
																}
															} },
														PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
															}, CurrentSettings = 2, CustomData = {
																Settings = {
																	[1] = {
																		Tools = ordered() {
																			PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
																				}, CtrlWZoom = false, IsThreaded = true, Points = {
																				}, Brushes = { ""CircleBrush"" } }
																		}
																	}
																}
															} }
													}
												}
											}
										} },
									PolylineStroke4 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0645061728395062, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0645061728395062, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke4 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0916666666666667, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0916666666666667, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } },
														PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
															}, CurrentSettings = 2, CustomData = {
																Settings = {
																	[1] = {
																		Tools = ordered() {
																			PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
																				}, CtrlWZoom = false, IsThreaded = true, Points = {
																				}, Brushes = { ""CircleBrush"" } }
																		}
																	}
																}
															} }
													}
												}
											}
										} },
									PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } }
													}
												}
											}
										} }
								}
							}
						}
					},
					Inputs = {
						Paint = Input {
							SourceOp = ""PolylineStroke5"",
							Source = ""Out"",
						},
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""PolylineStroke3.CircleBrush.Size"",
						},
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = 0.0679859293447977, Y = 0.5, RX = 0, RY = -0.333333333333333, PublishID = ""Point0"" },
									{ Linear = true, X = 0.0679859293447977, Y = -0.5, LX = 0, LY = 0.333333333333333, PublishID = ""Point1"" }
								}
							},
						},
						Point0 = Input {
							Value = { 0.567985929344798, 1 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X + ((CrpCTRL.PointIn3.X - CrpCTRL.PointIn2.X)/3)*2, 1.0) or Point(CrpCTRL.PointIn2.X + ((CrpCTRL.Topapa.X - CrpCTRL.PointIn2.X)/3)*2, 1.0)"",
						},
						Point1 = Input {
							Value = { 0.567985929344798, 0 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X + ((CrpCTRL.PointIn3.X - CrpCTRL.PointIn2.X)/3)*2, 0.0) or Point(CrpCTRL.PointIn2.X + ((CrpCTRL.Topapa.X - CrpCTRL.PointIn2.X)/3)*2, 0.0)"",
						},
					},
				},
				PolylineStroke5 = PolylineStroke {
					Points = {
					},
					IsThreaded = true,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									PolylineStroke5 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0.5, 1 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 1.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3), 1.0)"" }, Paint = Input { SourceOp = ""PolylineStroke4"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 0.5, 0 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/3), 0.0) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/3), 0.0)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.5, X = 0, Linear = true, RY = -0.333333333333333, PublishID = ""Point0"", RX = 0 }, { Y = -0.5, X = 0, Linear = true, PublishID = ""Point1"", LY = 0.333333333333333, LX = 0 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
										}, CtrlWZoom = false, IsThreaded = true, Points = {
										}, Brushes = { ""CircleBrush"" } },
									PolylineStroke4 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.435493827160494 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0645061728395062, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0645061728395062, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke4 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0916666666666667, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0916666666666667, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } },
														PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
															}, CurrentSettings = 2, CustomData = {
																Settings = {
																	[1] = {
																		Tools = ordered() {
																			PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
																				}, CtrlWZoom = false, IsThreaded = true, Points = {
																				}, Brushes = { ""CircleBrush"" } }
																		}
																	}
																}
															} }
													}
												}
											}
										} },
									PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } }
													}
												}
											}
										} }
								}
							}
						}
					},
					Inputs = {
						Paint = Input {
							SourceOp = ""PolylineStroke4"",
							Source = ""Out"",
						},
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""PolylineStroke3.CircleBrush.Size"",
						},
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = -0.155024964423754, Y = 0.5, RX = 0, RY = -0.333333333333333, PublishID = ""Point0"" },
									{ Linear = true, X = -0.155024964423754, Y = -0.5, LX = 0, LY = 0.333333333333333, PublishID = ""Point1"" }
								}
							},
						},
						Point0 = Input {
							Value = { 0.344975035576246, 1 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X + ((CrpCTRL.PointIn3.X - CrpCTRL.PointIn2.X)/3), 1.0) or Point(CrpCTRL.PointIn2.X + ((CrpCTRL.Topapa.X - CrpCTRL.PointIn2.X)/3), 1.0)"",
						},
						Point1 = Input {
							Value = { 0.344975035576246, 0 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X + ((CrpCTRL.PointIn3.X - CrpCTRL.PointIn2.X)/3), 0.0) or Point(CrpCTRL.PointIn2.X + ((CrpCTRL.Topapa.X - CrpCTRL.PointIn2.X)/3), 0.0)"",
						},
					},
				},
				PolylineStroke4 = PolylineStroke {
					Points = {
					},
					IsThreaded = true,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									PolylineStroke4 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Paint = Input { SourceOp = ""PolylineStroke3"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.408333333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3))"" }, Polyline = Input { Value = Polyline { Points = { { Y = -0.0916666666666667, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = -0.0916666666666667, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke3.CircleBrush.Size"" } }, CustomData = {
										}, CtrlWZoom = false, IsThreaded = true, Points = {
										}, Brushes = { ""CircleBrush"" } },
									PolylineStroke3 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.677469135802469 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.Topapa.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.177469135802469, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.177469135802469, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CtrlWZoom = false, IsThreaded = true, Brushes = { ""CircleBrush"" }, ApplyModes = { ""PaintApplyColor"" }, Points = {
										}, CurrentSettings = 2, CustomData = {
											Settings = {
												[1] = {
													Tools = ordered() {
														PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
															}, CtrlWZoom = false, IsThreaded = true, Points = {
															}, Brushes = { ""CircleBrush"" } }
													}
												}
											}
										} }
								}
							}
						}
					},
					Inputs = {
						Paint = Input {
							SourceOp = ""PolylineStroke3"",
							Source = ""Out"",
						},
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""PolylineStroke3.CircleBrush.Size"",
						},
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = -0.5, Y = -0.0253342370190197, RX = 0.333333333333333, RY = 0, PublishID = ""Point0"" },
									{ Linear = true, X = 0.5, Y = -0.0253342370190197, LX = -0.333333333333333, LY = 0, PublishID = ""Point1"" }
								}
							},
						},
						Point0 = Input {
							Value = { 0, 0.47466576298098 },
							Expression = ""CrpCTRL.Mode==1 and Point(0.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.PointIn3.Y - CrpCTRL.PointIn2.Y)/3)) or Point(0.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.Topapa.Y - CrpCTRL.PointIn2.Y)/3))"",
						},
						Point1 = Input {
							Value = { 1, 0.47466576298098 },
							Expression = ""CrpCTRL.Mode==1 and Point(1.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.PointIn3.Y - CrpCTRL.PointIn2.Y)/3)) or Point(1.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.Topapa.Y - CrpCTRL.PointIn2.Y)/3))"",
						},
					},
				},
				PolylineStroke3 = PolylineStroke {
					Points = {
					},
					IsThreaded = true,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									PolylineStroke3 = PolylineStroke { ApplyModes = { ""PaintApplyColor"" }, Inputs = { Point0 = Input { Value = { 0, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(0.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.623148148148148 }, Expression = ""CTRLCrop.Mode==1 and Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/3)*2) or Point(1.0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/3)*2)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.123148148148148, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.123148148148148, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, CustomData = {
										}, CtrlWZoom = false, IsThreaded = true, Points = {
										}, Brushes = { ""CircleBrush"" } }
								}
							}
						}
					},
					Inputs = {
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""1/CrpTrans.Output.Width"",
						},
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = -0.5, Y = 0.0928360739502043, RX = 0.333333333333333, RY = 0, PublishID = ""Point0"" },
									{ Linear = true, X = 0.5, Y = 0.0928360739502043, LX = -0.333333333333333, LY = 0, PublishID = ""Point1"" }
								}
							},
						},
						Point0 = Input {
							Value = { 0, 0.592836073950204 },
							Expression = ""CrpCTRL.Mode==1 and Point(0.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.PointIn3.Y - CrpCTRL.PointIn2.Y)/3)*2) or Point(0.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.Topapa.Y - CrpCTRL.PointIn2.Y)/3)*2)"",
						},
						Point1 = Input {
							Value = { 1, 0.592836073950204 },
							Expression = ""CrpCTRL.Mode==1 and Point(1.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.PointIn3.Y - CrpCTRL.PointIn2.Y)/3)*2) or Point(1.0, CrpCTRL.PointIn2.Y + ((CrpCTRL.Topapa.Y - CrpCTRL.PointIn2.Y)/3)*2)"",
						},
					},
				},
				CrpSat = BrightnessContrast {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Saturation = Input {
							Value = 0.5,
							Expression = ""CrpCTRL.Saturation"",
						},
						Input = Input {
							SourceOp = ""Filter1"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 255.242 } },
				},
				CrpTone = BrightnessContrast {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input {
							Value = 0.9,
							Expression = ""CrpCTRL.FrameBlend"",
						},
						Gain = Input {
							Value = 0.1,
							Expression = ""CrpCTRL.Tone"",
						},
						Lift = Input {
							Value = 0.1,
							Expression = ""Gain"",
						},
						Input = Input {
							SourceOp = ""CrpSat"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -55, 288.242 } },
				},
				CrpTarget = PaintMask {
					CtrlWShown = false,
					NameSet = true,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									CrpTarget = PaintMask { Inputs = { Paint = Input { SourceOp = ""PolylineStroke2_1"", Source = ""Out"" }, PaintMode = Input { Value = FuID { ""Maximum"" } }, MaskWidth = Input { Value = 1080 }, PixelAspect = Input { Value = { 1, 1 } }, EffectMask = Input { SourceOp = ""CrpThird"", Source = ""Mask"" }, ClippingMode = Input { Value = FuID { ""None"" } }, Filter = Input { Value = FuID { ""Fast Gaussian"" } }, Level = Input { Expression = ""CTRLCrop.GuideCenter*CTRLCrop.GuideBlend"" }, UseFrameFormatSettings = Input { Value = 1 }, MaskHeight = Input { Value = 1080 } }, CtrlWZoom = false, NameSet = true, ViewInfo = OperatorInfo { Pos = { 385, 412.5 } }, CustomData = {
										} },
									PolylineStroke2_1 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0.547222222222222, 0.227407407407407 } }, Paint = Input { SourceOp = ""PolylineStroke1_1"", Source = ""Out"" }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, ApplyControls = Input { Value = 0 }, Point1 = Input { Value = { 0.544444444444444, 0.476296296296296 } }, Polyline = Input { Value = Polyline { Points = { { Y = 0.5, X = 0.125822368421053, Linear = true, RY = -0.333333333333333, PublishID = ""Point4"", RX = 0 }, { Y = -0.5, X = 0.125822368421053, Linear = true, PublishID = ""Point5"", LY = 0.333333333333333, LX = 0 } } } }, Point5 = Input { Value = { 0.625822368421053, 0 }, Expression = ""Point(Point4.X, 0)"" }, Point3 = Input { Value = { 0.544444444444444, 0.476296296296296 } }, Spacing = Input { Value = 1 }, StrokeControls = Input { Value = 1 }, Point4 = Input { Value = { 0.625822368421053, 1 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn3.X - CTRLCrop.PointIn2.X)/2), 1) or Point(CTRLCrop.PointIn2.X + ((CTRLCrop.PointIn1.X - CTRLCrop.PointIn2.X)/2), 1)"" }, Point2 = Input { Value = { 0.547222222222222, 0.227407407407407 } }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""PolylineStroke1_1.CircleBrush.Size"" } }, ApplyModes = { ""PaintApplyColor"" }, CtrlWZoom = false, IsThreaded = false, Points = {
										}, Brushes = { ""CircleBrush"" } },
									PolylineStroke1_1 = PolylineStroke { Inputs = { Point0 = Input { Value = { 0, 0.520833333333333 }, Expression = ""CTRLCrop.Mode==1 and Point(0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn3.Y - CTRLCrop.PointIn2.Y)/2)) or Point(0, CTRLCrop.PointIn2.Y + ((CTRLCrop.PointIn1.Y - CTRLCrop.PointIn2.Y)/2))"" }, StrokeControls = Input { Value = 1 }, BrushShape = Input { Value = FuID { ""CircleBrush"" } }, Spacing = Input { Value = 1 }, Point1 = Input { Value = { 1, 0.520833333333333 }, Expression = ""Point(1.0, Point0.Y)"" }, Polyline = Input { Value = Polyline { Points = { { Y = 0.0208333333333333, X = -0.5, Linear = true, RY = 0, PublishID = ""Point0"", RX = 0.333333333333333 }, { Y = 0.0208333333333333, X = 0.5, Linear = true, PublishID = ""Point1"", LY = 0, LX = -0.333333333333333 } } } }, BrushControls = Input { Value = 1 }, [""CircleBrush.Size""] = Input { Value = 0.00164473684210526, Expression = ""1/CrpTrans.Output.Width"" } }, ApplyModes = { ""PaintApplyColor"" }, CtrlWZoom = false, IsThreaded = false, Points = {
										}, Brushes = { ""CircleBrush"" } }
								}
							}
						}
					},
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpThird"",
							Source = ""Mask"",
						},
						Level = Input { Expression = ""CrpCTRL.GuideCenter*CrpCTRL.GuideBlend"", },
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						PaintMode = Input { Value = FuID { ""Maximum"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Paint = Input {
							SourceOp = ""PolylineStroke2_1"",
							Source = ""Out"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 165, 280.5 } },
				},
				PolylineStroke2_1 = PolylineStroke {
					Points = {
					},
					IsThreaded = false,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					Inputs = {
						Paint = Input {
							SourceOp = ""PolylineStroke1_1"",
							Source = ""Out"",
						},
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""PolylineStroke1_1.CircleBrush.Size"",
						},
						ApplyControls = Input { Value = 0, },
						StrokeControls = Input { Value = 1, },
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = -0.043519517539478, Y = 0.5, RX = 0, RY = -0.333333333333333, PublishID = ""Point4"" },
									{ Linear = true, X = -0.043519517539478, Y = -0.5, LX = 0, LY = 0.333333333333333, PublishID = ""Point5"" }
								}
							},
						},
						Point0 = Input { Value = { 0.547222222222222, 0.227407407407407 }, },
						Point1 = Input { Value = { 0.544444444444444, 0.476296296296296 }, },
						Point2 = Input { Value = { 0.547222222222222, 0.227407407407407 }, },
						Point3 = Input { Value = { 0.544444444444444, 0.476296296296296 }, },
						Point4 = Input {
							Value = { 0.456480482460522, 1 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X + ((CrpCTRL.PointIn3.X - CrpCTRL.PointIn2.X)/2), 1) or Point(CrpCTRL.PointIn2.X + ((CrpCTRL.Topapa.X - CrpCTRL.PointIn2.X)/2), 1)"",
						},
						Point5 = Input {
							Value = { 0.456480482460522, 0 },
							Expression = ""Point(Point4.X, 0)"",
						},
					},
				},
				PolylineStroke1_1 = PolylineStroke {
					Points = {
					},
					IsThreaded = false,
					Brushes = { ""CircleBrush"" },
					ApplyModes = { ""PaintApplyColor"" },
					CtrlWZoom = false,
					Inputs = {
						BrushControls = Input { Value = 1, },
						BrushShape = Input { Value = FuID { ""CircleBrush"" }, },
						[""CircleBrush.Size""] = Input {
							Value = 0.000925925925925926,
							Expression = ""1/CrpTrans.Output.Width"",
						},
						StrokeControls = Input { Value = 1, },
						Spacing = Input { Value = 1, },
						Polyline = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, X = -0.5, Y = 0.0337509184655924, RX = 0.333333333333333, RY = 0, PublishID = ""Point0"" },
									{ Linear = true, X = 0.5, Y = 0.0337509184655924, LX = -0.333333333333333, LY = 0, PublishID = ""Point1"" }
								}
							},
						},
						Point0 = Input {
							Value = { 0, 0.533750918465592 },
							Expression = ""CrpCTRL.Mode==1 and Point(0, CrpCTRL.PointIn2.Y + ((CrpCTRL.PointIn3.Y - CrpCTRL.PointIn2.Y)/2)) or Point(0, CrpCTRL.PointIn2.Y + ((CrpCTRL.Topapa.Y - CrpCTRL.PointIn2.Y)/2))"",
						},
						Point1 = Input {
							Value = { 1, 0.533750918465592 },
							Expression = ""Point(1.0, Point0.Y)"",
						},
					},
				},
				CrpCrop = Crop {
					CtrlWShown = false,
					NameSet = true,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									CrpCrop = Crop { Inputs = { YSize = Input { Value = 400, Expression = ""CTRLCrop.Mode==1 and math.abs(((CrpTone.Output.Height/1)*CTRLCrop.PointIn3.Y)-((CrpTone.Output.Height/1)*CTRLCrop.PointIn2.Y)) or math.abs(((CrpTone.Output.Height/1)*CTRLCrop.PointIn1.Y)-((CrpTone.Output.Height/1)*CTRLCrop.PointIn2.Y))"" }, XOffset = Input { Value = 28, Expression = ""((CrpTone.Output.Width/1)*CTRLCrop.PointIn2.X)"" }, XSize = Input { Value = 500, Expression = ""CTRLCrop.Mode==1 and math.abs(((CrpTone.Output.Width/1)*CTRLCrop.PointIn3.X)-((CrpTone.Output.Width/1)*CTRLCrop.PointIn2.X)) or math.abs(((CrpTone.Output.Width/1)*CTRLCrop.PointIn1.X)-((CrpTone.Output.Width/1)*CTRLCrop.PointIn2.X))"" }, Input = Input { SourceOp = ""CrpTrans"", Source = ""Output"" }, YOffset = Input { Value = 371, Expression = ""((CrpTone.Output.Height/1)*CTRLCrop.PointIn2.Y)"" } }, CtrlWZoom = false, NameSet = true, ViewInfo = OperatorInfo { Pos = { 55, 445.5 } }, CustomData = {
										} }
								}
							}
						}
					},
					Inputs = {
						XOffset = Input {
							Value = 132,
							Expression = ""((CrpTone.Output.Width/1)*CrpCTRL.PointIn2.X)"",
						},
						YOffset = Input {
							Value = 684,
							Expression = ""((CrpTone.Output.Height/1)*CrpCTRL.PointIn2.Y)"",
						},
						XSize = Input {
							Value = 723,
							Expression = ""CrpCTRL.Mode==1 and math.abs(((CrpTone.Output.Width/1)*CrpCTRL.PointIn3.X)-((CrpTone.Output.Width/1)*CrpCTRL.PointIn2.X)) or math.abs(((CrpTone.Output.Width/1)*CrpCTRL.PointIn4.X)-((CrpTone.Output.Width/1)*CrpCTRL.PointIn2.X))"",
						},
						YSize = Input {
							Value = 681,
							Expression = ""CrpCTRL.Mode==1 and math.abs(((CrpTone.Output.Height/1)*CrpCTRL.PointIn3.Y)-((CrpTone.Output.Height/1)*CrpCTRL.PointIn2.Y)) or math.abs(((CrpTone.Output.Height/1)*CrpCTRL.PointIn4.Y)-((CrpTone.Output.Height/1)*CrpCTRL.PointIn2.Y))"",
						},
						Input = Input {
							SourceOp = ""CrpTrans"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -165, 313.5 } },
				},
				CrpPreMrg = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrame"",
							Source = ""Mask"",
						},
						Background = Input {
							SourceOp = ""Filter1"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""CrpTone"",
							Source = ""Output"",
						},
						Operator = Input { Value = FuID { ""Conjoint"" }, },
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 0, 313.5 } },
				},
				CrpFrame = PolylineMask {
					DrawMode = ""InsertAndModify"",
					DrawMode2 = ""InsertAndModify"",
					CtrlWShown = false,
					NameSet = true,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									CrpFrame = PolylineMask { CtrlWZoom = false, Inputs = { Point0 = Input { Value = { 0.0707236842105262, 0.939814814814815 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn2.X, CTRLCrop.PointIn3.Y) or Point(CTRLCrop.PointIn2.X, CTRLCrop.PointIn1.Y)"" }, MaskHeight = Input { Value = 1080 }, MaskWidth = Input { Value = 1080 }, PixelAspect = Input { Value = { 1, 1 } }, EffectMask = Input { SourceOp = ""CrpTarget"", Source = ""Mask"" }, ClippingMode = Input { Value = FuID { ""None"" } }, Point2 = Input { Value = { 0.759868421052633, 0.269444444444444 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn3.X, CTRLCrop.PointIn2.Y) or Point(CTRLCrop.PointIn1.X, CTRLCrop.PointIn2.Y)"" }, Point1 = Input { Value = { 0.0707236842105262, 0.269444444444444 }, Expression = ""Point(CTRLCrop.PointIn2.X, CTRLCrop.PointIn2.Y)"" }, Point3 = Input { Value = { 0.759868421052633, 0.939814814814815 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn3.X, CTRLCrop.PointIn3.Y) or Point(CTRLCrop.PointIn1.X, CTRLCrop.PointIn1.Y)"" }, Filter = Input { Value = FuID { ""Fast Gaussian"" } }, Polyline = Input { Value = Polyline { Points = { { Y = 0.439814814814815, X = -0.429276315789474, Linear = true, RY = -0.223456790123457, RX = 0, PublishID = ""Point0"", LY = 0, LX = 0.229714912280702 }, { Y = -0.230555555555556, X = -0.429276315789474, Linear = true, RY = 0, RX = 0.229714912280702, PublishID = ""Point1"", LY = 0.223456790123457, LX = 0 }, { Y = -0.230555555555556, X = 0.259868421052633, Linear = true, RY = 0.223456790123457, RX = 0, PublishID = ""Point2"", LY = 0, LX = -0.229714912280702 }, { Y = 0.439814814814815, X = 0.259868421052633, Linear = true, RY = 0, RX = -0.229714912280702, PublishID = ""Point3"", LY = -0.223456790123457, LX = 0 } }, Closed = true } }, UseFrameFormatSettings = Input { Value = 1 }, Invert = Input { Value = 1 }, Polyline2 = Input {
												Value = Polyline {
												},
												Disabled = true
											} }, DrawMode2 = ""InsertAndModify"", DrawMode = ""InsertAndModify"", NameSet = true, ViewInfo = OperatorInfo { Pos = { 385, 445.5 } }, CustomData = {
										} }
								}
							}
						}
					},
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpTarget"",
							Source = ""Mask"",
						},
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Polyline = Input {
							Value = Polyline {
								Closed = true,
								Points = {
									{ Linear = true, X = -0.378035858192305, Y = 0.211006384919428, LX = 0.223010893768551, LY = 0, RX = 0, RY = -0.118170310969224, PublishID = ""Point0"" },
									{ Linear = true, X = -0.378035858192305, Y = -0.143504547988244, LX = 0, LY = 0.118170310969224, RX = 0.223010893768551, RY = 0, PublishID = ""Point1"" },
									{ Linear = true, X = 0.290996823113349, Y = -0.143504547988244, LX = -0.223010893768551, LY = 0, RX = 0, RY = 0.118170310969224, PublishID = ""Point2"" },
									{ Linear = true, X = 0.290996823113349, Y = 0.211006384919428, LX = 0, LY = -0.118170310969224, RX = -0.223010893768551, RY = 0, PublishID = ""Point3"" }
								}
							},
						},
						Polyline2 = Input {
							Value = Polyline {
							},
							Disabled = true,
						},
						Point0 = Input {
							Value = { 0.121964141807695, 0.711006384919428 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X, CrpCTRL.PointIn3.Y) or Point(CrpCTRL.PointIn2.X, CrpCTRL.Topapa.Y)"",
						},
						Point1 = Input {
							Value = { 0.121964141807695, 0.356495452011756 },
							Expression = ""Point(CrpCTRL.PointIn2.X, CrpCTRL.PointIn2.Y)"",
						},
						Point2 = Input {
							Value = { 0.790996823113349, 0.356495452011756 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn3.X, CrpCTRL.PointIn2.Y) or Point(CrpCTRL.Topapa.X, CrpCTRL.PointIn2.Y)"",
						},
						Point3 = Input {
							Value = { 0.790996823113349, 0.711006384919428 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn3.X, CrpCTRL.PointIn3.Y) or Point(CrpCTRL.Topapa.X, CrpCTRL.Topapa.Y)"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 165, 313.5 } },
				},
				CrpFrameHighlight = PolylineMask {
					DrawMode = ""InsertAndModify"",
					DrawMode2 = ""InsertAndModify"",
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrame"",
							Source = ""Mask"",
						},
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						BorderWidth = Input {
							Value = 0.00222222222222222,
							Expression = ""2/CrpTrans.Output.Width"",
						},
						PaintMode = Input { Value = FuID { ""Subtract"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Polyline = Input {
							Value = Polyline {
								Closed = true,
								Points = {
									{ Linear = true, X = -0.378035858192305, Y = 0.211006384919428, LX = 0.223010893768551, LY = 0, RX = 0, RY = -0.118170310969224, PublishID = ""Point0"" },
									{ Linear = true, X = -0.378035858192305, Y = -0.143504547988244, LX = 0, LY = 0.118170310969224, RX = 0.223010893768551, RY = 0, PublishID = ""Point1"" },
									{ Linear = true, X = 0.290996823113349, Y = -0.143504547988244, LX = -0.223010893768551, LY = 0, RX = 0, RY = 0.118170310969224, PublishID = ""Point2"" },
									{ Linear = true, X = 0.290996823113349, Y = 0.211006384919428, LX = 0, LY = -0.118170310969224, RX = -0.223010893768551, RY = 0, PublishID = ""Point3"" }
								}
							},
						},
						Polyline2 = Input {
							Value = Polyline {
							},
							Disabled = true,
						},
						Point0 = Input {
							Value = { 0.144444444444444, 0.966666666666667 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn2.X, CrpCTRL.PointIn3.Y) or Point(CrpCTRL.PointIn2.X, CrpCTRL.Topapa.Y)"",
						},
						Point1 = Input {
							Value = { 0.144444444444444, 0.308888888888889 },
							Expression = ""Point(CrpCTRL.PointIn2.X, CrpCTRL.PointIn2.Y)"",
						},
						Point2 = Input {
							Value = { 0.886666666666667, 0.308888888888889 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn3.X, CrpCTRL.PointIn2.Y) or Point(CrpCTRL.Topapa.X, CrpCTRL.PointIn2.Y)"",
						},
						Point3 = Input {
							Value = { 0.886666666666667, 0.966666666666667 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn3.X, CrpCTRL.PointIn3.Y) or Point(CrpCTRL.Topapa.X, CrpCTRL.Topapa.Y)"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 346.5 } },
				},
				CrpBgA = Background {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrameHighlight"",
							Source = ""Mask"",
						},
						GlobalOut = Input { Value = 149, },
						Width = Input {
							Value = 900,
							Expression = ""CrpTone.Output.Width"",
						},
						Height = Input {
							Value = 900,
							Expression = ""CrpTone.Output.Height"",
						},
						UseFrameFormatSettings = Input { Value = 1, },
						Depth = Input { Value = 1, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						TopLeftRed = Input { Value = 1, },
						TopRightRed = Input { Value = 1, },
						TopRightGreen = Input { Value = 1, },
						TopRightBlue = Input { Value = 1, },
						BottomLeftRed = Input { Value = 1, },
						BottomLeftGreen = Input { Value = 0.5, },
						BottomRightGreen = Input { Value = 0.5, },
						BottomRightBlue = Input { Value = 1, },
						GradientType = Input { Value = FuID { ""Radial"" }, },
						Start = Input { Value = { 0.5, 0.5 }, },
						Gradient = Input {
							Value = Gradient {
								Colors = {
									[0] = { 1, 1, 1, 1 },
									[1] = { 0, 0, 0, 1 }
								}
							},
						},
					},
					ViewInfo = OperatorInfo { Pos = { 165, 379.5 } },
				},
				ColorCorrector1 = ColorCorrector {
					CtrlWShown = false,
					Inputs = {
						WheelHue1 = Input {
							Value = 0.14,
							Expression = ""CrpCTRL.Hue+0.14"",
						},
						TintMode = Input { Value = 0, },
						Hue1 = Input { Expression = ""CrpCTRL.Hue+0.14"", },
						MasterRGBGain = Input { Value = 3.5, },
						ColorRanges = Input {
							Value = ColorCurves {
								Curves = {
									{
										Points = {
											{ 0, 1 },
											{ 0.4, 0.2 },
											{ 0.6, 0 },
											{ 1, 0 }
										}
									},
									{
										Points = {
											{ 0, 0 },
											{ 0.4, 0 },
											{ 0.6, 0.2 },
											{ 1, 1 }
										}
									}
								}
							},
						},
						PreDividePostMultiply = Input { Value = 1, },
						HistogramIgnoreTransparent = Input { Value = 1, },
						Input = Input {
							SourceOp = ""CrpBgA"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 379.5 } },
				},
				CrpHighlight = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input { Expression = ""CrpCTRL.Highlight"", },
						Background = Input {
							SourceOp = ""CrpPreMrg"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""ColorCorrector1"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { -55, 379.5 } },
				},
				CrpText = TextPlus {
					CtrlWShown = false,
					NameSet = true,
					CurrentSettings = 2,
					CustomData = {
						Settings = {
							[1] = {
								Tools = ordered() {
									CrpText = TextPlus { Inputs = { LayoutRotation = Input { Value = 1 }, Name2 = Input { Value = ""Black Outline"" }, Position1 = Input { Value = 1 }, HorizontalJustificationNew = Input { Value = 3 }, HorizontalLeftCenterRight = Input { Value = 1 }, OutsideOnly2 = Input { Value = 1 }, StyledText = Input { Value = ""X: 742  Y: 1295 "", Expression = ""Text(\""W: \"" .. CrpCrop.XSize .. \""  H: \"" .. CrpCrop.YSize .. \"" \"")"" }, Center = Input { Value = { 1, 0.193518518518519 }, Expression = ""CTRLCrop.Mode==1 and Point(CTRLCrop.PointIn3.X<=1 and CTRLCrop.PointIn3.X or 1, CrpCrop.YOffset>=0 and CTRLCrop.PointIn2.Y or 0) or Point(CTRLCrop.PointIn1.X<=1 and CTRLCrop.PointIn1.X or 1, CrpCrop.YOffset>=0 and CTRLCrop.PointIn2.Y or 0)"" }, Softness1 = Input { Value = 1 }, Size = Input { Value = 0.0789473684210526, Expression = ""(1/Width)*CTRLCrop.FontSize"" }, TransformRotation = Input { Value = 1 }, Softness2 = Input { Value = 1 }, Thickness2 = Input { Value = 0.1 }, Opacity2 = Input { Value = 0.5 }, Height = Input { Value = 1080, Expression = ""CrpTone.Output.Height"" }, Red2 = Input { Value = 0 }, Width = Input { Value = 608, Expression = ""CrpTone.Output.Width"" }, VerticalJustificationNew = Input { Value = 3 }, Font = Input { Value = ""Open Sans"" }, Style = Input { Value = ""Semibold"" }, Enabled2 = Input { Value = 1 }, GlobalOut = Input { Value = 127 }, [""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" } }, VerticalTopCenterBottom = Input { Value = -1.75, Expression = ""CrpCrop.YOffset>=(CTRLCrop.FontSize*0.8) and -1.75 or 1.75"" }, Position2 = Input { Value = 1 } }, CtrlWZoom = false, NameSet = true, ViewInfo = OperatorInfo { Pos = { 385, 544.5 } }, CustomData = {
										} }
								}
							}
						}
					},
					Inputs = {
						GlobalOut = Input { Value = 149, },
						Width = Input {
							Value = 1080,
							Expression = ""CrpTone.Output.Width"",
						},
						Height = Input {
							Value = 1920,
							Expression = ""CrpTone.Output.Height"",
						},
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						Center = Input {
							Value = { 0.790996823113349, 0.356495452011756 },
							Expression = ""CrpCTRL.Mode==1 and Point(CrpCTRL.PointIn3.X<=1 and CrpCTRL.PointIn3.X or 1, CrpCrop.YOffset>=0 and CrpCTRL.PointIn2.Y or 0) or Point(CrpCTRL.Topapa.X<=1 and CrpCTRL.Topapa.X or 1, CrpCrop.YOffset>=0 and CrpCTRL.PointIn2.Y or 0)"",
						},
						LayoutRotation = Input { Value = 1, },
						TransformRotation = Input { Value = 1, },
						Name2 = Input { Value = ""Black Outline"", },
						Enabled2 = Input { Value = 1, },
						Softness1 = Input { Value = 1, },
						Position1 = Input { Value = 1, },
						StyledText = Input {
							Value = ""X: 742  Y: 1295 "",
							Expression = ""Text(\""W: \"" .. CrpCrop.XSize .. \""  H: \"" .. CrpCrop.YSize .. \"" \"")"",
						},
						Font = Input { Value = ""Open Sans"", },
						Style = Input { Value = ""Semibold"", },
						Size = Input {
							Value = 0.0444444444444444,
							Expression = ""(1/Width)*CrpCTRL.FontSize"",
						},
						VerticalTopCenterBottom = Input {
							Value = -1.75,
							Expression = ""CrpCrop.YOffset>=(CrpCTRL.FontSize*0.8) and -1.75 or 1.75"",
						},
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalLeftCenterRight = Input { Value = 1, },
						HorizontalJustificationNew = Input { Value = 3, },
						Opacity2 = Input { Value = 0.5, },
						Thickness2 = Input { Value = 0.1, },
						OutsideOnly2 = Input { Value = 1, },
						Red2 = Input { Value = 0, },
						Softness2 = Input { Value = 1, },
						Position2 = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { 165, 412.5 } },
				},
				CrpTextMerge = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Blend = Input {
							Value = 0.5,
							Expression = ""CrpCTRL.Size"",
						},
						Background = Input {
							SourceOp = ""CrpHighlight"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""CrpText"",
							Source = ""Output"",
						},
						FlattenTransform = Input { Value = 1, },
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { -55, 412.5 } },
				},
				CrpSwitch = Dissolve {
					Transitions = {
						[0] = ""DFTDissolve""
					},
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Mix = Input {
							Value = 0,
							Expression = ""1-CrpCTRL.Preview"",
						},
						Background = Input {
							SourceOp = ""CrpBgFix"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""CrpCrop"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -110, 544.5 } },
				},
				CrpBgT = Background {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						EffectMask = Input {
							SourceOp = ""CrpFrame"",
							Source = ""Mask"",
						},
						GlobalOut = Input { Value = 149, },
						Width = Input {
							Value = 1080,
							Expression = ""CrpTone.Output.Width"",
						},
						Height = Input {
							Value = 1920,
							Expression = ""CrpTone.Output.Height"",
						},
						UseFrameFormatSettings = Input { Value = 1, },
						Depth = Input { Value = 1, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						TopLeftAlpha = Input { Value = 0.85, },
						TopRightRed = Input { Value = 1, },
						TopRightGreen = Input { Value = 1, },
						TopRightBlue = Input { Value = 1, },
						BottomLeftRed = Input { Value = 1, },
						BottomLeftGreen = Input { Value = 0.5, },
						BottomRightGreen = Input { Value = 0.5, },
						BottomRightBlue = Input { Value = 1, },
						GradientType = Input { Value = FuID { ""Radial"" }, },
						Start = Input { Value = { 0.5, 0.5 }, },
						Gradient = Input {
							Value = Gradient {
								Colors = {
									[0] = { 1, 1, 1, 1 },
									[1] = { 0, 0, 0, 1 }
								}
							},
						},
					},
					ViewInfo = OperatorInfo { Pos = { 55, 478.5 } },
				},
				CrpBgFix = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = ""CrpBgT"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""CrpTextMerge"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { -55, 478.5 } },
				},
				CrpNmbFrmB = RectangleMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Width = Input { Value = 1, },
						Height = Input {
							Value = 1,
							Expression = ""Width"",
						},
						Angle = Input {
							Value = -0.0874560776553608,
							Expression = ""CrpNmbFrmA.ZRotation"",
						},
						ShowViewControls = Input { Expression = ""CrpNmbFrmA.AngleNest==0 and 0 or CrpCTRL.Operation==1 and 0 or 1"", },
					},
					ViewInfo = OperatorInfo { Pos = { 55, 82.5 } },
					Colors = { TileColor = { R = 0.6, G = 0.450980392156863, B = 0.627450980392157 }, },
					UserControls = ordered() { ShowViewControls = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""CheckboxControl"", INP_MaxScale = 1, INP_Default = 1, INP_External = true, INP_MinScale = 0, INP_MinAllowed = 0, LINKID_DataType = ""Number"", ICS_ControlPage = ""Controls"", INP_Passive = true, CBC_TriState = false, LINKS_Name = ""Show View Controls"" } }
				},
				CrpNmbFrmC = RectangleMask {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 960, },
						MaskHeight = Input { Value = 540, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						ShowViewControls = Input { Expression = ""1-CrpCTRL.Operation"", },
					},
					ViewInfo = OperatorInfo { Pos = { 165, 82.5 } },
					Colors = { TileColor = { R = 0.6, G = 0.450980392156863, B = 0.627450980392157 }, },
					UserControls = ordered() { ShowViewControls = { INP_MaxAllowed = 1, INP_Integer = false, INPID_InputControl = ""CheckboxControl"", INP_MaxScale = 1, INP_Default = 1, INP_MinAllowed = 0, INP_MinScale = 0, INP_External = true, LINKID_DataType = ""Number"", CBC_TriState = false, INP_Passive = true, ICS_ControlPage = ""Controls"", LINKS_Name = ""Show View Controls"" } }
				}
			},
		}
	},
	ActiveTool = ""CropIt""
}"
wJTaPH0P,Files,Petro_zzz,C++,Thursday 21st of December 2023 12:55:53 PM CDT,"#include <cstdio>
#include <iostream>
#include <string>

void write_to_file(const char* filename,
	const char* str) {
	FILE* pfile = nullptr;
	fopen_s(&pfile, filename, ""a"");
	if (pfile != nullptr) {
		fprintf(pfile,""%\n"", str);
		fclose(pfile);
		printf(""%s\n"", ""Job done."");
	}
	else {
		printf(""%s\n"",""Can not open the file."");
	}
}

void write_to_binfile(
	const char* filename,
	const int* arr, 
	const int size
) {	
	FILE* pfile = nullptr;
	fopen_s(&pfile, filename, ""w"");
	if (pfile != nullptr) {
		fwrite(arr, sizeof(arr[0]), size, pfile);
		//fprintf(pfile, ""%\n"", str);
		fclose(pfile);
		printf(""%s\n"", ""Job done."");
	}
	else {
		printf(""%s\n"", ""Can not open the file."");
	}
}


int main() {	


	int arr[]{ 1,2,3,4,5 };
	write_to_binfile(""text.dat"", arr, 5);
	return 0;
}"
m3a22jwB,Untitled,sissou123,Python,Thursday 21st of December 2023 12:47:52 PM CDT,"100 Days of Code: The Complete Python Pro Bootcamp for 2023
Master Python by building 100 projects in 100 days. Learn data science, automation, build websites, games and apps! 
for more:https://cuty.io/gtzUOaJOV9s
"
1K01ixnx,MATH_MOD,575,Python,Thursday 21st of December 2023 12:41:47 PM CDT,"import numpy as np
import math
import copy
from scipy.optimize import minimize

def cor(V,x,eps):
    s = list()

    for i in V:
        s.append(1 / (np.linalg.norm(x - i, ord=2) + eps))

    S = list()

    for i in s:
        S.append(i / sum(s))

    print(S)
    print(V)
    return S[0] * V[0] + S[1] * V[1] + S[2] * V[2] + S[3] * V[3]

def coeffs(coef_lambda):
    c = list()

    for i in coef_lambda:
        c.append(sum(coef_lambda) / i)

    c1 = list()

    for i in c:
        c1.append(i / sum(c))

    return c1

def step_alg(A, eps):
    m = A.shape[1]
    w = np.array([[]])

    for i in range(m):
        w = np.append(w, [[1 / m]], axis=1)

    lam = pow(10, 10)
    k = 0
    w = w.T

    while True:
        k = k + 1
        w1 = copy.copy(w)
        w = np.dot(A, w)
        s = 0

        for i in range(A.shape[1]):
            s = s+w[i][0] / w1[i][0]

        lam1 = copy.copy(lam)
        lam = 1 / m * s
        m = max(w.T[0])

        for i in range(A.shape[1]):
            w[i][0] = w[i][0] / m

        if abs(lam - lam1) > eps:
            continue

        else:
            s=sum(w.T[0])

            for i in range(A.shape[1]):
                w[i][0] = w[i][0] / s

            break;
    return w

def St(x):
    sums = list()

    for i in V:
        sums.append(np.linalg.norm(x - i, ord=2))

    sums = np.array(sums)
    return sums

def Stein(x):
    return np.sum(C * St(x))

A1=np.array([[1, 3, 7, 9],
             [1/3, 1, 3, 1],
             [1/7, 1/3, 1, 1],
             [1/9, 1, 1, 1]])
A2=np.array([[1, 5, 7, 9],
             [1/5, 1, 3, 1],
             [1/7, 1/3, 1, 1],
             [1/9, 1, 1, 1]])
A3=np.array([[1, 3, 7, 3],
             [1/3, 1, 3, 1],
             [1/7, 1/3, 1, 1,],
             [1/3, 1, 1, 1]])
A4=np.array([[1, 3, 7, 5],
             [1/3, 1, 3, 1],
             [1/7, 1/3, 1, 1],
             [1/5, 1, 1, 1]])

w1=step_alg(A1, 0.0001)
w2=step_alg(A2, 0.0001)
w3=step_alg(A3, 0.0001)
w4=step_alg(A4, 0.0001)

V = copy.deepcopy(w1.T)

V = np.append(V, copy.deepcopy(w2.T), axis=0)
V = np.append(V, copy.deepcopy(w3.T), axis=0)
V = np.append(V, copy.deepcopy(w4.T), axis=0)

lambda1,v = np.linalg.eig(A1)
lambda2,v = np.linalg.eig(A2)
lambda3,v1 = np.linalg.eig(A3)
lambda4,v1 = np.linalg.eig(A4)

lambda1 = max(lambda1)
lambda2 = max(lambda2)
lambda3 = max(lambda3)
lambda4 = max(lambda4)
print(lambda1, lambda2, lambda3, lambda4)

C = np.array(coeffs([lambda1, lambda2, lambda3, lambda4]))

x0=np.array([0, 0, 0, 0])
x=minimize(Stein, x0, method='nelder-mead', options={'xtol':1e-3,'disp':True}).x
print(cor(V, x, 0.0001))"
V78y2AdK,step by step cframe animation (walk+run),LikeableEmmec,Lua,Thursday 21st of December 2023 12:38:37 PM CDT,"local walktable = {
	[""Keyframes""] = {
		[0.29] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.31,0.42,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-31.59))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(-0.03,-0.03,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-28.86))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-35.47))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-6.24),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-34.88))
								}
							},
							[""CFrame""] = CFrame.new(-0,0,0.09) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.13] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.52,0.2,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(34.14))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.39,0.01,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(16.52))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(20.12))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.81),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(21.46))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.46] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.41,-0.04,-0) * CFrame.Angles(math.rad(-0),math.rad(-0),math.rad(-26.08))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.37,0.06,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-45.78))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-38.65))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-6.71),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-40.38))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.42] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.38,-0.02,-0) * CFrame.Angles(math.rad(-0),math.rad(-0),math.rad(-32.37))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.17,0.01,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-46.47))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-44.57))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-8.22),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-46.06))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.5] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.39,-0.03,-0) * CFrame.Angles(math.rad(-0),math.rad(-0),math.rad(-17.57))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.51,0.17,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-40.23))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-29.15))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.95),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-30.89))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.33] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.3,0.23,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-35.95))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.02,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-37.28))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-43.05))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-8.24),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-43.34))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.08) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.04] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.15,0.01,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(40.06))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.33,0.2,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(32.98))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(39.66))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-8.29),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-0),math.rad(0),math.rad(40.25))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.38] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.33,0.05,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-35.86))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-43.31))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-46.22))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-9.29),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-47.25))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.05) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.08] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.4,0.07,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(42.33))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.4,0.09,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(26.15))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(31.9))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-6.71),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(32.82))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.21] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.44,0.51,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-3.74))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.19,-0.05,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-6.88))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-9.81))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.18),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-8.09))
								}
							},
							[""CFrame""] = CFrame.new(-0,0,0.05) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.63] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.21,-0.02,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(13.6))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.54,0.56,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-3.07))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(11.06))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.17),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(10.35))
								}
							},
							[""CFrame""] = CFrame.new(-0,0,0.06) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.67] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.13,-0.01,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(22.86))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.46,0.59,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(11.13))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(23.67))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.15),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(23.42))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.08) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.79] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(36.73))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.26,0.37,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(35.59))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(42.47))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-9.29),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-0),math.rad(0),math.rad(42.93))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.05) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.58] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.28,-0.02,-0) * CFrame.Angles(math.rad(-0),math.rad(-0),math.rad(3.16))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.58,0.46,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-17.46))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-2.96))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.25),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-4.14))
								}
							},
							[""CFrame""] = CFrame.new(-0,0,0.03) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.25] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.35,0.54,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-21.22))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.07,-0.05,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-18.52))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-24.08))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.15),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-0),math.rad(0),math.rad(-22.72))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.08) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.17] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.51,0.38,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(16.9))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.31,-0.03,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(5.16))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(5.61))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.35),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(7.28))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(36.73))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.28,0.25,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(35.59))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(42.47))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-9.29),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-0),math.rad(0),math.rad(42.93))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.05) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.75] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(35))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.29,0.42,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(32.3))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(40.14))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-8.22),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(40.51))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.06) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.54] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.35,-0.03,-0) * CFrame.Angles(math.rad(-0),math.rad(-0),math.rad(-7.54))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.57,0.31,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(-30.38))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-16.86))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-5.49),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(-18.41))
								}
							},
							[""CFrame""] = CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.71] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.01,-0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(30.2))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.37,0.52,0) * CFrame.Angles(math.rad(-0),math.rad(0),math.rad(23.56))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(33.65))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(-6.23),math.rad(0),math.rad(0))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0),math.rad(0),math.rad(33.78))
								}
							},
							[""CFrame""] = CFrame.new(0,0,0.07) * CFrame.Angles(math.rad(9.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		}
	},
}
local idleanim = {
	[""Keyframes""] = {
		[2.7] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.47,0.14,0.01) * CFrame.Angles(math.rad(-4.92),math.rad(3.3),math.rad(1.08))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.07,-0.01) * CFrame.Angles(math.rad(-3.93),math.rad(-7.31),math.rad(-3.76))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.22),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.34,0.1,0.07) * CFrame.Angles(math.rad(-5.02),math.rad(-11.54),math.rad(-9.59))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.05,0.01) * CFrame.Angles(math.rad(-2.76),math.rad(13.32),math.rad(0.57))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.09) * CFrame.Angles(math.rad(2.74),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[2.83] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.45,0.14,0.01) * CFrame.Angles(math.rad(-4.87),math.rad(3.33),math.rad(0.07))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.06,-0.01) * CFrame.Angles(math.rad(-3.97),math.rad(-7.29),math.rad(-4.09))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.07),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.32,0.1,0.07) * CFrame.Angles(math.rad(-4.92),math.rad(-11.58),math.rad(-8.57))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.05,-0.05,0.01) * CFrame.Angles(math.rad(-2.84),math.rad(13.31),math.rad(0.88))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.08) * CFrame.Angles(math.rad(3.07),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[2.3] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.51,0.15,0.01) * CFrame.Angles(math.rad(-4.99),math.rad(3.27),math.rad(2.83))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.03,-0.07,-0.01) * CFrame.Angles(math.rad(-3.72),math.rad(-7.43),math.rad(-2.14))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.95),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.38,0.11,0.08) * CFrame.Angles(math.rad(-5.17),math.rad(-11.5),math.rad(-11.34))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.07,-0.05,0.01) * CFrame.Angles(math.rad(-2.36),math.rad(13.36),math.rad(-1))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.1) * CFrame.Angles(math.rad(2.34),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[2.1] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.52,0.16,0.01) * CFrame.Angles(math.rad(-4.99),math.rad(3.3),math.rad(2.97))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.02,-0.07,-0.01) * CFrame.Angles(math.rad(-3.6),math.rad(-7.48),math.rad(-1.21))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.37),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.39,0.11,0.08) * CFrame.Angles(math.rad(-5.15),math.rad(-11.52),math.rad(-11.47))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.07,-0.05,0.01) * CFrame.Angles(math.rad(-2.13),math.rad(13.38),math.rad(-1.9))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.11) * CFrame.Angles(math.rad(2.52),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.97] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.45,0.16,0.01) * CFrame.Angles(math.rad(-4.66),math.rad(3.65),math.rad(-3.14))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.02,-0.08,-0.01) * CFrame.Angles(math.rad(-3.56),math.rad(-7.5),math.rad(-0.92))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.51),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.31,0.12,0.07) * CFrame.Angles(math.rad(-4.21),math.rad(-11.88),math.rad(-5.06))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.07,-0.05,0.01) * CFrame.Angles(math.rad(-2.05),math.rad(13.38),math.rad(-2.19))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.07,-0.09) * CFrame.Angles(math.rad(5.92),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.23] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.41,0.14,0.01) * CFrame.Angles(math.rad(-4.72),math.rad(3.49),math.rad(-2.82))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.07,-0.01) * CFrame.Angles(math.rad(-3.95),math.rad(-7.3),math.rad(-3.95))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.14),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.28,0.1,0.06) * CFrame.Angles(math.rad(-4.49),math.rad(-11.74),math.rad(-5.57))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.05,-0.05,0.01) * CFrame.Angles(math.rad(-2.81),math.rad(13.32),math.rad(0.74))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.05,-0.07) * CFrame.Angles(math.rad(4.62),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.6] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.42,0.15,0.01) * CFrame.Angles(math.rad(-4.65),math.rad(3.61),math.rad(-3.69))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.03,-0.07,-0.01) * CFrame.Angles(math.rad(-3.78),math.rad(-7.4),math.rad(-2.6))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.75),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.29,0.11,0.06) * CFrame.Angles(math.rad(-4.23),math.rad(-11.85),math.rad(-4.55))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.05,0.01) * CFrame.Angles(math.rad(-2.47),math.rad(13.35),math.rad(-0.56))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.06,-0.08) * CFrame.Angles(math.rad(5.7),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[1.93] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.53,0.16,0.01) * CFrame.Angles(math.rad(-4.98),math.rad(3.34),math.rad(2.72))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.02,-0.08,-0.01) * CFrame.Angles(math.rad(-3.51),math.rad(-7.53),math.rad(-0.51))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.69),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.39,0.12,0.08) * CFrame.Angles(math.rad(-5.07),math.rad(-11.56),math.rad(-11.17))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.08,-0.05,0.01) * CFrame.Angles(math.rad(-1.95),math.rad(13.38),math.rad(-2.58))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.11) * CFrame.Angles(math.rad(2.86),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[1.8] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.53,0.17,0.01) * CFrame.Angles(math.rad(-4.95),math.rad(3.39),math.rad(2.25))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.02,-0.08,-0.01) * CFrame.Angles(math.rad(-3.45),math.rad(-7.55),math.rad(-0.05))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.9),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.39,0.12,0.08) * CFrame.Angles(math.rad(-4.97),math.rad(-11.61),math.rad(-10.66))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.08,-0.05,0.01) * CFrame.Angles(math.rad(-1.84),math.rad(13.39),math.rad(-3.03))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.04,-0.11) * CFrame.Angles(math.rad(3.27),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[2.43] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.5,0.15,0.01) * CFrame.Angles(math.rad(-4.98),math.rad(3.27),math.rad(2.46))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.03,-0.07,-0.01) * CFrame.Angles(math.rad(-3.8),math.rad(-7.39),math.rad(-2.75))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.68),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.37,0.11,0.07) * CFrame.Angles(math.rad(-5.15),math.rad(-11.5),math.rad(-10.97))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.05,0.01) * CFrame.Angles(math.rad(-2.51),math.rad(13.35),math.rad(-0.41))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.1) * CFrame.Angles(math.rad(2.37),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[1.37] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.49,0.17,0.01) * CFrame.Angles(math.rad(-4.78),math.rad(3.56),math.rad(-0.78))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.01,-0.08,-0.01) * CFrame.Angles(math.rad(-3.4),math.rad(-7.57),math.rad(0.34))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(2.07),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.35,0.12,0.07) * CFrame.Angles(math.rad(-4.5),math.rad(-11.79),math.rad(-7.5))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.08,-0.05,0.01) * CFrame.Angles(math.rad(-1.74),math.rad(13.39),math.rad(-3.4))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.06,-0.1) * CFrame.Angles(math.rad(4.97),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[1.13] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.46,0.16,0.01) * CFrame.Angles(math.rad(-4.7),math.rad(3.63),math.rad(-2.38))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.02,-0.08,-0.01) * CFrame.Angles(math.rad(-3.48),math.rad(-7.54),math.rad(-0.26))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.8),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.33,0.12,0.07) * CFrame.Angles(math.rad(-4.29),math.rad(-11.86),math.rad(-5.85))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.08,-0.05,0.01) * CFrame.Angles(math.rad(-1.89),math.rad(13.39),math.rad(-2.82))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.06,-0.09) * CFrame.Angles(math.rad(5.67),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[3] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.41,0.13,0.01) * CFrame.Angles(math.rad(-4.8),math.rad(3.37),math.rad(-1.55))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.06,-0.01) * CFrame.Angles(math.rad(-3.99),math.rad(-7.28),math.rad(-4.25))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.new()
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.28,0.1,0.06) * CFrame.Angles(math.rad(-4.75),math.rad(-11.63),math.rad(-6.95))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.05,-0.05,0.01) * CFrame.Angles(math.rad(-2.88),math.rad(13.31),math.rad(1.04))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.04,-0.07) * CFrame.Angles(math.rad(3.59),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.41,0.13,0.01) * CFrame.Angles(math.rad(-4.8),math.rad(3.37),math.rad(-1.55))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.06,-0.01) * CFrame.Angles(math.rad(-3.99),math.rad(-7.28),math.rad(-4.25))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.new()
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.28,0.1,0.06) * CFrame.Angles(math.rad(-4.75),math.rad(-11.63),math.rad(-6.95))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.05,-0.05,0.01) * CFrame.Angles(math.rad(-2.88),math.rad(13.31),math.rad(1.04))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.04,-0.07) * CFrame.Angles(math.rad(3.59),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.37] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.41,0.14,0.01) * CFrame.Angles(math.rad(-4.69),math.rad(3.54),math.rad(-3.3))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.07,-0.01) * CFrame.Angles(math.rad(-3.9),math.rad(-7.33),math.rad(-3.55))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.32),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.28,0.11,0.06) * CFrame.Angles(math.rad(-4.38),math.rad(-11.79),math.rad(-5.03))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.05,0.01) * CFrame.Angles(math.rad(-2.71),math.rad(13.33),math.rad(0.36))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.06,-0.07) * CFrame.Angles(math.rad(5.09),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[2.57] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.49,0.15,0.01) * CFrame.Angles(math.rad(-4.95),math.rad(3.28),math.rad(1.88))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.04,-0.07,-0.01) * CFrame.Angles(math.rad(-3.87),math.rad(-7.35),math.rad(-3.3))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(0.43),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.36,0.1,0.07) * CFrame.Angles(math.rad(-5.1),math.rad(-11.52),math.rad(-10.39))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.06,-0.05,0.01) * CFrame.Angles(math.rad(-2.65),math.rad(13.34),math.rad(0.12))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.03,-0.09) * CFrame.Angles(math.rad(2.51),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[0.73] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.43,0.15,0.01) * CFrame.Angles(math.rad(-4.65),math.rad(3.64),math.rad(-3.67))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.03,-0.07,-0.01) * CFrame.Angles(math.rad(-3.7),math.rad(-7.44),math.rad(-1.98))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(1.02),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.29,0.11,0.06) * CFrame.Angles(math.rad(-4.19),math.rad(-11.88),math.rad(-4.55))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.07,-0.05,0.01) * CFrame.Angles(math.rad(-2.32),math.rad(13.37),math.rad(-1.16))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.07,-0.08) * CFrame.Angles(math.rad(5.9),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		},
		[1.53] = {
			[""Poses""] = {
				[""HumanoidRootPart""] = {
					[""SubPoses""] = {
						[""Torso""] = {
							[""SubPoses""] = {
								[""Left Leg""] = {
									[""CFrame""] = CFrame.new(-0.51,0.17,0.01) * CFrame.Angles(math.rad(-4.85),math.rad(3.5),math.rad(0.59))
								},
								[""Right Arm""] = {
									[""CFrame""] = CFrame.new(-0.01,-0.08,-0.01) * CFrame.Angles(math.rad(-3.39),math.rad(-7.58),math.rad(0.44))
								},
								[""Head""] = {
									[""CFrame""] = CFrame.Angles(math.rad(2.12),math.rad(0),math.rad(-0))
								},
								[""Right Leg""] = {
									[""CFrame""] = CFrame.new(0.37,0.12,0.08) * CFrame.Angles(math.rad(-4.69),math.rad(-11.72),math.rad(-8.92))
								},
								[""Left Arm""] = {
									[""CFrame""] = CFrame.new(-0.08,-0.05,0.01) * CFrame.Angles(math.rad(-1.71),math.rad(13.39),math.rad(-3.5))
								}
							},
							[""CFrame""] = CFrame.new(-0,-0.05,-0.11) * CFrame.Angles(math.rad(4.31),math.rad(-0),math.rad(-0))
						}
					},
					[""CFrame""] = CFrame.new()
				}
			},
		}
	},
}

local frames = {
	0;
	0.04;
	0.08;
	0.13;
	0.17;
	0.21;
	0.25;
	0.29;
	0.33;
	0.38;
	0.42;
	0.46;
	0.5;
	0.54;
	0.58;
	0.63;
	0.67;
	0.71;
	0.75;
	0.79;
}

local idleframes = {
	0;
	0.23;
	0.37;
	0.6;
	0.73;
	0.97;
	1.13;
	1.37;
	1.53;
	1.8;
	1.93;
	2.1;
	2.3;
	2.43;
	2.57;
	2.7;
	2.83;
	3;
}

local character = owner.Character
local hrp = character.HumanoidRootPart

local function weld(name,parent,part0,part1,c0,c1)
	local weld = Instance.new(""Weld"")
	weld.Name = name
	weld.Part0 = part0
	weld.Part1 = part1
	weld.C0 = c0
	weld.C1 = c1
	weld.Parent = parent
	return weld
end

local welds = {}
local naturalwelds = {}

for i, v in pairs(character.Torso:GetChildren()) do
	if v:IsA(""Motor6D"") then
		welds[v.Part1.Name] = weld(v.Name,v.Parent,v.Part0,v.Part1,v.C0,v.C1)
		naturalwelds[v.Part1.Name] = welds[v.Part1.Name].C0
	end
end
for i, v in pairs(hrp:GetChildren()) do -- im too lazy to type out the hrp bit manually :P
	if v:IsA(""Motor6D"") then
		welds[v.Part1.Name] = weld(v.Name,v.Parent,v.Part0,v.Part1,v.C0,v.C1)
		naturalwelds[v.Part1.Name] = welds[v.Part1.Name].C0
	end
end

local pos = 0
local prevpos = 1

local idlepos = 0
local previdlepos = 1

while true do
	if character.Humanoid.MoveDirection ~= Vector3.zero then
		idlepos=0;previdlepos=1
		pos+=1
		if not frames[pos] then pos = 1 prevpos = 1 end
		local newpos = walktable[""Keyframes""][frames[pos]].Poses.HumanoidRootPart.SubPoses
		local torsopos = newpos.Torso.SubPoses
		task.spawn(function()
			local curpos = pos
			while curpos == pos do
				for i, v in pairs(torsopos) do
					welds[i].C0 = welds[i].C0:Lerp(naturalwelds[i] * torsopos[i].CFrame,.2)
				end
				welds[""Torso""].C0 = welds[""Torso""].C0:Lerp(naturalwelds[""Torso""] * newpos.Torso.CFrame,.1)
				task.wait()
			end
		end)
		task.wait(frames[pos]-frames[prevpos])
		prevpos=pos
	else
		pos=0;prevpos=1
		idlepos+=1
		if not idleframes[idlepos] then idlepos = 1 previdlepos = 1 end
		local newpos = idleanim[""Keyframes""][idleframes[idlepos]].Poses.HumanoidRootPart.SubPoses
		local torsopos = newpos.Torso.SubPoses
		task.spawn(function()
			local curpos = pos
			while curpos == pos do
				for i, v in pairs(torsopos) do
					welds[i].C0 = welds[i].C0:Lerp(naturalwelds[i] * torsopos[i].CFrame,.2)
				end
				welds[""Torso""].C0 = welds[""Torso""].C0:Lerp(naturalwelds[""Torso""] * newpos.Torso.CFrame,.1)
				task.wait()
			end
		end)
		task.wait(idleframes[idlepos]-idleframes[previdlepos])
		previdlepos=idlepos
	end
end"
Pb4nUaSk,Museum.Hours.2012.Deu.720p.h264.aac.Subs-bp,bpmircea,BrainFuck,Thursday 21st of December 2023 12:32:55 PM CDT,"Museum Hours (Museum Hours) (Jem Cohen, 2012)
aka
Museum.Hours.2012.Deu.720p.h264.aac.Subs-bp
https://www.imdb.com/title/tt2268732/

https://filecrypt.cc/Container/7726FF3634.html

Audio tracks: de/en(Original) | Subtitles: en(Forced) es pt-BR ro ru"
bivj1aNE,Museum.Hours.2012.Deu.720p.h264.ac3.Subs-bp,bpmircea,BrainFuck,Thursday 21st of December 2023 12:31:43 PM CDT,"Museum Hours (Museum Hours) (Jem Cohen, 2012)
aka
Museum.Hours.2012.Deu.720p.h264.ac3.Subs-bp
https://www.imdb.com/title/tt2268732/

https://filecrypt.cc/Container/3990AE065B.html

Audio tracks: de/en(Original) | Subtitles: en(Forced) es pt-BR ro ru"
Tarvi6pD,Museum.Hours.2012.Deu.720p.h264.dts.Subs-bp,bpmircea,BrainFuck,Thursday 21st of December 2023 12:30:35 PM CDT,"Museum Hours (Museum Hours) (Jem Cohen, 2012)
aka
Museum.Hours.2012.Deu.720p.h264.dts.Subs-bp
https://www.imdb.com/title/tt2268732/

https://filecrypt.cc/Container/6541DCC771.html

Audio tracks: de/en(Original) | Subtitles: en(Forced) es pt-BR ro ru"
R3AYzYBY,Registros - BD,hercioneto,C,Thursday 21st of December 2023 11:51:32 AM CDT,"#include <stdio.h>
#include <string.h>

// Definindo uma estrutura para representar os dados
struct Pessoa {
    char nome[50];
    int idade;
    float peso;
    float altura;
    float imc;
    // Adicione outros campos conforme necessário
};

int main() {
    // Definindo um array para armazenar dados de pessoas (simulação de um banco de dados)
    struct Pessoa bancoDeDados[100]; // Por exemplo, assumindo que há no máximo 100 registros

    // Simulando a adição de dados ao ""banco de dados""
    strcpy(bancoDeDados[0].nome, ""Joao"");
    bancoDeDados[0].idade = 25;
    bancoDeDados[0].peso = 85;
    bancoDeDados[0].altura = 170;

    strcpy(bancoDeDados[1].nome, ""Maria"");
    bancoDeDados[1].idade = 30;
    bancoDeDados[1].peso = 68;
    bancoDeDados[1].altura = 167;

    // Simulando a recuperação e exibição de dados do ""banco de dados""
    for (int i = 0; i < 2; ++i) {
        printf(""Nome: %s, Idade: %d\n"", bancoDeDados[i].nome, bancoDeDados[i].idade);
    }

    return 0;
}"
qH8Aa4AJ,Updated DataStore,Richbadniss,Lua,Thursday 21st of December 2023 11:45:11 AM CDT,"-- Import necessary services
local DataStoreService = game:GetService(""DataStoreService"")
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")

-- Create a DataStore for player data
local dataStore = DataStoreService:GetDataStore(""Players"")

-- Define the default player data structure
local default = {
    SessionLock = false,
    Coins = 0,
    Gems = 0
}

-- Define the request type and a function to wait for request budget
local updateAsync = Enum.DataStoreRequestType.UpdateAsync
local function waitForRequestBudget()
    local currentBudget = DataStoreService:GetRequestBudgetForRequestType(updateAsync)

    while currentBudget < 1 do
        currentBudget = DataStoreService:GetRequestBudgetForRequestType(updateAsync)
        wait(5)
    end
end

-- Function to set up player data when they join
local function setUp(player)
    local name = player.Name
    local userId = player.UserId
    local key = ""Player_"" .. userId

    -- Create a leaderstats folder
    local leaderstats = Instance.new(""Folder"")
    leaderstats.Name = ""leaderstats""

    -- Set initial values for Gems and Coins
    local gems = Instance.new(""IntValue"", leaderstats)
    gems.Name = ""Gems""
    gems.Value = 0

    local coins = Instance.new(""IntValue"", leaderstats)
    coins.Name = ""Coins""
    coins.Value = 0

    local success, data, shouldWait
    repeat
        waitForRequestBudget()
        -- Update player data in DataStore
        success = pcall(dataStore.UpdateAsync, dataStore, key, function(oldData)
            oldData = oldData or default
            if oldData.SessionLock then
                if os.time() - oldData.SessionLock < 1800 then
                    shouldWait = true
                else
                    oldData.SessionLock = os.time()
                    data = oldData
                    return data
                end
            else
                oldData.SessionLock = os.time()
                data = oldData
                return data
            end
        end)

        if shouldWait then
            task.wait(5)
            shouldWait = false
        end
    until (success and data) or not Players:FindFirstChild(name)

    -- If successful, update leaderstats with stored values
    if success and data then
        for _, v in pairs(data) do
            leaderstats[v.Name] = v
        end
        leaderstats.Parent = player
    end
end

-- Function to save player data when they leave
local function save(player, dontLeave, dontWait)
    local userId = player.UserId
    local key = ""Player_"" .. userId

    local leaderstats = player:FindFirstChild(""leaderstats"")

    if leaderstats then
        local coinsValue = leaderstats.Coins.Value  -- Corrected to use ""Coins"" instead of ""Cash""
        local success

        repeat
            if not dontWait then
                waitForRequestBudget()
            end
            -- Update player data in DataStore
            success = pcall(dataStore.UpdateAsync, dataStore, key, function()
                return {
                    SessionLock = dontLeave and os.time() or nil,
                    Coins = coinsValue  -- Changed ""Cash"" to ""Coins""
                }
            end)
        until success
    end
end

-- Function to save player data on server shutdown
local function onShutdown()
    if RunService:IsStudio() then
        task.wait(2)
    else
        local finished = Instance.new(""BindableEvent"")
        local allPlayers = Players:GetPlayers()
        local leftPlayers = #allPlayers

        for _, player in ipairs(allPlayers) do
            coroutine.wrap(function()
                save(player, nil, true)
                leftPlayers -= 1
                if leftPlayers == 0 then
                    finished:Fire()
                end
            end)()
        end

        finished.Event:Wait()
    end
end

-- Set up existing players
for _, player in ipairs(Players:GetPlayers()) do
    coroutine.wrap(setUp)(player)
end

-- Connect functions to events
Players.PlayerAdded:Connect(setUp)
Players.PlayerRemoving:Connect(save)
game:BindToClose(onShutdown)

-- Periodically save player data
while true do
    wait(60)
    for _, player in ipairs(Players:GetPlayers()) do
        coroutine.wrap(save)(player, true)
    end
end"
PqhdJpFG,Untitled,sissou123,Python,Thursday 21st of December 2023 11:31:26 AM CDT,"Python 3: Deep Dive (Part 2 - Iterators, Generators)
Sequences, Iterables, Iterators, Generators, Context Managers
for more:https://cuty.io/Zh2FNTQU0y"
MJUJCuFm,Untitled,dllbridge,C,Thursday 21st of December 2023 11:04:49 AM CDT,"


#include     <stdio.h>
#include    <stdlib.h>


////////////////////////////////////////////////////
struct el
{
    int n;
	
		
    el *pNext;	
};

////////////////////////////////////////////////////
int main()                                        // 
{
	
	
	
}










/*

#include     <stdio.h>
#include    <stdlib.h>

int nArr[12];

////////////////////////////////////////////////////
int main()                                        // 
{
	int n2;
	
	int *arr = new(int[10]);    //(int*)malloc(sizeof(int) * 10);
	
	
	
	
	
    delete(arr);
	
}



*/










/*
#include     <stdio.h>
#include    <stdlib.h>

int nArr[12];

////////////////////////////////////////////////////
int main()                                        // 
{
	int n2;
	
	int *arr = (int*)malloc(sizeof(int) * 10);
	
	
	
	
	
	free(arr);
	
}

*/




































//  va_list          //  Тип данных
//  va_start();          void va_start(va_list param, последний_явный_параметр);
//  va_arg  ();          type va_arg(va_list param, type); 
//  va_end  ();          void va_end(va_list param);

/*
#include    <stdio.h>
#include   <stdarg.h>



////////////////////////////////////////////////////
double avg(double a, ...)                         //   
{
	
	va_list vl;
	
	int  n = 0;
	
	double num, sum = 0.0;
	
	va_start(vl, a);
	
	num = a;
	
	while(num)
	{
	   sum += num;     n++;	
	   
	   printf(""n =  %d\n"", n);
		
	   num  = va_arg(vl, double); 	
	}
	
	
	va_end(vl);
	
	if(n == 0) return 0;
	
return sum/n;	
}



////////////////////////////////////////////////////
int main()                                        // 
{

    double a = avg(1.0, 2.0, 3.0, 4.0, 5.0, 0.0);
        
    printf(""a = %5.2f\n"", a);                            
    
}

*/


"
7yLdckUi,СПРИНТ № 4 | Обработка ошибок. Исключения | Урок 6: Обработка ошибок в поисковой системе,chevengur,C++,Thursday 21st of December 2023 10:59:49 AM CDT,"#include <algorithm>
#include <cmath>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <optional>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        } else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

struct Document {
    Document() = default;

    Document(int id, double relevance, int rating)
        : id(id)
        , relevance(relevance)
        , rating(rating) {
    }

    int id = 0;
    double relevance = 0.0;
    int rating = 0;
};

template <typename StringContainer>
set<string> MakeUniqueNonEmptyStrings(const StringContainer& strings) {
    set<string> non_empty_strings;
    for (const string& str : strings) {
        if (!str.empty()) {
            non_empty_strings.insert(str);
        }
    }
    return non_empty_strings;
}

enum class DocumentStatus {
    ACTUAL,
    IRRELEVANT,
    BANNED,
    REMOVED,
};

class SearchServer {
public:

    inline static constexpr int INVALID_DOCUMENT_ID = -1;

    template <typename StringContainer>
    explicit SearchServer(const StringContainer& stop_words)
        : stop_words_(MakeUniqueNonEmptyStrings(stop_words)) {
        for(const auto& stop_word: stop_words_){
            if(IsValidWord(stop_word) == false){
                throw std::invalid_argument(""invalid argument"");
            }
        }
    }

    explicit SearchServer(const string& stop_words_text)
        : SearchServer(
            SplitIntoWords(stop_words_text))  // Invoke delegating constructor from string container
    {
    }

    void AddDocument(int document_id, const string& document, DocumentStatus status,
                                   const vector<int>& ratings) {
        if (document_id < 0) {
            throw std::invalid_argument(""the document is negative"");
        }

        if(documents_.count(document_id)){
            throw std::invalid_argument(""repeat document"");
        }

        if(IsValidWord(document)==false){
            throw std::invalid_argument(""invalid character"");
        }

        else{
            const vector<string> words = SplitIntoWordsNoStop(document);
            const double inv_word_count = 1.0 / words.size();
            for (const string& word : words) {
                word_to_document_freqs_[word][document_id] += inv_word_count;
            }
            documents_.emplace(document_id, DocumentData{ComputeAverageRating(ratings), status});
            document_ids.push_back(document_id);
        }
    }

    template <typename DocumentPredicate>
    vector<Document> FindTopDocuments(const string& raw_query,
                                        DocumentPredicate document_predicate) const {
        if(IsValidQuery(raw_query)==false){
            throw std::invalid_argument(""invalid character int findtop"");
        }else{
            const Query query = ParseQuery(raw_query);
            auto matched_documents = FindAllDocuments(query, document_predicate);
            sort(matched_documents.begin(), matched_documents.end(),
                 [](const Document& lhs, const Document& rhs) {
                     if (abs(lhs.relevance - rhs.relevance) < 1e-6) {
                         return lhs.rating > rhs.rating;
                     } else {
                         return lhs.relevance > rhs.relevance;
                     }
                 });
            if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
                matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
            }
            return matched_documents;
        }
    }

    vector<Document> FindTopDocuments(const string& raw_query, DocumentStatus status) const {
        if(IsValidQuery(raw_query)==false) {
            throw std::invalid_argument(""invalid character int findtop"");
        }else{
            return FindTopDocuments(
                raw_query, [status](int document_id, DocumentStatus document_status, int rating) {
                    return document_status == status;
                });
        }
    }

    vector<Document> FindTopDocuments(const string& raw_query) const {
        if(IsValidQuery(raw_query)==false) {
            throw std::invalid_argument(""invalid character int findtop"");
        }else{
            return FindTopDocuments(raw_query, DocumentStatus::ACTUAL);
        }
    }

    int GetDocumentCount() const {
        return documents_.size();
    }

    tuple<vector<string>, DocumentStatus> MatchDocument(const string& raw_query,
                                     int document_id) const {
        if(IsValidQuery(raw_query)==false){
            throw std::invalid_argument(""invalid character int findtop"");
        }else{
            const Query query = ParseQuery(raw_query);
            vector<string> matched_words;
            for (const string& word : query.plus_words) {
                if (word_to_document_freqs_.count(word) == 0) {
                    continue;
                }
                if (word_to_document_freqs_.at(word).count(document_id)) {
                    matched_words.push_back(word);
                }
            }
            for (const string& word : query.minus_words) {
                if (word_to_document_freqs_.count(word) == 0) {
                    continue;
                }
                if (word_to_document_freqs_.at(word).count(document_id)) {
                    matched_words.clear();
                    break;
                }
            }
            auto result = tuple{matched_words, documents_.at(document_id).status};
            return result;
        }
    }

    int GetDocumentId(const int index) const {
        return document_ids.at(index);
    }

private:
    struct DocumentData {
        int rating;
        DocumentStatus status;
    };
    const set<string> stop_words_;
    map<string, map<int, double>> word_to_document_freqs_;
    map<int, DocumentData> documents_;
    vector<int> document_ids;

    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }

    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }

    static int ComputeAverageRating(const vector<int>& ratings) {
        if (ratings.empty()) {
            return 0;
        }
        int rating_sum = 0;
        for (const int rating : ratings) {
            rating_sum += rating;
        }
        return rating_sum / static_cast<int>(ratings.size());
    }

    struct QueryWord {
        string data;
        bool is_minus;
        bool is_stop;
    };

    QueryWord ParseQueryWord(string text) const {
        bool is_minus = false;
        QueryWord result;
        // Word shouldn't be empty
        if (text[0] == '-') {
            is_minus = true;
            text = text.substr(1);
        }
        result = {text, is_minus, IsStopWord(text)};
        return result;
    }

    struct Query {
        set<string> plus_words;
        set<string> minus_words;
    };

    Query ParseQuery(const string& text) const {
        Query query;
        for (const string& word : SplitIntoWords(text)) {
            const QueryWord query_word = ParseQueryWord(word);
            if (!query_word.is_stop) {
                if (query_word.is_minus) {
                    query.minus_words.insert(query_word.data);
                } else {
                    query.plus_words.insert(query_word.data);
                }
            }
        }
        return query;
    }

    // Existence required
    double ComputeWordInverseDocumentFreq(const string& word) const {
        return log(GetDocumentCount() * 1.0 / word_to_document_freqs_.at(word).size());
    }

    template <typename DocumentPredicate>
    vector<Document> FindAllDocuments(const Query& query,
                                      DocumentPredicate document_predicate) const {
        map<int, double> document_to_relevance;
        for (const string& word : query.plus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            const double inverse_document_freq = ComputeWordInverseDocumentFreq(word);
            for (const auto [document_id, term_freq] : word_to_document_freqs_.at(word)) {
                const auto& document_data = documents_.at(document_id);
                if (document_predicate(document_id, document_data.status, document_data.rating)) {
                    document_to_relevance[document_id] += term_freq * inverse_document_freq;
                }
            }
        }

        for (const string& word : query.minus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            for (const auto [document_id, _] : word_to_document_freqs_.at(word)) {
                document_to_relevance.erase(document_id);
            }
        }

        vector<Document> matched_documents;
        for (const auto [document_id, relevance] : document_to_relevance) {
            matched_documents.push_back(
                {document_id, relevance, documents_.at(document_id).rating});
        }
        return matched_documents;
    }

    static bool IsValidWord(const string& word) {
        return none_of(word.begin(), word.end(), [](char c) {
            return c >= '\0' && c < ' ';
        });
    }

    static bool IsValidQuery(const string& raw_query) {
        if(IsValidWord(raw_query)==false) {
            return false;
        }
        for (int i = 0; i < raw_query.size(); ++i) {
            if (raw_query[i] == '-' || raw_query[raw_query.size()-1]=='-') {
                if (raw_query[i + 1] == '-' || raw_query[i + 1] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }
};"
2BaRzwd9,Advent of Code 2023 - Day 21,mgla,C#,Thursday 21st of December 2023 10:59:15 AM CDT,"var input = File.ReadAllLines(""input.txt"");
// The grid is a square of 131x131 tiles. S is in the exact center at (65, 65).
// The edge rows and columns are all open, and S has a straight path to all of them.
// It takes 65 steps to reach the first set of edges, then 131 more to reach every next set.
// When we reach the first edges, the points form a diamond.
// Then we run to the next edges, and to the ones after that, making the diamond grow.
// For each of those 3 runs, we will store the number of steps taken (x) and the number of open tiles at that step (y).
// 3 pairs are enough to interpolate the growth function - y = f(x),
// so I went searching for an online Lagrange interpolation calculator,
// because that is all I can remember about numerical methods from college. :)
// I found this, and it helped: https://www.dcode.fr/lagrange-interpolating-polynomial
// It's a quadratic formula! (it's a square grid, and with every step we form a perfect diamond, so it makes sense)
// So we can just calculate the formula for X = 26501365, and we get the answer.

const long totalSteps = 26501365L;

var sequenceCounts = new List<(int X, int Y)>();
var startPosition = input.Length / 2; // 65
var start = new Position(startPosition, startPosition);
var visited = new HashSet<Position> { start };
var steps = 0;

for (var run = 0; run < 3; run++)
{
    for (; steps < run * 131 + 65; steps++) // First run is 65 steps, the rest are 131 each.
    {
        var nextOpen = new HashSet<Position>();
        foreach (var position in visited)
        {
            foreach (var dir in new[] { Direction.Up, Direction.Down, Direction.Left, Direction.Right })
            {
                var dest = position.Move(dir);
                if (input[Modulo(dest.Row)][Modulo(dest.Col)] != '#')
                {
                    nextOpen.Add(dest);
                }
            }
        }

        visited = nextOpen;

        if (steps == 63)
        {
            Console.WriteLine($""Part 1: {visited.Count}"");
        }
    }
    sequenceCounts.Add((steps, visited.Count));
}

// Lagrange interpolation
double result = 0;

for (var i = 0; i < 3; i++)
{
    // Compute individual terms of formula
    double term = sequenceCounts[i].Y;

    for (var j = 0; j < 3; j++)
    {
        if (j != i)
        {
            term = term * (totalSteps - sequenceCounts[j].X) / (sequenceCounts[i].X - sequenceCounts[j].X);
        }
    }

    // Add current term to result
    result += term;
}

Console.WriteLine($""Part 2: {result}"");

return;

static int Modulo(int number)
{
    return ((number % 131) + 131) % 131;
}

internal record Direction(int Row, int Col)
{
    public static Direction Up = new(-1, 0);
    public static Direction Down = new(1, 0);
    public static Direction Left = new(0, -1);
    public static Direction Right = new(0, 1);
}

internal record Position(int Row, int Col)
{
    public Position Move(Direction dir)
    {
        return new Position(Row + dir.Row, Col + dir.Col);
    }
}"
B8XYtGYL,syncml-keyloc-2-report.xml,mar-kim,MXML,Thursday 21st of December 2023 10:50:25 AM CDT,"<?xml version=""1.0""?>
<SyncML xmlns=""SYNCML:SYNCML1.2"">
  <SyncHdr>
    <VerDTD>1.2</VerDTD>
    <VerProto>DM/1.2</VerProto>
    <SessionID>59</SessionID>
    <MsgID>22</MsgID>
    <Target>
      <LocURI>https://hostname/path</LocURI>
    </Target>
    <Source>
      <LocURI>A6E141E1EC7A554C8C18A12E1F8225A2</LocURI>
    </Source>
  </SyncHdr>
  <SyncBody>
    <Status>
      <CmdID>1</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>0</CmdRef>
      <Cmd>SyncHdr</Cmd>
      <Data>200</Data>
    </Status>
    <Status>
      <CmdID>2</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>poc-10989-atomic</CmdRef>
      <Cmd>Atomic</Cmd>
      <Data>507</Data>
    </Status>
    <Status>
      <CmdID>3</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>poc-10989-KeyLocation</CmdRef>
      <Cmd>Add</Cmd>
      <Data>500</Data>
    </Status>
    <Status>
      <CmdID>4</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>poc-10989-ContainerName</CmdRef>
      <Cmd>Add</Cmd>
      <Data>216</Data>
    </Status>
    <Status>
      <CmdID>5</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>poc-10989-PFXCertPassword</CmdRef>
      <Cmd>Add</Cmd>
      <Data>216</Data>
    </Status>
    <Status>
      <CmdID>6</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>poc-10989-PFXKeyExportable</CmdRef>
      <Cmd>Add</Cmd>
      <Data>216</Data>
    </Status>
    <Status>
      <CmdID>7</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>poc-10989-PFXCertPasswordEncryptionType</CmdRef>
      <Cmd>Add</Cmd>
      <Data>216</Data>
    </Status>
    <Status>
      <CmdID>8</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>poc-10989-PFXCertPasswordEncryptionStore</CmdRef>
      <Cmd>Add</Cmd>
      <Data>216</Data>
    </Status>
    <Status>
      <CmdID>9</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>poc-10989-PFXCertBlob</CmdRef>
      <Cmd>Add</Cmd>
      <Data>216</Data>
    </Status>
    <Status>
      <CmdID>10</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>get-poc-status</CmdRef>
      <Cmd>Get</Cmd>
      <Data>404</Data>
    </Status>
    <Final/>
  </SyncBody>
</SyncML>
"
sJV9hghe,syncml-keyloc-2-cmd.xml,mar-kim,MXML,Thursday 21st of December 2023 10:48:09 AM CDT,"<?xml version=""1.0""?>
<SyncML xmlns=""SYNCML:SYNCML1.2"">
  <SyncHdr>
    <VerDTD>1.2</VerDTD>
    <VerProto>DM/1.2</VerProto>
    <SessionID>59</SessionID>
    <MsgID>21</MsgID>
    <Target>
      <LocURI>A6E141E1EC7A554C8C18A12E1F8225A2</LocURI>
    </Target>
    <Source>
      <LocURI>https://hostname/path</LocURI>
    </Source>
  </SyncHdr>
  <SyncBody>
    <Status>
      <CmdID>1</CmdID>
      <MsgRef>21</MsgRef>
      <CmdRef>0</CmdRef>
      <Cmd>SyncHdr</Cmd>
      <TargetRef>https://hostname/path</TargetRef>
      <SourceRef>A6E141E1EC7A554C8C18A12E1F8225A2</SourceRef>
      <Data>212</Data>
    </Status>
    <Atomic>
      <CmdID>poc-10989-atomic</CmdID>
      <Add>
        <CmdID>poc-10989-KeyLocation</CmdID>
        <Item>
          <Target>
            <LocURI>./Device/Vendor/MSFT/ClientCertificateInstall/PFXCertInstall/10989/KeyLocation</LocURI>
          </Target>
          <Meta>
            <Format xmlns=""syncml:metinf"">int</Format>
          </Meta>
          <Data>2</Data>
        </Item>
      </Add>
      <Add>
        <CmdID>poc-10989-ContainerName</CmdID>
        <Item>
          <Target>
            <LocURI>./Device/Vendor/MSFT/ClientCertificateInstall/PFXCertInstall/10989/ContainerName</LocURI>
          </Target>
          <Meta>
            <Format xmlns=""syncml:metinf"">chr</Format>
          </Meta>
          <Data>Personal</Data>
        </Item>
      </Add>
      <Add>
        <CmdID>poc-10989-PFXCertPassword</CmdID>
        <Item>
          <Target>
            <LocURI>./Device/Vendor/MSFT/ClientCertificateInstall/PFXCertInstall/10989/PFXCertPassword</LocURI>
          </Target>
          <Meta>
            <Format xmlns=""syncml:metinf"">chr</Format>
          </Meta>
          <Data>password</Data>
        </Item>
      </Add>
      <Add>
        <CmdID>poc-10989-PFXKeyExportable</CmdID>
        <Item>
          <Target>
            <LocURI>./Device/Vendor/MSFT/ClientCertificateInstall/PFXCertInstall/10989/PFXKeyExportable</LocURI>
          </Target>
          <Meta>
            <Format xmlns=""syncml:metinf"">bool</Format>
          </Meta>
          <Data>false</Data>
        </Item>
      </Add>
      <Add>
        <CmdID>poc-10989-PFXCertPasswordEncryptionType</CmdID>
        <Item>
          <Target>
            <LocURI>./Device/Vendor/MSFT/ClientCertificateInstall/PFXCertInstall/10989/PFXCertPasswordEncryptionType</LocURI>
          </Target>
          <Meta>
            <Format xmlns=""syncml:metinf"">int</Format>
          </Meta>
          <Data>2</Data>
        </Item>
      </Add>
      <Add>
        <CmdID>poc-10989-PFXCertPasswordEncryptionStore</CmdID>
        <Item>
          <Target>
            <LocURI>./Device/Vendor/MSFT/ClientCertificateInstall/PFXCertInstall/10989/PFXCertPasswordEncryptionStore</LocURI>
          </Target>
          <Meta>
            <Format xmlns=""syncml:metinf"">chr</Format>
          </Meta>
          <Data>My</Data>
        </Item>
      </Add>
      <Add>
        <CmdID>poc-10989-PFXCertBlob</CmdID>
        <Item>
          <Target>
            <LocURI>./Device/Vendor/MSFT/ClientCertificateInstall/PFXCertInstall/10989/PFXCertBlob</LocURI>
          </Target>
          <Meta>
            <Format xmlns=""syncml:metinf"">chr</Format>
          </Meta>
          <Data>MIIRHwIBAzCCENUGCSqGSIb3DQEHAaCCEMYEghDCMIIQvjCCBrIGCSqGSIb3DQEHBqCCBqMwggafAgEAMIIGmAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAiJwbhXLrXPfQICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEDq0Op3eET0dmtafwgLwOQ6AggYwtoZHstLl0L+Bwly18JAhCQHm/x+9blNt+FH2yjC8THkD+AedwOzImq6jdp6E46nL/A7oKziqsO3VMltxC2TOZb+MistQV60o+KM2X3+yBlAnY66cd8OAVw+j/At+wzB7HZPAhLMDMEemVOVAHr4KxWgTSL7BZRLKZLHFVS/xn1LVxs+dYJq1Fw8Xo2fOPBqoUZQ7yMS13VVRZNR6nMqt9HwkGygUM3wfGk8BTfbwUCy3BXhW+wfdTWSZ+w5hGvca74SCxB3CWfnOrNm7/6udalC67ydvotBIhG5lWZV54LnUbwf8oxz9ViHNDvCOKVVkvApQaFiT5SMlM60n3zfjQmJWRyPSWeSCIkeFrD143vjJ5YiPQwcyPRq7kL0UPr5IKI8OZ7vU9IEjbVY38TRzjGfZXVdzXX9U85Ujc0Irig8wes6LWcg1eNNeysHKqskRHSZWW7mkAaSemG+80GJqzkgh7Zuscat8RxCuQHjrKMvTeojqAQ6A8EnocKIVsiLdcxjyCnj8KAAsX8r6YPZlqWSnbRu89g0ix6b3uDGNDIA/36IEXEKvXC/MSju0HJnuhLbq2qdQD4TQl/EYfT0ih0Q0vK2uCZQGFQatlrqSxIy8apLOQEK3FLayh95nBUEvzyY4AT0MKVaPJ/HyNXicS32j8CQdW9yt0LTMLI2s9pg7CaWnv1vtV82lcI7pMADbVHxazv+eiSdvYjOfExnjRgMfOuS0ToQPMsb27uYPm3V40nXMuAB1EAy+uNVBTPatSma5AKZBFUuTW8XcdkWpDl57dwkKx+7lnTcTZ8nNlKfjDq1ZlwBe1R7oPk9hByUFsklhYV+YCAoBOe6imPGAXuUdiQ9pvFv45Jx4pHK0aoEwti5JepeXMZaydtyZa4JyRED1m+IaGuW6RmrjlgRSe1pyoX9KEwetYtrECrv+fNyUeOT/CCUToQbDA6ZwOv+u4myRZdUGhctvThcrAsADDrrjj/15XFgbRXG8v4Af51BWEb1X4V81jPZLAY0cMwZ9Mk3UgWnxDlVgc2W3RhH1KUXIqJwcFgJr7VltlOCctG0uMG9kBoNOhu877nbO5OR7igD9CxytXr0DAOvHpWTdEUskdZORYEjgAbIbddqEsvWOoiX4UBIQZZXvUpNHzCmYpg8Gh3cCM6vsenjS7gn7cycvmdzD74cP6GsXngdsmJ2ucdF75L3awVj9v3shh0v36hUu3g+Jt0Ifu6RQduLYc3tI/6vHqCqERVxe+XbcRRVXbD0o6g7WDmK2VHRdFZRBSyiTUM+KSdeWMR1+nZVw+ibYWhwx6q5OHpmeOifV7UNlL0FG13n2xJECeYWPobcz8LKbGQ79wPFz/JtF4PSExagqzsDMkjeJXVQ8a0l+Pfj5QU4jSSzCUOJvo2Mm3CecuTJ8EWUbMTZIITxjkqhIbW0TSsqur1quXts9e8k/1Ns0PYJc/Th0zbu4qb4Du/ZFm/04B2WuMWH0khZ2xeSvkZ+syLqCEGAmxR5/EhIia64fdvlJqdoIHuP0m9l2oaInORzoF6szguk96Sok6yUs4Wt0vM/uJ46ULQJ+w7GsQrZz94TjtogXG6/ZYEOSyrXQFKR26BOD9cntBkR7Sk9qpBGPEmTa3Ch+66ALZ+xo77Ap68YOl+ijhRirRdBDDmEDJVNn+xnx5LQLta27NxfiySZTdAdNyg+CjyBoXUSYv/omcTcOPAIrYLPePCi9aOBxqy1xzRmqLbxmZhO1AKVyGO7YiAagRTC5xdlZf82jDpy+BgrXBT/5xlUBesAfWRGi3vMuO5nE+glxl/GBWJVxnHf6sdTj5BUveX1Qo2sRql2yuUYakOG7uC4NUbKP2GjVmYaLUBafyF44iwWa9TqK+KAyByC0mUcsoJXfQ3RLgJ7NOV/LEbuCEC4d6DFDF9wSvhNzyKhr6Il1phGNPu5UM1S3OiutKc8AS7vYQkA3ED2E5PToURo0qn2Xe1mU3ljCWHp7iEW3qgIZ1y9Ff+oLfgiU/J3fzl80NERFrQoCpD0xNiYnygKQsYXDWt8+fNDpsv3sfWSXY2Qelcq3+jChIC8FvnpMFq782XUGoomAI7uHdi6pBXGyT5uDipUxx349MIIKBAYJKoZIhvcNAQcBoIIJ9QSCCfEwggntMIIJ6QYLKoZIhvcNAQwKAQKgggmxMIIJrTBXBgkqhkiG9w0BBQ0wSjApBgkqhkiG9w0BBQwwHAQIZ6u/iSRukPoCAggAMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBANATg32bjssuljOhAd2kw8BIIJUI75vrbvA1SvMT5OBHewZPjuARP4aF5RasPM5Ikty59nwQPXIK9Cc7zcD0KCpwoLLbhuJ+ah4yC+2Dfj0XW39FFyqzH0Qgorw1z5SqLu1aHslIxILFLSMGUl9jhdfQ64SW5EvorAYGYTGFqhOpfUwkgDEe0LKxqcjQoWYCV8+rs4DCnaZT+Z6g97D6n3MkT6t7U9DcbdjaWzx3df5X+aP3QmEPkgVNqhBW9H9o/q69Ai/VO+UICN2kjwU+MtIPiwHGtblFw+0mT7u8rOzQCzZr+05uTt4d5u/7QrtuiSsk3kxUFSfSaNoBtTTwZgq73NqsstViYm4RQt48mvbnycKjHlEx1QL80agB1NzOIP6EppzCbCnmA6UlE6VqVrkq0Yw5VwEpo2qQ6RT3dNCKEuXy3trWIa5Ic+fEGkiUsK0AMAvVu7NZyJ1H9Vj3tRYdttf/SgkaJs2Z3euXkszkkypPrzskcucF9RZuSc5+Kb90BTHEDNLCkUJWDUO5W24i242QudEaTQamLyLdXNFGT3ANYqAtVhPRdVnqjn8Uycf4kJKlkJgwG2lF7W0Z5mxg5pwRaYTecPHRrb2YKXkcE1lvWaAl8td8L7gcrwxtDw0RAgypmBmzOorItwrn/CaZctBA+jw5rfSa4Td5Fa6dXjC5RsNQ4NsPsjgfy+IzIz+gYG9k17/mXGkhb8cUuzhAzKx6PxYs2X0sScQzkYZgbQIbQDBMLHit350zprMe64f5qMJ23DXLq88dxCpOoGp4L8dkm/wek9YO/eZkwFqa79uEHXb2GZFpLmDTHGNDxEgte4kMR6NKa2vCMsEgeVdwsOLoKEBcU3+WAmkGm5sQNXyH9GGYvc8bgLd1cOadevzXr6opGRdXEJYyefowaqOBRkg63jODEmjc1t33S8s0SmX/1BOREBiEFUdUqatXOB5/L6Fr1tR2iEgE0Kx2MOZpo8hUMOYY0F4BR9UfmLzSVjQM4yD0GT/zS3DALBs5mRiuzMeQDPtdiVnDoJuwHTeyqI4dRp4Qbuk/qylH/Pfp7BjiKc5Nh5N9B1nQK0HNaWV8nW0hU9giew4gli9YOdRSTb6d8sCU5E9iOjD4TP5IZuJskeGNev8GynIRs0ls7miWPbPVHMwnBSSXhefJGPQ3bl6rJy3ZJ36xvTUfjKNyp5h6oLO5/WFYJuWvNIuMSUjToOtH2HcyYWRkNo8+PjO9FHV7TVFyB0BswH7INC7SthboG1oPT/hfUTGEaa8gxX4GOCZ7pxuGU5GEFbmPk0LJK7x1e6PpG1GYxpk+d9BEj6pvOlk1Q6DdcRe4xl3IAqViVqcqwNY8jMouXGcpVPM3YzqSiHUDHB9saOBZDuFNnXTUB8XtWaIhf1GCC1Z3t+20aAWEbhTZhSZGv5wqTmuV7nummw9klpmVBjXQYp8+Pj/unmwsH8ES7nGyxyYfWAIlJH3qe/eltKhqLt6+5v2N3x5kwGTHxN7nJpoHvdZ4/efHGXlZLH84Ab5M211w4At/hbj06ICNEJbDb1IXmNBq1ge0/8vrY84Wg37odxwc4ps6cFjaa2Mfe75a2zRPkii8hxW/9beIbxoUCde5M16d3WeHOGtxy4pLC8vaS9u/BVXtebKBVCeTjqOfpZ5I2m3xGs9eUFeoLRgpblS/RpYVIeUi5jxPWRwh2jkMPJRIE3+wZuLxNL9mJD+VyZXKzeGzp0uCCpMURsHgI91NPwVoXwe+sRtW5yVCI2ph6beyWB0Z6UDxv8TN5FrTkexb20xm3vcX6AOp70Z42ZGds6Df32z/mw96ajywoOUAdVzEeMNch/UEgl8aXPcHiqWJ50rEdfd0gReaiE6jmhE/NlUEbboyuo4fC4wKA9sOGtsHE/5OAMTkyxtjk/y58b7TA8WmhW4QYhrdN0RUBXD/5zuLBbGc2DNY3rCfXuyKw9mpe93UbLwcBcuzh7hvi2yQzzTw6mpl+n+fDcyMiSgVQ0g35zzolwpzAzJ94RwLJ2A1d/A4MWJNetM3yQRbMenF8m9l+9RnT5uy8WyR7AhyTpxEaoWbcCDpekii1Ik/XQ44P7JOegplOyB56Z6Vhwktf0FwQVfMAmCHovD6o+YC4Llu2rR3cX3Vl9pqurVJIK2MiKWqUgdLdDstl0ECuZe8y8tgV5zOyns2jvXX95C7rQ2p0ALP71fUWKOx8Q9ytp3ZNy5d12Vc1s60R1EkYSO1WCJce5Ul4GJdkEfxfGJKBTRdImpw0A9GwQnSW7N/q8q3KK4O6geNtSvrf/3hrTG7ShpKYVbRdoQE+sTAkgIU6Dn2KnnAPorhsuJHVmPs9IRZxJfZo9euEOxyqbyLsq21dDMqsNCfw0rgZt+XDoO6EtfMlSJ4hwdFrL/yKMJImkQLj86TYb25hteFnie/JzilzVB1D5LrHipJcShkg/r07G5nzXRvN6cEC4zDNqXGsqXVDWD5ty8WR7CLxG+YtW4dm+e/h5B+d4EsWCQiP/9o8UgDb2f696hxLtcXUHqphPZEvObNnHl9p7Ac8VLM8z+VSFoCIt37GQXDsA8pBuqUhX/OhnpSntfrynOXZ3PXIge/vJaeLEva8+KGy3S2lytcQLxuXLpmYJD836zLPFjA1PJVkSXe5FvtTufI/EI3faOIxH8GL6TZJgXLziO9SLCM2m4Nth34VaGwWfhC+VE4gHPVdg5vP1lCQZE1VKoWeTYLGxFCQLId6LBcKdvd2XpIIkEhaMvjRH4UvYFIWsfK0QIHMLczz5KDmsYw4mEvaUS9WKwCr8U2LlTQmXbXDYwz0Yrb2+FhgNvtI9a3GJhKPKs+6RHkOQawRugX58kCgJHXkfm01gZR0lpusUjtvFecwv9VRka6qMrZeOFx6qfhDIQoHcWcPSjCuemXdx95IvAoZ/5//z2a5qciveA53vviEYsqHLWItW+oU6mMPd2Bv74YKeGZwHcqKQnpe182sGuqzDP/nZwQ1tr7JdCJwqUmx32rhKm4kNCk+gSadvlezU325X2AoIcCsFOWi416xEOZYqKUSzBImQg/lhj9MbsRP7YB3d/Ey0wdvYmIzqWTFEi4JUEe/TONqHhM59012khewmWZzexwhfTjs1NyNOu/IfI42ETK+FIxUIOuhQ99yFb90UelJgbBbO01IkYCxNa4LqJgW7w062cB9xTbiKnl+z2XOqMSUwIwYJKoZIhvcNAQkVMRYEFAOVRFtBGaqoN8wUf26AydvIlgnmMEEwMTANBglghkgBZQMEAgEFAAQgZtv9q2RU5QvwXYcJMG4ZRFb/Qi43wAquRAhYWkGNtkMECFzyAXrNUzm/AgIIAA==</Data>
        </Item>
      </Add>
    </Atomic>
    <Get>
      <CmdID>get-poc-status</CmdID>
      <Item>
        <Target>
          <LocURI>./Device/Vendor/MSFT/ClientCertificateInstall/PFXCertInstall/10989/Status</LocURI>
        </Target>
      </Item>
    </Get>
    <Final/>
  </SyncBody>
</SyncML>
"
F2BQB4dL,Advent of code 2023 day 21,hhoppe,Python,Thursday 21st of December 2023 10:27:10 AM CDT,"def day21_part2(s, nsteps=26_501_365):
  grid = np.array([list(line) for line in s.splitlines()])
  n = len(grid)
  nrings, remainder = divmod(nsteps, n)
  assert grid.shape[1] == n and grid[n // 2, n // 2] == 'S' and remainder == n // 2
  radius = 2
  grid = np.tile(grid, (1 + 2 * radius,) * 2)
  empty = grid != '#'
  active = np.full(np.array(grid.shape) + 2, False)
  active[(1 + radius * n + n // 2,) * 2] = True
  for _ in range(n // 2 + radius * n):
    active[1:-1, 1:-1] = empty & (
        active[:-2, 1:-1] | active[2:, 1:-1] | active[1:-1, :-2] | active[1:-1, 2:]
    )
  active = active[1:-1, 1:-1]
  counts = active.reshape(active.shape[0] // n, n, active.shape[1] // n, n).sum((1, 3))
  return (
      counts[2, 2] * (1 + 4 * (nrings // 2) * (nrings // 2 - 1))
      + counts[1, 2] * 4 * (nrings // 2) ** 2
      + (counts[0, 1] + counts[0, 3] + counts[4, 1] + counts[4, 3]) * nrings
      + (counts[1, 1] + counts[1, 3] + counts[3, 1] + counts[3, 3]) * (nrings - 1)
      + (counts[0, 2] + counts[2, 0] + counts[2, 4] + counts[4, 2])
  )"
100Xswir,Сам алгоритм,cyberjab,C++,Thursday 21st of December 2023 09:52:30 AM CDT,"//#pragma GCC optimize(""03"")
//#pragma GCC target(""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"")
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <deque>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <ctime>
#include <chrono>
#include <random>
#include <functional>

using namespace std;
const int MOD = 1e9 + 7;
const int xx = 257;

vector<long long> x = {1};

bool isequal(int from1, int from2, int len, vector<long long> h, vector<long long> x, vector<long long> h2) {
    return (h[from1 + len - 1] + h2[from2 - 1] * x[len]) % MOD ==
        (h2[from2 + len - 1] + h[from1 - 1] * x[len]) % MOD;
}

void make_x_koefs(int n) {
    int k = x.size();
    if (n + 1 > k) {
        x.resize(n + 1);
    }
    for (int i = k; i < n + 1; i++) {
        x[i] = (x[i - 1] * xx) % MOD;
    }
}

vector <long long> make_polynom(string s) {
    vector <long long> h(s.size(), 0);
    for (int i = 1; i < s.size(); i++) {
        h[i] = (h[i - 1] * xx + s[i]) % MOD;
    }
    return h;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    /*cout << setprecision(x)*/
    cout << fixed;    
    string a = "" abvsdsf"";
    string b = "" sds"";
    make_x_koefs(a.size());
    vector<long long> h = make_polynom(a);
    vector<long long> h2 = make_polynom(b);
    for (int i = 1; i <= a.size() - b.size() + 1; i++) {
        cout << isequal(i, 1, b.size() - 1, h, x, h2) << "" "";
    }
}"
vFRKq4Cp,News Dec21 23,Newscaster_Ned,Email,Thursday 21st of December 2023 08:56:48 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎y‎,‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎.‎ ‎R‎e‎m‎e‎m‎b‎e‎r‎ ‎t‎o‎ ‎s‎u‎b‎s‎c‎r‎i‎b‎e‎ ‎t‎o‎ ‎P‎e‎w‎D‎i‎e‎P‎i‎e‎!‎

T‎a‎r‎a‎j‎i‎ ‎C‎l‎a‎i‎m‎s‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎P‎a‎y‎ ‎D‎i‎s‎c‎r‎e‎p‎a‎n‎c‎y‎:‎ ‎'‎W‎o‎r‎k‎ ‎S‎o‎ ‎H‎a‎r‎d‎,‎'‎ ‎'‎P‎a‎i‎d‎ ‎a‎ ‎F‎r‎a‎c‎t‎i‎o‎n‎'‎
H‎a‎m‎a‎s‎ ‎C‎u‎t‎s‎ ‎O‎f‎f‎ ‎H‎o‎s‎t‎a‎g‎e‎ ‎N‎e‎g‎o‎t‎i‎a‎t‎i‎o‎n‎s‎;‎ ‎R‎e‎f‎u‎s‎e‎s‎ ‎t‎o‎ ‎T‎a‎l‎k‎ ‎U‎n‎d‎e‎r‎ ‎F‎i‎r‎e‎
N‎e‎t‎f‎l‎i‎x‎’‎s‎ ‎‘‎C‎o‎C‎o‎m‎e‎l‎o‎n‎ ‎L‎a‎n‎e‎’‎ ‎F‎a‎c‎e‎s‎ ‎B‎a‎c‎k‎l‎a‎s‎h‎ ‎o‎v‎e‎r‎ ‎C‎r‎o‎s‎s‎d‎r‎e‎s‎s‎i‎n‎g‎ ‎E‎p‎i‎s‎o‎d‎e‎
A‎u‎s‎t‎r‎a‎l‎i‎a‎ ‎O‎f‎f‎e‎r‎s‎ ‎1‎1‎ ‎M‎i‎l‎i‎t‎a‎r‎y‎ ‎P‎e‎r‎s‎o‎n‎n‎e‎l‎ ‎b‎u‎t‎ ‎N‎o‎ ‎W‎a‎r‎s‎h‎i‎p‎ ‎t‎o‎ ‎P‎r‎o‎t‎e‎c‎t‎ ‎R‎e‎d‎ ‎S‎e‎a‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
C‎h‎i‎c‎a‎g‎o‎ ‎A‎l‎d‎e‎r‎m‎a‎n‎:‎ ‎B‎i‎d‎e‎n‎ ‎A‎d‎m‎i‎n‎ ‎L‎e‎t‎t‎i‎n‎g‎ ‎i‎n‎ ‎A‎s‎y‎l‎u‎m‎ ‎S‎e‎e‎k‎e‎r‎s‎ ‎U‎n‎d‎e‎r‎ ‎‘‎F‎a‎l‎s‎e‎’‎ ‎P‎r‎e‎t‎e‎n‎s‎e‎s‎

C‎o‎u‎r‎t‎ ‎D‎a‎t‎e‎s‎ ‎u‎p‎ ‎t‎o‎ ‎a‎ ‎D‎e‎c‎a‎d‎e‎ ‎f‎r‎o‎m‎ ‎N‎o‎w‎!‎
E‎A‎G‎L‎E‎ ‎P‎A‎S‎S‎,‎ ‎T‎E‎X‎A‎S‎ ‎-‎ ‎D‎E‎C‎E‎M‎B‎E‎R‎ ‎1‎7‎:‎ ‎I‎n‎ ‎a‎n‎ ‎a‎e‎r‎i‎a‎l‎ ‎v‎i‎e‎w‎,‎ ‎a‎ ‎U‎.‎S‎.‎ ‎B‎o‎r‎d‎e‎r‎ ‎P‎a‎t‎r‎o‎l‎ ‎a‎g‎e‎n‎t‎ ‎w‎a‎t‎c‎h‎e‎s‎ ‎o‎v‎e‎r‎ ‎m‎i‎g‎r‎a‎n‎t‎s‎ ‎w‎a‎i‎t‎i‎n‎g‎ ‎t‎o‎ ‎b‎e‎ ‎p‎r‎o‎c‎e‎s‎s‎e‎d‎ ‎a‎f‎t‎e‎r‎ ‎c‎r‎o‎s‎s‎i‎n‎g‎ ‎f‎r‎o‎m‎ ‎M‎e‎x‎i‎c‎o‎ ‎i‎n‎t‎o‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎o‎n‎ ‎D‎e‎c‎e‎m‎b‎e‎r‎ ‎1‎7‎,‎ ‎2‎0‎2‎3‎ ‎i‎n‎ ‎E‎a‎g‎l‎e‎ ‎P‎a‎s‎s‎,‎ ‎T‎e‎x‎a‎s‎.‎ ‎A‎ ‎s‎u‎r‎g‎e‎ ‎o‎f‎ ‎m‎i‎g‎r‎a‎n‎t‎s‎,‎ ‎a‎s‎ ‎m‎a‎n‎y‎ ‎a‎s‎ ‎1‎2‎,‎0‎0‎0‎ ‎p‎e‎r‎ ‎d‎a‎y‎,‎ ‎c‎r‎o‎s‎s‎i‎n‎g‎ ‎t‎h‎e‎ ‎…‎
C‎h‎i‎c‎a‎g‎o‎ ‎A‎l‎d‎e‎r‎m‎a‎n‎ ‎a‎n‎d‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎i‎c‎ ‎U‎.‎S‎.‎ ‎H‎o‎u‎s‎e‎ ‎c‎a‎n‎d‎i‎d‎a‎t‎e‎ ‎R‎a‎y‎m‎o‎n‎d‎ ‎L‎o‎p‎e‎z‎ ‎r‎e‎a‎c‎t‎e‎d‎ ‎t‎o‎ ‎C‎h‎i‎c‎a‎g‎o‎ ‎M‎a‎y‎o‎r‎ ‎B‎r‎a‎n‎d‎o‎n‎ ‎J‎o‎h‎n‎s‎o‎n‎ ‎a‎t‎t‎a‎c‎k‎i‎n‎g‎ ‎T‎e‎x‎a‎s‎ ‎G‎o‎v‎.‎ ‎G‎r‎e‎g‎ ‎A‎b‎b‎o‎t‎t‎ ‎(‎R‎)‎ ‎f‎o‎r‎ ‎s‎e‎n‎d‎i‎n‎g‎ ‎m‎i‎g‎r‎a‎n‎t‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎c‎i‎t‎y‎ ‎b‎y‎ ‎s‎t‎a‎t‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎b‎l‎a‎m‎e‎ ‎s‎h‎o‎u‎l‎d‎ ‎r‎e‎a‎l‎l‎y‎ ‎b‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎B‎i‎d‎e‎n‎ ‎a‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎.‎

D‎e‎S‎a‎n‎t‎i‎s‎ ‎S‎a‎y‎s‎ ‎H‎e‎ ‎W‎o‎n‎'‎t‎ ‎W‎i‎t‎h‎d‎r‎a‎w‎ ‎f‎r‎o‎m‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎B‎a‎l‎l‎o‎t‎
D‎e‎S‎a‎n‎t‎i‎s‎ ‎S‎a‎y‎s‎ ‎H‎e‎ ‎W‎o‎n‎'‎t‎ ‎W‎i‎t‎h‎d‎r‎a‎w‎ ‎f‎r‎o‎m‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎B‎a‎l‎l‎o‎t‎
1‎,‎2‎8‎5‎
A‎l‎m‎o‎s‎t‎ ‎H‎a‎l‎f‎ ‎o‎f‎ ‎B‎u‎i‎c‎k‎ ‎D‎e‎a‎l‎e‎r‎s‎ ‎L‎e‎a‎v‎e‎ ‎G‎M‎ ‎t‎o‎ ‎A‎v‎o‎i‎d‎ ‎S‎e‎l‎l‎i‎n‎g‎ ‎E‎l‎e‎c‎t‎r‎i‎c‎ ‎V‎e‎h‎i‎c‎l‎e‎s‎
A‎l‎m‎o‎s‎t‎ ‎H‎a‎l‎f‎ ‎o‎f‎ ‎B‎u‎i‎c‎k‎ ‎D‎e‎a‎l‎e‎r‎s‎ ‎L‎e‎a‎v‎e‎ ‎G‎M‎ ‎t‎o‎ ‎A‎v‎o‎i‎d‎ ‎S‎e‎l‎l‎i‎n‎g‎ ‎E‎l‎e‎c‎t‎r‎i‎c‎ ‎V‎e‎h‎i‎c‎l‎e‎s‎
9‎0‎2‎
t‎r‎u‎m‎p‎
M‎e‎e‎t‎ ‎F‎o‎u‎r‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎-‎A‎p‎p‎o‎i‎n‎t‎e‎d‎ ‎J‎u‎d‎g‎e‎s‎ ‎W‎h‎o‎ ‎D‎i‎s‎q‎u‎a‎l‎i‎f‎i‎e‎d‎ ‎T‎r‎u‎m‎p‎ ‎f‎r‎o‎m‎ ‎2‎0‎2‎4‎ ‎B‎a‎l‎l‎o‎t‎
8‎,‎9‎6‎1‎
B‎a‎r‎r‎:‎ ‎I‎'‎m‎ ‎O‎f‎f‎e‎n‎d‎e‎d‎ ‎b‎y‎ ‎'‎R‎a‎c‎i‎s‎t‎ ‎O‎v‎e‎r‎t‎o‎n‎e‎s‎'‎ ‎i‎n‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎F‎o‎u‎l‎ ‎I‎m‎m‎i‎g‎r‎a‎n‎t‎ ‎R‎e‎m‎a‎r‎k‎s‎
B‎a‎r‎r‎:‎ ‎I‎'‎m‎ ‎O‎f‎f‎e‎n‎d‎e‎d‎ ‎b‎y‎ ‎'‎R‎a‎c‎i‎s‎t‎ ‎O‎v‎e‎r‎t‎o‎n‎e‎s‎'‎ ‎i‎n‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎F‎o‎u‎l‎ ‎I‎m‎m‎i‎g‎r‎a‎n‎t‎ ‎R‎e‎m‎a‎r‎k‎s‎
9‎6‎7‎
L‎i‎n‎c‎o‎l‎n‎ ‎M‎e‎m‎o‎r‎i‎a‎l‎ ‎(‎W‎a‎l‎l‎y‎ ‎G‎o‎b‎e‎t‎z‎ ‎/‎ ‎F‎l‎i‎c‎k‎r‎ ‎/‎ ‎C‎C‎ ‎/‎ ‎C‎r‎o‎p‎p‎e‎d‎)‎
L‎i‎n‎c‎o‎l‎n‎ ‎M‎e‎m‎o‎r‎i‎a‎l‎ ‎V‎a‎n‎d‎a‎l‎i‎z‎e‎d‎ ‎w‎i‎t‎h‎ ‎‘‎F‎r‎e‎e‎ ‎G‎a‎z‎a‎’‎ ‎G‎r‎a‎f‎f‎i‎t‎i‎
1‎1‎7‎
B‎i‎d‎e‎n‎o‎m‎i‎c‎s‎ ‎S‎t‎u‎d‎y‎:‎ ‎6‎2‎%‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎L‎i‎v‎i‎n‎g‎ ‎P‎a‎y‎c‎h‎e‎c‎k‎ ‎t‎o‎ ‎P‎a‎y‎c‎h‎e‎c‎k‎
B‎i‎d‎e‎n‎o‎m‎i‎c‎s‎ ‎S‎t‎u‎d‎y‎:‎ ‎6‎2‎%‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎L‎i‎v‎i‎n‎g‎ ‎P‎a‎y‎c‎h‎e‎c‎k‎ ‎t‎o‎ ‎P‎a‎y‎c‎h‎e‎c‎k‎
4‎,‎5‎4‎2‎
C‎A‎,‎ ‎M‎E‎ ‎E‎x‎p‎l‎o‎r‎i‎n‎g‎ ‎O‎p‎t‎i‎o‎n‎s‎ ‎t‎o‎ ‎K‎e‎e‎p‎ ‎T‎r‎u‎m‎p‎ ‎O‎f‎f‎ ‎B‎a‎l‎l‎o‎t‎ ‎F‎o‎l‎l‎o‎w‎i‎n‎g‎ ‎C‎O‎ ‎R‎u‎l‎i‎n‎g‎
C‎A‎,‎ ‎M‎E‎ ‎E‎x‎p‎l‎o‎r‎i‎n‎g‎ ‎O‎p‎t‎i‎o‎n‎s‎ ‎t‎o‎ ‎K‎e‎e‎p‎ ‎T‎r‎u‎m‎p‎ ‎O‎f‎f‎ ‎B‎a‎l‎l‎o‎t‎ ‎F‎o‎l‎l‎o‎w‎i‎n‎g‎ ‎C‎O‎ ‎R‎u‎l‎i‎n‎g‎
1‎,‎1‎3‎9‎
B‎i‎l‎l‎ ‎B‎a‎r‎r‎:‎ ‎S‎C‎O‎T‎U‎S‎ ‎W‎i‎l‎l‎ ‎'‎S‎l‎a‎p‎'‎ ‎D‎o‎w‎n‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎D‎i‎s‎q‎u‎a‎l‎i‎f‎i‎c‎a‎t‎i‎o‎n‎ ‎D‎e‎c‎i‎s‎i‎o‎n‎
B‎i‎l‎l‎ ‎B‎a‎r‎r‎:‎ ‎S‎C‎O‎T‎U‎S‎ ‎W‎i‎l‎l‎ ‎'‎S‎l‎a‎p‎'‎ ‎D‎o‎w‎n‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎D‎i‎s‎q‎u‎a‎l‎i‎f‎i‎c‎a‎t‎i‎o‎n‎ ‎D‎e‎c‎i‎s‎i‎o‎n‎
5‎6‎9‎
J‎a‎c‎k‎ ‎S‎m‎i‎t‎h‎'‎s‎ ‎A‎p‎p‎o‎i‎n‎t‎m‎e‎n‎t‎ ‎i‎s‎ ‎U‎n‎c‎o‎n‎s‎t‎i‎t‎u‎t‎i‎o‎n‎a‎l‎,‎ ‎F‎o‎r‎m‎e‎r‎ ‎A‎G‎ ‎t‎e‎l‎l‎s‎ ‎S‎C‎O‎T‎U‎S‎
J‎a‎c‎k‎ ‎S‎m‎i‎t‎h‎'‎s‎ ‎A‎p‎p‎o‎i‎n‎t‎m‎e‎n‎t‎ ‎i‎s‎ ‎U‎n‎c‎o‎n‎s‎t‎i‎t‎u‎t‎i‎o‎n‎a‎l‎,‎ ‎F‎o‎r‎m‎e‎r‎ ‎A‎G‎ ‎t‎e‎l‎l‎s‎ ‎S‎C‎O‎T‎U‎S‎
5‎,‎8‎1‎2‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎-‎-‎ ‎T‎r‎u‎m‎p‎ ‎L‎a‎w‎y‎e‎r‎ ‎H‎a‎b‎b‎a‎:‎ ‎T‎r‎u‎m‎p‎ ‎N‎o‎t‎ ‎S‎h‎a‎k‎e‎n‎ ‎b‎y‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎D‎e‎c‎i‎s‎i‎o‎n‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎-‎-‎ ‎T‎r‎u‎m‎p‎ ‎L‎a‎w‎y‎e‎r‎ ‎H‎a‎b‎b‎a‎:‎ ‎T‎r‎u‎m‎p‎ ‎N‎o‎t‎ ‎S‎h‎a‎k‎e‎n‎ ‎b‎y‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎D‎e‎c‎i‎s‎i‎o‎n‎

P‎e‎n‎n‎i‎n‎g‎t‎o‎n‎ ‎P‎i‎c‎k‎a‎n‎i‎n‎n‎y‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎S‎e‎x‎u‎a‎l‎l‎y‎ ‎A‎s‎s‎a‎u‎l‎t‎i‎n‎g‎ ‎W‎o‎m‎a‎n‎ ‎D‎u‎r‎i‎n‎g‎ ‎M‎a‎s‎s‎a‎g‎e‎.‎

W‎h‎a‎t‎ ‎d‎o‎ ‎y‎o‎u‎ ‎t‎h‎i‎n‎k‎ ‎y‎o‎u‎ ‎a‎r‎e‎,‎ ‎n‎e‎g‎r‎o‎?‎ ‎A‎n‎ ‎A‎s‎i‎a‎n‎ ‎w‎o‎m‎a‎n‎?‎


N‎e‎g‎r‎o‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎i‎n‎ ‎L‎o‎n‎g‎ ‎B‎e‎a‎c‎h‎ ‎A‎f‎t‎e‎r‎ ‎S‎e‎x‎u‎a‎l‎l‎y‎ ‎A‎s‎s‎a‎u‎l‎t‎i‎n‎g‎ ‎4‎ ‎W‎o‎m‎e‎n‎ ‎H‎e‎ ‎M‎e‎t‎ ‎o‎n‎ ‎D‎a‎t‎i‎n‎g‎ ‎A‎p‎p‎.‎


M‎o‎n‎k‎e‎y‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎R‎a‎p‎i‎n‎g‎ ‎1‎4‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎ ‎i‎n‎ ‎S‎e‎a‎t‎t‎l‎e‎.‎


D‎e‎t‎r‎o‎i‎t‎ ‎P‎o‎l‎i‎c‎e‎ ‎R‎e‎c‎o‎v‎e‎r‎ ‎a‎ ‎T‎o‎t‎a‎l‎ ‎o‎f‎ ‎6‎3‎ ‎D‎e‎a‎d‎ ‎F‎e‎t‎u‎s‎e‎s‎ ‎i‎n‎ ‎F‎r‎e‎e‎z‎e‎r‎s‎ ‎a‎n‎d‎ ‎i‎n‎ ‎B‎o‎x‎e‎s‎ ‎I‎n‎s‎i‎d‎e‎ ‎N‎e‎g‎r‎o‎ ‎O‎w‎n‎e‎d‎ ‎F‎u‎n‎e‎r‎a‎l‎ ‎H‎o‎m‎e‎.‎


R‎e‎c‎o‎r‎d‎ ‎N‎u‎m‎b‎e‎r‎ ‎o‎f‎ ‎1‎0‎7‎,‎0‎0‎0‎ ‎S‎p‎i‎c‎ ‎I‎l‎l‎e‎g‎a‎l‎s‎ ‎C‎a‎p‎t‎u‎r‎e‎d‎ ‎b‎y‎ ‎B‎o‎r‎d‎e‎r‎ ‎P‎a‎t‎r‎o‎l‎.‎


T‎a‎c‎o‎ ‎B‎e‎n‎d‎e‎r‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎W‎o‎m‎a‎n‎ ‎w‎i‎t‎h‎ ‎H‎a‎m‎m‎e‎r‎ ‎a‎t‎ ‎W‎a‎w‎a‎'‎s‎.‎


P‎a‎k‎i‎ ‎A‎s‎h‎r‎a‎f‎ ‎A‎l‎ ‎S‎a‎f‎o‎o‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎C‎o‎n‎s‎p‎i‎r‎i‎n‎g‎ ‎t‎o‎ ‎J‎o‎i‎n‎ ‎I‎S‎I‎S‎.‎


F‎r‎e‎s‎n‎o‎ ‎C‎i‎t‎y‎ ‎C‎o‎l‎l‎e‎g‎e‎ ‎""‎P‎r‎e‎s‎i‎d‎e‎n‎t‎""‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎R‎a‎p‎e‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎I‎'‎m‎ ‎s‎t‎a‎r‎t‎i‎n‎g‎ ‎t‎o‎ ‎t‎h‎i‎n‎k‎ ‎t‎h‎e‎ ‎w‎e‎a‎t‎h‎e‎r‎ ‎d‎o‎e‎s‎n‎'‎t‎ ‎r‎e‎a‎l‎l‎y‎ ‎c‎h‎e‎e‎r‎ ‎p‎e‎o‎p‎l‎e‎ ‎u‎p‎.‎

T‎o‎d‎a‎y‎
C‎l‎o‎u‎d‎y‎
6‎9‎°‎
/‎5‎8‎°‎
2‎4‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎1‎ ‎|‎ ‎D‎a‎y‎
6‎9‎°‎
2‎4‎%‎
S‎E‎
9‎
 ‎
m‎p‎h‎
G‎e‎n‎e‎r‎a‎l‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎.‎ ‎S‎l‎i‎g‎h‎t‎ ‎c‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎a‎ ‎r‎a‎i‎n‎ ‎s‎h‎o‎w‎e‎r‎.‎ ‎H‎i‎g‎h‎ ‎6‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
8‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
2‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎2‎1‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
5‎:‎3‎5‎ ‎p‎m‎
T‎h‎u‎ ‎2‎1‎ ‎|‎ ‎N‎i‎g‎h‎t‎
5‎8‎°‎
3‎1‎%‎
S‎E‎
7‎
 ‎
m‎p‎h‎
S‎h‎o‎w‎e‎r‎s‎ ‎e‎a‎r‎l‎y‎,‎ ‎t‎h‎e‎n‎ ‎c‎l‎o‎u‎d‎y‎ ‎o‎v‎e‎r‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎5‎8‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎3‎0‎%‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
9‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎:‎4‎2‎ ‎p‎m‎
W‎a‎x‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
1‎:‎5‎9‎ ‎a‎m‎
F‎r‎i‎ ‎2‎2‎
S‎h‎o‎w‎e‎r‎s‎
6‎9‎°‎
/‎6‎1‎°‎
4‎9‎%‎
S‎S‎E‎ ‎7‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎3‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎0‎°‎
/‎6‎2‎°‎
7‎0‎%‎
S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎4‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎4‎°‎
/‎4‎9‎°‎
8‎9‎%‎
W‎S‎W‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎6‎°‎
/‎4‎1‎°‎
8‎%‎
N‎N‎W‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎3‎°‎
/‎4‎0‎°‎
2‎4‎%‎
N‎N‎W‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎5‎°‎
/‎3‎9‎°‎
2‎0‎%‎
N‎N‎W‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎8‎
S‎u‎n‎n‎y‎
6‎7‎°‎
/‎3‎7‎°‎
2‎%‎
N‎W‎ ‎8‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎9‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
6‎4‎°‎
/‎3‎7‎°‎
4‎%‎
W‎N‎W‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎3‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎4‎°‎
/‎3‎9‎°‎
8‎%‎
N‎N‎E‎ ‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎3‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎3‎°‎
/‎3‎7‎°‎
2‎2‎%‎
N‎N‎E‎ ‎1‎2‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎0‎°‎
/‎3‎7‎°‎
2‎4‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎2‎
S‎h‎o‎w‎e‎r‎s‎
6‎0‎°‎
/‎3‎7‎°‎
3‎6‎%‎
N‎N‎E‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎3‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
5‎9‎°‎
/‎3‎7‎°‎
4‎3‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎4‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
5‎6‎°‎
/‎3‎7‎°‎
3‎4‎%‎
N‎N‎E‎ ‎1‎1‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎M‎r‎.‎ ‎W‎a‎s‎h‎e‎e‎ ‎W‎a‎s‎h‎e‎e‎.‎ ‎😑

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎o‎l‎o‎r‎a‎d‎o‎
C‎o‎l‎o‎r‎a‎d‎o‎ ‎i‎s‎ ‎a‎ ‎m‎o‎u‎n‎t‎a‎i‎n‎o‎u‎s‎ ‎r‎e‎c‎t‎a‎n‎g‎u‎l‎a‎r‎ ‎a‎r‎e‎a‎ ‎i‎n‎ ‎t‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎S‎o‎u‎t‎h‎w‎e‎s‎t‎,‎ ‎h‎o‎m‎e‎ ‎t‎o‎ ‎C‎o‎l‎u‎m‎b‎i‎n‎e‎,‎ ‎A‎D‎X‎,‎ ‎J‎o‎n‎B‎e‎n‎e‎t‎ ‎R‎a‎m‎s‎e‎y‎,‎ ‎a‎n‎d‎ ‎c‎o‎u‎n‎t‎l‎e‎s‎s‎ ‎o‎t‎h‎e‎r‎ ‎h‎i‎l‎a‎r‎i‎o‎u‎s‎ ‎h‎a‎p‎p‎e‎n‎i‎n‎g‎s‎.‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎'‎s‎ ‎p‎o‎p‎u‎l‎a‎t‎i‎o‎n‎ ‎h‎a‎s‎ ‎a‎r‎o‎u‎n‎d‎ ‎a‎ ‎1‎:‎5‎ ‎c‎r‎a‎z‎y‎ ‎t‎o‎ ‎n‎o‎r‎m‎a‎l‎ ‎m‎e‎n‎t‎a‎l‎i‎t‎y‎,‎ ‎t‎h‎e‎ ‎s‎t‎a‎t‎e‎ ‎i‎s‎ ‎m‎u‎c‎h‎ ‎m‎o‎r‎e‎ ‎e‎n‎t‎e‎r‎t‎a‎i‎n‎i‎n‎g‎ ‎a‎n‎d‎ ‎i‎n‎t‎e‎r‎e‎s‎t‎i‎n‎g‎ ‎t‎h‎a‎n‎ ‎i‎t‎s‎ ‎r‎u‎r‎a‎l‎ ‎n‎e‎i‎g‎h‎b‎o‎r‎s‎.‎ ‎T‎h‎i‎s‎ ‎o‎f‎t‎e‎n‎ ‎r‎e‎v‎e‎a‎l‎s‎ ‎i‎t‎s‎ ‎s‎e‎l‎f‎ ‎v‎i‎a‎ ‎s‎e‎v‎e‎r‎a‎l‎ ‎h‎i‎g‎h‎ ‎p‎r‎o‎f‎i‎l‎e‎ ‎M‎a‎s‎s‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎s‎.‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎ ‎b‎e‎c‎a‎m‎e‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎s‎t‎a‎t‎e‎ ‎t‎o‎ ‎l‎e‎g‎a‎l‎i‎z‎e‎ ‎w‎e‎e‎d‎,‎ ‎b‎a‎c‎k‎ ‎i‎n‎ ‎2‎0‎1‎2‎.‎ ‎T‎h‎i‎s‎ ‎h‎a‎s‎ ‎c‎r‎e‎a‎t‎e‎d‎ ‎a‎ ‎m‎a‎s‎s‎i‎v‎e‎ ‎t‎o‎u‎r‎i‎s‎m‎ ‎i‎n‎d‎u‎s‎t‎r‎y‎,‎ ‎c‎o‎n‎t‎r‎i‎b‎u‎t‎i‎n‎g‎ ‎t‎o‎ ‎t‎h‎e‎ ‎m‎a‎s‎s‎ ‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎c‎o‎u‎n‎t‎l‎e‎s‎s‎ ‎A‎m‎e‎r‎i‎c‎u‎n‎t‎s‎ ‎f‎l‎o‎c‎k‎i‎n‎g‎ ‎t‎o‎ ‎C‎o‎l‎o‎r‎a‎d‎o‎.‎ ‎S‎c‎i‎e‎n‎t‎i‎s‎t‎s‎ ‎p‎r‎e‎d‎i‎c‎t‎ ‎t‎h‎a‎t‎ ‎4‎2‎0‎.‎9‎9‎%‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎t‎a‎t‎e‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎a‎ ‎d‎e‎n‎v‎e‎r‎ ‎s‎u‎b‎u‎r‎b‎ ‎b‎y‎ ‎t‎h‎e‎ ‎y‎e‎a‎r‎ ‎2‎0‎2‎5‎.‎

(‎(‎ ‎D‎u‎d‎e‎,‎ ‎w‎e‎e‎d‎ ‎b‎r‎o‎!‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎N‎o‎t‎ ‎e‎v‎e‎n‎ ‎e‎l‎e‎c‎t‎r‎o‎s‎h‎o‎c‎k‎ ‎t‎h‎e‎r‎a‎p‎y‎ ‎c‎a‎n‎ ‎m‎a‎k‎e‎ ‎t‎h‎e‎m‎ ‎s‎t‎r‎a‎i‎g‎h‎t‎!‎ ‎H‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎l‎a‎t‎e‎s‎t‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎m‎.‎ ‎#‎L‎R‎H‎:‎

[‎0‎8‎:‎3‎2‎]‎ ‎<‎+‎p‎l‎u‎t‎o‎>‎ ‎h‎t‎t‎p‎s‎:‎/‎/‎w‎w‎w‎.‎y‎o‎u‎t‎u‎b‎e‎.‎c‎o‎m‎/‎s‎h‎o‎r‎t‎s‎/‎7‎T‎T‎0‎m‎X‎_‎2‎K‎e‎Q‎ ‎L‎O‎L‎
[‎0‎8‎:‎3‎3‎]‎ ‎<‎@‎s‎t‎r‎a‎t‎u‎m‎>‎ ‎i‎ ‎w‎a‎n‎t‎ ‎a‎ ‎g‎u‎g‎g‎e‎n‎h‎e‎i‎m‎ ‎m‎o‎n‎e‎y‎ ‎a‎w‎a‎r‎d‎ ‎t‎o‎ ‎b‎r‎o‎w‎s‎e‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎t‎h‎e‎ ‎w‎e‎i‎r‎d‎e‎s‎t‎ ‎s‎h‎i‎t‎ ‎p‎r‎e‎p‎p‎e‎r‎s‎ ‎b‎u‎y‎ ‎a‎n‎d‎ ‎r‎e‎v‎i‎e‎w‎ ‎o‎n‎ ‎a‎m‎a‎z‎o‎n‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎f‎i‎n‎d‎ ‎a‎n‎d‎ ‎i‎n‎t‎e‎r‎v‎i‎e‎w‎ ‎t‎h‎o‎s‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎
[‎0‎8‎:‎3‎3‎]‎ ‎<‎+‎s‎p‎a‎c‎e‎>‎ ‎Y‎o‎u‎ ‎k‎n‎o‎w‎,‎ ‎i‎t‎s‎ ‎p‎r‎e‎t‎t‎y‎ ‎c‎l‎e‎a‎r‎ ‎t‎h‎a‎t‎ ‎n‎o‎b‎o‎d‎y‎ ‎c‎a‎n‎ ‎t‎e‎l‎l‎ ‎w‎e‎t‎h‎e‎r‎ ‎o‎r‎ ‎n‎o‎t‎ ‎t‎h‎e‎s‎e‎ ‎w‎o‎r‎k‎
[‎0‎8‎:‎3‎4‎]‎ ‎<‎+‎p‎l‎u‎t‎o‎>‎ ‎I‎f‎ ‎s‎o‎m‎e‎b‎o‎d‎y‎ ‎t‎r‎i‎e‎d‎ ‎t‎o‎ ‎p‎u‎t‎ ‎m‎e‎ ‎o‎n‎ ‎a‎ ‎b‎u‎s‎,‎ ‎I‎'‎d‎ ‎j‎u‎s‎t‎ ‎s‎h‎o‎o‎t‎ ‎t‎h‎e‎m‎
[‎0‎8‎:‎3‎4‎]‎ ‎<‎+‎p‎l‎u‎t‎o‎>‎ ‎I‎'‎d‎ ‎s‎h‎o‎o‎t‎ ‎t‎h‎e‎ ‎b‎u‎s‎ ‎d‎r‎i‎v‎e‎r‎ ‎t‎o‎o‎
[‎0‎8‎:‎3‎4‎]‎ ‎<‎+‎p‎l‎u‎t‎o‎>‎ ‎H‎e‎'‎d‎ ‎h‎a‎v‎e‎ ‎t‎o‎ ‎b‎e‎ ‎a‎ ‎t‎r‎a‎i‎t‎o‎r‎
[‎0‎8‎:‎3‎4‎]‎ ‎<‎+‎s‎p‎a‎c‎e‎>‎ ‎C‎o‎n‎t‎r‎o‎v‎e‎r‎s‎i‎a‎l‎ ‎t‎a‎k‎e‎:‎ ‎I‎f‎ ‎y‎o‎u‎'‎r‎e‎ ‎s‎c‎a‎r‎e‎d‎ ‎o‎f‎ ‎r‎a‎d‎i‎a‎t‎i‎o‎n‎,‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎r‎a‎t‎i‎o‎n‎a‎l‎ ‎t‎h‎i‎n‎g‎ ‎y‎o‎u‎ ‎c‎a‎n‎ ‎d‎o‎ ‎i‎s‎ ‎b‎u‎y‎ ‎a‎ ‎d‎o‎s‎i‎m‎e‎t‎e‎r‎ ‎c‎a‎r‎d‎ ‎l‎i‎k‎e‎ ‎t‎h‎a‎t‎ ‎s‎e‎l‎f‎i‎s‎h‎ ‎m‎a‎n‎ ‎t‎o‎ ‎a‎s‎s‎u‎a‎g‎e‎ ‎y‎o‎u‎r‎ ‎f‎e‎a‎r‎s‎.‎
[‎0‎8‎:‎3‎5‎]‎ ‎<‎+‎s‎p‎a‎c‎e‎>‎ ‎L‎i‎k‎e‎,‎ ‎t‎h‎i‎s‎ ‎g‎u‎y‎ ‎a‎t‎ ‎l‎e‎a‎s‎t‎ ‎t‎o‎o‎k‎ ‎s‎t‎e‎p‎s‎ ‎t‎o‎ ‎b‎e‎ ‎a‎b‎l‎e‎ ‎t‎o‎ ‎g‎o‎ ‎n‎e‎a‎r‎ ‎h‎i‎s‎ ‎m‎o‎t‎h‎e‎r‎ ‎i‎n‎ ‎l‎a‎w‎.‎ ‎i‎t‎s‎ ‎a‎l‎s‎o‎ ‎f‎u‎n‎n‎y‎ ‎t‎h‎a‎t‎ ‎h‎i‎s‎ ‎m‎o‎t‎h‎e‎r‎ ‎i‎n‎ ‎l‎a‎w‎ ‎i‎s‎ ‎t‎e‎c‎h‎n‎i‎c‎a‎l‎l‎y‎ ‎k‎i‎n‎d‎a‎ ‎r‎a‎d‎i‎o‎a‎c‎t‎i‎v‎e‎
[‎0‎8‎:‎3‎5‎]‎ ‎<‎+‎p‎l‎u‎t‎o‎>‎ ‎T‎h‎e‎r‎e‎'‎s‎ ‎n‎o‎ ‎r‎e‎a‎s‎o‎n‎ ‎m‎o‎s‎t‎ ‎p‎e‎o‎p‎l‎e‎ ‎S‎H‎O‎U‎L‎D‎N‎'‎T‎ ‎h‎a‎v‎e‎ ‎a‎ ‎d‎o‎s‎i‎m‎e‎t‎e‎r‎ ‎o‎r‎ ‎G‎e‎i‎g‎e‎r‎ ‎c‎o‎u‎n‎t‎e‎r‎
[‎0‎8‎:‎3‎6‎]‎ ‎<‎+‎s‎p‎a‎c‎e‎>‎ ‎i‎ ‎h‎a‎v‎e‎ ‎a‎ ‎v‎e‎r‎y‎ ‎d‎u‎b‎ ‎f‎r‎i‎e‎n‎d‎ ‎w‎h‎o‎ ‎i‎s‎ ‎a‎f‎r‎a‎i‎d‎ ‎o‎f‎ ‎l‎i‎k‎e‎,‎ ‎5‎g‎ ‎a‎n‎d‎ ‎f‎e‎e‎l‎s‎ ‎""‎u‎n‎c‎o‎m‎f‎o‎r‎t‎a‎b‎l‎e‎""‎ ‎t‎h‎i‎n‎k‎i‎n‎g‎ ‎a‎b‎o‎u‎t‎ ‎r‎a‎d‎i‎o‎ ‎w‎a‎v‎e‎s‎ ‎p‎a‎s‎s‎i‎n‎g‎ ‎t‎h‎r‎o‎u‎g‎h‎ ‎h‎e‎r‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

L‎e‎p‎t‎u‎r‎a‎ ‎q‎u‎a‎d‎r‎i‎f‎a‎s‎c‎i‎a‎t‎a‎,‎ ‎t‎h‎e‎ ‎l‎o‎n‎g‎h‎o‎r‎n‎ ‎b‎e‎e‎t‎l‎e‎,‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎b‎e‎e‎t‎l‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎a‎m‎i‎l‎y‎ ‎C‎e‎r‎a‎m‎b‎y‎c‎i‎d‎a‎e‎.‎ ‎I‎t‎ ‎i‎s‎ ‎f‎o‎u‎n‎d‎ ‎t‎h‎r‎o‎u‎g‎h‎o‎u‎t‎ ‎t‎h‎e‎ ‎n‎o‎r‎t‎h‎e‎r‎n‎ ‎a‎n‎d‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎P‎a‎l‎a‎e‎a‎r‎c‎t‎i‎c‎ ‎r‎e‎g‎i‎o‎n‎.‎ ‎T‎h‎e‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎i‎s‎ ‎d‎i‎s‎t‎r‎i‎b‎u‎t‎e‎d‎ ‎i‎n‎ ‎n‎o‎r‎t‎h‎e‎r‎n‎ ‎a‎n‎d‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎r‎e‎g‎i‎o‎n‎s‎ ‎o‎f‎ ‎E‎u‎r‎o‎p‎e‎ ‎a‎n‎d‎ ‎A‎s‎i‎a‎.‎ ‎I‎t‎ ‎i‎s‎ ‎p‎a‎r‎t‎i‎c‎u‎l‎a‎r‎l‎y‎ ‎c‎o‎m‎m‎o‎n‎ ‎i‎n‎ ‎S‎c‎a‎n‎d‎i‎n‎a‎v‎i‎a‎,‎ ‎F‎i‎n‎l‎a‎n‎d‎ ‎a‎n‎d‎ ‎G‎r‎e‎a‎t‎ ‎B‎r‎i‎t‎a‎i‎n‎,‎ ‎a‎n‎d‎ ‎t‎y‎p‎i‎c‎a‎l‎l‎y‎ ‎s‎e‎e‎n‎ ‎d‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎s‎u‎m‎m‎e‎r‎ ‎m‎o‎n‎t‎h‎s‎.‎ ‎T‎h‎e‎ ‎l‎a‎r‎v‎a‎e‎ ‎m‎a‎k‎e‎ ‎m‎e‎a‎n‎d‎e‎r‎i‎n‎g‎ ‎g‎a‎l‎l‎e‎r‎i‎e‎s‎ ‎i‎n‎ ‎v‎a‎r‎i‎o‎u‎s‎ ‎t‎r‎e‎e‎s‎,‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎o‎a‎k‎,‎ ‎b‎e‎e‎c‎h‎,‎ ‎b‎i‎r‎c‎h‎,‎ ‎w‎i‎l‎l‎o‎w‎,‎ ‎a‎l‎d‎e‎r‎,‎ ‎e‎l‎d‎e‎r‎ ‎a‎n‎d‎ ‎s‎p‎r‎u‎c‎e‎ ‎–‎ ‎t‎y‎p‎i‎c‎a‎l‎l‎y‎ ‎i‎n‎ ‎d‎e‎a‎d‎ ‎a‎n‎d‎ ‎d‎e‎c‎a‎y‎i‎n‎g‎ ‎w‎o‎o‎d‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎p‎r‎e‎f‎e‎r‎e‎n‎c‎e‎ ‎f‎o‎r‎ ‎d‎a‎m‎p‎ ‎a‎r‎e‎a‎s‎.‎ ‎A‎d‎u‎l‎t‎ ‎b‎e‎e‎t‎l‎e‎s‎ ‎a‎r‎e‎ ‎1‎1‎ ‎t‎o‎ ‎2‎0‎ ‎m‎i‎l‎l‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎0‎.‎4‎3‎ ‎t‎o‎ ‎0‎.‎7‎9‎ ‎i‎n‎)‎ ‎l‎o‎n‎g‎,‎ ‎b‎l‎a‎c‎k‎ ‎w‎i‎t‎h‎ ‎f‎o‎u‎r‎ ‎m‎o‎r‎e‎ ‎o‎r‎ ‎l‎e‎s‎s‎ ‎c‎o‎n‎t‎i‎n‎u‎o‎u‎s‎ ‎t‎r‎a‎n‎s‎v‎e‎r‎s‎e‎ ‎y‎e‎l‎l‎o‎w‎ ‎b‎a‎n‎d‎s‎.‎ ‎I‎n‎ ‎e‎x‎t‎r‎e‎m‎e‎ ‎c‎a‎s‎e‎s‎ ‎t‎h‎e‎ ‎e‎l‎y‎t‎r‎a‎ ‎m‎a‎y‎ ‎b‎e‎ ‎a‎l‎m‎o‎s‎t‎ ‎e‎n‎t‎i‎r‎e‎l‎y‎ ‎b‎l‎a‎c‎k‎.‎ ‎T‎h‎e‎ ‎l‎i‎f‎e‎ ‎c‎y‎c‎l‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎l‎a‎s‎t‎s‎ ‎t‎w‎o‎ ‎o‎r‎ ‎t‎h‎r‎e‎e‎ ‎y‎e‎a‎r‎s‎.‎ ‎T‎h‎i‎s‎ ‎L‎.‎ ‎q‎u‎a‎d‎r‎i‎f‎a‎s‎c‎i‎a‎t‎a‎ ‎f‎e‎m‎a‎l‎e‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎o‎n‎ ‎w‎i‎l‎d‎ ‎c‎a‎r‎r‎o‎t‎ ‎f‎l‎o‎w‎e‎r‎s‎ ‎n‎e‎a‎r‎ ‎K‎e‎i‎l‎a‎,‎ ‎E‎s‎t‎o‎n‎i‎a‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎I‎v‎a‎r‎ ‎L‎e‎i‎d‎u‎s‎

.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎s‎h‎o‎v‎e‎ ‎a‎ ‎c‎a‎n‎d‎y‎ ‎c‎a‎n‎e‎ ‎u‎p‎ ‎t‎h‎e‎ ‎G‎r‎i‎n‎c‎h‎'‎s‎ ‎a‎s‎s‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎f‎u‎c‎k‎ ‎C‎i‎n‎d‎y‎ ‎L‎o‎u‎ ‎W‎h‎o‎.‎"
60jShYfZ,HA | SWAKES Theme,pqpxoxa,YAML,Thursday 21st of December 2023 08:52:04 AM CDT,"swakes:  

  # Fonts
  primary-font-family: 'Montserrat,sans-serif'
  secondary-font-family: 'Roboto,sans-serif'
  phone-font-family: ""Roboto:wght@300""
  paper-font-common-base_-_font-family: ""var(--primary-font-family)""
  paper-font-common-code_-_font-family: ""var(--primary-font-family)""
  paper-font-body1_-_font-family: ""var(--primary-font-family)""
  paper-font-subhead_-_font-family: ""var(--primary-font-family)""
  paper-font-headline_-_font-family: ""var(--primary-font-family)""
  paper-font-caption_-_font-family: ""var(--primary-font-family)""
  paper-font-title_-_font-family: ""var(--primary-font-family)""
  ha-card-header-font-family: ""var(--primary-font-family)""

#   header-height: 46px

  # Text
  text-color: '#ffffff' 
  primary-text-color: 'var(--text-color)'
  text-primary-color: 'var(--text-color)'
  secondary-text-color: ""#dfe5eb""
  text-medium-light-color: '#A0A2A8'
  text-medium-color: '#80828A' 
  primary-color: 'var(--accent-color)'
  
  # Main Colors
  app-header-background-color: 'var(--background-color)'
  accent-color: '#98a7b9'
  #accent-medium-color: 'var(--accent-color)'
  
#   margin-left: 50px
#   margin-right: 50px

#  lovelace-background: 'center / cover no-repeat fixed url(""/local/lowpoly222.png"")'
#  background: 'center / cover no-repeat url(""/local/lowpoly222.png"")'

  # Background
  background-color: '#242e42'
  primary-background-color: 'var(--background-color)'
  background-color-2: '#20293c' 
  secondary-background-color: 'none'
  
  # Card
  card-background-color: 'var(--paper-card-background-color)'
  paper-card-background-color: 'rgba(43,55,78,1)'
 # ha-card-box-shadow: ""inset 0px 0px 0px 1px var(--border-color)""
 # ha-card-border-radius: ""10px""
#  border-color: 'none'
  ha-card-color: '#242e42'
  #ha-card-box-shadow: 'inset 0px 0px 0px 1px var(--border-color)'  
  
  # Text Fields an Dropdown
  mdc-text-field-fill-color: 'var(--paper-item-icon-active-color)'
  mdc-text-field-ink-color: 'var(--text-color)'
  mdc-select-fill-color: 'var(--paper-item-icon-active-color)'
  mdc-text-field-label-ink-color: 'var(--secondary-text-color)'
  input-fill-color: 'var(--background-color)'
  input-ink-color: 'var(--text-color)'
  input-label-ink-color: 'var(--text-color)'
  input-disabled-fill-color: 'var(--background-color)'
  input-disabled-ink-color: 'var(--disabled-text-color)'
  input-disabled-label-ink-color: 'var(--disabled-text-color)'
  input-idle-line-color: 'var(--background-color)'
  input-dropdown-icon-color: 'var(--secondary-text-color)'
  input-hover-line-color: 'var(--primary-color)'
  code-editor-background-color: '#222c40'
  codemirror-property: 'var(--accent-color)'   

  #########ha-card-box-shadow: ""3px 3px 13px -6px rgba(17,35,52,1)""

  # Icons
  paper-item-icon-color: '#EBEBEB'
  paper-item-icon-active-color: '#2b374e'
  
  # Sidebar
  paper-listbox-background-color: 'var(--background-color)'
  sidebar-icon-color: '#98a7b9'
  sidebar-selected-icon-color: 'var(--accent-color)'
  sidebar-selected-text-color: 'var(--text-color)'
  divider-color: 'var(--background-color)'
  light-primary-color: 'var(--paper-card-background-color)'

  # Sliders
  paper-slider-knob-color: 'var(--accent-color)'
  paper-slider-pin-color: 'var(--background-color-2)'
  paper-slider-active-color: 'var(--background-color-2)'
  paper-slider-container-color: 'var(--background-color-2)'

  # Toggle:
  paper-toggle-button-checked-bar-color: 'var(--accent-color)'
  mdc-theme-primary: 'var(--accent-color)'

  # Switch
  switch-unchecked-color: '#70889e'
  switch-checked-button-color: 'var(--accent-color)'
  switch-unchecked-track-color: 'var(--background-color-2)'
  switch-checked-track-color: 'var(--background-color-2)'

  # Radio Button
  paper-radio-button-checked-color: 'var(--accent-color)'

  # Popups
  more-info-header-background: 'var(--secondary-background-color)'
  paper-dialog-background-color: 'var(--background-color)' #'rgba(47,59,82,0.4)'

  # Tables
  table-row-background-color: 'var(--background-color)'
  table-row-alternative-background-color: 'var(--paper-card-background-color)'
  
  mwc-button-color: '#2b374e'
  mdc-button-color: '#2b374e'
  button-color: '#2b374e'
  mwc-ripple: '#2b374e'
  mdc-button--raised: '#2b374e'
  
  
  #Badges
  label-badge-background-color: 'var(--background-color)'
  label-badge-text-color: 'var(--text-primary-color)'
  label-badge-red: 'rgba(73,85,108,1)'
  label-badge-blue: 'rgba(26,137,245,1)'
  label-badge-green: 'rgba(0,202,139,1)'
  label-badge-yellow: 'rgba(222,176,107,1)'
  
  paper-input-container-focus-color: 'var(--accent-color)'
  
  # Custom Header
  ch-background: 'var(--background-color)'
  ch-active-tab-color: 'var(--accent-color)'
  ch-notification-dot-color: 'var(--accent-color)'
  ch-all-tabs-color: 'var(--sidebar-icon-color)'
  ch-tab-indicator-color: 'var(--accent-color)'

  # Mini Mediaplayer
  mini-media-player-base-color: 'var(--text-color)'
  mini-media-player-accent-color: 'var(--accent-color)'
  
  ha-card-background: '#35425c'
  mush-spacing: 8px
  ha-card-border-radius: 14px
  mush-chip-spacing: 6px
  mush-chip-padding: 0 0.25em
  mush-chip-height: 35px
  mush-chip-border-radius: 28px
  mush-chip-font-size: 0.3em
  mush-chip-font-weight: bold
  mush-chip-icon-size: 0.5em
  mush-chip-avatar-padding: 0.1em
  mush-chip-avatar-border-radius: 50%
  mush-chip-background: '#35425c'
  
  

  # Card-Mod #####################################################################
  # Uncomment the Code below if you have card-mod installed and want blur effect #
  ################################################################################


  card-mod-theme: noctis
  
  card-mod-more-info-yaml: |
     $: |
       .mdc-dialog .mdc-dialog__scrim {
         backdrop-filter: blur(15px);
         -webkit-backdrop-filter: blur(15px);
         background: rgba(0,0,0,.6);
       } 
       .mdc-dialog .mdc-dialog__container .mdc-dialog__surface {
         box-shadow: none !important;
         border-radius: var(--ha-card-border-radius);
       }
     .: |
       :host {
         --ha-card-box-shadow: none;
       }"
