id,title,username,language,date,content
PQLHydZJ,data865,TestGuy1,JSON,Sunday 10th of March 2024 07:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '8ddc96d8849c785e69b5a56be516a948f8e59856453e24c92b37bfb96962f3b506c190c9029fe38855b6dd51df79207dafa401497a812656bed1c586235fa79df6d6b0de302e9743ac45143bc63276c32bbd609e2a989668192f0eea159590025e77ee7f3a33bae8af83b90b7b4e04ca2d488393c45dcab3a901c5bbb4070605',
  otherdata: [
    'b930fb5dbbd5fbed9821ef00704e9b4d',
    '0a17437f1c137c81a81071cc4bef920b',
    '7189865e7c509d6e03812ff2ff4ae378',
    '715e7541e1fcd1bdd75a5e29453e5991',
    '5547f97026141327fd78427cd43d09ff',
    '8dfbf6e09338ec23ccb2804d69765530',
    'c1f513883bc26e3297fd8a93da54083c',
    '2f97ef9b6e6ba1b97da62678e7d23da0'
  ]
}"
cq8tb5Ff,Untitled,Sora_7672,Java,Sunday 10th of March 2024 06:40:02 AM CDT,"var beeGenes ={MaxH: 50, Mate: {Chromosomes: [{UID1: ""forestry.speciesHermitic"", UID0: ""forestry.speciesHermitic"", Slot: 0 as byte}, {UID1: ""forestry.speedSlower"", UID0: ""forestry.speedSlower"", Slot: 1 as byte}, {UID1: ""forestry.lifespanLong"", UID0: ""forestry.lifespanLong"", Slot: 2 as byte}, {UID1: ""forestry.fertilityLow"", UID0: ""forestry.fertilityLow"", Slot: 3 as byte}, {UID1: ""forestry.toleranceBoth1"", UID0: ""forestry.toleranceBoth1"", Slot: 4 as byte}, {UID1: ""forestry.boolFalse"", UID0: ""forestry.boolFalse"", Slot: 5 as byte}, {UID1: ""forestry.toleranceBoth1"", UID0: ""forestry.toleranceBoth1"", Slot: 6 as byte}, {UID1: ""forestry.boolFalse"", UID0: ""forestry.boolFalse"", Slot: 7 as byte}, {UID1: ""forestry.boolTrue"", UID0: ""forestry.boolTrue"", Slot: 8 as byte}, {UID1: ""forestry.flowersWheat"", UID0: ""forestry.flowersWheat"", Slot: 9 as byte}, {UID1: ""forestry.floweringFastest"", UID0: ""forestry.floweringFastest"", Slot: 10 as byte}, {UID1: ""forestry.territoryAverage"", UID0: ""forestry.territoryAverage"", Slot: 11 as byte}, {UID1: ""forestry.effectRepulsion"", UID0: ""forestry.effectRepulsion"", Slot: 12 as byte}]}, 	Health: 50, IsAnalyzed: 0 as byte, 	Genome: {Chromosomes: [{UID1: ""forestry.speciesHermitic"", UID0: ""forestry.speciesHermitic"", Slot: 0 as byte}, {UID1: ""forestry.speedSlower"", UID0: ""forestry.speedSlower"", Slot: 1 as byte}, {UID1: ""forestry.lifespanLong"", UID0: ""forestry.lifespanLong"", Slot: 2 as byte}, {UID1: ""forestry.fertilityLow"", UID0: ""forestry.fertilityLow"", Slot: 3 as byte}, {UID1: ""forestry.toleranceBoth1"", UID0: ""forestry.toleranceBoth1"", Slot: 4 as byte}, {UID1: ""forestry.boolFalse"", UID0: ""forestry.boolFalse"", Slot: 5 as byte}, {UID1: ""forestry.toleranceBoth1"", UID0: ""forestry.toleranceBoth1"", Slot: 6 as byte}, {UID1: ""forestry.boolFalse"", UID0: ""forestry.boolFalse"", Slot: 7 as byte}, {UID1: ""forestry.boolTrue"", UID0: ""forestry.boolTrue"", Slot: 8 as byte}, {UID1: ""forestry.flowersWheat"", UID0: ""forestry.flowersWheat"", Slot: 9 as byte}, {UID1: ""forestry.floweringFastest"", UID0: ""forestry.floweringFastest"", Slot: 10 as byte}, {UID1: ""forestry.territoryAverage"", UID0: ""forestry.territoryAverage"", Slot: 11 as byte}, {UID1: ""forestry.effectRepulsion"", UID0: ""forestry.effectRepulsion"", Slot: 12 as byte}]}}
as IData;//define it 1x
hide(<forestry:bee_queen_ge>.withTag(beeGenes)); hide(<forestry:bee_princess_ge>.withTag(beeGenes)); hide(<forestry:bee_drone_ge>.withTag(beeGenes));

"
2hDBqHqK,G2A.com Free Gift Card Guide Mar 2024 Updated,HastyBasher0,GetText,Sunday 10th of March 2024 06:35:59 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.

This is not my pastebin account and im using a random inactive one to post this.
 
PDF guide here:
https://smallpdf.com/file#s=e45853d1-004b-4ae4-968e-c4f2afc13e32
 
Working as of:
10 March 2024























"
QUWeKDNP,Smart cities - Temperature registration,zhexo,Arduino,Sunday 10th of March 2024 06:35:29 AM CDT,"/*****************************************/
#include <ArduinoHttpClient.h>
#include <WiFi101.h>

#include ""arduino_secrets.h""
///////please enter your sensitive data in the Secret tab/arduino_secrets.h
/////// WiFi Settings ///////
char ssid[] = SECRET_SSID;
char pass[] = SECRET_PASS;

const char serverAddress[] = ""maker.ifttt.com"";  // server address
int port = 80;

WiFiClient wifi;
HttpClient client = HttpClient(wifi, serverAddress, port);
int status = WL_IDLE_STATUS;

const int sensorPin = A0; 
float sensorValue;
float voltageOut;

float temperatureC;

void setup() {
  pinMode(sensorPin, INPUT);
  Serial.begin(9600);
  
  while ( status != WL_CONNECTED) {
  Serial.print(""Attempting to connect to Network named: "");
  Serial.println(ssid);                   // print the network name (SSID);

  // Connect to WPA/WPA2 network:
  status = WiFi.begin(ssid, pass);
  } 

}

void loop() {
  sensorValue = analogRead(sensorPin);
  voltageOut = (sensorValue * 5000) / 1024;
  
  // calculate temperature for LM35
  temperatureC = voltageOut / 10;
  
  /********** POST to maker.ifttt.com ***/
  // assemble the path for the POST message:
  String iftttName = ""Sensor01"";
  String path = ""/trigger/"" + iftttName + ""/with/key/PsyIA63fO9W6vGY_4ilmv"";
  String contentType = ""application/json"";

  // assemble the body of the POST message:
  String postData = ""{\""value1\"":\""""; 
  postData += temperatureC;
  postData += ""\""}"";

  Serial.println(""making POST request"");

  // send the POST request
  client.post(path, contentType, postData);

  // print to console
  Serial.print(""Temperature(ÂºC): "");
  Serial.print(temperatureC);
  Serial.print(""  Voltage(mV): "");
  Serial.println(voltageOut);
  
  // wait for 1 hour
  delay(3600000); 
}"
LraFnyKC,photo_nn_new,boolit,Python,Sunday 10th of March 2024 06:34:44 AM CDT,"import os
os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'

''' import libraries '''
import ssl
import face_alignment
import numpy as np
import matplotlib.image as mpimg
from skimage import io
from sklearn.cluster import OPTICS

ssl._create_default_https_context = ssl._create_unverified_context

class PhotoModeration:
    def __init__(
        self,
        image_path: str,
                ) -> None:
        self.image_path = image_path        
        self.face_model = face_alignment.FaceAlignment(face_alignment.LandmarksType.TWO_D, flip_input=False, device='cpu')
        self.image = io.imread(image_path, pilmode='RGB')
        ''' compute width and height of the uploaded photo '''
        self.W = self.image.shape[1]
        self.H = self.image.shape[0]
        
        self.error = None
#         self.final_image = None
        self.num_landmarks = None
        self.real_width_ratio = None
        self.real_height_ratio = None
        self.X_face_center = None
        self.Y_face_center = None
        self.X_img_center = int(self.image.shape[1]/2)
        self.Y_img_center = int(self.image.shape[0]/2)
        self.const_face_width_ratio = 0.2
        
    def find_non_crossed_intervals(self, landmarks):
        ''' find uncrossed landmarks by x-axis '''
        ''' compute distence between center of image and center of 1 landmark '''
        x_arr0 = landmarks[0][:,0]
        y_arr0 = landmarks[0][:,1]
        x_center_arr0 = np.mean(x_arr0)
        y_center_arr0 = np.mean(y_arr0)
        ''' bound of unit width of crossed min max face width '''
        min_x0, max_x0 = min(x_arr0), max(x_arr0)
        ind_2_and_more_faces = 0
        dist0 = np.sqrt( (x_center_arr0 - self.X_img_center)**2 + (y_center_arr0 - self.Y_img_center)**2 )
        ''' id of landmark which is the nearest to photo center '''
        target_nearest_landmark_ind = 0
        ''' compute distence between center of image and center of other landmarks '''
        for i in range(1, len(landmarks)):
            x_arr1 = landmarks[i][:,0]
            y_arr1 = landmarks[i][:,1]
            x_center_arr1 = np.mean(x_arr1)
            y_center_arr1 = np.mean(y_arr1)
            dist1 = np.sqrt( (x_center_arr1 - self.X_img_center)**2 + (y_center_arr1 - self.Y_img_center)**2 )
            if dist1 < dist0:
                target_nearest_landmark_ind = i
                dist0 = dist1
            min_x1, max_x1 = min(x_arr1), max(x_arr1)
            ''' if width of min max faces is crossed along x-axis recompute min max of unit width '''
            if min_x0 < min_x1 and min_x1 < max_x0 and max_x1 > max_x0:
                min_x0, max_x0 = min_x0, max_x1
                
            elif min_x0 < min_x1 and min_x1 < max_x0 and max_x1 < max_x0:
                min_x0, max_x0 = min_x0, max_x0

            elif min_x1 < min_x0 and min_x0 < max_x1 and max_x0 > max_x1:
                min_x0, max_x0 = min_x1, max_x0

            elif min_x1 < min_x0 and min_x0 < max_x1 and max_x0 < max_x1:
                min_x0, max_x0 = min_x1, max_x1
            else:
                ''' if width of min max faces is  uncrossed along x-axis make ind_2_and_more_faces + 1 '''
                ind_2_and_more_faces += 1
        ''' return ind_2_and_more_faces and id ladmark which is the nearest to the center '''  
        return ind_2_and_more_faces, target_nearest_landmark_ind

    
    def if_landmark_only_one(self, landmarks):
        ''' compute X_face_center and Y_face_center over found landmark '''
        x_array = landmarks[:,0]
        y_array = landmarks[:,1]
        self.X_face_center = np.mean(x_array)
        self.Y_face_center = np.mean(y_array)
        # ''' compute width and height of the uploaded photo '''
        # W = self.image.shape[1]
        # H = self.image.shape[0]
        ''' compute the ratio of X_face_center to W '''
        x_center_to_w = self.X_face_center/self.W
        ''' compute the ratio of Y_face_center to H '''
        y_center_to_H = 1 - self.Y_face_center/self.H
        ''' set ellipse parameters, ellipse must include face center '''
        ''' parameters were selected empirically based on 7000 photos '''
        u = 0.4984#np.mean(x_center_to_w)     #x-position of the center
        v = 0.5783#np.mean([1-i for i in y_center_to_H])    #y-position of the center
        a =.15#radius on the x-axis
        b =.23#radius on the y-axis
        ''' if center of face is outside the min max values of ellipse return error 2 - The detected face is not centered'''
        if x_center_to_w <= u - a or x_center_to_w >= u + a or y_center_to_H <= v - b or y_center_to_H >= v + b:
            self.error =  'The detected face is not centered'
        else:
            y0 = v + np.sqrt( (1 - (x_center_to_w - u)**2/a**2)*b**2 )
            y1 = v - np.sqrt( (1 - (x_center_to_w - u)**2/a**2)*b**2 )
            x0 = u + np.sqrt( (1 - (y_center_to_H - v)**2/b**2)*a**2 )
            x1 = u - np.sqrt( (1 - (y_center_to_H - v)**2/b**2)*a**2 )
            ''' if center of landmark is located outside ellipse return error 2 - The detected face is not centered '''
            if y_center_to_H < y1 or y_center_to_H > y0 or x_center_to_w < x1 or x_center_to_w > x0:
                self.error =  'The detected face is not centered'
                ''' if center of landmark is located inside ellipse '''
            else:
                ''' compute the ratio landmark width to photo width '''
                self.real_width_ratio = abs(max(x_array) - min(x_array))/self.W
                ''' compute the ratio landmark height to photo height '''
                self.real_height_ratio = abs(max(y_array) - min(y_array))/self.H
                ''' if real_width_ratio < const_face_width_ratio and real_height_ratio <= real_width_ratio error 4 - The detected face is too small on the photo '''
                if self.real_width_ratio < self.const_face_width_ratio:
                    self.error =  'The detected face is too small on the photo'
                elif self.real_width_ratio > 0.6: 
                    if self.real_height_ratio <= self.real_width_ratio and self.real_height_ratio > 0.56*self.real_width_ratio:
                        ''' if real_width_ratio > 0.6 and real_height_ratio <= real_width_ratio an real_height_ratio > 0.56*real_width_ratio error 5 - The face is too large on the photo, the photo size is standard '''
                        self.error =  'The face is too large on the photo, the photo size is standard'
                        ''' if real_width_ratio > 0.6 and real_height_ratio <= 0.56*real_width_ratio error 6 - The face is too large on the photo, the photo is elongated vertically '''
                    elif self.real_height_ratio <= 0.56*self.real_width_ratio:
                        self.error =  'The face is too large on the photo, the photo is elongated vertically'               
                elif self.real_width_ratio >= self.const_face_width_ratio and self.real_width_ratio <= 0.6: 
                    ''' if real_width_ratio >= const_face_width_ratio and real_width_ratio <= 0.6 and real_height_ratio < 0.56*real_width_ratio error 7 - The face is standard size on the photo, the photo is elongated vertically '''
                    if self.real_height_ratio < 0.56*self.real_width_ratio:
                        self.error =  'The face is standard size on the photo, the photo is elongated vertically'
                        ''' if real_width_ratio >= const_face_width_ratio and real_width_ratio <= 0.6 and real_height_ratio >= 0.56*real_width_ratio 
                        photo size is standard and face size is standard '''
                    elif self.real_height_ratio >= 0.56*self.real_width_ratio:
                        ''' search dark glasses '''
                        ''' select landmark dots which are located upper face center along y axis '''
                        indexes_of_up_landmarks = [i for i, x in enumerate(y_array) if x < self.Y_face_center]
                        x_up_landmarks = landmarks[:,0][indexes_of_up_landmarks]
                        y_up_landmarks = landmarks[:,1][indexes_of_up_landmarks]
                        landmarks_eye = np.vstack([x_up_landmarks, y_up_landmarks]).T
                        ''' split up landmark dots into 2 clusters, main idea: 1 cluster - 1 eye '''
                        clustering = OPTICS(min_samples = 5).fit(landmarks_eye)
                        ''' dark ratio around each eye '''
                        cluster_domain_dark_ratio = []
                        min_x, max_x = int(min(x_array)), int(max(x_array))
                        face_scale_x = np.abs(max_x - min_x)
                        for cluster in range(0, len(set(clustering.labels_))):
                            ind_of_labels = [i for i, x in enumerate(clustering.labels_) if x == cluster]
                            if len(ind_of_labels) > 0:                
                                sub_x = landmarks_eye[:,0][ind_of_labels]
                                sub_y = landmarks_eye[:,1][ind_of_labels]
                                k = 0.2
                                h = 0.15
                                min_sub_x = int(np.mean(sub_x) - face_scale_x*k)
                                max_sub_x = int(np.mean(sub_x) + face_scale_x*k)

                                min_sub_y = int(np.mean(sub_y) - face_scale_x*h)
                                max_sub_y = int(np.mean(sub_y) + face_scale_x*h)
                                normalized_img = self.image/self.image.max()
                                cropped_image_glass = normalized_img[min_sub_y:max_sub_y, min_sub_x:max_sub_x]               
                                color_bound = 0.3
                                cropped_image_glass[cropped_image_glass[:,:,0] > color_bound] = 1
                                cropped_image_glass[cropped_image_glass[:,:,1] > color_bound] = 1
                                cropped_image_glass[cropped_image_glass[:,:,2] > color_bound] = 1
                                #compute_dark_ratio
                                unique_x, counts_x = np.unique(cropped_image_glass[:,:,0], return_counts = True)
                                unique_y, counts_y = np.unique(cropped_image_glass[:,:,1], return_counts = True)
                                unique_z, counts_z = np.unique(cropped_image_glass[:,:,2], return_counts = True)
                                if 1 in unique_x or 1 in unique_y or 1 in unique_z:
                                    x_count = dict(zip(unique_x, counts_x))[1]
                                    y_count = dict(zip(unique_y, counts_y))[1]
                                    z_count = dict(zip(unique_z, counts_z))[1]
                                    dark_ratio = (1 - (x_count + y_count + z_count)/(3*cropped_image_glass.shape[0]*cropped_image_glass.shape[1]))
                                    cluster_domain_dark_ratio.append(dark_ratio)
                        ''' min dark ratio >= 0.42 error 8 - The area around the eyes is dark or you have dark glasses '''
                        if min(cluster_domain_dark_ratio) >= 0.42:
                            self.error = 'The area around the eyes is dark or you have dark glasses'
                            ''' min dark ratio < 0.42 the area around the eyes is not dark or you don't have dark glasses'''
#                         else:
#                             const_x = 0.44
#                             const_y = 0.32
#                             delta_x = (max(x_array) - min(x_array))/const_x/2
#                             delta_y = (max(y_array) - min(y_array))/const_y/2
#                             left_bound_x = int(self.X_face_center - delta_x)
#                             if left_bound_x < 0:
#                                 left_bound_x = 0
#                             up_bound_y = int(self.Y_face_center - delta_y)
#                             if up_bound_y < 0:
#                                 up_bound_y = 0
#                             ''' crop photo 3 to 4 ratio around landmark '''
#                             cropped_image = self.image[up_bound_y:int(self.Y_face_center + delta_y), left_bound_x:int(self.X_face_center + delta_x), :]#.astype(int)
#                             ''' if width of cropped photo < 200 px error 9 - Low quality of photo (cropprd 3 to 4 face landmark) '''
#                             if cropped_image.shape[0] < 200:
#                                 self.error = 'Low quality of photo (cropprd 3 to 4 face landmark)'
    #                         else:
    #                             ''' if width of cropped photo > 200 px return cropped final image '''
    #                             self.image = mpimg.imread(self.image_path)
    #                             self.final_image = self.image[up_bound_y:int(self.Y_face_center + delta_y), left_bound_x:int(self.X_face_center + delta_x), :]#.astype(int)
        return self.error#, self.final_image

    def moderation_photo(self):
        ''' detect file format '''
        if str(self.image_path.split('.')[-1]).lower() not in ['png', 'jpg', 'jpeg', 'heic', 'jfif']:
            self.error = 'File format error. The format must be jpg, jpeg, png or heic'
            ''' if the photo is oriented horizontally return error 3 - The height of the photos is less than the width '''
        elif self.W > self.H:
            self.error =  'The height of the photos is less than the width'
        else:
            ''' if width or height of photo <  200 px error 9 - One of photo side <  200 px '''
            if self.image.shape[0] <  200 or self.image.shape[1] < 200:
                self.error = 'One of photo side < 200 px'
            else:
                '''check if min(width, hight) > 3000 px'''
                min_side_size = sorted([i for i in self.image.shape])[1]
                if min_side_size  > 3000:
                    width = self.image.shape[0]
                    hight = self.image.shape[1]
                    cut_y = 0.2
                    cut_x = 0.2
                    ''' cut out 80% of width and hight '''
                    image_cropped = self.image[int((cut_y-0.1)*width):-int((cut_y+0.1)*width), int(cut_x*hight):-int(cut_x*hight)]
                    ''' search landmarks by using face_alignment '''
                    landmarks = self.face_model.get_landmarks(image_cropped)
                    ''' if len(landmarks) > 0 transform searched landmarks over initial sizes of photo with higher resolution '''
                    if landmarks != None:
                        for i in range(0, len(landmarks)):
                            landmarks[i][:,0] = landmarks[i][:,0] + int(cut_x*hight)
                            landmarks[i][:,1] = landmarks[i][:,1] + int((cut_y-0.1)*width)            
                            ''' if min(width, hight) >= 3000 px'''
                else:
                    ''' search landmarks by using face_alignment '''
                    landmarks = self.face_model.get_landmarks(self.image)
                ''' if there is no landmarks, return error 0 - No faces were found on the photo '''
                if landmarks == None:
                    self.error = 'No faces were found on the photo'
                    ''' if there is 1 landmark only run if_landmark_only_one() '''
                elif len(landmarks) == 1:
        #             self.error, self.final_image = self.if_landmark_only_one(landmarks[0])
                    self.error = self.if_landmark_only_one(landmarks[0])
                    ''' if there is more than 1 landmark '''
                elif len(landmarks) > 1:
                    ''' remove landmarks which are 10 times smaller in width than the widest landmark '''
                    times_smaller = 10
                    widths_of_landmarks = [max(landmarks[r][:,0]) - min(landmarks[r][:,0]) for r in range(0, len(landmarks))]
                    max_width_landmarks = max(widths_of_landmarks)
                    bound = max_width_landmarks/times_smaller
                    index_of_big_landmarks = [(t) for t, p in enumerate(widths_of_landmarks) if p > bound]
                    landmarks = [landmarks[s] for s in index_of_big_landmarks]
                    ''' check if w/h in [a,b] where w - face width, h - face hight. w and h are computed based on found landmarks '''
                    a = 0.86
                    b = 1.25
                    good_landmarks_indexes = []
                    for ind, ld in enumerate(landmarks):
                        w = abs(max(ld[:,0]) - min(ld[:,0]))
                        h = abs(max(ld[:,1]) - min(ld[:,1]))
                        if w/h >= a and w/h <= b:
                            good_landmarks_indexes.append(ind)
                            ''' if number of landmarks in [a,b] = 0 return error 0 - No faces were found on the photo '''
                    if len(good_landmarks_indexes) == 0:
                        self.error = 'No faces were found on the photo'            
                        ''' if number of landmarks in [a,b] = 1 run if_landmark_only_one() '''
                    elif len(good_landmarks_indexes) == 1:
        #                 self.error, self.final_image = self.if_landmark_only_one(landmarks[ind])
                        self.error = self.if_landmark_only_one(landmarks[ind])
                        ''' if number of landmarks in [a,b] > 1 '''
                    elif len(good_landmarks_indexes) > 1:
                        ''' choose landmarks in [a,b] '''
                        landmarks = [landmarks[ind] for ind in good_landmarks_indexes]               
                        ''' run find_non_crossed_intervals() '''
                        indicator_2_and_more_faces, target_average_landmark_ind = self.find_non_crossed_intervals(landmarks)
                        ''' if there is any uncrossed interval return error 1 - Several people were found on the photo '''
                        if indicator_2_and_more_faces >= 1: 
                            self.num_landmarks = len(landmarks)
                            self.error = 'Several people were found on the photo'
                            ''' if there is all crossed interval run if_landmark_only_one() '''
                        elif indicator_2_and_more_faces == 0: 
        #                     self.error, self.final_image = self.if_landmark_only_one(landmarks[target_average_landmark_ind])
                            self.error = self.if_landmark_only_one(landmarks[target_average_landmark_ind])

        return self.error#, self.final_image"
F0nN71Rx,09. Fish Tank,GabrielHr00,Java,Sunday 10th of March 2024 06:34:01 AM CDT,"import java.util.Scanner;

public class FishTank {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int width = Integer.parseInt(scanner.nextLine());
        int height = Integer.parseInt(scanner.nextLine());
        int length = Integer.parseInt(scanner.nextLine());
        double percent = Double.parseDouble(scanner.nextLine());

        int volumeInSm = width * height * length;
        // 1l = 1dm3
        // 1dm = 10sm
        // 1dm3 = 10sm^3 = 10sm * 10sm * 10sm = 1000sm3 = 1l

        double volume = volumeInSm / 1000.0;
        double finalVolume = volume - (volume * (percent/100));

        System.out.println(finalVolume);
    }
}"
TszCcVBk,08. Basketball Equipment,GabrielHr00,Java,Sunday 10th of March 2024 06:32:53 AM CDT,"import java.util.Scanner;

public class BasketballEquipment {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int annualFee = Integer.parseInt(scanner.nextLine());

        double shoesPrice = annualFee - (annualFee * 0.40);
        // double shoesPrice = annualFee * 0.60;
        double setPrice = shoesPrice - (shoesPrice * 0.20);
        // double setPrice = shoesPrice * 0.80;
        double ballPrice = setPrice * 1/4;
        double accPrice = ballPrice * 1/5 ;

        double finalSum = annualFee + shoesPrice + setPrice + ballPrice + accPrice;
        System.out.println(finalSum);
    }
}"
KFNtJK3L,Code review.,SarahC,JavaScript,Sunday 10th of March 2024 06:32:02 AM CDT,"HTML____________________________

<h1>Click to start</h1>
<div id=""content"">
  Ultrasonic transmitter:</br>
  <canvas id=""c""></canvas></br>
  <label for=""textInput"">Text to send: </label>
  <input type=""text"" name=""textInput"" length=50 onKeyUp=""setText(this);"" onKeyDown=""setText(this);"">
</div>


CSS____________________________

* {
  background: #2e2e2e;
  color: #f0f0f0;
  font-family: arial, sans-serif;
  font-size: 20pt;
}

body {
  padding: 5px;
  margin: 0px;
}

canvas {
  border: 1px solid orange;
}

h1 {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  margin: 0;
}

#content {
  visibility : hidden;
}

JavaScript____________________________
/*
Ultrasonic message maker! 

--      --           ----------          -- <<<< Each row is a single pitch.
--      --               --              --
--      --               --              -- 
----------               --              -- 
--      --               --              -- 
--      --               --                 
--      --           ----------          -- 

*/

let baseFrequency = 19000; // 19000 : Inaudible.  700 : Listen to the message.


//____________________________

// Class to display given text, and enables pixel columns to be examined for color.
// Contains a simple ""cursor"" for current pixel column, and the end of available text.
class TextScanner{
  constructor(canvas, cWidth, cHeight, textYNudge, font){
    this._initialiseCanvas(canvas, cWidth, cHeight, textYNudge, font);
    this._clearAndDrawText("""");
    this._takePixelSnapshot();
    this._drawTextEndCursor(1);
    this._drawReadCursor(0);
  }
  // Interface ------
  // Given a column (0 based) updates read cursor display.
  setReadColumn(xPosition){
    if(xPosition > this.textPixelWidth)
      this.readCursorPosition = this.textPixelWidth;
    else
      this.readCursorPosition = xPosition;
    this._drawAllTextAndCursors();
    return true;
  }
  // True if specified cursor position is past all the text content.
  cursorReachedEnd(requestedCursorPosition){
    return (requestedCursorPosition >= this.textPixelWidth);
  }
  // Clear the text display, and redraw with new text.
  // Resets both cursors and draws them.
  setText(text){
    this.readCursorPosition = 0;
    this._clearAndDrawText(text);
    this.textPixelWidth = this._getTextPixelWidth(text);
    this._takePixelSnapshot();
    this._drawTextEndCursor(this.textPixelWidth);
    this._drawReadCursor(this.readCursorPosition);
  }
  // Returns the column of pixels in a basic array from the current read cursor position.
  readColumn(){
    let pixelStrip = [];
    for(let y = this.cHeight - 1; y >= 0; y--){
      let ptr = ((y * this.cWidth) + this.readCursorPosition) * 4;
      pixelStrip.push(this.pixels8[ptr + 1]);// Take red for the sample
    }
    return pixelStrip;
  }
  // ""Private""
  _initialiseCanvas(canvas, cWidth, cHeight, textYNudge, font){
    this.canvas = canvas;
    canvas.width = cWidth;
    canvas.height = cHeight;
    canvas.style.cssText = ""image-rendering: pixelated;"";
    canvas.style.width = (cWidth * 4) + ""px"";
    canvas.style.height = (cHeight * 4) + ""px"";
    this.cWidth = cWidth;
    this.cHeight = cHeight;
    this.textYNudge = textYNudge;
    this.ctx = canvas.getContext(""2d"");
    this.ctx.lineWidth = 1;
    this.ctx.strokeStyle = ""white"";
    this.ctx.font = font;
    this.ctx.textAlign = ""left"";
    this.readCursorPosition = 0;
    this.textPixelWidth = 0;
  }
  // Redraw the cached text to clear the panel, and draws the two cursors.
  _drawAllTextAndCursors(){
    this._reloadOriginalSnapshot();
    this._drawTextEndCursor(this.textPixelWidth);
    this._drawReadCursor(this.readCursorPosition);
  }
  // Returns the width of the given text in real pixels.
  _getTextPixelWidth(text){
    return Math.round(this.ctx.measureText(text).width + 0.5) ;
  }
  // Clears the panel and draws the supplied text to it.
  _clearAndDrawText(text){
    this.ctx.fillStyle = ""black"";
    this.ctx.fillRect(0, 0, this.cWidth, this.cHeight);
    this.ctx.fillStyle = ""white"";
    this.ctx.fillText(text, 0, this.cHeight - this.textYNudge);
  }
  // Extract the pixel data from the panel, and make a shallow copy too. (to quickly redraw text later)
  _takePixelSnapshot(){
    this.imageData = this.ctx.getImageData(0, 0, this.cWidth, this.cHeight);
    this.pixels8 = this.imageData.data;
    this.pixels32 = new Uint32Array(this.pixels8.buffer);
    this.imageDataOriginal = this.ctx.createImageData(this.cWidth, this.cHeight);
    this.imageDataOriginal.data.set(this.pixels8);
  }
  // Return the pixel snapshot to the panel - in effect redrawing the text very fast.
  _reloadOriginalSnapshot(){
    this.ctx.putImageData(this.imageData, 0, 0);
  }
  // Given the X position, draw the text end cursor.
  _drawTextEndCursor(xPosition){
    xPosition += 0.5;
    this.ctx.strokeStyle = ""rgba(255, 0, 0, 0.5)"";
    this.ctx.beginPath();
    this.ctx.moveTo(xPosition, 0);
    this.ctx.lineTo(xPosition, this.cHeight);
    this.ctx.stroke();
  }
  // Given the X position, draw the current pixel column cursor.
  _drawReadCursor(xPosition){
    xPosition += 0.5;
    this.ctx.strokeStyle = ""rgba(0, 255, 0, 0.5)"";
    this.ctx.beginPath();
    this.ctx.moveTo(xPosition, 0);
    this.ctx.lineTo(xPosition, this.cHeight);
    this.ctx.stroke();
  }
}


//____________________________

// This class is concerned with capturing a new Audio contexts after user action, and creating 
// a basic oscillator and volume node from it.
class NoteGenerator{
  constructor(f){
    this.frequency = f;
    // Note: EVERY oscillator needs a new context, not one for all of them
    // else the system can't keep up with volume changes and lots of buzzing happens.
    this.audioCtx = new AudioContext();

    this.voiceGain = this.audioCtx.createGain();
    this.voiceGain.gain.setValueAtTime(0, this.audioCtx.currentTime);

    this.oscillator = this.audioCtx.createOscillator();
    this.oscillator.type = ""sine"";
    this.oscillator.frequency.setValueAtTime(f, this.audioCtx.currentTime);

    this.oscillator.connect(this.voiceGain);
    this.voiceGain.connect(this.audioCtx.destination);

    this.oscillator.start();
  }
  on(){
    this.voiceGain.gain.setValueAtTime(1, this.audioCtx.currentTime);
  }
  off(){
    this.voiceGain.gain.setValueAtTime(0, this.audioCtx.currentTime);
  } 
  volume(vol){
    this.voiceGain.gain.setValueAtTime(vol, this.audioCtx.currentTime);
  }
}

//____________________________

// This class creates a ""frequency ramp"" of oscillators that can have their volumes controlled individually.
class Chords{
  constructor(setup){
    this.notes = [];
    for(let note = 0; note < setup.numberOfNotes; note++ ){
      let frequency = setup.startFrequency + (note * setup.frequencyStep);
      this.addNote(frequency);
    }
  }
  addNote(frequency){
    let newNote = new NoteGenerator(frequency);
    this.notes.push(newNote);
  }
  stopAllNotes(){
    this.notes.forEach((note) => note.off());
  }
  playChord(notesIndex){
    notesIndex.forEach((noteIndex) => this.notes[noteIndex].on());
  }
  setVolumes(notesVolumes){
    for(let index = 0; index < this.notes.length; index++)
      this.notes[index].volume(notesVolumes[index] / 255); 
  }
  
}


//____________________________

// One page app global variables by choice. 
// Main code starts here.

let canvas = document.getElementById(""c"");
let cWidth = 300;
let cHeight = 20;
let textYNudge = 4; // Needed to center vertically on the display box.
let textScanner = new TextScanner(canvas, cWidth, cHeight, textYNudge, ""20px Arial"");

let keyTimeoutReset = 4;
let keyTimeout = keyTimeoutReset;
let cursorPosition = 0;

let chords = null;
const controller = new AbortController();
const { signal } = controller;
window.addEventListener(""click"", begin);

function begin(){
  window.removeEventListener(""click"", begin);
  document.querySelector(""h1"").remove();
  document.getElementById(""content"").style.visibility = ""visible"";
  chords = new Chords({startFrequency: baseFrequency, frequencyStep: 155, numberOfNotes: cHeight});
  requestAnimationFrame(update);
}

function ultrasonicTransmit(channelVolumes){
  chords.setVolumes(channelVolumes);
}

function setText(txtBox){
  textScanner.setText(txtBox.value);
  keyTimeout = keyTimeoutReset;
  cursorPosition = 0;
  textScanner.setReadColumn(cursorPosition);
  r = textScanner.readColumn();
  ultrasonicTransmit(r);  
}

function update(){
  requestAnimationFrame(update);
  if(keyTimeout > 0) {
    keyTimeout -= 1;
    return;
  }
  cursorPosition += 1;
  keyTimeout = keyTimeoutReset;
  if(textScanner.cursorReachedEnd(cursorPosition)) cursorPosition = 0;
  textScanner.setReadColumn(cursorPosition);
  channelVolumes = textScanner.readColumn();
  ultrasonicTransmit(channelVolumes);
}
"
PjWAi8Mj,07. Food Delivery,GabrielHr00,Java,Sunday 10th of March 2024 06:31:53 AM CDT,"import java.util.Scanner;

public class FoodDelivery {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int chickenMenuCount = Integer.parseInt(scanner.nextLine());
        int fishMenuCount = Integer.parseInt(scanner.nextLine());
        int vegetarianMenuCount = Integer.parseInt(scanner.nextLine());

        double totalSum = (chickenMenuCount * 10.35) + (fishMenuCount * 12.40) + (vegetarianMenuCount * 8.15);
        double dessertPrice = totalSum * 0.20;

        double finalPrice = totalSum + dessertPrice + 2.50;
        System.out.println(finalPrice);
    }
}"
sPwvQAk5,06. Repainting,GabrielHr00,Java,Sunday 10th of March 2024 06:30:30 AM CDT,"import java.util.Scanner;

public class Repainting {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int plasticCount = Integer.parseInt(scanner.nextLine());
        int paintLiters = Integer.parseInt(scanner.nextLine());
        int thinnerLiters = Integer.parseInt(scanner.nextLine());
        int hoursTotalWorkers = Integer.parseInt(scanner.nextLine());

        double plasticSum = (plasticCount + 2) * 1.50;
        double paintSum = (paintLiters + (paintLiters * 0.10)) * 14.50;
        double thinnerSum = thinnerLiters * 5.0;
        double totalSum = plasticSum + paintSum + thinnerSum + 0.40;

        double priceWorkersForOneHour = totalSum * 0.30;
        double priceWorkersAll = priceWorkersForOneHour * hoursTotalWorkers;
        System.out.println(totalSum + priceWorkersAll);
    }
}"
WhXXrDpv,05. Supplies for School,GabrielHr00,Java,Sunday 10th of March 2024 06:28:08 AM CDT,"import java.util.Scanner;

public class SuppliesForSchool {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int pensCount = Integer.parseInt(scanner.nextLine());
        int markersCount = Integer.parseInt(scanner.nextLine());
        int detergentLiters = Integer.parseInt(scanner.nextLine());
        int discountPercent = Integer.parseInt(scanner.nextLine());

        double pensSum = pensCount * 5.80;
        double markersSum = markersCount * 7.20;
        double detergentSum = detergentLiters * 1.20;

        double totalSum = pensSum + markersSum + detergentSum;

        double finalSum = totalSum - (totalSum * (discountPercent/100.0));
        System.out.println(finalSum);
    }
}"
zEg99sMc,04. Vacation Books List,GabrielHr00,Java,Sunday 10th of March 2024 06:26:29 AM CDT,"import java.util.Scanner;

public class VacationBooksList {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int pagesCount = Integer.parseInt(scanner.nextLine());
        int pagesPerHour = Integer.parseInt(scanner.nextLine());
        int days = Integer.parseInt(scanner.nextLine());

        int allHours = pagesCount / pagesPerHour;
        int hoursPerDay = allHours / days;

        System.out.println(hoursPerDay);
    }
}"
d5uWpFxT,03. Deposit Calculator,GabrielHr00,Java,Sunday 10th of March 2024 06:25:33 AM CDT,"import java.util.Scanner;

public class DepositCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double depositSum = Double.parseDouble(scanner.nextLine());
        int depositDue = Integer.parseInt(scanner.nextLine());
        double interestPercent = Double.parseDouble(scanner.nextLine());

        double monthlyInterest = (depositSum * (interestPercent/100)) / 12;
        double finalSum = depositSum + depositDue * monthlyInterest;

        System.out.println(finalSum);
    }
}
"
phgCfcF4,02. Radians to Degrees,GabrielHr00,Java,Sunday 10th of March 2024 06:24:29 AM CDT,"import java.util.Scanner;

public class RadiansToDegrees {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double radians = Double.parseDouble(scanner.nextLine());

        double degrees = radians * 180 / Math.PI;
        System.out.println(degrees);
    }
}
"
SLnHRkkm,01. USD to BGN,GabrielHr00,Java,Sunday 10th of March 2024 06:23:40 AM CDT,"import java.util.Scanner;

public class USDToBGN {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double usd = Double.parseDouble(scanner.nextLine());

        double bgn = usd * 1.79549;
        System.out.println(bgn);
    }
}"
PSD1nWpZ,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Sunday 10th of March 2024 06:21:01 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_545616.pdf

Working as of:
10 March 2024





















"
07LpdKpW,GM - Flickr Buddy Interesting - MATCH - TWEAK 2020 - NO TAMPERMONKEY (Why?) / OK VIOLENTMONKEY,decembre,JavaScript,Sunday 10th of March 2024 06:20:57 AM CDT,"// ==UserScript==
// @name	        Flickr Buddy Interesting - MATCH - TWEAK 2020 - NO TAMPERMONKEY (Why?) / OK VIOLENTMONKEY -
// @namespace	    http://6v8.gamboni.org/
// @description     Pierre Andrews (Mortimer) - TWEAK Localize / Number of Pics displayed - 2017.06 - Quick access to user's interesting photos from the Buddy Icon Menu
// @version         0.5
// @identifier	    http://6v8.gamboni.org/IMG/js/flickrbuddyinteresting.user.js
// @date           2009-04-17
// @creator        Pierre Andrews (mortimer.pa@free.fr)
// @contributor    Stephen Fernandez ( http://steeev.freehostia.com )
// @contributor    Ricardo Mendonca Ferreira
//
// @include http://*flickr.com*
// @include http*://*flickr.com/*

// @exclude	   http*://*flickr.com/groups/
// @exclude	   http*://*flickr.com/photos/*/map*
// @exclude	   http*://*flickr.com/photos/*/page*

// 2019
// @exclude	   http*://*flickr.com/photos/*/favorites*
// @exclude	   http*://*flickr.com/photos/*/favorites/*
// @exclude	   http*://*flickr.com/photos/*/albums*
// @exclude	   http*://*flickr.com/groups?view=tn
// @exclude	   http*://*flickr.com/groups?view=ls
// @exclude	   http*://*flickr.com/groups/*/pool/*

// @exclude	    http*://services.addons.mozilla.org/*

// @grant       none

// ==/UserScript==

// --------------------------------------------------------------------
//
// This is a Greasemonkey user script.
//
// To install, you need Greasemonkey: http://greasemonkey.mozdev.org/
// Then restart Firefox and revisit this script.
// Under Tools, there will be a new menu item to ""Install User Script"".
// Accept the default configuration and install.
//
// --------------------------------------------------------------------
// Copyright (C) 2006 Pierre Andrews
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// The GNU General Public License is available by visiting
//   http://www.gnu.org/copyleft/gpl.html
// or by writing to
//   Free Software Foundation, Inc.
//   51 Franklin Street, Fifth Floor
//   Boston, MA  02110-1301
//   USA

debugger;

(function () {

	//update information
	var SCRIPT = {
		name: ""Flickr Buddy Interesting"",
		namespace: ""http://6v8.gamboni.org/"",
		description: ""Quick access to user's interesting photos from the Buddy Icon Menu"",
		identifier: ""http://6v8.gamboni.org/IMG/js/flickrbuddyinteresting.user.js"",
		version: ""0.5"",								// version
		date: (new Date(""2009-04-17""))		// update date
		.valueOf()
	};


	function $x1(xpath) {
		return document.evaluate(
								 xpath,
								 document,
								 null,
								 XPathResult.FIRST_ORDERED_NODE_TYPE, null
								 ).singleNodeValue;
	}


	/***********************************************************************
	 * Flickr Localisation (changes TAMPERMONKEY : line 83>85 )
	 **********************************************************************/

		// LOCALISATION TWEAKED
	//FlickrLocalisation, script to help localise user script for Flickr
	//version 0.2
	//release 26 Jun 2007
	//author: Pierre Andrews

	// --------------------------------------------------------------------
	// Copyright (C) 2007 Pierre Andrews
	// This script can be redistributed under the terms of the GNU LGPL, without
	// modification of this licence and copyright notice. Attribution to the author should be
	// kept at least in the source of the scripts.
	// For reference: http://6v8.gamboni.org/Localising-Flickr-Greasemonkey.html
	//
	// This program is free software; you can redistribute it and/or
	// modify it under the terms of the GNU Lesser General Public License
	// as published by the Free Software Foundation;
	//
	// This program is distributed in the hope that it will be useful,
	// but WITHOUT ANY WARRANTY; without even the implied warranty of
	// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	// GNU General Public License for more details.
	//
	// The GNU Lesser General Public License is available by visiting
	//   http://www.gnu.org/copyleft/lgpl.html
	// or by writing to
	//   Free Software Foundation, Inc.
	//   51 Franklin Street, Fifth Floor
	//   Boston, MA  02110-1301
	//   USA


	var FlickrLocaliser = function(locals) {
		this.init(locals);
	}
	FlickrLocaliser.prototype = {
		selectedLang: undefined,
		localisations: undefined,
		getLanguage: function() {
			if(!this.selectedLang) {
				var langA = document.evaluate(
//""//p[@class='LanguageSelector']//a[contains(@class,'selected')]"",
// TWEAK DECEMBRE
// PB Localisation example :
// FIXED for HELP Forum - https://www.flickr.com/help/forum/88857/?search=sans
//""//p[@class='.ui-dropdown.simple-drop.drop-up']//a[contains(@class,'selected')]"",
"".//*[@id='foot']/footer/div/div[1]/div/ul/li[10]/div//a[contains(@class,'selected')]"",
								 document,
								 null,
								 XPathResult.FIRST_ORDERED_NODE_TYPE, null
								 ).singleNodeValue;
                if (!langA) { // new photo page layout
                    var langA = document.evaluate(
                                ""//div[@id='foot-lang']//a[contains(@class,'selected')]"",
                                document,
                                null,
                                XPathResult.FIRST_ORDERED_NODE_TYPE, null
                                ).singleNodeValue;
                }
				if(langA) {
					var matches = /\/change_language.gne\?lang=([^&]+)&.*/.exec(langA.href);
					if(matches && matches[1]) {
						this.selectedLang = matches[1];
						return this.selectedLang;
					}
				}
				return false;
			} else return this.selectedLang;
		},

		init: function(locals) {
			this.localisations = locals;
		},

		localise: function(string, params) {
			if(this.localisations && this.getLanguage()) {
				var currentLang = this.localisations[this.selectedLang];
				if(!currentLang) currentLang = this.localisations[this.localisations.defaultLang];
				var local = currentLang[string];
				if(!local) {
					local = this.localisations[this.localisations.defaultLang][string];
				}
				if(!local) return string;
				for(arg in params) {
					var rep = new RegExp('@'+arg+'@','g');
					local = local.replace(rep,params[arg]);
				}
				local =local.replace(/@[^@]+@/g,'');
				return local;
			} else return undefined;
		}

	}

	/*****************************Flickr Localisation**********************/


	var localiser =  new FlickrLocaliser({
			'en-us' : {
				'pool_interesting' : 'Pool Interestingness',
				'quick_interesting' : 'Quick Interestingness',
				'close' : 'Close'
			},
			'fr-fr' : {
				'pool_interesting' : 'Interestingness du Groupe',
				'quick_interesting' : 'Interestingness Rapide',
				'close' : 'Fermer'
			},
			'it-it' : {
				'pool_interesting' : 'Interestingness del Gruppo',
				'quick_interesting' : 'Interestingness Rapida',
				'close' : 'Chiudi'
			},
			defaultLang: 'en-us'
		});

	function M8_log() {
		if(unsafeWindow.console)
			unsafeWindow.console.log(arguments);
		else
			GM_log(arguments);
	}

	/*
	  Xpath trickery, from:
	  http://ecmanaut.blogspot.com/2006/07/expressive-user-scripts-with-xpath-and.html
	*/
	function $x( xpath, root )
		{
			var doc = root ? root.evaluate?root:root.ownerDocument : document;
			var got = doc.evaluate( xpath, root||doc, null, 0, null ), next;
			var result = [];
			while( next = got.iterateNext() )
				result.push( next );
			return result;
		}


	function foreach( xpath, cb, root )
	{
		var nodes = $x( xpath, root ), e = 0;
		for( var i=0; i<nodes.length; i++ )
			e += cb( nodes[i], i ) || 0;
		return e;
	}



	function getObjectMethodClosure(object, method) {
		return function(arg) {
			return object[method](arg);
		}
	}

	/*
	  LightWeightBox - Thom Shannon
	  http://www.ts0.com
	  V 1.0 2006
	  BSD License
	*/

	var LightWeightBoxOn=false;
	var LightWeightBox = function(ele){
		this.ele = ele;
		this.backgroundColor = '#CCC';
		this.opacity = 0.5;
	}
	with (LightWeightBox){
		prototype.Render = function(){
			if (!LightWeightBoxOn){
				bgDiv = document.createElement('div');
				bgDiv.innerHTML = ''
				bgDiv.style.backgroundColor = this.backgroundColor;
				bgDiv.style.position='fixed';
				bgDiv.style.height='100%';
				bgDiv.style.width='100%';
				bgDiv.style.top=0;
				bgDiv.style.left='0';
				bgDiv.style.opacity=this.opacity;
				this.ele.style.position='fixed';
				this.bgDiv=bgDiv;
				document.body.appendChild(this.bgDiv);
				document.body.appendChild(this.ele);
				this.CheckSize();
				LightWeightBoxOn = true;
				var oSelf=this;
				this.sizeCheck = setInterval(function(){oSelf.CheckSize();},20);
			}
		}
		prototype.CheckSize = function(){
			if (this.ele.offsetHeight!=this.currentHeight) {
				this.offsetTop = (self.innerHeight/2)-(this.ele.offsetHeight/2);
				this.ele.style.top = this.offsetTop+'px';
				this.currentHeight=this.ele.offsetHeight;
			}
			if (this.ele.offsetWidth!=this.currentWidth) {
				this.offsetLeft = (self.innerWidth/2)-(this.ele.offsetWidth/2);
				this.ele.style.left = this.offsetLeft+'px';
				this.currentWidth=this.ele.offsetWidth;
			}
		}

		prototype.Close=function(oSelf){
			document.body.removeChild(oSelf.bgDiv);
			document.body.removeChild(oSelf.ele);
			LightWeightBoxOn = false;
		}
	}



	var flickrbuddyinteresting = function() {this.init();}

	flickrbuddyinteresting.prototype = {
		init: function() {
			var menu = document.getElementById('personmenu_contacts_link');
			if(menu) {
				var link =document.createElement('a');
				link.setAttribute('class','block');
				link.setAttribute('id','tag_person_link');
				link.setAttribute('href','javascript:;');
				link.addEventListener('click',getObjectMethodClosure(this,'showInteresting'),true);
				link.textContent=localiser.localise('quick_interesting');

				menu.parentNode.insertBefore(link,menu.nextSibling);
			}

// decembre CONTACTS page - OK
			//var who = getElementsByClassName('Icon');
			//var menu = getElementsByClassName('personmenu-sep-bottom');

// <head>
// <title>Who calls you a contact? | Contacts | flickr.com</title>

// <td class=""contact-list-bicon"">
// <a rel=""contact"" href=""/photos/muhammetsen/"">
// <img class=""BuddyIconX"" width=""24"" height=""24"" border=""0"" alt=""senmuhammet"" src=""https://farm8.staticflickr.com/7122/buddyicons/135724433@N06.jpg?1462861443#135724433@N06"">

// div id=""person_hover"" style=""left: 242px; top: 107px; display: block;"">
// <div id=""person_hover_shadow"" class=""shadowDark""></div>
// <div id=""person_hover_inner"">
// <a id=""person_hover_link"" href=""https://www.flickr.com/photos/muhammetsen/"" style=""display: block;"">
// <img id=""hover_img135458416@N03"" class=""person_hover_img"">
// <img id=""hover_img135724433@N06"" class=""person_hover_img"" src=""https://farm8.staticflickr.com/7122/buddyicons/135724433@N06.jpg?1462861443#135724433@N06"" style=""display: block; visibility: visible;"" title="""">

// OK -  CONTACTS PAGES - https://www.flickr.com/people/75967505@N03/contacts/
			var title = document.getElement('Who');
			if(title) {
				var link =document.createElement('a');
				link.setAttribute('class','block');
				link.setAttribute('id','tag_person_link');
				link.setAttribute('href','javascript:;');
				link.addEventListener('click',getObjectMethodClosure(this,'showInteresting'),true);
				link.textContent=localiser.localise('quick_interesting');

				// TEST COR title
//				menu.parentNode.insertBefore(link,menu.nextSibling);
				title.parentNode.insertBefore(link,menu.nextSibling);
			}

// decembre TEST PHOTO PAGE - NOT WORKING
// .Icon
			//var userinfo = getElementsByClassName('Icon');
// .avatar.person.medium
//			var userinfo = getElementsByClassName('avatar.person.medium');
//  		var userinfo = getElementsByClassName('avatar');
// .personmenu-sep-bottom
			//var userinfo = getElementsByClassName('personmenu-sep-bottom');
// .personCardMessageClick
//			var userinfo = document.getElement('personCardMessageClick');
//			var userinfo = getElementsByClassName('personCardMessageClick');
// .align-right
//			var userinfo = getElementsByClassName('align-right');
// .attribution-info
//			var userinfo = document.getElement('attribution-info');
// .owner-name
//			var userinfo = document.getElement('owner-name');
//			var userinfo = getElementsByClassName('owner-name');
// .attribution.shorter>a
//			var userinfo = document.getElement('attribution.shorter>a');
//

/*
// 2019 TEST -  NOT WORKING - PHOTO PAGES - https://www.flickr.com/people/75967505@N03/contacts/
			var menu3 = document.querySelector('.links.secondary a[href^=""/people/""]');
			if(menu3) {
				var link =document.createElement('a');
				link.setAttribute('class','block');
				link.setAttribute('id','tag_person_link');
				link.setAttribute('href','javascript:;');
				link.addEventListener('click',getObjectMethodClosure(this,'showInteresting'),true);
				link.textContent=localiser.localise('quick_interesting');

				// TEST COR title
//				menu.parentNode.insertBefore(link,menu.nextSibling);
				title.parentNode.insertBefore(link,menu.nextSibling);
			}

//		var person-card-view = document.getElement('attribution.shorter>a');

*/

// TEST - USERINFO - NOT WORKING ?
          if(userinfo) {
//			if(person-card-view) {
				var link =document.createElement('a');
				link.setAttribute('class','block');
				link.setAttribute('id','tag_person_link');
				link.setAttribute('href','javascript:;');
				link.addEventListener('click',getObjectMethodClosure(this,'showInteresting'),true);
				link.textContent=localiser.localise('quick_interesting');

// TEST - COR userinfo
//				menu.parentNode.insertBefore(link,userinfo.nextSibling);
				userinfo.parentNode.insertBefore(link,userinfo.nextSibling);
// .view.person-card-view
//				menu.parentNode.insertBefore(link,person-card-view.nextSibling);
			}
// END TEST PHOTO PAGE

// POOLS - NOT WORKING ?

 			if(document.location.href.match(/\/groups\//) && unsafeWindow.document.getElementById('SubNav')) {
				psi=$x1('//p[@class=""LinksNewP""]');
				psi.innerHTML+=' <img src=""/images/subnavi_dots.gif"" alt="""" height=""11"" width=""1""> ';
				var link =document.createElement('a');
				link.setAttribute('class','block');;
				link.setAttribute('href','javascript:;');
				link.addEventListener('click',getObjectMethodClosure(this,'showInteresting'),true);
				link.textContent=localiser.localise('pool_interesting');
				psi.appendChild(link);

			}
// END POOLS - NOT WORKING ?

// PROFILE - NOT WORKING ?
			var menu2 = document.getElementById('button-bar');
			if(profile) {
				var link =document.createElement('a');
				link.setAttribute('class','block');
				link.setAttribute('id','tag_person_link');
				link.setAttribute('href','javascript:;');
				link.addEventListener('click',getObjectMethodClosure(this,'showInteresting'),true);
				link.textContent=localiser.localise('quick_interesting');

				menu2.parentNode.insertBefore(link,menu2.nextSibling);
			}
// END - PROFILE - NOT WORKING ?
		},

		showInteresting: function(ev) {
			// create a block element of some kind
			var boxEle = document.createElement('div');
			var ul = boxEle.appendChild(document.createElement('ul'));
			// style it up with a class or inline
			boxEle.className = 'popup';
			// create something to act as a close button
			btnClose = document.createElement('a');
			btnClose.href='javascript:;';
			btnClose.innerHTML=localiser.localise('close');
			// add close button to block element
			boxEle.appendChild(btnClose);
			// create box with block element
			var lwBox = new LightWeightBox(boxEle);
			// optional bg color and opacity
			boxEle.style.paddingTop= '20px';
			boxEle.style.width= (75*5+20)+'px';
			boxEle.style.height= (75*5+40)+'px';
			boxEle.style.backgroundColor = '#333';
			// attach close event and add your own code
			btnClose.addEventListener('click',function(){
					// you have to pass box object into event
					// because of the js event scoping
					lwBox.Close(lwBox);
					// false to cancel link
					return false;
				},true);
			btnClose.setAttribute('style','background-color:#CCC;');

			ul.setAttribute('style','margin:0;padding:0;list-style-type:none;');
			var self = this;
			var listener = {
				flickr_photos_search_onLoad: function(success, responseXML, responseText, params){
					try{
						var rsp = responseText.replace(/jsonFlickrApi\(/,'');
						rsp = eval('('+rsp);
						if(rsp.stat == 'ok') {
							var i=0;
							var html = '';
							for(i=0;i<rsp.photos.photo.length;i++) {
								var photo = rsp.photos.photo[i];
								html += '<li style=""margin:0;padding:0;display:inline;""><a href=""https://www.flickr.com/photos/'+photo.owner+'/'+photo.id+'/""><img title=""&quot;' + photo.title + '&quot; by ' +  photo.ownername + '"" src=""https://farm'+photo.farm+'.static.flickr.com/'+photo.server+'/'+photo.id+'_'+photo.secret+'_s.jpg"" width=""75"" height=""75""/></a></li>';
							}
							ul.innerHTML = html;
							// render it!
							lwBox.Render();
						} else
							M8_log(""Error2 ""+responseText);
					} catch (e) {
						M8_log(""Error1 ""+responseText);
						M8_log(e);
					}
				}
			};
// TWEAKED 25 > 150 or 250 or 622 pics == seems 500 only possible by page
			var block = ev.target.parentNode;
			var matches = /mail\/write\/\?to=([^""]*)""/.exec(block.innerHTML);
													 if(matches)
														 unsafeWindow.F.API.callMethod('flickr.photos.search', {
															//	 user_id: matches[1], sort: 'interestingness-desc', page:1, per_page: 253,
																user_id: matches[1], sort: 'interestingness-desc', page:1, per_page: 722,
																	 format: 'json', extras: 'owner_name'
																	 }, listener);

													 if(ev.target.textContent==localiser.localise('pool_interesting')) {
														 thegroupid=unsafeWindow.document.getElementById('SubNav').innerHTML.split('\/buddyicons\/')[1].split('\.jpg')[0];
														 unsafeWindow.F.API.callMethod('flickr.photos.search', {
															//	 group_id: thegroupid , sort: 'interestingness-desc', page:1, per_page: 253,
															     group_id: thegroupid , sort: 'interestingness-desc', page:1, per_page: 700,
																	 format: 'json', extras: 'owner_name'
																	 }, listener);
													 }
													 }
													}
			//======================================================================
			// launch
			try {
				window.addEventListener(""load"", function () {
						try {

							// update automatically (http://userscripts.org/scripts/show/2296)
							win.UserScriptUpdates.requestAutomaticUpdates(SCRIPT);
						} catch (ex) {}

						var flickrgp = new flickrbuddyinteresting();
					}, false);
			} catch (ex) {}
		})();


"
h2a2gFKZ,07. Moving,myrdok123,Java,Sunday 10th of March 2024 06:14:53 AM CDT,"package WhileLoop;

import java.util.Scanner;

public class Moving {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int width = Integer.parseInt(scanner.nextLine());
        int length = Integer.parseInt(scanner.nextLine());
        int height = Integer.parseInt(scanner.nextLine());

        int availableSpace = width * length * height;

        String command = scanner.nextLine();

        while (!command.equals(""Done"")){

            int currentBoxes = Integer.parseInt(command);

            availableSpace -= currentBoxes;

            if(availableSpace <= 0){
                System.out.printf(""No more free space! You need %d Cubic meters more."", Math.abs(availableSpace));
                break;
            }



            command = scanner.nextLine();
        }

        if(availableSpace > 0){
            System.out.printf(""%d Cubic meters left."", availableSpace);
        }



    }
}
"
RQ7cAZ8P,autoexec.cfg,kanishk2112,Bash,Sunday 10th of March 2024 06:09:37 AM CDT,"// Controls
bind ""`"" ""toggleconsole""
bind ""F"" ""+lookatweapon;r_cleardecals""
bind ""MOUSE3"" ""player_ping""
bind ""MOUSE4"" ""+voicerecord""
bind ""MWHEELDOWN"" ""+jump""

// Radio Commands
bind ""C"" ""radio2""
bind ""V"" ""radio1""
bind ""N"" ""radio""

// Weapons and nades
bind ""1"" ""slot1""
bind ""2"" ""slot2""
bind ""3"" ""slot3""
bind ""4"" ""slot6""
bind ""5"" ""slot5""
bind ""6"" ""slot7""
bind ""7"" ""slot9""
bind ""MOUSE5"" ""slot8""
bind ""Z"" ""slot10""

// Radar
cl_radar_always_centered ""0""
cl_radar_scale ""0.32""

// Buy and Jump Binds

bind ""ENTER"" ""buy vesthelm; buy vest""
bind ""\"" ""buy vest""
bind ""LEFTARROW"" ""buy m4a1; buy ak47""
bind ""DOWNARROW"" ""buy deagle""
bind ""RIGHTARROW"" ""buy famas; buy galilar""
bind ""UPARROW"" ""buy awp""
bind ""O"" ""buy mp7;""
bind ""P"" ""buy mac10; buy mp9;""
bind ""K"" ""buy p250""
bind ""L"" ""buy fn57; buy tec9;""
bind ""I"" ""buy ssg08;""
bind ""J"" ""buy taser 34;""

bind ""DEL"" ""buy hegrenade""
bind ""END"" ""buy flashbang""
bind ""PGDN"" ""buy smokegrenade""
bind ""INS"" ""buy molotov; buy incendiarygrenade""
bind ""HOME"" ""buy decoy""
bind ""PGUP"" ""buy defuser""

// Other commands
cl_hud_color ""7""

sensitivity ""0.95""
zoom_sensitivity_ratio ""1.38""



"
P5YtmSir,note_calculator,Divyansh_Chourey,C,Sunday 10th of March 2024 06:08:49 AM CDT,"#include<stdio.h>
int main(){
int amount;
int rs2000note, rs500note, rs100note, rs50note, rs20note, rs10note, rs5coin, rs2coin, rs1coin;
rs500note=rs100note=rs50note=rs20note=rs10note=rs5coin=rs2coin=rs1coin=0;
printf(""Enter the amount: "");
scanf(""%d"", &amount);
if(amount>=2000){
rs2000note = amount/2000;
amount -= rs2000note*2000;
}
if(amount>=500){
rs500note = amount/500;
amount -= rs500note*500;
}
if(amount>=100){
rs100note = amount/100;
amount -= rs100note*100;
}
if(amount>=50){
rs50note = amount/50;
amount -= rs50note*50;
}
if(amount>=20){
rs20note = amount/20;
amount -= rs20note*20;
}
if(amount>=10){
rs10note = amount/10;
amount -= rs10note*10;
}
if(amount>=5){
rs5coin = amount/5;
amount -= rs5coin*5;
}
if(amount>=2){
rs2coin = amount/2;
amount -= rs2coin*2;
}
if(amount>=1){
rs1coin = amount;
}
printf(""Total number of: \n"");
printf(""2000 notes: %d\n"", rs2000note);
printf(""500 notes: %d\n"", rs500note);
printf(""100 notes: %d\n"", rs100note);
printf(""50 notes: %d\n"", rs50note);
printf(""20 notes: %d\n"", rs20note);
printf(""10 notes: %d\n"", rs10note);
printf(""5 coins: %d\n"", rs5coin);
printf(""2 coins: %d\n"", rs2coin);
printf(""1 coins: %d\n"", rs1coin);
return 0;
}"
Ky6MQZSm,How to Print PDF Completion Certificate in Storyline,nrzmalik,JavaScript,Sunday 10th of March 2024 06:07:11 AM CDT,"var confettiScript = document.createElement('script');
confettiScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js';
confettiScript.async = true;
confettiScript.onload = function() {
    generateCertificate();
};
document.head.appendChild(confettiScript);

function generateCertificate() {
    var date = new Date();
    var dd = String(date.getDate()).padStart(2, '0');
    var mm = String(date.getMonth() + 1).padStart(2, '0');
    var yyyy = date.getFullYear();
    date = mm + '/' + dd + '/' + yyyy;

    var name = prompt(""Please enter your name:"", """");
    if (!name) {
         name = prompt(""Please enter your name:"", """");
    }
    var doc = new jsPDF({
        orientation: 'landscape'
    });

    var pageWidth = doc.internal.pageSize.getWidth();
    var pageHeight = doc.internal.pageSize.getHeight();

    doc.setLineWidth(2);
    doc.setDrawColor(182, 0, 0);
    doc.rect(10, 10, pageWidth - 20, pageHeight - 20);

    var gradient = doc.setFillColor(182, 0, 0);
    doc.rect(10, 10, pageWidth - 20, 40, 'F');

    doc.setDrawColor(255, 255, 255);
    doc.setLineWidth(1);
    doc.line(10, 40, pageWidth - 10, 40);
    doc.line(30, 10, 30, 40);
    doc.line(pageWidth - 30, 10, pageWidth - 30, 40);

    doc.setTextColor(255, 255, 255);
    doc.setFontSize(30);
    doc.setFont('Helvetica', 'bold');
    var title0 = ""Certificate of Completion"";

    var pageWidth = doc.internal.pageSize.getWidth();
    var nameWidth = doc.getStringUnitWidth(title0) * doc.internal.getFontSize() / doc.internal.scaleFactor;
    var xPos = (pageWidth - nameWidth) / 2;
    doc.text(title0, xPos, 30, null, null, 'left');

    doc.setTextColor(0, 0, 0);

    doc.setFontSize(28); 
    doc.setFont('Helvetica','normal');
    var title2 = ""THIS IS TO CERTIFY"";
    var pageWidth = doc.internal.pageSize.getWidth();
    var nameWidth = doc.getStringUnitWidth(title2) * doc.internal.getFontSize() / doc.internal.scaleFactor;
    var xPos = (pageWidth - nameWidth) / 2;
    doc.text(title2, xPos, 70, null, null, 'left');

    doc.setFontSize(50); 
    doc.setFont('Helvetica','bold');
    var pageWidth = doc.internal.pageSize.getWidth();
    var nameWidth = doc.getStringUnitWidth(name) * doc.internal.getFontSize() / doc.internal.scaleFactor;
    var xPos = (pageWidth - nameWidth) / 2;
    doc.text(name, xPos, 100, null, null, 'left');

    doc.setFont('Helvetica','normal');
    doc.setFontSize(28); 
    var title3 = ""Congratulations, You have successfully completed:"";
    var pageWidth = doc.internal.pageSize.getWidth();
    var nameWidth = doc.getStringUnitWidth(title3) * doc.internal.getFontSize() / doc.internal.scaleFactor;
    var xPos = (pageWidth - nameWidth) / 2;
    doc.text(title3, xPos, 140, null, null, 'left');

    var pageTitle = document.title;
    doc.setFontSize(24); 
    doc.setFont('Helvetica','bold');
    var pageWidth = doc.internal.pageSize.getWidth();
    var nameWidth = doc.getStringUnitWidth(pageTitle) * doc.internal.getFontSize() / doc.internal.scaleFactor;
    var xPos = (pageWidth - nameWidth) / 2;
    doc.text(pageTitle, xPos, 160, null, null, 'left');

    doc.setDrawColor(0, 0, 0); 
    doc.setLineWidth(0.5);
    doc.line(18, 190, 43, 190);

    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text(date, 18, 188, null, null, 'left');
    doc.text(""Date"", 25, 195, null, null, 'left');

    doc.save(name + "" Certificate.pdf"");
}
"
TcNen1ZD,upper_to_lowerCase,Divyansh_Chourey,C,Sunday 10th of March 2024 06:06:00 AM CDT,"#include<stdio.h>

int main(){
    char ch;
    printf(""Enter any character in upper case: "");
    scanf(""%c"", &ch);
    if((ch<65)||(ch>90)){
        printf(""Please enter valid upper case alphabet only!"");
    }
    else{
        printf(""%c in lower case is: %c"", ch, ch+32);
    }
    return 0;
}"
jH0ScAQs,Untitled,TheStraying11,JavaScript,Sunday 10th of March 2024 06:03:13 AM CDT,"ServerEvents.commandRegistry(e => {
	const {commands: Commands, arguments: Arguments} = e

	const $permissionAPI = Java.loadClass('dev.ftb.mods.ftbranks.api.FTBRanksAPI')

	/**
	 * @param {net.minecraft.commands.CommandSourceStack} param0
	 * @param {string} param1
	 * @param {boolean | string | int} param2 
	*/
	let hasFTBRanksPermission = (commandSourceStack, node, value) => {
		let player
		if (commandSourceStack.isPlayer()) {
			player = commandSourceStack.getPlayer()
		}
		else {
			return commandSourceStack.hasPermission(2)
		}

		if (typeof value === ""boolean"") {
			let perm = $permissionAPI.getPermissionValue(player, node).asBoolean()
			if (perm.isEmpty()) {
				return false
			}
			return perm.get() == value
		}
		else {
			return $permissionAPI.getPermissionValue(player, node) == value
		}
	}

	let playtimeCommand = e.register(
		Commands.literal('playtime')
			.executes(ctx => playtime(ctx)) // `/playtime`
			.then(
				Commands.argument('target', Arguments.PLAYER.create(e)) // `/playtime <player>`
					.requires(commandSourceStack => hasFTBRanksPermission(commandSourceStack, 'playtime.admin', true)) // OP permission for now,, can this use permission ftbranks permission nodes instead??
					.executes(ctx => playtimeOfOther(ctx, Arguments.PLAYER.getResult(ctx, 'target')))
			)
			.then(
				Commands.literal('top') // `/playtime top`
					.executes(ctx => playtimeLeaderboard(ctx))
			)
	)

	e.register(
		Commands.literal('played').redirect(playtimeCommand)
	)

	/**
	 * @param {net.minecraft.server.level.ServerPlayer} param0
	 * @return {object} return0
	 * @return {int} return0.days
	 * @return {int} return0.hours
	 * @return {int} return0.minutes
	 * @return {int} return0.seconds
	 * @return {int} return0.ticks
	*/
	let getPlaytime = (player) => { // get the playtime of `player`
		let ticks = player.stats.getPlayTime()
		
		let seconds = Math.floor(ticks/20)
		ticks = ticks%20

		let minutes = Math.floor(seconds/60)
		seconds = seconds%60
		
		let hours = Math.floor(minutes/60)
		minutes = minutes%60

		let days = Math.floor(hours/24)
		hours = hours%24

		return {days: days, hours: hours, minutes: minutes, seconds: seconds, ticks: ticks}
	}

	/**
	 * @param {net.minecraft.commands.CommandBuildContext} param0
	 * @return {int} return0
	*/
	let playtime = (ctx) => { // send the player `player` their own playtime
		let server = ctx.source.server
		let player = ctx.source.player

		let playtime = getPlaytime(player)

		let playerName = player.getUsername()

		let timeString = `${playtime.days}d:${playtime.hours}h:${playtime.minutes}m`

		server.runCommandSilent(`/tellraw ${playerName} {""text"": ""${timeString}"", ""color"": ""green""}`)
		return 1
	}

	/**
	 * @param {net.minecraft.commands.CommandBuildContext} param0
	 * @param {net.minecraft.server.level.ServerPlayer} param1
	 * @return {int} return0
	*/
	let playtimeOfOther = (ctx, target) => { // send the player `reply`, the playtime of the player `target`
		let playtime = getPlaytime(target)
		let timeString = `${playtime.days}d:${playtime.hours}h:${playtime.minutes}m`

		let server = ctx.source.server
		let player = ctx.source.player

		let playerName = player.getUsername()
		let targetName = target.getUsername()

		server.runCommandSilent(`/tellraw ${playerName} [{""text"": ""${targetName}"", ""color"": ""gold""}, {""text"": ""${timeString}"", ""color"": ""green""}]`)
		return 1
	}

	/**
	 * @param {net.minecraft.commands.CommandBuildContext} param0
	 * @return {int} return0
	*/
	let playtimeLeaderboard = (ctx) => { // send the player `reply` a sorted list of the playtimes of everyone in the /world/stats directory
		// TODO: get stats of all players to ever join the server
		return 1
	}
})"
MeqiHqbh,pyGUI_1.0.0,creativesamurai1982,Python,Sunday 10th of March 2024 06:03:06 AM CDT,"import tkinter as tk
from tkinter import ttk
from tkinter import *
import serial.tools.list_ports
import serial

# --- Serial Frame Global variables ---
serial_connection = None

# --- Transport Frame Global variables ---

# --- Defines for Serial Frame
def connect_serial():
    global serial_connection
    try:
        port = port_options.get()
        if not port:
            raise ValueError(""No port selected"")
        if port not in [port.device for port in serial.tools.list_ports.comports()]:
            raise ValueError(f""Selected port '{port}' is no longer available"")
        
        baud_rate = baud_options.get()
        if not baud_rate:
            raise ValueError(""No baud rate selected"")
        
        serial_connection = serial.Serial(port, baud_rate)
        connect_button.config(state=tk.DISABLED)
        disconnect_button.config(state=tk.NORMAL)
        status_label.config(text=f""Connected to {port} at {baud_rate} baud"")
        
        root.geometry(""1080x720"")  # Set the new width and height of the window
        
    except ValueError as ve:
        status_label.config(text=str(ve))
    except serial.SerialException:
        status_label.config(text=""Failed to connect to serial port"")

def disconnect_serial():
    global serial_connection
    if serial_connection is not None:
        serial_connection.close()
        connect_button.config(state=tk.NORMAL)
        disconnect_button.config(state=tk.DISABLED)
        status_label.config(text=""Disconnected"")
        
        # Restore the window size
        root.geometry("""")  # Reset the window size to its default

def update_com_ports():    
    port_list = [port.device for port in serial.tools.list_ports.comports()]
    port_combo['values'] = port_list
    root.after(1000, update_com_ports)  # Schedule this function to run every 1000 milliseconds (1 second)


# --- Initialize Tkinter ---
root = tk.Tk()
img = PhotoImage(file='icon.png')
root.iconphoto(False, img)
root.title(""Serial Monitor"")

# --- Variables for Serial ---
#Frame Get available ports and baud rates
port_list = [port.device for port in serial.tools.list_ports.comports()]
baud_list = [""110"", ""300"", ""600"", ""1200"", ""2400"", ""4800"", ""9600"", ""14400"", ""19200"", ""38400"", ""57600"", ""115200"", ""128000"", ""256000""]

# Variables for selected options
port_options = tk.StringVar()
baud_options = tk.StringVar()

# --- Create Frames ---
left_frame = tk.Frame(root, bg=""cyan"")
right_frame = tk.Frame(root, bg=""pink"")
serial_frame = tk.Frame(left_frame, bg=""blue"")
transport_frame = tk.Frame(left_frame, bg=""green"")
transport2_frame = tk.Frame(right_frame, bg=""yellow"")

# --- Create Serial Widgets ---
serial_title = tk.Label(serial_frame, text=""Serial Settings"")  # Set label background color to blue
port_label = tk.Label(serial_frame, text=""COM Port:"")  # Set label background color to blue
baud_label = tk.Label(serial_frame, text=""Baud Rate:"")  # Set label background color to blue
port_combo = ttk.Combobox(serial_frame, textvariable=port_options, values=port_list, state=""readonly"")
baud_combo = ttk.Combobox(serial_frame, textvariable=baud_options, values=baud_list, state=""readonly"")
connect_button = tk.Button(serial_frame, text=""Connect"", command=connect_serial)
disconnect_button = tk.Button(serial_frame, text=""Disconnect"", command=disconnect_serial, state=tk.DISABLED)
status_label = tk.Label(serial_frame, text="""")  # Set label background color to blue


# --- Create Transport Widgets ---
transport_title = tk.Label(transport_frame, text=""Transport Controls"", bg=""green"")
start_button = tk.Button(transport_frame, text=""Start"")
stop_button = tk.Button(transport_frame, text=""Stop"")

# --- Create test Widgets ---
transport2_title = tk.Label(transport2_frame, text=""Transport Controls"", bg=""green"")
start2_button = tk.Button(transport2_frame, text=""Start"")
stop2_button = tk.Button(transport2_frame, text=""Stop"")

# --- Publish Grid layout ---
left_frame.grid(row=0, column=0, padx=10, pady=10)
right_frame.grid(row=0, column=1, padx=10, pady=10)
serial_frame.grid(row=0, column=0, padx=10, pady=10) # Grid the serial frame
transport_frame.grid(row=1, column=0, padx=10, pady=10)
transport2_frame.grid(row=1, column=0, padx=10, pady=10)

# --- Publish Serial Widgets ---
serial_title.grid(row=0, column=0, columnspan=3, padx=10, pady=10)
port_label.grid(row=1, column=0, padx=10, pady=5)
baud_label.grid(row=2, column=0, padx=10, pady=5)
port_combo.grid(row=1, column=1, padx=10, pady=5)
baud_combo.grid(row=2, column=1, padx=10, pady=5)
connect_button.grid(row=1, column=2, padx=10, pady=5)
disconnect_button.grid(row=2, column=2, padx=10, pady=5)
status_label.grid(row=3, column=0, columnspan=3, padx=10, pady=10)

# --- Publish Transport Widgets ---
transport_title.grid(row=0, column=0, columnspan=3, padx=10, pady=10)
start_button.grid(row=1, column=1, padx=10, pady=5)
stop_button.grid(row=2, column=1, padx=10, pady=5)

# --- Publish Test Widgets ---
transport2_title.grid(row=0, column=0, columnspan=3, padx=10, pady=10)
start2_button.grid(row=1, column=1, padx=10, pady=5)
stop2_button.grid(row=2, column=1, padx=10, pady=5)

update_com_ports()  # Starts the function to update COM ports periodically

# Start Tkinter event loop
root.mainloop()

"
hEL9zb76,Untitled,TheStraying11,JavaScript,Sunday 10th of March 2024 06:01:48 AM CDT,"ServerEvents.commandRegistry(e => {
	const {commands: Commands, arguments: Arguments} = e

	const $permissionAPI = Java.loadClass('dev.ftb.mods.ftbranks.api.FTBRanksAPI')

	/**
	 * @param {net.minecraft.commands.CommandSourceStack} param0
	 * @param {string} param1
	 * @param {boolean | string | int} param2 
	*/
	let hasFTBRanksPermission = (commandSourceStack, node, value) => {
		let player
		if (commandSourceStack.isPlayer()) {
			player = commandSourceStack.getPlayer()
		}
		else {
			return commandSourceStack.hasPermission(2)
		}

		if (typeof value === ""boolean"") {
			let perm = $permissionAPI.getPermissionValue(player, node).asBoolean()
			if (perm.isEmpty()) {
				return false
			}
			return perm.get() == value
		}
		else {
			return $permissionAPI.getPermissionValue(player, node) == value
		}
	}

	let playtimeCommand = e.register(
		Commands.literal('playtime')
			.executes(ctx => playtime(ctx)) // `/playtime`
			.then(
				Commands.argument('target', Arguments.PLAYER.create(e)) // `/playtime <player>`
					.requires(commandSourceStack => hasFTBRanksPermission(commandSourceStack, 'playtime.admin', true)) // OP permission for now,, can this use permission ftbranks permission nodes instead??
					.executes(ctx => playtimeOfOther(ctx, Arguments.PLAYER.getResult(ctx, 'target')))
			)
			.then(
				Commands.literal('top') // `/playtime top`
					.executes(ctx => playtimeLeaderboard(ctx))
			)
	)

	e.register(
		Commands.literal('played').redirect(playtimeCommand)
	)

	/**
	 * @param {net.minecraft.server.level.ServerPlayer} param0
	 * @return {object} return0
	 * @return {int} return0.days
	 * @return {int} return0.hours
	 * @return {int} return0.minutes
	 * @return {int} return0.seconds
	 * @return {int} return0.ticks
	*/
	let getPlaytime = (player) => { // get the playtime of `player`
		let ticks = player.stats.getPlayTime()
		
		let seconds = Math.floor(ticks/20)
		ticks = ticks%20

		let minutes = Math.floor(seconds/60)
		seconds = seconds%60
		
		let hours = Math.floor(minutes/60)
		minutes = minutes%60

		let days = Math.floor(hours/24)
		hours = hours%24

		return {days: days, hours: hours, minutes: minutes, seconds: seconds, ticks: ticks}
	}

	/**
	 * @param {string} param0
	 * @param {object<string, string>} param1
	*/
	let format = (str, keys) => {
		for (key in keys) {
			let value = keys[key]
			str = str.replaceAll(""${"" + key + ""}"", value)
		}
		return str
	}

	/**
	 * @param {object} param0
	 * @param {int} param0.days
	 * @param {int} param0.hours
	 * @param {int} param0.minutes
	 * @param {int} param0.seconds
	 * @param {int} param0.ticks
	 * @return {string} return0
	*/
	let getTimeString = (playtime) => {
		let sparsePlaytime = {}
		let i = 0
		for (let key in playtime) {
			let value = playtime[key]
			if (value > 0) {
				sparsePlaytime['value'+i] = value
				if (value == 1) {key = key.slice(0, -1)}
				sparsePlaytime['unit'+i] = key
				i++
			}
		}

		let lenParser = [
			""${value0} ${unit0}"",
			""${value0} ${unit0} and ${value1} ${unit1}"",
			""${value0} ${unit0}, ${value1} ${unit1} and ${value2} ${unit2}"",
			""${value0} ${unit0}, ${value1} ${unit1}, ${value2} ${unit2} and ${value3} ${unit3}"",
			""${value0} ${unit0}, ${value1} ${unit1}, ${value2} ${unit2}, ${value3} ${unit3} and ${value4} ${unit4}""
		]

		return format(lenParser[i-1], sparsePlaytime)
	}

	/**
	 * @param {net.minecraft.commands.CommandBuildContext} param0
	 * @return {int} return0
	*/
	let playtime = (ctx) => { // send the player `player` their own playtime
		let server = ctx.source.server
		let player = ctx.source.player

		let playtime = getPlaytime(player)

		let playerName = player.getUsername()

		let timeString = getTimeString(playtime)

		server.runCommandSilent(`/tellraw ${playerName} {""text"": ""${timeString}"", ""color"": ""green""}`)
		return 1
	}

	/**
	 * @param {net.minecraft.commands.CommandBuildContext} param0
	 * @param {net.minecraft.server.level.ServerPlayer} param1
	 * @return {int} return0
	*/
	let playtimeOfOther = (ctx, target) => { // send the player `reply`, the playtime of the player `target`
		let playtime = getPlaytime(target)
		let timeString = getTimeString(playtime)

		let server = ctx.source.server
		let player = ctx.source.player

		let playerName = player.getUsername()
		let targetName = target.getUsername()

		server.runCommandSilent(`/tellraw ${playerName} [{""text"": ""${targetName}"", ""color"": ""gold""}, {""text"": ""${timeString}"", ""color"": ""green""}]`)
		return 1
	}

	/**
	 * @param {net.minecraft.commands.CommandBuildContext} param0
	 * @return {int} return0
	*/
	let playtimeLeaderboard = (ctx) => { // send the player `reply` a sorted list of the playtimes of everyone in the /world/stats directory
		// TODO: get stats of all players to ever join the server
		return 1
	}
})"
HsWEnVE2,date_difference,Divyansh_Chourey,C,Sunday 10th of March 2024 05:59:14 AM CDT,"#include<stdio.h>

int leap_year(int year);
//checks if a year is leap year or not

int days_in_month(int month_num);
//takes month number and returns number of days 

int date_to_days(int date, int month, int year);
//takes date and calculate number of days from reference date

int days_to_date(int days);
//takes days and convert to date format

int main(){
	int year1, year2, month1, month2, date1, date2, result;
	printf(""\nEnter valid date(dd mm yyyy)\nFirst date must be smaller than second date\n"");
	printf(""Enter first date: "");
	scanf(""%d %d %d"", &date1, &month1, &year1);
	printf(""Enter second date: "");
	scanf(""%d %d %d"", &date2, &month2, &year2);
	if(date1>31 || date2>31 || month1>12 || month2>12){
		printf(""Invalid date"");
	}
	else{
		result = date_to_days(date2, month2, year2)-date_to_days(date1, month1, year1);
		printf(""total number of days: %d\n"", result);
		days_to_date(result);
	}
	return 0;
}

int leap_year(int year){
	if(((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)){
		return 1;
	}
	else{
		return 0;
	}
}

int days_in_month(int month_num){
	int days=0, year=2018;
	if(month_num==1 ||month_num==3 ||month_num==5 ||month_num==7 ||month_num==8 ||month_num==10 ||month_num==12 ){
		return days+=31;
	}
	else if(month_num==4 ||month_num==6 ||month_num==9 ||month_num==11 ){
		return days+=30;
	}
	else if(month_num==2 && leap_year(year)){
		return days+=29;
	}
	else{
		return days+=28;
	}
}

int date_to_days(int date, int month, int year){
	int reference = 1500, result;
	int a=reference, b=(year-1), days=0;
	for(int i = a; i<=b; i++){
		if (leap_year(i)){
			days += 366;
		}
		else{
			days += 365;
		}
	}
	for(int i=1; i<=month; i++){
		days+=days_in_month(i);
	}
	days+=date;
	return days;
	
}

int days_to_date(int days){
	int year=0, month=0, date=0;
	if (days>=365){
		year = days/365;
		days-=year*365;
	}
	if (days>=30){
		month = days/30;
		days-=month*30;
	}
	printf(""%d years, %d months, %d days"", year, month, days);
	return 0;
}"
tmnnUxDg,Untitled,TheStraying11,JavaScript,Sunday 10th of March 2024 05:57:22 AM CDT,"let format = (str, keys) => {
	for (key in keys) {
		let value = keys[key]
		str = str.replaceAll(""${"" + key + ""}"", value)
	}
	return str
}

let getTimeString = (playtime) => {
	let sparsePlaytime = {}
	let i = 0
	for (let [key, value] of Object.entries(playtime)) {
		if (playtime[key] > 0) {
			sparsePlaytime['value'+i] = value
			if (value == 1) {key = key.slice(0, -1)}
			sparsePlaytime['unit'+i] = key
			i++
		}
	}

	let lenParser = [
		""${value0} ${unit0}"",
		""${value0} ${unit0} and ${value1} ${unit1}"",
		""${value0} ${unit0}, ${value1} ${unit1} and ${value2} ${unit2}"",
		""${value0} ${unit0}, ${value1} ${unit1}, ${value2} ${unit2} and ${value3} ${unit3}"",
		""${value0} ${unit0}, ${value1} ${unit1}, ${value2} ${unit2}, ${value3} ${unit3} and ${value4} ${unit4}""
	]

	return format(lenParser[i-1], sparsePlaytime)
}"
WZ16N6fA,06. Cake,myrdok123,Java,Sunday 10th of March 2024 05:54:41 AM CDT,"package WhileLoop;

import java.util.Scanner;

public class Cake {
    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);

        int width = Integer.parseInt(scanner.nextLine());
        int length = Integer.parseInt(scanner.nextLine());

        int countPieces = width * length;

        String command = scanner.nextLine();

        while (!command.equals(""STOP"")){

            int currentCakePieces = Integer.parseInt(command);

            countPieces -= currentCakePieces;

            if(countPieces <= 0){
                System.out.printf(""No more cake left! You need %d pieces more."", Math.abs(countPieces));
                break;
            }


            command = scanner.nextLine();
        }


        if(countPieces > 0){

            System.out.printf(""%d pieces are left."", countPieces);

        }



    }
}
"
3snV4PNm,09. Fish Tank,IvetValcheva,C#,Sunday 10th of March 2024 05:53:04 AM CDT,"
int volume = int.Parse(Console.ReadLine())
            * int.Parse(Console.ReadLine())
            * int.Parse(Console.ReadLine());

double volumeInLiters = volume * 0.001;

double occupiedSpace = double.Parse(Console.ReadLine())/100;

double requiredLiters = volumeInLiters - volumeInLiters * occupiedSpace;

Console.WriteLine(requiredLiters);"
3zAqyJG1,pyramid_of_num,Divyansh_Chourey,C,Sunday 10th of March 2024 05:51:23 AM CDT,"#include<stdio.h>
int main(){
	int i, j, k, num;
	printf(""Enter the number: "");
	scanf(""%d"", &num);
	k=num/2;
	for(i=1; i<=num; i++){
		printf(""\n"");
		
		if(i%2!=0){
			for (int a = i/2; a < k; a++) {
				printf("" "");
			}
			for(j=1; j<=i; j++){
				printf(""%d"", j);
			}
		}
		
	}
	return 0;
}
"
NwmrH8tN,Untitled,Salvens,Python,Sunday 10th of March 2024 05:47:19 AM CDT,"s = input()
x = int(s, 16)
cnt = [0, 0, 0, 0]
for i in range(0, 30):
    s = input()
    y = int(s, 16)
    z = x ^ y
    cnt[z % 4] += 1
for i in cnt:
    print(i)"
smtT3RJq,05. Coins,myrdok123,Java,Sunday 10th of March 2024 05:02:15 AM CDT,"package WhileLoop;

import java.util.Scanner;

public class Coins {


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        double sum = Double.parseDouble(scanner.nextLine());

        double totalCoins = Math.floor(sum * 100);

        int countCoins = 0;

        while (totalCoins > 0 ){

            if(totalCoins >= 200){
                totalCoins -= 200;
                countCoins++;
            } else if (totalCoins >= 100) {
                totalCoins -= 100;
                countCoins++;
            }else if (totalCoins >= 50) {
                totalCoins -= 50;
                countCoins++;
            }else if (totalCoins >= 20) {
                totalCoins -= 20;
                countCoins++;
            }else if (totalCoins >= 10) {
                totalCoins -= 10;
                countCoins++;
            }else if (totalCoins >= 5) {
                totalCoins -= 5;
                countCoins++;
            }else if (totalCoins >= 2) {
                totalCoins -= 2;
                countCoins++;
            }else if (totalCoins >= 1) {
                totalCoins -= 1;
                countCoins++;
            }
            
        }

        System.out.println(countCoins);



    }
}
"
tqVHrYKZ,Adjacency matrix,Ruja404,Lua,Sunday 10th of March 2024 04:46:37 AM CDT,"local debugger= fs.open(""adj_matrix"", ""w"")

-- Function to split a string into parts based on a delimiter
function split(inputstr, sep)
    if sep == nil then
        sep = ""%s""
    end
    local t = {}
    for str in string.gmatch(inputstr, ""([^"" .. sep .. ""]+)"") do
        table.insert(t, str)
    end
    return t
end

function createEmptyMatrix(width, height)
    local matrix = {}
    for i = 0, height do
        matrix[i] = {}
        for j = 0, width do
            matrix[i][j] = """"
        end
    end
    return matrix
end

-- Read the CSV file and construct the adjacency matrix
function createVertexMap(filename)
    local vertex_map = {}
    local file = fs.open(filename, ""r"")
	local line = file.readLine()
	local width, height = string.match(line , ""(%d+)%,(%d+)"")
	vertex_map = createEmptyMatrix(tonumber(width) - 1, tonumber(height) - 1)

    -- Iterate through each line in the file
	line = file.readLine()
	while true do
    	if not line then break end
		
        local vertices= split(line, "";"")
        local vertex1, vertex2 = string.match(line, ""(%a%d%a%d);(%a%d%a%d)"")
		if not vertex1 or not vertex2 then break end

        -- Initialize an empty list if the vertex doesn't exist in the map
        vertex_map[vertex1] = vertex_map[vertex1] or {}
        vertex_map[vertex2] = vertex_map[vertex2] or {}

		table.insert(vertex_map[vertex1], vertex2)
		table.insert(vertex_map[vertex2], vertex1)

		line = file.readLine()
	end

    file.close()
    return vertex_map
end

-- Function to check if two vertices are connected
function areVerticesConnected(vertex_map, given_vertex, check_vertex)
	local connected_vertices = getConnectedVertices(vertex_map, given_vertex)
    for _, vertex in ipairs(connected_vertices) do
    	if vertex == check_vertex then
			return true
		end
	end
	return false
end

-- Function to get connected vertices of a given vertex
function getConnectedVertices(vertex_map, vertex)
    return vertex_map[vertex] or {}
end


-- Usage
local csv_filename = ""adjaceny.csv""
local vertex_map = createVertexMap(csv_filename)

local given_vertex = ""x2y0""
local check_vertex = ""x1y0""
local areConnected = areVerticesConnected(vertex_map, given_vertex, check_vertex )
if areConnected  then
    print(given_vertex , ""and"", check_vertex , ""are connected."")
else
    print(given_vertex , ""and"", check_vertex , ""are not connected."")
end

"
9WRDa2D4,04. Walking,myrdok123,Java,Sunday 10th of March 2024 04:34:22 AM CDT,"package WhileLoop;

import java.util.Scanner;

public class Walking {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String command = scanner.nextLine();

        int sumSteps = 0;

        while (!command.equals(""Going home"")){

            int currentSteps = Integer.parseInt(command);

            sumSteps += currentSteps;

            if(sumSteps >= 10000){

                break;
            }
            command = scanner.nextLine();

        }

        if (command.equals(""Going home"")){
            int stepsToHome = Integer.parseInt(scanner.nextLine());
            sumSteps += stepsToHome;
        }

        if(sumSteps >= 10000){

            System.out.println(""Goal reached! Good job!"");
            System.out.printf(""%d steps over the goal!"", sumSteps - 10000 );
        }else {
            System.out.printf(""%d more steps to reach goal."", 10000 - sumSteps);
        }



    }
}
"
F4gTLf28,Countdown_Timer_Code,Anonymous0069,Python,Sunday 10th of March 2024 04:03:35 AM CDT,"import threading

import time

import tkinter as tk

from win10toast  import ToastNotifier

class Countdowntimer:
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry(""800x220"")
        self.root.title(""Tkinter Countdown Timer"")
        self.root.configure(bg=""black"")

        self.time_entry = tk.Entry(self.root, font=(""Helvetica"", 30))
        self.time_entry.grid(row=0, column=0, columnspan=2, padx=5, pady=5)

        self.start_button = tk.Button(self.root, font=(""Helvetica"", 30), text=""Start"", command=self.start_thread)
        self.start_button.grid(row=1, column=0, padx=5, pady=5)

        self.stop_button = tk.Button(self.root, font=(""Helvetica"", 30), text=""Reset"", command=self.stop)
        self.stop_button.grid(row=1, column=1, padx=5, pady=5)

        self.time_label = tk.Label(self.root, font=(""Helvetica"", 30), text=""Time Left: 00:00:00"")
        self.time_label.grid(row=10, column=0, columnspan=2, padx=5, pady=5)

        self.stop_loop = False

        self.root.mainloop()

    def start_thread(self):
        t = threading.Thread(target=self.start)
        t.start()

    def start(self):
        self.stop_loop = False
        hours,minutes,seconds=0,0,0
        string_split = self.time_entry.get().split("":"")
        if len(string_split) == 3:
            hours = int(string_split[0])
            minutes = int(string_split[1])
            seconds = int(string_split[2])

        elif len(string_split) == 2:
            minutes = int(string_split[0])
            seconds = int(string_split[1])

        elif len(string_split) == 1:
            seconds = int(string_split[0])

        else:
            print(""Invalid time format"")
            return
        full_seconds = (hours*3600) + (minutes * 60) + seconds

        while full_seconds > 0 and not self.stop_loop:
            full_seconds -= 1

            minutes, seconds = divmod(full_seconds, 60)
            hours, minutes = divmod(minutes, 60)
        
            self.time_label.config(text=f""Time Left: {hours:02d}:{minutes:02d}:{seconds:02d}"")
            self.root.update()
            time.sleep(1)
          
        if not self.stop_loop:
            toast  = ToastNotifier()
            toast.show_toast(""Countdown Timer"", ""Time is up!"")
    def stop(self):
        self.stop_loop = True
        self.time_label.config(text=""Time Left: 00:00:00"")
      
Countdowntimer()"
kZPR6emU,Untitled,bebo231312312321,JavaScript,Sunday 10th of March 2024 04:01:23 AM CDT,"export class YourComponent {
  rightPanelActive = false;

  activateRightPanel() {
    this.rightPanelActive = true;
  }

  deactivateRightPanel() {
    this.rightPanelActive = false;
  }
}"
UDavDt5y,Untitled,bebo231312312321,JavaScript,Sunday 10th of March 2024 04:00:35 AM CDT,"<div class=""container"" [ngClass]=""{'right-panel-active': rightPanelActive}"">
  <div class=""form-container sign-up-container"">
    <form action=""#"">
      <h1>Ð¡ÑÐ·Ð´Ð°Ð¹ Ð°ÐºÐ°ÑÐ½Ñ</h1>
      <input type=""text"" placeholder=""ÐÐ¼Ðµ"" />
      <input type=""email"" placeholder=""ÐÐ»ÐµÐºÑÑÐ¾Ð½Ð½Ð° Ð¿Ð¾ÑÐ°"" />
      <input type=""password"" placeholder=""ÐÐ°ÑÐ¾Ð»Ð°"" />
      <button>Ð ÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ñ</button>
    </form>
  </div>
  <div class=""form-container sign-in-container"">
    <form action=""#"">
      <h1>ÐÑÐ¾Ð´</h1>
      <input type=""email"" placeholder=""ÐÐ»ÐµÐºÑÑÐ¾Ð½Ð½Ð° Ð¿Ð¾ÑÐ°"" />
      <input type=""password"" placeholder=""ÐÐ°ÑÐ¾Ð»Ð°"" />
      <a href=""#"">ÐÐ°Ð±ÑÐ°Ð²ÐµÐ½Ð° Ð¿Ð°ÑÐ¾Ð»Ð°?</a>
      <button>ÐÑÐ¾Ð´</button>
    </form>
  </div>
  <div class=""overlay-container"">
    <div class=""overlay"">
      <div class=""overlay-panel overlay-left"">
        <h1>ÐÐ¾Ð±ÑÐµ Ð´Ð¾ÑÐ»Ð¸ Ð¾ÑÐ½Ð¾Ð²Ð¾!</h1>
        <p>ÐÐ° Ð´Ð° Ð¾ÑÑÐ°Ð½ÐµÑÐµ ÑÐ²ÑÑÐ·Ð°Ð½Ð¸ Ñ Ð½Ð°Ñ, Ð¼Ð¾Ð»Ñ Ð²Ð»ÐµÐ·ÑÐµ Ñ Ð²Ð°ÑÐ¸ÑÐµ Ð»Ð¸ÑÐ½Ð¸ Ð´Ð°Ð½Ð½Ð¸</p>
        <button class=""ghost"" (click)=""deactivateRightPanel()"">ÐÑÐ¾Ð´</button>
      </div>
      <div class=""overlay-panel overlay-right"">
        <h1>ÐÐ´ÑÐ°Ð²ÐµÐ¹, Ð¿ÑÐ¸ÑÑÐµÐ»!</h1>
        <p>ÐÑÐ²ÐµÐ´ÐµÑÐµ ÑÐ²Ð¾Ð¸ÑÐµ Ð»Ð¸ÑÐ½Ð¸ Ð´Ð°Ð½Ð½Ð¸ Ð¸ Ð·Ð°Ð¿Ð¾ÑÐ½ÐµÑÐµ Ð¿ÑÑÑÐ²Ð°Ð½ÐµÑÐ¾ ÑÐ¸ Ñ Ð½Ð°Ñ</p>
        <button class=""ghost"" (click)=""activateRightPanel()"">Ð ÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ñ</button>
      </div>
    </div>
  </div>
</div>

<button (click)=""activateRightPanel()"">Sign Up</button>
<button (click)=""deactivateRightPanel()"">Sign In</button>
"
TyZkfgfG,01. USD to BGN,IvetValcheva,C#,Sunday 10th of March 2024 03:56:08 AM CDT,"
//1 USD = 1.79549 BGN 

double usd = double.Parse(Console.ReadLine());

double bgn = usd * 1.79549;

Console.WriteLine(bgn);"
66nnifSQ,03. Vacation second ->,myrdok123,Java,Sunday 10th of March 2024 03:48:28 AM CDT,"package WhileLoop;

import java.util.Scanner;

public class Vacation {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        double neededMoney = Double.parseDouble(scanner.nextLine());
        double availableMoney = Double.parseDouble(scanner.nextLine());

        //Ð¡ÑÐ·Ð´Ð°Ð²Ð°Ð¼Ðµ Ð¿ÑÐ¾Ð¼ÐµÐ½Ð»Ð¸Ð²Ð¸, Ñ ÐºÐ¾Ð¸ÑÐ¾ ÑÐµ Ð±ÑÐ¾Ð¸Ð¼ Ð¸Ð·Ð¼Ð¸Ð½Ð°Ð»Ð¸ Ð´Ð½Ð¸ Ð¸ Ð¿Ð¾ÑÐ»ÐµÐ´Ð¾Ð²Ð°ÑÐµÐ»Ð½Ð¸ÑÐµ Ð´Ð½Ð¸, Ð² ÐºÐ¾Ð¸ÑÐ¾ ÑÐ°ÑÑÐ¸Ð¼
        int countDays = 0;
        int countSpend = 0;

        // ÐÑÐ°Ð²Ð¸Ð¼ while, Ð´Ð¾ÐºÐ°ÑÐ¾ availableMoney < neededMoney
        while (availableMoney < neededMoney){
            //ÐÑÐ¾Ð²ÐµÑÑÐ²Ð°Ð¼Ðµ Ð´Ð°Ð»Ð¸ ÑÐ¼Ðµ Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ Ð¿ÐµÑ Ð¿Ð¾ÑÐ»ÐµÐ´Ð¾Ð²Ð°ÑÐµÐ»Ð½Ð¸ Ð´Ð½Ð¸ spend -> Ð¿ÑÐµÐºÑÐ°ÑÑÐ²Ð°Ð¼Ðµ ÑÐ¸ÐºÑÐ»Ð°
            if (countSpend == 5){
                break;
            }

            //Ð£Ð²ÐµÐ»Ð¸ÑÐ°Ð²Ð°Ð¼Ðµ Ð±ÑÐ¾Ñ Ð½Ð° Ð´Ð½Ð¸ÑÐµ Ð¸ Ð¿ÑÐ¾ÑÐ¸ÑÐ°Ð¼Ðµ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð° ""spend"", ""save"" Ð¸ Ð¿ÑÐ¾ÑÐ¸ÑÐ°Ð¼Ðµ ÑÑÐ¼Ð°ÑÐ° Ð·Ð° ÑÐ°ÑÑÐµÐ½Ðµ Ð¸Ð»Ð¸ ÑÐ¿ÐµÑÑÑÐ²Ð°Ð½Ðµ
            countDays++;
            String command = scanner.nextLine();
            double currentSum = Double.parseDouble(scanner.nextLine());

            //ÐÑÐ¾Ð²ÐµÑÑÐ²Ð°Ð¼Ðµ Ð´Ð°Ð»Ð¸ ÑÐ°ÑÑÐ¸Ð¼ Ð¸Ð»Ð¸ ÑÐ¿ÐµÑÑÑÐ²Ð°Ð¼Ðµ Ð¸ ÑÐµÑÐ¿ÐµÐºÑÐ¸Ð²Ð½Ð¾ Ð½Ð°Ð¼Ð°Ð»ÑÐ¼Ðµ Ð¸Ð»Ð¸ ÑÐ²ÐµÐ»Ð¸ÑÐ°Ð²Ð°Ð¼Ðµ Ð¿Ð°ÑÐ¸ÑÐµ Ð² ÐºÐ°ÑÐ¸ÑÐºÐ°ÑÐ°
            if(command.equals(""spend"")){
                countSpend++;
                availableMoney -= currentSum;
            }else if(command.equals(""save"")){
                availableMoney += currentSum;
                countSpend = 0;
            }

            //Ð¿ÑÐ¾Ð²ÐµÑÑÐ²Ð°Ð¼Ðµ Ð´Ð°Ð»Ð¸ Ð¿Ð°ÑÐ¸ÑÐµ Ð² ÐºÐ°ÑÐ¸ÑÐºÐ°ÑÐ° ÑÐ° ÑÑÐ°Ð½Ð°Ð»Ð¸ Ð¾ÑÑÐ¸ÑÐ°ÑÐµÐ»Ð½Ð¾ ÑÐ¸ÑÐ»Ð¾ -> Ð¿ÑÐ¸ÑÐ°Ð²Ð½ÑÐ²Ð°Ð¼Ðµ ÐºÑÐ¼ 0
            if (availableMoney < 0){
                availableMoney = 0;
            }


        }

        //ÐÑÐ¾Ð²ÐµÑÑÐ²Ð°Ð¼Ðµ countSpend == 5 -> Ð½Ðµ Ð¼Ð¾Ð¶ÐµÐ¼ Ð´Ð° ÑÐ¿ÐµÑÑÐ¸Ð¼ Ð½ÑÐ¶Ð½Ð¸ÑÐµ Ð¿Ð°ÑÐ¸
        if(countSpend == 5){
            System.out.println(""You can't save the money."");
            System.out.println(countDays);
        }else {

            System.out.printf(""You saved the money for %d days."", countDays);
        }




    }
}
"
5x8j5R8n,03. Vacation,myrdok123,Java,Sunday 10th of March 2024 03:47:09 AM CDT,"package WhileLoop;

import java.util.Scanner;

public class Vacation {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        double neededMoney = Double.parseDouble(scanner.nextLine());
        double availableMoney = Double.parseDouble(scanner.nextLine());

        //Ð¡ÑÐ·Ð´Ð°Ð²Ð°Ð¼Ðµ Ð¿ÑÐ¾Ð¼ÐµÐ½Ð»Ð¸Ð²Ð¸, Ñ ÐºÐ¾Ð¸ÑÐ¾ ÑÐµ Ð±ÑÐ¾Ð¸Ð¼ Ð¸Ð·Ð¼Ð¸Ð½Ð°Ð»Ð¸ Ð´Ð½Ð¸ Ð¸ Ð¿Ð¾ÑÐ»ÐµÐ´Ð¾Ð²Ð°ÑÐµÐ»Ð½Ð¸ÑÐµ Ð´Ð½Ð¸, Ð² ÐºÐ¾Ð¸ÑÐ¾ ÑÐ°ÑÑÐ¸Ð¼
        int countDays = 0;
        int countSpend = 0;

        // ÐÑÐ°Ð²Ð¸Ð¼ while, Ð´Ð¾ÐºÐ°ÑÐ¾ availableMoney < neededMoney
        while (availableMoney < neededMoney){
            //ÐÑÐ¾Ð²ÐµÑÑÐ²Ð°Ð¼Ðµ Ð´Ð°Ð»Ð¸ ÑÐ¼Ðµ Ð¿Ð¾Ð»ÑÑÐ¸Ð»Ð¸ Ð¿ÐµÑ Ð¿Ð¾ÑÐ»ÐµÐ´Ð¾Ð²Ð°ÑÐµÐ»Ð½Ð¸ Ð´Ð½Ð¸ spend -> Ð¿ÑÐµÐºÑÐ°ÑÑÐ²Ð°Ð¼Ðµ ÑÐ¸ÐºÑÐ»Ð°
            if (countSpend == 5){
                System.out.println(""You can't save the money."");
                System.out.println(countDays);
                break;
            }

            //Ð£Ð²ÐµÐ»Ð¸ÑÐ°Ð²Ð°Ð¼Ðµ Ð±ÑÐ¾Ñ Ð½Ð° Ð´Ð½Ð¸ÑÐµ Ð¸ Ð¿ÑÐ¾ÑÐ¸ÑÐ°Ð¼Ðµ ÐºÐ¾Ð¼Ð°Ð½Ð´Ð° ""spend"", ""save"" Ð¸ Ð¿ÑÐ¾ÑÐ¸ÑÐ°Ð¼Ðµ ÑÑÐ¼Ð°ÑÐ° Ð·Ð° ÑÐ°ÑÑÐµÐ½Ðµ Ð¸Ð»Ð¸ ÑÐ¿ÐµÑÑÑÐ²Ð°Ð½Ðµ
            countDays++;
            String command = scanner.nextLine();
            double currentSum = Double.parseDouble(scanner.nextLine());

            //ÐÑÐ¾Ð²ÐµÑÑÐ²Ð°Ð¼Ðµ Ð´Ð°Ð»Ð¸ ÑÐ°ÑÑÐ¸Ð¼ Ð¸Ð»Ð¸ ÑÐ¿ÐµÑÑÑÐ²Ð°Ð¼Ðµ Ð¸ ÑÐµÑÐ¿ÐµÐºÑÐ¸Ð²Ð½Ð¾ Ð½Ð°Ð¼Ð°Ð»ÑÐ¼Ðµ Ð¸Ð»Ð¸ ÑÐ²ÐµÐ»Ð¸ÑÐ°Ð²Ð°Ð¼Ðµ Ð¿Ð°ÑÐ¸ÑÐµ Ð² ÐºÐ°ÑÐ¸ÑÐºÐ°ÑÐ°
            if(command.equals(""spend"")){
                countSpend++;
                availableMoney -= currentSum;
            }else if(command.equals(""save"")){
                availableMoney += currentSum;
                countSpend = 0;
            }

            //Ð¿ÑÐ¾Ð²ÐµÑÑÐ²Ð°Ð¼Ðµ Ð´Ð°Ð»Ð¸ Ð¿Ð°ÑÐ¸ÑÐµ Ð² ÐºÐ°ÑÐ¸ÑÐºÐ°ÑÐ° ÑÐ° ÑÑÐ°Ð½Ð°Ð»Ð¸ Ð¾ÑÑÐ¸ÑÐ°ÑÐµÐ»Ð½Ð¾ ÑÐ¸ÑÐ»Ð¾ -> Ð¿ÑÐ¸ÑÐ°Ð²Ð½ÑÐ²Ð°Ð¼Ðµ ÐºÑÐ¼ 0
            if (availableMoney < 0){
                availableMoney = 0;
            }


        }

        //ÐÑÐ¾Ð²ÐµÑÑÐ²Ð°Ð¼Ðµ countSpend == 5 -> Ð½Ðµ Ð¼Ð¾Ð¶ÐµÐ¼ Ð´Ð° ÑÐ¿ÐµÑÑÐ¸Ð¼ Ð½ÑÐ¶Ð½Ð¸ÑÐµ Ð¿Ð°ÑÐ¸
        if(countSpend < 5){
            System.out.printf(""You saved the money for %d days."", countDays);

        }


    }
}
"
umchi9Kp,pet sim 99 working free AUTO FARM | script RBX ð¥,droui,Lua,Sunday 10th of March 2024 03:34:15 AM CDT,"[[--pet sim auto farm no need for level or rank--]]

_G petlocation = true
game.petlocation(""ReplicatedStorage"").pets.petlocation = game.location(map).area20()true)"
g7mDKSgC,trigger.text,berg,C,Sunday 10th of March 2024 03:10:17 AM CDT,"<triggers>
  <trigger
   enabled=""y""
   group=""1""
   ignore_case=""y""
   keep_evaluating=""y""
   match=""* You think that *'s * * skill has improved. *""
   send_to=""12""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Metal_Gong-Dianakc-109711828.wav""
  >
  <send>
test = ""%2"" .. ""_"" .. ""%3"" ..  ""_"" .. ""%4""
SetVariable(test, (GetVariable(test) or 0) + 1)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   ignore_case=""y""
   match=""* You think that *'s * skill has improved. *""
   send_to=""12""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\gong1-94016.wav""
  >
  <send>
test = ""%2"" .. ""_"" .. ""%3""
SetVariable(test, (GetVariable(test) or 0) + 1)
Send(""ooc %2"" .. ""_"" .. ""%3"" .. ""+"")
--Send(""show wally's skills"")</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your * * skill has improved. *""
   send_to=""12""
   sequence=""100""
  >
  <send>test = ""%2"" .. ""_"" .. ""%3""
SetVariable(test , (GetVariable(test ) or 0) + 1)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your * skill has improved. *""
   send_to=""12""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Metal_Gong-Dianakc-109711828.wav""
  >
  <send>
SetVariable(""%2"" , (GetVariable(""%2"" ) or 0) + 1)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your *'* skill has improved. *""
   send_to=""12""
   sequence=""100""
  >
  <send>test = ""%2"" .. ""_"" .. ""%3""
SetVariable(test , (GetVariable(test ) or 0) + 1)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your language#* skill has improved. *""
   send_to=""12""
   sequence=""100""
  >
  <send>
SetVariable(""language_"" .. ""%2"" , (GetVariable(""language_"" ..""%2"" ) or 0) + 1)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""*You think your two-handed * skill has improved*""
   send_to=""12""
   sequence=""100""
  >
  <send>test = (""two_handed_"" .. ""%2"")
SetVariable(test , (GetVariable(test ) or 0) + 1)
Send(""ooc two_handed_%2"")</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your * skill has improved. *""
   name=""imp""
   send_to=""12""
   sequence=""101""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\gong1-94016.wav""
  >
  <send>Send(""ooc +1 %2"")
Send(""show skills %2"")
--ColourNote (""cyan"", ""blue"", GetVariable(""tell_skill""))
--output = Replace(""%2 is trash"", ""  "", ""_"", true)</send>
  </trigger>
</triggers>
"
CV0cZB90,triggers.txt,berg,C,Sunday 10th of March 2024 03:06:29 AM CDT," </trigger>
  <trigger
   enabled=""y""
   match=""*Verite * Golem's*""
   omit_from_log=""y""
   omit_from_output=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   match=""*With a loud creak, a sewer grate suddenly twists open.""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\mixkit-interface-option-select-2573.wav""
  >
  <send>enter grate</send>
  </trigger>
  <trigger
   custom_colour=""2""
   enabled=""y""
   match=""*You can't dig that way*""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""*You discharge the ring.""
   sequence=""100""
  >
  <send>stop teaching</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""*You dunk your head in the cask and * some * broth.""
   send_to=""12""
   sequence=""100""
  >
  <send>SetVariable ( ""food"", ""%3"" )
Note('%3')</send>
  </trigger>
  <trigger
   enabled=""y""
   keep_evaluating=""y""
   match=""*You eat * *.*""
   send_to=""12""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\bell-ringing-05.wav""
  >
  <send>SetVariable ( ""food"", ""%3"" )
Note('%3')</send>
  </trigger>
  <trigger
   enabled=""y""
   keep_evaluating=""y""
   match=""*You eat * *s.*""
   send_to=""12""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\bell-ringing-05.wav""
  >
  <send>SetVariable ( ""food"", ""%3"" )
Note('%3')</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""*You eat part of*""
   send_to=""12""
   sequence=""100""
  >
  <send>SetVariable ( ""food"", ""gaps"" )
</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""*You finish studying the book.""
   omit_from_output=""y""
   sequence=""100""
  >
  <send>show skills scroll reading
show skills language#magic
study book</send>
  </trigger>
  <trigger
   group=""invoke""
   keep_evaluating=""y""
   match=""*You have written * scroll of *.""
   send_to=""12""
   sequence=""100""
  >
  <send>Send (""ooc %2 scroll"")
Send (""invoke "" .. ""%3"" .. "" !"")

</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""*You think your two-handed * skill has improved*""
   send_to=""12""
   sequence=""100""
  >
  <send>test = (""two_handed_"" .. ""%2"")
SetVariable(test .. ""_skill"", (GetVariable(test .. ""_skill"") or 0) + 1)
Send(""ooc two_handed_%2"")</send>
  </trigger>
  <trigger
   group=""chandlery""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""rose""
   sequence=""100""
  >
  <send>buy pink rose
craft dried rose
get rose
put rose in pack
</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""wine""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""champagne""
   sequence=""100""
  >
  <send>craft white wine
craft champagne
get bottle
sip bottle
pour bottle
drop bottle
show aptitude:brewing</send>
  </trigger>
  <trigger
   group=""other""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""sand""
   sequence=""100""
  >
  <send>search shrubs</send>
  </trigger>
  <trigger
   group=""bananas""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""banana""
   sequence=""100""
  >
  <send>cast ro zuzu</send>
  </trigger>
  <trigger
   group=""casting""
   keep_evaluating=""y""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""ods""
   send_to=""12""
   sequence=""100""
  >
  <send>--Send (""fill waterskin from cask"")
--Send (""get 1 pinch of gemstone powder"")
--Send (""get 1 egg from wagon"")
--Send (""get 2 fulus from wagon"")

--Send (""get rose"")
amount = GetVariable(""spell"") .. ""_skill""
SetVariable(""number"", (GetVariable(""number"") or 0) + 1)
--ColourNote (""cyan"", ""blue"", GetVariable(amount))
ColourNote (""cyan"", ""blue"", GetVariable (""jonathan_s_fareyes_skill""))
--refresh_other_skill
Send (""show skills "" .. GetVariable(""spell""))
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )

</send>
  </trigger>
  <trigger
   group=""bushy""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""scroll2""
   sequence=""100""
  >
  <send>sniff scrolls
get blank scroll
inscribe je</send>
  </trigger>
  <trigger
   group=""casting""
   keep_evaluating=""y""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""casting""
   send_to=""12""
   sequence=""100""
  >
  <send>--Send (""get gusak"")
--Send (""get 1 pinch of gemstone powder"")
--Send (""get 2 fulus from wagon"")
--Send (""get 1 egg from wagon"")
--Send(""fill vial with holy water"")
--Send (""get rose"")
amount = GetVariable(""spell"") .. ""_skill""
--SetVariable(""number"", (GetVariable(""number"") or 0) + 1)
--ColourNote (""cyan"", ""blue"", GetVariable(amount))
ColourNote (""cyan"", ""blue"",GetVariable(""jonathan_s_fareyes_skill"")) 
Send (""show skills "" .. GetVariable(""spell""))
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )

</send>
  </trigger>
  <trigger
   group=""casting""
   keep_evaluating=""y""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""tell""
   send_to=""12""
   sequence=""100""
  >
  <send>Send (""show skills spell casting"")
Send (""show skills language#magic"")
Send (""show skills "" .. GetVariable(""spell""))
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
ColourNote (""cyan"", ""blue"", GetVariable(""tell_skill""))



</send>
  </trigger>
  <trigger
   group=""res""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""res""
   send_to=""12""
   sequence=""100""
  >
  <send>require ""wait""

amount = GetVariable(""spell"") .. ""_skill""
ColourNote (""cyan"", ""blue"", GetVariable(""resurrection_skill""))
wait.make (function ()
Send (""get boiled egg"")
Send (""show skills resurrection"")
Send (""get 2 coins"")
wait.time(1)
Send (""cast ! resurrection""  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )


end)</send>
  </trigger>
  <trigger
   group=""bushy""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""bushy""
   sequence=""100""
  >
  <send>harvest 10</send>
  </trigger>
  <trigger
   group=""aura""
   match=""*You're bright-eyed and bushy-tailed.""
   sequence=""100""
  >
  <send>channel 30 heart
challenge violet</send>
  </trigger>
  <trigger
   group=""engrave""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""engrave""
   send_to=""12""
   sequence=""100""
  >
  <send>Send(""get plaque"")
Note(GetVariable(""words""))
Send(""engrave "" .. GetVariable(""words"") .. "" on plaque"")
Send(""put plaque in trash"")</send>
  </trigger>
  <trigger
   group=""conch""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""conch""
   sequence=""100""
  >
  <send>dig</send>
  </trigger>
  <trigger
   group=""oil""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""oil""
   sequence=""100""
  >
  <send>craft olive oil
get bucket
pour bucket into oil cask
pour bucket
drop bucket</send>
  </trigger>
  <trigger
   group=""smithy""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""smithy""
   send_to=""12""
   sequence=""100""
  >
  <send>for i = 1, 8 do
Send(""craft iron"")

    --Send (""get (floor) plaque"")
    --Send (""put plaque in wagon"")
end

     --Send (""get (floor) goblets"")
     --Send (""put goblets in cart"")
Send (""pump fire"")
--Send (""pump fire"")
--Send (""get (floor) 50 ingots of copper"")
--Send (""put copper in bin"")
--Send (""cast ro braman"")</send>
  </trigger>
  <trigger
   group=""horse""
   match=""*You're bright-eyed and bushy-tailed.""
   sequence=""100""
  >
  <send>strip chuck of harness
rig chuck with harness
strip chuck of harness
rig chuck with harness</send>
  </trigger>
  <trigger
   group=""other""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""other""
   sequence=""100""
  >
  <send>search shrubs</send>
  </trigger>
  <trigger
   group=""smithy""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""ore""
   send_to=""12""
   sequence=""100""
  >
  <send>
for i = 1, 10 do
Send(""craft metal skull size=300"")
Send(""get skull"")
Send(""put skull in wagon"")
end
Send(""pump fire"")
Send(""pump fire"")
Send(""get (floor) skull"")
Send(""put skull in wagon"")
--Send(""cast ro @400 uthreg"")</send>
  </trigger>
  <trigger
   group=""lumber""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""lumber""
   send_to=""12""
   sequence=""100""
  >
  <send>Send (""lumber redwood size=18"")
EnableTrigger(""lumber"", false)  -- disable trigger</send>
  </trigger>
  <trigger
   group=""gather""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""gather""
   sequence=""100""
  >
  <send>gather bananas</send>
  </trigger>
  <trigger
   group=""smithy""
   keep_evaluating=""y""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""talisman""
   send_to=""12""
   sequence=""100""
  >
  <send>Send(""craft leather thong"")
for i = 1, 5 do
Send(""craft talisman pattern=dragon"")
end
Send(""pump forge"")
--Send(""pump forge"")
--Send(""pump forge"")
--Send(""nudge saradas"")
for i = 1, 5 do
Send(""get (floor) talisman"")
Send(""put talisman in wally's bags"")
end
</send>
  </trigger>
  <trigger
   group=""bushy""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""sheep""
   sequence=""100""
  >
  <send>craft malted barley
craft malted barley
craft malted barley
craft malted barley
</send>
  </trigger>
  <trigger
   group=""broth""
   match=""*You're bright-eyed and bushy-tailed.""
   name=""broth""
   sequence=""100""
  >
  <send>strip ella of harness
rig ella with harness
strip ella of harness
rig ella with harness
strip ella of harness
rig ella with harness
strip ella of harness
rig ella with harness</send>
  </trigger>
  <trigger
   group=""bushy""
   match=""*You're somewhat distracted.""
   sequence=""100""
  >
  <send>cast ! msa @50 command=Kitty</send>
  </trigger>
  <trigger
   match=""*Your aura appears to be octarine.""
   sequence=""100""
  >
  <send>channel 25 rikter</send>
  </trigger>
  <trigger
   match=""*Your aura appears to be scintillating.""
   sequence=""100""
  >
  <send>channel 20 gate</send>
  </trigger>
  <trigger
   match=""*Your aura appears to be scintillating.""
   send_to=""12""
   sequence=""100""
  >
  <send>--Send (""show skills spell casting"")
--Send (""get vial"")
amount = GetVariable(""spell"") .. ""_skill""
SetVariable(""number"", (GetVariable(""number"") or 0) + 1)
ColourNote (""cyan"", ""blue"", GetVariable(amount))
--refresh_other_skill
Send (""show skills "" .. GetVariable(""spell""))
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )</send>
  </trigger>
  <trigger
   group=""underdeep""
   match=""*Your aura appears to be scintillating.""
   send_to=""12""
   sequence=""100""
  >
  <send>Send (""fill skin from cask"")
--Send (""get vial"")
amount = GetVariable(""spell"") .. ""_skill""
SetVariable(""number"", (GetVariable(""number"") or 0) + 1)
--ColourNote (""cyan"", ""blue"", GetVariable(amount))
--refresh_other_skill
Send (""show skills "" .. GetVariable(""spell""))
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )

</send>
  </trigger>
  <trigger
   match=""*Your aura appears to be scintillating.""
   sequence=""100""
  >
  <send>channel 30 Darlanyu</send>
  </trigger>
  <trigger
   custom_colour=""17""
   enabled=""y""
   group=""oil""
   ignore_case=""y""
   match=""*Your costrel shimmers briefly.*""
   name=""chrism""
   sequence=""100""
   other_text_colour=""dodgerblue""
   other_back_colour=""magenta""
  >
  <send>open costrel 
pour costrel into chrism cask
fill costrel with olive oil
close costrel
say chrism made</send>
  </trigger>
  <trigger
   group=""avoid""
   ignore_case=""y""
   match=""*avoid'""
   name=""girl""
   send_to=""12""
   sequence=""100""
  >
  <send>
require ""wait""
wait.make (function ()
  EnableTrigger(""girl"", false)  -- enable trigger
  
  Send (""say ella row 3"")
  wait.time (5)
  --Send (""show skills spell casting"")
  Send (""say ella row 2"")
  --wait.time (0)
  --Send (""set mind to open"")
  EnableTrigger(""boy"", true)  -- enable trigger
  EnableTrigger(""girl"", false) --disable trigger
end)</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""avoid""
   ignore_case=""y""
   match=""*avoid'""
   name=""boy""
   send_to=""12""
   sequence=""100""
  >
  <send>
require ""wait""
wait.make (function ()
  EnableTrigger(""boy"", false)  -- enable trigger
  --Note(debug)
  Send (""say wally row 3"")
  wait.time (5)
  --Send (""show skills spell casting"")
  Send (""say wally row 2"")
  EnableTrigger(""girl"", true)  -- enable trigger
  --EnableTrigger(""power1"", false)  -- enable trigger
  EnableTrigger(""boy"", false) --disable trigge
end)</send>
  </trigger>
  <trigger
   group=""mining""
   match=""*bushy-tail*""
   sequence=""100""
  >
  <send>gather flint</send>
  </trigger>
  <trigger
   group=""lumber""
   match=""*enough for firewood!""
   send_to=""12""
   sequence=""100""
  >
  <send>
EnableTrigger(""lumber"", true)  -- disable trigger</send>
  </trigger>
  <trigger
   keep_evaluating=""y""
   match=""*exit: *""
   send_to=""12""
   sequence=""100""
  >
  <send>

win = GetPluginID () .. "":exits""
font = ""f""

WindowCreate (win, 0, 0, 1, 1, 4, 0, 0)

WindowFont (win, font, ""Courier"", 10, true)

height = WindowFontInfo (win, font, 1)  + 10

width = WindowTextWidth (win, font, ""%0"") + 10

WindowCreate (win, 0, 0, width, height, 4, 0, ColourNameToRGB ""gray"")

WindowText (win, font, ""%0"", 5, 5, 0, 0, ColourNameToRGB (""yellow""))

WindowShow (win, true)

</send>
  </trigger>
  <trigger
   enabled=""y""
   keep_evaluating=""y""
   match=""*exits: *""
   send_to=""12""
   sequence=""100""
  >
  <send>
win = GetPluginID () .. "":exits""
font = ""f""

WindowCreate (win, 0, 0, 1, 1, 4, 0, 0)

WindowFont (win, font, ""Sans"", 10, true)

height = WindowFontInfo (win, font, 1)  + 10

width = WindowTextWidth (win, font, ""%0"") + 10

WindowCreate (win, 0, 0, width, height, 4, 0, ColourNameToRGB ""gray"")

WindowText (win, font, ""%0"", 5, 5, 0, 0, ColourNameToRGB (""yellow""))

WindowShow (win, true)

</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""*falls to the ground.""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Tree Falling In Woods-SoundBible.com-573070424.wav""
  >
  </trigger>
  <trigger
   ignore_case=""y""
   match=""*moot*""
   send_to=""12""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Dragon Roaring-SoundBible.com-213390944.wav""
  >
  <send>FlashIcon ( )</send>
  </trigger>
  <trigger
   custom_colour=""9""
   enabled=""y""
   match=""*more metal of any type here*""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""*says (OOC),'skills*'""
   send_to=""12""
   sequence=""100""
  >
  <send>name = string.gsub (""%2"", ""^."", string.upper)
Send (""ooc       "" .. name .. ""'s Skills "")
Send (""ooc      Training  "" .. GetVariable(""%2"" .. ""_training""))
Send (""ooc      Speed     "" .. GetVariable(""%2"" .. ""_attack_speed""))
Send (""ooc      Offensive "" .. GetVariable(""%2"" .. ""_offensive""))
Send (""ooc      Daring    ""    .. GetVariable(""%2"" .. ""_daring""))
Send (""ooc      Aim blows "" .. GetVariable(""%2"" .. ""_aim_blows""))
Send (""ooc      Parry     ""    .. GetVariable(""%2"" .. ""_parry""))
Send (""ooc      Control   ""   .. GetVariable(""%2"" .. ""_control""))
Send (""ooc      Brawling  ""  .. GetVariable(""%2"" .. ""_brawling""))
Send (""ooc      Fighting  ""  .. GetVariable(""%2"" .. ""_fighting""))
Send (""ooc      Split     ""  .. GetVariable(""%2"" .. ""_split_defense""))
Send (""ooc      MA        ""       .. GetVariable(""%2"" .. ""_multiple_attacks""))
Send (""ooc      Dodge     ""       .. GetVariable(""%2"" .. ""_dodge""))</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   match=""*the area is a stone fountain*""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\rainforest_ambience-GlorySunz-1938133500.wav""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   match=""*toward you from the*""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""lumber""
   match=""*tree falls to the ground.""
   send_to=""12""
   sequence=""100""
  >
  <send>Send (""get trees"")
Send (""put trees in wagon"")
EnableTrigger(""lumber"", true)  -- disable trigger</send>
  </trigger>
  <trigger
   custom_colour=""17""
   enabled=""y""
   match=""*vanishes in a puff of white smoke!""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\quick.wav""
   other_text_colour=""deeppink""
   other_back_colour=""darkslateblue""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""*voice seems to say: *""
   sequence=""100""
  >
  </trigger>
  <trigger
   match=""&gt; * says in *, 'Ro moot'""
   send_to=""12""
   sequence=""100""
  >
  <send>

local name = Trim (""%1"")

name = string.lower (name)  -- case-insensitive

-- get friends variable
assert (loadstring (GetVariable (""friends"") or """")) ()

friends = friends or {}  -- make sure table exists

if friends [name] then
   Send (""cast ro %1"") 
   ColourNote (""white"", """", ""From %1 - %2"")
else 
   Send (""say NO!"")
   ColourNote (""red"", """", ""%1 tells you %2"")
end -- in table

</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""&gt; None of the power got outside your head.""
   omit_from_output=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""&gt; You're unconscious!  You can't do that!""
   omit_from_output=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   match=""A mental touch tells you: *""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\mixkit-unlock-game-notification-253.wav""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   match=""A mental touch tells you:*""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\glass_ping-Go445-1207030150.wav""
  >
  <send>
</send>
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   keep_evaluating=""y""
   match=""Anny""
   regexp=""y""
   repeat=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""As you inscribe the last word, power infuses the scroll!""
   sequence=""100""
  >
  <send>show skills scroll writing</send>
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   keep_evaluating=""y""
   match=""Banjo""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   keep_evaluating=""y""
   match=""Ben""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   keep_evaluating=""y""
   match=""Bevy""
   regexp=""y""
   repeat=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   keep_evaluating=""y""
   match=""Boy""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   keep_evaluating=""y""
   match=""Cevy""
   regexp=""y""
   repeat=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""Chuck leaves with a festive jingling to the *""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\trotting.wav""
  >
  </trigger>
  <trigger
   custom_colour=""7""
   match=""Consummate""
   regexp=""y""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\medium_rainstorm-Mike_Koenig-1134528361.wav""
  >
  </trigger>
  <trigger
   match=""Elendir lays his hands on you, and you feel refreshed.""
   sequence=""100""
  >
  <send>cast ro elendir</send>
  </trigger>
  <trigger
   custom_colour=""7""
   match=""Excellent""
   regexp=""y""
   send_to=""2""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Dragon Roaring-SoundBible.com-213390944.wav""
  >
  <send>================585=====================</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   match=""Excuse yourself!""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\burp-20581.wav""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   keep_evaluating=""y""
   match=""Girl""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   keep_evaluating=""y""
   match=""Healer's Hall""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Evil_Laugh_1-Timothy-64737261.wav""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   keep_evaluating=""y""
   match=""Hooty""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""Hooty asks to join your party.""
   sequence=""100""
  >
  <send>admit hooty</send>
  </trigger>
  <trigger
   custom_colour=""7""
   enabled=""y""
   match=""It is smooth.""
   sequence=""100""
  >
  <send>say thats better </send>
  </trigger>
  <trigger
   group=""channel""
   match=""Joren lays his hands on you, and you feel refreshed.""
   name=""channel""
   send_to=""12""
   sequence=""100""
  >
  <send>Send (""conc"")
for i = 1, 12
 do
 Send (""southwest"")
end
Send (""show skills movement"")
--Send (""show skills spell casting"")
--Send (""show skills channelling"")</send>
  </trigger>
  <trigger
   enabled=""y""
   keep_evaluating=""y""
   match=""Lynx asks to join your party.""
   sequence=""100""
  >
  <send>
admit all</send>
  </trigger>
  <trigger
   enabled=""y""
   keep_evaluating=""y""
   match=""Lynx asks to*""
   sequence=""100""
  >
  <send>admit all
say 1</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""Moot farts, it sounds sloppy.""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\wet-fart-6139.wav""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   match=""Moot lets go a ripper.""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Silly_Farts-Joe-1473367952.wav""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""Nazir asks*""
   omit_from_output=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   match=""Nim regains consciousness.""
   sequence=""100""
  >
  <send>channel 5 nim</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""Nuri gives a perfume jar to you.""
   sequence=""100""
  >
  <send>put jar in wagon
buy perfume jar</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   match=""Smithy""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\service-bell_daniel_simion.wav""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   keep_evaluating=""y""
   match=""Tang""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""The ground trembles and you hear a low rumble to the *!""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Tidal Wave-SoundBible.com-243524385.wav""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   match=""Vestibule""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Night_Sounds_-_Crickets-Lisa_Redfern-591005346.wav""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   ignore_case=""y""
   keep_evaluating=""y""
   match=""Wally""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   ignore_case=""y""
   keep_evaluating=""y""
   match=""Weeone""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   match=""Wooded Clearing""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Wind Blowing-SoundBible.com-1112962342.wav""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""You dig up a conch!""
   sequence=""100""
  >
  <send>get shells</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""other""
   keep_evaluating=""y""
   match=""You find *!""
   sequence=""100""
  >
  <send>get %1
</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""other""
   keep_evaluating=""y""
   match=""You find a * of *!""
   sequence=""100""
  >
  <send>get %1</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""other""
   keep_evaluating=""y""
   match=""You find a *!""
   sequence=""100""
  >
  <send>get %1
</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""You finish looking for apricot seeds.""
   sequence=""100""
  >
  <send>gather apricot seeds</send>
  </trigger>
  <trigger
   group=""quail_eggs""
   match=""You finish looking for quail eggs.""
   name=""quial""
   sequence=""100""
  >
  <send>
gather quail eggs</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""You finish looking for tomato seeds.""
   sequence=""100""
  >
  <send>gather tomato seeds</send>
  </trigger>
  <trigger
   group=""power""
   match=""You finish practicing.""
   name=""adjusting""
   send_to=""12""
   sequence=""100""
  >
  <send>

SetVariable (""tempcount"",GetVariable(""tempcount"") + 1)
if tonumber (GetVariable (""tempcount"")) &gt;= 3 then

  SetVariable (""aura"",GetVariable(""aura"") + 1)
  if tonumber (GetVariable (""aura"")) &gt;= 58 then
   SetVariable (""aura"",55)
  end
  SetVariable (""tempcount"",0)
end</send>
  </trigger>
  <trigger
   custom_colour=""9""
   enabled=""y""
   keep_evaluating=""y""
   make_underline=""y""
   match=""You finish practicing.""
   sequence=""100""
  >
  </trigger>
  <trigger
   group=""casting""
   keep_evaluating=""y""
   match=""You finish practicing.""
   send_to=""12""
   sequence=""100""
  >
  <send>require ""wait""
wait.make (function ()

wait.time(3)
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )


end)</send>
  </trigger>
  <trigger
   group=""casting""
   keep_evaluating=""y""
   match=""You finish practicing.""
   name=""auracount""
   send_to=""12""
   sequence=""100""
  >
  <send>
ColourNote (""cyan"", ""blue"", GetVariable(""aura""))
SetVariable(""aura"", (GetVariable(""aura"") or 0) + 1)
--count = GetVariable(""counter"")
--Note (GetVariable(""counter""))
if tonumber(GetVariable(""aura"")) &gt;= 128 then
 SetVariable(""aura"", 125)
end</send>
  </trigger>
  <trigger
   group=""invoke""
   match=""You finish the incantation and the spell fades from your scroll.""
   send_to=""12""
   sequence=""100""
  >
  <send>
EnableTrigger(""inscribe"",true)</send>
  </trigger>
  <trigger
   group=""bushy""
   match=""You have written a virtually flawless scroll of *""
   name=""scrolls""
   sequence=""100""
  >
  <send>sniff scrolls
get blank scroll
inscribe gf</send>
  </trigger>
  <trigger
   group=""dodge""
   ignore_case=""y""
   match=""You lay your hands on Chuck and he appears refreshed.""
   sequence=""100""
  >
  <send>say chuck row 2</send>
  </trigger>
  <trigger
   match=""You lay your hands on Garen and he appears refreshed.""
   send_to=""12""
   sequence=""100""
  >
  <send>Send (""show skills spell casting"")
Send (""show skills language#magic"")
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""show skills "" .. GetVariable(""spell""))
Send (""channel 5 garen"")
ColourNote (""cyan"", ""blue"", GetVariable(""tell_skill""))</send>
  </trigger>
  <trigger
   match=""You lay your hands on Nim and she appears refreshed.""
   name=""craftFresh""
   send_to=""12""
   sequence=""100""
  >
  <send>--Send (""fill waterskin from cask"")
--Send (""get 1 pinch of gemstone powder"")
--Send (""get 1 egg from wagon"")
--Send (""get 2 fulus from wagon"")

--Send (""get rose"")
amount = GetVariable(""spell"") .. ""_skill""
SetVariable(""number"", (GetVariable(""number"") or 0) + 1)
--ColourNote (""cyan"", ""blue"", GetVariable(amount))
ColourNote (""cyan"", ""blue"", GetVariable (""orella_s_deep_storage_skill""))
--refresh_other_skill
Send (""show skills "" .. GetVariable(""spell""))
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )
Send (""cast ! "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura"") .. "" "" .. GetVariable(""target"") )</send>
  </trigger>
  <trigger
   match=""You lay your hands on Radulf and he appears refreshed.""
   sequence=""100""
  >
  <send>strip ella of harness
rig ella with harness
strip ella of harness
rig ella with harness
strip ella of harness
rig ella with harness</send>
  </trigger>
  <trigger
   match=""You lay your hands on Roy and she appears refreshed.""
   sequence=""100""
  >
  <send>say roy set conc to auto
say roy set conc to auto
say roy set conc to auto
say roy set conc to auto
say roy set conc to auto
say roy set conc to auto</send>
  </trigger>
  <trigger
   match=""You lay your hands on Tang and he appears refreshed.""
   sequence=""100""
  >
  <send>say tang set conc to auto
say tang set conc to auto
say tang set conc to auto</send>
  </trigger>
  <trigger
   match=""You lay your hands on Trampin and he appears refreshed.""
   sequence=""100""
  >
  <send>cast ro jem</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""You lay your hands on Yagana and she appears refreshed.""
   sequence=""100""
  >
  <send>cast ro trampin</send>
  </trigger>
  <trigger
   match=""You lay your hands on Yanno and he appears refreshed.""
   sequence=""100""
  >
  <send>craft straw basket
craft straw basket
craft straw basket
craft straw basket
craft straw basket
</send>
  </trigger>
  <trigger
   match=""You lay your hands on Zelan and she appears refreshed.""
   sequence=""100""
  >
  <send>cast ro panda</send>
  </trigger>
  <trigger
   match=""You lay your hands on Zelan and she appears refreshed.""
   sequence=""100""
  >
  <send>cast ro rita</send>
  </trigger>
  <trigger
   ignore_case=""y""
   match=""You lay your hands on telly and he appears refreshed.""
   sequence=""100""
  >
  <send>craft wood orb size=1
craft wood orb size=1
craft wood orb size=1
craft wood orb size=1
craft wood orb size=1
craft wood orb size=1
craft wood orb size=1
craft wood orb size=1
craft wood orb size=1
craft wood orb size=1
craft wood orb size=1




</send>
  </trigger>
  <trigger
   ignore_case=""y""
   match=""You lay your hands on uthreg and he appears refreshed.""
   sequence=""100""
  >
  <send>cast ro @150 stick</send>
  </trigger>
  <trigger
   ignore_case=""y""
   match=""You lay your hands on yanno and he appears refreshed.""
   sequence=""100""
  >
  <send>split 1 sheep from flock
roundup sheep,flock
roundup sheep,flock
split 1 sheep from flock
roundup sheep,flock
roundup sheep,flock</send>
  </trigger>
  <trigger
   match=""You make a mistake and everything comes crashing down!""
   sequence=""100""
  >
  <send>cast ro caitlyn</send>
  </trigger>
  <trigger
   custom_colour=""11""
   enabled=""y""
   keep_evaluating=""y""
   match=""You think you would have succeeded.""
   sequence=""100""
  >
  </trigger>
  <trigger
   group=""invoke""
   keep_evaluating=""y""
   match=""You're bright-eyed and bushy-tailed.""
   name=""inscribe""
   regexp=""y""
   send_to=""12""
   sequence=""100""
  >
  <send>Send (""show skills spell casting"")
Send (""show skills scroll writing"")
ColourNote (""cyan"", ""blue"", GetVariable (""scroll_writing_skill""))
Send (""inscribe "" .. GetVariable(""spell"")  .. "" @"" .. GetVariable(""aura""))
EnableTrigger(""inscribe"",false)</send>
  </trigger>
  <trigger
   match=""You're somewhat distracted.""
   sequence=""100""
  >
  <send>gather quail eggs</send>
  </trigger>
  <trigger
   enabled=""y""
   match=""Zuzu climbs up your leg.""
   sequence=""100""
  >
  <send>emote shakes his leg.</send>
  </trigger>
  <trigger
   group=""assist""
   lines_to_match=""3""
   keep_evaluating=""y""
   match=""^There .+? exit[s:]+ ([A-Za-z ,:\n-]+\.)""
   multi_line=""y""
   name=""room_scn""
   regexp=""y""
   send_to=""12""
   sequence=""100""
  >
  <send>-- Set exits_line to the last line in the buffer
local exits_line = GetLinesInBufferCount ()
 
-- Get the last line in the buffer
local curline = GetLineInfo (exits_line, 1)
 
-- Strip new line from curline
curline = string.gsub (curline, ""[\\-\\n]"", """")
 
-- Get the whole match match_str for the trigger
local match_str = world.GetTriggerWildcard (""room_scn"", ""0"") 
-- Strip new line from match_str
match_str = string.gsub (match_str, ""[\\-\\n]"", """")
 
-- If the curline is not in the match_str, end the script
if (string.find (match_str, curline) == nil) then return end
 
-- If curline is not the last part of the match, end the script
if (string.find (curline, ""\."") == nil) then return end
 
local exits_end = exits_line
-- If the curline isnt also the first line, decrement exits_line
if (string.find (curline, ""There"") == nil) then
  exits_line = exits_line -1
  -- If the previous line also isn't the first line, decrement again
  if (string.find (GetLineInfo (exits_line, 1), ""There"") == nil) then exits_line = exits_line -1 end
end
GetRoomDetails (exits_line, match_str)</send>
  </trigger>
  <trigger
   back_colour=""8""
   bold=""y""
   keep_evaluating=""y""
   match=""^[^.!]*$""
   match_back_colour=""y""
   match_bold=""y""
   match_inverse=""y""
   match_italic=""y""
   match_text_colour=""y""
   regexp=""y""
   send_to=""12""
   sequence=""100""
   text_colour=""15""
  >
  <send>Send (""ooc room name : "" .. '%0')</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   match=""a wild ox.""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\cowbell_rattle_2-89683.wav""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   match=""aim blows: *""
   sequence=""100""
  >
  <send>ooc aim blows: %1</send>
  </trigger>
  <trigger
   custom_colour=""17""
   enabled=""y""
   keep_evaluating=""y""
   match=""amulet""
   regexp=""y""
   repeat=""y""
   sequence=""100""
   other_text_colour=""white""
   other_back_colour=""navy""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""sounds""
   ignore_case=""y""
   match=""an elephant.""
   sequence=""100""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\Elephant.wav""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   ignore_case=""y""
   keep_evaluating=""y""
   match=""aosoth""
   regexp=""y""
   repeat=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""13""
   enabled=""y""
   keep_evaluating=""y""
   match=""arrives""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""7""
   enabled=""y""
   match=""avoid ""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   ignore_case=""y""
   keep_evaluating=""y""
   match=""cherry""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   ignore_case=""y""
   keep_evaluating=""y""
   match=""chuck""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   keep_evaluating=""y""
   match=""control:  *""
   name=""skills_display""
   sequence=""100""
  >
  <send>ooc control:       %1</send>
  </trigger>
  <trigger
   custom_colour=""11""
   enabled=""y""
   ignore_case=""y""
   keep_evaluating=""y""
   match=""corpse""
   regexp=""y""
   repeat=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   match=""daring: *""
   sequence=""100""
  >
  <send>ooc daring: %1</send>
  </trigger>
  <trigger
   match=""daring:*""
   sequence=""100""
  >
  <send>ooc daring: %1</send>
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   ignore_case=""y""
   keep_evaluating=""y""
   match=""ella""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   match=""fighting: *""
   sequence=""100""
  >
  <send>ooc fighting: %1</send>
  </trigger>
  <trigger
   custom_colour=""7""
   colour_change_type=""1""
   enabled=""y""
   ignore_case=""y""
   keep_evaluating=""y""
   make_underline=""y""
   match=""flickering rift""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   match=""multiple attacks: *""
   sequence=""100""
  >
  <send>ooc multiple attacks: %1</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   match=""multiple attacks: *""
   sequence=""100""
  >
  <send>ooc multiple attacks: %1</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   match=""offensive: *""
   sequence=""100""
  >
  <send>ooc offensive: %1</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   keep_evaluating=""y""
   match=""parry: *""
   name=""skills""
   sequence=""100""
  >
  <send>ooc parry %1</send>
  </trigger>
  <trigger
   custom_colour=""5""
   colour_change_type=""1""
   enabled=""y""
   match=""pearl""
   regexp=""y""
   repeat=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""7""
   match=""rasping""
   regexp=""y""
   sequence=""100""
  >
  <send>say snottt sooooo gooot!!!!!!!</send>
  </trigger>
  <trigger
   custom_colour=""5""
   enabled=""y""
   ignore_case=""y""
   keep_evaluating=""y""
   match=""roy""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   match=""rp""
   sequence=""100""
  >
  <send>retire pick</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   match=""shield use: *""
   sequence=""100""
  >
  <send>ooc shield use: %1</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   match=""split defense: *""
   sequence=""100""
  >
  <send>ooc split defense: %1</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   keep_evaluating=""y""
   match=""split defense: *""
   sequence=""100""
  >
  <send>ooc split defense: %1</send>
  </trigger>
  <trigger
   enabled=""y""
   group=""skills""
   match=""sword: *""
   sequence=""100""
  >
  <send>ooc sword: %1</send>
  </trigger>
  <trigger
   custom_colour=""8""
   enabled=""y""
   ignore_case=""y""
   match=""the blue roan cob""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   custom_colour=""8""
   enabled=""y""
   match=""the skewbald pony""
   regexp=""y""
   sequence=""100""
  >
  </trigger>
  <trigger
   enabled=""y""
   group=""1""
   keep_evaluating=""y""
   match=""* You think your * skill has improved. *""
   name=""imp""
   send_to=""12""
   sequence=""101""
   sound=""C:\Program Files (x86)\MUSHclient\sounds\gong1-94016.wav""
  >
  <send>Send (""ooc +1 %2"")
--output = Replace(""%2 is trash"", ""  "", ""_"", true)</send>
  </trigger>
  <trigger
   group=""weights""
   lines_to_match=""3""
   keep_evaluating=""y""
   match=""You finish practicing.""
   regexp=""y""
   send_to=""12""
   sequence=""110""
  >
  <send>ColourNote (""red"", ""blue"", ""finnish "" .. GetVariable(""misses""))
if tonumber(GetVariable(""misses"")) &gt;=2  then
     SetVariable(""wins"",0)
     --Send(""put 5 weights in bin"")
     

end


if tonumber(GetVariable(""misses"")) &gt;= 3 then
     SetVariable(""wins"",0)
     SetVariable(""misses"",0)
     Send(""put 6 weights in bin"")
     --SetVariable(""aura"", (GetVariable(""aura"") or 0) +1)

     
end



SetVariable(""misses"", (GetVariable(""misses"") or 0) + 1)</send>
  </trigger>
  <trigger
   group=""aura""
   lines_to_match=""3""
   keep_evaluating=""y""
   match=""You finish practicing.""
   regexp=""y""
   send_to=""12""
   sequence=""110""
  >
  <send>
SetVariable(""govener"", (GetVariable(""govener"") or 0) + 1)
--ColourNote (""red"", ""blue"", GetVariable(""misses""))
if tonumber(GetVariable(""govener"")) &gt;= 3 then
     SetVariable(""wins"",1)
     SetVariable(""govener"",1)
     SetVariable(""aura"", (GetVariable(""aura"") or 0) + 1)
     

end



ColourNote (""red"", ""blue"", ""finnish "" .. GetVariable(""misses""))

SetVariable(""misses"", (GetVariable(""misses"") or 0) + 1)</send>
  </trigger>
  <trigger
   colour_change_type=""1""
   group=""weights""
   lines_to_match=""2""
   keep_evaluating=""y""
   match=""You think you would have succeeded.""
   regexp=""y""
   send_to=""12""
   sequence=""110""
  >
  <send>
ColourNote (""red"", ""blue"", ""succeeds "" .. GetVariable(""wins""))
--SetVariable(""govener"",1)
count = GetVariable(""counter"")
SetVariable(""wins"", (GetVariable(""wins"") or 0) +1)
SetVariable(""misses"",1)

if tonumber(GetVariable(""wins"")) &gt;= 4 then
     SetVariable(""wins"",0)
    
     SetVariable(""govener"",1)
     Send (""get 15 weights"")
     --SetVariable(""aura"", (GetVariable(""aura"") or 0) -2)
end</send>
  </trigger>
  <trigger
   group=""aura""
   lines_to_match=""2""
   keep_evaluating=""y""
   match=""You think you would have succeeded.""
   regexp=""y""
   send_to=""12""
   sequence=""110""
  >
  <send>
--ColourNote (""red"", ""blue"", GetVariable(""govener""))
ColourNote (""red"", ""blue"", GetVariable(""wins""))
SetVariable(""govener"", (GetVariable(""govener"") or 0) - 1)
--SetVariable(""govener"",1)
count = GetVariable(""counter"")
SetVariable(""wins"", (GetVariable(""wins"") or 0) + 1)
SetVariable(""misses"",0)

if tonumber(GetVariable(""wins"")) &gt;= 4 then
     SetVariable(""wins"",1)
    
     SetVariable(""govener"",1) 
     SetVariable(""aura"", (GetVariable(""aura"") or 0) - 1)
end
Send (""show skills "" .. GetVariable(""spell""))
Note (GetVariable(""aura""))</send>
  </trigger>
  <trigger
   group=""forum""
   lines_to_match=""2""
   match=""\AYou eat some food\.\n(?!You are full\.).*\Z""
   multi_line=""y""
   regexp=""y""
   send_to=""2""
   sequence=""110""
  >
  <send>********* Eaten.</send>
  </trigger>
  <trigger
   group=""forum""
   lines_to_match=""2""
   match=""\AYou eat some food\.\nYou are full\.\Z""
   multi_line=""y""
   regexp=""y""
   send_to=""2""
   sequence=""110""
  >
  <send>********* Eaten and full.</send>
  </trigger>
</triggers>"
hYenBX3y,ButtonCard confirmation,Mat68,YAML,Sunday 10th of March 2024 01:54:41 AM CDT,"type: custom:button-card
layout: icon_name_state2nd
entity: switch.sequenza_accensione
name: Accendi o spegni
show_icon: true
show_state: false
icon: mdi:power
styles:
  grid:
    - grid-template-columns: 48px auto
  icon:
    - padding: 0px 0px
    - height: 30px
    - width: 30px
  card:
    - '--ha-card-background': rgba(0, 0, 0, 0.0)
    - '--ha-card-box-shadow': none
  state:
    - padding: 0px 10px
    - justify-self: start
    - font-family: Roboto, sans-serif
    - font-size: 15px
  name:
    - padding: 0px 10px
    - justify-self: start
    - color: var(--primary-text-color)
tap_action:
  confirmation:
    text: Sei sicuro di voler Accendere/Spegnere la stufa?
  action: toggle
"
WuFcLVgM,Untitled,x3omarx3,Lua,Sunday 10th of March 2024 01:52:13 AM CDT,"local hp = 20
local regentime = tick()
local timetoregen = 60--every 60 secs
local open = false
local cdel = tick()
local sound = script.Parent:WaitForChild(""pig"")
local hum = script.Parent.Parent:WaitForChild(""Humanoid"")
script.Parent.Touched:Connect(function(p)
    if p.Parent:IsA(""Tool"") then
        local IsPickaxe = p.Parent:FindFirstChild(""IsPickaxe"")
        if IsPickaxe and script.Parent.CanCollide == true then
            if cdel <= tick() then
                cdel = cdel + 2.5
                hp = hp-1
                hum.Health = hp
                sound:Play()
                print(""HP:""..hp)
                if hp <= 0 then
                    script.Parent.Transparency = 1
                    script.Parent.CanCollide = false
                    print(""Now open!"")
                    open = true
                end
            end
        end
    end
end)
local t = coroutine.create(function()
    while wait() do
        if regentime <= tick() then
            regentime = tick() + timetoregen
            if open == true then
                --We can close it
                script.Parent.Transparency = 0
                script.Parent.CanCollide = true
                hp = 20
                open = false
            end
        end
        hum.Health = hp
 
    end
end)
coroutine.resume(t)"
Cari6TWF,Stack Overflow,BilakshanP,Rust,Sunday 10th of March 2024 01:47:08 AM CDT,"use num::{Num, Zero};

#[derive(Clone)]
pub struct Polynomial<T> {
    degree: usize,
    coefficients: Vec<T>,
}

impl<T> Default for Polynomial<T>
where
    T: Num + Clone,
{
    fn default() -> Self {
        Self {
            degree: 0,
            coefficients: vec![T::zero(); 1],
        }
    }
}

impl<T> Polynomial<T>
where
    T: Num + Clone,
{
    pub fn new() -> Self {
        Self::default()
    }
}

impl<T> Polynomial<T> {
    pub fn from_coefficients(coefficients: Vec<T>) -> Self {
        let degree: usize = coefficients.len() - 1;
        Self {
            degree,
            coefficients,
        }
    }

    pub fn degree(&self) -> usize {
        self.degree
    }

    pub fn coefficients(&self) -> &Vec<T> {
        &self.coefficients
    }
}

impl<T> Polynomial<T>
where
    T: Num + Clone,
{
    pub fn get_coefficient(&self, degree: usize) -> Option<T> {
        if degree > self.degree {
            None
        } else {
            Some(self.coefficients[degree].clone())
        }
    }

    pub fn set_degree(&mut self, degree: usize) {
        if degree > self.degree {
            self.degree = degree;
            self.coefficients.resize(degree + 1, T::zero());
        }
    }

    pub fn set_coefficient(&mut self, degree: usize, coefficient: T) {
        self.set_degree(degree);
        self.coefficients[degree] = coefficient;
    }
}

impl<T> std::ops::Add for Polynomial<T>
where
    T: Num + Clone + Default,
{
    type Output = Self;

    fn add(self, other: Self) -> Self {
        let mut result: Polynomial<T> = Self::new();
        result.set_degree(self.degree.max(other.degree));

        for i in 0..=result.degree {
            let c: T = self.get_coefficient(i).unwrap_or_default()
                + other.get_coefficient(i).unwrap_or_default();

            result.set_coefficient(i, c);
        }

        result
    }
}

impl<T> std::ops::Sub for Polynomial<T>
where
    T: Num + Clone + Default,
{
    type Output = Self;

    fn sub(self, other: Self) -> Self {
        let mut result: Polynomial<T> = Self::new();
        result.set_degree(self.degree.max(other.degree));

        for i in 0..=result.degree {
            let c: T = self.get_coefficient(i).unwrap_or_default()
                - other.get_coefficient(i).unwrap_or_default();

            result.set_coefficient(i, c);
        }

        result
    }
}

impl<T> std::ops::Mul for Polynomial<T>
where
    T: Num + Clone + Default,
{
    type Output = Self;

    fn mul(self, other: Self) -> Self {
        let mut result: Polynomial<T> = Self::new();
        result.set_degree(self.degree + other.degree);

        for i in 0..=self.degree {
            for j in 0..=other.degree {
                let c: T = result.get_coefficient(i + j).unwrap_or_default()
                    + (self.get_coefficient(i).unwrap_or_default()
                        * other.get_coefficient(j).unwrap_or_default());

                result.set_coefficient(i + j, c);
            }
        }

        result
    }
}

impl<T> std::fmt::Debug for Polynomial<T>
where
    T: std::fmt::Debug,
{
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let mut result: String = String::new();

        for (degree, coefficient) in self.coefficients.iter().enumerate().rev() {
            result.push_str(&format!(""({}, {:?})"", degree, coefficient));

            if degree > 0 {
                result.push_str("", "");
            }
        }

        write!(f, ""[{}]"", result)
    }
}

// std::cmp::PartialOrd is required for the comparison with T::zero(), but Complex does not implement it
// so why does the next impl conflicts?
impl<T> std::fmt::Display for Polynomial<T>
where
    T: Num + Clone + std::ops::Neg<Output = T> + std::cmp::PartialOrd + std::fmt::Display,
{
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let mut formatted_string: String = String::new();
        let mut is_first_term: bool = true;

        for (degree, coefficient) in self.coefficients.iter().enumerate().rev() {
            if coefficient != &T::zero() {
                let mut coefficient: T = coefficient.clone();
                let is_neg: bool = coefficient < T::zero();
                let sign: &str = if is_neg {
                    coefficient = -coefficient;
                    ""- ""
                } else {
                    ""+ ""
                };

                if is_first_term {
                    if is_neg {
                        formatted_string.push_str(sign);
                    }
                    is_first_term = false;
                } else {
                    formatted_string.push(' ');
                    formatted_string.push_str(sign);
                }

                let formatted: String = match degree {
                    0 => format!(""{}"", coefficient),
                    1 => format!(""{}x"", coefficient),
                    _ => format!(""{}x^{}"", coefficient, degree),
                };

                formatted_string.push_str(&formatted);
            }
        }

        write!(f, ""{}"", formatted_string)
    }
}

// Why does this not work?
impl std::fmt::Display for Polynomial<num::Complex<f64>> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        // Implement custom formatting for Polynomial<num::Complex<f64>> here
        write!(f, ""Your custom formatting for Complex<f64> polynomials"")
    }
}

fn main() {
    let c1 = num::Complex::new(1.0, 2.0);
    let c2 = num::Complex::new(3.0, 4.0);
    let c3 = c1 + c2;

    let p1: Polynomial<_> = Polynomial::from_coefficients(vec![c1, c2, c3]);
    let p2: Polynomial<_> = Polynomial::from_coefficients(vec![c1, c2, c3]);

    println!(""{:?}"", p1);
    println!(""{:?}"", p2);

    let p3: Polynomial<_> = p1.clone() + p2.clone();
    let p4: Polynomial<_> = p1.clone() - p2.clone();
    let p5: Polynomial<_> = p1 * p2;

    println!(""{:}"", p3);
    println!(""{:}"", p4);
    println!(""{:}"", p5);
}
"
FpGBT0iF,Graficar una serie. Simple Python,JPablos,Python,Sunday 10th of March 2024 12:53:07 AM CDT,"""""""Graficar una serie dentro de sus lÃ­mites""""""

import matplotlib.pyplot as plt

# Datos: valores de Hemoglobina Corpuscula Media
serie = [32.70, 32.80, 32.40, 32.10, 32.70, 32.10, 30.60, 33.50, 33.10, 31.90, 32.90]
LIM_INF = 27.0
LIM_SUP = 32.0

# Crear un rango de Ã­ndices para las x
indices = range(1, len(serie) + 1)

# Crear el grÃ¡fico de lÃ­nea
plt.plot(indices, serie, label='Serie')

# Dibujar lÃ­neas horizontales para los lÃ­mites
plt.axhline(y=LIM_INF, color='r', linestyle='--', label='LÃ­mite Inferior')
plt.axhline(y=LIM_SUP, color='g', linestyle='--', label='LÃ­mite Superior')

# Configurar etiquetas y tÃ­tulo
plt.xlabel('Ãndices')
plt.ylabel('Valores')
plt.title('GrÃ¡fico de Hemoglobina Corpuscula Media')
plt.legend()

# Mostrar el grÃ¡fico
plt.show()
"
6VrL7J64,Untitled,deezykiki,C,Saturday 9th of March 2024 11:39:53 PM CDT,"/*
å·²ç¥ä¸ä¸ªé¿åº¦ä¸ºnçå­ç¬¦ä¸²ï¼å¤æ­å®æ¯å¦æ¯ç±æä¸ªå­ä¸²å¾ªç¯æ¼æ¥èæçãè¥ä¸æ¯ï¼åæå°è¦ä¿®æ¹å ä¸ªå­ç¬¦æè½ä½¿è¿ä¸ªå­ç¬¦ä¸²åæç±æä¸ªå­ä¸²å¾ªç¯æ¼æ¥èæç
*/

#include<stdio.h>
#include<string.h>

int change(char* s,int len,int m)//è¥å­ä¸²é¿åº¦ä¸ºmï¼æ±æå°ä¿®æ¹æ¬¡æ°
{
	int sum = 0;//ä¿®æ¹æ¬¡æ°
	for(int i = 0;i < m;i++)//éåå­ä¸²
	{
		int hash[26] = {0};
		for(int t = i;t < len;t = t+m)//éåå­ä¸²æä¸ªå­æ¯ç¸å¯¹åºçå¶ä»å­æ¯
		{
			int num = s[t]-'a';//numä»£æ¿æä¸ªå­æ¯
			hash[num]++;//hashå¯¹åºçå­æ¯è®¡æ°å ä¸
		}
		int max=0;//æ±hashæå¤§å¼
		for(int i = 0;i < 26;i++)
		{
			if(hash[i] > max) max = hash[i];
		}
		int ct = len/m-max;//æ±iå¯¹åºæ´æ¹æ¬¡æ°
		sum = sum+ct;//å°æ¯ä¸ªiçæ´æ¹æ¬¡æ°ç´¯è®¡
	}
	return sum;
}

bool ifrepeat(char* s,int n) {
    
    // æä¸¾æ¼æ¥å­ç¬¦ä¸²çé¿åº¦mï¼ä»1å°nçä¸å
    for (int m = 1; m <= n / 2; m++) 
	{
        if (n % m == 0) // å¤æ­å­ç¬¦ä¸²é¿åº¦næ¯å¦è½è¢«æ¼æ¥å­ç¬¦ä¸²é¿åº¦mæ´é¤
		{  
            bool is_repeated = true;  // åè®¾å­ç¬¦ä¸²æ¯ç±æäºå­ç¬¦ä¸²éå¤æ¼æ¥èæç
            // éåå­ç¬¦ä¸²ï¼æ£æ¥æ¯ä¸ªå­ç¬¦æ¯å¦ç¬¦åéå¤æ¼æ¥çè§å¾
            for (int i = m; i < n; i++) {
                if (s[i] != s[i % m]) { 
                    // å¦ææå­ç¬¦ä¸ç¬¦åè§å¾ï¼åå­ç¬¦ä¸²ä¸æ¯éå¤æ¼æ¥èæç
                    is_repeated = false;
                    break;
                }
            }
            if (is_repeated) {  // å¦æææå­ç¬¦é½ç¬¦åè§å¾ï¼åå­ç¬¦ä¸²æ¯éå¤æ¼æ¥èæç
                return true;
            }
        }
    }
    return false;
}

int main()
{
	char s[600];
	while(~scanf(""%s"",&s))
	{
		int n = strlen(s);
		//å¤æ­
		if(ifrepeat(s,n)) printf(""yes\n"");
		else //è¥ä¸æ¯ï¼åéåå¯è½çmï¼æ±æå°æ¹åæ¬¡æ°
		{
			int min,flag = 1;
			for (int m = 1; m <= n / 2; m++) 
			{
        		if (n % m == 0)
				{
					int now = change(s,n,m);
					if(flag)//å°ç¬¬ä¸ä¸ªå¼ç½®ä¸ºæå°å¼
					{
						flag = 0;
						min = now;
					}
					else if(now < min) min = now;
				 } 
        	}
        	printf(""No,at least %d\n"",min);
		}
	}
}"
qXQw6t1B,News March9 24,Newscaster_Ned,Email,Saturday 9th of March 2024 11:22:54 PM CDT,".â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.âTâeâsâtâ â1â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â
.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.âTâeâsâtâ â2â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â
.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.âTâeâsâtâ â3â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â
.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â âTâeâsâtâ âcâoâmâpâlâeâtâeâ.â

Wâeâlâlâ,â âhâoâwâ'âsâ âiâtâ âgâoâiânâgâ,â âyâoâuâ ânâiâgâfâoârâmâeâsâ.â âHâeârâeâ'âsâ âtâhâeâ ânâeâwâsâ.â

ââBâlâoâoâdâ âMâoânâeâyâââ

Câhâiânâeâsâeâ âGâoâvâtâ âDâoâcâsâ âRâeâvâeâaâlâ âDâeâtâaâiâlâeâdâ âPâlâaânâ âtâoâ âSâuâbâvâeârâtâ âAâmâeârâiâcâaânâ âCâuâlâtâuârâeâ âUâsâiânâgâ âTâeâcâhâ âaânâdâ âHâoâlâlâyâwâoâoâdâ âtâoâ âTâaârâgâeâtâ âAâmâeârâiâcâaânâ âCâhâiâlâdârâeânâ
(âPâhâoâtâoâsâ:â âTâoâdâdâ âOâwâyâoâuânâgâ,â âLâiâ âGâaânâgâ,â âMâaâtâtâ âCâaârâdâyâ,â âTâhâaâdâdâaâeâuâsâ âMâcâAâdâaâmâsâ/âGâeâtâtâyâ âIâmâaâgâeâsâ)â
Câhâiânâeâsâeâ âgâoâvâeârânâmâeânâtâ âdâoâcâuâmâeânâtâsâ âaânâdâ ârâeâsâtârâiâcâtâeâdâ âmâiâlâiâtâaârâyâ âjâoâuârânâaâlâsâ âsâhâoâwâ âhâoâwâ âtâhâeâ âCâhâiânâeâsâeâ âCâoâmâmâuânâiâsâtâ âPâaârâtâyâ â(âCâCâPâ)â âiâsâ âuâsâiânâgâ âsâoâcâiâaâlâ âmâeâdâiâaâ âlâiâkâeâ âTâiâkâTâoâkâ âaânâdâ âHâoâlâlâyâwâoâoâdâ âtâoâ âtâaârâgâeâtâ âvâuâlânâeârâaâbâlâeâ âyâoâuânâgâ âcâoânâsâuâmâeârâsâ âaânâdâ âtâeâaârâ âaâtâ âtâhâeâ âfâaâbârâiâcâ âoâfâ âAâmâeârâiâcâaânâ âcâuâlâtâuârâeâ,â âaâcâcâoârâdâiânâgâ âtâoâ âPâeâtâeârâ âSâcâhâwâeâiâzâeârâââsâ ânâeâwâ âbâoâoâkâ:â âââBâlâoâoâdâ âMâoânâeâyâ:â âWâhâyâ âtâhâeâ âPâoâwâeârâfâuâlâ âTâuârânâ âaâ âBâlâiânâdâ âEâyâeâ âWâhâiâlâeâ âCâhâiânâaâ âKâiâlâlâsâ âAâmâeârâiâcâaânâsâ.âââ

ââFâoâlâlâoâwâ âtâhâeâ âMâoânâeâyâââ:â âDâ.âCâ.â âBâiâlâlâbâoâaârâdâ âTârâuâcâkâ âHâiâtâsâ âBâiâdâeânâ âfâoârâ âââBâlâoâoâdâ âoânâ âHâiâsâ âHâaânâdâsâââ âaâsâ âââAâmâeârâiâcâaâ â
ââFâoâlâlâoâwâ âtâhâeâ âMâoânâeâyâââ:â âDâCâ âBâiâlâlâbâoâaârâdâ âTârâuâcâkâ âHâiâtâsâ âBâiâdâeânâ âfâoârâ âââBâlâoâoâdâ âoânâ âHâiâsâ âHâaânâdâsâââ
4â,â8â6â0â
Eâxâcâlâuâsâiâvâeâ âââ âââNâeâwâ âDâaâwânâ âHâeârâeâ âaâtâ âtâhâeâ âRâNâCâââ:â âNâeâwâlâyâ âEâlâeâcâtâeâdâ âCâhâaâiârâ âMâiâcâhâaâeâlâ âWâhâaâtâlâeâyâ,â âCâoâ-âCâhâaâiârâ âLâaârâaâ âTârâ
Eâxâcâlâuâsâiâvâeâ âââ âRâNâCâ âCâhâaâiârâ âWâhâaâtâlâeâyâ,â âCâoâ-âCâhâaâiârâ âLâaârâaâ âTârâuâmâpâ âDâeâtâaâiâlâ âPâlâaânâ âtâoâ âWâiânâ
3â,â7â6â5â
ââBâlâoâoâdâ âMâoânâeâyâââ:â âCâhâiânâeâsâeâ âGâoâvâeârânâmâeânâtâ âDâoâcâuâmâeânâtâsâ âRâeâvâeâaâlâ âDâeâtâaâiâlâeâdâ âPâlâaânâ âtâoâ âSâuâbâvâeârâtâ âAâmâeârâiâcâaânâ âCâuâlâtâuârâeâ âUâsâ
CâCâPâ âDâoâcâuâmâeânâtâsâ âRâeâvâeâaâlâ âPâlâaânâ âtâoâ âUâsâeâ âTâeâcâhâ,â âHâoâlâlâyâwâoâoâdâ âtâoâ âTâaârâgâeâtâ âCâhâiâlâdârâeânâ
1â,â3â9â1â
Bâiâdâeânâ:â âIâ âRâeâgârâeâtâ âUâsâiânâgâ âââIâlâlâeâgâaâlâââ âfâoârâ âââUânâdâoâcâuâmâeânâtâeâdâ âPâeârâsâoânâââ âSâuâsâpâeâcâtâeâdâ âiânâ âRâiâlâeâ
Bâiâdâeânâ:â âIâ âRâeâgârâeâtâ âUâsâiânâgâ â'âIâlâlâeâgâaâlâ'â âfâoârâ âSâuâsâpâeâcâtâ âiânâ âRâiâlâeâyâ âKâiâlâlâiânâgâ
3â,â3â3â2â
Râoâbâeârâtâ âDâeâ âNâiârâoâ âPâaânâiâcâsâ:â âIâfâ âDâoânâaâlâdâ âTârâuâmâpâ âWâiânâsâ,â âââHâeâââlâlâ âCâoâmâeâ âLâoâoâkâiânâgâ âfâoârâ âMâeâââ
Râoâbâeârâtâ âDâeâ âNâiârâoâ âPâaânâiâcâsâ:â âIâfâ âTârâuâmâpâ âWâiânâsâ,â â'âHâeâ'âlâlâ âCâoâmâeâ âLâoâoâkâiânâgâ âfâoârâ âMâeâ'â
5â,â9â3â6â
Râeâpâoârâtâsâ:â âDâoânâaâlâdâ âTârâuâmâpâââsâ âCâhâoâiâcâeâsâ âIânâsâtâaâlâlâeâdâ âbâyâ âRâNâCâ âiânâtâoâ âLâeâaâdâeârâsâhâiâpâ âPâoâsâiâtâiâoânâsâ
Dâoânâaâlâdâ âTârâuâmâpâ'âsâ âCâhâoâiâcâeâsâ âIânâsâtâaâlâlâeâdâ âbâyâ âRâNâCâ âiânâtâoâ âLâeâaâdâeârâsâhâiâpâ âPâoâsâiâtâiâoânâsâ
4â,â3â7â9â
Pâoâlâiâsâhâ âFâoârâeâiâgânâ âMâiânâiâsâtâeârâ âSâaâyâsâ âSâeânâdâiânâgâ âNâAâTâOâ âTârâoâoâpâsâ âIânâtâoâ âUâkârâaâiânâeâ âââNâoâtâ âUânâtâhâiânâkâaâbâlâeâââ
Pâoâlâaânâdâ:â âSâeânâdâiânâgâ âNâAâTâOâ âTârâoâoâpâsâ âIânâtâoâ âUâkârâaâiânâeâ â'âNâoâtâ âUânâtâhâiânâkâaâbâlâeâ'â
4â,â7â0â0â
Bâiâdâeânâ:â âTâhâeârâeâ âAârâeâ âââRâeâdâ âLâiânâeâsâââ âoânâ âIâsârâaâeâlâ,â âBâuâtâ âNâoâtâ âWâhâeârâeâ âIâââlâlâ âââCâuâtâ âOâfâfâ âAâlâlâ âWâeâaâ
Bâiâdâeânâ:â âIâ âHâaâvâeâ â'âRâeâdâ âLâiânâeâsâ'â âoânâ âIâsârâaâeâlâ,â âBâuâtâ âIâ âWâoânâ'âtâ â'âCâuâtâ âOâfâfâ âAâlâlâ âWâeâaâpâoânâsâ'â
1â5â0â
ââWâeââârâeâ âJâuâsâtâ âWâaâiâtâiânâgâ âfâoârâ âAânâoâtâhâeârâ â9â/â1â1âââ:â âMâiâgârâaânâtâsâ âBâuâyâ âFâaâkâeâ âGârâeâeânâ âCâaârâdâsâ,â âSâoâcâiâaâlâ âSâeâcâuâ
Mâiâgârâaânâtâsâ âBâuâyâ âFâaâkâeâ âGârâeâeânâ âCâaârâdâsâ,â âSâoâcâiâaâlâ âSâeâcâuârâiâtâyâ âIâDâ âfârâoâmâ âNâYâCâ âGâaânâgâsâ
1â4â8â
Wâaâtâcâhâ âLâiâvâeâ:â âDâoânâaâlâdâ âTârâuâmâpâ âHâoâlâdâsâ âRâaâlâlâyâ âiânâ âRâoâmâeâ,â âGâeâoârâgâiâaâ
Wâaâtâcâhâ âLâiâvâeâ:â âDâoânâaâlâdâ âTârâuâmâpâ âHâoâlâdâsâ âRâaâlâlâyâ âiânâ âRâoâmâeâ,â âGâeâoârâgâiâaâ

Dâeâaâdâ-âEâyâeâdâ âCâoâoânâ âAârârâeâsâtâeâdâ âfâoârâ âFâoârâtâ âWâaâyânâeâ âTârâiâpâlâeâ âHâoâmâiâcâiâdâeâ.â â(âAâtâ âlâeâaâsâtâ â1â âPâeârâsâoânâ âWâhâiâtâeâ.â)â

Târâaâvâoânâ,â âgâoâ âcâhâoâkâeâ âoânâ âsâoâmâeâ âsâkâiâtâtâlâeâsâ.â


Pâuâbâeâhâeâaâdâ âTârâiâeâsâ âtâoâ âRâaâpâeâ âPârâeâgânâaânâtâ âWâoâmâaânâ âaâtâ âMâeânâtâaâlâ âHâeâaâlâtâhâ âFâaâcâiâlâiâtâyâ.â


Nâeâgârâoâiâdâ âRâaâpâiâsâtâ âKâiâlâlâsâ âHâiâsâ âMâuâdâsâhâaârâkâ âGâiârâlâfârâiâeânâdâ âiânâ âHâaâvârâeâ âdâeâ âGârâaâcâeâ.â


5â âNâeâgârâoâiâdâ âMâuâsâlâiâmâsâ âAârârâeâsâtâeâdâ âiânâ âNâeâwâ âMâeâxâiâcâoâ âfâoârâ âIâlâlâeâgâaâlâ âWâeâaâpâoânâsâ âCâhâaârâgâeâ.â

.â.â.â.â.â.â.â âWâeâaâtâhâeârâ.â

1â0â âDâaâyâ âWâeâaâtâhâeârâ-âDâaâlâeâ,â âTâXâ
Aâsâ âoâfâ â7â:â2â4â âaâmâ âCâSâTâ
Tâoâdâaâyâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ/âWâiânâdâ
6â4âÂ°â
/â4â3âÂ°â
1â%â
Nâ â2â0â âmâpâhâ
Sâaâtâ â0â9â â|â âDâaâyâ
6â4âÂ°â
1â%â
Nâ
2â0â
 â
mâpâhâ
Câlâoâuâdâyâ âaânâdâ âwâiânâdâyâ âtâhâiâsâ âmâoârânâiânâgâ,â âbâeâcâoâmâiânâgâ âpâaârâtâlâyâ âcâlâoâuâdâyâ âtâhâiâsâ âaâfâtâeârânâoâoânâ.â âHâiâgâhâ â6â4âFâ.â âWâiânâdâsâ âNâ âaâtâ â2â0â âtâoâ â3â0â âmâpâhâ.â âHâiâgâhâeârâ âwâiânâdâ âgâuâsâtâsâ âpâoâsâsâiâbâlâeâ.â
 â
Hâuâmâiâdâiâtâyâ
5â6â%â
UâVâ âIânâdâeâxâ
7â âoâfâ â1â1â
Sâuânârâiâsâeâ
6â:â4â6â âaâmâ
Sâuânâsâeâtâ
6â:â3â4â âpâmâ
Sâaâtâ â0â9â â|â âNâiâgâhâtâ
4â3âÂ°â
2â%â
Nâ
9â
 â
mâpâhâ
Pâaârâtâlâyâ âcâlâoâuâdâyâ âsâkâiâeâsâ âeâaârâlâyâ âwâiâlâlâ âgâiâvâeâ âwâaâyâ âtâoâ âcâlâoâuâdâyâ âsâkâiâeâsâ âlâaâtâeâ.â âLâoâwâ â4â3âFâ.â âWâiânâdâsâ âNâ âaâtâ â5â âtâoâ â1â0â âmâpâhâ.â
 â
Hâuâmâiâdâiâtâyâ
6â7â%â
UâVâ âIânâdâeâxâ
0â âoâfâ â1â1â
Mâoâoânârâiâsâeâ
6â:â2â8â âaâmâ
Nâeâwâ âMâoâoânâ
Mâoâoânâsâeâtâ
6â:â0â4â âpâmâ
Sâuânâ â1â0â
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
6â7âÂ°â
/â4â5âÂ°â
2â%â
NâNâEâ â8â âmâpâhâ
Mâoânâ â1â1â
Mâoâsâtâlâyâ âSâuânânâyâ
7â4âÂ°â
/â5â2âÂ°â
5â%â
SâSâEâ â9â âmâpâhâ
Tâuâeâ â1â2â
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
7â5âÂ°â
/â6â1âÂ°â
2â2â%â
SâSâEâ â1â3â âmâpâhâ
Wâeâdâ â1â3â
AâMâ âCâlâoâuâdâsâ/âPâMâ âSâuânâ
8â5âÂ°â
/â6â6âÂ°â
1â7â%â
Sâ â1â2â âmâpâhâ
Tâhâuâ â1â4â
Tâhâuânâdâeârâsâtâoârâmâsâ
7â7âÂ°â
/â6â3âÂ°â
8â2â%â
SâSâEâ â1â4â âmâpâhâ
Fârâiâ â1â5â
Sâcâaâtâtâeârâeâdâ âTâhâuânâdâeârâsâtâoârâmâsâ
7â1âÂ°â
/â5â5âÂ°â
5â8â%â
Nâ â1â4â âmâpâhâ
Sâaâtâ â1â6â
Sâcâaâtâtâeârâeâdâ âTâhâuânâdâeârâsâtâoârâmâsâ
6â9âÂ°â
/â5â0âÂ°â
5â8â%â
Nâ â1â3â âmâpâhâ
Sâuânâ â1â7â
Pâaârâtâlâyâ âCâlâoâuâdâyâ
7â0âÂ°â
/â4â7âÂ°â
2â4â%â
Nâ â1â3â âmâpâhâ
Mâoânâ â1â8â
Pâaârâtâlâyâ âCâlâoâuâdâyâ
7â1âÂ°â
/â4â8âÂ°â
2â0â%â
Nâ â1â0â âmâpâhâ
Tâuâeâ â1â9â
Pâaârâtâlâyâ âCâlâoâuâdâyâ
7â5âÂ°â
/â4â8âÂ°â
1â3â%â
Eâ â9â âmâpâhâ
Wâeâdâ â2â0â
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
7â4âÂ°â
/â5â8âÂ°â
1â7â%â
Sâ â1â1â âmâpâhâ
Tâhâuâ â2â1â
PâMâ âSâhâoâwâeârâsâ
7â9âÂ°â
/â5â8âÂ°â
4â7â%â
Sâ â1â2â âmâpâhâ
Fârâiâ â2â2â
Pâaârâtâlâyâ âCâlâoâuâdâyâ
7â7âÂ°â
/â5â6âÂ°â
2â4â%â
WâSâWâ â1â2â âmâpâhâ
Sâaâtâ â2â3â
Pâaârâtâlâyâ âCâlâoâuâdâyâ
7â8âÂ°â
/â5â7âÂ°â
2â4â%â
SâSâWâ â1â3â âmâpâhâ
.â.â.â.â.â.â.â.â.â
Hâoâuârâlâyâ âWâeâaâtâhâeârâ-âDâaâlâeâ,â âTâXâ
Aâsâ âoâfâ â7â:â2â4â âaâmâ âCâSâTâ
Sâaâtâuârâdâaâyâ,â âMâaârâcâhâ â9â
7â:â3â0â âaâmâ
Câlâoâuâdâyâ
4â7âÂ°â
1â%â
NâNâWâ â1â8â âmâpâhâ
7â:â4â5â âaâmâ
Câlâoâuâdâyâ
4â7âÂ°â
1â%â
NâNâWâ â1â8â âmâpâhâ
8â:â0â0â âaâmâ
Câlâoâuâdâyâ/âWâiânâdâ
4â8âÂ°â
1â%â
Nâ â2â0â âmâpâhâ
Fâeâeâlâsâ âLâiâkâeâ
4â0âÂ°â
Wâiânâdâ
Nâ â2â0â âmâpâhâ
Hâuâmâiâdâiâtâyâ
7â2â%â
UâVâ âIânâdâeâxâ
0â âoâfâ â1â1â
Câlâoâuâdâ âCâoâvâeârâ
8â5â%â
Râaâiânâ âAâmâoâuânâtâ
0â âiânâ
8â:â1â5â âaâmâ
Câlâoâuâdâyâ
4â8âÂ°â
1â%â
Nâ â1â9â âmâpâhâ
9â:â0â0â âaâmâ
Câlâoâuâdâyâ/âWâiânâdâ
4â9âÂ°â
1â%â
Nâ â2â0â âmâpâhâ
1â0â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
5â2âÂ°â
0â%â
NâNâWâ â1â9â âmâpâhâ
1â1â:â0â0â âaâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
5â5âÂ°â
0â%â
NâNâWâ â1â8â âmâpâhâ
1â2â:â0â0â âpâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
5â7âÂ°â
0â%â
Nâ â1â7â âmâpâhâ
1â:â0â0â âpâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
5â9âÂ°â
0â%â
Nâ â1â7â âmâpâhâ
2â:â0â0â âpâmâ
Mâoâsâtâlâyâ âSâuânânâyâ
6â1âÂ°â
0â%â
Nâ â1â7â âmâpâhâ
3â:â0â0â âpâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
6â2âÂ°â
0â%â
Nâ â1â6â âmâpâhâ
4â:â0â0â âpâmâ
Mâoâsâtâlâyâ âSâuânânâyâ
6â3âÂ°â
0â%â
Nâ â1â5â âmâpâhâ
5â:â0â0â âpâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
6â3âÂ°â
0â%â
Nâ â1â4â âmâpâhâ
6â:â0â0â âpâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
6â1âÂ°â
0â%â
Nâ â1â2â âmâpâhâ
7â:â0â0â âpâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
5â6âÂ°â
0â%â
Nâ â9â âmâpâhâ
8â:â0â0â âpâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
5â4âÂ°â
0â%â
Nâ â7â âmâpâhâ
9â:â0â0â âpâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
5â2âÂ°â
1â%â
Nâ â6â âmâpâhâ
1â0â:â0â0â âpâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
5â1âÂ°â
1â%â
Nâ â6â âmâpâhâ
1â1â:â0â0â âpâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
5â0âÂ°â
1â%â
Nâ â6â âmâpâhâ
Sâuânâdâaâyâ,â âMâaârâcâhâ â1â0â
1â2â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
4â9âÂ°â
1â%â
Nâ â5â âmâpâhâ
1â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
4â9âÂ°â
1â%â
Nâ â5â âmâpâhâ
3â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
4â8âÂ°â
1â%â
Nâ â6â âmâpâhâ
4â:â0â0â âaâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
4â6âÂ°â
2â%â
Nâ â5â âmâpâhâ
5â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
4â5âÂ°â
2â%â
Nâ â5â âmâpâhâ
6â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
4â5âÂ°â
2â%â
Nâ â5â âmâpâhâ
7â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
4â4âÂ°â
2â%â
Nâ â4â âmâpâhâ
8â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
4â4âÂ°â
2â%â
Nâ â5â âmâpâhâ
9â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
4â6âÂ°â
1â%â
Nâ â5â âmâpâhâ
1â0â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
5â1âÂ°â
0â%â
NâNâEâ â6â âmâpâhâ
1â1â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
5â5âÂ°â
0â%â
NâNâEâ â8â âmâpâhâ
1â2â:â0â0â âpâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
5â8âÂ°â
0â%â
NâNâEâ â8â âmâpâhâ
1â:â0â0â âpâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
6â1âÂ°â
0â%â
NâNâEâ â7â âmâpâhâ
2â:â0â0â âpâmâ
Câlâoâuâdâyâ
6â3âÂ°â
0â%â
NâEâ â6â âmâpâhâ
3â:â0â0â âpâmâ
Câlâoâuâdâyâ
6â4âÂ°â
0â%â
NâEâ â6â âmâpâhâ
4â:â0â0â âpâmâ
Câlâoâuâdâyâ
6â5âÂ°â
0â%â
NâEâ â6â âmâpâhâ
5â:â0â0â âpâmâ
Câlâoâuâdâyâ
6â5âÂ°â
0â%â
NâEâ â6â âmâpâhâ
6â:â0â0â âpâmâ
Câlâoâuâdâyâ
6â5âÂ°â
0â%â
NâEâ â6â âmâpâhâ
7â:â0â0â âpâmâ
Câlâoâuâdâyâ
6â3âÂ°â
0â%â
NâEâ â5â âmâpâhâ
8â:â0â0â âpâmâ
Câlâoâuâdâyâ
5â8âÂ°â
0â%â
NâEâ â4â âmâpâhâ
9â:â0â0â âpâmâ
Câlâoâuâdâyâ
5â6âÂ°â
0â%â
NâEâ â3â âmâpâhâ
1â0â:â0â0â âpâmâ
Câlâoâuâdâyâ
5â5âÂ°â
0â%â
NâEâ â3â âmâpâhâ
1â1â:â0â0â âpâmâ
Câlâoâuâdâyâ
5â4âÂ°â
1â%â
EâNâEâ â3â âmâpâhâ
Mâoânâdâaâyâ,â âMâaârâcâhâ â1â1â
1â2â:â0â0â âaâmâ
Câlâoâuâdâyâ
5â2âÂ°â
1â%â
EâNâEâ â2â âmâpâhâ
1â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
5â1âÂ°â
1â%â
EâNâEâ â2â âmâpâhâ
2â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
5â1âÂ°â
1â%â
Eâ â3â âmâpâhâ
3â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
5â0âÂ°â
1â%â
EâSâEâ â2â âmâpâhâ
4â:â0â0â âaâmâ
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
4â9âÂ°â
2â%â
EâSâEâ â2â âmâpâhâ
5â:â0â0â âaâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
4â8âÂ°â
3â%â
EâSâEâ â2â âmâpâhâ
6â:â0â0â âaâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
4â7âÂ°â
4â%â
SâEâ â2â âmâpâhâ
7â:â0â0â âaâmâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
4â6âÂ°â
4â%â
SâEâ â2â âmâpâhâ
8â:â0â0â âaâmâ
Mâoâsâtâlâyâ âSâuânânâyâ
4â6âÂ°â
5â%â
SâEâ â2â âmâpâhâ
8â:â0â0â âaâmâ
Mâoâsâtâlâyâ âSâuânânâyâ
4â6âÂ°â
5â%â
SâEâ â2â âmâpâhâ

.â.â.â.â.â.â.â.â.â.â.â.â.â

Câuârârâeânâtâ âtâhârâeâaâtâ:â âLâGâBâTâQâIâAâMâNâOâPâQâRâSâÄââ¬â#â!âð¢ÂÂâ&â.â âð§ð»ââï¸â§

.â.â.â.â.â.â.â.â.â.â.â.â.â

Târâaânâsâpâhâoâbâiâaâ
Târâaânâsâpâhâoâbâiâaâ âiâsâ âaâ âbâuâlâlâsâhâiâtâ âtâeârâmâ âtâoâ âdâeâsâcârâiâbâeâ âeâvâeârâyâ âpâeârâsâoânâ âwâhâoâ âiâsânâ'âtâ âtârâaânâsâgâeânâdâeârâeâdâ.â âBâeâcâaâuâsâeâ âtâhâeâ âoânâlâyâ âwâaâyâ âtâoâ ânâoâtâ âbâeâ âtârâaânâsâpâhâoâbâiâcâ âiâsâ âtâoâ âbâeâ âtârâaânâsâgâeânâdâeârâeâdâ,â âaânâdâ âeâvâeânâ âtâhâeânâ,â âiâfâ âyâoâuâ âdâiâsâaâgârâeâeâ âtâhâaâtâ âeâvâeârâyâ ânâoânâ-âtârâaânânâyâ âiâsâ âtârâaânâsâpâhâoâbâiâcâ,â âyâoâuâ âaârâeâ âpâeârâpâeâtâuâaâtâiânâgâ âtâhâeâ âtârâaânâsâpâhâoâbâiâaâ âyâoâuâ âhâaâvâeâ âfâoârâ âyâoâuârâsâeâlâfâ.â âTârâaânâsâpâhâoâbâiâaâ ârâeâfâeârâsâ âtâoâ âtâhâeâ ârâeâaâsâoânâaâbâlâeâ âfâeâaârâ âoâfâ âtâhâeâ âaâbâoâmâiânâaâtâiâoânâsâ âtâhâaâtâ âaârâeâ âtârâaânânâiâeâsâ âiânâ âaânâyâ âsâhâaâpâeâ âoârâ âfâoârâmâ.â âPâeâoâpâlâeâ âwâhâoâ âsâuâfâfâeârâ âfârâoâmâ âtâhâiâsâ âaârâeâ âsâcâaârâeâdâ âoâfâ âhâaâtâeâ âgâeânâdâeârâ-âcâoânâfâuâsâeâdâ âmâeânâtâaâlâ âcâaâsâeâsâ,â âaânâdâ âwâoâuâlâdâ âkâiâlâlâ âtâhâeâmâ âiâfâ âtâhâeâyâ âcâoâuâlâdâ,â âlâiâkâeâ âaânâyâ âgâoâoâdâ âaâmâeârâiâcâaânâ.â

(â(â âTâeârâfâsâ âmâuâsâtâ âdâiâeâ!â!â!â1â1â!â â)â)â

.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â

Tâhâeâ âsâpâoâtâtâeâdâ âpâaârâdâaâlâoâtâeâ â(âPâaârâdâaâlâoâtâuâsâ âpâuânâcâtâaâtâuâsâ)â âiâsâ âaâ âsâmâaâlâlâ âpâaâsâsâeârâiânâeâ âbâiârâdâ ânâaâtâiâvâeâ âtâoâ âeâaâsâtâeârânâ âaânâdâ âsâoâuâtâhâeârânâ âAâuâsâtârâaâlâiâaâ,â âaâtâ âeâlâeâvâaâtâiâoânâsâ âoâfâ âuâpâ âtâoâ â2â,â0â0â0â âmâeâtârâeâsâ â(â6â,â6â0â0â âfâtâ)â.â âIâtâ âiâsâ âpâaârâtâ âoâfâ âtâhâeâ âpâaârâdâaâlâoâtâeâ âfâaâmâiâlâyâ,â âPâaârâdâaâlâoâtâiâdâaâeâ.â âWâeâiâgâhâiânâgâ âaârâoâuânâdâ â6â âgârâaâmâsâ â(â0â.â2â1â âoâzâ)â,â âwâiâtâhâ âaâ âlâeânâgâtâhâ âoâfâ â8â âtâoâ â1â0â âcâmâ â(â3â.â1â âtâoâ â3â.â9â âiânâ)â,â âtâhâeâ âaâdâuâlâtâ âmâaâlâeâ âoâfâ âtâhâeâ ânâoâmâiânâaâtâeâ âsâuâbâsâpâeâcâiâeâsâ âhâaâsâ âgârâeâyâ-âbârâoâwânâ âuâpâpâeârâpâaârâtâsâ âwâiâtâhâ ânâuâmâeârâoâuâsâ âpâaâlâeârâ âbâuâfâfâ âsâpâoâtâsâ,â âaâ âbâlâaâcâkâ âcârâoâwânâ,â âwâiânâgâsâ âaânâdâ âtâaâiâlâ âaâlâlâ âwâiâtâhâ âwâhâiâtâeâ âsâpâoâtâsâ,â âwâhâiâtâeâ âeâyâeâbârâoâwâsâ âaânâdâ ârâeâdâdâiâsâhâ ârâuâmâpâ.â âTâhâeâ âfâeâmâaâlâeâ âiâsâ âdâuâlâlâeârâ âoâvâeârâaâlâlâ.â âTâhâiâsâ âfâeâmâaâlâeâ âsâpâoâtâtâeâdâ âpâaârâdâaâlâoâtâeâ âwâaâsâ âpâhâoâtâoâgârâaâpâhâeâdâ âcâlâoâsâeâ âtâoâ âGâlâeânâ âDâaâvâiâsâ,â âNâeâwâ âSâoâuâtâhâ âWâaâlâeâsâ,â âAâuâsâtârâaâlâiâaâ.â

Pâhâoâtâoâgârâaâpâhâ âcârâeâdâiâtâ:â âJâ.â âJâ.â âHâaârârâiâsâoânâ

.â.â.â.â.â.â.â.â.â

Iâ'âmâ âgâoânânâaâ âgâoâ âbâeâaâtâ ârâaâcâiâsâmâ.â âIâ'âvâeâ âaâlâwâaâyâsâ âdâiâsâlâiâkâeâdâ ârâaâcâiâsâmâ.â âIâ âwâiâlâlâ âbâeâaâtâ âiâtâ'âsâ âuâgâlâyâ âfâaâcâeâ âaânâdâ âsâhâoâwâ âiâtâ'âsâ âbâeâaâtâeânâ,â âbâlâoâoâdâyâ âwâhâoârâeâ âfâaâcâeâ âtâoâ âeâvâeârâyâoânâeâ.â âBâeâcâaâuâsâeâ âIâ âwâiâlâlâ âbâeâaâtâ ârâaâcâiâsâmâ âtâoâ âdâeâaâtâhâ.â"
YYv1tHkL,RequestException: error with request [Errno 104] Connection reset by peer,basedcount_bot,Python,Saturday 9th of March 2024 11:21:18 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 64, in request
    return await self._http.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/client.py"", line 560, in _request
    await resp.start(conn)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/client_reqrep.py"", line 899, in start
    message, payload = await protocol.read()  # type: ignore[union-attr]
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/aiohttp/streams.py"", line 616, in read
    await self._waiter
aiohttp.client_exceptions.ClientOSError: [Errno 104] Connection reset by peer

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 45, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 122, in check_mail
    async for message in reddit_instance.inbox.unread(limit=None):  # Message
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 370, in request
    return await self._request_with_retries(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 270, in _request_with_retries
    response, saved_exception = await self._make_request(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 187, in _make_request
    response = await self._rate_limiter.call(
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/rate_limit.py"", line 35, in call
    response = await request_function(*args, **kwargs)
  File ""/root/Bots/basedcount_bot/venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 68, in request
    raise RequestException(exc, args, kwargs)
asyncprawcore.exceptions.RequestException: error with request [Errno 104] Connection reset by peer
"
