id,title,username,language,date,content
z4PBk6iY,Untitled,Josif_tepe,C++,Thursday 23rd of May 2024 12:59:52 PM CDT,"#include <bits/stdc++.h>
using namespace std;
const int maxn  = 2e5 + 10;
typedef long long ll;
int segment_tree[3 * maxn], a[maxn];
int n;
void build_tree(int L, int R, int pos) {
    if(L == R) {
        segment_tree[pos] = L;
    }
    else {
        int middle = (L + R) / 2;
        build_tree(L, middle, 2 * pos);
        build_tree(middle + 1, R, 2 * pos + 1);
        if(a[segment_tree[2 * pos]] > a[segment_tree[2 * pos + 1]]) {
            segment_tree[pos] = segment_tree[2 * pos + 1];
        }
        else {
            segment_tree[pos] = segment_tree[2 * pos];
        }
    }
}
int query(int L, int R, int pos, int i, int j) {
    // L R i L R j L R
    if(R < i or j < L) {
        return -1;
    } 
    if(i <= L and R <= j) {
        return segment_tree[pos];
    }
    int middle = (L + R) / 2;
    int q1 = query(L, middle, 2 * pos, i, j);
    int q2 = query(middle + 1, R, 2 * pos + 1, i, j);
    if(q1 == -1) {
        return q2;
    }
    else if(q2 == -1) {
        return q1;
    }
    else if(a[q1] < a[q2]) {
        return q1;
    }
    return q2;

}
int rec(int i, int j) {
    int min_idx = query(0, n - 1, 1, i, j);
    int res = a[min_idx] * (j - i + 1);

    if(min_idx - 1 >= i) {
        res = max(res, rec(i, min_idx - 1));
    }
    if(min_idx + 1 <= j) {
        res = max(res, rec(min_idx + 1, j));
    }
    return res;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin >> n;
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    build_tree(0, n - 1, 1);
    cout << rec(0, n - 1) << endl;
    return 0;
}
"
9jdiu1ei,to_pascal_case,Python253,Python,Thursday 23rd of May 2024 12:56:55 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: to_pascal_case.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script converts input text to Pascal Case, where each word starts with an uppercase letter and there are no spaces between words.
    The converted text is then saved to a file named ""converted_pascal_case.txt"" in UTF-8 encoding.

Requirements:
    - Python 3.x

Functions:
    - to_pascal_case(text): Converts input text to Pascal Case.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Pascal Case.

Usage:
    Run the script and provide the text you want to convert when prompted. 
    The converted text will be saved to ""converted_pascal_case.txt"" in the same directory as the script.

Example Output:
    Input Text: ""This is a Test of Case Converting""
    
    Converted Text Has Been Saved To: 'converted_pascal_case.txt'.
    
    Converted Text:
            ThisIsATestOfCaseConverting
""""""

def to_pascal_case(text):
    """"""
    Converts input text to Pascal Case.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Pascal Case.
    """"""
    words = text.split()
    pascal_case_words = [word.capitalize() for word in words]
    return ''.join(pascal_case_words)

def main():
    """"""
    Main function of the script.
    
    Prompts the user to input text, converts it to Pascal Case,
    and saves the converted text to a file named ""converted_pascal_case.txt"".
    """"""
    input_text = input(""Enter the text you want to convert to Pascal Case: "")
    pascal_case_text = to_pascal_case(input_text)

    with open(""converted_pascal_case.txt"", ""w"", encoding=""utf-8"") as file:
        file.write(pascal_case_text)
    
    print(f""\nConverted Text Has Been Saved To: 'converted_pascal_case.txt'.\n\nConverted Text:\n\t\t{pascal_case_text}"")

if __name__ == ""__main__"":
    main()

"
wyNg4fCu,to_kebab_case,Python253,Python,Thursday 23rd of May 2024 12:56:29 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: to_kebab_case.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script converts input text to Kebab Case, where spaces are replaced with hyphens ('-').
    The converted text is then saved to a file named ""converted_kebab_case.txt"" in UTF-8 encoding.

Requirements:
    - Python 3.x

Functions:
    - to_kebab_case(text): Converts input text to Kebab Case.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Kebab Case.

Usage:
    Run the script and provide the text you want to convert when prompted. 
    The converted text will be saved to ""converted_kebab_case.txt"" in the same directory as the script.

Example Output:
    Input Text: ""This is a Test of Case Converting""
    
    Converted Text Has Been Saved To: 'converted_kebab_case.txt'.
    
    Converted Text:
            this-is-a-test-of-case-converting
""""""

def to_kebab_case(text):
    """"""
    Converts input text to Kebab Case.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Kebab Case.
    """"""
    return '-'.join(text.lower().split())

def main():
    """"""
    Main function of the script.
    
    Prompts the user to input text, converts it to Kebab Case,
    and saves the converted text to a file named ""converted_kebab_case.txt"".
    """"""
    input_text = input(""Enter the text you want to convert to Kebab Case: "")
    kebab_case_text = to_kebab_case(input_text)

    with open(""converted_kebab_case.txt"", ""w"", encoding=""utf-8"") as file:
        file.write(kebab_case_text)
    
    print(f""\nConverted Text Has Been Saved To: 'converted_kebab_case.txt'.\n\nConverted Text:\n\t\t{kebab_case_text}"")

if __name__ == ""__main__"":
    main()

"
QgVZkb42,to_title_case,Python253,Python,Thursday 23rd of May 2024 12:56:02 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: to_title_case.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script converts input text to Title Case, where the first letter of each word is capitalized. 
    The converted text is then saved to a file named ""converted_title_case.txt"" in UTF-8 encoding.

Requirements:
    - Python 3.x

Functions:
    - to_title_case(text): Converts input text to Title Case.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Title Case.

Usage:
    Run the script and provide the text you want to convert when prompted. 
    The converted text will be saved to ""converted_title_case.txt"" in the same directory as the script.

Example Output:
    Input Text: ""this is a test of case converting""
    
    Converted Text Has Been Saved To: 'converted_title_case.txt'.
    
    Converted Text:
            This Is A Test Of Case Converting
""""""

def to_title_case(text):
    """"""
    Converts input text to Title Case.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Title Case.
    """"""
    words = text.split()
    title_case_words = [word.capitalize() for word in words]
    return ' '.join(title_case_words)

def main():
    """"""
    Main function of the script.
    
    Prompts the user to input text, converts it to Title Case,
    and saves the converted text to a file named ""converted_title_case.txt"".
    """"""
    input_text = input(""Enter the text you want to convert to Title Case: "")
    title_case_with_spaces_text = to_title_case(input_text)

    with open(""converted_title_case.txt"", ""w"", encoding=""utf-8"") as file:
        file.write(title_case_with_spaces_text)
    
    print(f""\nConverted Text Has Been Saved To: 'converted_title_case.txt'.\n\nConverted Text:\n\t\t{title_case_with_spaces_text}"")

if __name__ == ""__main__"":
    main()
"
PDnZ23yn,to_snake_case,Python253,Python,Thursday 23rd of May 2024 12:55:29 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: to_snake_case.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script converts input text to Snake Case, where spaces are replaced with underscores ('_').
    The converted text is then saved to a file named ""converted_snake_case.txt"" in UTF-8 encoding.

Requirements:
    - Python 3.x

Functions:
    - to_snake_case(text): Converts input text to Snake Case.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Snake Case.

Usage:
    Run the script and provide the text you want to convert when prompted. 
    The converted text will be saved to ""converted_snake_case.txt"" in the same directory as the script.

Example Output:
    Input Text: ""This is a Test of Case Converting""
    
    Converted Text Has Been Saved To: 'converted_snake_case.txt'.
    
    Converted Text:
            this_is_a_test_of_case_converting
""""""

def to_snake_case(text):
    """"""
    Converts input text to Snake Case.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Snake Case.
    """"""
    return '_'.join(text.lower().split())

def main():
    """"""
    Main function of the script.
    
    Prompts the user to input text, converts it to Snake Case,
    and saves the converted text to a file named ""converted_snake_case.txt"".
    """"""
    input_text = input(""Enter the text you want to convert to Snake Case: "")
    snake_case_text = to_snake_case(input_text)

    with open(""converted_snake_case.txt"", ""w"", encoding=""utf-8"") as file:
        file.write(snake_case_text)
    
    print(f""\nConverted Text Has Been Saved To: 'converted_snake_case.txt'.\n\nConverted Text:\n\t\t{snake_case_text}"")

if __name__ == ""__main__"":
    main()

"
dwqhsjpe,text_case_converter,Python253,Python,Thursday 23rd of May 2024 12:54:34 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: text_case_converter.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script offers functionality to convert text between various case formats including Snake-Case, Title-Case, Kebab-Case, and Pascal-Case.

Requirements:
    - Python 3.x
    - No additional dependencies required.

Functions:
    - to_snake_case(text):
        Converts text to Snake-Case format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Snake-Case format.
    
    - to_title_case(text):
        Converts text to Title-Case format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Title-Case format.

    - to_kebab_case(text):
        Converts text to Kebab-Case format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Kebab-Case format.

    - to_pascal_case(text):
        Converts text to Pascal-Case format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Pascal-Case format.

Usage:
    - Call the main() function to execute the script.
    - Follow the prompts to choose the conversion option and enter the text to be converted.
    - The converted text will be saved to a file in the current working directory.

Example Output:
    Input Text: ""this is a test of case converting""

        1: Snake-Case:
           - Output: ""this_is_a_test_of_case_converting""
        
        2: Title-Case:
           - Output: ""This Is A Test Of Case Converting""
        
        3: Kebab-Case:
           - Output: ""this-is-a-test-of-case-converting""
        
        4: Pascal-Case:
           - Output: ""ThisIsATestOfCaseConverting""
    
Additional Notes:
    - The script allows for easy conversion between different case formats commonly used in programming and text formatting.
    - The file name for the converted text will be based on the chosen conversion option.
""""""

def to_snake_case(text):
    """"""
    Converts text to Snake-Case format.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Snake-Case format.
    """"""
    return '_'.join(text.lower().split())

def to_title_case(text):
    """"""
    Converts text to Title-Case format.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Title-Case format.
    """"""
    return ' '.join(word.capitalize() for word in text.split())

def to_kebab_case(text):
    """"""
    Converts text to Kebab-Case format.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Kebab-Case format.
    """"""
    return '-'.join(text.lower().split())

def to_pascal_case(text):
    """"""
    Converts text to Pascal-Case format.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Pascal-Case format.
    """"""
    words = text.split()
    pascal_case_words = [word.capitalize() for word in words]
    return ''.join(pascal_case_words)

def main():
    """"""
    Main function of the script.
    
    Prompts the user to choose a conversion option and input text to be converted.
    Executes the selected conversion function and saves the converted text to a file.
    """"""
    menu = """"""
Choose a case conversion option below:

            1: Snake-Case
            2: Title-Case
            3: Kebab-Case
            4: Pascal-Case
            0: Exit
    """"""

    while True:
        print(menu)
        choice = input(""Enter your choice (1-4) or press 0 to exit: "")

        if choice == '0':
            print(""\nExiting Program...   Goodbye!\n"")
            break

        if choice not in {'1', '2', '3', '4'}:
            print(""\nInvalid choice!\nPlease enter a number from 1 to 4 or press 0 to exit."")
            continue

        input_text = input(""\nEnter the text you want to convert: "")

        if choice == '1':
            converted_text = to_snake_case(input_text)
            filename = ""converted_snake_case.txt""
        elif choice == '2':
            converted_text = to_title_case(input_text)
            filename = ""converted_title_case.txt""
        elif choice == '3':
            converted_text = to_kebab_case(input_text)
            filename = ""converted_kebab_case.txt""
        elif choice == '4':
            converted_text = to_pascal_case(input_text)
            filename = ""converted_pascal_case.txt""

        with open(filename, ""w"", encoding=""utf-8"") as file:
            file.write(converted_text)
        
        print(f""\nConverted Text Has Been Saved To:\n\n\t\t'{filename}'.\n\nConverted Text:\n\n\t\t{converted_text}"")

        input(""\nPress Enter to return to the main menu..."")

if __name__ == ""__main__"":
    main()
"
DxmBXDLM,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Thursday 23rd of May 2024 12:52:32 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
23 May 2024"
Kc7mZzCh,Hamster,mirosh111000,Python,Thursday 23rd of May 2024 12:46:47 PM CDT,"import pandas as pd
import numpy as np

def my_time_d(s):
    d = 0
    h = s // 3600
    time = s % 3600
    m = int(time // 60)
    s = int(time % 60)
    if h >= 24:
        d = int(h // 24)
        h -= d*24
        if d == 1: d = fr'{d} day'
        else: d = fr'{d} days'
    if h < 10: h = '0' + str(int(h))
    if m < 10: m = '0' + str(int(m))
    if s < 10: s = '0' + str(int(s))
    
    return fr'{d} {h}:{m}:{s}'

def profit_table(df):
    
    info = df.copy()
    info['profit per 100000 coins'] = info['profit per hour'] / info['price'] * 100000
    info['payback period'] = info['price'] / (info['profit per hour'] / 60 / 60)
    for i in range(len(info)):
        info.iloc[i, -1] = my_time_d(info.iloc[i, -1])
    
    return info

def invest_in(df, top=10):
    
    print('\nInvest in:')
    
    for i in range(top):
        print(f""\nTOP {i+1}\n{info.index[i]}:\nProfit for 100000 coins per hour: {round(info.iloc[i, -2], 2)}\nUpgrade costs {info.iloc[i,-3]} coins\nPayback period - {info.iloc[i, -1]}"")

df = pd.DataFrame(columns=['level', 'profit per hour', 'price'])
df.index.names = ['card name']

# Markets
df.loc['Fan tokens'] = [9, 1630, 85572]
df.loc['Staking'] = [10, 1100, 48785]
df.loc['BTC pairs'] = [10, 74, 3485]
df.loc['ETH pairs'] = [10, 74, 4182]
df.loc['Top 10 cmc pairs'] = [8, 128, 5516]
df.loc['GameFi tokens'] = [12, 147, 21407]
df.loc['Defi2.0 tokens'] = [8, 64, 2758]
df.loc[""SocialFi tokens""] = [12, 105, 21407]
df.loc[""Meme coins""] = [6, 154, 5307]
df.loc['Shit coins'] = [9, 1010, 42786]
df.loc[""Margin trading x10""] = [9, 473, 21393]
df.loc[""Margin trading x20""] = [10, 643, 34847]
df.loc[""Margin trading x30""] = [9, 859, 29950]
df.loc[""Margin trading x50""] = [15, 2830, 3322971]
df.loc[""Margin trading x75""] = [9, 1890, 64179]
df.loc[""Margin trading x100""] = [10, 1790, 69693]
df.loc[""Derivatives""] = [10, 910, 34847]
df.loc[""Prediction markets""] = [10, 634, 24393]
df.loc[""Web3 generation""] = [9, 1350, 55621]
df.loc[""DAO""] = [11, 484, 42813]
df.loc['P2P trading'] = [8, 626, 23167]
df.loc[""Trading bots""] = [8, 313, 11584]

# PR&Team
df.loc['Support team'] = [9, 120, 6418]
df.loc['HamsterBook'] = [9, 120, 4279]
df.loc['X'] = [9, 137, 4706]
df.loc['Cointelegraph'] = [11, 79, 8344]
df.loc['HamsterTube'] = [11, 177, 14304]
df.loc[""HamsterGram""] = [11, 98, 11920]
df.loc[""TicTok""] = [11, 197, 17880]
df.loc[""Coindesk""] = [8, 128, 5516]
df.loc['Influencers'] = [11, 531, 59600]
df.loc['CEO'] = [9, 172, 8557]
df.loc['IT Team'] = [10, 441, 27877]
df.loc['Marketing'] = [8, 112, 5516]
df.loc[""Partnership program""] = [11, 138, 11920]
df.loc['Product team'] = [9, 172, 8557]
df.loc[""BisDev team""] = [12, 105, 21407]
df.loc[""Two factor authentication""] = [14, 301, 159841]
df.loc[""UX and UI team""] = [10, 322, 10593]
df.loc[""Security team""] = [11, 393, 23840]
df.loc[""QA Team""] = [11, 400, 54587]
df.loc[""Antihacking shield""] = [6, 154, 5307]
df.loc[""Risk management team""] = [10, 487, 22877]
df.loc[""Security Audition""] = [4, 123, 4654]
df.loc[""Anonymous transactions ban""] = [11, 590, 21456]
df.loc[""Blocking suspicious accounts""] = [10, 294, 17423]


# Legal
df.loc['KYC'] = [9, 17, 856]
df.loc['KYB'] = [9, 103, 4279]
df.loc['Legal opinion'] = [7, 90, 3733]
df.loc[""SEC trasparancy""] = [11, 118, 28608]
df.loc['Anti money loundering'] = [9, 481, 25671]
df.loc['Licence UAE'] = [9, 962, 42786]
df.loc['Licence Europe'] = [9, 1230, 42786]
df.loc['Licence Asia'] = [7, 555, 18667]
df.loc['Licence South America'] = [7, 585, 18667]
df.loc['Licence Australia'] = [10, 1250, 69693]
df.loc[""Licence North America""] = [9, 1640, 85572]
df.loc['Licence Nigeria'] = [9, 292, 12836]

# Specials
df.loc['Top 10 Global Ranking'] = [9, 2060, 85572]
# df.loc['Venom Blockchain'] = [6, 2170, 39799]
df.loc['Special Hamster Conference'] = [10, 1650, 69693]
df.loc['Apps Center Listing'] = [7, 1500, 56002]
df.loc[""Bitcoin Pizza Day""] = [8, 161, 5516]
df.loc[""There are two chairs""] = [4, 2450, 77566]
df.loc[""Short squeeze""] = [4, 1220, 54296]
df.loc[""USDT on TON""] = [9, 2310, 85572]
df.loc[""21,000,000 CEOs""] = [9, 515, 21393]
df.loc[""Add contract with a football club""] = [7, 2620, 93336]




info = profit_table(df)
info = info.sort_values(by='profit per 100000 coins')[::-1]

invest_in(info, top=3)"
bvgr5Hmj,Untitled,poxipox,Lua,Thursday 23rd of May 2024 12:23:40 PM CDT,"#team_full {
	display: flex;
	flex-direction: column;
	width: 100%;
}

#team_full .list {
	text-decoration:none;
	width: 100%;
	margin-top:10px;
	min-height:40px;
	background: rgb(37,37,37,0.6);
	display: flex;
	border-radius: 2px;
	flex-wrap: wrap;
	gap: 0px; /* Odstęp między divami */
	padding: 5px;
	box-sizing: border-box;
	align-items: center;
}


#team_full .list > div:nth-child(1){
	width: 100px;
	text-align:center;
	font-size:14px;
}

#team_full .list > div:nth-child(2){
	width: 100px;

	font-size:12px;
	text-align:center;
}
#team_full .list > div:nth-child(3){
	width: 200px;
		margin-left:10px;

}"
j6bcKHZw,Untitled,vatman,Python,Thursday 23rd of May 2024 12:22:23 PM CDT,"import numpy as np
import itertools
import random
import matplotlib.pyplot as plt
import networkx as nx
from networkx.drawing.layout import fruchterman_reingold_layout
from sklearn.cluster import KMeans

np.random.seed(4)

VERTEX = 1.0
EGDE = 0.006
WEGDE = 0.0001
POPUL_LENGTH = 50
GRAPH_LENGTH = 4
N_CLUSTERS = 4  # должно равняться GRAPH_LENGTH


def data(n):

    prufer_sequence = np.random.randint(0, n, n - 2)

    G1 = nx.from_prufer_sequence(prufer_sequence)

    pos = fruchterman_reingold_layout(G1, dim=2)

    edge_points = [pos[node] for node in G1.nodes]

    vectors = []
    for point in edge_points:
        for _ in range(10):
            vectors.append(point + np.random.normal(size=2) * 0.05)
    return vectors


def cluster_data(vectors, n_clusters):
    # Преобразование списка векторов в массив NumPy для кластеризации
    vectors = np.array(vectors)

    # Создание модели K-средних с заданным количеством кластеров
    kmeans = KMeans(n_clusters=n_clusters)

    # Выполнение кластеризации
    kmeans.fit(vectors)

    # Получение центроидов кластеров
    centroids = kmeans.cluster_centers_

    return centroids


def visualize_graph(vectors, selected_vectors, G):
    for point in vectors:
        plt.scatter(point[0], point[1], color=""b"")
    for node in selected_vectors:
        plt.scatter(node[0], node[1], color=""r"")
    pos = {
        node: (selected_vectors[node][0], selected_vectors[node][1])
        for node in G.nodes()
    }
    nx.draw(G, pos, with_labels=False, node_size=0, edge_color=""k"")
    plt.show()


def get_zero_population_graph(data, length_population=50, graph_length=3):
    zero_population_graph = []
    data_list = list(data)
    for i in range(length_population):
        selected_elements = np.array(random.sample(data_list, graph_length))
        prufer_sequence = np.random.randint(0, graph_length, graph_length - 2)
        G1 = nx.from_prufer_sequence(prufer_sequence)
        if i == 0:
            zero_population = np.copy(selected_elements)
        else:
            zero_population = np.concatenate(
                [zero_population, selected_elements], axis=0
            )
        zero_population_graph.append(G1)

    zero_population = np.vsplit(zero_population, length_population)
    return zero_population, zero_population_graph


def calculate_vertex_energy(vertex, vectors, k):
    distances = [np.linalg.norm(vertex - vector) for vector in vectors]

    if 0.0 in distances:
        distances[distances.index(0.0)] = np.inf

    sorted_indices = np.argsort(distances)

    nearest_vector = sorted_indices[0]

    energy = 0
    energy += k * np.linalg.norm(vertex - vectors[nearest_vector]) ** 2
    return energy


def calculate_edge_energy(edge, vectors, k):
    v1, v2 = vectors[edge[0] - 1], vectors[edge[1] - 1]
    return k * np.linalg.norm(v1 - v2) ** 2


def calculate_wedge_energy(wedge, vectors, k):
    v1, v2, v3 = vectors[wedge[0] - 1], vectors[wedge[1] - 1], vectors[wedge[2] - 1]
    return k * np.linalg.norm(v1 + v3 - 2 * v2) ** 2


def fitness_function(data, points, graph):
    fitness = 0
    for node in graph.nodes:
        vertex_energy = calculate_vertex_energy(points[int(node) - 1], data, VERTEX)
        fitness += vertex_energy
    for edge in graph.edges:
        edge_energy = calculate_edge_energy(edge, points, EGDE)
        fitness += edge_energy
    sum_wedge_energy = 0.0
    for nodes in itertools.combinations(graph.nodes, 3):
        if graph.has_edge(nodes[0], nodes[1]) and graph.has_edge(nodes[0], nodes[2]):
            wedge_energy = calculate_wedge_energy(
                [nodes[1], nodes[0], nodes[2]], points, WEGDE
            )
            sum_wedge_energy += wedge_energy
        elif graph.has_edge(nodes[0], nodes[1]) and graph.has_edge(nodes[1], nodes[2]):
            wedge_energy = calculate_wedge_energy(nodes, points, WEGDE)
            sum_wedge_energy += wedge_energy
        elif graph.has_edge(nodes[0], nodes[2]) and graph.has_edge(nodes[1], nodes[2]):
            wedge_energy = calculate_wedge_energy(
                [nodes[1], nodes[2], nodes[0]], points, WEGDE
            )
            sum_wedge_energy += wedge_energy
    fitness += sum_wedge_energy
    return 1000 - fitness


def get_zero_population(seed, count_population, demention_population):
    zero_population = np.random.uniform(
        -2.0, 2.0, (count_population, demention_population)
    )
    return zero_population


def get_psi(g, NP, Lambda):
    psi = ((g) * NP + 1) ** (1 / Lambda)
    return psi


def select_reference_vertor(data, clear_generation, graph, NP, g):
    reference_vector = None
    array_fitness_value = 0.0
    sum_arr = 0.0
    arr_ver = 0.0
    psi = get_psi(g, NP, POPUL_LENGTH)
    for item in range(len(clear_generation)):
        num = fitness_function(data, clear_generation[item], graph[item])

        array_fitness_value = np.append(array_fitness_value, num**psi)
        sum_arr += num**psi
    for i in array_fitness_value:
        arr_ver = np.append(arr_ver, i / sum_arr)

    id = np.random.choice(len(arr_ver), p=arr_ver)
    reference_vector = clear_generation[id - 2]

    return reference_vector


def calculate_A(x_min, x_max, x_r, e):
    return np.arctan((x_max - x_r) / e) - np.arctan((x_min - x_r) / e)


def calculate_e(g, NP, D):
    return 1 / ((g) * (NP) + 1) ** (1 / (2 * D))


def generate_potential_offspring(x_r, e, A):
    return x_r + e * np.tan((np.random.rand() - 0.5) * A)


def sofa(zero_population, graph, data_cloud, fitness, mod, steps_number, epsilon):
    # TODO add data_cloud,fitness,mod,epsilon,true_answer
    start_population = np.copy(zero_population)
    mutant_populaion = np.copy(zero_population)
    arr_value_best_item = np.array(
        [fitness_function(data_cloud, zero_population[0], graph[0])]
    )
    value_best_item = np.copy(arr_value_best_item[0])
    print(f""first_value_best: {value_best_item}"")

    best_item = np.copy(mutant_populaion[0])
    print(f""best_vector1: {best_item}"")
    for item in range(steps_number):
        reference_vector = select_reference_vertor(
            data_cloud, start_population, graph, len(start_population), item
        )
        e = calculate_e(item, len(start_population), len(start_population[0]))
        for i in range(len(start_population)):
            for j in range(len(start_population[0])):
                const_a = calculate_A(-1.0, 1.0, reference_vector[j], e)
                mutant_populaion[i][j] = reference_vector[j] + np.tan(
                    (np.random.random(2) - 0.5) * const_a
                )

        for i in range(len(start_population)):
            fit_mutant_popul = fitness_function(data, mutant_populaion[i], graph[i])
            fit_start_popul = fitness_function(data, start_population[i], graph[i])
            if fit_mutant_popul > fit_start_popul:
                start_population[i] = np.copy(mutant_populaion[i])
                if fit_mutant_popul > value_best_item:
                    value_best_item = fit_mutant_popul
                    print(f""value_best_item {value_best_item}"")
                    best_item = np.copy(mutant_populaion[i])
        print(f""step: {item}"")

        arr_value_best_item = np.append(arr_value_best_item, value_best_item)

    print(f""best vector2: {best_item}"")
    print(f""global maximum: {value_best_item}"")
    index = list(np.arange(1.0, len(arr_value_best_item) + 1, 1))
    return start_population, best_item, value_best_item


if __name__ == ""__main__"":
    data = data(GRAPH_LENGTH)
    steps = int(input(""steps = ""))
    # Кластеризация данных
    centroids = cluster_data(data, N_CLUSTERS)
    a, graph = get_zero_population_graph(centroids, POPUL_LENGTH, GRAPH_LENGTH)
    a, item, b = sofa(a, graph, data, None, None, steps, 0.0001)
    visualize_graph(data, item, graph[0])
"
pCUZR5PC,Untitled,Josif_tepe,C++,Thursday 23rd of May 2024 12:14:42 PM CDT,"#include <bits/stdc++.h>
using namespace std;
const int maxn  = 2e5 + 10;
typedef long long ll;
ll segment_tree[3 * maxn], lazy[3 * maxn], a[maxn];
int n;
void build_tree(int L, int R, int pos) {
    if(L == R) {
        segment_tree[pos] = a[L];
    }
    else {
        int middle = (L + R) / 2;
        build_tree(L, middle, 2 * pos);
        build_tree(middle + 1, R, 2 * pos + 1);
        segment_tree[pos] = segment_tree[2 * pos] + segment_tree[2 * pos + 1];
    }
}
void update(int L, int R, int pos, int i, int j, ll value) {
    if(lazy[pos] > 0) {
        segment_tree[pos] += lazy[pos] * (R - L + 1);
        if(L != R) {
            lazy[2 * pos] += lazy[pos];
            lazy[2 * pos + 1] += lazy[pos];
        }
        lazy[pos] = 0;
    }
    // L R i L R j L R
    if(R < i or j < L) {
        return;
    }
    if(i <= L and R <= j) {
        segment_tree[pos] += value * (R - L + 1);
        if(L != R) {
            lazy[2 * pos] += value;
            lazy[2 * pos + 1] += value;
        }
    }
    else {
        int middle = (L + R) / 2;
        update(L, middle, 2 * pos, i, j, value);
        update(middle + 1, R, 2 * pos + 1, i, j, value);
        segment_tree[pos] = segment_tree[2 * pos] + segment_tree[2 * pos + 1];
    }
}
ll query(int L, int R, int pos, int i, int j) {
    if(lazy[pos] > 0) {
        segment_tree[pos] += lazy[pos] * (R - L + 1);
        if(L != R) {
            lazy[2 * pos] += lazy[pos];
            lazy[2 * pos + 1] += lazy[pos];
        }
        lazy[pos] = 0;
    }
    // L R i L R j L R 
    if(R < i or j < L) {
        return 0;
    }
    if(i <= L and R <= j) {
        return segment_tree[pos];
    }
    int middle = (L + R) / 2;
    return query(L, middle, 2 * pos, i, j) + query(middle + 1, R, 2 * pos + 1, i, j);
}
int main()
{
    ios_base::sync_with_stdio(false);
    int q;
    cin >> n >> q;

    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    build_tree(0, n - 1, 1);
    for(int i = 0; i < q; i++) {
        int type;
        cin >> type;

        if(type == 1) {
            int x, y, u;
            cin >> x >> y >> u;
            update(0, n - 1, 1, x - 1, y - 1, u);

        }   
        else {
            int x;
            cin >> x;
            cout << query(0, n - 1, 1, x - 1, x - 1) << endl;
        } 
    }


    return 0;
}
"
p4czmbVZ,NO_IAT_PROGRAM,Riremito,C++,Thursday 23rd of May 2024 12:14:20 PM CDT,"#include<Windows.h>
#include<winternl.h>

/*
bool __stdcall checkwstr(wchar_t *s1, wchar_t *s2) {
	for (int i = 0; s1[i] && s2[i]; i++) {
		if (s1[i] != s2[i]) {
			return false;
		}
	}
	return true;
}
*/
wchar_t target[128] = { 0 };
wchar_t search_name[128] = { 0 };
bool __stdcall check_module_wstr(wchar_t *s1, wchar_t *s2) {
	wchar_t *s1_name = s1;


	for (int i = 0; s2[i] && i < 127; i++) {
		search_name[i] = (L'a' <= s2[i] && s2[i] <= L'z') ? ((WORD)s2[i] - 0x20) : s2[i];
	}

	for (int i = 0; s1[i] && i < 256; i++) {
		if (s1[i] == L'\\') {
			s1_name = &s1[i + 1];
		}
	}

	for (int i = 0; s1_name[i] && i < 127; i++) {
		target[i] = (L'a' <= s1_name[i] && s1_name[i] <= L'z') ? ((WORD)s1_name[i] - 0x20) : s1_name[i];
	}

	for (int i = 0; target[i] && search_name[i]; i++) {
		if (target[i] != search_name[i]) {
			return false;
		}
	}


	return true;
}

bool __stdcall checkstr(char *s1, char *s2) {
	for (int i = 0; s1[i] && s2[i]; i++) {
		if (s1[i] != s2[i]) {
			return false;
		}
	}
	return true;
}

ULONG_PTR FindModule(WCHAR *wName) {
	PEB *peb = (PEB *)__readfsdword(0x30);
	PEB_LDR_DATA *ldr = peb->Ldr;
	LIST_ENTRY *entry = &ldr->InMemoryOrderModuleList;
	LDR_DATA_TABLE_ENTRY *table_entry = 0;
	for (entry = entry->Flink->Flink; ; entry = entry->Flink) {
		LDR_DATA_TABLE_ENTRY  *table_entry = (LDR_DATA_TABLE_ENTRY *)((ULONG_PTR)entry - 0x08);
		if (!table_entry->DllBase) {
			break;
		}
		if (check_module_wstr(table_entry->FullDllName.Buffer, wName)) {
			return (ULONG_PTR)table_entry->DllBase;
		}
	}
	return 0;
}

/*
ULONG_PTR FindAPI(ULONG_PTR uDll, ULONG_PTR number) {
	IMAGE_DOS_HEADER *image_dos_header = (decltype(image_dos_header))uDll;
	IMAGE_NT_HEADERS *image_nt_headers = (decltype(image_nt_headers))((ULONG_PTR)image_dos_header + image_dos_header->e_lfanew);
	IMAGE_OPTIONAL_HEADER *image_optional_header = &image_nt_headers->OptionalHeader;
	IMAGE_EXPORT_DIRECTORY *image_export_directory = (decltype(image_export_directory))(uDll + (ULONG_PTR)image_optional_header->DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
	ULONG_PTR *function_rva = (ULONG_PTR *)(uDll + image_export_directory->AddressOfFunctions);
	return uDll + function_rva[number - image_export_directory->Base];
}
*/

ULONG_PTR FindAPI_byName(ULONG_PTR uDll, char *cAPI) {
	IMAGE_DOS_HEADER *image_dos_header = (decltype(image_dos_header))uDll;
	IMAGE_NT_HEADERS *image_nt_headers = (decltype(image_nt_headers))((ULONG_PTR)image_dos_header + image_dos_header->e_lfanew);
	IMAGE_OPTIONAL_HEADER *image_optional_header = &image_nt_headers->OptionalHeader;
	IMAGE_EXPORT_DIRECTORY *image_export_directory = (decltype(image_export_directory))(uDll + (ULONG_PTR)image_optional_header->DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
	ULONG_PTR *name_rva = (ULONG_PTR *)(uDll + image_export_directory->AddressOfNames);
	ULONG_PTR *function_rva = (ULONG_PTR *)(uDll + image_export_directory->AddressOfFunctions);
	WORD *name_ordinal = (WORD *)(uDll + image_export_directory->AddressOfNameOrdinals);
	for (DWORD i = 0; i < image_export_directory->NumberOfNames; i++) {
		if (checkstr((char *)(uDll + name_rva[i]), cAPI)) {
			return uDll + function_rva[name_ordinal[i]];
		}
	}
	return 0;
}

// kernel32.dll LoadLibraryW 0x3CA, LoadLibraryA 0x3C7
// user32.dll MessageBoxW 0x86C, MessageBoxA 0x865
// change visual studio project option's entry point to start function, please
int WINAPI start() {
	/*
	ULONG_PTR uDll = FindModule((WCHAR *)L""C:\\WINDOWS\\System32\\KERNEL32.DLL"");
	if (!uDll) {
		uDll = FindModule((WCHAR *)L""C:\\Windows\\syswow64\\kernel32.dll"");
		if (!uDll) {
			return 1;
		}
	}
	*/
	ULONG_PTR uDll = FindModule((WCHAR *)L""kernel32.dll"");
	if (!uDll) {
		return 1;
	}
	HMODULE(WINAPI *_LoadLibraryW)(LPCWSTR) = 0; 
	//_LoadLibraryW = (decltype(_LoadLibraryW))FindAPI(uDll, 0x3CA);
	_LoadLibraryW = (decltype(_LoadLibraryW))FindAPI_byName(uDll, (char *)""LoadLibraryW"");

	if (!_LoadLibraryW) {
		return 2;
	}

	HMODULE hUser32 = _LoadLibraryW(L""user32.dll"");

	if (!hUser32) {
		return 3;
	}

	int (WINAPI *_MessageBoxW)(HWND, LPCWSTR, LPCWSTR, UINT) = 0;
	//_MessageBoxW = (decltype(_MessageBoxW))FindAPI((ULONG_PTR)hUser32, 0x86C);
	_MessageBoxW = (decltype(_MessageBoxW))FindAPI_byName((ULONG_PTR)hUser32, (char *)""MessageBoxW"");

	if (!_MessageBoxW) {
		return 3;
	}

	_MessageBoxW(NULL, L""HELLO WORLD!"", L""TEST"", MB_OK);

	void (WINAPI *_ExitProcess)(UINT) = 0;
	_ExitProcess = (decltype(_ExitProcess))FindAPI_byName(uDll, (char *)""ExitProcess"");

	if (_ExitProcess) {
		_ExitProcess(0); // OK
	}

	// some OS won't kill the process after executing return 0;
	__asm {
		int 3
	}

	return 0;
}"
vJGiWPjh,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Thursday 23rd of May 2024 12:01:30 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_921684.pdf

Working as of:
23 May 2024"
EGPjAqrc,u,portalxwe,GetText,Thursday 23rd of May 2024 11:45:36 AM CDT,"dd









































dddd"
GusVtB5M,d,portalxwe,GetText,Thursday 23rd of May 2024 11:45:21 AM CDT,"d








































d"
pBtrmMVJ,c,portalxwe,GetText,Thursday 23rd of May 2024 11:45:13 AM CDT,"cc






















c"
73gx0uVz,d,portalxwe,GetText,Thursday 23rd of May 2024 11:45:03 AM CDT,"d

































d"
GgeBXj49,xxxx,portalxwe,GetText,Thursday 23rd of May 2024 11:44:55 AM CDT,"s





























s"
CYvQGtir,List of Comics on my iPhone,bomb,PHP,Thursday 23rd of May 2024 11:36:54 AM CDT,"Action Comics #1 (June 1938) DC Comics
- Introduced the modern comic book superhero as we know it. It launched the Golden Age of comic books.

Action Comics #23 (April 1940) DC Comics
- In this issue, the Daily Planet is mentioned for the first time. Lex Luthor also makes his first appearance here.

Action Comics #242 (July 1958) DC Comics
- This issue introduces Brainiac.

Adventure Comics #40 (July 1939) DC Comics
- The Golden Age, crime-fighting version of the Sandman made his first appearance in this issue.

Adventure Comics #247 (April 1958) DC Comics
- The first appearance of the Legion of Super-Heroes. The Legion votes Superboy into their group and then plays a prank on him.

All-Star Comics #3 (January 1941) DC Comics
- The Justice Society of America made its first appearance in this issue.

Amazing Fantasy #15 (August 1962) Marvel Comics
- First appearance of Spiderman

Amazing Spider-Man #2 (May 1963) Marvel Comics
- The Vulture makes his debut in this issue.

Amazing Spider-Man #3 (July 1963) Marvel Comics
- This issue features the debut of Dr. Octopus as a Spider-Man villain.

Amazing Spider-Man #14 (July 1964) Marvel Comics
- The Green Goblin makes his first appearance in this issue. Also, Spider-Man meets the Hulk for the first time in this issue too.

Amazing Spider-Man #238 (March 1983) Marvel Comics
- Ned Leeds, AKA The Hobgoblin, makes his first appearance.

Astonishing Tales #25 (August 1974)
- First Appearance of Dealthlok

Astonishing Tales #29 (January 1975)
- First Appearance of Guardians of the Galaxy

Avengers #1 (September 1963) Marvel Comics
- First Issue of Avengers in their own title

Avenging Spider-Man #9 (September 2012) Marvel Comics
- Carol Danvers makes her debut as Captain Marvel in this issue.

Batman #1 (April 1940) DC Comics
- First Issue of the Batman Series.

Batman #2 (July 1940) DC Comics
- The Joker and Catwoman make their full second appearances in this issue. And this is the first issue where Catwoman is first referred to as, “Catwoman.”

Batman #3 (October 1940) DC Comics
- Features the first appearances of the Puppet Master and of Catwoman in full costume.

Batman #181 (June 1966) DC Comics
- Poison Ivy made her comic book debut in this comic.

Batman #232 (June 1971) DC Comics
- Ra’s Al Ghul makes his debut. Ra’s Al Ghul is the father of Talia and grandfather of Damian Wayne.

Batman #357 (March 1983) DC Comic
- Jason Todd, the second Robin, and Killer Croc debut in this issue.

Batman #428 (December 1988) DC Comics
- Jason Todd, the second Robin, dies in this issue.

Batman: The Dark Knight Returns #1 (December 1985) DC Comics
- Legendary alternative continuity comic where an older, battle-weary Batman takes on Superman.

Batman: The Killing Joke #1 (1988) DC Comics
- The Joker’s origin is reimagined in this issue.

Batman: Vengeance of Bane Special (January 1993) DC Comics
- Bane debuts.

Captain America Comics #1 (March 1941) Marvel Comics
- First Appearance of Captain America (Steve Rogers)

Captain America Comics #3 (April 1941) Timely Comics
- This comic features Stan Lee’s first commissioned work as a writer.

Daredevil #1 (April 1964) Marvel Comics
- Blind lawyer Matt Murdock, AKA Daredevil, makes his first appearance in this issue.

Daredevil #168 (December 1981) Marvel Comics
- Elektra debuts.

Daredevil #181 (April 1981) Marvel Comics
- This issue features the death of Elektra.

Detective Comics #30 (August 1939) DC Comics
- Batman’s fourth-ever appearance occurred in this issue.

Detective Comics #32 (October 1939) DC Comics
- The first comic book where Batman brandishes a gun and kills two criminals.

Detective Comics #33 (November 1939) DC Comics
- Bruce Wayne’s full origin is revealed in this issue.

Detective Comics #38 (April 1940) DC Comics
- Robin the Boy Wonder and Hugo Strange make their first appearances in this issue.

Detective Comics #40 (June 1940) DC Comics
- This issue features the first-ever cover appearance of the Joker. It also features the first appearance and origin of Clayface.

Detective Comics #140 (October 1948) DC Comics
- Edward Nygma, AKA “The Riddler,” made his first appearance in this issue.

Detective Comics #168 (February 1951) DC Comics
- The Joker’s origin is depicted in this issue. Also, this issue marks the first appearance of the Red Hood.

Detective Comics #225 (November 1955) DC Comics
- The first appearance of the Martian Manhunter.

Detective Comics #411 (May 1971) DC Comics
- Talia al Ghul’s first appearance. Talia is the daughter of Ra’s Al Ghul and mother of Damian Wayne.

Fantastic Four #1 (November 1961) Marvel Comics
- First Issue of the Fantastic Four

Fantastic Four #2 (January 1961) Marvel Comics
- The Skrulls, who made their Marvel cinematic universe debut in the Captain Marvel film, made their comic book debut here.

Fantastic Four #3 (March 1962) Marvel Comics
- The Fantastic Four receive their iconic costumes for the first time in this issue.

Fantastic Four #5 (July 1962) Marvel Comics
- This issue features the first appearance and origin story of Doctor Doom.

Fantastic Four #48 (March 1966) Marvel Comics
- The Silver Surfer and Galactus both made their first appearances in this comic.

Fantastic Four #52 (July 1966) Marvel Comics
- T’Challa, King of Wakanda and the Black Panther, makes his debut.

Flash #106 (May 1959) DC Comics
- The Flash villains Gorilla Grodd and Pied Piper made their first appearances in this issue.

Green Lantern #76 (April 1970) DC Comics
- First time Green Lantern and Green Arrow team up in an issue.

Green Lantern #85 (July 1971) DC Comics
- This was a controversial comic that highlighted drug addiction in the story.

Hero for Hire #1 (June 1972) Marvel Comics
- Luke Cage and Diamondback make their debuts.

Incredible Hulk #1 (May 1962) Marvel Comics
- First Hulk, he is dipicted in grey

Incredible Hulk #2 (July 1962) Marvel Comics
- The Hulk was gray-colored in issue #1. He is green-colored for the first time in this issue.

Incredible Hulk #180 (October 1974) Marvel Comics
- Wolverine makes his first cameo appearance in a single and final panel of this comic. Wolverine’s first full appearance occurred in the next issue.

Incredible Hulk #181 (November 1974) Marvel Comics
- Wolverine makes his first full appearance.

Incredible Hulk #271 (February 1982) Marvel Comics
- Rocket Racoon makes his first appearance.

Iron Fist #14 (August 1977) Marvel Comics
- Perennial X-Men villain and sometimes antihero Sabretooth debuts in this issue.

Iron Man #55 (February 1973) Marvel Comics
- Thanos the Mad Titan, Drax the Destroyer, Starfox, and the Mentor all make their debuts in this issue.

Journey Into Mystery #83 (August 1962) Marvel Comics
- The Mighty Thor makes his first appearance in this issue.

Journey into Mystery #85 (October 1962) Marvel Comics
- Loki, the god of mischief, makes his debut in this issue.

Justice League of America #1 (November 1960) DC Comics
- First JLA team comic.

Malibu Sun #13 (May 1992)
- Todd McFarlane’s Spawn character made its first promotional appearance in this issue.

Marvel Premiere #15 (May 1974) Marvel Comics
- Iron Fist makes his debut.

Marvel Spotlight #5 (August 1972) Marvel Comics
- Johnny Blaze, AKA Ghost Rider, debuts in this issue.

Marvel Super Heroes #18 (January 1969) Marvel Comics
- The first iteration of the Guardians of the Galaxy appears in this issue.

More Fun Comics #73 (November 1941) DC Comics
- Aquaman, Green Arrow, and Speedy all make their first appearances in this one issue.

More Fun Comics #101 (January 1945) DC Comics
- This comic features the first appearance and origin of Superboy.

New Mutants #87 (March 1990) Marvel Comics
- Cable makes his first appearance in this issue.

New Teen Titans #2 (December 1980) DC Comics
- Deathstroke the Terminator debuts.

Saga of the Swamp Thing #37 (June 1985) DC Comics
- John Constantine makes his debut.

Silver Streak Comics #6 (September 1940)
- Bart Hill, the Golden Age version of Daredevil, also known as the Death-Defying Daredevil at Dynamite Comics, first appeared in this issue.

Silver Surfer #44 (December 1990) Marvel Comics
- The Infinity Gauntlet debuts.

Spawn #1 (May 1992) Image Comics
- First in-continuity Image universe appearance of Spawn. It is the longest-running comic in the Image universe.

Strange Tales #110 (July 1963) Marvel Comics
- Doctor Strange made his character debut in this issue. Wong, Nightmare, and the Ancient One also made their first appearances here.

Superman #1 (June 1939) DC Comics
- Solo debut of the character

Tales of Suspense #40 (April 1963) Marvel Comics
- This comic marked the first appearance of Iron Man’s gold-colored armor.

Tales to Astonish #27 (January 1962) Marvel Comics
- Hank Pym, the original Ant-Man, makes his debut in this issue.

The Amazing Spider-Man #121 (June 1973) Marvel Comics
- Gwen Stacy dies in this issue. This moment was a big deal in 1973.

The Amazing Spider-Man #129 (February 1974) Marvel Comics
- Frank Castle, the Punisher, appeared for the first time in this issue.

The Brave and the Bold #25 (September 1959) DC Comics
- The Suicide Squad made its first appearance in this comic.

The Brave and the Bold #28 (March 1960) DC Comics
- The Justice League marks its debut in this issue.

The Walking Dead #1 (October 2003) Image Comics
- Rick Grimes makes his debut in this issue. This was the issue that kicked off a global fanbase phenomenon.

The Walking Dead #2 (October 2003) Image Comics
- This issue features the first appearances of Lori Grimes, Carl Grimes, and Glenn.

The Walking Dead #19 (June 2005) Image Comics
- Michonne makes her first appearance here.

The Walking Dead #27 (March 2006) Image Comics
- The Governor, Bruce, Gabriel, and Martinez all make their first appearances in this issue.

Wolverine #1 (September 1982) Marvel Comics
- Wolverine’s first solo comic books series; limited issue series.

X-Men #101 (October 1976) Marvel Comics
- The Phoenix Force debuts in this issue.

X-Men #137 (June 1980) Marvel Comics 
- Death of Phoenix (Jean Grey)
"
66wvjMHx,messagebee-hold-ready-sms,Dyrcona,PostgreSQL,Thursday 23rd of May 2024 11:18:06 AM CDT,"INSERT INTO action_trigger.event_definition
(owner, active, name, hook, validator, reactor, delay, max_delay,
 usr_field, opt_in_setting, delay_field, granularity, retention_interval)
VALUES
(1, 't', 'MessageBee Hold Ready for Pickup SMS Notification', 'hold.available', 'HoldIsAvailable',
 'NOOP_True', '00:30:00', NULL, 'usr', NULL, 'shelf_time', 'messagebee-hold-ready-sms', '180 days')
 RETURNING id;
"
XX5paCMh,IP-Multi-Tool Win10+,DSTAT,Batch,Thursday 23rd of May 2024 11:13:44 AM CDT,"@echo off
Rem This tool is intended for educational and research purposes only. The author of this tool does not condone illegal activities, and the tool should not be used to cause harm to any individual, service, or organization. By using this tool, you acknowledge that any misuse of the tool is entirely your responsibility, and you accept full liability for your actions.
Rem Paste this code into notepad and save it as IP-Multi-Tool.bat
Rem Coded by DSTAT. Instagram: @DDoS_Filter
Rem Copyright © [2019] [@DDoS_Filter] https://www.copyright.gov/dmca/
Rem http://ddosfilter.net/
Rem https://pastebin.com/WbgYDjGS | Original
Rem https://pastebin.com/XX5paCMh | Win10+
Rem Option 9 opens the last API response in a text document. (Works with options 1,2,5,6,7)
title IP Multi Tool
color 0A
setlocal ENABLEDELAYEDEXPANSION
set webclient=webclient
set localversion=1.9.0.0
if exist ""%temp%\%webclient%.vbs"" del ""%temp%\%webclient%.vbs"" /f /q /s >nul
:menu
mode con lines=24 cols=70
set ip=127.0.0.1
set action=0
cls
echo  IP-Multi-Tool v%localversion%                         Coded by @DDoS_Filter
echo                                  Menu
echo.
echo                            View Your IP: (1)
echo.
echo                            Lookup An IP: (2)
echo.
echo                             Ping An IP: (3)
echo.
echo                          TraceRoute An IP: (4)
echo.
echo                           PortScan An IP: (5)
echo.
echo                         Domain To IP Lookup: (6)
echo.
echo                            WhoIs Lookup: (7)
echo.
echo                              NSLookup: (8)
echo.
echo                         View Response Text: (9)
echo.
echo                         Check For Updates: (10)
echo.
:action
set /p action=Type your choice. 1,2,3,4,5,6,7,8,9,10: 
if '%action%'=='1' set ""sUrl=https://api.ddosfilter.net/IPLookupAPI.php"" & set ""sRequest=key=riB7e0h8BROyidr8KIdEJOfRAfrOsweN"" & goto apirequest
if '%action%'=='2' goto iplookup
if '%action%'=='3' goto ipping
if '%action%'=='4' goto traceroute
if '%action%'=='5' goto portscan
if '%action%'=='6' goto domain2ip
if '%action%'=='7' goto whois
if '%action%'=='8' goto nslookup
if '%action%'=='9' goto opentext
if '%action%'=='10' goto update_ipmt
echo.
echo Please enter a valid choice.
echo.
goto action
:apirequest
if exist ""%temp%\response.txt"" del ""%temp%\response.txt"" /f /q /s >nul
if %action% NEQ update (
set rqst_type=POST
cls
echo.
echo  Waiting for API response. . .
)
curl --connect-timeout 5 --max-time 10 -s -H ""User-Agent: IP-Multi-Tool-By-DDoS_Filter"" -X %rqst_type% -d ""%sRequest%"" -o ""%temp%\response.txt"" ""%sUrl%""
if %errorlevel% NEQ 0 (
echo.
echo  Did not receive a response from the API.
echo.
pause
goto menu
)
if %action% EQU update if '%dlupdate%'=='y' goto update
find ""error code: 1006"" %temp%\response.txt >nul
if %errorlevel% EQU 0 goto banned
find ""One more step"" %temp%\response.txt >nul
if %errorlevel% EQU 0 goto cbanned
find ""Web server is down"" %temp%\response.txt >nul
if %errorlevel% EQU 0 goto offline
find ""Connection timed out"" %temp%\response.txt >nul
if %errorlevel% EQU 0 goto offline
find ""404 Not Found"" %temp%\response.txt >nul
if %errorlevel% EQU 0 goto offline
goto verified
:banned
cls
echo.
echo  Error: You have been banned for abuse.
ping 127.0.0.1 -n 4 -w 1000 >nul
del ""%temp%\response.txt"" /f /q /s >nul
exit
:cbanned
cls
echo.
echo  Error: Your IP has been blocked for security purposes.
echo  Contact @DDoS_Filter on instagram for help.
echo  Sorry for any inconvinience.
echo  If you are using a VPN and have received this error message,
echo  turn off the VPN, and try again.
ping 127.0.0.1 -n 8 -w 1000 >nul
del ""%temp%\response.txt"" /f /q /s >nul
exit
:offline
cls
echo.
echo  Error: The API is offline.
ping 127.0.0.1 -n 4 -w 1000 >nul
del ""%temp%\response.txt"" /f /q /s >nul
goto menu
:verified
set ""data=findstr /R /N ""^^"" %temp%\response.txt | find /C "":"""",
for /f %%i in ('!data!') do set lines=%%i
if %lines% LSS 10 (
set /a lines=20
) else (
set /a lines=%lines% + 3
)
if '%action%'=='update' goto checkversion
if '%action%'=='1' goto parseiplookup
if '%action%'=='2' goto parseiplookup
if '%action%'=='5' goto parsepscan
if '%action%'=='6' goto parsedomain2ip
if '%action%'=='7' goto parsewhois
goto menu
:iplookup
cls
echo.
echo                          Type an IP to lookup
echo.
set /p ip=IP: 
set ""sUrl=https://api.ddosfilter.net/IPLookupAPI.php""
set ""sRequest=key=riB7e0h8BROyidr8KIdEJOfRAfrOsweN&ip=%ip%""
goto apirequest
:parseiplookup
mode con lines=%lines% cols=70
cls
echo.
for /f ""delims= 	"" %%i in ('findstr /i "":"" %temp%\response.txt') do (
	set data=%%i
	echo !data!
)
echo.
pause
goto menu
:ipping
rem Inteli-Ping by @DDoS_Filter
set /a replies=0
set /a timeouts=0
set /a packets_sent=0
set responsetime=N/A
set avgtime=N/A
set min=N/A
set max=N/A
cls
echo.
echo                       Type an IP or URL to ping
echo.
set /p ip=Host: 
echo.
set /p ipv6= IPv6? y/n: 
if '%ipv6%'=='y' (
	set tokens=5
	set searchstring=: time
) else (
	set tokens=7
	set searchstring=time
)
mode con lines=16 cols=30
:ping
set success=false
for /F ""tokens=%tokens% delims=<>= "" %%i in ('ping -n 1 %ip% ^| find ""%searchstring%""') do (
	set responsetime=%%i
	set responsetime=!responsetime:~0,-2!
	set success=true
)
set /a packets_sent=packets_sent + 1
if %replies% EQU 0 if %success% EQU true if %replies% NEQ N/A set min=99999 & set max=0
if %success% EQU false (
	set status=Host is offline
	set /a timeouts=timeouts + 1
	color 0C
) else (
	set status=Host is online
	set /a replies=replies + 1
	set /a totaltime=%totaltime% + %responsetime%
	set /a avgtime=totaltime / replies
	color 0A
	if %responsetime% LSS %min% (
		set min=%responsetime%
	)
	if %responsetime% GTR %max% (
		set max=%responsetime%
	)
)
set /a packet_loss=((packets_sent-timeouts)*100)/packets_sent
cls
echo Pinging %ip%
echo.
echo  %status%^^!
echo.
echo  Successful Replies: %replies%
echo.
echo  Requests Timed Out: %timeouts%
echo.
echo  Success Percentage: %packet_loss%
echo.
echo  Avrg Response Time: %avgtime%ms
echo.
echo  Last Response Time: %responsetime%ms
echo.
echo  Min: %min%ms	Max: %max%ms
ping 127.0.0.1 -n 2 -w 1000 >nul
goto ping
:traceroute
mode con lines=30 cols=100
cls
echo.
echo                                   Type an IP or URL to trace route
echo.
set /p ip=Host: 
tracert %ip%
echo.
pause
goto menu
:portscan
cls
echo.
echo                        Type a host to port scan
echo.
set /p ip=Host: 
set ""sUrl=https://api.ddosfilter.net/PortScanAPI.php""
set ""sRequest=key=riB7e0h8BROyidr8KIdEJOfRAfrOsweN&ip=%ip%""
goto apirequest
:parsepscan
mode con lines=%lines% cols=70
cls
echo.
for /f ""delims= 	"" %%i in ('findstr /i ""Results Port Error"" %temp%\response.txt') do (
	set data=%%i
	echo !data!
)
echo.
pause
goto menu
:domain2ip
cls
echo.
echo                         Type a domain to lookup
echo.
set /p ip=Domain: 
set ""sUrl=https://api.ddosfilter.net/DomainToIP.php""
set ""sRequest=key=riB7e0h8BROyidr8KIdEJOfRAfrOsweN&host=%ip%""
goto apirequest
:parsedomain2ip
mode con lines=%lines% cols=70
cls
echo.
for /f ""delims= 	"" %%i in ('findstr /i ""IP Error"" %temp%\response.txt') do (
	set data=%%i
	echo !data!
)
echo.
pause
goto menu
:whois
cls
echo.
echo                       Type a host to WhoIs lookup
echo.
set /p ip=Host: 
set ""sUrl=https://api.ddosfilter.net/WhoIsAPI.php""
set ""sRequest=key=riB7e0h8BROyidr8KIdEJOfRAfrOsweN&host=%ip%""
goto apirequest
:parsewhois
mode con lines=%lines% cols=100
cls
echo.
for /f ""delims= 	"" %%i in ('findstr /i "":"" %temp%\response.txt') do (
	set data=%%i
	echo !data!
)
echo.
pause
goto menu
:nslookup
cls
echo.
echo                    Type an IP or Domain to NSLookup
echo.
set /p ip=Host: 
cls
echo.
echo Name Server Look up using Cloudflare DNS. . .
echo.
nslookup %ip% 1.1.1.1
echo.
pause
goto menu
:opentext
if exist ""%temp%\response.txt"" start %temp%/response.txt
goto menu
:update_ipmt
cls
set action=update
set rqst_type=GET
echo.
echo  Checking for updates. . .
set ""sUrl=https://api.ddosfilter.net/ipmultitoolversion.txt""
goto apirequest
:checkversion
set /p version=<""%temp%\response.txt""
if %localversion% EQU %version% (
del ""%temp%\response.txt"" /f /q /s >nul
echo.
echo  You are on the latest version^^!
echo.
echo  Version: %version%
echo.
pause
goto menu
)
cls
echo.
echo  An update is available for IP Multi Tool^^!
echo.
echo.  New version: %version%
echo.
echo   Your version: %localversion%
echo.
set /p dlupdate= Would you like to download the update? y/n: 
if '%dlupdate%'=='y' (
cls
echo.
echo  Downloading to Downloads folder. . .
echo.
set ""sUrl=https://pastebin.com/raw/XX5paCMh""
goto apirequest
:update
find ""6Ip5ithetropU1lSpiwRlcrLN5ro6er7"" %temp%\response.txt >nul
if %errorlevel% NEQ 0 (
echo  Error downloading update^^!
echo.
pause
goto menu
)
move %temp%\response.txt C:\Users\%username%\Downloads\IP-Multi-Tool.bat >nul
set dlupdate=0
echo  Starting updated version. . .
ping 127.0.0.1 -n 2 -w 1000 >nul
start C:\Users\%username%\Downloads\IP-Multi-Tool.bat
exit
) else (
goto menu
)
Rem Coded by DSTAT. Instagram: @DDoS_Filter
Rem http://ddosfilter.net/
Rem https://pastebin.com/WbgYDjGS
Rem https://pastebin.com/XX5paCMh"
FUB4CvKq,G2A.com WARNING!! SEVERE VIRUS THREAT!!,kisazeky,Python,Thursday 23rd of May 2024 11:00:31 AM CDT,"DETAILS

Names
G2A.com Free Gift Card Guide May 2024 FIX.exe

Basic properties
MD5
490cd75e12d983b917e7a102d6b874ab
SHA-1
cfde34dfb984cc0eceeccf0242d5b7c306435e47
SHA-256
e9121ccb0c3b927afa18580ff54fd1db664b373a57e4d9173077547e15602182
Vhash
01503e0f7d1019z301lz15z17z
Authentihash
c237fcb67538d487443ecc9bd1a1ccf6ed09d5acb505e05b8f7818f464f5c6ed
Imphash
5d02f6de12eb07fb22fe87e05e50d6a0
SSDEEP
3072:SNqMk1mRwYAQBspaGYizD1mRwYAQBspaGYize:Iq38R/AQBq78R/AQBqG
TLSH
T175A3F119BEBDE903C002A1BD943A774435A26E6C96C11677AC3A03BCF6F6CD815BE074
File type
Win32 EXE
executable
windows
win32
pe
peexe
Magic
PE32 executable (GUI) Intel 80386, for MS Windows, UPX compressed
TrID
UPX compressed Win32 Executable (34.7%)   Win32 EXE Yoda's Crypter (34.1%)   Win32 Dynamic Link Library (generic) (8.4%)   Win16 NE executable (generic) (6.4%)   Win32 Executable (generic) (5.7%)
DetectItEasy
PE32   Packer: UPX (1.24) [NRV,brute]
Magika
CT_PEBIN
File size
99.70 KB (102096 bytes)
PEiD packer
UPX 2.90 [LZMA] -> Markus Oberhumer, Laszlo Molnar & John Reiser 

DETECTION

Popular threat label
worm.mydoom/emailworm
Threat categories
worm
trojan
Family labels
mydoom
emailworm

Security vendors' analysis
AhnLab-V3
Win32/Mydoom.worm.22020.H
Alibaba
Trojan:Win32/runner.ali1000044
ALYac
Win32.Worm.MyDoom.NF
Antiy-AVL
Worm[Email]/Win32.Mydoom
Arcabit
Win32.Worm.MyDoom.NF
Avast
Win32:Mydoom-EG [Trj]
Avert Labs
GenericRXLN-WS!490CD75E12D9
AVG
Win32:Mydoom-EG [Trj]
Avira (no cloud)
TR/Agent.Blkhl.dam
Baidu
Win32.Worm-Email.Mydoom.a
BitDefender
Win32.Worm.MyDoom.NF
BitDefenderTheta
AI:Packer.37F6D4D41F
Bkav Pro
W32.MyDoomLB.Worm
ClamAV
Win.Worm.Mydoom-5
CrowdStrike Falcon
Win/malicious_confidence_100% (W)
Cybereason
Malicious.e12d98
Cylance
Unsafe
Cynet
Malicious (score: 100)
DeepInstinct
MALICIOUS
DrWeb
Win32.HLLM.MyDoom.61471
Elastic
Malicious (moderate Confidence)
Emsisoft
Win32.Worm.MyDoom.NF (B)
eScan
Win32.Worm.MyDoom.NF
ESET-NOD32
Win32/Mydoom.Q
Fortinet
W32/MyDoom.M@mm
GData
Win32.Trojan.PSE1.1019TUY
Google
Detected
Gridinsoft (no cloud)
Worm.Win32.Mydoom.ka!i
Ikarus
Email-Worm.Win32.Mydoom
Jiangmin
I-Worm/Zhelatin.sq
K7AntiVirus
EmailWorm ( 0000439f1 )
K7GW
EmailWorm ( 0000439f1 )
Kaspersky
Email-Worm.Win32.Mydoom.l
Lionic
Worm.Win32.Mydoom.ts9n
Malwarebytes
Generic.Malware.AI.DDS
MAX
Malware (ai Score=89)
MaxSecure
Trojan.Malware.121218.susgen
McAfee Scanner
Real Protect-LS!490CD75E12D9
Microsoft
Worm:Win32/Mydoom!pz
NANO-Antivirus
Trojan.Win32.Mydoom.cuyllc
Palo Alto Networks
Generic.ml
Panda
W32/Mydoom.DN.worm
QuickHeal
Trojan.IGENERICPMF.S15180454
Rising
Worm.Mail.Win32.Mydoom.l (CLASSIC)
Sangfor Engine Zero
Suspicious.Win32.Save.a
SecureAge
Malicious
Skyhigh (SWG)
BehavesLike.Win32.Mydoom.nc
Sophos
W32/MyDoom-N
Symantec
W32.Mydoom.gen@mm
TEHTRIS
Generic.Malware
Tencent
Worm.Win32.Mydoom.l
Trapmine
Malicious.high.ml.score
Trellix (FireEye)
Generic.mg.490cd75e12d983b9
TrendMicro
WORM_MYDOOM.GEN
TrendMicro-HouseCall
WORM_MYDOOM.GEN
Varist
W32/Mydoom.CJDZ-5239
VBA32
Backdoor.Shiz
VIPRE
Win32.Worm.MyDoom.NF
VirIT
I-WORM.MyDoom.I
ViRobot
I-Worm.Win32.Mydoom.35784
Webroot
W32.Mydoom.Gen
WithSecure
Email-Worm:W32/Mydoom.gen!A
Xcitium
Worm.Win32.Mydoom.Q@308v
Yandex
I-Worm.Mydoom.CR
Zillya
Worm.Mydoom.Win32.3
ZoneAlarm by Check Point
Email-Worm.Win32.Mydoom.l
Zoner
Worm.Win32.Mydoom.24203
Acronis (Static ML)
Undetected
AliCloud
Undetected
CMC
Undetected
Kingsoft
Undetected
SUPERAntiSpyware
Undetected
TACHYON
Undetected
Avast-Mobile
Unable to process file type
BitDefenderFalx
Unable to process file type
Symantec Mobile Insight
Unable to process file type
Trustlook
Unable to process file type
SentinelOne (Static ML)"
CUKm2iQY,ДЗ Кадровый учет продвинутый,TeT91,C#,Thursday 23rd of May 2024 10:48:43 AM CDT,"using System;
using System.Collections.Generic;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandAddEmployee = ""1"";
            const string CommandDeleteEmployee = ""2"";
            const string CommandShowEmployesByJob = ""3"";
            const string CommandExit = ""Exit"";

            List<string> fullNames = new List<string>();
            List<string> jobs = new List<string>();

            bool isInProgress = true;

            while (isInProgress)
            {
                Console.WriteLine($""Введите команду: "" +
                    $""\n {CommandAddEmployee} - Добавить работника "" +
                    $""\n {CommandDeleteEmployee} - Удлить работника "" +
                    $""\n {CommandShowEmployesByJob} - Показать работников одной должности "" +
                    $""\n {CommandExit} - выход "");

                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandAddEmployee:
                        AddEmployee(jobs, fullNames);
                        break;

                    case CommandDeleteEmployee:
                        TryDeleteEmployee(jobs, fullNames);
                        break;

                    case CommandShowEmployesByJob:
                        ShowEmployesByJob(jobs, fullNames);
                        break;

                    case CommandExit:
                        isInProgress = false;
                        break;
                }
            }
        }

        private static void ShowEmployesByJob(List<string> jobs, List<string> fullNames)
        {
            Console.WriteLine(""Введите должность работника"");

            string job = Console.ReadLine();

            for (int i = 0; i < jobs.Count; i++)
            {
                if (jobs[i] == job)
                {
                    Console.WriteLine($""{jobs[i]} - {fullNames[i]}"");
                }
            }
        }

        private static void TryDeleteEmployee(List<string> jobs, List<string> fullNames)
        {
            Console.WriteLine(""Введите ФИО работника"");

            string fullName = Console.ReadLine();

            for (int i = 0; i < fullNames.Count; i++)
            {
                if (fullName == fullNames[i])
                {
                    jobs.RemoveAt(i);
                    fullNames.RemoveAt(i);
                }
            }
        }

        private static void AddEmployee(List<string> jobs, List<string> fullNames)
        {
            Console.WriteLine(""Введите должность"");
            string job = Console.ReadLine();

            Console.WriteLine(""Введите ФИО"");
            string fullName = Console.ReadLine();

            CheckIfJobExist(jobs, job);
            jobs.Add(job);
            fullNames.Add(fullName);
        }

        private static void CheckIfJobExist(List<string> jobs, string job)
        {
            if (jobs.Contains(job) == false)
            {
                Console.WriteLine(""В базе создана новая должность"");
            }
            else
            {
                Console.WriteLine(""Такая должность уже есть в базе"");
            }
        }

        private static void TryDeleteJob(List<string> jobs, string job)
        {
            if (jobs.Contains(job) == false)
            {
                jobs.Remove(job);
                Console.WriteLine(""Сотрудников с такой должностью больше нет. Должность удалена из базы"");
            }
        }
    }
}"
fNXhi6S9,ConvertToUPPERCASE_clipboard_watcher-01.ps1,iwishportalwasreal,PowerShell,Thursday 23rd of May 2024 10:43:49 AM CDT,"<#
2024-05-23 Thu. 10:32a.
ConvertToUPPERCASE_clipboard_watcher-01.ps1
https://github.com/EverythingIsCodeCodeCode/public_GitHub_data/blob/main/ConvertToUPPERCASE_clipboard_watcher-01.ps1
https://pastebin.com/fNXhi6S9
Made with ChatGPT.
This PowerShell script will watch the clipboard, convert text in it to UPPERCASE, and place it back in the clipboard so that it can be pasted.
Only tested to work in Windows.  Mac test in VSCode failed.
To make a desktop icon shortcut, modify it to something similar to the line below:
powershell.exe -NoProfile -ExecutionPolicy Bypass -File ""C:\Path\To\Your\Script\UppercaseConverter.ps1""
#>

# Function to process clipboard content
function Process-Clipboard {
    $previousClipboardText = """"

    while ($true) {
        try {
            # Get the current clipboard content
            $currentClipboardText = Get-ClipboardText

            # Check if the clipboard text is not null or empty and has changed
            if (![string]::IsNullOrEmpty($currentClipboardText) -and $currentClipboardText -ne $previousClipboardText) {
                # Convert the text to uppercase
                $upperText = $currentClipboardText.ToUpper()

                # Set the new text to the clipboard
                Set-ClipboardText -Text $upperText

                # Update previous clipboard text to avoid duplicate processing
                $previousClipboardText = $upperText

                # Print to console for debugging
                Write-Output ""Converted clipboard content to uppercase: $upperText""
            }

            # Wait for a short period before checking again
            Start-Sleep -Milliseconds 500
        } catch {
            # Handle any exceptions that might occur (e.g., clipboard being empty)
            Write-Output ""Error accessing clipboard: $_""
            Start-Sleep -Milliseconds 500
        }
    }
}

# Function to get clipboard text
function Get-ClipboardText {
    try {
        Add-Type -AssemblyName System.Windows.Forms
        [System.Windows.Forms.Clipboard]::GetText()
    } catch {
        Write-Output ""Error getting clipboard text: $_""
        return $null
    }
}

# Function to set clipboard text
function Set-ClipboardText {
    param (
        [string]$Text
    )
    try {
        Add-Type -AssemblyName System.Windows.Forms
        [System.Windows.Forms.Clipboard]::SetText($Text)
    } catch {
        Write-Output ""Error setting clipboard text: $_""
    }
}

# Run the clipboard processing function
Process-Clipboard
"
N4jreWuU,Mobile Operators,stiky_fingaz,Python,Thursday 23rd of May 2024 10:24:24 AM CDT,"call_cost = float(input(""Enter the cost of the call: ""))
outgoing_operator = input(""Choose outgoing operator (operator1, operator2, or operator3): "")
incoming_operator = input(""Choose incoming operator (operator1, operator2, or operator3): "")

cost_per_minute_operator1_outgoing = 0.2
cost_per_minute_operator2_outgoing = 0.3
cost_per_minute_operator3_outgoing = 0.4
cost_per_minute_operator1_incoming = 0.05
cost_per_minute_operator2_incoming = 0.06
cost_per_minute_operator3_incoming = 0.07
outgoing_cost_operator1 = cost_per_minute_operator1_outgoing * call_cost
outgoing_cost_operator2 = cost_per_minute_operator2_outgoing * call_cost
outgoing_cost_operator3 = cost_per_minute_operator3_outgoing * call_cost
incoming_cost_operator1 = cost_per_minute_operator1_incoming * call_cost
incoming_cost_operator2 = cost_per_minute_operator2_incoming * call_cost
incoming_cost_operator3 = cost_per_minute_operator3_incoming * call_cost

if outgoing_operator == ""1"":
    print(f""{outgoing_cost_operator1}"")
elif outgoing_operator == ""2"":
    print(f""{outgoing_cost_operator2}"")
elif outgoing_operator == ""3"":
    print(f""{outgoing_cost_operator3}"")
else:
    print(""Error"")

if incoming_operator == ""1"":
    print(f""{incoming_cost_operator1}"")
elif incoming_operator == ""2"":
    print(f""{incoming_cost_operator2}"")
elif incoming_operator == ""3"":
    print(f""{incoming_cost_operator3}"")
else:
    print(""Error"")

total_cost = (outgoing_cost_operator1 or outgoing_cost_operator2 or outgoing_cost_operator3) +\
(incoming_cost_operator1 or incoming_cost_operator2 or incoming_cost_operator3)
print(f""The total cost of the call is: {total_cost}"")
"
zfLMdUNG,Untitled,VladShubin2k4,Python,Thursday 23rd of May 2024 10:15:27 AM CDT,"Sample data: 100%|██████████| 234/234 [00:00<00:00, 277.54it/s]
Sample data: 100%|██████████| 78/78 [00:00<00:00, 231.23it/s]

---------------------------------------------------------------------------
ValueError Traceback (most recent call last)
Cell In[22], line 1
----> 1 result = runner.run()
 File /data/home/vashubin2/coolgraph/cool_graph/runners.py:498, in Runner.run(self)
466 self.init_loaders()
468 self.trainer = Trainer(
469 self.train_loader,
470 self.test_loader,
(...)
496 log_all_metrics=False,
497 )
--> 498 result = self.trainer.train()
499 return result
 File /data/home/vashubin2/coolgraph/cool_graph/train/trainer.py:232, in Trainer.train(self,
start_epoch, end_epoch)
227 # calc metrics and perform scheduler step
228 if (epoch - 0) % self.eval_freq == 0:
229 # calc metrics
230 # test
231 # logger.info(""\nEpoch {:03d}: "".format(epoch))
--> 232 test_metric, test_preds = eval_epoch(
233 self._model,
234 self.list_loader_test,
235 self.device,
236 self.target_names,
237 self.groups_names,
238 postfix=""test"",
239 use_edge_attr=self._use_edge_attr,
240 tqdm_disable=self.tqdm_disable,
241 fill_value=self.fill_value,
242 metrics=self._metrics,
243 main_metric=self._main_metric,
244 log_all_metrics=self.log_all_metrics,
245 embedding_data=self.embedding_data
246 )
247 self.mlflow_log_metrics(248 metrics=add_prefix_to_dict_keys(test_metric, ""test_""), step=epoch
249 )
250 test_metric[""epoch""] = epoch
 File /data/home/vashubin2/coolgraph/cool_graph/train/helpers.py:171, in
eval_epoch(model, list_loader, device, target_names, groups_names, mode, postfix,
use_edge_attr, log_metric, tqdm_disable, fill_value, metrics, main_metric, log_all_metrics,
embedding_data)
169 value = np.nan
170 else:
--> 171 value = float(func(out, y))
172 results[key][metric_name][groups_name] = value
174 main_metric_val = []
 File /data/home/vashubin2/coolgraph/cool_graph/train/metrics.py:106, in
average_precision(out, y)
104 y_pred = out.data.numpy()
105 y_true = y.numpy()
--> 106 return average_precision_score(y_true, y_pred)
 File ~/.conda/envs/cool_graph_env2_py38/lib/python3.8/site-packages/sklearn/utils
_param_validation.py:211, in validate_params.<locals>.decorator.<locals>.wrapper(*args,
**kwargs)
205 try:
206 with config_context(
207 skip_parameter_validation=(
208 prefer_skip_nested_validation or global_skip_validation
209 )
210 ):
--> 211 return func(*args, **kwargs)
212 except InvalidParameterError as e:
213 # When the function is just a wrapper around an estimator, we allow
214 # the function to delegate validation to the estimator, but we replace
215 # the name of the estimator by the name of the function in the error
216 # message to avoid confusion.
217 msg = re.sub(
218 r""parameter of \w+ must be"",
219 f""parameter of {func.__qualname__} must be"",
220 str(e),
221 )
 File ~/.conda/envs/cool_graph_env2_py38/lib/python3.8/site-packages/sklearn/metrics_ranking.py:267, in average_precision_score(y_true, y_score, average, pos_label,
sample_weight)
262 y_true = label_binarize(y_true, classes=present_labels)
264 average_precision = partial(
265 _binary_uninterpolated_average_precision, pos_label=pos_label
266 )
--> 267 return _average_binary_score(
268 average_precision, y_true, y_score, average, sample_weight=sample_weight
269 )
 File ~/.conda/envs/cool_graph_env2_py38/lib/python3.8/site-packages/sklearn/metrics
_base.py:75, in _average_binary_score(binary_metric, y_true, y_score, average,
sample_weight)
72 raise ValueError(""{0} format is not supported"".format(y_type))
74 if y_type == ""binary"":
---> 75 return binary_metric(y_true, y_score, sample_weight=sample_weight)
77 check_consistent_length(y_true, y_score, sample_weight)
78 y_true = check_array(y_true)
 File ~/.conda/envs/cool_graph_env2_py38/lib/python3.8/site-packages/sklearn/metrics
_ranking.py:229, in
average_precision_score.<locals>._binary_uninterpolated_average_precision(y_true, y_score,
pos_label, sample_weight)
226 def _binary_uninterpolated_average_precision(
227 y_true, y_score, pos_label=1, sample_weight=None
228 ):
--> 229 precision, recall, _ = precision_recall_curve(
230 y_true, y_score, pos_label=pos_label, sample_weight=sample_weight
231 )
232 # Return the step function integral
233 # The following works because the last entry of precision is
234 # guaranteed to be 1, as returned by precision_recall_curve
235 return -np.sum(np.diff(recall) * np.array(precision)[:-1])
 File ~/.conda/envs/cool_graph_env2_py38/lib/python3.8/site-packages/sklearn/utils
_param_validation.py:184, in validate_params.<locals>.decorator.<locals>.wrapper(*args,
**kwargs)
182 global_skip_validation = get_config()[""skip_parameter_validation""]
183 if global_skip_validation:
--> 184 return func(*args, **kwargs)
186 func_sig = signature(func)
188 # Map *args/**kwargs to the function signature File ~/.conda/envs/cool_graph_env2_py38/lib/python3.8/site-packages/sklearn/metrics
_ranking.py:951, in precision_recall_curve(y_true, probas_pred, pos_label, sample_weight,
drop_intermediate)
851 @validate_params(
852 {
853 ""y_true"": [""array-like""],
(...)
862 y_true, probas_pred, *, pos_label=None, sample_weight=None,
drop_intermediate=False
863 ):
864 """"""Compute precision-recall pairs for different probability thresholds.
865 
866 Note: this implementation is restricted to the binary classification task.
(...)
949 array([0.1 , 0.35, 0.4 , 0.8 ])
950 """"""
--> 951 fps, tps, thresholds = _binary_clf_curve(
952 y_true, probas_pred, pos_label=pos_label, sample_weight=sample_weight
953 )
955 if drop_intermediate and len(fps) > 2:
956 # Drop thresholds corresponding to points where true positives (tps)
957 # do not change from the previous or subsequent point. This will keep
958 # only the first and last point for each tps value. All points
959 # with the same tps value have the same recall and thus x coordinate.
960 # They appear as a vertical line on the plot.
961 optimal_idxs = np.where(
962 np.concatenate(
963 [[True], np.logical_or(np.diff(tps[:-1]), np.diff(tps[1:])), [True]]
964 )
965 )[0]
 File ~/.conda/envs/cool_graph_env2_py38/lib/python3.8/site-packages/sklearn/metrics
_ranking.py:807, in _binary_clf_curve(y_true, y_score, pos_label, sample_weight)
805 check_consistent_length(y_true, y_score, sample_weight)
806 y_true = column_or_1d(y_true)
--> 807 y_score = column_or_1d(y_score)
808 assert_all_finite(y_true)
809 assert_all_finite(y_score)
 File ~/.conda/envs/cool_graph_env2_py38/lib/python3.8/site-packages/sklearn/utils
validation.py:1245, in column_or_1d(y, dtype, warn)1234 warnings.warn(
1235 (
1236 ""A column-vector y was passed when a 1d array was""
(...)
1241 stacklevel=2,
1242 )
1243 return _asarray_with_order(xp.reshape(y, (-1,)), order=""C"", xp=xp)
-> 1245 raise ValueError(
1246 ""y should be a 1d array, got an array of shape {} instead."".format(shape)
1247 )
 ValueError: y should be a 1d array, got an array of shape (7420, 3) instead"
EfaYWKNL,Proc read and write module linux kernel 5,xeritt,C,Thursday 23rd of May 2024 10:07:38 AM CDT,"#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/proc_fs.h>
#include <linux/sched.h>
#include <linux/uaccess.h>
#include <linux/slab.h>
 
int len,temp;
char *msg;
 
ssize_t read_proc(struct file *filp, char *buf, size_t count, loff_t *offp ) {
    if(count > temp) {
        count = temp;
    }
    temp = temp - count;
    copy_to_user(buf, msg, count);
    if(count == 0)
        temp = len;
    return count;
}
 
ssize_t write_proc(struct file *filp, const char *buf, size_t count, loff_t *offp) {
    copy_from_user(msg, buf, count);
    len = count;
    temp = len;
    return count;
}
 
static const struct proc_ops proc_fops = {
    proc_read: read_proc,
    proc_write: write_proc,
};
 
void create_new_proc_entry(void) { //use of void for no arguments is compulsory now
    proc_create(""proc"", 0, NULL, &proc_fops);
    msg = kmalloc(10 * sizeof(char), GFP_KERNEL);
}

int proc_init (void) {
    create_new_proc_entry();
    return 0;
}
 
void proc_cleanup(void) {
    remove_proc_entry(""hello"", NULL);
    kfree(msg);
}
 
MODULE_LICENSE(""GPL"");
MODULE_AUTHOR(""Fantomas"");
module_init(proc_init);
module_exit(proc_cleanup);"
f72zuG5F,Untitled,Juniordss,PHP,Thursday 23rd of May 2024 10:06:27 AM CDT,"<?php
// Verifique se o parâmetro 'code' está presente na URL
if (isset($_GET['code'])) {
    // Capture o código de autorização da query string
    $authorization_code = $_GET['code'];

    // Exiba o código de autorização na página
    echo ""Código de autorização: $authorization_code"";
} else {
    // Se o código não está presente, exiba uma mensagem de erro
    echo 'Código de autorização não encontrado.';
}
?>
"
evqDPtXc,Untitled,b_gandurov,C#,Thursday 23rd of May 2024 09:56:38 AM CDT,"using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

class Program
{
    static void Main()
    {
        var items = new SortedSet<Item>();
        var itemsByName = new Dictionary<string, Item>();
        var itemsByType = new Dictionary<string, SortedSet<Item>>();
        string input = """";
        StringBuilder result = new StringBuilder();

        while (input != ""end"")
        {
            input = Console.ReadLine();

            var inputElements = input.Split();
            var command = inputElements[0];

            switch (command)
            {
                case ""add"":
                    string name = inputElements[1];
                    double price = double.Parse(inputElements[2], CultureInfo.InvariantCulture);
                    string itemType = inputElements[3];
                    if (itemsByName.ContainsKey(name))
                    {
                        result.AppendLine($""Error: Item {name} already exists"");
                    }
                    else
                    {
                        var item = new Item(name, price, itemType);
                        items.Add(item);
                        itemsByName[name] = item;

                        if (!itemsByType.ContainsKey(itemType))
                        {
                            itemsByType[itemType] = new SortedSet<Item>();
                        }
                        itemsByType[itemType].Add(item);

                        result.AppendLine($""Ok: Item {name} added successfully"");
                    }
                    break;

                case ""filter"":
                    var filterType = inputElements[2];
                    if (filterType == ""type"")
                    {
                        FilterByType(inputElements[3], itemsByType, result);
                    }
                    else if (filterType == ""price"")
                    {
                        if (inputElements.Length == 7)
                        {
                            double minPrice = double.Parse(inputElements[4], CultureInfo.InvariantCulture);
                            double maxPrice = double.Parse(inputElements[6], CultureInfo.InvariantCulture);
                            FilterByPriceRange(minPrice, maxPrice, items, result);
                        }
                        else if (inputElements[3] == ""from"")
                        {
                            double minPrice = double.Parse(inputElements[4], CultureInfo.InvariantCulture);
                            FilterByPriceFrom(minPrice, items, result);
                        }
                        else if (inputElements[3] == ""to"")
                        {
                            double maxPrice = double.Parse(inputElements[4], CultureInfo.InvariantCulture);
                            FilterByPriceTo(maxPrice, items, result);
                        }
                    }
                    break;
            }
        }
        Console.WriteLine(result.ToString());
    }

    static void FilterByType(string itemType, Dictionary<string, SortedSet<Item>> itemsByType,StringBuilder result)
    {
        if (!itemsByType.ContainsKey(itemType))
        {
            result.AppendLine($""Error: Type {itemType} does not exist"");
            return;
        }

        var filteredItems = itemsByType[itemType]
            .Take(10)
            .Select(item => $""{item.Name}({item.Price.ToString(""F2"", CultureInfo.InvariantCulture)})"");

        PrintFilteredItems(filteredItems, result);
    }

    static void FilterByPriceRange(double minPrice, double maxPrice, SortedSet<Item> items,StringBuilder result)
    {
        var filteredItems = items
            .Where(item => item.Price >= minPrice && item.Price <= maxPrice)
            .Take(10)
            .Select(item => $""{item.Name}({item.Price.ToString(""F2"", CultureInfo.InvariantCulture)})"");

        PrintFilteredItems(filteredItems, result);
    }

    static void FilterByPriceFrom(double minPrice, SortedSet<Item> items,StringBuilder result)
    {
        var filteredItems = items
            .Where(item => item.Price >= minPrice)
            .Take(10)
            .Select(item => $""{item.Name}({item.Price.ToString(""F2"", CultureInfo.InvariantCulture)})"");

        PrintFilteredItems(filteredItems, result);
    }

    static void FilterByPriceTo(double maxPrice, SortedSet<Item> items,StringBuilder result)
    {
        var filteredItems = items
            .Where(item => item.Price <= maxPrice)
            .Take(10)
            .Select(item => $""{item.Name}({item.Price.ToString(""F2"", CultureInfo.InvariantCulture)})"");

        PrintFilteredItems(filteredItems, result);
    }

    static void PrintFilteredItems(IEnumerable<string> filteredItems,StringBuilder result)
    {
        if (filteredItems.Any())
        {
            result.AppendLine($""Ok: {string.Join("", "", filteredItems)}"");
        }
        else
        {
            result.AppendLine(""Ok: "");
        }
    }

    class Item : IComparable<Item>
    {
        public string Name { get; }
        public double Price { get; }
        public string Type { get; }

        public Item(string name, double price, string type)
        {
            Name = name;
            Price = price;
            Type = type;
        }

        public int CompareTo(Item other)
        {
            int priceComparison = Price.CompareTo(other.Price);
            if (priceComparison != 0) return priceComparison;

            if (Name != other.Name) return string.Compare(Name, other.Name, StringComparison.Ordinal);

            return string.Compare(Type, other.Type, StringComparison.Ordinal);
        }

        public override bool Equals(object obj)
        {
            if (obj is Item other)
            {
                return Name == other.Name && Price == other.Price && Type == other.Type;
            }
            return false;
        }

        public override int GetHashCode()
        {
            return Tuple.Create(Name, Price, Type).GetHashCode();
        }
    }
}"
yrGpki3Y,"""LED Activation"" rev_01",pleasedontcode,Arduino,Thursday 23rd of May 2024 09:54:09 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""LED Activation""
	- Source Code NOT compiled for: Arduino Nano
	- Source Code created on: 2024-05-23 14:53:10

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* If the button is pressed 3 times, let the LED */
	/* light up */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onSequenceMatched(void);  // Function prototype for sequence matched callback

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t Button_PushButton_PIN_D2 = 2;
const uint8_t LED_PIN = 13;  // Define the LED pin

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(Button_PushButton_PIN_D2);  // Initialize EasyButton object with the pin number

void onSequenceMatched()
{
  Serial.println(""Button pressed 3 times"");  // Callback function to be called when the button sequence is matched
  digitalWrite(LED_PIN, HIGH);  // Turn on the LED
}

void setup(void)
{
  // put your setup code here, to run once:
  Serial.begin(115200);  // Initialize serial communication at 115200 baud rate
  Serial.println();
  Serial.println("">>> EasyButton sequence example <<<"");

  button.begin();  // Initialize the button
  button.onSequence(3, 2000, onSequenceMatched);  // Set up the sequence detection: 3 presses within 2000ms

  pinMode(Button_PushButton_PIN_D2, INPUT_PULLUP);  // Set the button pin as input with pull-up resistor
  pinMode(LED_PIN, OUTPUT);  // Set the LED pin as output
  digitalWrite(LED_PIN, LOW);  // Ensure the LED is off initially
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  button.read();  // Read the button state
}

/* END CODE */"
n8Hjfve1,moriserver-installer-json,hansol1025,JSON,Thursday 23rd of May 2024 09:47:15 AM CDT,"{
	""mods"": [
		{
			name: 'tac',
			desc: '총 모드',
			url: 'https://drive.google.com/uc?export=download&id=1-woxcb5-L1WLn7kb6TeDUFPVvweX_kPO'
		},
		{
			name: 'obfuscate',
			desc: '최적화 모드',
			url: 'https://drive.google.com/uc?export=download&id=1xatGGSDkKI8hAg_xptK42BsNFRHtPrzr'
		},
		{
			name: 'MTR',
			desc: '지하철 등 현대적인 오브젝트 추가 모드',
			url: 'https://drive.google.com/uc?export=download&id=1-woxcb5-L1WLn7kb6TeDUFPVvweX_kPO'
		},
		{
			name: 'lesraisinsadd',
			desc: '총 모드',
			url: 'https://drive.google.com/uc?export=download&id=11-3hhfthlZGoxygnFfHgOICkEgw7rYYo'
		},
		{
			name: 'architectury',
			desc: 'API',
			url: 'https://drive.google.com/uc?export=download&id=11gJUpRbv-35aQ7-dHEmL2-HTRm4JzxtQ'
		},
	],
	""forge"": ""https://maven.minecraftforge.net/net/minecraftforge/forge/1.16.5-36.2.34/forge-1.16.5-36.2.34-installer.jar""
}"
2sLKq12Y,rub2,SnowCold,Java,Thursday 23rd of May 2024 09:28:38 AM CDT,"import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.sql.ResultSet;
import java.util.*;
import java.util.stream.Stream;

public class Main {
    public static void main(String[] args) throws IOException {
        first();
        second();
        third();
        forth();
        fifth();
        sixth();
        seventh();
        eighth();
        ninth();
        tenth();
    }

    private static void first() throws IOException {
        System.out.println(""\nВопрос №1:"");
        System.out.println(""   Пользуемся здравым смыслом и отсеиваем очевидное (Reader'ы и InputStream'ы не могут write() и т.д.)"");
        System.out.println(""   Подгоняем код и смотрим, на что компилятор не ругается"");
        System.out.println(""   Не забыть задать в таких конструкторах как new FileOutputStream(String filename) имя файла"");


        // Вставить код из задания

/*
        new ByteArrayOutputStream().flush();
        new FileInputStream(""file"").flush();
        new CharArrayWriter().flush();
        new BufferedWriter(new FileWriter(""file"")).flush();
        new FileOutputStream(""file"").flush();
        new BufferedReader(new FileReader(""file"")).flush();
        new CharArrayReader(new char[1]).flush();
        new ByteArrayInputStream(new byte[1]).flush();
*/

    }

    private static void second(){
        // Вставить код из задания

        Set set = new TreeSet<>();
        set.add(5);
        set.add(4);
        set.add(3);
        set.add(2);
        set.add(4);
        set.add(1);
        set.remove(3);

        // НЕ ТРОГАТЬ
        System.out.println(""\nВопрос №2:"");
        System.out.println(set);
    }

    private static void third(){
        // НЕ ТРОГАТЬ
        System.out.println(""\nВопрос №3: "");

        // Вставить код из задания
        Stream.of(""january"", ""goat"", ""monkey"", ""rooster"", ""dog"", ""pig"")
                .filter(s -> s.length() != 4)
                .map(s -> s=s.substring(1, s.length()-1))
                .limit(3)
                .sorted()
                .forEachOrdered(System.out::print);
    }

    private static void forth(){
        // НЕ ТРОГАТЬ
        System.out.println(""\nВопрос №4:"");
        System.out.println(""   Consumer<T>         -   (Type) argument --> void"");
        System.out.println(""   Predicate<T>        -   (Type) argument --> (boolean) result"");
        System.out.println(""   Supplier<T>         -    void --> (Type) result"");
        System.out.println(""   BinaryOperator<T>   -   (Type) argument1, (Type) argument2 --> (Type) result"");
        System.out.println(""   UnaryOperator<T>    -   (Type) argument --> (Type) result"");
        System.out.println(""   ToIntFunction<T>    -   (Type) argument --> (int) result"");
        System.out.println(""   Function<T,R>       -   (Type1) argument --> (Type2) result"");
    }

    private static void fifth() throws IOException {
        // НЕ ТРОГАТЬ
        System.out.println(""\nВопрос №5:"");
        System.out.print(""   TCP: "");
        System.out.println(""https://javarush.ru/groups/posts/654-klassih-socket-i-serversocket-ili-allo-server-tih-menja-slihshishjh"");
        System.out.print(""   UDP: "");
        System.out.println(""https://nuancesprog.ru/p/8752/"");

/*
        // Клиент UDP (пакеты)
        byte[] array = {0,1,2,3,4,5,6,7,8,9};
        int port = 6789;
        InetAddress host = InetAddress.getByName(""localhost"");
        DatagramSocket datagramSocket = new DatagramSocket();

        // Упаковка пакета для отправки
        DatagramPacket datagramPacket
            = new DatagramPacket(array, array.length, host, port);
        // Отправка пакета на сервер
        datagramSocket.send(datagramPacket);
        // Создание пакета для приёма
        datagramPacket = new DatagramPacket(array, array.length);
        // Приём пакета от сервера
        datagramSocket.receive(datagramPacket);


        // Сервер UDP (пакеты)
        byte[] array = new byte[10];
        int port = 6789;
        DatagramSocket datagramSocket = new DatagramSocket(port);
        DatagramPacket datagramPacket
            = new DatagramPacket(array, array.length);

        // Приём пакета от клиента
        datagramSocket.receive(datagramPacket);

        // Получение данных клиента для отправки ответа
        InetAddress host = datagramPacket.getAddress();
        port = datagramPacket.getPort();

        // Упаковка пакета для отправки
        datagramPacket
            = new DatagramPacket(array, array.length, host, port);
        // Отправка пакета на клиент
        datagramSocket.send(datagramPacket);


        // Клиент UDP NIO (каналы)
        byte[] array = {0,1,2,3,4,5,6,7,8,9};
        int port = 6789;
        InetAddress host = InetAddress.getByName(""localhost"");
        SocketAddress address = new InetSocketAddress(host, port);
        DatagramChannel datagramChannel = DatagramChannel.open();

        // Заполнение буфера для отправки
        ByteBuffer buffer = ByteBuffer.wrap(array);
        // Отправка буфера на сервер
        datagramChannel.send(buffer, address);
        // Очистка буфера для приёма
        buffer.clear();
        // Приём буфера от сервера
        address = datagramChannel.receive(buffer);


        // Сервер UDP NIO (каналы)
        byte[] array = new byte[10];
        int port = 6789;
        DatagramChannel datagramChannel = DatagramChannel.open();
        SocketAddress address = new InetSocketAddress(port);
        datagramChannel.bind(address);

        // Создание буфера для приёма
        ByteBuffer buffer = ByteBuffer.wrap(array);
        // Приём буфера от клиента
        address = datagramChannel.receive(buffer);

        // Замена данных в буфере перед отправкой ответа
        buffer.flip();
        // Отправка буфера клиенту
        datagramChannel.send(buffer, address);



        // Клиент TCP (потоки)
        byte[] array = {0,1,2,3,4,5,6,7,8,9};
        int port = 6789;
        InetAddress host = InetAddress.getByName(""localhost"");
        Socket socket = new Socket(host, port);
        OutputStream outputStream = socket.getOutputStream();
        InputStream inputStream = socket.getInputStream();

        // Отправка потока на сервер
        outputStream.write(array);

        // Получение потока от сервера
        int a = inputStream.read(array);


        // Сервер TCP (потоки)
        byte[] array = new byte[10];
        int port = 6789;
        InetAddress host = InetAddress.getByName(""localhost"");
        Socket socket = new Socket(host, port);
        ServerSocket serverSocket = new ServerSocket(port);
        OutputStream outputStream = socket.getOutputStream();
        InputStream inputStream = socket.getInputStream();

        // Принятие запроса на подключение от клиента
        serverSocket.accept();
        // Получение потока от клиента
        int a = inputStream.read(array);

        // Отправка потока клиенту
        outputStream.write(array);


        // Клиент TCP NIO (каналы)
        byte[] array = {0,1,2,3,4,5,6,7,8,9};
        int port = 6789;
        InetAddress host = InetAddress.getByName(""localhost"");
        SocketAddress address = new InetSocketAddress(host,port);
        SocketChannel socketChannel = SocketChannel.open();

        // Отправка запроса на подключение к серверу
        socketChannel.connect(address);
        // Заполнение буфера для отправки
        ByteBuffer buffer = ByteBuffer.wrap(array);
        // Отправка буфера на сервер
        socketChannel.write(buffer);
        // Очистка буфера для приёма
        buffer.clear();
        // Приём буфера от сервера
        socketChannel.read(buffer);


        // Сервер TCP NIO (каналы)
        byte[] array = new byte[10];
        int port = 6789;
        InetAddress host = InetAddress.getByName(""localhost"");
        SocketAddress address = new InetSocketAddress(host, port);
        ServerSocketChannel serverSocketChannel
                = ServerSocketChannel.open();
        serverSocketChannel.bind(address);

        // Принятие запроса на подключение от клиента
        SocketChannel socketChannel = serverSocketChannel.accept();
        // Заполнение буфера для отправки
        ByteBuffer buffer = ByteBuffer.wrap(array);
        // Приём буфера от клиента
        socketChannel.read(buffer);
        // Замена данных в буфере перед отправкой ответа
        buffer.flip();
        // Отправка буфера клиенту
        socketChannel.write(buffer);
*/

    }

    private static void sixth(){
        // НЕ ТРОГАТЬ
        System.out.println(""\nВопрос №6:"");
        System.out.println(""   Connection conn = DriverManager.getConnection(...);"");
        System.out.println(""   Statement st = conn.prepareStatement(...);"");
        System.out.println(""   ResultSet rs = st.executeQuery(...);"");
        System.out.println(""   if(rs.next) String name = rs.getString(...);"");
    }

    private static void seventh(){
        // НЕ ТРОГАТЬ
        System.out.println(""\nВопрос №7:"");
        System.out.println(""   new -> runnable"");
        System.out.println(""   runnable -> running"");
        System.out.println(""   running -> waiting, blocked, terminated, runnable"");
        System.out.println(""   waiting -> runnable"");
        System.out.println(""   blocked -> runnable"");
        System.out.println(""   terminated -> никуда"");
    }

    private static void eighth(){
        // НЕ ТРОГАТЬ
        System.out.println(""\nВопрос №8:"");
        System.out.println(""   Если в условии hello ***"");
        System.out.println(""      то ответ: world = ***"");
        System.out.println(""   Если в условии *** world"");
        System.out.println(""      то ответ: hello = ***"");
    }

    private static void ninth(){
        // НЕ ТРОГАТЬ
        System.out.println(""\nВопрос №9:"");
        System.out.println(""   Подгоняем код и проверяем, что компилятор не ругается"");

        // Вставить код из задания

        JTextField c = new JTextField(""The Empires Strikes Back"");
        c.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ev) {
                c.setBackground(Color.PINK);
            }
        });

    }

    private static void tenth(){
        // НЕ ТРОГАТЬ
        System.out.println(""\nВопрос №10:"");
        System.out.println(""   FlowLayout      -   Дефолтный для JPanel. Последовательное расположение построчно (слева направо, сверху вниз)"");
        System.out.println(""   BoxLayout       -   Последовательное расположение вертикально (Y_AXIS) или горизонтально (X_AXIS)"");
        System.out.println(""   BorderLayout    -   Расположение по границам окна (NORTH, SOUTH, WEST, EAST, CENTER)"");
        System.out.println(""   GridLayout      -   Табличное расположение (ячейки одного размера)"");
        System.out.println(""   GridBagLayout   -   Табличное расположение (ячейки произвольного размера)"");
        System.out.println(""   TableLayout     -   Табличное расположение (произвольные размеры строк и столбцов)"");
        System.out.println(""   CardLayout      -   Расположение для вкладок (выбор отображения элемента среди занимающих одно место)"");
        System.out.println(""   SpringLayout    -   Расположение по расстоянию между парами границ элементов"");
    }
}"
7JQv5E6Z,KomputerPokladowy 23.05.2024,SowaKiller,Arduino,Thursday 23rd of May 2024 08:59:08 AM CDT,"#include <Arduino.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <Adafruit_INA219.h>
#include <DallasTemperature.h>
#include <SPI.h>
#include <OneWire.h>
#include <Wire.h>
#include ""RTClib.h""
#include <FastLED.h>
//#include <EasyButton.h>
#include <SD.h>
#include <Adafruit_PCF8575.h>
#include ""Symbole.h""
//#include <Filter.h>
//#include <WiFi.h>
//#include <ListLib.h>

#define TFT_DC          12          //%     A0
#define TFT_CS          13          //%     CS
#define TFT_MOSI        14          //%     SDA
#define TFT_CLK         27          //%     SCK
#define TFT_RST         0
#define TFT_MISO        0  


#define EXP_INT         0

#define TERMOPARA_CS    4 

#define RS485_RX        16
#define RS485_TX        17
#define RS485_EN        32

#define AFR             35
#define MUX_IN          25
#define D_TEMP_PIN      26              
#define LULU_PIN        36

#define LED_PIN         2       //%     Pin Diod RGB (wskaźników)
#define NUM_LEDS        8       //%     Ilość diod  
#define BRIGHTNESS      100     //%     Moc świecenia
#define LED_TYPE        WS2812  //%     Typ diod
#define COLOR_ORDER     GRB     //%     Konfiguracja kolorystyczna

#define UPDATES_PER_SECOND 100

#define WTRYSK_BUTTON   39      //%     Definicja wtrysku jako przycisk

#define kartaSD         5       //%     Pin Karty SD
#define PinWtrysk       39      //%     Pin wtrysku
#define PinHalla        34      //%     Pin czujnika halla
#define PinObroty       33      //%     Pin podpisany jako zapłon ale wykorzystywany do pomiaru obrotów

uint16_t kolorTla;              //%     Definicja koloru Tła/podświetlenia
uint16_t kolorTex;              //%     Definicja koloru tekstu
uint16_t kolorClk;              //%     Definicja koloru zegarka
#define czasResetu  2000        //%     Czas przez jaki trzeba przytzymać przycisk Reset żeby zresetować zmienną

#define linijek     20          //%     liczba linijek zapisu danych w pliku

File buforDanych;               //% plik który przechowuje TYLKO najświeższe dane
File aktualnyPlikZapisu;        //% plik który przechowuje wszystkie dane z jednego dnia
File najnowszyPlikOdczytu;      //% najmłodszy odnaleziony plik zawirający dane
File config;                    //% plik konfiguracyjny :D

TaskHandle_t wTle;

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_CLK, TFT_RST);

Adafruit_INA219 ina219;

RTC_DS1307 rtc;

CRGB leds[NUM_LEDS];
//CRGBPalette16 currentPalette;
//TBlendType    currentBlending;

//extern CRGBPalette16 myRedWhiteBluePalette;
//extern const TProgmemPalette16 myRedWhiteBluePalette_p PROGMEM;


Adafruit_PCF8575 pcf;

OneWire oneWire(26);
DallasTemperature sensors(&oneWire);
DeviceAddress sensorOUT = { 0x28, 0xFF, 0x64, 0xE, 0x6A, 0x21, 0x21, 0xE4 };
DeviceAddress sensorIN = { 0x28, 0xFF, 0x64, 0xE, 0x6B, 0xBA, 0xD5, 0xBA };

//EasyButton przyciskFunkcji(FUNKCJA_BUTTON);
//EasyButton przyciskTrybu(RESET_BUTTON);
//EasyButton przyciskResetu(TRYB_BUTTON);
//EasyButton przyciskWtrysk(WTRYSK_BUTTON);
//EasyButton przyciskZaplon(ZAPLON_BUTTON);

bool diagnosta=false;       //% zmienna odpowiedzialna za tryb diangostyczny 

//& ZMIENNE PRZYPISANE DO STANÓW NA WEJŚCIACH EXPENDERA 
unsigned long czasPrzytrzymaniaPrzycisku;

bool zaplon;
bool swiatla;
bool GPIOtrzyTrzy;
bool GPIOtrzyCztery;
bool buzzer=false;
bool MUX_A;
bool MUX_B;
bool MUX_C;
bool MANETKAreset;
bool MANETKAfunckja;
bool MANETKAtryb;
bool ESP_RESET;
bool zlonczeUI;
bool zlonczeUII;
bool zlonczeUIII;
bool LCD_LED;

float NTC_ONE;
float NTC_TWO;

float czisOlej;
float czisBoost;

byte muxCode[8][3]{
    {0,0,0},
    {1,0,0},
    {0,1,0},
    {1,1,0},
    {0,0,1},
    {1,0,1},
    {0,1,1},
    {1,1,1},
};

//& ZMIENNE POTRZEBNE DO FUNKCJI OPBLICZANIA SPALANIA

volatile bool nowyImpuls;
volatile unsigned long czasImpulsu;
float czasOtwarciaWT;           //% czas impulstu czyli czas otwarcia wtrusku * ilość otwarć, żeby obliczzyć splanaie trzeba pomnożyć przez stałaW
float stalaW=0.01355;          //% stała wtrysku (ml/milisekunde) float stalaW=0.014183, 0.003416, 0.01355;  
float spalanieM;                //% splanie na cykl,
float spalanieLS;               //% spalnie L w trzech sekundzach ""chwilowe""
float spalanieLH;               //% spalnie L w godzine ""chwilowe""
float sumaSpalania1km;          //% suma srednich spalan paliwa w 1km
float iloscOdczytow1km;         //% ilosc pobranych odczytow spalania w 3s 
float SrSpalanie1km;            //% srednie spalanaie w 1km
float SrSpalanie100km;          //% srednie spalanie na 100km
float najSpalanie;              //% maksymalne osiagnięte spalanie

float spalonePaliwoTrip;        //% zurzyte paliwo trip1 
float spalonePaliwoSuma;        //% zurzyte paliwo suma
float spalonePaliwoDzienne;     //% zurzyte paliwo dzienne 
unsigned long poprzedniOczyt=0; //% zmienna do zapisania kiedy poprzedni odczyt

//& ZIENNE POTRZEBNE DO FUNKCJI OBLICZANIA PRĘDKOSCI
int c;                          //% ilosc cykli w predkosciomierzu 
unsigned long czasPrzed;        //% czas przed pełnym obortem koła od predkościomierza
unsigned long czasPo;           //% czas po pełnym obortem koła od predkościomierza
float roznicaP=0.00;            //% czas oborotu koła magnetycznego w prętkościomierzu
float predkosc;                 //% predkosc samochodu 
float predkoscMS;               //% predkość w metrach na sekunde
float SrPredkosc[3];            //% tablica do obliczania sredniej prędkosci 
float MaxPredkosc;              //% Maksymalna osiągnięta prędkosć
bool zero;                      //% umozliwiająca wskazanie predkości na 0 km/h
bool a, b;                      //% do predkosciomeirza

//& ZMIENNE POTRZEBNE DO FUNKCJI OBLICZANIA PRZEJECHANEGO DSYTANSU
bool tylkoRazPD;                //% żeby przejechany dystans tylko raz sie naliczyczl
float PDystansM;                //% przejechany dystans w metrach
float PDystansKM;               //% przejechany dystans w kilometrach dzienny
float PDystansKMpop;            
float PDystansKMSuma;           //% przejechany dystans w kilometrach SUMA
float PDystansKMTrip1;          //% przejechany dystans od restetu tzw. trip1
float PDystansKMOdtankowania;   //% przejechany dystans od tankowania
int przebiegPrzed=701;          //% przebieg samochodu przed zamontawniem MFA 2.0 
int przebieg;                   //% przebieg aktualny czyli przebiegPrzed + przejechany dystans
int rozrzad;                    //% ile km temu był wymieniany rozrzad
int olej;                       //% ile km temu był wymieniany olej
float roznicaDoDys=0.000;       //% zmienna wynikająca z dzielenia roznicyP przez 1000 do obliczania przjejechanego dystansu

//& ZMIENNE POTRZEBNE DO FUNKCJI OBLICZANIA CZSU PRACY SILNIKA
float czasPracySilnikaSuma;             //% czas pracy silnika SUMA
int czasPracySilnikaGodziny;            //% czas pracy silniak dzienny w godzinach
int czasPracySilnikaMinuty;             //% czas pracy silnika dzienny w minutach     
float czasPracySilnikaMinutySuma;       //% czas pracy silnika SUMA w minutach oblicza po resesie w setup
unsigned long czasStartowy = 0;         //% Czas początkowy aktywacji sygnału
unsigned long czasTrwania = 0;          //% Całkowity czas trwania sygnału
bool sygnalWystepuje = false;           //% Flaga wskazująca, czy sygnał występuje
const unsigned long limitCzasu = 10000; //% Limit czasu, po którym uznajemy, że sygnał zanikł (4 sekundy)

//& ZMIENNE POTRZEBNE DO FUNKCJI OBLICZANIA NAPIECIA AKUMULATROA
float napiecie;                         //% napięcie akumulatora
float moc;

//& ZMIENNE POTRZEBNE DO FUNKCJI OBLICZANIA ILOSCI PALIWA
float odczytMiliVoltP;                  //% odczyt przez dzilenik napiecia
float odczytVoltP;                      //% przekształcenie odczytu na faktyczne napięcie na wskaźniku
float aktualnyStanPaliwa;
float zatankowanoOstatnio;
unsigned long ostatniOczdczytCzasu1=0;
unsigned long ostatniOczdczytCzasu2=0;
float sumaPaliwa;                           //% do średnije
float sredniePaliwo;                    
//float spalonePaliwoTrip;              //% zurzyte paliwo trip1 
//float spalonePaliwoSuma;              //% zurzyte paliwo suma
//float spalonePaliwoDzienne;           //% zurzyte paliwo dzienne         


//& ZMIENNE POTRZEBNE DO FUNKCJI MIERZENIA TEMPERATURY CIECZY
float temperaturaCieczy;        
float SrTemperaturaCieczy;
float odczytMiliVoltT;           //% odczyt przez dzilenik napiecia
float odczytVoltT;               //% przekształcenie odczytu na faktyczne napięcie na wskaźniku

//& ZMIENNE POTRZEBNE DO FUNKCJI MIERZENIE TEMPERATURY OLEJU
float odczytMiliVoltO;           //% odczyt przez dzilenik napiecia
float temperaturaOleju;
float SrTemperaturaOleju;

//& RESZTA NIE PRZYPISANNYCH ZMIENNYCH
bool wycz;                      //% czy wyczyszczony wsywietlacz przed wyswieleniem nowej funkcji          
char zegarekBuf[12];            //% tablice z datą i godzina
int licznikW=1;                 //% licznik ilości wciśnięć przycisku funkcji
int tryb;                       //% zmienna określajaca tryb MFA 1 albo 2
bool trzaReset;                 //% określenie czy należy wykonać reset
bool stanSamochodu;             //% true = zaplon on false = zgaszony
bool popStanSamochodu;          //% zapis poprzedniego stanu samochodu
bool tylkoRazSA;

//& ZMIENNE POTRZEBNE DO ZAPISU I ODCZYTU DANYCH Z KARTY
bool wyslanoKlucz = false;
bool odebranoKlucz = false;
bool mogeZmienicEkran = true;

String nrSeryjny;
float stW;
int liczbaW;
int pojemnoscBaku;
int aktEkran=1;
String vSoft= ""0.67"";

long najwczesniej = 0;
String nazwaPliku = """";
String pobraneDane[][2] =   //% tablica przechowująca pobrane dane z pliku SD; pierwsza kolumna to index danych a druga to wartość
{
    {""01|"", ""0""},           //% przebieg
    {""02|"", ""0""},           //% przejechany dystans Trip1
    {""03|"", ""0""},           //% przejechany dysatns od tankowania
    {""04|"", ""0""},           //% średnia spalanie
    {""05|"", ""0""},           //% maksymalna osiągnięta prędkość
    {""06|"", ""0""},           //% srednie prędkość
    {""07|"", ""0""},           //% czas pracy silnika
    {""08|"", ""0""},           //% zatankowane ostatnio paliwo
    {""09|"", ""0""},           //% spalone paliwo suma
    {""10|"", ""0""},           //% średnia temperatura cieczy
    {""11|"", ""0""},           //% średnia temperatura oleju
    {""12|"", ""0""},           //% ile kilmetrów temu byl wymeinay olej 
    {""13|"", ""0""},           //% ile kilmetrów temu byl wymeinay rozrzed  
    {""14|"", ""0""},           //% najwysze spalanie
    {""15|"", ""0""},           //% pusta linijka 
    {""16|"", ""0""},           //% pusta linijka 
    {""17|"", ""0""},           //% pusta linijka 
    {""18|"", ""0""},           //% pusta linijka 
    {""19|"", ""0""},           //% pusta linijka 
    {""20|"", "" ""},           //% pusta linijka 
};

String daneDoZapisu[][2] =  //% tablica przechowująca pobrane dane z pliku SD; pierwsza kolumna to index danych a druga to wartość
{
    {""01|"", ""0""},           //% przebieg
    {""02|"", ""0""},           //% przejechany dystans Trip1
    {""03|"", ""0""},           //% przejechany dysatns od tankowania
    {""04|"", ""0""},           //% średnia spalanie
    {""05|"", ""0""},           //% maksymalna osiągnięta prędkość
    {""06|"", ""0""},           //% srednie prędkość
    {""07|"", ""0""},           //% czas pracy silnika
    {""08|"", ""0""},           //% zatankowane ostatnio paliwo
    {""09|"", ""0""},           //% spalone paliwo suma
    {""10|"", ""0""},           //% średnia temperatura cieczy
    {""11|"", ""0""},           //% średnia temperatura oleju
    {""12|"", ""0""},           //% ile kilometrow temu byl wymieniany olej
    {""13|"", ""0""},           //% ile kilmetrów temu byl wymeinay rozrzed  
    {""14|"", ""0""},           //% najwysze spalanie 
    {""15|"", ""0""},           //% pusta linijka 
    {""16|"", ""0""},           //% pusta linijka 
    {""17|"", ""0""},           //% pusta linijka 
    {""18|"", ""0""},           //% pusta linijka 
    {""19|"", ""0""},           //% pusta linijka 
    {""20|"", "" ""},           //% pusta linijka 
};

String ekranyTr1 [12] = {"""","""","""","""","""","""","""","""","""","""","""",""""};
String ekranyTr2 [12] = {"""","""","""","""","""","""","""","""","""","""","""",""""};

String* calyPlik; 

char nazwaNowegoPliku[36];

String aktLinie(String zawartosc, String id, String nowaZawartosc) {
  
  int pozycjaJeden = zawartosc.indexOf(id);
  if (pozycjaJeden != -1) {
    int pozycjaDwa = zawartosc.indexOf('\n', pozycjaJeden);
    if (pozycjaDwa == -1) {
      pozycjaDwa = zawartosc.length();
    }
    zawartosc = zawartosc.substring(0, pozycjaJeden) + nowaZawartosc + zawartosc.substring(pozycjaDwa);
  }

  return zawartosc;
}

void obsluzConfig()                                     
{
  config = SD.open(""/config.txt"", FILE_READ);
  

  String ramka;
  int a=0;
  while (config.available()) 
  {
    a++;
    ramka=config.readStringUntil('\n');
    Serial.println(ramka);
    String idStr = ramka.substring(1, 4);
    int id = idStr.toInt();
    String wartoscStr = ramka.substring(5, ramka.length() - 6);
    
    delay(50);
    Serial.print(""Id: "");
    Serial.println(id);
    delay(50);
    Serial.print(""Wartosc: "");
    Serial.println(wartoscStr);
    delay(50);
    

    switch(id) {
        case 0:
            nrSeryjny=wartoscStr;
            Serial.println(""Nadano adres ID"");
            break;
        case 1:
            stW=wartoscStr.toFloat();
            break;
        case 2:
            liczbaW=wartoscStr.toInt();
            break;
        case 4:
            pojemnoscBaku=wartoscStr.toInt();
            break;
        case 5:

            break;
        case 11:
            ekranyTr1[1]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[1]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 12:
            ekranyTr1[2]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[2]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 13:
            ekranyTr1[3]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[3]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 14:
            ekranyTr1[4]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[4]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 15:
            ekranyTr1[5]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[5]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 16:
            ekranyTr1[6]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[6]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 17:
            ekranyTr1[7]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[7]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 18:
            ekranyTr1[8]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[8]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 19:
            ekranyTr1[9]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[9]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 20:
            ekranyTr1[10]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[10]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 21:
            ekranyTr1[11]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[11]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 22:
            ekranyTr1[12]=wartoscStr.substring(0, wartoscStr.indexOf('#'));
            ekranyTr2[12]=wartoscStr.substring((wartoscStr.indexOf('#'))+1);
            break;
        case 23:
            break;
        case 24:
            break;
        case 25:
            kolorTla=strtol(wartoscStr.c_str(), NULL, 16);
            //Serial.println(kolorTla);
            break;
        case 26:
            kolorTex=strtol(wartoscStr.c_str(), NULL, 16);
            //Serial.println(kolorTex);
            break;
        case 27:
            kolorClk=strtol(wartoscStr.c_str(), NULL, 16);
            break;
        default:
            break;
    }
  }
  //Serial.println(ekranyTr1[1]);
  //Serial.println(ekranyTr2[1]);
  config.close();
}

void zapisNaKarcie()
{

    aktualnyPlikZapisu = SD.open(nazwaNowegoPliku, FILE_WRITE);
    buforDanych = SD.open(""/buforDanych.txt"", FILE_WRITE);
    
    buforDanych.seek(0);
    aktualnyPlikZapisu.seek(0);
    //aktualnyPlikZapisu.print(""\n"");
    
    for(int i=0; i<linijek; i++)
    {
        aktualnyPlikZapisu.print(daneDoZapisu[i][0]);
        aktualnyPlikZapisu.println(daneDoZapisu[i][1]);
        buforDanych.print(daneDoZapisu[i][0]);
        buforDanych.println(daneDoZapisu[i][1]);
    }
    //aktualnyPlikZapisu.println(""END DATA"");
    buforDanych.println(""END DATA"");
    aktualnyPlikZapisu.close();
    buforDanych.close();
}

void pobranieDanych()
{
    String liniaD;
    String doWpisania;
    
    int wiersz = 0;
    int licznik = 0;
    int pozycja;
    int liczbaWierszy=linijek;

    if(diagnosta){Serial.println(""teraz czas pobrac dane z pliku"");}
    najnowszyPlikOdczytu = SD.open(""/"" + nazwaPliku, FILE_READ);
    
    //Serial.println(""Plik odczytu ma tyle wierszy:"");
    if(najnowszyPlikOdczytu.available()<=1)
    {
        if(diagnosta){Serial.println(""Usuwam pusty plik"");}
        SD.remove(""/"" + nazwaPliku);
        ESP.restart();
    }
    najnowszyPlikOdczytu.seek(0);
    while(najnowszyPlikOdczytu.available())
    {
        liniaD = najnowszyPlikOdczytu.readStringUntil('\n');
        licznik++;
    }
    
    //Serial.println(licznik);
    
    calyPlik = new String[licznik+1];
    najnowszyPlikOdczytu.seek(0);
    for(int a = 0; a<licznik; a++)
    {
        najnowszyPlikOdczytu.seek(najnowszyPlikOdczytu.position()+3);
        liniaD = najnowszyPlikOdczytu.readStringUntil('\n');
        calyPlik[a]=liniaD;
        //Serial.println(liniaD);
    }
    
    najnowszyPlikOdczytu.close();
    
    for (int i = liczbaWierszy; i >= 0; i--) 
    {
        int c=map(i, 20, 0, 0, 20);
        String buf = calyPlik[licznik- i];
        if(diagnosta){Serial.println(buf);}
        pobraneDane[c][1]=buf;
        
    }
    delete[] calyPlik;

}

void utowrzeniePliku()
{
    DateTime now = rtc.now();
    sprintf(nazwaNowegoPliku, ""/%02u-%02u-%04u %02u-%02u-%02u.txt"",now.day(),now.month(),now.year(),now.hour(),now.minute(),now.second());
    Serial.println(nazwaNowegoPliku);
    //zapisNaKarcie();

}

void nadpisywanieDanychDoZapisu()
{
    daneDoZapisu[0][1]=przebieg;                //Serial.println(przebieg);
    daneDoZapisu[1][1]=PDystansKMTrip1;         //Serial.println(PDystansKMTrip1);
    daneDoZapisu[2][1]=PDystansKMOdtankowania;  //Serial.println(PDystansKMOdtankowania);
    daneDoZapisu[3][1]=SrSpalanie100km;         //Serial.println(SrSpalanie100km);
    daneDoZapisu[4][1]=MaxPredkosc;             //Serial.println(MaxPredkosc);
    daneDoZapisu[5][1]=SrPredkosc[3];           //Serial.println(SrPredkosc[3]);
    daneDoZapisu[6][1]=czasPracySilnikaSuma;    //Serial.println(czasPracySilnikaSuma);
    daneDoZapisu[7][1]=zatankowanoOstatnio;     //Serial.println(zatankowanoOstatnio);
    daneDoZapisu[8][1]=spalonePaliwoSuma;       //Serial.println(spalonePaliwoSuma);
    daneDoZapisu[9][1]=SrTemperaturaCieczy;     //Serial.println(SrTemperaturaCieczy);
    daneDoZapisu[10][1]=SrTemperaturaOleju;     //Serial.println(SrTemperaturaOleju);
    daneDoZapisu[11][1]=olej;
    daneDoZapisu[12][1]=rozrzad;
    daneDoZapisu[13][1]=najSpalanie;
    daneDoZapisu[14][1]=spalonePaliwoTrip;
    daneDoZapisu[15][1]=""0.00"";
    daneDoZapisu[16][1]=""0.00"";
    daneDoZapisu[17][1]=""0.00"";
    daneDoZapisu[18][1]=""0.00"";
    daneDoZapisu[19][1]=""0.00"";
}

void zapisPobranychDanych()
{
    utowrzeniePliku();
    aktualnyPlikZapisu = SD.open(nazwaNowegoPliku, FILE_WRITE);
    buforDanych = SD.open(""/buforDanych.txt"", FILE_WRITE);
    for(int i=0; i<linijek; i++)
    {
        aktualnyPlikZapisu.print(pobraneDane[i][0]);
        aktualnyPlikZapisu.print(pobraneDane[i][1]);
        buforDanych.print(pobraneDane[i][0]);
        buforDanych.print(pobraneDane[i][1]); 
    }
    aktualnyPlikZapisu.close();
    buforDanych.close();

    przebieg =              atoi(pobraneDane[0][1].c_str());    if(diagnosta){Serial.println(przebieg);}
    PDystansKMTrip1 =       atoff(pobraneDane[1][1].c_str());   if(diagnosta){Serial.println(PDystansKMTrip1);}
    PDystansKMOdtankowania= atoff(pobraneDane[2][1].c_str());   if(diagnosta){Serial.println(PDystansKMOdtankowania);}
    SrSpalanie100km =       atoff(pobraneDane[3][1].c_str());   if(diagnosta){Serial.println(SrSpalanie100km);}
    MaxPredkosc =           atoff(pobraneDane[4][1].c_str());   if(diagnosta){Serial.println(MaxPredkosc);}
    SrPredkosc[3] =         atoff(pobraneDane[5][1].c_str());   if(diagnosta){Serial.println(SrPredkosc[3]);}
    czasPracySilnikaSuma =  atoi(pobraneDane[6][1].c_str());    if(diagnosta){Serial.println(czasPracySilnikaSuma);}
    zatankowanoOstatnio =   atoff(pobraneDane[7][1].c_str());   if(diagnosta){Serial.println(zatankowanoOstatnio);}
    spalonePaliwoSuma =     atoff(pobraneDane[8][1].c_str());   if(diagnosta){Serial.println(spalonePaliwoSuma);}
    SrTemperaturaCieczy =   atoff(pobraneDane[9][1].c_str());   if(diagnosta){Serial.println(SrTemperaturaCieczy);}
    SrTemperaturaOleju =    atoff(pobraneDane[10][1].c_str());  if(diagnosta){Serial.println(SrTemperaturaOleju);}
    olej =                  atoi(pobraneDane[11][1].c_str());
    rozrzad =               atoi(pobraneDane[12][1].c_str());
    najSpalanie =           atoff(pobraneDane[13][1].c_str());
    //nadpisywanieDanychDoZapisu();
}

void wyborNajnowszegoPliku()
{
    File plik1 = SD.open(""/"");
    File plik2;
    File najnowszyPlik;
    
    bool pustaKarta = !plik1.available();
    bool toJuzWszystkiePliki = true;
    //Serial.println(pustaKarta);
    long long najnowszaDataGodzina = 0;
    String bufferNazwaPliku;
    String dzien, miesiac, rok, godzina, minuta, sekunda;

    if(!pustaKarta)
    {
        utowrzeniePliku();
    }
    else
    {
        while(toJuzWszystkiePliki)
        {
            plik2 = plik1.openNextFile();
            if(plik2.isDirectory())
            {
                continue;
            }
            if(!plik2)
            {
                toJuzWszystkiePliki = false;
            }
            else
            {
                bufferNazwaPliku = plik2.name();
                dzien = bufferNazwaPliku.substring(0, 2);
                miesiac = bufferNazwaPliku.substring(3, 5);
                rok = bufferNazwaPliku.substring(6, 10);
                godzina = bufferNazwaPliku.substring(11, 13);
                minuta = bufferNazwaPliku.substring(14, 16);
                sekunda = bufferNazwaPliku.substring(17, 19);

                long long dataGodzina = atoll((rok + miesiac + dzien + godzina + minuta + sekunda).c_str());

                if(dataGodzina > najnowszaDataGodzina)
                {
                    najnowszaDataGodzina = dataGodzina;
                    najnowszyPlik = plik2;
                    nazwaPliku = najnowszyPlik.name();
                }
                plik2.close();
            }
        }
        plik1.close();
        Serial.println(nazwaPliku);
    }
}

void inicjalizacjaKonfiguracji(){
    if (Serial.available() > 0) {
        if (!odebranoKlucz) {
            String odebranyKlucz = Serial.readStringUntil('\n');
        
            if (odebranyKlucz == ""123456789"") {
                odebranoKlucz = true;
                delay(200);
                Serial.println(odebranyKlucz);
                delay(50);
                Serial.println(""Przyznano dostep"");
                delay(50);
                Serial.print(""NrSeryjny: "");
                Serial.println(nrSeryjny);
                delay(50);
                Serial.print(""WersjaOprogramowania: "");
                Serial.println(""0.68"");
                
            }
        }
    }
       
    while(odebranoKlucz == true){
        if(Serial.available() > 0){
            config = SD.open(""/config.txt"", FILE_READ);            
            String zawartosc = config.readString();
            config.close();

            String receivedChar = Serial.readString();

            Serial.print(""Odebrano: "");
            Serial.println(receivedChar);

            String idStr = receivedChar.substring(1, 4);
            int id = idStr.toInt();
            Serial.print(""ID: "");
            Serial.println(idStr);
            
            String wartoscStr = receivedChar.substring(5, receivedChar.length() - 5);
            Serial.print(""wartosc: "");
            Serial.println(wartoscStr);

            if(id==999){
                odebranoKlucz=false;
                tft.println(""REset"");
                ESP.restart();
            }else if(id==101){
                Serial.println(""Konfiguracja zegaraka"");
                uint16_t year = wartoscStr.substring(6, 10).toInt();  // Wyodrębnienie roku
                uint16_t month = wartoscStr.substring(3, 5).toInt();  // Wyodrębnienie miesiąca
                uint16_t day = wartoscStr.substring(0, 2).toInt();    // Wyodrębnienie dnia
                uint16_t hour = wartoscStr.substring(11, 13).toInt(); // Wyodrębnienie godziny
                uint16_t minute = wartoscStr.substring(14, 16).toInt(); // Wyodrębnienie minuty
                uint16_t second = wartoscStr.substring(17, 19).toInt(); // Wyodrębnienie sekundy

                rtc.adjust(DateTime(year, month, day, hour, minute, second)); // Ustawienie RTC
            }else{
                config = SD.open(""/config.txt"",FILE_WRITE);
                String modifiedzawartosc = aktLinie(zawartosc, idStr, receivedChar);
                config.print(modifiedzawartosc);
                config.close();
            }
        }
    }
}

void obslugaExpendera()
{
    for (uint8_t p=0; p<16; p++) {
        switch (p) {
            case 0:
                if(pcf.digitalRead(p)==0){
                    zaplon=true;
                    //Serial.println(zaplon);
                }else{
                    zaplon=false;
                }
                break;
            case 1:
                if(pcf.digitalRead(p)==0){
                    swiatla=true;
                    //Serial.println(swiatla);
                }else{
                    swiatla=false;
                }
                break;
            case 2:
                if(pcf.digitalRead(p)==0){
                    GPIOtrzyTrzy=true;
                }else{
                    GPIOtrzyTrzy=false;
                }
                break;
            case 3:
                if(pcf.digitalRead(p)==0){
                    GPIOtrzyCztery=true;
                }else{
                    GPIOtrzyCztery=false;
                }
                break;
            case 4:
                if(buzzer==true){
                    pcf.digitalWrite(p, LOW);
                }else{
                    pcf.digitalWrite(p, HIGH);
                }
                break;
            case 8:
                if(pcf.digitalRead(p)==1){
                    MANETKAtryb=true;
                }else{
                    MANETKAtryb=false;
                }
                break;
                
            case 9:
                if(pcf.digitalRead(p)==1){
                    MANETKAfunckja=true;
                }else{
                    MANETKAfunckja=false;
                }
                break;
            case 10:
                if(pcf.digitalRead(p)==1){
                    if (czasPrzytrzymaniaPrzycisku == 0) {
                        czasPrzytrzymaniaPrzycisku = millis(); // Zapisz czas rozpoczęcia naciśnięcia przycisku
                        } else {
                        // Jeśli przycisk jest nadal wciśnięty, sprawdź czy minęło wystarczająco czasu na uznane za długie naciśnięcie
                        if (millis() - czasPrzytrzymaniaPrzycisku >= 2000) {
                            // Wykonaj funkcję dla długiego naciśnięcia przycisku
                            MANETKAreset=true;   
                            // Zresetuj czas rozpoczęcia naciśnięcia przycisku
                            czasPrzytrzymaniaPrzycisku = 0;
                        }
                        }
                    } else {
                        MANETKAreset=false;
                        czasPrzytrzymaniaPrzycisku = 0;
                    }
                break;
            case 11:
                if(ESP_RESET==true){
                    pcf.digitalWrite(p, LOW);
                    ESP_RESET=false;
                }else{
                    pcf.digitalWrite(p, HIGH);
                }
                break;
            case 12:
                if(pcf.digitalRead(p)==0){
                    zlonczeUI=true;
                }else{
                    zlonczeUI=false;
                }
                break;
            case 13:
                if(pcf.digitalRead(p)==0){
                    zlonczeUII=true;
                }else{
                    zlonczeUII=false;
                }
                break;
            case 14:
                if(pcf.digitalRead(p)==0){
                    zlonczeUIII=true;
                }else{
                    zlonczeUIII=false;
                }
                break;
            case 15:
                if(LCD_LED==false){
                    pcf.digitalWrite(15, HIGH);
                }else{
                    pcf.digitalWrite(15, LOW);
                }
                break;
            default:
                
            break;
        }      
    }
        //pcf.digitalWrite(5,muxCode[1][0]);
        //pcf.digitalWrite(6,muxCode[1][1]);
        //pcf.digitalWrite(7,muxCode[1][2]);
        //odczytMiliVoltP=(analogReadMilliVolts(MUX_IN));
    
    for(int i=0; i<8; i++){
        pcf.digitalWrite(5,muxCode[i][0]);
        pcf.digitalWrite(6,muxCode[i][1]);
        pcf.digitalWrite(7,muxCode[i][2]);
        //Serial.print(""Napięcie na pinie "");
        //Serial.print(i);
        //Serial.print("" : "");
        //Serial.println(analogRead(MUX_IN));
    
        switch (i)
        {
        case 0:
            odczytMiliVoltT=(analogReadMilliVolts(MUX_IN));
            break;
        case 1:
            odczytMiliVoltP=(analogReadMilliVolts(MUX_IN));
            break;
        case 2:
            odczytMiliVoltO=(analogReadMilliVolts(MUX_IN));
            break;
        case 3:
            NTC_ONE=(analogReadMilliVolts(MUX_IN));
            break;
        case 4:
            NTC_TWO=(analogReadMilliVolts(MUX_IN));
            break;
        case 5:
            czisOlej=(analogReadMilliVolts(MUX_IN));
            break;
        case 6:
            czisBoost=(analogReadMilliVolts(MUX_IN));
            break;
        default:
            break;
        }
        
    }

}

volatile unsigned long czasOstatniegoZbocza = 0;

void IRAM_ATTR isr_otwarcieWtrysku ()
{
  unsigned long czasAktulnegoZbocza = micros();

  if(digitalRead(PinWtrysk) == HIGH)
  {
    czasOstatniegoZbocza = czasAktulnegoZbocza;
  }else{
    czasImpulsu = czasAktulnegoZbocza-czasOstatniegoZbocza;
    nowyImpuls = true;
  }
}

void spalonePaliwo()
{
    spalonePaliwoDzienne+=spalanieLS;
    spalonePaliwoSuma+=spalanieLS;
    spalonePaliwoDzienne+=spalanieLS;
}

void SrednieSpalanie()
{
    if (PDystansKM - PDystansKMpop >= 1)
    {
        if (iloscOdczytow1km > 0)
        {
            SrSpalanie1km = sumaSpalania1km / iloscOdczytow1km;
        }
        else
        {
            SrSpalanie1km = 0;
        }

        if (SrSpalanie100km <= 0)
        {
            SrSpalanie100km = SrSpalanie1km;
        }

        SrSpalanie100km = ((SrSpalanie1km * 1) + (SrSpalanie100km * 99)) / 100;
        sumaSpalania1km = 0;
        iloscOdczytow1km = 0;
        PDystansKMpop = PDystansKM;
    }
}

void spalanie()
{
    
    
    if(nowyImpuls)
    {   
        noInterrupts();
        czasOtwarciaWT=czasImpulsu/1000000.0;
        nowyImpuls=false;
        interrupts();
        //Serial.print(""czas Impulsu: "");
        Serial.println(czasOtwarciaWT);
        iloscOdczytow1km++;
        spalanieLS=czasImpulsu/1000000.00*stalaW;
        spalanieLH=spalanieLS*1200.00;
        if(spalanieLH>30.00){spalanieLH=0.00;spalanieLS=0.00;}
        sumaSpalania1km+=spalanieLS;
        spalonePaliwo();
        SrednieSpalanie();
        
        //Serial.println(czasImpulsu/10000000.00,5);
        
        //Serial.print("" spalanie L na 3s: "");
        //Serial.print(spalanieLS, 6);
        //Serial.print("" spalanie L na h: "");
        //Serial.println(spalanieLH,6);
       
    }
    //else{
    //    if(millis()-poprzedniOczyt>=5000){
    //        ESP_RESET=true;
     //       poprzedniOczyt=millis();
     //   }
    //}  
    
}

void najwyzszeSpalanie()
{
    if(spalanieLH>najSpalanie)
    {
        najSpalanie=spalanieLH;
    }
}

void predkosciomierz()
{
    a=false;
    b=false;
    zero=false;
    c=0;
    czasPrzed=millis();
    while(c<4)  //jeden obórt linki = cztery max wartosci (cztery ""magnesy"")
    {
        if(analogRead(PinHalla)<=2050) //min odczyt z czujnika
        {b=true;} 
            
        if(analogRead(PinHalla)>=2051 && analogRead(PinHalla)<2200 && b==true)
        {a=true;}
        
        if(analogRead(PinHalla)>=2200 && a==true) //max odczyt z czujknika
        {c++;a=false;b=false;}
        
        //jezeli linka stoi przez 3 sekundy to jest to równe z 0 predkoscia
        if(millis()-czasPrzed>=3000)    
        {c=5; zero=true;}
    } 
    czasPo=millis();
    roznicaP=czasPo-czasPrzed;
    
    if(zero==true)      //jeżeli predkosc zerowa
    {
        predkosc=0;
        predkoscMS=0;
        zero=false;
    }else
    {
        //funkcja stosunku czasu obrotu linki do predkosci samochodu
        predkosc=3999*(1.0/roznicaP)+0.5;
        //predkosc w metrach na sekunde do obliczania przejechanego dystansu   
        predkoscMS=predkosc/3.6;            
        tylkoRazPD=true;
        
    }
}

void SredniaPredkosc()
{
    SrPredkosc[0]=predkosc;
    SrPredkosc[1]+=SrPredkosc[0];
    SrPredkosc[2]++;
    SrPredkosc[3]=SrPredkosc[1]/SrPredkosc[2];
}

void PrzejechanyDystans()
{
    if(tylkoRazPD==true)
    {
        roznicaDoDys=roznicaP/1000.0000;
        //temp Serial.println(roznicaDoDys);
        PDystansM=PDystansM+((roznicaDoDys*predkoscMS)*0.94);
        PDystansKM=PDystansM/1000;
        PDystansKMSuma+=            ((roznicaDoDys*predkoscMS)*0.94);
        PDystansKMOdtankowania+=    ((roznicaDoDys*predkoscMS)*0.94);
        przebieg+=                  ((roznicaDoDys*predkoscMS)*0.94);
        PDystansKMTrip1+=           ((roznicaDoDys*predkoscMS)*0.94);
        olej+=                      ((roznicaDoDys*predkoscMS)*0.94);
        rozrzad+=                   ((roznicaDoDys*predkoscMS)*0.94);
        tylkoRazPD=false;
    }
    
}

void MaxOsiagnietaPredkosc() 
{
    if(predkosc>MaxPredkosc)
    {
        MaxPredkosc=predkosc;
    }
}

void DiodyKontrolkiStart()
{
    leds[3].setColorCode(0x500000);
    leds[4] = CRGB::Black;
    leds[5] = CRGB::Black;
    leds[6] = CRGB::Black;
    leds[7] = CRGB::Black;
    FastLED.show();
    delay(100);
    leds[3].setColorCode(0x500000);
    leds[4].setColorCode(0x502500);
    leds[5] = CRGB::Black;
    leds[6] = CRGB::Black;
    leds[7] = CRGB::Black;
    FastLED.show();
    delay(100);
    leds[3].setColorCode(0x500000);
    leds[4].setColorCode(0x502500);
    leds[5].setColorCode(0x005000);
    leds[6] = CRGB::Black;
    leds[7] = CRGB::Black;
    FastLED.show();
    delay(100);
    leds[3].setColorCode(0x500000);
    leds[4].setColorCode(0x502500);
    leds[5].setColorCode(0x005000);
    leds[6].setColorCode(0x005050);
    leds[7] = CRGB::Black;
    FastLED.show();
    delay(100);
    leds[3].setColorCode(0x500000);
    leds[4].setColorCode(0x502500);
    leds[5].setColorCode(0x005000);
    leds[6].setColorCode(0x005050);
    leds[7].setColorCode(0x000050);
    FastLED.show();
    delay(200);
    leds[3].setColorCode(0x500000);
    leds[4].setColorCode(0x502500);
    leds[5].setColorCode(0x005000);
    leds[6].setColorCode(0x005050);
    leds[7] = CRGB::Black;
    FastLED.show();
    delay(100);
    leds[3].setColorCode(0x500000);
    leds[4].setColorCode(0x502500);
    leds[5].setColorCode(0x005000);
    leds[6] = CRGB::Black;
    leds[7] = CRGB::Black;
    FastLED.show();
    delay(100);
    leds[3].setColorCode(0x500000);
    leds[4].setColorCode(0x502500);
    leds[5] = CRGB::Black;
    leds[6] = CRGB::Black;
    leds[7] = CRGB::Black;
    FastLED.show();
    delay(100);
    leds[3].setColorCode(0x500000);
    leds[4] = CRGB::Black;
    leds[5] = CRGB::Black;
    leds[6] = CRGB::Black;
    leds[7] = CRGB::Black;
    FastLED.show();
    delay(100);
    leds[3] = CRGB::Black;
    leds[4] = CRGB::Black;
    leds[5] = CRGB::Black;
    leds[6] = CRGB::Black;
    leds[7] = CRGB::Black;
    FastLED.show();
    delay(100);
        
    
}

void podswietlenie()
{
    if(swiatla)
    {
        leds[0].setColorCode(0x00FF00);
        leds[1].setColorCode(0x00FF00);
        leds[2].setColorCode(0x00FF00);

        FastLED.show();
    }else{
        leds[0] = CRGB::Black;
        leds[1] = CRGB::Black;
        leds[2] = CRGB::Black;
        FastLED.show();
    }
}

void odczytTemperaturyCieczy()
{
    if(zaplon){
    //odczytMiliVoltT=analogReadMilliVolts(36)-0.10;
    odczytVoltT=(10.0-((((odczytMiliVoltT)*((1500.0+750.0)/750.0))/1000.0)))-0.10;
    temperaturaCieczy = 1.0 / (((78.32591 / (odczytVoltT/10.0)) - 78.32591 + 130.0) / 22800.0); 
    //Serial.println(odczytVoltT);
    } 
}


void odczytIlosciPaliwa()
{
    if(zaplon){
    if(millis()-ostatniOczdczytCzasu1>=1000)
    {
        //odczytMiliVoltP=analogReadMilliVolts(39)-0.10;
        odczytVoltP=(10.0-((odczytMiliVoltP*750.0/(1500.0+750.0))-52.67)/100.0); //10.10-(((odczytMiliVoltP*((1500+750)/750))/1000));
        //Serial.println(odczytVoltP);
        
        if (odczytVoltP <= 3.5011) {
        aktualnyStanPaliwa=( -7.6 * (13.4 / (odczytVoltP - 5.8)) - 21);
        } else if (odczytVoltP >= 3.501 && odczytVoltP <= 4.49304) {
            aktualnyStanPaliwa= (-2.1 * (56 / (odczytVoltP - 6.9)) - 11.3);
        } else if (odczytVoltP > 4.49303 && odczytVoltP <= 5.87198) {
            aktualnyStanPaliwa= (-3 * (50 / (odczytVoltP - 9.5)) + 7.6);
        } else if (odczytVoltP > 5.87197) {
            aktualnyStanPaliwa= (-5.5 * (21 / (odczytVoltP - 7.5)) - 22);
        } else {
            aktualnyStanPaliwa=9;
        }
        sumaPaliwa=sumaPaliwa+aktualnyStanPaliwa;
        ostatniOczdczytCzasu2++;
        ostatniOczdczytCzasu1=millis();
    }
    if(ostatniOczdczytCzasu2==10){
        sredniePaliwo=sumaPaliwa/10.0;
        sumaPaliwa=0;
        ostatniOczdczytCzasu2=0;
    }
    }
}

void odczytNapiecia()
{
    napiecie=0;
    moc=0;
    napiecie = ina219.getBusVoltage_V()+(ina219.getShuntVoltage_mV()/100);
    moc=ina219.getPower_mW();
}

void czasPracySilnika()
{
    unsigned long aktualnyCzas = millis(); // Pobierz aktualny czas

    if (digitalRead(PinWtrysk) == HIGH) {
    if (!sygnalWystepuje) {
      czasStartowy = aktualnyCzas;
    }
    sygnalWystepuje = true;
  } else {
    if (sygnalWystepuje) {
      unsigned long czasTrwaniaAktualny = aktualnyCzas - czasStartowy;
      if (czasTrwaniaAktualny >= limitCzasu) {
        czasTrwania += czasTrwaniaAktualny;
      }
      sygnalWystepuje = false;
    }
  }

  if (sygnalWystepuje) {
    czasTrwania = aktualnyCzas - czasStartowy;
  }

    //Serial.print(""Całkowity czas trwania sygnału: "");
    //Serial.print(czasTrwania); // Konwersja czasu z milisekund na godziny i wyświetlenie z dwoma miejscami po przecinku
    //Serial.println("" h"");
    
    czasPracySilnikaGodziny = (czasTrwania / 1000) / 60 / 60;
    czasPracySilnikaMinuty = (czasTrwania / 1000/60) % 60;
    
}
//& FUNKCJE ODPOWIADAJĄCE ZA WYŚWIETELNIE POSZCZEGOŁNYCH RZECZY

void WysTekst(String tekst){
  tft.setFont();
  tft.setTextColor(kolorTex, kolorTla);
  tft.setTextSize(1);
  tft.setCursor(10, 60);
  tft.print(tekst);
}

void WysPustyEkran()
{
  tft.fillScreen(kolorTla);
}

void WysCzasPracySilnika()
{
    tft.setFont();
    //tft.drawBitmap(15, 77, SpalanieChwilowe, 24, 32, kolorTex, kolorTla);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(2);
    tft.setCursor(10, 60);
    tft.print(""CZAS PRACY:"");
    tft.setTextSize(3);
    tft.setCursor(60, 80);
    tft.print(czasPracySilnikaGodziny,0);
    tft.print("":"");
    tft.print(czasPracySilnikaMinuty,0);
}

void WysTemperaturyCieczy()
{
    tft.setFont();
    //odczytTemperaturyCieczy();
    tft.drawBitmap(15, 77, SymTempCieczy, 24, 32, kolorTex, kolorTla);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(3);
    tft.setCursor(60, 80);
    tft.print(temperaturaCieczy);
}

void WysSrPredkosci()
{
    tft.setFont();
    tft.drawBitmap(15, 77, SymbolSrPredkosc, 32, 32, kolorTex, kolorTla);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(3);
    tft.setCursor(60, 80);
    tft.print(SrPredkosc[3]);
    //tft.print(""48.5"");
}

void WysPredkosci(bool tryb)
{
    tft.setFont();
    if(tryb==false)
    {
        tft.drawBitmap(15, 77, WskaznikPredkosci, 32, 32, kolorTex, kolorTla);
        tft.setTextColor(kolorTex, kolorTla);
        tft.setTextSize(3);
        tft.setCursor(60, 80);
        tft.print(predkosc);
    }
    else if(tryb==true)
    {
        tft.drawBitmap(15, 77, SymbolSrPredkosc, 32, 32, kolorTex, kolorTla);
        tft.setTextColor(kolorTex, kolorTla);
        tft.setTextSize(3);
        tft.setCursor(60, 80);
        tft.print(SrPredkosc[3]); 
        //tft.print(""48.5"");
    }
}

void WysMaxPredkosc()
{
    char buffor[10];
    if (MaxPredkosc < 100) 
    {
        snprintf(buffor, sizeof(buffor), ""0%.0f"", MaxPredkosc);
    }else{
        snprintf(buffor, sizeof(buffor), ""%.0f"", MaxPredkosc);
    }

    tft.setFont();
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(2);
    tft.setCursor(10, 60);
    tft.print(""Obroty:""); //tft.print(""MAX SPEED:"");
    tft.setTextSize(3);
    tft.setCursor(10, 80);
    tft.print(buffor);  //tft.print(MaxPredkosc);
}

void WysPrzjechanegoDystansu(bool tryb)
{
    tft.setFont();
    tft.drawBitmap(15, 77, PrzejchanyDystans, 24, 24, kolorTex, kolorTla);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(3);
    tft.setCursor(60, 80);
    if(tryb==true){tft.print(int(PDystansKMSuma));}
    else if(tryb==false){tft.print(PDystansKM);}
    
}

void WysSpalaniaChwilowego()
{
    //spalanie();
    tft.setFont();
    char buffor[10];
    if (spalanieLH < 10) 
    {
        snprintf(buffor, sizeof(buffor), ""0%.2f"", spalanieLH);
    }else{
        snprintf(buffor, sizeof(buffor), ""%.2f"", spalanieLH);
    }
    tft.drawBitmap(15, 77, SpalanieChwilowe, 24, 32, 0xFC00, kolorTla);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(3);
    tft.setCursor(50, 80);
    tft.print(buffor);
    
}

void WysSpalanoPaliwo(bool tryb)
{
    tft.setFont();
    tft.drawBitmap(15, 77, SymbolSpalonePaliwo, 27, 37, kolorTex, kolorTla);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(3);
    tft.setCursor(60, 80);
    if(tryb==true){tft.print(int(spalonePaliwoSuma));}
    else if(tryb==false){tft.print(spalonePaliwoDzienne);}
}

void WysTemperatury()
{
    sensors.requestTemperatures();
    tft.setFont();
    tft.setTextSize(2);
    tft.setTextColor(kolorTex);
    tft.setTextSize(2);
    tft.drawBitmap(30, 70, TempIN, 24, 24, ST77XX_RED, kolorTla);
    tft.drawBitmap(105, 70, TempOUT, 24, 24, ST77XX_GREEN, kolorTla);
    tft.setTextColor(ST77XX_RED, kolorTla);
    tft.setCursor(10, 100);
    tft.println(sensors.getTempC(sensorIN));
    tft.setTextColor(ST77XX_GREEN, kolorTla);
    tft.setCursor(85, 100);
    tft.println(sensors.getTempC(sensorOUT));
}

void WysNapiecia()
{
    
    tft.setFont();
    tft.drawBitmap(15, 77, AKUMULATOR, 32, 24, kolorTex, kolorTla);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(3);
    tft.setCursor(55, 80);
    tft.print(napiecie);
    tft.setTextSize(1);
    tft.setCursor(90, 105);
    tft.print(moc/1000);

}

void WysZegareka()
{
    DateTime now = rtc.now();
    tft.setFont();
    tft.setTextColor(kolorClk, kolorTla);
    tft.setTextSize(2);
    
    sprintf(zegarekBuf,""%02u:%02u "",now.hour(),now.minute());
    tft.setCursor(10, 5);
    tft.print(zegarekBuf);
    
    sprintf(zegarekBuf,""%02u.%02u "",now.day(),now.month());
    tft.setCursor(90, 5);
    tft.print(zegarekBuf);
}

void WysSrSpalaniaNa100()
{
    //spalanie();
    tft.setFont();
    char buffor[10];
    if (SrSpalanie100km < 10) 
    {
        snprintf(buffor, sizeof(buffor), ""0%.2f"", SrSpalanie100km);
    }else {
        snprintf(buffor, sizeof(buffor), ""%.2f"", SrSpalanie100km);
    }
    tft.drawBitmap(15, 77, SpalanieNaSto, 24, 32, 0xFC00, kolorTla);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(3);
    tft.setCursor(50, 80);
    tft.print(buffor);
    
}

void WysPobieranieDancyh()
{
    tft.drawBitmap(45, 55, PonbieranieDanychL, 32, 64, kolorTex, kolorTla);
    tft.drawBitmap(77, 55, PonbieranieDanychR, 32, 64, kolorTex, kolorTla);
}

void WysPakiet2()               //% wyswietlanie dwoch przebiegow dzienny i ogolny
{   
    tft.setFont();
    tft.drawBitmap(3, 120, PrzejchanyDystans, 24, 24, 0x001F, kolorTla);
    tft.drawBitmap(4, 80, PrzejchanyDystans, 24, 24, 0x001F, kolorTla);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(2);
    tft.setCursor(50, 60);
    tft.print(przebieg);
    tft.setCursor(50, 95);
    tft.print(PDystansKM);
}

void WysPakiet1()               //% wyświetlenie dwóch danych naraz SPALANIE I PREDKOSC
{
    tft.setFont();
    tft.drawBitmap(3, 120, SpalanieChwilowe, 24, 32, kolorTex, kolorTla);
    tft.drawBitmap(4, 80, WskaznikPredkosci, 32, 32, kolorTex, kolorTla);
    //tft.drawBitmap(1, 90, PrzejchanyDystans, 24, 24, kolorTex, kolorTla);
    //tft.drawBitmap(90, 90, SymTempCieczy, 24, 32, kolorTex, kolorTla);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(2);
    tft.setCursor(50, 60);
    tft.print(spalanieLH);
    tft.setCursor(50, 95);
    tft.print(predkosc);
}

void WysEkranStart()
{   
    char buffor1[10];
    if (napiecie < 10) 
    {
        snprintf(buffor1, sizeof(buffor1), ""0%.1f"", napiecie);
    }else{
        snprintf(buffor1, sizeof(buffor1), ""%.1f"", napiecie);
    }
    char buffor2[10];
    if (temperaturaCieczy < 100) 
    {
        snprintf(buffor2, sizeof(buffor2), ""0%.0f"", temperaturaCieczy);
    }else{
        snprintf(buffor2, sizeof(buffor2), ""%.0f"", temperaturaCieczy);
    }
    char buffor3[10];
    if (spalanieLH < 10) 
    {
        snprintf(buffor3, sizeof(buffor3), ""0%.2f"", spalanieLH);
    }else{
        snprintf(buffor3, sizeof(buffor3), ""%.2f"", spalanieLH);
    }
    char buffor4[10];
    if (sredniePaliwo < 10) 
    {
        snprintf(buffor4, sizeof(buffor4), ""0%.2f"", sredniePaliwo);
    }else{
        snprintf(buffor4, sizeof(buffor4), ""%.2f"", sredniePaliwo);
    }
    //tft.setFont(&FreeSans12pt7b);
    tft.setTextColor(kolorTex, kolorTla);
    tft.setTextSize(2);
    
    tft.setCursor(68, 63);
    tft.drawBitmap(50, 63, Plomien, 16, 16, 0xE800, kolorTla);
    tft.println(buffor3);

    tft.setCursor(68, 85);
    tft.drawBitmap(50, 85, Paliwo, 16, 16, 0xDB60, kolorTla);
    tft.println(buffor4);
    
    tft.setTextColor(kolorTex, 0xC800);
    tft.setCursor(23, 102);
    //tft.fillRect(0, 102, 160, 26, 0xC800);
    //tft.drawBitmap(5, 102, Akumulator, 16, 16, kolorTex,  0xC800);
    tft.print(buffor1);
    
    //tft.drawBitmap(70, 102, Akumulator, 16, 16, kolorTex,  0xC800);
    tft.setCursor(88, 102);
    tft.print(buffor2);

}

void uspienie()
{
    unsigned long czasPrzed;
    unsigned long czas;
    if(zaplon)
    {
        czas = millis();
        if(czas-czasPrzed>600000 && temperaturaCieczy<40.00)
        {
            trzaReset=true;
        }
    }
    
    if(zaplon)
    {
        czasPrzed = millis();
        if(trzaReset==true)
        {
            czas=0;
            ESP.restart();
            trzaReset=false;
        }
    }
}

void pracaAuta()
{
    
    if(zaplon){LCD_LED=true;}
    if(!zaplon){LCD_LED=false;}

    if(zaplon){
        popStanSamochodu=false;
    }else{
        popStanSamochodu=true;
        tylkoRazSA=true;
    }

    if(zaplon && tylkoRazSA){
        DiodyKontrolkiStart();
        tylkoRazSA=false;
    }
    
}

void obslugaKolejWys(int ekran, bool tryb){
    if(tryb==2){
        if(ekranyTr2[ekran]==""Woltomierz""){
            //Serial.println(""Woltomierz"");
            WysNapiecia();
        }else if(ekranyTr2[ekran]==""TempOleju""){
            //Serial.println(""TempOleju"");
            WysTekst(ekranyTr2[ekran]);
        }else if(ekranyTr2[ekran]==""SrTempOleju""){
            //Serial.println(""PrzejechanyDystans"");
            WysTekst(ekranyTr2[ekran]);
        }else if(ekranyTr2[ekran]==""TempZewnetrzna""){
            //Serial.println(""TempZewnetrzna"");
            //WysTekst(ekranyTr2[ekran]);
            WysTemperatury();
        }else if(ekranyTr2[ekran]==""TempWewnetrzna""){
            //Serial.println(""TempWewnetrzna"");
            WysTemperatury();
        }else if(ekranyTr2[ekran]==""EkranStartowy""){
            //Serial.println(""PrzejechanyDystans"");
            WysEkranStart();
        }else if(ekranyTr2[ekran]==""PrzejechanyDystans""){
            //Serial.println(""PrzejechanyDystans"");
            WysPrzjechanegoDystansu(1);
        }else if(ekranyTr2[ekran]==""DziennyPrzejechanyDystans""){
            //Serial.println(""MaxPredkosc"");
            WysPrzjechanegoDystansu(2);
        }else if(ekranyTr2[ekran]==""SpalanieChwilowe""){
            //Serial.println(""SpalanieChwilowe"");
            WysSpalaniaChwilowego();
        }else if(ekranyTr2[ekran]==""SrSpalanie""){
            //Serial.println(""SrSpalanie"");
            WysSrSpalaniaNa100();
        }else if(ekranyTr2[ekran]==""SumaSpalania""){
            //Serial.println(""SumaSpalania"");
            WysSpalanoPaliwo(1);
        }else if(ekranyTr2[ekran]==""SrTempSilnika""){
            //Serial.println(""DzienneSumaSpalania"");
            WysTemperaturyCieczy();
        }else if(ekranyTr2[ekran]==""TempSilnika""){
            //Serial.println(""TempSilnika"");
            WysTemperaturyCieczy();
        }else if(ekranyTr2[ekran]==""DziennaSumaSpalania""){
            //Serial.println(""SrTempSilnika"");
            WysSpalanoPaliwo(1);
        }else if(ekranyTr2[ekran]==""Predkosc""){
            //Serial.println(""Predkosc"");
            WysPredkosci(1);
        }else if(ekranyTr2[ekran]==""SrPredkosc""){
            //Serial.println(""SrPredkosc"");
            WysPredkosci(0);
        }else if(ekranyTr2[ekran]==""MaxPredkosc""){
            //Serial.println(""MaxPredkosc"");
            WysMaxPredkosc();
        }else if(ekranyTr2[ekran]==""CzasPracySilnika""){
            //Serial.println(""MaxPredkosc"");
            WysCzasPracySilnika();
        }else if(ekranyTr2[ekran]==""DziennyCzasPracySilnika""){
            //Serial.println(""MaxPredkosc"");
            WysCzasPracySilnika();
        }else if(ekranyTr2[ekran]==""PustyEkran""){
            //Serial.println(""PustyEkran"");
            aktEkran=1;
            licznikW=1;
        }else{
            Serial.println(""Nic nie pasuje w trybie 2"");
        }
    }else if(tryb==1){
        if(ekranyTr1[ekran]==""Woltomierz""){
            //Serial.println(""Woltomierz"");
            WysNapiecia();
        }else if(ekranyTr1[ekran]==""TempOleju""){
            //Serial.println(""TempOleju"");
            WysTekst(ekranyTr1[ekran]);
        }else if(ekranyTr1[ekran]==""SrTempOleju""){
            //Serial.println(""PrzejechanyDystans"");
            WysTekst(ekranyTr1[ekran]);
        }else if(ekranyTr1[ekran]==""TempZewnetrzna""){
            //Serial.println(""TempZewnetrzna"");
            //WysTekst(ekranyTr2[ekran]);
            WysTemperatury();
        }else if(ekranyTr1[ekran]==""TempWewnetrzna""){
            //Serial.println(""TempWewnetrzna"");
            WysTemperatury();
        }else if(ekranyTr1[ekran]==""EkranStartowy""){
            //Serial.println(""PrzejechanyDystans"");
            WysEkranStart();
        }else if(ekranyTr1[ekran]==""PrzejechanyDystans""){
            //Serial.println(""PrzejechanyDystans"");
            WysPrzjechanegoDystansu(1);
        }else if(ekranyTr1[ekran]==""DziennyPrzejechanyDystans""){
            //Serial.println(""MaxPredkosc"");
            WysPrzjechanegoDystansu(2);
        }else if(ekranyTr1[ekran]==""SpalanieChwilowe""){
            //Serial.println(""SpalanieChwilowe"");
            WysSpalaniaChwilowego();
        }else if(ekranyTr1[ekran]==""SrSpalanie""){
            //Serial.println(""SrSpalanie"");
            WysSrSpalaniaNa100();
        }else if(ekranyTr1[ekran]==""SumaSpalania""){
            //Serial.println(""SumaSpalania"");
            WysSpalanoPaliwo(1);
        }else if(ekranyTr1[ekran]==""SrTempSilnika""){
            //Serial.println(""DzienneSumaSpalania"");
            WysTemperaturyCieczy();
        }else if(ekranyTr1[ekran]==""TempSilnika""){
            //Serial.println(""TempSilnika"");
            WysTemperaturyCieczy();
        }else if(ekranyTr1[ekran]==""DziennaSumaSpalania""){
            //Serial.println(""SrTempSilnika"");
            WysSpalanoPaliwo(1);
        }else if(ekranyTr1[ekran]==""Predkosc""){
            //Serial.println(""Predkosc"");
            WysPredkosci(1);
        }else if(ekranyTr1[ekran]==""SrPredkosc""){
            //Serial.println(""SrPredkosc"");
            WysPredkosci(0);
        }else if(ekranyTr1[ekran]==""MaxPredkosc""){
            //Serial.println(""MaxPredkosc"");
            WysMaxPredkosc();
        }else if(ekranyTr1[ekran]==""CzasPracySilnika""){
            //Serial.println(""MaxPredkosc"");
            WysCzasPracySilnika();
        }else if(ekranyTr1[ekran]==""DziennyCzasPracySilnika""){
            //Serial.println(""MaxPredkosc"");
            WysCzasPracySilnika();
        }else if(ekranyTr1[ekran]==""PustyEkran""){
            //Serial.println(""PustyEkran"");
            aktEkran=1;
            licznikW=1;
            //WysPustyEkran();
        }else{
            Serial.println(""Nic nie pasuje w trybie 1"");
        }
    }
}

void interfjs(){

    if(MANETKAreset)
    {
        if(diagnosta){Serial.println(""RESET"");}
        MANETKAreset=false;
    }
    
    if(MANETKAfunckja)
    {
        licznikW++;
        wycz=false;
        MANETKAfunckja=false;
    }

    if(MANETKAtryb)
    {
        tryb=2;
    }else{
        tryb=1;
        
    }

    switch (licznikW){
        case 1:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(1,tryb);
        break;
        case 2:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(2,tryb);
        break;
        case 3:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(3,tryb);
        break;
        case 4:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(4,tryb);
        break;
        case 5:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(5,tryb);
        break;
        case 6:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(6,tryb);
        break;
        case 7:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(7,tryb);
        break;
        case 8:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(8,tryb);
        break;
        case 9:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(9,tryb);
        break;
        case 10:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(10,tryb);
        break;
        case 11:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(11,tryb);
        break;
        case 12:
            if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
            obslugaKolejWys(12,tryb);
        break;
        default:
            aktEkran=1;
        break;
  }

    /*
    switch (licznikW)
    {
        case 1:
            if(tryb==2)
            {
                if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
                WysEkranStart();
            }
            if(tryb==1)
            {  
                if(wycz==true){tft.fillScreen(kolorTla);wycz=false;} 
                WysNapiecia();
            }        
        break;  
        case 2: 
            //if(wycz==true){tft.fillScreen(kolorTla);wycz=false;} 
            if(tryb==2)
            {
                if(wycz==true){tft.fillScreen(kolorTla);wycz=false;} 
                WysTemperatury(); 
            }
            if(tryb==1)
            {
                if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
                WysTemperaturyCieczy();
            }         
        break;
        case 3:
            //if(wycz==false){tft.fillScreen(kolorTla);wycz=true;}
            if(tryb==2)
            {
                if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
                WysSrSpalaniaNa100();
                if(MANETKAreset=true)
                {SrSpalanie100km=0;tft.fillScreen(kolorTla);wycz=true;MANETKAreset=false;}
            }
            if(tryb==1)
            {
                if(wycz==true){tft.fillScreen(kolorTla);wycz=false;} 
                WysSpalaniaChwilowego();
            }
        break;
        case 4:
            //if(wycz==true){tft.fillScreen(kolorTla);wycz=false;} 
            if(tryb==2)
            {
                if(wycz==true){tft.fillScreen(kolorTla);wycz=false;}
                WysPrzjechanegoDystansu(true);
                if(MANETKAreset=true)
                {PDystansKMSuma=0;tft.fillScreen(kolorTla);wycz=false;MANETKAreset=false;}
            }
            if(tryb==1)
            {
                if(wycz==false){tft.fillScreen(kolorTla);wycz=true;} 
                WysPrzjechanegoDystansu(false);
                
            }
        break;
        case 5: 
            //if(wycz==false){tft.fillScreen(kolorTla);wycz=true;}
            if(MANETKAtryb)
            {
                if(wycz==false){tft.fillScreen(kolorTla);wycz=true;}
                WysPredkosci(true);
                if(MANETKAreset=true)
                {SrPredkosc[0]=0;SrPredkosc[1]=0; SrPredkosc[2]=0;SrPredkosc[3]=0;tft.fillScreen(kolorTla);wycz=false;MANETKAreset=false;}
            }else{
                if(wycz==true){tft.fillScreen(kolorTla);wycz=false;} 
                WysPredkosci(false);
            }
        break;
        case 6: 
            if(tryb==2)
            {
                if(wycz==true){tft.fillScreen(kolorTla);wycz=false;} 
                WysMaxPredkosc();
            }
            if(tryb==1)
            {
                if(wycz==false){tft.fillScreen(kolorTla);wycz=true;}
                WysMaxPredkosc();
            }    
        break;
        case 7: 
            if(tryb==2)
            {
                if(wycz==false){tft.fillScreen(kolorTla);wycz=true;}
                WysPakiet1(); 
            }
            if(tryb==1)
            {
                if(wycz==true){tft.fillScreen(kolorTla);wycz=false;}
                WysPakiet1(); 
            }
                   
        break;
        case 8:
            if(tryb==2)
            {
                if(wycz==true){tft.fillScreen(kolorTla);wycz=false;}
                WysCzasPracySilnika(); 
            }
            if(tryb==1)
            {
                if(wycz==false){tft.fillScreen(kolorTla);wycz=true;}
                WysCzasPracySilnika(); 
            }
            
        break;
        case 9:
            //if(wycz==false){tft.fillScreen(kolorTla);wycz=true;}
            if(MANETKAtryb)
            { 
                if(wycz==false){tft.fillScreen(kolorTla);wycz=true;}
                WysSpalanoPaliwo(true);
            }
            else{
                if(wycz==true){tft.fillScreen(kolorTla);wycz=false;}
                WysSpalanoPaliwo(false);
                if(MANETKAreset=true)
                {spalonePaliwoSuma;tft.fillScreen(kolorTla);wycz=false;MANETKAreset=false;}
            }
        break;
        case 10:
            if(tryb==2)
            {
                if(wycz==true){tft.fillScreen(kolorTla);wycz=false;}
                WysPakiet2(); 
            }
            if(tryb==1)
            {
                if(wycz==false){tft.fillScreen(kolorTla);wycz=true;}
                WysPakiet2(); 
            }
            //if(wycz==true){tft.fillScreen(kolorTla);wycz=false;}
            
        break;
        default:
        licznikW=0;
        
        break;
    }
    
    */
}

unsigned long currentMillis;
unsigned long previousMillis1 = 0; // Zmienna do śledzenia czasu dla Kontrolki 1
unsigned long previousMillis2 = 0; // Zmienna do śledzenia czasu dla Kontrolki 2, 3 i 4
unsigned long previousMillis3 = 0; // Zmienna do śledzenia czasu dla Kontrolki 5

const long interval = 500; // Interwał czasowy w ms dla Kontrolki 1
const long interval2 = 500; // Interwał czasowy w ms dla Kontrolki 2, 3 i 4
const long interval3 = 500; // Interwał czasowy w ms dla Kontrolki 5

void kontrolki()
{
    currentMillis = millis(); // Aktualny czas w ms

    //& Kontrolka 1 (niewłączone światła)
    if (zaplon)
    {
        if (swiatla)
        {
            leds[3] = CRGB::Black;
            FastLED.show();
        }
        else
        {
            if (currentMillis - previousMillis1 >= interval)
            {
                previousMillis1 = currentMillis;
                leds[3].setColorCode(0x000005);
                FastLED.show();
            }
            else
            {
                leds[3] = CRGB::Black;
                FastLED.show();
            }
        }
    }else{
        leds[0] = CRGB::Black;
        leds[1] = CRGB::Black;
        leds[2] = CRGB::Black;
        FastLED.show();
    }

    //& Kontrolka 2, 3 i 4 (niebezpieczna prędkość)
    if (predkosc > 110)
    {
        if (currentMillis - previousMillis2 >= interval2)
        {
            previousMillis2 = currentMillis;
            leds[4].setColorCode(0x100000);
            leds[5].setColorCode(0x100000);
            leds[6].setColorCode(0x100000);
            FastLED.show();
        }else{
            leds[4] = CRGB::Black;
            leds[5] = CRGB::Black;
            leds[6] = CRGB::Black;
            FastLED.show();
        }
    }else{
        leds[4] = CRGB::Black;
        leds[5] = CRGB::Black;
        leds[6] = CRGB::Black;
        FastLED.show();
    }

    //& Kontrolka 5 (za wysoka temperatura cieczy)
    if (zaplon)
    {
        if (temperaturaCieczy > 93)
        {
            if (currentMillis - previousMillis3 >= interval3)
            {
                previousMillis3 = currentMillis;
                leds[7].setColorCode(0x050000);
                FastLED.show();
            }else{
                leds[7] = CRGB::Black;
                FastLED.show();
            }
        }else{
            leds[7] = CRGB::Black;
            FastLED.show();
        }
    }
}


void Task1code( void * pvParameters );

void setup () 
{
    Serial.begin(115200);
    xTaskCreatePinnedToCore(Task1code,""wTle"",10000,NULL,0,&wTle,0);
    
    //attachInterrupt(PinObroty, mierzenie, RISING);
    FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );
    FastLED.setBrightness(  BRIGHTNESS );
    //currentPalette = RainbowColors_p;
    //currentBlending = LINEARBLEND;
    

    //FastLED.setBrightness(BRIGHTNESS);
    ina219.begin();
    SD.begin(kartaSD);
    tft.initR(INITR_BLACKTAB);
    tft.setRotation(45);
    tft.setTextWrap(false);
    rtc.begin();
    pcf.begin(0x20, &Wire);
    
    
    //rtc.adjust(DateTime(2024, 4, 28, 15, 22, 30));

    pinMode(PinHalla, INPUT);
    pinMode(PinWtrysk, INPUT);
    pinMode(PinObroty, INPUT);
    
    //przyciskFunkcji.begin();
    //przyciskTrybu.begin();
    //przyciskResetu.begin();
    //przyciskWtrysk.begin();
    //przyciskZaplon.begin();

    pcf.pinMode(0, INPUT);
    pcf.pinMode(1, INPUT);
    pcf.pinMode(2, INPUT);
    pcf.pinMode(3, INPUT);
    pcf.pinMode(4, OUTPUT);
    pcf.pinMode(5, OUTPUT);
	pcf.pinMode(6, OUTPUT);
    pcf.pinMode(7, OUTPUT);
    pcf.pinMode(8, INPUT_PULLDOWN);
    pcf.pinMode(9, INPUT_PULLDOWN);
    pcf.pinMode(10, INPUT_PULLDOWN);
    pcf.pinMode(11, OUTPUT);
    pcf.pinMode(12, INPUT);
    pcf.pinMode(13, INPUT);
	pcf.pinMode(14, INPUT);
    pcf.pinMode(15, OUTPUT);

    tft.fillScreen(kolorTla);
    ESP_RESET=false;
    LCD_LED=true;
    
    

    obslugaExpendera();
    podswietlenie();
    DiodyKontrolkiStart();
    delay(10);
    WysPobieranieDancyh();  
    delay(10);
    wyborNajnowszegoPliku();
    pobranieDanych();
    zapisPobranychDanych();
    zapisNaKarcie();
    obsluzConfig();
    delay(10);
    tft.fillScreen(kolorTla);

    tft.cp437(true);
    
    
    if (isnan(SrSpalanie1km)) {
        SrSpalanie1km = 7.56;
    }

    if (isnan(SrSpalanie100km)) {
        SrSpalanie100km = SrSpalanie1km;
    }

    //czasPracySilnikaMinutySuma=czasPracySilnikaSuma*60;      //% przeliczenie przepracowanego czasu silnika na minuty 
    
} 

unsigned long aktualnyCzas = 0;
unsigned long zapamietanyCzas = 0;
unsigned long roznicaCzasu = 0;

void loop()
{
    inicjalizacjaKonfiguracji(); 
    pracaAuta();
    WysZegareka();
    spalanie();
    interfjs();
    uspienie();
    podswietlenie();
    kontrolki();
    obslugaExpendera();
    odczytTemperaturyCieczy();
    odczytIlosciPaliwa();
    czasPracySilnika();
    MaxOsiagnietaPredkosc();
    najwyzszeSpalanie();
    odczytNapiecia();
    //obliczanieObroty();
    
    if(roznicaCzasu>=60000){
        nadpisywanieDanychDoZapisu();
        zapisNaKarcie();
        zapamietanyCzas=millis();
    }

    //temp WysTemperatury();
    //temp WysNapiecia();
    
    
    aktualnyCzas = millis();
    roznicaCzasu = aktualnyCzas - zapamietanyCzas;
    /*
    if(roznicaCzasu<=5000)
    {
        if(wycz==false)
        {
            tft.fillScreen(kolorTla);
            wycz=true;
        }
        WysPredkosci(); 
    }else if(roznicaCzasu<=10000 && roznicaCzasu>=5000)
    {
        if(wycz==true)
        {
            tft.fillScreen(kolorTla);
            wycz=false;
        } 
        WysNapiecia();
    }else if(roznicaCzasu<=15000 && roznicaCzasu>=10000)
    {
        if(wycz==false)
        {
            tft.fillScreen(kolorTla);
            wycz=true;
        } 
        WysTemperatury();
    }else if(roznicaCzasu<=20000 && roznicaCzasu>=15000)  
    {
        if(wycz==true)
        {
            tft.fillScreen(kolorTla);
            wycz=false;
        } 
        WysSpalaniaChwilowego();
    }else if(roznicaCzasu<=25000 && roznicaCzasu>=20000)
    {
        if(wycz==false)
        {
            tft.fillScreen(kolorTla);
            wycz=true;
        } 
        WysPrzjechanegoDystansu(true);
    }else if(roznicaCzasu<=30000 && roznicaCzasu>=25000)
    {
        if(wycz==true)
        {
            tft.fillScreen(kolorTla);
            wycz=false;
        } 
        WysSrPredkosci();
    }else if(roznicaCzasu>30000)
    {
        zapamietanyCzas=millis();
    }
    */
}

void Task1code( void * pvParameters )   //*Pętla dla zadań wykonywanych na rdzeniu 0. Z definicji wszystkie operaje są wykonywane na rdzeniu 1 
{
    //wykona się tylko raz
    attachInterrupt(digitalPinToInterrupt(PinWtrysk), isr_otwarcieWtrysku, CHANGE);
    for(;;) 
    {
        predkosciomierz();
        PrzejechanyDystans();
    }
}  

"
xAETAHaR,Запрос на создание таблицы orders. LR2,Nikitalox,MySQL,Thursday 23rd of May 2024 08:52:45 AM CDT,"CREATE TABLE IF NOT EXISTS `mydb`.`orders` (
  `id` INT NOT NULL,
  `shop_id` INT NOT NULL,
  `product_id` INT NOT NULL,
  `fio` INT NOT NULL,
  `date` DATE NULL,
  `quantity` TINYINT NULL,
  `tel` VARCHAR(100) NULL,
  `confirm` TINYINT NULL,
  PRIMARY KEY (`id`, `shop_id`, `product_id`, `fio`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `orders_to_products_idx` (`product_id` ASC) VISIBLE,
  INDEX `orders_to_users_idx` (`fio` ASC) VISIBLE,
  INDEX `orders_to_shops_idx` (`shop_id` ASC) VISIBLE,
  CONSTRAINT `orders_to_products`
    FOREIGN KEY (`product_id`)
    REFERENCES `mydb`.`products` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `orders_to_users`
    FOREIGN KEY (`fio`)
    REFERENCES `mydb`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `orders_to_shops`
    FOREIGN KEY (`shop_id`)
    REFERENCES `mydb`.`shops` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB"
gTGNPD2s,Запрос на создание таблиц для 2 задания. ЛР2,Nikitalox,MySQL,Thursday 23rd of May 2024 08:50:32 AM CDT,"-- MySQL Script generated by MySQL Workbench
-- Thu May 23 16:49:08 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`product_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`product_type` (
  `id` INT NOT NULL,
  `name` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`shops`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`shops` (
  `id` INT NOT NULL,
  `name` VARCHAR(255) NULL,
  `address` VARCHAR(255) NULL,
  `tel` VARCHAR(100) NULL,
  `site` VARCHAR(100) NULL,
  `email` VARCHAR(100) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`products`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`products` (
  `id` INT NOT NULL,
  `shop_id` INT NOT NULL,
  `type_id` INT NOT NULL,
  `brand` VARCHAR(255) NULL,
  `model` VARCHAR(255) NULL,
  `data` TINYTEXT NULL,
  `img` VARCHAR(255) NULL,
  `price` VARCHAR(45) NULL,
  `warranty` VARCHAR(45) NULL,
  PRIMARY KEY (`id`, `shop_id`, `type_id`),
  INDEX `products_to_prod_type_idx` (`type_id` ASC) VISIBLE,
  INDEX `products_to_shops_idx` (`shop_id` ASC) VISIBLE,
  CONSTRAINT `products_to_prod_type`
    FOREIGN KEY (`type_id`)
    REFERENCES `mydb`.`product_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `products_to_shops`
    FOREIGN KEY (`shop_id`)
    REFERENCES `mydb`.`shops` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`users` (
  `id` INT NOT NULL,
  `fio` VARCHAR(255) NOT NULL,
  `login` VARCHAR(255) NULL,
  `password` VARCHAR(255) NULL,
  `e_mail` VARCHAR(255) NULL,
  `type` VARCHAR(45) NULL,
  PRIMARY KEY (`id`, `fio`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `login_UNIQUE` (`login` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`orders` (
  `id` INT NOT NULL,
  `shop_id` INT NOT NULL,
  `product_id` INT NOT NULL,
  `fio` INT NOT NULL,
  `date` DATE NULL,
  `quantity` TINYINT NULL,
  `tel` VARCHAR(100) NULL,
  `confirm` TINYINT NULL,
  PRIMARY KEY (`id`, `shop_id`, `product_id`, `fio`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `orders_to_products_idx` (`product_id` ASC) VISIBLE,
  INDEX `orders_to_users_idx` (`fio` ASC) VISIBLE,
  INDEX `orders_to_shops_idx` (`shop_id` ASC) VISIBLE,
  CONSTRAINT `orders_to_products`
    FOREIGN KEY (`product_id`)
    REFERENCES `mydb`.`products` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `orders_to_users`
    FOREIGN KEY (`fio`)
    REFERENCES `mydb`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `orders_to_shops`
    FOREIGN KEY (`shop_id`)
    REFERENCES `mydb`.`shops` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`deliveries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`deliveries` (
  `order_id` INT NOT NULL,
  `fio` INT NOT NULL,
  `address` VARCHAR(255) NULL,
  `deliveriescol` VARCHAR(45) NULL,
  `date` DATE NULL,
  `confirm` TINYINT NULL,
  PRIMARY KEY (`order_id`, `fio`),
  INDEX `del_to_orders_idx` (`fio` ASC) VISIBLE,
  CONSTRAINT `deliveries_to_orders`
    FOREIGN KEY (`order_id`)
    REFERENCES `mydb`.`orders` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `del_to_orders`
    FOREIGN KEY (`fio`)
    REFERENCES `mydb`.`orders` (`fio`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`settings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`settings` (
  `id` INT NOT NULL,
  `host` VARCHAR(45) NULL,
  `db` VARCHAR(45) NULL,
  `user` VARCHAR(45) NULL,
  `password` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
"
sckbK0uZ,Json Order,MChaos,JSON,Thursday 23rd of May 2024 08:43:26 AM CDT,"{
""id"":""57783"",
""added"":""2024-05-22 15:57:22"",
""client"":{
""CL_ID"":""7c458696-efee-11ec-8109-5e1d7b298224"",
""CL_Name"":"""",
""TT_ID"":""ff2a7e67-f2d9-11ec-8109-5e1d7b298224"",
""TT_Name"":""mun.Chisinau, sec.Botanica, bd. Ioan Cuza-Vodă д. 16""
},
""phone"":""+37369153080"",
""email"":""igori-melnik@mail.ru"",
""address"":""mun.Chisinau, sec.Botanica, bd. Ioan Cuza-Vodă д. 16"",
""comment"":""Test telegram"",
""products"":[
{
""Id"":""ce424326-a327-11ee-8136-5e1d7b298224"",
""SKU"":""58791"",
""title"":""Cerc gonflabil 58791"",
""qty"":""2""
},
{
""Id"":""d8ddd7ed-a327-11ee-8136-5e1d7b298224"",
""SKU"":""58792"",
""title"":""Stativ gonflabil pentru pahar 58792"",
""qty"":""4""
}
]
}"
XygnHTAT,Home assignment,Foltrex2002,Java,Thursday 23rd of May 2024 08:26:15 AM CDT,"import java.util.List;

class HelloWorld {
    public static void main(String[] args) {
        List<Integer> arr = List.of(-15, 7, 0, 88, 33, 15);
        System.out.println(getSecondLargestInteger(arr));
    }
    
    public static Integer getSecondLargestInteger(List<Integer> arr) {
        if (arr == null || arr.size() < 2) {
            throw new IllegalArgumentException(""Array must contain at least 2 values"");
        }

        int largest = arr.get(0);
        int secondLargest = Integer.MIN_VALUE;
    
        for (int current : arr) {
            if (current > largest) {
                secondLargest = largest;
                largest = current;
            } else if (current > secondLargest && current != largest) {
                secondLargest = current;
            }
        }
    
        return secondLargest == Integer.MIN_VALUE ? null : secondLargest;
    }
}"
uBVHUGaK,ДЗ Динамический массив 2,TeT91,C#,Thursday 23rd of May 2024 08:13:34 AM CDT,"using System;
using System.Collections.Generic;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandSum = ""Sum"";
            const string CommandExit = ""Exit"";

            List<int> numbers = new List<int>();

            bool isInProgress = true;

            while (isInProgress)
            {
                if (numbers.Count > 0)
                {
                    Console.WriteLine(""Числа в массиве"");

                    for (int i = 0; i < numbers.Count; i++)
                    {
                        Console.Write(numbers[i] + "" "");
                    }
                }

                Console.WriteLine();
                Console.WriteLine(""Введите команду или число"");
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandSum:
                        int sum = 0;

                        foreach (int number in numbers)
                        {
                            sum += number;
                        }

                        Console.WriteLine($""Сумма всех чисел = {sum}"");
                        break;

                    case CommandExit:
                        isInProgress = false;
                        break;

                    default:
                        if (int.TryParse(userInput, out int parsedNumber))
                        {
                            numbers.Add(parsedNumber);

                            Console.WriteLine();
                        }
                        else
                        {
                            Console.WriteLine(""Неизвестная команда"");
                        }
                        break;
                }
            }
        }
    }
}"
jr0Cw1v8,Agriino Endpoint,Vassa007,Java,Thursday 23rd of May 2024 07:17:05 AM CDT,"public interface AreaDetailService {
    @GET(""area/{area_id}"")
    Call<PlantationAreaData> getDetailArea(@Path(""area_id"") String area_id, @Query(""id"") String id, @Query(""_token"") String token);

    @GET(""directleaves/nutrients/search"")
    Call<PlanDataBundle> getPlanAll(@Query(""pln_area"") String pln_area, @Query(""id"") String id, @Query(""_token"") String token, @Query(""skip"") int skip, @Query(""take"") int take);

    @POST(""directleaves/nutrients"")
    @FormUrlEncoded
    Call<Void> storePlan(@Field(""id"") String id, @Field(""_token"") String token, @Field(""pln_area"") String area_id, @Field(""pln_activity"") String activity, @Field(""pln_date"") String date, @Field(""pln_commodity"") String  commodity);

}

public interface DirectLeavesService {
    @POST(""directleaves/nutrientsp"")
    @FormUrlEncoded
    Call<SurveyStoreResultData> storeSurvey(@Field(""id"") String id, @Field(""_token"") String token, @Field(""sur_plan"") String plan_id, @Field(""sur_lat"") String latitude, @Field(""sur_long"") String longitude, @Field(""sur_red"") int red, @Field(""sur_green"") int green, @Field(""sur_blue"") int blue);

    @POST(""directleaves/nutrientsp/store_mass"")
    @FormUrlEncoded
    Call<Void> storeMass(@Field(""id"") String id, @Field(""_token"") String token, @Field(""data[]"") ArrayList<String> data);

    @DELETE(""directleaves/nutrientsp/{survey_id}"")
    Call<Void> deleteSurvey(@Path(""survey_id"") String surveyID, @Query(""id"") String id, @Query(""_token"") String token);
}

public interface EventService {
    @GET(""area/{area_id}"")
    Call<PlantationAreaData> getDetailEvent(@Path(""area_id"") String area_id, @Query(""id"") String id, @Query(""_token"") String token);

    @GET(""directleaves/nutrientsp/{plan_id}"")
    Call<EventDataBundle> getEventAll(@Path(""plan_id"") String plan_id, @Query(""id"") String id, @Query(""_token"") String token, @Query(""skip"") int skip, @Query(""take"") int take);

    @POST(""directleaves/nutrientsp"")
    @FormUrlEncoded
    Call<Void> storeEvent(@Field(""id"") String id, @Field(""_token"") String token, @Field(""evt_name"") String event_name, @Field(""evt_date_begin"") String date_begin, @Field(""evt_date_end"") String date_end, @Field(""evt_plan"") String plan_id);

    @GET(""directleaves/nutrientsr/0"")
    Call<JsonObject> getDSS(@Query(""plan"") String plan_id, @Query(""id"") String id, @Query(""_token"") String token);

    @PUT(""directleaves/nutrientsr/{plan_id}"")
    Call<JsonObject> updateDSS(@Path(""plan_id"") String plan_id, @Query(""id"") String id, @Query(""_token"") String token, @Query(""rep_type"") String rep_type, @Query(""survey"") String survey_id);

    @POST(""directleaves/nutrientsr"")
    @FormUrlEncoded
    Call<Void> storeDSSPlant(@Query(""id"") String id, @Query(""_token"") String token, @Field(""first_step"") String first_step, @Field(""rep_plan"") String plan_id, @Field(""rep_type"") String type, @Field(""rep_fe"") int rep_fe, @Field(""rep_age"") int rep_age, @Field(""rep_fr"") int rep_fr, @Field(""rep_production"") int rep_production, @Field(""rep_shade"") String rep_shade, @Field(""rep_dry"") int rep_dry, @Field(""rep_adjustment"") int rep_adjustment);

    @POST(""directleaves/nutrientsr"")
    @FormUrlEncoded
    Call<Void> storeDSSArea(@Query(""id"") String id, @Query(""_token"") String token, @Field(""first_step"") String first_step, @Field(""rep_plan"") String plan_id, @Field(""rep_type"") String type, @Field(""rep_fe"") int rep_fe, @Field(""rep_age"") int rep_age, @Field(""rep_fr"") int rep_fr, @Field(""rep_shade"") String rep_shade, @Field(""rep_dry"") int rep_dry, @Field(""rep_quantity"") int rep_quantity, @Field(""rep_adjustment"") int rep_adjustment);

    @DELETE(""directleaves/nutrientsr/{id}"")
    Call<Void> deleteDSS(@Path(""id"") String dss_id, @Query(""_token"") String token, @Query(""id"") String id);
}

public interface PlantationAreaService {
    @GET(""area/0"")
    Call<PlantationAreaDataBundle> getAllPlantationArea(@Query(""id"") String id, @Query(""_token"") String token, @Query(""skip"") int skip, @Query(""take"") int take);

    @POST(""area"")
    @FormUrlEncoded
    Call<Void> storePlantationArea(@Field(""are_name"") String area_name, @Field(""are_wide"") int area_wide, @Query(""id"") String id, @Query(""_token"") String token, @Field(""detail"")String detail);

    @PATCH(""area/{area_id}"")
    @FormUrlEncoded
    Call<Void> updatePlantationArea(@Path(""area_id"") String area_id, @Field(""are_name"") String area_name, @Field(""are_wide"") float area_wide, @Query(""id"") String id, @Query(""_token"") String token, @Field(""detail"")String detail);

    @DELETE(""area/{area_id}"")
    Call<Void> deletePlantationArea(@Path(""area_id"") String area_id, @Query(""id"") String id, @Query(""_token"") String token);
}
"
nF437muq,Mods config,Tueur2025,JSON,Thursday 23rd of May 2024 07:06:08 AM CDT,"[
    {""name"": ""create"", ""url"": ""https://cdn.modrinth.com/data/LNytGWDc/versions/HNYrbfZZ/create-1.20.1-0.5.1.f.jar"", ""is_additional"": false},
    {""name"": ""rechiseledcreate"", ""url"": ""https://cdn.modrinth.com/data/E6867niZ/versions/ZWTqq1kk/rechiseledcreate-1.0.0a-forge-mc1.20.jar"", ""is_additional"": false},
    {""name"": ""jei"", ""url"": ""https://cdn.modrinth.com/data/u6dRKJwZ/versions/PeYsGsQy/jei-1.20.1-forge-15.3.0.4.jar"", ""is_additional"": false},
    {""name"": ""farmersdelight"",""url"": ""https://cdn.modrinth.com/data/R2OftAxM/versions/AxgOboGq/FarmersDelight-1.20.1-1.2.4.jar"", ""is_additional"": false},
    {""name"": ""delightful"", ""url"": ""https://cdn.modrinth.com/data/JtSnhtNJ/versions/noAl23LW/Delightful-1.20.1-3.4.3.jar"", ""is_additional"": false},
    {""name"": ""corndelight"", ""url"": ""https://cdn.modrinth.com/data/uxLAKWU8/versions/F7Advb7w/corn_delight-1.0.3-1.20.1.jar"", ""is_additional"": false},
    {""name"": ""mysterious_mountain_lib"", ""url"": ""https://cdn.modrinth.com/data/ntMyNH8c/versions/nB8NuTIO/mysterious_mountain_lib-1.4.4-1.20.1.jar"", ""is_additional"": false},
    {""name"": ""automobility"", ""url"": ""https://cdn.modrinth.com/data/rqIsPf9F/versions/46g3IiWw/automobility-0.4.2%2B1.20.1-forge.jar"", ""is_additional"": false},
    {""name"": ""furniture"", ""url"": ""https://cdn.modrinth.com/data/ulloLmqG/versions/cmWbslFO/another_furniture-forge-1.20.1-3.0.1.jar"", ""is_additional"": false},
    {""name"": ""minimap"", ""url"": ""https://cdn.modrinth.com/data/1bokaNcj/versions/voIrfIDP/Xaeros_Minimap_24.0.3_Forge_1.20.jar"", ""is_additional"": false},
    {""name"": ""terrablender"", ""url"": ""https://cdn.modrinth.com/data/kkmrDlKT/versions/htFwnGWu/TerraBlender-forge-1.20.1-3.0.1.4.jar"", ""is_additional"": false},
    {""name"": ""BiomesOPlenty"", ""url"": ""https://cdn.modrinth.com/data/HXF82T3G/versions/peO5lWzX/BiomesOPlenty-1.20.1-18.0.0.598.jar"", ""is_additional"": false},
    {""name"": ""Mekanism"", ""url"": ""https://cdn.modrinth.com/data/Ce6I4WUE/versions/gNIc57RO/Mekanism-1.20.1-10.4.6.20.jar"", ""is_additional"": false},
    {""name"": ""MekanismAdditions"", ""url"": ""https://cdn.modrinth.com/data/a6F3uASn/versions/pXrqwQNY/MekanismAdditions-1.20.1-10.4.6.20.jar"", ""is_additional"": false},
    {""name"": ""MekanismGenerators"", ""url"": ""https://cdn.modrinth.com/data/OFVYKsAk/versions/1E44ANCP/MekanismGenerators-1.20.1-10.4.6.20.jar"", ""is_additional"": false},
    {""name"": ""MekanismTools"", ""url"": ""https://cdn.modrinth.com/data/tqQpq1lt/versions/tsH6SxFL/MekanismTools-1.20.1-10.4.6.20.jar"", ""is_additional"": false},
    {""name"": ""travelersbackpack"", ""url"": ""https://cdn.modrinth.com/data/rlloIFEV/versions/FKixWJhX/travelersbackpack-forge-1.20.1-9.1.13.jar"", ""is_additional"": false},
    {""name"": ""ironchest"", ""url"": ""https://cdn.modrinth.com/data/P3iIrPH3/versions/YjbOtYwN/ironchest-1.20.1-14.4.4.jar"", ""is_additional"": false},
    {""name"": ""naturalist"", ""url"": ""https://cdn.modrinth.com/data/F8BQNPWX/versions/fapHaClR/naturalist-forge-4.0.3-1.20.1.jar"", ""is_additional"": false},
    {""name"": ""geckolib"", ""url"": ""https://cdn.modrinth.com/data/8BmcQJ2H/versions/vv4Q0406/geckolib-forge-1.20.1-4.4.4.jar"", ""is_additional"": false},
    {""name"": ""rechiseled"", ""url"": ""https://cdn.modrinth.com/data/B0g2vT6l/versions/ChrMlKQC/rechiseled-1.1.5c-forge-mc1.20.jar"", ""is_additional"": false},
    {""name"": ""supermartijn642corelib"", ""url"": ""https://cdn.modrinth.com/data/rOUBggPv/versions/U92Le4sE/supermartijn642corelib-1.1.17-forge-mc1.20.1.jar"", ""is_additional"": false},
    {""name"": ""supermartijn642configlib"", ""url"": ""https://cdn.modrinth.com/data/LN9BxssP/versions/ZKor79dR/supermartijn642configlib-1.1.8-forge-mc1.20.jar"", ""is_additional"": false},
    {""name"": ""fusion"", ""url"": ""https://cdn.modrinth.com/data/p19vrgc2/versions/oA5jxU4i/fusion-1.1.1-forge-mc1.20.1.jar"", ""is_additional"": false},
    {""name"": ""toughasnails"", ""url"": ""https://cdn.modrinth.com/data/ge1sOdFH/versions/40SuKdWl/ToughAsNails-1.20.1-9.0.0.96.jar"", ""is_additional"": false},
    {""name"": ""sereneSeasons"", ""url"": ""https://cdn.modrinth.com/data/e0bNACJD/versions/gvqNV855/SereneSeasons-1.20.1-9.0.0.46.jar"", ""is_additional"": false},
    {""name"": ""gravestone"", ""url"": ""https://cdn.modrinth.com/data/RYtXKJPr/versions/OmP48Fw1/gravestone-forge-1.20.1-1.0.15.jar"", ""is_additional"": false},
    {""name"": ""CorgiLib"", ""url"": ""https://cdn.modrinth.com/data/ziOp6EO8/versions/L3Etx6qQ/CorgiLib-forge-1.20.1-4.0.1.1.jar"", ""is_additional"": false},
    {""name"": ""coroutil"", ""url"": ""https://cdn.modrinth.com/data/rLLJ1OZM/versions/6rPDKAT8/coroutil-forge-1.20.1-1.3.7.jar"", ""is_additional"": false},
    {""name"": ""ExtremeReactors2"", ""url"": ""https://cdn.modrinth.com/data/idkvShUy/versions/5CYl80HP/ExtremeReactors2-1.20.1-2.0.75.jar"", ""is_additional"": false},
    {""name"": ""ZeroCore2"", ""url"": ""https://cdn.modrinth.com/data/rHpb85Mf/versions/kR2IVnv0/ZeroCore2-1.20.1-2.1.39.jar"", ""is_additional"": false},
    {""name"": ""zombieawareness"", ""url"": ""mods/zombieawareness.jar"", ""is_additional"": false},
    {""name"": ""BadMobs"", ""url"": ""mods/BadMobs.jar"", ""is_additional"": false},
    {""name"": ""cfm"", ""url"": ""mods/cfm.jar"", ""is_additional"": false},
    {""name"": ""optifine"", ""url"": ""mods/optifine.jar"", ""is_additional"": true}
]
"
y4uQdyZP,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Thursday 23rd of May 2024 07:03:39 AM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..
......................................
...."
1YxKegdw,Mijn-omgevingen - GA4 Ecommerce - purchase,EVinke-Delta,JavaScript,Thursday 23rd of May 2024 07:01:04 AM CDT,"// Voorbeeldcode voor het 'add_to_cart' event volgens GA4-structuur met 2 voorbeeldproducten.
// De datalayer push moet na het bevestigen van het aanpassen van het pakket (/mijn/flexpakket/controle/) worden afgevuurd met alle items die zijn gekozen bij het aanpassen van het pakket. De datalayer push moet dus afgaan op: https://www.delta.nl/mijn/flexpakket/aanpassen/afgerond/

dataLayer.push({
	event: 'purchase',
    	transaction_id: 'PO12345', 		// transaction_id variabele invullen met bestelnummer vanuit backend
        value: 60.00,                	// value variabele invullen met totale waarde van de bestelling
        tax: 12.60,                   	// tax variabele invullen met BTW-bedrag van de totale bestelwaarde
        currency: 'EUR',
	ecommerce: {
		items: [{
			item_id: 'ITEMID1',							// item-id variabele invullen met product ID vanuit backend
			item_name: 'Internet tot 1.000 Mbps',		// item-name variabele invullen met product name vanuit backend
			price: 50.00,
			affiliation: 'MijnDelta',					// MijnDelta of MijnCaiway - afhankelijk van merk								
			brand: 'Delta',									// Delta of Caiway - afhankelijk van merk		
			quantity: 1									// Variabel invullen met aantal van dit item (waarschijnlijk altijd 1)
		},
		{
			item_id: 'ITEMID2',
			item_name: '50+ zenders interactief',
			price: 10.00,
			affiliation: 'MijnDelta',
			brand: 'Delta',
			quantity: 1
		}]
	}
});"
SQvwtfra,English,RRdabbyholla3,JSON,Thursday 23rd of May 2024 07:00:03 AM CDT,"{
    ""Language"": ""English"",
    ""InstallText"": ""Install"",
    ""LanguageText"": ""Language"",
    ""PasswordText"": ""Password"",
    ""ErrorMessageText"": ""Select a language""
}"
SVhqkWSy,СПРИНТ № 8 | Санитайзеры и другие инструменты поиска ошибок | Урок 4: Отладочные макроопределения,chevengur,C++,Thursday 23rd of May 2024 06:43:15 AM CDT,"#include <algorithm>
#include <iostream>
#include <numeric>
#include <vector>
#include <algorithm>

using namespace std;

template <typename It>
void PrintRangeComma(const It range_begin, const It range_end) {
    if (range_begin == range_end)
    {
        return;
    }
    bool ch = true;
    for (auto it = range_begin; it != range_end; ++it) {
        
        if (!ch)
		{
            cout << "", "";
        }
        ch = false;
        cout << *it;
    }
    cout << endl;
}


template <typename RandomIt>
void MergeSort(RandomIt range_begin, RandomIt range_end) {
    int range_length = range_end - range_begin;
    if (range_length < 2) {
        return;
    }

    vector<typename RandomIt::value_type> elements(range_begin, range_end);

    auto mid = elements.begin() + range_length / 2;

    MergeSort(elements.begin(), mid);
    MergeSort(mid, elements.end());

    sort(elements.begin(), elements.end());
    merge(elements.begin(), elements.end(), mid, mid, range_begin);
}

int main() {
    vector<int> test_vector(10);

    iota(test_vector.begin(), test_vector.end(), 1);

    random_shuffle(test_vector.begin(), test_vector.end());

    PrintRangeComma(test_vector.begin(), test_vector.end());

    MergeSort(test_vector.begin(), test_vector.end());

    PrintRangeComma(test_vector.begin(), test_vector.end());

    return 0;
}"
sku94y46,WEGOVY SIDE EFFECTS,kisazeky,Bash,Thursday 23rd of May 2024 06:41:19 AM CDT,"4. Risk of thyroid tumors or thyroid cancer

Your thyroid is a small gland found in the front of your neck area. It helps to control many functions in your body by making and releasing certain hormones.

One of the the most serious but rare warnings with Wegovy includes a risk for thyroid tumors or thyroid cancer, which has been seen in rodent studies. It is not known if Wegovy will cause thyroid tumors or thyroid cancer in humans, but it carries a Boxed Warning for this possible side effect, the FDA’s most prominent warning.

You should not use Wegovy if you or anyone in your family have ever had a type of thyroid cancer called medullary thyroid carcinoma (MTC) or if you have an endocrine system condition called Multiple Endocrine Neoplasia syndrome type 2 (MEN 2).

Cases of MTC have been seen in patients treated with another GLP-1 receptor agonist known as liraglutide (Saxenda, Victoza) after it was approved by the FDA. However, it is not known if liraglutide caused these tumors because there was not enough data in the reports to draw a final conclusion.

Your doctor will check your thyroid gland (found in your neck area) for nodules. A blood test (serum calcitonin) or a thyroid ultrasound (imaging test) may be used to monitor for thyroid disease, but this is not commonly done because the tests are not very specific. However, if your doctor suspects thyroid disease, they may order these tests and do further evaluations.
Tips for managing possible thyroid disease

If you notice any of the following signs or symptoms, contact your doctor right away:

    a lump or swelling in the neck
    neck pain
    a hoarse voice or voice changes
    trouble swallowing
    trouble breathing
    a cough that won’t go away

5. Acute pancreatitis

Your pancreas is an important organ that lies behind the lower part of your stomach. Your pancreas releases enzymes that aid digestion of food and makes hormones (insulin) that help manage your blood sugar (blood glucose). Acute pancreatitis is a sudden inflammation of your pancreas.

Acute pancreatitis was reported in studies with Wegovy. With other GLP-1 receptor agonists and other semaglutide products, some cases of acute pancreatitis have been fatal. According to the manufacturer, acute pancreatitis was reported in studies in 5 patients taking Wegovy vs. 1 patient on placebo (an inactive shot).

Tips for management of acute pancreatitis

Acute pancreatitis can be a severe or even deadly side effect, so call your doctor right away and stop taking Wegovy if you experience any of these signs or symptoms.

    severe stomach pain, that may radiate to your back
    severe pain in your back
    severe nausea (upset stomach)
    vomiting (throwing up)

If your doctor finds that you have developed acute pancreatitis, you will need to stop Wegovy treatment and not restart it.

Wegovy has not been studied in patients with a history of pancreatitis. If you’ve previously had pancreatitis, it is not known if you are more at risk for a recurrence with this treatment. It is not known if this medicine can be used safely in people with a history of pancreatitis.
6. Gallbladder problems

Your gallbladder is a small, pouch-like organ located just below your liver. It stores bile that is produced by the liver. Bile is released from the gallbladder into the small intestine and helps to digest fat from your diet.

Wegovy can cause problems with your gallbladder and the need for surgery, including gallstones (cholelithiasis) or gallbladder inflammation (cholecystitis). Sometimes rapid weight loss can cause gallbladder disease, but you don’t have to lose weight to have gallbladder problems, either.

While gallbladder disease is not as common as general stomach side effects with Wegovy, it can be much more serious. In Wegovy studies in adults, the occurrence of gallstones occurred in 1.6% of those who received Wegovy and 0.7% of those who received a placebo (an inactive shot). Gallbladder inflammation was even less common, and occurred in 0.6% of adults receiving Wegovy and 0.2% of placebo-treated patients.

Adolescents 12 years and older treated with Wegovy had higher rates of gallstones (3.8%) and gallbladder inflammation (0.8%) in studies when compared to adults. Adolescents who received the placebo did not have reports of gallbladder problems.
Tips for managing gallbladder disease

If you experience any of the following, contact your healthcare provider right away to be evaluated for possible gallbladder inflammation or gallstones:

    pain in the upper right area of your stomach
    pain in the right shoulder or between the shoulder blades
    yellowing of your skin or eyes (jaundice)
    a fever with chills
    dark-colored urine
    light-colored (clay-colored) stools

These are not all of the side effects that occur with Wegovy. Learn more here: Wegovy side effects (in more detail)

You can also review a more complete list of side effects in the manufacturer's Medication Guide. If you need a copy, you can get one from your pharmacist or doctor."
rkgjbcmV,snowybot update going to give good run,coinwalk,JavaScript,Thursday 23rd of May 2024 06:37:26 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/2000).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fart = 1;
var joe = false;
var jim = false;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>=snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((!jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<=snow)){
    NexTBet = NexTBet*2;
    jim = true;
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((!joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snow)){
    NexTBet = NexTBet*2;
    jim = true
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+(tens*fart)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
WTxweq8W,snowybot update going to give good run,coinwalk,JavaScript,Thursday 23rd of May 2024 06:28:17 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/2000).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fart = 1;
var joe = false;
var jim = false;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>=snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((!jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<=snow)){
    NexTBet = NexTBet*2;
    jim = true;
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((!joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snow)){
    NexTBet = NexTBet*2;
    jim = true
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+(tens*fart)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
BYZmWNSg,Clean Unreal Engine project and plugin directories,Developer_Bastian,PowerShell,Thursday 23rd of May 2024 06:20:47 AM CDT,"# Clean an Unreal Engine development directory

# Place into the root of your Unreal Project and execute between adding new files or pushing to Git
# Make sure to edit the starter array to include all plugin directories you want to clean

$myPath = Get-Location
Write-Host ""Will delete tmp directories from: $myPath"" -ForegroundColor Green

# Define an array of inventory directory names to delete
$inventory = @('.vs', '.vsconfig', 'Binaries', 'DerivedDataCache'
, 'Intermediate', 'Saved'
, 'Plugins\BA_RepArray\Intermediate', 'Plugins\BA_RepArray\Binaries')

# Iterate over the array and delete each inventory directory if it exists
foreach ($item in $inventory) {
    if (Test-Path $item) {
        Write-Host ""Deleting directory '$item' with all subdirectories and files..."" -ForegroundColor Green
        Remove-Item $item -Recurse -Force
    } else {
        Write-Host ""Directory '$item' does not exist."" -ForegroundColor DarkYellow
    }
}

# delete sln file
foreach ($file in Get-ChildItem -Filter ""*.sln"") {
	Write-Host ""Deleting Visual Studio solution file '$item'"" -ForegroundColor Green
	Remove-Item $file -Force
}
  
# Add a pause at the end of the script
Write-Host ""Press Enter to exit script"" -ForegroundColor White
Read-Host
"
2rKVGW06,Untitled,vladislav_larionov,QML,Thursday 23rd of May 2024 06:07:19 AM CDT,"// SPDX-FileCopyrightText: 2023-2024 Open Mobile Platform LLC <community@omp.ru>
// SPDX-License-Identifier: BSD-3-Clause

import QtQuick 2.0
import Sailfish.Silica 1.0
import QtPositioning 5.2
import MfwMap 1.0
//import ""wrapper.js"" as VkMapWrapper
//import ""mmr-gl.js"" as VkMap

Page {
    id: mainPage

    objectName: ""mainPage""
    allowedOrientations: Orientation.All

    MfwMap {
        id: map

        width: parent.width
        height: parent.height - header.height
        anchors.top: header.bottom

        zoomLevel: 17.0
        metersPerPixelTolerance: 0.1

        urlDebug: false        
        cacheDatabaseStoreSettings: true

        center: QtPositioning.coordinate(55.752121, 37.617664) // Moscow

//        accessToken: ""pk.eyJ1Ijoic2xhdmFjaGVybmlrb2ZmIiwiYSI6ImNsZDBlemo0ejAxdnUzd3Fxc242Y2g2dHAifQ.YptKmH0xY8nfDfZnhdPiFg""
//        styleUrl: ""mapbox://styles/mapbox/streets-v10""

        apiKey: ""8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
        apiBaseUrl: ""https://maps.vk.com/api""
        accessToken: ""8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
        styleUrl: ""https://maps.vk.com/api/styles/main_style.json?api_key=8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
//        styleUrl: ""mmr://api/styles/main_style.json""

        //        apiBaseUrl: ""https://tiles.maps.vk.com/tiles/8/153/76.pbf?api_key=8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
        onGestureInProgressChanged: {
            mainPage.forwardNavigation = !gestureInProgress
            mainPage.backNavigation = !gestureInProgress
        }
        Text {
            id: license

            text: qsTr(""License logo clicked"")

            anchors.margins: 20 * Theme.pixelRatio
            anchors.right: parent.right
            anchors.bottom: parent.bottom
            visible: false
        }
        onLogoClicked: {
            license.visible = true
        }
    }

    PageHeader {
        id: header

        objectName: ""pageHeader""
        title: qsTr(""Source control"")
    }

    Rectangle {
        anchors.fill: menu
        anchors.margins: -20 * Theme.pixelRatio
        radius: 30
        clip: true
        color: ""grey""
    }

    Column {
        id: menu

        anchors.top: header.bottom
        anchors.right: parent.right
        anchors.margins: 30 * Theme.pixelRatio

        Button {
            text: qsTr(""MapTiler"")
            border.color: ""black""

            onClicked: {
                map.apiKey = ""rIkhrE0BML0xS89iIyfG""
                map.styleUrl = ""https://api.maptiler.com/maps/streets/style.json?key=rIkhrE0BML0xS89iIyfG""
                map.accessToken = """"
                map.apiBaseUrl = ""https://api.mapbox.com""
            }
        }

        Button {
            text: qsTr(""Mapbox"")
            border.color: ""black""

            onClicked: {
                map.accessToken = ""pk.eyJ1Ijoic2xhdmFjaGVybmlrb2ZmIiwiYSI6ImNsZDBlemo0ejAxdnUzd3Fxc242Y2g2dHAifQ.YptKmH0xY8nfDfZnhdPiFg""
                map.styleUrl = ""mapbox://styles/mapbox/streets-v10""
                map.apiKey = """"
                map.apiBaseUrl = ""https://api.mapbox.com""
            }
        }

        Button {
            text: qsTr(""Vk"")
            border.color: ""black""

            onClicked: {
                map.accessToken = ""8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
                map.apiKey = ""8d47d57ee2eacf1935cb4338708369257961f41e84e0f66fafeb5c6b78f09b2c""
                map.styleUrl = ""mmr://api/styles/main_style.json""
                map.apiBaseUrl = ""https://maps.vk.com/api""
            }
        }
    }
    Component.onCompleted: {
        console.log(""map.apiBaseUrl = "" + map.apiBaseUrl)
        console.log(""map.styleUrl = "" + map.styleUrl)
        console.log(""map.apiKey = "" + map.apiKey)
        console.log(""map.accessToken = "" + map.accessToken)
        console.log(""map.mode = "" + map.mode)
        console.log(""map.urlSuffix = "" + map.urlSuffix)
//        VkMapWrapper.createMap();
    }
}
"
6TWCLiBd,data935,TestGuy1,JSON,Thursday 23rd of May 2024 06:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '329c4820e6d813f89e73f5c949b664ba2794c9cd2cadbdcc0e21503368e9b3fdadaae982427002a0c2be30774b94cd91e81f85333bcc94e92e65a866ff6fee1a122fda5fb124c563cbe0a8d2296cc2ee2e5504529b8db5623de9a9fa8a3cf3af10a811bcdedc66cb77aeef443dc0eeac171fb9654e6f1267cd7213fe54917817',
  otherdata: [
    '8f0147674e075e9772b80ea37d33c6cb',
    '425c3a19b51c04cf457b617ea1bdf9b0',
    '039f2a8348e837b603ba629e87c6b178',
    '91416b1bc838d2b2fd8f2675a5081fbd',
    '44ea641507f9ff20d24ff449a25a7033',
    '1532c91f751ed82e4e7f20e7d2f83e8c',
    'bf303a5dabc655cd3c741f7151b207eb',
    '655a62f8dcc292153f24448a02eb712d'
  ]
}"
