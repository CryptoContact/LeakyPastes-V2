id,title,username,language,date,content
wGGbLBc3,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,tajdiqul,JavaScript,Tuesday 2nd of July 2024 07:06:17 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
dH1BPs1x,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,notgoodatscripting,JavaScript,Tuesday 2nd of July 2024 07:00:14 AM CDT,"G2A.com free gift card & games guide.
Any voucher for free on G2A.com including Xbox gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
Zh0m2bGa,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,bgill55,JavaScript,Tuesday 2nd of July 2024 06:54:11 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
BSqtr2qX,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,FreeRobux12345,JavaScript,Tuesday 2nd of July 2024 06:48:08 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
DBUgnJq7,üéÅ G2A.COM FREE GIFT CARD GUIDE JUL 2024 V4 üéÅ,jusst2k4,GetText,Tuesday 2nd of July 2024 06:43:54 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_724925.pdf
 
Working as of:
02 July 2024"
NVgayu6V,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,mikyser,JavaScript,Tuesday 2nd of July 2024 06:42:02 AM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
66emrjWJ,RequestException: error with request,basedcount_bot,Python,Tuesday 2nd of July 2024 06:36:42 AM CDT,"Traceback (most recent call last):
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/basedcount_bot.py"", line 263, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 286, in _request_with_retries
    response, saved_exception = await self._make_request(
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncprawcore/sessions.py"", line 192, in _make_request
    response = await self._rate_limiter.call(
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncprawcore/rate_limit.py"", line 51, in call
    response = await request_function(*args, **kwargs)
  File ""/home/gmktec/Programming/Bots/basedcount_bot/.venv/lib/python3.10/site-packages/asyncprawcore/requestor.py"", line 80, in request
    raise RequestException(exc, args, kwargs) from None
asyncprawcore.exceptions.RequestException: error with request 
"
6CHQp0v3,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,Ohtaku,JavaScript,Tuesday 2nd of July 2024 06:35:59 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
h9iv0Wy2,Untitled,dereksir,Bash,Tuesday 2nd of July 2024 06:35:16 AM CDT,"[1] ""{\n  \""origin\"": \""189.240.60.168:17770\""\n}"""
YmESQn6R,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Elii,JavaScript,Tuesday 2nd of July 2024 06:29:57 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
TqDBB7VT,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,guywithabigheart,JavaScript,Tuesday 2nd of July 2024 06:23:54 AM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
n9uqPcJy,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,PetrikDev,JavaScript,Tuesday 2nd of July 2024 06:17:50 AM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
1st of July 2024

"
jNpyyspm,Untitled,dereksir,R,Tuesday 2nd of July 2024 06:15:05 AM CDT,"# import the required libraries
library(RSelenium)
library(wdman)
library(netstat)

# launch a Selenium server using wdman
selenium()

eCaps <- list(
  chromeOptions = list(
    args = list(""--headless"",
				# define your proxy settings
				""--proxy-server=http://189.240.60.166:9090""	
	) 
  )
)

# start a Chrome browser using the rsDriver function
remote_driver <- rsDriver(browser = ""chrome"",
                          chromever = ""latest"",
                          verbose = F,
                          extraCapabilities = eCaps,
                          port = free_port())

# create a client object 
remDr <- remote_driver$client

# navigate to target website
remDr$navigate(""https://httpbin.io/ip"")

# find the body element and get its text content
html <- remDr$findElement(using = ""tag name"", value = ""body"")$getElementText()
print(html)

# close the Selenium client and server
remDr$close
remote_driver$server$stop()"
HTUC4gBP,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,x3kiN,JavaScript,Tuesday 2nd of July 2024 06:11:47 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?30516

Working as of:
July 1 2024

"
vcDPU03f,Untitled,dereksir,R,Tuesday 2nd of July 2024 06:03:37 AM CDT,"eCaps <- list(
  chromeOptions = list(
    args = list(""--headless"",
				# define proxy settings
                ""--proxy-server=http://189.240.60.166:9090""
    ) 
  )
)"
Nh9ZGhxy,data975,TestGuy1,JSON,Tuesday 2nd of July 2024 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'fdf392c8653e6d26b596ad879da35b9295aef32131aa792a601977a5a650815150d56a87dc094d67c64d874f758c694965e8ed9707dd04a504bf90199eb9e5c8d2f73baa4e32d2c25beda19bb639e4e1b10d2ec974dc6183d98ca098887bd24ab0ee033fc7b72b13d3c1bff372383c717b2ff6c40842697c86717531b0a5b8b4',
  otherdata: [
    '8f79ecadee60770deda91238f64fb132',
    'ac3d64749778dff8f02e3f349fb5e467',
    'ad0ce12838531dffacde8c654988b839',
    'eb0e60eecc4241a25480095025fe9953',
    'f90d25629544a84027e5f92e9fec801a',
    'c6be9ec3764c7761b40c3a21e2acef03',
    'a0f9d909bdff1f0095bbfcb46041b45d',
    '93e0b98e70cbd289124ebf878028c8eb'
  ]
}"
KxMjGr14,KL715 Wireless Tx+Rx 433MHz - Learn,microrobotics,Arduino,Tuesday 2nd of July 2024 05:40:37 AM CDT,"#define D0_PIN 16
#define D1_PIN 17
#define D2_PIN 18
#define D3_PIN 19
#define VT_PIN 21  // Optional, for valid transmission detection

void setup() {
  Serial.begin(115200);    // Initialize serial communication
  
  // Set D0-D3 pins and VT_PIN as inputs
  pinMode(D0_PIN, INPUT);
  pinMode(D1_PIN, INPUT);
  pinMode(D2_PIN, INPUT);
  pinMode(D3_PIN, INPUT);
  pinMode(VT_PIN, INPUT);
}

void loop() {
  if (digitalRead(VT_PIN) == HIGH) { // Check if the VT pin is HIGH (valid transmission detected)
    // Read from each data pin
    int d0_value = digitalRead(D0_PIN);
    int d1_value = digitalRead(D1_PIN);
    int d2_value = digitalRead(D2_PIN);
    int d3_value = digitalRead(D3_PIN);

    // Print the values of each data pin
    Serial.print(""D0: "");
    Serial.print(d0_value);
    Serial.print("" D1: "");
    Serial.print(d1_value);
    Serial.print("" D2: "");
    Serial.print(d2_value);
    Serial.print("" D3: "");
    Serial.println(d3_value);
  }
}
"
Ry13FPLW,Algoverse_adesh_33,kucheasysa,Python,Tuesday 2nd of July 2024 05:37:46 AM CDT," def insertAtBegining(self,head,x):
        temp=Node(x)
        temp.next=head
        return temp
    .
    def insertAtEnd(self,head,x):
        if head is None:
            return Node(x)
        curr=head
        while curr.next:
            curr=curr.next
        curr.next=Node(x)
        return head"
mzzAVseT,Majority wins hex diff,cts,Python,Tuesday 2nd of July 2024 05:16:46 AM CDT,"import matplotlib.pyplot as plt

# Function to convert file to hex
def file_to_hex(filename):
    with open(filename, 'rb') as f:
        return f.read().hex()

# List of your files
files = [""testfile1"", ""testfile2"", ""testfile3"", ""testfile4""]  

# Convert files to hex
hex_files = [file_to_hex(file) for file in files]

# Align hex values
max_len = max(len(h) for h in hex_files)
aligned_hex_files = [h.ljust(max_len, '0') for h in hex_files]

# Function to compare hex files and determine differences
def compare_hex_files(hex_files):
    differences = []
    num_files = len(hex_files)
    length = len(hex_files[0])
    
    for i in range(0, length, 2):
        chunk = [hex_file[i:i+2] for hex_file in hex_files]
        unique_chunks = set(chunk)
        
        if len(unique_chunks) == 1:
            differences.append('ALL_SAME')
        elif len(unique_chunks) == num_files:
            differences.append('ALL_DIFFERENT')
        else:
            differences.append('MAJORITY_WINS')
    
    return differences

# Compute differences
diffs = compare_hex_files(aligned_hex_files)

# Simple text-based output of differences
for i, diff in enumerate(diffs):
    print(f'Byte {i:04x}: {diff}')

# Advanced visualization using matplotlib
colors = {'ALL_SAME': 'green', 'ALL_DIFFERENT': 'red', 'MAJORITY_WINS': 'yellow'}
color_list = [colors[diff] for diff in diffs]

plt.figure(figsize=(12, 6))
plt.bar(range(len(diffs)), [1] * len(diffs), color=color_list)
plt.xlabel('Byte Position')
plt.ylabel('Difference')
plt.title('Hex File Comparison')
plt.show()"
TeDA5Dbq,Untitled,dereksir,Bash,Tuesday 2nd of July 2024 05:07:00 AM CDT,"[1] ""{\n  \""origin\"": \""98.97.79.238:40268\""\n}"""
HN8Z8WZw,Geometry,KuRo4Ka_12,C++,Tuesday 2nd of July 2024 04:37:08 AM CDT,"#include <iostream>
#include <cmath>
#include <list>
#include <vector>
#include <algorithm>
#include <iomanip>
using namespace std;


const double eps = 1e-8;
const double pi = 3.14159265358979323;
long long gcd (long long a, long long b)
{
    a = (a < 0 ? - a : a);
    b = (b < 0 ? - b : b);
    while (a && b)
        if (a > b) a %= b;
        else b %= a;
    return a + b;
}

class point
{
public: 
    double x, y;
    int i;
    point(double _x, double _y) 
    {
        x = _x;
        y = _y;
    }
    point()
    {
        point(0, 0);  
    }
};

class line
{
public: 
    double a, b, c;
    line(double _a = 0, double _b = 0, double _c = 0) 
    {
        a = _a;
        b = _b;
        c = _c;
    }
};
class circle
{
public: 
    point c;
    double r;
    double alpha;

    circle (double x, double y, double _r)
    {
       c = point(x, y);
       r = _r;
    }
    circle (point p, double _r)
    {
        c = p;
        r = _r;
    }
    circle ()
    {
       circle(0, 0, 0);
    }
};
class less_of_posXY
{
public :
    bool operator () (point a, point b)
    {
        if (abs (a.x - b.x) > eps)
            return a.x < b.x;

        if (abs (a.y - b.y) <= eps) return false;
        return a.y < b.y;
    }
};
class equal_point 
{
public :
    bool operator () (point a, point b)
    {
        return abs (a.x - b.x) <= eps && abs (a.y - b.y) <= eps;
    }
};
double dist(point a, point b)
{
    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}
bool point_in_box (point t, point p1, point p2)
{
    return  (abs (t.x - min(p1.x, p2.x)) <= eps || min(p1.x, p2.x) <= t.x) && 
            (abs (max(p1.x, p2.x) - t.x) <= eps || max(p1.x, p2.x) >= t.x) && 
            (abs (t.y - min(p1.y, p2.y)) <= eps || min(p1.y, p2.y) <= t.y) && 
            (abs (max(p1.y, p2.y) - t.y) <= eps || max(p1.y, p2.y) >= t.y);
}
point min_px (point a, point b)
{
        return a.x < b.x || (abs (a.x - b.x) <= eps && a.y < b.y) ? a : b;
}
point max_px (point a, point b)
{
        return a.x > b.x || (abs (a.x - b.x) <= eps && a.y > b.y) ? a : b;
}
point min_py (point a, point b)
{
        return a.y < b.y || (abs (a.y - b.y) <= eps && a.x < b.x) ? a : b;
}
point max_py (point a, point b)
{
        return a.y > b.y || (abs (a.y - b.y) <= eps && a.x > b.x) ? a : b;
}

double polar_angle (point p)
{
    double alpha = atan2(p.y, p.x);
    if (alpha < 0) alpha += 2 * pi;
    return alpha;
}
double polar_dist (double alpha, double r1, double betta, double r2)
{
    point p1 = point (r1 * cos (alpha), r1 * sin (alpha));
    point p2 = point (r2 * cos (betta), r2 * sin (betta));
    return dist (p1, p2);
}
point part_segment (point p1, point p2, double m, double n)
{
    point t;
    t.x = (p1.x * n + p2.x * m) / (m + n);
    t.y = (p1.y * n + p2.y * m) / (m + n);
    return t;
}
point turn (point p, double alpha)
{
    double c = cos(alpha);
    double s = sin(alpha);
    return point (p.x * c - p.y * s, p.x * s + p.y * c);
}
point turn_of (point p, double alpha, point c)
{
    point t = turn (point (p.x - c.x, p.y - c.y), alpha);
    return point (t.x + c.x, t.y + c.y);
}
point add_vector (point p, point p1, point p2, double k)
{
    return point (p.x + (p2.x - p1.x) * k, p.y + (p2.y - p1.y) * k);
}
line toline (point p1, point p2)
{
    double a = p2.y - p1.y;
    double b = p1.x - p2.x;

    return line(a, b, - a * p1.x - b * p1.y);
}
int point_in_line (line l, point p)
{
    double s = l.a * p.x + l.b * p.y + l.c;
    return s < - eps ? - 1 : s > eps ? 1 : 0;
}
bool is_parallel_line (line l1, line l2)
{
    return abs (l1.a * l2.b - l2.a * l1.b) <= eps;
}
bool is_equal_line (line l1, line l2)
{
    return abs(l1.a * l2.b - l2.a * l1.b) <= eps && 
            abs(l1.a * l2.c - l2.a * l1.c) <= eps && 
            abs(l1.b * l2.c - l2.b * l1.c) <= eps;
}
int cross_line (line l1, line l2, point &p)
{
    if (is_equal_line (l1, l2)) return 2;
    if (is_parallel_line (l1, l2)) return 0;

    p.x = (l2.b * l1.c - l1.b * l2.c) / (l2.a * l1.b - l1.a * l2.b);
    p.y = (l1.b != 0 ? (- l1.c - l1.a * p.x) / l1.b : (- l2.c - l2.a * p.x) / l2.b);
    return 1;
}
line perp_line (line l, point p)
{
    return line (l.b, - l.a, - l.b * p.x + l.a * p.y);
}
point closest_point (line l, point p)
{
    double k = (l.a * p.x + l.b * p.y + l.c) / (l.a * l.a + l.b * l.b);
    return point (p.x - l.a * k, p.y - l.b * k);
}
double dist_point_to_line (point p, line l)
{
    return abs((l.a * p.x + l.b * p.y + l.c) / sqrt(l.a * l.a + l.b * l.b));
}
line parallel_line_of_dist (line l, double d)
{
    return line (l.a, l.b, l.c - d * sqrt (l.a * l.a + l.b * l.b));
}
double dist_between_line (line l1, line l2)
{
    return abs (l1.c - l2.c) / sqrt (l1.a * l1.a + l2.b * l2.b);
}
bool point_in_segment (point t, point p1, point p2)
{
    double a = p2.y - p1.y;
    double b = p1.x - p2.x;
    double c = - a * p1.x - b * p1.y;
    if (abs(a * t.x + b * t.y + c) > eps) return false;

    return point_in_box (t, p1, p2);
}

bool is_cross_segment (point p1, point p2, point p3, point p4)
{
    line l1 = toline(p1, p2);
    line l2 = toline(p3, p4);
    int sign1 = point_in_line(l1, p3) * point_in_line(l1, p4);
    int sign2 = point_in_line(l2, p1) * point_in_line(l2, p2);

    if (abs(sign1) <= eps && abs(sign2) <= eps)
        return point_in_box(p1, p3, p4) || point_in_box(p2, p3, p4) ||
               point_in_box(p3, p1, p2) || point_in_box(p4, p1, p2);
    return sign1 <= eps && sign2 <= eps;
}
bool cross_segment (point p1, point p2, point p3, point p4, point &t)
{
    line l1 = toline(p1, p2);
    line l2 = toline(p3, p4);

    int flag = cross_line(l1, l2, t);
    if (flag == 0) return false;
    
    if (flag == 2)
    {
        if (point_in_box (p1, p3, p4)) { t = p1; return true; }
        if (point_in_box (p2, p3, p4)) { t = p2; return true; }
        if (point_in_box (p3, p1, p2)) { t = p3; return true; }
        if (point_in_box (p4, p1, p2)) { t = p4; return true; }
        return false;
    }
    return point_in_box (t, p1, p2) && point_in_box (t, p3, p4);
}
double dist_point_to_segment (point p, point p1, point p2)
{
    point t = closest_point (toline (p1, p2), p);

    if (point_in_box (t, p1, p2))
        return dist (p, t);
    else
        return min (dist (p, p1), dist (p, p2));
}

int cross_segment_line (point p1, point p2, line l, point &p)
{
    line t = toline (p1, p2);
    int flag = cross_line (l, t, p);
    if (flag == 0) return 0;
    if (flag == 2) return 2;

    if (point_in_box (p, p1, p2)) return 1;
    return 0;
}
double area_triangle (point a, point b, point c)
{
    return 0.5 * (a.x * b.y + b.x * c.y + c.x * a.y - a.y * b.x - b.y * c.x - c.y * a.x); 
}
double angle_point (point a, point b, point c)
{
    double x1 = a.x - b.x, x2 = c.x - b.x;
    double y1 = a.y - b.y, y2 = c.y - b.y;
    double d1 = sqrt (x1 * x1 + y1 * y1);
    double d2 = sqrt (x2 * x2 + y2 * y2);
    return acos ((x1 * x2 + y1 * y2) / (d1 * d2));
}
bool ccw (point a, point b, point c)
{
        return area_triangle (a, b, c) > eps;
}
line height_line (point a, point b, point c)
{
    return perp_line (toline (a, c), b);
}
line median_line (point a, point b, point c)
{
    return toline (b, point ((a.x + c.x) / 2, (a.y + c.y) / 2));
}
line bisector_line (point a, point b, point c)
{
    double ab = dist (a, b);
    double bc = dist (b, c);
    point tab = part_segment (b, a, bc, ab);
    point tbc = part_segment (b, c, ab, bc);
    point p = part_segment (tab, tbc, 1, 1);
    return toline (b, p);
}
circle entered_circle (point a, point b, point c)
{
    line ba = bisector_line (b, a, c);
    line bb = bisector_line (a, b, c);

    circle res;
    int flag = cross_line(ba, bb, res.c);
    res.r = dist_point_to_line (res.c, toline (a, b));
    return res;
}
circle described_circle (point a, point b, point c)
{
    point tab = part_segment (a, b, 1, 1);
    point tbc = part_segment (b, c, 1, 1);
    line pab = perp_line (toline (a, b), tab);
    line pbc = perp_line (toline (b, c), tbc);

    circle res;
    int flag = cross_line (pab, pbc, res.c);
    res.r = dist (res.c, a);
    return res;
}
int point_in_circle (point p, circle c)
{
    double d = dist (p, c.c);
    if (abs (c.r - d) <= eps) return 1;
    if (c.r > d) return 0;
    return 2;
}
circle min_circle_for_three_point (point a, point b, point c)
{
    if (abs (area_triangle (a, b, c)) > eps)
        return described_circle (a, b, c);
    point maxP = max_px (max_px (a, b), c);
    point minP = min_px (max_px (a, b), c);
    return circle (part_segment (maxP, minP, 1, 1), 0.5 * dist (minP, maxP));
}
int tangent_points (point p, circle c, point &p1, point &p2)
{
    int flag = point_in_circle (p, c);
    if (flag == 0) return 0;
    if (flag == 1)
    {
        p1 = p;
        return 1;
    }
    double d = dist (p, c.c);
    double alpha = asin (c.r / d);
    point _p1 = turn_of (c.c, alpha, p);
    point _p2 = turn_of (c.c, - alpha, p);
    double k = sqrt (d * d - c.r * c.r);
    d = dist (p, _p1);
    p1 = part_segment (p, _p1, k, d - k);
    p2 = part_segment (p, _p2, k, d - k);

    return 2;
}

int cross_line_circle (line l, circle c, point &p1, point &p2)
{
    point p = closest_point (l, c.c);
    int flag = 0;
    double d = dist (c.c, p);
    if (abs (d - c.r) <= eps) flag = 1;
    else
        if (c.r > d) flag = 2;
        else return 0;

    double k = sqrt (c.r * c.r - d * d);
    double t = dist (point (0, 0), point (l.b, - l.a));
    p1 = add_vector (p, point (0, 0), point (- l.b, l.a), k / t);
    p2 = add_vector (p, point (0, 0), point (l.b, - l.a), k / t);

    return flag;
}
int cross_circle (double x1, double y1, double r1, 
                  double x2, double y2, double r2, point &p1, point &p2)
{
    if (abs (x1 - x2) <= eps && abs (y1 - y2) <= eps && abs (r1 - r2) <= eps)
        return 3;
    double a = 2 * (x2 - x1);
    double b = 2 * (y2 - y1);
    double c = x1 * x1 + y1 * y1 - r1 * r1 - (x2 * x2 + y2 * y2 - r2 * r2);
    return cross_line_circle (line (a, b, c), circle (x1, y1, r1), p1, p2);
}
int contact_points (point p, circle c, point &p1, point &p2)
{
    int flag = point_in_circle (p, c);
    if (flag == 0) return 0;
    if (flag == 1)
    {
        p1 = p;
        return 1;
    }  
    double d = dist (p, c.c);
    double k = sqrt (d * d - c.r * c.r);
    return cross_circle (p.x, p.y, k, c.c.x, c.c.y, c.r, p1, p2);
}
bool point_in_ray (point p, point p1, point p2)
{
    line l = toline (p1, p2);
    if (point_in_line (l, p) != 0) return false;

    if (abs (l.b) <= eps)
        if (p2.y >= p1.y) 
            return p.y >= p1.y;
        else
            return p.y <= p1.y;

    if (p2.x >= p1.x) 
        return p.x >= p1.x;
    else
        return p.x <= p1.x;
}
double dist_point_to_ray (point p, point p1, point p2)
{
    line l = toline (p1, p2);
    point t = closest_point (l, p);

    if (point_in_ray (t, p1, p2))
        return dist (p, t);

    return dist (p, p1);
}
int cross_ray_circle (point p, point t, circle c, point &p1, point &p2)
{
    line l = toline (p, t);
    int flag = cross_line_circle (l, c, p1, p2);
    if (flag == 0) return 0;

    if (flag == 1)
        if (point_in_ray (p1, p, t))
            return 1;
        else
            return 0;

    bool b1 = point_in_ray (p1, p, t);
    bool b2 = point_in_ray (p2, p, t);

    if (b1)
        if (b2)
            return 2;
        else
            return 1;
    else
        if (b2)
        {
            p1 = p2;
            return 1;
        }
        else
            return 0;
}
class less_of_polar_angle
{
public :
    bool operator () (circle c1, circle c2)
    {
        return c1.alpha < c2.alpha;
    }
};
bool ray_nocross_for_circset (point p, vector < circle > v, point &t)
{
    int n = v.size();
    int i, j, k;

    for (i = 0; i < n; ++ i)
        v[i].alpha = polar_angle (point (v[i].c.x - p.x, v[i].c.y - p.y));

    sort (v.begin (), v.end (), less_of_polar_angle ());

    k = 0;
    for (i = 1; i < n; ++ i)
        if (v[i].r > v[k].r)
            k = i;

    i = k; // —Ç–µ–∫—É—â–∞—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å
    do
    {
        point p1, p2;
        int flag = contact_points (p, v[i], p1, p2);
        double alpha = polar_angle (point (p1.x - p.x, p1.y - p.y));
        double betta = polar_angle (point (p2.x - p.x, p2.y - p.y));

        if (abs (alpha - betta) >= pi) 
            if (alpha < betta)
                t = p1;
            else 
                t = p2;
        else
            if (alpha < betta)
                t = p2;
            else
                t = p1;
        
        double d = 0.001 / dist (v[i].c, t);
        t = add_vector (t, v[i].c, t, d);

        bool flag_cross = false;
        j = (i + 1) % n;
        do
        {
            if (cross_ray_circle (p, t, v[j], p1, p2) != 0)
            {
                flag_cross = true;
                i = j;
                break;
            }
            j = (j + 1) % n;
        }
        while (j != k);

        if (flag_cross == false)    return true;
    }
    while (i != k);

    return false;
}
double area_polygon (vector < point > p)
{
    int i, j;
    double s = 0;
    for (i = 0; i < p.size(); ++ i)
    {
        j = (i + 1) % p.size();
        s += p[i].x * p[j].y - p[j].x * p[i].y;
    }
    return fabs(0.5 * s);
}

double perimeter_polygon (vector < point > p)
{
    int i, j;
    double perimeter = 0;
    for (i = 0; i < p.size(); ++ i)
    {
        j = (i + 1) % p.size();
        perimeter += dist (p[i], p[j]);
    }
    return perimeter;
}
bool point_in_polygon (point t, vector < point > p)
{
        int i, j;
        int count = 0;
        for (i = 0; i < p.size(); ++ i)
        {
                j = (i + 1) % p.size();
                if(point_in_segment(t, p[i], p[j])) {return true;}
                if (min (p[i].y, p[j].y) < t.y && t.y <= max (p[i].y, p[j].y) &&
                    ccw (min_py (p[i], p[j]), max_py (p[i], p[j]), t))
                {
                    ++ count; 
                }
        }
        return count % 2;
}
long long count_B (vector < point > p)
{
    int i, j;
    long long count = 0;
    for (i = 0; i < p.size(); ++ i)
    {
        j = (i + 1) % p.size();
        count += gcd (p[j].x - p[i].x, p[j].y - p[i].y);
    }
    return count;
}
long long count_I (vector < point > p)
{
    return abs (area_polygon (p)) - count_B (p) / 2 + 1;
}
bool is_convex (vector < point > p)
{
    int l, i, r;
    int n = p.size();
    bool isccw = ccw (p[n - 1], p[0], p[1]);
    for (i = 1; i < n; ++ i)
    {
        l = (i - 1 + n) % n;
        r = (i + 1) % n;
        if (ccw (p[l], p[i], p[r]) != isccw)
            return false;
    }
    return true;
}
vector < int > hull_jarvis (vector < point > p)
{
    int n = p.size();
    int first, q, next, i;
    double sign;
    first = 0;
    vector < int > ip;
    for (i = 1; i < n; ++ i)
        if (p[i].x < p[first].x || (p[i].x == p[first].x && p[i].y < p[first].y))
            first = i;
  
    q = first;
    do
    {
        ip.push_back(q);
        next = q;
        for (i = n - 1; i >= 0; -- i)
            if (p[i].x != p[q].x || p[i].y != p[q].y)
            {
                sign = area_triangle (p[q], p[i], p[next]);

                if (next == q || sign > 0 || (sign == 0 && point_in_box (p[next], p[q], p[i])))
                    next = i;
            }
        q = next;
    }
    while (q != first);
    return ip;
}
point first;
class less_of_ccw
{
public :
    bool operator () (point a, point b)
    {
        if (a.i == first.i) return true;
        if (b.i == first.i) return false;
        if (ccw (first, a, b)) return true;
        if (ccw (first, b, a)) return false;
        return dist (first, a) > dist (first, b);
    }
};
void hull_graham (vector < point > p, vector < int > &ip)
{
    int n = p.size();
    int i;
    for (i = 0; i < n; ++ i)
        p[i].i = i;
    first = p[0];
    for (i = 1; i < n; ++ i)
        if (first.x > p[i].x || (first.x == p[i].x && first.y > p[i].y))
            first = p[i];
    
    sort (p.begin (), p.end (), less_of_ccw ());
    ip.push_back (0);
    for (i = 1; i < n && abs (area_triangle (p[0], p[1], p[i])) <= eps; ++ i);
    ip.push_back (1);

    int top = 1;
    while (i < n)
    {
        if (! ccw (p[ip[top - 1]], p[ip[top]], p[i]))
        {
            -- top;
            ip.pop_back ();
        }
        else
        {
            ++ top;
            ip.push_back (i);
            ++ i;
        }
    }
    for (i = 0; i < ip.size(); ++ i)
        ip[i] = p[ip[i]].i;
}
circle min_described_circle (vector < point > p)
{
    int n = p.size ();
    int i, j, k;
    circle c = circle (0, 0, 1e9);
    for (i = 0; i < n; ++ i)
        for (j = i + 1; j < n; ++ j)
            for (k = j + 1; k < n; ++ k)
            {
                circle t = min_circle_for_three_point (p[i], p[j], p[k]);
                int u;
                for (u = 0; u < n; ++ u)
                    if (point_in_circle (p[u], t) == 2) break;
                if (u >= n && t.r < c.r)
                    c = t;
            }
    return c;
}
int polygon_for_line (vector < point > p, line l)
{
    int i, j;
    int s = - 2; // –∑–Ω–∞–∫
    for (i = 0; i < p.size(); ++ i)
    {
        int t = point_in_line (l, p[i]);
        if (t != 0)
            if (s != - 2)
                if (t != s) 
                    return 0;
                else
                {}
            else
                s = t;
    }
    if (s == - 2) return 0;
    return s;
}
void cut_polygon_for_edge (vector < point > p, int i1, int i2, vector < point > &p1, vector < point > &p2)
{
    int i;    
    int n = p.size();

    for (i = i1; i != (i2 + 1) % n; i = (i + 1) % n)
        p1.push_back (p[i]);

    for (i = i2; i != (i1 + 1) % n; i = (i + 1) % n)
        p2.push_back (p[i]);
}
void cut_convex_for_line (vector < point > p, line l, vector < point > &v1, vector < point > &v2, point &p1, point &p2)
{
    int n = p.size();
    int i, j;

    int c = 0; 
    list < point > s (p.begin(), p.end());
    list < point > :: iterator it, jt; 
    list < point > :: iterator i1, i2;

    for (it = s.begin(); it != s.end(); ++ it)
    {
        jt = it;
        ++ jt;
        if (jt == s.end()) jt = s.begin();

        point t;
        int flag = cross_segment_line (*it, *jt, l, t);
        if (flag == 2)
        {
            if (polygon_for_line (p, l) > 0)    v1 = p;
            else    v2 = p;
            return;
        }
        if (flag == 0) continue;

        if (abs (t.x - (*it).x) <= eps && abs (t.y - (*it).y) <= eps)
        {
            if (c == 0) i1 = it;
            else i2 = it;
            ++ c;
            continue;
        }
        if (abs (t.x - (*jt).x) <= eps && abs (t.y - (*jt).y) <= eps) continue;

        ++ it;
        it = s.insert (it, t);

        if (c == 0) i1 = it;
        else i2 = it;
        ++ c;
    }

    if (c != 2)
    {
        if (polygon_for_line (p, l) > 0)    v1 = p;
        else    v2 = p;
        return;
    }

    n = s.size ();
    vector < point > all (s.begin(), s.end());
    int j1, j2;
    for (it = s.begin(), i = 0; it != s.end(); ++ i, ++ it)
    {
        if (it == i1) j1 = i;
        if (it == i2) j2 = i;
    }

    p1 = all[j1];
    p2 = all[j2];
    cut_polygon_for_edge (all, j1, j2, v1, v2);

    if (polygon_for_line (v1, l) < 0)
        swap (v1, v2);
}

point part_convex (vector < point > v, double m, double n)
{
    double area = abs (area_polygon (v)) / (m + n) * m;
    double a = 0;
    int i;
    for (i = 1; i < v.size () - 1; ++ i)
    {
        double s = abs (area_triangle (v[0], v[i], v[i + 1]));
        if (a + s <= area)
            a += s;
        else break;
    }
    if (abs (a - area) <= eps) return v[i];
    return part_segment (v[i], v[i + 1], area - a,
                        abs (area_triangle (v[0], v[i], v[i + 1]) - area + a));
}
void npart_convex (vector < point > v, int k, vector < point > &s)
{
    double area = abs (area_polygon (v));
    double a = area / (double) k;
    int i;
    for (i = 1; i < k; ++ i)
        s.push_back (part_convex (v, a * i, area - a * i));
}"
iBdqK49C,2024_ponteiros_fun_with_pointers,gpsgiraldi,C,Tuesday 2nd of July 2024 04:03:39 AM CDT,"#include <stdio.h>
#include <string.h>

int main()
{
    
    char vet[99];
    
    fgets(vet,98,stdin);
    int tamanho=strlen(vet);
    for(int i=0;i<tamanho-1;i++){
        printf(""%p %c\n"", vet+i,vet[i]);
    }

    return 0;
}"
gAWRRask,Untitled,dereksir,R,Tuesday 2nd of July 2024 04:02:27 AM CDT,"# import the required libraries
library(RSelenium)
library(wdman)
library(netstat)

# launch a Selenium server using wdman
selenium()

eCaps <- list(
  chromeOptions = list(
    args = list(""--headless"") # optional for headless mode
  )
)

# start a Chrome browser using the rsDriver function
remote_driver <- rsDriver(browser = ""chrome"",
                          chromever = ""latest"",
                          verbose = F,
                          extraCapabilities = eCaps,
                          port = free_port())

# create a client object 
remDr <- remote_driver$client

# navigate to target website
remDr$navigate(""https://httpbin.io/ip"")

# find the body element and get its text content
html <- remDr$findElement(using = ""tag name"", value = ""body"")$getElementText()
print(html)

# close the Selenium client and server
remDr$close
remote_driver$server$stop()"
kMWkGuxY,Untitled,sruhani,PHP,Tuesday 2nd of July 2024 03:54:36 AM CDT,"<?php

declare(strict_types=1);

namespace Ruhani\Jobs\Controller;

use http\Env\Response;
use Psr\Http\Message\ResponseInterface;
use TYPO3\CMS\Extbase\Mvc\Controller\ActionController;
use Markenstuermer\Jobs\Domain\Model\Job;
use Markenstuermer\Jobs\Domain\Repository\JobRepository;
use TYPO3\CMS\Extbase\Mvc\Exception\NoSuchArgumentException;
use TYPO3\CMS\Core\Messaging\AbstractMessage;
use TYPO3\CMS\Core\Http\HtmlResponse;

Use \TYPO3\CMS\Core\Type\ContextualFeedbackSeverity;

class JobController extends ActionController {

    protected JobRepository $jobRepository;

    public function injectJobRepository(JobRepository $jobRepository): void {
        $this->jobRepository = $jobRepository;
    }

    //Funktion zur Ausgabe der Listen-Ansicht des Plugins
    public function listAction(): ResponseInterface
    {
        /*
         * Versuche alle Jobs zu holen, wenn nicht soll im Backend eine Message im Backend auftauchen,
         * wenn die Anzahl der Eintr√§ge unter 1 oder ung√ºltig sind
         */
        try {
            $jobs = $this->jobRepository->findAll();
            if($jobs === null || count($jobs) === 0) {
                throw new \RuntimeException('No jobs found.');
            }
            $this->view->assign('jobs', $jobs);
            $detailPageUid = $this->settings['detailPageUid'] ?? $this->settings['defaultDetailPageUid'];
            $this->view->assign('detailPageUid', $detailPageUid);
            return $this->htmlResponse($this->view->render());
        }
        catch (\Exception $e) {
            return $this->handleException($e, 'error');
        }
    }

    public function detailAction(Job $job): ResponseInterface
    {
        try {
            //√úberpr√ºfe ob der Job existiert
            if(!$this->jobRepository->findByIdentifier($job->getUid())) {
                throw new NoSuchArgumentException('Job not found.');
            }
            $this->view->assign('job', $job);
            $this->view->assign('listPageUid', $this->settings['listPageUid']);
            return $this->htmlResponse($this->view->render());
        }

        catch (\Exception $e) {
            return $this->handleException($e, 'list');
        }
    }

    protected function handleException(\Exception $e): ResponseInterface
    {
        if ($e instanceof NoSuchArgumentException) {
            $severity = ContextualFeedbackSeverity::ERROR;
        } else {
            $severity = ContextualFeedbackSeverity::WARNING;
        }
        $this->addFlashMessage($e->getMessage(), '', $severity);
        return $this->htmlResponse($e->getMessage());
    }

    protected function htmlResponse(?string $html = null): ResponseInterface
    {
        return new HtmlResponse($html);
    }

    // Error Action: Fehlerseite
    public function errorAction(): ResponseInterface
    {
        return $this->htmlResponse();
    }
}"
JhE6sL2c,users.controller,waberry,TypeScript,Tuesday 2nd of July 2024 03:52:51 AM CDT,"import {
  Body,
  Controller,
  Post,
  Get,
  Patch,
  Param,
  Query,
  Delete,
  NotFoundException,
  Session,
  UseGuards,
} from '@nestjs/common';
import { CreateUserDto } from './dtos/create-user.dto';
import { UserUpdateDto } from './dtos/update-user.dto';
import { UsersService } from './users.service';
import { Serialize } from 'src/interceptors/serialize.interceptor';
import { UserDto } from './dtos/user.dto';
import { AuthService } from './auth.service';
import { CurrentUser } from './decorators/current-user.decorator';
import { User } from './user.entity';
import { AuthGuard } from 'src/guards/auth.guard';

@Controller('auth')
@Serialize(UserDto)
export class UsersController {
  constructor(
    private usersService: UsersService,
    private authService: AuthService,
  ) {}

  // @Get('/whoami')
  // whoAmI(@Session() session: any){
  //     return this.usersService.findOne(session.userId) ;
  // }

  @Get('/whoami')
  @UseGuards(AuthGuard)
  whoAmI(@CurrentUser() user: User) {
    return user;
  }

  @Post('/signout')
  signOut(@Session() session: any) {
    session.userId = null;
  }

  @Post('/signup')
  async createUser(@Body() body: CreateUserDto, @Session() session: any) {
    const user = await this.authService.signup(body.email, body.password);
    session.userId = user.id;
    return user;
  }

  @Post('/signin')
  async signin(@Body() body: CreateUserDto, @Session() session: any) {
    //DTO's name may be missleading but same struct is neede
    const user = await this.authService.signin(body.email, body.password);
    session.userId = user.id;
    return user;
  }

  @Get('/:id')
  async findUser(@Param('id') id: string) {
    const user = await this.usersService.findOne(parseInt(id));
    if (!user) {
      return new NotFoundException('User not found');
    }
    return user;
  }

  @Get()
  findAllUsers(@Query('email') email: string) {
    return this.usersService.find(email);
  }

  @Delete('/:id')
  removeUser(@Param('id') id: string) {
    return this.usersService.remove(parseInt(id));
  }

  @Patch('/:id')
  updateUser(@Param('id') id: string, @Body() body: UserUpdateDto) {
    return this.usersService.update(parseInt(id), body);
  }
}
"
UyzcyZp0,snowybot grandmaster,coinwalk,JavaScript,Tuesday 2nd of July 2024 03:47:27 AM CDT,"var nion = parseFloat(document.getElementById('pct_balance').value);
var smartz = nion;
var prefit = 0.0000001;
var winnerdinner = nion;
var tens = (prefit*10);
var sevens = (prefit*6.99);
var eights = (prefit*7.99);
var james = ((Math.floor(nion/tens))*tens);
var belance = nion;
var snowy = 0;
var beast = prefit;
var greedy =  nion;
var bolance = nion;
var snow = noin;
 
 
 
function go(){
bolance = parseFloat(document.getElementById('pct_balance').value);
if (bolance<snow){
belance = belance-beast;
snow = parseFloat(bolance);
}
if (bolance>snow){
belance = belance+beast;
snow = parseFloat(bolance);
}
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=snowy)){
        beast = beast*2;
        snowy = parseFloat(belance);
}
if ((belance>=(james+tens))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
james = ((Math.floor(belance/tens))*tens);
}
if (belance>=(winnerdinner*24000)) {
console.log(""winner winner chicken dinner"");
    return;
}
var cat = ((belance-smartz).toFixed(8));
console.log(""profit"");
console.log(cat);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1);
}
 
go();"
2Dw1eUgN,neolove.ru - M[Sticky],Luxup,JavaScript,Tuesday 2nd of July 2024 03:35:59 AM CDT,"<script async type=""text/javascript"" src=""//s.luxcdn.com/t/221348/360_light.js""></script>
<div id='lx_717540_wrapper'>
<script>
(window.__lxGc__=window.__lxGc__||{'s':{},'b':0}).cmd=window.__lxGc__.cmd||[];
__lxGc__.cmd.push(function(){__lxGc__.display('lx_717540_wrapper', '_221348', '_717540');});
</script>
</div>"
00LPN1VY,snowybot grandmaster,coinwalk,JavaScript,Tuesday 2nd of July 2024 03:07:51 AM CDT,"var nion = parseFloat(document.getElementById('pct_balance').value);
var smartz = nion;
var prefit = 0.0000001;
var winnerdinner = nion;
var tens = (prefit*10);
var sevens = (prefit*6.99);
var eights = (prefit*7.99);
var james = ((Math.floor(nion/tens))*tens);
var belance = nion;
var snowy = 0;
var beast = prefit;
var greedy =  nion;
var bolance = nion;
 
 
 
function go(){
bolance = parseFloat(document.getElementById('pct_balance').value);
if (bolance<snow){
belance = belance-beast;
snow = parseFloat(bolance);
}
if (bolance>snow){
belance = belance+beast;
snow = parseFloat(bolance);
}
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=snowy)){
        beast = beast*2;
        snowy = parseFloat(belance);
}
if ((belance>=(james+tens))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
james = ((Math.floor(belance/tens))*tens);
}
if (belance>=(winnerdinner*24000)) {
console.log(""winner winner chicken dinner"");
    return;
}
var cat = ((belance-smartz).toFixed(8));
console.log(""profit"");
console.log(cat);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1);
}
 
go();"
rDKJnQ5g,–ø–µ—Ä–≤—ã–µ–µ,littlementalpain,C++,Tuesday 2nd of July 2024 03:06:10 AM CDT,"‚ú®:
auto letter_check = [](std::string word, char letter)
  {
    return *word.rbegin() == letter;
  };

void task1(std::ifstream& file1, bool (*letter_check)(std::string, char), char letter)
{
  std::map<std::string, int> k;
  std::string str;
  std::string word;
  if (file1.is_open())
  {
    while (getline(file1, str))
    {
      std::istringstream iss(str);
      while (iss >> word)
      {
        //std::for_each(word.begin(), word.end(), [](unsigned char l) {return std::tolower(l); });
        std::transform(word.begin(), word.end(), word.begin(), [](unsigned char l) {return std::tolower(l); });
        if (letter_check(word, letter) && (k.find(word) == k.end()))
        {
          k.insert({ word, 1 });
        }
        else if (k.find(word) != k.end())
        {
          k.find(word)->second++;
        }
      }
    }

    std::for_each(k.begin(), k.end(), [](std::pair<std::string, int> vasilii)
      {if (vasilii.second == 1) { std::cout << vasilii.first << '\n'; }});
  }
}

auto letter_check = [](std::string word, char letter)
  {
    return *word.rbegin() == letter;
  };

void task1(std::ifstream& file1, bool (*letter_check)(std::string, char), char letter)
{
  std::vector<std::string> vec;
  std::set<std::string> s;
  std::string str;
  std::string word;
  int cntr;
  if (file1.is_open())
  {
    while (getline(file1, str))
    {
      std::stringstream iss(str);
      vec.push_back(str);
      while (iss >> word)
      {
        if (letter_check(word, letter))
        {
          s.insert(word);
        }
      }

    }

    bool found = true;

    for (const std::string& i : s)
    {
      for (int j = 0; j < vec.size() && found; ++j)
      {
        if (vec[j].find(i) != std::string::npos)
        {
          found = true;
        }
        else found = false;
      }
      if (found)
      {
        std::cout << i << '\n';
      }
      found = true;
    }
  }
}

auto substr_check = [](std::string substr, std::string word) 
  {
    return word.find(substr) == 0;
  };

void task1(std::ifstream& file1, bool(*substr_check)(std::string, std::string), std::string substr)
{
  std::multimap<std::string, int> k;
  std::string str, word;
  int str_count = 0;
  if (file1.is_open())
  {
    while (getline(file1, str))
    {
      std::istringstream iss(str);
      str_count++;
      while (iss >> word)
      {
        if (substr_check(substr, word))
        {
          k.insert({ word, str_count });
        }
      }
    }
    std::for_each(k.begin(), k.end(), [](std::pair<std::string, int> para) 
      {
        std::cout << para.first << "" ‚Äî —Å—Ç—Ä–æ–∫–∞ "" << para.second << '\n';
      });
  }

}"
kabnjrYL,this helps not get attacked snowybot,coinwalk,JavaScript,Tuesday 2nd of July 2024 03:05:06 AM CDT,"var nion = parseFloat(document.getElementById('pct_balance').value);
var smartz = nion;
var prefit = 0.0000001;
var winnerdinner = nion;
var tens = (prefit*10);
var sevens = (prefit*6.99);
var eights = (prefit*7.99);
var james = ((Math.floor(nion/tens))*tens);
var belance = nion;
var snowy = 0;
var beast = prefit;
var greedy =  nion;
 
 
 
function go(){
bolance = parseFloat(document.getElementById('pct_balance').value);
if (bolance<snow){
belance = belance-beast;
snow = parseFloat(bolance);
}
if (bolance>snow){
belance = belance+beast;
snow = parseFloat(bolance);
}
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=snowy)){
        beast = beast*2;
        snowy = parseFloat(belance);
}
if ((belance>=(james+tens))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
james = ((Math.floor(belance/tens))*tens);
}
if (belance>=(winnerdinner*24000)) {
console.log(""winner winner chicken dinner"");
    return;
}
var cat = ((belance-smartz).toFixed(8));
console.log(""profit"");
console.log(cat);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1);
}
 
go();"
3K3BgeiL,–ø–æ—Ç–æ–∫–∏,littlementalpain,C++,Tuesday 2nd of July 2024 03:05:02 AM CDT,"


#include <atomic>
#include <thread>
#include <fstream>
#include <iostream>
#include <future>
#include <concrt.h>
#include <mutex>
#include <Windows.h>

const int NTHREAD = 4;
const int CNT = 21;


// https://github.com/ProfessionalHeadbanger/LMP_EXAM


//5. –î–∞–Ω –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é.
//6. –î–∞–Ω –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.–ù–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º —Å—Ä–µ–¥–∏ —á–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//7. –î–∞–Ω –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.–ù–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//8. –î–∞–Ω –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ –∑–Ω–∞–∫–æ—á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ.

//Interlock + std::thread + 7
volatile long lock;
void count_max(int* arr, size_t left, size_t right, std::pair<int,int>& global_res) //global_res.1 - cnt, global_res.2 - max
{
	int cnt_max = 1;
	int max = arr[left];
	for (int i = left + 1; i < right; ++i) {
		if (arr[i] > max) {
			max = arr[i];
			cnt_max = 1;
		}
		else if (arr[i] == max) ++cnt_max;
	}
	if (global_res.second <= max) {
		while (_InterlockedCompareExchange(&lock, 1, 0) == 1)
			Sleep(0);
		//std::cout << left<<' ' << cnt_max << ' ' << max << '\n';
		if (global_res.second < max) {
			global_res.first = cnt_max;
			global_res.second = max;
		}
		else if (global_res.second == max)
			global_res.first += cnt_max;
		_InterlockedCompareExchange(&lock, 0, 1);
	}
}

int task_4_1(int* arr) {
	std::thread threads[NTHREAD - 1];
	size_t block = CNT / NTHREAD;
	std::pair<int, int> global_res;
	for (int i = 0; i < NTHREAD - 1; ++i) {
		threads[i] = std::thread(count_max, arr, i * block, (i + 1) * block, std::ref(global_res));
	}
	count_max(arr, (NTHREAD - 1) * block, CNT, global_res);
	for (int i = 0; i < NTHREAD - 1; ++i) {
		threads[i].join();
	}
	return global_res.first;
}
//-----------------------------------
//atomic + WinAPI + 8
struct Informs {
	int* arr;
	size_t left;
	size_t right;
	bool& res;
	Informs(bool& result) : res(result) {};
};

std::atomic_flag aflag = ATOMIC_FLAG_INIT;

unsigned __stdcall check_signs(void* args) {
	Informs* info = (Informs*)args;
	bool res=true;
	for (size_t i = info->left + 1; i < info->right; ++i) {
		if (info->arr[i - 1] / abs(info->arr[i - 1]) == (info->arr[i]) / abs(info->arr[i])) res = false;
	}
	if (info->res != res && res == false) {
		while (aflag.test_and_set()) Sleep(0);
		if (info->res != res) info->res = res;
		aflag.clear();
	}
	if (info->right != CNT) _endthreadex(0);
	return 0;
}

bool task_4_2(int* arr) {
	HANDLE t[NTHREAD - 1];
	size_t block = CNT / NTHREAD;
	bool global_res = true;
	Informs* informs[NTHREAD];
	for (int i = 0; i < NTHREAD; ++i) { //–ó–î–ï–°–¨ –°–¢–†–£–ö–¢–£–†–´ INFORMS –ó–ê–ü–ò–°–ê–¢–¨ –ù–ê–î–û –í–°–ï
		informs[i] = new Informs(global_res);
		informs[i]->arr = arr;
		informs[i]->left = i * block;
		informs[i]->right = i == NTHREAD - 1 ? CNT : (i + 1) * block;
		if (i != NTHREAD - 1)
			t[i] = (HANDLE)_beginthreadex(nullptr, 0, &check_signs, &(*informs[i]), 0, nullptr);
	}
	check_signs(&(*informs[NTHREAD - 1]));
	WaitForMultipleObjects(NTHREAD-1, t, true, INFINITE);
	return global_res;
}

//-----------------------------------
//–°–æ–±—ã—Ç–∏–µ + future + 6 
//6. –î–∞–Ω –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.–ù–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º —Å—Ä–µ–¥–∏ —á–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

HANDLE hEvent;
HANDLE hMut;
//CRITICAL_SECTION cs;
//concurrency::critical_section cs;
//concurrency::event e;
//std::mutex mut;
//HANDLE hSemafor;

bool find_min(int* arr, size_t left, size_t right, int& global_res) {
	int min = 1;
	for (int i = left + 1; i < right; ++i) {
		if (arr[i] % 2 == 0) {
			if (min % 2 != 0 || arr[i]<min) min = arr[i];
		}
	}
	if (min < global_res || global_res%2!=0) {
		//WaitForSingleObject(hEvent, INFINITE);
		//EnterCriticalSection(&cs);
		//std::lock_guard<concurrency::critical_section> guard(cs);
		//std::lock_guard<std::mutex> guard(mut);
		//e.wait(INFINITE);
		//e.reset();
		//WaitForSingleObject(hSemafor, INFINITE);
		WaitForSingleObject(hMut, INFINITE);
		if (min < global_res || global_res%2!=0) global_res = min;
		ReleaseMutex(hMut);
		//ReleaseSemaphore(hSemafor, 1, NULL);
		//e.set();
		//LeaveCriticalSection(&cs);
		//SetEvent(hEvent);
	}
	return true;
}

int task_4_3(int* arr) {
	//hEvent = CreateEvent(NULL, FALSE, TRUE, NULL);
	//InitializeCriticalSection(&cs);
	//e.set();
	//hSemafor = CreateSemaphore(NULL, 2, 2, NULL);
	hMut = CreateMutex(NULL, FALSE, NULL);
	std::future<bool> t[NTHREAD - 1];
	size_t block = CNT / NTHREAD;
	int global_res=3;
	bool main_res;
	for (size_t i = 0; i < NTHREAD - 1; ++i) {
		t[i] = std::async(std::launch::async, find_min, arr, i * block, (i + 1) * block, std::ref(global_res));
	}
	main_res = find_min(arr, (NTHREAD - 1) * block, CNT, global_res);
	for (int i = 0; i < NTHREAD - 1; ++i) {
		main_res*= t[i].get();
	}
	if (main_res) return global_res;
}


void init_array(int*& arr) {
	arr = new int[CNT];
	int sign = -1;
	for (int i = 0; i < CNT; ++i) {
		arr[i] = rand() % 8;
		if (arr[i] == 0) ++arr[i];
		arr[i] *= sign;
		sign *= -1;
		std::cout << arr[i] << ' ';
	}
	std::cout << '\n';
}

int main() {
	int* arr;
	init_array(arr);
	std::cout << task_4_3(arr)<<'\n';
	return 0;
}"
ytTDfMeG,domino,littlementalpain,C++,Tuesday 2nd of July 2024 03:02:23 AM CDT,"#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_set>
#include <utility>
#include <string>

using namespace std;

void backtrack(vector<pair<int, int>>& dominoes, vector<pair<int, int>>& best, vector<pair<int, int>>& current, unordered_set<string>& visited) {
    if (current.size() > best.size()) {
        best = current;
    }

    string state;
    for (const auto& d : current) {
        state += to_string(d.first) + "","" + to_string(d.second) + "";"";
    }

    if (visited.find(state) != visited.end()) {
        return;
    }

    visited.insert(state);

    for (size_t i = 0; i < dominoes.size(); ++i) {
        pair<int, int> domino = dominoes[i];
        if (current.empty() || current.back().second == domino.first) {
            current.push_back(domino);
            dominoes.erase(dominoes.begin() + i);
            backtrack(dominoes, best, current, visited);
            dominoes.insert(dominoes.begin() + i, domino);
            current.pop_back();
        }
        if (current.empty() || current.front().first == domino.second) {
            current.insert(current.begin(), domino);
            dominoes.erase(dominoes.begin() + i);
            backtrack(dominoes, best, current, visited);
            dominoes.insert(dominoes.begin() + i, domino);
            current.erase(current.begin());
        }
    }
}

int main() {
    ifstream file(""Domino_3.txt"");
    vector<pair<int, int>> dominoes;
    while (!file.eof()) {
        pair<int, int> tmp;
        file >> tmp.first >> tmp.second;
        dominoes.push_back(tmp);
    }

    vector<pair<int, int>> best, current;
    unordered_set<string> visited;
    backtrack(dominoes, best, current, visited);

    cout << ""Best chain: "" << endl;
    for (const auto& x : best) {
        cout << x.first << ' ' << x.second << endl;
    }

    return 0;
}"
03HRqisR,DS18B20 - 7seg,himka153,C++,Tuesday 2nd of July 2024 02:44:59 AM CDT,"#define PIN 6

int celsium1;
int celsium2;


byte data[9];
int leds[4] = { 2, 9, 3, 7 };
int k = 10;
int i = 0;
char table[14] = { 0b00000011, 0b10011111, 0b00100101, 0b00001101, 0b10011001, 0b01001001, 0b01000001, 0b00011111, 0b00000001, 0b00001001, 0b10000000, 0b01000000, 0b00100000, 0b00010000 };

void SHRSendBit(int bit) {
  if (bit) {
    PORTB |= (1 << 0);
    PORTD |= (1 << 7);
    PORTB &= ~(1 << 0);
    PORTD &= ~(1 << 7);
  } else {
    PORTB &= ~(1 << 0);
    PORTD |= (1 << 7);
    PORTB &= ~(1 << 0);
    PORTD &= ~(1 << 7);
  }
}

void SHRSendByte(byte data) {
  for (int i = 0; i < 8; ++i)
    SHRSendBit((data & (1 << i)) >> i);
  //Serial.println(data,BIN);
}




bool reset() {
  DDRD |= (1 << PIN);
  PORTD &= ~(1 << PIN);
  delayMicroseconds(480);
  DDRD &= ~(1 << PIN);
  delayMicroseconds(60);
  bool presence = !PINC & (1 << PIN);
  delayMicroseconds(420);
  return presence;
}

void writeBit(bool bit) {
  DDRD |= (1 << PIN);
  PORTD &= ~(1 << PIN);
  if (bit) delayMicroseconds(10);
  else delayMicroseconds(60);
  DDRD &= ~(1 << PIN);
  if (bit) delayMicroseconds(55);
  else delayMicroseconds(5);
}


bool readBit() {
  DDRD |= (1 << PIN);
  PORTD &= ~(1 << PIN);
  delayMicroseconds(2);
  DDRD &= ~(1 << PIN);
  delayMicroseconds(10);
  bool bit = digitalRead(PIN);
  delayMicroseconds(50);
  return bit;
}

void writeByte(byte data) {
  for (int i = 0; i < 8; i++) {
    writeBit(data & (1 << i));
  }
}

byte readByte() {
  byte data = 0;
  for (int i = 0; i < 8; i++) {
    data |= (readBit() << i);
  }
  return data;
}







void setup() {
  // put your setup code here, to run once:
  DDRB |= (1 << 0);  //
  DDRD |= (1 << 7);
  DDRD |= (1 << 4);
  Serial.begin(9600);
  SREG |= (1 << 7);
  ////////////////////////////////////////////////////////////–¢–ê–ô–ú–ï–† DS18B20///////////////////////////////////////////////////////////
  TCCR1A &= ~(1 << 0);
  TCCR1A &= ~(1 << 1);
  TCCR1A &= ~(1 << 4);
  TCCR1A &= ~(1 << 5);
  TCCR1A &= ~(1 << 6);
  TCCR1A &= ~(1 << 7);

  TCCR1B &= ~(1 << 0);
  TCCR1B &= ~(1 << 1);
  TCCR1B |= (1 << 2);
  TCCR1B &= ~(1 << 3);
  TCCR1B &= ~(1 << 4);

  TCNT1 = 34286;

  TIMSK1 |= (1 << 0);
  TIMSK1 &= ~(1 << 1);
  TIMSK1 &= ~(1 << 2);
  ///////////////////////////////////////////////////////////–¢–ê–ô–ú–ï–† –ò–ù–î–ò–ö–ê–¢–û–†–û–í////////////////////////////////////////////////////////

  TCCR2A &= ~(1 << 0);
  TCCR2A &= ~(1 << 1);
  TCCR2A &= ~(1 << 4);
  TCCR2A &= ~(1 << 5);
  TCCR2A &= ~(1 << 6);
  TCCR2A &= ~(1 << 7);

  TCCR2B |= (1 << 0);
  TCCR2B |= (1 << 1);
  TCCR2B |= (1 << 2);
  TCCR2B &= ~(1 << 3);

  TCNT2 = 99;

  TIMSK2 |= (1 << 0);
  TIMSK2 &= ~(1 << 1);
  TIMSK2 &= ~(1 << 2);
}

void loop() {
  // put your main code here, to run repeatedly:
}


ISR(TIMER1_OVF_vect) {
  reset();
  writeByte(0xCC);
  writeByte(0x44);
  delay(750);
  reset();
  writeByte(0xCC);  //SKIP ROM
  writeByte(0xBE);  // Read Scratchpad
  for (int i = 0; i < 9; i++) {
    data[i] = readByte();
  }
  celsium2 = data[0] & 0x0F;
  celsium1 = (data[1] << 4) | (data[0] >> 4);

  leds[0] = celsium1 / 10;
  leds[1] = celsium1 % 10;
  leds[2] = celsium2 / 10;
  leds[3] = celsium2 % 10;
  
  
}

ISR(TIMER2_OVF_vect) {
  //if(i=1) SHRSendByte(table[leds[i]]&0b11111110);//—á–∏—Å–ª–æ
  SHRSendByte(table[leds[0]]);  //—á–∏—Å–ª–æ
  SHRSendByte(table[10]);       //–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  PORTD |= (1 << 4);
  PORTD &= ~(1 << 4);
  delay(200);
  SHRSendByte(table[leds[1]] & 0b11111110);  //—á–∏—Å–ª–æ
  SHRSendByte(table[11]);                    //–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  PORTD |= (1 << 4);
  PORTD &= ~(1 << 4);
  delay(200);
  SHRSendByte(table[leds[2]]);  //—á–∏—Å–ª–æ
  SHRSendByte(table[12]);       //–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  PORTD |= (1 << 4);
  PORTD &= ~(1 << 4);
  delay(200);
  SHRSendByte(table[leds[3]]);  //—á–∏—Å–ª–æ
  SHRSendByte(table[13]);       //–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  PORTD |= (1 << 4);
  PORTD &= ~(1 << 4);
  delay(200);
}
"
KAnX0SjX,HULIO,ebleach7,TypeScript,Tuesday 2nd of July 2024 02:25:59 AM CDT,"import { useCallback, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { AntForm } from '@src/features/AntForm';
import { AntFormSelectProps } from '@src/features/AntForm/fields';
import { LanguageQueryKey } from '@shared/components/LanguageSelect';
import { useQueryFetch } from '@shared/hooks/useQueryFetch';

const RouteExpeditedArea = ({ ...props }: AntFormSelectProps) => {
    const { t } = useTranslation(['translation']);
    const form = AntForm.useFormInstance();

    const stationFromId = AntForm.useWatch('stationFromId', form);
    const stationToId = AntForm.useWatch('stationToId', form);
    const routeTypeId = AntForm.useWatch('routeTypeId', form);
    const expeditionAreas = AntForm.useWatch('expeditionAreas', form);
    const [substitutedCountries, setSubstitutedCountries] = useState<
        { value: string; label: string; disabled: string; color: string }[]
    >([]);

    useQueryFetch<
        {
            value: string;
            label: string;
            disabled: string;
            color: string;
        }[]
    >(
        `Dictionaries/Get/Countries?StationId=${stationFromId}&StationId=${stationToId}`,
        {
            queryKey: [LanguageQueryKey, stationFromId, stationToId],
            enabled: !!stationFromId || !!stationToId,
            onSuccess: (data) => {
                if (!data.data && !Array.isArray(data.data)) return;

                setSubstitutedCountries(data.data);

                const newExpeditionAreas = data.data.map(
                    (country) => country.value,
                );

                const mapExpeditionAreas =
                    expeditionAreas === undefined
                        ? []
                        : expeditionAreas.map(
                              (
                                  item:
                                      | {
                                            value: string;
                                        }
                                      | string,
                              ) =>
                                  typeof item === 'string' ? item : item.value,
                          );

                const updatedExpeditionAreas = Array.from(
                    new Set([...mapExpeditionAreas, ...newExpeditionAreas]),
                );

                form.setFieldsValue({
                    expeditionAreas: updatedExpeditionAreas,
                });
            },
        },
    );

    const getLabel = useCallback(
        (value: string): string => {
            const findItem = substitutedCountries.find((item) => {
                return item.value === value;
            });

            if (findItem) return findItem.label;

            return value;
        },
        [substitutedCountries],
    );

    if (routeTypeId === 'e11d6969-e50e-48bf-afb9-d37e65e7eea6') return null;

    console.log('expeditionAreas', expeditionAreas);

    return (
        <AntForm.Select
            allowClear
            label={t('translation:expeditedArea')}
            mode='multiple'
            name='expeditionAreas'
            placeholder={t('translation:expeditedArea')}
            rules={[{ required: true }]}
            fieldProps={{
                labelRender: (value) => {
                    if (value.label) return value.label;

                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return getLabel(value.value as any);
                },
            }}
            query={{
                url: 'Dictionaries/Get/Countries',
                queryKey: [LanguageQueryKey],
            }}
            {...props}
        />
    );
};

export default RouteExpeditedArea;
"
sBkgv4QB,Untitled,coinwalk,JavaScript,Tuesday 2nd of July 2024 02:25:41 AM CDT,"I‚Äôve spent several years writing code testing and going through the work to provide a substantially shrunken robot which being able to make money only a little bit faster than investments via gambling dice of casinos




The target project is finally to achieve clear achievements. 
ten out of ten tries succeed.
done slowly with a base bet of balance divided by 1.44 million..
This is for making it ten times balance.
That means nine times pure profit.
.

previously done nine times different attempts of ten times the old balance as the new balance


I did make nine times out of nine times and believe in this

The robotic version of target stopping could take months and months

But can do twenty-four thousand times balance with it

Also would mean a lot of time wagered

I hope you try getting balance and testing.

Do not use this on Seuntjies bot without 14.4million divide is really at your own risk too

This bot in no way should be safe for tens of millions of bets done 

the bot is

https://pastebin.com/ahjGVzYF

This will not be guaranteed only use at own risk
"
ahjGVzYF,snowybot grandmaster,coinwalk,JavaScript,Tuesday 2nd of July 2024 02:24:15 AM CDT,"var nion = parseFloat(document.getElementById('pct_balance').value);
var smartz = nion;
var prefit = 0.0000001;
var winnerdinner = nion;
var tens = (prefit*10);
var sevens = (prefit*6.99);
var eights = (prefit*7.99);
var james = ((Math.floor(nion/tens))*tens);
var belance = nion;
var snowy = 0;
var beast = prefit;
var greedy =  nion;
 
 
 
function go(){
belance = parseFloat(document.getElementById('pct_balance').value);
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=snowy)){
        beast = beast*2;
        snowy = parseFloat(belance);
}
if ((belance>=(james+tens))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
james = ((Math.floor(belance/tens))*tens);
}
if (belance>=(winnerdinner*24000)) {
console.log(""winner winner chicken dinner"");
    return;
}
var cat = ((belance-smartz).toFixed(8));
console.log(""profit"");
console.log(cat);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1);
}
 
go();"
7wzje8aG,Untitled,csmit195,JSON,Tuesday 2nd of July 2024 01:00:34 AM CDT,"{
  ""recipes"": [
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 15
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 10
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Plastic"",
          ""quantity"": 15
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 15
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 5
        },
        {
          ""item"": ""Duct Tape"",
          ""quantity"": 2
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 10
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Plastic"",
          ""quantity"": 20
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 15
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 10
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 20
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 5
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Plastic"",
          ""quantity"": 30
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 5
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 5
        },
        {
          ""item"": ""Hydrochloric Acid"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Gun Powder"",
          ""quantity"": 10
        },
        {
          ""item"": ""Shotgun Shells"",
          ""quantity"": 10
        },
        {
          ""item"": ""Plastic"",
          ""quantity"": 10
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Gun Powder"",
          ""quantity"": 10
        },
        {
          ""item"": ""Empty Shells"",
          ""quantity"": 15
        },
        {
          ""item"": ""Plastic"",
          ""quantity"": 15
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Gun Powder"",
          ""quantity"": 15
        },
        {
          ""item"": ""Empty Shells"",
          ""quantity"": 20
        },
        {
          ""item"": ""Plastic"",
          ""quantity"": 15
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Plastic"",
          ""quantity"": 20
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 15
        },
        {
          ""item"": ""Cloth"",
          ""quantity"": 10
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 10
        },
        {
          ""item"": ""Duct Tape"",
          ""quantity"": 2
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Plastic"",
          ""quantity"": 30
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 20
        },
        {
          ""item"": ""Cloth"",
          ""quantity"": 15
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 10
        },
        {
          ""item"": ""Duct Tape"",
          ""quantity"": 2
        },
        {
          ""item"": ""Heavy Plate"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Cloth"",
          ""quantity"": 45
        },
        {
          ""item"": ""Plastic"",
          ""quantity"": 30
        },
        {
          ""item"": ""Leather"",
          ""quantity"": 20
        },
        {
          ""item"": ""Duct Tape"",
          ""quantity"": 10
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 20
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 10
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 20
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 20
        },
        {
          ""item"": ""Plastic"",
          ""quantity"": 10
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 20
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 20
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 40
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 5
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 20
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 10
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 5
        },
        {
          ""item"": ""Broken Torch"",
          ""quantity"": 2
        },
        {
          ""item"": ""Duct Tape"",
          ""quantity"": 1
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 20
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 30
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 10
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 20
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 10
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 10
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 20
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 5
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 20
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 10
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 5
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""XXXX Gold"",
          ""quantity"": 1
        },
        {
          ""item"": ""Cloth"",
          ""quantity"": 1
        },
        {
          ""item"": ""Lighter"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 25
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 10
        },
        {
          ""item"": ""Metal Spring"",
          ""quantity"": 1
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Brass"",
          ""quantity"": 35
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 10
        },
        {
          ""item"": ""Hydrochloric Acid"",
          ""quantity"": 1
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 30
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 20
        },
        {
          ""item"": ""Hydrochloric Acid"",
          ""quantity"": 1
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Lvl 25 Lumber"",
          ""quantity"": 5
        },
        {
          ""item"": ""Wood Plank"",
          ""quantity"": 5
        },
        {
          ""item"": ""Hydrochloric Acid"",
          ""quantity"": 1
        },
        {
          ""item"": ""Melee Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 30
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 10
        },
        {
          ""item"": ""Hydrochloric Acid"",
          ""quantity"": 1
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 30
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 20
        },
        {
          ""item"": ""Hydrochloric Acid"",
          ""quantity"": 2
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 30
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 15
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 20
        },
        {
          ""item"": ""Plastic"",
          ""quantity"": 20
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steelwwwwwwwits just coms"",
          ""quantity"": 50
        },
        {
          ""item"": ""Metal Scraps"",
          ""quantity"": 35
        },
        {
          ""item"": ""Hydrochloric Acid"",
          ""quantity"": 5
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Gun Barrel"",
          ""quantity"": 1
        },
        {
          ""item"": ""Metal Spring"",
          ""quantity"": 1
        },
        {
          ""item"": ""Firing Pin"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Frame"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Grip"",
          ""quantity"": 1
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Gun Barrel"",
          ""quantity"": 1
        },
        {
          ""item"": ""Metal Springs"",
          ""quantity"": 1
        },
        {
          ""item"": ""Firing Pin"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Frame"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Grip"",
          ""quantity"": 1
        },
        {
          ""item"": ""Tier 1 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Gun Barrel"",
          ""quantity"": 1
        },
        {
          ""item"": ""Metal Spring"",
          ""quantity"": 1
        },
        {
          ""item"": ""Firing Pin"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Frame"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Grip"",
          ""quantity"": 1
        },
        {
          ""item"": ""Metal Scraps"",
          ""quantity"": 25
        },
        {
          ""item"": ""Tier 1 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Gun Barrel"",
          ""quantity"": 1
        },
        {
          ""item"": ""Metal Spring"",
          ""quantity"": 1
        },
        {
          ""item"": ""Firing Pin"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Frame"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Grip"",
          ""quantity"": 1
        },
        {
          ""item"": ""Browning Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Gun Barrel"",
          ""quantity"": 1
        },
        {
          ""item"": ""Metal Spring"",
          ""quantity"": 1
        },
        {
          ""item"": ""Firing Pin"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Frame"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Grip"",
          ""quantity"": 1
        },
        {
          ""item"": ""Tier 1 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 35
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 25
        },
        {
          ""item"": ""Hydrochloric Acid"",
          ""quantity"": 1
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 45
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 15
        },
        {
          ""item"": ""Binoculars"",
          ""quantity"": 1
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 55
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 35
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 27
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 50
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 35
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 25
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 20
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 15
        },
        {
          ""item"": ""Broken Torch"",
          ""quantity"": 1
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 20
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 20
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 20
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Steel"",
          ""quantity"": 25
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 20
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 15
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 50
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 35
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 25
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Lvl 25 Lumber"",
          ""quantity"": 50
        },
        {
          ""item"": ""Plastic"",
          ""quantity"": 30
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 15
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 10
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 40
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 30
        },
        {
          ""item"": ""Binoculars"",
          ""quantity"": 1
        },
        {
          ""item"": ""Weapons Sheet"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 80
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 30
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 15
        },
        {
          ""item"": ""Tier 2 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 85
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 25
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 20
        },
        {
          ""item"": ""Tier 2 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 115
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 35
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 20
        },
        {
          ""item"": ""Pistol Grip"",
          ""quantity"": 1
        },
        {
          ""item"": ""Pistol Frame"",
          ""quantity"": 1
        },
        {
          ""item"": ""G18C Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 100
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 30
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 30
        },
        {
          ""item"": ""Tier 3 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 100
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 35
        },
        {
          ""item"": ""Tier 3 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 100
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 30
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 35
        },
        {
          ""item"": ""Pump Shotgun Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 100
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 50
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 40
        },
        {
          ""item"": ""Tier 3 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 100
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 60
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 45
        },
        {
          ""item"": ""Tier 3 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 100
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 30
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 10
        },
        {
          ""item"": ""Tier 3 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 100
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 30
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 25
        },
        {
          ""item"": ""Tier 3 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 100
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 75
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 35
        },
        {
          ""item"": ""Tier 3 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 100
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 30
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 25
        },
        {
          ""item"": ""Tier 3 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 100
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 50
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 10
        },
        {
          ""item"": ""Tier 3 Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Gun Powder"",
          ""quantity"": 200
        },
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 40
        },
        {
          ""item"": ""Rubber"",
          ""quantity"": 40
        },
        {
          ""item"": ""IED Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""Metal Scrap"",
          ""quantity"": 40
        },
        {
          ""item"": ""Gun Powder"",
          ""quantity"": 20
        },
        {
          ""item"": ""Steel"",
          ""quantity"": 6
        },
        {
          ""item"": ""IED Blueprint"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""5"",
          ""quantity"": 1
        },
        {
          ""item"": ""15"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""20"",
          ""quantity"": 1
        },
        {
          ""item"": ""2"",
          ""quantity"": 1
        },
        {
          ""item"": ""2"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""5"",
          ""quantity"": 1
        },
        {
          ""item"": ""2"",
          ""quantity"": 1
        },
        {
          ""item"": ""2"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""10"",
          ""quantity"": 1
        },
        {
          ""item"": ""10"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""2"",
          ""quantity"": 1
        },
        {
          ""item"": ""1"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""6"",
          ""quantity"": 1
        },
        {
          ""item"": ""1"",
          ""quantity"": 1
        }
      ]
    },
    {
      ""name"": ""1"",
      ""quantity"": 1,
      ""ingredients"": [
        {
          ""item"": ""200"",
          ""quantity"": 1
        },
        {
          ""item"": ""10"",
          ""quantity"": 1
        }
      ]
    }
  ]
}"
HC4LF6kG,make inline code to dropcap shadow,arie_cristianD,CSS,Monday 1st of July 2024 10:58:09 PM CDT,".entry-content .content-inner p > code {
    font-size: 82px;
    font-family: Lora, Georgia, serif;
    font-weight: bold;
    display: block;
    float: left;
    margin: .04em .2em 0 0;
    color: #212121;
    font-size: 4em;
    line-height: 1;
    text-shadow: 5px 5px #eee;
    padding : 0 ;
}"
Grw5HD6X,return and shipping,jaideep06,PHP,Monday 1st of July 2024 10:55:51 PM CDT,"add_filter( 'rank_math/json_ld', function( $data, $jsonld ) {
    if ( empty( $data['richSnippet'] ) || ! in_array( $data['richSnippet']['@type'], [ 'Product', 'ProductGroup' ] ) ) {
		return $data;
	}

	$data['shippingDetails'] = [
		'@context'     => 'https://schema.org/',
		'@type'        => 'OfferShippingDetails',
		'@id'          => '#shipping_policy',
		'deliveryTime' => [
			'@type'        => 'ShippingDeliveryTime',
			'handlingTime' => [
				'@type'    => 'QuantitativeValue',
				'minValue' => 0,
				'maxValue' => 1,
				'unitCode' => 'DAY',
			],
			'transitTime' => [
				'@type'    => 'QuantitativeValue',
				'minValue' => 1,
				'maxValue' => 3,
				'unitCode' => 'DAY'
			],
		],
		'shippingRate' => [
			'@type'    => 'MonetaryAmount',
			'value'    => 2000,
			'currency' => 'SEK',
		],
		'shippingDestination' => [
			'@type' => 'DefinedRegion',
			'addressCountry' => 'SE'
		]
	];
	$data['hasMerchantReturnPolicy'] = [
		'@context'     => 'https://schema.org/',
		'@type'        => 'MerchantReturnPolicy',
		'@id'          => '#merchant_policy',
		'applicableCountry' => 'SE',
		'returnPolicyCategory' => 'https://schema.org/MerchantReturnFiniteReturnWindow',
		'merchantReturnDays' => 14,
		'returnMethod' => 'https://schema.org/ReturnByMail',
		'returnFees' => 'https://schema.org/FreeReturn'
	];
	if ( 'Product' ===  $data['richSnippet']['@type'] ) {
		$data['richSnippet']['offers']['shippingDetails'] = [ '@id' => '#shipping_policy' ];
		$data['richSnippet']['offers']['hasMerchantReturnPolicy'] = ['@id' => '#merchant_policy'];
		return $data;
	}

	if ( empty( $data['richSnippet']['hasVariant'] ) ) {
		return $data;
	}

	foreach ( $data['richSnippet']['hasVariant'] as $key => $value ) {
		if ( empty( $value['offers'] ) ) {
			continue;
		}

		$data['richSnippet']['hasVariant'][ $key ]['offers']['shippingDetails'] = [ '@id' => '#shipping_policy' ];
		$data['richSnippet']['hasVariant'][ $key ]['offers']['hasMerchantReturnPolicy'] = [ '@id' => '#merchant_policy' ];
	}

	return $data;

}, 99, 2);"
sgQS1Qf1,FFMPEG-TOOLS.pyw,Najeebsk,Python,Monday 1st of July 2024 10:36:54 PM CDT,"import tkinter as tk
from tkinter import filedialog, messagebox
import subprocess
import os
import yt_dlp

class VideoToolApp:
    def __init__(self, root):
        self.root = root
        self.root.title(""Najeeb Advanced Video Tool with FFmpeg"")
        self.root.geometry(""620x460"")
        self.root.configure(bg='#4a4a4a')

        # Video File Path
        self.video_path = tk.StringVar()
        tk.Label(root, text=""Video File Path:"", bg='#1d1f21', fg='white').grid(row=0, column=0, padx=10, pady=10, sticky='e')
        tk.Entry(root, textvariable=self.video_path, width=50, bg='#282a2e', fg='white').grid(row=0, column=1, padx=10, pady=10)
        tk.Button(root, text=""Browse"", command=self.browse_file, bg='#373b41', fg='white').grid(row=0, column=2, padx=10, pady=10)

        # YouTube and Other URLs
        self.url = tk.StringVar()
        tk.Label(root, text=""Video URL:"", bg='#1d1f21', fg='white').grid(row=1, column=0, padx=10, pady=10, sticky='e')
        tk.Entry(root, textvariable=self.url, width=50, bg='#282a2e', fg='white').grid(row=1, column=1, padx=10, pady=10)
        tk.Button(root, text=""Download"", command=self.download_video, bg='#373b41', fg='white').grid(row=1, column=2, padx=10, pady=10)

        # IPTV URL
        self.iptv_url = tk.StringVar()
        tk.Label(root, text=""IPTV URL:"", bg='#1d1f21', fg='white').grid(row=2, column=0, padx=10, pady=10, sticky='e')
        tk.Entry(root, textvariable=self.iptv_url, width=50, bg='#282a2e', fg='white').grid(row=2, column=1, padx=10, pady=10)
        tk.Button(root, text=""Capture"", command=self.capture_iptv, bg='#373b41', fg='white').grid(row=2, column=2, padx=10, pady=10)

        # Start and End Time
        self.start_time = tk.StringVar(value=""00:00:00"")
        self.end_time = tk.StringVar(value=""00:00:00"")
        tk.Label(root, text=""Start Time (HH:MM:SS):"", bg='#1d1f21', fg='white').grid(row=3, column=0, padx=10, pady=10, sticky='e')
        tk.Entry(root, textvariable=self.start_time, width=20, bg='#282a2e', fg='white').grid(row=3, column=1, padx=10, pady=10, sticky='w')
        tk.Label(root, text=""End Time (HH:MM:SS):"", bg='#1d1f21', fg='white').grid(row=4, column=0, padx=10, pady=10, sticky='e')
        tk.Entry(root, textvariable=self.end_time, width=20, bg='#282a2e', fg='white').grid(row=4, column=1, padx=10, pady=10, sticky='w')

        # Output File Path
        self.output_path = tk.StringVar()
        tk.Label(root, text=""Output File Path:"", bg='#1d1f21', fg='white').grid(row=5, column=0, padx=10, pady=10, sticky='e')
        tk.Entry(root, textvariable=self.output_path, width=50, bg='#282a2e', fg='white').grid(row=5, column=1, padx=10, pady=10)
        tk.Button(root, text=""Save As"", command=self.save_as_file, bg='#373b41', fg='white').grid(row=5, column=2, padx=10, pady=10)

        # Frame Interval for Image Extraction
        self.frame_interval = tk.StringVar()
        tk.Label(root, text=""Frame Interval (seconds):"", bg='#1d1f21', fg='white').grid(row=6, column=0, padx=10, pady=10, sticky='e')
        tk.Entry(root, textvariable=self.frame_interval, width=20, bg='#282a2e', fg='white').grid(row=6, column=1, padx=10, pady=10, sticky='w')

        # Buttons for operations
        tk.Button(root, text=""Cut Video"", command=self.cut_video, bg='#cc0066', fg='white').grid(row=7, column=0, padx=10, pady=20)
        tk.Button(root, text=""Merge Videos"", command=self.merge_videos, bg='#4c9900', fg='white').grid(row=7, column=1, padx=10, pady=20)
        tk.Button(root, text=""Convert Video"", command=self.convert_video, bg='#cc6600', fg='white').grid(row=7, column=2, padx=10, pady=20)
        tk.Button(root, text=""Extract Pictures"", command=self.extract_pictures, bg='#660000', fg='white').grid(row=6, column=2, padx=10, pady=20)

        # Desktop Recorder Button
        tk.Button(root, text=""Desktop Recorder"", command=self.desktop_recorder, bg='#0066cc', fg='white').grid(row=4, column=2, padx=10, pady=20)

    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[(""Video files"", ""*.*"")])
        if file_path:
            self.video_path.set(file_path)

    def save_as_file(self):
        file_path = filedialog.asksaveasfilename(defaultextension="".mp4"", filetypes=[(""All files"", ""*.*"")])
        if file_path:
            self.output_path.set(file_path)

    def download_video(self):
        url = self.url.get()
        start_time = self.start_time.get()
        end_time = self.end_time.get()
        if not url:
            messagebox.showerror(""Error"", ""Video URL must be provided"")
            return
        try:
            ydl_opts = {}
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                download_path = filedialog.asksaveasfilename(defaultextension="".mp4"", initialfile=info.get('title', 'video'), filetypes=[(""All files"", ""*.*"")])
                if download_path:
                    ydl_opts = {'outtmpl': download_path}
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        ydl.download([url])
                    messagebox.showinfo(""Success"", ""Video downloaded successfully"")
                    self.video_path.set(download_path)
                    if start_time != ""00:00:00"" or end_time != ""00:00:00"":
                        self.cut_video()
                        self.extract_pictures()
        except Exception as e:
            messagebox.showerror(""Error"", f""Failed to download video: {str(e)}"")

    def capture_iptv(self):
        iptv_url = self.iptv_url.get()
        output_file = filedialog.asksaveasfilename(defaultextension="".mp4"", filetypes=[(""All files"", ""*.*"")])

        if not iptv_url or not output_file:
            messagebox.showerror(""Error"", ""IPTV URL and output file path must be provided"")
            return

        try:
            subprocess.run([""ffmpeg"", ""-i"", iptv_url, ""-c"", ""copy"", output_file], check=True)
            messagebox.showinfo(""Success"", ""IPTV stream captured successfully"")
            self.video_path.set(output_file)
        except subprocess.CalledProcessError as e:
            messagebox.showerror(""Error"", f""Failed to capture IPTV stream: {str(e)}"")

    def cut_video(self):
        input_file = self.video_path.get()
        start_time = self.start_time.get()
        end_time = self.end_time.get()
        output_file = self.output_path.get()

        if not input_file or not start_time or not end_time or not output_file:
            messagebox.showerror(""Error"", ""All fields must be filled"")
            return

        try:
            subprocess.run([""ffmpeg"", ""-i"", input_file, ""-ss"", start_time, ""-to"", end_time, ""-c"", ""copy"", output_file], check=True)
            messagebox.showinfo(""Success"", ""Video cut successfully"")
        except subprocess.CalledProcessError as e:
            messagebox.showerror(""Error"", f""Failed to cut video: {str(e)}"")

    def merge_videos(self):
        files = filedialog.askopenfilenames(filetypes=[(""Video files"", ""*.*"")])
        if not files:
            return

        output_file = filedialog.asksaveasfilename(defaultextension="".mp4"", filetypes=[(""All files"", ""*.*"")])
        if not output_file:
            return

        with open('file_list.txt', 'w') as file_list:
            for file in files:
                file_list.write(f""file '{file}'\n"")

        try:
            subprocess.run([""ffmpeg"", ""-f"", ""concat"", ""-safe"", ""0"", ""-i"", ""file_list.txt"", ""-c"", ""copy"", output_file], check=True)
            os.remove('file_list.txt')
            messagebox.showinfo(""Success"", ""Videos merged successfully"")
        except subprocess.CalledProcessError as e:
            os.remove('file_list.txt')
            messagebox.showerror(""Error"", f""Failed to merge videos: {str(e)}"")

    def convert_video(self):
        input_file = self.video_path.get()
        output_file = self.output_path.get()

        if not input_file or not output_file:
            messagebox.showerror(""Error"", ""Input and Output paths must be filled"")
            return

        try:
            subprocess.run([""ffmpeg"", ""-i"", input_file, output_file], check=True)
            messagebox.showinfo(""Success"", ""Video converted successfully"")
        except subprocess.CalledProcessError as e:
            messagebox.showerror(""Error"", f""Failed to convert video: {str(e)}"")

    def extract_pictures(self):
        input_file = self.video_path.get()
        output_dir = filedialog.askdirectory()
        frame_interval = self.frame_interval.get()

        if not input_file or not output_dir or not frame_interval:
            messagebox.showerror(""Error"", ""Video file, output directory, and frame interval must be provided"")
            return

        try:
            subprocess.run([""ffmpeg"", ""-i"", input_file, ""-vf"", f""fps=1/{frame_interval}"", f""{output_dir}/frame%04d.png""], check=True)
            messagebox.showinfo(""Success"", ""Pictures extracted successfully"")
        except subprocess.CalledProcessError as e:
            messagebox.showerror(""Error"", f""Failed to extract pictures: {str(e)}"")

    def desktop_recorder(self):
        output_file = filedialog.asksaveasfilename(defaultextension="".mp4"", filetypes=[(""All files"", ""*.*"")])
        if not output_file:
            messagebox.showerror(""Error"", ""Output file path must be provided"")
            return

        try:
            messagebox.showinfo(""Info"", ""Press OK to start recording. To stop recording, close the terminal window that opens."")
            subprocess.run([""ffmpeg"", ""-f"", ""gdigrab"", ""-i"", ""desktop"", output_file], check=True)
            messagebox.showinfo(""Success"", ""Desktop recording completed successfully"")
        except subprocess.CalledProcessError as e:
            messagebox.showerror(""Error"", f""Failed to record desktop: {str(e)}"")

if __name__ == ""__main__"":
    root = tk.Tk()
    app = VideoToolApp(root)
    root.mainloop()
"
wMa5gtZ5,fixmycode-1,7f,Python,Monday 1st of July 2024 09:10:16 PM CDT,"#Create campname procedure to print the camp name
def holiday_camp ():
    print(""Tane's School Holiday Camp"")

#Print the camp name at the start
holiday_camp()

camp_activities = [""Cultural immersion - Easy - $800 - 5 days"",
                   ""Kayaking and pancakes - Moderate - $400 - 3 days"",
                   ""Mountain biking - Difficult - $900 - 4 days""]

activity_number = 0
while activity_number < 3 :
    print(activity_number, camp_activities[activity_number])
    activity_number = activity_number + 1

#Ask name and make sure it is not left blank
name = """"
while name == """":
    name = input(""What is your name? "")
    if name == """":
        print(""Please enter your name - You cannot leave it blank."")
        print("""")

#Ask age and make sure it is not older than a camper can be
age = 99
while age < 5 or age > 17 :
    if age != 99:
        print("""")
        print(""Your age must be between 5 and 17 to attend the camp. Please enter a valid age"")
    age = int(input(""How old are you? ""))
    
#Check if age is between 12 and 16 to ask leader question
if age > 12 and age < 16:
    leader_question = input(""You are eligible to be the camp leader. Do you want to be the camp leader? "").lower()
    if leader_question == ""yes"" or leader_question == ""y"":
        print(""You are now the camp leader."")
    elif leader_question == ""no"" or leader_question == ""n"":
        print(""Someone else will be chosen to be the camp leader."")
    else:
        print(""Sorry, i was looking for a yes/y or no/n answer."")


"
ty92z2Mb,CoalRefueler,BananaSplit40404,Lua,Monday 1st of July 2024 08:21:34 PM CDT,"function cleanInventory()
    for i = 1, 16 do
        turtle.select(i)
        local num = turtle.getItemCount(i)
        turtle.drop(num)
    end
end

function getCoalEssence()
    for i = 1, 11 do
        if i == 4 or i==6 or i==8 then
            turtle.select(i)
        else
            turtle.select(i)
            turtle.suckUp(5)
        end
    end
end

function dropCoal()
    turtle.select(1)
    turtle.dropDown(60)
end

function craftCoal()
    cleanInventory()
    getCoalEssence()
    turtle.select(1)
    turtle.craft(all)
    dropCoal()
end

while true do
    craftCoal()
    os.sleep(600)
end"
TXkfguFC,"Roe2Js :: ""canvasCursor.js""",jargon,JavaScript,Monday 1st of July 2024 07:32:02 PM CDT,"
window.onmousemove = e => {
	
	canvasViewCursor ( { x: e.pageX, y: e.pageY } );

}

window.onclick = e => {
	
	canvasViewCursor ( { x: e.pageX, y: e.pageY } );
	
	[ cx, cy ] = [ cx + viewCursor.hover.x, cy + viewCursor.hover.y ];
}

function canvasViewCursor ( coords ) {
	
	canvasCursor.x = coords.x;
	canvasCursor.y = coords.y;
		
	var viewRangeMinX = gutterW;
	var viewRangeMinY = gutterH;
	
	var viewRangeMaxX = gutterW + (viewConstraints.viewMaxX - viewConstraints.viewMinX + 1 ) * tileW;
	
	var viewRangeMaxY = gutterH + (viewConstraints.viewMaxY - viewConstraints.viewMinY + 1 ) * tileH;
	
	if (
	
	(canvasCursor.x > viewRangeMinX)
	&& 
	
	(canvasCursor.x < viewRangeMaxX)
	&& 

	(canvasCursor.y > viewRangeMinY)
	&& 
		
	(canvasCursor.y < viewRangeMaxY)
	
	)
	{	
		x = canvasCursor.x;
		y = canvasCursor.y;

		x -= gutterW;
		y -= gutterH;

		x /= tileW;
		y /= tileH;

		x = Math.round(x);
		y = Math.round(y);
		
		x += viewConstraints.viewMinX;
		y += viewConstraints.viewMinY;

	}else{
		x = 0;
		y = 0;
	}
	if (oobView([x,y]) !== true){
		[x,y] = oobView([x,y]);
	}
	
	[ viewCursor.hover.x, viewCursor.hover.y ] =
		[ x, y ];
	
	console.log({x: x, y: y});
	return;
}
"
67wMcR0Z,2024-07-01_stats.json,rdp_snitch,JSON,Monday 1st of July 2024 07:18:07 PM CDT,"{
  ""ip"": {
    ""213.109.202.252"": 24,
    ""88.214.25.63"": 12,
    ""164.92.104.215"": 3,
    ""43.134.186.29"": 21,
    ""104.248.154.46"": 6,
    ""194.165.16.10"": 6,
    ""91.238.181.22"": 12,
    ""147.185.132.210"": 9,
    ""64.124.50.139"": 6,
    ""149.34.246.34"": 6,
    ""223.166.31.100"": 3,
    ""212.70.149.146"": 9,
    ""94.232.45.147"": 3,
    ""118.71.209.53"": 3,
    ""45.129.14.224"": 9,
    ""71.6.134.230"": 30,
    ""142.4.218.114"": 3,
    ""167.94.146.48"": 3,
    ""80.66.66.250"": 6,
    ""205.210.31.73"": 9,
    ""47.250.154.118"": 3,
    ""43.163.212.221"": 3,
    ""172.232.116.115"": 3,
    ""194.165.16.72"": 6,
    ""194.165.16.11"": 6,
    ""135.26.109.26"": 3,
    ""62.215.34.181"": 3,
    ""205.210.31.203"": 9,
    ""103.85.24.222"": 3,
    ""206.168.34.119"": 3,
    ""87.251.75.64"": 3,
    ""47.238.192.22"": 9,
    ""91.92.250.220"": 3,
    ""117.89.85.153"": 9,
    ""185.170.144.3"": 3,
    ""205.210.31.77"": 9
  },
  ""asn"": {
    ""AS208312"": 24,
    ""AS29551"": 12,
    ""AS14061"": 9,
    ""AS132203"": 24,
    ""AS48721"": 18,
    ""AS49434"": 12,
    ""AS396982"": 36,
    ""AS6461"": 6,
    ""AS212238"": 6,
    ""AS17621"": 3,
    ""AS204428"": 9,
    ""AS212482"": 3,
    ""AS18403"": 3,
    ""AS47890"": 9,
    ""AS10439"": 30,
    ""AS16276"": 3,
    ""AS398705"": 3,
    ""AS51765"": 6,
    ""AS45102"": 12,
    ""AS63949"": 3,
    ""AS6300"": 3,
    ""AS21050"": 3,
    ""AS134835"": 3,
    ""AS398324"": 3,
    ""AS208091"": 3,
    ""AS394711"": 3,
    ""AS134756"": 9,
    ""AS197414"": 3
  },
  ""isp"": {
    ""Red Byte LLC"": 24,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""DigitalOcean, LLC"": 9,
    ""Aceville Pte.ltd"": 21,
    ""Flyservers S.A."": 18,
    ""Datacenter location PAR1 France"": 12,
    ""Google LLC"": 36,
    ""Zayo Bandwidth"": 6,
    ""Datacamp Limited"": 6,
    ""China Unicom Shanghai Province Network"": 3,
    ""SS-Net"": 9,
    ""Xhost Internet Solutions LP"": 9,
    ""fpt"": 3,
    ""Unmanaged LTD"": 9,
    ""CariNet, Inc."": 30,
    ""OVH SAS"": 3,
    ""Censys, Inc."": 6,
    ""Oy Crea Nova Hosting Solution Ltd"": 6,
    ""Alibaba (US) Technology Co., Ltd."": 12,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Akamai Technologies, Inc."": 3,
    ""Consolidated Communications, Inc."": 3,
    ""Fast Telecommunications Company W.L.L."": 3,
    ""Starry Network Limited"": 3,
    ""Limenet"": 3,
    ""China Telecom"": 9
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 24,
    ""ThinkTech Technology Industrial CO. Limited"": 24,
    ""DigitalOcean, LLC"": 9,
    ""Unknown"": 27,
    ""Flyservers S.A"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Microsoft Corporation"": 6,
    ""Datacamp Limited"": 6,
    ""4Media Ltd"": 9,
    ""Dmitriy Panchenko"": 3,
    ""QUARANtINE"": 9,
    ""CariNet, Inc."": 30,
    ""OVH Hosting, Inc."": 3,
    ""Censys, Inc."": 3,
    ""Xhost Internet Solutions"": 9,
    ""Alibaba.com LLC"": 12,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 3,
    ""Akamai Technologies, Inc."": 3,
    ""Consolidated Communications, Inc."": 3,
    ""Fasttelco"": 3,
    ""Hongkong Wen Jing Network Limited"": 3,
    ""Censys Inc"": 3,
    ""Limenet"": 3,
    ""Chinanet JS"": 9,
    ""Xhostis"": 3
  },
  ""regionName"": {
    ""Moscow"": 24,
    ""Hesse"": 21,
    ""California"": 39,
    ""North West"": 21,
    ""Central Singapore"": 6,
    ""Kaunas"": 18,
    ""\u00cele-de-France"": 12,
    ""Virginia"": 6,
    ""Shanghai"": 3,
    ""Sofia-Capital"": 9,
    ""Perm Krai"": 3,
    ""Ho Chi Minh"": 3,
    ""England"": 9,
    ""Nevada"": 30,
    ""Quebec"": 3,
    ""Uusimaa"": 6,
    ""Kuala Lumpur"": 3,
    ""Tokyo"": 3,
    ""Tamil Nadu"": 3,
    ""Texas"": 3,
    ""Hawalli"": 3,
    ""Yau Tsim Mong"": 3,
    ""Illinois"": 3,
    ""North Holland"": 9,
    ""Kowloon"": 9,
    ""Jiangsu"": 9
  },
  ""country"": {
    ""Russia"": 27,
    ""Germany"": 21,
    ""United States"": 81,
    ""Singapore"": 27,
    ""Lithuania"": 18,
    ""France"": 12,
    ""China"": 12,
    ""Bulgaria"": 9,
    ""Vietnam"": 3,
    ""United Kingdom"": 9,
    ""Canada"": 3,
    ""Finland"": 6,
    ""Malaysia"": 3,
    ""Japan"": 3,
    ""India"": 3,
    ""Kuwait"": 3,
    ""Hong Kong"": 12,
    ""The Netherlands"": 9
  },
  ""account"": {
    ""Test"": 72,
    ""hello"": 60,
    ""xDrCvONIk"": 3,
    ""ncwfZA"": 3,
    ""iWcssl"": 3,
    ""(empty)"": 12,
    ""Domain"": 21,
    ""Administr"": 24,
    ""eltons"": 15,
    ""administr"": 15,
    ""Administrator"": 3,
    ""LlkcZCSUV"": 3,
    ""LnsJJu"": 3,
    ""DePjFX"": 3,
    ""djYZYDTxo"": 3,
    ""PHokpo"": 3,
    ""LdhEHf"": 3,
    ""guest"": 3,
    ""JUMOfBSiE"": 3,
    ""sKgplF"": 3,
    ""ncXrRP"": 3
  },
  ""keyboard"": {
    ""Unknown"": 261
  },
  ""client_build"": {
    ""Unknown"": 261
  },
  ""client_name"": {
    ""Unknown"": 261
  },
  ""ip_type"": {
    ""proxy"": 27,
    ""hosting"": 156,
    ""Unknown"": 78
  }
}"
gpMHqs0m,2024-07-01_stats.json,rdp_snitch,JSON,Monday 1st of July 2024 07:16:14 PM CDT,"{
  ""ip"": {
    ""213.109.202.252"": 16,
    ""88.214.25.63"": 8,
    ""164.92.104.215"": 2,
    ""43.134.186.29"": 14,
    ""104.248.154.46"": 4,
    ""194.165.16.10"": 4,
    ""91.238.181.22"": 8,
    ""147.185.132.210"": 6,
    ""64.124.50.139"": 4,
    ""149.34.246.34"": 4,
    ""223.166.31.100"": 2,
    ""212.70.149.146"": 6,
    ""94.232.45.147"": 2,
    ""118.71.209.53"": 2,
    ""45.129.14.224"": 6,
    ""71.6.134.230"": 20,
    ""142.4.218.114"": 2,
    ""167.94.146.48"": 2,
    ""80.66.66.250"": 4,
    ""205.210.31.73"": 6,
    ""47.250.154.118"": 2,
    ""43.163.212.221"": 2,
    ""172.232.116.115"": 2,
    ""194.165.16.72"": 4,
    ""194.165.16.11"": 4,
    ""135.26.109.26"": 2,
    ""62.215.34.181"": 2,
    ""205.210.31.203"": 6,
    ""103.85.24.222"": 2,
    ""206.168.34.119"": 2,
    ""87.251.75.64"": 2,
    ""47.238.192.22"": 6,
    ""91.92.250.220"": 2,
    ""117.89.85.153"": 6,
    ""185.170.144.3"": 2,
    ""205.210.31.77"": 6
  },
  ""asn"": {
    ""AS208312"": 16,
    ""AS29551"": 8,
    ""AS14061"": 6,
    ""AS132203"": 16,
    ""AS48721"": 12,
    ""AS49434"": 8,
    ""AS396982"": 24,
    ""AS6461"": 4,
    ""AS212238"": 4,
    ""AS17621"": 2,
    ""AS204428"": 6,
    ""AS212482"": 2,
    ""AS18403"": 2,
    ""AS47890"": 6,
    ""AS10439"": 20,
    ""AS16276"": 2,
    ""AS398705"": 2,
    ""AS51765"": 4,
    ""AS45102"": 8,
    ""AS63949"": 2,
    ""AS6300"": 2,
    ""AS21050"": 2,
    ""AS134835"": 2,
    ""AS398324"": 2,
    ""AS208091"": 2,
    ""AS394711"": 2,
    ""AS134756"": 6,
    ""AS197414"": 2
  },
  ""isp"": {
    ""Red Byte LLC"": 16,
    ""NOC EMAIL: noc@one-host.net"": 8,
    ""DigitalOcean, LLC"": 6,
    ""Aceville Pte.ltd"": 14,
    ""Flyservers S.A."": 12,
    ""Datacenter location PAR1 France"": 8,
    ""Google LLC"": 24,
    ""Zayo Bandwidth"": 4,
    ""Datacamp Limited"": 4,
    ""China Unicom Shanghai Province Network"": 2,
    ""SS-Net"": 6,
    ""Xhost Internet Solutions LP"": 6,
    ""fpt"": 2,
    ""Unmanaged LTD"": 6,
    ""CariNet, Inc."": 20,
    ""OVH SAS"": 2,
    ""Censys, Inc."": 4,
    ""Oy Crea Nova Hosting Solution Ltd"": 4,
    ""Alibaba (US) Technology Co., Ltd."": 8,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""Consolidated Communications, Inc."": 2,
    ""Fast Telecommunications Company W.L.L."": 2,
    ""Starry Network Limited"": 2,
    ""Limenet"": 2,
    ""China Telecom"": 6
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 16,
    ""ThinkTech Technology Industrial CO. Limited"": 16,
    ""DigitalOcean, LLC"": 6,
    ""Unknown"": 18,
    ""Flyservers S.A"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""Microsoft Corporation"": 4,
    ""Datacamp Limited"": 4,
    ""4Media Ltd"": 6,
    ""Dmitriy Panchenko"": 2,
    ""QUARANtINE"": 6,
    ""CariNet, Inc."": 20,
    ""OVH Hosting, Inc."": 2,
    ""Censys, Inc."": 2,
    ""Xhost Internet Solutions"": 6,
    ""Alibaba.com LLC"": 8,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""Consolidated Communications, Inc."": 2,
    ""Fasttelco"": 2,
    ""Hongkong Wen Jing Network Limited"": 2,
    ""Censys Inc"": 2,
    ""Limenet"": 2,
    ""Chinanet JS"": 6,
    ""Xhostis"": 2
  },
  ""regionName"": {
    ""Moscow"": 16,
    ""Hesse"": 14,
    ""California"": 26,
    ""North West"": 14,
    ""Central Singapore"": 4,
    ""Kaunas"": 12,
    ""\u00cele-de-France"": 8,
    ""Virginia"": 4,
    ""Shanghai"": 2,
    ""Sofia-Capital"": 6,
    ""Perm Krai"": 2,
    ""Ho Chi Minh"": 2,
    ""England"": 6,
    ""Nevada"": 20,
    ""Quebec"": 2,
    ""Uusimaa"": 4,
    ""Kuala Lumpur"": 2,
    ""Tokyo"": 2,
    ""Tamil Nadu"": 2,
    ""Texas"": 2,
    ""Hawalli"": 2,
    ""Yau Tsim Mong"": 2,
    ""Illinois"": 2,
    ""North Holland"": 6,
    ""Kowloon"": 6,
    ""Jiangsu"": 6
  },
  ""country"": {
    ""Russia"": 18,
    ""Germany"": 14,
    ""United States"": 54,
    ""Singapore"": 18,
    ""Lithuania"": 12,
    ""France"": 8,
    ""China"": 8,
    ""Bulgaria"": 6,
    ""Vietnam"": 2,
    ""United Kingdom"": 6,
    ""Canada"": 2,
    ""Finland"": 4,
    ""Malaysia"": 2,
    ""Japan"": 2,
    ""India"": 2,
    ""Kuwait"": 2,
    ""Hong Kong"": 8,
    ""The Netherlands"": 6
  },
  ""account"": {
    ""Test"": 48,
    ""hello"": 40,
    ""xDrCvONIk"": 2,
    ""ncwfZA"": 2,
    ""iWcssl"": 2,
    ""(empty)"": 8,
    ""Domain"": 14,
    ""Administr"": 16,
    ""eltons"": 10,
    ""administr"": 10,
    ""Administrator"": 2,
    ""LlkcZCSUV"": 2,
    ""LnsJJu"": 2,
    ""DePjFX"": 2,
    ""djYZYDTxo"": 2,
    ""PHokpo"": 2,
    ""LdhEHf"": 2,
    ""guest"": 2,
    ""JUMOfBSiE"": 2,
    ""sKgplF"": 2,
    ""ncXrRP"": 2
  },
  ""keyboard"": {
    ""Unknown"": 174
  },
  ""client_build"": {
    ""Unknown"": 174
  },
  ""client_name"": {
    ""Unknown"": 174
  },
  ""ip_type"": {
    ""proxy"": 18,
    ""hosting"": 104,
    ""Unknown"": 52
  }
}"
HBsijN8c,2024-07-01_stats.json,rdp_snitch,JSON,Monday 1st of July 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""213.109.202.252"": 8,
    ""88.214.25.63"": 4,
    ""164.92.104.215"": 1,
    ""43.134.186.29"": 7,
    ""104.248.154.46"": 2,
    ""194.165.16.10"": 2,
    ""91.238.181.22"": 4,
    ""147.185.132.210"": 3,
    ""64.124.50.139"": 2,
    ""149.34.246.34"": 2,
    ""223.166.31.100"": 1,
    ""212.70.149.146"": 3,
    ""94.232.45.147"": 1,
    ""118.71.209.53"": 1,
    ""45.129.14.224"": 3,
    ""71.6.134.230"": 10,
    ""142.4.218.114"": 1,
    ""167.94.146.48"": 1,
    ""80.66.66.250"": 2,
    ""205.210.31.73"": 3,
    ""47.250.154.118"": 1,
    ""43.163.212.221"": 1,
    ""172.232.116.115"": 1,
    ""194.165.16.72"": 2,
    ""194.165.16.11"": 2,
    ""135.26.109.26"": 1,
    ""62.215.34.181"": 1,
    ""205.210.31.203"": 3,
    ""103.85.24.222"": 1,
    ""206.168.34.119"": 1,
    ""87.251.75.64"": 1,
    ""47.238.192.22"": 3,
    ""91.92.250.220"": 1,
    ""117.89.85.153"": 3,
    ""185.170.144.3"": 1,
    ""205.210.31.77"": 3
  },
  ""asn"": {
    ""AS208312"": 8,
    ""AS29551"": 4,
    ""AS14061"": 3,
    ""AS132203"": 8,
    ""AS48721"": 6,
    ""AS49434"": 4,
    ""AS396982"": 12,
    ""AS6461"": 2,
    ""AS212238"": 2,
    ""AS17621"": 1,
    ""AS204428"": 3,
    ""AS212482"": 1,
    ""AS18403"": 1,
    ""AS47890"": 3,
    ""AS10439"": 10,
    ""AS16276"": 1,
    ""AS398705"": 1,
    ""AS51765"": 2,
    ""AS45102"": 4,
    ""AS63949"": 1,
    ""AS6300"": 1,
    ""AS21050"": 1,
    ""AS134835"": 1,
    ""AS398324"": 1,
    ""AS208091"": 1,
    ""AS394711"": 1,
    ""AS134756"": 3,
    ""AS197414"": 1
  },
  ""isp"": {
    ""Red Byte LLC"": 8,
    ""NOC EMAIL: noc@one-host.net"": 4,
    ""DigitalOcean, LLC"": 3,
    ""Aceville Pte.ltd"": 7,
    ""Flyservers S.A."": 6,
    ""Datacenter location PAR1 France"": 4,
    ""Google LLC"": 12,
    ""Zayo Bandwidth"": 2,
    ""Datacamp Limited"": 2,
    ""China Unicom Shanghai Province Network"": 1,
    ""SS-Net"": 3,
    ""Xhost Internet Solutions LP"": 3,
    ""fpt"": 1,
    ""Unmanaged LTD"": 3,
    ""CariNet, Inc."": 10,
    ""OVH SAS"": 1,
    ""Censys, Inc."": 2,
    ""Oy Crea Nova Hosting Solution Ltd"": 2,
    ""Alibaba (US) Technology Co., Ltd."": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""Akamai Technologies, Inc."": 1,
    ""Consolidated Communications, Inc."": 1,
    ""Fast Telecommunications Company W.L.L."": 1,
    ""Starry Network Limited"": 1,
    ""Limenet"": 1,
    ""China Telecom"": 3
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 8,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""DigitalOcean, LLC"": 3,
    ""Unknown"": 9,
    ""Flyservers S.A"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""Microsoft Corporation"": 2,
    ""Datacamp Limited"": 2,
    ""4Media Ltd"": 3,
    ""Dmitriy Panchenko"": 1,
    ""QUARANtINE"": 3,
    ""CariNet, Inc."": 10,
    ""OVH Hosting, Inc."": 1,
    ""Censys, Inc."": 1,
    ""Xhost Internet Solutions"": 3,
    ""Alibaba.com LLC"": 4,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 1,
    ""Akamai Technologies, Inc."": 1,
    ""Consolidated Communications, Inc."": 1,
    ""Fasttelco"": 1,
    ""Hongkong Wen Jing Network Limited"": 1,
    ""Censys Inc"": 1,
    ""Limenet"": 1,
    ""Chinanet JS"": 3,
    ""Xhostis"": 1
  },
  ""regionName"": {
    ""Moscow"": 8,
    ""Hesse"": 7,
    ""California"": 13,
    ""North West"": 7,
    ""Central Singapore"": 2,
    ""Kaunas"": 6,
    ""\u00cele-de-France"": 4,
    ""Virginia"": 2,
    ""Shanghai"": 1,
    ""Sofia-Capital"": 3,
    ""Perm Krai"": 1,
    ""Ho Chi Minh"": 1,
    ""England"": 3,
    ""Nevada"": 10,
    ""Quebec"": 1,
    ""Uusimaa"": 2,
    ""Kuala Lumpur"": 1,
    ""Tokyo"": 1,
    ""Tamil Nadu"": 1,
    ""Texas"": 1,
    ""Hawalli"": 1,
    ""Yau Tsim Mong"": 1,
    ""Illinois"": 1,
    ""North Holland"": 3,
    ""Kowloon"": 3,
    ""Jiangsu"": 3
  },
  ""country"": {
    ""Russia"": 9,
    ""Germany"": 7,
    ""United States"": 27,
    ""Singapore"": 9,
    ""Lithuania"": 6,
    ""France"": 4,
    ""China"": 4,
    ""Bulgaria"": 3,
    ""Vietnam"": 1,
    ""United Kingdom"": 3,
    ""Canada"": 1,
    ""Finland"": 2,
    ""Malaysia"": 1,
    ""Japan"": 1,
    ""India"": 1,
    ""Kuwait"": 1,
    ""Hong Kong"": 4,
    ""The Netherlands"": 3
  },
  ""account"": {
    ""Test"": 24,
    ""hello"": 20,
    ""xDrCvONIk"": 1,
    ""ncwfZA"": 1,
    ""iWcssl"": 1,
    ""(empty)"": 4,
    ""Domain"": 7,
    ""Administr"": 8,
    ""eltons"": 5,
    ""administr"": 5,
    ""Administrator"": 1,
    ""LlkcZCSUV"": 1,
    ""LnsJJu"": 1,
    ""DePjFX"": 1,
    ""djYZYDTxo"": 1,
    ""PHokpo"": 1,
    ""LdhEHf"": 1,
    ""guest"": 1,
    ""JUMOfBSiE"": 1,
    ""sKgplF"": 1,
    ""ncXrRP"": 1
  },
  ""keyboard"": {
    ""Unknown"": 87
  },
  ""client_build"": {
    ""Unknown"": 87
  },
  ""client_name"": {
    ""Unknown"": 87
  },
  ""ip_type"": {
    ""proxy"": 9,
    ""hosting"": 52,
    ""Unknown"": 26
  }
}"
KAhmEt93,simpleMiningBot.lua,MicycleBichael,Lua,Monday 1st of July 2024 06:44:58 PM CDT,"args = {...}
count = 0
numWait = 1000
if args[1] ~= nil then
	numWait = args[1]
end

function emptyInv()
    selSlot = turtle.getSelectedSlot()
    for i=1,16,1
    do
        turtle.select(i)
        turtle.drop()
    end
    turtle.select(selSlot)
end

while(true)
do
    turtle.dig()
    count = count + 1
    if count > numWait then
        turtle.turnRight()
        turtle.turnRight()
        emptyInv()
        turtle.turnRight()
        turtle.turnRight()
    end
end
"
3nxgVVtj,Bidek,w0pw0psymbianize,JSON,Monday 1st of July 2024 05:57:51 PM CDT,"{
    ""Settings"": [
        {
            ""use_proxy"": 1,
            ""user_agent"": ""SWC/1.0 (Build) Anti/Restream (IT, protected) Checker/1.0""
        }
    ],
    ""Site"": [
        {
            ""name"": ""SWC-1.NET"",
            ""url"": ""https://youtube.com""
        },
        {
            ""name"": ""SWC2.LIVE"",
            ""url"": ""https://google.com""
        },
        {
            ""name"": ""SWC3.LIVE"",
            ""url"": ""https://facebook.com""
        },
        {
            ""name"": ""SWCSITE5.NET"",
            ""url"": ""https://symbianize.com""
        },
        {
            ""name"": ""SWC6.LIVE"",
            ""url"": ""https://yahoo.com""
        },
        {
            ""name"": ""SWCUP6.LIVE"",
            ""url"": ""https://swcup6.live""
        }
    ],
    ""Proxy"": [
        {
            ""ip"": ""167.88.172.218:24035""
        },
        {
            ""ip"": ""167.88.172.218:24035""
        },
        {
            ""ip"": ""167.88.172.218:24035""
        }
    ]
}"
KvdcpmSp,variant2,littlementalpain,C++,Monday 1st of July 2024 05:28:14 PM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <algorithm>
#include <Windows.h>
#include <map>
#include <future>
#include <atomic>
#include ""HashTable_2.h""


//1.  –î–∞–Ω —Ñ–∞–π–ª (Text_1.txt), —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 
//—Å–ª–æ–≤–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–±–µ–ª–æ–≤.–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ
//–≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª–µ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –æ–±–ª–∞–¥–∞—é—Ç –∑–∞–¥–∞–Ω–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–æ–º.–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª—è–º–±–¥—É
//–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–ª–æ–≤–∞.–ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞ : –æ–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è
//–∑–∞–¥–∞–Ω–Ω–æ–π –±—É–∫–≤–æ–π.

auto letter_check = [](std::string word, char letter) {
	return word[word.size() - 1] == letter;
};

void task1(std::ifstream& file1, bool (*letter_check)(std::string, char), char letter)
{
	std::map<std::string, int> m;
	std::string word;
	while (file1 >> word)
	{
		if (letter_check(word, letter))
		{
			if (!m.count(word))
				m.insert({ word, 1 });
			else m[word]++;
		}
		
	}
	std::for_each(m.begin(), m.end(), [&](std::pair<std::string, int> p) {
		if (p.second == 1) std::cout << p.first << '\n';
		});
}

//2. –û–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—É (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–ª–ª–∏–∑–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ,
// —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —è—á–µ–π–∫–∏ false, true) –∏ –∫–ª—é—á (string)
//  –∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É. –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ HashTable_2.h, —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö Data_2.txt

void task2(HashTable_2 h, std::string key)
{
	int index = h.hash(key);
	if (h.data[index].used == true && h.data[index].elem.key == key)
	{
		std::cout << h.data[index].elem.key << ' ' << h.data[index].elem.other << '\n';
	}
	else
	{
		int new_index = index + 1;
		bool flag = false;
		while (new_index !=index && !flag)
		{
			flag = h.data[new_index].used && h.data[new_index].elem.key == key;
			if (flag)
			{
				std::cout << h.data[new_index].elem.key << ' ' << h.data[new_index].elem.other << '\n';
			}
			new_index = (new_index + 1) % h.size;
		}
		if (!flag)
		{
			std::cout << ""not found!\n"";
		}
	}
}

//3. –í —Ñ–∞–π–ª–µ Matrix_3_2.txt –∑–∞–ø–∏—Å–∞–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ 10*10. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —è—á–µ–π–∫–∞–º –≤ —Å–æ—Å–µ–¥–Ω—é—é –ø—Ä–∞–≤—É—é —è—á–µ–π–∫—É –∏–ª–∏ 
// –≤ —Å–æ—Å–µ–¥–Ω—é—é –Ω–∏–∂–Ω—é—é. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞—Ç—Ä–∏—Ü—ã. 
// –í —è—á–µ–π–∫–µ –º–∞—Ç—Ä–∏—Ü—ã –∑–∞–ø–∏—Å–∞–Ω–æ —á–∏—Å–ª–æ (–º–æ–Ω–µ—Ç–∞) –æ—Ç 1 –¥–æ 10. –ü–æ—Å–µ—Ç–∏–≤ —è—á–µ–π–∫—É, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –º–æ–Ω–µ—Ç—É.
// –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–µ–Ω–µ–∂–Ω—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—Ç —Å–æ–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, 
// –ø—Ä–æ–π–¥—è –∏–∑ –ª–µ–≤–æ–π –≤–µ—Ä—Ö–Ω–µ–π —è—á–µ–π–∫–∏ –≤ –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–±—Ä–∞—Ç—å —ç—Ç—É —Å—É–º–º—É.

const int S = 10;
void task3(int**matrix, int& max_sum, int& cntr, int sum =0, int x =0, int y= 0)
{
	if (x == S-1 && y == S-1)
	{
		sum += matrix[x][y];
		if (sum == max_sum) { cntr++; }
		if (sum > max_sum) { max_sum = sum; cntr=1; }
		return;
	}
	else
	{
		if (x + 1 < S)
		{
			task3(matrix, max_sum, cntr, sum + matrix[x][y], x + 1, y);
		}
		if (y + 1 < S)
		{
			sum += matrix[x][y];
			task3(matrix, max_sum, cntr, sum, x, y+1);
			sum -= matrix[x][y];
		}
	}
}

//4. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. –í —Ñ–∞–π–ª–µ Numbers_4.txt –∑–∞–ø–∏—Å–∞–Ω –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ 555 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
// –ù–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º —Å—Ä–µ–¥–∏ —á–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
// –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–µ. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∞—Ç–æ–º–∞—Ä–Ω—ã–µ —Ç–∏–ø—ã. –†–µ—à–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º 4 - —Ö –ø–æ—Ç–æ–∫–æ–≤.

const int S2 = 555;
std::atomic_flag flag = ATOMIC_FLAG_INIT;
std::atomic<int> result;

void thread_task(int mas[S2], int left, int right)
{
	int minim = 11111111;
	for (int i = left; i < right; ++i)
	{
		if (mas[i] % 2 == 0)
		{
			if (mas[i] < minim || minim % 2 != 0)
			{
				minim = mas[i];
			}
		}
	}

	if ((minim %2 ==0 && minim < result.load()) || result %2 !=0)
	{
		result.store(minim);
	}

}

int task4(int mas[S2])
{
	const size_t NTHREAD = 3;
	std::future<void> THREADS[NTHREAD];
	int size = S2 / (NTHREAD + 1);
	result.store(INT_MAX);
	for (int i = 0; i < NTHREAD; ++i)
	{
		THREADS[i] = std::async(std::launch::async, thread_task, mas, i*size, (i+1)*size);
	}
	thread_task(mas, NTHREAD * size, S2);
	for (int i = 0; i < NTHREAD; ++i)
	{
		THREADS[i].get();
	}
	
	return result.load();
}

int main()
{
	/*std::ifstream file1(""Text_1.txt"");
	char letter = 'o';
	task1(file1, letter_check, letter);*/

	/*HashTable_2 h;
	std::string key = ""1613031932"";
	task2(h, key);*/

	/*std::ifstream file3(""Matrix_3_2.txt"");
	int** matrix = new int* [S];
	for (int i = 0; i < S; ++i)
	{
		matrix[i] = new int[S];
		for (int j = 0; j < S; ++j)
		{
			file3 >> matrix[i][j];
		}
	}
	int max_sum = 0, sum = 0, cntr =0;

	task3(matrix, max_sum, cntr);
	std::cout << ""max_sum: "" << max_sum << "" amount: "" << cntr << '\n';*/
	
	std::ifstream file4(""Numbers_4.txt"");
	int* mas = new int[S2];
	for (int i = 0; i < S2; ++i)
	{
		file4 >> mas[i];
	}
	std::cout << task4(mas);

	std::cin.get();
	return 0;
}"
1Ypd2zaD,variant1,littlementalpain,C++,Monday 1st of July 2024 05:23:37 PM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <Windows.h>
#include <map>
#include <thread>
#include ""HashTable_1.h""


// 1. –¥–∞–Ω —Ñ–∞–π–ª –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫. —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ-—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤, –∫-–µ —á–∞—â–µ –≤—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ 
//		–∏ –æ–±–ª–∞–¥–∞—é—Ç –∑–∞–¥–∞–Ω–Ω—ã–º —Å–≤-–º. –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ, –≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ
//		—Ñ-—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª—è–º–±–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤-–≤–∞ —Å–ª–æ–≤–∞: —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–¥–∞–Ω–Ω—É—é –±—É–∫–≤—É

auto letter_check = [](std::string word, char letter) 
	{
		return word.find(letter) != std::string::npos;
	};

void task1(std::ifstream& file1, bool(*letter_check)(std::string, char), char letter)
{
	std::map<std::string, int> m;
	std::string str, word;
	int max_freq = INT_MIN;
	if (file1.is_open())
	{
		while (getline(file1, str))
		{
			std::istringstream iss(str);
			while (iss >> word)
			{
				if (letter_check(word, letter))
				{
					if (!m.count(word))
					{
						m.insert({ word, 1 });
					}
					else m[word]++;
				}
				
			}
		}
		std::for_each(m.begin(), m.end(), [&](std::pair<std::string, int> p) 
			{
				if (p.second > max_freq) { max_freq = p.second; }

			});

		std::for_each(m.begin(), m.end(), [&](std::pair<std::string, int> p) {

			if (p.second == max_freq) std::cout << p.first << "" ("" << p.second << "")\n"";

			});
	}
	
}

// 2. —Ñ-—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—É (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–ª–ª–∏–∑–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —è—á–µ–π–∫–∏ 1 0 -1) –∏ –∫–ª—é—á string
//		–∏ –æ—Å—É—â-—è —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ñ-–∏–∏ –ø–æ –∫–ª—é—á—É. hashtable1 data2

void task2(HashTable_1& h, std::string key)
{
	int index = h.hash(key);
	if(h.data[index].used == 1 && h.data[index].elem.key == key)
	{
		h.data[index].used = -1;
		std::cout << ""Deleted\n""; 
	}
	else
	{
		int new_index = index + 1;
		bool flag = false;
		while (new_index != index && !flag)
		{
			if (h.data[new_index].used == 1 && h.data[new_index].elem.key == key)
			{
				h.data[new_index].used = -1;
				flag = true;
				std::cout << ""Deleted\n"";
			}
			new_index = (new_index + 1) % h.data.size();
		}
		if (!flag)
		{
			std::cout << ""Not deleted\n"";
		}
	}
}
// ^0x0^ ~meow


// 3. –≤ —Ñ–∞–π–ª–µ –º–∞—Ç—Ä–∏—Ü–∞ 10*10. –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ —Å–æ—Å–µ–¥–Ω—é—é –ø—Ä–∞–≤—É—é/–Ω–∏–∂–Ω—é—é —è—á–µ–π–∫–∏. –≤ –∫–∞–∂–¥ —è—á–µ–π–∫–µ —á–∏—Å–ª–æ 10‚Äì99 –∏–ª–∏ 0
//		‚Äî–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ. –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–∫—Å –∏ –º–∏–Ω –ø–ª–∞—Ç—É –ø—Ä–∏ –ø—Ä–æ—Ö–æ–¥–µ –∏–∑ –ª–µ–≤–æ–π –≤–µ—Ä—Ö–Ω–µ–π –≤ –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é —á/3 2 –Ω—É–ª–µ–≤—ã–µ —è—á–µ–π–∫–∏

//		const int S = 10;
const int S = 4;
void task3(int **matrix, int& min_sum, int& max_sum, int sum = 0, int zeros =0, int x =0, int y=0)
{

	if (x == S-1 && y == S-1)
	{
		sum += matrix[x][y];
		if (sum > max_sum) { max_sum = sum; }
		if (sum < min_sum) { min_sum = sum; }
		return;
	}
	if (zeros == 3)
	{
		return;
	}
	if (x + 1 < S)
	{
		if (matrix[x][y] == 0) task3(matrix, min_sum, max_sum, sum + matrix[x][y], zeros+1,  x + 1, y);
		else task3(matrix, min_sum, max_sum, sum + matrix[x][y], zeros, x + 1, y);
	}
	if (y +1 < S)
	{
		if (matrix[x][y] == 0) task3(matrix, min_sum, max_sum, sum + matrix[x][y], zeros + 1,  x, y + 1);
		else task3(matrix, min_sum, max_sum, sum + matrix[x][y], zeros,  x, y + 1);
	}
}


//4. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. –í —Ñ–∞–π–ª–µ Numbers_4.txt –∑–∞–ø–∏—Å–∞–Ω –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ 
// 555 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–µ—á–µ—Ç–Ω–æ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
// –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –Ω–µ—á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å—Ç—å. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞ thread.
// –ü–æ—Ç–æ–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–µ. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ interlocked - —Ñ—É–Ω–∫—Ü–∏–∏.
// –†–µ—à–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º 4 - —Ö –ø–æ—Ç–æ–∫–æ–≤

volatile long lock;
volatile long result = -1;
volatile long resnum = -1;

//const int S2 = 555;
const int S2 = 7;
void thread_task(int mas[S2], int left, int right /*,std::pair<int, int>& result*/)
{
	int maxim = 2;
	int num = left;
	for (int i = left; i < right; ++i)
	{
		if (mas[i] % 2 != 0)
		{
			if (mas[i] > maxim || maxim % 2 == 0)
			{

				maxim = mas[i];
				num = i;
			}
			else if (mas[i] == maxim) num = i;
		}
	}
	//if (maxim%2!=0 && (maxim > /*result.first*/ || maxim == result.first && num > result.second) || result.first % 2 == 0)
	//{
	//	while (_InterlockedCompareExchange(&lock, 0, 3))
	//	{
	//		Sleep(5);
	//	}
	//	if ((maxim > result.first || maxim == result.first && num > result.second) || result.first % 2 == 0)
	//	{
	//		result.first = maxim;
	//		result.second = num;
	//	}
	//	_InterlockedCompareExchange(&lock, 3, 0);
	//}
	while (_InterlockedCompareExchange(&lock, 0,3))
	{
		Sleep(5);
	}
	if (maxim%2 !=0 && (maxim> result || maxim == result && num > resnum)|| result%2==0)
	{
		if ((maxim > result || maxim == result && num > resnum) || result % 2 == 0)
		{
			result = maxim;
			resnum = num;
		}
	}
	_InterlockedCompareExchange(&lock, 3, 0);
}

int task4(int mas[S2])
{
	const size_t NTHREAD = 3;
	std::thread threads[NTHREAD];
	int size = S2 / (NTHREAD+1);
	//std::pair<int, int> result;
	for (int i = 0; i < NTHREAD; ++i)
	{
		threads[i] = std::thread(thread_task, mas, i * size, (i + 1) * size /*,std::ref(result)*/);
	}
	thread_task(mas, NTHREAD*size, S2/*, result*/);
	for (int i = 0; i < NTHREAD; ++i)
	{
		threads[i].join();
	}
	//return result.second;
	return resnum;
}


int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	/*std::ifstream file1(""test1.txt"");
	char letter = 'a';
	task1(file1, letter_check, letter);*/

	/*HashTable_1 h;
	h.print();
	std::cout << ""---------------\n"";
	std::string letter = ""8098063721"";
	task2(h, letter);
	std::cout << ""---------------\n"";
	h.print();*/

	//std::ifstream file3(""Matrix_3_1.txt"");
	/*std::ifstream file3(""test3.txt"");
	int** matrix = new int* [S];
	for (int i = 0; i < S; ++i)
	{
		matrix[i] = new int[S];
		for (int j = 0; j < S; ++j)
		{
			file3 >> matrix[i][j];
		}
	}
	int min_sum = INT_MAX, max_sum = INT_MIN;
	task3(matrix, min_sum, max_sum);
	std::cout << ""min_sum: "" << min_sum << '\n';
	std::cout << ""max_sum: "" << max_sum << '\n';*/

	//std::ifstream file4(""Numbers_4.txt"");
	std::ifstream file4(""test4.txt"");
	int* mas = new int[S2];
	for (int i = 0; i < S2; ++i)
	{
		file4 >> mas[i];
	}
	std::cout << task4(mas);


	std::cin.get();
	return 0;
}"
