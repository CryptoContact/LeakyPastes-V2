id,title,username,language,date,content
ZdBPRnrB,mas clases,teslariu,Python,Wednesday 27th of September 2023 06:36:02 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  sin tsdfcsfítulo.py

# metodos magicos o dunder methods 
# __len__  <-- len()
# __str__ <-- print()
# __add__  <-- +
# __getitem__(i) <-- lista[i]

""""""

class Perro:
	# atributo de clase
	especie = ""Canis familiaris""
	
	def __init__(self, nombre,edad):
		self.nombre = nombre
		self.edad = edad
		
	def __len__(self):
		return self.edad

	# def descripcion(self):
	#	return f""{self.nombre} tiene {self.edad} años""

	def  __str__(self):
		return f""{self.nombre} tiene {self.edad} años""
		
	def  __add__(self1, self2):
		return f""{self1.nombre} y {self2.nombre} van a tener cachorritos""
	

		
	
sultan = Perro(""Sultan"",6)
firulai = Perro(""Firulai"",4)

print(sultan.nombre)

sultan.especie = ""marca perro""

print(sultan.especie)
print(firulai.especie)

print(firulai)
print(firulai + sultan)

print(len(sultan))


class Vector:
	def __init__(self,x,y):
		self.x = x
		self.y = y
		
	def __abs__(self):
		return (self.x**2 + self.y**2)**0.5
		
	def __str__(self):
		return f""({self.x},{self.y})""

	def __repr__(self):
		return f""Vector de coordenadas x={self.x}, y={self.y}""
		
v = Vector(3,4)
print(abs(v))
print(v)
print(repr(v))

""""""
'''
# metodos de clases, metodos estaticos, metodos regulares

class MiClase:
	def metodo(self):
		""""""Metodo de instancia regular. A través de self podemos acceder
		a los atributos y otros metodos del objeto. Podemos acceder a 
		la clase mediante self.__class__ y modificar el estado de la clase""""""
		return ""Metodo regular""
		
	@classmethod
	def metodo_de_clase(cls):
		"""""" Toma un parametro cls que apunta a la clase y no a la instancia
		como en el caso de self. NO PUEDE MODIFICAR EL ESTADO DE UNA INSTANCIA,
		MODIFICA EL ESTADO DE LA CLASE""""""
		return f""Método de clase '{cls}'""

	@staticmethod
	def metodo_estatico():
		"""""" Acepta cualquier cantidad de parametros EXCEPTO cls y self
		No pueden modificar el estado de un objeto ni el de una clase
		estan restringidos y representan una forma de NAMESPACE de sus métodos""""""
		return ""Metodo estatico""
		
		
objeto = MiClase()
print(objeto.metodo_de_clase())
print(objeto.metodo_estatico())
print(objeto.metodo())
print(MiClase.metodo(objeto))

# repitamos pero sin instancias
del(objeto)
print(MiClase.metodo_de_clase())
print(MiClase.metodo_estatico())
print(objeto.metodo())  # da error, no hay self (no hay instancia)

'''	
#############  EJEMPLO   #####################

class Pizza:
	def __init__(self, ingredientes):
		self.ingredientes = ingredientes
		
	def __repr__(self):
		return f""Pizza({self.ingredientes})""

	def area(self):
		return self.area_circulo(self.radio)

	@classmethod
	def margarita(cls):
		return cls([""muzzarella"", ""tomates"",""ajo""])
		
	@classmethod
	def napolitana(cls):
		return cls([""muzzarella"", ""tomates"",""ajo"", ""oregano""])

	
	'''
	@staticmethod
	def area_circulo(r):
		""""""Este metodo estatico no accede a clases ni instancias, son
		metodos independientes""""""
		from math import pi
		return pi * r**2
	'''

p = Pizza([""muzza"",""jamon"",""anana""])
print(p)
print(Pizza.margarita())
print(Pizza.napolitana())

		
			




"
w7B3BfjL,"Лабораторна робота №1 ""розгалуж цикли""",1_rinkana,Python,Wednesday 27th of September 2023 06:35:07 PM CDT,"def main():
    min_function()
    y_function()
    sum_function()
    sum_of_multiplication()
    tabulation()
    print(find_index_of_last_7())
    count_negative_numbers()

def min_function():
    print(""Введите x, y, z через пробел:"")
    x, y, z = map(int, input().split())
    print(f""Min of x, y, z = {min(x, y, z)}\n"")

def y_function():
    print(""Введіть у з клавіатури:"")
    y = int(input())
    print(f""y = {5 * y if y >= 0 else 0}\n"")

def sum_function():
    print(""Введите n"")
    n = int(input())
    total_sum = 0
    for i in range(1, n + 1):
        total_sum += i / (i + 3)
    print(f""Сумма = {total_sum}\n"")

def sum_of_multiplication():
    print(""Введите n"")
    n = int(input())
    total_sum = 1
    for i in range(1, n + 1):
        total_sum *= (i + 3) / (factorial(i) + 2)
    print(f""Сумма при умножении = {total_sum}\n"")

def factorial(num):
    result = 1
    for i in range(1, num + 1):
        result *= i
    return result

def tabulation():
    start_x = -3.0
    end_x = 3.0
    step = 0.5

    print(""x\t  y"")
    print(""--------------"")

    x = start_x
    while x <= end_x:
        y = x * x - 1
        print(f""{x}\t{y}"")
        x += step
    print()

def find_index_of_last_7():
    print(""Введите n"")
    n = input()
    reversed_str = n[::-1]

    for index, char in enumerate(reversed_str):
        if char == '7':
            return f""Порядковый номер последней цифры 7 с конца: {index}""

    return ""Цифра 7 не найдена""

def count_negative_numbers():
    print(""Введите n"")
    n = int(input())
    sequence = []

    for i in range(1, n + 1):
        number = int(input(f""Введите число a{i}: ""))
        sequence.append(number)

    negative_count = sum(1 for number in sequence if number < 0)
    print(f""Количество отрицательных чисел в последовательности: {negative_count}"")

if __name__ == ""__main__"":
    main()"
Ve0jPXz0,Partition/Diagnostic 2023-08-25 12:48:40 PM,chuckkahn,XML,Wednesday 27th of September 2023 06:05:27 PM CDT,"Log Name:      Microsoft-Windows-Partition/Diagnostic
Source:        Microsoft-Windows-Partition
Date:          2023-08-25 12:48:40 PM
Event ID:      1006
Task Category: None
Level:         Information
Keywords:      
User:          SYSTEM
Computer:      WIN10-VT
Description:
For internal use only.
Event Xml:
<Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
  <System>
    <Provider Name=""Microsoft-Windows-Partition"" Guid=""{412bdff2-a8c4-470d-8f33-63fe0d8c20e2}"" />
    <EventID>1006</EventID>
    <Version>4</Version>
    <Level>4</Level>
    <Task>0</Task>
    <Opcode>0</Opcode>
    <Keywords>0x8000000000000000</Keywords>
    <TimeCreated SystemTime=""2023-08-25T16:48:40.2780999Z"" />
    <EventRecordID>5913</EventRecordID>
    <Correlation />
    <Execution ProcessID=""4"" ThreadID=""264"" />
    <Channel>Microsoft-Windows-Partition/Diagnostic</Channel>
    <Computer>WIN10-VT</Computer>
    <Security UserID=""S-1-5-18"" />
  </System>
  <EventData>
    <Data Name=""DiskNumber"">1</Data>
    <Data Name=""Flags"">8208</Data>
    <Data Name=""Characteristics"">262400</Data>
    <Data Name=""IsSystemCritical"">false</Data>
    <Data Name=""PagingCount"">0</Data>
    <Data Name=""HibernationCount"">0</Data>
    <Data Name=""DumpCount"">0</Data>
    <Data Name=""BytesPerSector"">512</Data>
    <Data Name=""Capacity"">10000831348736</Data>
    <Data Name=""BusType"">7</Data>
    <Data Name=""Manufacturer"">ST10000V</Data>
    <Data Name=""Model"">N0004-1ZD101</Data>
    <Data Name=""Revision"">0701</Data>
    <Data Name=""SerialNumber"">DB98765432118E1</Data>
    <Data Name=""Location"">Integrated : Bus 0 : Device 0 : Function 4 : Adapter 2 : Port 0</Data>
    <Data Name=""ParentId"">USB\VID_152D&amp;PID_0567\MSFT30DB98765432118E1</Data>
    <Data Name=""Socket"">-1</Data>
    <Data Name=""Slot"">-1</Data>
    <Data Name=""Bus"">0</Data>
    <Data Name=""Device"">0</Data>
    <Data Name=""Function"">4</Data>
    <Data Name=""Adapter"">2</Data>
    <Data Name=""Port"">0</Data>
    <Data Name=""Target"">0</Data>
    <Data Name=""Lun"">0</Data>
    <Data Name=""IoctlSupport"">59823</Data>
    <Data Name=""IdFlags"">4</Data>
    <Data Name=""DiskId"">{a23d0411-92e5-4b05-7823-4322e1f9f1cd}</Data>
    <Data Name=""AdapterId"">{d6b54238-2baa-11ed-bc9a-923a4506cdd7}</Data>
    <Data Name=""RegistryId"">{a584eece-408c-11ee-bcf2-85a1bc751696}</Data>
    <Data Name=""PoolId"">{00000000-0000-0000-0000-000000000000}</Data>
    <Data Name=""FirmwareSupportsUpgrade"">true</Data>
    <Data Name=""FirmwareSlotCount"">1</Data>
    <Data Name=""StorageIdCount"">2</Data>
    <Data Name=""StorageIdCodeSet"">1</Data>
    <Data Name=""StorageIdType"">3</Data>
    <Data Name=""StorageIdAssociation"">0</Data>
    <Data Name=""StorageIdBytes"">8</Data>
    <Data Name=""StorageId"">3042987654321185</Data>
    <Data Name=""WriteCacheType"">0</Data>
    <Data Name=""WriteCacheEnabled"">0</Data>
    <Data Name=""WriteCacheChangeable"">0</Data>
    <Data Name=""WriteThroughSupported"">0</Data>
    <Data Name=""FlushCacheSupported"">false</Data>
    <Data Name=""IsPowerProtected"">false</Data>
    <Data Name=""NVCacheEnabled"">false</Data>
    <Data Name=""BytesPerLogicalSector"">512</Data>
    <Data Name=""BytesPerPhysicalSector"">4096</Data>
    <Data Name=""BytesOffsetForSectorAlignment"">0</Data>
    <Data Name=""IncursSeekPenalty"">false</Data>
    <Data Name=""IsTrimSupported"">false</Data>
    <Data Name=""IsThinProvisioned"">false</Data>
    <Data Name=""OptimalUnmapGranularity"">0</Data>
    <Data Name=""UnmapAlignment"">0</Data>
    <Data Name=""NumberOfLogicalCopies"">0</Data>
    <Data Name=""NumberOfPhysicalCopies"">0</Data>
    <Data Name=""FaultTolerance"">0</Data>
    <Data Name=""NumberOfColumns"">0</Data>
    <Data Name=""InterleaveBytes"">0</Data>
    <Data Name=""HybridSupported"">false</Data>
    <Data Name=""HybridCacheBytes"">0</Data>
    <Data Name=""AdapterMaximumTransferBytes"">524288</Data>
    <Data Name=""AdapterMaximumTransferPages"">4294967295</Data>
    <Data Name=""AdapterAlignmentMask"">3</Data>
    <Data Name=""AdapterSerialNumber"">NULL</Data>
    <Data Name=""PortDriver"">1</Data>
    <Data Name=""UserRemovalPolicy"">true</Data>
    <Data Name=""PartitionStyle"">1</Data>
    <Data Name=""PartitionCount"">1</Data>
    <Data Name=""PartitionTableBytes"">192</Data>
    <Data Name=""PartitionTable"">01000000010000008B1C463D33F56A4B9A7C7DF3FB9EE3E50044000000000000007AFF7F180900008000000000000000010000000000000000001000000000000000E07F180900000100000000000000A2A0D0EBE5B9334487C068B6B72699C78E8A1977C34EF744948D5508A026A77D00000000000000004200610073006900630020006400610074006100200070006100720074006900740069006F006E000000000000000000000000000000000000000000000000000000000000000000</Data>
    <Data Name=""MbrBytes"">0</Data>
    <Data Name=""Mbr"">
    </Data>
    <Data Name=""Vbr0Bytes"">0</Data>
    <Data Name=""Vbr0"">
    </Data>
    <Data Name=""Vbr1Bytes"">0</Data>
    <Data Name=""Vbr1"">
    </Data>
    <Data Name=""Vbr2Bytes"">0</Data>
    <Data Name=""Vbr2"">
    </Data>
    <Data Name=""Vbr3Size"">0</Data>
    <Data Name=""Vbr3"">
    </Data>
  </EventData>
</Event>"
C1ku36NP,123213213,Volaik,Lua,Wednesday 27th of September 2023 05:58:50 PM CDT,"clients = {}

local modem = peripheral.find(""modem"")
rednet.open(""right"")

HUBID = os.getComputerID()
print(""HUB Computer ID: ""..HUBID)
 
local command = nil

function remoteControl()
    while true do
        local event, key, isHeld = os.pullEvent(""key"")
        if key == w then
            print(""W"")
    end
end

function list()
    for i,v in ipairs(clients) do
        print(""ID ""..v)
    end
end
 
function newConnection()
    event, sender, message, protocol = os.pullEvent(""rednet_message"") 
    if message == ""connectMsg"" then
    table.insert(clients, sender)
    print(sender.."" has connected."")
    rednet.send(sender, ""connectSuccess"",  connect)
    end
end
 
function userInput()
    command = io.read()
end
 
while true do
    parallel.waitForAny(newConnection,userInput) 

    if command == ""list"" then
        if #clients == 0 then
            print(""No connections found"")
        else
            list()
            command = nil
        end
    end

    if command == ""RC"" then
        remoteControl()
    end
end"
RpUuPHMs,Font Emoji Facebook,Paceusa,JavaScript,Wednesday 27th of September 2023 05:52:17 PM CDT,🇮🇩😭😍😗🤣😂☕😗😘🥰😏😘🤠🤠😆😁😱😡😱😱😱😁😀😆😃😅😄😂🤣😃😭🙃🥰😉😍🤩😉🌧️🌩️⛈️🌨️☁️✈️☁️🚁🌞🌤️⛅☁️╱◥████◣╲⋆╱◢████◤╲ ││🖼️│🖼️│🅗🅐🅖🅐🅝│🖼️│🖼️││ ◿|◺🅶🅰🅽🆂❆🆂🅴🅲🆄🆁🅸🆃🆈◿|ံံံံံ󱢏
aRetK3BC,Untitled,Skos_Martren,C++,Wednesday 27th of September 2023 05:37:41 PM CDT,"class Solution {
public:
    vector<int> findClosestElements(const vector<int>& arr, int k, const int x) {

        auto It = lower_bound(arr.begin(), arr.end(), x);

        if(It == arr.begin()){return {arr.begin(), arr.begin() + k};} // My ex 2
        if(It == arr.end() || It == prev(arr.end())){return {arr.end() - k, arr.end()};} // My ex 3


        int LeftPtr, RightPtr;

        if(*It == x || abs(*prev(It) - x) >= abs(*It - x)){
            LeftPtr = RightPtr = It - arr.begin();
        }else{
            LeftPtr = RightPtr = It - arr.begin() - 1;
        }

        cout << LeftPtr << ' ' << RightPtr << '\n';


        for(;k != 0;--k){

            if(LeftPtr > 0 && 
                (
                abs(arr[LeftPtr] - x) < abs(arr[RightPtr] - x) || 
                abs(arr[LeftPtr] - x) == abs(arr[RightPtr]  - x)
                )
            )
            {
                --LeftPtr;
            }else{
                ++RightPtr;
            }
        }

        cout << LeftPtr << ' ' << RightPtr;


        return {arr.begin() + LeftPtr, arr.begin()  + LeftPtr + k};
    }
};"
1ea6yJXp,Event Registration - Limit Available Grades with CSS,DataCCIW,CSS,Wednesday 27th of September 2023 05:15:06 PM CDT,"/* Hide Middle School and High School Grade Dropdown Values */
.hideMSHS div.ant-select-item[title=""6th""],
.hideMSHS div.ant-select-item[title=""7th""],
.hideMSHS div.ant-select-item[title=""8th""],
.hideMSHS div.ant-select-item[title=""9th""],
.hideMSHS div.ant-select-item[title=""10th""],
.hideMSHS div.ant-select-item[title=""11th""],
.hideMSHS div.ant-select-item[title=""12th""] 
{
    display: none;
}

/* Hide Middle School and Elementary Grade Dropdown Values */
.hideMSElem div.ant-select-item[title=""1st""],
.hideMSElem div.ant-select-item[title=""2nd""],
.hideMSElem div.ant-select-item[title=""3rd""],
.hideMSElem div.ant-select-item[title=""4th""],
.hideMSElem div.ant-select-item[title=""5th""],
.hideMSElem div.ant-select-item[title=""6th""],
.hideMSElem div.ant-select-item[title=""7th""],
.hideMSElem div.ant-select-item[title=""8th""],
.hideMSElem div.ant-select-item[title=""9th""]
{
    display: none;
}

/* Hide High School and Elementary Grade Dropdown Values */
.hideHSElem div.ant-select-item[title=""K""],
.hideHSElem div.ant-select-item[title=""1st""],
.hideHSElem div.ant-select-item[title=""2nd""],
.hideHSElem div.ant-select-item[title=""3rd""],
.hideHSElem div.ant-select-item[title=""4th""],
.hideHSElem div.ant-select-item[title=""5th""],
.hideHSElem div.ant-select-item[title=""9th""],
.hideHSElem div.ant-select-item[title=""10th""],
.hideHSElem div.ant-select-item[title=""11th""],
.hideHSElem div.ant-select-item[title=""12th""]
{
    display: none;
}"
22Q0y3GM,ЛАБОРАТОРНА РОБОТА №2(Робота з масивами) part 2,1_rinkana,Python,Wednesday 27th of September 2023 05:10:39 PM CDT,"a = [220, 150, -80, 4]

length = len(a)
print(f""Довжина вектора a: {length}"")

sorted_a_asc = sorted(a)
print(f""Вектор a впорядкований за зростанням: {sorted_a_asc}"")

sorted_a_desc = sorted(a, reverse=True)
print(f""Вектор a впорядкований за спаданням: {sorted_a_desc}"")

matrix = [[a[i] if i == j else 0 for j in range(length)] for i in range(length)]
print(""Матриця:"")
for row in matrix:
    print(row)
    
max_element = max(a)
min_element = min(a)
print(f""Максимальний елемент вектора a: {max_element}"")
print(f""Мінімальний елемент вектора a: {min_element}"""
nVtsiXGR,ЛАБОРАТОРНА РОБОТА №2(Робота з масивами),1_rinkana,Python,Wednesday 27th of September 2023 04:46:57 PM CDT,"import numpy as np

# Задані константи
alfa = 3.5
beta = -0.6

# Задані матриці A та B
A = np.array([
    [3, 2, -1],
    [0, -1, 2],
    [5, 7, 1],
])

B = np.array([
    [0, 3, -1],
    [2, -1, 2],
    [1, 2, 3],
])

# 1. Знайти матрицю C = αA + βB
C = alfa * A + beta * B

# 2. Знайти матрицю D = αA - B
D = alfa * A - B

# 3. Знайти визначники матриць A, B, C
det_A = np.linalg.det(A)
det_B = np.linalg.det(B)
det_C = np.linalg.det(C)

# 4. Транспонувати матриці A, B, C
A_transpose = np.transpose(A)
B_transpose = np.transpose(B)
C_transpose = np.transpose(C)

# 5. Знайти найменший елемент 3-го стовпчика матриці C
min_element_column_3 = np.min(C[:, 2])

# 6. Знайти стовпець матриці C з максимальним елементом
max_element_col_idx = np.argmax(C)
max_element_col = C[:, max_element_col_idx % C.shape[1]]

# 7. Побудувати матрицю E
if alfa % 2 == 0:
    E = D[1:-1, :-1]
else:
    E = D[1:, 1:]

# 8. Створити дві нові матриці
AB_horizontal = np.hstack((A, B))
CS_vertical = np.vstack((C, D.transpose()))

# 9. Сортування стовбців матриці A за зростанням та спаданням
A_sorted_asc = np.sort(A, axis=0)
A_sorted_desc = np.sort(A, axis=0)[::-1]

# 10. Сортування рядків матриці B за зростанням та спаданням
B_sorted_asc = np.sort(B, axis=1)
B_sorted_desc = np.sort(B, axis=1)[:, ::-1]

# 11. Знайти максимальні елементи та розмірність матриць
max_element_A = np.max(A)
max_element_B = np.max(B)
max_element_C = np.max(C)
max_element_D = np.max(D)
max_element_E = np.max(E)

rows_A, cols_A = A.shape
rows_B, cols_B = B.shape
rows_C, cols_C = C.shape
rows_D, cols_D = D.shape
rows_E, cols_E = E.shape

# 12. Знайти матриці зворотні до A, B, C
inv_A = np.linalg.inv(A)
inv_B = np.linalg.inv(B)
inv_C = np.linalg.inv(C)

# 13. Поєднати матриці горизонтально та вилучити рядки
combined_matrices = np.hstack((A, B, C))
if alfa % 2 == 0:
    combined_matrices = combined_matrices[::2, :]

# 14. Створити одиничну матрицю O та обчислити слід
n = 1  # Ваш номер варіанту
O = np.eye(n)
trace_O = np.trace(O)

# Виведення результатів
print(""1. Матриця C:"")
print(C)
print(""\n2. Матриця D:"")
print(D)
print(""\n3. Визначники матриць:"")
print(f""Det(A) = {det_A}"")
print(f""Det(B) = {det_B}"")
print(f""Det(C) = {det_C}"")
print(""\n4. Транспоновані матриці:"")
print(""A transpose:"")
print(A_transpose)
print(""B transpose:"")
print(B_transpose)
print(""C transpose:"")
print(C_transpose)
print(""\n5. Найменший елемент 3-го стовпчика матриці C:"")
print(min_element_column_3)
print(""\n6. Стовпець матриці C з максимальним елементом:"")
print(max_element_col)
print(""\n7. Матриця E:"")
print(E)
print(""\n8. Дві нові матриці:"")
print(""AB_horizontal:"")
print(AB_horizontal)
print(""CS_vertical:"")
print(CS_vertical)
print(""\n9. Сортування стовбців матриці A:"")
print(""A за зростанням:"")
print(A_sorted_asc)
print(""A за спаданням:"")
print(A_sorted_desc)
print(""\n10. Сортування рядків матриці B:"")
print(""B за зростанням:"")
print(B_sorted_asc)
print(""B за спаданням:"")
print(B_sorted_desc)
print(""\n11. Максимальні елементи та розмірність матриць:"")
print(f""Max(A) = {max_element_A}, Shape(A) = ({rows_A}, {cols_A})"")
print(f""Max(B) = {max_element_B}, Shape(B) = ({rows_B}, {cols_B})"")
print(f""Max(C) = {max_element_C}, Shape(C) = ({rows_C}, {cols_C})"")
print(f""Max(D) = {max_element_D}, Shape(D) = ({rows_D}, {cols_D})"")
print(f""Max(E) = {max_element_E}, Shape(E) = ({rows_E}, {cols_E})"")
print(""\n12. Матриці зворотні до A, B, C:"")
print(""Inverse of A:"")
print(inv_A)
print(""Inverse of B:"")
print(inv_B)
print(""Inverse of C:"")
print(inv_C)
print(""\n13. Поєднана матриця з вилученими рядками:"")
print(combined_matrices)
print(""\n14. Одинична матриця O та слід:"")
print(""O:"")
print(O)
print(f""Trace(O) = {trace_O}"")"
2zaTNW3L,Untitled,skylak3,Go,Wednesday 27th of September 2023 04:43:42 PM CDT,"package main

import (
	""bufio""
	""errors""
	""fmt""
	""os""
	""slices""
)

var (
	gay = errors.New(""gay"")
)

func main() {
	var (
		n int
	)
	fmt.Scanln(&n)
	a_str := make([]string, n)
	mp := map[string]string{}
	s := bufio.NewScanner(os.Stdin)

	for i := 0; i < n; i++ {
		s.Scan()
		a_str[i] = s.Text()
	}
	slices.Sort(a_str)
	for i := n - 1; i >= 0; i-- {
		s1 := a_str[i]
		for j := 2; j < len(s1); j++ {
			mp[s1[:j]] = s1
			//fmt.Println(s1[0:j], mp[s1[:j]])
		}
	}
	for {
		s.Scan()
		b := []rune(s.Text())
		if string(s.Text()) == """" {
			return
		}
		if mp[string(b)] != """" {
			fmt.Println(mp[string(b)])
		} else {
			fmt.Println(""Не найдено"")
		}
	}
}
"
SXavAivk,fbtc,coinwalk,JavaScript,Wednesday 27th of September 2023 04:07:21 PM CDT,"var smmly = parseFloat(document.getElementById('balance').innerHTML);
var nudle = Number((0.00000001).toFixed(8));
var blert = nudle;
var taget = 1.0;
var bogs = (nudle*10);
var bpop = (nudle*6.5);
var circuit = 0;
var sysch = ((Math.floor(smmly/bogs))*bogs);
var fatt = 1;
var junky = smmly;
var bear = true;
var distj = ((blert*1).toFixed(8));
var nemo = parseFloat(document.getElementById('balance').innerHTML);

 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
function makeid(length) {
    var result = '';
    var cha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var chaLength = cha.length;
    for ( var ion = 0; ion < length; ion++ ){
      result += cha.charAt(Math.floor(Math.random() *
 chaLength));
   }
   return result;
}
 
function bogus(){
nemo = document.getElementById('balance').innerHTML;
if ((nemo>(((Math.floor(nemo/bogs))*bogs)+bpop))&&(nemo<(((Math.floor(nemo/bogs))*bogs)+(bpop+nudle)))&&(nemo!=circuit)&&(nemo>sysch)) {
    blert = blert*2;
    circuit = parseFloat(nemo);
}
if ((nemo>(((Math.floor(nemo/bogs))*bogs)+bpop))&&(nemo<(((Math.floor(nemo/bogs))*bogs)+(bpop+nudle)))&&(nemo!=circuit)&&(nemo<sysch)) {
    blert = blert*2;
    fatt = 0;
    circuit = parseFloat(nemo);
}
if ((nemo>=(sysch+(bogs*fatt)))&&(nemo<(((Math.floor(nemo/bogs))*bogs)+bpop))) {
    blert = nudle;
    fatt = 1;
    circuit = 0;
    sysch = ((Math.floor((parseFloat(nemo))/bogs))*bogs);
}
return blert;
}

var myseed;
 
function get() {
var xol = getR(1,3);
if (xol==1) {
myseed = (makeid(5));
}
if (xol==2) {
myseed = (makeid(7));
}
if (xol==3) {
myseed = (makeid(9));
}
var xox = document.getElementById('balance').innerHTML;
var zuggbe = bogus();
if ((xox==junky)&&(bear)){
document.getElementById('next_client_seed').value = myseed;
document.getElementById('double_your_btc_win_chance').value = 47.50;
document.getElementById('double_your_btc_payout_multiplier').value = 2.00;
parseFloat(document.getElementById('double_your_btc_stake').value = zuggbe);
parseFloat(document.getElementById('win_amount').innerHTML = zuggbe);
document.getElementById('double_your_btc_bet_lo_button').click();
bear = false;
}
if ((xox!=junky)&&(!bear)){
junky = parseFloat(xox);
bear = true;
}
if (xox>=taget) {
return;
}
setTimeout(() => get(), 1);
}
get();"
7uFxPTBZ,main,Terminator7805,Lua,Wednesday 27th of September 2023 03:41:36 PM CDT,"local refuel = require '/miner/refuel.lua'

while true do
	refuel.checkFuel()
	Wait.time(refuel.checkFuel(), 60)
end"
jC1fdw6u,turtle refuel,Terminator7805,Lua,Wednesday 27th of September 2023 03:32:36 PM CDT,"function checkFuel()
    print('Checking fuel...')

    if turtle.getFuelLevel() < 200 then
        turtle.refuel(1)
        print('Refueling...')
    else
        print('No need to refuel')
    end
end"
sHWQHVz5,1C,Korotkodul,C++,Wednesday 27th of September 2023 03:28:20 PM CDT,"#include <cmath>
#include <iostream>
#include <vector>

using std::cin;
using std::cout;
using std::max;
using std::min;
using std::string;
using std::vector;

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);
  int nn;
  int mm;
  int ll;
  cin >> nn >> mm >> ll;
  vector<vector<int> > aa(nn, vector<int>(ll));
  vector<vector<int> > bb(mm, vector<int>(ll));
  for (int ii = 0; ii < nn; ++ii) {
    for (int jj = 0; jj < ll; ++jj) {
      cin >> aa[ii][jj];
    }
  }
  for (int ii = 0; ii < mm; ++ii) {
    for (int jj = 0; jj < ll; ++jj) {
      cin >> bb[ii][jj];
    }
  }

  int qq;
  cin >> qq;
  for (int tt = 0; tt < qq; ++tt) {
    int ii;
    int jj;
    cin >> ii >> jj;
    ii--;
    jj--;
    int res = max(aa[ii][0], bb[jj][0]);
    int ans = 0;

    for (int kk = 0; kk < ll; ++kk) {
      if (res > max(aa[ii][kk], bb[jj][kk])) {
        res = max(aa[ii][kk], bb[jj][kk]);
        ans = kk;
      }
    }
    cout << ans + 1 << ""\n"";
  }
}
"
nTFm62pK,asfshgdrhj,gadungw71,PHP,Wednesday 27th of September 2023 03:22:31 PM CDT,"https://eventsframe.com/e/rp9ItvwXu/4-2023-full-hd/

https://eventsframe.com/e/neAGCZarm/expendables-4-4-2022-thai/

https://m.facebook.com/media/set/?set=a.122104990346052089

https://m.facebook.com/media/set/?set=a.122098410416056523

https://m.facebook.com/media/set/?set=a.122096620820062389

https://m.facebook.com/media/set/?set=a.122097829190061291

https://m.facebook.com/media/set/?set=a.122097831224061291

https://colab.research.google.com/drive/1-t2KH5bb3EgCG9k7xzRLm_cpsnULtwXA

https://soundcloud.com/gito-rasdi/4-2023-hd-1080thai

https://soundcloud.com/gito-rasdi/4-2023-1080p"
bNn7H6KR,Untitled,skylak3,Go,Wednesday 27th of September 2023 03:18:12 PM CDT,"package main

import (
	""bufio""
	""errors""
	""fmt""
	""os""
	""slices""
)

var (
	gay = errors.New(""gay"")
)

func findSubstInStrArr(a [][]rune, b []rune) (int, error) {
	l, r := 0, len(a)
	for r-l > 1 {
		m := (l + r) / 2
		g := a[m]
		if string(g[0:len(b)]) == string(b) {
			return m, nil
		}
		if string(g) > string(b) {
			r = m
		} else {
			l = m
		}
	}
	for i := 0; i < len(b); i++ {
		if b[i] != a[l][i] {
			return 0, gay
		}
	}
	return l, nil
}

func main() {
	var (
		n int
	)
	fmt.Scan(&n)
	a := make([][]rune, n)
	a_str := make([]string, n)
	s := bufio.NewScanner(os.Stdin)
	//s.Scan()
	for i := 0; i < n; i++ {
		s.Scan()
		a_str[i] = s.Text()
	}
	slices.Sort(a_str)
	for i := 0; i < n; i++ {
		a[i] = []rune(a_str[i])
		//fmt.Println(a_str[i])
	}
	for i := 0; i < n; i++ {
		s.Scan()
		b := []rune(s.Text())
		ans, err := findSubstInStrArr(a, b)

		if err == nil {
			fmt.Println(a_str[ans])
		} else {
			fmt.Println(""Не найдено"")
		}
	}
}
"
GS2vNSkF,Untitled,Sininerebane,C#,Wednesday 27th of September 2023 02:56:36 PM CDT,"namespace TriangleSymbol
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;

            string symbol;
            string name;
            string mixedLine;
            string frame;
            
            Console.WriteLine(""Введите свое имя"");
            name = Console.ReadLine();
            Console.WriteLine(""Введите символ"");
            symbol = Console.ReadLine();

            frame = """";
            mixedLine = symbol +  name + symbol;
           
            for (int i = 0; i < mixedLine.Length; i++)
            {
                frame += symbol;
            }

            Console.Write(frame);
            Console.WriteLine(""\n"" + mixedLine);
            Console.Write(frame);
            Console.ReadKey();
        }
    }
}"
VsUeuL15,1B,Korotkodul,Python,Wednesday 27th of September 2023 02:52:12 PM CDT,"import math
from decimal import Decimal, getcontext
  
getcontext().prec = 6

n = int(input())
a = input().split()
b = []
for i in range(n):
    k = float(a[i]) * 100
    k = int(k)
    b.append(k)
#print(b)
pf = [0] * n
pf[0] = b[0]
for i in range(1, n):
    pf[i] = pf[i - 1] * b[i]
q = int(input())
#print(b)
#print(pf)
for i in range(q):
    s = input().split()
    l = int(s[0])
    l -= 1
    r = int(s[1])
    div = 1
    if l > -1:
        div = pf[l]
    print(div, pf[r])
    res = pf[r] * 1.0 / div
    print(res)
    res = math.pow(res, 1.0 / (r - l)) / 100
    print(Decimal(res))
    print()"
2G3bFgaN,ESP_Connect,Seelenkind,Arduino,Wednesday 27th of September 2023 02:45:39 PM CDT,"#pragma GCC optimize(""-Ofast"")
//#define USE_FIREBASE  // FBWrite(path, data); String txt = FBRead(path);
#define USE_MQTT      // MQTTsend(topic, data); String txt = MQTTget(topic);
#define USE_TELNET    // TELNETsend(data); String txt=TELNETget();

#include <Arduino.h>
#include <WiFiClient.h>
#if defined(ESP32)
#include <WiFi.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#endif
#include <NTPClient.h>
#include <WiFiUdp.h>
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, ""europe.pool.ntp.org"", 7200, 60000);

#define WIFI_SSID ""WIFI_SSID""
#define WIFI_PASSWORD ""WIFI_PASSWORD""

#ifdef USE_FIREBASE
#include <Firebase_ESP_Client.h>
#include <addons/TokenHelper.h>
#include <addons/RTDBHelper.h>
#include <ArduinoJson.h>
#define API_KEY ""API_KEY""
#define DATABASE_URL ""DATABASE_URL""
#define USER_EMAIL ""USER_EMAIL""
#define USER_PASSWORD ""USER_PASSWORD""
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

String FBRead(String path) {
  String r;
  byte x = 0;
  do {
    Firebase.RTDB.getString(&fbdo, path);
    r = fbdo.to<const char*>();
    x++;
    if (x > 10) break;
  } while (r == """");
  return r;
}

void FBWrite(String path, String data) {
  Firebase.RTDB.setString(&fbdo, path, data);
}
#endif

#ifdef USE_MQTT
#include <PubSubClient.h>
#define mqtt_server ""broker.emqx.io""
#define mqtt_port 1883
//mqtt_use_credentials
#ifdef mqtt_use_credentials
#define mqtt_user ""mqtt_user""
#define mqtt_password ""mqtt_password""
#endif
#define sub_topic1 ""/zz/testinput1""
#define sub_topic2 ""/zz/testinput2""
#define sub_topic3 ""/zz/testinput3""
#define sub_topic4 ""/zz/testinput4""
String pyld[4 + 1] = {}, xtopic;
byte tp;

WiFiClient espClient;
PubSubClient mqttClient(espClient);

void mqttReconnect() {
  while (!mqttClient.connected()) {
    Serial.print(""Attempting MQTT connection..."");
    String clientId = ""ESPClient-"";
    clientId += String(random(0xffff), HEX);
#ifdef mqtt_use_credentials
    if (mqttClient.connect(""ESPClient"", mqtt_user, mqtt_password))
#else
    if (mqttClient.connect(clientId.c_str()))
#endif
    {
      Serial.println(""connected"");
      mqttClient.subscribe(sub_topic1);
      mqttClient.subscribe(sub_topic2);
      mqttClient.subscribe(sub_topic3);
      mqttClient.subscribe(sub_topic4);
    } else {
      Serial.print(""failed, rc="");
      Serial.print(mqttClient.state());
      Serial.println("" try again in 5 seconds"");
      delay(5000);
    }
  }
}
void MQTT_LOOP() {
  if (!mqttClient.connected()) {
    mqttReconnect();
  }
  mqttClient.loop();
}

void callback(char* topic, byte* payload, unsigned int length) {
  xtopic = topic;
  if (String(topic) == String(sub_topic1)) tp = 1;
  if (String(topic) == String(sub_topic2)) tp = 2;
  if (String(topic) == String(sub_topic3)) tp = 3;
  if (String(topic) == String(sub_topic4)) tp = 4;
  for (unsigned int i = 0; i < length; i++) {
    pyld[tp] += String(char(payload[i]));
  }
}
void MQTTsend(const char* tpc, String msg) {
  mqttClient.publish(tpc, msg.c_str());
}
#endif

#ifdef USE_TELNET
uint8_t i;
bool ConnectionEstablished; 
#define MAX_TELNET_CLIENTS 2
WiFiServer TelnetServer(23);
WiFiClient TelnetClient[MAX_TELNET_CLIENTS];

void TELNETsend(String text) {
  for (i = 0; i < MAX_TELNET_CLIENTS; i++) {
    if (TelnetClient[i] || TelnetClient[i].connected()) {
      TelnetClient[i].println(text);
    }
  }
  delay(10);
}

String TELNETget() {
  String readTelnet = """";
  for (i = 0; i < MAX_TELNET_CLIENTS; i++) {
    if (TelnetClient[i] && !TelnetClient[i].connected()) {
      Serial.print(""Client disconnected ... terminate session "");
      Serial.println(i + 1);
      TelnetClient[i].stop();
    }
  }
  if (TelnetServer.hasClient()) {
    ConnectionEstablished = false;  // Set to false
    for (i = 0; i < MAX_TELNET_CLIENTS; i++) {
      if (!TelnetClient[i]) {
        TelnetClient[i] = TelnetServer.available();

        Serial.print(""New Telnet client connected to session "");
        Serial.println(i + 1);

        TelnetClient[i].flush();  // clear input buffer, else you get strange characters
        TelnetClient[i].println(""Welcome!"");
        TELNETsend(""Connected with ip:"" + WiFi.localIP().toString());
        ConnectionEstablished = true;
        break;
      } else {
      }
    }
    if (ConnectionEstablished == false) {
      Serial.println(""No free sessions ... drop connection"");
      TelnetServer.available().stop();
    }
  }
  for (i = 0; i < MAX_TELNET_CLIENTS; i++) {
    if (TelnetClient[i] && TelnetClient[i].connected()) {
      if (TelnetClient[i].available()) {
        while (TelnetClient[i].available()) {
          readTelnet = TelnetClient[i].readString();
        }
      }
    }
  }
  return readTelnet;
}
#endif

String getserial() {
  String txt = """";
  while (Serial.available()) {
    txt = Serial.readString();
    txt.trim();
  }
  return txt;
}

void Test() {
  timeClient.update();
  String rnd = timeClient.getFormattedTime();
  String senddata = getserial();

#ifdef USE_MQTT
  if (senddata != """") MQTTsend(""/zz/testoutput"", rnd + "" : "" + senddata);
  if (pyld[tp] != """") {
    Serial.println(""Topic: "" + String(xtopic) + "" payload: "" + pyld[tp]);
    pyld[tp] = """";
  }
#endif

#ifdef USE_FIREBASE
  if (senddata != """") {
    FBWrite(""ESP_Basic/test"", rnd + "" : "" + senddata);
    String txt = FBRead(""ESP_Basic/test"");
    Serial.println(""Firebase Data: "" + txt);
  }
#endif

#ifdef USE_TELNET
  if (senddata != """") TELNETsend(rnd + "" : "" + senddata);
  String telnetmsg = TELNETget();
  if (telnetmsg != """") Serial.println(""Telnet message: "" + telnetmsg);
#endif
}

void setup() {
  delay(3000);
  Serial.begin(115200);
  Serial.println(""Connecting to: "" + String(WIFI_SSID));
  WiFi.mode(WIFI_STA);  // Setup ESP in client mode
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(""."");
    delay(300);
  }
  Serial.println();
  Serial.print(""Connected with IP: "");
  Serial.println(WiFi.localIP());

#ifdef USE_FIREBASE
  Serial.printf(""\n\rFirebase Client v%s\n\n"", FIREBASE_CLIENT_VERSION);
  config.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.database_url = DATABASE_URL;
  config.token_status_callback = tokenStatusCallback;
  Firebase.reconnectNetwork(true);
  fbdo.setBSSLBufferSize(4096 /* Rx buffer size in bytes from 512 - 16384 */, 1024 /* Tx buffer size in bytes from 512 - 16384 */);
  fbdo.setResponseSize(2048);
  Firebase.begin(&config, &auth);
  Firebase.setDoubleDigits(5);
  config.timeout.serverResponse = 10 * 1000;
#endif

#ifdef USE_MQTT
  mqttClient.setServer(mqtt_server, mqtt_port);
  mqttClient.setCallback(callback);
#endif

#ifdef USE_TELNET
  TelnetServer.begin();
  TelnetServer.setNoDelay(true);
#endif
  timeClient.begin();
}

void loop() {
  MQTT_LOOP();
  Test();
  yield();
}
"
MAH4nq6s,Untitled,Sininerebane,C#,Wednesday 27th of September 2023 02:42:53 PM CDT,"namespace SecretMessage
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;

            string password;
            string accessToMessage;
            int tryCount;

            accessToMessage = ""123456789"";
            tryCount = 3;

            for (int i = 0; i < tryCount; i++)
            {
                Console.WriteLine(""Введите свой пароль"");
                password = Console.ReadLine();

                if (password == accessToMessage)
                {
                    Console.WriteLine(""Вы читаете тайное сообщение"");
                    break;
                }
                else
                {
                    Console.WriteLine(""Вам в тайном сообщение отказано"");
                    Console.WriteLine($""У вас осталось - {tryCount - i - 1}  попыток"");
                }
            }

            Console.Write(""\n Возвращайтесь к нам в еще раз"");
            Console.ReadKey();
        }
    }
}"
6PVqnd3n,Ladybugs,Pijomir,JavaScript,Wednesday 27th of September 2023 02:24:33 PM CDT,"function playWithLadybugs(arr) {
    let fieldSize = arr.shift();
    let field = [];
    for (let i = 0; i < fieldSize; i++) {
        field.push(0);
    }

    let ladyBugsPositions = arr.shift().split(' ').map(Number);
    for (let position of ladyBugsPositions) {
        if (position >= 0 && position < fieldSize) {
            field[position] = 1;
        }
    }

    for (let el of arr) {
        let [ladyBugPosition, direction, ladyBugMove] = el.split(' ');
        ladyBugPosition = +ladyBugPosition;
        ladyBugMove = +ladyBugMove;
        if(ladyBugMove < 0) {
            ladyBugMove = Math.abs(ladyBugMove);
            direction = direction === 'right' ? 'left' : 'right';
        }
        if (field[ladyBugPosition] === 1) {
            field[ladyBugPosition] = 0;
            if (direction === 'right') {
                let newPosition = ladyBugPosition + ladyBugMove;
                if (field[newPosition] === 1) {
                    newPosition = newPosition + ladyBugMove;
                }

                if (newPosition < field.length) {
                    field[newPosition] = 1
                }
            } else {
                let newPosition = ladyBugPosition - ladyBugMove;
                if (field[newPosition] === 1) {
                    newPosition = newPosition - ladyBugMove;
                }

                if (newPosition >= 0) {
                    field[newPosition] = 1
                }
            }
        }
    }

    console.log(field.join(' '));
}"
MwqZnwJy,Dungeonest Dark,Pijomir,JavaScript,Wednesday 27th of September 2023 02:23:45 PM CDT,"function dungeonestDark(arr) {
    let rooms = arr[0].split('|');
    let health = 100;
    let coins = 0;
    let isAlive = true;

    for (i = 0; i < rooms.length; i++) {
        let room = rooms[i].split(' ');
        let currentCommand = room[0];
        let currentNumber = +room[1];

        switch (currentCommand) {
            case 'potion': 
                health + currentNumber > 100 ? currentNumber = 100 - health : currentNumber;
                health += currentNumber;
                console.log(`You healed for ${currentNumber} hp.\nCurrent health: ${health} hp.`);
                break;
            case 'chest':
                coins += currentNumber;
                console.log(`You found ${currentNumber} coins.`);
                break;
            default:
                health -= currentNumber;
                if (health > 0) {
                    console.log(`You slayed ${currentCommand}.`)
                } else {
                    console.log(`You died! Killed by ${currentCommand}.`);
                    console.log(`Best room: ${i + 1}`);
                    isAlive = false;
                } 
                break;
        }
        
        if (!isAlive) {
            break;
        }
    }
    
    if (isAlive) {
        console.log(""You've made it!"");
        console.log(`Coins: ${coins}`);
        console.log(`Health: ${health}`);
    }
}"
7iEeYR5d,magic_line,Korotkodul,C++,Wednesday 27th of September 2023 02:21:07 PM CDT,"ios::sync_with_stdio(false);
cin.tie(0); cout.tie(0);"
7QMt3WvK,1A_v1,Korotkodul,C++,Wednesday 27th of September 2023 02:15:42 PM CDT,"#include <iostream>
#include <vector>

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0);
  std::cout.tie(0);
  int num;
  std::cin >> num;
  std::vector<int> ar(num);
  for (int& id : ar) {
    std::cin >> id;
  }
  std::vector<int> pref(num);
  std::vector<int> suf(num);
  pref[0] = ar[0];
  for (int id = 1; id < num; ++id) {
    pref[id] = std::min(pref[id - 1], ar[id]);
  }
  suf[num - 1] = ar[num - 1];
  for (int id = num - 2; id >= 0; --id) {
    suf[id] = std::min(suf[id + 1], ar[id]);
  }
  int qu;
  // go
  std::cin >> qu;
  for (int id = 0; id < qu; ++id) {
    int li;
    int ri;
    std::cin >> li >> ri;
    li--;
    ri--;
    int ans = std::min(pref[li], suf[ri]);
    std::cout << ans << ""\n"";
  }
}
"
F4jbtZJs,Untitled,Skos_Martren,C++,Wednesday 27th of September 2023 02:09:45 PM CDT,"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {

private:

  vector<TreeNode*> DuplicateSubtrees;
  unordered_map<string, int> SubtreeToCount;

private:

  string Postorder(TreeNode* Node){ // обходит дерево от листьев к родителем листьев и т.д. выше

      if(Node == nullptr){return {};}

      string LeftBranch = Postorder(Node->left);
      string RightBranch = Postorder(Node->right);

      string Subtree = to_string(Node->val) + ' '+ LeftBranch+ ' '+ RightBranch;

      // if(SubtreeToCount[Subtree]++ == 1){DuplicateSubtrees.push_back(Node);} // good!
      if(SubtreeToCount[move(Subtree)]++ == 1){DuplicateSubtrees.push_back(Node);}
      // else{++SubtreeToCount[move(Subtree)];} // Wrong Answer 133 / 175 testcases passed Input root = [1,2,3,4,null,2,4,null,null,4] Output [[4],[2,4],[4]] Expected [[2,4],[4]]

      //++SubtreeToCount[move(Subtree)]; // <-- T& operator[]( Key&& key ); (2)	(since C++11) <-- https://en.cppreference.com/w/cpp/container/unordered_map/operator_at
      return Subtree;
  }

public:

    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        
        Postorder(root);

        return DuplicateSubtrees;

    }
};"
4C5Rqkcf,Untitled,Skos_Martren,C++,Wednesday 27th of September 2023 02:07:56 PM CDT,"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {

private:

  vector<TreeNode*> DuplicateSubtrees;
  unordered_map<string, int> SubtreeToCount;

private:

  string Postorder(TreeNode* Node){ // обходит дерево от листьев к родителем листьев и т.д. выше

      if(Node == nullptr){return {};}

      string LeftBranch = Postorder(Node->left);
      string RightBranch = Postorder(Node->right);

      string Subtree = to_string(Node->val) + ' '+ LeftBranch+ ' '+ RightBranch;

      if(SubtreeToCount[Subtree] == 1){DuplicateSubtrees.push_back(Node);}
      // else{++SubtreeToCount[move(Subtree)];} // Wrong Answer 133 / 175 testcases passed Editorial Input root = [1,2,3,4,null,2,4,null,null,4] Use Testcase Output [[4],[2,4],[4]] Expected [[2,4],[4]]

      ++SubtreeToCount[move(Subtree)]; // <-- T& operator[]( Key&& key ); (2)	(since C++11) <-- https://en.cppreference.com/w/cpp/container/unordered_map/operator_at
      return Subtree;
  }

public:

    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        
        Postorder(root);

        return DuplicateSubtrees;

    }
};"
PZFL2yQ2,ESP32TimerRelayModuleRev0,JonD1988,Arduino,Wednesday 27th of September 2023 02:03:21 PM CDT,"//ESP32TimerRelayModuleRev0 was created on 9/27/2023 by Jonathan DeWitt.  This was tested with the Android App LEDStripControlRev5a.  All I did was put the value in hours I want to elapse before the relay module is triggered into the OnTimeTransmit entry of that app and pressed the button to transmit.  This sketch will convert that value into a floating point variable and use it.  When I was testing I didn't use actual hours.  I used fractions of an hour.  For example 1 minute is 1/60=0.0167 hours. 2 minutes is 2/60=0.0333 hours.  30 seconds is 0.0083 hours.  I used 4 decimal places of precision.  This sketch is only set up to handle 4 decimal places.  My intent is to put the output of the relay module COM (Common) and NC (Normally Closed) contacts in series with the power switch of my 3D printer.

#include ""BluetoothSerial.h"" //Needed to communicate via Bluetooth

#define relPin 4 //GPIO Pin that the relay's signal pin is connected to

//Next 3 lines needed for Bluetooth communication
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

BluetoothSerial SerialBT; //Creates an object called SerialBT to use in Bluetooth Communication
char incomingSig; //Stores what character is read from the bluetooth module
//int PosUI, PosuI, LastDigitU, TIMEtest, OnTimeResults;
int PosUI, PosuI, LastDigitU;
float TIMEtest, OnTimeResults;
float offTime = 15*60*60*1000; //Initialize the default offTime to 15 hours converted to milliseconds. (15 Hours/1)*(60 minutes/1 Hour)*(60 seconds/1 Minute)*(1000 ms/1 second)
unsigned long lastReceivedTime = 0; //The last time a time was received from the Android app/user to say when to trigger the relay
int timeElapsedCnt = 0; //Time elapsed counter

void setup() 
{ //Start of void setup
  Serial.begin(115200); //Starts the serial communication setting the baud rate
  SerialBT.begin(""PrusaMiniTimerRelay1""); //Bluetooth device name
  pinMode(relPin, OUTPUT);

  digitalWrite(relPin, LOW); //Start with the active high relay off
  delay(1000);
} //End of void setup

void loop() 
{ //Start of void loop
  if (SerialBT.available()) { //Reads from the ESP32 bluetooth receiving from the paired device
    incomingSig=SerialBT.read(); //Reads from the ESP32 Bluetooth and stores it to the incoming Sig variable
    //Serial.println(incomingSig); //Prints to the Serial Monitor the contents of the incomingSig variable
  }//End of if (SerialBT.available()) statement

      switch(incomingSig)  //Reads the incoming blutetooth serial connection and decides what to do with it
    {
      case 'U':
        OnTimeResults = readOnTimeD(); //Calls the readOnTime function which extracts the new on time for the LED strip the user desires
        //OnTimeResults = OnTimeResults*1000; //Converts user input of seconds to milliseconds
        //Serial.println(OnTimeResults, 4); //For some reason after sending the correct time OnTimeResults throws some zeros. The ,4 displays to 4 decimal places
        if(OnTimeResults>0) //This eliminates the extra zeros that show up
        { //Start of if(OnTimeResults>0)
          //Serial.println(OnTimeResults, 4);
          offTime = OnTimeResults*60*60*1000; //Convert the user given time to milliseconds
          //Serial.println(offTime);
          lastReceivedTime = millis();
        } //End of if(OnTimeResults>0)
        break;
    }//End of switch statement

  delay(20); //Delay between readings from Bluetooth
  
  if ((millis() - lastReceivedTime) > offTime) //Note: I found through the use of the Time has elapsed debugging serial print below that the trigger mechanism continually triggers the output after the time has elapsed.  For a relay module that isn't an issue.  Just be aware that if your device shouldn't be continually triggered it might be a better idea to figure out a way to trigger only once (maybe put a counter in this if statement only trigger when that counter is 1). I ended up implementing what I was talking about in the nested if statement below if(timeElapsedCnt>0 && timeElapsedCnt<2)
  { //Start of if ((millis() - lastReceivedTime) > offTime)
    //Serial.println(""Time has elapsed"");
    //digitalWrite(relPin,HIGH);
    timeElapsedCnt++;
    if(timeElapsedCnt>0 && timeElapsedCnt<2) //Trigger the output only when timeElapsedCnt equals 1
    {  //Start of if(timeElapsedCnt>0 && timeElapsedCnt<2)
      //Serial.println(""Time has elapsed"");
      digitalWrite(relPin,HIGH);
    } //End of if(timeElapsedCnt>0 && timeElapsedCnt<2)
  } //End of if ((millis() - lastReceivedTime) > offTime)
  
} //End of void loop

float readOnTimeD()
{ //Version of readOnTime that reads decimal values
  String incomingSigS;
  char y;
  
  for (int i=0; i<7; i++) //string begins with capital U and ends with lowercase u it has up to 6 digits in between
  {
    y=SerialBT.read(); //Reads one character at a time from the serial connection and stores it to the char type variable y
    incomingSigS=String(incomingSigS + y); //Builds a string out of the incoming characters i.e. converts character type to string type
    //Serial.print(incomingSigS);
    //Serial.println("""");
  }
  
  PosUI=incomingSigS.indexOf(""U""); //Obtains the index of the start character for the on time
  PosuI=incomingSigS.indexOf(""u""); //Obtains the index of the end character for the on time
  LastDigitU=PosuI-1; //Index of the last digit of the on time is always one less than the end character
  TIMEtest=incomingSigS.substring(PosUI+1, PosuI).toFloat(); //Parses out the on time Value
  return TIMEtest;
}//End of readOnTimee function definition

//References
//Reference 1- BathroomLEDStripControlRev4b.ino

//int readOnTime()
//{
//  String incomingSigS;
//  char y;
//  
//  for (int i=0; i<4; i++) //string begins with capital U and ends with lowercase u it has up to 3 digits in between
//  {
//    y=SerialBT.read(); //Reads one character at a time from the serial connection and stores it to the char type variable y
//    incomingSigS=String(incomingSigS + y); //Builds a string out of the incoming characters i.e. converts character type to string type
//    //Serial.print(incomingSigS);
//    //Serial.println("""");
//  }
//  
//  PosUI=incomingSigS.indexOf(""U""); //Obtains the index of the start character for the on time
//  PosuI=incomingSigS.indexOf(""u""); //Obtains the index of the end character for the on time
//  LastDigitU=PosuI-1; //Index of the last digit of the on time is always one less than the end character
//  TIMEtest=incomingSigS.substring(PosUI+1, PosuI).toInt(); //Parses out the on time Value
//  return TIMEtest;
//}//End of readOnTimee function definition"
PMUd9nu6,345D,volochai,C++,Wednesday 27th of September 2023 02:02:53 PM CDT,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#pragma GCC optimize(""Ofast"")
#pragma GCC target(""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"")

#define ll long long
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define watch(x) cout << (#x) << "" : "" << x << '\n'
#define boost ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

using namespace std;
using namespace __gnu_pbds;

const int N = 1e5 + 128;
int cnt[N], len[N];
vector <int> seg[N];
int st[N][2];
gp_hash_table <int, vector<pair<int, int>>> g;
gp_hash_table <int, int> in, out;
int n;
unordered_set <int> vertices;

bool pathExist() {
    int cnt0 = 0, cnt1 = 0;
    bool ok = true;
    for (auto& i : vertices)
        if (in[i]-out[i] == 1)
            cnt0++;
        else if (out[i]-in[i] == 1)
            cnt1++;
        else
            ok &= (in[i] == out[i]);

    return (ok && (cnt0 + cnt1 == 0 || (cnt0 == 1 && cnt1 == 1)));
}

int findStart() {
    for (auto& i : vertices)
        if (out[i] - in[i] == 1)
            return i;
    return -1;
}

int findEnd() {
    for (auto& i : vertices)
        if (in[i] - out[i] == 1)
            return i;
    return -1;
}

vector <int> res;

void dfs(int v) {
    while (!g[v].empty()) {
        auto [nxt, id] = g[v].back(); g[v].pop_back();
        dfs(nxt);
        res.push_back(id);
    }
}

vector <int> getPath() {
    int start = findStart(), finish = findEnd();
    if (start != -1 && finish != -1)
        g[finish].push_back(make_pair(start, n + 1));
    dfs((start == -1 ? st[0][0] : start));

    int need = n + (start != -1 && finish != -1);
    if ((int)res.size() != need)
        return {};

    if (start != -1 && finish != -1) {
        int pos = find(all(res), n + 1) - res.begin();
        vector <int> total_res;

        for (int i = pos + 1; i < (int)res.size(); i++)
            total_res.push_back(res[i]);
        for (int i = 0; i < pos; i++)
            total_res.push_back(res[i]);

        res = vector<int>(total_res.rbegin(), total_res.rend());
    } else {
        reverse(all(res));
    }

    return res;
}

void solve() {
    cin >> n;
    unordered_set <int> total;

    for (int i = 0; i < n; i++) {
        cin >> cnt[i] >> len[i];
        seg[i].resize(cnt[i]);
        for (auto& x : seg[i])
            cin >> x;
        for (int j = 1; j < cnt[i]; j++)
            total.insert(seg[i][j]-seg[i][j-1]);
        st[i][0] = seg[i][0];
        st[i][1] = len[i]-seg[i][cnt[i]-1];
    }

    if ((int)total.size() > 1) {
        cout << ""No\n"";
        return;
    }

    if (total.empty()) {
        vector <int> first, last;
        for (int i = 0; i < n; i++)
            first.push_back(st[i][0]), last.push_back(st[i][1]);
        sort(all(first)); sort(all(last));

        for (int a : {0, 1})
            for (int b : {n - 1, n - 2})
                if (0 <= a && a < (int)first.size() && 0 <= b && b < (int)last.size())
                    total.insert(first[a] + last[b]);

        for (int a : {n - 1, n - 2})
            for (int b : {0, 1})
                if (0 <= a && a < (int)first.size() && 0 <= b && b < (int)last.size())
                    total.insert(first[a] + last[b]);
    }

    for (auto& k : total) {
        g.clear(); in.clear(); out.clear(); vertices.clear();
        for (int i = 0; i < n; i++) {
            int u = st[i][0];
            int v = k - st[i][1];

            g[u].push_back(make_pair(v, i + 1));
            in[v]++; out[u]++;

            vertices.insert(v); vertices.insert(u);
        }

        if (!pathExist())
            continue;

        vector <int> ans = getPath();

        if (ans.empty())
            continue;

        cout << ""Yes\n"";
        for (auto c : ans)
            cout << c << ' ';
        cout << '\n';
        return;
    }

    cout << ""No\n"";

}

main() {
    boost;
    solve();
    return 0;
}
"
sNfeCcDR,Untitled,skylak3,Go,Wednesday 27th of September 2023 01:59:03 PM CDT,"package main

import (
	""bufio""
	""errors""
	""fmt""
	""os""
)

var (
	gay = errors.New(""Grasshoppeer is already on the target"")
)

func findSubstInStrArr(a [][]rune, b []rune) (int, error) {
	l, r := 0, len(a)-1
	for r-l > 1 {
		m := (l + r) / 2
		g := a[m][0:len(b)]
		if string(g) == string(b) {
			return m, nil
		}

		if string(g) > string(b) {
			r = m
		} else {
			l = m
		}
	}
	for i := 0; i < len(b); i++ {
		if b[i] != a[l][i] {
			return 0, gay
		}
	}
	return l, nil
}

func main() {
	var (
		n int
	)
	fmt.Scanln(&n)
	a := make([][]rune, n)
	a_str := make([]string, n)
	for i := 0; i < n; i++ {
		s := bufio.NewScanner(os.Stdin)
		s.Scan()
		a[i] = []rune(s.Text())
		a_str[i] = s.Text()
	}
	for i := 0; i < n; i++ {
		s := bufio.NewScanner(os.Stdin)
		s.Scan()
		b := []rune(s.Text())
		ans, err := findSubstInStrArr(a, b)

		if err == gay {
			fmt.Println(""Не найдено"")
		} else {
			fmt.Println(a_str[ans])
		}
	}
}
"
Y40fm1RG,yandex5,skylak3,Go,Wednesday 27th of September 2023 01:47:27 PM CDT,"package main

import (
	""bufio""
	""fmt""
	""os""
)

func findSubstInStrArr(a [][]rune, b []rune) string {
	l, r := 0, len(a)-1
	for r-l > 1 {
		m := (l + r) / 2
		g := a[m][0:len(b)]
		if string(g) == string(b) {
			return string(a[m])
		}

		if string(g) > string(b) {
			r = m
		} else {
			l = m
		}
	}
	for i := 0; i < len(b); i++ {
		if b[i] != a[l][i] {
			return ""Не найдено""
		}
	}
	return string(a[l])
}

func main() {
	var (
		n int
	)
	fmt.Scanln(&n)
	a := make([][]rune, n)
	for i := 0; i < n; i++ {
		s := bufio.NewScanner(os.Stdin)
		s.Scan()
		a[i] = []rune(s.Text())
	}
	for i := 0; i < n; i++ {
		s := bufio.NewScanner(os.Stdin)
		s.Scan()
		b := []rune(s.Text())
		fmt.Println(findSubstInStrArr(a, b))
	}
}
"
nK3sAsSp,ServerError: received 503 HTTP response,Vault-TecTradingCo,Python,Wednesday 27th of September 2023 01:30:52 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/main.py"", line 57, in wrapper
    job_func(*args, **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/main.py"", line 85, in comment_listener
    for comment in fallout76marketplace.stream.comments(skip_existing=True):
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/praw/models/util.py"", line 138, in stream_generator
    for item in reversed(list(function(limit=limit, **function_kwargs))):
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/praw/models/listing/generator.py"", line 63, in __next__
    self._next_batch()
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/praw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/praw/util/deprecate_args.py"", line 43, in wrapped
    return func(**dict(zip(_old_args, args)), **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 712, in get
    return self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 517, in _objectify_request
    self.request(
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/praw/util/deprecate_args.py"", line 43, in wrapped
    return func(**dict(zip(_old_args, args)), **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 941, in request
    return self._core.request(
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/prawcore/sessions.py"", line 330, in request
    return self._request_with_retries(
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/prawcore/sessions.py"", line 253, in _request_with_retries
    return self._do_retry(
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/prawcore/sessions.py"", line 162, in _do_retry
    return self._request_with_retries(
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/prawcore/sessions.py"", line 253, in _request_with_retries
    return self._do_retry(
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/prawcore/sessions.py"", line 162, in _do_retry
    return self._request_with_retries(
  File ""/root/Bots/Fallout76MarketplaceKarmaBot/venv/lib/python3.10/site-packages/prawcore/sessions.py"", line 266, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status_code](response)
prawcore.exceptions.ServerError: received 503 HTTP response
"
LReMSWWZ,ServerError: received 503 HTTP response,Vault-TecTradingCo,Python,Wednesday 27th of September 2023 01:30:22 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/main.py"", line 258, in main
    for comment in comment_stream:
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/util.py"", line 138, in stream_generator
    for item in reversed(list(function(limit=limit, **function_kwargs))):
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/listing/generator.py"", line 63, in __next__
    self._next_batch()
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/util/deprecate_args.py"", line 43, in wrapped
    return func(**dict(zip(_old_args, args)), **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 712, in get
    return self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 517, in _objectify_request
    self.request(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/util/deprecate_args.py"", line 43, in wrapped
    return func(**dict(zip(_old_args, args)), **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 941, in request
    return self._core.request(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/src/prawcore/prawcore/sessions.py"", line 325, in request
    return self._request_with_retries(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/src/prawcore/prawcore/sessions.py"", line 251, in _request_with_retries
    return self._do_retry(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/src/prawcore/prawcore/sessions.py"", line 161, in _do_retry
    return self._request_with_retries(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/src/prawcore/prawcore/sessions.py"", line 251, in _request_with_retries
    return self._do_retry(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/src/prawcore/prawcore/sessions.py"", line 161, in _do_retry
    return self._request_with_retries(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/src/prawcore/prawcore/sessions.py"", line 264, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status_code](response)
prawcore.exceptions.ServerError: received 503 HTTP response
"
CZgFbZ3R,lesson19_322,Petro_zzz,C++,Wednesday 27th of September 2023 01:26:40 PM CDT,"#include <iostream>

using namespace std;

void sum(int a, int b) {
	b = 17;
	cout << a << "" "" << b << endl;
}

int solve_eq(double coeff[], double sol[]) {
	// returns number of roots
	// koeff = {a, b, c}
	// a * x * x + b * x + c = 0, sol = {x1, x2}
	const double a = coeff[0],
		b = coeff[1],
		c = coeff[2];
	double eps = DBL_EPSILON; // 1.0e-10;//_DOUBLE_EPS;
	if (abs(a) <= eps) {
		sol[0] = -c / b;
		return 1;
	}	
	// discriminant
	double d = b * b - 4 * a * c;
	if (d < 0) {
		return 0;
	}
	d = sqrt(d);
	sol[0] = (-b - d) / (2 * a);
	sol[1] = (-b + d) / (2 * a);
	return 2;
}

double check_solve_eq(double coeff[], double x) {
	const double a = coeff[0],
		b = coeff[1],
		c = coeff[2];
	return a * x * x + b * x + c;
}

void analitic_task() {
	double abc[]{-1, -2, -5};
	double xs[2];
	int num = solve_eq(abc, xs);
	
	for (int k = 0; k < num; k++)
		cout << ""root: "" <<  xs[k] << "" ""
			 << ""precision: "" 
		     << check_solve_eq(abc, xs[k]) << endl;
	cout << endl;
}

double check_function(double params[], double x) {	
	return params[0] * tan(params[1] * x) - params[2];
}

void numeric_task() {
	// function(x)
	double p[]{1.1, 0.5, 10};
	double val;
	double sol = -100;
	double min = abs(check_function(p, sol));
	for (double x = -100; x <= 100; x += 0.00001) {
		val = check_function(p, x);
		if (abs(val) < min) {
			min = abs(val);
			sol = x;
		}
		//if(abs(val) < 0.02)
		//	cout << x << "" "" << val << endl;
	}
	cout << sol << "" "" << min << endl;
}

void test_colors() {
	cout << ""\033[33mTest"" << endl;
	cout << ""Hoba"";
	for (int id = 0; id <= 108; id++) {
		cout << ""\033["" << id << ""m "" 
			<< id << ""\033[0m"";
		if ((id + 1) % 20 == 0)
			cout << endl;
	}
	cout << endl;
	cout << ""\033[41;32m GOOD DAY \033[0m"" << endl;
}

int main() {
	//analitic_task();
	//numeric_task();
	/*
	int a = 4; 
	int b = -4;
	sum(a, b);
	cout << a << "" "" << b << endl;
	*/
	test_colors();

	return 0;
}"
TedMP0QG,Untitled,Void_Ptr_YT,C#,Wednesday 27th of September 2023 01:24:58 PM CDT,"﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;

public class MyFireBaseRemoteConfig : MonoBehaviour {
	Firebase.DependencyStatus dependencyStatus = Firebase.DependencyStatus.UnavailableOther;
	// Use this for initialization
	void Start() {
		Firebase.FirebaseApp.CheckAndFixDependenciesAsync().ContinueWith(task => {
			dependencyStatus = task.Result;
			if (dependencyStatus == Firebase.DependencyStatus.Available) {
				InitializeFirebase();
			} else {
				Debug.LogError(
					""Could not resolve all Firebase dependencies: "" + dependencyStatus);
			}
		});
	}

	void InitializeFirebase() {
		System.Collections.Generic.Dictionary<string, object> defaults =
			new System.Collections.Generic.Dictionary<string, object>();

		// These are the values that are used if we haven't fetched data from the
		// server
		// yet, or if we ask for values that the server doesn't have:
		defaults.Add(""config_test_string"", ""default local string"");
		defaults.Add(""config_test_int"", 1);
		defaults.Add(""config_test_float"", 1.0);
		defaults.Add(""config_test_bool"", false);

		Firebase.RemoteConfig.FirebaseRemoteConfig.SetDefaults(defaults);
		Debug.Log(""Remote config ready!"");
	}
	public void FetchFireBase() {
		FetchDataAsync();
	}
	public void ShowData() {
		//   DebugLog(""config_test_string: "" +
		//        Firebase.RemoteConfig.FirebaseRemoteConfig.GetValue(""config_test_string"").StringValue);
		Debug.Log(""maxCountToShowAdmob: "" +
			Firebase.RemoteConfig.FirebaseRemoteConfig.GetValue(""maxCountToShowAdmob"").LongValue);
		//   DebugLog(""config_test_float: "" +
		//            Firebase.RemoteConfig.FirebaseRemoteConfig.GetValue(""config_test_float"").DoubleValue);
		//   DebugLog(""config_test_bool: "" +
		//            Firebase.RemoteConfig.FirebaseRemoteConfig.GetValue(""config_test_bool"").BooleanValue);
	}

	// Start a fetch request.
	public Task FetchDataAsync() {
		Debug.Log(""Fetching data..."");
		// FetchAsync only fetches new data if the current data is older than the provided
		// timespan.  Otherwise it assumes the data is ""recent enough"", and does nothing.
		// By default the timespan is 12 hours, and for production apps, this is a good
		// number.  For this example though, it's set to a timespan of zero, so that
		// changes in the console will always show up immediately.
		System.Threading.Tasks.Task fetchTask = Firebase.RemoteConfig.FirebaseRemoteConfig.FetchAsync(
			TimeSpan.Zero);
		return fetchTask.ContinueWith(FetchComplete);
	}

	void FetchComplete(Task fetchTask) {
		if (fetchTask.IsCanceled) {
			Debug.Log(""Fetch canceled."");
		} else if (fetchTask.IsFaulted) {
			Debug.Log(""Fetch encountered an error."");
		} else if (fetchTask.IsCompleted) {
			Debug.Log(""Fetch completed successfully!"");
		}

		var info = Firebase.RemoteConfig.FirebaseRemoteConfig.Info;
		switch (info.LastFetchStatus) {
			case Firebase.RemoteConfig.LastFetchStatus.Success:
				Firebase.RemoteConfig.FirebaseRemoteConfig.ActivateFetched();
				Debug.Log(String.Format(""Remote data loaded and ready (last fetch time {0})."",
					info.FetchTime));
				break;
			case Firebase.RemoteConfig.LastFetchStatus.Failure:
				switch (info.LastFetchFailureReason) {
					case Firebase.RemoteConfig.FetchFailureReason.Error:
						Debug.Log(""Fetch failed for unknown reason"");
						break;
					case Firebase.RemoteConfig.FetchFailureReason.Throttled:
						Debug.Log(""Fetch throttled until "" + info.ThrottledEndTime);
						break;
				}
				break;
			case Firebase.RemoteConfig.LastFetchStatus.Pending:
				Debug.Log(""Latest Fetch call still pending."");
				break;
		}
	}
}"
dDka1bud,Untitled,TorroesPrime,Python,Wednesday 27th of September 2023 01:24:51 PM CDT,"from bs4 import BeautifulSoup
src = open(""source.txt"",'r',encoding=""UTF-8"")
content = BeautifulSoup(src, ""lxml"")
table = content.find(name=""table"")
data = []
for row in table.find_all(name=""tr""):
    row_data = []
    for cell in row.find_all(name=""td""):
        datastr = str(cell.text)
        datastr.replace(""\n"","""")
        datastr.replace(""\t"","""")
        datastr.strip()
        for char in datastr:
            if char == ""\t"":
                print(""tab"")
        print(datastr)"
nW2g62nH,testing pointer,RicardasSim,C,Wednesday 27th of September 2023 01:02:53 PM CDT,"/*
test_file.txt

1234567890
*/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

bool LoadFileToZTMemBufferTest( char *file_name,
                                char **p_buffer,
                                size_t *p_size )
{

    FILE *fp = NULL;
    *p_buffer = NULL;
    *p_size = 0;
    size_t file_size;
    size_t buffer_size;
    size_t result;

    fp = fopen( file_name, ""rb"" );

    if(!fp)
    {
        printf(""Error: cannot open file \""%s\""\n"", file_name );
        return false;
    }

    fseek( fp, 0, SEEK_END );

    file_size = ftell( fp );

    fseek( fp, 0, SEEK_SET );

    buffer_size = file_size + 1;

    *p_buffer = calloc( buffer_size, sizeof(char) );

    if( !*p_buffer )
    {
        printf(""Error: memory allocation error\n"");
        fclose( fp );
        return false;
    }

    result = fread( *p_buffer, 1, file_size, fp );

    if( result != file_size )
    {
        free(*p_buffer);
        *p_buffer = NULL;
        fclose(fp);
        printf(""Error: error reading file\n"");
        return false;
    }

    fclose( fp );

    *p_size = buffer_size;


    //v1

    char *p_tmp = *p_buffer;

    printf(""(1a) %p\n"", (void*) p_tmp);

    p_tmp += file_size;

    printf(""(1b) %p\n"", (void*) p_tmp);

    *p_tmp = '\0';

    //v2

    printf(""(2a) %p\n"", (void*) (*p_buffer + file_size) );

    *( *p_buffer + file_size ) = '\0';

    //v3

    (*p_buffer)[file_size] = '\0';

    printf(""(3a) %p\n"", (void*) &(*p_buffer)[file_size] );


    // test

    printf( ""(test 1) %p\n"", (void*) p_buffer);
    printf( ""(test 2) %p\n"", (void*) p_buffer[0]);
    printf( ""(test 3) %p\n"", (void*) *p_buffer);


    return true;
}

int main()
{

    char *p_buff = NULL;
    size_t size = 0;

    printf( ""Buffer address before: %p\n"", (void*) p_buff);
    printf( ""Address of pointer: %p\n"", (void*) &p_buff);

    if(!LoadFileToZTMemBufferTest( ""test_file.txt"", &p_buff, &size ))
    {
        printf(""Error: LoadFileToZTMemBufferTest\n"");
        return 1;
    }

    printf(""Buffer size: %zu\n"", size);

    printf( ""Buffer address after: %p\n"", (void*) p_buff);

    free(p_buff);

    return 0;
}

/*
output:

Buffer address before: (nil)
Address of pointer: 0x7fffc4573678
(1a) 0x561131e698a0
(1b) 0x561131e698aa
(2a) 0x561131e698aa
(3a) 0x561131e698aa
(test 1) 0x7fffc4573678
(test 2) 0x561131e698a0
(test 3) 0x561131e698a0
Buffer size: 11
Buffer address after: 0x561131e698a0

*/"
DUd22cmQ,Untitled,PCG06,C,Wednesday 27th of September 2023 01:00:51 PM CDT,"// include/battle_util.h

u32 CalcMoveBasePowerAfterModifiers(u32 move, u32 battlerAtk, u32 battlerDef, u32 moveType, bool32 updateFlags, u32 atkAbility, u32 defAbility, u32 holdEffectAtk, u32 weather);

// src/battle_controller.c

static void ChangeMoveDisplayMode(u32 battler)
{
    static const u8 gPowerText[] =  _(""Power: {STR_VAR_1}"");
    static const u8 gPowerZeroText[] =  _(""   0"");
    static const u8 gAccuracyText[] =  _(""Acc: {STR_VAR_1}"");
    static const u8 gNoMissText[] = _(""  No Miss"");
    static const u8 gContactText[] =  _(""Contact"");
    static const u8 gNoContactText[] =  _(""No Contact"");

    u8 power = 0;
    u8 accuracy = 0;
    u16 move = MOVE_NONE;
    u32 battlerAtk;
    u32 battlerDef;
    u32 moveType;
    u32 atkAbility;
    u32 defAbility;
    u32 holdEffectAtk;
    u32 weather;
    bool32 updateFlags;


	struct ChooseMoveStruct *moveInfo = (struct ChooseMoveStruct*)(&gBattleResources->bufferA[battler][4]);

    //Move Name
    move = moveInfo->moves[gMoveSelectionCursor[battler]];
    StringCopy(gDisplayedStringBattle, gMoveNames[move]);

    BattlePutTextOnWindow(gDisplayedStringBattle, B_WIN_MOVE_NAME_1);
    PutWindowTilemap(B_WIN_MOVE_NAME_1 );
	CopyWindowToVram(B_WIN_MOVE_NAME_1 , 3);

    //Move Power
    power = CalcMoveBasePowerAfterModifiers(move, battlerAtk, battlerDef, moveType, updateFlags, atkAbility, defAbility, holdEffectAtk, weather);
    if (gBattleMoves[move].power == 0)
    {
        StringExpandPlaceholders(gStringVar1, gPowerZeroText);
    }
    else
    {
        ConvertIntToDecimalStringN(gStringVar1, power, STR_CONV_MODE_RIGHT_ALIGN, 4);
    }
	StringExpandPlaceholders(gStringVar4, gPowerText);
    BattlePutTextOnWindow(gStringVar4, B_WIN_MOVE_NAME_3);
    PutWindowTilemap(B_WIN_MOVE_NAME_3 );
	CopyWindowToVram(B_WIN_MOVE_NAME_3 , 3);

    //Move Accuracy
    accuracy = gBattleMoves[move].accuracy;
    if (gBattleMoves[move].accuracy == 0)
    {
        StringExpandPlaceholders(gStringVar1, gNoMissText);
    }
    else
    {
        ConvertIntToDecimalStringN(gStringVar1, accuracy, STR_CONV_MODE_RIGHT_ALIGN, 4);
    }
	StringExpandPlaceholders(gStringVar4, gAccuracyText);
    BattlePutTextOnWindow(gStringVar4, B_WIN_MOVE_NAME_4);
    PutWindowTilemap(B_WIN_MOVE_NAME_4 );
	CopyWindowToVram(B_WIN_MOVE_NAME_4 , 3);

    //Contact Move
    if(!gBattleMoves[move].makesContact == FALSE)
	    StringExpandPlaceholders(gStringVar4, gContactText);
    else
        StringExpandPlaceholders(gStringVar4, gNoContactText);

    BattlePutTextOnWindow(gStringVar4, B_WIN_MOVE_NAME_2);
    PutWindowTilemap(B_WIN_MOVE_NAME_2 );
	CopyWindowToVram(B_WIN_MOVE_NAME_2 , 3);
}

// src/battle_util.c

u32 CalcMoveBasePowerAfterModifiers(u32 move, u32 battlerAtk, u32 battlerDef, u32 moveType, bool32 updateFlags, u32 atkAbility, u32 defAbility, u32 holdEffectAtk, u32 weather)
{
    u32 i;
    u32 holdEffectParamAtk;
    u32 basePower = CalcMoveBasePower(move, battlerAtk, battlerDef, defAbility, weather);
    uq4_12_t holdEffectModifier;
    uq4_12_t modifier = UQ_4_12(1.0);
    u32 atkSide = GetBattlerSide(battlerAtk);

    // move effect
    switch (gBattleMoves[move].effect)
    {
    case EFFECT_FACADE:
        if (gBattleMons[battlerAtk].status1 & (STATUS1_BURN | STATUS1_PSN_ANY | STATUS1_PARALYSIS | STATUS1_FROSTBITE))
            modifier = uq4_12_multiply(modifier, UQ_4_12(2.0));
        break;
    case EFFECT_BRINE:
        if (gBattleMons[battlerDef].hp <= (gBattleMons[battlerDef].maxHP / 2))
            modifier = uq4_12_multiply(modifier, UQ_4_12(2.0));
        break;
    case EFFECT_BARB_BARRAGE:
    case EFFECT_VENOSHOCK:
        if (gBattleMons[battlerDef].status1 & STATUS1_PSN_ANY)
            modifier = uq4_12_multiply(modifier, UQ_4_12(2.0));
        break;
    case EFFECT_RETALIATE:
        if (gSideTimers[atkSide].retaliateTimer == 1)
            modifier = uq4_12_multiply(modifier, UQ_4_12(2.0));
        break;
    case EFFECT_SOLAR_BEAM:
        if (IsBattlerWeatherAffected(battlerAtk, (B_WEATHER_HAIL | B_WEATHER_SANDSTORM | B_WEATHER_RAIN | B_WEATHER_SNOW)))
            modifier = uq4_12_multiply(modifier, UQ_4_12(0.5));
        break;
    case EFFECT_STOMPING_TANTRUM:
        if (gBattleStruct->lastMoveFailed & gBitTable[battlerAtk])
            modifier = uq4_12_multiply(modifier, UQ_4_12(2.0));
        break;
    case EFFECT_BULLDOZE:
    case EFFECT_MAGNITUDE:
    case EFFECT_EARTHQUAKE:
        if (gFieldStatuses & STATUS_FIELD_GRASSY_TERRAIN && !(gStatuses3[battlerDef] & STATUS3_SEMI_INVULNERABLE))
            modifier = uq4_12_multiply(modifier, UQ_4_12(0.5));
        break;
    case EFFECT_KNOCK_OFF:
        #if B_KNOCK_OFF_DMG >= GEN_6
        if (gBattleMons[battlerDef].item != ITEM_NONE
            && CanBattlerGetOrLoseItem(battlerDef, gBattleMons[battlerDef].item))
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        #endif
        break;
    }

#if B_TERRAIN_TYPE_BOOST >= GEN_8
    #define TERRAIN_TYPE_BOOST UQ_4_12(1.3)
#else
    #define TERRAIN_TYPE_BOOST UQ_4_12(1.5)
#endif

    // various effects
    if (gProtectStructs[battlerAtk].helpingHand)
        modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
    if (gSpecialStatuses[battlerAtk].gemBoost)
        modifier = uq4_12_multiply(modifier, UQ_4_12(1.0) + sPercentToModifier[gSpecialStatuses[battlerAtk].gemParam]);
    if (gStatuses3[battlerAtk] & STATUS3_CHARGED_UP && moveType == TYPE_ELECTRIC)
        modifier = uq4_12_multiply(modifier, UQ_4_12(2.0));
    if (gStatuses3[battlerAtk] & STATUS3_ME_FIRST)
        modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
    if (IsBattlerTerrainAffected(battlerAtk, STATUS_FIELD_GRASSY_TERRAIN) && moveType == TYPE_GRASS)
        modifier = uq4_12_multiply(modifier, TERRAIN_TYPE_BOOST);
    if (IsBattlerTerrainAffected(battlerDef, STATUS_FIELD_MISTY_TERRAIN) && moveType == TYPE_DRAGON)
        modifier = uq4_12_multiply(modifier, UQ_4_12(0.5));
    if (IsBattlerTerrainAffected(battlerAtk, STATUS_FIELD_ELECTRIC_TERRAIN) && moveType == TYPE_ELECTRIC)
        modifier = uq4_12_multiply(modifier, TERRAIN_TYPE_BOOST);
    if (IsBattlerTerrainAffected(battlerAtk, STATUS_FIELD_PSYCHIC_TERRAIN) && moveType == TYPE_PSYCHIC)
        modifier = uq4_12_multiply(modifier, TERRAIN_TYPE_BOOST);
    #if B_SPORT_TURNS >= GEN_6
        if ((moveType == TYPE_ELECTRIC && gFieldStatuses & STATUS_FIELD_MUDSPORT)
            || (moveType == TYPE_FIRE && gFieldStatuses & STATUS_FIELD_WATERSPORT))
    #else
        if ((moveType == TYPE_ELECTRIC && AbilityBattleEffects(ABILITYEFFECT_FIELD_SPORT, 0, 0, ABILITYEFFECT_MUD_SPORT, 0))
            || (moveType == TYPE_FIRE && AbilityBattleEffects(ABILITYEFFECT_FIELD_SPORT, 0, 0, ABILITYEFFECT_WATER_SPORT, 0)))
    #endif
    #if B_SPORT_DMG_REDUCTION >= GEN_5
            modifier = uq4_12_multiply(modifier, UQ_4_12(0.23));
    #else
            modifier = uq4_12_multiply(modifier, UQ_4_12(0.5));
    #endif

    // attacker's abilities
    switch (atkAbility)
    {
    case ABILITY_TECHNICIAN:
        if (basePower <= 60)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_FLARE_BOOST:
        if (gBattleMons[battlerAtk].status1 & STATUS1_BURN && IS_MOVE_SPECIAL(move))
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_TOXIC_BOOST:
        if (gBattleMons[battlerAtk].status1 & STATUS1_PSN_ANY && IS_MOVE_PHYSICAL(move))
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_RECKLESS:
        if (IS_MOVE_RECOIL(move))
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.2));
        break;
    case ABILITY_IRON_FIST:
        if (gBattleMoves[move].punchingMove)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.2));
        break;
    case ABILITY_BRUTAL_LEGS:
        if (gBattleMoves[move].kickingMove)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.2));
        break;
    case ABILITY_SHEER_FORCE:
        if (gBattleMoves[move].sheerForceBoost)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
        break;
    case ABILITY_SAND_FORCE:
        if ((moveType == TYPE_STEEL || moveType == TYPE_ROCK || moveType == TYPE_GROUND)
            && weather & B_WEATHER_SANDSTORM)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
        break;
    case ABILITY_RIVALRY:
        if (AreBattlersOfOppositeGender(battlerAtk, battlerDef))
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.25));
        else
            modifier = uq4_12_multiply(modifier, UQ_4_12(0.75));
        break;
    case ABILITY_ANALYTIC:
        if (GetBattlerTurnOrderNum(battlerAtk) == gBattlersCount - 1 && move != MOVE_FUTURE_SIGHT && move != MOVE_DOOM_DESIRE)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
        break;
    case ABILITY_TOUGH_CLAWS:
        if (IsMoveMakingContact(move, battlerAtk))
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
        break;
    case ABILITY_STRONG_JAW:
        if (gBattleMoves[move].bitingMove)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_HARD_SPINNER:
        if (gBattleMoves[move].spinningMove)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_MEGA_LAUNCHER:
        if (gBattleMoves[move].pulseMove)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_WATER_BUBBLE:
        if (moveType == TYPE_WATER)
           modifier = uq4_12_multiply(modifier, UQ_4_12(2.0));
        break;
    case ABILITY_STEELWORKER:
        if (moveType == TYPE_STEEL)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_PIXILATE:
        if (moveType == TYPE_FAIRY && gBattleStruct->ateBoost[battlerAtk])
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.2));
        break;
    case ABILITY_GALVANIZE:
        if (moveType == TYPE_ELECTRIC && gBattleStruct->ateBoost[battlerAtk])
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.2));
        break;
    case ABILITY_REFRIGERATE:
        if (moveType == TYPE_ICE && gBattleStruct->ateBoost[battlerAtk])
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.2));
        break;
    case ABILITY_AERILATE:
        if (moveType == TYPE_FLYING && gBattleStruct->ateBoost[battlerAtk])
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.2));
        break;
    case ABILITY_NORMALIZE:
        if (moveType == TYPE_NORMAL && gBattleStruct->ateBoost[battlerAtk])
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.2));
        break;
    case ABILITY_PUNK_ROCK:
        if (gBattleMoves[move].soundMove)
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
        break;
    case ABILITY_STEELY_SPIRIT:
        if (moveType == TYPE_STEEL)
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_TRANSISTOR:
        if (moveType == TYPE_ELECTRIC)
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_DRAGONS_MAW:
        if (moveType == TYPE_DRAGON)
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_GORILLA_TACTICS:
        if (IS_MOVE_PHYSICAL(move))
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_ROCKY_PAYLOAD:
        if (moveType == TYPE_ROCK)
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_PROTOSYNTHESIS:
        {
            u8 atkHighestStat = GetHighestStatId(battlerAtk);
            if (weather & B_WEATHER_SUN
            && ((IS_MOVE_PHYSICAL(move) && atkHighestStat == STAT_ATK) || (IS_MOVE_SPECIAL(move) && atkHighestStat == STAT_SPATK)))
                modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
        }
        break;
    case ABILITY_QUARK_DRIVE:
        {
            u8 atkHighestStat = GetHighestStatId(battlerAtk);
            if (gFieldStatuses & STATUS_FIELD_ELECTRIC_TERRAIN
            && ((IS_MOVE_PHYSICAL(move) && atkHighestStat == STAT_ATK) || (IS_MOVE_SPECIAL(move) && atkHighestStat == STAT_SPATK)))
                modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
        }
        break;
    case ABILITY_ORICHALCUM_PULSE:
        if (weather & B_WEATHER_SUN)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
        break;
    case ABILITY_HADRON_ENGINE:
        if (gFieldStatuses & STATUS_FIELD_ELECTRIC_TERRAIN)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
        break;
    case ABILITY_SHARPNESS:
        if (gBattleMoves[move].slicingMove)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
        break;
    case ABILITY_SUPREME_OVERLORD:
        modifier = uq4_12_multiply(modifier, gBattleStruct->supremeOverlordModifier[battlerAtk]);
        break;
    }

    // field abilities
    if ((IsAbilityOnField(ABILITY_DARK_AURA) && moveType == TYPE_DARK)
     || (IsAbilityOnField(ABILITY_FAIRY_AURA) && moveType == TYPE_FAIRY))
    {
        if (IsAbilityOnField(ABILITY_AURA_BREAK))
            modifier = uq4_12_multiply(modifier, UQ_4_12(0.75));
        else
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.33));
    }

    if (IsAbilityOnField(ABILITY_VESSEL_OF_RUIN) && atkAbility != ABILITY_VESSEL_OF_RUIN && IS_MOVE_SPECIAL(gCurrentMove))
        modifier = uq4_12_multiply(modifier, UQ_4_12(0.75));

    if (IsAbilityOnField(ABILITY_SWORD_OF_RUIN) && defAbility != ABILITY_SWORD_OF_RUIN && IS_MOVE_PHYSICAL(gCurrentMove))
        modifier = uq4_12_multiply(modifier, UQ_4_12(1.25));

    if (IsAbilityOnField(ABILITY_TABLETS_OF_RUIN) && atkAbility != ABILITY_TABLETS_OF_RUIN && IS_MOVE_PHYSICAL(gCurrentMove))
        modifier = uq4_12_multiply(modifier, UQ_4_12(0.75));

    if (IsAbilityOnField(ABILITY_BEADS_OF_RUIN) && defAbility != ABILITY_BEADS_OF_RUIN && IS_MOVE_SPECIAL(gCurrentMove))
        modifier = uq4_12_multiply(modifier, UQ_4_12(1.25));

    // attacker partner's abilities
    if (IsBattlerAlive(BATTLE_PARTNER(battlerAtk)))
    {
        switch (GetBattlerAbility(BATTLE_PARTNER(battlerAtk)))
        {
        case ABILITY_BATTERY:
            if (IS_MOVE_SPECIAL(move))
                modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
            break;
        case ABILITY_POWER_SPOT:
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.3));
            break;
        case ABILITY_STEELY_SPIRIT:
            if (moveType == TYPE_STEEL)
                modifier = uq4_12_multiply(modifier, UQ_4_12(1.5));
            break;
        }
    }

    // target's abilities
    switch (defAbility)
    {
    case ABILITY_HEATPROOF:
    case ABILITY_WATER_BUBBLE:
        if (moveType == TYPE_FIRE)
        {
            modifier = uq4_12_multiply(modifier, UQ_4_12(0.5));
            if (updateFlags)
                RecordAbilityBattle(battlerDef, defAbility);
        }
        break;
    case ABILITY_DRY_SKIN:
        if (moveType == TYPE_FIRE)
            modifier = uq4_12_multiply(modifier, UQ_4_12(1.25));
        break;
    case ABILITY_PROTOSYNTHESIS:
        {
            u8 defHighestStat = GetHighestStatId(battlerDef);
            if (weather & B_WEATHER_SUN
            && ((IS_MOVE_PHYSICAL(move) && defHighestStat == STAT_DEF) || (IS_MOVE_SPECIAL(move) && defHighestStat == STAT_SPDEF)))
                modifier = uq4_12_multiply(modifier, UQ_4_12(0.7));
        }
        break;
    case ABILITY_QUARK_DRIVE:
        {
            u8 defHighestStat = GetHighestStatId(battlerDef);
            if (gFieldStatuses & STATUS_FIELD_ELECTRIC_TERRAIN
            && ((IS_MOVE_PHYSICAL(move) && defHighestStat == STAT_DEF) || (IS_MOVE_SPECIAL(move) && defHighestStat == STAT_SPDEF)))
                modifier = uq4_12_multiply(modifier, UQ_4_12(0.7));
        }
        break;
    }

    holdEffectParamAtk = GetBattlerHoldEffectParam(battlerAtk);
    if (holdEffectParamAtk > 100)
        holdEffectParamAtk = 100;

    holdEffectModifier = UQ_4_12(1.0) + sPercentToModifier[holdEffectParamAtk];

    // attacker's hold effect
    switch (holdEffectAtk)
    {
    case HOLD_EFFECT_MUSCLE_BAND:
        if (IS_MOVE_PHYSICAL(move))
            modifier = uq4_12_multiply(modifier, holdEffectModifier);
        break;
    case HOLD_EFFECT_WISE_GLASSES:
        if (IS_MOVE_SPECIAL(move))
            modifier = uq4_12_multiply(modifier, holdEffectModifier);
        break;
    case HOLD_EFFECT_LUSTROUS_ORB:
        if (GET_BASE_SPECIES_ID(gBattleMons[battlerAtk].species) == SPECIES_PALKIA && (moveType == TYPE_WATER || moveType == TYPE_DRAGON))
            modifier = uq4_12_multiply(modifier, holdEffectModifier);
        break;
    case HOLD_EFFECT_ADAMANT_ORB:
        if (GET_BASE_SPECIES_ID(gBattleMons[battlerAtk].species) == SPECIES_DIALGA && (moveType == TYPE_STEEL || moveType == TYPE_DRAGON))
            modifier = uq4_12_multiply(modifier, holdEffectModifier);
        break;
    case HOLD_EFFECT_GRISEOUS_ORB:
        if (GET_BASE_SPECIES_ID(gBattleMons[battlerAtk].species) == SPECIES_GIRATINA && (moveType == TYPE_GHOST || moveType == TYPE_DRAGON))
            modifier = uq4_12_multiply(modifier, holdEffectModifier);
        break;
    case HOLD_EFFECT_SOUL_DEW:
    #if B_SOUL_DEW_BOOST >= GEN_7
        if ((gBattleMons[battlerAtk].species == SPECIES_LATIAS || gBattleMons[battlerAtk].species == SPECIES_LATIOS) && (moveType == TYPE_PSYCHIC || moveType == TYPE_DRAGON))
    #else
        if ((gBattleMons[battlerAtk].species == SPECIES_LATIAS || gBattleMons[battlerAtk].species == SPECIES_LATIOS) && !(gBattleTypeFlags & BATTLE_TYPE_FRONTIER) && IS_MOVE_SPECIAL(move))
    #endif
            modifier = uq4_12_multiply(modifier, holdEffectModifier);
        break;
    case HOLD_EFFECT_BUG_POWER:
    case HOLD_EFFECT_STEEL_POWER:
    case HOLD_EFFECT_GROUND_POWER:
    case HOLD_EFFECT_ROCK_POWER:
    case HOLD_EFFECT_GRASS_POWER:
    case HOLD_EFFECT_DARK_POWER:
    case HOLD_EFFECT_FIGHTING_POWER:
    case HOLD_EFFECT_ELECTRIC_POWER:
    case HOLD_EFFECT_WATER_POWER:
    case HOLD_EFFECT_FLYING_POWER:
    case HOLD_EFFECT_POISON_POWER:
    case HOLD_EFFECT_ICE_POWER:
    case HOLD_EFFECT_GHOST_POWER:
    case HOLD_EFFECT_PSYCHIC_POWER:
    case HOLD_EFFECT_FIRE_POWER:
    case HOLD_EFFECT_DRAGON_POWER:
    case HOLD_EFFECT_NORMAL_POWER:
    case HOLD_EFFECT_FAIRY_POWER:
        for (i = 0; i < ARRAY_COUNT(sHoldEffectToType); i++)
        {
            if (holdEffectAtk == sHoldEffectToType[i][0])
            {
                if (moveType == sHoldEffectToType[i][1])
                    modifier = uq4_12_multiply(modifier, holdEffectModifier);
                break;
            }
        }
        break;
    case HOLD_EFFECT_PLATE:
        if (moveType == ItemId_GetSecondaryId(gBattleMons[battlerAtk].item))
            modifier = uq4_12_multiply(modifier, holdEffectModifier);
        break;
    case HOLD_EFFECT_PUNCHING_GLOVE:
        if (gBattleMoves[move].punchingMove)
           modifier = uq4_12_multiply(modifier, UQ_4_12(1.1));
        break;
    }
    return uq4_12_multiply_by_int_half_down(modifier, basePower);
}
#undef TERRAIN_TYPE_BOOST"
UQuB3Y9Z,Helferpillen - Scam - Spam [9/2023],bombaires,HTML,Wednesday 27th of September 2023 12:57:30 PM CDT,"<a href=""mailto:info@helferpillen.org"">info@helferpillen.org</a>
<a href=""mailto:m@marketion.ru"">m@marketion.ru</a>
<a href=""mailto:helferpillen@gmail.com"">helferpillen@gmail.com</a>
<a href=""mailto:h.elf.e.rpil.len@gmail.com"">h.elf.e.rpil.len@gmail.com</a>
<a href=""mailto:h.e.lf.e.r.p.i.l.le.n@gmail.com"">h.e.lf.e.r.p.i.l.le.n@gmail.com</a>
<a href=""mailto:helferpille.n@gmail.com"">helferpille.n@gmail.com</a>
<a href=""mailto:h.e.lf.e.rpill.en@gmail.com"">h.e.lf.e.rpill.en@gmail.com</a>
<a href=""mailto:h.elf.e.r.p.i.lle.n@gmail.com"">h.elf.e.r.p.i.lle.n@gmail.com</a>
<a href=""mailto:h.el.fer.p.i.l.l.e.n@gmail.com"">h.el.fer.p.i.l.l.e.n@gmail.com</a>
<a href=""mailto:hel.fer.pi.l.l.en@gmail.com"">hel.fer.pi.l.l.en@gmail.com</a>
<a href=""mailto:helf.er.pi.llen@gmail.com"">helf.er.pi.llen@gmail.com</a>
<a href=""mailto:h.e.lfe.rpi.l.len@gmail.com"">h.e.lfe.rpi.l.len@gmail.com</a>
<a href=""mailto:h.e.l.f.er.pillen@gmail.com"">h.e.l.f.er.pillen@gmail.com</a>
<a href=""mailto:helfer.p.ill.e.n@gmail.com"">helfer.p.ill.e.n@gmail.com</a>
<a href=""mailto:helfe.rpi.l.l.e.n@gmail.com"">helfe.rpi.l.l.e.n@gmail.com</a>
<a href=""mailto:h.e.lfer.pi.llen@gmail.com"">h.e.lfer.pi.llen@gmail.com</a>
<a href=""mailto:h.e.l.ferpil.l.en@gmail.com"">h.e.l.ferpil.l.en@gmail.com</a>
<a href=""mailto:he.l.fe.r.p.illen@gmail.com"">he.l.fe.r.p.illen@gmail.com</a>
<a href=""mailto:he.lferpi.ll.e.n@gmail.com"">he.lferpi.ll.e.n@gmail.com</a>
<a href=""mailto:h.e.lfe.rp.i.ll.e.n@gmail.com"">h.e.lfe.rp.i.ll.e.n@gmail.com</a>
<a href=""mailto:hel.fer.p.illen@gmail.com"">hel.fer.p.illen@gmail.com</a>
<a href=""mailto:he.lf.e.rp.i.l.l.e.n@gmail.com"">he.lf.e.rp.i.l.l.e.n@gmail.com</a>
<a href=""mailto:helfe.r.pi.ll.e.n@gmail.com"">helfe.r.pi.ll.e.n@gmail.com</a>
<a href=""mailto:h.e.lfe.r.p.i.ll.en@gmail.com"">h.e.lfe.r.p.i.ll.en@gmail.com</a>
<a href=""mailto:h.e.lf.erpi.ll.e.n@gmail.com"">h.e.lf.erpi.ll.e.n@gmail.com</a>
<a href=""mailto:helf.e.rp.il.l.e.n@gmail.com"">helf.e.rp.il.l.e.n@gmail.com</a>
<a href=""mailto:h.e.l.f.er.p.i.l.len@gmail.com"">h.e.l.f.er.p.i.l.len@gmail.com</a>
<a href=""mailto:hel.fe.r.pil.l.e.n@gmail.com"">hel.fe.r.pil.l.e.n@gmail.com</a>
<a href=""mailto:h.elfer.pill.e.n@gmail.com"">h.elfer.pill.e.n@gmail.com</a>
<a href=""mailto:h.e.l.f.erpi.l.len@gmail.com"">h.e.l.f.erpi.l.len@gmail.com</a>
<a href=""mailto:he.l.fer.pille.n@gmail.com"">he.l.fer.pille.n@gmail.com</a>
<a href=""mailto:h.e.lf.e.rp.i.ll.e.n@gmail.com"">h.e.lf.e.rp.i.ll.e.n@gmail.com</a>
<a href=""mailto:h.e.lf.e.r.p.i.ll.en@gmail.com"">h.e.lf.e.r.p.i.ll.en@gmail.com</a>
<a href=""mailto:helf.e.rp.i.l.l.e.n@gmail.com"">helf.e.rp.i.l.l.e.n@gmail.com</a>
<a href=""mailto:h.el.fer.pi.l.l.e.n@gmail.com"">h.el.fer.pi.l.l.e.n@gmail.com</a>
<a href=""mailto:h.elfer.p.i.lle.n@gmail.com"">h.elfer.p.i.lle.n@gmail.com</a>
<a href=""mailto:h.el.f.e.r.pi.l.len@gmail.com"">h.el.f.e.r.pi.l.len@gmail.com</a>
<a href=""mailto:helfe.r.pille.n@gmail.com"">helfe.r.pille.n@gmail.com</a>
<a href=""mailto:h.e.l.fe.rp.il.l.e.n@gmail.com"">h.e.l.fe.rp.il.l.e.n@gmail.com</a>
<a href=""mailto:hel.ferpi.l.len@gmail.com"">hel.ferpi.l.len@gmail.com</a>
<a href=""mailto:h.e.l.fer.pi.l.l.e.n@gmail.com"">h.e.l.fer.pi.l.l.e.n@gmail.com</a>
<a href=""mailto:h.el.fer.p.i.lle.n@gmail.com"">h.el.fer.p.i.lle.n@gmail.com</a>
<a href=""mailto:h.elf.e.rpi.l.len@gmail.com"">h.elf.e.rpi.l.len@gmail.com</a>
<a href=""mailto:h.e.lf.e.rpille.n@gmail.com"">h.e.lf.e.rpille.n@gmail.com</a>
<a href=""mailto:he.l.fer.p.ille.n@gmail.com"">he.l.fer.p.ille.n@gmail.com</a>
<a href=""mailto:h.el.f.erpillen@gmail.com"">h.el.f.erpillen@gmail.com</a>
<a href=""mailto:he.l.ferpi.l.l.e.n@gmail.com"">he.l.ferpi.l.l.e.n@gmail.com</a>
<a href=""mailto:h.e.lf.e.rpi.l.l.en@gmail.com"">h.e.lf.e.rpi.l.l.en@gmail.com</a>
<a href=""mailto:h.e.lf.e.r.pi.ll.en@gmail.com"">h.e.lf.e.r.pi.ll.en@gmail.com</a>
<a href=""mailto:h.e.l.ferpillen@gmail.com"">h.e.l.ferpillen@gmail.com</a>
<a href=""mailto:he.lfe.rp.i.l.len@gmail.com"">he.lfe.rp.i.l.len@gmail.com</a>
<a href=""mailto:he.lf.erpi.llen@gmail.com"">he.lf.erpi.llen@gmail.com</a>
<a href=""mailto:h.el.f.er.pil.len@gmail.com"">h.el.f.er.pil.len@gmail.com</a>
<a href=""mailto:he.lferpille.n@gmail.com"">he.lferpille.n@gmail.com</a>
<a href=""mailto:h.e.l.ferp.i.l.len@gmail.com"">h.e.l.ferp.i.l.len@gmail.com</a>
<a href=""mailto:h.elfe.r.pillen@gmail.com"">h.elfe.r.pillen@gmail.com</a>
<a href=""mailto:he.l.fe.r.p.i.l.l.en@gmail.com"">he.l.fe.r.p.i.l.l.en@gmail.com</a>
<a href=""mailto:h.e.l.fer.p.i.lle.n@gmail.com"">h.e.l.fer.p.i.lle.n@gmail.com</a>
<a href=""mailto:h.el.f.e.r.p.i.l.len@gmail.com"">h.el.f.e.r.p.i.l.len@gmail.com</a>
<a href=""mailto:h.elf.e.rpil.l.en@gmail.com"">h.elf.e.rpil.l.en@gmail.com</a>
<a href=""mailto:hel.f.er.pil.le.n@gmail.com"">hel.f.er.pil.le.n@gmail.com</a>
<a href=""mailto:h.e.l.f.er.pi.ll.e.n@gmail.com"">h.e.l.f.er.pi.ll.e.n@gmail.com</a>
<a href=""mailto:hel.f.e.r.p.ill.e.n@gmail.com"">hel.f.e.r.p.ill.e.n@gmail.com</a>
<a href=""mailto:h.e.l.f.erpille.n@gmail.com"">h.e.l.f.erpille.n@gmail.com</a>
<a href=""mailto:h.el.fe.r.p.i.l.le.n@gmail.com"">h.el.fe.r.p.i.l.le.n@gmail.com</a>
<a href=""mailto:helf.er.pi.l.le.n@gmail.com"">helf.er.pi.l.le.n@gmail.com</a>
<a href=""mailto:hel.ferp.ille.n@gmail.com"">hel.ferp.ille.n@gmail.com</a>
<a href=""mailto:hel.ferpi.l.l.e.n@gmail.com"">hel.ferpi.l.l.e.n@gmail.com</a>
<a href=""mailto:hel.f.er.p.i.l.l.e.n@gmail.com"">hel.f.er.p.i.l.l.e.n@gmail.com</a>
<a href=""mailto:h.e.l.ferp.i.ll.e.n@gmail.com"">h.e.l.ferp.i.ll.e.n@gmail.com</a>
<a href=""mailto:he.lf.e.rpil.len@gmail.com"">he.lf.e.rpil.len@gmail.com</a>
<a href=""mailto:h.elf.e.r.p.i.l.len@gmail.com"">h.elf.e.r.p.i.l.len@gmail.com</a>
<a href=""mailto:he.lfe.r.pillen@gmail.com"">he.lfe.r.pillen@gmail.com</a>
<a href=""mailto:h.e.lferp.i.l.le.n@gmail.com"">h.e.lferp.i.l.le.n@gmail.com</a>
<a href=""mailto:he.lfe.r.pil.le.n@gmail.com"">he.lfe.r.pil.le.n@gmail.com</a>
<a href=""mailto:he.lf.er.p.i.l.l.en@gmail.com"">he.lf.er.p.i.l.l.en@gmail.com</a>
<a href=""mailto:h.e.l.f.e.r.pi.ll.en@gmail.com"">h.e.l.f.e.r.pi.ll.en@gmail.com</a>
<a href=""mailto:h.elf.e.rp.i.l.l.e.n@gmail.com"">h.elf.e.rp.i.l.l.e.n@gmail.com</a>
<a href=""mailto:h.elf.e.r.pi.lle.n@gmail.com"">h.elf.e.r.pi.lle.n@gmail.com</a>
<a href=""mailto:h.e.lferpi.l.le.n@gmail.com"">h.e.lferpi.l.le.n@gmail.com</a>
<a href=""mailto:hel.f.er.pi.llen@gmail.com"">hel.f.er.pi.llen@gmail.com</a>
<a href=""mailto:h.e.l.f.e.r.p.il.len@gmail.com"">h.e.l.f.e.r.p.il.len@gmail.com</a>
<a href=""mailto:he.lfer.p.i.l.len@gmail.com"">he.lfer.p.i.l.len@gmail.com</a>
<a href=""mailto:he.lf.e.rp.ille.n@gmail.com"">he.lf.e.rp.ille.n@gmail.com</a>
<a href=""mailto:h.e.lf.e.r.pill.en@gmail.com"">h.e.lf.e.r.pill.en@gmail.com</a>
<a href=""mailto:helf.er.pil.len@gmail.com"">helf.er.pil.len@gmail.com</a>
<a href=""mailto:hel.f.erpill.en@gmail.com"">hel.f.erpill.en@gmail.com</a>
<a href=""mailto:helfe.rp.il.l.en@gmail.com"">helfe.rp.il.l.en@gmail.com</a>
<a href=""mailto:h.el.f.erpi.l.l.e.n@gmail.com"">h.el.f.erpi.l.l.e.n@gmail.com</a>
<a href=""mailto:he.l.f.erp.il.len@gmail.com"">he.l.f.erp.il.len@gmail.com</a>
<a href=""mailto:hel.fer.pill.e.n@gmail.com"">hel.fer.pill.e.n@gmail.com</a>
<a href=""mailto:h.elferp.i.lle.n@gmail.com"">h.elferp.i.lle.n@gmail.com</a>
<a href=""mailto:h.e.lfe.rpil.l.e.n@gmail.com"">h.e.lfe.rpil.l.e.n@gmail.com</a>
<a href=""mailto:h.elf.e.r.pi.l.len@gmail.com"">h.elf.e.r.pi.l.len@gmail.com</a>
<a href=""mailto:h.elferp.il.len@gmail.com"">h.elferp.il.len@gmail.com</a>
<a href=""mailto:h.elf.erp.ill.en@gmail.com"">h.elf.erp.ill.en@gmail.com</a>
<a href=""mailto:h.e.l.f.e.rpil.len@gmail.com"">h.e.l.f.e.rpil.len@gmail.com</a>
<a href=""mailto:helf.erp.i.lle.n@gmail.com"">helf.erp.i.lle.n@gmail.com</a>
<a href=""mailto:h.elf.erp.i.llen@gmail.com"">h.elf.erp.i.llen@gmail.com</a>
<a href=""mailto:helf.erpil.l.e.n@gmail.com"">helf.erpil.l.e.n@gmail.com</a>
<a href=""mailto:he.l.fe.r.pi.l.le.n@gmail.com"">he.l.fe.r.pi.l.le.n@gmail.com</a>
<a href=""mailto:hel.f.e.rpi.l.le.n@gmail.com"">hel.f.e.rpi.l.le.n@gmail.com</a>
<a href=""mailto:helfe.r.p.ill.en@gmail.com"">helfe.r.p.ill.en@gmail.com</a>
<a href=""mailto:h.elf.e.rp.i.l.len@gmail.com"">h.elf.e.rp.i.l.len@gmail.com</a>
<a href=""mailto:h.el.f.e.r.p.ill.e.n@gmail.com"">h.el.f.e.r.p.ill.e.n@gmail.com</a>
<a href=""mailto:h.e.l.f.er.p.il.le.n@gmail.com"">h.e.l.f.er.p.il.le.n@gmail.com</a>
<a href=""mailto:h.el.f.e.rpi.lle.n@gmail.com"">h.el.f.e.rpi.lle.n@gmail.com</a>
<a href=""mailto:helfer.p.i.l.le.n@gmail.com"">helfer.p.i.l.le.n@gmail.com</a>
<a href=""mailto:h.e.l.fe.r.p.i.lle.n@gmail.com"">h.e.l.fe.r.p.i.lle.n@gmail.com</a>
<a href=""mailto:hel.fe.rpil.l.en@gmail.com"">hel.fe.rpil.l.en@gmail.com</a>
<a href=""mailto:he.lferp.ill.e.n@gmail.com"">he.lferp.ill.e.n@gmail.com</a>
<a href=""mailto:hel.f.e.r.p.ille.n@gmail.com"">hel.f.e.r.p.ille.n@gmail.com</a>
<a href=""mailto:h.el.fer.pi.ll.e.n@gmail.com"">h.el.fer.pi.ll.e.n@gmail.com</a>
<a href=""mailto:he.l.f.e.rp.ille.n@gmail.com"">he.l.f.e.rp.ille.n@gmail.com</a>
<a href=""mailto:h.e.lferp.illen@gmail.com"">h.e.lferp.illen@gmail.com</a>
<a href=""mailto:helf.e.r.pill.en@gmail.com"">helf.e.r.pill.en@gmail.com</a>
<a href=""mailto:he.l.f.e.r.p.ill.e.n@gmail.com"">he.l.f.e.r.p.ill.e.n@gmail.com</a>
<a href=""mailto:he.lfe.r.p.i.ll.en@gmail.com"">he.lfe.r.p.i.ll.en@gmail.com</a>
<a href=""mailto:h.e.l.fer.p.i.ll.en@gmail.com"">h.e.l.fer.p.i.ll.en@gmail.com</a>
<a href=""mailto:he.lfe.r.p.il.le.n@gmail.com"">he.lfe.r.p.il.le.n@gmail.com</a>
<a href=""mailto:h.e.lf.er.pill.en@gmail.com"">h.e.lf.er.pill.en@gmail.com</a>
<a href=""mailto:h.elfer.p.il.len@gmail.com"">h.elfer.p.il.len@gmail.com</a>
<a href=""mailto:he.lf.e.rpi.llen@gmail.com"">he.lf.e.rpi.llen@gmail.com</a>
<a href=""mailto:hel.f.erp.i.llen@gmail.com"">hel.f.erp.i.llen@gmail.com</a>
<a href=""mailto:he.lfe.rp.ill.en@gmail.com"">he.lfe.rp.ill.en@gmail.com</a>
<a href=""mailto:h.e.lf.e.r.p.i.ll.e.n@gmail.com"">h.e.lf.e.r.p.i.ll.e.n@gmail.com</a>
<a href=""mailto:he.lferp.i.l.len@gmail.com"">he.lferp.i.l.len@gmail.com</a>
<a href=""mailto:hel.f.e.rpi.ll.e.n@gmail.com"">hel.f.e.rpi.ll.e.n@gmail.com</a>
<a href=""mailto:h.elf.erpille.n@gmail.com"">h.elf.erpille.n@gmail.com</a>
<a href=""mailto:hel.ferp.ill.en@gmail.com"">hel.ferp.ill.en@gmail.com</a>
<a href=""mailto:h.e.l.ferpil.len@gmail.com"">h.e.l.ferpil.len@gmail.com</a>
<a href=""mailto:he.lfer.pi.lle.n@gmail.com"">he.lfer.pi.lle.n@gmail.com</a>
<a href=""mailto:h.e.lf.er.p.ill.e.n@gmail.com"">h.e.lf.er.p.ill.e.n@gmail.com</a>
<a href=""mailto:he.l.ferp.ill.en@gmail.com"">he.l.ferp.ill.en@gmail.com</a>
<a href=""mailto:h.e.l.fe.rp.il.le.n@gmail.com"">h.e.l.fe.rp.il.le.n@gmail.com</a>
<a href=""mailto:helferp.ill.en@gmail.com"">helferp.ill.en@gmail.com</a>
<a href=""mailto:he.l.fe.r.pi.llen@gmail.com"">he.l.fe.r.pi.llen@gmail.com</a>
<a href=""mailto:he.l.fer.p.il.le.n@gmail.com"">he.l.fer.p.il.le.n@gmail.com</a>
<a href=""mailto:he.l.f.er.p.il.le.n@gmail.com"">he.l.f.er.p.il.le.n@gmail.com</a>
<a href=""mailto:hel.ferpi.llen@gmail.com"">hel.ferpi.llen@gmail.com</a>
<a href=""mailto:he.l.f.e.rpille.n@gmail.com"">he.l.f.e.rpille.n@gmail.com</a>
<a href=""mailto:he.lfe.rp.i.ll.en@gmail.com"">he.lfe.rp.i.ll.en@gmail.com</a>
<a href=""mailto:h.e.l.fe.rpillen@gmail.com"">h.e.l.fe.rpillen@gmail.com</a>
<a href=""mailto:h.elfe.rpi.l.len@gmail.com"">h.elfe.rpi.l.len@gmail.com</a>
<a href=""mailto:hel.f.e.rp.il.le.n@gmail.com"">hel.f.e.rp.il.le.n@gmail.com</a>
<a href=""mailto:hel.f.erp.i.ll.en@gmail.com"">hel.f.erp.i.ll.en@gmail.com</a>
<a href=""mailto:he.l.fe.r.pi.lle.n@gmail.com"">he.l.fe.r.pi.lle.n@gmail.com</a>
<a href=""mailto:he.l.f.erp.ille.n@gmail.com"">he.l.f.erp.ille.n@gmail.com</a>
<a href=""mailto:h.el.fe.rpi.l.le.n@gmail.com"">h.el.fe.rpi.l.le.n@gmail.com</a>
<a href=""mailto:hel.ferpille.n@gmail.com"">hel.ferpille.n@gmail.com</a>
<a href=""mailto:h.el.f.erpi.l.le.n@gmail.com"">h.el.f.erpi.l.le.n@gmail.com</a>
<a href=""mailto:h.e.lf.e.r.pi.l.len@gmail.com"">h.e.lf.e.r.pi.l.len@gmail.com</a>
<a href=""mailto:h.elferp.ille.n@gmail.com"">h.elferp.ille.n@gmail.com</a>
<a href=""mailto:he.l.fer.pil.l.e.n@gmail.com"">he.l.fer.pil.l.e.n@gmail.com</a>
<a href=""mailto:hel.fe.r.pi.l.l.en@gmail.com"">hel.fe.r.pi.l.l.en@gmail.com</a>
<a href=""mailto:h.e.l.fe.r.p.il.l.e.n@gmail.com"">h.e.l.fe.r.p.il.l.e.n@gmail.com</a>
<a href=""mailto:h.el.f.e.rpi.l.l.e.n@gmail.com"">h.el.f.e.rpi.l.l.e.n@gmail.com</a>
<a href=""mailto:helfe.r.p.i.ll.e.n@gmail.com"">helfe.r.p.i.ll.e.n@gmail.com</a>
<a href=""mailto:he.lfe.r.p.i.l.l.en@gmail.com"">he.lfe.r.p.i.l.l.en@gmail.com</a>
<a href=""mailto:h.e.l.f.e.rpil.l.en@gmail.com"">h.e.l.f.e.rpil.l.en@gmail.com</a>
<a href=""mailto:he.lferp.il.le.n@gmail.com"">he.lferp.il.le.n@gmail.com</a>
<a href=""mailto:h.e.lfe.rpill.e.n@gmail.com"">h.e.lfe.rpill.e.n@gmail.com</a>
<a href=""mailto:h.e.l.f.e.r.p.i.l.len@gmail.com"">h.e.l.f.e.r.p.i.l.len@gmail.com</a>
<a href=""mailto:h.e.lfer.pi.lle.n@gmail.com"">h.e.lfer.pi.lle.n@gmail.com</a>
<a href=""mailto:helf.er.pill.en@gmail.com"">helf.er.pill.en@gmail.com</a>
<a href=""mailto:h.e.lf.er.p.il.l.en@gmail.com"">h.e.lf.er.p.il.l.en@gmail.com</a>
<a href=""mailto:he.l.f.e.rpi.l.len@gmail.com"">he.l.f.e.rpi.l.len@gmail.com</a>
<a href=""mailto:h.elf.e.r.pil.le.n@gmail.com"">h.elf.e.r.pil.le.n@gmail.com</a>
<a href=""mailto:hel.f.erpi.l.le.n@gmail.com"">hel.f.erpi.l.le.n@gmail.com</a>
<a href=""mailto:he.l.ferp.il.l.e.n@gmail.com"">he.l.ferp.il.l.e.n@gmail.com</a>
<a href=""mailto:h.elf.e.r.p.i.l.l.en@gmail.com"">h.elf.e.r.p.i.l.l.en@gmail.com</a>
<a href=""mailto:he.l.f.e.r.p.i.l.le.n@gmail.com"">he.l.f.e.r.p.i.l.le.n@gmail.com</a>
<a href=""mailto:helf.e.rp.ille.n@gmail.com"">helf.e.rp.ille.n@gmail.com</a>
<a href=""mailto:h.e.l.fe.rpi.l.len@gmail.com"">h.e.l.fe.rpi.l.len@gmail.com</a>
<a href=""mailto:hel.f.er.pi.l.l.en@gmail.com"">hel.f.er.pi.l.l.en@gmail.com</a>
<a href=""mailto:h.el.ferp.i.l.le.n@gmail.com"">h.el.ferp.i.l.le.n@gmail.com</a>
<a href=""mailto:h.e.l.f.er.pi.l.le.n@gmail.com"">h.e.l.f.er.pi.l.le.n@gmail.com</a>
<a href=""mailto:h.e.l.fer.p.illen@gmail.com"">h.e.l.fer.p.illen@gmail.com</a>
<a href=""mailto:h.e.l.f.e.r.pil.l.e.n@gmail.com"">h.e.l.f.e.r.pil.l.e.n@gmail.com</a>
<a href=""mailto:h.el.ferp.ill.e.n@gmail.com"">h.el.ferp.ill.e.n@gmail.com</a>
<a href=""mailto:he.lfer.p.i.llen@gmail.com"">he.lfer.p.i.llen@gmail.com</a>
<a href=""mailto:h.elfe.rpill.e.n@gmail.com"">h.elfe.rpill.e.n@gmail.com</a>
<a href=""mailto:h.e.lf.er.pi.ll.e.n@gmail.com"">h.e.lf.er.pi.ll.e.n@gmail.com</a>
<a href=""mailto:h.el.fe.r.p.il.l.e.n@gmail.com"">h.el.fe.r.p.il.l.e.n@gmail.com</a>
<a href=""mailto:h.e.l.fer.pil.l.en@gmail.com"">h.e.l.fer.pil.l.en@gmail.com</a>
<a href=""mailto:he.l.fer.pi.l.len@gmail.com"">he.l.fer.pi.l.len@gmail.com</a>
<a href=""mailto:helfe.r.pil.l.en@gmail.com"">helfe.r.pil.l.en@gmail.com</a>
<a href=""mailto:he.lf.er.p.i.l.le.n@gmail.com"">he.lf.er.p.i.l.le.n@gmail.com</a>
<a href=""mailto:h.elfer.pi.l.le.n@gmail.com"">h.elfer.pi.l.le.n@gmail.com</a>
<a href=""mailto:h.el.fe.r.pille.n@gmail.com"">h.el.fe.r.pille.n@gmail.com</a>
<a href=""mailto:h.el.f.e.r.pil.le.n@gmail.com"">h.el.f.e.r.pil.le.n@gmail.com</a>
<a href=""mailto:h.el.fe.r.p.ill.en@gmail.com"">h.el.fe.r.p.ill.en@gmail.com</a>
<a href=""mailto:he.l.f.erp.i.ll.en@gmail.com"">he.l.f.erp.i.ll.en@gmail.com</a>
<a href=""mailto:helfe.r.p.i.l.le.n@gmail.com"">helfe.r.p.i.l.le.n@gmail.com</a>
<a href=""mailto:hel.f.er.p.i.lle.n@gmail.com"">hel.f.er.p.i.lle.n@gmail.com</a>
<a href=""mailto:he.lf.erpil.l.en@gmail.com"">he.lf.erpil.l.en@gmail.com</a>
<a href=""mailto:h.e.lf.e.r.p.il.l.en@gmail.com"">h.e.lf.e.r.p.il.l.en@gmail.com</a>
<a href=""mailto:h.elf.erpi.l.l.en@gmail.com"">h.elf.erpi.l.l.en@gmail.com</a>
<a href=""mailto:he.l.f.e.rpil.l.e.n@gmail.com"">he.l.f.e.rpil.l.e.n@gmail.com</a>
<a href=""mailto:h.e.l.fe.rpi.llen@gmail.com"">h.e.l.fe.rpi.llen@gmail.com</a>
<a href=""mailto:h.elfer.pil.len@gmail.com"">h.elfer.pil.len@gmail.com</a>
<a href=""mailto:he.l.ferp.il.l.en@gmail.com"">he.l.ferp.il.l.en@gmail.com</a>
<a href=""mailto:h.elf.erpi.l.le.n@gmail.com"">h.elf.erpi.l.le.n@gmail.com</a>"
k39TB5LS,Untitled,fatalryuu,TypeScript,Wednesday 27th of September 2023 12:53:11 PM CDT,"import { authService } from '../../../services/authService';
import { USER_STATUS } from '../../../constants';
import { UserEntity } from '../../../entities';
import { tokenService } from '../../../services/tokenService';
import { RoleEntity } from '../../../entities';
import faker from '@faker-js/faker';
import { generateTestToken } from '../../utils/generateTestToken';
import { api } from '../../utils/api';
import { LoginUserBody, RegisterUserBody } from '../../../interfaces/authTypes.interface';

const userInfo = {
  id: faker.datatype.uuid(),
  name: faker.name.firstName(),
  surname: faker.name.lastName(),
  email: faker.internet.email(),
  password: faker.internet.password(),
  status: USER_STATUS.APPROVED,
};

const registerBody: RegisterUserBody = {
  name: userInfo.name,
  surname: userInfo.surname,
  email: userInfo.email,
  password: userInfo.password,
};

const loginBody: LoginUserBody = {
  email: userInfo.email,
  password: userInfo.password,
};

const hashedPassword = faker.internet.password();

const mockTokens = {
  accessToken: generateTestToken(userInfo.id),
  refreshToken: generateTestToken(userInfo.id),
};

describe('API /auth', () => {
  afterEach(jest.clearAllMocks);

  describe('POST /api/v1/auth/registration', () => {
    beforeEach(() => {
      jest.spyOn(UserEntity, 'create').mockResolvedValue(userInfo as any);
      jest.spyOn(authService, 'getHashPassword').mockResolvedValue(hashedPassword);
    });

    it('should successfully register a user (201)', async () => {
      jest.spyOn(UserEntity, 'findOne').mockResolvedValue(null);
      const res = await api.registerUser().send(registerBody);

      expect(UserEntity.findOne).toBeCalledTimes(1);
      expect(UserEntity.create).toBeCalledTimes(1);
      expect(UserEntity.findOne).toBeCalledWith({
        where: {
          email: registerBody.email,
        },
      });
      expect(UserEntity.create).toBeCalledWith({
        ...registerBody,
        password: hashedPassword,
        status: USER_STATUS.PENDING,
      });
      expect(res.status).toEqual(201);
    });
    it('should return a error (406) if email is already used', async () => {
      // if something not null is returning then this email is already used
      jest.spyOn(UserEntity, 'findOne').mockResolvedValue(userInfo as any);
      const res = await api.registerUser().send(registerBody);

      expect(UserEntity.findOne).toBeCalledTimes(1);
      expect(UserEntity.create).toBeCalledTimes(0);
      expect(UserEntity.findOne).toBeCalledWith({
        where: {
          email: registerBody.email,
        },
      });
      expect(res.status).toEqual(406);
    });
    describe('Swagger schema', () => {
      it('should return a error (422) if an empty object is provided', async () => {
        const res = await api.registerUser().send({});
        expect(res.status).toEqual(422);
      });
      it('should return a error (422) if name is not specified', async () => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { name, ...bodyWithoutName } = registerBody;
        const res = await api.registerUser().send(bodyWithoutName);
        expect(res.status).toEqual(422);
      });
      it('should return a error (422) if surname is not specified', async () => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { surname, ...bodyWithoutSurname } = registerBody;
        const res = await api.registerUser().send(bodyWithoutSurname);
        expect(res.status).toEqual(422);
      });
      it('should return a error (422) if email is not specified', async () => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { email, ...bodyWithoutEmail } = registerBody;
        const res = await api.registerUser().send(bodyWithoutEmail);
        expect(res.status).toEqual(422);
      });
      it('should return a error (422) if password is not specified', async () => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { password, ...bodyWithoutPassword } = registerBody;
        const res = await api.registerUser().send(bodyWithoutPassword);
        expect(res.status).toEqual(422);
      });
    });
  });
  describe('POST /api/v1/auth/login', () => {
    beforeEach(() => {
      jest.spyOn(UserEntity, 'findOne').mockResolvedValue(userInfo as any);
      jest.spyOn(authService, 'validatePassword').mockResolvedValue(true);
      jest.spyOn(tokenService, 'generateTokens').mockResolvedValue(mockTokens);
      jest.spyOn(tokenService, 'saveToken').mockResolvedValue(null);
    });

    it('should successfully login user', async () => {
      const result = await api.loginUser().send({
        email: loginBody.email,
        password: loginBody.password,
      });
      expect(UserEntity.findOne).toBeCalledTimes(1);
      expect(authService.validatePassword).toBeCalledTimes(1);
      expect(tokenService.generateTokens).toBeCalledTimes(1);
      expect(tokenService.saveToken).toBeCalledTimes(1);
      expect(UserEntity.findOne).toHaveBeenCalledWith({
        where: { email: userInfo.email },
        include: [{ model: RoleEntity }],
      });
      expect(authService.validatePassword).toHaveBeenCalledWith(
        userInfo.password,
        userInfo.password,
      );
      expect(tokenService.generateTokens).toHaveBeenCalledWith({ userId: userInfo.id });
      expect(tokenService.saveToken).toHaveBeenCalledWith(userInfo.id, mockTokens.refreshToken);
      expect(result.status).toEqual(200);
    });
    describe('Swagger schema', () => {
      it('should return a error (422) if an empty object is provided', async () => {
        const res = await api.loginUser().send({});
        expect(res.status).toEqual(422);
      });
      it('should return a error (422) if email is not specified', async () => {
        const res = await api.loginUser().send({ password: loginBody.password });
        expect(res.status).toEqual(422);
      });
      it('should return a error (422) if password is not specified', async () => {
        const res = await api.loginUser().send({ email: loginBody.email });
        expect(res.status).toEqual(422);
      });
    });
  });
});
"
5YcRczsB,Scala lab2,drochun,Scala,Wednesday 27th of September 2023 12:49:34 PM CDT,"object Main1 {
  def isNegative(x: Int): Boolean = x < 0
  def sumNegative(lst: List[Int]): Int = {
    val negativeList = lst.filter(isNegative)
    if(negativeList.isEmpty) 0
    else {
      val result = negativeList.foldLeft(0)((ac_c, x) => ac_c + x)
      result
    }
  }
  def findTriplicate(lst: List[Int]): Option[Int] = {
  lst.find(x => lst.count(_ == x) == 3)
  }
  def main(args: Array[String]): Unit = {
    val myList = List(1, -1, -3, 2, 4, 1, 1, 5, 7, 9)
    println(myList.mkString("", ""))
    val sum = sumNegative(myList)
    val tripple = findTriplicate(myList)
    println(s""1.Sum of negative numbers: $sum"")
    println(s""5.Number that appears in list 3 times: $tripple"")
  }
}"
MHv2bcxP,ConcurrentMap,alekskrav,C++,Wednesday 27th of September 2023 12:45:47 PM CDT,"#include <algorithm>
#include <cstdlib>
#include <future>
#include <map>
#include <numeric>
#include <random>
#include <string>
#include <utility> // std::move
#include <vector>

#include ""profile.h""
#include ""test_runner.h""

using namespace std::string_literals;

template <typename Key, typename Value>
class ConcurrentMap {
  public:
    static_assert(std::is_integral_v<Key>, ""ConcurrentMap supports only integer keys"");

    explicit ConcurrentMap(size_t bucket_count) : _buckets(bucket_count),
                                                  _guards(bucket_count),
                                                  _parts(bucket_count) {
    }

    struct Access {

        std::lock_guard<std::mutex>& _guard;
        Value& ref_to_value;
    };

    Access operator[](const Key& key) {
        std::lock_guard<std::mutex> guard(_guards[key % _buckets]); // заблокировал доступ к корзине, в которой лежит нужный словарь

        return {guard, _parts[key % _buckets][key]}; // взял из этого словаря значение, находясь под защитой guard
    }

    std::map<Key, Value> BuildOrdinaryMap() {
        if (!_parts.size()) {
            return {};
        }

        if (_parts.size() == 1ul) {
            return _parts[0];
        }

        std::map<Key, Value> result_map;

        for (size_t i = 0; i < _parts.size(); ++i) {
            std::lock_guard<std::mutex> guard(_guards[i]);
            result_map.merge(_parts[i]);
        }
        return result_map;

        // std::mutex mtx;
        // std::map<Key, Value> merged_map;
        // {
        //     std::lock_guard<std::mutex> guard(mtx);
        //     size_t i = 0;

        //     for (auto subdict : _parts) {
        //         std::lock_guard<std::mutex> guard(_guards[i++]);
        //         merged_map.merge(subdict);
        //     }
        // }

        // return merged_map;
    }

  private:
    size_t _buckets;
    std::vector<std::mutex> _guards;
    std::vector<std::map<Key, Value>> _parts;
};

using namespace std;

void RunConcurrentUpdates(ConcurrentMap<int, int>& cm, size_t thread_count, int key_count) {
    auto kernel = [&cm, key_count](int seed) {
        vector<int> updates(key_count);
        iota(begin(updates), end(updates), -key_count / 2);
        shuffle(begin(updates), end(updates), mt19937(seed));

        for (int i = 0; i < 2; ++i) {
            for (auto key : updates) {
                ++cm[key].ref_to_value;
            }
        }
    };

    vector<future<void>> futures;
    for (size_t i = 0; i < thread_count; ++i) {
        futures.push_back(async(kernel, i));
    }
}

void TestConcurrentUpdate() {
    constexpr size_t THREAD_COUNT = 3;
    constexpr size_t KEY_COUNT = 50000;

    ConcurrentMap<int, int> cm(THREAD_COUNT);
    RunConcurrentUpdates(cm, THREAD_COUNT, KEY_COUNT);

    const auto result = cm.BuildOrdinaryMap();
    ASSERT_EQUAL(result.size(), KEY_COUNT);
    for (auto& [k, v] : result) {
        AssertEqual(v, 6, ""Key = "" + to_string(k));
    }
}

void TestReadAndWrite() {
    ConcurrentMap<size_t, string> cm(5);

    auto updater = [&cm] {
        for (size_t i = 0; i < 50000; ++i) {
            cm[i].ref_to_value.push_back('a');
        }
    };
    auto reader = [&cm] {
        vector<string> result(50000);
        for (size_t i = 0; i < result.size(); ++i) {
            result[i] = cm[i].ref_to_value;
        }
        return result;
    };

    auto u1 = async(updater);
    auto r1 = async(reader);
    auto u2 = async(updater);
    auto r2 = async(reader);

    u1.get();
    u2.get();

    for (auto f : {&r1, &r2}) {
        auto result = f->get();
        ASSERT(all_of(result.begin(), result.end(), [](const string& s) {
            return s.empty() || s == ""a"" || s == ""aa"";
        }));
    }
}

void TestSpeedup() {
    {
        ConcurrentMap<int, int> single_lock(1);

        LOG_DURATION(""Single lock"");
        RunConcurrentUpdates(single_lock, 4, 50000);
    }
    {
        ConcurrentMap<int, int> many_locks(100);

        LOG_DURATION(""100 locks"");
        RunConcurrentUpdates(many_locks, 4, 50000);
    }
}

int main() {
    TestRunner tr;
    RUN_TEST(tr, TestConcurrentUpdate);
    RUN_TEST(tr, TestReadAndWrite);
    RUN_TEST(tr, TestSpeedup);
}"
LcjVzMUS,TextAlignment,jbn6972,Java,Wednesday 27th of September 2023 12:36:59 PM CDT,"import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class TextAlignment {
    public static void main(String[] args) {

        List<String> align = Arrays.asList(""left"", ""right"", ""centre"", ""justify"");
        if (args.length != 3 || !align.contains(args[1].toLowerCase())
        || !args[2].matches(""[0-9]+"")        
        || Integer.parseInt(args[2]) < 1
                ) {

            System.out.println(""usage: java TextAlignment <filename> <alignmentType> <lineLength>"");
            // System.exit(0);
            return;
        }
        String fileName = args[0];
        String alignment = args[1];
        int lineLength = Integer.parseInt(args[2]);
        String[] input = readFile(fileName);

        try {

            // FileReader fileReader = new FileReader(newFile);
            // while ((ch = fileReader.read()) != -1)
            // paragaphs = paragaphs + (char) ch;

            switch (alignment.toLowerCase()) {
                case ""left"":
                    for (int i = 0; i < input.length; i++) {
                        printLeftOutput(input[i], lineLength);
                    }
                    // printLeftOutput(paragaphs, lineLength);
                    break;
                case ""right"":
                    for (int i = 0; i < input.length; i++) {
                        printRightOutput(input[i], lineLength);
                    }
                    break;

                case ""centre"":
                    for (int i = 0; i < input.length; i++) {
                        printCenterOutput(input[i], lineLength);
                    }
                    break;

                case ""justify"":
                    for (int i = 0; i < input.length; i++) {
                        printJustifyOutput(input[i], lineLength);
                    }
                    break;
            }

            // fileReader.close();
        } catch (Exception e) {
            // System.out.println(e);
        }

    }

    // ---------------------Read File------------------------------------//
    public static String[] readFile(String filename) {
        try {
            // try to read from the specified file and store paragraphs (lines of text
            // with new-line at end) in list and convert list to array for return
            FileReader fr = new FileReader(filename);
            BufferedReader bfr = new BufferedReader(fr);
            ArrayList<String> content = new ArrayList<String>();
            String paragraph = null;
            while ((paragraph = bfr.readLine()) != null) {
                content.add(paragraph);
            }
            String[] paragraphs = new String[content.size()];
            for (int i = 0; i < content.size(); i++) {
                paragraphs[i] = content.get(i);
            }
            return paragraphs;
        } catch (FileNotFoundException e) {
            System.out.println(""File not found: "" + e.getMessage());
        } catch (IOException e) {
            System.out.println(""I/O Ooops: "" + e.getMessage());
        }
        // If an exception occurred we will get to here as the return statement above
        // was not executed
        // so setup a paragraphs array to return which contains the empty string
        String[] paragraphs = new String[1];
        paragraphs[0] = """";
        return paragraphs;
    }

    // ----------------Align Right------------------------------//
    public static void printRightOutput(String text, int lgt) {
        StringBuilder alignedText = new StringBuilder();
        String[] words = text.split(""\\s"");
        StringBuilder currentLine = new StringBuilder();
        int currentLineLength = 0;

        for (String word : words) {
            int wordLength = word.length();

            if (currentLineLength + wordLength <= lgt) {
                // Add word to the current line with a space
                currentLine.append(word).append("" "");
                currentLineLength += wordLength + 1;
            } else if(wordLength > lgt){  // If word is longer than line length
                // Add the current line to the aligned text
                if(currentLineLength > 0){
                    alignedText.append(rightAlign(currentLine.toString().trim(), lgt));
                    alignedText.append(""\n"");
                }
                // Add the new word to the aligned text
                alignedText.append(word.toString());
                alignedText.append(""\n"");
                currentLine.setLength(0);
                currentLineLength = 0;
            }
            
            else {
                // Start a new line and add word to it
                alignedText.append(rightAlign(currentLine.toString().trim(), lgt));
                alignedText.append(""\n"");
                currentLine.setLength(0);
                currentLineLength = 0;
                currentLine.append(word).append("" "");
                currentLineLength += wordLength + 1;
            }
        }

        if(currentLineLength > 0){
            // Add the last line
            alignedText.append(rightAlign(currentLine.toString().trim(), lgt)).append(""\n"");
        }
        System.out.print(alignedText.toString());

    }

    public static String rightAlign(String text, int lineLength) {
        // Calulate the number of spaces to add before the words in same line when no
        // more words fit in line
        int spacesToAdd = lineLength - text.length();
        if (spacesToAdd <= 0) {
            return text;
        }
        return "" "".repeat(spacesToAdd) + text;
    }

    // ---------------------Align Left--------------------------//

    public static void printLeftOutput(String text, int lgt) {

        String[] words = text.split(""\\s"");
        StringBuilder alignedText = new StringBuilder();
        int currentLineLength = 0;

        for (String word : words) {
            if (currentLineLength + word.length() <= lgt) {
                // Add word to the current line with a space
                alignedText.append(word).append("" "");
                currentLineLength += word.length() + 1;
            }else if(word.length() > lgt){  // If word is longer than line length
                // Add the current line to the aligned text
                if(currentLineLength > 0){
                    alignedText.append(""\n"");
                }
                // Add the new word to the aligned text
                alignedText.append(word.toString());
                alignedText.append(""\n"");
                currentLineLength = 0;
            }
             else {
                // Start a new line and add word to it
                alignedText.append(""\n"").append(word).append("" "");
                currentLineLength = word.length() + 1;
            }
        }

        System.out.println(alignedText.toString().trim());
    }

    // -------------------Align Center------------------------//

    public static void printCenterOutput(String text, int lgt) {

        StringBuilder alignedText = new StringBuilder();
        String[] words = text.split(""\\s"");
        StringBuilder currentLine = new StringBuilder();
        int currentLineLength = 0;

        for (String word : words) {
            int wordLength = word.length();

            if (currentLineLength + wordLength <= lgt) {
                // Add word to the current line with a space
                currentLine.append(word).append("" "");
                currentLineLength += wordLength + 1;
            }else if(wordLength > lgt){  // If word is longer than line length
                // Add the current line to the aligned text
                if(currentLineLength > 0){
                    alignedText.append(centerAlign(currentLine.toString().trim(), lgt));
                    alignedText.append(""\n"");
                }
                // Add the new word to the aligned text
                alignedText.append(word.toString().trim());
                alignedText.append(""\n"");
                currentLine.setLength(0);
                currentLineLength = 0;
            }
             else {
                // Start a new line and add word to it
                alignedText.append(centerAlign(currentLine.toString().trim(), lgt));
                alignedText.append(""\n"");
                currentLine.setLength(0);
                currentLine.append(word).append("" "");
                currentLineLength = wordLength + 1;
            }
        }

        // Add the last line
        if(currentLineLength > 0){
            alignedText.append(centerAlign(currentLine.toString().trim(), lgt)).append(""\n"");
        }
        System.out.println(alignedText.toString());
    }

    public static String centerAlign(String text, int lineLength) {
        // Calulate the number of spaces to add between the words of the same line when
        // no more words fit in line
        int spacesToAdd = lineLength - text.length();
        int rightSpaces = spacesToAdd / 2;
        int leftSpaces = spacesToAdd - rightSpaces;
        return "" "".repeat(leftSpaces) + text + "" "".repeat(rightSpaces);
    }

    // --------------------Align Justify---------------------------//

    public static void printJustifyOutput(String text, int lineLength) {
        String input = text.trim();
        StringBuilder justifiedText = new StringBuilder();
        StringBuilder currentLine = new StringBuilder();

        int lineChars = 1;
        currentLine.append(input.charAt(0));
        ++lineChars;
        
        // Loop through the input string
        for (int i = 1; i < input.length() - 1; i++) {
            char prevChar, currChar, nextChar;
            prevChar = input.charAt(i - 1);
            currChar = input.charAt(i);
            nextChar = input.charAt(i + 1);

            // Check if the current character is the last character of the input string    
            boolean extraChar = false;

            // Check if the current character is a space and the line contains only one character
            if (lineChars == 1 && currChar == ' ') {
                continue;
            }

            // Check if the current character is a space and the next character is a space
            if (lineLength > lineChars) {
                currentLine.append(currChar);
                ++lineChars;
            } else { // If the line contains the maximum number of characters
                if (prevChar != ' ' && currChar != ' ' && nextChar != ' ') { 
                    currentLine.append(""-"");
                    extraChar = true;
                } else if (prevChar == ' ' && currChar != ' ' && nextChar != ' ') {
                    currentLine.append("" "");
                    extraChar = true;
                } else if (prevChar != ' ' && currChar != ' ' && nextChar == ' ') {
                    currentLine.append(currChar);
                } else if (prevChar != ' ' && currChar == ' ' && nextChar != ' ') {
                    currentLine.append(currChar);
                } else {
                    currentLine.append(currChar);
                }

                justifiedText.append(currentLine.toString().trim()).append(""\n"");
                currentLine.setLength(0);
                lineChars = 1;

                if (extraChar) {
                    currentLine.append(currChar);
                    ++lineChars;
                }
            }
        }

        currentLine.append(input.charAt(input.length() - 1));
        if (currentLine.length() > 0) {
            justifiedText.append(currentLine.toString().trim()).append(""\n"");
        }
        
        System.out.println(justifiedText.toString().trim());
    }
    
}
"
WpxmsUGG,ConcurrentMap,alekskrav,C++,Wednesday 27th of September 2023 12:32:04 PM CDT,"#include <algorithm>  // std::shuffle, std::all_of
#include <cmath>      // std::abs
#include <future>
#include <iterator>
#include <mutex>
#include <numeric>      // std::iota
#include <random>       // std::default_random_engine
#include <string>       // std::to_string
#include <type_traits>  // std::is_integral_v
#include <vector>

#include ""profile.h""
#include ""test_runner.h""

template <typename K, typename V>
class ConcurrentMap {
   public:
    static_assert(std::is_integral_v<K>, ""ConcurrentMap supports only integer keys"");

    // Структура Access, должна вести себя так же, как и в шаблоне Synchronized,
    // то есть предоставлять ссылку на ЗНАЧЕНИЕ словаря и обеспечивать синхронизацию доступа к нему.
    struct Access {
        std::lock_guard<std::mutex> guard;
        V& ref_to_value;
    };

    // Конструктор класса ConcurrentMap<K, V> принимает количество подсловарей, на которые надо разбить всё пространство ключей.
    explicit ConcurrentMap(size_t N)
        : _range(Range<K>{}),
          _N_buckets(N),
          _subdict_store(N),
          _guards(N),
          _bucket_indexer(SetBucketIndexer()) {}

    // operator[] должен вести себя так же, как аналогичный оператор у map — если ключ key присутствует в словаре,
    // он должен возвращать объект класса Access, содержащий ссылку на соответствующее ему значение;
    // если же key отсутствует в словаре, в него надо добавить пару (key, V()) и вернуть объект класса Access,
    // содержащий ссылку на только что добавленное значение.
    Access operator[](const K& key) {
        size_t i = GetSubDictId(key);  // сначала находим ""subdict"", в котором теоретически может содержаться ключ ""key""
        std::lock_guard<std::mutex> guard(_guards[i]);

        // упрощаем логику возвращаемого значения для отладочных целей
        return Access{guard, _subdict_store[i][key]};  // <= error: use of deleted function
                                                       // ‘std::lock_guard<_Mutex>::lock_guard(const std::lock_guard<_Mutex>&) [with _Mutex = std::mutex]’

        // if (_subdict_store[i].count(key)) {
        //     return Access{guard, _subdict_store[i].at(key)};
        // } else {
        //     auto [it, success] = _subdict_store[i].insert({key, V()});
        //     return {guard, *it};
        // }
    }

    // Метод BuildOrdinaryMap должен сливать вместе части словаря и возвращать весь словарь целиком.
    // При этом он должен быть потокобезопасным, то есть корректно работать, когда другие потоки выполняют операции с ConcurrentMap.
    std::map<K, V> BuildOrdinaryMap() {
        if (!_subdict_store.size()) {
            return {};
        }

        if (_subdict_store.size() == 1ul) {
            return _subdict_store[0];
        }

        std::mutex mtx;
        std::map<K, V> merged_map;
        {
            std::lock_guard<std::mutex> guard(mtx);

            size_t i = 0;
            for (auto subdict : _subdict_store) {
                std::lock_guard<std::mutex> guard(_guards[i++]);
                merged_map.merge(subdict);
            }
        }

        return merged_map;
    }

   private:
    template <typename T>
    struct Range {
        T min{};
        T max{};
        uint64_t size;

        Range(T start_range = std::numeric_limits<T>::min(),
              T end_range = std::numeric_limits<T>::max())
            : min(start_range),
              max(end_range) {
            auto sgn = [](T val) {
                return ((T{} < val) - (val < T{}));
            };

            if (sgn(min) == -1) {
                uint64_t digits = static_cast<uint64_t>(std::numeric_limits<T>::digits);
                size = 2ul << digits;
            } else if (sgn(min) == 0) {
                size = static_cast<uint64_t>(max) + 1ul;
            } else {
                // for user-defined input range for resulting map
                size = static_cast<uint64_t>(max) - static_cast<uint64_t>(min) + 1ul;
            }
        }
    };  // end of Range struct ctor

   private:
    const Range<K> _range;
    size_t _N_buckets;
    std::vector<std::map<K, V>> _subdict_store;
    std::vector<std::mutex> _guards;
    std::map<int, int> _bucket_indexer;

   private:  // ===================== Private Methods =====================
    size_t GetNumElementsPerBucket() {
        return (_range.size % _N_buckets == 0)
                   ? _range.size / _N_buckets
                   : _range.size / _N_buckets + 1;
    }

    std::map<int, int> SetBucketIndexer() {
        std::map<int, int> bucket_indexer;
        int border = _range.min;
        int elements_per_bucket = GetNumElementsPerBucket();

        for (size_t i = 0; i < _N_buckets; ++i) {
            bucket_indexer[border] = i;
            border += elements_per_bucket;
        }

        return bucket_indexer;
    }

    // returns index of subdict within ""_subdict_store"" (""std::vector<Bucket>"")
    int GetSubDictId(int key) const {
        return _bucket_indexer.count(key)
                   ? _bucket_indexer.at(key)
                   : std::prev(_bucket_indexer.upper_bound(key))->second;
    }
};

void RunConcurrentUpdates(
    ConcurrentMap<int, int>& cm, size_t thread_count, int key_count) {
    auto kernel = [&cm, key_count](int seed) {
        std::vector<int> updates(key_count);
        std::iota(std::begin(updates), std::end(updates), -key_count / 2);
        std::shuffle(std::begin(updates), std::end(updates), std::default_random_engine(seed));

        for (int i = 0; i < 2; ++i) {
            for (auto key : updates) {
                cm[key].ref_to_value++;
            }
        }
    };

    std::vector<std::future<void>> futures;
    for (size_t i = 0; i < thread_count; ++i) {
        futures.push_back(std::async(kernel, i));
    }
}

void TestConcurrentUpdate() {
    const size_t thread_count = 3;
    const size_t key_count = 50000;

    ConcurrentMap<int, int> cm(thread_count);
    RunConcurrentUpdates(cm, thread_count, key_count);

    const auto result = cm.BuildOrdinaryMap();
    ASSERT_EQUAL(result.size(), key_count);
    for (auto& [k, v] : result) {
        AssertEqual(v, 6, ""Key = "" + std::to_string(k));
    }
}

void TestReadAndWrite() {
    ConcurrentMap<size_t, std::string> cm(5);

    auto updater = [&cm] {
        for (size_t i = 0; i < 50000; ++i) {
            cm[i].ref_to_value += 'a';
        }
    };

    auto reader = [&cm] {
        std::vector<std::string> result(50000);
        for (size_t i = 0; i < result.size(); ++i) {
            result[i] = cm[i].ref_to_value;
        }
        return result;
    };

    auto u1 = std::async(updater);
    auto r1 = std::async(reader);
    auto u2 = std::async(updater);
    auto r2 = std::async(reader);

    u1.get();
    u2.get();

    for (auto f : {&r1, &r2}) {
        auto result = f->get();
        ASSERT(std::all_of(result.begin(), result.end(), [](const std::string& s) {
            return s.empty() || s == ""a"" || s == ""aa"";
        }));
    }
}

void TestSpeedup() {
    {
        ConcurrentMap<int, int> single_lock(1);

        LOG_DURATION(""Single lock"");
        RunConcurrentUpdates(single_lock, 4, 50000);
    }
    {
        ConcurrentMap<int, int> many_locks(100);

        LOG_DURATION(""100 locks"");
        RunConcurrentUpdates(many_locks, 4, 50000);
    }
}

int main() {
    TestRunner tr;
    RUN_TEST(tr, TestConcurrentUpdate);
    RUN_TEST(tr, TestReadAndWrite);
    RUN_TEST(tr, TestSpeedup);
}
"
Hc1qRifB,Binary Exponentiation,c-mcbride,JavaScript,Wednesday 27th of September 2023 12:25:47 PM CDT,"//Binary Exponentiation Implementation
function pow(x,n){
   let power = 1;

  //If exponent is 0, we return 1
   if (n === 0){
    power = 1;
   }
   //Otherwise, we take advantage of the binary representation of the exponent by muliplying every odd value
   else{
     while(n >0){
      if (n%2 !== 0){  //If value is odd, then we have a 1 in binary and value should be multiplied by current x
        power *= x;
      }
      x *= x;   //Keep track of x along the way
      n = Math.floor(n/2); //Remove binary number in our representation
     }
   }
   return power; 
}
console.log(pow(6,5));"
6v1FQSbG,hack rash,BILAL_AREEJ,JSON,Wednesday 27th of September 2023 12:23:42 PM CDT,"{
//bilal=false areej=true
""bilal"" : ""areej"",

""grass"" : ""0000"",

""colorbode"" : ""0000"",

""aim"" : ""0000"",

""data"" : ""0000""


}"
BnvaaaKE,humph!,tomtomvader298,JavaScript,Wednesday 27th of September 2023 11:43:20 AM CDT,"const { SlashCommandBuilder, ActionRowBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setDMPermission(false)
        .setName('request-data-deletion')
        .setDescription('Want To Stop Using The Eco Commands Fill This Form Out'),
    async execute(interaction) {
        let datRemovalRequestEmbed = new EmbedBuilder()
            .setDescription(`# Hello ${interaction.globalName ?? interaction.user.username} \nBy Clicking ""Request Data Deletion"" You Are Directly Asking A Developer To Remove Your Data From The Databse \nMake Sure This Is What You Want, This Request Is **FINAL** & Cannot Be Undone To Get Back Into Cheeses Eco You Need To Re-register`)
            .setColor(""#2F3136"").setFooter({ text: `Do Not Abuse This Form, Any Abuse Will Lead To A Server Ban!` })
        const appbutton = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('data_removal_request_button')
                    .setLabel(`Request Data Deletion`)
                    .setEmoji('🧾')
                    .setStyle(ButtonStyle.Danger),
            );

        interaction.reply({ embeds: [datRemovalRequestEmbed], components: [appbutton], ephemeral: true }).catch((e) => console.log(e));

        const filter = interaction => interaction.customId === 'data_removal_request_button';

        const collector = interaction.channel.createMessageComponentCollector({ filter, time: 5000 });

        collector.on('collect', async interaction => {
            if (interaction.customId === 'data_removal_request_button') {
                const modal = new ModalBuilder()
                    .setCustomId('requested_data_deletion')
                    .setTitle(`Feedback Form For ${interaction.client.user.username}`)

                const discordname = new TextInputBuilder()
                    .setCustomId('discordname')
                    .setLabel(""Your Name"")
                    .setPlaceholder(`${interaction.globalName ?? interaction.user.username}`)
                    .setValue(`${interaction.user.username}`)
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const userID = new TextInputBuilder()
                    .setCustomId('userID')
                    .setLabel(""Your ID (Pre-loaded)"")
                    .setValue(`${interaction.user.id}`)
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const guildID = new TextInputBuilder()
                    .setCustomId('guildID')
                    .setLabel(""Please Enter Guild ID (Optional)"")
                    .setStyle(TextInputStyle.Short)
                    .setRequired(false);

                const requestDescription = new TextInputBuilder()
                    .setCustomId('requestDescription')
                    .setLabel(""Exaplain Why You Want Your Data Removed"")
                    .setStyle(TextInputStyle.Paragraph)
                    .setRequired(true);

                const name = new ActionRowBuilder().addComponents(discordname);
                const userIDToDelete = new ActionRowBuilder().addComponents(userID);
                const optionalGuildIDToDelete = new ActionRowBuilder().addComponents(guildID);
                const requestedDescriptionPusher = new ActionRowBuilder().addComponents(requestDescription);

                modal.addComponents(name, userIDToDelete, optionalGuildIDToDelete, requestedDescriptionPusher);

                interaction.showModal(modal).catch((e) => console.log(e));
            }
        });

    },

};"
CCR7A0wj,RVMAT for AGM-122 Sidearm,Gamenator,C++,Wednesday 27th of September 2023 11:42:36 AM CDT,"#define _ARMA_

class StageTI
{
	texture = ""a3\data_f\default_vehicle_ti_ca.paa"";
};
ambient[] = {1,1,1,1};
diffuse[] = {1,1,1,1};
forcedDiffuse[] = {0,0,0,1};
emmisive[] = {0,0,0,1};
specular[] = {0.25098,0.25098,0.25098,1};
specularPower = 25;
PixelShaderID = ""Super"";
VertexShaderID = ""Super"";
class Stage1
{
	texture = ""\Pylons\agm122\agm122_nohq.paa.paa"";
	uvSource = ""tex"";
	class uvTransform
	{
		aside[] = {1,0,0};
		up[] = {0,1,0};
		dir[] = {0,0,0};
		pos[] = {0,0,0};
	};
};
class Stage2
{
	texture = ""#(argb,8,8,3)color(0.5,0.5,0.5,1,DT)"";
	uvSource = ""tex"";
	class uvTransform
	{
		aside[] = {1,0,0};
		up[] = {0,1,0};
		dir[] = {0,0,0};
		pos[] = {0,0,0};
	};
};
class Stage3
{
	texture = ""#(argb,8,8,3)color(0,0,0,0,MC)"";
	uvSource = ""tex"";
	class uvTransform
	{
		aside[] = {1,0,0};
		up[] = {0,1,0};
		dir[] = {0,0,0};
		pos[] = {0,0,0};
	};
};
class Stage4
{
	texture = ""#(argb,8,8,3)color(1,1,1,1,AS)"";
	uvSource = ""tex"";
	class uvTransform
	{
		aside[] = {1,0,0};
		up[] = {0,1,0};
		dir[] = {0,0,0};
		pos[] = {0,0,0};
	};
};
class Stage5
{
	texture = ""\Pylons\agm122\agm122_smdi.paa.paa"";
	uvSource = ""tex"";
	class uvTransform
	{
		aside[] = {1,0,0};
		up[] = {0,1,0};
		dir[] = {0,0,0};
		pos[] = {0,0,0};
	};
};
class Stage6
{
	texture = ""#(ai,64,64,1)fresnel(0.3,0.85)"";
	uvSource = ""tex"";
	class uvTransform
	{
		aside[] = {1,0,0};
		up[] = {0,1,0};
		dir[] = {0,0,0};
		pos[] = {0,0,0};
	};
};
class Stage7
{
	texture = ""a3\data_f\env_land_co.paa"";
	useWorldEnvMap = 1;
	uvSource = ""tex"";
	class uvTransform
	{
		aside[] = {1,0,0};
		up[] = {0,1,0};
		dir[] = {0,0,0};
		pos[] = {0,0,0};
	};
};
"
93YiJYBx,apd lab2 assig2,STANAANDREY,MatLab,Wednesday 27th of September 2023 11:13:13 AM CDT,"function modifyVocalVolume(inputFilePath, dBValue, outputFilePath)
    [inputSignal, sampleRate] = audioread(inputFilePath);
    leftChannel = inputSignal(:, 1);
    rightChannel = inputSignal(:, 2);
    scalingFactor = 10^(dBValue/20);
    modifiedLeftChannel = leftChannel * scalingFactor;
    modifiedRightChannel = rightChannel * scalingFactor;
    outputSignal = [modifiedLeftChannel, modifiedRightChannel];
    audiowrite(outputFilePath, outputSignal, sampleRate);
    t = (0:length(inputSignal)-1) / sampleRate;

    figure;

    subplot(2, 1, 1);
    plot(t, leftChannel, 'b', t, rightChannel, 'r');
    title('Input Vocals');
    xlabel('Time (s)');
    ylabel('Amplitude');
    legend('Left Channel', 'Right Channel');
    
    subplot(2, 1, 2);
    plot(t, modifiedLeftChannel, 'b', t, modifiedRightChannel, 'r');
    title('Output Vocals');
    xlabel('Time (s)');
    ylabel('Amplitude');
    legend('Left Channel', 'Right Channel');
end
"
488YMmyx,DaysOfWeek.js,Grossos,JavaScript,Wednesday 27th of September 2023 11:11:07 AM CDT,"function solve(num) {

    let arr = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

    if (num == 1) {
        console.log(arr[0]);
    } else if (num == 2) {
        console.log(arr[1]);
    } else if (num == 3) {
        console.log(arr[2]);
    } else if (num == 4) {
        console.log(arr[3]);
    } else if (num == 5) {
        console.log(arr[4]);
    } else if (num == 6) {
        console.log(arr[5]);
    } else if (num == 7) {
        console.log(arr[6]);
    } else {
        console.log(`Invalid day!`);
    }

}"
Z6CNAs5y,apd lab2 assig1,STANAANDREY,MatLab,Wednesday 27th of September 2023 11:08:29 AM CDT,"adjustVolume('input.wav', 6, 'output.wav')

function adjustVolume(inputFile, dBGain, outputFile)
    if ~exist(inputFile, 'file')
        error('Input file does not exist.');
    end

    [audioIn, sampleRate] = audioread(inputFile);

    gainFactor = 10^(dBGain/20);

    audioOut = audioIn * gainFactor;

    audiowrite(outputFile, audioOut, sampleRate);

    t = (0:length(audioIn) - 1) / sampleRate;

    figure;
    
    subplot(2, 1, 1);
    plot(t, audioIn);
    title('Input Waveform');
    xlabel('Time (s)');
    ylabel('Amplitude');
    
    subplot(2, 1, 2);
    plot(t, audioOut);
    title('Output Waveform');
    xlabel('Time (s)');
    ylabel('Amplitude');
    
    disp('Volume adjustment complete.')
end
"
