id,title,username,language,date,content
4ue263bP,ü§ë G2A.com Free Gift Card Guide Jun 2024 FIX ü§ë,jusst2k4,GetText,Saturday 1st of June 2024 12:06:38 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_635219.pdf

Working as of:
01 June 2024"
x0PryFWS,‚ù§Ô∏èG2A.com Free Gift Card Guide June 2024 Fixü§ë,x3kiN,Python,Saturday 1st of June 2024 12:05:45 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here :
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=sharing_9240279.pdf

Working as of:

June 1 2024"
g6RqeQUD,ü§ë G2A.com Free Gift Card Guide May 2024 FIX üéÅ,ssss50w,GetText,Saturday 1st of June 2024 11:52:00 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
01 June 2024"
0S2pDXeG,Applyed sensor card test,MagmaLP,Lua,Saturday 1st of June 2024 11:50:18 AM CDT,"-- √ñffne die Lua-Shell des Computers
-- Liste alle Peripherien und ihre Methoden auf

for _, side in ipairs({""left"", ""right"", ""top"", ""bottom"", ""front"", ""back""}) do
  local peripheralType = peripheral.getType(side)
  if peripheralType then
    print(""Peripherie gefunden an "" .. side .. "": "" .. peripheralType)
    local methods = peripheral.getMethods(side)
    if methods then
      for _, method in ipairs(methods) do
        print("" - Methode: "" .. method)
      end
    end
  end
end

-- √ñffne die Lua-Shell des Computers
-- Verbinde die Sensor Card und nutze die Methoden

local side = ""left"" -- oder ""right"", ""top"", ""bottom"", ""front"", ""back"" je nachdem, wo die Sensor Card angeschlossen ist
local sensor = peripheral.wrap(side)

if sensor then
  -- Rufe die Sensor-Namen ab
  local sensorName = sensor.getSensorName()
  print(""Sensor Name: "" .. sensorName)

  -- Rufe die verf√ºgbaren Sensor-Methoden ab
  local methods = sensor.getSensorMethods()

  -- √úberpr√ºfen, ob methods eine Tabelle ist
  if type(methods) == ""table"" then
    print(""Verf√ºgbare Methoden:"")
    for _, method in ipairs(methods) do
      print("" - "" .. method)
    end
  else
    print(""Fehler: getSensorMethods() hat keine Tabelle zur√ºckgegeben"")
    print(""R√ºckgabewert: "" .. tostring(methods))
  end

  -- Rufe die Ziele (Targets) ab
  local targets = sensor.getTargets()
  
  -- √úberpr√ºfen, ob targets eine Tabelle ist
  if type(targets) == ""table"" then
    print(""Gefundene Ziele: "" .. #targets)
    for _, target in ipairs(targets) do
      local details = sensor.getTargetDetails(target.id)
      print(""Ziel ID: "" .. target.id)
      for key, value in pairs(details) do
        print("" - "" .. key .. "": "" .. tostring(value))
      end
    end
  else
    print(""Fehler: getTargets() hat keine Tabelle zur√ºckgegeben"")
    print(""R√ºckgabewert: "" .. tostring(targets))
  end

  -- Beispiel f√ºr sensorCardCall (falls n√∂tig)
  -- local result = sensor.sensorCardCall(""someMethod"", arg1, arg2)
  -- print(""Ergebnis: "" .. tostring(result))

else
  print(""Sensor nicht gefunden!"")
end
"
GSUXwHmF,01. Climb The Peaks,Nenogzar,Python,Saturday 1st of June 2024 11:35:15 AM CDT,"from collections import deque

climbing_peak = {
    'Vihren': 80,
    'Kutelo': 90,
    'Banski Suhodol': 100,
    'Polezhan': 60,
    'Kamenitza': 70,
}

conquered_peaks = {
    'Vihren': 0,
    'Kutelo': 0,
    'Banski Suhodol': 0,
    'Polezhan': 0,
    'Kamenitza': 0,
}

food_supplies = deque(map(int, input().split("", "")))
daily_stamina = deque(map(int, input().split("", "")))

days = 1

while food_supplies and daily_stamina and days <= 7:
    day_food = food_supplies.pop()
    day_stamina = daily_stamina.popleft()

    dayly_peak = day_food + day_stamina

    for climbing, peak in climbing_peak.items():
        if dayly_peak >= peak:
            conquered_peaks[climbing] += 1

    days += 1

all_peaks_conquered = all(count > 0 for count in conquered_peaks.values())

if all_peaks_conquered:
    print(""Alex did it! He climbed all top five Pirin peaks in one week -> @FIVEinAWEEK"")
    print(""Conquered peaks:"")
    print(""\n"".join(peak for peak, count in conquered_peaks.items() if count > 0))
else:
    print(""Alex failed! He has to organize his journey better next time -> @PIRINWINS"")"
CeDZuLnU,–ö—Ä–∞—Å–Ω–æ —á–µ—Ä–Ω—ã–µ –≥–ø—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã,hpnq,C++,Saturday 1st of June 2024 11:16:45 AM CDT,"–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—à–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–º–µ—Å—Ç–æ –∫–ª–∞—Å—Å–æ–≤. –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ.

```cpp
#include <iostream>
#include <algorithm>

enum Color { RED, BLACK };

struct Node {
    int data;
    bool color;
    Node* left, * right, * parent;

    Node(int data) : data(data), color(RED), left(nullptr), right(nullptr), parent(nullptr) {}
};

struct RedBlackTree {
    Node* root;

    RedBlackTree() : root(nullptr) {}

    void rotateLeft(Node*&, Node*&);
    void rotateRight(Node*&, Node*&);
    void fixInsertRBTree(Node*&);
    void fixDeleteRBTree(Node*&);
    void inorderHelper(Node*) const;
    void preOrderHelper(Node*) const;
    void clearHelper(Node*&);
    Node* minValueNode(Node*&);
    Node* deleteBST(Node*&, int);
    int getColor(Node*&);
    void setColor(Node*&, int);
};

int RedBlackTree::getColor(Node*& node) {
    if (node == nullptr)
        return BLACK;
    return node->color;
}

void RedBlackTree::setColor(Node*& node, int color) {
    if (node == nullptr)
        return;
    node->color = color;
}

Node* RedBlackTree::minValueNode(Node*& node) {
    Node* ptr = node;
    while (ptr->left != nullptr)
        ptr = ptr->left;
    return ptr;
}

Node* RedBlackTree::deleteBST(Node*& root, int data) {
    if (root == nullptr)
        return root;

    if (data < root->data)
        return deleteBST(root->left, data);

    if (data > root->data)
        return deleteBST(root->right, data);

    if (root->left == nullptr || root->right == nullptr)
        return root;

    Node* temp = minValueNode(root->right);
    root->data = temp->data;
    return deleteBST(root->right, temp->data);
}

void RedBlackTree::rotateLeft(Node*& root, Node*& pt) {
    Node* pt_right = pt->right;

    pt->right = pt_right->left;

    if (pt->right != nullptr)
        pt->right->parent = pt;

    pt_right->parent = pt->parent;

    if (pt->parent == nullptr)
        root = pt_right;

    else if (pt == pt->parent->left)
        pt->parent->left = pt_right;

    else
        pt->parent->right = pt_right;

    pt_right->left = pt;
    pt->parent = pt_right;
}

void RedBlackTree::rotateRight(Node*& root, Node*& pt) {
    Node* pt_left = pt->left;

    pt->left = pt_left->right;

    if (pt->left != nullptr)
        pt->left->parent = pt;

    pt_left->parent = pt->parent;

    if (pt->parent == nullptr)
        root = pt_left;

    else if (pt == pt->parent->left)
        pt->parent->left = pt_left;

    else
        pt->parent->right = pt_left;

    pt_left->right = pt;
    pt->parent = pt_left;
}

void RedBlackTree::fixInsertRBTree(Node*& pt) {
    Node* parent_pt = nullptr;
    Node* grand_parent_pt = nullptr;

    while ((pt != root) && (getColor(pt) == RED) && (getColor(pt->parent) == RED)) {

        parent_pt = pt->parent;
        grand_parent_pt = pt->parent->parent;

        if (parent_pt == grand_parent_pt->left) {

            Node* uncle_pt = grand_parent_pt->right;

            if (getColor(uncle_pt) == RED) {
                setColor(uncle_pt, BLACK);
                setColor(parent_pt, BLACK);
                setColor(grand_parent_pt, RED);
                pt = grand_parent_pt;
            }
            else {
                if (pt == parent_pt->right) {
                    rotateLeft(root, parent_pt);
                    pt = parent_pt;
                    parent_pt = pt->parent;
                }

                rotateRight(root, grand_parent_pt);
                std::swap(parent_pt->color, grand_parent_pt->color);
                pt = parent_pt;
            }
        }
        else {
            Node* uncle_pt = grand_parent_pt->left;

            if (getColor(uncle_pt) == RED) {
                setColor(uncle_pt, BLACK);
                setColor(parent_pt, BLACK);
                setColor(grand_parent_pt, RED);
                pt = grand_parent_pt;
            }
            else {
                if (pt == parent_pt->left) {
                    rotateRight(root, parent_pt);
                    pt = parent_pt;
                    parent_pt = pt->parent;
                }

                rotateLeft(root, grand_parent_pt);
                std::swap(parent_pt->color, grand_parent_pt->color);
                pt = parent_pt;
            }
        }
    }

    setColor(root, BLACK);
}

Node* insertBST(Node*& root, Node*& pt) {
    if (root == nullptr)
        return pt;

    if (pt->data < root->data) {
        root->left = insertBST(root->left, pt);
        root->left->parent = root;
    }
    else if (pt->data > root->data) {
        root->right = insertBST(root->right, pt);
        root->right->parent = root;
    }

    return root;
}

void insertValue(RedBlackTree& tree, int data) {
    Node* pt = new Node(data);
    tree.root = insertBST(tree.root, pt);
    tree.fixInsertRBTree(pt);
}

void deleteValue(RedBlackTree& tree, int data) {
    Node* nodeToDelete = tree.deleteBST(tree.root, data);
    tree.fixDeleteRBTree(nodeToDelete);
}

void RedBlackTree::fixDeleteRBTree(Node*& node) {
    // Implementation of fixing Red-Black Tree after deletion
    // For brevity, this code is not included here
    // Implement the fixDeleteRBTree logic based on Red-Black Tree properties
}

void RedBlackTree::inorderHelper(Node* root) const {
    if (root == nullptr)
        return;

    inorderHelper(root->left);
    std::cout << root->data << "" "";
    inorderHelper(root->right);
}

void RedBlackTree::preOrderHelper(Node* root) const {
    if (root == nullptr)
        return;

    std::cout << root->data << "" "";
    preOrderHelper(root->left);
    preOrderHelper(root->right);
}

void printInOrder(const RedBlackTree& tree) {
    tree.inorderHelper(tree.root);
    std::cout << std::endl;
}

void printPreOrder(const RedBlackTree& tree) {
    tree.preOrderHelper(tree.root);
    std::cout << std::endl;
}

void RedBlackTree::clearHelper(Node*& node) {
    if (node == nullptr)
        return;

    clearHelper(node->left);
    clearHelper(node->right);
    delete node;
    node = nullptr;
}

void clearTree(RedBlackTree& tree) {
    tree.clearHelper(tree.root);
}

RedBlackTree::~RedBlackTree() {
    clearTree(*this);
}

int main() {
    RedBlackTree tree;

    insertValue(tree, 10);
    insertValue(tree, 20);
    insertValue(tree, 30);
    insertValue(tree, 15);
    insertValue(tree, 25);

    std::cout << ""Inorder Traversal: "";
    printInOrder(tree);

    std::cout << ""Preorder Traversal: "";
    printPreOrder(tree);

    deleteValue(tree, 20);
    std::cout << ""Inorder Traversal after deletion: "";
    printInOrder(tree);

    clearTree(tree);
    std::cout << ""Tree cleared. Inorder Traversal: "";
    printInOrder(tree);

    return 0;
}
```

### –û–±—ä—è—Å–Ω–µ–Ω–∏–µ

1. **`Node` —Å—Ç—Ä—É–∫—Ç—É—Ä–∞**:
   - –°–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ —É–∑–ª–∞, —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –ª–µ–≤—ã—Ö –∏ –ø—Ä–∞–≤—ã—Ö –ø–æ—Ç–æ–º–∫–æ–≤, —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Ü–≤–µ—Ç —É–∑–ª–∞.

2. **`RedBlackTree` —Å—Ç—Ä—É–∫—Ç—É—Ä–∞**:
   - –°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–µ—Ä–µ–≤–æ–º. –ú–µ—Ç–æ–¥—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏-—á–ª–µ–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

3. **–§—É–Ω–∫—Ü–∏–∏**:
   - **`rotateLeft` –∏ `rotateRight`**: –í—ã–ø–æ–ª–Ω—è—é—Ç –ø–æ–≤–æ—Ä–æ—Ç—ã —É–∑–ª–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –∫—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
   - **`fixInsertRBTree` –∏ `fixDeleteRBTree`**: –û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –¥–µ—Ä–µ–≤–∞ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è —É–∑–ª–æ–≤.
   - **`insertValue` –∏ `deleteValue`**: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è —É–∑–ª–æ–≤. –û–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã `RedBlackTree`.
   - **`printInOrder` –∏ `printPreOrder`**: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ—Ä–µ–≤–∞ –≤ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–º –∏ –ø—Ä—è–º–æ–º –ø–æ—Ä—è–¥–∫–µ. –û–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã `RedBlackTree`.
   - **`clearTree`**: –û—á–∏—â–∞–µ—Ç –¥–µ—Ä–µ–≤–æ, –æ—Å–≤–æ–±–æ–∂–¥–∞—è –ø–∞–º—è—Ç—å, –≤—ã–∑—ã–≤–∞—è –º–µ—Ç–æ–¥ `clearHelper`.
   - **–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä**: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –¥–µ—Ä–µ–≤–∞ –ø—Ä–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ `RedBlackTree`."
f2g0ZY9q,–ö—Ä–∞—Å–Ω–æ —á–µ—Ä–Ω—ã–µ –≥–ø—Ç –∫–ª–∞—Å—Å—ã,hpnq,C#,Saturday 1st of June 2024 11:15:10 AM CDT,"–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∏—Ç –∫—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (Red-Black Tree) –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –ø–µ—á–∞—Ç–∏, –æ—á–∏—Å—Ç–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å `RedBlackTree`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö. –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–∞–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:

```cpp
#include <iostream>

enum Color { RED, BLACK };

struct Node {
    int data;
    bool color;
    Node* left, * right, * parent;

    Node(int data) {
        this->data = data;
        left = right = parent = nullptr;
        this->color = RED;
    }
};

class RedBlackTree {
private:
    Node* root;

protected:
    void rotateLeft(Node*&, Node*&);
    void rotateRight(Node*&, Node*&);
    void fixInsertRBTree(Node*&);
    void fixDeleteRBTree(Node*&);
    void inorderHelper(Node*) const;
    void levelOrderHelper(Node*) const;
    void clearHelper(Node*&);
    void printInOrderHelper(Node*) const;
    void printPreOrderHelper(Node*) const;
    Node* minValueNode(Node*&);
    Node* deleteBST(Node*&, int);
    int getColor(Node*&);
    void setColor(Node*&, int);

public:
    RedBlackTree();
    void insertValue(int);
    void deleteValue(int);
    void printInOrder() const;
    void printPreOrder() const;
    void clearTree();
    ~RedBlackTree();
};

RedBlackTree::RedBlackTree() {
    root = nullptr;
}

int RedBlackTree::getColor(Node*& node) {
    if (node == nullptr)
        return BLACK;
    return node->color;
}

void RedBlackTree::setColor(Node*& node, int color) {
    if (node == nullptr)
        return;
    node->color = color;
}

Node* RedBlackTree::minValueNode(Node*& node) {
    Node* ptr = node;
    while (ptr->left != nullptr)
        ptr = ptr->left;
    return ptr;
}

Node* RedBlackTree::deleteBST(Node*& root, int data) {
    if (root == nullptr)
        return root;

    if (data < root->data)
        return deleteBST(root->left, data);

    if (data > root->data)
        return deleteBST(root->right, data);

    if (root->left == nullptr || root->right == nullptr)
        return root;

    Node* temp = minValueNode(root->right);
    root->data = temp->data;
    return deleteBST(root->right, temp->data);
}

void RedBlackTree::rotateLeft(Node*& root, Node*& pt) {
    Node* pt_right = pt->right;

    pt->right = pt_right->left;

    if (pt->right != nullptr)
        pt->right->parent = pt;

    pt_right->parent = pt->parent;

    if (pt->parent == nullptr)
        root = pt_right;

    else if (pt == pt->parent->left)
        pt->parent->left = pt_right;

    else
        pt->parent->right = pt_right;

    pt_right->left = pt;
    pt->parent = pt_right;
}

void RedBlackTree::rotateRight(Node*& root, Node*& pt) {
    Node* pt_left = pt->left;

    pt->left = pt_left->right;

    if (pt->left != nullptr)
        pt->left->parent = pt;

    pt_left->parent = pt->parent;

    if (pt->parent == nullptr)
        root = pt_left;

    else if (pt == pt->parent->left)
        pt->parent->left = pt_left;

    else
        pt->parent->right = pt_left;

    pt_left->right = pt;
    pt->parent = pt_left;
}

void RedBlackTree::fixInsertRBTree(Node*& pt) {
    Node* parent_pt = nullptr;
    Node* grand_parent_pt = nullptr;

    while ((pt != root) && (getColor(pt) == RED) && (getColor(pt->parent) == RED)) {

        parent_pt = pt->parent;
        grand_parent_pt = pt->parent->parent;

        if (parent_pt == grand_parent_pt->left) {

            Node* uncle_pt = grand_parent_pt->right;

            if (getColor(uncle_pt) == RED) {
                setColor(uncle_pt, BLACK);
                setColor(parent_pt, BLACK);
                setColor(grand_parent_pt, RED);
                pt = grand_parent_pt;
            }
            else {
                if (pt == parent_pt->right) {
                    rotateLeft(root, parent_pt);
                    pt = parent_pt;
                    parent_pt = pt->parent;
                }

                rotateRight(root, grand_parent_pt);
                std::swap(parent_pt->color, grand_parent_pt->color);
                pt = parent_pt;
            }
        }
        else {
            Node* uncle_pt = grand_parent_pt->left;

            if (getColor(uncle_pt) == RED) {
                setColor(uncle_pt, BLACK);
                setColor(parent_pt, BLACK);
                setColor(grand_parent_pt, RED);
                pt = grand_parent_pt;
            }
            else {
                if (pt == parent_pt->left) {
                    rotateRight(root, parent_pt);
                    pt = parent_pt;
                    parent_pt = pt->parent;
                }

                rotateLeft(root, grand_parent_pt);
                std::swap(parent_pt->color, grand_parent_pt->color);
                pt = parent_pt;
            }
        }
    }

    setColor(root, BLACK);
}

void RedBlackTree::insertValue(int data) {
    Node* pt = new Node(data);
    root = insertBST(root, pt);
    fixInsertRBTree(pt);
}

Node* RedBlackTree::insertBST(Node*& root, Node*& pt) {
    if (root == nullptr)
        return pt;

    if (pt->data < root->data) {
        root->left = insertBST(root->left, pt);
        root->left->parent = root;
    }
    else if (pt->data > root->data) {
        root->right = insertBST(root->right, pt);
        root->right->parent = root;
    }

    return root;
}

void RedBlackTree::deleteValue(int data) {
    Node* nodeToDelete = deleteBST(root, data);
    fixDeleteRBTree(nodeToDelete);
}

void RedBlackTree::fixDeleteRBTree(Node*& node) {
    // Implementation of fixing Red-Black Tree after deletion
    // For brevity, this code is not included here
    // Implement the fixDeleteRBTree logic based on Red-Black Tree properties
}

void RedBlackTree::printInOrderHelper(Node* root) const {
    if (root == nullptr)
        return;

    printInOrderHelper(root->left);
    std::cout << root->data << "" "";
    printInOrderHelper(root->right);
}

void RedBlackTree::printPreOrderHelper(Node* root) const {
    if (root == nullptr)
        return;

    std::cout << root->data << "" "";
    printPreOrderHelper(root->left);
    printPreOrderHelper(root->right);
}

void RedBlackTree::printInOrder() const {
    printInOrderHelper(root);
    std::cout << std::endl;
}

void RedBlackTree::printPreOrder() const {
    printPreOrderHelper(root);
    std::cout << std::endl;
}

void RedBlackTree::clearHelper(Node*& node) {
    if (node == nullptr)
        return;

    clearHelper(node->left);
    clearHelper(node->right);
    delete node;
    node = nullptr;
}

void RedBlackTree::clearTree() {
    clearHelper(root);
}

RedBlackTree::~RedBlackTree() {
    clearTree();
}

int main() {
    RedBlackTree tree;

    tree.insertValue(10);
    tree.insertValue(20);
    tree.insertValue(30);
    tree.insertValue(15);
    tree.insertValue(25);

    std::cout << ""Inorder Traversal: "";
    tree.printInOrder();

    std::cout << ""Preorder Traversal: "";
    tree.printPreOrder();

    tree.deleteValue(20);
    std::cout << ""Inorder Traversal after deletion: "";
    tree.printInOrder();

    tree.clearTree();
    std::cout << ""Tree cleared. Inorder Traversal: "";
    tree.printInOrder();

    return 0;
}
```

### –û–±—ä—è—Å–Ω–µ–Ω–∏–µ

1. **`Node` —Å—Ç—Ä—É–∫—Ç—É—Ä–∞**:
   - –°–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ —É–∑–ª–∞, —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –ª–µ–≤—ã—Ö –∏ –ø—Ä–∞–≤—ã—Ö –ø–æ—Ç–æ–º–∫–æ–≤, —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Ü–≤–µ—Ç —É–∑–ª–∞.

2. **`RedBlackTree` –∫–ª–∞—Å—Å**:
   - –°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–µ—Ä–µ–≤–æ–º.

3. **–ú–µ—Ç–æ–¥—ã**:
   - **`rotateLeft` –∏ `rotateRight`**: –í—ã–ø–æ–ª–Ω—è—é—Ç –ø–æ–≤–æ—Ä–æ—Ç—ã —É–∑–ª–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –∫—Ä–∞—Å–Ω–æ-—á–µ—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
   - **`fixInsertRBTree` –∏ `fixDeleteRBTree`**: –û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –¥–µ—Ä–µ–≤–∞ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è —É–∑–ª–æ–≤.
   - **`insertValue` –∏ `deleteValue`**: –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è —É–∑–ª–æ–≤.
   - **`printInOrder` –∏ `printPreOrder`**: –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ—Ä–µ–≤–∞ –≤ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–º –∏ –ø—Ä—è–º–æ–º –ø–æ—Ä—è–¥–∫–µ.
   - **`clearTree`**: –û—á–∏—â–∞–µ—Ç –¥–µ—Ä–µ–≤–æ, –æ—Å–≤–æ–±–æ–∂–¥–∞—è –ø–∞–º—è—Ç—å.
   - **–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä**: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –¥–µ—Ä–µ–≤–∞ –ø—Ä–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ `RedBlackTree`.

"
QAKuX7Ba,webinar-for-loops-2024-06-01,jspill,Python,Saturday 1st of June 2024 11:07:46 AM CDT,"# # 2024 June 01
# # WEBINAR: For Loops
#
# # We use loops to repeat actions
# a WHILE loop... is an IF that repeats as long as the loop condition remains True

# FOR LOOPS are used for repeating actions for every element in a container (list, dict, tuple, str)

# Basic syntax of a for loop
# for ___ in _someContainer__:

# # LIST
myList = [""Agent Scully"", ""Agent Mulder"", ""Walter Skinner"", ""CSM"", ""Mr. X""]
for item in myList:
    print(item)

# TUPLE
myTuple = (""Gilligan"", ""Castaway002"", ""red"", ""crew"")
for item in myTuple:
    print(item)

# STRING
myString = ""It was the best of times.""
for char in myString:
    print(char)

# DICT
# myDict = {
#     key: value,
#     key: value,
#     key: value,
# }
# myDict[key] # get the value for that key
# myDict[key] = value # assigns value to that key

bestOfXF = {
    ""1x00"": ""Pilot"",
    ""2x10"": ""Red Museum"",
    ""2x14"": ""Die Hand Die Verletzt"",
    ""3x04"": ""Clyde Bruckman's Final Repose"",
    ""3x12"": ""War of the Coprophages"",
    ""3x20"": ""Jose Chung's From Outer Space"",
    ""4x05"": ""The Field Where I Died"",
    ""5x05"": ""The Post Modern Prometheus"",
    ""5x17"": ""All Souls""
}
for key in bestOfXF:
    # ""Check out Episode ___ or '___'""
    print(f""Check out Episode {key} or '{bestOfXF[key]}'."")

# Loop a known of number of times
# RANGE
# range(start=0, stop, step=1):
# range(5) # range(0, 5)... [0, 1, 2, 3, 4]
# for num in range(5):
#     print(num)

for i in range(len(myList)):
    #print(i)
    print(f""{i} --> {myList[i]}"")

# or loop a known number of times with enumerate()
# here you get 2 variables, the index and the value at that index
for i, item in enumerate(myList):
    print(f""{i} ... {item}"")
"
b238z3U0,CustomRenderStates,s99889989,Java,Saturday 1st of June 2024 10:50:44 AM CDT,"import com.google.common.collect.ImmutableMap;
import com.mojang.blaze3d.platform.GlStateManager;
import com.mojang.blaze3d.systems.RenderSystem;
import com.mojang.blaze3d.vertex.DefaultVertexFormat;
import com.mojang.blaze3d.vertex.VertexFormat;
import com.mojang.blaze3d.vertex.VertexFormatElement;

import net.minecraft.client.renderer.RenderStateShard;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.resources.ResourceLocation;
import org.joml.Vector4f;
import org.lwjgl.opengl.GL11;

public class CustomRenderStates extends RenderStateShard {
	public static final Vector4f WHITE = new Vector4f(1.0F, 1.0F, 1.0F, 1.0F);

	public static VertexFormat POS_COL_TEX_LIGHT_FADE_NORMAL;
	public static VertexFormat POS_COL_TEX_NORMAL;

	public static final VertexFormat POS_TEX_NORMAL = new VertexFormat(ImmutableMap.<String, VertexFormatElement>builder()
			.put(""Position"", DefaultVertexFormat.ELEMENT_POSITION)
			.put(""UV0"", DefaultVertexFormat.ELEMENT_UV0)
			.put(""Normal"", DefaultVertexFormat.ELEMENT_NORMAL)
			.put(""Padding"", DefaultVertexFormat.ELEMENT_PADDING).build());

	public enum BLEND {
		NORMAL(0), ADD(1), SUB(2);
		public final int id;
		BLEND(int value) { this.id = value; }
		public int getValue() { return id; }
	}

	protected static final TransparencyStateShard ADDITIVE_TRANSPARENCY = new TransparencyStateShard(""lm_additive_transparency"", () -> {
		RenderSystem.enableBlend();
		RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE);
	}, () -> {
		RenderSystem.disableBlend();
		RenderSystem.defaultBlendFunc();
	});

	protected static final TransparencyStateShard SUBTRACTIVE_TRANSPARENCY = new TransparencyStateShard(""lm_subtractive_transparency"", () -> {
		RenderSystem.enableBlend();
		RenderSystem.blendFunc(GlStateManager.SourceFactor.DST_COLOR, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
	}, () -> {
		RenderSystem.disableBlend();
		RenderSystem.defaultBlendFunc();
	});

	private static final RenderType[] OBJ_RENDER_TYPES = new RenderType[BLEND.values().length * 2];
	static {
		for (BLEND blend : BLEND.values()) {
			for (int glow = 0; glow < 2; glow++) {
				OBJ_RENDER_TYPES[blend.id * 2 + glow] = RenderType.create(""lm_obj_"" + blend.toString() + (glow == 1 ? ""_glow"" : """"), POS_TEX_NORMAL, VertexFormat.Mode.QUADS, 256, true, false, RenderType.CompositeState.builder()
						.setTransparencyState(blend == BLEND.ADD ? ADDITIVE_TRANSPARENCY : (blend == BLEND.SUB ? SUBTRACTIVE_TRANSPARENCY : TRANSLUCENT_TRANSPARENCY))
						.setCullState(NO_CULL)
						.setLightmapState(LIGHTMAP)
						.setOverlayState(OVERLAY)
						.createCompositeState(false));
			}
		}
	}
	public static final RenderType OBJ_OUTLINE_RENDER_TYPE = RenderType.create(""lm_obj_outline_no_cull"", POS_TEX_NORMAL, VertexFormat.Mode.QUADS, 256, true, false, RenderType.CompositeState.builder()
			.setDepthTestState(NO_DEPTH_TEST)
			.setCullState(NO_CULL)
			.setOutputState(OUTLINE_TARGET)
			.setTexturingState(ENTITY_GLINT_TEXTURING)
			.createCompositeState(false));

	public CustomRenderStates(String p_i225973_1_, Runnable p_i225973_2_, Runnable p_i225973_3_) {
		super(p_i225973_1_, p_i225973_2_, p_i225973_3_);
	}

	public static RenderType getObjVBORenderType(int blending, boolean glow) {
		return OBJ_RENDER_TYPES[(blending << 1) | (glow ? 1 : 0)];
	}

	public static RenderType getObjRenderType(ResourceLocation texture, int blending, boolean glow) {
		if(POS_COL_TEX_LIGHT_FADE_NORMAL == null) {
			ImmutableMap<String, VertexFormatElement> vertexFormatElementImmutableMap = ImmutableMap.<String, VertexFormatElement>builder()
					.put(""Position"", DefaultVertexFormat.ELEMENT_POSITION)
					.put(""Color"", DefaultVertexFormat.ELEMENT_COLOR)
					.put(""UV0"", DefaultVertexFormat.ELEMENT_UV0)
					.put(""UV1"", DefaultVertexFormat.ELEMENT_UV1)
					.put(""UV2"", DefaultVertexFormat.ELEMENT_UV2)
					.put(""Normal"", DefaultVertexFormat.ELEMENT_NORMAL)
					.put(""Padding"", DefaultVertexFormat.ELEMENT_PADDING).build();

			POS_COL_TEX_LIGHT_FADE_NORMAL = new VertexFormat(vertexFormatElementImmutableMap);
		}

		RenderStateShard.TransparencyStateShard transparencyState = TRANSLUCENT_TRANSPARENCY;
		if(blending == BLEND.ADD.getValue()) {
			transparencyState = ADDITIVE_TRANSPARENCY;
		}
		else if(blending == BLEND.SUB.getValue()) {
			transparencyState = SUBTRACTIVE_TRANSPARENCY;
		}
//		RenderStateShard.DiffuseLightingState lightingState = DIFFUSE_LIGHTING;
//		if(glow) {
//			lightingState = NO_DIFFUSE_LIGHTING;
//		}

		RenderType.CompositeState renderTypeState = RenderType.CompositeState.builder()
				.setTextureState(new RenderStateShard.TextureStateShard(texture, false, false)) // Texture
				.setTransparencyState(transparencyState)
				.setShaderState(RenderType.RENDERTYPE_ENTITY_TRANSLUCENT_SHADER)
//				.setDiffuseLightingState(lightingState)
//				.setAlphaState(DEFAULT_ALPHA)
				.setCullState(NO_CULL)
				.setLightmapState(LIGHTMAP)
				.setOverlayState(OVERLAY)
				.createCompositeState(true);
		return RenderType.create(""lm_obj_translucent_no_cull"", POS_COL_TEX_LIGHT_FADE_NORMAL, VertexFormat.Mode.QUADS, 256, true, false, renderTypeState);
	}

	public static RenderType getObjColorOnlyRenderType(ResourceLocation texture, int blending, boolean glow) {
		if(POS_COL_TEX_LIGHT_FADE_NORMAL == null) {
			ImmutableMap<String, VertexFormatElement> vertexFormatElementImmutableMap = ImmutableMap.<String, VertexFormatElement>builder()
					.put(""Position"", DefaultVertexFormat.ELEMENT_POSITION)
					.put(""Color"", DefaultVertexFormat.ELEMENT_COLOR)
					.put(""Normal"", DefaultVertexFormat.ELEMENT_NORMAL)
					.put(""Padding"", DefaultVertexFormat.ELEMENT_PADDING).build();
			POS_COL_TEX_LIGHT_FADE_NORMAL = new VertexFormat(vertexFormatElementImmutableMap);
		}

		RenderStateShard.TransparencyStateShard transparencyState = TRANSLUCENT_TRANSPARENCY;
		if(blending == BLEND.ADD.getValue()) {
			transparencyState = ADDITIVE_TRANSPARENCY;
		}
		else if(blending == BLEND.SUB.getValue()) {
			transparencyState = SUBTRACTIVE_TRANSPARENCY;
		}
//		RenderStateShard.DiffuseLightingState lightingState = DIFFUSE_LIGHTING;
//		if(glow) {
//			lightingState = NO_DIFFUSE_LIGHTING;
//		}
		RenderType.CompositeState renderTypeState = RenderType.CompositeState.builder()
				.setTextureState(new RenderStateShard.TextureStateShard(texture, false, false)) // Texture
				.setTransparencyState(transparencyState)
//				.setDiffuseLightingState(lightingState)
//				.setAlphaState(DEFAULT_ALPHA)
				.setCullState(NO_CULL)
				.setLightmapState(LIGHTMAP)
				.setOverlayState(OVERLAY)
				.createCompositeState(true);
		return RenderType.create(""lm_obj_translucent_no_cull"", POS_COL_TEX_LIGHT_FADE_NORMAL, VertexFormat.Mode.QUADS, 256, true, false, renderTypeState);
	}

	public static RenderType getObjOutlineRenderType(ResourceLocation texture) {
		if(POS_COL_TEX_LIGHT_FADE_NORMAL == null) {
			ImmutableMap<String, VertexFormatElement> vertexFormatElementImmutableMap = ImmutableMap.<String, VertexFormatElement>builder()
					.put(""Position"", DefaultVertexFormat.ELEMENT_POSITION)
					.put(""Color"", DefaultVertexFormat.ELEMENT_COLOR)
					.put(""UV0"", DefaultVertexFormat.ELEMENT_UV0)
					.put(""UV1"", DefaultVertexFormat.ELEMENT_UV1)
					.put(""UV2"", DefaultVertexFormat.ELEMENT_UV2)
					.put(""Normal"", DefaultVertexFormat.ELEMENT_NORMAL)
					.put(""Padding"", DefaultVertexFormat.ELEMENT_PADDING).build();
			POS_COL_TEX_LIGHT_FADE_NORMAL = new VertexFormat(vertexFormatElementImmutableMap);
		}

		RenderType.CompositeState renderTypeState = RenderType.CompositeState.builder()
				.setTextureState(new RenderStateShard.TextureStateShard(texture, false, false))
				.setCullState(NO_CULL)
				.setDepthTestState(NO_DEPTH_TEST)
//				.setAlphaState(DEFAULT_ALPHA)
//				.setTexturingState(OUTLINE_TEXTURING)
//				.setFogState(NO_FOG)
				.setOutputState(OUTLINE_TARGET)
				.createCompositeState(false);
		return RenderType.create(""lm_obj_outline_no_cull"", POS_COL_TEX_LIGHT_FADE_NORMAL, VertexFormat.Mode.QUADS, 256, true, false, renderTypeState);
	}

	public static RenderType getSpriteRenderType(ResourceLocation texture) {
		if(POS_COL_TEX_NORMAL == null) {
			ImmutableMap<String, VertexFormatElement> vertexFormatElementImmutableMap = ImmutableMap.<String, VertexFormatElement>builder()
					.put(""Position"", DefaultVertexFormat.ELEMENT_POSITION)
					.put(""Color"", DefaultVertexFormat.ELEMENT_COLOR)
					.put(""UV0"", DefaultVertexFormat.ELEMENT_UV0)
					.put(""Normal"", DefaultVertexFormat.ELEMENT_NORMAL)
					.put(""Padding"", DefaultVertexFormat.ELEMENT_PADDING).build();

			POS_COL_TEX_NORMAL = new VertexFormat(vertexFormatElementImmutableMap);
		}

		RenderType.CompositeState renderTypeState = RenderType.CompositeState.builder()
				.setTextureState(new TextureStateShard(texture, false, false))
				.createCompositeState(true);
		return RenderType.create(""lm_sprite"", POS_COL_TEX_NORMAL, VertexFormat.Mode.QUADS, 256, true, false, renderTypeState);
	}
}"
b0UbTwBH,svc.cfg,mamedoc,C,Saturday 1st of June 2024 10:47:24 AM CDT,"[{
    ""name"":""Dan Hibiki"",
    ""loop"":-1,
    ""steps"":[{
        ""duration"":3,
        ""delay"":0,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":16,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_BUTTON1""
          }]
      }],
    ""binding"":""KEYCODE_0PAD"",
    ""earlycancel"":false
  },{
    ""name"":""Goenltz"",
    ""loop"":-1,
    ""steps"":[{
        ""duration"":3,
        ""delay"":0,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":16,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_BUTTON1""
          }]
      }],
    ""binding"":""KEYCODE_1PAD"",
    ""earlycancel"":false
  },{
    ""name"":""Demitri Maximoff"",
    ""loop"":-1,
    ""steps"":[{
        ""duration"":3,
        ""delay"":0,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":16,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_BUTTON1""
          }]
      }],
    ""binding"":""KEYCODE_2PAD"",
    ""earlycancel"":false
  },{
    ""name"":""Geese Howard"",
    ""loop"":-1,
    ""steps"":[{
        ""duration"":3,
        ""delay"":0,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":16,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_BUTTON1""
          }]
      }],
    ""binding"":""KEYCODE_3PAD"",
    ""earlycancel"":false
  },{
    ""name"":""Violent Ken"",
    ""loop"":-1,
    ""steps"":[{
        ""duration"":3,
        ""delay"":0,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":16,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_BUTTON1""
          }]
      }],
    ""binding"":""KEYCODE_4PAD"",
    ""earlycancel"":false
  },{
    ""name"":""Orochi Iori"",
    ""loop"":-1,
    ""steps"":[{
        ""duration"":3,
        ""delay"":0,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":16,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_BUTTON1""
          }]
      }],
    ""binding"":""KEYCODE_5PAD"",
    ""earlycancel"":false
  },{
    ""name"":""Zero"",
    ""loop"":-1,
    ""steps"":[{
        ""duration"":3,
        ""delay"":0,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":16,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_BUTTON1""
          }]
      }],
    ""binding"":""KEYCODE_6PAD"",
    ""earlycancel"":false
  },{
    ""name"":""Mars People"",
    ""loop"":-1,
    ""steps"":[{
        ""duration"":3,
        ""delay"":0,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":16,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_BUTTON1""
          }]
      }],
    ""binding"":""KEYCODE_7PAD"",
    ""earlycancel"":false
  },{
    ""name"":""Shin Akuma"",
    ""loop"":-1,
    ""steps"":[{
        ""duration"":3,
        ""delay"":0,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":16,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_BUTTON1""
          }]
      }],
    ""binding"":""KEYCODE_8PAD"",
    ""earlycancel"":false
  },{
    ""name"":""Serious Mr. Karate"",
    ""loop"":-1,
    ""steps"":[{
        ""duration"":3,
        ""delay"":0,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":2,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_DOWN""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":1,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_UP""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":4,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_LEFT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":8,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_JOYSTICK_RIGHT""
          }]
      },{
        ""duration"":3,
        ""delay"":3,
        ""inputs"":[{
            ""mask"":16,
            ""port"":"":edge:joy:JOY1"",
            ""type"":""P1_BUTTON1""
          }]
      }],
    ""binding"":""KEYCODE_9PAD"",
    ""earlycancel"":false
  }]"
JcB328xj,–∫–ª–∞—Å—Å—ã –∫–∞—Ç–∏–Ω—ã,hpnq,C++,Saturday 1st of June 2024 10:27:18 AM CDT,"#include <iostream>
#include <cstring>

class TElement {
private:
    char* name;
    int numInputs;
    double* inputValues;

public:
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    TElement() : name(nullptr), numInputs(0), inputValues(nullptr) {}

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    TElement(const char* name, int numInputs, double* inputValues) {
        this->name = new char[strlen(name) + 1];
        strcpy(this->name, name);
        this->numInputs = numInputs;
        this->inputValues = new double[numInputs];
        for (int i = 0; i < numInputs; ++i) {
            this->inputValues[i] = inputValues[i];
        }
    }

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    TElement(const TElement& other) {
        name = new char[strlen(other.name) + 1];
        strcpy(name, other.name);
        numInputs = other.numInputs;
        inputValues = new double[numInputs];
        for (int i = 0; i < numInputs; ++i) {
            inputValues[i] = other.inputValues[i];
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
    void printName() const {
        if (name != nullptr) {
            std::cout << ""Name: "" << name << std::endl;
        } else {
            std::cout << ""Name is not set."" << std::endl;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥–∞—Ö –Ω–∞ —ç–∫—Ä–∞–Ω
    void printInputValues() const {
        std::cout << ""Input values: "";
        for (int i = 0; i < numInputs; ++i) {
            std::cout << inputValues[i] << "" "";
        }
        std::cout << std::endl;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ö–æ–¥–µ
    void printInputValue(int index) const {
        if (index >= 0 && index < numInputs) {
            std::cout << ""Input value at index "" << index << "": "" << inputValues[index] << std::endl;
        } else {
            std::cout << ""Index out of range."" << std::endl;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤—ã—Ö–æ–¥–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    void printOutputValue() const {
        if (numInputs == 0) {
            std::cout << ""No inputs available."" << std::endl;
            return;
        }

        double sum = 0;
        for (int i = 0; i < numInputs; ++i) {
            sum += inputValues[i];
        }
        double average = sum / numInputs;
        std::cout << ""Output value (average of inputs): "" << average << std::endl;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
    void setName(const char* newName) {
        if (name != nullptr) {
            delete[] name;
        }
        name = new char[strlen(newName) + 1];
        strcpy(name, newName);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥–æ–≤ —Å –¥—Ä—É–≥–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    int compareNumInputs(const TElement& other) const {
        if (numInputs > other.numInputs) return 1;
        if (numInputs < other.numInputs) return -1;
        return 0;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤—ã—Ö–æ–¥–µ —Å –¥—Ä—É–≥–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    int compareOutputValue(const TElement& other) const {
        double thisOutput = 0, otherOutput = 0;

        for (int i = 0; i < numInputs; ++i) {
            thisOutput += inputValues[i];
        }
        thisOutput /= numInputs;

        for (int i = 0; i < other.numInputs; ++i) {
            otherOutput += other.inputValues[i];
        }
        otherOutput /= other.numInputs;

        if (thisOutput > otherOutput) return 1;
        if (thisOutput < otherOutput) return -1;
        return 0;
    }

    // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    ~TElement() {
        delete[] name;
        delete[] inputValues;
    }
};

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
int main() {
    // –û–±—ä–µ–∫—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    TElement elem1;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ö–æ–¥–æ–≤
    double inputs1[] = {1.0, 2.0, 3.0};
    elem1.setName(""Element 1"");

    // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
    elem1.printName();
    elem1.printInputValues();
    elem1.printOutputValue();

    // –û–±—ä–µ–∫—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    double inputs2[] = {4.0, 5.0, 6.0};
    TElement elem2(""Element 2"", 3, inputs2);
    elem2.printName();
    elem2.printInputValues();
    elem2.printOutputValue();
    // –û–±—ä–µ–∫—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    TElement elem3(elem2);
    elem3.setName(""Element 3"");
    elem3.printName();
    elem3.printInputValues();
    elem3.printOutputValue();

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥–æ–≤
    std::cout << ""Comparison of number of inputs between elem1 and elem2: ""
              << elem1.compareNumInputs(elem2) << std::endl;

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≤—ã—Ö–æ–¥–µ
    std::cout << ""Comparison of output values between elem1 and elem2: ""
              << elem1.compareOutputValue(elem2) << std::endl;

    return 0;
}"
SSc8C0qB,Untitled,nq1s788,C++,Saturday 1st of June 2024 10:23:11 AM CDT,"#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
#include <cmath>
#include <random>
#include <stack>
#include <queue>
#include <string>
#include <tuple>
#include <set>
#include <numeric>
#include <list>
#include <iomanip>
#include <cassert>
#include <array>
#include <unordered_map>
#include <bitset>
#include <ctime>
#include <chrono>

using namespace std;




struct node {
    long long x, y, s;
    node* l, * r;
};
vector<node>memory(16*1024*1024/sizeof(node));
long long c = 0;
node* new_node() {
    return &memory[c++];
}

long long size(node* a) {
    if (a == NULL) {
        return 0;
    }
    return a->s;
}

node* merge(node* r, node* l) {
    if (r == NULL or l == NULL) {
        return max(l, r);
    }
    if (r->y > l->y) {
        r->l = merge(l, r->l);
        r->s = size(r->l) + size(r->r);
        return r;
    }
    l->r = merge(l->r, r);
    l->s = size(l->l) + size(l->r);
    return l;
}

array<node*, 2> split(node* s, long long x) {
    if (s == NULL) {
        return { NULL, NULL };
    }
    if (s->x < x) {
        auto q = split(s->r, x);
        s->r = q[0];
        s->s = size(s->l) + size(s->r);
        return { s, q[1] };
    }
    auto q = split(s->l, x);
    s->l = q[1];
    s->s = size(s->l) + size(s->r);
    return { q[0], s };
}


node* kmin(node* s, long long k) {
    if (s == NULL) { return s; };
    if (k <= size(s->l)) {
        return kmin(s->l, k);
    }
    k -= size(s->l);
    if (k == 1) {
        return s;
    }
    return kmin(s->r, k - 1);
}

bool cmp(node* a, node* b) {
    return a->x < b->x;
}


node* add(node* s, long long x, long long y) {
    node* q = new_node();
    q->x = x; q->y = y;
    auto qwe = split(s, x);
    return merge(merge(qwe[0], q), qwe[1]);
}

void print(node* s) {
    if (s == NULL) return;
    print(s -> l);
    cout << s -> x << ' ';
    print(s -> r);
}


int main() {
    srand(time(0));
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    long long n;
    cin >> n;
    node* s = NULL;
    long long c1 = 0;
    for (long long i = 0; i < n; i++) {
        char q; long long j;
        cin >> q >> j;
        if (q == '+') {
            s = add(s, (j+c1 + 1000000000)%(1000000000), (long long)rand());
            print(s);
            cout << '\n';
            c1 = 0;
        }
        else {
            auto q = split(s, j);
            if (q[1] == NULL) {
                cout << ""-1\n"";
                c1 = -1;
            }
            else {
                auto qweqwe = kmin(q[1], 1);
                cout << qweqwe->x << ""\n"";
                c1 = qweqwe->x;
            }
            s = merge(q[0], q[1]);
        }
    }
    return 0;
}"
z2cCsMq1,Untitled,Al3XS0n,C++,Saturday 1st of June 2024 10:19:11 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

typedef unsigned int uint;


int main() {
    uint n, x;
    cin >> n >> x;
    vector<uint> t;
    vector<vector<uint>> bit_counter(n);
    for (int i = 0; i < n; ++i) {
        int v;
        cin >> v;
        t.push_back(v);
        for (int bit = 0; bit < 32; ++bit) {
            bit_counter[i].push_back(v & (1 << bit));
        }
        if (i != 0) {
            for (int bit = 0; bit < 32; ++bit) {
                bit_counter[i][bit] += bit_counter[i - 1][bit];
            }    
        }
    }
    
    string s;
    int cur_x = x;
    for (int i = n - 1; i >= 0; --i) {
        if ((cur_x | t[i]) > cur_x) {
            s += ""^"";
            cur_x = cur_x ^ t[i];
        } else {
            bool need_xor = false;
            for (int bit = 0; bit < 32; ++bit) {
                if (!(cur_x & (1 << bit))) {
                    continue;
                }
                if (!(t[i] & (1 << bit))) {
                    continue;
                }
                if (bit_counter[i][bit] == 1) {
                    need_xor = true;
                }
            }
            
            if (need_xor) {
                s += ""^"";
                cur_x = cur_x ^ t[i];
            } else {
                s += ""|"";
                cur_x = cur_x - t[i];
            }
        }
    }
    
    reverse(s.begin(), s.end());
    cout << s;

    return 0;
}
"
vPwxM0bM,Itemtime Stream #2,XConquer,C#,Saturday 1st of June 2024 09:02:42 AM CDT,"WELCOME TO PART 2 Of Itemtime :V :v :v :v 

7.- GameClient.cs o GameState.cs Agregamos :
  public IEnumerable<Game.MsgServer.MsgGameItem> AllMyTimeItems()
  {
      foreach (var item in Inventory.ClientItems.Values)
          if (item.Activate == 1)
          {
              yield return item;
          }
      foreach (var item in Equipment.ClientItems.Values)
          if (item.Activate == 1)
          {
              yield return item;
          }
      foreach (var Wh in Warehouse.ClientItems.Values)
      {
          foreach (var item in Wh.Values)
              if (item.Activate == 1)
              {
                  yield return item;
              }
      }
      //foreach (var item in MyWardrobe.GetAllItems())
      //    if (item.Activate == 1)
      //    {
      //        yield return item;
      //    }
  }

=======================================================
8.- Ahora comienza una Parte medio complicada ya que no en todas las Sourcers son Iguales [Stream] algunas difieren en Minimas cosas, que son los ThreadItem o Threads en este caso lo estoy haciendo en base a la Source TrinityConquer de Cristian Oca√±a [Darkhc]. empezaremos por buscar PoolProcesors.cs y Agregaremos :

 public static void CheckItemsTime(Client.GameClient client)
 {
     //return;
     try
     {
         if (client == null || !client.FullLoading || client.Player == null)
             return;
         foreach (var item in client.AllMyTimeItems())
         {
             if (DateTime.Now < item.EndDate)
                 continue;
             using (var rec = new ServerSockets.RecycledPacket())
             {
                 var stream = rec.GetStream();
                 if (client.Inventory.ClientItems.ContainsKey(item.UID))
                 {
                     client.Inventory.Update(item,AddMode.REMOVE, stream);
                     continue;
                 }
                 if (client.Equipment.ClientItems.ContainsKey(item.UID))
                 {
                     Role.Flags.ConquerItem position = (Role.Flags.ConquerItem)Database.ItemType.ItemPosition(item.ITEM_ID);
                     client.Equipment.Remove(position, stream);
                     client.Inventory.Update(item, AddMode.REMOVE, stream);
                     client.Equipment.QueryEquipment(client.Equipment.Alternante);
                 }
               
                 foreach (var Wh in client.Warehouse.ClientItems)
                 {
                     foreach (var item2 in Wh.Value.Values)
                     {
                         if (item2.UID == item.UID)
                         {
                             client.Warehouse.RemoveItem(item2.UID, Wh.Key, stream);
                             client.Inventory.Update(item, AddMode.REMOVE, stream);
                         }
                     }
                 }

             }
         }
     }
     catch (Exception ex)
     {
      //   MyConsole.WriteException(ex);
     }
 }
Ahora Crearemos una Nueva Clase y le pegaremos tal cual : 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static GameServer.Client.PoolProcesses;
namespace GameServer.Threading
{
    /// <summary>
    /// Controller for the player thread.
    /// </summary>
    /// 
    public static class ItemTmeCallBack
    {
        /// <summary>
        /// Handles the thread.
        /// </summary>
        public static void Handle(Client.GameClient player, int time)
        {
            //PlayerCollection
            //	.ForEach(player =>
            //	{
            //		try
            //		{
            CheckItemsTime(player);
            //	}
            //	catch
            //	{
            //		UmbralForm.GUI.WriteLine(""PlayerCollection > BufferCallback Thread Failure. ["" + player.Player.Name + ""]"");
            //		player.Socket.Disconnect();
            //	}
            //});
        }
    }
}

Ahora nos dirigimos a GameClient.cs y Pegamos :
 public void ItemTimeCallBack() { Threading.ItemTmeCallBack.Handle(this, 0); }

Ahora buscaremos ThreadPool.cs -> MainCallBack y Agregaremos : 
 //
 if (DateTime.Now >= client.StampItemTimeCallBack.AddMilliseconds(1000))
 {
     ThreadInvoke(new Action(client.ItemTimeCallBack));
     client.StampItemTimeCallBack = DateTime.Now;
 }
 //
Error Agregamos en GameClient :   public DateTime StampItemTimeCallBack = DateTime.Now;

En otras Stream este Proceso Cambia Ligera o Exponencialmente, en ese caso busquen a un Experto o me contratan ;) 
=========================================================
9.- MsgMessage buscamos t odos los case ""cps"" y Agregamos el nuevo comando 
 case ""cup"":
     {
         using (var rec = new ServerSockets.RecycledPacket())
         {
             int dias = 0;
             int horas = 0;
             int minutos = 1;
             var stream = rec.GetStream();
             client.Inventory.Add(stream, 2100075, 1, 0, 0, 0, Role.Flags.Gem.NoSocket, Role.Flags.Gem.NoSocket, false, Role.Flags.ItemEffect.None, false, """", dias, horas, minutos);
         }
         break;
     }
Ahi tienen como usarlo, tambien como modificar dias,horas,minutos para que Pongan en sus Npcs los premios que Quieran.
=======================================================
10.- Casi se me safo esta peque√±a parte, vamos a buscar MsgWarehouse.cs 
Buscamos public static unsafe ServerSockets.Packet AddItemWarehouse
Verificamos que Tenga este codigo  empleado : 
stream.Write((uint)(item.RemainingTime));//here is in secounds
y si tiene algo llamado ""TimeLeftInMinutes"" Eliminenlo o comentenlo.
======================================================
FIN! TODOS LOS DERECHOS RESERVADOS 2024-20XX Pezzi Tomas The Best!"
CY2ZAfv4,CHART LABELS RANK PERCENTILE for Thinkorswim,fabgonber,C++,Saturday 1st of June 2024 09:01:35 AM CDT,"# CHART LABELS RANK PERCENTILE - Adds handy quick-reference labels to the chart
#
#
declare upper ;
declare once_per_bar ;
declare hide_on_intraday ; # most functions are only relevant for daily aggregation
 
input days_back = 252; # we usually do this over one year (252 trading days)


def precios = if IsNaN(close)            # if price data doesn't exist for a particular period ...
    then precios[1]                      # ... set it to the previous value so it won't taint the hi/lo
    else close ;

def volatilidad = imp_volatility();
# si no se encuentra de un dia, use el dia anterior
def volatilidades = if !IsNaN(volatilidad) then volatilidad else volatilidad[1]; 

# display regular implied volatility
# ---------------------------
AddLabel(yes, ""IV: "" + Round(volatilidades * 100.0, 0), Color.BLUE);

# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#
# IMPLIED VOLATILITY RANK - Adds a colored label to the chart showing IV Rank
#
input Show_IV_Rank = yes ;
def low_over_timespan = Lowest(volatilidades, days_back);
def high_over_timespan = Highest(volatilidades, days_back);
def iv_rank = Round( (volatilidades - low_over_timespan) / (high_over_timespan - low_over_timespan) * 100.0, 0);
 
 
# Add label, colored according to current IV rank.
AddLabel(Show_IV_Rank, ""IV Rank: "" + iv_rank + ""%"", if iv_rank > 50 then Color.UPTICK else Color.DOWNTICK ) ;
 


# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#
# IMPLIED VOLATILITY PERCENTILE - Adds label to the chart showing IV Percentile
# how many dias over the past year, has IV been below the current IV
#
input Show_IV_Percentile = yes ;

def percentil_cuenta_bajo = fold i = 1 to days_back + 1 with contador_de_percentil = 0
do
if volatilidades[0] > volatilidades[i] then
    contador_de_percentil + 1
else
    contador_de_percentil;
def iv_percentile = Round(percentil_cuenta_bajo / days_back * 100.0, 0);

AddLabel(Show_IV_Percentile, ""IV Percentile: "" + iv_percentile + ""%"",  if iv_percentile > 50 then Color.UPTICK else Color.DOWNTICK  );


# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#
# CALCULO DE PRICE RANK
input Show_Price_Rank = yes;
def pHi = HighestAll(precios) ;          # highest price over range
def pLo =  LowestAll(precios) ;          #  lowest price over range
def price_Rank = Round( 100 * ( (precios - pLo) / (pHi - pLo) ), 0) ;
AddLabel(Show_Price_Rank, ""Price Rank: "" + price_Rank + ""%"", if price_Rank > 50 then  Color.UPTICK else Color.DOWNTICK ) ;


# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#
# CALCULO DE PRICE PERCENTIL
input Show_Price_Percentile = yes;
def precio_cuenta_bajo = fold j = 1 to days_back + 1 with contador_precio = 0
do
if precios[0] > precios[j] then
    contador_precio + 1
else
    contador_precio;
def precio_percentile = Round(precio_cuenta_bajo / days_back * 100.0, 0);

# Calculate red and green color levels (modified by intensity) for the color function
AddLabel(Show_Price_Percentile, ""Price Percentile: "" + precio_percentile + ""%"", if precio_percentile > 50 then  Color.UPTICK else Color.DOWNTICK);

 
# SHOW SIGNIFICANT PRICE MOVE - pricePercent
#
# If the underlying has moved more than a specified amount (default 5%) in the last few (default 10) bars,
# highlight that fact with a color-coded Percent Price Move label.
#
# Adapted from code by Shah H. Development 2013 
input ShowPricePercent    =   yes ;
input PricePercentBars    =    10 ;
input PricePercentType    = ohlc4 ;
input PricePercentTrigger =   5.0 ;

def pricePercentChg = Round( 100 * ( PricePercentType / PricePercentType[PricePercentBars] - 1 ), 1 ) ;

AddLabel( ShowPricePercent and ( AbsValue(pricePercentChg) > PricePercentTrigger ),
    PricePercentBars + ""-Bar Price Move: "" + pricePercentChg + ""%"",
    if pricePercentChg > 0 then Color.UPTICK else Color.DOWNTICK ) ;"
zLYwgp4N,Online Offline Semua Script,yocky12k,JSON,Saturday 1st of June 2024 08:37:51 AM CDT,"{
""penghasilsaldodana"":{""status"":""online"",""msg"":""""}
}"
fCRhM6Fs,keys,PasterJozzy,JSON,Saturday 1st of June 2024 07:44:09 AM CDT,"tSe4TTv68Yt93haTB36m5MGs
s4hB46Ast9h2u8M4EbPcXJ2C
887gKT5jaA82XTsfSrBR83um
e3Ee7T874nBbtC7p3jVBXGr5
gNR5Y9tc6buZ5U956tJsKmX8
JbRxtmKbb65kC6J382KdL59G
dCxL472hyVZKh737K7TdV6vn
Sn83rEkm8J854mPcAEc6Kb7U
PBdAmiFdS5zAg96p49N3Ck54
43tjJ6kcvZ27SMx7C59PgCRg
A7V4i44tZJ3Vns9NNb37tuSu
RdE48B44fU6bXDs29a6DiBhr
juUCj6423v8V63Jnm7UisYZF
5YzcY9vsp3xY92Av973JFYgV
Em7H7YuJ65gTa37nS69tefBU
RD3bZX9z49b8s9Kt5zJz2AVn
DyeZ7L77Est93rHd96tHSF9y
xT6rUFB9BUdts622iYt763iB
dXxECpB44fXx878HPea67L3b
6R9gHa5e5HvVhuUv3fZU555S"
2Uif7PJD,24_3,maxim_shlyahtin,C++,Saturday 1st of June 2024 07:11:02 AM CDT,"#include <pthread.h>
#include <stdio.h>
#include <sys/types.h>
#include <linux/unistd.h>
#include <sys/syscall.h>
#include <sched.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/resource.h>
#define _GNU_SOURCE

pthread_t t1, t2, t3;

void *thread1()
{
    int i;
    int tid, pid;
    tid = syscall(SYS_gettid);
    pid = getpid();
    //int ret = pthread_getschedparam(tid, &policy, &param);
    printf(""Thread_1 with thread id = %d and pid = %d is started\n"", tid, pid);
    for (i = 0; i < 10; i++)
    {
        printf(""Thread_1 is working\n"");
        sleep(1); // Sleep for 0.1 second to simulate workload
    }
    printf(""Thread 1 has stopped working\n"");
    return NULL;
}

void *thread2()
{
    int i;
    int tid, pid;
    tid = syscall(SYS_gettid);
    pid = getpid();
    printf(""Thread_2 with thread id = %d and pid = %d is started\n"", tid, pid);
    for (i = 0; i < 10; i++)
    {   
        printf(""Thread_2 is working\n"");
        sleep(1); // Sleep for 0.1 second to simulate workload
    }
    printf(""Thread 2 has stopped working\n"");
    return NULL;
}

void *thread3()
{
    int i;
    int tid, pid;
    tid = syscall(SYS_gettid);
    pid = getpid();
    printf(""Thread_3 with thread id = %d and pid = %d is started\n"", tid, pid);
    for (i = 0; i < 10; i++)
    {
        printf(""Thread_3 is working\n"");
        sleep(1); // Sleep for 0.1 second to simulate workload
    }
    printf(""Thread 3 has stopped working\n"");
    return NULL;
}

int main(int argc, char *argv[])
{
    int policy;
    struct sched_param param;
    pthread_attr_t attr_1, attr_2, attr_3;

    if (argc < 4) {
        fprintf(stderr, ""Usage: %s <priority_thread_1> <priority_thread_2> <priority_thread_3>\n"", argv[0]);
        return 1;
    }


    int priority1 = atoi(argv[1]);
    int priority2 = atoi(argv[2]);
    int priority3 = atoi(argv[3]);
    

    pthread_attr_init(&attr_1);
    pthread_attr_init(&attr_2);
    pthread_attr_init(&attr_3);
    pthread_attr_setschedpolicy(&attr_1, SCHED_FIFO);
    pthread_attr_setschedpolicy(&attr_2, SCHED_FIFO);
    pthread_attr_setschedpolicy(&attr_3, SCHED_FIFO);
    
    param.sched_priority = priority1;
    pthread_attr_setschedparam(&attr_1, &param);
    pthread_attr_getschedpolicy(&attr_1, &policy);
    printf(""Thread_1's priority = %d\n"", param.sched_priority);
    
    param.sched_priority = priority2;
    pthread_attr_setschedparam(&attr_2, &param);
    pthread_attr_getschedpolicy(&attr_2, &policy);
    printf(""Thread_2's priority = %d\n"", param.sched_priority);

    param.sched_priority = priority3;
    pthread_attr_setschedparam(&attr_3, &param);
    pthread_attr_getschedpolicy(&attr_3, &policy);
    printf(""Thread_2's priority = %d\n"", param.sched_priority);

    //pthread_attr_setinheritsched(&attr_1, PTHREAD_EXPLICIT_SCHED);
    //pthread_attr_setinheritsched(&attr_2, PTHREAD_EXPLICIT_SCHED);

    switch (policy)
    {
    case SCHED_FIFO:
        printf(""policy SCHED_FIFO\n"");
        break;
    case SCHED_RR:
        printf(""policy SCHED_RR\n"");
        break;
    case SCHED_OTHER:
        printf(""policy SCHED_OTHER\n"");
        break;
    case -1:
        perror(""policy SCHED_GETSCHEDULER"");
        break;
    default:
        printf(""policy –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"");
    }

    pthread_create(&t1, &attr_1, thread1, NULL);
    sleep(1);
    pthread_create(&t2, &attr_2, thread2, NULL);
    sleep(1);
    pthread_create(&t3, &attr_3, thread3, NULL);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);
    pthread_join(t3, NULL);

    pthread_attr_destroy(&attr_1);
    pthread_attr_destroy(&attr_2);
    pthread_attr_destroy(&attr_3);

    return 0;
}"
DcmACmN9,Untitled,Avazart,Python,Saturday 1st of June 2024 07:10:45 AM CDT,"from shopify import Shopify

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±'—î–∫—Ç Shopify
shopify = Shopify('your_shopify_access_token')

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤
limit = 50
all_products = []

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–∏–∫–ª –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
page_info = None
while True:
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫–æ—é
    products = shopify.products.get(limit=limit, page_info=page_info)
    
    # –î–æ–¥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
    all_products.extend(products)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    page_info = products.page_info
    
    # –ü–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ —Ü–∏–∫–ª, —è–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—è
    if not page_info:
        break

# –í–∏–≤–æ–¥–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
print(""Total products:"", len(all_products))
"
m6t7j8pM,Untitled,Josif_tepe,C++,Saturday 1st of June 2024 06:59:01 AM CDT,"#include <iostream>
#include <set>
#include <algorithm>
using namespace std;

int main()
{
    int n, m;
    cin >> n >> m;

    multiset<int> ms;
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;

        ms.insert(x);
    }
    int niza[m];
    for(int i = 0; i < m; i++) {
        cin >> niza[i];
    }
    for(int i = 0; i < m; i++) {
        auto it = ms.lower_bound(niza[i] + 1);
        
        if(it == ms.begin()) {
            cout << -1 << endl;
        }
        else {
            it--;
            cout << *it << endl;
            ms.erase(it);
        }
    }
    return 0;
}
"
fEHTwXie,psycho snowybot,coinwalk,JavaScript,Saturday 1st of June 2024 06:58:41 AM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var prefit = Number((elderly/24).toFixed(8));
var beast = prefit;
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var throttle = (prefit*24);
var winnerdinner = 144000;
var snowy = (elderly/3);
var james = ((Math.floor(elderly/tens))*tens)
var snowie = 0;
var great = 0;
 
function go(){
great = document.getElementById('pct_balance').value;
var dog = (((great-elderly)*1).toFixed(8));
console.log(""profit"");
console.log(dog);
snowy = (great/3);
if ((great!=snowie)&&(great>(((Math.floor(great/tens))*tens)+sevens))&&(great<(((Math.floor(great/tens))*tens)+eights))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((snowy<=(beast*2))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    james = ((Math.floor(great/tens))*tens);
}
if ((great>=(james+(tens*4)))&&(great<(((Math.floor(great/tens))*tens)+sevens))){
    beast = prefit;
    snowie = 0;
    james = ((Math.floor(great/tens))*tens);
}
if (great>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 35);
}
 
go();"
BN30rxBC,Untitled,Josif_tepe,C++,Saturday 1st of June 2024 06:39:02 AM CDT,"#include <iostream>
#include <set>
#include <algorithm>
using namespace std;

int main()
{
    set<int> st;
    int n;
    cin >> n;

    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;
        st.insert(x);
    }
    cout << st.size() << endl;
    return 0;
}
"
rtV8e1kN,Untitled,Josif_tepe,C++,Saturday 1st of June 2024 06:26:30 AM CDT,"#include <iostream>
#include <algorithm>
using namespace std;

int main()
{
    int n;
    cin >> n;

    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    sort(niza, niza + n);

    int S = 0, E = n - 1;
    int res = 0;
    while(S < E) {
        while(niza[S] > 0 and S < E) {
            E--;
            niza[S]--;
            res++;
        }
        S++;
    }
    cout << res << endl;
    return 0;
}
"
mUkmG6kP,Untitled,dllbridge,C,Saturday 1st of June 2024 06:17:22 AM CDT,"

#include  <stdio.h>
#include <string.h>


////////////////////////////////////////
struct Dog
{
    char color[19];
    int age;
    int weiht;
    int Year;
};
     
     
////////////////////////////////////////     
int main()
{

    Dog h;

     strcpy(h.color,""brown"");
     printf(""h.age= %d\n"",h.age);
     printf(""h.weiht=%d\n"",h.weiht);
     printf(""h.Year= %d\n"",h.Year);
}


























/*
#include    <stdio.h>



int n = -81;


////////////////////////////////////////////////////
int main()
{
	
	
//	if(n > 0) printf(""True \n"");
//	else      printf(""False\n""); 
	
	(n > 0) ? printf(""True \n"") : printf(""False\n""); 
	
}


*/





















	/* char sz[7][17] = { ""     "" ,
	                    ""–í–∞–ª–µ—Ç"" ,
	                    ""–î–∞–º–∞""  ,
	                    ""–ö–æ—Ä–æ–ª—å"",
	                    ""–¢—É–∑""  };
	*/




/*


#include    <stdio.h>
#include   <string.h>
#include   <locale.h>       //  –∑–¥–µ—Å—å ""–∂–∏–≤—ë—Ç"" setlocale(LC_ALL, ""rus"");



void mult(int n);



////////////////////////////////////////////////////
int main()
{
	
	
	setlocale(LC_ALL, ""rus"");
	
    for(int i = 2; i <= 14; i++)
    {
		mult(i);
		
	}
   
}



//////////////////////////////////////////////////////
void mult(int n)
{
	

	
	 char sz[17];
	
	
	 if(n == 11) strcpy(sz, ""–í–∞–ª–µ—Ç "");
	 if(n == 12) strcpy(sz, ""–î–∞–º–∞  "");
	 if(n == 13) strcpy(sz, ""–ö–æ—Ä–æ–ª—å"");
	 if(n == 14) strcpy(sz, ""–¢—É–∑   "");	 
	
	 for(int i = 1; i <= 4; i++)
	 {
		 if(n < 11)	
	     switch(i)                                   //  –º–∞—Å—Ç–∏
		 {
				
		     case  1:  printf(""%d –ü–∏–∫–∏   \n"", n);
					   break;		
					   
		     case  2:  printf(""%d –ë—É–±–∏   \n"", n);
					   break;	
					   
		     case  3:  printf(""%d –ß–µ—Ä–≤–∏  \n"", n);
					   break;	
					   
		     case  4:  printf(""%d –ö—Ä–µ—Å—Ç–∏ \n"", n);
					   break;						   					   					   
				
		 }	
		 else
	     switch(i)                                   //  –º–∞—Å—Ç–∏
		 {
				
		     case  1:  printf(""%s –ü–∏–∫–∏   \n"", sz);
					   break;		
					   
		     case  2:  printf(""%s –ë—É–±–∏   \n"", sz);
					   break;	
					   
		     case  3:  printf(""%s –ß–µ—Ä–≤–∏  \n"", sz);
					   break;	
					   
		     case  4:  printf(""%s –ö—Ä–µ—Å—Ç–∏ \n"", sz);
					   break;						   					   					   
				
		 }			 	
			
	 } 
	
	 printf("" - - - - - - -  \n""); 
}





*/









/*

#include   <stdio.h>
#include  <locale.h>       //  –∑–¥–µ—Å—å ""–∂–∏–≤—ë—Ç"" setlocale(LC_ALL, ""rus"");



void mult(int a); 



////////////////////////////////////////////////////
int main()
{
	
   


   for(int a = 1; a < 10; a++) { mult(a); }
   
}


////////////////////////////////////////////////////
void mult(int a)
{
	
	
    for(int i=0 ;i<=10;i++)
    {
        printf(""%2d *%2d = %2d\n"", i, a, i * a);
    }
	
	printf("" - - - - - - - \n""); 	
}




*/

























/*



#include <iostream>
using namespace std;



//////////////////////////////////////////////////////////////////
int main()
{
	
	setlocale(LC_ALL, ""rus"");
	
	int a, b, c;
	
	cout << ""1)+ "" << "" "" << "" 2) -"" << "" "" << "" 3) *"" << "" "" << ""4)/"" << endl;
	cin  >> c;
	cout << ""–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"" << endl;
	cin  >> a;
	cout << ""–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ"" << endl;
	cin  >> b;
	
	switch (c )
	{
			
		case  1:	c = a + b;
		            cout   << c << endl;
		            break;
	
		case  2:	c = a - b;
			        cout << c << endl;
			        break;		

		case  3:	c = a * b;
			        cout << c << endl;
			        break;
		
		case  4:    c = a / b;
			        cout << c << endl;
			        break;
			
      default:      cout << ""–¢–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å–æ—â–µ—Å—Ç–≤—É–µ—Ç"" << endl;
			        break;
    }
}




*/





"
RjLqkSjh,"""Display Sensor"" rev_02",pleasedontcode,Arduino,Saturday 1st of June 2024 06:07:23 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Display Sensor""
	- Source Code compiled for: Arduino Uno
	- Source Code created on: 2024-06-01 11:06:59

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Build a project with a humidity sensor and LCD */
	/* screen. Get the data from the humidity sensor and */
	/* display it on the LCD monitor as follows:    If */
	/* the humidity is 25%, a symbol of 1 drop should */
	/* appear on the screen, if 50% - a symbol of two */
	/* drops,if 75 */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <LiquidCrystal_I2C.h>  //https://github.com/marcoschwartz/LiquidCrystal_I2C
#include <DHT.h>  //https://github.com/adafruit/DHT-sensor-library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void displayHumidityOnLCD(float humidity);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t teni_DHT11_DOUT_PIN_D2 = 2;

/***** DEFINITION OF I2C PINS *****/
const uint8_t lcd_LCD1602I2C_I2C_PIN_SDA_A4 = A4;
const uint8_t lcd_LCD1602I2C_I2C_PIN_SCL_A5 = A5;
const uint8_t lcd_LCD1602I2C_I2C_SLAVE_ADDRESS = 0x27;  // Corrected to 0x27 based on the example

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
LiquidCrystal_I2C lcd(lcd_LCD1602I2C_I2C_SLAVE_ADDRESS, 20, 4);  // Initialize the LCD with address and dimensions

#define DHTPIN 2     // Pin where the DHT sensor is connected
#define DHTTYPE DHT22   // DHT 22 (AM2302)

DHT dht(DHTPIN, DHTTYPE);  // Initialize DHT sensor

void setup(void)
{
  // put your setup code here, to run once:

  pinMode(teni_DHT11_DOUT_PIN_D2, INPUT_PULLUP);

  lcd.init();  // Initialize the LCD
  lcd.backlight();  // Turn on the backlight

  // Create custom characters for humidity levels
  uint8_t drop1[8] = {0x04, 0x0A, 0x0A, 0x11, 0x11, 0x11, 0x0E, 0x00}; // 1 drop
  uint8_t drop2[8] = {0x04, 0x0A, 0x0A, 0x11, 0x11, 0x1F, 0x0E, 0x00}; // 2 drops
  uint8_t drop3[8] = {0x04, 0x0A, 0x0A, 0x11, 0x1F, 0x1F, 0x0E, 0x00}; // 3 drops

  lcd.createChar(0, drop1);
  lcd.createChar(1, drop2);
  lcd.createChar(2, drop3);

  lcd.home();

  Serial.begin(9600);
  Serial.println(F(""DHTxx test!""));

  dht.begin();  // Initialize the DHT sensor
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  delay(2000);

  float h = dht.readHumidity();
  float t = dht.readTemperature();
  float f = dht.readTemperature(true);

  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F(""Failed to read from DHT sensor!""));
    return;
  }

  float hif = dht.computeHeatIndex(f, h);
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F(""Humidity: ""));
  Serial.print(h);
  Serial.print(F(""%  Temperature: ""));
  Serial.print(t);
  Serial.print(F(""¬∞C ""));
  Serial.print(f);
  Serial.print(F(""¬∞F  Heat index: ""));
  Serial.print(hic);
  Serial.print(F(""¬∞C ""));
  Serial.print(hif);
  Serial.println(F(""¬∞F""));

  displayHumidityOnLCD(h);
}

void displayHumidityOnLCD(float humidity)
{
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""Humidity: "");
  lcd.print(humidity);
  lcd.print(""%"");

  lcd.setCursor(0, 1);
  if (humidity >= 75) {
    lcd.write(byte(2)); // 3 drops
  } else if (humidity >= 50) {
    lcd.write(byte(1)); // 2 drops
  } else if (humidity >= 25) {
    lcd.write(byte(0)); // 1 drop
  } else {
    lcd.print(""Low"");
  }
}
"
d7Kgv0dC,"""Humidity Display"" rev_01",pleasedontcode,Arduino,Saturday 1st of June 2024 06:06:40 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Humidity Display""
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-06-01 11:04:48

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Build a project with a humidity sensor and LCD */
	/* screen. Get the data from the humidity sensor and */
	/* display it on the LCD monitor as follows:    If */
	/* the humidity is 25%, a symbol of 1 drop should */
	/* appear on the screen, if 50% - a symbol of two */
	/* drops,if 75 */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <LiquidCrystal_I2C.h>  //https://github.com/marcoschwartz/LiquidCrystal_I2C
#include <DHT.h>  //https://github.com/adafruit/DHT-sensor-library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void displayHumidityOnLCD(float humidity);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t teni_DHT11_DOUT_PIN_D2 = 2;

/***** DEFINITION OF I2C PINS *****/
const uint8_t lcd_LCD1602I2C_I2C_PIN_SDA_A4 = A4;
const uint8_t lcd_LCD1602I2C_I2C_PIN_SCL_A5 = A5;
const uint8_t lcd_LCD1602I2C_I2C_SLAVE_ADDRESS = 0x27;  // Corrected to 0x27 based on the example

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
LiquidCrystal_I2C lcd(lcd_LCD1602I2C_I2C_SLAVE_ADDRESS, 20, 4);  // Initialize the LCD with address and dimensions

#define DHTPIN 2     // Pin where the DHT sensor is connected
#define DHTTYPE DHT22   // DHT 22 (AM2302)

DHT dht(DHTPIN, DHTTYPE);  // Initialize DHT sensor

void setup(void)
{
  // put your setup code here, to run once:

  pinMode(teni_DHT11_DOUT_PIN_D2, INPUT_PULLUP);

  lcd.init();  // Initialize the LCD
  lcd.backlight();  // Turn on the backlight

  // Create custom characters for humidity levels
  uint8_t drop1[8] = {0x04, 0x0A, 0x0A, 0x11, 0x11, 0x11, 0x0E, 0x00}; // 1 drop
  uint8_t drop2[8] = {0x04, 0x0A, 0x0A, 0x11, 0x11, 0x1F, 0x0E, 0x00}; // 2 drops
  uint8_t drop3[8] = {0x04, 0x0A, 0x0A, 0x11, 0x1F, 0x1F, 0x0E, 0x00}; // 3 drops

  lcd.createChar(0, drop1);
  lcd.createChar(1, drop2);
  lcd.createChar(2, drop3);

  lcd.home();

  Serial.begin(9600);
  Serial.println(F(""DHTxx test!""));

  dht.begin();  // Initialize the DHT sensor
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  delay(2000);

  float h = dht.readHumidity();
  float t = dht.readTemperature();
  float f = dht.readTemperature(true);

  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F(""Failed to read from DHT sensor!""));
    return;
  }

  float hif = dht.computeHeatIndex(f, h);
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F(""Humidity: ""));
  Serial.print(h);
  Serial.print(F(""%  Temperature: ""));
  Serial.print(t);
  Serial.print(F(""¬∞C ""));
  Serial.print(f);
  Serial.print(F(""¬∞F  Heat index: ""));
  Serial.print(hic);
  Serial.print(F(""¬∞C ""));
  Serial.print(hif);
  Serial.println(F(""¬∞F""));

  displayHumidityOnLCD(h);
}

void displayHumidityOnLCD(float humidity)
{
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""Humidity: "");
  lcd.print(humidity);
  lcd.print(""%"");

  lcd.setCursor(0, 1);
  if (humidity >= 75) {
    lcd.write(byte(2)); // 3 drops
  } else if (humidity >= 50) {
    lcd.write(byte(1)); // 2 drops
  } else if (humidity >= 25) {
    lcd.write(byte(0)); // 1 drop
  } else {
    lcd.print(""Low"");
  }
}
"
EQCH4YJa,data944,TestGuy1,JSON,Saturday 1st of June 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'f329875267d871072695f27ea325ce21de6fca783763d05df7ce464f91cd9e549aa980b79aab94f92150a5f835a854ecd93d909651629588794844106e110c425cc229cc42e6388790a6e67a469f72974e0794e59d64c5d17e784373579d8dd377f5e3e0664197138756a2d47889aa1f99ab97c8fd4dea73b10eccf60049c280',
  otherdata: [
    'f2bc30455ca7393970b0012755f73aa3',
    '9e125786c528404f6c4fd1e9538ad4c7',
    '7fdc6a8f2da0a617f6b53efb7ec30dca',
    '30233d3c328de2899c37f82598004fd7',
    'dcd2f014c53f3ab72eec41275fc04098',
    'b45da550d768117f99a243574cb73be0',
    '94fdaac46dd30d3007e76660f498d1f6',
    '00c46b720847cc61ecf5cc43424e3603'
  ]
}"
py87gc43,Untitled,Josif_tepe,C++,Saturday 1st of June 2024 05:53:59 AM CDT,"#include <iostream>
#include <queue>
#include <algorithm>
using namespace std;

int main()
{
    int n, m;
    cin >> n >> m;
    int mat[n][m];
    vector<pair<int, pair<int, int>>> v;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> mat[i][j];
            v.push_back(make_pair(mat[i][j], make_pair(i, j)));
        }
    }
    sort(v.begin(), v.end());
    bool visited[n][m];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            visited[i][j] = false;
        }
    }
    int di[] = {-1, 1, 0, 0};
    int dj[] = {0, 0, -1, 1};
    int robotcinja = 0;

    for(int i = 0; i < v.size(); i++) {
        int x = v[i].second.first;
        int y = v[i].second.second;
        if(!visited[x][y]) {
            queue<int> q;
            q.push(x);
            q.push(y);

            visited[x][y] = true;
            robotcinja++;
            while(!q.empty()) {
                int ci = q.front();
                q.pop();
                int cj = q.front();
                q.pop();

                for(int k = 0; k < 4; k++) {
                    int ti = ci + di[k];
                    int tj = cj + dj[k];
                    if(ti >= 0 and ti < n and tj >= 0 and tj < m and !visited[ti][tj]) {
                        if(mat[ci][cj] <= mat[ti][tj]) {
                            q.push(ti);
                            q.push(tj);
                            visited[ti][tj] = true;
                        }
                    }
                }


            }
        }
    }
cout << robotcinja << endl;
    return 0;
}
"
6BRhn7uq,12. Trade Commissions,myrdok123,Java,Saturday 1st of June 2024 05:43:08 AM CDT,"package ConditionalStatementsAdvance;

import java.util.Scanner;

public class TradeCommissions_12 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String town = scanner.nextLine();
        double amount = Double.parseDouble(scanner.nextLine());

        boolean isValid = true;
       /* –ì—Ä–∞–¥	0 ‚â§ s ‚â§ 500	  500 < s ‚â§ 1 000	1 000 < s ‚â§ 10 000	 s > 10 000
        Sofia	    5%	        7%	                8%	                12%
        Varna	    4.5%	    7.5%	            10%	                13%
        Plovdiv	    5.5%	      8%	            12%	                14.5% */


        double commission = 0;

        if (amount >= 0 && amount <= 500){
            switch (town){
                case ""Sofia"" -> commission = amount * 0.05;
                case ""Varna"" -> commission = amount * 0.045;
                case ""Plovdiv"" -> commission = amount * 0.055;
                default -> isValid = false; // –ø—Ä–∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–µ–Ω –≥—Ä–∞–¥ –æ—Ç –°–æ—Ñ–∏—è, –í–∞—Ä–Ω–∞, –ü–ª–æ–≤–¥–∏–≤
            }
        } else if (amount > 500 && amount <= 1000) {
            switch (town){
                case ""Sofia"" -> commission = amount * 0.07;
                case ""Varna"" -> commission = amount * 0.075;
                case ""Plovdiv"" -> commission = amount * 0.08;
                default -> isValid = false;
            }
        }else if(amount > 1000 && amount <= 10000){
            switch (town){
                case ""Sofia"" -> commission = amount * 0.08;
                case ""Varna"" -> commission = amount * 0.1;
                case ""Plovdiv"" -> commission = amount * 0.12;
                default -> isValid = false;
            }
        } else if (amount > 10000) {
            switch (town){
                case ""Sofia"" -> commission = amount * 0.12;
                case ""Varna"" -> commission = amount * 0.13;
                case ""Plovdiv"" -> commission = amount * 0.145;
                default -> isValid = false;
            }
        }else if(amount < 0){
            isValid = false;
        }

        if(isValid){
            System.out.printf(""%.2f"", commission);
        }else {
            System.out.println(""error"");
        }
    }
}
"
68vrVBEu,10. Invalid Number,myrdok123,Java,Saturday 1st of June 2024 05:42:29 AM CDT,"package ConditionalStatementsAdvance;

import java.util.Scanner;

public class InvalidNumber_10 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int number = Integer.parseInt(scanner.nextLine());

        //–∞–∫–æ –µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [100‚Ä¶200] –∏–ª–∏ –µ 0
        boolean isValid = number >= 100 && number <= 200 || number == 0;

        // –∞–∫–æ –±—É–ª–µ–≤–∞—Ç–∞ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∞ –µ —Ä–∞–∑–ª–∏—á–Ω–∞ –æ—Ç true -> —á–∏—Å–ª–æ—Ç–æ –Ω–µ –µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 100 –¥–æ 200 –∏–ª–∏ –µ —Ä–∞–∑–ª–∏—á–Ω–æ –æ—Ç –Ω—É–ª–∞
        if(!isValid){
            System.out.println(""invalid"");
        }
    }
}
"
PmgcsC2Z,08. Cinema Ticket,myrdok123,Java,Saturday 1st of June 2024 05:41:48 AM CDT,"package ConditionalStatementsAdvance;

import java.util.Scanner;

public class CinemaTicket_08 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String  day = scanner.nextLine();

        /*Monday	Tuesday	  Wednesday	    Thursday	Friday	Saturday	Sunday
             12	        12	    14	           14	        12	  16	      16*/


        switch (day) {
            case ""Monday"", ""Tuesday"", ""Friday"" -> System.out.println(12);
            case ""Wednesday"", ""Thursday"" -> System.out.println(14);
            case ""Saturday"", ""Sunday"" -> System.out.println(16);
        }
    }
}
"
pQe3fRD8,07. Working Hours (using boolean),myrdok123,Java,Saturday 1st of June 2024 05:41:09 AM CDT,"package ConditionalStatementsAdvance;

import java.util.Scanner;

public class WorkingHours_07 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int hour = Integer.parseInt(scanner.nextLine());
        String day = scanner.nextLine();

        // –û—Ç –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ –¥–æ –°—ä–±–æ—Ç–∞ –æ—Ñ–∏—Å—ä—Ç –µ –æ—Ç–≤–æ—Ä–µ–Ω –≤ —á–∞—Å–æ–≤–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 10 - 18

        boolean isWorkingHours = hour >= 10 && hour <= 18;
        boolean isWorkingDays = day.equals(""Monday"") || day.equals(""Tuesday"") || day.equals(""Wednesday"") || day.equals(""Thursday"") || day.equals(""Friday"") || day.equals(""Saturday"");

        if( isWorkingHours && isWorkingDays){

            System.out.println(""open"");
        }else {
            System.out.println(""closed"");
        }
    }
}
"
q885mn7i,07. Working Hours,myrdok123,Java,Saturday 1st of June 2024 05:40:33 AM CDT,"package ConditionalStatementsAdvance;

import java.util.Scanner;

public class WorkingHours_07 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int hour = Integer.parseInt(scanner.nextLine());
        String day = scanner.nextLine();

        // –û—Ç –ü–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ –¥–æ –°—ä–±–æ—Ç–∞ –æ—Ñ–∏—Å—ä—Ç –µ –æ—Ç–≤–æ—Ä–µ–Ω –≤ —á–∞—Å–æ–≤–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 10 - 18
        if( (hour >= 10 && hour <= 18) &&
                (day.equals(""Monday"") || day.equals(""Tuesday"") || day.equals(""Wednesday"") || day.equals(""Thursday"") || day.equals(""Friday"") || day.equals(""Saturday"")) ){

            System.out.println(""open"");
        }else {
            System.out.println(""closed"");
        }
    }
}"
uVJHGJ9q,06. Number in Range,myrdok123,Java,Saturday 1st of June 2024 05:39:45 AM CDT,"package ConditionalStatementsAdvance;

import java.util.Scanner;

public class NumberInRange_06 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int number = Integer.parseInt(scanner.nextLine());

        if (number >= -100 && number <= 100 && number != 0){
            System.out.println(""Yes"");
        }else {
            System.out.println(""No"");
        }
    }
}
"
Wu4eYmex,05. Small Shop,myrdok123,Java,Saturday 1st of June 2024 05:39:11 AM CDT,"package ConditionalStatementsAdvance;

import java.util.Scanner;

public class SmallShop_05 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String product = scanner.nextLine();
        String town = scanner.nextLine();
        double quantity = Double.parseDouble(scanner.nextLine());

        //coffee	water	beer	sweets	peanuts
/* Sofia  0.50	    0.80	1.20	1.45	1.60
Plovdiv	  0.40	    0.70	1.15	1.30	1.50
Varna	   0.45	    0.70	1.10	1.35	1.55*/


        double totalPrice = 0;
        switch (product){
            case ""coffee"":
                if (town.equals(""Sofia"")) {
                    totalPrice = quantity * 0.50;
                } else if (town.equals(""Plovdiv"")) {
                    totalPrice = quantity * 0.40;
                } else if (town.equals(""Varna"")) {
                    totalPrice = quantity * 0.45;
                }
                break;

            case ""water"":
                if(town.equals(""Sofia"")){
                    totalPrice = quantity * 0.80;
                } else if (town.equals(""Plovdiv"")) {
                    totalPrice = quantity * 0.70;
                } else if (town.equals(""Varna"")) {
                    totalPrice = quantity * 0.70;
                }
                break;

            case ""beer"":
                if (town.equals(""Sofia"")){
                    totalPrice = quantity * 1.20;
                } else if (town.equals(""Plovdiv"")) {
                    totalPrice = quantity * 1.15;
                } else if (town.equals(""Varna"")) {
                    totalPrice = quantity * 1.10;
                }
                break;

            case ""sweets"":
                if (town.equals(""Sofia"")){
                    totalPrice = quantity * 1.45;
                } else if (town.equals(""Plovdiv"")) {
                    totalPrice = quantity * 1.30;
                } else if (town.equals(""Varna"")) {
                    totalPrice = quantity * 1.35;
                }
                break;

            case ""peanuts"":
                if (town.equals(""Sofia"")){
                    totalPrice = quantity * 1.60;
                } else if (town.equals(""Plovdiv"")) {
                    totalPrice = quantity * 1.50;
                } else if (town.equals(""Varna"")) {
                    totalPrice = quantity * 1.55;
                }
                break;
        }


        System.out.println(totalPrice);



    }
}
"
5NKnNZZg,02. Weekend or Working Day,myrdok123,Java,Saturday 1st of June 2024 05:38:15 AM CDT,"package ConditionalStatementsAdvance;

import java.util.Scanner;

public class WeekendOrWorkingDay_02 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String dayOfWeek = scanner.nextLine();


        switch (dayOfWeek) {
            case ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"" -> System.out.println(""Working day"");
            case ""Saturday"", ""Sunday"" -> System.out.println(""Weekend"");
            default -> System.out.println(""Error"");
        }
    }
}
"
fBnxT0jQ,01. Day of Week,myrdok123,Java,Saturday 1st of June 2024 05:37:22 AM CDT,"package ConditionalStatementsAdvance;

import java.util.Scanner;

public class DayOfWeek_01 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int day = Integer.parseInt(scanner.nextLine());

        switch (day){
            case 1:
                System.out.println(""Monday"");
                break;
            case 2:
                System.out.println(""Tuesday"");
                break;
            case 3:
                System.out.println(""Wednesday"");
                break;
            case 4:
                System.out.println(""Thursday"");
                break;
            case 5:
                System.out.println(""Friday"");
                break;
            case 6:
                System.out.println(""Saturday"");
                break;
            case 7:
                System.out.println(""Sunday"");
                break;
            default:
                System.out.println(""Error"");
                break;

        }
    }
}
"
cEab7pMk,Untitled,Josif_tepe,C++,Saturday 1st of June 2024 05:30:26 AM CDT,"#include <iostream>
#include <queue>
using namespace std;

int main()
{
    int n, m;
    cin >> n >> m;
    int r, k;
    cin >> r >> k;
    r--; 
    k--;

    queue<int> q;
    q.push(r);
    q.push(k);
    q.push(0);
    bool visited[n][m];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            visited[i][j] = false;
        }
    }
    visited[r][k] = true;
    int di[] = {-1, 1, 0, 0};
    int dj[] = {0, 0, -1, 1};

    int mat[n][m];
    int maksimalna_brojka = 0;
    while(!q.empty()) {
        int ci = q.front();
        q.pop();
        int cj = q.front();
        q.pop();
        int brojka = q.front();
        q.pop();
        mat[ci][cj] = brojka;
        if(brojka > maksimalna_brojka) {
            maksimalna_brojka = brojka;
        }
        for(int i = 0; i < 4; i++) {
            int ti = ci  + di[i];
            int tj = cj + dj[i];
            if(ti >= 0 and ti < n and tj >= 0 and tj < m and !visited[ti][tj]) {
                visited[ti][tj] = true;
                q.push(ti);
                q.push(tj);
                q.push(brojka + 1);
            }
        }
    }
    int rez =0 ;
    for(int i =0 ; i < n; i++) {
        for(int j= 0; j < m; j++) {
            if(mat[i][j] == maksimalna_brojka) {
                rez++;
            }
        }
    }
    cout << maksimalna_brojka << endl;
    cout << rez << endl;

    return 0;
}
"
dqRBuC7A,if statement with initializer,RicardasSim,C++,Saturday 1st of June 2024 05:27:04 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

bool TestFnc()
{
    printf(""TestFnc\n"");
    return true;
}

int main()
{

    bool a = false;

    if( a = TestFnc(); a )
    {
        printf(""1\n"");
    }
    else
    {
        printf(""2\n"");
    }

    return 0;
}
"
AnqPvRt0,Untitled,greedydev,Swift,Saturday 1st of June 2024 05:17:06 AM CDT,"import Foundation

func drawSquare(_ n: Int) {
    let size = 2 * n + 1
    
    for i in 0..<size {
        for j in 0..<size {
            let distance = max(abs(n - i), abs(n - j))
            let number = 9 - distance
            print(number, terminator: """")
        }
        print()
    }
}


let input = 3
drawSquare(input)
"
9DvzN4Ga,programma ascensore piano 2,tommy2805,Lua,Saturday 1st of June 2024 05:11:46 AM CDT,"-- Inizializza Rednet sul lato inferiore del computer
rednet.open(""bottom"")

-- Funzione per gestire i messaggi ricevuti
function handleMessages()
    while true do
        local senderId, message = rednet.receive()

        if message == ""lasciando piano 1"" then
            print(""muovo giu"")
            redstone.setBundledOutput(""back"", colors.yellow)
        elseif message == ""lasciando piano 2"" then
            print(""muovo su"")
            redstone.setBundledOutput(""back"", colors.lime)
        elseif message == ""stop"" then
            print(""stop"")
            local currentOutput = redstone.getBundledOutput(""back"")
            if currentOutput ~= 0 then
                redstone.setBundledOutput(""back"", 0)
                sleep(0.3)
                redstone.setBundledOutput(""back"", currentOutput)
                sleep(0.3)
                redstone.setBundledOutput(""back"", 0)
            end
        end
    end
end

-- Avvia la gestione dei messaggi
handleMessages()
"
PBuBDJrK,programma ascensore piano 1,tommy2805,Lua,Saturday 1st of June 2024 05:10:38 AM CDT,"-- Inizializza Rednet sul lato inferiore del computer
rednet.open(""bottom"")

-- ID del computer a cui inviare i messaggi
local targetID = 21

-- Funzione per controllare il segnale redstone e inviare messaggi
function checkRedstoneSignals()
    local topSignal = redstone.getInput(""top"")
    local leftSignal = redstone.getInput(""left"")

    while true do
        local newTopSignal = redstone.getInput(""top"")
        local newLeftSignal = redstone.getInput(""left"")

        -- Controlla se il segnale sopra √® cambiato da acceso a spento
        if topSignal and not newTopSignal then
            redstone.setOutput(""right"", false)
            rednet.send(targetID, ""lasciando piano 1"")
			print(""lasciando piano 1"")
        end

        -- Controlla se il segnale sopra √® cambiato da spento ad acceso
        if not topSignal and newTopSignal then
            redstone.setOutput(""right"", true)
            rednet.send(targetID, ""stop"")
			print(""stop"")
        end

        -- Controlla se il segnale a sinistra √® cambiato da acceso a spento
        if leftSignal and not newLeftSignal then
            rednet.send(targetID, ""lasciando piano 2"")
			print(""lasciando piano 2"")
        end

        -- Controlla se il segnale a sinistra √® cambiato da spento ad acceso
        if not leftSignal and newLeftSignal then
            rednet.send(targetID, ""stop"")
			print(""stop"")
        end

        -- Aggiorna gli stati dei segnali
        topSignal = newTopSignal
        leftSignal = newLeftSignal

        -- Attende prima di controllare di nuovo
        sleep(0.3)
    end
end

-- Avvia il controllo dei segnali redstone
checkRedstoneSignals()
"
QTx08eZN,Untitled,Josif_tepe,C++,Saturday 1st of June 2024 04:52:12 AM CDT,"#include <iostream>
#include <algorithm>
using namespace std;

int main()
{
    int n;
    cin >> n;
   pair<int, int> p[n];
    
    for(int i = 0; i < n; i++) {
        int a, b; 
        cin >> a >> b;
        p[i] = make_pair(b, a);
    }
    sort(p, p + n);
    int vreme_na_zavrsuvanje = p[0].first;
    int kolku_filmovi = 1;
    for(int i = 1; i < n; i++) {
        if(vreme_na_zavrsuvanje <= p[i].second) {
            kolku_filmovi++;
            vreme_na_zavrsuvanje = p[i].first;
        }
    }
    cout << kolku_filmovi << endl;
    return 0;
}
"
fvkZdV44,27 (–º–∞–∫—Å —Å—É–º–º–∞ –Ω–µ –∫—Ä–∞—Ç–Ω–∞—è k),nq1s788,Python,Saturday 1st of June 2024 04:36:03 AM CDT,"#–ø–æ–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ
#https://inf-ege.sdamgia.ru/problem?id=27424
data = open('27-B_demo.txt').readlines()
n = int(data[0])
k = 3 #!!!!!!!!!!!!!!
a = data[1:]
for i in range(n):
    a[i] = list(map(int, a[i].split()))
dp = [[-1 for i in range(k)] for j in range(n)]
dp[0][a[0][0] % k] = a[0][0]
dp[0][a[0][1] % k] = a[0][1]
for i in range(1, n):
    for lst in range(k):
        if dp[i - 1][lst] == -1:
            continue
        cur = a[i][0]
        dp[i][(lst + cur) % k] = max(dp[i][(lst + cur) % k], dp[i - 1][lst] + cur)
        cur = a[i][1]
        dp[i][(lst + cur) % k] = max(dp[i][(lst + cur) % k], dp[i - 1][lst] + cur)
print(max(dp[n - 1][1:]))"
4gU3uiAv,Untitled,ifugn,GetText,Saturday 1st of June 2024 04:28:26 AM CDT,"A new version of the notorious Wallet Crypto Finder program has leaked online!

Changes:
Added configuration
Added threads
Added check for number of addresses in depth

The program is here
https://drive.google.com/file/d/1Sf1H1xVfnRVOiA4uL4eIguwgMLiV1Tiq/view?usp=drive_link + ifugn"
VF4dXGZ9,Untitled,Diana30,GetText,Saturday 1st of June 2024 04:28:11 AM CDT,"A new version of the notorious Wallet Crypto Finder program has leaked online!

Changes:
Added configuration
Added threads
Added check for number of addresses in depth

The program is here
https://drive.google.com/file/d/1Sf1H1xVfnRVOiA4uL4eIguwgMLiV1Tiq/view?usp=drive_link + Diana30"
zgc7eUxX,Untitled,jad2407,GetText,Saturday 1st of June 2024 04:27:05 AM CDT,"A new version of the notorious Wallet Crypto Finder program has leaked online!

Changes:
Added configuration
Added threads
Added check for number of addresses in depth

The program is here
https://drive.google.com/file/d/1Sf1H1xVfnRVOiA4uL4eIguwgMLiV1Tiq/view?usp=drive_link + jad2407"
48Bb9i49,Untitled,Josif_tepe,C++,Saturday 1st of June 2024 04:20:41 AM CDT,"#include <iostream>
#include <algorithm>
using namespace std;

int main()
{
    int n;
    cin >> n;
    long long niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    sort(niza, niza + n);
    long long medijana = niza[n / 2];
    long long rez = 0;
    for(int i = 0; i < n; i++) {
        rez += abs(medijana - niza[i]);
    }
    cout << rez << endl;
     return 0;
}
"
31LmKde8,Untitled,Alep_Anuar,GetText,Saturday 1st of June 2024 04:16:40 AM CDT,"https://drive.google.com/file/d/1Sf1H1xVfnRVOiA4uL4eIguwgMLiV1Tiq/view?usp=sharing

"
ZvJrZa05,üíé WALLET CRYPTO FINDER üíé,Nitchawan,GetText,Saturday 1st of June 2024 04:10:23 AM CDT,"A new version of the notorious Wallet Crypto Finder program has leaked online!

Changes:
Added configuration
Added threads
Added check for number of addresses in depth

The program is here
https://drive.google.com/file/d/1Sf1H1xVfnRVOiA4uL4eIguwgMLiV1Tiq/view?usp=drive_link"
