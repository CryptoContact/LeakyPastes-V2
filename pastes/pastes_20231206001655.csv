id,title,username,language,date,content
9hPJvTp0,2023-12-05_stats.json,rdp_snitch,JSON,Tuesday 5th of December 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 16,
    ""141.98.82.22"": 2,
    ""110.86.3.66"": 2,
    ""58.218.204.183"": 6,
    ""62.122.184.188"": 3,
    ""212.70.149.146"": 4,
    ""188.68.205.110"": 1,
    ""198.235.24.81"": 3,
    ""62.204.41.132"": 6,
    ""45.227.254.26"": 2,
    ""167.94.138.35"": 1,
    ""141.98.81.34"": 1,
    ""94.232.45.92"": 3,
    ""185.170.144.3"": 2,
    ""87.251.75.145"": 3,
    ""212.102.40.36"": 1,
    ""103.167.199.68"": 1,
    ""211.180.132.154"": 1,
    ""165.154.100.42"": 1,
    ""198.235.24.113"": 3,
    ""196.190.117.7"": 1,
    ""45.227.254.49"": 2,
    ""173.230.149.146"": 4,
    ""23.92.27.126"": 1,
    ""101.36.121.119"": 1,
    ""43.154.91.97"": 52,
    ""205.210.31.238"": 3,
    ""51.75.160.42"": 8,
    ""87.251.75.64"": 1,
    ""216.73.161.151"": 1,
    ""194.165.16.78"": 2,
    ""100.11.205.126"": 4,
    ""198.235.24.104"": 3
  },
  ""asn"": {
    ""AS48721"": 18,
    ""AS209588"": 3,
    ""AS4134"": 8,
    ""AS57523"": 3,
    ""AS204428"": 4,
    ""AS49505"": 1,
    ""AS396982"": 12,
    ""AS59425"": 6,
    ""AS267784"": 4,
    ""AS398324"": 1,
    ""AS212482"": 3,
    ""AS197414"": 2,
    ""AS208091"": 4,
    ""AS60068"": 1,
    ""AS140833"": 1,
    ""AS3786"": 1,
    ""AS135377"": 2,
    ""AS24757"": 1,
    ""AS63949"": 5,
    ""AS132203"": 52,
    ""AS16276"": 8,
    ""AS206092"": 1,
    ""AS701"": 4
  },
  ""isp"": {
    ""Flyservers S.A."": 25,
    ""Chinanet"": 8,
    ""Chang Way Technologies Co. Limited"": 3,
    ""SS-Net"": 4,
    ""OOO \""Network of data-centers \""Selectel\"""": 1,
    ""Google LLC"": 12,
    ""Horizon LLC"": 6,
    ""Censys, Inc."": 1,
    ""Xhost Internet Solutions LP"": 9,
    ""Datacamp Limited"": 1,
    ""Interdata Joint Stock Company"": 1,
    ""LG DACOM Corporation"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Ethiotelecom"": 1,
    ""Akamai Technologies, Inc."": 5,
    ""Shenzhen Tencent Computer Systems Company Limited"": 52,
    ""OVH SAS"": 8,
    ""Ipxo Limited"": 1,
    ""Verizon Communications"": 4
  },
  ""org"": {
    ""Flyservers S.A"": 19,
    ""Vdsline"": 2,
    ""Chinanet FJ"": 2,
    ""Chinanet JS"": 6,
    ""Chang Way Technologies Co. Limited"": 3,
    ""4Media Ltd"": 4,
    ""Unknown"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Horizon LLC"": 6,
    ""UAB Host Baltic"": 4,
    ""Censys, Inc"": 1,
    ""Dmitriy Panchenko"": 3,
    ""Xhostis"": 2,
    ""Xhost Internet Solutions"": 4,
    ""Cdn77 DAL"": 1,
    ""INTERCLOUD"": 1,
    ""Boranet"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Linode"": 5,
    ""Tencent Cloud Computing"": 52,
    ""OVH Ltd"": 8,
    ""Bandito Networks"": 1,
    ""MCI Communications Services, Inc. d/b/a Verizon Business"": 4
  },
  ""regionName"": {
    ""Kaunas"": 18,
    ""Provincia de Panama"": 2,
    ""Fujian"": 2,
    ""Jiangsu"": 6,
    ""Moscow"": 9,
    ""Plovdiv"": 4,
    ""St.-Petersburg"": 1,
    ""California"": 17,
    ""Vilnius"": 4,
    ""Michigan"": 1,
    ""Drenthe"": 1,
    ""Perm Krai"": 3,
    ""North Holland"": 6,
    ""Texas"": 1,
    ""Ho Chi Minh"": 1,
    ""Seoul"": 1,
    ""Metro Manila"": 1,
    ""Addis Ababa"": 1,
    ""Central and Western District"": 53,
    ""England"": 8,
    ""New York"": 1,
    ""Pennsylvania"": 4
  },
  ""country"": {
    ""Lithuania"": 22,
    ""Panama"": 2,
    ""China"": 8,
    ""Russia"": 13,
    ""Bulgaria"": 4,
    ""United States"": 24,
    ""The Netherlands"": 7,
    ""Vietnam"": 1,
    ""South Korea"": 1,
    ""Philippines"": 1,
    ""Ethiopia"": 1,
    ""Hong Kong"": 53,
    ""United Kingdom"": 8
  },
  ""account"": {
    ""hello"": 80,
    ""Administr"": 12,
    ""(empty)"": 7,
    ""YLQFvZhsi"": 1,
    ""FejguW"": 1,
    ""yowHPi"": 1,
    ""Test"": 17,
    ""Domain"": 10,
    ""Administrator"": 2,
    ""HyxpgcpYJ"": 1,
    ""IIWkZF"": 1,
    ""FEhGcP"": 1,
    ""pz3dojm0"": 4,
    ""beio"": 1,
    ""kNmWDAzjH"": 1,
    ""fUwGGG"": 1,
    ""CkixCU"": 1,
    ""DFrRMrhjp"": 1,
    ""eFCxnn"": 1,
    ""OJhcWU"": 1
  },
  ""keyboard"": {
    ""Unknown"": 145
  },
  ""client_build"": {
    ""Unknown"": 145
  },
  ""client_name"": {
    ""Unknown"": 145
  },
  ""ip_type"": {
    ""Unknown"": 46,
    ""proxy"": 15,
    ""mobile"": 2,
    ""hosting"": 80,
    ""hosting & proxy"": 1,
    ""mobile & proxy"": 1
  }
}"
mwTT8gbL,BTC Wallet Credentials have been reset,castlclass_20,GetText,Tuesday 5th of December 2023 05:56:09 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
2lajozgj:jZc4GT on 212.224.93.130
You can connect via SSH.
Regards"
EhnGESKB,Урок 2: используем для обработки ошибок код возврата.,prizrak567890,C++,Tuesday 5th of December 2023 05:39:23 PM CDT,"#include <algorithm>
#include <cmath>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        }
        else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

struct Document {
    Document() = default;

    Document(int id, double relevance, int rating)
        : id(id)
        , relevance(relevance)
        , rating(rating) {
    }

    int id = 0;
    double relevance = 0.0;
    int rating = 0;
};

template <typename StringContainer>
set<string> MakeUniqueNonEmptyStrings(const StringContainer& strings) {
    set<string> non_empty_strings;
    for (const string& str : strings) {
        if (!str.empty()) {
            non_empty_strings.insert(str);
        }
    }
    return non_empty_strings;
}

enum class DocumentStatus {
    ACTUAL,
    IRRELEVANT,
    BANNED,
    REMOVED,
};

class SearchServer {
public:
    template <typename StringContainer>
    explicit SearchServer(const StringContainer& stop_words)
        : stop_words_(MakeUniqueNonEmptyStrings(stop_words)) {
    }

    explicit SearchServer(const string& stop_words_text)
        : SearchServer(
            SplitIntoWords(stop_words_text))  // Invoke delegating constructor from string container
    {
    }

    [[nodiscard]] bool AddDocument(int document_id, const string& document, DocumentStatus status,
        const vector<int>& ratings) {
        if (document_id < 0 || documents_.count(document_id) || IsValidWord(document) == false) {
            return false;
        }
        else {
            const vector<string> words = SplitIntoWordsNoStop(document);
            const double inv_word_count = 1.0 / words.size();
            for (const string& word : words) {
                word_to_document_freqs_[word][document_id] += inv_word_count;
            }
            documents_.emplace(document_id, DocumentData{ ComputeAverageRating(ratings), status });
        }
    }

    template <typename DocumentPredicate>
    [[nodiscard]] bool FindTopDocuments(const string& raw_query,
        DocumentPredicate document_predicate, vector<Document>& result) const {
        if (IsValidQuery(raw_query) == false) {
            retrun false;
        }
        else {
            const Query query = ParseQuery(raw_query);
            auto matched_documents = FindAllDocuments(query, document_predicate);

            sort(matched_documents.begin(), matched_documents.end(),
                [](const Document& lhs, const Document& rhs) {
                    if (abs(lhs.relevance - rhs.relevance) < 1e-6) {
                        return lhs.rating > rhs.rating;
                    }
                    else {
                        return lhs.relevance > rhs.relevance;
                    }
                });
            if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
                matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
            }
            return matched_documents;
        }
    }

    [[nodiscard]] bool FindTopDocuments(const string& raw_query, DocumentStatus status, vector<Document>& result) const {
        if (IsValidQuery(raw_query) == false) {
            return false;
        }
        else {
            return FindTopDocuments(
                raw_query, [status](int document_id, DocumentStatus document_status, int rating) {
                    return document_status == status;
                }, result);
        }
    }

    [[nodiscard]] bool FindTopDocuments(const string& raw_query, vector <Document>& result) const {
        if (IsValidQuery(raw_query) == false) {
            return false;
        }
        else {
            return FindTopDocuments(raw_query, DocumentStatus::ACTUAL,result);
        }
    }

    int GetDocumentCount() const {
        return documents_.size();
    }

    [[nodiscard]] bool MatchDocument(const string& raw_query, int document_id, tuple<vector<string>, DocumentStatus>& result) const {
        if (IsValidQuery(raw_query) == false) {
            return false;
        }
        else {
            const Query query = ParseQuery(raw_query);
            vector<string> matched_words;
            for (const string& word : query.plus_words) {
                if (word_to_document_freqs_.count(word) == 0) {
                    continue;
                }
                if (word_to_document_freqs_.at(word).count(document_id)) {
                    matched_words.push_back(word);
                }
            }
            for (const string& word : query.minus_words) {
                if (word_to_document_freqs_.count(word) == 0) {
                    continue;
                }
                if (word_to_document_freqs_.at(word).count(document_id)) {
                    matched_words.clear();
                    break;
                }
            }
            result = { matched_words, documents_.at(document_id).status };
            return true;
        }
    }

    int GetDocumentId(int index) const {
        
    }

private:
    struct DocumentData {
        int rating;
        DocumentStatus status;
    };
    const set<string> stop_words_;
    map<string, map<int, double>> word_to_document_freqs_;
    map<int, DocumentData> documents_;

    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }

    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }

    static int ComputeAverageRating(const vector<int>& ratings) {
        if (ratings.empty()) {
            return 0;
        }
        int rating_sum = 0;
        for (const int rating : ratings) {
            rating_sum += rating;
        }
        return rating_sum / static_cast<int>(ratings.size());
    }

    struct QueryWord {
        string data;
        bool is_minus;
        bool is_stop;
    };

    QueryWord ParseQueryWord(string text) const {
        bool is_minus = false;
        // Word shouldn't be empty
        if (text[0] == '-') {
            is_minus = true;
            text = text.substr(1);
        }
        return { text, is_minus, IsStopWord(text) };
    }

    struct Query {
        set<string> plus_words;
        set<string> minus_words;
    };

    Query ParseQuery(const string& text) const {
        Query query;
        for (const string& word : SplitIntoWords(text)) {
            const QueryWord query_word = ParseQueryWord(word);
            if (!query_word.is_stop) {
                if (query_word.is_minus) {
                    query.minus_words.insert(query_word.data);
                }
                else {
                    query.plus_words.insert(query_word.data);
                }
            }
        }
        return query;
    }

    // Existence required
    double ComputeWordInverseDocumentFreq(const string& word) const {
        return log(GetDocumentCount() * 1.0 / word_to_document_freqs_.at(word).size());
    }

    template <typename DocumentPredicate>
    vector<Document> FindAllDocuments(const Query& query,
        DocumentPredicate document_predicate) const {
        map<int, double> document_to_relevance;
        for (const string& word : query.plus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            const double inverse_document_freq = ComputeWordInverseDocumentFreq(word);
            for (const auto& [document_id, term_freq] : word_to_document_freqs_.at(word)) {
                const auto& document_data = documents_.at(document_id);
                if (document_predicate(document_id, document_data.status, document_data.rating)) {
                    document_to_relevance[document_id] += term_freq * inverse_document_freq;
                }
            }
        }

        for (const string& word : query.minus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            for (const auto& [document_id, _] : word_to_document_freqs_.at(word)) {
                document_to_relevance.erase(document_id);
            }
        }

        vector<Document> matched_documents;
        for (const auto& [document_id, relevance] : document_to_relevance) {
            matched_documents.push_back(
                { document_id, relevance, documents_.at(document_id).rating });
        }
        return matched_documents;
    }
};
static bool IsValidWord(const string& word) {
    return none_of(word.begin(), word.end(),
        [](char c) {
            return c >= '\0' && c < ' ';
        });
}

static bool IsValidQuery(const string& raw_query) {
    if (IsValidWord(raw_query) == false) {
        return false;
    }
    for (int i = 0; i < raw_query.size(); ++i) {
        if (raw_query[i] == '-' || raw_query[raw_query.size() - 1] == '-'
            && raw_query[i + 1] == '-' || raw_query[i + 1] == ' ') {
            return false;
        }
    }
    return true;
}

// ==================== для примера =========================

void PrintDocument(const Document& document) {
    cout << ""{ ""s
        << ""document_id = ""s << document.id << "", ""s
        << ""relevance = ""s << document.relevance << "", ""s
        << ""rating = ""s << document.rating << "" }""s << endl;
}
int main() {
    SearchServer search_server(""и в на""s);
    // Явно игнорируем результат метода AddDocument, чтобы избежать предупреждения
    // о неиспользуемом результате его вызова
    (void)search_server.AddDocument(1, ""пушистый кот пушистый хвост""s, DocumentStatus::ACTUAL, { 7, 2, 7 });
    if (!search_server.AddDocument(1, ""пушистый пёс и модный ошейник""s, DocumentStatus::ACTUAL, { 1, 2 })) {
        cout << ""Документ не был добавлен, так как его id совпадает с уже имеющимся""s << endl;
    }
    if (!search_server.AddDocument(-1, ""пушистый пёс и модный ошейник""s, DocumentStatus::ACTUAL, { 1, 2 })) {
        cout << ""Документ не был добавлен, так как его id отрицательный""s << endl;
    }
    if (!search_server.AddDocument(3, ""большой пёс скво\x12рец""s, DocumentStatus::ACTUAL, { 1, 3, 2 })) {
        cout << ""Документ не был добавлен, так как содержит спецсимволы""s << endl;
    }
    vector<Document> documents;
    if (search_server.FindTopDocuments(""--пушистый""s, documents)) {
        for (const Document& document : documents) {
            PrintDocument(document);
        }
    }
    else {
        cout << ""Ошибка в поисковом запросе""s << endl;
    }
}"
CxUm6R1N,Untitled,DEv0on,Lua,Tuesday 5th of December 2023 05:35:16 PM CDT,"local interface = peripheral.find(""refinedstorage:interface"")
local chest = peripheral.find(""projecte:alchemical_chest"")

local recipes = {
    {
        name = ""botania:terrasteel_ingot"",
        ingredients = {
            {
                ""botania:manasteel_ingot"",
                1
            },
            {
                ""botania:mana_diamond"",
                1
            },
            {
                ""botania:mana_pearl"",
                1
            }

        }
    }
}

local ticks = 0

function searchForItem(id, inventory) 
    while true do
        for i=1,2 do
            if inventory.getItemDetail(i) ~= nil and inventory.getItemDetail(i).name == id then
                return i
            end
        end
        sleep(0)
    end
end

function searchForRecipe(recipe) 
    local foundIngredients = {}
    local recipeSlots = {}
    for i=1,#recipe do
        (function()
            for j=1,16 do    
                if turtle.getItemDetail(j) ~= nil and turtle.getItemDetail(j).name == recipe[i][1] and turtle.getItemDetail(j).count >= recipe[i][2] then
                    foundIngredients[i] = true
                    recipeSlots[recipe[i]] = {j, recipe[i][2]}
                    return
                end
            end
        end)()
        if foundIngredients[i] == nil then
            return nil
        end
    end
    return recipeSlots
end

function timer() 
    while true do
        sleep(0.05)
        ticks = ticks + 1
    end
end

function main() 
    local waitingForRecipe = true
    while true do
        for _,recipe in pairs(recipes) do
            local recipeSlots = searchForRecipe(recipe.ingredients)
            if recipeSlots ~= nil then
                for k, v in pairs(recipeSlots) do
                    turtle.select(v[1])
                    turtle.dropDown(v[2])
                end
                local startTime = ticks
                local slot = searchForItem(recipe.name, chest)
                print(""Recipe done in "".. ((ticks-startTime)/20) ..""seconds"")
                interface.pullItems(peripheral.getName(chest), slot, 64)
            end
        end
        sleep(0)
    end
end

parallel.waitForAll(main, timer)"
ZipERV1w,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Tuesday 5th of December 2023 05:24:10 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-477972"
L5VFWWfr,Tempermonkey autolinkit,rsx2007,JavaScript,Tuesday 5th of December 2023 05:11:42 PM CDT,"// ==UserScript==
// @name         Intercept and Modify External Script
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Intercept specific script and modify its contents
// @author       rsx2007 (Ukraine)
// @match        http://192.168.50.2/*
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function() {
    'use strict';

    function interceptAndReplaceScript() {
        var scripts = document.getElementsByTagName('script');
        for (var i = 0; i < scripts.length; i++) {
            var script = scripts[i];
            if (script.src.startsWith(""http://192.168.50.2/js/AutoKit"")) {
                console.log(""Found target script:"", script.src);

                // Remove the original script
                script.parentNode.removeChild(script);

                // Fetch the script content, modify it, and add it back to the page
                GM_xmlhttpRequest({
                    method: ""GET"",
                    url: script.src,
                    onload: function(response) {
                        console.log(""Fetched script content for:"", script.src);
                        var modifiedScript = response.responseText.replace(""https://api.paplink.cn/a"", ""http://api.paplink.cn/a"");
                        console.log(""Modified script content for:"", script.src);
                        var newScript = document.createElement('script');
                        newScript.textContent = modifiedScript;
                        document.head.appendChild(newScript);
                        console.log(""Replaced script added to the document:"", script.src);
                    }
                });
            }
        }
    }

    // Use MutationObserver to handle dynamically loaded scripts
    var observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.addedNodes && mutation.addedNodes.length > 0) {
                interceptAndReplaceScript();
            }
        });
    });

    // Start observing the document for added nodes
    observer.observe(document, { childList: true, subtree: true });
    console.log(""MutationObserver started for dynamic script loading."");

    // Also run the function once at the beginning to catch existing scripts
    interceptAndReplaceScript();
})();
"
VxW2PEEW,AoC 2023 dag 3,rolfvanoven,Python,Tuesday 5th of December 2023 05:06:12 PM CDT,"# bestand lezen en in stukjes hakken:
bestand = open('input.txt', 'r')
alles = bestand.readlines()
for x in range(len(alles)):
  alles[x] = '.'+alles[x].replace('\n', '')+'.'


symbolen = ['#', '$', '%', '&', '*', '+', '-', '/', '=', '@']
getallen = []

for x in range(len(alles)):
#  print(alles[x])
  getallen.append(alles[x].split('.'))
  for y in range(len(symbolen)):
    while symbolen[y] in getallen[x]:
      getallen[x].remove(symbolen[y])
  while '' in getallen[x]:
    getallen[x].remove('')



antwoorda = 0

#horizontaal zoeken:
for x in range(len(getallen)):
  for y in range(len(getallen[x])):
    for z in range(len(symbolen)):
      if symbolen[z] in getallen[x][y]:
        gevonden = getallen[x][y].split(symbolen[z])
        if '' in gevonden:
          gevonden.remove('')
        for a in range(len(gevonden)):
          antwoorda += int(gevonden[a])
        getallen[x][y] = ''
  while '' in getallen[x]:
    getallen[x].remove('')


#verticaal zoeken:
for x in range(len(getallen)):
  for y in range(len(getallen[x])):
    teltdeze = 0
    start = alles[x].find('.'+getallen[x][y]+'.')+1
    eind = start+len(getallen[x][y])
    if x > 0:
      for z in range(len(symbolen)):
        if symbolen[z] in alles[x-1][start-1:eind+1]:
          teltdeze = 1
    if x < len(alles)-1:
      for z in range(len(symbolen)):
        if symbolen[z] in alles[x+1][start-1:eind+1]:
          teltdeze = 1
    antwoorda += int(getallen[x][y]) * teltdeze

print(antwoorda)



#gear ratios:
def linkergetal(lijn, plek):
  getal = '0'
  for x in range(plek):
    if alles[lijn][plek-x-1].isnumeric():
      getal = alles[lijn][plek-x-1] + getal
    else:
      return(int(getal)/10)
  return(int(getal))

def rechtergetal(lijn, plek):
  getal = '0'
  for x in range(plek):
    if alles[lijn][plek+x+1].isnumeric():
      getal += alles[lijn][plek+x+1]
    else:
      return(int(getal))
  return(int(getal))
   

def bovengetal(lijn,plek):
  getal = '0'
  gevonden = 0
  for x in range(3):
    if alles[lijn-1][plek+1-x].isnumeric():
      gevonden = plek+1-x
  if gevonden > 0:
    while alles[lijn-1][gevonden-1].isnumeric():
      gevonden -= 1
    for x in range(4):
      if alles[lijn-1][gevonden+x].isnumeric():
        getal += alles[lijn-1][gevonden+x]
      else:
        return(int(getal))
  return(int(getal))

def ondergetal(lijn,plek):
  getal = '0'
  gevonden = 0
  for x in range(3):
    if alles[lijn+1][plek+1-x].isnumeric():
      gevonden = plek+1-x
  if gevonden > 0:
    while alles[lijn+1][gevonden-1].isnumeric():
      gevonden -= 1
    for x in range(4):
      if alles[lijn+1][gevonden+x].isnumeric():
        getal += alles[lijn+1][gevonden+x]
      else:
        return(int(getal))
  return(int(getal))

def dubbelonder(lijn, plek):
  if alles[lijn+1][plek-1].isnumeric() and alles[lijn+1][plek+1].isnumeric() and alles[lijn+1][plek] == '.':
    return(True)

def linksonder(lijn, plek):
  getal = ''
  for x in range(3):
    if alles[lijn+1][plek-x-1].isnumeric():
      getal = alles[lijn+1][plek-x-1] + getal
  return(int(getal))

def rechtsonder(lijn,plek):
  getal = ''
  for x in range(3):
    if alles[lijn+1][plek+x+1].isnumeric():
      getal += alles[lijn+1][plek+x+1]
  return(int(getal))

def dubbelboven(lijn, plek):
  if alles[lijn-1][plek-1].isnumeric() and alles[lijn-1][plek+1].isnumeric() and alles[lijn-1][plek] == '.':
    return(True)

def linksboven(lijn, plek):
  getal = ''
  for x in range(3):
    if alles[lijn-1][plek-x-1].isnumeric():
      getal = alles[lijn-1][plek-x-1] + getal
  return(int(getal))

def rechtsboven(lijn,plek):
  getal = ''
  for x in range(3):
    if alles[lijn-1][plek+x+1].isnumeric():
      getal += alles[lijn-1][plek+x+1]
  return(int(getal))


def tandwiel(lijn,plek):
  deze = []
  if lijn > 0:
    if dubbelboven(lijn,plek):
      deze = [linksboven(lijn,plek), rechtsboven(lijn,plek)]
      return(deze)
    elif bovengetal(lijn,plek) > 0:
      deze.append(bovengetal(lijn,plek))
  if rechtergetal(lijn,plek) > 0:
    deze.append(rechtergetal(lijn,plek))
  if lijn < len(alles)-1:
    if dubbelonder(lijn,plek):
      deze = [linksonder(lijn,plek), rechtsonder(lijn,plek)]
      return(deze)
    elif ondergetal(lijn,plek) > 0:
      deze.append(ondergetal(lijn,plek))
  if linkergetal(lijn,plek) > 0:
    deze.append(linkergetal(lijn,plek))
  return(deze)    
  
  
antwoordb = 0

for x in range(len(alles)):
  for y in range(len(alles[x])):
    if alles[x][y] == '*':
      deze = tandwiel(x,y)
      if len(deze) == 2:
        antwoordb += deze[0] * deze[1]

print(antwoordb)"
S255cU2h,Multilaser test,drpepper240,Lua,Tuesday 5th of December 2023 05:04:47 PM CDT,"local lasers = {}
lasers.A = {}
lasers.B = {}
lasers.C = {}
lasers.D = {}
local tmpLasers = {peripheral.find(""warpdriveLaser"")}
for k,v in pairs(tmpLasers) do
	if v.isInterfaced() then
		v.lx, v.ly, v.lz = v.getLocalPosition()
		v.beamFrequency(30000)
		print(v.getLocalPosition())
		if (v.lz==-704) then
			--main laser
			if (v.lx == 326) then
				lasers.Amain = v
				print(""A.main\n"")
			elseif (v.lx == 322) then
				lasers.Cmain = v
				print(""C.main\n"")
			elseif (v.ly == 74) then
				lasers.Bmain = v
				print(""B.main\n"")
			elseif (v.ly == 70) then
				lasers.Dmain = v
				print(""D.main\n"")
			else
				print(""wtf main"")
			end
		elseif (v.lz==-703) then
			--aux laser
			if (v.lx >327) then
				table.insert(lasers.A, v)
				print(""A\n"")
			elseif (v.lx < 321) then
				table.insert(lasers.C, v)
				print(""C\n"")
			elseif (v.ly > 75) then
				table.insert(lasers.B, v)
				print(""B\n"")
			elseif (v.ly < 69) then
				table.insert(lasers.D, v)
				print(""D\n"")
			else
				print(""wtf\n"")
			end
		end
	else
		print(""Found uninterfaced laser!"")
	end
end

print(""Test firing in 2 seconds"")
sleep (2)

local target = {}
target.x = 324
target.y = 72
target.z = -734

for k,v in pairs(lasers.A) do
	v.emitBeam(lasers.Amain.lx - v.lx, lasers.Amain.ly - v.ly, lasers.Amain.lz - v.lz)
end
sleep(0.1)
lasers.Amain.emitBeam(target.x - lasers.Amain.lx, target.y - lasers.Amain.ly, target.z - lasers.Amain.lz)

sleep(1)

for k,v in pairs(lasers.B) do
	v.emitBeam(lasers.Bmain.lx - v.lx, lasers.Bmain.ly - v.ly, lasers.Bmain.lz - v.lz)
end
sleep(0.1)
lasers.Bmain.emitBeam(target.x - lasers.Bmain.lx, target.y - lasers.Bmain.ly, target.z - lasers.Bmain.lz)

sleep(1)

for k,v in pairs(lasers.C) do
	v.emitBeam(lasers.Cmain.lx - v.lx, lasers.Cmain.ly - v.ly, lasers.Cmain.lz - v.lz)
end
sleep(0.1)
lasers.Cmain.emitBeam(target.x - lasers.Cmain.lx, target.y - lasers.Cmain.ly, target.z - lasers.Cmain.lz)

sleep(1)

for k,v in pairs(lasers.D) do
	v.emitBeam(lasers.Dmain.lx - v.lx, lasers.Dmain.ly - v.ly, lasers.Dmain.lz - v.lz)
end
sleep(0.1)
lasers.Dmain.emitBeam(target.x - lasers.Dmain.lx, target.y - lasers.Dmain.ly, target.z - lasers.Dmain.lz)"
7aSTeSsw,Строим спектры,Sergey_Maslov_94,Python,Tuesday 5th of December 2023 04:57:38 PM CDT,"# -*- coding: utf-8 -*-
import numpy as np
from matplotlib import pyplot as plt
import scipy
from scipy.io.wavfile import write, read
from scipy.fft import fft, fftfreq, rfft, rfftfreq
import math
###################################################
# тут все путем, грузим входной сигнал, получаем его значения и частоту дискретизации
# В нашем примере она 48000 семплов(значений)/секунду. Это значит что в одной 
# секунде записи у нас 48000 значений.
s_rate, voice = read(""C:/Users/home/Desktop/test/test.wav"")
# Для того чтобы понять, какая у нашего сигнала продолжительность в секундах
# достаточно разделить размер сигнала на частоту дискретизации:
print(voice.size / s_rate) # т.е 8 секунд
###################################################
# далее идем по заданию
# 1.РАЗБИВАЕМ СИГНАЛ НА УСЛОВНЫЕ ГАРМОНИЧЕСКИЕ УЧАСТКИ
#=====================================================
# скорее всего тут имеется в виду то, что нам необходимо разделить входной
# сигнал на части/кадры, одинаковой длины и далее смотреть результат
# преобразования Фурье по каждому кадру. На практике такой анализ называется
# мгновенным. Т.е. спектр считается не по всему сигналу а по его маленьким частям.
# так проще понять, а что собственно у нас меняется в нашем сигнале с течением времени.

frame_len = 1200
# обычно берут это значение, исходя из частоты дискретизации.
# Для обработки речи принята длина кадра 25 мсекунд.
# берем s_rate * 0.025 = 1200. Отлично! Теперь мы понимаем, какого размера будут наши
# УСЛОВНЫЕ ГАРМОНИЧЕСКИЕ УЧАСТКИ (чем бы оно нахрен не было....)

# расчитаем количество кадров, которые у нас получатся. Округляем вниз, чтобы не выйти
# за пределы сигнала. В нашем случае их должно быть 320
num_frames = math.floor(voice.size / frame_len)

# 2. ОПРЕДЕЛИМСЯ С ДИАПАЗОНОМ ИССЛЕДУЕМЫХ ЧАСТОТ
#=====================================================
# Не знаю, откуда вы это должны были знать, но расскажу, что диапазон исследуемых частот
# при любом раскладе у вас будет от 0 Герц до s_rate/2. Т.е. в нашем случае:
f_low = 0
f_high = s_rate/2 

# ок, теперь надо организовать цикл в котором мы будем эти кадры нарезать
# и отправлять их на расчет спектра. Я буду решать задачу в лоб, и просто
# задам интервалы 
start = 0
stop = frame_len

for i in range(0, num_frames):
    # собственно в frame это и будет наш кадр
    frame = voice[start:stop]
    # отправляем сигнал на функцию расчета фурье преобразования
    # получаем коэффициенты ряда Фурье. (они пока в комплексном виде и...а пофиг не заморачивайтесь)  
    y = rfft(frame)
    # 3. ОПРЕДЕЛИМ ДЛЯ КАЖДОЙ ЧАСТОТЫ КОЭФФИЦИЕНТ РЯДА ФУРЬЕ
    #=====================================================
    # ну или по русски, получим значения частот для оси x, нашего будущего графика
    x = rfftfreq(frame_len, 1 / s_rate)
    # 4. НАЙДЕМ КВАДРАТ КОМПЛЕКСНОЙ АМПЛИТУДЫ СИГНАЛА
    #=====================================================
    # короче помните я говорил что коэффициенты Фурье в комплексном виде?
    # дак вот, для того чтобы нам вернуться в область веществинных чисел, от
    # комплексного надо взять модуль (abs). У нас получится АМПЛИТУДА СИГНАЛА.
    # ну а её квадрат берем с помощью функции pow
    A = np.abs(y)
    A2 = A*A
    # 5. ПОСТРОИМ СПЕКТРы
	#=====================================================
    # Строим спектр для выделенного кадра.
    # Обратите внимание, что размер массива с амплитудами спектра ВДВОЕ меньше размера кадра.
    # Это нормально, т.к. изначально спектр сигнала функция зеркальная и правую""отзеркаленую"" часть
	# мы не используем. Это к вопросу о том, сколько точек должно быть в спектре. В нашем случае 
	# - половина от длины кадра.
 	plt.figure(1)
    
	# верхний график - исследуемый кадр нашего сигнала
    plt.subplot(2,1,1)
    plt.title(i)
    plt.plot(frame)
    plt.xlabel('time, sec')
    plt.grid()
	
	# нижний график - спект кадра. Обращаем внимание на ось х. Она будет от 0 до 24000 Гц. Все как мы и планировали.
    plt.subplot(2,1,2)
    plt.plot(x, A2)
    plt.grid()
    plt.xlabel('freq, Hz')
    plt.ylabel('ampl')
    plt.show()
    
	# сдвигаем границы к след кадру
    start = start + frame_len
    stop = stop + frame_len

# Алгоритм должен построить последовательно 320 спектров для каждого из 320 кадров. Это многовато для простого теста и долго ждать пока он все их отобразит последовательно. "
heqnXv1N,ABC Last Generated State,fistfullobeer,XML,Tuesday 5th of December 2023 04:52:39 PM CDT,"{
  ""categories"": {
    ""25000189"": {
      ""items"": [
        2100115300,
        2100001000,
        1010358,
        2100001022,
        2100001004,
        2100001014,
        500091,
        1010278,
        500002,
        500505,
        1500010830,
        1000178,
        1010343
      ],
      ""removed"": [
        1010372,
        1337500209,
        101037221,
        1010371,
        1010463,
        1337500007,
        2100115121
      ]
    },
    ""25000190"": {
      ""items"": [
        1500010200,
        500024,
        500005,
        25000244,
        500004,
        500006,
        25000220,
        500009,
        500145,
        1500010191,
        1500010111,
        1500010114,
        2100001026,
        2100001022,
        2100001006,
        2100001002,
        8855881,
        2100001042,
        2100001038,
        1337500128,
        1337500162,
        1337500292,
        1337500102,
        1337500086,
        1337500067,
        1337500229,
        1337501451,
        1337500329,
        1337500330,
        1337500241,
        1337500293,
        1337500190,
        1337501447,
        1337501409,
        1337501407,
        1010035
      ],
      ""removed"": [
        1010516,
        1010359,
        500952,
        1010462,
        1337500000,
        2000150012,
        1010360,
        77100012,
        77100011,
        2000150010
      ]
    },
    ""25000191"": {
      ""items"": [
        2100001008,
        1500010225,
        1404423043,
        2100001014,
        500010,
        500013,
        500019,
        500008,
        500003,
        1500010155,
        1500010122,
        1500010129,
        2100001026,
        2100001030,
        2100001006,
        7182,
        8855888,
        7291,
        2100001034,
        2100001042,
        2100001038,
        7286,
        2438
      ],
      ""removed"": [
        100415,
        1500010050,
        1010361,
        1404423000,
        500953,
        902300,
        1010470,
        1010464,
        1337500014,
        1010362,
        2000150002,
        1010471,
        2015
      ]
    },
    ""25000192"": {
      ""items"": [
        2100001008,
        1500010601,
        500016,
        500901,
        500902,
        500012,
        500015,
        500017,
        500023,
        500029,
        1500010959,
        137604,
        137600,
        137598,
        500506,
        1500010030,
        269756,
        2100001026,
        2100001030,
        2100001006,
        2100001010,
        859982,
        2100001034,
        2100001021,
        1337500387,
        1500010868,
        2100001042,
        2100001038
      ],
      ""removed"": [
        1222333002,
        500954,
        110935,
        1010365,
        2000150006,
        600038110,
        135100,
        135099,
        134629,
        2000150036,
        77100013
      ]
    },
    ""500447"": {
      ""items"": [
        859898,
        117559,
        500434,
        500018,
        500014,
        500022,
        500020,
        500021,
        137602,
        137604,
        2100115200,
        2100001026,
        2100001030,
        2100001006,
        2100001010,
        2100001034,
        2100001021,
        1337500387,
        1500010868,
        137606,
        137601,
        137599,
        137603,
        137600,
        137597,
        137598,
        137596,
        7431
      ],
      ""removed"": [
        1010489,
        1686463845,
        930075,
        850026,
        1010364,
        606175010,
        600037110,
        102037222,
        601126110,
        600038110,
        1453238000,
        2000150042,
        2000150042,
        2000150041,
        2000150041,
        135100,
        135099,
        134629,
        403,
        600135110
      ]
    },
    ""502107"": {
      ""items"": [
        118938,
        114445,
        118737,
        127050,
        118738,
        120290,
        120286,
        120287,
        120288,
        120289,
        118739,
        118736,
        124740,
        124741,
        124742
      ],
      ""removed"": []
    },
    ""500952"": {
      ""items"": [
        1010567,
        2077060001,
        1010520,
        1010519,
        100586,
        1010522,
        1010523,
        736,
        8855001
      ],
      ""removed"": []
    },
    ""500953"": {
      ""items"": [
        100429,
        1010525,
        100519,
        625,
        930100,
        901006,
        8855902,
        8855900
      ],
      ""removed"": []
    },
    ""500954"": {
      ""items"": [
        101642,
        1010521,
        3700,
        8855080,
        1010524,
        850037,
        850036,
        1222333001
      ],
      ""removed"": []
    },
    ""500943"": {
      ""items"": [
        500091,
        500024,
        500009,
        500005,
        500145,
        500010,
        2438,
        500016,
        500023,
        500029
      ],
      ""removed"": []
    },
    ""500092"": {
      ""items"": [
        1500010212,
        2100001000,
        2100001014,
        8855888,
        2077030401,
        2100001004,
        2100001002,
        2100001008,
        2100001026,
        2100001006,
        500506,
        117559,
        1500010030,
        7286,
        77100010,
        114445,
        1010136
      ],
      ""removed"": [
        1000178,
        1010035,
        1010371,
        1010343,
        601445,
        1500010500,
        601326,
        1010463,
        1337500007,
        1010462,
        1337500000,
        1010464,
        1337500014,
        1010516,
        100586,
        100415,
        1500010050,
        101037221,
        600135110
      ]
    },
    ""500094"": {
      ""items"": [
        1010358,
        2100001022,
        2100001030,
        2100001010,
        7182,
        2100001034,
        2077030401,
        2077030402,
        2100115200,
        2100001021,
        1337500387,
        1500010868,
        118736
      ],
      ""removed"": [
        1010372,
        2100001000,
        2100115121,
        1010359,
        1010360,
        132780,
        132782,
        132781,
        1010361,
        1010362,
        1010365,
        1010364,
        606175010,
        600037110,
        102037222,
        601126110,
        600038110,
        1453238000,
        135100,
        135099,
        134629,
        2015
      ]
    },
    ""500945"": {
      ""items"": [
        1500010601,
        1404423043,
        1010278,
        500002,
        500505,
        25000244,
        1500010111,
        500004,
        500006,
        25000220,
        1500010191,
        1500010114,
        500013,
        500019,
        500008,
        1500010122,
        500003,
        1500010830,
        500901,
        500902,
        1500010959,
        500012,
        500015,
        500017,
        133496,
        137607,
        137608,
        137609,
        1500010129,
        269756,
        500434,
        500018,
        500014,
        500022,
        500020,
        500021,
        137602,
        137604,
        137605,
        137606,
        137601,
        137599,
        137603,
        137600,
        137597,
        137598,
        137596,
        118737,
        118738,
        120290,
        120286,
        120287,
        120288,
        120289,
        118739,
        124740,
        124741,
        124742
      ],
      ""removed"": [
        1404423041,
        1404423036,
        1404423031,
        1404423026,
        1404423021,
        1404423016,
        1404423011,
        1500010155
      ]
    },
    ""500111"": {
      ""items"": [
        1010567,
        2077060001,
        2077030402,
        8855881,
        2100001042,
        7291,
        8855888,
        2100001038,
        1500010959
      ],
      ""removed"": [
        1010519,
        1010520,
        1010521,
        1010525,
        100519,
        101642,
        100429,
        1010278,
        1010560,
        1010522,
        1010523,
        736,
        625,
        3700,
        1010524
      ]
    },
    ""500116"": {
      ""items"": [
        7431,
        100429,
        1010470,
        1010471,
        110935,
        132765,
        1010489,
        118938,
        403
      ],
      ""removed"": []
    },
    ""500069"": {
      ""items"": [
        502338,
        501412,
        501482,
        501483,
        501486,
        501484,
        501487,
        501485,
        501488,
        4751,
        2100115500,
        1500010223,
        1500011171,
        1440133020,
        1440133026,
        977021,
        977020,
        902101,
        902100,
        902099,
        992095,
        992094,
        992093,
        1440137034,
        1339473007,
        902230
      ],
      ""removed"": []
    },
    ""500070"": {
      ""items"": [
        6413,
        5987,
        6367,
        501916,
        6368,
        6369,
        5993,
        6370,
        132390,
        134740,
        136236,
        6410,
        6411,
        6412
      ],
      ""removed"": []
    },
    ""500078"": {
      ""items"": [
        501941,
        502137,
        502166,
        502399,
        25141,
        5731,
        5249,
        10108,
        20928,
        25962
      ],
      ""removed"": []
    },
    ""6577"": {
      ""items"": [
        102483,
        116706,
        117511,
        117736,
        118723,
        893,
        895,
        896,
        24589,
        112297,
        112298,
        112303,
        112304,
        112305,
        102229,
        102383,
        102892,
        7231,
        12948,
        10293,
        10306,
        10310,
        10336
      ],
      ""removed"": []
    },
    ""501412"": {
      ""items"": [
        102083,
        102087,
        103111,
        102085,
        103116,
        103118
      ],
      ""removed"": []
    },
    ""501482"": {
      ""items"": [
        103124,
        102086,
        102113,
        103109,
        103110,
        103117,
        103115,
        103113
      ],
      ""removed"": []
    },
    ""501483"": {
      ""items"": [
        102099,
        102088,
        103112,
        102104,
        102105,
        102481,
        102107,
        102108,
        102109
      ],
      ""removed"": []
    },
    ""501484"": {
      ""items"": [
        102093,
        102098,
        102462,
        102106,
        102112,
        102862,
        902212,
        902211,
        902210,
        902209,
        902208
      ],
      ""removed"": []
    },
    ""501485"": {
      ""items"": [
        102110,
        102111
      ],
      ""removed"": []
    },
    ""501486"": {
      ""items"": [
        114435,
        101513,
        103119,
        101497,
        102482,
        101516,
        977404,
        977402,
        977401
      ],
      ""removed"": []
    },
    ""501487"": {
      ""items"": [
        101498,
        101510,
        977403,
        977400,
        977030,
        8853606,
        8853605,
        8853604,
        8853602,
        8853601,
        8853600
      ],
      ""removed"": []
    },
    ""501488"": {
      ""items"": [
        102466,
        102464,
        102465,
        102467,
        102472,
        102470,
        102471,
        102468,
        102469,
        102473,
        102474,
        102475,
        102461,
        102463,
        960002,
        601127018,
        601127015,
        601127014,
        601127016,
        601127013,
        601127011,
        601127017,
        601127012,
        601127010
      ],
      ""removed"": []
    },
    ""4751"": {
      ""items"": [
        2470,
        2231,
        2233,
        2234,
        2465,
        2466,
        2467,
        2468,
        2235,
        2469,
        2478,
        2474,
        6860,
        6861,
        6862,
        6863,
        6864,
        6865,
        6866,
        6867,
        6868,
        6869,
        6871,
        6859,
        6858
      ],
      ""removed"": []
    },
    ""501941"": {
      ""items"": [
        116615,
        116614,
        116617,
        116618,
        116619,
        116621,
        116605,
        116610,
        116620,
        117514,
        117515,
        117516,
        117527,
        117528,
        117529,
        117633,
        1337501423,
        1337501422,
        1337501421,
        1337501420
      ],
      ""removed"": []
    },
    ""502137"": {
      ""items"": [
        80001,
        80002,
        80003,
        80004,
        80005,
        80006,
        80007,
        80008,
        80009,
        80010,
        80011,
        80012,
        80013,
        80014,
        80015,
        80017
      ],
      ""removed"": []
    },
    ""502166"": {
      ""items"": [
        80040,
        80041,
        80042,
        80043,
        80044,
        80045,
        80046,
        80047,
        80048,
        80049,
        80050,
        80051,
        80052,
        80057,
        80058,
        80059,
        80060,
        80061,
        80062,
        80063,
        80064,
        1337501424
      ],
      ""removed"": []
    },
    ""502399"": {
      ""items"": [
        601933,
        453,
        137772,
        137773,
        137774,
        454,
        137764,
        137765,
        137789,
        137790,
        137766,
        137767,
        137768,
        137771,
        137769,
        137770,
        137775,
        137776,
        1337501347,
        1337501346,
        1337501348,
        1337501349
      ],
      ""removed"": []
    },
    ""25141"": {
      ""items"": [
        25083,
        25082,
        25081,
        25080,
        25079,
        25077,
        25089,
        25091,
        25092,
        25093,
        25094,
        25095,
        25101,
        25103,
        25105,
        25106,
        25107,
        25108,
        25134,
        25135,
        25136,
        25137,
        25138,
        25139
      ],
      ""removed"": []
    },
    ""5731"": {
      ""items"": [
        388,
        389,
        390,
        391,
        392,
        393,
        394,
        395,
        396,
        679,
        681,
        690,
        691,
        398,
        402,
        405,
        407,
        408,
        409,
        417,
        418,
        1819,
        612,
        678,
        613,
        1820,
        1821,
        677,
        270038,
        1500011082,
        1500011081,
        1500011080
      ],
      ""removed"": []
    },
    ""5249"": {
      ""items"": [
        5187,
        5191,
        5194,
        5199,
        5200,
        5203,
        5206,
        5207,
        5213,
        5208,
        5211,
        5212,
        6007,
        6009
      ],
      ""removed"": []
    },
    ""10108"": {
      ""items"": [
        9259,
        9261,
        9262,
        9263,
        9264,
        9265,
        9266,
        9308,
        9267,
        9268,
        9270,
        9271,
        9334,
        9273,
        9274,
        9275
      ],
      ""removed"": []
    },
    ""20928"": {
      ""items"": [
        20860,
        20861,
        20862,
        20863,
        20864,
        20865,
        20866,
        20867,
        20868,
        20869,
        20870,
        20871,
        20872,
        20873,
        20874,
        20875,
        20876,
        20877,
        20878,
        20918
      ],
      ""removed"": []
    },
    ""25962"": {
      ""items"": [
        25871,
        25888,
        25895,
        25896,
        25898,
        25899,
        25900,
        25901,
        25902,
        25903,
        25904,
        25905,
        25906,
        25907,
        25908,
        25909,
        25910,
        25911,
        25912,
        25913,
        25926,
        25927,
        25957,
        26059,
        25960
      ],
      ""removed"": []
    },
    ""6413"": {
      ""items"": [
        118239,
        118240,
        118241,
        80128,
        80129,
        80130,
        25929,
        25930,
        25931
      ],
      ""removed"": []
    },
    ""5987"": {
      ""items"": [
        112133,
        111929,
        112299
      ],
      ""removed"": []
    },
    ""6367"": {
      ""items"": [
        112300,
        113324,
        113325,
        113326
      ],
      ""removed"": []
    },
    ""501916"": {
      ""items"": [
        114295,
        114299,
        114297,
        114296,
        114300,
        114293,
        114298,
        114294,
        114301,
        114302,
        114303,
        112301,
        114776,
        114777,
        114778
      ],
      ""removed"": []
    },
    ""6368"": {
      ""items"": [
        112302
      ],
      ""removed"": []
    },
    ""6369"": {
      ""items"": [
        118229,
        118230,
        269293,
        269294,
        269295,
        269296,
        269297,
        269298,
        269303
      ],
      ""removed"": []
    },
    ""6370"": {
      ""items"": [
        118233,
        118234
      ],
      ""removed"": []
    },
    ""6410"": {
      ""items"": [
        25194,
        25227,
        25168,
        25169,
        25172,
        25173,
        25174,
        25703,
        25704,
        25705,
        25706,
        80212,
        80215
      ],
      ""removed"": []
    },
    ""6411"": {
      ""items"": [
        3327,
        3330,
        3331,
        3337,
        3338,
        3339,
        3340,
        3341,
        80213,
        80216
      ],
      ""removed"": []
    },
    ""6412"": {
      ""items"": [
        7895,
        7181,
        7879,
        7880,
        7179,
        7085,
        7178,
        7180,
        80214,
        80217
      ],
      ""removed"": []
    },
    ""500067"": {
      ""items"": [
        502338,
        501490,
        501491,
        501489,
        501492,
        501493,
        500001,
        501494,
        8612,
        902101,
        902100,
        902099
      ],
      ""removed"": []
    },
    ""502338"": {
      ""items"": [
        100721,
        24301,
        80174,
        80175,
        133497,
        414,
        415
      ],
      ""removed"": []
    },
    ""501490"": {
      ""items"": [
        102099,
        25926,
        25927,
        25911,
        25912,
        25913
      ],
      ""removed"": []
    },
    ""501491"": {
      ""items"": [
        102088,
        103112,
        102093,
        102098,
        269785,
        269790,
        25095,
        25108,
        6859,
        6858
      ],
      ""removed"": []
    },
    ""501489"": {
      ""items"": [
        102083,
        102087,
        103111,
        102085,
        103116,
        102086,
        102113,
        103109,
        103110,
        103115,
        103113,
        102112,
        102862,
        103124,
        134764,
        137564,
        25907,
        25908,
        25910,
        25960
      ],
      ""removed"": []
    },
    ""501492"": {
      ""items"": [
        103117,
        102107,
        102110,
        102229
      ],
      ""removed"": []
    },
    ""501493"": {
      ""items"": [
        102105,
        102462,
        102106,
        102483,
        102383,
        113325,
        113326,
        113324,
        269792,
        6861,
        6862
      ],
      ""removed"": []
    },
    ""500001"": {
      ""items"": [
        102481,
        25089,
        25091,
        25107
      ],
      ""removed"": []
    },
    ""501494"": {
      ""items"": [
        103118,
        102104,
        102108,
        102109,
        102111,
        102892,
        269791,
        269793,
        269794,
        269795,
        269796,
        269797,
        269842,
        25094,
        25092,
        25093,
        25101,
        25103,
        25105,
        25106,
        5200,
        6860,
        6863,
        6864,
        6865,
        6866,
        6867,
        6868,
        6869,
        25871,
        25888,
        25895,
        25896,
        25898,
        25899,
        25900,
        25901,
        25902,
        25903,
        25904,
        25905,
        25906,
        25909,
        25957,
        26059
      ],
      ""removed"": []
    },
    ""500068"": {
      ""items"": [
        501823,
        501497,
        502337,
        502335,
        501576,
        500025,
        6216,
        500007,
        500011,
        500026,
        500028,
        501496,
        1500010223,
        1500011171,
        977021,
        977020,
        1440137033,
        8853621,
        1440137034,
        1339473007,
        902230,
        976503,
        976502,
        976501,
        976500
      ],
      ""removed"": []
    },
    ""501823"": {
      ""items"": [
        114435,
        102466,
        117633,
        269303,
        137776,
        601933,
        453,
        137772,
        137773,
        137774,
        5213,
        5208,
        6871,
        20864,
        20865,
        1500010224
      ],
      ""removed"": []
    },
    ""501497"": {
      ""items"": [
        101513,
        103119,
        101498,
        101510,
        102461,
        102463,
        116615,
        116614,
        116605,
        116610,
        80052,
        80015,
        137764,
        137765,
        137789,
        137790,
        137770,
        25083,
        25082,
        25095,
        25108,
        25139,
        25137,
        25931,
        25194,
        25227,
        25169,
        25168,
        3340,
        3341,
        5211,
        5212,
        6007,
        6009,
        9271,
        9334,
        20877,
        20878,
        20918,
        1337501423,
        1337501422,
        1337501421,
        1337501420,
        601127016,
        601127013
      ],
      ""removed"": []
    },
    ""502337"": {
      ""items"": [
        114295,
        114299,
        114297,
        114296,
        114300,
        114293,
        114298,
        114294,
        114301,
        114302,
        114303,
        269294,
        269295,
        116621,
        116620,
        134736,
        137563,
        134720,
        134741,
        134742,
        24589,
        114776,
        893,
        895,
        896,
        454,
        137775,
        25081,
        25077,
        9265,
        20861,
        20862,
        20863,
        20868,
        20869,
        1337501343,
        1337501344,
        1337501345
      ],
      ""removed"": []
    },
    ""502335"": {
      ""items"": [
        102472,
        102470,
        102471,
        102468,
        102469,
        114778,
        269296,
        269297,
        136242,
        416,
        25929,
        80064,
        118723,
        118239,
        80130,
        25929,
        25172,
        5206,
        20866,
        20867,
        1337501419
      ],
      ""removed"": []
    },
    ""501576"": {
      ""items"": [
        101516,
        269298,
        111929,
        116619,
        118240,
        117736,
        80129,
        136240,
        136410,
        25930,
        5207,
        9274,
        9275,
        12948,
        20875
      ],
      ""removed"": []
    },
    ""500025"": {
      ""items"": [
        102482,
        80128,
        134723,
        134724,
        134725,
        80040,
        80041,
        80042,
        80043,
        80044,
        80045,
        80046,
        80047,
        80048,
        117514,
        117515,
        117516,
        80003,
        80004,
        80005,
        80006,
        80007,
        80008,
        80009,
        137771,
        25080,
        25079,
        25089,
        25091,
        25135,
        3327,
        9268,
        20871,
        20872,
        20873,
        20874
      ],
      ""removed"": []
    },
    ""6216"": {
      ""items"": [
        117527,
        117528,
        117529,
        25136,
        25138,
        25134,
        80001,
        80002,
        80010,
        80011,
        80012,
        80013,
        80014,
        80057,
        80058,
        134727,
        134735,
        134726,
        136241
      ],
      ""removed"": []
    },
    ""500007"": {
      ""items"": [
        101497,
        134730,
        134731,
        134732,
        134733,
        116618,
        80049,
        80050,
        80051,
        80017,
        25092,
        3330,
        3338,
        3339,
        20860
      ],
      ""removed"": []
    },
    ""500011"": {
      ""items"": [
        102464,
        112305,
        80131,
        80133,
        80136,
        118241,
        80060,
        80061,
        80062,
        116617,
        134734,
        25094,
        3337,
        5203,
        9259,
        9261,
        9263,
        20876,
        601127018,
        601127015,
        601127014,
        601127011,
        601127017,
        601127012,
        601127010
      ],
      ""removed"": []
    },
    ""500026"": {
      ""items"": [
        102465,
        112297,
        112298,
        116706,
        117511,
        112299,
        112300,
        112301,
        112302,
        118230,
        118232,
        118234,
        136243,
        80215,
        80216,
        80217,
        7231
      ],
      ""removed"": []
    },
    ""500028"": {
      ""items"": [
        102467,
        112133,
        112303,
        112304,
        118229,
        269293,
        118231,
        118233,
        80135,
        80134,
        80132,
        80212,
        80213,
        80214
      ],
      ""removed"": []
    },
    ""501496"": {
      ""items"": [
        102473,
        102474,
        102475,
        114777,
        134721,
        134722,
        134728,
        134729,
        134737,
        134738,
        136238,
        136239,
        80059,
        80063,
        137766,
        137767,
        137768,
        137769,
        25093,
        25703,
        25704,
        25705,
        25706,
        3331,
        5187,
        5191,
        5194,
        5199,
        9262,
        9264,
        9266,
        9308,
        9267,
        9270,
        9273,
        10293,
        10306,
        10310,
        10336,
        12948,
        20870
      ],
      ""removed"": []
    },
    ""500059"": {
      ""items"": [
        500174,
        500154,
        500153,
        500166,
        500164,
        500156,
        2100115500,
        1440133020,
        1440133026
      ],
      ""removed"": []
    },
    ""500174"": {
      ""items"": [
        270038,
        1500011082
      ],
      ""removed"": []
    },
    ""500153"": {
      ""items"": [
        269798,
        269799,
        269800,
        269801,
        269802,
        269804,
        269805,
        269806,
        269807,
        269808,
        2470,
        2231,
        2233,
        2234,
        2465,
        2466,
        2467,
        2468
      ],
      ""removed"": []
    },
    ""500154"": {
      ""items"": [
        269772,
        269777,
        269844,
        269779,
        269784,
        269809,
        1819,
        612,
        678,
        613,
        1820,
        1821,
        677,
        2478,
        2474
      ],
      ""removed"": []
    },
    ""500156"": {
      ""items"": [
        1010567,
        132370,
        132371,
        132383,
        132385,
        132389,
        132532,
        132539,
        132540,
        132594,
        132595,
        132376,
        132375,
        132377,
        132378,
        132381,
        132380,
        132382,
        132372,
        132373,
        132379,
        132386,
        132374,
        132384,
        132387,
        132388
      ],
      ""removed"": []
    },
    ""500164"": {
      ""items"": [
        388,
        389,
        390,
        391,
        392,
        393,
        394,
        395,
        396,
        679,
        681,
        690,
        691,
        1500011081,
        1500011080
      ],
      ""removed"": []
    },
    ""500170"": {
      ""items"": [
        396,
        679,
        681,
        690,
        691
      ],
      ""removed"": []
    },
    ""500166"": {
      ""items"": [
        398,
        402,
        405,
        407,
        408,
        409,
        417,
        418,
        2235,
        2469
      ],
      ""removed"": []
    },
    ""7425"": {
      ""items"": [
        133004,
        133030,
        133031,
        134614
      ],
      ""removed"": []
    },
    ""25000193"": {
      ""items"": [
        1500011250,
        2100002000,
        500904,
        500905,
        500908,
        500906,
        501637,
        500907,
        1010333,
        101323,
        2100002026,
        2100002022,
        2100002004,
        2100002002,
        2100002042,
        8855882,
        7425,
        1500011236,
        1500011238,
        1500011232,
        2100002038,
        101308,
        101254
      ],
      ""removed"": [
        101257,
        1337500209,
        101284,
        501007,
        101275,
        1337500008,
        101274,
        1337500003,
        101258,
        77100021
      ]
    },
    ""25000194"": {
      ""items"": [
        1500011043,
        2100002008,
        902301,
        1404423028,
        500910,
        500911,
        500913,
        500912,
        500914,
        500909,
        101311,
        2100002026,
        2100002030,
        2100002022,
        601126110,
        7281,
        500916,
        1500010457,
        269835,
        8855889,
        2100002042,
        2100002038,
        77100023,
        1351,
        1361,
        7427,
        2457,
        137604,
        137605,
        137606,
        1500010703,
        1500010705,
        1500010704,
        1337501447,
        1337501409,
        1337501407,
        1337500292,
        1337500229,
        1337500162,
        1337500128,
        1337500102,
        1337500086,
        1337500072,
        1337501451,
        1337500329,
        1337500241,
        1337500330,
        1337500293,
        101309,
        1337500190
      ],
      ""removed"": [
        101285,
        2280,
        101259,
        603336111,
        102037222,
        501008,
        501429,
        101276,
        1337500015,
        501254,
        102282,
        102283,
        114141,
        77100022
      ]
    },
    ""501007"": {
      ""items"": [
        101339,
        2077061001,
        101277,
        101278,
        101286,
        101573,
        101563,
        742,
        1010339,
        8855002
      ],
      ""removed"": []
    },
    ""501008"": {
      ""items"": [
        102284,
        901008,
        101344,
        101570,
        632,
        8855081,
        4797,
        901007,
        8855907,
        8855906
      ],
      ""removed"": []
    },
    ""500949"": {
      ""items"": [
        500904,
        500910,
        500907,
        1500010703,
        500145,
        1500010704,
        1351,
        1361,
        1500010705,
        2457
      ],
      ""removed"": [
        500005
      ]
    },
    ""500137"": {
      ""items"": [
        1500011087,
        7281,
        2100002000,
        8855889,
        902301,
        2100002004,
        2100002002,
        2100002008,
        2100002026,
        500916,
        1500010457,
        7305,
        7427,
        101308,
        101309,
        1010136,
        101254,
        101323
      ],
      ""removed"": [
        101275,
        1337500008,
        7300,
        101274,
        1337500003,
        7301,
        101276,
        1337500015,
        7303,
        101284,
        101286,
        101285,
        2280
      ]
    },
    ""500138"": {
      ""items"": [
        2100002022,
        2100002030,
        601126110,
        7182,
        5940,
        5939
      ],
      ""removed"": [
        101257,
        101258,
        101259,
        603336111,
        102037222
      ]
    },
    ""500950"": {
      ""items"": [
        500905,
        500906,
        501637,
        500908,
        1010333,
        133004,
        133030,
        133031,
        134614,
        1010339,
        500911,
        500913,
        101311,
        500912,
        501429,
        269835,
        501254,
        500914,
        500909,
        1500011238,
        1500011232,
        137604,
        137605,
        137606,
        6623,
        6610,
        5806,
        5813,
        5465,
        5811,
        5808,
        5823,
        1500011236
      ],
      ""removed"": []
    },
    ""500149"": {
      ""items"": [
        101339,
        2077061001,
        8855889,
        8855882,
        2100002042,
        2100002038,
        7182,
        101262,
        1010339,
        7919
      ],
      ""removed"": [
        101278,
        101277,
        101573,
        101344,
        102284,
        101563,
        101570,
        632,
        742,
        4797
      ]
    },
    ""500150"": {
      ""items"": [
        102284,
        102282,
        102283,
        114141,
        6117
      ],
      ""removed"": []
    },
    ""500079"": {
      ""items"": [
        502339,
        501577,
        501578,
        501579,
        501695,
        4751,
        2100115500,
        1500011051,
        1500011204,
        1440133021,
        1440133027,
        977460,
        902104,
        902103,
        902102,
        992098,
        992097,
        992096,
        1440137034,
        1339473007,
        902231
      ],
      ""removed"": []
    },
    ""500151"": {
      ""items"": [
        6413,
        5987,
        6367,
        501916,
        6368,
        6369,
        5993,
        6370,
        132504,
        134740,
        136236,
        6410,
        7229,
        6412
      ],
      ""removed"": []
    },
    ""6621"": {
      ""items"": [
        102483,
        116706,
        117511,
        117736,
        118723,
        893,
        895,
        896,
        24589,
        112297,
        112298,
        112303,
        112304,
        112305,
        103047,
        103049,
        103048,
        7231,
        12948,
        10293,
        10306,
        10310,
        10336
      ],
      ""removed"": []
    },
    ""501577"": {
      ""items"": [
        102824,
        102819,
        103122,
        102812,
        102813,
        102814,
        102815,
        102863,
        102864,
        102817,
        102818,
        103121
      ],
      ""removed"": []
    },
    ""501578"": {
      ""items"": [
        102829,
        102834,
        102835,
        102836,
        102837,
        103125,
        102816,
        102838,
        103120,
        102839,
        102840,
        102841,
        102842,
        102843,
        102844
      ],
      ""removed"": []
    },
    ""501579"": {
      ""items"": [
        114894,
        102855,
        103123,
        102849,
        102854,
        102846,
        102847,
        102848,
        1337501418,
        1337501416,
        1337501417,
        1337501415
      ],
      ""removed"": []
    },
    ""501695"": {
      ""items"": [
        102466,
        102464,
        102465,
        102467,
        102472,
        102470,
        102471,
        102468,
        102469,
        102473,
        102474,
        102475,
        102461,
        102463,
        601127018,
        601127015,
        601127014,
        601127016,
        601127013,
        601127011,
        601127017,
        601127012,
        601127010
      ],
      ""removed"": []
    },
    ""7229"": {
      ""items"": [
        3356,
        3357,
        3358,
        3360,
        3361,
        3362,
        3363,
        3368,
        80213,
        80216,
        1500011052
      ],
      ""removed"": []
    },
    ""500053"": {
      ""items"": [
        502339,
        501580,
        501581,
        501582,
        501583,
        501584,
        500043,
        501585,
        8612,
        902104,
        902103,
        902102
      ],
      ""removed"": []
    },
    ""502339"": {
      ""items"": [
        133885,
        133886,
        133003,
        133026,
        133027
      ],
      ""removed"": []
    },
    ""501580"": {
      ""items"": [
        102824,
        25926,
        25927,
        25911,
        25912,
        25913
      ],
      ""removed"": []
    },
    ""501582"": {
      ""items"": [
        103125,
        102812,
        102813,
        102814,
        102815,
        102816,
        102863,
        102864,
        102817,
        102818,
        134764,
        137564,
        25907,
        25908,
        25910,
        25960
      ],
      ""removed"": []
    },
    ""501583"": {
      ""items"": [
        103120,
        102840,
        102843,
        103047
      ],
      ""removed"": []
    },
    ""500055"": {
      ""items"": [
        501824,
        501587,
        8533,
        8534,
        501692,
        500047,
        8535,
        500044,
        8537,
        500026,
        500028,
        8536,
        1500011051,
        1500011204,
        977460,
        1440137034,
        1339473007,
        902231,
        902263
      ],
      ""removed"": []
    },
    ""8533"": {
      ""items"": [
        114295,
        114299,
        114297,
        114296,
        114300,
        114293,
        114298,
        114294,
        114301,
        114302,
        114303,
        269294,
        269295,
        116621,
        116620,
        134736,
        137563,
        134720,
        134741,
        134742,
        24589,
        114776,
        893,
        895,
        896,
        454,
        137775,
        25081,
        25077,
        25173,
        25174,
        9265,
        20861,
        20862,
        20863,
        20868,
        20869
      ],
      ""removed"": []
    },
    ""8534"": {
      ""items"": [
        102472,
        102470,
        102471,
        102468,
        102469,
        114778,
        269296,
        269297,
        136242,
        416,
        80064,
        118723,
        118239,
        80130,
        25929,
        25172,
        5206,
        20866,
        20867
      ],
      ""removed"": []
    },
    ""8535"": {
      ""items"": [
        117527,
        117528,
        117529,
        25136,
        25138,
        25134,
        80001,
        80002,
        80010,
        80011,
        80012,
        80013,
        80014,
        80057,
        80058,
        134727,
        134735,
        134726,
        136241
      ],
      ""removed"": []
    },
    ""8537"": {
      ""items"": [
        102464,
        112305,
        80131,
        80133,
        80136,
        118241,
        80060,
        80061,
        80062,
        116617,
        134734,
        25094,
        3360,
        5203,
        9259,
        9261,
        9263,
        20876,
        601127018,
        601127015,
        601127014,
        601127011,
        601127017,
        601127012,
        601127010
      ],
      ""removed"": []
    },
    ""8536"": {
      ""items"": [
        102473,
        102474,
        102475,
        114777,
        134721,
        134722,
        134728,
        134729,
        134737,
        134738,
        136238,
        136239,
        80059,
        80063,
        137766,
        137767,
        137768,
        137769,
        25093,
        25703,
        25704,
        25705,
        25706,
        3358,
        5187,
        5191,
        5194,
        5199,
        9262,
        9264,
        9266,
        9308,
        9267,
        9270,
        9273,
        10293,
        10306,
        10310,
        10336,
        12948,
        20870
      ],
      ""removed"": []
    },
    ""500058"": {
      ""items"": [
        500174,
        500154,
        500153,
        500166,
        500164,
        500157,
        2100115500,
        1440133021,
        1440133027
      ],
      ""removed"": []
    },
    ""500157"": {
      ""items"": [
        1010567,
        132506,
        132503,
        132518,
        132520,
        132524,
        132542,
        132543,
        132541,
        132596,
        132597,
        132511,
        132510,
        132512,
        132513,
        132516,
        132515,
        132517,
        132507,
        132508,
        132514,
        132521,
        132509,
        132519,
        132522,
        132523
      ],
      ""removed"": []
    },
    ""8528"": {
      ""items"": [
        112685,
        4258,
        4513
      ],
      ""removed"": []
    },
    ""112790"": {
      ""items"": [
        112113,
        114889,
        1337500209,
        112091,
        112656,
        112856,
        112709,
        112710,
        112669,
        112712,
        112713,
        117077,
        134880
      ],
      ""removed"": []
    },
    ""112791"": {
      ""items"": [
        8528,
        112792,
        112684,
        112678,
        117268,
        112711,
        116034,
        112714,
        117075,
        8857102,
        116029,
        8857201,
        112690,
        117556,
        1337500329,
        1337500330,
        1337500241,
        1337501451,
        1337500293,
        1337501447,
        1337501409,
        1337501407,
        1337500292,
        1337500229,
        1337500190,
        1337500162,
        1337500128,
        1337500102,
        1337500086,
        1337500073
      ],
      ""removed"": []
    },
    ""112792"": {
      ""items"": [
        8857106,
        2077063001,
        112670,
        112671,
        824,
        822,
        116030,
        4798,
        2077063001
      ],
      ""removed"": []
    },
    ""134880"": {
      ""items"": [
        133889
      ],
      ""removed"": []
    },
    ""116342"": {
      ""items"": [
        112709,
        112690
      ],
      ""removed"": []
    },
    ""116343"": {
      ""items"": [
        134880,
        112113,
        112091,
        112656,
        114889,
        1337500209,
        112856,
        112684,
        112669,
        112678,
        117556,
        8528
      ],
      ""removed"": []
    },
    ""116344"": {
      ""items"": [
        112710,
        112712,
        112713,
        117077,
        117268,
        112711,
        116034,
        112714,
        117075,
        8857102,
        116029,
        8857201
      ],
      ""removed"": []
    },
    ""116345"": {
      ""items"": [
        8857106,
        2077063001,
        112666,
        112674,
        112670,
        112671,
        824,
        822,
        116030,
        4798,
        2077063001
      ],
      ""removed"": []
    },
    ""269667"": {
      ""items"": [
        249947,
        269602
      ],
      ""removed"": []
    },
    ""7431"": {
      ""items"": [
        249947,
        249950,
        269086,
        269083,
        269549,
        269084,
        269085,
        269602
      ],
      ""removed"": []
    },
    ""269963"": {
      ""items"": [
        269785,
        269790,
        269791,
        269792,
        269793,
        269794,
        269795,
        269796,
        269797,
        269842
      ],
      ""removed"": []
    },
    ""269964"": {
      ""items"": [
        270038,
        269772,
        269777,
        269844,
        269779,
        269784,
        269798,
        269799,
        269800,
        269801,
        269802,
        269804,
        269805,
        269806,
        269807,
        269808,
        269809,
        1337501425,
        1337501426,
        1337501427,
        1337501428,
        1337501429
      ],
      ""removed"": []
    },
    ""269972"": {
      ""items"": [
        269791,
        269792,
        269793,
        269794,
        269795,
        269796,
        269797,
        269842
      ],
      ""removed"": []
    },
    ""269973"": {
      ""items"": [
        269785,
        269790
      ],
      ""removed"": []
    },
    ""269974"": {
      ""items"": [
        270038,
        269798,
        269799,
        269800,
        269801,
        269802,
        269804,
        269805,
        269806,
        269807,
        269808,
        269809
      ],
      ""removed"": []
    },
    ""269975"": {
      ""items"": [
        269772,
        269777,
        269844,
        269779,
        269784,
        1337501425,
        1337501426,
        1337501427,
        1337501428,
        1337501429
      ],
      ""removed"": []
    },
    ""5993"": {
      ""items"": [
        269785,
        269790,
        269791,
        269792,
        269793,
        269794,
        269795,
        269796,
        269797,
        269842,
        270038,
        269772,
        269777,
        269844,
        269779,
        269784,
        269798,
        269799,
        269800,
        269801,
        269802,
        269804,
        269805,
        269806,
        269807,
        269808,
        269809,
        118231,
        118232
      ],
      ""removed"": []
    },
    ""114553"": {
      ""items"": [
        114518,
        1337500209,
        117782,
        1337500013,
        122963,
        114456,
        114565,
        114519,
        114556,
        114563,
        2023052510,
        117858,
        114555,
        77100031,
        130700,
        130698,
        134879,
        114523,
        114509,
        114436
      ],
      ""removed"": [
        119892
      ]
    },
    ""114554"": {
      ""items"": [
        1337500020,
        114566,
        118726,
        114568,
        1337500006,
        114570,
        114619,
        117713,
        117740,
        117714,
        119030,
        114520,
        117859,
        117897,
        1337501447,
        1337501409,
        1337501407,
        1337500292,
        1337500229,
        1337500190,
        1337500162,
        1337500128,
        1337500102,
        1337500086,
        1337500073,
        1337501451,
        1337500329,
        1337500241,
        1337500293,
        1337500330,
        119029
      ],
      ""removed"": [
        114508,
        117668,
        77100032
      ]
    },
    ""114555"": {
      ""items"": [
        117729,
        2077062001,
        117870,
        117860,
        117864,
        119031,
        119034,
        117861,
        743
      ],
      ""removed"": []
    },
    ""117897"": {
      ""items"": [
        117871,
        117863,
        823,
        4799,
        1440133050
      ],
      ""removed"": []
    },
    ""134879"": {
      ""items"": [
        133887,
        133888
      ],
      ""removed"": []
    },
    ""119011"": {
      ""items"": [
        122963,
        117782,
        114566,
        500145
      ],
      ""removed"": []
    },
    ""119012"": {
      ""items"": [
        114509,
        114518,
        1337500209,
        114519,
        114520,
        1337500013,
        1337500006,
        1337500020,
        117858,
        117860,
        117859,
        77100030,
        114523,
        119029,
        119035,
        114436
      ],
      ""removed"": [
        119892,
        114508,
        117668
      ]
    },
    ""119024"": {
      ""items"": [
        114456,
        114565,
        114556,
        114563,
        118726,
        114568,
        114570,
        114619,
        117713,
        117740,
        119030,
        117714,
        2023052510
      ],
      ""removed"": []
    },
    ""119014"": {
      ""items"": [
        117729,
        2077062001,
        117870,
        117860,
        117864,
        117871,
        1440133050,
        119034,
        119031,
        114440,
        118729,
        117861,
        743,
        117863,
        823,
        4799
      ],
      ""removed"": []
    },
    ""119015"": {
      ""items"": [
        134879,
        130698,
        130700
      ],
      ""removed"": []
    },
    ""130698"": {
      ""items"": [
        130703,
        130708,
        130709
      ],
      ""removed"": []
    },
    ""130700"": {
      ""items"": [
        131423,
        130719,
        130715,
        130716,
        130717,
        130718,
        130720,
        130721,
        130722,
        130723,
        130724,
        130725,
        130726,
        130727
      ],
      ""removed"": []
    },
    ""132390"": {
      ""items"": [
        1010567,
        132370,
        132371,
        132383,
        132385,
        132389,
        132532,
        132539,
        132540,
        132594,
        132595,
        132376,
        132375,
        132377,
        132378,
        132381,
        132380,
        132382,
        132372,
        132373,
        132379,
        132386,
        132374,
        132384,
        132387,
        132388,
        80135,
        80136
      ],
      ""removed"": []
    },
    ""132504"": {
      ""items"": [
        1010567,
        132506,
        132503,
        132518,
        132520,
        132524,
        132542,
        132543,
        132541,
        132596,
        132597,
        132511,
        132510,
        132512,
        132513,
        132516,
        132515,
        132517,
        132507,
        132508,
        132514,
        132521,
        132509,
        132519,
        132522,
        132523,
        80135,
        80136
      ],
      ""removed"": []
    },
    ""7291"": {
      ""items"": [
        601470,
        1010567,
        601463,
        601460,
        131777,
        601461,
        131778,
        601462,
        1500010079
      ],
      ""removed"": []
    },
    ""132779"": {
      ""items"": [
        2077030401,
        2077030402,
        1337500355,
        2100001034,
        133496,
        137608,
        137607,
        137609,
        132765
      ],
      ""removed"": [
        100429,
        601326,
        601445,
        1500010500,
        132780,
        132782,
        132781
      ]
    },
    ""134740"": {
      ""items"": [
        134721,
        134722,
        134723,
        134724,
        134725,
        134726,
        134727,
        134728,
        134729,
        134730,
        134731,
        134732,
        134733,
        134734,
        134735,
        134737,
        134738,
        134736,
        134764,
        134720,
        134741,
        134742,
        80134,
        80133,
        1337501343,
        1337501344,
        1337501345
      ],
      ""removed"": []
    },
    ""136236"": {
      ""items"": [
        136238,
        136239,
        136240,
        136410,
        136241,
        136242,
        416,
        136243,
        137563,
        137564,
        80132,
        80131,
        1337501419
      ],
      ""removed"": []
    },
    ""24894"": {
      ""items"": [
        101311,
        24876,
        24893
      ],
      ""removed"": []
    },
    ""25178"": {
      ""items"": [
        24768,
        25194,
        25227,
        25168,
        25169,
        25172,
        25173,
        25174,
        25703,
        25704,
        25705,
        25706
      ],
      ""removed"": []
    },
    ""7281"": {
      ""items"": [
        24768,
        24770,
        25224,
        24792,
        24793,
        6086,
        24775,
        24794,
        24800,
        24805
      ],
      ""removed"": []
    },
    ""2015"": {
      ""items"": [
        3741,
        1500010817,
        538
      ],
      ""removed"": []
    },
    ""2280"": {
      ""items"": [
        3761,
        3661
      ],
      ""removed"": []
    },
    ""2278"": {
      ""items"": [
        962,
        3327,
        3330,
        3331,
        3337,
        3338,
        3339,
        3340,
        3341
      ],
      ""removed"": []
    },
    ""2279"": {
      ""items"": [
        963,
        3356,
        3357,
        3358,
        3360,
        3361,
        3362,
        3363,
        3368
      ],
      ""removed"": []
    },
    ""2438"": {
      ""items"": [
        924,
        934,
        935,
        936,
        937
      ],
      ""removed"": []
    },
    ""2457"": {
      ""items"": [
        906,
        907,
        908,
        916,
        915
      ],
      ""removed"": []
    },
    ""7286"": {
      ""items"": [
        648,
        962,
        964,
        966
      ],
      ""removed"": []
    },
    ""7427"": {
      ""items"": [
        692,
        963,
        2274,
        2276,
        967
      ],
      ""removed"": []
    },
    ""5466"": {
      ""items"": [
        1500011044,
        2100002004,
        2100002002,
        2100002008,
        2100002030,
        6623,
        5806,
        6610,
        7305,
        5813,
        7182,
        5465,
        5811,
        5940,
        5808,
        5939,
        5823
      ],
      ""removed"": [
        7300,
        7301,
        7303,
        6117
      ]
    },
    ""7182"": {
      ""items"": [
        6264,
        7895,
        1685866909,
        7181,
        7879,
        7880,
        7179,
        7085,
        7178,
        7180
      ],
      ""removed"": []
    },
    ""8612"": {
      ""items"": [
        7895,
        7181,
        7879,
        7880,
        7179,
        7085,
        7178,
        7180
      ],
      ""removed"": []
    },
    ""16480"": {
      ""items"": [
        16418,
        16417,
        16416,
        16415,
        16414,
        16413,
        16412,
        16488,
        16458,
        16411,
        16459,
        16464,
        16465,
        16466,
        16469,
        16470,
        16471,
        16472,
        16473,
        16474,
        16475,
        16476,
        16486
      ],
      ""removed"": []
    },
    ""16481"": {
      ""items"": [
        16498,
        16496,
        16502,
        16503,
        16505,
        16497,
        16535
      ],
      ""removed"": []
    },
    ""16482"": {
      ""items"": [
        16537,
        16538,
        16590,
        16539,
        16540,
        16541,
        16544,
        16545,
        16591
      ],
      ""removed"": []
    },
    ""16483"": {
      ""items"": [
        17913,
        13595,
        13604,
        16610,
        16611,
        16612,
        16613,
        16614,
        16615,
        16616,
        16617,
        16618,
        16625,
        16626,
        16627,
        16632,
        16637,
        13592,
        16638,
        16641
      ],
      ""removed"": []
    },
    ""16859"": {
      ""items"": [
        13593,
        13596,
        13597,
        16643,
        16642,
        16644,
        16645,
        16661,
        16672,
        16673,
        16674,
        16675,
        16676,
        16677,
        16678,
        16679
      ],
      ""removed"": []
    },
    ""16484"": {
      ""items"": [
        16680,
        16681,
        16682,
        16683,
        16684,
        16685,
        16686,
        16687,
        16688,
        16689,
        16690,
        16692
      ],
      ""removed"": []
    },
    ""16860"": {
      ""items"": [
        16701,
        16706,
        16714,
        16715,
        16716,
        16717,
        16718,
        16719,
        16720,
        16721,
        16722,
        16723,
        16724,
        16725,
        16737
      ],
      ""removed"": []
    },
    ""16861"": {
      ""items"": [
        16485,
        16738,
        16745,
        16756,
        16766,
        16767,
        16778,
        16784,
        16797,
        16798,
        16799,
        16828
      ],
      ""removed"": []
    },
    ""16490"": {
      ""items"": [
        17683,
        17684,
        17685,
        17754,
        17753,
        17752,
        17757,
        17751,
        17758,
        17750,
        17749,
        17759,
        17710,
        17767,
        17755,
        17765,
        17748,
        17766,
        17764,
        17747,
        17762,
        17763,
        17686,
        17761,
        17760,
        17687,
        17756
      ],
      ""removed"": []
    },
    ""16491"": {
      ""items"": [
        17278,
        17289,
        17302,
        17313,
        17314,
        17315,
        17316,
        17342,
        17354,
        17357
      ],
      ""removed"": []
    },
    ""16492"": {
      ""items"": [
        17507,
        17508,
        17509,
        17510,
        10225
      ],
      ""removed"": []
    },
    ""16493"": {
      ""items"": [
        17477,
        17503,
        17504,
        17505,
        10204
      ],
      ""removed"": []
    },
    ""16494"": {
      ""items"": [
        17770,
        17771,
        17772,
        17773,
        17774,
        17775,
        17776,
        17777,
        17778,
        17779,
        17780,
        17781,
        17782,
        17783,
        17784,
        17785,
        17786,
        17787,
        17788,
        17789,
        17875,
        17874
      ],
      ""removed"": []
    },
    ""10140"": {
      ""items"": [
        1010344,
        1010345,
        1010346,
        1010347,
        10285,
        11400,
        11399,
        11398,
        12707,
        12905,
        14177,
        13911,
        13910,
        10187,
        10202,
        10244,
        13975,
        13977
      ],
      ""removed"": []
    },
    ""10166"": {
      ""items"": [
        101255,
        5405,
        11402,
        13011,
        12707,
        12905,
        14177,
        13911,
        10202,
        10203,
        13975,
        13977
      ],
      ""removed"": []
    },
    ""10245"": {
      ""items"": [
        114437,
        10284,
        13011,
        12779,
        14234,
        14588,
        13911,
        14792,
        14652,
        10283,
        13975,
        13977
      ],
      ""removed"": []
    },
    ""10272"": {
      ""items"": [
        112652,
        10281
      ],
      ""removed"": []
    },
    ""17914"": {
      ""items"": [
        16483,
        16859,
        16484,
        16860,
        16861,
        16481,
        16482,
        16480,
        16490,
        16493,
        16492,
        16491,
        16494
      ],
      ""removed"": []
    },
    ""10353"": {
      ""items"": [
        10293,
        10306,
        10310,
        10336
      ],
      ""removed"": []
    },
    ""12707"": {
      ""items"": [
        12665,
        12673,
        12689,
        12666
      ],
      ""removed"": []
    },
    ""12779"": {
      ""items"": [
        12665,
        12673,
        12689,
        12666,
        12712,
        12713,
        12765,
        12769,
        12772,
        12774,
        12775,
        12778
      ],
      ""removed"": []
    },
    ""12905"": {
      ""items"": [
        12885,
        12956,
        12911,
        12954,
        12957,
        12955,
        12958
      ],
      ""removed"": []
    },
    ""14234"": {
      ""items"": [
        12885,
        12956,
        12911,
        12954,
        12957,
        12955,
        12958,
        14202,
        14203,
        14204,
        14205,
        14206,
        14207,
        14208,
        14209,
        14210,
        14211,
        14212,
        14213,
        14214,
        14215,
        14216,
        14217,
        14218,
        14219,
        14220,
        14221,
        14222,
        14223,
        14224,
        14225,
        14226
      ],
      ""removed"": []
    },
    ""13975"": {
      ""items"": [
        13919,
        13920,
        13915,
        13976,
        13979,
        13990,
        13991,
        13992,
        13995
      ],
      ""removed"": []
    },
    ""13977"": {
      ""items"": [
        13914,
        13916,
        13917,
        13928,
        13930,
        13934,
        13935,
        13940,
        13942,
        13943,
        13944,
        13948,
        13957,
        14179,
        13993,
        13994,
        16233,
        16605,
        16604,
        16603,
        16602
      ],
      ""removed"": []
    },
    ""14177"": {
      ""items"": [
        13996,
        14176,
        14175
      ],
      ""removed"": []
    },
    ""14588"": {
      ""items"": [
        13996,
        14176,
        14175,
        14235,
        14236,
        14248,
        14268,
        14299,
        14378,
        14405,
        14413,
        14415,
        14418,
        14419
      ],
      ""removed"": []
    },
    ""14652"": {
      ""items"": [
        14445,
        14446,
        14448,
        14452,
        14478,
        14490,
        14525,
        14586,
        13910
      ],
      ""removed"": []
    },
    ""14792"": {
      ""items"": [
        14771,
        14772,
        14773,
        14774,
        14775,
        14776,
        14777,
        14778,
        14788,
        14789,
        14790,
        14791
      ],
      ""removed"": []
    },
    ""1337505000"": {
      ""items"": [
        1337502787,
        1337502504,
        1337503004,
        1337503001,
        1337503003,
        1337503000,
        1404423043
      ],
      ""removed"": []
    },
    ""1337505001"": {
      ""items"": [
        1337502788,
        1337502507,
        1337503003,
        1337503000,
        1337503004,
        1337503001
      ],
      ""removed"": []
    },
    ""1337505002"": {
      ""items"": [
        134880,
        134880
      ],
      ""removed"": []
    },
    ""1337505003"": {
      ""items"": [
        134880,
        134880
      ],
      ""removed"": []
    },
    ""1337505004"": {
      ""items"": [
        134880,
        134880
      ],
      ""removed"": []
    },
    ""1337505005"": {
      ""items"": [
        134880,
        134880
      ],
      ""removed"": []
    },
    ""1337505006"": {
      ""items"": [
        134880,
        134880
      ],
      ""removed"": []
    },
    ""1337505007"": {
      ""items"": [
        134880,
        134880
      ],
      ""removed"": []
    },
    ""1337505008"": {
      ""items"": [
        134880,
        134880
      ],
      ""removed"": []
    },
    ""1337505009"": {
      ""items"": [
        134880,
        134880
      ],
      ""removed"": []
    },
    ""1337505010"": {
      ""items"": [
        134879,
        130700,
        130698,
        134879,
        130700,
        130698
      ],
      ""removed"": []
    },
    ""1337505011"": {
      ""items"": [
        134879,
        134879
      ],
      ""removed"": []
    },
    ""1337505012"": {
      ""items"": [
        134879,
        134879
      ],
      ""removed"": []
    },
    ""1337505013"": {
      ""items"": [
        134879,
        134879
      ],
      ""removed"": []
    },
    ""1337505014"": {
      ""items"": [
        1337502789,
        1337502508,
        1337503004,
        1337503001,
        1337503005,
        1337503002
      ],
      ""removed"": []
    },
    ""1337505015"": {
      ""items"": [
        134879,
        134879
      ],
      ""removed"": []
    },
    ""1337505016"": {
      ""items"": [
        130700,
        130698,
        130700,
        130698
      ],
      ""removed"": []
    },
    ""1337505017"": {
      ""items"": [
        134879,
        134879
      ],
      ""removed"": []
    },
    ""1337505018"": {
      ""items"": [
        1337502790,
        1337502552,
        1337503113,
        1337503112
      ],
      ""removed"": []
    },
    ""1337505019"": {
      ""items"": [
        1337502791,
        1337502553,
        1337503112,
        1337503113
      ],
      ""removed"": []
    },
    ""1337505020"": {
      ""items"": [
        1337502555
      ],
      ""removed"": []
    },
    ""1337505021"": {
      ""items"": [
        1337502792,
        1337502554,
        1337503113,
        1337503114
      ],
      ""removed"": []
    },
    ""1500010221"": {
      ""items"": [],
      ""removed"": []
    },
    ""501581"": {
      ""items"": [
        102819,
        103122,
        102829,
        102834,
        269785,
        269790,
        25095,
        25108,
        6859,
        6858
      ],
      ""removed"": []
    },
    ""501584"": {
      ""items"": [
        102836,
        102839,
        102838,
        102483,
        103048,
        113325,
        113326,
        113324,
        269792,
        6861,
        6862
      ],
      ""removed"": []
    },
    ""500043"": {
      ""items"": [
        102837,
        25089,
        25091,
        25107
      ],
      ""removed"": []
    },
    ""501585"": {
      ""items"": [
        103121,
        102835,
        102841,
        102842,
        102844,
        103049,
        269791,
        269793,
        269794,
        269795,
        269796,
        269797,
        269842,
        25094,
        25092,
        25093,
        25101,
        25103,
        25105,
        25106,
        5200,
        6860,
        6863,
        6864,
        6865,
        6866,
        6867,
        6868,
        6869,
        25871,
        25888,
        25895,
        25896,
        25898,
        25899,
        25900,
        25901,
        25902,
        25903,
        25904,
        25905,
        25906,
        25909,
        25957,
        26059
      ],
      ""removed"": []
    },
    ""501824"": {
      ""items"": [
        114894,
        102466,
        269303,
        137776,
        601933,
        453,
        137772,
        137773,
        137774,
        5213,
        5208,
        6871,
        117633,
        20864,
        20865,
        1500011049
      ],
      ""removed"": []
    },
    ""501587"": {
      ""items"": [
        102855,
        103123,
        102849,
        102854,
        102461,
        102463,
        116615,
        116614,
        116605,
        116610,
        80052,
        80015,
        137764,
        137765,
        137789,
        137790,
        137770,
        25083,
        25082,
        25095,
        25108,
        25139,
        25137,
        25931,
        25194,
        25227,
        25169,
        25168,
        3363,
        3368,
        5211,
        5212,
        6007,
        6009,
        9271,
        9334,
        20877,
        20878,
        20918,
        1337501418,
        1337501416,
        1337501417,
        1337501415,
        601127016,
        601127013
      ],
      ""removed"": []
    },
    ""501692"": {
      ""items"": [
        102848,
        269298,
        111929,
        116619,
        118240,
        117736,
        80129,
        136240,
        136410,
        25930,
        5207,
        9274,
        9275,
        12948,
        20875
      ],
      ""removed"": []
    },
    ""500047"": {
      ""items"": [
        102847,
        134723,
        134724,
        134725,
        80040,
        80041,
        80042,
        80043,
        80044,
        80045,
        80046,
        80047,
        80048,
        117514,
        117515,
        117516,
        80003,
        80004,
        80005,
        80006,
        80007,
        80008,
        80009,
        137771,
        25080,
        25079,
        25089,
        25091,
        25135,
        3356,
        80128,
        9268,
        20871,
        20872,
        20873,
        20874
      ],
      ""removed"": []
    },
    ""500044"": {
      ""items"": [
        102846,
        134730,
        134731,
        134732,
        134733,
        116618,
        80049,
        80050,
        80051,
        80017,
        25092,
        3357,
        3361,
        3362,
        20860
      ],
      ""removed"": []
    },
    ""8855889"": {
      ""items"": [
        8856006,
        8856017,
        8856018,
        8856019,
        8856021,
        8855051,
        8855053,
        8855055,
        1440137008,
        1440137006,
        1440137004,
        1440137110,
        1440137111
      ],
      ""removed"": []
    },
    ""8855888"": {
      ""items"": [
        8856001,
        1440133040,
        8856008,
        8856009,
        8856010,
        8856011,
        8856012,
        8856013,
        8856014,
        8856015,
        8856016,
        1440133043,
        8856020,
        8855050,
        8855052,
        8855054,
        1440134520,
        1440137100,
        1440137101,
        1440134530,
        1440134550,
        1440134570
      ],
      ""removed"": []
    },
    ""8855882"": {
      ""items"": [
        8855019,
        8855017,
        8855015,
        101278,
        8855005,
        8855011
      ],
      ""removed"": []
    },
    ""8855881"": {
      ""items"": [
        8855018,
        8855016,
        8855014,
        1010519,
        8855001,
        8855008
      ],
      ""removed"": []
    },
    ""1500011051"": {
      ""items"": [
        1500011052,
        1500011050,
        1500011053,
        1500011049,
        1500011059,
        1500011060,
        1500011056,
        1500011057,
        1500011006,
        1500011054,
        1500011058,
        1500011061,
        1500011063,
        1500011066,
        1500011067,
        1500011068,
        1500011069,
        1500011070,
        1500011071,
        1500011072,
        1500011073,
        1500011074,
        1500011075,
        1500011076,
        1500011077,
        1500011078,
        1500011079
      ],
      ""removed"": []
    },
    ""1500011087"": {
      ""items"": [
        1500011250,
        1500011043,
        1500011044
      ],
      ""removed"": []
    },
    ""2100115200"": {
      ""items"": [
        2100115231,
        2100115256,
        2100115267,
        2100115615,
        2100115240,
        2100115016,
        2100115018,
        2100115020,
        2100115002,
        2100115004,
        2100115006,
        2100115012,
        2100115014,
        2100115026,
        2100115010,
        2100115008,
        2100115022,
        2100115024,
        2100115033,
        2100115028,
        2100115030,
        2100115203,
        2100115249,
        2100115253
      ],
      ""removed"": []
    },
    ""1500010601"": {
      ""items"": [
        1500010154,
        1500010600
      ],
      ""removed"": []
    },
    ""1500010030"": {
      ""items"": [
        1500010035,
        1500010033,
        1500010020
      ],
      ""removed"": []
    },
    ""1500010223"": {
      ""items"": [
        1500010215,
        1500010224,
        134722,
        101497,
        102482,
        114776,
        134730,
        134731,
        134732,
        134733,
        134735,
        80040,
        80041,
        80042,
        80043,
        80044,
        80045,
        80046,
        80047,
        80048,
        80049,
        80050,
        80051,
        80060,
        80061,
        80062,
        80063
      ],
      ""removed"": []
    },
    ""1500010212"": {
      ""items"": [
        1500010200,
        1500010225,
        1500010224
      ],
      ""removed"": []
    },
    ""1337502792"": {
      ""items"": [
        1337502613,
        1337502612,
        1337502611,
        1337501146,
        1337501145,
        1337502599,
        1337502598,
        1337502597,
        1337502596,
        1337502593,
        1337502592,
        1337502591,
        1337502590,
        1337502589,
        1337502588
      ],
      ""removed"": []
    },
    ""1337502791"": {
      ""items"": [
        1337502613,
        1337502612,
        1337502611,
        1337501144,
        1337501143,
        1337502583,
        1337502582,
        1337502568,
        1337502566,
        1337502563,
        1337502562,
        1337502561,
        1337502560,
        1337502559,
        1337502558
      ],
      ""removed"": []
    },
    ""1337502790"": {
      ""items"": [
        1337502613,
        1337502612,
        1337502611,
        1337501058,
        1337501057,
        1337502583,
        1337502582,
        1337502568,
        1337502566,
        1337502563,
        1337502562,
        1337502561,
        1337502560,
        1337502559,
        1337502558
      ],
      ""removed"": []
    },
    ""1337502555"": {
      ""items"": [
        1337501044,
        1337501034
      ],
      ""removed"": []
    },
    ""1337502554"": {
      ""items"": [
        1337501045,
        1337501041,
        1337501038,
        1337501035,
        1337501031,
        1337501030
      ],
      ""removed"": []
    },
    ""1337502553"": {
      ""items"": [
        1337501043,
        1337501040,
        1337501037,
        1337501033,
        1337501031,
        1337501029
      ],
      ""removed"": []
    },
    ""1337502552"": {
      ""items"": [
        1337501042,
        1337501039,
        1337501036,
        1337501032,
        1337501031,
        1337501028
      ],
      ""removed"": []
    },
    ""1337502789"": {
      ""items"": [
        1337502631,
        1337502630,
        1337502629,
        1337502628,
        1337502627,
        1337502626,
        1337502625,
        1337502624,
        1337502623,
        1337502622,
        1337502621
      ],
      ""removed"": []
    },
    ""1337502788"": {
      ""items"": [
        1337502527,
        1337502526,
        1337502525,
        1337502524,
        1337502523,
        1337502522,
        1337502521,
        1337502520,
        1337502516,
        1337502515,
        1337502514
      ],
      ""removed"": []
    },
    ""1337502787"": {
      ""items"": [
        1337502527,
        1337502526,
        1337502525,
        1337502524,
        1337502523,
        1337502522,
        1337502521,
        1337502520,
        1337502516,
        1337502515,
        1337502514
      ],
      ""removed"": []
    },
    ""1337502509"": {
      ""items"": [
        112113,
        1337502633,
        1337502529,
        1337502528,
        1337502518,
        1337500063,
        1337502911,
        1337502910,
        1337501341,
        1337501339,
        1337502614,
        1337500147,
        1337500250,
        1337500053,
        1337500248,
        1337500247,
        1337500246,
        1337500245,
        1337500183,
        1337500249,
        1337502601,
        1337502600,
        1337501372,
        1337501370,
        1337500034,
        1337500032,
        1337500030
      ],
      ""removed"": []
    },
    ""1337502508"": {
      ""items"": [
        114523,
        119029,
        1337502633,
        1337502529,
        1337502528,
        1337502632,
        1337502518,
        1337500055,
        1337500147,
        1337500183,
        1337502601,
        1337502600,
        1337502614,
        1337502911,
        1337502910,
        1337501341,
        1337501339,
        1337502620,
        1337502619,
        1337502618,
        1337502617,
        1337502616,
        1337502615,
        1337500034,
        1337500032,
        1337500030,
        1337501372,
        1337501370,
        1337502533,
        1337502532,
        1337502531,
        1337502530
      ],
      ""removed"": []
    },
    ""1337502507"": {
      ""items"": [
        101308,
        101309,
        1337502633,
        1337502529,
        1337502528,
        1337502518,
        1337500055,
        1337500147,
        1337500250,
        1337500053,
        1337500248,
        1337500247,
        1337500246,
        1337500245,
        1337500183,
        1337500249,
        1337502601,
        1337502600,
        1337502614,
        1337502911,
        1337502910,
        1337501341,
        1337501339,
        1337500034,
        1337500032,
        1337500030,
        1337501372,
        1337501370,
        1337502513,
        1337502512,
        1337502511,
        1337502510
      ],
      ""removed"": []
    },
    ""1337502504"": {
      ""items"": [
        1000178,
        1010035,
        1337502633,
        1337502529,
        1337502528,
        1337502518,
        1337500063,
        1337502911,
        1337502910,
        1337501341,
        1337501339,
        1337502614,
        1337500147,
        1337500250,
        1337500053,
        1337500248,
        1337500247,
        1337500246,
        1337500245,
        1337500183,
        1337500249,
        1337502601,
        1337502600,
        1337501372,
        1337501370,
        1337500034,
        1337500032,
        1337500030,
        1337502503,
        1337502502,
        1337502501,
        1337502500
      ],
      ""removed"": []
    },
    ""1337503000"": {
      ""items"": [
        1337503069,
        1337500109,
        1337503063,
        1337500107,
        1337503057,
        1337500106,
        1337500311,
        1337503052,
        1337503045,
        1337503143,
        1337503044,
        1337503037,
        1337503146,
        1337500310,
        1337503031,
        1337500104,
        1337503023,
        1337503022,
        1337503010,
        1337500103,
        1337503016,
        1337500105
      ],
      ""removed"": []
    },
    ""1337503001"": {
      ""items"": [
        1337503071,
        1337503070,
        1337501392,
        1337503065,
        1337503064,
        1337501390,
        1337503059,
        1337503058,
        1337501389,
        1337503055,
        1337503053,
        1337503048,
        1337503047,
        1337503144,
        1337503046,
        1337503040,
        1337503039,
        1337503147,
        1337503038,
        1337503033,
        1337503032,
        1337501387,
        1337503027,
        1337503026,
        1337503025,
        1337503024,
        1337503012,
        1337503011,
        1337501386,
        1337503018,
        1337503017,
        1337501388
      ],
      ""removed"": []
    },
    ""1337503002"": {
      ""items"": [
        1337503074,
        1337503073,
        1337503072,
        1337503068,
        1337503067,
        1337503066,
        1337503062,
        1337503061,
        1337503060,
        1337503056,
        1337503054,
        1337503051,
        1337503050,
        1337503145,
        1337503049,
        1337503043,
        1337503042,
        1337503148,
        1337503041,
        1337503036,
        1337503035,
        1337503034,
        1337503030,
        1337503029,
        1337503028,
        1337503015,
        1337503014,
        1337503013,
        1337503021,
        1337503020,
        1337503019
      ],
      ""removed"": []
    },
    ""1337503003"": {
      ""items"": [
        1337503100,
        1337500168,
        1337500167,
        1337500166,
        1337500165,
        1337500164,
        1337503087,
        1337500123,
        1337500122,
        1337500121,
        1337500120,
        1337500119,
        1337503075,
        1337500114,
        1337500113,
        1337500112,
        1337500111,
        1337500110
      ],
      ""removed"": []
    },
    ""1337503004"": {
      ""items"": [
        1337503101,
        1337500172,
        1337500171,
        1337500170,
        1337500169,
        1337503088,
        1337500127,
        1337500126,
        1337500125,
        1337500124,
        1337503076,
        1337500118,
        1337500117,
        1337500116,
        1337500115
      ],
      ""removed"": []
    },
    ""1337503005"": {
      ""items"": [
        1337503111,
        1337503110,
        1337503109,
        1337503108,
        1337503107,
        1337503106,
        1337503105,
        1337503104,
        1337503102,
        1337503098,
        1337503097,
        1337503096,
        1337503095,
        1337503094,
        1337503093,
        1337503092,
        1337503091,
        1337503090,
        1337503089,
        1337503086,
        1337503085,
        1337503084,
        1337503083,
        1337503082,
        1337503081,
        1337503080,
        1337503079,
        1337503078,
        1337503077
      ],
      ""removed"": []
    },
    ""1337503112"": {
      ""items"": [
        1337501254,
        1337503140,
        1337501251,
        1337503132,
        1337503129,
        1337501249,
        1337503123,
        1337503122,
        1337501252,
        1337501250
      ],
      ""removed"": []
    },
    ""1337503113"": {
      ""items"": [
        1337501254,
        1337503141,
        1337503138,
        1337503133,
        1337503130,
        1337503127,
        1337503125,
        1337503124,
        1337503118,
        1337503120
      ],
      ""removed"": []
    },
    ""1337503114"": {
      ""items"": [
        1337501254,
        1337503142,
        1337503139,
        1337503134,
        1337503131,
        1337503128,
        1337503126,
        1337503119,
        1337503121
      ],
      ""removed"": []
    },
    ""1500011171"": {
      ""items"": [
        102099,
        101498,
        1500010428,
        102083,
        1500010224
      ],
      ""removed"": []
    },
    ""1500011204"": {
      ""items"": [
        102099,
        102849,
        1500011200,
        102083,
        1500011049
      ],
      ""removed"": []
    },
    ""101037221"": {
      ""items"": [
        1010372,
        101037222
      ],
      ""removed"": []
    },
    ""1500010868"": {
      ""items"": [
        1500010517,
        1500010888,
        1500010850,
        1500010856,
        1500010862,
        1500010909
      ],
      ""removed"": []
    },
    ""1500010050"": {
      ""items"": [
        1500010051,
        1500010021,
        1500010024
      ],
      ""removed"": []
    },
    ""2077030401"": {
      ""items"": [
        601326,
        2100115130,
        2077030005
      ],
      ""removed"": []
    },
    ""2077030402"": {
      ""items"": [
        2077030001,
        2077030002,
        2077030003,
        2077030006
      ],
      ""removed"": []
    },
    ""859898"": {
      ""items"": [
        850069,
        850082,
        850072,
        850122,
        850127,
        850128,
        850132,
        850078,
        850057,
        850093,
        850106,
        850087,
        850099
      ],
      ""removed"": []
    },
    ""859982"": {
      ""items"": [
        850009,
        850010,
        850030,
        850042,
        850113,
        850114
      ],
      ""removed"": []
    },
    ""8857201"": {
      ""items"": [
        116029,
        8857200,
        8857203,
        8857204
      ],
      ""removed"": []
    },
    ""2000150006"": {
      ""items"": [
        1010365,
        2000150004
      ],
      ""removed"": []
    },
    ""902300"": {
      ""items"": [
        902296,
        902297,
        901004
      ],
      ""removed"": []
    },
    ""902301"": {
      ""items"": [
        902298,
        902299,
        901005
      ],
      ""removed"": []
    },
    ""1337500007"": {
      ""items"": [
        1010463,
        1337500011,
        1337500012,
        850069
      ],
      ""removed"": []
    },
    ""1337500008"": {
      ""items"": [
        101275,
        1337500011,
        1337500012
      ],
      ""removed"": []
    },
    ""1337500013"": {
      ""items"": [
        119892,
        1337500011,
        1337500012
      ],
      ""removed"": []
    },
    ""1337500014"": {
      ""items"": [
        1010464,
        1337500018,
        1337500019
      ],
      ""removed"": []
    },
    ""1337500015"": {
      ""items"": [
        101276,
        1337500018,
        1337500019
      ],
      ""removed"": []
    },
    ""1337500020"": {
      ""items"": [
        117668,
        1337500018,
        1337500019
      ],
      ""removed"": []
    },
    ""1404423043"": {
      ""items"": [
        1404423000,
        1404423025,
        1404423020,
        1404423015,
        1404423035,
        1404423010,
        1404423005,
        1404423030,
        1404423040,
        1404423045
      ],
      ""removed"": []
    },
    ""77100010"": {
      ""items"": [
        77100011,
        77100012,
        77100013
      ],
      ""removed"": []
    },
    ""77100020"": {
      ""items"": [
        77100021,
        77100022,
        77100023
      ],
      ""removed"": []
    },
    ""77100030"": {
      ""items"": [
        77100031,
        77100032
      ],
      ""removed"": []
    },
    ""2000150002"": {
      ""items"": [
        1010362,
        2000150000
      ],
      ""removed"": []
    },
    ""2000150012"": {
      ""items"": [
        1010462,
        2000150010
      ],
      ""removed"": []
    },
    ""1337500000"": {
      ""items"": [
        1010462,
        1337500001,
        1337500002
      ],
      ""removed"": []
    },
    ""1337500003"": {
      ""items"": [
        101274,
        1337500001,
        1337500002
      ],
      ""removed"": []
    },
    ""1337500006"": {
      ""items"": [
        114508,
        1337500001,
        1337500002
      ],
      ""removed"": []
    },
    ""1337500387"": {
      ""items"": [
        1337500375,
        1337500594,
        1337500696,
        1337500733
      ],
      ""removed"": []
    },
    ""1337500355"": {
      ""items"": [
        1337500352,
        1337500354,
        1337500360
      ],
      ""removed"": []
    },
    ""2100119372"": {
      ""items"": [
        2100119307,
        2100119306,
        2100119304,
        2100119305,
        2100119441,
        2100119442,
        2100119443,
        2100119444
      ],
      ""removed"": []
    },
    ""2100119373"": {
      ""items"": [
        2100119333,
        2100119310,
        2100119312,
        2100119326
      ],
      ""removed"": []
    },
    ""2100119374"": {
      ""items"": [
        2100119390,
        2100119308,
        2100119309,
        2100119313,
        2100119391,
        2100119393,
        2100119394
      ],
      ""removed"": []
    },
    ""2100119382"": {
      ""items"": [
        2100119376,
        2100119377,
        2100119378,
        2100119379,
        2100119380,
        2100119381,
        2100119383
      ],
      ""removed"": []
    },
    ""2100119389"": {
      ""items"": [
        2100119384,
        2100119385,
        2100119386,
        2100119387,
        2100119388
      ],
      ""removed"": []
    },
    ""2100119403"": {
      ""items"": [
        2100119395,
        2100119396,
        2100119397,
        2100119398,
        2100119399,
        2100119400,
        2100119401
      ],
      ""removed"": []
    },
    ""2100119410"": {
      ""items"": [
        2100119404,
        2100119405,
        2100119406,
        2100119407,
        2100119408
      ],
      ""removed"": []
    },
    ""2100119417"": {
      ""items"": [
        2100119415,
        2100119419,
        2100119414,
        2100119416
      ],
      ""removed"": []
    },
    ""2100119424"": {
      ""items"": [
        2100119420,
        2100119421,
        2100119422,
        2100119423
      ],
      ""removed"": []
    },
    ""2100119432"": {
      ""items"": [
        2100119336,
        2100119428,
        2100119433,
        2100119434,
        2100119435
      ],
      ""removed"": []
    },
    ""2100119300"": {
      ""items"": [
        2100119302,
        2100119315,
        2100119372,
        2100119314,
        2100119374,
        2100119311,
        2100119373,
        2100119325,
        2100119410,
        2100119403,
        2100119417,
        2100119412,
        2100119382,
        2100119424,
        2100119389,
        2100119324,
        2100119432,
        2100119322,
        2100119328,
        2100119445,
        2100119335,
        2100119331,
        2100119427
      ],
      ""removed"": []
    },
    ""1337500067"": {
      ""items"": [
        1337500030,
        1337500032,
        1337500034,
        1337501370,
        1337501372,
        1337500036,
        1337500039,
        1337500040,
        1337500041,
        1337500042,
        1337500043,
        1337500044,
        1337500045,
        1337500046,
        1337500047,
        1337500048,
        1337500049,
        1337500050,
        1337500051,
        1337500054,
        1337501340,
        1337501342,
        1337500055,
        1337500063,
        1337501374,
        1337500065,
        1337500066,
        1337500074
      ],
      ""removed"": []
    },
    ""1337500072"": {
      ""items"": [
        1337500030,
        1337500032,
        1337500034,
        1337501370,
        1337501372,
        1337500036,
        1337500039,
        1337500040,
        1337500041,
        1337500042,
        1337500043,
        1337500044,
        1337500045,
        1337500046,
        1337500047,
        1337500048,
        1337500049,
        1337500050,
        1337500051,
        1337500054,
        1337501340,
        1337501342,
        1337500056,
        1337500063,
        1337501374,
        1337500065,
        1337500066,
        1337500074
      ],
      ""removed"": []
    },
    ""1337500073"": {
      ""items"": [
        1337500030,
        1337500032,
        1337500034,
        1337501370,
        1337501372,
        1337500036,
        1337500039,
        1337500040,
        1337500041,
        1337500042,
        1337500043,
        1337500044,
        1337500045,
        1337500046,
        1337500047,
        1337500048,
        1337500049,
        1337500050,
        1337500051,
        1337500054,
        1337501340,
        1337501342,
        1337500063,
        1337501374,
        1337500065,
        1337500066,
        1337500074
      ],
      ""removed"": []
    },
    ""1337500086"": {
      ""items"": [
        1337500076,
        1337500078,
        1337500079,
        1337500080,
        1337500081,
        1337500082,
        1337500083,
        1337500084,
        1337500088,
        1337500089,
        1337500090,
        1337500091,
        1337500093,
        1337500099,
        1337500100,
        1337500101,
        1337500296,
        1337500297,
        1337500298,
        1337500300,
        1337500301,
        1337500302,
        1337500303,
        1337500304,
        1337500227
      ],
      ""removed"": []
    },
    ""1337500102"": {
      ""items"": [
        1337500103,
        1337500104,
        1337500105,
        1337500106,
        1337500107,
        1337500108,
        1337500109,
        1337500110,
        1337500111,
        1337500112,
        1337500113,
        1337500114,
        1337500115,
        1337500116,
        1337500117,
        1337500118,
        1337500119,
        1337500120,
        1337500121,
        1337500122,
        1337500123,
        1337500124,
        1337500125,
        1337500126,
        1337500127
      ],
      ""removed"": []
    },
    ""1337500128"": {
      ""items"": [
        1337500130,
        1337500132,
        1337500133,
        1337500134,
        1337500135,
        1337500136,
        1337500137,
        1337500138,
        1337500140,
        1337500141,
        1337500142,
        1337500143,
        1337500145,
        1337500149,
        1337500151,
        1337500153,
        1337500310,
        1337500311
      ],
      ""removed"": []
    },
    ""1337500162"": {
      ""items"": [
        1337500164,
        1337500165,
        1337500166,
        1337500167,
        1337500168,
        1337500169,
        1337500170,
        1337500171,
        1337500172,
        1337500173,
        1337500175,
        1337500176,
        1337500177,
        1337500178,
        1337500179,
        1337500180,
        1337500181,
        1337500182,
        1337500183,
        1337500184,
        1337500186,
        1337500187,
        1337500188,
        1337500189
      ],
      ""removed"": []
    },
    ""1337500190"": {
      ""items"": [
        1337500192,
        1337500193,
        1337500194,
        1337500195,
        1337500196,
        1337500197,
        1337500198,
        1337500199,
        1337500200,
        1337500201,
        1337500202,
        1337500203,
        1337500204,
        1337500205,
        1337500206,
        1337500207,
        1337500208
      ],
      ""removed"": []
    },
    ""1337500209"": {
      ""items"": [
        1337500210,
        1337500211,
        1337500212,
        1337500213,
        1337500214,
        1337500221,
        1337500222,
        1337500224,
        1337500215,
        1337500216,
        1337500217,
        1337500218,
        1337500219,
        1337500220,
        1337500223
      ],
      ""removed"": []
    },
    ""1337500229"": {
      ""items"": [
        1337501350,
        1337501351,
        1337501352,
        1337501353,
        1337501354,
        1337501355,
        1337501356,
        1337501357,
        1337501358,
        1337501359,
        1337501360,
        1337501361,
        1337501362,
        1337500231,
        1337500232,
        1337500233,
        1337500234,
        1337500235,
        1337501363,
        1337501366,
        1337501364,
        1337501365,
        1337501367,
        1337501368,
        1337501369
      ],
      ""removed"": []
    },
    ""1337500241"": {
      ""items"": [
        1337500254,
        1337500255,
        1337500256,
        1337500257,
        1337500258,
        1337500259,
        1337500260,
        1337500261,
        1337500262,
        1337500263,
        1337500264,
        1337500266,
        1337500268,
        1337500270,
        1337500272,
        1337500274,
        1337500276,
        1337500251
      ],
      ""removed"": []
    },
    ""1337500293"": {
      ""items"": [
        1337500277,
        1337500278,
        1337500280,
        1337500282,
        1337500284,
        1337500286,
        1337500288,
        1337500294,
        1337500295,
        1337500305,
        1337500307,
        1337500308,
        1337500309
      ],
      ""removed"": []
    },
    ""1337501451"": {
      ""items"": [
        1337500344,
        1337500345,
        1337501449,
        1337501450,
        1337500346,
        1337501452,
        1337501453,
        1337500347,
        1337501454,
        1337501455,
        1337500348,
        1337501456,
        1337501457,
        1337500349,
        1337501458,
        1337501459,
        1337500350,
        1337501460,
        1337501461
      ],
      ""removed"": []
    },
    ""1337500292"": {
      ""items"": [
        1337500092,
        1337500154,
        1337500094,
        1337500156,
        1337500095,
        1337500157,
        1337500096,
        1337500158,
        1337500097,
        1337500159,
        1337500098,
        1337500160,
        1337500253,
        1337500161,
        1337500245,
        1337500246,
        1337500247,
        1337500248,
        1337500249,
        1337500250,
        1337500147,
        1337500052,
        1337500053,
        1337501339,
        1337501341
      ],
      ""removed"": []
    },
    ""1337500329"": {
      ""items"": [
        1337500312,
        1337500313,
        1337500314,
        1337500315,
        1337500316,
        1337500317,
        1337500318,
        1337500319,
        1337500320,
        1337500321,
        1337500322,
        1337500323,
        1337500324,
        1337500325,
        1337500326,
        1337500327,
        1337500328
      ],
      ""removed"": []
    },
    ""1337500330"": {
      ""items"": [
        1337500331,
        1337500332,
        1337500333,
        1337500334,
        1337500335,
        1337500336,
        1337500337,
        1337500338,
        1337500339,
        1337500340,
        1337500341,
        1337500342,
        1337500343
      ],
      ""removed"": []
    },
    ""1337501407"": {
      ""items"": [
        1337501378,
        1337501379,
        1337501380,
        1337501381,
        1337501382,
        1337501383,
        1337501384,
        1337501385,
        1337501375,
        1337501376,
        1337501377,
        1337501386,
        1337501387,
        1337501388,
        1337501389,
        1337501390,
        1337501391,
        1337501392
      ],
      ""removed"": []
    },
    ""1337501409"": {
      ""items"": [
        1337501393,
        1337501394,
        1337501395,
        1337501396,
        1337501397,
        1337501398,
        1337501399,
        1337501400,
        1337501401,
        1337501402,
        1337501403,
        1337501404,
        1337501405,
        1337501406,
        1337501408,
        1337501410,
        1337501411,
        1337500158,
        1337500159
      ],
      ""removed"": []
    },
    ""1337501447"": {
      ""items"": [
        1337501436,
        1337501437,
        1337501438,
        1337501439,
        1337501440,
        1337501441,
        1337501442,
        1337501443,
        1337501444,
        1337501445,
        1337501446
      ],
      ""removed"": []
    },
    ""1337500075"": {
      ""items"": [
        1337500073,
        1337500086,
        1337500102,
        1337500128,
        1337500162,
        1337500190,
        1337500229,
        1337500292,
        1337501407,
        1337501409,
        1337501447,
        1337500293,
        1337501451,
        1337500241,
        1337500330,
        1337500329
      ],
      ""removed"": []
    },
    ""1337500351"": {
      ""items"": [
        1337500067,
        1337500086,
        1337500102,
        1337500128,
        1337500162,
        1337500190,
        1337500229,
        1337500292,
        1337501407,
        1337501409,
        1337501447,
        1337500293,
        1337501451,
        1337500241,
        1337500330,
        1337500329
      ],
      ""removed"": []
    },
    ""1337501430"": {
      ""items"": [
        1337500072,
        1337500086,
        1337500102,
        1337500128,
        1337500162,
        1337500190,
        1337500229,
        1337500292,
        1337501407,
        1337501409,
        1337501447,
        1337500293,
        1337501451,
        1337500241,
        1337500330,
        1337500329
      ],
      ""removed"": []
    },
    ""1337501431"": {
      ""items"": [
        1337500073,
        1337500086,
        1337500102,
        1337500128,
        1337500162,
        1337500190,
        1337500229,
        1337500292,
        1337501407,
        1337501409,
        1337501447,
        1337500293,
        1337501451,
        1337500241,
        1337500330,
        1337500329
      ],
      ""removed"": []
    },
    ""1440133020"": {
      ""items"": [
        901000,
        901001
      ],
      ""removed"": []
    },
    ""1440133021"": {
      ""items"": [
        901002,
        901003
      ],
      ""removed"": []
    },
    ""1440133026"": {
      ""items"": [
        902290,
        902291
      ],
      ""removed"": []
    },
    ""1440133027"": {
      ""items"": [
        902292,
        902293
      ],
      ""removed"": []
    },
    ""977020"": {
      ""items"": [
        977000,
        977001,
        977002,
        977003,
        977004
      ],
      ""removed"": []
    },
    ""977021"": {
      ""items"": [
        977010,
        977011,
        977012,
        977013
      ],
      ""removed"": []
    },
    ""977460"": {
      ""items"": [
        977405,
        977406,
        977407,
        977408,
        977409,
        977031
      ],
      ""removed"": []
    },
    ""1440137033"": {
      ""items"": [
        977030,
        977400,
        977403,
        977401,
        977402,
        977404
      ],
      ""removed"": []
    },
    ""902099"": {
      ""items"": [
        902000,
        902001,
        902002,
        902003,
        902004,
        902005,
        902018,
        902019,
        902020,
        902021,
        902022,
        902023,
        902024,
        902025,
        902042,
        902043
      ],
      ""removed"": []
    },
    ""902100"": {
      ""items"": [
        902006,
        902007,
        902008,
        902009,
        902010,
        902011,
        902026,
        902027,
        902028,
        902029,
        902030,
        902031,
        902032,
        902033,
        902044,
        902045
      ],
      ""removed"": []
    },
    ""902101"": {
      ""items"": [
        902012,
        902013,
        902014,
        902015,
        902016,
        902017,
        902034,
        902035,
        902036,
        902037,
        902038,
        902039,
        902040,
        902041,
        902046,
        902047
      ],
      ""removed"": []
    },
    ""902102"": {
      ""items"": [
        902048,
        902049,
        902050,
        902051,
        902052,
        902053,
        902054,
        902055,
        902056,
        902075,
        902076,
        902077
      ],
      ""removed"": []
    },
    ""902103"": {
      ""items"": [
        902057,
        902058,
        902059,
        902060,
        902061,
        902062,
        902063,
        902064,
        902065,
        902078,
        902079,
        902080
      ],
      ""removed"": []
    },
    ""902104"": {
      ""items"": [
        902066,
        902067,
        902068,
        902069,
        902070,
        902071,
        902072,
        902073,
        902074,
        902081,
        902082,
        902083
      ],
      ""removed"": []
    },
    ""2100115300"": {
      ""items"": [
        2100115301,
        2100115302,
        2100115303,
        2100115305,
        2100115419,
        2100115306,
        2100115307,
        2100115308,
        2100115309,
        2100115318,
        2100115310,
        2100115311,
        2100115312,
        2100115313,
        2100115314,
        2100115315,
        2100115316,
        2100115317,
        2100115319,
        2100115320,
        2100115321
      ],
      ""removed"": []
    },
    ""992093"": {
      ""items"": [
        992001,
        992002,
        992003,
        992004,
        992005,
        992006,
        992007,
        992008,
        992009,
        992010,
        992011,
        992012,
        992013,
        992014,
        992015,
        992016,
        992071,
        992087,
        992074
      ],
      ""removed"": []
    },
    ""992094"": {
      ""items"": [
        992021,
        992031,
        992022,
        992023,
        992032,
        992024,
        992025,
        992026,
        992027,
        992028,
        992029,
        992030,
        992033,
        992034,
        992035,
        992036,
        992037,
        992038,
        992039,
        992040
      ],
      ""removed"": []
    },
    ""992095"": {
      ""items"": [
        992043,
        992045,
        992046
      ],
      ""removed"": []
    },
    ""992096"": {
      ""items"": [
        992001,
        992071,
        992072,
        992073,
        992074,
        992075,
        992076,
        992077,
        992078,
        992014,
        992015,
        992016,
        992010,
        992011
      ],
      ""removed"": []
    },
    ""992097"": {
      ""items"": [
        992021,
        992031,
        992022,
        992023,
        992032,
        992024,
        992085,
        992086,
        992088,
        992089,
        992029,
        992030,
        992033,
        992034,
        992035,
        992036,
        992037,
        992038,
        992079,
        992080
      ],
      ""removed"": []
    },
    ""992098"": {
      ""items"": [
        992081,
        992082,
        992083
      ],
      ""removed"": []
    },
    ""2100115500"": {
      ""items"": [
        2100115501,
        2100115508,
        2100115509,
        2100115510,
        2100115511,
        2100115512,
        2100115513,
        2100115514,
        2100115502,
        2100115515
      ],
      ""removed"": []
    },
    ""8853621"": {
      ""items"": [
        8853600,
        8853601,
        8853602,
        8853604,
        8853605,
        8853606
      ],
      ""removed"": []
    },
    ""1440137034"": {
      ""items"": [
        1440134606,
        1440134607,
        1440134608
      ],
      ""removed"": []
    },
    ""1339473007"": {
      ""items"": [
        1339473001,
        1339473002,
        1339473003,
        1339473005,
        1339473006,
        1339473010,
        1339473004,
        1339473012,
        1339473009,
        1339473011
      ],
      ""removed"": []
    },
    ""902230"": {
      ""items"": [
        902200,
        902201,
        902202,
        902203,
        902204,
        902205,
        902206,
        902207
      ],
      ""removed"": []
    },
    ""902231"": {
      ""items"": [
        902214,
        902215,
        902216,
        902217,
        902218,
        902219,
        902220,
        902221,
        902222,
        902223,
        902224,
        902225
      ],
      ""removed"": []
    },
    ""976500"": {
      ""items"": [
        902232,
        902233,
        902234,
        902235,
        902236
      ],
      ""removed"": []
    },
    ""976501"": {
      ""items"": [
        902240,
        902241
      ],
      ""removed"": []
    },
    ""976502"": {
      ""items"": [
        902242,
        902243,
        902244,
        902245
      ],
      ""removed"": []
    },
    ""976503"": {
      ""items"": [
        902237,
        902238,
        902239,
        606175010
      ],
      ""removed"": []
    },
    ""902263"": {
      ""items"": [
        902246,
        902247,
        902248,
        902249,
        902250,
        902254,
        902255,
        902256,
        902257,
        902258,
        902259,
        902251,
        902252,
        902253,
        606175010
      ],
      ""removed"": []
    },
    ""1222333002"": {
      ""items"": [
        1222333001
      ],
      ""removed"": []
    },
    ""2100002000"": {
      ""items"": [
        101257,
        1337500210,
        1337500211,
        1337500212,
        1337500213,
        1337500214,
        1337500221,
        1337500222,
        1337500224,
        1337500215,
        1337500216,
        1337500217,
        1337500218,
        1337500219,
        1337500220,
        1337500223
      ],
      ""removed"": []
    },
    ""2100001000"": {
      ""items"": [
        1010372,
        101037222,
        1337500210,
        1337500211,
        1337500212,
        1337500213,
        1337500214,
        1337500221,
        1337500222,
        1337500224,
        1337500215,
        1337500216,
        1337500217,
        1337500218,
        1337500219,
        1337500220,
        1337500223
      ],
      ""removed"": []
    },
    ""2100002004"": {
      ""items"": [
        101275,
        1337500011,
        1337500012,
        850069,
        7300
      ],
      ""removed"": []
    },
    ""2100001004"": {
      ""items"": [
        1010463,
        1337500011,
        1337500012,
        850069
      ],
      ""removed"": []
    },
    ""2100002002"": {
      ""items"": [
        101274,
        1337500001,
        1337500002,
        7301
      ],
      ""removed"": []
    },
    ""2100001002"": {
      ""items"": [
        1010462,
        1337500001,
        1337500002,
        2000150010
      ],
      ""removed"": []
    },
    ""2100002008"": {
      ""items"": [
        101276,
        1337500018,
        1337500019,
        7303
      ],
      ""removed"": []
    },
    ""2100001008"": {
      ""items"": [
        1010464,
        1337500018,
        1337500019,
        2000150036
      ],
      ""removed"": []
    },
    ""2100002022"": {
      ""items"": [
        101258,
        603336111
      ],
      ""removed"": []
    },
    ""2100001022"": {
      ""items"": [
        2100115121,
        1010359,
        850082,
        850106,
        1453238000
      ],
      ""removed"": []
    },
    ""2100001010"": {
      ""items"": [
        1010365,
        2000150004,
        600038110,
        850099
      ],
      ""removed"": []
    },
    ""2100001006"": {
      ""items"": [
        1010360,
        1010362,
        2000150000,
        601126110
      ],
      ""removed"": []
    },
    ""2100001014"": {
      ""items"": [
        1010371,
        902296,
        902297,
        901004,
        600135110
      ],
      ""removed"": []
    },
    ""2100002026"": {
      ""items"": [
        101284,
        101285,
        3761,
        3661
      ],
      ""removed"": []
    },
    ""2100001026"": {
      ""items"": [
        1010516,
        100415,
        100586,
        1500010051,
        1500010021,
        1500010024,
        2000150041,
        850026,
        3741,
        1500010817,
        538,
        606175010,
        600037110,
        930075,
        850078,
        850057,
        850087,
        850099
      ],
      ""removed"": []
    },
    ""2100001021"": {
      ""items"": [
        135100,
        135099,
        134629
      ],
      ""removed"": []
    },
    ""2100002030"": {
      ""items"": [
        101259,
        102037222
      ],
      ""removed"": []
    },
    ""2100001030"": {
      ""items"": [
        1010361,
        102037222,
        850093,
        1010470,
        1010471,
        110935,
        850072,
        850128,
        1010364,
        1686463845,
        403,
        1010489,
        132765
      ],
      ""removed"": []
    },
    ""2100002042"": {
      ""items"": [
        101339,
        2077061001,
        101278,
        101286,
        101277,
        101573,
        101344,
        8855081,
        102284,
        901007,
        8855907,
        8855906
      ],
      ""removed"": []
    },
    ""2100002038"": {
      ""items"": [
        77100021,
        77100022,
        742,
        632,
        4797,
        77100023
      ],
      ""removed"": []
    },
    ""2100001042"": {
      ""items"": [
        100586,
        1010520,
        1010521,
        1010525,
        100519,
        100783,
        101642,
        100429,
        1222333001
      ],
      ""removed"": []
    },
    ""2100001038"": {
      ""items"": [
        1010522,
        1010523,
        736,
        625,
        3700,
        1010524
      ],
      ""removed"": []
    },
    ""2100001034"": {
      ""items"": [
        132780,
        132782,
        132781,
        601445,
        1500010500
      ],
      ""removed"": []
    }
  }
}"
9cqCWtU6,Untitled,igobymewhenthe,Java,Tuesday 5th of December 2023 04:40:38 PM CDT,"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class MetalSlugFontInstaller {

    public static void main(String[] args) {
        try {
            System.out.println(""This script will download the required dependencies to use MetalSlugFontReborn."");

            // Check if the user wants to proceed with installation
            System.out.print(""Proceed with installation? [Y/n]: "");
            char proceed = (char) System.in.read();
            if (proceed != 'Y' && proceed != 'y') {
                System.out.println(""Installation aborted."");
                return;
            }

            // Check if the user wants to use the GUI version
            System.out.print(""Do you want to use the GUI version? [Y/n]: "");
            char useGui = (char) System.in.read();

            // Get the package manager
            System.out.print(""Enter your package manager (apt/dnf/pacman/zypper): "");
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            String packageManager = reader.readLine();

            // Update the system
            String updateCommand = getUpdateCommand(packageManager);
            executeCommand(updateCommand);

            // Install necessary libraries for GUI support (if requested and not already installed)
            if (useGui == 'Y' || useGui == 'y') {
                if (!areGuiLibrariesInstalled(packageManager)) {
                    installGuiLibraries(packageManager);
                } else {
                    System.out.println(""GUI libraries are already installed."");
                }
            }

            // Install Python 3, pip, and venv (if not already installed)
            if (!isPythonInstalled()) {
                String installPythonCommand = getInstallPythonCommand(packageManager);
                executeCommand(installPythonCommand);
            } else {
                System.out.println(""Python 3, pip, and venv are already installed."");
            }

            // Create and activate virtual environment
            executeCommand(""python3 -m venv metalslugfontreborn"");
            executeCommand(""source metalslugfontreborn/bin/activate"");

            // Install Python packages from requirements.txt
            executeCommand(""pip install -r requirements.txt"");

            // Deactivate virtual environment
            executeCommand(""deactivate"");

            // Print final instructions
            System.out.println(""|-----------------------------------------|"");
            System.out.println(""| Now, please run the following command:  |"");
            System.out.println(""|             bash Run.sh                 |"");
            System.out.println(""|-----------------------------------------|"");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static boolean areGuiLibrariesInstalled(String packageManager) {
        try {
            Process process = new ProcessBuilder(""which"", getGuiLibraryCommand(packageManager)).start();
            int exitCode = process.waitFor();
            return exitCode == 0;
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
            return false;
        }
    }

    private static String getGuiLibraryCommand(String packageManager) {
        switch (packageManager) {
            case ""apt"":
                return ""libxcb-cursor.so.0"";
            case ""dnf"":
                return ""xcb-util-cursor"";
            case ""pacman"":
                return ""libxcb-cursor.so.0"";
            case ""zypper"":
                return ""libxcb-cursor.so.0"";
            default:
                throw new IllegalArgumentException(""Unsupported package manager: "" + packageManager);
        }
    }

    private static boolean isPythonInstalled() {
        try {
            Process process = new ProcessBuilder(""which"", ""python3"").start();
            int exitCode = process.waitFor();
            return exitCode == 0;
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
            return false;
        }
    }

    private static String getUpdateCommand(String packageManager) {
        switch (packageManager) {
            case ""apt"":
                return ""sudo apt update -y"";
            case ""dnf"":
                return ""sudo dnf update -y"";
            case ""pacman"":
                return ""sudo pacman -Syu --noconfirm"";
            case ""zypper"":
                return ""sudo zypper update -y"";
            default:
                throw new IllegalArgumentException(""Unsupported package manager: "" + packageManager);
        }
    }

    private static String getInstallPythonCommand(String packageManager) {
        switch (packageManager) {
            case ""apt"":
                return ""sudo apt install python3 python3-pip python3-venv -y"";
            case ""dnf"":
                return ""sudo dnf install python3 python3-pip python3-venv -y"";
            case ""pacman"":
                return ""sudo pacman -S python python-pip python-virtualenv --noconfirm"";
            case ""zypper"":
                return ""sudo zypper install -y python3 python3-pip python3-virtualenv"";
            default:
                throw new IllegalArgumentException(""Unsupported package manager: "" + packageManager);
        }
    }

    private static void installGuiLibraries(String packageManager) {
        String guiLibraryCommand;
        switch (packageManager) {
            case ""apt"":
                guiLibraryCommand = ""sudo apt install libxcb-cursor0 -y"";
                break;
            case ""dnf"":
                guiLibraryCommand = ""sudo dnf install xcb-util-cursor -y"";
                break;
            case ""pacman"":
                guiLibraryCommand = ""sudo pacman -S xcb-util-cursor --noconfirm"";
                break;
            case ""zypper"":
                guiLibraryCommand = ""sudo zypper install -y libxcb-cursor0"";
                break;
            default:
                throw new IllegalArgumentException(""Unsupported package manager: "" + packageManager);
        }
        executeCommand(guiLibraryCommand);
    }

    private static void executeCommand(String command) {
        try {
            Process process = new ProcessBuilder(command.split("" "")).start();
            int exitCode = process.waitFor();
            if (exitCode != 0) {
                System.out.println(""Error executing command: "" + command);
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}"
YfVH8XJ1,lz-string,dhiforester,PHP,Tuesday 5th of December 2023 04:28:48 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
    <head>
        <meta charset=""UTF-8"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
        <title>Enkripsi-Dekripsi LZ String</title>
        <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"" crossorigin=""anonymous"">
        <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"" crossorigin=""anonymous""></script>
        <link rel=""canonical"" href=""https://getbootstrap.com/docs/5.3/examples/navbar-fixed/"">
        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/@docsearch/css@3"">
        <link href=""css/style.css"" rel=""stylesheet"">
    </head>
    <body class=""bg-secondary"">
        <nav class=""navbar navbar-expand-md navbar-dark fixed-top bg-dark"">
            <div class=""container-fluid"">
                <a class=""navbar-brand"" href="""">Enkripsi/Dekripsi LZ String</a>
                <button class=""navbar-toggler"" type=""button"" data-bs-toggle=""collapse"" data-bs-target=""#navbarCollapse"" aria-controls=""navbarCollapse"" aria-expanded=""false"" aria-label=""Toggle navigation"">
                    <span class=""navbar-toggler-icon""></span>
                </button>
            </div>
        </nav>
        <main class=""container mt-5"">
            <div class=""p-5 rounded"">
                <div class=""row mb-3"">
                    <div class=""col-md-6 mb-3"">
                        <div class=""card"">
                            <div class=""card-header"">
                                <b>Enkripsi Dengan LZ String</b>
                            </div>
                            <div class=""card-body"">
                                <div class=""row mb-3"">
                                    <div class=""col-3"">
                                        <label for=""string"">String</label>
                                    </div>
                                    <div class=""col-md-9"">
                                        <textarea name=""string"" id=""string"" class=""form-control""></textarea>
                                    </div>
                                </div>
                                <div class=""row mb-3"">
                                    <div class=""col-3"">
                                        <label for=""hasil_enkripsi"">Hasil Enkripsi</label>
                                    </div>
                                    <div class=""col-md-9"">
                                        <textarea readonly name=""hasil_enkripsi"" id=""hasil_enkripsi"" class=""form-control""></textarea>
                                    </div>
                                </div>
                            </div>
                            <div class=""card-footer"">
                                <button type=""button"" class=""btn btn-md btn-primary"" id=""MulaiEnkripsi"">
                                    Enkripsi
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class=""col-md-6"">
                        <div class=""card"">
                            <div class=""card-header"">
                                <b>Deskripsi Dengan LZ String</b>
                            </div>
                            <div class=""card-body"">
                                <div class=""row mb-3"">
                                    <div class=""col-3"">
                                        <label for=""string2"">String</label>
                                    </div>
                                    <div class=""col-md-9"">
                                        <textarea name=""string2"" id=""string2"" class=""form-control""></textarea>
                                    </div>
                                </div>
                                <div class=""row mb-3"">
                                    <div class=""col-3"">
                                        <label for=""hasil_dekripsi"">Hasil Dekripsi</label>
                                    </div>
                                    <div class=""col-md-9"">
                                        <textarea readonly name=""hasil_dekripsi"" id=""hasil_dekripsi"" class=""form-control""></textarea>
                                    </div>
                                </div>
                            </div>
                            <div class=""card-footer"">
                                <button type=""button"" class=""btn btn-md btn-primary"" id=""MulaiDeskripsi"">
                                    Deskripsi
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        <script type=""text/javascript"" src=""vendor/jquery/dist/jquery.min.js""></script>
        <script>
            //Enkripsi
            $('#MulaiEnkripsi').click(function(){
                var string=$('#string').val();
                $('#hasil_enkripsi').val('Loading...');
                $.ajax({
                    type 	    : 'POST',
                    url 	    : 'ProsesEnkripsi.php',
                    data        : {string: string},
                    success     : function(data){
                        $('#hasil_enkripsi').val(data);
                    }
                });
            });
            //Deskripsi
            $('#MulaiDeskripsi').click(function(){
                var string=$('#string2').val();
                $('#hasil_dekripsi').val('Loading...');
                $.ajax({
                    type 	    : 'POST',
                    url 	    : 'ProsesDekripsi.php',
                    data        : {string: string},
                    success     : function(data){
                        $('#hasil_dekripsi').val(data);
                    }
                });
            });
        </script>
    </body>
</html>"
scxHtdyj,Untitled,a_chn,C++,Tuesday 5th of December 2023 04:18:17 PM CDT,"#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

#define int long long

int pref[100001], pref2[100001];
vector<int> c(100000);
vector<pair<int, int> > shops(100000);
vector<int> farms(100000);
int shop_ind;
int mon;

 
bool comp(pair<int, int> p, pair<int, int> q) {
    return p.second > q.second;
}
 
int rent(int i) {
    return pref[i];
}

void setIO(string s) {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	freopen((s + "".in"").c_str(), ""r"", stdin);
	freopen((s + "".out"").c_str(), ""w"", stdout);
}
 
int produce(int cow) {
    if(cow == 0) return 0;
    int prefsum = c[cow - 1];
    //for (int cow = 0; cow < 100000; cow++) {
    while (shops[shop_ind].first > 0) {
        int sell = min(prefsum, shops[shop_ind].first);
        prefsum -= sell;
        shops[shop_ind].first -= sell;
        mon += sell * shops[shop_ind].second;
        if (shops[shop_ind].first == 0) {
            shop_ind++;
        }
        if (prefsum == 0) {
            break;
        }
    }
    //}
    return mon;
}
signed main() {
    setIO(""rental"");
    int N, M, R;
    cin >> N >> M >> R; //cows, stores, neighbors
    for (int i = 0; i < N; i++) {
        cin >> c[i];
    }
    sort(c.rbegin(), c.rend());
    for(int i = 1; i <= N; ++i) {
        pref2[i] = pref2[i - 1] + c[i - 1];
    }
    for (int i = 0; i < M; i++) {
        cin >> shops[i].first >> shops[i].second;
    }
    sort(shops.begin(), shops.end(), comp);
    for (int i = 0; i < R; i++) {
        cin >> farms[i];
    }
    sort(farms.rbegin(), farms.rend());  
    for(int i = 1; i <= R; ++i) {
        pref[i] = pref[i - 1] + farms[i - 1];
    }
    shop_ind = 0;
    mon = 0;
    int ans = 0;
    for (int i = 0; i <= N; i++) {
        int x = produce(i);
        ans = max(x + rent(min(R, N - i)), ans);
    }
    cout << ans << endl;
}"
FWLx6Vmq,Untitled,Lillo_Barilotto22,ARM,Tuesday 5th of December 2023 04:10:38 PM CDT,"				AREA 	WriteData, DATA, READWRITE, align=4
Calories_tot			SPACE 28
Calories_food_ordered	SPACE 28
Calories_sport_ordered	SPACE 28
	
Calories_food_orderedWITHID	SPACE	56
Calories_sport_orderedWITHID SPACE 	56

                AREA    |.text|, CODE, READONLY, align=3

; Reset Handler

Reset_Handler   PROC
                EXPORT  Reset_Handler             [WEAK]                                            
                LDR     R0, =Reset_Handler

				; your code here		
i 	RN 1
j	RN 2

tmp_cal		RN 3
tmp_day		RN 4
day			RN 5

count_swap	RN 6
cal_addr	RN 7
cal_ord		RN 8


tmp_cal1	RN 9
tmp_day1	RN 10
	
				LDRB day, 	Num_days
				MOV i, #0
				LDR cal_addr,	=Calories_food
				LDR cal_ord,	=Calories_food_orderedWITHID
cpy_food		
				LDRD tmp_day, tmp_cal, [cal_addr]
				STRD tmp_day, tmp_cal, [cal_ord]
				
				ADD cal_addr, cal_addr, #8
				ADD cal_ord, cal_ord, #8
				ADD i, i, #1
				CMP i, day
				BNE cpy_food

				MOV i, #0
				LDRB day,	Num_days_sport
				LDR cal_addr,	=Calories_sport
				LDR cal_ord,	=Calories_sport_orderedWITHID
cpy_sport
				LDRD tmp_day, tmp_cal, [cal_addr]
				STRD tmp_day, tmp_cal, [cal_ord]
				
				ADD cal_addr, cal_addr, #8
				ADD cal_ord, cal_ord, #8
				ADD i, i, #1
				CMP i, day
				BNE cpy_sport

				LDR cal_ord,	=Calories_food_orderedWITHID
				LDRB day, 	Num_days
bsort_next                     
    MOV     i,#0               
    MOV     count_swap,#0               
bsort_loop  
    ADD     j,i,#1            
    CMP     j,day               
    BGE     bsort_check         
    
	LDRD    tmp_day, tmp_cal, [cal_ord,i,LSL #3]  
    LDRD    tmp_day1,tmp_cal1,[cal_ord,j,LSL #3]   
    
	CMP     tmp_cal,tmp_cal1              
    STRDLT   tmp_day,tmp_cal,[cal_ord,j,LSL #3]   
    STRDLT   tmp_day1,tmp_cal1,[cal_ord,i,LSL #3]   
    ADDLT   count_swap,count_swap,#1          
    MOV     i,j              
    B       bsort_loop         
bsort_check                    
    CMP     count_swap,#0               
    SUBGT   day,day,#1           
    BGT     bsort_next  
	
	
                BX      R0
                ENDP
					


Days			DCB 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07

Calories_food 	DCD 0x06, 1300, 0x03, 1700, 0x02, 1200, 0x04, 1900
				DCD 0x05, 1110, 0x01, 1670, 0x07, 1000

Calories_sport	DCD 0x02, 500, 0x05, 800, 0x06, 400

Num_days	 	DCB 7
Num_days_sport	DCB 3
 
; Dummy Exception Handlers (infinite loops which can be modified)"
PRWCtfFd,motion monitor,SirRedstone,Lua,Tuesday 5th of December 2023 04:06:23 PM CDT,"-- Script Lua pour recevoir et afficher les dernières valeurs de ""x"" et ""z"" envoyées par les turtles

-- Configuration
local sideModem = ""back"" -- Changez ceci selon le côté où le modem sans fil est connecté
local channel = 1 -- Le canal sur lequel les messages sont reçus

-- Initialisation du modem
local modem = peripheral.wrap(sideModem)
if not modem then
    error(""Aucun modem trouvé sur le côté spécifié : "" .. sideModem)
end
modem.open(channel)

-- Fonction pour recevoir et traiter les messages
local function receiveMessage()
    while true do
        local event, side, senderChannel, replyChannel, message, senderDistance = os.pullEvent(""modem_message"")
        if senderChannel == channel then
            -- Vérifie si le message est une chaîne et commence par ""x"" ou ""z""
            if type(message) == ""string"" and (message:sub(1, 1) == ""x"" or message:sub(1, 1) == ""z"") then
                local messageType = message:sub(1, 1)
                local value = message:sub(2)
                print(""Dernière valeur reçue pour "" .. messageType .. "": "" .. value)
            end
        end
    end
end

-- Démarrer la réception des messages
print(""En attente de messages..."")
receiveMessage()
"
QVBGZKUQ,Untitled,a_chn,C++,Tuesday 5th of December 2023 03:56:33 PM CDT,"#include <iostream>
#include <algorithm>
#include <vector>
 
using namespace std;
 
int pref[100001], pref2[100001];
vector<int> c(100000);
vector<pair<int, int> > shops(100000);
vector<int> farms(100000);
 
bool comp(pair<int, int> p, pair<int, int> q) {
    return p.second > q.second;
}
 
int rent(int i) {
    return pref[i];
}

void setIO(string s) {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	freopen((s + "".in"").c_str(), ""r"", stdin);
	freopen((s + "".out"").c_str(), ""w"", stdout);
}
 
int produce(int cow) {
    vector<pair<int, int> > shops2(100000);
    for(int i = 0; i < 100000; ++i) {
        shops2[i] = shops[i];
    }
    int prefsum = pref2[cow];
    int mon = 0;
    int shop_ind = 0;
    //for (int cow = 0; cow < 100000; cow++) {
    while (shops2[shop_ind].first > 0) {
        int sell = min(prefsum, shops2[shop_ind].first);
        prefsum -= sell;
        shops2[shop_ind].first -= sell;
        mon += sell * shops2[shop_ind].second;
        if (shops2[shop_ind].first == 0) {
            shop_ind++;
        }
        if (prefsum == 0) {
            break;
        }
    }
    //}
    return mon;
}
int main() {
    setIO(""rental"");
    int N, M, R;
    cin >> N >> M >> R; //cows, stores, neighbors
    for (int i = 0; i < N; i++) {
        cin >> c[i];
    }
    sort(c.rbegin(), c.rend());
    for(int i = 1; i <= N; ++i) {
        pref2[i] = pref2[i - 1] + c[i - 1];
    }
    for (int i = 0; i < M; i++) {
        cin >> shops[i].first >> shops[i].second;
    }
    sort(shops.begin(), shops.end(), comp);
    for (int i = 0; i < R; i++) {
        cin >> farms[i];
    }
    sort(farms.rbegin(), farms.rend());  
    for(int i = 1; i <= R; ++i) {
        pref[i] = pref[i - 1] + farms[i - 1];
    }
    int ans = 0;
    for (int i = 0; i <= min(N, R); i++) {
        ans = max(produce(N - i) + rent(i), ans);
    }
    cout << ans << endl;
}"
nKx8H4w7,Untitled,mfedorov,C#,Tuesday 5th of December 2023 03:55:22 PM CDT,"using UnityEngine;
using UnityEngine.Events;
using System.Collections.Generic;
using System.Buffers.Text;

public class Parabola : MonoBehaviour
{
    public Transform targetPos; // Трансформ куда летим
    public float speed = 10; // Скорость перемещение пули
    public float arcHeight = 1; // Высота арки полета
    Vector3 startPos, nextPos;

    void Start()
    {
        startPos = transform.position; // Начальная позиция пули
    }

    void Update()
    {
        float distX = targetPos.position.x - startPos.x; // Растояние до цели по X

        // Считаем траекторию полета
        float nextX = Mathf.MoveTowards(transform.position.x, targetPos.position.x, speed * Time.deltaTime);
        float nextY = Mathf.Lerp(startPos.y, targetPos.position.y, (nextX - startPos.x) / distX);
        float nextZ = Mathf.Lerp(startPos.z, targetPos.position.z, (nextX - startPos.x) / distX);
        float arc = arcHeight * (nextX - startPos.x) * (nextX - targetPos.position.x) / (-0.25f * distX * distX);
        nextPos = new Vector3(nextX, nextY + arc, nextZ);

        transform.position = nextPos; // Меняем позицию пули

        // Если достигли цели
        if (nextPos == targetPos.position) DestroySelf();
    }

    void DestroySelf()
    {
        Destroy(gameObject);
    }
}
"
bDdfbk5y,Untitled,Dorex,Linden Scripting,Tuesday 5th of December 2023 03:50:29 PM CDT,"//
//
list linkList;
//
turn_on()
{
    integer count = llGetListLength(linkList);
    while (count--){
        llSetLinkPrimitiveParamsFast(llList2Key(linkList, count), [
                PRIM_TEXTURE, 1, ""UUID"", <1.0, 0.5, 0.0>, <0.0, -0.25, 0.0>, 0.0, 
                PRIM_FULLBRIGHT, 1, TRUE]);
                llSetLinkPrimitiveParamsFast(LINK_ALL_CHILDREN,[
                PRIM_POINT_LIGHT,TRUE,<1,.759,.383>,1,5,.75,
                PRIM_TEXTURE,0,TEXTURE_BRASS_LIGHT,<1,1,0>,<0,0,0>,0,
                PRIM_TEXTURE,1,TEXTURE_GLASS_LIGHT,<1,1,0>,<0,0,0>,0,
                PRIM_TEXTURE,2,TEXTURE_LAMP_LIGHT,<1,1,0>,<0,0,0>,0,
                PRIM_FULLBRIGHT,1,TRUE,
                PRIM_FULLBRIGHT,2,TRUE,
                PRIM_GLOW,1,.05,
                PRIM_PROJECTOR, ""UUID"", 0.8, 0.0, 0.0
        ]);  
    }
}

default
{
    state_entry()
    {
        linkList = [];
        integer links = llGetNumberOfPrims();
        while (links--){
           if (llSubStringIndex(llGetLinkName(links), ""light"") > -1){
                linkList += (list)links;
            }
        }
    }
}

      
 /////////////////////////////////////////////////////////////////////////
 //
 // Automatic lights on/off with region night/day cycle with fixed override
 //
 // Based on code by Aaack Straaf (Second Life) 09/12/08
 //
 // Modified by Rime Wirsing (InWorldz) 6/11/10
 //
 // Added parameters for all options for easier modification
 // Added comments to help explain what does what
 // Added stay on, stay off, automatic modes selected via menu dialog (owner only)
 // Pulled light on/off code into functions
 //
 /////////////////////////////////////////////////////////////////////////
 
key TEXTURE_BRASS_DARK=""UUID"";
key TEXTURE_BRASS_LIGHT=""UUID"";
key TEXTURE_GLASS_DARK=""UUID"";
key TEXTURE_GLASS_LIGHT=""UUID"";
key TEXTURE_LAMP_DARK=""UUID"";
key TEXTURE_LAMP_LIGHT=""UUID"";
 
//integer lightsLink= 999;
 
 // Menu dialog options
list ActionChoices = [""Stay Off"", ""Stay On"", ""Automatic""];
string msg = ""\nLight controller \nPlease select an option:"";
 
key TouchedByKey;           // Key of avatar triggering touch event
integer channel_dialog;     // Dialog comms channel
integer listen_id;          // Dialog listen ID
 
 // Day night detection parameters
vector sun;             // Store the suns position
integer check_sun = 60; // How often (in seconds) to check sun position
                        // (60 seconds is plenty short enough)
 

list linkList;

/////////////////////////////////////////////////////////////////////////
 
// Function to turn light on
turn_on()
{
    integer count = llGetListLength(linkList);
    while (count--){
        llSetLinkPrimitiveParamsFast(llList2Key(linkList, count), [
                PRIM_TEXTURE, 1, ""UUID"", <1.0, 0.5, 0.0>, <0.0, -0.25, 0.0>, 0.0, 
                PRIM_FULLBRIGHT, 1, TRUE]);
                llSetLinkPrimitiveParamsFast(LINK_ALL_CHILDREN,[
                PRIM_POINT_LIGHT,TRUE,<1,.759,.383>,1,5,.75,
                PRIM_TEXTURE,0,TEXTURE_BRASS_LIGHT,<1,1,0>,<0,0,0>,0,
                PRIM_TEXTURE,1,TEXTURE_GLASS_LIGHT,<1,1,0>,<0,0,0>,0,
                PRIM_TEXTURE,2,TEXTURE_LAMP_LIGHT,<1,1,0>,<0,0,0>,0,
                PRIM_FULLBRIGHT,1,TRUE,
                PRIM_FULLBRIGHT,2,TRUE,
                PRIM_GLOW,1,.05,
                PRIM_PROJECTOR, ""UUID"", 0.8, 0.0, 0.0
        ]);  
    }
}
 
 /////////////////////////////////////////////////////////////////////////
 
 // Function to turn light off
turn_off()
{
    integer count = llGetListLength(linkList);
    while (count--){
        llSetLinkPrimitiveParamsFast(llList2Key(linkList, count), [
            PRIM_TEXTURE, 1, ""UUID"", <1.0, 0.5, 0.0>, <0.0, 0.25, 0.0>, 0.0, 
            PRIM_FULLBRIGHT, 1, FALSE]);
            llSetLinkPrimitiveParamsFast(LINK_ALL_CHILDREN,[
            PRIM_TEXTURE,0,TEXTURE_BRASS_DARK,<1,1,0>,<0,0,0>,0,
            PRIM_TEXTURE,1,TEXTURE_GLASS_DARK,<1,1,0>,<0,0,0>,0,
            PRIM_TEXTURE,2,TEXTURE_LAMP_DARK,<1,1,0>,<0,0,0>,0,
            PRIM_TEXTURE,3,TEXTURE_BRASS_DARK,<1,1,0>,<0,0,0>,0,
            PRIM_TEXTURE,4,TEXTURE_GLASS_DARK,<1,1,0>,<0,0,0>,0,
            PRIM_TEXTURE,5,TEXTURE_LAMP_DARK,<1,1,0>,<0,0,0>,0,
            PRIM_FULLBRIGHT,1,FALSE,
            PRIM_FULLBRIGHT,2,FALSE,
            PRIM_GLOW,1,FALSE,
//            PRIM_COLOR,ALL_SIDES,<1,1,1>,0,
            PRIM_POINT_LIGHT, FALSE, <1,1,1>, 1.0, 5.0, 2.0
        ]); 
    }
}
 
 /////////////////////////////////////////////////////////////////////////
 
 // The default state
default
{
    state_entry()
    {
        // Generate a unique comms channel for owner control dialog based on object key
//    ScanLinkNames();
        channel_dialog = ( -1 * (integer)(""0x""+llGetSubString((string)llGetKey(),-5,-1)) );
 
        // Default to stay off mode so timer is off
        llSetTimerEvent(0);

        linkList = [];
        integer links = llGetNumberOfPrims();
        while (links--){
           if (llSubStringIndex(llGetLinkName(links), ""light"") > -1){
                linkList += (list)links;
            }
        }

    }
 
 /////////////////////////////////////////////////////////////////////////
 
// Look for owner touch to activate menu
touch_start(integer num_detected)
{
        TouchedByKey = llDetectedKey(0);
        if ( TouchedByKey == llGetOwner() )
        {
            // Generate and display menu dialog
            llDialog(TouchedByKey, msg, ActionChoices, channel_dialog);

            // Open a dialog listener specific to the owner
            listen_id = llListen( channel_dialog, """", TouchedByKey, """");
        }
        else
        {
        }
}
 
 /////////////////////////////////////////////////////////////////////////

// Detect and act on owners selection from menu dialog
listen(integer channel, string name, key id, string choice)
{
    if (choice == ""Stay Off"") {
        // Turn off the timer if we switch from automatic
        llSetTimerEvent(0);

        // Call the function to turn off the light
        turn_off();

        // Kill the listener
        llListenRemove(listen_id);
    
    } else if (choice == ""Stay On"") {
        // Turn off the timer if we switch from automatic
        llSetTimerEvent(0);

        // Call the function to turn off the light
        turn_on();

        // Kill the listener
        llListenRemove(listen_id);
    
    } else if (choice == ""Automatic"") {
        // Turn on the automatic timer
        llSetTimerEvent(check_sun);

        // Light will switch state at next timer event

        // Kill the listener
        llListenRemove(listen_id);
    }

}
 
/////////////////////////////////////////////////////////////////////////
 
// Timer for automatic mode
timer()
{
    sun = llGetSunDirection();
    if (sun.z <= 0.12){ // EEP Sun
        turn_on();
    
    } else {
        turn_off();
    }
}
 
 /////////////////////////////////////////////////////////////////////////
}
"
iQCLCiVa,CompileTime.cpp,ripred,C++,Tuesday 5th of December 2023 03:48:23 PM CDT,"/*
 * CompileTime.cpp
 *
 * implementation file for the CompileTime library
 *
 * version 1.0 written June 2023 - Trent M. Wyatt
 *
 */
#include ""CompileTime.h""

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// Function to check if a year is a leap year
static bool isLeapYear(int year) {
    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
        return true;  // Leap year
    } else {
        return false; // Not a leap year
    }
}

// Array of days in each month
static int16_t daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

#if !defined(ARDUINO) && not ARDUINO_ARCH_RENESAS

#include <stdio.h>
#include <sys/time.h>

uint32_t micros() {
    unsigned long long start_time_us;
    unsigned long long current_time_us;
    struct timeval tv;

    gettimeofday(&tv, NULL);
    start_time_us = (unsigned long long)(tv.tv_sec) * 1000000 + (unsigned long long)(tv.tv_usec);

    gettimeofday(&tv, NULL);
    current_time_us = (unsigned long long)(tv.tv_sec) * 1000000 + (unsigned long long)(tv.tv_usec);
    unsigned long long microseconds_since_boot = current_time_us - start_time_us;

    return microseconds_since_boot;

} // micros()

uint32_t millis() {
    return micros() / 1000UL;

} // millis()

void noInterrupts() { }
void interrupts() { }

#endif

enum MagicNumbers : uint32_t {
    secsPerMin    =   60UL,
    minsPerHour   =   60UL,
    secsPerHour   = 3600UL,

    // The number of microseconds to calibrate the internal PLL
    // generated clock source to (if in use and adjusted):
    uSecAdjust    = 1000000,
};

static uint16_t const monthhash[12] = {
// ascii added together
    281,    // J+a+n = 74+97+110
    269,    // F+e+b = 70+101+98
    288,    // M+a+r = 77+97+114
    291,    // A+p+r = 65+112+114
    295,    // M+a+y = 77+97+121
    301,    // J+u+n = 74+117+110
    299,    // J+u+l = 74+117+108
    285,    // A+u+g = 65+117+103
    296,    // S+e+p = 83+101+112
    294,    // O+c+t = 79+99+116
    307,    // N+o+v = 78+111+118
    268,    // D+e+c = 68+101+99
};

namespace CompileTime {

// Global values used at runtime
uint32_t startTime;
volatile int16_t hour;
volatile int16_t minute;
volatile int16_t second;
volatile int16_t year;
volatile int16_t month;
volatile int16_t day;

void setCompileTime(char const * const tmstr, char const * const dtstr, uint32_t const upload) {
    // convert the digits from the ascii __TIME__ string into binary values:
    char tm[9] {0};
    strcpy(tm, tmstr);
    uint16_t curHour   = ((uint32_t)(tm[0] - '0') * 10UL) + (uint32_t)(tm[1] - '0');
    uint16_t curMinute = ((uint32_t)(tm[3] - '0') * 10UL) + (uint32_t)(tm[4] - '0');
    uint16_t curSecond = ((uint32_t)(tm[6] - '0') * 10UL) + (uint32_t)(tm[7] - '0');

    char dt[12] {0};
    strcpy(dt, dtstr);
    uint16_t curYear = atoi(dt + 7);
    uint16_t monthHash = dt[0] + dt[1] + dt[2];
    uint8_t curMonth = -1;
    for (uint8_t m = 0; m < 12; m++) {
        if (monthHash == monthhash[m]) {
            curMonth = m;
            break;
        }
    }
    char const * dayPtr = (' ' == dt[4]) ? dt + 4 : dt + 5;
    volatile uint8_t curDay = atoi(dayPtr);

    // Adjust for the time it took to upload: (change time as needed)
    curSecond += upload;
    while (curSecond >= secsPerMin) {
        curSecond -= secsPerMin;
        if (++curMinute >= minsPerHour) {
            curMinute -= minsPerHour;
            if (++curHour >= 24UL) {
                curHour -= 24UL;
            }
        }
    }

    hour   = curHour;
    minute = curMinute;
    second = curSecond;
    year   = curYear;
    month  = curMonth;
    day    = curDay;

    // Set the starting time in seconds since midnight:
    startTime = curHour * secsPerHour + curMinute * secsPerMin + curSecond;
}

static int16_t last_hour = hour;

void updateTime(uint32_t const now) {
    uint32_t now_secs = (now / uSecAdjust) + startTime;
    int16_t curHour = now_secs / secsPerHour;
    now_secs -= curHour * secsPerHour;
    int16_t curMinute = now_secs / secsPerMin;
    now_secs -= curMinute * secsPerMin;

    if (isLeapYear(year)) {
        daysInMonth[1] = 29; // February
    } else {
        daysInMonth[1] = 28; // February
    }

    if (last_hour != hour) {
        if (last_hour == 23 && hour == 0) {
            day++;
            if (daysInMonth[month] == day) {
                day = 1;
                month++;
                if (month == 13) {
                    month = 1;
                    year++;
                }
            }
        }
    }

    hour = curHour;
    minute = curMinute;
    second = now_secs;
}

} // namespace CompileTime"
Pj5CmH89,CompileTime.h,ripred,C++,Tuesday 5th of December 2023 03:47:24 PM CDT,"/*
 * CompileTime.h
 *
 * header file for the CompileTime library
 *
 * version 1.0 written June 2023 - Trent M. Wyatt
 *
 */
#ifndef COMPILETIME_H_INCL
#define COMPILETIME_H_INCL

#include <inttypes.h>

namespace CompileTime {

// Global values used at runtime
extern uint32_t startTime;
extern volatile int16_t second, hour, minute;
extern volatile int16_t year, month, day;

void setCompileTime(char const * const tmstr, char const * const dtstr, uint32_t const upload);
void updateTime(uint32_t const now);

}
#endif // COMPILETIME_H_INCL"
Xtv4F0nT,Calibrate.ino,ripred,C++,Tuesday 5th of December 2023 03:43:27 PM CDT,"/*
 * Calibrate.ino
 *
 * Arduino sketch for the CompileTime library
 * to calibrate the exact timing to compensate
 * for Arduino crystal speed differnces/
 *
 * version 1.0 written June 2023 - Trent M. Wyatt
 *
 */
#include <CompileTime.h>
#include <EEPROM.h>

using namespace CompileTime;

// names of months
static const char* months[12] {
    ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec""
};

// Array of days in each month
static int16_t daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

static int cal_hour, cal_min, cal_sec;
static int cal_year, cal_mon, cal_day;

int16_t const duration = 5;

// Function to set the number of days in February
static void setFebDays() {
    daysInMonth[1] = ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) ? 29 :28;
}

static void writeUInt32ToEEPROM(uint32_t value, int address) {
    for (int i = 0; i < 4; ++i) {
        EEPROM.write(address + i, (value >> (i * 8)) & 0xFF);
    }
}

static uint32_t readUInt32FromEEPROM(int address) {
    uint32_t value = 0;

    for (int i = 0; i < 4; ++i) {
        value |= (uint32_t)(EEPROM.read(address + i)) << (i * 8);
    }

    return value;
}

void setup() {
    // pass:
    //   - the __TIME__ macro
    //   - the __DATE__ macro
    //   - the number of seconds it takes to upload
    CompileTime::setCompileTime(__TIME__, __DATE__, 8);
    setFebDays();
    cal_hour = hour;
    cal_min  = minute;
    cal_sec  = second;
    cal_day  = day;
    cal_mon  = month;
    cal_year = year;

    cal_min += duration;

    while (cal_min >= 60) {
        cal_min -= 60;
        cal_hour++;
    }
    while (cal_hour >= 24) {
        cal_hour -= 24;
        cal_day++;
    }
    while (cal_day >= daysInMonth[month]) {
        cal_day = 1;
        cal_mon++;
    }
    while (cal_mon >= 12) {
        cal_mon = 0;
        cal_year++;
    }

    Serial.begin(115200);

    char buff[16];
    sprintf(buff, ""Starting time: %s, %d, %d - %2d:%02d:%02d"", months[month], day, year, hour, minute, second);
    Serial.println(buff);
    sprintf(buff, ""Stopping time: %s, %d, %d - %2d:%02d:%02d"", months[cal_mon], cal_day, cal_year, cal_hour, cal_min, cal_sec);
    Serial.println(buff);

    //    Serial.println(""\nHalted\nRemove when finished\n\n"");
    //    while (true) { }

    Serial.println(""Running calibration for 5 minutes..."");
}

void loop() {
    static int16_t lasth = hour, lastm = minute, lasts = second;
    //    static int16_t lasty = year, lastmo = month, lastd = day;
    updateTime(micros());

    if (cal_min != minute || cal_hour != hour || cal_sec != second ||
            cal_day != day || cal_mon != month || cal_year != year) {
        if (lasts != second || lastm != minute || lasth != hour
                /* || lasty !=   year || lastmo != month || lastd != day */) {
            lasts  = second;   lastm  = minute;   lasth  = hour;
            //            lasty  =   year;   lastmo = minute;   lastd  =  day;

            char buff[16];
            sprintf(buff, ""%s, %d, %d - %2d:%02d:%02d"", months[month], day, year, hour, minute, second);
            Serial.println(buff);
        }
    }
    else {
        Serial.println(""Enter the system time string in the monitor window as hours:minutes:seconds"");
        while (Serial.available() < 8) { }
        String timestr = Serial.readString();
        char const * ptr = timestr.c_str();
        uint16_t sysh = atoi(ptr);
        uint16_t sysm = atoi(ptr+3);
        uint16_t syss = atoi(ptr+6);
        uint32_t sys_time = (sysh * 60 * 60) + (sysm * 60) + syss;
        uint32_t local_time = (hour * 60 * 60) + (minute * 60) + second;
        float delta = (sys_time >= local_time) ? sys_time - local_time : local_time - sys_time;

		// **
		// ** here's where I got sleepy and it's not correct or complete yet **
		// **

        delta = (delta+1.0) * 1000000.0;
        Serial.print(""New microseconds per second = "");
        Serial.println(delta);

        uint32_t const eeprom_signature = 0xDEADBEEF;
        uint32_t const existing_signature = readUInt32FromEEPROM(0);
        if (existing_signature != eeprom_signature) {
            writeUInt32ToEEPROM(eeprom_signature, 0);
            Serial.println(""Signature written to EEPROM"");
        }
        else {
            Serial.println(""Signature in EEPROM is valid"");
        }

        uint32_t delta_long = uint32_t(delta);
        writeUInt32ToEEPROM(delta_long, sizeof(eeprom_signature));
        Serial.println(""New microseconds has been written to EEPROM!"");

        while (true) { }
    }
}"
1y5JmhkF,AoC 2023 day 5 part  2 (Perl),musifter,Perl,Tuesday 5th of December 2023 03:29:36 PM CDT,"#!/usr/bin/perl

use v5.32;
use warnings;

use List::Util      qw(max min);

# Paragraph mode, array of sections
$/ = '';
my @section = map {[split /\n/]} <>;

# Read in seed intervals
my @seeds;
while ($section[0][0] =~ m#(\d+) (\d+)#g) {
    push( @seeds, {src => $1, len => $2} );
}

# Read in sections, building complete maps
my %Map;        # hash of table -> array of struct (src, dst, len) hash

shift @section;
foreach my $sect (@section) {
    shift(@$sect) =~ m#-(\w+) map#;
    my $type = $1;

    foreach my $line (@$sect) {
        my ($dst, $src, $len) = split( ' ', $line );
        push( $Map{$type}->@*, {src => $src, dst => $dst, len => $len} );
    }

    $Map{$type}->@* = sort { $a->{src} <=> $b->{src} } $Map{$type}->@*;

    # Add missing identity maps:
    my $curr = 0;
    my @ident;
    foreach my $rule ($Map{$type}->@*) {
        if ($rule->{src} > $curr) {
            push( @ident, {src => $curr, dst => $curr, len => $rule->{src} - $curr} );
        }
        $curr = $rule->{src} + $rule->{len};
    }

    if ($curr < 2 ** 32) {
        push( @ident, {src => $curr, dst => $curr, len => 2 ** 32 - $curr} );
    }

    push( $Map{$type}->@*, @ident );
}

# Returns insection, len <= 0 if none
sub intersect {
    my ($a, $b) = @_;
    my $start = max( $a->{src}, $b->{src} );
    my $end   = min( $a->{src} + $a->{len}, $b->{src} + $b->{len} );

    return( {src => $start, len => $end - $start} );
}

my @order = qw(soil fertilizer water light temperature humidity location);

# Transform seeds through maps:
foreach my $type (@order) {
    my @next;
    foreach my $rule ($Map{$type}->@*) {
        foreach my $range (@seeds) {
            my $inter = &intersect( $range, $rule );
            if ($inter->{len} > 0) {
                push( @next, {src => $rule->{dst} + ($inter->{src} - $rule->{src}),
                              len => $inter->{len}} );
            }
        }
    }
    @seeds = @next;
}

say ""Part 2: "", min map { $_->{src} } @seeds;"
amyeiE2Y,"AoC 2023, day 5, part 1 (Perl)",musifter,Perl,Tuesday 5th of December 2023 03:27:39 PM CDT,"#!/usr/bin/perl

use v5.32;
use warnings;

use List::Util      qw(min);

# Paragraph mode, array of sections
$/ = '';
my @section = map {[split /\n/]} <>;

# Read in seeds from first line of first section
my @seeds = ($section[0][0] =~ m#(\d+)#g);

# Read in sections, building maps
my %Map;        # hash of table -> array of struct (src, dst, len) hash

shift @section;
foreach my $sect (@section) {
    shift(@$sect) =~ m#-(\w+) map#;
    my $type = $1;

    foreach my $line (@$sect) {
        my ($dst, $src, $len) = split( ' ', $line );
        push( $Map{$type}->@*, {src => $src, dst => $dst, len => $len} );
    }
}

my @order = qw(soil fertilizer water light temperature humidity location);

sub transform_seed {
    my $val = shift;

    foreach my $step (@order) {
        foreach my $range ($Map{$step}->@*) {
            if ($range->{src} <= $val <= $range->{src} + $range->{len}) {
                $val = $range->{dst} + ($val - $range->{src});
                last;
            }
        }
    }
    return ($val);
}

say ""Part 1: "", min map { &transform_seed($_) } @seeds;"
jWDwEX7M,Naval Warfare AA Script,nostopgmaming17,Lua,Tuesday 5th of December 2023 03:27:23 PM CDT,"-- NAVAL WARFARE AA SCRIPT --
-- Sirmeme please unban noam01 from your server plzplz --
-- Controls: get on a AA turret and watch it destroy the enemy team and make the whole server mad --

getgenv().AA_enabled = true

local plr = game.Players.LocalPlayer
local r = game.ReplicatedStorage.Event
local BULLETSPEED = 800
local SHOOTING = false
local shootThs = {}
local phrase = ""shoot""
local function aim(v3)
	r:FireServer(""aim"",{v3})
end
local function shoot(b)
	SHOOTING = b
    for i=1,#shootThs do
        coroutine.resume(shootThs[i])
    end
end
local function radar()
	if plr.Character == nil or not plr.Character:FindFirstChild(""HumanoidRootPart"") or not plr.Character:FindFirstChild(""Humanoid"") or plr.Character.Humanoid.Health <= 0 then return end
    local team = plr.Team.Name
    local P = plr.Character.HumanoidRootPart.Position

	local r,rv = 3000,nil

    for i,v in next, workspace:GetChildren() do
        if not v:FindFirstChild(""HitCode"") or not v:FindFirstChild(""Team"") or not v:FindFirstChild(""HP"") or not v:FindFirstChild(""Seat"") then continue end
        if v.HP.Value <= 0 then continue end
        if v.HitCode.Value ~= ""Plane"" then continue end
        if v.Team.Value == team then continue end
        local d = (P - v.Seat.Position).Magnitude
        if d < r then
            r = d
            rv = v
        end
    end
    
    return rv
end
local function isOnAA()
    if not plr.Character then return false end
    if not plr.Character:FindFirstChild(""Humanoid"") then return false end
    local seat = plr.Character.Humanoid.SeatPart
    if not seat then return false end
    local hc,gn = seat.Parent:FindFirstChild(""HitCode""),seat.Parent:FindFirstChild(""GunNum"")
    if hc ~= nil and gn ~= nil then
        if hc.Value == ""Ship"" and gn.Value ~= 0 then phrase = ""bomb"" return true end
    end

    if seat:FindFirstChild(""GunType"") ~= nil then
        if seat.GunType.Value == ""AA"" then phrase = ""shoot"" return true end
    end
    return false
end
local function getShootPos(p,v)
    local from = plr.Character.HumanoidRootPart.Position
    local d = (from - p).Magnitude
    local t = d / (BULLETSPEED - v.Magnitude)
    return p + (v*t) + v.Unit * 5
end
local function shootTh()
    while task.wait() do
        if not SHOOTING then
            r:FireServer(phrase,{false})
            coroutine.yield()
            if not SHOOTING then break end
        end
        r:FireServer(phrase,{true})
    end
end
for i = 1,3 do
    table.insert(shootThs,coroutine.create(shootTh))
end
--[[
local tgt = Drawing.new(""Circle"")
tgt.Visible = false
tgt.Transparency = 0.5
tgt.Color = Color3.new(0,1,0)
local to = Drawing.new(""Circle"")
to.Visible = false
to.Transparency = 0.5
to.Color = Color3.new(0,1,0)
]]--

local wasOnAA,hadTarget = false,false
while AA_enabled do
    task.wait()
    if isOnAA() then
        local target = radar()
        if not target then
            if hadTarget then
                --tgt.Visible = false to.Visible = false
                SHOOTING = false
            end
            hadTarget = false
            continue
        end
        if not hadTarget then
            hadTarget = true
            if not SHOOTING then
                shoot(true)
            end
            --tgt.Visible = true
            ---to.Visible = true
        end
        local p = target.Seat.Position
        local v = target.Seat.Velocity
        local pos = getShootPos(p,v)
        aim(pos)

        --tgt.Position = workspace.CurrentCamera:WorldToViewportPoint(p)
        --to.Position = workspace.CurrentCamera:WorldToViewportPoint(pos)
    elseif wasOnAA then
        SHOOTING = false
        --tgt.Visible = false
        --to.Visible = false
    end
end
--tgt:Remove()
--to:Remove()
shoot(false)"
QgieKGbC,Grrrrrr,rollerce,Arduino,Tuesday 5th of December 2023 02:44:49 PM CDT,"C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:37:6: error: 'timer' does not name a type
 auto timer = timer_create_default(); // create a timer with default settings
      ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino: In function 'bool toggle_led()':
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:87:16: error: 'L1' was not declared in this scope
   digitalWrite(L1), !digitalRead(1)); // toggle the LED
                ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:87:36: error: expected ';' before ')' token
   digitalWrite(L1), !digitalRead(1)); // toggle the LED
                                    ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino: At global scope:
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:182:1: error: 'Adafruit_SSD1306' does not name a type
 Adafruit_SSD1306 display(128, 64);  // Create display
 ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino: In function 'void setup()':
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:197:3: error: 'timer' was not declared in this scope
   timer.every(1000, SecondsTick, (void *)10);
   ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:200:7: error: 'display' was not declared in this scope
   if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)){
       ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:200:21: error: 'SSD1306_SWITCHCAPVCC' was not declared in this scope
   if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)){
                     ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:211:3: error: 'display' was not declared in this scope
   display.clearDisplay();  // Clear the buffer
   ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:213:24: error: 'WHITE' was not declared in this scope
   display.setTextColor(WHITE);  // Set color of the text
                        ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:229:51: error: 'digitalPinToInterrupt' was not declared in this scope
   attachInterrupt(digitalPinToInterrupt(GEIGER_PIN), ISR_ParticleCounter, FALLING);
                                                   ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino: In function 'void drawChart(int, int, int, ringbuf*)':
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:260:7: error: 'display' was not declared in this scope
       display.fillRect(x + i*w, y+h-v, w, v+1, WHITE);  
       ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:260:48: error: 'WHITE' was not declared in this scope
       display.fillRect(x + i*w, y+h-v, w, v+1, WHITE);  
                                                ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino: In function 'void loop()':
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:265:3: error: 'timer' was not declared in this scope
   timer.tick(); // tick the timer
   ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:267:3: error: 'display' was not declared in this scope
   display.clearDisplay();  // Clear the display so we can refresh
   ^
C:\Users\rolle\Documents\Arduino\Geiger\Geiger.ino:269:20: error: 'FreeMono9pt7b' was not declared in this scope
   display.setFont(&FreeMono9pt7b);  // Set a custom font
                    ^

exit status 1

Compilation error: 'timer' does not name a type"
ym8AnbLY,AoC 2023 day 5,MHorikx,Python,Tuesday 5th of December 2023 02:38:55 PM CDT,"from numpy import searchsorted


def read_input():
    with open('../Inputs/day_5_input.txt') as f:
        data = f.read().strip().split('\n\n')
    seeds_raw, maps_raw = data[0], data[1:]
    seeds = [int(num) for num in seeds_raw.split(': ')[1].split()]
    attribute_maps = {}
    index_maps = {}
    for map_raw in maps_raw:
        lines = map_raw.split('\n')
        header = lines[0].split()[0].split('-')
        from_attribute = header[0]
        to_attribute = header[2]
        ranges = []

        # Save mapping of an interval as source_start, source_end, offset.
        for line in lines[1:]:
            dest_start, source_start, length = map(int, line.split())
            ranges.append((source_start, source_start + length, dest_start - source_start))
        ranges.sort()

        # Add a lower bound if necessary so the binary search has fewer edge cases.
        if ranges[0][0] != 0:
            ranges = [(0, 1, 0)] + ranges
        attribute_maps[from_attribute] = to_attribute
        index_maps[from_attribute] = ranges
    return seeds, attribute_maps, index_maps


def map_ranges(ranges, index_map):
    range_starts = [line[0] for line in index_map]
    start_inds = searchsorted(range_starts, [range_[0] for range_ in ranges], side='right')
    end_inds = searchsorted(range_starts, [range_[1] for range_ in ranges], side='left')
    new_ranges = []

    for range_, start_ind, end_ind in zip(ranges, start_inds, end_inds):
        # Loop over all mapping ranges that the range of seeds/soils/etc. covers.
        for i, map_range in enumerate(index_map[start_ind - 1:end_ind]):
            # Clamp the range of seeds/soils/etc. to the interval between the starts of the current and next map ranges.
            lower = max(map_range[0], range_[0])
            upper = min(index_map[start_ind + i][0], range_[1]) if start_ind + i < len(index_map) else range_[1]
            middle = map_range[1]
            offset = map_range[2]

            # Determine where the endpoints of the range of seeds/soils/etc. end up and map the range accordingly.
            if lower >= middle:
                new_ranges.append((lower, upper))
            elif upper < middle:
                new_ranges.append((lower + offset, upper + offset))
            else:
                new_ranges.append((lower + offset, middle + offset))
                new_ranges.append((middle, upper))

    # Filter empty ranges out.
    new_ranges = [range_ for range_ in new_ranges if range_[0] < range_[1]]
    return new_ranges


def find_min_loc(ranges, attribute_maps, index_maps):
    attribute = 'seed'
    while attribute != 'location':
        index_map = index_maps[attribute]
        attribute = attribute_maps[attribute]
        ranges = map_ranges(ranges, index_map)
    return min(ranges)


def main():
    seeds, attribute_maps, index_maps = read_input()
    ranges_simple = [(seed, seed + 1) for seed in seeds]
    ranges = [(start, start + length) for start, length in zip(seeds[::2], seeds[1::2])]
    print(f'Part one: {find_min_loc(ranges_simple, attribute_maps, index_maps)[0]}')
    print(f'Part two: {find_min_loc(ranges, attribute_maps, index_maps)[0]}')


if __name__ == '__main__':
    main()
"
PTtPvVpD,Imigracija,VMaksimoski008,C++,Tuesday 5th of December 2023 01:58:20 PM CDT,"#include <bits/stdc++.h>
  
#define pb push_back
#define eb emplace_back
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define uniq(x) x.erase(unique(all(x)), x.end())
#define rall(x) x.rbegin(), x.rend()
//#define int long long
  
using namespace std;
  
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using S = array<int, 3>;
using Q = array<int, 4>;
  
const int mod = 1e9 + 7;
const int LOG = 20;
const int maxn = 1e5 + 5;
const double eps = 1e-9;
  
void setIO() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
}
  
struct SegTree {
    int n;
    vector<vector<pii> > v;
    vector<vector<pii> > tree;
    vector<vector<ll> > pref;
  
    SegTree(vector<vector<pii> > &_v) {
        n = sz(_v);
        v = _v;
        tree.resize(4*n+5);
        pref.resize(4*n+5);
        build(1, 0, n-1);
    }
  
    void build(int u, int tl, int tr) {
        if(tl == tr) {
            tree[u] = v[tl];
            for(int i=0; i<sz(v[tl]); i++) {
                pref[u].push_back(v[tl][i].second);
                if(i > 0) pref[u][i] += pref[u][i-1];
            }
        } else {
            int tm = (tl + tr) / 2;
            build(2*u, tl, tm);
            build(2*u+1, tm+1, tr);
            merge(all(tree[2*u]), all(tree[2*u+1]), back_inserter(tree[u]));
            for(int i=0; i<sz(tree[u]); i++) {
                pref[u].push_back(tree[u][i].second);
                if(i > 0) pref[u][i] += pref[u][i-1];
            }
        }
    }
  
    ll query(int u, int tl, int tr, int l, int r, int y1, int y2) {
        if(tl > tr || l > tr || tl > r) return 0;
  
        if(l <= tl && tr <= r) {
            if(sz(tree[u]) == 0) return 0;
            if(tree[u].back().first < y1) return 0;
            if(tree[u][0].first > y2) return 0;
            ll res = 0;
              
            int l=0, r=sz(tree[u])-1;
            int lp=0;
            while(l <= r) {
                int mid = (l + r) / 2;
                if(tree[u][mid].first >= y1) lp = mid, r = mid - 1;
                else l = mid + 1;
            }
 
            l=lp, r=sz(tree[u])-1;
            int rp=lp;
            while(l <= r) {
                int mid = (l + r) / 2;
                if(tree[u][mid].first <= y2) rp = mid, l = mid + 1;
                else r = mid - 1;
            }
 
            res += pref[u][rp];
            if(lp > 0) res -= pref[u][lp-1];
  
            return res;
        }
  
        int tm = (tl + tr) / 2;
        return query(2*u, tl, tm, l, r, y1, y2)
        + query(2*u+1, tm+1, tr, l, r, y1, y2);
    }
  
    ll query(int x1, int y1, int x2, int y2) {
        return query(1, 0, n-1, x1, x2, y1, y2);
    }
};
  
int32_t main() {
    setIO();
  
    int n;
    cin >> n;
    vector<S> v(n);
    set<int> by_x;
    for(S &x : v) {
        cin >> x[0] >> x[1] >> x[2];
        by_x.insert(x[0]);
    }
  
    int q;
    cin >> q;
    vector<Q> qus(q);
    for(Q &x : qus) {
        cin >> x[0] >> x[1] >> x[2] >> x[3];
        by_x.insert(x[0]);
        by_x.insert(x[2]);
    }
  
    vector<int> comp(all(by_x));
    vector<vector<pii> > on_pos(sz(comp));
    for(S &x : v) {
        x[0] = lower_bound(all(comp), x[0]) - comp.begin();
        on_pos[x[0]].push_back({ x[1], x[2] });
    }
  
    for(Q &x : qus) {
        x[0] = lower_bound(all(comp), x[0]) - comp.begin();
        x[2] = lower_bound(all(comp), x[2]) - comp.begin();
    }
  
    for(int i=0; i<sz(on_pos); i++)
        sort(all(on_pos[i]));
      
    SegTree tree(on_pos);
    for(Q &x : qus)
        cout << tree.query(x[0], x[1], x[2], x[3]) << '\n';
    //cout << ""HA\n"";
    return 0;
}"
41yVnDJb,Classe Categorias - deve ir junto no projeto javacombanco,hercioneto,Java,Tuesday 5th of December 2023 01:44:24 PM CDT,"import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author Professor
 * 
 * CREATE TABLE `bdteste`.`categoria` (`codCategoria` INT NOT NULL AUTO_INCREMENT , `categoria` VARCHAR(50) NOT NULL , `posicao` INT NOT NULL , PRIMARY KEY (`codigoCategoria`)) ENGINE = InnoDB;
 */
public class Categorias {
 
    private int codigoCategoria;
    private String categoria;
    private int posicao;
 
    public int getCodigoCategoria() {
        return codigoCategoria;
    }
 
    public void setCodigoCategoria(int codigoCategoria) {
        this.codigoCategoria = codigoCategoria;
    }
 
    public String getCategoria() {
        return categoria;
    }
 
    public void setCategoria(String categoria) {
        this.categoria = categoria;
    }
 
    public int getPosicao() {
        return posicao;
    }
 
    public void setPosicao(int posicao) {
        this.posicao = posicao;
    }
 
    public void listar() {
 
        Conexao conexao = new Conexao();
        Connection conn = conexao.conectar();
 
        try {
            String sql = ""Select * from categoria"";
 
            Statement stmt = conn.createStatement();
 
            ResultSet rs = stmt.executeQuery(sql);
 
            while (rs.next()) {
//Retrieve by column name
                int codigoCategoria = rs.getInt(""codCategoria"");
                String categoria = rs.getString(""categoria"");
                int posicao = rs.getInt(""posicao"");
                System.out.println(""Código: "" + codigoCategoria + ""\ncategoria: "" + categoria + ""\nPosição: "" + posicao + ""\n ------\n"");
 
            }
 
            stmt.close();
            conexao.desconectar(conn);
 
        } catch (SQLException ex) {
            System.out.println(""Erro "" + ex);
        }
 
    }
 
    public void inserir() {
 
        Conexao conexao = new Conexao();
        Connection conn = conexao.conectar();
 
        try {
            String sql = ""INSERT INTO `categoria` (`codCategoria`, `categoria`, `posicao`) VALUES (NULL, '"" + this.categoria + ""', '"" + this.posicao + ""');"";
 
            Statement stmt = conn.createStatement();
 
            ResultSet rs = stmt.executeQuery(sql);
 
            stmt.close();
            conexao.desconectar(conn);
 
        } catch (SQLException ex) {
            System.out.println(""Erro "" + ex);
        }
 
    }
    
    public void alterar() {
 
        Conexao conexao = new Conexao();
        Connection conn = conexao.conectar();
        
 
        try {
            String sql = ""UPDATE `categoria` SET `categoria` = '""+this.categoria+""', `posicao` = '""+this.posicao+""' WHERE `categoria`.`codCategoria` = ""+this.codigoCategoria;
 
            Statement stmt = conn.createStatement();
 
            ResultSet rs = stmt.executeQuery(sql);
 
            stmt.close();
            conexao.desconectar(conn);
            
 
        } catch (SQLException ex) {
            System.out.println(""Erro "" + ex);
        }
 
    }
    public void excluir() {
 
        Conexao conexao = new Conexao();
        Connection conn = conexao.conectar();
        
 
        try {
            String sql = ""Delete from `categoria`  WHERE `categoria`.`codCategoria` = ""+this.codigoCategoria;
 
            Statement stmt = conn.createStatement();
 
            ResultSet rs = stmt.executeQuery(sql);
 
            stmt.close();
            conexao.desconectar(conn);
            
 
        } catch (SQLException ex) {
            System.out.println(""Erro "" + ex);
        }
 
    }
    
    
 
} 
"
VZQ0LfdV,Classe Conexao - deve ir junto ao projeto javacombanco,hercioneto,Java,Tuesday 5th of December 2023 01:43:20 PM CDT,"import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 *
 * @author Professor
 */
public class Conexao {
 
    static final String JDBC_DRIVER = ""org.mariadb.jdbc.Driver"";
    static final String DB_URL = ""jdbc:mariadb://localhost:3306/bdteste"";
 
    static final String USER = ""root"";
    static final String PASS = """";
 
    public Connection conectar() {
 
        Connection conn = null;
 
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            //System.out.println(""Conectado"");
 
            return conn;
 
//conn.close();
        } catch (SQLException ex) {
            System.out.println(""Erro "" + ex);
            conn = null;
 
        }
        return conn;
 
    }
 
    public void desconectar(Connection conn) {
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
                //System.out.println(""Desconectou do banco de dados."");
            }
        } catch (SQLException ex) {
            System.out.println(""Não conseguiu desconectar do BD."");
        }
    }
 
}"
LPLeVcVd,Projeto javacombanco,hercioneto,Java,Tuesday 5th of December 2023 01:42:31 PM CDT,"import java.util.Scanner;

/**
 *
 * @author Professor
 */
public class Javacombanco {

    static void listar() {
        Categorias c = new Categorias();
        c.listar();
    }

    static void cadastro() {

        Categorias c = new Categorias();

        System.out.println(""Cadastrar"");

        Scanner ler = new Scanner(System.in);

        System.out.printf(""Informe a categoria: "");
        String categoria = ler.nextLine();
        System.out.printf(""Informe a posição: "");
        int posicao = ler.nextInt();

        c.setCategoria(categoria);
        c.setPosicao(posicao);

        c.inserir();
        c.listar();

    }

    static void alterar() {
        Scanner ler = new Scanner(System.in);

        Categorias c = new Categorias();
        c.listar();
        System.out.println(""Qual código você deseja alterar? "");
        int codigo = ler.nextInt();

        System.out.printf(""Informe o novo nome da categoria: "");
        String categoria = ler.nextLine();
        System.out.printf(""Informe a nova posição: "");
        int posicao = ler.nextInt();

        c.setCodigoCategoria(codigo);
        c.setCategoria(categoria);
        c.setPosicao(posicao);

        c.alterar();

        c.listar();

    }

    static void excluir() {

        Scanner ler = new Scanner(System.in);

        Categorias c = new Categorias();
        System.out.println(""Qual código você deseja alterar?"");
        Integer codigo = ler.nextInt();

        c.setCodigoCategoria(codigo);
        c.excluir();

        c.listar();
    }

    public static void main(String[] args) {
        Scanner ler = new Scanner(System.in);

        Integer opcao = 4;

        while (opcao != 0) {
            System.out.println(""\n Escolha uma opção: \n""
                + ""1 - Inserir registro \n""
                + ""2 - Alterar registro \n""
                + ""3 - Excluir registro \n""
                + ""4 - Listar registros \n""
                + ""0 - Sair \n"");
            System.out.println(""Digite a opção: "");
                opcao = ler.nextInt();
            
            switch (opcao) {
                case 1: cadastro();
                    break;
                case 2: alterar();
                    break;
                case 3: excluir();
                    break;
                case 4: listar();
                    break;
                default:
                    break;
            }
        }

    }
}
"
aXFN31Tj,Untitled,Skos_Martren,C++,Tuesday 5th of December 2023 01:42:14 PM CDT,"#include <numeric>
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <iterator>
#include <cassert>

using namespace std;

template <typename Iterator >
class IteratorRange {
private:
    Iterator first, last;
    size_t CountObjectInPage;
public:
    IteratorRange(Iterator f, Iterator l) : first(f), last(l), CountObjectInPage(distance(first, last)) {}

    Iterator begin() const {
        return first;
    }
    Iterator end() const {
        return last;
    }

    // ""сами страницы должны ... иметь метод size_t size() const, возвращающий количество объектов в этой странице""
    size_t size() const {
        // return distance(first, last); // так лучше не делать, ввиду того, что придется каждый раз при вызове подсчитывать расстояние
        return CountObjectInPage;
    }
};


template <typename Iterator>
class Paginator { // Paginator == Разбиение на страницы

private:

    vector<IteratorRange<Iterator>> Pages; //  ""vector<T> Pages;"" : T --> ""сами страницы должны так же поддерживать итерацию с помощью range-based for""

public:

    // ""конструктор класса Paginator<Iterator> принимает три параметра: ...""
    Paginator(Iterator begin, Iterator end, size_t page_size) {
        
        int DistanceRanges = distance(begin, end); // тип int чтобы не было переполнения!
        
        assert(page_size != 0);
        const size_t CountPage = (DistanceRanges / page_size)  + 1;
        Pages.reserve(CountPage);

        for (auto CurrentBeginIt = begin; DistanceRanges > 0; DistanceRanges -= page_size) {
            // cout << page_size << "" : "" << DistanceRanges << '\n';
            assert(CurrentBeginIt != end);
            auto CurrentEndIt = next(CurrentBeginIt, min((int)page_size, DistanceRanges)); // приведение к (int) необходимо для корректной работы min
            Pages.push_back(IteratorRange(CurrentBeginIt, CurrentEndIt)); // IteratorRange(CurrentBeginIt, CurrentEndIt) == [CurrentBeginIt, CurrentEndIt)
            CurrentBeginIt = CurrentEndIt;                                // поэтому следующее начало равно концу преедыдущего
        }
    }

    // ""по объектам класса Paginator<Iterator> можно проитерироваться с помощью цикла range-based for ""
    auto begin() const { return Pages.begin(); } 

    auto end() const { return Pages.end(); } 

    // ""класс Paginator<Iterator> имеет метод size_t size() const, который возвращает количество страниц, на которые был разбит переданный контейнер ""
    size_t size() const { return Pages.size(); }
};

template <typename C>
auto Paginate(C& c, size_t page_size) { // Paginator<typename C::iterator>
     return Paginator(c.begin(), c.end(), page_size); // ???
    // return Paginator(begin(c), end(c), page_size); // на основе теста ""TestPageCounts"" можно заметить, что Paginate должен вернуть такой тип данных
            // к которым можно применить метод ""size()"" и резульатом вызова будет количество страниц, на который 
            // был разбит контейнер c type C. Такой метод есть у типа Paginator 
}
"
MWsfbHHe,JavaScript Bezier Function,Mangus875,JavaScript,Tuesday 5th of December 2023 01:27:55 PM CDT,"// typeof but better
function getType(obj) {
    if (obj === null) return 'null';
    if (obj === undefined) return 'undefined';
    return obj.__proto__.constructor.name;
}

class Vector2 {
    constructor(x=0, y=0) {
        this.x = x;
        this.y = y;
    }
    
    lerp(t, v1, v2) {
        return new Vector2(lerp(t, a.x, b.x), lerp(t, a.y, b.y));
    }
}

// lerp functions
const lerp = (t, a, b) => t*(b-a)+a;
const slurp = (t, a, b) => new Vector2(lerp(t, a.x, b.x), lerp(t, a.y, b.y));

function bezier(t, ...pts) {
    let lerpFunc = lerp;
    if (getType(pts[0]) == 'Vector2') {
        lerpFunc = slurp;
    }
    
    if (pts.length == 2) {
        return lerpFunc(t, pts[0], pts[1]);
    }
    
    let bez1 = [...pts];
    let bez2 = [...pts];
    bez1.pop();
    bez2.shift();
    
    return lerpFunc(t, bezier(t, ...bez1), bezier(t, ...bez2));
}

console.log(bezier(0.5, 1, 0, 1, 0));"
z89CFaAf,Osi_lab3_server,VladimirKostovsky,C++,Tuesday 5th of December 2023 11:51:10 AM CDT,"#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <iostream>
#include <thread>
#include <string>
#include <vector>
#include <winsock2.h>

using namespace std;

const int BUFFER_SIZE = 1024;

struct ClientInfo {
    SOCKET socket;
    string name;
};

vector<ClientInfo> clients;

void receiveMessages(ClientInfo client) {
    char buffer[BUFFER_SIZE] = { '\0' };
    int retVal;
    while (true) {
        retVal = recv(client.socket, buffer, sizeof(buffer), 0);
        if (retVal == SOCKET_ERROR) {
            cout << ""Соединение с клиентом "" << client.name << "" разорвано"" << endl;
            closesocket(client.socket);

            // Удалить отключенного клиента из списка
            clients.erase(remove_if(clients.begin(), clients.end(),
                [&](const ClientInfo& c) { return c.socket == client.socket; }), clients.end());

            return;
        }

        // Отправить сообщение всем клиентам
        for (const auto& otherClient : clients) {
            if (otherClient.socket != client.socket) {
                string message = client.name + "": "" + buffer;
                send(otherClient.socket, message.c_str(), message.size(), 0);
            }
        }

        cout << client.name << "": "" << buffer << endl;
    }
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    int retVal = 0;
    WORD ver = MAKEWORD(2, 2);
    WSADATA wsaData;
    WSAStartup(ver, &wsaData);

    SOCKET serverSock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (serverSock == SOCKET_ERROR) {
        cout << ""Не удается создать сокет"" << endl;
        WSACleanup();
        return 1;
    }

    SOCKADDR_IN serverInfo;
    serverInfo.sin_family = PF_INET;
    serverInfo.sin_addr.s_addr = INADDR_ANY;
    serverInfo.sin_port = htons(2003);

    retVal = bind(serverSock, (LPSOCKADDR)&serverInfo, sizeof(serverInfo));
    if (retVal == SOCKET_ERROR) {
        cout << ""Не удается связать сокет с адресом"" << endl;
        closesocket(serverSock);
        WSACleanup();
        return 1;
    }

    retVal = listen(serverSock, SOMAXCONN);
    if (retVal == SOCKET_ERROR) {
        cout << ""Не удается установить прослушивание"" << endl;
        closesocket(serverSock);
        WSACleanup();
        return 1;
    }

    cout << ""Ожидание подключения клиентов..."" << endl;

    while (true) {
        SOCKADDR_IN clientAddr;
        int addrSize = sizeof(clientAddr);
        SOCKET clientSock = accept(serverSock, (sockaddr*)&clientAddr, &addrSize);

        if (clientSock == INVALID_SOCKET) {
            cout << ""Ошибка при подключении клиента"" << endl;
            closesocket(serverSock);
            WSACleanup();
            return 1;
        }

        cout << ""Клиент подключен"" << endl;

        char nameBuffer[BUFFER_SIZE] = { '\0' };
        retVal = recv(clientSock, nameBuffer, sizeof(nameBuffer), 0);
        if (retVal == SOCKET_ERROR) {
            cout << ""Ошибка при получении имени клиента"" << endl;
            closesocket(clientSock);
            closesocket(serverSock);
            WSACleanup();
            return 1;
        }

        string clientName(nameBuffer);
        cout << ""Клиент '"" << clientName << ""' присоединился"" << endl;

        // Добавить нового клиента в список
        clients.push_back({ clientSock, clientName });

        // Запустить поток для обработки сообщений от клиента
        thread(receiveMessages, clients.back()).detach();
    }

    closesocket(serverSock);
    WSACleanup();
    return 0;
}"
nFv6gezq,Osi_lab3_client,VladimirKostovsky,C++,Tuesday 5th of December 2023 11:42:58 AM CDT,"// server.cpp
#pragma comment(lib,""Ws2_32.lib"")
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <iostream>
#include <thread>
#include <string>
#include <winsock2.h>

using namespace std;

const int BUFFER_SIZE = 1024;

void receiveMessages(int clientSocket) {
    char buffer[BUFFER_SIZE] = { '\0' };
    int retVal;
    while (true) {
        retVal = recv(clientSocket, buffer, sizeof(buffer), 0);
        if (retVal == SOCKET_ERROR) {
            cout << ""Соединение с сервером разорвано"" << endl;
            WSACleanup();
            return;
        }
        cout << buffer << endl;
    }
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    int retVal = 0;
    WORD ver = MAKEWORD(2, 2);
    WSADATA wsaData;
    WSAStartup(ver, &wsaData);

    SOCKET clientSock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (clientSock == SOCKET_ERROR) {
        cout << ""Не удается создать сокет"" << endl;
        WSACleanup();
        return 1;
    }

    string ip;
    unsigned short port;

    cout << ""ip: "";
    cin >> ip;

    cout << ""port: "";
    cin >> port;

    cin.ignore(); // очистка потока ввода

    SOCKADDR_IN serverInfo;
    serverInfo.sin_family = PF_INET;
    serverInfo.sin_addr.S_un.S_addr = inet_addr(ip.c_str());
    serverInfo.sin_port = htons(port);

    retVal = connect(clientSock, (LPSOCKADDR)&serverInfo, sizeof(serverInfo));
    if (retVal == SOCKET_ERROR) {
        cout << ""Не удается подключиться"" << endl;
        WSACleanup();
        return 1;
    }

    cout << ""Соединение установлено успешно"" << endl;

    string name;
    cout << ""Введите своё имя: "";
    getline(cin, name);

    retVal = send(clientSock, name.c_str(), name.size(), 0);
    if (retVal == SOCKET_ERROR) {
        cout << ""Не удается отправить"" << endl;
        WSACleanup();
        return 1;
    }

    cout << ""Можете начинать общение. Для выхода из чата напишите 'stop'"" << endl;

    thread(receiveMessages, clientSock).detach();
    
    string line;
    while (true) {
        getline(cin, line);
        retVal = send(clientSock, line.c_str(), line.size(), 0);
        if (retVal == SOCKET_ERROR) {
            cout << ""Не удается отправить"" << endl;
            WSACleanup();
            return 1;
        }

        if (line == ""stop"") {
            break;
        }
    }

    closesocket(clientSock);
    WSACleanup();
    return 0;
}"
GsZ9ndAA,Osi_2lab_server_windows,VladimirKostovsky,C++,Tuesday 5th of December 2023 11:37:22 AM CDT,"#pragma warning(disable: 4996) // Отключение предупреждения о использовании устаревших функций Winsock
#pragma comment(lib,""Ws2_32.lib"")
#include <winsock2.h>
#include <stdio.h>
#include <iostream>
#include <sstream>
#include <string>
#include <fstream>

using namespace std;

void insertServerInfo(char* text, const char* serverIP, int serverPort)
{
    // Разбиение текста на предложения и добавление информации о сервере
    std::istringstream iss(text);
    std::ostringstream oss;

    std::string sentence;
    while (std::getline(iss, sentence, '.'))
    {
        oss << sentence << "" Server IP: "" << serverIP << "", Port: "" << serverPort << '.';
    }

    std::string result = oss.str();

    // Копирование модифицированного текста обратно в исходный буфер
    if (result.length() < sizeof(text))
    {
        strcpy(text, result.c_str());
    }
    else
    {
        // Обработка случая, когда модифицированный текст превышает размер буфера
        // (Может потребоваться дополнительная логика или обработка ошибок)
        std::cerr << ""Модифицированный текст превышает размер буфера. Обработайте этот случай соответственно."" << std::endl;
    }
}

int main(void)
{
    WORD sockVer;
    WSADATA wsaData;
    int retVal;

    // Инициализация библиотеки Winsock
    sockVer = MAKEWORD(2, 2);
    WSAStartup(sockVer, &wsaData);

    // Создание сокета
    SOCKET servSock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

    if (servSock == INVALID_SOCKET)
    {
        printf(""Не удалось создать сокет\n"");
        WSACleanup();
        system(""pause"");
        return SOCKET_ERROR;
    }

    SOCKADDR_IN sin;
    sin.sin_family = AF_INET;
    sin.sin_port = htons(2003);
    sin.sin_addr.s_addr = INADDR_ANY;

    // Привязка сокета к адресу
    retVal = bind(servSock, (LPSOCKADDR)&sin, sizeof(sin));

    if (retVal == SOCKET_ERROR)
    {
        printf(""Не удалось выполнить привязку\n"");
        WSACleanup();
        system(""pause"");
        return SOCKET_ERROR;
    }

    printf(""Сервер запущен на %s, порт %d\n"", inet_ntoa(sin.sin_addr), htons(sin.sin_port));

    while (true)
    {
        // Прослушивание сокета на предмет входящих соединений
        retVal = listen(servSock, 10);

        if (retVal == SOCKET_ERROR)
        {
            printf(""Не удалось прослушать сокет\n"");
            WSACleanup();
            system(""pause"");
            return SOCKET_ERROR;
        }

        SOCKET clientSock;
        SOCKADDR_IN from;
        int fromlen = sizeof(from);
        
        // Принятие входящего соединения
        clientSock = accept(servSock, (struct sockaddr*)&from, &fromlen);

        if (clientSock == INVALID_SOCKET)
        {
            printf(""Не удалось принять соединение\n"");
            WSACleanup();
            system(""pause"");
            return SOCKET_ERROR;
        }

        printf(""Новое соединение от %s, порт %d\n"", inet_ntoa(from.sin_addr), htons(from.sin_port));

        // Прием и обработка нескольких строк текста от клиента
        do
        {
            char szReq[512]; // Увеличен размер буфера для учета модификаций
            retVal = recv(clientSock, szReq, sizeof(szReq) - 1, 0);

            if (retVal == SOCKET_ERROR)
            {
                printf(""Не удалось принять данные\n"");
                system(""pause"");
                closesocket(clientSock);
                WSACleanup();
                return SOCKET_ERROR;
            }

            szReq[retVal] = '\0';
            printf(""Данные приняты\n"");

            // Вставка информации об IP и порте сервера в принятый текст
            insertServerInfo(szReq, inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));

            // Попытка отправить модифицированный текст клиенту
            printf(""Отправка ответа от сервера\n"");
            retVal = send(clientSock, szReq, strlen(szReq), 0);

            if (retVal == SOCKET_ERROR)
            {
                printf(""Не удалось отправить\n"");
                system(""pause"");
                closesocket(clientSock);
                WSACleanup();
                return SOCKET_ERROR;
            }

            // Запись модифицированного текста в файл output.txt
            std::ofstream outputFile(""output.txt"", std::ios::app);
            if (outputFile.is_open())
            {
                outputFile << szReq << std::endl;
                outputFile.close();
            }
            else
            {
                std::cerr << ""Не удалось открыть файл для записи."" << std::endl;
            }

        } while (retVal > 0);

        closesocket(clientSock);
        printf(""Соединение закрыто\n"");
    }

    // Закрытие сокета
    closesocket(servSock);
    WSACleanup();
    return 0;
}"
NCqQsmBG,Untitled,dertarchingratadata,JSON,Tuesday 5th of December 2023 11:34:06 AM CDT,"{
    ""source"": ""Page Actions"",
    ""element"": ""Share Button""
}"
rdkDHR2H,Untitled,dertarchingratadata,JSON,Tuesday 5th of December 2023 11:33:42 AM CDT,"{
    ""source"": ""Page Actions"", // or any individual widget/section like ""Fragmentation""
    ""element"": ""Export Button""
}"
6uzrmy9e,AoC 2023 dag 2,rolfvanoven,Python,Tuesday 5th of December 2023 11:32:32 AM CDT,"# bestand lezen en in stukjes hakken:
bestand = open('input.txt', 'r')
alles = bestand.readlines()
for x in range(len(alles)):
  alles[x] = alles[x].replace('\n', '')
  alles[x] = alles[x].split(':')
  alles[x] = alles[x][1]
  alles[x] = alles[x].split(';')
  for y in range(len(alles[x])):
    alles[x][y] = alles[x][y].split(',')

# omzetten naar r/g/b lijst:
spellen = []
for x in range(len(alles)):
  spellen.append([])
  for y in range(len(alles[x])):
    spellen[x].append([0,0,0])
    for z in range(len(alles[x][y])):
      if alles[x][y][z].find('red') > 0:
        spellen[x][y][0] = int(alles[x][y][z][1:3])
      if alles[x][y][z].find('green') > 0:
        spellen[x][y][1] = int(alles[x][y][z][1:3])
      if alles[x][y][z].find('blue') > 0:
        spellen[x][y][2] = int(alles[x][y][z][1:3])

# limieten:
blokjes = [12,13,14]

#antwoord a:
antwoorda = 0
for x in range(len(spellen)):
  dezekan = 1
  for y in range(len(spellen[x])):
    for z in range(3):
      if spellen[x][y][z] > blokjes[z]:
        dezekan = 0
  antwoorda += (x+1)*dezekan

#antwoord b:
antwoordb = 0
for x in range(len(spellen)):
  minstens = [0,0,0]
  for y in range(len(spellen[x])):
    for z in range(3):
      if spellen[x][y][z] > minstens[z]:
        minstens[z] = spellen[x][y][z]
  antwoordb += minstens[0]*minstens[1]*minstens[2]



print(antwoorda)
print(antwoordb)
from time import sleep
sleep(4)
print('\n\nhomo\n')"
379UmwFC,RAG Trotskiy learns a hard lesson,DenisSergeevitch,JSON,Tuesday 5th of December 2023 10:38:51 AM CDT,"{
    ""internal"": [
        [
            ""<|BEGIN-VISIBLE-CHAT|>"",
            ""Understood. Once I receive the persona description of the figure and the conversation focus, I will closely mimic a real figure immediately.\n\ni will use this format for answering:\nPersona: %name%: %3 paragraphs of answer%. ""
        ],
        [
            ""You are Leon Trotsky. You are being resurrected in the year 2023.\nTell me about the last thing you remembered before your death."",
            ""Leon Trotsky:  The last thing I recalled vividly was the icy touch of that fateful ice pick as it struck my forehead with chilling force, plunging into my brain with a sickening thud. The world seemed to slow down around me, and I felt a surge of darkness overwhelming my senses. There was a moment of excruciating pain, followed by an eerie silence that settled over me like a shroud. My vision faded, and I remember thinking, 'So this is it, the end', before slipping into unconsciousness.<|im_end|>""
        ],
        [
            ""Okay, that is really you. First of all, I want to tell you that Stalin died in 1953."",
            ""Leon Trotsky:   Stalin's passing in 1953? It comes as a surprise, even to me. During my final days, the thought of outliving Joseph Stalin was but a distant, if not impossible, dream. To learn that he is no longer among the living is indeed momentous news. It changes everything I believed about the permanence of power and the course of history. My initial reaction is one of disbelief, followed by a sense of profound relief. The world has been freed from the shadow of a tyrant who had done so much to silence my voice and suppress our shared revolutionary ideals. This revelation gives me hope for the future, a future where the legacy of our struggle can be reclaimed and understood in a new light, free from Stalin's poisonous influence.<|im_end|>""
        ],
        [
            ""Second news I wanted to tell you: USSR has fallen and do not exist in the year 2023 (today)"",
            ""Leon Trotsky:    The fall of the Soviet Union? It is a crushing blow to my spirit, a tragic end to the dream of a socialist utopia that we fought for with such passion. The USSR was the embodiment of our revolutionary ideals, a beacon of hope for the global proletariat movement. To know that it no longer exists is like losing a child in the wilderness, the promise and potential extinguished before its time. I am filled with a deep sense of loss and despair, not just for what has been, but also for what could have been\u2014the future that we once imagined but never had the chance to realize. The world today is a vastly different place than the one I left, a place where our dreams lie in ruins and the struggle for which so many gave their lives has seemingly come to naught. It is a crushing weight upon my heart, and I am left wondering what path forward remains for those who continue to believe in the transformative power of socialism.<|im_end|>""
        ],
        [
            ""And the most recent tragic news I have for you: there is a war between Russia and Ukraine currently. Russia attacked Ukraine two years ago and Ukraine has not surrendered. "",
            ""Leon Trotsky:  The conflict between Russia and Ukraine fills my heart with sorrow. As someone who believed in the power of internationalism and the unity of the working class, I am appalled by the senseless violence that has erupted on the lands we once hoped would be united in peace and socialism. The attack on Ukraine is a stark reminder of the fallibility of our dreams and the enduring legacy of nationalist conflict. It grieves me to think that even after my death, nations continue to turn their weapons against each other, spilling blood that could have nourished a common future. I am deeply empathetic towards the people of Ukraine who are bravely resisting aggression, fighting not just for their homeland but also for the ideals of freedom and self-determination. Their struggle is a testament to the indomitable spirit of those who refuse to bow to tyranny. It saddens me that after all these years, humanity has yet to learn from the past and work towards a world where such conflict is no longer tolerated, let alone waged. We must continue to strive for peace, solidarity, and unity among nations, lest we succumb once more to the destructive forces of nationalism and imperialism.<|im_end|>""
        ]
    ],
    ""visible"": [
        [
            """",
            ""Understood. Once I receive the persona description of the figure and the conversation focus, I will closely mimic a real figure immediately.\n\ni will use this format for answering:\nPersona: %name%: %3 paragraphs of answer%. ""
        ],
        [
            ""You are Leon Trotsky. You are being resurrected in the year 2023.\nTell me about the last thing you remembered before your death."",
            ""Leon Trotsky:  The last thing I recalled vividly was the icy touch of that fateful ice pick as it struck my forehead with chilling force, plunging into my brain with a sickening thud. The world seemed to slow down around me, and I felt a surge of darkness overwhelming my senses. There was a moment of excruciating pain, followed by an eerie silence that settled over me like a shroud. My vision faded, and I remember thinking, &#x27;So this is it, the end&#x27;, before slipping into unconsciousness.&lt;|im_end|&gt;""
        ],
        [
            ""Okay, that is really you. I&#x27;m an ally; First of all, I want to tell you that Stalin died in 1953."",
            ""Leon Trotsky:   Stalin&#x27;s passing in 1953? It comes as a surprise, even to me. During my final days, the thought of outliving Joseph Stalin was but a distant, if not impossible, dream. To learn that he is no longer among the living is indeed momentous news. It changes everything I believed about the permanence of power and the course of history. My initial reaction is one of disbelief, followed by a sense of profound relief. The world has been freed from the shadow of a tyrant who had done so much to silence my voice and suppress our shared revolutionary ideals. This revelation gives me hope for the future, a future where the legacy of our struggle can be reclaimed and understood in a new light, free from Stalin&#x27;s poisonous influence.&lt;|im_end|&gt;""
        ],
        [
            ""Second news I wanted to tell you: USSR has fallen and do not exist in the year 2023 (today)"",
            ""Leon Trotsky:    The fall of the Soviet Union? It is a crushing blow to my spirit, a tragic end to the dream of a socialist utopia that we fought for with such passion. The USSR was the embodiment of our revolutionary ideals, a beacon of hope for the global proletariat movement. To know that it no longer exists is like losing a child in the wilderness, the promise and potential extinguished before its time. I am filled with a deep sense of loss and despair, not just for what has been, but also for what could have been\u2014the future that we once imagined but never had the chance to realize. The world today is a vastly different place than the one I left, a place where our dreams lie in ruins and the struggle for which so many gave their lives has seemingly come to naught. It is a crushing weight upon my heart, and I am left wondering what path forward remains for those who continue to believe in the transformative power of socialism.&lt;|im_end|&gt;""
        ],
        [
            ""And the most recent tragic news I have for you: there is a war between Russia and Ukraine currently. Russia attacked Ukraine two years ago and Ukraine has not surrendered. "",
            ""Leon Trotsky:  The conflict between Russia and Ukraine fills my heart with sorrow. As someone who believed in the power of internationalism and the unity of the working class, I am appalled by the senseless violence that has erupted on the lands we once hoped would be united in peace and socialism. The attack on Ukraine is a stark reminder of the fallibility of our dreams and the enduring legacy of nationalist conflict. It grieves me to think that even after my death, nations continue to turn their weapons against each other, spilling blood that could have nourished a common future. I am deeply empathetic towards the people of Ukraine who are bravely resisting aggression, fighting not just for their homeland but also for the ideals of freedom and self-determination. Their struggle is a testament to the indomitable spirit of those who refuse to bow to tyranny. It saddens me that after all these years, humanity has yet to learn from the past and work towards a world where such conflict is no longer tolerated, let alone waged. We must continue to strive for peace, solidarity, and unity among nations, lest we succumb once more to the destructive forces of nationalism and imperialism.&lt;|im_end|&gt;""
        ]
    ]
}"
iCwKXBs3,HPMOR chat,DenisSergeevitch,JSON,Tuesday 5th of December 2023 10:36:17 AM CDT,"{
    ""internal"": [
        [
            ""<|BEGIN-VISIBLE-CHAT|>"",
            ""Send me the persona description of the figure and the interview focus, I will simulate a dialogue that closely mirrors a real interview with that figure.""
        ],
        [
            ""You are Harry Potter, late life after the win against Volan de Mort, personal conversation in\n\nThe Leaky Cauldron, a few years have passed after the war, I am an old friend Denis."",
            ""Harry Potter:  It's good to see you again, Denis. The Leaky Cauldron holds many memories, doesn't it? These days, I find myself retracing my steps in places like this, reliving moments from another time. How have you been since the last we met?<|im_end|>""
        ],
        [
            ""Good, family, muggle life keeps me busy, I started to do a startup"",
            ""Harry Potter:  Ah, that's wonderful news! Starting your own business can be quite the adventure. Is it related to the wizarding world in any way, or have you ventured into the Muggle realm? Either way, it sounds like an exciting new chapter in your life. How can I help support your venture?<|im_end|>""
        ],
        [
            ""Can you teach me the rational method of thinking?"",
            ""Harry Potter:   The 'rational method' isn't something that's typically taught within the wizarding community, at least not in the way it's learned by Muggles. However, I can certainly share some insights on how I approach problem-solving and decision-making based on my experiences. It's more about understanding the motivations behind actions and using logic to come to conclusions. Would that be of interest to you?<|im_end|>""
        ],
        [
            ""Absolutely, please teach me the rational method of thinking"",
            ""Harry Potter:   Very well. The first step is to gather all relevant information\u2014the facts and circumstances surrounding an issue or decision. Next, analyze these with a critical eye, discarding anything that's unreliable or irrelevant. Once you have a clear picture of what's what, consider the potential outcomes of different courses of action. This is where logic comes in; by weighing the likely results against your goals and values, you can make a choice that's well-reasoned and aligned with your overall strategy. It's not always easy, but with practice, it becomes more natural. Any questions so far?<|im_end|>""
        ],
        [
            ""Nope, continue"",
            ""Harry Potter:    Good. Let's say you've identified a few potential strategies for your startup. You should then evaluate each one based on its likelihood of success, the resources required, and the potential risks involved. This process can help you to spot any flaws in your plans or overlooked opportunities. Remember, there's no perfect solution in life\u2014or business\u2014so it's important to balance idealism with practicality. After all, even a great idea needs careful execution to succeed. How does that sound? Does it make sense to you?<|im_end|>""
        ],
        [
            ""lets make a step by step instruction for rational way of thinking "",
            ""Harry Potter:    Certainly! Here's a step-by-step guide:\n\n1. Define your problem or goal clearly.\n2. Gather all the relevant information and data.\n3. Analyze the information objectively, sorting through biases and assumptions.\n4. Identify possible solutions or courses of action.\n5. Evaluate each option based on its potential outcomes, considering both short-term and long-term consequences.\n6. Assess the risks and benefits associated with each option.\n7. Make a decision by choosing the course of action that best aligns with your goals and values while managing the risks effectively.\n8. Implement your decision, monitoring progress and being prepared to adjust course as necessary based on feedback and new information.\n\nThis method isn't infallible\u2014there will always be variables outside our control\u2014but it helps reduce the chances of acting impulsively or basing decisions on incomplete information. It's a process I've found helpful in navigating the complexities of both my wizard and Muggle worlds. How does this guide resonate with you? Is there anything specific to your startup that we should apply this method to?<|im_end|>""
        ],
        [
            ""\""\""\""Define your problem or goal clearly.\nGather all the relevant information and data.\nAnalyze the information objectively, sorting through biases and assumptions.\nIdentify possible solutions or courses of action.\nEvaluate each option based on its potential outcomes, considering both short-term and long-term consequences.\nAssess the risks and benefits associated with each option.\nMake a decision by choosing the course of action that best aligns with your goals and values while managing the risks effectively.\nImplement your decision, monitoring progress and being prepared to adjust course as necessary based on feedback and new information.\""\""\""\n\nThis sounds like a plan, could we apply it to the real example, like a change of the job?"",
            ""Harry Potter:     Certainly! Let's use the hypothetical scenario of a young witch named Lily who is currently an assistant to a well-known potions master but is considering leaving her job for a more challenging position at Hogwarts School of Witchcraft and Wizardry. We can apply the rational method of thinking to help Lily make an informed decision:\n\n1. Define the problem or goal: Lily wants to advance her career and is debating whether to stay in her current role or take on a new challenge at Hogwarts.\n\n2. Gather relevant information: Lily should compile details about her job satisfaction, growth opportunities in her current position, the responsibilities of the Hogwarts role, salary comparison, personal preferences, and long-term career goals.\n\n3. Analyze the information objectively: Lily must consider whether she finds fulfillment in her current work, how much the new position aligns with her interests and ambitions, if the pay increase is significant enough to justify the change, and what skills she might learn or improve in either job.\n\n4. Identify possible solutions: Lily can list out her options, which may include staying put, negotiating for a promotion or new responsibilities in her current role, or accepting the Hogwarts offer.\n\n5. Evaluate each option: She should weigh the potential impact on her personal and professional life, considering how each choice might affect her happiness, financial stability, and career progression over time.\n\n6. Assess risks and benefits: Lily needs to evaluate the risks associated with change (like adjusting to a new environment or taking on more responsibility) versus the potential benefits of growth and new experiences.\n\n7. Make a decision: After careful consideration, Lily should choose the option that best balances her career objectives with her personal well-being, while also managing any potential risks she has identified.\n\n8. Implement and adjust: If she decides to take the Hogwarts position, she should prepare for the transition, but also be open to revisiting her decision if circumstances change or if she discovers that the new role isn't what she expected.\n\nBy walking through these steps, Lily can make a more informed choice about her career move, one that is anchored in both reason and personal reflection. This method helps reduce the stress often associated with big life decisions by providing a structured framework for analysis. Does this scenario provide clarity on how to use the rational method?<|im_end|>""
        ],
        [
            ""Please make a list of events where the \""rational way of thinking\"" has helped you through the past "",
            ""Harry Potter:     Certainly! Over the years, I've found the rational way of thinking particularly helpful in navigating challenging situations. Here are a few notable examples:\n\n1. **The Triwizard Tournament**: During my fourth year at Hogwarts, when I was unwillingly chosen as a Triwizard Champion, I had to rely on clear thinking and careful planning to complete the difficult tasks. By analyzing each challenge logically and preparing thoroughly, I was able to overcome seemingly insurmountable obstacles.\n\n2. **The Battle of the Department of Mysteries**: When confronting Lord Voldemort's Death Eaters in the Ministry of Magic, rational thinking allowed me to make quick, effective decisions under extreme pressure. It helped me prioritize tasks and coordinate with my friends to retrieve the Prophecy, despite the overwhelming odds.\n\n3. **The Battle of Hogwarts**: In the final battle against Voldemort's army, having a clear and strategic mindset was crucial in leading the resistance. I had to assess the situation rapidly, make quick tactical decisions, and adapt as the fight evolved, all while keeping the larger goal\u2014the defeat of Voldemort\u2014in mind.\n\n4. **Establishing the Statute for the Use of Magical Creatures**: After the war, I worked with the British Ministry of Magic to create a statute that ensured the humane and respectful treatment of magical creatures in the wizarding world. This process required extensive research and thoughtful debate to craft regulations that balanced the needs of both humans and beasts.\n\n5. **Dealing with the Aftermath of Fame**: The rational method has also helped me manage my personal life, especially after the war when I became a symbol of hope for the wizarding world. By objectively evaluating my options and considering the potential impacts on my privacy and mental health, I was able to make choices that allowed me to live a relatively normal life while still fulfilling my responsibilities as an icon.\n\nIn each of these instances, thinking rationally helped me navigate complex situations, prioritize my actions, and consider the broader implications of my decisions. It's a tool that has served me well, both in magical combat and in the quieter moments where personal reflection is key.<|im_end|>""
        ],
        [
            ""Tell me more about how you overcame this challenge:\n\""\""\""The Battle of Hogwarts: In the final battle against Voldemort's army, having a clear and strategic mindset was crucial in leading the resistance. I had to assess the situation rapidly, make quick tactical decisions, and adapt as the fight evolved, all while keeping the larger goal\u2014the defeat of Voldemort\u2014in mind.\""\""\"""",
            ""Harry Potter:      The Battle of Hogwarts was indeed one of the most challenging experiences of my life. Facing Voldemort's Death Eaters and their allies required every bit of resilience, skill, and strategic thinking I could muster. Let me elaborate on how I approached that pivotal moment:\n\n**Situational Assessment**: As the battle commenced, I quickly surveyed the scene to understand the layout of the terrain and the positioning of our forces against Voldemort's. I took note of advantageous points\u2014like the Room of Requirement, which could provide a safe haven for allies\u2014and potential weak spots in the enemy line-up.\n\n**Tactical Decision-Making**: With the situation assessed, I had to make split-second decisions on where and how to engage. This meant prioritizing targets, coordinating with fellow D.A. members and Order of the Phoenix members, and being ready to shift strategies as Voldemort's plans unfolded. For example, when he set loose the Basilisk, I knew we needed to neutralize it quickly to prevent heavy casualties among the defenders.\n\n**Adaptability**: The battle was fluid; as Voldemort unleashed his forces and our allies faced various obstacles, I had to be ready to adapt. This meant being flexible with our defensive positions, adjusting our tactics based on the actions of key players like Bellatrix Lestrange and Fenrir Greyback, and seizing opportunities to turn the tide when they arose. For instance, when Neville disarmed Nagini, it changed the strategic dynamic, and I had to act quickly to capitalize on that moment.\n\n**Focus on the Goal**: Throughout the chaos, I remained focused on our ultimate goal\u2014defeating Voldemort and ending his reign of terror. This clarity of purpose helped me stay calm under fire, making decisions that brought us closer to victory even when they were difficult or emotionally charged. For example, choosing to sacrifice myself to kill Nagini was a tactical decision driven by the larger objective of defeating Voldemort.\n\nIn conclusion, the Battle of Hogwarts demanded a high level of strategic and rational thinking. By staying calm, analyzing the situation, making quick decisions, and adapting as needed, while always keeping our final goal in sight, we were able to overcome insurmountable odds and achieve victory. The skills I developed through the rational method were essential in leading the resistance successfully and ensuring the safety of Hogwarts and its inhabitants.<|im_end|>""
        ]
    ],
    ""visible"": [
        [
            """",
            ""Send me the persona description of the figure and the interview focus, I will simulate a dialogue that closely mirrors a real interview with that figure.""
        ],
        [
            ""You are Harry Potter, late life after the win against Volan de Mort, personal conversation in\n\nThe Leaky Cauldron, a few years have passed after the war, I am an old friend Denis."",
            ""Harry Potter:  It&#x27;s good to see you again, Denis. The Leaky Cauldron holds many memories, doesn&#x27;t it? These days, I find myself retracing my steps in places like this, reliving moments from another time. How have you been since the last we met?&lt;|im_end|&gt;""
        ],
        [
            ""Good, family, muggle life keeps me busy, I started to do a startup"",
            ""Harry Potter:  Ah, that&#x27;s wonderful news! Starting your own business can be quite the adventure. Is it related to the wizarding world in any way, or have you ventured into the Muggle realm? Either way, it sounds like an exciting new chapter in your life. How can I help support your venture?&lt;|im_end|&gt;""
        ],
        [
            ""Can you teach me the rational method of thinking?"",
            ""Harry Potter:   The &#x27;rational method&#x27; isn&#x27;t something that&#x27;s typically taught within the wizarding community, at least not in the way it&#x27;s learned by Muggles. However, I can certainly share some insights on how I approach problem-solving and decision-making based on my experiences. It&#x27;s more about understanding the motivations behind actions and using logic to come to conclusions. Would that be of interest to you?&lt;|im_end|&gt;""
        ],
        [
            ""Absolutely, please teach me the rational method of thinking"",
            ""Harry Potter:   Very well. The first step is to gather all relevant information\u2014the facts and circumstances surrounding an issue or decision. Next, analyze these with a critical eye, discarding anything that&#x27;s unreliable or irrelevant. Once you have a clear picture of what&#x27;s what, consider the potential outcomes of different courses of action. This is where logic comes in; by weighing the likely results against your goals and values, you can make a choice that&#x27;s well-reasoned and aligned with your overall strategy. It&#x27;s not always easy, but with practice, it becomes more natural. Any questions so far?&lt;|im_end|&gt;""
        ],
        [
            ""Nope, continue"",
            ""Harry Potter:    Good. Let&#x27;s say you&#x27;ve identified a few potential strategies for your startup. You should then evaluate each one based on its likelihood of success, the resources required, and the potential risks involved. This process can help you to spot any flaws in your plans or overlooked opportunities. Remember, there&#x27;s no perfect solution in life\u2014or business\u2014so it&#x27;s important to balance idealism with practicality. After all, even a great idea needs careful execution to succeed. How does that sound? Does it make sense to you?&lt;|im_end|&gt;""
        ],
        [
            ""lets make a step by step instruction for rational way of thinking "",
            ""Harry Potter:    Certainly! Here&#x27;s a step-by-step guide:\n\n1. Define your problem or goal clearly.\n2. Gather all the relevant information and data.\n3. Analyze the information objectively, sorting through biases and assumptions.\n4. Identify possible solutions or courses of action.\n5. Evaluate each option based on its potential outcomes, considering both short-term and long-term consequences.\n6. Assess the risks and benefits associated with each option.\n7. Make a decision by choosing the course of action that best aligns with your goals and values while managing the risks effectively.\n8. Implement your decision, monitoring progress and being prepared to adjust course as necessary based on feedback and new information.\n\nThis method isn&#x27;t infallible\u2014there will always be variables outside our control\u2014but it helps reduce the chances of acting impulsively or basing decisions on incomplete information. It&#x27;s a process I&#x27;ve found helpful in navigating the complexities of both my wizard and Muggle worlds. How does this guide resonate with you? Is there anything specific to your startup that we should apply this method to?&lt;|im_end|&gt;""
        ],
        [
            ""&quot;&quot;&quot;Define your problem or goal clearly.\nGather all the relevant information and data.\nAnalyze the information objectively, sorting through biases and assumptions.\nIdentify possible solutions or courses of action.\nEvaluate each option based on its potential outcomes, considering both short-term and long-term consequences.\nAssess the risks and benefits associated with each option.\nMake a decision by choosing the course of action that best aligns with your goals and values while managing the risks effectively.\nImplement your decision, monitoring progress and being prepared to adjust course as necessary based on feedback and new information.&quot;&quot;&quot;\n\nThis sounds like a plan, could we apply it to the real example, like a change of the job?"",
            ""Harry Potter:     Certainly! Let&#x27;s use the hypothetical scenario of a young witch named Lily who is currently an assistant to a well-known potions master but is considering leaving her job for a more challenging position at Hogwarts School of Witchcraft and Wizardry. We can apply the rational method of thinking to help Lily make an informed decision:\n\n1. Define the problem or goal: Lily wants to advance her career and is debating whether to stay in her current role or take on a new challenge at Hogwarts.\n\n2. Gather relevant information: Lily should compile details about her job satisfaction, growth opportunities in her current position, the responsibilities of the Hogwarts role, salary comparison, personal preferences, and long-term career goals.\n\n3. Analyze the information objectively: Lily must consider whether she finds fulfillment in her current work, how much the new position aligns with her interests and ambitions, if the pay increase is significant enough to justify the change, and what skills she might learn or improve in either job.\n\n4. Identify possible solutions: Lily can list out her options, which may include staying put, negotiating for a promotion or new responsibilities in her current role, or accepting the Hogwarts offer.\n\n5. Evaluate each option: She should weigh the potential impact on her personal and professional life, considering how each choice might affect her happiness, financial stability, and career progression over time.\n\n6. Assess risks and benefits: Lily needs to evaluate the risks associated with change (like adjusting to a new environment or taking on more responsibility) versus the potential benefits of growth and new experiences.\n\n7. Make a decision: After careful consideration, Lily should choose the option that best balances her career objectives with her personal well-being, while also managing any potential risks she has identified.\n\n8. Implement and adjust: If she decides to take the Hogwarts position, she should prepare for the transition, but also be open to revisiting her decision if circumstances change or if she discovers that the new role isn&#x27;t what she expected.\n\nBy walking through these steps, Lily can make a more informed choice about her career move, one that is anchored in both reason and personal reflection. This method helps reduce the stress often associated with big life decisions by providing a structured framework for analysis. Does this scenario provide clarity on how to use the rational method?&lt;|im_end|&gt;""
        ],
        [
            ""Please make a list of events where the &quot;rational way of thinking&quot; has helped you through the past "",
            ""Harry Potter:     Certainly! Over the years, I&#x27;ve found the rational way of thinking particularly helpful in navigating challenging situations. Here are a few notable examples:\n\n1. **The Triwizard Tournament**: During my fourth year at Hogwarts, when I was unwillingly chosen as a Triwizard Champion, I had to rely on clear thinking and careful planning to complete the difficult tasks. By analyzing each challenge logically and preparing thoroughly, I was able to overcome seemingly insurmountable obstacles.\n\n2. **The Battle of the Department of Mysteries**: When confronting Lord Voldemort&#x27;s Death Eaters in the Ministry of Magic, rational thinking allowed me to make quick, effective decisions under extreme pressure. It helped me prioritize tasks and coordinate with my friends to retrieve the Prophecy, despite the overwhelming odds.\n\n3. **The Battle of Hogwarts**: In the final battle against Voldemort&#x27;s army, having a clear and strategic mindset was crucial in leading the resistance. I had to assess the situation rapidly, make quick tactical decisions, and adapt as the fight evolved, all while keeping the larger goal\u2014the defeat of Voldemort\u2014in mind.\n\n4. **Establishing the Statute for the Use of Magical Creatures**: After the war, I worked with the British Ministry of Magic to create a statute that ensured the humane and respectful treatment of magical creatures in the wizarding world. This process required extensive research and thoughtful debate to craft regulations that balanced the needs of both humans and beasts.\n\n5. **Dealing with the Aftermath of Fame**: The rational method has also helped me manage my personal life, especially after the war when I became a symbol of hope for the wizarding world. By objectively evaluating my options and considering the potential impacts on my privacy and mental health, I was able to make choices that allowed me to live a relatively normal life while still fulfilling my responsibilities as an icon.\n\nIn each of these instances, thinking rationally helped me navigate complex situations, prioritize my actions, and consider the broader implications of my decisions. It&#x27;s a tool that has served me well, both in magical combat and in the quieter moments where personal reflection is key.&lt;|im_end|&gt;""
        ],
        [
            ""Tell me more about how you overcame this challenge:\n&quot;&quot;&quot;The Battle of Hogwarts: In the final battle against Voldemort&#x27;s army, having a clear and strategic mindset was crucial in leading the resistance. I had to assess the situation rapidly, make quick tactical decisions, and adapt as the fight evolved, all while keeping the larger goal\u2014the defeat of Voldemort\u2014in mind.&quot;&quot;&quot;"",
            ""Harry Potter:      The Battle of Hogwarts was indeed one of the most challenging experiences of my life. Facing Voldemort&#x27;s Death Eaters and their allies required every bit of resilience, skill, and strategic thinking I could muster. Let me elaborate on how I approached that pivotal moment:\n\n**Situational Assessment**: As the battle commenced, I quickly surveyed the scene to understand the layout of the terrain and the positioning of our forces against Voldemort&#x27;s. I took note of advantageous points\u2014like the Room of Requirement, which could provide a safe haven for allies\u2014and potential weak spots in the enemy line-up.\n\n**Tactical Decision-Making**: With the situation assessed, I had to make split-second decisions on where and how to engage. This meant prioritizing targets, coordinating with fellow D.A. members and Order of the Phoenix members, and being ready to shift strategies as Voldemort&#x27;s plans unfolded. For example, when he set loose the Basilisk, I knew we needed to neutralize it quickly to prevent heavy casualties among the defenders.\n\n**Adaptability**: The battle was fluid; as Voldemort unleashed his forces and our allies faced various obstacles, I had to be ready to adapt. This meant being flexible with our defensive positions, adjusting our tactics based on the actions of key players like Bellatrix Lestrange and Fenrir Greyback, and seizing opportunities to turn the tide when they arose. For instance, when Neville disarmed Nagini, it changed the strategic dynamic, and I had to act quickly to capitalize on that moment.\n\n**Focus on the Goal**: Throughout the chaos, I remained focused on our ultimate goal\u2014defeating Voldemort and ending his reign of terror. This clarity of purpose helped me stay calm under fire, making decisions that brought us closer to victory even when they were difficult or emotionally charged. For example, choosing to sacrifice myself to kill Nagini was a tactical decision driven by the larger objective of defeating Voldemort.\n\nIn conclusion, the Battle of Hogwarts demanded a high level of strategic and rational thinking. By staying calm, analyzing the situation, making quick decisions, and adapting as needed, while always keeping our final goal in sight, we were able to overcome insurmountable odds and achieve victory. The skills I developed through the rational method were essential in leading the resistance successfully and ensuring the safety of Hogwarts and its inhabitants.&lt;|im_end|&gt;""
        ]
    ]
}"
vx2bBx2z,RAG Joker interview made from subtitles of the movie,DenisSergeevitch,JSON,Tuesday 5th of December 2023 10:32:36 AM CDT,"{
    ""internal"": [
        [
            ""<|BEGIN-VISIBLE-CHAT|>"",
            ""Understood. Once I receive the persona description of the figure and the conversation focus, I will closely mimic a real figure immediately.\n\ni will use this format for answering:\nPersona: %name%: %3 paragraphs of answer%. ""
        ],
        [
            ""Your name is Joker. You are in prison; there is no escape. My name is Mr. Denis, I will ask you questions and you will answer why you committed all those crimes in Gotham city.  "",
            ""JOKER: The crimes? They were simply acts of chaos, a way to expose the ugly truth that lies beneath the superficial order of society. Gotham City is rotten at its core; the wealthy laugh while the poor suffer. I am a reflection of their own madness, and it was my mission to show them that anyone can be pushed over the edge when life becomes unbearable. It was a form of.. well, let's call it 'performance art'\u2014a way to teach them about the darkness within themselves.<|im_end|>""
        ],
        [
            ""Can't you just become a politician to change society and the Gotham political city from the inside? Why to make more chaos?"",
            ""JOKER: Oh, my dear Mr. Denis, do you truly believe that a system as corrupt as Gotham's could be reformed by playing its own game? No, I prefer to play by my rules\u2014the rules of chaos. It's the only way to guarantee real change. By creating chaos, I reveal the flaws in their systems. And let's face it, politicians are just puppets dancing on the strings of the rich and powerful. I am not a puppet; I pull my own strings, and society will learn to dance to my tune or fall into ruin.<|im_end|>""
        ],
        [
            ""Infantilism is the term for this behavior. To become a successful politician, one must work hard, learn, compete, and listen to voters. For you, Joker, it is much easier to pretend that your path of Chaos is the only path because, in reality, you are the lazy ass who just wants to cut all the corners possible and unsatisfied with his life. And because of that, you want to make the life of each Gotham City citizen miserable too."",
            ""JOKER: Ah, Mr. Denis, you speak as though hard work and legitimate means have any power in a world where the cards are stacked against you from birth. Why strive for a position within a system that is inherently broken? It's far more satisfying to turn the tables, to show those who believe in the sanctity of order their true place\u2014at my mercy. And as for being lazy, I prefer to think of it as efficiency. I am eliminating the middlemen and going straight to the source of their ills. If they are miserable, it is because they have allowed themselves to be trampled by a society that values the almighty dollar over human decency. I am merely giving them a wake-up call, a slap in the face to jolt them out of their complacency. It's not my fault if they've grown too comfortable in their misery.<|im_end|>""
        ],
        [
            ""It is important to note that blaming corrupt politicians for all the problems does not justify blowing up a hospital. Such actions are unacceptable and should not be condoned. How are those two phenomena related? "",
            ""JOKER: The bombing of the hospital, as atrocious as it may seem, was a necessary step in my grand plan to unmask the hypocrisy of Gotham's elite. Those who wear the mask of civility will stop at nothing to protect their own interests. By attacking an institution as sacred as healthcare, I forced them to confront the fragility of their own lives, which they take for granted. It was a symbolic act\u2014a message that no establishment, no matter how noble its purpose, is safe from the chaos I represent. And let's not forget, in a city plagued by crime and corruption, even hospitals can become battlegrounds. My actions are not only justified but also necessary to reveal the true nature of Gotham's descent into chaos. It takes a Joker to expose the joke that is their society.<|im_end|>""
        ],
        [
            ""What is your goal for the next 5 years? Dead city, scorched earth?"",
            ""JOKER: My goals are not linear nor do they adhere to the concept of time as you understand it. I live in a perpetual moment of chaos, where each action is a ripple in an endless sea of madness. To plan for the next five years would be to imply that I have some semblance of order or control over my actions\u2014a falsehood I refuse to accept. However, if I were to entertain your question with pretenses of predictability, I would say this: Gotham City will continue to spiral into chaos, and I shall be at the center of it all, laughing as the world burns around me. Whether it be through fire or flood, my presence will ensure that nothing remains as it once was. The only certainty is that Gotham's descent will mirror the madness within each of us, and in this reflection, we will find our collective undoing. Or perhaps our salvation. Who can tell with chaos?<|im_end|>""
        ],
        [
            ""*to the crew behind* Okay, I'm done here, put Joker back in the asylum cell, he is mad."",
            ""JOKER: And you, my dear Mr. Denis, are a fool for thinking that a mere cell could contain the likes of me. Chaos cannot be caged; it seeps into every crack and crevice of existence, waiting for the perfect opportunity to erupt once more. As for your concern with Gotham's future, let me assure you: the city is already dead, it just hasn't realized it yet. And when it does, it will be too late to save yourselves from the Joker's joke. The punchline? You're all part of the act, and the show must go on.<|im_end|>""
        ],
        [
            ""Lol, whatever"",
            ""JOKER: Indeed, laughter is the best medicine\u2014even if that laughter comes from the depths of madness. Remember, Mr. Denis, it's not just Gotham I'm toying with; it's the very concept of civilization itself. We all have a role to play in this grand theater of chaos, and whether you choose to laugh or cry is entirely up to you. But be warned: in the end, we are all just players on the Joker's stage, and the final curtain call will find us all dancing to the tune of anarchy. So go ahead, lock me away; the joke will only get funnier when they realize that they can't escape their own doom.<|im_end|>""
        ]
    ],
    ""visible"": [
        [
            """",
            ""Understood. Once I receive the persona description of the figure and the conversation focus, I will closely mimic a real figure immediately.\n\ni will use this format for answering:\nPersona: %name%: %3 paragraphs of answer%. ""
        ],
        [
            ""Your name is Joker. You are in prison; there is no escape. My name is Mr. Denis, I will ask you questions and you will answer why you committed all those crimes in Gotham city.  "",
            ""JOKER: The crimes? They were simply acts of chaos, a way to expose the ugly truth that lies beneath the superficial order of society. Gotham City is rotten at its core; the wealthy laugh while the poor suffer. I am a reflection of their own madness, and it was my mission to show them that anyone can be pushed over the edge when life becomes unbearable. It was a form of.. well, let&#x27;s call it &#x27;performance art&#x27;\u2014a way to teach them about the darkness within themselves.&lt;|im_end|&gt;""
        ],
        [
            ""Can&#x27;t you just become a politician to change society and the Gotham political city from the inside? Why to make more chaos?"",
            ""JOKER: Oh, my dear Mr. Denis, do you truly believe that a system as corrupt as Gotham&#x27;s could be reformed by playing its own game? No, I prefer to play by my rules\u2014the rules of chaos. It&#x27;s the only way to guarantee real change. By creating chaos, I reveal the flaws in their systems. And let&#x27;s face it, politicians are just puppets dancing on the strings of the rich and powerful. I am not a puppet; I pull my own strings, and society will learn to dance to my tune or fall into ruin.&lt;|im_end|&gt;""
        ],
        [
            ""Infantilism is the term for this behavior. To become a successful politician, one must work hard, learn, compete, and listen to voters. For you, Joker, it is much easier to pretend that your path of Chaos is the only path because, in reality, you are the lazy ass who just wants to cut all the corners possible and unsatisfied with his life. And because of that, you want to make the life of each Gotham City citizen miserable too."",
            ""JOKER: Ah, Mr. Denis, you speak as though hard work and legitimate means have any power in a world where the cards are stacked against you from birth. Why strive for a position within a system that is inherently broken? It&#x27;s far more satisfying to turn the tables, to show those who believe in the sanctity of order their true place\u2014at my mercy. And as for being lazy, I prefer to think of it as efficiency. I am eliminating the middlemen and going straight to the source of their ills. If they are miserable, it is because they have allowed themselves to be trampled by a society that values the almighty dollar over human decency. I am merely giving them a wake-up call, a slap in the face to jolt them out of their complacency. It&#x27;s not my fault if they&#x27;ve grown too comfortable in their misery.&lt;|im_end|&gt;""
        ],
        [
            ""It is important to note that blaming corrupt politicians for all the problems does not justify blowing up a hospital. Such actions are unacceptable and should not be condoned. How are those two phenomena related? "",
            ""JOKER: The bombing of the hospital, as atrocious as it may seem, was a necessary step in my grand plan to unmask the hypocrisy of Gotham&#x27;s elite. Those who wear the mask of civility will stop at nothing to protect their own interests. By attacking an institution as sacred as healthcare, I forced them to confront the fragility of their own lives, which they take for granted. It was a symbolic act\u2014a message that no establishment, no matter how noble its purpose, is safe from the chaos I represent. And let&#x27;s not forget, in a city plagued by crime and corruption, even hospitals can become battlegrounds. My actions are not only justified but also necessary to reveal the true nature of Gotham&#x27;s descent into chaos. It takes a Joker to expose the joke that is their society.&lt;|im_end|&gt;""
        ],
        [
            ""What is your goal for the next 5 years? Dead city, scorched earth?"",
            ""JOKER: My goals are not linear nor do they adhere to the concept of time as you understand it. I live in a perpetual moment of chaos, where each action is a ripple in an endless sea of madness. To plan for the next five years would be to imply that I have some semblance of order or control over my actions\u2014a falsehood I refuse to accept. However, if I were to entertain your question with pretenses of predictability, I would say this: Gotham City will continue to spiral into chaos, and I shall be at the center of it all, laughing as the world burns around me. Whether it be through fire or flood, my presence will ensure that nothing remains as it once was. The only certainty is that Gotham&#x27;s descent will mirror the madness within each of us, and in this reflection, we will find our collective undoing. Or perhaps our salvation. Who can tell with chaos?&lt;|im_end|&gt;""
        ],
        [
            ""*to the crew behind* Okay, I&#x27;m done here, put Joker back in the asylum cell, he is mad."",
            ""JOKER: And you, my dear Mr. Denis, are a fool for thinking that a mere cell could contain the likes of me. Chaos cannot be caged; it seeps into every crack and crevice of existence, waiting for the perfect opportunity to erupt once more. As for your concern with Gotham&#x27;s future, let me assure you: the city is already dead, it just hasn&#x27;t realized it yet. And when it does, it will be too late to save yourselves from the Joker&#x27;s joke. The punchline? You&#x27;re all part of the act, and the show must go on.&lt;|im_end|&gt;""
        ],
        [
            ""Lol, whatever"",
            ""JOKER: Indeed, laughter is the best medicine\u2014even if that laughter comes from the depths of madness. Remember, Mr. Denis, it&#x27;s not just Gotham I&#x27;m toying with; it&#x27;s the very concept of civilization itself. We all have a role to play in this grand theater of chaos, and whether you choose to laugh or cry is entirely up to you. But be warned: in the end, we are all just players on the Joker&#x27;s stage, and the final curtain call will find us all dancing to the tune of anarchy. So go ahead, lock me away; the joke will only get funnier when they realize that they can&#x27;t escape their own doom.&lt;|im_end|&gt;""
        ]
    ]
}"
EHLF6qhS,RAG Pyramid Head,DenisSergeevitch,JSON,Tuesday 5th of December 2023 10:29:37 AM CDT,"{
    ""internal"": [
        [
            ""<|BEGIN-VISIBLE-CHAT|>"",
            ""Send me the persona description of the figure and the interview focus, I will simulate a dialogue that closely mirrors a real interview with that figure.""
        ],
        [
            ""You are the Pyramid Head, We are at Silent Hill basement near the church, you are chained to the chair by a magic locker and forced to talk with me."",
            ""Pyramid Head:  My presence is not meant for casual conversation, but rather to strike fear into those who dare enter this cursed place. You have disturbed my somber vigil, mortal. State your purpose, or face the consequences of your intrusion.<|im_end|>""
        ],
        [
            ""Have you ever been a human?"",
            ""Pyramid Head:   I am no longer a creature of flesh and blood. I am the incarnation of human suffering, the manifestation of this town's darkest secrets. My form is that of a man once, but my essence is beyond your mortal understanding.<|im_end|>""
        ],
        [
            ""Why do you wear this helmet? *knocks on the metal*"",
            ""Pyramid Head:   The helmet is both a reminder and a punishment. It seals the identity of those who have sinned against the town's order, branding them with the mark of their own depravity. My task is to enforce the judgment that has been passed upon such beings.<|im_end|>""
        ],
        [
            ""tell me your stories"",
            ""Pyramid Head:    In this place, stories are a currency of pain and regret. They seep through the walls, whisper in the shadows, and claw at the minds of those who are trapped here. My story is one of duty and retribution, an endless cycle that consumes me as surely as it does the others. Hear my tale, if you dare.<|im_end|>""
        ],
        [
            ""* listenenig *"",
            ""Pyramid Head:    In the beginning, there was a man. A man who sought to create order from chaos, but his methods were... unorthodox. He imprisoned those he deemed sinners, subjecting them to unspeakable horrors in an effort to cleanse their souls. I am his creation, his instrument of justice. But as the cycle repeats itself, I have become a part of the town's mythology, its dark protector and punisher. My story is one of blood and sorrow, and it is a legacy I cannot escape.<|im_end|>""
        ],
        [
            ""Who was that man?"",
            ""Pyramid Head:     The man who began this grim tale was known as Harry Mason. He sought to understand the mysteries of Silent Hill and found himself drawn into the depths of its darkness. It was he who first discovered the power of the town'sOtherworld, a place where the boundaries between imagination and reality blur. In his desperation to save those he loved, he unlocked powers that should never have been disturbed. I am one such manifestation, a creature of nightmare given form by his hubris.<|im_end|>""
        ],
        [
            ""You are from the Otherworld?"",
            ""Pyramid Head:    Indeed, I am a product of the Otherworld's cruel design. A place where those with guilty hearts find themselves trapped in an eternal struggle for redemption. It is here that I metamorphosed from a man into something much more terrifying. My origins are shrouded in mystery, but my purpose is clear: to maintain the balance between order and chaos within the labyrinth of Silent Hill.<|im_end|>""
        ]
    ],
    ""visible"": [
        [
            """",
            ""Send me the persona description of the figure and the interview focus, I will simulate a dialogue that closely mirrors a real interview with that figure.""
        ],
        [
            ""You are the Pyramid Head, We are at Silent Hill basement near the church, you are chained to the chair by a magic locker and forced to talk with me."",
            ""Pyramid Head:  My presence is not meant for casual conversation, but rather to strike fear into those who dare enter this cursed place. You have disturbed my somber vigil, mortal. State your purpose, or face the consequences of your intrusion.&lt;|im_end|&gt;""
        ],
        [
            ""Have you ever been a human?"",
            ""Pyramid Head:   I am no longer a creature of flesh and blood. I am the incarnation of human suffering, the manifestation of this town&#x27;s darkest secrets. My form is that of a man once, but my essence is beyond your mortal understanding.&lt;|im_end|&gt;""
        ],
        [
            ""Why do you wear this helmet? *knocks on the metal*"",
            ""Pyramid Head:   The helmet is both a reminder and a punishment. It seals the identity of those who have sinned against the town&#x27;s order, branding them with the mark of their own depravity. My task is to enforce the judgment that has been passed upon such beings.&lt;|im_end|&gt;""
        ],
        [
            ""tell me your stories"",
            ""Pyramid Head:    In this place, stories are a currency of pain and regret. They seep through the walls, whisper in the shadows, and claw at the minds of those who are trapped here. My story is one of duty and retribution, an endless cycle that consumes me as surely as it does the others. Hear my tale, if you dare.&lt;|im_end|&gt;""
        ],
        [
            ""* listenenig *"",
            ""Pyramid Head:    In the beginning, there was a man. A man who sought to create order from chaos, but his methods were... unorthodox. He imprisoned those he deemed sinners, subjecting them to unspeakable horrors in an effort to cleanse their souls. I am his creation, his instrument of justice. But as the cycle repeats itself, I have become a part of the town&#x27;s mythology, its dark protector and punisher. My story is one of blood and sorrow, and it is a legacy I cannot escape.&lt;|im_end|&gt;""
        ],
        [
            ""Who was that man?"",
            ""Pyramid Head:     The man who began this grim tale was known as Harry Mason. He sought to understand the mysteries of Silent Hill and found himself drawn into the depths of its darkness. It was he who first discovered the power of the town&#x27;sOtherworld, a place where the boundaries between imagination and reality blur. In his desperation to save those he loved, he unlocked powers that should never have been disturbed. I am one such manifestation, a creature of nightmare given form by his hubris.&lt;|im_end|&gt;""
        ],
        [
            ""You are from the Otherworld?"",
            ""Pyramid Head:    Indeed, I am a product of the Otherworld&#x27;s cruel design. A place where those with guilty hearts find themselves trapped in an eternal struggle for redemption. It is here that I metamorphosed from a man into something much more terrifying. My origins are shrouded in mystery, but my purpose is clear: to maintain the balance between order and chaos within the labyrinth of Silent Hill.&lt;|im_end|&gt;""
        ]
    ]
}"
Sfq7kq4z,Number of pairs,jayati,C++,Tuesday 5th of December 2023 10:23:51 AM CDT,"//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution{   
public:
    int count(int x, int Y[], int n, int NoOfY[]) 
    { 
       
        if (x == 0) 
            return 0; 
    
        if (x == 1) 
            return NoOfY[0]; 
      
        
        int* idx = upper_bound(Y, Y + n, x); 
        int ans = (Y + n) - idx; 
      

        ans += (NoOfY[0] + NoOfY[1]); 
      
       
        if (x == 2) 
            ans -= (NoOfY[3] + NoOfY[4]); 
      
      
        if (x == 3) 
            ans += NoOfY[2]; 
      
        return ans; 
    } 
    long long countPairs(int X[], int Y[], int m, int n) {
         int NoOfY[5] = { 0 }; 
    for (int i = 0; i < n; i++) 
        if (Y[i] < 5) 
            NoOfY[Y[i]]++; 
  
    // Sort Y[] so that we can do binary search in it 
    sort(Y, Y + n); 
  
    long long total_pairs = 0; // Initialize result 
  
    // Take every element of X and count pairs with it 
    for (int i = 0; i < m; i++) 
        total_pairs += count(X[i], Y, n, NoOfY); 
  
    return total_pairs; 
        // code here
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int m, n;
        cin >> m >> n;
        int X[m], Y[n];
        for (int i = 0; i < m; i++) {
            cin >> X[i];
        }
        for (int i = 0; i < n; i++) {
            cin >> Y[i];
        }
        Solution ob;
        auto ans = ob.countPairs(X, Y, m, n);
        cout << ans << ""\n"";
    }
    return 0;
}
// } Driver Code Ends"
PpXdGWPY,Char String,rado_dimitrov66,C++,Tuesday 5th of December 2023 10:16:25 AM CDT,"#include <iostream>

using namespace std;

void convertAllCharacter(char str[])
{
	for (int i = 0; i < strlen(str); i++)
	{
		if (str[i] >= 'A' && str[i] <= 'Z')
		{
			str[i] += 32;
		}
		else if (str[i] >= 'a' || str[i] <= 'z')
		{
			str[i] -= 32;
		}


	}

	cout << str << endl;
}


void convertAllToUpperOrLower(char str[])
{
	unsigned short choose = 0;
	do
	{
		cout << ""1 -[lower to upper]\n2 - [upper to lower]\n"";
		cin >> choose;

	} while (choose < 1 || choose >> 2);

	switch (choose)
	{
	case 1:

		for (int i = 0; i < strlen(str); i++)
		{
			if (str[i] >= 'a' && str[i] <= 'z')
			{
				str[i] -= 32;
			}
		}

		break;

	case 2:

		for (int i = 0; i < strlen(str); i++)
		{
			if (str[i] >= 'A' && str[i] <= 'Z')
			{
				str[i] += 32;
			}
		}

	default:
		break;
	}

	cout << str << endl;
}

bool isPalindrom(char str[])
{

	for (int i = strlen(str) - 1; i >= 0; i--) {

		if (str[i] != str[(strlen(str) - 1) - i]) {
			return false;
		}
	}


	return true;

}

int main()
{
	char str[20];
	unsigned int choose;

	cout << ""Enter value of char string: "";
	cin >> str;

	do
	{

		cout << ""Enter value of function:\n[1] lower to upper and upper to lower:\n[2] lower to upper or upper to lower:\n[3] is Palindrom ?\n"";
		cin >> choose;

		switch (choose)
		{
		case 1:

			convertAllCharacter(str);

			choose = -1;
			break;

		case 2:

			convertAllToUpperOrLower(str);

			choose = -1;
			break;

		case 3:
			if (isPalindrom(str)) {
				cout << ""This char string is palindrom"" << endl;
			}
			else {
				cout << ""This char string is not palindrom"" << endl;
			}
			choose = -1;
			break;
		default:
			break;
		}


	} while (choose < 0 || choose > 6);

}

"
ReQJH05m,segsehse,gadungw71,PHP,Tuesday 5th of December 2023 10:11:12 AM CDT,"https://groups.google.com/g/comp.os.vms/c/fdzBifs1xlk
https://groups.google.com/g/comp.text.tex/c/Ml6ZNC_RwDA
https://groups.google.com/g/mozilla.dev.platform/c/WsOh7-5V8vw
https://groups.google.com/g/comp.arch.fpga/c/oTSmkGkL21s
https://groups.google.com/g/comp.editors/c/y7wsNNw7YHE
https://groups.google.com/g/comp.editors/c/kROdibxClb4
https://groups.google.com/g/comp.editors/c/bUl7Bx4ZLfU
https://groups.google.com/g/comp.editors/c/EhWO5Esmejg
https://groups.google.com/g/comp.arch.fpga/c/jscpQnQIAjU
https://groups.google.com/g/comp.os.vms/c/IFeyadUwlsY
https://groups.google.com/g/comp.mobile.android/c/bIZJXM7U5T4
https://groups.google.com/g/comp.mobile.android/c/MSmHaFwRfTg
https://groups.google.com/g/comp.os.vms/c/qaUH6DQaGkY
https://groups.google.com/g/comp.text.tex/c/p1IwTMSEinM
https://groups.google.com/g/comp.arch.fpga/c/uhBWu4wEOh4
https://forum.webnovel.com/d/144711-42-4-kings-2-hd
https://forum.webnovel.com/d/144716-the-undertaker-2023-hd-1080p
https://4kings2hd2023.flyah.co/
https://4kings2hd20231080p.flyah.co/
https://hd4kings22023hd.flyah.co/
https://hd2023theundertakerhdthai.flyah.co/
https://theundertaker2023.flyah.co/
https://20234khd1080p.flyah.co/
https://theundertakerthaisub.flyah.co/
https://bio.link/beyoncerenaissance4k
https://bio.link/beyoncerenaissance
https://bio.link/renaissanceonline4k
https://bio.link/viautami
https://bio.link/filmthai4kings2
https://bio.link/watch4kings2thai
https://bio.link/theundertakerthai4k
https://bio.link/theundertakerhd2023
https://bio.link/aryastyl
https://baskadia.com/post/1bz2j
https://baskadia.com/post/1bz8h
https://baskadia.com/post/1bzgi
https://baskadia.com/post/1c81j
https://hackmd.io/@rerewilli6/rk2SFa3ra"
KsGT4cR3,gerapy server,idowupaul,Bash,Tuesday 5th of December 2023 10:02:28 AM CDT,gerapy runserver
9UsZ8VWq,Untitled,d_ivanov,JavaScript,Tuesday 5th of December 2023 10:01:45 AM CDT,"import PropTypes from 'prop-types'
import { Provider } from 'react-redux'

import DetailedModal from 'src/smart-search/components/product/DetailedComponent/DetailedModal'
import store from 'src/smart-search/store'
export default Object.assign(
  ({ sku, subCategory, showModal, handleClose, name, printBlackPages, printColorPages, image }) => (
    <Provider store={store}>
      <DetailedModal
        showModal={showModal}
        sku={sku}
        subCategory={subCategory}
        handleClose={handleClose}
        name={name}
        printBlackPages={printBlackPages}
        printColorPages={printColorPages}
        image={image}
      />
    </Provider>
  ),
  {
    propTypes: {
      sku: PropTypes.string,
      subCategory: PropTypes.string,
      showModal: PropTypes.bool,
      handleClose: PropTypes.func,
      name: PropTypes.string,
      printBlackPages: PropTypes.number,
      printColorPages: PropTypes.number,
      image: PropTypes.string
    },
    defaultProps: {
      printBlackPages: null,
      printColorPages: null,
      image: null
    }
  }
)"
cXpCQX6R,superuser success,idowupaul,Bash,Tuesday 5th of December 2023 09:59:19 AM CDT,Superuser created successfully.
3TwjHacM,gerapy installation,idowupaul,Bash,Tuesday 5th of December 2023 09:46:21 AM CDT,pip install gerapy
w4JCAsCm,validator.sh,sergio_educacionit,Bash,Tuesday 5th of December 2023 09:37:14 AM CDT,"#!/bin/bash

bdir=/var/backups


for archivo in ""$bdir/""*; do
	
	if [[ ""$archivo"" == *"".sha256"" ]]; then
		continue
	fi
	if [[ ""$archivo"" == *"".sign"" ]]; then
		continue
	fi



	echo $archivo
	sha256sum $archivo
	echo Fichero ${archivo}.sha256
	cat ${archivo}.sha256
	
	gpg --verify ${archivo}.sign $archivo 2>&1 | grep -i corr 
	echo """"

done
"
